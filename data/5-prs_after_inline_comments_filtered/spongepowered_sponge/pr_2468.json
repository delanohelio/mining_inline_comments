{"pr_number": 2468, "pr_title": "Implement all missing entities and remove overrides on default impl data values.  [1.14]", "pr_createdAt": "2020-01-05T06:29:46Z", "pr_url": "https://github.com/SpongePowered/Sponge/pull/2468", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3NDYwMA==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r363074600", "bodyText": "if this is being added, please make sure it's prefixed by the package it's being added from (in this case api$projectileSource). It helps when debugging and whatnot to see what fields are being added from where.", "author": "gabizou", "createdAt": "2020-01-05T07:29:07Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/projectile/EvokerFangsEntityMixin_API.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package org.spongepowered.common.mixin.api.mcp.entity.projectile;\n+\n+import net.minecraft.entity.Entity;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.projectile.EvokerFangsEntity;\n+import org.spongepowered.api.entity.projectile.EvokerFangs;\n+import org.spongepowered.api.projectile.source.ProjectileSource;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.common.mixin.api.mcp.entity.EntityMixin_API;\n+\n+import javax.annotation.Nullable;\n+\n+@Mixin(EvokerFangsEntity.class)\n+public abstract class EvokerFangsEntityMixin_API extends EntityMixin_API implements EvokerFangs {\n+\n+    @Shadow private LivingEntity caster;\n+\n+    // Not all ProjectileSources are entities (e.g. BlockProjectileSource).\n+    // This field is used to store a ProjectileSource that isn't an entity.\n+    @Nullable\n+    public ProjectileSource projectileSource;", "originalCommit": "fb2678d5d18526dfc455f311793a2ae412d14f36", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEwODEzMw==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r363108133", "bodyText": "Keep @nullable on same line as well.", "author": "Zidane", "createdAt": "2020-01-05T18:03:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3NDYwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3NDYxOA==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r363074618", "bodyText": "License format.", "author": "gabizou", "createdAt": "2020-01-05T07:29:55Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/passive/horse/TraderLlamaEntityMixin_API.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package org.spongepowered.common.mixin.api.mcp.entity.passive.horse;", "originalCommit": "fb2678d5d18526dfc455f311793a2ae412d14f36", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEwODE5Nw==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r363108197", "bodyText": "Remove these override that implement data methods. All data methods in the API are to be default implemented so that it all flows through the DataProvider system. If you find any interfaces that return a data instance that aren't default implemented, do us up a PR to fix that.", "author": "Zidane", "createdAt": "2020-01-05T18:04:40Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/AreaEffectCloudEntityMixin_API.java", "diffHunk": "@@ -83,7 +84,7 @@ public AreaEffectCloudData getAreaEffectCloudData() {\n     }\n \n     @Override\n-    public Mutable<Color> color() {\n+    public Value.Mutable<Color> color() {", "originalCommit": "fb2678d5d18526dfc455f311793a2ae412d14f36", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a19e559ac1e223c586dfafea06d3225024c8035f", "url": "https://github.com/SpongePowered/Sponge/commit/a19e559ac1e223c586dfafea06d3225024c8035f", "message": "Implement all missing entities from 1.14.", "committedDate": "2020-01-05T18:54:13Z", "type": "forcePushed"}, {"oid": "0334629d5d6906a0ec4160eb6ce0273fc93727bb", "url": "https://github.com/SpongePowered/Sponge/commit/0334629d5d6906a0ec4160eb6ce0273fc93727bb", "message": "Implement all missing entities from 1.14 and remove old implementations of data values which override default methods.", "committedDate": "2020-01-05T22:18:17Z", "type": "forcePushed"}, {"oid": "fe5af9464eb90276488b07faae18cb5186898d7c", "url": "https://github.com/SpongePowered/Sponge/commit/fe5af9464eb90276488b07faae18cb5186898d7c", "message": "Implement all missing entities from 1.14 and remove old implementations of data values which override default methods.\n\nThe real big one, add api$getVanillaValues to all entities and implement about 90% of the adding to Sets", "committedDate": "2020-01-08T04:22:40Z", "type": "forcePushed"}, {"oid": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "url": "https://github.com/SpongePowered/Sponge/commit/dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "message": "Implement all missing entities from 1.14 and remove old implementations of data values which override default methods.\n\nThe real big one, add api$getVanillaValues to all entities and implement about 90% of the adding to Sets", "committedDate": "2020-01-08T04:24:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA2MTExNw==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364061117", "bodyText": "We'll need to add Optional<Value> to the Entity interfaces that have Values that may not exist so that everything goes through the DataProvider system and call that instead.", "author": "Zidane", "createdAt": "2020-01-08T04:38:16Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/monster/PatrollerEntityMixin_API.java", "diffHunk": "@@ -25,18 +25,37 @@\n package org.spongepowered.common.mixin.api.mcp.entity.monster;\n \n import net.minecraft.entity.monster.PatrollerEntity;\n+import net.minecraft.util.math.BlockPos;\n+import org.spongepowered.api.data.value.Value;\n import org.spongepowered.api.entity.living.monster.Patroller;\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.asm.mixin.Shadow;\n \n+import java.util.Set;\n+\n @Mixin(PatrollerEntity.class)\n public abstract class PatrollerEntityMixin_API extends MonsterEntityMixin_API implements Patroller {\n \n+    @Shadow private BlockPos patrolTarget;\n     @Shadow public abstract void shadow$resetPatrolTarget();\n \n     @Override\n     public void findPatrolTarget() {\n         this.shadow$resetPatrolTarget();\n     }\n \n+    @Override\n+    protected Set<Value.Immutable<?>> api$getVanillaValues() {\n+        final Set<Value.Immutable<?>> vanillaValues = super.api$getVanillaValues();\n+\n+        if (this.patrolTarget != null) {", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMxNTAyOA==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364315028", "bodyText": "Remove the if and the method targetPosition is going through the provider system.", "author": "gabizou", "createdAt": "2020-01-08T16:14:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA2MTExNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMxMDA4Ng==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364310086", "bodyText": "License", "author": "gabizou", "createdAt": "2020-01-08T16:05:40Z", "path": "src/main/java/org/spongepowered/common/mixin/accessor/entity/passive/FoxEntityAccessor.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package org.spongepowered.common.mixin.accessor.entity.passive;", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMxMDkwOA==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364310908", "bodyText": "Using this api method is fine. It's an implementation toggle whether the PhaseTracker will be enabled to track Owner/Notifier information (see ChunkMixin_Tracker etc.)", "author": "gabizou", "createdAt": "2020-01-08T16:07:09Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/EntityMixin_API.java", "diffHunk": "@@ -656,4 +648,29 @@ public EntityArchetype createArchetype() {\n         manipulators.add(new SpongeGravityData(!this.hasNoGravity()));\n     }\n \n+    @Override\n+    public Set<Value.Immutable<?>> getValues() {\n+        return this.api$getVanillaValues();\n+    }\n+\n+    protected Set<Value.Immutable<?>> api$getVanillaValues() {\n+        final Set<Value.Immutable<?>> vanillaValues = new HashSet<>();\n+\n+        vanillaValues.add(this.displayName().asImmutable());\n+        vanillaValues.add(this.passengers().asImmutable());\n+        vanillaValues.add(this.onGround().asImmutable());\n+        vanillaValues.add(this.velocity().asImmutable());\n+        vanillaValues.add(this.gravity().asImmutable());\n+\n+        if (this.shadow$getLowestRidingEntity() != null) {\n+            this.baseVehicle().map(Value::asImmutable).ifPresent(vanillaValues::add);\n+        }\n+\n+        // TODO How to get the creator and notifier?", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMxMTMyMQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364311321", "bodyText": "Fairly sure you're right with the former.", "author": "gabizou", "createdAt": "2020-01-08T16:07:54Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/MobEntityMixin_API.java", "diffHunk": "@@ -52,4 +54,17 @@\n         }\n         return Optional.empty();\n     }\n+\n+    @Override\n+    protected Set<Value.Immutable<?>> api$getVanillaValues() {\n+        Set<Value.Immutable<?>> vanillaValues = super.api$getVanillaValues();\n+\n+        vanillaValues.add(this.aiEnabled().asImmutable());\n+\n+        // TODO: is attackTarget the right one for targetEntity() or do I have to peek into the goalSelector", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMxMTcyNA==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364311724", "bodyText": "You can eliminate the if statement since the ifPresent will already redundantly add this.", "author": "gabizou", "createdAt": "2020-01-08T16:08:37Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/boss/dragon/EnderDragonEntityMixin_API.java", "diffHunk": "@@ -79,4 +81,16 @@ public ServerBossBar getBossBar() {\n     public DragonPhaseManager getPhaseManager() {\n         return (DragonPhaseManager) this.phaseManager;\n     }\n+\n+    @Override\n+    protected Set<Value.Immutable<?>> api$getVanillaValues() {\n+        final Set<Value.Immutable<?>> vanillaValues = super.api$getVanillaValues();\n+\n+        if (this.closestEnderCrystal != null) {", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMxMjIzMQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364312231", "bodyText": "Same with this.", "author": "gabizou", "createdAt": "2020-01-08T16:09:36Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/item/EnderCrystalEntityMixin_API.java", "diffHunk": "@@ -25,17 +25,41 @@\n package org.spongepowered.common.mixin.api.mcp.entity.item;\n \n import net.minecraft.entity.item.EnderCrystalEntity;\n+import net.minecraft.util.math.BlockPos;\n+import org.spongepowered.api.data.Keys;\n+import org.spongepowered.api.data.value.Value;\n import org.spongepowered.api.entity.explosive.EnderCrystal;\n import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n import org.spongepowered.common.bridge.entity.item.EnderCrystalEntityBridge;\n import org.spongepowered.common.mixin.api.mcp.entity.EntityMixin_API;\n \n+import javax.annotation.Nullable;\n+import java.util.Set;\n+\n @Mixin(EnderCrystalEntity.class)\n public abstract class EnderCrystalEntityMixin_API extends EntityMixin_API implements EnderCrystal {\n \n+    @Shadow @Nullable public abstract BlockPos shadow$getBeamTarget();\n+\n     @Override\n     public void detonate() {\n         this.setDead();\n         ((EnderCrystalEntityBridge) this).bridge$ThrowEventWithDetonation(this.world, null, this.posX, this.posY, this.posZ, true, null);\n     }\n+\n+    @Override\n+    protected Set<Value.Immutable<?>> api$getVanillaValues() {\n+        final Set<Value.Immutable<?>> vanillaValues = super.api$getVanillaValues();\n+\n+        if (this.shadow$getBeamTarget() != null) {", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMxMjk1OA==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364312958", "bodyText": "Same line annotation please, and prefix.", "author": "gabizou", "createdAt": "2020-01-08T16:10:58Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/item/ItemEntityMixin_API.java", "diffHunk": "@@ -26,30 +26,27 @@\n \n import net.minecraft.entity.item.ItemEntity;\n import net.minecraft.item.ItemStack;\n-import org.spongepowered.api.data.Keys;\n-import org.spongepowered.api.data.manipulator.mutable.RepresentedItemData;\n-import org.spongepowered.api.data.value.Value.Mutable;\n+import org.spongepowered.api.data.value.Value;\n import org.spongepowered.api.entity.Item;\n import org.spongepowered.api.item.ItemType;\n-import org.spongepowered.api.item.inventory.ItemStackSnapshot;\n import org.spongepowered.api.text.translation.Translation;\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.asm.mixin.Shadow;\n-import org.spongepowered.common.data.manipulator.mutable.SpongeRepresentedItemData;\n-import org.spongepowered.common.data.value.mutable.SpongeValue;\n import org.spongepowered.common.item.util.ItemStackUtil;\n import org.spongepowered.common.mixin.api.mcp.entity.EntityMixin_API;\n \n import java.util.Collection;\n+import java.util.Set;\n \n @Mixin(ItemEntity.class)\n public abstract class ItemEntityMixin_API extends EntityMixin_API implements Item {\n \n-    @Shadow public abstract ItemStack getItem();\n+    @Shadow\n+    public abstract ItemStack getItem();", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMxMzIzOQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364313239", "bodyText": "This can be removed entirely now.", "author": "gabizou", "createdAt": "2020-01-08T16:11:31Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/item/PaintingEntityMixin_API.java", "diffHunk": "@@ -24,37 +24,40 @@\n  */\n package org.spongepowered.common.mixin.api.mcp.entity.item;\n \n-import org.spongepowered.api.data.Keys;\n-import org.spongepowered.api.data.manipulator.mutable.entity.ArtData;\n+import net.minecraft.entity.item.PaintingEntity;\n+import net.minecraft.entity.item.PaintingType;\n import org.spongepowered.api.data.type.ArtType;\n import org.spongepowered.api.data.value.Value;\n import org.spongepowered.api.entity.hanging.Painting;\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.asm.mixin.Shadow;\n-import org.spongepowered.common.data.manipulator.mutable.entity.SpongeArtData;\n-import org.spongepowered.common.data.value.mutable.SpongeValue;\n-import org.spongepowered.common.util.Constants;\n+\n import java.util.Collection;\n-import net.minecraft.entity.item.PaintingEntity;\n+import java.util.Set;\n \n @Mixin(PaintingEntity.class)\n public abstract class PaintingEntityMixin_API extends HangingEntityMixin_API implements Painting {\n \n-    @Shadow public PaintingEntity.EnumArt art;\n+    @Shadow public PaintingType art;\n \n     @Override\n     public ArtData getArtData() {\n         return new SpongeArtData((ArtType) (Object) this.art);\n     }\n \n-    @Override\n-    public Value.Mutable<ArtType> art() {\n-        return new SpongeValue<>(Keys.ART, Constants.Catalog.DEFAULT_ART, (ArtType) (Object) this.art);\n-    }\n-\n     @Override\n     public void spongeApi$supplyVanillaManipulators(Collection<? super org.spongepowered.api.data.DataManipulator.Mutable<?, ?>> manipulators) {", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMxMzQ3NA==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364313474", "bodyText": "Likewise doesn't need the if check.", "author": "gabizou", "createdAt": "2020-01-08T16:11:56Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/item/TNTEntityMixin_API.java", "diffHunk": "@@ -94,6 +96,19 @@ public void detonate() {\n         this.explode();\n     }\n \n+    @Override\n+    protected Set<Value.Immutable<?>> api$getVanillaValues() {\n+        final Set<Value.Immutable<?>> vanillaValues = super.api$getVanillaValues();\n \n+        // FusedExplosive\n+        vanillaValues.add(this.primed().asImmutable());\n+        vanillaValues.add(this.fuseDuration().asImmutable());\n+\n+        if (this.tntPlacedBy != null) { // This probably does not refer to the real detonator and instead who placed the tnt", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMxNDI0MQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364314241", "bodyText": "Likewise don't need the if statement since the optional value will return empty.", "author": "gabizou", "createdAt": "2020-01-08T16:13:19Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/monster/AbstractRaiderEntityMixin_API.java", "diffHunk": "@@ -42,4 +44,18 @@\n         return Optional.ofNullable((Raid) this.shadow$getRaid());\n     }\n \n+    @Override\n+    protected Set<Value.Immutable<?>> api$getVanillaValues() {\n+        final Set<Value.Immutable<?>> vanillaValues = super.api$getVanillaValues();\n+\n+        vanillaValues.add(this.canJoinRaid().asImmutable());\n+        vanillaValues.add(this.isCelebrating().asImmutable());\n+\n+        if (this.getRaid().isPresent()) { // A raid must be present for the raidWave to exist.", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMxNDQ2Nw==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364314467", "bodyText": "Same here.", "author": "gabizou", "createdAt": "2020-01-08T16:13:44Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/monster/EvokerEntityMixin_API.java", "diffHunk": "@@ -25,10 +25,28 @@\n package org.spongepowered.common.mixin.api.mcp.entity.monster;\n \n import net.minecraft.entity.monster.EvokerEntity;\n+import net.minecraft.entity.passive.SheepEntity;\n+import org.spongepowered.api.data.value.Value;\n import org.spongepowered.api.entity.living.monster.raider.illager.spellcaster.Evoker;\n import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+\n+import java.util.Set;\n \n @Mixin(EvokerEntity.class)\n public abstract class EvokerEntityMixin_API extends SpellcastingIllagerEntityMixin_API implements Evoker {\n \n+    @Shadow private SheepEntity wololoTarget;\n+\n+    @Override\n+    protected Set<Value.Immutable<?>> api$getVanillaValues() {\n+        final Set<Value.Immutable<?>> vanillaValues = super.api$getVanillaValues();\n+\n+       if (this.wololoTarget != null) {", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMxNDYyMg==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364314622", "bodyText": "Prefix with shadow$", "author": "gabizou", "createdAt": "2020-01-08T16:14:00Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/monster/GuardianEntityMixin_API.java", "diffHunk": "@@ -27,19 +27,23 @@\n import net.minecraft.entity.LivingEntity;\n import net.minecraft.entity.monster.GuardianEntity;\n import net.minecraft.network.datasync.DataParameter;\n+import org.spongepowered.api.data.value.Value;\n import org.spongepowered.api.entity.living.Living;\n import org.spongepowered.api.entity.living.monster.guardian.Guardian;\n import org.spongepowered.asm.mixin.Final;\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.asm.mixin.Shadow;\n \n+import javax.annotation.Nullable;\n import java.util.Optional;\n+import java.util.Set;\n \n @Mixin(GuardianEntity.class)\n public abstract class GuardianEntityMixin_API extends MonsterEntityMixin_API implements Guardian {\n \n     @Shadow @Final private static DataParameter<Integer> TARGET_ENTITY;\n     @Shadow private void setTargetedEntity(int entityId) { } // setTargetedEntity\n+    @Shadow @Nullable public abstract LivingEntity getTargetedEntity();", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMxNDY3OA==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364314678", "bodyText": "Remove the if.", "author": "gabizou", "createdAt": "2020-01-08T16:14:08Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/monster/GuardianEntityMixin_API.java", "diffHunk": "@@ -54,4 +58,16 @@ public void setBeamTarget(Living entity) {\n             this.setTargetedEntity(((LivingEntity) entity).getEntityId());\n         }\n     }\n+\n+    @Override\n+    protected Set<Value.Immutable<?>> api$getVanillaValues() {\n+        final Set<Value.Immutable<?>> vanillaValues = super.api$getVanillaValues();\n+\n+        if (this.getTargetedEntity() != null) {", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMxNTE5Mg==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364315192", "bodyText": "Can be removed too", "author": "gabizou", "createdAt": "2020-01-08T16:15:10Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/monster/ShulkerEntityMixin_API.java", "diffHunk": "@@ -24,50 +24,32 @@\n  */\n package org.spongepowered.common.mixin.api.mcp.entity.monster;\n \n-import org.spongepowered.api.data.Keys;\n-import org.spongepowered.api.data.manipulator.mutable.DyeableData;\n-import org.spongepowered.api.data.manipulator.mutable.block.DirectionalData;\n-import org.spongepowered.api.data.type.DyeColor;\n+import net.minecraft.entity.monster.ShulkerEntity;\n import org.spongepowered.api.data.value.Value;\n import org.spongepowered.api.entity.living.golem.Shulker;\n import org.spongepowered.api.entity.projectile.EntityTargetingProjectile;\n-import org.spongepowered.api.util.Direction;\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.common.bridge.entity.monster.ShulkerEntityBridge;\n-import org.spongepowered.common.data.manipulator.mutable.SpongeDyeableData;\n-import org.spongepowered.common.data.manipulator.mutable.block.SpongeDirectionalData;\n-import org.spongepowered.common.data.value.mutable.SpongeValue;\n import org.spongepowered.common.entity.projectile.ProjectileLauncher;\n import org.spongepowered.common.mixin.api.mcp.entity.passive.GolemEntityMixin_API;\n-import org.spongepowered.common.util.Constants;\n+\n import java.util.Collection;\n import java.util.Optional;\n-import net.minecraft.entity.monster.ShulkerEntity;\n+import java.util.Set;\n \n @Mixin(ShulkerEntity.class)\n public abstract class ShulkerEntityMixin_API extends GolemEntityMixin_API implements Shulker {\n \n-\n     @Override\n     public DyeableData getDyeData() {\n         return new SpongeDyeableData(((ShulkerEntityBridge) this).bridge$getColor());\n     }\n \n-    @Override\n-    public Value.Mutable<DyeColor> color() {\n-        return new SpongeValue<>(Keys.DYE_COLOR, Constants.Catalog.DEFAULT_SHULKER_COLOR, ((ShulkerEntityBridge) this).bridge$getColor());\n-    }\n-\n     @Override\n     public DirectionalData getDirectionalData() {", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMxNTY4Mw==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364315683", "bodyText": "Providers will know to filter on SpellType.NONE, so just call the api method for the current spell and the ifPresent will know if the value is empty or not.", "author": "gabizou", "createdAt": "2020-01-08T16:16:04Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/monster/SpellcastingIllagerEntityMixin_API.java", "diffHunk": "@@ -51,4 +54,17 @@ public void setCastingSpell(boolean castSpell) {\n \n         // i509 -> TODO: Figure out how to get the casting time from UseSpellGoal. Yes Mojang made spells a goal and their oh so exposed enum SpellType does not refer to the goals.\n     }\n+\n+    @Override\n+    protected Set<Value.Immutable<?>> api$getVanillaValues() {\n+        final Set<Value.Immutable<?>> vanillaValues = super.api$getVanillaValues();\n+\n+        vanillaValues.add(this.castingTime().asImmutable());\n+\n+        if (this.activeSpell == SpellcastingIllagerEntity.SpellType.NONE) {", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMxNTgwOA==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364315808", "bodyText": "Delete these.", "author": "gabizou", "createdAt": "2020-01-08T16:16:18Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/monster/VindicatorEntityMixin_API.java", "diffHunk": "@@ -24,30 +24,33 @@\n  */\n package org.spongepowered.common.mixin.api.mcp.entity.monster;\n \n-import org.spongepowered.api.data.Keys;\n import org.spongepowered.api.data.value.Value;\n import org.spongepowered.api.entity.living.monster.raider.illager.Vindicator;\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.asm.mixin.Shadow;\n-import org.spongepowered.common.data.value.mutable.SpongeValue;\n import net.minecraft.entity.monster.VindicatorEntity;\n \n import java.util.Collection;\n+import java.util.Set;\n \n @Mixin(VindicatorEntity.class)\n public abstract class VindicatorEntityMixin_API extends AbstractIllagerEntityMixin_API implements Vindicator {\n \n     @Shadow private boolean johnny;\n \n-    @Override\n-    public Value.Mutable<Boolean> johnny() {\n-        return new SpongeValue<>(Keys.IS_JOHNNY, false, this.johnny);\n-    }\n-\n     @Override\n     public void spongeApi$supplyVanillaManipulators(Collection<? super org.spongepowered.api.data.DataManipulator.Mutable<?, ?>> manipulators) {", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMxNjMzOQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364316339", "bodyText": "Map to immutable, then do the ifPresent with method references.", "author": "gabizou", "createdAt": "2020-01-08T16:17:22Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/passive/AnimalEntityMixin_API.java", "diffHunk": "@@ -25,10 +25,25 @@\n package org.spongepowered.common.mixin.api.mcp.entity.passive;\n \n import net.minecraft.entity.passive.AnimalEntity;\n+import org.spongepowered.api.data.value.Value;\n import org.spongepowered.api.entity.living.animal.Animal;\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.common.mixin.api.mcp.entity.AgeableEntityMixin_API;\n \n+import java.util.Set;\n+\n @Mixin(AnimalEntity.class)\n public abstract class AnimalEntityMixin_API extends AgeableEntityMixin_API implements Animal {\n+\n+    @Override\n+    protected Set<Value.Immutable<?>> api$getVanillaValues() {\n+        Set<Value.Immutable<?>> vanillaValues = super.api$getVanillaValues();\n+\n+        // TODO How do I get the breeder's UUID from the entity?\n+        this.breeder().ifPresent(v -> vanillaValues.add(v.asImmutable()));", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMxNjQ2OQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364316469", "bodyText": "Not something for this Mixin to figure out, it's for the DataProvider.", "author": "gabizou", "createdAt": "2020-01-08T16:17:35Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/passive/AnimalEntityMixin_API.java", "diffHunk": "@@ -25,10 +25,25 @@\n package org.spongepowered.common.mixin.api.mcp.entity.passive;\n \n import net.minecraft.entity.passive.AnimalEntity;\n+import org.spongepowered.api.data.value.Value;\n import org.spongepowered.api.entity.living.animal.Animal;\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.common.mixin.api.mcp.entity.AgeableEntityMixin_API;\n \n+import java.util.Set;\n+\n @Mixin(AnimalEntity.class)\n public abstract class AnimalEntityMixin_API extends AgeableEntityMixin_API implements Animal {\n+\n+    @Override\n+    protected Set<Value.Immutable<?>> api$getVanillaValues() {\n+        Set<Value.Immutable<?>> vanillaValues = super.api$getVanillaValues();\n+\n+        // TODO How do I get the breeder's UUID from the entity?", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMxNzIwMQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364317201", "bodyText": "Remove this if.", "author": "gabizou", "createdAt": "2020-01-08T16:18:51Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/passive/FoxEntityMixin_API.java", "diffHunk": "@@ -25,19 +25,47 @@\n package org.spongepowered.common.mixin.api.mcp.entity.passive;\n \n import net.minecraft.entity.passive.FoxEntity;\n+import org.spongepowered.api.data.value.Value;\n import org.spongepowered.api.entity.living.animal.Fox;\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.common.mixin.accessor.entity.passive.FoxEntityAccessor;\n \n+import java.util.Set;\n import java.util.UUID;\n \n @Mixin(FoxEntity.class)\n-public abstract class FoxEntityMixin_API implements Fox {\n+public abstract class FoxEntityMixin_API extends AnimalEntityMixin_API implements Fox {\n \n     @Shadow protected abstract boolean shadow$isTrustedUUID(UUID p_213468_1_);\n \n     @Override\n     public boolean trusts(UUID uniqueId) {\n         return this.shadow$isTrustedUUID(uniqueId);\n     }\n+\n+    @Override\n+    protected Set<Value.Immutable<?>> api$getVanillaValues() {\n+        Set<Value.Immutable<?>> vanillaValues = super.api$getVanillaValues();\n+\n+        vanillaValues.add(this.type().asImmutable());\n+        vanillaValues.add(this.sitting().asImmutable());\n+        vanillaValues.add(this.faceplanted().asImmutable());\n+        vanillaValues.add(this.defending().asImmutable());\n+        vanillaValues.add(this.sleeping().asImmutable());\n+        vanillaValues.add(this.pouncing().asImmutable());\n+        vanillaValues.add(this.crouching().asImmutable());\n+        vanillaValues.add(this.interested().asImmutable());\n+\n+        if (this.dataManager.get(FoxEntityAccessor.accessor$getTrustedUuidMain()).isPresent()) {", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMxNzI3OA==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364317278", "bodyText": "And this.", "author": "gabizou", "createdAt": "2020-01-08T16:18:58Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/passive/FoxEntityMixin_API.java", "diffHunk": "@@ -25,19 +25,47 @@\n package org.spongepowered.common.mixin.api.mcp.entity.passive;\n \n import net.minecraft.entity.passive.FoxEntity;\n+import org.spongepowered.api.data.value.Value;\n import org.spongepowered.api.entity.living.animal.Fox;\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.common.mixin.accessor.entity.passive.FoxEntityAccessor;\n \n+import java.util.Set;\n import java.util.UUID;\n \n @Mixin(FoxEntity.class)\n-public abstract class FoxEntityMixin_API implements Fox {\n+public abstract class FoxEntityMixin_API extends AnimalEntityMixin_API implements Fox {\n \n     @Shadow protected abstract boolean shadow$isTrustedUUID(UUID p_213468_1_);\n \n     @Override\n     public boolean trusts(UUID uniqueId) {\n         return this.shadow$isTrustedUUID(uniqueId);\n     }\n+\n+    @Override\n+    protected Set<Value.Immutable<?>> api$getVanillaValues() {\n+        Set<Value.Immutable<?>> vanillaValues = super.api$getVanillaValues();\n+\n+        vanillaValues.add(this.type().asImmutable());\n+        vanillaValues.add(this.sitting().asImmutable());\n+        vanillaValues.add(this.faceplanted().asImmutable());\n+        vanillaValues.add(this.defending().asImmutable());\n+        vanillaValues.add(this.sleeping().asImmutable());\n+        vanillaValues.add(this.pouncing().asImmutable());\n+        vanillaValues.add(this.crouching().asImmutable());\n+        vanillaValues.add(this.interested().asImmutable());\n+\n+        if (this.dataManager.get(FoxEntityAccessor.accessor$getTrustedUuidMain()).isPresent()) {\n+            this.firstTrusted().map(Value::asImmutable).ifPresent(vanillaValues::add);\n+        }\n+\n+        if (this.dataManager.get(FoxEntityAccessor.accessor$getTrustedUuidSecondary()).isPresent()) {", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMxNzYwNg==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364317606", "bodyText": "Delete this as well.", "author": "gabizou", "createdAt": "2020-01-08T16:19:27Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/passive/ParrotEntityMixin_API.java", "diffHunk": "@@ -49,16 +43,20 @@ public ParrotData getParrotData() {\n         return new SpongeParrotData(ParrotVariantRegistryModule.PARROT_VARIANT_IDMAP.get(this.getVariant()));\n     }\n \n-    @Override\n-    public Value.Mutable<ParrotType> type() {\n-        return new SpongeValue<>(Keys.PARROT_TYPE, Constants.Entity.Parrot.DEFAULT_TYPE, ParrotVariantRegistryModule.PARROT_VARIANT_IDMAP.get(this.getVariant()));\n-    }\n-\n     @Override\n     public void spongeApi$supplyVanillaManipulators(Collection<? super org.spongepowered.api.data.DataManipulator.Mutable<?, ?>> manipulators) {", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMxNzgwMw==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364317803", "bodyText": "Delete this", "author": "gabizou", "createdAt": "2020-01-08T16:19:48Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/passive/RabbitEntityMixin_API.java", "diffHunk": "@@ -48,14 +42,19 @@ public RabbitData getRabbitData() {\n         return new SpongeRabbitData(RabbitTypeRegistryModule.RABBIT_IDMAP.get(this.getRabbitType()));", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMxNzg2MA==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364317860", "bodyText": "Delete this", "author": "gabizou", "createdAt": "2020-01-08T16:19:53Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/passive/RabbitEntityMixin_API.java", "diffHunk": "@@ -48,14 +42,19 @@ public RabbitData getRabbitData() {\n         return new SpongeRabbitData(RabbitTypeRegistryModule.RABBIT_IDMAP.get(this.getRabbitType()));\n     }\n \n-    @Override\n-    public Value.Mutable<RabbitType> type() {\n-        return new SpongeValue<>(Keys.RABBIT_TYPE, Constants.Entity.Rabbit.DEFAULT_TYPE, RabbitTypeRegistryModule.RABBIT_IDMAP.get(this.getRabbitType()));\n-    }\n-\n     @Override\n     public void spongeApi$supplyVanillaManipulators(Collection<? super org.spongepowered.api.data.DataManipulator.Mutable<?, ?>> manipulators) {", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMxNzkyMw==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364317923", "bodyText": "Delete this", "author": "gabizou", "createdAt": "2020-01-08T16:19:59Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/passive/SheepEntityMixin_API.java", "diffHunk": "@@ -49,16 +45,20 @@ public DyeableData getDyeData() {\n         return new SpongeDyeableData((DyeColor) (Object) this.getFleeceColor());\n     }\n \n-    @Override\n-    public Value.Mutable<DyeColor> color() {\n-        return new SpongeValue<>(Keys.DYE_COLOR, Constants.Catalog.DEFAULT_SHEEP_COLOR, (DyeColor) (Object) this.getFleeceColor());\n-    }\n-\n     @Override\n     public void spongeApi$supplyVanillaManipulators(Collection<? super org.spongepowered.api.data.DataManipulator.Mutable<?, ?>> manipulators) {", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMxNzk2OQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364317969", "bodyText": "Delete this", "author": "gabizou", "createdAt": "2020-01-08T16:20:04Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/passive/SheepEntityMixin_API.java", "diffHunk": "@@ -49,16 +45,20 @@ public DyeableData getDyeData() {\n         return new SpongeDyeableData((DyeColor) (Object) this.getFleeceColor());", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMxODA4OA==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364318088", "bodyText": "Delete this", "author": "gabizou", "createdAt": "2020-01-08T16:20:17Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/passive/WolfEntityMixin_API.java", "diffHunk": "@@ -45,4 +45,14 @@\n         manipulators.add(this.get(SittingData.class).get());", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMxOTA2MA==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364319060", "bodyText": "Do we have the sitting key value for wolves? IF it's just a key, you can:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    vanillaValues.add(this.angry().asImmutable());\n          \n          \n            \n                    vanillaValues.add(this.angry().asImmutable());\n          \n          \n            \n                    this.getValue(Keys.WOLF_SITTING).map(Value::asImmutable).ifPresent(vanillaValues::add);", "author": "gabizou", "createdAt": "2020-01-08T16:21:56Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/passive/WolfEntityMixin_API.java", "diffHunk": "@@ -45,4 +45,14 @@\n         manipulators.add(this.get(SittingData.class).get());\n         manipulators.add(new SpongeAggressiveData(this.shadow$isAngry()));\n     }\n+\n+    @Override\n+    protected Set<Value.Immutable<?>> api$getVanillaValues() {\n+        Set<Value.Immutable<?>> vanillaValues = super.api$getVanillaValues();\n+\n+        vanillaValues.add(this.angry().asImmutable());", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMxOTM2Mw==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364319363", "bodyText": "Delete the if, the ifPresent covers the if.", "author": "gabizou", "createdAt": "2020-01-08T16:22:23Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/passive/horse/DonkeyEntityMixin_API.java", "diffHunk": "@@ -25,10 +25,24 @@\n package org.spongepowered.common.mixin.api.mcp.entity.passive.horse;\n \n import net.minecraft.entity.passive.horse.DonkeyEntity;\n+import org.spongepowered.api.data.value.Value;\n import org.spongepowered.api.entity.living.animal.horse.Donkey;\n import org.spongepowered.asm.mixin.Mixin;\n \n+import java.util.Set;\n+\n @Mixin(DonkeyEntity.class)\n-public abstract class DonkeyEntityMixin_API extends AbstractHorseMixin_API implements Donkey {\n+public abstract class DonkeyEntityMixin_API extends AbstractChestedHorseEntityMixin_API implements Donkey {\n+\n+    @Override\n+    protected Set<Value.Immutable<?>> api$getVanillaValues() {\n+        Set<Value.Immutable<?>> vanillaValues = super.api$getVanillaValues();\n+\n+        if (this.shadow$getOwnerUniqueId() != null) {", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMxOTY0Mw==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364319643", "bodyText": "Delete this.", "author": "gabizou", "createdAt": "2020-01-08T16:22:51Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/player/ServerPlayerEntityMixin_API.java", "diffHunk": "@@ -413,16 +406,6 @@ public JoinData getJoinData() {\n         return new SpongeJoinData(SpongePlayerDataHandler.getFirstJoined(this.getUniqueID()).get(), Instant.now());", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMxOTgwOQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364319809", "bodyText": "Delete this.", "author": "gabizou", "createdAt": "2020-01-08T16:23:10Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/player/ServerPlayerEntityMixin_API.java", "diffHunk": "@@ -437,12 +420,6 @@ public GameModeData getGameModeData() {\n         return new SpongeGameModeData((GameMode) (Object) this.interactionManager.getGameType());", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMxOTkwNQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364319905", "bodyText": "Delete this.", "author": "gabizou", "createdAt": "2020-01-08T16:23:19Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/player/ServerPlayerEntityMixin_API.java", "diffHunk": "@@ -437,12 +420,6 @@ public GameModeData getGameModeData() {\n         return new SpongeGameModeData((GameMode) (Object) this.interactionManager.getGameType());\n     }\n \n-    @Override\n-    public Value.Mutable<GameMode> gameMode() {\n-        return new SpongeValue<>(Keys.GAME_MODE, Constants.Catalog.DEFAULT_GAMEMODE,\n-                (GameMode) (Object) this.interactionManager.getGameType());\n-    }\n-\n     @Override\n     public void spongeApi$supplyVanillaManipulators(final Collection<? super org.spongepowered.api.data.DataManipulator.Mutable<?, ?>> manipulators) {", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMyMDA0MQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364320041", "bodyText": "Delete the if statement.", "author": "gabizou", "createdAt": "2020-01-08T16:23:32Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/player/ServerPlayerEntityMixin_API.java", "diffHunk": "@@ -568,4 +545,28 @@ public boolean setLocation(final Vector3d position, final UUID world) {\n         final World loaded = Sponge.getServer().loadWorld(prop).orElseThrow(() -> new IllegalArgumentException(\"Invalid World: Could not load world for UUID\"));\n         return this.setLocation(new Location<>(loaded, position));\n     }\n+\n+    @Override\n+    protected Set<Value.Immutable<?>> api$getVanillaValues() {\n+        Set<Value.Immutable<?>> vanillaValues = super.api$getVanillaValues();\n+\n+        // Humanoid\n+        vanillaValues.add(this.foodLevel().asImmutable());\n+        vanillaValues.add(this.exhaustion().asImmutable());\n+        vanillaValues.add(this.saturation().asImmutable());\n+        vanillaValues.add(this.gameMode().asImmutable());\n+\n+        // Player\n+        vanillaValues.add(this.firstPlayed().asImmutable());\n+        vanillaValues.add(this.lastPlayed().asImmutable());\n+        vanillaValues.add(this.sleepingIgnored().asImmutable());\n+\n+        // If getSpectatingEntity returns this player, then we are not spectating any other entity, so spectatorTarget would be an Optional.empty()\n+        if (this.shadow$getSpectatingEntity() != (ServerPlayerEntity) (Object) this) {", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMyMDE2Nw==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364320167", "bodyText": "Delete this.", "author": "gabizou", "createdAt": "2020-01-08T16:23:45Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/projectile/DamagingProjectileEntityMixin_API.java", "diffHunk": "@@ -84,4 +75,14 @@ public void setShooter(final ProjectileSource shooter) {\n         manipulators.add(new SpongeAccelerationData(this.accelerationX, this.accelerationY, this.accelerationZ));", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMyMDQzNg==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364320436", "bodyText": "Delete the if, it's covered by the ifPresent.", "author": "gabizou", "createdAt": "2020-01-08T16:24:12Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/projectile/FishingBobberEntityMixin_API.java", "diffHunk": "@@ -77,5 +79,15 @@ public void setHookedEntity(@Nullable Entity entity) {\n         this.caughtEntity = (net.minecraft.entity.Entity) entity;\n     }\n \n+    @Override\n+    protected Set<Value.Immutable<?>> api$getVanillaValues() {\n+        Set<Value.Immutable<?>> vanillaValues = super.api$getVanillaValues();\n+\n+        if (this.caughtEntity != null) {", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMyMDUyOA==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364320528", "bodyText": "Delete this.", "author": "gabizou", "createdAt": "2020-01-08T16:24:21Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/projectile/ShulkerBulletEntityMixin_API.java", "diffHunk": "@@ -50,18 +47,14 @@\n \n     @Shadow private LivingEntity owner;\n \n+    @Shadow private Entity target;\n     @Nullable public ProjectileSource projectileSource;\n \n     @Override\n     public DirectionalData getDirectionalData() {", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMyMDU4Mw==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364320583", "bodyText": "Delete this.", "author": "gabizou", "createdAt": "2020-01-08T16:24:27Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/projectile/ShulkerBulletEntityMixin_API.java", "diffHunk": "@@ -86,11 +79,25 @@ public void setShooter(ProjectileSource shooter) {\n         this.projectileSource = shooter;\n     }\n \n-\n     @Override\n     public void spongeApi$supplyVanillaManipulators(Collection<? super org.spongepowered.api.data.DataManipulator.Mutable<?, ?>> manipulators) {", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMyMDcxNw==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364320717", "bodyText": "Delete the if, it's covered by the ifPresent.", "author": "gabizou", "createdAt": "2020-01-08T16:24:43Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/projectile/ShulkerBulletEntityMixin_API.java", "diffHunk": "@@ -86,11 +79,25 @@ public void setShooter(ProjectileSource shooter) {\n         this.projectileSource = shooter;\n     }\n \n-\n     @Override\n     public void spongeApi$supplyVanillaManipulators(Collection<? super org.spongepowered.api.data.DataManipulator.Mutable<?, ?>> manipulators) {\n         super.spongeApi$supplyVanillaManipulators(manipulators);\n         manipulators.add(getTargetData());\n         manipulators.add(this.getDirectionalData());\n     }\n+\n+    @Override\n+    protected Set<Value.Immutable<?>> api$getVanillaValues() {\n+        Set<Value.Immutable<?>> vanillaValues = super.api$getVanillaValues();\n+\n+        // EntityTargettingProjectile\n+        if (this.target != null) {", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMyMzk1OQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364323959", "bodyText": "Delete the if, isPresent will work fine as Gabe says below.", "author": "Zidane", "createdAt": "2020-01-08T16:30:21Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/EntityMixin_API.java", "diffHunk": "@@ -656,4 +648,29 @@ public EntityArchetype createArchetype() {\n         manipulators.add(new SpongeGravityData(!this.hasNoGravity()));\n     }\n \n+    @Override\n+    public Set<Value.Immutable<?>> getValues() {\n+        return this.api$getVanillaValues();\n+    }\n+\n+    protected Set<Value.Immutable<?>> api$getVanillaValues() {\n+        final Set<Value.Immutable<?>> vanillaValues = new HashSet<>();\n+\n+        vanillaValues.add(this.displayName().asImmutable());\n+        vanillaValues.add(this.passengers().asImmutable());\n+        vanillaValues.add(this.onGround().asImmutable());\n+        vanillaValues.add(this.velocity().asImmutable());\n+        vanillaValues.add(this.gravity().asImmutable());\n+\n+        if (this.shadow$getLowestRidingEntity() != null) {\n+            this.baseVehicle().map(Value::asImmutable).ifPresent(vanillaValues::add);", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMyNDU1MQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364324551", "bodyText": "Delete all the getXXXData() methods like this, they no longer exist.", "author": "Zidane", "createdAt": "2020-01-08T16:31:22Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/item/ArmorStandEntityMixin_API.java", "diffHunk": "@@ -65,26 +59,6 @@\n     @Shadow public abstract Rotations shadow$getHeadRotation();\n     @Shadow public abstract Rotations getBodyRotation();\n \n-    @Override\n-    public Value.Mutable<Boolean> marker() {\n-        return new SpongeValue<>(Keys.ARMOR_STAND_HAS_MARKER, false, this.hasMarker());\n-    }\n-\n-    @Override\n-    public Value.Mutable<Boolean> small() {\n-        return new SpongeValue<>(Keys.ARMOR_STAND_IS_SMALL, false, this.shadow$isSmall());\n-    }\n-\n-    @Override\n-    public Value.Mutable<Boolean> basePlate() {\n-        return new SpongeValue<>(Keys.ARMOR_STAND_HAS_BASE_PLATE, true, !this.hasNoBasePlate());\n-    }\n-\n-    @Override\n-    public Value.Mutable<Boolean> arms() {\n-        return new SpongeValue<>(Keys.ARMOR_STAND_HAS_ARMS, false, this.getShowArms());\n-    }\n-\n     @Override\n     public ArmorStandData getArmorStandData() {", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMyNjA1Ng==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364326056", "bodyText": "Be sure to delete these methods after you are done using them as a reference.", "author": "Zidane", "createdAt": "2020-01-08T16:33:55Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/item/ItemEntityMixin_API.java", "diffHunk": "@@ -62,14 +59,19 @@ public RepresentedItemData getItemData() {\n         return new SpongeRepresentedItemData(ItemStackUtil.snapshotOf(this.getItem()));\n     }\n \n-    @Override\n-    public Mutable<ItemStackSnapshot> item() {\n-        return new SpongeValue<>(Keys.REPRESENTED_ITEM, ItemStackSnapshot.NONE, ItemStackUtil.snapshotOf(this.getItem()));\n-    }\n-\n     @Override\n     public void spongeApi$supplyVanillaManipulators(Collection<? super org.spongepowered.api.data.DataManipulator.Mutable<?, ?>> manipulators) {", "originalCommit": "dc6d8ee05651ded634d080f6c0984db70d0e2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f9f3deab5f7321cc50a9113895d61a039e5d551a", "url": "https://github.com/SpongePowered/Sponge/commit/f9f3deab5f7321cc50a9113895d61a039e5d551a", "message": "Implement all missing entities from 1.14 and remove old implementations of data values which override default methods.\n\nThe real big one, add api$getVanillaValues to all entities and implement about 90% of the adding to Sets", "committedDate": "2020-01-08T23:28:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUxMTM3Nw==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364511377", "bodyText": "finalize the variables please :).", "author": "Zidane", "createdAt": "2020-01-09T00:34:30Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/AreaEffectCloudEntityMixin_API.java", "diffHunk": "@@ -67,114 +61,22 @@\n     @Shadow public abstract EnumParticleTypes getParticle();\n \n     @Override\n-    public AreaEffectCloudData getAreaEffectCloudData() {\n-        return new SpongeAreaEffectData(Color.ofRgb(this.getColor()),\n-                this.getRadius(),\n-                ParticleTypes.MOB_SPELL,\n-                this.duration,\n-                this.waitTime,\n-                this.radiusOnUse,\n-                this.radiusPerTick,\n-                this.durationOnUse,\n-                this.reapplicationDelay,\n-                (List<PotionEffect>) (List<?>) this.effects,\n-                this.ticksExisted\n-                );\n-    }\n-\n-    @Override\n-    public Mutable<Color> color() {\n-        return new SpongeValue<>(Keys.AREA_EFFECT_CLOUD_COLOR, Color.WHITE, Color.ofRgb(this.getColor()));\n-    }\n-\n-    @Override\n-    public org.spongepowered.api.data.value.BoundedValue.Mutable<Double> radius() {\n-        return SpongeValueFactory.boundedBuilder(Keys.AREA_EFFECT_CLOUD_RADIUS)\n-                .minimum(0D)\n-                .maximum((double) Float.MAX_VALUE)\n-                .defaultValue(0.5D)\n-                .actualValue((double) this.getRadius())\n-                .build();\n-    }\n-\n-    @Override\n-    public Mutable<ParticleType> particleType() {\n-        return new SpongeValue<>(Keys.AREA_EFFECT_CLOUD_PARTICLE_EFFECT, ParticleTypes.MOB_SPELL, ParticleTypes.MOB_SPELL);\n-    }\n-\n-    @Override\n-    public org.spongepowered.api.data.value.BoundedValue.Mutable<Integer> duration() {\n-        return SpongeValueFactory.boundedBuilder(Keys.AREA_EFFECT_CLOUD_DURATION)\n-                .minimum(Integer.MIN_VALUE)\n-                .maximum(Integer.MAX_VALUE)\n-                .defaultValue(600)\n-                .actualValue(this.duration)\n-                .build();\n-    }\n-\n-    @Override\n-    public org.spongepowered.api.data.value.BoundedValue.Mutable<Integer> waitTime() {\n-        return SpongeValueFactory.boundedBuilder(Keys.AREA_EFFECT_CLOUD_WAIT_TIME)\n-                .minimum(0)\n-                .maximum(Integer.MAX_VALUE)\n-                .defaultValue(20)\n-                .actualValue(this.waitTime)\n-                .build();\n-    }\n-\n-    @Override\n-    public org.spongepowered.api.data.value.BoundedValue.Mutable<Double> radiusOnUse() {\n-        return SpongeValueFactory.boundedBuilder(Keys.AREA_EFFECT_CLOUD_RADIUS_ON_USE)\n-                .minimum(0.0D)\n-                .maximum((double) Float.MAX_VALUE)\n-                .defaultValue(0.0D)\n-                .actualValue((double) this.radiusOnUse)\n-                .build();\n-    }\n-\n-    @Override\n-    public org.spongepowered.api.data.value.BoundedValue.Mutable<Double> radiusPerTick() {\n-        return SpongeValueFactory.boundedBuilder(Keys.AREA_EFFECT_CLOUD_RADIUS_PER_TICK)\n-                .minimum(0.0D)\n-                .maximum((double) Float.MAX_VALUE)\n-                .defaultValue(0.0D)\n-                .actualValue((double) this.radiusPerTick)\n-                .build();\n-    }\n-\n-    @Override\n-    public org.spongepowered.api.data.value.BoundedValue.Mutable<Integer> durationOnUse() {\n-        return SpongeValueFactory.boundedBuilder(Keys.AREA_EFFECT_CLOUD_DURATION_ON_USE)\n-                .minimum(0)\n-                .maximum(Integer.MAX_VALUE)\n-                .defaultValue(0)\n-                .actualValue(this.durationOnUse)\n-                .build();\n-    }\n-\n-    @Override\n-    public org.spongepowered.api.data.value.BoundedValue.Mutable<Integer> applicationDelay() {\n-        return SpongeValueFactory.boundedBuilder(Keys.AREA_EFFECT_CLOUD_DURATION_ON_USE)\n-                .minimum(0)\n-                .maximum(Integer.MAX_VALUE)\n-                .defaultValue(0)\n-                .actualValue(this.reapplicationDelay)\n-                .build();\n-    }\n-\n-    @Override\n-    public org.spongepowered.api.data.value.ListValue.Mutable<PotionEffect> effects() {\n-        return new SpongeListValue<>(Keys.POTION_EFFECTS, (List<PotionEffect>) (List<?>) this.effects);\n-    }\n-\n-    @Override\n-    public org.spongepowered.api.data.value.BoundedValue.Mutable<Integer> age() {\n-        return SpongeValueFactory.boundedBuilder(Keys.AREA_EFFECT_CLOUD_AGE)\n-                .defaultValue(0)\n-                .minimum(0)\n-                .maximum(Integer.MAX_VALUE)\n-                .actualValue(this.ticksExisted)\n-                .build();\n+    protected Set<Value.Immutable<?>> api$getVanillaValues() {\n+        Set<Value.Immutable<?>> values = super.api$getVanillaValues();", "originalCommit": "f9f3deab5f7321cc50a9113895d61a039e5d551a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUxMTUyNw==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364511527", "bodyText": "Throw us a TODO here to merge custom and vanilla values and then return the result.", "author": "Zidane", "createdAt": "2020-01-09T00:35:07Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/EntityMixin_API.java", "diffHunk": "@@ -644,16 +641,26 @@ public EntityArchetype createArchetype() {\n     }\n \n     @Override\n-    public org.spongepowered.api.data.value.Value.Mutable<Boolean> gravity() {\n-        return this.getValue(Keys.HAS_GRAVITY).get();\n+    public Set<Value.Immutable<?>> getValues() {", "originalCommit": "f9f3deab5f7321cc50a9113895d61a039e5d551a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUxMjI2OQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364512269", "bodyText": "We're missing the value for the MobSpawner data.", "author": "Zidane", "createdAt": "2020-01-09T00:38:12Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/item/minecart/SpawnerMinecartEntityMixin_API.java", "diffHunk": "@@ -43,35 +41,13 @@\n     @Shadow @Final private AbstractSpawner mobSpawnerLogic;\n \n     @Override\n-    public MobSpawnerData getSpawnerData() {\n-        // TODO - Update once Mixin 0.8 for accessors\n-//        final MobSpawnerBaseLogicAccessor accessor = (MobSpawnerBaseLogicAccessor) this.mobSpawnerLogic;\n-//        return new SpongeMobSpawnerData(\n-//                (short) accessor.accessor$getSpawnDelay(),\n-//                (short) accessor.accessor$getMinSpawnDelay(),\n-//                (short) accessor.accessor$getMaxSpawnDelay(),\n-//                (short) accessor.accessor$getSpawnCount(),\n-//                (short) accessor.accessor$getMaxNearbyEntities(),\n-//                (short) accessor.accessor$getActivatingRangeFromPlayer(),\n-//                (short) accessor.accessor$getSpawnRange(),\n-//                SpawnerUtils.getNextEntity(accessor),\n-//                SpawnerUtils.getEntities(this.mobSpawnerLogic));\n-        final AbstractSpawnerBridge accessor = (AbstractSpawnerBridge) this.mobSpawnerLogic;\n-        return new SpongeMobSpawnerData(\n-            (short) accessor.bridge$getSpawnDelay(),\n-            (short) accessor.bridge$getMinSpawnDelay(),\n-            (short) accessor.bridge$getMaxSpawnDelay(),\n-            (short) accessor.bridge$getSpawnCount(),\n-            (short) accessor.bridge$getMaxNearbyEntities(),\n-            (short) accessor.bridge$getActivatingRangeFromPlayer(),\n-            (short) accessor.bridge$getSpawnRange(),\n-            SpawnerUtils.getNextEntity(accessor),\n-            SpawnerUtils.getEntities(this.mobSpawnerLogic));\n-    }\n+    protected Set<Value.Immutable<?>> api$getVanillaValues() {\n+        Set<Value.Immutable<?>> values = super.api$getVanillaValues();\n \n-    @Override\n-    public void spongeApi$supplyVanillaManipulators(final Collection<? super Mutable<?, ?>> manipulators) {\n-        super.spongeApi$supplyVanillaManipulators(manipulators);\n-        manipulators.add(this.getSpawnerData());\n+        // BlockOccupiedMinecart\n+        values.add(this.block().asImmutable());\n+", "originalCommit": "f9f3deab5f7321cc50a9113895d61a039e5d551a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUyNzQ4Nw==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364527487", "bodyText": "There's all the keys for it, I think we missed adding the getters like the Spawner block entity has.", "author": "gabizou", "createdAt": "2020-01-09T01:50:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUxMjI2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUxMjM5Mg==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364512392", "bodyText": "We're missing the WoodType value.", "author": "Zidane", "createdAt": "2020-01-09T00:38:44Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/item/BoatEntityMixin_API.java", "diffHunk": "@@ -113,4 +94,17 @@ public void setUnoccupiedDeceleration(double unoccupiedDeceleration) {\n         this.unoccupiedDecelerationSpeed = unoccupiedDeceleration;\n     }\n \n+    @Override\n+    protected Set<Value.Immutable<?>> api$getVanillaValues() {\n+        final Set<Value.Immutable<?>> values = super.api$getVanillaValues();", "originalCommit": "f9f3deab5f7321cc50a9113895d61a039e5d551a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUxMjk4NA==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364512984", "bodyText": "Remove any unused shadows you find. Also remove this one as you don't use it anymore.", "author": "Zidane", "createdAt": "2020-01-09T00:41:03Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/monster/GuardianEntityMixin_API.java", "diffHunk": "@@ -27,19 +27,23 @@\n import net.minecraft.entity.LivingEntity;\n import net.minecraft.entity.monster.GuardianEntity;\n import net.minecraft.network.datasync.DataParameter;\n+import org.spongepowered.api.data.value.Value;\n import org.spongepowered.api.entity.living.Living;\n import org.spongepowered.api.entity.living.monster.guardian.Guardian;\n import org.spongepowered.asm.mixin.Final;\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.asm.mixin.Shadow;\n \n+import javax.annotation.Nullable;\n import java.util.Optional;\n+import java.util.Set;\n \n @Mixin(GuardianEntity.class)\n public abstract class GuardianEntityMixin_API extends MonsterEntityMixin_API implements Guardian {\n \n     @Shadow @Final private static DataParameter<Integer> TARGET_ENTITY;\n     @Shadow private void setTargetedEntity(int entityId) { } // setTargetedEntity\n+    @Shadow @Nullable public abstract LivingEntity shadow$getTargetedEntity();", "originalCommit": "f9f3deab5f7321cc50a9113895d61a039e5d551a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUxMzg2OQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364513869", "bodyText": "Good catch, I missed that one lol..", "author": "Zidane", "createdAt": "2020-01-09T00:44:49Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/passive/horse/ZombieHorseEntityMixin_API.java", "diffHunk": "@@ -29,6 +29,6 @@\n import org.spongepowered.asm.mixin.Mixin;\n \n @Mixin(ZombieHorseEntity.class)\n-public abstract class ZombieHorseEntityMixin_API extends AbstractHorseMixin_API implements ZombieHorse {\n+public abstract class ZombieHorseEntityMixin_API extends AbstractHorseEntityMixin_API implements ZombieHorse {", "originalCommit": "f9f3deab5f7321cc50a9113895d61a039e5d551a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUxMzkzNw==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364513937", "bodyText": "Change this to player$", "author": "Zidane", "createdAt": "2020-01-09T00:45:08Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/player/ServerPlayerEntityMixin_API.java", "diffHunk": "@@ -133,7 +126,7 @@\n import javax.annotation.Nullable;\n \n @Mixin(ServerPlayerEntity.class)\n-@Implements(@Interface(iface = Player.class, prefix = \"api$\"))\n+@Implements(@Interface(iface = Player.class, prefix = \"spongeApi$\"))", "originalCommit": "f9f3deab5f7321cc50a9113895d61a039e5d551a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "be7e1e0cf60b15503ff2a3d7289eee19fa4267fd", "url": "https://github.com/SpongePowered/Sponge/commit/be7e1e0cf60b15503ff2a3d7289eee19fa4267fd", "message": "Implement all missing entities from 1.14 and remove old implementations of data values which override default methods.\n\nThe real big one, add api$getVanillaValues to all entities and implement about 90% of the adding to Sets", "committedDate": "2020-01-09T03:18:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU2NjAwMw==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364566003", "bodyText": "Missing IS_SCREAMING Value in api$getVanillaValues()", "author": "Zidane", "createdAt": "2020-01-09T05:37:05Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/monster/EndermanEntityMixin_API.java", "diffHunk": "@@ -24,20 +24,13 @@\n  */\n package org.spongepowered.common.mixin.api.mcp.entity.monster;\n \n-import org.spongepowered.api.data.manipulator.mutable.entity.ScreamingData;\n+import net.minecraft.entity.monster.EndermanEntity;\n import org.spongepowered.api.entity.living.monster.Enderman;\n import org.spongepowered.asm.mixin.Mixin;\n \n import java.util.Collection;\n-import net.minecraft.entity.monster.EndermanEntity;\n \n @Mixin(EndermanEntity.class)\n public abstract class EndermanEntityMixin_API extends MonsterEntityMixin_API implements Enderman {\n \n-    @Override\n-    public void spongeApi$supplyVanillaManipulators(Collection<? super Mutable<?, ?>> manipulators) {", "originalCommit": "be7e1e0cf60b15503ff2a3d7289eee19fa4267fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU2NzU1Mw==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364567553", "bodyText": "Will probably have to add an api method to get the Value.Mutable from the enderman.", "author": "i509VCB", "createdAt": "2020-01-09T05:45:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU2NjAwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5NTg1Mg==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364895852", "bodyText": "Isn't it a Key?", "author": "gabizou", "createdAt": "2020-01-09T18:33:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU2NjAwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkxMjU3Ng==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364912576", "bodyText": "It is a key but don't we want it to be accessible as a Value.Mutable<Boolean> on the enderman", "author": "i509VCB", "createdAt": "2020-01-09T19:10:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU2NjAwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUyNjY4NQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364526685", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n                if (this instanced CustomDataHolder) {\n          \n          \n            \n                  values.add(((CustomDataHolder) this).data$gatherValues());\n          \n          \n            \n                }\n          \n      \n    \n    \n  \n\nI don't know if it's already a method, but if you want to try, that'd be the best way to do it imo, I'm sure @Zidane and @Cybermaxke will agree with me in that it'd be the easiest form of accessing the custom values/keys through that interface.", "author": "gabizou", "createdAt": "2020-01-09T01:46:19Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/EntityMixin_API.java", "diffHunk": "@@ -644,16 +641,26 @@ public EntityArchetype createArchetype() {\n     }\n \n     @Override\n-    public org.spongepowered.api.data.value.Value.Mutable<Boolean> gravity() {\n-        return this.getValue(Keys.HAS_GRAVITY).get();\n+    public Set<Value.Immutable<?>> getValues() {\n+        return this.api$getVanillaValues();\n     }\n \n-    protected void spongeApi$supplyVanillaManipulators(final Collection<? super Mutable<?, ?>> manipulators) {\n-        this.get(VehicleData.class).ifPresent(manipulators::add);\n-        if (this.fire > 0) {\n-            manipulators.add(this.get(IgniteableData.class).get());\n-        }\n-        manipulators.add(new SpongeGravityData(!this.hasNoGravity()));\n+    protected Set<Value.Immutable<?>> api$getVanillaValues() {\n+        final Set<Value.Immutable<?>> values = new HashSet<>();\n+\n+        values.add(this.displayName().asImmutable());\n+        values.add(this.passengers().asImmutable());\n+        values.add(this.onGround().asImmutable());\n+        values.add(this.velocity().asImmutable());\n+        values.add(this.gravity().asImmutable());\n+\n+        this.baseVehicle().map(Value::asImmutable).ifPresent(values::add);\n+        this.creator().map(Value::asImmutable).ifPresent(values::add);\n+        this.notifier().map(Value::asImmutable).ifPresent(values::add);\n+\n+        this.getValue(Keys.FIRE_TICKS).map(Value::asImmutable).ifPresent(values::add);\n+", "originalCommit": "f9f3deab5f7321cc50a9113895d61a039e5d551a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkyOTMxMg==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364929312", "bodyText": "Umm. Your going to need to explain that a bit more.\nYou seem to mention custom values and keys but those are not within the scope of fixing the entities and adding their values into getValues.\nEDIT: If you are talking about adding the custom values to the Set, that would be done in the @Override of the regular getValues in entity.", "author": "i509VCB", "createdAt": "2020-01-09T19:49:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUyNjY4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk2MjQ1MQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364962451", "bodyText": "@i509VCB Put the call he has above in getValues, you are correct.", "author": "Zidane", "createdAt": "2020-01-09T21:14:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUyNjY4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUyNjk4MA==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364526980", "bodyText": "Almost sure this field can be removed now.", "author": "gabizou", "createdAt": "2020-01-09T01:47:46Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/item/ExperienceOrbEntityMixin_API.java", "diffHunk": "@@ -24,42 +24,27 @@\n  */\n package org.spongepowered.common.mixin.api.mcp.entity.item;\n \n-import org.spongepowered.api.data.Keys;\n-import org.spongepowered.api.data.manipulator.mutable.entity.ExpOrbData;\n-import org.spongepowered.api.data.value.Value.Mutable;\n+import net.minecraft.entity.item.ExperienceOrbEntity;\n+import org.spongepowered.api.data.value.Value;\n import org.spongepowered.api.entity.ExperienceOrb;\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.asm.mixin.Shadow;\n-import org.spongepowered.common.data.manipulator.mutable.entity.SpongeExpOrbData;\n-import org.spongepowered.common.data.value.SpongeValueFactory;\n import org.spongepowered.common.mixin.api.mcp.entity.EntityMixin_API;\n \n-import java.util.Collection;\n-import net.minecraft.entity.item.ExperienceOrbEntity;\n+import java.util.Set;\n \n @Mixin(ExperienceOrbEntity.class)\n public abstract class ExperienceOrbEntityMixin_API extends EntityMixin_API implements ExperienceOrb {\n \n     @Shadow private int xpValue;", "originalCommit": "f9f3deab5f7321cc50a9113895d61a039e5d551a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU3NDE4OQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364574189", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    targetEntity().map(Value::asImmutable).ifPresent(values::add);\n          \n          \n            \n                    this.targetEntity().map(Value::asImmutable).ifPresent(values::add);", "author": "gabizou", "createdAt": "2020-01-09T06:19:04Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/MobEntityMixin_API.java", "diffHunk": "@@ -52,4 +54,16 @@\n         }\n         return Optional.empty();\n     }\n+\n+    @Override\n+    protected Set<Value.Immutable<?>> api$getVanillaValues() {\n+        final Set<Value.Immutable<?>> values = super.api$getVanillaValues();\n+\n+        values.add(this.aiEnabled().asImmutable());\n+\n+        targetEntity().map(Value::asImmutable).ifPresent(values::add);", "originalCommit": "be7e1e0cf60b15503ff2a3d7289eee19fa4267fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5ODIzMw==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r364898233", "bodyText": "Should definitely not be public.", "author": "gabizou", "createdAt": "2020-01-09T18:38:53Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/projectile/EvokerFangsEntityMixin_API.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.mixin.api.mcp.entity.projectile;\n+\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.projectile.EvokerFangsEntity;\n+import org.spongepowered.api.entity.projectile.EvokerFangs;\n+import org.spongepowered.api.projectile.source.ProjectileSource;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.common.mixin.api.mcp.entity.EntityMixin_API;\n+\n+import javax.annotation.Nullable;\n+\n+@Mixin(EvokerFangsEntity.class)\n+public abstract class EvokerFangsEntityMixin_API extends EntityMixin_API implements EvokerFangs {\n+\n+    @Shadow private LivingEntity caster;\n+\n+    // Not all ProjectileSources are entities (e.g. BlockProjectileSource).\n+    // This field is used to store a ProjectileSource that isn't an entity.\n+    @Nullable public ProjectileSource api$projectileSource;", "originalCommit": "be7e1e0cf60b15503ff2a3d7289eee19fa4267fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ede81e2dcb5b57283e29295e2d29c346483f996b", "url": "https://github.com/SpongePowered/Sponge/commit/ede81e2dcb5b57283e29295e2d29c346483f996b", "message": "Implement all missing entities from 1.14 and remove old implementations of data values which override default methods.\n\nThe real big one, add api$getVanillaValues to all entities and implement about 90% of the adding to Sets", "committedDate": "2020-01-09T20:12:32Z", "type": "forcePushed"}, {"oid": "763600309b3e9b6402cd296eb2547db85cb1abb5", "url": "https://github.com/SpongePowered/Sponge/commit/763600309b3e9b6402cd296eb2547db85cb1abb5", "message": "Implement all missing entities from 1.14 and remove old implementations of data values which override default methods.\n\nThe real big one, add api$getVanillaValues to all entities and implement about 90% of the adding to Sets", "committedDate": "2020-01-09T20:22:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAyMDg4Ng==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r365020886", "bodyText": "Why aren't these keys?", "author": "Cybermaxke", "createdAt": "2020-01-10T00:12:52Z", "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/entity/passive/CatEntityMixin_API.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.mixin.api.mcp.entity.passive;\n+\n+import net.minecraft.entity.ai.goal.TemptGoal;\n+import net.minecraft.entity.monster.PhantomEntity;\n+import net.minecraft.entity.passive.CatEntity;\n+import net.minecraft.util.EntityPredicates;\n+import org.spongepowered.api.data.value.Value;\n+import org.spongepowered.api.entity.living.animal.Cat;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.common.util.Constants;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+@Mixin(CatEntity.class)\n+public abstract class CatEntityMixin_API extends TameableEntityMixin_API implements Cat {\n+\n+    @Shadow private TemptGoal temptGoal;\n+    @Shadow protected abstract boolean shadow$func_213416_eg();\n+    @Shadow protected abstract boolean shadow$func_213409_eh();\n+\n+    @Override\n+    public boolean isPurring() {", "originalCommit": "763600309b3e9b6402cd296eb2547db85cb1abb5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAyMTA2Mg==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r365021062", "bodyText": "isPurring, isBeggingForFood, isHissing", "author": "Cybermaxke", "createdAt": "2020-01-10T00:13:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAyMDg4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAyMTIwMg==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r365021202", "bodyText": "@Cybermaxke Good question. I didn't make stuff like this keys because it didn't feel like data. Basically it doesn't correlate to any value off hand. It is a logic method.", "author": "Zidane", "createdAt": "2020-01-10T00:14:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAyMDg4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAyMjczOQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2468#discussion_r365022739", "bodyText": "This is a impl detail, from API standpoint what says that it's actually a logic method?", "author": "Cybermaxke", "createdAt": "2020-01-10T00:20:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAyMDg4Ng=="}], "type": "inlineReview"}, {"oid": "59b2eba58633a5cc6df441322ed58c0e2bd3b3a8", "url": "https://github.com/SpongePowered/Sponge/commit/59b2eba58633a5cc6df441322ed58c0e2bd3b3a8", "message": "Implement all missing entities from 1.14 and remove old implementations of data values which override default methods.\n\nThe real big one, add api$getVanillaValues to all entities and implement about 90% of the adding to Sets", "committedDate": "2020-01-10T05:08:45Z", "type": "commit"}, {"oid": "59b2eba58633a5cc6df441322ed58c0e2bd3b3a8", "url": "https://github.com/SpongePowered/Sponge/commit/59b2eba58633a5cc6df441322ed58c0e2bd3b3a8", "message": "Implement all missing entities from 1.14 and remove old implementations of data values which override default methods.\n\nThe real big one, add api$getVanillaValues to all entities and implement about 90% of the adding to Sets", "committedDate": "2020-01-10T05:08:45Z", "type": "forcePushed"}]}