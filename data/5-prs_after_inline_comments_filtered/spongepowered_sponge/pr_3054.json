{"pr_number": 3054, "pr_title": "Create permission nodes for commands that do op checks.", "pr_createdAt": "2020-07-14T09:05:22Z", "pr_url": "https://github.com/SpongePowered/Sponge/pull/3054", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUzNjcwMA==", "url": "https://github.com/SpongePowered/Sponge/pull/3054#discussion_r454536700", "bodyText": "Can be avoided by checking if get return null", "author": "ImMorpheus", "createdAt": "2020-07-14T17:51:31Z", "path": "src/main/java/org/spongepowered/common/command/brigadier/dispatcher/SpongeNodePermissionCache.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.command.brigadier.dispatcher;\n+\n+import com.mojang.brigadier.CommandDispatcher;\n+import com.mojang.brigadier.tree.CommandNode;\n+import com.mojang.brigadier.tree.RootCommandNode;\n+import net.minecraft.command.CommandSource;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.spongepowered.api.entity.living.player.server.ServerPlayer;\n+import org.spongepowered.common.SpongeCommon;\n+import org.spongepowered.common.bridge.command.CommandSourceBridge;\n+import org.spongepowered.common.command.brigadier.tree.SpongePermissionWrappedLiteralCommandNode;\n+import org.spongepowered.common.service.permission.SpongePermissions;\n+\n+import java.util.Collection;\n+import java.util.Locale;\n+import java.util.WeakHashMap;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+public final class SpongeNodePermissionCache {\n+\n+    private final static Pattern ILLEGAL_CHARS = Pattern.compile(\"[^a-zA-Z0-9]\");\n+    private final static WeakHashMap<CommandNode<CommandSource>, Supplier<String>> PERMISSION_MAP = new WeakHashMap<>();\n+\n+    public static boolean canUse(\n+            final boolean isRoot,\n+            final CommandDispatcher<CommandSource> dispatcher,\n+            final CommandNode<CommandSource> node,\n+            final CommandSource source\n+    ) {\n+        final Supplier<String> supplier;\n+        if (SpongeNodePermissionCache.PERMISSION_MAP.containsKey(node)) {", "originalCommit": "ba926b223a3a6747860f13bd6435f3e38314b987", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUzNzE3Nw==", "url": "https://github.com/SpongePowered/Sponge/pull/3054#discussion_r454537177", "bodyText": "Same as above", "author": "ImMorpheus", "createdAt": "2020-07-14T17:52:12Z", "path": "src/main/java/org/spongepowered/common/command/brigadier/dispatcher/SpongeNodePermissionCache.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.command.brigadier.dispatcher;\n+\n+import com.mojang.brigadier.CommandDispatcher;\n+import com.mojang.brigadier.tree.CommandNode;\n+import com.mojang.brigadier.tree.RootCommandNode;\n+import net.minecraft.command.CommandSource;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.spongepowered.api.entity.living.player.server.ServerPlayer;\n+import org.spongepowered.common.SpongeCommon;\n+import org.spongepowered.common.bridge.command.CommandSourceBridge;\n+import org.spongepowered.common.command.brigadier.tree.SpongePermissionWrappedLiteralCommandNode;\n+import org.spongepowered.common.service.permission.SpongePermissions;\n+\n+import java.util.Collection;\n+import java.util.Locale;\n+import java.util.WeakHashMap;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+public final class SpongeNodePermissionCache {\n+\n+    private final static Pattern ILLEGAL_CHARS = Pattern.compile(\"[^a-zA-Z0-9]\");\n+    private final static WeakHashMap<CommandNode<CommandSource>, Supplier<String>> PERMISSION_MAP = new WeakHashMap<>();\n+\n+    public static boolean canUse(\n+            final boolean isRoot,\n+            final CommandDispatcher<CommandSource> dispatcher,\n+            final CommandNode<CommandSource> node,\n+            final CommandSource source\n+    ) {\n+        final Supplier<String> supplier;\n+        if (SpongeNodePermissionCache.PERMISSION_MAP.containsKey(node)) {\n+            supplier = SpongeNodePermissionCache.PERMISSION_MAP.get(node);\n+        } else {\n+            supplier = new CachingStringSupplier(() -> SpongeNodePermissionCache.createFromNode(dispatcher, node));\n+        }\n+        try {\n+            ((CommandSourceBridge) source).bridge$setPotentialPermissionNode(supplier);\n+            final boolean result = node.canUse(source);\n+            if (isRoot && node instanceof SpongePermissionWrappedLiteralCommandNode\n+                    && ((CommandSourceBridge) source).bridge$getICommandSource() instanceof ServerPlayer) {\n+                // If the entity is a player, then we should try to add it anyway.\n+                SpongePermissions.registerPermission(supplier.get(), 0);\n+            }\n+            return result;\n+        } finally {\n+            ((CommandSourceBridge) source).bridge$setPotentialPermissionNode(null);\n+        }\n+    }\n+\n+    public static String createFromNode(\n+            final CommandDispatcher<CommandSource> dispatcher,\n+            final CommandNode<CommandSource> node) {\n+        final String permission;\n+        if (node.getRedirect() != null && !(node.getRedirect() instanceof RootCommandNode) && node.getCommand() == null) {\n+            if (!SpongeNodePermissionCache.PERMISSION_MAP.containsKey(node)) {", "originalCommit": "ba926b223a3a6747860f13bd6435f3e38314b987", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0MDUyMw==", "url": "https://github.com/SpongePowered/Sponge/pull/3054#discussion_r454540523", "bodyText": "Collections#addAll to avoid list creation", "author": "ImMorpheus", "createdAt": "2020-07-14T17:57:32Z", "path": "src/main/java/org/spongepowered/common/command/manager/SpongeCommandManager.java", "diffHunk": "@@ -134,7 +140,11 @@ public CommandMapping registerAlias(\n             @NonNull final String primaryAlias,\n             @NonNull final String @NonNull ... secondaryAliases)\n             throws CommandFailedRegistrationException {\n-        final CommandMapping mapping = this.registerAliasInternal(registrar, container, primaryAlias, secondaryAliases);\n+        final List<String> aliases = new ArrayList<>();\n+        aliases.add(primaryAlias);\n+        aliases.addAll(Arrays.asList(secondaryAliases));", "originalCommit": "ba926b223a3a6747860f13bd6435f3e38314b987", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0MTY2MQ==", "url": "https://github.com/SpongePowered/Sponge/pull/3054#discussion_r454541661", "bodyText": "if (!contains) add -> if (add)", "author": "ImMorpheus", "createdAt": "2020-07-14T17:59:28Z", "path": "src/main/java/org/spongepowered/common/service/permission/SpongePermissions.java", "diffHunk": "@@ -65,4 +68,22 @@ public static void populateNonCommandPermissions(final SubjectData data, final B\n         }\n     }\n \n+    public static void registerPermission(final String permissionNode, final int opLevel) {\n+        if (!REGISTERED_PERMISSIONS.contains(permissionNode)) {", "originalCommit": "ba926b223a3a6747860f13bd6435f3e38314b987", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0MzEyOA==", "url": "https://github.com/SpongePowered/Sponge/pull/3054#discussion_r454543128", "bodyText": "This is returning a mutable collection but SpongeRootCommandNode is returning an immutable one. Is it intended ?", "author": "ImMorpheus", "createdAt": "2020-07-14T18:01:45Z", "path": "src/main/java/org/spongepowered/common/command/brigadier/tree/SpongeArgumentCommandNode.java", "diffHunk": "@@ -201,4 +206,14 @@ public final void parse(final StringReader reader, final CommandContextBuilder<C\n         return this.parser.getExamples();\n     }\n \n+    @Override\n+    public void addChild(final CommandNode<CommandSource> node) {\n+        super.addChild(node);\n+        this.childNodes.add(node);\n+    }\n+\n+    @Override\n+    public Collection<CommandNode<CommandSource>> getUnsortedChildren() {\n+        return this.childNodes;", "originalCommit": "ba926b223a3a6747860f13bd6435f3e38314b987", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY2ODgwNQ==", "url": "https://github.com/SpongePowered/Sponge/pull/3054#discussion_r454668805", "bodyText": "The intention was to just return the mutable collection for the simple reason that it's only being used in an iteration in one of the mixins to therefore avoid a copy of what could end up being a large collection. I may wrap it in Collections.unmodifiableCollection(...) or something.\nAs for the root collection, probably me in auto-mode.", "author": "dualspiral", "createdAt": "2020-07-14T21:55:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0MzEyOA=="}], "type": "inlineReview"}, {"oid": "5cc6448a6e3c62605818f58f69a64644db7e92ff", "url": "https://github.com/SpongePowered/Sponge/commit/5cc6448a6e3c62605818f58f69a64644db7e92ff", "message": "Another class, another final...", "committedDate": "2020-07-14T21:24:39Z", "type": "forcePushed"}, {"oid": "db8f55b4ddb7d7e80f4838f105b0b8966c1023f3", "url": "https://github.com/SpongePowered/Sponge/commit/db8f55b4ddb7d7e80f4838f105b0b8966c1023f3", "message": "Another class, another final...", "committedDate": "2020-07-14T21:49:06Z", "type": "forcePushed"}, {"oid": "9a75da58281f25928a44f646bf34da462e961075", "url": "https://github.com/SpongePowered/Sponge/commit/9a75da58281f25928a44f646bf34da462e961075", "message": "First stab at associating permissions with commands\n\nStill need to decide what to do with other calls to permission level. It'll probably just be \"sponge.oplevel.<modid>.<level>\", but we'll see what we can do.\n\n* Fix bug where some redirects were not actually in the tree.\n* Bypass Mojang sorting their argument nodes for client completions.\n* Permissions now work for Command.Parameterized commands/subcommands", "committedDate": "2020-07-14T22:16:39Z", "type": "forcePushed"}, {"oid": "b90b6c73011b95da5578d1e336770f82eba3727a", "url": "https://github.com/SpongePowered/Sponge/commit/b90b6c73011b95da5578d1e336770f82eba3727a", "message": "First stab at associating permissions with commands\n\nStill need to decide what to do with other calls to permission level. It'll probably just be \"sponge.oplevel.<modid>.<level>\", but we'll see what we can do.\n\n* Fix bug where some redirects were not actually in the tree.\n* Bypass Mojang sorting their argument nodes for client completions.\n* Permissions now work for Command.Parameterized commands/subcommands\n* Ensure that the correct cause is on the command source if the CommandCause is Sponge created", "committedDate": "2020-07-15T17:09:44Z", "type": "forcePushed"}, {"oid": "094bd46140a65f909ad659ef3d99c0a41a0cda8a", "url": "https://github.com/SpongePowered/Sponge/commit/094bd46140a65f909ad659ef3d99c0a41a0cda8a", "message": "First stab at associating permissions with commands\n\nStill need to decide what to do with other calls to permission level. It'll probably just be \"sponge.oplevel.<modid>.<level>\", but we'll see what we can do.\n\n* Fix bug where some redirects were not actually in the tree.\n* Bypass Mojang sorting their argument nodes for client completions.\n* Permissions now work for Command.Parameterized commands/subcommands\n* Ensure that the correct cause is on the command source if the CommandCause is Sponge created", "committedDate": "2020-07-15T17:16:29Z", "type": "forcePushed"}, {"oid": "8a3869ae50334d35a332a65746223dd91d2e5a00", "url": "https://github.com/SpongePowered/Sponge/commit/8a3869ae50334d35a332a65746223dd91d2e5a00", "message": "Drop these to debug level messages", "committedDate": "2020-07-15T17:57:00Z", "type": "forcePushed"}, {"oid": "5be5c1b970d628c961f40d6df2498837be70de8a", "url": "https://github.com/SpongePowered/Sponge/commit/5be5c1b970d628c961f40d6df2498837be70de8a", "message": "First stab at associating permissions with commands\n\nStill need to decide what to do with other calls to permission level. It'll probably just be \"sponge.oplevel.<modid>.<level>\", but we'll see what we can do.\n\n* Fix bug where some redirects were not actually in the tree.\n* Bypass Mojang sorting their argument nodes for client completions.\n* Permissions now work for Command.Parameterized commands/subcommands\n* Ensure that the correct cause is on the command source if the CommandCause is Sponge created\n* Add base to permission nodes so granting a root command permission does not grant its subcommands\n* Command blocks use permissions again", "committedDate": "2020-07-17T08:24:14Z", "type": "forcePushed"}, {"oid": "82b1652424cea8dc99baecd31afad751aad852de", "url": "https://github.com/SpongePowered/Sponge/commit/82b1652424cea8dc99baecd31afad751aad852de", "message": "First stab at associating permissions with commands\n\nStill need to decide what to do with other calls to permission level. It'll probably just be \"sponge.oplevel.<modid>.<level>\", but we'll see what we can do.\n\n* Fix bug where some redirects were not actually in the tree.\n* Bypass Mojang sorting their argument nodes for client completions.\n* Permissions now work for Command.Parameterized commands/subcommands\n* Ensure that the correct cause is on the command source if the CommandCause is Sponge created\n* Add base to permission nodes so granting a root command permission does not grant its subcommands\n* Command blocks use permissions again", "committedDate": "2020-07-17T08:44:32Z", "type": "forcePushed"}, {"oid": "8add6e8a8082fb5a3b6eeac33b580dd30aff82aa", "url": "https://github.com/SpongePowered/Sponge/commit/8add6e8a8082fb5a3b6eeac33b580dd30aff82aa", "message": "First stab at associating permissions with commands\n\nStill need to decide what to do with other calls to permission level. It'll probably just be \"sponge.oplevel.<modid>.<level>\", but we'll see what we can do.\n\n* Fix bug where some redirects were not actually in the tree.\n* Bypass Mojang sorting their argument nodes for client completions.\n* Permissions now work for Command.Parameterized commands/subcommands\n* Ensure that the correct cause is on the command source if the CommandCause is Sponge created\n* Add base to permission nodes so granting a root command permission does not grant its subcommands\n* Command blocks use permissions again", "committedDate": "2020-07-17T19:47:49Z", "type": "forcePushed"}, {"oid": "ac08b8dbaacd35f86af5a17bd2e3373c9fcf4c95", "url": "https://github.com/SpongePowered/Sponge/commit/ac08b8dbaacd35f86af5a17bd2e3373c9fcf4c95", "message": "First stab at associating permissions with commands\n\nStill need to decide what to do with other calls to permission level. It'll probably just be \"sponge.oplevel.<modid>.<level>\", but we'll see what we can do.\n\n* Fix bug where some redirects were not actually in the tree.\n* Bypass Mojang sorting their argument nodes for client completions.\n* Permissions now work for Command.Parameterized commands/subcommands\n* Ensure that the correct cause is on the command source if the CommandCause is Sponge created\n* Add base to permission nodes so granting a root command permission does not grant its subcommands\n* Command blocks use permissions again", "committedDate": "2020-07-18T14:13:31Z", "type": "commit"}, {"oid": "ac08b8dbaacd35f86af5a17bd2e3373c9fcf4c95", "url": "https://github.com/SpongePowered/Sponge/commit/ac08b8dbaacd35f86af5a17bd2e3373c9fcf4c95", "message": "First stab at associating permissions with commands\n\nStill need to decide what to do with other calls to permission level. It'll probably just be \"sponge.oplevel.<modid>.<level>\", but we'll see what we can do.\n\n* Fix bug where some redirects were not actually in the tree.\n* Bypass Mojang sorting their argument nodes for client completions.\n* Permissions now work for Command.Parameterized commands/subcommands\n* Ensure that the correct cause is on the command source if the CommandCause is Sponge created\n* Add base to permission nodes so granting a root command permission does not grant its subcommands\n* Command blocks use permissions again", "committedDate": "2020-07-18T14:13:31Z", "type": "forcePushed"}]}