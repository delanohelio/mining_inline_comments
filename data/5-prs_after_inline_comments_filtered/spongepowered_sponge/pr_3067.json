{"pr_number": 3067, "pr_title": "Replace UserDiscoverer with stripped back ServerUserProvider.", "pr_createdAt": "2020-07-15T20:49:58Z", "pr_url": "https://github.com/SpongePowered/Sponge/pull/3067", "timeline": [{"oid": "aa6dd4404bec9d30030d8a68f6d4ac704594daae", "url": "https://github.com/SpongePowered/Sponge/commit/aa6dd4404bec9d30030d8a68f6d4ac704594daae", "message": "Save the username cache json when we save the worlds", "committedDate": "2020-07-16T19:56:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwNDc4Nw==", "url": "https://github.com/SpongePowered/Sponge/pull/3067#discussion_r456604787", "bodyText": "This method (getUser) is equivalent to this.getUser(this.server.getPlayerProfileCache().getProfileByUUID(uuid), true);", "author": "ImMorpheus", "createdAt": "2020-07-17T18:24:38Z", "path": "src/main/java/org/spongepowered/common/user/ServerUserProvider.java", "diffHunk": "@@ -0,0 +1,336 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.user;\n+\n+import com.github.benmanes.caffeine.cache.Cache;\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import com.google.common.collect.BiMap;\n+import com.google.common.collect.HashBiMap;\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.management.PlayerProfileCache;\n+import net.minecraft.world.storage.SaveHandler;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.spongepowered.api.Server;\n+import org.spongepowered.api.entity.living.player.User;\n+import org.spongepowered.api.profile.GameProfile;\n+import org.spongepowered.api.profile.GameProfileCache;\n+import org.spongepowered.common.SpongeCommon;\n+import org.spongepowered.common.accessor.server.management.PlayerListAccessor;\n+import org.spongepowered.common.accessor.world.storage.SaveHandlerAccessor;\n+import org.spongepowered.common.entity.player.SpongeUser;\n+\n+import java.io.IOException;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardWatchEventKinds;\n+import java.nio.file.WatchEvent;\n+import java.nio.file.WatchKey;\n+import java.nio.file.WatchService;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Stream;\n+\n+public final class ServerUserProvider {\n+\n+    private final MinecraftServer server;\n+\n+    // This is the important set - this tells us if a User file actually exists,\n+    // it should mirror the filesystem. The other two caches below are for\n+    // access speed.\n+    private final Set<UUID> knownUUIDs = new HashSet<>();\n+    private final Cache<UUID, User> userCache;\n+\n+    private final Map<String, MutableWatchEvent> watcherUpdateMap = new HashMap<>();\n+\n+    @Nullable private WatchService filesystemWatchService = null;\n+    @Nullable private WatchKey watchKey = null;\n+\n+    public ServerUserProvider(final Server server) {\n+        this.userCache = Caffeine.newBuilder()\n+                .expireAfterAccess(1, TimeUnit.DAYS)\n+                .build();\n+        this.server = (MinecraftServer) server;\n+    }\n+\n+    void setupWatchers() {\n+        this.teardownWatchers();\n+        // Setup the watch service\n+        try {\n+            this.filesystemWatchService = FileSystems.getDefault().newWatchService();\n+            this.watchKey = this.getSaveHandlerDirectory().register(\n+                    this.filesystemWatchService,\n+                    StandardWatchEventKinds.ENTRY_CREATE,\n+                    StandardWatchEventKinds.ENTRY_DELETE);\n+        } catch (final IOException e) {\n+            SpongeCommon.getLogger().warn(\"Could not start file watcher\");\n+            if (this.filesystemWatchService != null) {\n+                // it might be the watchKey that failed, so null it out again.\n+                try {\n+                    this.filesystemWatchService.close();\n+                } catch (final IOException ex) {\n+                    // ignored\n+                }\n+            }\n+            this.watchKey = null;\n+            this.filesystemWatchService = null;\n+        }\n+    }\n+\n+    void teardownWatchers() {\n+        if (this.watchKey != null) {\n+            this.watchKey.cancel();\n+            this.watchKey = null;\n+        }\n+\n+        if (this.filesystemWatchService != null) {\n+            try {\n+                this.filesystemWatchService.close();\n+            } catch (final IOException e) {\n+                // ignored - we're nulling this anyway\n+            } finally {\n+                this.filesystemWatchService = null;\n+            }\n+        }\n+    }\n+\n+    void refreshFilesystemProfiles() {\n+        if (this.watchKey != null && this.watchKey.isValid()) {\n+            this.watchKey.reset();\n+        }\n+        this.knownUUIDs.clear();\n+        this.userCache.invalidateAll();\n+\n+        // Add all known profiles from the data files\n+        final String[] uuids = this.getSaveHandler().func_215771_d();\n+        for (final String playerUuid : uuids) {\n+\n+            // If the filename contains a period, we can fail fast. Vanilla code fixes the Strings that have \".dat\" to strip that out\n+            // before passing that back in getAvailablePlayerDat. It doesn't remove non \".dat\" filenames from the list.\n+            if (playerUuid.contains(\".\")) {\n+                continue;\n+            }\n+\n+            // At this point, we have a filename who has no extension. This doesn't mean it is actually a UUID. We trap the exception and ignore\n+            // any filenames that fail the UUID check.\n+            final UUID uuid;\n+            try {\n+                uuid = UUID.fromString(playerUuid);\n+            } catch (final Exception ex) {\n+                continue;\n+            }\n+\n+            this.knownUUIDs.add(uuid);\n+        }\n+    }\n+\n+    Optional<User> getUser(final String lastKnownName) {\n+        final com.mojang.authlib.GameProfile gameProfile = this.server.getPlayerProfileCache().getGameProfileForUsername(lastKnownName);\n+        if (gameProfile == null) {\n+            return Optional.empty();\n+        }\n+        return this.getUser((GameProfile) gameProfile, true);\n+    }\n+\n+    Optional<User> getUser(final UUID uuid) {\n+        this.pollFilesystemWatcher();", "originalCommit": "690ba27f296934e57e128d9de2b050be9c09af50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a1cf23b58db75b4ac0e7a85d3d405a064e6936b5", "url": "https://github.com/SpongePowered/Sponge/commit/a1cf23b58db75b4ac0e7a85d3d405a064e6936b5", "message": "Replace UserDiscoverer with stripped back ServerUserProvider.\n\nThe idea of the UserManager is to manage User objects, not GameProfiles. While we do some operations with GameProfiles, they mirror what Users we think have been created.\n\nThe file system watching is in, but all GameProfile caching is delegated to the PlayerProfileCache, which we just get profiles from when required.\n\n* Save the username cache json when we save the worlds\n* Add stream methods to GameProfileCache\n* Create UUID only GameProfiles for files that don't have an associated profile during the stream methods", "committedDate": "2020-07-17T19:30:42Z", "type": "forcePushed"}, {"oid": "a6297e383b671f011d4a56c4f84bde663f5ed15a", "url": "https://github.com/SpongePowered/Sponge/commit/a6297e383b671f011d4a56c4f84bde663f5ed15a", "message": "Replace UserDiscoverer with stripped back ServerUserProvider.\n\nThe idea of the UserManager is to manage User objects, not GameProfiles. While we do some operations with GameProfiles, they mirror what Users we think have been created.\n\nThe file system watching is in, but all GameProfile caching is delegated to the PlayerProfileCache, which we just get profiles from when required.\n\n* Save the username cache json when we save the worlds\n* Add stream methods to GameProfileCache\n* Create UUID only GameProfiles for files that don't have an associated profile during the stream methods", "committedDate": "2020-07-17T19:39:38Z", "type": "commit"}, {"oid": "a6297e383b671f011d4a56c4f84bde663f5ed15a", "url": "https://github.com/SpongePowered/Sponge/commit/a6297e383b671f011d4a56c4f84bde663f5ed15a", "message": "Replace UserDiscoverer with stripped back ServerUserProvider.\n\nThe idea of the UserManager is to manage User objects, not GameProfiles. While we do some operations with GameProfiles, they mirror what Users we think have been created.\n\nThe file system watching is in, but all GameProfile caching is delegated to the PlayerProfileCache, which we just get profiles from when required.\n\n* Save the username cache json when we save the worlds\n* Add stream methods to GameProfileCache\n* Create UUID only GameProfiles for files that don't have an associated profile during the stream methods", "committedDate": "2020-07-17T19:39:38Z", "type": "forcePushed"}]}