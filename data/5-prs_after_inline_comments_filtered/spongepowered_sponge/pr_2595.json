{"pr_number": 2595, "pr_title": "Fix/invisibility processor", "pr_createdAt": "2020-05-02T20:34:49Z", "pr_url": "https://github.com/SpongePowered/Sponge/pull/2595", "timeline": [{"oid": "2ac0da9df68180ecacb36a235e922e556ab0a690", "url": "https://github.com/SpongePowered/Sponge/commit/2ac0da9df68180ecacb36a235e922e556ab0a690", "message": "Fix InvisibilityDataProcessor ignoring uncollideable and untargetable state when vanish is false", "committedDate": "2020-05-02T20:27:24Z", "type": "commit"}, {"oid": "4d5c38b40d6febd9fd3ebcfe480b24d54107440f", "url": "https://github.com/SpongePowered/Sponge/commit/4d5c38b40d6febd9fd3ebcfe480b24d54107440f", "message": "VANISH_IGNORES_COLLISION should be ignored if the Entity is not also vanished", "committedDate": "2020-05-02T20:28:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA4Mzg1Ng==", "url": "https://github.com/SpongePowered/Sponge/pull/2595#discussion_r419083856", "bodyText": "So... is this right? When vanish is false, the entity in question should unquestionably be collidable. I'm a little worried that we're getting into a spiderweb here where we have a bridge method named one thing and the key named the other.\nOne school of thought is setting VANISH_IGNORES_COLLISION and VANISH_PREVENTS_TARGETING to true should not be cleared by setting VANISH to false. That feels largely expected and I err on the side of agreeing with that. I'm thus not against this change myself, but we need to make other changes to insulate ourselves against other issues.\nHowever, I know this is in impl, but bridge$setUncollideable and bridge$setUntargetable should really be named better to indicate that they are on vanish only. Their representive is methods should then be renamed similarly AND include a vanish check within their bodies. I'd rather check one method for collisions, rather than tacking on a vanish check everywhere too because it's not obvious that's what needs to happen.\nIf we want/need separate non-vanish uncollidable/targetting states then we need to think about that more, because we now need to think about how this will work with the vanish based states.", "author": "dualspiral", "createdAt": "2020-05-03T10:39:53Z", "path": "src/main/java/org/spongepowered/common/data/processor/multi/entity/InvisibilityDataProcessor.java", "diffHunk": "@@ -67,13 +67,9 @@ protected boolean set(final VanishableBridge dataHolder, final Map<Key<?>, Objec\n         final boolean untargetable = (Boolean) keyValues.get(Keys.VANISH_PREVENTS_TARGETING);\n         final boolean vanish = (Boolean) keyValues.get(Keys.VANISH);\n         dataHolder.bridge$setInvisible(invis);\n-        if (vanish) {\n-            dataHolder.bridge$setVanished(true);\n-            dataHolder.bridge$setUncollideable(collision);\n-            dataHolder.bridge$setUntargetable(untargetable);\n-        } else {\n-            dataHolder.bridge$setVanished(false);\n-        }\n+        dataHolder.bridge$setVanished(vanish);\n+        dataHolder.bridge$setUncollideable(collision);", "originalCommit": "4d5c38b40d6febd9fd3ebcfe480b24d54107440f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE0NTA5Nw==", "url": "https://github.com/SpongePowered/Sponge/pull/2595#discussion_r419145097", "bodyText": "From what I gathered from the implementation and the API  (This state will be ignored if the {@link Entity} is not also vanished as per {@link #VANISH}.) the uncollideable state should be ignored in the implementation, not in the data processor.\n\nOne school of thought is setting VANISH_IGNORES_COLLISION and VANISH_PREVENTS_TARGETING to true should not be cleared by setting VANISH to false. That feels largely expected and I err on the side of agreeing with that. I'm thus not against this change myself, but we need to make other changes to insulate ourselves against other issues.\n\nAgreed, but not only that. As it stands now, setting VANISH_IGNORES_COLLISION explicitily to false is ignored if you're also setting VANISH to false. That doesn't feel right to me.\n\nHowever, I know this is in impl, but bridge$setUncollideable and bridge$setUntargetable should really be named better to indicate that they are on vanish only. Their representive is methods should then be renamed similarly AND include a vanish check within their bodies. I'd rather check one method for collisions, rather than tacking on a vanish check everywhere too because it's not obvious that's what needs to happen.\n\nEDIT: I'm not sure anymore about this. Discussions welcomed", "author": "ImMorpheus", "createdAt": "2020-05-03T19:02:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA4Mzg1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU0MDEyMQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2595#discussion_r421540121", "bodyText": "Okay, so I was looking about and thinking about previous discussions, and if vanish is false, the other two keys are removed from the user compound anyway (see here and here). So in the interests of getting fix in, I think we should change the calls as follows:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    dataHolder.bridge$setUncollideable(collision);\n          \n          \n            \n                    dataHolder.bridge$setUntargetable(untargetable);\n          \n          \n            \n                    dataHolder.bridge$setUncollideable(vanish && collision);\n          \n          \n            \n                    dataHolder.bridge$setUntargetable(vanish && untargetable);\n          \n      \n    \n    \n  \n\nbecause that's clearly the intention behind what's going on - even though I'm not 100% convinced it's what we should be doing in the wider notion, as I have talked about above.\nI would much rather have the isUncolliable methods renamed and updated to also consider vanish state, but I am more interested in having this fixed without having this stuck for ages because it's otherwise not good for our users.", "author": "dualspiral", "createdAt": "2020-05-07T14:17:48Z", "path": "src/main/java/org/spongepowered/common/data/processor/multi/entity/InvisibilityDataProcessor.java", "diffHunk": "@@ -67,13 +67,9 @@ protected boolean set(final VanishableBridge dataHolder, final Map<Key<?>, Objec\n         final boolean untargetable = (Boolean) keyValues.get(Keys.VANISH_PREVENTS_TARGETING);\n         final boolean vanish = (Boolean) keyValues.get(Keys.VANISH);\n         dataHolder.bridge$setInvisible(invis);\n-        if (vanish) {\n-            dataHolder.bridge$setVanished(true);\n-            dataHolder.bridge$setUncollideable(collision);\n-            dataHolder.bridge$setUntargetable(untargetable);\n-        } else {\n-            dataHolder.bridge$setVanished(false);\n-        }\n+        dataHolder.bridge$setVanished(vanish);\n+        dataHolder.bridge$setUncollideable(collision);\n+        dataHolder.bridge$setUntargetable(untargetable);", "originalCommit": "4d5c38b40d6febd9fd3ebcfe480b24d54107440f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "15113ab67126126534b988be804c7a6f176fbed4", "url": "https://github.com/SpongePowered/Sponge/commit/15113ab67126126534b988be804c7a6f176fbed4", "message": "Update src/main/java/org/spongepowered/common/data/processor/multi/entity/InvisibilityDataProcessor.java\n\nCo-authored-by: Daniel Naylor <dualspiral@users.noreply.github.com>", "committedDate": "2020-05-09T15:57:41Z", "type": "commit"}]}