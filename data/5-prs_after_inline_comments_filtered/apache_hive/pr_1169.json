{"pr_number": 1169, "pr_title": "HIVE-20447: Add JSON Output Format to beeline", "pr_createdAt": "2020-06-23T13:26:53Z", "pr_url": "https://github.com/apache/hive/pull/1169", "timeline": [{"oid": "1b646676998b6305832aff1456b49082dc3c5dd3", "url": "https://github.com/apache/hive/commit/1b646676998b6305832aff1456b49082dc3c5dd3", "message": "Fixed null values being printed as \"NULL\"", "committedDate": "2020-06-26T14:39:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0MTQzMg==", "url": "https://github.com/apache/hive/pull/1169#discussion_r448341432", "bodyText": "Add a new line to end of file", "author": "belugabehr", "createdAt": "2020-07-01T12:52:33Z", "path": "beeline/src/test/org/apache/hive/beeline/TestJSONOutputFormat.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hive.beeline;\n+\n+import static org.mockito.ArgumentMatchers.anyInt;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import java.io.PrintStream;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.util.ArrayList;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class TestJSONOutputFormat {\n+\n+  private final Object[][] mockRowData = {\n+      {\"aaa\", true, null, Double.valueOf(3.14), \"\\\\/\\b\\f\\n\\r\\t\"}\n+  };\n+  private TestJSONOutputFormat.BeelineMock mockBeeline;\n+  private ResultSet mockResultSet;\n+  private MockRow mockRow;\n+\n+  @Before\n+  public void setupMockData() throws SQLException {\n+    mockBeeline = new TestJSONOutputFormat.BeelineMock();\n+    mockResultSet = mock(ResultSet.class);\n+\n+    ResultSetMetaData mockResultSetMetaData = mock(ResultSetMetaData.class);\n+    when(mockResultSetMetaData.getColumnCount()).thenReturn(5);\n+    when(mockResultSetMetaData.getColumnLabel(1)).thenReturn(\"string\");\n+    when(mockResultSetMetaData.getColumnLabel(2)).thenReturn(\"boolean\");\n+    when(mockResultSetMetaData.getColumnLabel(3)).thenReturn(\"null\");\n+    when(mockResultSetMetaData.getColumnLabel(4)).thenReturn(\"double\");\n+    when(mockResultSetMetaData.getColumnLabel(5)).thenReturn(\"special symbols\");\n+    when(mockResultSetMetaData.getColumnType(1)).thenReturn(Types.VARCHAR);\n+    when(mockResultSetMetaData.getColumnType(2)).thenReturn(Types.BOOLEAN);\n+    when(mockResultSetMetaData.getColumnType(3)).thenReturn(Types.NULL);\n+    when(mockResultSetMetaData.getColumnType(4)).thenReturn(Types.DOUBLE);\n+    when(mockResultSetMetaData.getColumnType(5)).thenReturn(Types.VARCHAR);\n+    when(mockResultSet.getMetaData()).thenReturn(mockResultSetMetaData);\n+\n+    mockRow = new MockRow();\n+    // returns true as long as there is more data in mockResultData array\n+    when(mockResultSet.next()).thenAnswer(new Answer<Boolean>() {\n+      private int mockRowDataIndex = 0;\n+\n+      @Override\n+      public Boolean answer(final InvocationOnMock invocation) {\n+        if (mockRowDataIndex < mockRowData.length) {\n+          mockRow.setCurrentRowData(mockRowData[mockRowDataIndex]);\n+          mockRowDataIndex++;\n+          return true;\n+        } else {\n+          return false;\n+        }\n+      }\n+    });\n+\n+    when(mockResultSet.getObject(anyInt())).thenAnswer(new Answer<Object>() {\n+      @Override\n+      public Object answer(final InvocationOnMock invocation) {\n+        Object[] args = invocation.getArguments();\n+        int index = ((Integer) args[0]);\n+        return mockRow.getColumn(index);\n+      }\n+    });\n+  }\n+\n+  /**\n+   * Test printing output data with JsonOutputFormat\n+   */\n+  @Test\n+  public final void testPrint() throws SQLException {\n+    setupMockData();\n+    BufferedRows bfRows = new BufferedRows(mockBeeline, mockResultSet);\n+    JSONOutputFormat instance = new JSONOutputFormat(mockBeeline);\n+    instance.print(bfRows);\n+    ArrayList<String> actualOutput = mockBeeline.getLines();\n+    ArrayList<String> expectedOutput = new ArrayList<>(6);\n+    expectedOutput.add(\"{\\\"resultset\\\":[\");\n+    expectedOutput.add(\"{\\\"string\\\":\\\"aaa\\\",\" + \"\\\"boolean\\\":true,\" + \"\\\"null\\\":null,\" + \"\\\"double\\\":3.14,\"\n+        + \"\\\"special symbols\\\":\\\"\\\\\\\\\\\\/\\\\b\\\\f\\\\n\\\\r\\\\t\\\"}\");\n+    expectedOutput.add(\"]}\");\n+    assertArrayEquals(expectedOutput.toArray(), actualOutput.toArray());\n+  }\n+\n+  public class BeelineMock extends BeeLine {\n+\n+    private ArrayList<String> lines = new ArrayList<>();\n+\n+    @Override\n+    final void output(final ColorBuffer msg, boolean newline, PrintStream out) {\n+      lines.add(msg.getMono());\n+      super.output(msg, newline, out);\n+    }\n+\n+    private ArrayList<String> getLines() {\n+      return lines;\n+    }\n+  }\n+\n+  static class MockRow {\n+    Object[] rowData;\n+\n+    public void setCurrentRowData(Object[] rowData) {\n+      this.rowData = rowData;\n+    }\n+\n+    public Object getColumn(int idx) {\n+      return rowData[idx - 1];\n+    }\n+  }\n+}", "originalCommit": "1b646676998b6305832aff1456b49082dc3c5dd3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0MTg2Nw==", "url": "https://github.com/apache/hive/pull/1169#discussion_r448341867", "bodyText": "Take a look at this:\nhttps://fasterxml.github.io/jackson-core/javadoc/2.8/com/fasterxml/jackson/core/JsonGenerator.html\nPlease use the Jackson JSON generator to... generate JSON. :)", "author": "belugabehr", "createdAt": "2020-07-01T12:53:21Z", "path": "beeline/src/java/org/apache/hive/beeline/JSONOutputFormat.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/*\n+ * This source file is based on code taken from SQLLine 1.9\n+ * See SQLLine notice in LICENSE\n+ */\n+package org.apache.hive.beeline;\n+\n+import java.sql.SQLException;\n+import java.sql.Types;\n+\n+import com.fasterxml.jackson.core.io.JsonStringEncoder;\n+\n+/**\n+ * OutputFormat for standard JSON format.\n+ *\n+ */ \n+public class JSONOutputFormat extends AbstractOutputFormat {\n+  private final BeeLine beeLine;\n+  private int[] columnTypes;\n+  private JsonStringEncoder jse = JsonStringEncoder.getInstance();", "originalCommit": "1b646676998b6305832aff1456b49082dc3c5dd3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU5MzgwOQ==", "url": "https://github.com/apache/hive/pull/1169#discussion_r451593809", "bodyText": "Nit: The Hive style guidelines require a period at the end of the first sentence here.\nPlease provide an example and provide some additional context... something like...\nThis output format matches the same format as a Hive table created with JSONFILE file format:\n\nCREATE TABLE ... STORED AS JSONFILE;\n\nThen provide a sample output in the JavaDoc.  Feel free to use HTML tags and JavaDoc docs to format and enhance.", "author": "belugabehr", "createdAt": "2020-07-08T14:34:51Z", "path": "beeline/src/java/org/apache/hive/beeline/JSONFileOutputFormat.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/*\n+ * This source file is based on code taken from SQLLine 1.9\n+ * See SQLLine notice in LICENSE\n+ */\n+package org.apache.hive.beeline;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;\n+\n+/**\n+ * OutputFormat for hive JSON file format\n+ * Removes \"{ \"resultset\": [...] }\" wrapping and prints one object per line\n+ * ", "originalCommit": "55ce6341e5853a837d1bfa03354b0a5320edbd39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU5OTQwOQ==", "url": "https://github.com/apache/hive/pull/1169#discussion_r451599409", "bodyText": "Add newline to end of files :)", "author": "belugabehr", "createdAt": "2020-07-08T14:42:24Z", "path": "beeline/src/java/org/apache/hive/beeline/JSONFileOutputFormat.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/*\n+ * This source file is based on code taken from SQLLine 1.9\n+ * See SQLLine notice in LICENSE\n+ */\n+package org.apache.hive.beeline;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;\n+\n+/**\n+ * OutputFormat for hive JSON file format\n+ * Removes \"{ \"resultset\": [...] }\" wrapping and prints one object per line\n+ * \n+ */ \n+public class JSONFileOutputFormat extends JSONOutputFormat {\n+  \n+\n+  JSONFileOutputFormat(BeeLine beeLine) {\n+    super(beeLine);\n+    this.generator.setPrettyPrinter(new MinimalPrettyPrinter(\"\\n\"));\n+  }\n+\n+  @Override\n+  void printHeader(Rows.Row header) {}\n+\n+  @Override\n+  void printFooter(Rows.Row header) {}\n+\n+  @Override\n+  void printRow(Rows rows, Rows.Row header, Rows.Row row) {\n+    try {\n+      this.generator.writeStartObject();\n+      super.printRow(rows, header, row);\n+      this.generator.writeEndObject();\n+    } catch (IOException e) {\n+      this.beeLine.handleException(e);\n+    }\n+  }\n+}", "originalCommit": "55ce6341e5853a837d1bfa03354b0a5320edbd39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYwMDE0MA==", "url": "https://github.com/apache/hive/pull/1169#discussion_r451600140", "bodyText": "I'm a bit surprised by this.  Why does this not write a startObject/endObject per row?", "author": "belugabehr", "createdAt": "2020-07-08T14:43:22Z", "path": "beeline/src/java/org/apache/hive/beeline/JSONOutputFormat.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/*\n+ * This source file is based on code taken from SQLLine 1.9\n+ * See SQLLine notice in LICENSE\n+ */\n+package org.apache.hive.beeline;\n+\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.core.JsonEncoding;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+\n+/**\n+ * OutputFormat for standard JSON format.\n+ *\n+ */ \n+public class JSONOutputFormat extends AbstractOutputFormat {\n+  protected final BeeLine beeLine;\n+  protected JsonGenerator generator;\n+  \n+\n+  /**\n+   * @param beeLine\n+   */\n+  JSONOutputFormat(BeeLine beeLine){ \n+    this.beeLine = beeLine;\n+    ByteArrayOutputStream buf = new ByteArrayOutputStream();\n+    try{\n+      this.generator = new JsonFactory().createGenerator(buf, JsonEncoding.UTF8);\n+    }catch(IOException e){\n+      beeLine.handleException(e);\n+    }\n+  }\n+\n+  @Override \n+  void printHeader(Rows.Row header) {\n+    try {\n+      generator.writeStartObject();\n+      generator.writeArrayFieldStart(\"resultset\");\n+    } catch (IOException e) {\n+      beeLine.handleException(e);\n+    }\n+  }\n+\n+  @Override \n+  void printFooter(Rows.Row header) {\n+    try {\n+      generator.writeEndArray();\n+      generator.writeEndObject();\n+      beeLine.output(generator.getOutputTarget().toString());\n+      generator.flush();\n+    } catch (IOException e) {\n+      beeLine.handleException(e);\n+    }\n+  }\n+\n+  @Override \n+  void printRow(Rows rows, Rows.Row header, Rows.Row row) {", "originalCommit": "55ce6341e5853a837d1bfa03354b0a5320edbd39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYwMzcwMg==", "url": "https://github.com/apache/hive/pull/1169#discussion_r451603702", "bodyText": "Typically you want to flush the object to the underlying stream (ByteArrayOutputStream in this case) in case the object is doing any kind of internal buffering in order to \"flush\" its content out.\nWhile your beeLine.output is technically correct.  It's a bit confusing to other coders.\nOrder of operations should be:\n\nFlush the generator to clear any buffering into the target OutputStream\nConvert the OutputStream into the target output format (String in this situation)\nPlease use a new String() with UTF-8 encoding explicitly specified here\n\nhttps://docs.oracle.com/javase/8/docs/api/java/lang/String.html#String-byte:A-java.nio.charset.Charset-", "author": "belugabehr", "createdAt": "2020-07-08T14:48:16Z", "path": "beeline/src/java/org/apache/hive/beeline/JSONOutputFormat.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/*\n+ * This source file is based on code taken from SQLLine 1.9\n+ * See SQLLine notice in LICENSE\n+ */\n+package org.apache.hive.beeline;\n+\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.core.JsonEncoding;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+\n+/**\n+ * OutputFormat for standard JSON format.\n+ *\n+ */ \n+public class JSONOutputFormat extends AbstractOutputFormat {\n+  protected final BeeLine beeLine;\n+  protected JsonGenerator generator;\n+  \n+\n+  /**\n+   * @param beeLine\n+   */\n+  JSONOutputFormat(BeeLine beeLine){ \n+    this.beeLine = beeLine;\n+    ByteArrayOutputStream buf = new ByteArrayOutputStream();\n+    try{\n+      this.generator = new JsonFactory().createGenerator(buf, JsonEncoding.UTF8);\n+    }catch(IOException e){\n+      beeLine.handleException(e);\n+    }\n+  }\n+\n+  @Override \n+  void printHeader(Rows.Row header) {\n+    try {\n+      generator.writeStartObject();\n+      generator.writeArrayFieldStart(\"resultset\");\n+    } catch (IOException e) {\n+      beeLine.handleException(e);\n+    }\n+  }\n+\n+  @Override \n+  void printFooter(Rows.Row header) {\n+    try {\n+      generator.writeEndArray();\n+      generator.writeEndObject();\n+      beeLine.output(generator.getOutputTarget().toString());\n+      generator.flush();", "originalCommit": "55ce6341e5853a837d1bfa03354b0a5320edbd39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYwNDUwNw==", "url": "https://github.com/apache/hive/pull/1169#discussion_r451604507", "bodyText": "Nit: formatting issue", "author": "belugabehr", "createdAt": "2020-07-08T14:49:20Z", "path": "beeline/src/java/org/apache/hive/beeline/JSONOutputFormat.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/*\n+ * This source file is based on code taken from SQLLine 1.9\n+ * See SQLLine notice in LICENSE\n+ */\n+package org.apache.hive.beeline;\n+\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.core.JsonEncoding;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+\n+/**\n+ * OutputFormat for standard JSON format.\n+ *\n+ */ \n+public class JSONOutputFormat extends AbstractOutputFormat {\n+  protected final BeeLine beeLine;\n+  protected JsonGenerator generator;\n+  \n+\n+  /**\n+   * @param beeLine\n+   */\n+  JSONOutputFormat(BeeLine beeLine){ \n+    this.beeLine = beeLine;\n+    ByteArrayOutputStream buf = new ByteArrayOutputStream();\n+    try{\n+      this.generator = new JsonFactory().createGenerator(buf, JsonEncoding.UTF8);\n+    }catch(IOException e){", "originalCommit": "55ce6341e5853a837d1bfa03354b0a5320edbd39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYxNzUwOA==", "url": "https://github.com/apache/hive/pull/1169#discussion_r451617508", "bodyText": "Take a look at using Boolean#parse instead:\nhttps://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html#parseBoolean-java.lang.String-", "author": "belugabehr", "createdAt": "2020-07-08T15:06:39Z", "path": "beeline/src/java/org/apache/hive/beeline/JSONOutputFormat.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/*\n+ * This source file is based on code taken from SQLLine 1.9\n+ * See SQLLine notice in LICENSE\n+ */\n+package org.apache.hive.beeline;\n+\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.core.JsonEncoding;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+\n+/**\n+ * OutputFormat for standard JSON format.\n+ *\n+ */ \n+public class JSONOutputFormat extends AbstractOutputFormat {\n+  protected final BeeLine beeLine;\n+  protected JsonGenerator generator;\n+  \n+\n+  /**\n+   * @param beeLine\n+   */\n+  JSONOutputFormat(BeeLine beeLine){ \n+    this.beeLine = beeLine;\n+    ByteArrayOutputStream buf = new ByteArrayOutputStream();\n+    try{\n+      this.generator = new JsonFactory().createGenerator(buf, JsonEncoding.UTF8);\n+    }catch(IOException e){\n+      beeLine.handleException(e);\n+    }\n+  }\n+\n+  @Override \n+  void printHeader(Rows.Row header) {\n+    try {\n+      generator.writeStartObject();\n+      generator.writeArrayFieldStart(\"resultset\");\n+    } catch (IOException e) {\n+      beeLine.handleException(e);\n+    }\n+  }\n+\n+  @Override \n+  void printFooter(Rows.Row header) {\n+    try {\n+      generator.writeEndArray();\n+      generator.writeEndObject();\n+      beeLine.output(generator.getOutputTarget().toString());\n+      generator.flush();\n+    } catch (IOException e) {\n+      beeLine.handleException(e);\n+    }\n+  }\n+\n+  @Override \n+  void printRow(Rows rows, Rows.Row header, Rows.Row row) {\n+    String[] head = header.values;\n+    String[] vals = row.values;\n+    try{\n+      for (int i = 0; (i < head.length) && (i < vals.length); i++) {\n+        generator.writeFieldName(head[i]);\n+        switch(rows.rsMeta.getColumnType(i)) {\n+          case Types.TINYINT:\n+          case Types.SMALLINT:\n+          case Types.INTEGER:\n+          case Types.BIGINT:\n+          case Types.REAL:\n+          case Types.FLOAT:\n+          case Types.DOUBLE:\n+          case Types.DECIMAL:\n+          case Types.NUMERIC:\n+            generator.writeNumber(vals[i]);\n+            break;\n+          case Types.NULL:\n+            generator.writeNull();\n+            break;\n+          case Types.BOOLEAN:\n+            generator.writeBoolean(vals[i].equalsIgnoreCase(\"true\"));", "originalCommit": "55ce6341e5853a837d1bfa03354b0a5320edbd39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUzOTMzOA==", "url": "https://github.com/apache/hive/pull/1169#discussion_r454539338", "bodyText": "Check out StandardCharsets.UTF_8.  It's not a requirement that all JVMs support UTF-8.\nhttps://docs.oracle.com/javase/7/docs/api/java/nio/charset/StandardCharsets.html", "author": "belugabehr", "createdAt": "2020-07-14T17:55:40Z", "path": "beeline/src/java/org/apache/hive/beeline/JSONOutputFormat.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/*\n+ * This source file is based on code taken from SQLLine 1.9\n+ * See SQLLine notice in LICENSE\n+ */\n+package org.apache.hive.beeline;\n+\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.core.JsonEncoding;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+\n+/**\n+ * OutputFormat for standard JSON format.\n+ * \n+ */ \n+public class JSONOutputFormat extends AbstractOutputFormat {\n+  protected final BeeLine beeLine;\n+  protected JsonGenerator generator;\n+  \n+\n+  /**\n+   * @param beeLine\n+   */\n+  JSONOutputFormat(BeeLine beeLine){ \n+    this.beeLine = beeLine;\n+    ByteArrayOutputStream buf = new ByteArrayOutputStream();\n+    try {\n+      this.generator = new JsonFactory().createGenerator(buf, JsonEncoding.UTF8);\n+    } catch(IOException e) {\n+      beeLine.handleException(e);\n+    }\n+  }\n+\n+  @Override \n+  void printHeader(Rows.Row header) {\n+    try {\n+      generator.writeStartObject();\n+      generator.writeArrayFieldStart(\"resultset\");\n+    } catch(IOException e) {\n+      beeLine.handleException(e);\n+    }\n+  }\n+\n+  @Override \n+  void printFooter(Rows.Row header) {\n+    try {\n+      generator.writeEndArray();\n+      generator.writeEndObject();\n+      generator.flush();\n+      String out = ((ByteArrayOutputStream) generator.getOutputTarget()).toString(\"UTF-8\");", "originalCommit": "7eda09b6f58f83fe9e5ecea9bdec2148026e8dbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU4MDEzMw==", "url": "https://github.com/apache/hive/pull/1169#discussion_r454580133", "bodyText": "The Javadocs for ByteArrayOutputStream.toString(String charsetName)[1] point to this charset page.\nWhich says that \"UTF-8\" as the correct canonical name for the StandardCharset. I think my implementation is correct for all JVM's?\n[1] https://docs.oracle.com/javase/7/docs/api/java/io/ByteArrayOutputStream.html", "author": "HunterL", "createdAt": "2020-07-14T19:06:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUzOTMzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU4MDQwOA==", "url": "https://github.com/apache/hive/pull/1169#discussion_r454580408", "bodyText": "For clarities sake I'm changing this line to String out = ((ByteArrayOutputStream) generator.getOutputTarget()).toString(StandardCharsets.UTF_8.name());", "author": "HunterL", "createdAt": "2020-07-14T19:07:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUzOTMzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU4OTMwNA==", "url": "https://github.com/apache/hive/pull/1169#discussion_r454589304", "bodyText": "OK.  I see what you're saying.  The JDK folks have not gotten around to adding the method to accept a discrete Charset yet.  Please do use the .name() call.", "author": "belugabehr", "createdAt": "2020-07-14T19:22:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUzOTMzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0MTM2Mg==", "url": "https://github.com/apache/hive/pull/1169#discussion_r454541362", "bodyText": "This looks a bit suspect to me.  Should be able to just put one of these before the loop and the corresponding writeEndObject after the loop.\nfinal int printCount = Math.min(colCount, Math.min(head.length, vals.length));\ngenerator.writeStartObject();\nfor (int i = 0; i < printCount; i++) {\n    ...\n}\ngenerator.writeEndObject();", "author": "belugabehr", "createdAt": "2020-07-14T17:59:00Z", "path": "beeline/src/java/org/apache/hive/beeline/JSONOutputFormat.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/*\n+ * This source file is based on code taken from SQLLine 1.9\n+ * See SQLLine notice in LICENSE\n+ */\n+package org.apache.hive.beeline;\n+\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.core.JsonEncoding;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+\n+/**\n+ * OutputFormat for standard JSON format.\n+ * \n+ */ \n+public class JSONOutputFormat extends AbstractOutputFormat {\n+  protected final BeeLine beeLine;\n+  protected JsonGenerator generator;\n+  \n+\n+  /**\n+   * @param beeLine\n+   */\n+  JSONOutputFormat(BeeLine beeLine){ \n+    this.beeLine = beeLine;\n+    ByteArrayOutputStream buf = new ByteArrayOutputStream();\n+    try {\n+      this.generator = new JsonFactory().createGenerator(buf, JsonEncoding.UTF8);\n+    } catch(IOException e) {\n+      beeLine.handleException(e);\n+    }\n+  }\n+\n+  @Override \n+  void printHeader(Rows.Row header) {\n+    try {\n+      generator.writeStartObject();\n+      generator.writeArrayFieldStart(\"resultset\");\n+    } catch(IOException e) {\n+      beeLine.handleException(e);\n+    }\n+  }\n+\n+  @Override \n+  void printFooter(Rows.Row header) {\n+    try {\n+      generator.writeEndArray();\n+      generator.writeEndObject();\n+      generator.flush();\n+      String out = ((ByteArrayOutputStream) generator.getOutputTarget()).toString(\"UTF-8\");\n+      beeLine.output(out);\n+    } catch(IOException e) {\n+      beeLine.handleException(e);\n+    }\n+  }\n+\n+  @Override \n+  void printRow(Rows rows, Rows.Row header, Rows.Row row) {\n+    String[] head = header.values;\n+    String[] vals = row.values;\n+    \n+    try {\n+      int colCount = rows.rsMeta.getColumnCount();\n+      boolean objStartFlag = true;\n+\n+      for (int i = 0; (i < head.length) && (i < vals.length); i++) {\n+        if (objStartFlag) {\n+          generator.writeStartObject();\n+          objStartFlag = false;", "originalCommit": "7eda09b6f58f83fe9e5ecea9bdec2148026e8dbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU1MTE4MA==", "url": "https://github.com/apache/hive/pull/1169#discussion_r454551180", "bodyText": "Yup overthought that one, fixed \ud83d\udc4d", "author": "HunterL", "createdAt": "2020-07-14T18:15:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0MTM2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0MTkwNQ==", "url": "https://github.com/apache/hive/pull/1169#discussion_r454541905", "bodyText": "Need a type for BINARY data.  Make it spit it out as Base-64 to be text-friendly.", "author": "belugabehr", "createdAt": "2020-07-14T17:59:50Z", "path": "beeline/src/java/org/apache/hive/beeline/JSONOutputFormat.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/*\n+ * This source file is based on code taken from SQLLine 1.9\n+ * See SQLLine notice in LICENSE\n+ */\n+package org.apache.hive.beeline;\n+\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.core.JsonEncoding;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+\n+/**\n+ * OutputFormat for standard JSON format.\n+ * \n+ */ \n+public class JSONOutputFormat extends AbstractOutputFormat {\n+  protected final BeeLine beeLine;\n+  protected JsonGenerator generator;\n+  \n+\n+  /**\n+   * @param beeLine\n+   */\n+  JSONOutputFormat(BeeLine beeLine){ \n+    this.beeLine = beeLine;\n+    ByteArrayOutputStream buf = new ByteArrayOutputStream();\n+    try {\n+      this.generator = new JsonFactory().createGenerator(buf, JsonEncoding.UTF8);\n+    } catch(IOException e) {\n+      beeLine.handleException(e);\n+    }\n+  }\n+\n+  @Override \n+  void printHeader(Rows.Row header) {\n+    try {\n+      generator.writeStartObject();\n+      generator.writeArrayFieldStart(\"resultset\");\n+    } catch(IOException e) {\n+      beeLine.handleException(e);\n+    }\n+  }\n+\n+  @Override \n+  void printFooter(Rows.Row header) {\n+    try {\n+      generator.writeEndArray();\n+      generator.writeEndObject();\n+      generator.flush();\n+      String out = ((ByteArrayOutputStream) generator.getOutputTarget()).toString(\"UTF-8\");\n+      beeLine.output(out);\n+    } catch(IOException e) {\n+      beeLine.handleException(e);\n+    }\n+  }\n+\n+  @Override \n+  void printRow(Rows rows, Rows.Row header, Rows.Row row) {\n+    String[] head = header.values;\n+    String[] vals = row.values;\n+    \n+    try {\n+      int colCount = rows.rsMeta.getColumnCount();\n+      boolean objStartFlag = true;\n+\n+      for (int i = 0; (i < head.length) && (i < vals.length); i++) {\n+        if (objStartFlag) {\n+          generator.writeStartObject();\n+          objStartFlag = false;\n+        }\n+\n+        generator.writeFieldName(head[i]);\n+        switch(rows.rsMeta.getColumnType(i+1)) {\n+          case Types.TINYINT:\n+          case Types.SMALLINT:\n+          case Types.INTEGER:\n+          case Types.BIGINT:\n+          case Types.REAL:\n+          case Types.FLOAT:\n+          case Types.DOUBLE:\n+          case Types.DECIMAL:\n+          case Types.NUMERIC:\n+          case Types.ROWID:\n+            generator.writeNumber(vals[i]);\n+            break;\n+          case Types.NULL:\n+            generator.writeNull();\n+            break;\n+          case Types.BOOLEAN:\n+            generator.writeBoolean(Boolean.parseBoolean(vals[i]));\n+            break;\n+          default:", "originalCommit": "7eda09b6f58f83fe9e5ecea9bdec2148026e8dbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU1MzU4MA==", "url": "https://github.com/apache/hive/pull/1169#discussion_r454553580", "bodyText": "So Rows.java already does this conversion\nelse if (o instanceof byte[]) { \n  value = convertBinaryArray ? new String((byte[])o) : Arrays.toString((byte[])o);\n}\n\nI'm not 100% sure what the expected behavior here in the output format would be then? Currently it falls into the default case and prints the already converted byte[]", "author": "HunterL", "createdAt": "2020-07-14T18:19:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0MTkwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU4ODEwOQ==", "url": "https://github.com/apache/hive/pull/1169#discussion_r454588109", "bodyText": "Thinking this through more Arrays.toString(byte[] a) will convert it to some string that looks like [16, 34, 67], meaning the resulting JSON will be {...\"binary_field\":\"[16,34,67]\"...}.\nJSONOutputFormat does not have access to the underlying resultset, just the values that have already been toString()ed. Is the correct behavior then to convert back to byte[] and then Base64.encode()?", "author": "HunterL", "createdAt": "2020-07-14T19:20:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0MTkwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU4OTg4OA==", "url": "https://github.com/apache/hive/pull/1169#discussion_r454589888", "bodyText": "Ya, this is not a particularly helpful format.  The default in JSON is Base64 for binary data, so you should use that and not rely on this default", "author": "belugabehr", "createdAt": "2020-07-14T19:23:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0MTkwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYxODA5NQ==", "url": "https://github.com/apache/hive/pull/1169#discussion_r454618095", "bodyText": "https://fasterxml.github.io/jackson-core/javadoc/2.8/com/fasterxml/jackson/core/JsonGenerator.html#writeBinary(byte[])", "author": "belugabehr", "createdAt": "2020-07-14T20:16:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0MTkwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA4MzgzNw==", "url": "https://github.com/apache/hive/pull/1169#discussion_r455083837", "bodyText": "OK.  I follow now.  Sorry I didn't read your comment close enough. :)\nSo, I think for now, what you should so is...\nCreate a new case for BINARY data and then check that that this is set to \"true\".  Throw an Exception otherwise.\nbeeLine.getOpts().getConvertBinaryArrayToString();\n\nAt least this way, we can have a separate ticket about making this base-64 instead of the current implementation.  Then, just use writeString.\nIf Google Guava is included, use the Precondition class to check", "author": "belugabehr", "createdAt": "2020-07-15T14:13:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0MTkwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU5MDQ1Nw==", "url": "https://github.com/apache/hive/pull/1169#discussion_r454590457", "bodyText": "Please clear the ByteArrayInputStream here otherwise it will carry around all the buffered data for a while.", "author": "belugabehr", "createdAt": "2020-07-14T19:24:56Z", "path": "beeline/src/java/org/apache/hive/beeline/JSONOutputFormat.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/*\n+ * This source file is based on code taken from SQLLine 1.9\n+ * See SQLLine notice in LICENSE\n+ */\n+package org.apache.hive.beeline;\n+\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.core.JsonEncoding;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+\n+/**\n+ * OutputFormat for standard JSON format.\n+ * \n+ */ \n+public class JSONOutputFormat extends AbstractOutputFormat {\n+  protected final BeeLine beeLine;\n+  protected JsonGenerator generator;\n+  \n+\n+  /**\n+   * @param beeLine\n+   */\n+  JSONOutputFormat(BeeLine beeLine){ \n+    this.beeLine = beeLine;\n+    ByteArrayOutputStream buf = new ByteArrayOutputStream();\n+    try {\n+      this.generator = new JsonFactory().createGenerator(buf, JsonEncoding.UTF8);\n+    } catch(IOException e) {\n+      beeLine.handleException(e);\n+    }\n+  }\n+\n+  @Override \n+  void printHeader(Rows.Row header) {\n+    try {\n+      generator.writeStartObject();\n+      generator.writeArrayFieldStart(\"resultset\");\n+    } catch(IOException e) {\n+      beeLine.handleException(e);\n+    }\n+  }\n+\n+  @Override \n+  void printFooter(Rows.Row header) {\n+    try {\n+      generator.writeEndArray();\n+      generator.writeEndObject();\n+      generator.flush();\n+      String out = ((ByteArrayOutputStream) generator.getOutputTarget()).toString(\"UTF-8\");\n+      beeLine.output(out);\n+    } catch(IOException e) {", "originalCommit": "a8c0da2358df56ded0632514760b9f2abe98f0f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "64ad49aafe370f7f381f5c885956b69bf73d7d9a", "url": "https://github.com/apache/hive/commit/64ad49aafe370f7f381f5c885956b69bf73d7d9a", "message": "Changed Binary format types back because of other JIRA ticket", "committedDate": "2020-07-15T20:32:41Z", "type": "forcePushed"}, {"oid": "e5a99425c8ead087d24dbf3660561d71dacde37b", "url": "https://github.com/apache/hive/commit/e5a99425c8ead087d24dbf3660561d71dacde37b", "message": "Add JSON Output Format to beeline", "committedDate": "2020-07-16T13:28:05Z", "type": "commit"}, {"oid": "40b5ac47702e6bc72529113289b1c709ca215d1e", "url": "https://github.com/apache/hive/commit/40b5ac47702e6bc72529113289b1c709ca215d1e", "message": "Switched from apache-commons-text to Jackson for JSON string escaping", "committedDate": "2020-07-16T13:28:06Z", "type": "commit"}, {"oid": "9bba4a66f69dc57773fd28f35ce6a0792593df08", "url": "https://github.com/apache/hive/commit/9bba4a66f69dc57773fd28f35ce6a0792593df08", "message": "Fixed null values being printed as \"NULL\"", "committedDate": "2020-07-16T13:28:06Z", "type": "commit"}, {"oid": "f5c3ea419feaba928b3d8200d797985f84611399", "url": "https://github.com/apache/hive/commit/f5c3ea419feaba928b3d8200d797985f84611399", "message": "- Changed to Jackson JSONGenerator from JsonStringEncoder\n- Removed VS code modifications from pom.xml and .gitignore\n- Added JSONFileOutputFormat which should match Hive JSON file format", "committedDate": "2020-07-16T13:28:06Z", "type": "commit"}, {"oid": "d76b3f9bfe4244f2325c55ccf46e5be4fde5ba5f", "url": "https://github.com/apache/hive/commit/d76b3f9bfe4244f2325c55ccf46e5be4fde5ba5f", "message": "Updated beeline.properties. Added newline to end of TestJSONOutputFormat.java", "committedDate": "2020-07-16T13:28:06Z", "type": "commit"}, {"oid": "6a564778fbcc8a4a733fb6b8e1ad288b75580a24", "url": "https://github.com/apache/hive/commit/6a564778fbcc8a4a733fb6b8e1ad288b75580a24", "message": "Fixed order of operations in JSONOutputFormat\nUpdated string for outputformats in BeeLine.properties\nAdded example to top of JSONFileOutputFormat", "committedDate": "2020-07-16T13:28:06Z", "type": "commit"}, {"oid": "9b33989d2c19b56aea56bf2ee7004f29c3da8614", "url": "https://github.com/apache/hive/commit/9b33989d2c19b56aea56bf2ee7004f29c3da8614", "message": "Added tests for JSON output types", "committedDate": "2020-07-16T13:28:06Z", "type": "commit"}, {"oid": "870da31aad3778072439f03ceb7d3ce315330171", "url": "https://github.com/apache/hive/commit/870da31aad3778072439f03ceb7d3ce315330171", "message": "Small error in tests", "committedDate": "2020-07-16T13:28:06Z", "type": "commit"}, {"oid": "469b56602537a0ccced1a0793d34efc57efe8630", "url": "https://github.com/apache/hive/commit/469b56602537a0ccced1a0793d34efc57efe8630", "message": "Fixed some logic in JsonOutputFormat, fixed test format", "committedDate": "2020-07-16T13:28:06Z", "type": "commit"}, {"oid": "fdf59d069d5601efcd0e5f64c39e508da69783fa", "url": "https://github.com/apache/hive/commit/fdf59d069d5601efcd0e5f64c39e508da69783fa", "message": "Updated licenses on JSON output types and tests", "committedDate": "2020-07-16T13:28:06Z", "type": "commit"}, {"oid": "b508f76d628d94f4b1b8f3c3e6245156fa19c858", "url": "https://github.com/apache/hive/commit/b508f76d628d94f4b1b8f3c3e6245156fa19c858", "message": "Small whitespace issue and triggering CI builds again", "committedDate": "2020-07-16T13:28:06Z", "type": "commit"}, {"oid": "f3fc56461426a065483f715f8e8ad24d2ad6411a", "url": "https://github.com/apache/hive/commit/f3fc56461426a065483f715f8e8ad24d2ad6411a", "message": "Fixed JSONOutputFormat logic", "committedDate": "2020-07-16T13:28:06Z", "type": "commit"}, {"oid": "e882159a6c3de4f82f50f78651d8ce6e4a9eb5e8", "url": "https://github.com/apache/hive/commit/e882159a6c3de4f82f50f78651d8ce6e4a9eb5e8", "message": "Added a reset to buffer, changed to StandardCharset for clarity on converting buffer to string", "committedDate": "2020-07-16T13:28:06Z", "type": "commit"}, {"oid": "90dfa9314c4d0a193c61447c84094ae5a397b181", "url": "https://github.com/apache/hive/commit/90dfa9314c4d0a193c61447c84094ae5a397b181", "message": "Changed how JSON types handle binary data types", "committedDate": "2020-07-16T13:28:06Z", "type": "commit"}, {"oid": "f77b8470fe0b45b51cc056ab2ecbeb1bd53281e5", "url": "https://github.com/apache/hive/commit/f77b8470fe0b45b51cc056ab2ecbeb1bd53281e5", "message": "Changed Binary format types back because of other JIRA ticket", "committedDate": "2020-07-16T13:28:06Z", "type": "commit"}, {"oid": "7b600a9480bdd8c7001da2851c84faee8ae6b002", "url": "https://github.com/apache/hive/commit/7b600a9480bdd8c7001da2851c84faee8ae6b002", "message": "Small formatting issue", "committedDate": "2020-07-16T13:28:06Z", "type": "commit"}, {"oid": "e7341daf7ac6739ff966e63d3ac3eb5cf2fb0c0c", "url": "https://github.com/apache/hive/commit/e7341daf7ac6739ff966e63d3ac3eb5cf2fb0c0c", "message": "Updated tests to reflect changes to binary encoding", "committedDate": "2020-07-16T13:28:06Z", "type": "commit"}, {"oid": "e7341daf7ac6739ff966e63d3ac3eb5cf2fb0c0c", "url": "https://github.com/apache/hive/commit/e7341daf7ac6739ff966e63d3ac3eb5cf2fb0c0c", "message": "Updated tests to reflect changes to binary encoding", "committedDate": "2020-07-16T13:28:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgzNDE3OA==", "url": "https://github.com/apache/hive/pull/1169#discussion_r455834178", "bodyText": "Let's make this a bit more JUNIT-ish.\nPlease use the @BeforeClass annotation on the setupMockData() instead of calling like this manually", "author": "belugabehr", "createdAt": "2020-07-16T14:33:55Z", "path": "beeline/src/test/org/apache/hive/beeline/TestJSONFileOutputFormat.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hive.beeline;\n+\n+import static org.mockito.ArgumentMatchers.anyInt;\n+\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+\n+import static org.junit.Assert.assertEquals;\n+import org.junit.Test;\n+import static org.mockito.Mockito.when;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+import static org.mockito.Mockito.mock;\n+\n+public class TestJSONFileOutputFormat {\n+\n+  public class BeelineMock extends BeeLine {\n+\n+    private String output;\n+\n+    @Override\n+    final void output(String out) {\n+      output = out;\n+      super.output(out);\n+    }\n+\n+    private String getOutput() {\n+      return output;\n+    }\n+  }\n+\n+  private final String[][] mockRowData = {\n+    {\"aaa\",\"1\",\"3.14\",\"true\",\"\",\"SGVsbG8sIFdvcmxkIQ\"},\n+    {\"bbb\",\"2\",\"2.718\",\"false\",\"Null\",\"RWFzdGVyCgllZ2cu\"}\n+  };\n+  private BeelineMock mockBeeline;\n+  private ResultSet mockResultSet;\n+  private TestBufferedRows.MockRow mockRow;\n+\n+  /**\n+   * Test of print method, of class TableOutputFormat. There was an empty extra column after the\n+   * last one.\n+   */\n+  @Test\n+  public final void testPrint() throws SQLException {\n+    setupMockData();", "originalCommit": "e7341daf7ac6739ff966e63d3ac3eb5cf2fb0c0c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgzNDkxMg==", "url": "https://github.com/apache/hive/pull/1169#discussion_r455834912", "bodyText": "Please just use Mockito to capture the argument instead of making a mock manually like this.\nhttps://www.baeldung.com/mockito-void-methods", "author": "belugabehr", "createdAt": "2020-07-16T14:34:45Z", "path": "beeline/src/test/org/apache/hive/beeline/TestJSONFileOutputFormat.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hive.beeline;\n+\n+import static org.mockito.ArgumentMatchers.anyInt;\n+\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+\n+import static org.junit.Assert.assertEquals;\n+import org.junit.Test;\n+import static org.mockito.Mockito.when;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+import static org.mockito.Mockito.mock;\n+\n+public class TestJSONFileOutputFormat {\n+\n+  public class BeelineMock extends BeeLine {", "originalCommit": "e7341daf7ac6739ff966e63d3ac3eb5cf2fb0c0c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "de01b56c693788c6ad03f6e6dcae84277bd8541e", "url": "https://github.com/apache/hive/commit/de01b56c693788c6ad03f6e6dcae84277bd8541e", "message": "Fixed JSONFileOutputFormat to clear buffer after output. Updated tests.", "committedDate": "2020-07-17T18:47:33Z", "type": "commit"}]}