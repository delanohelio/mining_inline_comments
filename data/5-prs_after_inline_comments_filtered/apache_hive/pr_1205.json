{"pr_number": 1205, "pr_title": "HIVE-23800: Add hooks when HiveServer2 stops due to OutOfMemoryError", "pr_createdAt": "2020-07-03T13:47:02Z", "pr_url": "https://github.com/apache/hive/pull/1205", "timeline": [{"oid": "798be90f69d6123491761cbced47a02957f85a2e", "url": "https://github.com/apache/hive/commit/798be90f69d6123491761cbced47a02957f85a2e", "message": "Make HiveServer2 oom hook interface", "committedDate": "2020-07-03T13:35:07Z", "type": "commit"}, {"oid": "2e167f0ee1c5ac60734fca9a0f20cb5754832594", "url": "https://github.com/apache/hive/commit/2e167f0ee1c5ac60734fca9a0f20cb5754832594", "message": "fix npe", "committedDate": "2020-07-03T23:10:47Z", "type": "commit"}, {"oid": "b15298c43e032b4b4d8db59ab1d6614d92d0aba2", "url": "https://github.com/apache/hive/commit/b15298c43e032b4b4d8db59ab1d6614d92d0aba2", "message": "rename handler", "committedDate": "2020-07-04T00:08:53Z", "type": "commit"}, {"oid": "21ea7b1d5452e8cb6ab0a74ea431dfa936f769c6", "url": "https://github.com/apache/hive/commit/21ea7b1d5452e8cb6ab0a74ea431dfa936f769c6", "message": "refactor class name", "committedDate": "2020-07-06T23:27:52Z", "type": "commit"}, {"oid": "bf425d08ea7662c4cc9e0af2e76d2c89737a7662", "url": "https://github.com/apache/hive/commit/bf425d08ea7662c4cc9e0af2e76d2c89737a7662", "message": "refine", "committedDate": "2020-07-07T01:44:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY5OTA0MA==", "url": "https://github.com/apache/hive/pull/1205#discussion_r450699040", "bodyText": "please reuse parts of HookRunner for loading stuff\nand why would you need setAccessible ?", "author": "kgyrtkirk", "createdAt": "2020-07-07T08:34:46Z", "path": "service/src/java/org/apache/hive/service/server/HiveServer2OomHookRunner.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hive.service.server;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.hadoop.hive.common.JavaUtils;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Constructor;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class HiveServer2OomHookRunner implements Runnable {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(HiveServer2OomHookRunner.class);\n+  private OomHookContext context;\n+  private final List<OomHookWithContext> hooks = new ArrayList<OomHookWithContext>();\n+\n+  HiveServer2OomHookRunner(HiveServer2 hiveServer2, HiveConf hiveConf) {\n+    context = new OomHookContext(hiveServer2);\n+    // The hs2 has not been initialized yet, hiveServer2.getHiveConf() would be null\n+    init(hiveConf);\n+  }\n+\n+  private void init(HiveConf hiveConf) {\n+    String csHooks = hiveConf.getVar(ConfVars.HIVE_SERVER2_OOM_HOOKS);\n+    if (!StringUtils.isBlank(csHooks)) {\n+      String[] hookClasses = csHooks.split(\",\");\n+      for (String hookClass : hookClasses) {\n+        try {\n+          Class clazz =  JavaUtils.loadClass(hookClass.trim());\n+          Constructor ctor = clazz.getDeclaredConstructor();\n+          ctor.setAccessible(true);", "originalCommit": "bf425d08ea7662c4cc9e0af2e76d2c89737a7662", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4ODI1Nw==", "url": "https://github.com/apache/hive/pull/1205#discussion_r450788257", "bodyText": "Thanks for the review! Like DefaultOomHook, the hook declared as private as nobody would access it  except the HiveServer2OomHookRunner.  In this case, the default constructor cannot be used directly to create a instance until calling setAccessible(true).  The hooks loaded by HookRunner::loadHooksFromConf should be declared as public access and I'm willing to follow this principal.", "author": "dengzhhu653", "createdAt": "2020-07-07T11:15:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY5OTA0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY5OTQ4OA==", "url": "https://github.com/apache/hive/pull/1205#discussion_r450699488", "bodyText": "don't swallow exceptions...", "author": "kgyrtkirk", "createdAt": "2020-07-07T08:35:27Z", "path": "service/src/java/org/apache/hive/service/server/HiveServer2OomHookRunner.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hive.service.server;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.hadoop.hive.common.JavaUtils;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Constructor;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class HiveServer2OomHookRunner implements Runnable {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(HiveServer2OomHookRunner.class);\n+  private OomHookContext context;\n+  private final List<OomHookWithContext> hooks = new ArrayList<OomHookWithContext>();\n+\n+  HiveServer2OomHookRunner(HiveServer2 hiveServer2, HiveConf hiveConf) {\n+    context = new OomHookContext(hiveServer2);\n+    // The hs2 has not been initialized yet, hiveServer2.getHiveConf() would be null\n+    init(hiveConf);\n+  }\n+\n+  private void init(HiveConf hiveConf) {\n+    String csHooks = hiveConf.getVar(ConfVars.HIVE_SERVER2_OOM_HOOKS);\n+    if (!StringUtils.isBlank(csHooks)) {\n+      String[] hookClasses = csHooks.split(\",\");\n+      for (String hookClass : hookClasses) {\n+        try {\n+          Class clazz =  JavaUtils.loadClass(hookClass.trim());\n+          Constructor ctor = clazz.getDeclaredConstructor();\n+          ctor.setAccessible(true);\n+          hooks.add((OomHookWithContext)ctor.newInstance());\n+        } catch (Exception e) {\n+          LOG.error(\"Skip adding oom hook '\" + hookClass + \"'\", e);", "originalCommit": "bf425d08ea7662c4cc9e0af2e76d2c89737a7662", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUzOTY0OA==", "url": "https://github.com/apache/hive/pull/1205#discussion_r451539648", "bodyText": "done", "author": "dengzhhu653", "createdAt": "2020-07-08T13:22:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY5OTQ4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwMDUwNw==", "url": "https://github.com/apache/hive/pull/1205#discussion_r450700507", "bodyText": "why is this private?", "author": "kgyrtkirk", "createdAt": "2020-07-07T08:37:05Z", "path": "service/src/java/org/apache/hive/service/server/HiveServer2OomHookRunner.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hive.service.server;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.hadoop.hive.common.JavaUtils;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Constructor;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class HiveServer2OomHookRunner implements Runnable {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(HiveServer2OomHookRunner.class);\n+  private OomHookContext context;\n+  private final List<OomHookWithContext> hooks = new ArrayList<OomHookWithContext>();\n+\n+  HiveServer2OomHookRunner(HiveServer2 hiveServer2, HiveConf hiveConf) {\n+    context = new OomHookContext(hiveServer2);\n+    // The hs2 has not been initialized yet, hiveServer2.getHiveConf() would be null\n+    init(hiveConf);\n+  }\n+\n+  private void init(HiveConf hiveConf) {\n+    String csHooks = hiveConf.getVar(ConfVars.HIVE_SERVER2_OOM_HOOKS);\n+    if (!StringUtils.isBlank(csHooks)) {\n+      String[] hookClasses = csHooks.split(\",\");\n+      for (String hookClass : hookClasses) {\n+        try {\n+          Class clazz =  JavaUtils.loadClass(hookClass.trim());\n+          Constructor ctor = clazz.getDeclaredConstructor();\n+          ctor.setAccessible(true);\n+          hooks.add((OomHookWithContext)ctor.newInstance());\n+        } catch (Exception e) {\n+          LOG.error(\"Skip adding oom hook '\" + hookClass + \"'\", e);\n+        }\n+      }\n+    }\n+  }\n+\n+  @VisibleForTesting\n+  public HiveServer2OomHookRunner(HiveConf hiveConf) {\n+    init(hiveConf);\n+  }\n+\n+  @VisibleForTesting\n+  public List<OomHookWithContext> getHooks() {\n+    return hooks;\n+  }\n+\n+  @Override\n+  public void run() {\n+    for (OomHookWithContext hook : hooks) {\n+      hook.run(context);\n+    }\n+  }\n+\n+  public static interface OomHookWithContext {\n+    public void run(OomHookContext context);\n+  }\n+\n+  public static class OomHookContext {\n+    private final HiveServer2 hiveServer2;\n+    public OomHookContext(HiveServer2 hiveServer2) {\n+      this.hiveServer2 = hiveServer2;\n+    }\n+    public HiveServer2 getHiveServer2() {\n+      return hiveServer2;\n+    }\n+  }\n+\n+  /**\n+   * Used as default oom hook\n+   */\n+  private static class DefaultOomHook implements OomHookWithContext {", "originalCommit": "bf425d08ea7662c4cc9e0af2e76d2c89737a7662", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUzOTkxOA==", "url": "https://github.com/apache/hive/pull/1205#discussion_r451539918", "bodyText": "done", "author": "dengzhhu653", "createdAt": "2020-07-08T13:22:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwMDUwNw=="}], "type": "inlineReview"}, {"oid": "6ecf3fe599d7d18740eb0f660e431cd770e60dea", "url": "https://github.com/apache/hive/commit/6ecf3fe599d7d18740eb0f660e431cd770e60dea", "message": "use HookUtils to load stuff", "committedDate": "2020-07-08T01:53:50Z", "type": "commit"}, {"oid": "c3b8ffaccf2995f04c339e6175a0be79c1f73371", "url": "https://github.com/apache/hive/commit/c3b8ffaccf2995f04c339e6175a0be79c1f73371", "message": "fix", "committedDate": "2020-07-08T02:12:45Z", "type": "commit"}, {"oid": "f5a1b8873583e0fe8a4c19ece0bcdf9cf6439235", "url": "https://github.com/apache/hive/commit/f5a1b8873583e0fe8a4c19ece0bcdf9cf6439235", "message": "Make oom hook more generic hook stuff", "committedDate": "2020-07-09T14:04:08Z", "type": "commit"}, {"oid": "2fd1102cca5c6909af224f3eb011aeb30682e482", "url": "https://github.com/apache/hive/commit/2fd1102cca5c6909af224f3eb011aeb30682e482", "message": "don't need to initialize other hooks", "committedDate": "2020-07-10T01:38:15Z", "type": "commit"}, {"oid": "00515737de41aa3029b834d3b6e1249f33ca77cb", "url": "https://github.com/apache/hive/commit/00515737de41aa3029b834d3b6e1249f33ca77cb", "message": "add hooksloader", "committedDate": "2020-07-31T00:50:40Z", "type": "commit"}, {"oid": "393ef2d0aaf990e01da14e6825c991fdd5c6108a", "url": "https://github.com/apache/hive/commit/393ef2d0aaf990e01da14e6825c991fdd5c6108a", "message": "Merge branch 'master' of https://github.com/apache/hive into HIVE-23800", "committedDate": "2020-07-31T00:52:06Z", "type": "commit"}, {"oid": "682799cc8fa7a8f4f50a323f8f8c553e67fce05a", "url": "https://github.com/apache/hive/commit/682799cc8fa7a8f4f50a323f8f8c553e67fce05a", "message": "merge hooks and add unit tests", "committedDate": "2020-07-31T04:49:54Z", "type": "commit"}, {"oid": "ca86a25bf2c9c08d19f25e09717e68da03010a8c", "url": "https://github.com/apache/hive/commit/ca86a25bf2c9c08d19f25e09717e68da03010a8c", "message": "remove empty lines", "committedDate": "2020-07-31T05:04:30Z", "type": "commit"}, {"oid": "9379e1a11d0dc271466c30bebdbc5c4949debb22", "url": "https://github.com/apache/hive/commit/9379e1a11d0dc271466c30bebdbc5c4949debb22", "message": "fix typo", "committedDate": "2020-07-31T07:46:42Z", "type": "commit"}, {"oid": "9f5b1b328f03f6cc873dc02c9a733267d4d0bafa", "url": "https://github.com/apache/hive/commit/9f5b1b328f03f6cc873dc02c9a733267d4d0bafa", "message": "fix itests", "committedDate": "2020-07-31T09:24:07Z", "type": "commit"}, {"oid": "0f6b9ad04b566b2820af487fe21c45ba904f0792", "url": "https://github.com/apache/hive/commit/0f6b9ad04b566b2820af487fe21c45ba904f0792", "message": "minor changes", "committedDate": "2020-07-31T09:56:45Z", "type": "commit"}, {"oid": "b2b70ada861cc3595f07b1bce8c552e18ccae24e", "url": "https://github.com/apache/hive/commit/b2b70ada861cc3595f07b1bce8c552e18ccae24e", "message": "check", "committedDate": "2020-07-31T23:46:00Z", "type": "commit"}, {"oid": "3aefb3eaede992596e584484d8fee44272b6cff4", "url": "https://github.com/apache/hive/commit/3aefb3eaede992596e584484d8fee44272b6cff4", "message": "unify other hooks", "committedDate": "2020-08-03T05:25:56Z", "type": "commit"}, {"oid": "8704457779631968c288c05a4f119318b0d640df", "url": "https://github.com/apache/hive/commit/8704457779631968c288c05a4f119318b0d640df", "message": "remove isGlobal from HookType", "committedDate": "2020-08-03T06:23:22Z", "type": "commit"}, {"oid": "aa191066639a503cc18ce105834a224dae08f7c7", "url": "https://github.com/apache/hive/commit/aa191066639a503cc18ce105834a224dae08f7c7", "message": "refine hiveserver2 oom hook", "committedDate": "2020-08-03T06:43:34Z", "type": "commit"}, {"oid": "594a6c59d81beef81a32ae0a7e43e12621eb3b9c", "url": "https://github.com/apache/hive/commit/594a6c59d81beef81a32ae0a7e43e12621eb3b9c", "message": "add cast exception", "committedDate": "2020-08-03T14:12:10Z", "type": "commit"}, {"oid": "1beea75e0d35728c7b6fa8cfad490c8c96bf8989", "url": "https://github.com/apache/hive/commit/1beea75e0d35728c7b6fa8cfad490c8c96bf8989", "message": "fix", "committedDate": "2020-08-03T23:12:49Z", "type": "commit"}, {"oid": "d790a5d64204fa7f1a9e9625c1380ecc99244e00", "url": "https://github.com/apache/hive/commit/d790a5d64204fa7f1a9e9625c1380ecc99244e00", "message": "fix", "committedDate": "2020-09-10T12:52:42Z", "type": "commit"}, {"oid": "626182b5454c0a26ff1fc2fc8533d698c31882f1", "url": "https://github.com/apache/hive/commit/626182b5454c0a26ff1fc2fc8533d698c31882f1", "message": "resolve conflict", "committedDate": "2020-09-10T12:56:21Z", "type": "commit"}, {"oid": "d301c783397144b15b2a519c3897fe98aa25f89c", "url": "https://github.com/apache/hive/commit/d301c783397144b15b2a519c3897fe98aa25f89c", "message": "refine", "committedDate": "2020-09-10T13:25:29Z", "type": "commit"}, {"oid": "46298011457bae7d49d956a3676611cfb108d7bc", "url": "https://github.com/apache/hive/commit/46298011457bae7d49d956a3676611cfb108d7bc", "message": "handle exception", "committedDate": "2020-09-11T03:04:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYxNzk4OA==", "url": "https://github.com/apache/hive/pull/1205#discussion_r488617988", "bodyText": "I think this should be only confVar", "author": "kgyrtkirk", "createdAt": "2020-09-15T12:15:18Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/hooks/HooksLoader.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.hooks;\n+\n+import com.cronutils.utils.VisibleForTesting;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ *  Loads and stores different kinds of hooks, provides {@link HooksLoader#addHook(HookContext.HookType, Object)}} to\n+ *  add hook alone or {@link HooksLoader#getHooks(HookContext.HookType, Class)} to get all hooks\n+ *  corresponding to the specific hook type.\n+ */\n+public class HooksLoader {\n+  private static final Logger LOG = LoggerFactory.getLogger(HooksLoader.class);\n+  private final HiveConf conf;\n+  private final Hooks[] hooks;\n+  private SessionState.LogHelper console;\n+\n+  public HooksLoader(HiveConf conf) {\n+    this.conf = conf;\n+    this.hooks = new Hooks[HookContext.HookType.values().length];\n+    for (int i = 0; i < hooks.length; i++) {\n+      hooks[i] = new Hooks();\n+    }\n+  }\n+\n+  public HooksLoader(HiveConf conf, SessionState.LogHelper console) {\n+    this(conf);\n+    this.console = console;\n+  }\n+\n+  /**\n+   * Loads the configured hooks corresponding to the specific hook type.\n+   * @param type hook type\n+   */\n+  @VisibleForTesting\n+  void loadHooksFromConf(HookContext.HookType type) {\n+    Hooks container = hooks[type.ordinal()];\n+    if (!container.loadedFromConf) {\n+      container.loadedFromConf = true;\n+      List hooks = container.getHooks();\n+      HiveConf.ConfVars confVars = type.getConfVar();", "originalCommit": "46298011457bae7d49d956a3676611cfb108d7bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE0MTU5NA==", "url": "https://github.com/apache/hive/pull/1205#discussion_r489141594", "bodyText": "Thank you very much for the careful review!  fixed.", "author": "dengzhhu653", "createdAt": "2020-09-16T03:36:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYxNzk4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYxODQ2MA==", "url": "https://github.com/apache/hive/pull/1205#discussion_r488618460", "bodyText": "this will make an index based contract - instead of that we could utrilize a Map<HookType,Hook>", "author": "kgyrtkirk", "createdAt": "2020-09-15T12:16:06Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/hooks/HooksLoader.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.hooks;\n+\n+import com.cronutils.utils.VisibleForTesting;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ *  Loads and stores different kinds of hooks, provides {@link HooksLoader#addHook(HookContext.HookType, Object)}} to\n+ *  add hook alone or {@link HooksLoader#getHooks(HookContext.HookType, Class)} to get all hooks\n+ *  corresponding to the specific hook type.\n+ */\n+public class HooksLoader {\n+  private static final Logger LOG = LoggerFactory.getLogger(HooksLoader.class);\n+  private final HiveConf conf;\n+  private final Hooks[] hooks;", "originalCommit": "46298011457bae7d49d956a3676611cfb108d7bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE0MTY0OA==", "url": "https://github.com/apache/hive/pull/1205#discussion_r489141648", "bodyText": "done", "author": "dengzhhu653", "createdAt": "2020-09-16T03:37:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYxODQ2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYxOTE0NQ==", "url": "https://github.com/apache/hive/pull/1205#discussion_r488619145", "bodyText": "I don't see any particular benefit of doing the loading lazily - just load all of them upfront in the constructor - the Conf may not change after the creation of this object", "author": "kgyrtkirk", "createdAt": "2020-09-15T12:17:17Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/hooks/HooksLoader.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.hooks;\n+\n+import com.cronutils.utils.VisibleForTesting;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.apache.hive.common.util.HiveStringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ *  Loads and stores different kinds of hooks, provides {@link HooksLoader#addHook(HookContext.HookType, Object)}} to\n+ *  add hook alone or {@link HooksLoader#getHooks(HookContext.HookType, Class)} to get all hooks\n+ *  corresponding to the specific hook type.\n+ */\n+public class HooksLoader {\n+  private static final Logger LOG = LoggerFactory.getLogger(HooksLoader.class);\n+  private final HiveConf conf;\n+  private final Hooks[] hooks;\n+  private SessionState.LogHelper console;\n+\n+  public HooksLoader(HiveConf conf) {\n+    this.conf = conf;\n+    this.hooks = new Hooks[HookContext.HookType.values().length];\n+    for (int i = 0; i < hooks.length; i++) {\n+      hooks[i] = new Hooks();\n+    }\n+  }\n+\n+  public HooksLoader(HiveConf conf, SessionState.LogHelper console) {\n+    this(conf);\n+    this.console = console;\n+  }\n+\n+  /**\n+   * Loads the configured hooks corresponding to the specific hook type.\n+   * @param type hook type\n+   */\n+  @VisibleForTesting\n+  void loadHooksFromConf(HookContext.HookType type) {\n+    Hooks container = hooks[type.ordinal()];\n+    if (!container.loadedFromConf) {", "originalCommit": "46298011457bae7d49d956a3676611cfb108d7bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE0NDMyNA==", "url": "https://github.com/apache/hive/pull/1205#discussion_r489144324", "bodyText": "When we use HooksLoader to load the session hooks, redactor hooks that running outside the HookRunner, maybe there is no need to initialize other types of hooks, so I make the hooks loading lazily on demand.", "author": "dengzhhu653", "createdAt": "2020-09-16T03:48:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYxOTE0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYyMjU4NQ==", "url": "https://github.com/apache/hive/pull/1205#discussion_r488622585", "bodyText": "please keep some kind of naming contract between the varname and the enum key", "author": "kgyrtkirk", "createdAt": "2020-09-15T12:23:10Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/hooks/HookContext.java", "diffHunk": "@@ -45,7 +47,50 @@\n public class HookContext {\n \n   static public enum HookType {\n-    PRE_EXEC_HOOK, POST_EXEC_HOOK, ON_FAILURE_HOOK\n+\n+    PRE_EXEC_HOOK(HiveConf.ConfVars.PREEXECHOOKS, ExecuteWithHookContext.class,\n+        \"Pre-execution hooks to be invoked for each statement\"),\n+    POST_EXEC_HOOK(HiveConf.ConfVars.POSTEXECHOOKS, ExecuteWithHookContext.class,\n+        \"Post-execution hooks to be invoked for each statement\"),\n+    ON_FAILURE_HOOK(HiveConf.ConfVars.ONFAILUREHOOKS, ExecuteWithHookContext.class,\n+        \"On-failure hooks to be invoked for each statement\"),\n+    QUERY_LIFETIME_HOOKS(HiveConf.ConfVars.HIVE_QUERY_LIFETIME_HOOKS, QueryLifeTimeHook.class,\n+      \"Hooks that will be triggered before/after query compilation and before/after query execution\"),\n+    SEMANTIC_ANALYZER_HOOK(HiveConf.ConfVars.SEMANTIC_ANALYZER_HOOK, HiveSemanticAnalyzerHook.class,\n+      \"Hooks that invoked before/after Hive performs its own semantic analysis on a statement\"),\n+    DRIVER_RUN_HOOKS(HiveConf.ConfVars.HIVE_DRIVER_RUN_HOOKS, HiveDriverRunHook.class,\n+      \"Hooks that Will be run at the beginning and end of Driver.run\"),\n+    REDACTOR(HiveConf.ConfVars.QUERYREDACTORHOOKS, Redactor.class,\n+      \"Hooks to be invoked for each query which can tranform the query before it's placed in the job.xml file\"),\n+    // The HiveSessionHook.class cannot access, use Hook.class instead\n+    HIVE_SERVER2_SESSION_HOOK(HiveConf.ConfVars.HIVE_SERVER2_SESSION_HOOK, Hook.class,\n+      \"Hooks to be executed when session manager starts a new session\"),\n+    OOM(HiveConf.ConfVars.HIVE_SERVER2_OOM_HOOKS, Runnable.class,", "originalCommit": "46298011457bae7d49d956a3676611cfb108d7bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE0NDQyNw==", "url": "https://github.com/apache/hive/pull/1205#discussion_r489144427", "bodyText": "done, thank you", "author": "dengzhhu653", "createdAt": "2020-09-16T03:48:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYyMjU4NQ=="}], "type": "inlineReview"}, {"oid": "b77cdd0414c0072ab84b9e1367b9987a7537842d", "url": "https://github.com/apache/hive/commit/b77cdd0414c0072ab84b9e1367b9987a7537842d", "message": "fix as suggested", "committedDate": "2020-09-16T03:26:20Z", "type": "commit"}, {"oid": "4041d646ea79d3d2811f79e0583634945f7721d0", "url": "https://github.com/apache/hive/commit/4041d646ea79d3d2811f79e0583634945f7721d0", "message": "refine redactor emun key", "committedDate": "2020-09-16T03:57:16Z", "type": "commit"}, {"oid": "0c64fcdd9e502c2ae13bf6160f727cc74e8f0a6a", "url": "https://github.com/apache/hive/commit/0c64fcdd9e502c2ae13bf6160f727cc74e8f0a6a", "message": "refinement", "committedDate": "2020-09-18T06:15:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk1ODE1NA==", "url": "https://github.com/apache/hive/pull/1205#discussion_r500958154", "bodyText": "I like this approach - could you make a small check:\n\nif we have hook compiled for the old api (which uses say the enum key HookType.PRE_EXEC_HOOK)\nwill it work or not  (without recompilation) with the new implementation", "author": "kgyrtkirk", "createdAt": "2020-10-07T12:07:36Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/hooks/HookContext.java", "diffHunk": "@@ -45,7 +47,50 @@\n public class HookContext {\n \n   static public enum HookType {\n-    PRE_EXEC_HOOK, POST_EXEC_HOOK, ON_FAILURE_HOOK\n+", "originalCommit": "0c64fcdd9e502c2ae13bf6160f727cc74e8f0a6a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE1ODQ4MA==", "url": "https://github.com/apache/hive/pull/1205#discussion_r502158480", "bodyText": "Checked on my test and production env,  it shows that the hooks compiled for the old api can be reused without any changes  with the new implementation.", "author": "dengzhhu653", "createdAt": "2020-10-09T03:01:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk1ODE1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk2MTI4Nw==", "url": "https://github.com/apache/hive/pull/1205#discussion_r500961287", "bodyText": "this is great!\nsince from now on we can also dynamically add new hooks to it at runtime - we may rename it from \"Loader\" to something else.", "author": "kgyrtkirk", "createdAt": "2020-10-07T12:12:47Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/HookRunner.java", "diffHunk": "@@ -39,57 +36,27 @@\n import org.apache.hadoop.hive.ql.parse.HiveSemanticAnalyzerHook;\n import org.apache.hadoop.hive.ql.parse.HiveSemanticAnalyzerHookContext;\n import org.apache.hadoop.hive.ql.session.SessionState;\n-import org.apache.hadoop.hive.ql.session.SessionState.LogHelper;\n import org.apache.hive.common.util.HiveStringUtils;\n \n+import static org.apache.hadoop.hive.ql.hooks.HookContext.HookType.*;\n+\n /**\n  * Handles hook executions for {@link Driver}.\n  */\n public class HookRunner {\n \n   private static final String CLASS_NAME = Driver.class.getName();\n   private final HiveConf conf;\n-  private LogHelper console;\n-  private List<QueryLifeTimeHook> queryHooks = new ArrayList<>();\n-  private List<HiveSemanticAnalyzerHook> saHooks = new ArrayList<>();\n-  private List<HiveDriverRunHook> driverRunHooks = new ArrayList<>();\n-  private List<ExecuteWithHookContext> preExecHooks = new ArrayList<>();\n-  private List<ExecuteWithHookContext> postExecHooks = new ArrayList<>();\n-  private List<ExecuteWithHookContext> onFailureHooks = new ArrayList<>();\n-  private boolean initialized = false;\n+  private final HooksLoader loader;", "originalCommit": "0c64fcdd9e502c2ae13bf6160f727cc74e8f0a6a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE1ODUwMQ==", "url": "https://github.com/apache/hive/pull/1205#discussion_r502158501", "bodyText": "Rename it to HiveHooks instead.", "author": "dengzhhu653", "createdAt": "2020-10-09T03:01:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk2MTI4Nw=="}], "type": "inlineReview"}, {"oid": "f56495e5c40f66b1547dcbce2c7fcfebf2bd0b7b", "url": "https://github.com/apache/hive/commit/f56495e5c40f66b1547dcbce2c7fcfebf2bd0b7b", "message": "rename HooksLoader to HiveHooks", "committedDate": "2020-10-09T02:47:59Z", "type": "commit"}]}