{"pr_number": 1705, "pr_title": "HIVE-24426. Spark job fails with fixed LlapTaskUmbilicalServer port.", "pr_createdAt": "2020-11-25T06:05:39Z", "pr_url": "https://github.com/apache/hive/pull/1705", "timeline": [{"oid": "8bedbb2a3650209416d890d6579f8548f01a284a", "url": "https://github.com/apache/hive/commit/8bedbb2a3650209416d890d6579f8548f01a284a", "message": "HIVE-24426. Spark job fails with fixed LlapTaskUmbilicalServer port.", "committedDate": "2020-11-25T05:50:26Z", "type": "commit"}, {"oid": "3a786c0f6e1d34c1e636698439c7572bbf607ff0", "url": "https://github.com/apache/hive/commit/3a786c0f6e1d34c1e636698439c7572bbf607ff0", "message": "Retrigger Build.", "committedDate": "2020-11-27T15:25:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQwOTkxMA==", "url": "https://github.com/apache/hive/pull/1705#discussion_r532409910", "bodyText": "can you use RangeValidator from HiveConf and make sure the min is 1024 and max is 65535 which is the port range for user space ports.", "author": "prasanthj", "createdAt": "2020-11-30T08:11:47Z", "path": "llap-client/src/java/org/apache/hadoop/hive/llap/tezplugins/helpers/LlapTaskUmbilicalServer.java", "diffHunk": "@@ -54,27 +56,54 @@\n \n   public LlapTaskUmbilicalServer(Configuration conf, LlapTaskUmbilicalProtocol umbilical, int numHandlers) throws IOException {\n     jobTokenSecretManager = new JobTokenSecretManager();\n-    int umbilicalPort = HiveConf.getIntVar(conf, HiveConf.ConfVars.LLAP_TASK_UMBILICAL_SERVER_PORT);\n-    if (umbilicalPort <= 0) {\n-      umbilicalPort = 0;\n+\n+    String[] portRange =\n+        conf.get(HiveConf.ConfVars.LLAP_TASK_UMBILICAL_SERVER_PORT.varname)\n+            .split(\"-\");\n+\n+    int minPort = Integer.parseInt(portRange[0]);\n+    boolean portFound = false;\n+    IOException e = null;\n+    if (portRange.length == 1) {\n+      // Single port specified, not Range.\n+      startServer(conf, umbilical, numHandlers, minPort);\n+      portFound = true;\n+    } else {\n+      int maxPort = Integer.parseInt(portRange[1]);\n+      for (int i = minPort; i < maxPort; i++) {", "originalCommit": "3a786c0f6e1d34c1e636698439c7572bbf607ff0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQxMDM1MQ==", "url": "https://github.com/apache/hive/pull/1705#discussion_r532410351", "bodyText": "Log at warn level to say which port is being tried and what error message received for debugging.", "author": "prasanthj", "createdAt": "2020-11-30T08:12:45Z", "path": "llap-client/src/java/org/apache/hadoop/hive/llap/tezplugins/helpers/LlapTaskUmbilicalServer.java", "diffHunk": "@@ -54,27 +56,54 @@\n \n   public LlapTaskUmbilicalServer(Configuration conf, LlapTaskUmbilicalProtocol umbilical, int numHandlers) throws IOException {\n     jobTokenSecretManager = new JobTokenSecretManager();\n-    int umbilicalPort = HiveConf.getIntVar(conf, HiveConf.ConfVars.LLAP_TASK_UMBILICAL_SERVER_PORT);\n-    if (umbilicalPort <= 0) {\n-      umbilicalPort = 0;\n+\n+    String[] portRange =\n+        conf.get(HiveConf.ConfVars.LLAP_TASK_UMBILICAL_SERVER_PORT.varname)\n+            .split(\"-\");\n+\n+    int minPort = Integer.parseInt(portRange[0]);\n+    boolean portFound = false;\n+    IOException e = null;\n+    if (portRange.length == 1) {\n+      // Single port specified, not Range.\n+      startServer(conf, umbilical, numHandlers, minPort);\n+      portFound = true;\n+    } else {\n+      int maxPort = Integer.parseInt(portRange[1]);\n+      for (int i = minPort; i < maxPort; i++) {\n+        try {\n+          startServer(conf, umbilical, numHandlers, i);\n+          portFound = true;\n+          break;\n+        } catch (BindException be) {\n+          // Ignore and move ahead, in search of a free port.", "originalCommit": "3a786c0f6e1d34c1e636698439c7572bbf607ff0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQxMDgwMw==", "url": "https://github.com/apache/hive/pull/1705#discussion_r532410803", "bodyText": "nit: you could move this to a private variable instead of searching conf object every time (now that startServer is in a loop)", "author": "prasanthj", "createdAt": "2020-11-30T08:13:39Z", "path": "llap-client/src/java/org/apache/hadoop/hive/llap/tezplugins/helpers/LlapTaskUmbilicalServer.java", "diffHunk": "@@ -54,27 +56,54 @@\n \n   public LlapTaskUmbilicalServer(Configuration conf, LlapTaskUmbilicalProtocol umbilical, int numHandlers) throws IOException {\n     jobTokenSecretManager = new JobTokenSecretManager();\n-    int umbilicalPort = HiveConf.getIntVar(conf, HiveConf.ConfVars.LLAP_TASK_UMBILICAL_SERVER_PORT);\n-    if (umbilicalPort <= 0) {\n-      umbilicalPort = 0;\n+\n+    String[] portRange =\n+        conf.get(HiveConf.ConfVars.LLAP_TASK_UMBILICAL_SERVER_PORT.varname)\n+            .split(\"-\");\n+\n+    int minPort = Integer.parseInt(portRange[0]);\n+    boolean portFound = false;\n+    IOException e = null;\n+    if (portRange.length == 1) {\n+      // Single port specified, not Range.\n+      startServer(conf, umbilical, numHandlers, minPort);\n+      portFound = true;\n+    } else {\n+      int maxPort = Integer.parseInt(portRange[1]);\n+      for (int i = minPort; i < maxPort; i++) {\n+        try {\n+          startServer(conf, umbilical, numHandlers, i);\n+          portFound = true;\n+          break;\n+        } catch (BindException be) {\n+          // Ignore and move ahead, in search of a free port.\n+          e = be;\n+        }\n+      }\n     }\n-    server = new RPC.Builder(conf)\n-        .setProtocol(LlapTaskUmbilicalProtocol.class)\n-        .setBindAddress(\"0.0.0.0\")\n-        .setPort(umbilicalPort)\n-        .setInstance(umbilical)\n-        .setNumHandlers(numHandlers)\n-        .setSecretManager(jobTokenSecretManager).build();\n-\n-    if (conf.getBoolean(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, false)) {\n-      server.refreshServiceAcl(conf, new LlapUmbilicalExternalPolicyProvider());\n+    if (!portFound) {\n+      throw e;\n     }\n \n-    server.start();\n     this.address = NetUtils.getConnectAddress(server);\n     LOG.info(\n         \"Started TaskUmbilicalServer: \" + umbilical.getClass().getName() + \" at address: \" + address +\n-        \" with numHandlers=\" + numHandlers);\n+            \" with numHandlers=\" + numHandlers);\n+  }\n+\n+  private void startServer(Configuration conf,\n+      LlapTaskUmbilicalProtocol umbilical, int numHandlers, int port)\n+      throws IOException {\n+    server = new RPC.Builder(conf).setProtocol(LlapTaskUmbilicalProtocol.class)\n+        .setBindAddress(\"0.0.0.0\").setPort(port).setInstance(umbilical)\n+        .setNumHandlers(numHandlers).setSecretManager(jobTokenSecretManager)\n+        .build();\n+    if (conf\n+        .getBoolean(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,", "originalCommit": "3a786c0f6e1d34c1e636698439c7572bbf607ff0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQxMTIzMg==", "url": "https://github.com/apache/hive/pull/1705#discussion_r532411232", "bodyText": "add what the min and max values for the range can be (1024 - 65535)", "author": "prasanthj", "createdAt": "2020-11-30T08:14:29Z", "path": "common/src/java/org/apache/hadoop/hive/conf/HiveConf.java", "diffHunk": "@@ -4917,8 +4917,9 @@ private static void populateLlapDaemonVarsSet(Set<String> llapDaemonVarsSetLocal\n       \"Sleep duration (in milliseconds) to wait before retrying on error when obtaining a\\n\" +\n       \"connection to LLAP daemon from Tez AM.\",\n       \"llap.task.communicator.connection.sleep-between-retries-millis\"),\n-    LLAP_TASK_UMBILICAL_SERVER_PORT(\"hive.llap.daemon.umbilical.port\", 0,\n-      \"LLAP task umbilical server RPC port\"),\n+    LLAP_TASK_UMBILICAL_SERVER_PORT(\"hive.llap.daemon.umbilical.port\", \"0\",\n+      \"LLAP task umbilical server RPC port or range of ports to try in case \"\n+          + \"the first port is occupied\"),", "originalCommit": "3a786c0f6e1d34c1e636698439c7572bbf607ff0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQxMTMzNw==", "url": "https://github.com/apache/hive/pull/1705#discussion_r532411337", "bodyText": "same here for logging", "author": "prasanthj", "createdAt": "2020-11-30T08:14:45Z", "path": "llap-tez/src/java/org/apache/hadoop/hive/llap/tezplugins/LlapTaskCommunicator.java", "diffHunk": "@@ -257,23 +259,32 @@ protected void startRpcServer() {\n \n       int numHandlers =\n           HiveConf.getIntVar(conf, ConfVars.LLAP_TASK_COMMUNICATOR_LISTENER_THREAD_COUNT);\n-      int umbilicalPort = HiveConf.getIntVar(conf, ConfVars.LLAP_TASK_UMBILICAL_SERVER_PORT);\n-      if (umbilicalPort <= 0) {\n-        umbilicalPort = 0;\n+      String[] portRange =\n+          conf.get(HiveConf.ConfVars.LLAP_TASK_UMBILICAL_SERVER_PORT.varname)\n+              .split(\"-\");\n+      boolean portFound = false;\n+      IOException ioe = null;\n+      int minPort = Integer.parseInt(portRange[0]);\n+      if (portRange.length == 1) {\n+        // Single port specified, not range.\n+        startServerInternal(conf, minPort, numHandlers, jobTokenSecretManager);\n+        portFound = true;\n+      } else {\n+        int maxPort = Integer.parseInt(portRange[1]);\n+        for (int i = minPort; i < maxPort; i++) {\n+          try {\n+            startServerInternal(conf, i, numHandlers, jobTokenSecretManager);\n+            portFound = true;\n+            break;\n+          } catch (BindException be) {\n+            // Ignore and move ahead, in search of a free port.", "originalCommit": "3a786c0f6e1d34c1e636698439c7572bbf607ff0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQxMTQ1Nw==", "url": "https://github.com/apache/hive/pull/1705#discussion_r532411457", "bodyText": "same here (use RangeValidator)", "author": "prasanthj", "createdAt": "2020-11-30T08:14:58Z", "path": "llap-tez/src/java/org/apache/hadoop/hive/llap/tezplugins/LlapTaskCommunicator.java", "diffHunk": "@@ -257,23 +259,32 @@ protected void startRpcServer() {\n \n       int numHandlers =\n           HiveConf.getIntVar(conf, ConfVars.LLAP_TASK_COMMUNICATOR_LISTENER_THREAD_COUNT);\n-      int umbilicalPort = HiveConf.getIntVar(conf, ConfVars.LLAP_TASK_UMBILICAL_SERVER_PORT);\n-      if (umbilicalPort <= 0) {\n-        umbilicalPort = 0;\n+      String[] portRange =\n+          conf.get(HiveConf.ConfVars.LLAP_TASK_UMBILICAL_SERVER_PORT.varname)\n+              .split(\"-\");\n+      boolean portFound = false;\n+      IOException ioe = null;\n+      int minPort = Integer.parseInt(portRange[0]);\n+      if (portRange.length == 1) {\n+        // Single port specified, not range.\n+        startServerInternal(conf, minPort, numHandlers, jobTokenSecretManager);\n+        portFound = true;\n+      } else {\n+        int maxPort = Integer.parseInt(portRange[1]);", "originalCommit": "3a786c0f6e1d34c1e636698439c7572bbf607ff0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQxMTY4Ng==", "url": "https://github.com/apache/hive/pull/1705#discussion_r532411686", "bodyText": "nit: same here to move this to private variable.", "author": "prasanthj", "createdAt": "2020-11-30T08:15:25Z", "path": "llap-tez/src/java/org/apache/hadoop/hive/llap/tezplugins/LlapTaskCommunicator.java", "diffHunk": "@@ -283,6 +294,23 @@ protected void startRpcServer() {\n     }\n   }\n \n+  private void startServerInternal(Configuration conf, int umbilicalPort,\n+      int numHandlers, JobTokenSecretManager jobTokenSecretManager)\n+      throws IOException {\n+    server = new RPC.Builder(conf).setProtocol(LlapTaskUmbilicalProtocol.class)\n+        .setBindAddress(\"0.0.0.0\").setPort(umbilicalPort).setInstance(umbilical)\n+        .setNumHandlers(numHandlers).setSecretManager(jobTokenSecretManager)\n+        .build();\n+\n+    if (conf", "originalCommit": "3a786c0f6e1d34c1e636698439c7572bbf607ff0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ee9bea2b87927b397dbfa7336f23dc501953a35e", "url": "https://github.com/apache/hive/commit/ee9bea2b87927b397dbfa7336f23dc501953a35e", "message": "Handle Review Comments.", "committedDate": "2020-11-30T10:27:57Z", "type": "commit"}, {"oid": "0b0fa7a89c09885f78b582189a65d7151dbecf72", "url": "https://github.com/apache/hive/commit/0b0fa7a89c09885f78b582189a65d7151dbecf72", "message": "Added Success Log Message.", "committedDate": "2020-11-30T13:12:02Z", "type": "commit"}, {"oid": "14e2dacdfe5dc55ce06f3e98e555585e7b78d925", "url": "https://github.com/apache/hive/commit/14e2dacdfe5dc55ce06f3e98e555585e7b78d925", "message": "Retrigger build.", "committedDate": "2020-11-30T19:01:10Z", "type": "commit"}]}