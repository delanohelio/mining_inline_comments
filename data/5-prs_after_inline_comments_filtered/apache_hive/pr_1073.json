{"pr_number": 1073, "pr_title": "HIVE-22869: Add locking benchmark to metastore-tools/metastore-benchmarks", "pr_createdAt": "2020-06-08T10:58:13Z", "pr_url": "https://github.com/apache/hive/pull/1073", "timeline": [{"oid": "76c41d2f463bf04acc1a418e328258b6f0c2e7ed", "url": "https://github.com/apache/hive/commit/76c41d2f463bf04acc1a418e328258b6f0c2e7ed", "message": "HIVE-22869 Add locking benchmark to metastore-tools/metastore-benchmarks", "committedDate": "2020-06-02T12:51:43Z", "type": "commit"}, {"oid": "f9fc7b16b58c0d282af216891a7fe87cc166bc6f", "url": "https://github.com/apache/hive/commit/f9fc7b16b58c0d282af216891a7fe87cc166bc6f", "message": "HMS benchmarking modifications\n\nChange-Id: I641f7b094aff46b92cfa3d38e3049b221fa5abe6", "committedDate": "2020-06-02T12:51:43Z", "type": "commit"}, {"oid": "fdd6af13da002bac0c3a63f18a958325858275fe", "url": "https://github.com/apache/hive/commit/fdd6af13da002bac0c3a63f18a958325858275fe", "message": "CDPD-11690\n\nChange-Id: Iea9f99870cfffc915b0574570cfb4b08827d5e3a", "committedDate": "2020-06-05T13:00:03Z", "type": "commit"}, {"oid": "b6a7ea1bf3f8eb1a70337d0f827a72d997db2939", "url": "https://github.com/apache/hive/commit/b6a7ea1bf3f8eb1a70337d0f827a72d997db2939", "message": "CDPD-11690\n\nChange-Id: Iea9f99870cfffc915b0574570cfb4b08827d5e3a", "committedDate": "2020-06-09T15:13:44Z", "type": "commit"}, {"oid": "cd44b6227ea2c56386ab09970a3dfeb2016767d0", "url": "https://github.com/apache/hive/commit/cd44b6227ea2c56386ab09970a3dfeb2016767d0", "message": "Merge branch 'HIVE-22869' of github.com:zchovan/hive into HIVE-22869\n\nChange-Id: I0b4ae360a4c2b2de49dd74620f19e38cf38a2021", "committedDate": "2020-06-09T15:15:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg2ODk4MQ==", "url": "https://github.com/apache/hive/pull/1073#discussion_r438868981", "bodyText": "rename to doSetup as it's global and not iteration scoped", "author": "deniskuzZ", "createdAt": "2020-06-11T15:26:30Z", "path": "standalone-metastore/metastore-tools/metastore-benchmarks/src/main/java/org/apache/hadoop/hive/metastore/tools/ACIDBenchmarks.java", "diffHunk": "@@ -0,0 +1,247 @@\n+package org.apache.hadoop.hive.metastore.tools;\n+\n+import org.apache.hadoop.hive.metastore.api.DataOperationType;\n+import org.apache.hadoop.hive.metastore.api.LockComponent;\n+import org.apache.hadoop.hive.metastore.api.LockRequest;\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.core.config.Configuration;\n+import org.apache.thrift.TException;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.apache.hadoop.hive.metastore.tools.BenchmarkUtils.createManyTables;\n+import static org.apache.hadoop.hive.metastore.tools.BenchmarkUtils.dropManyTables;\n+import static org.apache.hadoop.hive.metastore.tools.Util.throwingSupplierWrapper;\n+\n+public class ACIDBenchmarks {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(CoreContext.class);\n+\n+  @State(Scope.Benchmark)\n+  public static class CoreContext {\n+    @Param(\"1\")\n+    protected int howMany;\n+\n+    @State(Scope.Thread)\n+    public static class ThreadState {\n+      HMSClient client;\n+\n+      @Setup\n+      public void doSetup() throws Exception {\n+        LOG.debug(\"Creating client\");\n+        client = HMSConfig.getInstance().newClient();\n+      }\n+\n+      @TearDown\n+      public void doTearDown() throws Exception {\n+        client.close();\n+        LOG.debug(\"Closed a connection to metastore.\");\n+      }\n+    }\n+\n+    @Setup\n+    public void setup() {\n+      LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n+      Configuration ctxConfig = ctx.getConfiguration();\n+      ctxConfig.getLoggerConfig(CoreContext.class.getName()).setLevel(Level.INFO);\n+      ctx.updateLoggers(ctxConfig);\n+    }\n+  }\n+\n+  @State(Scope.Benchmark)\n+  public static class TestOpenTxn extends CoreContext {\n+\n+    @State(Scope.Thread)\n+    public static class ThreadState extends CoreContext.ThreadState {\n+      List<Long> openTxns = new ArrayList<>();\n+\n+      @TearDown\n+      public void doTearDown() throws Exception {\n+        client.abortTxns(openTxns);\n+        LOG.debug(\"aborted all opened txns\");\n+      }\n+\n+      void addTxn(List<Long> openTxn) {\n+        openTxns.addAll(openTxn);\n+      }\n+    }\n+\n+    @Benchmark\n+    public void openTxn(TestOpenTxn.ThreadState state) throws TException {\n+      state.addTxn(state.client.openTxn(howMany));\n+      LOG.debug(\"opened txns, count=\", howMany);\n+    }\n+  }\n+\n+  @State(Scope.Benchmark)\n+  public static class TestLocking extends CoreContext {\n+    private int nTables;\n+\n+    @Param(\"0\")\n+    private int nPartitions;\n+\n+    private List<LockComponent> lockComponents;\n+\n+    @Setup\n+    public void setup() {\n+      this.nTables = (nPartitions != 0) ? howMany / nPartitions : howMany;\n+      createLockComponents();\n+    }\n+\n+    @State(Scope.Thread)\n+    public static class ThreadState extends CoreContext.ThreadState {\n+      List<Long> openTxns = new ArrayList<>();\n+      long txnId;\n+\n+      @Setup(org.openjdk.jmh.annotations.Level.Invocation)\n+      public void iterSetup() {\n+        txnId = executeOpenTxnAndGetTxnId(client);\n+        LOG.debug(\"opened txn, id={}\", txnId);\n+        openTxns.add(txnId);\n+      }\n+\n+      @TearDown\n+      public void doTearDown() throws Exception {\n+        client.abortTxns(openTxns);\n+        if (BenchmarkUtils.checkTxnsCleaned(client, openTxns) == false) {\n+          LOG.error(\"Something went wrong with the cleanup of txns\");\n+        }\n+        LOG.debug(\"aborted all opened txns\");\n+      }\n+    }\n+\n+    @Benchmark\n+    public void lock(TestLocking.ThreadState state) {\n+      LOG.debug(\"sending lock request\");\n+      executeLock(state.client, state.txnId, lockComponents);\n+    }\n+\n+    private void createLockComponents() {\n+      lockComponents = new ArrayList<>();\n+\n+      for (int i = 0; i < nTables; i++) {\n+        for (int j = 0; j < nPartitions - (nPartitions > 1 ? 1 : 0); j++) {\n+          lockComponents.add(\n+            new Util.LockComponentBuilder()\n+              .setDbName(\"default\")\n+              .setTableName(String.format(\"tmp_table_%d\", i))\n+              .setPartitionName(\"p_\" + j)\n+              .setShared()\n+              .setOperationType(DataOperationType.SELECT)\n+              .build());\n+        }\n+        if (nPartitions != 1) {\n+          lockComponents.add(\n+            new Util.LockComponentBuilder()\n+              .setDbName(\"default\")\n+              .setTableName(String.format(\"tmp_table_%d\", i))\n+              .setShared()\n+              .setOperationType(DataOperationType.SELECT)\n+              .build());\n+        }\n+      }\n+    }\n+\n+    private static long executeOpenTxnAndGetTxnId(HMSClient client) {\n+      return throwingSupplierWrapper(() -> client.openTxn(1).get(0));\n+    }\n+\n+    private void executeLock(HMSClient client, long txnId, List<LockComponent> lockComponents) {\n+      LockRequest req = new LockRequest(lockComponents, \"hclient\", \"localhost\");\n+      req.setTxnid(txnId);\n+      throwingSupplierWrapper(() -> client.lock(req));\n+    }\n+  }\n+\n+  @State(Scope.Benchmark)\n+  public static class TestAllocateTableWriteIds extends CoreContext {\n+    String dbName = \"test_db\";\n+    String tblName = \"tmp_table\";\n+\n+    @State(Scope.Thread)\n+    public static class ThreadState extends CoreContext.ThreadState {\n+      List<Long> openTxns = new ArrayList<>();\n+      long txnId;\n+\n+      @Setup\n+      public void iterSetup() {", "originalCommit": "cd44b6227ea2c56386ab09970a3dfeb2016767d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIyMTk1OQ==", "url": "https://github.com/apache/hive/pull/1073#discussion_r440221959", "bodyText": "renaming to simple setup, as doSetup would overwrite the parent doSetup()", "author": "zchovan", "createdAt": "2020-06-15T14:35:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg2ODk4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQyNzU1MA==", "url": "https://github.com/apache/hive/pull/1073#discussion_r456427550", "bodyText": "i think, it will execute both, check for example doTearDown in ThreadState confs.", "author": "deniskuzZ", "createdAt": "2020-07-17T13:02:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg2ODk4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg3MTc4OA==", "url": "https://github.com/apache/hive/pull/1073#discussion_r438871788", "bodyText": "I would use switch here and go with ALL by default", "author": "deniskuzZ", "createdAt": "2020-06-11T15:29:21Z", "path": "standalone-metastore/metastore-tools/metastore-benchmarks/src/main/java/org/apache/hadoop/hive/metastore/tools/BenchmarkTool.java", "diffHunk": "@@ -141,12 +175,62 @@ private static void saveDataFile(String location, String name,\n     }\n   }\n \n-\n   @Override\n   public void run() {\n-    LOG.info(\"Using warmup \" + warmup +\n-        \" spin \" + spinCount + \" nparams \" + nParameters + \" threads \" + nThreads);\n+    LOG.info(\"Using warmup \" + warmup + \" spin \" + spinCount + \" nparams \" + Arrays.toString(nParameters) + \" threads \"\n+        + nThreads);\n+    HMSConfig.getInstance().init(host, port, confDir);\n+\n+    if (runMode == RunModes.ALL) {", "originalCommit": "cd44b6227ea2c56386ab09970a3dfeb2016767d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQyMzA5Mw==", "url": "https://github.com/apache/hive/pull/1073#discussion_r456423093", "bodyText": "can't see change here", "author": "deniskuzZ", "createdAt": "2020-07-17T12:53:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg3MTc4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg3NTA4Mg==", "url": "https://github.com/apache/hive/pull/1073#discussion_r438875082", "bodyText": "many new lines", "author": "deniskuzZ", "createdAt": "2020-06-11T15:32:37Z", "path": "standalone-metastore/metastore-tools/metastore-benchmarks/src/main/java/org/apache/hadoop/hive/metastore/tools/BenchmarkUtils.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.apache.hadoop.hive.metastore.tools;\n+\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.TxnInfo;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+\n+import static org.apache.hadoop.hive.metastore.tools.Util.createSchema;\n+import static org.apache.hadoop.hive.metastore.tools.Util.throwingSupplierWrapper;\n+\n+public class BenchmarkUtils {\n+  private static final Logger LOG = LoggerFactory.getLogger(BenchmarkUtils.class);\n+", "originalCommit": "cd44b6227ea2c56386ab09970a3dfeb2016767d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg3NjM3NA==", "url": "https://github.com/apache/hive/pull/1073#discussion_r438876374", "bodyText": "Arrays.asList returns ArrayList, why to pass it into constructor of another ArrayList?", "author": "deniskuzZ", "createdAt": "2020-06-11T15:34:01Z", "path": "standalone-metastore/metastore-tools/metastore-benchmarks/src/main/java/org/apache/hadoop/hive/metastore/tools/BenchmarkUtils.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.apache.hadoop.hive.metastore.tools;\n+\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.TxnInfo;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+\n+import static org.apache.hadoop.hive.metastore.tools.Util.createSchema;\n+import static org.apache.hadoop.hive.metastore.tools.Util.throwingSupplierWrapper;\n+\n+public class BenchmarkUtils {\n+  private static final Logger LOG = LoggerFactory.getLogger(BenchmarkUtils.class);\n+\n+\n+  static void createManyTables(HMSClient client, int howMany, String dbName, String format) {\n+    List<FieldSchema> columns = createSchema(new ArrayList<>(Arrays.asList(\"name\", \"string\")));", "originalCommit": "cd44b6227ea2c56386ab09970a3dfeb2016767d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgxMDAzMA==", "url": "https://github.com/apache/hive/pull/1073#discussion_r455810030", "bodyText": "fixed", "author": "zchovan", "createdAt": "2020-07-16T14:02:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg3NjM3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg4MTYwMg==", "url": "https://github.com/apache/hive/pull/1073#discussion_r438881602", "bodyText": "you can use txnInfos.stream().anyMatch(txnsOpenedByBenchmark::contains), change txnsOpenedByBenchmark to Set", "author": "deniskuzZ", "createdAt": "2020-06-11T15:39:22Z", "path": "standalone-metastore/metastore-tools/metastore-benchmarks/src/main/java/org/apache/hadoop/hive/metastore/tools/BenchmarkUtils.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.apache.hadoop.hive.metastore.tools;\n+\n+import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.metastore.api.TxnInfo;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+\n+import static org.apache.hadoop.hive.metastore.tools.Util.createSchema;\n+import static org.apache.hadoop.hive.metastore.tools.Util.throwingSupplierWrapper;\n+\n+public class BenchmarkUtils {\n+  private static final Logger LOG = LoggerFactory.getLogger(BenchmarkUtils.class);\n+\n+\n+  static void createManyTables(HMSClient client, int howMany, String dbName, String format) {\n+    List<FieldSchema> columns = createSchema(new ArrayList<>(Arrays.asList(\"name\", \"string\")));\n+    List<FieldSchema> partitions = createSchema(new ArrayList<>(Arrays.asList(\"date\", \"string\")));\n+    IntStream.range(0, howMany)\n+        .forEach(i ->\n+            throwingSupplierWrapper(() -> client.createTable(\n+                new Util.TableBuilder(dbName, String.format(format, i))\n+                    .withType(TableType.MANAGED_TABLE)\n+                    .withColumns(columns)\n+                    .withPartitionKeys(partitions)\n+                    .build())));\n+  }\n+\n+  static void dropManyTables(HMSClient client, int howMany, String dbName, String format) {\n+    IntStream.range(0, howMany)\n+        .forEach(i ->\n+            throwingSupplierWrapper(() -> client.dropTable(dbName, String.format(format, i))));\n+  }\n+\n+  // Create a simple table with a single column and single partition\n+  static void createPartitionedTable(HMSClient client, String dbName, String tableName) {\n+    throwingSupplierWrapper(() -> client.createTable(\n+        new Util.TableBuilder(dbName, tableName)\n+            .withType(TableType.MANAGED_TABLE)\n+            .withColumns(createSchema(Collections.singletonList(\"name:string\")))\n+            .withPartitionKeys(createSchema(Collections.singletonList(\"date\")))\n+            .build()));\n+  }\n+\n+  static boolean checkTxnsCleaned(HMSClient client, List<Long> txnsOpenedByBenchmark) throws InterruptedException {\n+    // let's wait the default cleaner run period\n+    Thread.sleep(100000);\n+    List<Long> notCleanedTxns = new ArrayList<>();\n+    throwingSupplierWrapper(() -> {\n+      List<TxnInfo> txnInfos = client.getOpenTxnsInfo();", "originalCommit": "cd44b6227ea2c56386ab09970a3dfeb2016767d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQyMzU2OA==", "url": "https://github.com/apache/hive/pull/1073#discussion_r456423568", "bodyText": "can't see any change here", "author": "deniskuzZ", "createdAt": "2020-07-17T12:54:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg4MTYwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg4NDk5Nw==", "url": "https://github.com/apache/hive/pull/1073#discussion_r438884997", "bodyText": "I would expect this method to return list of validWriteIds, not just true. Should we change the name?", "author": "deniskuzZ", "createdAt": "2020-06-11T15:43:38Z", "path": "standalone-metastore/metastore-tools/tools-common/src/main/java/org/apache/hadoop/hive/metastore/tools/HMSClient.java", "diffHunk": "@@ -345,21 +348,44 @@ boolean openTxn(int numTxns) throws TException {\n     return openTxns;\n   }\n \n+  List<TxnInfo> getOpenTxnsInfo() throws TException {\n+    return client.get_open_txns_info().getOpen_txns();\n+  }\n+\n   boolean commitTxn(long txnId) throws TException {\n     client.commit_txn(new CommitTxnRequest(txnId));\n     return true;\n   }\n \n-  boolean abortTxn(long txnId) throws TException {\n-    client.abort_txn(new AbortTxnRequest(txnId));\n+  boolean abortTxns(List<Long> txnIds) throws TException {\n+    client.abort_txns(new AbortTxnsRequest(txnIds));\n     return true;\n   }\n \n-  boolean abortTxns(List<Long> txnIds) throws TException {\n-    client.abort_txns(new AbortTxnsRequest(txnIds));\n+  boolean allocateTableWriteIds(String dbName, String tableName, List<Long> openTxns) throws TException {\n+    AllocateTableWriteIdsRequest awiRqst = new AllocateTableWriteIdsRequest(dbName, tableName);\n+    openTxns.forEach(t -> {\n+      awiRqst.addToTxnIds(t);\n+    });\n+\n+    client.allocate_table_write_ids(awiRqst);\n     return true;\n   }\n \n+  boolean getValidWriteIds(List<String> fullTableNames) throws TException {", "originalCommit": "cd44b6227ea2c56386ab09970a3dfeb2016767d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgxMDUyMA==", "url": "https://github.com/apache/hive/pull/1073#discussion_r455810520", "bodyText": "HMClient methods return boolean, so they can be invoked with throwingSupplierWrapper()", "author": "zchovan", "createdAt": "2020-07-16T14:03:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg4NDk5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQyMTk4OQ==", "url": "https://github.com/apache/hive/pull/1073#discussion_r456421989", "bodyText": "I don't get what does it have to do with throwingSupplierWrapper. throwingSupplierWrapper just handles checked exceptions. Could you please elaborate here?", "author": "deniskuzZ", "createdAt": "2020-07-17T12:51:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg4NDk5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzNDcwNA==", "url": "https://github.com/apache/hive/pull/1073#discussion_r456434704", "bodyText": "ah sorry, I was mistaken, the reason why it never returned the writeIds is because they are never used, the benchmark is just executing the api call. The return value from the hms is actually a GetValidWriteIdsResponse object, not a list. As it is never used I'm not sure if we need to change this.", "author": "zchovan", "createdAt": "2020-07-17T13:15:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg4NDk5Nw=="}], "type": "inlineReview"}, {"oid": "a4621b3a481292602c00c1b7c97ad9765b62ef28", "url": "https://github.com/apache/hive/commit/a4621b3a481292602c00c1b7c97ad9765b62ef28", "message": "HIVE-22869 Add locking benchmark to metastore-tools/metastore-benchmarks", "committedDate": "2020-07-16T13:19:39Z", "type": "commit"}, {"oid": "897703da07f7fe73a9a08e2993442952ec347b2b", "url": "https://github.com/apache/hive/commit/897703da07f7fe73a9a08e2993442952ec347b2b", "message": "HMS benchmarking modifications\n\nChange-Id: I641f7b094aff46b92cfa3d38e3049b221fa5abe6", "committedDate": "2020-07-16T13:19:39Z", "type": "commit"}, {"oid": "0648a760b7f75658c9a29d0d7b9c9fc021463691", "url": "https://github.com/apache/hive/commit/0648a760b7f75658c9a29d0d7b9c9fc021463691", "message": "CDPD-11690\n\nChange-Id: Iea9f99870cfffc915b0574570cfb4b08827d5e3a", "committedDate": "2020-07-16T13:19:39Z", "type": "commit"}, {"oid": "765a65ccb3a87118ecc6c311799563359fab1636", "url": "https://github.com/apache/hive/commit/765a65ccb3a87118ecc6c311799563359fab1636", "message": "CDPD-11690\n\nChange-Id: Iea9f99870cfffc915b0574570cfb4b08827d5e3a", "committedDate": "2020-07-16T13:37:44Z", "type": "commit"}, {"oid": "67f3f493ed191782150fca7c0f857d8a2dd504e0", "url": "https://github.com/apache/hive/commit/67f3f493ed191782150fca7c0f857d8a2dd504e0", "message": "Merge branch 'HIVE-22869' of github.com:zchovan/hive into HIVE-22869\n\nChange-Id: I2a9393a7472730e74da6da3e6071f551a47aa4cd", "committedDate": "2020-07-16T13:38:41Z", "type": "commit"}, {"oid": "13e36fe69e210e76ab5142db47fc35318f0f8281", "url": "https://github.com/apache/hive/commit/13e36fe69e210e76ab5142db47fc35318f0f8281", "message": "Merge branch 'HIVE-22869' of github.com:zchovan/hive into HIVE-22869\n\nChange-Id: I2a9393a7472730e74da6da3e6071f551a47aa4cd", "committedDate": "2020-07-16T14:03:30Z", "type": "commit"}, {"oid": "9bfa5ddbf03304164bd39d6e4eec1ee5a8d7d958", "url": "https://github.com/apache/hive/commit/9bfa5ddbf03304164bd39d6e4eec1ee5a8d7d958", "message": "Merge branch 'HIVE-22869' of github.com:zchovan/hive into HIVE-22869\n\nChange-Id: I82ed3a001e453a701bc6f20448958adf10cd943d", "committedDate": "2020-07-16T14:28:21Z", "type": "commit"}, {"oid": "fe8387e3c54bcb85b5d1b0447cceafa341e64912", "url": "https://github.com/apache/hive/commit/fe8387e3c54bcb85b5d1b0447cceafa341e64912", "message": "review modifications\n\nChange-Id: I2e890124a0e09df4b917b4899e1acb2b42ebbfdf", "committedDate": "2020-07-17T13:17:17Z", "type": "commit"}]}