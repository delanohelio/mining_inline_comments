{"pr_number": 1124, "pr_title": "HIVE-23493: Rewrite plan to join back tables with many projected columns joined multiple times", "pr_createdAt": "2020-06-16T13:34:50Z", "pr_url": "https://github.com/apache/hive/pull/1124", "timeline": [{"oid": "ab5906d52dffccc8f185e5abcfed7e88d8af80c2", "url": "https://github.com/apache/hive/commit/ab5906d52dffccc8f185e5abcfed7e88d8af80c2", "message": "HIVE-23493: Rewrite plan to join back tables with many projected columns joined multiple times", "committedDate": "2020-06-16T13:32:11Z", "type": "commit"}, {"oid": "069cab9d3703e00eaa050a543d5928b1316b811b", "url": "https://github.com/apache/hive/commit/069cab9d3703e00eaa050a543d5928b1316b811b", "message": "HIVE-23493: Rewrite plan to join back tables with many projected columns joined multiple times - address issues", "committedDate": "2020-06-16T13:32:11Z", "type": "commit"}, {"oid": "39f3218b68a5bba71555be69500ac6e316cbe0c4", "url": "https://github.com/apache/hive/commit/39f3218b68a5bba71555be69500ac6e316cbe0c4", "message": "HIVE-23493: Rewrite plan to join back tables with many projected columns joined multiple times - add Cost-based decision", "committedDate": "2020-06-16T15:03:49Z", "type": "commit"}, {"oid": "39f3218b68a5bba71555be69500ac6e316cbe0c4", "url": "https://github.com/apache/hive/commit/39f3218b68a5bba71555be69500ac6e316cbe0c4", "message": "HIVE-23493: Rewrite plan to join back tables with many projected columns joined multiple times - add Cost-based decision", "committedDate": "2020-06-16T15:03:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkyNTY2MA==", "url": "https://github.com/apache/hive/pull/1124#discussion_r440925660", "bodyText": "Maybe you should allow negative numbers (e.g., -1) to disable the optimization completely.", "author": "jcamachor", "createdAt": "2020-06-16T15:07:58Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/rules/HiveCardinalityPreservingJoinRule.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hive.ql.optimizer.calcite.rules;\n+\n+import org.apache.calcite.plan.RelOptCost;\n+import org.apache.calcite.plan.RelOptRuleCall;\n+import org.apache.calcite.plan.RelOptUtil;\n+import org.apache.calcite.rel.RelNode;\n+import org.apache.calcite.rel.metadata.JaninoRelMetadataProvider;\n+import org.apache.calcite.rel.metadata.RelMetadataQuery;\n+import org.apache.hadoop.hive.ql.optimizer.calcite.HiveDefaultTezModelRelMetadataProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Rule to trigger {@link HiveCardinalityPreservingJoinOptimization} on top of the plan.\n+ */\n+public class HiveCardinalityPreservingJoinRule extends HiveFieldTrimmerRule {\n+  private static final Logger LOG = LoggerFactory.getLogger(HiveCardinalityPreservingJoinRule.class);\n+\n+  private final double factor;\n+\n+  public HiveCardinalityPreservingJoinRule(double factor) {\n+    super(false, \"HiveCardinalityPreservingJoinRule\");\n+    this.factor = Math.max(factor, 0.0);", "originalCommit": "39f3218b68a5bba71555be69500ac6e316cbe0c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkzNjE4MA==", "url": "https://github.com/apache/hive/pull/1124#discussion_r440936180", "bodyText": "HiveCost doesn't allow negative numbers:\n\n  \n    \n      hive/ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/cost/HiveCost.java\n    \n    \n         Line 78\n      in\n      e74029d\n    \n    \n    \n    \n\n        \n          \n           assert rowCount >= 0d; \n        \n    \n  \n\n\nBut there is a check in CalcitePlanner: the rule is not added if the factor is 0 or negative\nif (factor > 0.0) {\n        generatePartialProgram(program, false, HepMatchOrder.TOP_DOWN,\n            new HiveCardinalityPreservingJoinRule(factor));\n      }", "author": "kasakrisz", "createdAt": "2020-06-16T15:20:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkyNTY2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkyNzA3Mg==", "url": "https://github.com/apache/hive/pull/1124#discussion_r440927072", "bodyText": "nit. Original plan cost: {} vs Optimized plan cost: {} ? Or something like that so we can read it more clearly.", "author": "jcamachor", "createdAt": "2020-06-16T15:09:55Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/rules/HiveCardinalityPreservingJoinRule.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hive.ql.optimizer.calcite.rules;\n+\n+import org.apache.calcite.plan.RelOptCost;\n+import org.apache.calcite.plan.RelOptRuleCall;\n+import org.apache.calcite.plan.RelOptUtil;\n+import org.apache.calcite.rel.RelNode;\n+import org.apache.calcite.rel.metadata.JaninoRelMetadataProvider;\n+import org.apache.calcite.rel.metadata.RelMetadataQuery;\n+import org.apache.hadoop.hive.ql.optimizer.calcite.HiveDefaultTezModelRelMetadataProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Rule to trigger {@link HiveCardinalityPreservingJoinOptimization} on top of the plan.\n+ */\n+public class HiveCardinalityPreservingJoinRule extends HiveFieldTrimmerRule {\n+  private static final Logger LOG = LoggerFactory.getLogger(HiveCardinalityPreservingJoinRule.class);\n+\n+  private final double factor;\n+\n+  public HiveCardinalityPreservingJoinRule(double factor) {\n+    super(false, \"HiveCardinalityPreservingJoinRule\");\n+    this.factor = Math.max(factor, 0.0);\n+  }\n+\n+  @Override\n+  protected RelNode trim(RelOptRuleCall call, RelNode node) {\n+    RelNode optimized = new HiveCardinalityPreservingJoinOptimization().trim(call.builder(), node);\n+    if (optimized == node) {\n+      return node;\n+    }\n+\n+    JaninoRelMetadataProvider original = RelMetadataQuery.THREAD_PROVIDERS.get();\n+    RelMetadataQuery.THREAD_PROVIDERS.set(getJaninoRelMetadataProvider());\n+    RelMetadataQuery metadataQuery = RelMetadataQuery.instance();\n+\n+    RelOptCost optimizedCost = metadataQuery.getCumulativeCost(optimized);\n+    RelOptCost originalCost = metadataQuery.getCumulativeCost(node);\n+    originalCost = originalCost.multiplyBy(factor);\n+    LOG.debug(\"Original plan cost {} Optimized plan cost {}\", originalCost, optimizedCost);", "originalCommit": "39f3218b68a5bba71555be69500ac6e316cbe0c4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkyOTc4Mw==", "url": "https://github.com/apache/hive/pull/1124#discussion_r440929783", "bodyText": "Can we move this to the top of the method and put the RelMetadataQuery.THREAD_PROVIDERS.set(original); in a finally block? If there is an exception while getting the stats (for instance, if stats are not available), we should make sure that we are setting it back to the original one.", "author": "jcamachor", "createdAt": "2020-06-16T15:13:28Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/rules/HiveCardinalityPreservingJoinRule.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hive.ql.optimizer.calcite.rules;\n+\n+import org.apache.calcite.plan.RelOptCost;\n+import org.apache.calcite.plan.RelOptRuleCall;\n+import org.apache.calcite.plan.RelOptUtil;\n+import org.apache.calcite.rel.RelNode;\n+import org.apache.calcite.rel.metadata.JaninoRelMetadataProvider;\n+import org.apache.calcite.rel.metadata.RelMetadataQuery;\n+import org.apache.hadoop.hive.ql.optimizer.calcite.HiveDefaultTezModelRelMetadataProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Rule to trigger {@link HiveCardinalityPreservingJoinOptimization} on top of the plan.\n+ */\n+public class HiveCardinalityPreservingJoinRule extends HiveFieldTrimmerRule {\n+  private static final Logger LOG = LoggerFactory.getLogger(HiveCardinalityPreservingJoinRule.class);\n+\n+  private final double factor;\n+\n+  public HiveCardinalityPreservingJoinRule(double factor) {\n+    super(false, \"HiveCardinalityPreservingJoinRule\");\n+    this.factor = Math.max(factor, 0.0);\n+  }\n+\n+  @Override\n+  protected RelNode trim(RelOptRuleCall call, RelNode node) {\n+    RelNode optimized = new HiveCardinalityPreservingJoinOptimization().trim(call.builder(), node);\n+    if (optimized == node) {\n+      return node;\n+    }\n+\n+    JaninoRelMetadataProvider original = RelMetadataQuery.THREAD_PROVIDERS.get();", "originalCommit": "39f3218b68a5bba71555be69500ac6e316cbe0c4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "39958cf9f9f28375afcd735e47464eb815e98c49", "url": "https://github.com/apache/hive/commit/39958cf9f9f28375afcd735e47464eb815e98c49", "message": "HIVE-23493: Rewrite plan to join back tables with many projected columns joined multiple times - address review comments", "committedDate": "2020-06-16T15:23:38Z", "type": "commit"}, {"oid": "2408552de2a1e1767fce37a754bccc97ee66add1", "url": "https://github.com/apache/hive/commit/2408552de2a1e1767fce37a754bccc97ee66add1", "message": "HIVE-23493: Rewrite plan to join back tables with many projected columns joined multiple times - bail out if root input is Aggregate", "committedDate": "2020-06-16T18:22:36Z", "type": "commit"}]}