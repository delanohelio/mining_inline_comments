{"pr_number": 992, "pr_title": "HIVE-23269: Unsafe comparing bigints and strings", "pr_createdAt": "2020-04-23T10:34:14Z", "pr_url": "https://github.com/apache/hive/pull/992", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc0ODE1MQ==", "url": "https://github.com/apache/hive/pull/992#discussion_r413748151", "bodyText": "this is a \"@parameterized\" testclass; please don't add testcases which are not use the parameterized nature... move these to a new testclass\nit might make sense to split the testcases into separate methods", "author": "kgyrtkirk", "createdAt": "2020-04-23T11:49:12Z", "path": "ql/src/test/org/apache/hadoop/hive/ql/parse/type/TestTypeCheckProcFactory.java", "diffHunk": "@@ -140,4 +147,37 @@ public void testWithNonZeroFraction() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void testValidateUDFOnTypeCheck() throws Exception {", "originalCommit": "3ca425983510ee841439e9a9dd83b6e0547501a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkyMTIwMQ==", "url": "https://github.com/apache/hive/pull/992#discussion_r413921201", "bodyText": "Thank you for mentioning this, move the test to TestTypeCompareValidation.", "author": "dengzhhu653", "createdAt": "2020-04-23T15:59:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc0ODE1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc0OTc3Mg==", "url": "https://github.com/apache/hive/pull/992#discussion_r413749772", "bodyText": "you could move the oiTypeInfo0 conditions into a method (along with the Set) and then reuse the method 2 lines down\nmight make this more readable", "author": "kgyrtkirk", "createdAt": "2020-04-23T11:51:54Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/parse/type/TypeCheckProcFactory.java", "diffHunk": "@@ -789,12 +791,25 @@ protected void validateUDF(ASTNode expr, boolean isFunction, TypeCheckCtx ctx, F\n \n         LogHelper console = new LogHelper(LOG);\n \n+        Set<PrimitiveObjectInspector.PrimitiveCategory> unsafeConventionTyps = Sets.newHashSet(\n+            PrimitiveObjectInspector.PrimitiveCategory.STRING,\n+            PrimitiveObjectInspector.PrimitiveCategory.VARCHAR,\n+            PrimitiveObjectInspector.PrimitiveCategory.CHAR);\n         // For now, if a bigint is going to be cast to a double throw an error or warning\n-        if ((oiTypeInfo0.equals(TypeInfoFactory.stringTypeInfo) && oiTypeInfo1.equals(TypeInfoFactory.longTypeInfo)) ||\n-            (oiTypeInfo0.equals(TypeInfoFactory.longTypeInfo) && oiTypeInfo1.equals(TypeInfoFactory.stringTypeInfo))) {\n+        if ((oiTypeInfo0 instanceof PrimitiveTypeInfo &&", "originalCommit": "3ca425983510ee841439e9a9dd83b6e0547501a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE1OTMzMQ==", "url": "https://github.com/apache/hive/pull/992#discussion_r414159331", "bodyText": "Move the conditions to method unSafeCompareWithBigInt.", "author": "dengzhhu653", "createdAt": "2020-04-23T22:13:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc0OTc3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc1MDgyNA==", "url": "https://github.com/apache/hive/pull/992#discussion_r413750824", "bodyText": "I don't think the type variable is needed - you could just get both types when you are generating the warning messages.", "author": "kgyrtkirk", "createdAt": "2020-04-23T11:53:40Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/parse/type/TypeCheckProcFactory.java", "diffHunk": "@@ -789,12 +791,25 @@ protected void validateUDF(ASTNode expr, boolean isFunction, TypeCheckCtx ctx, F\n \n         LogHelper console = new LogHelper(LOG);\n \n+        Set<PrimitiveObjectInspector.PrimitiveCategory> unsafeConventionTyps = Sets.newHashSet(\n+            PrimitiveObjectInspector.PrimitiveCategory.STRING,\n+            PrimitiveObjectInspector.PrimitiveCategory.VARCHAR,\n+            PrimitiveObjectInspector.PrimitiveCategory.CHAR);\n         // For now, if a bigint is going to be cast to a double throw an error or warning\n-        if ((oiTypeInfo0.equals(TypeInfoFactory.stringTypeInfo) && oiTypeInfo1.equals(TypeInfoFactory.longTypeInfo)) ||\n-            (oiTypeInfo0.equals(TypeInfoFactory.longTypeInfo) && oiTypeInfo1.equals(TypeInfoFactory.stringTypeInfo))) {\n+        if ((oiTypeInfo0 instanceof PrimitiveTypeInfo &&\n+            unsafeConventionTyps.contains(((PrimitiveTypeInfo)oiTypeInfo0).getPrimitiveCategory()) &&\n+            oiTypeInfo1.equals(TypeInfoFactory.longTypeInfo)) || (oiTypeInfo1 instanceof PrimitiveTypeInfo &&\n+            unsafeConventionTyps.contains(((PrimitiveTypeInfo)oiTypeInfo1).getPrimitiveCategory()) &&\n+            oiTypeInfo0.equals(TypeInfoFactory.longTypeInfo))) {\n           String error = StrictChecks.checkTypeSafety(conf);\n-          if (error != null) throw new UDFArgumentException(error);\n-          console.printError(\"WARNING: Comparing a bigint and a string may result in a loss of precision.\");\n+          if (error != null) {\n+            throw new UDFArgumentException(error);\n+          }\n+          String type = oiTypeInfo0.getTypeName();\n+          if (oiTypeInfo0.equals(TypeInfoFactory.longTypeInfo)) {\n+            type = oiTypeInfo1.getTypeName();\n+          }\n+          console.printError(\"WARNING: Comparing a bigint and a \" + type + \" may result in a loss of precision.\");", "originalCommit": "3ca425983510ee841439e9a9dd83b6e0547501a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkxMzAzMg==", "url": "https://github.com/apache/hive/pull/992#discussion_r413913032", "bodyText": "Yes, the variable can be removed by this way, thank you.", "author": "dengzhhu653", "createdAt": "2020-04-23T15:49:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc1MDgyNA=="}], "type": "inlineReview"}, {"oid": "10b555901bf661646ea952ba30794a99a7f7edc5", "url": "https://github.com/apache/hive/commit/10b555901bf661646ea952ba30794a99a7f7edc5", "message": "HIVE-23269. Unsafe comparing bigints and (var)chars", "committedDate": "2020-04-23T15:39:36Z", "type": "forcePushed"}, {"oid": "9641962f666dae166d763ab1970e10194c154652", "url": "https://github.com/apache/hive/commit/9641962f666dae166d763ab1970e10194c154652", "message": "HIVE-23269: Unsafe comparing bigints and chars", "committedDate": "2020-05-22T05:36:19Z", "type": "commit"}, {"oid": "9641962f666dae166d763ab1970e10194c154652", "url": "https://github.com/apache/hive/commit/9641962f666dae166d763ab1970e10194c154652", "message": "HIVE-23269: Unsafe comparing bigints and chars", "committedDate": "2020-05-22T05:36:19Z", "type": "forcePushed"}, {"oid": "2a0ff832026163b3b6e4de9956bfcbafc92075cd", "url": "https://github.com/apache/hive/commit/2a0ff832026163b3b6e4de9956bfcbafc92075cd", "message": "fix error output message that resulting to failing tests", "committedDate": "2020-05-22T22:40:18Z", "type": "commit"}, {"oid": "2a0ff832026163b3b6e4de9956bfcbafc92075cd", "url": "https://github.com/apache/hive/commit/2a0ff832026163b3b6e4de9956bfcbafc92075cd", "message": "fix error output message that resulting to failing tests", "committedDate": "2020-05-22T22:40:18Z", "type": "forcePushed"}]}