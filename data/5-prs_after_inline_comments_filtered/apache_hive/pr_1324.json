{"pr_number": 1324, "pr_title": "HIVE-23939: SharedWorkOptimizer: take the union of columns in mergeable TableScans", "pr_createdAt": "2020-07-27T16:55:14Z", "pr_url": "https://github.com/apache/hive/pull/1324", "timeline": [{"oid": "53d0f2b8c3d38a458ff7a743246ac4df8c3861b2", "url": "https://github.com/apache/hive/commit/53d0f2b8c3d38a458ff7a743246ac4df8c3861b2", "message": "HIVE-23939: SharedWorkOptimizer: take the union of columns in mergeable TableScans", "committedDate": "2020-07-29T13:56:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA0MDQ4MQ==", "url": "https://github.com/apache/hive/pull/1324#discussion_r463040481", "bodyText": "Can we move the new call before the if(pctx.getConf().getBoolVar(ConfVars.HIVE_SHARED_WORK_REUSE_MAPJOIN_CACHE)) { block? It makes sense to trigger that block at the very end in case we continue adding phases.", "author": "jcamachor", "createdAt": "2020-07-30T14:32:12Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/SharedWorkOptimizer.java", "diffHunk": "@@ -247,6 +249,18 @@ public ParseContext transform(ParseContext pctx) throws SemanticException {\n       }\n     }\n \n+    if (LOG.isDebugEnabled()) {", "originalCommit": "aa2199d2c129b8b6e7e19f00962acfa0f9eb3380", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ4Nzk0Mg==", "url": "https://github.com/apache/hive/pull/1324#discussion_r463487942", "bodyText": "fixed", "author": "kasakrisz", "createdAt": "2020-07-31T08:52:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA0MDQ4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA0MDY1OA==", "url": "https://github.com/apache/hive/pull/1324#discussion_r463040658", "bodyText": "Can we put this additional step under a new flag (true by default)?", "author": "jcamachor", "createdAt": "2020-07-30T14:32:28Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/SharedWorkOptimizer.java", "diffHunk": "@@ -247,6 +249,18 @@ public ParseContext transform(ParseContext pctx) throws SemanticException {\n       }\n     }\n \n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Before SharedWorkOptimizer #2:\\n\" + Operator.toString(pctx.getTopOps().values()));\n+    }\n+\n+    // Execute shared work optimization\n+    new BaseSharedWorkOptimizer().sharedWorkOptimization(", "originalCommit": "aa2199d2c129b8b6e7e19f00962acfa0f9eb3380", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ4ODEzMQ==", "url": "https://github.com/apache/hive/pull/1324#discussion_r463488131", "bodyText": "fixed", "author": "kasakrisz", "createdAt": "2020-07-31T08:52:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA0MDY1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA0MTEyNA==", "url": "https://github.com/apache/hive/pull/1324#discussion_r463041124", "bodyText": "This is the same as After SharedWorkSJOptimizer, no need to print it again.", "author": "jcamachor", "createdAt": "2020-07-30T14:33:08Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/SharedWorkOptimizer.java", "diffHunk": "@@ -247,6 +249,18 @@ public ParseContext transform(ParseContext pctx) throws SemanticException {\n       }\n     }\n \n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Before SharedWorkOptimizer #2:\\n\" + Operator.toString(pctx.getTopOps().values()));", "originalCommit": "aa2199d2c129b8b6e7e19f00962acfa0f9eb3380", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ4ODIyMg==", "url": "https://github.com/apache/hive/pull/1324#discussion_r463488222", "bodyText": "fixed", "author": "kasakrisz", "createdAt": "2020-07-31T08:52:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA0MTEyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA0MTczOA==", "url": "https://github.com/apache/hive/pull/1324#discussion_r463041738", "bodyText": "After SharedWorkOptimizer merging TS schema?", "author": "jcamachor", "createdAt": "2020-07-30T14:33:58Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/SharedWorkOptimizer.java", "diffHunk": "@@ -247,6 +249,18 @@ public ParseContext transform(ParseContext pctx) throws SemanticException {\n       }\n     }\n \n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Before SharedWorkOptimizer #2:\\n\" + Operator.toString(pctx.getTopOps().values()));\n+    }\n+\n+    // Execute shared work optimization\n+    new BaseSharedWorkOptimizer().sharedWorkOptimization(\n+        pctx, optimizerCache, tableNameToOps, sortedTables, false);\n+\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"After SharedWorkOptimizer #2:\\n\" + Operator.toString(pctx.getTopOps().values()));", "originalCommit": "aa2199d2c129b8b6e7e19f00962acfa0f9eb3380", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ4ODMxOQ==", "url": "https://github.com/apache/hive/pull/1324#discussion_r463488319", "bodyText": "fixed", "author": "kasakrisz", "createdAt": "2020-07-31T08:52:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA0MTczOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA0MjM3Mw==", "url": "https://github.com/apache/hive/pull/1324#discussion_r463042373", "bodyText": "Can we add a clarifying comment to the new internal classes with the difference between both of them?", "author": "jcamachor", "createdAt": "2020-07-30T14:34:47Z", "path": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/SharedWorkOptimizer.java", "diffHunk": "@@ -273,258 +287,332 @@ public ParseContext transform(ParseContext pctx) throws SemanticException {\n     return pctx;\n   }\n \n-  private static boolean sharedWorkOptimization(ParseContext pctx, SharedWorkOptimizerCache optimizerCache,\n-      ArrayListMultimap<String, TableScanOperator> tableNameToOps, List<Entry<String, Long>> sortedTables,\n-      boolean removeSemijoin) throws SemanticException {\n-    // Boolean to keep track of whether this method actually merged any TS operators\n-    boolean mergedExecuted = false;\n-\n-    Multimap<String, TableScanOperator> existingOps = ArrayListMultimap.create();\n-    Set<Operator<?>> removedOps = new HashSet<>();\n-    for (Entry<String, Long> tablePair : sortedTables) {\n-      String tableName = tablePair.getKey();\n-      for (TableScanOperator discardableTsOp : tableNameToOps.get(tableName)) {\n-        if (removedOps.contains(discardableTsOp)) {\n-          LOG.debug(\"Skip {} as it has already been removed\", discardableTsOp);\n-          continue;\n-        }\n-        Collection<TableScanOperator> prevTsOps = existingOps.get(tableName);\n-        for (TableScanOperator retainableTsOp : prevTsOps) {\n-          if (removedOps.contains(retainableTsOp)) {\n-            LOG.debug(\"Skip {} as it has already been removed\", retainableTsOp);\n+  private static class BaseSharedWorkOptimizer {", "originalCommit": "aa2199d2c129b8b6e7e19f00962acfa0f9eb3380", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ4ODQwNA==", "url": "https://github.com/apache/hive/pull/1324#discussion_r463488404", "bodyText": "fixed", "author": "kasakrisz", "createdAt": "2020-07-31T08:53:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA0MjM3Mw=="}], "type": "inlineReview"}, {"oid": "f195a5435aef9bf7c13b4e68dbb0ee0664062a2d", "url": "https://github.com/apache/hive/commit/f195a5435aef9bf7c13b4e68dbb0ee0664062a2d", "message": "HIVE-23939: SharedWorkOptimizer: take the union of columns in mergeable TableScans", "committedDate": "2020-07-31T04:02:01Z", "type": "commit"}, {"oid": "d6602742be7ec984623d9dc35e1549414a393e03", "url": "https://github.com/apache/hive/commit/d6602742be7ec984623d9dc35e1549414a393e03", "message": "HIVE-23939: SharedWorkOptimizer: take the union of columns in mergeable TableScans - update q9, q64 out", "committedDate": "2020-07-31T04:02:01Z", "type": "commit"}, {"oid": "9179b150a8519baf825c0b36150488af67f57ea5", "url": "https://github.com/apache/hive/commit/9179b150a8519baf825c0b36150488af67f57ea5", "message": "HIVE-23939: SharedWorkOptimizer: take the union of columns in mergeable TableScans - address review comments", "committedDate": "2020-07-31T07:23:35Z", "type": "commit"}, {"oid": "9179b150a8519baf825c0b36150488af67f57ea5", "url": "https://github.com/apache/hive/commit/9179b150a8519baf825c0b36150488af67f57ea5", "message": "HIVE-23939: SharedWorkOptimizer: take the union of columns in mergeable TableScans - address review comments", "committedDate": "2020-07-31T07:23:35Z", "type": "forcePushed"}]}