{"pr_number": 3427, "pr_title": "[Feature][server,api,common,dao,remote] delay execution of tasks and improve some designs", "pr_createdAt": "2020-08-07T01:51:47Z", "pr_url": "https://github.com/apache/dolphinscheduler/pull/3427", "timeline": [{"oid": "823f8754fdfb8bf79d7fcbe7fc0179c338beb040", "url": "https://github.com/apache/dolphinscheduler/commit/823f8754fdfb8bf79d7fcbe7fc0179c338beb040", "message": "delay execution of tasks and improve some designs", "committedDate": "2020-08-10T09:55:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgxMTY0OA==", "url": "https://github.com/apache/dolphinscheduler/pull/3427#discussion_r467811648", "bodyText": "You cannot directly break here, please refer to #3035", "author": "CalvinKirs", "createdAt": "2020-08-10T10:21:40Z", "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/codec/NettyDecoder.java", "diffHunk": "@@ -55,15 +55,18 @@ protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) t\n             case MAGIC:\n                 checkMagic(in.readByte());\n                 checkpoint(State.COMMAND);\n+                break;\n             case COMMAND:\n                 commandHeader.setType(in.readByte());\n                 checkpoint(State.OPAQUE);\n+                break;\n             case OPAQUE:\n                 commandHeader.setOpaque(in.readLong());\n                 checkpoint(State.BODY_LENGTH);\n             case BODY_LENGTH:\n                 commandHeader.setBodyLength(in.readInt());\n                 checkpoint(State.BODY);\n+                break;", "originalCommit": "823f8754fdfb8bf79d7fcbe7fc0179c338beb040", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgxMzg1Mw==", "url": "https://github.com/apache/dolphinscheduler/pull/3427#discussion_r467813853", "bodyText": "@gabrywu gabrywu gave some suggestions, maybe you can complete it. You can refer to #2969", "author": "CalvinKirs", "createdAt": "2020-08-10T10:26:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgxMTY0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgyNjM2Mw==", "url": "https://github.com/apache/dolphinscheduler/pull/3427#discussion_r467826363", "bodyText": "You cannot directly break here, please refer to #3035\n\nI know the reason for removing break. Should I add a break at the last case? If don't do this, there will be many WARN logs that shouldn't appear in the log.", "author": "vanilla111", "createdAt": "2020-08-10T10:55:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgxMTY0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI5NjE4MA==", "url": "https://github.com/apache/dolphinscheduler/pull/3427#discussion_r468296180", "bodyText": "Of course, you can add a break at the last case.", "author": "gabrywu", "createdAt": "2020-08-11T02:51:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgxMTY0OA=="}], "type": "inlineReview"}, {"oid": "5b5e86f47c0714331714ec0d82a6e3d25b9322dd", "url": "https://github.com/apache/dolphinscheduler/commit/5b5e86f47c0714331714ec0d82a6e3d25b9322dd", "message": "delay execution of tasks and improve some designs", "committedDate": "2020-08-10T13:16:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkxMjkwMw==", "url": "https://github.com/apache/dolphinscheduler/pull/3427#discussion_r467912903", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\n          \n          \n            \n                @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\", timezone=\"GMT+8\")\n          \n      \n    \n    \n  \n\nHi,\nPlease configure checkstyle.xml and code style xml in style directory. After configure that, you can use option+command+L to automatic format the code.\nCheckstyle.xml configuration lesson: https://www.cnblogs.com/wanshi1989/p/5478050.html\ncode style xml configuration lesson: https://blog.csdn.net/qq_34579060/article/details/80100040", "author": "yangyichao-mango", "createdAt": "2020-08-10T13:43:39Z", "path": "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java", "diffHunk": "@@ -84,6 +82,12 @@\n      */\n     private ExecutionStatus state;\n \n+    /**\n+     * task first submit time\n+     */\n+    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")", "originalCommit": "5b5e86f47c0714331714ec0d82a6e3d25b9322dd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkxNTcwMw==", "url": "https://github.com/apache/dolphinscheduler/pull/3427#discussion_r467915703", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.error(\"exception\", e);\n          \n          \n            \n                            logger.error(\"delay task execution failure, the task will be executed directly.\" +\n          \n          \n            \n                            logger.error(\"exception\", e);\n          \n          \n            \n                            logger.error(\"delay task execution failure, the task will be executed directly.\" +\n          \n      \n    \n    \n  \n\nHi,\nIt will be better to combine these error log to one error log.", "author": "yangyichao-mango", "createdAt": "2020-08-10T13:47:59Z", "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/TaskExecuteThread.java", "diffHunk": "@@ -256,4 +272,60 @@ private void downloadResource(String execLocalPath,\n             }\n         }\n     }\n+\n+    /**\n+     * delay execution if needed\n+     */\n+    private void delayExecutionIfNeeded() {\n+        long remainTime = DateUtils.getRemainTime(taskExecutionContext.getFirstSubmitTime(),\n+                taskExecutionContext.getDelayTime() * 60L);\n+        logger.info(\"delay execution time: {} s\", remainTime < 0 ? 0 : remainTime);\n+        if (remainTime > 0) {\n+            try {\n+                Thread.sleep(remainTime * Constants.SLEEP_TIME_MILLIS);\n+            } catch (Exception e) {\n+                logger.error(\"exception\", e);\n+                logger.error(\"delay task execution failure, the task will be executed directly.\" +", "originalCommit": "5b5e86f47c0714331714ec0d82a6e3d25b9322dd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkxOTgyOA==", "url": "https://github.com/apache/dolphinscheduler/pull/3427#discussion_r467919828", "bodyText": "Hi~\nLooks like these files not need to be changed, you should revert these changes.\nThe same with TaskResponseService.java, TaskResponseEvent.java, TaskExecuteResponseCommand.java, BaseDataSource.java , common.properties, ZookeeperNodeManagerTest.java.", "author": "yangyichao-mango", "createdAt": "2020-08-10T13:54:13Z", "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/zk/ZKMasterClient.java", "diffHunk": "@@ -16,6 +16,9 @@\n  */\n package org.apache.dolphinscheduler.server.zk;\n \n+import java.util.Date;", "originalCommit": "5b5e86f47c0714331714ec0d82a6e3d25b9322dd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "32b16891160fddbacbf8bc59be380c80c0042f69", "url": "https://github.com/apache/dolphinscheduler/commit/32b16891160fddbacbf8bc59be380c80c0042f69", "message": "delay execution of tasks and improve some designs", "committedDate": "2020-08-11T07:48:50Z", "type": "forcePushed"}, {"oid": "aa6d9a000fac2cb10b565a99ee532555a77e709a", "url": "https://github.com/apache/dolphinscheduler/commit/aa6d9a000fac2cb10b565a99ee532555a77e709a", "message": "delay execution of tasks and improve some designs", "committedDate": "2020-08-11T08:42:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc3ODM5OQ==", "url": "https://github.com/apache/dolphinscheduler/pull/3427#discussion_r469778399", "bodyText": "what's the difference between 'submitTime' and 'firstSubmitTime'\uff1f", "author": "lenboo", "createdAt": "2020-08-13T08:18:47Z", "path": "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java", "diffHunk": "@@ -298,6 +305,14 @@ public void setState(ExecutionStatus state) {\n         this.state = state;\n     }\n \n+    public Date getFirstSubmitTime() {\n+        return firstSubmitTime;", "originalCommit": "70c77ef192005f92d0cb96643b253be5a9f20af8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYwOTQ5OA==", "url": "https://github.com/apache/dolphinscheduler/pull/3427#discussion_r470609498", "bodyText": "If a task can be retried after failure and has been delayed enough time, it will no longer enter the state of delayed execution. This attribute is used to achieve this feature.", "author": "vanilla111", "createdAt": "2020-08-14T13:02:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc3ODM5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzMDI5OA==", "url": "https://github.com/apache/dolphinscheduler/pull/3427#discussion_r470930298", "bodyText": "Hi,\nAfter this PR is merged, we can further talk about the optimize of the delayed task execution. The current implementation method is Thread.sleep()\u3002\nI personally understand that many scenarios that need to use delay should be tens of minutes or several hours. In this scenario, task threads will be occupied all the time and will not be released, which will consume a lot of resources. After this PR is merged, we can talk about the optimization. For example, we can put the delayed tasks into a deferred execution pool and have a separate thread to scan whether they can be executed, and take out the tasks to be executed.\n\n\u7b49\u8fd9\u4e2apr\u5408\u4e86\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u518d\u8ba8\u8bba\u4e0b\u628a\u5ef6\u8fdf\u7684\u4efb\u52a1\u6267\u884c\u4f18\u5316\u4e0b\uff0c\u73b0\u5728\u7684\u5b9e\u73b0\u65b9\u5f0f\u662fThread.sleep()\u3002\n\u6211\u4e2a\u4eba\u7406\u89e3\uff0c\u5f88\u591a\u9700\u8981\u7528\u5230\u5ef6\u8fdf\u7684\u573a\u666f\u5e94\u8be5\u90fd\u662f\u51e0\u5341\u5206\u949f\u6216\u8005\u51e0\u4e2a\u5c0f\u65f6\u7684\u5ef6\u8fdf\uff0c\u8fd9\u79cd\u573a\u666f\u4e0b\u4efb\u52a1\u7ebf\u7a0b\u4f1a\u4e00\u76f4\u88ab\u5360\u7528\uff0c\u5f97\u4e0d\u5230\u91ca\u653e\uff0c\u4f1a\u5bf9\u8d44\u6e90\u6d88\u8017\u5f88\u5927\u3002\u4e4b\u540e\u53ef\u4ee5\u8ba8\u8bba\u4e0b\u662f\u4e0d\u662f\u53ef\u4ee5\u628a\u5ef6\u8fdf\u6267\u884c\u7684\u4efb\u52a1\u653e\u5728\u4e00\u4e2a\u5ef6\u8fdf\u6267\u884c\u6c60\u91cc\uff0c\u5355\u72ec\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53bb\u626b\u63cf\u662f\u5426\u53ef\u4ee5\u6267\u884c\uff0c\u5c06\u9700\u8981\u6267\u884c\u7684\u4efb\u52a1\u62ff\u51fa\u6765\u8fdb\u884c\u6267\u884c\u3002\nIf you have any suggestions or questions, welcome to put forward~", "author": "yangyichao-mango", "createdAt": "2020-08-15T03:12:26Z", "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/TaskExecuteThread.java", "diffHunk": "@@ -256,4 +275,59 @@ private void downloadResource(String execLocalPath,\n             }\n         }\n     }\n+\n+    /**\n+     * delay execution if needed\n+     */\n+    private void delayExecutionIfNeeded() {\n+        long remainTime = DateUtils.getRemainTime(taskExecutionContext.getFirstSubmitTime(),\n+                taskExecutionContext.getDelayTime() * 60L);\n+        logger.info(\"delay execution time: {} s\", remainTime < 0 ? 0 : remainTime);\n+        if (remainTime > 0) {\n+            try {\n+                Thread.sleep(remainTime * Constants.SLEEP_TIME_MILLIS);", "originalCommit": "70c77ef192005f92d0cb96643b253be5a9f20af8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzNDk3Nw==", "url": "https://github.com/apache/dolphinscheduler/pull/3427#discussion_r470934977", "bodyText": "This is indeed a good suggestion, and I have a preliminary idea for its realization. I will start to implement it immediately after I complete another feature.", "author": "vanilla111", "createdAt": "2020-08-15T04:12:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzMDI5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzMDc5Nw==", "url": "https://github.com/apache/dolphinscheduler/pull/3427#discussion_r470930797", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\n          \n          \n            \n                @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\", timezone=\"GMT+8\")", "author": "yangyichao-mango", "createdAt": "2020-08-15T03:18:49Z", "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/entity/TaskExecutionContext.java", "diffHunk": "@@ -42,6 +43,12 @@\n      */\n     private String taskName;\n \n+    /**\n+     *  task first submit time\n+     */\n+    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")", "originalCommit": "70c77ef192005f92d0cb96643b253be5a9f20af8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzNTA4Ng==", "url": "https://github.com/apache/dolphinscheduler/pull/3427#discussion_r470935086", "bodyText": "I will modify it now.", "author": "vanilla111", "createdAt": "2020-08-15T04:13:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzMDc5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzMTQzNg==", "url": "https://github.com/apache/dolphinscheduler/pull/3427#discussion_r470931436", "bodyText": "Delete unused function, or you can check whether there is the unreleased resources(eg. Unreleased thread poll) in tests that can be released in this fucntion.\n\n\u5220\u9664\u6ca1\u6709\u7528\u5230\u7684function\uff0c\u6216\u8005\u53ef\u4ee5\u68c0\u67e5\u4e0b\u4e4b\u524d\u7684\u6d4b\u8bd5\u7528\u4f8b\u4e2d\u662f\u5426\u6709\u6ca1\u6709\u91ca\u653e\u7684\u8d44\u6e90\uff08\u6bd4\u5982\u6ca1\u6709\u5173\u95ed\u7684\u7ebf\u7a0b\u6c60\uff09\uff0c\u53ef\u4ee5\u5728\u8fd9\u4e2a\u65b9\u6cd5\u4e2d\u91ca\u653e\u8d44\u6e90\u3002", "author": "yangyichao-mango", "createdAt": "2020-08-15T03:26:35Z", "path": "dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/runner/TaskExecuteThreadTest.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.server.worker.runner;\n+\n+import java.util.Date;\n+\n+import org.apache.dolphinscheduler.common.enums.ExecutionStatus;\n+import org.apache.dolphinscheduler.common.model.TaskNode;\n+import org.apache.dolphinscheduler.common.task.AbstractParameters;\n+import org.apache.dolphinscheduler.common.utils.CommonUtils;\n+import org.apache.dolphinscheduler.common.utils.JSONUtils;\n+import org.apache.dolphinscheduler.common.utils.LoggerUtils;\n+import org.apache.dolphinscheduler.remote.command.Command;\n+import org.apache.dolphinscheduler.remote.command.TaskExecuteAckCommand;\n+import org.apache.dolphinscheduler.remote.command.TaskExecuteResponseCommand;\n+import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;\n+import org.apache.dolphinscheduler.server.worker.cache.impl.TaskExecutionContextCacheManagerImpl;\n+import org.apache.dolphinscheduler.server.worker.processor.TaskCallbackService;\n+import org.apache.dolphinscheduler.server.worker.task.AbstractTask;\n+import org.apache.dolphinscheduler.server.worker.task.TaskManager;\n+import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * test task execute thread\n+ */\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({TaskManager.class, JSONUtils.class, CommonUtils.class, SpringApplicationContext.class})\n+public class TaskExecuteThreadTest {\n+\n+    private TaskExecutionContext taskExecutionContext;\n+\n+    private TaskCallbackService taskCallbackService;\n+\n+    private Command ackCommand;\n+\n+    private Command responseCommand;\n+\n+    private Logger taskLogger;\n+\n+    private TaskExecutionContextCacheManagerImpl taskExecutionContextCacheManager;\n+\n+    @Before\n+    public void before() {\n+        // init task execution context, logger\n+        taskExecutionContext = new TaskExecutionContext();\n+        taskExecutionContext.setProcessId(12345);\n+        taskExecutionContext.setProcessDefineId(1);\n+        taskExecutionContext.setProcessInstanceId(1);\n+        taskExecutionContext.setTaskInstanceId(1);\n+        taskExecutionContext.setTaskType(\"\");\n+        taskExecutionContext.setFirstSubmitTime(new Date());\n+        taskExecutionContext.setDelayTime(0);\n+        taskExecutionContext.setLogPath(\"/tmp/test.log\");\n+        taskExecutionContext.setHost(\"localhost\");\n+        taskExecutionContext.setExecutePath(\"/tmp/dolphinscheduler/exec/process/1/2/3/4\");\n+\n+        ackCommand = new TaskExecuteAckCommand().convert2Command();\n+        responseCommand = new TaskExecuteResponseCommand(taskExecutionContext.getTaskInstanceId()).convert2Command();\n+\n+        taskLogger = LoggerFactory.getLogger(LoggerUtils.buildTaskId(\n+                LoggerUtils.TASK_LOGGER_INFO_PREFIX,\n+                taskExecutionContext.getProcessDefineId(),\n+                taskExecutionContext.getProcessInstanceId(),\n+                taskExecutionContext.getTaskInstanceId()\n+        ));\n+\n+        taskExecutionContextCacheManager = new TaskExecutionContextCacheManagerImpl();\n+        taskExecutionContextCacheManager.cacheTaskExecutionContext(taskExecutionContext);\n+\n+        taskCallbackService = PowerMockito.mock(TaskCallbackService.class);\n+        PowerMockito.doNothing().when(taskCallbackService).sendAck(taskExecutionContext.getTaskInstanceId(), ackCommand);\n+        PowerMockito.doNothing().when(taskCallbackService).sendResult(taskExecutionContext.getTaskInstanceId(), responseCommand);\n+\n+        PowerMockito.mockStatic(SpringApplicationContext.class);\n+        PowerMockito.when(SpringApplicationContext.getBean(TaskExecutionContextCacheManagerImpl.class))\n+                .thenReturn(taskExecutionContextCacheManager);\n+\n+        PowerMockito.mockStatic(TaskManager.class);\n+        PowerMockito.when(TaskManager.newTask(taskExecutionContext, taskLogger))\n+                .thenReturn(new SimpleTask(taskExecutionContext, taskLogger));\n+\n+        PowerMockito.mockStatic(JSONUtils.class);\n+        PowerMockito.when(JSONUtils.parseObject(taskExecutionContext.getTaskJson(), TaskNode.class))\n+                .thenReturn(new TaskNode());\n+\n+        PowerMockito.mockStatic(CommonUtils.class);\n+        PowerMockito.when(CommonUtils.getSystemEnvPath()).thenReturn(\"/user_home/.bash_profile\");\n+    }\n+\n+    @Test\n+    public void testNormalExecution() {\n+        taskExecutionContext.setTaskType(\"SQL\");\n+        taskExecutionContext.setStartTime(new Date());\n+        taskExecutionContext.setCurrentExecutionStatus(ExecutionStatus.RUNNING_EXECUTION);\n+        TaskExecuteThread taskExecuteThread = new TaskExecuteThread(taskExecutionContext, taskCallbackService, taskLogger);\n+        taskExecuteThread.run();\n+\n+        Assert.assertEquals(ExecutionStatus.SUCCESS, taskExecutionContext.getCurrentExecutionStatus());\n+    }\n+\n+    @Test\n+    public void testDelayExecution() {\n+        taskExecutionContext.setTaskType(\"PYTHON\");\n+        taskExecutionContext.setStartTime(null);\n+        taskExecutionContext.setDelayTime(1);\n+        taskExecutionContext.setCurrentExecutionStatus(ExecutionStatus.DELAY_EXECUTION);\n+        TaskExecuteThread taskExecuteThread = new TaskExecuteThread(taskExecutionContext, taskCallbackService, taskLogger);\n+        taskExecuteThread.run();\n+\n+        Assert.assertEquals(ExecutionStatus.SUCCESS, taskExecutionContext.getCurrentExecutionStatus());\n+    }\n+\n+    @After\n+    public void after() throws Exception {\n+        //\n+    }", "originalCommit": "70c77ef192005f92d0cb96643b253be5a9f20af8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzNTA0Nw==", "url": "https://github.com/apache/dolphinscheduler/pull/3427#discussion_r470935047", "bodyText": "OK, I got it.", "author": "vanilla111", "createdAt": "2020-08-15T04:12:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzMTQzNg=="}], "type": "inlineReview"}, {"oid": "472250085a052dcb4ee32b4e27a1ec8d5e42bc2b", "url": "https://github.com/apache/dolphinscheduler/commit/472250085a052dcb4ee32b4e27a1ec8d5e42bc2b", "message": "delay execution of tasks and improve some designs", "committedDate": "2020-08-15T04:48:13Z", "type": "forcePushed"}, {"oid": "ba4dfe2e282d4e9264bb3a7e5fee222f8c1cd459", "url": "https://github.com/apache/dolphinscheduler/commit/ba4dfe2e282d4e9264bb3a7e5fee222f8c1cd459", "message": "delay execution of tasks and improve some designs", "committedDate": "2020-08-16T04:51:42Z", "type": "forcePushed"}, {"oid": "c74fd8d6dbda57f010c7c615a31869c93c58d210", "url": "https://github.com/apache/dolphinscheduler/commit/c74fd8d6dbda57f010c7c615a31869c93c58d210", "message": "format code", "committedDate": "2020-08-16T09:53:18Z", "type": "forcePushed"}, {"oid": "baf32af6ef62928b5c4d1a88f1215e50ef205e4b", "url": "https://github.com/apache/dolphinscheduler/commit/baf32af6ef62928b5c4d1a88f1215e50ef205e4b", "message": "delay execution of tasks and improve some designs", "committedDate": "2020-08-16T11:15:32Z", "type": "forcePushed"}, {"oid": "bf495b6236928654349b7f0500c92d595a158311", "url": "https://github.com/apache/dolphinscheduler/commit/bf495b6236928654349b7f0500c92d595a158311", "message": "delay execution of tasks and improve some designs", "committedDate": "2020-08-16T11:47:30Z", "type": "forcePushed"}, {"oid": "831aaa2f5cdfcd37f2a3c4630d4821cb9e9737bd", "url": "https://github.com/apache/dolphinscheduler/commit/831aaa2f5cdfcd37f2a3c4630d4821cb9e9737bd", "message": "delay execution of tasks and improve some designs", "committedDate": "2020-08-16T12:31:17Z", "type": "forcePushed"}, {"oid": "27e933216b3203be0a2220234941b3cb7a08c2a5", "url": "https://github.com/apache/dolphinscheduler/commit/27e933216b3203be0a2220234941b3cb7a08c2a5", "message": "delay execution of tasks and improve some designs", "committedDate": "2020-08-16T12:38:35Z", "type": "commit"}, {"oid": "27e933216b3203be0a2220234941b3cb7a08c2a5", "url": "https://github.com/apache/dolphinscheduler/commit/27e933216b3203be0a2220234941b3cb7a08c2a5", "message": "delay execution of tasks and improve some designs", "committedDate": "2020-08-16T12:38:35Z", "type": "forcePushed"}]}