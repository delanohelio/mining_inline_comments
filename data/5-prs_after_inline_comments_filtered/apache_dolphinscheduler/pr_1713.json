{"pr_number": 1713, "pr_title": "Refactor alert template", "pr_createdAt": "2020-01-04T14:24:33Z", "pr_url": "https://github.com/apache/dolphinscheduler/pull/1713", "timeline": [{"oid": "ce150860adb4a958e2f3dd72e597ad27680f4a0c", "url": "https://github.com/apache/dolphinscheduler/commit/ce150860adb4a958e2f3dd72e597ad27680f4a0c", "message": "Merge remote-tracking branch 'upstream/dev' into dev", "committedDate": "2020-01-02T09:39:07Z", "type": "commit"}, {"oid": "96b73174dd7676573f3528f4049d5d9dfc2d265e", "url": "https://github.com/apache/dolphinscheduler/commit/96b73174dd7676573f3528f4049d5d9dfc2d265e", "message": "Merge remote-tracking branch 'upstream/dev' into dev", "committedDate": "2020-01-03T02:48:16Z", "type": "commit"}, {"oid": "57c33bedb18c1b8f5aeffc628d8292328f556323", "url": "https://github.com/apache/dolphinscheduler/commit/57c33bedb18c1b8f5aeffc628d8292328f556323", "message": "Merge remote-tracking branch 'upstream/dev' into dev", "committedDate": "2020-01-03T12:09:38Z", "type": "commit"}, {"oid": "7bc128e85c17a056b9b23f26c4bd6d144607a40a", "url": "https://github.com/apache/dolphinscheduler/commit/7bc128e85c17a056b9b23f26c4bd6d144607a40a", "message": "refactor Alert Template", "committedDate": "2020-01-03T12:36:59Z", "type": "commit"}, {"oid": "2b6b48ca2c2352daca7645fa3c39717ce7a79f01", "url": "https://github.com/apache/dolphinscheduler/commit/2b6b48ca2c2352daca7645fa3c39717ce7a79f01", "message": "refactor alert template(remove freemarker)", "committedDate": "2020-01-04T13:55:23Z", "type": "commit"}, {"oid": "3ad45979481dedcd551dfa8478d5eb0bbce5ba2f", "url": "https://github.com/apache/dolphinscheduler/commit/3ad45979481dedcd551dfa8478d5eb0bbce5ba2f", "message": "add license", "committedDate": "2020-01-04T14:34:04Z", "type": "commit"}, {"oid": "1727a5357f7d56980d7676fddd7a93ac7a43018a", "url": "https://github.com/apache/dolphinscheduler/commit/1727a5357f7d56980d7676fddd7a93ac7a43018a", "message": "update abstract class to interface", "committedDate": "2020-01-05T01:14:33Z", "type": "commit"}, {"oid": "29a1f2212afe6b12028100933bcf75e2ac3d72be", "url": "https://github.com/apache/dolphinscheduler/commit/29a1f2212afe6b12028100933bcf75e2ac3d72be", "message": "Merge remote-tracking branch 'upstream/dev' into refactorAlertTemplate", "committedDate": "2020-01-05T01:31:20Z", "type": "commit"}, {"oid": "443c98b87f3b0e6ef3c20ede4e82fae312434a86", "url": "https://github.com/apache/dolphinscheduler/commit/443c98b87f3b0e6ef3c20ede4e82fae312434a86", "message": "make test into root pom", "committedDate": "2020-01-05T01:40:57Z", "type": "commit"}, {"oid": "7404dbc68070465df50a796f22d9e942400769ed", "url": "https://github.com/apache/dolphinscheduler/commit/7404dbc68070465df50a796f22d9e942400769ed", "message": "fix powermock static", "committedDate": "2020-01-05T01:59:16Z", "type": "commit"}, {"oid": "0a6d8d31852dcd4624425cb088c24e27fa6fe0fe", "url": "https://github.com/apache/dolphinscheduler/commit/0a6d8d31852dcd4624425cb088c24e27fa6fe0fe", "message": "fix powermock static", "committedDate": "2020-01-05T02:22:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3NzE4Ng==", "url": "https://github.com/apache/dolphinscheduler/pull/1713#discussion_r363077186", "bodyText": "using IllegalArgumentException .\nNo need to create a new exception", "author": "Technoboy-", "createdAt": "2020-01-05T08:27:10Z", "path": "dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/template/impl/DefaultHTMLTemplate.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dolphinscheduler.alert.template.impl;\n+\n+import org.apache.dolphinscheduler.alert.exception.NotSupportOperatorException;\n+import org.apache.dolphinscheduler.alert.template.AlertTemplate;\n+import org.apache.dolphinscheduler.alert.utils.Constants;\n+import org.apache.dolphinscheduler.alert.utils.JSONUtils;\n+import org.apache.dolphinscheduler.alert.utils.MailUtils;\n+import org.apache.dolphinscheduler.common.enums.ShowType;\n+import org.apache.dolphinscheduler.common.utils.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.*;\n+\n+import static org.apache.dolphinscheduler.common.utils.Preconditions.*;\n+\n+/**\n+ * the default html alert message template\n+ */\n+public class DefaultHTMLTemplate implements AlertTemplate {\n+\n+    public static final Logger logger = LoggerFactory.getLogger(DefaultHTMLTemplate.class);\n+\n+    @Override\n+    public String getMessageFromTemplate(String content, ShowType showType,boolean showAll) {\n+\n+        switch (showType){\n+            case TABLE:\n+                return getTableTypeMessage(content,showAll);\n+            case TEXT:\n+                return getTextTypeMessage(content,showAll);\n+            default:\n+                logger.error(\"not support showType: {} in DefaultHTMLTemplate\",showType);\n+                throw new NotSupportOperatorException(String.format(\"not support showType: %s in DefaultHTMLTemplate\",showType));", "originalCommit": "0a6d8d31852dcd4624425cb088c24e27fa6fe0fe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3NzIxOQ==", "url": "https://github.com/apache/dolphinscheduler/pull/1713#discussion_r363077219", "bodyText": "No need to throw RuntimeException", "author": "Technoboy-", "createdAt": "2020-01-05T08:27:57Z", "path": "dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/template/AlertTemplateFactory.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dolphinscheduler.alert.template;\n+\n+import org.apache.dolphinscheduler.alert.exception.NotSupportOperatorException;\n+import org.apache.dolphinscheduler.alert.template.impl.DefaultHTMLTemplate;\n+import org.apache.dolphinscheduler.alert.utils.Constants;\n+import org.apache.dolphinscheduler.alert.utils.PropertyUtils;\n+import org.apache.dolphinscheduler.common.utils.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * the alert template factory\n+ */\n+public class AlertTemplateFactory {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(AlertTemplateFactory.class);\n+\n+    private static final String alertTemplate = PropertyUtils.getString(Constants.ALERT_TEMPLATE);\n+\n+    private AlertTemplateFactory(){}\n+\n+    /**\n+     * get a template from alert.properties conf file\n+     * @return a template, default is DefaultHTMLTemplate\n+     * @throws NotSupportOperatorException\n+     */\n+    public static AlertTemplate getMessageTemplate() throws NotSupportOperatorException {", "originalCommit": "0a6d8d31852dcd4624425cb088c24e27fa6fe0fe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3NzIzMQ==", "url": "https://github.com/apache/dolphinscheduler/pull/1713#discussion_r363077231", "bodyText": "using IllegalArgumentException", "author": "Technoboy-", "createdAt": "2020-01-05T08:28:14Z", "path": "dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/template/AlertTemplateFactory.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dolphinscheduler.alert.template;\n+\n+import org.apache.dolphinscheduler.alert.exception.NotSupportOperatorException;\n+import org.apache.dolphinscheduler.alert.template.impl.DefaultHTMLTemplate;\n+import org.apache.dolphinscheduler.alert.utils.Constants;\n+import org.apache.dolphinscheduler.alert.utils.PropertyUtils;\n+import org.apache.dolphinscheduler.common.utils.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * the alert template factory\n+ */\n+public class AlertTemplateFactory {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(AlertTemplateFactory.class);\n+\n+    private static final String alertTemplate = PropertyUtils.getString(Constants.ALERT_TEMPLATE);\n+\n+    private AlertTemplateFactory(){}\n+\n+    /**\n+     * get a template from alert.properties conf file\n+     * @return a template, default is DefaultHTMLTemplate\n+     * @throws NotSupportOperatorException\n+     */\n+    public static AlertTemplate getMessageTemplate() throws NotSupportOperatorException {\n+\n+        if(StringUtils.isEmpty(alertTemplate)){\n+            return new DefaultHTMLTemplate();\n+        }\n+\n+        switch (alertTemplate){\n+            case \"html\":\n+                return new DefaultHTMLTemplate();\n+            default:\n+                logger.error(\"not support alert template: {}\",alertTemplate);\n+                throw new NotSupportOperatorException(String.format(\"not support alert template: %s\",alertTemplate));", "originalCommit": "0a6d8d31852dcd4624425cb088c24e27fa6fe0fe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3NzM5Mw==", "url": "https://github.com/apache/dolphinscheduler/pull/1713#discussion_r363077393", "bodyText": "\"return content\" is better here", "author": "Technoboy-", "createdAt": "2020-01-05T08:31:23Z", "path": "dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/template/impl/DefaultHTMLTemplate.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dolphinscheduler.alert.template.impl;\n+\n+import org.apache.dolphinscheduler.alert.exception.NotSupportOperatorException;\n+import org.apache.dolphinscheduler.alert.template.AlertTemplate;\n+import org.apache.dolphinscheduler.alert.utils.Constants;\n+import org.apache.dolphinscheduler.alert.utils.JSONUtils;\n+import org.apache.dolphinscheduler.alert.utils.MailUtils;\n+import org.apache.dolphinscheduler.common.enums.ShowType;\n+import org.apache.dolphinscheduler.common.utils.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.*;\n+\n+import static org.apache.dolphinscheduler.common.utils.Preconditions.*;\n+\n+/**\n+ * the default html alert message template\n+ */\n+public class DefaultHTMLTemplate implements AlertTemplate {\n+\n+    public static final Logger logger = LoggerFactory.getLogger(DefaultHTMLTemplate.class);\n+\n+    @Override\n+    public String getMessageFromTemplate(String content, ShowType showType,boolean showAll) {\n+\n+        switch (showType){\n+            case TABLE:\n+                return getTableTypeMessage(content,showAll);\n+            case TEXT:\n+                return getTextTypeMessage(content,showAll);\n+            default:\n+                logger.error(\"not support showType: {} in DefaultHTMLTemplate\",showType);\n+                throw new NotSupportOperatorException(String.format(\"not support showType: %s in DefaultHTMLTemplate\",showType));\n+        }\n+    }\n+\n+    /**\n+     * get alert message which type is TABLE\n+     * @param content message content\n+     * @param showAll weather to show all\n+     * @return alert message\n+     */\n+    private String getTableTypeMessage(String content,boolean showAll){\n+\n+        if (StringUtils.isNotEmpty(content)){\n+            List<LinkedHashMap> mapItemsList = JSONUtils.toList(content, LinkedHashMap.class);\n+\n+            if(!showAll && mapItemsList.size() > Constants.NUMBER_1000){\n+                mapItemsList = mapItemsList.subList(0,Constants.NUMBER_1000);\n+            }\n+\n+            StringBuilder contents = new StringBuilder(200);\n+\n+            boolean flag = true;\n+\n+            String title = \"\";\n+            for (LinkedHashMap mapItems : mapItemsList){\n+\n+                Set<Map.Entry<String, Object>> entries = mapItems.entrySet();\n+\n+                Iterator<Map.Entry<String, Object>> iterator = entries.iterator();\n+\n+                StringBuilder t = new StringBuilder(Constants.TR);\n+                StringBuilder cs = new StringBuilder(Constants.TR);\n+                while (iterator.hasNext()){\n+\n+                    Map.Entry<String, Object> entry = iterator.next();\n+                    t.append(Constants.TH).append(entry.getKey()).append(Constants.TH_END);\n+                    cs.append(Constants.TD).append(String.valueOf(entry.getValue())).append(Constants.TD_END);\n+\n+                }\n+                t.append(Constants.TR_END);\n+                cs.append(Constants.TR_END);\n+                if (flag){\n+                    title = t.toString();\n+                }\n+                flag = false;\n+                contents.append(cs);\n+            }\n+\n+            return getMessageFromHtmlTemplate(title,contents.toString());\n+        }\n+\n+        return null;\n+    }\n+\n+    /**\n+     * get alert message which type is TEXT\n+     * @param content message content\n+     * @param showAll weather to show all\n+     * @return alert message\n+     */\n+    private String getTextTypeMessage(String content,boolean showAll){\n+\n+        if (StringUtils.isNotEmpty(content)){\n+            List<String> list;\n+            try {\n+                list = JSONUtils.toList(content,String.class);\n+            }catch (Exception e){\n+                logger.error(\"json format exception\",e);\n+                return null;\n+            }\n+\n+            StringBuilder contents = new StringBuilder(100);\n+            for (String str : list){\n+                contents.append(Constants.TR);\n+                contents.append(Constants.TD).append(str).append(Constants.TD_END);\n+                contents.append(Constants.TR_END);\n+            }\n+\n+            return getMessageFromHtmlTemplate(null,contents.toString());\n+\n+        }\n+\n+        return null;", "originalCommit": "0a6d8d31852dcd4624425cb088c24e27fa6fe0fe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3NzQyOA==", "url": "https://github.com/apache/dolphinscheduler/pull/1713#discussion_r363077428", "bodyText": "\"return content\" is better here . even though it's the same", "author": "Technoboy-", "createdAt": "2020-01-05T08:31:52Z", "path": "dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/template/impl/DefaultHTMLTemplate.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dolphinscheduler.alert.template.impl;\n+\n+import org.apache.dolphinscheduler.alert.exception.NotSupportOperatorException;\n+import org.apache.dolphinscheduler.alert.template.AlertTemplate;\n+import org.apache.dolphinscheduler.alert.utils.Constants;\n+import org.apache.dolphinscheduler.alert.utils.JSONUtils;\n+import org.apache.dolphinscheduler.alert.utils.MailUtils;\n+import org.apache.dolphinscheduler.common.enums.ShowType;\n+import org.apache.dolphinscheduler.common.utils.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.*;\n+\n+import static org.apache.dolphinscheduler.common.utils.Preconditions.*;\n+\n+/**\n+ * the default html alert message template\n+ */\n+public class DefaultHTMLTemplate implements AlertTemplate {\n+\n+    public static final Logger logger = LoggerFactory.getLogger(DefaultHTMLTemplate.class);\n+\n+    @Override\n+    public String getMessageFromTemplate(String content, ShowType showType,boolean showAll) {\n+\n+        switch (showType){\n+            case TABLE:\n+                return getTableTypeMessage(content,showAll);\n+            case TEXT:\n+                return getTextTypeMessage(content,showAll);\n+            default:\n+                logger.error(\"not support showType: {} in DefaultHTMLTemplate\",showType);\n+                throw new NotSupportOperatorException(String.format(\"not support showType: %s in DefaultHTMLTemplate\",showType));\n+        }\n+    }\n+\n+    /**\n+     * get alert message which type is TABLE\n+     * @param content message content\n+     * @param showAll weather to show all\n+     * @return alert message\n+     */\n+    private String getTableTypeMessage(String content,boolean showAll){\n+\n+        if (StringUtils.isNotEmpty(content)){\n+            List<LinkedHashMap> mapItemsList = JSONUtils.toList(content, LinkedHashMap.class);\n+\n+            if(!showAll && mapItemsList.size() > Constants.NUMBER_1000){\n+                mapItemsList = mapItemsList.subList(0,Constants.NUMBER_1000);\n+            }\n+\n+            StringBuilder contents = new StringBuilder(200);\n+\n+            boolean flag = true;\n+\n+            String title = \"\";\n+            for (LinkedHashMap mapItems : mapItemsList){\n+\n+                Set<Map.Entry<String, Object>> entries = mapItems.entrySet();\n+\n+                Iterator<Map.Entry<String, Object>> iterator = entries.iterator();\n+\n+                StringBuilder t = new StringBuilder(Constants.TR);\n+                StringBuilder cs = new StringBuilder(Constants.TR);\n+                while (iterator.hasNext()){\n+\n+                    Map.Entry<String, Object> entry = iterator.next();\n+                    t.append(Constants.TH).append(entry.getKey()).append(Constants.TH_END);\n+                    cs.append(Constants.TD).append(String.valueOf(entry.getValue())).append(Constants.TD_END);\n+\n+                }\n+                t.append(Constants.TR_END);\n+                cs.append(Constants.TR_END);\n+                if (flag){\n+                    title = t.toString();\n+                }\n+                flag = false;\n+                contents.append(cs);\n+            }\n+\n+            return getMessageFromHtmlTemplate(title,contents.toString());\n+        }\n+\n+        return null;", "originalCommit": "0a6d8d31852dcd4624425cb088c24e27fa6fe0fe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3NzY3Mw==", "url": "https://github.com/apache/dolphinscheduler/pull/1713#discussion_r363077673", "bodyText": "no need to log, just throw exception is enough", "author": "Technoboy-", "createdAt": "2020-01-05T08:37:12Z", "path": "dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/template/impl/DefaultHTMLTemplate.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dolphinscheduler.alert.template.impl;\n+\n+import org.apache.dolphinscheduler.alert.exception.NotSupportOperatorException;\n+import org.apache.dolphinscheduler.alert.template.AlertTemplate;\n+import org.apache.dolphinscheduler.alert.utils.Constants;\n+import org.apache.dolphinscheduler.alert.utils.JSONUtils;\n+import org.apache.dolphinscheduler.alert.utils.MailUtils;\n+import org.apache.dolphinscheduler.common.enums.ShowType;\n+import org.apache.dolphinscheduler.common.utils.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.*;\n+\n+import static org.apache.dolphinscheduler.common.utils.Preconditions.*;\n+\n+/**\n+ * the default html alert message template\n+ */\n+public class DefaultHTMLTemplate implements AlertTemplate {\n+\n+    public static final Logger logger = LoggerFactory.getLogger(DefaultHTMLTemplate.class);\n+\n+    @Override\n+    public String getMessageFromTemplate(String content, ShowType showType,boolean showAll) {\n+\n+        switch (showType){\n+            case TABLE:\n+                return getTableTypeMessage(content,showAll);\n+            case TEXT:\n+                return getTextTypeMessage(content,showAll);\n+            default:\n+                logger.error(\"not support showType: {} in DefaultHTMLTemplate\",showType);", "originalCommit": "0a6d8d31852dcd4624425cb088c24e27fa6fe0fe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "160ff37546a1b20ace58bfe678709ee9f04b07cc", "url": "https://github.com/apache/dolphinscheduler/commit/160ff37546a1b20ace58bfe678709ee9f04b07cc", "message": "remove custom exception", "committedDate": "2020-01-05T09:51:11Z", "type": "commit"}, {"oid": "5c313eb7857affd9106802087e0769c45f617f2a", "url": "https://github.com/apache/dolphinscheduler/commit/5c313eb7857affd9106802087e0769c45f617f2a", "message": "remove custom exception", "committedDate": "2020-01-05T09:57:16Z", "type": "commit"}]}