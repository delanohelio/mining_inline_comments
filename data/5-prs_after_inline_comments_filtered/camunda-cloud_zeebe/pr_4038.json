{"pr_number": 4038, "pr_title": "chore(broker): Replace GSON with Jackson in BrokerCfg and GatewayCfg", "pr_createdAt": "2020-03-11T12:20:17Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/4038", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjgyNzc0MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4038#discussion_r392827740", "bodyText": "Wouldn't it be better if duration is serialized to readable format like \"30s\"?", "author": "deepthidevaki", "createdAt": "2020-03-16T07:28:49Z", "path": "util/src/test/java/io/zeebe/util/ObjectWriterFactoryTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.util;\n+\n+import static io.zeebe.util.ObjectWriterFactory.getDefaultJsonObjectWriter;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.fail;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.junit.Test;\n+import org.springframework.util.unit.DataSize;\n+\n+public class ObjectWriterFactoryTest {\n+\n+  @Test\n+  public void shouldReturnNonNullDefaultObjectWriter() {\n+    // when\n+    final ObjectWriter actual = getDefaultJsonObjectWriter();\n+\n+    // then\n+    assertThat(actual).isNotNull();\n+  }\n+\n+  @Test\n+  public void shouldReturnObjectWriterWithPrettyPrintingEnabled() {\n+    // given\n+    final Map<String, String> objectToSerialize = new HashMap<>();\n+    objectToSerialize.put(\"field1\", \"value1\");\n+    objectToSerialize.put(\"field2\", \"value2\");\n+\n+    String actual;\n+    // when\n+    try {\n+      actual = getDefaultJsonObjectWriter().writeValueAsString(objectToSerialize);\n+    } catch (JsonProcessingException e) {\n+      fail(e.getMessage());\n+      actual = \"\";\n+    }\n+\n+    // then\n+    assertThat(actual)\n+        .withFailMessage(\"Should be pretty printed and therefore contain line breaks\")\n+        .contains(System.lineSeparator());\n+  }\n+\n+  @Test\n+  public void shouldReturnObjectWriterThatWritesDurationAsNumberInSeconds() {\n+    // given\n+    final Duration objectToSerialize = Duration.ofSeconds(30);\n+\n+    String actual;\n+    // when\n+    try {\n+      actual = getDefaultJsonObjectWriter().writeValueAsString(objectToSerialize);\n+    } catch (JsonProcessingException e) {\n+      fail(e.getMessage());\n+      actual = \"\";\n+    }\n+\n+    // then\n+    assertThat(actual).describedAs(\"Serialized form of Duration\").isEqualTo(\"30.000000000\");", "originalCommit": "c00133e6b101a474b4ef369af0c27fef9daac677", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYxNTM3MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4038#discussion_r393615371", "bodyText": "To be honest, I am not sure. I did think about it. And I kinda weighed against it. I was very happy to find a standard implementation to serialize Durations and also other date and time formats. So I decided to use this standard implementation.\nIf I would write my own serializer, I would probably output in in ISO format (something like \"PT30S\"). I wouldn't output it as 30s, because this is very custom.\nOne insight I got from talking to Alistair of the cloud team is that hum readable has disadvantages when you want to parse such a configuration, or write such a configuration with a machine. In effect, they want to generate configurations through code. Now, I know this doesn't apply to this location very well. However, I try to strike a blance between human readable and machine readable/writable.\nHaving said all that: I can change it, if you want to. If it's just a mild preference on your part, I would probably leave it for a time being.", "author": "pihme", "createdAt": "2020-03-17T11:36:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjgyNzc0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYzNTY2Nw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4038#discussion_r393635667", "bodyText": "It is a mild preference from my side. As far as I understand this is only indented for humans to read. It is difficult for me to guess the timeout is in seconds by just reading the serialized config. We also have some other timeout config which are not duration but just long values representing milliseconds (we should probably make them consistent, out of scope for this pr). So it could be confusing.\nI saw that JavaTimeModule has a config to serialize duration into ISO format.", "author": "deepthidevaki", "createdAt": "2020-03-17T12:15:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjgyNzc0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIyMjA4Nw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4038#discussion_r394222087", "bodyText": "Good find. Changed the setting and it is now output as ISO format.", "author": "pihme", "createdAt": "2020-03-18T09:51:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjgyNzc0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIyMjQ5Nw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4038#discussion_r394222497", "bodyText": "If you want, you can look at the changes. Otherwise, I would merge it this evening.", "author": "pihme", "createdAt": "2020-03-18T09:51:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjgyNzc0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMxMDkxOA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4038#discussion_r394310918", "bodyText": "Thanks \ud83d\udc4d", "author": "deepthidevaki", "createdAt": "2020-03-18T12:31:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjgyNzc0MA=="}], "type": "inlineReview"}, {"oid": "3720a2b2846656015ae91c29c39b5dac25aa6788", "url": "https://github.com/camunda-cloud/zeebe/commit/3720a2b2846656015ae91c29c39b5dac25aa6788", "message": "chore(broker): Replace GSON with Jackson in BrokerCfg and GatewayCfg\n\nBackground:\nThe configuration objects are serialized to JSON and written to the log during startup.\nCurrently the behavior uses GSON. This is one of the few places where GSON is used.\nIn all other places we use Jackson. There is nothing special about using GSON here,\nso it can and should be replaced with Jackson.\n\nScope\n- Replace GSON with Jackson in BrokerCfg and GatewayCfg\n- Factory method for JSON object writers with custom serializers for Duration (and other Java time objects)\n  and DataSize objects\n\nOut of Scope\n\nDependency to GSON in ExporterConfiguration - the class had a low test coverage and comparing\nthe default output of GSON vs. Jackson revealed that they are not identical, so changing the\nserializer/deserializer here could alter behavior.", "committedDate": "2020-03-18T09:50:15Z", "type": "forcePushed"}, {"oid": "1c23245e8bad48968001116cc2c484bcf86fe9f6", "url": "https://github.com/camunda-cloud/zeebe/commit/1c23245e8bad48968001116cc2c484bcf86fe9f6", "message": "chore(broker): Replace GSON with Jackson in BrokerCfg and GatewayCfg\n\nBackground:\nThe configuration objects are serialized to JSON and written to the log during startup.\nCurrently the behavior uses GSON. This is one of the few places where GSON is used.\nIn all other places we use Jackson. There is nothing special about using GSON here,\nso it can and should be replaced with Jackson.\n\nScope\n- Replace GSON with Jackson in BrokerCfg and GatewayCfg\n- Factory method for JSON object writers with custom serializers for Duration (and other Java time objects)\n  and DataSize objects\n\nOut of Scope\n\nDependency to GSON in ExporterConfiguration - the class had a low test coverage and comparing\nthe default output of GSON vs. Jackson revealed that they are not identical, so changing the\nserializer/deserializer here could alter behavior.", "committedDate": "2020-03-18T10:40:56Z", "type": "commit"}, {"oid": "1c23245e8bad48968001116cc2c484bcf86fe9f6", "url": "https://github.com/camunda-cloud/zeebe/commit/1c23245e8bad48968001116cc2c484bcf86fe9f6", "message": "chore(broker): Replace GSON with Jackson in BrokerCfg and GatewayCfg\n\nBackground:\nThe configuration objects are serialized to JSON and written to the log during startup.\nCurrently the behavior uses GSON. This is one of the few places where GSON is used.\nIn all other places we use Jackson. There is nothing special about using GSON here,\nso it can and should be replaced with Jackson.\n\nScope\n- Replace GSON with Jackson in BrokerCfg and GatewayCfg\n- Factory method for JSON object writers with custom serializers for Duration (and other Java time objects)\n  and DataSize objects\n\nOut of Scope\n\nDependency to GSON in ExporterConfiguration - the class had a low test coverage and comparing\nthe default output of GSON vs. Jackson revealed that they are not identical, so changing the\nserializer/deserializer here could alter behavior.", "committedDate": "2020-03-18T10:40:56Z", "type": "forcePushed"}]}