{"pr_number": 5326, "pr_title": "Control variable propagation of call activities with new attribute", "pr_createdAt": "2020-09-10T07:13:52Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/5326", "timeline": [{"oid": "28f7dd22e636261f78b015e0a9c6d07c6443cc00", "url": "https://github.com/camunda-cloud/zeebe/commit/28f7dd22e636261f78b015e0a9c6d07c6443cc00", "message": "docs(bpmn-workflows): update call activity docs", "committedDate": "2020-09-10T07:58:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM0MjgyMw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5326#discussion_r486342823", "bodyText": "I'm not sure this if statement is correct. If there are output mappings, but the new property is disabled, then this would still propagate all temp vars.", "author": "korthout", "createdAt": "2020-09-10T13:37:23Z", "path": "engine/src/main/java/io/zeebe/engine/processing/bpmn/container/CallActivityProcessor.java", "diffHunk": "@@ -136,7 +136,12 @@ public void onChildCompleted(\n     switch (currentState) {\n       case ELEMENT_ACTIVATED:\n         stateTransitionBehavior.transitionToCompleting(callActivityContext);\n-        stateBehavior.propagateTemporaryVariables(childContext, callActivityContext);\n+\n+        if (element.getOutputMappings().isPresent()\n+            || element.isPropagateAllChildVariablesEnabled()) {", "originalCommit": "28f7dd22e636261f78b015e0a9c6d07c6443cc00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc2MDYzMg==", "url": "https://github.com/camunda-cloud/zeebe/pull/5326#discussion_r486760632", "bodyText": "Yes, it is correct \ud83d\ude05  We need to set the temp variables to apply the output mappings on completing the call activity. Since this is done in another step (i.e. when processing another record), we need to copy all variables to temp.", "author": "saig0", "createdAt": "2020-09-11T04:03:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM0MjgyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM0NDY4Mg==", "url": "https://github.com/camunda-cloud/zeebe/pull/5326#discussion_r486344682", "bodyText": "Would be good to add a test case for the following cases:\n\npropagateAllChildVariables = false && no output mappings\npropagateAllChildVariables = false && output mappings\npropagateAllChildVariables = true && no output mappings\npropagateAllChildVariables = true && output mappings", "author": "korthout", "createdAt": "2020-09-10T13:38:58Z", "path": "engine/src/test/java/io/zeebe/engine/processing/bpmn/activity/CallActivityTest.java", "diffHunk": "@@ -222,6 +222,34 @@ public void shouldPropagateVariablesToParent() {\n         .containsExactly(tuple(workflowInstanceKey, \"y\", \"2\"));\n   }\n \n+  @Test\n+  public void shouldNotPropagateVariablesToParentIfDisabled() {", "originalCommit": "28f7dd22e636261f78b015e0a9c6d07c6443cc00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc2MjI3Mw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5326#discussion_r486762273", "bodyText": "The cases are almost covered by the following tests:\n\npropagateAllChildVariables = false && no output mappings -> shouldNotPropagateVariablesToParentIfDisabled\npropagateAllChildVariables = false && output mappings -> behaves like  shouldApplyOutputMappings but we can add an additional test\npropagateAllChildVariables = true && no output mappings -> shouldPropagateVariablesToParent\npropagateAllChildVariables = true && output mappings -> shouldApplyOutputMappings", "author": "saig0", "createdAt": "2020-09-11T04:11:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM0NDY4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcxNTU4OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5326#discussion_r487715588", "bodyText": "Sorry, I did not look at the existing tests only at new code. I think it is fine like this, although I'm also fine if you add the \"propagateAllChildVariables = false && output mappings\" case explicitly.", "author": "korthout", "createdAt": "2020-09-14T07:47:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM0NDY4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM1MjU2MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5326#discussion_r486352560", "bodyText": "It might be better to use INPUT_COLLECTION.size() instead of jobCounter.get(), to make the expected part less 'dynamic'.", "author": "korthout", "createdAt": "2020-09-10T13:46:08Z", "path": "engine/src/test/java/io/zeebe/engine/processing/bpmn/multiinstance/MultiInstanceCallActivityTest.java", "diffHunk": "@@ -185,6 +195,68 @@ public void shouldCancelChildInstancesOnTermination() {\n             BpmnElementType.PROCESS);\n   }\n \n+  @Test\n+  public void shouldCollectOutputFromChildInstance() {\n+    // given\n+    final BpmnModelInstance parentWorkflow =\n+        parentWorkflowWithCallActivity(\n+            callActivity ->\n+                callActivity\n+                    .zeebeOutputExpression(\"x\", \"result\")\n+                    .multiInstance(\n+                        b ->\n+                            b.zeebeInputCollectionExpression(INPUT_COLLECTION_VARIABLE)\n+                                .zeebeOutputElementExpression(\"result\")\n+                                .zeebeOutputCollection(\"results\")));\n+\n+    ENGINE.deployment().withXmlResource(\"wf-parent.bpmn\", parentWorkflow).deploy();\n+\n+    final long workflowInstanceKey =\n+        ENGINE\n+            .workflowInstance()\n+            .ofBpmnProcessId(PROCESS_ID_PARENT)\n+            .withVariable(INPUT_COLLECTION_VARIABLE, INPUT_COLLECTION)\n+            .create();\n+\n+    // when\n+    awaitJobsCreated(INPUT_COLLECTION.size());\n+\n+    final var jobCounter = new AtomicInteger();\n+\n+    ENGINE\n+        .jobs()\n+        .withType(jobType)\n+        .activate()\n+        .getValue()\n+        .getJobKeys()\n+        .forEach(\n+            jobKey ->\n+                ENGINE\n+                    .job()\n+                    .withKey(jobKey)\n+                    .withVariable(\"x\", jobCounter.incrementAndGet())\n+                    .complete());\n+\n+    RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .withElementType(BpmnElementType.MULTI_INSTANCE_BODY)\n+        .await();\n+\n+    // then\n+    final var expectedOutputCollection =\n+        JsonUtil.toJson(\n+            IntStream.rangeClosed(1, jobCounter.get()).boxed().collect(Collectors.toList()));", "originalCommit": "28f7dd22e636261f78b015e0a9c6d07c6443cc00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc2MDc0Ng==", "url": "https://github.com/camunda-cloud/zeebe/pull/5326#discussion_r486760746", "bodyText": "Ok \ud83d\udc4d", "author": "saig0", "createdAt": "2020-09-11T04:04:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM1MjU2MA=="}], "type": "inlineReview"}, {"oid": "ec13d1bcc13b152dbf62f7da15ad14d74b054674", "url": "https://github.com/camunda-cloud/zeebe/commit/ec13d1bcc13b152dbf62f7da15ad14d74b054674", "message": "fix(engine): control variable propagation with new attribute\n\n* add a new Zeebe attribute for call activities to control if variables should be copied from a child instance\n* the new attribute is set by default to be backward-compatible and not change the existing behavior", "committedDate": "2020-09-15T06:59:42Z", "type": "commit"}, {"oid": "ec13d1bcc13b152dbf62f7da15ad14d74b054674", "url": "https://github.com/camunda-cloud/zeebe/commit/ec13d1bcc13b152dbf62f7da15ad14d74b054674", "message": "fix(engine): control variable propagation with new attribute\n\n* add a new Zeebe attribute for call activities to control if variables should be copied from a child instance\n* the new attribute is set by default to be backward-compatible and not change the existing behavior", "committedDate": "2020-09-15T06:59:42Z", "type": "forcePushed"}]}