{"pr_number": 5758, "pr_title": "Avoid deployment distribution on reprocessing", "pr_createdAt": "2020-11-04T09:56:38Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/5758", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQxMjY5OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5758#discussion_r517412698", "bodyText": "This is not really the reason right. The reason is that we will write concurrently/async a DISTRIBUTED on reprocessing which totally breaks the detection.", "author": "Zelldon", "createdAt": "2020-11-04T15:08:14Z", "path": "engine/src/main/java/io/zeebe/engine/processing/deployment/distribute/DeploymentDistributeProcessor.java", "diffHunk": "@@ -75,7 +75,13 @@ public void processRecord(\n     final DirectBuffer bufferView = new UnsafeBuffer();\n     bufferView.wrap(buffer, 0, deploymentEvent.getLength());\n \n-    distributeDeployment(key, position, bufferView, streamWriter);\n+    // don't distribute the deployment on reprocessing because it may be already distributed\n+    // instead, distribute the pending deployments after the reprocessing", "originalCommit": "3006fdc97f8dc5d8908892a6365a34df5b0cadf5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQxMjgxMQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5758#discussion_r517412811", "bodyText": "Maybe we add a link to the github issue", "author": "Zelldon", "createdAt": "2020-11-04T15:08:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQxMjY5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzc5MDI2OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5758#discussion_r517790268", "bodyText": "It is for both reasons \ud83d\ude05", "author": "saig0", "createdAt": "2020-11-05T04:47:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQxMjY5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQxODg3Mw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5758#discussion_r517418873", "bodyText": "Not sure whether this test makes still sense? But I thought maybe we can have a different test where we verify that we not call distribute on reprocessing. I have new logic where I can await reprocessing, which means we know whether before distribute was called. What do you think?", "author": "Zelldon", "createdAt": "2020-11-04T15:16:46Z", "path": "engine/src/test/java/io/zeebe/engine/processing/streamprocessor/ReprocessingIssueDetectionMultiplePartitionTest.java", "diffHunk": "@@ -83,8 +83,7 @@ public void setup() {\n   @Test\n   public void shouldIgnoreDeploymentDistribution() {\n     // given\n-    // force that a deployment DISTRIBUTED event is written on reprocessing which was not written on\n-    // the log stream before\n+    // the deployment can be distributed on reprocessing", "originalCommit": "3006fdc97f8dc5d8908892a6365a34df5b0cadf5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzc5MTUzNQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5758#discussion_r517791535", "bodyText": "I think the test still makes sense for the detection. However, I can add another that DeploymentDistributor is not called on reprocessing. Please point me to the example :)", "author": "saig0", "createdAt": "2020-11-05T04:52:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQxODg3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgyMTEzMQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5758#discussion_r517821131", "bodyText": "https://github.com/zeebe-io/zeebe/pull/5761/files#diff-b31c3c84b754243e651147040006e4acd695b0315a1f9832f63b6e20b0a3f7f3R199-R204", "author": "Zelldon", "createdAt": "2020-11-05T06:38:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQxODg3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgyMTIyMQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5758#discussion_r517821221", "bodyText": "I think we wait until this PR is merged than you can rebase", "author": "Zelldon", "createdAt": "2020-11-05T06:38:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQxODg3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU3MTI0OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5758#discussion_r520571248", "bodyText": "Ok Chris \ud83d\ude05 I rewrote the test to verify that the deployment distributor is not invoked on reprocessing. Please have a look :)", "author": "saig0", "createdAt": "2020-11-10T13:44:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQxODg3Mw=="}], "type": "inlineReview"}, {"oid": "9a31815d2695d882286d4662eb1377a1dfca83ec", "url": "https://github.com/camunda-cloud/zeebe/commit/9a31815d2695d882286d4662eb1377a1dfca83ec", "message": "chore(engine): adjust test case\n\n* verify that the deployment distributor is not invoked on reprocessing", "committedDate": "2020-11-10T13:42:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU3ODk5Mg==", "url": "https://github.com/camunda-cloud/zeebe/pull/5758#discussion_r520578992", "bodyText": "We could reset the count after verification. What do you think?", "author": "Zelldon", "createdAt": "2020-11-10T13:54:59Z", "path": "engine/src/test/java/io/zeebe/engine/processing/deployment/DeploymentReprocessingTest.java", "diffHunk": "@@ -33,82 +30,57 @@\n import org.junit.Rule;\n import org.junit.Test;\n \n-public final class ReprocessingIssueDetectionMultiplePartitionTest {\n+public final class DeploymentReprocessingTest {\n \n-  private static final int PARTITION_COUNT = 2;\n+  private static final int PARTITION_COUNT = 1;\n+  private static final int DEPLOYMENT_DISTRIBUTION_ON_PROCESSING = 1;\n \n   @Rule\n   public final RecordingExporterTestWatcher recordingExporterTestWatcher =\n       new RecordingExporterTestWatcher();\n \n   private final DeploymentDistributorMock deploymentDistributorMock =\n-      new DeploymentDistributorMock();\n+      spy(new DeploymentDistributorMock());\n \n   @Rule\n   public final EngineRule engine =\n       EngineRule.multiplePartition(PARTITION_COUNT)\n           .withDeploymentDistributor(deploymentDistributorMock);\n \n-  private long workflowInstanceKey;\n-  private Record<JobRecordValue> jobCreated;\n-\n   @Before\n   public void setup() {\n-    // avoid that a deployment is distributed\n-    deploymentDistributorMock.pushDeploymentCallback = CompletableActorFuture::new;\n+    // complete the deployment distribution immediately to write the DISTRIBUTED event\n+    deploymentDistributorMock.pushDeploymentCallback = () -> CompletableActorFuture.completed(null);\n \n     engine\n         .deployment()\n-        .withXmlResource(\n-            Bpmn.createExecutableProcess(\"process\")\n-                .startEvent()\n-                .serviceTask(\"task\", t -> t.zeebeJobType(\"test\"))\n-                .done())\n+        .withXmlResource(Bpmn.createExecutableProcess(\"process\").startEvent().done())\n         .expectCreated()\n         .deploy();\n \n-    workflowInstanceKey = engine.workflowInstance().ofBpmnProcessId(\"process\").create();\n-    jobCreated = RecordingExporter.jobRecords(JobIntent.CREATED).getFirst();\n-\n-    assertThat(\n-            RecordingExporter.records()\n-                .limit(r -> r.getPosition() > jobCreated.getPosition())\n-                .withValueType(ValueType.DEPLOYMENT))\n-        .extracting(Record::getIntent)\n-        .doesNotContain(DeploymentIntent.DISTRIBUTED);\n+    RecordingExporter.deploymentRecords(DeploymentIntent.DISTRIBUTED).await();\n \n     engine.stop();\n+\n+    // the deployment is distributed once on processing\n+    verify(deploymentDistributorMock, times(DEPLOYMENT_DISTRIBUTION_ON_PROCESSING))", "originalCommit": "9a31815d2695d882286d4662eb1377a1dfca83ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTExMjQxMg==", "url": "https://github.com/camunda-cloud/zeebe/pull/5758#discussion_r521112412", "bodyText": "Good point. I applied your hint. Please have a look \ud83d\udc40", "author": "saig0", "createdAt": "2020-11-11T04:52:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU3ODk5Mg=="}], "type": "inlineReview"}, {"oid": "2bd56018b9666eadf9d0b16f3e0addc89261b157", "url": "https://github.com/camunda-cloud/zeebe/commit/2bd56018b9666eadf9d0b16f3e0addc89261b157", "message": "fix(broker): avoid deployment distribution on reprocessing\n\n* don't distribute the deployment on reprocessing because it may be already reprocessed\n* instead, we wait until the reprocessing is done and distribute the pending deployments again", "committedDate": "2020-11-11T08:52:59Z", "type": "commit"}, {"oid": "2bd56018b9666eadf9d0b16f3e0addc89261b157", "url": "https://github.com/camunda-cloud/zeebe/commit/2bd56018b9666eadf9d0b16f3e0addc89261b157", "message": "fix(broker): avoid deployment distribution on reprocessing\n\n* don't distribute the deployment on reprocessing because it may be already reprocessed\n* instead, we wait until the reprocessing is done and distribute the pending deployments again", "committedDate": "2020-11-11T08:52:59Z", "type": "forcePushed"}]}