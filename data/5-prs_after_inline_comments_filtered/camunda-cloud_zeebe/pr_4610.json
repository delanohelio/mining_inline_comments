{"pr_number": 4610, "pr_title": "chore(broker): expose more backpressure algorithms and configurations", "pr_createdAt": "2020-05-27T08:57:02Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/4610", "timeline": [{"oid": "9e318cb92b1bf46dec5158b87eb5f42a996c6280", "url": "https://github.com/camunda-cloud/zeebe/commit/9e318cb92b1bf46dec5158b87eb5f42a996c6280", "message": "chore(broker): expose more backpressure algorithms and configurations", "committedDate": "2020-05-27T09:01:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI0Mjg3Ng==", "url": "https://github.com/camunda-cloud/zeebe/pull/4610#discussion_r431242876", "bodyText": "optional: rename to backPressureCfg", "author": "pihme", "createdAt": "2020-05-27T15:42:48Z", "path": "broker/src/main/java/io/zeebe/broker/Broker.java", "diffHunk": "@@ -242,9 +242,7 @@ private AutoCloseable commandApiHandlerStep(\n     final BackpressureCfg backpressure = brokerCfg.getBackpressure();\n     PartitionAwareRequestLimiter limiter = PartitionAwareRequestLimiter.newNoopLimiter();\n     if (backpressure.isEnabled()) {\n-      limiter =\n-          PartitionAwareRequestLimiter.newLimiter(\n-              backpressure.getAlgorithm(), backpressure.useWindowed());\n+      limiter = PartitionAwareRequestLimiter.newLimiter(backpressure);", "originalCommit": "9e318cb92b1bf46dec5158b87eb5f42a996c6280", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI0NDAyMg==", "url": "https://github.com/camunda-cloud/zeebe/pull/4610#discussion_r431244022", "bodyText": "Optional: add sanity checks to setter (e.g. timeout must be positive)\ndito for other setters in this and other classes", "author": "pihme", "createdAt": "2020-05-27T15:44:12Z", "path": "broker/src/main/java/io/zeebe/broker/system/configuration/AIMDCfg.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.configuration;\n+\n+import java.time.Duration;\n+import java.util.Objects;\n+\n+public class AIMDCfg {\n+\n+  private Duration requestTimeout = Duration.ofSeconds(1);\n+  private int initialLimit = 100;\n+  private int minLimit = 1;\n+  private int maxLimit = 1000;\n+  private double backoffRatio = 0.9;\n+\n+  public Duration getRequestTimeout() {\n+    return requestTimeout;\n+  }\n+\n+  public void setRequestTimeout(final Duration requestTimeout) {", "originalCommit": "9e318cb92b1bf46dec5158b87eb5f42a996c6280", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI0NjI1OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4610#discussion_r431246259", "bodyText": "hash code should not use non-final members; if values change the hashcode changes.\nThis causes trouble, e.g. when an object is added to a hashmap and then the hashcode changes afterwards\ndito for other hashcode methods", "author": "pihme", "createdAt": "2020-05-27T15:46:58Z", "path": "broker/src/main/java/io/zeebe/broker/system/configuration/AIMDCfg.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.configuration;\n+\n+import java.time.Duration;\n+import java.util.Objects;\n+\n+public class AIMDCfg {\n+\n+  private Duration requestTimeout = Duration.ofSeconds(1);\n+  private int initialLimit = 100;\n+  private int minLimit = 1;\n+  private int maxLimit = 1000;\n+  private double backoffRatio = 0.9;\n+\n+  public Duration getRequestTimeout() {\n+    return requestTimeout;\n+  }\n+\n+  public void setRequestTimeout(final Duration requestTimeout) {\n+    this.requestTimeout = requestTimeout;\n+  }\n+\n+  public int getInitialLimit() {\n+    return initialLimit;\n+  }\n+\n+  public void setInitialLimit(final int initialLimit) {\n+    this.initialLimit = initialLimit;\n+  }\n+\n+  public int getMinLimit() {\n+    return minLimit;\n+  }\n+\n+  public void setMinLimit(final int minLimit) {\n+    this.minLimit = minLimit;\n+  }\n+\n+  public int getMaxLimit() {\n+    return maxLimit;\n+  }\n+\n+  public void setMaxLimit(final int maxLimit) {\n+    this.maxLimit = maxLimit;\n+  }\n+\n+  public double getBackoffRatio() {\n+    return backoffRatio;\n+  }\n+\n+  public void setBackoffRatio(final double backoffRatio) {\n+    this.backoffRatio = backoffRatio;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(requestTimeout, initialLimit, minLimit, maxLimit, backoffRatio);", "originalCommit": "9e318cb92b1bf46dec5158b87eb5f42a996c6280", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwNTQ2MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4610#discussion_r432405460", "bodyText": "I removed hashcode and equals for these classes, as we don't need it.", "author": "deepthidevaki", "createdAt": "2020-05-29T10:48:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI0NjI1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI1MTA3OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4610#discussion_r431251079", "bodyText": "optional: could rewrite it with\nreturn ToStringBuilder.reflectionToString(this,ToSringStyle.SHORT_PREFIX_STYLE);\ndito for other tostring methods", "author": "pihme", "createdAt": "2020-05-27T15:53:05Z", "path": "broker/src/main/java/io/zeebe/broker/system/configuration/AIMDCfg.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.configuration;\n+\n+import java.time.Duration;\n+import java.util.Objects;\n+\n+public class AIMDCfg {\n+\n+  private Duration requestTimeout = Duration.ofSeconds(1);\n+  private int initialLimit = 100;\n+  private int minLimit = 1;\n+  private int maxLimit = 1000;\n+  private double backoffRatio = 0.9;\n+\n+  public Duration getRequestTimeout() {\n+    return requestTimeout;\n+  }\n+\n+  public void setRequestTimeout(final Duration requestTimeout) {\n+    this.requestTimeout = requestTimeout;\n+  }\n+\n+  public int getInitialLimit() {\n+    return initialLimit;\n+  }\n+\n+  public void setInitialLimit(final int initialLimit) {\n+    this.initialLimit = initialLimit;\n+  }\n+\n+  public int getMinLimit() {\n+    return minLimit;\n+  }\n+\n+  public void setMinLimit(final int minLimit) {\n+    this.minLimit = minLimit;\n+  }\n+\n+  public int getMaxLimit() {\n+    return maxLimit;\n+  }\n+\n+  public void setMaxLimit(final int maxLimit) {\n+    this.maxLimit = maxLimit;\n+  }\n+\n+  public double getBackoffRatio() {\n+    return backoffRatio;\n+  }\n+\n+  public void setBackoffRatio(final double backoffRatio) {\n+    this.backoffRatio = backoffRatio;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(requestTimeout, initialLimit, minLimit, maxLimit, backoffRatio);\n+  }\n+\n+  @Override\n+  public boolean equals(final Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    final AIMDCfg aimdCfg = (AIMDCfg) o;\n+    return initialLimit == aimdCfg.initialLimit\n+        && minLimit == aimdCfg.minLimit\n+        && maxLimit == aimdCfg.maxLimit\n+        && Double.compare(aimdCfg.backoffRatio, backoffRatio) == 0\n+        && Objects.equals(requestTimeout, aimdCfg.requestTimeout);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"AIMDCfg{\"", "originalCommit": "9e318cb92b1bf46dec5158b87eb5f42a996c6280", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwNjAyNQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4610#discussion_r432406025", "bodyText": "Other configurations use this style. So to be consistent I would prefer to keep it as it is unless we rewrite others also.", "author": "deepthidevaki", "createdAt": "2020-05-29T10:50:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI1MTA3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI1NDQ1NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4610#discussion_r431254455", "bodyText": "Will throw NPE if algorithm is null. Currently there is no guarantee that it cannot be null", "author": "pihme", "createdAt": "2020-05-27T15:57:36Z", "path": "broker/src/main/java/io/zeebe/broker/transport/backpressure/PartitionAwareRequestLimiter.java", "diffHunk": "@@ -38,24 +47,75 @@ public static PartitionAwareRequestLimiter newNoopLimiter() {\n     return new PartitionAwareRequestLimiter();\n   }\n \n-  public static PartitionAwareRequestLimiter newLimiter(\n-      final LimitAlgorithm algorithm, final boolean useWindowed) {\n+  public static PartitionAwareRequestLimiter newLimiter(BackpressureCfg backpressureCfg) {\n+    final LimitAlgorithm algorithm = backpressureCfg.getAlgorithm();\n     final Supplier<Limit> limit;\n-    if (algorithm == LimitAlgorithm.GRADIENT) {\n-      limit = GradientLimit::newDefault;\n-    } else if (algorithm == LimitAlgorithm.GRADIENT2) {\n-      limit = Gradient2Limit::newDefault;\n-    } else {\n-      limit = VegasLimit::newDefault;\n+    switch (algorithm) {", "originalCommit": "9e318cb92b1bf46dec5158b87eb5f42a996c6280", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwNjQ4MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4610#discussion_r432406480", "bodyText": "Is it still a problem since now we have sanity check for the setters in the configuration?", "author": "deepthidevaki", "createdAt": "2020-05-29T10:51:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI1NDQ1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI1NTI0OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4610#discussion_r431255248", "bodyText": "optional: maybe log a warning that an unknown algo was encountered - for future developers", "author": "pihme", "createdAt": "2020-05-27T15:58:24Z", "path": "broker/src/main/java/io/zeebe/broker/transport/backpressure/PartitionAwareRequestLimiter.java", "diffHunk": "@@ -38,24 +47,75 @@ public static PartitionAwareRequestLimiter newNoopLimiter() {\n     return new PartitionAwareRequestLimiter();\n   }\n \n-  public static PartitionAwareRequestLimiter newLimiter(\n-      final LimitAlgorithm algorithm, final boolean useWindowed) {\n+  public static PartitionAwareRequestLimiter newLimiter(BackpressureCfg backpressureCfg) {\n+    final LimitAlgorithm algorithm = backpressureCfg.getAlgorithm();\n     final Supplier<Limit> limit;\n-    if (algorithm == LimitAlgorithm.GRADIENT) {\n-      limit = GradientLimit::newDefault;\n-    } else if (algorithm == LimitAlgorithm.GRADIENT2) {\n-      limit = Gradient2Limit::newDefault;\n-    } else {\n-      limit = VegasLimit::newDefault;\n+    switch (algorithm) {\n+      case AIMD:\n+        final AIMDCfg aimdCfg = backpressureCfg.getAimd();\n+        limit = () -> getAIMD(aimdCfg);\n+        break;\n+      case FIXED:\n+        final FixedLimitCfg fixedLimitCfg = backpressureCfg.getFixedLimit();\n+        limit = () -> FixedLimit.of(fixedLimitCfg.getLimit());\n+        break;\n+      case GRADIENT:\n+        final GradientCfg gradientCfg = backpressureCfg.getGradient();\n+        limit = () -> getGradientLimit(gradientCfg);\n+        break;\n+      case GRADIENT2:\n+        final Gradient2Cfg gradient2Cfg = backpressureCfg.getGradient2();\n+        limit = () -> getGradient2Limit(gradient2Cfg);\n+        break;\n+      case VEGAS:\n+      default:\n+        final VegasCfg vegasCfg = backpressureCfg.getVegas();", "originalCommit": "9e318cb92b1bf46dec5158b87eb5f42a996c6280", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI1OTAwMw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4610#discussion_r431259003", "bodyText": "Please move this test method into a dedicated class BackPressureCfgTest.\nThis test class is already long enough. It tests a bunch of stuff, whereas you have a very focused and clean test", "author": "pihme", "createdAt": "2020-05-27T16:02:04Z", "path": "broker/src/test/java/io/zeebe/broker/system/configuration/BrokerCfgTest.java", "diffHunk": "@@ -480,6 +480,42 @@ public void shouldSetBackpressureConfig() {\n     assertThat(backpressure.getAlgorithm()).isEqualTo(LimitAlgorithm.GRADIENT);\n   }\n \n+  @Test\n+  public void shouldUseConfiguredBackpressureAlgorithms() {", "originalCommit": "9e318cb92b1bf46dec5158b87eb5f42a996c6280", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI1OTYwNQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4610#discussion_r431259605", "bodyText": "gradient is tested twice", "author": "pihme", "createdAt": "2020-05-27T16:02:40Z", "path": "broker/src/test/java/io/zeebe/broker/system/configuration/BrokerCfgTest.java", "diffHunk": "@@ -480,6 +480,42 @@ public void shouldSetBackpressureConfig() {\n     assertThat(backpressure.getAlgorithm()).isEqualTo(LimitAlgorithm.GRADIENT);\n   }\n \n+  @Test\n+  public void shouldUseConfiguredBackpressureAlgorithms() {\n+\n+    final BackpressureCfg backpressure = new BackpressureCfg();\n+\n+    // when\n+    backpressure.setAlgorithm(\"gradient\");\n+    // then;\n+    assertThat(backpressure.getAlgorithm()).isEqualTo(LimitAlgorithm.GRADIENT);\n+\n+    // when\n+    backpressure.setAlgorithm(\"gradient\");", "originalCommit": "9e318cb92b1bf46dec5158b87eb5f42a996c6280", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2MzM5OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4610#discussion_r431263399", "bodyText": "Maybe rewrite whole test\nPseudocode\ntry (softly = new SoftAssertions()) {\n  for (var algo : AlgoEnum.values()) {\n   backPressure.setAlgorithm(algo.name.toLowerCase());\n\n   softly.AssertThat(backPressure.getAlgorithm()).isEqualTo(algo);\n  }\n}\n\nI know some people don't like this style. But it's less maintenance when you add new algos in the future.", "author": "pihme", "createdAt": "2020-05-27T16:06:37Z", "path": "broker/src/test/java/io/zeebe/broker/system/configuration/BrokerCfgTest.java", "diffHunk": "@@ -480,6 +480,42 @@ public void shouldSetBackpressureConfig() {\n     assertThat(backpressure.getAlgorithm()).isEqualTo(LimitAlgorithm.GRADIENT);\n   }\n \n+  @Test\n+  public void shouldUseConfiguredBackpressureAlgorithms() {\n+\n+    final BackpressureCfg backpressure = new BackpressureCfg();\n+\n+    // when\n+    backpressure.setAlgorithm(\"gradient\");\n+    // then;\n+    assertThat(backpressure.getAlgorithm()).isEqualTo(LimitAlgorithm.GRADIENT);\n+\n+    // when\n+    backpressure.setAlgorithm(\"gradient\");\n+    // then;\n+    assertThat(backpressure.getAlgorithm()).isEqualTo(LimitAlgorithm.GRADIENT);\n+\n+    // when\n+    backpressure.setAlgorithm(\"gradient2\");\n+    // then;\n+    assertThat(backpressure.getAlgorithm()).isEqualTo(LimitAlgorithm.GRADIENT2);\n+\n+    // when\n+    backpressure.setAlgorithm(\"vegas\");\n+    // then;\n+    assertThat(backpressure.getAlgorithm()).isEqualTo(LimitAlgorithm.VEGAS);\n+\n+    // when\n+    backpressure.setAlgorithm(\"fixed\");\n+    // then;\n+    assertThat(backpressure.getAlgorithm()).isEqualTo(LimitAlgorithm.FIXED);\n+\n+    // when\n+    backpressure.setAlgorithm(\"aimd\");", "originalCommit": "9e318cb92b1bf46dec5158b87eb5f42a996c6280", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQxNTIzOQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4610#discussion_r432415239", "bodyText": "Not sure about this. What we want to test is that the strings are mapped to to the correct enum. If we use the enums to generate the string, isn't it defeating the purpose?", "author": "deepthidevaki", "createdAt": "2020-05-29T11:11:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2MzM5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQxODA5OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4610#discussion_r432418098", "bodyText": "sounds fair", "author": "pihme", "createdAt": "2020-05-29T11:17:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2MzM5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2NTQzMQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4610#discussion_r431265431", "bodyText": "I do not understand this test or the method name. I don't see the connection between method name, given, when and then", "author": "pihme", "createdAt": "2020-05-27T16:09:32Z", "path": "broker/src/test/java/io/zeebe/broker/transport/backpressure/PartitionAwareRateLimiterTest.java", "diffHunk": "@@ -28,11 +29,22 @@\n \n   @Before\n   public void setUp() {\n-    IntStream.range(0, PARTITIONS).forEach(i -> partitionedLimiter.addPartition(i));\n+    IntStream.range(0, PARTITIONS).forEach(partitionedLimiter::addPartition);\n   }\n \n   @Test\n   public void shouldPartitionsHaveItsOwnLimiter() {", "originalCommit": "9e318cb92b1bf46dec5158b87eb5f42a996c6280", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwNjczOA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4610#discussion_r432406738", "bodyText": "I renamed and refactored it.", "author": "deepthidevaki", "createdAt": "2020-05-29T10:51:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2NTQzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2ODM3OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4610#discussion_r431268379", "bodyText": "optional: move into package *.configuration..backpressure dito for other classes regarding backpressure", "author": "pihme", "createdAt": "2020-05-27T16:13:46Z", "path": "broker/src/main/java/io/zeebe/broker/system/configuration/AIMDCfg.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.configuration;", "originalCommit": "9e318cb92b1bf46dec5158b87eb5f42a996c6280", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI4MDIyOA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4610#discussion_r431280228", "bodyText": "Optional: I know you only changed the class, bit there is one thing bothering me about the code that is already here. Feel free to ignore or implement this comment.\nthe algorithm is stored as a String internally. The  string is not checked in the setter. It will throw exceptions in the getter if the wrong string is passed in. In my mind there should be at least be a check whether the string can be parsed to an enum. And once we do that, we might as well use the enum as internal representation", "author": "pihme", "createdAt": "2020-05-27T16:31:56Z", "path": "broker/src/main/java/io/zeebe/broker/system/configuration/BackpressureCfg.java", "diffHunk": "@@ -12,6 +12,11 @@\n   private boolean enabled = true;\n   private boolean useWindowed = true;\n   private String algorithm = \"vegas\";\n+  private final AIMDCfg aimd = new AIMDCfg();", "originalCommit": "9e318cb92b1bf46dec5158b87eb5f42a996c6280", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyMDAzMg==", "url": "https://github.com/camunda-cloud/zeebe/pull/4610#discussion_r432420032", "bodyText": "could use checkPositive(..)", "author": "pihme", "createdAt": "2020-05-29T11:22:35Z", "path": "broker/src/main/java/io/zeebe/broker/system/configuration/backpressure/Gradient2Cfg.java", "diffHunk": "@@ -21,6 +22,7 @@ public int getMinLimit() {\n   }\n \n   public void setMinLimit(final int minLimit) {\n+    checkArgument(minLimit > 0, \"Expected minLimit to be > 0, but found %s\", minLimit);", "originalCommit": "c189f4f669ffad681bb5a20a81a7d8fe7d45dc42", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyNzg3OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4610#discussion_r432427879", "bodyText": "that does not work. Suppress warnings is a general annotation. To tell it to ignore sonar qube warnings, you would need\n@SuppressWarnings(\"squid:common-java:DuplicatedBlocks\") where squid stands for SonarQube Unique ID, I guess.\nNot sure whether you need to have common-java in or not. When I used it, I didn't need it. I guess SonarQube knows it is looking at Java already.\nAlternatively, I also found:\n\nFor instance, you can add the following property to your scanner configuration:\nsonar.cpd.exclusions=path/to/your/package/*.java\non this page: https://stackoverflow.com/questions/52865737/how-do-i-ignore-duplicated-code-report-in-sonar\n\nI guess this could be set somewehere in the pom files, but I haven't done it yet.", "author": "pihme", "createdAt": "2020-05-29T11:40:54Z", "path": "broker/src/main/java/io/zeebe/broker/system/configuration/backpressure/Gradient2Cfg.java", "diffHunk": "@@ -10,20 +10,20 @@\n import static com.google.common.base.Preconditions.checkArgument;\n import static io.zeebe.broker.system.configuration.ConfigurationUtil.checkPositive;\n \n-@SuppressWarnings(\"common-java:DuplicatedBlocks\")\n public class Gradient2Cfg {\n \n   private int minLimit = 10;\n   private int initialLimit = 20;\n   private double rttTolerance = 2.0;\n   private int longWindow = 600;\n \n+  @SuppressWarnings(\"common-java:DuplicatedBlocks\")", "originalCommit": "d0802f6af8b08297adc85187a2a5cfbf2cbaffdb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ba7be386934952018a9f3bed0ecd2ece7b273ddd", "url": "https://github.com/camunda-cloud/zeebe/commit/ba7be386934952018a9f3bed0ecd2ece7b273ddd", "message": "chore(broker): expose more backpressure algorithms and configurations", "committedDate": "2020-06-02T06:27:59Z", "type": "commit"}, {"oid": "ba7be386934952018a9f3bed0ecd2ece7b273ddd", "url": "https://github.com/camunda-cloud/zeebe/commit/ba7be386934952018a9f3bed0ecd2ece7b273ddd", "message": "chore(broker): expose more backpressure algorithms and configurations", "committedDate": "2020-06-02T06:27:59Z", "type": "forcePushed"}]}