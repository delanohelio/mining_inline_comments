{"pr_number": 4753, "pr_title": "Feature/geode 6536 1: modify borrowConnection singleHop solution", "pr_createdAt": "2020-03-02T19:24:55Z", "pr_url": "https://github.com/apache/geode/pull/4753", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc1MjQ3OQ==", "url": "https://github.com/apache/geode/pull/4753#discussion_r386752479", "bodyText": "Method comment says; its used for tests and gateway. The ticket is mainly talking about connection during singleHop; is this called during single hop?", "author": "agingade", "createdAt": "2020-03-03T01:35:16Z", "path": "geode-core/src/main/java/org/apache/geode/cache/client/internal/PoolImpl.java", "diffHunk": "@@ -918,10 +918,14 @@ public void returnConnection(Connection conn) {\n   }\n \n   /**\n-   * Test hook that acquires and returns a connection from the pool with a given ServerLocation.\n+   * Borrows a connection to a specific server from the pool.. Used by gateway and tests. Any\n+   * connection\n+   * that is acquired using this method must be returned using returnConnection, even if it is\n+   * destroyed.\n+   *\n    */\n   public Connection acquireConnection(ServerLocation loc) {\n-    return manager.borrowConnection(loc, false);\n+    return manager.borrowConnection(loc, 15000L, false);", "originalCommit": "b92b08da95a10737ca4ac0c62cce442dca99c880", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc1ODY5NQ==", "url": "https://github.com/apache/geode/pull/4753#discussion_r386758695", "bodyText": "Based on the previous method comment; for certain commands, even if limit is hit, it's fine to create a new connection. E.g. InterestRegistration(one time ops?) I agree with that one, we need to see the ops which could really impact the system by breaking the limit conditions.\nAlso, if we look into what currently available and whats is expected from the ticket GEODE-6536 requirement:\n\n\nPrevious behavior before this change:\nIf the connection for expected server is not available, it creates a new connection and returns.\n\n\nWith the fix the behavior is:\nIf the connection for a given server is not available, it will wait for certain time and then throws exception.\n\n\nIt seems like both approach is valid based on the application requirement. In certain cases the application may not want to wait for long; instead it may choose to have a new connection created and execute the command to satisfy its response requirement (most of the time networking between the servers/peers are faster and they can take the load).\nIf this borrowConnection is used for singleHop; then we should provide both options for the application, my vote will be for approach #1 as default.\nAlso, with this, both flavors of borrowConnection() methods:\nborrowConnection(long acquireTimeout)\nPooledConnection borrowConnection(ServerLocation server, boolean onlyUseExistingCnx)\nHave lot of common code; we could have a common code that could be used by both?", "author": "agingade", "createdAt": "2020-03-03T01:58:05Z", "path": "geode-core/src/main/java/org/apache/geode/cache/client/internal/pooling/ConnectionManagerImpl.java", "diffHunk": "@@ -301,31 +301,68 @@ public Connection borrowConnection(long acquireTimeout)\n     throw new AllConnectionsInUseException();\n   }\n \n-  /**\n-   * Borrow a connection to a specific server. This task currently allows us to break the connection\n-   * limit, because it is used by tasks from the background thread that shouldn't be constrained by\n-   * the limit. They will only violate the limit by 1 connection, and that connection will be\n-   * destroyed when returned to the pool.\n-   */\n   @Override\n-  public PooledConnection borrowConnection(ServerLocation server,\n-      boolean onlyUseExistingCnx) throws AllConnectionsInUseException, NoAvailableServersException {\n-    PooledConnection connection =\n-        availableConnectionManager.useFirst((c) -> c.getServer().equals(server));\n-    if (null != connection) {\n-      return connection;\n-    }\n+  public PooledConnection borrowConnection(ServerLocation server, long acquireTimeout,", "originalCommit": "b92b08da95a10737ca4ac0c62cce442dca99c880", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkwODAxMw==", "url": "https://github.com/apache/geode/pull/4753#discussion_r386908013", "bodyText": "As I see this, previous behavior was only to search existing connection in pool, toward designated server. And if we did not find it, then in case onlyUseExistingCnx is set to false we will create new connection, regardless of number of connections.\nMy proposal is, simular to borrowConnections(timeout), if we can not find connection in pool, and number of connections did not reach maximum, we create new connection toward designated server. And implement same retry logic from borrowConnections(timeout).", "author": "mivanac", "createdAt": "2020-03-03T09:54:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc1ODY5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxOTAzOA==", "url": "https://github.com/apache/geode/pull/4753#discussion_r388519038", "bodyText": "@mivanac You have introduced the wait which was not there before, this changes the behavior from caller perspective; It may have impact on the performance of some of the operation. May be reason for the internal test failures and existing user application may encounter the same.\nMay be, you can keep the current behavior as is, and add a new property (similar to free-connection-timeout) to adopt new behavior; when the new property is set it will wait for connection to available.", "author": "agingade", "createdAt": "2020-03-05T19:39:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc1ODY5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA3NzAxMg==", "url": "https://github.com/apache/geode/pull/4753#discussion_r389077012", "bodyText": "Added new parameter, which as default behavior disables waiting till timeout.", "author": "mivanac", "createdAt": "2020-03-06T18:44:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc1ODY5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc1OTExMA==", "url": "https://github.com/apache/geode/pull/4753#discussion_r386759110", "bodyText": "Do we need this? The java doc for \"yield\" says, its rarely appropriate and used for testing or debugging.", "author": "agingade", "createdAt": "2020-03-03T01:59:36Z", "path": "geode-core/src/main/java/org/apache/geode/cache/client/internal/pooling/ConnectionManagerImpl.java", "diffHunk": "@@ -301,31 +301,68 @@ public Connection borrowConnection(long acquireTimeout)\n     throw new AllConnectionsInUseException();\n   }\n \n-  /**\n-   * Borrow a connection to a specific server. This task currently allows us to break the connection\n-   * limit, because it is used by tasks from the background thread that shouldn't be constrained by\n-   * the limit. They will only violate the limit by 1 connection, and that connection will be\n-   * destroyed when returned to the pool.\n-   */\n   @Override\n-  public PooledConnection borrowConnection(ServerLocation server,\n-      boolean onlyUseExistingCnx) throws AllConnectionsInUseException, NoAvailableServersException {\n-    PooledConnection connection =\n-        availableConnectionManager.useFirst((c) -> c.getServer().equals(server));\n-    if (null != connection) {\n-      return connection;\n-    }\n+  public PooledConnection borrowConnection(ServerLocation server, long acquireTimeout,\n+      boolean onlyUseExistingCnx)\n+      throws AllConnectionsInUseException, NoAvailableServersException,\n+      ServerConnectivityException {\n \n-    if (onlyUseExistingCnx) {\n-      throw new AllConnectionsInUseException();\n-    }\n+    PooledConnection connection;\n+    logger.trace(\"Connection borrowConnection single hop connection\");\n+\n+    long waitStart = NOT_WAITING;\n+    try {\n+      long timeout = System.nanoTime() + MILLISECONDS.toNanos(acquireTimeout);\n+      while (true) {\n+\n+        connection =\n+            availableConnectionManager.useFirst((c) -> c.getServer().equals(server));\n+\n+        if (null != connection) {\n+          return connection;\n+        }\n+\n+        if (connectionAccounting.tryCreate()) {\n+          try {\n+            connection = createPooledConnection(server);\n \n-    connection = forceCreateConnection(server);\n-    if (null != connection) {\n-      return connection;\n+            if (null != connection) {\n+              return connection;\n+            }\n+            throw new NoAvailableServersException();\n+          } finally {\n+            if (connection == null) {\n+              connectionAccounting.cancelTryCreate();\n+              if (connectionAccounting.isUnderMinimum()) {\n+                startBackgroundPrefill();\n+              }\n+            }\n+          }\n+        }\n+\n+        if (checkShutdownInterruptedOrTimeout(timeout)) {\n+          break;\n+        }\n+\n+        if (!onlyUseExistingCnx) {\n+          connection = forceCreateConnection(server);\n+          if (null != connection) {\n+            return connection;\n+          }\n+          throw new ServerConnectivityException(BORROW_CONN_ERROR_MSG + server);\n+        }\n+\n+        waitStart = beginConnectionWaitStatIfNotStarted(waitStart);\n+\n+        Thread.yield();", "originalCommit": "b92b08da95a10737ca4ac0c62cce442dca99c880", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI4MzA3MQ==", "url": "https://github.com/apache/geode/pull/4753#discussion_r387283071", "bodyText": "This test is now misnamed, since the test is no longer testing the condition that no connections exist.", "author": "DonalEvans", "createdAt": "2020-03-03T20:45:47Z", "path": "geode-core/src/integrationTest/java/org/apache/geode/cache/client/internal/pooling/ConnectionManagerImplTest.java", "diffHunk": "@@ -92,9 +92,18 @@ public void startShouldEatRejectedExecutionException() {\n   @Test\n   public void borrowConnectionThrowsWhenUsingExistingConnectionsAndNoConnectionsExist() {", "originalCommit": "b92b08da95a10737ca4ac0c62cce442dca99c880", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzczNDIwMg==", "url": "https://github.com/apache/geode/pull/4753#discussion_r387734202", "bodyText": "We are still testing same thing since there is no free connections in pool, since you can not define pool with 0 connections. If you want I can change name ...AndNoFreeConnectionsExist", "author": "mivanac", "createdAt": "2020-03-04T15:18:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI4MzA3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4NTM3Mg==", "url": "https://github.com/apache/geode/pull/4753#discussion_r388485372", "bodyText": "Looking at the old code vs the new, it seems like originally we just tried to call borrowConnection() and asserted that we throw an exception, but in the new test we first successfully call the single-argument borrowConnection() and then call the three-arg version and assert that that throws. Given that there are two calls to borrowConnection() in the test and only one of them throws, a test name that explains this difference in behaviour between the calls would be best.", "author": "DonalEvans", "createdAt": "2020-03-05T18:38:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI4MzA3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI4NTA1Nw==", "url": "https://github.com/apache/geode/pull/4753#discussion_r387285057", "bodyText": "These test names need to be more descriptive. They should say what part of the code is being tested, using what parameters and what the expected outcome is. It's also unclear to me what these two tests are actually testing that's different between the tests. Both seem to only be asserting that manager.borrowConnection(new ServerLocation(\"localhost\", 5), BORROW_TIMEOUT_MILLIS, true) returns in less than the borrow timeout.\nAlso, InterruptedException is never thrown from these methods and many of the Connection objects which are assigned are never used.", "author": "DonalEvans", "createdAt": "2020-03-03T20:49:48Z", "path": "geode-core/src/integrationTest/java/org/apache/geode/cache/client/internal/pooling/ConnectionManagerJUnitTest.java", "diffHunk": "@@ -361,6 +363,82 @@ public void testBug41516()\n         elapsedMillis >= BORROW_TIMEOUT_MILLIS - ALLOWABLE_ERROR_IN_MILLIS);\n   }\n \n+\n+  @Test\n+  public void testSingleHopRetryConnection()", "originalCommit": "b92b08da95a10737ca4ac0c62cce442dca99c880", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcyODc4MA==", "url": "https://github.com/apache/geode/pull/4753#discussion_r387728780", "bodyText": "I will update test names.\nThese tests are aligned with previous tests. And connections are assigned just to fill up connection pool till maximum.", "author": "mivanac", "createdAt": "2020-03-04T15:10:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI4NTA1Nw=="}], "type": "inlineReview"}, {"oid": "f0e37ad673953de1a3f62f0cd6ed1836eda35efd", "url": "https://github.com/apache/geode/commit/f0e37ad673953de1a3f62f0cd6ed1836eda35efd", "message": "GEODE-6536: Added retry in borrowConnection/single hop", "committedDate": "2020-03-06T08:48:44Z", "type": "commit"}, {"oid": "f9af22af7ac38527a752d5b3f58138529cb4704d", "url": "https://github.com/apache/geode/commit/f9af22af7ac38527a752d5b3f58138529cb4704d", "message": "GEODE-6536: bug fix", "committedDate": "2020-03-06T08:48:44Z", "type": "commit"}, {"oid": "eaec77e329257009bb7a8531a846c95fcef93fb8", "url": "https://github.com/apache/geode/commit/eaec77e329257009bb7a8531a846c95fcef93fb8", "message": "GEODE-6536: update after comments", "committedDate": "2020-03-06T08:48:44Z", "type": "commit"}, {"oid": "ac0a0a48ca12cc9e6def15c343bb2162c0bdb474", "url": "https://github.com/apache/geode/commit/ac0a0a48ca12cc9e6def15c343bb2162c0bdb474", "message": "GEODE-6536: modify borrowConnection singleHop solution", "committedDate": "2020-03-06T08:48:44Z", "type": "commit"}, {"oid": "cfedf8332ffd74a144113a03b5ff0a6dcca1bc87", "url": "https://github.com/apache/geode/commit/cfedf8332ffd74a144113a03b5ff0a6dcca1bc87", "message": "GEODE-6536: test update", "committedDate": "2020-03-06T08:48:44Z", "type": "commit"}, {"oid": "92c8e656f04b83f1f303cdbcf6462b5d3e87a754", "url": "https://github.com/apache/geode/commit/92c8e656f04b83f1f303cdbcf6462b5d3e87a754", "message": "GEODE-6536: updated tests, and added parameter to desable timeout", "committedDate": "2020-03-06T18:38:16Z", "type": "forcePushed"}, {"oid": "2a2d8fc8e4b5813bd36a075598e8460fb404f3c2", "url": "https://github.com/apache/geode/commit/2a2d8fc8e4b5813bd36a075598e8460fb404f3c2", "message": "GEODE-6536: updated tests, and added parameter to desable timeout", "committedDate": "2020-03-06T18:54:09Z", "type": "commit"}, {"oid": "2a2d8fc8e4b5813bd36a075598e8460fb404f3c2", "url": "https://github.com/apache/geode/commit/2a2d8fc8e4b5813bd36a075598e8460fb404f3c2", "message": "GEODE-6536: updated tests, and added parameter to desable timeout", "committedDate": "2020-03-06T18:54:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE5NzczMA==", "url": "https://github.com/apache/geode/pull/4753#discussion_r389197730", "bodyText": "Additional comment could be added to highlight difference between \"setFreeConnectionTimeout\":\nSay:\nIt differs from \"setFreeConnectionTimeout\" which waits for any server connection in the pool, where this waits for a free connection to a specific server.", "author": "agingade", "createdAt": "2020-03-06T23:53:55Z", "path": "geode-core/src/main/java/org/apache/geode/cache/client/PoolFactory.java", "diffHunk": "@@ -238,6 +246,25 @@\n    */\n   PoolFactory setFreeConnectionTimeout(int connectionTimeout);\n \n+\n+  /**\n+   * Sets the server connection timeout for this pool. If the pool has a max connections setting,\n+   * operations will block if there is no free connection towards specific server. The server\n+   * connection timeout\n+   * specifies how long those operations will block waiting for a free connection towards specific\n+   * server before\n+   * receiving an {@link AllConnectionsInUseException}. If max connections is not set this setting\n+   * has no\n+   * effect.", "originalCommit": "2a2d8fc8e4b5813bd36a075598e8460fb404f3c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNjA3NA==", "url": "https://github.com/apache/geode/pull/4753#discussion_r389206074", "bodyText": "While trying to find a connection, for given time (acquireTimeout); this may get into a hot-loop; consuming the CPU; can you see if you can wait for a notification which indicates a server connection is available.\nThe above ask is nice to have. Also, currently the other borrowConnection() does not wait based on wait/notify.", "author": "agingade", "createdAt": "2020-03-07T00:37:19Z", "path": "geode-core/src/main/java/org/apache/geode/cache/client/internal/pooling/ConnectionManagerImpl.java", "diffHunk": "@@ -301,31 +301,68 @@ public Connection borrowConnection(long acquireTimeout)\n     throw new AllConnectionsInUseException();\n   }\n \n-  /**\n-   * Borrow a connection to a specific server. This task currently allows us to break the connection\n-   * limit, because it is used by tasks from the background thread that shouldn't be constrained by\n-   * the limit. They will only violate the limit by 1 connection, and that connection will be\n-   * destroyed when returned to the pool.\n-   */\n   @Override\n-  public PooledConnection borrowConnection(ServerLocation server,\n-      boolean onlyUseExistingCnx) throws AllConnectionsInUseException, NoAvailableServersException {\n-    PooledConnection connection =\n-        availableConnectionManager.useFirst((c) -> c.getServer().equals(server));\n-    if (null != connection) {\n-      return connection;\n-    }\n+  public PooledConnection borrowConnection(ServerLocation server, long acquireTimeout,\n+      boolean onlyUseExistingCnx)\n+      throws AllConnectionsInUseException, NoAvailableServersException,\n+      ServerConnectivityException {\n \n-    if (onlyUseExistingCnx) {\n-      throw new AllConnectionsInUseException();\n-    }\n+    PooledConnection connection;\n+    logger.trace(\"Connection borrowConnection single hop connection\");\n+\n+    long waitStart = NOT_WAITING;\n+    try {\n+      long timeout = System.nanoTime() + MILLISECONDS.toNanos(acquireTimeout);\n+      while (true) {", "originalCommit": "2a2d8fc8e4b5813bd36a075598e8460fb404f3c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "54cf1e72ff55fbaa82a28ba81c882fb4e499136e", "url": "https://github.com/apache/geode/commit/54cf1e72ff55fbaa82a28ba81c882fb4e499136e", "message": "GEODE-6536: update of cachexml impacts", "committedDate": "2020-03-08T08:21:32Z", "type": "commit"}, {"oid": "740bcddff41bd582ad3f78e5ff322b109de35313", "url": "https://github.com/apache/geode/commit/740bcddff41bd582ad3f78e5ff322b109de35313", "message": "GEODE-6536: remove cachexml restriction", "committedDate": "2020-03-08T10:21:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk1Mjk1MA==", "url": "https://github.com/apache/geode/pull/4753#discussion_r389952950", "bodyText": "A timeout of -1 is usually used to imply that the timeout is infinite, i.e. that we will wait forever to obtain a server connection if max connections is set and there is no free connections towards designated server. Would it be possible to change the default value to 0 but still ensure that the original behaviour is preserved?", "author": "DonalEvans", "createdAt": "2020-03-09T20:48:47Z", "path": "geode-core/src/main/java/org/apache/geode/cache/client/PoolFactory.java", "diffHunk": "@@ -73,6 +73,14 @@\n    */\n   int DEFAULT_FREE_CONNECTION_TIMEOUT = 10000;\n \n+  /**\n+   * The default amount of time, in milliseconds, which we will wait for a server connection if max\n+   * connections is set and there is no free connections towards designated server.\n+   * <p>\n+   * Current value: <code>-1</code>.\n+   */\n+  int DEFAULT_SERVER_CONNECTION_TIMEOUT = -1;", "originalCommit": "740bcddff41bd582ad3f78e5ff322b109de35313", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk2Mjc3MQ==", "url": "https://github.com/apache/geode/pull/4753#discussion_r389962771", "bodyText": "For timeout, if you look at the code (checkShutdownInterruptedOrTimeout) -1 means no timeout, because you compare current time against, current + timeout. If we set 0, you will get the code to retry several times until 1ms passes.", "author": "mivanac", "createdAt": "2020-03-09T21:08:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk1Mjk1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk3MzU1OQ==", "url": "https://github.com/apache/geode/pull/4753#discussion_r389973559", "bodyText": "If the comparison in checkShutdownInterruptedOrTimeout was timeout <= System.nanoTime() then this problem would be solved, I think.", "author": "DonalEvans", "createdAt": "2020-03-09T21:31:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk1Mjk1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMyNTI5Ng==", "url": "https://github.com/apache/geode/pull/4753#discussion_r390325296", "bodyText": "OK. Updated.", "author": "mivanac", "createdAt": "2020-03-10T13:49:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk1Mjk1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk1NDM1NQ==", "url": "https://github.com/apache/geode/pull/4753#discussion_r389954355", "bodyText": "When the default value for the timeout is being used, instead of hard-coding the value like here, it would be better to use a reference to the DEFAULT_SERVER_CONNECTION_TIMEOUT defined in PoolFactory.java.", "author": "DonalEvans", "createdAt": "2020-03-09T20:51:31Z", "path": "geode-core/src/test/java/org/apache/geode/cache/client/internal/OpExecutorImplJUnitTest.java", "diffHunk": "@@ -99,7 +99,7 @@ public RuntimeException generateCancelledException(Throwable e) {\n   @Test\n   public void testExecute() throws Exception {\n     OpExecutorImpl exec = new OpExecutorImpl(manager, queueManager, endpointManager, riTracker, 3,\n-        10, cancelCriterion, null);\n+        10, -1, cancelCriterion, null);", "originalCommit": "740bcddff41bd582ad3f78e5ff322b109de35313", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8338203abe376c62d7070f13d9d613f1a5edf20c", "url": "https://github.com/apache/geode/commit/8338203abe376c62d7070f13d9d613f1a5edf20c", "message": "GEODE-6536: update default value and documentation", "committedDate": "2020-03-10T10:32:56Z", "type": "commit"}]}