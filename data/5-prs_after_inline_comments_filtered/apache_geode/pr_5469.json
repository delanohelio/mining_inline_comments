{"pr_number": 5469, "pr_title": "GEODE-8447: QueryResultFormatter should show dates in localized strings", "pr_createdAt": "2020-08-21T16:47:26Z", "pr_url": "https://github.com/apache/geode/pull/5469", "timeline": [{"oid": "d68c57a6c059ce033969183d9e694bbfcfd89da2", "url": "https://github.com/apache/geode/commit/d68c57a6c059ce033969183d9e694bbfcfd89da2", "message": "GEODE-8447: QueryResultFormatter should show dates in localized strings\n\n* support java.util.Date, java.sql.Date and java.time.* date objects in the formatter", "committedDate": "2020-08-21T18:21:12Z", "type": "forcePushed"}, {"oid": "4249ff95bb44a1711d67b5ac568de0042340b518", "url": "https://github.com/apache/geode/commit/4249ff95bb44a1711d67b5ac568de0042340b518", "message": "GEODE-8447: QueryResultFormatter should show dates in localized strings\n\n* support java.util.Date, java.sql.Date and java.time.* date objects in the formatter", "committedDate": "2020-08-21T20:30:22Z", "type": "forcePushed"}, {"oid": "16489de96432982a186a6997a6260a1fb5a0dbca", "url": "https://github.com/apache/geode/commit/16489de96432982a186a6997a6260a1fb5a0dbca", "message": "GEODE-8447: QueryResultFormatter should show dates in localized strings\n\n* support java.util.Date, java.sql.Date and java.time.* date objects in the formatter", "committedDate": "2020-08-21T20:42:11Z", "type": "commit"}, {"oid": "16489de96432982a186a6997a6260a1fb5a0dbca", "url": "https://github.com/apache/geode/commit/16489de96432982a186a6997a6260a1fb5a0dbca", "message": "GEODE-8447: QueryResultFormatter should show dates in localized strings\n\n* support java.util.Date, java.sql.Date and java.time.* date objects in the formatter", "committedDate": "2020-08-21T20:42:11Z", "type": "forcePushed"}, {"oid": "287797e95dd7394660aca870744a3f36a6684943", "url": "https://github.com/apache/geode/commit/287797e95dd7394660aca870744a3f36a6684943", "message": "empty", "committedDate": "2020-08-23T15:40:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY3MDkwNQ==", "url": "https://github.com/apache/geode/pull/5469#discussion_r475670905", "bodyText": "Does it also handles the date format used by the application/user in the query.\n(From test SelectToDateJUnitTest.java):\n\"select * from /test p where p.createDate = to_date('05202012100559', 'MMddyyyyHHmmss')", "author": "agingade", "createdAt": "2020-08-24T14:53:07Z", "path": "geode-core/src/integrationTest/java/org/apache/geode/management/internal/beans/DistributedSystemMBeanIntegrationTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.management.internal.beans;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.text.SimpleDateFormat;\n+import java.time.LocalDate;\n+import java.util.Date;\n+\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.management.DistributedSystemMXBean;\n+import org.apache.geode.management.internal.json.QueryResultFormatter;\n+import org.apache.geode.test.junit.assertions.TabularResultModelAssert;\n+import org.apache.geode.test.junit.rules.GfshCommandRule;\n+import org.apache.geode.test.junit.rules.MBeanServerConnectionRule;\n+import org.apache.geode.test.junit.rules.ServerStarterRule;\n+\n+public class DistributedSystemMBeanIntegrationTest {\n+\n+  public static final String SELECT = \"select * from /testRegion r where r.id=1\";", "originalCommit": "287797e95dd7394660aca870744a3f36a6684943", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY4OTUyNg==", "url": "https://github.com/apache/geode/pull/5469#discussion_r475689526", "bodyText": "It formats the the date in the select results.", "author": "jinmeiliao", "createdAt": "2020-08-24T15:12:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY3MDkwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY0ODQ1Nw==", "url": "https://github.com/apache/geode/pull/5469#discussion_r476648457", "bodyText": "Is sqlDatee a typo?", "author": "jchen21", "createdAt": "2020-08-25T18:19:56Z", "path": "geode-gfsh/src/test/java/org/apache/geode/management/internal/cli/json/QueryResultFormatterTest.java", "diffHunk": "@@ -117,15 +119,19 @@ public void testPrimitives() throws Exception {\n     QueryResultFormatter stringResult = new QueryResultFormatter(100).add(RESULT, \"String\");\n     checkResult(stringResult, \"{\\\"result\\\":[[\\\"java.lang.String\\\",\\\"String\\\"]]}\");\n \n+    Date date = new Date(0);\n+    String expectedString =\n+        new SimpleDateFormat(QueryResultFormatter.DATE_FORMAT_PATTERN).format(date);\n     QueryResultFormatter javaDateResult =\n-        new QueryResultFormatter(100).add(RESULT, new java.util.Date(0));\n+        new QueryResultFormatter(100).add(RESULT, date);\n     checkResult(javaDateResult,\n-        \"{\\\"result\\\":[[\\\"java.util.Date\\\",\\\"1970-01-01T00:00:00.000+0000\\\"]]}\");\n+        \"{\\\"result\\\":[[\\\"java.util.Date\\\",\\\"\" + expectedString + \"\\\"]]}\");\n \n+    java.sql.Date sqlDatee = new java.sql.Date(0);", "originalCommit": "287797e95dd7394660aca870744a3f36a6684943", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY3OTg3Nw==", "url": "https://github.com/apache/geode/pull/5469#discussion_r476679877", "bodyText": "yeah, should be.e", "author": "jinmeiliao", "createdAt": "2020-08-25T19:16:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY0ODQ1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY1NTQyMw==", "url": "https://github.com/apache/geode/pull/5469#discussion_r476655423", "bodyText": "Can you elaborate a bit why jackson-datatype-jsr310 is needed? I am not sure why it is necessary to add it.", "author": "jchen21", "createdAt": "2020-08-25T18:32:24Z", "path": "geode-core/src/main/java/org/apache/geode/management/internal/json/AbstractJSONFormatter.java", "diffHunk": "@@ -94,6 +94,8 @@ public AbstractJSONFormatter(int maxCollectionElements, int serializationDepth,\n \n     // register the custom module\n     mapper.registerModule(mapperModule);\n+    // to support jdk8 java.time if jackson-datatype-jsr310 is included in the classpath", "originalCommit": "287797e95dd7394660aca870744a3f36a6684943", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY4MDUyNA==", "url": "https://github.com/apache/geode/pull/5469#discussion_r476680524", "bodyText": "the test shows an example using java.time.LocalTime object. If without this line and without the jackson-datatype-jsr310.jar in the classpath, the java.time.LocalTime will not be formatted correctly.", "author": "jinmeiliao", "createdAt": "2020-08-25T19:17:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY1NTQyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg4NDA0Mw==", "url": "https://github.com/apache/geode/pull/5469#discussion_r476884043", "bodyText": "That means if the user uses  java.time.LocalTime, it also requires jackson-datatype-jsr310 to format it properly. However, this dependency is for integrationTestRuntimeOnly in build.gradle. In expected-pom.xml, its scope is compile.  We might have to check the open source license requirements for new third party dependency.", "author": "jchen21", "createdAt": "2020-08-25T23:54:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY1NTQyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAwMDA3OQ==", "url": "https://github.com/apache/geode/pull/5469#discussion_r477000079", "bodyText": "It's only required for testing. If user's domain object includes that type and they would like it to be formatted correctly, then they will need to include the jar in the classpath (Geode is not shipping with it). We are just calling the findAndRegisterModuel in case users have the jar in the classpath.", "author": "jinmeiliao", "createdAt": "2020-08-26T02:47:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY1NTQyMw=="}], "type": "inlineReview"}, {"oid": "6b1ec074b86435a322c7947301dcf57a9d158c21", "url": "https://github.com/apache/geode/commit/6b1ec074b86435a322c7947301dcf57a9d158c21", "message": "fix typo", "committedDate": "2020-08-25T23:10:28Z", "type": "commit"}]}