{"pr_number": 5457, "pr_title": "GEODE-8430: add dunit test to verify tombstoneGC will not happen in u\u2026", "pr_createdAt": "2020-08-13T17:59:15Z", "pr_url": "https://github.com/apache/geode/pull/5457", "timeline": [{"oid": "7b2e91b516fec924e0e6b403276c5ae586d673f9", "url": "https://github.com/apache/geode/commit/7b2e91b516fec924e0e6b403276c5ae586d673f9", "message": "GEODE-8430: add dunit test to verify tombstoneGC will not happen in uninitialized region", "committedDate": "2020-08-13T17:38:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMyOTMwMQ==", "url": "https://github.com/apache/geode/pull/5457#discussion_r470329301", "bodyText": ".join() is deprecated, in the future you might just want to use await.", "author": "mhansonp", "createdAt": "2020-08-14T00:28:52Z", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/GIIDeltaDUnitTest.java", "diffHunk": "@@ -1552,6 +1552,95 @@ public String description() {\n     waitForToVerifyRVV(P, memberR, 6, null, 0); // P's rvv=r6, gc=0\n   }\n \n+  /**\n+   * vm0 and vm1 are peers, each holds a DR. Let P and R have the same RVV and RVVGC: P7,R6, RVVGC\n+   * is P0,R0. vm1 becomes offline then restarts. Use testHook to pause the GII, then do tombstone\n+   * GC triggered by expireBatch (not by forceGC) at R only. The tombstone GC will be executed at P,\n+   * but ignored at R, because P has not started providing GII and R is not initialized yet.\n+   * The deltaGII should send nothing to R since the RVVs are the same. So after\n+   * GII, P and R will have different tombstone number. But P's tombstones should be expired.\n+   */\n+  @Test\n+  public void testExpiredTombstoneSkippedGCAtRequesterOnly() throws Throwable {\n+    prepareForEachTest();\n+    final DiskStoreID memberP = getMemberID(P);\n+    final DiskStoreID memberR = getMemberID(R);\n+\n+    assertEquals(0, SLOW_DISTRIBUTION_MS);\n+    prepareCommonTestData(6);\n+\n+    // let r4,r5,r6 to succeed\n+    doOnePut(R, 4, \"key4\");\n+    doOneDestroy(R, 5, \"key5\");\n+    doOnePut(R, 6, \"key1\");\n+\n+    waitForToVerifyRVV(R, memberP, 6, null, 0); // P's rvv=p6, gc=0\n+    waitForToVerifyRVV(R, memberR, 6, null, 0); // P's rvv=r6, gc=0\n+    // now the rvv and rvvgc at P and R should be the same\n+\n+    // save R's rvv in byte array, check if it will be fullGII\n+    byte[] R_rvv_bytes = getRVVByteArray(R, REGION_NAME);\n+    // shutdown R and restart\n+    closeCache(R);\n+\n+    // let p7 to succeed\n+    doOnePut(P, 7, \"key1\");\n+\n+    waitForToVerifyRVV(P, memberP, 7, null, 0); // P's rvv=p7, gc=0\n+    waitForToVerifyRVV(P, memberR, 6, null, 0); // P's rvv=r6, gc=0\n+\n+    // add test hook\n+    P.invoke(new SerializableRunnable() {\n+      @Override\n+      public void run() {\n+        Mycallback myDuringPackingImage =\n+            new Mycallback(GIITestHookType.AfterReceivedRequestImage, REGION_NAME);\n+        setGIITestHook(myDuringPackingImage);\n+      }\n+    });\n+\n+    checkIfFullGII(P, REGION_NAME, R_rvv_bytes, false);\n+\n+    // restart R and gii, it will be blocked at test hook\n+    AsyncInvocation async3 = createDistributedRegionAsync(R);\n+    // 8\n+    waitForCallbackStarted(P, GIITestHookType.AfterReceivedRequestImage);\n+    int count = getDeltaGIICount(P);\n+    assertEquals(0, count);\n+\n+    // let tombstone expired at both P & R to trigger tombstoneGC.\n+    // Wait for tombstone is GCed at P, but still exists in R\n+    changeTombstoneTimout(R, MAX_WAIT);\n+    changeTombstoneTimout(P, MAX_WAIT);\n+    pause((int) MAX_WAIT);\n+    forceGC(R, 3);\n+    forceGC(P, 3);\n+\n+    // let GII continue\n+    P.invoke(() -> resetGIITestHook(GIITestHookType.AfterReceivedRequestImage, true));\n+    async3.join(MAX_WAIT * 2);", "originalCommit": "7b2e91b516fec924e0e6b403276c5ae586d673f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}