{"pr_number": 4765, "pr_title": "GEODE-7808: standardize on use of HostAndPort for creating connections", "pr_createdAt": "2020-03-03T22:22:11Z", "pr_url": "https://github.com/apache/geode/pull/4765", "timeline": [{"oid": "2f7a825042781c167390f805d3aa15b59992e723", "url": "https://github.com/apache/geode/commit/2f7a825042781c167390f805d3aa15b59992e723", "message": "Squashed merge of feature/GEODE-7808\n\nremoved HostAddress\nrenamed LocatorAddress to HostAndPort\nmodified TcpClient methods to take a HostAndPort argument instead of\nInetAddress\nmodified SocketCreator to take a HostAndPort argument instead of\nInetAddress", "committedDate": "2020-02-28T00:48:59Z", "type": "commit"}, {"oid": "ccab59dad5789bb77139209eeb313600f88ea6f2", "url": "https://github.com/apache/geode/commit/ccab59dad5789bb77139209eeb313600f88ea6f2", "message": "GEODE-7808 - standardize on use of HostAndPort for connection formation\n\nThis continues a previous PR that passed and was approved for merge.\nThis commit raises up several methods from SocketCreator into the\nTcpSocketCreator interface.  This is an intermediate commit.  A\nsubsequent commit will refactor TcpSocketCreator to separate the client\nand server methods for creating server-sockets and client connections to\nserver-sockets.", "committedDate": "2020-02-28T00:49:50Z", "type": "commit"}, {"oid": "5add2691a27de08d76688949c32d9e7ac129e16a", "url": "https://github.com/apache/geode/commit/5add2691a27de08d76688949c32d9e7ac129e16a", "message": "refactored socket-creators to separate concerns\n\nServerSocketCreator holds methods for non-client comms\nClientSocketCreator holds methods that clients should use for comms\nAdvancedSocketCreator holds methods for people who need to get around\nthe limitations of the other two interfaces", "committedDate": "2020-02-28T00:49:50Z", "type": "commit"}, {"oid": "e7074e333f5cf3ec73c6b727a260f28237462eb5", "url": "https://github.com/apache/geode/commit/e7074e333f5cf3ec73c6b727a260f28237462eb5", "message": "adding missing interface", "committedDate": "2020-02-28T16:50:10Z", "type": "commit"}, {"oid": "4e182126559239b8ca65859a91f82c4c2499503e", "url": "https://github.com/apache/geode/commit/4e182126559239b8ca65859a91f82c4c2499503e", "message": "move code out of inner-classes into first-class classes", "committedDate": "2020-02-28T18:06:51Z", "type": "commit"}, {"oid": "ce9ef7c361829bbee2a37e6935c131dcb776c320", "url": "https://github.com/apache/geode/commit/ce9ef7c361829bbee2a37e6935c131dcb776c320", "message": "renaming interfaces and methods to be less confusing", "committedDate": "2020-03-02T19:21:19Z", "type": "commit"}, {"oid": "a46d2e144f5344c422552f6675b1e9d287482aaf", "url": "https://github.com/apache/geode/commit/a46d2e144f5344c422552f6675b1e9d287482aaf", "message": "reinstate SocketCreator ip to hostname cache for performance", "committedDate": "2020-03-03T21:46:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0NjMxOQ==", "url": "https://github.com/apache/geode/pull/4765#discussion_r387346319", "bodyText": "is this name a recursive acronym?", "author": "echobravopapa", "createdAt": "2020-03-03T22:59:19Z", "path": "geode-core/src/main/java/org/apache/geode/internal/net/SCAdvancedSocketCreator.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.net;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+\n+import javax.net.SocketFactory;\n+\n+import org.apache.geode.GemFireConfigException;\n+import org.apache.geode.SystemConnectException;\n+import org.apache.geode.distributed.internal.tcpserver.AdvancedSocketCreatorImpl;\n+import org.apache.geode.distributed.internal.tcpserver.ConnectionWatcher;\n+import org.apache.geode.distributed.internal.tcpserver.HostAndPort;\n+\n+class SCAdvancedSocketCreator extends AdvancedSocketCreatorImpl {", "originalCommit": "a46d2e144f5344c422552f6675b1e9d287482aaf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0NzAxMQ==", "url": "https://github.com/apache/geode/pull/4765#discussion_r387347011", "bodyText": "the SC prefix is clearly a convention, but what does it stand for?", "author": "echobravopapa", "createdAt": "2020-03-03T23:00:59Z", "path": "geode-core/src/main/java/org/apache/geode/internal/net/SCClientSocketCreator.java", "diffHunk": "@@ -12,16 +12,24 @@\n  * or implied. See the License for the specific language governing permissions and limitations under\n  * the License.\n  */\n-package org.apache.geode.distributed.internal.membership.gms.membership;\n+package org.apache.geode.internal.net;\n \n-import java.net.InetSocketAddress;\n+import java.io.IOException;\n+import java.net.Socket;\n \n-import org.apache.geode.distributed.internal.tcpserver.LocatorAddress;\n+import org.apache.geode.distributed.internal.tcpserver.ClientSocketCreatorImpl;\n \n-public class HostAddress extends LocatorAddress {\n+class SCClientSocketCreator extends ClientSocketCreatorImpl {", "originalCommit": "a46d2e144f5344c422552f6675b1e9d287482aaf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc3MDU3OA==", "url": "https://github.com/apache/geode/pull/4765#discussion_r387770578", "bodyText": "SocketCreator.  I wanted to rename all of this since the purpose of SocketCreator is to add TLS support but it would kill backward-compatibility tests to change SocketCreator's name.  Maybe we can do that in Geode 2.0.", "author": "bschuchardt", "createdAt": "2020-03-04T16:09:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0NzAxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0OTI1OQ==", "url": "https://github.com/apache/geode/pull/4765#discussion_r387349259", "bodyText": "an aside,  SINGLETON sticks out - but doesn't seem to be the kind of singleton we want to be rid of....", "author": "echobravopapa", "createdAt": "2020-03-03T23:07:06Z", "path": "geode-core/src/main/java/org/apache/geode/management/internal/JmxManagerLocatorRequest.java", "diffHunk": "@@ -87,7 +84,8 @@ public static JmxManagerLocatorResponse send(String locatorHost, int locatorPort\n     TcpClient client = new TcpClient(socketCreator,\n         InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n         InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n-    Object responseFromServer = client.requestToServer(inetSockAddr, SINGLETON, msTimeout, true);\n+    Object responseFromServer = client.requestToServer(new HostAndPort(locatorHost, locatorPort),\n+        SINGLETON, msTimeout, true);", "originalCommit": "a46d2e144f5344c422552f6675b1e9d287482aaf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM1ODAxOQ==", "url": "https://github.com/apache/geode/pull/4765#discussion_r387358019", "bodyText": "I know it was existing, but add could just be address... a nit I know", "author": "echobravopapa", "createdAt": "2020-03-03T23:32:36Z", "path": "geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/MemberIdentifierImpl.java", "diffHunk": "@@ -436,9 +436,9 @@ public void addFixedToString(StringBuilder sb, boolean useIpAddress) {\n     String host;\n \n     InetAddress add = getInetAddress();", "originalCommit": "a46d2e144f5344c422552f6675b1e9d287482aaf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM1ODY3Ng==", "url": "https://github.com/apache/geode/pull/4765#discussion_r387358676", "bodyText": "I really like the clarity here!!!", "author": "echobravopapa", "createdAt": "2020-03-03T23:34:37Z", "path": "geode-tcp-server/src/main/java/org/apache/geode/distributed/internal/tcpserver/TcpSocketCreator.java", "diffHunk": "@@ -15,34 +15,24 @@\n \n package org.apache.geode.distributed.internal.tcpserver;\n \n-import java.io.IOException;\n-import java.net.InetAddress;\n-import java.net.ServerSocket;\n-import java.net.Socket;\n \n \n /**\n  * Create sockets for TcpServer (and TcpClient).\n  */\n public interface TcpSocketCreator {\n-  boolean useSSL();\n-\n-  ServerSocket createServerSocket(int nport, int backlog) throws IOException;\n-\n-  ServerSocket createServerSocket(int nport, int backlog, InetAddress bindAddr)\n-      throws IOException;\n-\n-  ServerSocket createServerSocketUsingPortRange(InetAddress ba, int backlog,\n-      boolean isBindAddress, boolean useNIO, int tcpBufferSize, int[] tcpPortRange,\n-      boolean sslConnection) throws IOException;\n-\n-  Socket connect(InetAddress inetadd, int port, int timeout,\n-      ConnectionWatcher optionalWatcher, boolean clientSide) throws IOException;\n-\n-  Socket connect(InetAddress inetadd, int port, int timeout,\n-      ConnectionWatcher optionalWatcher, boolean clientSide, int socketBufferSize,\n-      boolean sslConnection) throws IOException;\n-\n-  void handshakeIfSocketIsSSL(Socket socket, int timeout) throws IOException;\n-\n+  /**", "originalCommit": "a46d2e144f5344c422552f6675b1e9d287482aaf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM1OTQ5MQ==", "url": "https://github.com/apache/geode/pull/4765#discussion_r387359491", "bodyText": "we might want to expunge this literal bug number and replace with the issue/feature, if that's not what the rest of comment is already doing...", "author": "echobravopapa", "createdAt": "2020-03-03T23:37:04Z", "path": "geode-tcp-server/src/main/java/org/apache/geode/distributed/internal/tcpserver/AdvancedSocketCreatorImpl.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.distributed.internal.tcpserver;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.nio.channels.ServerSocketChannel;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.apache.geode.util.internal.GeodeGlossary;\n+\n+public class AdvancedSocketCreatorImpl implements AdvancedSocketCreator {\n+\n+  public static final boolean ENABLE_TCP_KEEP_ALIVE;\n+\n+  static {\n+    // bug #49484 - customers want tcp/ip keep-alive turned on by default", "originalCommit": "a46d2e144f5344c422552f6675b1e9d287482aaf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4MjI5Mg==", "url": "https://github.com/apache/geode/pull/4765#discussion_r387382292", "bodyText": "I don't see this method called anywhere. Is this dead code?", "author": "Bill", "createdAt": "2020-03-04T00:50:20Z", "path": "geode-core/src/main/java/org/apache/geode/internal/net/SocketCreator.java", "diffHunk": "@@ -149,6 +153,41 @@ public static InetAddress getLocalHost() throws UnknownHostException {\n     return LocalHostUtil.getLocalHost();\n   }\n \n+\n+  /**\n+   * returns the host name for the given inet address, using a local cache of names to avoid dns\n+   * hits and duplicate strings\n+   */\n+  public static String getHostName(InetAddress addr) {\n+    String result = hostNames.get(addr);\n+    if (result == null) {\n+      result = addr.getHostName();\n+      hostNames.put(addr, result);\n+    }\n+    return result;\n+  }\n+\n+  /**\n+   * returns the host name for the given inet address, using a local cache of names to avoid dns\n+   * hits and duplicate strings\n+   */", "originalCommit": "a46d2e144f5344c422552f6675b1e9d287482aaf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4Mjk0Mw==", "url": "https://github.com/apache/geode/pull/4765#discussion_r387382943", "bodyText": "Ah ok I see we're calling getHostString() to avoid reverse-lookup if an address was originally specified (instead of a hostname/FQDN).", "author": "Bill", "createdAt": "2020-03-04T00:52:30Z", "path": "geode-core/src/main/java/org/apache/geode/cache/client/internal/ExplicitConnectionSourceImpl.java", "diffHunk": "@@ -61,7 +61,7 @@\n   ExplicitConnectionSourceImpl(List<InetSocketAddress> contacts) {\n     ArrayList<ServerLocation> serverList = new ArrayList<>(contacts.size());\n     for (InetSocketAddress addr : contacts) {\n-      serverList.add(new ServerLocation(addr.getHostName(), addr.getPort()));\n+      serverList.add(new ServerLocation(addr.getHostString(), addr.getPort()));", "originalCommit": "a46d2e144f5344c422552f6675b1e9d287482aaf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4MzIzMw==", "url": "https://github.com/apache/geode/pull/4765#discussion_r387383233", "bodyText": "\u2026and this call (to SocketCreator.getHostName()) is ok because the reverse lookup is cached, right?", "author": "Bill", "createdAt": "2020-03-04T00:53:27Z", "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/membership/InternalDistributedMember.java", "diffHunk": "@@ -100,7 +100,7 @@ public InternalDistributedMember(InetAddress i, int membershipPort, boolean spli\n   }\n \n   private static String getHostName(InetAddress i) {\n-    return SocketCreator.resolve_dns ? i.getHostName() : i.getHostAddress();\n+    return SocketCreator.resolve_dns ? SocketCreator.getHostName(i) : i.getHostAddress();", "originalCommit": "a46d2e144f5344c422552f6675b1e9d287482aaf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc3NTQ2Ng==", "url": "https://github.com/apache/geode/pull/4765#discussion_r387775466", "bodyText": "yes", "author": "bschuchardt", "createdAt": "2020-03-04T16:17:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4MzIzMw=="}], "type": "inlineReview"}, {"oid": "e2db3826cadd3cfa4438d5f20092ea9b34bd8cff", "url": "https://github.com/apache/geode/commit/e2db3826cadd3cfa4438d5f20092ea9b34bd8cff", "message": "changes from review comments", "committedDate": "2020-03-04T16:27:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzNDY5MQ==", "url": "https://github.com/apache/geode/pull/4765#discussion_r387834691", "bodyText": "getSocketInetAddress() will try to resolve the hostname stored in addr, by constructing an InetSocketAddress from the hostname and port. Address resolution boils down to utimately calling InetAddress.getByName(hostname)", "author": "Bill", "createdAt": "2020-03-04T17:55:30Z", "path": "geode-core/src/main/java/org/apache/geode/internal/net/SCAdvancedSocketCreator.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.net;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+\n+import javax.net.SocketFactory;\n+\n+import org.apache.geode.GemFireConfigException;\n+import org.apache.geode.SystemConnectException;\n+import org.apache.geode.distributed.internal.tcpserver.AdvancedSocketCreatorImpl;\n+import org.apache.geode.distributed.internal.tcpserver.ConnectionWatcher;\n+import org.apache.geode.distributed.internal.tcpserver.HostAndPort;\n+\n+class SCAdvancedSocketCreator extends AdvancedSocketCreatorImpl {\n+  final SocketCreator coreSocketCreator;\n+\n+  protected SCAdvancedSocketCreator(SocketCreator socketCreator) {\n+    super(socketCreator);\n+    coreSocketCreator = socketCreator;\n+  }\n+\n+  @Override\n+  public void handshakeIfSocketIsSSL(Socket socket, int timeout) throws IOException {\n+    coreSocketCreator.handshakeIfSocketIsSSL(socket, timeout);\n+  }\n+\n+  @Override\n+  public Socket connect(HostAndPort addr, int timeout,\n+      ConnectionWatcher optionalWatcher, boolean allowClientSocketFactory, int socketBufferSize,\n+      boolean useSSL) throws IOException {\n+\n+    coreSocketCreator.printConfig();\n+\n+    if (!useSSL) {\n+      return super.connect(addr, timeout, optionalWatcher, allowClientSocketFactory,\n+          socketBufferSize,\n+          useSSL);\n+    }\n+\n+    // create an SSL connection\n+\n+    Socket socket;\n+    InetSocketAddress sockaddr = addr.getSocketInetAddress();", "originalCommit": "e2db3826cadd3cfa4438d5f20092ea9b34bd8cff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkzNDM5Mg==", "url": "https://github.com/apache/geode/pull/4765#discussion_r387934392", "bodyText": "Yes, that's what the LocatorAddress method was supposed to do.  I renamed LocatorAddress to HostAndPort since it can hold arbitrary addresses, not just locator addresses.  For your PR you can bypass getSocketInetAddress and just get the hostname since that's all you need for the SNIServerName parameter.", "author": "bschuchardt", "createdAt": "2020-03-04T21:06:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzNDY5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzODI3Nw==", "url": "https://github.com/apache/geode/pull/4765#discussion_r387838277", "bodyText": "\u2026then, if address resolution failed, we try InetAddress.getByName() again. With the exact same hostname.\nTwo things:\n\nI don't see how this second address resolution will ever work if the first one failed (barring some rare race with DNS data)\nIn the case where we enter the conditional at line 61, we end up with sockaddr referring to an InetSocketAddress that has a null address and no hostname at all. Wheres if we do not enter the conditional sockaddr refers to an InetSocketAddress that has both hostname and port.\n\nShould we remove this conditional entirely?", "author": "Bill", "createdAt": "2020-03-04T18:02:10Z", "path": "geode-core/src/main/java/org/apache/geode/internal/net/SCAdvancedSocketCreator.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.net;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+\n+import javax.net.SocketFactory;\n+\n+import org.apache.geode.GemFireConfigException;\n+import org.apache.geode.SystemConnectException;\n+import org.apache.geode.distributed.internal.tcpserver.AdvancedSocketCreatorImpl;\n+import org.apache.geode.distributed.internal.tcpserver.ConnectionWatcher;\n+import org.apache.geode.distributed.internal.tcpserver.HostAndPort;\n+\n+class SCAdvancedSocketCreator extends AdvancedSocketCreatorImpl {\n+  final SocketCreator coreSocketCreator;\n+\n+  protected SCAdvancedSocketCreator(SocketCreator socketCreator) {\n+    super(socketCreator);\n+    coreSocketCreator = socketCreator;\n+  }\n+\n+  @Override\n+  public void handshakeIfSocketIsSSL(Socket socket, int timeout) throws IOException {\n+    coreSocketCreator.handshakeIfSocketIsSSL(socket, timeout);\n+  }\n+\n+  @Override\n+  public Socket connect(HostAndPort addr, int timeout,\n+      ConnectionWatcher optionalWatcher, boolean allowClientSocketFactory, int socketBufferSize,\n+      boolean useSSL) throws IOException {\n+\n+    coreSocketCreator.printConfig();\n+\n+    if (!useSSL) {\n+      return super.connect(addr, timeout, optionalWatcher, allowClientSocketFactory,\n+          socketBufferSize,\n+          useSSL);\n+    }\n+\n+    // create an SSL connection\n+\n+    Socket socket;\n+    InetSocketAddress sockaddr = addr.getSocketInetAddress();\n+    if (sockaddr.getAddress() == null) {\n+      InetAddress address = InetAddress.getByName(sockaddr.getHostString());", "originalCommit": "e2db3826cadd3cfa4438d5f20092ea9b34bd8cff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5NjY1Nw==", "url": "https://github.com/apache/geode/pull/4765#discussion_r387896657", "bodyText": "Ah now I see that line 61 throws an UnknownHostException if address resolution fails. This, while quirky, is reasonable. Inasmuch as this logic has been in the product a long time, I'm ok with leaving it as-is.", "author": "Bill", "createdAt": "2020-03-04T19:49:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzODI3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkzMTg3Nw==", "url": "https://github.com/apache/geode/pull/4765#discussion_r387931877", "bodyText": "I had to do some recollection on this one Bill.\nHostAndPort.getSocketInetAddress() is required to resolve hostnames if possible.  It's supposed to hold onto hostname:port pairs and leave the name unresolved until this method is called.\nYes, the second resolution will fail 100% of the time, but it will give us the expected UnknownHostException with the correct text.  Without that lookup there was at least one test failure that asserted that it should get this exception when attempting to use an invalid host name.", "author": "bschuchardt", "createdAt": "2020-03-04T21:01:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzODI3Nw=="}], "type": "inlineReview"}]}