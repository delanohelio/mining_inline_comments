{"pr_number": 5821, "pr_title": "GEODE-8745: Handle race between batch destroy msg and sec event.", "pr_createdAt": "2020-12-08T01:43:36Z", "pr_url": "https://github.com/apache/geode/pull/5821", "timeline": [{"oid": "6ed0c93e122d081ef2549333f7bd26a5b3d6d50a", "url": "https://github.com/apache/geode/commit/6ed0c93e122d081ef2549333f7bd26a5b3d6d50a", "message": "GEODE-8745: Fixing the flaky tests.", "committedDate": "2020-12-08T07:03:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc3NzM2MQ==", "url": "https://github.com/apache/geode/pull/5821#discussion_r538777361", "bodyText": "Refer line#1035", "author": "nabarunnag", "createdAt": "2020-12-08T20:18:48Z", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/AbstractGatewaySender.java", "diffHunk": "@@ -1068,8 +1068,8 @@ public void distribute(EnumListenerEvent operation, EntryEventImpl event,\n           if (isDebugEnabled) {\n             logger.debug(\"Returning back without putting into the gateway sender queue:\" + event);\n           }\n-          if (this.eventProcessor != null) {\n-            this.eventProcessor.registerEventDroppedInPrimaryQueue(event);\n+          if (this.eventProcessor != null && this.isPrimary()) {\n+            recordDroppedEvent(clonedEvent);\n           }", "originalCommit": "6ed0c93e122d081ef2549333f7bd26a5b3d6d50a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a5953baa6de17ff13d1342b60559f15a7b3a952b", "url": "https://github.com/apache/geode/commit/a5953baa6de17ff13d1342b60559f15a7b3a952b", "message": "GEODE-8745: Handle race between batch destroy msg and sec event.\n\n   * Primary serial sender receives an event but the sender is not running yet. Hence it has to drop the event.\n   * Primary has to inform the secondary to remove the event from the unprocessedEventsMap.\n   * It has to do that because the event is dropped and the cache listener on the secondary queue will not be triggered to remove it.\n   * Hence, the primary sends BatchDestroyOperation to the secondary with the tail key set to -1 to trigger removal from unprocessedEventMap.\n   * There is a race in which the BatchDestroyOperation arrives before the secondary event.\n   * In this case the event is never removed from the unprocessedEventsMap.\n   * In this fix, if this happens the event ID is placed in the unprocessedTokensMap.\n   * So, when the secondary event arrives, it checks the unprocessedTokensMap and then realizes that the primary has seen the event and there is no need to place the event in the unprocessedEventsMap.", "committedDate": "2020-12-09T06:10:17Z", "type": "commit"}, {"oid": "a5953baa6de17ff13d1342b60559f15a7b3a952b", "url": "https://github.com/apache/geode/commit/a5953baa6de17ff13d1342b60559f15a7b3a952b", "message": "GEODE-8745: Handle race between batch destroy msg and sec event.\n\n   * Primary serial sender receives an event but the sender is not running yet. Hence it has to drop the event.\n   * Primary has to inform the secondary to remove the event from the unprocessedEventsMap.\n   * It has to do that because the event is dropped and the cache listener on the secondary queue will not be triggered to remove it.\n   * Hence, the primary sends BatchDestroyOperation to the secondary with the tail key set to -1 to trigger removal from unprocessedEventMap.\n   * There is a race in which the BatchDestroyOperation arrives before the secondary event.\n   * In this case the event is never removed from the unprocessedEventsMap.\n   * In this fix, if this happens the event ID is placed in the unprocessedTokensMap.\n   * So, when the secondary event arrives, it checks the unprocessedTokensMap and then realizes that the primary has seen the event and there is no need to place the event in the unprocessedEventsMap.", "committedDate": "2020-12-09T06:10:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE1NzkzMA==", "url": "https://github.com/apache/geode/pull/5821#discussion_r539157930", "bodyText": "Same logic as in basicHandlePrimaryEntry", "author": "nabarunnag", "createdAt": "2020-12-09T09:45:26Z", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/serial/SerialGatewaySenderEventProcessor.java", "diffHunk": "@@ -638,6 +639,17 @@ protected boolean basicHandlePrimaryDestroy(final EventID eventId) {\n         ew.event.release();\n         statistics.incUnprocessedEventsRemovedByPrimary();\n         return true;\n+      } else if (addToUnprocessedTokens) {\n+        // Secondary event may not have arrived\n+        Long mapValue =\n+            Long.valueOf(System.currentTimeMillis() + AbstractGatewaySender.TOKEN_TIMEOUT);\n+        Long oldv = this.unprocessedTokens.put(eventId, mapValue);\n+        if (oldv == null) {\n+          statistics.incUnprocessedTokensAddedByPrimary();\n+        } else {\n+          // its ok for oldv to be non-null\n+          // this shouldn't happen anymore @todo add an assertion here\n+        }", "originalCommit": "a5953baa6de17ff13d1342b60559f15a7b3a952b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU2OTIwMw==", "url": "https://github.com/apache/geode/pull/5821#discussion_r539569203", "bodyText": "This empty block can probably be replaced with just a comment.", "author": "DonalEvans", "createdAt": "2020-12-09T19:03:42Z", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/serial/SerialGatewaySenderEventProcessor.java", "diffHunk": "@@ -638,6 +639,17 @@ protected boolean basicHandlePrimaryDestroy(final EventID eventId) {\n         ew.event.release();\n         statistics.incUnprocessedEventsRemovedByPrimary();\n         return true;\n+      } else if (addToUnprocessedTokens) {\n+        // Secondary event may not have arrived\n+        Long mapValue =\n+            Long.valueOf(System.currentTimeMillis() + AbstractGatewaySender.TOKEN_TIMEOUT);\n+        Long oldv = this.unprocessedTokens.put(eventId, mapValue);\n+        if (oldv == null) {\n+          statistics.incUnprocessedTokensAddedByPrimary();\n+        } else {\n+          // its ok for oldv to be non-null\n+          // this shouldn't happen anymore @todo add an assertion here\n+        }", "originalCommit": "a5953baa6de17ff13d1342b60559f15a7b3a952b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU2OTI5Nw==", "url": "https://github.com/apache/geode/pull/5821#discussion_r539569297", "bodyText": "This can just be Long mapValue = System.currentTimeMillis() + AbstractGatewaySender.TOKEN_TIMEOUT;", "author": "DonalEvans", "createdAt": "2020-12-09T19:03:52Z", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/serial/SerialGatewaySenderEventProcessor.java", "diffHunk": "@@ -638,6 +639,17 @@ protected boolean basicHandlePrimaryDestroy(final EventID eventId) {\n         ew.event.release();\n         statistics.incUnprocessedEventsRemovedByPrimary();\n         return true;\n+      } else if (addToUnprocessedTokens) {\n+        // Secondary event may not have arrived\n+        Long mapValue =\n+            Long.valueOf(System.currentTimeMillis() + AbstractGatewaySender.TOKEN_TIMEOUT);", "originalCommit": "a5953baa6de17ff13d1342b60559f15a7b3a952b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU3MTc5MA==", "url": "https://github.com/apache/geode/pull/5821#discussion_r539571790", "bodyText": "These variables are never used, so I think it should be okay to change these to just\nvm4.invoke(\"Creating DS\", () -> WANTestBase.createSenderWithDiskStore(\"ln\", 2, false, 100, 10, \nfalse, true, null, null, true));\nvm5.invoke(\"Creating DS\", () -> WANTestBase.createSenderWithDiskStore(\"ln\", 2, false, 100, 10, \nfalse, true, null, null, true));", "author": "DonalEvans", "createdAt": "2020-12-09T19:07:42Z", "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/serial/SerialWANPersistenceEnabledGatewaySenderDUnitTest.java", "diffHunk": "@@ -577,17 +577,15 @@ public void testReplicatedRegionPersistentWanGateway_restartSenderWithCleanQueue\n     Integer nyPort = (Integer) vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(2, lnPort));\n \n     createCacheInVMs(nyPort, vm2, vm3);\n-    createReceiverInVMs(vm2, vm3);\n \n     createCacheInVMs(lnPort, vm4, vm5, vm6, vm7);\n \n-    String firstDStore = (String) vm4.invoke(() -> WANTestBase.createSenderWithDiskStore(\"ln\", 2,\n-        false, 100, 10, false, true, null, null, true));\n-    String secondDStore = (String) vm5.invoke(() -> WANTestBase.createSenderWithDiskStore(\"ln\", 2,\n-        false, 100, 10, false, true, null, null, true));\n-\n-    logger.info(\"The first ds is \" + firstDStore);\n-    logger.info(\"The second ds is \" + secondDStore);\n+    String firstDStore =\n+        (String) vm4.invoke(\"Creating DS\", () -> WANTestBase.createSenderWithDiskStore(\"ln\", 2,\n+            false, 100, 10, false, true, null, null, true));\n+    String secondDStore =\n+        (String) vm5.invoke(\"Creating DS\", () -> WANTestBase.createSenderWithDiskStore(\"ln\", 2,\n+            false, 100, 10, false, true, null, null, true));", "originalCommit": "a5953baa6de17ff13d1342b60559f15a7b3a952b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU4MTUxOQ==", "url": "https://github.com/apache/geode/pull/5821#discussion_r539581519", "bodyText": "The compiler warning here can be fixed by using AsyncInvocation<?> inv1.", "author": "DonalEvans", "createdAt": "2020-12-09T19:22:43Z", "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/serial/SerialWANPersistenceEnabledGatewaySenderDUnitTest.java", "diffHunk": "@@ -605,26 +603,21 @@ public void testReplicatedRegionPersistentWanGateway_restartSenderWithCleanQueue\n     vm7.invoke(() -> WANTestBase.createPersistentReplicatedRegion(getTestMethodName() + \"_RR\", \"ln\",\n         isOffHeap()));\n \n-    vm4.invoke(() -> WANTestBase.pauseSender(\"ln\"));\n-    vm5.invoke(() -> WANTestBase.pauseSender(\"ln\"));\n-\n-    vm4.invoke(() -> WANTestBase.doPuts(getTestMethodName() + \"_RR\", 1000));\n-\n-    logger.info(\"Completed puts in the region\");\n+    vm4.invoke(\"Puts in the region\" + getTestMethodName() + \"_RR\",\n+        () -> WANTestBase.doPuts(getTestMethodName() + \"_RR\", 1000));\n \n-    vm4.invoke(() -> WANTestBase.stopSender(\"ln\"));\n-    vm5.invoke(() -> WANTestBase.stopSender(\"ln\"));\n \n+    vm4.invoke(\"Stopping ln sender\", () -> WANTestBase.stopSender(\"ln\"));\n+    vm5.invoke(\"Stopping ln sender\", () -> WANTestBase.stopSender(\"ln\"));\n \n-    logger.info(\"Stopped all the senders. \");\n-\n-    AsyncInvocation inv1 = vm4.invokeAsync(() -> WANTestBase.startSenderwithCleanQueues(\"ln\"));\n-    logger.info(\"Started the sender in vm 4\");\n+    createReceiverInVMs(vm2, vm3);\n \n-    vm5.invoke(() -> WANTestBase.startSenderwithCleanQueues(\"ln\"));\n-    logger.info(\"Started the sender in vm 5\");\n+    AsyncInvocation inv1 = vm4.invokeAsync(\"Starting sender with clean queues\",", "originalCommit": "a5953baa6de17ff13d1342b60559f15a7b3a952b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "19fcd34b2917a5129e1607fe851b86dbbd62d721", "url": "https://github.com/apache/geode/commit/19fcd34b2917a5129e1607fe851b86dbbd62d721", "message": "GEODE-8745: Resolving review comments", "committedDate": "2020-12-09T20:38:46Z", "type": "commit"}, {"oid": "19fcd34b2917a5129e1607fe851b86dbbd62d721", "url": "https://github.com/apache/geode/commit/19fcd34b2917a5129e1607fe851b86dbbd62d721", "message": "GEODE-8745: Resolving review comments", "committedDate": "2020-12-09T20:38:46Z", "type": "forcePushed"}]}