{"pr_number": 4690, "pr_title": "GEODE-7746: onServers function throws a NPE if the distributed system is shutdown", "pr_createdAt": "2020-02-11T23:52:09Z", "pr_url": "https://github.com/apache/geode/pull/4690", "timeline": [{"oid": "b73daaa00a480a14489c34e33a932617be4ddd6b", "url": "https://github.com/apache/geode/commit/b73daaa00a480a14489c34e33a932617be4ddd6b", "message": "GEODE-7746: Fix the NullPointerException\n\nAdd null check and throw NoAvailableServersException", "committedDate": "2020-02-06T21:23:30Z", "type": "commit"}, {"oid": "8400ce4d05523a7032ad02d7183803520b794b63", "url": "https://github.com/apache/geode/commit/8400ce4d05523a7032ad02d7183803520b794b63", "message": "WIP: add a DUnit", "committedDate": "2020-02-07T00:42:22Z", "type": "commit"}, {"oid": "153b1ac5fa071f6b785f6c00672cd9ffed368c55", "url": "https://github.com/apache/geode/commit/153b1ac5fa071f6b785f6c00672cd9ffed368c55", "message": "Add dunit test", "committedDate": "2020-02-11T01:55:26Z", "type": "commit"}, {"oid": "f06781261d329060e9cc517384921f9dec49c424", "url": "https://github.com/apache/geode/commit/f06781261d329060e9cc517384921f9dec49c424", "message": "Add assertion", "committedDate": "2020-02-11T23:45:36Z", "type": "commit"}, {"oid": "606a8ea588487f05f1ed97cfba1e4fed2928b322", "url": "https://github.com/apache/geode/commit/606a8ea588487f05f1ed97cfba1e4fed2928b322", "message": "Code formatting", "committedDate": "2020-02-11T23:47:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwNjIyOA==", "url": "https://github.com/apache/geode/pull/4690#discussion_r378006228", "bodyText": "perhaps a more detailed test name describing what the test is trying to test for?", "author": "jhuynh1", "createdAt": "2020-02-12T02:12:00Z", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/execute/FunctionExecutionDUnit.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.execute;\n+\n+import static org.apache.geode.internal.lang.ThrowableUtils.hasCauseType;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.Serializable;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionFactory;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.NoAvailableServersException;\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.test.dunit.AsyncInvocation;\n+import org.apache.geode.test.dunit.rules.ClientVM;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+\n+public class FunctionExecutionDUnit implements Serializable {\n+\n+  public class TestFunction implements Function {\n+\n+    @Override\n+    public void execute(FunctionContext context) {\n+      if (context.getCache().getRegion(\"testRegion\") == null) {\n+        RegionFactory regionFactory = context.getCache().createRegionFactory();\n+        regionFactory.create(\"testRegion\");\n+        context.getResultSender().lastResult(true);\n+      } else {\n+        context.getResultSender().lastResult(false);\n+      }\n+    }\n+\n+    @Override\n+    public String getId() {\n+      return getClass().getSimpleName();\n+    }\n+  }\n+\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule();\n+\n+  @Test\n+  public void test() throws Exception {", "originalCommit": "606a8ea588487f05f1ed97cfba1e4fed2928b322", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwNjQ1OA==", "url": "https://github.com/apache/geode/pull/4690#discussion_r378006458", "bodyText": "Perhaps use awaitility instead of spinning?", "author": "jhuynh1", "createdAt": "2020-02-12T02:13:01Z", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/execute/FunctionExecutionDUnit.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.execute;\n+\n+import static org.apache.geode.internal.lang.ThrowableUtils.hasCauseType;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.Serializable;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionFactory;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.NoAvailableServersException;\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.test.dunit.AsyncInvocation;\n+import org.apache.geode.test.dunit.rules.ClientVM;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+\n+public class FunctionExecutionDUnit implements Serializable {\n+\n+  public class TestFunction implements Function {\n+\n+    @Override\n+    public void execute(FunctionContext context) {\n+      if (context.getCache().getRegion(\"testRegion\") == null) {\n+        RegionFactory regionFactory = context.getCache().createRegionFactory();\n+        regionFactory.create(\"testRegion\");\n+        context.getResultSender().lastResult(true);\n+      } else {\n+        context.getResultSender().lastResult(false);\n+      }\n+    }\n+\n+    @Override\n+    public String getId() {\n+      return getClass().getSimpleName();\n+    }\n+  }\n+\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule();\n+\n+  @Test\n+  public void test() throws Exception {\n+    MemberVM locator = cluster.startLocatorVM(0);\n+    MemberVM server = cluster.startServerVM(1, locator.getPort());\n+    ClientVM client = cluster.startClientVM(2, c -> c.withLocatorConnection(locator.getPort()));\n+\n+    server.invoke(() -> {\n+      Function function = new TestFunction();\n+      FunctionService.registerFunction(function);\n+    });\n+    AsyncInvocation async = client.invokeAsync(() -> {\n+      ClientCache clientCache = ClusterStartupRule.getClientCache();\n+      while (true) {\n+        FunctionService.onServers(clientCache).execute(\"TestFunction\").getResult();\n+      }\n+    });\n+    server.invoke(() -> {\n+      Region region = null;\n+      while (region == null) {\n+        region = ClusterStartupRule.getCache().getRegion(\"testRegion\");", "originalCommit": "606a8ea588487f05f1ed97cfba1e4fed2928b322", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwNjc4Nw==", "url": "https://github.com/apache/geode/pull/4690#discussion_r378006787", "bodyText": "I think there is a chance these asserts don't get called.  I think you'll have to add a throw on line 90-91 so that if the await() doesn't fail, then the test should fail.", "author": "jhuynh1", "createdAt": "2020-02-12T02:14:25Z", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/execute/FunctionExecutionDUnit.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.execute;\n+\n+import static org.apache.geode.internal.lang.ThrowableUtils.hasCauseType;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.Serializable;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionFactory;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.NoAvailableServersException;\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.test.dunit.AsyncInvocation;\n+import org.apache.geode.test.dunit.rules.ClientVM;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+\n+public class FunctionExecutionDUnit implements Serializable {\n+\n+  public class TestFunction implements Function {\n+\n+    @Override\n+    public void execute(FunctionContext context) {\n+      if (context.getCache().getRegion(\"testRegion\") == null) {\n+        RegionFactory regionFactory = context.getCache().createRegionFactory();\n+        regionFactory.create(\"testRegion\");\n+        context.getResultSender().lastResult(true);\n+      } else {\n+        context.getResultSender().lastResult(false);\n+      }\n+    }\n+\n+    @Override\n+    public String getId() {\n+      return getClass().getSimpleName();\n+    }\n+  }\n+\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule();\n+\n+  @Test\n+  public void test() throws Exception {\n+    MemberVM locator = cluster.startLocatorVM(0);\n+    MemberVM server = cluster.startServerVM(1, locator.getPort());\n+    ClientVM client = cluster.startClientVM(2, c -> c.withLocatorConnection(locator.getPort()));\n+\n+    server.invoke(() -> {\n+      Function function = new TestFunction();\n+      FunctionService.registerFunction(function);\n+    });\n+    AsyncInvocation async = client.invokeAsync(() -> {\n+      ClientCache clientCache = ClusterStartupRule.getClientCache();\n+      while (true) {\n+        FunctionService.onServers(clientCache).execute(\"TestFunction\").getResult();\n+      }\n+    });\n+    server.invoke(() -> {\n+      Region region = null;\n+      while (region == null) {\n+        region = ClusterStartupRule.getCache().getRegion(\"testRegion\");\n+      }\n+    });\n+    cluster.stop(1);\n+    cluster.stop(0);\n+    waitForException(async);\n+  }\n+\n+  private void waitForException(AsyncInvocation async) {\n+    try {\n+      async.await();\n+    } catch (Throwable e) {\n+      assertThat(hasCauseType(e, NullPointerException.class)).isFalse();", "originalCommit": "606a8ea588487f05f1ed97cfba1e4fed2928b322", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwNzE1Mg==", "url": "https://github.com/apache/geode/pull/4690#discussion_r378007152", "bodyText": "Also, is there a way we can convert to awaitility so there is no chance a test can hang forever?", "author": "jhuynh1", "createdAt": "2020-02-12T02:16:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwNjc4Nw=="}], "type": "inlineReview"}, {"oid": "77683491ee4352d8809e3d7c4e9de054dfc14724", "url": "https://github.com/apache/geode/commit/77683491ee4352d8809e3d7c4e9de054dfc14724", "message": "Remove the DUnit test\n\nSince the NPE can be reproduced by\nClientServerSessionCacheDUnitTest.startingAClientWithoutServersFails()", "committedDate": "2020-02-13T02:49:49Z", "type": "commit"}, {"oid": "77683491ee4352d8809e3d7c4e9de054dfc14724", "url": "https://github.com/apache/geode/commit/77683491ee4352d8809e3d7c4e9de054dfc14724", "message": "Remove the DUnit test\n\nSince the NPE can be reproduced by\nClientServerSessionCacheDUnitTest.startingAClientWithoutServersFails()", "committedDate": "2020-02-13T02:49:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAxNDA0NA==", "url": "https://github.com/apache/geode/pull/4690#discussion_r379014044", "bodyText": "Now that this changes the exception thrown... will this affect any other parts of function service?  such as retries?", "author": "jhuynh1", "createdAt": "2020-02-13T17:37:43Z", "path": "extensions/geode-modules/src/distributedTest/java/org/apache/geode/modules/util/ClientServerSessionCacheDUnitTest.java", "diffHunk": "@@ -105,7 +105,7 @@ public void startingAClientWithoutServersFails() {\n     final VM client = VM.getVM(2);\n \n     assertThatThrownBy(() -> client.invoke(this::startClientSessionCache))\n-        .hasCauseInstanceOf(FunctionException.class);\n+        .hasCauseInstanceOf(NoAvailableServersException.class);", "originalCommit": "77683491ee4352d8809e3d7c4e9de054dfc14724", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA2MzI1MQ==", "url": "https://github.com/apache/geode/pull/4690#discussion_r379063251", "bodyText": "This is a test code change. I don't think it will affect the product behavior of function service.\nWhen there is no server in the cluster, I don't think there is retry for function service. It should throw NoAvailableServersException.\nThe NullPointerException(NPE) bug (GEODE-7746) can be reproduced by this test from develop branch without any code change. The test originally expects a FunctionException which wraps a NPE as its cause. The NPE is exactly GEODE-7746, same stack trace. The purpose of the test is to test the case of function execution when there is no server. It should throw NoAvailableServersException(ServerConnectivityException), instead of FunctionException which wraps a NPE. The related catch and throw code is https://github.com/apache/geode/blob/develop/geode-core/src/main/java/org/apache/geode/internal/cache/execute/ServerFunctionExecutor.java#L182-L190\nand https://github.com/apache/geode/blob/develop/geode-core/src/main/java/org/apache/geode/internal/cache/execute/ServerFunctionExecutor.java#L227-L235", "author": "jchen21", "createdAt": "2020-02-13T19:12:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAxNDA0NA=="}], "type": "inlineReview"}]}