{"pr_number": 5236, "pr_title": "GEODE-8241: Locator observes locator-wait-time", "pr_createdAt": "2020-06-11T00:41:11Z", "pr_url": "https://github.com/apache/geode/pull/5236", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzMjY5Ng==", "url": "https://github.com/apache/geode/pull/5236#discussion_r438832696", "bodyText": "There are a couple of these auto-generated try/catch statements in the test.  If they're failure conditions shouldn't the test fail?  If they're not, what good are these stack traces?", "author": "bschuchardt", "createdAt": "2020-06-11T14:34:36Z", "path": "geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/MembershipIntegrationTest.java", "diffHunk": "@@ -172,6 +179,91 @@ public void secondMembershipCanJoinUsingTheSecondLocatorToStart()\n     stop(locator2, locator1);\n   }\n \n+  @Test\n+  public void secondMembershipPausesForLocatorWaitTime()\n+      throws IOException, MemberStartupException {\n+\n+    /*\n+     * Start a locator for the coordinator (membership) so we have a port for it.\n+     *\n+     * Its locator-wait-time is set to 0 so it eventually (soon after membership is started) forms a\n+     * distributed system and becomes a coordinator.\n+     */\n+\n+    final MembershipLocator<MemberIdentifier> coordinatorLocator = createLocator(0);\n+    coordinatorLocator.start();\n+    final int coordinatorLocatorPort = coordinatorLocator.getPort();\n+\n+    final Membership<MemberIdentifier> coordinatorMembership =\n+        createMembership(coordinatorLocator, coordinatorLocatorPort);\n+\n+    /*\n+     * We have not even started the membership yet \u2014 connection attempts will certainly fail until\n+     * we do. This is a bit like the locator (host) not being present in DNS (yet).\n+     */\n+\n+    /*\n+     * Start a second locator and membership trying to join via the coordinator (membership) that\n+     * hasn't yet started behind the port.\n+     *\n+     * Set its locator-wait-time so it'll not become a coordinator right away, allowing time for the\n+     * other member to start and become a coordinator.\n+     *\n+     * Calculate the locator-wait-time to be greater than the minimum wait time for connecting to a\n+     * locator.\n+     */\n+\n+    final MembershipLocator<MemberIdentifier> lateJoiningLocator = createLocator(0);\n+    lateJoiningLocator.start();\n+    final int lateJoiningLocatorPort = lateJoiningLocator.getPort();\n+\n+    final int[] lateJoiningMembershipLocatorPorts =\n+        new int[] {coordinatorLocatorPort, lateJoiningLocatorPort};\n+\n+    final Duration minimumJoinWaitTime = Duration\n+        .ofMillis(2_000) // expected amount of sleep time per loop in GMSJoinLeave.join()\n+        .multipliedBy(lateJoiningMembershipLocatorPorts.length * 2); // expected number of loops\n+    final int locatorWaitTime = (int) (3 * minimumJoinWaitTime.getSeconds());\n+\n+    final MembershipConfig lateJoiningMembershipConfig =\n+        createMembershipConfig(true, locatorWaitTime, lateJoiningMembershipLocatorPorts);\n+    final Membership<MemberIdentifier> lateJoiningMembership =\n+        createMembership(lateJoiningMembershipConfig, lateJoiningLocator);\n+\n+    CompletableFuture<Void> lateJoiningMembershipStartup = executorServiceRule.runAsync(() -> {\n+      try {\n+        start(lateJoiningMembership);\n+      } catch (MemberStartupException e) {\n+        e.printStackTrace();", "originalCommit": "c49c8bcc4d58ff36e16f98cc1177feb1cd0a8a12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkzODE5NA==", "url": "https://github.com/apache/geode/pull/5236#discussion_r438938194", "bodyText": "Updated in latest commits", "author": "aaronlindsey", "createdAt": "2020-06-11T17:05:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzMjY5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkzNzM1OQ==", "url": "https://github.com/apache/geode/pull/5236#discussion_r438937359", "bodyText": "It seems like it would be better to reference the same constants that are used in GMSJoinLeave instead of hard-coding this value.", "author": "aaronlindsey", "createdAt": "2020-06-11T17:04:13Z", "path": "geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/MembershipIntegrationTest.java", "diffHunk": "@@ -172,6 +179,91 @@ public void secondMembershipCanJoinUsingTheSecondLocatorToStart()\n     stop(locator2, locator1);\n   }\n \n+  @Test\n+  public void secondMembershipPausesForLocatorWaitTime()\n+      throws IOException, MemberStartupException {\n+\n+    /*\n+     * Start a locator for the coordinator (membership) so we have a port for it.\n+     *\n+     * Its locator-wait-time is set to 0 so it eventually (soon after membership is started) forms a\n+     * distributed system and becomes a coordinator.\n+     */\n+\n+    final MembershipLocator<MemberIdentifier> coordinatorLocator = createLocator(0);\n+    coordinatorLocator.start();\n+    final int coordinatorLocatorPort = coordinatorLocator.getPort();\n+\n+    final Membership<MemberIdentifier> coordinatorMembership =\n+        createMembership(coordinatorLocator, coordinatorLocatorPort);\n+\n+    /*\n+     * We have not even started the membership yet \u2014 connection attempts will certainly fail until\n+     * we do. This is a bit like the locator (host) not being present in DNS (yet).\n+     */\n+\n+    /*\n+     * Start a second locator and membership trying to join via the coordinator (membership) that\n+     * hasn't yet started behind the port.\n+     *\n+     * Set its locator-wait-time so it'll not become a coordinator right away, allowing time for the\n+     * other member to start and become a coordinator.\n+     *\n+     * Calculate the locator-wait-time to be greater than the minimum wait time for connecting to a\n+     * locator.\n+     */\n+\n+    final MembershipLocator<MemberIdentifier> lateJoiningLocator = createLocator(0);\n+    lateJoiningLocator.start();\n+    final int lateJoiningLocatorPort = lateJoiningLocator.getPort();\n+\n+    final int[] lateJoiningMembershipLocatorPorts =\n+        new int[] {coordinatorLocatorPort, lateJoiningLocatorPort};\n+\n+    final Duration minimumJoinWaitTime = Duration\n+        .ofMillis(2_000) // expected amount of sleep time per loop in GMSJoinLeave.join()", "originalCommit": "c49c8bcc4d58ff36e16f98cc1177feb1cd0a8a12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkzODMzNA==", "url": "https://github.com/apache/geode/pull/5236#discussion_r438938334", "bodyText": "Updated in latest commits", "author": "aaronlindsey", "createdAt": "2020-06-11T17:06:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkzNzM1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0MTQzMg==", "url": "https://github.com/apache/geode/pull/5236#discussion_r440341432", "bodyText": "where does 3 come from?", "author": "Bill", "createdAt": "2020-06-15T17:43:09Z", "path": "geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/MembershipIntegrationTest.java", "diffHunk": "@@ -172,6 +181,92 @@ public void secondMembershipCanJoinUsingTheSecondLocatorToStart()\n     stop(locator2, locator1);\n   }\n \n+  @Test\n+  public void secondMembershipPausesForLocatorWaitTime()\n+      throws IOException, MemberStartupException {\n+\n+    /*\n+     * Start a locator for the coordinator (membership) so we have a port for it.\n+     *\n+     * Its locator-wait-time is set to 0 so it eventually (soon after membership is started) forms a\n+     * distributed system and becomes a coordinator.\n+     */\n+\n+    final MembershipLocator<MemberIdentifier> coordinatorLocator = createLocator(0);\n+    coordinatorLocator.start();\n+    final int coordinatorLocatorPort = coordinatorLocator.getPort();\n+\n+    final Membership<MemberIdentifier> coordinatorMembership =\n+        createMembership(coordinatorLocator, coordinatorLocatorPort);\n+\n+    /*\n+     * We have not even started the membership yet \u2014 connection attempts will certainly fail until\n+     * we do. This is a bit like the locator (host) not being present in DNS (yet).\n+     */\n+\n+    /*\n+     * Start a second locator and membership trying to join via the coordinator (membership) that\n+     * hasn't yet started behind the port.\n+     *\n+     * Set its locator-wait-time so it'll not become a coordinator right away, allowing time for the\n+     * other member to start and become a coordinator.\n+     *\n+     * Calculate the locator-wait-time to be greater than the minimum wait time for connecting to a\n+     * locator.\n+     */\n+\n+    final MembershipLocator<MemberIdentifier> lateJoiningLocator = createLocator(0);\n+    lateJoiningLocator.start();\n+    final int lateJoiningLocatorPort = lateJoiningLocator.getPort();\n+\n+    final int[] lateJoiningMembershipLocatorPorts =\n+        new int[] {coordinatorLocatorPort, lateJoiningLocatorPort};\n+\n+    final Duration minimumJoinWaitTime = Duration\n+        .ofMillis(JOIN_RETRY_SLEEP + FIND_LOCATOR_RETRY_SLEEP) // amount of sleep time per retry\n+        .multipliedBy(lateJoiningMembershipLocatorPorts.length * 2); // expected number of retries\n+    final int locatorWaitTime = (int) (3 * minimumJoinWaitTime.getSeconds());", "originalCommit": "90479c43a5f74c0b90cf29bb2042777545ba7bec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ0NzM4NQ==", "url": "https://github.com/apache/geode/pull/5236#discussion_r440447385", "bodyText": "There is a minimum amount of time a locator will wait to become the coordinator, regardless of the value for locator-wait-time. The variable, minimumJoinWaitTime, is meant to capture that value. By setting locator-wait-time to 3x the minimumJoinWaitTime, we are just trying to make sure the locator-wait-time is sufficiently larger than the minimum so we can reliably detect whether the lateJoiningMembership is waiting for the full locator-wait-time and not just the minimum wait time.", "author": "aaronlindsey", "createdAt": "2020-06-15T21:07:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0MTQzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgyMzQ2OA==", "url": "https://github.com/apache/geode/pull/5236#discussion_r441823468", "bodyText": "I added a comment to the code in the latest commit.", "author": "aaronlindsey", "createdAt": "2020-06-17T20:44:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0MTQzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0MTgxNw==", "url": "https://github.com/apache/geode/pull/5236#discussion_r440341817", "bodyText": "where does 2 come from? even if you don't want to explicitly reference an internal constant, it'd be nice to document where that constant lives", "author": "Bill", "createdAt": "2020-06-15T17:43:57Z", "path": "geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/MembershipIntegrationTest.java", "diffHunk": "@@ -172,6 +181,92 @@ public void secondMembershipCanJoinUsingTheSecondLocatorToStart()\n     stop(locator2, locator1);\n   }\n \n+  @Test\n+  public void secondMembershipPausesForLocatorWaitTime()\n+      throws IOException, MemberStartupException {\n+\n+    /*\n+     * Start a locator for the coordinator (membership) so we have a port for it.\n+     *\n+     * Its locator-wait-time is set to 0 so it eventually (soon after membership is started) forms a\n+     * distributed system and becomes a coordinator.\n+     */\n+\n+    final MembershipLocator<MemberIdentifier> coordinatorLocator = createLocator(0);\n+    coordinatorLocator.start();\n+    final int coordinatorLocatorPort = coordinatorLocator.getPort();\n+\n+    final Membership<MemberIdentifier> coordinatorMembership =\n+        createMembership(coordinatorLocator, coordinatorLocatorPort);\n+\n+    /*\n+     * We have not even started the membership yet \u2014 connection attempts will certainly fail until\n+     * we do. This is a bit like the locator (host) not being present in DNS (yet).\n+     */\n+\n+    /*\n+     * Start a second locator and membership trying to join via the coordinator (membership) that\n+     * hasn't yet started behind the port.\n+     *\n+     * Set its locator-wait-time so it'll not become a coordinator right away, allowing time for the\n+     * other member to start and become a coordinator.\n+     *\n+     * Calculate the locator-wait-time to be greater than the minimum wait time for connecting to a\n+     * locator.\n+     */\n+\n+    final MembershipLocator<MemberIdentifier> lateJoiningLocator = createLocator(0);\n+    lateJoiningLocator.start();\n+    final int lateJoiningLocatorPort = lateJoiningLocator.getPort();\n+\n+    final int[] lateJoiningMembershipLocatorPorts =\n+        new int[] {coordinatorLocatorPort, lateJoiningLocatorPort};\n+\n+    final Duration minimumJoinWaitTime = Duration\n+        .ofMillis(JOIN_RETRY_SLEEP + FIND_LOCATOR_RETRY_SLEEP) // amount of sleep time per retry\n+        .multipliedBy(lateJoiningMembershipLocatorPorts.length * 2); // expected number of retries", "originalCommit": "90479c43a5f74c0b90cf29bb2042777545ba7bec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ0ODU2OQ==", "url": "https://github.com/apache/geode/pull/5236#discussion_r440448569", "bodyText": "It comes from this line. I could assign the 2 to a constant and reference that if it would be clearer.", "author": "aaronlindsey", "createdAt": "2020-06-15T21:09:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0MTgxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgyMzc1NQ==", "url": "https://github.com/apache/geode/pull/5236#discussion_r441823755", "bodyText": "I extracted a method for calculating the minimum number of retries before becoming coordinator in the latest commit.", "author": "aaronlindsey", "createdAt": "2020-06-17T20:45:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0MTgxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0Mzc2NQ==", "url": "https://github.com/apache/geode/pull/5236#discussion_r440343765", "bodyText": "where does this 2 come from?", "author": "Bill", "createdAt": "2020-06-15T17:47:27Z", "path": "geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/MembershipIntegrationTest.java", "diffHunk": "@@ -172,6 +181,92 @@ public void secondMembershipCanJoinUsingTheSecondLocatorToStart()\n     stop(locator2, locator1);\n   }\n \n+  @Test\n+  public void secondMembershipPausesForLocatorWaitTime()\n+      throws IOException, MemberStartupException {\n+\n+    /*\n+     * Start a locator for the coordinator (membership) so we have a port for it.\n+     *\n+     * Its locator-wait-time is set to 0 so it eventually (soon after membership is started) forms a\n+     * distributed system and becomes a coordinator.\n+     */\n+\n+    final MembershipLocator<MemberIdentifier> coordinatorLocator = createLocator(0);\n+    coordinatorLocator.start();\n+    final int coordinatorLocatorPort = coordinatorLocator.getPort();\n+\n+    final Membership<MemberIdentifier> coordinatorMembership =\n+        createMembership(coordinatorLocator, coordinatorLocatorPort);\n+\n+    /*\n+     * We have not even started the membership yet \u2014 connection attempts will certainly fail until\n+     * we do. This is a bit like the locator (host) not being present in DNS (yet).\n+     */\n+\n+    /*\n+     * Start a second locator and membership trying to join via the coordinator (membership) that\n+     * hasn't yet started behind the port.\n+     *\n+     * Set its locator-wait-time so it'll not become a coordinator right away, allowing time for the\n+     * other member to start and become a coordinator.\n+     *\n+     * Calculate the locator-wait-time to be greater than the minimum wait time for connecting to a\n+     * locator.\n+     */\n+\n+    final MembershipLocator<MemberIdentifier> lateJoiningLocator = createLocator(0);\n+    lateJoiningLocator.start();\n+    final int lateJoiningLocatorPort = lateJoiningLocator.getPort();\n+\n+    final int[] lateJoiningMembershipLocatorPorts =\n+        new int[] {coordinatorLocatorPort, lateJoiningLocatorPort};\n+\n+    final Duration minimumJoinWaitTime = Duration\n+        .ofMillis(JOIN_RETRY_SLEEP + FIND_LOCATOR_RETRY_SLEEP) // amount of sleep time per retry\n+        .multipliedBy(lateJoiningMembershipLocatorPorts.length * 2); // expected number of retries\n+    final int locatorWaitTime = (int) (3 * minimumJoinWaitTime.getSeconds());\n+\n+    final MembershipConfig lateJoiningMembershipConfig =\n+        createMembershipConfig(true, locatorWaitTime, lateJoiningMembershipLocatorPorts);\n+    final Membership<MemberIdentifier> lateJoiningMembership =\n+        createMembership(lateJoiningMembershipConfig, lateJoiningLocator);\n+\n+    CompletableFuture<Void> lateJoiningMembershipStartup = executorServiceRule.runAsync(() -> {\n+      try {\n+        start(lateJoiningMembership);\n+      } catch (MemberStartupException e) {\n+        throw new RuntimeException(e);\n+      }\n+    });\n+\n+    /*\n+     * Now start the coordinator (membership), after waiting longer than the minimum wait time for\n+     * connecting to a locator but shorter than the locator-wait-time.\n+     */\n+\n+    CompletableFuture<Void> coordinatorMembershipStartup = executorServiceRule.runAsync(() -> {\n+      try {\n+        Thread.sleep(2 * minimumJoinWaitTime.toMillis());", "originalCommit": "90479c43a5f74c0b90cf29bb2042777545ba7bec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ1MTMwNA==", "url": "https://github.com/apache/geode/pull/5236#discussion_r440451304", "bodyText": "Again, minimumJoinWaitTime is the minimum amount of time a locator will wait to become a coordinator. We are just trying to make sure we sleep for longer than the minimum but shorter than the locator-wait-time so we can detect whether the lateJoiningMembership is waiting for the full locator-wait-time and not just the minimum wait time.", "author": "aaronlindsey", "createdAt": "2020-06-15T21:15:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0Mzc2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgyMzQzNw==", "url": "https://github.com/apache/geode/pull/5236#discussion_r441823437", "bodyText": "I added a comment to the code in the latest commit.", "author": "aaronlindsey", "createdAt": "2020-06-17T20:44:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0Mzc2NQ=="}], "type": "inlineReview"}, {"oid": "19c4e2d692634ab986162aeb19251d042daae073", "url": "https://github.com/apache/geode/commit/19c4e2d692634ab986162aeb19251d042daae073", "message": "GEODE-8241: Locator observes locator-wait-time\n\nIn the case where a locator starts up and is unable to connect to any\nother locators, it may decide to become the membership coordinator even\nif locator-wait-time has not elapsed.\n\nThis change addresses this issue by requiring a locator to wait for\nlocator-wait-time before deciding to become the coordinator.\n\nCo-authored-by: Aaron Lindsey <alindsey@vmware.com>\nCo-Authored-By: Vincent Ford <vford@pivotal.io>\nCo-authored-by: Bill Burcham <bburcham@pivotal.io>", "committedDate": "2020-06-18T18:01:11Z", "type": "commit"}, {"oid": "9d4dc92a09b4ff4d400ee64275c9a9aa3eb64901", "url": "https://github.com/apache/geode/commit/9d4dc92a09b4ff4d400ee64275c9a9aa3eb64901", "message": "Make the test fail when an exception other than InterruptedException is\nthrown within a CompleteableFuture\n\nAuthored-by: Aaron Lindsey <alindsey@vmware.com>", "committedDate": "2020-06-18T18:01:11Z", "type": "commit"}, {"oid": "8024749a29ebbb7c91f719405a640312c848e78c", "url": "https://github.com/apache/geode/commit/8024749a29ebbb7c91f719405a640312c848e78c", "message": "Extract find coordinator sleep time to constant and reference sleep time\nconstants from test\n\nAuthored-by: Aaron Lindsey <alindsey@vmware.com>", "committedDate": "2020-06-18T18:01:11Z", "type": "commit"}, {"oid": "6c57e83a02bfc7af9aec63090085846fe0261281", "url": "https://github.com/apache/geode/commit/6c57e83a02bfc7af9aec63090085846fe0261281", "message": "Document constants in test and extract method for calculating the\nminimum number of retries before becoming coordinator\n\nAuthored-by: Aaron Lindsey <alindsey@vmware.com>", "committedDate": "2020-06-18T18:01:11Z", "type": "commit"}, {"oid": "1f483897818923b79515fbfe9c33277ea9ed98e6", "url": "https://github.com/apache/geode/commit/1f483897818923b79515fbfe9c33277ea9ed98e6", "message": "Increase locator-wait-time to make chance of flakiness negligible\n\n- Remove second CompletableFuture because it wasn't necessary\n\nAuthored-by: Aaron Lindsey <alindsey@vmware.com>", "committedDate": "2020-06-18T18:01:11Z", "type": "commit"}, {"oid": "1f483897818923b79515fbfe9c33277ea9ed98e6", "url": "https://github.com/apache/geode/commit/1f483897818923b79515fbfe9c33277ea9ed98e6", "message": "Increase locator-wait-time to make chance of flakiness negligible\n\n- Remove second CompletableFuture because it wasn't necessary\n\nAuthored-by: Aaron Lindsey <alindsey@vmware.com>", "committedDate": "2020-06-18T18:01:11Z", "type": "forcePushed"}]}