{"pr_number": 4966, "pr_title": "GEODE-7851: Pulse logout requests end of OAuth session", "pr_createdAt": "2020-04-16T00:10:59Z", "pr_url": "https://github.com/apache/geode/pull/4966", "timeline": [{"oid": "f9d94792aa7e251e283f362348e586238894dab4", "url": "https://github.com/apache/geode/commit/f9d94792aa7e251e283f362348e586238894dab4", "message": "GEODE-7851: Pulse logout requests end of OAuth session\n\nWhen Pulse is configured to use OAuth, and a user logs out of Pulse,\nPulse redirects the browser to a page where the user can take action to\nend their session. The available actions depend on the OAuth provider,\nbut may include revoking the token or logging out of the OAuth provider\nentirely.\n\nMain changes:\n\n- Changed OAuthSecurityConfig to install two logout handlers: A\n  RepositoryLogoutHandler (renamed from LogoutHandler) and an\n  OidcClientInitiatedLogoutSuccessHandler.\n\n- Added a pulse.security.oauth.endSessionEndpoint property to specify\n  the URL to which the OidcClientInitiatedLogoutSuccessHandler should\n  redirect the browser on logout.\n\n- Configured the OAuthSecurityConfig to add the \"end session endpoint\"\n  property value to the client configuration metadata.  On logout, the\n  OidcClientInitiatedLogoutSuccessHandler redirects the browser to this\n  endpoint, where the user can take action to end the session.\n\n- In the OAuthClientConfig class (extracted from OAuthSecurityConfig),\n  restored the code to explicitly list the scopes that Pulse is\n  requesting, in particular to list \"openid\" in the scopes. Though\n  authentication works just fine without that explicit list, the\n  OidcClientInitiatedLogoutSuccessHandler does not. The\n  OidcClientInitiatedLogoutSuccessHandler handles logout only if the the\n  principal is an OidcUser. If \"openid\" is not explicitly listed in the\n  client's scopes. Spring creates OAuth2User principals instead of\n  OidcUser principals, and OidcClientInitiatedLogoutSuccessHandler\n  return without redirecting the browser.\n\nAlso refactored to support the above changes:\n\n- Moved the oauth client service configuration from OAuthSecurityConfig\n  to a new OAuthClientConfig class. This breaks Respository's dependence\n  on OAuthSecurityConfig, which in turn (through the LogoutHandler)\n  depended on Repository. Repository now gets its\n  OAuth2AuthorizedClientService from the OAuthClientConfig class, which\n  does not in turn depend on Repository.\n\n- Marked two Repository constructors as non-required. Spring will pick\n  whichever one has the most dependencies it can satisfy. So if the\n  profile specifies an OAuth2AuthorizedClientService, Spring will call\n  the constructor that takes one of those. Otherwise Spring will call\n  the no-args constructor.\n\n- Renamed LogoutHandler to RepositoryLogoutHandler to better reflect its\n  specific responsibilities.\n\n- Changed RepositoryLogoutHandler to implement LogoutHandler instead of\n  LogoutSuccessHandler. Now it does its work *during* logout instead of\n  *after.*\n\n- Changed DefaultSecurityConfig to specify the logout success URL\n  directly instead of via a logout success handler. (OAuthSecurityConfig\n  no longer needs a logout success URL, because the OIDC logout handler\n  redirects to the OAuth provider instead.)\n\nCo-authored-by: Dale Emery <demery@pivotal.io>\nCo-authored-by: Joris Melchior <joris.melchior@gmail.com>", "committedDate": "2020-04-16T00:04:31Z", "type": "commit"}, {"oid": "410ffcadf5dbbdccb9fadb7cdcbeba592e6cd092", "url": "https://github.com/apache/geode/commit/410ffcadf5dbbdccb9fadb7cdcbeba592e6cd092", "message": "Change 'End-User' to 'end user' in docs", "committedDate": "2020-04-16T18:05:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5OTc3Mg==", "url": "https://github.com/apache/geode/pull/4966#discussion_r410499772", "bodyText": "Any particular reason we move this out of the OauthSecurityConfig?", "author": "jinmeiliao", "createdAt": "2020-04-17T22:30:17Z", "path": "geode-pulse/src/main/java/org/apache/geode/tools/pulse/internal/security/OAuthClientConfig.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.tools.pulse.internal.security;\n+\n+import static java.util.Collections.singletonMap;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.oidc.web.logout.OidcClientInitiatedLogoutSuccessHandler;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.AuthenticatedPrincipalOAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AuthorizationGrantType;\n+\n+/**\n+ * Configures Pulse to use the OAuth 2 provider defined by properties in {@code pulse.properties}.\n+ */\n+@Configuration\n+@Profile(\"pulse.authentication.oauth\")\n+@PropertySource(\"classpath:pulse.properties\")\n+public class OAuthClientConfig {", "originalCommit": "410ffcadf5dbbdccb9fadb7cdcbeba592e6cd092", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwMjIxMA==", "url": "https://github.com/apache/geode/pull/4966#discussion_r410502210", "bodyText": "Yes: To break a dependency cycle. For details, see the commit message.", "author": "demery-pivotal", "createdAt": "2020-04-17T22:39:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5OTc3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwMDA3Mg==", "url": "https://github.com/apache/geode/pull/4966#discussion_r410500072", "bodyText": "Is this \"end_session_endpoint\" provider specific? i.e. it's a strictly UAA thing or others have that as well? Can it be null?", "author": "jinmeiliao", "createdAt": "2020-04-17T22:31:31Z", "path": "geode-pulse/src/main/java/org/apache/geode/tools/pulse/internal/security/OAuthClientConfig.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.tools.pulse.internal.security;\n+\n+import static java.util.Collections.singletonMap;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.oidc.web.logout.OidcClientInitiatedLogoutSuccessHandler;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.AuthenticatedPrincipalOAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AuthorizationGrantType;\n+\n+/**\n+ * Configures Pulse to use the OAuth 2 provider defined by properties in {@code pulse.properties}.\n+ */\n+@Configuration\n+@Profile(\"pulse.authentication.oauth\")\n+@PropertySource(\"classpath:pulse.properties\")\n+public class OAuthClientConfig {\n+  @Value(\"${pulse.oauth.providerId}\")\n+  private String providerId;\n+  @Value(\"${pulse.oauth.providerName}\")\n+  private String providerName;\n+  @Value(\"${pulse.oauth.clientId}\")\n+  private String clientId;\n+  @Value(\"${pulse.oauth.clientSecret}\")\n+  private String clientSecret;\n+  @Value(\"${pulse.oauth.authorizationUri}\")\n+  private String authorizationUri;\n+  @Value(\"${pulse.oauth.tokenUri}\")\n+  private String tokenUri;\n+  @Value(\"${pulse.oauth.userInfoUri}\")\n+  private String userInfoUri;\n+  @Value(\"${pulse.oauth.jwkSetUri}\")\n+  private String jwkSetUri;\n+  @Value(\"${pulse.oauth.endSessionEndpoint}\")\n+  private String endSessionEndpoint;\n+  @Value(\"${pulse.oauth.userNameAttributeName}\")\n+  private String userNameAttributeName;\n+\n+  @Bean\n+  ClientRegistration clientRegistration() {\n+    return ClientRegistration.withRegistrationId(providerId)\n+        .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)\n+        .redirectUriTemplate(\"{baseUrl}/login/oauth2/code/{registrationId}\")\n+        .clientId(clientId)\n+        .clientSecret(clientSecret)\n+        .scope(\"openid\", \"CLUSTER:READ\", \"CLUSTER:WRITE\", \"DATA:READ\", \"DATA:WRITE\")\n+        .authorizationUri(authorizationUri)\n+        .tokenUri(tokenUri)\n+        .userInfoUri(userInfoUri)\n+        .jwkSetUri(jwkSetUri)\n+        .providerConfigurationMetadata(", "originalCommit": "410ffcadf5dbbdccb9fadb7cdcbeba592e6cd092", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwNzM0Nw==", "url": "https://github.com/apache/geode/pull/4966#discussion_r410507347", "bodyText": "That's defined by a draft standard: https://openid.net/specs/openid-connect-session-1_0.html\nAs far as I can tell, that standard has never been approved, though some OpenID Connect providers do implement it. See for example this Okta documentation: https://developer.okta.com/docs/reference/api/oidc/#well-known-openid-configuration\nThe sad thing is that UAA does not implement it. But redirecting to UAA's \"profile\" page has a similar effect. Not exactly what that draft standard defines, but similar.\nWith the current commit, if you leave the property undefined, Spring assigns the property value expression (\"${pulse.oauth.userNameAttributeName}\") to the field, and the logout success handler fails on logout.\nWe did not try supplying null. I'll run a few experiments now. I think the logout success handler will simply skip the \"end session\" endpoint, and go straight to the \"logout success\" URL (which we will need to define if we allow the end session endpoint to be null).", "author": "demery-pivotal", "createdAt": "2020-04-17T23:00:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwMDA3Mg=="}], "type": "inlineReview"}]}