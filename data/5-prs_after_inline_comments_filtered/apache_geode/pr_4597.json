{"pr_number": 4597, "pr_title": "GEODE-7703: Catch IndexWriter Exceptions", "pr_createdAt": "2020-01-15T23:32:36Z", "pr_url": "https://github.com/apache/geode/pull/4597", "timeline": [{"oid": "e24f1a44dd34ffba93620a13994d3165ff0cdb12", "url": "https://github.com/apache/geode/commit/e24f1a44dd34ffba93620a13994d3165ff0cdb12", "message": "GEODE-7703: Catch IndexWriter Exceptions\n\nThe IndexWriter initialization might fail when other threads are\nupdating the fileAndChunkRegion, which can be triggered by other normal\noperations (query, event listener, close, reindex, etc.). This doesn't\nhappen often and, instead of propagating the exception to the caller\nand failing, Geode now catches it and returns null to let the callers\nretry.\n\n- Added unit and distrbuted tests.\n- Return null instead of re-throwing the IOException while building\n  the Lucene IndexWriter.\n\nCo-authored-by: Xiaojian Zhou <gzhou@pivotal.io>", "committedDate": "2020-01-15T23:31:38Z", "type": "commit"}, {"oid": "6fa8a473d23e543303fd8a6c2adf68bd41664d96", "url": "https://github.com/apache/geode/commit/6fa8a473d23e543303fd8a6c2adf68bd41664d96", "message": "GEODE-7703: Log stack trace exception information.", "committedDate": "2020-01-16T00:09:41Z", "type": "commit"}, {"oid": "b638f121c695253f8068edd5a5ede388bca1a89d", "url": "https://github.com/apache/geode/commit/b638f121c695253f8068edd5a5ede388bca1a89d", "message": "GEODE-7703: Reduce test wait time.", "committedDate": "2020-01-16T00:17:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcxODM1NA==", "url": "https://github.com/apache/geode/pull/4597#discussion_r367718354", "bodyText": "Does this test need to be parameterized if there is only one parameter?", "author": "DonalEvans", "createdAt": "2020-01-17T00:32:41Z", "path": "geode-lucene/src/distributedTest/java/org/apache/geode/cache/lucene/internal/IndexRepositoryFactoryDistributedTest.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache.lucene.internal;\n+\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.fail;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.IntStream;\n+\n+import junitparams.JUnitParamsRunner;\n+import junitparams.Parameters;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import org.apache.geode.DataSerializable;\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.PartitionAttributesFactory;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.cache.lucene.LuceneService;\n+import org.apache.geode.cache.lucene.LuceneServiceProvider;\n+import org.apache.geode.cache.lucene.test.LuceneTestUtilities;\n+import org.apache.geode.distributed.DistributedLockService;\n+import org.apache.geode.internal.cache.BucketRegion;\n+import org.apache.geode.internal.cache.PartitionedRegion;\n+import org.apache.geode.internal.cache.PartitionedRegionDataStore;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+\n+@RunWith(JUnitParamsRunner.class)\n+public class IndexRepositoryFactoryDistributedTest implements Serializable {\n+  private static final String INDEX_NAME = \"index\";\n+  private static final String REGION_NAME = \"region\";\n+  private static final String DEFAULT_FIELD = \"text\";\n+  protected int locatorPort;\n+  protected MemberVM locator, dataStore1, dataStore2;\n+\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule(5);\n+\n+  @Before\n+  public void setUp() {\n+    locator = cluster.startLocatorVM(0);\n+    locatorPort = locator.getPort();\n+    dataStore1 = cluster.startServerVM(1, locatorPort);\n+    dataStore2 = cluster.startServerVM(2, locatorPort);\n+  }\n+\n+  private Cache getCache() {\n+    Cache cache = ClusterStartupRule.getCache();\n+    assertThat(cache).isNotNull();\n+\n+    return cache;\n+  }\n+\n+  private void initDataStoreAndLuceneIndex(RegionShortcut regionShortcut) {\n+    Cache cache = getCache();\n+    LuceneService luceneService = LuceneServiceProvider.get(cache);\n+    luceneService.createIndexFactory().setFields(DEFAULT_FIELD).create(INDEX_NAME, REGION_NAME);\n+\n+    cache.<Integer, TestObject>createRegionFactory(regionShortcut)\n+        .setPartitionAttributes(new PartitionAttributesFactory<Integer, TestObject>()\n+            .setTotalNumBuckets(1).create())\n+        .create(REGION_NAME);\n+  }\n+\n+  private void insertEntries() {\n+    Cache cache = getCache();\n+    Region<Integer, TestObject> region = cache.getRegion(REGION_NAME);\n+    IntStream.range(0, 1000).forEach(i -> region.put(i, new TestObject(\"hello world\" + i)));\n+  }\n+\n+  private void assertPrimariesAndSecondaries(int primaries, int secondaries) {\n+    Cache cache = getCache();\n+    PartitionedRegionDataStore partitionedRegionDataStore =\n+        ((PartitionedRegion) cache.getRegion(REGION_NAME)).getDataStore();\n+    assertThat(partitionedRegionDataStore.getAllLocalPrimaryBucketIds().size())\n+        .isEqualTo(primaries);\n+    assertThat((partitionedRegionDataStore.getAllLocalBucketIds().size()\n+        - partitionedRegionDataStore.getAllLocalPrimaryBucketIds().size())).isEqualTo(secondaries);\n+  }\n+\n+  private BucketRegion getFileAndChunkBucket() {\n+    Cache cache = getCache();\n+    LuceneServiceImpl luceneService = (LuceneServiceImpl) LuceneServiceProvider.get(cache);\n+    InternalLuceneIndex index =\n+        (InternalLuceneIndex) luceneService.getIndex(INDEX_NAME, REGION_NAME);\n+    LuceneIndexForPartitionedRegion indexForPR = (LuceneIndexForPartitionedRegion) index;\n+    PartitionedRegion fileRegion = indexForPR.getFileAndChunkRegion();\n+\n+    return PartitionedRepositoryManager.indexRepositoryFactory.getMatchingBucket(fileRegion, 0);\n+  }\n+\n+  @Test\n+  @Parameters({\"PARTITION_REDUNDANT\"})", "originalCommit": "b638f121c695253f8068edd5a5ede388bca1a89d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2MDIyMw==", "url": "https://github.com/apache/geode/pull/4597#discussion_r368060223", "bodyText": "Changed! \ud83d\udc4d", "author": "jujoramos", "createdAt": "2020-01-17T17:51:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcxODM1NA=="}], "type": "inlineReview"}, {"oid": "cd3394ef5129595c2ffeeb3b9e9f2fcda1b5e19f", "url": "https://github.com/apache/geode/commit/cd3394ef5129595c2ffeeb3b9e9f2fcda1b5e19f", "message": "GEODE-7703: simplify test and remove unused annotations.", "committedDate": "2020-01-17T17:50:37Z", "type": "commit"}]}