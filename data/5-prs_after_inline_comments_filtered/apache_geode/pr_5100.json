{"pr_number": 5100, "pr_title": "GEODE-8114: Refactor set", "pr_createdAt": "2020-05-12T17:14:55Z", "pr_url": "https://github.com/apache/geode/pull/5100", "timeline": [{"oid": "2ab865e88e69c86fcfde48f05f02b31612f5ba4b", "url": "https://github.com/apache/geode/commit/2ab865e88e69c86fcfde48f05f02b31612f5ba4b", "message": "make all the layers implement RedisSetCommands", "committedDate": "2020-05-12T20:50:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIxNjAxMg==", "url": "https://github.com/apache/geode/pull/5100#discussion_r424216012", "bodyText": "change \"get(key)\" to \"redisSet\"", "author": "dschneider-pivotal", "createdAt": "2020-05-13T07:05:53Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/set/RedisSetInRegion.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.set;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.regex.Pattern;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.redis.internal.ByteArrayWrapper;\n+\n+/**\n+ * This class checks whether a RedisSet exists before forwarding the message.\n+ */\n+public class RedisSetInRegion implements RedisSetCommands {\n+  private Region<ByteArrayWrapper, RedisSet> region;\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public RedisSetInRegion(Region<ByteArrayWrapper, RedisSet> region) {\n+    this.region = region;\n+  }\n+\n+  @Override\n+  public long sadd(\n+      ByteArrayWrapper key,\n+      ArrayList<ByteArrayWrapper> membersToAdd) {\n+    RedisSet redisSet = get(key);\n+    long l = redisSet.sadd(key, membersToAdd);\n+    if (l > 0) {\n+      region.put(key, redisSet);\n+    }\n+    return l;\n+  }\n+\n+  @Override\n+  public long srem(\n+      ByteArrayWrapper key,\n+      ArrayList<ByteArrayWrapper> membersToRemove, AtomicBoolean setWasDeleted) {\n+    RedisSet redisSet = get(key);\n+    long l = redisSet.srem(key, membersToRemove, setWasDeleted);\n+    if (get(key).scard(key) == 0) {", "originalCommit": "7326f62a4d7d42a3daa36f83ac372ed935567c7e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIxNjIzNw==", "url": "https://github.com/apache/geode/pull/5100#discussion_r424216237", "bodyText": "change \"get(key)\" to \"redisSet\"", "author": "dschneider-pivotal", "createdAt": "2020-05-13T07:06:22Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/set/RedisSetInRegion.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.set;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.regex.Pattern;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.redis.internal.ByteArrayWrapper;\n+\n+/**\n+ * This class checks whether a RedisSet exists before forwarding the message.\n+ */\n+public class RedisSetInRegion implements RedisSetCommands {\n+  private Region<ByteArrayWrapper, RedisSet> region;\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public RedisSetInRegion(Region<ByteArrayWrapper, RedisSet> region) {\n+    this.region = region;\n+  }\n+\n+  @Override\n+  public long sadd(\n+      ByteArrayWrapper key,\n+      ArrayList<ByteArrayWrapper> membersToAdd) {\n+    RedisSet redisSet = get(key);\n+    long l = redisSet.sadd(key, membersToAdd);\n+    if (l > 0) {\n+      region.put(key, redisSet);\n+    }\n+    return l;\n+  }\n+\n+  @Override\n+  public long srem(\n+      ByteArrayWrapper key,\n+      ArrayList<ByteArrayWrapper> membersToRemove, AtomicBoolean setWasDeleted) {\n+    RedisSet redisSet = get(key);\n+    long l = redisSet.srem(key, membersToRemove, setWasDeleted);\n+    if (get(key).scard(key) == 0) {\n+      region.remove(key);\n+    } else {\n+      region.put(key, get(key));", "originalCommit": "7326f62a4d7d42a3daa36f83ac372ed935567c7e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIxNjQ5Nw==", "url": "https://github.com/apache/geode/pull/5100#discussion_r424216497", "bodyText": "change \"get(key)\" to \"redisSet\"", "author": "dschneider-pivotal", "createdAt": "2020-05-13T07:06:56Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/set/RedisSetInRegion.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.set;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.regex.Pattern;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.redis.internal.ByteArrayWrapper;\n+\n+/**\n+ * This class checks whether a RedisSet exists before forwarding the message.\n+ */\n+public class RedisSetInRegion implements RedisSetCommands {\n+  private Region<ByteArrayWrapper, RedisSet> region;\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public RedisSetInRegion(Region<ByteArrayWrapper, RedisSet> region) {\n+    this.region = region;\n+  }\n+\n+  @Override\n+  public long sadd(\n+      ByteArrayWrapper key,\n+      ArrayList<ByteArrayWrapper> membersToAdd) {\n+    RedisSet redisSet = get(key);\n+    long l = redisSet.sadd(key, membersToAdd);\n+    if (l > 0) {\n+      region.put(key, redisSet);\n+    }\n+    return l;\n+  }\n+\n+  @Override\n+  public long srem(\n+      ByteArrayWrapper key,\n+      ArrayList<ByteArrayWrapper> membersToRemove, AtomicBoolean setWasDeleted) {\n+    RedisSet redisSet = get(key);\n+    long l = redisSet.srem(key, membersToRemove, setWasDeleted);\n+    if (get(key).scard(key) == 0) {\n+      region.remove(key);\n+    } else {\n+      region.put(key, get(key));\n+    }\n+    return l;\n+  }\n+\n+  public boolean del(ByteArrayWrapper key) {\n+    return region.remove(key) != null;\n+  }\n+\n+  @Override\n+  public Set<ByteArrayWrapper> smembers(\n+      ByteArrayWrapper key) {\n+    return get(key).smembers(key);\n+  }\n+\n+  @Override\n+  public int scard(ByteArrayWrapper key) {\n+    return get(key).scard(key);\n+  }\n+\n+  @Override\n+  public boolean sismember(\n+      ByteArrayWrapper key, ByteArrayWrapper member) {\n+    return get(key).sismember(key, member);\n+  }\n+\n+  @Override\n+  public Collection<ByteArrayWrapper> srandmember(\n+      ByteArrayWrapper key, int count) {\n+    return get(key).srandmember(key, count);\n+  }\n+\n+  @Override\n+  public Collection<ByteArrayWrapper> spop(\n+      ByteArrayWrapper key, int popCount) {\n+    RedisSet redisSet = get(key);\n+    Collection<ByteArrayWrapper> byteArrayWrappers = redisSet.spop(key, popCount);\n+    if (get(key).scard(key) == 0) {", "originalCommit": "7326f62a4d7d42a3daa36f83ac372ed935567c7e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIxNjYzOQ==", "url": "https://github.com/apache/geode/pull/5100#discussion_r424216639", "bodyText": "change \"get(key)\" to \"redisSet\"", "author": "dschneider-pivotal", "createdAt": "2020-05-13T07:07:11Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/set/RedisSetInRegion.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.set;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.regex.Pattern;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.redis.internal.ByteArrayWrapper;\n+\n+/**\n+ * This class checks whether a RedisSet exists before forwarding the message.\n+ */\n+public class RedisSetInRegion implements RedisSetCommands {\n+  private Region<ByteArrayWrapper, RedisSet> region;\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public RedisSetInRegion(Region<ByteArrayWrapper, RedisSet> region) {\n+    this.region = region;\n+  }\n+\n+  @Override\n+  public long sadd(\n+      ByteArrayWrapper key,\n+      ArrayList<ByteArrayWrapper> membersToAdd) {\n+    RedisSet redisSet = get(key);\n+    long l = redisSet.sadd(key, membersToAdd);\n+    if (l > 0) {\n+      region.put(key, redisSet);\n+    }\n+    return l;\n+  }\n+\n+  @Override\n+  public long srem(\n+      ByteArrayWrapper key,\n+      ArrayList<ByteArrayWrapper> membersToRemove, AtomicBoolean setWasDeleted) {\n+    RedisSet redisSet = get(key);\n+    long l = redisSet.srem(key, membersToRemove, setWasDeleted);\n+    if (get(key).scard(key) == 0) {\n+      region.remove(key);\n+    } else {\n+      region.put(key, get(key));\n+    }\n+    return l;\n+  }\n+\n+  public boolean del(ByteArrayWrapper key) {\n+    return region.remove(key) != null;\n+  }\n+\n+  @Override\n+  public Set<ByteArrayWrapper> smembers(\n+      ByteArrayWrapper key) {\n+    return get(key).smembers(key);\n+  }\n+\n+  @Override\n+  public int scard(ByteArrayWrapper key) {\n+    return get(key).scard(key);\n+  }\n+\n+  @Override\n+  public boolean sismember(\n+      ByteArrayWrapper key, ByteArrayWrapper member) {\n+    return get(key).sismember(key, member);\n+  }\n+\n+  @Override\n+  public Collection<ByteArrayWrapper> srandmember(\n+      ByteArrayWrapper key, int count) {\n+    return get(key).srandmember(key, count);\n+  }\n+\n+  @Override\n+  public Collection<ByteArrayWrapper> spop(\n+      ByteArrayWrapper key, int popCount) {\n+    RedisSet redisSet = get(key);\n+    Collection<ByteArrayWrapper> byteArrayWrappers = redisSet.spop(key, popCount);\n+    if (get(key).scard(key) == 0) {\n+      region.remove(key);\n+    } else {\n+      region.put(key, get(key));", "originalCommit": "7326f62a4d7d42a3daa36f83ac372ed935567c7e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIxNzgzOA==", "url": "https://github.com/apache/geode/pull/5100#discussion_r424217838", "bodyText": "I prefer getting null back from this method to prevent garbage creation. I know you prefer keeping the callers simpler by always returning a non-null. Can you return a canonical empty instance instead of always creating a new  RedisSet  and a new ArrayList?", "author": "dschneider-pivotal", "createdAt": "2020-05-13T07:09:40Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/set/RedisSetInRegion.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.set;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.regex.Pattern;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.redis.internal.ByteArrayWrapper;\n+\n+/**\n+ * This class checks whether a RedisSet exists before forwarding the message.\n+ */\n+public class RedisSetInRegion implements RedisSetCommands {\n+  private Region<ByteArrayWrapper, RedisSet> region;\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public RedisSetInRegion(Region<ByteArrayWrapper, RedisSet> region) {\n+    this.region = region;\n+  }\n+\n+  @Override\n+  public long sadd(\n+      ByteArrayWrapper key,\n+      ArrayList<ByteArrayWrapper> membersToAdd) {\n+    RedisSet redisSet = get(key);\n+    long l = redisSet.sadd(key, membersToAdd);\n+    if (l > 0) {\n+      region.put(key, redisSet);\n+    }\n+    return l;\n+  }\n+\n+  @Override\n+  public long srem(\n+      ByteArrayWrapper key,\n+      ArrayList<ByteArrayWrapper> membersToRemove, AtomicBoolean setWasDeleted) {\n+    RedisSet redisSet = get(key);\n+    long l = redisSet.srem(key, membersToRemove, setWasDeleted);\n+    if (get(key).scard(key) == 0) {\n+      region.remove(key);\n+    } else {\n+      region.put(key, get(key));\n+    }\n+    return l;\n+  }\n+\n+  public boolean del(ByteArrayWrapper key) {\n+    return region.remove(key) != null;\n+  }\n+\n+  @Override\n+  public Set<ByteArrayWrapper> smembers(\n+      ByteArrayWrapper key) {\n+    return get(key).smembers(key);\n+  }\n+\n+  @Override\n+  public int scard(ByteArrayWrapper key) {\n+    return get(key).scard(key);\n+  }\n+\n+  @Override\n+  public boolean sismember(\n+      ByteArrayWrapper key, ByteArrayWrapper member) {\n+    return get(key).sismember(key, member);\n+  }\n+\n+  @Override\n+  public Collection<ByteArrayWrapper> srandmember(\n+      ByteArrayWrapper key, int count) {\n+    return get(key).srandmember(key, count);\n+  }\n+\n+  @Override\n+  public Collection<ByteArrayWrapper> spop(\n+      ByteArrayWrapper key, int popCount) {\n+    RedisSet redisSet = get(key);\n+    Collection<ByteArrayWrapper> byteArrayWrappers = redisSet.spop(key, popCount);\n+    if (get(key).scard(key) == 0) {\n+      region.remove(key);\n+    } else {\n+      region.put(key, get(key));\n+    }\n+    return byteArrayWrappers;\n+  }\n+\n+  @Override\n+  public List<Object> sscan(\n+      ByteArrayWrapper key, Pattern matchPattern, int count, int cursor) {\n+    return get(key).sscan(key, matchPattern, count, cursor);\n+  }\n+\n+  private RedisSet get(ByteArrayWrapper key) {\n+    RedisSet redisSet = region.get(key);\n+    return redisSet == null ? new RedisSet(new ArrayList<>()) : redisSet;", "originalCommit": "7326f62a4d7d42a3daa36f83ac372ed935567c7e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIyMTM3MA==", "url": "https://github.com/apache/geode/pull/5100#discussion_r424221370", "bodyText": "I don't think they way you have refactored the delta code is thread safe. As long as we have set ops that do not use the function+delta (that is why this method is synchronized still) then we need to send the delta before this synchronization is released.\nI also don't like that we leave deltas set until the next operation is done. This will just extend its life when it should have been garbage before this method released in sync. I think this issue with the delta management is throughout this class.", "author": "dschneider-pivotal", "createdAt": "2020-05-13T07:16:52Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/set/RedisSet.java", "diffHunk": "@@ -304,70 +211,60 @@ public void fromData(DataInput in) throws IOException, ClassNotFoundException {\n   }\n \n   /**\n-   * @param membersToAdd members to add to this set; NOTE this list may by\n-   *        modified by this call\n-   * @param region the region this instance is stored in\n    * @param key the name of the set to add to\n+   * @param membersToAdd members to add to this set; NOTE this list may by modified by this call\n    * @return the number of members actually added; -1 if concurrent modification\n    */\n-  private synchronized long doSadd(ArrayList<ByteArrayWrapper> membersToAdd,\n-      Region<ByteArrayWrapper, RedisSet> region,\n-      ByteArrayWrapper key) {\n-\n+  @Override\n+  public synchronized long sadd(ByteArrayWrapper key, ArrayList<ByteArrayWrapper> membersToAdd) {\n+    this.deltas = null;\n     membersToAdd.removeIf(memberToAdd -> !members.add(memberToAdd));\n     int membersAdded = membersToAdd.size();\n     if (membersAdded != 0) {\n       deltasAreAdds = true;\n       deltas = membersToAdd;\n-      try {\n-        region.put(key, this);\n-      } finally {\n-        deltas = null;\n-      }\n     }\n     return membersAdded;\n   }\n \n   /**\n-   * @param membersToRemove members to remove from this set; NOTE this list may by\n-   *        modified by this call\n-   * @param region the region this instance is stored in\n    * @param key the name of the set to remove from\n+   * @param membersToRemove members to remove from this set; NOTE this list may by modified by this\n+   *        call\n    * @param setWasDeleted set to true if this method deletes the set\n    * @return the number of members actually removed; -1 if concurrent modification\n    */\n-  private synchronized long doSrem(ArrayList<ByteArrayWrapper> membersToRemove,\n-      Region<ByteArrayWrapper, RedisSet> region,\n-      ByteArrayWrapper key, AtomicBoolean setWasDeleted) {\n-\n+  @Override\n+  public synchronized long srem(ByteArrayWrapper key, ArrayList<ByteArrayWrapper> membersToRemove,\n+      AtomicBoolean setWasDeleted) {\n+    deltas = null;", "originalCommit": "7326f62a4d7d42a3daa36f83ac372ed935567c7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIyNjUzOQ==", "url": "https://github.com/apache/geode/pull/5100#discussion_r424226539", "bodyText": "Maybe we could pass the RedisSetInRegion into the methods that need to update the region. If we added the \"key\" to RedisSetInRegion then it would know what key it is supposed to remove or put when we callback to it.\nThis would also allow the RedisSetInRegion and RedisSet to both implement a common interface (neither of their methods would have \"key\" parameters).", "author": "dschneider-pivotal", "createdAt": "2020-05-13T07:26:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIyMTM3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzMzQ3OA==", "url": "https://github.com/apache/geode/pull/5100#discussion_r424633478", "bodyText": "ideally, i think we can remove the key from the RedisSetCommands interface.  I think that's a more OO approach where the key is the identity of the object and not something you can pass in.  Right now the RedisSetCommands interface is more like a bag of functions.  What do you think?\nI think that change is a little bit down the road, though, once all the set commands are   moved over.", "author": "prettyClouds", "createdAt": "2020-05-13T18:08:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIyMTM3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyODM2Nw==", "url": "https://github.com/apache/geode/pull/5100#discussion_r424728367", "bodyText": "When JohnH and I worked on renaming RedisSetCommands (from RedisSet), we chose \"Commands\" because it seemed like a bag of functions. And from the point of view of the netty executors (like SAddExecutor) I think this may make sense. I like for the interface methods to have a close correspondence to the actual redis command line arguments. Since the REDIS SADD takes a \"key\" and \"members\" then the method on the Commands interface should have both a \"key\" and \"members\". It should not have \"region\" since the REDIS SADD command does not have a region. So that is why when you create a RedisSetCommandsFunctionExecutor you give it a Region but you do not give it the key. This also means you could use the same instance of RedisSetCommandsFunctionExecutor to do multiple commands on different keys.\nBut once you get down to having on instance of our data structure (RedisSet in this example) then you no longer need the key because the key was used to find it.\nIf I had to choose one or the other (methods with the key or methods without), I think I'd chose with the key since it corresponds to the redis apis.", "author": "dschneider-pivotal", "createdAt": "2020-05-13T21:01:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIyMTM3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczNjY4Mw==", "url": "https://github.com/apache/geode/pull/5100#discussion_r424736683", "bodyText": "I can see both sides of this coin.\nI think it's nice that the RedisSetCommands match the Redis API.\nI also think that once we are in the executor we are in the Java code, we are now doing OO programming and don't need our interfaces to conform to Redis' binary protocol.\nThe \"user\" I imagine implementing this interface is a developer looking to implement the Redis data structures in a completely new way...in geode or in some other platform.  I don't have enough of that architecture worked out to be able to make a clear decision, so at this point I am okay either way.", "author": "prettyClouds", "createdAt": "2020-05-13T21:17:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIyMTM3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIyMzE3Mg==", "url": "https://github.com/apache/geode/pull/5100#discussion_r424223172", "bodyText": "I don't think you should force RedisSetCommands on this class. None of the methods on this class currently need the \"key\" parameter because they do not need to find themselves in the region. But RedisSetCommands methods do  need a \"key\". I think that abstraction really does not fit this class.", "author": "dschneider-pivotal", "createdAt": "2020-05-13T07:20:29Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/set/RedisSet.java", "diffHunk": "@@ -34,18 +33,15 @@\n import org.apache.geode.DataSerializer;\n import org.apache.geode.Delta;\n import org.apache.geode.InvalidDeltaException;\n-import org.apache.geode.cache.Region;\n import org.apache.geode.redis.internal.ByteArrayWrapper;\n import org.apache.geode.redis.internal.Coder;\n \n /**\n- * This class still uses \"synchronized\" to protect the\n- * underlying HashSet even though all writers do so under\n- * the {@link SynchronizedStripedExecutor}. The synchronization on this\n- * class can be removed once readers are changed to\n- * also use the {@link SynchronizedStripedExecutor}.\n+ * This class still uses \"synchronized\" to protect the underlying HashSet even though all writers do\n+ * so under the {@link SynchronizedStripedExecutor}. The synchronization on this class can be\n+ * removed once readers are changed to also use the {@link SynchronizedStripedExecutor}.\n  */\n-public class RedisSet implements Delta, DataSerializable {\n+public class RedisSet implements Delta, DataSerializable, RedisSetCommands {", "originalCommit": "7326f62a4d7d42a3daa36f83ac372ed935567c7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3MDAxMQ==", "url": "https://github.com/apache/geode/pull/5100#discussion_r424570011", "bodyText": "yea, i may have been too ambitious in trying to get all the layers to conform to this interface...i think it's a good long-term goal to have, but we still need some changes to make this possible..As long as some commands go through the executor and some take a \"side\" route, it will be difficult to get this pattern implemented.", "author": "prettyClouds", "createdAt": "2020-05-13T16:25:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIyMzE3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIyNzIxMw==", "url": "https://github.com/apache/geode/pull/5100#discussion_r424227213", "bodyText": "make this field final", "author": "dschneider-pivotal", "createdAt": "2020-05-13T07:28:03Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/set/RedisSetInRegion.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.set;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.regex.Pattern;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.redis.internal.ByteArrayWrapper;\n+\n+/**\n+ * This class checks whether a RedisSet exists before forwarding the message.\n+ */\n+public class RedisSetInRegion implements RedisSetCommands {\n+  private Region<ByteArrayWrapper, RedisSet> region;", "originalCommit": "7326f62a4d7d42a3daa36f83ac372ed935567c7e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "64a2d7eee002756828f20d0d0eb596639960b7de", "url": "https://github.com/apache/geode/commit/64a2d7eee002756828f20d0d0eb596639960b7de", "message": "get rid of static methods", "committedDate": "2020-05-13T17:09:42Z", "type": "commit"}, {"oid": "64a2d7eee002756828f20d0d0eb596639960b7de", "url": "https://github.com/apache/geode/commit/64a2d7eee002756828f20d0d0eb596639960b7de", "message": "get rid of static methods", "committedDate": "2020-05-13T17:09:42Z", "type": "forcePushed"}, {"oid": "659442bb2d81796f5bca2dea8c22457b00d82a2c", "url": "https://github.com/apache/geode/commit/659442bb2d81796f5bca2dea8c22457b00d82a2c", "message": "Empty objects instead of nulls", "committedDate": "2020-05-13T18:01:29Z", "type": "commit"}, {"oid": "61a5780a60aad61bd4d1f8ec2d47b162fc74d6b3", "url": "https://github.com/apache/geode/commit/61a5780a60aad61bd4d1f8ec2d47b162fc74d6b3", "message": "rename methods", "committedDate": "2020-05-13T18:05:40Z", "type": "commit"}, {"oid": "2879ad5a2879d0a7314ef1bd59115b5cacafcc08", "url": "https://github.com/apache/geode/commit/2879ad5a2879d0a7314ef1bd59115b5cacafcc08", "message": "fix unchecked warning", "committedDate": "2020-05-13T20:05:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcwNTQ1Mg==", "url": "https://github.com/apache/geode/pull/5100#discussion_r424705452", "bodyText": "Would it be worth refactoring this \"region.getOrDefault(key, RedisSet.EMPTY)\" into a local private method named \"getRedisSet(key)\" and then these methods can just be a one liner: \"return getRedisSet(key).smembers()\"", "author": "dschneider-pivotal", "createdAt": "2020-05-13T20:16:21Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/set/RedisSetInRegion.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.set;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.regex.Pattern;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.redis.internal.ByteArrayWrapper;\n+\n+/**\n+ * This class still uses \"synchronized\" to protect the underlying HashSet even though all writers do\n+ * so under the {@link SynchronizedStripedExecutor}. The synchronization on this class can be\n+ * removed once readers are changed to also use the {@link SynchronizedStripedExecutor}.\n+ */\n+public class RedisSetInRegion implements RedisSetCommands {\n+  private final Region<ByteArrayWrapper, RedisSet> region;\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public RedisSetInRegion(Region<ByteArrayWrapper, RedisSet> region) {\n+    this.region = region;\n+  }\n+\n+  @Override\n+  public long sadd(\n+      ByteArrayWrapper key,\n+      ArrayList<ByteArrayWrapper> membersToAdd) {\n+\n+    RedisSet redisSet = region.get(key);\n+\n+    if (redisSet != null) {\n+      return redisSet.sadd(membersToAdd, region, key);\n+    } else {\n+      region.create(key, new RedisSet(membersToAdd));\n+      return membersToAdd.size();\n+    }\n+  }\n+\n+  @Override\n+  public long srem(\n+      ByteArrayWrapper key,\n+      ArrayList<ByteArrayWrapper> membersToRemove, AtomicBoolean setWasDeleted) {\n+    RedisSet redisSet = region.getOrDefault(key, RedisSet.EMPTY);\n+    return redisSet.srem(membersToRemove, region, key, setWasDeleted);\n+  }\n+\n+  public boolean del(ByteArrayWrapper key) {\n+    return region.remove(key) != null;\n+  }\n+\n+  @Override\n+  public Set<ByteArrayWrapper> smembers(\n+      ByteArrayWrapper key) {\n+    RedisSet redisSet = region.getOrDefault(key, RedisSet.EMPTY);", "originalCommit": "2879ad5a2879d0a7314ef1bd59115b5cacafcc08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcxMDI2NA==", "url": "https://github.com/apache/geode/pull/5100#discussion_r424710264", "bodyText": "sure, i can do that.", "author": "prettyClouds", "createdAt": "2020-05-13T20:25:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcwNTQ1Mg=="}], "type": "inlineReview"}, {"oid": "7da24d9f1010c7afd50a2622809524e02c298cb0", "url": "https://github.com/apache/geode/commit/7da24d9f1010c7afd50a2622809524e02c298cb0", "message": "Refactor: extract method", "committedDate": "2020-05-13T20:29:21Z", "type": "commit"}]}