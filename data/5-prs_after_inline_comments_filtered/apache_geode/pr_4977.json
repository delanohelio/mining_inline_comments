{"pr_number": 4977, "pr_title": "GEODE-7851: Pulse refreshes expired access tokens", "pr_createdAt": "2020-04-21T00:14:19Z", "pr_url": "https://github.com/apache/geode/pull/4977", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE1MTcxNg==", "url": "https://github.com/apache/geode/pull/4977#discussion_r413151716", "bodyText": "It would be a good idea to document the the Object credentials here is the object that will be put in the jmx environment for connection: jmx.remote.credentials", "author": "jinmeiliao", "createdAt": "2020-04-22T16:55:10Z", "path": "geode-pulse/src/main/java/org/apache/geode/tools/pulse/internal/data/Repository.java", "diffHunk": "@@ -80,8 +88,95 @@ public Repository(OAuth2AuthorizedClientService authorizedClientService,\n     this.clusterFactory = clusterFactory;\n   }\n \n+  /**\n+   * this will return a cluster already connected to the geode jmx manager for the user in the\n+   * request\n+   * <p>\n+   * But for multi-user connections to gemfireJMX, i.e pulse that uses gemfire integrated security,\n+   * we will need to get the username from the context\n+   */\n+  public Cluster getCluster() {\n+    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n+    if (authentication == null) {\n+      return null;\n+    }\n+\n+    if (authentication instanceof OAuth2AuthenticationToken) {\n+      return getClusterWithAuthenticationToken((OAuth2AuthenticationToken) authentication);\n+    }\n+\n+    return getClusterWithUserNameAndPassword(authentication.getName(), null);\n+  }\n+\n+  public Cluster getClusterWithUserNameAndPassword(String userName, String password) {\n+    String[] credentials = {userName, password};\n+    return getClusterWithCredentials(userName, credentials);\n+  }\n+\n+  public Cluster getClusterWithCredentials(String userName, Object credentials) {", "originalCommit": "2bb56b1151f1bb86c6b435a1a0f2c0d2921f6bf5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQzMTQ3NA==", "url": "https://github.com/apache/geode/pull/4977#discussion_r413431474", "bodyText": "Done.", "author": "demery-pivotal", "createdAt": "2020-04-23T00:53:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE1MTcxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE2MDg3OQ==", "url": "https://github.com/apache/geode/pull/4977#discussion_r413160879", "bodyText": "wondering which flow is better. Using the following might get rid of the reconnectToGemfire method in Cluster.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (isExpired(authorizedClient.getAccessToken())) {\n          \n          \n            \n                String userName = authorizedClient.getPrincipalName();\n          \n          \n            \n            \n          \n          \n            \n                if (isExpired(authorizedClient.getAccessToken())) {\n          \n          \n            \n                  logoutUser(userName);\n          \n          \n            \n                  authorizedClient = refreshExpiredClient(authentication, authorizedClient);\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                userName = authorizedClient.getPrincipalName();\n          \n          \n            \n                String credentials = authorizedClient.getAccessToken().getTokenValue();\n          \n          \n            \n                return getClusterWithCredentials(userName, credentials);", "author": "jinmeiliao", "createdAt": "2020-04-22T17:07:30Z", "path": "geode-pulse/src/main/java/org/apache/geode/tools/pulse/internal/data/Repository.java", "diffHunk": "@@ -80,8 +88,95 @@ public Repository(OAuth2AuthorizedClientService authorizedClientService,\n     this.clusterFactory = clusterFactory;\n   }\n \n+  /**\n+   * this will return a cluster already connected to the geode jmx manager for the user in the\n+   * request\n+   * <p>\n+   * But for multi-user connections to gemfireJMX, i.e pulse that uses gemfire integrated security,\n+   * we will need to get the username from the context\n+   */\n+  public Cluster getCluster() {\n+    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n+    if (authentication == null) {\n+      return null;\n+    }\n+\n+    if (authentication instanceof OAuth2AuthenticationToken) {\n+      return getClusterWithAuthenticationToken((OAuth2AuthenticationToken) authentication);\n+    }\n+\n+    return getClusterWithUserNameAndPassword(authentication.getName(), null);\n+  }\n+\n+  public Cluster getClusterWithUserNameAndPassword(String userName, String password) {\n+    String[] credentials = {userName, password};\n+    return getClusterWithCredentials(userName, credentials);\n+  }\n+\n+  public Cluster getClusterWithCredentials(String userName, Object credentials) {\n+    synchronized (clusterMap) {\n+      Cluster cluster = clusterMap.get(userName);\n+      if (cluster == null) {\n+        logger.info(resourceBundle.getString(\"LOG_MSG_CREATE_NEW_THREAD\") + \" : \" + userName);\n+        cluster = clusterFactory.create(host, port, userName, resourceBundle, this);\n+        // Assign name to thread created\n+        cluster.setName(PulseConstants.APP_NAME + \"-\" + host + \":\" + port + \":\" + userName);\n+        cluster.connectToGemFire(credentials);\n+        if (cluster.isConnectedFlag()) {\n+          clusterMap.put(userName, cluster);\n+        }\n+      }\n+      return cluster;\n+    }\n+  }\n+\n+  /**\n+   * Returns the cluster for the user associated with the given authentication. If the user's\n+   * access token is expired, it is refreshed and the cluster is reconnected to JMX using the fresh\n+   * token. If the refresh fails, the user's cluster is disconnected from JMX and removed from the\n+   * repository.\n+   */\n+  private Cluster getClusterWithAuthenticationToken(OAuth2AuthenticationToken authentication) {\n+    OAuth2AuthorizedClient authorizedClient = getAuthorizedClient(authentication);\n+\n+    if (isExpired(authorizedClient.getAccessToken())) {", "originalCommit": "2bb56b1151f1bb86c6b435a1a0f2c0d2921f6bf5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMwMjY1Ng==", "url": "https://github.com/apache/geode/pull/4977#discussion_r413302656", "bodyText": "logoutUser() discards any data cached in the Cluster, including all of the trends stored in circular buffers. That seems like a harsh thing to do when the token refreshes.", "author": "demery-pivotal", "createdAt": "2020-04-22T20:21:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE2MDg3OQ=="}], "type": "inlineReview"}, {"oid": "1464a4b6abed7d210d1df005dd8814a4e636d00e", "url": "https://github.com/apache/geode/commit/1464a4b6abed7d210d1df005dd8814a4e636d00e", "message": "Add logging for token refresh/expiration events\n\n- Add log messages\n  - When an access token expires.\n  - When Pulse reconnects to JMX following a token refresh.\n  - When Pulse disconnects from JMX and logs the user out due to the\n    refresh token expiring.\n- Identify the session using the token's \"sub\" attribute instead of the\n  user's name.\n- Add log4j2's slf4j implementation to the Pulse webapp so that it will\n  actually write the log file.\n\nCo-authored-by: Dale Emery <demery@pivotal.io>\nCo-authored-by: Joris Melchior <joris.melchior@gmail.com>\nCo-authored-by: Jinmei Liao <jiliao@pivotal.io>", "committedDate": "2020-04-22T22:20:40Z", "type": "forcePushed"}, {"oid": "73ebfcc87179f62285752e7a5ac9c40a150dfd9b", "url": "https://github.com/apache/geode/commit/73ebfcc87179f62285752e7a5ac9c40a150dfd9b", "message": "GEODE-7851: Pulse refreshes expired access tokens\n\nIf a user's access token expires, Pulse attempts to refresh it. If the\nrefresh fails, Pulse logs the user out and redirects the browser to\n/pulse/clusterLogout.\n\nChanges in Repository:\n- When OAuth is configured, before returning the user's cluster,\n  getCluster() checks whether the user's access token has expired.\n- If the access token has expired, the repository attempts to refresh\n  it.  If the refresh succeeds, the repository reconnects the user's\n  cluster to JMX and returns it.\n- If the refresh fails, the repository disconnects the user's cluster\n  from JMX, removes the cluster from the repository, and throws an\n  authentication or authorization exception.\n\nChanges in PulseController:\n- If the service call throws an authentication or authorization\n  exception, PulseController.  getPulseUpdate() returns a 401 status.\n\nChanges in pulsescript/common.js:\n- If a Pulse ajax call returns a 401 status, ajaxPost() redirects the\n  browser to /pulse/clusterLogout to log the user out and request\n  re-authorization.\n\nCo-authored-by: Joris Melchior <joris.melchior@gmail.com>\nCo-authored-by: Dale Emery <demery@pivotal.io>\nCo-authored-by: Jinmei Liao <jiliao@pivotal.io>", "committedDate": "2020-04-23T00:50:08Z", "type": "forcePushed"}, {"oid": "b08cf7f87752abcce67acba7a896aab48f2a0a43", "url": "https://github.com/apache/geode/commit/b08cf7f87752abcce67acba7a896aab48f2a0a43", "message": "GEODE-7851: Pulse refreshes expired access tokens\n\nIf a user's access token expires, Pulse attempts to refresh it. If the\nrefresh fails, Pulse logs the user out and redirects the browser to\n/pulse/clusterLogout.\n\nChanges in Repository:\n- When OAuth is configured, before returning the user's cluster,\n  getCluster() checks whether the user's access token has expired.\n- If the access token has expired, the repository attempts to refresh\n  it.  If the refresh succeeds, the repository reconnects the user's\n  cluster to JMX and returns it.\n- If the refresh fails, the repository disconnects the user's cluster\n  from JMX, removes the cluster from the repository, and throws an\n  authentication or authorization exception.\n\nChanges in PulseController:\n- If the service call throws an authentication or authorization\n  exception, PulseController.  getPulseUpdate() returns a 401 status.\n\nChanges in pulsescript/common.js:\n- If a Pulse ajax call returns a 401 status, ajaxPost() redirects the\n  browser to /pulse/clusterLogout to log the user out and request\n  re-authorization.\n\nCo-authored-by: Joris Melchior <joris.melchior@gmail.com>\nCo-authored-by: Dale Emery <demery@pivotal.io>\nCo-authored-by: Jinmei Liao <jiliao@pivotal.io>", "committedDate": "2020-04-24T17:51:22Z", "type": "forcePushed"}, {"oid": "271170a8b1034a07e2af5f0765e305e1e47af2c5", "url": "https://github.com/apache/geode/commit/271170a8b1034a07e2af5f0765e305e1e47af2c5", "message": "GEODE-7851: Pulse refreshes expired access tokens\n\nIf a user's access token expires, Pulse attempts to refresh it. If the\nrefresh fails, Pulse logs the user out and redirects the browser to\n/pulse/clusterLogout.\n\nChanges in Repository:\n- When OAuth is configured, before returning the user's cluster,\n  getCluster() checks whether the user's access token has expired.\n- If the access token has expired, the repository attempts to refresh\n  it.  If the refresh succeeds, the repository reconnects the user's\n  cluster to JMX and returns it.\n- If the refresh fails, the repository disconnects the user's cluster\n  from JMX, removes the cluster from the repository, and throws an\n  authentication or authorization exception.\n\nChanges in PulseController:\n- If the service call throws an authentication or authorization\n  exception, PulseController.  getPulseUpdate() returns a 401 status.\n\nChanges in pulsescript/common.js:\n- If a Pulse ajax call returns a 401 status, ajaxPost() redirects the\n  browser to /pulse/clusterLogout to log the user out and request\n  re-authorization.\n\nCo-authored-by: Joris Melchior <joris.melchior@gmail.com>\nCo-authored-by: Dale Emery <demery@pivotal.io>\nCo-authored-by: Jinmei Liao <jiliao@pivotal.io>", "committedDate": "2020-04-24T18:09:59Z", "type": "commit"}, {"oid": "271170a8b1034a07e2af5f0765e305e1e47af2c5", "url": "https://github.com/apache/geode/commit/271170a8b1034a07e2af5f0765e305e1e47af2c5", "message": "GEODE-7851: Pulse refreshes expired access tokens\n\nIf a user's access token expires, Pulse attempts to refresh it. If the\nrefresh fails, Pulse logs the user out and redirects the browser to\n/pulse/clusterLogout.\n\nChanges in Repository:\n- When OAuth is configured, before returning the user's cluster,\n  getCluster() checks whether the user's access token has expired.\n- If the access token has expired, the repository attempts to refresh\n  it.  If the refresh succeeds, the repository reconnects the user's\n  cluster to JMX and returns it.\n- If the refresh fails, the repository disconnects the user's cluster\n  from JMX, removes the cluster from the repository, and throws an\n  authentication or authorization exception.\n\nChanges in PulseController:\n- If the service call throws an authentication or authorization\n  exception, PulseController.  getPulseUpdate() returns a 401 status.\n\nChanges in pulsescript/common.js:\n- If a Pulse ajax call returns a 401 status, ajaxPost() redirects the\n  browser to /pulse/clusterLogout to log the user out and request\n  re-authorization.\n\nCo-authored-by: Joris Melchior <joris.melchior@gmail.com>\nCo-authored-by: Dale Emery <demery@pivotal.io>\nCo-authored-by: Jinmei Liao <jiliao@pivotal.io>", "committedDate": "2020-04-24T18:09:59Z", "type": "forcePushed"}]}