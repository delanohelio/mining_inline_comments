{"pr_number": 5678, "pr_title": "GEODE-8663: update Redis Info command To include additional statistics", "pr_createdAt": "2020-10-27T21:35:25Z", "pr_url": "https://github.com/apache/geode/pull/5678", "timeline": [{"oid": "2ae4b36cbf038c74dfb18648b2f15f68681e30ee", "url": "https://github.com/apache/geode/commit/2ae4b36cbf038c74dfb18648b2f15f68681e30ee", "message": "GEODE-8663: update Redis Info command To include additional statistics", "committedDate": "2020-10-27T21:51:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU2NDUzMg==", "url": "https://github.com/apache/geode/pull/5678#discussion_r513564532", "bodyText": "We should use the awaitility timeout here: Math.toIntExact(GeodeAwaitility.getTimeout().toMillis())", "author": "sabbey37", "createdAt": "2020-10-28T16:00:11Z", "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/internal/RedisStatsIntegrationTest.java", "diffHunk": "@@ -16,28 +16,469 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n+import java.util.concurrent.TimeUnit;\n+\n+import org.junit.Before;\n import org.junit.ClassRule;\n import org.junit.Test;\n+import redis.clients.jedis.BitOP;\n import redis.clients.jedis.Jedis;\n \n import org.apache.geode.redis.GeodeRedisServerRule;\n import org.apache.geode.test.awaitility.GeodeAwaitility;\n \n public class RedisStatsIntegrationTest {\n+  public static final String EXISTING_HASH_KEY = \"Existing_Hash\";\n+  public static final String EXISTING_STRING_KEY = \"Existing_String\";\n+  public static final String EXISTING_SET_KEY_1 = \"Existing_Set_1\";\n+  public static final String EXISTING_SET_KEY_2 = \"Existing_Set_2\";\n+  public static final String NONEXISTENT_KEY = \"Nonexistent_Key\";\n+  Jedis jedis;\n+  long initialKeyspaceHits;\n+  long initialKeyspaceMisses;\n \n   @ClassRule\n   public static GeodeRedisServerRule server = new GeodeRedisServerRule();\n \n+  @Before\n+  public void setup() {\n+    jedis = new Jedis(\"localhost\", server.getPort(), 10000000);", "originalCommit": "2ae4b36cbf038c74dfb18648b2f15f68681e30ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ4NDA4Ng==", "url": "https://github.com/apache/geode/pull/5678#discussion_r514484086", "bodyText": "done", "author": "jhutchison", "createdAt": "2020-10-29T18:39:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU2NDUzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ4OTk2Ng==", "url": "https://github.com/apache/geode/pull/5678#discussion_r514489966", "bodyText": "done", "author": "jhutchison", "createdAt": "2020-10-29T18:49:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU2NDUzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1NjM4OQ==", "url": "https://github.com/apache/geode/pull/5678#discussion_r513656389", "bodyText": "If we decide to increment the hits/misses this way, we could consolidate all of these and just have the if/else in the getRedisData method.", "author": "sabbey37", "createdAt": "2020-10-28T18:04:13Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/data/CommandHelper.java", "diffHunk": "@@ -84,7 +84,13 @@ RedisData getRedisData(ByteArrayWrapper key, RedisData notFoundValue) {\n   }\n \n   RedisSet getRedisSet(ByteArrayWrapper key) {\n-    return checkSetType(getRedisData(key, NULL_REDIS_SET));\n+    RedisData redisData = getRedisData(key, NULL_REDIS_SET);\n+    if (redisData == NULL_REDIS_SET) {\n+      redisStats.incKeyspaceMisses();\n+    } else {\n+      redisStats.incKeyspaceHits();", "originalCommit": "2ae4b36cbf038c74dfb18648b2f15f68681e30ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ3ODY1NA==", "url": "https://github.com/apache/geode/pull/5678#discussion_r514478654", "bodyText": "will address in future stories that are coming to investigate overall functionality of this piece", "author": "jhutchison", "createdAt": "2020-10-29T18:29:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1NjM4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1ODEzOA==", "url": "https://github.com/apache/geode/pull/5678#discussion_r513658138", "bodyText": "Similar to the comment in the CommandHelper class, if we decide to increment the hits/misses this way, we could consolidate all of these and just have the if/else in the getRedisData method.", "author": "sabbey37", "createdAt": "2020-10-28T18:06:48Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/data/RedisKeyCommandsFunctionExecutor.java", "diffHunk": "@@ -33,12 +33,34 @@ public boolean del(ByteArrayWrapper key) {\n \n   @Override\n   public boolean exists(ByteArrayWrapper key) {\n-    return stripedExecute(key, () -> getRedisData(key).exists());\n+    boolean keyExists =\n+        stripedExecute(\n+            key,\n+            () -> getRedisData(key).exists());\n+\n+    if (keyExists) {\n+      helper.getRedisStats().incKeyspaceHits();\n+    } else {\n+      helper.getRedisStats().incKeyspaceMisses();\n+    }", "originalCommit": "2ae4b36cbf038c74dfb18648b2f15f68681e30ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ3ODk3MA==", "url": "https://github.com/apache/geode/pull/5678#discussion_r514478970", "bodyText": "will address in future stories that are coming to investigate overall functionality of this piece", "author": "jhutchison", "createdAt": "2020-10-29T18:30:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1ODEzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1ODY1NA==", "url": "https://github.com/apache/geode/pull/5678#discussion_r513658654", "bodyText": "It seems strange that this was deleted.", "author": "sabbey37", "createdAt": "2020-10-28T18:07:34Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/data/RedisStringCommandsFunctionExecutor.java", "diffHunk": "@@ -11,7 +11,6 @@\n  * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n  * or implied. See the License for the specific language governing permissions and limitations under\n  * the License.\n- *", "originalCommit": "2ae4b36cbf038c74dfb18648b2f15f68681e30ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ3OTM4NA==", "url": "https://github.com/apache/geode/pull/5678#discussion_r514479384", "bodyText": "good catch- not sure if that was a merge error?  weird", "author": "jhutchison", "createdAt": "2020-10-29T18:31:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1ODY1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY2MDkxMQ==", "url": "https://github.com/apache/geode/pull/5678#discussion_r513660911", "bodyText": "Since nothing else was changed in this file, and it's just a formatting change, maybe this could be reverted and we could allow spA to handle the formatting.", "author": "sabbey37", "createdAt": "2020-10-28T18:11:16Z", "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/key/AbstractExistsIntegrationTest.java", "diffHunk": "@@ -61,7 +61,8 @@ public void givenKeyNotProvided_returnsWrongNumberOfArgumentsError() {\n \n   @Test\n   public void shouldReturnZero_givenKeyDoesNotExist() {\n-    assertThat(jedis.exists(toArray(\"doesNotExist\"))).isEqualTo(0L);\n+    assertThat(\n+        jedis.exists(toArray(\"doesNotExist\"))).isEqualTo(0L);", "originalCommit": "2ae4b36cbf038c74dfb18648b2f15f68681e30ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ4NDg0Nw==", "url": "https://github.com/apache/geode/pull/5678#discussion_r514484847", "bodyText": "will submit separate PR with format changes", "author": "jhutchison", "createdAt": "2020-10-29T18:40:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY2MDkxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ5MDMxNw==", "url": "https://github.com/apache/geode/pull/5678#discussion_r514490317", "bodyText": "will create separate formatting pr", "author": "jhutchison", "createdAt": "2020-10-29T18:50:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY2MDkxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY2OTI2NQ==", "url": "https://github.com/apache/geode/pull/5678#discussion_r513669265", "bodyText": "In Redis, if there are no keys in the database, info just displays # Keyspace with nothing after it. I like the idea of displaying 0 for those stats rather than nothing at all, but I'm not sure if there is any reason we need to emulate Redis's behavior?", "author": "sabbey37", "createdAt": "2020-10-28T18:24:40Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/server/InfoExecutor.java", "diffHunk": "@@ -72,26 +78,91 @@ private String getSpecifiedSection(ExecutionHandlerContext context,\n   private String getServerSection(ExecutionHandlerContext context) {\n     final String CURRENT_REDIS_VERSION = \"5.0.6\";\n     final int TCP_PORT = context.getServerPort();\n+    final RedisStats redisStats = context.getRedisStats();\n     final String SERVER_STRING =\n         \"# Server\\r\\n\" +\n             \"redis_version:\" + CURRENT_REDIS_VERSION + \"\\r\\n\" +\n             \"redis_mode:standalone\\r\\n\" +\n-            \"tcp_port:\" + TCP_PORT + \"\\r\\n\";\n+            \"tcp_port:\" + TCP_PORT + \"\\r\\n\" +\n+            \"uptime_in_seconds:\" + redisStats.getUptimeInSeconds() + \"\\r\\n\" +\n+            \"uptime_in_days:\" + redisStats.getUptimeInDays() + \"\\r\\n\";\n     return SERVER_STRING;\n   }\n \n+  private String getClientsSection(ExecutionHandlerContext context) {\n+    final RedisStats redisStats = context.getRedisStats();\n+    final String CLIENTS_STRING =\n+        \"# Clients\\r\\n\" +\n+            \"connected_clients:\" + redisStats.getConnectedClients() + \"\\r\\n\" +\n+            \"blocked_clients:0\\r\\n\";\n+    return CLIENTS_STRING;\n+  }\n+\n+  private String getMemorySection(ExecutionHandlerContext context) {\n+    PartitionedRegion pr = (PartitionedRegion) context.getRegionProvider().getDataRegion();\n+    long usedMemory = pr.getDataStore().currentAllocatedMemory();\n+    final String MEMORY_STRING =\n+        \"# Memory\\r\\n\" +\n+            \"used_memory:\" + usedMemory + \"\\r\\n\" +\n+            \"mem_fragmentation_ratio:0\\r\\n\";\n+    return MEMORY_STRING;\n+  }\n+\n+  private String getStatsSection(ExecutionHandlerContext context) {\n+    final RedisStats redisStats = context.getRedisStats();\n+    String instantaneous_input_kbps =\n+        new DecimalFormat(\"0.00\")\n+            .format(redisStats.getNetworkKilobytesReadPerSecond());\n+    final String STATS_STRING =\n+        \"# Stats\\r\\n\" +\n+            \"total_commands_processed:\" + redisStats.getCommandsProcessed() + \"\\r\\n\" +\n+            \"instantaneous_ops_per_sec:\" + redisStats.getOpsPerSecond() + \"\\r\\n\" +\n+            \"total_net_input_bytes:\" + redisStats.getNetworkBytesRead() + \"\\r\\n\" +\n+            \"instantaneous_input_kbps:\" + instantaneous_input_kbps + \"\\r\\n\" +\n+            \"total_connections_received:\" + redisStats.getConnectionsReceived() + \"\\r\\n\" +\n+            \"keyspace_hits:\" + redisStats.getKeyspaceHits() + \"\\r\\n\" +\n+            \"keyspace_misses:\" + redisStats.getKeyspaceMisses() + \"\\r\\n\" +\n+            \"evicted_keys:0\\r\\n\" +\n+            \"rejected_connections:0\\r\\n\";\n+    return STATS_STRING;\n+  }\n+\n+  private String getKeyspaceSection(ExecutionHandlerContext context) {\n+    final RedisStats redisStats = context.getRedisStats();\n+    final String KEYSPACE_STRING =\n+        \"# Keyspace\\r\\n\" +\n+            \"db0:keys=\" + context.getRegionProvider().getDataRegion().size() +\n+            \",expires=\" + redisStats.getExpirations() +\n+            \",avg_ttl=0\\r\\n\";", "originalCommit": "2ae4b36cbf038c74dfb18648b2f15f68681e30ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ5MjA4MQ==", "url": "https://github.com/apache/geode/pull/5678#discussion_r514492081", "bodyText": "story made for this", "author": "jhutchison", "createdAt": "2020-10-29T18:53:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY2OTI2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY4MjI5NA==", "url": "https://github.com/apache/geode/pull/5678#discussion_r513682294", "bodyText": "Do we actually need this executor for monitoring software?  It doesn't seem like we use it anywhere.  The command itself is still listed as UNIMPLEMENTED in RedisCommandType, so it would return an error.", "author": "sabbey37", "createdAt": "2020-10-28T18:46:29Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/server/SlowlogExecutor.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.server;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.geode.redis.internal.data.ByteArrayWrapper;\n+import org.apache.geode.redis.internal.executor.AbstractExecutor;\n+import org.apache.geode.redis.internal.executor.RedisResponse;\n+import org.apache.geode.redis.internal.netty.Command;\n+import org.apache.geode.redis.internal.netty.ExecutionHandlerContext;\n+\n+// TODO: only exists for Redis monitoring software, maybe make functional someday?\n+public class SlowlogExecutor extends AbstractExecutor {", "originalCommit": "2ae4b36cbf038c74dfb18648b2f15f68681e30ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ5MjM1MA==", "url": "https://github.com/apache/geode/pull/5678#discussion_r514492350", "bodyText": "done.", "author": "jhutchison", "createdAt": "2020-10-29T18:53:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY4MjI5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY4Mjg1NA==", "url": "https://github.com/apache/geode/pull/5678#discussion_r513682854", "bodyText": "Seems like we could leave this formatting change to spA.", "author": "sabbey37", "createdAt": "2020-10-28T18:47:24Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/string/GetBitExecutor.java", "diffHunk": "@@ -40,7 +40,8 @@ public RedisResponse executeCommand(Command command, ExecutionHandlerContext con\n       return RedisResponse.error(ERROR_NOT_INT);\n     }\n \n-    int result = getRedisStringCommands(context).getbit(key, offset);\n+    int result = getRedisStringCommands(context)\n+        .getbit(key, offset);", "originalCommit": "2ae4b36cbf038c74dfb18648b2f15f68681e30ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ5MTE1Nw==", "url": "https://github.com/apache/geode/pull/5678#discussion_r514491157", "bodyText": "sure", "author": "jhutchison", "createdAt": "2020-10-29T18:51:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY4Mjg1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcwMjExNA==", "url": "https://github.com/apache/geode/pull/5678#discussion_r513702114", "bodyText": "Seems like we could let spA handle this formatting change, especially since nothing else was changed in this file.", "author": "sabbey37", "createdAt": "2020-10-28T19:20:58Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/netty/NettyRedisServer.java", "diffHunk": "@@ -169,7 +169,8 @@ public void initChannel(SocketChannel socketChannel) {\n         }\n         ChannelPipeline pipeline = socketChannel.pipeline();\n         addSSLIfEnabled(socketChannel, pipeline);\n-        pipeline.addLast(ByteToCommandDecoder.class.getSimpleName(), new ByteToCommandDecoder());\n+        pipeline.addLast(ByteToCommandDecoder.class.getSimpleName(),\n+            new ByteToCommandDecoder(redisStats));", "originalCommit": "2ae4b36cbf038c74dfb18648b2f15f68681e30ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ4NDY1Nw==", "url": "https://github.com/apache/geode/pull/5678#discussion_r514484657", "bodyText": "will submit separate PR with format changes", "author": "jhutchison", "createdAt": "2020-10-29T18:40:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcwMjExNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ5MDM3NQ==", "url": "https://github.com/apache/geode/pull/5678#discussion_r514490375", "bodyText": "will create separate formatting pr", "author": "jhutchison", "createdAt": "2020-10-29T18:50:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcwMjExNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcyNDg4NQ==", "url": "https://github.com/apache/geode/pull/5678#discussion_r513724885", "bodyText": "The clientID statistic is actually the same as connectedClients. We could make the getClients() method public and just use that (unless there's a reason we shouldn't make it public)", "author": "sabbey37", "createdAt": "2020-10-28T20:01:38Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/RedisStats.java", "diffHunk": "@@ -171,13 +180,92 @@ public void endCommand(RedisCommandType command, long start) {\n   }\n \n   public void addClient() {\n+    connectionsReceived.incrementAndGet();\n+    connectedClients.incrementAndGet();\n     stats.incLong(clientId, 1);", "originalCommit": "2ae4b36cbf038c74dfb18648b2f15f68681e30ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ4Njg3Ng==", "url": "https://github.com/apache/geode/pull/5678#discussion_r514486876", "bodyText": "can likely be addressed in future changes to functionality", "author": "jhutchison", "createdAt": "2020-10-29T18:44:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcyNDg4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ5MDg1Nw==", "url": "https://github.com/apache/geode/pull/5678#discussion_r514490857", "bodyText": "will likely be addressed in future work on functionality here", "author": "jhutchison", "createdAt": "2020-10-29T18:51:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcyNDg4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcyNjE2NQ==", "url": "https://github.com/apache/geode/pull/5678#discussion_r513726165", "bodyText": "We have a lot of integration tests for keyspaceHits and keyspaceMisses, but we don't have any for the other statistics. It would be good to test those as well.", "author": "sabbey37", "createdAt": "2020-10-28T20:04:03Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/RedisStats.java", "diffHunk": "@@ -171,13 +180,92 @@ public void endCommand(RedisCommandType command, long start) {\n   }\n \n   public void addClient() {\n+    connectionsReceived.incrementAndGet();\n+    connectedClients.incrementAndGet();\n     stats.incLong(clientId, 1);\n   }\n \n   public void removeClient() {\n+    connectedClients.decrementAndGet();\n     stats.incLong(clientId, -1);\n   }\n \n+  private final AtomicLong commandsProcessed = new AtomicLong();\n+  private final AtomicLong opsPerSecond = new AtomicLong();\n+  private final AtomicLong networkBytesRead = new AtomicLong();\n+  private volatile double networkKilobytesReadPerSecond;\n+  private final AtomicLong connectionsReceived = new AtomicLong();\n+  private final AtomicLong connectedClients = new AtomicLong();\n+  private final AtomicLong expirations = new AtomicLong();\n+  private final AtomicLong keyspaceHits = new AtomicLong();\n+  private final AtomicLong keyspaceMisses = new AtomicLong();", "originalCommit": "2ae4b36cbf038c74dfb18648b2f15f68681e30ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ4MDYwNA==", "url": "https://github.com/apache/geode/pull/5678#discussion_r514480604", "bodyText": "will add", "author": "jhutchison", "createdAt": "2020-10-29T18:33:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcyNjE2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczMTE4NA==", "url": "https://github.com/apache/geode/pull/5678#discussion_r513731184", "bodyText": "I mentioned in another comment that we should test all the statistics, not just clients and keyspace hits and misses.  We should also add tests/update existing tests in AbstractInfoIntegrationTest", "author": "sabbey37", "createdAt": "2020-10-28T20:13:23Z", "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/internal/RedisStatsIntegrationTest.java", "diffHunk": "@@ -16,28 +16,469 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n+import java.util.concurrent.TimeUnit;\n+\n+import org.junit.Before;\n import org.junit.ClassRule;\n import org.junit.Test;\n+import redis.clients.jedis.BitOP;\n import redis.clients.jedis.Jedis;\n \n import org.apache.geode.redis.GeodeRedisServerRule;\n import org.apache.geode.test.awaitility.GeodeAwaitility;\n \n public class RedisStatsIntegrationTest {", "originalCommit": "2ae4b36cbf038c74dfb18648b2f15f68681e30ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ4MDgxMw==", "url": "https://github.com/apache/geode/pull/5678#discussion_r514480813", "bodyText": "will do", "author": "jhutchison", "createdAt": "2020-10-29T18:33:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczMTE4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczODA1Mw==", "url": "https://github.com/apache/geode/pull/5678#discussion_r513738053", "bodyText": "Not sure if we want to add the SelectExecutor in this PR, since there's another PR that adds it.  If we do add it in this PR, we need to remove SELECT from the list of unimplemented commands and add it to the list of unsupported commands in SupportedCommandsJUnitTest.", "author": "sabbey37", "createdAt": "2020-10-28T20:26:01Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/connection/SelectExecutor.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+package org.apache.geode.redis.internal.executor.connection;\n+\n+import org.apache.geode.redis.internal.executor.AbstractExecutor;\n+import org.apache.geode.redis.internal.executor.RedisResponse;\n+import org.apache.geode.redis.internal.netty.Command;\n+import org.apache.geode.redis.internal.netty.ExecutionHandlerContext;\n+\n+public class SelectExecutor extends AbstractExecutor {", "originalCommit": "2ae4b36cbf038c74dfb18648b2f15f68681e30ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ4OTMxMA==", "url": "https://github.com/apache/geode/pull/5678#discussion_r514489310", "bodyText": "thanks for catching this-  will remove", "author": "jhutchison", "createdAt": "2020-10-29T18:48:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczODA1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc1NzIzOQ==", "url": "https://github.com/apache/geode/pull/5678#discussion_r513757239", "bodyText": "I don't think we are counting expirations properly.  According to the Redis INFO docs (and also testing our version vs. Redis), it should be the number of keys with an expiration since we are using it in the keyspace section:\nThe keyspace section provides statistics on the main dictionary of each database. The statistics are the number of keys, and the number of keys with an expiration.\n\nFor each database, the following line is added:\n\ndbXXX: keys=XXX,expires=XXX\n\nThis means that we should increment the count when any key has an expiration set and decrement it when that key no longer has an expiration (because it was persisted, expired on its own, was deleted, etc.).  Right now, we only increment the count when a key expires, and we never decrement it.", "author": "sabbey37", "createdAt": "2020-10-28T21:00:57Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/RedisStats.java", "diffHunk": "@@ -206,6 +294,7 @@ public void endExpiration(long start) {\n       stats.incLong(expirationTimeId, getTime() - start);\n     }\n     stats.incLong(expirationsId, 1);\n+    expirations.incrementAndGet();", "originalCommit": "2ae4b36cbf038c74dfb18648b2f15f68681e30ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ4NzQ4OQ==", "url": "https://github.com/apache/geode/pull/5678#discussion_r514487489", "bodyText": "story added to backlog for this", "author": "jhutchison", "createdAt": "2020-10-29T18:45:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc1NzIzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ5MjY5NA==", "url": "https://github.com/apache/geode/pull/5678#discussion_r514492694", "bodyText": "story made for this", "author": "jhutchison", "createdAt": "2020-10-29T18:54:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc1NzIzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc0MTA1Nw==", "url": "https://github.com/apache/geode/pull/5678#discussion_r513741057", "bodyText": "why does this not cause two misses?", "author": "nonbinaryprogrammer", "createdAt": "2020-10-28T20:30:58Z", "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/internal/RedisStatsIntegrationTest.java", "diffHunk": "@@ -16,28 +16,469 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n+import java.util.concurrent.TimeUnit;\n+\n+import org.junit.Before;\n import org.junit.ClassRule;\n import org.junit.Test;\n+import redis.clients.jedis.BitOP;\n import redis.clients.jedis.Jedis;\n \n import org.apache.geode.redis.GeodeRedisServerRule;\n import org.apache.geode.test.awaitility.GeodeAwaitility;\n \n public class RedisStatsIntegrationTest {\n+  public static final String EXISTING_HASH_KEY = \"Existing_Hash\";\n+  public static final String EXISTING_STRING_KEY = \"Existing_String\";\n+  public static final String EXISTING_SET_KEY_1 = \"Existing_Set_1\";\n+  public static final String EXISTING_SET_KEY_2 = \"Existing_Set_2\";\n+  public static final String NONEXISTENT_KEY = \"Nonexistent_Key\";\n+  Jedis jedis;\n+  long initialKeyspaceHits;\n+  long initialKeyspaceMisses;\n \n   @ClassRule\n   public static GeodeRedisServerRule server = new GeodeRedisServerRule();\n \n+  @Before\n+  public void setup() {\n+    jedis = new Jedis(\"localhost\", server.getPort(), 10000000);\n+    jedis.flushAll();\n+    jedis.set(EXISTING_STRING_KEY, \"A_Value\");\n+    jedis.hset(EXISTING_HASH_KEY, \"Field1\", \"Value1\");\n+    jedis.sadd(EXISTING_SET_KEY_1, \"m1\", \"m2\", \"m3\");\n+    jedis.sadd(EXISTING_SET_KEY_2, \"m4\", \"m5\", \"m6\");\n+    initialKeyspaceHits = server.getServer().getStats().getKeyspaceHits();\n+    initialKeyspaceMisses = server.getServer().getStats().getKeyspaceMisses();\n+  }\n+\n   @Test\n-  public void clientsStat_withConnectAndClose_isCorrect() throws InterruptedException {\n+  public void clientsStat_withConnectAndClose_isCorrect() {\n     long initialClients = server.getServer().getStats().getClients();\n     Jedis jedis = new Jedis(\"localhost\", server.getPort(), 10000000);\n \n     jedis.ping();\n     assertThat(server.getServer().getStats().getClients()).isEqualTo(initialClients + 1);\n \n     jedis.close();\n-    GeodeAwaitility.await().untilAsserted(\n+    GeodeAwaitility.await().atMost(5, TimeUnit.SECONDS).untilAsserted(\n         () -> assertThat(server.getServer().getStats().getClients()).isEqualTo(initialClients));\n   }\n+\n+  @Test\n+  public void keyspaceHitsStat_shouldIncrement_whenKeyAccessed() {\n+    jedis.get(EXISTING_STRING_KEY);\n+\n+    jedis.close();\n+    GeodeAwaitility.await().atMost(5, TimeUnit.SECONDS).untilAsserted(\n+        () -> {\n+          assertThat(server.getServer().getStats().getKeyspaceHits())\n+              .isEqualTo(initialKeyspaceHits + 1);\n+          assertThat(server.getServer().getStats().getKeyspaceMisses())\n+              .isEqualTo(initialKeyspaceMisses);\n+        });\n+  }\n+\n+  @Test\n+  public void keyspaceHitsStat_shouldNotIncrement_whenNonexistentKeyAccessed() {\n+    jedis.get(\"Nonexistent_Key\");\n+\n+    jedis.close();\n+    GeodeAwaitility.await().atMost(5, TimeUnit.SECONDS).untilAsserted(\n+        () -> {\n+          assertThat(server.getServer().getStats().getKeyspaceHits())\n+              .isEqualTo(initialKeyspaceHits);\n+          assertThat(server.getServer().getStats().getKeyspaceMisses())\n+              .isEqualTo(initialKeyspaceMisses + 1);\n+        });\n+  }\n+\n+  // TODO: Set doesn't work like native Redis!\n+  @Test\n+  public void keyspaceStats_setCommand_existingKey() {\n+    jedis.set(EXISTING_STRING_KEY, \"New_Value\");\n+\n+    jedis.close();\n+    GeodeAwaitility.await().atMost(5, TimeUnit.SECONDS).untilAsserted(\n+        () -> {\n+          assertThat(server.getServer().getStats().getKeyspaceHits())\n+              .isEqualTo(initialKeyspaceHits + 1);\n+          assertThat(server.getServer().getStats().getKeyspaceMisses())\n+              .isEqualTo(initialKeyspaceMisses);\n+        });\n+  }\n+\n+  // TODO: Set doesn't work like native Redis!\n+  @Test\n+  public void keyspaceStats_setCommand_nonexistentKey() {\n+    jedis.set(\"Another_Key\", \"Another_Value\");\n+\n+    jedis.close();\n+    GeodeAwaitility.await().atMost(5, TimeUnit.SECONDS).untilAsserted(\n+        () -> {\n+          assertThat(server.getServer().getStats().getKeyspaceHits())\n+              .isEqualTo(initialKeyspaceHits);\n+          assertThat(server.getServer().getStats().getKeyspaceMisses())\n+              .isEqualTo(initialKeyspaceMisses + 1);\n+        });\n+  }\n+\n+  @Test\n+  public void keyspaceStats_getBitCommand_existingKey() {\n+    jedis.getbit(EXISTING_STRING_KEY, 0);\n+\n+    jedis.close();\n+    GeodeAwaitility.await().atMost(5, TimeUnit.SECONDS).untilAsserted(\n+        () -> {\n+          assertThat(server.getServer().getStats().getKeyspaceHits())\n+              .isEqualTo(initialKeyspaceHits + 1);\n+          assertThat(server.getServer().getStats().getKeyspaceMisses())\n+              .isEqualTo(initialKeyspaceMisses);\n+        });\n+  }\n+\n+  @Test\n+  public void keyspaceStats_getBitCommand_nonexistentKey() {\n+    jedis.getbit(\"Nonexistent_Key\", 0);\n+\n+    jedis.close();\n+    GeodeAwaitility.await().atMost(5, TimeUnit.SECONDS).untilAsserted(\n+        () -> {\n+          assertThat(server.getServer().getStats().getKeyspaceHits())\n+              .isEqualTo(initialKeyspaceHits);\n+          assertThat(server.getServer().getStats().getKeyspaceMisses())\n+              .isEqualTo(initialKeyspaceMisses + 1);\n+        });\n+  }\n+\n+  @Test\n+  public void keyspaceStats_getRangeCommand_existingKey() {\n+    jedis.getrange(EXISTING_STRING_KEY, 0, 1);\n+    jedis.close();\n+    GeodeAwaitility.await().atMost(5, TimeUnit.SECONDS).untilAsserted(\n+        () -> {\n+          assertThat(server.getServer().getStats().getKeyspaceHits())\n+              .isEqualTo(initialKeyspaceHits + 1);\n+          assertThat(server.getServer().getStats().getKeyspaceMisses())\n+              .isEqualTo(initialKeyspaceMisses);\n+        });\n+  }\n+\n+  @Test\n+  public void keyspaceStats_getRangeCommand_nonexistentKey() {\n+    jedis.getrange(\"Nonexistent_Key\", 0, 1);\n+    jedis.close();\n+    GeodeAwaitility.await().atMost(5, TimeUnit.SECONDS).untilAsserted(\n+        () -> {\n+          assertThat(server.getServer().getStats().getKeyspaceHits())\n+              .isEqualTo(initialKeyspaceHits);\n+          assertThat(server.getServer().getStats().getKeyspaceMisses())\n+              .isEqualTo(initialKeyspaceMisses + 1);\n+        });\n+  }\n+\n+  @Test\n+  public void keyspaceStats_getSetCommand_existingKey() {\n+    jedis.getSet(EXISTING_STRING_KEY, \"New_Value\");\n+\n+    jedis.close();\n+    GeodeAwaitility.await().atMost(5, TimeUnit.SECONDS).untilAsserted(\n+        () -> {\n+          assertThat(server.getServer().getStats().getKeyspaceHits())\n+              .isEqualTo(initialKeyspaceHits + 1);\n+          assertThat(server.getServer().getStats().getKeyspaceMisses())\n+              .isEqualTo(initialKeyspaceMisses);\n+        });\n+  }\n+\n+  @Test\n+  public void keyspaceStats_getSetCommand_nonexistentKey() {\n+    jedis.getSet(\"Nonexistent_Key\", \"FakeValue\");\n+\n+    jedis.close();\n+    GeodeAwaitility.await().atMost(5, TimeUnit.SECONDS).untilAsserted(\n+        () -> {\n+          assertThat(server.getServer().getStats().getKeyspaceHits())\n+              .isEqualTo(initialKeyspaceHits);\n+          assertThat(server.getServer().getStats().getKeyspaceMisses())\n+              .isEqualTo(initialKeyspaceMisses + 1);\n+        });\n+  }\n+\n+  @Test\n+  public void keyspaceStats_strlenCommand_existingKey() {\n+    jedis.strlen(EXISTING_STRING_KEY);\n+\n+    jedis.close();\n+    GeodeAwaitility.await().atMost(5, TimeUnit.SECONDS).untilAsserted(\n+        () -> {\n+          assertThat(server.getServer().getStats().getKeyspaceHits())\n+              .isEqualTo(initialKeyspaceHits + 1);\n+          assertThat(server.getServer().getStats().getKeyspaceMisses())\n+              .isEqualTo(initialKeyspaceMisses);\n+        });\n+  }\n+\n+  @Test\n+  public void keyspaceStats_strlenCommand_nonexistentKey() {\n+    jedis.strlen(NONEXISTENT_KEY);\n+\n+    jedis.close();\n+    GeodeAwaitility.await().atMost(5, TimeUnit.SECONDS).untilAsserted(\n+        () -> {\n+          assertThat(server.getServer().getStats().getKeyspaceHits())\n+              .isEqualTo(initialKeyspaceHits);\n+          assertThat(server.getServer().getStats().getKeyspaceMisses())\n+              .isEqualTo(initialKeyspaceMisses + 1);\n+        });\n+  }\n+\n+  @Test\n+  public void keyspaceStats_mgetCommand() {\n+    jedis.mget(EXISTING_STRING_KEY, \"Nonexistent_Key\");\n+    jedis.close();\n+    GeodeAwaitility.await().atMost(5, TimeUnit.SECONDS).untilAsserted(\n+        () -> {\n+          assertThat(server.getServer().getStats().getKeyspaceHits())\n+              .isEqualTo(initialKeyspaceHits + 1);\n+          assertThat(server.getServer().getStats().getKeyspaceMisses())\n+              .isEqualTo(initialKeyspaceMisses + 1);\n+        });\n+  }\n+\n+  @Test\n+  public void keyspaceStats_bitopCommand() {\n+    jedis.bitop(BitOP.AND, EXISTING_STRING_KEY, EXISTING_STRING_KEY, \"Nonexistent_Key\");\n+\n+    jedis.close();\n+    GeodeAwaitility.await().atMost(5, TimeUnit.SECONDS).untilAsserted(\n+        () -> {\n+          assertThat(server.getServer().getStats().getKeyspaceHits())\n+              .isEqualTo(initialKeyspaceHits + 2);\n+          assertThat(server.getServer().getStats().getKeyspaceMisses())\n+              .isEqualTo(initialKeyspaceMisses + 1);\n+        });\n+  }\n+\n+  @Test\n+  public void keyspaceStats_bitcountCommand_existingKey() {\n+    jedis.bitcount(EXISTING_STRING_KEY);\n+\n+    jedis.close();\n+    GeodeAwaitility.await().atMost(5, TimeUnit.SECONDS).untilAsserted(\n+        () -> {\n+          assertThat(server.getServer().getStats().getKeyspaceHits())\n+              .isEqualTo(initialKeyspaceHits + 1);\n+          assertThat(server.getServer().getStats().getKeyspaceMisses())\n+              .isEqualTo(initialKeyspaceMisses);\n+        });\n+  }\n+\n+  @Test\n+  public void keyspaceStats_bitcountCommand_nonexistentKey() {\n+    jedis.bitcount(\"Nonexistent_Key\");\n+\n+    jedis.close();\n+    GeodeAwaitility.await().atMost(5, TimeUnit.SECONDS).untilAsserted(\n+        () -> {\n+          assertThat(server.getServer().getStats().getKeyspaceHits())\n+              .isEqualTo(initialKeyspaceHits);\n+          assertThat(server.getServer().getStats().getKeyspaceMisses())\n+              .isEqualTo(initialKeyspaceMisses + 1);\n+        });\n+  }\n+\n+  @Test\n+  public void keyspaceStats_bitposCommand_existingKey() {\n+    jedis.bitpos(EXISTING_STRING_KEY, true);\n+    jedis.close();\n+    GeodeAwaitility.await().atMost(5, TimeUnit.SECONDS).untilAsserted(\n+        () -> {\n+          assertThat(server.getServer().getStats().getKeyspaceHits())\n+              .isEqualTo(initialKeyspaceHits + 1);\n+          assertThat(server.getServer().getStats().getKeyspaceMisses())\n+              .isEqualTo(initialKeyspaceMisses);\n+        });\n+  }\n+\n+  @Test\n+  public void keyspaceStats_bitposCommand_nonexistentKey() {\n+    jedis.bitpos(\"Nonexistent_Key\", true);\n+    jedis.close();\n+    GeodeAwaitility.await().atMost(5, TimeUnit.SECONDS).untilAsserted(\n+        () -> {\n+          assertThat(server.getServer().getStats().getKeyspaceHits())\n+              .isEqualTo(initialKeyspaceHits);\n+          assertThat(server.getServer().getStats().getKeyspaceMisses())\n+              .isEqualTo(initialKeyspaceMisses + 1);\n+        });\n+  }\n+\n+  @Test\n+  public void keyspaceStats_hgetCommand_existingKey() {\n+    jedis.hget(EXISTING_HASH_KEY, \"Field1\");\n+\n+    jedis.close();\n+    GeodeAwaitility.await().atMost(5, TimeUnit.SECONDS).untilAsserted(\n+        () -> {\n+          assertThat(server.getServer().getStats().getKeyspaceHits())\n+              .isEqualTo(initialKeyspaceHits + 1);\n+          assertThat(server.getServer().getStats().getKeyspaceMisses())\n+              .isEqualTo(initialKeyspaceMisses);\n+        });\n+  }\n+\n+  @Test\n+  public void keyspaceStats_hgetCommand_nonexistentKey() {\n+    jedis.hget(\"Nonexistent_Hash\", \"Field1\");\n+\n+    jedis.close();\n+    GeodeAwaitility.await().atMost(5, TimeUnit.SECONDS).untilAsserted(\n+        () -> {\n+          assertThat(server.getServer().getStats().getKeyspaceHits())\n+              .isEqualTo(initialKeyspaceHits);\n+          assertThat(server.getServer().getStats().getKeyspaceMisses())\n+              .isEqualTo(initialKeyspaceMisses + 1);\n+        });\n+  }\n+\n+  @Test\n+  public void keyspaceStats_smembersCommand_existingKey() {\n+    jedis.smembers(EXISTING_SET_KEY_1);\n+\n+    jedis.close();\n+    GeodeAwaitility.await().atMost(5, TimeUnit.SECONDS).untilAsserted(\n+        () -> {\n+          assertThat(server.getServer().getStats().getKeyspaceHits())\n+              .isEqualTo(initialKeyspaceHits + 1);\n+          assertThat(server.getServer().getStats().getKeyspaceMisses())\n+              .isEqualTo(initialKeyspaceMisses);\n+        });\n+  }\n+\n+  @Test\n+  public void keyspaceStats_smembersCommand_nonexistentKey() {\n+    jedis.smembers(\"Nonexistent_Set\");\n+\n+    jedis.close();\n+    GeodeAwaitility.await().atMost(5, TimeUnit.SECONDS).untilAsserted(\n+        () -> {\n+          assertThat(server.getServer().getStats().getKeyspaceHits())\n+              .isEqualTo(initialKeyspaceHits);\n+          assertThat(server.getServer().getStats().getKeyspaceMisses())\n+              .isEqualTo(initialKeyspaceMisses + 1);\n+        });\n+  }\n+\n+  @Test\n+  public void keyspaceStats_sunionstoreCommand_existingKey() {\n+    jedis.sunionstore(\"New_Set\", EXISTING_SET_KEY_1, EXISTING_SET_KEY_2, \"Nonexistent_Set\");\n+\n+    jedis.close();\n+    GeodeAwaitility.await().atMost(5, TimeUnit.SECONDS).untilAsserted(\n+        () -> {\n+          assertThat(server.getServer().getStats().getKeyspaceHits())\n+              .isEqualTo(initialKeyspaceHits + 2);\n+          assertThat(server.getServer().getStats().getKeyspaceMisses())\n+              .isEqualTo(initialKeyspaceMisses + 1);", "originalCommit": "2ae4b36cbf038c74dfb18648b2f15f68681e30ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ5ODAxNQ==", "url": "https://github.com/apache/geode/pull/5678#discussion_r514498015", "bodyText": "why does this not cause two misses?\nthis is a weird interface- the first parameter is the set that the union will be stored in - so no hit or miss- just created. the 2 hits come from the existing keys. the miss comes form the non-existent set. let us know if that still seems weird and isn't addressed in a new story", "author": "jhutchison", "createdAt": "2020-10-29T19:02:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc0MTA1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgyOTM5MQ==", "url": "https://github.com/apache/geode/pull/5678#discussion_r513829391", "bodyText": "We also need to add the following cases: clients, memory, stats, and keyspace", "author": "sabbey37", "createdAt": "2020-10-28T23:53:48Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/server/InfoExecutor.java", "diffHunk": "@@ -58,6 +61,9 @@ private String getSpecifiedSection(ExecutionHandlerContext context,\n       case \"persistence\":\n         result = getPersistenceSection();\n         break;\n+      case \"replication\":\n+        result = getReplicationSection();\n+        break;", "originalCommit": "2ae4b36cbf038c74dfb18648b2f15f68681e30ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ4NzkwMQ==", "url": "https://github.com/apache/geode/pull/5678#discussion_r514487901", "bodyText": "story made for this", "author": "jhutchison", "createdAt": "2020-10-29T18:46:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgyOTM5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ4OTUzNg==", "url": "https://github.com/apache/geode/pull/5678#discussion_r514489536", "bodyText": "story added to implement this.", "author": "jhutchison", "createdAt": "2020-10-29T18:49:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgyOTM5MQ=="}], "type": "inlineReview"}, {"oid": "54ab7f0ff83ef183593f050aa6467e277a3b84e6", "url": "https://github.com/apache/geode/commit/54ab7f0ff83ef183593f050aa6467e277a3b84e6", "message": "Fix rebase issues", "committedDate": "2020-11-03T15:03:24Z", "type": "forcePushed"}, {"oid": "2fca900777304ccf582c39a0a2b201034628f851", "url": "https://github.com/apache/geode/commit/2fca900777304ccf582c39a0a2b201034628f851", "message": "added more info data for dashboard", "committedDate": "2020-11-06T15:53:05Z", "type": "commit"}, {"oid": "87d86b49a3c2a41bc7eec6fbd0cde0cf42842605", "url": "https://github.com/apache/geode/commit/87d86b49a3c2a41bc7eec6fbd0cde0cf42842605", "message": "Enable keyspace hit/miss stats, implement for String ops", "committedDate": "2020-11-06T15:53:05Z", "type": "commit"}, {"oid": "932f05f6c98695c9f3f5e0263b8fc62a43f7c777", "url": "https://github.com/apache/geode/commit/932f05f6c98695c9f3f5e0263b8fc62a43f7c777", "message": "Hashes working, Sets started, testing timeouts reduced", "committedDate": "2020-11-06T15:53:05Z", "type": "commit"}, {"oid": "e00f67888ad86f2414a70fd6f186b4252589b9be", "url": "https://github.com/apache/geode/commit/e00f67888ad86f2414a70fd6f186b4252589b9be", "message": "Enable Set statistics, add dummy SLOWLOG, some cleanup", "committedDate": "2020-11-06T15:53:05Z", "type": "commit"}, {"oid": "b7dcc2a281fc6820cd888cbc3a0a7943f7e04398", "url": "https://github.com/apache/geode/commit/b7dcc2a281fc6820cd888cbc3a0a7943f7e04398", "message": "GEODE-8663: update Redis Info command To include additional statistics", "committedDate": "2020-11-06T15:53:05Z", "type": "commit"}, {"oid": "8c9c4ef493ea90dda3ceafc3db16199c21c2cab6", "url": "https://github.com/apache/geode/commit/8c9c4ef493ea90dda3ceafc3db16199c21c2cab6", "message": "roll back formatting changes", "committedDate": "2020-11-06T15:53:05Z", "type": "commit"}, {"oid": "e4c595f40205a42794bb5ce8247348558fc159d4", "url": "https://github.com/apache/geode/commit/e4c595f40205a42794bb5ce8247348558fc159d4", "message": "Revert \"roll back formatting changes\"\n\nThis reverts commit 8ffab50aa3714b79924ed13a8c72f10d6076de12.", "committedDate": "2020-11-06T15:53:05Z", "type": "commit"}, {"oid": "632bc8822e6a758baf9fcc4bd1a87711917f83d5", "url": "https://github.com/apache/geode/commit/632bc8822e6a758baf9fcc4bd1a87711917f83d5", "message": "refactor RedisStats, and RedisStatsIntegrationTest add test for opsPerSecond", "committedDate": "2020-11-06T15:53:05Z", "type": "commit"}, {"oid": "79d1acef7c992e59ecb0d6afbf3e508bb29b943f", "url": "https://github.com/apache/geode/commit/79d1acef7c992e59ecb0d6afbf3e508bb29b943f", "message": "reformat opsPerSecondtest", "committedDate": "2020-11-06T15:53:05Z", "type": "commit"}, {"oid": "33d3710bc1ed2f5d91834d73371228c457183768", "url": "https://github.com/apache/geode/commit/33d3710bc1ed2f5d91834d73371228c457183768", "message": "add test for instantaneousInputKbps", "committedDate": "2020-11-06T15:53:05Z", "type": "commit"}, {"oid": "97c46845275e4d573c9a8aff973dcf791e7aa73a", "url": "https://github.com/apache/geode/commit/97c46845275e4d573c9a8aff973dcf791e7aa73a", "message": "Fix rebase issues", "committedDate": "2020-11-06T15:53:05Z", "type": "commit"}, {"oid": "f2e0f44e3e5c46c669164181ceea495a5c276556", "url": "https://github.com/apache/geode/commit/f2e0f44e3e5c46c669164181ceea495a5c276556", "message": "add test for connectionsReceivedStat", "committedDate": "2020-11-06T15:53:05Z", "type": "commit"}, {"oid": "a9d3d1209c096330bb575a0bf7b7719f1b93267b", "url": "https://github.com/apache/geode/commit/a9d3d1209c096330bb575a0bf7b7719f1b93267b", "message": "create test for uptime In Seconds\n\nCo-authored-by: Hale Bales <hbales@vmware.com>", "committedDate": "2020-11-06T15:53:05Z", "type": "commit"}, {"oid": "4f6d43203b0df2e29f3c84d9ee72037dedc51006", "url": "https://github.com/apache/geode/commit/4f6d43203b0df2e29f3c84d9ee72037dedc51006", "message": "add test for uptimeinDays", "committedDate": "2020-11-06T15:53:05Z", "type": "commit"}, {"oid": "62844cbcd859907ba574887c8530a6e2a55e0b30", "url": "https://github.com/apache/geode/commit/62844cbcd859907ba574887c8530a6e2a55e0b30", "message": "make expires return 0; remove unneeded connectedClients variable", "committedDate": "2020-11-06T15:53:05Z", "type": "commit"}, {"oid": "b0f729de6bd3ea9a28007c24c75ca65faf38bbaa", "url": "https://github.com/apache/geode/commit/b0f729de6bd3ea9a28007c24c75ca65faf38bbaa", "message": "fix integration test for opsPerSecond", "committedDate": "2020-11-06T15:53:05Z", "type": "commit"}, {"oid": "658afbdf1ed08aae7cc06448f6edc58a7a17d385", "url": "https://github.com/apache/geode/commit/658afbdf1ed08aae7cc06448f6edc58a7a17d385", "message": "refactor how networkBytesPerSecond is calculated", "committedDate": "2020-11-06T15:53:05Z", "type": "commit"}, {"oid": "ee92b05129192b6dd3f1d8209092b7ad79effb50", "url": "https://github.com/apache/geode/commit/ee92b05129192b6dd3f1d8209092b7ad79effb50", "message": "change kilobytesReadPerSecond to KiloBytesReadOVerLastSecond; alter behavior to match new name", "committedDate": "2020-11-06T15:53:06Z", "type": "commit"}, {"oid": "2ef927da48133bda67dc7d006155b414663d613a", "url": "https://github.com/apache/geode/commit/2ef927da48133bda67dc7d006155b414663d613a", "message": "test corrections and refactors for NetworkKilobytesReadOverlastSecond", "committedDate": "2020-11-06T15:53:06Z", "type": "commit"}, {"oid": "c99b65445f3c1ba224d52ef5d3fecc29c67b4baa", "url": "https://github.com/apache/geode/commit/c99b65445f3c1ba224d52ef5d3fecc29c67b4baa", "message": "fix failing tests in statsIntegraionTest", "committedDate": "2020-11-06T15:53:06Z", "type": "commit"}, {"oid": "c99b65445f3c1ba224d52ef5d3fecc29c67b4baa", "url": "https://github.com/apache/geode/commit/c99b65445f3c1ba224d52ef5d3fecc29c67b4baa", "message": "fix failing tests in statsIntegraionTest", "committedDate": "2020-11-06T15:53:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg3MzkwMw==", "url": "https://github.com/apache/geode/pull/5678#discussion_r518873903", "bodyText": "I don't think this is the right place to add these methods. Can the test that utilizes them not simply maintain local values for these (and initialize them in a @BeforeClass block?", "author": "jdeppe-pivotal", "createdAt": "2020-11-06T16:46:23Z", "path": "geode-redis/src/commonTest/java/org/apache/geode/redis/GeodeRedisServerRule.java", "diffHunk": "@@ -47,6 +53,14 @@ protected void before() {\n     server.setAllowUnsupportedCommands(true);\n   }\n \n+  public long getStartTime() {", "originalCommit": "c99b65445f3c1ba224d52ef5d3fecc29c67b4baa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkzNDI0MA==", "url": "https://github.com/apache/geode/pull/5678#discussion_r518934240", "bodyText": "done", "author": "jhutchison", "createdAt": "2020-11-06T18:37:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg3MzkwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg3ODU2NA==", "url": "https://github.com/apache/geode/pull/5678#discussion_r518878564", "bodyText": "Please don't add formatting changes that seem somewhat arbitrary to the overall PR.", "author": "jdeppe-pivotal", "createdAt": "2020-11-06T16:54:03Z", "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/key/AbstractExistsIntegrationTest.java", "diffHunk": "@@ -61,7 +61,8 @@ public void givenKeyNotProvided_returnsWrongNumberOfArgumentsError() {\n \n   @Test\n   public void shouldReturnZero_givenKeyDoesNotExist() {\n-    assertThat(jedis.exists(toArray(\"doesNotExist\"))).isEqualTo(0L);\n+    assertThat(", "originalCommit": "c99b65445f3c1ba224d52ef5d3fecc29c67b4baa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk0MDM1Nw==", "url": "https://github.com/apache/geode/pull/5678#discussion_r518940357", "bodyText": "changed back", "author": "jhutchison", "createdAt": "2020-11-06T18:50:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg3ODU2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg3OTM5NA==", "url": "https://github.com/apache/geode/pull/5678#discussion_r518879394", "bodyText": "Please don't add formatting changes that seem somewhat arbitrary to the overall PR.", "author": "jdeppe-pivotal", "createdAt": "2020-11-06T16:55:24Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/string/GetBitExecutor.java", "diffHunk": "@@ -40,7 +40,8 @@ public RedisResponse executeCommand(Command command, ExecutionHandlerContext con\n       return RedisResponse.error(ERROR_NOT_INT);\n     }\n \n-    int result = getRedisStringCommands(context).getbit(key, offset);\n+    int result = getRedisStringCommands(context)\n+        .getbit(key, offset);", "originalCommit": "c99b65445f3c1ba224d52ef5d3fecc29c67b4baa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk0MDc4NA==", "url": "https://github.com/apache/geode/pull/5678#discussion_r518940784", "bodyText": "changed back", "author": "jhutchison", "createdAt": "2020-11-06T18:50:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg3OTM5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4MTExNQ==", "url": "https://github.com/apache/geode/pull/5678#discussion_r518881115", "bodyText": "It would be better to create a private instance variable for this DecimalForamt and then re-use that here when calling .format. Don't make it static since DecimalFormat is not thread-safe.", "author": "jdeppe-pivotal", "createdAt": "2020-11-06T16:58:23Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/server/InfoExecutor.java", "diffHunk": "@@ -69,29 +75,97 @@ private String getSpecifiedSection(ExecutionHandlerContext context,\n     return result;\n   }\n \n+  private String getStatsSection(ExecutionHandlerContext context) {\n+    final RedisStats redisStats = context.getRedisStats();\n+    String instantaneous_input_kbps =\n+        new DecimalFormat(\"0.00\")", "originalCommit": "c99b65445f3c1ba224d52ef5d3fecc29c67b4baa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkzNTUwMA==", "url": "https://github.com/apache/geode/pull/5678#discussion_r518935500", "bodyText": "done", "author": "jhutchison", "createdAt": "2020-11-06T18:40:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4MTExNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4MTU2Ng==", "url": "https://github.com/apache/geode/pull/5678#discussion_r518881566", "bodyText": "Please keep this line formatted as it was.", "author": "jdeppe-pivotal", "createdAt": "2020-11-06T16:59:09Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/data/RedisKeyCommandsFunctionExecutor.java", "diffHunk": "@@ -33,12 +33,34 @@ public boolean del(ByteArrayWrapper key) {\n \n   @Override\n   public boolean exists(ByteArrayWrapper key) {\n-    return stripedExecute(key, () -> getRedisData(key).exists());\n+    boolean keyExists =", "originalCommit": "c99b65445f3c1ba224d52ef5d3fecc29c67b4baa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkzNTg3Ng==", "url": "https://github.com/apache/geode/pull/5678#discussion_r518935876", "bodyText": "done", "author": "jhutchison", "createdAt": "2020-11-06T18:40:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4MTU2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4MTc3Mw==", "url": "https://github.com/apache/geode/pull/5678#discussion_r518881773", "bodyText": "Please keep this line formatted as it was.", "author": "jdeppe-pivotal", "createdAt": "2020-11-06T16:59:28Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/data/RedisKeyCommandsFunctionExecutor.java", "diffHunk": "@@ -33,12 +33,34 @@ public boolean del(ByteArrayWrapper key) {\n \n   @Override\n   public boolean exists(ByteArrayWrapper key) {\n-    return stripedExecute(key, () -> getRedisData(key).exists());\n+    boolean keyExists =\n+        stripedExecute(\n+            key,\n+            () -> getRedisData(key).exists());\n+\n+    if (keyExists) {\n+      helper.getRedisStats().incKeyspaceHits();\n+    } else {\n+      helper.getRedisStats().incKeyspaceMisses();\n+    }\n+\n+    return keyExists;\n   }\n \n   @Override\n   public long pttl(ByteArrayWrapper key) {\n-    return stripedExecute(key, () -> getRedisData(key).pttl(getRegion(), key));\n+    long result =", "originalCommit": "c99b65445f3c1ba224d52ef5d3fecc29c67b4baa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkzNTk4NA==", "url": "https://github.com/apache/geode/pull/5678#discussion_r518935984", "bodyText": "same as above", "author": "jhutchison", "createdAt": "2020-11-06T18:41:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4MTc3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkzODU1MQ==", "url": "https://github.com/apache/geode/pull/5678#discussion_r518938551", "bodyText": "done", "author": "jhutchison", "createdAt": "2020-11-06T18:46:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4MTc3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4MzA4NQ==", "url": "https://github.com/apache/geode/pull/5678#discussion_r518883085", "bodyText": "For consistency, I think it would be good to reset the other (Geode-specific) stats here too (not just clientId).", "author": "jdeppe-pivotal", "createdAt": "2020-11-06T17:01:45Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/RedisStats.java", "diffHunk": "@@ -82,6 +104,28 @@\n     expirationTimeId = type.nameToId(\"expirationTime\");\n   }\n \n+  public RedisStats(StatisticsFactory factory, StatisticsClock clock) {\n+    this(factory, \"redisStats\", clock);\n+  }\n+\n+  public RedisStats(StatisticsFactory factory, String textId, StatisticsClock clock) {\n+    stats = factory == null ? null : factory.createAtomicStatistics(type, textId);\n+    this.clock = clock;\n+    this.START_TIME_IN_NANOS = this.clock.getTime();\n+    perSecondExecutor = startPerSecondUpdater();\n+  }\n+\n+  public void clearAllStats() {", "originalCommit": "c99b65445f3c1ba224d52ef5d3fecc29c67b4baa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk0MTcwMg==", "url": "https://github.com/apache/geode/pull/5678#discussion_r518941702", "bodyText": "agree, thanks.", "author": "jhutchison", "createdAt": "2020-11-06T18:52:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4MzA4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkyNDQ2MA==", "url": "https://github.com/apache/geode/pull/5678#discussion_r519924460", "bodyText": "Not necessary to do this in this PR unless you're making other changes as well, but it might be a good idea to make this method protected instead of public and mark it as @VisibleForTesting", "author": "sabbey37", "createdAt": "2020-11-09T16:01:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4MzA4NQ=="}], "type": "inlineReview"}, {"oid": "f27ca9b7badea6b3eba13b1351937f8b8569a0c3", "url": "https://github.com/apache/geode/commit/f27ca9b7badea6b3eba13b1351937f8b8569a0c3", "message": "move statistics clock from to GeodeRedisServerRule to test instance", "committedDate": "2020-11-06T18:48:22Z", "type": "commit"}, {"oid": "764cdb3dbd51cfc6e52ba293662800eb157d1b57", "url": "https://github.com/apache/geode/commit/764cdb3dbd51cfc6e52ba293662800eb157d1b57", "message": "formatting changes, minor refactors", "committedDate": "2020-11-06T18:51:28Z", "type": "commit"}, {"oid": "14f66b3eef8cb5a97cbc9ab233f3126a59d29c00", "url": "https://github.com/apache/geode/commit/14f66b3eef8cb5a97cbc9ab233f3126a59d29c00", "message": "add remaining stats to clearAllStats", "committedDate": "2020-11-06T19:21:31Z", "type": "commit"}, {"oid": "8c5c47cf81040bf57ad5c257f497848b01246e4d", "url": "https://github.com/apache/geode/commit/8c5c47cf81040bf57ad5c257f497848b01246e4d", "message": "Spotless fixes", "committedDate": "2020-11-06T20:04:02Z", "type": "commit"}]}