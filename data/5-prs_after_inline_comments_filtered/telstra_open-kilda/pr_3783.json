{"pr_number": 3783, "pr_title": "[Server42] LCM part 1 and 2", "pr_createdAt": "2020-10-13T21:19:48Z", "pr_url": "https://github.com/telstra/open-kilda/pull/3783", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY4OTEzNQ==", "url": "https://github.com/telstra/open-kilda/pull/3783#discussion_r505689135", "bodyText": "Why we have @Header here?", "author": "surabujin", "createdAt": "2020-10-15T16:44:09Z", "path": "src-java/server42/server42-control/src/main/java/org/openkilda/server42/control/kafka/Gate.java", "diffHunk": "@@ -171,19 +204,34 @@ void listen(PushSettings data) {\n \n     @KafkaHandler\n     void listen(RemoveFlow data) {\n+        try {\n+            removeFlow(data.getFlowId(), data.getDirection());\n+        } catch (InvalidProtocolBufferException e) {\n+            log.error(\"Marshalling error on {}\", data);\n+        }\n+    }\n+\n+    private void removeFlow(String flowId, FlowDirection direction) throws InvalidProtocolBufferException {\n         Builder builder = CommandPacket.newBuilder();\n         Flow flow = Flow.newBuilder()\n-                .setFlowId(data.getFlowId())\n-                .setDirection(FlowDirection.toBoolean(data.getDirection()))\n+                .setFlowId(flowId)\n+                .setDirection(FlowDirection.toBoolean(direction))\n                 .build();\n         Control.RemoveFlow removeFlow = Control.RemoveFlow.newBuilder().setFlow(flow).build();\n         builder.setType(Type.REMOVE_FLOW);\n         builder.addCommand(Any.pack(removeFlow));\n         CommandPacket packet = builder.build();\n-        try {\n-            zeroMqClient.send(packet);\n-        } catch (InvalidProtocolBufferException e) {\n-            log.error(\"Marshalling error on {}\", data);\n-        }\n+        zeroMqClient.send(packet);\n+    }\n+\n+    private CommandPacket getFlowLIstCommandPacket(@Header(KafkaHeaders.RECEIVED_MESSAGE_KEY) String switchIdKey) {", "originalCommit": "3e4592d6b9aadcb16224ae9fe952f4f97bacddfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzczMzI1MQ==", "url": "https://github.com/telstra/open-kilda/pull/3783#discussion_r507733251", "bodyText": "done", "author": "nikitamarchenko", "createdAt": "2020-10-19T13:11:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY4OTEzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY5MTAyMQ==", "url": "https://github.com/telstra/open-kilda/pull/3783#discussion_r505691021", "bodyText": "Perhaps is will be better to name it RemoveExcessFlowOnSwitch?", "author": "surabujin", "createdAt": "2020-10-15T16:47:12Z", "path": "src-java/server42/server42-control/src/main/java/org/openkilda/server42/control/kafka/Gate.java", "diffHunk": "@@ -154,6 +161,32 @@ void listen(ListFlowsRequest data) {\n         }\n     }\n \n+    @KafkaHandler\n+    void listen(ListFlowsOnSwitch data,", "originalCommit": "3e4592d6b9aadcb16224ae9fe952f4f97bacddfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzczMzY5Nw==", "url": "https://github.com/telstra/open-kilda/pull/3783#discussion_r507733697", "bodyText": "A prefer to use that command as a notification about a list of flow.", "author": "nikitamarchenko", "createdAt": "2020-10-19T13:12:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY5MTAyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY5MTU3Nw==", "url": "https://github.com/telstra/open-kilda/pull/3783#discussion_r505691577", "bodyText": "2 capital letter in a row, is everithing ok with stylechecks in this package?", "author": "surabujin", "createdAt": "2020-10-15T16:48:05Z", "path": "src-java/server42/server42-control/src/main/java/org/openkilda/server42/control/kafka/Gate.java", "diffHunk": "@@ -171,19 +204,34 @@ void listen(PushSettings data) {\n \n     @KafkaHandler\n     void listen(RemoveFlow data) {\n+        try {\n+            removeFlow(data.getFlowId(), data.getDirection());\n+        } catch (InvalidProtocolBufferException e) {\n+            log.error(\"Marshalling error on {}\", data);\n+        }\n+    }\n+\n+    private void removeFlow(String flowId, FlowDirection direction) throws InvalidProtocolBufferException {\n         Builder builder = CommandPacket.newBuilder();\n         Flow flow = Flow.newBuilder()\n-                .setFlowId(data.getFlowId())\n-                .setDirection(FlowDirection.toBoolean(data.getDirection()))\n+                .setFlowId(flowId)\n+                .setDirection(FlowDirection.toBoolean(direction))\n                 .build();\n         Control.RemoveFlow removeFlow = Control.RemoveFlow.newBuilder().setFlow(flow).build();\n         builder.setType(Type.REMOVE_FLOW);\n         builder.addCommand(Any.pack(removeFlow));\n         CommandPacket packet = builder.build();\n-        try {\n-            zeroMqClient.send(packet);\n-        } catch (InvalidProtocolBufferException e) {\n-            log.error(\"Marshalling error on {}\", data);\n-        }\n+        zeroMqClient.send(packet);\n+    }\n+\n+    private CommandPacket getFlowLIstCommandPacket(@Header(KafkaHeaders.RECEIVED_MESSAGE_KEY) String switchIdKey) {", "originalCommit": "3e4592d6b9aadcb16224ae9fe952f4f97bacddfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzczNDAzOQ==", "url": "https://github.com/telstra/open-kilda/pull/3783#discussion_r507734039", "bodyText": "done", "author": "nikitamarchenko", "createdAt": "2020-10-19T13:13:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY5MTU3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY5MTg4NQ==", "url": "https://github.com/telstra/open-kilda/pull/3783#discussion_r505691885", "bodyText": "extra line", "author": "surabujin", "createdAt": "2020-10-15T16:48:37Z", "path": "src-java/server42/server42-control/src/test/java/org/openkilda/server42/control/kafka/GateTest.java", "diffHunk": "@@ -157,13 +157,23 @@ public void clearFlowsTest() throws Exception {\n         Headers headers = Headers.builder().correlationId(\"some-correlation-id\").build();\n         ClearFlows clearFlows = ClearFlows.builder().headers(headers).build();\n \n-        gate.listen(clearFlows);\n+        String dpId = \"00:00:1b:45:18:d6:71:5a\";\n+        gate.listen(clearFlows, dpId);\n         CommandPacket commandPacket = getCommandPacket();\n         assertThat(commandPacket.getType()).isEqualTo(Type.CLEAR_FLOWS);\n-        assertThat(commandPacket.getCommandList()).isEmpty();\n+\n+\n+        assertThat(commandPacket.getCommandList()).hasSize(1);\n+        Any command = commandPacket.getCommand(0);\n+        assertThat(command.is(Control.ClearFlowsFilter.class)).isTrue();\n+\n+        Control.ClearFlowsFilter unpack = command.unpack(Control.ClearFlowsFilter.class);\n+        String dstMac = \"1b:45:18:d6:71:5a\";\n+        assertThat(unpack.getDstMac()).isEqualTo(dstMac);\n     }\n \n \n+", "originalCommit": "3e4592d6b9aadcb16224ae9fe952f4f97bacddfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzczNDU2Ng==", "url": "https://github.com/telstra/open-kilda/pull/3783#discussion_r507734566", "bodyText": "done", "author": "nikitamarchenko", "createdAt": "2020-10-19T13:13:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY5MTg4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcwMTQ2Mg==", "url": "https://github.com/telstra/open-kilda/pull/3783#discussion_r505701462", "bodyText": "As for me simple loop will be better that filter stream 2 times.", "author": "surabujin", "createdAt": "2020-10-15T17:03:59Z", "path": "src-java/server42/server42-control-storm-topology/src/main/java/org/openkilda/server42/control/topology/service/RouterService.java", "diffHunk": "@@ -52,4 +58,29 @@ public void handleFlowRttFeatureToggle(Boolean featureEnabled) {\n                     .forEach(s -> carrier.deactivateFlowMonitoringOnSwitch(s.getSwitchId()));\n         }\n     }\n+\n+    /**\n+     * Part of LCM. Sends flow sync messages to FlowHandler or deactivate in case of feature disabled.\n+     */\n+    public void processSync() {\n+        if (isFlowRttFeatureToggle()) {\n+            Collection<SwitchProperties> all = switchPropertiesRepository.findAll();\n+            all.stream()", "originalCommit": "3e4592d6b9aadcb16224ae9fe952f4f97bacddfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzczNjY1NA==", "url": "https://github.com/telstra/open-kilda/pull/3783#discussion_r507736654", "bodyText": "It's a matter of taste.", "author": "nikitamarchenko", "createdAt": "2020-10-19T13:16:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcwMTQ2Mg=="}], "type": "inlineReview"}, {"oid": "6a36527439cf4a787abc647d5407b5c10070f5a8", "url": "https://github.com/telstra/open-kilda/commit/6a36527439cf4a787abc647d5407b5c10070f5a8", "message": "[Server42] LCM part 1 and 2", "committedDate": "2020-10-19T13:57:08Z", "type": "forcePushed"}, {"oid": "a68e04f7ed1ce3c9b0a44ecb9e36b2298701491c", "url": "https://github.com/telstra/open-kilda/commit/a68e04f7ed1ce3c9b0a44ecb9e36b2298701491c", "message": "[Server42] LCM part 1 and 2", "committedDate": "2020-10-23T12:17:50Z", "type": "commit"}, {"oid": "a68e04f7ed1ce3c9b0a44ecb9e36b2298701491c", "url": "https://github.com/telstra/open-kilda/commit/a68e04f7ed1ce3c9b0a44ecb9e36b2298701491c", "message": "[Server42] LCM part 1 and 2", "committedDate": "2020-10-23T12:17:50Z", "type": "forcePushed"}]}