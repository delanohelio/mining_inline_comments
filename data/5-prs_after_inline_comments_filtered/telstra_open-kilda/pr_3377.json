{"pr_number": 3377, "pr_title": "Added swap endpoints FSM in the Flow HS Topology.", "pr_createdAt": "2020-04-08T15:31:37Z", "pr_url": "https://github.com/telstra/open-kilda/pull/3377", "timeline": [{"oid": "5c0d343048c68cd9bcbeee0a0d2d1601aa8bcf56", "url": "https://github.com/telstra/open-kilda/commit/5c0d343048c68cd9bcbeee0a0d2d1601aa8bcf56", "message": "Added swap endpoints fsm.", "committedDate": "2020-04-15T09:13:13Z", "type": "forcePushed"}, {"oid": "b91d2e88ca4d9b3d8fb5f8365a145be65d0a15ce", "url": "https://github.com/telstra/open-kilda/commit/b91d2e88ca4d9b3d8fb5f8365a145be65d0a15ce", "message": "Added swap endpoints fsm.", "committedDate": "2020-04-23T13:45:09Z", "type": "forcePushed"}, {"oid": "453242d988d7ba028d660d68575b91d4394d9428", "url": "https://github.com/telstra/open-kilda/commit/453242d988d7ba028d660d68575b91d4394d9428", "message": "Added swap endpoints fsm.", "committedDate": "2020-04-23T14:15:12Z", "type": "forcePushed"}, {"oid": "2abbd2970c068ab4d3260df11cbb61a372a82d68", "url": "https://github.com/telstra/open-kilda/commit/2abbd2970c068ab4d3260df11cbb61a372a82d68", "message": "Added swap endpoints fsm.", "committedDate": "2020-04-27T11:41:28Z", "type": "forcePushed"}, {"oid": "972690b59bf951ddee0a5a93cb4a03299debb27e", "url": "https://github.com/telstra/open-kilda/commit/972690b59bf951ddee0a5a93cb4a03299debb27e", "message": "Added swap endpoints fsm.", "committedDate": "2020-04-28T08:02:28Z", "type": "forcePushed"}, {"oid": "f9051d697222564948a21560208ac0a1ec222620", "url": "https://github.com/telstra/open-kilda/commit/f9051d697222564948a21560208ac0a1ec222620", "message": "Added swap endpoints fsm.", "committedDate": "2020-04-28T08:24:25Z", "type": "forcePushed"}, {"oid": "92ad3a2c5122beee5033014fd7a71c174cce61c7", "url": "https://github.com/telstra/open-kilda/commit/92ad3a2c5122beee5033014fd7a71c174cce61c7", "message": "Added swap endpoints fsm.", "committedDate": "2020-04-28T09:14:22Z", "type": "forcePushed"}, {"oid": "47f68bda63214454ba1a73224202d4bd9701ef87", "url": "https://github.com/telstra/open-kilda/commit/47f68bda63214454ba1a73224202d4bd9701ef87", "message": "Add test for switch failure during swap endpoints", "committedDate": "2020-05-12T10:51:19Z", "type": "forcePushed"}, {"oid": "4f5bb604f39a1776461b3f6a93c7f1974a6b9179", "url": "https://github.com/telstra/open-kilda/commit/4f5bb604f39a1776461b3f6a93c7f1974a6b9179", "message": "Add test for switch failure during swap endpoints", "committedDate": "2020-05-13T06:56:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIyMzg3Ng==", "url": "https://github.com/telstra/open-kilda/pull/3377#discussion_r424223876", "bodyText": "id remove -", "author": "timofei-durakov", "createdAt": "2020-05-13T07:21:54Z", "path": "src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/swapendpoints/FlowSwapEndpointsFsm.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.wfm.topology.flowhs.fsm.swapendpoints;\n+\n+import static java.lang.String.format;\n+\n+import org.openkilda.messaging.Message;\n+import org.openkilda.messaging.command.flow.FlowRequest;\n+import org.openkilda.messaging.error.ErrorData;\n+import org.openkilda.messaging.error.ErrorType;\n+import org.openkilda.messaging.info.flow.FlowResponse;\n+import org.openkilda.model.Flow;\n+import org.openkilda.persistence.PersistenceManager;\n+import org.openkilda.wfm.CommandContext;\n+import org.openkilda.wfm.topology.flowhs.fsm.common.NbTrackableFsm;\n+import org.openkilda.wfm.topology.flowhs.fsm.swapendpoints.FlowSwapEndpointsFsm.Event;\n+import org.openkilda.wfm.topology.flowhs.fsm.swapendpoints.FlowSwapEndpointsFsm.State;\n+import org.openkilda.wfm.topology.flowhs.fsm.swapendpoints.actions.OnFinishedAction;\n+import org.openkilda.wfm.topology.flowhs.fsm.swapendpoints.actions.OnFinishedWithErrorAction;\n+import org.openkilda.wfm.topology.flowhs.fsm.swapendpoints.actions.OnReceivedUpdateResponseAction;\n+import org.openkilda.wfm.topology.flowhs.fsm.swapendpoints.actions.RevertUpdateRequestAction;\n+import org.openkilda.wfm.topology.flowhs.fsm.swapendpoints.actions.UpdateRequestAction;\n+import org.openkilda.wfm.topology.flowhs.fsm.swapendpoints.actions.ValidateFlowsAction;\n+import org.openkilda.wfm.topology.flowhs.model.RequestedFlow;\n+import org.openkilda.wfm.topology.flowhs.service.FlowSwapEndpointsHubCarrier;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.squirrelframework.foundation.fsm.StateMachineBuilder;\n+import org.squirrelframework.foundation.fsm.StateMachineBuilderFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Getter\n+@Setter\n+@Slf4j\n+public class FlowSwapEndpointsFsm extends NbTrackableFsm<FlowSwapEndpointsFsm, State, Event, FlowSwapEndpointsContext> {\n+    public static final int REQUEST_COUNT = 2;\n+\n+    public static final String GENERIC_ERROR_MESSAGE = \"Could not swap endpoints\";\n+\n+    private final FlowSwapEndpointsHubCarrier carrier;\n+\n+    private RequestedFlow firstTargetFlow;\n+    private RequestedFlow secondTargetFlow;\n+    private String firstFlowId;\n+    private String secondFlowId;\n+\n+    private int awaitingResponses = REQUEST_COUNT;\n+    private List<FlowResponse> flowResponses = new ArrayList<>();\n+    private List<ErrorData> errors = new ArrayList<>();\n+    private Flow firstOriginalFlow;\n+    private Flow secondOriginalFlow;\n+\n+    public FlowSwapEndpointsFsm(CommandContext commandContext, FlowSwapEndpointsHubCarrier carrier,\n+                                RequestedFlow firstTargetFlow, RequestedFlow secondTargetFlow) {\n+        super(commandContext);\n+        this.carrier = carrier;\n+        this.firstTargetFlow = firstTargetFlow;\n+        this.secondTargetFlow = secondTargetFlow;\n+        this.firstFlowId = firstTargetFlow.getFlowId();\n+        this.secondFlowId = secondTargetFlow.getFlowId();\n+    }\n+\n+    @Override\n+    public String getFlowId() {\n+        throw new UnsupportedOperationException(\"Not implemented for swap flow endpoints operation. Skipping\");\n+    }\n+\n+    @Override\n+    public void reportError(Event event) {\n+        if (Event.TIMEOUT == event) {\n+            reportGlobalTimeout();\n+        }\n+        // other errors reported inside actions and can be ignored here\n+    }\n+\n+    @Override\n+    protected String getCrudActionName() {\n+        return \"swap-endpoints\";", "originalCommit": "4f5bb604f39a1776461b3f6a93c7f1974a6b9179", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU2NjEzOQ==", "url": "https://github.com/telstra/open-kilda/pull/3377#discussion_r426566139", "bodyText": "What if one of the flows has \"in-progress\" status (like network changes trigger a reroute)? Will this leave the changes not reverted?", "author": "sergii-iakovenko", "createdAt": "2020-05-18T11:46:27Z", "path": "src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/swapendpoints/actions/RevertUpdateRequestAction.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.wfm.topology.flowhs.fsm.swapendpoints.actions;\n+\n+import org.openkilda.messaging.command.flow.FlowRequest;\n+import org.openkilda.messaging.command.flow.FlowRequest.Type;\n+import org.openkilda.model.Flow;\n+import org.openkilda.wfm.topology.flowhs.fsm.swapendpoints.FlowSwapEndpointsContext;\n+import org.openkilda.wfm.topology.flowhs.fsm.swapendpoints.FlowSwapEndpointsFsm;\n+import org.openkilda.wfm.topology.flowhs.fsm.swapendpoints.FlowSwapEndpointsFsm.Event;\n+import org.openkilda.wfm.topology.flowhs.fsm.swapendpoints.FlowSwapEndpointsFsm.State;\n+import org.openkilda.wfm.topology.flowhs.mapper.RequestedFlowMapper;\n+\n+import com.google.common.collect.Sets;\n+import lombok.extern.slf4j.Slf4j;\n+import org.squirrelframework.foundation.fsm.AnonymousAction;\n+\n+import java.util.ArrayList;\n+\n+@Slf4j\n+public class RevertUpdateRequestAction\n+        extends AnonymousAction<FlowSwapEndpointsFsm, State, Event, FlowSwapEndpointsContext> {\n+\n+    @Override\n+    public void execute(State from, State to, Event event, FlowSwapEndpointsContext context,\n+                        FlowSwapEndpointsFsm stateMachine) {\n+        stateMachine.setAwaitingResponses(FlowSwapEndpointsFsm.REQUEST_COUNT);\n+        stateMachine.setFlowResponses(new ArrayList<>());\n+\n+        Flow firstOriginalFlow = stateMachine.getFirstOriginalFlow();\n+        Flow secondOriginalFlow = stateMachine.getSecondOriginalFlow();\n+\n+        sendRevertUpdateCommand(firstOriginalFlow, secondOriginalFlow.getFlowId(), stateMachine);\n+        sendRevertUpdateCommand(secondOriginalFlow, firstOriginalFlow.getFlowId(), stateMachine);\n+    }\n+\n+    private void sendRevertUpdateCommand(Flow flow, String anotherFlowId, FlowSwapEndpointsFsm stateMachine) {", "originalCommit": "4f5bb604f39a1776461b3f6a93c7f1974a6b9179", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f2c392444632ffa9255bd291b1feae31ce145b77", "url": "https://github.com/telstra/open-kilda/commit/f2c392444632ffa9255bd291b1feae31ce145b77", "message": "Added swap endpoints fsm.", "committedDate": "2020-05-20T09:50:19Z", "type": "forcePushed"}, {"oid": "4ef76080f67386db596acbef2855b30930cfffbc", "url": "https://github.com/telstra/open-kilda/commit/4ef76080f67386db596acbef2855b30930cfffbc", "message": "Added swap endpoints fsm.", "committedDate": "2020-05-20T13:43:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyNjk3Ng==", "url": "https://github.com/telstra/open-kilda/pull/3377#discussion_r428026976", "bodyText": "Shoudn't 2 updates be in the same transaction?", "author": "sergii-iakovenko", "createdAt": "2020-05-20T13:50:01Z", "path": "src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/swapendpoints/actions/OnFinishedAction.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.wfm.topology.flowhs.fsm.swapendpoints.actions;\n+\n+import static java.lang.String.format;\n+\n+import org.openkilda.messaging.Message;\n+import org.openkilda.messaging.info.InfoMessage;\n+import org.openkilda.messaging.info.flow.FlowResponse;\n+import org.openkilda.messaging.info.flow.SwapFlowResponse;\n+import org.openkilda.persistence.PersistenceManager;\n+import org.openkilda.wfm.CommandContext;\n+import org.openkilda.wfm.share.logger.FlowOperationsDashboardLogger;\n+import org.openkilda.wfm.topology.flowhs.fsm.swapendpoints.FlowSwapEndpointsContext;\n+import org.openkilda.wfm.topology.flowhs.fsm.swapendpoints.FlowSwapEndpointsFsm;\n+import org.openkilda.wfm.topology.flowhs.fsm.swapendpoints.FlowSwapEndpointsFsm.Event;\n+import org.openkilda.wfm.topology.flowhs.fsm.swapendpoints.FlowSwapEndpointsFsm.State;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@Slf4j\n+public class OnFinishedAction extends OnFinishedNbTrackableAction {\n+\n+    public OnFinishedAction(PersistenceManager persistenceManager, FlowOperationsDashboardLogger dashboardLogger) {\n+        super(persistenceManager, dashboardLogger);\n+    }\n+\n+    @Override\n+    protected Optional<Message> performWithResponse(State from, State to, Event event, FlowSwapEndpointsContext context,\n+                                                    FlowSwapEndpointsFsm stateMachine) {\n+        log.info(\"Swap endpoints operation completed successfully.\");\n+\n+        updateFlowStatus(stateMachine.getFirstFlowId(), stateMachine);", "originalCommit": "4ef76080f67386db596acbef2855b30930cfffbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ1MDU4OA==", "url": "https://github.com/telstra/open-kilda/pull/3377#discussion_r428450588", "bodyText": "Yes, it should be. Fixed.", "author": "dpoltavets", "createdAt": "2020-05-21T05:22:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyNjk3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyNzY5MQ==", "url": "https://github.com/telstra/open-kilda/pull/3377#discussion_r428027691", "bodyText": "Shoudn't 2 updates be in the same transaction?", "author": "sergii-iakovenko", "createdAt": "2020-05-20T13:50:51Z", "path": "src-java/flowhs-topology/flowhs-storm-topology/src/main/java/org/openkilda/wfm/topology/flowhs/fsm/swapendpoints/actions/OnFinishedWithErrorAction.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.wfm.topology.flowhs.fsm.swapendpoints.actions;\n+\n+import static java.lang.String.format;\n+\n+import org.openkilda.messaging.Message;\n+import org.openkilda.messaging.error.ErrorData;\n+import org.openkilda.messaging.error.ErrorMessage;\n+import org.openkilda.messaging.error.ErrorType;\n+import org.openkilda.messaging.info.flow.FlowResponse;\n+import org.openkilda.messaging.model.FlowDto;\n+import org.openkilda.persistence.PersistenceManager;\n+import org.openkilda.wfm.CommandContext;\n+import org.openkilda.wfm.share.logger.FlowOperationsDashboardLogger;\n+import org.openkilda.wfm.topology.flowhs.fsm.swapendpoints.FlowSwapEndpointsContext;\n+import org.openkilda.wfm.topology.flowhs.fsm.swapendpoints.FlowSwapEndpointsFsm;\n+import org.openkilda.wfm.topology.flowhs.fsm.swapendpoints.FlowSwapEndpointsFsm.Event;\n+import org.openkilda.wfm.topology.flowhs.fsm.swapendpoints.FlowSwapEndpointsFsm.State;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class OnFinishedWithErrorAction extends OnFinishedNbTrackableAction {\n+\n+    public OnFinishedWithErrorAction(PersistenceManager persistenceManager,\n+                                     FlowOperationsDashboardLogger dashboardLogger) {\n+        super(persistenceManager, dashboardLogger);\n+    }\n+\n+    @Override\n+    protected Optional<Message> performWithResponse(State from, State to, Event event, FlowSwapEndpointsContext context,\n+                                                    FlowSwapEndpointsFsm stateMachine) {\n+\n+        ErrorData data;\n+        if (Event.TIMEOUT.equals(event)) {\n+            data = new ErrorData(ErrorType.OPERATION_TIMED_OUT, getGenericErrorMessage(),\n+                    \"Flow swap endpoints failed by timeout\");\n+        } else if (Event.NEXT.equals(event)) {\n+            List<String> flows = stateMachine.getFlowResponses().stream()\n+                    .map(FlowResponse::getPayload)\n+                    .map(FlowDto::getFlowId)\n+                    .collect(Collectors.toList());\n+            data = new ErrorData(ErrorType.UPDATE_FAILURE, getGenericErrorMessage(),\n+                    format(\"Reverted flows: %s\", flows));\n+        } else {\n+            data = (ErrorData) context.getResponse();\n+        }\n+\n+        if (!Event.VALIDATION_ERROR.equals(event)) {\n+            saveActionToHistory(stateMachine,\n+                    stateMachine.getFirstFlowId(), stateMachine.getSecondFlowId(), data.getErrorDescription());\n+            saveActionToHistory(stateMachine,\n+                    stateMachine.getSecondFlowId(), stateMachine.getFirstFlowId(), data.getErrorDescription());\n+        }\n+\n+        updateFlowStatus(stateMachine.getFirstFlowId(), stateMachine);", "originalCommit": "4ef76080f67386db596acbef2855b30930cfffbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ1MDYwOQ==", "url": "https://github.com/telstra/open-kilda/pull/3377#discussion_r428450609", "bodyText": "Yes, it should be. Fixed.", "author": "dpoltavets", "createdAt": "2020-05-21T05:22:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyNzY5MQ=="}], "type": "inlineReview"}, {"oid": "2567836b6c61a81c532d519381c6639d93c7d456", "url": "https://github.com/telstra/open-kilda/commit/2567836b6c61a81c532d519381c6639d93c7d456", "message": "Added swap endpoints fsm.", "committedDate": "2020-05-21T05:19:46Z", "type": "commit"}, {"oid": "2567836b6c61a81c532d519381c6639d93c7d456", "url": "https://github.com/telstra/open-kilda/commit/2567836b6c61a81c532d519381c6639d93c7d456", "message": "Added swap endpoints fsm.", "committedDate": "2020-05-21T05:19:46Z", "type": "forcePushed"}, {"oid": "2baceb065a956949172d61f26515fb46cf0d6191", "url": "https://github.com/telstra/open-kilda/commit/2baceb065a956949172d61f26515fb46cf0d6191", "message": "Northbound V1 requests redirected to FlowHSTopology", "committedDate": "2020-05-22T07:42:44Z", "type": "commit"}, {"oid": "105ff7d166a3692ca073f2c31dbc4430006c90ca", "url": "https://github.com/telstra/open-kilda/commit/105ff7d166a3692ca073f2c31dbc4430006c90ca", "message": "Merge pull request #3493 from telstra/v1-requests-redirected-to-flow-hs\n\nNorthbound V1 requests redirected to FlowHSTopology", "committedDate": "2020-05-25T12:56:25Z", "type": "commit"}]}