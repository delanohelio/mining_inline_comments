{"pr_number": 3436, "pr_title": "Server42 Part 1 Control and Stats apps", "pr_createdAt": "2020-05-04T07:12:43Z", "pr_url": "https://github.com/telstra/open-kilda/pull/3436", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE3MDkwOA==", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r420170908", "bodyText": "nit: 2018 -> 2020", "author": "rozdy", "createdAt": "2020-05-05T14:51:12Z", "path": "src-java/base-topology/base-messaging/src/main/java/org/openkilda/messaging/info/stats/FlowRttStatsData.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/* Copyright 2018 Telstra Open Source", "originalCommit": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc1MDI2OA==", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r423750268", "bodyText": "done", "author": "nikitamarchenko", "createdAt": "2020-05-12T13:51:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE3MDkwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE3Mzk3Mg==", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r420173972", "bodyText": "Is it correct order? I can't see switch_id property here.", "author": "rozdy", "createdAt": "2020-05-05T14:55:04Z", "path": "src-java/base-topology/base-messaging/src/main/java/org/openkilda/messaging/info/stats/FlowRttStatsData.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/* Copyright 2018 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.messaging.info.stats;\n+\n+import org.openkilda.messaging.info.InfoData;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import lombok.Builder;\n+import lombok.EqualsAndHashCode;\n+import lombok.Value;\n+\n+@Value\n+@Builder\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonPropertyOrder({\"switch_id\", \"flow_id\", \"t0\", \"t1\"})", "originalCommit": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4NzY1Nw==", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r421487657", "bodyText": "Why we need an order? is it used somewhere?", "author": "niksv", "createdAt": "2020-05-07T13:05:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE3Mzk3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc1MzUwMQ==", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r423753501", "bodyText": "Fixed. Yes, when you look into a raw Kafka stream useful when fields don't dance.", "author": "nikitamarchenko", "createdAt": "2020-05-12T13:55:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE3Mzk3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE3NjQ4NA==", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r420176484", "bodyText": "Do we have an option not to store autogenerated code in git?", "author": "rozdy", "createdAt": "2020-05-05T14:58:17Z", "path": "src-java/server42/server42-control-messaging/src/main/java/org/openkilda/server42/control/messaging/flowrtt/Control.java", "diffHunk": "@@ -5684,7 +6109,7 @@ public PushSettings parsePartialFrom(\n     internal_static_org_openkilda_server42_control_messaging_flowrtt_Flow_fieldAccessorTable = new\n       com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(\n         internal_static_org_openkilda_server42_control_messaging_flowrtt_Flow_descriptor,\n-        new java.lang.String[] { \"FlowId\", \"EncapsulationType\", \"TunnelId\", });\n+        new java.lang.String[] { \"FlowId\", \"EncapsulationType\", \"TunnelId\", \"TransitEncapsulationType\", \"TransitTunnelId\", \"Direction\", \"DstMac\", \"UdpSrcPort\", });", "originalCommit": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc1NTI0MQ==", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r423755241", "bodyText": "I will delete that. A code generator is part of the server42cpp part.", "author": "nikitamarchenko", "createdAt": "2020-05-12T13:58:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE3NjQ4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4MjU2Mg==", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r420182562", "bodyText": "nit: consts are usually static and uppercase with underscores", "author": "rozdy", "createdAt": "2020-05-05T15:06:27Z", "path": "src-java/server42/server42-control-server-stub/src/main/java/org/openkilda/server42/control/serverstub/StatsServer.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.server42.control.serverstub;\n+\n+import org.openkilda.server42.control.messaging.flowrtt.Control.Flow;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacket;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacketBucket;\n+\n+import lombok.Builder;\n+import lombok.Value;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Service;\n+import org.zeromq.ZContext;\n+import org.zeromq.ZMQ;\n+import org.zeromq.ZMQ.Socket;\n+\n+import java.time.Instant;\n+import java.util.HashMap;\n+import javax.annotation.PostConstruct;\n+\n+/**\n+ * Send statistics to stats application.\n+ */\n+@Service\n+@Slf4j\n+public class StatsServer extends Thread {\n+\n+    @Value\n+    @Builder\n+    static class FlowStats {\n+        String flowId;\n+        Boolean direction;\n+        Long baseLatency;\n+    }\n+\n+    private final int minBaseLatency = 100;\n+    private final int maxBaseLatency = 10000;\n+\n+    private final int minDeltaLatency = 10;\n+    private final int maxDeltaLatency = 100;", "originalCommit": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5NDI1Ng==", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r421494256", "bodyText": "+1", "author": "niksv", "createdAt": "2020-05-07T13:15:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4MjU2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc1NjUzNw==", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r423756537", "bodyText": "done", "author": "nikitamarchenko", "createdAt": "2020-05-12T13:59:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4MjU2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4MzEwNw==", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r420183107", "bodyText": "nit: probably you can use Map<String, FlowStats> as type here.", "author": "rozdy", "createdAt": "2020-05-05T15:07:10Z", "path": "src-java/server42/server42-control-server-stub/src/main/java/org/openkilda/server42/control/serverstub/StatsServer.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.server42.control.serverstub;\n+\n+import org.openkilda.server42.control.messaging.flowrtt.Control.Flow;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacket;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacketBucket;\n+\n+import lombok.Builder;\n+import lombok.Value;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Service;\n+import org.zeromq.ZContext;\n+import org.zeromq.ZMQ;\n+import org.zeromq.ZMQ.Socket;\n+\n+import java.time.Instant;\n+import java.util.HashMap;\n+import javax.annotation.PostConstruct;\n+\n+/**\n+ * Send statistics to stats application.\n+ */\n+@Service\n+@Slf4j\n+public class StatsServer extends Thread {\n+\n+    @Value\n+    @Builder\n+    static class FlowStats {\n+        String flowId;\n+        Boolean direction;\n+        Long baseLatency;\n+    }\n+\n+    private final int minBaseLatency = 100;\n+    private final int maxBaseLatency = 10000;\n+\n+    private final int minDeltaLatency = 10;\n+    private final int maxDeltaLatency = 100;\n+\n+    private HashMap<String, FlowStats> flows = new HashMap<>();", "originalCommit": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5NDM0Ng==", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r421494346", "bodyText": "+1", "author": "niksv", "createdAt": "2020-05-07T13:15:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4MzEwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc1NzQ1Mg==", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r423757452", "bodyText": "done", "author": "nikitamarchenko", "createdAt": "2020-05-12T14:00:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4MzEwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4Mzk0Ng==", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r420183946", "bodyText": "Please add some details.", "author": "rozdy", "createdAt": "2020-05-05T15:08:15Z", "path": "src-java/server42/server42-control-server-stub/src/main/java/org/openkilda/server42/control/serverstub/StatsServer.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.server42.control.serverstub;\n+\n+import org.openkilda.server42.control.messaging.flowrtt.Control.Flow;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacket;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacketBucket;\n+\n+import lombok.Builder;\n+import lombok.Value;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Service;\n+import org.zeromq.ZContext;\n+import org.zeromq.ZMQ;\n+import org.zeromq.ZMQ.Socket;\n+\n+import java.time.Instant;\n+import java.util.HashMap;\n+import javax.annotation.PostConstruct;\n+\n+/**\n+ * Send statistics to stats application.\n+ */\n+@Service\n+@Slf4j\n+public class StatsServer extends Thread {\n+\n+    @Value\n+    @Builder\n+    static class FlowStats {\n+        String flowId;\n+        Boolean direction;\n+        Long baseLatency;\n+    }\n+\n+    private final int minBaseLatency = 100;\n+    private final int maxBaseLatency = 10000;\n+\n+    private final int minDeltaLatency = 10;\n+    private final int maxDeltaLatency = 100;\n+\n+    private HashMap<String, FlowStats> flows = new HashMap<>();\n+    private long tickSize = 500;\n+\n+    @org.springframework.beans.factory.annotation.Value(\"${openkilda.server42.control.zeromq.stats.server.endpoint}\")\n+    private String bindEndpoint;\n+\n+    /**\n+     * Generate packet statistics.\n+     */\n+    @Override\n+    public void run() {\n+        log.info(\"started\");", "originalCommit": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5NDU1OQ==", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r421494559", "bodyText": "+1", "author": "niksv", "createdAt": "2020-05-07T13:16:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4Mzk0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5MDM3Mg==", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r420190372", "bodyText": "Why do we need to generate some latency?", "author": "rozdy", "createdAt": "2020-05-05T15:16:55Z", "path": "src-java/server42/server42-control-server-stub/src/main/java/org/openkilda/server42/control/serverstub/StatsServer.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.server42.control.serverstub;\n+\n+import org.openkilda.server42.control.messaging.flowrtt.Control.Flow;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacket;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacketBucket;\n+\n+import lombok.Builder;\n+import lombok.Value;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Service;\n+import org.zeromq.ZContext;\n+import org.zeromq.ZMQ;\n+import org.zeromq.ZMQ.Socket;\n+\n+import java.time.Instant;\n+import java.util.HashMap;\n+import javax.annotation.PostConstruct;\n+\n+/**\n+ * Send statistics to stats application.\n+ */\n+@Service\n+@Slf4j\n+public class StatsServer extends Thread {\n+\n+    @Value\n+    @Builder\n+    static class FlowStats {\n+        String flowId;\n+        Boolean direction;\n+        Long baseLatency;\n+    }\n+\n+    private final int minBaseLatency = 100;\n+    private final int maxBaseLatency = 10000;\n+\n+    private final int minDeltaLatency = 10;\n+    private final int maxDeltaLatency = 100;\n+\n+    private HashMap<String, FlowStats> flows = new HashMap<>();\n+    private long tickSize = 500;\n+\n+    @org.springframework.beans.factory.annotation.Value(\"${openkilda.server42.control.zeromq.stats.server.endpoint}\")\n+    private String bindEndpoint;\n+\n+    /**\n+     * Generate packet statistics.\n+     */\n+    @Override\n+    public void run() {\n+        log.info(\"started\");\n+        try (ZContext context = new ZContext()) {\n+            Socket server = context.createSocket(ZMQ.PUSH);\n+            server.bind(bindEndpoint);\n+            while (!isInterrupted()) {\n+                FlowLatencyPacketBucket.Builder flowBucketBuilder = FlowLatencyPacketBucket.newBuilder();\n+                FlowLatencyPacket.Builder flowLatencyPacketBuilder = FlowLatencyPacket.newBuilder();\n+                long millis = Instant.now().toEpochMilli();\n+                synchronized (this) {\n+                    for (FlowStats flow : flows.values()) {\n+                        flowLatencyPacketBuilder.setFlowId(flow.flowId);\n+                        flowLatencyPacketBuilder.setDirection(flow.direction);\n+                        flowLatencyPacketBuilder.setT0(millis);\n+\n+                        long generatedLatency = minDeltaLatency", "originalCommit": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc1OTQzNw==", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r423759437", "bodyText": "bc, that is the server stub, and it must generate fake packets with fake data.", "author": "nikitamarchenko", "createdAt": "2020-05-12T14:03:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5MDM3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5MDkyMA==", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r420190920", "bodyText": "It would be great to add some log here.", "author": "rozdy", "createdAt": "2020-05-05T15:17:39Z", "path": "src-java/server42/server42-control-server-stub/src/main/java/org/openkilda/server42/control/serverstub/StatsServer.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.server42.control.serverstub;\n+\n+import org.openkilda.server42.control.messaging.flowrtt.Control.Flow;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacket;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacketBucket;\n+\n+import lombok.Builder;\n+import lombok.Value;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Service;\n+import org.zeromq.ZContext;\n+import org.zeromq.ZMQ;\n+import org.zeromq.ZMQ.Socket;\n+\n+import java.time.Instant;\n+import java.util.HashMap;\n+import javax.annotation.PostConstruct;\n+\n+/**\n+ * Send statistics to stats application.\n+ */\n+@Service\n+@Slf4j\n+public class StatsServer extends Thread {\n+\n+    @Value\n+    @Builder\n+    static class FlowStats {\n+        String flowId;\n+        Boolean direction;\n+        Long baseLatency;\n+    }\n+\n+    private final int minBaseLatency = 100;\n+    private final int maxBaseLatency = 10000;\n+\n+    private final int minDeltaLatency = 10;\n+    private final int maxDeltaLatency = 100;\n+\n+    private HashMap<String, FlowStats> flows = new HashMap<>();\n+    private long tickSize = 500;\n+\n+    @org.springframework.beans.factory.annotation.Value(\"${openkilda.server42.control.zeromq.stats.server.endpoint}\")\n+    private String bindEndpoint;\n+\n+    /**\n+     * Generate packet statistics.\n+     */\n+    @Override\n+    public void run() {\n+        log.info(\"started\");\n+        try (ZContext context = new ZContext()) {\n+            Socket server = context.createSocket(ZMQ.PUSH);\n+            server.bind(bindEndpoint);\n+            while (!isInterrupted()) {\n+                FlowLatencyPacketBucket.Builder flowBucketBuilder = FlowLatencyPacketBucket.newBuilder();\n+                FlowLatencyPacket.Builder flowLatencyPacketBuilder = FlowLatencyPacket.newBuilder();\n+                long millis = Instant.now().toEpochMilli();\n+                synchronized (this) {\n+                    for (FlowStats flow : flows.values()) {\n+                        flowLatencyPacketBuilder.setFlowId(flow.flowId);\n+                        flowLatencyPacketBuilder.setDirection(flow.direction);\n+                        flowLatencyPacketBuilder.setT0(millis);\n+\n+                        long generatedLatency = minDeltaLatency\n+                                + (long) (Math.random() * (maxDeltaLatency - minDeltaLatency));\n+                        flowLatencyPacketBuilder.setT1(millis + flow.baseLatency + generatedLatency);\n+                        flowBucketBuilder.addPacket(flowLatencyPacketBuilder.build());\n+                    }\n+                }\n+\n+                if (!flows.isEmpty()) {\n+                    server.send(flowBucketBuilder.build().toByteArray());\n+                    log.info(\"send stats\");\n+                }\n+\n+                try {\n+                    sleep(tickSize);\n+                } catch (InterruptedException e) {\n+                    return;", "originalCommit": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc2MTk0NA==", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r423761944", "bodyText": "That is part of the server termination, I am not sure if logger available in that situation. But it's stub so I added it anyways.", "author": "nikitamarchenko", "createdAt": "2020-05-12T14:06:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5MDkyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0MDM1Ng==", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r420240356", "bodyText": "nit: 2020", "author": "rozdy", "createdAt": "2020-05-05T16:25:39Z", "path": "src-java/server42/server42-messaging/src/main/java/org/openkilda/server42/messaging/FlowDirection.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/* Copyright 2019 Telstra Open Source", "originalCommit": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc2Mzg2Nw==", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r423763867", "bodyText": "done", "author": "nikitamarchenko", "createdAt": "2020-05-12T14:09:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0MDM1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0MjEzMg==", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r420242132", "bodyText": "nit: 2020", "author": "rozdy", "createdAt": "2020-05-05T16:28:23Z", "path": "src-java/server42/server42-stats/src/main/java/org/openkilda/server42/stats/StatsApplication.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/* Copyright 2019 Telstra Open Source", "originalCommit": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0MjI0Nw==", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r420242247", "bodyText": "nit: 2020", "author": "rozdy", "createdAt": "2020-05-05T16:28:32Z", "path": "src-java/server42/server42-stats/src/main/java/org/openkilda/server42/stats/kafka/KafkaConfig.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/* Copyright 2019 Telstra Open Source", "originalCommit": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc2NDE0OA==", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r423764148", "bodyText": "done", "author": "nikitamarchenko", "createdAt": "2020-05-12T14:09:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0MjI0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0MjUzMg==", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r420242532", "bodyText": "nit: 2020", "author": "rozdy", "createdAt": "2020-05-05T16:28:55Z", "path": "src-java/server42/server42-stats/src/main/java/org/openkilda/server42/stats/metrics/MetricsService.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/* Copyright 2019 Telstra Open Source", "originalCommit": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc2NDQyOA==", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r423764428", "bodyText": "done", "author": "nikitamarchenko", "createdAt": "2020-05-12T14:09:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0MjUzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE3NjI3MA==", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r422176270", "bodyText": "Not clear why you need synchronization here. StatsServer extends Thread class (which represents a single thread) and Spring creates @service bean as a singleton by default. Why do you expect this code to be executed by multiple threads?", "author": "sergii-iakovenko", "createdAt": "2020-05-08T14:29:47Z", "path": "src-java/server42/server42-control-server-stub/src/main/java/org/openkilda/server42/control/serverstub/StatsServer.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.server42.control.serverstub;\n+\n+import org.openkilda.server42.control.messaging.flowrtt.Control.Flow;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacket;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacketBucket;\n+\n+import lombok.Builder;\n+import lombok.Value;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Service;\n+import org.zeromq.ZContext;\n+import org.zeromq.ZMQ;\n+import org.zeromq.ZMQ.Socket;\n+\n+import java.time.Instant;\n+import java.util.HashMap;\n+import javax.annotation.PostConstruct;\n+\n+/**\n+ * Send statistics to stats application.\n+ */\n+@Service\n+@Slf4j\n+public class StatsServer extends Thread {\n+\n+    @Value\n+    @Builder\n+    static class FlowStats {\n+        String flowId;\n+        Boolean direction;\n+        Long baseLatency;\n+    }\n+\n+    private final int minBaseLatency = 100;\n+    private final int maxBaseLatency = 10000;\n+\n+    private final int minDeltaLatency = 10;\n+    private final int maxDeltaLatency = 100;\n+\n+    private HashMap<String, FlowStats> flows = new HashMap<>();\n+    private long tickSize = 500;\n+\n+    @org.springframework.beans.factory.annotation.Value(\"${openkilda.server42.control.zeromq.stats.server.endpoint}\")\n+    private String bindEndpoint;\n+\n+    /**\n+     * Generate packet statistics.\n+     */\n+    @Override\n+    public void run() {\n+        log.info(\"started\");\n+        try (ZContext context = new ZContext()) {\n+            Socket server = context.createSocket(ZMQ.PUSH);\n+            server.bind(bindEndpoint);\n+            while (!isInterrupted()) {\n+                FlowLatencyPacketBucket.Builder flowBucketBuilder = FlowLatencyPacketBucket.newBuilder();\n+                FlowLatencyPacket.Builder flowLatencyPacketBuilder = FlowLatencyPacket.newBuilder();\n+                long millis = Instant.now().toEpochMilli();\n+                synchronized (this) {", "originalCommit": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE3NzM2NA==", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r422177364", "bodyText": "No need to catch the exception here. Just let it exit the thread method.", "author": "sergii-iakovenko", "createdAt": "2020-05-08T14:31:46Z", "path": "src-java/server42/server42-control-server-stub/src/main/java/org/openkilda/server42/control/serverstub/StatsServer.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.server42.control.serverstub;\n+\n+import org.openkilda.server42.control.messaging.flowrtt.Control.Flow;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacket;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacketBucket;\n+\n+import lombok.Builder;\n+import lombok.Value;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Service;\n+import org.zeromq.ZContext;\n+import org.zeromq.ZMQ;\n+import org.zeromq.ZMQ.Socket;\n+\n+import java.time.Instant;\n+import java.util.HashMap;\n+import javax.annotation.PostConstruct;\n+\n+/**\n+ * Send statistics to stats application.\n+ */\n+@Service\n+@Slf4j\n+public class StatsServer extends Thread {\n+\n+    @Value\n+    @Builder\n+    static class FlowStats {\n+        String flowId;\n+        Boolean direction;\n+        Long baseLatency;\n+    }\n+\n+    private final int minBaseLatency = 100;\n+    private final int maxBaseLatency = 10000;\n+\n+    private final int minDeltaLatency = 10;\n+    private final int maxDeltaLatency = 100;\n+\n+    private HashMap<String, FlowStats> flows = new HashMap<>();\n+    private long tickSize = 500;\n+\n+    @org.springframework.beans.factory.annotation.Value(\"${openkilda.server42.control.zeromq.stats.server.endpoint}\")\n+    private String bindEndpoint;\n+\n+    /**\n+     * Generate packet statistics.\n+     */\n+    @Override\n+    public void run() {\n+        log.info(\"started\");\n+        try (ZContext context = new ZContext()) {\n+            Socket server = context.createSocket(ZMQ.PUSH);\n+            server.bind(bindEndpoint);\n+            while (!isInterrupted()) {\n+                FlowLatencyPacketBucket.Builder flowBucketBuilder = FlowLatencyPacketBucket.newBuilder();\n+                FlowLatencyPacket.Builder flowLatencyPacketBuilder = FlowLatencyPacket.newBuilder();\n+                long millis = Instant.now().toEpochMilli();\n+                synchronized (this) {\n+                    for (FlowStats flow : flows.values()) {\n+                        flowLatencyPacketBuilder.setFlowId(flow.flowId);\n+                        flowLatencyPacketBuilder.setDirection(flow.direction);\n+                        flowLatencyPacketBuilder.setT0(millis);\n+\n+                        long generatedLatency = minDeltaLatency\n+                                + (long) (Math.random() * (maxDeltaLatency - minDeltaLatency));\n+                        flowLatencyPacketBuilder.setT1(millis + flow.baseLatency + generatedLatency);\n+                        flowBucketBuilder.addPacket(flowLatencyPacketBuilder.build());\n+                    }\n+                }\n+\n+                if (!flows.isEmpty()) {\n+                    server.send(flowBucketBuilder.build().toByteArray());\n+                    log.info(\"send stats\");\n+                }\n+\n+                try {\n+                    sleep(tickSize);\n+                } catch (InterruptedException e) {", "originalCommit": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE3ODI3OA==", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r422178278", "bodyText": "I'd use ConcurrentHashMap for \"flows\" instead of synchronizing the whole instance.", "author": "sergii-iakovenko", "createdAt": "2020-05-08T14:33:23Z", "path": "src-java/server42/server42-control-server-stub/src/main/java/org/openkilda/server42/control/serverstub/StatsServer.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/* Copyright 2020 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.server42.control.serverstub;\n+\n+import org.openkilda.server42.control.messaging.flowrtt.Control.Flow;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacket;\n+import org.openkilda.server42.stats.messaging.flowrtt.Statistics.FlowLatencyPacketBucket;\n+\n+import lombok.Builder;\n+import lombok.Value;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Service;\n+import org.zeromq.ZContext;\n+import org.zeromq.ZMQ;\n+import org.zeromq.ZMQ.Socket;\n+\n+import java.time.Instant;\n+import java.util.HashMap;\n+import javax.annotation.PostConstruct;\n+\n+/**\n+ * Send statistics to stats application.\n+ */\n+@Service\n+@Slf4j\n+public class StatsServer extends Thread {\n+\n+    @Value\n+    @Builder\n+    static class FlowStats {\n+        String flowId;\n+        Boolean direction;\n+        Long baseLatency;\n+    }\n+\n+    private final int minBaseLatency = 100;\n+    private final int maxBaseLatency = 10000;\n+\n+    private final int minDeltaLatency = 10;\n+    private final int maxDeltaLatency = 100;\n+\n+    private HashMap<String, FlowStats> flows = new HashMap<>();\n+    private long tickSize = 500;\n+\n+    @org.springframework.beans.factory.annotation.Value(\"${openkilda.server42.control.zeromq.stats.server.endpoint}\")\n+    private String bindEndpoint;\n+\n+    /**\n+     * Generate packet statistics.\n+     */\n+    @Override\n+    public void run() {\n+        log.info(\"started\");\n+        try (ZContext context = new ZContext()) {\n+            Socket server = context.createSocket(ZMQ.PUSH);\n+            server.bind(bindEndpoint);\n+            while (!isInterrupted()) {\n+                FlowLatencyPacketBucket.Builder flowBucketBuilder = FlowLatencyPacketBucket.newBuilder();\n+                FlowLatencyPacket.Builder flowLatencyPacketBuilder = FlowLatencyPacket.newBuilder();\n+                long millis = Instant.now().toEpochMilli();\n+                synchronized (this) {\n+                    for (FlowStats flow : flows.values()) {\n+                        flowLatencyPacketBuilder.setFlowId(flow.flowId);\n+                        flowLatencyPacketBuilder.setDirection(flow.direction);\n+                        flowLatencyPacketBuilder.setT0(millis);\n+\n+                        long generatedLatency = minDeltaLatency\n+                                + (long) (Math.random() * (maxDeltaLatency - minDeltaLatency));\n+                        flowLatencyPacketBuilder.setT1(millis + flow.baseLatency + generatedLatency);\n+                        flowBucketBuilder.addPacket(flowLatencyPacketBuilder.build());\n+                    }\n+                }\n+\n+                if (!flows.isEmpty()) {\n+                    server.send(flowBucketBuilder.build().toByteArray());\n+                    log.info(\"send stats\");\n+                }\n+\n+                try {\n+                    sleep(tickSize);\n+                } catch (InterruptedException e) {\n+                    return;\n+                }\n+            }\n+        }\n+    }\n+\n+    @PostConstruct\n+    void init() {\n+        this.start();\n+    }\n+\n+    /**\n+     * Add flow to packet generator.\n+     */\n+    public synchronized void addFlow(Flow flow) {", "originalCommit": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE4Mjk3OA==", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r422182978", "bodyText": "Please, reconsider the name of the class. Or add javadoc. \"Gate\" is too general to understand the purpose/role.", "author": "sergii-iakovenko", "createdAt": "2020-05-08T14:42:00Z", "path": "src-java/server42/server42-control/src/main/java/org/openkilda/server42/control/kafka/Gate.java", "diffHunk": "@@ -38,13 +41,22 @@\n import org.springframework.kafka.annotation.KafkaHandler;\n import org.springframework.kafka.annotation.KafkaListener;\n import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.kafka.support.KafkaHeaders;\n+import org.springframework.messaging.handler.annotation.Header;\n+import org.springframework.messaging.handler.annotation.Payload;\n import org.springframework.stereotype.Service;\n \n+import java.util.AbstractMap.SimpleEntry;\n import java.util.HashSet;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n \n @Service\n @Slf4j\n-@KafkaListener(id = \"server42-control\", topics = \"${openkilda.server42.control.kafka.topic.from_storm}\")\n+@KafkaListener(id = \"server42-control\",\n+        topics = \"${openkilda.server42.control.kafka.topic.from_storm}\",\n+        idIsGroup = false\n+)\n public class Gate {", "originalCommit": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE4NTUwOA==", "url": "https://github.com/telstra/open-kilda/pull/3436#discussion_r422185508", "bodyText": "nit: Why is the method called the same as an argument, instead of the name of the resulting bean?", "author": "sergii-iakovenko", "createdAt": "2020-05-08T14:46:24Z", "path": "src-java/server42/server42-stats/src/main/java/org/openkilda/server42/stats/kafka/KafkaConfig.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/* Copyright 2019 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.server42.stats.kafka;\n+\n+import org.apache.kafka.clients.admin.NewTopic;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.kafka.config.TopicBuilder;\n+\n+@Configuration\n+public class KafkaConfig {\n+    @Bean\n+    public NewTopic toStorm(@Value(\"${openkilda.server42.stats.kafka.topic.flowrtt.to_storm}\") String name) {", "originalCommit": "7f9d30d3c60bf0501994d4d8761d0c37f473c2a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "be01f98a5746133cdf4babfce498805858921049", "url": "https://github.com/telstra/open-kilda/commit/be01f98a5746133cdf4babfce498805858921049", "message": "Server42 Part 1 Control and Stats apps", "committedDate": "2020-05-12T15:07:37Z", "type": "forcePushed"}, {"oid": "5e2edb44a39812be215a5800bbe33ab544c73bc4", "url": "https://github.com/telstra/open-kilda/commit/5e2edb44a39812be215a5800bbe33ab544c73bc4", "message": "Server42 Part 1 Control and Stats apps", "committedDate": "2020-05-12T15:41:20Z", "type": "commit"}, {"oid": "5e2edb44a39812be215a5800bbe33ab544c73bc4", "url": "https://github.com/telstra/open-kilda/commit/5e2edb44a39812be215a5800bbe33ab544c73bc4", "message": "Server42 Part 1 Control and Stats apps", "committedDate": "2020-05-12T15:41:20Z", "type": "forcePushed"}]}