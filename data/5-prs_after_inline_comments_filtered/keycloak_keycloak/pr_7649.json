{"pr_number": 7649, "pr_title": "KEYCLOAK-14556 Authentication session map store", "pr_createdAt": "2020-11-30T11:41:42Z", "pr_url": "https://github.com/keycloak/keycloak/pull/7649", "timeline": [{"oid": "a8e7c23853baac5f42d9ff9406fefcfddf3033dc", "url": "https://github.com/keycloak/keycloak/commit/a8e7c23853baac5f42d9ff9406fefcfddf3033dc", "message": "KEYCLOAK-14556 Authentication session map store", "committedDate": "2020-11-30T14:31:35Z", "type": "forcePushed"}, {"oid": "ff388730e676ad5b37c71c6cc7f41412c0a553fd", "url": "https://github.com/keycloak/keycloak/commit/ff388730e676ad5b37c71c6cc7f41412c0a553fd", "message": "KEYCLOAK-14556 Authentication session map store", "committedDate": "2020-11-30T20:52:37Z", "type": "forcePushed"}, {"oid": "c4c2eecd813bb2dada3fb3fa905ca1c876c23020", "url": "https://github.com/keycloak/keycloak/commit/c4c2eecd813bb2dada3fb3fa905ca1c876c23020", "message": "KEYCLOAK-14556 Authentication session map store", "committedDate": "2020-12-04T12:45:01Z", "type": "forcePushed"}, {"oid": "2d80db29096f04c84e8ac4cbcf55d80a41c3d5cc", "url": "https://github.com/keycloak/keycloak/commit/2d80db29096f04c84e8ac4cbcf55d80a41c3d5cc", "message": "KEYCLOAK-14556 Authentication session map store", "committedDate": "2020-12-04T12:47:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjExNzcwNA==", "url": "https://github.com/keycloak/keycloak/pull/7649#discussion_r536117704", "bodyText": "Why has this method been introduced?", "author": "hmlnarik", "createdAt": "2020-12-04T13:58:01Z", "path": "server-spi/src/main/java/org/keycloak/sessions/AuthenticationSessionProvider.java", "diffHunk": "@@ -31,27 +31,87 @@\n     /**\n      * Creates and registers a new authentication session with random ID. Authentication session\n      * entity will be prefilled with current timestamp, the given realm and client.\n+     * @param realm {@code RealmModel}\n+     * @return Returns created {@code RootAuthenticationSessionModel}. Never returns {@code null}.\n      */\n     RootAuthenticationSessionModel createRootAuthenticationSession(RealmModel realm);\n \n-    RootAuthenticationSessionModel createRootAuthenticationSession(String id, RealmModel realm);\n+    /**\n+     * Creates a new root authentication session specified by the provided id and realm.\n+     * @param id {@code String}\n+     * @param realm {@code RealmModel}\n+     * @return Returns created {@code RootAuthenticationSessionModel}. Never returns {@code null}.\n+     * @deprecated Use {@link #createRootAuthenticationSession(RealmModel, String)} createRootAuthenticationSession} instead.\n+     */\n+    @Deprecated\n+    default RootAuthenticationSessionModel createRootAuthenticationSession(String id, RealmModel realm) {\n+        return createRootAuthenticationSession(realm, id);\n+    }\n \n+    /**\n+     * Creates a new root authentication session specified by the provided realm and id.\n+     * @param realm {@code RealmModel}\n+     * @param id {@code String}\n+     * @return Returns created {@code RootAuthenticationSessionModel}. Never returns {@code null}.\n+     */\n+    RootAuthenticationSessionModel createRootAuthenticationSession(RealmModel realm, String id);\n+\n+    /**\n+     * Returns the root authentication session specified by the provided realm and id.\n+     * @param realm {@code RealmModel}\n+     * @param authenticationSessionId {@code RootAuthenticationSessionModel}\n+     * @return Returns found {@code RootAuthenticationSessionModel} or {@code null} if no root authentication session is found.\n+     */\n     RootAuthenticationSessionModel getRootAuthenticationSession(RealmModel realm, String authenticationSessionId);\n \n-    void removeRootAuthenticationSession(RealmModel realm, RootAuthenticationSessionModel authenticationSession);\n+    /**\n+     * Removes provided root authentication session.\n+     * @param realm {@code RealmModel}\n+     * @param authenticationSession {@code RootAuthenticationSessionModel}\n+     * @deprecated Use {@link #removeRootAuthenticationSession(RootAuthenticationSessionModel)} removeRootAuthenticationSession} instead.\n+     */\n+    @Deprecated\n+    default void removeRootAuthenticationSession(RealmModel realm, RootAuthenticationSessionModel authenticationSession) {\n+        removeRootAuthenticationSession(authenticationSession);\n+    }\n+\n+    /**\n+     * Removes provided root authentication session.\n+     * @param authenticationSession {@code RootAuthenticationSessionModel}\n+     */\n+    void removeRootAuthenticationSession(RootAuthenticationSessionModel authenticationSession);", "originalCommit": "2d80db29096f04c84e8ac4cbcf55d80a41c3d5cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzNjg3OA==", "url": "https://github.com/keycloak/keycloak/pull/7649#discussion_r536136878", "bodyText": "Because I deprecated removeRootAuthenticationSession(RealmModel realm, RootAuthenticationSessionModel authenticationSession) as realm parameter is not used.", "author": "martin-kanis", "createdAt": "2020-12-04T14:26:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjExNzcwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5NzU2OQ==", "url": "https://github.com/keycloak/keycloak/pull/7649#discussion_r536197569", "bodyText": "Realm parameter is not used in the current implementation but is necessary to be retained for larger deployments with different logic of distributing sessions could leverage it.", "author": "hmlnarik", "createdAt": "2020-12-04T15:52:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjExNzcwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjExNzg2OA==", "url": "https://github.com/keycloak/keycloak/pull/7649#discussion_r536117868", "bodyText": "Why has this method been introduced?", "author": "hmlnarik", "createdAt": "2020-12-04T13:58:16Z", "path": "server-spi/src/main/java/org/keycloak/sessions/AuthenticationSessionProvider.java", "diffHunk": "@@ -31,27 +31,87 @@\n     /**\n      * Creates and registers a new authentication session with random ID. Authentication session\n      * entity will be prefilled with current timestamp, the given realm and client.\n+     * @param realm {@code RealmModel}\n+     * @return Returns created {@code RootAuthenticationSessionModel}. Never returns {@code null}.\n      */\n     RootAuthenticationSessionModel createRootAuthenticationSession(RealmModel realm);\n \n-    RootAuthenticationSessionModel createRootAuthenticationSession(String id, RealmModel realm);\n+    /**\n+     * Creates a new root authentication session specified by the provided id and realm.\n+     * @param id {@code String}\n+     * @param realm {@code RealmModel}\n+     * @return Returns created {@code RootAuthenticationSessionModel}. Never returns {@code null}.\n+     * @deprecated Use {@link #createRootAuthenticationSession(RealmModel, String)} createRootAuthenticationSession} instead.\n+     */\n+    @Deprecated\n+    default RootAuthenticationSessionModel createRootAuthenticationSession(String id, RealmModel realm) {\n+        return createRootAuthenticationSession(realm, id);\n+    }\n \n+    /**\n+     * Creates a new root authentication session specified by the provided realm and id.\n+     * @param realm {@code RealmModel}\n+     * @param id {@code String}\n+     * @return Returns created {@code RootAuthenticationSessionModel}. Never returns {@code null}.\n+     */\n+    RootAuthenticationSessionModel createRootAuthenticationSession(RealmModel realm, String id);\n+\n+    /**\n+     * Returns the root authentication session specified by the provided realm and id.\n+     * @param realm {@code RealmModel}\n+     * @param authenticationSessionId {@code RootAuthenticationSessionModel}\n+     * @return Returns found {@code RootAuthenticationSessionModel} or {@code null} if no root authentication session is found.\n+     */\n     RootAuthenticationSessionModel getRootAuthenticationSession(RealmModel realm, String authenticationSessionId);\n \n-    void removeRootAuthenticationSession(RealmModel realm, RootAuthenticationSessionModel authenticationSession);\n+    /**\n+     * Removes provided root authentication session.\n+     * @param realm {@code RealmModel}\n+     * @param authenticationSession {@code RootAuthenticationSessionModel}\n+     * @deprecated Use {@link #removeRootAuthenticationSession(RootAuthenticationSessionModel)} removeRootAuthenticationSession} instead.\n+     */\n+    @Deprecated\n+    default void removeRootAuthenticationSession(RealmModel realm, RootAuthenticationSessionModel authenticationSession) {\n+        removeRootAuthenticationSession(authenticationSession);\n+    }\n+\n+    /**\n+     * Removes provided root authentication session.\n+     * @param authenticationSession {@code RootAuthenticationSessionModel}\n+     */\n+    void removeRootAuthenticationSession(RootAuthenticationSessionModel authenticationSession);\n \n+    /**\n+     * Removes a root authentication session by the given id.\n+     * @param id {@code String}\n+     */\n+    void removeRootAuthenticationSessionById(String id);", "originalCommit": "2d80db29096f04c84e8ac4cbcf55d80a41c3d5cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzODIyMA==", "url": "https://github.com/keycloak/keycloak/pull/7649#discussion_r536138220", "bodyText": "I needed it in MapRootAuthenticationSessionAdapter.removeAuthenticationSessionByTabId but I can access the tx via MapRootAuthenticationSessionProvider authenticationSessionProvider = (MapRootAuthenticationSessionProvider) session.authenticationSessions(); authenticationSessionProvider.tx.remove(entity.getId());", "author": "martin-kanis", "createdAt": "2020-12-04T14:28:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjExNzg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5NzY1MQ==", "url": "https://github.com/keycloak/keycloak/pull/7649#discussion_r536197651", "bodyText": "This needs to be done via the other method. Auth sessions are always tied to realm, RealmModel is thus a mandatory parameter.", "author": "hmlnarik", "createdAt": "2020-12-04T15:52:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjExNzg2OA=="}], "type": "inlineReview"}, {"oid": "96e6acffd3262c6d1fc94e7d9b2087ab55726605", "url": "https://github.com/keycloak/keycloak/commit/96e6acffd3262c6d1fc94e7d9b2087ab55726605", "message": "KEYCLOAK-14556 Authentication session map store", "committedDate": "2020-12-04T14:00:23Z", "type": "forcePushed"}, {"oid": "179fc0d6af7d8f2a2e61c1b2144defb31a013add", "url": "https://github.com/keycloak/keycloak/commit/179fc0d6af7d8f2a2e61c1b2144defb31a013add", "message": "KEYCLOAK-14556 Authentication session map store", "committedDate": "2020-12-04T14:29:08Z", "type": "forcePushed"}, {"oid": "8c508bd35cef8cb4d70798fefc2b7af6bf8dbbba", "url": "https://github.com/keycloak/keycloak/commit/8c508bd35cef8cb4d70798fefc2b7af6bf8dbbba", "message": "KEYCLOAK-14556 Authentication session map store", "committedDate": "2020-12-07T14:34:31Z", "type": "commit"}, {"oid": "8c508bd35cef8cb4d70798fefc2b7af6bf8dbbba", "url": "https://github.com/keycloak/keycloak/commit/8c508bd35cef8cb4d70798fefc2b7af6bf8dbbba", "message": "KEYCLOAK-14556 Authentication session map store", "committedDate": "2020-12-07T14:34:31Z", "type": "forcePushed"}]}