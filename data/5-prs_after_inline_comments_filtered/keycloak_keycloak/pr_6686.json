{"pr_number": 6686, "pr_title": "KEYCLOAK-11550: Single page to manage credentials", "pr_createdAt": "2020-01-21T18:38:44Z", "pr_url": "https://github.com/keycloak/keycloak/pull/6686", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNDc3NQ==", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r369404775", "bodyText": "This will throw an exception in case that user doesn't have password? Also in case he doesn't have password and has 1 OTP credential, it can happen that \"models.get(0)\" won't return the password.\nI know we're going to rewrite this stuff and it is just \"dummy\" endpoint for now. So leaving to you whether to change this or not. I am fine with accept PR even without fixing it we all agree that some temporary \"bugs\" in this dummy endpoints are ok.", "author": "mposolda", "createdAt": "2020-01-22T07:33:53Z", "path": "services/src/main/java/org/keycloak/services/resources/account/AccountCredentialResource.java", "diffHunk": "@@ -57,6 +57,139 @@ public AccountCredentialResource(KeycloakSession session, EventBuilder event, Us\n //        models.forEach(c -> c.setSecretData(null));\n //        return models.stream().map(ModelToRepresentation::toRepresentation).collect(Collectors.toList());\n //    }\n+    \n+    private static class CredentialContainer {\n+        private String category;\n+        private String type;\n+        private String tooltip;\n+        private boolean enabled;\n+        private String createAction;\n+        private String updateAction;\n+        private boolean removeable;\n+        private List<CredentialModel> userCredentials;\n+        \n+        public CredentialContainer(String category, String type, String tooltip, boolean enabled, String createAction, String updateAction, boolean removeable,List<CredentialModel> userCredentials) {\n+            this.category = category;\n+            this.type = type;\n+            this.tooltip = tooltip;\n+            this.enabled = enabled;\n+            this.createAction = createAction;\n+            this.updateAction = updateAction;\n+            this.removeable = removeable;\n+            this.userCredentials = userCredentials;\n+        }\n+\n+        public String getCategory() {\n+            return category;\n+        }\n+        \n+        public String getType() {\n+            return type;\n+        }\n+\n+        public String getTooltip() {\n+            return tooltip;\n+        }\n+\n+        public boolean isEnabled() {\n+            return enabled;\n+        }\n+\n+        public String getCreateAction() {\n+            return createAction;\n+        }\n+\n+        public String getUpdateAction() {\n+            return updateAction;\n+        }\n+\n+        public boolean isRemoveable() {\n+            return removeable;\n+        }\n+\n+        public List<CredentialModel> getUserCredentials() {\n+            return userCredentials;\n+        }\n+        \n+    }\n+    \n+    @GET\n+    @NoCache\n+    @Produces(javax.ws.rs.core.MediaType.APPLICATION_JSON)\n+    public List<CredentialContainer> dummyCredentialTypes(){\n+        auth.requireOneOf(AccountRoles.MANAGE_ACCOUNT, AccountRoles.VIEW_PROFILE);\n+        List<CredentialModel> models = session.userCredentialManager().getStoredCredentials(realm, user);\n+        \n+        List<CredentialModel> passwordUserCreds = new java.util.ArrayList<>();\n+        passwordUserCreds.add(models.get(0));", "originalCommit": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU0MzE4Mw==", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r369543183", "bodyText": "@mposolda I am assuming that you will take care of those things when there is live data.  As long as the data you send is in the format I expect, the UI will be able to handle it.\nI am only assuming that there will be at least one credential sent to me.  It doesn't matter what category or type it is.", "author": "ssilvert", "createdAt": "2020-01-22T12:56:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNDc3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYwNDc5OA==", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r369604798", "bodyText": "I just realized the tooltips are missing.\n\nActually need to discuss this a bit. Right now, tooltips are sent for each credential type. Should they also appear for each credential category?\n\n@mposolda @abstractj I think I will rename \"tooltip\" to \"helptext\".  It will be shown as plain text after the type name instead of as a tooltip.\nConcerning help text at the category level, with the current structure we can not have help text that belongs to the category.  This is because you can have more than one type for each category and they are sent as a category/type combo.  We would need another level of abstraction to send an attribute that belongs specifically to the category.", "author": "ssilvert", "createdAt": "2020-01-22T14:50:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNDc3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYwNjAxOA==", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r369606018", "bodyText": "@ssilvert whatever you and @mposolda are in agreement, that's perfectly fine from me. Apicurio was great to be used as a starting point, but you guys doing the implementation know best what has to be done.", "author": "abstractj", "createdAt": "2020-01-22T14:52:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNDc3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk3NDAyMA==", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r369974020", "bodyText": "@ssilvert The UI with added helpText for each credentialType looks nice to me. Thanks for adding it!\nRegarding the helpText for the category, I think it will makes sense to have helpText which will be specific to each category. I just don't know where exactly to show it in the UI, so that it looks nice and user-friendly...\nRegarding your question for helpText on categories, there will be always just 3 categories. Those 3 categories are \"hardcoded\" (with the exception that they should be localized, but otherwise it is pretty much hardcoded text) and their helpTexts can be hardcoded as well. There is no need to return anything from the REST API regarding helpText for the categories (which I am not sure if it is something you meant in your last paragraph).", "author": "mposolda", "createdAt": "2020-01-23T08:02:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNDc3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA3NDQwMg==", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r370074402", "bodyText": "@mposolda OK.  I'll hard-code some text then.  I think I'll post to the dev list to get feedback on all the help text.", "author": "ssilvert", "createdAt": "2020-01-23T11:51:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNDc3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNTY5Ng==", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r369405696", "bodyText": "The credential will be named \"Webauthn Passwordless\" instead of \"WebAuthn Strong\" . For more details, see the keycloak-dev thread \"Strong WebAuthn for passwordless authentication\" and the PR #6649 .", "author": "mposolda", "createdAt": "2020-01-22T07:37:17Z", "path": "services/src/main/java/org/keycloak/services/resources/account/AccountCredentialResource.java", "diffHunk": "@@ -57,6 +57,139 @@ public AccountCredentialResource(KeycloakSession session, EventBuilder event, Us\n //        models.forEach(c -> c.setSecretData(null));\n //        return models.stream().map(ModelToRepresentation::toRepresentation).collect(Collectors.toList());\n //    }\n+    \n+    private static class CredentialContainer {\n+        private String category;\n+        private String type;\n+        private String tooltip;\n+        private boolean enabled;\n+        private String createAction;\n+        private String updateAction;\n+        private boolean removeable;\n+        private List<CredentialModel> userCredentials;\n+        \n+        public CredentialContainer(String category, String type, String tooltip, boolean enabled, String createAction, String updateAction, boolean removeable,List<CredentialModel> userCredentials) {\n+            this.category = category;\n+            this.type = type;\n+            this.tooltip = tooltip;\n+            this.enabled = enabled;\n+            this.createAction = createAction;\n+            this.updateAction = updateAction;\n+            this.removeable = removeable;\n+            this.userCredentials = userCredentials;\n+        }\n+\n+        public String getCategory() {\n+            return category;\n+        }\n+        \n+        public String getType() {\n+            return type;\n+        }\n+\n+        public String getTooltip() {\n+            return tooltip;\n+        }\n+\n+        public boolean isEnabled() {\n+            return enabled;\n+        }\n+\n+        public String getCreateAction() {\n+            return createAction;\n+        }\n+\n+        public String getUpdateAction() {\n+            return updateAction;\n+        }\n+\n+        public boolean isRemoveable() {\n+            return removeable;\n+        }\n+\n+        public List<CredentialModel> getUserCredentials() {\n+            return userCredentials;\n+        }\n+        \n+    }\n+    \n+    @GET\n+    @NoCache\n+    @Produces(javax.ws.rs.core.MediaType.APPLICATION_JSON)\n+    public List<CredentialContainer> dummyCredentialTypes(){\n+        auth.requireOneOf(AccountRoles.MANAGE_ACCOUNT, AccountRoles.VIEW_PROFILE);\n+        List<CredentialModel> models = session.userCredentialManager().getStoredCredentials(realm, user);\n+        \n+        List<CredentialModel> passwordUserCreds = new java.util.ArrayList<>();\n+        passwordUserCreds.add(models.get(0));\n+        \n+        List<CredentialModel> otpUserCreds = new java.util.ArrayList<>();\n+        if (models.size() > 1) otpUserCreds.add(models.get(1));\n+        if (models.size() > 2) otpUserCreds.add(models.get(2));\n+        \n+        List<CredentialModel> webauthnUserCreds = new java.util.ArrayList<>();\n+        CredentialModel webauthnCred = new CredentialModel();\n+        webauthnCred.setId(\"bogus-id\");\n+        webauthnCred.setUserLabel(\"yubikey key\");\n+        webauthnCred.setCreatedDate(1579122652382L);\n+        webauthnUserCreds.add(webauthnCred);\n+        \n+        List<CredentialModel> webauthnStrongUserCreds = new java.util.ArrayList<>();\n+        CredentialModel webauthnStrongCred = new CredentialModel();\n+        webauthnStrongCred.setId(\"bogus-id-for-webauthnStrong\");\n+        webauthnStrongCred.setUserLabel(\"My very strong key with required PIN\");\n+        webauthnStrongCred.setCreatedDate(1579122652382L);\n+        webauthnUserCreds.add(webauthnStrongCred);\n+        \n+        CredentialContainer password = new CredentialContainer(\n+                                        \"password\",\n+                                        \"password\",\n+                                        \"passwordTooltip\",\n+                                        true,\n+                                        null, // no create action\n+                                        \"UPDATE_PASSWORD\",\n+                                        false,\n+                                        passwordUserCreds\n+                                        );\n+        CredentialContainer otp = new CredentialContainer(\n+                                        \"two-factor\",\n+                                        \"otp\",\n+                                        \"otpTooltip\",\n+                                        true,\n+                                        \"CONFIGURE_TOTP\", \n+                                        null, // no update action\n+                                        true,\n+                                        otpUserCreds\n+                                        );\n+        CredentialContainer webAuthn = new CredentialContainer(\n+                                        \"two-factor\",\n+                                        \"webauthn\",\n+                                        \"webauthntooltip\",\n+                                        true,\n+                                        \"CONFIGURE_WEBAUTHN\", \n+                                        null, // no update action\n+                                        true,\n+                                        webauthnUserCreds\n+                                        );\n+        CredentialContainer passwordless = new CredentialContainer(\n+                                        \"passwordless\",\n+                                        \"webauthn-strong\",", "originalCommit": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU4MTc2NQ==", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r369581765", "bodyText": "Right now, the UI just uses \"webauthn-strong\" as a localization key.  So it passes \"webauthn-strong\" and gets \"WebAuthn Strong\" as a result in English.\nPerhaps you just want to change this so that the REST API returns \"webauthn-passwordless\" and it shows \"Webauthn Passwordless\" in the UI?", "author": "ssilvert", "createdAt": "2020-01-22T14:13:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNTY5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyNDExMA==", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r369824110", "bodyText": "Updated the UI.  See new pic above.", "author": "ssilvert", "createdAt": "2020-01-22T21:52:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNTY5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk3NDIzNw==", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r369974237", "bodyText": "Thanks!", "author": "mposolda", "createdAt": "2020-01-23T08:03:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNTY5Ng=="}], "type": "inlineReview"}, {"oid": "7a700105c1e289c3bbfc95a455614e4eeff6ebfd", "url": "https://github.com/keycloak/keycloak/commit/7a700105c1e289c3bbfc95a455614e4eeff6ebfd", "message": "KEYCLOAK-11550: Signing In page", "committedDate": "2020-01-22T21:41:41Z", "type": "commit"}, {"oid": "7a700105c1e289c3bbfc95a455614e4eeff6ebfd", "url": "https://github.com/keycloak/keycloak/commit/7a700105c1e289c3bbfc95a455614e4eeff6ebfd", "message": "KEYCLOAK-11550: Signing In page", "committedDate": "2020-01-22T21:41:41Z", "type": "forcePushed"}]}