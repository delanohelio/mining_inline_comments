{"pr_number": 7482, "pr_title": "KEYCLOAK-15889 Streamification of ProtocolMappers", "pr_createdAt": "2020-10-09T09:18:46Z", "pr_url": "https://github.com/keycloak/keycloak/pull/7482", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4ODk1Ng==", "url": "https://github.com/keycloak/keycloak/pull/7482#discussion_r502588956", "bodyText": "Is there a chance that a concurrent modification exception is thrown here?", "author": "sguilhen", "createdAt": "2020-10-09T17:57:10Z", "path": "server-spi-private/src/main/java/org/keycloak/models/utils/RepresentationToModel.java", "diffHunk": "@@ -1414,8 +1414,7 @@ private static ClientModel createClient(KeycloakSession session, RealmModel real\n \n         if (resourceRep.getProtocolMappers() != null) {\n             // first, remove all default/built in mappers\n-            Set<ProtocolMapperModel> mappers = client.getProtocolMappers();\n-            for (ProtocolMapperModel mapper : mappers) client.removeProtocolMapper(mapper);\n+            client.getProtocolMappersStream().forEach(client::removeProtocolMapper);", "originalCommit": "00f9096fa3045cc04ef95a425df54b40718e07c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQxODYxMQ==", "url": "https://github.com/keycloak/keycloak/pull/7482#discussion_r505418611", "bodyText": "You are right. The command isn't triggered during normal circumstances in the testsuite. It's fixed now.", "author": "martin-kanis", "createdAt": "2020-10-15T10:01:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4ODk1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU5NDQxOA==", "url": "https://github.com/keycloak/keycloak/pull/7482#discussion_r502594418", "bodyText": "Same: Is there a chance that a concurrent modification exception is thrown here?", "author": "sguilhen", "createdAt": "2020-10-09T18:08:28Z", "path": "server-spi-private/src/main/java/org/keycloak/models/utils/RepresentationToModel.java", "diffHunk": "@@ -1606,8 +1605,7 @@ public static ClientScopeModel createClientScope(KeycloakSession session, RealmM\n         if (resourceRep.getProtocol() != null) clientScope.setProtocol(resourceRep.getProtocol());\n         if (resourceRep.getProtocolMappers() != null) {\n             // first, remove all default/built in mappers\n-            Set<ProtocolMapperModel> mappers = clientScope.getProtocolMappers();\n-            for (ProtocolMapperModel mapper : mappers) clientScope.removeProtocolMapper(mapper);\n+            clientScope.getProtocolMappersStream().forEach(clientScope::removeProtocolMapper);", "originalCommit": "00f9096fa3045cc04ef95a425df54b40718e07c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQxODY5MQ==", "url": "https://github.com/keycloak/keycloak/pull/7482#discussion_r505418691", "bodyText": "Same as above", "author": "martin-kanis", "createdAt": "2020-10-15T10:01:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU5NDQxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU5NDc0Mg==", "url": "https://github.com/keycloak/keycloak/pull/7482#discussion_r502594742", "bodyText": "I would add javadocs for the new methods.", "author": "sguilhen", "createdAt": "2020-10-09T18:09:10Z", "path": "server-spi/src/main/java/org/keycloak/models/ProtocolMapperContainerModel.java", "diffHunk": "@@ -18,13 +18,24 @@\n package org.keycloak.models;\n \n import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n /**\n  * @author <a href=\"mailto:bill@burkecentral.com\">Bill Burke</a>\n  * @version $Revision: 1 $\n  */\n public interface ProtocolMapperContainerModel {\n-    Set<ProtocolMapperModel> getProtocolMappers();\n+    /**\n+     * @deprecated Use {@link #getProtocolMappersStream() getProtocolMappersStream} instead.\n+     * @return Set of protocol mappers\n+     */\n+    @Deprecated\n+    default Set<ProtocolMapperModel> getProtocolMappers() {\n+        return getProtocolMappersStream().collect(Collectors.toSet());\n+    }\n+\n+    Stream<ProtocolMapperModel> getProtocolMappersStream();", "originalCommit": "00f9096fa3045cc04ef95a425df54b40718e07c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3d0ced27e59b94c2ce4267d30bef85cea190b614", "url": "https://github.com/keycloak/keycloak/commit/3d0ced27e59b94c2ce4267d30bef85cea190b614", "message": "KEYCLOAK-15889 Streamification of ProtocolMappers", "committedDate": "2020-10-11T19:16:05Z", "type": "forcePushed"}, {"oid": "8f97e72ea50a7c3f7fa35f735223c121c78e8e82", "url": "https://github.com/keycloak/keycloak/commit/8f97e72ea50a7c3f7fa35f735223c121c78e8e82", "message": "KEYCLOAK-15889 Streamification of ProtocolMappers", "committedDate": "2020-10-12T07:39:55Z", "type": "forcePushed"}, {"oid": "f54720034c3e4da5075b67f0535f755e121fa054", "url": "https://github.com/keycloak/keycloak/commit/f54720034c3e4da5075b67f0535f755e121fa054", "message": "KEYCLOAK-15889 Streamification of ProtocolMappers", "committedDate": "2020-10-12T12:29:13Z", "type": "forcePushed"}, {"oid": "a66f10407d2a130cee03fc456f4303dbf2688704", "url": "https://github.com/keycloak/keycloak/commit/a66f10407d2a130cee03fc456f4303dbf2688704", "message": "KEYCLOAK-15889 Streamification of ProtocolMappers", "committedDate": "2020-10-12T19:14:09Z", "type": "forcePushed"}, {"oid": "a05f99bdc2c122ecec84daf7fb83cb3c090acfcd", "url": "https://github.com/keycloak/keycloak/commit/a05f99bdc2c122ecec84daf7fb83cb3c090acfcd", "message": "KEYCLOAK-15889 Streamification of ProtocolMappers", "committedDate": "2020-10-13T12:55:16Z", "type": "forcePushed"}, {"oid": "8c83784f67b247a96981563fbf83c21df43214a2", "url": "https://github.com/keycloak/keycloak/commit/8c83784f67b247a96981563fbf83c21df43214a2", "message": "KEYCLOAK-15889 Streamification of ProtocolMappers", "committedDate": "2020-10-13T14:33:15Z", "type": "forcePushed"}, {"oid": "a632cff9463b736d2b2fb2d39ad50cd74432277f", "url": "https://github.com/keycloak/keycloak/commit/a632cff9463b736d2b2fb2d39ad50cd74432277f", "message": "KEYCLOAK-15889 Streamification of ProtocolMappers", "committedDate": "2020-10-13T16:42:42Z", "type": "forcePushed"}, {"oid": "06c666cdbba595b95f27d4a38de38ff43c766672", "url": "https://github.com/keycloak/keycloak/commit/06c666cdbba595b95f27d4a38de38ff43c766672", "message": "KEYCLOAK-15889 Streamification of ProtocolMappers", "committedDate": "2020-10-15T09:28:44Z", "type": "forcePushed"}, {"oid": "ad14010377709d7edaee97b975d2e5f000e76b01", "url": "https://github.com/keycloak/keycloak/commit/ad14010377709d7edaee97b975d2e5f000e76b01", "message": "KEYCLOAK-15889 Streamification of ProtocolMappers", "committedDate": "2020-10-15T09:58:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUzMTY1OA==", "url": "https://github.com/keycloak/keycloak/pull/7482#discussion_r513531658", "bodyText": "I wish there was a cleaner way of doing this, but that probably would require some major refactoring. Starting with Java 9 there is a static Map.entry(key, value) method that would avoid the whole creation of a HashMap just to get the single entry in it, but it is unfortunately not availble to us right now.", "author": "sguilhen", "createdAt": "2020-10-28T15:19:50Z", "path": "services/src/main/java/org/keycloak/protocol/ProtocolMapperUtils.java", "diffHunk": "@@ -123,27 +123,22 @@ public static ProtocolMapperModel findLocaleMapper(KeycloakSession session) {\n     }\n \n \n-    public static List<Map.Entry<ProtocolMapperModel, ProtocolMapper>> getSortedProtocolMappers(KeycloakSession session, ClientSessionContext ctx) {\n-        Set<ProtocolMapperModel> mapperModels = ctx.getProtocolMappers();\n-        Map<ProtocolMapperModel, ProtocolMapper> result = new HashMap<>();\n-\n+    public static Stream<Entry<ProtocolMapperModel, ProtocolMapper>> getSortedProtocolMappers(KeycloakSession session, ClientSessionContext ctx) {\n         KeycloakSessionFactory sessionFactory = session.getKeycloakSessionFactory();\n-        for (ProtocolMapperModel mapperModel : mapperModels) {\n-            ProtocolMapper mapper = (ProtocolMapper) sessionFactory.getProviderFactory(ProtocolMapper.class, mapperModel.getProtocolMapper());\n-            if (mapper == null) {\n-                continue;\n-            }\n-\n-            result.put(mapperModel, mapper);\n-        }\n-\n-        return result.entrySet()\n-                .stream()\n-                .sorted(Comparator.comparing(ProtocolMapperUtils::compare))\n-                .collect(Collectors.toList());\n+        return ctx.getProtocolMappersStream()\n+                .flatMap(mapperModel -> {\n+                    ProtocolMapper mapper = (ProtocolMapper) sessionFactory.getProviderFactory(ProtocolMapper.class, mapperModel.getProtocolMapper());\n+                    if (mapper == null)\n+                        return null;\n+                    Map<ProtocolMapperModel, ProtocolMapper> protocolMapperMap = new HashMap<>();\n+                    protocolMapperMap.put(mapperModel, mapper);\n+                    return protocolMapperMap.entrySet().stream();", "originalCommit": "ad14010377709d7edaee97b975d2e5f000e76b01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY5NDA1Mg==", "url": "https://github.com/keycloak/keycloak/pull/7482#discussion_r513694052", "bodyText": "As the original collection is a HashSet, wouldn't it be better to use distinct() in the returned stream here?", "author": "sguilhen", "createdAt": "2020-10-28T19:06:12Z", "path": "services/src/main/java/org/keycloak/protocol/oidc/TokenManager.java", "diffHunk": "@@ -563,73 +560,61 @@ public static boolean isValidScope(String scopes, ClientModel client) {\n         return true;\n     }\n \n-    public static Collection<String> parseScopeParameter(String scopeParam) {\n-        return new HashSet<>(Arrays.asList(scopeParam.split(\" \")));\n+    public static Stream<String> parseScopeParameter(String scopeParam) {\n+        return Arrays.stream(scopeParam.split(\" \"));", "originalCommit": "ad14010377709d7edaee97b975d2e5f000e76b01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA4MTgzOA==", "url": "https://github.com/keycloak/keycloak/pull/7482#discussion_r514081838", "bodyText": "You are right, I forgot to add distinct() everywhere.", "author": "martin-kanis", "createdAt": "2020-10-29T08:30:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY5NDA1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcxNzQzMQ==", "url": "https://github.com/keycloak/keycloak/pull/7482#discussion_r513717431", "bodyText": "Risk of ConcurrentModification here or not?", "author": "sguilhen", "createdAt": "2020-10-28T19:48:48Z", "path": "services/src/main/java/org/keycloak/services/clientregistration/oidc/OIDCClientRegistrationProvider.java", "diffHunk": "@@ -163,19 +163,15 @@ private void updatePairwiseSubMappers(ClientModel clientModel, SubjectType subje\n \n         } else {\n             // Rather find and remove all pairwise mappers\n-            clientModel.getProtocolMappers().stream().filter((ProtocolMapperModel mapperRep) -> {\n-                return mapperRep.getProtocolMapper().endsWith(AbstractPairwiseSubMapper.PROVIDER_ID_SUFFIX);\n-            }).forEach((ProtocolMapperModel mapping) -> {\n-                clientModel.getProtocolMappers().remove(mapping);\n-            });\n+            clientModel.getProtocolMappersStream()\n+                    .filter(mapperRep -> mapperRep.getProtocolMapper().endsWith(AbstractPairwiseSubMapper.PROVIDER_ID_SUFFIX))\n+                    .forEach(clientModel::removeProtocolMapper);", "originalCommit": "ad14010377709d7edaee97b975d2e5f000e76b01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyNzYzNw==", "url": "https://github.com/keycloak/keycloak/pull/7482#discussion_r514427637", "bodyText": "Right, I forgot to collect it.", "author": "martin-kanis", "createdAt": "2020-10-29T17:11:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcxNzQzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcyMDM3OQ==", "url": "https://github.com/keycloak/keycloak/pull/7482#discussion_r513720379", "bodyText": "Again, shouldn't this be collected before the removal?", "author": "sguilhen", "createdAt": "2020-10-28T19:53:59Z", "path": "services/src/main/java/org/keycloak/services/managers/ClientManager.java", "diffHunk": "@@ -85,8 +85,7 @@ public static ClientModel createClient(KeycloakSession session, RealmModel realm\n \n         // remove default mappers if there is a template\n         if (rep.getProtocolMappers() == null && rep.getClientTemplate() != null) {\n-            Set<ProtocolMapperModel> mappers = client.getProtocolMappers();\n-            for (ProtocolMapperModel mapper : mappers) client.removeProtocolMapper(mapper);\n+            client.getProtocolMappersStream().forEach(client::removeProtocolMapper);", "originalCommit": "ad14010377709d7edaee97b975d2e5f000e76b01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyNzc2Mw==", "url": "https://github.com/keycloak/keycloak/pull/7482#discussion_r514427763", "bodyText": "Right, I forgot to collect it.", "author": "martin-kanis", "createdAt": "2020-10-29T17:11:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcyMDM3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcyMjg2Mw==", "url": "https://github.com/keycloak/keycloak/pull/7482#discussion_r513722863", "bodyText": "Shouldn't this method include a call to distinct() on the returned streams?", "author": "sguilhen", "createdAt": "2020-10-28T19:58:07Z", "path": "services/src/main/java/org/keycloak/protocol/oidc/TokenManager.java", "diffHunk": "@@ -510,40 +515,32 @@ public static void dettachClientSession(UserSessionProvider sessions, RealmModel\n \n \n     /** Return client itself + all default client scopes of client + optional client scopes requested by scope parameter **/\n-    public static Set<ClientScopeModel> getRequestedClientScopes(String scopeParam, ClientModel client) {\n-        // Add all default client scopes automatically\n-        Set<ClientScopeModel> clientScopes = new HashSet<>(client.getClientScopes(true, true).values());\n-\n-        // Add client itself\n-        clientScopes.add(client);\n+    public static Stream<ClientScopeModel> getRequestedClientScopes(String scopeParam, ClientModel client) {\n+        // Add all default client scopes automatically and client itself\n+        Stream<ClientScopeModel> clientScopes = Stream.concat(\n+                client.getClientScopes(true, true).values().stream(),\n+                Stream.of(client));", "originalCommit": "ad14010377709d7edaee97b975d2e5f000e76b01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcyNDEwMw==", "url": "https://github.com/keycloak/keycloak/pull/7482#discussion_r513724103", "bodyText": "Should this include a call to distinct()?", "author": "sguilhen", "createdAt": "2020-10-28T20:00:14Z", "path": "model/jpa/src/main/java/org/keycloak/models/jpa/ClientAdapter.java", "diffHunk": "@@ -402,22 +402,21 @@ public static boolean contains(String str, String[] array) {\n     }\n \n     @Override\n-    public Set<ProtocolMapperModel> getProtocolMappers() {\n-        Set<ProtocolMapperModel> mappings = new HashSet<ProtocolMapperModel>();\n-        for (ProtocolMapperEntity entity : this.entity.getProtocolMappers()) {\n-            ProtocolMapperModel mapping = new ProtocolMapperModel();\n-            mapping.setId(entity.getId());\n-            mapping.setName(entity.getName());\n-            mapping.setProtocol(entity.getProtocol());\n-            mapping.setProtocolMapper(entity.getProtocolMapper());\n-            Map<String, String> config = new HashMap<String, String>();\n-            if (entity.getConfig() != null) {\n-                config.putAll(entity.getConfig());\n-            }\n-            mapping.setConfig(config);\n-            mappings.add(mapping);\n-        }\n-        return mappings;\n+    public Stream<ProtocolMapperModel> getProtocolMappersStream() {\n+        return this.entity.getProtocolMappers().stream()\n+                .map(entity -> {\n+                    ProtocolMapperModel mapping = new ProtocolMapperModel();\n+                    mapping.setId(entity.getId());\n+                    mapping.setName(entity.getName());\n+                    mapping.setProtocol(entity.getProtocol());\n+                    mapping.setProtocolMapper(entity.getProtocolMapper());\n+                    Map<String, String> config = new HashMap<>();\n+                    if (entity.getConfig() != null) {\n+                        config.putAll(entity.getConfig());\n+                    }\n+                    mapping.setConfig(config);\n+                    return mapping;\n+                });", "originalCommit": "ad14010377709d7edaee97b975d2e5f000e76b01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcyNDQxNw==", "url": "https://github.com/keycloak/keycloak/pull/7482#discussion_r513724417", "bodyText": "Same, include a call to distinct() on the returned stream?", "author": "sguilhen", "createdAt": "2020-10-28T20:00:49Z", "path": "model/jpa/src/main/java/org/keycloak/models/jpa/ClientScopeAdapter.java", "diffHunk": "@@ -100,22 +98,21 @@ public void setProtocol(String protocol) {\n     }\n \n     @Override\n-    public Set<ProtocolMapperModel> getProtocolMappers() {\n-        Set<ProtocolMapperModel> mappings = new HashSet<ProtocolMapperModel>();\n-        for (ProtocolMapperEntity entity : this.entity.getProtocolMappers()) {\n-            ProtocolMapperModel mapping = new ProtocolMapperModel();\n-            mapping.setId(entity.getId());\n-            mapping.setName(entity.getName());\n-            mapping.setProtocol(entity.getProtocol());\n-            mapping.setProtocolMapper(entity.getProtocolMapper());\n-            Map<String, String> config = new HashMap<String, String>();\n-            if (entity.getConfig() != null) {\n-                config.putAll(entity.getConfig());\n-            }\n-            mapping.setConfig(config);\n-            mappings.add(mapping);\n-        }\n-        return mappings;\n+    public Stream<ProtocolMapperModel> getProtocolMappersStream() {\n+        return this.entity.getProtocolMappers().stream()\n+                .map(entity -> {\n+                    ProtocolMapperModel mapping = new ProtocolMapperModel();\n+                    mapping.setId(entity.getId());\n+                    mapping.setName(entity.getName());\n+                    mapping.setProtocol(entity.getProtocol());\n+                    mapping.setProtocolMapper(entity.getProtocolMapper());\n+                    Map<String, String> config = new HashMap<>();\n+                    if (entity.getConfig() != null) {\n+                        config.putAll(entity.getConfig());\n+                    }\n+                    mapping.setConfig(config);\n+                    return mapping;\n+                });", "originalCommit": "ad14010377709d7edaee97b975d2e5f000e76b01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcyNDgzMg==", "url": "https://github.com/keycloak/keycloak/pull/7482#discussion_r513724832", "bodyText": "Same, should distinct() be called on the returned stream?", "author": "sguilhen", "createdAt": "2020-10-28T20:01:31Z", "path": "model/map/src/main/java/org/keycloak/models/map/client/MapClientAdapter.java", "diffHunk": "@@ -478,8 +475,8 @@ public void removeDefaultRoles(String... defaultRoles) {\n     /*************** Protocol mappers ****************/\n \n     @Override\n-    public Set<ProtocolMapperModel> getProtocolMappers() {\n-        return Collections.unmodifiableSet(new HashSet<>(entity.getProtocolMappers()));\n+    public Stream<ProtocolMapperModel> getProtocolMappersStream() {\n+        return entity.getProtocolMappers().stream();", "originalCommit": "ad14010377709d7edaee97b975d2e5f000e76b01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcyNTkzNQ==", "url": "https://github.com/keycloak/keycloak/pull/7482#discussion_r513725935", "bodyText": "Same, should we have a call to distinct() on the constructed stream?", "author": "sguilhen", "createdAt": "2020-10-28T20:03:34Z", "path": "services/src/main/java/org/keycloak/forms/account/freemarker/model/ApplicationsBean.java", "diffHunk": "@@ -57,9 +58,10 @@ public ApplicationsBean(KeycloakSession session, RealmModel realm, UserModel use\n             }\n \n             // Construct scope parameter with all optional scopes to see all potentially available roles\n-            Set<ClientScopeModel> allClientScopes = new HashSet<>(client.getClientScopes(true, true).values());\n-            allClientScopes.addAll(client.getClientScopes(false, true).values());\n-            allClientScopes.add(client);\n+            Stream<ClientScopeModel> allClientScopes = Stream.concat(\n+                    client.getClientScopes(true, true).values().stream(),\n+                    client.getClientScopes(false, true).values().stream());\n+            allClientScopes = Stream.concat(allClientScopes, Stream.of(client));", "originalCommit": "ad14010377709d7edaee97b975d2e5f000e76b01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczMjE1OQ==", "url": "https://github.com/keycloak/keycloak/pull/7482#discussion_r513732159", "bodyText": "This seems to be used only in line 140 above, and that method gets the Set returned here and calls .stream() on it to be able to return the proper stream type. Shouldn't this one simply return the stream?", "author": "sguilhen", "createdAt": "2020-10-28T20:15:01Z", "path": "services/src/main/java/org/keycloak/services/util/DefaultClientSessionContext.java", "diffHunk": "@@ -246,34 +230,26 @@ private boolean isClientScopePermittedForUser(ClientScopeModel clientScope) {\n     private Set<RoleModel> loadRoles() {\n         UserModel user = clientSession.getUserSession().getUser();\n         ClientModel client = clientSession.getClient();\n-\n-        Set<ClientScopeModel> clientScopes = getClientScopes();\n-\n-        return TokenManager.getAccess(user, client, clientScopes);\n+        return TokenManager.getAccess(user, client, getClientScopesStream());\n     }\n \n \n     private Set<ProtocolMapperModel> loadProtocolMappers() {", "originalCommit": "ad14010377709d7edaee97b975d2e5f000e76b01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkzMDU3NA==", "url": "https://github.com/keycloak/keycloak/pull/7482#discussion_r514930574", "bodyText": "Same approach is used with roles and client scopes. My understanding is that we cache those entities to prevent multiple calls of getClientScopesStream() and getProtocolMappersStream() using this approach.", "author": "martin-kanis", "createdAt": "2020-10-30T08:12:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczMjE1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE1OTE4MA==", "url": "https://github.com/keycloak/keycloak/pull/7482#discussion_r515159180", "bodyText": "Ah, it is indeed cached, this is fine then.", "author": "sguilhen", "createdAt": "2020-10-30T14:55:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczMjE1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczMjkwMA==", "url": "https://github.com/keycloak/keycloak/pull/7482#discussion_r513732900", "bodyText": "Risk of ConcurrentModification?", "author": "sguilhen", "createdAt": "2020-10-28T20:16:21Z", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/adapter/servlet/UserStorageConsentTest.java", "diffHunk": "@@ -108,26 +108,27 @@ public static void setupConsent(KeycloakSession session) {\n         product.setConsentRequired(true);\n         ClientScopeModel clientScope = realm.addClientScope(\"clientScope\");\n         clientScope.setProtocol(OIDCLoginProtocol.LOGIN_PROTOCOL);\n-        System.err.println(\"client scope protocol mappers size: \" + clientScope.getProtocolMappers().size());\n-\n-        for (ProtocolMapperModel mapper : product.getProtocolMappers()) {\n-            if (mapper.getProtocol().equals(OIDCLoginProtocol.LOGIN_PROTOCOL)) {\n-                if (mapper.getName().equals(OIDCLoginProtocolFactory.USERNAME)\n-                        || mapper.getName().equals(OIDCLoginProtocolFactory.EMAIL)\n-                        || mapper.getName().equals(OIDCLoginProtocolFactory.GIVEN_NAME)\n-                        ) {\n+        System.err.println(\"client scope protocol mappers size: \" + clientScope.getProtocolMappersStream().count());\n+\n+        product.getProtocolMappersStream()\n+                .filter(mapper -> Objects.equals(OIDCLoginProtocol.LOGIN_PROTOCOL, mapper.getProtocol()))\n+                .filter(mapper -> Objects.equals(OIDCLoginProtocolFactory.USERNAME, mapper.getName()) ||\n+                        Objects.equals(OIDCLoginProtocolFactory.EMAIL, mapper.getName()) ||\n+                        Objects.equals(OIDCLoginProtocolFactory.GIVEN_NAME, mapper.getName()))\n+                .map(mapper -> {\n                     ProtocolMapperModel copy = new ProtocolMapperModel();\n                     copy.setName(mapper.getName());\n                     copy.setProtocol(mapper.getProtocol());\n                     Map<String, String> config = new HashMap<>();\n                     config.putAll(mapper.getConfig());\n                     copy.setConfig(config);\n                     copy.setProtocolMapper(mapper.getProtocolMapper());\n-                    clientScope.addProtocolMapper(copy);\n-                }\n-            }\n-            product.removeProtocolMapper(mapper);\n-        }\n+\n+                    product.removeProtocolMapper(mapper);", "originalCommit": "ad14010377709d7edaee97b975d2e5f000e76b01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyOTA5MQ==", "url": "https://github.com/keycloak/keycloak/pull/7482#discussion_r514429091", "bodyText": "Actually looking more into this I think my change is wrong anyway. I reverted it to original version.", "author": "martin-kanis", "createdAt": "2020-10-29T17:13:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczMjkwMA=="}], "type": "inlineReview"}, {"oid": "171ef919289d061d40aa8a21fa956b9cce32830f", "url": "https://github.com/keycloak/keycloak/commit/171ef919289d061d40aa8a21fa956b9cce32830f", "message": "KEYCLOAK-15889 Streamification of ProtocolMappers", "committedDate": "2020-10-29T17:18:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ3MzQxMA==", "url": "https://github.com/keycloak/keycloak/pull/7482#discussion_r518473410", "bodyText": "Shouldn't distinct() be placed in the stream that is returned in line 531 bellow?", "author": "sguilhen", "createdAt": "2020-11-06T01:39:26Z", "path": "services/src/main/java/org/keycloak/protocol/oidc/TokenManager.java", "diffHunk": "@@ -510,40 +515,32 @@ public static void dettachClientSession(UserSessionProvider sessions, RealmModel\n \n \n     /** Return client itself + all default client scopes of client + optional client scopes requested by scope parameter **/\n-    public static Set<ClientScopeModel> getRequestedClientScopes(String scopeParam, ClientModel client) {\n-        // Add all default client scopes automatically\n-        Set<ClientScopeModel> clientScopes = new HashSet<>(client.getClientScopes(true, true).values());\n-\n-        // Add client itself\n-        clientScopes.add(client);\n+    public static Stream<ClientScopeModel> getRequestedClientScopes(String scopeParam, ClientModel client) {\n+        // Add all default client scopes automatically and client itself\n+        Stream<ClientScopeModel> clientScopes = Stream.concat(\n+                client.getClientScopes(true, true).values().stream(),\n+                Stream.of(client)).distinct();", "originalCommit": "171ef919289d061d40aa8a21fa956b9cce32830f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYzNTcxNQ==", "url": "https://github.com/keycloak/keycloak/pull/7482#discussion_r519635715", "bodyText": "Yeah but probably also on line 522 in case scopeParam is null and clientScopes are returned early.", "author": "martin-kanis", "createdAt": "2020-11-09T08:41:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ3MzQxMA=="}], "type": "inlineReview"}, {"oid": "9d4defab9fa4a9b1c1ba949dec1b91328000b2bd", "url": "https://github.com/keycloak/keycloak/commit/9d4defab9fa4a9b1c1ba949dec1b91328000b2bd", "message": "KEYCLOAK-15889 Streamification of ProtocolMappers", "committedDate": "2020-11-09T08:38:35Z", "type": "forcePushed"}, {"oid": "7770983806e1b6ddffefff40fe0decde7079da14", "url": "https://github.com/keycloak/keycloak/commit/7770983806e1b6ddffefff40fe0decde7079da14", "message": "KEYCLOAK-15889 Streamification of ProtocolMappers", "committedDate": "2020-11-09T09:24:10Z", "type": "forcePushed"}, {"oid": "f66db2f2b842451f9b3aece3788ec42986fc29c8", "url": "https://github.com/keycloak/keycloak/commit/f66db2f2b842451f9b3aece3788ec42986fc29c8", "message": "KEYCLOAK-15889 Streamification of ProtocolMappers", "committedDate": "2020-11-09T14:35:58Z", "type": "forcePushed"}, {"oid": "a330fb9cf8030f30013812bdb9442c5441d8dca8", "url": "https://github.com/keycloak/keycloak/commit/a330fb9cf8030f30013812bdb9442c5441d8dca8", "message": "KEYCLOAK-15889 Streamification of ProtocolMappers", "committedDate": "2020-11-10T13:38:15Z", "type": "commit"}, {"oid": "a330fb9cf8030f30013812bdb9442c5441d8dca8", "url": "https://github.com/keycloak/keycloak/commit/a330fb9cf8030f30013812bdb9442c5441d8dca8", "message": "KEYCLOAK-15889 Streamification of ProtocolMappers", "committedDate": "2020-11-10T13:38:15Z", "type": "forcePushed"}]}