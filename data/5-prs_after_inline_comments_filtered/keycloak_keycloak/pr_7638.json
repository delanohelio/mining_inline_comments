{"pr_number": 7638, "pr_title": "KEYCLOAK-16444 Use StAX for validator", "pr_createdAt": "2020-11-24T17:45:08Z", "pr_url": "https://github.com/keycloak/keycloak/pull/7638", "timeline": [{"oid": "02b854248eeb1ea0046d4055262072ab6b9c5ec8", "url": "https://github.com/keycloak/keycloak/commit/02b854248eeb1ea0046d4055262072ab6b9c5ec8", "message": "KEYCLOAK-16444 Initialize JAXP components consistently", "committedDate": "2020-11-25T07:40:54Z", "type": "commit"}, {"oid": "02b854248eeb1ea0046d4055262072ab6b9c5ec8", "url": "https://github.com/keycloak/keycloak/commit/02b854248eeb1ea0046d4055262072ab6b9c5ec8", "message": "KEYCLOAK-16444 Initialize JAXP components consistently", "committedDate": "2020-11-25T07:40:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMwNjUzMQ==", "url": "https://github.com/keycloak/keycloak/pull/7638#discussion_r530306531", "bodyText": "It seems that REQUEST_FLAWED and REQUEST_FLAWED_LOCAL is exactly same string? I guess that was not intended for this test?", "author": "mposolda", "createdAt": "2020-11-25T11:34:18Z", "path": "saml-core/src/test/java/org/keycloak/saml/processing/core/util/JAXPValidationUtilTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.saml.processing.core.util;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.Matchers;\n+import org.junit.Test;\n+import org.xml.sax.SAXException;\n+import static org.junit.Assert.assertThat;\n+\n+/**\n+ *\n+ * @author hmlnarik\n+ */\n+public class JAXPValidationUtilTest {\n+\n+    private static final String REQUEST_VALID = \"<samlp:AuthnRequest xmlns:samlp=\\\"urn:oasis:names:tc:SAML:2.0:protocol\\\" xmlns:saml=\\\"urn:oasis:names:tc:SAML:2.0:assertion\\\" ID=\\\"a123\\\" Version=\\\"2.0\\\" IssueInstant=\\\"2014-07-16T23:52:45Z\\\" >\" +\n+            \"<saml:Issuer>urn:test</saml:Issuer>\" +\n+            \"</samlp:AuthnRequest>\";\n+\n+    private static final String REQUEST_FLAWED = \"<samlp:AuthnRequest xmlns:samlp=\\\"urn:oasis:names:tc:SAML:2.0:protocol\\\" xmlns:saml=\\\"urn:oasis:names:tc:SAML:2.0:assertion\\\" ID=\\\"&heh;\\\" Version=\\\"2.0\\\" IssueInstant=\\\"2014-07-16T23:52:45Z\\\" >\" +\n+            \"<saml:Issuer>urn:test</saml:Issuer>\" +\n+            \"</samlp:AuthnRequest>\";\n+\n+    private static final String REQUEST_FLAWED_LOCAL = \"<samlp:AuthnRequest xmlns:samlp=\\\"urn:oasis:names:tc:SAML:2.0:protocol\\\" xmlns:saml=\\\"urn:oasis:names:tc:SAML:2.0:assertion\\\" ID=\\\"&heh;\\\" Version=\\\"2.0\\\" IssueInstant=\\\"2014-07-16T23:52:45Z\\\" >\" +\n+            \"<saml:Issuer>urn:test</saml:Issuer>\" +\n+            \"</samlp:AuthnRequest>\";\n+\n+    private static final String REQUEST_INVALID = \"<samlp:InvalidAuthnRequest xmlns:samlp=\\\"urn:oasis:names:tc:SAML:2.0:protocol\\\" xmlns:saml=\\\"urn:oasis:names:tc:SAML:2.0:assertion\\\" ID=\\\"a123\\\" Version=\\\"2.0\\\" IssueInstant=\\\"2014-07-16T23:52:45Z\\\" >\" +\n+            \"<saml:Issuer>urn:test</saml:Issuer>\" +\n+            \"</samlp:AuthnRequest>\";\n+\n+\n+    @Test\n+    public void testServerSideValidator() throws Exception {\n+        String preamble = \"<!DOCTYPE AuthnRequest [\" +\n+                \"<!ELEMENT AuthnRequest (#PCDATA)>\" +\n+                \"<!ENTITY heh SYSTEM \\\"file:///etc/passwd\\\">\" +\n+                \"]>\";\n+\n+        assertInputValidation(REQUEST_VALID, Matchers.nullValue());\n+\n+        assertInputValidation(REQUEST_INVALID, Matchers.notNullValue());\n+        assertInputValidation(preamble + REQUEST_FLAWED, Matchers.notNullValue());\n+        assertInputValidation(preamble + REQUEST_FLAWED_LOCAL, Matchers.notNullValue());", "originalCommit": "02b854248eeb1ea0046d4055262072ab6b9c5ec8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}