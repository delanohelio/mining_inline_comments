{"pr_number": 7540, "pr_title": "KEYCLOAK-4544 Broker Login autolink with disabled user creation", "pr_createdAt": "2020-10-26T20:45:49Z", "pr_url": "https://github.com/keycloak/keycloak/pull/7540", "timeline": [{"oid": "ecbbc59c1cd6def0cd5399f9b956117a92a2ba45", "url": "https://github.com/keycloak/keycloak/commit/ecbbc59c1cd6def0cd5399f9b956117a92a2ba45", "message": "KEYCLOAK-4544 Broker Login autolink with disabled user creation", "committedDate": "2020-10-27T10:48:00Z", "type": "forcePushed"}, {"oid": "4c7e1bc257b04e048b30baa6cfddcaf7a25c0f9f", "url": "https://github.com/keycloak/keycloak/commit/4c7e1bc257b04e048b30baa6cfddcaf7a25c0f9f", "message": "KEYCLOAK-4544 Broker Login autolink with disabled user creation", "committedDate": "2020-10-27T10:50:47Z", "type": "forcePushed"}, {"oid": "203e1ad2a0abdf7e262d0e26da7aeba1e71ab6e3", "url": "https://github.com/keycloak/keycloak/commit/203e1ad2a0abdf7e262d0e26da7aeba1e71ab6e3", "message": "KEYCLOAK-4544 Broker Login autolink with disabled user creation", "committedDate": "2020-10-27T11:01:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY4NDYwNQ==", "url": "https://github.com/keycloak/keycloak/pull/7540#discussion_r526684605", "bodyText": "Is it possible to avoid changes in this class in this PR?", "author": "mposolda", "createdAt": "2020-11-19T08:44:15Z", "path": "services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java", "diffHunk": "@@ -976,12 +976,12 @@ public Response authenticateOnly() throws AuthenticationFlowException {\n         AuthenticationFlow authenticationFlow = createFlowExecution(this.flowId, null);\n         Response challenge = authenticationFlow.processFlow();\n         if (challenge != null) return challenge;\n-        if (authenticationSession.getAuthenticatedUser() == null) {", "originalCommit": "203e1ad2a0abdf7e262d0e26da7aeba1e71ab6e3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "dea779a50fd2e038408b6e2a80c76b13dc44954f", "url": "https://github.com/keycloak/keycloak/commit/dea779a50fd2e038408b6e2a80c76b13dc44954f", "message": "KEYCLOAK-4544 Detect existing user before granting user autolink", "committedDate": "2021-01-30T18:28:36Z", "type": "forcePushed"}, {"oid": "97f202a95506b07051a8d7a6e5805b713cf0ff6f", "url": "https://github.com/keycloak/keycloak/commit/97f202a95506b07051a8d7a6e5805b713cf0ff6f", "message": "KEYCLOAK-4544 Detect existing user before granting user autolink", "committedDate": "2021-01-31T14:12:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTU0NDczNw==", "url": "https://github.com/keycloak/keycloak/pull/7540#discussion_r569544737", "bodyText": "This looks like a typo added by accident?", "author": "mposolda", "createdAt": "2021-02-03T16:13:01Z", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/authentication/AbstractAuthenticationTest.java", "diffHunk": "@@ -193,7 +193,7 @@ AuthenticatorConfigRepresentation newConfig(String alias, String[] keyvalues) {\n         return config;\n     }\n \n-    void createFlow(AuthenticationFlowRepresentation flowRep) {\n+    void createFlow(AuthenticationFlowRepresentation flowRep) {//", "originalCommit": "97f202a95506b07051a8d7a6e5805b713cf0ff6f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTcwNjYzMQ==", "url": "https://github.com/keycloak/keycloak/pull/7540#discussion_r569706631", "bodyText": "I see in the test, that user will see \"Invalid username or error\", which doesn't look like correct error message. There will be probably some better message like \"Invalid user\" ? It is available as a constant Messages.INVALID_USER.\nFor the inspiration, I suggest to take a look for example here https://github.com/keycloak/keycloak/blob/12.0.0/services/src/main/java/org/keycloak/authentication/authenticators/broker/IdpCreateUserIfUniqueAuthenticator.java#L103 for how to throw the error message and ensure that correct event is triggered.", "author": "mposolda", "createdAt": "2021-02-03T19:56:43Z", "path": "services/src/main/java/org/keycloak/authentication/authenticators/broker/IdpDetectExistingBrokerUserAuthenticator.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2016 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.authentication.authenticators.broker;\n+\n+import org.jboss.logging.Logger;\n+import org.keycloak.authentication.AuthenticationFlowContext;\n+import org.keycloak.authentication.authenticators.broker.util.ExistingUserInfo;\n+import org.keycloak.authentication.authenticators.broker.util.SerializedBrokeredIdentityContext;\n+import org.keycloak.broker.provider.BrokeredIdentityContext;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.UserModel;\n+import org.keycloak.services.ServicesLogger;\n+\n+import static org.keycloak.authentication.AuthenticationFlowError.UNKNOWN_USER;\n+\n+public class IdpDetectExistingBrokerUserAuthenticator extends IdpCreateUserIfUniqueAuthenticator {\n+\n+    private static final Logger logger = Logger.getLogger(IdpDetectExistingBrokerUserAuthenticator.class);\n+\n+    @Override\n+    protected void authenticateImpl(AuthenticationFlowContext context, SerializedBrokeredIdentityContext serializedCtx, BrokeredIdentityContext brokerContext) {\n+\n+        RealmModel realm = context.getRealm();\n+\n+        if (context.getAuthenticationSession().getAuthNote(EXISTING_USER_INFO) != null) {\n+            context.attempted();\n+            return;\n+        }\n+\n+        String username = getUsername(context, serializedCtx, brokerContext);\n+        if (username == null) {\n+            ServicesLogger.LOGGER.resetFlow(realm.isRegistrationEmailAsUsername() ? \"Email\" : \"Username\");\n+            context.getAuthenticationSession().setAuthNote(ENFORCE_UPDATE_PROFILE, \"true\");\n+            context.resetFlow();\n+            return;\n+        }\n+\n+        ExistingUserInfo duplication = checkExistingUser(context, username, serializedCtx, brokerContext);\n+\n+        if (duplication == null) {\n+            logger.errorf(\"The user %s should be already registered in the realm to login  %s\",username,  realm.getName());\n+            context.failure(UNKNOWN_USER);", "originalCommit": "97f202a95506b07051a8d7a6e5805b713cf0ff6f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "22b87b48a00674497959cf17f777a62106ae0cf0", "url": "https://github.com/keycloak/keycloak/commit/22b87b48a00674497959cf17f777a62106ae0cf0", "message": "KEYCLOAK-4544 Detect existing user before granting user autolink", "committedDate": "2021-02-08T07:49:14Z", "type": "forcePushed"}, {"oid": "cbfbbfcd34db746cf9db7e6e1259ba519ac91c6f", "url": "https://github.com/keycloak/keycloak/commit/cbfbbfcd34db746cf9db7e6e1259ba519ac91c6f", "message": "KEYCLOAK-4544 Detect existing user before granting user autolink", "committedDate": "2021-02-08T08:57:08Z", "type": "forcePushed"}, {"oid": "4d44c1914768ee9014339a0b0d5493ff48184e5d", "url": "https://github.com/keycloak/keycloak/commit/4d44c1914768ee9014339a0b0d5493ff48184e5d", "message": "KEYCLOAK-4544 Detect existing user before granting user autolink", "committedDate": "2021-02-09T16:02:41Z", "type": "commit"}, {"oid": "4d44c1914768ee9014339a0b0d5493ff48184e5d", "url": "https://github.com/keycloak/keycloak/commit/4d44c1914768ee9014339a0b0d5493ff48184e5d", "message": "KEYCLOAK-4544 Detect existing user before granting user autolink", "committedDate": "2021-02-09T16:02:41Z", "type": "forcePushed"}]}