{"pr_number": 7682, "pr_title": "KEYCLOAK-14202 Client Policy - Executor : Enforce secure signature algorithm for Signed JWT client authentication", "pr_createdAt": "2020-12-16T06:15:32Z", "pr_url": "https://github.com/keycloak/keycloak/pull/7682", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyMjAyMg==", "url": "https://github.com/keycloak/keycloak/pull/7682#discussion_r544122022", "bodyText": "I know it has some side-effects and risk of outdated to enum the algorithms here, but still I would probably do it? Typical administrator, who will try to use this executor, may not know what the \"signature algorithm considered to be secured\" means. My vote is to add just another sentence like \"Secured algorithms are PS and ES algorithms like for example PS256 or ES256.\" WDYT?", "author": "mposolda", "createdAt": "2020-12-16T08:57:37Z", "path": "services/src/main/java/org/keycloak/services/clientpolicy/executor/SecureSigningAlgorithmForSignedJwtEnforceExecutorFactory.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.services.clientpolicy.executor;\n+\n+import org.keycloak.Config.Scope;\n+import org.keycloak.component.ComponentModel;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.KeycloakSessionFactory;\n+import org.keycloak.provider.ProviderConfigProperty;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class SecureSigningAlgorithmForSignedJwtEnforceExecutorFactory implements ClientPolicyExecutorProviderFactory {\n+\n+    public static final String PROVIDER_ID = \"securesignalgjwt-enforce-executor\";\n+\n+    @Override\n+    public ClientPolicyExecutorProvider create(KeycloakSession session, ComponentModel model) {\n+        return new SecureSigningAlgorithmForSignedJwtEnforceExecutor(session, model);\n+    }\n+\n+    @Override\n+    public void init(Scope config) {\n+    }\n+\n+    @Override\n+    public void postInit(KeycloakSessionFactory factory) {\n+    }\n+\n+    @Override\n+    public void close() {\n+    }\n+\n+    @Override\n+    public String getId() {\n+        return PROVIDER_ID;\n+    }\n+\n+    @Override\n+    public String getHelpText() {\n+        return \"It prohibits the client whose JWT token signature algorithms are considered not to be secure.\";", "originalCommit": "2441794facfe2df7dbe1e38eec9a21a0f582a90a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc0MDQ2Mg==", "url": "https://github.com/keycloak/keycloak/pull/7682#discussion_r544740462", "bodyText": "Yes. I would like to describe the algorithms that are thought to be secure at this time explicitly, the same as SecureSigningAlgorithmEnforceExecutorFactory.getHelpText()", "author": "tnorimat", "createdAt": "2020-12-17T01:20:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyMjAyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyMjk1Mw==", "url": "https://github.com/keycloak/keycloak/pull/7682#discussion_r544122953", "bodyText": "I would add comment to source code like \"// Please change also SecureSigningAlgorithmForSignedJwtEnforceExecutorFactory.getHelpText() if you are changing any algorithms here\" .\nSee my other comment for the details.", "author": "mposolda", "createdAt": "2020-12-16T08:59:01Z", "path": "services/src/main/java/org/keycloak/services/clientpolicy/executor/SecureSigningAlgorithmForSignedJwtEnforceExecutor.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.services.clientpolicy.executor;\n+\n+import org.jboss.logging.Logger;\n+import org.jboss.resteasy.spi.HttpRequest;\n+import org.keycloak.OAuth2Constants;\n+import org.keycloak.OAuthErrorException;\n+import org.keycloak.component.ComponentModel;\n+import org.keycloak.crypto.Algorithm;\n+import org.keycloak.jose.jws.JWSInput;\n+import org.keycloak.jose.jws.JWSInputException;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.services.clientpolicy.ClientPolicyContext;\n+import org.keycloak.services.clientpolicy.ClientPolicyException;\n+import org.keycloak.services.clientpolicy.ClientPolicyLogger;\n+\n+public class SecureSigningAlgorithmForSignedJwtEnforceExecutor implements ClientPolicyExecutorProvider {\n+\n+    private static final Logger logger = Logger.getLogger(SecureSigningAlgorithmForSignedJwtEnforceExecutor.class);\n+\n+    private final KeycloakSession session;\n+    private final ComponentModel componentModel;\n+\n+    public SecureSigningAlgorithmForSignedJwtEnforceExecutor(KeycloakSession session, ComponentModel componentModel) {\n+        this.session = session;\n+        this.componentModel = componentModel;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return componentModel.getName();\n+    }\n+\n+    @Override\n+    public String getProviderId() {\n+        return componentModel.getProviderId();\n+    }\n+\n+    @Override\n+    public void executeOnEvent(ClientPolicyContext context) throws ClientPolicyException {\n+        switch (context.getEvent()) {\n+            case TOKEN_REQUEST:\n+            case TOKEN_REFRESH:\n+            case TOKEN_REVOKE:\n+            case TOKEN_INTROSPECT:\n+            case LOGOUT_REQUEST:\n+                HttpRequest req = session.getContext().getContextObject(HttpRequest.class);\n+                String clientAssertion = req.getDecodedFormParameters().getFirst(OAuth2Constants.CLIENT_ASSERTION);\n+                JWSInput jws = null;\n+                try {\n+                    jws = new JWSInput(clientAssertion);\n+                } catch (JWSInputException e) {\n+                    throw new ClientPolicyException(OAuthErrorException.INVALID_REQUEST, \"not allowed input format.\");\n+                }\n+                String alg = jws.getHeader().getAlgorithm().name();\n+                verifySecureSigningAlgorithm(alg);\n+                break;\n+            default:\n+                return;\n+        }\n+    }\n+\n+    private void verifySecureSigningAlgorithm(String signatureAlgorithm) throws ClientPolicyException {\n+        if (signatureAlgorithm == null) {\n+            ClientPolicyLogger.log(logger, \"Signing algorithm not specified explicitly.\");\n+            return;\n+        }\n+        switch (signatureAlgorithm) {\n+            case Algorithm.PS256:", "originalCommit": "2441794facfe2df7dbe1e38eec9a21a0f582a90a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc0MDY2Mg==", "url": "https://github.com/keycloak/keycloak/pull/7682#discussion_r544740662", "bodyText": "Yes, I agree with you. I'll fix as you pointed out.", "author": "tnorimat", "createdAt": "2020-12-17T01:21:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyMjk1Mw=="}], "type": "inlineReview"}, {"oid": "6b41e89a58e5cdad9c13c42e9c14c5e9a3d37f9c", "url": "https://github.com/keycloak/keycloak/commit/6b41e89a58e5cdad9c13c42e9c14c5e9a3d37f9c", "message": "KEYCLOAK-14202 Client Policy - Executor : Enforce secure signature algorithm for Signed JWT client authentication\n\nCo-authored-by: Andrii Murashkin <amu@adorsys.com.ua>", "committedDate": "2020-12-17T01:26:54Z", "type": "commit"}, {"oid": "6b41e89a58e5cdad9c13c42e9c14c5e9a3d37f9c", "url": "https://github.com/keycloak/keycloak/commit/6b41e89a58e5cdad9c13c42e9c14c5e9a3d37f9c", "message": "KEYCLOAK-14202 Client Policy - Executor : Enforce secure signature algorithm for Signed JWT client authentication\n\nCo-authored-by: Andrii Murashkin <amu@adorsys.com.ua>", "committedDate": "2020-12-17T01:26:54Z", "type": "forcePushed"}]}