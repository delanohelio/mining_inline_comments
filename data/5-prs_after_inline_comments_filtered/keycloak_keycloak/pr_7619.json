{"pr_number": 7619, "pr_title": "[KEYCLOAK-16341] Make the new stream-based methods in server-spi user\u2026", "pr_createdAt": "2020-11-17T05:14:00Z", "pr_url": "https://github.com/keycloak/keycloak/pull/7619", "timeline": [{"oid": "9010662b5b72764beebae029a683128f84af43aa", "url": "https://github.com/keycloak/keycloak/commit/9010662b5b72764beebae029a683128f84af43aa", "message": "[KEYCLOAK-16341] Make the new stream-based methods in server-spi user interfaces default instead of the collection-based versions.\n - this ensures that providing implementation for the collection-based methods is enough, which preserves\n   backwards compatibility with older custom implementations.\n - alternative interfaces now allow new implementations to focus on the stream variants of the query methods.", "committedDate": "2020-11-18T01:01:06Z", "type": "forcePushed"}, {"oid": "a80a19ce93fe04630f6c4f2cc6793cb8ab55117c", "url": "https://github.com/keycloak/keycloak/commit/a80a19ce93fe04630f6c4f2cc6793cb8ab55117c", "message": "[KEYCLOAK-16341] Make the new stream-based methods in server-spi user interfaces default instead of the collection-based versions.\n - this ensures that providing implementation for the collection-based methods is enough, which preserves\n   backwards compatibility with older custom implementations.\n - alternative interfaces now allow new implementations to focus on the stream variants of the query methods.", "committedDate": "2020-11-18T01:04:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk2MDE3Ng==", "url": "https://github.com/keycloak/keycloak/pull/7619#discussion_r525960176", "bodyText": "Default implementation from the superinterface gets inherited regardless.\nPerhaps the following could be used instead:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    @Override\n          \n          \n            \n                    Stream<FederatedIdentityModel> getFederatedIdentitiesStream(UserModel user, RealmModel realm);\n          \n          \n            \n                    @Override\n          \n          \n            \n                    default Stream<FederatedIdentityModel> getFederatedIdentitiesStream(UserModel user, RealmModel realm) {\n          \n          \n            \n                        throw new UnsupportedOperationException(\"Not implemented yet.\");\n          \n          \n            \n                    }", "author": "hmlnarik", "createdAt": "2020-11-18T10:04:01Z", "path": "server-spi/src/main/java/org/keycloak/models/UserProvider.java", "diffHunk": "@@ -168,4 +172,38 @@\n     void close();\n \n     void preRemove(RealmModel realm, ComponentModel component);\n+\n+    interface Streams extends UserProvider, UserQueryProvider.Streams {\n+        @Override\n+        default Set<FederatedIdentityModel> getFederatedIdentities(UserModel user, RealmModel realm) {\n+            return this.getFederatedIdentitiesStream(user, realm).collect(Collectors.toSet());\n+        }\n+\n+        @Override\n+        Stream<FederatedIdentityModel> getFederatedIdentitiesStream(UserModel user, RealmModel realm);\n+", "originalCommit": "a80a19ce93fe04630f6c4f2cc6793cb8ab55117c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk4NzE2Mw==", "url": "https://github.com/keycloak/keycloak/pull/7619#discussion_r525987163", "bodyText": "Please ignore this one. I must have made a mistake when trying this.", "author": "hmlnarik", "createdAt": "2020-11-18T10:44:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk2MDE3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk2OTQwNg==", "url": "https://github.com/keycloak/keycloak/pull/7619#discussion_r525969406", "bodyText": "Please return this file to the state before #7524.", "author": "hmlnarik", "createdAt": "2020-11-18T10:17:50Z", "path": "testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/federation/UserPropertyFileStorage.java", "diffHunk": "@@ -43,7 +43,8 @@\n  * @author <a href=\"mailto:bill@burkecentral.com\">Bill Burke</a>\n  * @version $Revision: 1 $\n  */\n-public class UserPropertyFileStorage implements UserLookupProvider, UserStorageProvider, UserQueryProvider, CredentialInputValidator {\n+public class UserPropertyFileStorage implements UserLookupProvider, UserStorageProvider, UserQueryProvider.Streams,", "originalCommit": "a80a19ce93fe04630f6c4f2cc6793cb8ab55117c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0120bf9b2d4b213edc314e9533c07b587b77ccaf", "url": "https://github.com/keycloak/keycloak/commit/0120bf9b2d4b213edc314e9533c07b587b77ccaf", "message": "[KEYCLOAK-16341] Make the new stream-based methods in server-spi user interfaces default instead of the collection-based versions.\n - this ensures that providing implementation for the collection-based methods is enough, which preserves\n   backwards compatibility with older custom implementations.\n - alternative interfaces now allow new implementations to focus on the stream variants of the query methods.", "committedDate": "2020-11-18T11:24:46Z", "type": "forcePushed"}, {"oid": "6687364fbf434a8277b937a76ba53129488ebcf5", "url": "https://github.com/keycloak/keycloak/commit/6687364fbf434a8277b937a76ba53129488ebcf5", "message": "[KEYCLOAK-16341] Make the new stream-based methods in server-spi user interfaces default instead of the collection-based versions.\n - this ensures that providing implementation for the collection-based methods is enough, which preserves\n   backwards compatibility with older custom implementations.\n - alternative interfaces now allow new implementations to focus on the stream variants of the query methods.", "committedDate": "2020-11-18T18:12:23Z", "type": "commit"}, {"oid": "6687364fbf434a8277b937a76ba53129488ebcf5", "url": "https://github.com/keycloak/keycloak/commit/6687364fbf434a8277b937a76ba53129488ebcf5", "message": "[KEYCLOAK-16341] Make the new stream-based methods in server-spi user interfaces default instead of the collection-based versions.\n - this ensures that providing implementation for the collection-based methods is enough, which preserves\n   backwards compatibility with older custom implementations.\n - alternative interfaces now allow new implementations to focus on the stream variants of the query methods.", "committedDate": "2020-11-18T18:12:23Z", "type": "forcePushed"}]}