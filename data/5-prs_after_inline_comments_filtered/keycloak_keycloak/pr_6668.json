{"pr_number": 6668, "pr_title": "KEYCLOAK-12340 KEYCLOAK-12386 Regression in credential handling when \u2026", "pr_createdAt": "2020-01-16T17:48:20Z", "pr_url": "https://github.com/keycloak/keycloak/pull/6668", "timeline": [{"oid": "a7e9e14d26978e1cd5f5245fe4334244cb7c7398", "url": "https://github.com/keycloak/keycloak/commit/a7e9e14d26978e1cd5f5245fe4334244cb7c7398", "message": "KEYCLOAK-12340 KEYCLOAK-12386 Regression in credential handling when using userStorage providers", "committedDate": "2020-01-17T12:09:54Z", "type": "commit"}, {"oid": "a7e9e14d26978e1cd5f5245fe4334244cb7c7398", "url": "https://github.com/keycloak/keycloak/commit/a7e9e14d26978e1cd5f5245fe4334244cb7c7398", "message": "KEYCLOAK-12340 KEYCLOAK-12386 Regression in credential handling when using userStorage providers", "committedDate": "2020-01-17T12:09:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg0NTM0Ng==", "url": "https://github.com/keycloak/keycloak/pull/6668#discussion_r371845346", "bodyText": "This looks redundant.", "author": "tkyjovsk", "createdAt": "2020-01-28T14:45:54Z", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/federation/storage/UserStorageOTPTest.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.keycloak.testsuite.federation.storage;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+\n+import org.jboss.arquillian.graphene.page.Page;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.keycloak.OAuth2Constants;\n+import org.keycloak.admin.client.resource.UserResource;\n+import org.keycloak.common.util.MultivaluedHashMap;\n+import org.keycloak.models.UserModel;\n+import org.keycloak.models.credential.OTPCredentialModel;\n+import org.keycloak.models.credential.PasswordCredentialModel;\n+import org.keycloak.models.utils.TimeBasedOTP;\n+import org.keycloak.representations.idm.ComponentRepresentation;\n+import org.keycloak.representations.idm.RealmRepresentation;\n+import org.keycloak.representations.idm.UserRepresentation;\n+import org.keycloak.storage.UserStorageProvider;\n+import org.keycloak.testsuite.AbstractTestRealmKeycloakTest;\n+import org.keycloak.testsuite.Assert;\n+import org.keycloak.testsuite.admin.ApiUtil;\n+import org.keycloak.testsuite.federation.DummyUserFederationProvider;\n+import org.keycloak.testsuite.federation.DummyUserFederationProviderFactory;\n+import org.keycloak.testsuite.pages.AppPage;\n+import org.keycloak.testsuite.pages.LoginConfigTotpPage;\n+import org.keycloak.testsuite.pages.LoginPage;\n+import org.keycloak.testsuite.pages.LoginTotpPage;\n+import org.keycloak.testsuite.util.UserBuilder;\n+\n+import static org.keycloak.storage.UserStorageProviderModel.IMPORT_ENABLED;\n+import static org.keycloak.testsuite.federation.storage.UserStorageTest.addComponent;\n+\n+/**\n+ * @author <a href=\"mailto:mposolda@redhat.com\">Marek Posolda</a>\n+ */\n+public class UserStorageOTPTest extends AbstractTestRealmKeycloakTest {\n+\n+    private String dummyProviderId;\n+    private String testUserId;\n+\n+\n+    @Page\n+    protected LoginPage loginPage;\n+\n+    @Page\n+    protected LoginTotpPage loginTotpPage;\n+\n+    @Page\n+    protected LoginConfigTotpPage loginConfigTotpPage;\n+\n+    @Page\n+    protected AppPage appPage;\n+\n+    protected TimeBasedOTP totp = new TimeBasedOTP();\n+\n+\n+\n+    @Override\n+    public void configureTestRealm(RealmRepresentation testRealm) {\n+\n+    }\n+\n+    @Before\n+    public void addProvidersBeforeTest() throws URISyntaxException, IOException {\n+        ComponentRepresentation dummyProvider = new ComponentRepresentation();\n+        dummyProvider.setName(\"dummy\");\n+        dummyProvider.setId(DummyUserFederationProviderFactory.PROVIDER_NAME);\n+        dummyProvider.setProviderId(DummyUserFederationProviderFactory.PROVIDER_NAME);\n+        dummyProvider.setProviderType(UserStorageProvider.class.getName());\n+        dummyProvider.setConfig(new MultivaluedHashMap<>());\n+        dummyProvider.getConfig().putSingle(\"priority\", Integer.toString(0));\n+        dummyProvider.getConfig().putSingle(IMPORT_ENABLED, Boolean.toString(false));\n+\n+        dummyProviderId = addComponent(testRealm(), getCleanup(), dummyProvider);\n+\n+        UserRepresentation user = UserBuilder.create()\n+                .username(\"test-user\")\n+                .email(\"test-user@something.org\")\n+                .build();\n+        String testUserId = ApiUtil.createUserWithAdminClient(testRealm(), user);\n+\n+        getCleanup().addUserId(testUserId);\n+    }\n+\n+\n+    @Test\n+    public void testCredentialsThroughRESTAPI() {\n+        // Test that test-user has federation link on him\n+        UserResource user = ApiUtil.findUserByUsernameId(testRealm(), \"test-user\");\n+        Assert.assertEquals(DummyUserFederationProviderFactory.PROVIDER_NAME, user.toRepresentation().getFederationLink());\n+\n+        // Test that both \"password\" and \"otp\" are configured for the test-user\n+        List<String> userStorageCredentialTypes = user.getConfiguredUserStorageCredentialTypes();\n+        Assert.assertNames(userStorageCredentialTypes, PasswordCredentialModel.TYPE, OTPCredentialModel.TYPE);\n+    }\n+\n+\n+    @Test\n+    public void testAuthentication() {\n+        // Test that user is required to provide OTP credential during authentication\n+        loginPage.open();\n+        loginPage.login(\"test-user\", DummyUserFederationProvider.HARDCODED_PASSWORD);\n+\n+        loginTotpPage.assertCurrent();\n+\n+        loginTotpPage.login(\"654321\");\n+        loginTotpPage.assertCurrent();\n+        Assert.assertEquals(\"Invalid authenticator code.\", loginPage.getError());\n+\n+        loginTotpPage.login(DummyUserFederationProvider.HARDCODED_OTP);\n+\n+        appPage.assertCurrent();\n+        Assert.assertEquals(AppPage.RequestType.AUTH_RESPONSE, appPage.getRequestType());\n+        Assert.assertNotNull(oauth.getCurrentQuery().get(OAuth2Constants.CODE));\n+    }\n+\n+\n+    private void authenticateUser() {", "originalCommit": "a7e9e14d26978e1cd5f5245fe4334244cb7c7398", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc5ODkyNQ==", "url": "https://github.com/keycloak/keycloak/pull/6668#discussion_r372798925", "bodyText": "Thanks, I've removed method \"authenticateUser\" and also did few very minor cleanups in the UserStorageOTPTest. Used separate commit for that, so it's easier to re-review", "author": "mposolda", "createdAt": "2020-01-30T07:48:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg0NTM0Ng=="}], "type": "inlineReview"}, {"oid": "9e2026e2e0c09d9a8fb820cb3d144d4ac241ae00", "url": "https://github.com/keycloak/keycloak/commit/9e2026e2e0c09d9a8fb820cb3d144d4ac241ae00", "message": "KEYCLOAK-12340 KEYCLOAK-12386 Minor cleanup in UserStorageOTPTest", "committedDate": "2020-01-30T07:46:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4Mzk2OA==", "url": "https://github.com/keycloak/keycloak/pull/6668#discussion_r371783968", "bodyText": "Is this change intentional?", "author": "hmlnarik", "createdAt": "2020-01-28T12:54:02Z", "path": "services/src/main/java/org/keycloak/services/resources/admin/UserResource.java", "diffHunk": "@@ -620,13 +617,29 @@ public void resetPassword(CredentialRepresentation cred) {\n     @NoCache\n     @Produces(MediaType.APPLICATION_JSON)\n     public List<CredentialRepresentation> credentials(){\n-        auth.users().requireManage(user);\n+        auth.users().requireView(user);", "originalCommit": "a7e9e14d26978e1cd5f5245fe4334244cb7c7398", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM3NjA0Nw==", "url": "https://github.com/keycloak/keycloak/pull/6668#discussion_r373376047", "bodyText": "Yes, I did this intentionally as \"requireView\" is in general used for getters/read use-cases when \"requireManage\" is used for writes. This endpoint is for reading, I think it is copy/paste error that it has \"requireManage\" .\nBut on the other hand, this change is not directly related to the main point of this PR. So if you prefer, I can remove it and we can address admin REST permissions for later. WDYT?", "author": "mposolda", "createdAt": "2020-01-31T09:04:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4Mzk2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM3OTM1MQ==", "url": "https://github.com/keycloak/keycloak/pull/6668#discussion_r373379351", "bodyText": "Thanks for the explanation. Does that mean that anyone able to view the user would be able to see credentials this user has?", "author": "hmlnarik", "createdAt": "2020-01-31T09:13:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4Mzk2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4MDc3NQ==", "url": "https://github.com/keycloak/keycloak/pull/6668#discussion_r373380775", "bodyText": "Yes, but just the public metadata of the credentials, not the secret data. So for example he will be able to see that user has password and algorithm \"pbkdf2\" was used to hash the password and there are 20.000 hashing iterations. He won't be able to see secret data (salt and password hash in case of password).", "author": "mposolda", "createdAt": "2020-01-31T09:16:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4Mzk2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4Mjc0MA==", "url": "https://github.com/keycloak/keycloak/pull/6668#discussion_r373382740", "bodyText": "I suggest then leaving this information only available for those managing this user since the metadata can increase the attack surface (like \"as an attacker I don't need to try password-breaking since the user has enrolled no password\").", "author": "hmlnarik", "createdAt": "2020-01-31T09:21:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4Mzk2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM5MDE3Nw==", "url": "https://github.com/keycloak/keycloak/pull/6668#discussion_r373390177", "bodyText": "Yes, ok. This change is not related to this PR, so I reverted it. We can potentially revisit in the future.", "author": "mposolda", "createdAt": "2020-01-31T09:39:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4Mzk2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM5NDAyOA==", "url": "https://github.com/keycloak/keycloak/pull/6668#discussion_r373394028", "bodyText": "Thanks! I am totally on board with revisiting this type of rights", "author": "hmlnarik", "createdAt": "2020-01-31T09:48:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4Mzk2OA=="}], "type": "inlineReview"}, {"oid": "588e1b55d1f76b1be7bf1be27402746e438b53cc", "url": "https://github.com/keycloak/keycloak/commit/588e1b55d1f76b1be7bf1be27402746e438b53cc", "message": "KEYCLOAK-12340 Revert change for USerResource.credentials() permissions", "committedDate": "2020-01-31T09:58:46Z", "type": "commit"}, {"oid": "588e1b55d1f76b1be7bf1be27402746e438b53cc", "url": "https://github.com/keycloak/keycloak/commit/588e1b55d1f76b1be7bf1be27402746e438b53cc", "message": "KEYCLOAK-12340 Revert change for USerResource.credentials() permissions", "committedDate": "2020-01-31T09:58:46Z", "type": "forcePushed"}]}