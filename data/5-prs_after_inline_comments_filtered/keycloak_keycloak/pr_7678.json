{"pr_number": 7678, "pr_title": "KEYCLOAK-14718 Adding test case for User Client Role Mapper", "pr_createdAt": "2020-12-14T16:56:11Z", "pr_url": "https://github.com/keycloak/keycloak/pull/7678", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk0NDMwMg==", "url": "https://github.com/keycloak/keycloak/pull/7678#discussion_r555944302", "bodyText": "Ensure that this part is executed always, either by leveraging Creator in try-with-resources, or via try-finally block, or via test cleanup methods. The cleanup also needs to update directAccessGrant back to original value.", "author": "hmlnarik", "createdAt": "2021-01-12T17:22:40Z", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OIDCProtocolMappersTest.java", "diffHunk": "@@ -784,6 +785,45 @@ public void testUserGroupRoleToAttributeMappersScopedClientNotSet() throws Excep\n         deleteMappers(protocolMappers);\n     }\n \n+    @Test\n+    public void testUserGroupRoleToAttributeMappersScopedWithDifferentClient() throws Exception {\n+        String clientId = \"test-app-scope\";\n+        String diffClient = \"test-app\";\n+\n+        ProtocolMapperRepresentation realmMapper = ProtocolMapperUtil.createUserRealmRoleMappingMapper(\"pref.\", \"Realm roles mapper\", \"roles-custom.realm\", true, true);\n+        ProtocolMapperRepresentation clientMapper = ProtocolMapperUtil.createUserClientRoleMappingMapper(diffClient, null, \"Client roles mapper\", \"roles-custom.test-app\", true, true);\n+\n+        ClientResource clientResource = ApiUtil.findClientResourceByClientId(adminClient.realm(\"test\"), clientId);\n+        assertThat(clientResource, notNullValue());\n+\n+        ProtocolMappersResource protocolMappers = clientResource.getProtocolMappers();\n+        protocolMappers.createMapper(Arrays.asList(realmMapper, clientMapper));\n+\n+        // Login user\n+        ClientManager.realm(adminClient.realm(\"test\")).clientId(clientId).directAccessGrant(true);\n+        oauth.clientId(clientId);\n+        OAuthClient.AccessTokenResponse response = browserLogin(\"password\", \"rich.roles@redhat.com\", \"password\");\n+        IDToken idToken = oauth.verifyIDToken(response.getIdToken());\n+\n+        // Verify attribute is filled\n+        Map<String, Object> roleMappings = (Map<String, Object>) idToken.getOtherClaims().get(\"roles-custom\");\n+        Assert.assertThat(roleMappings.keySet(), containsInAnyOrder(\"realm\", diffClient));\n+        String realmRoleMappings = (String) roleMappings.get(\"realm\");\n+        String testAppScopeMappings = (String) roleMappings.get(diffClient);\n+        assertRolesString(realmRoleMappings,\n+                \"pref.admin\",\n+                \"pref.user\",\n+                \"pref.customer-user-premium\"\n+        );\n+        assertRolesString(testAppScopeMappings,\n+                \"customer-admin-composite-role\",\n+                \"customer-admin\"\n+        );\n+\n+        // Revert\n+        deleteMappers(protocolMappers);", "originalCommit": "4f76a322457b006cbe0642fa8828047b2428111e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk1MjkwNg==", "url": "https://github.com/keycloak/keycloak/pull/7678#discussion_r555952906", "bodyText": "You're right. Thanks @hmlnarik !", "author": "mabartos", "createdAt": "2021-01-12T17:35:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk0NDMwMg=="}], "type": "inlineReview"}, {"oid": "fb833872a618d0843093e04ece303fa5dc0d3d25", "url": "https://github.com/keycloak/keycloak/commit/fb833872a618d0843093e04ece303fa5dc0d3d25", "message": "KEYCLOAK-14718 Adding test case for User Client Role Mapper", "committedDate": "2021-01-12T18:10:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc3NjgxNw==", "url": "https://github.com/keycloak/keycloak/pull/7678#discussion_r556776817", "bodyText": "Thank you for the change. You can completely get rid of the clientResource this way:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ClientResource clientResource = ApiUtil.findClientResourceByClientId(adminClient.realm(realmName), clientId);\n          \n          \n            \n                    assertThat(clientResource, notNullValue());\n          \n          \n            \n            \n          \n          \n            \n                    try (ProtocolMappersUpdater protocolMappers = new ProtocolMappersUpdater(clientResource.getProtocolMappers());\n          \n          \n            \n                         ClientAttributeUpdater cau = ClientAttributeUpdater.forClient(adminClient, realmName, clientId).setDirectAccessGrantsEnabled(true)) {\n          \n          \n            \n                    try (ClientAttributeUpdater cau = ClientAttributeUpdater.forClient(adminClient, realmName, clientId).setDirectAccessGrantsEnabled(true);\n          \n          \n            \n                      ProtocolMappersUpdater protocolMappers = new ProtocolMappersUpdater(cau.getResource().getProtocolMappers())) {", "author": "hmlnarik", "createdAt": "2021-01-13T19:30:48Z", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OIDCProtocolMappersTest.java", "diffHunk": "@@ -784,6 +787,46 @@ public void testUserGroupRoleToAttributeMappersScopedClientNotSet() throws Excep\n         deleteMappers(protocolMappers);\n     }\n \n+    @Test\n+    public void testUserGroupRoleToAttributeMappersScopedWithDifferentClient() throws Exception {\n+        final String clientId = \"test-app-scope\";\n+        final String diffClient = \"test-app\";\n+        final String realmName = \"test\";\n+\n+        final ProtocolMapperRepresentation realmMapper = ProtocolMapperUtil.createUserRealmRoleMappingMapper(\"pref.\", \"Realm roles mapper\", \"roles-custom.realm\", true, true);\n+        final ProtocolMapperRepresentation clientMapper = ProtocolMapperUtil.createUserClientRoleMappingMapper(diffClient, null, \"Client roles mapper\", \"roles-custom.test-app\", true, true);\n+\n+        ClientResource clientResource = ApiUtil.findClientResourceByClientId(adminClient.realm(realmName), clientId);\n+        assertThat(clientResource, notNullValue());\n+\n+        try (ProtocolMappersUpdater protocolMappers = new ProtocolMappersUpdater(clientResource.getProtocolMappers());\n+             ClientAttributeUpdater cau = ClientAttributeUpdater.forClient(adminClient, realmName, clientId).setDirectAccessGrantsEnabled(true)) {", "originalCommit": "fb833872a618d0843093e04ece303fa5dc0d3d25", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "73ea6754e504b89614d48a6b4b0a2ee31441b2cb", "url": "https://github.com/keycloak/keycloak/commit/73ea6754e504b89614d48a6b4b0a2ee31441b2cb", "message": "KEYCLOAK-14718 Adding test case for User Client Role Mapper", "committedDate": "2021-01-15T08:58:59Z", "type": "forcePushed"}, {"oid": "0365b6b776f0fe7a6ac591408bc37d3194fc662b", "url": "https://github.com/keycloak/keycloak/commit/0365b6b776f0fe7a6ac591408bc37d3194fc662b", "message": "KEYCLOAK-14718 Adding test case for User Client Role Mapper", "committedDate": "2021-01-19T15:23:33Z", "type": "commit"}, {"oid": "0365b6b776f0fe7a6ac591408bc37d3194fc662b", "url": "https://github.com/keycloak/keycloak/commit/0365b6b776f0fe7a6ac591408bc37d3194fc662b", "message": "KEYCLOAK-14718 Adding test case for User Client Role Mapper", "committedDate": "2021-01-19T15:23:33Z", "type": "forcePushed"}]}