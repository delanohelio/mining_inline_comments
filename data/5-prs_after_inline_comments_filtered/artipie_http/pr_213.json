{"pr_number": 213, "pr_title": "Text responses", "pr_createdAt": "2020-08-04T14:45:01Z", "pr_url": "https://github.com/artipie/http/pull/213", "timeline": [{"oid": "486f9beddf3e5fadb3b040a66563a25ed4f9dbc1", "url": "https://github.com/artipie/http/commit/486f9beddf3e5fadb3b040a66563a25ed4f9dbc1", "message": "#210 - text responses", "committedDate": "2020-08-04T13:28:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ2OTQ3Mg==", "url": "https://github.com/artipie/http/pull/213#discussion_r465469472", "bodyText": "@g4s8 I'd extract field from response status and create ctor with default 200 OK status", "author": "olenagerasimova", "createdAt": "2020-08-05T04:45:43Z", "path": "src/main/java/com/artipie/http/rs/common/RsText.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.rs.common;\n+\n+import com.artipie.http.Connection;\n+import com.artipie.http.Headers;\n+import com.artipie.http.Response;\n+import com.artipie.http.headers.ContentLength;\n+import com.artipie.http.headers.ContentType;\n+import com.artipie.http.rs.RsStatus;\n+import io.reactivex.Flowable;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.CompletionStage;\n+\n+/**\n+ * Response with text.\n+ * @since 0.16\n+ */\n+public final class RsText implements Response {\n+\n+    /**\n+     * Text char sequence.\n+     */\n+    private final CharSequence text;\n+\n+    /**\n+     * Charset encoding.\n+     */\n+    private final Charset encoding;\n+\n+    /**\n+     * New text response with {@link CharSequence} and {@code UT8} encoding.\n+     * @param text Char sequence\n+     */\n+    public RsText(final CharSequence text) {\n+        this(text, StandardCharsets.UTF_8);\n+    }\n+\n+    /**\n+     * New text response with {@link CharSequence} and encoding {@link Charset}.\n+     * @param text Char sequence\n+     * @param encoding Charset\n+     */\n+    public RsText(final CharSequence text, final Charset encoding) {\n+        this.text = text;\n+        this.encoding = encoding;\n+    }\n+\n+    @Override\n+    public CompletionStage<Void> send(final Connection connection) {\n+        final byte[] bytes = this.text.toString().getBytes(this.encoding);\n+        return connection.accept(\n+            RsStatus.OK,", "originalCommit": "486f9beddf3e5fadb3b040a66563a25ed4f9dbc1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ2OTgxMA==", "url": "https://github.com/artipie/http/pull/213#discussion_r465469810", "bodyText": "@g4s8 could you please switch matchers to make meaningful matcher come first?", "author": "olenagerasimova", "createdAt": "2020-08-05T04:46:59Z", "path": "src/test/java/com/artipie/http/rs/common/RsTextTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.rs.common;\n+\n+import com.artipie.http.headers.Header;\n+import com.artipie.http.hm.RsHasBody;\n+import com.artipie.http.hm.RsHasHeaders;\n+import com.artipie.http.hm.StatefulResponse;\n+import java.nio.charset.StandardCharsets;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test case for {@link RsJson}.\n+ *\n+ * @since 0.16\n+ */\n+final class RsTextTest {\n+\n+    @Test\n+    void bodyIsCorrect() {\n+        final String src = \"hello\";\n+        MatcherAssert.assertThat(\n+            new StatefulResponse(new RsText(src, StandardCharsets.UTF_16)),\n+            new RsHasBody(src, StandardCharsets.UTF_16)\n+        );\n+    }\n+\n+    @Test\n+    void headersHasContentSize() {\n+        MatcherAssert.assertThat(\n+            new StatefulResponse(new RsText(\"four\")),\n+            new RsHasHeaders(\n+                Matchers.anything(),\n+                Matchers.equalTo(new Header(\"Content-Length\", \"4\"))", "originalCommit": "486f9beddf3e5fadb3b040a66563a25ed4f9dbc1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6453a5457e44142e399e184d9d3c27ca97441015", "url": "https://github.com/artipie/http/commit/6453a5457e44142e399e184d9d3c27ca97441015", "message": "#210 - review fixes", "committedDate": "2020-08-10T10:56:28Z", "type": "commit"}, {"oid": "19037f210d2bdf2c9336f999bb7f0cdf58d607f3", "url": "https://github.com/artipie/http/commit/19037f210d2bdf2c9336f999bb7f0cdf58d607f3", "message": "Merge branch 'master' into 210-text", "committedDate": "2020-08-10T10:57:11Z", "type": "commit"}]}