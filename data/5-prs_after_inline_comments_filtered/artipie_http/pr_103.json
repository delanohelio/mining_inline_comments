{"pr_number": 103, "pr_title": "#102 - Added LoggingSlice", "pr_createdAt": "2020-04-01T09:06:06Z", "pr_url": "https://github.com/artipie/http/pull/103", "timeline": [{"oid": "abc16ac18f6fdec91e4ab2047a3b0f9525c96f57", "url": "https://github.com/artipie/http/commit/abc16ac18f6fdec91e4ab2047a3b0f9525c96f57", "message": "#102 - Added LoggingSlice", "committedDate": "2020-04-01T09:05:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM3NzU2Mw==", "url": "https://github.com/artipie/http/pull/103#discussion_r402377563", "bodyText": "@olegmoz Slice that logs incoming requests and...", "author": "Vatavuk", "createdAt": "2020-04-02T14:53:57Z", "path": "src/main/java/com/artipie/http/slice/LoggingSlice.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.slice;\n+\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rs.RsStatus;\n+import com.jcabi.log.Logger;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.CompletionStage;\n+import java.util.logging.Level;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice logging incoming requests and outgoing responses.", "originalCommit": "abc16ac18f6fdec91e4ab2047a3b0f9525c96f57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5NTA4MA==", "url": "https://github.com/artipie/http/pull/103#discussion_r402395080", "bodyText": "@Vatavuk fixed", "author": "olegmoz", "createdAt": "2020-04-02T15:16:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM3NzU2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM3OTM2Mg==", "url": "https://github.com/artipie/http/pull/103#discussion_r402379362", "bodyText": "@olegmoz inline this variable", "author": "Vatavuk", "createdAt": "2020-04-02T14:56:11Z", "path": "src/main/java/com/artipie/http/slice/LoggingSlice.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.slice;\n+\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rs.RsStatus;\n+import com.jcabi.log.Logger;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.CompletionStage;\n+import java.util.logging.Level;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice logging incoming requests and outgoing responses.\n+ *\n+ * @since 0.8\n+ */\n+public final class LoggingSlice implements Slice {\n+\n+    /**\n+     * Logging level.\n+     */\n+    private final Level level;\n+\n+    /**\n+     * Delegate slice.\n+     */\n+    private final Slice slice;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param slice Slice.\n+     */\n+    public LoggingSlice(final Slice slice) {\n+        this(Level.FINE, slice);\n+    }\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param level Logging level.\n+     * @param slice Slice.\n+     */\n+    public LoggingSlice(final Level level, final Slice slice) {\n+        this.level = level;\n+        this.slice = slice;\n+    }\n+\n+    @Override\n+    public Response response(\n+        final String line,\n+        final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body\n+    ) {\n+        final StringBuilder msg = new StringBuilder();\n+        msg.append(\">> \").append(line);\n+        LoggingSlice.append(msg, headers);\n+        final Object source = this;", "originalCommit": "abc16ac18f6fdec91e4ab2047a3b0f9525c96f57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5NTI5Mg==", "url": "https://github.com/artipie/http/pull/103#discussion_r402395292", "bodyText": "@Vatavuk done, thanks", "author": "olegmoz", "createdAt": "2020-04-02T15:16:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM3OTM2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM4MjU4Mg==", "url": "https://github.com/artipie/http/pull/103#discussion_r402382582", "bodyText": "@olegmoz Can we test what's actually being logged through jcabi logger? If not maybe we can consider creating a wrapper over Jcabi and inject it in the ctor...", "author": "Vatavuk", "createdAt": "2020-04-02T15:00:05Z", "path": "src/test/java/com/artipie/http/slice/LoggingSliceTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.slice;\n+\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithHeaders;\n+import com.artipie.http.rs.RsWithStatus;\n+import io.reactivex.Flowable;\n+import java.util.Arrays;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.logging.Level;\n+import org.cactoos.map.MapEntry;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Tests for {@link LoggingSlice}.\n+ *\n+ * @since 0.8\n+ */\n+class LoggingSliceTest {\n+\n+    @Test\n+    void shouldLogRequestAndResponse() {", "originalCommit": "abc16ac18f6fdec91e4ab2047a3b0f9525c96f57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5NjA4Nw==", "url": "https://github.com/artipie/http/pull/103#discussion_r402396087", "bodyText": "@Vatavuk it also possible to capture logs by inserting log4j or logback back-end for jcabi and capturing logs there, but to me it looks like an overkill", "author": "olegmoz", "createdAt": "2020-04-02T15:17:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM4MjU4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQwMTI3Mw==", "url": "https://github.com/artipie/http/pull/103#discussion_r402401273", "bodyText": "@olegmoz This test is useless by itself, I would assert the log printout if it is not a big hustle.", "author": "Vatavuk", "createdAt": "2020-04-02T15:24:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM4MjU4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkyNTU3NA==", "url": "https://github.com/artipie/http/pull/103#discussion_r403925574", "bodyText": "@Vatavuk this test can be used to just run and see the results which might be convenient for making changes. Checking logging output is not easy and looks like overtesting, which is not good.", "author": "olegmoz", "createdAt": "2020-04-06T08:47:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM4MjU4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk0OTIxOA==", "url": "https://github.com/artipie/http/pull/103#discussion_r403949218", "bodyText": "@olegmoz ok", "author": "Vatavuk", "createdAt": "2020-04-06T09:25:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM4MjU4Mg=="}], "type": "inlineReview"}, {"oid": "bf1f52459d3a39b01f1309ddb7ae3bdfdce7c62b", "url": "https://github.com/artipie/http/commit/bf1f52459d3a39b01f1309ddb7ae3bdfdce7c62b", "message": "#102 - Changes by review", "committedDate": "2020-04-02T15:15:54Z", "type": "commit"}]}