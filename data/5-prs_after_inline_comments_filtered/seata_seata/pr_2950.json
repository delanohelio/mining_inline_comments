{"pr_number": 2950, "pr_title": "feature: support the reentrant lock in redis module", "pr_createdAt": "2020-07-30T12:10:39Z", "pr_url": "https://github.com/seata/seata/pull/2950", "timeline": [{"oid": "62749ec8f5ddee264e980064a7343cd33098cde8", "url": "https://github.com/seata/seata/commit/62749ec8f5ddee264e980064a7343cd33098cde8", "message": "\u652f\u6301\u53ef\u91cd\u5165\u9501", "committedDate": "2020-07-30T12:00:26Z", "type": "commit"}, {"oid": "42d62878c1cfef2071317bf0b5c146b598161477", "url": "https://github.com/seata/seata/commit/42d62878c1cfef2071317bf0b5c146b598161477", "message": "Merge branch 'develop' into reentrantLock", "committedDate": "2020-07-30T12:34:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2NzExMQ==", "url": "https://github.com/seata/seata/pull/2950#discussion_r462967111", "bodyText": "unnecessary", "author": "a364176773", "createdAt": "2020-07-30T12:41:36Z", "path": "server/src/main/java/io/seata/server/storage/redis/lock/RedisLocker.java", "diffHunk": "@@ -75,13 +75,33 @@ public boolean acquireLock(List<RowLock> rowLocks) {\n                 locks =\n                     locks.stream().filter(LambdaUtils.distinctByKey(LockDO::getRowKey)).collect(Collectors.toList());\n             }\n-            Pipeline pipeline = jedis.pipelined();\n+            List<String> existedKeyList = new ArrayList<>();\n+            locks.forEach(lockDO -> {\n+                existedKeyList.add(getLockKey(lockDO.getRowKey()));\n+            });\n+            List<String> lockList = jedis.mget(existedKeyList.toArray(new String[0]));\n             List<String> readyKeys = new ArrayList<>();\n-            for (LockDO lock : locks) {\n-                String key = getLockKey(lock.getRowKey());\n-                pipeline.setnx(key, JSON.toJSONString(lock));\n-                readyKeys.add(key);\n+            Pipeline pipeline = null;\n+            for (int i = 0; i < existedKeyList.size(); i++) {\n+                String existedValue = lockList.get(i);\n+                if (existedValue == null) {\n+                    if (pipeline == null) {\n+                        pipeline = jedis.pipelined();\n+                    }\n+                    String key = existedKeyList.get(i);\n+                    pipeline.setnx(key, JSON.toJSONString(locks.get(i)));\n+                    readyKeys.add(key);\n+                } else {\n+                    LockDO existed = JSON.parseObject(existedValue, LockDO.class);\n+                    if (!StringUtils.equals(existed.getXid(), locks.get(i).getXid())) {\n+                        return false;\n+                    }\n+                }\n+            }\n+            if (CollectionUtils.isEmpty(readyKeys)) {\n+                return true;\n             }\n+            @SuppressWarnings(\"ConstantConditions\")", "originalCommit": "42d62878c1cfef2071317bf0b5c146b598161477", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4f94a62d795b4cd5b8652e8db2bcb1e7167537f8", "url": "https://github.com/seata/seata/commit/4f94a62d795b4cd5b8652e8db2bcb1e7167537f8", "message": "\u652f\u6301\u53ef\u91cd\u5165\u9501", "committedDate": "2020-07-30T12:47:35Z", "type": "commit"}, {"oid": "7f2c152f21ef5e837496af8b91c6f81c92c56c98", "url": "https://github.com/seata/seata/commit/7f2c152f21ef5e837496af8b91c6f81c92c56c98", "message": "Merge remote-tracking branch 'origin/reentrantLock' into reentrantLock", "committedDate": "2020-07-30T12:48:55Z", "type": "commit"}, {"oid": "0ba200b79a3f88a974fcf7581611d042839aed6b", "url": "https://github.com/seata/seata/commit/0ba200b79a3f88a974fcf7581611d042839aed6b", "message": "\u652f\u6301\u53ef\u91cd\u5165\u9501", "committedDate": "2020-07-30T13:57:29Z", "type": "commit"}, {"oid": "756be605f7b9659d8a7d911693abc9542312493b", "url": "https://github.com/seata/seata/commit/756be605f7b9659d8a7d911693abc9542312493b", "message": "\u652f\u6301\u53ef\u91cd\u5165\u9501", "committedDate": "2020-07-30T14:15:46Z", "type": "commit"}, {"oid": "64aa983a365c3e95207cb88e3e78c529d8b76207", "url": "https://github.com/seata/seata/commit/64aa983a365c3e95207cb88e3e78c529d8b76207", "message": "\u652f\u6301\u53ef\u91cd\u5165\u9501", "committedDate": "2020-07-30T14:34:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ0NDA3Ng==", "url": "https://github.com/seata/seata/pull/2950#discussion_r463444076", "bodyText": "readyKeys.get(i) ?", "author": "slievrly", "createdAt": "2020-07-31T07:14:08Z", "path": "server/src/main/java/io/seata/server/storage/redis/lock/RedisLocker.java", "diffHunk": "@@ -75,13 +78,31 @@ public boolean acquireLock(List<RowLock> rowLocks) {\n                 locks =\n                     locks.stream().filter(LambdaUtils.distinctByKey(LockDO::getRowKey)).collect(Collectors.toList());\n             }\n-            Pipeline pipeline = jedis.pipelined();\n+            List<String> existedKeyList = new ArrayList<>();\n+            locks.forEach(lockDO -> {\n+                existedKeyList.add(getLockKey(lockDO.getRowKey()));\n+            });\n+            List<String> lockList = jedis.mget(existedKeyList.toArray(new String[0]));\n             List<String> readyKeys = new ArrayList<>();\n-            for (LockDO lock : locks) {\n-                String key = getLockKey(lock.getRowKey());\n-                pipeline.setnx(key, JSON.toJSONString(lock));\n-                readyKeys.add(key);\n+            Map<String, String> map = new LinkedHashMap<>(existedKeyList.size(), 1);\n+            for (int i = 0; i < existedKeyList.size(); i++) {\n+                String existedValue = lockList.get(i);\n+                if (existedValue == null) {\n+                    String key = existedKeyList.get(i);\n+                    map.put(key, JSON.toJSONString(locks.get(i)));\n+                    readyKeys.add(key);\n+                } else {\n+                    LockDO existed = JSON.parseObject(existedValue, LockDO.class);\n+                    if (!StringUtils.equals(existed.getXid(), locks.get(i).getXid())) {\n+                        return false;\n+                    }\n+                }\n+            }\n+            if (map.size() == 0) {\n+                return true;\n             }\n+            Pipeline pipeline = jedis.pipelined();\n+            map.forEach(pipeline::setnx);", "originalCommit": "64aa983a365c3e95207cb88e3e78c529d8b76207", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ef4e315acd88c0053ad1f2fed162300e539ffb42", "url": "https://github.com/seata/seata/commit/ef4e315acd88c0053ad1f2fed162300e539ffb42", "message": "Merge branch 'develop' into reentrantLock", "committedDate": "2020-07-31T07:21:47Z", "type": "commit"}, {"oid": "70df844c51e2f0d894257758f86d2b5329a56c0f", "url": "https://github.com/seata/seata/commit/70df844c51e2f0d894257758f86d2b5329a56c0f", "message": "\u652f\u6301\u53ef\u91cd\u5165\u9501", "committedDate": "2020-07-31T10:44:51Z", "type": "commit"}, {"oid": "f7739a1af46639567867b2c7ea9d897c2a543f05", "url": "https://github.com/seata/seata/commit/f7739a1af46639567867b2c7ea9d897c2a543f05", "message": "Merge remote-tracking branch 'origin/reentrantLock' into reentrantLock", "committedDate": "2020-07-31T10:45:11Z", "type": "commit"}]}