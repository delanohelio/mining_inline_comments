{"pr_number": 2486, "pr_title": "optimize:  refactor server handle request process logic from client. ", "pr_createdAt": "2020-03-30T15:41:27Z", "pr_url": "https://github.com/seata/seata/pull/2486", "timeline": [{"oid": "01b1deb5ef0e023152b05fb1b1a2f3d84466c08c", "url": "https://github.com/seata/seata/commit/01b1deb5ef0e023152b05fb1b1a2f3d84466c08c", "message": "optimize: refactoring rpc.", "committedDate": "2020-03-28T16:00:50Z", "type": "commit"}, {"oid": "5841bb98cfcefe566728496ffaf362034f73feee", "url": "https://github.com/seata/seata/commit/5841bb98cfcefe566728496ffaf362034f73feee", "message": "fix MessageFutureTest#testFieldSetGet.", "committedDate": "2020-03-28T16:24:56Z", "type": "commit"}, {"oid": "969a50f01eb86626726f78d64804d92fa15ce95c", "url": "https://github.com/seata/seata/commit/969a50f01eb86626726f78d64804d92fa15ce95c", "message": "fix RpcMessageTest#testFieldGetSetFromJson.", "committedDate": "2020-03-28T16:29:05Z", "type": "commit"}, {"oid": "4719ec127b755c64326846c3cdb4e1d1a550775f", "url": "https://github.com/seata/seata/commit/4719ec127b755c64326846c3cdb4e1d1a550775f", "message": "fix NullPointException when pair is null.", "committedDate": "2020-03-29T05:48:48Z", "type": "commit"}, {"oid": "f738b5339c177bcf2318a3c75c71737096a812da", "url": "https://github.com/seata/seata/commit/f738b5339c177bcf2318a3c75c71737096a812da", "message": "get type comment.", "committedDate": "2020-03-29T06:35:46Z", "type": "commit"}, {"oid": "8a8d470a38b29fbbd375f28319e70cb00d69168c", "url": "https://github.com/seata/seata/commit/8a8d470a38b29fbbd375f28319e70cb00d69168c", "message": "optimize: refactoring rpc phase3.", "committedDate": "2020-03-30T15:36:00Z", "type": "commit"}, {"oid": "7706cfabca17dcd2353fd23790a33bb3818875de", "url": "https://github.com/seata/seata/commit/7706cfabca17dcd2353fd23790a33bb3818875de", "message": "1.fix remoting lock;2.add HeartbeatMessage processor.", "committedDate": "2020-03-30T16:00:45Z", "type": "commit"}, {"oid": "a22b12173bc417cd9d655bb96f1d806d36302266", "url": "https://github.com/seata/seata/commit/a22b12173bc417cd9d655bb96f1d806d36302266", "message": "Merge branch 'refactoring-rpc-phase2' into refactoring-rpc-phase3", "committedDate": "2020-03-30T16:03:37Z", "type": "commit"}, {"oid": "7dd8486c66c2f31990ab85fa68344830ce798b6d", "url": "https://github.com/seata/seata/commit/7dd8486c66c2f31990ab85fa68344830ce798b6d", "message": "optimize process", "committedDate": "2020-04-01T04:06:40Z", "type": "commit"}, {"oid": "578053a8bace0a765522e7bef61257a96045b05a", "url": "https://github.com/seata/seata/commit/578053a8bace0a765522e7bef61257a96045b05a", "message": "Merge branch 'refactoring-rpc-phase2' into refactoring-rpc-phase3\n\n# Conflicts:\n#\tcore/src/main/java/io/seata/core/rpc/netty/AbstractRpcRemoting.java", "committedDate": "2020-04-01T04:08:04Z", "type": "commit"}, {"oid": "651a37e23e78aca9a038bd5b9541e257a27d2448", "url": "https://github.com/seata/seata/commit/651a37e23e78aca9a038bd5b9541e257a27d2448", "message": "optimize process", "committedDate": "2020-04-01T04:08:46Z", "type": "commit"}, {"oid": "690bd806895d347fe15b77c9e47bd70daf2d0e3f", "url": "https://github.com/seata/seata/commit/690bd806895d347fe15b77c9e47bd70daf2d0e3f", "message": "optimize process", "committedDate": "2020-04-01T04:10:13Z", "type": "commit"}, {"oid": "1b7b0d2b62abcda60af841db82dc625b72cb1804", "url": "https://github.com/seata/seata/commit/1b7b0d2b62abcda60af841db82dc625b72cb1804", "message": "optimize process", "committedDate": "2020-04-01T04:10:33Z", "type": "commit"}, {"oid": "f04865005a3a6607a2cae0472b3e5a1b54a5e0c5", "url": "https://github.com/seata/seata/commit/f04865005a3a6607a2cae0472b3e5a1b54a5e0c5", "message": "Merge branch 'refactoring-rpc-phase2' into refactoring-rpc-phase3", "committedDate": "2020-04-01T04:10:44Z", "type": "commit"}, {"oid": "ab2406e177ec7150128f5188882412c83db4b88f", "url": "https://github.com/seata/seata/commit/ab2406e177ec7150128f5188882412c83db4b88f", "message": "optimize process", "committedDate": "2020-04-01T04:13:21Z", "type": "commit"}, {"oid": "31dda60a98c37cd60feb7271b50492e424f3aac0", "url": "https://github.com/seata/seata/commit/31dda60a98c37cd60feb7271b50492e424f3aac0", "message": "Merge branch 'refactoring-rpc-phase2' into refactoring-rpc-phase3", "committedDate": "2020-04-01T04:13:43Z", "type": "commit"}, {"oid": "8d0a2f35b3c9304c9c9878451d936c611a381b84", "url": "https://github.com/seata/seata/commit/8d0a2f35b3c9304c9c9878451d936c611a381b84", "message": "optimize process", "committedDate": "2020-04-01T04:17:42Z", "type": "commit"}, {"oid": "e626fe9b5c9926a24b14470da05ba46d3c498621", "url": "https://github.com/seata/seata/commit/e626fe9b5c9926a24b14470da05ba46d3c498621", "message": "optimize process", "committedDate": "2020-04-01T04:41:09Z", "type": "commit"}, {"oid": "19ec71f69f19b1696da8681f170fc7292ab296f1", "url": "https://github.com/seata/seata/commit/19ec71f69f19b1696da8681f170fc7292ab296f1", "message": "Merge branch 'refactoring-rpc-phase2' into refactoring-rpc-phase3", "committedDate": "2020-04-01T04:43:33Z", "type": "commit"}, {"oid": "0cbaee14d8d718b83487db88536e19ca58a6468d", "url": "https://github.com/seata/seata/commit/0cbaee14d8d718b83487db88536e19ca58a6468d", "message": "Add Heartbeat MessageType.", "committedDate": "2020-04-01T04:54:54Z", "type": "commit"}, {"oid": "d325d96b530ef6c2da220e9f6acb4831df749353", "url": "https://github.com/seata/seata/commit/d325d96b530ef6c2da220e9f6acb4831df749353", "message": "Merge branch 'refactoring-rpc-phase2' into refactoring-rpc-phase3", "committedDate": "2020-04-01T04:55:16Z", "type": "commit"}, {"oid": "1b64e4a2971ccf1fc922f85a961fb027a6b49bd4", "url": "https://github.com/seata/seata/commit/1b64e4a2971ccf1fc922f85a961fb027a6b49bd4", "message": "optimize do process logic", "committedDate": "2020-04-01T06:52:54Z", "type": "commit"}, {"oid": "c1f775bf59e2074fcd8ded5f5652370a145857a5", "url": "https://github.com/seata/seata/commit/c1f775bf59e2074fcd8ded5f5652370a145857a5", "message": "Merge branch 'refactoring-rpc-phase2' into refactoring-rpc-phase3", "committedDate": "2020-04-01T06:53:10Z", "type": "commit"}, {"oid": "e8accee14e63adb5bdd868740b460b206ff8c89d", "url": "https://github.com/seata/seata/commit/e8accee14e63adb5bdd868740b460b206ff8c89d", "message": "optimize do process logic", "committedDate": "2020-04-01T07:02:34Z", "type": "commit"}, {"oid": "ad86a6705d79c27226cd173eeab1dacade99fdb0", "url": "https://github.com/seata/seata/commit/ad86a6705d79c27226cd173eeab1dacade99fdb0", "message": "Merge branch 'refactoring-rpc-phase2' into refactoring-rpc-phase3", "committedDate": "2020-04-01T07:02:49Z", "type": "commit"}, {"oid": "28ab6dddd6f0a5e8d8e1530dd051337cbc12aa2b", "url": "https://github.com/seata/seata/commit/28ab6dddd6f0a5e8d8e1530dd051337cbc12aa2b", "message": "fix ClientHeartbeatMessageProcessor", "committedDate": "2020-04-01T07:18:36Z", "type": "commit"}, {"oid": "af6bf70df92e8df2a5550bf88a3c07b36c733103", "url": "https://github.com/seata/seata/commit/af6bf70df92e8df2a5550bf88a3c07b36c733103", "message": "Merge branch 'refactoring-rpc-phase2' into refactoring-rpc-phase3", "committedDate": "2020-04-01T07:18:55Z", "type": "commit"}, {"oid": "5595047b77a9083561a77f632b86de83d1e6ba3a", "url": "https://github.com/seata/seata/commit/5595047b77a9083561a77f632b86de83d1e6ba3a", "message": "fix HeartbeatMessageProcessor name", "committedDate": "2020-04-01T07:22:41Z", "type": "commit"}, {"oid": "69dafb9b4b15b38f5b6f8647c12273374855b4db", "url": "https://github.com/seata/seata/commit/69dafb9b4b15b38f5b6f8647c12273374855b4db", "message": "registry processor before init client.", "committedDate": "2020-04-01T13:28:24Z", "type": "commit"}, {"oid": "82d82a29f5e7b717874446b488444a64c21546db", "url": "https://github.com/seata/seata/commit/82d82a29f5e7b717874446b488444a64c21546db", "message": "Merge branch 'refactoring-rpc-phase2' into refactoring-rpc-phase3", "committedDate": "2020-04-01T13:29:04Z", "type": "commit"}, {"oid": "79ce3e310cbcaa2e99ce4980018f0dcd72e64fac", "url": "https://github.com/seata/seata/commit/79ce3e310cbcaa2e99ce4980018f0dcd72e64fac", "message": "TrxMessageProcessor Comment.", "committedDate": "2020-04-03T09:06:42Z", "type": "commit"}, {"oid": "88aeec5ee78bd369708628a8473042d8fb0090e4", "url": "https://github.com/seata/seata/commit/88aeec5ee78bd369708628a8473042d8fb0090e4", "message": "TrxMessageProcessor Comment.", "committedDate": "2020-04-03T09:11:28Z", "type": "commit"}, {"oid": "43a0daf2095d13833a400729d6a554db7cc0fad6", "url": "https://github.com/seata/seata/commit/43a0daf2095d13833a400729d6a554db7cc0fad6", "message": "rm processor comment.", "committedDate": "2020-04-03T09:13:52Z", "type": "commit"}, {"oid": "bc83e81793580f2d4fbc06b081d1f114b6d27e7a", "url": "https://github.com/seata/seata/commit/bc83e81793580f2d4fbc06b081d1f114b6d27e7a", "message": "Merge branch 'refactoring-rpc-phase2' into refactoring-rpc-phase3", "committedDate": "2020-04-03T09:14:11Z", "type": "commit"}, {"oid": "ba00a8d73be8fa0a233d7d0724fa050395e7abbb", "url": "https://github.com/seata/seata/commit/ba00a8d73be8fa0a233d7d0724fa050395e7abbb", "message": "Merge branch 'develop' into refactoring-rpc-phase2\n\n# Conflicts:\n#\tcore/src/main/java/io/seata/core/rpc/netty/RpcClientBootstrap.java", "committedDate": "2020-04-10T11:48:40Z", "type": "commit"}, {"oid": "01a8b63fa73b23dd0f138c2ce7eaecb51bfaa9e2", "url": "https://github.com/seata/seata/commit/01a8b63fa73b23dd0f138c2ce7eaecb51bfaa9e2", "message": "Merge branch 'refactoring-rpc-phase2' into refactoring-rpc-phase3", "committedDate": "2020-04-10T11:49:09Z", "type": "commit"}, {"oid": "3011df281ae0b78c7b3e2259f3aac26c81192a3d", "url": "https://github.com/seata/seata/commit/3011df281ae0b78c7b3e2259f3aac26c81192a3d", "message": "optimize processor.", "committedDate": "2020-04-11T08:49:59Z", "type": "commit"}, {"oid": "43125b7b90779b88f77d2b8d71d0026a08d44a01", "url": "https://github.com/seata/seata/commit/43125b7b90779b88f77d2b8d71d0026a08d44a01", "message": "optimize processor.", "committedDate": "2020-04-11T09:03:30Z", "type": "commit"}, {"oid": "54c0af8ea1148f2a5c4b5d54249043b8af2e9cc8", "url": "https://github.com/seata/seata/commit/54c0af8ea1148f2a5c4b5d54249043b8af2e9cc8", "message": "optimize processor.", "committedDate": "2020-04-11T09:16:57Z", "type": "commit"}, {"oid": "e2aa444ef951aaac417a44feb4cec0f94b95c02b", "url": "https://github.com/seata/seata/commit/e2aa444ef951aaac417a44feb4cec0f94b95c02b", "message": "optimize processor.", "committedDate": "2020-04-11T09:20:09Z", "type": "commit"}, {"oid": "f3223b8f425b68d2168eb77c528d1de1300decdc", "url": "https://github.com/seata/seata/commit/f3223b8f425b68d2168eb77c528d1de1300decdc", "message": "optimize processor.", "committedDate": "2020-04-11T13:05:50Z", "type": "commit"}, {"oid": "3b74cd9f51e0be479b38a256214ca64850009085", "url": "https://github.com/seata/seata/commit/3b74cd9f51e0be479b38a256214ca64850009085", "message": "Merge branch 'develop' into refactoring-rpc-phase3", "committedDate": "2020-05-02T11:19:58Z", "type": "commit"}, {"oid": "b139a29069a1931559e3cac7cb8c824690e76ff5", "url": "https://github.com/seata/seata/commit/b139a29069a1931559e3cac7cb8c824690e76ff5", "message": "Merge branch 'develop' into refactoring-rpc-phase3", "committedDate": "2020-05-14T02:35:49Z", "type": "commit"}, {"oid": "5a1bcd06cb4a9d20e8164dab5e4408406d09b879", "url": "https://github.com/seata/seata/commit/5a1bcd06cb4a9d20e8164dab5e4408406d09b879", "message": "Merge branch 'develop' into refactoring-rpc-phase3\n\n# Conflicts:\n#\tcore/src/main/java/io/seata/core/rpc/netty/RpcServer.java\n#\tserver/src/main/java/io/seata/server/coordinator/DefaultCore.java", "committedDate": "2020-05-14T12:11:17Z", "type": "commit"}, {"oid": "bce80f0d4dcd26cc9c2ab268f658d37e11a9f81a", "url": "https://github.com/seata/seata/commit/bce80f0d4dcd26cc9c2ab268f658d37e11a9f81a", "message": "Merge branch 'refactoring-rpc-phase3' of https://github.com/objcoding/seata into refactoring-rpc-phase3\n\n# Conflicts:\n#\tcore/src/main/java/io/seata/core/rpc/netty/RpcServer.java\n#\tserver/src/main/java/io/seata/server/coordinator/DefaultCore.java", "committedDate": "2020-05-14T13:21:23Z", "type": "commit"}, {"oid": "4c845b0c05a480932830deecca107c71348548f9", "url": "https://github.com/seata/seata/commit/4c845b0c05a480932830deecca107c71348548f9", "message": "Merge branch 'develop' into refactoring-rpc-phase3\n\n# Conflicts:\n#\tcore/src/main/java/io/seata/core/rpc/RemotingBootstrap.java\n#\tcore/src/main/java/io/seata/core/rpc/RemotingClient.java\n#\tcore/src/main/java/io/seata/core/rpc/netty/AbstractRpcRemoting.java\n#\tcore/src/main/java/io/seata/core/rpc/netty/AbstractRpcRemotingClient.java\n#\tcore/src/main/java/io/seata/core/rpc/netty/RmRpcClient.java\n#\tcore/src/main/java/io/seata/core/rpc/netty/TmRpcClient.java\n#\trm/src/main/java/io/seata/rm/RMClient.java", "committedDate": "2020-05-19T12:49:06Z", "type": "commit"}, {"oid": "02dd427b140cb148a43247cc99829ea37f722903", "url": "https://github.com/seata/seata/commit/02dd427b140cb148a43247cc99829ea37f722903", "message": "add server processor.", "committedDate": "2020-05-19T13:30:24Z", "type": "commit"}, {"oid": "bb5d0b378db4bd0c9ba2f67606976374c83dc218", "url": "https://github.com/seata/seata/commit/bb5d0b378db4bd0c9ba2f67606976374c83dc218", "message": "registerProcessor", "committedDate": "2020-05-19T13:37:20Z", "type": "commit"}, {"oid": "e835fefd0e8b44707ed986e9b90f6f7fb19d6c5e", "url": "https://github.com/seata/seata/commit/e835fefd0e8b44707ed986e9b90f6f7fb19d6c5e", "message": "Modify notes about version", "committedDate": "2020-05-19T13:43:46Z", "type": "commit"}, {"oid": "0b8cd3c20d21dc6fe84374830e4fed91cabaaf77", "url": "https://github.com/seata/seata/commit/0b8cd3c20d21dc6fe84374830e4fed91cabaaf77", "message": "Merge branch 'develop' into refactoring-rpc-phase3", "committedDate": "2020-05-20T01:56:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU2MDkxMg==", "url": "https://github.com/seata/seata/pull/2486#discussion_r428560912", "bodyText": "What is this.", "author": "l81893521", "createdAt": "2020-05-21T10:03:36Z", "path": "server/src/main/java/io/seata/server/coordinator/DefaultCore.java", "diffHunk": "@@ -83,7 +83,7 @@ public AbstractCore getCore(BranchType branchType) {\n \n     /**\n      * only for mock\n-     *\n+     *\u00b7", "originalCommit": "0b8cd3c20d21dc6fe84374830e4fed91cabaaf77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYxNjM1Nw==", "url": "https://github.com/seata/seata/pull/2486#discussion_r429616357", "bodyText": "Done.", "author": "objcoding", "createdAt": "2020-05-24T09:20:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU2MDkxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU2NTI3MQ==", "url": "https://github.com/seata/seata/pull/2486#discussion_r428565271", "bodyText": "You can put the registerProcessor() to parent, and use super.registerProcessor(), just look like the #2477", "author": "l81893521", "createdAt": "2020-05-21T10:13:38Z", "path": "core/src/main/java/io/seata/core/rpc/netty/RpcServer.java", "diffHunk": "@@ -167,13 +172,48 @@ public Object sendSyncRequest(String resourceId, String clientId, Object message\n     /**\n      * Send request with response object.\n      *\n-     * @param channel   the channel\n-     * @param message    the msg\n+     * @param channel the channel\n+     * @param message the msg\n      * @return the object\n      * @throws TimeoutException the timeout exception\n      */\n     @Override\n     public Object sendASyncRequest(Channel channel, Object message) throws TimeoutException {\n         return sendAsyncRequestWithoutResponse(channel, message);\n     }\n+\n+    @Override\n+    public void registerProcessor(int messageType, RemotingProcessor processor, ExecutorService executor) {\n+        Pair<RemotingProcessor, ExecutorService> pair = new Pair<>(processor, executor);\n+        this.processorTable.put(messageType, pair);\n+    }\n+\n+    private void registerProcessor() {\n+        // 1. registry on request message processor\n+        ServerOnRequestProcessor onRequestProcessor =\n+            new ServerOnRequestProcessor(this, getTransactionMessageHandler());\n+        registerProcessor(MessageType.TYPE_BRANCH_REGISTER, onRequestProcessor, messageExecutor);", "originalCommit": "0b8cd3c20d21dc6fe84374830e4fed91cabaaf77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYxNjYwNw==", "url": "https://github.com/seata/seata/pull/2486#discussion_r429616607", "bodyText": "Done.", "author": "objcoding", "createdAt": "2020-05-24T09:23:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU2NTI3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU4NDA0OA==", "url": "https://github.com/seata/seata/pull/2486#discussion_r428584048", "bodyText": "The logic in here may has some problem. The original logic no matter MergedWarpMessage or AbstractResultMessage or AbstractMessage, the all have log. but now no log here.", "author": "l81893521", "createdAt": "2020-05-21T10:58:47Z", "path": "core/src/main/java/io/seata/core/rpc/processor/server/ServerOnResponseProcessor.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.rpc.processor.server;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.seata.core.protocol.AbstractResultMessage;\n+import io.seata.core.protocol.MergeResultMessage;\n+import io.seata.core.protocol.MessageFuture;\n+import io.seata.core.protocol.RpcMessage;\n+import io.seata.core.protocol.transaction.BranchCommitResponse;\n+import io.seata.core.protocol.transaction.BranchRollbackResponse;\n+import io.seata.core.rpc.ChannelManager;\n+import io.seata.core.rpc.RpcContext;\n+import io.seata.core.rpc.TransactionMessageHandler;\n+import io.seata.core.rpc.processor.RemotingProcessor;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * handle RM/TM response message.\n+ * <p>\n+ * message type:\n+ * RM:\n+ * 1) {@link BranchCommitResponse}\n+ * 2) {@link BranchRollbackResponse}\n+ *\n+ * @author zhangchenghui.dev@gmail.com\n+ * @since 1.3.0\n+ */\n+public class ServerOnResponseProcessor implements RemotingProcessor {\n+\n+    private TransactionMessageHandler transactionMessageHandler;\n+\n+    private ConcurrentHashMap<Integer, MessageFuture> futures;\n+\n+    public ServerOnResponseProcessor(TransactionMessageHandler transactionMessageHandler,\n+                                     ConcurrentHashMap<Integer, MessageFuture> futures) {\n+        this.transactionMessageHandler = transactionMessageHandler;\n+        this.futures = futures;\n+    }\n+\n+    @Override\n+    public void process(ChannelHandlerContext ctx, RpcMessage rpcMessage) throws Exception {\n+        MessageFuture messageFuture = null;", "originalCommit": "0b8cd3c20d21dc6fe84374830e4fed91cabaaf77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkyMTA1MA==", "url": "https://github.com/seata/seata/pull/2486#discussion_r429921050", "bodyText": "ok, I specifically extracted the log printing related logic and made a BatchLogHandler.", "author": "objcoding", "createdAt": "2020-05-25T12:57:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU4NDA0OA=="}], "type": "inlineReview"}, {"oid": "cb0611a798640abc408b6cd7df70607f42d40975", "url": "https://github.com/seata/seata/commit/cb0611a798640abc408b6cd7df70607f42d40975", "message": "Merge branch 'develop' into refactoring-rpc-phase3", "committedDate": "2020-05-23T10:30:32Z", "type": "commit"}, {"oid": "ce0e250d9fc414ed7bbd69eafa340d527702250c", "url": "https://github.com/seata/seata/commit/ce0e250d9fc414ed7bbd69eafa340d527702250c", "message": "fix comment", "committedDate": "2020-05-23T14:22:55Z", "type": "commit"}, {"oid": "721bd327805f86e8e7414a9c4746c412d2d6fe39", "url": "https://github.com/seata/seata/commit/721bd327805f86e8e7414a9c4746c412d2d6fe39", "message": "Merge remote-tracking branch 'origin/refactoring-rpc-phase3' into refactoring-rpc-phase3", "committedDate": "2020-05-23T14:23:11Z", "type": "commit"}, {"oid": "ab75196d842652d9958d2c6e382adc68404392dd", "url": "https://github.com/seata/seata/commit/ab75196d842652d9958d2c6e382adc68404392dd", "message": "super registerProcessor", "committedDate": "2020-05-24T09:23:17Z", "type": "commit"}, {"oid": "d44c53c98f2f29a331b742680c6de6f0bf703e21", "url": "https://github.com/seata/seata/commit/d44c53c98f2f29a331b742680c6de6f0bf703e21", "message": "add BatchLogHandler to handle ServerOnRequestProcessor and ServerOnResponseProcessor log print.", "committedDate": "2020-05-25T12:55:19Z", "type": "commit"}, {"oid": "fd999989fa3c3200d46b2af180dde6e05e003b94", "url": "https://github.com/seata/seata/commit/fd999989fa3c3200d46b2af180dde6e05e003b94", "message": "exchange registry processor order", "committedDate": "2020-05-25T13:13:36Z", "type": "commit"}, {"oid": "50e11268196164a0dc647818a2f11936028a0d3a", "url": "https://github.com/seata/seata/commit/50e11268196164a0dc647818a2f11936028a0d3a", "message": "exchange register serverHandler order", "committedDate": "2020-05-25T13:14:28Z", "type": "commit"}, {"oid": "79af843e8ee2f88f385c57a44d45b4958fc963ff", "url": "https://github.com/seata/seata/commit/79af843e8ee2f88f385c57a44d45b4958fc963ff", "message": "handle ServerOnResponseProcessor log print", "committedDate": "2020-05-26T01:30:56Z", "type": "commit"}, {"oid": "79af843e8ee2f88f385c57a44d45b4958fc963ff", "url": "https://github.com/seata/seata/commit/79af843e8ee2f88f385c57a44d45b4958fc963ff", "message": "handle ServerOnResponseProcessor log print", "committedDate": "2020-05-26T01:30:56Z", "type": "forcePushed"}, {"oid": "3be4c10e8d43a9725ed2ad4479b8fafe3e49014f", "url": "https://github.com/seata/seata/commit/3be4c10e8d43a9725ed2ad4479b8fafe3e49014f", "message": "exchange registry processor order", "committedDate": "2020-05-26T01:32:47Z", "type": "commit"}, {"oid": "4e835e2e909be1a7ba3bf7bfd17dbdbdf795adeb", "url": "https://github.com/seata/seata/commit/4e835e2e909be1a7ba3bf7bfd17dbdbdf795adeb", "message": "exchange register serverHandler order", "committedDate": "2020-05-26T01:32:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYyNTcyOQ==", "url": "https://github.com/seata/seata/pull/2486#discussion_r431625729", "bodyText": "I think you can remove this \"if\"", "author": "l81893521", "createdAt": "2020-05-28T07:09:44Z", "path": "core/src/main/java/io/seata/core/rpc/processor/server/ServerOnResponseProcessor.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.rpc.processor.server;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.seata.common.thread.NamedThreadFactory;\n+import io.seata.common.util.NetUtil;\n+import io.seata.core.protocol.AbstractResultMessage;\n+import io.seata.core.protocol.MergeResultMessage;\n+import io.seata.core.protocol.MessageFuture;\n+import io.seata.core.protocol.RpcMessage;\n+import io.seata.core.protocol.transaction.BranchCommitResponse;\n+import io.seata.core.protocol.transaction.BranchRollbackResponse;\n+import io.seata.core.rpc.ChannelManager;\n+import io.seata.core.rpc.RpcContext;\n+import io.seata.core.rpc.TransactionMessageHandler;\n+import io.seata.core.rpc.processor.RemotingProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * handle RM/TM response message.\n+ * <p>\n+ * message type:\n+ * RM:\n+ * 1) {@link BranchCommitResponse}\n+ * 2) {@link BranchRollbackResponse}\n+ *\n+ * @author zhangchenghui.dev@gmail.com\n+ * @since 1.3.0\n+ */\n+public class ServerOnResponseProcessor implements RemotingProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ServerOnRequestProcessor.class);\n+\n+    private TransactionMessageHandler transactionMessageHandler;\n+\n+    private ConcurrentHashMap<Integer, MessageFuture> futures;\n+\n+    private static BlockingQueue<String> LOG_QUEUE = new LinkedBlockingQueue<>();\n+\n+    private static final int MAX_LOG_SEND_THREAD = 1;\n+    private static final int MAX_LOG_TAKE_SIZE = 1024;\n+    private static final long KEEP_ALIVE_TIME = 0L;\n+    private static final String THREAD_PREFIX = \"batchLoggerPrint\";\n+    private static final long BUSY_SLEEP_MILLS = 5L;\n+\n+    public ServerOnResponseProcessor(TransactionMessageHandler transactionMessageHandler,\n+                                     ConcurrentHashMap<Integer, MessageFuture> futures) {\n+        this.transactionMessageHandler = transactionMessageHandler;\n+        this.futures = futures;\n+        init();\n+    }\n+\n+    @Override\n+    public void process(ChannelHandlerContext ctx, RpcMessage rpcMessage) throws Exception {\n+        MessageFuture messageFuture = null;\n+        if (!(rpcMessage.getBody() instanceof MergeResultMessage)) {", "originalCommit": "4e835e2e909be1a7ba3bf7bfd17dbdbdf795adeb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU4OTU1Mw==", "url": "https://github.com/seata/seata/pull/2486#discussion_r438589553", "bodyText": "Done.", "author": "objcoding", "createdAt": "2020-06-11T07:18:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYyNTcyOQ=="}], "type": "inlineReview"}, {"oid": "926b16acb3721918a9055f69c9a13709b4811b57", "url": "https://github.com/seata/seata/commit/926b16acb3721918a9055f69c9a13709b4811b57", "message": "Merge branch 'develop' into refactoring-rpc-phase3", "committedDate": "2020-05-28T07:23:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM1MjkwMw==", "url": "https://github.com/seata/seata/pull/2486#discussion_r436352903", "bodyText": "ConcurrentMap", "author": "slievrly", "createdAt": "2020-06-07T11:27:13Z", "path": "core/src/main/java/io/seata/core/rpc/processor/server/ServerOnResponseProcessor.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.rpc.processor.server;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.seata.common.thread.NamedThreadFactory;\n+import io.seata.common.util.NetUtil;\n+import io.seata.core.protocol.AbstractResultMessage;\n+import io.seata.core.protocol.MergeResultMessage;\n+import io.seata.core.protocol.MessageFuture;\n+import io.seata.core.protocol.RpcMessage;\n+import io.seata.core.protocol.transaction.BranchCommitResponse;\n+import io.seata.core.protocol.transaction.BranchRollbackResponse;\n+import io.seata.core.rpc.ChannelManager;\n+import io.seata.core.rpc.RpcContext;\n+import io.seata.core.rpc.TransactionMessageHandler;\n+import io.seata.core.rpc.processor.RemotingProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * handle RM/TM response message.\n+ * <p>\n+ * message type:\n+ * RM:\n+ * 1) {@link BranchCommitResponse}\n+ * 2) {@link BranchRollbackResponse}\n+ *\n+ * @author zhangchenghui.dev@gmail.com\n+ * @since 1.3.0\n+ */\n+public class ServerOnResponseProcessor implements RemotingProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ServerOnRequestProcessor.class);\n+\n+    private TransactionMessageHandler transactionMessageHandler;\n+\n+    private ConcurrentHashMap<Integer, MessageFuture> futures;\n+\n+    private static BlockingQueue<String> LOG_QUEUE = new LinkedBlockingQueue<>();\n+\n+    private static final int MAX_LOG_SEND_THREAD = 1;\n+    private static final int MAX_LOG_TAKE_SIZE = 1024;\n+    private static final long KEEP_ALIVE_TIME = 0L;\n+    private static final String THREAD_PREFIX = \"batchLoggerPrint\";\n+    private static final long BUSY_SLEEP_MILLS = 5L;\n+\n+    public ServerOnResponseProcessor(TransactionMessageHandler transactionMessageHandler,\n+                                     ConcurrentHashMap<Integer, MessageFuture> futures) {", "originalCommit": "926b16acb3721918a9055f69c9a13709b4811b57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUwNTIwOA==", "url": "https://github.com/seata/seata/pull/2486#discussion_r438505208", "bodyText": "Done.", "author": "objcoding", "createdAt": "2020-06-11T02:16:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM1MjkwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM1MzI1NA==", "url": "https://github.com/seata/seata/pull/2486#discussion_r436353254", "bodyText": "Whether the batch log processing of ServerOnResponseProcessor and ServerOnRequestProcessor can be abstracted to the upper level", "author": "slievrly", "createdAt": "2020-06-07T11:32:01Z", "path": "core/src/main/java/io/seata/core/rpc/processor/server/ServerOnResponseProcessor.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.rpc.processor.server;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.seata.common.thread.NamedThreadFactory;\n+import io.seata.common.util.NetUtil;\n+import io.seata.core.protocol.AbstractResultMessage;\n+import io.seata.core.protocol.MergeResultMessage;\n+import io.seata.core.protocol.MessageFuture;\n+import io.seata.core.protocol.RpcMessage;\n+import io.seata.core.protocol.transaction.BranchCommitResponse;\n+import io.seata.core.protocol.transaction.BranchRollbackResponse;\n+import io.seata.core.rpc.ChannelManager;\n+import io.seata.core.rpc.RpcContext;\n+import io.seata.core.rpc.TransactionMessageHandler;\n+import io.seata.core.rpc.processor.RemotingProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * handle RM/TM response message.\n+ * <p>\n+ * message type:\n+ * RM:\n+ * 1) {@link BranchCommitResponse}\n+ * 2) {@link BranchRollbackResponse}\n+ *\n+ * @author zhangchenghui.dev@gmail.com\n+ * @since 1.3.0\n+ */\n+public class ServerOnResponseProcessor implements RemotingProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ServerOnRequestProcessor.class);\n+\n+    private TransactionMessageHandler transactionMessageHandler;\n+\n+    private ConcurrentHashMap<Integer, MessageFuture> futures;\n+\n+    private static BlockingQueue<String> LOG_QUEUE = new LinkedBlockingQueue<>();\n+\n+    private static final int MAX_LOG_SEND_THREAD = 1;\n+    private static final int MAX_LOG_TAKE_SIZE = 1024;\n+    private static final long KEEP_ALIVE_TIME = 0L;\n+    private static final String THREAD_PREFIX = \"batchLoggerPrint\";\n+    private static final long BUSY_SLEEP_MILLS = 5L;\n+\n+    public ServerOnResponseProcessor(TransactionMessageHandler transactionMessageHandler,\n+                                     ConcurrentHashMap<Integer, MessageFuture> futures) {\n+        this.transactionMessageHandler = transactionMessageHandler;\n+        this.futures = futures;\n+        init();\n+    }\n+\n+    @Override\n+    public void process(ChannelHandlerContext ctx, RpcMessage rpcMessage) throws Exception {\n+        MessageFuture messageFuture = null;\n+        if (!(rpcMessage.getBody() instanceof MergeResultMessage)) {\n+            messageFuture = futures.remove(rpcMessage.getId());\n+        }\n+        if (messageFuture != null) {\n+            messageFuture.setResultMessage(rpcMessage.getBody());\n+        } else {\n+            if (ChannelManager.isRegistered(ctx.channel())) {\n+                onResponseMessage(ctx, rpcMessage);\n+            } else {\n+                try {\n+                    if (LOGGER.isInfoEnabled()) {\n+                        LOGGER.info(\"closeChannelHandlerContext channel:\" + ctx.channel());\n+                    }\n+                    ctx.disconnect();\n+                    ctx.close();\n+                } catch (Exception exx) {\n+                    LOGGER.error(exx.getMessage());\n+                }\n+                if (LOGGER.isInfoEnabled()) {\n+                    LOGGER.info(String.format(\"close a unhandled connection! [%s]\", ctx.channel().toString()));\n+                }\n+            }\n+        }\n+    }\n+\n+    private void onResponseMessage(ChannelHandlerContext ctx, RpcMessage rpcMessage) {\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"server received:{},clientIp:{},vgroup:{}\", rpcMessage.getBody(),\n+                NetUtil.toIpAddress(ctx.channel().remoteAddress()),\n+                ChannelManager.getContextFromIdentified(ctx.channel()).getTransactionServiceGroup());\n+        } else {\n+            try {\n+                LOG_QUEUE.put(rpcMessage.getBody() + \",clientIp:\" + NetUtil.toIpAddress(ctx.channel().remoteAddress()) + \",vgroup:\"\n+                        + ChannelManager.getContextFromIdentified(ctx.channel()).getTransactionServiceGroup());\n+            } catch (InterruptedException e) {\n+                LOGGER.error(\"put message to logQueue error: {}\", e.getMessage(), e);\n+            }\n+        }\n+        if (rpcMessage.getBody() instanceof AbstractResultMessage) {\n+            RpcContext rpcContext = ChannelManager.getContextFromIdentified(ctx.channel());\n+            transactionMessageHandler.onResponse((AbstractResultMessage) rpcMessage.getBody(), rpcContext);\n+        }\n+    }\n+\n+\n+    /**\n+     * Init.\n+     */\n+    private void init() {\n+        ExecutorService mergeSendExecutorService = new ThreadPoolExecutor(MAX_LOG_SEND_THREAD, MAX_LOG_SEND_THREAD,\n+            KEEP_ALIVE_TIME, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>(),\n+            new NamedThreadFactory(THREAD_PREFIX, MAX_LOG_SEND_THREAD, true));\n+        mergeSendExecutorService.submit(new BatchLogRunnable());\n+    }\n+\n+    /**\n+     * The type Batch log runnable.\n+     */\n+    static class BatchLogRunnable implements Runnable {", "originalCommit": "926b16acb3721918a9055f69c9a13709b4811b57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUwNDk4NA==", "url": "https://github.com/seata/seata/pull/2486#discussion_r438504984", "bodyText": "My approach:\nExtract log processing logic into BatchLogHandler instead of abstracted to the upper level.", "author": "objcoding", "createdAt": "2020-06-11T02:15:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM1MzI1NA=="}], "type": "inlineReview"}, {"oid": "4bedcc226b7d3384da09785fb796e06a535c0d84", "url": "https://github.com/seata/seata/commit/4bedcc226b7d3384da09785fb796e06a535c0d84", "message": "optimize trace logger.", "committedDate": "2020-06-09T11:02:47Z", "type": "commit"}, {"oid": "9dd042da907446208371fb849481a28797d715f0", "url": "https://github.com/seata/seata/commit/9dd042da907446208371fb849481a28797d715f0", "message": "keep origin logic", "committedDate": "2020-06-09T11:16:16Z", "type": "commit"}, {"oid": "ea3116b0354d0633ab99fa52999611abb7ad66b6", "url": "https://github.com/seata/seata/commit/ea3116b0354d0633ab99fa52999611abb7ad66b6", "message": "change meaning of rate", "committedDate": "2020-06-10T05:54:15Z", "type": "commit"}, {"oid": "88aae89164461f28a6ea6a182c20f89e5e6dbe3a", "url": "https://github.com/seata/seata/commit/88aae89164461f28a6ea6a182c20f89e5e6dbe3a", "message": "Merge branch 'add-batch-log-handler' into refactoring-rpc-phase3\n\n# Conflicts:\n#\tcore/src/main/java/io/seata/core/rpc/processor/server/ServerOnRequestProcessor.java\n#\tcore/src/main/java/io/seata/core/rpc/processor/server/ServerOnResponseProcessor.java", "committedDate": "2020-06-11T02:13:37Z", "type": "commit"}, {"oid": "7e87d9b165f4eb29ab5f2f88e13aa02e7a610e5e", "url": "https://github.com/seata/seata/commit/7e87d9b165f4eb29ab5f2f88e13aa02e7a610e5e", "message": "ConcurrentMap", "committedDate": "2020-06-11T02:16:01Z", "type": "commit"}, {"oid": "d8b91c7fef2f3c2fa0cc2fe4d255c5807bb55b6f", "url": "https://github.com/seata/seata/commit/d8b91c7fef2f3c2fa0cc2fe4d255c5807bb55b6f", "message": "put reame.md about rpc interactive content at the top of core module.", "committedDate": "2020-06-11T02:18:03Z", "type": "commit"}, {"oid": "c132f77647a72c65f4f65489207b808542b103c2", "url": "https://github.com/seata/seata/commit/c132f77647a72c65f4f65489207b808542b103c2", "message": "Merge branch 'develop' into refactoring-rpc-phase3", "committedDate": "2020-06-11T02:37:40Z", "type": "commit"}, {"oid": "97d666706eac10e00a346f70e958caffdd6cf0dd", "url": "https://github.com/seata/seata/commit/97d666706eac10e00a346f70e958caffdd6cf0dd", "message": "Merge commit 'refs/pull/2783/head' of https://github.com/seata/seata into refactoring-rpc-phase3", "committedDate": "2020-06-11T05:28:12Z", "type": "commit"}, {"oid": "c0ec38c4b6c005120a8a7f9ae37d160d7adf6c1f", "url": "https://github.com/seata/seata/commit/c0ec38c4b6c005120a8a7f9ae37d160d7adf6c1f", "message": "remove this \"if\"", "committedDate": "2020-06-11T07:16:53Z", "type": "commit"}, {"oid": "9e11eb987dd00188b0cd5f5f1545a97844547b5b", "url": "https://github.com/seata/seata/commit/9e11eb987dd00188b0cd5f5f1545a97844547b5b", "message": "resolve ci", "committedDate": "2020-06-11T07:19:20Z", "type": "commit"}]}