{"pr_number": 2253, "pr_title": "feature:dynamic adjustment grade", "pr_createdAt": "2020-02-16T14:14:02Z", "pr_url": "https://github.com/seata/seata/pull/2253", "timeline": [{"oid": "ebd9796c4b6a40aa309e2debf7bef754cd7a37b2", "url": "https://github.com/seata/seata/commit/ebd9796c4b6a40aa309e2debf7bef754cd7a37b2", "message": "dynamic adjustment grade", "committedDate": "2020-02-16T12:17:39Z", "type": "commit"}, {"oid": "08e128a7a1d1c664a9158d8665e205743a969b8d", "url": "https://github.com/seata/seata/commit/08e128a7a1d1c664a9158d8665e205743a969b8d", "message": "merge seata 1.1", "committedDate": "2020-02-16T12:32:46Z", "type": "commit"}, {"oid": "74d3aa357e0e445737642692bccc8f0f4f2d4731", "url": "https://github.com/seata/seata/commit/74d3aa357e0e445737642692bccc8f0f4f2d4731", "message": "Merge branch 'develop' into develop", "committedDate": "2020-02-19T18:00:55Z", "type": "commit"}, {"oid": "46f4e34c13c16dc004c665e50d81b064a9a78caf", "url": "https://github.com/seata/seata/commit/46f4e34c13c16dc004c665e50d81b064a9a78caf", "message": "Merge branch 'develop' into develop", "committedDate": "2020-02-22T08:10:06Z", "type": "commit"}, {"oid": "9ca91a54203e84969be6adaa4e7da3ddfef8cda1", "url": "https://github.com/seata/seata/commit/9ca91a54203e84969be6adaa4e7da3ddfef8cda1", "message": "Merge pull request #21 from seata/develop\n\nupdate", "committedDate": "2020-02-25T07:02:10Z", "type": "commit"}, {"oid": "35c5483353c368a41168574ef9473cffa1896b82", "url": "https://github.com/seata/seata/commit/35c5483353c368a41168574ef9473cffa1896b82", "message": "Merge branch 'develop' into develop", "committedDate": "2020-03-05T01:46:03Z", "type": "commit"}, {"oid": "458a81edf827915ea9ece2f39b50f0e8d047cf25", "url": "https://github.com/seata/seata/commit/458a81edf827915ea9ece2f39b50f0e8d047cf25", "message": "Merge pull request #25 from seata/develop\n\noptimize: StackTraceLogger", "committedDate": "2020-03-06T01:45:41Z", "type": "commit"}, {"oid": "0932bfcf9b3b2ca3bf28b476a675568a50b9c52c", "url": "https://github.com/seata/seata/commit/0932bfcf9b3b2ca3bf28b476a675568a50b9c52c", "message": "fix bug", "committedDate": "2020-03-06T02:14:48Z", "type": "commit"}, {"oid": "f333252e50acd540afd63d9f2aac5568fa263a14", "url": "https://github.com/seata/seata/commit/f333252e50acd540afd63d9f2aac5568fa263a14", "message": "Merge pull request #26 from seata/develop\n\nbugfix:modify the error configuration name", "committedDate": "2020-03-07T08:53:39Z", "type": "commit"}, {"oid": "54ded4b49f8d79ff71e1e37718dc01c750d3cf44", "url": "https://github.com/seata/seata/commit/54ded4b49f8d79ff71e1e37718dc01c750d3cf44", "message": "Merge branch 'develop' into develop", "committedDate": "2020-03-09T01:21:45Z", "type": "commit"}, {"oid": "5656dfecf7259938d29eff81366d193d4641dfe2", "url": "https://github.com/seata/seata/commit/5656dfecf7259938d29eff81366d193d4641dfe2", "message": "fix bug", "committedDate": "2020-03-09T05:41:28Z", "type": "commit"}, {"oid": "57fb2d769dc579b681248aa3a2b1436bfeefc45f", "url": "https://github.com/seata/seata/commit/57fb2d769dc579b681248aa3a2b1436bfeefc45f", "message": "Merge branch 'develop' into develop", "committedDate": "2020-03-10T09:43:48Z", "type": "commit"}, {"oid": "2ec90cc3915a3108d42ea879acdab53bd7d675f4", "url": "https://github.com/seata/seata/commit/2ec90cc3915a3108d42ea879acdab53bd7d675f4", "message": "Merge branch 'develop' into develop", "committedDate": "2020-03-11T12:14:22Z", "type": "commit"}, {"oid": "de29ef9b0d901b96710bba27402bcea4f687ac4d", "url": "https://github.com/seata/seata/commit/de29ef9b0d901b96710bba27402bcea4f687ac4d", "message": "Merge remote-tracking branch 'seata-develop/develop' into develop", "committedDate": "2020-03-18T05:32:57Z", "type": "commit"}, {"oid": "de29ef9b0d901b96710bba27402bcea4f687ac4d", "url": "https://github.com/seata/seata/commit/de29ef9b0d901b96710bba27402bcea4f687ac4d", "message": "Merge remote-tracking branch 'seata-develop/develop' into develop", "committedDate": "2020-03-18T05:32:57Z", "type": "forcePushed"}, {"oid": "b24a57f29b49db35238a54ff96071b986b179f5d", "url": "https://github.com/seata/seata/commit/b24a57f29b49db35238a54ff96071b986b179f5d", "message": "tuning code logic", "committedDate": "2020-03-18T05:45:11Z", "type": "commit"}, {"oid": "7a104fd0c8321a621821fb606456fbb7fbbcfba4", "url": "https://github.com/seata/seata/commit/7a104fd0c8321a621821fb606456fbb7fbbcfba4", "message": "fix code style", "committedDate": "2020-03-18T05:47:17Z", "type": "commit"}, {"oid": "bc72f9cbace1573e6ef49af48a40c84b891153bc", "url": "https://github.com/seata/seata/commit/bc72f9cbace1573e6ef49af48a40c84b891153bc", "message": "Merge branch 'develop' into develop", "committedDate": "2020-03-19T01:43:03Z", "type": "commit"}, {"oid": "c5cc5227077924527328224f6495f536032c39e8", "url": "https://github.com/seata/seata/commit/c5cc5227077924527328224f6495f536032c39e8", "message": "Merge branch 'develop' into develop", "committedDate": "2020-03-20T01:26:37Z", "type": "commit"}, {"oid": "41937780ae8e75de59b35ecd161a158e0a83843a", "url": "https://github.com/seata/seata/commit/41937780ae8e75de59b35ecd161a158e0a83843a", "message": "Merge branch 'develop' into develop", "committedDate": "2020-03-21T03:17:04Z", "type": "commit"}, {"oid": "828c1384b3d6581d727799a929955f060c19f740", "url": "https://github.com/seata/seata/commit/828c1384b3d6581d727799a929955f060c19f740", "message": "supplement and modify the variable name", "committedDate": "2020-03-21T04:59:50Z", "type": "commit"}, {"oid": "4327e7ea18e672c5a6d8bf643ef055411ed26193", "url": "https://github.com/seata/seata/commit/4327e7ea18e672c5a6d8bf643ef055411ed26193", "message": "code formatting", "committedDate": "2020-03-21T05:51:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyNTY0NQ==", "url": "https://github.com/seata/seata/pull/2253#discussion_r396225645", "bodyText": "Please check the spell of \"domotion\" is it wrong.", "author": "l81893521", "createdAt": "2020-03-23T05:53:33Z", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -101,9 +139,10 @@ private Object handleGlobalLock(final MethodInvocation methodInvocation) throws\n     }\n \n     private Object handleGlobalTransaction(final MethodInvocation methodInvocation,\n-                                           final GlobalTransactional globalTrxAnno) throws Throwable {\n+        final GlobalTransactional globalTrxAnno, String domotionKey) throws Throwable {", "originalCommit": "4327e7ea18e672c5a6d8bf643ef055411ed26193", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ca328539f7005e7872841488b58c69e0d7e70e43", "url": "https://github.com/seata/seata/commit/ca328539f7005e7872841488b58c69e0d7e70e43", "message": "modify the error variable name", "committedDate": "2020-03-23T05:59:48Z", "type": "commit"}, {"oid": "83b0cc92d782028cf040e3de92c26e8c0f1f1b93", "url": "https://github.com/seata/seata/commit/83b0cc92d782028cf040e3de92c26e8c0f1f1b93", "message": "Merge branch 'develop' into develop", "committedDate": "2020-03-23T08:40:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4MTc5OQ==", "url": "https://github.com/seata/seata/pull/2253#discussion_r396981799", "bodyText": "Why not use if else", "author": "l81893521", "createdAt": "2020-03-24T08:41:15Z", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -190,4 +240,38 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n         }\n     }\n+\n+    /**\n+     * auto upgrade service detection\n+     */\n+    private static void startSelfCheck() {\n+        ScheduledThreadPoolExecutor executor =\n+            new ScheduledThreadPoolExecutor(1, new NamedThreadFactory(\"SelfCheckWorker\", 1, true));\n+        executor.scheduleAtFixedRate(() -> {\n+            if (demotionMap.size() > 0) {\n+                try {\n+                    TransactionManagerHolder.get()\n+                        .commit(TransactionManagerHolder.get().begin(null, null, \"test\", 60000));\n+                    onSelfCheck(false);\n+                } catch (Exception e) {\n+                    onSelfCheck(true);\n+                }\n+            }\n+        }, 10, selfCheckPeriod, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private static synchronized void onSelfCheck(boolean isError) {\n+        if (!isError) {\n+            autoDemotionNum++;\n+            if (autoDemotionNum > selfCheckAllowTimes && demotionMap.size() > 0) {\n+                autoDemotionNum = 0;\n+                demotionMap.clear();\n+            }\n+        }\n+        if (isError) {", "originalCommit": "83b0cc92d782028cf040e3de92c26e8c0f1f1b93", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "83812183520714aeed790fea9325fd7de46a8618", "url": "https://github.com/seata/seata/commit/83812183520714aeed790fea9325fd7de46a8618", "message": "Merge branch 'develop' into develop", "committedDate": "2020-03-24T08:42:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk5OTY4NA==", "url": "https://github.com/seata/seata/pull/2253#discussion_r396999684", "bodyText": "I think\nif (selfCheck) {\n    onSelfCheck(error);\n}\n\nis unnecessary here, already have thread to detect it.", "author": "l81893521", "createdAt": "2020-03-24T09:11:29Z", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -155,11 +197,19 @@ public TransactionInfo getTransactionInfo() {\n                     failureHandler.onRollbackFailure(e.getTransaction(), e.getCause());\n                     throw e.getCause();\n                 case RollbackRetrying:\n+                    error = false;\n                     failureHandler.onRollbackRetrying(e.getTransaction(), e.getCause());\n                     throw e.getCause();\n                 default:\n                     throw new ShouldNeverHappenException(String.format(\"Unknown TransactionalExecutor.Code: %s\", code));\n-\n+            }\n+        } finally {\n+            if (selfCheck) {", "originalCommit": "83812183520714aeed790fea9325fd7de46a8618", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8628550c91f87cbc3251950040b58c5d0496bcd9", "url": "https://github.com/seata/seata/commit/8628550c91f87cbc3251950040b58c5d0496bcd9", "message": "optimize code", "committedDate": "2020-03-24T09:12:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3Mjc1OA==", "url": "https://github.com/seata/seata/pull/2253#discussion_r397072758", "bodyText": "I think ScheduledThreadPoolExecutor should be static and outside the method.", "author": "l81893521", "createdAt": "2020-03-24T11:11:51Z", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -190,4 +237,37 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n         }\n     }\n+\n+    /**\n+     * auto upgrade service detection\n+     */\n+    private static void startSelfCheck() {\n+        ScheduledThreadPoolExecutor executor =", "originalCommit": "8628550c91f87cbc3251950040b58c5d0496bcd9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEwNjcxOA==", "url": "https://github.com/seata/seata/pull/2253#discussion_r397106718", "bodyText": "received, processed,thx", "author": "a364176773", "createdAt": "2020-03-24T12:14:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3Mjc1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3MzY2Mg==", "url": "https://github.com/seata/seata/pull/2253#discussion_r397073662", "bodyText": "how about remove the condition of\ndemotionMap.size() > 0", "author": "l81893521", "createdAt": "2020-03-24T11:13:29Z", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -190,4 +237,37 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n         }\n     }\n+\n+    /**\n+     * auto upgrade service detection\n+     */\n+    private static void startSelfCheck() {\n+        ScheduledThreadPoolExecutor executor =\n+            new ScheduledThreadPoolExecutor(1, new NamedThreadFactory(\"SelfCheckWorker\", 1, true));\n+        executor.scheduleAtFixedRate(() -> {\n+            if (demotionMap.size() > 0) {\n+                try {\n+                    TransactionManagerHolder.get()\n+                        .commit(TransactionManagerHolder.get().begin(null, null, \"test\", 60000));\n+                    onSelfCheck(false);\n+                } catch (Exception e) {\n+                    onSelfCheck(true);\n+                }\n+            }\n+        }, 10, selfCheckPeriod, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private static synchronized void onSelfCheck(boolean isError) {\n+        if (!isError) {\n+            autoDemotionNum++;\n+            if (autoDemotionNum > selfCheckAllowTimes && demotionMap.size() > 0) {", "originalCommit": "8628550c91f87cbc3251950040b58c5d0496bcd9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEwNjY0NQ==", "url": "https://github.com/seata/seata/pull/2253#discussion_r397106645", "bodyText": "received, processed,thx", "author": "a364176773", "createdAt": "2020-03-24T12:14:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3MzY2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEwNjk4OQ==", "url": "https://github.com/seata/seata/pull/2253#discussion_r397106989", "bodyText": "received, processed,thx", "author": "a364176773", "createdAt": "2020-03-24T12:14:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3MzY2Mg=="}], "type": "inlineReview"}, {"oid": "6cc1271c68f56f551b898b4c5867ab0a8e6037d8", "url": "https://github.com/seata/seata/commit/6cc1271c68f56f551b898b4c5867ab0a8e6037d8", "message": "optimize code", "committedDate": "2020-03-24T12:08:00Z", "type": "commit"}, {"oid": "b0fa90a109bac2cab5c30734d53044da4f8ac595", "url": "https://github.com/seata/seata/commit/b0fa90a109bac2cab5c30734d53044da4f8ac595", "message": "Merge branch 'develop' into develop", "committedDate": "2020-03-24T14:31:33Z", "type": "commit"}, {"oid": "d75201c84d0432823d5523c0abd3fe1168a287eb", "url": "https://github.com/seata/seata/commit/d75201c84d0432823d5523c0abd3fe1168a287eb", "message": "Merge branch 'develop' into develop", "committedDate": "2020-03-28T13:15:49Z", "type": "commit"}, {"oid": "ae30ce2c2abb6181240a149f11ac83808ee6f462", "url": "https://github.com/seata/seata/commit/ae30ce2c2abb6181240a149f11ac83808ee6f462", "message": "Merge branch 'develop' into develop", "committedDate": "2020-03-31T09:37:17Z", "type": "commit"}, {"oid": "c86238df79c0f65f151d97ad384a4021b62b3e48", "url": "https://github.com/seata/seata/commit/c86238df79c0f65f151d97ad384a4021b62b3e48", "message": "Merge branch 'develop' into develop", "committedDate": "2020-04-01T01:36:30Z", "type": "commit"}, {"oid": "ad60f5333f42a4fc16f93f733f39eb8d8d4d52a2", "url": "https://github.com/seata/seata/commit/ad60f5333f42a4fc16f93f733f39eb8d8d4d52a2", "message": "Merge branch 'develop' into develop", "committedDate": "2020-04-01T05:50:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NjMyMA==", "url": "https://github.com/seata/seata/pull/2253#discussion_r402076320", "bodyText": "degrade", "author": "slievrly", "createdAt": "2020-04-02T06:22:29Z", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactional.java", "diffHunk": "@@ -70,8 +70,21 @@\n      */\n     String[] noRollbackForClassName() default {};\n \n+    /**\n+     * Automatically demoted ultimate value\n+     * @return\n+     */\n+    int demotionTimes() default 10;\n+\n+    /**\n+     * Automatically demoted switch\n+     * @return\n+     */\n+    boolean demotion() default false;", "originalCommit": "ad60f5333f42a4fc16f93f733f39eb8d8d4d52a2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NzM0NQ==", "url": "https://github.com/seata/seata/pull/2253#discussion_r402077345", "bodyText": "how about seata-spring-boot-starter work\uff1f", "author": "slievrly", "createdAt": "2020-04-02T06:25:04Z", "path": "core/src/main/java/io/seata/core/constants/ConfigurationKeys.java", "diffHunk": "@@ -419,4 +419,19 @@\n      * The constant SQL_PARSER_TYPE.\n      */\n     public static final String SQL_PARSER_TYPE = CLIENT_RM_PREFIX + \"sqlParserType\";\n+\n+    /**\n+     * The constant CLIENT_SELF_CHECK_PERIOD.\n+     */\n+    public static final String CLIENT_SELF_CHECK_PERIOD = CLIENT_TM_PREFIX + \"selfCheckPeriod\";", "originalCommit": "ad60f5333f42a4fc16f93f733f39eb8d8d4d52a2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3ODgxNA==", "url": "https://github.com/seata/seata/pull/2253#discussion_r402078814", "bodyText": "Variable is the name of the need to think about, self no actual meaning.", "author": "slievrly", "createdAt": "2020-04-02T06:28:54Z", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -58,29 +66,60 @@\n     private final GlobalLockTemplate<Object> globalLockTemplate = new GlobalLockTemplate<>();\n     private final FailureHandler failureHandler;\n     private volatile boolean disable;\n-\n+    private static int selfCheckPeriod;", "originalCommit": "ad60f5333f42a4fc16f93f733f39eb8d8d4d52a2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4MjY0OQ==", "url": "https://github.com/seata/seata/pull/2253#discussion_r402082649", "bodyText": "split", "author": "slievrly", "createdAt": "2020-04-02T06:38:51Z", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -190,4 +238,35 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n         }\n     }\n+\n+    /**\n+     * auto upgrade service detection\n+     */\n+    private static void startSelfCheck() {\n+        executor.scheduleAtFixedRate(() -> {\n+            if (demotionMap.size() > 0) {\n+                try {\n+                    TransactionManagerHolder.get()", "originalCommit": "ad60f5333f42a4fc16f93f733f39eb8d8d4d52a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4ODYyMA==", "url": "https://github.com/seata/seata/pull/2253#discussion_r402788620", "bodyText": "split begin and commit, will be more clearly.", "author": "slievrly", "createdAt": "2020-04-03T07:32:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4MjY0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk2MzUwOA==", "url": "https://github.com/seata/seata/pull/2253#discussion_r402963508", "bodyText": "split begin and commit, will be more clearly.\n\ni modified it", "author": "a364176773", "createdAt": "2020-04-03T12:17:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4MjY0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4MzMzMA==", "url": "https://github.com/seata/seata/pull/2253#discussion_r402083330", "bodyText": "always >=0", "author": "slievrly", "createdAt": "2020-04-02T06:40:43Z", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -190,4 +238,35 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n         }\n     }\n+\n+    /**\n+     * auto upgrade service detection\n+     */\n+    private static void startSelfCheck() {\n+        executor.scheduleAtFixedRate(() -> {\n+            if (demotionMap.size() > 0) {\n+                try {\n+                    TransactionManagerHolder.get()\n+                        .commit(TransactionManagerHolder.get().begin(null, null, \"test\", 60000));\n+                    onSelfCheck(false);\n+                } catch (Exception e) {\n+                    onSelfCheck(true);\n+                }\n+            }\n+        }, 10, selfCheckPeriod, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private static synchronized void onSelfCheck(boolean isError) {\n+        if (!isError) {\n+            autoDemotionNum++;\n+            if (autoDemotionNum > selfCheckAllowTimes) {\n+                autoDemotionNum = 0;\n+                demotionMap.clear();\n+            }\n+        } else {\n+            if (autoDemotionNum > 0) {\n+                autoDemotionNum--;", "originalCommit": "ad60f5333f42a4fc16f93f733f39eb8d8d4d52a2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0c677b1e194624570a00a937245777b96276a535", "url": "https://github.com/seata/seata/commit/0c677b1e194624570a00a937245777b96276a535", "message": "health monitoring to adjust service degradation", "committedDate": "2020-04-02T09:15:37Z", "type": "commit"}, {"oid": "d9057a584f41db9941e4a6c11a901a5bc870ac01", "url": "https://github.com/seata/seata/commit/d9057a584f41db9941e4a6c11a901a5bc870ac01", "message": "optimized code", "committedDate": "2020-04-02T09:48:29Z", "type": "commit"}, {"oid": "eda5e9e26c7932fb5f3cd0447e4d02e53f5f9871", "url": "https://github.com/seata/seata/commit/eda5e9e26c7932fb5f3cd0447e4d02e53f5f9871", "message": "Merge branch 'develop' into develop", "committedDate": "2020-04-02T09:52:19Z", "type": "commit"}, {"oid": "0b0b9a8d2217165a30dc448eae3e6ab8fd7226cf", "url": "https://github.com/seata/seata/commit/0b0b9a8d2217165a30dc448eae3e6ab8fd7226cf", "message": "support yaml and properties to read configuration", "committedDate": "2020-04-03T06:38:20Z", "type": "commit"}, {"oid": "aa9b1e24170383b6967dfdea6c6f621f8a12be8e", "url": "https://github.com/seata/seata/commit/aa9b1e24170383b6967dfdea6c6f621f8a12be8e", "message": "Merge branch 'develop' into develop", "committedDate": "2020-04-03T06:54:28Z", "type": "commit"}, {"oid": "5c19a797662c08dde0d49c07eae879d606f4a276", "url": "https://github.com/seata/seata/commit/5c19a797662c08dde0d49c07eae879d606f4a276", "message": "change configuration name", "committedDate": "2020-04-03T07:05:04Z", "type": "commit"}, {"oid": "57b90bbfbb00ab8237043c08097d47170db27a7a", "url": "https://github.com/seata/seata/commit/57b90bbfbb00ab8237043c08097d47170db27a7a", "message": "Merge branch 'develop' of https://github.com/a364176773/seata into develop", "committedDate": "2020-04-03T07:05:36Z", "type": "commit"}, {"oid": "f424a32840265a63e626c05388e03cc142ff1449", "url": "https://github.com/seata/seata/commit/f424a32840265a63e626c05388e03cc142ff1449", "message": "change configuration name", "committedDate": "2020-04-03T07:26:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4Mzc2Mw==", "url": "https://github.com/seata/seata/pull/2253#discussion_r402783763", "bodyText": "enableXXXX", "author": "slievrly", "createdAt": "2020-04-03T07:23:01Z", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -58,34 +65,52 @@\n     private final GlobalLockTemplate<Object> globalLockTemplate = new GlobalLockTemplate<>();\n     private final FailureHandler failureHandler;\n     private volatile boolean disable;\n+    private static int healthCheckPeriod;\n+    private static boolean healthCheck;", "originalCommit": "57b90bbfbb00ab8237043c08097d47170db27a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4NjAyMw==", "url": "https://github.com/seata/seata/pull/2253#discussion_r402786023", "bodyText": "ahead of this to determine the global disable.", "author": "slievrly", "createdAt": "2020-04-03T07:27:25Z", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -58,34 +65,52 @@\n     private final GlobalLockTemplate<Object> globalLockTemplate = new GlobalLockTemplate<>();\n     private final FailureHandler failureHandler;\n     private volatile boolean disable;\n+    private static int healthCheckPeriod;\n+    private static boolean healthCheck;\n+    private static int healthCheckDegradeAllowTimes;\n+    private static volatile Integer degradeNum = 0;\n+    private static ScheduledThreadPoolExecutor executor =\n+        new ScheduledThreadPoolExecutor(1, new NamedThreadFactory(\"healthCheckWorker\", 1, true));\n \n     /**\n      * Instantiates a new Global transactional interceptor.\n      *\n-     * @param failureHandler the failure handler\n+     * @param failureHandler\n+     *            the failure handler\n      */\n     public GlobalTransactionalInterceptor(FailureHandler failureHandler) {\n         this.failureHandler = failureHandler == null ? DEFAULT_FAIL_HANDLER : failureHandler;\n         this.disable = ConfigurationFactory.getInstance().getBoolean(ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,\n             DEFAULT_DISABLE_GLOBAL_TRANSACTION);\n+        this.healthCheck = ConfigurationFactory.getInstance().getBoolean(ConfigurationKeys.CLIENT_HEALTH_CHECK,\n+            DEFAULT_TM_HEALTH_CHECK);\n+        if (healthCheck) {\n+            this.healthCheckPeriod = ConfigurationFactory.getInstance()\n+                .getInt(ConfigurationKeys.CLIENT_HEALTH_CHECK_PERIOD, DEFAULT_TM_HEALTH_CHECK_PERIOD);\n+            this.healthCheckDegradeAllowTimes = ConfigurationFactory.getInstance().getInt(\n+                ConfigurationKeys.CLIENT_HEALTH_CHECK_DEGRADE_ALLOW_TIMES, DEFAULT_TM_HEALTH_CHECK_DEGRADE_ALLOW_TIMES);\n+            if (healthCheckPeriod > 0 && healthCheckDegradeAllowTimes > 0) {\n+                startSelfCheck();\n+            }\n+        }\n     }\n \n     @Override\n     public Object invoke(final MethodInvocation methodInvocation) throws Throwable {\n-        Class<?> targetClass = methodInvocation.getThis() != null ? AopUtils.getTargetClass(methodInvocation.getThis())\n-            : null;\n+        Class<?> targetClass =\n+            methodInvocation.getThis() != null ? AopUtils.getTargetClass(methodInvocation.getThis()) : null;\n         Method specificMethod = ClassUtils.getMostSpecificMethod(methodInvocation.getMethod(), targetClass);\n         final Method method = BridgeMethodResolver.findBridgedMethod(specificMethod);\n-\n         final GlobalTransactional globalTransactionalAnnotation = getAnnotation(method, GlobalTransactional.class);\n         final GlobalLock globalLockAnnotation = getAnnotation(method, GlobalLock.class);\n-        if (!disable && globalTransactionalAnnotation != null) {\n-            return handleGlobalTransaction(methodInvocation, globalTransactionalAnnotation);\n-        } else if (!disable && globalLockAnnotation != null) {\n-            return handleGlobalLock(methodInvocation);\n-        } else {\n-            return methodInvocation.proceed();\n+        if (!healthCheck || degradeNum < healthCheckDegradeAllowTimes) {", "originalCommit": "57b90bbfbb00ab8237043c08097d47170db27a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4NjkzNg==", "url": "https://github.com/seata/seata/pull/2253#discussion_r402786936", "bodyText": "voliate", "author": "slievrly", "createdAt": "2020-04-03T07:29:13Z", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -188,6 +219,40 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             LOGGER.info(\"{} config changed, old value:{}, new value:{}\", ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,\n                 disable, event.getNewValue());\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n+        } else if (ConfigurationKeys.CLIENT_HEALTH_CHECK.equals(event.getDataId())) {\n+            healthCheck = Boolean.parseBoolean(event.getNewValue());", "originalCommit": "57b90bbfbb00ab8237043c08097d47170db27a7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4NzgzMw==", "url": "https://github.com/seata/seata/pull/2253#discussion_r402787833", "bodyText": "if startup healthCheck=false  and now change to true ,how to process?", "author": "slievrly", "createdAt": "2020-04-03T07:31:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4NjkzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4OTI4Mg==", "url": "https://github.com/seata/seata/pull/2253#discussion_r402789282", "bodyText": "10 ms  too small startup delay.", "author": "slievrly", "createdAt": "2020-04-03T07:34:07Z", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -188,6 +219,40 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             LOGGER.info(\"{} config changed, old value:{}, new value:{}\", ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,\n                 disable, event.getNewValue());\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n+        } else if (ConfigurationKeys.CLIENT_HEALTH_CHECK.equals(event.getDataId())) {\n+            healthCheck = Boolean.parseBoolean(event.getNewValue());\n+            if (!healthCheck) {\n+                degradeNum = 0;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * auto upgrade service detection\n+     */\n+    private static void startSelfCheck() {\n+        executor.scheduleAtFixedRate(() -> {\n+            if (healthCheck) {\n+                try {\n+                    TransactionManagerHolder.get()\n+                        .commit(TransactionManagerHolder.get().begin(null, null, \"test\", 60000));\n+                    onSelfCheck(true);\n+                } catch (Exception e) {\n+                    onSelfCheck(false);\n+                }\n+            }\n+        }, 10, healthCheckPeriod, TimeUnit.MILLISECONDS);", "originalCommit": "57b90bbfbb00ab8237043c08097d47170db27a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc5MDM5Mw==", "url": "https://github.com/seata/seata/pull/2253#discussion_r402790393", "bodyText": "Whether the executor needs to be stopped ?", "author": "slievrly", "createdAt": "2020-04-03T07:36:21Z", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -188,6 +219,40 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             LOGGER.info(\"{} config changed, old value:{}, new value:{}\", ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,\n                 disable, event.getNewValue());\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n+        } else if (ConfigurationKeys.CLIENT_HEALTH_CHECK.equals(event.getDataId())) {\n+            healthCheck = Boolean.parseBoolean(event.getNewValue());\n+            if (!healthCheck) {\n+                degradeNum = 0;", "originalCommit": "57b90bbfbb00ab8237043c08097d47170db27a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc5MTEzNA==", "url": "https://github.com/seata/seata/pull/2253#discussion_r402791134", "bodyText": "I think it should be here healthCheck   not !healthCheck", "author": "slievrly", "createdAt": "2020-04-03T07:37:42Z", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -155,11 +182,15 @@ public TransactionInfo getTransactionInfo() {\n                     failureHandler.onRollbackFailure(e.getTransaction(), e.getCause());\n                     throw e.getCause();\n                 case RollbackRetrying:\n+                    succeed = false;\n                     failureHandler.onRollbackRetrying(e.getTransaction(), e.getCause());\n                     throw e.getCause();\n                 default:\n                     throw new ShouldNeverHappenException(String.format(\"Unknown TransactionalExecutor.Code: %s\", code));\n-\n+            }\n+        } finally {\n+            if (!healthCheck) {", "originalCommit": "57b90bbfbb00ab8237043c08097d47170db27a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9b1c84296b85b1b170c0fdaff82be4e4449ab154", "url": "https://github.com/seata/seata/commit/9b1c84296b85b1b170c0fdaff82be4e4449ab154", "message": "adjust code logic", "committedDate": "2020-04-03T08:44:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3OTg0Mw==", "url": "https://github.com/seata/seata/pull/2253#discussion_r402879843", "bodyText": "volatile  multi-thread", "author": "slievrly", "createdAt": "2020-04-03T09:32:46Z", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -188,6 +221,46 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             LOGGER.info(\"{} config changed, old value:{}, new value:{}\", ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,\n                 disable, event.getNewValue());\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n+            if (!degradeCheck && disable != localDisable) {\n+                localDisable = disable;\n+            }\n+        } else if (ConfigurationKeys.CLIENT_DEGRADE_CHECK.equals(event.getDataId())) {\n+            degradeCheck = Boolean.parseBoolean(event.getNewValue());", "originalCommit": "9b1c84296b85b1b170c0fdaff82be4e4449ab154", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEwMDM2OA==", "url": "https://github.com/seata/seata/pull/2253#discussion_r403100368", "bodyText": "volatile multi-thread\n\ni modified it", "author": "a364176773", "createdAt": "2020-04-03T15:49:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3OTg0Mw=="}], "type": "inlineReview"}, {"oid": "2e7e35317d5a307abdffcfe5dd1af0f1dc154d2b", "url": "https://github.com/seata/seata/commit/2e7e35317d5a307abdffcfe5dd1af0f1dc154d2b", "message": "adjust code logic", "committedDate": "2020-04-03T11:47:13Z", "type": "commit"}, {"oid": "80596580a4aae0a14d453b651826cfd1ee646786", "url": "https://github.com/seata/seata/commit/80596580a4aae0a14d453b651826cfd1ee646786", "message": "fix bug", "committedDate": "2020-04-03T11:59:58Z", "type": "commit"}, {"oid": "d35c646a89c743a5629c81329f87201809bd6bcb", "url": "https://github.com/seata/seata/commit/d35c646a89c743a5629c81329f87201809bd6bcb", "message": "optimize code", "committedDate": "2020-04-03T12:16:32Z", "type": "commit"}, {"oid": "095e16703a36674b07189f69391fe89334ebe3d1", "url": "https://github.com/seata/seata/commit/095e16703a36674b07189f69391fe89334ebe3d1", "message": "optimize code", "committedDate": "2020-04-03T12:18:03Z", "type": "commit"}, {"oid": "444ddec25e7e10fb2061e0e0cd6e10c0c5d2ff01", "url": "https://github.com/seata/seata/commit/444ddec25e7e10fb2061e0e0cd6e10c0c5d2ff01", "message": "Merge branch 'develop' into develop", "committedDate": "2020-04-07T14:50:25Z", "type": "commit"}, {"oid": "f7af840aae7eadf03083b58fe3d8ae32594ba0d5", "url": "https://github.com/seata/seata/commit/f7af840aae7eadf03083b58fe3d8ae32594ba0d5", "message": "Merge branch 'develop' into develop", "committedDate": "2020-04-08T05:21:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI2ODg1OA==", "url": "https://github.com/seata/seata/pull/2253#discussion_r405268858", "bodyText": "starDegradeCheck", "author": "slievrly", "createdAt": "2020-04-08T05:38:21Z", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -188,6 +220,40 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             LOGGER.info(\"{} config changed, old value:{}, new value:{}\", ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,\n                 disable, event.getNewValue());\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n+        } else if (ConfigurationKeys.CLIENT_DEGRADE_CHECK.equals(event.getDataId())) {\n+            degradeCheck = Boolean.parseBoolean(event.getNewValue());\n+            if (!degradeCheck) {\n+                degradeNum = 0;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * auto upgrade service detection\n+     */\n+    private static void startSelfCheck() {", "originalCommit": "f7af840aae7eadf03083b58fe3d8ae32594ba0d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI2OTc4MA==", "url": "https://github.com/seata/seata/pull/2253#discussion_r405269780", "bodyText": "Can the applicationId of the business be get?\ntest->degradeCheck", "author": "slievrly", "createdAt": "2020-04-08T05:41:23Z", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -188,6 +220,40 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             LOGGER.info(\"{} config changed, old value:{}, new value:{}\", ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,\n                 disable, event.getNewValue());\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n+        } else if (ConfigurationKeys.CLIENT_DEGRADE_CHECK.equals(event.getDataId())) {\n+            degradeCheck = Boolean.parseBoolean(event.getNewValue());\n+            if (!degradeCheck) {\n+                degradeNum = 0;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * auto upgrade service detection\n+     */\n+    private static void startSelfCheck() {\n+        executor.scheduleAtFixedRate(() -> {\n+            if (degradeCheck) {\n+                try {\n+                    String xid = TransactionManagerHolder.get().begin(null, null, \"test\", 60000);", "originalCommit": "f7af840aae7eadf03083b58fe3d8ae32594ba0d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI2OTk5Ng==", "url": "https://github.com/seata/seata/pull/2253#discussion_r405269996", "bodyText": "onDegradeCheck", "author": "slievrly", "createdAt": "2020-04-08T05:42:11Z", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -188,6 +220,40 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             LOGGER.info(\"{} config changed, old value:{}, new value:{}\", ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,\n                 disable, event.getNewValue());\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n+        } else if (ConfigurationKeys.CLIENT_DEGRADE_CHECK.equals(event.getDataId())) {\n+            degradeCheck = Boolean.parseBoolean(event.getNewValue());\n+            if (!degradeCheck) {\n+                degradeNum = 0;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * auto upgrade service detection\n+     */\n+    private static void startSelfCheck() {\n+        executor.scheduleAtFixedRate(() -> {\n+            if (degradeCheck) {\n+                try {\n+                    String xid = TransactionManagerHolder.get().begin(null, null, \"test\", 60000);\n+                    TransactionManagerHolder.get().commit(xid);\n+                    onSelfCheck(true);\n+                } catch (Exception e) {\n+                    onSelfCheck(false);\n+                }\n+            }\n+        }, degradeCheckPeriod, degradeCheckPeriod, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private static synchronized void onSelfCheck(boolean succeed) {", "originalCommit": "f7af840aae7eadf03083b58fe3d8ae32594ba0d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI3MDQzMg==", "url": "https://github.com/seata/seata/pull/2253#discussion_r405270432", "bodyText": "degradeNum will never be greater than degradeCheckAllowTimes, how to trigger a degrade\uff1f", "author": "slievrly", "createdAt": "2020-04-08T05:43:37Z", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -188,6 +220,40 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             LOGGER.info(\"{} config changed, old value:{}, new value:{}\", ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,\n                 disable, event.getNewValue());\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n+        } else if (ConfigurationKeys.CLIENT_DEGRADE_CHECK.equals(event.getDataId())) {\n+            degradeCheck = Boolean.parseBoolean(event.getNewValue());\n+            if (!degradeCheck) {\n+                degradeNum = 0;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * auto upgrade service detection\n+     */\n+    private static void startSelfCheck() {\n+        executor.scheduleAtFixedRate(() -> {\n+            if (degradeCheck) {\n+                try {\n+                    String xid = TransactionManagerHolder.get().begin(null, null, \"test\", 60000);\n+                    TransactionManagerHolder.get().commit(xid);\n+                    onSelfCheck(true);\n+                } catch (Exception e) {\n+                    onSelfCheck(false);\n+                }\n+            }\n+        }, degradeCheckPeriod, degradeCheckPeriod, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private static synchronized void onSelfCheck(boolean succeed) {\n+        if (succeed) {\n+            if (degradeNum > 0) {\n+                degradeNum--;\n+            }\n+        } else {\n+            if (degradeNum < degradeCheckAllowTimes) {\n+                degradeNum++;", "originalCommit": "f7af840aae7eadf03083b58fe3d8ae32594ba0d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1OTE4OA==", "url": "https://github.com/seata/seata/pull/2253#discussion_r405359188", "bodyText": "degradeNum will never be greater than degradeCheckAllowTimes, how to trigger a degrade\uff1f\n\nPTAL", "author": "a364176773", "createdAt": "2020-04-08T08:46:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI3MDQzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI3MDg4OQ==", "url": "https://github.com/seata/seata/pull/2253#discussion_r405270889", "bodyText": "I think the logic here is incorrect.", "author": "slievrly", "createdAt": "2020-04-08T05:45:03Z", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -144,6 +171,7 @@ public TransactionInfo getTransactionInfo() {\n             TransactionalExecutor.Code code = e.getCode();\n             switch (code) {\n                 case RollbackDone:\n+                    succeed = false;", "originalCommit": "f7af840aae7eadf03083b58fe3d8ae32594ba0d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3a556fd96d4e4de2b9c7e03fc2110616162fb70b", "url": "https://github.com/seata/seata/commit/3a556fd96d4e4de2b9c7e03fc2110616162fb70b", "message": "fix bug", "committedDate": "2020-04-08T08:13:52Z", "type": "commit"}, {"oid": "34514ddfa562e6d0bc945843139905361e6eaf83", "url": "https://github.com/seata/seata/commit/34514ddfa562e6d0bc945843139905361e6eaf83", "message": "Merge branch 'develop' of https://github.com/a364176773/seata into develop", "committedDate": "2020-04-08T08:14:40Z", "type": "commit"}, {"oid": "34514ddfa562e6d0bc945843139905361e6eaf83", "url": "https://github.com/seata/seata/commit/34514ddfa562e6d0bc945843139905361e6eaf83", "message": "Merge branch 'develop' of https://github.com/a364176773/seata into develop", "committedDate": "2020-04-08T08:14:40Z", "type": "forcePushed"}, {"oid": "10e0ace960d6dabb0fd23505e6839750a846930e", "url": "https://github.com/seata/seata/commit/10e0ace960d6dabb0fd23505e6839750a846930e", "message": "fix bug", "committedDate": "2020-04-08T08:45:09Z", "type": "commit"}, {"oid": "4fd6d84014c578c7f71f432b7fb5bd792074b53c", "url": "https://github.com/seata/seata/commit/4fd6d84014c578c7f71f432b7fb5bd792074b53c", "message": "modify the configuration name", "committedDate": "2020-04-08T08:49:48Z", "type": "commit"}, {"oid": "d3fde42bf57a4bf03a7b18ebb83aadf21b044ee2", "url": "https://github.com/seata/seata/commit/d3fde42bf57a4bf03a7b18ebb83aadf21b044ee2", "message": "output logs when switching states", "committedDate": "2020-04-09T01:12:58Z", "type": "commit"}, {"oid": "1dff224bf430370e3a85d3223b9d85bcd39a63b6", "url": "https://github.com/seata/seata/commit/1dff224bf430370e3a85d3223b9d85bcd39a63b6", "message": "Merge branch 'develop' into develop", "committedDate": "2020-04-09T01:23:13Z", "type": "commit"}, {"oid": "cc08e8cd4c0971f44276cbe7eb3e4340d111edd3", "url": "https://github.com/seata/seata/commit/cc08e8cd4c0971f44276cbe7eb3e4340d111edd3", "message": "Merge branch 'develop' into develop", "committedDate": "2020-04-10T03:20:07Z", "type": "commit"}, {"oid": "05799ce37bfc570b5d2bf2f1861323cc5ba58a6b", "url": "https://github.com/seata/seata/commit/05799ce37bfc570b5d2bf2f1861323cc5ba58a6b", "message": "Merge branch 'develop' into develop", "committedDate": "2020-04-10T09:16:16Z", "type": "commit"}, {"oid": "acfdfa802c588ede4e302a85ce00d00e17eef43d", "url": "https://github.com/seata/seata/commit/acfdfa802c588ede4e302a85ce00d00e17eef43d", "message": "Merge branch 'develop' into develop", "committedDate": "2020-04-12T12:12:21Z", "type": "commit"}, {"oid": "f3687b4184260e91a31fcc8e681bf5737bf31019", "url": "https://github.com/seata/seata/commit/f3687b4184260e91a31fcc8e681bf5737bf31019", "message": "resolve conflict", "committedDate": "2020-04-17T03:11:22Z", "type": "commit"}, {"oid": "419f8eec0572971c4bd4f4f1cdf66094b8c34f7b", "url": "https://github.com/seata/seata/commit/419f8eec0572971c4bd4f4f1cdf66094b8c34f7b", "message": "resolve conflict", "committedDate": "2020-04-26T11:54:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgzNTM1NA==", "url": "https://github.com/seata/seata/pull/2253#discussion_r419835354", "bodyText": "reachNum >= degradeCheckAllowTimes", "author": "slievrly", "createdAt": "2020-05-05T02:42:16Z", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -190,6 +223,56 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             LOGGER.info(\"{} config changed, old value:{}, new value:{}\", ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,\n                 disable, event.getNewValue());\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n+        } else if (ConfigurationKeys.CLIENT_DEGRADE_CHECK.equals(event.getDataId())) {\n+            degradeCheck = Boolean.parseBoolean(event.getNewValue());\n+            if (!degradeCheck) {\n+                degradeNum = 0;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * auto upgrade service detection\n+     */\n+    private static void startDegradeCheck() {\n+        executor.scheduleAtFixedRate(() -> {\n+            if (degradeCheck) {\n+                try {\n+                    String xid = TransactionManagerHolder.get().begin(null, null, \"degradeCheck\", 60000);\n+                    TransactionManagerHolder.get().commit(xid);\n+                    onDegradeCheck(true);\n+                } catch (Exception e) {\n+                    onDegradeCheck(false);\n+                }\n+            }\n+        }, degradeCheckPeriod, degradeCheckPeriod, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private static synchronized void onDegradeCheck(boolean succeed) {\n+        if (succeed) {\n+            if (degradeNum == degradeCheckAllowTimes) {\n+                reachNum++;\n+                if (reachNum >= degradeNum) {", "originalCommit": "419f8eec0572971c4bd4f4f1cdf66094b8c34f7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg0NTc0NA==", "url": "https://github.com/seata/seata/pull/2253#discussion_r419845744", "bodyText": "ok", "author": "a364176773", "createdAt": "2020-05-05T03:33:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgzNTM1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgzNTk4OQ==", "url": "https://github.com/seata/seata/pull/2253#discussion_r419835989", "bodyText": "this will trigger the upgrade.", "author": "slievrly", "createdAt": "2020-05-05T02:45:24Z", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -190,6 +223,56 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             LOGGER.info(\"{} config changed, old value:{}, new value:{}\", ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,\n                 disable, event.getNewValue());\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n+        } else if (ConfigurationKeys.CLIENT_DEGRADE_CHECK.equals(event.getDataId())) {\n+            degradeCheck = Boolean.parseBoolean(event.getNewValue());\n+            if (!degradeCheck) {\n+                degradeNum = 0;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * auto upgrade service detection\n+     */\n+    private static void startDegradeCheck() {\n+        executor.scheduleAtFixedRate(() -> {\n+            if (degradeCheck) {\n+                try {\n+                    String xid = TransactionManagerHolder.get().begin(null, null, \"degradeCheck\", 60000);\n+                    TransactionManagerHolder.get().commit(xid);\n+                    onDegradeCheck(true);\n+                } catch (Exception e) {\n+                    onDegradeCheck(false);\n+                }\n+            }\n+        }, degradeCheckPeriod, degradeCheckPeriod, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private static synchronized void onDegradeCheck(boolean succeed) {\n+        if (succeed) {\n+            if (degradeNum == degradeCheckAllowTimes) {\n+                reachNum++;\n+                if (reachNum >= degradeNum) {\n+                    reachNum = 0;\n+                    degradeNum = 0;\n+                    if (LOGGER.isInfoEnabled()) {\n+                        LOGGER.info(\"the current global transaction has been restored\");\n+                    }\n+                }\n+            } else if (degradeNum != 0) {\n+                degradeNum = 0;", "originalCommit": "419f8eec0572971c4bd4f4f1cdf66094b8c34f7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg0NTg3OQ==", "url": "https://github.com/seata/seata/pull/2253#discussion_r419845879", "bodyText": "\u53ea\u6709\u5f53\u524d\u6ca1\u88ab\u964d\u7ea7\u624d\u4f1a\u8fdb\u8fd9\u5757,degradeNum == degradeCheckAllowTimes\u4e0d\u6210\u7acb\u65f6.", "author": "a364176773", "createdAt": "2020-05-05T03:33:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgzNTk4OQ=="}], "type": "inlineReview"}, {"oid": "38a3193bedb0b6160fc206fda48374b8ea6e47e1", "url": "https://github.com/seata/seata/commit/38a3193bedb0b6160fc206fda48374b8ea6e47e1", "message": "optimize code", "committedDate": "2020-05-05T03:12:47Z", "type": "commit"}, {"oid": "6544cb60be26f34deaf9ce751d3668a1f3d5a79a", "url": "https://github.com/seata/seata/commit/6544cb60be26f34deaf9ce751d3668a1f3d5a79a", "message": "Merge branch 'develop' into develop", "committedDate": "2020-05-05T03:34:06Z", "type": "commit"}, {"oid": "d93d558463f87c430cb085003b4bcd9ab76cdd35", "url": "https://github.com/seata/seata/commit/d93d558463f87c430cb085003b4bcd9ab76cdd35", "message": "Merge branch 'develop' into develop", "committedDate": "2020-05-07T09:28:31Z", "type": "commit"}, {"oid": "9418366143614fc8ad3660ed880e3644091adfd0", "url": "https://github.com/seata/seata/commit/9418366143614fc8ad3660ed880e3644091adfd0", "message": "optimize code", "committedDate": "2020-05-07T09:37:24Z", "type": "commit"}, {"oid": "fa0055845263e4b83af74d7f2cf17bb6d8ca42bd", "url": "https://github.com/seata/seata/commit/fa0055845263e4b83af74d7f2cf17bb6d8ca42bd", "message": "Merge branch 'develop' into develop", "committedDate": "2020-05-08T03:01:18Z", "type": "commit"}]}