{"pr_number": 2185, "pr_title": "Remove use of unit IDs for transports", "pr_createdAt": "2020-11-03T20:22:40Z", "pr_url": "https://github.com/MegaMek/mekhq/pull/2185", "timeline": [{"oid": "d663804c4cc1822b8e59e74197a1842b29eee5f3", "url": "https://github.com/MegaMek/mekhq/commit/d663804c4cc1822b8e59e74197a1842b29eee5f3", "message": "Use units not IDs for transport ships and transported units", "committedDate": "2020-11-03T20:18:29Z", "type": "commit"}, {"oid": "380b9f6a5e6a69d9738a83f6643ca1da68bdfa43", "url": "https://github.com/MegaMek/mekhq/commit/380b9f6a5e6a69d9738a83f6643ca1da68bdfa43", "message": "Dynamically calculate Unit::isCarryingXXX", "committedDate": "2020-11-03T20:18:29Z", "type": "commit"}, {"oid": "490d130ced53c847bc6c13c31c46a15fd1ec60af", "url": "https://github.com/MegaMek/mekhq/commit/490d130ced53c847bc6c13c31c46a15fd1ec60af", "message": "Add basic tests for transporting units", "committedDate": "2020-11-03T20:18:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg3NzA2OQ==", "url": "https://github.com/MegaMek/mekhq/pull/2185#discussion_r518877069", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...should leave everything the same.\n          \n          \n            \n                    // ... should leave everything the same.", "author": "Windchild292", "createdAt": "2020-11-06T16:51:40Z", "path": "MekHQ/unittests/mekhq/campaign/unit/UnitTransportTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * UnitTransportTest.java\n+ *\n+ * Copyright (c) 2020 The Megamek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign.unit;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.UUID;\n+\n+import org.junit.Test;\n+\n+import megamek.common.Aero;\n+import megamek.common.Entity;\n+import megamek.common.Mech;\n+\n+public class UnitTransportTest {\n+    @Test\n+    public void basicTransportedUnits() {\n+        Unit transport = new Unit();\n+\n+        // We start with empty transport bays\n+        assertFalse(transport.hasTransportedUnits());\n+        assertNotNull(transport.getTransportedUnits());\n+        assertTrue(transport.getTransportedUnits().isEmpty());\n+\n+        // Create a fake unit to transprot\n+        Unit mockUnit = mock(Unit.class);\n+        when(mockUnit.getId()).thenReturn(UUID.randomUUID());\n+\n+        // Add a transported unit\n+        transport.addTransportedUnit(mockUnit);\n+\n+        // Now we should have units\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(1, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+\n+        // Adding the same unit again...\n+        transport.addTransportedUnit(mockUnit);\n+\n+        // ...should leave everything the same.", "originalCommit": "490d130ced53c847bc6c13c31c46a15fd1ec60af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg3NzE4MQ==", "url": "https://github.com/MegaMek/mekhq/pull/2185#discussion_r518877181", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...and removing the first...\n          \n          \n            \n                    // ... and removing the first...", "author": "Windchild292", "createdAt": "2020-11-06T16:51:48Z", "path": "MekHQ/unittests/mekhq/campaign/unit/UnitTransportTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * UnitTransportTest.java\n+ *\n+ * Copyright (c) 2020 The Megamek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign.unit;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.UUID;\n+\n+import org.junit.Test;\n+\n+import megamek.common.Aero;\n+import megamek.common.Entity;\n+import megamek.common.Mech;\n+\n+public class UnitTransportTest {\n+    @Test\n+    public void basicTransportedUnits() {\n+        Unit transport = new Unit();\n+\n+        // We start with empty transport bays\n+        assertFalse(transport.hasTransportedUnits());\n+        assertNotNull(transport.getTransportedUnits());\n+        assertTrue(transport.getTransportedUnits().isEmpty());\n+\n+        // Create a fake unit to transprot\n+        Unit mockUnit = mock(Unit.class);\n+        when(mockUnit.getId()).thenReturn(UUID.randomUUID());\n+\n+        // Add a transported unit\n+        transport.addTransportedUnit(mockUnit);\n+\n+        // Now we should have units\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(1, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+\n+        // Adding the same unit again...\n+        transport.addTransportedUnit(mockUnit);\n+\n+        // ...should leave everything the same.\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(1, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+\n+        Unit mockOtherUnit = mock(Unit.class);\n+        when(mockOtherUnit.getId()).thenReturn(UUID.randomUUID());\n+\n+        // We should not be able to remove an unknown unit\n+        transport.removeTransportedUnit(mockOtherUnit);\n+\n+        // But we can add at least one more unit...\n+        transport.addTransportedUnit(mockOtherUnit);\n+\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(2, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+        assertTrue(transport.getTransportedUnits().contains(mockOtherUnit));\n+\n+        // ...and removing the first...", "originalCommit": "490d130ced53c847bc6c13c31c46a15fd1ec60af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg3NzI0Nw==", "url": "https://github.com/MegaMek/mekhq/pull/2185#discussion_r518877247", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...should leave us with just that one other unit.\n          \n          \n            \n                    // ... should leave us with just that one other unit.", "author": "Windchild292", "createdAt": "2020-11-06T16:51:53Z", "path": "MekHQ/unittests/mekhq/campaign/unit/UnitTransportTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * UnitTransportTest.java\n+ *\n+ * Copyright (c) 2020 The Megamek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign.unit;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.UUID;\n+\n+import org.junit.Test;\n+\n+import megamek.common.Aero;\n+import megamek.common.Entity;\n+import megamek.common.Mech;\n+\n+public class UnitTransportTest {\n+    @Test\n+    public void basicTransportedUnits() {\n+        Unit transport = new Unit();\n+\n+        // We start with empty transport bays\n+        assertFalse(transport.hasTransportedUnits());\n+        assertNotNull(transport.getTransportedUnits());\n+        assertTrue(transport.getTransportedUnits().isEmpty());\n+\n+        // Create a fake unit to transprot\n+        Unit mockUnit = mock(Unit.class);\n+        when(mockUnit.getId()).thenReturn(UUID.randomUUID());\n+\n+        // Add a transported unit\n+        transport.addTransportedUnit(mockUnit);\n+\n+        // Now we should have units\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(1, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+\n+        // Adding the same unit again...\n+        transport.addTransportedUnit(mockUnit);\n+\n+        // ...should leave everything the same.\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(1, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+\n+        Unit mockOtherUnit = mock(Unit.class);\n+        when(mockOtherUnit.getId()).thenReturn(UUID.randomUUID());\n+\n+        // We should not be able to remove an unknown unit\n+        transport.removeTransportedUnit(mockOtherUnit);\n+\n+        // But we can add at least one more unit...\n+        transport.addTransportedUnit(mockOtherUnit);\n+\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(2, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+        assertTrue(transport.getTransportedUnits().contains(mockOtherUnit));\n+\n+        // ...and removing the first...\n+        assertTrue(transport.removeTransportedUnit(mockUnit));\n+\n+        // ...should leave us with just that one other unit.", "originalCommit": "490d130ced53c847bc6c13c31c46a15fd1ec60af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg3NzQ1OQ==", "url": "https://github.com/MegaMek/mekhq/pull/2185#discussion_r518877459", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...and clearing out our transport bays...\n          \n          \n            \n                    // ... and clearing out our transport bays...", "author": "Windchild292", "createdAt": "2020-11-06T16:52:14Z", "path": "MekHQ/unittests/mekhq/campaign/unit/UnitTransportTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * UnitTransportTest.java\n+ *\n+ * Copyright (c) 2020 The Megamek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign.unit;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.UUID;\n+\n+import org.junit.Test;\n+\n+import megamek.common.Aero;\n+import megamek.common.Entity;\n+import megamek.common.Mech;\n+\n+public class UnitTransportTest {\n+    @Test\n+    public void basicTransportedUnits() {\n+        Unit transport = new Unit();\n+\n+        // We start with empty transport bays\n+        assertFalse(transport.hasTransportedUnits());\n+        assertNotNull(transport.getTransportedUnits());\n+        assertTrue(transport.getTransportedUnits().isEmpty());\n+\n+        // Create a fake unit to transprot\n+        Unit mockUnit = mock(Unit.class);\n+        when(mockUnit.getId()).thenReturn(UUID.randomUUID());\n+\n+        // Add a transported unit\n+        transport.addTransportedUnit(mockUnit);\n+\n+        // Now we should have units\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(1, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+\n+        // Adding the same unit again...\n+        transport.addTransportedUnit(mockUnit);\n+\n+        // ...should leave everything the same.\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(1, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+\n+        Unit mockOtherUnit = mock(Unit.class);\n+        when(mockOtherUnit.getId()).thenReturn(UUID.randomUUID());\n+\n+        // We should not be able to remove an unknown unit\n+        transport.removeTransportedUnit(mockOtherUnit);\n+\n+        // But we can add at least one more unit...\n+        transport.addTransportedUnit(mockOtherUnit);\n+\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(2, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+        assertTrue(transport.getTransportedUnits().contains(mockOtherUnit));\n+\n+        // ...and removing the first...\n+        assertTrue(transport.removeTransportedUnit(mockUnit));\n+\n+        // ...should leave us with just that one other unit.\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(1, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockOtherUnit));\n+\n+        // ...and clearing out our transport bays...", "originalCommit": "490d130ced53c847bc6c13c31c46a15fd1ec60af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg3NzUwOQ==", "url": "https://github.com/MegaMek/mekhq/pull/2185#discussion_r518877509", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...should leave us empty again.\n          \n          \n            \n                    // ... should leave us empty again.", "author": "Windchild292", "createdAt": "2020-11-06T16:52:20Z", "path": "MekHQ/unittests/mekhq/campaign/unit/UnitTransportTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * UnitTransportTest.java\n+ *\n+ * Copyright (c) 2020 The Megamek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign.unit;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.UUID;\n+\n+import org.junit.Test;\n+\n+import megamek.common.Aero;\n+import megamek.common.Entity;\n+import megamek.common.Mech;\n+\n+public class UnitTransportTest {\n+    @Test\n+    public void basicTransportedUnits() {\n+        Unit transport = new Unit();\n+\n+        // We start with empty transport bays\n+        assertFalse(transport.hasTransportedUnits());\n+        assertNotNull(transport.getTransportedUnits());\n+        assertTrue(transport.getTransportedUnits().isEmpty());\n+\n+        // Create a fake unit to transprot\n+        Unit mockUnit = mock(Unit.class);\n+        when(mockUnit.getId()).thenReturn(UUID.randomUUID());\n+\n+        // Add a transported unit\n+        transport.addTransportedUnit(mockUnit);\n+\n+        // Now we should have units\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(1, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+\n+        // Adding the same unit again...\n+        transport.addTransportedUnit(mockUnit);\n+\n+        // ...should leave everything the same.\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(1, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+\n+        Unit mockOtherUnit = mock(Unit.class);\n+        when(mockOtherUnit.getId()).thenReturn(UUID.randomUUID());\n+\n+        // We should not be able to remove an unknown unit\n+        transport.removeTransportedUnit(mockOtherUnit);\n+\n+        // But we can add at least one more unit...\n+        transport.addTransportedUnit(mockOtherUnit);\n+\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(2, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockUnit));\n+        assertTrue(transport.getTransportedUnits().contains(mockOtherUnit));\n+\n+        // ...and removing the first...\n+        assertTrue(transport.removeTransportedUnit(mockUnit));\n+\n+        // ...should leave us with just that one other unit.\n+        assertTrue(transport.hasTransportedUnits());\n+        assertEquals(1, transport.getTransportedUnits().size());\n+        assertTrue(transport.getTransportedUnits().contains(mockOtherUnit));\n+\n+        // ...and clearing out our transport bays...\n+        transport.clearTransportedUnits();\n+\n+        // ...should leave us empty again.", "originalCommit": "490d130ced53c847bc6c13c31c46a15fd1ec60af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk0NzIzOA==", "url": "https://github.com/MegaMek/mekhq/pull/2185#discussion_r518947238", "bodyText": "What about the case whereby a unit is assigned to this transport according to the unit but not according to the transport ship?", "author": "Windchild292", "createdAt": "2020-11-06T19:03:26Z", "path": "MekHQ/src/mekhq/campaign/unit/Unit.java", "diffHunk": "@@ -1569,20 +1611,23 @@ public double calcInfantryBayWeight(Entity unit) {\n      * @param u The unit that we wish to unload from this transport\n      */\n     public void unloadFromTransportShip(Unit u) {\n-        int unitType = u.getEntity().getUnitType();\n-        double unitWeight;\n-        if (u.getEntity().getUnitType() == UnitType.INFANTRY) {\n-            unitWeight = calcInfantryBayWeight(u.getEntity());\n-        } else {\n-            unitWeight = u.getEntity().getWeight();\n-        }\n-        for (UUID id : u.getTransportShipId().keySet()) {\n-            int bayNumber = u.getTransportShipId().get(id);\n-            updateBayCapacity(unitType, unitWeight, true, bayNumber);\n-        }\n-        removeTransportedUnit(u.getId());\n-        u.getTransportShipId().clear();\n+        // Only unload and update the transport assignment for a unit\n+        // if we have actually transported them.\n+        if (removeTransportedUnit(u)) {", "originalCommit": "490d130ced53c847bc6c13c31c46a15fd1ec60af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk0NzQyNg==", "url": "https://github.com/MegaMek/mekhq/pull/2185#discussion_r518947426", "bodyText": "Trinary candidate.", "author": "Windchild292", "createdAt": "2020-11-06T19:03:51Z", "path": "MekHQ/src/mekhq/campaign/unit/Unit.java", "diffHunk": "@@ -1569,20 +1611,23 @@ public double calcInfantryBayWeight(Entity unit) {\n      * @param u The unit that we wish to unload from this transport\n      */\n     public void unloadFromTransportShip(Unit u) {\n-        int unitType = u.getEntity().getUnitType();\n-        double unitWeight;\n-        if (u.getEntity().getUnitType() == UnitType.INFANTRY) {\n-            unitWeight = calcInfantryBayWeight(u.getEntity());\n-        } else {\n-            unitWeight = u.getEntity().getWeight();\n-        }\n-        for (UUID id : u.getTransportShipId().keySet()) {\n-            int bayNumber = u.getTransportShipId().get(id);\n-            updateBayCapacity(unitType, unitWeight, true, bayNumber);\n-        }\n-        removeTransportedUnit(u.getId());\n-        u.getTransportShipId().clear();\n+        // Only unload and update the transport assignment for a unit\n+        // if we have actually transported them.\n+        if (removeTransportedUnit(u)) {\n+            double unitWeight;\n+            if (u.getEntity().getUnitType() == UnitType.INFANTRY) {\n+                unitWeight = calcInfantryBayWeight(u.getEntity());\n+            } else {\n+                unitWeight = u.getEntity().getWeight();\n+            }", "originalCommit": "490d130ced53c847bc6c13c31c46a15fd1ec60af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cfb0bda7a8497b5a1d1be62cf0efcff185a1a332", "url": "https://github.com/MegaMek/mekhq/commit/cfb0bda7a8497b5a1d1be62cf0efcff185a1a332", "message": "Apply suggestions from code review\n\nCo-authored-by: Justin Bowen <39067288+Windchild292@users.noreply.github.com>", "committedDate": "2020-11-06T19:09:39Z", "type": "commit"}, {"oid": "b7adb6e21c09e751146a877f4e3c98e78eb044ef", "url": "https://github.com/MegaMek/mekhq/commit/b7adb6e21c09e751146a877f4e3c98e78eb044ef", "message": "Merge remote-tracking branch 'upstream/master' into use-units-not-ids-for-transports", "committedDate": "2020-11-06T19:12:29Z", "type": "commit"}, {"oid": "18cddebe515dbc58e76c49ef789cb3f4b31bc8a2", "url": "https://github.com/MegaMek/mekhq/commit/18cddebe515dbc58e76c49ef789cb3f4b31bc8a2", "message": "Address PR feedback and fix #1801", "committedDate": "2020-11-06T19:57:11Z", "type": "commit"}, {"oid": "dd8b9c84414cb11c30ec6e2d395e2260235cd73a", "url": "https://github.com/MegaMek/mekhq/commit/dd8b9c84414cb11c30ec6e2d395e2260235cd73a", "message": "Fix extraneous whitespace", "committedDate": "2020-11-06T19:58:38Z", "type": "commit"}, {"oid": "0b8b8c2cf2c31b0b306f3b44d7562aab438099f7", "url": "https://github.com/MegaMek/mekhq/commit/0b8b8c2cf2c31b0b306f3b44d7562aab438099f7", "message": "Fix LGTM find", "committedDate": "2020-11-06T20:40:18Z", "type": "commit"}, {"oid": "f290da507ec49b5975faddb1c39b928caa24e920", "url": "https://github.com/MegaMek/mekhq/commit/f290da507ec49b5975faddb1c39b928caa24e920", "message": "Update tests based on review comments", "committedDate": "2020-11-06T20:40:31Z", "type": "commit"}]}