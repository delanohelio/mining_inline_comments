{"pr_number": 1776, "pr_title": "Command center", "pr_createdAt": "2020-05-31T15:09:28Z", "pr_url": "https://github.com/MegaMek/mekhq/pull/1776", "timeline": [{"oid": "7f101ee73c637e18b919b37e84e72370f7aeb71c", "url": "https://github.com/MegaMek/mekhq/commit/7f101ee73c637e18b919b37e84e72370f7aeb71c", "message": "added basic tab, nothing in it yet", "committedDate": "2020-06-02T20:13:27Z", "type": "commit"}, {"oid": "7bfa5fe0ace5b3e9d68be8bf8d8063f427afa8e8", "url": "https://github.com/MegaMek/mekhq/commit/7bfa5fe0ace5b3e9d68be8bf8d8063f427afa8e8", "message": "tab properties for command center", "committedDate": "2020-06-02T20:13:28Z", "type": "commit"}, {"oid": "9356cae85a84a96c4c374a01adff6a64f6aae8c5", "url": "https://github.com/MegaMek/mekhq/commit/9356cae85a84a96c4c374a01adff6a64f6aae8c5", "message": "procurement table for command center", "committedDate": "2020-06-02T20:13:28Z", "type": "commit"}, {"oid": "eb68877362f52ca12035fd3630c6bb87f9127f3c", "url": "https://github.com/MegaMek/mekhq/commit/eb68877362f52ca12035fd3630c6bb87f9127f3c", "message": "remove acquisition tables from hangar and warehouse tab", "committedDate": "2020-06-02T20:13:28Z", "type": "commit"}, {"oid": "fb2ff003c99c0b7deff17cd9b77c8d84168d15ff", "url": "https://github.com/MegaMek/mekhq/commit/fb2ff003c99c0b7deff17cd9b77c8d84168d15ff", "message": "added daily report to command center tab", "committedDate": "2020-06-02T20:13:28Z", "type": "commit"}, {"oid": "e8ba9d5f06492e67ece34b03d1ed15c5c5afbb46", "url": "https://github.com/MegaMek/mekhq/commit/e8ba9d5f06492e67ece34b03d1ed15c5c5afbb46", "message": "removed old report log panel from CampaignGUI", "committedDate": "2020-06-02T20:13:28Z", "type": "commit"}, {"oid": "7b08c46f9803717983751400456a23b5864662f0", "url": "https://github.com/MegaMek/mekhq/commit/7b08c46f9803717983751400456a23b5864662f0", "message": "added overview tabs to command center", "committedDate": "2020-06-02T20:13:29Z", "type": "commit"}, {"oid": "9c207196fe8e579b129f68b46ab750d0fc9c5bcf", "url": "https://github.com/MegaMek/mekhq/commit/9c207196fe8e579b129f68b46ab750d0fc9c5bcf", "message": "removed old overview tab", "committedDate": "2020-06-02T20:13:29Z", "type": "commit"}, {"oid": "5939ed4a6bbb0e611c996f4b1ae7d8bcec9877fb", "url": "https://github.com/MegaMek/mekhq/commit/5939ed4a6bbb0e611c996f4b1ae7d8bcec9877fb", "message": "fixed procurement time not refreshing on new day", "committedDate": "2020-06-02T20:13:29Z", "type": "commit"}, {"oid": "8ab5a80f9e7f3b1cf0850314bcb4cfbe2d30dcee", "url": "https://github.com/MegaMek/mekhq/commit/8ab5a80f9e7f3b1cf0850314bcb4cfbe2d30dcee", "message": "moved initialization of gui subelements to separate methods", "committedDate": "2020-06-02T20:13:29Z", "type": "commit"}, {"oid": "67775289b8410a3341895cce8b74aa1a67b1c1d0", "url": "https://github.com/MegaMek/mekhq/commit/67775289b8410a3341895cce8b74aa1a67b1c1d0", "message": "basic gridbaglayout for Command Center", "committedDate": "2020-06-02T20:13:29Z", "type": "commit"}, {"oid": "30d8ca532c1600226798022a4ca0effff6ccb675", "url": "https://github.com/MegaMek/mekhq/commit/30d8ca532c1600226798022a4ca0effff6ccb675", "message": "moved parts in use to a dialog", "committedDate": "2020-06-02T20:13:29Z", "type": "commit"}, {"oid": "6f2cd239108af20a9dbd2e4d636c0c3583243661", "url": "https://github.com/MegaMek/mekhq/commit/6f2cd239108af20a9dbd2e4d636c0c3583243661", "message": "buttons and dialogs for reports rather than tabs", "committedDate": "2020-06-02T20:13:30Z", "type": "commit"}, {"oid": "c572cebf20b7b55252abe328fb1a30b53ff1f87b", "url": "https://github.com/MegaMek/mekhq/commit/c572cebf20b7b55252abe328fb1a30b53ff1f87b", "message": "resources for report buttons and better sizing of command center buttons", "committedDate": "2020-06-02T20:13:30Z", "type": "commit"}, {"oid": "65ddc0ba30c9879f589575fc996916b884d6f8be", "url": "https://github.com/MegaMek/mekhq/commit/65ddc0ba30c9879f589575fc996916b884d6f8be", "message": "beginning of basic info panel", "committedDate": "2020-06-02T20:13:30Z", "type": "commit"}, {"oid": "79f91858527b640a409754de132fcecfcde18b31", "url": "https://github.com/MegaMek/mekhq/commit/79f91858527b640a409754de132fcecfcde18b31", "message": "border around daily log", "committedDate": "2020-06-02T20:13:30Z", "type": "commit"}, {"oid": "4def49fa62f1a3bd8dffb22855c5f7154bef9a84", "url": "https://github.com/MegaMek/mekhq/commit/4def49fa62f1a3bd8dffb22855c5f7154bef9a84", "message": "new method for determining if personnel is free", "committedDate": "2020-06-02T20:13:30Z", "type": "commit"}, {"oid": "cf6486cd5532970078b027de7c66f247607b5c46", "url": "https://github.com/MegaMek/mekhq/commit/cf6486cd5532970078b027de7c66f247607b5c46", "message": "one line for personnel", "committedDate": "2020-06-02T20:13:30Z", "type": "commit"}, {"oid": "6eb41c027ed3f2da8e9544860e5689a06c48ee2c", "url": "https://github.com/MegaMek/mekhq/commit/6eb41c027ed3f2da8e9544860e5689a06c48ee2c", "message": "added force composition to unit summary information in command center", "committedDate": "2020-06-02T20:13:30Z", "type": "commit"}, {"oid": "1613f4eaef3ee45cdcf27adc3dd0a3bf68450a51", "url": "https://github.com/MegaMek/mekhq/commit/1613f4eaef3ee45cdcf27adc3dd0a3bf68450a51", "message": "added injured personnel to personnel summary", "committedDate": "2020-06-02T20:13:31Z", "type": "commit"}, {"oid": "a907d8f30d3813314fcb71d03f14606170acf591", "url": "https://github.com/MegaMek/mekhq/commit/a907d8f30d3813314fcb71d03f14606170acf591", "message": "transport and cargo capacity summaries for command center", "committedDate": "2020-06-02T20:13:31Z", "type": "commit"}, {"oid": "71d6bb2c42dc62f1acc519a37fecd3399765cf9e", "url": "https://github.com/MegaMek/mekhq/commit/71d6bb2c42dc62f1acc519a37fecd3399765cf9e", "message": "force repair status in command center", "committedDate": "2020-06-02T20:13:31Z", "type": "commit"}, {"oid": "31d0628a1ae3711153edf0ef5fb364e11110d4be", "url": "https://github.com/MegaMek/mekhq/commit/31d0628a1ae3711153edf0ef5fb364e11110d4be", "message": "refactored summary reports for command center into a CampaignSummary object", "committedDate": "2020-06-02T20:13:31Z", "type": "commit"}, {"oid": "b0c39a43a592170ea8bdbd35c329702ad6724e8a", "url": "https://github.com/MegaMek/mekhq/commit/b0c39a43a592170ea8bdbd35c329702ad6724e8a", "message": "unit icon for command center", "committedDate": "2020-06-02T20:13:31Z", "type": "commit"}, {"oid": "abed41bbda40096602a93d8dbd2982203eb53716", "url": "https://github.com/MegaMek/mekhq/commit/abed41bbda40096602a93d8dbd2982203eb53716", "message": "removed all references to mainPanel", "committedDate": "2020-06-02T20:13:31Z", "type": "commit"}, {"oid": "8de000925ffbdae3d315b5d4a46aa81bd34d435c", "url": "https://github.com/MegaMek/mekhq/commit/8de000925ffbdae3d315b5d4a46aa81bd34d435c", "message": "removed unit rating from bottom of main panel", "committedDate": "2020-06-02T20:13:31Z", "type": "commit"}, {"oid": "20cde98b564e3d79e45e939c075f0d98bd90e63b", "url": "https://github.com/MegaMek/mekhq/commit/20cde98b564e3d79e45e939c075f0d98bd90e63b", "message": "better insets for basic info in command center", "committedDate": "2020-06-02T20:13:31Z", "type": "commit"}, {"oid": "9cf7da15dfbfd090183c20fb58789828774b5099", "url": "https://github.com/MegaMek/mekhq/commit/9cf7da15dfbfd090183c20fb58789828774b5099", "message": "NPE bug on campaigns with no unit rating", "committedDate": "2020-06-02T20:13:32Z", "type": "commit"}, {"oid": "33014ad079f7b94e4f03edf92c7e4569e408c05e", "url": "https://github.com/MegaMek/mekhq/commit/33014ad079f7b94e4f03edf92c7e4569e408c05e", "message": "show last resolution on repair tab", "committedDate": "2020-06-02T20:13:32Z", "type": "commit"}, {"oid": "547f86815727c47d96ee7ebcb3f244e0039c0560", "url": "https://github.com/MegaMek/mekhq/commit/547f86815727c47d96ee7ebcb3f244e0039c0560", "message": "added hyperlink listener to repair tab last check", "committedDate": "2020-06-02T20:13:32Z", "type": "commit"}, {"oid": "ea4bfcfb33512d1b973dd64cec3051717829d07e", "url": "https://github.com/MegaMek/mekhq/commit/ea4bfcfb33512d1b973dd64cec3051717829d07e", "message": "color the command center tab when report appended to indicaate new information", "committedDate": "2020-06-02T20:13:32Z", "type": "commit"}, {"oid": "2af338ace2d76cc5523019dc65414bea0966bd42", "url": "https://github.com/MegaMek/mekhq/commit/2af338ace2d76cc5523019dc65414bea0966bd42", "message": "fixed bug with negative transport capacity", "committedDate": "2020-06-02T20:13:32Z", "type": "commit"}, {"oid": "2af338ace2d76cc5523019dc65414bea0966bd42", "url": "https://github.com/MegaMek/mekhq/commit/2af338ace2d76cc5523019dc65414bea0966bd42", "message": "fixed bug with negative transport capacity", "committedDate": "2020-06-02T20:13:32Z", "type": "forcePushed"}, {"oid": "3ed5043c1810ec876c868fd59e3d8cd2ab877d24", "url": "https://github.com/MegaMek/mekhq/commit/3ed5043c1810ec876c868fd59e3d8cd2ab877d24", "message": "removed unnecessary imports and added javadoc info", "committedDate": "2020-06-02T21:02:03Z", "type": "commit"}, {"oid": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "url": "https://github.com/MegaMek/mekhq/commit/9172aa72bf9606eca418e8f737b35a9dbee8593b", "message": "resize report dialogs properly", "committedDate": "2020-06-02T21:07:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE4OTM0Mw==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434189343", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(col == COL_TYPE) {\n          \n          \n            \n                    if (col == COL_TYPE) {", "author": "Windchild292", "createdAt": "2020-06-02T21:36:04Z", "path": "MekHQ/src/mekhq/gui/model/ProcurementTableModel.java", "diffHunk": "@@ -88,6 +93,15 @@ public Object getValueAt(int row, int col) {\n         if(col == COL_NAME) {\n             return shoppingItem.getAcquisitionName();\n         }\n+        if(col == COL_TYPE) {", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE4OTQyMg==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434189422", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if(shoppingItem instanceof UnitOrder) {\n          \n          \n            \n                            return \"Unit\";\n          \n          \n            \n                        } else if(shoppingItem instanceof Part) {\n          \n          \n            \n                        if (shoppingItem instanceof UnitOrder) {\n          \n          \n            \n                            return \"Unit\";\n          \n          \n            \n                        } else if (shoppingItem instanceof Part) {", "author": "Windchild292", "createdAt": "2020-06-02T21:36:15Z", "path": "MekHQ/src/mekhq/gui/model/ProcurementTableModel.java", "diffHunk": "@@ -88,6 +93,15 @@ public Object getValueAt(int row, int col) {\n         if(col == COL_NAME) {\n             return shoppingItem.getAcquisitionName();\n         }\n+        if(col == COL_TYPE) {\n+            if(shoppingItem instanceof UnitOrder) {\n+                return \"Unit\";\n+            } else if(shoppingItem instanceof Part) {", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE4OTU2OA==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434189568", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            case COL_TOTAL_COST:\n          \n          \n            \n                                case COL_QUEUE:\n          \n          \n            \n                            case COL_TOTAL_COST:\n          \n          \n            \n                            case COL_QUEUE:", "author": "Windchild292", "createdAt": "2020-06-02T21:36:38Z", "path": "MekHQ/src/mekhq/gui/model/ProcurementTableModel.java", "diffHunk": "@@ -150,11 +164,13 @@ public int getColumnWidth(int c) {\n \n     public int getAlignment(int col) {\n         switch(col) {\n-        case COL_COST:\n-        case COL_TOTAL_COST:\n-            return SwingConstants.RIGHT;\n+            case COL_COST:\n+                case COL_TOTAL_COST:\n+                    case COL_QUEUE:", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzMjY1Mg==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434232652", "bodyText": "yeah, intellij was having a real problem with proper indenting on switches", "author": "AaronGullickson", "createdAt": "2020-06-02T23:40:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE4OTU2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE4OTYxOA==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434189618", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    case COL_NEXT:\n          \n          \n            \n                        case COL_TYPE:\n          \n          \n            \n                    case COL_NEXT:\n          \n          \n            \n                    case COL_TYPE:", "author": "Windchild292", "createdAt": "2020-06-02T21:36:47Z", "path": "MekHQ/src/mekhq/gui/model/ProcurementTableModel.java", "diffHunk": "@@ -150,11 +164,13 @@ public int getColumnWidth(int c) {\n \n     public int getAlignment(int col) {\n         switch(col) {\n-        case COL_COST:\n-        case COL_TOTAL_COST:\n-            return SwingConstants.RIGHT;\n+            case COL_COST:\n+                case COL_TOTAL_COST:\n+                    case COL_QUEUE:\n+                return SwingConstants.RIGHT;\n         case COL_TARGET:\n         case COL_NEXT:\n+            case COL_TYPE:", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MDE1Nw==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434190157", "bodyText": "Suggested change", "author": "Windchild292", "createdAt": "2020-06-02T21:38:01Z", "path": "MekHQ/src/mekhq/gui/RepairTab.java", "diffHunk": "@@ -133,6 +123,8 @@\n         super(gui, name);\n         MekHQ.registerHandler(this);\n         setUserPreferences();\n+\n+", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MDMzMQ==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434190331", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    DefaultCaret caret = (DefaultCaret)txtResult.getCaret();\n          \n          \n            \n                    DefaultCaret caret = (DefaultCaret) txtResult.getCaret();", "author": "Windchild292", "createdAt": "2020-06-02T21:38:24Z", "path": "MekHQ/src/mekhq/gui/RepairTab.java", "diffHunk": "@@ -377,6 +369,27 @@ public void propertyChange(PropertyChangeEvent evt) {\n         gridBagConstraints.weightx = 1.0;\n         panTasks.add(panDoTaskText, gridBagConstraints);\n \n+        txtResult = new JTextPane();\n+        txtResult.addHyperlinkListener(getCampaignGui().getReportHLL());\n+        txtResult.setContentType(\"text/html\"); // NOI18N\n+        txtResult.setEditable(false);\n+        DefaultCaret caret = (DefaultCaret)txtResult.getCaret();", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MDQxMw==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434190413", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    txtResult.setBorder(new EmptyBorder(2,5,2,2));\n          \n          \n            \n                    txtResult.setBorder(new EmptyBorder(2, 5, 2, 2));", "author": "Windchild292", "createdAt": "2020-06-02T21:38:37Z", "path": "MekHQ/src/mekhq/gui/RepairTab.java", "diffHunk": "@@ -377,6 +369,27 @@ public void propertyChange(PropertyChangeEvent evt) {\n         gridBagConstraints.weightx = 1.0;\n         panTasks.add(panDoTaskText, gridBagConstraints);\n \n+        txtResult = new JTextPane();\n+        txtResult.addHyperlinkListener(getCampaignGui().getReportHLL());\n+        txtResult.setContentType(\"text/html\"); // NOI18N\n+        txtResult.setEditable(false);\n+        DefaultCaret caret = (DefaultCaret)txtResult.getCaret();\n+        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);\n+        txtResult.setBorder(new EmptyBorder(2,5,2,2));", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MDY2MA==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434190660", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } catch (Exception e) {\n          \n          \n            \n                        // Ignore\n          \n          \n            \n                    }\n          \n          \n            \n                    } catch (Exception ignored) {\n          \n          \n            \n            \n          \n          \n            \n                    }", "author": "Windchild292", "createdAt": "2020-06-02T21:39:13Z", "path": "MekHQ/src/mekhq/gui/RepairTab.java", "diffHunk": "@@ -644,7 +657,19 @@ private void doTask() {\n                 return;\n             }\n         }\n-        getCampaign().fixPart(part, selectedTech);\n+        String r = getCampaign().fixPart(part, selectedTech);\n+\n+        Reader stringReader = new StringReader(r);\n+        HTMLEditorKit htmlKit = new HTMLEditorKit();\n+        HTMLDocument blank = (HTMLDocument) htmlKit.createDefaultDocument();\n+        try {\n+            htmlKit.read(stringReader, blank, 0);\n+        } catch (Exception e) {\n+            // Ignore\n+        }", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MTQxOA==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434191418", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if(tabMain.getSelectedIndex() == 0) {\n          \n          \n            \n                            if (tabMain.getSelectedIndex() == 0) {", "author": "Windchild292", "createdAt": "2020-06-02T21:40:53Z", "path": "MekHQ/src/mekhq/gui/CampaignGUI.java", "diffHunk": "@@ -310,24 +267,31 @@ private void initComponents() {\n         addStandardTab(GuiTabType.INFIRMARY);\n         addStandardTab(GuiTabType.MEKLAB);\n         addStandardTab(GuiTabType.FINANCES);\n-        addStandardTab(GuiTabType.OVERVIEW);\n \n-        initMain();\n+        //check to see if we just selected the command center tab\n+        //and if so change its color to standard\n+        tabMain.addChangeListener(new ChangeListener() {\n+            public void stateChanged(ChangeEvent e) {\n+                if(tabMain.getSelectedIndex() == 0) {", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MjE2OQ==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434192169", "bodyText": "The two KeyEvent removals need to be removed from the View Menu Mnemonic list comment above", "author": "Windchild292", "createdAt": "2020-06-02T21:42:40Z", "path": "MekHQ/src/mekhq/gui/CampaignGUI.java", "diffHunk": "@@ -967,18 +930,6 @@ private void initMenu() {\n         miHistoricalDailyReportDialog.addActionListener(evt -> showHistoricalDailyReportDialog());\n         menuView.add(miHistoricalDailyReportDialog);\n \n-        miAttachLog = new JMenuItem(resourceMap.getString(\"miAttachLog.text\")); // NOI18N\n-        miAttachLog.setMnemonic(KeyEvent.VK_A);\n-        miAttachLog.addActionListener(evt -> hideDailyReportDialog());\n-        miAttachLog.setVisible(logDialog.isVisible());\n-        menuView.add(miAttachLog);\n-\n-        miDetachLog = new JMenuItem(resourceMap.getString(\"miDetachLog.text\")); // NOI18N\n-        miDetachLog.setMnemonic(KeyEvent.VK_D);\n-        miDetachLog.addActionListener(evt -> showDailyReportDialog());\n-        miDetachLog.setVisible(!logDialog.isVisible());\n-        menuView.add(miDetachLog);", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzOTQwNQ==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434239405", "bodyText": "Fixed in 4c301fa", "author": "AaronGullickson", "createdAt": "2020-06-03T00:05:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MjE2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MjMxNw==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434192317", "bodyText": "Same as above", "author": "Windchild292", "createdAt": "2020-06-02T21:43:00Z", "path": "MekHQ/src/mekhq/gui/CampaignGUI.java", "diffHunk": "@@ -990,12 +941,6 @@ private void initMenu() {\n         miRetirementDefectionDialog.addActionListener(evt -> showRetirementDefectionDialog());\n         menuView.add(miRetirementDefectionDialog);\n \n-        miShowOverview = new JCheckBoxMenuItem(resourceMap.getString(\"miShowOverview.text\"));\n-        miShowOverview.setMnemonic(KeyEvent.VK_O);\n-        miShowOverview.setSelected(hasTab(GuiTabType.OVERVIEW));\n-        miShowOverview.addActionListener(evt -> toggleOverviewTab());\n-        menuView.add(miShowOverview);", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzOTQ2OA==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434239468", "bodyText": "fixed in 4c301fa", "author": "AaronGullickson", "createdAt": "2020-06-03T00:05:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MjMxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MjUxMw==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434192513", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(!logNagActive) {\n          \n          \n            \n                    if (!logNagActive) {", "author": "Windchild292", "createdAt": "2020-06-02T21:43:29Z", "path": "MekHQ/src/mekhq/gui/CampaignGUI.java", "diffHunk": "@@ -2576,6 +2489,20 @@ private void savePartsFile() {\n         }\n     }\n \n+    /**\n+     * Check to see if the command center tab is currently active and if not, color the tab. Should be\n+     * called when items are added to daily report log panel and user is not on the command center tab\n+     * in order to draw attention to it\n+     */\n+    public void checkDailyLogNag() {\n+        if(!logNagActive) {", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MzMzNA==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434193334", "bodyText": "This removal needs to be recorded in the list at {@link CampaignGUI#initMenu()}", "author": "Windchild292", "createdAt": "2020-06-02T21:45:20Z", "path": "MekHQ/src/mekhq/gui/GuiTabType.java", "diffHunk": "@@ -33,17 +33,17 @@\n  */\n public enum GuiTabType {\n     //region Enum Declaration\n-    TOE(0,  \"panOrganization.TabConstraints.tabTitle\", KeyEvent.VK_T),\n-    BRIEFING(1, \"panBriefing.TabConstraints.tabTitle\", KeyEvent.VK_B),\n-    MAP(2, \"panMap.TabConstraints.tabTitle\", KeyEvent.VK_S),\n-    PERSONNEL(3, \"panPersonnel.TabConstraints.tabTitle\", KeyEvent.VK_P),\n-    HANGAR(4, \"panHangar.TabConstraints.tabTitle\", KeyEvent.VK_H),\n-    WAREHOUSE(5, \"panSupplies.TabConstraints.tabTitle\", KeyEvent.VK_W),\n-    REPAIR(6, \"panRepairBay.TabConstraints.tabTitle\", KeyEvent.VK_R),\n-    INFIRMARY(7, \"panInfirmary.TabConstraints.tabTitle\", KeyEvent.VK_I),\n-    MEKLAB(8, \"panMekLab.TabConstraints.tabTitle\", KeyEvent.VK_L),\n-    FINANCES(9, \"panFinances.TabConstraints.tabTitle\", KeyEvent.VK_N),\n-    OVERVIEW(10, \"panOverview.TabConstraints.tabTitle\", KeyEvent.VK_O),", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzOTU2OA==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434239568", "bodyText": "I just changed the command center tab to VK_O to avoid problems in commit 4c301fa", "author": "AaronGullickson", "createdAt": "2020-06-03T00:06:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MzMzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MzQwOQ==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434193409", "bodyText": "This will cause issues as the VK_C is currently used for the Manage Campaign Dropdown. The dropdown should be changed, and there is a list of open letters in {@link CampaignGUI#initMenu()}", "author": "Windchild292", "createdAt": "2020-06-02T21:45:30Z", "path": "MekHQ/src/mekhq/gui/GuiTabType.java", "diffHunk": "@@ -33,17 +33,17 @@\n  */\n public enum GuiTabType {\n     //region Enum Declaration\n-    TOE(0,  \"panOrganization.TabConstraints.tabTitle\", KeyEvent.VK_T),\n-    BRIEFING(1, \"panBriefing.TabConstraints.tabTitle\", KeyEvent.VK_B),\n-    MAP(2, \"panMap.TabConstraints.tabTitle\", KeyEvent.VK_S),\n-    PERSONNEL(3, \"panPersonnel.TabConstraints.tabTitle\", KeyEvent.VK_P),\n-    HANGAR(4, \"panHangar.TabConstraints.tabTitle\", KeyEvent.VK_H),\n-    WAREHOUSE(5, \"panSupplies.TabConstraints.tabTitle\", KeyEvent.VK_W),\n-    REPAIR(6, \"panRepairBay.TabConstraints.tabTitle\", KeyEvent.VK_R),\n-    INFIRMARY(7, \"panInfirmary.TabConstraints.tabTitle\", KeyEvent.VK_I),\n-    MEKLAB(8, \"panMekLab.TabConstraints.tabTitle\", KeyEvent.VK_L),\n-    FINANCES(9, \"panFinances.TabConstraints.tabTitle\", KeyEvent.VK_N),\n-    OVERVIEW(10, \"panOverview.TabConstraints.tabTitle\", KeyEvent.VK_O),\n+    COMMAND(0,  \"panCommand.TabConstraints.tabTitle\", KeyEvent.VK_C),", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzOTU5OA==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434239598", "bodyText": "Fixed this in 4c301fa. See above", "author": "AaronGullickson", "createdAt": "2020-06-03T00:06:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MzQwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5Mzc2MQ==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434193761", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n          \n          \n            \n             * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.", "author": "Windchild292", "createdAt": "2020-06-02T21:46:19Z", "path": "MekHQ/src/mekhq/gui/dialog/PartsReportDialog.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5Mzk3OA==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434193978", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n          \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the", "author": "Windchild292", "createdAt": "2020-06-02T21:46:50Z", "path": "MekHQ/src/mekhq/gui/dialog/PartsReportDialog.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5Mzk5Ng==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434193996", "bodyText": "Accessibility issue... double space should never be used in text", "author": "Windchild292", "createdAt": "2020-06-02T21:46:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5Mzk3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NDI4Ng==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434194286", "bodyText": "Is this intended to never include column 0?", "author": "Windchild292", "createdAt": "2020-06-02T21:47:37Z", "path": "MekHQ/src/mekhq/gui/dialog/PartsReportDialog.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.gui.dialog;\n+\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.parts.Part;\n+import mekhq.campaign.parts.PartInUse;\n+import mekhq.campaign.work.IAcquisitionWork;\n+import mekhq.gui.CampaignGUI;\n+import mekhq.gui.model.PartsInUseTableModel;\n+import mekhq.gui.sorter.FormattedNumberSorter;\n+import mekhq.gui.sorter.TwoNumbersSorter;\n+\n+import javax.swing.*;\n+import javax.swing.table.TableColumn;\n+import javax.swing.table.TableColumnModel;\n+import javax.swing.table.TableRowSorter;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.util.Collections;\n+\n+/**\n+ * A dialog to show parts in use, ordered, in transit with actionable buttons for buying or adding more\n+ * taken from the Overview tab originally but now a dialog.\n+ */\n+public class PartsReportDialog extends JDialog {\n+\n+    private JPanel overviewPartsPanel;\n+    private JTable overviewPartsInUseTable;\n+    private PartsInUseTableModel overviewPartsModel;\n+\n+    private Campaign campaign;\n+    private CampaignGUI gui;\n+\n+    public PartsReportDialog(CampaignGUI gui, boolean modal) {\n+        super(gui.getFrame(), modal);\n+        this.gui = gui;\n+        this.campaign = gui.getCampaign();\n+        initComponents();\n+        refreshOverviewPartsInUse();\n+        pack();\n+        setLocationRelativeTo(gui.getFrame());\n+    }\n+\n+    private void initComponents() {\n+        overviewPartsPanel = new JPanel(new BorderLayout());\n+\n+        overviewPartsModel = new PartsInUseTableModel();\n+        overviewPartsInUseTable = new JTable(overviewPartsModel);\n+        overviewPartsInUseTable.setRowSelectionAllowed(false);\n+        overviewPartsInUseTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);\n+        TableColumn column;\n+        for (int i = 0; i < overviewPartsModel.getColumnCount(); ++i) {", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzNzU4Nw==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434237587", "bodyText": "I don't know. I copied over existing code to put it in a dialog. But the existing table has seen heavy use and I don't think any problems.", "author": "AaronGullickson", "createdAt": "2020-06-02T23:58:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NDI4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NjM1Mg==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434196352", "bodyText": "Could we please swap this to instead by a unique object? I've been running into and finding issues with both Portraits and camo because we use multiple strings instead of tracking through an object.", "author": "Windchild292", "createdAt": "2020-06-02T21:52:48Z", "path": "MekHQ/src/mekhq/campaign/Campaign.java", "diffHunk": "@@ -239,6 +238,12 @@\n     private String camoFileName = null;\n     private int colorIndex = 0;\n \n+    //unit icon\n+    public static final String ROOT_ICON = \"-- General --\";\n+    public static final String ICON_NONE = \"None\";\n+    private String iconCategory = ROOT_ICON;\n+    private String iconFileName = ICON_NONE;", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzNTk5MQ==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434235991", "bodyText": "Not sure what you had in mind. Is there an example in the code?", "author": "AaronGullickson", "createdAt": "2020-06-02T23:53:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NjM1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0NTc5Ng==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434245796", "bodyText": "There currently is not, but I've got some code I was forced to abandon due to a git issue that I'll fix up and share in a bit.", "author": "Windchild292", "createdAt": "2020-06-03T00:30:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NjM1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1NDI2Mg==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434254262", "bodyText": "Actually, ignore this... I started to look at it again and realised an abstract approach would be better, so that's future work.", "author": "Windchild292", "createdAt": "2020-06-03T01:03:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NjM1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NjgzOA==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434196838", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n          \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the", "author": "Windchild292", "createdAt": "2020-06-02T21:54:04Z", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5Njg4NQ==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434196885", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n          \n          \n            \n             * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.", "author": "Windchild292", "createdAt": "2020-06-02T21:54:12Z", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NzI1MQ==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434197251", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (Person p : campaign.getPersonnel()) {\n          \n          \n            \n                        // Add them to the total count\n          \n          \n            \n                        if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n          \n          \n            \n                            continue;\n          \n          \n            \n                        }\n          \n          \n            \n                    for (Person p : campaign.getActivePersonnel()) {\n          \n          \n            \n                        // Add them to the total count\n          \n          \n            \n                        if (!p.getPrisonerStatus().isFree()) {\n          \n          \n            \n                            continue;\n          \n          \n            \n                        }", "author": "Windchild292", "createdAt": "2020-06-02T21:54:58Z", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NzMxMQ==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434197311", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if(p.getHits() > 0) {\n          \n          \n            \n                        if (p.getHits() > 0) {", "author": "Windchild292", "createdAt": "2020-06-02T21:55:09Z", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NzM0NQ==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434197345", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        } else if(p.hasPrimarySupportRole(false)) {\n          \n          \n            \n                        } else if (p.hasPrimarySupportRole(false)) {", "author": "Windchild292", "createdAt": "2020-06-02T21:55:15Z", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NzQxMg==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434197412", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n          \n          \n            \n                    countDamageStatus = new int[Entity.DMG_CRIPPLED + 1];", "author": "Windchild292", "createdAt": "2020-06-02T21:55:25Z", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NzUyOA==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434197528", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for(Unit u : campaign.getUnits()) {\n          \n          \n            \n                        Entity e = u.getEntity();\n          \n          \n            \n                        if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n          \n          \n            \n                    for (Unit u : campaign.getUnits()) {\n          \n          \n            \n                        Entity e = u.getEntity();\n          \n          \n            \n                        if (u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || (null == e)) {", "author": "Windchild292", "createdAt": "2020-06-02T21:55:41Z", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NzY5NQ==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434197695", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    infantryCount += (int)Math.ceil(squadCount/4.0);\n          \n          \n            \n                    infantryCount += (int) Math.ceil(squadCount / 4.0);", "author": "Windchild292", "createdAt": "2020-06-02T21:56:09Z", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n+                continue;\n+            }\n+            countDamageStatus[u.getDamageState()]++;\n+            switch (e.getUnitType()) {\n+                case UnitType.MEK:\n+                case UnitType.PROTOMEK:\n+                    mechCount++;\n+                    break;\n+                case UnitType.VTOL:\n+                case UnitType.TANK:\n+                    veeCount++;\n+                    break;\n+                case UnitType.AERO:\n+                case UnitType.CONV_FIGHTER:\n+                    aeroCount++;\n+                    break;\n+                case UnitType.BATTLE_ARMOR:\n+                    infantryCount++;\n+                    break;\n+                case UnitType.INFANTRY:\n+                    Infantry i = (Infantry) e;\n+                    squadCount += i.getSquadN();\n+                    break;\n+            }\n+        }\n+        //squad should count as 1/4 of a unit for force composition\n+        infantryCount += (int)Math.ceil(squadCount/4.0);", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5Nzc0Nw==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434197747", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    totalUnitCount = mechCount+veeCount+infantryCount+aeroCount;\n          \n          \n            \n                    totalUnitCount = mechCount + veeCount + infantryCount + aeroCount;", "author": "Windchild292", "createdAt": "2020-06-02T21:56:19Z", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n+                continue;\n+            }\n+            countDamageStatus[u.getDamageState()]++;\n+            switch (e.getUnitType()) {\n+                case UnitType.MEK:\n+                case UnitType.PROTOMEK:\n+                    mechCount++;\n+                    break;\n+                case UnitType.VTOL:\n+                case UnitType.TANK:\n+                    veeCount++;\n+                    break;\n+                case UnitType.AERO:\n+                case UnitType.CONV_FIGHTER:\n+                    aeroCount++;\n+                    break;\n+                case UnitType.BATTLE_ARMOR:\n+                    infantryCount++;\n+                    break;\n+                case UnitType.INFANTRY:\n+                    Infantry i = (Infantry) e;\n+                    squadCount += i.getSquadN();\n+                    break;\n+            }\n+        }\n+        //squad should count as 1/4 of a unit for force composition\n+        infantryCount += (int)Math.ceil(squadCount/4.0);\n+        totalUnitCount = mechCount+veeCount+infantryCount+aeroCount;", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5Nzc4NQ==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434197785", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for(Mission m : campaign.getMissions()) {\n          \n          \n            \n                    for (Mission m : campaign.getMissions()) {", "author": "Windchild292", "createdAt": "2020-06-02T21:56:26Z", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n+                continue;\n+            }\n+            countDamageStatus[u.getDamageState()]++;\n+            switch (e.getUnitType()) {\n+                case UnitType.MEK:\n+                case UnitType.PROTOMEK:\n+                    mechCount++;\n+                    break;\n+                case UnitType.VTOL:\n+                case UnitType.TANK:\n+                    veeCount++;\n+                    break;\n+                case UnitType.AERO:\n+                case UnitType.CONV_FIGHTER:\n+                    aeroCount++;\n+                    break;\n+                case UnitType.BATTLE_ARMOR:\n+                    infantryCount++;\n+                    break;\n+                case UnitType.INFANTRY:\n+                    Infantry i = (Infantry) e;\n+                    squadCount += i.getSquadN();\n+                    break;\n+            }\n+        }\n+        //squad should count as 1/4 of a unit for force composition\n+        infantryCount += (int)Math.ceil(squadCount/4.0);\n+        totalUnitCount = mechCount+veeCount+infantryCount+aeroCount;\n+\n+        //missions\n+        countMissionByStatus = new int[Mission.S_NUM];\n+        for(Mission m : campaign.getMissions()) {", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NzgzNg==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434197836", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    completedMissions = countMissionByStatus[Mission.S_SUCCESS]+\n          \n          \n            \n                    completedMissions = countMissionByStatus[Mission.S_SUCCESS] +", "author": "Windchild292", "createdAt": "2020-06-02T21:56:34Z", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n+                continue;\n+            }\n+            countDamageStatus[u.getDamageState()]++;\n+            switch (e.getUnitType()) {\n+                case UnitType.MEK:\n+                case UnitType.PROTOMEK:\n+                    mechCount++;\n+                    break;\n+                case UnitType.VTOL:\n+                case UnitType.TANK:\n+                    veeCount++;\n+                    break;\n+                case UnitType.AERO:\n+                case UnitType.CONV_FIGHTER:\n+                    aeroCount++;\n+                    break;\n+                case UnitType.BATTLE_ARMOR:\n+                    infantryCount++;\n+                    break;\n+                case UnitType.INFANTRY:\n+                    Infantry i = (Infantry) e;\n+                    squadCount += i.getSquadN();\n+                    break;\n+            }\n+        }\n+        //squad should count as 1/4 of a unit for force composition\n+        infantryCount += (int)Math.ceil(squadCount/4.0);\n+        totalUnitCount = mechCount+veeCount+infantryCount+aeroCount;\n+\n+        //missions\n+        countMissionByStatus = new int[Mission.S_NUM];\n+        for(Mission m : campaign.getMissions()) {\n+            countMissionByStatus[m.getStatus()]++;\n+        }\n+        completedMissions = countMissionByStatus[Mission.S_SUCCESS]+", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5Nzg3Mw==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434197873", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            countMissionByStatus[Mission.S_FAILED]+\n          \n          \n            \n                            countMissionByStatus[Mission.S_FAILED] +", "author": "Windchild292", "createdAt": "2020-06-02T21:56:41Z", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n+                continue;\n+            }\n+            countDamageStatus[u.getDamageState()]++;\n+            switch (e.getUnitType()) {\n+                case UnitType.MEK:\n+                case UnitType.PROTOMEK:\n+                    mechCount++;\n+                    break;\n+                case UnitType.VTOL:\n+                case UnitType.TANK:\n+                    veeCount++;\n+                    break;\n+                case UnitType.AERO:\n+                case UnitType.CONV_FIGHTER:\n+                    aeroCount++;\n+                    break;\n+                case UnitType.BATTLE_ARMOR:\n+                    infantryCount++;\n+                    break;\n+                case UnitType.INFANTRY:\n+                    Infantry i = (Infantry) e;\n+                    squadCount += i.getSquadN();\n+                    break;\n+            }\n+        }\n+        //squad should count as 1/4 of a unit for force composition\n+        infantryCount += (int)Math.ceil(squadCount/4.0);\n+        totalUnitCount = mechCount+veeCount+infantryCount+aeroCount;\n+\n+        //missions\n+        countMissionByStatus = new int[Mission.S_NUM];\n+        for(Mission m : campaign.getMissions()) {\n+            countMissionByStatus[m.getStatus()]++;\n+        }\n+        completedMissions = countMissionByStatus[Mission.S_SUCCESS]+\n+                countMissionByStatus[Mission.S_FAILED]+", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5ODExMw==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434198113", "bodyText": "The formatting here looks off", "author": "Windchild292", "createdAt": "2020-06-02T21:57:15Z", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n+                continue;\n+            }\n+            countDamageStatus[u.getDamageState()]++;\n+            switch (e.getUnitType()) {\n+                case UnitType.MEK:\n+                case UnitType.PROTOMEK:\n+                    mechCount++;\n+                    break;\n+                case UnitType.VTOL:\n+                case UnitType.TANK:\n+                    veeCount++;\n+                    break;\n+                case UnitType.AERO:\n+                case UnitType.CONV_FIGHTER:\n+                    aeroCount++;\n+                    break;\n+                case UnitType.BATTLE_ARMOR:\n+                    infantryCount++;\n+                    break;\n+                case UnitType.INFANTRY:\n+                    Infantry i = (Infantry) e;\n+                    squadCount += i.getSquadN();\n+                    break;\n+            }\n+        }\n+        //squad should count as 1/4 of a unit for force composition\n+        infantryCount += (int)Math.ceil(squadCount/4.0);\n+        totalUnitCount = mechCount+veeCount+infantryCount+aeroCount;\n+\n+        //missions\n+        countMissionByStatus = new int[Mission.S_NUM];\n+        for(Mission m : campaign.getMissions()) {\n+            countMissionByStatus[m.getStatus()]++;\n+        }\n+        completedMissions = countMissionByStatus[Mission.S_SUCCESS]+\n+                countMissionByStatus[Mission.S_FAILED]+\n+                countMissionByStatus[Mission.S_BREACH];\n+\n+        //cargo capacity\n+        cargoCapacity = campaign.getTotalCombinedCargoCapacity();\n+        cargoTons = campaign.getCargoTonnage(false);\n+        double mothballedTonnage = campaign.getCargoTonnage(false, true);\n+        cargoTons = (cargoTons + mothballedTonnage);\n+\n+        //transport capacity\n+        int noMech = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_MECH) - campaign.getOccupiedBays(Entity.ETYPE_MECH), 0);\n+        int noSC = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT) - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: What type of bays do ConvFighters use?\n+                int noCF = Math\n+                .max(campaign.getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER) - campaign.getOccupiedBays(Entity.ETYPE_CONV_FIGHTER), 0);", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzNjgzNQ==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434236835", "bodyText": "I just copied this over from the respective report. Intellij will not let me remove that tab on 158.", "author": "AaronGullickson", "createdAt": "2020-06-02T23:56:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5ODExMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5ODIzNQ==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434198235", "bodyText": "The formatting here looks off", "author": "Windchild292", "createdAt": "2020-06-02T21:57:33Z", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n+                continue;\n+            }\n+            countDamageStatus[u.getDamageState()]++;\n+            switch (e.getUnitType()) {\n+                case UnitType.MEK:\n+                case UnitType.PROTOMEK:\n+                    mechCount++;\n+                    break;\n+                case UnitType.VTOL:\n+                case UnitType.TANK:\n+                    veeCount++;\n+                    break;\n+                case UnitType.AERO:\n+                case UnitType.CONV_FIGHTER:\n+                    aeroCount++;\n+                    break;\n+                case UnitType.BATTLE_ARMOR:\n+                    infantryCount++;\n+                    break;\n+                case UnitType.INFANTRY:\n+                    Infantry i = (Infantry) e;\n+                    squadCount += i.getSquadN();\n+                    break;\n+            }\n+        }\n+        //squad should count as 1/4 of a unit for force composition\n+        infantryCount += (int)Math.ceil(squadCount/4.0);\n+        totalUnitCount = mechCount+veeCount+infantryCount+aeroCount;\n+\n+        //missions\n+        countMissionByStatus = new int[Mission.S_NUM];\n+        for(Mission m : campaign.getMissions()) {\n+            countMissionByStatus[m.getStatus()]++;\n+        }\n+        completedMissions = countMissionByStatus[Mission.S_SUCCESS]+\n+                countMissionByStatus[Mission.S_FAILED]+\n+                countMissionByStatus[Mission.S_BREACH];\n+\n+        //cargo capacity\n+        cargoCapacity = campaign.getTotalCombinedCargoCapacity();\n+        cargoTons = campaign.getCargoTonnage(false);\n+        double mothballedTonnage = campaign.getCargoTonnage(false, true);\n+        cargoTons = (cargoTons + mothballedTonnage);\n+\n+        //transport capacity\n+        int noMech = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_MECH) - campaign.getOccupiedBays(Entity.ETYPE_MECH), 0);\n+        int noSC = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT) - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: What type of bays do ConvFighters use?\n+                int noCF = Math\n+                .max(campaign.getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER) - campaign.getOccupiedBays(Entity.ETYPE_CONV_FIGHTER), 0);\n+        int noASF = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_AERO) - campaign.getOccupiedBays(Entity.ETYPE_AERO), 0);\n+        int nolv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK, false, true) - campaign.getOccupiedBays(Entity.ETYPE_TANK, true), 0);\n+        int nohv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK) - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int noinf = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_INFANTRY) - campaign.getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n+        int noBA = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR) - campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: This should be used somewhere...\n+                int noProto = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH) - campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH),\n+                0);", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzNjg3Mg==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434236872", "bodyText": "same as one above", "author": "AaronGullickson", "createdAt": "2020-06-02T23:56:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5ODIzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5ODMzMA==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434198330", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    unitsTransported = campaign.getOccupiedBays(Entity.ETYPE_MECH)+\n          \n          \n            \n                            campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT)+\n          \n          \n            \n                            campaign.getOccupiedBays(Entity.ETYPE_AERO)+\n          \n          \n            \n                            campaign.getOccupiedBays(Entity.ETYPE_TANK, true)+\n          \n          \n            \n                            campaign.getOccupiedBays(Entity.ETYPE_TANK)+\n          \n          \n            \n                            campaign.getOccupiedBays(Entity.ETYPE_INFANTRY)+\n          \n          \n            \n                            campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR)+\n          \n          \n            \n                            campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH);\n          \n          \n            \n                    unitsTransported = campaign.getOccupiedBays(Entity.ETYPE_MECH) +\n          \n          \n            \n                            campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT) +\n          \n          \n            \n                            campaign.getOccupiedBays(Entity.ETYPE_AERO) +\n          \n          \n            \n                            campaign.getOccupiedBays(Entity.ETYPE_TANK, true) +\n          \n          \n            \n                            campaign.getOccupiedBays(Entity.ETYPE_TANK) +\n          \n          \n            \n                            campaign.getOccupiedBays(Entity.ETYPE_INFANTRY) +\n          \n          \n            \n                            campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR) +\n          \n          \n            \n                            campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH);", "author": "Windchild292", "createdAt": "2020-06-02T21:57:51Z", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n+                continue;\n+            }\n+            countDamageStatus[u.getDamageState()]++;\n+            switch (e.getUnitType()) {\n+                case UnitType.MEK:\n+                case UnitType.PROTOMEK:\n+                    mechCount++;\n+                    break;\n+                case UnitType.VTOL:\n+                case UnitType.TANK:\n+                    veeCount++;\n+                    break;\n+                case UnitType.AERO:\n+                case UnitType.CONV_FIGHTER:\n+                    aeroCount++;\n+                    break;\n+                case UnitType.BATTLE_ARMOR:\n+                    infantryCount++;\n+                    break;\n+                case UnitType.INFANTRY:\n+                    Infantry i = (Infantry) e;\n+                    squadCount += i.getSquadN();\n+                    break;\n+            }\n+        }\n+        //squad should count as 1/4 of a unit for force composition\n+        infantryCount += (int)Math.ceil(squadCount/4.0);\n+        totalUnitCount = mechCount+veeCount+infantryCount+aeroCount;\n+\n+        //missions\n+        countMissionByStatus = new int[Mission.S_NUM];\n+        for(Mission m : campaign.getMissions()) {\n+            countMissionByStatus[m.getStatus()]++;\n+        }\n+        completedMissions = countMissionByStatus[Mission.S_SUCCESS]+\n+                countMissionByStatus[Mission.S_FAILED]+\n+                countMissionByStatus[Mission.S_BREACH];\n+\n+        //cargo capacity\n+        cargoCapacity = campaign.getTotalCombinedCargoCapacity();\n+        cargoTons = campaign.getCargoTonnage(false);\n+        double mothballedTonnage = campaign.getCargoTonnage(false, true);\n+        cargoTons = (cargoTons + mothballedTonnage);\n+\n+        //transport capacity\n+        int noMech = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_MECH) - campaign.getOccupiedBays(Entity.ETYPE_MECH), 0);\n+        int noSC = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT) - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: What type of bays do ConvFighters use?\n+                int noCF = Math\n+                .max(campaign.getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER) - campaign.getOccupiedBays(Entity.ETYPE_CONV_FIGHTER), 0);\n+        int noASF = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_AERO) - campaign.getOccupiedBays(Entity.ETYPE_AERO), 0);\n+        int nolv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK, false, true) - campaign.getOccupiedBays(Entity.ETYPE_TANK, true), 0);\n+        int nohv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK) - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int noinf = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_INFANTRY) - campaign.getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n+        int noBA = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR) - campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: This should be used somewhere...\n+                int noProto = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH) - campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH),\n+                0);\n+        int freehv = Math.max(campaign.getTotalHeavyVehicleBays() - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int freeSC = Math.max(campaign.getTotalSmallCraftBays() - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+\n+        //check for free bays elsewhere\n+        noASF = Math.max(noASF - freeSC, 0);\n+        nolv = Math.max(nolv - freehv, 0);\n+\n+        unitsOver = noMech+noASF+nolv+nohv+noinf+noBA+noProto;\n+        unitsTransported = campaign.getOccupiedBays(Entity.ETYPE_MECH)+\n+                campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT)+\n+                campaign.getOccupiedBays(Entity.ETYPE_AERO)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK, true)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK)+\n+                campaign.getOccupiedBays(Entity.ETYPE_INFANTRY)+\n+                campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR)+\n+                campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH);", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5ODQzNw==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434198437", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    unitsOver = noMech+noASF+nolv+nohv+noinf+noBA+noProto;\n          \n          \n            \n                    unitsOver = noMech + noASF + nolv + nohv + noinf + noBA + noProto;", "author": "Windchild292", "createdAt": "2020-06-02T21:58:07Z", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n+                continue;\n+            }\n+            countDamageStatus[u.getDamageState()]++;\n+            switch (e.getUnitType()) {\n+                case UnitType.MEK:\n+                case UnitType.PROTOMEK:\n+                    mechCount++;\n+                    break;\n+                case UnitType.VTOL:\n+                case UnitType.TANK:\n+                    veeCount++;\n+                    break;\n+                case UnitType.AERO:\n+                case UnitType.CONV_FIGHTER:\n+                    aeroCount++;\n+                    break;\n+                case UnitType.BATTLE_ARMOR:\n+                    infantryCount++;\n+                    break;\n+                case UnitType.INFANTRY:\n+                    Infantry i = (Infantry) e;\n+                    squadCount += i.getSquadN();\n+                    break;\n+            }\n+        }\n+        //squad should count as 1/4 of a unit for force composition\n+        infantryCount += (int)Math.ceil(squadCount/4.0);\n+        totalUnitCount = mechCount+veeCount+infantryCount+aeroCount;\n+\n+        //missions\n+        countMissionByStatus = new int[Mission.S_NUM];\n+        for(Mission m : campaign.getMissions()) {\n+            countMissionByStatus[m.getStatus()]++;\n+        }\n+        completedMissions = countMissionByStatus[Mission.S_SUCCESS]+\n+                countMissionByStatus[Mission.S_FAILED]+\n+                countMissionByStatus[Mission.S_BREACH];\n+\n+        //cargo capacity\n+        cargoCapacity = campaign.getTotalCombinedCargoCapacity();\n+        cargoTons = campaign.getCargoTonnage(false);\n+        double mothballedTonnage = campaign.getCargoTonnage(false, true);\n+        cargoTons = (cargoTons + mothballedTonnage);\n+\n+        //transport capacity\n+        int noMech = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_MECH) - campaign.getOccupiedBays(Entity.ETYPE_MECH), 0);\n+        int noSC = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT) - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: What type of bays do ConvFighters use?\n+                int noCF = Math\n+                .max(campaign.getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER) - campaign.getOccupiedBays(Entity.ETYPE_CONV_FIGHTER), 0);\n+        int noASF = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_AERO) - campaign.getOccupiedBays(Entity.ETYPE_AERO), 0);\n+        int nolv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK, false, true) - campaign.getOccupiedBays(Entity.ETYPE_TANK, true), 0);\n+        int nohv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK) - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int noinf = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_INFANTRY) - campaign.getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n+        int noBA = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR) - campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: This should be used somewhere...\n+                int noProto = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH) - campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH),\n+                0);\n+        int freehv = Math.max(campaign.getTotalHeavyVehicleBays() - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int freeSC = Math.max(campaign.getTotalSmallCraftBays() - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+\n+        //check for free bays elsewhere\n+        noASF = Math.max(noASF - freeSC, 0);\n+        nolv = Math.max(nolv - freehv, 0);\n+\n+        unitsOver = noMech+noASF+nolv+nohv+noinf+noBA+noProto;", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5ODY0NQ==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434198645", "bodyText": "The boxing for Integer.toString is probably not required.", "author": "Windchild292", "createdAt": "2020-06-02T21:58:40Z", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n+                continue;\n+            }\n+            countDamageStatus[u.getDamageState()]++;\n+            switch (e.getUnitType()) {\n+                case UnitType.MEK:\n+                case UnitType.PROTOMEK:\n+                    mechCount++;\n+                    break;\n+                case UnitType.VTOL:\n+                case UnitType.TANK:\n+                    veeCount++;\n+                    break;\n+                case UnitType.AERO:\n+                case UnitType.CONV_FIGHTER:\n+                    aeroCount++;\n+                    break;\n+                case UnitType.BATTLE_ARMOR:\n+                    infantryCount++;\n+                    break;\n+                case UnitType.INFANTRY:\n+                    Infantry i = (Infantry) e;\n+                    squadCount += i.getSquadN();\n+                    break;\n+            }\n+        }\n+        //squad should count as 1/4 of a unit for force composition\n+        infantryCount += (int)Math.ceil(squadCount/4.0);\n+        totalUnitCount = mechCount+veeCount+infantryCount+aeroCount;\n+\n+        //missions\n+        countMissionByStatus = new int[Mission.S_NUM];\n+        for(Mission m : campaign.getMissions()) {\n+            countMissionByStatus[m.getStatus()]++;\n+        }\n+        completedMissions = countMissionByStatus[Mission.S_SUCCESS]+\n+                countMissionByStatus[Mission.S_FAILED]+\n+                countMissionByStatus[Mission.S_BREACH];\n+\n+        //cargo capacity\n+        cargoCapacity = campaign.getTotalCombinedCargoCapacity();\n+        cargoTons = campaign.getCargoTonnage(false);\n+        double mothballedTonnage = campaign.getCargoTonnage(false, true);\n+        cargoTons = (cargoTons + mothballedTonnage);\n+\n+        //transport capacity\n+        int noMech = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_MECH) - campaign.getOccupiedBays(Entity.ETYPE_MECH), 0);\n+        int noSC = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT) - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: What type of bays do ConvFighters use?\n+                int noCF = Math\n+                .max(campaign.getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER) - campaign.getOccupiedBays(Entity.ETYPE_CONV_FIGHTER), 0);\n+        int noASF = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_AERO) - campaign.getOccupiedBays(Entity.ETYPE_AERO), 0);\n+        int nolv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK, false, true) - campaign.getOccupiedBays(Entity.ETYPE_TANK, true), 0);\n+        int nohv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK) - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int noinf = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_INFANTRY) - campaign.getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n+        int noBA = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR) - campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: This should be used somewhere...\n+                int noProto = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH) - campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH),\n+                0);\n+        int freehv = Math.max(campaign.getTotalHeavyVehicleBays() - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int freeSC = Math.max(campaign.getTotalSmallCraftBays() - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+\n+        //check for free bays elsewhere\n+        noASF = Math.max(noASF - freeSC, 0);\n+        nolv = Math.max(nolv - freehv, 0);\n+\n+        unitsOver = noMech+noASF+nolv+nohv+noinf+noBA+noProto;\n+        unitsTransported = campaign.getOccupiedBays(Entity.ETYPE_MECH)+\n+                campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT)+\n+                campaign.getOccupiedBays(Entity.ETYPE_AERO)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK, true)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK)+\n+                campaign.getOccupiedBays(Entity.ETYPE_INFANTRY)+\n+                campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR)+\n+                campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH);\n+\n+        nDS = campaign.getNumberOfUnitsByType(Entity.ETYPE_DROPSHIP);\n+    }\n+\n+    /**\n+     * A report that gives numbers of combat and support personnel as well as injuries\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getPersonnelReport() {\n+        return Integer.toString(totalCombatPersonnel) + \" combat, \" +\n+                Integer.toString(totalSupportPersonnel) + \" support (\" +\n+                Integer.toString(totalInjuries) + \" injured)\";", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5ODY4Nw==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434198687", "bodyText": "Suggested change", "author": "Windchild292", "createdAt": "2020-06-02T21:58:49Z", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n+                continue;\n+            }\n+            countDamageStatus[u.getDamageState()]++;\n+            switch (e.getUnitType()) {\n+                case UnitType.MEK:\n+                case UnitType.PROTOMEK:\n+                    mechCount++;\n+                    break;\n+                case UnitType.VTOL:\n+                case UnitType.TANK:\n+                    veeCount++;\n+                    break;\n+                case UnitType.AERO:\n+                case UnitType.CONV_FIGHTER:\n+                    aeroCount++;\n+                    break;\n+                case UnitType.BATTLE_ARMOR:\n+                    infantryCount++;\n+                    break;\n+                case UnitType.INFANTRY:\n+                    Infantry i = (Infantry) e;\n+                    squadCount += i.getSquadN();\n+                    break;\n+            }\n+        }\n+        //squad should count as 1/4 of a unit for force composition\n+        infantryCount += (int)Math.ceil(squadCount/4.0);\n+        totalUnitCount = mechCount+veeCount+infantryCount+aeroCount;\n+\n+        //missions\n+        countMissionByStatus = new int[Mission.S_NUM];\n+        for(Mission m : campaign.getMissions()) {\n+            countMissionByStatus[m.getStatus()]++;\n+        }\n+        completedMissions = countMissionByStatus[Mission.S_SUCCESS]+\n+                countMissionByStatus[Mission.S_FAILED]+\n+                countMissionByStatus[Mission.S_BREACH];\n+\n+        //cargo capacity\n+        cargoCapacity = campaign.getTotalCombinedCargoCapacity();\n+        cargoTons = campaign.getCargoTonnage(false);\n+        double mothballedTonnage = campaign.getCargoTonnage(false, true);\n+        cargoTons = (cargoTons + mothballedTonnage);\n+\n+        //transport capacity\n+        int noMech = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_MECH) - campaign.getOccupiedBays(Entity.ETYPE_MECH), 0);\n+        int noSC = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT) - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: What type of bays do ConvFighters use?\n+                int noCF = Math\n+                .max(campaign.getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER) - campaign.getOccupiedBays(Entity.ETYPE_CONV_FIGHTER), 0);\n+        int noASF = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_AERO) - campaign.getOccupiedBays(Entity.ETYPE_AERO), 0);\n+        int nolv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK, false, true) - campaign.getOccupiedBays(Entity.ETYPE_TANK, true), 0);\n+        int nohv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK) - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int noinf = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_INFANTRY) - campaign.getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n+        int noBA = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR) - campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: This should be used somewhere...\n+                int noProto = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH) - campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH),\n+                0);\n+        int freehv = Math.max(campaign.getTotalHeavyVehicleBays() - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int freeSC = Math.max(campaign.getTotalSmallCraftBays() - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+\n+        //check for free bays elsewhere\n+        noASF = Math.max(noASF - freeSC, 0);\n+        nolv = Math.max(nolv - freehv, 0);\n+\n+        unitsOver = noMech+noASF+nolv+nohv+noinf+noBA+noProto;\n+        unitsTransported = campaign.getOccupiedBays(Entity.ETYPE_MECH)+\n+                campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT)+\n+                campaign.getOccupiedBays(Entity.ETYPE_AERO)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK, true)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK)+\n+                campaign.getOccupiedBays(Entity.ETYPE_INFANTRY)+\n+                campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR)+\n+                campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH);\n+\n+        nDS = campaign.getNumberOfUnitsByType(Entity.ETYPE_DROPSHIP);\n+    }\n+\n+    /**\n+     * A report that gives numbers of combat and support personnel as well as injuries\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getPersonnelReport() {\n+        return Integer.toString(totalCombatPersonnel) + \" combat, \" +\n+                Integer.toString(totalSupportPersonnel) + \" support (\" +\n+                Integer.toString(totalInjuries) + \" injured)\";\n+    }\n+\n+    /**\n+     * A report that gives the number of units in different damage states\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getForceRepairReport() {\n+        return countDamageStatus[Entity.DMG_LIGHT] + \" light, \" +\n+                countDamageStatus[Entity.DMG_MODERATE] + \" moderate, \" +\n+                countDamageStatus[Entity.DMG_HEAVY] + \" heavy, \" +\n+                countDamageStatus[Entity.DMG_CRIPPLED] + \" crippled\";\n+", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5ODg5Mw==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434198893", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(mechCount > 0) {\n          \n          \n            \n                        composition.add(Integer.toString((int) Math.round(100 * mechCount / (double)totalUnitCount)) + \"% mech\");\n          \n          \n            \n                    }\n          \n          \n            \n                    if(veeCount > 0) {\n          \n          \n            \n                        composition.add(Integer.toString((int) Math.round(100 * veeCount / (double) totalUnitCount)) + \"% armor\");\n          \n          \n            \n                    }\n          \n          \n            \n                    if(infantryCount > 0) {\n          \n          \n            \n                        composition.add(Integer.toString((int) Math.round(100 * infantryCount / (double) totalUnitCount)) + \"% infantry\");\n          \n          \n            \n                    }\n          \n          \n            \n                    if(aeroCount > 0) {\n          \n          \n            \n                    if (mechCount > 0) {\n          \n          \n            \n                        composition.add(Integer.toString((int) Math.round(100 * mechCount / (double) totalUnitCount)) + \"% mech\");\n          \n          \n            \n                    }\n          \n          \n            \n                    if (veeCount > 0) {\n          \n          \n            \n                        composition.add(Integer.toString((int) Math.round(100 * veeCount / (double) totalUnitCount)) + \"% armor\");\n          \n          \n            \n                    }\n          \n          \n            \n                    if (infantryCount > 0) {\n          \n          \n            \n                        composition.add(Integer.toString((int) Math.round(100 * infantryCount / (double) totalUnitCount)) + \"% infantry\");\n          \n          \n            \n                    }\n          \n          \n            \n                    if (aeroCount > 0) {", "author": "Windchild292", "createdAt": "2020-06-02T21:59:17Z", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n+                continue;\n+            }\n+            countDamageStatus[u.getDamageState()]++;\n+            switch (e.getUnitType()) {\n+                case UnitType.MEK:\n+                case UnitType.PROTOMEK:\n+                    mechCount++;\n+                    break;\n+                case UnitType.VTOL:\n+                case UnitType.TANK:\n+                    veeCount++;\n+                    break;\n+                case UnitType.AERO:\n+                case UnitType.CONV_FIGHTER:\n+                    aeroCount++;\n+                    break;\n+                case UnitType.BATTLE_ARMOR:\n+                    infantryCount++;\n+                    break;\n+                case UnitType.INFANTRY:\n+                    Infantry i = (Infantry) e;\n+                    squadCount += i.getSquadN();\n+                    break;\n+            }\n+        }\n+        //squad should count as 1/4 of a unit for force composition\n+        infantryCount += (int)Math.ceil(squadCount/4.0);\n+        totalUnitCount = mechCount+veeCount+infantryCount+aeroCount;\n+\n+        //missions\n+        countMissionByStatus = new int[Mission.S_NUM];\n+        for(Mission m : campaign.getMissions()) {\n+            countMissionByStatus[m.getStatus()]++;\n+        }\n+        completedMissions = countMissionByStatus[Mission.S_SUCCESS]+\n+                countMissionByStatus[Mission.S_FAILED]+\n+                countMissionByStatus[Mission.S_BREACH];\n+\n+        //cargo capacity\n+        cargoCapacity = campaign.getTotalCombinedCargoCapacity();\n+        cargoTons = campaign.getCargoTonnage(false);\n+        double mothballedTonnage = campaign.getCargoTonnage(false, true);\n+        cargoTons = (cargoTons + mothballedTonnage);\n+\n+        //transport capacity\n+        int noMech = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_MECH) - campaign.getOccupiedBays(Entity.ETYPE_MECH), 0);\n+        int noSC = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT) - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: What type of bays do ConvFighters use?\n+                int noCF = Math\n+                .max(campaign.getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER) - campaign.getOccupiedBays(Entity.ETYPE_CONV_FIGHTER), 0);\n+        int noASF = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_AERO) - campaign.getOccupiedBays(Entity.ETYPE_AERO), 0);\n+        int nolv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK, false, true) - campaign.getOccupiedBays(Entity.ETYPE_TANK, true), 0);\n+        int nohv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK) - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int noinf = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_INFANTRY) - campaign.getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n+        int noBA = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR) - campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: This should be used somewhere...\n+                int noProto = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH) - campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH),\n+                0);\n+        int freehv = Math.max(campaign.getTotalHeavyVehicleBays() - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int freeSC = Math.max(campaign.getTotalSmallCraftBays() - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+\n+        //check for free bays elsewhere\n+        noASF = Math.max(noASF - freeSC, 0);\n+        nolv = Math.max(nolv - freehv, 0);\n+\n+        unitsOver = noMech+noASF+nolv+nohv+noinf+noBA+noProto;\n+        unitsTransported = campaign.getOccupiedBays(Entity.ETYPE_MECH)+\n+                campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT)+\n+                campaign.getOccupiedBays(Entity.ETYPE_AERO)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK, true)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK)+\n+                campaign.getOccupiedBays(Entity.ETYPE_INFANTRY)+\n+                campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR)+\n+                campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH);\n+\n+        nDS = campaign.getNumberOfUnitsByType(Entity.ETYPE_DROPSHIP);\n+    }\n+\n+    /**\n+     * A report that gives numbers of combat and support personnel as well as injuries\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getPersonnelReport() {\n+        return Integer.toString(totalCombatPersonnel) + \" combat, \" +\n+                Integer.toString(totalSupportPersonnel) + \" support (\" +\n+                Integer.toString(totalInjuries) + \" injured)\";\n+    }\n+\n+    /**\n+     * A report that gives the number of units in different damage states\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getForceRepairReport() {\n+        return countDamageStatus[Entity.DMG_LIGHT] + \" light, \" +\n+                countDamageStatus[Entity.DMG_MODERATE] + \" moderate, \" +\n+                countDamageStatus[Entity.DMG_HEAVY] + \" heavy, \" +\n+                countDamageStatus[Entity.DMG_CRIPPLED] + \" crippled\";\n+\n+    }\n+\n+    /**\n+     * A report that gives the percentage composition of the force in mech, armor, infantry, and aero units.\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getForceCompositionReport() {\n+        List<String> composition = new ArrayList<String>();\n+        if(mechCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * mechCount / (double)totalUnitCount)) + \"% mech\");\n+        }\n+        if(veeCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * veeCount / (double) totalUnitCount)) + \"% armor\");\n+        }\n+        if(infantryCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * infantryCount / (double) totalUnitCount)) + \"% infantry\");\n+        }\n+        if(aeroCount > 0) {", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5OTAwNA==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434199004", "bodyText": "Also, the boxing is probably not required", "author": "Windchild292", "createdAt": "2020-06-02T21:59:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5ODg5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5OTA3MQ==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434199071", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    int successRate = (int)Math.round((100 * countMissionByStatus[Mission.S_SUCCESS]) / (double) completedMissions);\n          \n          \n            \n                    int successRate = (int) Math.round((100 * countMissionByStatus[Mission.S_SUCCESS]) / (double) completedMissions);", "author": "Windchild292", "createdAt": "2020-06-02T21:59:48Z", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n+                continue;\n+            }\n+            countDamageStatus[u.getDamageState()]++;\n+            switch (e.getUnitType()) {\n+                case UnitType.MEK:\n+                case UnitType.PROTOMEK:\n+                    mechCount++;\n+                    break;\n+                case UnitType.VTOL:\n+                case UnitType.TANK:\n+                    veeCount++;\n+                    break;\n+                case UnitType.AERO:\n+                case UnitType.CONV_FIGHTER:\n+                    aeroCount++;\n+                    break;\n+                case UnitType.BATTLE_ARMOR:\n+                    infantryCount++;\n+                    break;\n+                case UnitType.INFANTRY:\n+                    Infantry i = (Infantry) e;\n+                    squadCount += i.getSquadN();\n+                    break;\n+            }\n+        }\n+        //squad should count as 1/4 of a unit for force composition\n+        infantryCount += (int)Math.ceil(squadCount/4.0);\n+        totalUnitCount = mechCount+veeCount+infantryCount+aeroCount;\n+\n+        //missions\n+        countMissionByStatus = new int[Mission.S_NUM];\n+        for(Mission m : campaign.getMissions()) {\n+            countMissionByStatus[m.getStatus()]++;\n+        }\n+        completedMissions = countMissionByStatus[Mission.S_SUCCESS]+\n+                countMissionByStatus[Mission.S_FAILED]+\n+                countMissionByStatus[Mission.S_BREACH];\n+\n+        //cargo capacity\n+        cargoCapacity = campaign.getTotalCombinedCargoCapacity();\n+        cargoTons = campaign.getCargoTonnage(false);\n+        double mothballedTonnage = campaign.getCargoTonnage(false, true);\n+        cargoTons = (cargoTons + mothballedTonnage);\n+\n+        //transport capacity\n+        int noMech = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_MECH) - campaign.getOccupiedBays(Entity.ETYPE_MECH), 0);\n+        int noSC = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT) - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: What type of bays do ConvFighters use?\n+                int noCF = Math\n+                .max(campaign.getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER) - campaign.getOccupiedBays(Entity.ETYPE_CONV_FIGHTER), 0);\n+        int noASF = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_AERO) - campaign.getOccupiedBays(Entity.ETYPE_AERO), 0);\n+        int nolv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK, false, true) - campaign.getOccupiedBays(Entity.ETYPE_TANK, true), 0);\n+        int nohv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK) - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int noinf = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_INFANTRY) - campaign.getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n+        int noBA = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR) - campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: This should be used somewhere...\n+                int noProto = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH) - campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH),\n+                0);\n+        int freehv = Math.max(campaign.getTotalHeavyVehicleBays() - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int freeSC = Math.max(campaign.getTotalSmallCraftBays() - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+\n+        //check for free bays elsewhere\n+        noASF = Math.max(noASF - freeSC, 0);\n+        nolv = Math.max(nolv - freehv, 0);\n+\n+        unitsOver = noMech+noASF+nolv+nohv+noinf+noBA+noProto;\n+        unitsTransported = campaign.getOccupiedBays(Entity.ETYPE_MECH)+\n+                campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT)+\n+                campaign.getOccupiedBays(Entity.ETYPE_AERO)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK, true)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK)+\n+                campaign.getOccupiedBays(Entity.ETYPE_INFANTRY)+\n+                campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR)+\n+                campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH);\n+\n+        nDS = campaign.getNumberOfUnitsByType(Entity.ETYPE_DROPSHIP);\n+    }\n+\n+    /**\n+     * A report that gives numbers of combat and support personnel as well as injuries\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getPersonnelReport() {\n+        return Integer.toString(totalCombatPersonnel) + \" combat, \" +\n+                Integer.toString(totalSupportPersonnel) + \" support (\" +\n+                Integer.toString(totalInjuries) + \" injured)\";\n+    }\n+\n+    /**\n+     * A report that gives the number of units in different damage states\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getForceRepairReport() {\n+        return countDamageStatus[Entity.DMG_LIGHT] + \" light, \" +\n+                countDamageStatus[Entity.DMG_MODERATE] + \" moderate, \" +\n+                countDamageStatus[Entity.DMG_HEAVY] + \" heavy, \" +\n+                countDamageStatus[Entity.DMG_CRIPPLED] + \" crippled\";\n+\n+    }\n+\n+    /**\n+     * A report that gives the percentage composition of the force in mech, armor, infantry, and aero units.\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getForceCompositionReport() {\n+        List<String> composition = new ArrayList<String>();\n+        if(mechCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * mechCount / (double)totalUnitCount)) + \"% mech\");\n+        }\n+        if(veeCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * veeCount / (double) totalUnitCount)) + \"% armor\");\n+        }\n+        if(infantryCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * infantryCount / (double) totalUnitCount)) + \"% infantry\");\n+        }\n+        if(aeroCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * aeroCount / (double) totalUnitCount)) + \"% aero\");\n+        }\n+        return String.join(\", \", composition);\n+    }\n+\n+    /**\n+     * A report that gives the percentage of successful missions\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getMissionSuccessReport() {\n+        int successRate = (int)Math.round((100 * countMissionByStatus[Mission.S_SUCCESS]) / (double) completedMissions);", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5OTE0NQ==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434199145", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Integer.toString((int)Math.round(cargoTons)) + \" tons (\" +\n          \n          \n            \n                            Integer.toString((int)Math.round(cargoCapacity)) + \" tons capacity)\";\n          \n          \n            \n                    return Integer.toString((int) Math.round(cargoTons)) + \" tons (\" +\n          \n          \n            \n                            Integer.toString((int) Math.round(cargoCapacity)) + \" tons capacity)\";", "author": "Windchild292", "createdAt": "2020-06-02T21:59:59Z", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n+                continue;\n+            }\n+            countDamageStatus[u.getDamageState()]++;\n+            switch (e.getUnitType()) {\n+                case UnitType.MEK:\n+                case UnitType.PROTOMEK:\n+                    mechCount++;\n+                    break;\n+                case UnitType.VTOL:\n+                case UnitType.TANK:\n+                    veeCount++;\n+                    break;\n+                case UnitType.AERO:\n+                case UnitType.CONV_FIGHTER:\n+                    aeroCount++;\n+                    break;\n+                case UnitType.BATTLE_ARMOR:\n+                    infantryCount++;\n+                    break;\n+                case UnitType.INFANTRY:\n+                    Infantry i = (Infantry) e;\n+                    squadCount += i.getSquadN();\n+                    break;\n+            }\n+        }\n+        //squad should count as 1/4 of a unit for force composition\n+        infantryCount += (int)Math.ceil(squadCount/4.0);\n+        totalUnitCount = mechCount+veeCount+infantryCount+aeroCount;\n+\n+        //missions\n+        countMissionByStatus = new int[Mission.S_NUM];\n+        for(Mission m : campaign.getMissions()) {\n+            countMissionByStatus[m.getStatus()]++;\n+        }\n+        completedMissions = countMissionByStatus[Mission.S_SUCCESS]+\n+                countMissionByStatus[Mission.S_FAILED]+\n+                countMissionByStatus[Mission.S_BREACH];\n+\n+        //cargo capacity\n+        cargoCapacity = campaign.getTotalCombinedCargoCapacity();\n+        cargoTons = campaign.getCargoTonnage(false);\n+        double mothballedTonnage = campaign.getCargoTonnage(false, true);\n+        cargoTons = (cargoTons + mothballedTonnage);\n+\n+        //transport capacity\n+        int noMech = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_MECH) - campaign.getOccupiedBays(Entity.ETYPE_MECH), 0);\n+        int noSC = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT) - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: What type of bays do ConvFighters use?\n+                int noCF = Math\n+                .max(campaign.getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER) - campaign.getOccupiedBays(Entity.ETYPE_CONV_FIGHTER), 0);\n+        int noASF = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_AERO) - campaign.getOccupiedBays(Entity.ETYPE_AERO), 0);\n+        int nolv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK, false, true) - campaign.getOccupiedBays(Entity.ETYPE_TANK, true), 0);\n+        int nohv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK) - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int noinf = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_INFANTRY) - campaign.getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n+        int noBA = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR) - campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: This should be used somewhere...\n+                int noProto = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH) - campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH),\n+                0);\n+        int freehv = Math.max(campaign.getTotalHeavyVehicleBays() - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int freeSC = Math.max(campaign.getTotalSmallCraftBays() - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+\n+        //check for free bays elsewhere\n+        noASF = Math.max(noASF - freeSC, 0);\n+        nolv = Math.max(nolv - freehv, 0);\n+\n+        unitsOver = noMech+noASF+nolv+nohv+noinf+noBA+noProto;\n+        unitsTransported = campaign.getOccupiedBays(Entity.ETYPE_MECH)+\n+                campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT)+\n+                campaign.getOccupiedBays(Entity.ETYPE_AERO)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK, true)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK)+\n+                campaign.getOccupiedBays(Entity.ETYPE_INFANTRY)+\n+                campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR)+\n+                campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH);\n+\n+        nDS = campaign.getNumberOfUnitsByType(Entity.ETYPE_DROPSHIP);\n+    }\n+\n+    /**\n+     * A report that gives numbers of combat and support personnel as well as injuries\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getPersonnelReport() {\n+        return Integer.toString(totalCombatPersonnel) + \" combat, \" +\n+                Integer.toString(totalSupportPersonnel) + \" support (\" +\n+                Integer.toString(totalInjuries) + \" injured)\";\n+    }\n+\n+    /**\n+     * A report that gives the number of units in different damage states\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getForceRepairReport() {\n+        return countDamageStatus[Entity.DMG_LIGHT] + \" light, \" +\n+                countDamageStatus[Entity.DMG_MODERATE] + \" moderate, \" +\n+                countDamageStatus[Entity.DMG_HEAVY] + \" heavy, \" +\n+                countDamageStatus[Entity.DMG_CRIPPLED] + \" crippled\";\n+\n+    }\n+\n+    /**\n+     * A report that gives the percentage composition of the force in mech, armor, infantry, and aero units.\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getForceCompositionReport() {\n+        List<String> composition = new ArrayList<String>();\n+        if(mechCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * mechCount / (double)totalUnitCount)) + \"% mech\");\n+        }\n+        if(veeCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * veeCount / (double) totalUnitCount)) + \"% armor\");\n+        }\n+        if(infantryCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * infantryCount / (double) totalUnitCount)) + \"% infantry\");\n+        }\n+        if(aeroCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * aeroCount / (double) totalUnitCount)) + \"% aero\");\n+        }\n+        return String.join(\", \", composition);\n+    }\n+\n+    /**\n+     * A report that gives the percentage of successful missions\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getMissionSuccessReport() {\n+        int successRate = (int)Math.round((100 * countMissionByStatus[Mission.S_SUCCESS]) / (double) completedMissions);\n+        return Integer.toString(successRate) + \"%\";\n+    }\n+\n+    /**\n+     * A report that gives capacity and existing tonnage of all cargo\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getCargoCapacityReport() {\n+        return Integer.toString((int)Math.round(cargoTons)) + \" tons (\" +\n+                Integer.toString((int)Math.round(cargoCapacity)) + \" tons capacity)\";", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5OTI1Ng==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434199256", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if((unitsOver+unitsTransported)>0) {\n          \n          \n            \n                    if ((unitsOver + unitsTransported) > 0) {", "author": "Windchild292", "createdAt": "2020-06-02T22:00:14Z", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n+                continue;\n+            }\n+            countDamageStatus[u.getDamageState()]++;\n+            switch (e.getUnitType()) {\n+                case UnitType.MEK:\n+                case UnitType.PROTOMEK:\n+                    mechCount++;\n+                    break;\n+                case UnitType.VTOL:\n+                case UnitType.TANK:\n+                    veeCount++;\n+                    break;\n+                case UnitType.AERO:\n+                case UnitType.CONV_FIGHTER:\n+                    aeroCount++;\n+                    break;\n+                case UnitType.BATTLE_ARMOR:\n+                    infantryCount++;\n+                    break;\n+                case UnitType.INFANTRY:\n+                    Infantry i = (Infantry) e;\n+                    squadCount += i.getSquadN();\n+                    break;\n+            }\n+        }\n+        //squad should count as 1/4 of a unit for force composition\n+        infantryCount += (int)Math.ceil(squadCount/4.0);\n+        totalUnitCount = mechCount+veeCount+infantryCount+aeroCount;\n+\n+        //missions\n+        countMissionByStatus = new int[Mission.S_NUM];\n+        for(Mission m : campaign.getMissions()) {\n+            countMissionByStatus[m.getStatus()]++;\n+        }\n+        completedMissions = countMissionByStatus[Mission.S_SUCCESS]+\n+                countMissionByStatus[Mission.S_FAILED]+\n+                countMissionByStatus[Mission.S_BREACH];\n+\n+        //cargo capacity\n+        cargoCapacity = campaign.getTotalCombinedCargoCapacity();\n+        cargoTons = campaign.getCargoTonnage(false);\n+        double mothballedTonnage = campaign.getCargoTonnage(false, true);\n+        cargoTons = (cargoTons + mothballedTonnage);\n+\n+        //transport capacity\n+        int noMech = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_MECH) - campaign.getOccupiedBays(Entity.ETYPE_MECH), 0);\n+        int noSC = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT) - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: What type of bays do ConvFighters use?\n+                int noCF = Math\n+                .max(campaign.getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER) - campaign.getOccupiedBays(Entity.ETYPE_CONV_FIGHTER), 0);\n+        int noASF = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_AERO) - campaign.getOccupiedBays(Entity.ETYPE_AERO), 0);\n+        int nolv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK, false, true) - campaign.getOccupiedBays(Entity.ETYPE_TANK, true), 0);\n+        int nohv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK) - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int noinf = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_INFANTRY) - campaign.getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n+        int noBA = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR) - campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: This should be used somewhere...\n+                int noProto = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH) - campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH),\n+                0);\n+        int freehv = Math.max(campaign.getTotalHeavyVehicleBays() - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int freeSC = Math.max(campaign.getTotalSmallCraftBays() - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+\n+        //check for free bays elsewhere\n+        noASF = Math.max(noASF - freeSC, 0);\n+        nolv = Math.max(nolv - freehv, 0);\n+\n+        unitsOver = noMech+noASF+nolv+nohv+noinf+noBA+noProto;\n+        unitsTransported = campaign.getOccupiedBays(Entity.ETYPE_MECH)+\n+                campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT)+\n+                campaign.getOccupiedBays(Entity.ETYPE_AERO)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK, true)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK)+\n+                campaign.getOccupiedBays(Entity.ETYPE_INFANTRY)+\n+                campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR)+\n+                campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH);\n+\n+        nDS = campaign.getNumberOfUnitsByType(Entity.ETYPE_DROPSHIP);\n+    }\n+\n+    /**\n+     * A report that gives numbers of combat and support personnel as well as injuries\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getPersonnelReport() {\n+        return Integer.toString(totalCombatPersonnel) + \" combat, \" +\n+                Integer.toString(totalSupportPersonnel) + \" support (\" +\n+                Integer.toString(totalInjuries) + \" injured)\";\n+    }\n+\n+    /**\n+     * A report that gives the number of units in different damage states\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getForceRepairReport() {\n+        return countDamageStatus[Entity.DMG_LIGHT] + \" light, \" +\n+                countDamageStatus[Entity.DMG_MODERATE] + \" moderate, \" +\n+                countDamageStatus[Entity.DMG_HEAVY] + \" heavy, \" +\n+                countDamageStatus[Entity.DMG_CRIPPLED] + \" crippled\";\n+\n+    }\n+\n+    /**\n+     * A report that gives the percentage composition of the force in mech, armor, infantry, and aero units.\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getForceCompositionReport() {\n+        List<String> composition = new ArrayList<String>();\n+        if(mechCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * mechCount / (double)totalUnitCount)) + \"% mech\");\n+        }\n+        if(veeCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * veeCount / (double) totalUnitCount)) + \"% armor\");\n+        }\n+        if(infantryCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * infantryCount / (double) totalUnitCount)) + \"% infantry\");\n+        }\n+        if(aeroCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * aeroCount / (double) totalUnitCount)) + \"% aero\");\n+        }\n+        return String.join(\", \", composition);\n+    }\n+\n+    /**\n+     * A report that gives the percentage of successful missions\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getMissionSuccessReport() {\n+        int successRate = (int)Math.round((100 * countMissionByStatus[Mission.S_SUCCESS]) / (double) completedMissions);\n+        return Integer.toString(successRate) + \"%\";\n+    }\n+\n+    /**\n+     * A report that gives capacity and existing tonnage of all cargo\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getCargoCapacityReport() {\n+        return Integer.toString((int)Math.round(cargoTons)) + \" tons (\" +\n+                Integer.toString((int)Math.round(cargoCapacity)) + \" tons capacity)\";\n+    }\n+\n+    /**\n+     * A report that gives information about the transportation capacity\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getTransportCapacity() {\n+        int percentTransported = 0;\n+        if((unitsOver+unitsTransported)>0) {", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5OTM4OA==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434199388", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        percentTransported = 100-(int)Math.round(100*unitsOver/(double)(unitsOver+unitsTransported));\n          \n          \n            \n                        percentTransported = 100 - (int) Math.round(100 * unitsOver / (double) (unitsOver + unitsTransported));", "author": "Windchild292", "createdAt": "2020-06-02T22:00:30Z", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n+                continue;\n+            }\n+            countDamageStatus[u.getDamageState()]++;\n+            switch (e.getUnitType()) {\n+                case UnitType.MEK:\n+                case UnitType.PROTOMEK:\n+                    mechCount++;\n+                    break;\n+                case UnitType.VTOL:\n+                case UnitType.TANK:\n+                    veeCount++;\n+                    break;\n+                case UnitType.AERO:\n+                case UnitType.CONV_FIGHTER:\n+                    aeroCount++;\n+                    break;\n+                case UnitType.BATTLE_ARMOR:\n+                    infantryCount++;\n+                    break;\n+                case UnitType.INFANTRY:\n+                    Infantry i = (Infantry) e;\n+                    squadCount += i.getSquadN();\n+                    break;\n+            }\n+        }\n+        //squad should count as 1/4 of a unit for force composition\n+        infantryCount += (int)Math.ceil(squadCount/4.0);\n+        totalUnitCount = mechCount+veeCount+infantryCount+aeroCount;\n+\n+        //missions\n+        countMissionByStatus = new int[Mission.S_NUM];\n+        for(Mission m : campaign.getMissions()) {\n+            countMissionByStatus[m.getStatus()]++;\n+        }\n+        completedMissions = countMissionByStatus[Mission.S_SUCCESS]+\n+                countMissionByStatus[Mission.S_FAILED]+\n+                countMissionByStatus[Mission.S_BREACH];\n+\n+        //cargo capacity\n+        cargoCapacity = campaign.getTotalCombinedCargoCapacity();\n+        cargoTons = campaign.getCargoTonnage(false);\n+        double mothballedTonnage = campaign.getCargoTonnage(false, true);\n+        cargoTons = (cargoTons + mothballedTonnage);\n+\n+        //transport capacity\n+        int noMech = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_MECH) - campaign.getOccupiedBays(Entity.ETYPE_MECH), 0);\n+        int noSC = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT) - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: What type of bays do ConvFighters use?\n+                int noCF = Math\n+                .max(campaign.getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER) - campaign.getOccupiedBays(Entity.ETYPE_CONV_FIGHTER), 0);\n+        int noASF = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_AERO) - campaign.getOccupiedBays(Entity.ETYPE_AERO), 0);\n+        int nolv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK, false, true) - campaign.getOccupiedBays(Entity.ETYPE_TANK, true), 0);\n+        int nohv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK) - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int noinf = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_INFANTRY) - campaign.getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n+        int noBA = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR) - campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: This should be used somewhere...\n+                int noProto = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH) - campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH),\n+                0);\n+        int freehv = Math.max(campaign.getTotalHeavyVehicleBays() - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int freeSC = Math.max(campaign.getTotalSmallCraftBays() - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+\n+        //check for free bays elsewhere\n+        noASF = Math.max(noASF - freeSC, 0);\n+        nolv = Math.max(nolv - freehv, 0);\n+\n+        unitsOver = noMech+noASF+nolv+nohv+noinf+noBA+noProto;\n+        unitsTransported = campaign.getOccupiedBays(Entity.ETYPE_MECH)+\n+                campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT)+\n+                campaign.getOccupiedBays(Entity.ETYPE_AERO)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK, true)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK)+\n+                campaign.getOccupiedBays(Entity.ETYPE_INFANTRY)+\n+                campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR)+\n+                campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH);\n+\n+        nDS = campaign.getNumberOfUnitsByType(Entity.ETYPE_DROPSHIP);\n+    }\n+\n+    /**\n+     * A report that gives numbers of combat and support personnel as well as injuries\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getPersonnelReport() {\n+        return Integer.toString(totalCombatPersonnel) + \" combat, \" +\n+                Integer.toString(totalSupportPersonnel) + \" support (\" +\n+                Integer.toString(totalInjuries) + \" injured)\";\n+    }\n+\n+    /**\n+     * A report that gives the number of units in different damage states\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getForceRepairReport() {\n+        return countDamageStatus[Entity.DMG_LIGHT] + \" light, \" +\n+                countDamageStatus[Entity.DMG_MODERATE] + \" moderate, \" +\n+                countDamageStatus[Entity.DMG_HEAVY] + \" heavy, \" +\n+                countDamageStatus[Entity.DMG_CRIPPLED] + \" crippled\";\n+\n+    }\n+\n+    /**\n+     * A report that gives the percentage composition of the force in mech, armor, infantry, and aero units.\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getForceCompositionReport() {\n+        List<String> composition = new ArrayList<String>();\n+        if(mechCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * mechCount / (double)totalUnitCount)) + \"% mech\");\n+        }\n+        if(veeCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * veeCount / (double) totalUnitCount)) + \"% armor\");\n+        }\n+        if(infantryCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * infantryCount / (double) totalUnitCount)) + \"% infantry\");\n+        }\n+        if(aeroCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * aeroCount / (double) totalUnitCount)) + \"% aero\");\n+        }\n+        return String.join(\", \", composition);\n+    }\n+\n+    /**\n+     * A report that gives the percentage of successful missions\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getMissionSuccessReport() {\n+        int successRate = (int)Math.round((100 * countMissionByStatus[Mission.S_SUCCESS]) / (double) completedMissions);\n+        return Integer.toString(successRate) + \"%\";\n+    }\n+\n+    /**\n+     * A report that gives capacity and existing tonnage of all cargo\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getCargoCapacityReport() {\n+        return Integer.toString((int)Math.round(cargoTons)) + \" tons (\" +\n+                Integer.toString((int)Math.round(cargoCapacity)) + \" tons capacity)\";\n+    }\n+\n+    /**\n+     * A report that gives information about the transportation capacity\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getTransportCapacity() {\n+        int percentTransported = 0;\n+        if((unitsOver+unitsTransported)>0) {\n+            percentTransported = 100-(int)Math.round(100*unitsOver/(double)(unitsOver+unitsTransported));", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5OTQ3Nw==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434199477", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(nDS > 0) {\n          \n          \n            \n                    if (nDS > 0) {", "author": "Windchild292", "createdAt": "2020-06-02T22:00:42Z", "path": "MekHQ/src/mekhq/campaign/CampaignSummary.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.campaign;\n+\n+import megamek.common.Entity;\n+import megamek.common.Infantry;\n+import megamek.common.UnitType;\n+import mekhq.campaign.mission.Mission;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * calculates and stores summary information on a campaign for use in reporting, mostly for the command center\n+ */\n+public class CampaignSummary {\n+\n+    Campaign campaign;\n+\n+    //unit totals\n+    private int mechCount;\n+    private int veeCount;\n+    private int aeroCount;\n+    private int infantryCount;\n+    private int totalUnitCount;\n+\n+    //unit damage status\n+    private int[] countDamageStatus;\n+\n+    //personnel totals\n+    private int totalCombatPersonnel;\n+    private int totalSupportPersonnel;\n+    private int totalInjuries;\n+\n+    //mission status\n+    private int[] countMissionByStatus;\n+    private int completedMissions;\n+\n+    //cargo\n+    private double cargoCapacity;\n+    private double cargoTons;\n+\n+    //transport capacity\n+    private int unitsOver;\n+    private int unitsTransported;\n+    private int nDS;\n+\n+    /**\n+     *\n+     * @param c a {@link Campaign} for which a summary is desired\n+     */\n+    public CampaignSummary(Campaign c) {\n+        this.campaign = c;\n+        updateInformation();\n+    }\n+\n+    /**\n+     * This will update all of the values in CampaignSummary to the latest from the campaign. It should\n+     * be run before pulling out any reports\n+     */\n+    public void updateInformation() {\n+\n+        //personnel\n+        totalCombatPersonnel = 0;\n+        totalSupportPersonnel = 0;\n+        totalInjuries = 0;\n+        for (Person p : campaign.getPersonnel()) {\n+            // Add them to the total count\n+            if(!p.getPrisonerStatus().isFree() || !p.isActive()) {\n+                continue;\n+            }\n+            if(p.getHits() > 0) {\n+                totalInjuries++;\n+            }\n+            if (p.hasPrimaryCombatRole()) {\n+                totalCombatPersonnel++;\n+            } else if(p.hasPrimarySupportRole(false)) {\n+                totalSupportPersonnel++;\n+            }\n+        }\n+\n+        //units\n+        countDamageStatus = new int[Entity.DMG_CRIPPLED+1];\n+        mechCount = 0;\n+        veeCount = 0;\n+        aeroCount = 0;\n+        infantryCount = 0;\n+        int squadCount = 0;\n+        for(Unit u : campaign.getUnits()) {\n+            Entity e = u.getEntity();\n+            if(u.isUnmanned() || u.isSalvage() || u.isMothballed() || u.isMothballing() || !u.isPresent() || null == e) {\n+                continue;\n+            }\n+            countDamageStatus[u.getDamageState()]++;\n+            switch (e.getUnitType()) {\n+                case UnitType.MEK:\n+                case UnitType.PROTOMEK:\n+                    mechCount++;\n+                    break;\n+                case UnitType.VTOL:\n+                case UnitType.TANK:\n+                    veeCount++;\n+                    break;\n+                case UnitType.AERO:\n+                case UnitType.CONV_FIGHTER:\n+                    aeroCount++;\n+                    break;\n+                case UnitType.BATTLE_ARMOR:\n+                    infantryCount++;\n+                    break;\n+                case UnitType.INFANTRY:\n+                    Infantry i = (Infantry) e;\n+                    squadCount += i.getSquadN();\n+                    break;\n+            }\n+        }\n+        //squad should count as 1/4 of a unit for force composition\n+        infantryCount += (int)Math.ceil(squadCount/4.0);\n+        totalUnitCount = mechCount+veeCount+infantryCount+aeroCount;\n+\n+        //missions\n+        countMissionByStatus = new int[Mission.S_NUM];\n+        for(Mission m : campaign.getMissions()) {\n+            countMissionByStatus[m.getStatus()]++;\n+        }\n+        completedMissions = countMissionByStatus[Mission.S_SUCCESS]+\n+                countMissionByStatus[Mission.S_FAILED]+\n+                countMissionByStatus[Mission.S_BREACH];\n+\n+        //cargo capacity\n+        cargoCapacity = campaign.getTotalCombinedCargoCapacity();\n+        cargoTons = campaign.getCargoTonnage(false);\n+        double mothballedTonnage = campaign.getCargoTonnage(false, true);\n+        cargoTons = (cargoTons + mothballedTonnage);\n+\n+        //transport capacity\n+        int noMech = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_MECH) - campaign.getOccupiedBays(Entity.ETYPE_MECH), 0);\n+        int noSC = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT) - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: What type of bays do ConvFighters use?\n+                int noCF = Math\n+                .max(campaign.getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER) - campaign.getOccupiedBays(Entity.ETYPE_CONV_FIGHTER), 0);\n+        int noASF = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_AERO) - campaign.getOccupiedBays(Entity.ETYPE_AERO), 0);\n+        int nolv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK, false, true) - campaign.getOccupiedBays(Entity.ETYPE_TANK, true), 0);\n+        int nohv = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_TANK) - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int noinf = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_INFANTRY) - campaign.getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n+        int noBA = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR) - campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n+        @SuppressWarnings(\"unused\") // FIXME: This should be used somewhere...\n+                int noProto = Math.max(campaign.getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH) - campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH),\n+                0);\n+        int freehv = Math.max(campaign.getTotalHeavyVehicleBays() - campaign.getOccupiedBays(Entity.ETYPE_TANK), 0);\n+        int freeSC = Math.max(campaign.getTotalSmallCraftBays() - campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n+\n+        //check for free bays elsewhere\n+        noASF = Math.max(noASF - freeSC, 0);\n+        nolv = Math.max(nolv - freehv, 0);\n+\n+        unitsOver = noMech+noASF+nolv+nohv+noinf+noBA+noProto;\n+        unitsTransported = campaign.getOccupiedBays(Entity.ETYPE_MECH)+\n+                campaign.getOccupiedBays(Entity.ETYPE_SMALL_CRAFT)+\n+                campaign.getOccupiedBays(Entity.ETYPE_AERO)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK, true)+\n+                campaign.getOccupiedBays(Entity.ETYPE_TANK)+\n+                campaign.getOccupiedBays(Entity.ETYPE_INFANTRY)+\n+                campaign.getOccupiedBays(Entity.ETYPE_BATTLEARMOR)+\n+                campaign.getOccupiedBays(Entity.ETYPE_PROTOMECH);\n+\n+        nDS = campaign.getNumberOfUnitsByType(Entity.ETYPE_DROPSHIP);\n+    }\n+\n+    /**\n+     * A report that gives numbers of combat and support personnel as well as injuries\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getPersonnelReport() {\n+        return Integer.toString(totalCombatPersonnel) + \" combat, \" +\n+                Integer.toString(totalSupportPersonnel) + \" support (\" +\n+                Integer.toString(totalInjuries) + \" injured)\";\n+    }\n+\n+    /**\n+     * A report that gives the number of units in different damage states\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getForceRepairReport() {\n+        return countDamageStatus[Entity.DMG_LIGHT] + \" light, \" +\n+                countDamageStatus[Entity.DMG_MODERATE] + \" moderate, \" +\n+                countDamageStatus[Entity.DMG_HEAVY] + \" heavy, \" +\n+                countDamageStatus[Entity.DMG_CRIPPLED] + \" crippled\";\n+\n+    }\n+\n+    /**\n+     * A report that gives the percentage composition of the force in mech, armor, infantry, and aero units.\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getForceCompositionReport() {\n+        List<String> composition = new ArrayList<String>();\n+        if(mechCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * mechCount / (double)totalUnitCount)) + \"% mech\");\n+        }\n+        if(veeCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * veeCount / (double) totalUnitCount)) + \"% armor\");\n+        }\n+        if(infantryCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * infantryCount / (double) totalUnitCount)) + \"% infantry\");\n+        }\n+        if(aeroCount > 0) {\n+            composition.add(Integer.toString((int) Math.round(100 * aeroCount / (double) totalUnitCount)) + \"% aero\");\n+        }\n+        return String.join(\", \", composition);\n+    }\n+\n+    /**\n+     * A report that gives the percentage of successful missions\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getMissionSuccessReport() {\n+        int successRate = (int)Math.round((100 * countMissionByStatus[Mission.S_SUCCESS]) / (double) completedMissions);\n+        return Integer.toString(successRate) + \"%\";\n+    }\n+\n+    /**\n+     * A report that gives capacity and existing tonnage of all cargo\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getCargoCapacityReport() {\n+        return Integer.toString((int)Math.round(cargoTons)) + \" tons (\" +\n+                Integer.toString((int)Math.round(cargoCapacity)) + \" tons capacity)\";\n+    }\n+\n+    /**\n+     * A report that gives information about the transportation capacity\n+     * @return a <code>String</code> of the report\n+     */\n+    public String getTransportCapacity() {\n+        int percentTransported = 0;\n+        if((unitsOver+unitsTransported)>0) {\n+            percentTransported = 100-(int)Math.round(100*unitsOver/(double)(unitsOver+unitsTransported));\n+        }\n+        String dropshipAppend = \"\";\n+        int dockingCollars = campaign.getTotalDockingCollars();\n+        if(nDS > 0) {", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5OTYxOQ==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434199619", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n          \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the", "author": "Windchild292", "createdAt": "2020-06-02T22:01:02Z", "path": "MekHQ/src/mekhq/gui/CommandCenterTab.java", "diffHunk": "@@ -0,0 +1,609 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5OTY2Mw==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434199663", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n          \n          \n            \n             * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.", "author": "Windchild292", "createdAt": "2020-06-02T22:01:08Z", "path": "MekHQ/src/mekhq/gui/CommandCenterTab.java", "diffHunk": "@@ -0,0 +1,609 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwMDIxNA==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434200214", "bodyText": "Missing access modifiers", "author": "Windchild292", "createdAt": "2020-06-02T22:02:31Z", "path": "MekHQ/src/mekhq/gui/CommandCenterTab.java", "diffHunk": "@@ -0,0 +1,609 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.gui;\n+\n+import megamek.common.event.Subscribe;\n+import megamek.common.util.DirectoryItems;\n+import megamek.common.util.EncodeControl;\n+import mekhq.MekHQ;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.event.*;\n+import mekhq.campaign.report.*;\n+import mekhq.gui.adapter.ProcurementTableMouseAdapter;\n+import mekhq.gui.dialog.*;\n+import mekhq.gui.model.ProcurementTableModel;\n+import mekhq.gui.sorter.FormattedNumberSorter;\n+import mekhq.gui.sorter.TargetSorter;\n+\n+import javax.swing.*;\n+import javax.swing.table.TableColumn;\n+import javax.swing.table.TableRowSorter;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.KeyEvent;\n+import java.util.List;\n+import java.util.ResourceBundle;\n+\n+/**\n+ * Collates important information about the campaign and displays it, along with some actionable buttons\n+ */\n+public final class CommandCenterTab extends CampaignGuiTab {\n+\n+    private JPanel panCommand;\n+\n+    // basic info panel\n+    private JPanel panInfo;\n+    private JLabel lblRating;\n+    private JLabel lblExperience;\n+    private JLabel lblPersonnel;\n+    private JLabel lblMissionSuccess;\n+    private JLabel lblComposition;\n+    private JLabel lblRepairStatus;\n+    private JLabel lblTransportCapacity;\n+    private JLabel lblCargoSummary;\n+\n+    // daily report\n+    private DailyReportLogPanel panLog;\n+\n+    // procurement table\n+    private JPanel panProcurement;\n+    private JTable procurementTable;\n+    private ProcurementTableModel procurementModel;\n+    private JButton btnGetUnit;\n+    private JButton btnGetParts;\n+    private JButton btnNeededParts;\n+    private JButton btnPartsReport;\n+\n+    // available reports\n+    private JPanel panReports;\n+\n+    //icon panel\n+    JPanel panIcon;\n+    JLabel lblIcon;", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwMDMxMw==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434200313", "bodyText": "Missing access modifiers, and does this use multiple bundles?", "author": "Windchild292", "createdAt": "2020-06-02T22:02:46Z", "path": "MekHQ/src/mekhq/gui/CommandCenterTab.java", "diffHunk": "@@ -0,0 +1,609 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.gui;\n+\n+import megamek.common.event.Subscribe;\n+import megamek.common.util.DirectoryItems;\n+import megamek.common.util.EncodeControl;\n+import mekhq.MekHQ;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.event.*;\n+import mekhq.campaign.report.*;\n+import mekhq.gui.adapter.ProcurementTableMouseAdapter;\n+import mekhq.gui.dialog.*;\n+import mekhq.gui.model.ProcurementTableModel;\n+import mekhq.gui.sorter.FormattedNumberSorter;\n+import mekhq.gui.sorter.TargetSorter;\n+\n+import javax.swing.*;\n+import javax.swing.table.TableColumn;\n+import javax.swing.table.TableRowSorter;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.KeyEvent;\n+import java.util.List;\n+import java.util.ResourceBundle;\n+\n+/**\n+ * Collates important information about the campaign and displays it, along with some actionable buttons\n+ */\n+public final class CommandCenterTab extends CampaignGuiTab {\n+\n+    private JPanel panCommand;\n+\n+    // basic info panel\n+    private JPanel panInfo;\n+    private JLabel lblRating;\n+    private JLabel lblExperience;\n+    private JLabel lblPersonnel;\n+    private JLabel lblMissionSuccess;\n+    private JLabel lblComposition;\n+    private JLabel lblRepairStatus;\n+    private JLabel lblTransportCapacity;\n+    private JLabel lblCargoSummary;\n+\n+    // daily report\n+    private DailyReportLogPanel panLog;\n+\n+    // procurement table\n+    private JPanel panProcurement;\n+    private JTable procurementTable;\n+    private ProcurementTableModel procurementModel;\n+    private JButton btnGetUnit;\n+    private JButton btnGetParts;\n+    private JButton btnNeededParts;\n+    private JButton btnPartsReport;\n+\n+    // available reports\n+    private JPanel panReports;\n+\n+    //icon panel\n+    JPanel panIcon;\n+    JLabel lblIcon;\n+    private DirectoryItems icons;\n+\n+    ResourceBundle resourceMap;", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwMDM4MQ==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434200381", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                CommandCenterTab(CampaignGUI gui, String name) {\n          \n          \n            \n                public CommandCenterTab(CampaignGUI gui, String name) {", "author": "Windchild292", "createdAt": "2020-06-02T22:02:58Z", "path": "MekHQ/src/mekhq/gui/CommandCenterTab.java", "diffHunk": "@@ -0,0 +1,609 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.gui;\n+\n+import megamek.common.event.Subscribe;\n+import megamek.common.util.DirectoryItems;\n+import megamek.common.util.EncodeControl;\n+import mekhq.MekHQ;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.event.*;\n+import mekhq.campaign.report.*;\n+import mekhq.gui.adapter.ProcurementTableMouseAdapter;\n+import mekhq.gui.dialog.*;\n+import mekhq.gui.model.ProcurementTableModel;\n+import mekhq.gui.sorter.FormattedNumberSorter;\n+import mekhq.gui.sorter.TargetSorter;\n+\n+import javax.swing.*;\n+import javax.swing.table.TableColumn;\n+import javax.swing.table.TableRowSorter;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.KeyEvent;\n+import java.util.List;\n+import java.util.ResourceBundle;\n+\n+/**\n+ * Collates important information about the campaign and displays it, along with some actionable buttons\n+ */\n+public final class CommandCenterTab extends CampaignGuiTab {\n+\n+    private JPanel panCommand;\n+\n+    // basic info panel\n+    private JPanel panInfo;\n+    private JLabel lblRating;\n+    private JLabel lblExperience;\n+    private JLabel lblPersonnel;\n+    private JLabel lblMissionSuccess;\n+    private JLabel lblComposition;\n+    private JLabel lblRepairStatus;\n+    private JLabel lblTransportCapacity;\n+    private JLabel lblCargoSummary;\n+\n+    // daily report\n+    private DailyReportLogPanel panLog;\n+\n+    // procurement table\n+    private JPanel panProcurement;\n+    private JTable procurementTable;\n+    private ProcurementTableModel procurementModel;\n+    private JButton btnGetUnit;\n+    private JButton btnGetParts;\n+    private JButton btnNeededParts;\n+    private JButton btnPartsReport;\n+\n+    // available reports\n+    private JPanel panReports;\n+\n+    //icon panel\n+    JPanel panIcon;\n+    JLabel lblIcon;\n+    private DirectoryItems icons;\n+\n+    ResourceBundle resourceMap;\n+\n+    /**\n+     *\n+     * @param gui a {@link CampaignGUI} object that this tab is a component of\n+     * @param name a <code>String</code> giving the name of this tab\n+     */\n+    CommandCenterTab(CampaignGUI gui, String name) {", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwMDUzOA==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434200538", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    gridBagConstraints.insets = new Insets(5,5,5,5);\n          \n          \n            \n                    gridBagConstraints.insets = new Insets(5, 5, 5, 5);", "author": "Windchild292", "createdAt": "2020-06-02T22:03:18Z", "path": "MekHQ/src/mekhq/gui/CommandCenterTab.java", "diffHunk": "@@ -0,0 +1,609 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.gui;\n+\n+import megamek.common.event.Subscribe;\n+import megamek.common.util.DirectoryItems;\n+import megamek.common.util.EncodeControl;\n+import mekhq.MekHQ;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.event.*;\n+import mekhq.campaign.report.*;\n+import mekhq.gui.adapter.ProcurementTableMouseAdapter;\n+import mekhq.gui.dialog.*;\n+import mekhq.gui.model.ProcurementTableModel;\n+import mekhq.gui.sorter.FormattedNumberSorter;\n+import mekhq.gui.sorter.TargetSorter;\n+\n+import javax.swing.*;\n+import javax.swing.table.TableColumn;\n+import javax.swing.table.TableRowSorter;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.KeyEvent;\n+import java.util.List;\n+import java.util.ResourceBundle;\n+\n+/**\n+ * Collates important information about the campaign and displays it, along with some actionable buttons\n+ */\n+public final class CommandCenterTab extends CampaignGuiTab {\n+\n+    private JPanel panCommand;\n+\n+    // basic info panel\n+    private JPanel panInfo;\n+    private JLabel lblRating;\n+    private JLabel lblExperience;\n+    private JLabel lblPersonnel;\n+    private JLabel lblMissionSuccess;\n+    private JLabel lblComposition;\n+    private JLabel lblRepairStatus;\n+    private JLabel lblTransportCapacity;\n+    private JLabel lblCargoSummary;\n+\n+    // daily report\n+    private DailyReportLogPanel panLog;\n+\n+    // procurement table\n+    private JPanel panProcurement;\n+    private JTable procurementTable;\n+    private ProcurementTableModel procurementModel;\n+    private JButton btnGetUnit;\n+    private JButton btnGetParts;\n+    private JButton btnNeededParts;\n+    private JButton btnPartsReport;\n+\n+    // available reports\n+    private JPanel panReports;\n+\n+    //icon panel\n+    JPanel panIcon;\n+    JLabel lblIcon;\n+    private DirectoryItems icons;\n+\n+    ResourceBundle resourceMap;\n+\n+    /**\n+     *\n+     * @param gui a {@link CampaignGUI} object that this tab is a component of\n+     * @param name a <code>String</code> giving the name of this tab\n+     */\n+    CommandCenterTab(CampaignGUI gui, String name) {\n+        super(gui, name);\n+        MekHQ.registerHandler(this);\n+    }\n+\n+    /**\n+     * initialize the contents and layout of the tab\n+     */\n+    @Override\n+    public void initTab() {\n+        resourceMap = ResourceBundle.getBundle(\"mekhq.resources.CampaignGUI\", //$NON-NLS-1$ ;\n+                new EncodeControl());\n+\n+        panCommand = new JPanel(new GridBagLayout());\n+\n+        initInfoPanel();\n+        initLogPanel();\n+        initReportsPanel();\n+        initProcurementPanel();\n+        panIcon = new JPanel(new BorderLayout());\n+        lblIcon = new JLabel();\n+        panIcon.add(lblIcon, BorderLayout.CENTER);\n+        setIcon();\n+\n+        /* Set overall layout */\n+        GridBagConstraints gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.gridheight = 2;\n+        gridBagConstraints.insets = new Insets(5,5,5,5);", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwMDc4OQ==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434200789", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            \n          \n          \n            \n                }\n          \n          \n            \n                }", "author": "Windchild292", "createdAt": "2020-06-02T22:03:59Z", "path": "MekHQ/src/mekhq/gui/CommandCenterTab.java", "diffHunk": "@@ -0,0 +1,609 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.gui;\n+\n+import megamek.common.event.Subscribe;\n+import megamek.common.util.DirectoryItems;\n+import megamek.common.util.EncodeControl;\n+import mekhq.MekHQ;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.event.*;\n+import mekhq.campaign.report.*;\n+import mekhq.gui.adapter.ProcurementTableMouseAdapter;\n+import mekhq.gui.dialog.*;\n+import mekhq.gui.model.ProcurementTableModel;\n+import mekhq.gui.sorter.FormattedNumberSorter;\n+import mekhq.gui.sorter.TargetSorter;\n+\n+import javax.swing.*;\n+import javax.swing.table.TableColumn;\n+import javax.swing.table.TableRowSorter;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.KeyEvent;\n+import java.util.List;\n+import java.util.ResourceBundle;\n+\n+/**\n+ * Collates important information about the campaign and displays it, along with some actionable buttons\n+ */\n+public final class CommandCenterTab extends CampaignGuiTab {\n+\n+    private JPanel panCommand;\n+\n+    // basic info panel\n+    private JPanel panInfo;\n+    private JLabel lblRating;\n+    private JLabel lblExperience;\n+    private JLabel lblPersonnel;\n+    private JLabel lblMissionSuccess;\n+    private JLabel lblComposition;\n+    private JLabel lblRepairStatus;\n+    private JLabel lblTransportCapacity;\n+    private JLabel lblCargoSummary;\n+\n+    // daily report\n+    private DailyReportLogPanel panLog;\n+\n+    // procurement table\n+    private JPanel panProcurement;\n+    private JTable procurementTable;\n+    private ProcurementTableModel procurementModel;\n+    private JButton btnGetUnit;\n+    private JButton btnGetParts;\n+    private JButton btnNeededParts;\n+    private JButton btnPartsReport;\n+\n+    // available reports\n+    private JPanel panReports;\n+\n+    //icon panel\n+    JPanel panIcon;\n+    JLabel lblIcon;\n+    private DirectoryItems icons;\n+\n+    ResourceBundle resourceMap;\n+\n+    /**\n+     *\n+     * @param gui a {@link CampaignGUI} object that this tab is a component of\n+     * @param name a <code>String</code> giving the name of this tab\n+     */\n+    CommandCenterTab(CampaignGUI gui, String name) {\n+        super(gui, name);\n+        MekHQ.registerHandler(this);\n+    }\n+\n+    /**\n+     * initialize the contents and layout of the tab\n+     */\n+    @Override\n+    public void initTab() {\n+        resourceMap = ResourceBundle.getBundle(\"mekhq.resources.CampaignGUI\", //$NON-NLS-1$ ;\n+                new EncodeControl());\n+\n+        panCommand = new JPanel(new GridBagLayout());\n+\n+        initInfoPanel();\n+        initLogPanel();\n+        initReportsPanel();\n+        initProcurementPanel();\n+        panIcon = new JPanel(new BorderLayout());\n+        lblIcon = new JLabel();\n+        panIcon.add(lblIcon, BorderLayout.CENTER);\n+        setIcon();\n+\n+        /* Set overall layout */\n+        GridBagConstraints gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.gridheight = 2;\n+        gridBagConstraints.insets = new Insets(5,5,5,5);\n+        gridBagConstraints.fill = GridBagConstraints.BOTH;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 1.0;\n+        panCommand.add(panLog, gridBagConstraints);\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.gridy = 1;\n+        gridBagConstraints.gridheight = 1;\n+        gridBagConstraints.gridwidth = 3;\n+        gridBagConstraints.fill = GridBagConstraints.BOTH;\n+        gridBagConstraints.weightx = 1.0;\n+        gridBagConstraints.weighty = 1.0;\n+        panCommand.add(panProcurement, gridBagConstraints);\n+        gridBagConstraints.gridx = 3;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.gridwidth = 1;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 1.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panCommand.add(panReports, gridBagConstraints);\n+        gridBagConstraints.gridx = 2;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panCommand.add(panInfo, gridBagConstraints);\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panCommand.add(panIcon, gridBagConstraints);\n+\n+        setLayout(new BorderLayout());\n+        add(panCommand, BorderLayout.CENTER);\n+\n+    }\n+\n+    private void initInfoPanel() {\n+        panInfo = new JPanel(new GridBagLayout());\n+        GridBagConstraints gridBagConstraints;\n+        int y = 0;\n+\n+        /* Unit Rating */\n+        lblRating = new JLabel(getCampaign().getUnitRatingText());\n+        if (getCampaign().getCampaignOptions().useDragoonRating()) {\n+            JLabel lblRatingHead = new JLabel(resourceMap.getString(\"lblRating.text\"));\n+            gridBagConstraints = new GridBagConstraints();\n+            gridBagConstraints.gridx = 0;\n+            gridBagConstraints.gridy = y;\n+            gridBagConstraints.fill = GridBagConstraints.NONE;\n+            gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+            gridBagConstraints.insets = new Insets(5, 5, 1, 5);\n+            panInfo.add(lblRatingHead, gridBagConstraints);\n+            gridBagConstraints.gridx = 1;\n+            gridBagConstraints.weightx = 1.0;\n+            panInfo.add(lblRating, gridBagConstraints);\n+            y++;\n+        }\n+        JLabel lblExperienceHead = new JLabel(resourceMap.getString(\"lblExperience.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblExperienceHead, gridBagConstraints);\n+        lblExperience = new JLabel(getCampaign().getUnitRating().getAverageExperience());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblExperience, gridBagConstraints);\n+        y++;\n+        JLabel lblMissionSuccessHead = new JLabel(resourceMap.getString(\"lblMissionSuccess.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblMissionSuccessHead, gridBagConstraints);\n+        lblMissionSuccess = new JLabel(getCampaign().getCampaignSummary().getMissionSuccessReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblMissionSuccess, gridBagConstraints);\n+        y++;\n+        JLabel lblPersonnelHead = new JLabel(resourceMap.getString(\"lblPersonnel.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblPersonnelHead, gridBagConstraints);\n+        lblPersonnel = new JLabel(getCampaign().getCampaignSummary().getPersonnelReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblPersonnel, gridBagConstraints);\n+        y++;\n+        JLabel lblCompositionHead = new JLabel(resourceMap.getString(\"lblComposition.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblCompositionHead, gridBagConstraints);\n+        lblComposition = new JLabel(getCampaign().getCampaignSummary().getForceCompositionReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblComposition, gridBagConstraints);\n+        y++;\n+        JLabel lblRepairStatusHead = new JLabel(resourceMap.getString(\"lblRepairStatus.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblRepairStatusHead, gridBagConstraints);\n+        lblRepairStatus = new JLabel(getCampaign().getCampaignSummary().getForceRepairReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblRepairStatus, gridBagConstraints);\n+        y++;\n+        JLabel lblTransportCapacityHead = new JLabel(resourceMap.getString(\"lblTransportCapacity.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblTransportCapacityHead, gridBagConstraints);\n+        lblTransportCapacity = new JLabel(getCampaign().getCampaignSummary().getTransportCapacity());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblTransportCapacity, gridBagConstraints);\n+        y++;\n+        JLabel lblCargoSummaryHead = new JLabel(resourceMap.getString(\"lblCargoSummary.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 5, 5);\n+        panInfo.add(lblCargoSummaryHead, gridBagConstraints);\n+        lblCargoSummary = new JLabel(getCampaign().getCampaignSummary().getCargoCapacityReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblCargoSummary, gridBagConstraints);\n+\n+        panInfo.setBorder(BorderFactory.createTitledBorder(resourceMap.getString(\"panInfo.title\")));\n+\n+\n+    }", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwMTAwNQ==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434201005", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        /**\n          \n          \n            \n                         *\n          \n          \n            \n                         */", "author": "Windchild292", "createdAt": "2020-06-02T22:04:35Z", "path": "MekHQ/src/mekhq/gui/CommandCenterTab.java", "diffHunk": "@@ -0,0 +1,609 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.gui;\n+\n+import megamek.common.event.Subscribe;\n+import megamek.common.util.DirectoryItems;\n+import megamek.common.util.EncodeControl;\n+import mekhq.MekHQ;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.event.*;\n+import mekhq.campaign.report.*;\n+import mekhq.gui.adapter.ProcurementTableMouseAdapter;\n+import mekhq.gui.dialog.*;\n+import mekhq.gui.model.ProcurementTableModel;\n+import mekhq.gui.sorter.FormattedNumberSorter;\n+import mekhq.gui.sorter.TargetSorter;\n+\n+import javax.swing.*;\n+import javax.swing.table.TableColumn;\n+import javax.swing.table.TableRowSorter;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.KeyEvent;\n+import java.util.List;\n+import java.util.ResourceBundle;\n+\n+/**\n+ * Collates important information about the campaign and displays it, along with some actionable buttons\n+ */\n+public final class CommandCenterTab extends CampaignGuiTab {\n+\n+    private JPanel panCommand;\n+\n+    // basic info panel\n+    private JPanel panInfo;\n+    private JLabel lblRating;\n+    private JLabel lblExperience;\n+    private JLabel lblPersonnel;\n+    private JLabel lblMissionSuccess;\n+    private JLabel lblComposition;\n+    private JLabel lblRepairStatus;\n+    private JLabel lblTransportCapacity;\n+    private JLabel lblCargoSummary;\n+\n+    // daily report\n+    private DailyReportLogPanel panLog;\n+\n+    // procurement table\n+    private JPanel panProcurement;\n+    private JTable procurementTable;\n+    private ProcurementTableModel procurementModel;\n+    private JButton btnGetUnit;\n+    private JButton btnGetParts;\n+    private JButton btnNeededParts;\n+    private JButton btnPartsReport;\n+\n+    // available reports\n+    private JPanel panReports;\n+\n+    //icon panel\n+    JPanel panIcon;\n+    JLabel lblIcon;\n+    private DirectoryItems icons;\n+\n+    ResourceBundle resourceMap;\n+\n+    /**\n+     *\n+     * @param gui a {@link CampaignGUI} object that this tab is a component of\n+     * @param name a <code>String</code> giving the name of this tab\n+     */\n+    CommandCenterTab(CampaignGUI gui, String name) {\n+        super(gui, name);\n+        MekHQ.registerHandler(this);\n+    }\n+\n+    /**\n+     * initialize the contents and layout of the tab\n+     */\n+    @Override\n+    public void initTab() {\n+        resourceMap = ResourceBundle.getBundle(\"mekhq.resources.CampaignGUI\", //$NON-NLS-1$ ;\n+                new EncodeControl());\n+\n+        panCommand = new JPanel(new GridBagLayout());\n+\n+        initInfoPanel();\n+        initLogPanel();\n+        initReportsPanel();\n+        initProcurementPanel();\n+        panIcon = new JPanel(new BorderLayout());\n+        lblIcon = new JLabel();\n+        panIcon.add(lblIcon, BorderLayout.CENTER);\n+        setIcon();\n+\n+        /* Set overall layout */\n+        GridBagConstraints gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.gridheight = 2;\n+        gridBagConstraints.insets = new Insets(5,5,5,5);\n+        gridBagConstraints.fill = GridBagConstraints.BOTH;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 1.0;\n+        panCommand.add(panLog, gridBagConstraints);\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.gridy = 1;\n+        gridBagConstraints.gridheight = 1;\n+        gridBagConstraints.gridwidth = 3;\n+        gridBagConstraints.fill = GridBagConstraints.BOTH;\n+        gridBagConstraints.weightx = 1.0;\n+        gridBagConstraints.weighty = 1.0;\n+        panCommand.add(panProcurement, gridBagConstraints);\n+        gridBagConstraints.gridx = 3;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.gridwidth = 1;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 1.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panCommand.add(panReports, gridBagConstraints);\n+        gridBagConstraints.gridx = 2;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panCommand.add(panInfo, gridBagConstraints);\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panCommand.add(panIcon, gridBagConstraints);\n+\n+        setLayout(new BorderLayout());\n+        add(panCommand, BorderLayout.CENTER);\n+\n+    }\n+\n+    private void initInfoPanel() {\n+        panInfo = new JPanel(new GridBagLayout());\n+        GridBagConstraints gridBagConstraints;\n+        int y = 0;\n+\n+        /* Unit Rating */\n+        lblRating = new JLabel(getCampaign().getUnitRatingText());\n+        if (getCampaign().getCampaignOptions().useDragoonRating()) {\n+            JLabel lblRatingHead = new JLabel(resourceMap.getString(\"lblRating.text\"));\n+            gridBagConstraints = new GridBagConstraints();\n+            gridBagConstraints.gridx = 0;\n+            gridBagConstraints.gridy = y;\n+            gridBagConstraints.fill = GridBagConstraints.NONE;\n+            gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+            gridBagConstraints.insets = new Insets(5, 5, 1, 5);\n+            panInfo.add(lblRatingHead, gridBagConstraints);\n+            gridBagConstraints.gridx = 1;\n+            gridBagConstraints.weightx = 1.0;\n+            panInfo.add(lblRating, gridBagConstraints);\n+            y++;\n+        }\n+        JLabel lblExperienceHead = new JLabel(resourceMap.getString(\"lblExperience.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblExperienceHead, gridBagConstraints);\n+        lblExperience = new JLabel(getCampaign().getUnitRating().getAverageExperience());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblExperience, gridBagConstraints);\n+        y++;\n+        JLabel lblMissionSuccessHead = new JLabel(resourceMap.getString(\"lblMissionSuccess.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblMissionSuccessHead, gridBagConstraints);\n+        lblMissionSuccess = new JLabel(getCampaign().getCampaignSummary().getMissionSuccessReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblMissionSuccess, gridBagConstraints);\n+        y++;\n+        JLabel lblPersonnelHead = new JLabel(resourceMap.getString(\"lblPersonnel.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblPersonnelHead, gridBagConstraints);\n+        lblPersonnel = new JLabel(getCampaign().getCampaignSummary().getPersonnelReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblPersonnel, gridBagConstraints);\n+        y++;\n+        JLabel lblCompositionHead = new JLabel(resourceMap.getString(\"lblComposition.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblCompositionHead, gridBagConstraints);\n+        lblComposition = new JLabel(getCampaign().getCampaignSummary().getForceCompositionReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblComposition, gridBagConstraints);\n+        y++;\n+        JLabel lblRepairStatusHead = new JLabel(resourceMap.getString(\"lblRepairStatus.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblRepairStatusHead, gridBagConstraints);\n+        lblRepairStatus = new JLabel(getCampaign().getCampaignSummary().getForceRepairReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblRepairStatus, gridBagConstraints);\n+        y++;\n+        JLabel lblTransportCapacityHead = new JLabel(resourceMap.getString(\"lblTransportCapacity.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblTransportCapacityHead, gridBagConstraints);\n+        lblTransportCapacity = new JLabel(getCampaign().getCampaignSummary().getTransportCapacity());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblTransportCapacity, gridBagConstraints);\n+        y++;\n+        JLabel lblCargoSummaryHead = new JLabel(resourceMap.getString(\"lblCargoSummary.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 5, 5);\n+        panInfo.add(lblCargoSummaryHead, gridBagConstraints);\n+        lblCargoSummary = new JLabel(getCampaign().getCampaignSummary().getCargoCapacityReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblCargoSummary, gridBagConstraints);\n+\n+        panInfo.setBorder(BorderFactory.createTitledBorder(resourceMap.getString(\"panInfo.title\")));\n+\n+\n+    }\n+\n+    /**\n+     * Initialize the panel for displaying the daily report log\n+     */\n+    private void initLogPanel() {\n+        panLog = new DailyReportLogPanel(getCampaignGui());\n+        panLog.setBorder(BorderFactory.createTitledBorder(resourceMap.getString(\"panLog.title\")));\n+        panLog.setMinimumSize(new java.awt.Dimension(400, 100));\n+        panLog.setPreferredSize(new java.awt.Dimension(400, 100));\n+    }\n+\n+    /**\n+     * Initialize the panel for displaying procurement information\n+     */\n+    private void initProcurementPanel() {\n+\n+        /* shopping buttons */\n+        JPanel panProcurementButtons = new JPanel(new GridLayout(4, 1));\n+        btnGetUnit = new JButton(resourceMap.getString(\"btnGetUnit.text\")); // NOI18N\n+        btnGetUnit.setToolTipText(resourceMap.getString(\"btnGetUnit.toolTipText\")); // NOI18N\n+        btnGetUnit.addActionListener(ev -> getUnit());\n+        btnGetUnit.setEnabled(true);\n+        panProcurementButtons.add(btnGetUnit);\n+        btnGetParts = new JButton(resourceMap.getString(\"btnGetParts.text\")); // NOI18N\n+        btnGetParts.setToolTipText(resourceMap.getString(\"btnGetParts.toolTipText\")); // NOI18N\n+        btnGetParts.addActionListener(ev -> getParts());\n+        btnGetParts.setEnabled(true);\n+        panProcurementButtons.add(btnGetParts);\n+        btnNeededParts = new JButton();\n+        btnNeededParts.setText(resourceMap.getString(\"btnNeededParts.text\")); // NOI18N\n+        btnNeededParts.setToolTipText(resourceMap.getString(\"btnNeededParts.toolTipText\"));\n+        btnNeededParts.addActionListener(ev -> {\n+            AcquisitionsDialog dlg = new AcquisitionsDialog(getFrame(), true, getCampaignGui());\n+            dlg.setVisible(true);\n+        });\n+        panProcurementButtons.add(btnNeededParts);\n+        btnPartsReport = new JButton();\n+        btnPartsReport.setText(resourceMap.getString(\"btnPartsReport.text\")); // NOI18N\n+        btnPartsReport.setToolTipText(resourceMap.getString(\"btnPartsReport.toolTipText\"));\n+        btnPartsReport.addActionListener(ev -> {\n+            PartsReportDialog dlg = new PartsReportDialog(getCampaignGui(), true);\n+            dlg.setVisible(true);\n+        });\n+        panProcurementButtons.add(btnPartsReport);\n+\n+        /* shopping table */\n+        procurementModel = new ProcurementTableModel(getCampaign());\n+        procurementTable = new JTable(procurementModel);\n+        TableRowSorter<ProcurementTableModel> shoppingSorter = new TableRowSorter<>(\n+                procurementModel);\n+        shoppingSorter.setComparator(ProcurementTableModel.COL_COST, new FormattedNumberSorter());\n+        shoppingSorter.setComparator(ProcurementTableModel.COL_TARGET, new TargetSorter());\n+        procurementTable.setRowSorter(shoppingSorter);\n+        TableColumn column;\n+        for (int i = 0; i < ProcurementTableModel.N_COL; i++) {\n+            column = procurementTable.getColumnModel().getColumn(i);\n+            column.setPreferredWidth(procurementModel.getColumnWidth(i));\n+            column.setCellRenderer(procurementModel.getRenderer());\n+        }\n+        procurementTable.setIntercellSpacing(new Dimension(0, 0));\n+        procurementTable.setShowGrid(false);\n+        procurementTable.addMouseListener(new ProcurementTableMouseAdapter(getCampaignGui()));\n+        procurementTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n+\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, 0), \"ADD\");\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_EQUALS, 0),\n+                \"ADD\");\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, 0),\n+                \"REMOVE\");\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_MINUS, 0),\n+                \"REMOVE\");\n+\n+        procurementTable.getActionMap().put(\"ADD\", new AbstractAction() {\n+            /**\n+             *\n+             */", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwMTA2OA==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434201068", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        /**\n          \n          \n            \n                         *\n          \n          \n            \n                         */", "author": "Windchild292", "createdAt": "2020-06-02T22:04:45Z", "path": "MekHQ/src/mekhq/gui/CommandCenterTab.java", "diffHunk": "@@ -0,0 +1,609 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.gui;\n+\n+import megamek.common.event.Subscribe;\n+import megamek.common.util.DirectoryItems;\n+import megamek.common.util.EncodeControl;\n+import mekhq.MekHQ;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.event.*;\n+import mekhq.campaign.report.*;\n+import mekhq.gui.adapter.ProcurementTableMouseAdapter;\n+import mekhq.gui.dialog.*;\n+import mekhq.gui.model.ProcurementTableModel;\n+import mekhq.gui.sorter.FormattedNumberSorter;\n+import mekhq.gui.sorter.TargetSorter;\n+\n+import javax.swing.*;\n+import javax.swing.table.TableColumn;\n+import javax.swing.table.TableRowSorter;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.KeyEvent;\n+import java.util.List;\n+import java.util.ResourceBundle;\n+\n+/**\n+ * Collates important information about the campaign and displays it, along with some actionable buttons\n+ */\n+public final class CommandCenterTab extends CampaignGuiTab {\n+\n+    private JPanel panCommand;\n+\n+    // basic info panel\n+    private JPanel panInfo;\n+    private JLabel lblRating;\n+    private JLabel lblExperience;\n+    private JLabel lblPersonnel;\n+    private JLabel lblMissionSuccess;\n+    private JLabel lblComposition;\n+    private JLabel lblRepairStatus;\n+    private JLabel lblTransportCapacity;\n+    private JLabel lblCargoSummary;\n+\n+    // daily report\n+    private DailyReportLogPanel panLog;\n+\n+    // procurement table\n+    private JPanel panProcurement;\n+    private JTable procurementTable;\n+    private ProcurementTableModel procurementModel;\n+    private JButton btnGetUnit;\n+    private JButton btnGetParts;\n+    private JButton btnNeededParts;\n+    private JButton btnPartsReport;\n+\n+    // available reports\n+    private JPanel panReports;\n+\n+    //icon panel\n+    JPanel panIcon;\n+    JLabel lblIcon;\n+    private DirectoryItems icons;\n+\n+    ResourceBundle resourceMap;\n+\n+    /**\n+     *\n+     * @param gui a {@link CampaignGUI} object that this tab is a component of\n+     * @param name a <code>String</code> giving the name of this tab\n+     */\n+    CommandCenterTab(CampaignGUI gui, String name) {\n+        super(gui, name);\n+        MekHQ.registerHandler(this);\n+    }\n+\n+    /**\n+     * initialize the contents and layout of the tab\n+     */\n+    @Override\n+    public void initTab() {\n+        resourceMap = ResourceBundle.getBundle(\"mekhq.resources.CampaignGUI\", //$NON-NLS-1$ ;\n+                new EncodeControl());\n+\n+        panCommand = new JPanel(new GridBagLayout());\n+\n+        initInfoPanel();\n+        initLogPanel();\n+        initReportsPanel();\n+        initProcurementPanel();\n+        panIcon = new JPanel(new BorderLayout());\n+        lblIcon = new JLabel();\n+        panIcon.add(lblIcon, BorderLayout.CENTER);\n+        setIcon();\n+\n+        /* Set overall layout */\n+        GridBagConstraints gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.gridheight = 2;\n+        gridBagConstraints.insets = new Insets(5,5,5,5);\n+        gridBagConstraints.fill = GridBagConstraints.BOTH;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 1.0;\n+        panCommand.add(panLog, gridBagConstraints);\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.gridy = 1;\n+        gridBagConstraints.gridheight = 1;\n+        gridBagConstraints.gridwidth = 3;\n+        gridBagConstraints.fill = GridBagConstraints.BOTH;\n+        gridBagConstraints.weightx = 1.0;\n+        gridBagConstraints.weighty = 1.0;\n+        panCommand.add(panProcurement, gridBagConstraints);\n+        gridBagConstraints.gridx = 3;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.gridwidth = 1;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 1.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panCommand.add(panReports, gridBagConstraints);\n+        gridBagConstraints.gridx = 2;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panCommand.add(panInfo, gridBagConstraints);\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panCommand.add(panIcon, gridBagConstraints);\n+\n+        setLayout(new BorderLayout());\n+        add(panCommand, BorderLayout.CENTER);\n+\n+    }\n+\n+    private void initInfoPanel() {\n+        panInfo = new JPanel(new GridBagLayout());\n+        GridBagConstraints gridBagConstraints;\n+        int y = 0;\n+\n+        /* Unit Rating */\n+        lblRating = new JLabel(getCampaign().getUnitRatingText());\n+        if (getCampaign().getCampaignOptions().useDragoonRating()) {\n+            JLabel lblRatingHead = new JLabel(resourceMap.getString(\"lblRating.text\"));\n+            gridBagConstraints = new GridBagConstraints();\n+            gridBagConstraints.gridx = 0;\n+            gridBagConstraints.gridy = y;\n+            gridBagConstraints.fill = GridBagConstraints.NONE;\n+            gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+            gridBagConstraints.insets = new Insets(5, 5, 1, 5);\n+            panInfo.add(lblRatingHead, gridBagConstraints);\n+            gridBagConstraints.gridx = 1;\n+            gridBagConstraints.weightx = 1.0;\n+            panInfo.add(lblRating, gridBagConstraints);\n+            y++;\n+        }\n+        JLabel lblExperienceHead = new JLabel(resourceMap.getString(\"lblExperience.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblExperienceHead, gridBagConstraints);\n+        lblExperience = new JLabel(getCampaign().getUnitRating().getAverageExperience());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblExperience, gridBagConstraints);\n+        y++;\n+        JLabel lblMissionSuccessHead = new JLabel(resourceMap.getString(\"lblMissionSuccess.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblMissionSuccessHead, gridBagConstraints);\n+        lblMissionSuccess = new JLabel(getCampaign().getCampaignSummary().getMissionSuccessReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblMissionSuccess, gridBagConstraints);\n+        y++;\n+        JLabel lblPersonnelHead = new JLabel(resourceMap.getString(\"lblPersonnel.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblPersonnelHead, gridBagConstraints);\n+        lblPersonnel = new JLabel(getCampaign().getCampaignSummary().getPersonnelReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblPersonnel, gridBagConstraints);\n+        y++;\n+        JLabel lblCompositionHead = new JLabel(resourceMap.getString(\"lblComposition.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblCompositionHead, gridBagConstraints);\n+        lblComposition = new JLabel(getCampaign().getCampaignSummary().getForceCompositionReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblComposition, gridBagConstraints);\n+        y++;\n+        JLabel lblRepairStatusHead = new JLabel(resourceMap.getString(\"lblRepairStatus.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblRepairStatusHead, gridBagConstraints);\n+        lblRepairStatus = new JLabel(getCampaign().getCampaignSummary().getForceRepairReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblRepairStatus, gridBagConstraints);\n+        y++;\n+        JLabel lblTransportCapacityHead = new JLabel(resourceMap.getString(\"lblTransportCapacity.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblTransportCapacityHead, gridBagConstraints);\n+        lblTransportCapacity = new JLabel(getCampaign().getCampaignSummary().getTransportCapacity());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblTransportCapacity, gridBagConstraints);\n+        y++;\n+        JLabel lblCargoSummaryHead = new JLabel(resourceMap.getString(\"lblCargoSummary.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 5, 5);\n+        panInfo.add(lblCargoSummaryHead, gridBagConstraints);\n+        lblCargoSummary = new JLabel(getCampaign().getCampaignSummary().getCargoCapacityReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblCargoSummary, gridBagConstraints);\n+\n+        panInfo.setBorder(BorderFactory.createTitledBorder(resourceMap.getString(\"panInfo.title\")));\n+\n+\n+    }\n+\n+    /**\n+     * Initialize the panel for displaying the daily report log\n+     */\n+    private void initLogPanel() {\n+        panLog = new DailyReportLogPanel(getCampaignGui());\n+        panLog.setBorder(BorderFactory.createTitledBorder(resourceMap.getString(\"panLog.title\")));\n+        panLog.setMinimumSize(new java.awt.Dimension(400, 100));\n+        panLog.setPreferredSize(new java.awt.Dimension(400, 100));\n+    }\n+\n+    /**\n+     * Initialize the panel for displaying procurement information\n+     */\n+    private void initProcurementPanel() {\n+\n+        /* shopping buttons */\n+        JPanel panProcurementButtons = new JPanel(new GridLayout(4, 1));\n+        btnGetUnit = new JButton(resourceMap.getString(\"btnGetUnit.text\")); // NOI18N\n+        btnGetUnit.setToolTipText(resourceMap.getString(\"btnGetUnit.toolTipText\")); // NOI18N\n+        btnGetUnit.addActionListener(ev -> getUnit());\n+        btnGetUnit.setEnabled(true);\n+        panProcurementButtons.add(btnGetUnit);\n+        btnGetParts = new JButton(resourceMap.getString(\"btnGetParts.text\")); // NOI18N\n+        btnGetParts.setToolTipText(resourceMap.getString(\"btnGetParts.toolTipText\")); // NOI18N\n+        btnGetParts.addActionListener(ev -> getParts());\n+        btnGetParts.setEnabled(true);\n+        panProcurementButtons.add(btnGetParts);\n+        btnNeededParts = new JButton();\n+        btnNeededParts.setText(resourceMap.getString(\"btnNeededParts.text\")); // NOI18N\n+        btnNeededParts.setToolTipText(resourceMap.getString(\"btnNeededParts.toolTipText\"));\n+        btnNeededParts.addActionListener(ev -> {\n+            AcquisitionsDialog dlg = new AcquisitionsDialog(getFrame(), true, getCampaignGui());\n+            dlg.setVisible(true);\n+        });\n+        panProcurementButtons.add(btnNeededParts);\n+        btnPartsReport = new JButton();\n+        btnPartsReport.setText(resourceMap.getString(\"btnPartsReport.text\")); // NOI18N\n+        btnPartsReport.setToolTipText(resourceMap.getString(\"btnPartsReport.toolTipText\"));\n+        btnPartsReport.addActionListener(ev -> {\n+            PartsReportDialog dlg = new PartsReportDialog(getCampaignGui(), true);\n+            dlg.setVisible(true);\n+        });\n+        panProcurementButtons.add(btnPartsReport);\n+\n+        /* shopping table */\n+        procurementModel = new ProcurementTableModel(getCampaign());\n+        procurementTable = new JTable(procurementModel);\n+        TableRowSorter<ProcurementTableModel> shoppingSorter = new TableRowSorter<>(\n+                procurementModel);\n+        shoppingSorter.setComparator(ProcurementTableModel.COL_COST, new FormattedNumberSorter());\n+        shoppingSorter.setComparator(ProcurementTableModel.COL_TARGET, new TargetSorter());\n+        procurementTable.setRowSorter(shoppingSorter);\n+        TableColumn column;\n+        for (int i = 0; i < ProcurementTableModel.N_COL; i++) {\n+            column = procurementTable.getColumnModel().getColumn(i);\n+            column.setPreferredWidth(procurementModel.getColumnWidth(i));\n+            column.setCellRenderer(procurementModel.getRenderer());\n+        }\n+        procurementTable.setIntercellSpacing(new Dimension(0, 0));\n+        procurementTable.setShowGrid(false);\n+        procurementTable.addMouseListener(new ProcurementTableMouseAdapter(getCampaignGui()));\n+        procurementTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n+\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, 0), \"ADD\");\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_EQUALS, 0),\n+                \"ADD\");\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, 0),\n+                \"REMOVE\");\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_MINUS, 0),\n+                \"REMOVE\");\n+\n+        procurementTable.getActionMap().put(\"ADD\", new AbstractAction() {\n+            /**\n+             *\n+             */\n+            private static final long serialVersionUID = 4958203340754214211L;\n+\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                if (procurementTable.getSelectedRow() < 0) {\n+                    return;\n+                }\n+                procurementModel\n+                        .incrementItem(procurementTable.convertRowIndexToModel(procurementTable.getSelectedRow()));\n+            }\n+        });\n+\n+        procurementTable.getActionMap().put(\"REMOVE\", new AbstractAction() {\n+            /**\n+             *\n+             */", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwMTE4Mw==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434201183", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    gridBagConstraints.insets = new Insets(5,5,5,5);\n          \n          \n            \n                    gridBagConstraints.insets = new Insets(5, 5, 5, 5);", "author": "Windchild292", "createdAt": "2020-06-02T22:05:02Z", "path": "MekHQ/src/mekhq/gui/CommandCenterTab.java", "diffHunk": "@@ -0,0 +1,609 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.gui;\n+\n+import megamek.common.event.Subscribe;\n+import megamek.common.util.DirectoryItems;\n+import megamek.common.util.EncodeControl;\n+import mekhq.MekHQ;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.event.*;\n+import mekhq.campaign.report.*;\n+import mekhq.gui.adapter.ProcurementTableMouseAdapter;\n+import mekhq.gui.dialog.*;\n+import mekhq.gui.model.ProcurementTableModel;\n+import mekhq.gui.sorter.FormattedNumberSorter;\n+import mekhq.gui.sorter.TargetSorter;\n+\n+import javax.swing.*;\n+import javax.swing.table.TableColumn;\n+import javax.swing.table.TableRowSorter;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.KeyEvent;\n+import java.util.List;\n+import java.util.ResourceBundle;\n+\n+/**\n+ * Collates important information about the campaign and displays it, along with some actionable buttons\n+ */\n+public final class CommandCenterTab extends CampaignGuiTab {\n+\n+    private JPanel panCommand;\n+\n+    // basic info panel\n+    private JPanel panInfo;\n+    private JLabel lblRating;\n+    private JLabel lblExperience;\n+    private JLabel lblPersonnel;\n+    private JLabel lblMissionSuccess;\n+    private JLabel lblComposition;\n+    private JLabel lblRepairStatus;\n+    private JLabel lblTransportCapacity;\n+    private JLabel lblCargoSummary;\n+\n+    // daily report\n+    private DailyReportLogPanel panLog;\n+\n+    // procurement table\n+    private JPanel panProcurement;\n+    private JTable procurementTable;\n+    private ProcurementTableModel procurementModel;\n+    private JButton btnGetUnit;\n+    private JButton btnGetParts;\n+    private JButton btnNeededParts;\n+    private JButton btnPartsReport;\n+\n+    // available reports\n+    private JPanel panReports;\n+\n+    //icon panel\n+    JPanel panIcon;\n+    JLabel lblIcon;\n+    private DirectoryItems icons;\n+\n+    ResourceBundle resourceMap;\n+\n+    /**\n+     *\n+     * @param gui a {@link CampaignGUI} object that this tab is a component of\n+     * @param name a <code>String</code> giving the name of this tab\n+     */\n+    CommandCenterTab(CampaignGUI gui, String name) {\n+        super(gui, name);\n+        MekHQ.registerHandler(this);\n+    }\n+\n+    /**\n+     * initialize the contents and layout of the tab\n+     */\n+    @Override\n+    public void initTab() {\n+        resourceMap = ResourceBundle.getBundle(\"mekhq.resources.CampaignGUI\", //$NON-NLS-1$ ;\n+                new EncodeControl());\n+\n+        panCommand = new JPanel(new GridBagLayout());\n+\n+        initInfoPanel();\n+        initLogPanel();\n+        initReportsPanel();\n+        initProcurementPanel();\n+        panIcon = new JPanel(new BorderLayout());\n+        lblIcon = new JLabel();\n+        panIcon.add(lblIcon, BorderLayout.CENTER);\n+        setIcon();\n+\n+        /* Set overall layout */\n+        GridBagConstraints gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.gridheight = 2;\n+        gridBagConstraints.insets = new Insets(5,5,5,5);\n+        gridBagConstraints.fill = GridBagConstraints.BOTH;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 1.0;\n+        panCommand.add(panLog, gridBagConstraints);\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.gridy = 1;\n+        gridBagConstraints.gridheight = 1;\n+        gridBagConstraints.gridwidth = 3;\n+        gridBagConstraints.fill = GridBagConstraints.BOTH;\n+        gridBagConstraints.weightx = 1.0;\n+        gridBagConstraints.weighty = 1.0;\n+        panCommand.add(panProcurement, gridBagConstraints);\n+        gridBagConstraints.gridx = 3;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.gridwidth = 1;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 1.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panCommand.add(panReports, gridBagConstraints);\n+        gridBagConstraints.gridx = 2;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panCommand.add(panInfo, gridBagConstraints);\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panCommand.add(panIcon, gridBagConstraints);\n+\n+        setLayout(new BorderLayout());\n+        add(panCommand, BorderLayout.CENTER);\n+\n+    }\n+\n+    private void initInfoPanel() {\n+        panInfo = new JPanel(new GridBagLayout());\n+        GridBagConstraints gridBagConstraints;\n+        int y = 0;\n+\n+        /* Unit Rating */\n+        lblRating = new JLabel(getCampaign().getUnitRatingText());\n+        if (getCampaign().getCampaignOptions().useDragoonRating()) {\n+            JLabel lblRatingHead = new JLabel(resourceMap.getString(\"lblRating.text\"));\n+            gridBagConstraints = new GridBagConstraints();\n+            gridBagConstraints.gridx = 0;\n+            gridBagConstraints.gridy = y;\n+            gridBagConstraints.fill = GridBagConstraints.NONE;\n+            gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+            gridBagConstraints.insets = new Insets(5, 5, 1, 5);\n+            panInfo.add(lblRatingHead, gridBagConstraints);\n+            gridBagConstraints.gridx = 1;\n+            gridBagConstraints.weightx = 1.0;\n+            panInfo.add(lblRating, gridBagConstraints);\n+            y++;\n+        }\n+        JLabel lblExperienceHead = new JLabel(resourceMap.getString(\"lblExperience.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblExperienceHead, gridBagConstraints);\n+        lblExperience = new JLabel(getCampaign().getUnitRating().getAverageExperience());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblExperience, gridBagConstraints);\n+        y++;\n+        JLabel lblMissionSuccessHead = new JLabel(resourceMap.getString(\"lblMissionSuccess.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblMissionSuccessHead, gridBagConstraints);\n+        lblMissionSuccess = new JLabel(getCampaign().getCampaignSummary().getMissionSuccessReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblMissionSuccess, gridBagConstraints);\n+        y++;\n+        JLabel lblPersonnelHead = new JLabel(resourceMap.getString(\"lblPersonnel.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblPersonnelHead, gridBagConstraints);\n+        lblPersonnel = new JLabel(getCampaign().getCampaignSummary().getPersonnelReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblPersonnel, gridBagConstraints);\n+        y++;\n+        JLabel lblCompositionHead = new JLabel(resourceMap.getString(\"lblComposition.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblCompositionHead, gridBagConstraints);\n+        lblComposition = new JLabel(getCampaign().getCampaignSummary().getForceCompositionReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblComposition, gridBagConstraints);\n+        y++;\n+        JLabel lblRepairStatusHead = new JLabel(resourceMap.getString(\"lblRepairStatus.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblRepairStatusHead, gridBagConstraints);\n+        lblRepairStatus = new JLabel(getCampaign().getCampaignSummary().getForceRepairReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblRepairStatus, gridBagConstraints);\n+        y++;\n+        JLabel lblTransportCapacityHead = new JLabel(resourceMap.getString(\"lblTransportCapacity.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblTransportCapacityHead, gridBagConstraints);\n+        lblTransportCapacity = new JLabel(getCampaign().getCampaignSummary().getTransportCapacity());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblTransportCapacity, gridBagConstraints);\n+        y++;\n+        JLabel lblCargoSummaryHead = new JLabel(resourceMap.getString(\"lblCargoSummary.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 5, 5);\n+        panInfo.add(lblCargoSummaryHead, gridBagConstraints);\n+        lblCargoSummary = new JLabel(getCampaign().getCampaignSummary().getCargoCapacityReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblCargoSummary, gridBagConstraints);\n+\n+        panInfo.setBorder(BorderFactory.createTitledBorder(resourceMap.getString(\"panInfo.title\")));\n+\n+\n+    }\n+\n+    /**\n+     * Initialize the panel for displaying the daily report log\n+     */\n+    private void initLogPanel() {\n+        panLog = new DailyReportLogPanel(getCampaignGui());\n+        panLog.setBorder(BorderFactory.createTitledBorder(resourceMap.getString(\"panLog.title\")));\n+        panLog.setMinimumSize(new java.awt.Dimension(400, 100));\n+        panLog.setPreferredSize(new java.awt.Dimension(400, 100));\n+    }\n+\n+    /**\n+     * Initialize the panel for displaying procurement information\n+     */\n+    private void initProcurementPanel() {\n+\n+        /* shopping buttons */\n+        JPanel panProcurementButtons = new JPanel(new GridLayout(4, 1));\n+        btnGetUnit = new JButton(resourceMap.getString(\"btnGetUnit.text\")); // NOI18N\n+        btnGetUnit.setToolTipText(resourceMap.getString(\"btnGetUnit.toolTipText\")); // NOI18N\n+        btnGetUnit.addActionListener(ev -> getUnit());\n+        btnGetUnit.setEnabled(true);\n+        panProcurementButtons.add(btnGetUnit);\n+        btnGetParts = new JButton(resourceMap.getString(\"btnGetParts.text\")); // NOI18N\n+        btnGetParts.setToolTipText(resourceMap.getString(\"btnGetParts.toolTipText\")); // NOI18N\n+        btnGetParts.addActionListener(ev -> getParts());\n+        btnGetParts.setEnabled(true);\n+        panProcurementButtons.add(btnGetParts);\n+        btnNeededParts = new JButton();\n+        btnNeededParts.setText(resourceMap.getString(\"btnNeededParts.text\")); // NOI18N\n+        btnNeededParts.setToolTipText(resourceMap.getString(\"btnNeededParts.toolTipText\"));\n+        btnNeededParts.addActionListener(ev -> {\n+            AcquisitionsDialog dlg = new AcquisitionsDialog(getFrame(), true, getCampaignGui());\n+            dlg.setVisible(true);\n+        });\n+        panProcurementButtons.add(btnNeededParts);\n+        btnPartsReport = new JButton();\n+        btnPartsReport.setText(resourceMap.getString(\"btnPartsReport.text\")); // NOI18N\n+        btnPartsReport.setToolTipText(resourceMap.getString(\"btnPartsReport.toolTipText\"));\n+        btnPartsReport.addActionListener(ev -> {\n+            PartsReportDialog dlg = new PartsReportDialog(getCampaignGui(), true);\n+            dlg.setVisible(true);\n+        });\n+        panProcurementButtons.add(btnPartsReport);\n+\n+        /* shopping table */\n+        procurementModel = new ProcurementTableModel(getCampaign());\n+        procurementTable = new JTable(procurementModel);\n+        TableRowSorter<ProcurementTableModel> shoppingSorter = new TableRowSorter<>(\n+                procurementModel);\n+        shoppingSorter.setComparator(ProcurementTableModel.COL_COST, new FormattedNumberSorter());\n+        shoppingSorter.setComparator(ProcurementTableModel.COL_TARGET, new TargetSorter());\n+        procurementTable.setRowSorter(shoppingSorter);\n+        TableColumn column;\n+        for (int i = 0; i < ProcurementTableModel.N_COL; i++) {\n+            column = procurementTable.getColumnModel().getColumn(i);\n+            column.setPreferredWidth(procurementModel.getColumnWidth(i));\n+            column.setCellRenderer(procurementModel.getRenderer());\n+        }\n+        procurementTable.setIntercellSpacing(new Dimension(0, 0));\n+        procurementTable.setShowGrid(false);\n+        procurementTable.addMouseListener(new ProcurementTableMouseAdapter(getCampaignGui()));\n+        procurementTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n+\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, 0), \"ADD\");\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_EQUALS, 0),\n+                \"ADD\");\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, 0),\n+                \"REMOVE\");\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_MINUS, 0),\n+                \"REMOVE\");\n+\n+        procurementTable.getActionMap().put(\"ADD\", new AbstractAction() {\n+            /**\n+             *\n+             */\n+            private static final long serialVersionUID = 4958203340754214211L;\n+\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                if (procurementTable.getSelectedRow() < 0) {\n+                    return;\n+                }\n+                procurementModel\n+                        .incrementItem(procurementTable.convertRowIndexToModel(procurementTable.getSelectedRow()));\n+            }\n+        });\n+\n+        procurementTable.getActionMap().put(\"REMOVE\", new AbstractAction() {\n+            /**\n+             *\n+             */\n+            private static final long serialVersionUID = -8377486575329708963L;\n+\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                if (procurementTable.getSelectedRow() < 0) {\n+                    return;\n+                }\n+                if (procurementModel\n+                        .getAcquisition(procurementTable.convertRowIndexToModel(procurementTable.getSelectedRow()))\n+                        .getQuantity() > 0) {\n+                    procurementModel.decrementItem(\n+                            procurementTable.convertRowIndexToModel(procurementTable.getSelectedRow()));\n+                }\n+            }\n+        });\n+\n+        JScrollPane scrollProcurement = new JScrollPane(procurementTable);\n+        panProcurement = new JPanel(new GridBagLayout());\n+        panProcurement.setBorder(BorderFactory.createTitledBorder(resourceMap.getString(\"panProcurement.title\")));\n+        GridBagConstraints gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(5,5,5,5);", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwMTIyOQ==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434201229", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    gridBagConstraints.insets = new Insets(5,5,5,5);\n          \n          \n            \n                    gridBagConstraints.insets = new Insets(5, 5, 5, 5);", "author": "Windchild292", "createdAt": "2020-06-02T22:05:11Z", "path": "MekHQ/src/mekhq/gui/CommandCenterTab.java", "diffHunk": "@@ -0,0 +1,609 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.gui;\n+\n+import megamek.common.event.Subscribe;\n+import megamek.common.util.DirectoryItems;\n+import megamek.common.util.EncodeControl;\n+import mekhq.MekHQ;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.event.*;\n+import mekhq.campaign.report.*;\n+import mekhq.gui.adapter.ProcurementTableMouseAdapter;\n+import mekhq.gui.dialog.*;\n+import mekhq.gui.model.ProcurementTableModel;\n+import mekhq.gui.sorter.FormattedNumberSorter;\n+import mekhq.gui.sorter.TargetSorter;\n+\n+import javax.swing.*;\n+import javax.swing.table.TableColumn;\n+import javax.swing.table.TableRowSorter;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.KeyEvent;\n+import java.util.List;\n+import java.util.ResourceBundle;\n+\n+/**\n+ * Collates important information about the campaign and displays it, along with some actionable buttons\n+ */\n+public final class CommandCenterTab extends CampaignGuiTab {\n+\n+    private JPanel panCommand;\n+\n+    // basic info panel\n+    private JPanel panInfo;\n+    private JLabel lblRating;\n+    private JLabel lblExperience;\n+    private JLabel lblPersonnel;\n+    private JLabel lblMissionSuccess;\n+    private JLabel lblComposition;\n+    private JLabel lblRepairStatus;\n+    private JLabel lblTransportCapacity;\n+    private JLabel lblCargoSummary;\n+\n+    // daily report\n+    private DailyReportLogPanel panLog;\n+\n+    // procurement table\n+    private JPanel panProcurement;\n+    private JTable procurementTable;\n+    private ProcurementTableModel procurementModel;\n+    private JButton btnGetUnit;\n+    private JButton btnGetParts;\n+    private JButton btnNeededParts;\n+    private JButton btnPartsReport;\n+\n+    // available reports\n+    private JPanel panReports;\n+\n+    //icon panel\n+    JPanel panIcon;\n+    JLabel lblIcon;\n+    private DirectoryItems icons;\n+\n+    ResourceBundle resourceMap;\n+\n+    /**\n+     *\n+     * @param gui a {@link CampaignGUI} object that this tab is a component of\n+     * @param name a <code>String</code> giving the name of this tab\n+     */\n+    CommandCenterTab(CampaignGUI gui, String name) {\n+        super(gui, name);\n+        MekHQ.registerHandler(this);\n+    }\n+\n+    /**\n+     * initialize the contents and layout of the tab\n+     */\n+    @Override\n+    public void initTab() {\n+        resourceMap = ResourceBundle.getBundle(\"mekhq.resources.CampaignGUI\", //$NON-NLS-1$ ;\n+                new EncodeControl());\n+\n+        panCommand = new JPanel(new GridBagLayout());\n+\n+        initInfoPanel();\n+        initLogPanel();\n+        initReportsPanel();\n+        initProcurementPanel();\n+        panIcon = new JPanel(new BorderLayout());\n+        lblIcon = new JLabel();\n+        panIcon.add(lblIcon, BorderLayout.CENTER);\n+        setIcon();\n+\n+        /* Set overall layout */\n+        GridBagConstraints gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.gridheight = 2;\n+        gridBagConstraints.insets = new Insets(5,5,5,5);\n+        gridBagConstraints.fill = GridBagConstraints.BOTH;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 1.0;\n+        panCommand.add(panLog, gridBagConstraints);\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.gridy = 1;\n+        gridBagConstraints.gridheight = 1;\n+        gridBagConstraints.gridwidth = 3;\n+        gridBagConstraints.fill = GridBagConstraints.BOTH;\n+        gridBagConstraints.weightx = 1.0;\n+        gridBagConstraints.weighty = 1.0;\n+        panCommand.add(panProcurement, gridBagConstraints);\n+        gridBagConstraints.gridx = 3;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.gridwidth = 1;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 1.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panCommand.add(panReports, gridBagConstraints);\n+        gridBagConstraints.gridx = 2;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panCommand.add(panInfo, gridBagConstraints);\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panCommand.add(panIcon, gridBagConstraints);\n+\n+        setLayout(new BorderLayout());\n+        add(panCommand, BorderLayout.CENTER);\n+\n+    }\n+\n+    private void initInfoPanel() {\n+        panInfo = new JPanel(new GridBagLayout());\n+        GridBagConstraints gridBagConstraints;\n+        int y = 0;\n+\n+        /* Unit Rating */\n+        lblRating = new JLabel(getCampaign().getUnitRatingText());\n+        if (getCampaign().getCampaignOptions().useDragoonRating()) {\n+            JLabel lblRatingHead = new JLabel(resourceMap.getString(\"lblRating.text\"));\n+            gridBagConstraints = new GridBagConstraints();\n+            gridBagConstraints.gridx = 0;\n+            gridBagConstraints.gridy = y;\n+            gridBagConstraints.fill = GridBagConstraints.NONE;\n+            gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+            gridBagConstraints.insets = new Insets(5, 5, 1, 5);\n+            panInfo.add(lblRatingHead, gridBagConstraints);\n+            gridBagConstraints.gridx = 1;\n+            gridBagConstraints.weightx = 1.0;\n+            panInfo.add(lblRating, gridBagConstraints);\n+            y++;\n+        }\n+        JLabel lblExperienceHead = new JLabel(resourceMap.getString(\"lblExperience.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblExperienceHead, gridBagConstraints);\n+        lblExperience = new JLabel(getCampaign().getUnitRating().getAverageExperience());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblExperience, gridBagConstraints);\n+        y++;\n+        JLabel lblMissionSuccessHead = new JLabel(resourceMap.getString(\"lblMissionSuccess.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblMissionSuccessHead, gridBagConstraints);\n+        lblMissionSuccess = new JLabel(getCampaign().getCampaignSummary().getMissionSuccessReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblMissionSuccess, gridBagConstraints);\n+        y++;\n+        JLabel lblPersonnelHead = new JLabel(resourceMap.getString(\"lblPersonnel.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblPersonnelHead, gridBagConstraints);\n+        lblPersonnel = new JLabel(getCampaign().getCampaignSummary().getPersonnelReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblPersonnel, gridBagConstraints);\n+        y++;\n+        JLabel lblCompositionHead = new JLabel(resourceMap.getString(\"lblComposition.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblCompositionHead, gridBagConstraints);\n+        lblComposition = new JLabel(getCampaign().getCampaignSummary().getForceCompositionReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblComposition, gridBagConstraints);\n+        y++;\n+        JLabel lblRepairStatusHead = new JLabel(resourceMap.getString(\"lblRepairStatus.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblRepairStatusHead, gridBagConstraints);\n+        lblRepairStatus = new JLabel(getCampaign().getCampaignSummary().getForceRepairReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblRepairStatus, gridBagConstraints);\n+        y++;\n+        JLabel lblTransportCapacityHead = new JLabel(resourceMap.getString(\"lblTransportCapacity.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblTransportCapacityHead, gridBagConstraints);\n+        lblTransportCapacity = new JLabel(getCampaign().getCampaignSummary().getTransportCapacity());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblTransportCapacity, gridBagConstraints);\n+        y++;\n+        JLabel lblCargoSummaryHead = new JLabel(resourceMap.getString(\"lblCargoSummary.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 5, 5);\n+        panInfo.add(lblCargoSummaryHead, gridBagConstraints);\n+        lblCargoSummary = new JLabel(getCampaign().getCampaignSummary().getCargoCapacityReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblCargoSummary, gridBagConstraints);\n+\n+        panInfo.setBorder(BorderFactory.createTitledBorder(resourceMap.getString(\"panInfo.title\")));\n+\n+\n+    }\n+\n+    /**\n+     * Initialize the panel for displaying the daily report log\n+     */\n+    private void initLogPanel() {\n+        panLog = new DailyReportLogPanel(getCampaignGui());\n+        panLog.setBorder(BorderFactory.createTitledBorder(resourceMap.getString(\"panLog.title\")));\n+        panLog.setMinimumSize(new java.awt.Dimension(400, 100));\n+        panLog.setPreferredSize(new java.awt.Dimension(400, 100));\n+    }\n+\n+    /**\n+     * Initialize the panel for displaying procurement information\n+     */\n+    private void initProcurementPanel() {\n+\n+        /* shopping buttons */\n+        JPanel panProcurementButtons = new JPanel(new GridLayout(4, 1));\n+        btnGetUnit = new JButton(resourceMap.getString(\"btnGetUnit.text\")); // NOI18N\n+        btnGetUnit.setToolTipText(resourceMap.getString(\"btnGetUnit.toolTipText\")); // NOI18N\n+        btnGetUnit.addActionListener(ev -> getUnit());\n+        btnGetUnit.setEnabled(true);\n+        panProcurementButtons.add(btnGetUnit);\n+        btnGetParts = new JButton(resourceMap.getString(\"btnGetParts.text\")); // NOI18N\n+        btnGetParts.setToolTipText(resourceMap.getString(\"btnGetParts.toolTipText\")); // NOI18N\n+        btnGetParts.addActionListener(ev -> getParts());\n+        btnGetParts.setEnabled(true);\n+        panProcurementButtons.add(btnGetParts);\n+        btnNeededParts = new JButton();\n+        btnNeededParts.setText(resourceMap.getString(\"btnNeededParts.text\")); // NOI18N\n+        btnNeededParts.setToolTipText(resourceMap.getString(\"btnNeededParts.toolTipText\"));\n+        btnNeededParts.addActionListener(ev -> {\n+            AcquisitionsDialog dlg = new AcquisitionsDialog(getFrame(), true, getCampaignGui());\n+            dlg.setVisible(true);\n+        });\n+        panProcurementButtons.add(btnNeededParts);\n+        btnPartsReport = new JButton();\n+        btnPartsReport.setText(resourceMap.getString(\"btnPartsReport.text\")); // NOI18N\n+        btnPartsReport.setToolTipText(resourceMap.getString(\"btnPartsReport.toolTipText\"));\n+        btnPartsReport.addActionListener(ev -> {\n+            PartsReportDialog dlg = new PartsReportDialog(getCampaignGui(), true);\n+            dlg.setVisible(true);\n+        });\n+        panProcurementButtons.add(btnPartsReport);\n+\n+        /* shopping table */\n+        procurementModel = new ProcurementTableModel(getCampaign());\n+        procurementTable = new JTable(procurementModel);\n+        TableRowSorter<ProcurementTableModel> shoppingSorter = new TableRowSorter<>(\n+                procurementModel);\n+        shoppingSorter.setComparator(ProcurementTableModel.COL_COST, new FormattedNumberSorter());\n+        shoppingSorter.setComparator(ProcurementTableModel.COL_TARGET, new TargetSorter());\n+        procurementTable.setRowSorter(shoppingSorter);\n+        TableColumn column;\n+        for (int i = 0; i < ProcurementTableModel.N_COL; i++) {\n+            column = procurementTable.getColumnModel().getColumn(i);\n+            column.setPreferredWidth(procurementModel.getColumnWidth(i));\n+            column.setCellRenderer(procurementModel.getRenderer());\n+        }\n+        procurementTable.setIntercellSpacing(new Dimension(0, 0));\n+        procurementTable.setShowGrid(false);\n+        procurementTable.addMouseListener(new ProcurementTableMouseAdapter(getCampaignGui()));\n+        procurementTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n+\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, 0), \"ADD\");\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_EQUALS, 0),\n+                \"ADD\");\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, 0),\n+                \"REMOVE\");\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_MINUS, 0),\n+                \"REMOVE\");\n+\n+        procurementTable.getActionMap().put(\"ADD\", new AbstractAction() {\n+            /**\n+             *\n+             */\n+            private static final long serialVersionUID = 4958203340754214211L;\n+\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                if (procurementTable.getSelectedRow() < 0) {\n+                    return;\n+                }\n+                procurementModel\n+                        .incrementItem(procurementTable.convertRowIndexToModel(procurementTable.getSelectedRow()));\n+            }\n+        });\n+\n+        procurementTable.getActionMap().put(\"REMOVE\", new AbstractAction() {\n+            /**\n+             *\n+             */\n+            private static final long serialVersionUID = -8377486575329708963L;\n+\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                if (procurementTable.getSelectedRow() < 0) {\n+                    return;\n+                }\n+                if (procurementModel\n+                        .getAcquisition(procurementTable.convertRowIndexToModel(procurementTable.getSelectedRow()))\n+                        .getQuantity() > 0) {\n+                    procurementModel.decrementItem(\n+                            procurementTable.convertRowIndexToModel(procurementTable.getSelectedRow()));\n+                }\n+            }\n+        });\n+\n+        JScrollPane scrollProcurement = new JScrollPane(procurementTable);\n+        panProcurement = new JPanel(new GridBagLayout());\n+        panProcurement.setBorder(BorderFactory.createTitledBorder(resourceMap.getString(\"panProcurement.title\")));\n+        GridBagConstraints gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(5,5,5,5);\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panProcurement.add(panProcurementButtons, gridBagConstraints);\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.insets = new Insets(5,5,5,5);", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwMTM0NQ==", "url": "https://github.com/MegaMek/mekhq/pull/1776#discussion_r434201345", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(null == icons) {\n          \n          \n            \n                    if (null == icons) {", "author": "Windchild292", "createdAt": "2020-06-02T22:05:32Z", "path": "MekHQ/src/mekhq/gui/CommandCenterTab.java", "diffHunk": "@@ -0,0 +1,609 @@\n+/*\n+ * Copyright (c) 2020 The MegaMek Team. All rights reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package mekhq.gui;\n+\n+import megamek.common.event.Subscribe;\n+import megamek.common.util.DirectoryItems;\n+import megamek.common.util.EncodeControl;\n+import mekhq.MekHQ;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.event.*;\n+import mekhq.campaign.report.*;\n+import mekhq.gui.adapter.ProcurementTableMouseAdapter;\n+import mekhq.gui.dialog.*;\n+import mekhq.gui.model.ProcurementTableModel;\n+import mekhq.gui.sorter.FormattedNumberSorter;\n+import mekhq.gui.sorter.TargetSorter;\n+\n+import javax.swing.*;\n+import javax.swing.table.TableColumn;\n+import javax.swing.table.TableRowSorter;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.KeyEvent;\n+import java.util.List;\n+import java.util.ResourceBundle;\n+\n+/**\n+ * Collates important information about the campaign and displays it, along with some actionable buttons\n+ */\n+public final class CommandCenterTab extends CampaignGuiTab {\n+\n+    private JPanel panCommand;\n+\n+    // basic info panel\n+    private JPanel panInfo;\n+    private JLabel lblRating;\n+    private JLabel lblExperience;\n+    private JLabel lblPersonnel;\n+    private JLabel lblMissionSuccess;\n+    private JLabel lblComposition;\n+    private JLabel lblRepairStatus;\n+    private JLabel lblTransportCapacity;\n+    private JLabel lblCargoSummary;\n+\n+    // daily report\n+    private DailyReportLogPanel panLog;\n+\n+    // procurement table\n+    private JPanel panProcurement;\n+    private JTable procurementTable;\n+    private ProcurementTableModel procurementModel;\n+    private JButton btnGetUnit;\n+    private JButton btnGetParts;\n+    private JButton btnNeededParts;\n+    private JButton btnPartsReport;\n+\n+    // available reports\n+    private JPanel panReports;\n+\n+    //icon panel\n+    JPanel panIcon;\n+    JLabel lblIcon;\n+    private DirectoryItems icons;\n+\n+    ResourceBundle resourceMap;\n+\n+    /**\n+     *\n+     * @param gui a {@link CampaignGUI} object that this tab is a component of\n+     * @param name a <code>String</code> giving the name of this tab\n+     */\n+    CommandCenterTab(CampaignGUI gui, String name) {\n+        super(gui, name);\n+        MekHQ.registerHandler(this);\n+    }\n+\n+    /**\n+     * initialize the contents and layout of the tab\n+     */\n+    @Override\n+    public void initTab() {\n+        resourceMap = ResourceBundle.getBundle(\"mekhq.resources.CampaignGUI\", //$NON-NLS-1$ ;\n+                new EncodeControl());\n+\n+        panCommand = new JPanel(new GridBagLayout());\n+\n+        initInfoPanel();\n+        initLogPanel();\n+        initReportsPanel();\n+        initProcurementPanel();\n+        panIcon = new JPanel(new BorderLayout());\n+        lblIcon = new JLabel();\n+        panIcon.add(lblIcon, BorderLayout.CENTER);\n+        setIcon();\n+\n+        /* Set overall layout */\n+        GridBagConstraints gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.gridheight = 2;\n+        gridBagConstraints.insets = new Insets(5,5,5,5);\n+        gridBagConstraints.fill = GridBagConstraints.BOTH;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 1.0;\n+        panCommand.add(panLog, gridBagConstraints);\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.gridy = 1;\n+        gridBagConstraints.gridheight = 1;\n+        gridBagConstraints.gridwidth = 3;\n+        gridBagConstraints.fill = GridBagConstraints.BOTH;\n+        gridBagConstraints.weightx = 1.0;\n+        gridBagConstraints.weighty = 1.0;\n+        panCommand.add(panProcurement, gridBagConstraints);\n+        gridBagConstraints.gridx = 3;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.gridwidth = 1;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 1.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panCommand.add(panReports, gridBagConstraints);\n+        gridBagConstraints.gridx = 2;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panCommand.add(panInfo, gridBagConstraints);\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panCommand.add(panIcon, gridBagConstraints);\n+\n+        setLayout(new BorderLayout());\n+        add(panCommand, BorderLayout.CENTER);\n+\n+    }\n+\n+    private void initInfoPanel() {\n+        panInfo = new JPanel(new GridBagLayout());\n+        GridBagConstraints gridBagConstraints;\n+        int y = 0;\n+\n+        /* Unit Rating */\n+        lblRating = new JLabel(getCampaign().getUnitRatingText());\n+        if (getCampaign().getCampaignOptions().useDragoonRating()) {\n+            JLabel lblRatingHead = new JLabel(resourceMap.getString(\"lblRating.text\"));\n+            gridBagConstraints = new GridBagConstraints();\n+            gridBagConstraints.gridx = 0;\n+            gridBagConstraints.gridy = y;\n+            gridBagConstraints.fill = GridBagConstraints.NONE;\n+            gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+            gridBagConstraints.insets = new Insets(5, 5, 1, 5);\n+            panInfo.add(lblRatingHead, gridBagConstraints);\n+            gridBagConstraints.gridx = 1;\n+            gridBagConstraints.weightx = 1.0;\n+            panInfo.add(lblRating, gridBagConstraints);\n+            y++;\n+        }\n+        JLabel lblExperienceHead = new JLabel(resourceMap.getString(\"lblExperience.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblExperienceHead, gridBagConstraints);\n+        lblExperience = new JLabel(getCampaign().getUnitRating().getAverageExperience());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblExperience, gridBagConstraints);\n+        y++;\n+        JLabel lblMissionSuccessHead = new JLabel(resourceMap.getString(\"lblMissionSuccess.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblMissionSuccessHead, gridBagConstraints);\n+        lblMissionSuccess = new JLabel(getCampaign().getCampaignSummary().getMissionSuccessReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblMissionSuccess, gridBagConstraints);\n+        y++;\n+        JLabel lblPersonnelHead = new JLabel(resourceMap.getString(\"lblPersonnel.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblPersonnelHead, gridBagConstraints);\n+        lblPersonnel = new JLabel(getCampaign().getCampaignSummary().getPersonnelReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblPersonnel, gridBagConstraints);\n+        y++;\n+        JLabel lblCompositionHead = new JLabel(resourceMap.getString(\"lblComposition.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblCompositionHead, gridBagConstraints);\n+        lblComposition = new JLabel(getCampaign().getCampaignSummary().getForceCompositionReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblComposition, gridBagConstraints);\n+        y++;\n+        JLabel lblRepairStatusHead = new JLabel(resourceMap.getString(\"lblRepairStatus.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblRepairStatusHead, gridBagConstraints);\n+        lblRepairStatus = new JLabel(getCampaign().getCampaignSummary().getForceRepairReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblRepairStatus, gridBagConstraints);\n+        y++;\n+        JLabel lblTransportCapacityHead = new JLabel(resourceMap.getString(\"lblTransportCapacity.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 1, 5);\n+        panInfo.add(lblTransportCapacityHead, gridBagConstraints);\n+        lblTransportCapacity = new JLabel(getCampaign().getCampaignSummary().getTransportCapacity());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblTransportCapacity, gridBagConstraints);\n+        y++;\n+        JLabel lblCargoSummaryHead = new JLabel(resourceMap.getString(\"lblCargoSummary.text\"));\n+        gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = y;\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(1, 5, 5, 5);\n+        panInfo.add(lblCargoSummaryHead, gridBagConstraints);\n+        lblCargoSummary = new JLabel(getCampaign().getCampaignSummary().getCargoCapacityReport());\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.weightx = 1.0;\n+        panInfo.add(lblCargoSummary, gridBagConstraints);\n+\n+        panInfo.setBorder(BorderFactory.createTitledBorder(resourceMap.getString(\"panInfo.title\")));\n+\n+\n+    }\n+\n+    /**\n+     * Initialize the panel for displaying the daily report log\n+     */\n+    private void initLogPanel() {\n+        panLog = new DailyReportLogPanel(getCampaignGui());\n+        panLog.setBorder(BorderFactory.createTitledBorder(resourceMap.getString(\"panLog.title\")));\n+        panLog.setMinimumSize(new java.awt.Dimension(400, 100));\n+        panLog.setPreferredSize(new java.awt.Dimension(400, 100));\n+    }\n+\n+    /**\n+     * Initialize the panel for displaying procurement information\n+     */\n+    private void initProcurementPanel() {\n+\n+        /* shopping buttons */\n+        JPanel panProcurementButtons = new JPanel(new GridLayout(4, 1));\n+        btnGetUnit = new JButton(resourceMap.getString(\"btnGetUnit.text\")); // NOI18N\n+        btnGetUnit.setToolTipText(resourceMap.getString(\"btnGetUnit.toolTipText\")); // NOI18N\n+        btnGetUnit.addActionListener(ev -> getUnit());\n+        btnGetUnit.setEnabled(true);\n+        panProcurementButtons.add(btnGetUnit);\n+        btnGetParts = new JButton(resourceMap.getString(\"btnGetParts.text\")); // NOI18N\n+        btnGetParts.setToolTipText(resourceMap.getString(\"btnGetParts.toolTipText\")); // NOI18N\n+        btnGetParts.addActionListener(ev -> getParts());\n+        btnGetParts.setEnabled(true);\n+        panProcurementButtons.add(btnGetParts);\n+        btnNeededParts = new JButton();\n+        btnNeededParts.setText(resourceMap.getString(\"btnNeededParts.text\")); // NOI18N\n+        btnNeededParts.setToolTipText(resourceMap.getString(\"btnNeededParts.toolTipText\"));\n+        btnNeededParts.addActionListener(ev -> {\n+            AcquisitionsDialog dlg = new AcquisitionsDialog(getFrame(), true, getCampaignGui());\n+            dlg.setVisible(true);\n+        });\n+        panProcurementButtons.add(btnNeededParts);\n+        btnPartsReport = new JButton();\n+        btnPartsReport.setText(resourceMap.getString(\"btnPartsReport.text\")); // NOI18N\n+        btnPartsReport.setToolTipText(resourceMap.getString(\"btnPartsReport.toolTipText\"));\n+        btnPartsReport.addActionListener(ev -> {\n+            PartsReportDialog dlg = new PartsReportDialog(getCampaignGui(), true);\n+            dlg.setVisible(true);\n+        });\n+        panProcurementButtons.add(btnPartsReport);\n+\n+        /* shopping table */\n+        procurementModel = new ProcurementTableModel(getCampaign());\n+        procurementTable = new JTable(procurementModel);\n+        TableRowSorter<ProcurementTableModel> shoppingSorter = new TableRowSorter<>(\n+                procurementModel);\n+        shoppingSorter.setComparator(ProcurementTableModel.COL_COST, new FormattedNumberSorter());\n+        shoppingSorter.setComparator(ProcurementTableModel.COL_TARGET, new TargetSorter());\n+        procurementTable.setRowSorter(shoppingSorter);\n+        TableColumn column;\n+        for (int i = 0; i < ProcurementTableModel.N_COL; i++) {\n+            column = procurementTable.getColumnModel().getColumn(i);\n+            column.setPreferredWidth(procurementModel.getColumnWidth(i));\n+            column.setCellRenderer(procurementModel.getRenderer());\n+        }\n+        procurementTable.setIntercellSpacing(new Dimension(0, 0));\n+        procurementTable.setShowGrid(false);\n+        procurementTable.addMouseListener(new ProcurementTableMouseAdapter(getCampaignGui()));\n+        procurementTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n+\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, 0), \"ADD\");\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_EQUALS, 0),\n+                \"ADD\");\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, 0),\n+                \"REMOVE\");\n+        procurementTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_MINUS, 0),\n+                \"REMOVE\");\n+\n+        procurementTable.getActionMap().put(\"ADD\", new AbstractAction() {\n+            /**\n+             *\n+             */\n+            private static final long serialVersionUID = 4958203340754214211L;\n+\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                if (procurementTable.getSelectedRow() < 0) {\n+                    return;\n+                }\n+                procurementModel\n+                        .incrementItem(procurementTable.convertRowIndexToModel(procurementTable.getSelectedRow()));\n+            }\n+        });\n+\n+        procurementTable.getActionMap().put(\"REMOVE\", new AbstractAction() {\n+            /**\n+             *\n+             */\n+            private static final long serialVersionUID = -8377486575329708963L;\n+\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                if (procurementTable.getSelectedRow() < 0) {\n+                    return;\n+                }\n+                if (procurementModel\n+                        .getAcquisition(procurementTable.convertRowIndexToModel(procurementTable.getSelectedRow()))\n+                        .getQuantity() > 0) {\n+                    procurementModel.decrementItem(\n+                            procurementTable.convertRowIndexToModel(procurementTable.getSelectedRow()));\n+                }\n+            }\n+        });\n+\n+        JScrollPane scrollProcurement = new JScrollPane(procurementTable);\n+        panProcurement = new JPanel(new GridBagLayout());\n+        panProcurement.setBorder(BorderFactory.createTitledBorder(resourceMap.getString(\"panProcurement.title\")));\n+        GridBagConstraints gridBagConstraints = new GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new Insets(5,5,5,5);\n+        gridBagConstraints.fill = GridBagConstraints.NONE;\n+        gridBagConstraints.weightx = 0.0;\n+        gridBagConstraints.weighty = 0.0;\n+        panProcurement.add(panProcurementButtons, gridBagConstraints);\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.gridy = 0;\n+        gridBagConstraints.insets = new Insets(5,5,5,5);\n+        gridBagConstraints.fill = GridBagConstraints.BOTH;\n+        gridBagConstraints.weightx = 1.0;\n+        gridBagConstraints.weighty = 1.0;\n+        panProcurement.add(scrollProcurement, gridBagConstraints);\n+    }\n+\n+    /**\n+     * Initialize the panel for displaying available reports\n+     */\n+    private void initReportsPanel() {\n+        panReports = new JPanel(new GridLayout(5, 1));\n+        JButton btnTransportReport = new JButton(resourceMap.getString(\"btnTransportReport.text\"));\n+        btnTransportReport.addActionListener(ev -> {\n+            getCampaignGui().showReport(new TransportReport(getCampaign()));\n+        });\n+        panReports.add(btnTransportReport);\n+        JButton btnHangarOverview = new JButton(resourceMap.getString(\"btnHangarOverview.text\"));\n+        btnHangarOverview.addActionListener(evt -> {\n+            getCampaignGui().showReport(new HangarReport(getCampaign()));\n+        });\n+        panReports.add(btnHangarOverview);\n+        JButton btnPersonnelOverview = new JButton(resourceMap.getString(\"btnPersonnelOverview.text\"));\n+        btnPersonnelOverview.addActionListener(evt -> {\n+            getCampaignGui().showReport(new PersonnelReport(getCampaign()));\n+        });\n+        panReports.add(btnPersonnelOverview);\n+        JButton btnCargoCapacity = new JButton(resourceMap.getString(\"btnCargoCapacity.text\"));\n+        btnCargoCapacity.addActionListener(evt -> {\n+            getCampaignGui().showReport(new CargoReport(getCampaign()));\n+        });\n+        panReports.add(btnCargoCapacity);\n+        JButton btnUnitRating = new JButton(resourceMap.getString(\"btnUnitRating.text\"));\n+        btnUnitRating.addActionListener(evt -> {\n+            getCampaignGui().showReport(new RatingReport(getCampaign()));\n+        });\n+        panReports.add(btnUnitRating);\n+        panReports.setBorder(BorderFactory.createTitledBorder(resourceMap.getString(\"panReports.title\")));\n+    }\n+\n+    /**\n+     * set the icon for the unit if it exits in the icon panel\n+     */\n+    public void setIcon() {\n+\n+        if(null == icons) {", "originalCommit": "9172aa72bf9606eca418e8f737b35a9dbee8593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9cc66760b6d6a5e26f07338fdc85e8b7f67c5385", "url": "https://github.com/MegaMek/mekhq/commit/9cc66760b6d6a5e26f07338fdc85e8b7f67c5385", "message": "Update MekHQ/src/mekhq/gui/model/ProcurementTableModel.java\n\nCo-authored-by: Justin Bowen <39067288+Windchild292@users.noreply.github.com>", "committedDate": "2020-06-02T23:40:58Z", "type": "commit"}, {"oid": "cacd6e2ab5a93dabaa2744189f2d9d120e581271", "url": "https://github.com/MegaMek/mekhq/commit/cacd6e2ab5a93dabaa2744189f2d9d120e581271", "message": "Update MekHQ/src/mekhq/gui/model/ProcurementTableModel.java\n\nCo-authored-by: Justin Bowen <39067288+Windchild292@users.noreply.github.com>", "committedDate": "2020-06-02T23:41:06Z", "type": "commit"}, {"oid": "56fbbc25e758a44735a4b853f0d4284adab452aa", "url": "https://github.com/MegaMek/mekhq/commit/56fbbc25e758a44735a4b853f0d4284adab452aa", "message": "Update MekHQ/src/mekhq/gui/model/ProcurementTableModel.java\n\nCo-authored-by: Justin Bowen <39067288+Windchild292@users.noreply.github.com>", "committedDate": "2020-06-02T23:41:13Z", "type": "commit"}, {"oid": "c81cc201009b5415b166b099163a53eb80d93e38", "url": "https://github.com/MegaMek/mekhq/commit/c81cc201009b5415b166b099163a53eb80d93e38", "message": "Update MekHQ/src/mekhq/gui/model/ProcurementTableModel.java\n\nCo-authored-by: Justin Bowen <39067288+Windchild292@users.noreply.github.com>", "committedDate": "2020-06-02T23:41:21Z", "type": "commit"}, {"oid": "86c66692b6499972a76d47e5c547f88af3f99f6a", "url": "https://github.com/MegaMek/mekhq/commit/86c66692b6499972a76d47e5c547f88af3f99f6a", "message": "Update MekHQ/src/mekhq/gui/CommandCenterTab.java\n\nCo-authored-by: Justin Bowen <39067288+Windchild292@users.noreply.github.com>", "committedDate": "2020-06-02T23:41:28Z", "type": "commit"}, {"oid": "c203cc4773b7df2ce4317568466a7515bbd383fd", "url": "https://github.com/MegaMek/mekhq/commit/c203cc4773b7df2ce4317568466a7515bbd383fd", "message": "Update MekHQ/src/mekhq/gui/RepairTab.java\n\nCo-authored-by: Justin Bowen <39067288+Windchild292@users.noreply.github.com>", "committedDate": "2020-06-02T23:41:39Z", "type": "commit"}, {"oid": "2c6b90eb5811c46610a32c2c2ab87504355da60d", "url": "https://github.com/MegaMek/mekhq/commit/2c6b90eb5811c46610a32c2c2ab87504355da60d", "message": "Update MekHQ/src/mekhq/gui/RepairTab.java\n\nCo-authored-by: Justin Bowen <39067288+Windchild292@users.noreply.github.com>", "committedDate": "2020-06-02T23:41:55Z", "type": "commit"}, {"oid": "c69e228005a4d2242b3870b921d7538ad650d78a", "url": "https://github.com/MegaMek/mekhq/commit/c69e228005a4d2242b3870b921d7538ad650d78a", "message": "Update MekHQ/src/mekhq/gui/CommandCenterTab.java\n\nCo-authored-by: Justin Bowen <39067288+Windchild292@users.noreply.github.com>", "committedDate": "2020-06-02T23:42:12Z", "type": "commit"}, {"oid": "2932cfa8b2ed2d3ea059fde235272ec1d561f300", "url": "https://github.com/MegaMek/mekhq/commit/2932cfa8b2ed2d3ea059fde235272ec1d561f300", "message": "Update MekHQ/src/mekhq/gui/CommandCenterTab.java\n\nCo-authored-by: Justin Bowen <39067288+Windchild292@users.noreply.github.com>", "committedDate": "2020-06-02T23:42:20Z", "type": "commit"}, {"oid": "fc9133a1973823f4eab7834b23c3f3ba283a1279", "url": "https://github.com/MegaMek/mekhq/commit/fc9133a1973823f4eab7834b23c3f3ba283a1279", "message": "Update MekHQ/src/mekhq/gui/CommandCenterTab.java\n\nCo-authored-by: Justin Bowen <39067288+Windchild292@users.noreply.github.com>", "committedDate": "2020-06-02T23:42:31Z", "type": "commit"}, {"oid": "75418d82f862adcce1662d4dd3f6681e99820bfe", "url": "https://github.com/MegaMek/mekhq/commit/75418d82f862adcce1662d4dd3f6681e99820bfe", "message": "Update MekHQ/src/mekhq/gui/CommandCenterTab.java\n\nCo-authored-by: Justin Bowen <39067288+Windchild292@users.noreply.github.com>", "committedDate": "2020-06-02T23:42:43Z", "type": "commit"}, {"oid": "1b92076a4d959eb00f57d493f64804f577831880", "url": "https://github.com/MegaMek/mekhq/commit/1b92076a4d959eb00f57d493f64804f577831880", "message": "Update MekHQ/src/mekhq/gui/RepairTab.java\n\nCo-authored-by: Justin Bowen <39067288+Windchild292@users.noreply.github.com>", "committedDate": "2020-06-02T23:42:58Z", "type": "commit"}, {"oid": "65176ef1081031452a5a9aaf73be90935e169327", "url": "https://github.com/MegaMek/mekhq/commit/65176ef1081031452a5a9aaf73be90935e169327", "message": "Update MekHQ/src/mekhq/gui/RepairTab.java\n\nCo-authored-by: Justin Bowen <39067288+Windchild292@users.noreply.github.com>", "committedDate": "2020-06-02T23:44:22Z", "type": "commit"}, {"oid": "ce814e6e774862ef42c37700902520e5838aef4e", "url": "https://github.com/MegaMek/mekhq/commit/ce814e6e774862ef42c37700902520e5838aef4e", "message": "Update MekHQ/src/mekhq/gui/CampaignGUI.java\n\nCo-authored-by: Justin Bowen <39067288+Windchild292@users.noreply.github.com>", "committedDate": "2020-06-02T23:45:18Z", "type": "commit"}, {"oid": "c006a9fc454836db3679a9bf7ea012e84f2e0d5e", "url": "https://github.com/MegaMek/mekhq/commit/c006a9fc454836db3679a9bf7ea012e84f2e0d5e", "message": "Update MekHQ/src/mekhq/gui/CampaignGUI.java\n\nCo-authored-by: Justin Bowen <39067288+Windchild292@users.noreply.github.com>", "committedDate": "2020-06-02T23:45:35Z", "type": "commit"}, {"oid": "d76b4dec511ee553e21c26fbb71d50c48627dec5", "url": "https://github.com/MegaMek/mekhq/commit/d76b4dec511ee553e21c26fbb71d50c48627dec5", "message": "Update MekHQ/src/mekhq/gui/dialog/PartsReportDialog.java\n\nCo-authored-by: Justin Bowen <39067288+Windchild292@users.noreply.github.com>", "committedDate": "2020-06-02T23:46:07Z", "type": "commit"}, {"oid": "514d3f8d33948bf2235c04d8e596e90bdc8326fd", "url": "https://github.com/MegaMek/mekhq/commit/514d3f8d33948bf2235c04d8e596e90bdc8326fd", "message": "Update MekHQ/src/mekhq/gui/dialog/PartsReportDialog.java\n\nCo-authored-by: Justin Bowen <39067288+Windchild292@users.noreply.github.com>", "committedDate": "2020-06-02T23:46:30Z", "type": "commit"}, {"oid": "818efc9677adc40b677fb9bbd60db1a3bcccaa80", "url": "https://github.com/MegaMek/mekhq/commit/818efc9677adc40b677fb9bbd60db1a3bcccaa80", "message": "Update MekHQ/src/mekhq/campaign/CampaignSummary.java\n\nCo-authored-by: Justin Bowen <39067288+Windchild292@users.noreply.github.com>", "committedDate": "2020-06-02T23:47:16Z", "type": "commit"}, {"oid": "ea802895b6555ae5838eaa3879f1a1ea944f6775", "url": "https://github.com/MegaMek/mekhq/commit/ea802895b6555ae5838eaa3879f1a1ea944f6775", "message": "Update MekHQ/src/mekhq/campaign/CampaignSummary.java\n\nCo-authored-by: Justin Bowen <39067288+Windchild292@users.noreply.github.com>", "committedDate": "2020-06-02T23:47:49Z", "type": "commit"}, {"oid": "6752b2cf3173b84c0e8266559940e7a451ae0d9d", "url": "https://github.com/MegaMek/mekhq/commit/6752b2cf3173b84c0e8266559940e7a451ae0d9d", "message": "Apply suggestions from code review\n\nCo-authored-by: Justin Bowen <39067288+Windchild292@users.noreply.github.com>", "committedDate": "2020-06-02T23:52:06Z", "type": "commit"}, {"oid": "4c301fa9075e6c9b09adb05e7f451917f021c122", "url": "https://github.com/MegaMek/mekhq/commit/4c301fa9075e6c9b09adb05e7f451917f021c122", "message": "deal with hotkey issues and formatting", "committedDate": "2020-06-03T00:04:27Z", "type": "commit"}, {"oid": "e42333d879521ca9a2508158bcd731a4d472e07c", "url": "https://github.com/MegaMek/mekhq/commit/e42333d879521ca9a2508158bcd731a4d472e07c", "message": "Merge branch 'command_center' of https://github.com/AaronGullickson/mekhq into command_center", "committedDate": "2020-06-03T00:04:38Z", "type": "commit"}, {"oid": "75ab7dd6b3d2523aeeb469505a51e9dc27ff189a", "url": "https://github.com/MegaMek/mekhq/commit/75ab7dd6b3d2523aeeb469505a51e9dc27ff189a", "message": "fixed missing access modifiers", "committedDate": "2020-06-03T13:25:24Z", "type": "commit"}]}