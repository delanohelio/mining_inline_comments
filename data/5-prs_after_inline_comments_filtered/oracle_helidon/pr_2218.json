{"pr_number": 2218, "pr_title": "Flaky MultiFromNotTrustedInputStreamTckTest fix", "pr_createdAt": "2020-07-28T08:11:10Z", "pr_url": "https://github.com/oracle/helidon/pull/2218", "timeline": [{"oid": "1e593b970ecbe4afdcb7b6ece303b5b6f2e322c0", "url": "https://github.com/oracle/helidon/commit/1e593b970ecbe4afdcb7b6ece303b5b6f2e322c0", "message": "Flaky MultiFromNotTrustedInputStreamTckTest.stochastic_spec103_mustSignalOnMethodsSequentially fix\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-07-28T08:10:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQxMjY4NQ==", "url": "https://github.com/oracle/helidon/pull/2218#discussion_r461412685", "bodyText": "I think this will fail the \u00a73.9 tests because it doesn't check n <= 1 cases and doesn't report them either.", "author": "akarnokd", "createdAt": "2020-07-28T08:35:12Z", "path": "common/reactive/src/main/java/io/helidon/common/reactive/DeferredSubscription.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.common.reactive;\n+\n+import java.util.concurrent.Flow;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Used for deferring any callbacks caused by calling onSubscribe\n+ * until control is returned.\n+ *\n+ * <pre>{@code\n+ *         DeferredSubscription ds = new DeferredSubscription();\n+ *         subscriber.onSubscribe(ds);\n+ *         // request/cancel signals received until now are going to be processed\n+ *         // after setting actual subscription\n+ *         ds.setSubscription(subscription);\n+ * }</pre>\n+ * See spec Rule \u00a71.3 for more info.\n+ */\n+class DeferredSubscription extends AtomicReference<Flow.Subscription>\n+        implements Flow.Subscription {\n+\n+    private static final long serialVersionUID = -6510169867323964352L;\n+    private final AtomicLong requested = new AtomicLong();\n+\n+    @Override\n+    public void request(long n) {\n+        SubscriptionHelper.deferredRequest(this, requested, n);", "originalCommit": "1e593b970ecbe4afdcb7b6ece303b5b6f2e322c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQzOTQyNA==", "url": "https://github.com/oracle/helidon/pull/2218#discussion_r461439424", "bodyText": "I see ... the accumulation of requests before actual subscription is provided:\nrequest(-1)\nrequest(10)\nsetSubscription(...)\nSeems like there is a hole in the TCK, just passed it", "author": "danielkec", "createdAt": "2020-07-28T09:16:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQxMjY4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ0MzgxNA==", "url": "https://github.com/oracle/helidon/pull/2218#discussion_r461443814", "bodyText": "Perhaps something else in the chain could be failing so the bad request never reaches this component.", "author": "akarnokd", "createdAt": "2020-07-28T09:24:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQxMjY4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUzNTE3NQ==", "url": "https://github.com/oracle/helidon/pull/2218#discussion_r461535175", "bodyText": "Worst case scenario I can see now is that cancel signal swaps subs reference between n <= 0L && this.compareAndSet( but there has to be line drawn somewhere right?", "author": "danielkec", "createdAt": "2020-07-28T12:19:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQxMjY4NQ=="}], "type": "inlineReview"}, {"oid": "b8c1dd60117c84c3e56e1fb2c95b96cd87d10848", "url": "https://github.com/oracle/helidon/commit/b8c1dd60117c84c3e56e1fb2c95b96cd87d10848", "message": "Cumulating deferred bad requests\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-07-28T12:18:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU0NjE5OQ==", "url": "https://github.com/oracle/helidon/pull/2218#discussion_r461546199", "bodyText": "Have n = -1; so that requested == 0 indicating no request is not confused. No need for the cancellation.", "author": "akarnokd", "createdAt": "2020-07-28T12:38:20Z", "path": "common/reactive/src/main/java/io/helidon/common/reactive/DeferredSubscription.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.common.reactive;\n+\n+import java.util.concurrent.Flow;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Used for deferring any callbacks caused by calling onSubscribe\n+ * until control is returned.\n+ *\n+ * <pre>{@code\n+ *         DeferredSubscription ds = new DeferredSubscription();\n+ *         subscriber.onSubscribe(ds);\n+ *         // request/cancel signals received until now are going to be processed\n+ *         // after setting actual subscription\n+ *         ds.setSubscription(subscription);\n+ * }</pre>\n+ * See spec Rule \u00a71.3 for more info.\n+ */\n+class DeferredSubscription extends AtomicReference<Flow.Subscription>\n+        implements Flow.Subscription {\n+\n+    private static final long serialVersionUID = -6510169867323964352L;\n+    private final AtomicLong requested = new AtomicLong();\n+\n+    @Override\n+    public void request(long n) {\n+        if (n <= 0L && this.compareAndSet(null, SubscriptionHelper.CANCELED)) {\n+            //subscription ref is not null, deferredRequest wont increment any more\n+            requested.set(-1L);", "originalCommit": "b8c1dd60117c84c3e56e1fb2c95b96cd87d10848", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA4NDk3OQ==", "url": "https://github.com/oracle/helidon/pull/2218#discussion_r463084979", "bodyText": "Missed that thx", "author": "danielkec", "createdAt": "2020-07-30T15:33:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU0NjE5OQ=="}], "type": "inlineReview"}, {"oid": "c7658df7776896c0b483bd5a93413486068fdeb4", "url": "https://github.com/oracle/helidon/commit/c7658df7776896c0b483bd5a93413486068fdeb4", "message": "Deferred bad request with state\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-07-29T09:09:56Z", "type": "forcePushed"}, {"oid": "c7658df7776896c0b483bd5a93413486068fdeb4", "url": "https://github.com/oracle/helidon/commit/c7658df7776896c0b483bd5a93413486068fdeb4", "message": "Deferred bad request with state\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-07-29T09:09:56Z", "type": "commit"}]}