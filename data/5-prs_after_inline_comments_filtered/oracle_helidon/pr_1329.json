{"pr_number": 1329, "pr_title": "DB Client examples", "pr_createdAt": "2020-01-29T12:11:34Z", "pr_url": "https://github.com/oracle/helidon/pull/1329", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQyNTIwNw==", "url": "https://github.com/oracle/helidon/pull/1329#discussion_r372425207", "bodyText": "you catch the NumberFormatException above, not here. Is there a reason not to be consistent?", "author": "tomas-langer", "createdAt": "2020-01-29T14:48:03Z", "path": "examples/dbclient/common/src/main/java/io/helidon/examples/dbclient/common/AbstractPokemonService.java", "diffHunk": "@@ -124,74 +120,116 @@ private void insertPokemonSimple(ServerRequest request, ServerResponse response)\n      * @param request  server request\n      * @param response server response\n      */\n-    private void getPokemon(ServerRequest request, ServerResponse response) {\n+    private void getPokemonByName(ServerRequest request, ServerResponse response) {\n         String pokemonName = request.path().param(\"name\");\n-\n-        dbClient.execute(exec -> exec.namedGet(\"select-one\", pokemonName))\n+        dbClient.execute(exec -> exec.namedGet(\"select-pokemon-by-name\", pokemonName))\n                 .onEmpty(() -> sendNotFound(response, \"Pokemon \" + pokemonName + \" not found\"))\n                 .onValue(row -> sendRow(row, response))\n                 .exceptionally(throwable -> sendError(throwable, response));\n     }\n \n     /**\n-     * Return JsonArray with all stored pokemons or pokemons with matching attributes.\n+     * Insert new pokemon with specified name.\n      *\n      * @param request  the server request\n      * @param response the server response\n      */\n-    private void listPokemons(ServerRequest request, ServerResponse response) {\n-        dbClient.execute(exec -> exec.namedQuery(\"select-all\"))\n-                .thenAccept(response::send)\n+    private void insertPokemon(ServerRequest request, ServerResponse response, Pokemon pokemon) {\n+        dbClient.execute(exec -> exec\n+                .createNamedInsert(\"insert-pokemon\")\n+                .indexedParam(pokemon)\n+                .execute())\n+                .thenAccept(count -> response.send(\"Inserted: \" + count + \" values\"))\n                 .exceptionally(throwable -> sendError(throwable, response));\n     }\n \n+    /**\n+     * Insert new pokemon type to pokemon with specified id.\n+     *\n+     * @param request  the server request\n+     * @param response the server response\n+     */\n+    private void insertPokemonType(ServerRequest request, ServerResponse response) {\n+        try {\n+            int pokemonId = Integer.parseInt(request.path().param(\"pokemonId\"));\n+            int typeId = Integer.parseInt(request.path().param(\"typeId\"));\n+            dbClient.execute(exec -> exec\n+                    .namedInsert(\"insert-poketype\", pokemonId, typeId))\n+                    .thenAccept(count -> response.send(\"Inserted: \" + count + \" values\"))\n+                    .exceptionally(throwable -> sendError(throwable, response));\n+        } catch (NumberFormatException ex) {\n+            sendError(ex, response);\n+        }\n+    }\n+\n     /**\n      * Update a pokemon.\n      * Uses a transaction.\n      *\n      * @param request  the server request\n      * @param response the server response\n      */\n-    private void updatePokemonType(ServerRequest request, ServerResponse response) {\n+    private void updatePokemonName(ServerRequest request, ServerResponse response) {\n+        int id = Integer.parseInt(request.path().param(\"id\"));", "originalCommit": "f064fc9ee8c99e21d0a74525631cc8f21e1a2bd8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQzMTcyNA==", "url": "https://github.com/oracle/helidon/pull/1329#discussion_r372431724", "bodyText": "Wrong javadoc, or wrong method name", "author": "tomas-langer", "createdAt": "2020-01-29T14:57:58Z", "path": "examples/dbclient/jdbc/src/main/java/io/helidon/examples/dbclient/jdbc/PokemonService.java", "diffHunk": "@@ -32,35 +31,98 @@\n \n     PokemonService(DbClient dbClient) {\n         super(dbClient);\n-\n-        // dirty hack to prepare database for our POC\n-        // MySQL init\n-        dbClient.execute(handle -> handle.namedDml(\"create-table\"))\n-                .thenAccept(System.out::println)\n-                .exceptionally(throwable -> {\n-                    LOGGER.log(Level.WARNING, \"Failed to create table, maybe it already exists?\", throwable);\n-                    return null;\n-                });\n     }\n \n     /**\n-     * Delete all pokemons.\n+     * Delete pokemon with specified id (key).", "originalCommit": "f064fc9ee8c99e21d0a74525631cc8f21e1a2bd8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQzMTk4Mg==", "url": "https://github.com/oracle/helidon/pull/1329#discussion_r372431982", "bodyText": "Do not add such methods, if not supported.", "author": "tomas-langer", "createdAt": "2020-01-29T14:58:23Z", "path": "examples/dbclient/jdbc/src/main/java/io/helidon/examples/dbclient/jdbc/PokemonService.java", "diffHunk": "@@ -32,35 +31,98 @@\n \n     PokemonService(DbClient dbClient) {\n         super(dbClient);\n-\n-        // dirty hack to prepare database for our POC\n-        // MySQL init\n-        dbClient.execute(handle -> handle.namedDml(\"create-table\"))\n-                .thenAccept(System.out::println)\n-                .exceptionally(throwable -> {\n-                    LOGGER.log(Level.WARNING, \"Failed to create table, maybe it already exists?\", throwable);\n-                    return null;\n-                });\n     }\n \n     /**\n-     * Delete all pokemons.\n+     * Delete pokemon with specified id (key).\n      *\n      * @param request  the server request\n      * @param response the server response\n      */\n     @Override\n     protected void deleteAllPokemons(ServerRequest request, ServerResponse response) {\n-        dbClient().execute(exec -> exec\n-                // this is to show how ad-hoc statements can be executed (and their naming in Tracing and Metrics)\n-                .createDelete(\"DELETE FROM pokemons\")\n-                .execute())\n-                .thenAccept(count -> response.send(\"Deleted: \" + count + \" values\"))\n+        // Response message contains information about deleted records from both tables\n+        StringBuilder sb = new StringBuilder();\n+        // Pokemon must be removed from both PokemonTypes and Pokemons tables in transaction\n+        dbClient().inTransaction(tx -> tx\n+                // Execute delete from PokemonTypes table\n+                .createDelete(\"DELETE FROM PokemonTypes\")\n+                .execute()\n+                .thenCompose(typesCount -> {\n+                    sb.append(\"Deleted \").append(typesCount).append(\" types\");\n+                    // Execute delete from Pokemons table\n+                    return tx.createDelete(\"DELETE FROM Pokemons\")\n+                            .execute();\n+                }))\n+                // Process response when transaction is completed\n+                .thenAccept(pokemonsCount -> { \n+                    sb.append(\" and \").append(pokemonsCount).append(\" pokemons\");\n+                    response.send(sb.toString());\n+                })\n                 .exceptionally(throwable -> sendError(throwable, response));\n+     }\n+\n+    @Override\n+    protected void listPokemonsWithTypes(ServerRequest request, ServerResponse response) {", "originalCommit": "f064fc9ee8c99e21d0a74525631cc8f21e1a2bd8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQzMjExMw==", "url": "https://github.com/oracle/helidon/pull/1329#discussion_r372432113", "bodyText": "Remove from code", "author": "tomas-langer", "createdAt": "2020-01-29T14:58:34Z", "path": "examples/dbclient/jdbc/src/main/java/io/helidon/examples/dbclient/jdbc/PokemonService.java", "diffHunk": "@@ -32,35 +31,98 @@\n \n     PokemonService(DbClient dbClient) {\n         super(dbClient);\n-\n-        // dirty hack to prepare database for our POC\n-        // MySQL init\n-        dbClient.execute(handle -> handle.namedDml(\"create-table\"))\n-                .thenAccept(System.out::println)\n-                .exceptionally(throwable -> {\n-                    LOGGER.log(Level.WARNING, \"Failed to create table, maybe it already exists?\", throwable);\n-                    return null;\n-                });\n     }\n \n     /**\n-     * Delete all pokemons.\n+     * Delete pokemon with specified id (key).\n      *\n      * @param request  the server request\n      * @param response the server response\n      */\n     @Override\n     protected void deleteAllPokemons(ServerRequest request, ServerResponse response) {\n-        dbClient().execute(exec -> exec\n-                // this is to show how ad-hoc statements can be executed (and their naming in Tracing and Metrics)\n-                .createDelete(\"DELETE FROM pokemons\")\n-                .execute())\n-                .thenAccept(count -> response.send(\"Deleted: \" + count + \" values\"))\n+        // Response message contains information about deleted records from both tables\n+        StringBuilder sb = new StringBuilder();\n+        // Pokemon must be removed from both PokemonTypes and Pokemons tables in transaction\n+        dbClient().inTransaction(tx -> tx\n+                // Execute delete from PokemonTypes table\n+                .createDelete(\"DELETE FROM PokemonTypes\")\n+                .execute()\n+                .thenCompose(typesCount -> {\n+                    sb.append(\"Deleted \").append(typesCount).append(\" types\");\n+                    // Execute delete from Pokemons table\n+                    return tx.createDelete(\"DELETE FROM Pokemons\")\n+                            .execute();\n+                }))\n+                // Process response when transaction is completed\n+                .thenAccept(pokemonsCount -> { \n+                    sb.append(\" and \").append(pokemonsCount).append(\" pokemons\");\n+                    response.send(sb.toString());\n+                })\n                 .exceptionally(throwable -> sendError(throwable, response));\n+     }\n+\n+    @Override\n+    protected void listPokemonsWithTypes(ServerRequest request, ServerResponse response) {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n     }\n \n+/*", "originalCommit": "f064fc9ee8c99e21d0a74525631cc8f21e1a2bd8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQzMjI5MQ==", "url": "https://github.com/oracle/helidon/pull/1329#discussion_r372432291", "bodyText": "Remove", "author": "tomas-langer", "createdAt": "2020-01-29T14:58:51Z", "path": "examples/dbclient/mongodb/src/main/java/io/helidon/examples/dbclient/mongo/PokemonService.java", "diffHunk": "@@ -56,4 +47,10 @@ protected void deleteAllPokemons(ServerRequest request, ServerResponse response)\n                 .thenAccept(count -> response.send(\"Deleted: \" + count + \" values\"))\n                 .exceptionally(throwable -> sendError(throwable, response));\n     }\n+\n+    @Override", "originalCommit": "f064fc9ee8c99e21d0a74525631cc8f21e1a2bd8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "278e584b2190c8d4aa93ea453886bcba518bb74a", "url": "https://github.com/oracle/helidon/commit/278e584b2190c8d4aa93ea453886bcba518bb74a", "message": "Fixed JDBC ResultSet column names metadata processing.\n\nSigned-off-by: Tomas Kraus <Tomas.Kraus@oracle.com>", "committedDate": "2020-01-30T16:30:00Z", "type": "commit"}, {"oid": "eced7de3966e63c464112df877d82705cf2786d6", "url": "https://github.com/oracle/helidon/commit/eced7de3966e63c464112df877d82705cf2786d6", "message": "Added pokemon sample.\n - JDBC module is finished\n - MongoDB needs DB model update\n\nSigned-off-by: Tomas Kraus <Tomas.Kraus@oracle.com>", "committedDate": "2020-01-30T16:31:05Z", "type": "commit"}, {"oid": "5d83f49a433cd8702528f67bfc05e088fb7095b4", "url": "https://github.com/oracle/helidon/commit/5d83f49a433cd8702528f67bfc05e088fb7095b4", "message": "Added mongoDB support to pokemons demo example.\n\nSigned-off-by: Tomas Kraus <Tomas.Kraus@oracle.com>", "committedDate": "2020-01-31T13:42:38Z", "type": "commit"}, {"oid": "8e41ce71c1935e5c1541e6986796808f63b8d831", "url": "https://github.com/oracle/helidon/commit/8e41ce71c1935e5c1541e6986796808f63b8d831", "message": "Checkstyle fixes.\n\nSigned-off-by: Tomas Kraus <Tomas.Kraus@oracle.com>", "committedDate": "2020-01-31T13:51:22Z", "type": "commit"}, {"oid": "f9ff07eab8897de5adef16cac34ae0e0eb730de4", "url": "https://github.com/oracle/helidon/commit/f9ff07eab8897de5adef16cac34ae0e0eb730de4", "message": "Exception handling should be tha same.\n\nSigned-off-by: Tomas Kraus <Tomas.Kraus@oracle.com>", "committedDate": "2020-01-31T13:56:11Z", "type": "commit"}, {"oid": "21145d58a89e653c0d348995bb7fb393b57a832a", "url": "https://github.com/oracle/helidon/commit/21145d58a89e653c0d348995bb7fb393b57a832a", "message": "Final code cleanup.\n\nSigned-off-by: Tomas Kraus <Tomas.Kraus@oracle.com>", "committedDate": "2020-01-31T14:12:56Z", "type": "commit"}, {"oid": "dbaae20d35eb30da00c7da88cfec42673497a7f0", "url": "https://github.com/oracle/helidon/commit/dbaae20d35eb30da00c7da88cfec42673497a7f0", "message": "README update\n\nSigned-off-by: Tomas Kraus <Tomas.Kraus@oracle.com>", "committedDate": "2020-01-31T14:16:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ5NzY1Nw==", "url": "https://github.com/oracle/helidon/pull/1329#discussion_r373497657", "bodyText": "Why is this protected? Either make the methods public, or package local.", "author": "tomas-langer", "createdAt": "2020-01-31T14:11:43Z", "path": "examples/dbclient/pokemons/src/main/java/io/helidon/examples/dbclient/pokemons/jdbc/InitializeDb.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.examples.dbclient.pokemons.jdbc;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutionException;\n+\n+import io.helidon.dbclient.DbClient;\n+import io.helidon.dbclient.DbExecute;\n+\n+/**\n+ * Initialize JDBC database schema and populate it with sample data.\n+ */\n+public class InitializeDb {\n+\n+    /** Pokemon types source file. */\n+    private static final String TYPES = \"/Types.json\";\n+    /** Pokemons source file. */\n+    private static final String POKEMONS = \"/Pokemons.json\";\n+\n+    /**\n+     * Initialize JDBC database schema and populate it with sample data.\n+     * @param dbClient database client\n+     */\n+    static void init(DbClient dbClient) {\n+        try {\n+            if (!PokemonMain.mongo) {\n+                initSchema(dbClient);\n+            }\n+            initData(dbClient);\n+        } catch (ExecutionException | InterruptedException ex) {\n+            System.out.printf(\"Could not initialize database: %s\", ex.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Initializes database schema (tables).\n+     *\n+     * @param dbClient database client\n+     */\n+    protected static void initSchema(DbClient dbClient) {", "originalCommit": "f9ff07eab8897de5adef16cac34ae0e0eb730de4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUwOTg1OQ==", "url": "https://github.com/oracle/helidon/pull/1329#discussion_r373509859", "bodyText": "It's from the time when part of thew code was in common. Everything except init shall be private.", "author": "Tomas-Kraus", "createdAt": "2020-01-31T14:35:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ5NzY1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ5OTQwMw==", "url": "https://github.com/oracle/helidon/pull/1329#discussion_r373499403", "bodyText": "We use flat package structure everywhere. Do not create subpackages.", "author": "tomas-langer", "createdAt": "2020-01-31T14:15:15Z", "path": "examples/dbclient/pokemons/src/main/java/io/helidon/examples/dbclient/pokemons/jdbc/mapper/Pokemon.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.examples.dbclient.pokemons.jdbc.mapper;", "originalCommit": "f9ff07eab8897de5adef16cac34ae0e0eb730de4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUxMDQ0Mw==", "url": "https://github.com/oracle/helidon/pull/1329#discussion_r373510443", "bodyText": "ook", "author": "Tomas-Kraus", "createdAt": "2020-01-31T14:36:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ5OTQwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ5OTgzMA==", "url": "https://github.com/oracle/helidon/pull/1329#discussion_r373499830", "bodyText": "you are missing the provides section for the java service implementation in this module", "author": "tomas-langer", "createdAt": "2020-01-31T14:16:05Z", "path": "examples/dbclient/pokemons/src/main/java/module-info.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/**\n+ * JDBC example.\n+ */\n+module io.helidon.examples.dbclient.pokemons.jdbc {\n+    requires java.logging;", "originalCommit": "f9ff07eab8897de5adef16cac34ae0e0eb730de4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUxMTQ1Mw==", "url": "https://github.com/oracle/helidon/pull/1329#discussion_r373511453", "bodyText": "added", "author": "Tomas-Kraus", "createdAt": "2020-01-31T14:38:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ5OTgzMA=="}], "type": "inlineReview"}, {"oid": "0647d0cbca5574c92d5eeb18db7c46e80ad3e534", "url": "https://github.com/oracle/helidon/commit/0647d0cbca5574c92d5eeb18db7c46e80ad3e534", "message": "Readme fix.\n\nSigned-off-by: Tomas Kraus <Tomas.Kraus@oracle.com>", "committedDate": "2020-01-31T14:20:53Z", "type": "commit"}, {"oid": "4aa12aa7a183dbb8226bef4c40161e032720d181", "url": "https://github.com/oracle/helidon/commit/4aa12aa7a183dbb8226bef4c40161e032720d181", "message": "Review notes applied.\n\nSigned-off-by: Tomas Kraus <Tomas.Kraus@oracle.com>", "committedDate": "2020-01-31T14:44:59Z", "type": "commit"}, {"oid": "577ecc2cc0834c8e7eb7d448d6272cb3b82c4051", "url": "https://github.com/oracle/helidon/commit/577ecc2cc0834c8e7eb7d448d6272cb3b82c4051", "message": "Fixed checkstyle issues.\n\nSigned-off-by: Tomas Kraus <Tomas.Kraus@oracle.com>", "committedDate": "2020-01-31T18:11:34Z", "type": "commit"}]}