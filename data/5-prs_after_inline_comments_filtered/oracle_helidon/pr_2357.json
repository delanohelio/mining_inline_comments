{"pr_number": 2357, "pr_title": "Disable automatic propagation from security providers", "pr_createdAt": "2020-09-14T16:25:51Z", "pr_url": "https://github.com/oracle/helidon/pull/2357", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk4OTQ3OA==", "url": "https://github.com/oracle/helidon/pull/2357#discussion_r490989478", "bodyText": "@param c configuration (is that 'c' correct here?)", "author": "ljamen", "createdAt": "2020-09-18T14:29:26Z", "path": "security/providers/common/src/main/java/io/helidon/security/providers/common/OutboundTarget.java", "diffHunk": "@@ -101,7 +101,13 @@ private OutboundTarget(Builder builder) {\n         }\n     }\n \n-    static OutboundTarget create(Config c) {\n+    /**\n+     * Create a target from configuration.\n+     *\n+     * @param c configuration on the node of a single outbound target", "originalCommit": "56f4d8cdfe4e6e1163126f1746b3ca0680509900", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY0NjEyMQ==", "url": "https://github.com/oracle/helidon/pull/2357#discussion_r493646121", "bodyText": "Renamed to config, as c does not look good here", "author": "tomas-langer", "createdAt": "2020-09-23T14:37:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk4OTQ3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY0NjM3Mw==", "url": "https://github.com/oracle/helidon/pull/2357#discussion_r493646373", "bodyText": "Nevertheless for Javadoc it must be the same as is the parameter name of the method", "author": "tomas-langer", "createdAt": "2020-09-23T14:37:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk4OTQ3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU5NjYxMg==", "url": "https://github.com/oracle/helidon/pull/2357#discussion_r494596612", "bodyText": "Does the comment still apply? identity propagation is disabled by default", "author": "danielkec", "createdAt": "2020-09-24T20:38:35Z", "path": "security/providers/oidc/src/main/java/io/helidon/security/providers/oidc/OidcProvider.java", "diffHunk": "@@ -566,7 +571,7 @@ private Principal buildPrincipal(Jwt jwt) {\n         private OidcConfig oidcConfig;\n         // identity propagation is disabled by default. In general we should not reuse the same token\n         // for outbound calls, unless it is the same audience\n-        private boolean propagate;\n+        private Boolean propagate;", "originalCommit": "154c8ac0c8a190f8bfc8892ae5dba7774cc6adc2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY2MDA5Ng==", "url": "https://github.com/oracle/helidon/pull/2357#discussion_r494660096", "bodyText": "Yes it still applies, though now it has three states (enabled/disabled/not-configured, meaning it is based on outbound targets)", "author": "tomas-langer", "createdAt": "2020-09-24T23:13:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU5NjYxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYwNTMxNA==", "url": "https://github.com/oracle/helidon/pull/2357#discussion_r494605314", "bodyText": "This could also work\nOptional<BasicPrivateCredentials> creds = secContext.user()\n                    .flatMap(this::credentialsFromSubject)\n                    .or(secContext::service)\n                    .flatMap(this::credentialsFromSubject);", "author": "danielkec", "createdAt": "2020-09-24T20:55:46Z", "path": "security/providers/http-auth/src/main/java/io/helidon/security/providers/httpauth/HttpBasicAuthProvider.java", "diffHunk": "@@ -116,54 +128,67 @@ public boolean isOutboundSupported(ProviderRequest providerRequest,\n             return true;\n         }\n \n-        SecurityContext secContext = providerRequest.securityContext();\n-\n-        boolean userSupported = secContext.user()\n-                .flatMap(user -> user.privateCredential(BasicPrivateCredentials.class))\n-                .isPresent();\n-\n-        boolean serviceSupported = secContext.service()\n-                .map(user -> user.privateCredential(BasicPrivateCredentials.class))\n-                .isPresent();\n-\n-        return userSupported || serviceSupported;\n+        return outboundTargetsExist;\n     }\n \n     @Override\n     protected OutboundSecurityResponse syncOutbound(ProviderRequest providerRequest,\n                                                     SecurityEnvironment outboundEnv,\n                                                     EndpointConfig outboundEp) {\n \n-        // first resolve user to use\n+        // explicit username in request properties\n         Optional<Object> maybeUsername = outboundEp.abacAttribute(EP_PROPERTY_OUTBOUND_USER);\n         if (maybeUsername.isPresent()) {\n             String username = maybeUsername.get().toString();\n             char[] password = passwordFromEndpoint(outboundEp);\n \n-            return toBasicAuthOutbound(username, password);\n+            return toBasicAuthOutbound(outboundEnv,\n+                                       HttpBasicOutboundConfig.DEFAULT_TOKEN_HANDLER,\n+                                       username,\n+                                       password);\n         }\n \n-        // and if not present, use the one from request\n-        SecurityContext secContext = providerRequest.securityContext();\n-\n-        // first try user\n-        Optional<BasicPrivateCredentials> creds = secContext.user()\n-                .flatMap(this::credentialsFromSubject);\n+        var target = outboundConfig.findTargetCustomObject(outboundEnv,\n+                                                           HttpBasicOutboundConfig.class,\n+                                                           HttpBasicOutboundConfig::create,\n+                                                           HttpBasicOutboundConfig::create);\n \n-        if (!creds.isPresent()) {\n-            // if not present, try service\n-            creds = secContext.service()\n-                    .flatMap(this::credentialsFromSubject);\n+        if (target.isEmpty()) {\n+            return OutboundSecurityResponse.abstain();\n         }\n \n-        Optional<char[]> overridePassword = outboundEp.abacAttribute(EP_PROPERTY_OUTBOUND_PASSWORD)\n-                .map(String::valueOf)\n-                .map(String::toCharArray);\n+        HttpBasicOutboundConfig outboundConfig = target.get();\n+\n+        if (outboundConfig.hasExplicitUser()) {\n+            // use configured user\n+            return toBasicAuthOutbound(outboundEnv,\n+                                       outboundConfig.tokenHandler(),\n+                                       outboundConfig.explicitUser(),\n+                                       outboundConfig.explicitPassword());\n+        } else {\n+            // propagate current user (if possible)\n+            SecurityContext secContext = providerRequest.securityContext();\n+            // first try user\n+            Optional<BasicPrivateCredentials> creds = secContext.user()\n+                    .flatMap(this::credentialsFromSubject);\n+            if (creds.isEmpty()) {\n+                // if not present, try service\n+                creds = secContext.service()\n+                        .flatMap(this::credentialsFromSubject);\n+            }", "originalCommit": "154c8ac0c8a190f8bfc8892ae5dba7774cc6adc2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY2MDI5MQ==", "url": "https://github.com/oracle/helidon/pull/2357#discussion_r494660291", "bodyText": "Yes, but this is as it was and I do not want to make further changes unless it is an actual problem.", "author": "tomas-langer", "createdAt": "2020-09-24T23:14:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYwNTMxNA=="}], "type": "inlineReview"}, {"oid": "f9f8c1986caddbb4083d89b9cb855c74e810fd88", "url": "https://github.com/oracle/helidon/commit/f9f8c1986caddbb4083d89b9cb855c74e810fd88", "message": "Squashable-1\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-09-25T17:48:40Z", "type": "commit"}, {"oid": "fc4a8fff878a7df4a0d79f4019111d73b0472675", "url": "https://github.com/oracle/helidon/commit/fc4a8fff878a7df4a0d79f4019111d73b0472675", "message": "Security providers no long automatically propagate.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-09-25T17:48:40Z", "type": "commit"}, {"oid": "dfdfe7deca38f4e5d6da4e623681017664cf6a4b", "url": "https://github.com/oracle/helidon/commit/dfdfe7deca38f4e5d6da4e623681017664cf6a4b", "message": "Fixed tests and examples.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-09-25T17:48:40Z", "type": "commit"}, {"oid": "8e52e920f59a38f4c01d182f16332543ce6858bc", "url": "https://github.com/oracle/helidon/commit/8e52e920f59a38f4c01d182f16332543ce6858bc", "message": "Review fix.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-09-25T17:48:40Z", "type": "commit"}, {"oid": "3bff318c9e20e4eaeaa9322f37abad9c5c751be5", "url": "https://github.com/oracle/helidon/commit/3bff318c9e20e4eaeaa9322f37abad9c5c751be5", "message": "Fixed documentation review issues.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-09-25T17:48:40Z", "type": "commit"}, {"oid": "99fe7fe387f75937e110d7ec23ec2e8a2a0cfd4f", "url": "https://github.com/oracle/helidon/commit/99fe7fe387f75937e110d7ec23ec2e8a2a0cfd4f", "message": "Review fixes.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-09-25T17:48:40Z", "type": "commit"}, {"oid": "4bf4ac9f6eeda81b355582d3c598941b12a9e3a8", "url": "https://github.com/oracle/helidon/commit/4bf4ac9f6eeda81b355582d3c598941b12a9e3a8", "message": "Moved security to shared from common to align with other docs.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-09-25T17:48:40Z", "type": "commit"}, {"oid": "4bf4ac9f6eeda81b355582d3c598941b12a9e3a8", "url": "https://github.com/oracle/helidon/commit/4bf4ac9f6eeda81b355582d3c598941b12a9e3a8", "message": "Moved security to shared from common to align with other docs.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-09-25T17:48:40Z", "type": "forcePushed"}]}