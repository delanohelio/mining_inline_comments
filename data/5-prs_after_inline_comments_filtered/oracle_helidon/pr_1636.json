{"pr_number": 1636, "pr_title": "SE Reactive Messaging", "pr_createdAt": "2020-04-12T20:07:27Z", "pr_url": "https://github.com/oracle/helidon/pull/1636", "timeline": [{"oid": "170357ca6ce2da88dae384a2ebcdd1e45c6fbe58", "url": "https://github.com/oracle/helidon/commit/170357ca6ce2da88dae384a2ebcdd1e45c6fbe58", "message": "Type safe api", "committedDate": "2020-04-29T14:25:21Z", "type": "forcePushed"}, {"oid": "75ec47dfd36bee1f5b28a867462897018e144168", "url": "https://github.com/oracle/helidon/commit/75ec47dfd36bee1f5b28a867462897018e144168", "message": "New config rebase\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-05-10T21:04:56Z", "type": "forcePushed"}, {"oid": "678a39b808ff93914de1e0cb4f364baea68f660a", "url": "https://github.com/oracle/helidon/commit/678a39b808ff93914de1e0cb4f364baea68f660a", "message": "Rebase on Kafka tests fix\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-05-25T10:50:53Z", "type": "forcePushed"}, {"oid": "d9edfad1b31b14cfef2c82035eeb4aa2a6ccbccb", "url": "https://github.com/oracle/helidon/commit/d9edfad1b31b14cfef2c82035eeb4aa2a6ccbccb", "message": "SE Reactive Messaging", "committedDate": "2020-05-25T12:08:21Z", "type": "commit"}, {"oid": "eedb06a2ad94bd735208d07d5cdef32617449460", "url": "https://github.com/oracle/helidon/commit/eedb06a2ad94bd735208d07d5cdef32617449460", "message": "Connector config builder", "committedDate": "2020-05-25T12:08:21Z", "type": "commit"}, {"oid": "f91e99486b761f45e3e573c67d2e4e1256167dee", "url": "https://github.com/oracle/helidon/commit/f91e99486b761f45e3e573c67d2e4e1256167dee", "message": "SE Messaging with Kafka\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-05-25T12:08:21Z", "type": "commit"}, {"oid": "66d0c04a36177778e4c99d9fdbbdb2bf14b6afd2", "url": "https://github.com/oracle/helidon/commit/66d0c04a36177778e4c99d9fdbbdb2bf14b6afd2", "message": "Extend Kafka SE Messaging test\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-05-25T12:08:21Z", "type": "commit"}, {"oid": "f39fe4efc3a83a135626dd3481e61bcfd7a9c932", "url": "https://github.com/oracle/helidon/commit/f39fe4efc3a83a135626dd3481e61bcfd7a9c932", "message": "Rebase on Kafka tests fix\n\nRemove internal-test bundle\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-05-25T12:08:22Z", "type": "commit"}, {"oid": "f39fe4efc3a83a135626dd3481e61bcfd7a9c932", "url": "https://github.com/oracle/helidon/commit/f39fe4efc3a83a135626dd3481e61bcfd7a9c932", "message": "Rebase on Kafka tests fix\n\nRemove internal-test bundle\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-05-25T12:08:22Z", "type": "forcePushed"}, {"oid": "26e55aa78306649daeb4cee79403af6cd086975b", "url": "https://github.com/oracle/helidon/commit/26e55aa78306649daeb4cee79403af6cd086975b", "message": "Multiple topics support in the KafkaConfigBuilder\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-05-25T15:49:47Z", "type": "commit"}, {"oid": "60641da03cb940e443ddb8afdda593db803915a3", "url": "https://github.com/oracle/helidon/commit/60641da03cb940e443ddb8afdda593db803915a3", "message": "Kafka SE test fix\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-05-25T22:16:50Z", "type": "commit"}, {"oid": "ab698c99c1cbd4d7cfd4ccf56ec6fd3f8a61592c", "url": "https://github.com/oracle/helidon/commit/ab698c99c1cbd4d7cfd4ccf56ec6fd3f8a61592c", "message": "Temporarily disable flaky test\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-05-26T06:38:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3ODU5Mw==", "url": "https://github.com/oracle/helidon/pull/1636#discussion_r430678593", "bodyText": "Rename to property.", "author": "tomas-langer", "createdAt": "2020-05-26T20:09:09Z", "path": "messaging/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaConfigBuilder.java", "diffHunk": "@@ -0,0 +1,345 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.connectors.kafka;\n+\n+import io.helidon.messaging.ConnectorConfigBuilder;\n+\n+import org.apache.kafka.common.serialization.Deserializer;\n+import org.apache.kafka.common.serialization.Serializer;\n+import org.eclipse.microprofile.reactive.messaging.spi.ConnectorFactory;\n+\n+/**\n+ * Build Kafka specific config.\n+ */\n+public final class KafkaConfigBuilder extends ConnectorConfigBuilder {\n+\n+    KafkaConfigBuilder() {\n+        super();\n+        super.put(ConnectorFactory.CONNECTOR_ATTRIBUTE, KafkaConnector.CONNECTOR_NAME);\n+    }\n+\n+    /**\n+     * Add custom property.\n+     *\n+     * @param key   property key\n+     * @param value property value\n+     * @return this builder\n+     */\n+    public KafkaConfigBuilder put(String key, String value) {", "originalCommit": "ab698c99c1cbd4d7cfd4ccf56ec6fd3f8a61592c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMxNjQ0NA==", "url": "https://github.com/oracle/helidon/pull/1636#discussion_r431316444", "bodyText": "fixed", "author": "danielkec", "createdAt": "2020-05-27T17:27:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3ODU5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3OTc1NQ==", "url": "https://github.com/oracle/helidon/pull/1636#discussion_r430679755", "bodyText": "rename to property", "author": "tomas-langer", "createdAt": "2020-05-26T20:11:23Z", "path": "messaging/messaging/src/main/java/io/helidon/messaging/ConnectorConfigBuilder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.messaging;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import io.helidon.common.Builder;\n+import io.helidon.config.Config;\n+import io.helidon.config.ConfigSources;\n+\n+/**\n+ * Detached configuration of a single connector.\n+ */\n+public abstract class ConnectorConfigBuilder implements Builder<Config> {\n+    private final Map<String, String> configuration = new HashMap<>();\n+\n+    protected ConnectorConfigBuilder() {\n+    }\n+\n+    static ConnectorConfigBuilder create(Config config) {\n+        ConnectorConfigBuilder result = new ConnectorConfigBuilder(){};\n+        result.putAll(config);\n+        return result;\n+    }\n+\n+    protected ConnectorConfigBuilder put(String key, String value) {", "originalCommit": "ab698c99c1cbd4d7cfd4ccf56ec6fd3f8a61592c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMxNjUyNQ==", "url": "https://github.com/oracle/helidon/pull/1636#discussion_r431316525", "bodyText": "fixed", "author": "danielkec", "createdAt": "2020-05-27T17:27:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3OTc1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3OTg1Mw==", "url": "https://github.com/oracle/helidon/pull/1636#discussion_r430679853", "bodyText": "rename to config", "author": "tomas-langer", "createdAt": "2020-05-26T20:11:35Z", "path": "messaging/messaging/src/main/java/io/helidon/messaging/ConnectorConfigBuilder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.messaging;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import io.helidon.common.Builder;\n+import io.helidon.config.Config;\n+import io.helidon.config.ConfigSources;\n+\n+/**\n+ * Detached configuration of a single connector.\n+ */\n+public abstract class ConnectorConfigBuilder implements Builder<Config> {\n+    private final Map<String, String> configuration = new HashMap<>();\n+\n+    protected ConnectorConfigBuilder() {\n+    }\n+\n+    static ConnectorConfigBuilder create(Config config) {\n+        ConnectorConfigBuilder result = new ConnectorConfigBuilder(){};\n+        result.putAll(config);\n+        return result;\n+    }\n+\n+    protected ConnectorConfigBuilder put(String key, String value) {\n+        configuration.put(key, value);\n+        return this;\n+    }\n+\n+    ConnectorConfigBuilder putAll(Config configToPut) {", "originalCommit": "ab698c99c1cbd4d7cfd4ccf56ec6fd3f8a61592c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMxNjYxMA==", "url": "https://github.com/oracle/helidon/pull/1636#discussion_r431316610", "bodyText": "fixed", "author": "danielkec", "createdAt": "2020-05-27T17:27:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3OTg1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4MzcxMQ==", "url": "https://github.com/oracle/helidon/pull/1636#discussion_r430683711", "bodyText": "Create a thread pool only if at least one emitter is configured.\nGet it before the forEach pool and store the executor service instance.\nClose it when closing meessaging.", "author": "tomas-langer", "createdAt": "2020-05-26T20:18:53Z", "path": "messaging/messaging/src/main/java/io/helidon/messaging/MessagingImpl.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.messaging;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Flow;\n+\n+import io.helidon.common.configurable.ThreadPoolSupplier;\n+import io.helidon.common.reactive.Multi;\n+import io.helidon.config.Config;\n+import io.helidon.config.ConfigSources;\n+import io.helidon.config.ConfigValue;\n+\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+import org.eclipse.microprofile.reactive.messaging.spi.ConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.IncomingConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.OutgoingConnectorFactory;\n+\n+class MessagingImpl implements Messaging {\n+\n+    private final Set<Emitter<?>> emitters = new HashSet<>();\n+    private final Map<String, Channel<?>> channelMap = new HashMap<>();\n+    private final Map<String, IncomingConnectorFactory> incomingConnectors = new HashMap<>();\n+    private final Map<String, OutgoingConnectorFactory> outgoingConnectors = new HashMap<>();\n+    private Config config;\n+    private MessagingImpl.State state = MessagingImpl.State.INIT;\n+    private ThreadPoolSupplier threadPoolSupplier;\n+\n+    MessagingImpl() {\n+    }\n+\n+    public void start() {\n+        state.start(this);\n+        threadPoolSupplier = ThreadPoolSupplier.builder()", "originalCommit": "ab698c99c1cbd4d7cfd4ccf56ec6fd3f8a61592c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4NDA4NQ==", "url": "https://github.com/oracle/helidon/pull/1636#discussion_r430684085", "bodyText": "use an identifier of messaging for\n\nthread name prefix\nhelidon context", "author": "tomas-langer", "createdAt": "2020-05-26T20:19:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4MzcxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4NTM1MQ==", "url": "https://github.com/oracle/helidon/pull/1636#discussion_r430685351", "bodyText": "Make sure there is:\n\nThere is a \"messaging\" io.helidon.common.Context instance for the messaging instance\nThere is a \"message\" Context for each message flowing through the messaging (the same one from message producer to message consumer(s), with parent configured to 1.", "author": "tomas-langer", "createdAt": "2020-05-26T20:21:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4MzcxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMxNzU5Ng==", "url": "https://github.com/oracle/helidon/pull/1636#discussion_r431317596", "bodyText": "fixed, context is unique for every message see io.helidon.messaging.ContextSubscriber", "author": "danielkec", "createdAt": "2020-05-27T17:28:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4MzcxMQ=="}], "type": "inlineReview"}, {"oid": "44336ed1c956ffb25bddb6d4b55841693bbccd21", "url": "https://github.com/oracle/helidon/commit/44336ed1c956ffb25bddb6d4b55841693bbccd21", "message": "Covariance in SE messaging api\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-05-27T13:46:01Z", "type": "commit"}, {"oid": "cb8bd604baec4bb78eedb412848493ac3805696c", "url": "https://github.com/oracle/helidon/commit/cb8bd604baec4bb78eedb412848493ac3805696c", "message": "Naming convention align\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-05-27T16:03:04Z", "type": "commit"}, {"oid": "7835485f89b035bae85d515a3e25a0608a939fcd", "url": "https://github.com/oracle/helidon/commit/7835485f89b035bae85d515a3e25a0608a939fcd", "message": "Emitter thread pool opt. and message unique context\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-05-27T17:26:18Z", "type": "commit"}]}