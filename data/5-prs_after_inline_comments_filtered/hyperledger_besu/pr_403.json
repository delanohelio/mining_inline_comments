{"pr_number": 403, "pr_title": "Updates made to send notifications for new fork headers when the chai\u2026", "pr_createdAt": "2020-02-14T19:32:50Z", "pr_url": "https://github.com/hyperledger/besu/pull/403", "timeline": [{"oid": "c3d5bfb021824b4ea079b2e4582d6feeb60fbb04", "url": "https://github.com/hyperledger/besu/commit/c3d5bfb021824b4ea079b2e4582d6feeb60fbb04", "message": "Updates made to send notifications for new fork headers when the chain reorgs\n\nSigned-off-by: David Mechler <david.mechler@consensys.net>", "committedDate": "2020-02-14T19:43:18Z", "type": "commit"}, {"oid": "3a66f8934dcea35a72fd730a844fc4e71c44d638", "url": "https://github.com/hyperledger/besu/commit/3a66f8934dcea35a72fd730a844fc4e71c44d638", "message": "Fixed traversing of chain.\n\nSigne-off-by: David Mechler <david.mechler@consensys.net>\nSigned-off-by: David Mechler <david.mechler@consensys.net>", "committedDate": "2020-02-14T19:43:18Z", "type": "commit"}, {"oid": "9be6afd4bd22cba386c28105b0b348a8bb3e8a00", "url": "https://github.com/hyperledger/besu/commit/9be6afd4bd22cba386c28105b0b348a8bb3e8a00", "message": "Merge branch 'master' into PIE-1632", "committedDate": "2020-02-14T20:09:41Z", "type": "commit"}, {"oid": "f5fcbf57d34db262c71c257ec40ea65d0b6b4571", "url": "https://github.com/hyperledger/besu/commit/f5fcbf57d34db262c71c257ec40ea65d0b6b4571", "message": "Merge branch 'master' into PIE-1632", "committedDate": "2020-02-17T16:54:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM0ODAxNQ==", "url": "https://github.com/hyperledger/besu/pull/403#discussion_r380348015", "bodyText": "Whenever possible, use Optional instead of null.", "author": "RatanRSur", "createdAt": "2020-02-17T19:58:30Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/chain/BlockAddedEvent.java", "diffHunk": "@@ -73,7 +83,8 @@ public static BlockAddedEvent createForFork(final Block block) {\n         block,\n         Collections.emptyList(),\n         Collections.emptyList(),\n-        Collections.emptyList());\n+        Collections.emptyList(),\n+        null);", "originalCommit": "f5fcbf57d34db262c71c257ec40ea65d0b6b4571", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM0ODQ1MQ==", "url": "https://github.com/hyperledger/besu/pull/403#discussion_r380348451", "bodyText": "reorgBlock is a bit ambiguous with block above. I suggest renaming the first one to newChainHead and the second to commonAncestorWithOldHead", "author": "RatanRSur", "createdAt": "2020-02-17T20:00:06Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/chain/BlockAddedEvent.java", "diffHunk": "@@ -55,16 +58,23 @@ public static BlockAddedEvent createForHeadAdvancement(\n         block,\n         block.getBody().getTransactions(),\n         Collections.emptyList(),\n-        logsWithMetadata);\n+        logsWithMetadata,\n+        null);\n   }\n \n   public static BlockAddedEvent createForChainReorg(\n       final Block block,\n       final List<Transaction> addedTransactions,\n       final List<Transaction> removedTransactions,\n-      final List<LogWithMetadata> logsWithMetadata) {\n+      final List<LogWithMetadata> logsWithMetadata,\n+      final Block reorgBlock) {", "originalCommit": "f5fcbf57d34db262c71c257ec40ea65d0b6b4571", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM0OTUwNA==", "url": "https://github.com/hyperledger/besu/pull/403#discussion_r380349504", "bodyText": "I think there's actually always a sensible value for commonAncestorWithOldHead, even for non-reorgs. It would be the parent block of the block in the event. Then, the new block subscription could actually just walk between the common ancestor block and the event block, sending notifications as it walks. I think this would remove the need to split the logic in onBlockAdded.\nIf it works, it would also remove the need to use Optional or null", "author": "RatanRSur", "createdAt": "2020-02-17T20:04:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM0ODQ1MQ=="}], "type": "inlineReview"}, {"oid": "39098c26d032cb5a58df955c483e33eec3eaba34", "url": "https://github.com/hyperledger/besu/commit/39098c26d032cb5a58df955c483e33eec3eaba34", "message": "Added test\n\nSigned-off-by: David Mechler <david.mechler@consensys.net>", "committedDate": "2020-02-20T21:27:09Z", "type": "commit"}, {"oid": "ca91f906dd4413483483d83185b3cb49660eadd5", "url": "https://github.com/hyperledger/besu/commit/ca91f906dd4413483483d83185b3cb49660eadd5", "message": "Merge branch 'master' into PIE-1632", "committedDate": "2020-02-20T21:32:52Z", "type": "commit"}, {"oid": "4061482e18f930ab191089e600e79881f8127659", "url": "https://github.com/hyperledger/besu/commit/4061482e18f930ab191089e600e79881f8127659", "message": "Updates made from PR comments regarding aways having a common ancestor node.\n\nSigned-off-by: David Mechler <david.mechler@consensys.net>", "committedDate": "2020-02-21T20:43:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk4NzQ3Mw==", "url": "https://github.com/hyperledger/besu/pull/403#discussion_r382987473", "bodyText": "we need to add the final keyword whenever possible", "author": "matkt", "createdAt": "2020-02-23T09:32:43Z", "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/subscription/blockheaders/NewBlockHeadersSubscriptionServiceTest.java", "diffHunk": "@@ -63,76 +73,116 @@\n   @Captor ArgumentCaptor<JsonRpcResult> responseCaptor;\n \n   @Mock private SubscriptionManager subscriptionManager;\n-  @Mock private BlockchainQueries blockchainQueries;\n \n   private final BlockHeaderTestFixture blockHeaderTestFixture = new BlockHeaderTestFixture();\n   private final TransactionTestFixture txTestFixture = new TransactionTestFixture();\n   private final BlockHeader blockHeader = blockHeaderTestFixture.buildHeader();\n   private final BlockResultFactory blockResultFactory = new BlockResultFactory();\n+  private final BlockDataGenerator gen = new BlockDataGenerator();\n+  private final BlockchainStorage blockchainStorage =\n+      new KeyValueStoragePrefixedKeyBlockchainStorage(\n+          new InMemoryKeyValueStorage(), new MainnetBlockHeaderFunctions());\n+  private final Block genesisBlock = gen.genesisBlock();\n+  private final DefaultBlockchain blockchain =\n+      (DefaultBlockchain)\n+          DefaultBlockchain.createMutable(genesisBlock, blockchainStorage, new NoOpMetricsSystem());\n+\n+  @Spy\n+  private BlockchainQueries blockchainQueriesSpy =\n+      Mockito.spy(new BlockchainQueries(blockchain, createInMemoryWorldStateArchive()));\n \n   @Before\n   public void before() {\n     newBlockHeadersSubscriptionService =\n-        new NewBlockHeadersSubscriptionService(subscriptionManager, blockchainQueries);\n+        new NewBlockHeadersSubscriptionService(subscriptionManager, blockchainQueriesSpy);\n   }\n \n   @Test\n   public void shouldSendMessageWhenBlockAddedOnCanonicalChain() {\n     final NewBlockHeadersSubscription subscription = createSubscription(false);\n     mockSubscriptionManagerNotifyMethod(subscription);\n-    final BlockResult expectedNewBlock = expectedBlockWithTransactions(Collections.emptyList());\n \n-    simulateAddingBlockOnCanonicalChain();\n+    final Block testBlock = appendBlockWithParent(blockchain, blockchain.getChainHeadBlock());\n+    simulateAddingBlockOnCanonicalChain(testBlock);\n+    final BlockResult expectedNewBlock =\n+        blockResultFactory.transactionHash(\n+            blockchainQueriesSpy.blockByHashWithTxHashes(testBlock.getHash()).orElse(null));\n \n     verify(subscriptionManager)\n         .sendMessage(subscriptionIdCaptor.capture(), responseCaptor.capture());\n     assertThat(subscriptionIdCaptor.getValue()).isEqualTo(subscription.getSubscriptionId());\n-    assertThat(responseCaptor.getValue())\n-        .isEqualToComparingFieldByFieldRecursively(expectedNewBlock);\n+    assertThat(responseCaptor.getValue()).usingRecursiveComparison().isEqualTo(expectedNewBlock);\n   }\n \n   @Test\n   public void shouldNotSendMessageWhenBlockAddedIsNotOnCanonicalChain() {\n     simulateAddingBlockOnNonCanonicalChain();\n \n-    verifyZeroInteractions(subscriptionManager);\n+    verifyNoMoreInteractions(subscriptionManager);\n+  }\n+\n+  @Test\n+  public void shouldSendMessagesWhenReorgBlockAdded() {\n+    final NewBlockHeadersSubscription subscription = createSubscription(false);\n+    mockSubscriptionManagerNotifyMethod(subscription);\n+\n+    appendBlockWithParent(blockchain, genesisBlock);\n+    final Block forkBlock = appendBlockWithParent(blockchain, genesisBlock);\n+    final Block forkBlock1 = appendBlockWithParent(blockchain, forkBlock);\n+    final Block forkBlock2 = appendBlockWithParent(blockchain, forkBlock1);\n+    simulateAddingReorgBlock(forkBlock2, genesisBlock);\n+    final BlockResult expectedNewBlock =\n+        blockResultFactory.transactionHash(\n+            blockchainQueriesSpy.blockByHashWithTxHashes(forkBlock2.getHash()).orElse(null));\n+\n+    verify(subscriptionManager, times(3)).notifySubscribersOnWorkerThread(any(), any(), any());\n+    verify(subscriptionManager, times(3))\n+        .sendMessage(subscriptionIdCaptor.capture(), responseCaptor.capture());\n+    assertThat(subscriptionIdCaptor.getValue()).isEqualTo(subscription.getSubscriptionId());\n+    assertThat(responseCaptor.getValue()).usingRecursiveComparison().isEqualTo(expectedNewBlock);\n   }\n \n   @Test\n   public void shouldReturnTxHashesWhenIncludeTransactionsFalse() {\n     final NewBlockHeadersSubscription subscription = createSubscription(false);\n     mockSubscriptionManagerNotifyMethod(subscription);\n-    final List<Hash> txHashList = transactionsWithHashOnly();\n-    final BlockResult expectedNewBlock = expectedBlockWithTransactions(txHashList);\n+    final List<Transaction> transactions = transactions();\n \n-    simulateAddingBlockOnCanonicalChain();\n+    final Block testBlock =\n+        appendBlockWithParent(blockchain, blockchain.getChainHeadBlock(), transactions);\n+    simulateAddingBlockOnCanonicalChain(testBlock);\n+    final BlockResult expectedNewBlock =\n+        blockResultFactory.transactionHash(\n+            blockchainQueriesSpy.blockByHashWithTxHashes(testBlock.getHash()).orElse(null));\n \n     verify(subscriptionManager)\n         .sendMessage(subscriptionIdCaptor.capture(), responseCaptor.capture());\n     assertThat(subscriptionIdCaptor.getValue()).isEqualTo(subscription.getSubscriptionId());\n     final Object actualBlock = responseCaptor.getValue();\n     assertThat(actualBlock).isInstanceOf(BlockResult.class);\n-    assertThat(((BlockResult) actualBlock).getTransactions()).hasSize(txHashList.size());\n-    assertThat(actualBlock).isEqualToComparingFieldByFieldRecursively(expectedNewBlock);\n+    assertThat(((BlockResult) actualBlock).getTransactions()).hasSize(transactions.size());\n+    assertThat(actualBlock).usingRecursiveComparison().isEqualTo(expectedNewBlock);\n \n-    verify(blockchainQueries, times(1)).blockByHashWithTxHashes(any());\n-    verify(blockchainQueries, times(0)).blockByHash(any());\n+    verify(blockchainQueriesSpy, times(2)).blockByHashWithTxHashes(any());\n+    verify(blockchainQueriesSpy, times(0)).blockByHash(any());\n   }\n \n   @Test\n   public void shouldReturnCompleteTxWhenParameterTrue() {\n     final NewBlockHeadersSubscription subscription = createSubscription(true);\n     mockSubscriptionManagerNotifyMethod(subscription);\n-    final List<TransactionWithMetadata> txHashList = transactionsWithMetadata();\n-    final BlockWithMetadata<TransactionWithMetadata, Hash> testBlockWithMetadata =\n-        new BlockWithMetadata<>(\n-            blockHeader, txHashList, Collections.emptyList(), blockHeader.getDifficulty(), 0);\n+    final List<TransactionWithMetadata> transactionsWithMetadata = transactionsWithMetadata();\n+\n+    List<Transaction> transactions =", "originalCommit": "4061482e18f930ab191089e600e79881f8127659", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI3MTUxNw==", "url": "https://github.com/hyperledger/besu/pull/403#discussion_r383271517", "bodyText": "Done.", "author": "davemec", "createdAt": "2020-02-24T13:44:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk4NzQ3Mw=="}], "type": "inlineReview"}, {"oid": "bfdca5b87bbeca1d71a9a9a359f7c4da6bde6c9c", "url": "https://github.com/hyperledger/besu/commit/bfdca5b87bbeca1d71a9a9a359f7c4da6bde6c9c", "message": "Make variable final per PR comment\n\nSigned-off-by: David Mechler <david.mechler@consensys.net>", "committedDate": "2020-02-24T13:42:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyMTYyNw==", "url": "https://github.com/hyperledger/besu/pull/403#discussion_r383421627", "bodyText": "What happens if this cast isn't here?", "author": "RatanRSur", "createdAt": "2020-02-24T17:57:57Z", "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/subscription/blockheaders/NewBlockHeadersSubscriptionServiceTest.java", "diffHunk": "@@ -63,76 +73,116 @@\n   @Captor ArgumentCaptor<JsonRpcResult> responseCaptor;\n \n   @Mock private SubscriptionManager subscriptionManager;\n-  @Mock private BlockchainQueries blockchainQueries;\n \n   private final BlockHeaderTestFixture blockHeaderTestFixture = new BlockHeaderTestFixture();\n   private final TransactionTestFixture txTestFixture = new TransactionTestFixture();\n   private final BlockHeader blockHeader = blockHeaderTestFixture.buildHeader();\n   private final BlockResultFactory blockResultFactory = new BlockResultFactory();\n+  private final BlockDataGenerator gen = new BlockDataGenerator();\n+  private final BlockchainStorage blockchainStorage =\n+      new KeyValueStoragePrefixedKeyBlockchainStorage(\n+          new InMemoryKeyValueStorage(), new MainnetBlockHeaderFunctions());\n+  private final Block genesisBlock = gen.genesisBlock();\n+  private final DefaultBlockchain blockchain =\n+      (DefaultBlockchain)", "originalCommit": "bfdca5b87bbeca1d71a9a9a359f7c4da6bde6c9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyODYxMg==", "url": "https://github.com/hyperledger/besu/pull/403#discussion_r383428612", "bodyText": "I will change the variable to be a MutableBlockchain.", "author": "davemec", "createdAt": "2020-02-24T18:12:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyMTYyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyNDM3NA==", "url": "https://github.com/hyperledger/besu/pull/403#discussion_r383424374", "bodyText": "Why did you choose VerifyNoMoreInteractions over VerifyNoInteractions?", "author": "RatanRSur", "createdAt": "2020-02-24T18:03:18Z", "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/subscription/blockheaders/NewBlockHeadersSubscriptionServiceTest.java", "diffHunk": "@@ -63,76 +73,116 @@\n   @Captor ArgumentCaptor<JsonRpcResult> responseCaptor;\n \n   @Mock private SubscriptionManager subscriptionManager;\n-  @Mock private BlockchainQueries blockchainQueries;\n \n   private final BlockHeaderTestFixture blockHeaderTestFixture = new BlockHeaderTestFixture();\n   private final TransactionTestFixture txTestFixture = new TransactionTestFixture();\n   private final BlockHeader blockHeader = blockHeaderTestFixture.buildHeader();\n   private final BlockResultFactory blockResultFactory = new BlockResultFactory();\n+  private final BlockDataGenerator gen = new BlockDataGenerator();\n+  private final BlockchainStorage blockchainStorage =\n+      new KeyValueStoragePrefixedKeyBlockchainStorage(\n+          new InMemoryKeyValueStorage(), new MainnetBlockHeaderFunctions());\n+  private final Block genesisBlock = gen.genesisBlock();\n+  private final DefaultBlockchain blockchain =\n+      (DefaultBlockchain)\n+          DefaultBlockchain.createMutable(genesisBlock, blockchainStorage, new NoOpMetricsSystem());\n+\n+  @Spy\n+  private BlockchainQueries blockchainQueriesSpy =\n+      Mockito.spy(new BlockchainQueries(blockchain, createInMemoryWorldStateArchive()));\n \n   @Before\n   public void before() {\n     newBlockHeadersSubscriptionService =\n-        new NewBlockHeadersSubscriptionService(subscriptionManager, blockchainQueries);\n+        new NewBlockHeadersSubscriptionService(subscriptionManager, blockchainQueriesSpy);\n   }\n \n   @Test\n   public void shouldSendMessageWhenBlockAddedOnCanonicalChain() {\n     final NewBlockHeadersSubscription subscription = createSubscription(false);\n     mockSubscriptionManagerNotifyMethod(subscription);\n-    final BlockResult expectedNewBlock = expectedBlockWithTransactions(Collections.emptyList());\n \n-    simulateAddingBlockOnCanonicalChain();\n+    final Block testBlock = appendBlockWithParent(blockchain, blockchain.getChainHeadBlock());\n+    simulateAddingBlockOnCanonicalChain(testBlock);\n+    final BlockResult expectedNewBlock =\n+        blockResultFactory.transactionHash(\n+            blockchainQueriesSpy.blockByHashWithTxHashes(testBlock.getHash()).orElse(null));\n \n     verify(subscriptionManager)\n         .sendMessage(subscriptionIdCaptor.capture(), responseCaptor.capture());\n     assertThat(subscriptionIdCaptor.getValue()).isEqualTo(subscription.getSubscriptionId());\n-    assertThat(responseCaptor.getValue())\n-        .isEqualToComparingFieldByFieldRecursively(expectedNewBlock);\n+    assertThat(responseCaptor.getValue()).usingRecursiveComparison().isEqualTo(expectedNewBlock);\n   }\n \n   @Test\n   public void shouldNotSendMessageWhenBlockAddedIsNotOnCanonicalChain() {\n     simulateAddingBlockOnNonCanonicalChain();\n \n-    verifyZeroInteractions(subscriptionManager);\n+    verifyNoMoreInteractions(subscriptionManager);", "originalCommit": "bfdca5b87bbeca1d71a9a9a359f7c4da6bde6c9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQzNzM5NA==", "url": "https://github.com/hyperledger/besu/pull/403#discussion_r383437394", "bodyText": "I misread the javadoc where it says VerifyNoMoreInteractions does the same thing. Will update to VerifyNoInteractions.", "author": "davemec", "createdAt": "2020-02-24T18:30:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyNDM3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyNzkyOQ==", "url": "https://github.com/hyperledger/besu/pull/403#discussion_r383427929", "bodyText": "Might as well streamline this using java streams while we're here.", "author": "RatanRSur", "createdAt": "2020-02-24T18:10:45Z", "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/subscription/blockheaders/NewBlockHeadersSubscriptionServiceTest.java", "diffHunk": "@@ -221,15 +273,35 @@ private void simulateAddingBlockOnNonCanonicalChain() {\n     return Lists.newArrayList(t1, t2);\n   }\n \n-  private List<Hash> transactionsWithHashOnly() {\n-    final List<Hash> hashes = new ArrayList<>();\n+  private List<Transaction> transactions() {\n+    final List<Transaction> transactions = new ArrayList<>();\n     for (final TransactionWithMetadata transactionWithMetadata : transactionsWithMetadata()) {\n-      hashes.add(transactionWithMetadata.getTransaction().getHash());\n+      transactions.add(transactionWithMetadata.getTransaction());\n     }\n-    return hashes;\n+    return transactions;", "originalCommit": "bfdca5b87bbeca1d71a9a9a359f7c4da6bde6c9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQzMjEwOA==", "url": "https://github.com/hyperledger/besu/pull/403#discussion_r383432108", "bodyText": "I see this is just copied over from the existing code but I think we can get rid of the times(1)", "author": "RatanRSur", "createdAt": "2020-02-24T18:19:35Z", "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/subscription/blockheaders/NewBlockHeadersSubscriptionServiceTest.java", "diffHunk": "@@ -194,21 +236,31 @@ private void mockSubscriptionManagerNotifyMethod(\n         .notifySubscribersOnWorkerThread(any(), any(), any());\n   }\n \n-  private void simulateAddingBlockOnCanonicalChain() {\n-    final BlockBody blockBody = new BlockBody(Collections.emptyList(), Collections.emptyList());\n-    final Block testBlock = new Block(blockHeader, blockBody);\n+  private void simulateAddingBlockOnCanonicalChain(final Block block) {\n     newBlockHeadersSubscriptionService.onBlockAdded(\n-        BlockAddedEvent.createForHeadAdvancement(testBlock, Collections.emptyList()),\n-        blockchainQueries.getBlockchain());\n-    verify(blockchainQueries, times(1)).getBlockchain();\n+        BlockAddedEvent.createForHeadAdvancement(block, Collections.emptyList()),\n+        blockchainQueriesSpy.getBlockchain());\n+    verify(blockchainQueriesSpy, times(1)).getBlockchain();", "originalCommit": "bfdca5b87bbeca1d71a9a9a359f7c4da6bde6c9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b511b941be0b56330100a7356063377daf7c361a", "url": "https://github.com/hyperledger/besu/commit/b511b941be0b56330100a7356063377daf7c361a", "message": "Cleanup from PR comments\n\nSigned-off-by: David Mechler <david.mechler@consensys.net>", "committedDate": "2020-02-24T20:36:35Z", "type": "commit"}, {"oid": "8bfd94a85da02d10db166cda0ce169bc3ed78c05", "url": "https://github.com/hyperledger/besu/commit/8bfd94a85da02d10db166cda0ce169bc3ed78c05", "message": "Merge branch 'master' into PIE-1632", "committedDate": "2020-02-24T20:37:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk0MzkzMQ==", "url": "https://github.com/hyperledger/besu/pull/403#discussion_r383943931", "bodyText": "Does this make sure the reorg blocks are sent in the right order?", "author": "RatanRSur", "createdAt": "2020-02-25T15:17:00Z", "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/subscription/blockheaders/NewBlockHeadersSubscriptionServiceTest.java", "diffHunk": "@@ -63,76 +73,115 @@\n   @Captor ArgumentCaptor<JsonRpcResult> responseCaptor;\n \n   @Mock private SubscriptionManager subscriptionManager;\n-  @Mock private BlockchainQueries blockchainQueries;\n \n   private final BlockHeaderTestFixture blockHeaderTestFixture = new BlockHeaderTestFixture();\n   private final TransactionTestFixture txTestFixture = new TransactionTestFixture();\n   private final BlockHeader blockHeader = blockHeaderTestFixture.buildHeader();\n   private final BlockResultFactory blockResultFactory = new BlockResultFactory();\n+  private final BlockDataGenerator gen = new BlockDataGenerator();\n+  private final BlockchainStorage blockchainStorage =\n+      new KeyValueStoragePrefixedKeyBlockchainStorage(\n+          new InMemoryKeyValueStorage(), new MainnetBlockHeaderFunctions());\n+  private final Block genesisBlock = gen.genesisBlock();\n+  private final MutableBlockchain blockchain =\n+      DefaultBlockchain.createMutable(genesisBlock, blockchainStorage, new NoOpMetricsSystem());\n+\n+  @Spy\n+  private BlockchainQueries blockchainQueriesSpy =\n+      Mockito.spy(new BlockchainQueries(blockchain, createInMemoryWorldStateArchive()));\n \n   @Before\n   public void before() {\n     newBlockHeadersSubscriptionService =\n-        new NewBlockHeadersSubscriptionService(subscriptionManager, blockchainQueries);\n+        new NewBlockHeadersSubscriptionService(subscriptionManager, blockchainQueriesSpy);\n   }\n \n   @Test\n   public void shouldSendMessageWhenBlockAddedOnCanonicalChain() {\n     final NewBlockHeadersSubscription subscription = createSubscription(false);\n     mockSubscriptionManagerNotifyMethod(subscription);\n-    final BlockResult expectedNewBlock = expectedBlockWithTransactions(Collections.emptyList());\n \n-    simulateAddingBlockOnCanonicalChain();\n+    final Block testBlock = appendBlockWithParent(blockchain, blockchain.getChainHeadBlock());\n+    simulateAddingBlockOnCanonicalChain(testBlock);\n+    final BlockResult expectedNewBlock =\n+        blockResultFactory.transactionHash(\n+            blockchainQueriesSpy.blockByHashWithTxHashes(testBlock.getHash()).orElse(null));\n \n     verify(subscriptionManager)\n         .sendMessage(subscriptionIdCaptor.capture(), responseCaptor.capture());\n     assertThat(subscriptionIdCaptor.getValue()).isEqualTo(subscription.getSubscriptionId());\n-    assertThat(responseCaptor.getValue())\n-        .isEqualToComparingFieldByFieldRecursively(expectedNewBlock);\n+    assertThat(responseCaptor.getValue()).usingRecursiveComparison().isEqualTo(expectedNewBlock);\n   }\n \n   @Test\n   public void shouldNotSendMessageWhenBlockAddedIsNotOnCanonicalChain() {\n     simulateAddingBlockOnNonCanonicalChain();\n \n-    verifyZeroInteractions(subscriptionManager);\n+    verifyNoInteractions(subscriptionManager);\n+  }\n+\n+  @Test\n+  public void shouldSendMessagesWhenReorgBlockAdded() {\n+    final NewBlockHeadersSubscription subscription = createSubscription(false);\n+    mockSubscriptionManagerNotifyMethod(subscription);\n+\n+    appendBlockWithParent(blockchain, genesisBlock);\n+    final Block forkBlock = appendBlockWithParent(blockchain, genesisBlock);\n+    final Block forkBlock1 = appendBlockWithParent(blockchain, forkBlock);\n+    final Block forkBlock2 = appendBlockWithParent(blockchain, forkBlock1);\n+    simulateAddingReorgBlock(forkBlock2, genesisBlock);\n+    final BlockResult expectedNewBlock =\n+        blockResultFactory.transactionHash(\n+            blockchainQueriesSpy.blockByHashWithTxHashes(forkBlock2.getHash()).orElse(null));\n+\n+    verify(subscriptionManager, times(3)).notifySubscribersOnWorkerThread(any(), any(), any());\n+    verify(subscriptionManager, times(3))", "originalCommit": "8bfd94a85da02d10db166cda0ce169bc3ed78c05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE0NTg5Ng==", "url": "https://github.com/hyperledger/besu/pull/403#discussion_r384145896", "bodyText": "Updated to ensure proper ordering.", "author": "davemec", "createdAt": "2020-02-25T21:47:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk0MzkzMQ=="}], "type": "inlineReview"}, {"oid": "e2fbb0e10da1fa1b09cf50a30e79ce902a2d92c1", "url": "https://github.com/hyperledger/besu/commit/e2fbb0e10da1fa1b09cf50a30e79ce902a2d92c1", "message": "Merge branch 'master' into PIE-1632", "committedDate": "2020-02-25T16:21:40Z", "type": "commit"}, {"oid": "0db1a81ac6eef34ac631107676c5d1695d888266", "url": "https://github.com/hyperledger/besu/commit/0db1a81ac6eef34ac631107676c5d1695d888266", "message": "Update test to ensure correct order\n\nSigned-off-by: David Mechler <david.mechler@consensys.net>", "committedDate": "2020-02-25T20:56:16Z", "type": "commit"}, {"oid": "bc4e4b049a9f047396e3086d7a39291c3f35d0ac", "url": "https://github.com/hyperledger/besu/commit/bc4e4b049a9f047396e3086d7a39291c3f35d0ac", "message": "Merge branch 'master' into PIE-1632", "committedDate": "2020-02-26T20:04:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc0Mjk5Nw==", "url": "https://github.com/hyperledger/besu/pull/403#discussion_r384742997", "bodyText": "Now that we use block data generator, can we get rid of all the old fixtures and use the generator instead?", "author": "RatanRSur", "createdAt": "2020-02-26T20:22:05Z", "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/subscription/blockheaders/NewBlockHeadersSubscriptionServiceTest.java", "diffHunk": "@@ -194,21 +244,31 @@ private void mockSubscriptionManagerNotifyMethod(\n         .notifySubscribersOnWorkerThread(any(), any(), any());\n   }\n \n-  private void simulateAddingBlockOnCanonicalChain() {\n-    final BlockBody blockBody = new BlockBody(Collections.emptyList(), Collections.emptyList());\n-    final Block testBlock = new Block(blockHeader, blockBody);\n+  private void simulateAddingBlockOnCanonicalChain(final Block block) {\n     newBlockHeadersSubscriptionService.onBlockAdded(\n-        BlockAddedEvent.createForHeadAdvancement(testBlock, Collections.emptyList()),\n-        blockchainQueries.getBlockchain());\n-    verify(blockchainQueries, times(1)).getBlockchain();\n+        BlockAddedEvent.createForHeadAdvancement(block, Collections.emptyList()),\n+        blockchainQueriesSpy.getBlockchain());\n+    verify(blockchainQueriesSpy, times(1)).getBlockchain();\n   }\n \n   private void simulateAddingBlockOnNonCanonicalChain() {\n     final BlockBody blockBody = new BlockBody(Collections.emptyList(), Collections.emptyList());\n     final Block testBlock = new Block(blockHeader, blockBody);", "originalCommit": "bc4e4b049a9f047396e3086d7a39291c3f35d0ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ea8784e5a8919f438929895601bb48d52e32be29", "url": "https://github.com/hyperledger/besu/commit/ea8784e5a8919f438929895601bb48d52e32be29", "message": "Remove test fixtures and use BlockDataGenerator\n\nSigned-off-by: David Mechler <david.mechler@consensys.net>", "committedDate": "2020-02-27T13:07:32Z", "type": "commit"}, {"oid": "7b6d6bc5181e57ebcbc59661423daab1e2d1e5d3", "url": "https://github.com/hyperledger/besu/commit/7b6d6bc5181e57ebcbc59661423daab1e2d1e5d3", "message": "Merge branch 'PIE-1632' of github.com:davemec/besu into PIE-1632", "committedDate": "2020-02-27T13:07:42Z", "type": "commit"}, {"oid": "9fce6d316dee59fffd2e4b4acd108956c8dc90b6", "url": "https://github.com/hyperledger/besu/commit/9fce6d316dee59fffd2e4b4acd108956c8dc90b6", "message": "Merge branch 'master' into PIE-1632", "committedDate": "2020-02-27T13:08:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE2NTIzNw==", "url": "https://github.com/hyperledger/besu/pull/403#discussion_r385165237", "bodyText": "Now the simulate method forces the call of onBlockAdded but since you have the blockchain, these should automatically be called when you subscribe to NewHeaders.\nBasically, the tests could look like:\n\nCreate blockchain\nSubscribe to BlockHeaders\nAdd blocks\nCheck what queries were made\n\nAll without ever calling onBlockAdded manually.", "author": "RatanRSur", "createdAt": "2020-02-27T14:34:59Z", "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/subscription/blockheaders/NewBlockHeadersSubscriptionServiceTest.java", "diffHunk": "@@ -251,11 +232,9 @@ private void simulateAddingBlockOnCanonicalChain(final Block block) {\n     verify(blockchainQueriesSpy, times(1)).getBlockchain();\n   }\n \n-  private void simulateAddingBlockOnNonCanonicalChain() {\n-    final BlockBody blockBody = new BlockBody(Collections.emptyList(), Collections.emptyList());\n-    final Block testBlock = new Block(blockHeader, blockBody);\n+  private void simulateAddingBlockOnNonCanonicalChain(final Block block) {\n     newBlockHeadersSubscriptionService.onBlockAdded(\n-        BlockAddedEvent.createForFork(testBlock), blockchainQueriesSpy.getBlockchain());\n+        BlockAddedEvent.createForFork(block), blockchainQueriesSpy.getBlockchain());", "originalCommit": "9fce6d316dee59fffd2e4b4acd108956c8dc90b6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE2NTM5NA==", "url": "https://github.com/hyperledger/besu/pull/403#discussion_r385165394", "bodyText": "Now the simulate method forces the call of onBlockAdded but since you have the blockchain, these should automatically be called when you subscribe to NewHeaders.\nBasically, the tests could look like:\n\nCreate blockchain\nSubscribe to BlockHeaders\nAdd blocks\nCheck what queries were made\n\nAll without ever calling onBlockAdded manually.", "author": "RatanRSur", "createdAt": "2020-02-27T14:35:14Z", "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/subscription/blockheaders/NewBlockHeadersSubscriptionServiceTest.java", "diffHunk": "@@ -251,11 +232,9 @@ private void simulateAddingBlockOnCanonicalChain(final Block block) {\n     verify(blockchainQueriesSpy, times(1)).getBlockchain();\n   }\n \n-  private void simulateAddingBlockOnNonCanonicalChain() {\n-    final BlockBody blockBody = new BlockBody(Collections.emptyList(), Collections.emptyList());\n-    final Block testBlock = new Block(blockHeader, blockBody);\n+  private void simulateAddingBlockOnNonCanonicalChain(final Block block) {\n     newBlockHeadersSubscriptionService.onBlockAdded(\n-        BlockAddedEvent.createForFork(testBlock), blockchainQueriesSpy.getBlockchain());\n+        BlockAddedEvent.createForFork(block), blockchainQueriesSpy.getBlockchain());", "originalCommit": "9fce6d316dee59fffd2e4b4acd108956c8dc90b6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7dfc47015119c4ee11edf8f3c4986ecbd1472ea7", "url": "https://github.com/hyperledger/besu/commit/7dfc47015119c4ee11edf8f3c4986ecbd1472ea7", "message": "Update tests\n\nSigned-off-by: David Mechler <david.mechler@consensys.net>", "committedDate": "2020-02-28T20:17:32Z", "type": "commit"}, {"oid": "bc24ead0c1250db72846621efbd7fcac4cb8b822", "url": "https://github.com/hyperledger/besu/commit/bc24ead0c1250db72846621efbd7fcac4cb8b822", "message": "Merge branch 'PIE-1632' of github.com:davemec/besu into PIE-1632", "committedDate": "2020-02-28T20:17:37Z", "type": "commit"}, {"oid": "25f06ba87a1a4e1df8c4f36b46f29c9076487dcb", "url": "https://github.com/hyperledger/besu/commit/25f06ba87a1a4e1df8c4f36b46f29c9076487dcb", "message": "Merge branch 'master' into PIE-1632", "committedDate": "2020-02-28T20:18:58Z", "type": "commit"}, {"oid": "8ee6a267aa4ef4955e30fce5c2684d53513d6810", "url": "https://github.com/hyperledger/besu/commit/8ee6a267aa4ef4955e30fce5c2684d53513d6810", "message": "Merge branch 'master' into PIE-1632", "committedDate": "2020-03-02T15:08:25Z", "type": "commit"}]}