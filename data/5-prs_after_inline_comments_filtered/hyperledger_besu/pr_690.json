{"pr_number": 690, "pr_title": "Separate NodeKey from implementation", "pr_createdAt": "2020-04-09T06:31:36Z", "pr_url": "https://github.com/hyperledger/besu/pull/690", "timeline": [{"oid": "81cfd3598e2ea89c3091382340ca1c57c3eaf7da", "url": "https://github.com/hyperledger/besu/commit/81cfd3598e2ea89c3091382340ca1c57c3eaf7da", "message": "clean up\n\nSigned-off-by: Trent Mohay <trent.mohay@consensys.net>", "committedDate": "2020-04-09T06:33:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwNzQ5OA==", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r406007498", "bodyText": "For consistency with other files in this PR, I'd recommend the Besu classes not being fully qualified (e.g. Signature) and instead having the Tuweni classes with SECP256K1 prefix instead.", "author": "CjHare", "createdAt": "2020-04-09T07:27:15Z", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/NodeKey.java", "diffHunk": "@@ -14,16 +14,42 @@\n  */\n package org.hyperledger.besu.crypto;\n \n+import org.hyperledger.besu.crypto.SECP256K1.KeyPair;\n import org.hyperledger.besu.crypto.SECP256K1.PublicKey;\n import org.hyperledger.besu.crypto.SECP256K1.Signature;\n \n import org.apache.tuweni.bytes.Bytes32;\n \n-public interface NodeKey {\n+public class NodeKey {\n \n-  Signature sign(Bytes32 dataHash);\n+  private final SecurityModule crypto;\n \n-  PublicKey getPublicKey();\n+  public NodeKey(final SecurityModule crypto) {\n+    this.crypto = crypto;\n+  }\n \n-  Bytes32 calculateECDHKeyAgreement(PublicKey publicKey);\n+  public Signature sign(final Bytes32 dataHash) {\n+    org.hyperledger.besu.crypto.Signature signature = crypto.sign(dataHash);", "originalCommit": "81cfd3598e2ea89c3091382340ca1c57c3eaf7da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyMjQ4MQ==", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407122481", "bodyText": "Agreed - reads much more nicely \ud83d\udc4d", "author": "rain-on", "createdAt": "2020-04-11T23:27:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwNzQ5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwODE5Ng==", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r406008196", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * interface ensures cryptographic functions required by an Ethereum are available to the\n          \n          \n            \n             * interface ensures cryptographic functions required by Ethereum are available to the", "author": "CjHare", "createdAt": "2020-04-09T07:28:40Z", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/SecurityModule.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.crypto;\n+\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+/**\n+ * Provides a generic interface for classes which wrap/hide a cryptographic private key. This\n+ * interface ensures cryptographic functions required by an Ethereum are available to the", "originalCommit": "81cfd3598e2ea89c3091382340ca1c57c3eaf7da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyMjUzMQ==", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407122531", "bodyText": "done", "author": "rain-on", "createdAt": "2020-04-11T23:28:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwODE5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwOTQ5Ng==", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r406009496", "bodyText": "Suggestion: maybe a name like recoveryIndex would be more fitting for this variable, as recId didn't mean anything to me until I read this class.", "author": "CjHare", "createdAt": "2020-04-09T07:31:20Z", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/Signature.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.crypto;\n+\n+import java.math.BigInteger;\n+\n+public final class Signature {\n+\n+  /**\n+   * The recovery id to reconstruct the public key used to create the signature.\n+   *\n+   * <p>The recId is an index from 0 to 3 which indicates which of the 4 possible keys is the\n+   * correct one. Because the key recovery operation yields multiple potential keys, the correct key\n+   * must either be stored alongside the signature, or you must be willing to try each recId in turn\n+   * until you find one that outputs the key you are expecting.\n+   */\n+  private final byte recId;", "originalCommit": "81cfd3598e2ea89c3091382340ca1c57c3eaf7da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyMjU3MA==", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407122570", "bodyText": "done", "author": "rain-on", "createdAt": "2020-04-11T23:28:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwOTQ5Ng=="}], "type": "inlineReview"}, {"oid": "2c26078413dc4cf85e7262ad7eb7839280444d3c", "url": "https://github.com/hyperledger/besu/commit/2c26078413dc4cf85e7262ad7eb7839280444d3c", "message": "Separate nodekey from implementation\n\nSigned-off-by: Trent Mohay <trent.mohay@consensys.net>", "committedDate": "2020-04-14T00:56:55Z", "type": "commit"}, {"oid": "2c26078413dc4cf85e7262ad7eb7839280444d3c", "url": "https://github.com/hyperledger/besu/commit/2c26078413dc4cf85e7262ad7eb7839280444d3c", "message": "Separate nodekey from implementation\n\nSigned-off-by: Trent Mohay <trent.mohay@consensys.net>", "committedDate": "2020-04-14T00:56:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNDM5Nw==", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407804397", "bodyText": "This can be now \"non-quailfied\" as Signature signature = crypto.sign(dataHash);", "author": "usmansaleem", "createdAt": "2020-04-14T00:59:54Z", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/NodeKey.java", "diffHunk": "@@ -14,16 +14,38 @@\n  */\n package org.hyperledger.besu.crypto;\n \n-import org.hyperledger.besu.crypto.SECP256K1.PublicKey;\n-import org.hyperledger.besu.crypto.SECP256K1.Signature;\n-\n import org.apache.tuweni.bytes.Bytes32;\n \n-public interface NodeKey {\n+public class NodeKey {\n+\n+  private final SecurityModule crypto;\n+\n+  public NodeKey(final SecurityModule crypto) {\n+    this.crypto = crypto;\n+  }\n+\n+  public SECP256K1.Signature sign(final Bytes32 dataHash) {\n+    org.hyperledger.besu.crypto.Signature signature = crypto.sign(dataHash);", "originalCommit": "2c26078413dc4cf85e7262ad7eb7839280444d3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxMTA4NA==", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407811084", "bodyText": "done", "author": "rain-on", "createdAt": "2020-04-14T01:24:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNDM5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNDY2Nw==", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407804667", "bodyText": "no need to use fully qualified constructor now.", "author": "usmansaleem", "createdAt": "2020-04-14T01:00:52Z", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/NodeKey.java", "diffHunk": "@@ -14,16 +14,38 @@\n  */\n package org.hyperledger.besu.crypto;\n \n-import org.hyperledger.besu.crypto.SECP256K1.PublicKey;\n-import org.hyperledger.besu.crypto.SECP256K1.Signature;\n-\n import org.apache.tuweni.bytes.Bytes32;\n \n-public interface NodeKey {\n+public class NodeKey {\n+\n+  private final SecurityModule crypto;\n+\n+  public NodeKey(final SecurityModule crypto) {\n+    this.crypto = crypto;\n+  }\n+\n+  public SECP256K1.Signature sign(final Bytes32 dataHash) {\n+    org.hyperledger.besu.crypto.Signature signature = crypto.sign(dataHash);\n+    return SECP256K1.Signature.create(\n+        signature.getR(), signature.getS(), signature.getRecoveryId());\n+  }\n+\n+  public PublicKey getPublicKey() {\n+    org.hyperledger.besu.crypto.PublicKey pubKey = crypto.getPublicKey();\n+    return PublicKey.create(pubKey.getEncoded());\n+  }\n+\n+  public Bytes32 calculateECDHKeyAgreement(final SECP256K1.PublicKey partyKey) {\n+    PublicKey pubKey = new org.hyperledger.besu.crypto.PublicKey(partyKey.getEncodedBytes());", "originalCommit": "2c26078413dc4cf85e7262ad7eb7839280444d3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxMTEwNQ==", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407811105", "bodyText": "done", "author": "rain-on", "createdAt": "2020-04-14T01:24:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNDY2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNTUzNQ==", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407805535", "bodyText": "nit: final", "author": "jframe", "createdAt": "2020-04-14T01:04:01Z", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/NodeKey.java", "diffHunk": "@@ -14,16 +14,38 @@\n  */\n package org.hyperledger.besu.crypto;\n \n-import org.hyperledger.besu.crypto.SECP256K1.PublicKey;\n-import org.hyperledger.besu.crypto.SECP256K1.Signature;\n-\n import org.apache.tuweni.bytes.Bytes32;\n \n-public interface NodeKey {\n+public class NodeKey {\n+\n+  private final SecurityModule crypto;\n+\n+  public NodeKey(final SecurityModule crypto) {\n+    this.crypto = crypto;\n+  }\n+\n+  public SECP256K1.Signature sign(final Bytes32 dataHash) {\n+    org.hyperledger.besu.crypto.Signature signature = crypto.sign(dataHash);\n+    return SECP256K1.Signature.create(\n+        signature.getR(), signature.getS(), signature.getRecoveryId());\n+  }\n+\n+  public PublicKey getPublicKey() {\n+    org.hyperledger.besu.crypto.PublicKey pubKey = crypto.getPublicKey();\n+    return PublicKey.create(pubKey.getEncoded());\n+  }\n+\n+  public Bytes32 calculateECDHKeyAgreement(final SECP256K1.PublicKey partyKey) {\n+    PublicKey pubKey = new org.hyperledger.besu.crypto.PublicKey(partyKey.getEncodedBytes());", "originalCommit": "2c26078413dc4cf85e7262ad7eb7839280444d3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxMTIxMQ==", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407811211", "bodyText": "done", "author": "rain-on", "createdAt": "2020-04-14T01:24:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNTUzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNTk0Mw==", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407805943", "bodyText": "nit: final", "author": "jframe", "createdAt": "2020-04-14T01:05:34Z", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/NodeKey.java", "diffHunk": "@@ -14,16 +14,38 @@\n  */\n package org.hyperledger.besu.crypto;\n \n-import org.hyperledger.besu.crypto.SECP256K1.PublicKey;\n-import org.hyperledger.besu.crypto.SECP256K1.Signature;\n-\n import org.apache.tuweni.bytes.Bytes32;\n \n-public interface NodeKey {\n+public class NodeKey {\n+\n+  private final SecurityModule crypto;\n+\n+  public NodeKey(final SecurityModule crypto) {\n+    this.crypto = crypto;\n+  }\n+\n+  public SECP256K1.Signature sign(final Bytes32 dataHash) {\n+    org.hyperledger.besu.crypto.Signature signature = crypto.sign(dataHash);\n+    return SECP256K1.Signature.create(\n+        signature.getR(), signature.getS(), signature.getRecoveryId());\n+  }\n+\n+  public PublicKey getPublicKey() {\n+    org.hyperledger.besu.crypto.PublicKey pubKey = crypto.getPublicKey();", "originalCommit": "2c26078413dc4cf85e7262ad7eb7839280444d3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxMTIzMA==", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407811230", "bodyText": "done", "author": "rain-on", "createdAt": "2020-04-14T01:24:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNTk0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNjA4NA==", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407806084", "bodyText": "Rename crypto to securityModule to be consistent with param type", "author": "jframe", "createdAt": "2020-04-14T01:06:05Z", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/NodeKey.java", "diffHunk": "@@ -14,16 +14,38 @@\n  */\n package org.hyperledger.besu.crypto;\n \n-import org.hyperledger.besu.crypto.SECP256K1.PublicKey;\n-import org.hyperledger.besu.crypto.SECP256K1.Signature;\n-\n import org.apache.tuweni.bytes.Bytes32;\n \n-public interface NodeKey {\n+public class NodeKey {\n+\n+  private final SecurityModule crypto;\n+\n+  public NodeKey(final SecurityModule crypto) {\n+    this.crypto = crypto;", "originalCommit": "2c26078413dc4cf85e7262ad7eb7839280444d3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxMTI4Mw==", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407811283", "bodyText": "done", "author": "rain-on", "createdAt": "2020-04-14T01:24:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNjA4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNjk3NA==", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407806974", "bodyText": "Not sure this belongs in this class, is this only ever used in testing? It looks like it is?", "author": "jframe", "createdAt": "2020-04-14T01:09:14Z", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/NodeKey.java", "diffHunk": "@@ -14,16 +14,38 @@\n  */\n package org.hyperledger.besu.crypto;\n \n-import org.hyperledger.besu.crypto.SECP256K1.PublicKey;\n-import org.hyperledger.besu.crypto.SECP256K1.Signature;\n-\n import org.apache.tuweni.bytes.Bytes32;\n \n-public interface NodeKey {\n+public class NodeKey {\n+\n+  private final SecurityModule crypto;\n+\n+  public NodeKey(final SecurityModule crypto) {\n+    this.crypto = crypto;\n+  }\n+\n+  public SECP256K1.Signature sign(final Bytes32 dataHash) {\n+    org.hyperledger.besu.crypto.Signature signature = crypto.sign(dataHash);\n+    return SECP256K1.Signature.create(\n+        signature.getR(), signature.getS(), signature.getRecoveryId());\n+  }\n+\n+  public PublicKey getPublicKey() {\n+    org.hyperledger.besu.crypto.PublicKey pubKey = crypto.getPublicKey();\n+    return PublicKey.create(pubKey.getEncoded());\n+  }\n+\n+  public Bytes32 calculateECDHKeyAgreement(final SECP256K1.PublicKey partyKey) {\n+    PublicKey pubKey = new org.hyperledger.besu.crypto.PublicKey(partyKey.getEncodedBytes());\n \n-  Signature sign(Bytes32 dataHash);\n+    return crypto.calculateECDHKeyAgreement(pubKey);\n+  }\n \n-  PublicKey getPublicKey();\n+  public static NodeKey createFrom(final SECP256K1.KeyPair keyPair) {\n+    return new NodeKey(new BouncyCastleSecurityModule(keyPair));\n+  }\n \n-  Bytes32 calculateECDHKeyAgreement(PublicKey publicKey);\n+  public static NodeKey generate() {", "originalCommit": "2c26078413dc4cf85e7262ad7eb7839280444d3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxMTQ3NQ==", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407811475", "bodyText": "yeah, its only test ... but simplifies things if its here ... what do you think?", "author": "rain-on", "createdAt": "2020-04-14T01:25:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNjk3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNzE0NQ==", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407807145", "bodyText": "This also looks like it is only needed for test code?", "author": "jframe", "createdAt": "2020-04-14T01:09:51Z", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/NodeKey.java", "diffHunk": "@@ -14,16 +14,38 @@\n  */\n package org.hyperledger.besu.crypto;\n \n-import org.hyperledger.besu.crypto.SECP256K1.PublicKey;\n-import org.hyperledger.besu.crypto.SECP256K1.Signature;\n-\n import org.apache.tuweni.bytes.Bytes32;\n \n-public interface NodeKey {\n+public class NodeKey {\n+\n+  private final SecurityModule crypto;\n+\n+  public NodeKey(final SecurityModule crypto) {\n+    this.crypto = crypto;\n+  }\n+\n+  public SECP256K1.Signature sign(final Bytes32 dataHash) {\n+    org.hyperledger.besu.crypto.Signature signature = crypto.sign(dataHash);\n+    return SECP256K1.Signature.create(\n+        signature.getR(), signature.getS(), signature.getRecoveryId());\n+  }\n+\n+  public PublicKey getPublicKey() {\n+    org.hyperledger.besu.crypto.PublicKey pubKey = crypto.getPublicKey();\n+    return PublicKey.create(pubKey.getEncoded());\n+  }\n+\n+  public Bytes32 calculateECDHKeyAgreement(final SECP256K1.PublicKey partyKey) {\n+    PublicKey pubKey = new org.hyperledger.besu.crypto.PublicKey(partyKey.getEncodedBytes());\n \n-  Signature sign(Bytes32 dataHash);\n+    return crypto.calculateECDHKeyAgreement(pubKey);\n+  }\n \n-  PublicKey getPublicKey();\n+  public static NodeKey createFrom(final SECP256K1.KeyPair keyPair) {", "originalCommit": "2c26078413dc4cf85e7262ad7eb7839280444d3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxMTUyMQ==", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407811521", "bodyText": "yeah, its only test ... but simplifies things if its here ... what do you think?", "author": "rain-on", "createdAt": "2020-04-14T01:25:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNzE0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgzMDI3NA==", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407830274", "bodyText": "A separation of test code from production code would probably be nicer.\nOptions are either:\n\nleave as is and annotation with @VisibleForTesting  (which has been done elsewhere)\nmove into a new NodeKeyTestUtil class that lives among the tests", "author": "CjHare", "createdAt": "2020-04-14T02:34:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNzE0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwODExOA==", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407808118", "bodyText": "This name doesn't quite seem right as it's wrapping a private key, it's not a general security module. Not a great name either but perhaps PrivateKeySecurityModule?", "author": "jframe", "createdAt": "2020-04-14T01:13:30Z", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/SecurityModule.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.crypto;\n+\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+/**\n+ * Provides a generic interface for classes which wrap/hide a cryptographic private key. This\n+ * interface ensures cryptographic functions required by Ethereum are available to the application\n+ * at large, without releasing the content of the private key.\n+ */\n+public interface SecurityModule {", "originalCommit": "d68afa350c7f4ee79ff1004c0d49ae6fdcef305c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwODk5Nw==", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407808997", "bodyText": "Since there is only one key agreement now, we could just name this calculateKeyAgreement", "author": "jframe", "createdAt": "2020-04-14T01:16:52Z", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/SecurityModule.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.crypto;\n+\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+/**\n+ * Provides a generic interface for classes which wrap/hide a cryptographic private key. This\n+ * interface ensures cryptographic functions required by Ethereum are available to the application\n+ * at large, without releasing the content of the private key.\n+ */\n+public interface SecurityModule {\n+\n+  /**\n+   * @param dataHash The Keccack hash of a set of data, which is to be signed.\n+   * @return the signature (R, S, recId) generated by signing the hash with the node key\n+   */\n+  Signature sign(Bytes32 dataHash);\n+\n+  /** @return the public key associated with the key stored behind this interface. */\n+  PublicKey getPublicKey();\n+\n+  /**\n+   * @param partyKey the key with which an agreement is to be created.\n+   * @return The bytes forming the agreement\n+   */\n+  Bytes32 calculateECDHKeyAgreement(PublicKey partyKey);", "originalCommit": "d68afa350c7f4ee79ff1004c0d49ae6fdcef305c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxMTY2Ng==", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407811666", "bodyText": "it is specifically for ECDH - and there other other types (at least according to Luna) - so happy to let this stick.", "author": "rain-on", "createdAt": "2020-04-14T01:26:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwODk5Nw=="}], "type": "inlineReview"}, {"oid": "e956e731faabbe2e564efae9acb3eb33984858c6", "url": "https://github.com/hyperledger/besu/commit/e956e731faabbe2e564efae9acb3eb33984858c6", "message": "clean up extraneous qualifiers\n\nSigned-off-by: Trent Mohay <trent.mohay@consensys.net>", "committedDate": "2020-04-14T01:19:58Z", "type": "commit"}, {"oid": "e956e731faabbe2e564efae9acb3eb33984858c6", "url": "https://github.com/hyperledger/besu/commit/e956e731faabbe2e564efae9acb3eb33984858c6", "message": "clean up extraneous qualifiers\n\nSigned-off-by: Trent Mohay <trent.mohay@consensys.net>", "committedDate": "2020-04-14T01:19:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxMDU1MA==", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407810550", "bodyText": "this wasn't there before, is that hidden character or something erroneous get copied?", "author": "usmansaleem", "createdAt": "2020-04-14T01:22:34Z", "path": "crypto/src/test/java/org/hyperledger/besu/crypto/SECP256K1Test.java", "diffHunk": "@@ -280,3 +280,4 @@ public void invalidMultiLineFileThrowsInvalidIdException() throws Exception {\n     KeyPairUtil.load(tempFile);\n   }\n }\n+\u2030", "originalCommit": "e956e731faabbe2e564efae9acb3eb33984858c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f7c5b9ab37cc6a79337d48da35b2188774623ae1", "url": "https://github.com/hyperledger/besu/commit/f7c5b9ab37cc6a79337d48da35b2188774623ae1", "message": "fix secp256k1test\n\nSigned-off-by: Trent Mohay <trent.mohay@consensys.net>", "committedDate": "2020-04-14T01:26:47Z", "type": "commit"}, {"oid": "a01026119caa941017c9fd9ee528d5e98a0550ea", "url": "https://github.com/hyperledger/besu/commit/a01026119caa941017c9fd9ee528d5e98a0550ea", "message": "fix more\n\nSigned-off-by: Trent Mohay <trent.mohay@consensys.net>", "committedDate": "2020-04-14T01:52:00Z", "type": "commit"}, {"oid": "b8f6d87222358e98ae7f8f13ee22f88ece750cd1", "url": "https://github.com/hyperledger/besu/commit/b8f6d87222358e98ae7f8f13ee22f88ece750cd1", "message": "using NodeKeyUtils\n\nSigned-off-by: Trent Mohay <trent.mohay@consensys.net>", "committedDate": "2020-04-14T02:55:05Z", "type": "commit"}, {"oid": "b8f6d87222358e98ae7f8f13ee22f88ece750cd1", "url": "https://github.com/hyperledger/besu/commit/b8f6d87222358e98ae7f8f13ee22f88ece750cd1", "message": "using NodeKeyUtils\n\nSigned-off-by: Trent Mohay <trent.mohay@consensys.net>", "committedDate": "2020-04-14T02:55:05Z", "type": "forcePushed"}, {"oid": "ec6abdc8bcdce9f1cb5dc7feaf31d1ee46ee251c", "url": "https://github.com/hyperledger/besu/commit/ec6abdc8bcdce9f1cb5dc7feaf31d1ee46ee251c", "message": "Merge remote-tracking branch 'upstream/master' into sep_nk2\n\nSigned-off-by: Trent Mohay <trent.mohay@consensys.net>", "committedDate": "2020-04-14T05:02:53Z", "type": "commit"}]}