{"pr_number": 703, "pr_title": "Fix priv_getPrivateTransaction return", "pr_createdAt": "2020-04-14T00:47:28Z", "pr_url": "https://github.com/hyperledger/besu/pull/703", "timeline": [{"oid": "1aa56bd848f817a2a518bc03b9c7e51f743b271a", "url": "https://github.com/hyperledger/besu/commit/1aa56bd848f817a2a518bc03b9c7e51f743b271a", "message": "fix return for priv_getPrivateTransaction\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>", "committedDate": "2020-04-14T00:40:56Z", "type": "commit"}, {"oid": "6760bbd8f315d25420c5e205e472ea84000671ee", "url": "https://github.com/hyperledger/besu/commit/6760bbd8f315d25420c5e205e472ea84000671ee", "message": "fix return for priv_getPrivateTransaction\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>", "committedDate": "2020-04-14T00:41:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgzMzc1NA==", "url": "https://github.com/hyperledger/besu/pull/703#discussion_r407833754", "bodyText": "Can we remove this comment?", "author": "lucassaldanha", "createdAt": "2020-04-14T02:47:32Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/PrivGetPrivateTransactionAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.web3j.privacy;\n+\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+import org.hyperledger.besu.ethereum.privacy.Restriction;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+import org.hyperledger.besu.tests.acceptance.dsl.privacy.PrivacyAcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.privacy.PrivacyNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.privacy.transaction.CreatePrivacyGroupTransaction;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class PrivGetPrivateTransactionAcceptanceTest extends PrivacyAcceptanceTestBase {\n+\n+  private PrivacyNode alice;\n+  private PrivacyNode bob;\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    alice = privacyBesu.createIbft2NodePrivacyEnabled(\"node1\", privacyAccountResolver.resolve(0));\n+    bob = privacyBesu.createIbft2NodePrivacyEnabled(\"node2\", privacyAccountResolver.resolve(1));\n+    privacyCluster.start(alice, bob);\n+  }\n+\n+  @Test\n+  public void returnsTransaction() {\n+    final CreatePrivacyGroupTransaction onlyAlice =\n+        privacyTransactions.createPrivacyGroup(\"Only Alice\", \"\", alice);\n+\n+    final String privacyGroupId = alice.execute(onlyAlice);\n+\n+    final PrivateTransaction validSignedPrivateTransaction =\n+        getValidSignedPrivateTransaction(alice, privacyGroupId);\n+    final BytesValueRLPOutput rlpOutput = getRLPOutput(validSignedPrivateTransaction);\n+\n+    final Hash transactionHash =\n+        alice.execute(privacyTransactions.sendRawTransaction(rlpOutput.encoded().toHexString()));\n+\n+    alice.getBesu().verify(eth.expectSuccessfulTransactionReceipt(transactionHash.toString()));\n+\n+    alice\n+        .getBesu()\n+        .verify(priv.getPrivateTransaction(transactionHash, validSignedPrivateTransaction));\n+  }\n+\n+  @Test\n+  public void nonExistentHashReturnsNull() {\n+    alice.getBesu().verify(priv.getPrivateTransactionReturnsNull(Hash.ZERO));\n+  }\n+\n+  @Test\n+  public void returnsNullTransactionNotInNodesPrivacyGroup() {\n+    final CreatePrivacyGroupTransaction onlyAlice =\n+        privacyTransactions.createPrivacyGroup(\"Only Alice\", \"\", alice);\n+\n+    final String privacyGroupId = alice.execute(onlyAlice);\n+\n+    final PrivateTransaction validSignedPrivateTransaction =\n+        getValidSignedPrivateTransaction(alice, privacyGroupId);\n+    final BytesValueRLPOutput rlpOutput = getRLPOutput(validSignedPrivateTransaction);\n+\n+    final Hash transactionHash =\n+        alice.execute(privacyTransactions.sendRawTransaction(rlpOutput.encoded().toHexString()));\n+\n+    alice.getBesu().verify(eth.expectSuccessfulTransactionReceipt(transactionHash.toString()));\n+\n+    bob.getBesu().verify(priv.getPrivateTransactionReturnsNull(transactionHash));\n+  }\n+\n+  private BytesValueRLPOutput getRLPOutput(final PrivateTransaction privateTransaction) {\n+    final BytesValueRLPOutput bvrlpo = new BytesValueRLPOutput();\n+    privateTransaction.writeTo(bvrlpo);\n+    return bvrlpo;\n+  }\n+\n+  private static PrivateTransaction getValidSignedPrivateTransaction(\n+      final PrivacyNode node, final String privacyGoupId) {\n+    return PrivateTransaction.builder()\n+        .nonce(0)\n+        .gasPrice(Wei.of(999999))\n+        .gasLimit(3000000)\n+        .to(null)\n+        .value(Wei.ZERO)\n+        .payload(Bytes.wrap(new byte[] {}))\n+        .sender(node.getAddress())\n+        //                .chainId(BigInteger.valueOf(2018))", "originalCommit": "6760bbd8f315d25420c5e205e472ea84000671ee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}