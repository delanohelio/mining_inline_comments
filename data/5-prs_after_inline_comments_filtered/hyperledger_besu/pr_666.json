{"pr_number": 666, "pr_title": "Update Handshakers to use NodeKey", "pr_createdAt": "2020-04-07T06:47:40Z", "pr_url": "https://github.com/hyperledger/besu/pull/666", "timeline": [{"oid": "16d1e712b746d3584083728850898485ac6d931f", "url": "https://github.com/hyperledger/besu/commit/16d1e712b746d3584083728850898485ac6d931f", "message": "Update Handshakers to use NodeKey\n\nSigned-off-by: Trent Mohay <trent.mohay@consensys.net>", "committedDate": "2020-04-07T06:46:14Z", "type": "commit"}, {"oid": "d3a8736cc85aec01165b6a6cac54caec7abb8d29", "url": "https://github.com/hyperledger/besu/commit/d3a8736cc85aec01165b6a6cac54caec7abb8d29", "message": "Merge branch 'master' into handshaker", "committedDate": "2020-04-07T07:20:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY5NTI0Mg==", "url": "https://github.com/hyperledger/besu/pull/666#discussion_r404695242", "bodyText": "Does it make sense to move the second parameter SECP256K1.PublicKey.create(peer.getId()) as potentially a static method in NodeKey as well?", "author": "usmansaleem", "createdAt": "2020-04-07T10:13:19Z", "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/rlpx/connections/netty/HandshakeHandlerOutbound.java", "diffHunk": "@@ -53,7 +54,8 @@ public HandshakeHandlerOutbound(\n         connectionFuture,\n         connectionEventDispatcher,\n         metricsSystem);\n-    handshaker.prepareInitiator(kp, SECP256K1.PublicKey.create(peer.getId()));\n+    handshaker.prepareInitiator(", "originalCommit": "d3a8736cc85aec01165b6a6cac54caec7abb8d29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwODM5OA==", "url": "https://github.com/hyperledger/besu/pull/666#discussion_r405208398", "bodyText": "Thinking not - NodeKey is all about protecting this node's identity/private key - the Peer in this question is someone remote.\nI.e. only operations for our node key need to go via the NodeKey interface", "author": "rain-on", "createdAt": "2020-04-08T01:35:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY5NTI0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY5NjYyOQ==", "url": "https://github.com/hyperledger/besu/pull/666#discussion_r404696629", "bodyText": "what about ephKeyPair?", "author": "usmansaleem", "createdAt": "2020-04-07T10:15:41Z", "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/rlpx/handshake/ecies/ECIESHandshaker.java", "diffHunk": "@@ -101,14 +103,14 @@ public void prepareInitiator(final SECP256K1.KeyPair ourKeypair, final PublicKey\n   }\n \n   @Override\n-  public void prepareResponder(final SECP256K1.KeyPair ourKeypair) {\n+  public void prepareResponder(final NodeKey nodeKey) {\n     checkState(\n         status.compareAndSet(\n             Handshaker.HandshakeStatus.UNINITIALIZED, Handshaker.HandshakeStatus.IN_PROGRESS),\n         \"handshake was already prepared\");\n \n     this.initiator = false;\n-    this.identityKeyPair = ourKeypair;\n+    this.nodeKey = nodeKey;\n     this.ephKeyPair = SECP256K1.KeyPair.generate();", "originalCommit": "d3a8736cc85aec01165b6a6cac54caec7abb8d29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwOTc4Nw==", "url": "https://github.com/hyperledger/besu/pull/666#discussion_r405209787", "bodyText": "This is the ephemeral key used for inter-node communications and is rolling - so no need to protect it alongside our nodekey", "author": "rain-on", "createdAt": "2020-04-08T01:40:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY5NjYyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY5NzUzOA==", "url": "https://github.com/hyperledger/besu/pull/666#discussion_r404697538", "bodyText": "just wondering, should we name argument as 'ourNodeKey' ?", "author": "usmansaleem", "createdAt": "2020-04-07T10:17:14Z", "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/rlpx/handshake/ecies/EncryptedMessage.java", "diffHunk": "@@ -57,19 +58,19 @@ public static Bytes decryptMsg(final Bytes msgBytes, final SECP256K1.PrivateKey\n \n     // Perform the decryption.\n     final ECIESEncryptionEngine decryptor =\n-        ECIESEncryptionEngine.forDecryption(ourKey, ephPubKey, iv);\n+        ECIESEncryptionEngine.forDecryption(nodeKey, ephPubKey, iv);\n     return decryptor.decrypt(encrypted);\n   }\n \n   /**\n    * Decrypts the ciphertext using our private key.\n    *\n    * @param msgBytes The ciphertext.\n-   * @param ourKey Our private key.\n+   * @param nodeKey Abstraction of this nodes private key & associated crypto operations\n    * @return The plaintext.\n    * @throws InvalidCipherTextException Thrown if decryption failed.\n    */\n-  public static Bytes decryptMsgEIP8(final Bytes msgBytes, final SECP256K1.PrivateKey ourKey)\n+  public static Bytes decryptMsgEIP8(final Bytes msgBytes, final NodeKey nodeKey)", "originalCommit": "d3a8736cc85aec01165b6a6cac54caec7abb8d29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxMDM4NQ==", "url": "https://github.com/hyperledger/besu/pull/666#discussion_r405210385", "bodyText": "I'd prefer not to. For 2 reasons:\nThinking \"nodeKey\" is explicit enough to indicate ownership (on some levels).\nSecondly, I'd hate for this class to imply the owner of the key which is doing the decryption - i.e. it simply needs a key to do the decryption - ownership of the key makes no difference as to the operation being conducted.", "author": "rain-on", "createdAt": "2020-04-08T01:43:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY5NzUzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE3NjY4MA==", "url": "https://github.com/hyperledger/besu/pull/666#discussion_r405176680", "bodyText": "final isn't needed on the interface fields", "author": "jframe", "createdAt": "2020-04-07T23:42:33Z", "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/rlpx/handshake/Handshaker.java", "diffHunk": "@@ -76,11 +77,11 @@\n    * <p>This method must throw an {@link IllegalStateException} exception if the handshake had\n    * already been prepared before, no matter if under the initiator or the responder role.\n    *\n-   * @param ourKeypair The keypair for our node identity.\n+   * @param nodeKey An object which represents our identity\n    * @param theirPubKey The public key of the node we're handshaking with.\n    * @throws IllegalStateException Indicates that preparation had already occured.\n    */\n-  void prepareInitiator(SECP256K1.KeyPair ourKeypair, SECP256K1.PublicKey theirPubKey);\n+  void prepareInitiator(final NodeKey nodeKey, SECP256K1.PublicKey theirPubKey);", "originalCommit": "d3a8736cc85aec01165b6a6cac54caec7abb8d29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwODkxMA==", "url": "https://github.com/hyperledger/besu/pull/666#discussion_r405208910", "bodyText": "done", "author": "rain-on", "createdAt": "2020-04-08T01:37:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE3NjY4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE3Njk5Ng==", "url": "https://github.com/hyperledger/besu/pull/666#discussion_r405176996", "bodyText": "final isn't needed on the interface fields", "author": "jframe", "createdAt": "2020-04-07T23:43:27Z", "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/rlpx/handshake/Handshaker.java", "diffHunk": "@@ -89,10 +90,10 @@\n    * <p>This method must throw an {@link IllegalStateException} exception if the handshake had\n    * already been prepared before, whether with the initiator or the responder role.\n    *\n-   * @param ourKeypair The keypair for our node identity.\n+   * @param nodeKey An object which represents our identity\n    * @throws IllegalStateException Indicates that preparation had already occured.\n    */\n-  void prepareResponder(SECP256K1.KeyPair ourKeypair);\n+  void prepareResponder(final NodeKey nodeKey);", "originalCommit": "d3a8736cc85aec01165b6a6cac54caec7abb8d29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxMDk2MQ==", "url": "https://github.com/hyperledger/besu/pull/666#discussion_r405210961", "bodyText": "done", "author": "rain-on", "createdAt": "2020-04-08T01:45:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE3Njk5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE3NzQ5Mw==", "url": "https://github.com/hyperledger/besu/pull/666#discussion_r405177493", "bodyText": "Can you also update the javadoc since this is no longer a keypair", "author": "jframe", "createdAt": "2020-04-07T23:45:02Z", "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/rlpx/handshake/ecies/InitiatorHandshakeMessageV1.java", "diffHunk": "@@ -95,11 +95,10 @@ public static InitiatorHandshakeMessageV1 create(\n    * Decodes this message.\n    *\n    * @param bytes The raw bytes.\n-   * @param keyPair Our keypair to calculat ECDH key agreements.\n+   * @param nodeKey Our keypair to calculat ECDH key agreements.", "originalCommit": "d3a8736cc85aec01165b6a6cac54caec7abb8d29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxMDYzMA==", "url": "https://github.com/hyperledger/besu/pull/666#discussion_r405210630", "bodyText": "done", "author": "rain-on", "createdAt": "2020-04-08T01:44:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE3NzQ5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE3ODMyMw==", "url": "https://github.com/hyperledger/besu/pull/666#discussion_r405178323", "bodyText": "Do we want to be more explicit here and call out that is the ECDH key agreement? I thinking we should.", "author": "jframe", "createdAt": "2020-04-07T23:47:42Z", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/NodeKey.java", "diffHunk": "@@ -17,11 +17,16 @@\n import org.hyperledger.besu.crypto.SECP256K1.PublicKey;\n import org.hyperledger.besu.crypto.SECP256K1.Signature;\n \n+import org.apache.tuweni.bytes.Bytes;\n import org.apache.tuweni.bytes.Bytes32;\n \n public interface NodeKey {\n \n   Signature sign(Bytes32 dataHash);\n \n   PublicKey getPublicKey();\n+\n+  Bytes32 calculateKeyAgreement(final PublicKey partyKey);", "originalCommit": "d3a8736cc85aec01165b6a6cac54caec7abb8d29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxMDc0OQ==", "url": "https://github.com/hyperledger/besu/pull/666#discussion_r405210749", "bodyText": "done", "author": "rain-on", "createdAt": "2020-04-08T01:44:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE3ODMyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE3OTAyOA==", "url": "https://github.com/hyperledger/besu/pull/666#discussion_r405179028", "bodyText": "Should this just be publicKey instead of partyKey? I don't know enough ECDH key agreements to say it should be, but elsewhere it seems to be just referred to as publicKey", "author": "jframe", "createdAt": "2020-04-07T23:49:51Z", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/NodeKey.java", "diffHunk": "@@ -17,11 +17,16 @@\n import org.hyperledger.besu.crypto.SECP256K1.PublicKey;\n import org.hyperledger.besu.crypto.SECP256K1.Signature;\n \n+import org.apache.tuweni.bytes.Bytes;\n import org.apache.tuweni.bytes.Bytes32;\n \n public interface NodeKey {\n \n   Signature sign(Bytes32 dataHash);\n \n   PublicKey getPublicKey();\n+\n+  Bytes32 calculateKeyAgreement(final PublicKey partyKey);", "originalCommit": "d3a8736cc85aec01165b6a6cac54caec7abb8d29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxMDgxMA==", "url": "https://github.com/hyperledger/besu/pull/666#discussion_r405210810", "bodyText": "done", "author": "rain-on", "createdAt": "2020-04-08T01:44:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE3OTAyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE3OTMzMg==", "url": "https://github.com/hyperledger/besu/pull/666#discussion_r405179332", "bodyText": "Thinking this should be calculateECIESKeyAgreement", "author": "jframe", "createdAt": "2020-04-07T23:50:52Z", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/BouncyCastleNodeKey.java", "diffHunk": "@@ -41,4 +51,23 @@ public Signature sign(final Bytes32 dataHash) {\n   public PublicKey getPublicKey() {\n     return nodeKeys.getPublicKey();\n   }\n+\n+  @Override\n+  public Bytes32 calculateKeyAgreement(final PublicKey partyKey) {\n+    return SECP256K1.calculateKeyAgreement(nodeKeys.getPrivateKey(), partyKey);\n+  }\n+\n+  @Override\n+  public Bytes calculateECIESAgreement(final SECP256K1.PublicKey ephPubKey) {", "originalCommit": "d3a8736cc85aec01165b6a6cac54caec7abb8d29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxMDY2Mg==", "url": "https://github.com/hyperledger/besu/pull/666#discussion_r405210662", "bodyText": "done", "author": "rain-on", "createdAt": "2020-04-08T01:44:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE3OTMzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4MDE5OQ==", "url": "https://github.com/hyperledger/besu/pull/666#discussion_r405180199", "bodyText": "This can be lower z", "author": "jframe", "createdAt": "2020-04-07T23:53:52Z", "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/rlpx/handshake/ecies/ECIESEncryptionEngine.java", "diffHunk": "@@ -82,41 +75,30 @@\n   private final byte[] iv;\n \n   private ECIESEncryptionEngine(\n-      final CipherParameters pubParam,\n-      final CipherParameters privParam,\n-      final SECP256K1.PublicKey ephPubKey,\n-      final byte[] iv) {\n+      final Bytes Z, final SECP256K1.PublicKey ephPubKey, final byte[] iv) {", "originalCommit": "d3a8736cc85aec01165b6a6cac54caec7abb8d29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwOTQ4OQ==", "url": "https://github.com/hyperledger/besu/pull/666#discussion_r405209489", "bodyText": "changed - but I wonder what it REALLY is .... changed to agreedSecret", "author": "rain-on", "createdAt": "2020-04-08T01:39:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4MDE5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5ODY4Ng==", "url": "https://github.com/hyperledger/besu/pull/666#discussion_r405198686", "bodyText": "Would be nicer if both of the key agreement functions were in SECP256k1 class", "author": "jframe", "createdAt": "2020-04-08T00:58:33Z", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/BouncyCastleNodeKey.java", "diffHunk": "@@ -41,4 +51,23 @@ public Signature sign(final Bytes32 dataHash) {\n   public PublicKey getPublicKey() {\n     return nodeKeys.getPublicKey();\n   }\n+\n+  @Override\n+  public Bytes32 calculateKeyAgreement(final PublicKey partyKey) {\n+    return SECP256K1.calculateKeyAgreement(nodeKeys.getPrivateKey(), partyKey);\n+  }\n+\n+  @Override\n+  public Bytes calculateECIESAgreement(final SECP256K1.PublicKey ephPubKey) {\n+    final ECDomainParameters dp = SECP256K1.CURVE;\n+\n+    final CipherParameters pubParam = new ECPublicKeyParameters(ephPubKey.asEcPoint(), dp);\n+    final CipherParameters privParam =\n+        new ECPrivateKeyParameters(nodeKeys.getPrivateKey().getD(), dp);\n+\n+    final BasicAgreement agree = new ECDHBasicAgreement();\n+    agree.init(privParam);\n+    final BigInteger z = agree.calculateAgreement(pubParam);\n+    return Bytes.wrap(BigIntegers.asUnsignedByteArray(agree.getFieldSize(), z));", "originalCommit": "d3a8736cc85aec01165b6a6cac54caec7abb8d29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwODY2OQ==", "url": "https://github.com/hyperledger/besu/pull/666#discussion_r405208669", "bodyText": "done", "author": "rain-on", "createdAt": "2020-04-08T01:36:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5ODY4Ng=="}], "type": "inlineReview"}, {"oid": "e6c4dd92f3deef924b295d9ce4a83af90a9306ab", "url": "https://github.com/hyperledger/besu/commit/e6c4dd92f3deef924b295d9ce4a83af90a9306ab", "message": "Post Review\n\nSigned-off-by: Trent Mohay <trent.mohay@consensys.net>", "committedDate": "2020-04-08T01:55:26Z", "type": "commit"}, {"oid": "6e44fecf96d80810f13671228dd54d6b3a2bd719", "url": "https://github.com/hyperledger/besu/commit/6e44fecf96d80810f13671228dd54d6b3a2bd719", "message": "Repair test failure\n\nSigned-off-by: Trent Mohay <trent.mohay@consensys.net>", "committedDate": "2020-04-08T03:49:52Z", "type": "commit"}, {"oid": "b94d3281d6aa71e2a5657b775964d6380dbe7134", "url": "https://github.com/hyperledger/besu/commit/b94d3281d6aa71e2a5657b775964d6380dbe7134", "message": "Merge remote-tracking branch 'upstream/master' into handshaker\n\nSigned-off-by: Trent Mohay <trent.mohay@consensys.net>", "committedDate": "2020-04-08T03:50:40Z", "type": "commit"}, {"oid": "b94d3281d6aa71e2a5657b775964d6380dbe7134", "url": "https://github.com/hyperledger/besu/commit/b94d3281d6aa71e2a5657b775964d6380dbe7134", "message": "Merge remote-tracking branch 'upstream/master' into handshaker\n\nSigned-off-by: Trent Mohay <trent.mohay@consensys.net>", "committedDate": "2020-04-08T03:50:40Z", "type": "forcePushed"}, {"oid": "620f99ff688e697783b9e5e602071112404ddd83", "url": "https://github.com/hyperledger/besu/commit/620f99ff688e697783b9e5e602071112404ddd83", "message": "fixed spotless\n\nSigned-off-by: Trent Mohay <trent.mohay@consensys.net>", "committedDate": "2020-04-08T03:58:03Z", "type": "commit"}]}