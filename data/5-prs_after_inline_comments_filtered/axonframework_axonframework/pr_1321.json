{"pr_number": 1321, "pr_title": "[#1187] Ability to configure all the SqlStatements used by JdbcEventStorageEngine", "pr_createdAt": "2020-01-20T10:23:49Z", "pr_url": "https://github.com/AxonFramework/AxonFramework/pull/1321", "timeline": [{"oid": "156c7f5c3664d09866831ab790cd2c7ed501981b", "url": "https://github.com/AxonFramework/AxonFramework/commit/156c7f5c3664d09866831ab790cd2c7ed501981b", "message": "Added the ability to configure all the SqlStatements used by JdbcEventStorageEngine", "committedDate": "2020-01-20T10:18:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5MjQyNg==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r368492426", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return a new builder for the event eventSchema\n          \n          \n            \n                 * @return a new builder for the event schema", "author": "smcvb", "createdAt": "2020-01-20T11:11:09Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/EventSchema.java", "diffHunk": "@@ -48,12 +66,27 @@ private EventSchema(Builder builder) {\n         payloadRevisionColumn = builder.payloadRevisionColumn;\n         payloadColumn = builder.payloadColumn;\n         metaDataColumn = builder.metaDataColumn;\n+        domainEventFields = builder.domainEventFields;\n+        trackedEventFields = builder.trackedEventFields;\n+        createTokenAtSqlStatement = builder.createTokenAtSqlStatement;\n+        appendEventsSqlStatement = builder.appendEventsSqlStatement;\n+        lastSequenceNumberForSqlStatement = builder.lastSequenceNumberForSqlStatement;\n+        createTailTokenSqlStatement = builder.createTailTokenSqlStatement;\n+        createHeadTokenSqlStatement = builder.createHeadTokenSqlStatement;\n+        appendSnapshotSqlStatement = builder.appendSnapshotSqlStatement;\n+        deleteSnapshotsSqlStatement = builder.deleteSnapshotsSqlStatement;\n+        fetchTrackedEventsSqlStatement = builder.fetchTrackedEventsSqlStatement;\n+        cleanGapsSqlStatement = builder.cleanGapsSqlStatement;\n+        readEventDataForAggregateSqlStatement = builder.readEventDataForAggregateSqlStatement;\n+        readSnapshotDataSqlStatement = builder.readSnapshotDataSqlStatement;\n+        readEventDataWithoutGapsSqlStatement = builder.readEventDataWithoutGapsSqlStatement;\n+        readEventDataWithGapsSqlStatement = builder.readEventDataWithGapsSqlStatement;\n     }\n \n     /**\n      * Returns a new {@link Builder} initialized with default settings.\n      *\n-     * @return a new builder for the event schema\n+     * @return a new builder for the event eventSchema", "originalCommit": "156c7f5c3664d09866831ab790cd2c7ed501981b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUwMjA2OA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r368502068", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * int)} a} for aggregate. Defaults to:\n          \n          \n            \n                     * int)} for aggregate. Defaults to:", "author": "smcvb", "createdAt": "2020-01-20T11:35:54Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/EventSchema.java", "diffHunk": "@@ -318,6 +561,241 @@ public Builder metaDataColumn(String metaDataColumn) {\n             return this;\n         }\n \n+        /**\n+         * Set a comma separated list of domain event column names to select from an event or snapshot entry. Defaults\n+         * to:\n+         * <p/>\n+         * {@code \"[eventIdentifierColumn], [aggregateIdentifierColumn], [sequenceNumberColumn], [typeColumn],\n+         * [timestampColumn], [payloadTypeColumn], [payloadRevisionColumn], [payloadColumn], [metaDataColumn]\" }\n+         * <p/>\n+         *\n+         * @return the modified Builder instance\n+         */\n+        public Builder domainEventFields(Function<EventSchema, String> domainEventFields) {\n+            this.domainEventFields = domainEventFields;\n+            return this;\n+        }\n+\n+        /**\n+         * Set a comma separated list of tracked domain event column names to select from an event entry. Defaults to:\n+         * <p/>\n+         * {@code \"[globalIndexColumn], [domainEventFields]\" }\n+         * <p/>\n+         *\n+         * @return the modified Builder instance\n+         */\n+        public Builder trackedEventFields(Function<EventSchema, String> trackedEventFields) {\n+            this.trackedEventFields = trackedEventFields;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the SqlStatement to be used on {@link JdbcEventStorageEngine#createTokenAt}. Defaults to:\n+         * <p/>\n+         * {@code \"SELECT min([globalIndexColumn]) - 1 FROM [domainEventTable] WHERE [timestampColumn] >= ?\" }\n+         * <p/>\n+         * <b>NOTE:</b> \"?\" is the Instant parameter from {@link JdbcEventStorageEngine#createTokenAt} and should\n+         * <b>always</b> be present for the SqlStatement to work.\n+         *\n+         * @return the modified Builder instance\n+         */\n+        public Builder createTokenAtSqlStatement(Function<EventSchema, String> createTokenAtSqlStatement) {\n+            this.createTokenAtSqlStatement = createTokenAtSqlStatement;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the SqlStatement to be used on {@link JdbcEventStorageEngine#appendEvents}. Defaults to:\n+         * <p/>\n+         * {@code \"INSERT INTO [domainEventTable] ([domainEventFields]) VALUES (?,?,?,?,?,?,?,?,?)\" }\n+         * <p/>\n+         * <b>NOTE:</b> each \"?\" is a domain event field from {@link EventSchema#domainEventFields()} and should\n+         * <b>always</b> be present for the SqlStatement to work.\n+         *\n+         * @return the modified Builder instance\n+         */\n+        public Builder appendEventsSqlStatement(Function<EventSchema, String> appendEventsSqlStatement) {\n+            this.appendEventsSqlStatement = appendEventsSqlStatement;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the SqlStatement to be used on {@link JdbcEventStorageEngine#lastSequenceNumberFor}. Defaults to:\n+         * <p/>\n+         * {@code \"SELECT max([sequenceNumberColumn]) FROM [domainEventTable] WHERE [aggregateIdentifierColumn] = ?\" }\n+         * <p/>\n+         * <b>NOTE:</b> \"?\" is the aggregateIdentifier parameter from {@link JdbcEventStorageEngine#lastSequenceNumberFor}\n+         * and should <b>always</b> be present for the SqlStatement to work.\n+         *\n+         * @return the modified Builder instance\n+         */\n+        public Builder lastSequenceNumberForSqlStatement(\n+                Function<EventSchema, String> lastSequenceNumberForSqlStatement) {\n+            this.lastSequenceNumberForSqlStatement = lastSequenceNumberForSqlStatement;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the SqlStatement to be used on {@link JdbcEventStorageEngine#createTailToken}. Defaults to:\n+         * <p/>\n+         * {@code \"SELECT min([globalIndexColumn]) - 1 FROM [domainEventTable]\" }\n+         * <p/>\n+         *\n+         * @return the modified Builder instance\n+         */\n+        public Builder createTailTokenSqlStatement(Function<EventSchema, String> createTailTokenSqlStatement) {\n+            this.createTailTokenSqlStatement = createTailTokenSqlStatement;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the SqlStatement to be used on {@link JdbcEventStorageEngine#createHeadToken}. Defaults to:\n+         * <p/>\n+         * {@code \"SELECT max([globalIndexColumn]) FROM [domainEventTable]\" }\n+         * <p/>\n+         *\n+         * @return the modified Builder instance\n+         */\n+        public Builder createHeadTokenSqlStatement(Function<EventSchema, String> createHeadTokenSqlStatement) {\n+            this.createHeadTokenSqlStatement = createHeadTokenSqlStatement;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the SqlStatement to be used on {@link JdbcEventStorageEngine#appendSnapshot}. Defaults to:\n+         * <p/>\n+         * {@code \"INSERT INTO [snapshotTable] ([domainEventFields]) VALUES (?,?,?,?,?,?,?,?,?)\" }\n+         * <p/>\n+         * <b>NOTE:</b> each \"?\" is a domain event field from {@link EventSchema#domainEventFields()} and should\n+         * <b>always</b> be present for the SqlStatement to work.\n+         *\n+         * @return the modified Builder instance\n+         */\n+        public Builder appendSnapshotSqlStatement(Function<EventSchema, String> appendSnapshotSqlStatement) {\n+            this.appendSnapshotSqlStatement = appendSnapshotSqlStatement;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the SqlStatement to be used on {@link JdbcEventStorageEngine#deleteSnapshots}. Defaults to:\n+         * <p/>\n+         * {@code \"DELETE FROM [snapshotTable] WHERE [aggregateIdentifierColumn] = ?1 AND [sequenceNumberColumn] < ?2\"\n+         * }\n+         * <p/>\n+         * <b>NOTE:</b> \"?1\" is the aggregateIdentifier and \"?2\" is the sequenceNumber parameters from {@link\n+         * JdbcEventStorageEngine#deleteSnapshots} and they should <b>always</b> be present for the SqlStatement to\n+         * work.\n+         *\n+         * @return the modified Builder instance\n+         */\n+        public Builder deleteSnapshotsSqlStatement(Function<EventSchema, String> deleteSnapshotsSqlStatement) {\n+            this.deleteSnapshotsSqlStatement = deleteSnapshotsSqlStatement;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the SqlStatement to be used on {@link JdbcEventStorageEngine#fetchTrackedEvents}. Defaults to:\n+         * <p/>\n+         * {@code \"SELECT min([globalIndexColumn]) FROM [domainEventTable] WHERE [globalIndexColumn] > ?\" }\n+         * <p/>\n+         * <b>NOTE:</b> \"?\" is based on the lastToken parameter from {@link JdbcEventStorageEngine#fetchTrackedEvents}\n+         * and should <b>always</b> be present for the SqlStatement to work.\n+         *\n+         * @return the modified Builder instance\n+         */\n+        public Builder fetchTrackedEventsSqlStatement(Function<EventSchema, String> fetchTrackedEventsSqlStatement) {\n+            this.fetchTrackedEventsSqlStatement = fetchTrackedEventsSqlStatement;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the SqlStatement to be used on internal cleanGaps operation. Defaults to:\n+         * <p/>\n+         * {@code \"SELECT [globalIndexColumn], [timestampColumn] FROM [domainEventTable] WHERE [globalIndexColumn] >= ?1\n+         * AND [globalIndexColumn] <= ?2\" }\n+         * <p/>\n+         * <b>NOTE:</b> \"?1\" and \"?2\" are taken from the {@link GapAwareTrackingToken#getGaps()} first and last.\n+         *\n+         * @return the modified Builder instance\n+         */\n+        public Builder cleanGapsSqlStatement(Function<EventSchema, String> cleanGapsSqlStatement) {\n+            this.cleanGapsSqlStatement = cleanGapsSqlStatement;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the SqlStatement to be used on {@link JdbcEventStorageEngine#readEventData(Connection, String, long,\n+         * int)} a} for aggregate. Defaults to:", "originalCommit": "156c7f5c3664d09866831ab790cd2c7ed501981b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUxMDEwMQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r368510101", "bodyText": "Hmmm... This pretty tightly couples SQL string with the prepared statement in terms of parameters. I'd go with approach that schema creates the statement with given parameters (aggregateIdentifier, and sequenceNumber in this case). What do you think?", "author": "m1l4n54v1c", "createdAt": "2020-01-20T11:56:33Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/JdbcEventStorageEngine.java", "diffHunk": "@@ -301,15 +302,12 @@ protected PreparedStatement appendSnapshot(Connection connection, DomainEventMes\n      * @param connection          The connection to the database.\n      * @param aggregateIdentifier The identifier of the aggregate whose snapshots to delete.\n      * @return A {@link PreparedStatement} that deletes all the aggregate's snapshots when executed.\n-     *\n      * @throws SQLException when an exception occurs while creating the prepared statement.\n      */\n     protected PreparedStatement deleteSnapshots(Connection connection, String aggregateIdentifier, long sequenceNumber)\n             throws SQLException {\n-        PreparedStatement preparedStatement = connection.prepareStatement(\n-                \"DELETE FROM \" + schema.snapshotTable() + \" WHERE \" + schema.aggregateIdentifierColumn() + \" = ? \"\n-                        + \"AND \" + schema.sequenceNumberColumn() + \" < ?\"\n-        );\n+        final String sql = schema.deleteSnapshotsSqlStatement();\n+        PreparedStatement preparedStatement = connection.prepareStatement(sql);\n         preparedStatement.setString(1, aggregateIdentifier);", "originalCommit": "156c7f5c3664d09866831ab790cd2c7ed501981b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUzMTk5MQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r369531991", "bodyText": "Changes are done as discussed.", "author": "lfgcampos", "createdAt": "2020-01-22T12:30:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUxMDEwMQ=="}], "type": "inlineReview"}, {"oid": "9ffbff71547c5820730ada02f72211bb595852b1", "url": "https://github.com/AxonFramework/AxonFramework/commit/9ffbff71547c5820730ada02f72211bb595852b1", "message": "Added a FunctionalInterface for building each Statement and made them part of the JdbcEventStorageEngine", "committedDate": "2020-01-22T12:26:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5Mzk5OQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r369993999", "bodyText": "I am missing the copyright statement which should be on top of this file.\nYou can add it to your Intellij env. by adding the copyright-template.xml file at the root folder of this project.", "author": "smcvb", "createdAt": "2020-01-23T08:54:57Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/AppendEventsStatementBuilder.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package org.axonframework.eventsourcing.eventstore.jdbc;", "originalCommit": "9ffbff71547c5820730ada02f72211bb595852b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5NDIxMQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r369994211", "bodyText": "This interface will require javadoc, as it's public code. Thus both on class level (with author and since tag) as well as the apply method.", "author": "smcvb", "createdAt": "2020-01-23T08:55:26Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/AppendEventsStatementBuilder.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package org.axonframework.eventsourcing.eventstore.jdbc;\n+\n+import org.axonframework.eventhandling.EventMessage;\n+import org.axonframework.serialization.Serializer;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.List;\n+\n+@FunctionalInterface", "originalCommit": "9ffbff71547c5820730ada02f72211bb595852b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5NDU4NQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r369994585", "bodyText": "What about we move these files to org.axonframework.eventsourcing.eventstore.jdbc.statements? Or at least a dedicated package.", "author": "smcvb", "createdAt": "2020-01-23T08:56:19Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/AppendSnapshotStatementBuilder.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package org.axonframework.eventsourcing.eventstore.jdbc;", "originalCommit": "9ffbff71547c5820730ada02f72211bb595852b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5NTEyNw==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r369995127", "bodyText": "Same copyright and javadoc remarks as with the previous file", "author": "smcvb", "createdAt": "2020-01-23T08:57:37Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/AppendSnapshotStatementBuilder.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package org.axonframework.eventsourcing.eventstore.jdbc;", "originalCommit": "9ffbff71547c5820730ada02f72211bb595852b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5NTI3OQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r369995279", "bodyText": "Same copyright, javadoc and packaging remarks as with the previous file", "author": "smcvb", "createdAt": "2020-01-23T08:57:56Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/CleanGapsStatementBuilder.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package org.axonframework.eventsourcing.eventstore.jdbc;", "originalCommit": "9ffbff71547c5820730ada02f72211bb595852b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5NTMzOQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r369995339", "bodyText": "Same copyright, javadoc and packaging remarks as with the previous file", "author": "smcvb", "createdAt": "2020-01-23T08:58:03Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/CreateHeadTokenStatementBuilder.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.axonframework.eventsourcing.eventstore.jdbc;", "originalCommit": "9ffbff71547c5820730ada02f72211bb595852b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5NTQwNA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r369995404", "bodyText": "Same copyright, javadoc and packaging remarks as with the previous file", "author": "smcvb", "createdAt": "2020-01-23T08:58:10Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/CreateTailTokenStatementBuilder.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.axonframework.eventsourcing.eventstore.jdbc;", "originalCommit": "9ffbff71547c5820730ada02f72211bb595852b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5NTQ5NA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r369995494", "bodyText": "Same copyright, javadoc and packaging remarks as with the previous file", "author": "smcvb", "createdAt": "2020-01-23T08:58:19Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/CreateTokenAtStatementBuilder.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package org.axonframework.eventsourcing.eventstore.jdbc;", "originalCommit": "9ffbff71547c5820730ada02f72211bb595852b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5NTU0OA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r369995548", "bodyText": "Same copyright, javadoc and packaging remarks as with the previous file", "author": "smcvb", "createdAt": "2020-01-23T08:58:27Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/DeleteSnapshotsStatementBuilder.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.axonframework.eventsourcing.eventstore.jdbc;", "originalCommit": "9ffbff71547c5820730ada02f72211bb595852b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAyNTAzNg==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r370025036", "bodyText": "Same copyright, javadoc and packaging remarks as with the previous file", "author": "smcvb", "createdAt": "2020-01-23T10:00:02Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/FetchTrackedEventsStatementBuilder.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.axonframework.eventsourcing.eventstore.jdbc;", "originalCommit": "9ffbff71547c5820730ada02f72211bb595852b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAyNTA5NA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r370025094", "bodyText": "Same copyright, javadoc and packaging remarks as with the previous file", "author": "smcvb", "createdAt": "2020-01-23T10:00:07Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/LastSequenceNumberForStatementBuilder.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.axonframework.eventsourcing.eventstore.jdbc;", "originalCommit": "9ffbff71547c5820730ada02f72211bb595852b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAyNTEzNQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r370025135", "bodyText": "Same copyright, javadoc and packaging remarks as with the previous file", "author": "smcvb", "createdAt": "2020-01-23T10:00:12Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/ReadEventDataForAggregateStatementBuilder.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package org.axonframework.eventsourcing.eventstore.jdbc;", "originalCommit": "9ffbff71547c5820730ada02f72211bb595852b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAyNTIwOA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r370025208", "bodyText": "Same copyright, javadoc and packaging remarks as with the previous file", "author": "smcvb", "createdAt": "2020-01-23T10:00:21Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/ReadEventDataWithGapsStatementBuilder.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.axonframework.eventsourcing.eventstore.jdbc;", "originalCommit": "9ffbff71547c5820730ada02f72211bb595852b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAyNTI3OA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r370025278", "bodyText": "Same copyright, javadoc and packaging remarks as with the previous file", "author": "smcvb", "createdAt": "2020-01-23T10:00:29Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/ReadSnapshotDataStatementBuilder.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.axonframework.eventsourcing.eventstore.jdbc;", "originalCommit": "9ffbff71547c5820730ada02f72211bb595852b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAyNTMyMw==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r370025323", "bodyText": "Same copyright, javadoc and packaging remarks as with the previous file", "author": "smcvb", "createdAt": "2020-01-23T10:00:35Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/ReadEventDataWithoutGapsStatementBuilder.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.axonframework.eventsourcing.eventstore.jdbc;", "originalCommit": "9ffbff71547c5820730ada02f72211bb595852b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAzMzQ0NQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r370033445", "bodyText": "As just discussed, it would be cleaner to move these lambdas to a utility class as static functions.", "author": "smcvb", "createdAt": "2020-01-23T10:16:46Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/JdbcEventStorageEngine.java", "diffHunk": "@@ -764,6 +835,356 @@ public void setGapCleaningThreshold(int gapCleaningThreshold) {\n         private int gapCleaningThreshold = DEFAULT_GAP_CLEANING_THRESHOLD;\n         private boolean extendedGapCheckEnabled = DEFAULT_EXTENDED_GAP_CHECK_ENABLED;\n \n+        private CreateTokenAtStatementBuilder createTokenAt = (connection, dateTime) -> {", "originalCommit": "9ffbff71547c5820730ada02f72211bb595852b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEzMjMwOQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r370132309", "bodyText": "As agreed, all the lambdas are now on a utility class.", "author": "lfgcampos", "createdAt": "2020-01-23T13:59:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAzMzQ0NQ=="}], "type": "inlineReview"}, {"oid": "df9dcae9ac5560efd6cc8a4f751bd4038e881f24", "url": "https://github.com/AxonFramework/AxonFramework/commit/df9dcae9ac5560efd6cc8a4f751bd4038e881f24", "message": "Moved the FunctionalInterfaces to a dedicated package, added javadoc and copyright", "committedDate": "2020-01-23T13:57:29Z", "type": "commit"}, {"oid": "2e1ec284e1467aa75ccc8d00a36509e2b110d812", "url": "https://github.com/AxonFramework/AxonFramework/commit/2e1ec284e1467aa75ccc8d00a36509e2b110d812", "message": "Replaced the lambdas by utility class functions and fixed/added javadocs", "committedDate": "2020-01-23T13:58:33Z", "type": "commit"}, {"oid": "21d06b6eb665a038754c04ac600797d94208960e", "url": "https://github.com/AxonFramework/AxonFramework/commit/21d06b6eb665a038754c04ac600797d94208960e", "message": "Removed not needed params on methods and adjusted javadoc", "committedDate": "2020-01-23T14:19:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUxMjM5OQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r370512399", "bodyText": "Nit: this piece of documentation should link to the util class I think, not the result of the builder.", "author": "smcvb", "createdAt": "2020-01-24T08:12:35Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/JdbcEventStorageEngine.java", "diffHunk": "@@ -123,6 +174,19 @@ protected JdbcEventStorageEngine(Builder builder) {\n      * <li>The {@code gapTimeout} defaults to an integer of size {@code 60000} (1 minute).</li>\n      * <li>The {@code gapCleaningThreshold} defaults to an integer of size {@code 250}.</li>\n      * <li>The {@code extendedGapCheckEnabled} defaults to {@code true}.</li>\n+     * <li>The {@code createTokenAt} defaults to {@link Builder#createTokenAt}.</li>", "originalCommit": "21d06b6eb665a038754c04ac600797d94208960e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUxMzg1NA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r370513854", "bodyText": "Nit: At the moment, the defaults of a Builder are not only defined on the builder() method, but also on class level of the Builder class.", "author": "smcvb", "createdAt": "2020-01-24T08:17:19Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/JdbcEventStorageEngine.java", "diffHunk": "@@ -764,6 +851,170 @@ public void setGapCleaningThreshold(int gapCleaningThreshold) {\n         private int gapCleaningThreshold = DEFAULT_GAP_CLEANING_THRESHOLD;", "originalCommit": "21d06b6eb665a038754c04ac600797d94208960e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUxNDQwMA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r370514400", "bodyText": "Doing a BuilderUtils#assertNonNull calls for every statement builder  would be a clean safe guard on these methods I think.", "author": "smcvb", "createdAt": "2020-01-24T08:19:08Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/JdbcEventStorageEngine.java", "diffHunk": "@@ -764,6 +851,170 @@ public void setGapCleaningThreshold(int gapCleaningThreshold) {\n         private int gapCleaningThreshold = DEFAULT_GAP_CLEANING_THRESHOLD;\n         private boolean extendedGapCheckEnabled = DEFAULT_EXTENDED_GAP_CHECK_ENABLED;\n \n+        private CreateTokenAtStatementBuilder createTokenAt = JdbcEventStorageEngineStatements::createTokenAt;\n+        private AppendEventsStatementBuilder appendEvents = JdbcEventStorageEngineStatements::appendEvents;\n+        private LastSequenceNumberForStatementBuilder lastSequenceNumberFor = JdbcEventStorageEngineStatements::lastSequenceNumberFor;\n+        private CreateTailTokenStatementBuilder createTailToken = JdbcEventStorageEngineStatements::createTailToken;\n+        private CreateHeadTokenStatementBuilder createHeadToken = JdbcEventStorageEngineStatements::createHeadToken;\n+        private AppendSnapshotStatementBuilder appendSnapshot = JdbcEventStorageEngineStatements::appendSnapshot;\n+        private DeleteSnapshotsStatementBuilder deleteSnapshots = JdbcEventStorageEngineStatements::deleteSnapshots;\n+        private FetchTrackedEventsStatementBuilder fetchTrackedEvents = JdbcEventStorageEngineStatements::fetchTrackedEvents;\n+        private CleanGapsStatementBuilder cleanGaps = JdbcEventStorageEngineStatements::cleanGaps;\n+        private ReadEventDataForAggregateStatementBuilder readEventDataForAggregate = JdbcEventStorageEngineStatements::readEventDataForAggregate;\n+        private ReadSnapshotDataStatementBuilder readSnapshotData = JdbcEventStorageEngineStatements::readSnapshotData;\n+        private ReadEventDataWithoutGapsStatementBuilder readEventDataWithoutGaps = JdbcEventStorageEngineStatements::readEventDataWithoutGaps;\n+        private ReadEventDataWithGapsStatementBuilder readEventDataWithGaps = JdbcEventStorageEngineStatements::readEventDataWithGaps;\n+\n+        /**\n+         * Set the PreparedStatement to be used on {@link JdbcEventStorageEngine#createTokenAt}. Defaults to {@link\n+         * JdbcEventStorageEngineStatements#createTokenAt(Connection, EventSchema, Instant)}.\n+         *\n+         * @return the modified Builder instance\n+         */\n+        public Builder createTokenAt(CreateTokenAtStatementBuilder createTokenAt) {\n+            this.createTokenAt = createTokenAt;", "originalCommit": "21d06b6eb665a038754c04ac600797d94208960e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUxNDYwMw==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r370514603", "bodyText": "Mega nit: the other builder methods in this Builder use @return the current Builder instance, for fluent interfacing as the javadoc return line. Minor thing, but I'd favor the consistency.", "author": "smcvb", "createdAt": "2020-01-24T08:19:56Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/JdbcEventStorageEngine.java", "diffHunk": "@@ -764,6 +851,170 @@ public void setGapCleaningThreshold(int gapCleaningThreshold) {\n         private int gapCleaningThreshold = DEFAULT_GAP_CLEANING_THRESHOLD;\n         private boolean extendedGapCheckEnabled = DEFAULT_EXTENDED_GAP_CHECK_ENABLED;\n \n+        private CreateTokenAtStatementBuilder createTokenAt = JdbcEventStorageEngineStatements::createTokenAt;\n+        private AppendEventsStatementBuilder appendEvents = JdbcEventStorageEngineStatements::appendEvents;\n+        private LastSequenceNumberForStatementBuilder lastSequenceNumberFor = JdbcEventStorageEngineStatements::lastSequenceNumberFor;\n+        private CreateTailTokenStatementBuilder createTailToken = JdbcEventStorageEngineStatements::createTailToken;\n+        private CreateHeadTokenStatementBuilder createHeadToken = JdbcEventStorageEngineStatements::createHeadToken;\n+        private AppendSnapshotStatementBuilder appendSnapshot = JdbcEventStorageEngineStatements::appendSnapshot;\n+        private DeleteSnapshotsStatementBuilder deleteSnapshots = JdbcEventStorageEngineStatements::deleteSnapshots;\n+        private FetchTrackedEventsStatementBuilder fetchTrackedEvents = JdbcEventStorageEngineStatements::fetchTrackedEvents;\n+        private CleanGapsStatementBuilder cleanGaps = JdbcEventStorageEngineStatements::cleanGaps;\n+        private ReadEventDataForAggregateStatementBuilder readEventDataForAggregate = JdbcEventStorageEngineStatements::readEventDataForAggregate;\n+        private ReadSnapshotDataStatementBuilder readSnapshotData = JdbcEventStorageEngineStatements::readSnapshotData;\n+        private ReadEventDataWithoutGapsStatementBuilder readEventDataWithoutGaps = JdbcEventStorageEngineStatements::readEventDataWithoutGaps;\n+        private ReadEventDataWithGapsStatementBuilder readEventDataWithGaps = JdbcEventStorageEngineStatements::readEventDataWithGaps;\n+\n+        /**\n+         * Set the PreparedStatement to be used on {@link JdbcEventStorageEngine#createTokenAt}. Defaults to {@link\n+         * JdbcEventStorageEngineStatements#createTokenAt(Connection, EventSchema, Instant)}.\n+         *\n+         * @return the modified Builder instance", "originalCommit": "21d06b6eb665a038754c04ac600797d94208960e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUxNTQyNQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1321#discussion_r370515425", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Class which holds the defaults PreparedStatement for use on {@link JdbcEventStorageEngine}.\n          \n          \n            \n             * Class which holds the default {@link PreparedStatement} builder methods for use in the {@link JdbcEventStorageEngine}.", "author": "smcvb", "createdAt": "2020-01-24T08:22:28Z", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/jdbc/statements/JdbcEventStorageEngineStatements.java", "diffHunk": "@@ -0,0 +1,414 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.eventsourcing.eventstore.jdbc.statements;\n+\n+import org.axonframework.eventhandling.DomainEventMessage;\n+import org.axonframework.eventhandling.EventMessage;\n+import org.axonframework.eventhandling.GapAwareTrackingToken;\n+import org.axonframework.eventhandling.TrackingToken;\n+import org.axonframework.eventsourcing.eventstore.jdbc.EventSchema;\n+import org.axonframework.eventsourcing.eventstore.jdbc.JdbcEventStorageEngine;\n+import org.axonframework.serialization.SerializedObject;\n+import org.axonframework.serialization.Serializer;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.time.Instant;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.SortedSet;\n+\n+import static org.axonframework.common.DateTimeUtils.formatInstant;\n+import static org.axonframework.eventhandling.EventUtils.asDomainEventMessage;\n+\n+/**\n+ * Class which holds the defaults PreparedStatement for use on {@link JdbcEventStorageEngine}.", "originalCommit": "21d06b6eb665a038754c04ac600797d94208960e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7815185b0e5953647ae486f9bff8fc648039a82b", "url": "https://github.com/AxonFramework/AxonFramework/commit/7815185b0e5953647ae486f9bff8fc648039a82b", "message": "Requested review changes, most of them javadoc related", "committedDate": "2020-01-24T09:32:11Z", "type": "commit"}]}