{"pr_number": 859, "pr_title": "Implement object store support for AliCloud", "pr_createdAt": "2020-05-18T12:30:07Z", "pr_url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/859", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA2NTYwMA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/859#discussion_r427065600", "bodyText": "Do we need all of these listed? Are not they already part of some library?\nHow we will keep the list up-to-date?", "author": "boyan-velinov", "createdAt": "2020-05-19T06:45:10Z", "path": "com.sap.cloud.lm.sl.cf.persistence/src/main/java/com/sap/cloud/lm/sl/cf/persistence/jclouds/providers/aliyun/AliOSSRegion.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun;\n+\n+import java.text.MessageFormat;\n+\n+public enum AliOSSRegion {\n+\n+    EU_CENTRAL_1(\"oss-eu-central-1\"),", "originalCommit": "0d06a8f7749e47514a9eb4b786a6939fb48405b7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA2NjIyNg==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/859#discussion_r427066226", "bodyText": "Extract it and rename if possible \"AliCloud\" to AlibabaCloud since this is the new official naming", "author": "boyan-velinov", "createdAt": "2020-05-19T06:46:40Z", "path": "com.sap.cloud.lm.sl.cf.persistence/src/main/java/com/sap/cloud/lm/sl/cf/persistence/jclouds/providers/aliyun/AliOSSProviderMetadata.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun;\n+\n+import com.google.auto.service.AutoService;\n+import org.jclouds.blobstore.reference.BlobStoreConstants;\n+import org.jclouds.providers.ProviderMetadata;\n+import org.jclouds.providers.internal.BaseProviderMetadata;\n+\n+import java.util.Properties;\n+\n+@AutoService(ProviderMetadata.class)\n+public class AliOSSProviderMetadata extends BaseProviderMetadata {\n+\n+    public AliOSSProviderMetadata() {\n+        this(builder());\n+    }\n+\n+    public AliOSSProviderMetadata(Builder builder) {\n+        super(builder);\n+    }\n+\n+    public static Builder builder() {\n+        return new AliOSSProviderMetadataBuilder();\n+    }\n+\n+    @Override\n+    public Builder toBuilder() {\n+        return builder().fromProviderMetadata(this);\n+    }\n+\n+    public static Properties defaultProperties() {\n+        Properties properties = new Properties();\n+        properties.setProperty(BlobStoreConstants.PROPERTY_BLOBSTORE_DIRECTORY_SUFFIX, BlobStoreConstants.DIRECTORY_SUFFIX_ROOT);\n+        return properties;\n+    }\n+\n+    public static class AliOSSProviderMetadataBuilder extends BaseProviderMetadata.Builder {\n+\n+        protected AliOSSProviderMetadataBuilder() {\n+            id(AliOSSApi.API_ID).name(\"AliCloud Object Storage Service\")", "originalCommit": "0d06a8f7749e47514a9eb4b786a6939fb48405b7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA2NzMyOA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/859#discussion_r427067328", "bodyText": "Extract it in a separate function because such large block in map() is hard to read.", "author": "boyan-velinov", "createdAt": "2020-05-19T06:49:18Z", "path": "com.sap.cloud.lm.sl.cf.persistence/src/main/java/com/sap/cloud/lm/sl/cf/persistence/jclouds/providers/aliyun/blobstore/AliOSSBlobStore.java", "diffHunk": "@@ -0,0 +1,327 @@\n+package com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun.blobstore;\n+\n+import com.aliyun.oss.OSS;\n+import com.aliyun.oss.model.GetObjectRequest;\n+import com.aliyun.oss.model.ListObjectsRequest;\n+import com.aliyun.oss.model.OSSObject;\n+import com.aliyun.oss.model.OSSObjectSummary;\n+import com.aliyun.oss.model.ObjectListing;\n+import com.aliyun.oss.model.ObjectMetadata;\n+import com.aliyun.oss.model.PutObjectRequest;\n+import com.aliyun.oss.model.PutObjectResult;\n+import com.google.common.base.Supplier;\n+import com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun.AliOSSApi;\n+import org.jclouds.blobstore.BlobStoreContext;\n+import org.jclouds.blobstore.domain.Blob;\n+import org.jclouds.blobstore.domain.BlobAccess;\n+import org.jclouds.blobstore.domain.BlobBuilder;\n+import org.jclouds.blobstore.domain.BlobMetadata;\n+import org.jclouds.blobstore.domain.ContainerAccess;\n+import org.jclouds.blobstore.domain.MultipartPart;\n+import org.jclouds.blobstore.domain.MultipartUpload;\n+import org.jclouds.blobstore.domain.PageSet;\n+import org.jclouds.blobstore.domain.StorageMetadata;\n+import org.jclouds.blobstore.domain.StorageType;\n+import org.jclouds.blobstore.domain.Tier;\n+import org.jclouds.blobstore.domain.internal.PageSetImpl;\n+import org.jclouds.blobstore.domain.internal.StorageMetadataImpl;\n+import org.jclouds.blobstore.internal.BaseBlobStore;\n+import org.jclouds.blobstore.options.CreateContainerOptions;\n+import org.jclouds.blobstore.options.GetOptions;\n+import org.jclouds.blobstore.options.ListContainerOptions;\n+import org.jclouds.blobstore.options.PutOptions;\n+import org.jclouds.blobstore.util.BlobUtils;\n+import org.jclouds.domain.Location;\n+import org.jclouds.io.ContentMetadata;\n+import org.jclouds.io.Payload;\n+import org.jclouds.io.PayloadSlicer;\n+import org.jclouds.location.suppliers.LocationsSupplier;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+@Singleton\n+public class AliOSSBlobStore extends BaseBlobStore {\n+\n+    private final AliOSSApi aliOSSApi;\n+\n+    @Inject\n+    protected AliOSSBlobStore(AliOSSApi aliOSSApi, BlobStoreContext context, BlobUtils blobUtils, Supplier<Location> defaultLocation,\n+                              LocationsSupplier locations, PayloadSlicer slicer) {\n+        super(context, blobUtils, defaultLocation, locations, slicer);\n+        this.aliOSSApi = aliOSSApi;\n+    }\n+\n+    @Override\n+    public boolean containerExists(String container) {\n+        return doOssOperation(oss -> oss.doesBucketExist(container));\n+    }\n+\n+    @Override\n+    public PageSet<? extends StorageMetadata> list(String container, ListContainerOptions options) {\n+        return doOssOperation(oss -> {\n+            ListObjectsRequest request = toListObjectRequest(container, options);\n+            ObjectListing objectListing = oss.listObjects(request);\n+            List<StorageMetadata> storageMetadataList = objectListing.getObjectSummaries()\n+                                                                     .stream()\n+                                                                     .map(ossObjectSummary -> {", "originalCommit": "0d06a8f7749e47514a9eb4b786a6939fb48405b7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA2ODI0NA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/859#discussion_r427068244", "bodyText": "Can we rely on that logic \".endsWith(\"/\") ? StorageType.FOLDER\" ...\nIs there a possibility to have folder without / in the end.\nCan we check with other native oss function.\nAlso if this is the only option, let's use some contstant, I guess there it is something existing, that represent file separator.", "author": "boyan-velinov", "createdAt": "2020-05-19T06:51:25Z", "path": "com.sap.cloud.lm.sl.cf.persistence/src/main/java/com/sap/cloud/lm/sl/cf/persistence/jclouds/providers/aliyun/blobstore/AliOSSBlobStore.java", "diffHunk": "@@ -0,0 +1,327 @@\n+package com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun.blobstore;\n+\n+import com.aliyun.oss.OSS;\n+import com.aliyun.oss.model.GetObjectRequest;\n+import com.aliyun.oss.model.ListObjectsRequest;\n+import com.aliyun.oss.model.OSSObject;\n+import com.aliyun.oss.model.OSSObjectSummary;\n+import com.aliyun.oss.model.ObjectListing;\n+import com.aliyun.oss.model.ObjectMetadata;\n+import com.aliyun.oss.model.PutObjectRequest;\n+import com.aliyun.oss.model.PutObjectResult;\n+import com.google.common.base.Supplier;\n+import com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun.AliOSSApi;\n+import org.jclouds.blobstore.BlobStoreContext;\n+import org.jclouds.blobstore.domain.Blob;\n+import org.jclouds.blobstore.domain.BlobAccess;\n+import org.jclouds.blobstore.domain.BlobBuilder;\n+import org.jclouds.blobstore.domain.BlobMetadata;\n+import org.jclouds.blobstore.domain.ContainerAccess;\n+import org.jclouds.blobstore.domain.MultipartPart;\n+import org.jclouds.blobstore.domain.MultipartUpload;\n+import org.jclouds.blobstore.domain.PageSet;\n+import org.jclouds.blobstore.domain.StorageMetadata;\n+import org.jclouds.blobstore.domain.StorageType;\n+import org.jclouds.blobstore.domain.Tier;\n+import org.jclouds.blobstore.domain.internal.PageSetImpl;\n+import org.jclouds.blobstore.domain.internal.StorageMetadataImpl;\n+import org.jclouds.blobstore.internal.BaseBlobStore;\n+import org.jclouds.blobstore.options.CreateContainerOptions;\n+import org.jclouds.blobstore.options.GetOptions;\n+import org.jclouds.blobstore.options.ListContainerOptions;\n+import org.jclouds.blobstore.options.PutOptions;\n+import org.jclouds.blobstore.util.BlobUtils;\n+import org.jclouds.domain.Location;\n+import org.jclouds.io.ContentMetadata;\n+import org.jclouds.io.Payload;\n+import org.jclouds.io.PayloadSlicer;\n+import org.jclouds.location.suppliers.LocationsSupplier;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+@Singleton\n+public class AliOSSBlobStore extends BaseBlobStore {\n+\n+    private final AliOSSApi aliOSSApi;\n+\n+    @Inject\n+    protected AliOSSBlobStore(AliOSSApi aliOSSApi, BlobStoreContext context, BlobUtils blobUtils, Supplier<Location> defaultLocation,\n+                              LocationsSupplier locations, PayloadSlicer slicer) {\n+        super(context, blobUtils, defaultLocation, locations, slicer);\n+        this.aliOSSApi = aliOSSApi;\n+    }\n+\n+    @Override\n+    public boolean containerExists(String container) {\n+        return doOssOperation(oss -> oss.doesBucketExist(container));\n+    }\n+\n+    @Override\n+    public PageSet<? extends StorageMetadata> list(String container, ListContainerOptions options) {\n+        return doOssOperation(oss -> {\n+            ListObjectsRequest request = toListObjectRequest(container, options);\n+            ObjectListing objectListing = oss.listObjects(request);\n+            List<StorageMetadata> storageMetadataList = objectListing.getObjectSummaries()\n+                                                                     .stream()\n+                                                                     .map(ossObjectSummary -> {\n+                StorageType storageType = ossObjectSummary.getKey()\n+                                                          .endsWith(\"/\") ? StorageType.FOLDER : StorageType.BLOB;", "originalCommit": "0d06a8f7749e47514a9eb4b786a6939fb48405b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI2MjkzOA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/859#discussion_r440262938", "bodyText": "will remove it at all", "author": "radoslav-d", "createdAt": "2020-06-15T15:32:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA2ODI0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA2OTg4NQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/859#discussion_r427069885", "bodyText": "What is that URI?", "author": "boyan-velinov", "createdAt": "2020-05-19T06:55:05Z", "path": "com.sap.cloud.lm.sl.cf.persistence/src/main/java/com/sap/cloud/lm/sl/cf/persistence/jclouds/providers/aliyun/AliOSSApiMetadata.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun;\n+\n+import com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun.blobstore.config.AliOSSBlobStoreContextModule;\n+import org.jclouds.apis.ApiMetadata;\n+import org.jclouds.apis.internal.BaseApiMetadata;\n+import org.jclouds.blobstore.internal.BlobStoreContextImpl;\n+import org.jclouds.rest.internal.BaseHttpApiMetadata;\n+\n+import java.net.URI;\n+import java.util.Properties;\n+\n+public class AliOSSApiMetadata extends BaseApiMetadata {\n+\n+    public AliOSSApiMetadata() {\n+        this(new AliOSSApiMetadataBuilder());\n+    }\n+\n+    protected AliOSSApiMetadata(Builder builder) {\n+        super(builder);\n+    }\n+\n+    @Override\n+    public Builder toBuilder() {\n+        return new AliOSSApiMetadataBuilder().fromApiMetadata(this);\n+    }\n+\n+    public static Properties defaultProperties() {\n+        return BaseHttpApiMetadata.defaultProperties();\n+    }\n+\n+    public static class AliOSSApiMetadataBuilder extends BaseApiMetadata.Builder<AliOSSApiMetadataBuilder> {\n+\n+        protected AliOSSApiMetadataBuilder() {\n+            id(AliOSSApi.API_ID).name(\"AliCloud Object Storage Service API\")\n+                                .identityName(\"Access Key ID\")\n+                                .credentialName(\"Secret Access Key\")\n+                                .documentation(URI.create(\"https://help.aliyun.com/document_detail/oss/api-reference/abstract.html\"))", "originalCommit": "0d06a8f7749e47514a9eb4b786a6939fb48405b7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA3MDEyOA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/859#discussion_r427070128", "bodyText": "What is that URI?\nIs there will be a problem if the landscape does not have access to the internet and accessing this one?", "author": "boyan-velinov", "createdAt": "2020-05-19T06:55:39Z", "path": "com.sap.cloud.lm.sl.cf.persistence/src/main/java/com/sap/cloud/lm/sl/cf/persistence/jclouds/providers/aliyun/AliOSSApiMetadata.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun;\n+\n+import com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun.blobstore.config.AliOSSBlobStoreContextModule;\n+import org.jclouds.apis.ApiMetadata;\n+import org.jclouds.apis.internal.BaseApiMetadata;\n+import org.jclouds.blobstore.internal.BlobStoreContextImpl;\n+import org.jclouds.rest.internal.BaseHttpApiMetadata;\n+\n+import java.net.URI;\n+import java.util.Properties;\n+\n+public class AliOSSApiMetadata extends BaseApiMetadata {\n+\n+    public AliOSSApiMetadata() {\n+        this(new AliOSSApiMetadataBuilder());\n+    }\n+\n+    protected AliOSSApiMetadata(Builder builder) {\n+        super(builder);\n+    }\n+\n+    @Override\n+    public Builder toBuilder() {\n+        return new AliOSSApiMetadataBuilder().fromApiMetadata(this);\n+    }\n+\n+    public static Properties defaultProperties() {\n+        return BaseHttpApiMetadata.defaultProperties();\n+    }\n+\n+    public static class AliOSSApiMetadataBuilder extends BaseApiMetadata.Builder<AliOSSApiMetadataBuilder> {\n+\n+        protected AliOSSApiMetadataBuilder() {\n+            id(AliOSSApi.API_ID).name(\"AliCloud Object Storage Service API\")\n+                                .identityName(\"Access Key ID\")\n+                                .credentialName(\"Secret Access Key\")\n+                                .documentation(URI.create(\"https://help.aliyun.com/document_detail/oss/api-reference/abstract.html\"))\n+                                .defaultEndpoint(\"http://oss.aliyuncs.com\")", "originalCommit": "0d06a8f7749e47514a9eb4b786a6939fb48405b7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA3MTEyOQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/859#discussion_r427071129", "bodyText": "Are you sure about http schema and not https?", "author": "boyan-velinov", "createdAt": "2020-05-19T06:57:52Z", "path": "com.sap.cloud.lm.sl.cf.persistence/src/main/java/com/sap/cloud/lm/sl/cf/persistence/jclouds/providers/aliyun/AliOSSRegion.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun;\n+\n+import java.text.MessageFormat;\n+\n+public enum AliOSSRegion {\n+\n+    EU_CENTRAL_1(\"oss-eu-central-1\"),\n+    CN_HANGZHOU(\"oss-cn-hangzhou\"),\n+    CN_SHANGHAI(\"oss-cn-shanghai\"),\n+    CN_QINGDAO(\"oss-cn-qingdao\"),\n+    CN_BEIJING(\"oss-cn-beijing\"),\n+    CN_ZHANGJIAKOU(\"oss-cn-zhangjiakou\"),\n+    CN_HUHEHAOTE(\"oss-cn-huhehaote\"),\n+    CN_SHENZHEN(\"oss-cn-shenzhen\"),\n+    CN_HEYUAN(\"oss-cn-heyuan\"),\n+    CN_CHENGDU(\"oss-cn-chengdu\"),\n+    CH_HONGKONG(\"oss-cn-hongkong\"),\n+    US_WEST_1(\"oss-us-west-1\"),\n+    US_EAST_1(\"oss-us-east-1\"),\n+    AP_SOUTHEAST_1(\"oss-ap-southeast-1\"),\n+    AP_SOUTHEAST_2(\"oss-ap-southeast-2\"),\n+    AP_SOUTHEAST_3(\"oss-ap-southeast-3\"),\n+    AP_SOUTHEAST_5(\"oss-ap-southeast-5\"),\n+    AP_NORTHEAST_1(\"oss-ap-northeast-1\"),\n+    AP_SOUTH_1(\"oss-ap-south-1\"),\n+    EU_WEST_1(\"oss-eu-west-1\"),\n+    ME_EAST_1(\"oss-me-east-1\");\n+\n+\n+    static final String ALI_OSS_DOMAIN = \"aliyuncs.com\";\n+    private final String region;\n+\n+    AliOSSRegion(String region) {\n+        this.region = region;\n+    }\n+\n+    public String getRegion() {\n+        return region;\n+    }\n+\n+    public String getEndpoint() {\n+        return MessageFormat.format(\"http://{0}.{1}\", region, ALI_OSS_DOMAIN);", "originalCommit": "0d06a8f7749e47514a9eb4b786a6939fb48405b7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzOTU4MA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/859#discussion_r427139580", "bodyText": "Is it a problem if we call objectMetadata.setCacheControl(null)\nThe same from below ?", "author": "boyan-velinov", "createdAt": "2020-05-19T08:54:52Z", "path": "com.sap.cloud.lm.sl.cf.persistence/src/main/java/com/sap/cloud/lm/sl/cf/persistence/jclouds/providers/aliyun/blobstore/AliOSSBlobStore.java", "diffHunk": "@@ -0,0 +1,327 @@\n+package com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun.blobstore;\n+\n+import com.aliyun.oss.OSS;\n+import com.aliyun.oss.model.GetObjectRequest;\n+import com.aliyun.oss.model.ListObjectsRequest;\n+import com.aliyun.oss.model.OSSObject;\n+import com.aliyun.oss.model.OSSObjectSummary;\n+import com.aliyun.oss.model.ObjectListing;\n+import com.aliyun.oss.model.ObjectMetadata;\n+import com.aliyun.oss.model.PutObjectRequest;\n+import com.aliyun.oss.model.PutObjectResult;\n+import com.google.common.base.Supplier;\n+import com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun.AliOSSApi;\n+import org.jclouds.blobstore.BlobStoreContext;\n+import org.jclouds.blobstore.domain.Blob;\n+import org.jclouds.blobstore.domain.BlobAccess;\n+import org.jclouds.blobstore.domain.BlobBuilder;\n+import org.jclouds.blobstore.domain.BlobMetadata;\n+import org.jclouds.blobstore.domain.ContainerAccess;\n+import org.jclouds.blobstore.domain.MultipartPart;\n+import org.jclouds.blobstore.domain.MultipartUpload;\n+import org.jclouds.blobstore.domain.PageSet;\n+import org.jclouds.blobstore.domain.StorageMetadata;\n+import org.jclouds.blobstore.domain.StorageType;\n+import org.jclouds.blobstore.domain.Tier;\n+import org.jclouds.blobstore.domain.internal.PageSetImpl;\n+import org.jclouds.blobstore.domain.internal.StorageMetadataImpl;\n+import org.jclouds.blobstore.internal.BaseBlobStore;\n+import org.jclouds.blobstore.options.CreateContainerOptions;\n+import org.jclouds.blobstore.options.GetOptions;\n+import org.jclouds.blobstore.options.ListContainerOptions;\n+import org.jclouds.blobstore.options.PutOptions;\n+import org.jclouds.blobstore.util.BlobUtils;\n+import org.jclouds.domain.Location;\n+import org.jclouds.io.ContentMetadata;\n+import org.jclouds.io.Payload;\n+import org.jclouds.io.PayloadSlicer;\n+import org.jclouds.location.suppliers.LocationsSupplier;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+@Singleton\n+public class AliOSSBlobStore extends BaseBlobStore {\n+\n+    private final AliOSSApi aliOSSApi;\n+\n+    @Inject\n+    protected AliOSSBlobStore(AliOSSApi aliOSSApi, BlobStoreContext context, BlobUtils blobUtils, Supplier<Location> defaultLocation,\n+                              LocationsSupplier locations, PayloadSlicer slicer) {\n+        super(context, blobUtils, defaultLocation, locations, slicer);\n+        this.aliOSSApi = aliOSSApi;\n+    }\n+\n+    @Override\n+    public boolean containerExists(String container) {\n+        return doOssOperation(oss -> oss.doesBucketExist(container));\n+    }\n+\n+    @Override\n+    public PageSet<? extends StorageMetadata> list(String container, ListContainerOptions options) {\n+        return doOssOperation(oss -> {\n+            ListObjectsRequest request = toListObjectRequest(container, options);\n+            ObjectListing objectListing = oss.listObjects(request);\n+            List<StorageMetadata> storageMetadataList = objectListing.getObjectSummaries()\n+                                                                     .stream()\n+                                                                     .map(ossObjectSummary -> {\n+                StorageType storageType = ossObjectSummary.getKey()\n+                                                          .endsWith(\"/\") ? StorageType.FOLDER : StorageType.BLOB;\n+                ObjectMetadata metadata = oss.getObjectMetadata(container, ossObjectSummary.getKey());\n+                URI url = getPresignedUriForObject(oss, ossObjectSummary);\n+                return new StorageMetadataImpl(storageType, ossObjectSummary.getKey(), ossObjectSummary.getKey(), defaultLocation.get(),\n+                                               url, ossObjectSummary.getETag(), ossObjectSummary.getLastModified(),\n+                                               ossObjectSummary.getLastModified(), metadata.getUserMetadata(), ossObjectSummary.getSize(),\n+                                               Tier.STANDARD);\n+            }).collect(Collectors.toList());\n+            return new PageSetImpl<>(storageMetadataList, objectListing.getNextMarker());\n+        });\n+    }\n+\n+    @Override\n+    public boolean blobExists(String container, String name) {\n+        return doOssOperation(oss -> oss.doesObjectExist(container, name));\n+    }\n+\n+    @Override\n+    public String putBlob(String container, Blob blob) {\n+        return doOssOperation(oss -> {\n+            try {\n+                ObjectMetadata objectMetadata = createObjectMetadataFromBlob(blob);\n+                PutObjectRequest request = new PutObjectRequest(container, blob.getMetadata()\n+                                                                               .getProviderId(), blob.getPayload()\n+                                                                                                     .openStream(), objectMetadata);\n+                PutObjectResult result = oss.putObject(request);\n+                return result.getETag();\n+            } catch (IOException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public String putBlob(String container, Blob blob, PutOptions options) {\n+        return putBlob(container, blob);\n+    }\n+\n+    @Override\n+    public Blob getBlob(String container, String name, GetOptions options) {\n+        return doOssOperation(oss -> {\n+            GetObjectRequest req = toGetObjectRequest(container, name, options);\n+            OSSObject object = oss.getObject(req);\n+            return convertToBlob(object);\n+        }, false);\n+\n+    }\n+\n+    @Override\n+    public void removeBlob(String container, String name) {\n+        doOssOperation(oss -> {\n+            oss.deleteObject(container, name);\n+            return null;\n+        });\n+    }\n+\n+    private <R> R doOssOperation(Function<OSS, R> function) {\n+        return doOssOperation(function, true);\n+    }\n+\n+    private <R> R doOssOperation(Function<OSS, R> function, boolean shutdownClient) {\n+        OSS ossClient = aliOSSApi.getOSSClient();\n+        R result = function.apply(ossClient);\n+        if (shutdownClient) {\n+            ossClient.shutdown();\n+        }\n+        return result;\n+    }\n+\n+    private GetObjectRequest toGetObjectRequest(String container, String name, GetOptions options) {\n+        GetObjectRequest request = new GetObjectRequest(container, name);\n+        if (options.getIfModifiedSince() != null) {\n+            request.setModifiedSinceConstraint(options.getIfModifiedSince());\n+        }\n+        if (!options.getRanges()\n+                    .isEmpty()) {\n+            String[] ranges = options.getRanges().get(0).split(\"-\");\n+            long start = Integer.parseInt(ranges[0]);\n+            long end = Integer.parseInt(ranges[1]);\n+            request.setRange(start, end);\n+        }\n+        return request;\n+    }\n+\n+    private URI getPresignedUriForObject(OSS oss, OSSObjectSummary ossObjectSummary) {\n+        Calendar time = Calendar.getInstance();\n+        time.set(Calendar.HOUR, time.get(Calendar.HOUR) + 1);\n+        try {\n+            return oss.generatePresignedUrl(ossObjectSummary.getBucketName(), ossObjectSummary.getKey(), time.getTime())\n+                .toURI();\n+        } catch (URISyntaxException e) {\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n+    private ListObjectsRequest toListObjectRequest(String container, ListContainerOptions options) {\n+        ListObjectsRequest request = new ListObjectsRequest(container);\n+        if (options.getMaxResults() != null) {\n+            request.setMaxKeys(options.getMaxResults());\n+        }\n+        if (options.getMarker() != null) {\n+            request.setMarker(options.getMarker());\n+        }\n+        return request;\n+    }\n+\n+    private ObjectMetadata createObjectMetadataFromBlob(Blob blob) {\n+        ObjectMetadata objectMetadata = new ObjectMetadata();\n+        ContentMetadata blobContentMetadata = blob.getMetadata()\n+                                                  .getContentMetadata();\n+        if (blobContentMetadata.getCacheControl() != null) {\n+            objectMetadata.setCacheControl(blobContentMetadata.getCacheControl());", "originalCommit": "0d06a8f7749e47514a9eb4b786a6939fb48405b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI2NDEyOA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/859#discussion_r440264128", "bodyText": "I am afraid we may override default values with null, which may result in NPE in a corner case", "author": "radoslav-d", "createdAt": "2020-06-15T15:34:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzOTU4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE0MDcxMg==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/859#discussion_r427140712", "bodyText": "Is that true always?\nCan we read the service binding and set it in ObjectStoreServiceInfoCreator ::createServiceInfoForAliCloud()", "author": "boyan-velinov", "createdAt": "2020-05-19T08:56:28Z", "path": "com.sap.cloud.lm.sl.cf.persistence/src/main/java/com/sap/cloud/lm/sl/cf/persistence/jclouds/providers/aliyun/blobstore/config/AliOSSBlobStoreContextModule.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun.blobstore.config;\n+\n+import com.google.inject.AbstractModule;\n+import com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun.AliOSSRegion;\n+import com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun.blobstore.AliOSSBlobStore;\n+import com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun.blobstore.AliOSSLocationsSupplier;\n+import com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun.blobstore.AliOSSRegionIdsSupplier;\n+import com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun.blobstore.internal.AliOSSBlobBuilder;\n+import org.jclouds.blobstore.BlobStore;\n+import org.jclouds.blobstore.attr.ConsistencyModel;\n+import org.jclouds.blobstore.domain.BlobBuilder;\n+import org.jclouds.blobstore.util.BlobUtils;\n+import org.jclouds.blobstore.util.internal.BlobUtilsImpl;\n+import org.jclouds.location.suppliers.LocationsSupplier;\n+import org.jclouds.location.suppliers.RegionIdsSupplier;\n+\n+public class AliOSSBlobStoreContextModule extends AbstractModule {\n+\n+    @Override\n+    protected void configure() {\n+        bind(BlobStore.class).to(AliOSSBlobStore.class);\n+        bind(BlobBuilder.class).to(AliOSSBlobBuilder.class);\n+        bind(ConsistencyModel.class).toInstance(ConsistencyModel.EVENTUAL);\n+        bind(AliOSSRegion.class).toInstance(AliOSSRegion.EU_CENTRAL_1);", "originalCommit": "0d06a8f7749e47514a9eb4b786a6939fb48405b7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE0NDQ5OQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/859#discussion_r427144499", "bodyText": "Why not to use ConsistencyModel.STRICT\nIn my understandings with eventual consisntency we could not read blobs immediately some cases which could be a problem when we store something and try to read it afterwards.\nFor detais about consistency, check CAP theorem", "author": "boyan-velinov", "createdAt": "2020-05-19T09:02:11Z", "path": "com.sap.cloud.lm.sl.cf.persistence/src/main/java/com/sap/cloud/lm/sl/cf/persistence/jclouds/providers/aliyun/blobstore/config/AliOSSBlobStoreContextModule.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun.blobstore.config;\n+\n+import com.google.inject.AbstractModule;\n+import com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun.AliOSSRegion;\n+import com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun.blobstore.AliOSSBlobStore;\n+import com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun.blobstore.AliOSSLocationsSupplier;\n+import com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun.blobstore.AliOSSRegionIdsSupplier;\n+import com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun.blobstore.internal.AliOSSBlobBuilder;\n+import org.jclouds.blobstore.BlobStore;\n+import org.jclouds.blobstore.attr.ConsistencyModel;\n+import org.jclouds.blobstore.domain.BlobBuilder;\n+import org.jclouds.blobstore.util.BlobUtils;\n+import org.jclouds.blobstore.util.internal.BlobUtilsImpl;\n+import org.jclouds.location.suppliers.LocationsSupplier;\n+import org.jclouds.location.suppliers.RegionIdsSupplier;\n+\n+public class AliOSSBlobStoreContextModule extends AbstractModule {\n+\n+    @Override\n+    protected void configure() {\n+        bind(BlobStore.class).to(AliOSSBlobStore.class);\n+        bind(BlobBuilder.class).to(AliOSSBlobBuilder.class);\n+        bind(ConsistencyModel.class).toInstance(ConsistencyModel.EVENTUAL);", "originalCommit": "0d06a8f7749e47514a9eb4b786a6939fb48405b7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1302d4b427ddf5bc0c50bd4cb09994bbdc4a11c9", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/1302d4b427ddf5bc0c50bd4cb09994bbdc4a11c9", "message": "Implement object store support for AliCloud\n\nImplement JClouds BlobStore API using the Aliyun SDK for blob storage.\nJIRA: LMCROSSITXSADEPLOY-1889", "committedDate": "2020-06-03T09:52:32Z", "type": "forcePushed"}, {"oid": "027bcc07587efb1ddd1f1adb49f26a36c9e9983e", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/027bcc07587efb1ddd1f1adb49f26a36c9e9983e", "message": "Add dynamic endpoint resolution for OSS client\n\nJIRA: LMCROSSITXSADEPLOY-1889", "committedDate": "2020-06-17T08:19:35Z", "type": "forcePushed"}, {"oid": "1a1797eda1caa52c9ff25c351393f053bb7abc3d", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/1a1797eda1caa52c9ff25c351393f053bb7abc3d", "message": "Add dynamic endpoint resolution for OSS client\n\nJIRA: LMCROSSITXSADEPLOY-1889", "committedDate": "2020-06-17T09:22:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg4ODM4NA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/859#discussion_r446888384", "bodyText": "Throw SLException instead.", "author": "IvanBorislavovDimitrov", "createdAt": "2020-06-29T11:09:20Z", "path": "com.sap.cloud.lm.sl.cf.persistence/src/main/java/com/sap/cloud/lm/sl/cf/persistence/jclouds/providers/aliyun/blobstore/AliOSSBlobStore.java", "diffHunk": "@@ -0,0 +1,328 @@\n+package com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun.blobstore;\n+\n+import com.aliyun.oss.OSS;\n+import com.aliyun.oss.model.GetObjectRequest;\n+import com.aliyun.oss.model.ListObjectsRequest;\n+import com.aliyun.oss.model.OSSObject;\n+import com.aliyun.oss.model.OSSObjectSummary;\n+import com.aliyun.oss.model.ObjectListing;\n+import com.aliyun.oss.model.ObjectMetadata;\n+import com.aliyun.oss.model.PutObjectRequest;\n+import com.aliyun.oss.model.PutObjectResult;\n+import com.google.common.base.Supplier;\n+import com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun.AliOSSApi;\n+import org.jclouds.blobstore.BlobStoreContext;\n+import org.jclouds.blobstore.domain.Blob;\n+import org.jclouds.blobstore.domain.BlobAccess;\n+import org.jclouds.blobstore.domain.BlobBuilder;\n+import org.jclouds.blobstore.domain.BlobMetadata;\n+import org.jclouds.blobstore.domain.ContainerAccess;\n+import org.jclouds.blobstore.domain.MultipartPart;\n+import org.jclouds.blobstore.domain.MultipartUpload;\n+import org.jclouds.blobstore.domain.PageSet;\n+import org.jclouds.blobstore.domain.StorageMetadata;\n+import org.jclouds.blobstore.domain.StorageType;\n+import org.jclouds.blobstore.domain.Tier;\n+import org.jclouds.blobstore.domain.internal.PageSetImpl;\n+import org.jclouds.blobstore.domain.internal.StorageMetadataImpl;\n+import org.jclouds.blobstore.internal.BaseBlobStore;\n+import org.jclouds.blobstore.options.CreateContainerOptions;\n+import org.jclouds.blobstore.options.GetOptions;\n+import org.jclouds.blobstore.options.ListContainerOptions;\n+import org.jclouds.blobstore.options.PutOptions;\n+import org.jclouds.blobstore.util.BlobUtils;\n+import org.jclouds.domain.Location;\n+import org.jclouds.io.ContentMetadata;\n+import org.jclouds.io.Payload;\n+import org.jclouds.io.PayloadSlicer;\n+import org.jclouds.location.suppliers.LocationsSupplier;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+@Singleton\n+public class AliOSSBlobStore extends BaseBlobStore {\n+\n+    private final AliOSSApi aliOSSApi;\n+\n+    @Inject\n+    protected AliOSSBlobStore(AliOSSApi aliOSSApi, BlobStoreContext context, BlobUtils blobUtils, Supplier<Location> defaultLocation,\n+                              LocationsSupplier locations, PayloadSlicer slicer) {\n+        super(context, blobUtils, defaultLocation, locations, slicer);\n+        this.aliOSSApi = aliOSSApi;\n+    }\n+\n+    @Override\n+    public boolean containerExists(String container) {\n+        return doOssOperation(oss -> oss.doesBucketExist(container));\n+    }\n+\n+    @Override\n+    public PageSet<? extends StorageMetadata> list(String container, ListContainerOptions options) {\n+        return doOssOperation(oss -> {\n+            ListObjectsRequest request = toListObjectRequest(container, options);\n+            ObjectListing objectListing = oss.listObjects(request);\n+            List<StorageMetadata> storageMetadataList = objectListing.getObjectSummaries()\n+                                                                     .stream()\n+                                                                     .map(ossObjectSummary -> toStorageMetadata(oss, container, ossObjectSummary))\n+                                                                     .collect(Collectors.toList());\n+            return new PageSetImpl<>(storageMetadataList, objectListing.getNextMarker());\n+        });\n+    }\n+\n+    @Override\n+    public boolean blobExists(String container, String name) {\n+        return doOssOperation(oss -> oss.doesObjectExist(container, name));\n+    }\n+\n+    @Override\n+    public String putBlob(String container, Blob blob) {\n+        return doOssOperation(oss -> {\n+            try {\n+                ObjectMetadata objectMetadata = createObjectMetadataFromBlob(blob);\n+                PutObjectRequest request = new PutObjectRequest(container, blob.getMetadata()\n+                                                                               .getProviderId(), blob.getPayload()\n+                                                                                                     .openStream(), objectMetadata);\n+                PutObjectResult result = oss.putObject(request);\n+                return result.getETag();\n+            } catch (IOException e) {\n+                throw new IllegalStateException(e);", "originalCommit": "1a1797eda1caa52c9ff25c351393f053bb7abc3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkxNDY2MQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/859#discussion_r446914661", "bodyText": "I didn`t wanted to mix our domain with the Jclouds domain, because we plan to submit a pull request to apache repo in the near future. But for now, it is reasonable.", "author": "radoslav-d", "createdAt": "2020-06-29T11:59:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg4ODM4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg5ODQzMA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/859#discussion_r446898430", "bodyText": "Does this stream need to be closed?", "author": "IvanBorislavovDimitrov", "createdAt": "2020-06-29T11:29:16Z", "path": "com.sap.cloud.lm.sl.cf.persistence/src/main/java/com/sap/cloud/lm/sl/cf/persistence/jclouds/providers/aliyun/blobstore/AliOSSBlobStore.java", "diffHunk": "@@ -0,0 +1,328 @@\n+package com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun.blobstore;\n+\n+import com.aliyun.oss.OSS;\n+import com.aliyun.oss.model.GetObjectRequest;\n+import com.aliyun.oss.model.ListObjectsRequest;\n+import com.aliyun.oss.model.OSSObject;\n+import com.aliyun.oss.model.OSSObjectSummary;\n+import com.aliyun.oss.model.ObjectListing;\n+import com.aliyun.oss.model.ObjectMetadata;\n+import com.aliyun.oss.model.PutObjectRequest;\n+import com.aliyun.oss.model.PutObjectResult;\n+import com.google.common.base.Supplier;\n+import com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun.AliOSSApi;\n+import org.jclouds.blobstore.BlobStoreContext;\n+import org.jclouds.blobstore.domain.Blob;\n+import org.jclouds.blobstore.domain.BlobAccess;\n+import org.jclouds.blobstore.domain.BlobBuilder;\n+import org.jclouds.blobstore.domain.BlobMetadata;\n+import org.jclouds.blobstore.domain.ContainerAccess;\n+import org.jclouds.blobstore.domain.MultipartPart;\n+import org.jclouds.blobstore.domain.MultipartUpload;\n+import org.jclouds.blobstore.domain.PageSet;\n+import org.jclouds.blobstore.domain.StorageMetadata;\n+import org.jclouds.blobstore.domain.StorageType;\n+import org.jclouds.blobstore.domain.Tier;\n+import org.jclouds.blobstore.domain.internal.PageSetImpl;\n+import org.jclouds.blobstore.domain.internal.StorageMetadataImpl;\n+import org.jclouds.blobstore.internal.BaseBlobStore;\n+import org.jclouds.blobstore.options.CreateContainerOptions;\n+import org.jclouds.blobstore.options.GetOptions;\n+import org.jclouds.blobstore.options.ListContainerOptions;\n+import org.jclouds.blobstore.options.PutOptions;\n+import org.jclouds.blobstore.util.BlobUtils;\n+import org.jclouds.domain.Location;\n+import org.jclouds.io.ContentMetadata;\n+import org.jclouds.io.Payload;\n+import org.jclouds.io.PayloadSlicer;\n+import org.jclouds.location.suppliers.LocationsSupplier;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+@Singleton\n+public class AliOSSBlobStore extends BaseBlobStore {\n+\n+    private final AliOSSApi aliOSSApi;\n+\n+    @Inject\n+    protected AliOSSBlobStore(AliOSSApi aliOSSApi, BlobStoreContext context, BlobUtils blobUtils, Supplier<Location> defaultLocation,\n+                              LocationsSupplier locations, PayloadSlicer slicer) {\n+        super(context, blobUtils, defaultLocation, locations, slicer);\n+        this.aliOSSApi = aliOSSApi;\n+    }\n+\n+    @Override\n+    public boolean containerExists(String container) {\n+        return doOssOperation(oss -> oss.doesBucketExist(container));\n+    }\n+\n+    @Override\n+    public PageSet<? extends StorageMetadata> list(String container, ListContainerOptions options) {\n+        return doOssOperation(oss -> {\n+            ListObjectsRequest request = toListObjectRequest(container, options);\n+            ObjectListing objectListing = oss.listObjects(request);\n+            List<StorageMetadata> storageMetadataList = objectListing.getObjectSummaries()\n+                                                                     .stream()\n+                                                                     .map(ossObjectSummary -> toStorageMetadata(oss, container, ossObjectSummary))\n+                                                                     .collect(Collectors.toList());\n+            return new PageSetImpl<>(storageMetadataList, objectListing.getNextMarker());\n+        });\n+    }\n+\n+    @Override\n+    public boolean blobExists(String container, String name) {\n+        return doOssOperation(oss -> oss.doesObjectExist(container, name));\n+    }\n+\n+    @Override\n+    public String putBlob(String container, Blob blob) {\n+        return doOssOperation(oss -> {\n+            try {\n+                ObjectMetadata objectMetadata = createObjectMetadataFromBlob(blob);\n+                PutObjectRequest request = new PutObjectRequest(container, blob.getMetadata()\n+                                                                               .getProviderId(), blob.getPayload()\n+                                                                                                     .openStream(), objectMetadata);", "originalCommit": "1a1797eda1caa52c9ff25c351393f053bb7abc3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwMDcxNA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/859#discussion_r446900714", "bodyText": "Is it required this guava supplier to be used?", "author": "IvanBorislavovDimitrov", "createdAt": "2020-06-29T11:33:30Z", "path": "com.sap.cloud.lm.sl.cf.persistence/src/main/java/com/sap/cloud/lm/sl/cf/persistence/jclouds/providers/aliyun/AliOSSApi.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun;\n+\n+import com.aliyun.oss.OSS;\n+import com.aliyun.oss.OSSClientBuilder;\n+import com.google.common.base.Supplier;", "originalCommit": "1a1797eda1caa52c9ff25c351393f053bb7abc3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkxNTk5Nw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/859#discussion_r446915997", "bodyText": "In fact yes! Otherwise we get something like \"unsatisfied dependency failure\" during DS start", "author": "radoslav-d", "createdAt": "2020-06-29T12:01:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwMDcxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwMjc5Ng==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/859#discussion_r446902796", "bodyText": "Add a private constructor.", "author": "IvanBorislavovDimitrov", "createdAt": "2020-06-29T11:37:36Z", "path": "com.sap.cloud.lm.sl.cf.persistence/src/main/java/com/sap/cloud/lm/sl/cf/persistence/jclouds/providers/aliyun/AliOSSApiMetadata.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun;\n+\n+import com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun.blobstore.config.AliOSSBlobStoreContextModule;\n+import org.jclouds.apis.ApiMetadata;\n+import org.jclouds.apis.internal.BaseApiMetadata;\n+import org.jclouds.blobstore.internal.BlobStoreContextImpl;\n+import org.jclouds.rest.internal.BaseHttpApiMetadata;\n+\n+import java.net.URI;\n+import java.util.Properties;\n+\n+public class AliOSSApiMetadata extends BaseApiMetadata {\n+\n+    public AliOSSApiMetadata() {\n+        this(new AliOSSApiMetadataBuilder());\n+    }\n+\n+    protected AliOSSApiMetadata(Builder builder) {\n+        super(builder);\n+    }\n+\n+    @Override\n+    public Builder toBuilder() {\n+        return new AliOSSApiMetadataBuilder().fromApiMetadata(this);\n+    }\n+\n+    public static Properties defaultProperties() {\n+        return BaseHttpApiMetadata.defaultProperties();\n+    }\n+\n+    public static class AliOSSApiMetadataBuilder extends BaseApiMetadata.Builder<AliOSSApiMetadataBuilder> {\n+\n+        protected AliOSSApiMetadataBuilder() {\n+            id(AliOSSApi.API_ID).name(AliOSSConstants.ALI_OSS_API_NAME)\n+                                .identityName(AliOSSConstants.ALI_OSS_API_IDENTITY)\n+                                .credentialName(AliOSSConstants.ALI_OSS_API_CREDENTIAL)\n+                                .documentation(URI.create(AliOSSConstants.ALI_OSS_API_DOCUMENTATION_URI))\n+                                .defaultEndpoint(AliOSSConstants.ALI_OSS_API_DEFAULT_ENDPOINT)\n+                                .defaultProperties(AliOSSApiMetadata.defaultProperties())\n+                                .view(BlobStoreContextImpl.class)\n+                                .defaultModule(AliOSSBlobStoreContextModule.class);\n+        }\n+\n+        @Override\n+        public ApiMetadata build() {\n+            return new AliOSSApiMetadata(this);\n+        }\n+\n+        @Override\n+        protected AliOSSApiMetadataBuilder self() {\n+            return this;\n+        }\n+    }\n+\n+    /**\n+     * Contains constants that are plain metadata, which is not used in business logic.\n+     */\n+    public static class AliOSSConstants {", "originalCommit": "1a1797eda1caa52c9ff25c351393f053bb7abc3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwNDI0MA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/859#discussion_r446904240", "bodyText": "Could you extract this in a method?", "author": "IvanBorislavovDimitrov", "createdAt": "2020-06-29T11:40:10Z", "path": "com.sap.cloud.lm.sl.cf.persistence/src/main/java/com/sap/cloud/lm/sl/cf/persistence/jclouds/providers/aliyun/blobstore/AliOSSBlobStore.java", "diffHunk": "@@ -0,0 +1,328 @@\n+package com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun.blobstore;\n+\n+import com.aliyun.oss.OSS;\n+import com.aliyun.oss.model.GetObjectRequest;\n+import com.aliyun.oss.model.ListObjectsRequest;\n+import com.aliyun.oss.model.OSSObject;\n+import com.aliyun.oss.model.OSSObjectSummary;\n+import com.aliyun.oss.model.ObjectListing;\n+import com.aliyun.oss.model.ObjectMetadata;\n+import com.aliyun.oss.model.PutObjectRequest;\n+import com.aliyun.oss.model.PutObjectResult;\n+import com.google.common.base.Supplier;\n+import com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun.AliOSSApi;\n+import org.jclouds.blobstore.BlobStoreContext;\n+import org.jclouds.blobstore.domain.Blob;\n+import org.jclouds.blobstore.domain.BlobAccess;\n+import org.jclouds.blobstore.domain.BlobBuilder;\n+import org.jclouds.blobstore.domain.BlobMetadata;\n+import org.jclouds.blobstore.domain.ContainerAccess;\n+import org.jclouds.blobstore.domain.MultipartPart;\n+import org.jclouds.blobstore.domain.MultipartUpload;\n+import org.jclouds.blobstore.domain.PageSet;\n+import org.jclouds.blobstore.domain.StorageMetadata;\n+import org.jclouds.blobstore.domain.StorageType;\n+import org.jclouds.blobstore.domain.Tier;\n+import org.jclouds.blobstore.domain.internal.PageSetImpl;\n+import org.jclouds.blobstore.domain.internal.StorageMetadataImpl;\n+import org.jclouds.blobstore.internal.BaseBlobStore;\n+import org.jclouds.blobstore.options.CreateContainerOptions;\n+import org.jclouds.blobstore.options.GetOptions;\n+import org.jclouds.blobstore.options.ListContainerOptions;\n+import org.jclouds.blobstore.options.PutOptions;\n+import org.jclouds.blobstore.util.BlobUtils;\n+import org.jclouds.domain.Location;\n+import org.jclouds.io.ContentMetadata;\n+import org.jclouds.io.Payload;\n+import org.jclouds.io.PayloadSlicer;\n+import org.jclouds.location.suppliers.LocationsSupplier;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+@Singleton\n+public class AliOSSBlobStore extends BaseBlobStore {\n+\n+    private final AliOSSApi aliOSSApi;\n+\n+    @Inject\n+    protected AliOSSBlobStore(AliOSSApi aliOSSApi, BlobStoreContext context, BlobUtils blobUtils, Supplier<Location> defaultLocation,\n+                              LocationsSupplier locations, PayloadSlicer slicer) {\n+        super(context, blobUtils, defaultLocation, locations, slicer);\n+        this.aliOSSApi = aliOSSApi;\n+    }\n+\n+    @Override\n+    public boolean containerExists(String container) {\n+        return doOssOperation(oss -> oss.doesBucketExist(container));\n+    }\n+\n+    @Override\n+    public PageSet<? extends StorageMetadata> list(String container, ListContainerOptions options) {\n+        return doOssOperation(oss -> {\n+            ListObjectsRequest request = toListObjectRequest(container, options);\n+            ObjectListing objectListing = oss.listObjects(request);\n+            List<StorageMetadata> storageMetadataList = objectListing.getObjectSummaries()", "originalCommit": "1a1797eda1caa52c9ff25c351393f053bb7abc3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwNzkyOQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/859#discussion_r446907929", "bodyText": "Why is always the first element used? get(0)", "author": "IvanBorislavovDimitrov", "createdAt": "2020-06-29T11:46:36Z", "path": "com.sap.cloud.lm.sl.cf.persistence/src/main/java/com/sap/cloud/lm/sl/cf/persistence/jclouds/providers/aliyun/blobstore/AliOSSBlobStore.java", "diffHunk": "@@ -0,0 +1,328 @@\n+package com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun.blobstore;\n+\n+import com.aliyun.oss.OSS;\n+import com.aliyun.oss.model.GetObjectRequest;\n+import com.aliyun.oss.model.ListObjectsRequest;\n+import com.aliyun.oss.model.OSSObject;\n+import com.aliyun.oss.model.OSSObjectSummary;\n+import com.aliyun.oss.model.ObjectListing;\n+import com.aliyun.oss.model.ObjectMetadata;\n+import com.aliyun.oss.model.PutObjectRequest;\n+import com.aliyun.oss.model.PutObjectResult;\n+import com.google.common.base.Supplier;\n+import com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun.AliOSSApi;\n+import org.jclouds.blobstore.BlobStoreContext;\n+import org.jclouds.blobstore.domain.Blob;\n+import org.jclouds.blobstore.domain.BlobAccess;\n+import org.jclouds.blobstore.domain.BlobBuilder;\n+import org.jclouds.blobstore.domain.BlobMetadata;\n+import org.jclouds.blobstore.domain.ContainerAccess;\n+import org.jclouds.blobstore.domain.MultipartPart;\n+import org.jclouds.blobstore.domain.MultipartUpload;\n+import org.jclouds.blobstore.domain.PageSet;\n+import org.jclouds.blobstore.domain.StorageMetadata;\n+import org.jclouds.blobstore.domain.StorageType;\n+import org.jclouds.blobstore.domain.Tier;\n+import org.jclouds.blobstore.domain.internal.PageSetImpl;\n+import org.jclouds.blobstore.domain.internal.StorageMetadataImpl;\n+import org.jclouds.blobstore.internal.BaseBlobStore;\n+import org.jclouds.blobstore.options.CreateContainerOptions;\n+import org.jclouds.blobstore.options.GetOptions;\n+import org.jclouds.blobstore.options.ListContainerOptions;\n+import org.jclouds.blobstore.options.PutOptions;\n+import org.jclouds.blobstore.util.BlobUtils;\n+import org.jclouds.domain.Location;\n+import org.jclouds.io.ContentMetadata;\n+import org.jclouds.io.Payload;\n+import org.jclouds.io.PayloadSlicer;\n+import org.jclouds.location.suppliers.LocationsSupplier;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+@Singleton\n+public class AliOSSBlobStore extends BaseBlobStore {\n+\n+    private final AliOSSApi aliOSSApi;\n+\n+    @Inject\n+    protected AliOSSBlobStore(AliOSSApi aliOSSApi, BlobStoreContext context, BlobUtils blobUtils, Supplier<Location> defaultLocation,\n+                              LocationsSupplier locations, PayloadSlicer slicer) {\n+        super(context, blobUtils, defaultLocation, locations, slicer);\n+        this.aliOSSApi = aliOSSApi;\n+    }\n+\n+    @Override\n+    public boolean containerExists(String container) {\n+        return doOssOperation(oss -> oss.doesBucketExist(container));\n+    }\n+\n+    @Override\n+    public PageSet<? extends StorageMetadata> list(String container, ListContainerOptions options) {\n+        return doOssOperation(oss -> {\n+            ListObjectsRequest request = toListObjectRequest(container, options);\n+            ObjectListing objectListing = oss.listObjects(request);\n+            List<StorageMetadata> storageMetadataList = objectListing.getObjectSummaries()\n+                                                                     .stream()\n+                                                                     .map(ossObjectSummary -> toStorageMetadata(oss, container, ossObjectSummary))\n+                                                                     .collect(Collectors.toList());\n+            return new PageSetImpl<>(storageMetadataList, objectListing.getNextMarker());\n+        });\n+    }\n+\n+    @Override\n+    public boolean blobExists(String container, String name) {\n+        return doOssOperation(oss -> oss.doesObjectExist(container, name));\n+    }\n+\n+    @Override\n+    public String putBlob(String container, Blob blob) {\n+        return doOssOperation(oss -> {\n+            try {\n+                ObjectMetadata objectMetadata = createObjectMetadataFromBlob(blob);\n+                PutObjectRequest request = new PutObjectRequest(container, blob.getMetadata()\n+                                                                               .getProviderId(), blob.getPayload()\n+                                                                                                     .openStream(), objectMetadata);\n+                PutObjectResult result = oss.putObject(request);\n+                return result.getETag();\n+            } catch (IOException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public String putBlob(String container, Blob blob, PutOptions options) {\n+        return putBlob(container, blob);\n+    }\n+\n+    @Override\n+    public Blob getBlob(String container, String name, GetOptions options) {\n+        return doOssOperation(oss -> {\n+            GetObjectRequest req = toGetObjectRequest(container, name, options);\n+            OSSObject object = oss.getObject(req);\n+            return convertToBlob(object);\n+        }, false);\n+\n+    }\n+\n+    @Override\n+    public void removeBlob(String container, String name) {\n+        doOssOperation(oss -> {\n+            oss.deleteObject(container, name);\n+            return null;\n+        });\n+    }\n+\n+    private <R> R doOssOperation(Function<OSS, R> function) {\n+        return doOssOperation(function, true);\n+    }\n+\n+    private <R> R doOssOperation(Function<OSS, R> function, boolean shutdownClient) {\n+        OSS ossClient = aliOSSApi.getOSSClient();\n+        R result = function.apply(ossClient);\n+        if (shutdownClient) {\n+            ossClient.shutdown();\n+        }\n+        return result;\n+    }\n+\n+    private GetObjectRequest toGetObjectRequest(String container, String name, GetOptions options) {\n+        GetObjectRequest request = new GetObjectRequest(container, name);\n+        if (options.getIfModifiedSince() != null) {\n+            request.setModifiedSinceConstraint(options.getIfModifiedSince());\n+        }\n+        if (!options.getRanges()\n+                    .isEmpty()) {\n+            String[] ranges = options.getRanges().get(0).split(\"-\");", "originalCommit": "1a1797eda1caa52c9ff25c351393f053bb7abc3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNDkzNA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/859#discussion_r446934934", "bodyText": "Because it contains only one element", "author": "radoslav-d", "createdAt": "2020-06-29T12:33:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwNzkyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwODkzMA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/859#discussion_r446908930", "bodyText": "throw SLException", "author": "IvanBorislavovDimitrov", "createdAt": "2020-06-29T11:48:24Z", "path": "com.sap.cloud.lm.sl.cf.persistence/src/main/java/com/sap/cloud/lm/sl/cf/persistence/jclouds/providers/aliyun/blobstore/AliOSSBlobStore.java", "diffHunk": "@@ -0,0 +1,328 @@\n+package com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun.blobstore;\n+\n+import com.aliyun.oss.OSS;\n+import com.aliyun.oss.model.GetObjectRequest;\n+import com.aliyun.oss.model.ListObjectsRequest;\n+import com.aliyun.oss.model.OSSObject;\n+import com.aliyun.oss.model.OSSObjectSummary;\n+import com.aliyun.oss.model.ObjectListing;\n+import com.aliyun.oss.model.ObjectMetadata;\n+import com.aliyun.oss.model.PutObjectRequest;\n+import com.aliyun.oss.model.PutObjectResult;\n+import com.google.common.base.Supplier;\n+import com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun.AliOSSApi;\n+import org.jclouds.blobstore.BlobStoreContext;\n+import org.jclouds.blobstore.domain.Blob;\n+import org.jclouds.blobstore.domain.BlobAccess;\n+import org.jclouds.blobstore.domain.BlobBuilder;\n+import org.jclouds.blobstore.domain.BlobMetadata;\n+import org.jclouds.blobstore.domain.ContainerAccess;\n+import org.jclouds.blobstore.domain.MultipartPart;\n+import org.jclouds.blobstore.domain.MultipartUpload;\n+import org.jclouds.blobstore.domain.PageSet;\n+import org.jclouds.blobstore.domain.StorageMetadata;\n+import org.jclouds.blobstore.domain.StorageType;\n+import org.jclouds.blobstore.domain.Tier;\n+import org.jclouds.blobstore.domain.internal.PageSetImpl;\n+import org.jclouds.blobstore.domain.internal.StorageMetadataImpl;\n+import org.jclouds.blobstore.internal.BaseBlobStore;\n+import org.jclouds.blobstore.options.CreateContainerOptions;\n+import org.jclouds.blobstore.options.GetOptions;\n+import org.jclouds.blobstore.options.ListContainerOptions;\n+import org.jclouds.blobstore.options.PutOptions;\n+import org.jclouds.blobstore.util.BlobUtils;\n+import org.jclouds.domain.Location;\n+import org.jclouds.io.ContentMetadata;\n+import org.jclouds.io.Payload;\n+import org.jclouds.io.PayloadSlicer;\n+import org.jclouds.location.suppliers.LocationsSupplier;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+@Singleton\n+public class AliOSSBlobStore extends BaseBlobStore {\n+\n+    private final AliOSSApi aliOSSApi;\n+\n+    @Inject\n+    protected AliOSSBlobStore(AliOSSApi aliOSSApi, BlobStoreContext context, BlobUtils blobUtils, Supplier<Location> defaultLocation,\n+                              LocationsSupplier locations, PayloadSlicer slicer) {\n+        super(context, blobUtils, defaultLocation, locations, slicer);\n+        this.aliOSSApi = aliOSSApi;\n+    }\n+\n+    @Override\n+    public boolean containerExists(String container) {\n+        return doOssOperation(oss -> oss.doesBucketExist(container));\n+    }\n+\n+    @Override\n+    public PageSet<? extends StorageMetadata> list(String container, ListContainerOptions options) {\n+        return doOssOperation(oss -> {\n+            ListObjectsRequest request = toListObjectRequest(container, options);\n+            ObjectListing objectListing = oss.listObjects(request);\n+            List<StorageMetadata> storageMetadataList = objectListing.getObjectSummaries()\n+                                                                     .stream()\n+                                                                     .map(ossObjectSummary -> toStorageMetadata(oss, container, ossObjectSummary))\n+                                                                     .collect(Collectors.toList());\n+            return new PageSetImpl<>(storageMetadataList, objectListing.getNextMarker());\n+        });\n+    }\n+\n+    @Override\n+    public boolean blobExists(String container, String name) {\n+        return doOssOperation(oss -> oss.doesObjectExist(container, name));\n+    }\n+\n+    @Override\n+    public String putBlob(String container, Blob blob) {\n+        return doOssOperation(oss -> {\n+            try {\n+                ObjectMetadata objectMetadata = createObjectMetadataFromBlob(blob);\n+                PutObjectRequest request = new PutObjectRequest(container, blob.getMetadata()\n+                                                                               .getProviderId(), blob.getPayload()\n+                                                                                                     .openStream(), objectMetadata);\n+                PutObjectResult result = oss.putObject(request);\n+                return result.getETag();\n+            } catch (IOException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public String putBlob(String container, Blob blob, PutOptions options) {\n+        return putBlob(container, blob);\n+    }\n+\n+    @Override\n+    public Blob getBlob(String container, String name, GetOptions options) {\n+        return doOssOperation(oss -> {\n+            GetObjectRequest req = toGetObjectRequest(container, name, options);\n+            OSSObject object = oss.getObject(req);\n+            return convertToBlob(object);\n+        }, false);\n+\n+    }\n+\n+    @Override\n+    public void removeBlob(String container, String name) {\n+        doOssOperation(oss -> {\n+            oss.deleteObject(container, name);\n+            return null;\n+        });\n+    }\n+\n+    private <R> R doOssOperation(Function<OSS, R> function) {\n+        return doOssOperation(function, true);\n+    }\n+\n+    private <R> R doOssOperation(Function<OSS, R> function, boolean shutdownClient) {\n+        OSS ossClient = aliOSSApi.getOSSClient();\n+        R result = function.apply(ossClient);\n+        if (shutdownClient) {\n+            ossClient.shutdown();\n+        }\n+        return result;\n+    }\n+\n+    private GetObjectRequest toGetObjectRequest(String container, String name, GetOptions options) {\n+        GetObjectRequest request = new GetObjectRequest(container, name);\n+        if (options.getIfModifiedSince() != null) {\n+            request.setModifiedSinceConstraint(options.getIfModifiedSince());\n+        }\n+        if (!options.getRanges()\n+                    .isEmpty()) {\n+            String[] ranges = options.getRanges().get(0).split(\"-\");\n+            long start = Integer.parseInt(ranges[0]);\n+            long end = Integer.parseInt(ranges[1]);\n+            request.setRange(start, end);\n+        }\n+        return request;\n+    }\n+\n+    private StorageMetadata toStorageMetadata(OSS oss, String container, OSSObjectSummary ossObjectSummary) {\n+        ObjectMetadata metadata = oss.getObjectMetadata(container, ossObjectSummary.getKey());\n+        URI url = getPresignedUriForObject(oss, ossObjectSummary);\n+        return new StorageMetadataImpl(StorageType.BLOB, ossObjectSummary.getKey(), ossObjectSummary.getKey(), defaultLocation.get(),\n+                                       url, ossObjectSummary.getETag(), ossObjectSummary.getLastModified(),\n+                                       ossObjectSummary.getLastModified(), metadata.getUserMetadata(), ossObjectSummary.getSize(),\n+                                       Tier.STANDARD);\n+    }\n+\n+    private URI getPresignedUriForObject(OSS oss, OSSObjectSummary ossObjectSummary) {\n+        Calendar time = Calendar.getInstance();\n+        time.set(Calendar.HOUR, time.get(Calendar.HOUR) + 1);\n+        try {\n+            return oss.generatePresignedUrl(ossObjectSummary.getBucketName(), ossObjectSummary.getKey(), time.getTime())\n+                .toURI();\n+        } catch (URISyntaxException e) {\n+            throw new IllegalStateException(e);", "originalCommit": "1a1797eda1caa52c9ff25c351393f053bb7abc3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkxMDk2OA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/859#discussion_r446910968", "bodyText": "why do call \"doesBucketExist\" with a container name?", "author": "IvanBorislavovDimitrov", "createdAt": "2020-06-29T11:52:13Z", "path": "com.sap.cloud.lm.sl.cf.persistence/src/main/java/com/sap/cloud/lm/sl/cf/persistence/jclouds/providers/aliyun/blobstore/AliOSSBlobStore.java", "diffHunk": "@@ -0,0 +1,328 @@\n+package com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun.blobstore;\n+\n+import com.aliyun.oss.OSS;\n+import com.aliyun.oss.model.GetObjectRequest;\n+import com.aliyun.oss.model.ListObjectsRequest;\n+import com.aliyun.oss.model.OSSObject;\n+import com.aliyun.oss.model.OSSObjectSummary;\n+import com.aliyun.oss.model.ObjectListing;\n+import com.aliyun.oss.model.ObjectMetadata;\n+import com.aliyun.oss.model.PutObjectRequest;\n+import com.aliyun.oss.model.PutObjectResult;\n+import com.google.common.base.Supplier;\n+import com.sap.cloud.lm.sl.cf.persistence.jclouds.providers.aliyun.AliOSSApi;\n+import org.jclouds.blobstore.BlobStoreContext;\n+import org.jclouds.blobstore.domain.Blob;\n+import org.jclouds.blobstore.domain.BlobAccess;\n+import org.jclouds.blobstore.domain.BlobBuilder;\n+import org.jclouds.blobstore.domain.BlobMetadata;\n+import org.jclouds.blobstore.domain.ContainerAccess;\n+import org.jclouds.blobstore.domain.MultipartPart;\n+import org.jclouds.blobstore.domain.MultipartUpload;\n+import org.jclouds.blobstore.domain.PageSet;\n+import org.jclouds.blobstore.domain.StorageMetadata;\n+import org.jclouds.blobstore.domain.StorageType;\n+import org.jclouds.blobstore.domain.Tier;\n+import org.jclouds.blobstore.domain.internal.PageSetImpl;\n+import org.jclouds.blobstore.domain.internal.StorageMetadataImpl;\n+import org.jclouds.blobstore.internal.BaseBlobStore;\n+import org.jclouds.blobstore.options.CreateContainerOptions;\n+import org.jclouds.blobstore.options.GetOptions;\n+import org.jclouds.blobstore.options.ListContainerOptions;\n+import org.jclouds.blobstore.options.PutOptions;\n+import org.jclouds.blobstore.util.BlobUtils;\n+import org.jclouds.domain.Location;\n+import org.jclouds.io.ContentMetadata;\n+import org.jclouds.io.Payload;\n+import org.jclouds.io.PayloadSlicer;\n+import org.jclouds.location.suppliers.LocationsSupplier;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+@Singleton\n+public class AliOSSBlobStore extends BaseBlobStore {\n+\n+    private final AliOSSApi aliOSSApi;\n+\n+    @Inject\n+    protected AliOSSBlobStore(AliOSSApi aliOSSApi, BlobStoreContext context, BlobUtils blobUtils, Supplier<Location> defaultLocation,\n+                              LocationsSupplier locations, PayloadSlicer slicer) {\n+        super(context, blobUtils, defaultLocation, locations, slicer);\n+        this.aliOSSApi = aliOSSApi;\n+    }\n+\n+    @Override\n+    public boolean containerExists(String container) {\n+        return doOssOperation(oss -> oss.doesBucketExist(container));", "originalCommit": "1a1797eda1caa52c9ff25c351393f053bb7abc3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkxNzUwOQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/859#discussion_r446917509", "bodyText": "the bucket (in ali oss) maps to container in jclouds domain", "author": "radoslav-d", "createdAt": "2020-06-29T12:03:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkxMDk2OA=="}], "type": "inlineReview"}, {"oid": "79fa61d5c7f3628534118c61fbce6f5fe359e0d4", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/79fa61d5c7f3628534118c61fbce6f5fe359e0d4", "message": "Implement object store support for AliCloud\n\nImplement JClouds BlobStore API using the Aliyun SDK for blob storage.\nJIRA: LMCROSSITXSADEPLOY-1889", "committedDate": "2020-06-29T12:41:37Z", "type": "commit"}, {"oid": "b3d0b5c1eb1be1680bf8b6f5643f15664dca95b5", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/b3d0b5c1eb1be1680bf8b6f5643f15664dca95b5", "message": "Add dynamic endpoint resolution for OSS client\n\nJIRA: LMCROSSITXSADEPLOY-1889", "committedDate": "2020-06-29T12:41:37Z", "type": "commit"}, {"oid": "c9f298aea94898405926b273624a9e937b171cfc", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/c9f298aea94898405926b273624a9e937b171cfc", "message": "Small refactorings\n\nJIRA: LMCROSSITXSADEPLOY-1889", "committedDate": "2020-06-29T12:51:35Z", "type": "commit"}, {"oid": "c9f298aea94898405926b273624a9e937b171cfc", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/c9f298aea94898405926b273624a9e937b171cfc", "message": "Small refactorings\n\nJIRA: LMCROSSITXSADEPLOY-1889", "committedDate": "2020-06-29T12:51:35Z", "type": "forcePushed"}]}