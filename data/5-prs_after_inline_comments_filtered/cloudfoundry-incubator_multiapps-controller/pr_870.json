{"pr_number": 870, "pr_title": "Add database migration project", "pr_createdAt": "2020-06-05T10:49:25Z", "pr_url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/870", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkwODMwNA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/870#discussion_r435908304", "bodyText": "IllegalStateExceptions should be used only for things that should not happen. It's foreseeable for an error to occur here, so we should use some other exception type. Also, we should include \"Error migrating entity \\\"{0}\\\": {1}\" in the exception message, where 1 is the exception message of the cause.", "author": "nictas", "createdAt": "2020-06-05T13:06:50Z", "path": "com.sap.cloud.lm.sl.cf.database/src/main/java/com/sap/cloud/lm/sl/cf/database/migration/executor/DatabaseMigrationExecutor.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.sap.cloud.lm.sl.cf.database.migration.executor;\n+\n+import java.sql.SQLException;\n+import java.text.MessageFormat;\n+\n+import javax.sql.DataSource;\n+\n+import org.apache.log4j.Logger;\n+\n+import com.sap.cloud.lm.sl.cf.persistence.util.SqlQueryExecutor;\n+\n+public abstract class DatabaseMigrationExecutor {\n+\n+    private final static Logger LOGGER = Logger.getLogger(DatabaseMigrationExecutor.class);\n+\n+    public abstract DataSource getSourceDataSource();\n+\n+    public abstract DataSource getTargetDataSource();\n+\n+    public void executeMigration(String entityName) {\n+        try {\n+            executeMigrationInternal(entityName);\n+        } catch (SQLException e) {\n+            LOGGER.error(MessageFormat.format(\"Error migrating entity \\\"{0}\\\"\", entityName), e);\n+            throw new IllegalStateException(e.getMessage(), e);", "originalCommit": "b82587a6cd1d48c2900cbdf659b499d62ffc6cf0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkwOTA2NA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/870#discussion_r435909064", "bodyText": "Why not inline this method in the one above and rename it to generateInsertStatement?", "author": "nictas", "createdAt": "2020-06-05T13:08:23Z", "path": "com.sap.cloud.lm.sl.cf.database/src/main/java/com/sap/cloud/lm/sl/cf/database/migration/generator/DatabaseTableInsertQueryGenerator.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.sap.cloud.lm.sl.cf.database.migration.generator;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import com.sap.cloud.lm.sl.cf.database.migration.metadata.DatabaseTableColumnMetadata;\n+import com.sap.cloud.lm.sl.cf.database.migration.metadata.DatabaseTableMetadata;\n+\n+public class DatabaseTableInsertQueryGenerator {\n+\n+    private static final String CLOSING_BRACKET = \")\";\n+    private static final String OPEN_BRACKET = \"(\";\n+    private static final String DEFAULT_STATEMENT_VALUES_SEPARATOR = \", \";\n+    private static final String DEFAULT_STATEMENT_PARAMETER = \"?\";\n+\n+    public String generate(DatabaseTableMetadata tableMetadata) {\n+        return generateInsertStatement(tableMetadata);\n+    }\n+\n+    private String generateInsertStatement(DatabaseTableMetadata tableMetadata) {", "originalCommit": "b82587a6cd1d48c2900cbdf659b499d62ffc6cf0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkwOTYyNQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/870#discussion_r435909625", "bodyText": "Rename this variable to service.", "author": "nictas", "createdAt": "2020-06-05T13:09:29Z", "path": "com.sap.cloud.lm.sl.cf.database/src/main/java/com/sap/cloud/lm/sl/cf/database/migration/extractor/DataSourceEnvironmentExtractor.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package com.sap.cloud.lm.sl.cf.database.migration.extractor;\n+\n+import java.text.MessageFormat;\n+\n+import javax.sql.DataSource;\n+\n+import org.apache.log4j.Logger;\n+import org.postgresql.ds.PGSimpleDataSource;\n+\n+import io.pivotal.cfenv.core.CfCredentials;\n+import io.pivotal.cfenv.core.CfEnv;\n+import io.pivotal.cfenv.core.CfService;\n+\n+public class DataSourceEnvironmentExtractor {\n+    \n+    private final static Logger LOGGER = Logger.getLogger(DataSourceEnvironmentExtractor.class);\n+\n+    public DataSource extractDataSource(String serviceName) {\n+        LOGGER.info(MessageFormat.format(\"Extracting datasource for service {0}...\", serviceName));\n+        CfCredentials databaseServiceCredentials = extractDatabaseServiceCredentials(serviceName);\n+        return extractDataSource(databaseServiceCredentials);\n+    }\n+\n+    private CfCredentials extractDatabaseServiceCredentials(String serviceName) {\n+        CfEnv cfEnv = new CfEnv();\n+        CfService sourceDatabase = cfEnv.findServiceByName(serviceName);", "originalCommit": "b82587a6cd1d48c2900cbdf659b499d62ffc6cf0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxMDg1Nw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/870#discussion_r435910857", "bodyText": "Will this create a transaction? Doesn't autoCommit mean that each statement will be in its own transaction?", "author": "nictas", "createdAt": "2020-06-05T13:11:42Z", "path": "com.sap.cloud.lm.sl.cf.database/src/main/java/com/sap/cloud/lm/sl/cf/database/migration/executor/DatabaseTableMigrationExecutor.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package com.sap.cloud.lm.sl.cf.database.migration.executor;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.text.MessageFormat;\n+import java.util.List;\n+\n+import org.apache.log4j.Logger;\n+import org.immutables.value.Value.Immutable;\n+\n+import com.sap.cloud.lm.sl.cf.database.migration.generator.DatabaseTableInsertQueryGenerator;\n+import com.sap.cloud.lm.sl.cf.database.migration.metadata.DatabaseTableColumnMetadata;\n+import com.sap.cloud.lm.sl.cf.database.migration.metadata.DatabaseTableMetadata;\n+import com.sap.cloud.lm.sl.cf.database.migration.metadata.ImmutableDatabaseTableColumnMetadata;\n+import com.sap.cloud.lm.sl.cf.database.migration.metadata.ImmutableDatabaseTableMetadata;\n+import com.sap.cloud.lm.sl.cf.persistence.util.JdbcUtil;\n+\n+@Immutable\n+public abstract class DatabaseTableMigrationExecutor extends DatabaseMigrationExecutor {\n+\n+    private final static Logger LOGGER = Logger.getLogger(DatabaseTableMigrationExecutor.class);\n+\n+    @Override\n+    public void executeMigrationInternal(String databaseTable) throws SQLException {\n+        LOGGER.info(MessageFormat.format(\"Migrating table \\\"{0}\\\"...\", databaseTable));\n+        DatabaseTableMetadata sourceTableMetadata = extractTableMetadataFromSourceDatabase(databaseTable);\n+        transferData(databaseTable, sourceTableMetadata);\n+    }\n+\n+    private DatabaseTableMetadata extractTableMetadataFromSourceDatabase(String databaseTable) throws SQLException {\n+        return getSqlQueryExecutor(getSourceDataSource()).executeWithAutoCommit((connection) -> {\n+            PreparedStatement statement = null;\n+            ResultSet resultSet = null;\n+            try {\n+                statement = connection.prepareStatement(String.format(\"SELECT * FROM %s\", databaseTable));\n+                resultSet = statement.executeQuery();\n+                return parseDatabaseTableMetadata(databaseTable, resultSet.getMetaData());\n+            } finally {\n+                JdbcUtil.closeQuietly(resultSet);\n+                JdbcUtil.closeQuietly(statement);\n+            }\n+        });\n+    }\n+\n+    private DatabaseTableMetadata parseDatabaseTableMetadata(String databaseTable, ResultSetMetaData resultSetMetadata)\n+        throws SQLException {\n+        ImmutableDatabaseTableMetadata.Builder tableMetadataBuilder = ImmutableDatabaseTableMetadata.builder()\n+                                                                                                    .tableName(databaseTable);\n+        for (int currentColumnIndex = 1; currentColumnIndex <= resultSetMetadata.getColumnCount(); currentColumnIndex++) {\n+            tableMetadataBuilder.addTableColumnsMetadata(ImmutableDatabaseTableColumnMetadata.builder()\n+                                                                                             .columnName(resultSetMetadata.getColumnName(currentColumnIndex))\n+                                                                                             .columnType(resultSetMetadata.getColumnTypeName(currentColumnIndex))\n+                                                                                             .build());\n+        }\n+        return tableMetadataBuilder.build();\n+    }\n+\n+    private void transferData(String databaseTable, DatabaseTableMetadata sourceTableMetadata) throws SQLException {\n+        LOGGER.info(MessageFormat.format(\"Transfering data for table \\\"{0}\\\"...\", databaseTable));\n+        String insertQuery = new DatabaseTableInsertQueryGenerator().generate(sourceTableMetadata);\n+        getSqlQueryExecutor(getSourceDataSource()).executeWithAutoCommit((sourceConnection) -> {\n+            getSqlQueryExecutor(getTargetDataSource()).executeWithAutoCommit((targetConnection) -> {", "originalCommit": "b82587a6cd1d48c2900cbdf659b499d62ffc6cf0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ4MDUwNw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/870#discussion_r436480507", "bodyText": "Hah, yeah :( I will change it", "author": "enchobelezirev", "createdAt": "2020-06-08T06:30:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxMDg1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxMTA3Ng==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/870#discussion_r435911076", "bodyText": "Do we need a transaction for the source database? We're just doing one SELECT to it.", "author": "nictas", "createdAt": "2020-06-05T13:12:06Z", "path": "com.sap.cloud.lm.sl.cf.database/src/main/java/com/sap/cloud/lm/sl/cf/database/migration/executor/DatabaseTableMigrationExecutor.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package com.sap.cloud.lm.sl.cf.database.migration.executor;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.text.MessageFormat;\n+import java.util.List;\n+\n+import org.apache.log4j.Logger;\n+import org.immutables.value.Value.Immutable;\n+\n+import com.sap.cloud.lm.sl.cf.database.migration.generator.DatabaseTableInsertQueryGenerator;\n+import com.sap.cloud.lm.sl.cf.database.migration.metadata.DatabaseTableColumnMetadata;\n+import com.sap.cloud.lm.sl.cf.database.migration.metadata.DatabaseTableMetadata;\n+import com.sap.cloud.lm.sl.cf.database.migration.metadata.ImmutableDatabaseTableColumnMetadata;\n+import com.sap.cloud.lm.sl.cf.database.migration.metadata.ImmutableDatabaseTableMetadata;\n+import com.sap.cloud.lm.sl.cf.persistence.util.JdbcUtil;\n+\n+@Immutable\n+public abstract class DatabaseTableMigrationExecutor extends DatabaseMigrationExecutor {\n+\n+    private final static Logger LOGGER = Logger.getLogger(DatabaseTableMigrationExecutor.class);\n+\n+    @Override\n+    public void executeMigrationInternal(String databaseTable) throws SQLException {\n+        LOGGER.info(MessageFormat.format(\"Migrating table \\\"{0}\\\"...\", databaseTable));\n+        DatabaseTableMetadata sourceTableMetadata = extractTableMetadataFromSourceDatabase(databaseTable);\n+        transferData(databaseTable, sourceTableMetadata);\n+    }\n+\n+    private DatabaseTableMetadata extractTableMetadataFromSourceDatabase(String databaseTable) throws SQLException {\n+        return getSqlQueryExecutor(getSourceDataSource()).executeWithAutoCommit((connection) -> {\n+            PreparedStatement statement = null;\n+            ResultSet resultSet = null;\n+            try {\n+                statement = connection.prepareStatement(String.format(\"SELECT * FROM %s\", databaseTable));\n+                resultSet = statement.executeQuery();\n+                return parseDatabaseTableMetadata(databaseTable, resultSet.getMetaData());\n+            } finally {\n+                JdbcUtil.closeQuietly(resultSet);\n+                JdbcUtil.closeQuietly(statement);\n+            }\n+        });\n+    }\n+\n+    private DatabaseTableMetadata parseDatabaseTableMetadata(String databaseTable, ResultSetMetaData resultSetMetadata)\n+        throws SQLException {\n+        ImmutableDatabaseTableMetadata.Builder tableMetadataBuilder = ImmutableDatabaseTableMetadata.builder()\n+                                                                                                    .tableName(databaseTable);\n+        for (int currentColumnIndex = 1; currentColumnIndex <= resultSetMetadata.getColumnCount(); currentColumnIndex++) {\n+            tableMetadataBuilder.addTableColumnsMetadata(ImmutableDatabaseTableColumnMetadata.builder()\n+                                                                                             .columnName(resultSetMetadata.getColumnName(currentColumnIndex))\n+                                                                                             .columnType(resultSetMetadata.getColumnTypeName(currentColumnIndex))\n+                                                                                             .build());\n+        }\n+        return tableMetadataBuilder.build();\n+    }\n+\n+    private void transferData(String databaseTable, DatabaseTableMetadata sourceTableMetadata) throws SQLException {\n+        LOGGER.info(MessageFormat.format(\"Transfering data for table \\\"{0}\\\"...\", databaseTable));\n+        String insertQuery = new DatabaseTableInsertQueryGenerator().generate(sourceTableMetadata);\n+        getSqlQueryExecutor(getSourceDataSource()).executeWithAutoCommit((sourceConnection) -> {", "originalCommit": "b82587a6cd1d48c2900cbdf659b499d62ffc6cf0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "72a77198a5663806edb4301c4eb2ac90d7a980e8", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/72a77198a5663806edb4301c4eb2ac90d7a980e8", "message": "Add factory for different database type", "committedDate": "2020-06-08T07:03:35Z", "type": "forcePushed"}, {"oid": "95813030a5fd96238d6573127de46b894ac907af", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/95813030a5fd96238d6573127de46b894ac907af", "message": "Add database migration project", "committedDate": "2020-06-09T07:08:10Z", "type": "commit"}, {"oid": "95813030a5fd96238d6573127de46b894ac907af", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/95813030a5fd96238d6573127de46b894ac907af", "message": "Add database migration project", "committedDate": "2020-06-09T07:08:10Z", "type": "forcePushed"}]}