{"pr_number": 956, "pr_title": "Migrate from RestTemplate to WebClient", "pr_createdAt": "2020-09-23T13:36:17Z", "pr_url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/956", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYzNjU4Mw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/956#discussion_r493636583", "bodyText": "Probably rename it to TaggingRequestFilterFunction to be suitable with the interface name", "author": "boyan-velinov", "createdAt": "2020-09-23T14:25:23Z", "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/cf/TaggingRequestFilter.java", "diffHunk": "@@ -1,14 +1,14 @@\n package org.cloudfoundry.multiapps.controller.core.cf;\n \n-import java.io.IOException;\n-\n import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpRequest;\n-import org.springframework.http.client.ClientHttpRequestExecution;\n-import org.springframework.http.client.ClientHttpRequestInterceptor;\n-import org.springframework.http.client.ClientHttpResponse;\n+import org.springframework.web.reactive.function.client.ClientRequest;\n+import org.springframework.web.reactive.function.client.ClientResponse;\n+import org.springframework.web.reactive.function.client.ExchangeFilterFunction;\n+import org.springframework.web.reactive.function.client.ExchangeFunction;\n+\n+import reactor.core.publisher.Mono;\n \n-class TaggingRequestInterceptor implements ClientHttpRequestInterceptor {\n+class TaggingRequestFilter implements ExchangeFilterFunction {", "originalCommit": "e2029e5bb0319f01e0770b018c15ae4d6e51e860", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1MTM1NQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/956#discussion_r493651355", "bodyText": "You can assign clientRequest.headers() to local field called \"actualHeaders\" and use it afterwads.", "author": "boyan-velinov", "createdAt": "2020-09-23T14:43:44Z", "path": "multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/cf/TaggingRequestFilterTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package org.cloudfoundry.multiapps.controller.core.cf;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.cloudfoundry.multiapps.controller.core.util.ApplicationConfiguration;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.client.reactive.ClientHttpRequest;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.reactive.function.BodyInserter;\n+import org.springframework.web.reactive.function.client.ClientRequest;\n+import org.springframework.web.reactive.function.client.ExchangeFunction;\n+import org.springframework.web.reactive.function.client.ExchangeStrategies;\n+\n+import reactor.core.publisher.Mono;\n+\n+public class TaggingRequestFilterTest {\n+\n+    private static final String TEST_VERSION_VALUE = \"1.58.0\";\n+    private static final String TEST_ORG_VALUE = \"faceorg\";\n+    private static final String TEST_SPACE_VALUE = \"myspace\";\n+    private HttpHeaders httpHeaders;\n+    private ClientRequest clientRequest;\n+    @Mock\n+    private ExchangeFunction nextFilter;\n+    @Mock\n+    private ApplicationConfiguration configuration;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        httpHeaders = new HttpHeaders();\n+        clientRequest = initializeClientRequest();\n+        MockitoAnnotations.openMocks(this)\n+                          .close();\n+    }\n+\n+    private ClientRequest initializeClientRequest() {\n+        return new ClientRequest() {\n+\n+            @Override\n+            public Map<String, Object> attributes() {\n+                return null;\n+            }\n+\n+            @Override\n+            public BodyInserter<?, ? super ClientHttpRequest> body() {\n+                return null;\n+            }\n+\n+            @Override\n+            public MultiValueMap<String, String> cookies() {\n+                return null;\n+            }\n+\n+            @Override\n+            public HttpHeaders headers() {\n+                return httpHeaders;\n+            }\n+\n+            @Override\n+            public String logPrefix() {\n+                return null;\n+            }\n+\n+            @Override\n+            public HttpMethod method() {\n+                return null;\n+            }\n+\n+            @Override\n+            public URI url() {\n+                return null;\n+            }\n+\n+            @Override\n+            public Mono<Void> writeTo(ClientHttpRequest arg0, ExchangeStrategies arg1) {\n+                return null;\n+            }\n+        };\n+    }\n+\n+    @Test\n+    public void testInjectGenericValue() throws IOException {\n+        TaggingRequestFilter testedFilter = new TaggingRequestFilter(\"1.58.0\");\n+        testedFilter.filter(clientRequest, nextFilter);\n+        assertNotNull(clientRequest.headers());", "originalCommit": "e2029e5bb0319f01e0770b018c15ae4d6e51e860", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1MzcwMA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/956#discussion_r493653700", "bodyText": "You can simplify by using assertEquals(expectedValue, actualHeaders.getFirst(TaggingRequestFilter.TAG_HEADER_NAME))", "author": "boyan-velinov", "createdAt": "2020-09-23T14:46:44Z", "path": "multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/cf/TaggingRequestFilterTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package org.cloudfoundry.multiapps.controller.core.cf;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.cloudfoundry.multiapps.controller.core.util.ApplicationConfiguration;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.client.reactive.ClientHttpRequest;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.reactive.function.BodyInserter;\n+import org.springframework.web.reactive.function.client.ClientRequest;\n+import org.springframework.web.reactive.function.client.ExchangeFunction;\n+import org.springframework.web.reactive.function.client.ExchangeStrategies;\n+\n+import reactor.core.publisher.Mono;\n+\n+public class TaggingRequestFilterTest {\n+\n+    private static final String TEST_VERSION_VALUE = \"1.58.0\";\n+    private static final String TEST_ORG_VALUE = \"faceorg\";\n+    private static final String TEST_SPACE_VALUE = \"myspace\";\n+    private HttpHeaders httpHeaders;\n+    private ClientRequest clientRequest;\n+    @Mock\n+    private ExchangeFunction nextFilter;\n+    @Mock\n+    private ApplicationConfiguration configuration;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        httpHeaders = new HttpHeaders();\n+        clientRequest = initializeClientRequest();\n+        MockitoAnnotations.openMocks(this)\n+                          .close();\n+    }\n+\n+    private ClientRequest initializeClientRequest() {\n+        return new ClientRequest() {\n+\n+            @Override\n+            public Map<String, Object> attributes() {\n+                return null;\n+            }\n+\n+            @Override\n+            public BodyInserter<?, ? super ClientHttpRequest> body() {\n+                return null;\n+            }\n+\n+            @Override\n+            public MultiValueMap<String, String> cookies() {\n+                return null;\n+            }\n+\n+            @Override\n+            public HttpHeaders headers() {\n+                return httpHeaders;\n+            }\n+\n+            @Override\n+            public String logPrefix() {\n+                return null;\n+            }\n+\n+            @Override\n+            public HttpMethod method() {\n+                return null;\n+            }\n+\n+            @Override\n+            public URI url() {\n+                return null;\n+            }\n+\n+            @Override\n+            public Mono<Void> writeTo(ClientHttpRequest arg0, ExchangeStrategies arg1) {\n+                return null;\n+            }\n+        };\n+    }\n+\n+    @Test\n+    public void testInjectGenericValue() throws IOException {\n+        TaggingRequestFilter testedFilter = new TaggingRequestFilter(\"1.58.0\");\n+        testedFilter.filter(clientRequest, nextFilter);\n+        assertNotNull(clientRequest.headers());\n+        assertTrue(clientRequest.headers()\n+                                .containsKey(TaggingRequestFilter.TAG_HEADER_NAME));\n+        String expectedValue = \"MTA deploy-service v1.58.0\";\n+        Optional<String> foundValue = clientRequest.headers()", "originalCommit": "e2029e5bb0319f01e0770b018c15ae4d6e51e860", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1NTM0MQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/956#discussion_r493655341", "bodyText": "I think this unit test is not needed because it is already covered.", "author": "boyan-velinov", "createdAt": "2020-09-23T14:48:44Z", "path": "multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/cf/TaggingRequestFilterTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package org.cloudfoundry.multiapps.controller.core.cf;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.cloudfoundry.multiapps.controller.core.util.ApplicationConfiguration;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.client.reactive.ClientHttpRequest;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.reactive.function.BodyInserter;\n+import org.springframework.web.reactive.function.client.ClientRequest;\n+import org.springframework.web.reactive.function.client.ExchangeFunction;\n+import org.springframework.web.reactive.function.client.ExchangeStrategies;\n+\n+import reactor.core.publisher.Mono;\n+\n+public class TaggingRequestFilterTest {\n+\n+    private static final String TEST_VERSION_VALUE = \"1.58.0\";\n+    private static final String TEST_ORG_VALUE = \"faceorg\";\n+    private static final String TEST_SPACE_VALUE = \"myspace\";\n+    private HttpHeaders httpHeaders;\n+    private ClientRequest clientRequest;\n+    @Mock\n+    private ExchangeFunction nextFilter;\n+    @Mock\n+    private ApplicationConfiguration configuration;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        httpHeaders = new HttpHeaders();\n+        clientRequest = initializeClientRequest();\n+        MockitoAnnotations.openMocks(this)\n+                          .close();\n+    }\n+\n+    private ClientRequest initializeClientRequest() {\n+        return new ClientRequest() {\n+\n+            @Override\n+            public Map<String, Object> attributes() {\n+                return null;\n+            }\n+\n+            @Override\n+            public BodyInserter<?, ? super ClientHttpRequest> body() {\n+                return null;\n+            }\n+\n+            @Override\n+            public MultiValueMap<String, String> cookies() {\n+                return null;\n+            }\n+\n+            @Override\n+            public HttpHeaders headers() {\n+                return httpHeaders;\n+            }\n+\n+            @Override\n+            public String logPrefix() {\n+                return null;\n+            }\n+\n+            @Override\n+            public HttpMethod method() {\n+                return null;\n+            }\n+\n+            @Override\n+            public URI url() {\n+                return null;\n+            }\n+\n+            @Override\n+            public Mono<Void> writeTo(ClientHttpRequest arg0, ExchangeStrategies arg1) {\n+                return null;\n+            }\n+        };\n+    }\n+\n+    @Test\n+    public void testInjectGenericValue() throws IOException {\n+        TaggingRequestFilter testedFilter = new TaggingRequestFilter(\"1.58.0\");\n+        testedFilter.filter(clientRequest, nextFilter);\n+        assertNotNull(clientRequest.headers());\n+        assertTrue(clientRequest.headers()\n+                                .containsKey(TaggingRequestFilter.TAG_HEADER_NAME));\n+        String expectedValue = \"MTA deploy-service v1.58.0\";\n+        Optional<String> foundValue = clientRequest.headers()\n+                                                   .get(TaggingRequestFilter.TAG_HEADER_NAME)\n+                                                   .stream()\n+                                                   .filter(value -> value.equals(expectedValue))\n+                                                   .findFirst();\n+        assertTrue(foundValue.isPresent());\n+    }\n+\n+    @Test\n+    public void testInjectOrgAndSpaceValues() throws IOException {\n+        TaggingRequestFilter testedFilter = new TaggingRequestFilter(TEST_VERSION_VALUE, TEST_ORG_VALUE, TEST_SPACE_VALUE);\n+        testedFilter.filter(clientRequest, nextFilter);\n+        HttpHeaders headers = clientRequest.headers();\n+        assertNotNull(headers);\n+        assertTrue(headers.containsKey(TaggingRequestFilter.TAG_HEADER_ORG_NAME));\n+        assertTrue(headers.containsKey(TaggingRequestFilter.TAG_HEADER_SPACE_NAME));\n+        String expectedValue = \"MTA deploy-service v1.58.0\";\n+        Optional<String> foundValue = headers.get(TaggingRequestFilter.TAG_HEADER_NAME)\n+                                             .stream()\n+                                             .filter(value -> value.equals(expectedValue))\n+                                             .findFirst();\n+        assertTrue(foundValue.isPresent());\n+        Optional<String> foundOrgValue = headers.get(TaggingRequestFilter.TAG_HEADER_ORG_NAME)\n+                                                .stream()\n+                                                .filter(value -> value.equals(TEST_ORG_VALUE))\n+                                                .findFirst();\n+        assertTrue(foundOrgValue.isPresent());\n+        Optional<String> foundSpaceValue = headers.get(TaggingRequestFilter.TAG_HEADER_SPACE_NAME)\n+                                                  .stream()\n+                                                  .filter(value -> value.equals(TEST_SPACE_VALUE))\n+                                                  .findFirst();\n+        assertTrue(foundSpaceValue.isPresent());\n+\n+    }\n+\n+    @Test\n+    public void testGetHeaderValue() {", "originalCommit": "e2029e5bb0319f01e0770b018c15ae4d6e51e860", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1ODI2Nw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/956#discussion_r493658267", "bodyText": "Why so many unit tests? I think that some of them tests the same thing.\nYou can prepare one larger unit tests that tests every tag, other option is to have 3 different unit tests for each tag", "author": "boyan-velinov", "createdAt": "2020-09-23T14:52:09Z", "path": "multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/cf/TaggingRequestFilterTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package org.cloudfoundry.multiapps.controller.core.cf;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.cloudfoundry.multiapps.controller.core.util.ApplicationConfiguration;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.client.reactive.ClientHttpRequest;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.reactive.function.BodyInserter;\n+import org.springframework.web.reactive.function.client.ClientRequest;\n+import org.springframework.web.reactive.function.client.ExchangeFunction;\n+import org.springframework.web.reactive.function.client.ExchangeStrategies;\n+\n+import reactor.core.publisher.Mono;\n+\n+public class TaggingRequestFilterTest {\n+\n+    private static final String TEST_VERSION_VALUE = \"1.58.0\";\n+    private static final String TEST_ORG_VALUE = \"faceorg\";\n+    private static final String TEST_SPACE_VALUE = \"myspace\";\n+    private HttpHeaders httpHeaders;\n+    private ClientRequest clientRequest;\n+    @Mock\n+    private ExchangeFunction nextFilter;\n+    @Mock\n+    private ApplicationConfiguration configuration;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        httpHeaders = new HttpHeaders();\n+        clientRequest = initializeClientRequest();\n+        MockitoAnnotations.openMocks(this)\n+                          .close();\n+    }\n+\n+    private ClientRequest initializeClientRequest() {\n+        return new ClientRequest() {\n+\n+            @Override\n+            public Map<String, Object> attributes() {\n+                return null;\n+            }\n+\n+            @Override\n+            public BodyInserter<?, ? super ClientHttpRequest> body() {\n+                return null;\n+            }\n+\n+            @Override\n+            public MultiValueMap<String, String> cookies() {\n+                return null;\n+            }\n+\n+            @Override\n+            public HttpHeaders headers() {\n+                return httpHeaders;\n+            }\n+\n+            @Override\n+            public String logPrefix() {\n+                return null;\n+            }\n+\n+            @Override\n+            public HttpMethod method() {\n+                return null;\n+            }\n+\n+            @Override\n+            public URI url() {\n+                return null;\n+            }\n+\n+            @Override\n+            public Mono<Void> writeTo(ClientHttpRequest arg0, ExchangeStrategies arg1) {\n+                return null;\n+            }\n+        };\n+    }\n+\n+    @Test\n+    public void testInjectGenericValue() throws IOException {\n+        TaggingRequestFilter testedFilter = new TaggingRequestFilter(\"1.58.0\");\n+        testedFilter.filter(clientRequest, nextFilter);\n+        assertNotNull(clientRequest.headers());\n+        assertTrue(clientRequest.headers()\n+                                .containsKey(TaggingRequestFilter.TAG_HEADER_NAME));\n+        String expectedValue = \"MTA deploy-service v1.58.0\";\n+        Optional<String> foundValue = clientRequest.headers()\n+                                                   .get(TaggingRequestFilter.TAG_HEADER_NAME)\n+                                                   .stream()\n+                                                   .filter(value -> value.equals(expectedValue))\n+                                                   .findFirst();\n+        assertTrue(foundValue.isPresent());\n+    }\n+\n+    @Test\n+    public void testInjectOrgAndSpaceValues() throws IOException {", "originalCommit": "e2029e5bb0319f01e0770b018c15ae4d6e51e860", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "da605e63e48410fd38f52b0b357d23c5c19b5b2e", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/da605e63e48410fd38f52b0b357d23c5c19b5b2e", "message": "Migrate from RestTemplate to WebClient", "committedDate": "2020-09-24T12:48:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc4NjkzOA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/956#discussion_r494786938", "bodyText": "This was executed with retry... xD /facepalm", "author": "nictas", "createdAt": "2020-09-25T07:00:29Z", "path": "multiapps-controller-client/src/main/java/org/cloudfoundry/multiapps/controller/client/ResilientCloudControllerClient.java", "diffHunk": "@@ -569,21 +567,6 @@ public void logout() {\n         executeWithRetry(delegate::logout);\n     }\n \n-    @Override\n-    public void registerRestLogListener(RestLogCallback callBack) {\n-        executeWithRetry(() -> delegate.registerRestLogListener(callBack));", "originalCommit": "da605e63e48410fd38f52b0b357d23c5c19b5b2e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgyNzAzMQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/956#discussion_r494827031", "bodyText": "Order these alphabetically for easier navigation.", "author": "nictas", "createdAt": "2020-09-25T08:21:22Z", "path": "multiapps-controller-core/src/main/java/module-info.java", "diffHunk": "@@ -76,6 +76,8 @@\n     requires spring.security.core;\n     requires spring.security.jwt;\n     requires spring.web;\n+    requires spring.webflux;\n+    requires reactor.core;", "originalCommit": "da605e63e48410fd38f52b0b357d23c5c19b5b2e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d1975655056a7aa0e1f243169716fce47a4d7740", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/d1975655056a7aa0e1f243169716fce47a4d7740", "message": "Set cloudfoundry java client version to 1.30.0-SNAPSHOT", "committedDate": "2020-09-25T12:44:16Z", "type": "commit"}, {"oid": "4cb8928950ab0296c865c9a1966f851fb1084256", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/4cb8928950ab0296c865c9a1966f851fb1084256", "message": "Add spring-webflux dependency and update module-info file", "committedDate": "2020-09-25T12:44:16Z", "type": "commit"}, {"oid": "ef493962a7b26f378c9fc8636c9d7314dfe91576", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/ef493962a7b26f378c9fc8636c9d7314dfe91576", "message": "Migrate from RestTemplate to WebClient", "committedDate": "2020-09-25T12:44:16Z", "type": "commit"}, {"oid": "ef493962a7b26f378c9fc8636c9d7314dfe91576", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/ef493962a7b26f378c9fc8636c9d7314dfe91576", "message": "Migrate from RestTemplate to WebClient", "committedDate": "2020-09-25T12:44:16Z", "type": "forcePushed"}]}