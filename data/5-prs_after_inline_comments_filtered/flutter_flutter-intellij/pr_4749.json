{"pr_number": 4749, "pr_title": "Show run console and skip breakpoints during test run", "pr_createdAt": "2020-08-07T16:55:51Z", "pr_url": "https://github.com/flutter/flutter-intellij/pull/4749", "timeline": [{"oid": "2b25dafe7885bd30fc4cb589db3dddf18f25223c", "url": "https://github.com/flutter/flutter-intellij/commit/2b25dafe7885bd30fc4cb589db3dddf18f25223c", "message": "Add run test path", "committedDate": "2020-08-07T16:50:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE1ODc3OQ==", "url": "https://github.com/flutter/flutter-intellij/pull/4749#discussion_r467158779", "bodyText": "In DartVmServiceDebugProcess::scheduleConnect there's a check for whether the debug session has ended before the connection starts, but I'm not sure what the equivalent is to check for here.", "author": "helin24", "createdAt": "2020-08-07T16:57:45Z", "path": "src/io/flutter/run/test/FlutterTestRunner.java", "diffHunk": "@@ -62,9 +71,64 @@ public boolean canRun(@NotNull String executorId, @NotNull RunProfile profile) {\n   @Override\n   protected RunContentDescriptor doExecute(@NotNull RunProfileState state, @NotNull ExecutionEnvironment env)\n     throws ExecutionException {\n-    return runInDebugger((TestLaunchState)state, env);\n+    if (env.getExecutor().getId().equals(ToolWindowId.RUN)) {\n+      return run((TestLaunchState)state, env);\n+    } else {\n+      return runInDebugger((TestLaunchState)state, env);\n+    }\n   }\n \n+  protected RunContentDescriptor run(@NotNull TestLaunchState launcher, @NotNull ExecutionEnvironment env)\n+    throws ExecutionException {\n+    final ExecutionResult executionResult = launcher.execute(env.getExecutor(), this);\n+    final ObservatoryConnector connector = new Connector(executionResult.getProcessHandler());\n+\n+    ApplicationManager.getApplication().executeOnPooledThread(() -> {\n+      // Poll, waiting for \"flutter run\" to give us a websocket.\n+      // This is adapted from DartVmServiceDebugProcess::scheduleConnect\n+      String url = connector.getWebSocketUrl();\n+\n+      while (url == null) {", "originalCommit": "2b25dafe7885bd30fc4cb589db3dddf18f25223c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5MjMwNQ==", "url": "https://github.com/flutter/flutter-intellij/pull/4749#discussion_r467192305", "bodyText": "Is there a process we can query here, to see if it's still alive? I image there's something in the run state that we can check.", "author": "devoncarew", "createdAt": "2020-08-07T18:06:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE1ODc3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI1NDE5Mg==", "url": "https://github.com/flutter/flutter-intellij/pull/4749#discussion_r467254192", "bodyText": "The other changes (in the new commit) look good.\nI assume from the question here that you'd want to find a way to address this (checking for process termination) before landing this PR?", "author": "devoncarew", "createdAt": "2020-08-07T20:28:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE1ODc3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI1OTE5Mw==", "url": "https://github.com/flutter/flutter-intellij/pull/4749#discussion_r467259193", "bodyText": "Yeah I didn't find an easy way to do this but figured I'd look around a little more.", "author": "helin24", "createdAt": "2020-08-07T20:41:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE1ODc3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI2OTI4OA==", "url": "https://github.com/flutter/flutter-intellij/pull/4749#discussion_r467269288", "bodyText": "Exposing the process handler status seems to work here.", "author": "helin24", "createdAt": "2020-08-07T21:07:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE1ODc3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5MzE0Mg==", "url": "https://github.com/flutter/flutter-intellij/pull/4749#discussion_r467193142", "bodyText": "Can this declaration move inside the try block?", "author": "devoncarew", "createdAt": "2020-08-07T18:07:48Z", "path": "src/io/flutter/run/test/FlutterTestRunner.java", "diffHunk": "@@ -62,9 +71,64 @@ public boolean canRun(@NotNull String executorId, @NotNull RunProfile profile) {\n   @Override\n   protected RunContentDescriptor doExecute(@NotNull RunProfileState state, @NotNull ExecutionEnvironment env)\n     throws ExecutionException {\n-    return runInDebugger((TestLaunchState)state, env);\n+    if (env.getExecutor().getId().equals(ToolWindowId.RUN)) {\n+      return run((TestLaunchState)state, env);\n+    } else {\n+      return runInDebugger((TestLaunchState)state, env);\n+    }\n   }\n \n+  protected RunContentDescriptor run(@NotNull TestLaunchState launcher, @NotNull ExecutionEnvironment env)\n+    throws ExecutionException {\n+    final ExecutionResult executionResult = launcher.execute(env.getExecutor(), this);\n+    final ObservatoryConnector connector = new Connector(executionResult.getProcessHandler());\n+\n+    ApplicationManager.getApplication().executeOnPooledThread(() -> {\n+      // Poll, waiting for \"flutter run\" to give us a websocket.\n+      // This is adapted from DartVmServiceDebugProcess::scheduleConnect\n+      String url = connector.getWebSocketUrl();\n+\n+      while (url == null) {\n+        TimeoutUtil.sleep(100);\n+        url = connector.getWebSocketUrl();\n+      }\n+\n+      final VmService vmService;", "originalCommit": "2b25dafe7885bd30fc4cb589db3dddf18f25223c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5MzQwOQ==", "url": "https://github.com/flutter/flutter-intellij/pull/4749#discussion_r467193409", "bodyText": "Perhaps add a comment indicating that we're looking to resume any paused-at-start isolates here.", "author": "devoncarew", "createdAt": "2020-08-07T18:08:18Z", "path": "src/io/flutter/run/test/FlutterTestRunner.java", "diffHunk": "@@ -62,9 +71,64 @@ public boolean canRun(@NotNull String executorId, @NotNull RunProfile profile) {\n   @Override\n   protected RunContentDescriptor doExecute(@NotNull RunProfileState state, @NotNull ExecutionEnvironment env)\n     throws ExecutionException {\n-    return runInDebugger((TestLaunchState)state, env);\n+    if (env.getExecutor().getId().equals(ToolWindowId.RUN)) {\n+      return run((TestLaunchState)state, env);\n+    } else {\n+      return runInDebugger((TestLaunchState)state, env);\n+    }\n   }\n \n+  protected RunContentDescriptor run(@NotNull TestLaunchState launcher, @NotNull ExecutionEnvironment env)\n+    throws ExecutionException {\n+    final ExecutionResult executionResult = launcher.execute(env.getExecutor(), this);\n+    final ObservatoryConnector connector = new Connector(executionResult.getProcessHandler());\n+\n+    ApplicationManager.getApplication().executeOnPooledThread(() -> {\n+      // Poll, waiting for \"flutter run\" to give us a websocket.\n+      // This is adapted from DartVmServiceDebugProcess::scheduleConnect\n+      String url = connector.getWebSocketUrl();\n+\n+      while (url == null) {\n+        TimeoutUtil.sleep(100);\n+        url = connector.getWebSocketUrl();\n+      }\n+\n+      final VmService vmService;\n+      try {\n+        vmService = VmService.connect(url);", "originalCommit": "2b25dafe7885bd30fc4cb589db3dddf18f25223c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "66f9950c585f959031aba7ed01984f171f3936cb", "url": "https://github.com/flutter/flutter-intellij/commit/66f9950c585f959031aba7ed01984f171f3936cb", "message": "Move vmservice declaration and add comment", "committedDate": "2020-08-07T19:04:03Z", "type": "commit"}, {"oid": "c222ba96a143468c12e281129fe5397b245cacb1", "url": "https://github.com/flutter/flutter-intellij/commit/c222ba96a143468c12e281129fe5397b245cacb1", "message": "Add check for whether process has terminated", "committedDate": "2020-08-07T21:06:57Z", "type": "commit"}, {"oid": "11a91f514c121c8a619bd4f5caa9f04f3f5f2da3", "url": "https://github.com/flutter/flutter-intellij/commit/11a91f514c121c8a619bd4f5caa9f04f3f5f2da3", "message": "Edit comment", "committedDate": "2020-08-10T16:23:51Z", "type": "commit"}]}