{"pr_number": 4664, "pr_title": "Add JxBrowser dependencies and show in panel", "pr_createdAt": "2020-06-26T20:59:53Z", "pr_url": "https://github.com/flutter/flutter-intellij/pull/4664", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzNTI4OA==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r446435288", "bodyText": "Delete this class.", "author": "stevemessick", "createdAt": "2020-06-26T22:21:50Z", "path": "src/io/flutter/actions/TestJxBrowserAction.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package io.flutter.actions;", "originalCommit": "b4546cb938f0ebaa85e41408f7208cd08bb94fc2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzNTYyNQ==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r446435625", "bodyText": "Get this key from an environment variable. And document it :)", "author": "stevemessick", "createdAt": "2020-06-26T22:23:08Z", "path": "src/io/flutter/view/FlutterView.java", "diffHunk": "@@ -182,11 +177,11 @@ private PerAppState getOrCreateStateForApp(FlutterApp app) {\n   }\n \n   private void addInspectorViewContent(FlutterApp app, @Nullable InspectorService inspectorService, ToolWindow toolWindow) {\n+    String browserUrl = app.getConnector().getBrowserUrl();\n+\n+    System.setProperty(\"jxbrowser.license.key\", \"6P830J66YAO1XQRI1FNEXP8ZTHUOQTY2YUJRCN9RTARQ58QFAP63GRRH20B3P5PB7PC8\");", "originalCommit": "b4546cb938f0ebaa85e41408f7208cd08bb94fc2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0NTE1Nw==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r446445157", "bodyText": "Ah yeah, I have tried it as an environment variable, but I'm unclear on whether we eventually want to expose the key  or if this is something that's part of the build but not in the source code. Is it okay to have the key in our .iml file?", "author": "helin24", "createdAt": "2020-06-26T23:01:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzNTYyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ1NjUzNg==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r446456536", "bodyText": "In general, auth keys are not included in source code, whether java or iml.\nI'm not sure what the commercial auth is like. I saw some issues referring to files used for authentication, but that may have been an earlier version. In any case, this will need to be part of the build process.", "author": "stevemessick", "createdAt": "2020-06-27T00:02:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzNTYyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwOTQzNQ==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r453109435", "bodyText": "Consider doing something like reading the key from a properties file, having a demo / mock key checked in for that file, and overwriting the file with the real key as part of the build process.", "author": "devoncarew", "createdAt": "2020-07-10T22:45:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzNTYyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ1NzI5Mw==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r446457293", "bodyText": "This should be rolled back. I'm pretty sure we settled on enumerating all imports.", "author": "stevemessick", "createdAt": "2020-06-27T00:07:19Z", "path": "src/io/flutter/run/FlutterDebugProcess.java", "diffHunk": "@@ -17,10 +17,7 @@\n import com.intellij.xdebugger.XDebugSession;\n import com.jetbrains.lang.dart.util.DartUrlResolver;\n import io.flutter.FlutterUtils;\n-import io.flutter.actions.ReloadAllFlutterApps;\n-import io.flutter.actions.ReloadFlutterApp;\n-import io.flutter.actions.RestartAllFlutterApps;\n-import io.flutter.actions.RestartFlutterApp;\n+import io.flutter.actions.*;", "originalCommit": "08bc36fe38b69df2f14086a422b0c38468b4f890", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5ae17912e82e76e2e263625e3ace8dc49deeab9b", "url": "https://github.com/flutter/flutter-intellij/commit/5ae17912e82e76e2e263625e3ace8dc49deeab9b", "message": "Add JxBrowser dependencies", "committedDate": "2020-07-01T22:28:12Z", "type": "commit"}, {"oid": "d35905b7834b0ac80b958f5186a9c13b2d812511", "url": "https://github.com/flutter/flutter-intellij/commit/d35905b7834b0ac80b958f5186a9c13b2d812511", "message": "Add JxBrowser dependencies and show in panel", "committedDate": "2020-07-01T22:28:19Z", "type": "commit"}, {"oid": "cc5ef996e1e623435857ee5eb9d2c38c0492d8bf", "url": "https://github.com/flutter/flutter-intellij/commit/cc5ef996e1e623435857ee5eb9d2c38c0492d8bf", "message": "Remove test action", "committedDate": "2020-07-01T22:37:45Z", "type": "commit"}, {"oid": "cc5ef996e1e623435857ee5eb9d2c38c0492d8bf", "url": "https://github.com/flutter/flutter-intellij/commit/cc5ef996e1e623435857ee5eb9d2c38c0492d8bf", "message": "Remove test action", "committedDate": "2020-07-01T22:37:45Z", "type": "forcePushed"}, {"oid": "e57d95444ee7af15c8b54712a8902e52e85cf623", "url": "https://github.com/flutter/flutter-intellij/commit/e57d95444ee7af15c8b54712a8902e52e85cf623", "message": "Fix imports", "committedDate": "2020-07-01T22:57:01Z", "type": "commit"}, {"oid": "dbf49a15c4aee3dedf3e52b0fe7fa27336f4b375", "url": "https://github.com/flutter/flutter-intellij/commit/dbf49a15c4aee3dedf3e52b0fe7fa27336f4b375", "message": "Revert configuration changes after gradle commit", "committedDate": "2020-07-02T01:43:34Z", "type": "commit"}, {"oid": "c7660293f4ccb8cd90f308419739653f343190d6", "url": "https://github.com/flutter/flutter-intellij/commit/c7660293f4ccb8cd90f308419739653f343190d6", "message": "Add jxbrowser api files", "committedDate": "2020-07-06T17:52:55Z", "type": "commit"}, {"oid": "4f39ab4fdd413fb2eed06625bba5a334c3b9200b", "url": "https://github.com/flutter/flutter-intellij/commit/4f39ab4fdd413fb2eed06625bba5a334c3b9200b", "message": "Add function for getting download path", "committedDate": "2020-07-06T21:02:29Z", "type": "commit"}, {"oid": "3fafb9671f2b1da71b8e66c084218adbf9567a3d", "url": "https://github.com/flutter/flutter-intellij/commit/3fafb9671f2b1da71b8e66c084218adbf9567a3d", "message": "Download jxbrowser file for platform", "committedDate": "2020-07-07T03:40:31Z", "type": "commit"}, {"oid": "1918d71355d4d120ee0e9c0d50812fc5f4fb3370", "url": "https://github.com/flutter/flutter-intellij/commit/1918d71355d4d120ee0e9c0d50812fc5f4fb3370", "message": "Use classloader to load jxbrowser", "committedDate": "2020-07-07T17:42:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0NDA3Nw==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r451044077", "bodyText": "I think we should do a little refactoring. See AddToAppUtils.getStaticFieldValue(). If you move that method to, say, SystemUtils then you can just use it here. Unfortunately, I defined it in a class that's part of flutter-studio so you can't use it directly.", "author": "stevemessick", "createdAt": "2020-07-07T17:55:55Z", "path": "src/io/flutter/ProjectOpenActivity.java", "diffHunk": "@@ -35,12 +54,73 @@\n public class ProjectOpenActivity implements StartupActivity, DumbAware {\n   public static final ProjectType FLUTTER_PROJECT_TYPE = new ProjectType(\"io.flutter\");\n   private static final Logger LOG = Logger.getInstance(ProjectOpenActivity.class);\n+  private static final String DOWNLOAD_PATH = FileUtils.platformPath();\n \n   public ProjectOpenActivity() {\n   }\n \n+  private void verifyJxBrowser(Project project) {\n+    final File directory = new File(DOWNLOAD_PATH);\n+    if (!directory.exists()) {\n+      //noinspection ResultOfMethodCallIgnored\n+      directory.mkdirs();\n+    }\n+\n+    String jxbrowserFileName = JxBrowserUtils.getPlatformFileName();\n+    final File jxbrowserPlatformFile = new File(DOWNLOAD_PATH + File.separator + jxbrowserFileName);\n+    if (jxbrowserPlatformFile.exists()) {\n+      // Skip downloading\n+      System.out.println(\"JxBrowser platform file already exists\");\n+      loadClasses(jxbrowserPlatformFile);\n+      return;\n+    }\n+\n+    DownloadableFileService service = DownloadableFileService.getInstance();\n+    DownloadableFileDescription description = service.createFileDescription(JxBrowserUtils.getDistributionLink(jxbrowserFileName), jxbrowserFileName);\n+    FileDownloader downloader = service.createDownloader(Collections.singletonList(description), jxbrowserFileName);\n+\n+    Task.Backgroundable task = new Task.Backgroundable(project, \"Downloading jxbrowser\") {\n+      @Override\n+      public void run(@NotNull ProgressIndicator indicator) {\n+        try {\n+          List<Pair<File, DownloadableFileDescription>> pairs = downloader.download(new File(DOWNLOAD_PATH));\n+          Pair<File, DownloadableFileDescription> first = ContainerUtil.getFirstItem(pairs);\n+          File file = first != null ? first.first : null;\n+          if (file != null) {\n+            System.out.println(\"File downloaded: \" + file.getAbsolutePath());\n+          }\n+          loadClasses(file);\n+        }\n+        catch (IOException e) {\n+          System.out.println(\"Unable to download file\");\n+        }\n+      }\n+    };\n+    BackgroundableProcessIndicator processIndicator = new BackgroundableProcessIndicator(task);\n+    processIndicator.setIndeterminate(false);\n+    ProgressManager.getInstance().runProcessWithProgressAsynchronously(task, processIndicator);\n+  }\n+\n+  private void loadClasses(File file) {", "originalCommit": "1918d71355d4d120ee0e9c0d50812fc5f4fb3370", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA3MTIyNg==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r451071226", "bodyText": "Should this function return the addUrl method? Something like Method method = SystemUtils.getStaticFieldValue(URLClassLoader.class, Function<String, void>.class, \"addUrl\"); to replace everything before method.invoke(classLoader, url); ?", "author": "helin24", "createdAt": "2020-07-07T18:45:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0NDA3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEzMTU2OQ==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r451131569", "bodyText": "Hmm, I don't know what I was thinking. See various methods in ReflectionUtils for helpers that do some of what you're doing here. Please ignore AddToAppUtils.", "author": "stevemessick", "createdAt": "2020-07-07T20:43:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0NDA3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0NzQyNA==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r451047424", "bodyText": "I'm not sure JetBrains approves of outsiders (like us) modifying their internal data. If we make this \"Google\" then it can be shared with all IDEs, and the file will be only downloaded once.", "author": "stevemessick", "createdAt": "2020-07-07T18:01:23Z", "path": "src/io/flutter/utils/FileUtils.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 The Chromium Authors. All rights reserved.\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+package io.flutter.utils;\n+\n+import com.intellij.openapi.util.SystemInfoRt;\n+import com.intellij.util.SystemProperties;\n+\n+public class FileUtils {\n+  private static final String IDE_VENDOR_NAME = System.getProperty(\"idea.vendor.name\", \"JetBrains\");", "originalCommit": "1918d71355d4d120ee0e9c0d50812fc5f4fb3370", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3991f409800afdf03761a638bd65b857338a6791", "url": "https://github.com/flutter/flutter-intellij/commit/3991f409800afdf03761a638bd65b857338a6791", "message": "Change directory to google for storing jxbrowser file", "committedDate": "2020-07-07T18:50:46Z", "type": "commit"}, {"oid": "6ecc0253cbf31ecc0f5045d2f4f27f40024e1aba", "url": "https://github.com/flutter/flutter-intellij/commit/6ecc0253cbf31ecc0f5045d2f4f27f40024e1aba", "message": "Use reflection util to get method", "committedDate": "2020-07-07T23:23:51Z", "type": "commit"}, {"oid": "9679bc877eedeb95f958b5a2c6272f1c6ab50a22", "url": "https://github.com/flutter/flutter-intellij/commit/9679bc877eedeb95f958b5a2c6272f1c6ab50a22", "message": "Move jxbrowser setup to separate class", "committedDate": "2020-07-07T23:30:12Z", "type": "commit"}, {"oid": "6a3a0656d211b24f60004a39cb4e2c386c1f7a8b", "url": "https://github.com/flutter/flutter-intellij/commit/6a3a0656d211b24f60004a39cb4e2c386c1f7a8b", "message": "Manage one download between projects\n\nThis adds a loading file indicating that the JxBrowser platform file is\nbeing downloaded so that we can avoid multiple downloads.\n\nMaybe there's a better way to do this?", "committedDate": "2020-07-08T00:26:07Z", "type": "commit"}, {"oid": "6a3a0656d211b24f60004a39cb4e2c386c1f7a8b", "url": "https://github.com/flutter/flutter-intellij/commit/6a3a0656d211b24f60004a39cb4e2c386c1f7a8b", "message": "Manage one download between projects\n\nThis adds a loading file indicating that the JxBrowser platform file is\nbeing downloaded so that we can avoid multiple downloads.\n\nMaybe there's a better way to do this?", "committedDate": "2020-07-08T00:26:07Z", "type": "forcePushed"}, {"oid": "5ec21967a7eacd830f5c875fce21a41b0a21fba3", "url": "https://github.com/flutter/flutter-intellij/commit/5ec21967a7eacd830f5c875fce21a41b0a21fba3", "message": "Use static var to track loading across projects\n\nCan test this by opening workbench with two projects, verify that\nloading only occurs once (for whichever project opens first), then\nverify that devtools panel opens in the other project", "committedDate": "2020-07-08T17:17:54Z", "type": "commit"}, {"oid": "7af1cc89ab73474af6106666c5a5a39ce2900868", "url": "https://github.com/flutter/flutter-intellij/commit/7af1cc89ab73474af6106666c5a5a39ce2900868", "message": "Use logger and better comments", "committedDate": "2020-07-08T18:35:38Z", "type": "commit"}, {"oid": "54506e3d859fffe29ec66486c42bea2d34e39a01", "url": "https://github.com/flutter/flutter-intellij/commit/54506e3d859fffe29ec66486c42bea2d34e39a01", "message": "Download api and swing files dynamically as well", "committedDate": "2020-07-08T23:46:35Z", "type": "commit"}, {"oid": "f15db7120df36311dbd650757ca637c15d38debf", "url": "https://github.com/flutter/flutter-intellij/commit/f15db7120df36311dbd650757ca637c15d38debf", "message": "Match size of container when inserting browser", "committedDate": "2020-07-09T19:08:15Z", "type": "commit"}, {"oid": "4d9e7d03fcca518c41bdf707eb21db66c51a2b5a", "url": "https://github.com/flutter/flutter-intellij/commit/4d9e7d03fcca518c41bdf707eb21db66c51a2b5a", "message": "Remove unused function", "committedDate": "2020-07-09T21:42:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwODUyOA==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r453108528", "bodyText": "I think we only want to start this if we know this is a flutter project; I'd move this down somewhere below the declaresFlutter check.", "author": "devoncarew", "createdAt": "2020-07-10T22:42:26Z", "path": "src/io/flutter/ProjectOpenActivity.java", "diffHunk": "@@ -41,6 +42,8 @@ public ProjectOpenActivity() {\n \n   @Override\n   public void runActivity(@NotNull Project project) {\n+    JxBrowserManager.get().setUp(project);", "originalCommit": "54506e3d859fffe29ec66486c42bea2d34e39a01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwOTg1Nw==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r453109857", "bodyText": "How confident are we with the process here (downloading, jsbrowser, ...)? We should probably do something like have an experimental setting in our preferences, and let people opt into trying this out for release or two. That would allow us to iron out any issues.", "author": "devoncarew", "createdAt": "2020-07-10T22:47:42Z", "path": "src/io/flutter/view/FlutterView.java", "diffHunk": "@@ -201,58 +196,12 @@ private void addInspectorViewContent(FlutterApp app, @Nullable InspectorService\n       tabName = device.getUniqueName(existingDevices);\n     }\n \n-    final Content content = contentManager.getFactory().createContent(null, tabName, false);\n-    tabContainer.add(runnerTabs.getComponent(), BorderLayout.CENTER);\n-    content.setComponent(tabContainer);\n-    content.putUserData(ToolWindow.SHOW_CONTENT_ICON, Boolean.TRUE);\n-    content.setIcon(FlutterIcons.Phone);\n-    contentManager.addContent(content);\n+    DevToolsManager.getInstance(app.getProject()).openBrowserIntoPanel(browserUrl, contentManager, tabName);", "originalCommit": "54506e3d859fffe29ec66486c42bea2d34e39a01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI0NDg0Mw==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r455244843", "bodyText": "We're going to start with these features disabled, since there are some other pieces that would be too much to add in this change. I think it would make sense to add a setting to opt in/out, especially since we will need a permanent way to opt out.", "author": "helin24", "createdAt": "2020-07-15T18:09:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwOTg1Nw=="}], "type": "inlineReview"}, {"oid": "9871cf8835480aeac21e3dda92377ecabd5c89d5", "url": "https://github.com/flutter/flutter-intellij/commit/9871cf8835480aeac21e3dda92377ecabd5c89d5", "message": "Use class loader from class", "committedDate": "2020-07-14T16:56:44Z", "type": "commit"}, {"oid": "dde43f18b8109841cbe1d70014ef794c2e032f68", "url": "https://github.com/flutter/flutter-intellij/commit/dde43f18b8109841cbe1d70014ef794c2e032f68", "message": "Move key to environment variables", "committedDate": "2020-07-14T18:27:01Z", "type": "commit"}, {"oid": "1056bdca26e9b3f926af1e919e6ff5c17b75cf5a", "url": "https://github.com/flutter/flutter-intellij/commit/1056bdca26e9b3f926af1e919e6ff5c17b75cf5a", "message": "Fix resizing issue by removing scroll pane", "committedDate": "2020-07-14T23:50:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcyMjczNA==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r454722734", "bodyText": "nit: todos should use the name of the cl author.", "author": "jacob314", "createdAt": "2020-07-15T00:37:53Z", "path": "src/io/flutter/devtools/DevToolsManager.java", "diffHunk": "@@ -217,6 +229,36 @@ private boolean isBazel(Project project) {\n     return WorkspaceCache.getInstance(project).isBazel();\n   }\n \n+  public void openBrowserIntoPanel(String uri, ContentManager contentManager, String tabName) {\n+    String screen = null;\n+\n+    if (devToolsInstance != null) {\n+      devToolsInstance.openPanel(uri, contentManager, tabName);\n+    }\n+    else {\n+      @Nullable final OSProcessHandler handler =\n+        isBazel(project) ? getProcessHandlerForBazel() : getProcessHandlerForPub();\n+\n+      if (handler != null) {\n+        // TODO(devoncarew) Add a Task.Backgroundable here; \"Starting devtools...\"", "originalCommit": "1056bdca26e9b3f926af1e919e6ff5c17b75cf5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcyMzA0MQ==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r454723041", "bodyText": "why the invoke later? I would have thought this code was already running on the ui thread.", "author": "jacob314", "createdAt": "2020-07-15T00:39:13Z", "path": "src/io/flutter/devtools/DevToolsManager.java", "diffHunk": "@@ -311,6 +353,31 @@ public void openBrowserAndConnect(String serviceProtocolUri, String page) {\n       null\n     );\n   }\n+\n+  public void openPanel(String serviceProtocolUri, ContentManager contentManager, String tabName) {\n+    String address = DevToolsUtils.generateDevToolsUrl(devtoolsHost, devtoolsPort, serviceProtocolUri, null) + \"&embed=true&page=inspector\";\n+\n+    EngineOptions options =\n+      EngineOptions.newBuilder(HARDWARE_ACCELERATED).build();\n+    Engine engine = Engine.newInstance(options);\n+    Browser browser = engine.newBrowser();\n+\n+    final Content content = contentManager.getFactory().createContent(null, tabName, false);\n+\n+    SwingUtilities.invokeLater(() -> {", "originalCommit": "1056bdca26e9b3f926af1e919e6ff5c17b75cf5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI0NDkxOQ==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r455244919", "bodyText": "I'm not sure how to tell, actually. This is called from a process listening for devtools to start, is that on a separate thread?", "author": "helin24", "createdAt": "2020-07-15T18:09:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcyMzA0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQwNDM4Ng==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r455404386", "bodyText": "an easy way to tell is to set a breakpoint and see what thread you are on or add an assert that you are on the UI thread.", "author": "jacob314", "createdAt": "2020-07-15T22:36:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcyMzA0MQ=="}], "type": "inlineReview"}, {"oid": "93f05d47c72f06da18a257f44da8c6d6a72a1249", "url": "https://github.com/flutter/flutter-intellij/commit/93f05d47c72f06da18a257f44da8c6d6a72a1249", "message": "Move jxbrowser initialization after flutter checks", "committedDate": "2020-07-15T16:41:34Z", "type": "commit"}, {"oid": "4c0f2fa78ff06cff7b2f8bfe9adcc77c54d226a6", "url": "https://github.com/flutter/flutter-intellij/commit/4c0f2fa78ff06cff7b2f8bfe9adcc77c54d226a6", "message": "Gate jxbrowser changes", "committedDate": "2020-07-15T17:04:50Z", "type": "commit"}, {"oid": "52cd407bb3917e2420d58918a33c0a7a6391ca15", "url": "https://github.com/flutter/flutter-intellij/commit/52cd407bb3917e2420d58918a33c0a7a6391ca15", "message": "Start devtools panel conditioned on install status", "committedDate": "2020-07-15T18:31:58Z", "type": "commit"}, {"oid": "52cd407bb3917e2420d58918a33c0a7a6391ca15", "url": "https://github.com/flutter/flutter-intellij/commit/52cd407bb3917e2420d58918a33c0a7a6391ca15", "message": "Start devtools panel conditioned on install status", "committedDate": "2020-07-15T18:31:58Z", "type": "forcePushed"}, {"oid": "fea2d08422e809c6b00a1d90e2099c3709cd30a2", "url": "https://github.com/flutter/flutter-intellij/commit/fea2d08422e809c6b00a1d90e2099c3709cd30a2", "message": "Remove jxbrowser API files", "committedDate": "2020-07-15T20:51:43Z", "type": "commit"}, {"oid": "fea2d08422e809c6b00a1d90e2099c3709cd30a2", "url": "https://github.com/flutter/flutter-intellij/commit/fea2d08422e809c6b00a1d90e2099c3709cd30a2", "message": "Remove jxbrowser API files", "committedDate": "2020-07-15T20:51:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM0NDc1MQ==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r455344751", "bodyText": "Should be ENABLE_JX_BROWSER not ENABLE_JXBROWSER. Also move this check to outside this class to where setup is called. That way it is obvious by looking at that code that we aren't doing anything unless the flag is set.", "author": "jacob314", "createdAt": "2020-07-15T21:05:49Z", "path": "src/io/flutter/jxbrowser/JxBrowserManager.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2020 The Chromium Authors. All rights reserved.\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+package io.flutter.jxbrowser;\n+\n+import com.intellij.openapi.diagnostic.Logger;\n+import com.intellij.openapi.progress.ProgressIndicator;\n+import com.intellij.openapi.progress.ProgressManager;\n+import com.intellij.openapi.progress.Task;\n+import com.intellij.openapi.progress.impl.BackgroundableProcessIndicator;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.util.Pair;\n+import com.intellij.util.containers.ContainerUtil;\n+import com.intellij.util.download.DownloadableFileDescription;\n+import com.intellij.util.download.DownloadableFileService;\n+import com.intellij.util.download.FileDownloader;\n+import com.intellij.util.lang.UrlClassLoader;\n+import io.flutter.utils.FileUtils;\n+import io.flutter.utils.JxBrowserUtils;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+enum JxBrowserStatus {\n+  NOT_INSTALLED,\n+  INSTALLATION_IN_PROGRESS,\n+  INSTALLED,\n+  INSTALLATION_FAILED,\n+}\n+\n+// JxBrowser provides Chromium to display web pages within IntelliJ. This class manages downloading the required files and adding them to\n+// the class path.\n+public class JxBrowserManager {\n+  private static JxBrowserManager manager;\n+  private static final String DOWNLOAD_PATH = FileUtils.platformPath();\n+  private static final AtomicReference<JxBrowserStatus> status = new AtomicReference<>(JxBrowserStatus.NOT_INSTALLED);\n+  private static final Logger LOG = Logger.getInstance(JxBrowserManager.class);\n+  // We will be gating JxBrowser features until all of the features are landed.\n+  private static final boolean ENABLE_JXBROWSER = false;\n+\n+  private JxBrowserManager() {}\n+\n+  public static JxBrowserManager get() {\n+    if (manager == null) {\n+      return new JxBrowserManager();\n+    }\n+    return manager;\n+  }\n+\n+  public boolean isInstalled() {\n+    return status.get().equals(JxBrowserStatus.INSTALLED);\n+  }\n+\n+  public void setUp(Project project) {\n+    if (!ENABLE_JXBROWSER) {", "originalCommit": "fea2d08422e809c6b00a1d90e2099c3709cd30a2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM0NjgyMw==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r455346823", "bodyText": "log something if making the directory fails and abort.", "author": "jacob314", "createdAt": "2020-07-15T21:08:09Z", "path": "src/io/flutter/jxbrowser/JxBrowserManager.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2020 The Chromium Authors. All rights reserved.\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+package io.flutter.jxbrowser;\n+\n+import com.intellij.openapi.diagnostic.Logger;\n+import com.intellij.openapi.progress.ProgressIndicator;\n+import com.intellij.openapi.progress.ProgressManager;\n+import com.intellij.openapi.progress.Task;\n+import com.intellij.openapi.progress.impl.BackgroundableProcessIndicator;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.util.Pair;\n+import com.intellij.util.containers.ContainerUtil;\n+import com.intellij.util.download.DownloadableFileDescription;\n+import com.intellij.util.download.DownloadableFileService;\n+import com.intellij.util.download.FileDownloader;\n+import com.intellij.util.lang.UrlClassLoader;\n+import io.flutter.utils.FileUtils;\n+import io.flutter.utils.JxBrowserUtils;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+enum JxBrowserStatus {\n+  NOT_INSTALLED,\n+  INSTALLATION_IN_PROGRESS,\n+  INSTALLED,\n+  INSTALLATION_FAILED,\n+}\n+\n+// JxBrowser provides Chromium to display web pages within IntelliJ. This class manages downloading the required files and adding them to\n+// the class path.\n+public class JxBrowserManager {\n+  private static JxBrowserManager manager;\n+  private static final String DOWNLOAD_PATH = FileUtils.platformPath();\n+  private static final AtomicReference<JxBrowserStatus> status = new AtomicReference<>(JxBrowserStatus.NOT_INSTALLED);\n+  private static final Logger LOG = Logger.getInstance(JxBrowserManager.class);\n+  // We will be gating JxBrowser features until all of the features are landed.\n+  private static final boolean ENABLE_JXBROWSER = false;\n+\n+  private JxBrowserManager() {}\n+\n+  public static JxBrowserManager get() {\n+    if (manager == null) {\n+      return new JxBrowserManager();\n+    }\n+    return manager;\n+  }\n+\n+  public boolean isInstalled() {\n+    return status.get().equals(JxBrowserStatus.INSTALLED);\n+  }\n+\n+  public void setUp(Project project) {\n+    if (!ENABLE_JXBROWSER) {\n+      return;\n+    }\n+\n+    if (!status.compareAndSet(JxBrowserStatus.NOT_INSTALLED, JxBrowserStatus.INSTALLATION_IN_PROGRESS)) {\n+      // This check ensures that an IDE only downloads and installs JxBrowser once, even if multiple projects are open.\n+      // If already in progress, let calling point wait until success or failure (it may make sense to call setUp but proceed).\n+      // If already succeeded or failed, no need to continue.\n+      return;\n+    }\n+\n+    LOG.info(project.getName() + \": Installing JxBrowser\");\n+\n+    final File directory = new File(DOWNLOAD_PATH);\n+    if (!directory.exists()) {\n+      //noinspection ResultOfMethodCallIgnored", "originalCommit": "fea2d08422e809c6b00a1d90e2099c3709cd30a2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2a39918ff382c7bf2c0bc65f24afc760e3c61895", "url": "https://github.com/flutter/flutter-intellij/commit/2a39918ff382c7bf2c0bc65f24afc760e3c61895", "message": "Revert \"Remove jxbrowser API files\"\n\nThis reverts commit fea2d08422e809c6b00a1d90e2099c3709cd30a2.\nWe need the files in lib for the bots, but these won't get into the\nbuild.", "committedDate": "2020-07-15T21:08:12Z", "type": "commit"}, {"oid": "f294ea253ef97ba8c790f8886316ed29ada95ba5", "url": "https://github.com/flutter/flutter-intellij/commit/f294ea253ef97ba8c790f8886316ed29ada95ba5", "message": "Move gating check to project open", "committedDate": "2020-07-15T21:16:44Z", "type": "commit"}, {"oid": "9cba5c3a42ac4ced2af1b86cbd5f3bcafd5adb81", "url": "https://github.com/flutter/flutter-intellij/commit/9cba5c3a42ac4ced2af1b86cbd5f3bcafd5adb81", "message": "Add failure handling for directory not created", "committedDate": "2020-07-15T21:29:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQwNDYzOA==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r455404638", "bodyText": "Are these blocking calls that take over 10ms to initialize the Engine + browser? If so this work should be done on a background thread.", "author": "jacob314", "createdAt": "2020-07-15T22:37:02Z", "path": "src/io/flutter/devtools/DevToolsManager.java", "diffHunk": "@@ -311,6 +353,31 @@ public void openBrowserAndConnect(String serviceProtocolUri, String page) {\n       null\n     );\n   }\n+\n+  public void openPanel(String serviceProtocolUri, ContentManager contentManager, String tabName) {\n+    String address = DevToolsUtils.generateDevToolsUrl(devtoolsHost, devtoolsPort, serviceProtocolUri, null) + \"&embed=true&page=inspector\";\n+\n+    EngineOptions options =\n+      EngineOptions.newBuilder(HARDWARE_ACCELERATED).build();\n+    Engine engine = Engine.newInstance(options);", "originalCommit": "1056bdca26e9b3f926af1e919e6ff5c17b75cf5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk0NDk2OA==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r455944968", "bodyText": "Actually, I'm still confused about this - should I put these lines into invokeLater as well? Or is it fine to remove invokeLater because all of this is on a non-main thread (verified that this is the case).", "author": "helin24", "createdAt": "2020-07-16T17:16:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQwNDYzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIwODExNw==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r456208117", "bodyText": "Which thread is it on specifically? Even if it isn't the main thread it could be bad to block the thread for a couple seconds waiting for the engine to load.", "author": "jacob314", "createdAt": "2020-07-17T04:12:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQwNDYzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQwNTI1NA==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r455405254", "bodyText": "you should use exponential backoff and we should display a user visible message if the download fails.", "author": "jacob314", "createdAt": "2020-07-15T22:38:50Z", "path": "src/io/flutter/jxbrowser/JxBrowserManager.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Copyright 2020 The Chromium Authors. All rights reserved.\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+package io.flutter.jxbrowser;\n+\n+import com.intellij.openapi.diagnostic.Logger;\n+import com.intellij.openapi.progress.ProgressIndicator;\n+import com.intellij.openapi.progress.ProgressManager;\n+import com.intellij.openapi.progress.Task;\n+import com.intellij.openapi.progress.impl.BackgroundableProcessIndicator;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.util.Pair;\n+import com.intellij.util.containers.ContainerUtil;\n+import com.intellij.util.download.DownloadableFileDescription;\n+import com.intellij.util.download.DownloadableFileService;\n+import com.intellij.util.download.FileDownloader;\n+import com.intellij.util.lang.UrlClassLoader;\n+import io.flutter.utils.FileUtils;\n+import io.flutter.utils.JxBrowserUtils;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+enum JxBrowserStatus {\n+  NOT_INSTALLED,\n+  INSTALLATION_IN_PROGRESS,\n+  INSTALLED,\n+  INSTALLATION_FAILED,\n+}\n+\n+\n+public class JxBrowserManager {\n+  private static JxBrowserManager manager;\n+  private static final String DOWNLOAD_PATH = FileUtils.platformPath();\n+  private static final AtomicReference<JxBrowserStatus> status = new AtomicReference<>(JxBrowserStatus.NOT_INSTALLED);\n+  private static final Logger LOG = Logger.getInstance(JxBrowserManager.class);\n+\n+  private JxBrowserManager() {}\n+\n+  public static JxBrowserManager get() {\n+    if (manager == null) {\n+      return new JxBrowserManager();\n+    }\n+    return manager;\n+  }\n+\n+  public void setUp(Project project) {\n+    if (!status.compareAndSet(JxBrowserStatus.NOT_INSTALLED, JxBrowserStatus.INSTALLATION_IN_PROGRESS)) {\n+      // This check ensures that an IDE only downloads and installs JxBrowser once, even if multiple projects are open.\n+      // If already in progress, let calling point wait until success or failure (it may make sense to call setUp but proceed).\n+      // If already succeeded or failed, no need to continue.\n+      return;\n+    }\n+\n+    LOG.info(project.getName() + \": Installing JxBrowser\");\n+\n+    final File directory = new File(DOWNLOAD_PATH);\n+    if (!directory.exists()) {\n+      //noinspection ResultOfMethodCallIgnored\n+      directory.mkdirs();\n+    }\n+\n+    // Check for file or loading file\n+    final String[] fileNames = {JxBrowserUtils.getPlatformFileName(), JxBrowserUtils.getApiFileName(), JxBrowserUtils.getSwingFileName()};\n+    boolean allDownloaded = true;\n+    final List<File> files = new ArrayList<>();\n+    for (String fileName : fileNames) {\n+      final File file = new File(DOWNLOAD_PATH + File.separator + fileName);\n+      files.add(file);\n+      if (!file.exists()) {\n+        allDownloaded = false;\n+        break;\n+      }\n+    }\n+\n+    if (allDownloaded) {\n+      LOG.info(project.getName() + \": JxBrowser platform file already exists, skipping download\");\n+      loadClasses(files);\n+      return;\n+    }\n+\n+    final File tempLoadingFile = new File(DOWNLOAD_PATH + File.separator + JxBrowserUtils.getLoadingFileName());\n+    boolean created = false;\n+    try {\n+      created = tempLoadingFile.createNewFile();\n+    }\n+    catch (IOException e) {\n+      e.printStackTrace();\n+    }\n+\n+    if (!created) {\n+      // This means another IDE already created this file and has started downloading.\n+      // Wait for download to finish and then try loading again.\n+      LOG.info(project.getName() + \": Waiting for JxBrowser file to download\");\n+      int attempts = 0;\n+      while (attempts < 100) {\n+        if (tempLoadingFile.exists()) {\n+          try {\n+            Thread.sleep(1000);", "originalCommit": "1056bdca26e9b3f926af1e919e6ff5c17b75cf5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcwNDYzNg==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r457704636", "bodyText": "If we don't have to manage downloads among different IDEs then we don't need this check.", "author": "helin24", "createdAt": "2020-07-20T21:33:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQwNTI1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQwOTYxNQ==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r455409615", "bodyText": "nit: address -> url", "author": "jacob314", "createdAt": "2020-07-15T22:51:07Z", "path": "src/io/flutter/devtools/DevToolsManager.java", "diffHunk": "@@ -311,6 +351,31 @@ public void openBrowserAndConnect(String serviceProtocolUri, String page) {\n       null\n     );\n   }\n+\n+  public void openPanel(String serviceProtocolUri, ContentManager contentManager, String tabName) {\n+    String address = DevToolsUtils.generateDevToolsUrl(devtoolsHost, devtoolsPort, serviceProtocolUri, null) + \"&embed=true&page=inspector\";", "originalCommit": "9cba5c3a42ac4ced2af1b86cbd5f3bcafd5adb81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxMDAzNQ==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r455410035", "bodyText": "update DevToolsUtils to accept passing in embed=true and pass in the tabName instead of hardcoding to the inspector.", "author": "jacob314", "createdAt": "2020-07-15T22:52:15Z", "path": "src/io/flutter/devtools/DevToolsManager.java", "diffHunk": "@@ -311,6 +351,31 @@ public void openBrowserAndConnect(String serviceProtocolUri, String page) {\n       null\n     );\n   }\n+\n+  public void openPanel(String serviceProtocolUri, ContentManager contentManager, String tabName) {\n+    String address = DevToolsUtils.generateDevToolsUrl(devtoolsHost, devtoolsPort, serviceProtocolUri, null) + \"&embed=true&page=inspector\";", "originalCommit": "9cba5c3a42ac4ced2af1b86cbd5f3bcafd5adb81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk0NDM2MA==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r455944360", "bodyText": "generateDevToolsUrl has a page param but is this now inactive? e.g. the method can produce this URL (from a test): \"http://127.0.0.1:9100/?ide=Android-Studio&uri=http%3A%2F%2F127.0.0.1%3A50224%2FWTFTYus3IPU%3D%2F#timeline\" but adding #timeline doesn't seem to do anything when I try in devtools.", "author": "helin24", "createdAt": "2020-07-16T17:15:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxMDAzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxMDMwMw==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r455410303", "bodyText": "add a todo: we should use a different icon based on the tab and we should copy the icons from the inspector toolbar rather than using the Phone icon.", "author": "jacob314", "createdAt": "2020-07-15T22:53:03Z", "path": "src/io/flutter/devtools/DevToolsManager.java", "diffHunk": "@@ -311,6 +351,31 @@ public void openBrowserAndConnect(String serviceProtocolUri, String page) {\n       null\n     );\n   }\n+\n+  public void openPanel(String serviceProtocolUri, ContentManager contentManager, String tabName) {\n+    String address = DevToolsUtils.generateDevToolsUrl(devtoolsHost, devtoolsPort, serviceProtocolUri, null) + \"&embed=true&page=inspector\";\n+\n+    EngineOptions options =\n+      EngineOptions.newBuilder(HARDWARE_ACCELERATED).build();\n+    Engine engine = Engine.newInstance(options);\n+    Browser browser = engine.newBrowser();\n+\n+    final Content content = contentManager.getFactory().createContent(null, tabName, false);\n+\n+    SwingUtilities.invokeLater(() -> {\n+      // Creating Swing component for rendering web content\n+      // loaded in the given Browser instance.\n+      BrowserView view = BrowserView.newInstance(browser);\n+      view.setPreferredSize(new Dimension(contentManager.getComponent().getWidth(), contentManager.getComponent().getHeight()));\n+\n+      content.setComponent(view);\n+      content.putUserData(ToolWindow.SHOW_CONTENT_ICON, Boolean.TRUE);\n+      content.setIcon(FlutterIcons.Phone);", "originalCommit": "9cba5c3a42ac4ced2af1b86cbd5f3bcafd5adb81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxMTQwNg==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r455411406", "bodyText": "Nit: for consistency with singletons in the rest of the code base call this getInstance() instead of get().", "author": "jacob314", "createdAt": "2020-07-15T22:56:29Z", "path": "src/io/flutter/jxbrowser/JxBrowserManager.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2020 The Chromium Authors. All rights reserved.\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+package io.flutter.jxbrowser;\n+\n+import com.intellij.openapi.diagnostic.Logger;\n+import com.intellij.openapi.progress.ProgressIndicator;\n+import com.intellij.openapi.progress.ProgressManager;\n+import com.intellij.openapi.progress.Task;\n+import com.intellij.openapi.progress.impl.BackgroundableProcessIndicator;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.util.Pair;\n+import com.intellij.util.containers.ContainerUtil;\n+import com.intellij.util.download.DownloadableFileDescription;\n+import com.intellij.util.download.DownloadableFileService;\n+import com.intellij.util.download.FileDownloader;\n+import com.intellij.util.lang.UrlClassLoader;\n+import io.flutter.utils.FileUtils;\n+import io.flutter.utils.JxBrowserUtils;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+enum JxBrowserStatus {\n+  NOT_INSTALLED,\n+  INSTALLATION_IN_PROGRESS,\n+  INSTALLED,\n+  INSTALLATION_FAILED,\n+}\n+\n+// JxBrowser provides Chromium to display web pages within IntelliJ. This class manages downloading the required files and adding them to\n+// the class path.\n+public class JxBrowserManager {\n+  private static JxBrowserManager manager;\n+  private static final String DOWNLOAD_PATH = FileUtils.platformPath();\n+  private static final AtomicReference<JxBrowserStatus> status = new AtomicReference<>(JxBrowserStatus.NOT_INSTALLED);\n+  private static final Logger LOG = Logger.getInstance(JxBrowserManager.class);\n+  // We will be gating JxBrowser features until all of the features are landed.\n+  // To test JxBrowser, set this to true and also add license key to VM options (-Djxbrowser.license.key=<key>).\n+  public static final boolean ENABLE_JX_BROWSER = false;\n+\n+  private JxBrowserManager() {}\n+\n+  public static JxBrowserManager get() {", "originalCommit": "9cba5c3a42ac4ced2af1b86cbd5f3bcafd5adb81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxMTY4NA==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r455411684", "bodyText": "make 100 a constant and consider removing if using exponential backoff.", "author": "jacob314", "createdAt": "2020-07-15T22:57:20Z", "path": "src/io/flutter/jxbrowser/JxBrowserManager.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2020 The Chromium Authors. All rights reserved.\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+package io.flutter.jxbrowser;\n+\n+import com.intellij.openapi.diagnostic.Logger;\n+import com.intellij.openapi.progress.ProgressIndicator;\n+import com.intellij.openapi.progress.ProgressManager;\n+import com.intellij.openapi.progress.Task;\n+import com.intellij.openapi.progress.impl.BackgroundableProcessIndicator;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.util.Pair;\n+import com.intellij.util.containers.ContainerUtil;\n+import com.intellij.util.download.DownloadableFileDescription;\n+import com.intellij.util.download.DownloadableFileService;\n+import com.intellij.util.download.FileDownloader;\n+import com.intellij.util.lang.UrlClassLoader;\n+import io.flutter.utils.FileUtils;\n+import io.flutter.utils.JxBrowserUtils;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+enum JxBrowserStatus {\n+  NOT_INSTALLED,\n+  INSTALLATION_IN_PROGRESS,\n+  INSTALLED,\n+  INSTALLATION_FAILED,\n+}\n+\n+// JxBrowser provides Chromium to display web pages within IntelliJ. This class manages downloading the required files and adding them to\n+// the class path.\n+public class JxBrowserManager {\n+  private static JxBrowserManager manager;\n+  private static final String DOWNLOAD_PATH = FileUtils.platformPath();\n+  private static final AtomicReference<JxBrowserStatus> status = new AtomicReference<>(JxBrowserStatus.NOT_INSTALLED);\n+  private static final Logger LOG = Logger.getInstance(JxBrowserManager.class);\n+  // We will be gating JxBrowser features until all of the features are landed.\n+  // To test JxBrowser, set this to true and also add license key to VM options (-Djxbrowser.license.key=<key>).\n+  public static final boolean ENABLE_JX_BROWSER = false;\n+\n+  private JxBrowserManager() {}\n+\n+  public static JxBrowserManager get() {\n+    if (manager == null) {\n+      return new JxBrowserManager();\n+    }\n+    return manager;\n+  }\n+\n+  public boolean isInstalled() {\n+    return status.get().equals(JxBrowserStatus.INSTALLED);\n+  }\n+\n+  public void setUp(Project project) {\n+    if (!status.compareAndSet(JxBrowserStatus.NOT_INSTALLED, JxBrowserStatus.INSTALLATION_IN_PROGRESS)) {\n+      // This check ensures that an IDE only downloads and installs JxBrowser once, even if multiple projects are open.\n+      // If already in progress, let calling point wait until success or failure (it may make sense to call setUp but proceed).\n+      // If already succeeded or failed, no need to continue.\n+      return;\n+    }\n+\n+    LOG.info(project.getName() + \": Installing JxBrowser\");\n+\n+    final File directory = new File(DOWNLOAD_PATH);\n+    if (!directory.exists()) {\n+      if (!directory.mkdirs()) {\n+        LOG.info(project.getName() + \": Unable to create directory for JxBrowser files\");\n+        status.set(JxBrowserStatus.INSTALLATION_FAILED);\n+        return;\n+      }\n+    }\n+\n+    // Check for file or loading file\n+    final String[] fileNames = {JxBrowserUtils.getPlatformFileName(), JxBrowserUtils.getApiFileName(), JxBrowserUtils.getSwingFileName()};\n+    boolean allDownloaded = true;\n+    final List<File> files = new ArrayList<>();\n+    for (String fileName : fileNames) {\n+      final File file = new File(DOWNLOAD_PATH + File.separator + fileName);\n+      files.add(file);\n+      if (!file.exists()) {\n+        allDownloaded = false;\n+        break;\n+      }\n+    }\n+\n+    if (allDownloaded) {\n+      LOG.info(project.getName() + \": JxBrowser platform file already exists, skipping download\");\n+      loadClasses(files);\n+      return;\n+    }\n+\n+    final File tempLoadingFile = new File(DOWNLOAD_PATH + File.separator + JxBrowserUtils.getLoadingFileName());\n+    boolean created = false;\n+    try {\n+      created = tempLoadingFile.createNewFile();\n+    }\n+    catch (IOException e) {\n+      e.printStackTrace();\n+    }\n+\n+    if (!created) {\n+      // This means another IDE already created this file and has started downloading.\n+      // Wait for download to finish and then try loading again.\n+      LOG.info(project.getName() + \": Waiting for JxBrowser file to download\");\n+      int attempts = 0;\n+      while (attempts < 100) {", "originalCommit": "9cba5c3a42ac4ced2af1b86cbd5f3bcafd5adb81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk0NjQ1NA==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r455946454", "bodyText": "Do you mean keep increasing the sleep time with more iterations? This would still require some stopping condition, you're thinking something other than number of attempts?", "author": "helin24", "createdAt": "2020-07-16T17:18:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxMTY4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIwNzQyMg==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r456207422", "bodyText": "yes. what you would do is double the time to sleep each time.\nrather than having a stopping condition, what would be ideal would be to have the code that displays the browser check whether the browser is available yet and if it is not available display the following:\n\n\"Installing JX Browser\" (for the common case where JX Browser has not failed to download)\nJX Browser Download failed (retrying in X seconds) for the case where the download has failed at least once.\nThis is similar to what you see if you open gmail when offline. Bonus points: add a \"retry download now\" button.\nThat way users only see the message about a failed download when they care when they are about to try to use the inspector and it isn't available.", "author": "jacob314", "createdAt": "2020-07-17T04:09:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxMTY4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcyNzU3Mw==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r457727573", "bodyText": "Will be adding panel messages in a next change.", "author": "helin24", "createdAt": "2020-07-20T22:29:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxMTY4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxMjg1Mg==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r455412852", "bodyText": "this break seems wrong. The list of files will sometimes be missing a file.", "author": "jacob314", "createdAt": "2020-07-15T23:00:28Z", "path": "src/io/flutter/jxbrowser/JxBrowserManager.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2020 The Chromium Authors. All rights reserved.\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+package io.flutter.jxbrowser;\n+\n+import com.intellij.openapi.diagnostic.Logger;\n+import com.intellij.openapi.progress.ProgressIndicator;\n+import com.intellij.openapi.progress.ProgressManager;\n+import com.intellij.openapi.progress.Task;\n+import com.intellij.openapi.progress.impl.BackgroundableProcessIndicator;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.util.Pair;\n+import com.intellij.util.containers.ContainerUtil;\n+import com.intellij.util.download.DownloadableFileDescription;\n+import com.intellij.util.download.DownloadableFileService;\n+import com.intellij.util.download.FileDownloader;\n+import com.intellij.util.lang.UrlClassLoader;\n+import io.flutter.utils.FileUtils;\n+import io.flutter.utils.JxBrowserUtils;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+enum JxBrowserStatus {\n+  NOT_INSTALLED,\n+  INSTALLATION_IN_PROGRESS,\n+  INSTALLED,\n+  INSTALLATION_FAILED,\n+}\n+\n+// JxBrowser provides Chromium to display web pages within IntelliJ. This class manages downloading the required files and adding them to\n+// the class path.\n+public class JxBrowserManager {\n+  private static JxBrowserManager manager;\n+  private static final String DOWNLOAD_PATH = FileUtils.platformPath();\n+  private static final AtomicReference<JxBrowserStatus> status = new AtomicReference<>(JxBrowserStatus.NOT_INSTALLED);\n+  private static final Logger LOG = Logger.getInstance(JxBrowserManager.class);\n+  // We will be gating JxBrowser features until all of the features are landed.\n+  // To test JxBrowser, set this to true and also add license key to VM options (-Djxbrowser.license.key=<key>).\n+  public static final boolean ENABLE_JX_BROWSER = false;\n+\n+  private JxBrowserManager() {}\n+\n+  public static JxBrowserManager get() {\n+    if (manager == null) {\n+      return new JxBrowserManager();\n+    }\n+    return manager;\n+  }\n+\n+  public boolean isInstalled() {\n+    return status.get().equals(JxBrowserStatus.INSTALLED);\n+  }\n+\n+  public void setUp(Project project) {\n+    if (!status.compareAndSet(JxBrowserStatus.NOT_INSTALLED, JxBrowserStatus.INSTALLATION_IN_PROGRESS)) {\n+      // This check ensures that an IDE only downloads and installs JxBrowser once, even if multiple projects are open.\n+      // If already in progress, let calling point wait until success or failure (it may make sense to call setUp but proceed).\n+      // If already succeeded or failed, no need to continue.\n+      return;\n+    }\n+\n+    LOG.info(project.getName() + \": Installing JxBrowser\");\n+\n+    final File directory = new File(DOWNLOAD_PATH);\n+    if (!directory.exists()) {\n+      if (!directory.mkdirs()) {\n+        LOG.info(project.getName() + \": Unable to create directory for JxBrowser files\");\n+        status.set(JxBrowserStatus.INSTALLATION_FAILED);\n+        return;\n+      }\n+    }\n+\n+    // Check for file or loading file\n+    final String[] fileNames = {JxBrowserUtils.getPlatformFileName(), JxBrowserUtils.getApiFileName(), JxBrowserUtils.getSwingFileName()};\n+    boolean allDownloaded = true;\n+    final List<File> files = new ArrayList<>();\n+    for (String fileName : fileNames) {\n+      final File file = new File(DOWNLOAD_PATH + File.separator + fileName);\n+      files.add(file);\n+      if (!file.exists()) {\n+        allDownloaded = false;\n+        break;", "originalCommit": "9cba5c3a42ac4ced2af1b86cbd5f3bcafd5adb81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk0NTc0Mg==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r455945742", "bodyText": "Wow good catch. Could be helpful to add unit tests in a next change.", "author": "helin24", "createdAt": "2020-07-16T17:17:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxMjg1Mg=="}], "type": "inlineReview"}, {"oid": "4753505198aa620f3681dd7ac5ec7b90395f10e2", "url": "https://github.com/flutter/flutter-intellij/commit/4753505198aa620f3681dd7ac5ec7b90395f10e2", "message": "Update devtools url generation", "committedDate": "2020-07-16T01:51:39Z", "type": "commit"}, {"oid": "b65f0367805a8888248814943817a609bd750218", "url": "https://github.com/flutter/flutter-intellij/commit/b65f0367805a8888248814943817a609bd750218", "message": "Fix jxbrowser manager break", "committedDate": "2020-07-16T17:14:04Z", "type": "commit"}, {"oid": "32f8a8bac76ce133a23d09976a43f220e4882a5d", "url": "https://github.com/flutter/flutter-intellij/commit/32f8a8bac76ce133a23d09976a43f220e4882a5d", "message": "Fix ordering of params in test", "committedDate": "2020-07-16T17:30:20Z", "type": "commit"}, {"oid": "a421957d39d7cbd26176bf07493110dded758b5e", "url": "https://github.com/flutter/flutter-intellij/commit/a421957d39d7cbd26176bf07493110dded758b5e", "message": "Use exponential backoff to wait for download", "committedDate": "2020-07-16T17:53:14Z", "type": "commit"}, {"oid": "c7863f3938b0f501561cb7c4730f6f9c45b7d788", "url": "https://github.com/flutter/flutter-intellij/commit/c7863f3938b0f501561cb7c4730f6f9c45b7d788", "message": "Add notification for failed download", "committedDate": "2020-07-16T18:28:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIwODMyOQ==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r456208329", "bodyText": "because it could have been some time from when the action was requested until we are ready to launch, we need to make sure the contentManager has not been disposed or perhaps that the project is still valid.", "author": "jacob314", "createdAt": "2020-07-17T04:13:48Z", "path": "src/io/flutter/devtools/DevToolsManager.java", "diffHunk": "@@ -307,10 +347,36 @@ public void processTerminated(@NotNull ProcessEvent event) {\n \n   public void openBrowserAndConnect(String serviceProtocolUri, String page) {\n     BrowserLauncher.getInstance().browse(\n-      DevToolsUtils.generateDevToolsUrl(devtoolsHost, devtoolsPort, serviceProtocolUri, page),\n+      DevToolsUtils.generateDevToolsUrl(devtoolsHost, devtoolsPort, serviceProtocolUri, page, false, null),\n       null\n     );\n   }\n+\n+  public void openPanel(String serviceProtocolUri, ContentManager contentManager, String tabName, String pageName) {\n+    String url = DevToolsUtils.generateDevToolsUrl(devtoolsHost, devtoolsPort, serviceProtocolUri, null, true, pageName);\n+\n+    EngineOptions options =\n+      EngineOptions.newBuilder(HARDWARE_ACCELERATED).build();\n+    Engine engine = Engine.newInstance(options);\n+    Browser browser = engine.newBrowser();\n+\n+    final Content content = contentManager.getFactory().createContent(null, tabName, false);\n+\n+    SwingUtilities.invokeLater(() -> {\n+      // Creating Swing component for rendering web content\n+      // loaded in the given Browser instance.\n+      BrowserView view = BrowserView.newInstance(browser);", "originalCommit": "c7863f3938b0f501561cb7c4730f6f9c45b7d788", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIwOTg4OQ==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r456209889", "bodyText": "what if the other ide was killed while the file was being downloaded? Now JXBrowser will never work. We need a generally more robust way to do this or we will get a lot of hard to track down bugs. I would suggest we err on the side of a simpler solution than a more efficient one. It is preferable if it wasn't possible for multiple IDEs to be trying to download files to the same locations.", "author": "jacob314", "createdAt": "2020-07-17T04:21:13Z", "path": "src/io/flutter/jxbrowser/JxBrowserManager.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/*\n+ * Copyright 2020 The Chromium Authors. All rights reserved.\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+package io.flutter.jxbrowser;\n+\n+import com.intellij.notification.Notification;\n+import com.intellij.notification.NotificationType;\n+import com.intellij.notification.Notifications;\n+import com.intellij.openapi.diagnostic.Logger;\n+import com.intellij.openapi.progress.ProgressIndicator;\n+import com.intellij.openapi.progress.ProgressManager;\n+import com.intellij.openapi.progress.Task;\n+import com.intellij.openapi.progress.impl.BackgroundableProcessIndicator;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.util.Pair;\n+import com.intellij.util.containers.ContainerUtil;\n+import com.intellij.util.download.DownloadableFileDescription;\n+import com.intellij.util.download.DownloadableFileService;\n+import com.intellij.util.download.FileDownloader;\n+import com.intellij.util.lang.UrlClassLoader;\n+import icons.FlutterIcons;\n+import io.flutter.FlutterMessages;\n+import io.flutter.utils.FileUtils;\n+import io.flutter.utils.JxBrowserUtils;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+enum JxBrowserStatus {\n+  NOT_INSTALLED,\n+  INSTALLATION_IN_PROGRESS,\n+  INSTALLED,\n+  INSTALLATION_FAILED,\n+}\n+\n+// JxBrowser provides Chromium to display web pages within IntelliJ. This class manages downloading the required files and adding them to\n+// the class path.\n+public class JxBrowserManager {\n+  private static JxBrowserManager manager;\n+  private static final String DOWNLOAD_PATH = FileUtils.platformPath();\n+  private static final AtomicReference<JxBrowserStatus> status = new AtomicReference<>(JxBrowserStatus.NOT_INSTALLED);\n+  private static final Logger LOG = Logger.getInstance(JxBrowserManager.class);\n+  // We will be gating JxBrowser features until all of the features are landed.\n+  // To test JxBrowser, set this to true and also add license key to VM options (-Djxbrowser.license.key=<key>).\n+  public static final boolean ENABLE_JX_BROWSER = false;\n+\n+  private JxBrowserManager() {}\n+\n+  public static JxBrowserManager getInstance() {\n+    if (manager == null) {\n+      return new JxBrowserManager();\n+    }\n+    return manager;\n+  }\n+\n+  public boolean isInstalled() {\n+    return status.get().equals(JxBrowserStatus.INSTALLED);\n+  }\n+\n+  public void setUp(Project project) {\n+    if (!status.compareAndSet(JxBrowserStatus.NOT_INSTALLED, JxBrowserStatus.INSTALLATION_IN_PROGRESS)) {\n+      // This check ensures that an IDE only downloads and installs JxBrowser once, even if multiple projects are open.\n+      // If already in progress, let calling point wait until success or failure (it may make sense to call setUp but proceed).\n+      // If already succeeded or failed, no need to continue.\n+      return;\n+    }\n+\n+    LOG.info(project.getName() + \": Installing JxBrowser\");\n+\n+    final File directory = new File(DOWNLOAD_PATH);\n+    if (!directory.exists()) {\n+      if (!directory.mkdirs()) {\n+        LOG.info(project.getName() + \": Unable to create directory for JxBrowser files\");\n+        status.set(JxBrowserStatus.INSTALLATION_FAILED);\n+        return;\n+      }\n+    }\n+\n+    // Check for file or loading file\n+    final String[] fileNames = {JxBrowserUtils.getPlatformFileName(), JxBrowserUtils.getApiFileName(), JxBrowserUtils.getSwingFileName()};\n+    boolean allDownloaded = true;\n+    final List<File> files = new ArrayList<>();\n+    for (String fileName : fileNames) {\n+      final File file = new File(DOWNLOAD_PATH + File.separator + fileName);\n+      files.add(file);\n+      if (!file.exists()) {\n+        allDownloaded = false;\n+      }\n+    }\n+\n+    if (allDownloaded) {\n+      LOG.info(project.getName() + \": JxBrowser platform file already exists, skipping download\");\n+      loadClasses(files);\n+      return;\n+    }\n+\n+    final File tempLoadingFile = new File(DOWNLOAD_PATH + File.separator + JxBrowserUtils.getLoadingFileName());\n+    boolean created = false;\n+    try {\n+      created = tempLoadingFile.createNewFile();\n+    }\n+    catch (IOException e) {\n+      e.printStackTrace();\n+    }\n+\n+    if (!created) {\n+      // This means another IDE already created this file and has started downloading.\n+      // Wait for download to finish and then try loading again.\n+      LOG.info(project.getName() + \": Waiting for JxBrowser file to download\");", "originalCommit": "c7863f3938b0f501561cb7c4730f6f9c45b7d788", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcwNTE4Ng==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r457705186", "bodyText": "Removing this since we're going to do a download per IDE", "author": "helin24", "createdAt": "2020-07-20T21:35:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIwOTg4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIxMDQwNA==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r456210404", "bodyText": "keep in mind if the IDE is killed you may not get a chance to delete this file. Likely a file lock that is released if the IDE is killed or similar would be more robust.", "author": "jacob314", "createdAt": "2020-07-17T04:23:36Z", "path": "src/io/flutter/jxbrowser/JxBrowserManager.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/*\n+ * Copyright 2020 The Chromium Authors. All rights reserved.\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+package io.flutter.jxbrowser;\n+\n+import com.intellij.notification.Notification;\n+import com.intellij.notification.NotificationType;\n+import com.intellij.notification.Notifications;\n+import com.intellij.openapi.diagnostic.Logger;\n+import com.intellij.openapi.progress.ProgressIndicator;\n+import com.intellij.openapi.progress.ProgressManager;\n+import com.intellij.openapi.progress.Task;\n+import com.intellij.openapi.progress.impl.BackgroundableProcessIndicator;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.util.Pair;\n+import com.intellij.util.containers.ContainerUtil;\n+import com.intellij.util.download.DownloadableFileDescription;\n+import com.intellij.util.download.DownloadableFileService;\n+import com.intellij.util.download.FileDownloader;\n+import com.intellij.util.lang.UrlClassLoader;\n+import icons.FlutterIcons;\n+import io.flutter.FlutterMessages;\n+import io.flutter.utils.FileUtils;\n+import io.flutter.utils.JxBrowserUtils;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+enum JxBrowserStatus {\n+  NOT_INSTALLED,\n+  INSTALLATION_IN_PROGRESS,\n+  INSTALLED,\n+  INSTALLATION_FAILED,\n+}\n+\n+// JxBrowser provides Chromium to display web pages within IntelliJ. This class manages downloading the required files and adding them to\n+// the class path.\n+public class JxBrowserManager {\n+  private static JxBrowserManager manager;\n+  private static final String DOWNLOAD_PATH = FileUtils.platformPath();\n+  private static final AtomicReference<JxBrowserStatus> status = new AtomicReference<>(JxBrowserStatus.NOT_INSTALLED);\n+  private static final Logger LOG = Logger.getInstance(JxBrowserManager.class);\n+  // We will be gating JxBrowser features until all of the features are landed.\n+  // To test JxBrowser, set this to true and also add license key to VM options (-Djxbrowser.license.key=<key>).\n+  public static final boolean ENABLE_JX_BROWSER = false;\n+\n+  private JxBrowserManager() {}\n+\n+  public static JxBrowserManager getInstance() {\n+    if (manager == null) {\n+      return new JxBrowserManager();\n+    }\n+    return manager;\n+  }\n+\n+  public boolean isInstalled() {\n+    return status.get().equals(JxBrowserStatus.INSTALLED);\n+  }\n+\n+  public void setUp(Project project) {\n+    if (!status.compareAndSet(JxBrowserStatus.NOT_INSTALLED, JxBrowserStatus.INSTALLATION_IN_PROGRESS)) {\n+      // This check ensures that an IDE only downloads and installs JxBrowser once, even if multiple projects are open.\n+      // If already in progress, let calling point wait until success or failure (it may make sense to call setUp but proceed).\n+      // If already succeeded or failed, no need to continue.\n+      return;\n+    }\n+\n+    LOG.info(project.getName() + \": Installing JxBrowser\");\n+\n+    final File directory = new File(DOWNLOAD_PATH);\n+    if (!directory.exists()) {\n+      if (!directory.mkdirs()) {\n+        LOG.info(project.getName() + \": Unable to create directory for JxBrowser files\");\n+        status.set(JxBrowserStatus.INSTALLATION_FAILED);\n+        return;\n+      }\n+    }\n+\n+    // Check for file or loading file\n+    final String[] fileNames = {JxBrowserUtils.getPlatformFileName(), JxBrowserUtils.getApiFileName(), JxBrowserUtils.getSwingFileName()};\n+    boolean allDownloaded = true;\n+    final List<File> files = new ArrayList<>();\n+    for (String fileName : fileNames) {\n+      final File file = new File(DOWNLOAD_PATH + File.separator + fileName);\n+      files.add(file);\n+      if (!file.exists()) {\n+        allDownloaded = false;\n+      }\n+    }\n+\n+    if (allDownloaded) {\n+      LOG.info(project.getName() + \": JxBrowser platform file already exists, skipping download\");\n+      loadClasses(files);\n+      return;\n+    }\n+\n+    final File tempLoadingFile = new File(DOWNLOAD_PATH + File.separator + JxBrowserUtils.getLoadingFileName());\n+    boolean created = false;\n+    try {\n+      created = tempLoadingFile.createNewFile();\n+    }\n+    catch (IOException e) {\n+      e.printStackTrace();\n+    }\n+\n+    if (!created) {\n+      // This means another IDE already created this file and has started downloading.\n+      // Wait for download to finish and then try loading again.\n+      LOG.info(project.getName() + \": Waiting for JxBrowser file to download\");\n+      int waitSeconds = 1;\n+      while (waitSeconds <= 128) {\n+        if (tempLoadingFile.exists()) {\n+          try {\n+            Thread.sleep(waitSeconds * 1000);\n+          }\n+          catch (InterruptedException e) {\n+            e.printStackTrace();\n+            break;\n+          }\n+          waitSeconds = waitSeconds * 2;\n+        }\n+        else {\n+          LOG.info(project.getName() + \": JxBrowser file downloaded, attempting to load\");\n+          loadClasses(files);\n+          return;\n+        }\n+      }\n+      // If jxbrowser was not downloaded within allowed time.\n+      LOG.info(project.getName() + \": JxBrowser download timed out\");\n+      Notifications.Bus.notify(\n+        new Notification(\n+          FlutterMessages.FLUTTER_NOTIFICATION_GROUP_ID,\n+          FlutterIcons.Flutter,\n+          \"JxBrowser download timed out\",\n+          null,\n+          // TODO(helin24): Replace with better message or retry download action.\n+          String.format(\"Retry by deleting files in %s and restarting IntelliJ\", DOWNLOAD_PATH),\n+          NotificationType.INFORMATION,\n+          null\n+        )\n+      );\n+      status.set(JxBrowserStatus.INSTALLATION_FAILED);\n+      return;\n+    }\n+\n+    // Delete any already existing files.\n+    // TODO: Handle if files cannot be deleted.\n+    for (File file : files) {\n+      if (file.exists()) {\n+        if (!file.delete()) {\n+          LOG.info(project.getName() + \": Existing file could not be deleted - \" + file.getAbsolutePath());\n+        }\n+      }\n+    }\n+\n+    downloadJxBrowser(project, fileNames, tempLoadingFile);\n+  }\n+\n+  private void downloadJxBrowser(Project project, String[] fileNames, File tempLoadingFile) {\n+    final List<FileDownloader> fileDownloaders = new ArrayList<>();\n+    final DownloadableFileService service = DownloadableFileService.getInstance();\n+    for (String fileName : fileNames) {\n+      final DownloadableFileDescription\n+        description = service.createFileDescription(JxBrowserUtils.getDistributionLink(fileName), fileName);\n+      fileDownloaders.add(service.createDownloader(Collections.singletonList(description), fileName));\n+    }\n+\n+    final Task.Backgroundable task = new Task.Backgroundable(project, \"Downloading jxbrowser\") {\n+      @Override\n+      public void run(@NotNull ProgressIndicator indicator) {\n+        String currentFileName = null;\n+        try {\n+          final List<File> files = new ArrayList<>();\n+          for (int i = 0; i < fileDownloaders.size(); i++) {\n+            final FileDownloader downloader = fileDownloaders.get(i);\n+            currentFileName = fileNames[i];\n+            final Pair<File, DownloadableFileDescription> download =\n+              ContainerUtil.getFirstItem(downloader.download(new File(DOWNLOAD_PATH)));\n+            final File file = download != null ? download.first : null;\n+            if (file != null) {\n+              files.add(file);\n+              LOG.info(project.getName() + \": JxBrowser file downloaded: \" + file.getAbsolutePath());\n+            }\n+          }\n+\n+          tempLoadingFile.delete();\n+          loadClasses(files);\n+        }\n+        catch (IOException e) {\n+          LOG.info(project.getName() + \": JxBrowser file downloaded failed: \" + currentFileName);\n+          e.printStackTrace();\n+          status.set(JxBrowserStatus.INSTALLATION_FAILED);\n+          tempLoadingFile.delete();", "originalCommit": "c7863f3938b0f501561cb7c4730f6f9c45b7d788", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcwNTk3Ng==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r457705976", "bodyText": "Removing the tempLoadingFile since we will only try once on initial startup of an IDE. We can let users manually try another download if they open up a devtools panel.", "author": "helin24", "createdAt": "2020-07-20T21:36:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIxMDQwNA=="}], "type": "inlineReview"}, {"oid": "62a35a175ee590a15bd5d6b751109f3ba11e09c4", "url": "https://github.com/flutter/flutter-intellij/commit/62a35a175ee590a15bd5d6b751109f3ba11e09c4", "message": "Move browser to a new directory", "committedDate": "2020-07-20T17:20:18Z", "type": "commit"}, {"oid": "b9c7ce55998098967d8c25096387af5dc5db800a", "url": "https://github.com/flutter/flutter-intellij/commit/b9c7ce55998098967d8c25096387af5dc5db800a", "message": "Use plugins path for storing files\n\nThis means jxbrowser files will be downloaded once for each plugin\ninstall/update, but this makes delete easier since the entire plugins\nfolder is cleared at those times.", "committedDate": "2020-07-20T21:19:11Z", "type": "commit"}, {"oid": "4843b31739b9a33b5801a51bbbfaebd381f72c4f", "url": "https://github.com/flutter/flutter-intellij/commit/4843b31739b9a33b5801a51bbbfaebd381f72c4f", "message": "Remove code for managing download across IDEs", "committedDate": "2020-07-20T21:27:50Z", "type": "commit"}, {"oid": "30b207d55eb353f8ba2a4bfd4287172d3fb56ea5", "url": "https://github.com/flutter/flutter-intellij/commit/30b207d55eb353f8ba2a4bfd4287172d3fb56ea5", "message": "Use file separator char and disable", "committedDate": "2020-07-20T22:09:59Z", "type": "commit"}, {"oid": "1dc4e7587cd3399c9b066d879066316da0d6d872", "url": "https://github.com/flutter/flutter-intellij/commit/1dc4e7587cd3399c9b066d879066316da0d6d872", "message": "Check if contentManager is disposed", "committedDate": "2020-07-20T22:27:07Z", "type": "commit"}, {"oid": "2d861cb1377e9f281b69ae35c92d4df32d21b95d", "url": "https://github.com/flutter/flutter-intellij/commit/2d861cb1377e9f281b69ae35c92d4df32d21b95d", "message": "Clarify comment", "committedDate": "2020-07-20T22:35:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg1MTUxMg==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r457851512", "bodyText": "nit:\nAdd message to panel to communicate --> add a message to communicate", "author": "jacob314", "createdAt": "2020-07-21T05:49:07Z", "path": "src/io/flutter/view/FlutterView.java", "diffHunk": "@@ -181,6 +182,33 @@ private PerAppState getOrCreateStateForApp(FlutterApp app) {\n     return perAppViewState.computeIfAbsent(app, k -> new PerAppState());\n   }\n \n+  private void addBrowserInspectorViewContent(FlutterApp app, @Nullable InspectorService inspectorService, ToolWindow toolWindow) {\n+    final ContentManager contentManager = toolWindow.getContentManager();\n+\n+    final String tabName;\n+    final FlutterDevice device = app.device();\n+    if (device == null) {\n+      tabName = app.getProject().getName();\n+    }\n+    else {\n+      final List<FlutterDevice> existingDevices = new ArrayList<>();\n+      for (FlutterApp otherApp : perAppViewState.keySet()) {\n+        existingDevices.add(otherApp.device());\n+      }\n+      tabName = device.getUniqueName(existingDevices);\n+    }\n+\n+    if (emptyContent != null) {\n+      contentManager.removeContent(emptyContent, true);\n+      emptyContent = null;\n+    }\n+\n+    // TODO(helin24): Add message to panel to communicate that opening devtools is in progress.", "originalCommit": "2d861cb1377e9f281b69ae35c92d4df32d21b95d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg1MjI2MQ==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r457852261", "bodyText": "do we need to handle if devtools failed to install?", "author": "jacob314", "createdAt": "2020-07-21T05:51:20Z", "path": "src/io/flutter/view/FlutterView.java", "diffHunk": "@@ -373,6 +401,37 @@ private void debugActiveHelper(FlutterApp app, @Nullable InspectorService inspec\n \n     toolWindow.setIcon(ExecutionUtil.getLiveIndicator(FlutterIcons.Flutter_13));\n \n+    if (JxBrowserManager.getInstance().isInstalled()) {\n+      final DevToolsManager devToolsManager = DevToolsManager.getInstance(app.getProject());\n+\n+      if (devToolsManager.hasInstalledDevTools()) {\n+        addBrowserInspectorViewContent(app, inspectorService, toolWindow);\n+      }\n+      else {\n+        final CompletableFuture<Boolean> result = devToolsManager.installDevTools();\n+        result.thenAccept(o -> addBrowserInspectorViewContent(app, inspectorService, toolWindow));", "originalCommit": "2d861cb1377e9f281b69ae35c92d4df32d21b95d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI2NzA3Nw==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r458267077", "bodyText": "Yes, what would make sense here? I could pull the code below that starts the old inspector into a separate function and run that instead. Or maybe just display a message?", "author": "helin24", "createdAt": "2020-07-21T17:27:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg1MjI2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg1MjU1NQ==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r457852555", "bodyText": "why is this code needed here? this seems copied from somewhere and not clearly relevant.", "author": "jacob314", "createdAt": "2020-07-21T05:52:09Z", "path": "src/io/flutter/view/FlutterView.java", "diffHunk": "@@ -373,6 +401,37 @@ private void debugActiveHelper(FlutterApp app, @Nullable InspectorService inspec\n \n     toolWindow.setIcon(ExecutionUtil.getLiveIndicator(FlutterIcons.Flutter_13));\n \n+    if (JxBrowserManager.getInstance().isInstalled()) {\n+      final DevToolsManager devToolsManager = DevToolsManager.getInstance(app.getProject());\n+\n+      if (devToolsManager.hasInstalledDevTools()) {\n+        addBrowserInspectorViewContent(app, inspectorService, toolWindow);\n+      }\n+      else {\n+        final CompletableFuture<Boolean> result = devToolsManager.installDevTools();\n+        result.thenAccept(o -> addBrowserInspectorViewContent(app, inspectorService, toolWindow));\n+      }\n+\n+      onAppChanged(app);\n+\n+      app.addStateListener(new FlutterApp.FlutterAppListener() {", "originalCommit": "2d861cb1377e9f281b69ae35c92d4df32d21b95d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg1MzQwOQ==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r457853409", "bodyText": "add your username to the TODO", "author": "jacob314", "createdAt": "2020-07-21T05:54:46Z", "path": "src/io/flutter/jxbrowser/JxBrowserManager.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright 2020 The Chromium Authors. All rights reserved.\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+package io.flutter.jxbrowser;\n+\n+import com.intellij.openapi.application.PathManager;\n+import com.intellij.openapi.diagnostic.Logger;\n+import com.intellij.openapi.progress.ProgressIndicator;\n+import com.intellij.openapi.progress.ProgressManager;\n+import com.intellij.openapi.progress.Task;\n+import com.intellij.openapi.progress.impl.BackgroundableProcessIndicator;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.util.Pair;\n+import com.intellij.util.containers.ContainerUtil;\n+import com.intellij.util.download.DownloadableFileDescription;\n+import com.intellij.util.download.DownloadableFileService;\n+import com.intellij.util.download.FileDownloader;\n+import com.intellij.util.lang.UrlClassLoader;\n+import io.flutter.utils.JxBrowserUtils;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+enum JxBrowserStatus {\n+  NOT_INSTALLED,\n+  INSTALLATION_IN_PROGRESS,\n+  INSTALLED,\n+  INSTALLATION_FAILED,\n+}\n+\n+// JxBrowser provides Chromium to display web pages within IntelliJ. This class manages downloading the required files and adding them to\n+// the class path.\n+public class JxBrowserManager {\n+  private static JxBrowserManager manager;\n+  private static final String DOWNLOAD_PATH = PathManager.getPluginsPath() + File.separatorChar + \"flutter-intellij\" + File.separatorChar + \"jxbrowser\";\n+  private static final AtomicReference<JxBrowserStatus> status = new AtomicReference<>(JxBrowserStatus.NOT_INSTALLED);\n+  private static final Logger LOG = Logger.getInstance(JxBrowserManager.class);\n+  // We will be gating JxBrowser features until all of the features are landed.\n+  // To test JxBrowser, set this to true and also add license key to VM options (-Djxbrowser.license.key=<key>).\n+  public static final boolean ENABLE_JX_BROWSER = false;\n+\n+  private JxBrowserManager() {}\n+\n+  public static JxBrowserManager getInstance() {\n+    if (manager == null) {\n+      return new JxBrowserManager();\n+    }\n+    return manager;\n+  }\n+\n+  public boolean isInstalled() {\n+    return status.get().equals(JxBrowserStatus.INSTALLED);\n+  }\n+\n+  public void setUp(Project project) {\n+    if (!status.compareAndSet(JxBrowserStatus.NOT_INSTALLED, JxBrowserStatus.INSTALLATION_IN_PROGRESS)) {\n+      // This check ensures that an IDE only downloads and installs JxBrowser once, even if multiple projects are open.\n+      // If already in progress, let calling point wait until success or failure (it may make sense to call setUp but proceed).\n+      // If already succeeded or failed, no need to continue.\n+      return;\n+    }\n+\n+    LOG.info(project.getName() + \": Installing JxBrowser\");\n+\n+    final File directory = new File(DOWNLOAD_PATH);\n+    if (!directory.exists()) {\n+      if (!directory.mkdirs()) {\n+        LOG.info(project.getName() + \": Unable to create directory for JxBrowser files\");\n+        status.set(JxBrowserStatus.INSTALLATION_FAILED);\n+        return;\n+      }\n+    }\n+\n+    // Check whether the files already exist.\n+    final String[] fileNames = {JxBrowserUtils.getPlatformFileName(), JxBrowserUtils.getApiFileName(), JxBrowserUtils.getSwingFileName()};\n+    boolean allDownloaded = true;\n+    final List<File> files = new ArrayList<>();\n+    for (String fileName : fileNames) {\n+      final File file = new File(DOWNLOAD_PATH + File.separator + fileName);\n+      files.add(file);\n+      if (!file.exists()) {\n+        allDownloaded = false;\n+      }\n+    }\n+\n+    if (allDownloaded) {\n+      LOG.info(project.getName() + \": JxBrowser platform file already exists, skipping download\");\n+      loadClasses(files);\n+      return;\n+    }\n+\n+    // Delete any already existing files.\n+    // TODO: Handle if files cannot be deleted.", "originalCommit": "2d861cb1377e9f281b69ae35c92d4df32d21b95d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg1Mzk5OQ==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r457853999", "bodyText": "what exception are you expecting? should we delete the cached browser files in this case?", "author": "jacob314", "createdAt": "2020-07-21T05:56:21Z", "path": "src/io/flutter/jxbrowser/JxBrowserManager.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright 2020 The Chromium Authors. All rights reserved.\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+package io.flutter.jxbrowser;\n+\n+import com.intellij.openapi.application.PathManager;\n+import com.intellij.openapi.diagnostic.Logger;\n+import com.intellij.openapi.progress.ProgressIndicator;\n+import com.intellij.openapi.progress.ProgressManager;\n+import com.intellij.openapi.progress.Task;\n+import com.intellij.openapi.progress.impl.BackgroundableProcessIndicator;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.util.Pair;\n+import com.intellij.util.containers.ContainerUtil;\n+import com.intellij.util.download.DownloadableFileDescription;\n+import com.intellij.util.download.DownloadableFileService;\n+import com.intellij.util.download.FileDownloader;\n+import com.intellij.util.lang.UrlClassLoader;\n+import io.flutter.utils.JxBrowserUtils;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+enum JxBrowserStatus {\n+  NOT_INSTALLED,\n+  INSTALLATION_IN_PROGRESS,\n+  INSTALLED,\n+  INSTALLATION_FAILED,\n+}\n+\n+// JxBrowser provides Chromium to display web pages within IntelliJ. This class manages downloading the required files and adding them to\n+// the class path.\n+public class JxBrowserManager {\n+  private static JxBrowserManager manager;\n+  private static final String DOWNLOAD_PATH = PathManager.getPluginsPath() + File.separatorChar + \"flutter-intellij\" + File.separatorChar + \"jxbrowser\";\n+  private static final AtomicReference<JxBrowserStatus> status = new AtomicReference<>(JxBrowserStatus.NOT_INSTALLED);\n+  private static final Logger LOG = Logger.getInstance(JxBrowserManager.class);\n+  // We will be gating JxBrowser features until all of the features are landed.\n+  // To test JxBrowser, set this to true and also add license key to VM options (-Djxbrowser.license.key=<key>).\n+  public static final boolean ENABLE_JX_BROWSER = false;\n+\n+  private JxBrowserManager() {}\n+\n+  public static JxBrowserManager getInstance() {\n+    if (manager == null) {\n+      return new JxBrowserManager();\n+    }\n+    return manager;\n+  }\n+\n+  public boolean isInstalled() {\n+    return status.get().equals(JxBrowserStatus.INSTALLED);\n+  }\n+\n+  public void setUp(Project project) {\n+    if (!status.compareAndSet(JxBrowserStatus.NOT_INSTALLED, JxBrowserStatus.INSTALLATION_IN_PROGRESS)) {\n+      // This check ensures that an IDE only downloads and installs JxBrowser once, even if multiple projects are open.\n+      // If already in progress, let calling point wait until success or failure (it may make sense to call setUp but proceed).\n+      // If already succeeded or failed, no need to continue.\n+      return;\n+    }\n+\n+    LOG.info(project.getName() + \": Installing JxBrowser\");\n+\n+    final File directory = new File(DOWNLOAD_PATH);\n+    if (!directory.exists()) {\n+      if (!directory.mkdirs()) {\n+        LOG.info(project.getName() + \": Unable to create directory for JxBrowser files\");\n+        status.set(JxBrowserStatus.INSTALLATION_FAILED);\n+        return;\n+      }\n+    }\n+\n+    // Check whether the files already exist.\n+    final String[] fileNames = {JxBrowserUtils.getPlatformFileName(), JxBrowserUtils.getApiFileName(), JxBrowserUtils.getSwingFileName()};\n+    boolean allDownloaded = true;\n+    final List<File> files = new ArrayList<>();\n+    for (String fileName : fileNames) {\n+      final File file = new File(DOWNLOAD_PATH + File.separator + fileName);\n+      files.add(file);\n+      if (!file.exists()) {\n+        allDownloaded = false;\n+      }\n+    }\n+\n+    if (allDownloaded) {\n+      LOG.info(project.getName() + \": JxBrowser platform file already exists, skipping download\");\n+      loadClasses(files);\n+      return;\n+    }\n+\n+    // Delete any already existing files.\n+    // TODO: Handle if files cannot be deleted.\n+    for (File file : files) {\n+      if (file.exists()) {\n+        if (!file.delete()) {\n+          LOG.info(project.getName() + \": Existing file could not be deleted - \" + file.getAbsolutePath());\n+        }\n+      }\n+    }\n+\n+    downloadJxBrowser(project, fileNames);\n+  }\n+\n+  private void downloadJxBrowser(Project project, String[] fileNames) {\n+    // The FileDownloader API is used by other plugins - e.g.\n+    // https://github.com/JetBrains/intellij-community/blob/b09f8151e0d189d70363266c3bb6edb5f6bfeca4/plugins/markdown/src/org/intellij/plugins/markdown/ui/preview/javafx/JavaFXInstallator.java#L48\n+    final List<FileDownloader> fileDownloaders = new ArrayList<>();\n+    final DownloadableFileService service = DownloadableFileService.getInstance();\n+    for (String fileName : fileNames) {\n+      final DownloadableFileDescription\n+        description = service.createFileDescription(JxBrowserUtils.getDistributionLink(fileName), fileName);\n+      fileDownloaders.add(service.createDownloader(Collections.singletonList(description), fileName));\n+    }\n+\n+    final Task.Backgroundable task = new Task.Backgroundable(project, \"Downloading jxbrowser\") {\n+      @Override\n+      public void run(@NotNull ProgressIndicator indicator) {\n+        String currentFileName = null;\n+        try {\n+          final List<File> files = new ArrayList<>();\n+          for (int i = 0; i < fileDownloaders.size(); i++) {\n+            final FileDownloader downloader = fileDownloaders.get(i);\n+            currentFileName = fileNames[i];\n+            final Pair<File, DownloadableFileDescription> download =\n+              ContainerUtil.getFirstItem(downloader.download(new File(DOWNLOAD_PATH)));\n+            final File file = download != null ? download.first : null;\n+            if (file != null) {\n+              files.add(file);\n+              LOG.info(project.getName() + \": JxBrowser file downloaded: \" + file.getAbsolutePath());\n+            }\n+          }\n+\n+          loadClasses(files);\n+        }\n+        catch (IOException e) {\n+          LOG.info(project.getName() + \": JxBrowser file downloaded failed: \" + currentFileName);\n+          e.printStackTrace();\n+          status.set(JxBrowserStatus.INSTALLATION_FAILED);\n+        }\n+      }\n+    };\n+    BackgroundableProcessIndicator processIndicator = new BackgroundableProcessIndicator(task);\n+    processIndicator.setIndeterminate(false);\n+    ProgressManager.getInstance().runProcessWithProgressAsynchronously(task, processIndicator);\n+  }\n+\n+  private void loadClasses(List<File> files) {\n+    final UrlClassLoader classLoader = (UrlClassLoader) this.getClass().getClassLoader();\n+    try {\n+      for (File file : files) {\n+        final URL url = file.toURI().toURL();\n+        classLoader.addURL(url);\n+        LOG.info(\"Loaded JxBrowser file successfully: \" + url.toString());\n+      }\n+\n+      status.set(JxBrowserStatus.INSTALLED);\n+    }\n+    catch (Exception e) {\n+      LOG.info(\"Failed to load JxBrowser files\");", "originalCommit": "2d861cb1377e9f281b69ae35c92d4df32d21b95d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI0NzMxMA==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r458247310", "bodyText": "toURL can throw a malformed URL exception. I'm not sure how to handle this case. We could delete the files, but if this occurred because of a bug in our file naming, then it would be annoying for the user to have to keep downloading the files to a bad spot each time they opened their IDE.", "author": "helin24", "createdAt": "2020-07-21T16:55:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg1Mzk5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg1NDQxNw==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r457854417", "bodyText": "are we catching this exception? It would be nice to just fail gracefully if a platform we don't support is used.", "author": "jacob314", "createdAt": "2020-07-21T05:57:35Z", "path": "src/io/flutter/utils/JxBrowserUtils.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 The Chromium Authors. All rights reserved.\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+package io.flutter.utils;\n+\n+import com.intellij.openapi.util.SystemInfo;\n+\n+public class JxBrowserUtils {\n+  private static final String JXBROWSER_FILE_PREFIX = \"jxbrowser\";\n+  private static final String JXBROWSER_FILE_VERSION = \"7.8\";\n+  private static final String JXBROWSER_FILE_SUFFIX = \"jar\";\n+\n+  public static String getPlatformFileName() {\n+    String name = \"\";\n+    if (SystemInfo.isMac) {\n+      name = \"mac\";\n+    } else if (SystemInfo.isWindows) {\n+      if (SystemInfo.is32Bit) {\n+        name = \"win32\";\n+      } else if (SystemInfo.is64Bit) {\n+        name = \"win64\";\n+      }\n+    } else if (SystemInfo.isLinux && SystemInfo.is64Bit) {\n+      name = \"linux64\";\n+    }\n+\n+    if (name.isEmpty()) {", "originalCommit": "2d861cb1377e9f281b69ae35c92d4df32d21b95d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI1MTY4NQ==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r458251685", "bodyText": "Ah true. Changed this to a checked exception.", "author": "helin24", "createdAt": "2020-07-21T17:02:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg1NDQxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg1NDU1NQ==", "url": "https://github.com/flutter/flutter-intellij/pull/4664#discussion_r457854555", "bodyText": "should this be removed?", "author": "jacob314", "createdAt": "2020-07-21T05:58:01Z", "path": "src/io/flutter/utils/JxBrowserUtils.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 The Chromium Authors. All rights reserved.\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+package io.flutter.utils;\n+\n+import com.intellij.openapi.util.SystemInfo;\n+\n+public class JxBrowserUtils {\n+  private static final String JXBROWSER_FILE_PREFIX = \"jxbrowser\";\n+  private static final String JXBROWSER_FILE_VERSION = \"7.8\";\n+  private static final String JXBROWSER_FILE_SUFFIX = \"jar\";\n+\n+  public static String getPlatformFileName() {\n+    String name = \"\";\n+    if (SystemInfo.isMac) {\n+      name = \"mac\";\n+    } else if (SystemInfo.isWindows) {\n+      if (SystemInfo.is32Bit) {\n+        name = \"win32\";\n+      } else if (SystemInfo.is64Bit) {\n+        name = \"win64\";\n+      }\n+    } else if (SystemInfo.isLinux && SystemInfo.is64Bit) {\n+      name = \"linux64\";\n+    }\n+\n+    if (name.isEmpty()) {\n+      throw new UnsupportedOperationException(\"Unable to find matching JxBrowser platform file for: \" + SystemInfo.getOsNameAndVersion());\n+    }\n+\n+    return String.format(\"%s-%s-%s.%s\", JXBROWSER_FILE_PREFIX, name, JXBROWSER_FILE_VERSION, JXBROWSER_FILE_SUFFIX);\n+  }\n+\n+  public static String getApiFileName() {\n+    return String.format(\"%s-%s.%s\", JXBROWSER_FILE_PREFIX, JXBROWSER_FILE_VERSION, JXBROWSER_FILE_SUFFIX);\n+  }\n+\n+  public static String getSwingFileName() {\n+    return String.format(\"%s-swing-%s.%s\", JXBROWSER_FILE_PREFIX, JXBROWSER_FILE_VERSION, JXBROWSER_FILE_SUFFIX);\n+  }\n+\n+  public static String getLoadingFileName() {", "originalCommit": "2d861cb1377e9f281b69ae35c92d4df32d21b95d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f26225b0f70bfb66e880c20f3b28c0dadca19109", "url": "https://github.com/flutter/flutter-intellij/commit/f26225b0f70bfb66e880c20f3b28c0dadca19109", "message": "Address comments in jxbrowser manager", "committedDate": "2020-07-21T17:05:15Z", "type": "commit"}, {"oid": "899c7705223c0d2e1653abee65a09557169a56c3", "url": "https://github.com/flutter/flutter-intellij/commit/899c7705223c0d2e1653abee65a09557169a56c3", "message": "Remove unneeded code", "committedDate": "2020-07-21T17:29:18Z", "type": "commit"}, {"oid": "2512ab309779e9acd821fc0c11785f5a187c3369", "url": "https://github.com/flutter/flutter-intellij/commit/2512ab309779e9acd821fc0c11785f5a187c3369", "message": "Remove print stack trace", "committedDate": "2020-07-21T17:43:42Z", "type": "commit"}]}