{"pr_number": 2639, "pr_title": "[F] ENT-2105: Apply dynamic property filtering to openapi DTOs", "pr_createdAt": "2020-03-13T16:41:13Z", "pr_url": "https://github.com/candlepin/candlepin/pull/2639", "timeline": [{"oid": "ae0c0f11b447428323146d1e6fd8d8a23a51b42a", "url": "https://github.com/candlepin/candlepin/commit/ae0c0f11b447428323146d1e6fd8d8a23a51b42a", "message": "ENT-2105: Apply dynamic property filtering to openapi DTOs\n\n- Old DTOs now use the \"OldDTOFilter\" filter name for hateoas and\n  dynamic property filtering.\n- New DTOs (ported to openapi spec) now use the \"DTOFilter\" filter\n  name for dynamic property filtering, by indirectly applying a\n  @JsonFilter annotation to them using Jackson Mix-Ins.\n- Stop adding the following obsolete filters to all ObjectMappers,\n  and remove all applied annotations for them: PoolAttributeFilter,\n  ProductAttributeFilter, ProvidedProductFilter.\n- Stop adding the following obsolete filters to RulesObjectMapper\n  and remove applied annotations for them on rules DTOs:\n  ConsumerFilter, EntitlementFilter, OwnerFilter, GuestFilter.\n  The rules DTOs are already directly filtered-down versions of\n  their entity counterparts. Delete obsolete RulesObjectMapper unit\n  tests.\n- Remove irrelevant annotations from manifest DTOs: OwnerFilter,\n  PoolFilter.\n- Stop adding the EntitlementFilter to the SyncUtils ObjectMapper;\n  instead, directly remove the consumer field from the manifest\n  EntitlementDTO which was being filtered anyway.\n- Add unit tests for openapi-generated DTO property filtering.\n- Introduce ArrayExcludeGuestIdDTO & related translator, which is\n  a version of GuestIdDTO that does not include the attributes\n  field, used in cases where the @HateoasArrayExclude annotation\n  filtering was previously used.", "committedDate": "2020-03-13T16:51:54Z", "type": "forcePushed"}, {"oid": "534e6f9f225daa4fccbad42390b9dedde251309a", "url": "https://github.com/candlepin/candlepin/commit/534e6f9f225daa4fccbad42390b9dedde251309a", "message": "ENT-2105: Apply dynamic property filtering to openapi DTOs\n\n- Old DTOs now use the \"OldDTOFilter\" filter name for hateoas and\n  dynamic property filtering.\n- New DTOs (ported to openapi spec) now use the \"DTOFilter\" filter\n  name for dynamic property filtering, by indirectly applying a\n  @JsonFilter annotation to them using Jackson Mix-Ins.\n- Stop adding the following obsolete filters to all ObjectMappers,\n  and remove all applied annotations for them: PoolAttributeFilter,\n  ProductAttributeFilter, ProvidedProductFilter.\n- Stop adding the following obsolete filters to RulesObjectMapper\n  and remove applied annotations for them on rules DTOs:\n  ConsumerFilter, EntitlementFilter, OwnerFilter, GuestFilter.\n  The rules DTOs are already directly filtered-down versions of\n  their entity counterparts. Delete obsolete RulesObjectMapper unit\n  tests.\n- Remove irrelevant annotations from manifest DTOs: OwnerFilter,\n  PoolFilter.\n- Stop adding the EntitlementFilter to the SyncUtils ObjectMapper;\n  instead, directly remove the consumer field from the manifest\n  EntitlementDTO which was being filtered anyway.\n- Add unit tests for openapi-generated DTO property filtering.\n- Introduce ArrayExcludeGuestIdDTO & related translator, which is\n  a version of GuestIdDTO that does not include the attributes\n  field, used in cases where the @HateoasArrayExclude annotation\n  filtering was previously used.", "committedDate": "2020-03-16T11:30:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAzNTI2Mg==", "url": "https://github.com/candlepin/candlepin/pull/2639#discussion_r393035262", "bodyText": "For these tests where we have nested nodes, we should also verify that the children nodes have the correct amount of elements.\nApplies below as well", "author": "Ceiu", "createdAt": "2020-03-16T13:49:49Z", "path": "server/src/test/java/org/candlepin/resteasy/JsonProviderTest.java", "diffHunk": "@@ -142,4 +148,203 @@ private boolean isEnabled(JsonProvider provider, SerializationFeature feature) {\n         return sConfig.isEnabled(feature);\n     }\n \n+    @Test\n+    public void testDynamicPropertyFilterExcludeSingleProperty() {\n+        DynamicFilterData filterData = new DynamicFilterData();\n+        filterData.excludeAttribute(\"name\");\n+        ResteasyProviderFactory.pushContext(DynamicFilterData.class, filterData);\n+\n+        ActivationKeyDTO keyDTO = new ActivationKeyDTO();\n+        String serializedKey = \"\";\n+        try {\n+            serializedKey = ourMapper.writeValueAsString(keyDTO);\n+        }\n+        catch (JsonProcessingException e) {\n+            fail(\"Serializing ActivationKeyDTO failed!\");\n+        }\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        JsonNode akNode = null;\n+        try {\n+            akNode = mapper.readTree(serializedKey);\n+        }\n+        catch (JsonProcessingException e) {\n+            fail(\"Parsing serialized ActivationKeyDTO failed!\");\n+        }\n+\n+        assertTrue(akNode.has(\"id\"), \"The 'id' field should NOT have been excluded!\");\n+        assertTrue(akNode.has(\"description\"), \"The 'description' field should NOT have been excluded!\");\n+        assertTrue(akNode.has(\"releaseVer\"), \"The 'releaseVer' field should NOT have been excluded!\");\n+        assertFalse(akNode.has(\"name\"), \"The 'name' field should have been excluded!\");\n+    }\n+\n+    @Test\n+    public void testDynamicPropertyFilterExcludeMultipleProperties() {\n+        DynamicFilterData filterData = new DynamicFilterData();\n+        filterData.excludeAttribute(\"name\");\n+        filterData.excludeAttribute(\"addOns\");\n+        filterData.excludeAttribute(\"serviceLevel\");\n+        ResteasyProviderFactory.pushContext(DynamicFilterData.class, filterData);\n+\n+        ActivationKeyDTO keyDTO = new ActivationKeyDTO();\n+        String serializedKey = \"\";\n+        try {\n+            serializedKey = ourMapper.writeValueAsString(keyDTO);\n+        }\n+        catch (JsonProcessingException e) {\n+            fail(\"Serializing ActivationKeyDTO failed!\");\n+        }\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        JsonNode akNode = null;\n+        try {\n+            akNode = mapper.readTree(serializedKey);\n+        }\n+        catch (JsonProcessingException e) {\n+            fail(\"Parsing serialized ActivationKeyDTO failed!\");\n+        }\n+\n+        assertTrue(akNode.has(\"id\"), \"The 'id' field should NOT have been excluded!\");\n+        assertTrue(akNode.has(\"description\"), \"The 'description' field should NOT have been excluded!\");\n+        assertTrue(akNode.has(\"releaseVer\"), \"The 'releaseVer' field should NOT have been excluded!\");\n+        assertFalse(akNode.has(\"name\"), \"The 'name' field should have been excluded!\");\n+        assertFalse(akNode.has(\"addOns\"), \"The 'addOns' field should have been excluded!\");\n+        assertFalse(akNode.has(\"serviceLevel\"), \"The 'serviceLevel' field should have been excluded!\");\n+    }\n+\n+    @Test\n+    public void testDynamicPropertyFilterIncludeSingleProperty() {\n+        DynamicFilterData filterData = new DynamicFilterData();\n+        filterData.includeAttribute(\"name\");\n+        filterData.setWhitelistMode(true); // When only includes are set, we should be in whitelist mode\n+        ResteasyProviderFactory.pushContext(DynamicFilterData.class, filterData);\n+\n+        ActivationKeyDTO keyDTO = new ActivationKeyDTO();\n+        String serializedKey = \"\";\n+        try {\n+            serializedKey = ourMapper.writeValueAsString(keyDTO);\n+        }\n+        catch (JsonProcessingException e) {\n+            fail(\"Serializing ActivationKeyDTO failed!\");\n+        }\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        JsonNode akNode = null;\n+        try {\n+            akNode = mapper.readTree(serializedKey);\n+        }\n+        catch (JsonProcessingException e) {\n+            fail(\"Parsing serialized ActivationKeyDTO failed!\");\n+        }\n+        assertEquals(1, akNode.size());\n+        assertTrue(akNode.has(\"name\"), \"The 'name' field should have been included!\");\n+    }\n+\n+    @Test\n+    public void testDynamicPropertyFilterIncludeMultipleProperties() {\n+        DynamicFilterData filterData = new DynamicFilterData();\n+        filterData.includeAttribute(\"name\");\n+        filterData.includeAttribute(\"releaseVer\");\n+        filterData.includeAttribute(\"addOns\");\n+        filterData.setWhitelistMode(true); // When only includes are set, we should be in whitelist mode\n+        ResteasyProviderFactory.pushContext(DynamicFilterData.class, filterData);\n+\n+        ActivationKeyDTO keyDTO = new ActivationKeyDTO();\n+        String serializedKey = \"\";\n+        try {\n+            serializedKey = ourMapper.writeValueAsString(keyDTO);\n+        }\n+        catch (JsonProcessingException e) {\n+            fail(\"Serializing ActivationKeyDTO failed!\");\n+        }\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        JsonNode akNode = null;\n+        try {\n+            akNode = mapper.readTree(serializedKey);\n+        }\n+        catch (JsonProcessingException e) {\n+            fail(\"Parsing serialized ActivationKeyDTO failed!\");\n+        }\n+        assertEquals(3, akNode.size());\n+        assertTrue(akNode.has(\"name\"), \"The 'name' field should have been included!\");\n+        assertTrue(akNode.has(\"releaseVer\"), \"The 'releaseVer' field should have been included!\");\n+        assertTrue(akNode.has(\"addOns\"), \"The 'addOns' field should have been included!\");\n+    }\n+\n+    @Test\n+    public void testDynamicPropertyFilterIncludeNestedProperty() {\n+        DynamicFilterData filterData = new DynamicFilterData();\n+        filterData.includeAttribute(\"owner.id\");\n+        filterData.setWhitelistMode(true); // When only includes are set, we should be in whitelist mode\n+        ResteasyProviderFactory.pushContext(DynamicFilterData.class, filterData);\n+\n+        ActivationKeyDTO keyDTO = new ActivationKeyDTO();\n+        NestedOwnerDTO ownerDTO = new NestedOwnerDTO()\n+            .key(\"owner_key\")\n+            .id(\"owner_id\");\n+        keyDTO.setOwner(ownerDTO);\n+\n+        String serializedKey = \"\";\n+        try {\n+            serializedKey = ourMapper.writeValueAsString(keyDTO);\n+        }\n+        catch (JsonProcessingException e) {\n+            fail(\"Serializing ActivationKeyDTO failed!\");\n+        }\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        JsonNode akNode = null;\n+        try {\n+            akNode = mapper.readTree(serializedKey);\n+        }\n+        catch (JsonProcessingException e) {\n+            fail(\"Parsing serialized ActivationKeyDTO failed!\");\n+        }\n+        assertEquals(1, akNode.size());\n+        assertTrue(akNode.has(\"owner\"), \"The 'owner' field should have been included!\");\n+        assertTrue(akNode.get(\"owner\").has(\"id\"), \"The 'owner.id' field should have been included!\");", "originalCommit": "534e6f9f225daa4fccbad42390b9dedde251309a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEzMzc2NA==", "url": "https://github.com/candlepin/candlepin/pull/2639#discussion_r393133764", "bodyText": "Done", "author": "nikosmoum", "createdAt": "2020-03-16T16:02:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAzNTI2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAzNzYxNA==", "url": "https://github.com/candlepin/candlepin/pull/2639#discussion_r393037614", "bodyText": "This is probably the lowest priority thing I've ever requested, but could we call this LegacyDTOFilter rather than Old? I don't know why, but \"old\" feels very rough to me.", "author": "Ceiu", "createdAt": "2020-03-16T13:53:14Z", "path": "server/src/main/java/org/candlepin/resteasy/JsonProvider.java", "diffHunk": "@@ -107,6 +124,11 @@ private void configureHateoasObjectMapper(ObjectMapper mapper, boolean indentJso\n         }\n \n         SimpleFilterProvider filterProvider = new SimpleFilterProvider();\n+        filterProvider = filterProvider.addFilter(\"DTOFilter\", new DynamicPropertyFilter());\n+\n+        // TODO: Once all DTOs are ported to the openapi spec, stop adding the following\n+        //  filters: OldDTOFilter, ConsumerFilter, EntitlementFilter, OwnerFilter, GuestFilter.\n+        filterProvider = filterProvider.addFilter(\"OldDTOFilter\", new DynamicPropertyFilter());", "originalCommit": "534e6f9f225daa4fccbad42390b9dedde251309a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEwNzgxNg==", "url": "https://github.com/candlepin/candlepin/pull/2639#discussion_r393107816", "bodyText": "No problem, LegacyDTOFilter sounds good", "author": "nikosmoum", "createdAt": "2020-03-16T15:25:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAzNzYxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEzMzgwMQ==", "url": "https://github.com/candlepin/candlepin/pull/2639#discussion_r393133801", "bodyText": "Done", "author": "nikosmoum", "createdAt": "2020-03-16T16:02:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAzNzYxNA=="}], "type": "inlineReview"}, {"oid": "139ee9953506430bcf0f76bb2446ee2a7c26ee6a", "url": "https://github.com/candlepin/candlepin/commit/139ee9953506430bcf0f76bb2446ee2a7c26ee6a", "message": "ENT-2105: Apply dynamic property filtering to openapi DTOs\n\n- Old DTOs now use the \"LegacyDTOFilter\" filter name for hateoas and\n  dynamic property filtering.\n- New DTOs (ported to openapi spec) now use the \"DTOFilter\" filter\n  name for dynamic property filtering, by indirectly applying a\n  @JsonFilter annotation to them using Jackson Mix-Ins.\n- Stop adding the following obsolete filters to all ObjectMappers,\n  and remove all applied annotations for them: PoolAttributeFilter,\n  ProductAttributeFilter, ProvidedProductFilter.\n- Stop adding the following obsolete filters to RulesObjectMapper\n  and remove applied annotations for them on rules DTOs:\n  ConsumerFilter, EntitlementFilter, OwnerFilter, GuestFilter.\n  The rules DTOs are already directly filtered-down versions of\n  their entity counterparts. Delete obsolete RulesObjectMapper unit\n  tests.\n- Remove irrelevant annotations from manifest DTOs: OwnerFilter,\n  PoolFilter.\n- Stop adding the EntitlementFilter to the SyncUtils ObjectMapper;\n  instead, directly remove the consumer field from the manifest\n  EntitlementDTO which was being filtered anyway.\n- Add unit tests for openapi-generated DTO property filtering.\n- Introduce GuestIdDTOArrayElement & related translator, which is\n  a version of GuestIdDTO that does not include the attributes\n  field, used in cases where the @HateoasArrayExclude annotation\n  filtering was previously used.", "committedDate": "2020-03-16T16:01:31Z", "type": "commit"}, {"oid": "139ee9953506430bcf0f76bb2446ee2a7c26ee6a", "url": "https://github.com/candlepin/candlepin/commit/139ee9953506430bcf0f76bb2446ee2a7c26ee6a", "message": "ENT-2105: Apply dynamic property filtering to openapi DTOs\n\n- Old DTOs now use the \"LegacyDTOFilter\" filter name for hateoas and\n  dynamic property filtering.\n- New DTOs (ported to openapi spec) now use the \"DTOFilter\" filter\n  name for dynamic property filtering, by indirectly applying a\n  @JsonFilter annotation to them using Jackson Mix-Ins.\n- Stop adding the following obsolete filters to all ObjectMappers,\n  and remove all applied annotations for them: PoolAttributeFilter,\n  ProductAttributeFilter, ProvidedProductFilter.\n- Stop adding the following obsolete filters to RulesObjectMapper\n  and remove applied annotations for them on rules DTOs:\n  ConsumerFilter, EntitlementFilter, OwnerFilter, GuestFilter.\n  The rules DTOs are already directly filtered-down versions of\n  their entity counterparts. Delete obsolete RulesObjectMapper unit\n  tests.\n- Remove irrelevant annotations from manifest DTOs: OwnerFilter,\n  PoolFilter.\n- Stop adding the EntitlementFilter to the SyncUtils ObjectMapper;\n  instead, directly remove the consumer field from the manifest\n  EntitlementDTO which was being filtered anyway.\n- Add unit tests for openapi-generated DTO property filtering.\n- Introduce GuestIdDTOArrayElement & related translator, which is\n  a version of GuestIdDTO that does not include the attributes\n  field, used in cases where the @HateoasArrayExclude annotation\n  filtering was previously used.", "committedDate": "2020-03-16T16:01:31Z", "type": "forcePushed"}]}