{"pr_number": 2692, "pr_title": "ENT-1876: Port HypervisorResource to spec-first", "pr_createdAt": "2020-04-28T07:20:58Z", "pr_url": "https://github.com/candlepin/candlepin/pull/2692", "timeline": [{"oid": "d4eb5727452292d30e9eecd772d3bb2945bc93a2", "url": "https://github.com/candlepin/candlepin/commit/d4eb5727452292d30e9eecd772d3bb2945bc93a2", "message": "ENT-1876: Port HypervisorResource to spec-first\n - Added API specifications in yaml file\n - Ported HypervisorUpdateResultDTO and HypervisorConsumerDTO\n - Update the resource and test classes", "committedDate": "2020-04-28T10:43:42Z", "type": "forcePushed"}, {"oid": "830ea90806f023c9131c1f588ed9a55a0b23aeed", "url": "https://github.com/candlepin/candlepin/commit/830ea90806f023c9131c1f588ed9a55a0b23aeed", "message": "ENT-1876: Port HypervisorResource to spec-first\n - Added API specifications in yaml file\n - Ported HypervisorUpdateResultDTO and HypervisorConsumerDTO\n - Update the resource and test classes", "committedDate": "2020-04-28T11:11:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEyOTYzMw==", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r417129633", "bodyText": "Why is principalProvider injected separatelly. Is there some kind of lazy loading?", "author": "Januson", "createdAt": "2020-04-29T07:52:40Z", "path": "server/src/main/java/org/candlepin/resource/HypervisorResource.java", "diffHunk": "@@ -102,11 +83,14 @@\n     private ConsumerType hypervisorType;\n     private JobManager jobManager;\n \n+    @Inject", "originalCommit": "830ea90806f023c9131c1f588ed9a55a0b23aeed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIwODIwOA==", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r417208208", "bodyText": "Removed @Inject annotation.\nInitially, I tried with the injected value. But Junit tests were getting failed. Later added this as a constructor parameter. It remained because rspecs also failed. And now it's working after removing.", "author": "sonalidhome", "createdAt": "2020-04-29T10:15:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEyOTYzMw=="}], "type": "inlineReview"}, {"oid": "14a02ad47a8abc7e2687965716848052f574f42f", "url": "https://github.com/candlepin/candlepin/commit/14a02ad47a8abc7e2687965716848052f574f42f", "message": "ENT-1876: Port HypervisorResource to spec-first\n - Added API specifications in yaml file\n - Ported HypervisorUpdateResultDTO and HypervisorConsumerDTO\n - Update the resource and test classes", "committedDate": "2020-04-29T10:00:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxOTQ3Nw==", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r421419477", "bodyText": "There is no need to null check the provider here. If it ever was null, we'd want to find out as soon as possible (meaning when we do Principal principal = this.principalProvider.get() here), because that would be a developer error (it wasn't injected). By creating a null principal here we're delegating the NPE to happen later on where it might be harder to figure out what's wrong", "author": "nikosmoum", "createdAt": "2020-05-07T11:01:39Z", "path": "server/src/main/java/org/candlepin/resource/HypervisorResource.java", "diffHunk": "@@ -118,37 +100,27 @@ public HypervisorResource(ConsumerResource consumerResource, ConsumerCurator con\n         this.jobManager = jobManager;\n \n         this.hypervisorType = consumerTypeCurator.getByLabel(ConsumerTypeEnum.HYPERVISOR.getLabel(), true);\n+        this.principalProvider = principalProvider;\n     }\n \n     /**\n      * @deprecated Use the asynchronous method\n      * @return HypervisorCheckInResult\n      */\n-    @ApiOperation(notes = \"Updates the list of Hypervisor Guests Allows agents such as \" +\n-        \"virt-who to update its host list and associate the guests for each host. This is \" +\n-        \"typically used when a host is unable to register to candlepin via subscription\" +\n-        \" manager.  In situations where consumers already exist it is probably best not \" +\n-        \"to allow creation of new hypervisor consumers.  Most consumers do not have a\" +\n-        \" hypervisorId attribute, so that should be added manually when necessary by the \" +\n-        \"management environment. @deprecated Use the asynchronous method\",\n-        value = \"hypervisorUpdate\")\n-    @ApiResponses({ @ApiResponse(code = 202, message = \"\") })\n-    @POST\n-    @Consumes(MediaType.APPLICATION_JSON)\n-    @Produces(MediaType.APPLICATION_JSON)\n+    @Override\n     @Deprecated\n     @Transactional\n     @UpdateConsumerCheckIn\n-    @SuppressWarnings(\"checkstyle:indentation\")\n+    @SuppressWarnings({\"checkstyle:indentation\", \"checkstyle:methodlength\"})\n     public HypervisorUpdateResultDTO hypervisorUpdate(\n-        Map<String, List<String>> hostGuestMap, @Context Principal principal,\n-        @QueryParam(\"owner\") @Verify(value = Owner.class,\n-            require = Access.READ_ONLY,\n-            subResource = SubResource.HYPERVISOR) String ownerKey,\n-        @ApiParam(\"specify whether or not to create missing hypervisors.\" +\n-            \"Default is true.  If false is specified, hypervisorIds that are not found\" +\n-            \"will result in failed entries in the resulting HypervisorCheckInResult\")\n-        @QueryParam(\"create_missing\") @DefaultValue(\"true\") boolean createMissing) {\n+        @Verify(value = Owner.class, require = Access.READ_ONLY,\n+        subResource = SubResource.HYPERVISOR) String ownerKey,\n+        Map<String, List<String>> hostGuestMap,\n+        Boolean createMissing) {\n+\n+        Principal principal = (this.principalProvider == null ?\n+            null : this.principalProvider.get());", "originalCommit": "14a02ad47a8abc7e2687965716848052f574f42f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEzNDA2NQ==", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r422134065", "bodyText": "Understood, removed now.", "author": "sonalidhome", "createdAt": "2020-05-08T13:11:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxOTQ3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQyODMzMA==", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r421428330", "bodyText": "There should be a space between HypervisorsApi and { for better readability", "author": "nikosmoum", "createdAt": "2020-05-07T11:18:51Z", "path": "server/src/main/java/org/candlepin/resource/HypervisorResource.java", "diffHunk": "@@ -70,25 +65,11 @@\n import java.util.Set;\n \n import javax.inject.Provider;\n-import javax.ws.rs.Consumes;\n-import javax.ws.rs.DefaultValue;\n-import javax.ws.rs.POST;\n-import javax.ws.rs.PUT;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.PathParam;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.QueryParam;\n-import javax.ws.rs.core.Context;\n-import javax.ws.rs.core.MediaType;\n-\n-\n \n /**\n  * HypervisorResource\n  */\n-@Path(\"/hypervisors\")\n-@Api(value = \"hypervisors\", authorizations = { @Authorization(\"basic\") })\n-public class HypervisorResource {\n+public class HypervisorResource implements HypervisorsApi{", "originalCommit": "14a02ad47a8abc7e2687965716848052f574f42f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEzMzQyMw==", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r422133423", "bodyText": "Corrected.", "author": "sonalidhome", "createdAt": "2020-05-08T13:10:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQyODMzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4MDc5Mg==", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r421480792", "bodyText": "It looks like when we use addHypervisorConsumerDTO, we always have to translate a consumer into a HypervisorConsumerDTO, so maybe it would be better to do the translation within that method to avoid code duplication and get more readability.\nSame applies for the method in the HypervisorUpdateAction class", "author": "nikosmoum", "createdAt": "2020-05-07T12:54:59Z", "path": "server/src/main/java/org/candlepin/resource/HypervisorResource.java", "diffHunk": "@@ -248,88 +221,72 @@ public HypervisorUpdateResultDTO hypervisorUpdate(\n                 consumer.setLastCheckin(now);\n                 // Populate the result with the processed consumer.\n                 if (hostConsumerCreated) {\n-                    result.addCreated(this.translator.translate(consumer, HypervisorConsumerDTO.class));\n+                    result.setCreated(addHypervisorConsumerDTO(result.getCreated(),\n+                        this.translator.translate(consumer, HypervisorConsumerDTO.class)));", "originalCommit": "14a02ad47a8abc7e2687965716848052f574f42f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEzMzczNw==", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r422133737", "bodyText": "Agreed. Updated the method in both the classes.", "author": "sonalidhome", "createdAt": "2020-05-08T13:11:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4MDc5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4MzE1OQ==", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r421483159", "bodyText": "Same here, no need for null check", "author": "nikosmoum", "createdAt": "2020-05-07T12:58:35Z", "path": "server/src/main/java/org/candlepin/resource/HypervisorResource.java", "diffHunk": "@@ -248,88 +221,72 @@ public HypervisorUpdateResultDTO hypervisorUpdate(\n                 consumer.setLastCheckin(now);\n                 // Populate the result with the processed consumer.\n                 if (hostConsumerCreated) {\n-                    result.addCreated(this.translator.translate(consumer, HypervisorConsumerDTO.class));\n+                    result.setCreated(addHypervisorConsumerDTO(result.getCreated(),\n+                        this.translator.translate(consumer, HypervisorConsumerDTO.class)));\n                 }\n                 else if (guestIdsUpdated || updatedType) {\n-                    result.addUpdated(this.translator.translate(consumer, HypervisorConsumerDTO.class));\n+                    result.setUpdated(addHypervisorConsumerDTO(result.getUpdated(),\n+                        this.translator.translate(consumer, HypervisorConsumerDTO.class)));\n                 }\n                 else {\n-                    result.addUnchanged(this.translator.translate(consumer, HypervisorConsumerDTO.class));\n+                    result.setUnchanged(addHypervisorConsumerDTO(result.getUnchanged(),\n+                        this.translator.translate(consumer, HypervisorConsumerDTO.class)));\n                 }\n             }\n             catch (Exception e) {\n                 log.error(\"Hypervisor checkin failed\", e);\n-                result.addFailed(hypervisorId, e.getMessage());\n+                result.setFailedUpdate(addFailed(result.getFailedUpdate(),\n+                    hypervisorId + \": \" + e.getMessage()));\n             }\n         }\n         log.info(\"Summary of hypervisor checkin by principal \\\"{}\\\": {}\", principal, result);\n         return result;\n     }\n \n-    @ApiOperation(notes = \"Creates or Updates the list of Hypervisor hosts Allows agents such\" +\n-        \" as virt-who to update hosts' information . This is typically used when a host is\" +\n-        \" unable to register to candlepin via subscription manager. In situations where \" +\n-        \"consumers already exist it is probably best not to allow creation of new hypervisor\" +\n-        \" consumers.  Most consumers do not have a hypervisorId attribute, so that should be\" +\n-        \" added manually when necessary by the management environment. Default is true.  \" +\n-        \"If false is specified, hypervisorIds that are not found will result in a failed \" +\n-        \"state of the job.\", value = \"hypervisorUpdateAsync\")\n-    @ApiResponses({ @ApiResponse(code = 202, message = \"\") })\n-    @POST\n-    @Consumes(MediaType.TEXT_PLAIN)\n-    @Produces(MediaType.APPLICATION_JSON)\n-    @Path(\"/{owner}\")\n+    @Override\n     @UpdateConsumerCheckIn\n     @SuppressWarnings(\"checkstyle:indentation\")\n     public AsyncJobStatusDTO hypervisorUpdateAsync(\n-        String hypervisorJson, @Context Principal principal,\n-        @PathParam(\"owner\") @Verify(value = Owner.class,\n-            require = Access.READ_ONLY,\n-            subResource = SubResource.HYPERVISOR) String ownerKey,\n-        @ApiParam(\"specify whether or not to create missing hypervisors.\" +\n-            \"Default is true.  If false is specified, hypervisorIds that are not found\" +\n-            \"will result in failed entries in the resulting HypervisorCheckInResult\")\n-\n-        @QueryParam(\"create_missing\") @DefaultValue(\"true\") boolean createMissing,\n-        @QueryParam(\"reporter_id\") String reporterId) throws JobException {\n+        @Verify(value = Owner.class, require = Access.READ_ONLY,\n+        subResource = SubResource.HYPERVISOR) String ownerKey,\n+        Boolean createMissing, String reporterId, String hypervisorJson) {\n \n         if (hypervisorJson == null || hypervisorJson.isEmpty()) {\n             log.debug(\"Host/Guest mapping provided during hypervisor update was null.\");\n             throw new BadRequestException(\n                 i18n.tr(\"Host to guest mapping was not provided for hypervisor update.\"));\n         }\n \n+        Principal principal = (this.principalProvider == null ? null : this.principalProvider.get());", "originalCommit": "14a02ad47a8abc7e2687965716848052f574f42f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEzMzg3Ng==", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r422133876", "bodyText": "Removed.", "author": "sonalidhome", "createdAt": "2020-05-08T13:11:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4MzE1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUwNzAyMQ==", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r421507021", "bodyText": "What prompted this change? We didn't catch the exception beforehand\n(same question applies about the exception catching in the heartbeat endpoint)", "author": "nikosmoum", "createdAt": "2020-05-07T13:33:52Z", "path": "server/src/main/java/org/candlepin/resource/HypervisorResource.java", "diffHunk": "@@ -248,88 +221,72 @@ public HypervisorUpdateResultDTO hypervisorUpdate(\n                 consumer.setLastCheckin(now);\n                 // Populate the result with the processed consumer.\n                 if (hostConsumerCreated) {\n-                    result.addCreated(this.translator.translate(consumer, HypervisorConsumerDTO.class));\n+                    result.setCreated(addHypervisorConsumerDTO(result.getCreated(),\n+                        this.translator.translate(consumer, HypervisorConsumerDTO.class)));\n                 }\n                 else if (guestIdsUpdated || updatedType) {\n-                    result.addUpdated(this.translator.translate(consumer, HypervisorConsumerDTO.class));\n+                    result.setUpdated(addHypervisorConsumerDTO(result.getUpdated(),\n+                        this.translator.translate(consumer, HypervisorConsumerDTO.class)));\n                 }\n                 else {\n-                    result.addUnchanged(this.translator.translate(consumer, HypervisorConsumerDTO.class));\n+                    result.setUnchanged(addHypervisorConsumerDTO(result.getUnchanged(),\n+                        this.translator.translate(consumer, HypervisorConsumerDTO.class)));\n                 }\n             }\n             catch (Exception e) {\n                 log.error(\"Hypervisor checkin failed\", e);\n-                result.addFailed(hypervisorId, e.getMessage());\n+                result.setFailedUpdate(addFailed(result.getFailedUpdate(),\n+                    hypervisorId + \": \" + e.getMessage()));\n             }\n         }\n         log.info(\"Summary of hypervisor checkin by principal \\\"{}\\\": {}\", principal, result);\n         return result;\n     }\n \n-    @ApiOperation(notes = \"Creates or Updates the list of Hypervisor hosts Allows agents such\" +\n-        \" as virt-who to update hosts' information . This is typically used when a host is\" +\n-        \" unable to register to candlepin via subscription manager. In situations where \" +\n-        \"consumers already exist it is probably best not to allow creation of new hypervisor\" +\n-        \" consumers.  Most consumers do not have a hypervisorId attribute, so that should be\" +\n-        \" added manually when necessary by the management environment. Default is true.  \" +\n-        \"If false is specified, hypervisorIds that are not found will result in a failed \" +\n-        \"state of the job.\", value = \"hypervisorUpdateAsync\")\n-    @ApiResponses({ @ApiResponse(code = 202, message = \"\") })\n-    @POST\n-    @Consumes(MediaType.TEXT_PLAIN)\n-    @Produces(MediaType.APPLICATION_JSON)\n-    @Path(\"/{owner}\")\n+    @Override\n     @UpdateConsumerCheckIn\n     @SuppressWarnings(\"checkstyle:indentation\")\n     public AsyncJobStatusDTO hypervisorUpdateAsync(\n-        String hypervisorJson, @Context Principal principal,\n-        @PathParam(\"owner\") @Verify(value = Owner.class,\n-            require = Access.READ_ONLY,\n-            subResource = SubResource.HYPERVISOR) String ownerKey,\n-        @ApiParam(\"specify whether or not to create missing hypervisors.\" +\n-            \"Default is true.  If false is specified, hypervisorIds that are not found\" +\n-            \"will result in failed entries in the resulting HypervisorCheckInResult\")\n-\n-        @QueryParam(\"create_missing\") @DefaultValue(\"true\") boolean createMissing,\n-        @QueryParam(\"reporter_id\") String reporterId) throws JobException {\n+        @Verify(value = Owner.class, require = Access.READ_ONLY,\n+        subResource = SubResource.HYPERVISOR) String ownerKey,\n+        Boolean createMissing, String reporterId, String hypervisorJson) {\n \n         if (hypervisorJson == null || hypervisorJson.isEmpty()) {\n             log.debug(\"Host/Guest mapping provided during hypervisor update was null.\");\n             throw new BadRequestException(\n                 i18n.tr(\"Host to guest mapping was not provided for hypervisor update.\"));\n         }\n \n+        Principal principal = (this.principalProvider == null ? null : this.principalProvider.get());\n+\n         log.info(\"Hypervisor update by principal: {}\", principal);\n         Owner owner = this.getOwner(ownerKey);\n \n         JobConfig config = HypervisorUpdateJob.createJobConfig()\n             .setOwner(owner)\n             .setData(hypervisorJson)\n-            .setCreateMissing(createMissing)\n+            .setCreateMissing(createMissing.booleanValue())\n             .setPrincipal(principal)\n             .setReporter(reporterId);\n \n-        AsyncJobStatus status = jobManager.queueJob(config);\n-        return translator.translate(status, AsyncJobStatusDTO.class);\n+        try {\n+            AsyncJobStatus status = jobManager.queueJob(config);\n+            return translator.translate(status, AsyncJobStatusDTO.class);\n+        }\n+        catch (JobException e) {\n+            String errmsg = this.i18n.tr(\"An unexpected exception occurred while scheduling job \\\"{0}\\\"\",\n+                config.getJobKey());\n+\n+            throw new IseException(errmsg, e);", "originalCommit": "14a02ad47a8abc7e2687965716848052f574f42f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE0MDIwMg==", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r422140202", "bodyText": "Previously the method was throwing an unhandled JobException. But in auto-generated HypervisorsApi the method does not throws JobException. Hence the inherited class method is not allowing to throw an exception. Hence needed to handle and re-throw an exception.\nI didn't find any valid property that could be added in the YAML specification file which adds  throws Exception to an auto-generated method. The issue link says its an enhancement: OpenAPITools/openapi-generator#4815.", "author": "sonalidhome", "createdAt": "2020-05-08T13:24:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUwNzAyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk0Mzg4MQ==", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r422943881", "bodyText": "Alright. But we should log this as an error so that the full stacktrace will be available in the log. With the current way of just throwing an IseException, the error message is returned to the client, but there is nothing in the log, so we wouldn't know where to start if we were to investigate an error. Adding log.error(errmsg, e) right before we throw the IseException should give us the full stacktrace in the candlepin.log", "author": "nikosmoum", "createdAt": "2020-05-11T10:31:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUwNzAyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAyMjQwOQ==", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r423022409", "bodyText": "Yes. Added error log.", "author": "sonalidhome", "createdAt": "2020-05-11T13:02:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUwNzAyMQ=="}], "type": "inlineReview"}, {"oid": "339df96afbbeea3ef997af4fc90fc882fdcea749", "url": "https://github.com/candlepin/candlepin/commit/339df96afbbeea3ef997af4fc90fc882fdcea749", "message": "ENT-1876: Port HypervisorResource to spec-first\n - Added API specifications in yaml file\n - Ported HypervisorUpdateResultDTO and HypervisorConsumerDTO\n - Update the resource and test classes", "committedDate": "2020-05-08T11:26:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk0NDQzMA==", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r422944430", "bodyText": "Same here: add  log.error(errmsg, e) before throwing\nalso, it seems you need to rebase the PR due to the RoleResource one being merged earlier", "author": "nikosmoum", "createdAt": "2020-05-11T10:32:24Z", "path": "server/src/main/java/org/candlepin/resource/HypervisorResource.java", "diffHunk": "@@ -341,8 +294,17 @@ public AsyncJobStatusDTO hypervisorHeartbeatUpdate(\n             .setOwner(owner)\n             .setReporterId(reporterId);\n \n-        AsyncJobStatus job = this.jobManager.queueJob(config);\n-        return this.translator.translate(job, AsyncJobStatusDTO.class);\n+        try {\n+            AsyncJobStatus job = this.jobManager.queueJob(config);\n+            return this.translator.translate(job, AsyncJobStatusDTO.class);\n+\n+        }\n+        catch (JobException e) {\n+            String errmsg = this.i18n.tr(\"An unexpected exception occurred while scheduling job \\\"{0}\\\"\",\n+                config.getJobKey());\n+\n+            throw new IseException(errmsg, e);", "originalCommit": "339df96afbbeea3ef997af4fc90fc882fdcea749", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAyMjEzNg==", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r423022136", "bodyText": "Done.", "author": "sonalidhome", "createdAt": "2020-05-11T13:02:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk0NDQzMA=="}], "type": "inlineReview"}, {"oid": "432b6aa571b0d35d45299ed863990a44f17f0330", "url": "https://github.com/candlepin/candlepin/commit/432b6aa571b0d35d45299ed863990a44f17f0330", "message": "ENT-1876: Port HypervisorResource to spec-first\n - Added API specifications in yaml file\n - Ported HypervisorUpdateResultDTO and HypervisorConsumerDTO\n - Update the resource and test classes", "committedDate": "2020-05-11T12:45:32Z", "type": "commit"}, {"oid": "432b6aa571b0d35d45299ed863990a44f17f0330", "url": "https://github.com/candlepin/candlepin/commit/432b6aa571b0d35d45299ed863990a44f17f0330", "message": "ENT-1876: Port HypervisorResource to spec-first\n - Added API specifications in yaml file\n - Ported HypervisorUpdateResultDTO and HypervisorConsumerDTO\n - Update the resource and test classes", "committedDate": "2020-05-11T12:45:32Z", "type": "forcePushed"}]}