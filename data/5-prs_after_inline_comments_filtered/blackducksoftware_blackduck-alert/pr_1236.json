{"pr_number": 1236, "pr_title": "Static Job Accessor", "pr_createdAt": "2020-10-29T19:33:59Z", "pr_url": "https://github.com/blackducksoftware/blackduck-alert/pull/1236", "timeline": [{"oid": "72738bae49011f43dc6bbf144e77d4738a1a7bd4", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/72738bae49011f43dc6bbf144e77d4738a1a7bd4", "message": "Feat(Jobs): Begin implementing alternative job accessor", "committedDate": "2020-10-28T13:59:45Z", "type": "commit"}, {"oid": "b723c72bb2fd1d089c3466e1a12aa2cd6d014587", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/b723c72bb2fd1d089c3466e1a12aa2cd6d014587", "message": "Feat(Jobs): Begin implementing configuration model channel field population", "committedDate": "2020-10-28T14:25:31Z", "type": "commit"}, {"oid": "8dd0c72108d1d6747c921ee3b9f7dc28e0249747", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/8dd0c72108d1d6747c921ee3b9f7dc28e0249747", "message": "Feat(Jobs): Complete implementation of channel field population for a configuration model", "committedDate": "2020-10-28T14:59:45Z", "type": "commit"}, {"oid": "f7a4f76f5f7a291c3af944096293b406120906b0", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/f7a4f76f5f7a291c3af944096293b406120906b0", "message": "Feat(Jobs): Implement methods for new job accessor that require no custom queries", "committedDate": "2020-10-28T15:03:41Z", "type": "commit"}, {"oid": "abca6784789a5a199fa8506f54b9b89dba439edf", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/abca6784789a5a199fa8506f54b9b89dba439edf", "message": "Feat(Jobs): Implement non-standard queries for static job accessor", "committedDate": "2020-10-28T15:54:51Z", "type": "commit"}, {"oid": "3c6408beb638979e3cdebfab73ccfa1e0930d296", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/3c6408beb638979e3cdebfab73ccfa1e0930d296", "message": "Feat(Jobs): Add new strongly-typed models to use with distribution jobs", "committedDate": "2020-10-28T18:12:42Z", "type": "commit"}, {"oid": "33050c196e74c73b56c232cd2ea12b2aee8c53ab", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/33050c196e74c73b56c232cd2ea12b2aee8c53ab", "message": "Feat(Jobs): Beging implementing job write operations", "committedDate": "2020-10-28T19:00:12Z", "type": "commit"}, {"oid": "4d26e64a187abb841f3927c31dd1b088ffea158d", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/4d26e64a187abb841f3927c31dd1b088ffea158d", "message": "Feat(Jobs): Add strongly typed job details models for channels", "committedDate": "2020-10-29T13:33:33Z", "type": "commit"}, {"oid": "08ad35ee0e974f2f4fda479a1aa665d40faeac15", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/08ad35ee0e974f2f4fda479a1aa665d40faeac15", "message": "Feat(Jobs): Move BlackDuck database operations to its own accessor", "committedDate": "2020-10-29T14:19:54Z", "type": "commit"}, {"oid": "459e7414fb8aa893cb4e506a3003709c9a61ca8f", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/459e7414fb8aa893cb4e506a3003709c9a61ca8f", "message": "Feat(Jobs): Create accessors for each channel", "committedDate": "2020-10-29T17:22:08Z", "type": "commit"}, {"oid": "5b3e9de41329897cfc3715c808983a0b054b2206", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/5b3e9de41329897cfc3715c808983a0b054b2206", "message": "Fix(Jobs): Clean up nullable handling and switch component annotation from the old job accessor to the new job accessor", "committedDate": "2020-10-29T19:21:12Z", "type": "commit"}, {"oid": "a6da524629b0685b80cc0dfa0249fafa6c38838d", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/a6da524629b0685b80cc0dfa0249fafa6c38838d", "message": "Fix(Jobs): Add transactional annotations and remove unnecessary join relationships from java entities", "committedDate": "2020-10-30T13:33:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTEwNTk2Nw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1236#discussion_r515105967", "bodyText": "Can we change the distributionFrequency to use the Enum type FrequencyType, since this is not the Database entity?", "author": "jamesrichard91", "createdAt": "2020-10-30T13:42:46Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/persistence/model/job/DistributionJobModel.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.persistence.model.job;\n+\n+import java.time.OffsetDateTime;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.jetbrains.annotations.Nullable;\n+\n+import com.synopsys.integration.alert.common.persistence.model.job.details.DistributionJobDetailsModel;\n+import com.synopsys.integration.alert.common.rest.model.AlertSerializableModel;\n+\n+public class DistributionJobModel extends AlertSerializableModel {\n+    private final UUID jobId;\n+    private final boolean enabled;\n+    private final String name;\n+    private final String distributionFrequency;\n+    private final String processingType;\n+    private final String channelDescriptorName;\n+    private final OffsetDateTime createdAt;\n+    private final OffsetDateTime lastUpdated;\n+\n+    // Black Duck fields will be common as long as it is the only provider\n+    private final Long blackDuckGlobalConfigId;\n+    private final boolean filterByProject;\n+    private final String projectNamePattern;\n+    private final List<String> notificationTypes;\n+    private final List<String> projectFilterProjectNames;\n+    private final List<String> policyFilterPolicyNames;\n+    private final List<String> vulnerabilityFilterSeverityNames;\n+\n+    private final DistributionJobDetailsModel distributionJobDetails;\n+\n+    public static DistributionJobModelBuilder builder() {\n+        return new DistributionJobModelBuilder();\n+    }\n+\n+    protected DistributionJobModel(\n+        UUID jobId,\n+        boolean enabled,\n+        String name,\n+        String distributionFrequency,", "originalCommit": "a6da524629b0685b80cc0dfa0249fafa6c38838d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTEwNjc4Nw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1236#discussion_r515106787", "bodyText": "Can we change the processingType to use the Enum type ProcessingType, since this is not the Database entity?", "author": "jamesrichard91", "createdAt": "2020-10-30T13:44:11Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/persistence/model/job/DistributionJobModel.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.persistence.model.job;\n+\n+import java.time.OffsetDateTime;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.jetbrains.annotations.Nullable;\n+\n+import com.synopsys.integration.alert.common.persistence.model.job.details.DistributionJobDetailsModel;\n+import com.synopsys.integration.alert.common.rest.model.AlertSerializableModel;\n+\n+public class DistributionJobModel extends AlertSerializableModel {\n+    private final UUID jobId;\n+    private final boolean enabled;\n+    private final String name;\n+    private final String distributionFrequency;\n+    private final String processingType;\n+    private final String channelDescriptorName;\n+    private final OffsetDateTime createdAt;\n+    private final OffsetDateTime lastUpdated;\n+\n+    // Black Duck fields will be common as long as it is the only provider\n+    private final Long blackDuckGlobalConfigId;\n+    private final boolean filterByProject;\n+    private final String projectNamePattern;\n+    private final List<String> notificationTypes;\n+    private final List<String> projectFilterProjectNames;\n+    private final List<String> policyFilterPolicyNames;\n+    private final List<String> vulnerabilityFilterSeverityNames;\n+\n+    private final DistributionJobDetailsModel distributionJobDetails;\n+\n+    public static DistributionJobModelBuilder builder() {\n+        return new DistributionJobModelBuilder();\n+    }\n+\n+    protected DistributionJobModel(\n+        UUID jobId,\n+        boolean enabled,\n+        String name,\n+        String distributionFrequency,\n+        String processingType,", "originalCommit": "a6da524629b0685b80cc0dfa0249fafa6c38838d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTExMDgxOQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1236#discussion_r515110819", "bodyText": "We should get this key from the Jira Server Channel Key. Either construct the Object here and call getUniversalKey() OR make this string public static final in the Jira Server Channel Key.", "author": "jamesrichard91", "createdAt": "2020-10-30T13:50:14Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/persistence/model/job/details/JiraServerJobDetailsModel.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.persistence.model.job.details;\n+\n+public class JiraServerJobDetailsModel extends DistributionJobDetailsModel {\n+    private final boolean addComments;\n+    private final String issueCreatorUsername;\n+    private final String projectNameOrKey;\n+    private final String issueType;\n+    private final String resolveTransition;\n+    private final String reopenTransition;\n+\n+    public JiraServerJobDetailsModel(boolean addComments, String issueCreatorUsername, String projectNameOrKey, String issueType, String resolveTransition, String reopenTransition) {\n+        super(\"channel_jira_server\");", "originalCommit": "a6da524629b0685b80cc0dfa0249fafa6c38838d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTExNjU4NA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1236#discussion_r515116584", "bodyText": "Unfortunately, the specific channel keys are not available here. I added a TODO in the base model for this purpose.", "author": "gkillough", "createdAt": "2020-10-30T13:57:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTExMDgxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTExMTA1MQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1236#discussion_r515111051", "bodyText": "We should get this key from the Email Channel Key. Either construct the Object here and call getUniversalKey() OR make this string public static final in the Email Channel Key.", "author": "jamesrichard91", "createdAt": "2020-10-30T13:50:36Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/persistence/model/job/details/EmailJobDetailsModel.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.persistence.model.job.details;\n+\n+import java.util.List;\n+\n+public class EmailJobDetailsModel extends DistributionJobDetailsModel {\n+    private final String subjectLine;\n+    private final boolean projectOwnerOnly;\n+    private final boolean additionalEmailAddressesOnly;\n+    private final String attachmentFileType;\n+    private final List<String> additionalEmailAddresses;\n+\n+    public EmailJobDetailsModel(String subjectLine, boolean projectOwnerOnly, boolean additionalEmailAddressesOnly, String attachmentFileType, List<String> additionalEmailAddresses) {\n+        super(\"channel_email\");", "originalCommit": "a6da524629b0685b80cc0dfa0249fafa6c38838d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTExMTIzOA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1236#discussion_r515111238", "bodyText": "Same, get from channel key", "author": "jamesrichard91", "createdAt": "2020-10-30T13:50:53Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/persistence/model/job/details/JiraCloudJobDetailsModel.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.persistence.model.job.details;\n+\n+public class JiraCloudJobDetailsModel extends DistributionJobDetailsModel {\n+    private final boolean addComments;\n+    private final String issueCreatorEmail;\n+    private final String projectNameOrKey;\n+    private final String issueType;\n+    private final String resolveTransition;\n+    private final String reopenTransition;\n+\n+    public JiraCloudJobDetailsModel(boolean addComments, String issueCreatorEmail, String projectNameOrKey, String issueType, String resolveTransition, String reopenTransition) {\n+        super(\"channel_jira_cloud\");", "originalCommit": "a6da524629b0685b80cc0dfa0249fafa6c38838d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTExMTQxOA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1236#discussion_r515111418", "bodyText": "Same, get from channel key", "author": "jamesrichard91", "createdAt": "2020-10-30T13:51:08Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/persistence/model/job/details/MSTeamsJobDetailsModel.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.persistence.model.job.details;\n+\n+public class MSTeamsJobDetailsModel extends DistributionJobDetailsModel {\n+    private final String webhook;\n+\n+    public MSTeamsJobDetailsModel(String webhook) {\n+        super(\"msteamskey\");", "originalCommit": "a6da524629b0685b80cc0dfa0249fafa6c38838d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTExMTU2Mg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1236#discussion_r515111562", "bodyText": "Same, get from channel key", "author": "jamesrichard91", "createdAt": "2020-10-30T13:51:20Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/persistence/model/job/details/SlackJobDetailsModel.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.persistence.model.job.details;\n+\n+public class SlackJobDetailsModel extends DistributionJobDetailsModel {\n+    private final String webhook;\n+    private final String channelName;\n+    private final String channelUsername;\n+\n+    public SlackJobDetailsModel(String webhook, String channelName, String channelUsername) {\n+        super(\"channel_slack\");", "originalCommit": "a6da524629b0685b80cc0dfa0249fafa6c38838d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTExMzg1Mw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1236#discussion_r515113853", "bodyText": "Should this return DistributionJobModel instead of ConfigurationJobModel at this point? Same for the methods above?", "author": "jamesrichard91", "createdAt": "2020-10-30T13:53:51Z", "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/StaticJobAccessor.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/**\n+ * alert-database\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.database.api;\n+\n+import java.time.OffsetDateTime;\n+import java.util.Collection;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.enumeration.FrequencyType;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.exception.AlertRuntimeException;\n+import com.synopsys.integration.alert.common.persistence.accessor.JobAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationJobModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.DistributionJobModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.DistributionJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.mutable.ConfigurationModelMutable;\n+import com.synopsys.integration.alert.common.provider.ProviderKey;\n+import com.synopsys.integration.alert.common.rest.model.AlertPagedModel;\n+import com.synopsys.integration.alert.common.util.DateUtils;\n+import com.synopsys.integration.alert.database.configuration.RegisteredDescriptorEntity;\n+import com.synopsys.integration.alert.database.configuration.repository.RegisteredDescriptorRepository;\n+import com.synopsys.integration.alert.database.job.DistributionJobEntity;\n+import com.synopsys.integration.alert.database.job.DistributionJobRepository;\n+import com.synopsys.integration.alert.database.job.JobConfigurationModelFieldExtractorUtils;\n+import com.synopsys.integration.alert.database.job.JobConfigurationModelFieldPopulationUtils;\n+import com.synopsys.integration.alert.database.job.azure.boards.AzureBoardsJobDetailsAccessor;\n+import com.synopsys.integration.alert.database.job.azure.boards.AzureBoardsJobDetailsEntity;\n+import com.synopsys.integration.alert.database.job.blackduck.BlackDuckJobDetailsAccessor;\n+import com.synopsys.integration.alert.database.job.blackduck.BlackDuckJobDetailsEntity;\n+import com.synopsys.integration.alert.database.job.email.EmailJobDetailsAccessor;\n+import com.synopsys.integration.alert.database.job.email.EmailJobDetailsEntity;\n+import com.synopsys.integration.alert.database.job.jira.cloud.JiraCloudJobDetailsAccessor;\n+import com.synopsys.integration.alert.database.job.jira.cloud.JiraCloudJobDetailsEntity;\n+import com.synopsys.integration.alert.database.job.jira.server.JiraServerJobDetailsAccessor;\n+import com.synopsys.integration.alert.database.job.jira.server.JiraServerJobDetailsEntity;\n+import com.synopsys.integration.alert.database.job.msteams.MSTeamsJobDetailsAccessor;\n+import com.synopsys.integration.alert.database.job.msteams.MSTeamsJobDetailsEntity;\n+import com.synopsys.integration.alert.database.job.slack.SlackJobDetailsAccessor;\n+import com.synopsys.integration.alert.database.job.slack.SlackJobDetailsEntity;\n+\n+@Component\n+public class StaticJobAccessor implements JobAccessor {\n+    private final DistributionJobRepository distributionJobRepository;\n+    private final BlackDuckJobDetailsAccessor blackDuckJobDetailsAccessor;\n+    private final AzureBoardsJobDetailsAccessor azureBoardsJobDetailsAccessor;\n+    private final EmailJobDetailsAccessor emailJobDetailsAccessor;\n+    private final JiraCloudJobDetailsAccessor jiraCloudJobDetailsAccessor;\n+    private final JiraServerJobDetailsAccessor jiraServerJobDetailsAccessor;\n+    private final MSTeamsJobDetailsAccessor msTeamsJobDetailsAccessor;\n+    private final SlackJobDetailsAccessor slackJobDetailsAccessor;\n+\n+    // Temporary until all three tiers of the application have been updated to new Job models\n+    private final RegisteredDescriptorRepository registeredDescriptorRepository;\n+    // BlackDuck is currently the only provider, so this is safe in the short-term while we transition to new models\n+    private final ProviderKey blackDuckProviderKey;\n+\n+    @Autowired\n+    public StaticJobAccessor(\n+        DistributionJobRepository distributionJobRepository,\n+        BlackDuckJobDetailsAccessor blackDuckJobDetailsAccessor,\n+        AzureBoardsJobDetailsAccessor azureBoardsJobDetailsAccessor,\n+        EmailJobDetailsAccessor emailJobDetailsAccessor,\n+        JiraCloudJobDetailsAccessor jiraCloudJobDetailsAccessor,\n+        JiraServerJobDetailsAccessor jiraServerJobDetailsAccessor,\n+        MSTeamsJobDetailsAccessor msTeamsJobDetailsAccessor,\n+        SlackJobDetailsAccessor slackJobDetailsAccessor,\n+\n+        RegisteredDescriptorRepository registeredDescriptorRepository,\n+        ProviderKey blackDuckProviderKey\n+    ) {\n+        this.distributionJobRepository = distributionJobRepository;\n+        this.blackDuckJobDetailsAccessor = blackDuckJobDetailsAccessor;\n+        this.azureBoardsJobDetailsAccessor = azureBoardsJobDetailsAccessor;\n+        this.emailJobDetailsAccessor = emailJobDetailsAccessor;\n+        this.jiraCloudJobDetailsAccessor = jiraCloudJobDetailsAccessor;\n+        this.jiraServerJobDetailsAccessor = jiraServerJobDetailsAccessor;\n+        this.msTeamsJobDetailsAccessor = msTeamsJobDetailsAccessor;\n+        this.slackJobDetailsAccessor = slackJobDetailsAccessor;\n+        this.registeredDescriptorRepository = registeredDescriptorRepository;\n+        this.blackDuckProviderKey = blackDuckProviderKey;\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<ConfigurationJobModel> getAllJobs() {\n+        return distributionJobRepository.findAll()\n+                   .stream()\n+                   .map(this::convertToConfigurationJobModel)\n+                   .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<ConfigurationJobModel> getJobsById(Collection<UUID> jobIds) {\n+        return distributionJobRepository.findAllById(jobIds)\n+                   .stream()\n+                   .map(this::convertToConfigurationJobModel)\n+                   .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public AlertPagedModel<ConfigurationJobModel> getPageOfJobs(int pageOffset, int pageLimit, Collection<String> descriptorsNamesToInclude) {\n+        if (!descriptorsNamesToInclude.contains(blackDuckProviderKey.getUniversalKey())) {\n+            return new AlertPagedModel<>(0, pageOffset, pageLimit, List.of());\n+        }\n+\n+        PageRequest pageRequest = PageRequest.of(pageOffset, pageLimit);\n+        Page<ConfigurationJobModel> pageOfJobsWithDescriptorNames = distributionJobRepository.findByChannelDescriptorNameIn(descriptorsNamesToInclude, pageRequest)\n+                                                                        .map(this::convertToConfigurationJobModel);\n+        return new AlertPagedModel<>(pageOfJobsWithDescriptorNames.getTotalPages(), pageOffset, pageLimit, pageOfJobsWithDescriptorNames.getContent());\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public Optional<ConfigurationJobModel> getJobById(UUID jobId) {\n+        return distributionJobRepository.findById(jobId).map(this::convertToConfigurationJobModel);\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public Optional<ConfigurationJobModel> getJobByName(String jobName) {\n+        return distributionJobRepository.findByName(jobName)\n+                   .map(this::convertToConfigurationJobModel);\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<ConfigurationJobModel> getJobsByFrequency(FrequencyType frequency) {\n+        return distributionJobRepository.findByDistributionFrequency(frequency.name())\n+                   .stream()\n+                   .map(this::convertToConfigurationJobModel)\n+                   .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    @Transactional\n+    public ConfigurationJobModel createJob(Collection<String> descriptorNames, Collection<ConfigurationFieldModel> configuredFields) {\n+        return createJobWithId(null, configuredFields, DateUtils.createCurrentDateTimestamp(), null);\n+    }\n+\n+    @Override\n+    @Transactional\n+    public ConfigurationJobModel updateJob(UUID jobId, Collection<String> descriptorNames, Collection<ConfigurationFieldModel> configuredFields) throws AlertDatabaseConstraintException {\n+        DistributionJobEntity jobEntity = distributionJobRepository.findById(jobId)\n+                                              .orElseThrow(() -> new AlertDatabaseConstraintException(String.format(\"No job exists with the id [%s]\", jobId.toString())));\n+        OffsetDateTime createdAt = jobEntity.getCreatedAt();\n+\n+        deleteJob(jobId);\n+        return createJobWithId(jobId, configuredFields, createdAt, DateUtils.createCurrentDateTimestamp());\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void deleteJob(UUID jobId) {\n+        distributionJobRepository.deleteById(jobId);\n+    }\n+\n+    private ConfigurationJobModel convertToConfigurationJobModel(DistributionJobEntity jobEntity) {", "originalCommit": "a6da524629b0685b80cc0dfa0249fafa6c38838d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTExNzgxMQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1236#discussion_r515117811", "bodyText": "This PR was about reproducing an identical API with the new tables. The intention is to move to the new models eventually, but it is out of scope for this PR as it would require changes to dozens of other files.", "author": "gkillough", "createdAt": "2020-10-30T13:59:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTExMzg1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE0MjAyMg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1236#discussion_r515142022", "bodyText": "I am on board with that if you add a TODO to change the return type to DistributionJobModel in the future", "author": "jamesrichard91", "createdAt": "2020-10-30T14:34:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTExMzg1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTExNTMyNg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1236#discussion_r515115326", "bodyText": "All of these field keys should be public static final somewhere and we should be referencing the static strings rather than creating the field keys in this class.", "author": "jamesrichard91", "createdAt": "2020-10-30T13:56:01Z", "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/job/JobConfigurationModelFieldExtractorUtils.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/**\n+ * alert-database\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.database.job;\n+\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.DistributionJobModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.DistributionJobModelBuilder;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.AzureBoardsJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.DistributionJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.EmailJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.JiraCloudJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.JiraServerJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.MSTeamsJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.SlackJobDetailsModel;\n+\n+public class JobConfigurationModelFieldExtractorUtils {\n+    public static DistributionJobModel convertToDistributionJobModel(UUID jobId, Map<String, ConfigurationFieldModel> configuredFieldsMap, OffsetDateTime createdAt, OffsetDateTime lastUpdated) {\n+        String channelDescriptorName = extractFieldValueOrEmptyString(\"channel.common.channel.name\", configuredFieldsMap);", "originalCommit": "a6da524629b0685b80cc0dfa0249fafa6c38838d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTExOTE1MA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1236#discussion_r515119150", "bodyText": "I agree, and these do exist as constants, but currently those constants are inaccessible. These conversion \"Utils\" are short-term solutions until the JobAccessor can deprecate its old models.", "author": "gkillough", "createdAt": "2020-10-30T14:01:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTExNTMyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTExNjA0NA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1236#discussion_r515116044", "bodyText": "Field keys (\"provider.common.config.id\") should be referencing static strings rather than creating the string here.", "author": "jamesrichard91", "createdAt": "2020-10-30T13:56:53Z", "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/job/JobConfigurationModelFieldPopulationUtils.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\n+ * alert-database\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.database.job;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.mutable.ConfigurationModelMutable;\n+import com.synopsys.integration.alert.database.job.azure.boards.AzureBoardsJobDetailsEntity;\n+import com.synopsys.integration.alert.database.job.blackduck.BlackDuckJobDetailsEntity;\n+import com.synopsys.integration.alert.database.job.blackduck.notification.BlackDuckJobNotificationTypeEntity;\n+import com.synopsys.integration.alert.database.job.blackduck.policy.BlackDuckJobPolicyFilterEntity;\n+import com.synopsys.integration.alert.database.job.blackduck.projects.BlackDuckJobProjectEntity;\n+import com.synopsys.integration.alert.database.job.blackduck.vulnerability.BlackDuckJobVulnerabilitySeverityFilterEntity;\n+import com.synopsys.integration.alert.database.job.email.EmailJobDetailsEntity;\n+import com.synopsys.integration.alert.database.job.email.additional.EmailJobAdditionalEmailAddressEntity;\n+import com.synopsys.integration.alert.database.job.jira.cloud.JiraCloudJobDetailsEntity;\n+import com.synopsys.integration.alert.database.job.jira.server.JiraServerJobDetailsEntity;\n+import com.synopsys.integration.alert.database.job.msteams.MSTeamsJobDetailsEntity;\n+import com.synopsys.integration.alert.database.job.slack.SlackJobDetailsEntity;\n+\n+public class JobConfigurationModelFieldPopulationUtils {\n+    public static void populateBlackDuckConfigurationModelFields(DistributionJobEntity jobEntity, ConfigurationModelMutable blackDuckConfigurationModel) {\n+        BlackDuckJobDetailsEntity blackDuckJobDetails = jobEntity.getBlackDuckJobDetails();\n+\n+        blackDuckConfigurationModel.put(createConfigFieldModel(\"provider.common.config.id\", blackDuckJobDetails.getGlobalConfigId().toString()));", "originalCommit": "a6da524629b0685b80cc0dfa0249fafa6c38838d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTExNjU2Mg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1236#discussion_r515116562", "bodyText": "These descriptor names should be coming from the channel keys or static strings in the channel keys.", "author": "jamesrichard91", "createdAt": "2020-10-30T13:57:29Z", "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/job/JobConfigurationModelFieldPopulationUtils.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\n+ * alert-database\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.database.job;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.mutable.ConfigurationModelMutable;\n+import com.synopsys.integration.alert.database.job.azure.boards.AzureBoardsJobDetailsEntity;\n+import com.synopsys.integration.alert.database.job.blackduck.BlackDuckJobDetailsEntity;\n+import com.synopsys.integration.alert.database.job.blackduck.notification.BlackDuckJobNotificationTypeEntity;\n+import com.synopsys.integration.alert.database.job.blackduck.policy.BlackDuckJobPolicyFilterEntity;\n+import com.synopsys.integration.alert.database.job.blackduck.projects.BlackDuckJobProjectEntity;\n+import com.synopsys.integration.alert.database.job.blackduck.vulnerability.BlackDuckJobVulnerabilitySeverityFilterEntity;\n+import com.synopsys.integration.alert.database.job.email.EmailJobDetailsEntity;\n+import com.synopsys.integration.alert.database.job.email.additional.EmailJobAdditionalEmailAddressEntity;\n+import com.synopsys.integration.alert.database.job.jira.cloud.JiraCloudJobDetailsEntity;\n+import com.synopsys.integration.alert.database.job.jira.server.JiraServerJobDetailsEntity;\n+import com.synopsys.integration.alert.database.job.msteams.MSTeamsJobDetailsEntity;\n+import com.synopsys.integration.alert.database.job.slack.SlackJobDetailsEntity;\n+\n+public class JobConfigurationModelFieldPopulationUtils {\n+    public static void populateBlackDuckConfigurationModelFields(DistributionJobEntity jobEntity, ConfigurationModelMutable blackDuckConfigurationModel) {\n+        BlackDuckJobDetailsEntity blackDuckJobDetails = jobEntity.getBlackDuckJobDetails();\n+\n+        blackDuckConfigurationModel.put(createConfigFieldModel(\"provider.common.config.id\", blackDuckJobDetails.getGlobalConfigId().toString()));\n+        blackDuckConfigurationModel.put(createConfigFieldModel(\"provider.distribution.processing.type\", jobEntity.getProcessingType()));\n+\n+        Boolean filterByProject = blackDuckJobDetails.getFilterByProject();\n+        blackDuckConfigurationModel.put(createConfigFieldModel(\"channel.common.filter.by.project\", filterByProject.toString()));\n+        if (filterByProject) {\n+            String projectNamePattern = blackDuckJobDetails.getProjectNamePattern();\n+            if (StringUtils.isNotBlank(projectNamePattern)) {\n+                blackDuckConfigurationModel.put(createConfigFieldModel(\"channel.common.project.name.pattern\", projectNamePattern));\n+            }\n+\n+            List<BlackDuckJobProjectEntity> blackDuckJobProjects = blackDuckJobDetails.getBlackDuckJobProjects();\n+            if (null != blackDuckJobProjects && !blackDuckJobProjects.isEmpty()) {\n+                List<String> blackDuckProjectNames = blackDuckJobProjects\n+                                                         .stream()\n+                                                         .map(BlackDuckJobProjectEntity::getProjectName)\n+                                                         .collect(Collectors.toList());\n+                blackDuckConfigurationModel.put(createConfigFieldModel(\"channel.common.configured.project\", blackDuckProjectNames));\n+            }\n+        }\n+\n+        // These are required so they will not be null/empty\n+        List<String> blackDuckJobNotificationTypeNames = blackDuckJobDetails.getBlackDuckJobNotificationTypes()\n+                                                             .stream()\n+                                                             .map(BlackDuckJobNotificationTypeEntity::getNotificationType)\n+                                                             .collect(Collectors.toList());\n+        blackDuckConfigurationModel.put(createConfigFieldModel(\"provider.distribution.notification.types\", blackDuckJobNotificationTypeNames));\n+\n+        List<BlackDuckJobPolicyFilterEntity> blackDuckJobPolicyFilters = blackDuckJobDetails.getBlackDuckJobPolicyFilters();\n+        if (null != blackDuckJobPolicyFilters && !blackDuckJobPolicyFilters.isEmpty()) {\n+            List<String> blackDuckPolicyNames = blackDuckJobPolicyFilters\n+                                                    .stream()\n+                                                    .map(BlackDuckJobPolicyFilterEntity::getPolicyName)\n+                                                    .collect(Collectors.toList());\n+            blackDuckConfigurationModel.put(createConfigFieldModel(\"blackduck.policy.notification.filter\", blackDuckPolicyNames));\n+        }\n+\n+        List<BlackDuckJobVulnerabilitySeverityFilterEntity> blackDuckJobVulnerabilitySeverityFilters = blackDuckJobDetails.getBlackDuckJobVulnerabilitySeverityFilters();\n+        if (null != blackDuckJobVulnerabilitySeverityFilters && !blackDuckJobVulnerabilitySeverityFilters.isEmpty()) {\n+            List<String> blackDuckJobVulnerabilitySeverityNames = blackDuckJobVulnerabilitySeverityFilters\n+                                                                      .stream()\n+                                                                      .map(BlackDuckJobVulnerabilitySeverityFilterEntity::getSeverityName)\n+                                                                      .collect(Collectors.toList());\n+            blackDuckConfigurationModel.put(createConfigFieldModel(\"blackduck.vulnerability.notification.filter\", blackDuckJobVulnerabilitySeverityNames));\n+        }\n+    }\n+\n+    public static void populateChannelConfigurationModelFields(DistributionJobEntity jobEntity, ConfigurationModelMutable channelConfigurationModel) {\n+        String channelDescriptorName = jobEntity.getChannelDescriptorName();\n+        channelConfigurationModel.put(createConfigFieldModel(\"channel.common.enabled\", jobEntity.getEnabled().toString()));\n+        channelConfigurationModel.put(createConfigFieldModel(\"channel.common.name\", jobEntity.getName()));\n+        channelConfigurationModel.put(createConfigFieldModel(\"channel.common.channel.name\", channelDescriptorName));\n+        channelConfigurationModel.put(createConfigFieldModel(\"channel.common.frequency\", jobEntity.getDistributionFrequency()));\n+        channelConfigurationModel.put(createConfigFieldModel(\"provider.distribution.processing.type\", jobEntity.getProcessingType()));\n+\n+        if (\"channel_azure_boards\".equals(channelDescriptorName)) {", "originalCommit": "a6da524629b0685b80cc0dfa0249fafa6c38838d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTEyNzExOQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1236#discussion_r515127119", "bodyText": "this key I think is already available at AzureBoardsChannelKey.COMPONENT_NAME", "author": "ChomickiM", "createdAt": "2020-10-30T14:12:11Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/persistence/model/job/details/AzureBoardsJobDetailsModel.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.persistence.model.job.details;\n+\n+public class AzureBoardsJobDetailsModel extends DistributionJobDetailsModel {\n+    private final boolean addComments;\n+    private final String projectNameOrId;\n+    private final String workItemType;\n+    private final String workItemCompletedState;\n+    private final String workItemReopenState;\n+\n+    public AzureBoardsJobDetailsModel(boolean addComments, String projectNameOrId, String workItemType, String workItemCompletedState, String workItemReopenState) {\n+        super(\"channel_azure_boards\");", "originalCommit": "a6da524629b0685b80cc0dfa0249fafa6c38838d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE1NDAxNw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1236#discussion_r515154017", "bodyText": "I updated the PR description to address this concern.", "author": "gkillough", "createdAt": "2020-10-30T14:51:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTEyNzExOQ=="}], "type": "inlineReview"}, {"oid": "a6b40f101c5f7b1e30d279a5f899ee60672d8475", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/a6b40f101c5f7b1e30d279a5f899ee60672d8475", "message": "Fix(Jobs): Use enums in job models", "committedDate": "2020-10-30T14:50:21Z", "type": "commit"}, {"oid": "870fdb36c864405bfce47401af83e80062abb9b5", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/870fdb36c864405bfce47401af83e80062abb9b5", "message": "Fix(Test): Split out job tests from old configuration tests", "committedDate": "2020-10-30T15:05:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxMDg1OQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1236#discussion_r515210859", "bodyText": "When do we prefer @nullable on methods vs constructor param?", "author": "bamandel", "createdAt": "2020-10-30T16:08:33Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/persistence/model/job/DistributionJobModel.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.persistence.model.job;\n+\n+import java.time.OffsetDateTime;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.jetbrains.annotations.Nullable;\n+\n+import com.synopsys.integration.alert.common.enumeration.FrequencyType;\n+import com.synopsys.integration.alert.common.enumeration.ProcessingType;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.DistributionJobDetailsModel;\n+import com.synopsys.integration.alert.common.rest.model.AlertSerializableModel;\n+\n+public class DistributionJobModel extends AlertSerializableModel {\n+    private final UUID jobId;\n+    private final boolean enabled;\n+    private final String name;\n+    private final FrequencyType distributionFrequency;\n+    private final ProcessingType processingType;\n+    private final String channelDescriptorName;\n+    private final OffsetDateTime createdAt;\n+    private final OffsetDateTime lastUpdated;\n+\n+    // Black Duck fields will be common as long as it is the only provider\n+    private final Long blackDuckGlobalConfigId;\n+    private final boolean filterByProject;\n+    private final String projectNamePattern;\n+    private final List<String> notificationTypes;\n+    private final List<String> projectFilterProjectNames;\n+    private final List<String> policyFilterPolicyNames;\n+    private final List<String> vulnerabilityFilterSeverityNames;\n+\n+    private final DistributionJobDetailsModel distributionJobDetails;\n+\n+    public static DistributionJobModelBuilder builder() {\n+        return new DistributionJobModelBuilder();\n+    }\n+\n+    protected DistributionJobModel(\n+        UUID jobId,\n+        boolean enabled,\n+        String name,\n+        FrequencyType distributionFrequency,\n+        ProcessingType processingType,\n+        String channelDescriptorName,\n+        OffsetDateTime createdAt,\n+        OffsetDateTime lastUpdated,\n+        Long blackDuckGlobalConfigId,\n+        boolean filterByProject,\n+        String projectNamePattern,\n+        List<String> notificationTypes,\n+        List<String> projectFilterProjectNames,\n+        List<String> policyFilterPolicyNames,\n+        List<String> vulnerabilityFilterSeverityNames,\n+        DistributionJobDetailsModel distributionJobDetails\n+    ) {\n+        this.jobId = jobId;\n+        this.enabled = enabled;\n+        this.name = name;\n+        this.distributionFrequency = distributionFrequency;\n+        this.processingType = processingType;\n+        this.channelDescriptorName = channelDescriptorName;\n+        this.createdAt = createdAt;\n+        this.lastUpdated = lastUpdated;\n+        this.blackDuckGlobalConfigId = blackDuckGlobalConfigId;\n+        this.filterByProject = filterByProject;\n+        this.projectNamePattern = projectNamePattern;\n+        this.notificationTypes = notificationTypes;\n+        this.projectFilterProjectNames = projectFilterProjectNames;\n+        this.policyFilterPolicyNames = policyFilterPolicyNames;\n+        this.vulnerabilityFilterSeverityNames = vulnerabilityFilterSeverityNames;\n+        this.distributionJobDetails = distributionJobDetails;\n+    }\n+\n+    @Nullable", "originalCommit": "870fdb36c864405bfce47401af83e80062abb9b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIyNjc1OQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1236#discussion_r515226759", "bodyText": "I think I meant to switch to Optional. I'll double check.", "author": "gkillough", "createdAt": "2020-10-30T16:34:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxMDg1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxMjM4NA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1236#discussion_r515212384", "bodyText": "We will probably want a model sub project that will hold basic data like these keys and enums.", "author": "bamandel", "createdAt": "2020-10-30T16:10:54Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/persistence/model/job/details/DistributionJobDetailsModel.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.persistence.model.job.details;\n+\n+import com.synopsys.integration.alert.common.channel.key.ChannelKey;\n+\n+public abstract class DistributionJobDetailsModel {\n+    private final String channelDescriptorName;\n+\n+    // TODO create a new sub-project for descriptors (or at least descriptor keys)", "originalCommit": "870fdb36c864405bfce47401af83e80062abb9b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxNjI2Mg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1236#discussion_r515216262", "bodyText": "Do we want this space here? We already have the space in the class members, so I think we should remove this blank line.", "author": "bamandel", "createdAt": "2020-10-30T16:17:31Z", "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/StaticJobAccessor.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/**\n+ * alert-database\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.database.api;\n+\n+import java.time.OffsetDateTime;\n+import java.util.Collection;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.enumeration.FrequencyType;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.exception.AlertRuntimeException;\n+import com.synopsys.integration.alert.common.persistence.accessor.JobAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationJobModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.DistributionJobModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.DistributionJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.mutable.ConfigurationModelMutable;\n+import com.synopsys.integration.alert.common.provider.ProviderKey;\n+import com.synopsys.integration.alert.common.rest.model.AlertPagedModel;\n+import com.synopsys.integration.alert.common.util.DateUtils;\n+import com.synopsys.integration.alert.database.configuration.RegisteredDescriptorEntity;\n+import com.synopsys.integration.alert.database.configuration.repository.RegisteredDescriptorRepository;\n+import com.synopsys.integration.alert.database.job.DistributionJobEntity;\n+import com.synopsys.integration.alert.database.job.DistributionJobRepository;\n+import com.synopsys.integration.alert.database.job.JobConfigurationModelFieldExtractorUtils;\n+import com.synopsys.integration.alert.database.job.JobConfigurationModelFieldPopulationUtils;\n+import com.synopsys.integration.alert.database.job.azure.boards.AzureBoardsJobDetailsAccessor;\n+import com.synopsys.integration.alert.database.job.azure.boards.AzureBoardsJobDetailsEntity;\n+import com.synopsys.integration.alert.database.job.blackduck.BlackDuckJobDetailsAccessor;\n+import com.synopsys.integration.alert.database.job.blackduck.BlackDuckJobDetailsEntity;\n+import com.synopsys.integration.alert.database.job.email.EmailJobDetailsAccessor;\n+import com.synopsys.integration.alert.database.job.email.EmailJobDetailsEntity;\n+import com.synopsys.integration.alert.database.job.jira.cloud.JiraCloudJobDetailsAccessor;\n+import com.synopsys.integration.alert.database.job.jira.cloud.JiraCloudJobDetailsEntity;\n+import com.synopsys.integration.alert.database.job.jira.server.JiraServerJobDetailsAccessor;\n+import com.synopsys.integration.alert.database.job.jira.server.JiraServerJobDetailsEntity;\n+import com.synopsys.integration.alert.database.job.msteams.MSTeamsJobDetailsAccessor;\n+import com.synopsys.integration.alert.database.job.msteams.MSTeamsJobDetailsEntity;\n+import com.synopsys.integration.alert.database.job.slack.SlackJobDetailsAccessor;\n+import com.synopsys.integration.alert.database.job.slack.SlackJobDetailsEntity;\n+\n+@Component\n+public class StaticJobAccessor implements JobAccessor {\n+    private final DistributionJobRepository distributionJobRepository;\n+    private final BlackDuckJobDetailsAccessor blackDuckJobDetailsAccessor;\n+    private final AzureBoardsJobDetailsAccessor azureBoardsJobDetailsAccessor;\n+    private final EmailJobDetailsAccessor emailJobDetailsAccessor;\n+    private final JiraCloudJobDetailsAccessor jiraCloudJobDetailsAccessor;\n+    private final JiraServerJobDetailsAccessor jiraServerJobDetailsAccessor;\n+    private final MSTeamsJobDetailsAccessor msTeamsJobDetailsAccessor;\n+    private final SlackJobDetailsAccessor slackJobDetailsAccessor;\n+\n+    // Temporary until all three tiers of the application have been updated to new Job models\n+    private final RegisteredDescriptorRepository registeredDescriptorRepository;\n+    // BlackDuck is currently the only provider, so this is safe in the short-term while we transition to new models\n+    private final ProviderKey blackDuckProviderKey;\n+\n+    @Autowired\n+    public StaticJobAccessor(\n+        DistributionJobRepository distributionJobRepository,\n+        BlackDuckJobDetailsAccessor blackDuckJobDetailsAccessor,\n+        AzureBoardsJobDetailsAccessor azureBoardsJobDetailsAccessor,\n+        EmailJobDetailsAccessor emailJobDetailsAccessor,\n+        JiraCloudJobDetailsAccessor jiraCloudJobDetailsAccessor,\n+        JiraServerJobDetailsAccessor jiraServerJobDetailsAccessor,\n+        MSTeamsJobDetailsAccessor msTeamsJobDetailsAccessor,\n+        SlackJobDetailsAccessor slackJobDetailsAccessor,\n+", "originalCommit": "870fdb36c864405bfce47401af83e80062abb9b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIyMjMyMQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1236#discussion_r515222321", "bodyText": "I'm not sure how temporary this file is, but I feel that each of the models should be doing it's own conversion instead of this giant if else block. This class should exist for the actual extraction code at the bottom.", "author": "bamandel", "createdAt": "2020-10-30T16:27:36Z", "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/job/JobConfigurationModelFieldExtractorUtils.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/**\n+ * alert-database\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.database.job;\n+\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.DistributionJobModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.DistributionJobModelBuilder;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.AzureBoardsJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.DistributionJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.EmailJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.JiraCloudJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.JiraServerJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.MSTeamsJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.SlackJobDetailsModel;\n+\n+public class JobConfigurationModelFieldExtractorUtils {", "originalCommit": "870fdb36c864405bfce47401af83e80062abb9b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIyNzQ4NQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1236#discussion_r515227485", "bodyText": "Hopefully this class never exists in a released version.", "author": "gkillough", "createdAt": "2020-10-30T16:35:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIyMjMyMQ=="}], "type": "inlineReview"}, {"oid": "3b191328be6a3b5ced31113a44c26b20cb4eb9d7", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/3b191328be6a3b5ced31113a44c26b20cb4eb9d7", "message": "Fix(Jobs): Make lastUpdated field optional", "committedDate": "2020-10-30T17:40:16Z", "type": "commit"}, {"oid": "4ef8d8d3572e41a4fd51975d3339fcf309c9d463", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/4ef8d8d3572e41a4fd51975d3339fcf309c9d463", "message": "Merge branch 'master' into gk_implement_static_job_accessor", "committedDate": "2020-10-30T17:40:40Z", "type": "commit"}]}