{"pr_number": 944, "pr_title": "Add authentication test", "pr_createdAt": "2020-04-09T15:21:44Z", "pr_url": "https://github.com/blackducksoftware/blackduck-alert/pull/944", "timeline": [{"oid": "3799fff362e28e7e6c8d9cc1c35ee1cfe4a619b5", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/3799fff362e28e7e6c8d9cc1c35ee1cfe4a619b5", "message": "feat: Add generic test fields to descriptor.", "committedDate": "2020-04-06T14:17:28Z", "type": "commit"}, {"oid": "a5a925a8a5ac9a3a2184ca3fc6801ddef3c84b44", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/a5a925a8a5ac9a3a2184ca3fc6801ddef3c84b44", "message": "Merge remote-tracking branch 'origin/master' into ps_auth_test", "committedDate": "2020-04-06T14:17:46Z", "type": "commit"}, {"oid": "f0dd7291527cd5ed19e0d56e8d8a9c632b6d0dc9", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/f0dd7291527cd5ed19e0d56e8d8a9c632b6d0dc9", "message": "feat: Test dialog for authentication.", "committedDate": "2020-04-06T20:46:40Z", "type": "commit"}, {"oid": "c1547846788cb8f1d03d9507ca1e2c1aecf9ee88", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/c1547846788cb8f1d03d9507ca1e2c1aecf9ee88", "message": "refactor: Add a field model to the test action.", "committedDate": "2020-04-07T13:39:54Z", "type": "commit"}, {"oid": "eb95c2641c712e89f4b22d265d10213295bae5f9", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/eb95c2641c712e89f4b22d265d10213295bae5f9", "message": "fix: Fix the provider to invoke other authentication performers if there is an exception.", "committedDate": "2020-04-07T20:36:48Z", "type": "commit"}, {"oid": "2458bf39375eac2a9186c88749781864e642b41c", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/2458bf39375eac2a9186c88749781864e642b41c", "message": "feat: Invoke LDAP authentication test.", "committedDate": "2020-04-07T20:37:53Z", "type": "commit"}, {"oid": "16f02c982f5f8ccdf790ba92552ceb046ae123c9", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/16f02c982f5f8ccdf790ba92552ceb046ae123c9", "message": "feat: LDAP testing of existing config.", "committedDate": "2020-04-08T14:15:39Z", "type": "commit"}, {"oid": "ae93a4de5b84745f02e5b2aaa10d96b474578009", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/ae93a4de5b84745f02e5b2aaa10d96b474578009", "message": "feat: Test SAML configuration and re-initialize with database values.", "committedDate": "2020-04-08T21:21:47Z", "type": "commit"}, {"oid": "0cc0be1c6e5ec4b25fbb8846f6888de92981d75a", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/0cc0be1c6e5ec4b25fbb8846f6888de92981d75a", "message": "refactor: Use the initialize method added to SAMLManager.", "committedDate": "2020-04-09T12:29:33Z", "type": "commit"}, {"oid": "1870307f6dd750d3d16042a6ba6788af7d10d2cb", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/1870307f6dd750d3d16042a6ba6788af7d10d2cb", "message": "refactor: Remove the createTestLabel method of UIConfig.", "committedDate": "2020-04-09T12:43:23Z", "type": "commit"}, {"oid": "0c7cd2b27e59b13e837ad7e5deaee70c007d089f", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/0c7cd2b27e59b13e837ad7e5deaee70c007d089f", "message": "Merge remote-tracking branch 'origin/master' into ps_auth_test", "committedDate": "2020-04-09T13:00:45Z", "type": "commit"}, {"oid": "57c024c284b82d05a08b4191bde97c05a393ce3e", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/57c024c284b82d05a08b4191bde97c05a393ce3e", "message": "chore: Fix the URL for the SonarCloud badge.", "committedDate": "2020-04-09T13:16:58Z", "type": "commit"}, {"oid": "ac28786dbac48aedd357b12e4a0ec64aae27c65e", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/ac28786dbac48aedd357b12e4a0ec64aae27c65e", "message": "fix: Fix failing test due to versioning of Alert.", "committedDate": "2020-04-09T13:32:51Z", "type": "commit"}, {"oid": "f23fb44c0295cabae524799e550d4966d0ae905f", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/f23fb44c0295cabae524799e550d4966d0ae905f", "message": "chore: Remove extra character to fix URL.", "committedDate": "2020-04-09T13:37:42Z", "type": "commit"}, {"oid": "05ddb5a2831a473443be6ec27a74214f6bcb895a", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/05ddb5a2831a473443be6ec27a74214f6bcb895a", "message": "refactor: Fix SonarCloud issues.", "committedDate": "2020-04-09T14:00:51Z", "type": "commit"}, {"oid": "add0a5bb9d8a14e062136e0098a428e1c3a9e9e1", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/add0a5bb9d8a14e062136e0098a428e1c3a9e9e1", "message": "refactor: Clean up remaining code smells.", "committedDate": "2020-04-09T14:30:41Z", "type": "commit"}, {"oid": "5fbb5a93a42ce31453463f92448a5548ca868fec", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/5fbb5a93a42ce31453463f92448a5548ca868fec", "message": "Merge remote-tracking branch 'origin/master' into ps_auth_test", "committedDate": "2020-04-09T15:07:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMwODA0NA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#discussion_r406308044", "bodyText": "This should be combined into one error log message.", "author": "gkillough", "createdAt": "2020-04-09T15:57:43Z", "path": "src/main/java/com/synopsys/integration/alert/web/security/authentication/AlertAuthenticationProvider.java", "diffHunk": "@@ -47,12 +50,19 @@ public Authentication authenticate(Authentication authentication) throws Authent\n             throw new IllegalArgumentException(\"Only UsernamePasswordAuthenticationToken is supported, \" + authentication.getClass() + \" was attempted\");\n         }\n \n-        return authenticationPerformers\n-                   .stream()\n-                   .map(authPerformer -> authPerformer.performAuthentication(authentication))\n-                   .flatMap(Optional::stream)\n-                   .findAny()\n-                   .orElse(authentication);\n+        for (AuthenticationPerformer authenticationPerformer : authenticationPerformers) {\n+            try {\n+                Optional<Authentication> completedAuthentication = authenticationPerformer.performAuthentication(authentication);\n+                if (completedAuthentication.isPresent() && completedAuthentication.get().isAuthenticated()) {\n+                    return completedAuthentication.get();\n+                }\n+            } catch (Exception ex) {\n+                logger.info(\"Error with with authentication type {} - cause: {}\", authenticationPerformer.getAuthenticationType(), ex.getMessage());\n+                logger.error(\"Error details: \", ex);", "originalCommit": "5fbb5a93a42ce31453463f92448a5548ca868fec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "28e3de50518ebfbfda268d8a80f99b7c5ca1d91e", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/28e3de50518ebfbfda268d8a80f99b7c5ca1d91e", "message": "Merge remote-tracking branch 'origin/master' into ps_auth_test", "committedDate": "2020-04-09T16:01:02Z", "type": "commit"}, {"oid": "b61b9e56fa9e10d9fba8c010115d285998f66a5e", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/b61b9e56fa9e10d9fba8c010115d285998f66a5e", "message": "refactor: Clean up error message.", "committedDate": "2020-04-09T16:13:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzMTY5OA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#discussion_r406331698", "bodyText": "The name here is misspelled and may not be accurate", "author": "bamandel", "createdAt": "2020-04-09T16:36:01Z", "path": "src/main/java/com/synopsys/integration/alert/channel/jira/cloud/actions/JiraDistributionTestAction.java", "diffHunk": "@@ -56,11 +57,11 @@ public JiraDistributionTestAction(JiraChannel jiraChannel, Gson gson, JiraMessag\n     }\n \n     @Override\n-    public MessageResult testConfig(String jobId, String destination, FieldAccessor fieldAccessor) throws IntegrationException {\n+    public MessageResult testConfig(String jobId, FieldModel fieldModel, FieldAccessor registeredFieldValuesr) throws IntegrationException {", "originalCommit": "b61b9e56fa9e10d9fba8c010115d285998f66a5e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzMzAyMw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#discussion_r406333023", "bodyText": "Will we want to say something if both are enabled? Or is that allowed?", "author": "bamandel", "createdAt": "2020-04-09T16:38:16Z", "path": "src/main/java/com/synopsys/integration/alert/component/authentication/actions/AuthenticationTestAction.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.component.authentication.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.opensaml.saml2.metadata.provider.MetadataProviderException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.ldap.authentication.LdapAuthenticationProvider;\n+import org.springframework.security.saml.metadata.ExtendedMetadataDelegate;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.common.action.TestAction;\n+import com.synopsys.integration.alert.common.exception.AlertFieldException;\n+import com.synopsys.integration.alert.common.message.model.MessageResult;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.component.authentication.descriptor.AuthenticationDescriptor;\n+import com.synopsys.integration.alert.component.authentication.descriptor.AuthenticationUIConfig;\n+import com.synopsys.integration.alert.web.security.authentication.ldap.LdapManager;\n+import com.synopsys.integration.alert.web.security.authentication.saml.SAMLManager;\n+import com.synopsys.integration.exception.IntegrationException;\n+\n+@Component\n+public class AuthenticationTestAction extends TestAction {\n+    private Logger logger = LoggerFactory.getLogger(AuthenticationTestAction.class);\n+    private LdapManager ldapManager;\n+    private SAMLManager samlManager;\n+\n+    @Autowired\n+    public AuthenticationTestAction(LdapManager ldapManager, SAMLManager samlManager) {\n+        this.ldapManager = ldapManager;\n+        this.samlManager = samlManager;\n+    }\n+\n+    @Override\n+    public MessageResult testConfig(String configId, FieldModel fieldModel, FieldAccessor registeredFieldValues) throws IntegrationException {\n+        logger.info(\"Testing authentication.\");\n+        boolean ldapEnabled = registeredFieldValues.getBooleanOrFalse(AuthenticationDescriptor.KEY_LDAP_ENABLED);\n+        boolean samlEnabled = registeredFieldValues.getBooleanOrFalse(AuthenticationDescriptor.KEY_SAML_ENABLED);\n+        if (ldapEnabled) {\n+            performLdapTest(fieldModel, registeredFieldValues);\n+        }\n+\n+        if (samlEnabled) {", "originalCommit": "b61b9e56fa9e10d9fba8c010115d285998f66a5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM1NjA1Mg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#discussion_r406356052", "bodyText": "It's really only one or the other not both.  That's a validation check that happens.", "author": "psantos1113", "createdAt": "2020-04-09T17:18:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzMzAyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzNDY1NA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#discussion_r406334654", "bodyText": "Should we put something in the errorMap here saying an unexpected error occurred?", "author": "bamandel", "createdAt": "2020-04-09T16:40:54Z", "path": "src/main/java/com/synopsys/integration/alert/component/authentication/actions/AuthenticationTestAction.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.component.authentication.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.opensaml.saml2.metadata.provider.MetadataProviderException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.ldap.authentication.LdapAuthenticationProvider;\n+import org.springframework.security.saml.metadata.ExtendedMetadataDelegate;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.common.action.TestAction;\n+import com.synopsys.integration.alert.common.exception.AlertFieldException;\n+import com.synopsys.integration.alert.common.message.model.MessageResult;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.component.authentication.descriptor.AuthenticationDescriptor;\n+import com.synopsys.integration.alert.component.authentication.descriptor.AuthenticationUIConfig;\n+import com.synopsys.integration.alert.web.security.authentication.ldap.LdapManager;\n+import com.synopsys.integration.alert.web.security.authentication.saml.SAMLManager;\n+import com.synopsys.integration.exception.IntegrationException;\n+\n+@Component\n+public class AuthenticationTestAction extends TestAction {\n+    private Logger logger = LoggerFactory.getLogger(AuthenticationTestAction.class);\n+    private LdapManager ldapManager;\n+    private SAMLManager samlManager;\n+\n+    @Autowired\n+    public AuthenticationTestAction(LdapManager ldapManager, SAMLManager samlManager) {\n+        this.ldapManager = ldapManager;\n+        this.samlManager = samlManager;\n+    }\n+\n+    @Override\n+    public MessageResult testConfig(String configId, FieldModel fieldModel, FieldAccessor registeredFieldValues) throws IntegrationException {\n+        logger.info(\"Testing authentication.\");\n+        boolean ldapEnabled = registeredFieldValues.getBooleanOrFalse(AuthenticationDescriptor.KEY_LDAP_ENABLED);\n+        boolean samlEnabled = registeredFieldValues.getBooleanOrFalse(AuthenticationDescriptor.KEY_SAML_ENABLED);\n+        if (ldapEnabled) {\n+            performLdapTest(fieldModel, registeredFieldValues);\n+        }\n+\n+        if (samlEnabled) {\n+            performSAMLTest(registeredFieldValues);\n+        }\n+\n+        return new MessageResult(\"Successfully tested authentication configuration.\");\n+    }\n+\n+    private void performLdapTest(FieldModel fieldModel, FieldAccessor registeredFieldValues) throws IntegrationException {\n+        logger.info(\"LDAP enabled testing LDAP authentication.\");\n+        String userName = fieldModel.getFieldValue(AuthenticationUIConfig.TEST_FIELD_KEY_USERNAME).orElse(\"\");\n+        Optional<LdapAuthenticationProvider> ldapProvider = ldapManager.createAuthProvider(registeredFieldValues);\n+        String errorMessage = String.format(\"Ldap Authentication test failed for the test user %s.  Please check the LDAP configuration.\", userName);\n+        Map<String, String> errorsMap = new HashMap<>();\n+        if (!ldapProvider.isPresent()) {\n+            errorsMap.put(AuthenticationDescriptor.KEY_LDAP_ENABLED, errorMessage);\n+        } else {\n+            Authentication pendingAuthentication = new UsernamePasswordAuthenticationToken(userName,\n+                fieldModel.getFieldValue(AuthenticationUIConfig.TEST_FIELD_KEY_PASSWORD).orElse(\"\"));\n+            Authentication authentication = ldapProvider.get().authenticate(pendingAuthentication);\n+            if (!authentication.isAuthenticated()) {\n+                errorsMap.put(AuthenticationDescriptor.KEY_LDAP_ENABLED, errorMessage);\n+            }\n+        }\n+\n+        if (!errorsMap.isEmpty()) {\n+            throw new AlertFieldException(errorsMap);\n+        }\n+    }\n+\n+    private void performSAMLTest(FieldAccessor registeredFieldValues) throws IntegrationException {\n+        Optional<ConfigurationFieldModel> metaDataURLField = registeredFieldValues.getField(AuthenticationDescriptor.KEY_SAML_METADATA_URL);\n+        Optional<ConfigurationFieldModel> metaDataFileField = registeredFieldValues.getField(AuthenticationDescriptor.KEY_SAML_METADATA_FILE);\n+        boolean testMetaDataURL = metaDataURLField.map(ConfigurationFieldModel::isSet).orElse(false);\n+        boolean testMetaDataFile = metaDataFileField.map(ConfigurationFieldModel::isSet).orElse(false);\n+        Map<String, String> errorsMap = new HashMap<>();\n+        if (testMetaDataURL) {\n+            logger.info(\"Testing SAML Metadata URL...\");\n+            try {\n+                Optional<ExtendedMetadataDelegate> provider = samlManager.createHttpProvider(registeredFieldValues.getStringOrEmpty(AuthenticationDescriptor.KEY_SAML_METADATA_URL));\n+                if (provider.isPresent()) {\n+                    provider.get().initialize();\n+                }\n+            } catch (MetadataProviderException ex) {\n+                logger.error(\"Testing SAML Metadata URL error: \", ex);\n+                errorsMap.put(AuthenticationDescriptor.KEY_SAML_METADATA_URL, ex.getMessage());\n+            } catch (Exception ex) {\n+                logger.error(\"Unexpected error testing SAML:\", ex);", "originalCommit": "b61b9e56fa9e10d9fba8c010115d285998f66a5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3OTIwOQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#discussion_r406379209", "bodyText": "To be safe I will just catch the exception and add it to the map.", "author": "psantos1113", "createdAt": "2020-04-09T17:58:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzNDY1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzNDg3Mg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#discussion_r406334872", "bodyText": "Should we put an error here saying an unexpected error occurred?", "author": "bamandel", "createdAt": "2020-04-09T16:41:19Z", "path": "src/main/java/com/synopsys/integration/alert/component/authentication/actions/AuthenticationTestAction.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.component.authentication.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.opensaml.saml2.metadata.provider.MetadataProviderException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.ldap.authentication.LdapAuthenticationProvider;\n+import org.springframework.security.saml.metadata.ExtendedMetadataDelegate;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.common.action.TestAction;\n+import com.synopsys.integration.alert.common.exception.AlertFieldException;\n+import com.synopsys.integration.alert.common.message.model.MessageResult;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.component.authentication.descriptor.AuthenticationDescriptor;\n+import com.synopsys.integration.alert.component.authentication.descriptor.AuthenticationUIConfig;\n+import com.synopsys.integration.alert.web.security.authentication.ldap.LdapManager;\n+import com.synopsys.integration.alert.web.security.authentication.saml.SAMLManager;\n+import com.synopsys.integration.exception.IntegrationException;\n+\n+@Component\n+public class AuthenticationTestAction extends TestAction {\n+    private Logger logger = LoggerFactory.getLogger(AuthenticationTestAction.class);\n+    private LdapManager ldapManager;\n+    private SAMLManager samlManager;\n+\n+    @Autowired\n+    public AuthenticationTestAction(LdapManager ldapManager, SAMLManager samlManager) {\n+        this.ldapManager = ldapManager;\n+        this.samlManager = samlManager;\n+    }\n+\n+    @Override\n+    public MessageResult testConfig(String configId, FieldModel fieldModel, FieldAccessor registeredFieldValues) throws IntegrationException {\n+        logger.info(\"Testing authentication.\");\n+        boolean ldapEnabled = registeredFieldValues.getBooleanOrFalse(AuthenticationDescriptor.KEY_LDAP_ENABLED);\n+        boolean samlEnabled = registeredFieldValues.getBooleanOrFalse(AuthenticationDescriptor.KEY_SAML_ENABLED);\n+        if (ldapEnabled) {\n+            performLdapTest(fieldModel, registeredFieldValues);\n+        }\n+\n+        if (samlEnabled) {\n+            performSAMLTest(registeredFieldValues);\n+        }\n+\n+        return new MessageResult(\"Successfully tested authentication configuration.\");\n+    }\n+\n+    private void performLdapTest(FieldModel fieldModel, FieldAccessor registeredFieldValues) throws IntegrationException {\n+        logger.info(\"LDAP enabled testing LDAP authentication.\");\n+        String userName = fieldModel.getFieldValue(AuthenticationUIConfig.TEST_FIELD_KEY_USERNAME).orElse(\"\");\n+        Optional<LdapAuthenticationProvider> ldapProvider = ldapManager.createAuthProvider(registeredFieldValues);\n+        String errorMessage = String.format(\"Ldap Authentication test failed for the test user %s.  Please check the LDAP configuration.\", userName);\n+        Map<String, String> errorsMap = new HashMap<>();\n+        if (!ldapProvider.isPresent()) {\n+            errorsMap.put(AuthenticationDescriptor.KEY_LDAP_ENABLED, errorMessage);\n+        } else {\n+            Authentication pendingAuthentication = new UsernamePasswordAuthenticationToken(userName,\n+                fieldModel.getFieldValue(AuthenticationUIConfig.TEST_FIELD_KEY_PASSWORD).orElse(\"\"));\n+            Authentication authentication = ldapProvider.get().authenticate(pendingAuthentication);\n+            if (!authentication.isAuthenticated()) {\n+                errorsMap.put(AuthenticationDescriptor.KEY_LDAP_ENABLED, errorMessage);\n+            }\n+        }\n+\n+        if (!errorsMap.isEmpty()) {\n+            throw new AlertFieldException(errorsMap);\n+        }\n+    }\n+\n+    private void performSAMLTest(FieldAccessor registeredFieldValues) throws IntegrationException {\n+        Optional<ConfigurationFieldModel> metaDataURLField = registeredFieldValues.getField(AuthenticationDescriptor.KEY_SAML_METADATA_URL);\n+        Optional<ConfigurationFieldModel> metaDataFileField = registeredFieldValues.getField(AuthenticationDescriptor.KEY_SAML_METADATA_FILE);\n+        boolean testMetaDataURL = metaDataURLField.map(ConfigurationFieldModel::isSet).orElse(false);\n+        boolean testMetaDataFile = metaDataFileField.map(ConfigurationFieldModel::isSet).orElse(false);\n+        Map<String, String> errorsMap = new HashMap<>();\n+        if (testMetaDataURL) {\n+            logger.info(\"Testing SAML Metadata URL...\");\n+            try {\n+                Optional<ExtendedMetadataDelegate> provider = samlManager.createHttpProvider(registeredFieldValues.getStringOrEmpty(AuthenticationDescriptor.KEY_SAML_METADATA_URL));\n+                if (provider.isPresent()) {\n+                    provider.get().initialize();\n+                }\n+            } catch (MetadataProviderException ex) {\n+                logger.error(\"Testing SAML Metadata URL error: \", ex);\n+                errorsMap.put(AuthenticationDescriptor.KEY_SAML_METADATA_URL, ex.getMessage());\n+            } catch (Exception ex) {\n+                logger.error(\"Unexpected error testing SAML:\", ex);\n+            }\n+        }\n+\n+        if (testMetaDataFile) {\n+            logger.info(\"Testing SAML Metadata File...\");\n+            try {\n+                Optional<ExtendedMetadataDelegate> provider = samlManager.createFileProvider();\n+                if (provider.isPresent()) {\n+                    provider.get().initialize();\n+                }\n+            } catch (MetadataProviderException ex) {\n+                logger.error(\"Testing SAML Metadata File error: \", ex);\n+                errorsMap.put(AuthenticationDescriptor.KEY_SAML_METADATA_FILE, ex.getMessage());\n+            } catch (Exception ex) {\n+                logger.error(\"Unexpected error testing SAML:\", ex);", "originalCommit": "b61b9e56fa9e10d9fba8c010115d285998f66a5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM0OTEyNg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#discussion_r406349126", "bodyText": "I think he means in the errorsMap.", "author": "gkillough", "createdAt": "2020-04-09T17:05:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzNDg3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM0ODc4Ng==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#discussion_r406348786", "bodyText": "Should we clear the authentication after the test?", "author": "gkillough", "createdAt": "2020-04-09T17:05:17Z", "path": "src/main/java/com/synopsys/integration/alert/component/authentication/actions/AuthenticationTestAction.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.component.authentication.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.opensaml.saml2.metadata.provider.MetadataProviderException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.ldap.authentication.LdapAuthenticationProvider;\n+import org.springframework.security.saml.metadata.ExtendedMetadataDelegate;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.common.action.TestAction;\n+import com.synopsys.integration.alert.common.exception.AlertFieldException;\n+import com.synopsys.integration.alert.common.message.model.MessageResult;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.component.authentication.descriptor.AuthenticationDescriptor;\n+import com.synopsys.integration.alert.component.authentication.descriptor.AuthenticationUIConfig;\n+import com.synopsys.integration.alert.web.security.authentication.ldap.LdapManager;\n+import com.synopsys.integration.alert.web.security.authentication.saml.SAMLManager;\n+import com.synopsys.integration.exception.IntegrationException;\n+\n+@Component\n+public class AuthenticationTestAction extends TestAction {\n+    private Logger logger = LoggerFactory.getLogger(AuthenticationTestAction.class);\n+    private LdapManager ldapManager;\n+    private SAMLManager samlManager;\n+\n+    @Autowired\n+    public AuthenticationTestAction(LdapManager ldapManager, SAMLManager samlManager) {\n+        this.ldapManager = ldapManager;\n+        this.samlManager = samlManager;\n+    }\n+\n+    @Override\n+    public MessageResult testConfig(String configId, FieldModel fieldModel, FieldAccessor registeredFieldValues) throws IntegrationException {\n+        logger.info(\"Testing authentication.\");\n+        boolean ldapEnabled = registeredFieldValues.getBooleanOrFalse(AuthenticationDescriptor.KEY_LDAP_ENABLED);\n+        boolean samlEnabled = registeredFieldValues.getBooleanOrFalse(AuthenticationDescriptor.KEY_SAML_ENABLED);\n+        if (ldapEnabled) {\n+            performLdapTest(fieldModel, registeredFieldValues);\n+        }\n+\n+        if (samlEnabled) {\n+            performSAMLTest(registeredFieldValues);\n+        }\n+\n+        return new MessageResult(\"Successfully tested authentication configuration.\");\n+    }\n+\n+    private void performLdapTest(FieldModel fieldModel, FieldAccessor registeredFieldValues) throws IntegrationException {\n+        logger.info(\"LDAP enabled testing LDAP authentication.\");\n+        String userName = fieldModel.getFieldValue(AuthenticationUIConfig.TEST_FIELD_KEY_USERNAME).orElse(\"\");\n+        Optional<LdapAuthenticationProvider> ldapProvider = ldapManager.createAuthProvider(registeredFieldValues);\n+        String errorMessage = String.format(\"Ldap Authentication test failed for the test user %s.  Please check the LDAP configuration.\", userName);\n+        Map<String, String> errorsMap = new HashMap<>();\n+        if (!ldapProvider.isPresent()) {\n+            errorsMap.put(AuthenticationDescriptor.KEY_LDAP_ENABLED, errorMessage);\n+        } else {\n+            Authentication pendingAuthentication = new UsernamePasswordAuthenticationToken(userName,\n+                fieldModel.getFieldValue(AuthenticationUIConfig.TEST_FIELD_KEY_PASSWORD).orElse(\"\"));\n+            Authentication authentication = ldapProvider.get().authenticate(pendingAuthentication);", "originalCommit": "b61b9e56fa9e10d9fba8c010115d285998f66a5e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM1MTAxNg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#discussion_r406351016", "bodyText": "You could add .filter(Authentication::isAuthenticated) to avoid chaining methods after a .get().", "author": "gkillough", "createdAt": "2020-04-09T17:09:19Z", "path": "src/main/java/com/synopsys/integration/alert/web/security/authentication/AlertAuthenticationProvider.java", "diffHunk": "@@ -47,12 +50,19 @@ public Authentication authenticate(Authentication authentication) throws Authent\n             throw new IllegalArgumentException(\"Only UsernamePasswordAuthenticationToken is supported, \" + authentication.getClass() + \" was attempted\");\n         }\n \n-        return authenticationPerformers\n-                   .stream()\n-                   .map(authPerformer -> authPerformer.performAuthentication(authentication))\n-                   .flatMap(Optional::stream)\n-                   .findAny()\n-                   .orElse(authentication);\n+        for (AuthenticationPerformer authenticationPerformer : authenticationPerformers) {\n+            try {\n+                Optional<Authentication> completedAuthentication = authenticationPerformer.performAuthentication(authentication);\n+                if (completedAuthentication.isPresent() && completedAuthentication.get().isAuthenticated()) {", "originalCommit": "b61b9e56fa9e10d9fba8c010115d285998f66a5e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM1MzA4MA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#discussion_r406353080", "bodyText": "It doesn't look like there will ever be an IllegalArgumentException because we catch it in the method called.", "author": "gkillough", "createdAt": "2020-04-09T17:13:04Z", "path": "src/main/java/com/synopsys/integration/alert/web/security/authentication/ldap/LdapManager.java", "diffHunk": "@@ -82,41 +81,45 @@ public boolean isLdapEnabled() {\n         return false;\n     }\n \n-    public ConfigurationModel getCurrentConfiguration() throws AlertDatabaseConstraintException, AlertConfigurationException {\n-        return configurationAccessor.getConfigurationsByDescriptorKey(authenticationDescriptorKey)\n-                   .stream()\n-                   .findFirst()\n-                   .orElseThrow(() -> new AlertConfigurationException(\"Settings configuration missing\"));\n+    public FieldAccessor getCurrentConfiguration() throws AlertDatabaseConstraintException, AlertConfigurationException {\n+        ConfigurationModel configModel = configurationAccessor.getConfigurationsByDescriptorKey(authenticationDescriptorKey)\n+                                             .stream()\n+                                             .findFirst()\n+                                             .orElseThrow(() -> new AlertConfigurationException(\"Settings configuration missing\"));\n+        return new FieldAccessor(configModel.getCopyOfKeyToFieldMap());\n     }\n \n-    public LdapAuthenticationProvider getAuthenticationProvider() throws AlertConfigurationException {\n-        updateContext();\n-        return authenticationProvider;\n+    public Optional<LdapAuthenticationProvider> getAuthenticationProvider() throws AlertConfigurationException {\n+        try {\n+            FieldAccessor fieldAccessor = getCurrentConfiguration();\n+            return createAuthProvider(fieldAccessor);\n+        } catch (IllegalArgumentException | AlertDatabaseConstraintException ex) {", "originalCommit": "b61b9e56fa9e10d9fba8c010115d285998f66a5e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c8f4b656212af524ce20ea91662b41da8a059764", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/c8f4b656212af524ce20ea91662b41da8a059764", "message": "refactor: Implement latest PR feedback.", "committedDate": "2020-04-09T18:25:41Z", "type": "commit"}]}