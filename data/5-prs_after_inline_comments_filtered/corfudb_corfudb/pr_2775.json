{"pr_number": 2775, "pr_title": "When sequncer fails over, elect non-tail node as primary if possible.", "pr_createdAt": "2020-09-24T05:01:36Z", "pr_url": "https://github.com/CorfuDB/CorfuDB/pull/2775", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI4MDg4OA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2775#discussion_r495280888", "bodyText": "A way to save if-clauses might be:\nprimarySequencer = sequencer; if (!logTails.contains(sequencer)) { break; }\nThe only difference is that if there is no non-tail servers, your code picks the first sequencer in the loop iteration whereas mine picks the last one. Does this matter?", "author": "Lujie1996", "createdAt": "2020-09-25T22:24:20Z", "path": "runtime/src/main/java/org/corfudb/runtime/view/LayoutBuilder.java", "diffHunk": "@@ -330,35 +332,48 @@ public LayoutBuilder mergePreviousSegment(int segmentIndex) {\n      * Moves a responsive server to the top of the sequencer server list.\n      * If all have failed, throws exception.\n      *\n-     * @param endpoints a non null set of Strings representing failed endpoints\n-     *\n+     * @param excludedNodes a non null set of Strings representing excluded endpoints\n      * @return this builder\n-     *\n-     * @throws LayoutModificationException is thrown if none of the sequencers in layout\n-     *         can be moved to the top of sequencer server list due to being unresponsive\n-     *         or a failed endpoint.\n+     * @throws LayoutModificationException if none of the sequencers in the layout can be\n+     *                                     moved to the top of sequencer server list due\n+     *                                     to being unresponsive or a failed endpoint.\n      */\n-    public LayoutBuilder assignResponsiveSequencerAsPrimary(@NonNull Set<String> endpoints) {\n-\n-        List<String> modifiedSequencerServers = new ArrayList<>(layout.getSequencers());\n-        for (int i = 0; i < modifiedSequencerServers.size(); i++) {\n-            String sequencerServer = modifiedSequencerServers.get(i);\n-\n-            // Add a sequencer server given sequencerServer is not already included in\n-            // endpoints AND it is not included in the unresponsive nodes of the layout.\n-            if (!endpoints.contains(sequencerServer) &&\n-                !layout.getUnresponsiveServers().contains(sequencerServer)) {\n-                modifiedSequencerServers.remove(sequencerServer);\n-                modifiedSequencerServers.add(0, sequencerServer);\n-                layout.setSequencers(modifiedSequencerServers);\n-                return this;\n+    public LayoutBuilder assignResponsiveSequencerAsPrimary(@NonNull Set<String> excludedNodes) {\n+        List<String> modifiedSequencers = new LinkedList<>(layout.getSequencers());\n+        String primarySequencer = null;\n+        Set<String> logTails = layout.getLastSegment().getStripes().stream()\n+                .map(LayoutStripe::getTailEndpoint)\n+                .collect(Collectors.toSet());\n+\n+        // Elect a sequencer server as primary given that server is not already included\n+        // in excludedNodes AND it is not included in the unresponsive nodes of the layout.\n+        // Non log tail servers have high priority to be elected for better load distribution.\n+        for (String sequencer : modifiedSequencers) {\n+            if (excludedNodes.contains(sequencer) ||\n+                    layout.getUnresponsiveServers().contains(sequencer)) {\n+                continue;\n+            }\n+            if (primarySequencer == null) {\n+                primarySequencer = sequencer;\n+            }\n+            if (!logTails.contains(sequencer)) {\n+                primarySequencer = sequencer;\n+                break;\n             }", "originalCommit": "61045ee0cac5f1117574499d24c02e89c53f597c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMwOTY5Nw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2775#discussion_r495309697", "bodyText": "Yea I actually thought about this, but I was afraid there are tests relying on selecting the first node, so I kept it same as before. Looks like it's not the case, just did the change, thanks.", "author": "WenbinZhu", "createdAt": "2020-09-25T23:14:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI4MDg4OA=="}], "type": "inlineReview"}, {"oid": "a52a773b5a20bc1263c96b04c4cfff614813e2bd", "url": "https://github.com/CorfuDB/CorfuDB/commit/a52a773b5a20bc1263c96b04c4cfff614813e2bd", "message": "When sequncer fails over, elect non-tail node as primary if possible.\n\nLog tail nodes need to serve queries, so when sequencer fails over, we\ntry to elect a non-tail node as the primary sequencer if possible to\nhave better load distribution.", "committedDate": "2020-09-25T23:13:03Z", "type": "forcePushed"}, {"oid": "08b0bf1bb18e5bd1f8fb0248ed8e7555dc70a580", "url": "https://github.com/CorfuDB/CorfuDB/commit/08b0bf1bb18e5bd1f8fb0248ed8e7555dc70a580", "message": "When sequncer fails over, elect non-tail node as primary if possible.\n\nLog tail nodes need to serve queries, so when sequencer fails over, we\ntry to elect a non-tail node as the primary sequencer if possible to\nhave better load distribution.", "committedDate": "2020-09-30T01:10:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAxMjU5NA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2775#discussion_r499012594", "bodyText": "Unused", "author": "zhangn49", "createdAt": "2020-10-02T19:32:01Z", "path": "test/src/test/java/org/corfudb/infrastructure/LayoutBuilderTest.java", "diffHunk": "@@ -1,5 +1,6 @@\n package org.corfudb.infrastructure;\n \n+import com.google.common.collect.Sets;", "originalCommit": "6bc57548bee8c4a5bf9c8a89a1ddf3ca7abd101d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyNzA1Mg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2775#discussion_r499827052", "bodyText": "can you please use Optional instead of null", "author": "xnull", "createdAt": "2020-10-05T19:37:29Z", "path": "runtime/src/main/java/org/corfudb/runtime/view/LayoutBuilder.java", "diffHunk": "@@ -328,37 +330,50 @@ public LayoutBuilder mergePreviousSegment(int segmentIndex) {\n \n     /**\n      * Moves a responsive server to the top of the sequencer server list.\n+     * Tries to avoid electing a log tail node if possible to have better load distribution.\n      * If all have failed, throws exception.\n      *\n-     * @param endpoints a non null set of Strings representing failed endpoints\n-     *\n+     * @param excludedNodes a non null set of Strings representing excluded endpoints\n      * @return this builder\n-     *\n-     * @throws LayoutModificationException is thrown if none of the sequencers in layout\n-     *         can be moved to the top of sequencer server list due to being unresponsive\n-     *         or a failed endpoint.\n+     * @throws LayoutModificationException if none of the sequencers in the layout can be\n+     *                                     moved to the top of sequencer server list due\n+     *                                     to being unresponsive or a failed endpoint.\n      */\n-    public LayoutBuilder assignResponsiveSequencerAsPrimary(@NonNull Set<String> endpoints) {\n-\n-        List<String> modifiedSequencerServers = new ArrayList<>(layout.getSequencers());\n-        for (int i = 0; i < modifiedSequencerServers.size(); i++) {\n-            String sequencerServer = modifiedSequencerServers.get(i);\n-\n-            // Add a sequencer server given sequencerServer is not already included in\n-            // endpoints AND it is not included in the unresponsive nodes of the layout.\n-            if (!endpoints.contains(sequencerServer) &&\n-                !layout.getUnresponsiveServers().contains(sequencerServer)) {\n-                modifiedSequencerServers.remove(sequencerServer);\n-                modifiedSequencerServers.add(0, sequencerServer);\n-                layout.setSequencers(modifiedSequencerServers);\n-                return this;\n+    public LayoutBuilder assignResponsiveSequencerAsPrimary(@NonNull Set<String> excludedNodes) {\n+        List<String> modifiedSequencers = new LinkedList<>(layout.getSequencers());\n+        String primarySequencer = null;", "originalCommit": "99356008ddbe162f257858acfa56b2a991a6a2df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg1ODY2NA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2775#discussion_r499858664", "bodyText": "Done.", "author": "WenbinZhu", "createdAt": "2020-10-05T20:38:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyNzA1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyOTg4Nw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2775#discussion_r499829887", "bodyText": "it can be improved:\nLinkedList<String> modifiedSequencers = new LinkedList<>(layout.getSequencers());\n...\nmodifiedSequencers.addFirst(primarySequencer);", "author": "xnull", "createdAt": "2020-10-05T19:43:11Z", "path": "runtime/src/main/java/org/corfudb/runtime/view/LayoutBuilder.java", "diffHunk": "@@ -328,37 +330,50 @@ public LayoutBuilder mergePreviousSegment(int segmentIndex) {\n \n     /**\n      * Moves a responsive server to the top of the sequencer server list.\n+     * Tries to avoid electing a log tail node if possible to have better load distribution.\n      * If all have failed, throws exception.\n      *\n-     * @param endpoints a non null set of Strings representing failed endpoints\n-     *\n+     * @param excludedNodes a non null set of Strings representing excluded endpoints\n      * @return this builder\n-     *\n-     * @throws LayoutModificationException is thrown if none of the sequencers in layout\n-     *         can be moved to the top of sequencer server list due to being unresponsive\n-     *         or a failed endpoint.\n+     * @throws LayoutModificationException if none of the sequencers in the layout can be\n+     *                                     moved to the top of sequencer server list due\n+     *                                     to being unresponsive or a failed endpoint.\n      */\n-    public LayoutBuilder assignResponsiveSequencerAsPrimary(@NonNull Set<String> endpoints) {\n-\n-        List<String> modifiedSequencerServers = new ArrayList<>(layout.getSequencers());\n-        for (int i = 0; i < modifiedSequencerServers.size(); i++) {\n-            String sequencerServer = modifiedSequencerServers.get(i);\n-\n-            // Add a sequencer server given sequencerServer is not already included in\n-            // endpoints AND it is not included in the unresponsive nodes of the layout.\n-            if (!endpoints.contains(sequencerServer) &&\n-                !layout.getUnresponsiveServers().contains(sequencerServer)) {\n-                modifiedSequencerServers.remove(sequencerServer);\n-                modifiedSequencerServers.add(0, sequencerServer);\n-                layout.setSequencers(modifiedSequencerServers);\n-                return this;\n+    public LayoutBuilder assignResponsiveSequencerAsPrimary(@NonNull Set<String> excludedNodes) {\n+        List<String> modifiedSequencers = new LinkedList<>(layout.getSequencers());\n+        String primarySequencer = null;\n+\n+        // Consider only tail nodes in the last segment.\n+        Set<String> logTails = layout.getLastSegment().getStripes().stream()\n+                .map(LayoutStripe::getTailEndpoint)\n+                .collect(Collectors.toSet());\n+\n+        // Elect a sequencer server as primary given that server is not already included\n+        // in excludedNodes AND it is not included in the unresponsive nodes of the layout.\n+        // Non log tail servers have high priority to be elected for better load distribution.\n+        for (String sequencer : modifiedSequencers) {\n+            if (excludedNodes.contains(sequencer) ||\n+                    layout.getUnresponsiveServers().contains(sequencer)) {\n+                continue;\n+            }\n+            primarySequencer = sequencer;\n+            if (!logTails.contains(sequencer)) {\n+                break;\n             }\n         }\n \n-        log.warn(\"Failover to a responsive sequencer server failed. Each of the layout \" +\n-                 \"sequencers:{} is either a failed endpoint or an unresponsive server\",\n-                 modifiedSequencerServers.toString());\n-        throw new LayoutModificationException(\"All sequencers failed.\");\n+        if (primarySequencer == null) {\n+            log.warn(\"Failover to a responsive sequencer server failed. Each of the layout \" +\n+                            \"sequencers:{} is either a failed endpoint or an unresponsive server\",\n+                    modifiedSequencers.toString());\n+            throw new LayoutModificationException(\"All sequencers failed.\");\n+        }\n+\n+        modifiedSequencers.remove(primarySequencer);\n+        modifiedSequencers.add(0, primarySequencer);", "originalCommit": "99356008ddbe162f257858acfa56b2a991a6a2df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg1ODcxMg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2775#discussion_r499858712", "bodyText": "Done.", "author": "WenbinZhu", "createdAt": "2020-10-05T20:38:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyOTg4Nw=="}], "type": "inlineReview"}, {"oid": "6979a228e0f970a2f383bcac940d7d3ca1c95677", "url": "https://github.com/CorfuDB/CorfuDB/commit/6979a228e0f970a2f383bcac940d7d3ca1c95677", "message": "When sequncer fails over, elect non-tail node as primary if possible.\n\nLog tail nodes need to serve queries, so when sequencer fails over, we\ntry to elect a non-tail node as the primary sequencer if possible to\nhave better load distribution.", "committedDate": "2020-10-05T20:38:36Z", "type": "commit"}, {"oid": "6979a228e0f970a2f383bcac940d7d3ca1c95677", "url": "https://github.com/CorfuDB/CorfuDB/commit/6979a228e0f970a2f383bcac940d7d3ca1c95677", "message": "When sequncer fails over, elect non-tail node as primary if possible.\n\nLog tail nodes need to serve queries, so when sequencer fails over, we\ntry to elect a non-tail node as the primary sequencer if possible to\nhave better load distribution.", "committedDate": "2020-10-05T20:38:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg2MDEwNg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2775#discussion_r499860106", "bodyText": "I have run your test with the previous version and the current one, it seems that the previous version works even better.\nIt's not clear to me what improvement has been done if your test works the same way for both versions.\nRegarding the check above, as I understand it must be ENDPOINT_0, so why you expect to see ENDPOINT_1 here?", "author": "xnull", "createdAt": "2020-10-05T20:41:42Z", "path": "test/src/test/java/org/corfudb/infrastructure/LayoutBuilderTest.java", "diffHunk": "@@ -418,6 +402,61 @@ public void unsuccessfulSequencerFailoverThrowsException() throws Exception {\n                 .addUnresponsiveServers(Collections.singleton(SERVERS.ENDPOINT_1))\n                 .addUnresponsiveServers(Collections.singleton(SERVERS.ENDPOINT_2))\n                 .assignResponsiveSequencerAsPrimary(Collections.singleton(SERVERS.ENDPOINT_0));\n+\n         layoutBuilder.build();\n     }\n+\n+    /**\n+     * This test verifies that when primary sequencer fails over, we try to assign\n+     * a non log tail node as new primary sequencer if possible to achieve better\n+     * load distribution.\n+     */\n+    @Test\n+    public void assignPrimarySequencerToNonTailNodeIfPossible() {\n+        Layout originalLayout = new TestLayoutBuilder()\n+                .setEpoch(1L)\n+                .addLayoutServer(SERVERS.PORT_0)\n+                .addLayoutServer(SERVERS.PORT_1)\n+                .addLayoutServer(SERVERS.PORT_2)\n+                .addSequencer(SERVERS.PORT_0)\n+                .addSequencer(SERVERS.PORT_1)\n+                .addSequencer(SERVERS.PORT_2)\n+                .buildSegment()\n+                .buildStripe()\n+                .addLogUnit(SERVERS.PORT_1)\n+                .addLogUnit(SERVERS.PORT_2)\n+                .addToSegment()\n+                .buildStripe()\n+                .addLogUnit(SERVERS.PORT_2)\n+                .addLogUnit(SERVERS.PORT_0)\n+                .addToSegment()\n+                .buildStripe()\n+                .addLogUnit(SERVERS.PORT_2)\n+                .addToSegment()\n+                .addToLayout()\n+                .build();\n+\n+        // All servers responsive, server 1 is the only non-tail node.\n+        LayoutBuilder layoutBuilder = new LayoutBuilder(originalLayout);\n+        Layout newLayout = layoutBuilder\n+                .assignResponsiveSequencerAsPrimary(Collections.emptySet())\n+                .build();\n+        assertThat(newLayout.getPrimarySequencer()).isEqualTo(SERVERS.ENDPOINT_1);", "originalCommit": "6979a228e0f970a2f383bcac940d7d3ca1c95677", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg3MTE4OA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2775#discussion_r499871188", "bodyText": "This is just a unit test not perf test. The purpose of the test is to make sure a non-tail node will be elected for primary sequencer if there is any. It also tests if all nodes are tails or all nodes are unresponsive, the behavior is same as before.\nYour understanding is not correct, endpoint 0 is a tail node, so it won't be elected as primary sequencer in the algorithm. Endpoint 1 is a non-tail node, so it will be elected. The test might also work for old implementation because old implementation does not have any preference on which node being elected as long as they are responsive. So endpoint 0,1,2 are all possible. All my codes are documented, please read again.", "author": "WenbinZhu", "createdAt": "2020-10-05T21:03:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg2MDEwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg5ODI5Nw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2775#discussion_r499898297", "bodyText": "Ok, let's start from the beginning, questions, please answer:\n\n\nThe layout that you created in the test is not possible in production. We always have only one stripe in one segment. What was the motivation for creating multiple stripes in the test?\n\n\nmaking Sequencer election depending on stripes is not the best idea, in my opinion, it makes logic pretty convoluted and unclear, why we need to overcomplicate that logic?\nThe Sequencer is a much more important component of the cluster than stripe and must not be dependent on a stripe. Maybe we can change the FIRST stripe server in the last segment depending on the primary sequencer but not vise versa.", "author": "xnull", "createdAt": "2020-10-05T22:05:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg2MDEwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwNzM1OQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2775#discussion_r499907359", "bodyText": "The layout that you created in the test is not possible in production. We always have only one stripe in one segment. What was the motivation for creating multiple stripes in the test?\n\nStriping is a design concept in corfu. We don't have multi-stipe in production does not mean we don't need to test it. You can see a lots of tests have multi-stripe layout. On the other hand, mutli-stripe test is a \"super set\" of single sripe, it's always better to make sure it works for multi-stripe, which implies it works for single stripe.\n\nmaking Sequencer election depending on stripes is not the best idea, in my opinion, it makes logic pretty convoluted and unclear, why we need to overcomplicate that logic?\nThe Sequencer is a much more important component of the cluster than stripe and must not be dependent on a stripe. Maybe we can change the FIRST stripe server in the last segment depending on the primary sequencer but not vise versa.\n\nThis is not depending on stripes, it just give high priority to non tail nodes, you can think of it as an optimization which takes advantage of the log tail information we have in the layout builder, it's not a dependency. Also I don't think the logic is convoluted, it's pretty clear: give high priority to non-tail nodes. You have a bunch of nodes to choose from, just give high priority to those who are not tails.\nWhen you need to do re-election on sequencer, why do you want to change log unit?  You cannot arbitrarily change log units order, there needs to be more layout changes and state transfer.", "author": "WenbinZhu", "createdAt": "2020-10-05T22:30:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg2MDEwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkyMDM4Nw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2775#discussion_r499920387", "bodyText": "it's not a dependency\n\nIt is a dependency, the design is - the more important component (sequencer) depends on a less important one (which is an optimization that not even fully used in production).\nI believe that kind of dependency is not acceptable.", "author": "xnull", "createdAt": "2020-10-05T23:11:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg2MDEwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk0MDk1Mg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2775#discussion_r499940952", "bodyText": "Please provide reason that makes it not acceptable. If it's because of \"convoluted\" than I already said it's actually pretty  simple, how could ten lines of change being convoluted. It's just a simple optimization, which will be downgraded to previous approach if all responsive nodes are tails.\n\n(which is an optimization that not even fully used in production).\nThis is used in production, which has a single node as tail, the optimization still applies to this case. The unit test verifies on a more general case.", "author": "WenbinZhu", "createdAt": "2020-10-06T00:22:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg2MDEwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk0MzE4NA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2775#discussion_r499943184", "bodyText": "I believe that kind of dependency is not acceptable.\nThe most important component of the cluster depends on the least important", "author": "xnull", "createdAt": "2020-10-06T00:31:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg2MDEwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk3MTE5Nw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2775#discussion_r499971197", "bodyText": "First this is not denpendency. We  are currently deploying everything on a node, but you can even choose to deploy sequencer on a node that does not have log unit server. this is the initial design. This patch does a similar thing.\nBy the way sequencer already depend on log unit server for fail-over (get persisted address map and stream tails.) Without this dependency, system won't work. Also log unit is not the least important, by design sequencer is just an optimization for log unit. Log unit is the source of truth.", "author": "WenbinZhu", "createdAt": "2020-10-06T02:26:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg2MDEwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk5NjU1OQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2775#discussion_r499996559", "bodyText": "We are currently deploying everything on a node, but you can even choose to deploy sequencer on a node that does not have log unit server. this is the initial design.\n\nIt has nothing to do with the deployment. We are talking only about layout. To figure out what server will be the next sequencer we need to have information about stripes.\n\nBy the way sequencer already depend on log unit server for fail-over (get persisted address map and stream tails.)\n\ncould you please point where it is\n\nby design sequencer is just an optimization for log unit\n\nNever heard about that, can you please provide a link to the initial design where it claimed?\n\nLog unit is the source of truth.\n\nIt's not true if we are talking about a particular node, that's why we have AutoCommitService and read the latest global address from the entire cluster, right?", "author": "xnull", "createdAt": "2020-10-06T04:17:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg2MDEwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAwODA5MQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2775#discussion_r500008091", "bodyText": "The deployment is an example. When deploying which node to be sequencer, system admin can decide to deploy a sequencer on non log unit node, which uses stripe information. By the way, you have stripe info in your layout why not use it to do optimization. Sequencer itself is an optmization to separate token issue responsibility from log unit. Log unit is the source of truth for tokens, it can issue tokens instead, we assign this responsibility to sequencer to get better performance. Ideally sequencer should be deployed on a sparate node to achieve most performance. When sequencer fails over it needs to query log unit for the persisted tokens, that means sequencer is an optimization for log unit, that dependency is there from day 1. You can take a look at LayoutManagementView::reconfigureSequencerServers.", "author": "WenbinZhu", "createdAt": "2020-10-06T05:06:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg2MDEwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAxNTY2NQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2775#discussion_r500015665", "bodyText": "By the way, you have stripe info in your layout why not use it to do optimization.\n\nbecause I don't see it as optimization and how it can improve things.\n\nSequencer itself is an optmization.\n\nthis is just your personal opinion\n\nWhen sequencer fails over it needs to query log unit for the persisted tokens\nthat means sequencer is an optimization for log unit\n\nNot clear to me how you get to the conclusion that sequencer is an optimization.\nAnd not clear how we can get from the above statements to the conclusion that the sequencer should be chosen from stripes.\n\nthat dependency is there from day 1\n\nSequencer needs to know the latest global address, but the election process has nothing to do with the address\n\nYou can take a look at LayoutManagementView::reconfigureSequencerServers.\n\ncould you please show the exact point in the code?", "author": "xnull", "createdAt": "2020-10-06T05:35:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg2MDEwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAxOTAxMw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2775#discussion_r500019013", "bodyText": "this is just your personal opinion\n\nIf you ever attended a new team member on board session, you will also hear maithem telling them sequencer is an optimization. Log unit is the persistent storage, that is the ground truth and most important thing.\n\nAnd not clear how we can get from the above statements to the conclusion that the sequencer should be chosen from stripes.\n\nThis is not to get that conclusion, it's to correct your statement that log unit is the least important.\nAlso it's not choosing from stripes, it's avoiding from choose a tail node, even there is no log unit server, no stripe, the algorithm still works. That's not a dependecy.\n\nSequencer needs to know the latest global address, but the election process has nothing to do with the address\n\nFailover includes election and recorver sequencer state from log unit, which already uses stripe info.\n\ncould you please show the exact point in the code?\n\nhttps://github.com/CorfuDB/CorfuDB/blob/master/runtime/src/main/java/org/corfudb/runtime/view/LayoutManagementView.java#L425-L426", "author": "WenbinZhu", "createdAt": "2020-10-06T05:47:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg2MDEwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyNTA0Ng==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2775#discussion_r500025046", "bodyText": "it's to correct your statement that log unit is the least important.\n\nOne more time, stripe != log unit\n\nhttps://github.com/CorfuDB/CorfuDB/blob/master/runtime/src/main/java/org/corfudb/runtime/view/LayoutManagementView.java#L425-L426\n\nthe change was made 2 months ago\n\nlooks like also a false assumption\nP.S. anyways, let's not spend so much time on an endless discussion.\nIt's up to you to address or not my concerns", "author": "xnull", "createdAt": "2020-10-06T06:05:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg2MDEwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAzMzIyOQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2775#discussion_r500033229", "bodyText": "One more time, stripe != log unit\n\nEvery read/write request uses stripe info, I don't know how you come with the statement that stripe is not important. Maybe you think we have only 1 stripe deployment, but to make code work for general case, you need to consider stripping in your implentation. One day if striping is removed, the idea of this patch still holds, and can still work by simply chaning to get a single log tail of the chain.\n\nlooks like also a false assumption\n\nOne more time, please read code carefully before commenting. getLogAddressSpace() calls getChainHeadFromAllSegments(), which uses stripe information.\n\nP.S. anyways, let's not spend so much time on an endless discussion.\n\nI agree, this is kind of wasting time, if you need help in understanding how some certain components work in system, I can help offline.", "author": "WenbinZhu", "createdAt": "2020-10-06T06:28:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg2MDEwNg=="}], "type": "inlineReview"}]}