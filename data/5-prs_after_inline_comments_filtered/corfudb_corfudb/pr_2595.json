{"pr_number": 2595, "pr_title": "Add ClusterManager Interface.", "pr_createdAt": "2020-07-02T05:38:39Z", "pr_url": "https://github.com/CorfuDB/CorfuDB/pull/2595", "timeline": [{"oid": "0b14ac2b17526e305eb2b00b07de348e048abc69", "url": "https://github.com/CorfuDB/CorfuDB/commit/0b14ac2b17526e305eb2b00b07de348e048abc69", "message": "Add an interface and base class for cluster manager.", "committedDate": "2020-07-02T05:05:21Z", "type": "commit"}, {"oid": "786bd187ccaea8f3672521f29187ebc23472953d", "url": "https://github.com/CorfuDB/CorfuDB/commit/786bd187ccaea8f3672521f29187ebc23472953d", "message": "Add comments for CorfuReplicationSiteManagerAdapter interface..", "committedDate": "2020-07-02T05:14:50Z", "type": "commit"}, {"oid": "94e08c127359e2af33011f514a879a5f085b4327", "url": "https://github.com/CorfuDB/CorfuDB/commit/94e08c127359e2af33011f514a879a5f085b4327", "message": "Replace site with cluster.", "committedDate": "2020-07-02T05:37:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3NzExMw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r448777113", "bodyText": "Shouldn't we call the clusterManagerAdapter.start() at this point? so it connects to the remote topology provider? If someone implements the interface this will never be triggered.", "author": "annym", "createdAt": "2020-07-02T06:32:40Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -211,9 +211,9 @@ private void connectAndQueryTopology() throws LogReplicationDiscoveryServiceExce\n             try {\n                 // Connect to Cluster Manager and Retrieve Topology Info\n                 log.info(\"Connecting to Cluster Manager adapter...\");\n-                clusterManagerAdapter.connect(this);\n+                clusterManagerAdapter.setCorfuReplicationDiscoveryService(this);", "originalCommit": "94e08c127359e2af33011f514a879a5f085b4327", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE5MjYyNA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r449192624", "bodyText": "This is just set the DiscoveryService for callback when there is a new config. There is a start() that connects and registers at the upper application cluster manager.", "author": "xiaoqin2012", "createdAt": "2020-07-02T18:17:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3NzExMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI0MTM3NQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r449241375", "bodyText": "exactly, but I didn't see where the start is being called. I only see it in the abstract class clubbed with the setCorfuReplicationDiscoveryService. But for the case of someone directly implementing the interface, where is the start called? Maybe I missed it but I didn't see it.", "author": "annym", "createdAt": "2020-07-02T20:06:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3NzExMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI2MzE1Ng==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r449263156", "bodyText": "Made the changes.", "author": "xiaoqin2012", "createdAt": "2020-07-02T20:59:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3NzExMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3NzY0Ng==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r448777646", "bodyText": "redundant accesor in the interface, we can remove this one like in the others...", "author": "annym", "createdAt": "2020-07-02T06:34:12Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationSiteManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Set the corfuReplicationDiscoveryServiceMember\n+     */\n+     void setCorfuReplicationDiscoveryService(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);\n \n-    public void connect(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n-        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n-        start();\n-    }\n+     /**\n+     * Set the localEndpoint\n+     */\n+    void setLocalEndpoint(String endpoint);\n \n-    public synchronized TopologyConfigurationMsg fetchTopology() {\n-        topologyConfig = queryTopologyConfig();\n-        return topologyConfig;\n-    }\n+    // This is the currentTopology cached at the adapter.\n+    public TopologyConfigurationMsg getTopologyConfig();", "originalCommit": "94e08c127359e2af33011f514a879a5f085b4327", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE5Mzg3OA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r449193878", "bodyText": "Others will not be accessed outside the adapter, but this can be accessed outside. Also, it provides the api to get the currentTopology without contacting the upper layer.", "author": "xiaoqin2012", "createdAt": "2020-07-02T18:20:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3NzY0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4ODY4NQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r450388685", "bodyText": "But by definition all methods for an interface are 'public', that's why it is redundant. And sonarlint complains on the IDE for these things.", "author": "annym", "createdAt": "2020-07-06T17:56:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3NzY0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3ODAwMA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r448778000", "bodyText": "can we replace the siteManagers by Cluster/Topology Manager", "author": "annym", "createdAt": "2020-07-02T06:35:07Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationSiteManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Set the corfuReplicationDiscoveryServiceMember\n+     */\n+     void setCorfuReplicationDiscoveryService(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);\n \n-    public void connect(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n-        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n-        start();\n-    }\n+     /**\n+     * Set the localEndpoint\n+     */\n+    void setLocalEndpoint(String endpoint);\n \n-    public synchronized TopologyConfigurationMsg fetchTopology() {\n-        topologyConfig = queryTopologyConfig();\n-        return topologyConfig;\n-    }\n+    // This is the currentTopology cached at the adapter.\n+    public TopologyConfigurationMsg getTopologyConfig();\n \n-    /**\n-     * Will be called when the cluster change and a new configuration is sent over\n-     *\n-     * @param newTopologyConfigMsg\n-     */\n-    public synchronized void updateTopologyConfig(TopologyConfigurationMsg newTopologyConfigMsg) {\n-        if (newTopologyConfigMsg.getTopologyConfigID() > topologyConfig.getTopologyConfigID()) {\n-            topologyConfig = newTopologyConfigMsg;\n-            corfuReplicationDiscoveryService.updateTopology(topologyConfig);\n-        }\n-    }\n+    // This will talk to the real Site Manager and get the most current topology.\n+    TopologyConfigurationMsg queryTopologyConfig();\n \n-    public void prepareSiteRoleChange() {\n-        corfuReplicationDiscoveryService.prepareClusterRoleChange();\n-    }\n+    // This is called when get a notification of site config change.\n+    void updateTopologyConfig(TopologyConfigurationMsg newSiteConfigMsg);\n \n-    public int queryReplicationStatus() {\n-        return corfuReplicationDiscoveryService.queryReplicationStatus();\n-    }\n+    // Start the siteManager service\n+    void start();\n \n-    //TODO: handle the case that queryTopologyConfig return an exception.\n-    public abstract TopologyConfigurationMsg queryTopologyConfig();\n+    // Stop the siteManger service", "originalCommit": "94e08c127359e2af33011f514a879a5f085b4327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3ODI4OA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r448778288", "bodyText": "can we rename to -> prepareClusterRoleChange", "author": "annym", "createdAt": "2020-07-02T06:35:48Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationSiteManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Set the corfuReplicationDiscoveryServiceMember\n+     */\n+     void setCorfuReplicationDiscoveryService(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);\n \n-    public void connect(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n-        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n-        start();\n-    }\n+     /**\n+     * Set the localEndpoint\n+     */\n+    void setLocalEndpoint(String endpoint);\n \n-    public synchronized TopologyConfigurationMsg fetchTopology() {\n-        topologyConfig = queryTopologyConfig();\n-        return topologyConfig;\n-    }\n+    // This is the currentTopology cached at the adapter.\n+    public TopologyConfigurationMsg getTopologyConfig();\n \n-    /**\n-     * Will be called when the cluster change and a new configuration is sent over\n-     *\n-     * @param newTopologyConfigMsg\n-     */\n-    public synchronized void updateTopologyConfig(TopologyConfigurationMsg newTopologyConfigMsg) {\n-        if (newTopologyConfigMsg.getTopologyConfigID() > topologyConfig.getTopologyConfigID()) {\n-            topologyConfig = newTopologyConfigMsg;\n-            corfuReplicationDiscoveryService.updateTopology(topologyConfig);\n-        }\n-    }\n+    // This will talk to the real Site Manager and get the most current topology.\n+    TopologyConfigurationMsg queryTopologyConfig();\n \n-    public void prepareSiteRoleChange() {\n-        corfuReplicationDiscoveryService.prepareClusterRoleChange();\n-    }\n+    // This is called when get a notification of site config change.\n+    void updateTopologyConfig(TopologyConfigurationMsg newSiteConfigMsg);\n \n-    public int queryReplicationStatus() {\n-        return corfuReplicationDiscoveryService.queryReplicationStatus();\n-    }\n+    // Start the siteManager service\n+    void start();\n \n-    //TODO: handle the case that queryTopologyConfig return an exception.\n-    public abstract TopologyConfigurationMsg queryTopologyConfig();\n+    // Stop the siteManger service\n+    void shutdown();\n \n-    public abstract void start();\n \n-    public abstract void shutdown();\n+    /**\n+     * While doing a site flip, it is the API used to notify the current log\n+     * replication node to prepare a site role type change. It will do some\n+     * bookkeeping to calculate the number of log entries to be sent over\n+     *\n+     */\n+    void prepareSiteRoleChange();", "originalCommit": "94e08c127359e2af33011f514a879a5f085b4327", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIxMjg0NQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r449212845", "bodyText": "actually if this is only called when an Active is transitioning to a Standby then can we just call it prepareToBecomeStandby() ?", "author": "hisundar", "createdAt": "2020-07-02T19:00:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3ODI4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3ODQ3NA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r448778474", "bodyText": "site -> cluster... filp -> flip", "author": "annym", "createdAt": "2020-07-02T06:36:15Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationSiteManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Set the corfuReplicationDiscoveryServiceMember\n+     */\n+     void setCorfuReplicationDiscoveryService(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);\n \n-    public void connect(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n-        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n-        start();\n-    }\n+     /**\n+     * Set the localEndpoint\n+     */\n+    void setLocalEndpoint(String endpoint);\n \n-    public synchronized TopologyConfigurationMsg fetchTopology() {\n-        topologyConfig = queryTopologyConfig();\n-        return topologyConfig;\n-    }\n+    // This is the currentTopology cached at the adapter.\n+    public TopologyConfigurationMsg getTopologyConfig();\n \n-    /**\n-     * Will be called when the cluster change and a new configuration is sent over\n-     *\n-     * @param newTopologyConfigMsg\n-     */\n-    public synchronized void updateTopologyConfig(TopologyConfigurationMsg newTopologyConfigMsg) {\n-        if (newTopologyConfigMsg.getTopologyConfigID() > topologyConfig.getTopologyConfigID()) {\n-            topologyConfig = newTopologyConfigMsg;\n-            corfuReplicationDiscoveryService.updateTopology(topologyConfig);\n-        }\n-    }\n+    // This will talk to the real Site Manager and get the most current topology.\n+    TopologyConfigurationMsg queryTopologyConfig();\n \n-    public void prepareSiteRoleChange() {\n-        corfuReplicationDiscoveryService.prepareClusterRoleChange();\n-    }\n+    // This is called when get a notification of site config change.\n+    void updateTopologyConfig(TopologyConfigurationMsg newSiteConfigMsg);\n \n-    public int queryReplicationStatus() {\n-        return corfuReplicationDiscoveryService.queryReplicationStatus();\n-    }\n+    // Start the siteManager service\n+    void start();\n \n-    //TODO: handle the case that queryTopologyConfig return an exception.\n-    public abstract TopologyConfigurationMsg queryTopologyConfig();\n+    // Stop the siteManger service\n+    void shutdown();\n \n-    public abstract void start();\n \n-    public abstract void shutdown();\n+    /**\n+     * While doing a site flip, it is the API used to notify the current log\n+     * replication node to prepare a site role type change. It will do some\n+     * bookkeeping to calculate the number of log entries to be sent over\n+     *\n+     */\n+    void prepareSiteRoleChange();\n+\n+    // While preparing a site filp, the application can query the log replication", "originalCommit": "94e08c127359e2af33011f514a879a5f085b4327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3ODYwMQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r448778601", "bodyText": "typo -> query", "author": "annym", "createdAt": "2020-07-02T06:36:39Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationSiteManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Set the corfuReplicationDiscoveryServiceMember\n+     */\n+     void setCorfuReplicationDiscoveryService(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);\n \n-    public void connect(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n-        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n-        start();\n-    }\n+     /**\n+     * Set the localEndpoint\n+     */\n+    void setLocalEndpoint(String endpoint);\n \n-    public synchronized TopologyConfigurationMsg fetchTopology() {\n-        topologyConfig = queryTopologyConfig();\n-        return topologyConfig;\n-    }\n+    // This is the currentTopology cached at the adapter.\n+    public TopologyConfigurationMsg getTopologyConfig();\n \n-    /**\n-     * Will be called when the cluster change and a new configuration is sent over\n-     *\n-     * @param newTopologyConfigMsg\n-     */\n-    public synchronized void updateTopologyConfig(TopologyConfigurationMsg newTopologyConfigMsg) {\n-        if (newTopologyConfigMsg.getTopologyConfigID() > topologyConfig.getTopologyConfigID()) {\n-            topologyConfig = newTopologyConfigMsg;\n-            corfuReplicationDiscoveryService.updateTopology(topologyConfig);\n-        }\n-    }\n+    // This will talk to the real Site Manager and get the most current topology.\n+    TopologyConfigurationMsg queryTopologyConfig();\n \n-    public void prepareSiteRoleChange() {\n-        corfuReplicationDiscoveryService.prepareClusterRoleChange();\n-    }\n+    // This is called when get a notification of site config change.\n+    void updateTopologyConfig(TopologyConfigurationMsg newSiteConfigMsg);\n \n-    public int queryReplicationStatus() {\n-        return corfuReplicationDiscoveryService.queryReplicationStatus();\n-    }\n+    // Start the siteManager service\n+    void start();\n \n-    //TODO: handle the case that queryTopologyConfig return an exception.\n-    public abstract TopologyConfigurationMsg queryTopologyConfig();\n+    // Stop the siteManger service\n+    void shutdown();\n \n-    public abstract void start();\n \n-    public abstract void shutdown();\n+    /**\n+     * While doing a site flip, it is the API used to notify the current log\n+     * replication node to prepare a site role type change. It will do some\n+     * bookkeeping to calculate the number of log entries to be sent over\n+     *\n+     */\n+    void prepareSiteRoleChange();\n+\n+    // While preparing a site filp, the application can query the log replication\n+    // status and do a smooth transition till the querry", "originalCommit": "94e08c127359e2af33011f514a879a5f085b4327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3OTM5Nw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r448779397", "bodyText": "Site -> Cluster", "author": "annym", "createdAt": "2020-07-02T06:38:43Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationSiteManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Set the corfuReplicationDiscoveryServiceMember\n+     */\n+     void setCorfuReplicationDiscoveryService(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);\n \n-    public void connect(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n-        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n-        start();\n-    }\n+     /**\n+     * Set the localEndpoint\n+     */\n+    void setLocalEndpoint(String endpoint);\n \n-    public synchronized TopologyConfigurationMsg fetchTopology() {\n-        topologyConfig = queryTopologyConfig();\n-        return topologyConfig;\n-    }\n+    // This is the currentTopology cached at the adapter.\n+    public TopologyConfigurationMsg getTopologyConfig();\n \n-    /**\n-     * Will be called when the cluster change and a new configuration is sent over\n-     *\n-     * @param newTopologyConfigMsg\n-     */\n-    public synchronized void updateTopologyConfig(TopologyConfigurationMsg newTopologyConfigMsg) {\n-        if (newTopologyConfigMsg.getTopologyConfigID() > topologyConfig.getTopologyConfigID()) {\n-            topologyConfig = newTopologyConfigMsg;\n-            corfuReplicationDiscoveryService.updateTopology(topologyConfig);\n-        }\n-    }\n+    // This will talk to the real Site Manager and get the most current topology.", "originalCommit": "94e08c127359e2af33011f514a879a5f085b4327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3OTYyMA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r448779620", "bodyText": "siteManager -> ClusterManager", "author": "annym", "createdAt": "2020-07-02T06:39:18Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationSiteManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Set the corfuReplicationDiscoveryServiceMember\n+     */\n+     void setCorfuReplicationDiscoveryService(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);\n \n-    public void connect(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n-        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n-        start();\n-    }\n+     /**\n+     * Set the localEndpoint\n+     */\n+    void setLocalEndpoint(String endpoint);\n \n-    public synchronized TopologyConfigurationMsg fetchTopology() {\n-        topologyConfig = queryTopologyConfig();\n-        return topologyConfig;\n-    }\n+    // This is the currentTopology cached at the adapter.\n+    public TopologyConfigurationMsg getTopologyConfig();\n \n-    /**\n-     * Will be called when the cluster change and a new configuration is sent over\n-     *\n-     * @param newTopologyConfigMsg\n-     */\n-    public synchronized void updateTopologyConfig(TopologyConfigurationMsg newTopologyConfigMsg) {\n-        if (newTopologyConfigMsg.getTopologyConfigID() > topologyConfig.getTopologyConfigID()) {\n-            topologyConfig = newTopologyConfigMsg;\n-            corfuReplicationDiscoveryService.updateTopology(topologyConfig);\n-        }\n-    }\n+    // This will talk to the real Site Manager and get the most current topology.\n+    TopologyConfigurationMsg queryTopologyConfig();\n \n-    public void prepareSiteRoleChange() {\n-        corfuReplicationDiscoveryService.prepareClusterRoleChange();\n-    }\n+    // This is called when get a notification of site config change.\n+    void updateTopologyConfig(TopologyConfigurationMsg newSiteConfigMsg);\n \n-    public int queryReplicationStatus() {\n-        return corfuReplicationDiscoveryService.queryReplicationStatus();\n-    }\n+    // Start the siteManager service", "originalCommit": "94e08c127359e2af33011f514a879a5f085b4327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "851493bf7195ea9ce2772abe30bb4b00ad5b2679", "url": "https://github.com/CorfuDB/CorfuDB/commit/851493bf7195ea9ce2772abe30bb4b00ad5b2679", "message": "Address some comments.", "committedDate": "2020-07-02T18:22:15Z", "type": "commit"}, {"oid": "cc5a1f7ea74cf2d10c9e2141ff3a02ed24b9d02a", "url": "https://github.com/CorfuDB/CorfuDB/commit/cc5a1f7ea74cf2d10c9e2141ff3a02ed24b9d02a", "message": "For clusterManagerAdapter, while registering the discovery service,\nit will register the callback at the upper layer too.", "committedDate": "2020-07-02T20:56:03Z", "type": "commit"}, {"oid": "e6de0831d8e6390c8b4cb0f786e856855011d314", "url": "https://github.com/CorfuDB/CorfuDB/commit/e6de0831d8e6390c8b4cb0f786e856855011d314", "message": "Fixed some comments with review feedbacks.", "committedDate": "2020-07-06T16:51:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4NjgzMg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r450386832", "bodyText": "Please remove this TODO right before this line as it is addressed with the rename.", "author": "annym", "createdAt": "2020-07-06T17:53:24Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -549,13 +549,13 @@ public void updateTopology(LogReplicationClusterInfo.TopologyConfigurationMsg to\n      * msg needs to send out.\n      */\n     @Override\n-    public void prepareClusterRoleChange() {\n+    public void prepareToBecomeStandby() {\n         //TODO  It does not restrict ClusterRole change from standby -> active or active->standby however,\n         // our underlying only process one type. Maybe it's the naming? or revising the actual functionality?\n         if (localClusterDescriptor.getRole() == ClusterRole.ACTIVE && replicationManager != null) {", "originalCommit": "e6de0831d8e6390c8b4cb0f786e856855011d314", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4ODg5OA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r450388898", "bodyText": "typo -> ClusterManger -> ClusterManager", "author": "annym", "createdAt": "2020-07-06T17:57:08Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationClusterManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Register the discovery service and start the cluster manager callback service.\n+     *   Implementation of this function should call register(), register this ClusterManager at the upper\n+     *   layer to get the callback for topology change.\n+     */\n+     void start(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);\n \n-    public void connect(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n-        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n-        start();\n-    }\n+     /**\n+     * Set the localEndpoint\n+     */\n+    void setLocalEndpoint(String endpoint);\n \n-    public synchronized TopologyConfigurationMsg fetchTopology() {\n-        topologyConfig = queryTopologyConfig();\n-        return topologyConfig;\n-    }\n+    // This is the currentTopology cached at the adapter.\n+    public TopologyConfigurationMsg getTopologyConfig();\n \n-    /**\n-     * Will be called when the cluster change and a new configuration is sent over\n-     *\n-     * @param newTopologyConfigMsg\n-     */\n-    public synchronized void updateTopologyConfig(TopologyConfigurationMsg newTopologyConfigMsg) {\n-        if (newTopologyConfigMsg.getTopologyConfigID() > topologyConfig.getTopologyConfigID()) {\n-            topologyConfig = newTopologyConfigMsg;\n-            corfuReplicationDiscoveryService.updateTopology(topologyConfig);\n-        }\n-    }\n+    // This will talk to the real Cluster Manager and get the most current topology.\n+    TopologyConfigurationMsg queryTopologyConfig();\n \n-    public void prepareSiteRoleChange() {\n-        corfuReplicationDiscoveryService.prepareClusterRoleChange();\n-    }\n+    // This is called when get a notification of cluster config change.\n+    void updateTopologyConfig(TopologyConfigurationMsg newClusterConfigMsg);\n \n-    public int queryReplicationStatus() {\n-        return corfuReplicationDiscoveryService.queryReplicationStatus();\n-    }\n+    // the register at the upper layer to get cluster topology information\n+    void register();\n \n-    //TODO: handle the case that queryTopologyConfig return an exception.\n-    public abstract TopologyConfigurationMsg queryTopologyConfig();\n+    // Stop the ClusterManger service", "originalCommit": "e6de0831d8e6390c8b4cb0f786e856855011d314", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTExMjM3Mg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r451112372", "bodyText": "+1", "author": "annym", "createdAt": "2020-07-07T20:05:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4ODg5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5MTg1NQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r450391855", "bodyText": "Assuming that the start should call the register is a bit loose, as implementers might not do the right thing. Maybe it's better if we call from the DiscoveryService start (which could be more of a setDiscoveryService) and register.... and avoid issues coming from an implementer not really doing the register explicitly.", "author": "annym", "createdAt": "2020-07-06T18:02:35Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationClusterManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Register the discovery service and start the cluster manager callback service.\n+     *   Implementation of this function should call register(), register this ClusterManager at the upper\n+     *   layer to get the callback for topology change.\n+     */\n+     void start(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);", "originalCommit": "e6de0831d8e6390c8b4cb0f786e856855011d314", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5NzM0Mg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r450397342", "bodyText": "+1.  My suggestion is to have a registerDiscoveryService() method here which is called by the discovery service to register itself.", "author": "pankti-m", "createdAt": "2020-07-06T18:12:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5MTg1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEyMjM3MQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r451122371", "bodyText": "@xiaoqin2012 I was referring to this..", "author": "annym", "createdAt": "2020-07-07T20:25:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5MTg1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEzNzg3Mg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r451137872", "bodyText": "This is out of date.", "author": "xiaoqin2012", "createdAt": "2020-07-07T20:55:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5MTg1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwMzIxMg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r450403212", "bodyText": "does this register the discovery service?  If so, my suggestion is to invoke it from discovery service instead.", "author": "pankti-m", "createdAt": "2020-07-06T18:24:39Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerBaseAdapter.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n+\n+import lombok.Getter;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n+import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n+\n+/***\n+ * This is the base class for CorfuReplicationSiteManager and implements the basic functionality.\n+ * Any SiteMangerImplementation should extend this class or implements the interface.\n+ *\n+ */\n+@Slf4j\n+public abstract class CorfuReplicationClusterManagerBaseAdapter implements CorfuReplicationClusterManagerAdapter {\n+    @Getter\n+    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+\n+    @Getter\n+    TopologyConfigurationMsg topologyConfig;\n+\n+    String localEndpoint;\n+\n+    public void start(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n+        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n+        register();", "originalCommit": "e6de0831d8e6390c8b4cb0f786e856855011d314", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwNDE5Ng==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r450404196", "bodyText": "is this class needed?  We already have a default implementation of the adapter.", "author": "pankti-m", "createdAt": "2020-07-06T18:26:31Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerBaseAdapter.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package org.corfudb.infrastructure.logreplication.infrastructure.plugins;", "originalCommit": "e6de0831d8e6390c8b4cb0f786e856855011d314", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA2MDYyMQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r451060621", "bodyText": "It has the basic implementation that other clusterManagers can share and also it gives an example of the basic implementation flow.", "author": "xiaoqin2012", "createdAt": "2020-07-07T18:25:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwNDE5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwNTExNg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r450405116", "bodyText": "this is not doing any registration...?  what does this method do?", "author": "pankti-m", "createdAt": "2020-07-06T18:28:17Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/DefaultClusterManager.java", "diffHunk": "@@ -49,7 +49,7 @@\n \n     Thread thread = new Thread(siteManagerCallback);\n \n-    public void start() {\n+    public void register() {", "originalCommit": "e6de0831d8e6390c8b4cb0f786e856855011d314", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEyMTQyNQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r451121425", "bodyText": "It start to talk to the real ClusterManager and get the topology information.", "author": "xiaoqin2012", "createdAt": "2020-07-07T20:23:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwNTExNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwNTkzNg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r450405936", "bodyText": "can we rename this also to prepareToBecomeStandby() or something like that?", "author": "pankti-m", "createdAt": "2020-07-06T18:29:57Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerBaseAdapter.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n+\n+import lombok.Getter;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n+import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n+\n+/***\n+ * This is the base class for CorfuReplicationSiteManager and implements the basic functionality.\n+ * Any SiteMangerImplementation should extend this class or implements the interface.\n+ *\n+ */\n+@Slf4j\n+public abstract class CorfuReplicationClusterManagerBaseAdapter implements CorfuReplicationClusterManagerAdapter {\n+    @Getter\n+    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+\n+    @Getter\n+    TopologyConfigurationMsg topologyConfig;\n+\n+    String localEndpoint;\n+\n+    public void start(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n+        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n+        register();\n+    }\n+\n+    public void setLocalEndpoint(String endpoint) {\n+        this.localEndpoint = endpoint;\n+    }\n+\n+    /**\n+     * Will be called when the cluster change and a new configuration is sent over\n+     *\n+     * @param newTopologyConfigMsg\n+     */\n+    public synchronized void updateTopologyConfig(TopologyConfigurationMsg newTopologyConfigMsg) {\n+        if (newTopologyConfigMsg.getTopologyConfigID() > topologyConfig.getTopologyConfigID()) {\n+            topologyConfig = newTopologyConfigMsg;\n+            corfuReplicationDiscoveryService.updateTopology(topologyConfig);\n+        }\n+    }\n+\n+    public void prepareClusterRoleChange() {", "originalCommit": "e6de0831d8e6390c8b4cb0f786e856855011d314", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUyNTk5MQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r450525991", "bodyText": "Is it possible that we can merge these two queryTopologyConfig functions? Maybe use a boolean parameter to indicate query from the local cache or not.", "author": "zhangn49", "createdAt": "2020-07-06T23:14:33Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationClusterManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Register the discovery service and start the cluster manager callback service.\n+     *   Implementation of this function should call register(), register this ClusterManager at the upper\n+     *   layer to get the callback for topology change.\n+     */\n+     void start(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);\n \n-    public void connect(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n-        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n-        start();\n-    }\n+     /**\n+     * Set the localEndpoint\n+     */\n+    void setLocalEndpoint(String endpoint);\n \n-    public synchronized TopologyConfigurationMsg fetchTopology() {\n-        topologyConfig = queryTopologyConfig();\n-        return topologyConfig;\n-    }\n+    // This is the currentTopology cached at the adapter.\n+    public TopologyConfigurationMsg getTopologyConfig();\n \n-    /**\n-     * Will be called when the cluster change and a new configuration is sent over\n-     *\n-     * @param newTopologyConfigMsg\n-     */\n-    public synchronized void updateTopologyConfig(TopologyConfigurationMsg newTopologyConfigMsg) {\n-        if (newTopologyConfigMsg.getTopologyConfigID() > topologyConfig.getTopologyConfigID()) {\n-            topologyConfig = newTopologyConfigMsg;\n-            corfuReplicationDiscoveryService.updateTopology(topologyConfig);\n-        }\n-    }\n+    // This will talk to the real Cluster Manager and get the most current topology.\n+    TopologyConfigurationMsg queryTopologyConfig();", "originalCommit": "e6de0831d8e6390c8b4cb0f786e856855011d314", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUyNjMzOQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r450526339", "bodyText": "Should we have a unified name 'prepareToBecomeStandby()'?", "author": "zhangn49", "createdAt": "2020-07-06T23:15:42Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationClusterManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Register the discovery service and start the cluster manager callback service.\n+     *   Implementation of this function should call register(), register this ClusterManager at the upper\n+     *   layer to get the callback for topology change.\n+     */\n+     void start(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);\n \n-    public void connect(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n-        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n-        start();\n-    }\n+     /**\n+     * Set the localEndpoint\n+     */\n+    void setLocalEndpoint(String endpoint);\n \n-    public synchronized TopologyConfigurationMsg fetchTopology() {\n-        topologyConfig = queryTopologyConfig();\n-        return topologyConfig;\n-    }\n+    // This is the currentTopology cached at the adapter.\n+    public TopologyConfigurationMsg getTopologyConfig();\n \n-    /**\n-     * Will be called when the cluster change and a new configuration is sent over\n-     *\n-     * @param newTopologyConfigMsg\n-     */\n-    public synchronized void updateTopologyConfig(TopologyConfigurationMsg newTopologyConfigMsg) {\n-        if (newTopologyConfigMsg.getTopologyConfigID() > topologyConfig.getTopologyConfigID()) {\n-            topologyConfig = newTopologyConfigMsg;\n-            corfuReplicationDiscoveryService.updateTopology(topologyConfig);\n-        }\n-    }\n+    // This will talk to the real Cluster Manager and get the most current topology.\n+    TopologyConfigurationMsg queryTopologyConfig();\n \n-    public void prepareSiteRoleChange() {\n-        corfuReplicationDiscoveryService.prepareClusterRoleChange();\n-    }\n+    // This is called when get a notification of cluster config change.\n+    void updateTopologyConfig(TopologyConfigurationMsg newClusterConfigMsg);\n \n-    public int queryReplicationStatus() {\n-        return corfuReplicationDiscoveryService.queryReplicationStatus();\n-    }\n+    // the register at the upper layer to get cluster topology information\n+    void register();\n \n-    //TODO: handle the case that queryTopologyConfig return an exception.\n-    public abstract TopologyConfigurationMsg queryTopologyConfig();\n+    // Stop the ClusterManger service\n+    void shutdown();\n \n-    public abstract void start();\n \n-    public abstract void shutdown();\n+    /**\n+     * While doing a cluster role type flip, it is the API used to notify the current log\n+     * replication node to prepare a cluster role type change. It will do some\n+     * bookkeeping to calculate the number of log entries to be sent over\n+     *\n+     */\n+    void prepareClusterRoleChange();", "originalCommit": "e6de0831d8e6390c8b4cb0f786e856855011d314", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUyNzU1Mg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r450527552", "bodyText": "Is this abstract class used to guarantee that all cluster managers have corfuReplicationDiscoveryService and topologyConfig?", "author": "zhangn49", "createdAt": "2020-07-06T23:20:03Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerBaseAdapter.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n+\n+import lombok.Getter;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n+import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n+\n+/***\n+ * This is the base class for CorfuReplicationSiteManager and implements the basic functionality.\n+ * Any SiteMangerImplementation should extend this class or implements the interface.\n+ *\n+ */\n+@Slf4j\n+public abstract class CorfuReplicationClusterManagerBaseAdapter implements CorfuReplicationClusterManagerAdapter {", "originalCommit": "e6de0831d8e6390c8b4cb0f786e856855011d314", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA2MTgyOA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r451061828", "bodyText": "yes.", "author": "xiaoqin2012", "createdAt": "2020-07-07T18:28:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUyNzU1Mg=="}], "type": "inlineReview"}, {"oid": "7d4ea794985e62b08688baccb1a4d12e40824580", "url": "https://github.com/CorfuDB/CorfuDB/commit/7d4ea794985e62b08688baccb1a4d12e40824580", "message": "Address comments.\n  * change name as register(discoveryService).\n  * collapse query API with a boolean.", "committedDate": "2020-07-07T19:42:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwNzk2NQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r451107965", "bodyText": "Let's remove the TODO below this line.", "author": "zhangn49", "createdAt": "2020-07-07T19:56:33Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -549,13 +549,13 @@ public void updateTopology(LogReplicationClusterInfo.TopologyConfigurationMsg to\n      * msg needs to send out.\n      */\n     @Override\n-    public void prepareClusterRoleChange() {\n+    public void prepareToBecomeStandby() {", "originalCommit": "7d4ea794985e62b08688baccb1a4d12e40824580", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTExMjI4MQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r451112281", "bodyText": "+1", "author": "annym", "createdAt": "2020-07-07T20:05:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwNzk2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTExMjEwMg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r451112102", "bodyText": "The start is still not being called. So, any implementation of the interface itself will miss running the start logic.", "author": "annym", "createdAt": "2020-07-07T20:04:49Z", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -211,9 +211,9 @@ private void connectAndQueryTopology() throws LogReplicationDiscoveryServiceExce\n             try {\n                 // Connect to Cluster Manager and Retrieve Topology Info\n                 log.info(\"Connecting to Cluster Manager adapter...\");\n-                clusterManagerAdapter.connect(this);\n+                clusterManagerAdapter.register(this);", "originalCommit": "7d4ea794985e62b08688baccb1a4d12e40824580", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTExODM1Mw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r451118353", "bodyText": "It is said in the comment that any implementation of the register should call the start.", "author": "xiaoqin2012", "createdAt": "2020-07-07T20:17:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTExMjEwMg=="}], "type": "inlineReview"}, {"oid": "ac3a9768158ef0ae9ff377cbc795d9cc6fee8986", "url": "https://github.com/CorfuDB/CorfuDB/commit/ac3a9768158ef0ae9ff377cbc795d9cc6fee8986", "message": "Address comments.", "committedDate": "2020-07-07T20:33:08Z", "type": "commit"}, {"oid": "1ed2e47e4bffb563398639022acca03b44d95e31", "url": "https://github.com/CorfuDB/CorfuDB/commit/1ed2e47e4bffb563398639022acca03b44d95e31", "message": "Address comments.", "committedDate": "2020-07-08T04:32:16Z", "type": "commit"}, {"oid": "39aed9fc7c53d7edfc5e6dce70e6ee4fe0b40dcb", "url": "https://github.com/CorfuDB/CorfuDB/commit/39aed9fc7c53d7edfc5e6dce70e6ee4fe0b40dcb", "message": "Merge branch 'xq/0701siteManagerInterface01' of https://github.com/CorfuDB/CorfuDB into xq/0701siteManagerInterface01", "committedDate": "2020-07-08T04:33:22Z", "type": "commit"}, {"oid": "76920fce3fb00c3319a182f1e66927bbc42bc84f", "url": "https://github.com/CorfuDB/CorfuDB/commit/76920fce3fb00c3319a182f1e66927bbc42bc84f", "message": "Correct Behavior of Failed Negotiation + Leadership Retry (#2604)\n\n- If negotiation fails due to version or topologyConfigId mismatch\r\nthe behavior will be to retry negotiation.\r\n- Retry Leadership request if failed to query for a leader.", "committedDate": "2020-07-08T18:53:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwNTgxOQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r452405819", "bodyText": "please remove this otherwise compilation will fail", "author": "pankti-m", "createdAt": "2020-07-09T18:20:18Z", "path": "test/src/test/java/org/corfudb/integration/CorfuReplicationSiteConfigIT.java", "diffHunk": "@@ -364,6 +364,7 @@ public void runSiteSwitch() throws Exception {\n                assertThat(mapA1.containsKey(String.valueOf(i))).isTrue();\n             }\n \n+            System.out.print(\"\\nTest Succeeds!!!\");", "originalCommit": "39aed9fc7c53d7edfc5e6dce70e6ee4fe0b40dcb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ0MTUwNg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r452441506", "bodyText": "This is the test, the system.out.print is allover in the tests.", "author": "xiaoqin2012", "createdAt": "2020-07-09T19:27:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwNTgxOQ=="}], "type": "inlineReview"}, {"oid": "09602fbfc1997f42a42eae3e09e5809350960ed8", "url": "https://github.com/CorfuDB/CorfuDB/commit/09602fbfc1997f42a42eae3e09e5809350960ed8", "message": "Add an interface and base class for cluster manager.", "committedDate": "2020-07-09T19:46:29Z", "type": "commit"}, {"oid": "018fb6236118beaf0ec6dc1f22f3d58b8310644b", "url": "https://github.com/CorfuDB/CorfuDB/commit/018fb6236118beaf0ec6dc1f22f3d58b8310644b", "message": "Add comments for CorfuReplicationSiteManagerAdapter interface..", "committedDate": "2020-07-09T19:46:29Z", "type": "commit"}, {"oid": "1722ea9b1048f397a711d70b1d02b603ba57af28", "url": "https://github.com/CorfuDB/CorfuDB/commit/1722ea9b1048f397a711d70b1d02b603ba57af28", "message": "Replace site with cluster.", "committedDate": "2020-07-09T19:46:29Z", "type": "commit"}, {"oid": "aad6f8b83ceacde54524262d6892899f9b0aaf59", "url": "https://github.com/CorfuDB/CorfuDB/commit/aad6f8b83ceacde54524262d6892899f9b0aaf59", "message": "Address some comments.", "committedDate": "2020-07-09T19:46:29Z", "type": "commit"}, {"oid": "993c7428e71dd8dd69ef0a6e7f4918317d5192fb", "url": "https://github.com/CorfuDB/CorfuDB/commit/993c7428e71dd8dd69ef0a6e7f4918317d5192fb", "message": "For clusterManagerAdapter, while registering the discovery service,\nit will register the callback at the upper layer too.", "committedDate": "2020-07-09T19:46:29Z", "type": "commit"}, {"oid": "b2b5ed6d67d0043a2f812e072ee93c290e1caca6", "url": "https://github.com/CorfuDB/CorfuDB/commit/b2b5ed6d67d0043a2f812e072ee93c290e1caca6", "message": "Fixed some comments with review feedbacks.", "committedDate": "2020-07-09T19:46:29Z", "type": "commit"}, {"oid": "e2192f51bcfc563defbe4ed81cd2c640249e3eba", "url": "https://github.com/CorfuDB/CorfuDB/commit/e2192f51bcfc563defbe4ed81cd2c640249e3eba", "message": "Address comments.\n  * change name as register(discoveryService).\n  * collapse query API with a boolean.", "committedDate": "2020-07-09T19:46:29Z", "type": "commit"}, {"oid": "59cf9cf3fb80aa645b892f45316b37810fdd4ca6", "url": "https://github.com/CorfuDB/CorfuDB/commit/59cf9cf3fb80aa645b892f45316b37810fdd4ca6", "message": "Address comments.", "committedDate": "2020-07-09T19:46:29Z", "type": "commit"}, {"oid": "7429c0f26ea9ae46f31542b1f4c2adf4fdf2e628", "url": "https://github.com/CorfuDB/CorfuDB/commit/7429c0f26ea9ae46f31542b1f4c2adf4fdf2e628", "message": "Merge branch 'xq/0701siteManagerInterface01' of https://github.com/CorfuDB/CorfuDB into xq/0701siteManagerInterface01", "committedDate": "2020-07-09T19:47:57Z", "type": "commit"}]}