{"pr_number": 2807, "pr_title": "Client side corfu metrics", "pr_createdAt": "2020-10-30T05:02:35Z", "pr_url": "https://github.com/CorfuDB/CorfuDB/pull/2807", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4NDM5OQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2807#discussion_r515384399", "bodyText": "can we extract these 3 variables into a MetricsConfig class?", "author": "xnull", "createdAt": "2020-10-30T21:10:11Z", "path": "runtime/src/main/java/org/corfudb/runtime/CorfuRuntime.java", "diffHunk": "@@ -242,6 +246,12 @@ public static CorfuRuntimeParametersBuilder builder() {\n          */\n         private MetricRegistry metricRegistry;\n \n+        private boolean microMeterRegistryEnabled;\n+\n+        private Duration microMeterLoggingInterval;\n+\n+        private String configuredLogger;", "originalCommit": "2cb91e198efb4c3f576ef349201995ee781023d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQzNTY2OA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2807#discussion_r515435668", "bodyText": "done", "author": "PavelZaytsev", "createdAt": "2020-10-31T00:52:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4NDM5OQ=="}], "type": "inlineReview"}, {"oid": "21b67d73991a816828b5c54b0395a63e853bcc1f", "url": "https://github.com/CorfuDB/CorfuDB/commit/21b67d73991a816828b5c54b0395a63e853bcc1f", "message": "Client side metrics", "committedDate": "2020-11-09T19:36:45Z", "type": "forcePushed"}, {"oid": "6edd50ad56254041809569ff6a39c10e2e0943be", "url": "https://github.com/CorfuDB/CorfuDB/commit/6edd50ad56254041809569ff6a39c10e2e0943be", "message": "Client side corfu metrics", "committedDate": "2020-11-13T21:34:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM4MTEwNQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2807#discussion_r526381105", "bodyText": "Can you remove  getInstance and just instantiate a new instance for LR (just like you do it for the client/server). Having a singleton implemented with a synchronized on the getter is not efficient.", "author": "Maithem", "createdAt": "2020-11-18T19:59:09Z", "path": "common/src/main/java/org/corfudb/common/metrics/micrometer/MeterRegistryProvider.java", "diffHunk": "@@ -25,6 +26,26 @@ private MeterRegistryProvider() {\n      * Class that initializes the Meter Registry.\n      */\n     public static class MeterRegistryInitializer extends MeterRegistryProvider {\n+\n+        /**\n+         * Create a new instance of MeterRegistry with the given logger, loggingInterval\n+         * and clientId.\n+         * @param logger A configured logger.\n+         * @param loggingInterval A duration between log appends for every metric.\n+         * @param clientId An id of a client for this metric.\n+         * @return A new meter registry.\n+         */\n+        public static MeterRegistry newInstance(Logger logger, Duration loggingInterval,", "originalCommit": "63179154948708a363ea258632ffad40d5ad9c1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg3MTk4MQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2807#discussion_r529871981", "bodyText": "On the server-side, this would entail passing the registry as a parameter to a lot of classes that require instrumentation. This would make code more difficult to read, this would also require a lot of modifications. I would prefer to leave the registry as a singleton but I need to guarantee that the instance can be configured only once.", "author": "PavelZaytsev", "createdAt": "2020-11-24T20:55:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM4MTEwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM4ODgyNg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2807#discussion_r526388826", "bodyText": "This init doesn't seem like its being used.", "author": "Maithem", "createdAt": "2020-11-18T20:12:27Z", "path": "common/src/main/java/org/corfudb/common/metrics/micrometer/MeterRegistryProvider.java", "diffHunk": "@@ -41,6 +62,22 @@ public static synchronized void init(Logger logger, Duration loggingInterval,\n             init(loggingInterval, localEndpoint, influxLineProtocolLoggingSink);\n         }\n \n+        /**\n+         * Configure the meter registry of type LoggingMeterRegistry. All the metrics registered\n+         * with this meter registry will be exported in the InfluxDB line protocol format\n+         * (https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_tutorial/)\n+         * with  the provided loggingInterval frequency.\n+         * @param logger A configured logger.\n+         * @param loggingInterval A duration between log appends for every metric.\n+         */\n+        public static synchronized void init(Logger logger, Duration loggingInterval) {", "originalCommit": "63179154948708a363ea258632ffad40d5ad9c1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEwMTk1NA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2807#discussion_r530101954", "bodyText": "Removed", "author": "PavelZaytsev", "createdAt": "2020-11-25T04:33:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM4ODgyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM4OTI1Nw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2807#discussion_r526389257", "bodyText": "This init doesn't seem like its being used.", "author": "Maithem", "createdAt": "2020-11-18T20:13:14Z", "path": "common/src/main/java/org/corfudb/common/metrics/micrometer/MeterRegistryProvider.java", "diffHunk": "@@ -63,6 +100,25 @@ public static synchronized void init(Duration loggingInterval,\n             init(supplier);\n         }\n \n+        /**\n+         * Configure the meter registry of type LoggingMeterRegistry. All the metrics registered\n+         * with this meter registry will be exported via provided logging sink with\n+         * the provided loggingInterval frequency.\n+         * @param sink A configured logging sink.\n+         * @param loggingInterval A duration between log appends for every metric.\n+         */\n+        public static synchronized void init(Duration loggingInterval,", "originalCommit": "63179154948708a363ea258632ffad40d5ad9c1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA2NDAzNg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2807#discussion_r530064036", "bodyText": "removed", "author": "PavelZaytsev", "createdAt": "2020-11-25T02:17:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM4OTI1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM5Mzg5MA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2807#discussion_r526393890", "bodyText": "Why does this sink log to debug?", "author": "Maithem", "createdAt": "2020-11-18T20:19:03Z", "path": "common/src/main/java/org/corfudb/common/metrics/micrometer/loggingsink/InfluxLineProtocolLoggingSink.java", "diffHunk": "@@ -20,6 +21,7 @@\n \n     @NonNull\n     private final Logger logger;\n+    @Getter", "originalCommit": "63179154948708a363ea258632ffad40d5ad9c1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEwMTkzNw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2807#discussion_r530101937", "bodyText": "Removed", "author": "PavelZaytsev", "createdAt": "2020-11-25T04:33:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM5Mzg5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM5NzA1Mg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2807#discussion_r526397052", "bodyText": "Also, in LineTransformer instead of returning return an Optional.empty()  we should fail. Right now we don't have any metrics that we don't expect to transform. Returning an empty optional can hide incorrect regexes which makes it harder to debug (i.e., #2825 (comment) )", "author": "Maithem", "createdAt": "2020-11-18T20:23:51Z", "path": "common/src/main/java/org/corfudb/common/metrics/micrometer/loggingsink/InfluxLineProtocolLoggingSink.java", "diffHunk": "@@ -20,6 +21,7 @@\n \n     @NonNull\n     private final Logger logger;\n+    @Getter", "originalCommit": "63179154948708a363ea258632ffad40d5ad9c1e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQwNzgxMA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2807#discussion_r526407810", "bodyText": "If metricsEnabled = true but no logger was found then we should print a warning message.", "author": "Maithem", "createdAt": "2020-11-18T20:43:24Z", "path": "runtime/src/main/java/org/corfudb/runtime/CorfuRuntime.java", "diffHunk": "@@ -825,6 +849,17 @@ private CorfuRuntime(@Nonnull CorfuRuntimeParameters parameters) {\n             MetricsUtils.metricsReportingSetup(\n                     defaultMetrics, parameters.getPrometheusMetricsPort());\n         }\n+        CorfuRuntimeParameters.MicroMeterRuntimeConfig microMeterRuntimeConfig =\n+                this.parameters.getMicroMeterRuntimeConfig();\n+        if (microMeterRuntimeConfig.metricsEnabled) {\n+            LoggerContext loggerContext = (LoggerContext) LoggerFactory.getILoggerFactory();\n+            registry = Optional.ofNullable(loggerContext.exists(microMeterRuntimeConfig.configuredLoggerName))\n+                    .map(logger -> MeterRegistryProvider.MeterRegistryInitializer.newInstance(logger,", "originalCommit": "63179154948708a363ea258632ffad40d5ad9c1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA2NDI1NA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2807#discussion_r530064254", "bodyText": "done", "author": "PavelZaytsev", "createdAt": "2020-11-25T02:17:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQwNzgxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQwOTE0NA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2807#discussion_r526409144", "bodyText": "What is the advantage of using Java's Optional over the No-op metric types that micrometer provides?", "author": "Maithem", "createdAt": "2020-11-18T20:45:48Z", "path": "runtime/src/main/java/org/corfudb/runtime/CorfuRuntime.java", "diffHunk": "@@ -1118,6 +1154,9 @@ private void pruneRemovedRouters(@Nonnull Layout layout) {\n                         // Prune away removed node routers from the nodeRouterPool.\n                         pruneRemovedRouters(l);\n \n+                        getRegistry().ifPresent(reg ->\n+                                fetchSample.ifPresent(sample ->\n+                                        sample.stop(reg.timer(\"runtime.fetch_layout.timer\"))));", "originalCommit": "63179154948708a363ea258632ffad40d5ad9c1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5NzkxOA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2807#discussion_r529897918", "bodyText": "I did not know about no-op metric types. But I guess this also depends on the order the registries and the meters are instantiated. As far as I understand, the meters are no-oped unless they are registered. Since we configure the registry on startup first, depending on the passed arguments the registry is optionally getting created first, hence by composition all of the meters that are produced from it are also optional.\nAlso having an optional registry allows for a more fluent code when it comes to lookup by key.", "author": "PavelZaytsev", "createdAt": "2020-11-24T21:45:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQwOTE0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQxMTQyMA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2807#discussion_r526411420", "bodyText": "Can you use the existing logger name https://github.com/CorfuDB/CorfuDB/blob/master/runtime/src/main/java/org/corfudb/util/MetricsUtils.java#L212  ?\nWe have put out documents that use that logger's name, using a different one might be more confusing.", "author": "Maithem", "createdAt": "2020-11-18T20:50:00Z", "path": "runtime/src/main/java/org/corfudb/runtime/CorfuRuntime.java", "diffHunk": "@@ -269,6 +284,15 @@ public static CorfuRuntimeParametersBuilder builder() {\n             private PriorityLevel priorityLevel = PriorityLevel.NORMAL;\n             private Codec.Type codecType = Codec.Type.ZSTD;\n             private MetricRegistry metricRegistry = null;\n+            private MicroMeterRuntimeConfig microMeterRuntimeConfig =\n+                    new MicroMeterRuntimeConfig(true,\n+                    \"CorfuMetrics\", Duration.ofMinutes(1));", "originalCommit": "63179154948708a363ea258632ffad40d5ad9c1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQxMjA1OA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2807#discussion_r526412058", "bodyText": "It would be nice to have a read me and explicitly spell it out too, that is, the configuration of metrics.", "author": "Maithem", "createdAt": "2020-11-18T20:51:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQxMTQyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA2NDE5Mg==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2807#discussion_r530064192", "bodyText": "done", "author": "PavelZaytsev", "createdAt": "2020-11-25T02:17:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQxMTQyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQxNjc0Mw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2807#discussion_r526416743", "bodyText": "Can you add a gauge on the miss ratio and some metrics for the load time stats.", "author": "Maithem", "createdAt": "2020-11-18T20:59:43Z", "path": "runtime/src/main/java/org/corfudb/runtime/view/AddressSpaceView.java", "diffHunk": "@@ -112,14 +120,26 @@ public AddressSpaceView(@Nonnull final CorfuRuntime runtime) {\n                 .recordStats()\n                 .build();\n \n-        MetricRegistry metrics = CorfuRuntime.getDefaultMetrics();\n-        final String pfx = String.format(\"%s0x%x.cache.\", CorfuComponent.ADDRESS_SPACE_VIEW.toString(),\n-                this.hashCode());\n-        metrics.register(pfx + \"cache-size\", (Gauge<Long>) readCache::size);\n-        metrics.register(pfx + \"evictions\", (Gauge<Long>) () -> readCache.stats().evictionCount());\n-        metrics.register(pfx + \"hit-rate\", (Gauge<Double>) () -> readCache.stats().hitRate());\n-        metrics.register(pfx + \"hits\", (Gauge<Long>) () -> readCache.stats().hitCount());\n-        metrics.register(pfx + \"misses\", (Gauge<Long>) () -> readCache.stats().missCount());\n+        Optional<MeterRegistry> metricsRegistry = runtime.getRegistry();\n+\n+        metricsRegistry.ifPresent(registry ->\n+                GuavaCacheMetrics.monitor(registry, readCache, \"address_space.read_cache\"));", "originalCommit": "63179154948708a363ea258632ffad40d5ad9c1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA2ODg0Mw==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2807#discussion_r530068843", "bodyText": "done", "author": "PavelZaytsev", "createdAt": "2020-11-25T02:32:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQxNjc0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE4Nzc5MA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2807#discussion_r529187790", "bodyText": "This is a stream range query (scans the bitsets on the sequencer), we should re-add that metric. Actually, there's a bug right now related to bitset queries #2747", "author": "Maithem", "createdAt": "2020-11-24T04:02:30Z", "path": "runtime/src/main/java/org/corfudb/runtime/view/SequencerView.java", "diffHunk": "@@ -122,27 +124,24 @@ public StreamAddressSpace getStreamAddressSpace(StreamAddressRange streamsAddres\n      * @return address space for each stream in the request.\n      */\n     public Map<UUID, StreamAddressSpace> getStreamsAddressSpace(List<StreamAddressRange> streamsAddressesRange) {\n-        try (Timer.Context context = MetricsUtils.getConditionalContext(sequencerNextOneStream)) {\n-            StreamsAddressResponse streamsAddressResponse = layoutHelper(e ->\n-                    CFUtils.getUninterruptibly(e.getPrimarySequencerClient()\n-                            .getStreamsAddressSpace(streamsAddressesRange)));\n-            return streamsAddressResponse.getAddressMap();\n-        }\n+        StreamsAddressResponse streamsAddressResponse = layoutHelper(e ->\n+                CFUtils.getUninterruptibly(e.getPrimarySequencerClient()\n+                        .getStreamsAddressSpace(streamsAddressesRange)));\n+        return streamsAddressResponse.getAddressMap();", "originalCommit": "63179154948708a363ea258632ffad40d5ad9c1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA2OTUwOQ==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2807#discussion_r530069509", "bodyText": "done", "author": "PavelZaytsev", "createdAt": "2020-11-25T02:34:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE4Nzc5MA=="}], "type": "inlineReview"}, {"oid": "56e46cd3cd94083eccb24269bcd30a79379f1219", "url": "https://github.com/CorfuDB/CorfuDB/commit/56e46cd3cd94083eccb24269bcd30a79379f1219", "message": "Introduce client-side corfu metrics", "committedDate": "2020-11-25T03:16:52Z", "type": "forcePushed"}, {"oid": "19eeb295515573b0489100977ed430d446b7d73b", "url": "https://github.com/CorfuDB/CorfuDB/commit/19eeb295515573b0489100977ed430d446b7d73b", "message": "Client side metrics", "committedDate": "2020-11-25T18:27:37Z", "type": "commit"}, {"oid": "19eeb295515573b0489100977ed430d446b7d73b", "url": "https://github.com/CorfuDB/CorfuDB/commit/19eeb295515573b0489100977ed430d446b7d73b", "message": "Client side metrics", "committedDate": "2020-11-25T18:27:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU3NDQ1MA==", "url": "https://github.com/CorfuDB/CorfuDB/pull/2807#discussion_r530574450", "bodyText": "Not sure if we need to use 2 different timers to record optimistic sync and regular sync", "author": "zhangn49", "createdAt": "2020-11-25T18:35:37Z", "path": "runtime/src/main/java/org/corfudb/runtime/object/VersionLockedObject.java", "diffHunk": "@@ -679,32 +714,31 @@ protected void syncStreamUnsafe(ISMRStream stream, long timestamp) {\n                 ? \"Optimistic\" : \"to \" + timestamp);\n         long syncTo = (timestamp == Address.OPTIMISTIC) ? Address.MAX : timestamp;\n \n-        Histogram histogram = VloMetricsHelper.metrics.histogram(syncStreamCount);\n-        Counter counter = new Counter();\n-        try (Timer.Context context = getVloStreamSyncContext(timestamp, syncStreamTimer)) {\n-            stream.streamUpTo(syncTo)\n-                    .forEachOrdered(entry -> {\n-                        try {\n-                            counter.count++;\n-                            Object res = applyUpdateUnsafe(entry, timestamp);\n-                            if (timestamp == Address.OPTIMISTIC) {\n+        Runnable syncStreamRunnable = () ->\n+                stream.streamUpTo(syncTo)\n+                        .forEachOrdered(entry -> {\n+                            try {\n+                                Object res = applyUpdateUnsafe(entry, timestamp);\n+                                versionApplyCounter.ifPresent(Counter::increment);\n+                                if (timestamp == Address.OPTIMISTIC) {\n+                                    entry.setUpcallResult(res);\n+                                } else if (pendingUpcalls.contains(entry.getGlobalAddress())) {\n+                                    log.debug(\"Sync[{}] Upcall Result {}\",\n+                                            this, entry.getGlobalAddress());\n+                                    upcallResults.put(entry.getGlobalAddress(), res == null\n+                                            ? NullValue.NULL_VALUE : res);\n+                                    pendingUpcalls.remove(entry.getGlobalAddress());\n+                                }\n                                 entry.setUpcallResult(res);\n-                            } else if (pendingUpcalls.contains(entry.getGlobalAddress())) {\n-                                log.debug(\"Sync[{}] Upcall Result {}\",\n-                                        this, entry.getGlobalAddress());\n-                                upcallResults.put(entry.getGlobalAddress(), res == null\n-                                        ? NullValue.NULL_VALUE : res);\n-                                pendingUpcalls.remove(entry.getGlobalAddress());\n+                            } catch (Exception e) {\n+                                log.error(\"Sync[{}] Error: Couldn't execute upcall due to {}\", this, e);\n+                                throw new UnrecoverableCorfuError(e);\n                             }\n-                            entry.setUpcallResult(res);\n-                        } catch (Exception e) {\n-                            log.error(\"Sync[{}] Error: Couldn't execute upcall due to {}\", this, e);\n-                            throw new UnrecoverableCorfuError(e);\n-                        }\n-                    });\n-        }\n-        if (timestamp != Address.OPTIMISTIC) {\n-            histogram.update(counter.count);\n+                        });\n+        if (syncStreamTimer.isPresent()) {\n+            syncStreamTimer.get().record(syncStreamRunnable);", "originalCommit": "19eeb295515573b0489100977ed430d446b7d73b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0165408550c942bcbc89ff8be3eede3104885a54", "url": "https://github.com/CorfuDB/CorfuDB/commit/0165408550c942bcbc89ff8be3eede3104885a54", "message": "Merge branch 'master' into client-side-corfu-metrics", "committedDate": "2020-11-25T22:30:34Z", "type": "commit"}]}