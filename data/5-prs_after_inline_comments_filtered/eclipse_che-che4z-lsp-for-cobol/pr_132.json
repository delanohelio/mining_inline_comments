{"pr_number": 132, "pr_title": "Engineering excellence for core #23", "pr_createdAt": "2020-01-09T16:56:05Z", "pr_url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/132", "timeline": [{"oid": "20995463f2b89ede7f56413480f1c95cb20450ff", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/20995463f2b89ede7f56413480f1c95cb20450ff", "message": "Remove unused field tokenIndex of Position  #23", "committedDate": "2020-01-08T13:04:42Z", "type": "commit"}, {"oid": "32542bda7aa9f6380a34d16f414910d9cd09b128", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/32542bda7aa9f6380a34d16f414910d9cd09b128", "message": "Remove unused fields of SyntaxError #23", "committedDate": "2020-01-08T15:13:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE0NDc0OA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/132#discussion_r365144748", "bodyText": "ruleStack can be a very good part of our new mapping implementation idea", "author": "sergiuilie", "createdAt": "2020-01-10T09:36:00Z", "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/model/SyntaxError.java", "diffHunk": "@@ -19,22 +19,15 @@\n import lombok.Builder;\n import lombok.Value;\n \n-import java.util.List;\n-\n @Value\n public class SyntaxError {\n   private final Position position;\n-  private final List<String> ruleStack;\n-  private final int type;\n   private final String suggestion;\n   private final int severity;\n \n   @Builder(builderMethodName = \"syntaxerror\")\n-  public SyntaxError(\n-      Position position, List<String> ruleStack, int type, String suggestion, int severity) {\n+  public SyntaxError(Position position, String suggestion, int severity) {\n     this.position = position;\n-    this.ruleStack = ruleStack;", "originalCommit": "32542bda7aa9f6380a34d16f414910d9cd09b128", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2c978e121611e7a9e431442d056f4814e30ee132", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/2c978e121611e7a9e431442d056f4814e30ee132", "message": "Return rule stack tracing due to it may be useful for debug #23", "committedDate": "2020-01-10T10:09:26Z", "type": "commit"}, {"oid": "063d736a1bff53512a94a265566845771cb0087c", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/063d736a1bff53512a94a265566845771cb0087c", "message": "Rename builder in order to keep naming convention #23", "committedDate": "2020-01-10T10:12:51Z", "type": "commit"}, {"oid": "266d2ee8e662ea1c67eaa8fb9847c7be99723fe0", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/266d2ee8e662ea1c67eaa8fb9847c7be99723fe0", "message": "Remove preprocessor listener usages to make classes functional GH-23\nAn iteration of preparation for introducing dependecy injection for enginge core. Replace providing a listener with returning of result in a pair with found errors.\nThis allows to get rid of the shared state between classes.", "committedDate": "2020-01-10T11:26:36Z", "type": "commit"}, {"oid": "418e68c2c7a11b42fdf930678472f552244b7f69", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/418e68c2c7a11b42fdf930678472f552244b7f69", "message": "Merge branch 'development' into engineering-excellence", "committedDate": "2020-01-10T13:59:30Z", "type": "commit"}, {"oid": "1e6d0e8fd736b7d5a03029aad239efb09c50d777", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/1e6d0e8fd736b7d5a03029aad239efb09c50d777", "message": "Fix merge conflicts after cleaning-up of data classes #23", "committedDate": "2020-01-10T14:11:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI1MzQwNA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/132#discussion_r365253404", "bodyText": "should be final", "author": "sergiuilie", "createdAt": "2020-01-10T14:17:26Z", "path": "com.ca.lsp.cobol/lsp-core-cobol-parser/src/main/java/com/ca/lsp/core/cobol/engine/CobolLanguageEngine.java", "diffHunk": "@@ -45,19 +45,22 @@ public CobolLanguageEngine(CobolSourceFormat sourceFormat) {\n     this.sourceFormat = sourceFormat;\n   }\n \n-  public ProcessingResult run(String in) {\n-    List<SyntaxError> errors = new CopyOnWriteArrayList<>();\n+  public ResultWithErrors<SemanticContext> run(String in) {\n+\n     CobolPreprocessorImpl preprocessor = new CobolPreprocessorImpl();\n-    preprocessor.setListener(new PreprocessorListener(errors));\n \n-    final PreprocessedInput preProcessedInput = preprocessor.process(in, sourceFormat);\n-    final CobolLexer lexer = new CobolLexer(CharStreams.fromString(preProcessedInput.getInput()));\n+    ResultWithErrors<PreprocessedInput> preProcessedInput = preprocessor.process(in, sourceFormat);\n+\n+    CobolLexer lexer =\n+        new CobolLexer(CharStreams.fromString(preProcessedInput.getResult().getInput()));\n+\n+    List<SyntaxError> errors = new ArrayList<>(preProcessedInput.getErrors());\n \n     lexer.removeErrorListeners();\n     lexer.addErrorListener(new VerboseListener(errors));\n \n-    final CommonTokenStream tokens = new CommonTokenStream(lexer);\n-    final CobolParser parser = new CobolParser(tokens);\n+    CommonTokenStream tokens = new CommonTokenStream(lexer);", "originalCommit": "1e6d0e8fd736b7d5a03029aad239efb09c50d777", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}