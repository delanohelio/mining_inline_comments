{"pr_number": 699, "pr_title": "VariableDefinitionDelegate refactoring", "pr_createdAt": "2020-12-09T11:38:27Z", "pr_url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/699", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI0NjA3Mg==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/699#discussion_r539246072", "bodyText": "Maybe, it would be better to use a builder here", "author": "temanbrcom", "createdAt": "2020-12-09T11:57:20Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/visitor/VariableDefinitionDelegate.java", "diffHunk": "@@ -104,71 +104,38 @@ void defineVariable(@NonNull DataDescriptionEntryFormat1Context ctx) {\n     // TODO: 8. redefining one may be group when RE is element\n     // TODO: 9. cannot contain VALUE\n \n-    int number = Integer.parseInt(ctx.LEVEL_NUMBER().getText());\n+    VariableDefinitionContext variableDefinitionContext = new VariableDefinitionContext();\n+    variableDefinitionContext.setNumber(Integer.parseInt(ctx.LEVEL_NUMBER().getText()));\n+    variableDefinitionContext.setName(retrieveName(ctx.entryName()));\n+    variableDefinitionContext.setDefinition(retrieveDefinition(ctx.entryName()));\n+    variableDefinitionContext.setAntlrClass(ctx.getClass());\n+    variableDefinitionContext.setStarting(positions.get(ctx.LEVEL_NUMBER().getSymbol()));\n+    variableDefinitionContext.setPicClauses(ctx.dataPictureClause());\n+    variableDefinitionContext.setOccursClauses(ctx.dataOccursClause());\n+    variableDefinitionContext.setValueClauses(ctx.dataValueClause());", "originalCommit": "639e82812d2ef9393509e45b9cc53ea3167ccb38", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI0NjMyMw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/699#discussion_r539246323", "bodyText": "Missing class javadoc", "author": "temanbrcom", "createdAt": "2020-12-09T11:57:43Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/model/variables/VariableDefinitionContext.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package com.broadcom.lsp.cobol.core.model.variables;\n+\n+import com.broadcom.lsp.cobol.core.CobolParser;\n+import com.broadcom.lsp.cobol.core.model.Locality;\n+import lombok.Data;\n+\n+import java.util.List;\n+", "originalCommit": "639e82812d2ef9393509e45b9cc53ea3167ccb38", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI0NjY3Mg==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/699#discussion_r539246672", "bodyText": "Please, parametrize this Class usage to avoid a code smell", "author": "temanbrcom", "createdAt": "2020-12-09T11:58:18Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/model/variables/VariableDefinitionContext.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package com.broadcom.lsp.cobol.core.model.variables;\n+\n+import com.broadcom.lsp.cobol.core.CobolParser;\n+import com.broadcom.lsp.cobol.core.model.Locality;\n+import lombok.Data;\n+\n+import java.util.List;\n+\n+@Data\n+public class VariableDefinitionContext {\n+  int number;\n+  String name;\n+  Locality definition;\n+  Class antlrClass;", "originalCommit": "639e82812d2ef9393509e45b9cc53ea3167ccb38", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI0OTgxMw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/699#discussion_r539249813", "bodyText": "Nice", "author": "temanbrcom", "createdAt": "2020-12-09T12:03:27Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/visitor/VariableDefinitionDelegate.java", "diffHunk": "@@ -443,4 +335,223 @@ private void addError(String suggestion, Locality locality, ErrorSeverity severi\n     LOG.debug(\n         format(\"Syntax error defined by %s: %s\", getClass().getSimpleName(), error.toString()));\n   }\n+\n+  private void setFillerNameIfNeeded(VariableDefinitionContext variable) {\n+    if (variable.getName() == null) {\n+      variable.setName(OutlineNodeNames.FILLER_NAME);\n+    }\n+  }\n+\n+  private void checkVariableTypeAllowed(VariableDefinitionContext variable) {\n+    if (!section.allowsVariableType(variable.getAntlrClass())) {\n+      addError(messages.getMessage(DEFINITION_NOT_ALLOWED_IN_SECTION), variable.getDefinition());\n+    }\n+  }\n+\n+  private void checkStartingArea(VariableDefinitionContext variable) {\n+    if ((variable.getNumber() == 1 || variable.getNumber() == LEVEL_77)\n+        && variable.getStarting().getRange().getStart().getCharacter() > 10) {\n+      addError(AREA_A_WARNING, variable.getStarting(), WARNING);\n+    }\n+  }\n+\n+  private void closePreviousStructureIfNeeded(VariableDefinitionContext variable) {\n+    closePreviousStructureIfNeeded(variable.getNumber());\n+  }\n+\n+  private void checkTopElementNumber(VariableDefinitionContext variable) {\n+    int number = variable.getNumber();\n+    if (number == 1 || number == LEVEL_66 || number == LEVEL_77) return;\n+    addError(messages.getMessage(NUMBER_NOT_ALLOWED_AT_TOP), variable.getDefinition());\n+  }\n+\n+  private void updateQualifier(VariableDefinitionContext variable) {\n+    if (variable.getContainer() == null) {\n+      variable.setQualifier(retrieveQualifier(variable.getName()));\n+    } else {\n+      variable.setQualifier(variable.getContainer() + \" \" + variable.getName());\n+    }\n+  }\n+\n+  private void checkPictureClauseIsSingle(VariableDefinitionContext variable) {\n+    checkClauseIsSingle(variable.getPicClauses());\n+  }\n+\n+  private void checkOccursClauseIsSingle(VariableDefinitionContext variable) {\n+    checkClauseIsSingle(variable.getOccursClauses());\n+  }\n+\n+  private void checkValueClauseIsSingle(VariableDefinitionContext variable) {\n+    checkClauseIsSingle(variable.getValueClauses());\n+  }\n+\n+  private void checkClauseIsSingle(List<? extends ParserRuleContext> clauses) {\n+    if (clauses.size() > 1) {\n+      addError(\n+          messages.getMessage(TOO_MANY_CLAUSES_MSG, clauses.get(0).getStart().getText()),\n+          retrieveRangeLocality(clauses));\n+    }\n+  }\n+\n+  private void setValueClauseText(VariableDefinitionContext variable) {\n+    String valueClauseText = \"\";\n+    if (!variable.getValueClauses().isEmpty()) {\n+      valueClauseText = variable.getValueClauses().get(0).dataValueClauseLiteral().getText();\n+    }\n+    variable.setValueClauseTest(valueClauseText);\n+  }\n+\n+  private void updateConditionalContainer(VariableDefinitionContext variable) {\n+    ElementItem container = getConditionalContainer();\n+    variable.setContainer(container);\n+    if (container == null) {\n+      addError(messages.getMessage(PREVIOUS_WITHOUT_PIC_FOR_88, variable.getName()), variable.getDefinition());\n+    }\n+  }\n+\n+  private void defineVariable(VariableDefinitionContext variableDefinitionContext,\n+                              Function<VariableDefinitionContext, Variable> ... matchers) {", "originalCommit": "639e82812d2ef9393509e45b9cc53ea3167ccb38", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI1MzYxMw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/699#discussion_r539253613", "bodyText": "Should also set pic and value", "author": "temanbrcom", "createdAt": "2020-12-09T12:09:47Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/visitor/VariableDefinitionDelegate.java", "diffHunk": "@@ -178,30 +145,21 @@ void defineVariable(@NonNull DataDescriptionEntryFormat1Context ctx) {\n    * @param ctx - a {@link DataDescriptionEntryFormat1Level77Context} to retrieve the variable\n    */\n   void defineVariable(@NonNull DataDescriptionEntryFormat1Level77Context ctx) {\n-    String name = retrieveName(ctx.entryName());\n-    Locality definition = retrieveDefinition(ctx.entryName());\n-\n-    checkVariableTypeAllowed(ctx.getClass(), definition);\n-    checkStartingArea(LEVEL_77, positions.get(ctx.LEVEL_NUMBER_77().getSymbol()));\n+    VariableDefinitionContext variableDefinitionContext = new VariableDefinitionContext();\n+    variableDefinitionContext.setNumber(LEVEL_77);\n+    variableDefinitionContext.setName(retrieveName(ctx.entryName()));\n+    variableDefinitionContext.setDefinition(retrieveDefinition(ctx.entryName()));\n+    variableDefinitionContext.setAntlrClass(ctx.getClass());\n+    variableDefinitionContext.setStarting(positions.get(ctx.LEVEL_NUMBER_77().getSymbol()));\n+", "originalCommit": "639e82812d2ef9393509e45b9cc53ea3167ccb38", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI2NTA0Nw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/699#discussion_r539265047", "bodyText": "Those indices should also be stored", "author": "temanbrcom", "createdAt": "2020-12-09T12:27:40Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/visitor/VariableDefinitionDelegate.java", "diffHunk": "@@ -443,4 +335,223 @@ private void addError(String suggestion, Locality locality, ErrorSeverity severi\n     LOG.debug(\n         format(\"Syntax error defined by %s: %s\", getClass().getSimpleName(), error.toString()));\n   }\n+\n+  private void setFillerNameIfNeeded(VariableDefinitionContext variable) {\n+    if (variable.getName() == null) {\n+      variable.setName(OutlineNodeNames.FILLER_NAME);\n+    }\n+  }\n+\n+  private void checkVariableTypeAllowed(VariableDefinitionContext variable) {\n+    if (!section.allowsVariableType(variable.getAntlrClass())) {\n+      addError(messages.getMessage(DEFINITION_NOT_ALLOWED_IN_SECTION), variable.getDefinition());\n+    }\n+  }\n+\n+  private void checkStartingArea(VariableDefinitionContext variable) {\n+    if ((variable.getNumber() == 1 || variable.getNumber() == LEVEL_77)\n+        && variable.getStarting().getRange().getStart().getCharacter() > 10) {\n+      addError(AREA_A_WARNING, variable.getStarting(), WARNING);\n+    }\n+  }\n+\n+  private void closePreviousStructureIfNeeded(VariableDefinitionContext variable) {\n+    closePreviousStructureIfNeeded(variable.getNumber());\n+  }\n+\n+  private void checkTopElementNumber(VariableDefinitionContext variable) {\n+    int number = variable.getNumber();\n+    if (number == 1 || number == LEVEL_66 || number == LEVEL_77) return;\n+    addError(messages.getMessage(NUMBER_NOT_ALLOWED_AT_TOP), variable.getDefinition());\n+  }\n+\n+  private void updateQualifier(VariableDefinitionContext variable) {\n+    if (variable.getContainer() == null) {\n+      variable.setQualifier(retrieveQualifier(variable.getName()));\n+    } else {\n+      variable.setQualifier(variable.getContainer() + \" \" + variable.getName());\n+    }\n+  }\n+\n+  private void checkPictureClauseIsSingle(VariableDefinitionContext variable) {\n+    checkClauseIsSingle(variable.getPicClauses());\n+  }\n+\n+  private void checkOccursClauseIsSingle(VariableDefinitionContext variable) {\n+    checkClauseIsSingle(variable.getOccursClauses());\n+  }\n+\n+  private void checkValueClauseIsSingle(VariableDefinitionContext variable) {\n+    checkClauseIsSingle(variable.getValueClauses());\n+  }\n+\n+  private void checkClauseIsSingle(List<? extends ParserRuleContext> clauses) {\n+    if (clauses.size() > 1) {\n+      addError(\n+          messages.getMessage(TOO_MANY_CLAUSES_MSG, clauses.get(0).getStart().getText()),\n+          retrieveRangeLocality(clauses));\n+    }\n+  }\n+\n+  private void setValueClauseText(VariableDefinitionContext variable) {\n+    String valueClauseText = \"\";\n+    if (!variable.getValueClauses().isEmpty()) {\n+      valueClauseText = variable.getValueClauses().get(0).dataValueClauseLiteral().getText();\n+    }\n+    variable.setValueClauseTest(valueClauseText);\n+  }\n+\n+  private void updateConditionalContainer(VariableDefinitionContext variable) {\n+    ElementItem container = getConditionalContainer();\n+    variable.setContainer(container);\n+    if (container == null) {\n+      addError(messages.getMessage(PREVIOUS_WITHOUT_PIC_FOR_88, variable.getName()), variable.getDefinition());\n+    }\n+  }\n+\n+  private void defineVariable(VariableDefinitionContext variableDefinitionContext,\n+                              Function<VariableDefinitionContext, Variable> ... matchers) {\n+    Arrays.stream(matchers)\n+        .map(matcher -> matcher.apply(variableDefinitionContext))\n+        .filter(Objects::nonNull)\n+        .findFirst()\n+        .ifPresent(variable -> {\n+            // TODO: add check that value does not exceed PIC length\n+            ofNullable(structureStack.peek()).ifPresent(it -> it.addChild(variable));\n+            if (variable instanceof StructuredVariable) {\n+              structureStack.push((StructuredVariable)variable);\n+            }\n+            variables.push(variable);\n+        });\n+  }\n+\n+  private Variable multiTableDataNameMatcher(VariableDefinitionContext variable) {\n+    if (variable.getPicClauses().isEmpty() && !variable.getOccursClauses().isEmpty()) {\n+      MultiTableDataName result = new MultiTableDataName(\n+          variable.getNumber(),\n+          variable.getName(),\n+          variable.getQualifier(),\n+          variable.getDefinition(),\n+          retrieveOccursTimes(variable.getOccursClauses().get(0)),\n+          retrieveIndexItem(variable.getOccursClauses().get(0))", "originalCommit": "639e82812d2ef9393509e45b9cc53ea3167ccb38", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a3bc702163a8425d26ec16dfc27e17baa4f255ad", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/a3bc702163a8425d26ec16dfc27e17baa4f255ad", "message": "refactor: VariableDefinitionDelegate refactoring\n\nSigned-off-by: Anton Grigorev <anton.grigorev@broadcom.com>", "committedDate": "2020-12-09T15:34:38Z", "type": "commit"}, {"oid": "a3bc702163a8425d26ec16dfc27e17baa4f255ad", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/a3bc702163a8425d26ec16dfc27e17baa4f255ad", "message": "refactor: VariableDefinitionDelegate refactoring\n\nSigned-off-by: Anton Grigorev <anton.grigorev@broadcom.com>", "committedDate": "2020-12-09T15:34:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA2NTYyMQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/699#discussion_r540065621", "bodyText": "SonarLint warns about possible heap pollution at this method", "author": "temanbrcom", "createdAt": "2020-12-10T10:46:38Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/visitor/VariableDefinitionDelegate.java", "diffHunk": "@@ -443,4 +344,244 @@ private void addError(String suggestion, Locality locality, ErrorSeverity severi\n     LOG.debug(\n         format(\"Syntax error defined by %s: %s\", getClass().getSimpleName(), error.toString()));\n   }\n+\n+  private void setFillerNameIfNeeded(VariableDefinitionContext variable) {\n+    if (variable.getName() == null) {\n+      variable.setName(OutlineNodeNames.FILLER_NAME);\n+    }\n+  }\n+\n+  private void checkVariableTypeAllowed(VariableDefinitionContext variable) {\n+    if (!section.allowsVariableType(variable.getAntlrClass())) {\n+      addError(messages.getMessage(DEFINITION_NOT_ALLOWED_IN_SECTION), variable.getDefinition());\n+    }\n+  }\n+\n+  private void checkStartingArea(VariableDefinitionContext variable) {\n+    if ((variable.getNumber() == 1 || variable.getNumber() == LEVEL_77)\n+        && variable.getStarting().getRange().getStart().getCharacter() > 10) {\n+      addError(AREA_A_WARNING, variable.getStarting(), WARNING);\n+    }\n+  }\n+\n+  private void closePreviousStructureIfNeeded(VariableDefinitionContext variable) {\n+    closePreviousStructureIfNeeded(variable.getNumber());\n+  }\n+\n+  private void checkTopElementNumber(VariableDefinitionContext variable) {\n+    int number = variable.getNumber();\n+    if (number == 1 || number == LEVEL_66 || number == LEVEL_77) return;\n+    addError(messages.getMessage(NUMBER_NOT_ALLOWED_AT_TOP), variable.getDefinition());\n+  }\n+\n+  private void updateQualifier(VariableDefinitionContext variable) {\n+    if (variable.getContainer() == null) {\n+      variable.setQualifier(retrieveQualifier(variable.getName()));\n+    } else {\n+      variable.setQualifier(variable.getContainer() + \" \" + variable.getName());\n+    }\n+  }\n+\n+  private void checkPictureClauseIsSingle(VariableDefinitionContext variable) {\n+    checkClauseIsSingle(variable.getPicClauses());\n+  }\n+\n+  private void checkOccursClauseIsSingle(VariableDefinitionContext variable) {\n+    checkClauseIsSingle(variable.getOccursClauses());\n+  }\n+\n+  private void checkValueClauseIsSingle(VariableDefinitionContext variable) {\n+    checkClauseIsSingle(variable.getValueClauses());\n+  }\n+\n+  private void checkClauseIsSingle(List<? extends ParserRuleContext> clauses) {\n+    if (clauses.size() > 1) {\n+      addError(\n+          messages.getMessage(TOO_MANY_CLAUSES_MSG, clauses.get(0).getStart().getText()),\n+          retrieveRangeLocality(clauses));\n+    }\n+  }\n+\n+  private void setValueClauseText(VariableDefinitionContext variable) {\n+    String valueClauseText = \"\";\n+    if (!variable.getValueClauses().isEmpty()) {\n+      valueClauseText = variable.getValueClauses().get(0).dataValueClauseLiteral().getText();\n+    }\n+    variable.setValueClauseTest(valueClauseText);\n+  }\n+\n+  private void updateConditionalContainer(VariableDefinitionContext variable) {\n+    ElementItem container = getConditionalContainer();\n+    variable.setContainer(container);\n+    if (container == null) {\n+      addError(messages.getMessage(PREVIOUS_WITHOUT_PIC_FOR_88, variable.getName()), variable.getDefinition());\n+    }\n+  }\n+\n+  private void defineVariable(VariableDefinitionContext variableDefinitionContext,", "originalCommit": "a3bc702163a8425d26ec16dfc27e17baa4f255ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA2NzA1Nw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/699#discussion_r540067057", "bodyText": "May be returned immediately", "author": "temanbrcom", "createdAt": "2020-12-10T10:48:46Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/visitor/VariableDefinitionDelegate.java", "diffHunk": "@@ -443,4 +344,244 @@ private void addError(String suggestion, Locality locality, ErrorSeverity severi\n     LOG.debug(\n         format(\"Syntax error defined by %s: %s\", getClass().getSimpleName(), error.toString()));\n   }\n+\n+  private void setFillerNameIfNeeded(VariableDefinitionContext variable) {\n+    if (variable.getName() == null) {\n+      variable.setName(OutlineNodeNames.FILLER_NAME);\n+    }\n+  }\n+\n+  private void checkVariableTypeAllowed(VariableDefinitionContext variable) {\n+    if (!section.allowsVariableType(variable.getAntlrClass())) {\n+      addError(messages.getMessage(DEFINITION_NOT_ALLOWED_IN_SECTION), variable.getDefinition());\n+    }\n+  }\n+\n+  private void checkStartingArea(VariableDefinitionContext variable) {\n+    if ((variable.getNumber() == 1 || variable.getNumber() == LEVEL_77)\n+        && variable.getStarting().getRange().getStart().getCharacter() > 10) {\n+      addError(AREA_A_WARNING, variable.getStarting(), WARNING);\n+    }\n+  }\n+\n+  private void closePreviousStructureIfNeeded(VariableDefinitionContext variable) {\n+    closePreviousStructureIfNeeded(variable.getNumber());\n+  }\n+\n+  private void checkTopElementNumber(VariableDefinitionContext variable) {\n+    int number = variable.getNumber();\n+    if (number == 1 || number == LEVEL_66 || number == LEVEL_77) return;\n+    addError(messages.getMessage(NUMBER_NOT_ALLOWED_AT_TOP), variable.getDefinition());\n+  }\n+\n+  private void updateQualifier(VariableDefinitionContext variable) {\n+    if (variable.getContainer() == null) {\n+      variable.setQualifier(retrieveQualifier(variable.getName()));\n+    } else {\n+      variable.setQualifier(variable.getContainer() + \" \" + variable.getName());\n+    }\n+  }\n+\n+  private void checkPictureClauseIsSingle(VariableDefinitionContext variable) {\n+    checkClauseIsSingle(variable.getPicClauses());\n+  }\n+\n+  private void checkOccursClauseIsSingle(VariableDefinitionContext variable) {\n+    checkClauseIsSingle(variable.getOccursClauses());\n+  }\n+\n+  private void checkValueClauseIsSingle(VariableDefinitionContext variable) {\n+    checkClauseIsSingle(variable.getValueClauses());\n+  }\n+\n+  private void checkClauseIsSingle(List<? extends ParserRuleContext> clauses) {\n+    if (clauses.size() > 1) {\n+      addError(\n+          messages.getMessage(TOO_MANY_CLAUSES_MSG, clauses.get(0).getStart().getText()),\n+          retrieveRangeLocality(clauses));\n+    }\n+  }\n+\n+  private void setValueClauseText(VariableDefinitionContext variable) {\n+    String valueClauseText = \"\";\n+    if (!variable.getValueClauses().isEmpty()) {\n+      valueClauseText = variable.getValueClauses().get(0).dataValueClauseLiteral().getText();\n+    }\n+    variable.setValueClauseTest(valueClauseText);\n+  }\n+\n+  private void updateConditionalContainer(VariableDefinitionContext variable) {\n+    ElementItem container = getConditionalContainer();\n+    variable.setContainer(container);\n+    if (container == null) {\n+      addError(messages.getMessage(PREVIOUS_WITHOUT_PIC_FOR_88, variable.getName()), variable.getDefinition());\n+    }\n+  }\n+\n+  private void defineVariable(VariableDefinitionContext variableDefinitionContext,\n+                              Function<VariableDefinitionContext, Variable> ... matchers) {\n+    Arrays.stream(matchers)\n+        .map(matcher -> matcher.apply(variableDefinitionContext))\n+        .filter(Objects::nonNull)\n+        .findFirst()\n+        .ifPresent(variable -> {\n+            // TODO: add check that value does not exceed PIC length\n+            ofNullable(structureStack.peek()).ifPresent(it -> it.addChild(variable));\n+            if (variable instanceof StructuredVariable) {\n+              structureStack.push((StructuredVariable)variable);\n+            }\n+            variables.push(variable);\n+        });\n+  }\n+\n+  private Variable multiTableDataNameMatcher(VariableDefinitionContext variable) {\n+    if (variable.getPicClauses().isEmpty() && !variable.getOccursClauses().isEmpty()) {\n+      MultiTableDataName result = new MultiTableDataName(\n+          variable.getNumber(),\n+          variable.getName(),\n+          variable.getQualifier(),\n+          variable.getDefinition(),\n+          retrieveOccursTimes(variable.getOccursClauses().get(0)),\n+          retrieveIndexItem(variable.getOccursClauses().get(0))\n+      );\n+      result.getIndexes().forEach(variables::push);\n+      return result;\n+    }\n+    return null;\n+  }\n+\n+  private Variable groupItemMatcher(VariableDefinitionContext variable) {\n+    if (variable.getPicClauses().isEmpty() && variable.getOccursClauses().isEmpty()) {\n+      GroupItem result = new GroupItem(", "originalCommit": "a3bc702163a8425d26ec16dfc27e17baa4f255ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA2NzE0Mg==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/699#discussion_r540067142", "bodyText": "May be returned immediately", "author": "temanbrcom", "createdAt": "2020-12-10T10:48:54Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/visitor/VariableDefinitionDelegate.java", "diffHunk": "@@ -443,4 +344,244 @@ private void addError(String suggestion, Locality locality, ErrorSeverity severi\n     LOG.debug(\n         format(\"Syntax error defined by %s: %s\", getClass().getSimpleName(), error.toString()));\n   }\n+\n+  private void setFillerNameIfNeeded(VariableDefinitionContext variable) {\n+    if (variable.getName() == null) {\n+      variable.setName(OutlineNodeNames.FILLER_NAME);\n+    }\n+  }\n+\n+  private void checkVariableTypeAllowed(VariableDefinitionContext variable) {\n+    if (!section.allowsVariableType(variable.getAntlrClass())) {\n+      addError(messages.getMessage(DEFINITION_NOT_ALLOWED_IN_SECTION), variable.getDefinition());\n+    }\n+  }\n+\n+  private void checkStartingArea(VariableDefinitionContext variable) {\n+    if ((variable.getNumber() == 1 || variable.getNumber() == LEVEL_77)\n+        && variable.getStarting().getRange().getStart().getCharacter() > 10) {\n+      addError(AREA_A_WARNING, variable.getStarting(), WARNING);\n+    }\n+  }\n+\n+  private void closePreviousStructureIfNeeded(VariableDefinitionContext variable) {\n+    closePreviousStructureIfNeeded(variable.getNumber());\n+  }\n+\n+  private void checkTopElementNumber(VariableDefinitionContext variable) {\n+    int number = variable.getNumber();\n+    if (number == 1 || number == LEVEL_66 || number == LEVEL_77) return;\n+    addError(messages.getMessage(NUMBER_NOT_ALLOWED_AT_TOP), variable.getDefinition());\n+  }\n+\n+  private void updateQualifier(VariableDefinitionContext variable) {\n+    if (variable.getContainer() == null) {\n+      variable.setQualifier(retrieveQualifier(variable.getName()));\n+    } else {\n+      variable.setQualifier(variable.getContainer() + \" \" + variable.getName());\n+    }\n+  }\n+\n+  private void checkPictureClauseIsSingle(VariableDefinitionContext variable) {\n+    checkClauseIsSingle(variable.getPicClauses());\n+  }\n+\n+  private void checkOccursClauseIsSingle(VariableDefinitionContext variable) {\n+    checkClauseIsSingle(variable.getOccursClauses());\n+  }\n+\n+  private void checkValueClauseIsSingle(VariableDefinitionContext variable) {\n+    checkClauseIsSingle(variable.getValueClauses());\n+  }\n+\n+  private void checkClauseIsSingle(List<? extends ParserRuleContext> clauses) {\n+    if (clauses.size() > 1) {\n+      addError(\n+          messages.getMessage(TOO_MANY_CLAUSES_MSG, clauses.get(0).getStart().getText()),\n+          retrieveRangeLocality(clauses));\n+    }\n+  }\n+\n+  private void setValueClauseText(VariableDefinitionContext variable) {\n+    String valueClauseText = \"\";\n+    if (!variable.getValueClauses().isEmpty()) {\n+      valueClauseText = variable.getValueClauses().get(0).dataValueClauseLiteral().getText();\n+    }\n+    variable.setValueClauseTest(valueClauseText);\n+  }\n+\n+  private void updateConditionalContainer(VariableDefinitionContext variable) {\n+    ElementItem container = getConditionalContainer();\n+    variable.setContainer(container);\n+    if (container == null) {\n+      addError(messages.getMessage(PREVIOUS_WITHOUT_PIC_FOR_88, variable.getName()), variable.getDefinition());\n+    }\n+  }\n+\n+  private void defineVariable(VariableDefinitionContext variableDefinitionContext,\n+                              Function<VariableDefinitionContext, Variable> ... matchers) {\n+    Arrays.stream(matchers)\n+        .map(matcher -> matcher.apply(variableDefinitionContext))\n+        .filter(Objects::nonNull)\n+        .findFirst()\n+        .ifPresent(variable -> {\n+            // TODO: add check that value does not exceed PIC length\n+            ofNullable(structureStack.peek()).ifPresent(it -> it.addChild(variable));\n+            if (variable instanceof StructuredVariable) {\n+              structureStack.push((StructuredVariable)variable);\n+            }\n+            variables.push(variable);\n+        });\n+  }\n+\n+  private Variable multiTableDataNameMatcher(VariableDefinitionContext variable) {\n+    if (variable.getPicClauses().isEmpty() && !variable.getOccursClauses().isEmpty()) {\n+      MultiTableDataName result = new MultiTableDataName(\n+          variable.getNumber(),\n+          variable.getName(),\n+          variable.getQualifier(),\n+          variable.getDefinition(),\n+          retrieveOccursTimes(variable.getOccursClauses().get(0)),\n+          retrieveIndexItem(variable.getOccursClauses().get(0))\n+      );\n+      result.getIndexes().forEach(variables::push);\n+      return result;\n+    }\n+    return null;\n+  }\n+\n+  private Variable groupItemMatcher(VariableDefinitionContext variable) {\n+    if (variable.getPicClauses().isEmpty() && variable.getOccursClauses().isEmpty()) {\n+      GroupItem result = new GroupItem(\n+          variable.getNumber(),\n+          variable.getName(),\n+          variable.getQualifier(),\n+          variable.getDefinition()\n+      );\n+      return result;\n+    }\n+    return null;\n+  }\n+\n+  private Variable tableDataNameMatcher(VariableDefinitionContext variable) {\n+    if (!variable.getPicClauses().isEmpty() && !variable.getOccursClauses().isEmpty()) {\n+      TableDataName tableDataName = new TableDataName(\n+          variable.getName(),\n+          variable.getQualifier(),\n+          variable.getDefinition(),\n+          retrievePicText(variable.getPicClauses().get(0)),\n+          variable.getValueClauseTest(),\n+          retrieveOccursTimes(variable.getOccursClauses().get(0)),\n+          retrieveIndexItem(variable.getOccursClauses().get(0))\n+      );\n+      tableDataName.getIndexes().forEach(variables::push);\n+      return tableDataName;\n+    }\n+    return null;\n+  }\n+\n+  private Variable elementItemMatcher(VariableDefinitionContext variable) {\n+    if (!variable.getPicClauses().isEmpty() && variable.getOccursClauses().isEmpty()) {\n+      ElementItem result = new ElementItem(", "originalCommit": "a3bc702163a8425d26ec16dfc27e17baa4f255ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}