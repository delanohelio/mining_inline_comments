{"pr_number": 221, "pr_title": "187 consume settings in Copybook Service", "pr_createdAt": "2020-03-02T10:21:24Z", "pr_url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/221", "timeline": [{"oid": "9d87a7159301e80677c940deb62693cedcd0adce", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/9d87a7159301e80677c940deb62693cedcd0adce", "message": "Get rid of URI in favor of NIO Path + simplify the logic to create folder structure for test purpose", "committedDate": "2020-02-07T17:03:18Z", "type": "commit"}, {"oid": "ff6063227202c637a3a4f4bdb9d4ad47b4dc1e7f", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/ff6063227202c637a3a4f4bdb9d4ad47b4dc1e7f", "message": "address ambiguity between URI and Path, FileSystemServiceImpl will manage only Path after normalize the URI retrivied from the workspaceFolder", "committedDate": "2020-02-11T08:52:18Z", "type": "commit"}, {"oid": "cab98218c989783a43d64c8f5b9fed0455608752", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/cab98218c989783a43d64c8f5b9fed0455608752", "message": "Define unit test that cover the scenario of search copybooks in a set of paths (defined by the profile and datasetname)", "committedDate": "2020-02-12T10:09:48Z", "type": "commit"}, {"oid": "d81e5e59883829b6b1331e3af2f5012286bfbb97", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/d81e5e59883829b6b1331e3af2f5012286bfbb97", "message": "Merge remote-tracking branch 'remotes/origin/development' into 187_ConsumeSettingsInFSS", "committedDate": "2020-02-12T10:10:16Z", "type": "commit"}, {"oid": "e1b263733d26ef176bfb0426b209aa6448987fc0", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/e1b263733d26ef176bfb0426b209aa6448987fc0", "message": "Simplify logic and reorganize method definitions in the FileSystemServiceImpl", "committedDate": "2020-02-12T11:01:18Z", "type": "commit"}, {"oid": "27d3c3877afada4603b28f3c8494a3505cec7d12", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/27d3c3877afada4603b28f3c8494a3505cec7d12", "message": "found better names for test methods", "committedDate": "2020-02-13T10:28:36Z", "type": "commit"}, {"oid": "41d7604da6ec9dc5c994434d3162438494fa5081", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/41d7604da6ec9dc5c994434d3162438494fa5081", "message": "Merge remote-tracking branch 'remotes/origin/development' into 187_ConsumeSettingsInFSS", "committedDate": "2020-02-19T15:26:35Z", "type": "commit"}, {"oid": "89ba08c503a41545c10920894663e23df90d3bfa", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/89ba08c503a41545c10920894663e23df90d3bfa", "message": "Implement search copybook with settings retrivied at initialize - WIP: fix tests + databus subscription event", "committedDate": "2020-02-20T17:20:55Z", "type": "commit"}, {"oid": "44cc16530112cefbece0e731f8c3a5c4dd43aac8", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/44cc16530112cefbece0e731f8c3a5c4dd43aac8", "message": "Merge remote-tracking branch 'remotes/origin/development' into 187_ConsumeSettingsInFSS", "committedDate": "2020-02-24T09:06:37Z", "type": "commit"}, {"oid": "fbf5b7e1e3563ebe6327dd61a158bd266e735f7a", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/fbf5b7e1e3563ebe6327dd61a158bd266e735f7a", "message": "Introduce ConfigurationSettingsStorable in unit test to retrieve user setting configuration for profile name and dataset list", "committedDate": "2020-02-25T09:46:53Z", "type": "commit"}, {"oid": "494a67825185553d12ba4129f8ae71e23b0fd862", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/494a67825185553d12ba4129f8ae71e23b0fd862", "message": "Merge remote-tracking branch 'remotes/origin/development' into 187_ConsumeSettingsInFSS\n\n# Conflicts:\n#\tcom.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/FileSystemServiceImpl.java", "committedDate": "2020-02-25T09:58:32Z", "type": "commit"}, {"oid": "b6755477f7e8bc736aaa2006927fe49ec0721e0e", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/b6755477f7e8bc736aaa2006927fe49ec0721e0e", "message": "Update test removing unnecessary methods and unused variables", "committedDate": "2020-02-25T10:42:10Z", "type": "commit"}, {"oid": "ba27794b9dd9da020f125f2c7c7e0c176e47655b", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/ba27794b9dd9da020f125f2c7c7e0c176e47655b", "message": "add support for observer callback in the SettingsProvider", "committedDate": "2020-02-25T12:06:50Z", "type": "commit"}, {"oid": "9048d3d9fab7f5f85add4bce0e56687b6564daa5", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/9048d3d9fab7f5f85add4bce0e56687b6564daa5", "message": "consume new settings in FileSystemServiceImpl", "committedDate": "2020-02-26T15:33:49Z", "type": "commit"}, {"oid": "3b812410b25d049faad5e3c2e0398084e9847aff", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/3b812410b25d049faad5e3c2e0398084e9847aff", "message": "Merge remote-tracking branch 'remotes/origin/development' into 187_ConsumeSettingsInFSS\n\n# Conflicts:\n#\tcom.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/FileSystemServiceImpl.java", "committedDate": "2020-02-26T15:37:01Z", "type": "commit"}, {"oid": "7db20ac473380978811677459b0788c1e2636ec7", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/7db20ac473380978811677459b0788c1e2636ec7", "message": "fix issue with cache invalidation after didChange config. and modify copybook content API to search it only in configured folders", "committedDate": "2020-02-26T16:47:23Z", "type": "commit"}, {"oid": "fd48c51c44d0669190cc39b2608095640e468a68", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/fd48c51c44d0669190cc39b2608095640e468a68", "message": "Simplify unit test logic", "committedDate": "2020-02-27T09:34:49Z", "type": "commit"}, {"oid": "3fe26bb5cd2203601fa3bef2665ca9c1e1966931", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/3fe26bb5cd2203601fa3bef2665ca9c1e1966931", "message": "Address issue #218 + extract dependency file unit test to a proper unit test class", "committedDate": "2020-02-27T16:28:33Z", "type": "commit"}, {"oid": "b4e21b113da92c49eee7cb07fec2b257ab001e82", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/b4e21b113da92c49eee7cb07fec2b257ab001e82", "message": "Fix issue with initial configuration (no copybook no settings) that shown message to the user", "committedDate": "2020-03-02T08:09:35Z", "type": "commit"}, {"oid": "2c0f104176fa7872b17ef6b17c1c93e7b5c9d3b7", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/2c0f104176fa7872b17ef6b17c1c93e7b5c9d3b7", "message": "Fix miss header and minor smells", "committedDate": "2020-03-03T07:41:11Z", "type": "commit"}, {"oid": "29b9698cb6ab1de6a3dcc9a7dc3a781648bdffa1", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/29b9698cb6ab1de6a3dcc9a7dc3a781648bdffa1", "message": "Update changelog", "committedDate": "2020-03-03T07:47:54Z", "type": "commit"}, {"oid": "e94273440a8e4f79bd9373bf00f67fa601b95b94", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/e94273440a8e4f79bd9373bf00f67fa601b95b94", "message": "Fix miss header and minor smells", "committedDate": "2020-03-03T08:44:14Z", "type": "commit"}, {"oid": "6cc883cabccd61a01707ef7953ed9bdf4d9fa45f", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/6cc883cabccd61a01707ef7953ed9bdf4d9fa45f", "message": "Fix issue: dependency folder should be created in any case when the copybook analysis is activated", "committedDate": "2020-03-03T10:35:35Z", "type": "commit"}, {"oid": "e19030402caccc137d8c7b16e2f0d7ca705ced7d", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/e19030402caccc137d8c7b16e2f0d7ca705ced7d", "message": "Add unit test to verify that in any condition with/without copybooks and settings config the dependency file method is triggered from the copybookService", "committedDate": "2020-03-03T10:49:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk2MjgxNg==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/221#discussion_r386962816", "bodyText": "A setter should be used here", "author": "temanbrcom", "createdAt": "2020-03-03T11:36:37Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/CobolWorkspaceServiceImpl.java", "diffHunk": "@@ -96,6 +101,12 @@ public CobolWorkspaceServiceImpl(DataBusBroker dataBus, Provider<LanguageClient>\n   @Override\n   public void didChangeConfiguration(DidChangeConfigurationParams params) {\n     try {\n+\n+      // invalidate cache to avoid false positive\n+      dataBus.invalidateCache();\n+\n+      // provide the databus to the settings provider\n+      SettingsProvider.builder().databus(dataBus);", "originalCommit": "e19030402caccc137d8c7b16e2f0d7ca705ced7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk2NDAzNQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/221#discussion_r386964035", "bodyText": "Due to https://github.com/google/guice/wiki/Injections injecting a final field is a bad practice", "author": "temanbrcom", "createdAt": "2020-03-03T11:39:14Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/CopybookServiceImpl.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ *\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ * Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.ca.lsp.cobol.service;\n+\n+import com.broadcom.lsp.domain.cobol.databus.api.DataBusBroker;\n+import com.broadcom.lsp.domain.cobol.event.model.DataEventType;\n+import com.broadcom.lsp.domain.cobol.event.model.FetchedCopybookEvent;\n+import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n+import com.ca.lsp.cobol.model.ConfigurationSettingsStorable;\n+import com.ca.lsp.cobol.service.delegates.communications.Communications;\n+import com.ca.lsp.cobol.service.delegates.dependency.CopybookDependencyService;\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+import com.google.inject.Singleton;\n+import lombok.extern.slf4j.Slf4j;\n+import org.eclipse.lsp4j.WorkspaceFolder;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.FileVisitOption;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static com.ca.lsp.cobol.service.delegates.communications.CopybookMessageInfo.*;\n+import static com.ca.lsp.cobol.service.utils.FileSystemUtil.*;\n+\n+@Singleton\n+@Slf4j\n+public class CopybookServiceImpl implements CopybookService {\n+  private static final String COPYBOOK_FOLDER_NAME = \".copybooks\";\n+  private final DataBusBroker dataBus;", "originalCommit": "e19030402caccc137d8c7b16e2f0d7ca705ced7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk5NjQ3OQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/221#discussion_r386996479", "bodyText": "Please, use a direct instantiation instead of DI", "author": "temanbrcom", "createdAt": "2020-03-03T12:47:58Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/DependencyServiceTest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ *\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ * Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.ca.lsp.cobol.service;\n+\n+import com.broadcom.lsp.cdi.LangServerCtx;\n+import com.ca.lsp.cobol.FileSystemConfiguration;\n+import com.ca.lsp.cobol.service.delegates.dependency.CopybookDependencyService;\n+import com.ca.lsp.cobol.service.delegates.dependency.CopybookDependencyServiceImpl;\n+import lombok.extern.slf4j.Slf4j;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.assertEquals;\n+\n+/** This class represent all the unit test for the copybook dependency managament service */\n+@Slf4j\n+public class DependencyServiceTest extends FileSystemConfiguration {\n+  private CopybookDependencyServiceImpl dependencyService =\n+      (CopybookDependencyServiceImpl)\n+          LangServerCtx.getInjector().getInstance(CopybookDependencyService.class);", "originalCommit": "e19030402caccc137d8c7b16e2f0d7ca705ced7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk5NzI4MA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/221#discussion_r386997280", "bodyText": "There is no need to use DI here, it is better to create an object with new", "author": "temanbrcom", "createdAt": "2020-03-03T12:49:30Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/CopybookServiceTest.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ *\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ * Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.ca.lsp.cobol.service;\n+\n+import com.broadcom.lsp.cdi.LangServerCtx;\n+import com.broadcom.lsp.domain.cobol.event.api.EventObserver;\n+import com.broadcom.lsp.domain.cobol.event.model.FetchedCopybookEvent;\n+import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n+import com.ca.lsp.cobol.FileSystemConfiguration;\n+import lombok.extern.slf4j.Slf4j;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.nio.file.Path;\n+import java.util.Collections;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+@Slf4j\n+public class CopybookServiceTest extends FileSystemConfiguration\n+    implements EventObserver<RequiredCopybookEvent> {\n+\n+  private CopybookServiceImpl copybookService =\n+      (CopybookServiceImpl) LangServerCtx.getInjector().getInstance(CopybookService.class);", "originalCommit": "e19030402caccc137d8c7b16e2f0d7ca705ced7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk5ODg5Nw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/221#discussion_r386998897", "bodyText": "Please, mock it instead of instantiation", "author": "temanbrcom", "createdAt": "2020-03-03T12:52:43Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/CopybookServiceE2ETest.java", "diffHunk": "@@ -19,55 +19,54 @@\n import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n import com.broadcom.lsp.domain.cobol.event.model.UnknownEvent;\n import com.ca.lsp.cobol.FileSystemConfiguration;\n+import com.ca.lsp.cobol.model.ConfigurationSettingsStorable;\n+import com.ca.lsp.cobol.service.delegates.communications.Communications;\n+import com.ca.lsp.cobol.service.delegates.dependency.CopybookDependencyService;\n+import com.ca.lsp.cobol.service.delegates.dependency.CopybookDependencyServiceImpl;\n+import com.google.inject.Provider;\n import lombok.extern.slf4j.Slf4j;\n import org.awaitility.Duration;\n import org.awaitility.core.ConditionTimeoutException;\n-import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n \n-import java.io.File;\n-import java.io.IOException;\n import java.nio.file.Files;\n-import java.nio.file.Path;\n import java.nio.file.Paths;\n-import java.util.Comparator;\n+import java.util.Arrays;\n \n import static org.awaitility.Awaitility.await;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n \n /**\n  * This class contains all the unit test that perform the publish/subscribe acrivities for generate\n  * the dependency file.\n  */\n @Slf4j\n-public class FileSystemE2ETest extends FileSystemConfiguration {\n+public class CopybookServiceE2ETest extends FileSystemConfiguration {\n   public static final String CPY_NAME_WITHOUT_EXT = \"copy2\";\n-  DataBusBroker broker =\n+  private DataBusBroker broker =\n       (DefaultDataBusBroker) LangServerCtx.getInjector().getInstance(DataBusBroker.class);", "originalCommit": "e19030402caccc137d8c7b16e2f0d7ca705ced7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEwOTM5MA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/221#discussion_r387109390", "bodyText": "I will check it - not sure at 100% I can mock it", "author": "zacanbrcom", "createdAt": "2020-03-03T15:45:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk5ODg5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUzMzMyNA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/221#discussion_r387533324", "bodyText": "Right now you start up the context, but you don't tear it down. It would be better to call Guice directly to avoid dirty state here, e.g.\n  private final DataBusBroker databus =\n      Guice.createInjector(new DatabusModule()).getInstance(DataBusBroker .class);", "author": "temanbrcom", "createdAt": "2020-03-04T09:12:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk5ODg5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUzNTQxNg==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/221#discussion_r387535416", "bodyText": "\ud83d\udc4d", "author": "zacanbrcom", "createdAt": "2020-03-04T09:16:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk5ODg5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk5OTM5NQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/221#discussion_r386999395", "bodyText": "I think everything here should be private", "author": "temanbrcom", "createdAt": "2020-03-03T12:53:38Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/CopybookSearchWithoutConfigTest.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ *\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ * Broadcom, Inc. - initial API and implementation\n+ *\n+ *\n+ */\n+\n+package com.ca.lsp.cobol.service;\n+\n+import com.broadcom.lsp.domain.cobol.databus.api.DataBusBroker;\n+import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n+import com.ca.lsp.cobol.model.ConfigurationSettingsStorable;\n+import com.ca.lsp.cobol.service.delegates.communications.Communications;\n+import com.ca.lsp.cobol.service.delegates.dependency.CopybookDependencyService;\n+import com.google.inject.Provider;\n+import org.eclipse.lsp4j.WorkspaceFolder;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import static com.ca.lsp.cobol.service.delegates.communications.CopybookMessageInfo.*;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.*;\n+\n+/**\n+ * This class cover the scenario when user try to use the server functionalities without an\n+ * appropriate filesystem configuration under the hood. Example of unit test defined here are\n+ * related to the search copybook without a copybook folder or without settings, and write/update\n+ * dependency file without a dependency folder.\n+ */\n+public class CopybookSearchWithoutConfigTest {\n+  public static final String CPY_NAME = \"ACPYTEST\";\n+  DataBusBroker dataBusBroker = mock(DataBusBroker.class);\n+  Provider settingsProvider = mock(Provider.class);\n+  CopybookDependencyService dependencyService = mock(CopybookDependencyService.class);\n+  Communications communications = mock(Communications.class);\n+  private CopybookServiceImpl copybookService;\n+  private static final String DOCUMENT_URI = \"file:///C:/Users/test/Test.cbl\";\n+  Path workspaceFolderPath = null;\n+  RequiredCopybookEvent requiredCopybookEvent;", "originalCommit": "e19030402caccc137d8c7b16e2f0d7ca705ced7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAwMDI0MA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/221#discussion_r387000240", "bodyText": "Please, replace it with logging", "author": "temanbrcom", "createdAt": "2020-03-03T12:55:32Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/FileSystemConfiguration.java", "diffHunk": "@@ -13,163 +13,215 @@\n  */\n package com.ca.lsp.cobol;\n \n+import com.ca.lsp.cobol.model.ConfigurationSettingsStorable;\n+import com.ca.lsp.cobol.service.providers.SettingsProvider;\n+import com.google.inject.Provider;\n import lombok.extern.slf4j.Slf4j;\n import org.eclipse.lsp4j.WorkspaceFolder;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.mockito.Mockito;\n \n-import javax.annotation.Nonnull;\n-import java.io.BufferedOutputStream;\n import java.io.File;\n-import java.io.FileOutputStream;\n import java.io.IOException;\n-import java.net.URI;\n-import java.nio.file.FileSystems;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n+import java.nio.file.*;\n+import java.util.Arrays;\n import java.util.Collections;\n+import java.util.Comparator;\n import java.util.List;\n-import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import static org.mockito.Mockito.when;\n \n /**\n  * This class provide support methods for FileSystemService and doesn't test anything. More in\n- * detail create the workspace folder in the user tmp folder with some copybooks there\n+ * detail create the workspace folder in the user tmp folder with some copybooks and dependency file\n+ * there.\n  */\n @Slf4j\n public class FileSystemConfiguration extends ConfigurableTest {\n   protected static final String COPYBOOK_CONTENT =\n       \"000230 77  REPORT-STATUS           PIC 99 VALUE ZERO.\";\n   protected static final String WORKSPACE_FOLDER_NAME = \"test\";\n-  protected static final String WS_FOLDER_NAME = \"WORKSPACE\";\n-  protected static final String CPYB_FOLDER_NAME = \"COPYBOOKS\";\n-  protected static final String CPYB_INNER_NAME = \"INNER\";\n   protected static final String CPY_OUTER_NAME_ONLY2 = \"copy2\";\n   protected static final String EMPTY_COPYBOOK_NAME = \" \";\n-  public static final String DOCUMENT_URI = \"file:///C:/Users/test/Test.cbl\";\n-  protected static final String CPY_OUTER_FILE_NAME_WITH_EXT = \"copy.cpy\";\n-  protected static final String CPY_OUTER_ANOTHER_FILE_NAME_WITH_EXT = \"copy3.out\";\n+  protected static final String DOCUMENT_URI = \"file:///C:/Users/test/Test.cbl\";\n   protected static final String CPY_INNER_FILE_NAME_WITH_EXT = \"copy2.cpy\";\n   protected static final String DEP_FILE_COST_NAME = \"SOMEPROG\";\n-  private URI workspaceFolderPath = null;\n-  private Path innerCopybooksPath = null;\n-  protected Path workspacePath = createPathOfName(WS_FOLDER_NAME, Optional.empty());\n+  protected static final String PROFILE_NAME = \"PRF11\";\n+  protected static final String DSNAME_1 = \"HLQLF01.DSNAME1\";\n+  protected static final String DSNAME_2 = \"HLQLF01.DSNAME2\";\n+  protected static final String DEP_EXTENSION = \".dep\";\n+  protected static final String COPYBOOK_NOT_PRESENT = \"ANTHRCPY\";\n+\n+  protected Path workspaceFolder = null;\n+  protected Path copybooksFolderPath = null;\n+  protected Path depenencyFileFolderPath = null;\n \n+  protected Provider<SettingsProvider> configurationSettingsProvider = Mockito.mock(Provider.class);\n+\n+  // this field represent the predefined setting used for test purposes\n+  protected ConfigurationSettingsStorable configurationSettingsStorable = null;\n   /*\n-  STRUCTURE FOLDER USED FOR TEST PURPOSES\n-  ***************************************\n-  TEMP/\n-  \u2514\u2500\u2500 WORKSPACE/\n-      \u251c\u2500\u2500 .cobdeps\n-      \u2502   \u2514\u2500\u2500 SOMEPROG.dep\n-      \u2514\u2500\u2500\u2500 COPYBOOKS\n-          \u251c\u2500\u2500 INNER/\n-          \u2502   \u2514\u2500\u2500 copy2.cpy\n-          \u251c\u2500\u2500 copy3.out\n-          \u2514\u2500\u2500 copy.cpy\n-  ***************************************\n+    STRUCTURE FOLDER USED FOR TEST PURPOSES\n+    ***************************************\n+    TEMP/\n+    \u2514\u2500\u2500 WORKSPACE/\n+        \u251c\u2500\u2500 .cobdeps\n+        \u2502   \u251c\u2500\u2500 TEST.dep\n+        \u2502   \u2514\u2500\u2500 SOMEPROG.dep\n+        \u2514\u2500\u2500\u2500 .copybooks\n+            \u251c\u2500\u2500 PROFILE_NAME/\n+            \u2502   \u251c\u2500\u2500 HLQ.DSN.NAME1/\n+            \u2502   \u2502   \u2514\u2500\u2500 copybook.cpy\n+            \u2502   \u2514\u2500\u2500 HLQ.DSN.NAME2/\n+            \u2502       \u2514\u2500\u2500 copybook.cpy\n+            \u2514\u2500\u2500 copy2.cpy\n+    ***************************************\n   */\n \n-  protected List<WorkspaceFolder> initWorkspaceFolderList() {\n-    Path copybooksPath = createPathOfName(CPYB_FOLDER_NAME, Optional.of(workspacePath));\n-    Path cpyFilePath = createPathOfName(CPY_OUTER_FILE_NAME_WITH_EXT, Optional.of(copybooksPath));\n-    Path anotherCpyFilePath =\n-        createPathOfName(CPY_OUTER_ANOTHER_FILE_NAME_WITH_EXT, Optional.of(copybooksPath));\n-    innerCopybooksPath = createPathOfName(CPYB_INNER_NAME, Optional.of(copybooksPath));\n+  /**\n+   * This method initialize the filesystem and the settings configuration that will be used to test\n+   * the filesystem service capabilities using the physical filesystem\n+   */\n+  @Before\n+  public void buildFS() {\n+    intializeSettings();\n+    createWorkspaceFolderStructure();\n+    createCopybookStructure();\n+    createDependencyFileStructure();\n+\n+    // populate copybook folder and dependency file with some content\n+    createCopybookFiles();\n+    createDependencyFile();\n+  }\n+\n+  @After\n+  public void cleanupTempFolder() {\n+    try {\n+      Files.walk(getWorkspaceFolderPath())\n+          .sorted(Comparator.reverseOrder())\n+          .map(Path::toFile)\n+          .forEach(File::delete);\n+    } catch (IOException e) {\n+      e.printStackTrace();", "originalCommit": "e19030402caccc137d8c7b16e2f0d7ca705ced7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAwNDkzMA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/221#discussion_r387004930", "bodyText": "Why is it protected?", "author": "temanbrcom", "createdAt": "2020-03-03T13:04:38Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/CopybookServiceImpl.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ *\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ * Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.ca.lsp.cobol.service;\n+\n+import com.broadcom.lsp.domain.cobol.databus.api.DataBusBroker;\n+import com.broadcom.lsp.domain.cobol.event.model.DataEventType;\n+import com.broadcom.lsp.domain.cobol.event.model.FetchedCopybookEvent;\n+import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n+import com.ca.lsp.cobol.model.ConfigurationSettingsStorable;\n+import com.ca.lsp.cobol.service.delegates.communications.Communications;\n+import com.ca.lsp.cobol.service.delegates.dependency.CopybookDependencyService;\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+import com.google.inject.Singleton;\n+import lombok.extern.slf4j.Slf4j;\n+import org.eclipse.lsp4j.WorkspaceFolder;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.FileVisitOption;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static com.ca.lsp.cobol.service.delegates.communications.CopybookMessageInfo.*;\n+import static com.ca.lsp.cobol.service.utils.FileSystemUtil.*;\n+\n+@Singleton\n+@Slf4j\n+public class CopybookServiceImpl implements CopybookService {\n+  private static final String COPYBOOK_FOLDER_NAME = \".copybooks\";\n+  private final DataBusBroker dataBus;\n+  private List<WorkspaceFolder> workspaceFolders;\n+  private CopybookDependencyService dependencyService;\n+  private final Provider<ConfigurationSettingsStorable> configurationSettingsStorableProvider;\n+  private Communications communications;\n+\n+  @Inject\n+  public CopybookServiceImpl(\n+      DataBusBroker dataBus,\n+      Provider<ConfigurationSettingsStorable> configurationSettingsStorableProvider,\n+      CopybookDependencyService dependencyService,\n+      Communications communications) {\n+    this.dataBus = dataBus;\n+    this.configurationSettingsStorableProvider = configurationSettingsStorableProvider;\n+    this.dependencyService = dependencyService;\n+    this.communications = communications;\n+\n+    dataBus.subscribe(DataEventType.REQUIRED_COPYBOOK_EVENT, this);\n+  }\n+\n+  /**\n+   * Store the informations about the workspace folder defined by the client IDE\n+   *\n+   * @param workspaceFolders list of workspace folders sent by the client to the server\n+   */\n+  @Override\n+  public void setWorkspaceFolders(List<WorkspaceFolder> workspaceFolders) {\n+    this.workspaceFolders = workspaceFolders;\n+  }\n+\n+  /**\n+   * @param uriForFileName of copybook found under workspace folder\n+   * @return content of the file as String content\n+   */\n+  @Nullable\n+  String retrieveContentByPath(Path uriForFileName) {\n+    String content = null;\n+    try (Stream<String> stream = Files.lines(uriForFileName)) {\n+      content = stream.reduce((s1, s2) -> s1 + \"\\r\\n\" + s2).orElse(\"\");\n+    } catch (IOException e) {\n+      log.error(e.getMessage());\n+    }\n+    return content;\n+  }\n+\n+  /**\n+   * From a given copybook name (without file extension) this method will return the URI of the file\n+   * - if exists applying a deep search in the copybook folder. No filtered folders where to specify\n+   * the search are defined.\n+   *\n+   * @param fileName (i.e. COPYTEST)\n+   * @return NIO Path of file (i.e. C:/Users/test/AppData/Local/Temp/WORKSPACE/COPYTEST.cpy) or null\n+   *     if not found. This case should be covered by an appropriate diagnostic message using the\n+   *     Communication service delegate object.\n+   */\n+  @Override\n+  public Path findCopybook(String fileName) {\n+    return getWorkspaceFoldersAsPathList().stream()\n+        .map(it -> applySearch(fileName, getCopybookFolder(it)))\n+        .filter(Objects::nonNull)\n+        .findAny()\n+        .orElse(null);\n+  }\n+\n+  /**\n+   * This method is used to search for a copybook against a given configuration of datasets that\n+   * represent the sub-path of the copyooks folder\n+   *\n+   * @param filename copybook name\n+   * @return The path of the existent copybook or null if not found\n+   */\n+  @Override\n+  public Path findCopybook(String filename, String profile, List<String> datasetList) {\n+    return retrievePathOrNull(filename, generatePathListFromSettings(profile, datasetList));\n+  }\n+\n+  private Path retrievePathOrNull(String filename, List<Path> datasetPathList) {\n+    return datasetPathList.stream()\n+        .map(it -> applySearch(filename, it))\n+        .filter(Objects::nonNull)\n+        .findAny()\n+        .orElse(null);\n+  }\n+\n+  private List<Path> generatePathListFromSettings(String profile, List<String> datasetList) {\n+    // can happen here that copybooks or internal structure is null\n+    return datasetList.stream()\n+        .map(\n+            it ->\n+                Paths.get(\n+                    getCopybookFolder(getWorkspaceFoldersAsPathList().get(0))\n+                        + filesystemSeparator()\n+                        + profile\n+                        + filesystemSeparator()\n+                        + it))\n+        .filter(Objects::nonNull)\n+        .collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * @param fileName copybook name\n+   * @param targetFolderPath physical path of workspace where to search for the copybook\n+   * @return Path of the found copybook in the target folder.\n+   */\n+  protected Path applySearch(String fileName, Path targetFolderPath) {", "originalCommit": "e19030402caccc137d8c7b16e2f0d7ca705ced7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAwNzAyNA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/221#discussion_r387007024", "bodyText": "Why do you use a provider for provider? Injecting SettingsProvider is enough here", "author": "temanbrcom", "createdAt": "2020-03-03T13:08:57Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/MyLanguageServerImpl.java", "diffHunk": "@@ -64,19 +64,19 @@\n \n   private TextDocumentService textService;\n   private CobolWorkspaceService workspaceService;\n-  private FileSystemService fileSystemService;\n+  private CopybookService copybookService;\n   private Provider<LanguageClient> clientProvider;\n-  private Provider<ConfigurationSettingsStorable> settingsProvider;\n+  private Provider<SettingsProvider> settingsProvider;\n \n   @Inject\n   MyLanguageServerImpl(\n-      FileSystemService fileSystemService,\n+      CopybookService copybookService,\n       TextDocumentService textService,\n       CobolWorkspaceService workspaceService,\n       Provider<LanguageClient> clientProvider,\n-      Provider<ConfigurationSettingsStorable> settingsProvider) {\n+      Provider<SettingsProvider> settingsProvider) {", "originalCommit": "e19030402caccc137d8c7b16e2f0d7ca705ced7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAwOTg4Mw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/221#discussion_r387009883", "bodyText": "Why do you compare copybookName with a whitespace?", "author": "temanbrcom", "createdAt": "2020-03-03T13:14:41Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/delegates/dependency/CopybookDependencyServiceImpl.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ *\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ * Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.ca.lsp.cobol.service.delegates.dependency;\n+\n+import com.ca.lsp.cobol.service.CopybookServiceImpl;\n+import com.google.common.annotations.Beta;\n+import com.google.inject.Singleton;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.io.FilenameUtils;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+\n+import static com.ca.lsp.cobol.service.utils.FileSystemUtil.*;\n+\n+/** This class is responsible for everything is related with the copybook dependency manangement */\n+@Slf4j\n+@Singleton\n+public class CopybookDependencyServiceImpl implements CopybookDependencyService {\n+  private static final String COBDEPS = \".cobdeps\";\n+  private static final String DEP_EXTENSION = \".dep\";\n+  @Getter private List<Path> workspaceFolderPaths;\n+\n+  /**\n+   * This method write the copybook name sent by the {@link CopybookServiceImpl} into the dependency\n+   * file.\n+   *\n+   * @param requiredCopybookName copybook name that should be written in the dependency file\n+   * @param documentUri extract the name of the cobol file from the URI\n+   */\n+  @Beta\n+  @Override\n+  public void addCopybookInDepFile(String requiredCopybookName, String documentUri) {\n+    String cobolFileName = getCobolFileNameFromUri(documentUri);\n+    Path dependencyFolder = createDependencyFileFolder();\n+    Path dependencyFile = retrieveDependencyFile(dependencyFolder, cobolFileName);\n+\n+    if (!isFileExists(dependencyFile)) {\n+      generateDependencyFile(cobolFileName);\n+    }\n+    // check why dependency file path is sometimes null\n+    updateDependencyList(dependencyFile, requiredCopybookName);\n+  }\n+\n+  /**\n+   * This method update an already defined dependency file with a new copybook content\n+   *\n+   * @param dependencyFilePath reference to the dependency file\n+   * @param copybookName the copybook name that will be written in the dependency file\n+   */\n+  @Override\n+  public void updateDependencyList(Path dependencyFilePath, String copybookName) {\n+    if (dependencyFilePath != null) {\n+      List<String> lines = getContentFromDependencyFile(dependencyFilePath);\n+      if (lines != null && !lines.contains(copybookName) && !\" \".equals(copybookName)) {", "originalCommit": "e19030402caccc137d8c7b16e2f0d7ca705ced7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAxMjcyOQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/221#discussion_r387012729", "bodyText": "To keep the naming convention, it is better to call this class \"FileSystemUtils\"", "author": "temanbrcom", "createdAt": "2020-03-03T13:20:01Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/utils/FileSystemUtil.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ */\n+package com.ca.lsp.cobol.service.utils;\n+\n+import com.ca.lsp.cobol.service.CopybookServiceImpl;\n+import com.ca.lsp.cobol.service.delegates.dependency.CopybookDependencyServiceImpl;\n+import lombok.experimental.UtilityClass;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.io.FilenameUtils;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * This is an utility class that provide filesystem related methods consumed by the classes that\n+ * rely on the filesystem implementation as {@link CopybookServiceImpl} and {@link\n+ * CopybookDependencyServiceImpl}\n+ */\n+@Slf4j\n+@UtilityClass\n+public class FileSystemUtil {", "originalCommit": "e19030402caccc137d8c7b16e2f0d7ca705ced7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAxMzkxNA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/221#discussion_r387013914", "bodyText": "The method name is syntactically incorrect, it would better to call it something like \"checkFileHasValidExtension\"", "author": "temanbrcom", "createdAt": "2020-03-03T13:21:58Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/utils/FileSystemUtil.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ */\n+package com.ca.lsp.cobol.service.utils;\n+\n+import com.ca.lsp.cobol.service.CopybookServiceImpl;\n+import com.ca.lsp.cobol.service.delegates.dependency.CopybookDependencyServiceImpl;\n+import lombok.experimental.UtilityClass;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.io.FilenameUtils;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * This is an utility class that provide filesystem related methods consumed by the classes that\n+ * rely on the filesystem implementation as {@link CopybookServiceImpl} and {@link\n+ * CopybookDependencyServiceImpl}\n+ */\n+@Slf4j\n+@UtilityClass\n+public class FileSystemUtil {\n+  private final List<String> ALLOWED_EXTENSIONS = Arrays.asList(\"cpy\", \"cbl\", \"cobol\", \"cob\");\n+\n+  /** @return the representation os based of the FS separator */\n+  public static String filesystemSeparator() {\n+    return FileSystems.getDefault().getSeparator();\n+  }\n+\n+  /**\n+   * @param pathFile NIO path of the file to check\n+   * @return true if the path represent a valid file, false otherwise\n+   */\n+  public static boolean isFileExists(Path pathFile) {\n+    return pathFile != null && pathFile.toFile().exists();\n+  }\n+\n+  /**\n+   * @param targetPath NIO path of the target file where to write\n+   * @param contents the content to write\n+   */\n+  public static void writeOnFile(Path targetPath, String contents) {\n+    try {\n+      Files.write(targetPath, (contents + \"\\n\").getBytes(), StandardOpenOption.APPEND);\n+    } catch (IOException e) {\n+      log.error(e.getMessage());\n+    }\n+  }\n+\n+  /**\n+   * From a given file this routine analyze if the file is not a directory and have a valid\n+   * ALLOWED_EXTENSIONS\n+   *\n+   * @param currentFile file analyzed during the scan of a folder\n+   * @param requiredName the name of the file to match\n+   * @return true if all the condition are met, false otherwise\n+   */\n+  public boolean isValidFileFound(File currentFile, String requiredName) {\n+    return currentFile.isFile()\n+        && !currentFile.isDirectory()\n+        && currentFile.getName().contains(\".\")\n+        && FilenameUtils.getBaseName(currentFile.getName()).equalsIgnoreCase(requiredName)\n+        && haveFileValidExtension(currentFile.getAbsoluteFile().toString().toLowerCase());\n+  }\n+\n+  /**\n+   * Verify that the file extension is one of the ALLOWED_EXTENSIONS defined.\n+   *\n+   * @param fullPath file full path with extension\n+   * @return true if the file have a valid extension false otherwise\n+   */\n+  public boolean haveFileValidExtension(String fullPath) {", "originalCommit": "e19030402caccc137d8c7b16e2f0d7ca705ced7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUxNjM3Mg==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/221#discussion_r387516372", "bodyText": "I disagree, following the naming convention \"isXXX\" or \"have/hasXXX\" are generally adopted for static true/false checks. I don't see reason to rename it", "author": "zacanbrcom", "createdAt": "2020-03-04T08:38:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAxMzkxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAxNDQ4Mw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/221#discussion_r387014483", "bodyText": "The method name is syntactically incorrect, it would better to call it something like \"checkFileExists\"", "author": "temanbrcom", "createdAt": "2020-03-03T13:22:58Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/utils/FileSystemUtil.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ */\n+package com.ca.lsp.cobol.service.utils;\n+\n+import com.ca.lsp.cobol.service.CopybookServiceImpl;\n+import com.ca.lsp.cobol.service.delegates.dependency.CopybookDependencyServiceImpl;\n+import lombok.experimental.UtilityClass;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.io.FilenameUtils;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * This is an utility class that provide filesystem related methods consumed by the classes that\n+ * rely on the filesystem implementation as {@link CopybookServiceImpl} and {@link\n+ * CopybookDependencyServiceImpl}\n+ */\n+@Slf4j\n+@UtilityClass\n+public class FileSystemUtil {\n+  private final List<String> ALLOWED_EXTENSIONS = Arrays.asList(\"cpy\", \"cbl\", \"cobol\", \"cob\");\n+\n+  /** @return the representation os based of the FS separator */\n+  public static String filesystemSeparator() {\n+    return FileSystems.getDefault().getSeparator();\n+  }\n+\n+  /**\n+   * @param pathFile NIO path of the file to check\n+   * @return true if the path represent a valid file, false otherwise\n+   */\n+  public static boolean isFileExists(Path pathFile) {", "originalCommit": "e19030402caccc137d8c7b16e2f0d7ca705ced7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUxNjc0Ng==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/221#discussion_r387516746", "bodyText": "I disagree, following the naming convention \"isXXX\" or \"have/hasXXX\" are generally adopted for static true/false checks. I don't see reason to rename it", "author": "zacanbrcom", "createdAt": "2020-03-04T08:39:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAxNDQ4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAxNjUyMw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/221#discussion_r387016523", "bodyText": "By purpose of data consistency, it is better to keep this class immutable and remove the builder. If there is a default value required, it is better to create a special static method and return an empty value there.", "author": "temanbrcom", "createdAt": "2020-03-03T13:26:35Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/model/ConfigurationSettingsStorable.java", "diffHunk": "@@ -14,13 +14,23 @@\n \n package com.ca.lsp.cobol.model;\n \n-import lombok.Value;\n+import lombok.Builder;\n+import lombok.Data;\n \n import java.util.List;\n \n-@Value\n+/**\n+ * This class act as a DTO to store the settings information provided by the user and required to\n+ * search copybooks on MF and in the copybook folder.\n+ */\n+@Data", "originalCommit": "e19030402caccc137d8c7b16e2f0d7ca705ced7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAxODM0Ng==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/221#discussion_r387018346", "bodyText": "If it is a SIngleton, Builder is not applicable here.", "author": "temanbrcom", "createdAt": "2020-03-03T13:29:54Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/providers/SettingsProvider.java", "diffHunk": "@@ -14,23 +14,91 @@\n \n package com.ca.lsp.cobol.service.providers;\n \n+import com.broadcom.lsp.domain.cobol.databus.api.DataBusBroker;\n+import com.broadcom.lsp.domain.cobol.event.api.EventObserver;\n+import com.broadcom.lsp.domain.cobol.event.model.DataEventType;\n+import com.broadcom.lsp.domain.cobol.event.model.FetchedSettingsEvent;\n import com.ca.lsp.cobol.model.ConfigurationSettingsStorable;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n import com.google.inject.Provider;\n import com.google.inject.Singleton;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+\n import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n+import java.lang.reflect.Type;\n \n+/**\n+ * This class is resposible to keep the settings configuration provided by the user in the setting\n+ * storage system and that will be consumed by the {@link\n+ * com.ca.lsp.cobol.service.CopybookServiceImpl}\n+ */\n @Singleton\n-public class SettingsProvider implements Provider<ConfigurationSettingsStorable> {\n+@Slf4j\n+public class SettingsProvider\n+    implements Provider<ConfigurationSettingsStorable>, EventObserver<FetchedSettingsEvent> {\n   private ConfigurationSettingsStorable configurationSettingsStorable;\n+  @Getter private DataBusBroker databus;\n \n-  public void set(@Nonnull ConfigurationSettingsStorable configurationSettingsStorable) {\n+  public SettingsProvider() {}\n+\n+  @Builder", "originalCommit": "e19030402caccc137d8c7b16e2f0d7ca705ced7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAxODY1Nw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/221#discussion_r387018657", "bodyText": "This should be injected in the constructor", "author": "temanbrcom", "createdAt": "2020-03-03T13:30:30Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/providers/SettingsProvider.java", "diffHunk": "@@ -14,23 +14,91 @@\n \n package com.ca.lsp.cobol.service.providers;\n \n+import com.broadcom.lsp.domain.cobol.databus.api.DataBusBroker;\n+import com.broadcom.lsp.domain.cobol.event.api.EventObserver;\n+import com.broadcom.lsp.domain.cobol.event.model.DataEventType;\n+import com.broadcom.lsp.domain.cobol.event.model.FetchedSettingsEvent;\n import com.ca.lsp.cobol.model.ConfigurationSettingsStorable;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n import com.google.inject.Provider;\n import com.google.inject.Singleton;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+\n import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n+import java.lang.reflect.Type;\n \n+/**\n+ * This class is resposible to keep the settings configuration provided by the user in the setting\n+ * storage system and that will be consumed by the {@link\n+ * com.ca.lsp.cobol.service.CopybookServiceImpl}\n+ */\n @Singleton\n-public class SettingsProvider implements Provider<ConfigurationSettingsStorable> {\n+@Slf4j\n+public class SettingsProvider\n+    implements Provider<ConfigurationSettingsStorable>, EventObserver<FetchedSettingsEvent> {\n   private ConfigurationSettingsStorable configurationSettingsStorable;\n+  @Getter private DataBusBroker databus;\n \n-  public void set(@Nonnull ConfigurationSettingsStorable configurationSettingsStorable) {\n+  public SettingsProvider() {}\n+\n+  @Builder\n+  public SettingsProvider(DataBusBroker databus) {\n+    this.databus = databus;\n+    this.databus.subscribe(DataEventType.FETCHED_SETTINGS_EVENT, this);\n+  }\n+\n+  public void set(@Nullable ConfigurationSettingsStorable configurationSettingsStorable) {\n     this.configurationSettingsStorable = configurationSettingsStorable;\n   }\n \n+  /**\n+   * The method invoked by a provider return the object that represent the user settings config.\n+   *\n+   * @return a {@link ConfigurationSettingsStorable} fullfilled with the user settings or an empty\n+   *     one if not present\n+   */\n   @Override\n   @Nullable\n   public ConfigurationSettingsStorable get() {\n-    return this.configurationSettingsStorable;\n+\n+    if (configurationSettingsStorable != null) {\n+      return deepCopy(configurationSettingsStorable);\n+    } else {\n+      return ConfigurationSettingsStorable.builder().build();\n+    }\n+  }\n+\n+  /** @param databus the channel used for receive message about {@link FetchedSettingsEvent} */\n+  @Inject\n+  public void setDatabus(@Nonnull DataBusBroker databus) {\n+    this.databus = databus;\n+    this.databus.subscribe(DataEventType.FETCHED_SETTINGS_EVENT, this);\n+  }", "originalCommit": "e19030402caccc137d8c7b16e2f0d7ca705ced7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAxODk3NQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/221#discussion_r387018975", "bodyText": "Please, replace it with a static call for the default value.", "author": "temanbrcom", "createdAt": "2020-03-03T13:31:03Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/providers/SettingsProvider.java", "diffHunk": "@@ -14,23 +14,91 @@\n \n package com.ca.lsp.cobol.service.providers;\n \n+import com.broadcom.lsp.domain.cobol.databus.api.DataBusBroker;\n+import com.broadcom.lsp.domain.cobol.event.api.EventObserver;\n+import com.broadcom.lsp.domain.cobol.event.model.DataEventType;\n+import com.broadcom.lsp.domain.cobol.event.model.FetchedSettingsEvent;\n import com.ca.lsp.cobol.model.ConfigurationSettingsStorable;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n import com.google.inject.Provider;\n import com.google.inject.Singleton;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+\n import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n+import java.lang.reflect.Type;\n \n+/**\n+ * This class is resposible to keep the settings configuration provided by the user in the setting\n+ * storage system and that will be consumed by the {@link\n+ * com.ca.lsp.cobol.service.CopybookServiceImpl}\n+ */\n @Singleton\n-public class SettingsProvider implements Provider<ConfigurationSettingsStorable> {\n+@Slf4j\n+public class SettingsProvider\n+    implements Provider<ConfigurationSettingsStorable>, EventObserver<FetchedSettingsEvent> {\n   private ConfigurationSettingsStorable configurationSettingsStorable;\n+  @Getter private DataBusBroker databus;\n \n-  public void set(@Nonnull ConfigurationSettingsStorable configurationSettingsStorable) {\n+  public SettingsProvider() {}\n+\n+  @Builder\n+  public SettingsProvider(DataBusBroker databus) {\n+    this.databus = databus;\n+    this.databus.subscribe(DataEventType.FETCHED_SETTINGS_EVENT, this);\n+  }\n+\n+  public void set(@Nullable ConfigurationSettingsStorable configurationSettingsStorable) {\n     this.configurationSettingsStorable = configurationSettingsStorable;\n   }\n \n+  /**\n+   * The method invoked by a provider return the object that represent the user settings config.\n+   *\n+   * @return a {@link ConfigurationSettingsStorable} fullfilled with the user settings or an empty\n+   *     one if not present\n+   */\n   @Override\n   @Nullable\n   public ConfigurationSettingsStorable get() {\n-    return this.configurationSettingsStorable;\n+\n+    if (configurationSettingsStorable != null) {\n+      return deepCopy(configurationSettingsStorable);\n+    } else {\n+      return ConfigurationSettingsStorable.builder().build();", "originalCommit": "e19030402caccc137d8c7b16e2f0d7ca705ced7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAyMDc0Ng==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/221#discussion_r387020746", "bodyText": "Please, wrap it with Collections.immutableList", "author": "temanbrcom", "createdAt": "2020-03-03T13:34:12Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/model/ConfigurationSettingsStorable.java", "diffHunk": "@@ -14,13 +14,23 @@\n \n package com.ca.lsp.cobol.model;\n \n-import lombok.Value;\n+import lombok.Builder;\n+import lombok.Data;\n \n import java.util.List;\n \n-@Value\n+/**\n+ * This class act as a DTO to store the settings information provided by the user and required to\n+ * search copybooks on MF and in the copybook folder.\n+ */\n+@Data\n public class ConfigurationSettingsStorable {\n-\n   private Object profiles;\n   private List<String> paths;\n+\n+  @Builder\n+  public ConfigurationSettingsStorable(Object profiles, List<String> paths) {\n+    this.profiles = profiles;\n+    this.paths = paths;", "originalCommit": "e19030402caccc137d8c7b16e2f0d7ca705ced7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAyMTQ0NQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/221#discussion_r387021445", "bodyText": "Technically, it is not deep copying due to you build a new instance using the same objects", "author": "temanbrcom", "createdAt": "2020-03-03T13:35:31Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/providers/SettingsProvider.java", "diffHunk": "@@ -14,23 +14,91 @@\n \n package com.ca.lsp.cobol.service.providers;\n \n+import com.broadcom.lsp.domain.cobol.databus.api.DataBusBroker;\n+import com.broadcom.lsp.domain.cobol.event.api.EventObserver;\n+import com.broadcom.lsp.domain.cobol.event.model.DataEventType;\n+import com.broadcom.lsp.domain.cobol.event.model.FetchedSettingsEvent;\n import com.ca.lsp.cobol.model.ConfigurationSettingsStorable;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n import com.google.inject.Provider;\n import com.google.inject.Singleton;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+\n import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n+import java.lang.reflect.Type;\n \n+/**\n+ * This class is resposible to keep the settings configuration provided by the user in the setting\n+ * storage system and that will be consumed by the {@link\n+ * com.ca.lsp.cobol.service.CopybookServiceImpl}\n+ */\n @Singleton\n-public class SettingsProvider implements Provider<ConfigurationSettingsStorable> {\n+@Slf4j\n+public class SettingsProvider\n+    implements Provider<ConfigurationSettingsStorable>, EventObserver<FetchedSettingsEvent> {\n   private ConfigurationSettingsStorable configurationSettingsStorable;\n+  @Getter private DataBusBroker databus;\n \n-  public void set(@Nonnull ConfigurationSettingsStorable configurationSettingsStorable) {\n+  public SettingsProvider() {}\n+\n+  @Builder\n+  public SettingsProvider(DataBusBroker databus) {\n+    this.databus = databus;\n+    this.databus.subscribe(DataEventType.FETCHED_SETTINGS_EVENT, this);\n+  }\n+\n+  public void set(@Nullable ConfigurationSettingsStorable configurationSettingsStorable) {\n     this.configurationSettingsStorable = configurationSettingsStorable;\n   }\n \n+  /**\n+   * The method invoked by a provider return the object that represent the user settings config.\n+   *\n+   * @return a {@link ConfigurationSettingsStorable} fullfilled with the user settings or an empty\n+   *     one if not present\n+   */\n   @Override\n   @Nullable\n   public ConfigurationSettingsStorable get() {\n-    return this.configurationSettingsStorable;\n+\n+    if (configurationSettingsStorable != null) {\n+      return deepCopy(configurationSettingsStorable);\n+    } else {\n+      return ConfigurationSettingsStorable.builder().build();\n+    }\n+  }\n+\n+  /** @param databus the channel used for receive message about {@link FetchedSettingsEvent} */\n+  @Inject\n+  public void setDatabus(@Nonnull DataBusBroker databus) {\n+    this.databus = databus;\n+    this.databus.subscribe(DataEventType.FETCHED_SETTINGS_EVENT, this);\n+  }\n+\n+  private static ConfigurationSettingsStorable deepCopy(", "originalCommit": "e19030402caccc137d8c7b16e2f0d7ca705ced7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3NjE0NQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/221#discussion_r387076145", "bodyText": "in order to get rid of multiple if statements you may return the message into the method which makes the check (i.e copybookFolderNotDefined() )", "author": "sergiuilie", "createdAt": "2020-03-03T14:57:54Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/CopybookServiceImpl.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ *\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ * Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.ca.lsp.cobol.service;\n+\n+import com.broadcom.lsp.domain.cobol.databus.api.DataBusBroker;\n+import com.broadcom.lsp.domain.cobol.event.model.DataEventType;\n+import com.broadcom.lsp.domain.cobol.event.model.FetchedCopybookEvent;\n+import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n+import com.ca.lsp.cobol.model.ConfigurationSettingsStorable;\n+import com.ca.lsp.cobol.service.delegates.communications.Communications;\n+import com.ca.lsp.cobol.service.delegates.dependency.CopybookDependencyService;\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+import com.google.inject.Singleton;\n+import lombok.extern.slf4j.Slf4j;\n+import org.eclipse.lsp4j.WorkspaceFolder;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.FileVisitOption;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static com.ca.lsp.cobol.service.delegates.communications.CopybookMessageInfo.*;\n+import static com.ca.lsp.cobol.service.utils.FileSystemUtil.*;\n+\n+@Singleton\n+@Slf4j\n+public class CopybookServiceImpl implements CopybookService {\n+  private static final String COPYBOOK_FOLDER_NAME = \".copybooks\";\n+  private final DataBusBroker dataBus;\n+  private List<WorkspaceFolder> workspaceFolders;\n+  private CopybookDependencyService dependencyService;\n+  private final Provider<ConfigurationSettingsStorable> configurationSettingsStorableProvider;\n+  private Communications communications;\n+\n+  @Inject\n+  public CopybookServiceImpl(\n+      DataBusBroker dataBus,\n+      Provider<ConfigurationSettingsStorable> configurationSettingsStorableProvider,\n+      CopybookDependencyService dependencyService,\n+      Communications communications) {\n+    this.dataBus = dataBus;\n+    this.configurationSettingsStorableProvider = configurationSettingsStorableProvider;\n+    this.dependencyService = dependencyService;\n+    this.communications = communications;\n+\n+    dataBus.subscribe(DataEventType.REQUIRED_COPYBOOK_EVENT, this);\n+  }\n+\n+  /**\n+   * Store the informations about the workspace folder defined by the client IDE\n+   *\n+   * @param workspaceFolders list of workspace folders sent by the client to the server\n+   */\n+  @Override\n+  public void setWorkspaceFolders(List<WorkspaceFolder> workspaceFolders) {\n+    this.workspaceFolders = workspaceFolders;\n+  }\n+\n+  /**\n+   * @param uriForFileName of copybook found under workspace folder\n+   * @return content of the file as String content\n+   */\n+  @Nullable\n+  String retrieveContentByPath(Path uriForFileName) {\n+    String content = null;\n+    try (Stream<String> stream = Files.lines(uriForFileName)) {\n+      content = stream.reduce((s1, s2) -> s1 + \"\\r\\n\" + s2).orElse(\"\");\n+    } catch (IOException e) {\n+      log.error(e.getMessage());\n+    }\n+    return content;\n+  }\n+\n+  /**\n+   * From a given copybook name (without file extension) this method will return the URI of the file\n+   * - if exists applying a deep search in the copybook folder. No filtered folders where to specify\n+   * the search are defined.\n+   *\n+   * @param fileName (i.e. COPYTEST)\n+   * @return NIO Path of file (i.e. C:/Users/test/AppData/Local/Temp/WORKSPACE/COPYTEST.cpy) or null\n+   *     if not found. This case should be covered by an appropriate diagnostic message using the\n+   *     Communication service delegate object.\n+   */\n+  @Override\n+  public Path findCopybook(String fileName) {\n+    return getWorkspaceFoldersAsPathList().stream()\n+        .map(it -> applySearch(fileName, getCopybookFolder(it)))\n+        .filter(Objects::nonNull)\n+        .findAny()\n+        .orElse(null);\n+  }\n+\n+  /**\n+   * This method is used to search for a copybook against a given configuration of datasets that\n+   * represent the sub-path of the copyooks folder\n+   *\n+   * @param filename copybook name\n+   * @return The path of the existent copybook or null if not found\n+   */\n+  @Override\n+  public Path findCopybook(String filename, String profile, List<String> datasetList) {\n+    return retrievePathOrNull(filename, generatePathListFromSettings(profile, datasetList));\n+  }\n+\n+  private Path retrievePathOrNull(String filename, List<Path> datasetPathList) {\n+    return datasetPathList.stream()\n+        .map(it -> applySearch(filename, it))\n+        .filter(Objects::nonNull)\n+        .findAny()\n+        .orElse(null);\n+  }\n+\n+  private List<Path> generatePathListFromSettings(String profile, List<String> datasetList) {\n+    // can happen here that copybooks or internal structure is null\n+    return datasetList.stream()\n+        .map(\n+            it ->\n+                Paths.get(\n+                    getCopybookFolder(getWorkspaceFoldersAsPathList().get(0))\n+                        + filesystemSeparator()\n+                        + profile\n+                        + filesystemSeparator()\n+                        + it))\n+        .filter(Objects::nonNull)\n+        .collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * @param fileName copybook name\n+   * @param targetFolderPath physical path of workspace where to search for the copybook\n+   * @return Path of the found copybook in the target folder.\n+   */\n+  protected Path applySearch(String fileName, Path targetFolderPath) {\n+    try (Stream<Path> pathStream =\n+        Files.find(\n+            targetFolderPath,\n+            100,\n+            (path, basicFileAttributes) -> isValidFileFound(path.toFile(), fileName),\n+            FileVisitOption.FOLLOW_LINKS)) {\n+      return pathStream.findAny().orElse(null);\n+    } catch (IOException e) {\n+      log.error(e.getMessage());\n+      return null;\n+    }\n+  }\n+\n+  private List<Path> getWorkspaceFoldersAsPathList() {\n+    return Optional.ofNullable(getWorkspaceFolders())\n+        .map(Collection::stream)\n+        .orElseGet(Stream::empty)\n+        .filter(Objects::nonNull)\n+        .map(this::resolveUriPath)\n+        .collect(Collectors.toList());\n+  }\n+\n+  private List<WorkspaceFolder> getWorkspaceFolders() {\n+    return workspaceFolders;\n+  }\n+\n+  /**\n+   * Normalize the URI defined in the workspace to get a NIO Path object that will be used within\n+   * the FileSystemService, example: [input:\n+   * file:///C:/Users/test/AppData/Local/Temp/WORKSPACE/COPYTEST.cpy] --> [output:\n+   * C:/Users/test/AppData/Local/Temp/WORKSPACE/COPYTEST.cpy]\n+   *\n+   * @param it workspace folder\n+   * @return the Path of the workspace folder\n+   * @throws IllegalArgumentException if the URI of WorkspaceFolder is not valid\n+   */\n+  private Path resolveUriPath(WorkspaceFolder it) {\n+    try {\n+      return Paths.get(new URI(it.getUri()).normalize());\n+    } catch (URISyntaxException e) {\n+      log.error(e.getMessage());\n+    }\n+    return null;\n+  }\n+\n+  private Path getCopybookFolder(Path workspaceFolderPath) {\n+    return Paths.get(workspaceFolderPath + filesystemSeparator() + COPYBOOK_FOLDER_NAME);\n+  }\n+\n+  /** create the task and pass it to the executor service */\n+  @Override\n+  public void observerCallback(RequiredCopybookEvent event) {\n+    String requiredCopybookName = event.getName();\n+    String content = null;\n+    Path path;\n+\n+    // if the document is in DID_OPEN mode is possible write on dependency file..\n+    if (isFileInDidOpen(event)) {\n+      dependencyService.setWorkspaceFolderPaths(getWorkspaceFoldersAsPathList());\n+      dependencyService.addCopybookInDepFile(requiredCopybookName, event.getDocumentUri());\n+    }\n+\n+    if (missingInformationToSearchCopybooks()) {\n+      selectAppropriateMessageForCommunication();\n+\n+      dataBus.postData(\n+          FetchedCopybookEvent.builder()\n+              .name(requiredCopybookName)\n+              .uri(null)\n+              .content(null)\n+              .build());\n+      return;\n+    }\n+\n+    ConfigurationSettingsStorable configurationSettingsStorable =\n+        configurationSettingsStorableProvider.get();\n+\n+    // search the copybook against the target folders provided from the settings\n+    path =\n+        findCopybook(\n+            requiredCopybookName,\n+            (String) configurationSettingsStorable.getProfiles(),\n+            configurationSettingsStorable.getPaths());\n+\n+    if (isFileExists(path)) {\n+      content = retrieveContentByPath(path);\n+    }\n+\n+    dataBus.postData(\n+        FetchedCopybookEvent.builder()\n+            .name(requiredCopybookName)\n+            .uri(Optional.ofNullable(path).map(Path::toUri).map(URI::toString).orElse(null))\n+            .content(content)\n+            .build());\n+  }\n+\n+  private void selectAppropriateMessageForCommunication() {\n+    if (copybookFolderNotDefined()) {", "originalCommit": "e19030402caccc137d8c7b16e2f0d7ca705ced7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3OTM3NA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/221#discussion_r387079374", "bodyText": "if there was a problem with the JSON then why are you building the settings?", "author": "sergiuilie", "createdAt": "2020-03-03T15:02:27Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/MyLanguageServerImpl.java", "diffHunk": "@@ -122,27 +122,25 @@ public void initialized(@Nullable InitializedParams params) {\n    */\n   void retrieveAndStoreConfiguration() {\n     fetchSettings(LSP_PREFIX.label + \".\" + CPY_MANAGER.label, null)\n-        .thenAccept(\n-            e -> {\n-              JsonObject jsonObject = (JsonObject) e.get(0);\n-              ConfigurationSettingsStorable configurationSettingsStorable =\n-                  parseJsonIfValid(jsonObject);\n-              ((SettingsProvider) settingsProvider).set(configurationSettingsStorable);\n-            });\n+        .thenAccept(e -> getSettingsFromProvider().set(parseJsonIfValid((JsonObject) e.get(0))));\n+  }\n+\n+  private SettingsProvider getSettingsFromProvider() {\n+    return settingsProvider.get();\n   }\n \n   /**\n    * @param jsonObject - the object which comes from the client and contains configuration settings\n-   * @return a custom object of type ConfigurableSettingsStorage if the JSON is valid or null if it\n-   *     is failing the check\n+   * @return a custom object of type ConfigurableSettingsStorable if the JSON is valid or an empty\n+   *     ConfigurableSettingsStorable if it is failing the parsing\n    */\n   private ConfigurationSettingsStorable parseJsonIfValid(JsonObject jsonObject) {\n     Gson gson = new Gson();\n     try {\n       return gson.fromJson(jsonObject, ConfigurationSettingsStorable.class);\n     } catch (JsonSyntaxException e) {\n       log.error(e.getMessage());\n-      return null;\n+      return ConfigurationSettingsStorable.builder().build();", "originalCommit": "e19030402caccc137d8c7b16e2f0d7ca705ced7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEwMzI1MQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/221#discussion_r387103251", "bodyText": "because we need to avoid NPE on Copybook service when I ask the provider to get me the object. I designed a proper logic on CopybookService to check if the configuration are not valid.", "author": "zacanbrcom", "createdAt": "2020-03-03T15:36:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3OTM3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4Mzk3OQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/221#discussion_r387083979", "bodyText": "you may correct the name to retrieve I believe", "author": "sergiuilie", "createdAt": "2020-03-03T15:09:15Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/FileSystemConfiguration.java", "diffHunk": "@@ -13,163 +13,215 @@\n  */\n package com.ca.lsp.cobol;\n \n+import com.ca.lsp.cobol.model.ConfigurationSettingsStorable;\n+import com.ca.lsp.cobol.service.providers.SettingsProvider;\n+import com.google.inject.Provider;\n import lombok.extern.slf4j.Slf4j;\n import org.eclipse.lsp4j.WorkspaceFolder;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.mockito.Mockito;\n \n-import javax.annotation.Nonnull;\n-import java.io.BufferedOutputStream;\n import java.io.File;\n-import java.io.FileOutputStream;\n import java.io.IOException;\n-import java.net.URI;\n-import java.nio.file.FileSystems;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n+import java.nio.file.*;\n+import java.util.Arrays;\n import java.util.Collections;\n+import java.util.Comparator;\n import java.util.List;\n-import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import static org.mockito.Mockito.when;\n \n /**\n  * This class provide support methods for FileSystemService and doesn't test anything. More in\n- * detail create the workspace folder in the user tmp folder with some copybooks there\n+ * detail create the workspace folder in the user tmp folder with some copybooks and dependency file\n+ * there.\n  */\n @Slf4j\n public class FileSystemConfiguration extends ConfigurableTest {\n   protected static final String COPYBOOK_CONTENT =\n       \"000230 77  REPORT-STATUS           PIC 99 VALUE ZERO.\";\n   protected static final String WORKSPACE_FOLDER_NAME = \"test\";\n-  protected static final String WS_FOLDER_NAME = \"WORKSPACE\";\n-  protected static final String CPYB_FOLDER_NAME = \"COPYBOOKS\";\n-  protected static final String CPYB_INNER_NAME = \"INNER\";\n   protected static final String CPY_OUTER_NAME_ONLY2 = \"copy2\";\n   protected static final String EMPTY_COPYBOOK_NAME = \" \";\n-  public static final String DOCUMENT_URI = \"file:///C:/Users/test/Test.cbl\";\n-  protected static final String CPY_OUTER_FILE_NAME_WITH_EXT = \"copy.cpy\";\n-  protected static final String CPY_OUTER_ANOTHER_FILE_NAME_WITH_EXT = \"copy3.out\";\n+  protected static final String DOCUMENT_URI = \"file:///C:/Users/test/Test.cbl\";\n   protected static final String CPY_INNER_FILE_NAME_WITH_EXT = \"copy2.cpy\";\n   protected static final String DEP_FILE_COST_NAME = \"SOMEPROG\";\n-  private URI workspaceFolderPath = null;\n-  private Path innerCopybooksPath = null;\n-  protected Path workspacePath = createPathOfName(WS_FOLDER_NAME, Optional.empty());\n+  protected static final String PROFILE_NAME = \"PRF11\";\n+  protected static final String DSNAME_1 = \"HLQLF01.DSNAME1\";\n+  protected static final String DSNAME_2 = \"HLQLF01.DSNAME2\";\n+  protected static final String DEP_EXTENSION = \".dep\";\n+  protected static final String COPYBOOK_NOT_PRESENT = \"ANTHRCPY\";\n+\n+  protected Path workspaceFolder = null;\n+  protected Path copybooksFolderPath = null;\n+  protected Path depenencyFileFolderPath = null;\n \n+  protected Provider<SettingsProvider> configurationSettingsProvider = Mockito.mock(Provider.class);\n+\n+  // this field represent the predefined setting used for test purposes\n+  protected ConfigurationSettingsStorable configurationSettingsStorable = null;\n   /*\n-  STRUCTURE FOLDER USED FOR TEST PURPOSES\n-  ***************************************\n-  TEMP/\n-  \u2514\u2500\u2500 WORKSPACE/\n-      \u251c\u2500\u2500 .cobdeps\n-      \u2502   \u2514\u2500\u2500 SOMEPROG.dep\n-      \u2514\u2500\u2500\u2500 COPYBOOKS\n-          \u251c\u2500\u2500 INNER/\n-          \u2502   \u2514\u2500\u2500 copy2.cpy\n-          \u251c\u2500\u2500 copy3.out\n-          \u2514\u2500\u2500 copy.cpy\n-  ***************************************\n+    STRUCTURE FOLDER USED FOR TEST PURPOSES\n+    ***************************************\n+    TEMP/\n+    \u2514\u2500\u2500 WORKSPACE/\n+        \u251c\u2500\u2500 .cobdeps\n+        \u2502   \u251c\u2500\u2500 TEST.dep\n+        \u2502   \u2514\u2500\u2500 SOMEPROG.dep\n+        \u2514\u2500\u2500\u2500 .copybooks\n+            \u251c\u2500\u2500 PROFILE_NAME/\n+            \u2502   \u251c\u2500\u2500 HLQ.DSN.NAME1/\n+            \u2502   \u2502   \u2514\u2500\u2500 copybook.cpy\n+            \u2502   \u2514\u2500\u2500 HLQ.DSN.NAME2/\n+            \u2502       \u2514\u2500\u2500 copybook.cpy\n+            \u2514\u2500\u2500 copy2.cpy\n+    ***************************************\n   */\n \n-  protected List<WorkspaceFolder> initWorkspaceFolderList() {\n-    Path copybooksPath = createPathOfName(CPYB_FOLDER_NAME, Optional.of(workspacePath));\n-    Path cpyFilePath = createPathOfName(CPY_OUTER_FILE_NAME_WITH_EXT, Optional.of(copybooksPath));\n-    Path anotherCpyFilePath =\n-        createPathOfName(CPY_OUTER_ANOTHER_FILE_NAME_WITH_EXT, Optional.of(copybooksPath));\n-    innerCopybooksPath = createPathOfName(CPYB_INNER_NAME, Optional.of(copybooksPath));\n+  /**\n+   * This method initialize the filesystem and the settings configuration that will be used to test\n+   * the filesystem service capabilities using the physical filesystem\n+   */\n+  @Before\n+  public void buildFS() {\n+    intializeSettings();\n+    createWorkspaceFolderStructure();\n+    createCopybookStructure();\n+    createDependencyFileStructure();\n+\n+    // populate copybook folder and dependency file with some content\n+    createCopybookFiles();\n+    createDependencyFile();\n+  }\n+\n+  @After\n+  public void cleanupTempFolder() {\n+    try {\n+      Files.walk(getWorkspaceFolderPath())\n+          .sorted(Comparator.reverseOrder())\n+          .map(Path::toFile)\n+          .forEach(File::delete);\n+    } catch (IOException e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * This method define the steps necessary to emulate the json settings provided by the user in the\n+   * settings.json\n+   */\n+  private void intializeSettings() {\n+    SettingsProvider settingsProvider = new SettingsProvider();\n+\n+    configurationSettingsStorable =\n+        new ConfigurationSettingsStorable(PROFILE_NAME, Arrays.asList(DSNAME_1, DSNAME_2));\n \n-    // create two cpy files\n-    createTempDirAndFile(workspacePath, copybooksPath, cpyFilePath, anotherCpyFilePath);\n-    createInnerFolderAndFile(\n-        copybooksPath,\n-        createPathOfName(CPY_INNER_FILE_NAME_WITH_EXT, Optional.of(innerCopybooksPath)));\n+    settingsProvider.set(configurationSettingsStorable);\n+    when(configurationSettingsProvider.get()).thenReturn(settingsProvider);\n+  }\n \n+  protected List<WorkspaceFolder> generateWorkspaceFolder() {\n     WorkspaceFolder workspaceFolder = new WorkspaceFolder();\n     workspaceFolder.setName(WORKSPACE_FOLDER_NAME);\n-    workspaceFolder.setUri(adjustURI(getWorkspaceFolderPath().toString()));\n-    setWorkspaceFolderPath(workspacePath.toUri());\n-\n+    workspaceFolder.setUri(String.valueOf(getWorkspaceFolderPath().toUri()));\n     return Collections.singletonList(workspaceFolder);\n   }\n \n-  protected URI getWorkspaceFolderPath() {\n-    return workspaceFolderPath;\n+  protected void createWorkspaceFolderStructure() {\n+    workspaceFolder =\n+        createFolderStructure(Paths.get(System.getProperty(\"java.io.tmpdir\"), \"WORKSPACE\"));\n   }\n \n-  private void setWorkspaceFolderPath(URI workspaceFolderPath) {\n-    this.workspaceFolderPath = workspaceFolderPath;\n+  private void createCopybookStructure() {\n+    copybooksFolderPath =\n+        createFolderStructure(Paths.get(workspaceFolder + filesystemSeparator() + \".copybooks\"));\n   }\n \n-  protected String filesystemSeparator() {\n-    return FileSystems.getDefault().getSeparator();\n+  protected void createDependencyFileStructure() {\n+    depenencyFileFolderPath =\n+        createFolderStructure(Paths.get(workspaceFolder + filesystemSeparator() + \".cobdeps\"));\n   }\n \n-  /*\n-  Remove the last slash from the URI path in order to replicate the behaviour of the client IDE that send to the server\n-  the path of the opened workspace without the last slash.\n-   */\n-  private String adjustURI(String originalUri) {\n-    return originalUri.substring(0, originalUri.length() - 1);\n+  private void createDependencyFile() {\n+    generateDummyContentForFile(\n+        depenencyFileFolderPath, DEP_FILE_COST_NAME + \".dep\", CPY_OUTER_NAME_ONLY2);\n   }\n \n-  @Nonnull\n-  private Path createPathOfName(String folderName, Optional<Path> parentFolder) {\n-\n-    // check if the workspace folder already exists (parent folder)..\n-    return parentFolder\n-        .map(\n-            path ->\n-                Paths.get(parentFolder.get() + System.getProperty(\"file.separator\") + folderName))\n-        .orElseGet(\n-            () ->\n-                Paths.get(\n-                    System.getProperty(\"java.io.tmpdir\")\n-                        + System.getProperty(\"file.separator\")\n-                        + folderName));\n+  private void createCopybookFiles() {\n+    ConfigurationSettingsStorable configSettings = configurationSettingsProvider.get().get();\n+\n+    String profile = (String) configSettings.getProfiles();\n+    List<String> targetDatasets = configSettings.getPaths();\n+\n+    List<Path> retriviedPaths =", "originalCommit": "e19030402caccc137d8c7b16e2f0d7ca705ced7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4NTU3Nw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/221#discussion_r387085577", "bodyText": "please replace with log", "author": "sergiuilie", "createdAt": "2020-03-03T15:11:37Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/CopybookSearchWithoutConfigTest.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ *\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ * Broadcom, Inc. - initial API and implementation\n+ *\n+ *\n+ */\n+\n+package com.ca.lsp.cobol.service;\n+\n+import com.broadcom.lsp.domain.cobol.databus.api.DataBusBroker;\n+import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n+import com.ca.lsp.cobol.model.ConfigurationSettingsStorable;\n+import com.ca.lsp.cobol.service.delegates.communications.Communications;\n+import com.ca.lsp.cobol.service.delegates.dependency.CopybookDependencyService;\n+import com.google.inject.Provider;\n+import org.eclipse.lsp4j.WorkspaceFolder;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import static com.ca.lsp.cobol.service.delegates.communications.CopybookMessageInfo.*;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.*;\n+\n+/**\n+ * This class cover the scenario when user try to use the server functionalities without an\n+ * appropriate filesystem configuration under the hood. Example of unit test defined here are\n+ * related to the search copybook without a copybook folder or without settings, and write/update\n+ * dependency file without a dependency folder.\n+ */\n+public class CopybookSearchWithoutConfigTest {\n+  public static final String CPY_NAME = \"ACPYTEST\";\n+  DataBusBroker dataBusBroker = mock(DataBusBroker.class);\n+  Provider settingsProvider = mock(Provider.class);\n+  CopybookDependencyService dependencyService = mock(CopybookDependencyService.class);\n+  Communications communications = mock(Communications.class);\n+  private CopybookServiceImpl copybookService;\n+  private static final String DOCUMENT_URI = \"file:///C:/Users/test/Test.cbl\";\n+  Path workspaceFolderPath = null;\n+  RequiredCopybookEvent requiredCopybookEvent;\n+  /** Initialize the copybook service and dependency service but not the relevant folders */\n+  @Before\n+  public void init() {\n+    workspaceFolderPath =\n+        createFolderStructure(Paths.get(System.getProperty(\"java.io.tmpdir\"), \"WORKSPACE\"));\n+\n+    copybookService =\n+        new CopybookServiceImpl(dataBusBroker, settingsProvider, dependencyService, communications);\n+    copybookService.setWorkspaceFolders(generateWorkspaceFolder());\n+\n+    requiredCopybookEvent =\n+        RequiredCopybookEvent.builder()\n+            .name(CPY_NAME)\n+            .documentUri(DOCUMENT_URI)\n+            .textDocumentSyncType(\"DID_OPEN\")\n+            .build();\n+  }\n+\n+  @After\n+  public void cleanupTempFolder() {\n+    try {\n+      Files.walk(workspaceFolderPath)\n+          .sorted(Comparator.reverseOrder())\n+          .map(Path::toFile)\n+          .forEach(File::delete);\n+    } catch (IOException e) {\n+      e.printStackTrace();", "originalCommit": "e19030402caccc137d8c7b16e2f0d7ca705ced7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4NTg2NQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/221#discussion_r387085865", "bodyText": "log please", "author": "sergiuilie", "createdAt": "2020-03-03T15:11:58Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/CopybookSearchWithoutConfigTest.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ *\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ * Broadcom, Inc. - initial API and implementation\n+ *\n+ *\n+ */\n+\n+package com.ca.lsp.cobol.service;\n+\n+import com.broadcom.lsp.domain.cobol.databus.api.DataBusBroker;\n+import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n+import com.ca.lsp.cobol.model.ConfigurationSettingsStorable;\n+import com.ca.lsp.cobol.service.delegates.communications.Communications;\n+import com.ca.lsp.cobol.service.delegates.dependency.CopybookDependencyService;\n+import com.google.inject.Provider;\n+import org.eclipse.lsp4j.WorkspaceFolder;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import static com.ca.lsp.cobol.service.delegates.communications.CopybookMessageInfo.*;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.*;\n+\n+/**\n+ * This class cover the scenario when user try to use the server functionalities without an\n+ * appropriate filesystem configuration under the hood. Example of unit test defined here are\n+ * related to the search copybook without a copybook folder or without settings, and write/update\n+ * dependency file without a dependency folder.\n+ */\n+public class CopybookSearchWithoutConfigTest {\n+  public static final String CPY_NAME = \"ACPYTEST\";\n+  DataBusBroker dataBusBroker = mock(DataBusBroker.class);\n+  Provider settingsProvider = mock(Provider.class);\n+  CopybookDependencyService dependencyService = mock(CopybookDependencyService.class);\n+  Communications communications = mock(Communications.class);\n+  private CopybookServiceImpl copybookService;\n+  private static final String DOCUMENT_URI = \"file:///C:/Users/test/Test.cbl\";\n+  Path workspaceFolderPath = null;\n+  RequiredCopybookEvent requiredCopybookEvent;\n+  /** Initialize the copybook service and dependency service but not the relevant folders */\n+  @Before\n+  public void init() {\n+    workspaceFolderPath =\n+        createFolderStructure(Paths.get(System.getProperty(\"java.io.tmpdir\"), \"WORKSPACE\"));\n+\n+    copybookService =\n+        new CopybookServiceImpl(dataBusBroker, settingsProvider, dependencyService, communications);\n+    copybookService.setWorkspaceFolders(generateWorkspaceFolder());\n+\n+    requiredCopybookEvent =\n+        RequiredCopybookEvent.builder()\n+            .name(CPY_NAME)\n+            .documentUri(DOCUMENT_URI)\n+            .textDocumentSyncType(\"DID_OPEN\")\n+            .build();\n+  }\n+\n+  @After\n+  public void cleanupTempFolder() {\n+    try {\n+      Files.walk(workspaceFolderPath)\n+          .sorted(Comparator.reverseOrder())\n+          .map(Path::toFile)\n+          .forEach(File::delete);\n+    } catch (IOException e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * This test will verify that when the profile/dataset settings are not provided to the user the\n+   * server will not crash and a syntax error copybook not found is shown to the user\n+   */\n+  @Test\n+  public void findCopybookWithoutSettingsDefined() {\n+    // simulate that user have not provided settings for profile and datasetlist but the\n+    // preprocessor found a copybook.\n+\n+    // when asking for a setting config we'll give an empty object as defined in the API\n+    when(settingsProvider.get()).thenReturn(ConfigurationSettingsStorable.builder().build());\n+\n+    try {\n+      copybookService.observerCallback(requiredCopybookEvent);\n+      verifyThatDepFileIsEngaged();\n+      verify(communications, times(1)).notifyCopybookMessageInfo(NO_SETTINGS);\n+    } catch (Exception e) {\n+      fail();\n+    }\n+  }\n+\n+  /**\n+   * This test verify that when the settings configuration contains just the profile name the server\n+   * will not crash and a syntax error of copybook not found is shown to the user.\n+   */\n+  @Test\n+  public void findCopybookWithOnlyProfileDefined() {\n+    // simulate that user have not provided settings for profile and datasetlist but the\n+    // preprocessor found a copybook.\n+\n+    when(settingsProvider.get()).thenReturn(new ConfigurationSettingsStorable(\"myProfile\", null));\n+\n+    try {\n+      copybookService.observerCallback(requiredCopybookEvent);\n+      verifyThatDepFileIsEngaged();\n+      verify(communications, times(1)).notifyCopybookMessageInfo(NO_DATASET_IN_SETTINGS);\n+    } catch (Exception e) {\n+      fail();", "originalCommit": "e19030402caccc137d8c7b16e2f0d7ca705ced7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEzNzE1MA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/221#discussion_r387137150", "bodyText": "The best way is to use fail(e.getMessage); here, or even something more descriptive", "author": "temanbrcom", "createdAt": "2020-03-03T16:24:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4NTg2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4NjIxMw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/221#discussion_r387086213", "bodyText": "you may add log here as well", "author": "sergiuilie", "createdAt": "2020-03-03T15:12:29Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/CopybookSearchWithoutConfigTest.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ *\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ * Broadcom, Inc. - initial API and implementation\n+ *\n+ *\n+ */\n+\n+package com.ca.lsp.cobol.service;\n+\n+import com.broadcom.lsp.domain.cobol.databus.api.DataBusBroker;\n+import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n+import com.ca.lsp.cobol.model.ConfigurationSettingsStorable;\n+import com.ca.lsp.cobol.service.delegates.communications.Communications;\n+import com.ca.lsp.cobol.service.delegates.dependency.CopybookDependencyService;\n+import com.google.inject.Provider;\n+import org.eclipse.lsp4j.WorkspaceFolder;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import static com.ca.lsp.cobol.service.delegates.communications.CopybookMessageInfo.*;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.*;\n+\n+/**\n+ * This class cover the scenario when user try to use the server functionalities without an\n+ * appropriate filesystem configuration under the hood. Example of unit test defined here are\n+ * related to the search copybook without a copybook folder or without settings, and write/update\n+ * dependency file without a dependency folder.\n+ */\n+public class CopybookSearchWithoutConfigTest {\n+  public static final String CPY_NAME = \"ACPYTEST\";\n+  DataBusBroker dataBusBroker = mock(DataBusBroker.class);\n+  Provider settingsProvider = mock(Provider.class);\n+  CopybookDependencyService dependencyService = mock(CopybookDependencyService.class);\n+  Communications communications = mock(Communications.class);\n+  private CopybookServiceImpl copybookService;\n+  private static final String DOCUMENT_URI = \"file:///C:/Users/test/Test.cbl\";\n+  Path workspaceFolderPath = null;\n+  RequiredCopybookEvent requiredCopybookEvent;\n+  /** Initialize the copybook service and dependency service but not the relevant folders */\n+  @Before\n+  public void init() {\n+    workspaceFolderPath =\n+        createFolderStructure(Paths.get(System.getProperty(\"java.io.tmpdir\"), \"WORKSPACE\"));\n+\n+    copybookService =\n+        new CopybookServiceImpl(dataBusBroker, settingsProvider, dependencyService, communications);\n+    copybookService.setWorkspaceFolders(generateWorkspaceFolder());\n+\n+    requiredCopybookEvent =\n+        RequiredCopybookEvent.builder()\n+            .name(CPY_NAME)\n+            .documentUri(DOCUMENT_URI)\n+            .textDocumentSyncType(\"DID_OPEN\")\n+            .build();\n+  }\n+\n+  @After\n+  public void cleanupTempFolder() {\n+    try {\n+      Files.walk(workspaceFolderPath)\n+          .sorted(Comparator.reverseOrder())\n+          .map(Path::toFile)\n+          .forEach(File::delete);\n+    } catch (IOException e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * This test will verify that when the profile/dataset settings are not provided to the user the\n+   * server will not crash and a syntax error copybook not found is shown to the user\n+   */\n+  @Test\n+  public void findCopybookWithoutSettingsDefined() {\n+    // simulate that user have not provided settings for profile and datasetlist but the\n+    // preprocessor found a copybook.\n+\n+    // when asking for a setting config we'll give an empty object as defined in the API\n+    when(settingsProvider.get()).thenReturn(ConfigurationSettingsStorable.builder().build());\n+\n+    try {\n+      copybookService.observerCallback(requiredCopybookEvent);\n+      verifyThatDepFileIsEngaged();\n+      verify(communications, times(1)).notifyCopybookMessageInfo(NO_SETTINGS);\n+    } catch (Exception e) {\n+      fail();\n+    }\n+  }\n+\n+  /**\n+   * This test verify that when the settings configuration contains just the profile name the server\n+   * will not crash and a syntax error of copybook not found is shown to the user.\n+   */\n+  @Test\n+  public void findCopybookWithOnlyProfileDefined() {\n+    // simulate that user have not provided settings for profile and datasetlist but the\n+    // preprocessor found a copybook.\n+\n+    when(settingsProvider.get()).thenReturn(new ConfigurationSettingsStorable(\"myProfile\", null));\n+\n+    try {\n+      copybookService.observerCallback(requiredCopybookEvent);\n+      verifyThatDepFileIsEngaged();\n+      verify(communications, times(1)).notifyCopybookMessageInfo(NO_DATASET_IN_SETTINGS);\n+    } catch (Exception e) {\n+      fail();\n+    }\n+  }\n+\n+  /**\n+   * This test will verify that without the definition of a copybook folder the server will not\n+   * crash and a syntax error copybook not found is shown to the user\n+   */\n+  @Test\n+  public void findCopybookWithoutCopybookFolderDefined() {\n+    when(settingsProvider.get())\n+        .thenReturn(\n+            ConfigurationSettingsStorable.builder()\n+                .profiles(\"PRF\")\n+                .paths(Collections.singletonList(\"HLQ.DS1\"))\n+                .build());\n+    try {\n+      copybookService.observerCallback(requiredCopybookEvent);\n+      verifyThatDepFileIsEngaged();\n+      verify(communications, times(1)).notifyCopybookMessageInfo(COPYBOOK_FOLDER_MISS);\n+    } catch (Exception e) {\n+      fail();\n+    }\n+  }\n+\n+  private List<WorkspaceFolder> generateWorkspaceFolder() {\n+\n+    WorkspaceFolder workspaceFolder = new WorkspaceFolder();\n+    workspaceFolder.setName(\"TEST\");\n+    workspaceFolder.setUri(String.valueOf(workspaceFolderPath.toUri()));\n+    return Collections.singletonList(workspaceFolder);\n+  }\n+\n+  /**\n+   * Pre-condition of each test for copybook management is that the dependency file creation is\n+   * engaged.\n+   */\n+  private void verifyThatDepFileIsEngaged() {\n+    verify(dependencyService, times(1))\n+        .addCopybookInDepFile(\n+            requiredCopybookEvent.getName(), requiredCopybookEvent.getDocumentUri());\n+  }\n+\n+  private Path createFolderStructure(Path copybooksPath) {\n+    try {\n+      return Files.createDirectories(copybooksPath);\n+    } catch (IOException e) {\n+      return null;", "originalCommit": "e19030402caccc137d8c7b16e2f0d7ca705ced7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1179de68c13307eb2dc1ec1aefa3c259e4679527", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/1179de68c13307eb2dc1ec1aefa3c259e4679527", "message": "Address request changes", "committedDate": "2020-03-04T07:43:10Z", "type": "commit"}, {"oid": "d5b0302bf57c21081b1293deb1163bd4e7d0c94e", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/d5b0302bf57c21081b1293deb1163bd4e7d0c94e", "message": "Merge remote-tracking branch 'remotes/origin/development' into 187_ConsumeSettingsInFSS\n\n# Conflicts:\n#\tclients/cobol-lsp-vscode-extension/CHANGELOG.md\n#\tcom.ca.lsp.cobol/lsp-service-cobol/src/main/java/com/ca/lsp/cobol/service/FileSystemServiceImpl.java\n#\tcom.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/FileSystemConfiguration.java\n#\tcom.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/TestModule.java", "committedDate": "2020-03-04T07:49:47Z", "type": "commit"}, {"oid": "13d689bcd464709a2f91c477a93f24ab2a729da1", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/13d689bcd464709a2f91c477a93f24ab2a729da1", "message": "Address request changes #2", "committedDate": "2020-03-04T15:07:44Z", "type": "commit"}, {"oid": "dc93a0b6f4ab448819a51c0876ce466ba7e894b9", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/dc93a0b6f4ab448819a51c0876ce466ba7e894b9", "message": "Address request changes #3", "committedDate": "2020-03-04T16:06:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc3Njc3Mw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/221#discussion_r387776773", "bodyText": "Please, delete the commented-out code", "author": "temanbrcom", "createdAt": "2020-03-04T16:19:15Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/CopybookServiceTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ *\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ * Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.ca.lsp.cobol.service;\n+\n+import com.broadcom.lsp.domain.cobol.databus.api.DataBusBroker;\n+import com.broadcom.lsp.domain.cobol.event.api.EventObserver;\n+import com.broadcom.lsp.domain.cobol.event.model.FetchedCopybookEvent;\n+import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n+import com.ca.lsp.cobol.FileSystemConfiguration;\n+import com.ca.lsp.cobol.model.ConfigurationSettingsStorable;\n+import com.ca.lsp.cobol.service.delegates.communications.Communications;\n+import com.ca.lsp.cobol.service.delegates.dependency.CopybookDependencyService;\n+import com.google.inject.Provider;\n+import lombok.extern.slf4j.Slf4j;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.Mockito.mock;\n+\n+@Slf4j\n+public class CopybookServiceTest extends FileSystemConfiguration\n+    implements EventObserver<RequiredCopybookEvent> {\n+\n+  //  private CopybookServiceImpl copybookService =\n+  //      (CopybookServiceImpl) LangServerCtx.getInjector().getInstance(CopybookService.class);", "originalCommit": "dc93a0b6f4ab448819a51c0876ce466ba7e894b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc3Njk3NQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/221#discussion_r387776975", "bodyText": "Please, delete the commented-out code", "author": "temanbrcom", "createdAt": "2020-03-04T16:19:30Z", "path": "com.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/service/CopybookServiceTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ *\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ * Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.ca.lsp.cobol.service;\n+\n+import com.broadcom.lsp.domain.cobol.databus.api.DataBusBroker;\n+import com.broadcom.lsp.domain.cobol.event.api.EventObserver;\n+import com.broadcom.lsp.domain.cobol.event.model.FetchedCopybookEvent;\n+import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;\n+import com.ca.lsp.cobol.FileSystemConfiguration;\n+import com.ca.lsp.cobol.model.ConfigurationSettingsStorable;\n+import com.ca.lsp.cobol.service.delegates.communications.Communications;\n+import com.ca.lsp.cobol.service.delegates.dependency.CopybookDependencyService;\n+import com.google.inject.Provider;\n+import lombok.extern.slf4j.Slf4j;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.Mockito.mock;\n+\n+@Slf4j\n+public class CopybookServiceTest extends FileSystemConfiguration\n+    implements EventObserver<RequiredCopybookEvent> {\n+\n+  //  private CopybookServiceImpl copybookService =\n+  //      (CopybookServiceImpl) LangServerCtx.getInjector().getInstance(CopybookService.class);\n+\n+  DataBusBroker dataBus = mock(DataBusBroker.class);\n+  Provider<ConfigurationSettingsStorable> configurationSettingsStorableProvider =\n+      mock(Provider.class);\n+  Communications communications = mock(Communications.class);\n+  CopybookDependencyService dependencyService = mock(CopybookDependencyService.class);\n+  /*\n+   DataBusBroker dataBus,\n+     Provider<ConfigurationSettingsStorable> configurationSettingsStorableProvider,\n+     CopybookDependencyService dependencyService,\n+     Communications communications\n+  */", "originalCommit": "dc93a0b6f4ab448819a51c0876ce466ba7e894b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "49b62680829d4fa7e60e227f8b0fd464ddacc642", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/49b62680829d4fa7e60e227f8b0fd464ddacc642", "message": "Merge remote-tracking branch 'remotes/origin/development' into 187_ConsumeSettingsInFSS\n\n# Conflicts:\n#\tcom.ca.lsp.cobol/lsp-service-cobol/src/test/java/com/ca/lsp/cobol/positive/PositiveTest.java", "committedDate": "2020-03-04T16:38:34Z", "type": "commit"}, {"oid": "2abcdec96193467c3d7f35465d1280bb8aeb176c", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/2abcdec96193467c3d7f35465d1280bb8aeb176c", "message": "Address request changes #4", "committedDate": "2020-03-05T07:52:10Z", "type": "commit"}, {"oid": "7060e02288de38131923c983c0d5d0acf4efdcd9", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/7060e02288de38131923c983c0d5d0acf4efdcd9", "message": "Address observelCallback test fail on MyTextDocumentServiceTest.java", "committedDate": "2020-03-05T10:58:46Z", "type": "commit"}, {"oid": "dbc2a5dc5647e7a93bf3cf949a2cb7a30f9c5ac8", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/dbc2a5dc5647e7a93bf3cf949a2cb7a30f9c5ac8", "message": "Address observelCallback test fail on MyTextDocumentServiceTest.java introducing timer", "committedDate": "2020-03-05T13:44:09Z", "type": "commit"}]}