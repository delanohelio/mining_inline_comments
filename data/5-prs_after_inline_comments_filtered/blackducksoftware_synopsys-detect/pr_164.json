{"pr_number": 164, "pr_title": "Cargo detectable", "pr_createdAt": "2020-05-06T17:18:30Z", "pr_url": "https://github.com/blackducksoftware/synopsys-detect/pull/164", "timeline": [{"oid": "f1b446a2c819466038f19583b902353edc823ae3", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/f1b446a2c819466038f19583b902353edc823ae3", "message": "feat(detectable): Created classes necessary to support Cargo", "committedDate": "2020-04-28T20:55:26Z", "type": "commit"}, {"oid": "13514dc9b5071895ea54208b454ec5e9ef70dba9", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/13514dc9b5071895ea54208b454ec5e9ef70dba9", "message": "feat(cargo): Created channels for creation of Cargo detectable", "committedDate": "2020-05-04T15:46:48Z", "type": "commit"}, {"oid": "cda219f58291880aa8d558029f4114628d92a5e2", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/cda219f58291880aa8d558029f4114628d92a5e2", "message": "feat(cargo): Adding logic to Cargo.lock parser, created test for detectable", "committedDate": "2020-05-05T15:17:29Z", "type": "commit"}, {"oid": "8cd07c9f40d89de6a8aa06c59ef6fb6ccaee385a", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/8cd07c9f40d89de6a8aa06c59ef6fb6ccaee385a", "message": "fix(cargo): Added DetectableInfo annotation", "committedDate": "2020-05-05T19:52:37Z", "type": "commit"}, {"oid": "1698f26a0c47fe92f8ad442bcdb5512f873c5fa1", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/1698f26a0c47fe92f8ad442bcdb5512f873c5fa1", "message": "fix(cargo): Updated version of blackduck to 47.1.3, use new Crates forge", "committedDate": "2020-05-06T17:13:22Z", "type": "commit"}, {"oid": "bf9aa77295bc27c0e659263a74b9a8b2127dcc24", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/bf9aa77295bc27c0e659263a74b9a8b2127dcc24", "message": "feat(cargo): Created custom detect result for missing Cargo.lock", "committedDate": "2020-05-07T20:23:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0MDI2OA==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r422340268", "bodyText": "Can you make this multi line to be consistent with the rest of the file?", "author": "JakeMathews", "createdAt": "2020-05-08T19:50:54Z", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectable/executable/impl/SimpleExecutableResolver.java", "diffHunk": "@@ -92,6 +93,9 @@ public File resolveBash() {\n         return findCachedSystem(\"bash\");\n     }\n \n+    @Override\n+    public File resolveCargo() { return findCachedSystem(\"cargo\"); }", "originalCommit": "bf9aa77295bc27c0e659263a74b9a8b2127dcc24", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0MjI1MA==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r422342250", "bodyText": "in Intellij all the methods with a one-line body are single-line", "author": "crowleySynopsys", "createdAt": "2020-05-08T19:55:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0MDI2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0ODQ0NQ==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r422348445", "bodyText": "https://stackoverflow.com/questions/35995083/intellij-collapsing-single-line-methods", "author": "JakeMathews", "createdAt": "2020-05-08T20:08:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0MDI2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0NDc5Ng==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r422344796", "bodyText": "Can you make this multi line to be consistent with the rest of the file?", "author": "JakeMathews", "createdAt": "2020-05-08T20:00:32Z", "path": "detectable/src/main/java/com/synopsys/integration/detectable/factory/DetectableFactory.java", "diffHunk": "@@ -389,6 +396,8 @@ private DependencyFileDetailGenerator dependencyFileDetailGenerator() {\n         return new DependencyFileDetailGenerator(filePathGenerator());\n     }\n \n+    private CargoExtractor cargoExtractor() { return new CargoExtractor(new CargoLockParser()); }", "originalCommit": "bf9aa77295bc27c0e659263a74b9a8b2127dcc24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0NTc1Mg==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r422345752", "bodyText": "The extractor should take in the file and create the InputStream.", "author": "JakeMathews", "createdAt": "2020-05-08T20:02:40Z", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/CargoExtractor.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.cargo;\n+\n+import java.io.InputStream;\n+\n+import com.synopsys.integration.bdio.graph.DependencyGraph;\n+import com.synopsys.integration.detectable.Extraction;\n+import com.synopsys.integration.detectable.detectable.codelocation.CodeLocation;\n+import com.synopsys.integration.detectable.detectables.cargo.parse.CargoLockParser;\n+\n+public class CargoExtractor {\n+\n+    private final CargoLockParser cargoLockParser;\n+\n+    public CargoExtractor(final CargoLockParser cargoLockParser) {\n+        this.cargoLockParser = cargoLockParser;\n+    }\n+\n+    public Extraction extract(final InputStream goLockInputStream) {", "originalCommit": "bf9aa77295bc27c0e659263a74b9a8b2127dcc24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0NjE3Mw==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r422346173", "bodyText": "Could any of these be null? If so their getters should return an Optional.", "author": "JakeMathews", "createdAt": "2020-05-08T20:03:34Z", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/model/Package.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.cargo.model;\n+\n+import java.util.List;\n+\n+public class Package {\n+    private String name;\n+    private String version;\n+    private String source;\n+    private String checksum;\n+    private List<String> dependencies;", "originalCommit": "bf9aa77295bc27c0e659263a74b9a8b2127dcc24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0Njg1MQ==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r422346851", "bodyText": "Please make this multi-line for consistency.", "author": "JakeMathews", "createdAt": "2020-05-08T20:04:59Z", "path": "src/main/java/com/synopsys/integration/detect/tool/detector/impl/DetectDetectableFactory.java", "diffHunk": "@@ -100,6 +101,8 @@ public BitbakeDetectable createBitbakeDetectable(final DetectableEnvironment env\n         return detectableFactory.createBitbakeDetectable(environment, detectableOptionFactory.createBitbakeDetectableOptions(), detectExecutableResolver);\n     }\n \n+    public CargoDetectable createCargoDetectable(final DetectableEnvironment environment) { return detectableFactory.createCargoDetectable(environment); }", "originalCommit": "bf9aa77295bc27c0e659263a74b9a8b2127dcc24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0NzA2Nw==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r422347067", "bodyText": "Seems unrelated.", "author": "JakeMathews", "createdAt": "2020-05-08T20:05:23Z", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/go/godep/GoDepExtractor.java", "diffHunk": "@@ -41,5 +41,4 @@ public Extraction extract(final InputStream goLockInputStream) {\n         final CodeLocation codeLocation = new CodeLocation(graph);\n         return new Extraction.Builder().success(codeLocation).build();\n     }\n-", "originalCommit": "bf9aa77295bc27c0e659263a74b9a8b2127dcc24", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM1NDM1Nw==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r422354357", "bodyText": "lol I agree, missed that one", "author": "crowleySynopsys", "createdAt": "2020-05-08T20:21:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0NzA2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0NzY1Mg==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r422347652", "bodyText": "You do a null check on this later. Can we add an Optional getter instead?", "author": "JakeMathews", "createdAt": "2020-05-08T20:06:35Z", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/model/CargoLock.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.cargo.model;\n+\n+import java.util.List;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+public class CargoLock {\n+    @SerializedName(\"package\")\n+    public List<Package> packages;", "originalCommit": "bf9aa77295bc27c0e659263a74b9a8b2127dcc24", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM1NjY4MQ==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r422356681", "bodyText": "certainly", "author": "crowleySynopsys", "createdAt": "2020-05-08T20:26:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0NzY1Mg=="}], "type": "inlineReview"}, {"oid": "52c38cf20948d44a0e2ca1be5f1e8172d73854c7", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/52c38cf20948d44a0e2ca1be5f1e8172d73854c7", "message": "fix(cargo): Responded to feedback on PR", "committedDate": "2020-05-09T18:08:13Z", "type": "commit"}, {"oid": "a2be3ece5f8faa2368bd92b18598922a13dc5f9d", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/a2be3ece5f8faa2368bd92b18598922a13dc5f9d", "message": "fix: Revised imports for Nullable annotation", "committedDate": "2020-05-11T15:32:17Z", "type": "commit"}, {"oid": "7c1ab1c5a50fa6f32ee594c7d285083cca660d31", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/7c1ab1c5a50fa6f32ee594c7d285083cca660d31", "message": "fix: Add back space that was accidentally removed", "committedDate": "2020-05-11T17:16:41Z", "type": "commit"}, {"oid": "df670a596508ec94e5883234a7c5cae286353d3f", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/df670a596508ec94e5883234a7c5cae286353d3f", "message": "fix: Revert accidental spacing changes", "committedDate": "2020-05-11T18:21:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI2NDMxMw==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r423264313", "bodyText": "This check should occur in applicable(). Extractable is reserved for environment checking such as looking for executables.", "author": "JakeMathews", "createdAt": "2020-05-11T19:20:55Z", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/CargoDetectable.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.cargo;\n+\n+import java.io.File;\n+\n+import com.synopsys.integration.detectable.Detectable;\n+import com.synopsys.integration.detectable.DetectableEnvironment;\n+import com.synopsys.integration.detectable.Extraction;\n+import com.synopsys.integration.detectable.ExtractionEnvironment;\n+import com.synopsys.integration.detectable.detectable.annotation.DetectableInfo;\n+import com.synopsys.integration.detectable.detectable.file.FileFinder;\n+import com.synopsys.integration.detectable.detectable.result.CargoGenerateLockfileDetectResult;\n+import com.synopsys.integration.detectable.detectable.result.DetectableResult;\n+import com.synopsys.integration.detectable.detectable.result.FilesNotFoundDetectableResult;\n+import com.synopsys.integration.detectable.detectable.result.PassedDetectableResult;\n+\n+@DetectableInfo(language = \"Rust\", forge = \"crates\", requirementsMarkdown = \"File: Cargo.lock\")\n+public class CargoDetectable extends Detectable {\n+    public static final String CARGO_LOCK_FILENAME = \"Cargo.lock\";\n+    public static final String CARGO_TOML_FILENAME = \"Cargo.toml\";\n+\n+    private final FileFinder fileFinder;\n+    private final CargoExtractor cargoExtractor;\n+\n+    private File cargoLock;\n+    private File cargoToml;\n+\n+    public CargoDetectable(final DetectableEnvironment environment, final FileFinder fileFinder, final CargoExtractor cargoExtractor) {\n+        super(environment);\n+        this.fileFinder = fileFinder;\n+        this.cargoExtractor = cargoExtractor;\n+    }\n+\n+    @Override\n+    public DetectableResult applicable() {\n+        cargoLock = fileFinder.findFile(environment.getDirectory(), CARGO_LOCK_FILENAME);\n+        if (cargoLock == null) {\n+            cargoToml = fileFinder.findFile(environment.getDirectory(), CARGO_TOML_FILENAME);\n+            if (cargoToml == null) {\n+                return new FilesNotFoundDetectableResult(CARGO_LOCK_FILENAME, CARGO_TOML_FILENAME);\n+            }\n+        }\n+        return new PassedDetectableResult();\n+    }\n+\n+    @Override\n+    public DetectableResult extractable() {\n+        if (cargoLock == null && cargoToml != null) {\n+            return new CargoGenerateLockfileDetectResult(environment.getDirectory().getAbsolutePath());\n+        }", "originalCommit": "df670a596508ec94e5883234a7c5cae286353d3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk1MDE5Ng==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r423950196", "bodyText": "I was following model of GoDepLockDetectable.  Should I make the same change there?", "author": "crowleySynopsys", "createdAt": "2020-05-12T18:36:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI2NDMxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk1NjAwOQ==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r423956009", "bodyText": "Upon discussion Jordan, what occurs in applicable vs. extractable is up to the Detecable to decide (To a degree. What degree? Who knows). The code you wrote is acceptable.", "author": "JakeMathews", "createdAt": "2020-05-12T18:46:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI2NDMxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI2NDY2Mg==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r423264662", "bodyText": "Why do we need a CargoResolver if we aren't using the executable?", "author": "JakeMathews", "createdAt": "2020-05-11T19:21:32Z", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectable/executable/impl/SimpleExecutableResolver.java", "diffHunk": "@@ -92,6 +93,11 @@ public File resolveBash() {\n         return findCachedSystem(\"bash\");\n     }\n \n+    @Override\n+    public File resolveCargo() {\n+        return findCachedSystem(\"cargo\");\n+    }\n+", "originalCommit": "df670a596508ec94e5883234a7c5cae286353d3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk5NjA0MA==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r423996040", "bodyText": "yaaaa that can go", "author": "crowleySynopsys", "createdAt": "2020-05-12T19:56:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI2NDY2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI2NzE0NA==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r423267144", "bodyText": "In the future, I would avoid making formatting changes that are unrelated to the code you are modifying in the PR. It's fine for now though.", "author": "JakeMathews", "createdAt": "2020-05-11T19:26:23Z", "path": "src/main/java/com/synopsys/integration/detect/workflow/codelocation/CodeLocationNameGenerator.java", "diffHunk": "@@ -127,7 +127,7 @@ private String cleanScanTargetPath(final File scanTargetPath, final File sourceP\n \n         final String finalSourcePathPiece = DetectFileUtils.extractFinalPieceFromPath(canonicalSourcePath);\n         String cleanedTargetPath = \"\";\n-         if (StringUtils.isNotBlank(canonicalTargetPath) && StringUtils.isNotBlank(finalSourcePathPiece)) {\n+        if (StringUtils.isNotBlank(canonicalTargetPath) && StringUtils.isNotBlank(finalSourcePathPiece)) {", "originalCommit": "df670a596508ec94e5883234a7c5cae286353d3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk1MTM1Ng==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r423951356", "bodyText": "Yeah I'm not even sure how/when I would've made that edit.  I tried to revert it but Intellij claims to not detect a difference in the file.", "author": "crowleySynopsys", "createdAt": "2020-05-12T18:38:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI2NzE0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI3MjYzMA==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r423272630", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private List<String> trimDependencies(List<String> rawDependencies) {\n          \n          \n            \n                    List<String> trimmedDependencies = new ArrayList<>();\n          \n          \n            \n            \n          \n          \n            \n                    for (String rawDependency : rawDependencies) {\n          \n          \n            \n                        String trimmedDependency = rawDependency.split(\" \")[0];\n          \n          \n            \n                        trimmedDependencies.add(trimmedDependency);\n          \n          \n            \n                    }\n          \n          \n            \n                    return trimmedDependencies;\n          \n          \n            \n                }\n          \n          \n            \n                private List<String> getDependencyNames(List<String> rawDependencies) {\n          \n          \n            \n                    return rawDependencies.stream()\n          \n          \n            \n                        .map(dependency -> dependency.split(\" \")[0])\n          \n          \n            \n                        .collect(Collectors.toList());\n          \n          \n            \n                }", "author": "JakeMathews", "createdAt": "2020-05-11T19:36:46Z", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/parse/CargoLockParser.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.cargo.parse;\n+\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.moandjiezana.toml.Toml;\n+import com.synopsys.integration.bdio.graph.DependencyGraph;\n+import com.synopsys.integration.bdio.graph.MutableDependencyGraph;\n+import com.synopsys.integration.bdio.graph.MutableMapDependencyGraph;\n+import com.synopsys.integration.bdio.model.Forge;\n+import com.synopsys.integration.bdio.model.dependency.Dependency;\n+import com.synopsys.integration.bdio.model.externalid.ExternalId;\n+import com.synopsys.integration.bdio.model.externalid.ExternalIdFactory;\n+import com.synopsys.integration.detectable.detectables.cargo.model.CargoLock;\n+import com.synopsys.integration.detectable.detectables.cargo.model.Package;\n+\n+public class CargoLockParser {\n+\n+    private final ExternalIdFactory externalIdFactory = new ExternalIdFactory();\n+\n+    private final Map<String, Dependency> packageMap = new HashMap<>();\n+\n+    public DependencyGraph parseLockFile(final InputStream cargoLockInputStream) {\n+        final CargoLock cargoLock = new Toml().read(cargoLockInputStream).to(CargoLock.class);\n+        if (cargoLock.getPackages().isPresent()) {\n+            return parseDependencies(cargoLock.getPackages().get());\n+        }\n+        return new MutableMapDependencyGraph();\n+    }\n+\n+    private DependencyGraph parseDependencies(final List<Package> lockPackages) {\n+        MutableDependencyGraph graph = new MutableMapDependencyGraph();\n+\n+        Set<String> rootPackages = determineRootPackages(lockPackages);\n+\n+        for (final String rootPackage : rootPackages) {\n+            graph.addChildToRoot(packageMap.get(rootPackage));\n+        }\n+\n+        for (final Package lockPackage : lockPackages) {\n+            if (!lockPackage.getDependencies().isPresent()) {\n+                continue;\n+            }\n+            List<String> trimmedDependencies = trimDependencies(lockPackage.getDependencies().get());\n+            for (final String dependency : trimmedDependencies) {\n+                Dependency child = packageMap.get(dependency);\n+                Dependency parent = packageMap.get(lockPackage.getName().orElse(\"\"));\n+                if (child != null && parent != null) {\n+                    graph.addChildWithParent(child, parent);\n+                }\n+            }\n+        }\n+        return graph;\n+    }\n+\n+    private Set<String> determineRootPackages(List<Package> lockPackages) {\n+        Set<String> rootPackages = new HashSet<>();\n+        Set<String> dependencyPackages = new HashSet<>();\n+\n+        for (final Package lockPackage : lockPackages) {\n+            if (lockPackage != null) {\n+                final String projectName = lockPackage.getName().orElse(\"\");\n+                final String projectVersion = lockPackage.getVersion().orElse(\"\");\n+\n+                packageMap.put(projectName, createCargoDependency(projectName, projectVersion));\n+                rootPackages.add(projectName);\n+                if (lockPackage.getDependencies().isPresent()) {\n+                    dependencyPackages.addAll(trimDependencies(lockPackage.getDependencies().get()));\n+                }\n+\n+            }\n+        }\n+        rootPackages.removeAll(dependencyPackages);\n+\n+        return rootPackages;\n+    }\n+\n+    private List<String> trimDependencies(List<String> rawDependencies) {\n+        List<String> trimmedDependencies = new ArrayList<>();\n+\n+        for (String rawDependency : rawDependencies) {\n+            String trimmedDependency = rawDependency.split(\" \")[0];\n+            trimmedDependencies.add(trimmedDependency);\n+        }\n+        return trimmedDependencies;\n+    }", "originalCommit": "df670a596508ec94e5883234a7c5cae286353d3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI3MzcwOQ==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r423273709", "bodyText": "I think this is a bit more readable. Also trimming a String has a meaning. I think the method name could be confusing because you aren't \"trimming\" in the traditional sense.", "author": "JakeMathews", "createdAt": "2020-05-11T19:39:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI3MjYzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk1MzM2Nw==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r423953367", "bodyText": "Ya that is better for sure.  How about extractDependencyNames? I know Jordan isn't a big fan of using 'get' in a method name that isn't a getter", "author": "crowleySynopsys", "createdAt": "2020-05-12T18:42:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI3MjYzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk2MjEyNw==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r423962127", "bodyText": "That's good too.", "author": "JakeMathews", "createdAt": "2020-05-12T18:56:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI3MjYzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI3NDY4OQ==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r423274689", "bodyText": "Could you add a unit test for this class? Test it with both valid and invalid inputs. Try to break your parser and make sure that it fails gracefully and not with null pointers. I think all of our parsers should have some kind of unit tests and not rely solely on the DetectableTest.", "author": "JakeMathews", "createdAt": "2020-05-11T19:41:03Z", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/parse/CargoLockParser.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.cargo.parse;\n+\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.moandjiezana.toml.Toml;\n+import com.synopsys.integration.bdio.graph.DependencyGraph;\n+import com.synopsys.integration.bdio.graph.MutableDependencyGraph;\n+import com.synopsys.integration.bdio.graph.MutableMapDependencyGraph;\n+import com.synopsys.integration.bdio.model.Forge;\n+import com.synopsys.integration.bdio.model.dependency.Dependency;\n+import com.synopsys.integration.bdio.model.externalid.ExternalId;\n+import com.synopsys.integration.bdio.model.externalid.ExternalIdFactory;\n+import com.synopsys.integration.detectable.detectables.cargo.model.CargoLock;\n+import com.synopsys.integration.detectable.detectables.cargo.model.Package;\n+\n+public class CargoLockParser {", "originalCommit": "df670a596508ec94e5883234a7c5cae286353d3f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4NDQzOQ==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r423284439", "bodyText": "Could there be nulls in this list? I think they should be filtered out when the CargoLock is being created.", "author": "JakeMathews", "createdAt": "2020-05-11T19:59:31Z", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/parse/CargoLockParser.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.cargo.parse;\n+\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.moandjiezana.toml.Toml;\n+import com.synopsys.integration.bdio.graph.DependencyGraph;\n+import com.synopsys.integration.bdio.graph.MutableDependencyGraph;\n+import com.synopsys.integration.bdio.graph.MutableMapDependencyGraph;\n+import com.synopsys.integration.bdio.model.Forge;\n+import com.synopsys.integration.bdio.model.dependency.Dependency;\n+import com.synopsys.integration.bdio.model.externalid.ExternalId;\n+import com.synopsys.integration.bdio.model.externalid.ExternalIdFactory;\n+import com.synopsys.integration.detectable.detectables.cargo.model.CargoLock;\n+import com.synopsys.integration.detectable.detectables.cargo.model.Package;\n+\n+public class CargoLockParser {\n+\n+    private final ExternalIdFactory externalIdFactory = new ExternalIdFactory();\n+\n+    private final Map<String, Dependency> packageMap = new HashMap<>();\n+\n+    public DependencyGraph parseLockFile(final InputStream cargoLockInputStream) {\n+        final CargoLock cargoLock = new Toml().read(cargoLockInputStream).to(CargoLock.class);\n+        if (cargoLock.getPackages().isPresent()) {\n+            return parseDependencies(cargoLock.getPackages().get());\n+        }\n+        return new MutableMapDependencyGraph();\n+    }\n+\n+    private DependencyGraph parseDependencies(final List<Package> lockPackages) {\n+        MutableDependencyGraph graph = new MutableMapDependencyGraph();\n+\n+        Set<String> rootPackages = determineRootPackages(lockPackages);\n+\n+        for (final String rootPackage : rootPackages) {\n+            graph.addChildToRoot(packageMap.get(rootPackage));\n+        }\n+\n+        for (final Package lockPackage : lockPackages) {\n+            if (!lockPackage.getDependencies().isPresent()) {\n+                continue;\n+            }\n+            List<String> trimmedDependencies = trimDependencies(lockPackage.getDependencies().get());\n+            for (final String dependency : trimmedDependencies) {\n+                Dependency child = packageMap.get(dependency);\n+                Dependency parent = packageMap.get(lockPackage.getName().orElse(\"\"));\n+                if (child != null && parent != null) {\n+                    graph.addChildWithParent(child, parent);\n+                }\n+            }\n+        }\n+        return graph;\n+    }\n+\n+    private Set<String> determineRootPackages(List<Package> lockPackages) {\n+        Set<String> rootPackages = new HashSet<>();\n+        Set<String> dependencyPackages = new HashSet<>();\n+\n+        for (final Package lockPackage : lockPackages) {\n+            if (lockPackage != null) {", "originalCommit": "df670a596508ec94e5883234a7c5cae286353d3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk5NTg4MA==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r423995880", "bodyText": "There should never be nulls, I think that check was from before when cargoLock.packages wasn't an Optional.  I'll remove it", "author": "crowleySynopsys", "createdAt": "2020-05-12T19:56:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4NDQzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4NTY4OQ==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r423285689", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (lockPackage.getDependencies().isPresent()) {\n          \n          \n            \n                                dependencyPackages.addAll(trimDependencies(lockPackage.getDependencies().get()));\n          \n          \n            \n                            }\n          \n          \n            \n                            lockPackage.getDependencies()\n          \n          \n            \n                                .map(this::trimDependencies)\n          \n          \n            \n                                .ifPresent(dependencyPackages::addAll);", "author": "JakeMathews", "createdAt": "2020-05-11T20:01:58Z", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/parse/CargoLockParser.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.cargo.parse;\n+\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.moandjiezana.toml.Toml;\n+import com.synopsys.integration.bdio.graph.DependencyGraph;\n+import com.synopsys.integration.bdio.graph.MutableDependencyGraph;\n+import com.synopsys.integration.bdio.graph.MutableMapDependencyGraph;\n+import com.synopsys.integration.bdio.model.Forge;\n+import com.synopsys.integration.bdio.model.dependency.Dependency;\n+import com.synopsys.integration.bdio.model.externalid.ExternalId;\n+import com.synopsys.integration.bdio.model.externalid.ExternalIdFactory;\n+import com.synopsys.integration.detectable.detectables.cargo.model.CargoLock;\n+import com.synopsys.integration.detectable.detectables.cargo.model.Package;\n+\n+public class CargoLockParser {\n+\n+    private final ExternalIdFactory externalIdFactory = new ExternalIdFactory();\n+\n+    private final Map<String, Dependency> packageMap = new HashMap<>();\n+\n+    public DependencyGraph parseLockFile(final InputStream cargoLockInputStream) {\n+        final CargoLock cargoLock = new Toml().read(cargoLockInputStream).to(CargoLock.class);\n+        if (cargoLock.getPackages().isPresent()) {\n+            return parseDependencies(cargoLock.getPackages().get());\n+        }\n+        return new MutableMapDependencyGraph();\n+    }\n+\n+    private DependencyGraph parseDependencies(final List<Package> lockPackages) {\n+        MutableDependencyGraph graph = new MutableMapDependencyGraph();\n+\n+        Set<String> rootPackages = determineRootPackages(lockPackages);\n+\n+        for (final String rootPackage : rootPackages) {\n+            graph.addChildToRoot(packageMap.get(rootPackage));\n+        }\n+\n+        for (final Package lockPackage : lockPackages) {\n+            if (!lockPackage.getDependencies().isPresent()) {\n+                continue;\n+            }\n+            List<String> trimmedDependencies = trimDependencies(lockPackage.getDependencies().get());\n+            for (final String dependency : trimmedDependencies) {\n+                Dependency child = packageMap.get(dependency);\n+                Dependency parent = packageMap.get(lockPackage.getName().orElse(\"\"));\n+                if (child != null && parent != null) {\n+                    graph.addChildWithParent(child, parent);\n+                }\n+            }\n+        }\n+        return graph;\n+    }\n+\n+    private Set<String> determineRootPackages(List<Package> lockPackages) {\n+        Set<String> rootPackages = new HashSet<>();\n+        Set<String> dependencyPackages = new HashSet<>();\n+\n+        for (final Package lockPackage : lockPackages) {\n+            if (lockPackage != null) {\n+                final String projectName = lockPackage.getName().orElse(\"\");\n+                final String projectVersion = lockPackage.getVersion().orElse(\"\");\n+\n+                packageMap.put(projectName, createCargoDependency(projectName, projectVersion));\n+                rootPackages.add(projectName);\n+                if (lockPackage.getDependencies().isPresent()) {\n+                    dependencyPackages.addAll(trimDependencies(lockPackage.getDependencies().get()));\n+                }", "originalCommit": "df670a596508ec94e5883234a7c5cae286353d3f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3989330f124dda26b4c96b78f2b5b5c4325e7e61", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/3989330f124dda26b4c96b78f2b5b5c4325e7e61", "message": "feat(cargo): Added unit test for CargoLockParser", "committedDate": "2020-05-13T16:46:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyMDM4Nw==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r424720387", "bodyText": "Catch DetectableException here as well so it isn't caught in the Detectable's extraction method.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } catch (final IOException e) {\n          \n          \n            \n                        return new Extraction.Builder().exception(e).build();\n          \n          \n            \n                    }\n          \n          \n            \n                    } catch (final IOException | DetectableException e) {\n          \n          \n            \n                        return new Extraction.Builder().exception(e).build();\n          \n          \n            \n                    }", "author": "JakeMathews", "createdAt": "2020-05-13T20:45:33Z", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/CargoExtractor.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.cargo;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import com.synopsys.integration.bdio.graph.DependencyGraph;\n+import com.synopsys.integration.detectable.Extraction;\n+import com.synopsys.integration.detectable.detectable.codelocation.CodeLocation;\n+import com.synopsys.integration.detectable.detectable.exception.DetectableException;\n+import com.synopsys.integration.detectable.detectables.cargo.parse.CargoLockParser;\n+\n+public class CargoExtractor {\n+\n+    private final CargoLockParser cargoLockParser;\n+\n+    public CargoExtractor(final CargoLockParser cargoLockParser) {\n+        this.cargoLockParser = cargoLockParser;\n+    }\n+\n+    public Extraction extract(final File cargoLock) throws DetectableException {\n+        try (final InputStream goLockInputStream = new FileInputStream(cargoLock)) {\n+            final DependencyGraph graph = cargoLockParser.parseLockFile(goLockInputStream);\n+            final CodeLocation codeLocation = new CodeLocation(graph);\n+            return new Extraction.Builder().success(codeLocation).build();\n+        } catch (final IOException e) {\n+            return new Extraction.Builder().exception(e).build();\n+        }", "originalCommit": "3989330f124dda26b4c96b78f2b5b5c4325e7e61", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyMzI1Ng==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r424723256", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    boolean caughtException = false;\n          \n          \n            \n                    try {\n          \n          \n            \n                        CargoLockParser cargoLockParser = new CargoLockParser();\n          \n          \n            \n                        DependencyGraph graph = cargoLockParser.parseLockFile(FunctionalTestFiles.asInputStream(\"/cargo/invalidSyntax.lock\"));\n          \n          \n            \n                    } catch (DetectableException e) {\n          \n          \n            \n                        caughtException = true;\n          \n          \n            \n                    }\n          \n          \n            \n                    Assertions.assertTrue(caughtException);\n          \n          \n            \n                    CargoLockParser cargoLockParser = new CargoLockParser();\n          \n          \n            \n                    Assertions.assertThrows(DetectableException.class, () -> cargoLockParser.parseLockFile(FunctionalTestFiles.asInputStream(\"/cargo/invalidSyntax.lock\")));", "author": "JakeMathews", "createdAt": "2020-05-13T20:51:03Z", "path": "detectable/src/test/java/com/synopsys/integration/detectable/detectables/cargo/unit/CargoLockParserTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.synopsys.integration.detectable.detectables.cargo.unit;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import com.synopsys.integration.bdio.graph.DependencyGraph;\n+import com.synopsys.integration.bdio.model.Forge;\n+import com.synopsys.integration.detectable.detectable.exception.DetectableException;\n+import com.synopsys.integration.detectable.detectables.cargo.parse.CargoLockParser;\n+import com.synopsys.integration.detectable.util.FunctionalTestFiles;\n+import com.synopsys.integration.detectable.util.graph.NameVersionGraphAssert;\n+\n+public class CargoLockParserTest {\n+\n+    @Test\n+    public void testParsesNamesAndVersionsSimple() throws DetectableException {\n+\n+        CargoLockParser cargoLockParser = new CargoLockParser();\n+        DependencyGraph graph = cargoLockParser.parseLockFile(FunctionalTestFiles.asInputStream(\"/cargo/simpleNameAndVersion.lock\"));\n+\n+        NameVersionGraphAssert graphAssert = new NameVersionGraphAssert(Forge.CRATES, graph);\n+        graphAssert.hasRootSize(2);\n+        graphAssert.hasRootDependency(\"test1\", \"1.0.0\");\n+        graphAssert.hasRootDependency(\"test2\", \"2.0.0\");\n+    }\n+\n+    @Test\n+    public void testParsesNoisyDependencyLines() throws DetectableException {\n+\n+        CargoLockParser cargoLockParser = new CargoLockParser();\n+        DependencyGraph graph = cargoLockParser.parseLockFile(FunctionalTestFiles.asInputStream(\"/cargo/noisyDependencyLines.lock\"));\n+\n+        NameVersionGraphAssert graphAssert = new NameVersionGraphAssert(Forge.CRATES, graph);\n+        graphAssert.hasRootSize(1);\n+        graphAssert.hasRootDependency(\"test1\", \"1.0.0\");\n+        graphAssert.hasParentChildRelationship(\"test1\", \"1.0.0\", \"dep1\", \"0.5.0\");\n+        graphAssert.hasParentChildRelationship(\"test1\", \"1.0.0\", \"dep2\", \"2.0.0\");\n+    }\n+\n+    @Test\n+    public void testCorrectNumberOfRootDependencies() throws DetectableException {\n+        CargoLockParser cargoLockParser = new CargoLockParser();\n+        DependencyGraph graph = cargoLockParser.parseLockFile(FunctionalTestFiles.asInputStream(\"/cargo/dependencyHierarchy.lock\"));\n+\n+        NameVersionGraphAssert graphAssert = new NameVersionGraphAssert(Forge.CRATES, graph);\n+        graphAssert.hasRootSize(1);\n+    }\n+\n+    @Test\n+    public void testCatchInvalidSyntaxInLockFile() {\n+        boolean caughtException = false;\n+        try {\n+            CargoLockParser cargoLockParser = new CargoLockParser();\n+            DependencyGraph graph = cargoLockParser.parseLockFile(FunctionalTestFiles.asInputStream(\"/cargo/invalidSyntax.lock\"));\n+        } catch (DetectableException e) {\n+            caughtException = true;\n+        }\n+        Assertions.assertTrue(caughtException);", "originalCommit": "3989330f124dda26b4c96b78f2b5b5c4325e7e61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE4ODgxNw==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r425188817", "bodyText": "Ooo that's very nice", "author": "crowleySynopsys", "createdAt": "2020-05-14T14:38:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyMzI1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyNDQ5OA==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r424724498", "bodyText": "Does this Toml library require an InputStream? If it can take a String we should do that instead. If not then this is fine.", "author": "JakeMathews", "createdAt": "2020-05-13T20:53:30Z", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/parse/CargoLockParser.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.cargo.parse;\n+\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.moandjiezana.toml.Toml;\n+import com.synopsys.integration.bdio.graph.DependencyGraph;\n+import com.synopsys.integration.bdio.graph.MutableDependencyGraph;\n+import com.synopsys.integration.bdio.graph.MutableMapDependencyGraph;\n+import com.synopsys.integration.bdio.model.Forge;\n+import com.synopsys.integration.bdio.model.dependency.Dependency;\n+import com.synopsys.integration.bdio.model.externalid.ExternalId;\n+import com.synopsys.integration.bdio.model.externalid.ExternalIdFactory;\n+import com.synopsys.integration.detectable.detectable.exception.DetectableException;\n+import com.synopsys.integration.detectable.detectables.cargo.model.CargoLock;\n+import com.synopsys.integration.detectable.detectables.cargo.model.Package;\n+\n+public class CargoLockParser {\n+\n+    private final ExternalIdFactory externalIdFactory = new ExternalIdFactory();\n+\n+    private final Map<String, Dependency> packageMap = new HashMap<>();\n+\n+    public DependencyGraph parseLockFile(final InputStream cargoLockInputStream) throws DetectableException {\n+        try {\n+            final CargoLock cargoLock = new Toml().read(cargoLockInputStream).to(CargoLock.class);", "originalCommit": "3989330f124dda26b4c96b78f2b5b5c4325e7e61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIxNjQ5Mw==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r425216493", "bodyText": "Turns out it can, good call", "author": "crowleySynopsys", "createdAt": "2020-05-14T15:15:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyNDQ5OA=="}], "type": "inlineReview"}, {"oid": "b00fbb6d47e9cbc48e6e11e88fe1062e1f6a73eb", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/b00fbb6d47e9cbc48e6e11e88fe1062e1f6a73eb", "message": "feat(cargo): Cargo detectable now parses a String instead of an InputStream", "committedDate": "2020-05-14T15:18:23Z", "type": "commit"}, {"oid": "68b339776ca4f07e3311871aa73a415e1719d82a", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/68b339776ca4f07e3311871aa73a415e1719d82a", "message": "feat(doc): Updated documentation to detail support for Cargo", "committedDate": "2020-05-15T19:51:14Z", "type": "commit"}, {"oid": "6809df43ac40c5b8e7eff63ac3cd95c1da9d4424", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/6809df43ac40c5b8e7eff63ac3cd95c1da9d4424", "message": "fix(docs): Removed ticket number from cargo support feature", "committedDate": "2020-05-20T17:26:17Z", "type": "commit"}]}