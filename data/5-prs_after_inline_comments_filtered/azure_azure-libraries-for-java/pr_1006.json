{"pr_number": 1006, "pr_title": "Generate network 2019-11 and add support for PublicIPPrefixes", "pr_createdAt": "2020-02-06T04:18:22Z", "pr_url": "https://github.com/Azure/azure-libraries-for-java/pull/1006", "timeline": [{"oid": "d4b7bc6289480a85e06a1a2b90051f74d1c0adb5", "url": "https://github.com/Azure/azure-libraries-for-java/commit/d4b7bc6289480a85e06a1a2b90051f74d1c0adb5", "message": "Generate network package 2019_11.", "committedDate": "2020-01-30T06:57:47Z", "type": "commit"}, {"oid": "d1b0eeb5a0afab50482318deab4a243a5cad7487", "url": "https://github.com/Azure/azure-libraries-for-java/commit/d1b0eeb5a0afab50482318deab4a243a5cad7487", "message": "Fix compilation errors.", "committedDate": "2020-01-30T10:20:39Z", "type": "commit"}, {"oid": "c721c3297a934a5762aad8117c155f3d4c58b2f8", "url": "https://github.com/Azure/azure-libraries-for-java/commit/c721c3297a934a5762aad8117c155f3d4c58b2f8", "message": "Fix test record sessions.", "committedDate": "2020-02-05T06:42:52Z", "type": "commit"}, {"oid": "5b479052e14c8440d2af6be79c67cda38a9f2469", "url": "https://github.com/Azure/azure-libraries-for-java/commit/5b479052e14c8440d2af6be79c67cda38a9f2469", "message": "Add public IP prefixes support.", "committedDate": "2020-02-06T04:17:35Z", "type": "commit"}, {"oid": "1e0ea5e7908a8ce7de1067a981f8cff2391ae843", "url": "https://github.com/Azure/azure-libraries-for-java/commit/1e0ea5e7908a8ce7de1067a981f8cff2391ae843", "message": "Fix checkstyle & javadoc happy.", "committedDate": "2020-02-06T06:14:49Z", "type": "commit"}, {"oid": "cbb2e2295f2e5561b8bb890514b4235b9816a911", "url": "https://github.com/Azure/azure-libraries-for-java/commit/cbb2e2295f2e5561b8bb890514b4235b9816a911", "message": "Update test record sessions.", "committedDate": "2020-02-06T09:40:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc1MTk0Ng==", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1006#discussion_r375751946", "bodyText": "Better to delete this line, else next generation this file will be deleted.", "author": "weidongxu-microsoft", "createdAt": "2020-02-06T10:24:25Z", "path": "azure-mgmt-network/src/main/java/com/microsoft/azure/management/network/PublicIPPrefix.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\r\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\r\n+ * Licensed under the MIT License. See License.txt in the project root for\r\n+ * license information.\r\n+ * <p>\r\n+ * Code generated by Microsoft (R) AutoRest Code Generator.\r", "originalCommit": "5b479052e14c8440d2af6be79c67cda38a9f2469", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc1MzQyMA==", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1006#discussion_r375753420", "bodyText": "Do we need to use Collections.unmodifiableList?", "author": "weidongxu-microsoft", "createdAt": "2020-02-06T10:27:17Z", "path": "azure-mgmt-network/src/main/java/com/microsoft/azure/management/network/implementation/PublicIPPrefixImpl.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/**\r\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\r\n+ * Licensed under the MIT License. See License.txt in the project root for\r\n+ * license information.\r\n+ */\r\n+\r\n+package com.microsoft.azure.management.network.implementation;\r\n+\r\n+\r\n+import com.microsoft.azure.SubResource;\r\n+import com.microsoft.azure.management.network.IPVersion;\r\n+import com.microsoft.azure.management.network.IpTag;\r\n+import com.microsoft.azure.management.network.ProvisioningState;\r\n+import com.microsoft.azure.management.network.PublicIPPrefix;\r\n+import com.microsoft.azure.management.network.PublicIPPrefixSku;\r\n+import com.microsoft.azure.management.network.ReferencedPublicIpAddress;\r\n+import com.microsoft.azure.management.network.model.AppliableWithTags;\r\n+import com.microsoft.azure.management.resources.fluentcore.arm.models.implementation.GroupableResourceImpl;\r\n+import com.microsoft.rest.ServiceCallback;\r\n+import com.microsoft.rest.ServiceFuture;\r\n+import rx.Observable;\r\n+import rx.functions.Func1;\r\n+\r\n+import java.util.List;\r\n+\r\n+class PublicIPPrefixImpl extends GroupableResourceImpl<PublicIPPrefix, PublicIPPrefixInner, PublicIPPrefixImpl, NetworkManager>\r\n+        implements PublicIPPrefix,\r\n+        PublicIPPrefix.Definition,\r\n+        PublicIPPrefix.Update,\r\n+        AppliableWithTags<PublicIPPrefix> {\r\n+\r\n+    PublicIPPrefixImpl(String name, PublicIPPrefixInner inner, NetworkManager manager) {\r\n+        super(name, inner, manager);\r\n+    }\r\n+\r\n+    @Override\r\n+    public Observable<PublicIPPrefix> createResourceAsync() {\r\n+        PublicIPPrefixesInner client = this.manager().inner().publicIPPrefixes();\r\n+        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())\r\n+                .map(innerToFluentMap(this));\r\n+    }\r\n+\r\n+    @Override\r\n+    public Observable<PublicIPPrefix> updateResourceAsync() {\r\n+        PublicIPPrefixesInner client = this.manager().inner().publicIPPrefixes();\r\n+        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())\r\n+                .map(innerToFluentMap(this));\r\n+    }\r\n+\r\n+    @Override\r\n+    protected Observable<PublicIPPrefixInner> getInnerAsync() {\r\n+        PublicIPPrefixesInner client = this.manager().inner().publicIPPrefixes();\r\n+        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());\r\n+    }\r\n+\r\n+    @Override\r\n+    public PublicIPPrefixImpl updateTags() {\r\n+        return this;\r\n+    }\r\n+\r\n+    @Override\r\n+    public PublicIPPrefix applyTags() {\r\n+        return applyTagsAsync().toBlocking().last();\r\n+    }\r\n+\r\n+    @Override\r\n+    public Observable<PublicIPPrefix> applyTagsAsync() {\r\n+        return this.manager().inner().publicIPPrefixes().updateTagsAsync(resourceGroupName(), name(), inner().getTags())\r\n+                .flatMap(new Func1<PublicIPPrefixInner, Observable<PublicIPPrefix>>() {\r\n+                    @Override\r\n+                    public Observable<PublicIPPrefix> call(PublicIPPrefixInner inner) {\r\n+                        setInner(inner);\r\n+                        return Observable.just((PublicIPPrefix) PublicIPPrefixImpl.this);\r\n+                    }\r\n+                });\r\n+    }\r\n+\r\n+    @Override\r\n+    public ServiceFuture<PublicIPPrefix> applyTagsAsync(ServiceCallback<PublicIPPrefix> callback) {\r\n+        return ServiceFuture.fromBody(applyTagsAsync(), callback);\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean isInCreateMode() {\r\n+        return this.inner().id() == null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String ipPrefix() {\r\n+        return this.inner().ipPrefix();\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<IpTag> ipTags() {\r\n+        return this.inner().ipTags();\r\n+    }\r\n+\r\n+    @Override\r\n+    public SubResource loadBalancerFrontendIpConfiguration() {\r\n+        return this.inner().loadBalancerFrontendIpConfiguration();\r\n+    }\r\n+\r\n+    @Override\r\n+    public Integer prefixLength() {\r\n+        return this.inner().prefixLength();\r\n+    }\r\n+\r\n+    @Override\r\n+    public ProvisioningState provisioningState() {\r\n+        return this.inner().provisioningState();\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<ReferencedPublicIpAddress> publicIPAddresses() {\r\n+        return this.inner().publicIPAddresses();\r", "originalCommit": "5b479052e14c8440d2af6be79c67cda38a9f2469", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}