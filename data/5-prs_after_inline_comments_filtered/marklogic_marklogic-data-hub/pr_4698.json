{"pr_number": 4698, "pr_title": "DHFPROD-5988: Adding temporal collections", "pr_createdAt": "2020-10-09T22:05:45Z", "pr_url": "https://github.com/marklogic/marklogic-data-hub/pull/4698", "timeline": [{"oid": "bd0b077c2d11221c834ef81a72b4fce32ba580d2", "url": "https://github.com/marklogic/marklogic-data-hub/commit/bd0b077c2d11221c834ef81a72b4fce32ba580d2", "message": "DHFPROD-5988: Adding temporal collections\n\nAdding ingest temporal test", "committedDate": "2020-10-09T22:02:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk4ODM0NA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4698#discussion_r502988344", "bodyText": "Let's not change what was here - as the comments noted, data-hub-developer should work here. But the test was failing intermittently. Since the purpose of this test isn't to verify that a data-hub-developer can deploy temporal resources, it's fine to run it as admin.", "author": "rjrudin", "createdAt": "2020-10-12T00:33:42Z", "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/flow/TemporalWriteTest.java", "diffHunk": "@@ -17,18 +19,21 @@\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.util.stream.Stream;\n+\n import static com.marklogic.client.io.DocumentMetadataHandle.Capability.*;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n public class TemporalWriteTest extends AbstractHubCoreTest {\n \n+    private InputEndpoint.BulkInputCaller bulkInputCaller;\n+\n     @BeforeEach\n     void setUp() {\n-        // In theory, a data-hub-developer should be able to deploy these temporal resources. But when run in the\n-        // full suite, this test sometimes fails, presumably due to changes made by a previous test to the databases.\n-        // Since the purpose of this test is to verify that temporal documents can be written as an operator and not\n-        // to verify that a developer can deploy these things (we have other tests for that), admin is used here\n-        runAsAdmin();\n+        runAsDataHubDeveloper();", "originalCommit": "bd0b077c2d11221c834ef81a72b4fce32ba580d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUyNTY2Nw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4698#discussion_r503525667", "bodyText": "Done", "author": "SameeraPriyathamTadikonda", "createdAt": "2020-10-12T20:51:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk4ODM0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk4ODQ2OQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4698#discussion_r502988469", "bodyText": "Pinging @anu3990 - let's get this PR merged before your PR is merged that moves this module, that will avoid merge conflicts.", "author": "rjrudin", "createdAt": "2020-10-12T00:34:42Z", "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/flow/TemporalWriteTest.java", "diffHunk": "@@ -75,15 +79,45 @@ void writeTemporalFile() {\n             \"declareUpdate();\\n\" +\n             \"temporal.documentDelete('temporal/test', '/temporal/ingestion/test.json');\";\n \n-        try{\n+        try {\n             runAsDataHubOperator().newStagingClient().newServerEval().javascript(deleteTemporalDoc).eval();\n-        }\n-        catch (Exception e){\n+        } catch (Exception e) {\n             logger.error(\"Document deletion failed: \", e);\n             Assertions.fail(\"dh-operator should be able to delete the document\");\n         }\n     }\n \n+    @Test\n+    void ingestDocWithTemporalCollecion() {\n+        String collections = \"fruits,stuff,temporal/test\";\n+        ObjectNode workUnit = objectMapper.createObjectNode();\n+        workUnit.put(\"uriprefix\", \"/bulkJavaTest/\");\n+        workUnit.put(\"collections\", collections);\n+        runAsDataHubOperator();\n+        InputEndpoint endpoint = InputEndpoint.on(\n+            getHubClient().getStagingClient(),\n+            getHubClient().getModulesClient().newTextDocumentManager().read(\"/data-hub/5/data-services/ingestion/bulkIngester.api\", new StringHandle())", "originalCommit": "bd0b077c2d11221c834ef81a72b4fce32ba580d2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4e5a8dd4f4b85fa1b0bfd675724f6e79bced80a3", "url": "https://github.com/marklogic/marklogic-data-hub/commit/4e5a8dd4f4b85fa1b0bfd675724f6e79bced80a3", "message": "DHFPROD-5988: Adding temporal collections\n\nAdding ingest temporal test", "committedDate": "2020-10-12T20:48:55Z", "type": "forcePushed"}, {"oid": "7ba15b982670f87366bfd1b323563a23eb499184", "url": "https://github.com/marklogic/marklogic-data-hub/commit/7ba15b982670f87366bfd1b323563a23eb499184", "message": "DHFPROD-5988: Adding temporal collections\n\nAdding ingest temporal test", "committedDate": "2020-10-12T20:50:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzMzQzMw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4698#discussion_r503533433", "bodyText": "We don't want this as a field, as it's only used by one test as a local variable.", "author": "rjrudin", "createdAt": "2020-10-12T21:09:32Z", "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/flow/TemporalWriteTest.java", "diffHunk": "@@ -17,11 +19,18 @@\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.util.stream.Stream;\n+\n import static com.marklogic.client.io.DocumentMetadataHandle.Capability.*;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n public class TemporalWriteTest extends AbstractHubCoreTest {\n \n+    private InputEndpoint.BulkInputCaller bulkInputCaller;", "originalCommit": "7ba15b982670f87366bfd1b323563a23eb499184", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU1MTU4OQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4698#discussion_r503551589", "bodyText": "Using it as localvariable", "author": "SameeraPriyathamTadikonda", "createdAt": "2020-10-12T21:48:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzMzQzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzMzczMQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4698#discussion_r503533731", "bodyText": "This is only used once, and it's one line of code, so it's indirection that doesn't buy us anything - just put that one line of code in the one place where this method is invoked.", "author": "rjrudin", "createdAt": "2020-10-12T21:10:19Z", "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/flow/TemporalWriteTest.java", "diffHunk": "@@ -134,4 +172,21 @@ private void addFieldAndIndexes() {\n         systemEndIndex.put(\"range-value-positions\", false);\n         new DatabaseManager(getHubConfig().getManageClient()).save(newNode.toString());\n     }\n+\n+    private InputStream asInputStream(String value) {", "originalCommit": "7ba15b982670f87366bfd1b323563a23eb499184", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU1MTY0NA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4698#discussion_r503551644", "bodyText": "Moved to the method", "author": "SameeraPriyathamTadikonda", "createdAt": "2020-10-12T21:48:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzMzczMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzNDA3MA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4698#discussion_r503534070", "bodyText": "Same thing, this is only used once - just move the one line of code here to getDocumentMetadata.", "author": "rjrudin", "createdAt": "2020-10-12T21:11:05Z", "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/flow/TemporalWriteTest.java", "diffHunk": "@@ -134,4 +172,21 @@ private void addFieldAndIndexes() {\n         systemEndIndex.put(\"range-value-positions\", false);\n         new DatabaseManager(getHubConfig().getManageClient()).save(newNode.toString());\n     }\n+\n+    private InputStream asInputStream(String value) {\n+        return new ByteArrayInputStream(value.getBytes());\n+    }\n+\n+    private DocumentMetadataHandle getDocumentMetadata() {\n+        String[] uris = getDocUris();\n+        assertTrue(uris.length > 0, \"Expected at least one fruit URI, found zero\");\n+        return getHubClient().getStagingClient().newDocumentManager().readMetadata(uris[0], new DocumentMetadataHandle());\n+    }\n+\n+    private String[] getDocUris() {", "originalCommit": "7ba15b982670f87366bfd1b323563a23eb499184", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU1MTcxMw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4698#discussion_r503551713", "bodyText": "Moved to getDocumentMetadata", "author": "SameeraPriyathamTadikonda", "createdAt": "2020-10-12T21:48:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzNDA3MA=="}], "type": "inlineReview"}, {"oid": "c8dd6917561bc76fef7a740d260818d93475d331", "url": "https://github.com/marklogic/marklogic-data-hub/commit/c8dd6917561bc76fef7a740d260818d93475d331", "message": "DHFPROD-5988: Adding temporal collections\n\nAdding ingest temporal test", "committedDate": "2020-10-12T21:47:34Z", "type": "forcePushed"}, {"oid": "09bd64bb0f7c56c89fd12df93f01cf4770f7effc", "url": "https://github.com/marklogic/marklogic-data-hub/commit/09bd64bb0f7c56c89fd12df93f01cf4770f7effc", "message": "DHFPROD-5988: Adding temporal collections\n\nAdding ingest temporal test", "committedDate": "2020-10-12T22:18:28Z", "type": "commit"}, {"oid": "09bd64bb0f7c56c89fd12df93f01cf4770f7effc", "url": "https://github.com/marklogic/marklogic-data-hub/commit/09bd64bb0f7c56c89fd12df93f01cf4770f7effc", "message": "DHFPROD-5988: Adding temporal collections\n\nAdding ingest temporal test", "committedDate": "2020-10-12T22:18:28Z", "type": "forcePushed"}]}