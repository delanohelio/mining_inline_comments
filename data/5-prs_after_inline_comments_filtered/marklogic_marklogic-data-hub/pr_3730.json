{"pr_number": 3730, "pr_title": "DHFPROD-3647: Save personal search query and its associated filters", "pr_createdAt": "2020-03-19T19:21:19Z", "pr_url": "https://github.com/marklogic/marklogic-data-hub/pull/3730", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI5ODg0OA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3730#discussion_r395298848", "bodyText": "No need to change now, but there's a ResponseEntity.ok method you can use to get this all done in one line of code (I think by rule, a controller method should be one line of code, but there will of course be exceptions).\nThere's also ResponseEntity.created, but it requires a URI - which makes me think that perhaps the saveQueryDocument method should just return the queryId?", "author": "rjrudin", "createdAt": "2020-03-19T20:24:52Z", "path": "one-ui/src/main/java/com/marklogic/hub/oneui/controllers/SavedQueriesController.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package com.marklogic.hub.oneui.controllers;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.marklogic.hub.oneui.managers.SavedQueriesManager;\n+import com.marklogic.hub.oneui.models.HubConfigSession;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.context.annotation.ScopedProxyMode;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+@Controller\n+@RequestMapping(value = \"/api/savedQueries\")\n+public class SavedQueriesController {\n+\n+    @Autowired\n+    private SavedQueriesManager savedQueriesManager;\n+\n+    @Autowired\n+    private HubConfigSession hubConfig;\n+\n+    @Bean\n+    @Scope(proxyMode = ScopedProxyMode.TARGET_CLASS, value = \"request\")\n+    SavedQueriesManager savedQueriesManager() {\n+        return new SavedQueriesManager(hubConfig);\n+    }\n+\n+    @RequestMapping(method = RequestMethod.POST)\n+    @ResponseBody\n+    public ResponseEntity<JsonNode> saveQueryDocument(@RequestBody JsonNode queryDocument) {\n+        JsonNode savedQuery = savedQueriesManager.saveOrUpdateQueryDocument(queryDocument);\n+        return new ResponseEntity<>(savedQuery, HttpStatus.CREATED);\n+    }\n+\n+    @RequestMapping(method = RequestMethod.PUT)\n+    @ResponseBody\n+    public ResponseEntity<JsonNode> updateQueryDocument(@RequestBody JsonNode queryDocument) {\n+        JsonNode savedQuery = savedQueriesManager.saveOrUpdateQueryDocument(queryDocument);\n+        return new ResponseEntity<>(savedQuery, HttpStatus.OK);", "originalCommit": "0822bf6cd052cbc1a15e24826cc4e1dddd9b8d33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI5OTAxNw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3730#discussion_r395299017", "bodyText": "I don't think Bean is buying you anything here, right? I think the method works the same without these two annotations on it. I recommend removing them to avoid any confusion.", "author": "rjrudin", "createdAt": "2020-03-19T20:25:14Z", "path": "one-ui/src/main/java/com/marklogic/hub/oneui/controllers/SavedQueriesController.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package com.marklogic.hub.oneui.controllers;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.marklogic.hub.oneui.managers.SavedQueriesManager;\n+import com.marklogic.hub.oneui.models.HubConfigSession;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.context.annotation.ScopedProxyMode;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+@Controller\n+@RequestMapping(value = \"/api/savedQueries\")\n+public class SavedQueriesController {\n+\n+    @Autowired\n+    private SavedQueriesManager savedQueriesManager;\n+\n+    @Autowired\n+    private HubConfigSession hubConfig;\n+\n+    @Bean", "originalCommit": "0822bf6cd052cbc1a15e24826cc4e1dddd9b8d33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI5OTMxNQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3730#discussion_r395299315", "bodyText": "You don't need this if you're using savedQueriesManager(), right?", "author": "rjrudin", "createdAt": "2020-03-19T20:25:44Z", "path": "one-ui/src/main/java/com/marklogic/hub/oneui/controllers/SavedQueriesController.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package com.marklogic.hub.oneui.controllers;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.marklogic.hub.oneui.managers.SavedQueriesManager;\n+import com.marklogic.hub.oneui.models.HubConfigSession;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.context.annotation.ScopedProxyMode;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+@Controller\n+@RequestMapping(value = \"/api/savedQueries\")\n+public class SavedQueriesController {\n+\n+    @Autowired\n+    private SavedQueriesManager savedQueriesManager;", "originalCommit": "0822bf6cd052cbc1a15e24826cc4e1dddd9b8d33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI5OTc5OA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3730#discussion_r395299798", "bodyText": "Does this really work? I'm thinking this will break because newFinalClient() passes in a finalDbName, which will cause Data Services to throw an error. I think you want newFinalClient(null).", "author": "rjrudin", "createdAt": "2020-03-19T20:26:37Z", "path": "one-ui/src/main/java/com/marklogic/hub/oneui/managers/SavedQueriesManager.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.marklogic.hub.oneui.managers;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.marklogic.client.DatabaseClient;\n+import com.marklogic.client.MarkLogicServerException;\n+import com.marklogic.hub.HubConfig;\n+import com.marklogic.hub.dataservices.SavedQueriesService;\n+import com.marklogic.hub.oneui.exceptions.BadRequestException;\n+import com.marklogic.hub.oneui.exceptions.DataHubException;\n+\n+public class SavedQueriesManager {\n+\n+    private DatabaseClient finalDataServiceClient;\n+\n+    public SavedQueriesManager(HubConfig hubConfig) {\n+        finalDataServiceClient = hubConfig.newFinalClient();", "originalCommit": "0822bf6cd052cbc1a15e24826cc4e1dddd9b8d33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMwMTExMw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3730#discussion_r395301113", "bodyText": "Also, instead of hanging onto a reference to the DatabaseClient, why not instantiate the SavedQueriesService here?", "author": "rjrudin", "createdAt": "2020-03-19T20:29:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI5OTc5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMwMDc0Mg==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3730#discussion_r395300742", "bodyText": "What's the purpose of wrapping this in a DataHubException?", "author": "rjrudin", "createdAt": "2020-03-19T20:28:24Z", "path": "one-ui/src/main/java/com/marklogic/hub/oneui/managers/SavedQueriesManager.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.marklogic.hub.oneui.managers;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.marklogic.client.DatabaseClient;\n+import com.marklogic.client.MarkLogicServerException;\n+import com.marklogic.hub.HubConfig;\n+import com.marklogic.hub.dataservices.SavedQueriesService;\n+import com.marklogic.hub.oneui.exceptions.BadRequestException;\n+import com.marklogic.hub.oneui.exceptions.DataHubException;\n+\n+public class SavedQueriesManager {\n+\n+    private DatabaseClient finalDataServiceClient;\n+\n+    public SavedQueriesManager(HubConfig hubConfig) {\n+        finalDataServiceClient = hubConfig.newFinalClient();\n+    }\n+\n+    public JsonNode saveOrUpdateQueryDocument(JsonNode queryDocument) {\n+        if (queryDocument == null || queryDocument.get(\"savedQuery\") == null) {\n+            throw new BadRequestException(\"The request is empty or malformed\");\n+        }\n+\n+        if (queryDocument.get(\"savedQuery\").get(\"name\") == null || queryDocument.get(\"savedQuery\").get(\"name\").asText().isEmpty()) {\n+            throw new BadRequestException(\"Query name is missing\");\n+        }\n+\n+        if (queryDocument.get(\"savedQuery\").get(\"query\") == null || queryDocument.get(\"savedQuery\").get(\"query\").isEmpty()) {\n+            throw new BadRequestException(\"Query to be saved cannot be empty\");\n+        }\n+\n+        if (queryDocument.get(\"savedQuery\").get(\"propertiesToDisplay\") == null || queryDocument.get(\"savedQuery\")\n+                .get(\"propertiesToDisplay\").isEmpty()) {\n+            throw new BadRequestException(\"Entity type properties to be displayed cannot be empty\");\n+        }\n+\n+        try {\n+            return SavedQueriesService.on(finalDataServiceClient).saveSavedQuery(queryDocument);\n+        } catch (MarkLogicServerException mse) {\n+            throw new DataHubException(mse.getServerMessage(), mse);", "originalCommit": "0822bf6cd052cbc1a15e24826cc4e1dddd9b8d33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMwMjI0MA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3730#discussion_r395302240", "bodyText": "We don't want to autowire in Manager classes - just create one with the HubConfig in the test framework.", "author": "rjrudin", "createdAt": "2020-03-19T20:31:17Z", "path": "one-ui/src/test/java/com/marklogic/hub/oneui/managers/SavedQueriesManagerTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.marklogic.hub.oneui.managers;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.hub.oneui.Application;\n+import com.marklogic.hub.oneui.TestHelper;\n+import com.marklogic.hub.oneui.exceptions.BadRequestException;\n+import org.junit.jupiter.api.*;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+@ExtendWith(SpringExtension.class)\n+@SpringBootTest(classes = {Application.class})\n+public class SavedQueriesManagerTest extends TestHelper {\n+\n+    @Autowired\n+    private SavedQueriesManager savedQueriesManager;", "originalCommit": "0822bf6cd052cbc1a15e24826cc4e1dddd9b8d33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMwMzE4NA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3730#discussion_r395303184", "bodyText": "I think all of this logic should be in the DS endpoint - this is all validation logic, and similar to artifacts, we want to enforce this in the DS, not in Java code.\nBy doing that, you don't even need this class - the controller can just interact directly with the SavedQueryService.\nAlso, @ryanjdew - this seems like a case in the future where we could use JSON schema to validate the incoming JSON so we don't have to write a lot of imperative code like this, right?", "author": "rjrudin", "createdAt": "2020-03-19T20:33:10Z", "path": "one-ui/src/main/java/com/marklogic/hub/oneui/managers/SavedQueriesManager.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.marklogic.hub.oneui.managers;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.marklogic.client.DatabaseClient;\n+import com.marklogic.client.MarkLogicServerException;\n+import com.marklogic.hub.HubConfig;\n+import com.marklogic.hub.dataservices.SavedQueriesService;\n+import com.marklogic.hub.oneui.exceptions.BadRequestException;\n+import com.marklogic.hub.oneui.exceptions.DataHubException;\n+\n+public class SavedQueriesManager {\n+\n+    private DatabaseClient finalDataServiceClient;\n+\n+    public SavedQueriesManager(HubConfig hubConfig) {\n+        finalDataServiceClient = hubConfig.newFinalClient();\n+    }\n+\n+    public JsonNode saveOrUpdateQueryDocument(JsonNode queryDocument) {\n+        if (queryDocument == null || queryDocument.get(\"savedQuery\") == null) {", "originalCommit": "0822bf6cd052cbc1a15e24826cc4e1dddd9b8d33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1617720c2effe03bd5e91760b644aa15a34f9aea", "url": "https://github.com/marklogic/marklogic-data-hub/commit/1617720c2effe03bd5e91760b644aa15a34f9aea", "message": "DHFPROD-3647: Save personal search query and its associated filters\n\nDHFPROD-3647: Adding reader and writer roles for saved query documents\n\nDHFPROD-3647: Save Query dataservice modules\n\nDHFPROD-3647: Optimizing code", "committedDate": "2020-03-23T07:35:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgyMjA3OQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3730#discussion_r396822079", "bodyText": "There's no need for a separate test here. Just add these assertions to the first test for creating a saved query here.", "author": "rjrudin", "createdAt": "2020-03-23T23:35:07Z", "path": "one-ui/src/test/java/com/marklogic/hub/oneui/controllers/SavedQueriesControllerTest.java", "diffHunk": "@@ -0,0 +1,215 @@\n+package com.marklogic.hub.oneui.controllers;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.FailedRequestException;\n+import com.marklogic.client.document.GenericDocumentManager;\n+import com.marklogic.client.io.DocumentMetadataHandle;\n+import com.marklogic.hub.DatabaseKind;\n+import com.marklogic.hub.oneui.Application;\n+import com.marklogic.hub.oneui.TestHelper;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+@ExtendWith(SpringExtension.class)\n+@SpringBootTest(classes = {Application.class})\n+public class SavedQueriesControllerTest extends TestHelper {\n+\n+    private static JsonNode queryDoc;\n+\n+    @Autowired\n+    private SavedQueriesController savedQueriesController;\n+\n+    @BeforeEach\n+    void before() throws JsonProcessingException {\n+        authenticateSession();\n+        String jsonString = \"{\\n\" +\n+                \"  \\\"savedQuery\\\": {\\n\" +\n+                \"    \\\"id\\\": \\\"\\\",\\n\" +\n+                \"    \\\"name\\\": \\\"some-query\\\",\\n\" +\n+                \"    \\\"description\\\": \\\"some-query-description\\\",\\n\" +\n+                \"    \\\"query\\\": {\\n\" +\n+                \"      \\\"searchText\\\": \\\"some-string\\\",\\n\" +\n+                \"      \\\"entityTypeIds\\\": [\\n\" +\n+                \"        \\\"Entity1\\\"\\n\" +\n+                \"      ],\\n\" +\n+                \"      \\\"selectedFacets\\\": {\\n\" +\n+                \"        \\\"Collection\\\": {\\n\" +\n+                \"          \\\"dataType\\\": \\\"string\\\",\\n\" +\n+                \"          \\\"stringValues\\\": [\\n\" +\n+                \"            \\\"Entity1\\\",\\n\" +\n+                \"            \\\"Collection1\\\"\\n\" +\n+                \"          ]\\n\" +\n+                \"        },\\n\" +\n+                \"        \\\"facet1\\\": {\\n\" +\n+                \"          \\\"dataType\\\": \\\"decimal\\\",\\n\" +\n+                \"          \\\"rangeValues\\\": {\\n\" +\n+                \"            \\\"lowerBound\\\": \\\"2.5\\\",\\n\" +\n+                \"            \\\"upperBound\\\": \\\"15\\\"\\n\" +\n+                \"          }\\n\" +\n+                \"        },\\n\" +\n+                \"        \\\"facet2\\\": {\\n\" +\n+                \"          \\\"dataType\\\": \\\"dateTime\\\",\\n\" +\n+                \"          \\\"rangeValues\\\": {\\n\" +\n+                \"            \\\"lowerBound\\\": \\\"2020-01-01T13:06:17\\\",\\n\" +\n+                \"            \\\"upperBound\\\": \\\"2020-01-22T13:06:17\\\"\\n\" +\n+                \"          }\\n\" +\n+                \"        }\\n\" +\n+                \"      }\\n\" +\n+                \"    },\\n\" +\n+                \"    \\\"propertiesToDisplay\\\": [\\\"facet1\\\", \\\"EntityTypeProperty1\\\"]\\n\" +\n+                \"  }\\n\" +\n+                \"}\";\n+        ObjectMapper mapper = new ObjectMapper();\n+        queryDoc = mapper.readTree(jsonString);\n+    }\n+\n+    @Test\n+    void testSaveNewQuery() {\n+        ResponseEntity<JsonNode> response = savedQueriesController.saveQueryDocument(queryDoc);\n+        JsonNode responseBody = response.getBody();\n+\n+        Assertions.assertEquals(201, response.getStatusCodeValue());\n+        Assertions.assertNotNull(responseBody);\n+        Assertions.assertNotNull(responseBody.get(\"savedQuery\"));\n+        Assertions.assertNotNull(responseBody.get(\"savedQuery\").get(\"id\"));\n+        Assertions.assertNotNull(responseBody.get(\"savedQuery\").get(\"systemMetadata\"));\n+        Assertions.assertEquals(\"some-query\", responseBody.get(\"savedQuery\").get(\"name\").asText());\n+        Assertions.assertEquals(4, responseBody.get(\"savedQuery\").get(\"systemMetadata\").size());\n+        Assertions.assertEquals(\"test-data-hub-developer\", responseBody.get(\"savedQuery\").get(\"owner\").asText());\n+        Assertions.assertEquals(\"test-data-hub-developer\", responseBody.get(\"savedQuery\").get(\"systemMetadata\").get(\"createdBy\").asText());\n+    }\n+\n+    @Test\n+    void testModifyExistingQuery() {\n+        JsonNode firstResponse = savedQueriesController.saveQueryDocument(queryDoc).getBody();\n+        ObjectNode savedQueryNode = (ObjectNode) firstResponse.get(\"savedQuery\");\n+        String id = savedQueryNode.get(\"id\").asText();\n+        savedQueryNode.put(\"name\", \"modified-name\");\n+        ResponseEntity<JsonNode> modifiedResponse = savedQueriesController.updateQueryDocument(firstResponse);\n+        JsonNode modifiedResponseBody = modifiedResponse.getBody();\n+\n+        Assertions.assertEquals(200, modifiedResponse.getStatusCodeValue());\n+        Assertions.assertNotNull(modifiedResponseBody);\n+        Assertions.assertEquals(id, modifiedResponseBody.get(\"savedQuery\").get(\"id\").asText());\n+        Assertions.assertEquals(\"test-data-hub-developer\", modifiedResponseBody.get(\"savedQuery\").get(\"owner\").asText());\n+        Assertions.assertEquals(\"modified-name\", modifiedResponseBody.get(\"savedQuery\").get(\"name\").asText());\n+    }\n+\n+    @Test\n+    void testCollectionsAndPermissionOnSavedQuery() {\n+        JsonNode response = savedQueriesController.saveQueryDocument(queryDoc).getBody();", "originalCommit": "1617720c2effe03bd5e91760b644aa15a34f9aea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgyMjI0MQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3730#discussion_r396822241", "bodyText": "Same thing, just add these assertions to the test for modifying a query.\nReally, you can cover both things - creating a query and modifying it - in the same test.", "author": "rjrudin", "createdAt": "2020-03-23T23:35:36Z", "path": "one-ui/src/test/java/com/marklogic/hub/oneui/controllers/SavedQueriesControllerTest.java", "diffHunk": "@@ -0,0 +1,215 @@\n+package com.marklogic.hub.oneui.controllers;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.FailedRequestException;\n+import com.marklogic.client.document.GenericDocumentManager;\n+import com.marklogic.client.io.DocumentMetadataHandle;\n+import com.marklogic.hub.DatabaseKind;\n+import com.marklogic.hub.oneui.Application;\n+import com.marklogic.hub.oneui.TestHelper;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+@ExtendWith(SpringExtension.class)\n+@SpringBootTest(classes = {Application.class})\n+public class SavedQueriesControllerTest extends TestHelper {\n+\n+    private static JsonNode queryDoc;\n+\n+    @Autowired\n+    private SavedQueriesController savedQueriesController;\n+\n+    @BeforeEach\n+    void before() throws JsonProcessingException {\n+        authenticateSession();\n+        String jsonString = \"{\\n\" +\n+                \"  \\\"savedQuery\\\": {\\n\" +\n+                \"    \\\"id\\\": \\\"\\\",\\n\" +\n+                \"    \\\"name\\\": \\\"some-query\\\",\\n\" +\n+                \"    \\\"description\\\": \\\"some-query-description\\\",\\n\" +\n+                \"    \\\"query\\\": {\\n\" +\n+                \"      \\\"searchText\\\": \\\"some-string\\\",\\n\" +\n+                \"      \\\"entityTypeIds\\\": [\\n\" +\n+                \"        \\\"Entity1\\\"\\n\" +\n+                \"      ],\\n\" +\n+                \"      \\\"selectedFacets\\\": {\\n\" +\n+                \"        \\\"Collection\\\": {\\n\" +\n+                \"          \\\"dataType\\\": \\\"string\\\",\\n\" +\n+                \"          \\\"stringValues\\\": [\\n\" +\n+                \"            \\\"Entity1\\\",\\n\" +\n+                \"            \\\"Collection1\\\"\\n\" +\n+                \"          ]\\n\" +\n+                \"        },\\n\" +\n+                \"        \\\"facet1\\\": {\\n\" +\n+                \"          \\\"dataType\\\": \\\"decimal\\\",\\n\" +\n+                \"          \\\"rangeValues\\\": {\\n\" +\n+                \"            \\\"lowerBound\\\": \\\"2.5\\\",\\n\" +\n+                \"            \\\"upperBound\\\": \\\"15\\\"\\n\" +\n+                \"          }\\n\" +\n+                \"        },\\n\" +\n+                \"        \\\"facet2\\\": {\\n\" +\n+                \"          \\\"dataType\\\": \\\"dateTime\\\",\\n\" +\n+                \"          \\\"rangeValues\\\": {\\n\" +\n+                \"            \\\"lowerBound\\\": \\\"2020-01-01T13:06:17\\\",\\n\" +\n+                \"            \\\"upperBound\\\": \\\"2020-01-22T13:06:17\\\"\\n\" +\n+                \"          }\\n\" +\n+                \"        }\\n\" +\n+                \"      }\\n\" +\n+                \"    },\\n\" +\n+                \"    \\\"propertiesToDisplay\\\": [\\\"facet1\\\", \\\"EntityTypeProperty1\\\"]\\n\" +\n+                \"  }\\n\" +\n+                \"}\";\n+        ObjectMapper mapper = new ObjectMapper();\n+        queryDoc = mapper.readTree(jsonString);\n+    }\n+\n+    @Test\n+    void testSaveNewQuery() {\n+        ResponseEntity<JsonNode> response = savedQueriesController.saveQueryDocument(queryDoc);\n+        JsonNode responseBody = response.getBody();\n+\n+        Assertions.assertEquals(201, response.getStatusCodeValue());\n+        Assertions.assertNotNull(responseBody);\n+        Assertions.assertNotNull(responseBody.get(\"savedQuery\"));\n+        Assertions.assertNotNull(responseBody.get(\"savedQuery\").get(\"id\"));\n+        Assertions.assertNotNull(responseBody.get(\"savedQuery\").get(\"systemMetadata\"));\n+        Assertions.assertEquals(\"some-query\", responseBody.get(\"savedQuery\").get(\"name\").asText());\n+        Assertions.assertEquals(4, responseBody.get(\"savedQuery\").get(\"systemMetadata\").size());\n+        Assertions.assertEquals(\"test-data-hub-developer\", responseBody.get(\"savedQuery\").get(\"owner\").asText());\n+        Assertions.assertEquals(\"test-data-hub-developer\", responseBody.get(\"savedQuery\").get(\"systemMetadata\").get(\"createdBy\").asText());\n+    }\n+\n+    @Test\n+    void testModifyExistingQuery() {\n+        JsonNode firstResponse = savedQueriesController.saveQueryDocument(queryDoc).getBody();\n+        ObjectNode savedQueryNode = (ObjectNode) firstResponse.get(\"savedQuery\");\n+        String id = savedQueryNode.get(\"id\").asText();\n+        savedQueryNode.put(\"name\", \"modified-name\");\n+        ResponseEntity<JsonNode> modifiedResponse = savedQueriesController.updateQueryDocument(firstResponse);\n+        JsonNode modifiedResponseBody = modifiedResponse.getBody();\n+\n+        Assertions.assertEquals(200, modifiedResponse.getStatusCodeValue());\n+        Assertions.assertNotNull(modifiedResponseBody);\n+        Assertions.assertEquals(id, modifiedResponseBody.get(\"savedQuery\").get(\"id\").asText());\n+        Assertions.assertEquals(\"test-data-hub-developer\", modifiedResponseBody.get(\"savedQuery\").get(\"owner\").asText());\n+        Assertions.assertEquals(\"modified-name\", modifiedResponseBody.get(\"savedQuery\").get(\"name\").asText());\n+    }\n+\n+    @Test\n+    void testCollectionsAndPermissionOnSavedQuery() {\n+        JsonNode response = savedQueriesController.saveQueryDocument(queryDoc).getBody();\n+        String docUri = \"/saved-queries/\" + response.get(\"savedQuery\").get(\"id\").asText() + \".json\";\n+\n+        DocumentMetadataHandle metadataHandle = new DocumentMetadataHandle();\n+        GenericDocumentManager docMgr = getFinalGenericDocumentManager(DatabaseKind.FINAL);\n+        docMgr.readMetadata(docUri, metadataHandle);\n+        DocumentMetadataHandle.DocumentPermissions permissions = metadataHandle.getPermissions();\n+        DocumentMetadataHandle.DocumentCollections collections = metadataHandle.getCollections();\n+        Set<DocumentMetadataHandle.Capability> readQueryCap = new HashSet<>(Arrays.asList(DocumentMetadataHandle.Capability.READ));\n+        Set<DocumentMetadataHandle.Capability> writeQueryCap = new HashSet<>(Arrays.asList(DocumentMetadataHandle.Capability.UPDATE));\n+        Set<String> expectedCollections = new HashSet<>(Arrays.asList(\"http://marklogic.com/data-hub/saved-query\"));\n+\n+        Assertions.assertNotNull(permissions.get(\"data-hub-saved-query-writer\"));\n+        Assertions.assertNotNull(permissions.get(\"data-hub-saved-query-reader\"));\n+        Assertions.assertTrue(readQueryCap.equals(permissions.get(\"data-hub-saved-query-reader\")));\n+        Assertions.assertTrue(writeQueryCap.equals(permissions.get(\"data-hub-saved-query-writer\")));\n+        Assertions.assertTrue(expectedCollections.equals(collections));\n+    }\n+\n+    @Test\n+    void testCollectionsAndPermissionOnModifiedQuery() {\n+        JsonNode firstResponse = savedQueriesController.saveQueryDocument(queryDoc).getBody();", "originalCommit": "1617720c2effe03bd5e91760b644aa15a34f9aea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgyMzgyNA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3730#discussion_r396823824", "bodyText": "I emailed Ryan and Srikanth about this - I'd rather see all these tests against the data service and thus the tests should be in the core project, not in one-ui. The core project is its own thing, and we want to verify its functionality within the core project. We don't want to depend on a UI project to verify it.\nAdditionally, I don't think testing the controller proves much of anything, since the controller only needs to construct the appropriate DatabaseClient.\nNo action yet on this, waiting to hear back from Ryan and Srikanth.", "author": "rjrudin", "createdAt": "2020-03-23T23:40:39Z", "path": "one-ui/src/test/java/com/marklogic/hub/oneui/controllers/SavedQueriesControllerTest.java", "diffHunk": "@@ -0,0 +1,215 @@\n+package com.marklogic.hub.oneui.controllers;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.FailedRequestException;\n+import com.marklogic.client.document.GenericDocumentManager;\n+import com.marklogic.client.io.DocumentMetadataHandle;\n+import com.marklogic.hub.DatabaseKind;\n+import com.marklogic.hub.oneui.Application;\n+import com.marklogic.hub.oneui.TestHelper;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+@ExtendWith(SpringExtension.class)\n+@SpringBootTest(classes = {Application.class})\n+public class SavedQueriesControllerTest extends TestHelper {", "originalCommit": "1617720c2effe03bd5e91760b644aa15a34f9aea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "893ed27018261703116b1e50a24e05693dc4117b", "url": "https://github.com/marklogic/marklogic-data-hub/commit/893ed27018261703116b1e50a24e05693dc4117b", "message": "DHFPROD-3647: Save personal search query and its associated filters\n\nDHFPROD-3647: Adding reader and writer roles for saved query documents\n\nDHFPROD-3647: Save Query dataservice modules\n\nDHFPROD-3647: Optimizing code\n\nDHFPROD-3647: Addressing code request changes and refactoring tests", "committedDate": "2020-03-24T16:38:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2NjQ2Nw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3730#discussion_r397366467", "bodyText": "I really recommend combining these assertions with the first test. The setup of the test is identical - you're saving a single saved query. You then want to assert on the contents of the persisted document, along with its URI and collections/permissions. There's no reason to do that in two separate tests, it just makes our test suite take a little longer to finish.", "author": "rjrudin", "createdAt": "2020-03-24T18:18:01Z", "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/dataservices/savedQueries/SavedQueriesServiceTest.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package com.marklogic.hub.dataservices.savedQueries;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.FailedRequestException;\n+import com.marklogic.client.io.DocumentMetadataHandle;\n+import com.marklogic.hub.ApplicationConfig;\n+import com.marklogic.hub.HubTestBase;\n+import com.marklogic.hub.dataservices.SavedQueriesService;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+@ExtendWith(SpringExtension.class)\n+@ContextConfiguration(classes = ApplicationConfig.class)\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class SavedQueriesServiceTest extends HubTestBase {\n+\n+    private static JsonNode queryDoc;\n+    private SavedQueriesService savedQueriesService;\n+\n+    @BeforeAll\n+    void createSavedQueriesServiceInstance() {\n+        this.savedQueriesService = SavedQueriesService.on(adminHubConfig.newFinalClient(null));\n+    }\n+\n+    @BeforeEach\n+    void before() throws IOException {\n+        String jsonString = \"{\\n\" +\n+                \"  \\\"savedQuery\\\": {\\n\" +\n+                \"    \\\"id\\\": \\\"\\\",\\n\" +\n+                \"    \\\"name\\\": \\\"some-query\\\",\\n\" +\n+                \"    \\\"description\\\": \\\"some-query-description\\\",\\n\" +\n+                \"    \\\"query\\\": {\\n\" +\n+                \"      \\\"searchText\\\": \\\"some-string\\\",\\n\" +\n+                \"      \\\"entityTypeIds\\\": [\\n\" +\n+                \"        \\\"Entity1\\\"\\n\" +\n+                \"      ],\\n\" +\n+                \"      \\\"selectedFacets\\\": {\\n\" +\n+                \"        \\\"Collection\\\": {\\n\" +\n+                \"          \\\"dataType\\\": \\\"string\\\",\\n\" +\n+                \"          \\\"stringValues\\\": [\\n\" +\n+                \"            \\\"Entity1\\\",\\n\" +\n+                \"            \\\"Collection1\\\"\\n\" +\n+                \"          ]\\n\" +\n+                \"        },\\n\" +\n+                \"        \\\"facet1\\\": {\\n\" +\n+                \"          \\\"dataType\\\": \\\"decimal\\\",\\n\" +\n+                \"          \\\"rangeValues\\\": {\\n\" +\n+                \"            \\\"lowerBound\\\": \\\"2.5\\\",\\n\" +\n+                \"            \\\"upperBound\\\": \\\"15\\\"\\n\" +\n+                \"          }\\n\" +\n+                \"        },\\n\" +\n+                \"        \\\"facet2\\\": {\\n\" +\n+                \"          \\\"dataType\\\": \\\"dateTime\\\",\\n\" +\n+                \"          \\\"rangeValues\\\": {\\n\" +\n+                \"            \\\"lowerBound\\\": \\\"2020-01-01T13:06:17\\\",\\n\" +\n+                \"            \\\"upperBound\\\": \\\"2020-01-22T13:06:17\\\"\\n\" +\n+                \"          }\\n\" +\n+                \"        }\\n\" +\n+                \"      }\\n\" +\n+                \"    },\\n\" +\n+                \"    \\\"propertiesToDisplay\\\": [\\\"facet1\\\", \\\"EntityTypeProperty1\\\"]\\n\" +\n+                \"  }\\n\" +\n+                \"}\";\n+        ObjectMapper mapper = new ObjectMapper();\n+        queryDoc = mapper.readTree(jsonString);\n+    }\n+\n+    @Test\n+    void testSaveAndModifyQuery() {\n+        JsonNode firstResponse = savedQueriesService.saveSavedQuery(queryDoc);\n+\n+        Assertions.assertNotNull(firstResponse);\n+        Assertions.assertNotNull(firstResponse.get(\"savedQuery\"));\n+        Assertions.assertNotNull(firstResponse.get(\"savedQuery\").get(\"id\"));\n+        Assertions.assertNotNull(firstResponse.get(\"savedQuery\").get(\"systemMetadata\"));\n+        Assertions.assertEquals(\"some-query\", firstResponse.get(\"savedQuery\").get(\"name\").asText());\n+        Assertions.assertEquals(4, firstResponse.get(\"savedQuery\").get(\"systemMetadata\").size());\n+        Assertions.assertEquals(\"flow-developer\", firstResponse.get(\"savedQuery\").get(\"owner\").asText());\n+        Assertions.assertEquals(\"flow-developer\", firstResponse.get(\"savedQuery\").get(\"systemMetadata\").get(\"createdBy\").asText());\n+\n+        ObjectNode savedQueryNode = (ObjectNode) firstResponse.get(\"savedQuery\");\n+        String id = savedQueryNode.get(\"id\").asText();\n+        savedQueryNode.put(\"name\", \"modified-name\");\n+        JsonNode modifiedResponse = savedQueriesService.saveSavedQuery(firstResponse);\n+\n+        Assertions.assertNotNull(modifiedResponse);\n+        Assertions.assertEquals(id, modifiedResponse.get(\"savedQuery\").get(\"id\").asText());\n+        Assertions.assertEquals(\"flow-developer\", modifiedResponse.get(\"savedQuery\").get(\"owner\").asText());\n+        Assertions.assertEquals(\"modified-name\", modifiedResponse.get(\"savedQuery\").get(\"name\").asText());\n+    }\n+\n+    @Test\n+    void testCollectionsAndPermissionOnSavedAndModifiedQuery() {\n+        JsonNode firstResponse = savedQueriesService.saveSavedQuery(queryDoc);", "originalCommit": "893ed27018261703116b1e50a24e05693dc4117b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2NzEwOA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3730#discussion_r397367108", "bodyText": "I recommend adding this so that this reads a bit easier; it's also consistent with most of our existing tests (unfortunately not all of them):\nimport static org.junit.jupiter.api.Assertions.*;", "author": "rjrudin", "createdAt": "2020-03-24T18:19:03Z", "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/dataservices/savedQueries/SavedQueriesServiceTest.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package com.marklogic.hub.dataservices.savedQueries;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.FailedRequestException;\n+import com.marklogic.client.io.DocumentMetadataHandle;\n+import com.marklogic.hub.ApplicationConfig;\n+import com.marklogic.hub.HubTestBase;\n+import com.marklogic.hub.dataservices.SavedQueriesService;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+@ExtendWith(SpringExtension.class)\n+@ContextConfiguration(classes = ApplicationConfig.class)\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class SavedQueriesServiceTest extends HubTestBase {\n+\n+    private static JsonNode queryDoc;\n+    private SavedQueriesService savedQueriesService;\n+\n+    @BeforeAll\n+    void createSavedQueriesServiceInstance() {\n+        this.savedQueriesService = SavedQueriesService.on(adminHubConfig.newFinalClient(null));\n+    }\n+\n+    @BeforeEach\n+    void before() throws IOException {\n+        String jsonString = \"{\\n\" +\n+                \"  \\\"savedQuery\\\": {\\n\" +\n+                \"    \\\"id\\\": \\\"\\\",\\n\" +\n+                \"    \\\"name\\\": \\\"some-query\\\",\\n\" +\n+                \"    \\\"description\\\": \\\"some-query-description\\\",\\n\" +\n+                \"    \\\"query\\\": {\\n\" +\n+                \"      \\\"searchText\\\": \\\"some-string\\\",\\n\" +\n+                \"      \\\"entityTypeIds\\\": [\\n\" +\n+                \"        \\\"Entity1\\\"\\n\" +\n+                \"      ],\\n\" +\n+                \"      \\\"selectedFacets\\\": {\\n\" +\n+                \"        \\\"Collection\\\": {\\n\" +\n+                \"          \\\"dataType\\\": \\\"string\\\",\\n\" +\n+                \"          \\\"stringValues\\\": [\\n\" +\n+                \"            \\\"Entity1\\\",\\n\" +\n+                \"            \\\"Collection1\\\"\\n\" +\n+                \"          ]\\n\" +\n+                \"        },\\n\" +\n+                \"        \\\"facet1\\\": {\\n\" +\n+                \"          \\\"dataType\\\": \\\"decimal\\\",\\n\" +\n+                \"          \\\"rangeValues\\\": {\\n\" +\n+                \"            \\\"lowerBound\\\": \\\"2.5\\\",\\n\" +\n+                \"            \\\"upperBound\\\": \\\"15\\\"\\n\" +\n+                \"          }\\n\" +\n+                \"        },\\n\" +\n+                \"        \\\"facet2\\\": {\\n\" +\n+                \"          \\\"dataType\\\": \\\"dateTime\\\",\\n\" +\n+                \"          \\\"rangeValues\\\": {\\n\" +\n+                \"            \\\"lowerBound\\\": \\\"2020-01-01T13:06:17\\\",\\n\" +\n+                \"            \\\"upperBound\\\": \\\"2020-01-22T13:06:17\\\"\\n\" +\n+                \"          }\\n\" +\n+                \"        }\\n\" +\n+                \"      }\\n\" +\n+                \"    },\\n\" +\n+                \"    \\\"propertiesToDisplay\\\": [\\\"facet1\\\", \\\"EntityTypeProperty1\\\"]\\n\" +\n+                \"  }\\n\" +\n+                \"}\";\n+        ObjectMapper mapper = new ObjectMapper();\n+        queryDoc = mapper.readTree(jsonString);\n+    }\n+\n+    @Test\n+    void testSaveAndModifyQuery() {\n+        JsonNode firstResponse = savedQueriesService.saveSavedQuery(queryDoc);\n+\n+        Assertions.assertNotNull(firstResponse);", "originalCommit": "893ed27018261703116b1e50a24e05693dc4117b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "760521a37d561f8d9d4b9b3e580c38b2b4f5b986", "url": "https://github.com/marklogic/marklogic-data-hub/commit/760521a37d561f8d9d4b9b3e580c38b2b4f5b986", "message": "DHFPROD-3647: Save personal search query and its associated filters\n\nDHFPROD-3647: Adding reader and writer roles for saved query documents\n\nDHFPROD-3647: Save Query dataservice modules\n\nDHFPROD-3647: Optimizing code\n\nDHFPROD-3647: Addressing code request changes and refactoring tests", "committedDate": "2020-03-24T20:00:16Z", "type": "commit"}, {"oid": "760521a37d561f8d9d4b9b3e580c38b2b4f5b986", "url": "https://github.com/marklogic/marklogic-data-hub/commit/760521a37d561f8d9d4b9b3e580c38b2b4f5b986", "message": "DHFPROD-3647: Save personal search query and its associated filters\n\nDHFPROD-3647: Adding reader and writer roles for saved query documents\n\nDHFPROD-3647: Save Query dataservice modules\n\nDHFPROD-3647: Optimizing code\n\nDHFPROD-3647: Addressing code request changes and refactoring tests", "committedDate": "2020-03-24T20:00:16Z", "type": "forcePushed"}]}