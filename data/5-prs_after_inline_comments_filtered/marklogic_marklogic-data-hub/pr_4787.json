{"pr_number": 4787, "pr_title": "DHFPROD-5948: Add sourceName and sourceType parameters to OOTB load step", "pr_createdAt": "2020-10-29T06:15:45Z", "pr_url": "https://github.com/marklogic/marklogic-data-hub/pull/4787", "timeline": [{"oid": "f08db80c81b8cb730bd0479e613dcb282cbfb6ae", "url": "https://github.com/marklogic/marklogic-data-hub/commit/f08db80c81b8cb730bd0479e613dcb282cbfb6ae", "message": "DHFPROD-5948: Add sourceName and sourceType parameters to OOTB load step", "committedDate": "2020-10-29T18:48:08Z", "type": "forcePushed"}, {"oid": "f938ef72a112c34bb8807e827b5058133f0a5335", "url": "https://github.com/marklogic/marklogic-data-hub/commit/f938ef72a112c34bb8807e827b5058133f0a5335", "message": "DHFPROD-5948: Add sourceName and sourceType parameters to OOTB load step", "committedDate": "2020-10-29T22:34:28Z", "type": "forcePushed"}, {"oid": "7a48dc956fb3809307df7c15740dd4a26a40c85c", "url": "https://github.com/marklogic/marklogic-data-hub/commit/7a48dc956fb3809307df7c15740dd4a26a40c85c", "message": "DHFPROD-5948: Add sourceName and sourceType parameters to OOTB load step", "committedDate": "2020-10-30T03:07:34Z", "type": "forcePushed"}, {"oid": "60d6c16452dbe242db7f12d39b4036a211639879", "url": "https://github.com/marklogic/marklogic-data-hub/commit/60d6c16452dbe242db7f12d39b4036a211639879", "message": "DHFPROD-5948: Add sourceName and sourceType parameters to OOTB load step", "committedDate": "2020-10-30T03:57:20Z", "type": "forcePushed"}, {"oid": "bfe367f2c1d27dc7200305fbbb6e7a45487359de", "url": "https://github.com/marklogic/marklogic-data-hub/commit/bfe367f2c1d27dc7200305fbbb6e7a45487359de", "message": "DHFPROD-5948: Add sourceName and sourceType parameters to OOTB load step", "committedDate": "2020-10-30T05:38:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTEzMzY3NA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4787#discussion_r515133674", "bodyText": "We still want to run the ingestion step here via FlowRunner. The reason that @srinathgit  uses WriteBatcher directly in RunDefaultIngestionTest is so that he can test the mlRunIngest transform in isolation, without running a step.\nBut for this test, we need to run a step. You can use the all-steps-referenced test project - it has some test data in it along with an ingestion step. See AllStepsReferencedTest as an example.", "author": "rjrudin", "createdAt": "2020-10-30T14:22:05Z", "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/step/impl/IngestWithSourceNameAndSourceTypeTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.marklogic.hub.step.impl;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.marklogic.client.DatabaseClient;\n+import com.marklogic.client.datamovement.WriteBatcher;\n+import com.marklogic.client.document.ServerTransform;\n+import com.marklogic.client.io.DocumentMetadataHandle;\n+import com.marklogic.client.io.Format;\n+import com.marklogic.client.io.JacksonHandle;\n+import com.marklogic.client.io.StringHandle;\n+import com.marklogic.hub.AbstractHubCoreTest;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class IngestWithSourceNameAndSourceTypeTest extends AbstractHubCoreTest {\n+\n+    @Test\n+    void runDefaultIngestionWithSourceNameAndSourceType(){\n+        ServerTransform serverTransform = new ServerTransform(\"mlRunIngest\");\n+        Map<String, Object> options = new HashMap<>();\n+        options.put(\"sourceName\", \"user-defined-source-name\");\n+        options.put(\"sourceType\", \"user-defined-source-type\");\n+        String optionString = jsonToString(options);\n+        serverTransform.addParameter(\"options\", optionString);\n+\n+        DatabaseClient stagingClient = getHubClient().getStagingClient();\n+        WriteBatcher writeBatcher = stagingClient.newDataMovementManager().newWriteBatcher()", "originalCommit": "bfe367f2c1d27dc7200305fbbb6e7a45487359de", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8c9f170aac408e5ed0135d583ba1c7778d1cd2b2", "url": "https://github.com/marklogic/marklogic-data-hub/commit/8c9f170aac408e5ed0135d583ba1c7778d1cd2b2", "message": "DHFPROD-5948: Add sourceName and sourceType parameters to OOTB load step", "committedDate": "2020-10-30T18:24:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMxNDkyNg==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4787#discussion_r515314926", "bodyText": "Use runFlow(FlowInputs) instead - that will call makeInputFilePathsAbsoluteInFlow for you, which means you don't need to call inputs.setInputFilePath above either.", "author": "rjrudin", "createdAt": "2020-10-30T18:59:01Z", "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/step/impl/IngestWithSourceNameAndSourceTypeTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.marklogic.hub.step.impl;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.io.JacksonHandle;\n+import com.marklogic.hub.AbstractHubCoreTest;\n+import com.marklogic.hub.dataservices.FlowService;\n+import com.marklogic.hub.dataservices.StepService;\n+import com.marklogic.hub.flow.FlowInputs;\n+import com.marklogic.hub.flow.FlowRunner;\n+import com.marklogic.hub.flow.RunFlowResponse;\n+import com.marklogic.hub.flow.impl.FlowRunnerImpl;\n+import com.marklogic.hub.job.JobStatus;\n+import com.marklogic.hub.test.ReferenceModelProject;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class IngestWithSourceNameAndSourceTypeTest extends AbstractHubCoreTest {\n+\n+    ReferenceModelProject project;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        project = installReferenceModelProject();\n+    }\n+\n+    @Test\n+    void runDefaultIngestionWithSourceNameAndSourceType(){\n+        String path = \"entity-reference-model/data/customers\";\n+        ObjectNode info = new ObjectMapper().createObjectNode();\n+        info.put(\"name\", \"sources-test\");\n+        info.put(\"description\", \"step to test source name and source type\");\n+        info.put(\"sourceFormat\", \"json\");\n+        info.put(\"targetFormat\", \"json\");\n+        info.put(\"sourceName\", \"sample-source\");\n+        info.put(\"sourceType\", \"employee\");\n+        info.put(\"outputURIPrefix\", \"\");\n+\n+        StepService.on(getHubClient().getStagingClient()).saveStep(\"ingestion\", info, false);\n+\n+        // Add it to the existing echoFlow, which is assumed to have one step\n+        FlowService.on(getHubClient().getStagingClient()).addStepToFlow(\"echoFlow\", \"sources-test\", \"ingestion\");\n+\n+        // And run the flow\n+        FlowInputs inputs = new FlowInputs(\"echoFlow\", \"2\");\n+        inputs.setInputFilePath(getClass().getClassLoader().getResource(path).getPath());\n+\n+        FlowRunner flowRunner = new FlowRunnerImpl(getHubClient());\n+        RunFlowResponse response = flowRunner.runFlow(inputs);\n+        flowRunner.awaitCompletion();", "originalCommit": "8c9f170aac408e5ed0135d583ba1c7778d1cd2b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMzNjE0Mg==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4787#discussion_r515336142", "bodyText": "makeInputFilePathsAbsoluteInFlow in runFlow method is reading the flow from the project directory. In the test, a new step is added which is saved in the database but not on the directory. So the step that the test is trying to add is overridden to what is in the project by makeInputFilePathsAbsoluteInFlow.", "author": "rahulvudutala", "createdAt": "2020-10-30T19:41:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMxNDkyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMxNTMzMQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4787#discussion_r515315331", "bodyText": "Can use getStagingDoc instead - less lines of code is almost always good in a test, as it makes it easier to read and understand.", "author": "rjrudin", "createdAt": "2020-10-30T18:59:52Z", "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/step/impl/IngestWithSourceNameAndSourceTypeTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.marklogic.hub.step.impl;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.io.JacksonHandle;\n+import com.marklogic.hub.AbstractHubCoreTest;\n+import com.marklogic.hub.dataservices.FlowService;\n+import com.marklogic.hub.dataservices.StepService;\n+import com.marklogic.hub.flow.FlowInputs;\n+import com.marklogic.hub.flow.FlowRunner;\n+import com.marklogic.hub.flow.RunFlowResponse;\n+import com.marklogic.hub.flow.impl.FlowRunnerImpl;\n+import com.marklogic.hub.job.JobStatus;\n+import com.marklogic.hub.test.ReferenceModelProject;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class IngestWithSourceNameAndSourceTypeTest extends AbstractHubCoreTest {\n+\n+    ReferenceModelProject project;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        project = installReferenceModelProject();\n+    }\n+\n+    @Test\n+    void runDefaultIngestionWithSourceNameAndSourceType(){\n+        String path = \"entity-reference-model/data/customers\";\n+        ObjectNode info = new ObjectMapper().createObjectNode();\n+        info.put(\"name\", \"sources-test\");\n+        info.put(\"description\", \"step to test source name and source type\");\n+        info.put(\"sourceFormat\", \"json\");\n+        info.put(\"targetFormat\", \"json\");\n+        info.put(\"sourceName\", \"sample-source\");\n+        info.put(\"sourceType\", \"employee\");\n+        info.put(\"outputURIPrefix\", \"\");\n+\n+        StepService.on(getHubClient().getStagingClient()).saveStep(\"ingestion\", info, false);\n+\n+        // Add it to the existing echoFlow, which is assumed to have one step\n+        FlowService.on(getHubClient().getStagingClient()).addStepToFlow(\"echoFlow\", \"sources-test\", \"ingestion\");\n+\n+        // And run the flow\n+        FlowInputs inputs = new FlowInputs(\"echoFlow\", \"2\");\n+        inputs.setInputFilePath(getClass().getClassLoader().getResource(path).getPath());\n+\n+        FlowRunner flowRunner = new FlowRunnerImpl(getHubClient());\n+        RunFlowResponse response = flowRunner.runFlow(inputs);\n+        flowRunner.awaitCompletion();\n+        assertEquals(JobStatus.FINISHED.toString(), response.getJobStatus());\n+        JsonNode sourceDoc = getHubClient().getStagingClient().newJSONDocumentManager().read(\"customer1.json\").next().getContent(new JacksonHandle()).get();", "originalCommit": "8c9f170aac408e5ed0135d583ba1c7778d1cd2b2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2c01f7f889bd5b74de11618a8176cd7aa5f40803", "url": "https://github.com/marklogic/marklogic-data-hub/commit/2c01f7f889bd5b74de11618a8176cd7aa5f40803", "message": "DHFPROD-5948: Add sourceName and sourceType parameters to OOTB load step", "committedDate": "2020-10-30T19:43:37Z", "type": "commit"}, {"oid": "2c01f7f889bd5b74de11618a8176cd7aa5f40803", "url": "https://github.com/marklogic/marklogic-data-hub/commit/2c01f7f889bd5b74de11618a8176cd7aa5f40803", "message": "DHFPROD-5948: Add sourceName and sourceType parameters to OOTB load step", "committedDate": "2020-10-30T19:43:37Z", "type": "forcePushed"}]}