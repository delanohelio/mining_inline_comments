{"pr_number": 329, "pr_title": "Add async suggestions", "pr_createdAt": "2020-07-14T21:58:55Z", "pr_url": "https://github.com/VelocityPowered/Velocity/pull/329", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY3NzIzMw==", "url": "https://github.com/VelocityPowered/Velocity/pull/329#discussion_r454677233", "bodyText": "Should run this completion stage on the event loop", "author": "astei", "createdAt": "2020-07-14T22:16:40Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java", "diffHunk": "@@ -449,18 +451,20 @@ public void handleTabCompleteResponse(TabCompleteResponse response) {\n \n   private void finishCommandTabComplete(TabCompleteRequest request, TabCompleteResponse response) {\n     String command = request.getCommand().substring(1);\n-    try {\n-      List<String> offers = server.getCommandManager().offerSuggestions(player, command);\n-      for (String offer : offers) {\n-        response.getOffers().add(new Offer(offer, null));\n-      }\n-      response.getOffers().sort(null);\n-      player.getConnection().write(response);\n-    } catch (Exception e) {\n-      logger.error(\"Unable to provide tab list completions for {} for command '{}'\",\n-          player.getUsername(),\n-          command, e);\n-    }\n+    server.getCommandManager().offerSuggestions(player, command)\n+        .thenAccept(offers -> {\n+          try {\n+            for (String offer : offers) {\n+              response.getOffers().add(new Offer(offer, null));\n+            }\n+            response.getOffers().sort(null);\n+            player.getConnection().write(response);\n+          } catch (Exception e) {\n+            logger.error(\"Unable to provide tab list completions for {} for command '{}'\",\n+                player.getUsername(),\n+                command, e);\n+          }\n+        });", "originalCommit": "ea6a5e61a927896eed4b81eb08a1658bb7fdbd6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY3NzI5OQ==", "url": "https://github.com/VelocityPowered/Velocity/pull/329#discussion_r454677299", "bodyText": "Should run this completion stage on the event loop", "author": "astei", "createdAt": "2020-07-14T22:16:46Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java", "diffHunk": "@@ -397,26 +397,28 @@ private boolean handleCommandTabComplete(TabCompleteRequest packet) {\n       return false;\n     }\n \n-    List<String> suggestions = server.getCommandManager().offerSuggestions(player, command);\n-    if (suggestions.isEmpty()) {\n-      return false;\n-    }\n+    server.getCommandManager().offerSuggestions(player, command)\n+        .thenAccept(suggestions -> {\n+          if (suggestions.isEmpty()) {\n+            return;\n+          }\n \n-    List<Offer> offers = new ArrayList<>();\n-    for (String suggestion : suggestions) {\n-      offers.add(new Offer(suggestion));\n-    }\n+          List<Offer> offers = new ArrayList<>();\n+          for (String suggestion : suggestions) {\n+            offers.add(new Offer(suggestion));\n+          }\n \n-    int startPos = packet.getCommand().lastIndexOf(' ') + 1;\n-    if (startPos > 0) {\n-      TabCompleteResponse resp = new TabCompleteResponse();\n-      resp.setTransactionId(packet.getTransactionId());\n-      resp.setStart(startPos);\n-      resp.setLength(packet.getCommand().length() - startPos);\n-      resp.getOffers().addAll(offers);\n-      player.getConnection().write(resp);\n-    }\n-    return true;\n+          int startPos = packet.getCommand().lastIndexOf(' ') + 1;\n+          if (startPos > 0) {\n+            TabCompleteResponse resp = new TabCompleteResponse();\n+            resp.setTransactionId(packet.getTransactionId());\n+            resp.setStart(startPos);\n+            resp.setLength(packet.getCommand().length() - startPos);\n+            resp.getOffers().addAll(offers);\n+            player.getConnection().write(resp);\n+          }\n+        });", "originalCommit": "ea6a5e61a927896eed4b81eb08a1658bb7fdbd6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9c8c851d12206a80e51ef58ff0001d0919f89e57", "url": "https://github.com/VelocityPowered/Velocity/commit/9c8c851d12206a80e51ef58ff0001d0919f89e57", "message": "Add async command suggestions", "committedDate": "2020-07-14T22:28:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkxMjI1OQ==", "url": "https://github.com/VelocityPowered/Velocity/pull/329#discussion_r454912259", "bodyText": "I would deprecate this method/rename the other one to avoid confusing API clients. How do they know which of the 3 methods should they use?\nEdit: thinking more about it, the CompletableFuture-returning sync method smells like implementation detail. I would keep the current suggest method and add the async variant. If not, I would expect the CompletableFuture suggest method to return both the sync and async suggestions.", "author": "hugmanrique", "createdAt": "2020-07-15T09:19:08Z", "path": "api/src/main/java/com/velocitypowered/api/command/RawCommand.java", "diffHunk": "@@ -29,15 +30,21 @@ default void execute(CommandSource source, String @NonNull [] args) {\n    * @param currentLine the current, partial command line for this command\n    * @return tab complete suggestions\n    */\n-  default List<String> suggest(CommandSource source, String currentLine) {\n-    return ImmutableList.of();\n+  default CompletableFuture<List<String>> suggest(CommandSource source, String currentLine) {\n+    return CompletableFuture.completedFuture(ImmutableList.of());\n   }\n \n   @Override\n-  default List<String> suggest(CommandSource source, String @NonNull [] currentArgs) {\n+  default CompletableFuture<List<String>> suggestAsync(CommandSource source,\n+      String @NonNull [] currentArgs) {\n     return suggest(source, String.join(\" \", currentArgs));\n   }\n \n+  @Override\n+  default List<String> suggest(CommandSource source, String @NonNull [] currentArgs) {", "originalCommit": "9c8c851d12206a80e51ef58ff0001d0919f89e57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk2OTQyNQ==", "url": "https://github.com/VelocityPowered/Velocity/pull/329#discussion_r454969425", "bodyText": "If I had to be completely honest, it's probably better to deprecate Command and split it into RawCommand and RegularCommand, perhaps also introducing CommandContext and CommandExecutionContext interface at the same time, with CommandContext providing command metadata and CommandExecutionContext focusing on the invocation of a command.\nMy 2 cents.", "author": "astei", "createdAt": "2020-07-15T11:03:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkxMjI1OQ=="}], "type": "inlineReview"}]}