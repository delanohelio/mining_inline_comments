{"pr_number": 330, "pr_title": "New command API", "pr_createdAt": "2020-07-16T11:39:35Z", "pr_url": "https://github.com/VelocityPowered/Velocity/pull/330", "timeline": [{"oid": "5a568008f52a7353df118ef758392ab489b5ebb3", "url": "https://github.com/VelocityPowered/Velocity/commit/5a568008f52a7353df118ef758392ab489b5ebb3", "message": "New command API start", "committedDate": "2020-07-16T11:25:46Z", "type": "commit"}, {"oid": "962b609f8ffa1b856dcccbdb99942388dcda823b", "url": "https://github.com/VelocityPowered/Velocity/commit/962b609f8ffa1b856dcccbdb99942388dcda823b", "message": "Legacy arguments are non-null", "committedDate": "2020-07-16T11:42:51Z", "type": "commit"}, {"oid": "6f110ad0cfd7270cc4270a4b7dc72f84cd85e96d", "url": "https://github.com/VelocityPowered/Velocity/commit/6f110ad0cfd7270cc4270a4b7dc72f84cd85e96d", "message": "Remove unneeded constant", "committedDate": "2020-07-16T11:51:54Z", "type": "commit"}, {"oid": "3b242d36210eb776c465804654bd7374bcf5cc32", "url": "https://github.com/VelocityPowered/Velocity/commit/3b242d36210eb776c465804654bd7374bcf5cc32", "message": "RawCommand interface", "committedDate": "2020-07-16T13:06:52Z", "type": "commit"}, {"oid": "a117cb46e067423e0bdc2d9b360ab3335801c2ff", "url": "https://github.com/VelocityPowered/Velocity/commit/a117cb46e067423e0bdc2d9b360ab3335801c2ff", "message": "Merge branch 'dev/1.1.0' of github.com:VelocityPowered/Velocity into feat/new-command-api", "committedDate": "2020-07-16T16:19:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkzNTkxNg==", "url": "https://github.com/VelocityPowered/Velocity/pull/330#discussion_r455935916", "bodyText": "A command that uses Brigadier for parsing the command and providing suggestions to the client.", "author": "astei", "createdAt": "2020-07-16T17:01:29Z", "path": "api/src/main/java/com/velocitypowered/api/newcommand/BrigadierCommand.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package com.velocitypowered.api.newcommand;\n+\n+import com.mojang.brigadier.exceptions.CommandSyntaxException;\n+import com.mojang.brigadier.suggestion.SuggestionProvider;\n+import com.mojang.brigadier.suggestion.Suggestions;\n+import com.mojang.brigadier.tree.LiteralCommandNode;\n+import com.velocitypowered.api.command.CommandSource;\n+\n+/**\n+ * A command that uses the Brigadier library for parsing.", "originalCommit": "3b242d36210eb776c465804654bd7374bcf5cc32", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkzNzE3OA==", "url": "https://github.com/VelocityPowered/Velocity/pull/330#discussion_r455937178", "bodyText": "I think this is a good idea", "author": "astei", "createdAt": "2020-07-16T17:03:42Z", "path": "api/src/main/java/com/velocitypowered/api/newcommand/Command.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.velocitypowered.api.newcommand;\n+\n+import com.velocitypowered.api.command.CommandSource;\n+import com.velocitypowered.api.proxy.Player;\n+\n+/**\n+ * Represents a command that can be executed by a {@link CommandSource},\n+ * such as a {@link Player} or the console.\n+ *\n+ * @param <C> the type of the execution context\n+ */\n+public interface Command<C extends CommandExecutionContext> {\n+\n+    /**\n+     * Represents the command type, which determines\n+     * its parsing capabilities.\n+     */\n+    // TODO Introduce CommandMeta and move there?", "originalCommit": "3b242d36210eb776c465804654bd7374bcf5cc32", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk0MzQ3MA==", "url": "https://github.com/VelocityPowered/Velocity/pull/330#discussion_r455943470", "bodyText": "I'm leaning more towards Command containing the immutable meta and have an associated CommandExecutor. This way we can have builders that automatically register commands on construction (similar to the scheduler system). Also, we can get rid of the Type enum to let users provide their own Command implementations (i.e. get rid of RawCommand).", "author": "hugmanrique", "createdAt": "2020-07-16T17:13:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkzNzE3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk0OTgxOA==", "url": "https://github.com/VelocityPowered/Velocity/pull/330#discussion_r455949818", "bodyText": "I'm happy to run with this idea (Command.Type is kind of a kludge anyway).", "author": "astei", "createdAt": "2020-07-16T17:24:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkzNzE3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkzOTgzMQ==", "url": "https://github.com/VelocityPowered/Velocity/pull/330#discussion_r455939831", "bodyText": "The previous Javadoc description should have read Unregisters the specified alias from the command manager.", "author": "astei", "createdAt": "2020-07-16T17:08:07Z", "path": "api/src/main/java/com/velocitypowered/api/newcommand/CommandManager.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.velocitypowered.api.newcommand;\n+\n+import com.velocitypowered.api.command.CommandSource;\n+import com.velocitypowered.api.event.command.CommandExecuteEvent;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Registers and executes commands.\n+ */\n+public interface CommandManager {\n+\n+    /**\n+     * Registers the specified command.\n+     *\n+     * @param command the command to register\n+     */\n+    void register(Command<?> command);\n+\n+    /**\n+     * Unregisters the specified command.\n+     *\n+     * @param command the command to unregister\n+     */\n+    void unregister(Command<?> command);\n+\n+    /**\n+     * Unregisters the command with the specified alias.\n+     *\n+     * @param alias the alias of the command\n+     */\n+    // TODO Previous javadoc is ambiguous, does this unregister all the aliases of the command,\n+    // or just the given alias?", "originalCommit": "3b242d36210eb776c465804654bd7374bcf5cc32", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0f8f25e566b7e5742035a0cc179d6d04af1f1103", "url": "https://github.com/VelocityPowered/Velocity/commit/0f8f25e566b7e5742035a0cc179d6d04af1f1103", "message": "Add command builders and remove Command.Type enum", "committedDate": "2020-07-16T18:32:24Z", "type": "commit"}, {"oid": "7afbb9617902a5ef8f70370fe97b471991871211", "url": "https://github.com/VelocityPowered/Velocity/commit/7afbb9617902a5ef8f70370fe97b471991871211", "message": "Improve CommandManager javadoc", "committedDate": "2020-07-16T18:39:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk5NjM4MQ==", "url": "https://github.com/VelocityPowered/Velocity/pull/330#discussion_r455996381", "bodyText": "Question: As this presently stands this would break the API. I assume you just want to put the API in front of users before you add any backwards compatibility?", "author": "astei", "createdAt": "2020-07-16T18:42:43Z", "path": "api/src/main/java/com/velocitypowered/api/command/CommandManager.java", "diffHunk": "@@ -1,87 +1,60 @@\n package com.velocitypowered.api.command;\n \n+import com.velocitypowered.api.event.command.CommandExecuteEvent;\n import java.util.concurrent.CompletableFuture;\n \n /**\n- * Represents an interface to register a command executor with the proxy.\n+ * Handles the registration and execution of commands.\n  */\n public interface CommandManager {\n \n   /**\n-   * Registers the specified command with the manager with the specified aliases.\n+   * Returns a builder to register a {@link LegacyCommand}.\n    *\n-   * @param command the command to register\n-   * @param aliases the alias to use\n-   *\n-   * @deprecated This method requires at least one alias, but this is only enforced at runtime.\n-   *             Prefer {@link #register(String, Command, String...)} instead.\n+   * @return a legacy command builder\n    */\n-  @Deprecated\n-  void register(Command command, String... aliases);", "originalCommit": "7afbb9617902a5ef8f70370fe97b471991871211", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk5OTQzNA==", "url": "https://github.com/VelocityPowered/Velocity/pull/330#discussion_r455999434", "bodyText": "Yeah, this would require a major bump, so it's a long-term PR. Users are expected to not instantiate the Command interface/subclass it and instead use LegacyCommand.Builder and BrigadierCommand.Builder instances obtainable from the command manager.\nI'm thinking about how to minimize the breakage and still allow plugins to implement Command.", "author": "hugmanrique", "createdAt": "2020-07-16T18:48:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk5NjM4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk5Nzc2Mw==", "url": "https://github.com/VelocityPowered/Velocity/pull/330#discussion_r455997763", "bodyText": "I'm thinking of replacing this consumer by a LegacyCommandExecutor functional interface (I think) users are more familiarized with.", "author": "hugmanrique", "createdAt": "2020-07-16T18:45:19Z", "path": "api/src/main/java/com/velocitypowered/api/command/LegacyCommand.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.velocitypowered.api.command;\n+\n+import java.util.function.Consumer;\n+\n+/**\n+ * A legacy 1.12-style command.\n+ */\n+public interface LegacyCommand extends Command<LegacyCommandExecutionContext> {\n+\n+  /**\n+   * Provides a fluent interface to register a legacy command.\n+   */\n+  interface Builder extends Command.Builder<LegacyCommand, Builder> {\n+\n+    /**\n+     * Specifies additional aliases that can be used to execute the command.\n+     *\n+     * @param aliases the command aliases\n+     * @return this builder, for chaining\n+     */\n+    Builder aliases(String... aliases);\n+\n+    /**\n+     * Registers the command with the specified execution handler.\n+     *\n+     * @param onExecute the execution handler\n+     * @return the registered command\n+     */\n+    LegacyCommand register(Consumer<LegacyCommandExecutionContext> onExecute);", "originalCommit": "7afbb9617902a5ef8f70370fe97b471991871211", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "11ecb8d3b59fe845babf9b4adbb2df0ad753551f", "url": "https://github.com/VelocityPowered/Velocity/commit/11ecb8d3b59fe845babf9b4adbb2df0ad753551f", "message": "Minimize API breakage\n\nThe main concern is the context type parameter added to the Command\ninterface. According to\nhttps://wiki.eclipse.org/Evolving_Java-based_APIs_2#Evolving_API_interfaces_-_API_methods\nthis is binary compatible due to Java's handling of raw types.\n\nAlso adds back the CommandManager#register methods.", "committedDate": "2020-07-16T19:12:12Z", "type": "commit"}, {"oid": "786e337c9a427f5b28cbe1b33ebf31eb25d50d54", "url": "https://github.com/VelocityPowered/Velocity/commit/786e337c9a427f5b28cbe1b33ebf31eb25d50d54", "message": "Re-add LegacyCommand to facilitate migration\n\nIs there a better name for this?", "committedDate": "2020-07-16T19:23:16Z", "type": "commit"}, {"oid": "f5e882b13d4c063eff55168cc04ff33e284648a5", "url": "https://github.com/VelocityPowered/Velocity/commit/f5e882b13d4c063eff55168cc04ff33e284648a5", "message": "Command execution & context building\n\nRegistration not yet implemented. Removes the legacy builder, users can\ndirectly implement LegacyCommand as they do right now with the Command\ninterface.", "committedDate": "2020-07-17T13:19:31Z", "type": "commit"}, {"oid": "543dfda61bdb52edfad0719b62195aa820a4f708", "url": "https://github.com/VelocityPowered/Velocity/commit/543dfda61bdb52edfad0719b62195aa820a4f708", "message": "Fix unintended type parameter change", "committedDate": "2020-07-17T13:21:01Z", "type": "commit"}, {"oid": "708984b5226bec1e68d872461a03efb409962eb6", "url": "https://github.com/VelocityPowered/Velocity/commit/708984b5226bec1e68d872461a03efb409962eb6", "message": "Execution, suggestions & permissions", "committedDate": "2020-07-17T19:03:10Z", "type": "commit"}, {"oid": "8fad75974773d887ce7bc42a5b2beba1a194da3a", "url": "https://github.com/VelocityPowered/Velocity/commit/8fad75974773d887ce7bc42a5b2beba1a194da3a", "message": "s/CommandExecutionContext/CommandInvocation", "committedDate": "2020-07-17T19:41:53Z", "type": "commit"}, {"oid": "b1e7952cf240c1e1826ae5afee34642aadcb3f9d", "url": "https://github.com/VelocityPowered/Velocity/commit/b1e7952cf240c1e1826ae5afee34642aadcb3f9d", "message": "Re-add async suggestions", "committedDate": "2020-07-17T19:48:20Z", "type": "commit"}, {"oid": "dc1c07e4ab4a4b4f3a088f1d005bae0fe62433fa", "url": "https://github.com/VelocityPowered/Velocity/commit/dc1c07e4ab4a4b4f3a088f1d005bae0fe62433fa", "message": "Document CommandInvocationFactory", "committedDate": "2020-07-17T19:55:07Z", "type": "commit"}, {"oid": "065d1af4d6371f84f9bb6b92c95a4e930b785448", "url": "https://github.com/VelocityPowered/Velocity/commit/065d1af4d6371f84f9bb6b92c95a4e930b785448", "message": "Clean up invocation implementations", "committedDate": "2020-07-17T20:04:16Z", "type": "commit"}, {"oid": "72915505e1d04aca3f6dffa6112dc4832fe9c5b1", "url": "https://github.com/VelocityPowered/Velocity/commit/72915505e1d04aca3f6dffa6112dc4832fe9c5b1", "message": "Create invocation factory registry", "committedDate": "2020-07-17T20:16:56Z", "type": "commit"}, {"oid": "6ef06e4808356c448e2762de6f07d0ef3bcc1696", "url": "https://github.com/VelocityPowered/Velocity/commit/6ef06e4808356c448e2762de6f07d0ef3bcc1696", "message": "Non-Brigadier command registration", "committedDate": "2020-07-17T20:21:17Z", "type": "commit"}, {"oid": "0615fd2e038424aca253a879ddd97383fec5b0da", "url": "https://github.com/VelocityPowered/Velocity/commit/0615fd2e038424aca253a879ddd97383fec5b0da", "message": "Migrate built-in commands\n\nThis went pretty smooth, indicating the migration is going to be\nrelatively easy for plugins. Here's a summary:\n\n- Implement `LegacyCommand` instead of `Command`.\n- Replace the source and args parameters by a single invocation\nargument.\n- Stuff like subcommands can no longer implement (Legacy)Command since\nmost methods expect a context which cannot be built manually.", "committedDate": "2020-07-17T20:39:13Z", "type": "commit"}, {"oid": "e3b3a198a2a1c28bebd942b6d0d2158c06d72cb7", "url": "https://github.com/VelocityPowered/Velocity/commit/e3b3a198a2a1c28bebd942b6d0d2158c06d72cb7", "message": "Brigadier commands registration", "committedDate": "2020-07-17T21:09:49Z", "type": "commit"}, {"oid": "046bdaf6fb09aabe9c5e668bb10afc5f266af40c", "url": "https://github.com/VelocityPowered/Velocity/commit/046bdaf6fb09aabe9c5e668bb10afc5f266af40c", "message": "Brigadier command unregistration", "committedDate": "2020-07-17T21:18:03Z", "type": "commit"}, {"oid": "00f7c83326cd8d33b40967893c7cf37640086e00", "url": "https://github.com/VelocityPowered/Velocity/commit/00f7c83326cd8d33b40967893c7cf37640086e00", "message": "Fix argument-less Brigadier command aliases", "committedDate": "2020-07-17T21:33:25Z", "type": "commit"}, {"oid": "0e1b8f3760c26c04573f20558fe4d88ee3b7a62f", "url": "https://github.com/VelocityPowered/Velocity/commit/0e1b8f3760c26c04573f20558fe4d88ee3b7a62f", "message": "Fix checkstyle warnings\n\nIt now compiles, yay!", "committedDate": "2020-07-17T21:57:49Z", "type": "commit"}, {"oid": "8e3953a8eb3e3de7e2d05bd4b429560e52d1812a", "url": "https://github.com/VelocityPowered/Velocity/commit/8e3953a8eb3e3de7e2d05bd4b429560e52d1812a", "message": "Fix incorrect exception message\n\nThe parse results may be invalid (special case for Brigadier).", "committedDate": "2020-07-17T22:08:17Z", "type": "commit"}, {"oid": "609f7779ef58aeb6457cadc1eef57fc065f9af47", "url": "https://github.com/VelocityPowered/Velocity/commit/609f7779ef58aeb6457cadc1eef57fc065f9af47", "message": "Fix docs", "committedDate": "2020-07-17T22:10:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcwMzA5Nw==", "url": "https://github.com/VelocityPowered/Velocity/pull/330#discussion_r456703097", "bodyText": "I would like to see some better description on why this is the case. This isn't obvious on first glance.", "author": "astei", "createdAt": "2020-07-17T22:41:10Z", "path": "api/src/main/java/com/velocitypowered/api/command/BrigadierCommand.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.velocitypowered.api.command;\n+\n+import com.mojang.brigadier.builder.ArgumentBuilder;\n+import com.mojang.brigadier.builder.LiteralArgumentBuilder;\n+import com.mojang.brigadier.tree.CommandNode;\n+\n+/**\n+ * A command that uses Brigadier for parsing the command and providing\n+ * suggestions to the client.\n+ */\n+public interface BrigadierCommand extends Command<BrigadierCommandInvocation> {\n+\n+  /**\n+   * Returns an {@link ArgumentBuilder} used to specify the structure of", "originalCommit": "609f7779ef58aeb6457cadc1eef57fc065f9af47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc4MTI2Nw==", "url": "https://github.com/VelocityPowered/Velocity/pull/330#discussion_r456781267", "bodyText": "This is a helper method, callers can still use the longer LiteralArgumentBuilder.<CommandSource>.literal(alias). Most examples I could find of Brigadier commands prefer to use the statically imported literal(), but it's not possible in our case since it requires to specify the <CommandSource> type.", "author": "hugmanrique", "createdAt": "2020-07-18T11:38:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcwMzA5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcwMzIzNw==", "url": "https://github.com/VelocityPowered/Velocity/pull/330#discussion_r456703237", "bodyText": "Returns the result of parsing the given command.", "author": "astei", "createdAt": "2020-07-17T22:41:43Z", "path": "api/src/main/java/com/velocitypowered/api/command/BrigadierCommandInvocation.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package com.velocitypowered.api.command;\n+\n+import com.mojang.brigadier.ParseResults;\n+\n+/**\n+ * Contains the invocation data for a {@link BrigadierCommand}.\n+ */\n+public interface BrigadierCommandInvocation extends CommandInvocation {\n+\n+  /**\n+   * Returns the valid parse results.", "originalCommit": "609f7779ef58aeb6457cadc1eef57fc065f9af47", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcwMzUxMw==", "url": "https://github.com/VelocityPowered/Velocity/pull/330#discussion_r456703513", "bodyText": "Still API-breaking here - is there a better solution?", "author": "astei", "createdAt": "2020-07-17T22:42:53Z", "path": "api/src/main/java/com/velocitypowered/api/command/Command.java", "diffHunk": "@@ -1,59 +1,73 @@\n package com.velocitypowered.api.command;\n \n import com.google.common.collect.ImmutableList;\n+import com.velocitypowered.api.proxy.Player;\n import java.util.List;\n import java.util.concurrent.CompletableFuture;\n-import org.checkerframework.checker.nullness.qual.NonNull;\n \n /**\n- * Represents a command that can be executed by a {@link CommandSource}, such as a {@link\n- * com.velocitypowered.api.proxy.Player} or the console.\n+ * Represents a command that can be executed by a {@link CommandSource}, such as\n+ * a {@link Player} or the console.\n  */\n-public interface Command {\n+public interface Command<I extends CommandInvocation> {\n \n   /**\n-   * Executes the command for the specified {@link CommandSource}.\n+   * Executes the command for the specified invocation.\n    *\n-   * @param source the source of this command\n-   * @param args the arguments for this command\n+   * @param invocation the invocation context\n    */\n-  void execute(CommandSource source, String @NonNull [] args);", "originalCommit": "609f7779ef58aeb6457cadc1eef57fc065f9af47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc4MTAxNA==", "url": "https://github.com/VelocityPowered/Velocity/pull/330#discussion_r456781014", "bodyText": "If a command class now doesn't implement LegacyCommand, BrigadierCommand or RawCommand, the fallback methods will be executed. On 2.0.0 we can open up the possibility for custom CommandInvocation factories and Command implementations. As it stands, I don't think there's a way to detect a class using the deprecated methods without calling them.", "author": "hugmanrique", "createdAt": "2020-07-18T11:35:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcwMzUxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcwNDA4NA==", "url": "https://github.com/VelocityPowered/Velocity/pull/330#discussion_r456704084", "bodyText": "A legacy command, modelled after the convention popularized by Bukkit and BungeeCord. Prefer {@code BrigadierCommand} if possible, which is also backwards-compatible with older clients.\nAssuming (of course) that Brigadier support in Velocity does support older clients. Test this perhaps?", "author": "astei", "createdAt": "2020-07-17T22:45:23Z", "path": "api/src/main/java/com/velocitypowered/api/command/LegacyCommand.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package com.velocitypowered.api.command;\n+\n+/**\n+ * A legacy 1.12-style command.", "originalCommit": "609f7779ef58aeb6457cadc1eef57fc065f9af47", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcwNDMwNA==", "url": "https://github.com/VelocityPowered/Velocity/pull/330#discussion_r456704304", "bodyText": "should pass the command and its arguments directly without further processing", "author": "astei", "createdAt": "2020-07-17T22:46:19Z", "path": "api/src/main/java/com/velocitypowered/api/command/RawCommand.java", "diffHunk": "@@ -1,67 +1,10 @@\n package com.velocitypowered.api.command;\n \n-import com.google.common.collect.ImmutableList;\n-import java.util.List;\n-import java.util.concurrent.CompletableFuture;\n-import org.checkerframework.checker.nullness.qual.NonNull;\n-\n /**\n- * A specialized sub-interface of {@code Command} which indicates that the proxy should pass a\n- * raw command to the command. This is useful for bolting on external command frameworks to\n+ * A specialized sub-interface of {@code Command} which indicates that the proxy should pass\n+ * a raw command to the command. This is useful for bolting on external command frameworks to", "originalCommit": "609f7779ef58aeb6457cadc1eef57fc065f9af47", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcwNDY3Mw==", "url": "https://github.com/VelocityPowered/Velocity/pull/330#discussion_r456704673", "bodyText": "Should explain why we need to use this method.", "author": "astei", "createdAt": "2020-07-17T22:47:48Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/command/VelocityBrigadierCommand.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package com.velocitypowered.proxy.command;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+import com.mojang.brigadier.builder.LiteralArgumentBuilder;\n+import com.mojang.brigadier.context.ParsedCommandNode;\n+import com.mojang.brigadier.exceptions.CommandSyntaxException;\n+import com.mojang.brigadier.suggestion.Suggestion;\n+import com.mojang.brigadier.tree.CommandNode;\n+import com.velocitypowered.api.command.BrigadierCommand;\n+import com.velocitypowered.api.command.BrigadierCommandInvocation;\n+import com.velocitypowered.api.command.CommandSource;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.CompletableFuture;\n+\n+final class VelocityBrigadierCommand implements BrigadierCommand {\n+\n+  /**\n+   * Returns a node builder with the given alias to the specified destination node.", "originalCommit": "609f7779ef58aeb6457cadc1eef57fc065f9af47", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcwNTExNg==", "url": "https://github.com/VelocityPowered/Velocity/pull/330#discussion_r456705116", "bodyText": "I would call this field brigadierDispatcher", "author": "astei", "createdAt": "2020-07-17T22:49:45Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/command/VelocityCommandManager.java", "diffHunk": "@@ -20,47 +26,101 @@\n \n public class VelocityCommandManager implements CommandManager {\n \n-  private final Map<String, RawCommand> commands = new HashMap<>();\n+  // `commands` contains all registered command case-insensitive aliases.\n+  // Multiple aliases may map to the same command.\n+  //\n+  // On execution, suggestion offers and permission checks, the corresponding Command object\n+  // is retrieved. Then, a CommandInvocation describing the request is created by\n+  // the invocation factory registry. This object is then passed to the underlying command,\n+  // which may use the Brigadier dispatcher iff it implements BrigadierCommand.\n+  //\n+  // By design, the API doesn't provide CommandInvocation implementations.\n+  // Commands are not meant to be executed directly. Instead, users should\n+  // call CommandManager#execute.\n+\n+  private final Map<String, Command<?>> commands = new HashMap<>();\n+\n+  private final CommandInvocationFactoryRegistry invocationFactory =\n+          new CommandInvocationFactoryRegistry();\n+  private final CommandDispatcher<CommandSource> dispatcher = new CommandDispatcher<>();", "originalCommit": "609f7779ef58aeb6457cadc1eef57fc065f9af47", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcwNTcwMA==", "url": "https://github.com/VelocityPowered/Velocity/pull/330#discussion_r456705700", "bodyText": "I would like to us to be able to inject proxy commands into tab-complete requests and into the Brigadier command tree if we can.", "author": "astei", "createdAt": "2020-07-17T22:52:15Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/command/VelocityCommandManager.java", "diffHunk": "@@ -69,107 +129,111 @@ public void unregister(final String alias) {\n   }\n \n   @Override\n-  public boolean execute(CommandSource source, String cmdLine) {\n+  public CompletableFuture<Boolean> execute(final CommandSource source, final String cmdLine) {\n     Preconditions.checkNotNull(source, \"source\");\n     Preconditions.checkNotNull(cmdLine, \"cmdLine\");\n \n-    CommandExecuteEvent event = callCommandEvent(source, cmdLine).join();\n-    CommandResult commandResult = event.getResult();\n-    if (commandResult.isForwardToServer() || !commandResult.isAllowed()) {\n-      return false;\n-    }\n-    cmdLine = commandResult.getCommand().orElse(event.getCommand());\n+    return callCommandEvent(source, cmdLine).thenApply(event -> {\n+      CommandResult commandResult = event.getResult();\n+      if (commandResult.isForwardToServer() || !commandResult.isAllowed()) {\n+        return false;\n+      }\n \n-    return executeImmediately(source, cmdLine);\n+      String command = commandResult.getCommand().orElse(event.getCommand());\n+      return executeImmediately0(source, command);\n+    });\n   }\n \n   @Override\n-  public boolean executeImmediately(CommandSource source, String cmdLine) {\n+  public CompletableFuture<Boolean> executeImmediately(final CommandSource source,\n+                                                       final String cmdLine) {\n     Preconditions.checkNotNull(source, \"source\");\n     Preconditions.checkNotNull(cmdLine, \"cmdLine\");\n \n+    return CompletableFuture.supplyAsync(\n+        () -> executeImmediately0(source, cmdLine), eventManager.getService());\n+  }\n+\n+  private <I extends CommandInvocation> boolean executeImmediately0(final CommandSource source,\n+                                                                    final String cmdLine) {\n     String alias = cmdLine;\n     String args = \"\";\n     int firstSpace = cmdLine.indexOf(' ');\n     if (firstSpace != -1) {\n       alias = cmdLine.substring(0, firstSpace);\n       args = cmdLine.substring(firstSpace);\n     }\n-    RawCommand command = commands.get(alias.toLowerCase(Locale.ENGLISH));\n+\n+    Command<I> command = getCommand(alias);\n     if (command == null) {\n       return false;\n     }\n \n+    I invocation = invocationFactory.createInvocation(command, source, alias, args);\n     try {\n-      if (!command.hasPermission(source, args)) {\n+      if (!command.hasPermission(invocation)) {\n         return false;\n       }\n-      command.execute(source, args);\n+\n+      command.execute(invocation);\n       return true;\n-    } catch (Exception e) {\n+    } catch (final Exception e) {\n+      if (e.getCause() instanceof CommandSyntaxException) {\n+        // TODO Send invalid syntax message to player (exception contains details)\n+        return false;\n+      }\n+\n       throw new RuntimeException(\"Unable to invoke command \" + cmdLine + \" for \" + source, e);\n     }\n   }\n \n+  // Suggestions\n \n-  @Override\n-  public CompletableFuture<Boolean> executeAsync(CommandSource source, String cmdLine) {\n-    CompletableFuture<Boolean> result = new CompletableFuture<>();\n-    callCommandEvent(source, cmdLine).thenAccept(event -> {\n-      CommandResult commandResult = event.getResult();\n-      if (commandResult.isForwardToServer() || !commandResult.isAllowed()) {\n-        result.complete(false);\n-      }\n-      String command = commandResult.getCommand().orElse(event.getCommand());\n-      try {\n-        result.complete(executeImmediately(source, command));\n-      } catch (Exception e) {\n-        result.completeExceptionally(e);\n-      }\n-    });\n-    return result;\n-  }\n+  private <I extends CommandInvocation> CompletableFuture<List<String>> offerSuggestions(\n+          final CommandSource source, final String alias, final String args) {\n+    Command<I> command = getCommand(alias);\n+    if (command == null) {\n+      // No such command, so we can't offer any tab complete suggestions.\n+      return CompletableFuture.completedFuture(ImmutableList.of());\n+    }\n \n-  @Override\n-  public CompletableFuture<Boolean> executeImmediatelyAsync(CommandSource source, String cmdLine) {\n-    Preconditions.checkNotNull(source, \"source\");\n-    Preconditions.checkNotNull(cmdLine, \"cmdLine\");\n-    CompletableFuture<Boolean> result = new CompletableFuture<>();\n-    eventManager.getService().execute(() -> {\n-      try {\n-        result.complete(executeImmediately(source, cmdLine));\n-      } catch (Exception e) {\n-        result.completeExceptionally(e);\n+    I invocation = invocationFactory.createInvocation(command, source, alias, args);\n+    try {\n+      if (!command.hasPermission(invocation)) {\n+        return CompletableFuture.completedFuture(ImmutableList.of());\n       }\n-    });\n-    return result;\n-  }\n \n-  public boolean hasCommand(String command) {\n-    return commands.containsKey(command);\n-  }\n+      return command.suggestAsync(invocation).thenApply(ImmutableList::copyOf);\n+    } catch (final Exception e) {\n+      if (e.getCause() instanceof CommandSyntaxException) {\n+        return CompletableFuture.completedFuture(ImmutableList.of());\n+      }\n \n-  public Set<String> getAllRegisteredCommands() {", "originalCommit": "609f7779ef58aeb6457cadc1eef57fc065f9af47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc3Nzk3OA==", "url": "https://github.com/VelocityPowered/Velocity/pull/330#discussion_r456777978", "bodyText": "I think this is already handled by \n  \n    \n      Velocity/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java\n    \n    \n         Line 400\n      in\n      21ad6a4\n    \n    \n    \n    \n\n        \n          \n           server.getCommandManager().offerSuggestions(player, command) \n        \n    \n  \n\n, CommandManager#offerSuggestions merges all suggestions from all command types, including BrigadierCommands.", "author": "hugmanrique", "createdAt": "2020-07-18T10:58:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcwNTcwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc4MDc4NQ==", "url": "https://github.com/VelocityPowered/Velocity/pull/330#discussion_r456780785", "bodyText": "But how about merging the proxy's Brigadier tree with that from the remote server?", "author": "astei", "createdAt": "2020-07-18T11:32:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcwNTcwMA=="}], "type": "inlineReview"}, {"oid": "f28b7b210f2d577153c7e2998d710d320070dfac", "url": "https://github.com/VelocityPowered/Velocity/commit/f28b7b210f2d577153c7e2998d710d320070dfac", "message": "Improve docs as suggested", "committedDate": "2020-07-18T11:16:15Z", "type": "commit"}, {"oid": "503f519b91bdc08ef6149b91cbdbf956a8671b32", "url": "https://github.com/VelocityPowered/Velocity/commit/503f519b91bdc08ef6149b91cbdbf956a8671b32", "message": "Rename Brigadier dispatcher", "committedDate": "2020-07-18T11:16:39Z", "type": "commit"}, {"oid": "eaffb4f9c2c2321049af2f592729199f80f2968f", "url": "https://github.com/VelocityPowered/Velocity/commit/eaffb4f9c2c2321049af2f592729199f80f2968f", "message": "Fallback to calling deprecated Command methods", "committedDate": "2020-07-18T11:32:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc4MTMxNQ==", "url": "https://github.com/VelocityPowered/Velocity/pull/330#discussion_r456781315", "bodyText": "<p>For this reason, the legacy {@code execute(CommandSender, String...)}, {@code suggest(CommandSender, String...)}, and {@code hasPermission(CommandSender, String...)} methods are deprecated and will be removed in Velocity 2.0.0. We suggest implementing one of the more specific subinterfaces instead.", "author": "astei", "createdAt": "2020-07-18T11:39:10Z", "path": "api/src/main/java/com/velocitypowered/api/command/Command.java", "diffHunk": "@@ -4,10 +4,35 @@\n import com.velocitypowered.api.proxy.Player;\n import java.util.List;\n import java.util.concurrent.CompletableFuture;\n+import org.checkerframework.checker.nullness.qual.NonNull;\n \n /**\n  * Represents a command that can be executed by a {@link CommandSource}, such as\n  * a {@link Player} or the console.\n+ *\n+ * <p>Velocity 1.1.0 introduces specialized command subinterfaces to separate\n+ * command parsing concerns. These include, in order of preference:\n+ *\n+ * <ul>\n+ * <li>{@link BrigadierCommand}, which supports parameterized arguments and\n+ * specialized execution, tab complete suggestions and permission-checking logic.\n+ *\n+ * <li>{@link LegacyCommand}, modelled after the convention popularized by\n+ * Bukkit and BungeeCord. Older classes directly implementing {@link Command}\n+ * are suggested to migrate to this interface.\n+ *\n+ * <li>{@link RawCommand}, useful for bolting on external command frameworks\n+ * to Velocity.\n+ *\n+ * </ul>\n+ *", "originalCommit": "f28b7b210f2d577153c7e2998d710d320070dfac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1a3e4c483a25a2f12dbc8cc482592f2f10de2aeb", "url": "https://github.com/VelocityPowered/Velocity/commit/1a3e4c483a25a2f12dbc8cc482592f2f10de2aeb", "message": "Fix factory lookup\n\nThis is pretty ugly, I'm looking for solutions.", "committedDate": "2020-07-18T11:45:40Z", "type": "commit"}, {"oid": "abce7a4727dcba788c6afca7341463c335f49068", "url": "https://github.com/VelocityPowered/Velocity/commit/abce7a4727dcba788c6afca7341463c335f49068", "message": "Javadoc suggestion", "committedDate": "2020-07-18T11:48:19Z", "type": "commit"}, {"oid": "32b8045a146fe7933ba26fe05dcf500b56413db7", "url": "https://github.com/VelocityPowered/Velocity/commit/32b8045a146fe7933ba26fe05dcf500b56413db7", "message": "Command builder tests start\n\nI already found 2 subtle bugs", "committedDate": "2020-07-18T12:34:13Z", "type": "commit"}, {"oid": "018ec5eed7415f20b6869ace1203f474db3bc4f6", "url": "https://github.com/VelocityPowered/Velocity/commit/018ec5eed7415f20b6869ace1203f474db3bc4f6", "message": "Also register main node", "committedDate": "2020-07-18T12:36:05Z", "type": "commit"}, {"oid": "cf3dc6f7bc0ca99efaeb50945eeec1190b26b555", "url": "https://github.com/VelocityPowered/Velocity/commit/cf3dc6f7bc0ca99efaeb50945eeec1190b26b555", "message": "Test command execution", "committedDate": "2020-07-18T12:41:22Z", "type": "commit"}, {"oid": "6b6ef62bd5b3ddc0040016734b359d9d4835ce6a", "url": "https://github.com/VelocityPowered/Velocity/commit/6b6ef62bd5b3ddc0040016734b359d9d4835ce6a", "message": "Test legacy command methods", "committedDate": "2020-07-18T13:12:30Z", "type": "commit"}, {"oid": "ebc7de25a146fed93ddfd1ce396a074334c012e1", "url": "https://github.com/VelocityPowered/Velocity/commit/ebc7de25a146fed93ddfd1ce396a074334c012e1", "message": "Move commands to Brigadier\n\nAPI changes: Not every command type can get executed with arbitrary\narguments. For example, BrigadierCommand previously inherited the\nexecute(), hasPermission() and suggest() methods which clashed with already provided Brigadier capabilities.\nIn turn, a InvocableCommand interface has been introduced with methods\nthat expect a CommandInvocation object. This allows for dropping the\nintroduced generic type on the Command interface, and move it to\nInvocableCommand.\n\nFor compability reasons, the older deprecated methods must still be kept\non the Command interface.\n\nAdditionally, the Invocation interfaces of each invocable command type (Legacy & Raw) have been made inner interfaces of the corresponding type.\n\nThe BrigadierCommand#argumentBuilder method has been removed. As\nsuggested on review, it was superfluous.\n\nImpl:\nI'm happy to say the move to Brigadier has only forced us to drop a\nsingle method: hasPermission. From now on, all registered commands will\nbe wrapped in a LiteralCommandNode (more if additional aliases are\nprovided) and then registered on a CommandDispatcher.\nThis provides context-rich interactions for BrigadierCommands, as well\nas preserving the current behavior of Legacy, Raw and deprecated\ncommand methods.", "committedDate": "2020-07-19T19:31:53Z", "type": "commit"}, {"oid": "08b461e89639f0e2981afd71a8d1c88f5c32f432", "url": "https://github.com/VelocityPowered/Velocity/commit/08b461e89639f0e2981afd71a8d1c88f5c32f432", "message": "Merge proxy root node with packet's root node", "committedDate": "2020-07-19T20:10:10Z", "type": "commit"}, {"oid": "c2020ca9e2d759548b93c35815bfa291ea053e39", "url": "https://github.com/VelocityPowered/Velocity/commit/c2020ca9e2d759548b93c35815bfa291ea053e39", "message": "Make GlistCommand a Brigadier command for testing", "committedDate": "2020-07-19T20:36:52Z", "type": "commit"}, {"oid": "9cd4913b3fa55418402848fec0328c8e0e82739d", "url": "https://github.com/VelocityPowered/Velocity/commit/9cd4913b3fa55418402848fec0328c8e0e82739d", "message": "More idiomatic requires()", "committedDate": "2020-07-19T20:37:48Z", "type": "commit"}, {"oid": "87447feb06049836dbd134afa771e67b249c3f10", "url": "https://github.com/VelocityPowered/Velocity/commit/87447feb06049836dbd134afa771e67b249c3f10", "message": "Fix compile errors", "committedDate": "2020-07-19T20:41:09Z", "type": "commit"}, {"oid": "f84027c92819b13f79312d52f2eebbb7efa1cc43", "url": "https://github.com/VelocityPowered/Velocity/commit/f84027c92819b13f79312d52f2eebbb7efa1cc43", "message": "Execution and suggestion tests", "committedDate": "2020-07-20T12:33:14Z", "type": "commit"}, {"oid": "646e986c08e1a9726797f59d39a8afa4fe0bb28d", "url": "https://github.com/VelocityPowered/Velocity/commit/646e986c08e1a9726797f59d39a8afa4fe0bb28d", "message": "Test deprecated Commands", "committedDate": "2020-07-20T13:03:00Z", "type": "commit"}, {"oid": "98233ea78b891e083e2b56a53b203c6951e51901", "url": "https://github.com/VelocityPowered/Velocity/commit/98233ea78b891e083e2b56a53b203c6951e51901", "message": "Test re-registration throws", "committedDate": "2020-07-20T13:12:08Z", "type": "commit"}, {"oid": "0e6acc7fdcb29fbbe5fd83c32991acf9c19bf1ba", "url": "https://github.com/VelocityPowered/Velocity/commit/0e6acc7fdcb29fbbe5fd83c32991acf9c19bf1ba", "message": "Document re-registration throws IAE", "committedDate": "2020-07-20T13:13:15Z", "type": "commit"}, {"oid": "62df7b48b40c14f91111d614408bd698774f8396", "url": "https://github.com/VelocityPowered/Velocity/commit/62df7b48b40c14f91111d614408bd698774f8396", "message": "Add option to disable announcing proxy commands", "committedDate": "2020-07-20T17:23:45Z", "type": "commit"}, {"oid": "b0e3bab5b454da5fc8fb1c896cdb5c1af04e121d", "url": "https://github.com/VelocityPowered/Velocity/commit/b0e3bab5b454da5fc8fb1c896cdb5c1af04e121d", "message": "Revert star import", "committedDate": "2020-07-20T17:24:41Z", "type": "commit"}, {"oid": "5b6eacf361dffe18176376be14fb2f6cc258dc20", "url": "https://github.com/VelocityPowered/Velocity/commit/5b6eacf361dffe18176376be14fb2f6cc258dc20", "message": "Fix checkstyle warns", "committedDate": "2020-07-20T17:59:17Z", "type": "commit"}, {"oid": "051bb702debe3cfef98b1379cddcb1cb0147724c", "url": "https://github.com/VelocityPowered/Velocity/commit/051bb702debe3cfef98b1379cddcb1cb0147724c", "message": "Proxy suggestions are minecraft:ask_server", "committedDate": "2020-07-20T18:32:53Z", "type": "commit"}, {"oid": "e5d597454e88afdaa57c3f7c41f81d0e536dfc6f", "url": "https://github.com/VelocityPowered/Velocity/commit/e5d597454e88afdaa57c3f7c41f81d0e536dfc6f", "message": "Cleanup implementation", "committedDate": "2020-07-20T19:42:34Z", "type": "commit"}, {"oid": "60c119e49459f58eff801ce4a6a6d9af7993ba07", "url": "https://github.com/VelocityPowered/Velocity/commit/60c119e49459f58eff801ce4a6a6d9af7993ba07", "message": "Fix console suggestions", "committedDate": "2020-07-20T19:47:08Z", "type": "commit"}, {"oid": "2dff532508b295ad6660c159ffcc73a49b0bf59b", "url": "https://github.com/VelocityPowered/Velocity/commit/2dff532508b295ad6660c159ffcc73a49b0bf59b", "message": "Fix argument-less redirects", "committedDate": "2020-07-20T20:37:04Z", "type": "commit"}, {"oid": "cee30b9302af197c5290d48044958bec060bdcc2", "url": "https://github.com/VelocityPowered/Velocity/commit/cee30b9302af197c5290d48044958bec060bdcc2", "message": "Distinguish between syntax errors and unknown aliases", "committedDate": "2020-07-21T09:46:12Z", "type": "commit"}, {"oid": "14e1af1e41ae0b1a90b0ea9533a302dba1324859", "url": "https://github.com/VelocityPowered/Velocity/commit/14e1af1e41ae0b1a90b0ea9533a302dba1324859", "message": "Review javadocs", "committedDate": "2020-07-21T09:54:45Z", "type": "commit"}, {"oid": "029f1f82c5e1a1f3a3384d7e57f06c8e36f7fd05", "url": "https://github.com/VelocityPowered/Velocity/commit/029f1f82c5e1a1f3a3384d7e57f06c8e36f7fd05", "message": "Fix suggestions on <1.13 clients", "committedDate": "2020-07-21T10:44:25Z", "type": "commit"}, {"oid": "1656d3422b1a5ca374f3a93b4587ce30107207cd", "url": "https://github.com/VelocityPowered/Velocity/commit/1656d3422b1a5ca374f3a93b4587ce30107207cd", "message": "Fix merge conflicts", "committedDate": "2020-07-21T10:52:04Z", "type": "commit"}, {"oid": "6d8e0953f2b33bcfc8a2572334a77f20dfa04c75", "url": "https://github.com/VelocityPowered/Velocity/commit/6d8e0953f2b33bcfc8a2572334a77f20dfa04c75", "message": "Fix tests", "committedDate": "2020-07-21T11:07:59Z", "type": "commit"}, {"oid": "8abc9c80a69158ebae0121fda78b55c865c0abad", "url": "https://github.com/VelocityPowered/Velocity/commit/8abc9c80a69158ebae0121fda78b55c865c0abad", "message": "Wrap Brigadier commands in permission-checking predicate\n\nAlso fixes the redirect issue by cloning the entire children tree.\nCompression should make the increased packet size negligible.", "committedDate": "2020-07-21T12:38:55Z", "type": "commit"}, {"oid": "cb846499aa9df2f59d1d19d7ffb017d21655563a", "url": "https://github.com/VelocityPowered/Velocity/commit/cb846499aa9df2f59d1d19d7ffb017d21655563a", "message": "Add extra tests", "committedDate": "2020-07-21T13:05:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIyNTIyOQ==", "url": "https://github.com/VelocityPowered/Velocity/pull/330#discussion_r458225229", "bodyText": "Specify that you should use if you don't want the command to be sent to the backend server at all.", "author": "astei", "createdAt": "2020-07-21T16:21:20Z", "path": "api/src/main/java/com/velocitypowered/api/command/BrigadierCommand.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.velocitypowered.api.command;\n+\n+import com.mojang.brigadier.builder.LiteralArgumentBuilder;\n+import com.mojang.brigadier.context.CommandContext;\n+import com.mojang.brigadier.tree.CommandNode;\n+import com.mojang.brigadier.tree.LiteralCommandNode;\n+import java.util.function.Predicate;\n+\n+/**\n+ * A command that uses Brigadier for parsing the command and providing\n+ * suggestions to the client.\n+ *\n+ * <p>Brigadier commands may be registered using a {@link Builder} instance\n+ * obtainable via the {@link CommandManager#brigadierBuilder()} method.\n+ */\n+public interface BrigadierCommand extends Command {\n+\n+  /**\n+   * Provides a fluent interface to register a Brigadier command.\n+   */\n+  interface Builder extends Command.Builder<BrigadierCommand, Builder> {\n+\n+    /**\n+     * Specifies the permission-checking predicate the {@link CommandSource}\n+     * must pass to execute the command.", "originalCommit": "cb846499aa9df2f59d1d19d7ffb017d21655563a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4NDExNA==", "url": "https://github.com/VelocityPowered/Velocity/pull/330#discussion_r458284114", "bodyText": "I'm thinking about the use cases for this, and letting Brigadier commands return a special code (as the implementation does right now) to indicate a redirect is desired would be simpler and easier (the current injection is a mess).\nI originally added this because I thought not having permission for some specific arguments wouldn't redirect the command to the backend as it currently does. Thoughts on this behavior?", "author": "hugmanrique", "createdAt": "2020-07-21T17:55:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIyNTIyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODcxODY5MA==", "url": "https://github.com/VelocityPowered/Velocity/pull/330#discussion_r458718690", "bodyText": "I added a BrigadierCommand#FORWARD so implementations can indicate a command execution should be forwarded to the backend server. This is more general and is not only limited to the previous permission-checking logic. Commands can now use the regular ArgumentBuilder#requires method to specify a predicate.", "author": "hugmanrique", "createdAt": "2020-07-22T11:18:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIyNTIyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIyNzQ3Mw==", "url": "https://github.com/VelocityPowered/Velocity/pull/330#discussion_r458227473", "bodyText": "This is still API-breaking...", "author": "astei", "createdAt": "2020-07-21T16:24:46Z", "path": "api/src/main/java/com/velocitypowered/api/command/CommandManager.java", "diffHunk": "@@ -1,87 +1,68 @@\n package com.velocitypowered.api.command;\n \n+import com.velocitypowered.api.event.command.CommandExecuteEvent;\n import java.util.concurrent.CompletableFuture;\n \n /**\n- * Represents an interface to register a command executor with the proxy.\n+ * Handles the registration and execution of commands.\n  */\n public interface CommandManager {\n \n   /**\n-   * Registers the specified command with the manager with the specified aliases.\n+   * Returns a builder to register a {@link BrigadierCommand}.\n+   *\n+   * @return a Brigadier command builder\n+   */\n+  BrigadierCommand.Builder brigadierBuilder();\n+\n+  /**\n+   * Registers the specified command with the specified aliases.\n    *\n    * @param command the command to register\n-   * @param aliases the alias to use\n+   * @param aliases the command aliases\n    *\n+   * @throws IllegalArgumentException if one of the given aliases is already registered\n    * @deprecated This method requires at least one alias, but this is only enforced at runtime.\n-   *             Prefer {@link #register(String, Command, String...)} instead.\n+   *             Prefer {@link #register(String, Command, String...)}\n    */\n   @Deprecated\n   void register(Command command, String... aliases);\n \n   /**\n-   * Registers the specified command with the manager with the specified aliases.\n+   * Registers the specified command with the specified aliases.\n    *\n-   * @param alias the first alias to register\n+   * @param alias the first command alias\n    * @param command the command to register\n-   * @param otherAliases the other aliases to use\n+   * @param otherAliases additional aliases\n+   * @throws IllegalArgumentException if one of the given aliases is already registered\n    */\n   void register(String alias, Command command, String... otherAliases);\n \n   /**\n-   * Unregisters a command.\n+   * Unregisters the specified command alias from the manager, if registered.\n    *\n    * @param alias the command alias to unregister\n    */\n   void unregister(String alias);\n \n   /**\n-   * Calls CommandExecuteEvent and attempts to execute a command using the specified {@code cmdLine}", "originalCommit": "cb846499aa9df2f59d1d19d7ffb017d21655563a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIyOTI2Mw==", "url": "https://github.com/VelocityPowered/Velocity/pull/330#discussion_r458229263", "bodyText": "I would probably make this a RawCommand", "author": "astei", "createdAt": "2020-07-21T16:27:26Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/command/builtin/ShutdownCommand.java", "diffHunk": "@@ -1,12 +1,10 @@\n-package com.velocitypowered.proxy.command;\n+package com.velocitypowered.proxy.command.builtin;\n \n-import com.velocitypowered.api.command.Command;\n-import com.velocitypowered.api.command.CommandSource;\n+import com.velocitypowered.api.command.LegacyCommand;\n import com.velocitypowered.proxy.VelocityServer;\n import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;\n-import org.checkerframework.checker.nullness.qual.NonNull;\n \n-public class ShutdownCommand implements Command {\n+public class ShutdownCommand implements LegacyCommand {", "originalCommit": "cb846499aa9df2f59d1d19d7ffb017d21655563a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bab3982c3cbcafe2da31fd88f9345a99f57b8262", "url": "https://github.com/VelocityPowered/Velocity/commit/bab3982c3cbcafe2da31fd88f9345a99f57b8262", "message": "Apply suggestions\n\n- Fixes CommandManager API-breakage (leftover from the Velocity 2.0\nmerge intention)\n- Clarify BrigadierCommand.Builder#permission javadoc (still subject to\nbe removed)\n- Correct execute return when the source doesn't have permission or a\nsyntax error is made. This follows the #execute javadoc. Under this\ndefinition, a Brigadier command with a syntax error is not executed.\nThe legacy behavior is preserved.\n- Revert git executable path", "committedDate": "2020-07-21T18:00:44Z", "type": "commit"}, {"oid": "3cd50d4ddece66fa7724dbc16cc53f37d98cf849", "url": "https://github.com/VelocityPowered/Velocity/commit/3cd50d4ddece66fa7724dbc16cc53f37d98cf849", "message": "Fix RawCommand API-breakage", "committedDate": "2020-07-21T18:28:43Z", "type": "commit"}, {"oid": "ce7f17faafee3e0c1d8c74ba550a1f0d501a2baa", "url": "https://github.com/VelocityPowered/Velocity/commit/ce7f17faafee3e0c1d8c74ba550a1f0d501a2baa", "message": "Add missing @Deprecated annotation", "committedDate": "2020-07-21T18:29:33Z", "type": "commit"}, {"oid": "f459ec43af431df55f2083e2596a215ec971126b", "url": "https://github.com/VelocityPowered/Velocity/commit/f459ec43af431df55f2083e2596a215ec971126b", "message": "Also provide newer default impls to guarantee API comp", "committedDate": "2020-07-21T18:33:24Z", "type": "commit"}, {"oid": "9461cb4de5e2ba31b33e0df04aceaad07fe11104", "url": "https://github.com/VelocityPowered/Velocity/commit/9461cb4de5e2ba31b33e0df04aceaad07fe11104", "message": "Partially revert last commit", "committedDate": "2020-07-21T18:34:50Z", "type": "commit"}, {"oid": "d241b2ef40d5c15a86df7f508f4002dcb38ec571", "url": "https://github.com/VelocityPowered/Velocity/commit/d241b2ef40d5c15a86df7f508f4002dcb38ec571", "message": "Ughh... Inconsistent return type", "committedDate": "2020-07-21T18:54:07Z", "type": "commit"}, {"oid": "a5fcc726f92ed166ea74655a4964cb74217900f0", "url": "https://github.com/VelocityPowered/Velocity/commit/a5fcc726f92ed166ea74655a4964cb74217900f0", "message": "LegacyCommand -> SimpleCommand", "committedDate": "2020-07-22T11:06:39Z", "type": "commit"}, {"oid": "628fee459bbdc30bb32842b16cb6f15360cf8fa3", "url": "https://github.com/VelocityPowered/Velocity/commit/628fee459bbdc30bb32842b16cb6f15360cf8fa3", "message": "Use a Command return code instead\n\nAvoids the horrible overengineered wrapping logic.\nAlso preserves the previous logic of forwarding a #requires false return\nto the backend server. Also fixes sending suggestions the client doesn't have\npermission for.", "committedDate": "2020-07-22T11:15:32Z", "type": "commit"}, {"oid": "1950e7c488a140ebbe42b92b78e3fd55f560cb7c", "url": "https://github.com/VelocityPowered/Velocity/commit/1950e7c488a140ebbe42b92b78e3fd55f560cb7c", "message": "Introduce hinting\n\nHinting allows non-Brigadier commands to provide LiteralCommandNodes and\nArgumentCommandNodes that are only used to provide additional argument\nmetadata and tab-complete suggestions. Note that the Brigadier Command of a hinting command\nnode or any of its children is ignored, and will instead call the\nregular \"legacy wrapper\" arguments command (see\nBrigadierUtils#buildRawArgumentsLiteral).\n\nWhile introducing this feature I also noticed the manager doesn't keep\ntrack of registered Command instances. As noted before, this is correct\nas the Command interface is now a dummy transformer. However, hinting\nrequires modifying **all** the aliases of a Command, so I introduced the\nCommandMeta interface, which keeps track of the aliases and hinting data\nfor now. This commit also introduces new CommandManager#register methods\nthat accept a CommandMeta object. The Command.Builder and BrigadierCommand.Builder interfaces became useless with this introduction, so I also removed them and made BrigadierCommand a final class that accepts the LiteralCommandNode instead.", "committedDate": "2020-07-22T17:27:22Z", "type": "commit"}, {"oid": "1357364f8c4af655e2c50aa7ba7dd48f564adbbb", "url": "https://github.com/VelocityPowered/Velocity/commit/1357364f8c4af655e2c50aa7ba7dd48f564adbbb", "message": "Revert .bat executable again", "committedDate": "2020-07-22T17:36:48Z", "type": "commit"}, {"oid": "b8c9edd10af4415955b54b3b5d064b1f00e84ecf", "url": "https://github.com/VelocityPowered/Velocity/commit/b8c9edd10af4415955b54b3b5d064b1f00e84ecf", "message": "Fix Checkstyle warns", "committedDate": "2020-07-23T17:50:45Z", "type": "commit"}, {"oid": "d95dbf68ba946e5c30f4b68159fafd0711fffc74", "url": "https://github.com/VelocityPowered/Velocity/commit/d95dbf68ba946e5c30f4b68159fafd0711fffc74", "message": "Revert .bat yet again", "committedDate": "2020-07-23T17:51:36Z", "type": "commit"}, {"oid": "2957cc530806213c5148f15faaba9cb757124e3f", "url": "https://github.com/VelocityPowered/Velocity/commit/2957cc530806213c5148f15faaba9cb757124e3f", "message": "Merge branch 'dev/1.1.0' of github.com:VelocityPowered/Velocity into feat/new-command-api", "committedDate": "2020-07-26T17:05:10Z", "type": "commit"}, {"oid": "0f64a4acc9bdec0f97349e057ec80a882fa47c9b", "url": "https://github.com/VelocityPowered/Velocity/commit/0f64a4acc9bdec0f97349e057ec80a882fa47c9b", "message": "Fix Checkstyle warns", "committedDate": "2020-07-26T17:23:45Z", "type": "commit"}]}