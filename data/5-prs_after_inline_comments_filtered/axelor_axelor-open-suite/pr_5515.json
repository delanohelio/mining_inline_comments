{"pr_number": 5515, "pr_title": "#28254: Init work with ManufOrder", "pr_createdAt": "2020-06-11T12:47:38Z", "pr_url": "https://github.com/axelor/axelor-open-suite/pull/5515", "timeline": [{"oid": "65653d28e7d642f31d2e96cecf2e04d448e68232", "url": "https://github.com/axelor/axelor-open-suite/commit/65653d28e7d642f31d2e96cecf2e04d448e68232", "message": "#28254: Init work with ManufOrder", "committedDate": "2020-05-18T09:58:38Z", "type": "commit"}, {"oid": "20206546168db055bd31f4ff754db3380f8c6eb6", "url": "https://github.com/axelor/axelor-open-suite/commit/20206546168db055bd31f4ff754db3380f8c6eb6", "message": "Merge branch 'wip-6.1-kb' into wip-28254", "committedDate": "2020-06-11T12:58:14Z", "type": "commit"}, {"oid": "bc31cae15cce9a88ee0f53564ec835284c9b12cb", "url": "https://github.com/axelor/axelor-open-suite/commit/bc31cae15cce9a88ee0f53564ec835284c9b12cb", "message": "#28254: Fix merge of manuf orders + add changelog", "committedDate": "2020-06-12T15:23:39Z", "type": "commit"}, {"oid": "7e3091116dec896a81d2d2af68802f2d303c54d0", "url": "https://github.com/axelor/axelor-open-suite/commit/7e3091116dec896a81d2d2af68802f2d303c54d0", "message": "Remove useless log", "committedDate": "2020-06-15T08:08:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI0MjA2OQ==", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440242069", "bodyText": "will --> with ?\nNo translation ?", "author": "wde-axelor", "createdAt": "2020-06-15T15:03:15Z", "path": "axelor-production/src/main/java/com/axelor/apps/production/exceptions/IExceptionMessage.java", "diffHunk": "@@ -133,6 +133,9 @@\n   /** Operation Order Workflow Service */\n   String WORKCENTER_NO_MACHINE = /*$$(*/ \"Please fill the machine in the workcenter %s.\" /*)*/;\n \n+  String NO_WORK_CENTER_GROUP = /*$$(*/\n+      \"Please fill the work center group will at least one work center.\" /*)*/;", "originalCommit": "7e3091116dec896a81d2d2af68802f2d303c54d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI0Mjg2Mw==", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440242863", "bodyText": "it is not recommended to leave commented lines of code (especially not without any further explanation as to why). Better to remove it.", "author": "wde-axelor", "createdAt": "2020-06-15T15:04:29Z", "path": "axelor-production/src/main/java/com/axelor/apps/production/service/manuforder/ManufOrderWorkflowService.java", "diffHunk": "@@ -161,7 +167,7 @@ public ManufOrder plan(ManufOrder manufOrder) throws AxelorException {\n     }\n \n     for (ManufOrder manufOrder : manufOrderList) {\n-      //    \tmanufOrder.setPlannedStartDateT(this.computePlannedStartDateT(manufOrder));\n+      // manufOrder.setPlannedStartDateT(this.computePlannedStartDateT(manufOrder));", "originalCommit": "7e3091116dec896a81d2d2af68802f2d303c54d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI0NDA3NQ==", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440244075", "bodyText": "Important : it is necessary to handle the case where the optional doesn't have a value. is there really no possible case of figure where there is not a single billOfMaterial with versionNumber == 1 ?", "author": "wde-axelor", "createdAt": "2020-06-15T15:06:13Z", "path": "axelor-production/src/main/java/com/axelor/apps/production/service/manuforder/ManufOrderWorkflowService.java", "diffHunk": "@@ -650,4 +656,155 @@ public void createPurchaseOrder(ManufOrder manufOrder) throws AxelorException {\n \n     Beans.get(ManufOrderRepository.class).save(manufOrder);\n   }\n+\n+  @Transactional(rollbackOn = {Exception.class})\n+  public void merge(List<Long> ids) throws AxelorException {\n+    List<ManufOrder> manufOrderList =\n+        Beans.get(ManufOrderRepository.class)\n+            .all()\n+            .filter(\"self.id in (\" + Joiner.on(\",\").join(ids) + \")\")\n+            .fetch();\n+\n+    /** Init all the necessary values to create the new Manuf Order */\n+    Product product = manufOrderList.get(0).getProduct();\n+    StockLocation stockLocation = manufOrderList.get(0).getWorkshopStockLocation();\n+    Company company = manufOrderList.get(0).getCompany();\n+    BillOfMaterial billOfMaterial =\n+        manufOrderList.stream()\n+            .filter(x -> x.getBillOfMaterial().getVersionNumber() == 1)\n+            .findFirst()\n+            .get()", "originalCommit": "7e3091116dec896a81d2d2af68802f2d303c54d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI0Njg4Nw==", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440246887", "bodyText": "Doc comments should not be positioned inside a method or constructor definition block.\nUse regular block comments :\n/*\n*\n*/", "author": "wde-axelor", "createdAt": "2020-06-15T15:10:15Z", "path": "axelor-production/src/main/java/com/axelor/apps/production/service/manuforder/ManufOrderWorkflowService.java", "diffHunk": "@@ -650,4 +656,155 @@ public void createPurchaseOrder(ManufOrder manufOrder) throws AxelorException {\n \n     Beans.get(ManufOrderRepository.class).save(manufOrder);\n   }\n+\n+  @Transactional(rollbackOn = {Exception.class})\n+  public void merge(List<Long> ids) throws AxelorException {\n+    List<ManufOrder> manufOrderList =\n+        Beans.get(ManufOrderRepository.class)\n+            .all()\n+            .filter(\"self.id in (\" + Joiner.on(\",\").join(ids) + \")\")\n+            .fetch();\n+\n+    /** Init all the necessary values to create the new Manuf Order */\n+    Product product = manufOrderList.get(0).getProduct();\n+    StockLocation stockLocation = manufOrderList.get(0).getWorkshopStockLocation();\n+    Company company = manufOrderList.get(0).getCompany();\n+    BillOfMaterial billOfMaterial =\n+        manufOrderList.stream()\n+            .filter(x -> x.getBillOfMaterial().getVersionNumber() == 1)\n+            .findFirst()\n+            .get()\n+            .getBillOfMaterial();\n+    int priority = manufOrderList.stream().mapToInt(mo -> mo.getPrioritySelect()).max().getAsInt();\n+    Unit unit = billOfMaterial.getUnit();\n+    BigDecimal qty = BigDecimal.ZERO;\n+    String note = \"\";\n+\n+    ManufOrder mergedManufOrder = new ManufOrder();\n+\n+    for (ManufOrder manufOrder : manufOrderList) {\n+      manufOrder.setStatusSelect(ManufOrderRepository.STATUS_FUSIONNED);\n+\n+      manufOrder.setManufOrderMergeResult(mergedManufOrder);\n+      for (ProductionOrder productionOrder : manufOrder.getProductionOrderSet()) {\n+        mergedManufOrder.addProductionOrderSetItem(productionOrder);\n+      }\n+      for (SaleOrder saleOrder : manufOrder.getSaleOrderSet()) {\n+        mergedManufOrder.addSaleOrderSetItem(saleOrder);\n+      }\n+      /**", "originalCommit": "7e3091116dec896a81d2d2af68802f2d303c54d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI0OTkwMQ==", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440249901", "bodyText": "There should be a config in app base indicating the number of digits for quantity fields throughout the app.\nMaybe it should be used here instead ?", "author": "wde-axelor", "createdAt": "2020-06-15T15:14:22Z", "path": "axelor-production/src/main/java/com/axelor/apps/production/service/manuforder/ManufOrderWorkflowService.java", "diffHunk": "@@ -650,4 +656,155 @@ public void createPurchaseOrder(ManufOrder manufOrder) throws AxelorException {\n \n     Beans.get(ManufOrderRepository.class).save(manufOrder);\n   }\n+\n+  @Transactional(rollbackOn = {Exception.class})\n+  public void merge(List<Long> ids) throws AxelorException {\n+    List<ManufOrder> manufOrderList =\n+        Beans.get(ManufOrderRepository.class)\n+            .all()\n+            .filter(\"self.id in (\" + Joiner.on(\",\").join(ids) + \")\")\n+            .fetch();\n+\n+    /** Init all the necessary values to create the new Manuf Order */\n+    Product product = manufOrderList.get(0).getProduct();\n+    StockLocation stockLocation = manufOrderList.get(0).getWorkshopStockLocation();\n+    Company company = manufOrderList.get(0).getCompany();\n+    BillOfMaterial billOfMaterial =\n+        manufOrderList.stream()\n+            .filter(x -> x.getBillOfMaterial().getVersionNumber() == 1)\n+            .findFirst()\n+            .get()\n+            .getBillOfMaterial();\n+    int priority = manufOrderList.stream().mapToInt(mo -> mo.getPrioritySelect()).max().getAsInt();\n+    Unit unit = billOfMaterial.getUnit();\n+    BigDecimal qty = BigDecimal.ZERO;\n+    String note = \"\";\n+\n+    ManufOrder mergedManufOrder = new ManufOrder();\n+\n+    for (ManufOrder manufOrder : manufOrderList) {\n+      manufOrder.setStatusSelect(ManufOrderRepository.STATUS_FUSIONNED);\n+\n+      manufOrder.setManufOrderMergeResult(mergedManufOrder);\n+      for (ProductionOrder productionOrder : manufOrder.getProductionOrderSet()) {\n+        mergedManufOrder.addProductionOrderSetItem(productionOrder);\n+      }\n+      for (SaleOrder saleOrder : manufOrder.getSaleOrderSet()) {\n+        mergedManufOrder.addSaleOrderSetItem(saleOrder);\n+      }\n+      /**\n+       * If unit are the same, then add the qty If not, convert the unit and get the converted qty\n+       */\n+      if (manufOrder.getUnit().equals(unit)) {\n+        qty = qty.add(manufOrder.getQty());\n+      } else {\n+        BigDecimal qtyConverted =\n+            Beans.get(UnitConversionService.class)\n+                .convert(\n+                    manufOrder.getUnit(),\n+                    unit,\n+                    manufOrder.getQty(),\n+                    AppBaseService.DEFAULT_NB_DECIMAL_DIGITS,", "originalCommit": "7e3091116dec896a81d2d2af68802f2d303c54d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI1MDMyNQ==", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440250325", "bodyText": "The comment thing again.", "author": "wde-axelor", "createdAt": "2020-06-15T15:15:00Z", "path": "axelor-production/src/main/java/com/axelor/apps/production/service/manuforder/ManufOrderWorkflowService.java", "diffHunk": "@@ -650,4 +656,155 @@ public void createPurchaseOrder(ManufOrder manufOrder) throws AxelorException {\n \n     Beans.get(ManufOrderRepository.class).save(manufOrder);\n   }\n+\n+  @Transactional(rollbackOn = {Exception.class})\n+  public void merge(List<Long> ids) throws AxelorException {\n+    List<ManufOrder> manufOrderList =\n+        Beans.get(ManufOrderRepository.class)\n+            .all()\n+            .filter(\"self.id in (\" + Joiner.on(\",\").join(ids) + \")\")\n+            .fetch();\n+\n+    /** Init all the necessary values to create the new Manuf Order */\n+    Product product = manufOrderList.get(0).getProduct();\n+    StockLocation stockLocation = manufOrderList.get(0).getWorkshopStockLocation();\n+    Company company = manufOrderList.get(0).getCompany();\n+    BillOfMaterial billOfMaterial =\n+        manufOrderList.stream()\n+            .filter(x -> x.getBillOfMaterial().getVersionNumber() == 1)\n+            .findFirst()\n+            .get()\n+            .getBillOfMaterial();\n+    int priority = manufOrderList.stream().mapToInt(mo -> mo.getPrioritySelect()).max().getAsInt();\n+    Unit unit = billOfMaterial.getUnit();\n+    BigDecimal qty = BigDecimal.ZERO;\n+    String note = \"\";\n+\n+    ManufOrder mergedManufOrder = new ManufOrder();\n+\n+    for (ManufOrder manufOrder : manufOrderList) {\n+      manufOrder.setStatusSelect(ManufOrderRepository.STATUS_FUSIONNED);\n+\n+      manufOrder.setManufOrderMergeResult(mergedManufOrder);\n+      for (ProductionOrder productionOrder : manufOrder.getProductionOrderSet()) {\n+        mergedManufOrder.addProductionOrderSetItem(productionOrder);\n+      }\n+      for (SaleOrder saleOrder : manufOrder.getSaleOrderSet()) {\n+        mergedManufOrder.addSaleOrderSetItem(saleOrder);\n+      }\n+      /**\n+       * If unit are the same, then add the qty If not, convert the unit and get the converted qty\n+       */\n+      if (manufOrder.getUnit().equals(unit)) {\n+        qty = qty.add(manufOrder.getQty());\n+      } else {\n+        BigDecimal qtyConverted =\n+            Beans.get(UnitConversionService.class)\n+                .convert(\n+                    manufOrder.getUnit(),\n+                    unit,\n+                    manufOrder.getQty(),\n+                    AppBaseService.DEFAULT_NB_DECIMAL_DIGITS,\n+                    null);\n+        qty = qty.add(qtyConverted);\n+      }\n+      if (manufOrder.getNote() != null && manufOrder.getNote() != \"\") {\n+        note += manufOrder.getManufOrderSeq() + \" : \" + manufOrder.getNote() + \"\\n\";\n+      }\n+    }\n+\n+    /** Update the created manuf order */", "originalCommit": "7e3091116dec896a81d2d2af68802f2d303c54d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI1MDUyOA==", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440250528", "bodyText": "The comment thing again.", "author": "wde-axelor", "createdAt": "2020-06-15T15:15:12Z", "path": "axelor-production/src/main/java/com/axelor/apps/production/service/manuforder/ManufOrderWorkflowService.java", "diffHunk": "@@ -650,4 +656,155 @@ public void createPurchaseOrder(ManufOrder manufOrder) throws AxelorException {\n \n     Beans.get(ManufOrderRepository.class).save(manufOrder);\n   }\n+\n+  @Transactional(rollbackOn = {Exception.class})\n+  public void merge(List<Long> ids) throws AxelorException {\n+    List<ManufOrder> manufOrderList =\n+        Beans.get(ManufOrderRepository.class)\n+            .all()\n+            .filter(\"self.id in (\" + Joiner.on(\",\").join(ids) + \")\")\n+            .fetch();\n+\n+    /** Init all the necessary values to create the new Manuf Order */\n+    Product product = manufOrderList.get(0).getProduct();\n+    StockLocation stockLocation = manufOrderList.get(0).getWorkshopStockLocation();\n+    Company company = manufOrderList.get(0).getCompany();\n+    BillOfMaterial billOfMaterial =\n+        manufOrderList.stream()\n+            .filter(x -> x.getBillOfMaterial().getVersionNumber() == 1)\n+            .findFirst()\n+            .get()\n+            .getBillOfMaterial();\n+    int priority = manufOrderList.stream().mapToInt(mo -> mo.getPrioritySelect()).max().getAsInt();\n+    Unit unit = billOfMaterial.getUnit();\n+    BigDecimal qty = BigDecimal.ZERO;\n+    String note = \"\";\n+\n+    ManufOrder mergedManufOrder = new ManufOrder();\n+\n+    for (ManufOrder manufOrder : manufOrderList) {\n+      manufOrder.setStatusSelect(ManufOrderRepository.STATUS_FUSIONNED);\n+\n+      manufOrder.setManufOrderMergeResult(mergedManufOrder);\n+      for (ProductionOrder productionOrder : manufOrder.getProductionOrderSet()) {\n+        mergedManufOrder.addProductionOrderSetItem(productionOrder);\n+      }\n+      for (SaleOrder saleOrder : manufOrder.getSaleOrderSet()) {\n+        mergedManufOrder.addSaleOrderSetItem(saleOrder);\n+      }\n+      /**\n+       * If unit are the same, then add the qty If not, convert the unit and get the converted qty\n+       */\n+      if (manufOrder.getUnit().equals(unit)) {\n+        qty = qty.add(manufOrder.getQty());\n+      } else {\n+        BigDecimal qtyConverted =\n+            Beans.get(UnitConversionService.class)\n+                .convert(\n+                    manufOrder.getUnit(),\n+                    unit,\n+                    manufOrder.getQty(),\n+                    AppBaseService.DEFAULT_NB_DECIMAL_DIGITS,\n+                    null);\n+        qty = qty.add(qtyConverted);\n+      }\n+      if (manufOrder.getNote() != null && manufOrder.getNote() != \"\") {\n+        note += manufOrder.getManufOrderSeq() + \" : \" + manufOrder.getNote() + \"\\n\";\n+      }\n+    }\n+\n+    /** Update the created manuf order */\n+    mergedManufOrder.setStatusSelect(ManufOrderRepository.STATUS_DRAFT);\n+    mergedManufOrder.setProduct(product);\n+    mergedManufOrder.setUnit(unit);\n+    mergedManufOrder.setWorkshopStockLocation(stockLocation);\n+    mergedManufOrder.setQty(qty);\n+    mergedManufOrder.setBillOfMaterial(billOfMaterial);\n+    mergedManufOrder.setCompany(company);\n+    mergedManufOrder.setPrioritySelect(priority);\n+    mergedManufOrder.setProdProcess(billOfMaterial.getProdProcess());\n+    mergedManufOrder.setNote(note);\n+\n+    AppProductionService appProductionService = Beans.get(AppProductionService.class);\n+\n+    /**", "originalCommit": "7e3091116dec896a81d2d2af68802f2d303c54d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI1MTk0MQ==", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440251941", "bodyText": "ManufOrderWorkflowService is injecting itself in one of its methods ?\nGenerally speaking, there are a lot of Beans.get in this big method. Make sure to check if some of them should not be @Inject-ed instead. Either for performance or to handle possible circular dependencies.", "author": "wde-axelor", "createdAt": "2020-06-15T15:16:58Z", "path": "axelor-production/src/main/java/com/axelor/apps/production/service/manuforder/ManufOrderWorkflowService.java", "diffHunk": "@@ -650,4 +656,155 @@ public void createPurchaseOrder(ManufOrder manufOrder) throws AxelorException {\n \n     Beans.get(ManufOrderRepository.class).save(manufOrder);\n   }\n+\n+  @Transactional(rollbackOn = {Exception.class})\n+  public void merge(List<Long> ids) throws AxelorException {\n+    List<ManufOrder> manufOrderList =\n+        Beans.get(ManufOrderRepository.class)\n+            .all()\n+            .filter(\"self.id in (\" + Joiner.on(\",\").join(ids) + \")\")\n+            .fetch();\n+\n+    /** Init all the necessary values to create the new Manuf Order */\n+    Product product = manufOrderList.get(0).getProduct();\n+    StockLocation stockLocation = manufOrderList.get(0).getWorkshopStockLocation();\n+    Company company = manufOrderList.get(0).getCompany();\n+    BillOfMaterial billOfMaterial =\n+        manufOrderList.stream()\n+            .filter(x -> x.getBillOfMaterial().getVersionNumber() == 1)\n+            .findFirst()\n+            .get()\n+            .getBillOfMaterial();\n+    int priority = manufOrderList.stream().mapToInt(mo -> mo.getPrioritySelect()).max().getAsInt();\n+    Unit unit = billOfMaterial.getUnit();\n+    BigDecimal qty = BigDecimal.ZERO;\n+    String note = \"\";\n+\n+    ManufOrder mergedManufOrder = new ManufOrder();\n+\n+    for (ManufOrder manufOrder : manufOrderList) {\n+      manufOrder.setStatusSelect(ManufOrderRepository.STATUS_FUSIONNED);\n+\n+      manufOrder.setManufOrderMergeResult(mergedManufOrder);\n+      for (ProductionOrder productionOrder : manufOrder.getProductionOrderSet()) {\n+        mergedManufOrder.addProductionOrderSetItem(productionOrder);\n+      }\n+      for (SaleOrder saleOrder : manufOrder.getSaleOrderSet()) {\n+        mergedManufOrder.addSaleOrderSetItem(saleOrder);\n+      }\n+      /**\n+       * If unit are the same, then add the qty If not, convert the unit and get the converted qty\n+       */\n+      if (manufOrder.getUnit().equals(unit)) {\n+        qty = qty.add(manufOrder.getQty());\n+      } else {\n+        BigDecimal qtyConverted =\n+            Beans.get(UnitConversionService.class)\n+                .convert(\n+                    manufOrder.getUnit(),\n+                    unit,\n+                    manufOrder.getQty(),\n+                    AppBaseService.DEFAULT_NB_DECIMAL_DIGITS,\n+                    null);\n+        qty = qty.add(qtyConverted);\n+      }\n+      if (manufOrder.getNote() != null && manufOrder.getNote() != \"\") {\n+        note += manufOrder.getManufOrderSeq() + \" : \" + manufOrder.getNote() + \"\\n\";\n+      }\n+    }\n+\n+    /** Update the created manuf order */\n+    mergedManufOrder.setStatusSelect(ManufOrderRepository.STATUS_DRAFT);\n+    mergedManufOrder.setProduct(product);\n+    mergedManufOrder.setUnit(unit);\n+    mergedManufOrder.setWorkshopStockLocation(stockLocation);\n+    mergedManufOrder.setQty(qty);\n+    mergedManufOrder.setBillOfMaterial(billOfMaterial);\n+    mergedManufOrder.setCompany(company);\n+    mergedManufOrder.setPrioritySelect(priority);\n+    mergedManufOrder.setProdProcess(billOfMaterial.getProdProcess());\n+    mergedManufOrder.setNote(note);\n+\n+    AppProductionService appProductionService = Beans.get(AppProductionService.class);\n+\n+    /**\n+     * Check the config to see if you directly plan the created manuf order or just prefill the\n+     * opertations\n+     */\n+    if (appProductionService.isApp(\"production\")\n+        && appProductionService.getAppProduction().getIsAutomaticallyPlanified()) {\n+      Beans.get(ManufOrderWorkflowService.class).plan(mergedManufOrder);", "originalCommit": "7e3091116dec896a81d2d2af68802f2d303c54d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI1Mzk4OQ==", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440253989", "bodyText": "ManufOrderRepository is already injected in the constructor. No need to use Beans.get.\nAlso, the msitake had already been made at other places in this file (at the very least, a few lines above this one), might as well fix them since we're at it.", "author": "wde-axelor", "createdAt": "2020-06-15T15:19:55Z", "path": "axelor-production/src/main/java/com/axelor/apps/production/service/manuforder/ManufOrderWorkflowService.java", "diffHunk": "@@ -650,4 +656,155 @@ public void createPurchaseOrder(ManufOrder manufOrder) throws AxelorException {\n \n     Beans.get(ManufOrderRepository.class).save(manufOrder);\n   }\n+\n+  @Transactional(rollbackOn = {Exception.class})\n+  public void merge(List<Long> ids) throws AxelorException {\n+    List<ManufOrder> manufOrderList =\n+        Beans.get(ManufOrderRepository.class)", "originalCommit": "7e3091116dec896a81d2d2af68802f2d303c54d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI1NDM3NA==", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440254374", "bodyText": "It's already injected in the constructor.", "author": "wde-axelor", "createdAt": "2020-06-15T15:20:25Z", "path": "axelor-production/src/main/java/com/axelor/apps/production/service/manuforder/ManufOrderWorkflowService.java", "diffHunk": "@@ -650,4 +656,155 @@ public void createPurchaseOrder(ManufOrder manufOrder) throws AxelorException {\n \n     Beans.get(ManufOrderRepository.class).save(manufOrder);\n   }\n+\n+  @Transactional(rollbackOn = {Exception.class})\n+  public void merge(List<Long> ids) throws AxelorException {\n+    List<ManufOrder> manufOrderList =\n+        Beans.get(ManufOrderRepository.class)\n+            .all()\n+            .filter(\"self.id in (\" + Joiner.on(\",\").join(ids) + \")\")\n+            .fetch();\n+\n+    /** Init all the necessary values to create the new Manuf Order */\n+    Product product = manufOrderList.get(0).getProduct();\n+    StockLocation stockLocation = manufOrderList.get(0).getWorkshopStockLocation();\n+    Company company = manufOrderList.get(0).getCompany();\n+    BillOfMaterial billOfMaterial =\n+        manufOrderList.stream()\n+            .filter(x -> x.getBillOfMaterial().getVersionNumber() == 1)\n+            .findFirst()\n+            .get()\n+            .getBillOfMaterial();\n+    int priority = manufOrderList.stream().mapToInt(mo -> mo.getPrioritySelect()).max().getAsInt();\n+    Unit unit = billOfMaterial.getUnit();\n+    BigDecimal qty = BigDecimal.ZERO;\n+    String note = \"\";\n+\n+    ManufOrder mergedManufOrder = new ManufOrder();\n+\n+    for (ManufOrder manufOrder : manufOrderList) {\n+      manufOrder.setStatusSelect(ManufOrderRepository.STATUS_FUSIONNED);\n+\n+      manufOrder.setManufOrderMergeResult(mergedManufOrder);\n+      for (ProductionOrder productionOrder : manufOrder.getProductionOrderSet()) {\n+        mergedManufOrder.addProductionOrderSetItem(productionOrder);\n+      }\n+      for (SaleOrder saleOrder : manufOrder.getSaleOrderSet()) {\n+        mergedManufOrder.addSaleOrderSetItem(saleOrder);\n+      }\n+      /**\n+       * If unit are the same, then add the qty If not, convert the unit and get the converted qty\n+       */\n+      if (manufOrder.getUnit().equals(unit)) {\n+        qty = qty.add(manufOrder.getQty());\n+      } else {\n+        BigDecimal qtyConverted =\n+            Beans.get(UnitConversionService.class)\n+                .convert(\n+                    manufOrder.getUnit(),\n+                    unit,\n+                    manufOrder.getQty(),\n+                    AppBaseService.DEFAULT_NB_DECIMAL_DIGITS,\n+                    null);\n+        qty = qty.add(qtyConverted);\n+      }\n+      if (manufOrder.getNote() != null && manufOrder.getNote() != \"\") {\n+        note += manufOrder.getManufOrderSeq() + \" : \" + manufOrder.getNote() + \"\\n\";\n+      }\n+    }\n+\n+    /** Update the created manuf order */\n+    mergedManufOrder.setStatusSelect(ManufOrderRepository.STATUS_DRAFT);\n+    mergedManufOrder.setProduct(product);\n+    mergedManufOrder.setUnit(unit);\n+    mergedManufOrder.setWorkshopStockLocation(stockLocation);\n+    mergedManufOrder.setQty(qty);\n+    mergedManufOrder.setBillOfMaterial(billOfMaterial);\n+    mergedManufOrder.setCompany(company);\n+    mergedManufOrder.setPrioritySelect(priority);\n+    mergedManufOrder.setProdProcess(billOfMaterial.getProdProcess());\n+    mergedManufOrder.setNote(note);\n+\n+    AppProductionService appProductionService = Beans.get(AppProductionService.class);\n+\n+    /**\n+     * Check the config to see if you directly plan the created manuf order or just prefill the\n+     * opertations\n+     */\n+    if (appProductionService.isApp(\"production\")\n+        && appProductionService.getAppProduction().getIsAutomaticallyPlanified()) {\n+      Beans.get(ManufOrderWorkflowService.class).plan(mergedManufOrder);\n+    } else {\n+      ManufOrderService moService = Beans.get(ManufOrderService.class);\n+      moService.preFillOperations(mergedManufOrder);\n+    }\n+\n+    Beans.get(ManufOrderRepository.class).save(mergedManufOrder);", "originalCommit": "7e3091116dec896a81d2d2af68802f2d303c54d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI1NDY1OA==", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440254658", "bodyText": "It's already injected in the constructor", "author": "wde-axelor", "createdAt": "2020-06-15T15:20:49Z", "path": "axelor-production/src/main/java/com/axelor/apps/production/service/manuforder/ManufOrderWorkflowService.java", "diffHunk": "@@ -650,4 +656,155 @@ public void createPurchaseOrder(ManufOrder manufOrder) throws AxelorException {\n \n     Beans.get(ManufOrderRepository.class).save(manufOrder);\n   }\n+\n+  @Transactional(rollbackOn = {Exception.class})\n+  public void merge(List<Long> ids) throws AxelorException {\n+    List<ManufOrder> manufOrderList =\n+        Beans.get(ManufOrderRepository.class)\n+            .all()\n+            .filter(\"self.id in (\" + Joiner.on(\",\").join(ids) + \")\")\n+            .fetch();\n+\n+    /** Init all the necessary values to create the new Manuf Order */\n+    Product product = manufOrderList.get(0).getProduct();\n+    StockLocation stockLocation = manufOrderList.get(0).getWorkshopStockLocation();\n+    Company company = manufOrderList.get(0).getCompany();\n+    BillOfMaterial billOfMaterial =\n+        manufOrderList.stream()\n+            .filter(x -> x.getBillOfMaterial().getVersionNumber() == 1)\n+            .findFirst()\n+            .get()\n+            .getBillOfMaterial();\n+    int priority = manufOrderList.stream().mapToInt(mo -> mo.getPrioritySelect()).max().getAsInt();\n+    Unit unit = billOfMaterial.getUnit();\n+    BigDecimal qty = BigDecimal.ZERO;\n+    String note = \"\";\n+\n+    ManufOrder mergedManufOrder = new ManufOrder();\n+\n+    for (ManufOrder manufOrder : manufOrderList) {\n+      manufOrder.setStatusSelect(ManufOrderRepository.STATUS_FUSIONNED);\n+\n+      manufOrder.setManufOrderMergeResult(mergedManufOrder);\n+      for (ProductionOrder productionOrder : manufOrder.getProductionOrderSet()) {\n+        mergedManufOrder.addProductionOrderSetItem(productionOrder);\n+      }\n+      for (SaleOrder saleOrder : manufOrder.getSaleOrderSet()) {\n+        mergedManufOrder.addSaleOrderSetItem(saleOrder);\n+      }\n+      /**\n+       * If unit are the same, then add the qty If not, convert the unit and get the converted qty\n+       */\n+      if (manufOrder.getUnit().equals(unit)) {\n+        qty = qty.add(manufOrder.getQty());\n+      } else {\n+        BigDecimal qtyConverted =\n+            Beans.get(UnitConversionService.class)\n+                .convert(\n+                    manufOrder.getUnit(),\n+                    unit,\n+                    manufOrder.getQty(),\n+                    AppBaseService.DEFAULT_NB_DECIMAL_DIGITS,\n+                    null);\n+        qty = qty.add(qtyConverted);\n+      }\n+      if (manufOrder.getNote() != null && manufOrder.getNote() != \"\") {\n+        note += manufOrder.getManufOrderSeq() + \" : \" + manufOrder.getNote() + \"\\n\";\n+      }\n+    }\n+\n+    /** Update the created manuf order */\n+    mergedManufOrder.setStatusSelect(ManufOrderRepository.STATUS_DRAFT);\n+    mergedManufOrder.setProduct(product);\n+    mergedManufOrder.setUnit(unit);\n+    mergedManufOrder.setWorkshopStockLocation(stockLocation);\n+    mergedManufOrder.setQty(qty);\n+    mergedManufOrder.setBillOfMaterial(billOfMaterial);\n+    mergedManufOrder.setCompany(company);\n+    mergedManufOrder.setPrioritySelect(priority);\n+    mergedManufOrder.setProdProcess(billOfMaterial.getProdProcess());\n+    mergedManufOrder.setNote(note);\n+\n+    AppProductionService appProductionService = Beans.get(AppProductionService.class);\n+\n+    /**\n+     * Check the config to see if you directly plan the created manuf order or just prefill the\n+     * opertations\n+     */\n+    if (appProductionService.isApp(\"production\")\n+        && appProductionService.getAppProduction().getIsAutomaticallyPlanified()) {\n+      Beans.get(ManufOrderWorkflowService.class).plan(mergedManufOrder);\n+    } else {\n+      ManufOrderService moService = Beans.get(ManufOrderService.class);\n+      moService.preFillOperations(mergedManufOrder);\n+    }\n+\n+    Beans.get(ManufOrderRepository.class).save(mergedManufOrder);\n+  }\n+\n+  public boolean canMerge(List<Long> ids) {\n+    List<ManufOrder> manufOrderList =\n+        Beans.get(ManufOrderRepository.class)", "originalCommit": "7e3091116dec896a81d2d2af68802f2d303c54d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI1NTUyMQ==", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440255521", "bodyText": "probably not an issue here, but it's generally better to do (ManufOrderRepository.STATUS_DRAFT).equals(x.getStatusSelect()) to avoid potential NPEs", "author": "wde-axelor", "createdAt": "2020-06-15T15:22:05Z", "path": "axelor-production/src/main/java/com/axelor/apps/production/service/manuforder/ManufOrderWorkflowService.java", "diffHunk": "@@ -650,4 +656,155 @@ public void createPurchaseOrder(ManufOrder manufOrder) throws AxelorException {\n \n     Beans.get(ManufOrderRepository.class).save(manufOrder);\n   }\n+\n+  @Transactional(rollbackOn = {Exception.class})\n+  public void merge(List<Long> ids) throws AxelorException {\n+    List<ManufOrder> manufOrderList =\n+        Beans.get(ManufOrderRepository.class)\n+            .all()\n+            .filter(\"self.id in (\" + Joiner.on(\",\").join(ids) + \")\")\n+            .fetch();\n+\n+    /** Init all the necessary values to create the new Manuf Order */\n+    Product product = manufOrderList.get(0).getProduct();\n+    StockLocation stockLocation = manufOrderList.get(0).getWorkshopStockLocation();\n+    Company company = manufOrderList.get(0).getCompany();\n+    BillOfMaterial billOfMaterial =\n+        manufOrderList.stream()\n+            .filter(x -> x.getBillOfMaterial().getVersionNumber() == 1)\n+            .findFirst()\n+            .get()\n+            .getBillOfMaterial();\n+    int priority = manufOrderList.stream().mapToInt(mo -> mo.getPrioritySelect()).max().getAsInt();\n+    Unit unit = billOfMaterial.getUnit();\n+    BigDecimal qty = BigDecimal.ZERO;\n+    String note = \"\";\n+\n+    ManufOrder mergedManufOrder = new ManufOrder();\n+\n+    for (ManufOrder manufOrder : manufOrderList) {\n+      manufOrder.setStatusSelect(ManufOrderRepository.STATUS_FUSIONNED);\n+\n+      manufOrder.setManufOrderMergeResult(mergedManufOrder);\n+      for (ProductionOrder productionOrder : manufOrder.getProductionOrderSet()) {\n+        mergedManufOrder.addProductionOrderSetItem(productionOrder);\n+      }\n+      for (SaleOrder saleOrder : manufOrder.getSaleOrderSet()) {\n+        mergedManufOrder.addSaleOrderSetItem(saleOrder);\n+      }\n+      /**\n+       * If unit are the same, then add the qty If not, convert the unit and get the converted qty\n+       */\n+      if (manufOrder.getUnit().equals(unit)) {\n+        qty = qty.add(manufOrder.getQty());\n+      } else {\n+        BigDecimal qtyConverted =\n+            Beans.get(UnitConversionService.class)\n+                .convert(\n+                    manufOrder.getUnit(),\n+                    unit,\n+                    manufOrder.getQty(),\n+                    AppBaseService.DEFAULT_NB_DECIMAL_DIGITS,\n+                    null);\n+        qty = qty.add(qtyConverted);\n+      }\n+      if (manufOrder.getNote() != null && manufOrder.getNote() != \"\") {\n+        note += manufOrder.getManufOrderSeq() + \" : \" + manufOrder.getNote() + \"\\n\";\n+      }\n+    }\n+\n+    /** Update the created manuf order */\n+    mergedManufOrder.setStatusSelect(ManufOrderRepository.STATUS_DRAFT);\n+    mergedManufOrder.setProduct(product);\n+    mergedManufOrder.setUnit(unit);\n+    mergedManufOrder.setWorkshopStockLocation(stockLocation);\n+    mergedManufOrder.setQty(qty);\n+    mergedManufOrder.setBillOfMaterial(billOfMaterial);\n+    mergedManufOrder.setCompany(company);\n+    mergedManufOrder.setPrioritySelect(priority);\n+    mergedManufOrder.setProdProcess(billOfMaterial.getProdProcess());\n+    mergedManufOrder.setNote(note);\n+\n+    AppProductionService appProductionService = Beans.get(AppProductionService.class);\n+\n+    /**\n+     * Check the config to see if you directly plan the created manuf order or just prefill the\n+     * opertations\n+     */\n+    if (appProductionService.isApp(\"production\")\n+        && appProductionService.getAppProduction().getIsAutomaticallyPlanified()) {\n+      Beans.get(ManufOrderWorkflowService.class).plan(mergedManufOrder);\n+    } else {\n+      ManufOrderService moService = Beans.get(ManufOrderService.class);\n+      moService.preFillOperations(mergedManufOrder);\n+    }\n+\n+    Beans.get(ManufOrderRepository.class).save(mergedManufOrder);\n+  }\n+\n+  public boolean canMerge(List<Long> ids) {\n+    List<ManufOrder> manufOrderList =\n+        Beans.get(ManufOrderRepository.class)\n+            .all()\n+            .filter(\"self.id in (\" + Joiner.on(\",\").join(ids) + \")\")\n+            .fetch();\n+\n+    // I check if all the status of the manuf order in the list are Draft or\n+    // Planned. If not i can return false\n+    boolean allStatusDraftOrPlanned =\n+        manufOrderList.stream()\n+            .allMatch(\n+                x ->\n+                    x.getStatusSelect().equals(ManufOrderRepository.STATUS_DRAFT)", "originalCommit": "7e3091116dec896a81d2d2af68802f2d303c54d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI5Njk1Nw==", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440296957", "bodyText": "Error messages should be defined in static variables in a separate interface.", "author": "wde-axelor", "createdAt": "2020-06-15T16:24:20Z", "path": "axelor-production/src/main/java/com/axelor/apps/production/web/ManufOrderController.java", "diffHunk": "@@ -459,4 +460,45 @@ public void computeCostPrice(ActionRequest request, ActionResponse response) {\n       TraceBackService.trace(response, e);\n     }\n   }\n+\n+  public void checkMergeValues(ActionRequest request, ActionResponse response) {\n+    try {\n+      if (request.getContext().get(\"id\") != null) {\n+        response.setError(I18n.get(\"Please select more than one OF\"));", "originalCommit": "7e3091116dec896a81d2d2af68802f2d303c54d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI5NzA4OQ==", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440297089", "bodyText": "Error messages should be defined in static variables in a separate interface.", "author": "wde-axelor", "createdAt": "2020-06-15T16:24:34Z", "path": "axelor-production/src/main/java/com/axelor/apps/production/web/ManufOrderController.java", "diffHunk": "@@ -459,4 +460,45 @@ public void computeCostPrice(ActionRequest request, ActionResponse response) {\n       TraceBackService.trace(response, e);\n     }\n   }\n+\n+  public void checkMergeValues(ActionRequest request, ActionResponse response) {\n+    try {\n+      if (request.getContext().get(\"id\") != null) {\n+        response.setError(I18n.get(\"Please select more than one OF\"));\n+      } else {\n+        Object _ids = request.getContext().get(\"_ids\");\n+        if (!ObjectUtils.isEmpty(_ids)) {\n+          List<Long> ids = (List<Long>) _ids;\n+          if (ids.size() < 2) {\n+            response.setError(I18n.get(\"Please select more than one OF\"));", "originalCommit": "7e3091116dec896a81d2d2af68802f2d303c54d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI5OTkzNA==", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440299934", "bodyText": "typo : sur --> sure\nTry not to abbreviate \"manufacturing\" into \"manuf\" or at least put a dot : \"manuf.\"\nError messages should be defined in static variables in a separate interface.", "author": "wde-axelor", "createdAt": "2020-06-15T16:29:19Z", "path": "axelor-production/src/main/java/com/axelor/apps/production/web/ManufOrderController.java", "diffHunk": "@@ -459,4 +460,45 @@ public void computeCostPrice(ActionRequest request, ActionResponse response) {\n       TraceBackService.trace(response, e);\n     }\n   }\n+\n+  public void checkMergeValues(ActionRequest request, ActionResponse response) {\n+    try {\n+      if (request.getContext().get(\"id\") != null) {\n+        response.setError(I18n.get(\"Please select more than one OF\"));\n+      } else {\n+        Object _ids = request.getContext().get(\"_ids\");\n+        if (!ObjectUtils.isEmpty(_ids)) {\n+          List<Long> ids = (List<Long>) _ids;\n+          if (ids.size() < 2) {\n+            response.setError(I18n.get(\"Please select more than one OF\"));\n+          } else {\n+            boolean canMerge = Beans.get(ManufOrderWorkflowService.class).canMerge(ids);\n+            if (canMerge) {\n+              response.setAlert(I18n.get(\"Are you sur you want to merge those manuf orders?\"));", "originalCommit": "7e3091116dec896a81d2d2af68802f2d303c54d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwMDQ1NQ==", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440300455", "bodyText": "concerns --> concern (no s), \"and will\" --> with\nError messages should be defined in static variables in a separate interface.", "author": "wde-axelor", "createdAt": "2020-06-15T16:30:10Z", "path": "axelor-production/src/main/java/com/axelor/apps/production/web/ManufOrderController.java", "diffHunk": "@@ -459,4 +460,45 @@ public void computeCostPrice(ActionRequest request, ActionResponse response) {\n       TraceBackService.trace(response, e);\n     }\n   }\n+\n+  public void checkMergeValues(ActionRequest request, ActionResponse response) {\n+    try {\n+      if (request.getContext().get(\"id\") != null) {\n+        response.setError(I18n.get(\"Please select more than one OF\"));\n+      } else {\n+        Object _ids = request.getContext().get(\"_ids\");\n+        if (!ObjectUtils.isEmpty(_ids)) {\n+          List<Long> ids = (List<Long>) _ids;\n+          if (ids.size() < 2) {\n+            response.setError(I18n.get(\"Please select more than one OF\"));\n+          } else {\n+            boolean canMerge = Beans.get(ManufOrderWorkflowService.class).canMerge(ids);\n+            if (canMerge) {\n+              response.setAlert(I18n.get(\"Are you sur you want to merge those manuf orders?\"));\n+            } else {\n+              response.setError(\n+                  I18n.get(\n+                      \"The merge must concerns only manuf order with Draft or Planned status, with the same products and same workshop stock location and will all bill of material compatibles.\"));", "originalCommit": "7e3091116dec896a81d2d2af68802f2d303c54d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwMDU1Mg==", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440300552", "bodyText": "Error messages should be defined in static variables in a separate interface.", "author": "wde-axelor", "createdAt": "2020-06-15T16:30:19Z", "path": "axelor-production/src/main/java/com/axelor/apps/production/web/ManufOrderController.java", "diffHunk": "@@ -459,4 +460,45 @@ public void computeCostPrice(ActionRequest request, ActionResponse response) {\n       TraceBackService.trace(response, e);\n     }\n   }\n+\n+  public void checkMergeValues(ActionRequest request, ActionResponse response) {\n+    try {\n+      if (request.getContext().get(\"id\") != null) {\n+        response.setError(I18n.get(\"Please select more than one OF\"));\n+      } else {\n+        Object _ids = request.getContext().get(\"_ids\");\n+        if (!ObjectUtils.isEmpty(_ids)) {\n+          List<Long> ids = (List<Long>) _ids;\n+          if (ids.size() < 2) {\n+            response.setError(I18n.get(\"Please select more than one OF\"));\n+          } else {\n+            boolean canMerge = Beans.get(ManufOrderWorkflowService.class).canMerge(ids);\n+            if (canMerge) {\n+              response.setAlert(I18n.get(\"Are you sur you want to merge those manuf orders?\"));\n+            } else {\n+              response.setError(\n+                  I18n.get(\n+                      \"The merge must concerns only manuf order with Draft or Planned status, with the same products and same workshop stock location and will all bill of material compatibles.\"));\n+            }\n+          }\n+        } else {\n+          response.setError(I18n.get(\"Please select something to validate\"));", "originalCommit": "7e3091116dec896a81d2d2af68802f2d303c54d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwMjE2OQ==", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440302169", "bodyText": "Is the case where no line is selected handled ? Either here or in the \"merge\" method, I don't see it when looking rapidly.", "author": "wde-axelor", "createdAt": "2020-06-15T16:33:09Z", "path": "axelor-production/src/main/java/com/axelor/apps/production/web/ManufOrderController.java", "diffHunk": "@@ -459,4 +460,45 @@ public void computeCostPrice(ActionRequest request, ActionResponse response) {\n       TraceBackService.trace(response, e);\n     }\n   }\n+\n+  public void checkMergeValues(ActionRequest request, ActionResponse response) {\n+    try {\n+      if (request.getContext().get(\"id\") != null) {\n+        response.setError(I18n.get(\"Please select more than one OF\"));\n+      } else {\n+        Object _ids = request.getContext().get(\"_ids\");\n+        if (!ObjectUtils.isEmpty(_ids)) {\n+          List<Long> ids = (List<Long>) _ids;\n+          if (ids.size() < 2) {\n+            response.setError(I18n.get(\"Please select more than one OF\"));\n+          } else {\n+            boolean canMerge = Beans.get(ManufOrderWorkflowService.class).canMerge(ids);\n+            if (canMerge) {\n+              response.setAlert(I18n.get(\"Are you sur you want to merge those manuf orders?\"));\n+            } else {\n+              response.setError(\n+                  I18n.get(\n+                      \"The merge must concerns only manuf order with Draft or Planned status, with the same products and same workshop stock location and will all bill of material compatibles.\"));\n+            }\n+          }\n+        } else {\n+          response.setError(I18n.get(\"Please select something to validate\"));\n+        }\n+      }\n+\n+    } catch (Exception e) {\n+      TraceBackService.trace(response, e);\n+    }\n+  }\n+\n+  public void generateMergeManufOrder(ActionRequest request, ActionResponse response) {\n+    try {\n+      Object _ids = request.getContext().get(\"_ids\");", "originalCommit": "7e3091116dec896a81d2d2af68802f2d303c54d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2ddcc5b9ed62e12893c1c82448acf540c9761566", "url": "https://github.com/axelor/axelor-open-suite/commit/2ddcc5b9ed62e12893c1c82448acf540c9761566", "message": "Fix merge request", "committedDate": "2020-06-16T09:50:36Z", "type": "commit"}, {"oid": "64a8b2eb6db2c62f470238ae0afc586a356f2101", "url": "https://github.com/axelor/axelor-open-suite/commit/64a8b2eb6db2c62f470238ae0afc586a356f2101", "message": "Fix indentation issue", "committedDate": "2020-06-16T10:11:12Z", "type": "commit"}]}