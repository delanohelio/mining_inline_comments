{"pr_number": 4010, "pr_title": "[GEOS-9474] Json-ld backward mapping will not work when pointing to c\u2026", "pr_createdAt": "2020-01-27T08:32:53Z", "pr_url": "https://github.com/geoserver/geoserver/pull/4010", "timeline": [{"oid": "ebc60056b7d906808710ec0a471900680d1acbe0", "url": "https://github.com/geoserver/geoserver/commit/ebc60056b7d906808710ec0a471900680d1acbe0", "message": "[GEOS-9474] Json-ld backward mapping will not work when pointing to cql function comprising xpath", "committedDate": "2020-01-27T13:33:06Z", "type": "forcePushed"}, {"oid": "6aeb32c760c7f6c267e99078efe9edccd3b36b94", "url": "https://github.com/geoserver/geoserver/commit/6aeb32c760c7f6c267e99078efe9edccd3b36b94", "message": "[GEOS-9474] Json-ld backward mapping will not work when pointing to cql function comprising xpath", "committedDate": "2020-01-27T13:49:35Z", "type": "forcePushed"}, {"oid": "aefd3a4b28249e89961af9e29feb15126cf2152c", "url": "https://github.com/geoserver/geoserver/commit/aefd3a4b28249e89961af9e29feb15126cf2152c", "message": "[GEOS-9474] Json-ld backward mapping will not work when pointing to cql function comprising xpath", "committedDate": "2020-01-27T16:13:03Z", "type": "forcePushed"}, {"oid": "73d851e4443b3af20a28bdcc7de78a419a933897", "url": "https://github.com/geoserver/geoserver/commit/73d851e4443b3af20a28bdcc7de78a419a933897", "message": "[GEOS-9474] Json-ld backward mapping will not work when pointing to cql function comprising xpath", "committedDate": "2020-01-28T11:01:36Z", "type": "forcePushed"}, {"oid": "30a0ce01978407cf6ef7a6c13122ec176ba857aa", "url": "https://github.com/geoserver/geoserver/commit/30a0ce01978407cf6ef7a6c13122ec176ba857aa", "message": "[GEOS-9474] Json-ld backward mapping will not work when pointing to cql function comprising xpath", "committedDate": "2020-01-28T17:01:57Z", "type": "forcePushed"}, {"oid": "f238987e99e68be789dc2455ec98fa7bdcb249c1", "url": "https://github.com/geoserver/geoserver/commit/f238987e99e68be789dc2455ec98fa7bdcb249c1", "message": "[GEOS-9474] Json-ld backward mapping will not work when pointing to cql function comprising xpath", "committedDate": "2020-01-29T10:42:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcxODIyOA==", "url": "https://github.com/geoserver/geoserver/pull/4010#discussion_r375718228", "bodyText": "This function would deserve some comments explaining its behavior, and ideally should be break into small chunks. No need to change, just sharing my thoughts.", "author": "nmco", "createdAt": "2020-02-06T09:19:01Z", "path": "src/community/json-ld/src/main/java/org/geoserver/jsonld/builders/impl/DynamicValueBuilder.java", "diffHunk": "@@ -96,57 +112,48 @@ private Object evaluateExpressions(JsonBuilderContext context) {\n                 context = context.getParent();\n                 i++;\n             }\n-            if (namespaces != null) prepareXpathFilter(cql);\n             result = cql.evaluate(context.getCurrentObj());\n         } catch (Exception e) {\n             LOGGER.log(Level.INFO, \"Unable to evaluate expression. Exception: {0}\", e.getMessage());\n         }\n         return result;\n     }\n \n-    private void prepareXpathFilter(Expression expr) {\n-        List<Expression> params = ((Function) expr).getParameters();\n-        if (params.size() > 0) {\n-            for (Expression e : params) {\n-                if (e instanceof XPathFunction) ((XPathFunction) e).setNamespaces(namespaces);\n-                else if (e instanceof Function) {\n-                    prepareXpathFilter(e);\n+    private void literalXpathToPropertyName(Expression expr, String literalXpath) {", "originalCommit": "f238987e99e68be789dc2455ec98fa7bdcb249c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc3NzkyMw==", "url": "https://github.com/geoserver/geoserver/pull/4010#discussion_r375777923", "bodyText": "Thanks for the review @nmco this feedback has been applied", "author": "taba90", "createdAt": "2020-02-06T11:19:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcxODIyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcxODc2Ng==", "url": "https://github.com/geoserver/geoserver/pull/4010#discussion_r375718766", "bodyText": "Here you probably want to check if its a binary expression and setting it accordingly no?", "author": "nmco", "createdAt": "2020-02-06T09:20:08Z", "path": "src/community/json-ld/src/main/java/org/geoserver/jsonld/builders/impl/DynamicValueBuilder.java", "diffHunk": "@@ -96,57 +112,48 @@ private Object evaluateExpressions(JsonBuilderContext context) {\n                 context = context.getParent();\n                 i++;\n             }\n-            if (namespaces != null) prepareXpathFilter(cql);\n             result = cql.evaluate(context.getCurrentObj());\n         } catch (Exception e) {\n             LOGGER.log(Level.INFO, \"Unable to evaluate expression. Exception: {0}\", e.getMessage());\n         }\n         return result;\n     }\n \n-    private void prepareXpathFilter(Expression expr) {\n-        List<Expression> params = ((Function) expr).getParameters();\n-        if (params.size() > 0) {\n-            for (Expression e : params) {\n-                if (e instanceof XPathFunction) ((XPathFunction) e).setNamespaces(namespaces);\n-                else if (e instanceof Function) {\n-                    prepareXpathFilter(e);\n+    private void literalXpathToPropertyName(Expression expr, String literalXpath) {\n+        List<Expression> params = null;\n+        if (expr instanceof Function) {\n+            params = ((Function) expr).getParameters();\n+        } else if (expr instanceof BinaryExpression) {\n+            params =\n+                    Arrays.asList(\n+                            ((BinaryExpression) expr).getExpression1(),\n+                            ((BinaryExpression) expr).getExpression2());\n+        }\n+        List<Expression> newParams = new ArrayList<>(params.size());\n+        if (params != null || params.size() > 0) {\n+            for (int i = 0; i < params.size(); i++) {\n+                Expression e = params.get(i);\n+                if (e instanceof Literal) {\n+                    Literal literal = (Literal) params.get(i);\n+                    String unquoted = literalXpath.replaceAll(\"'\", \"\");\n+                    if (String.valueOf(literal.getValue()).equals(unquoted)) {\n+                        PropertyName pn = new AttributeExpressionImpl(unquoted, namespaces);\n+                        newParams.add(i, pn);\n+                    } else {\n+                        newParams.add(i, e);\n+                    }\n+                } else if (e instanceof Function) {\n+                    newParams.add(e);\n+                    literalXpathToPropertyName(e, literalXpath);\n                 }\n             }\n         }\n-    }\n-\n-    /**\n-     * Determines how many times is needed to walk up {@link JsonBuilderContext} in order to execute\n-     * xpath, and cleans it from ../ notation.\n-     *\n-     * @param xpath\n-     * @return\n-     */\n-    private String determineContextPos(String xpath) {\n-        while (xpath.contains(\"../\")) {\n-            contextPos++;\n-            xpath = xpath.replaceFirst(\"\\\\.\\\\./\", \"\");\n-        }\n-        return xpath;\n-    }\n-\n-    /**\n-     * Extract xpath from a cql expression if present\n-     *\n-     * @param expression\n-     * @return\n-     */\n-    private String workXpathFunction(String expression) {\n-        // extract xpath from cql expression if present\n-        int xpathI = expression.indexOf(\"xpath(\");\n-        if (xpathI != -1) {\n-            int xpathI2 = expression.indexOf(\")\", xpathI);\n-            String xpath = expression.substring(xpathI, xpathI2 + 1);\n-            determineContextPos(xpath);\n-            expression = expression.replaceAll(\"\\\\.\\\\./\", \"\");\n+        if (expr instanceof FunctionExpression) {\n+            ((FunctionExpression) expr).setParameters(newParams);\n+        } else if (expr instanceof MathExpressionImpl) {", "originalCommit": "f238987e99e68be789dc2455ec98fa7bdcb249c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc3OTAwOA==", "url": "https://github.com/geoserver/geoserver/pull/4010#discussion_r375779008", "bodyText": "Checking for MathExpressionImpl cause setParameters is available only casting to it. Anyway right now MathExpressionImpl is extended by all the implementation of BinaryExpression", "author": "taba90", "createdAt": "2020-02-06T11:22:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcxODc2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkzODUzNQ==", "url": "https://github.com/geoserver/geoserver/pull/4010#discussion_r375938535", "bodyText": "Interesting I didn't know that, thx @taba90!", "author": "nmco", "createdAt": "2020-02-06T16:23:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcxODc2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcxOTQ2MQ==", "url": "https://github.com/geoserver/geoserver/pull/4010#discussion_r375719461", "bodyText": "This should be isolated in a more meaningful private method and some comments explaining waht's going on added.", "author": "nmco", "createdAt": "2020-02-06T09:21:33Z", "path": "src/community/json-ld/src/main/java/org/geoserver/jsonld/builders/impl/DynamicValueBuilder.java", "diffHunk": "@@ -38,10 +41,23 @@ public DynamicValueBuilder(String key, String expression, NamespaceSupport names\n         super(key);\n         this.namespaces = namespaces;\n         if (expression.startsWith(\"$${\")) {\n-            this.cql = ExpressionsUtils.extractCqlExpressions(workXpathFunction(expression));\n+            // takes xpath fun from cql", "originalCommit": "f238987e99e68be789dc2455ec98fa7bdcb249c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc3ODAzNg==", "url": "https://github.com/geoserver/geoserver/pull/4010#discussion_r375778036", "bodyText": "applied too", "author": "taba90", "createdAt": "2020-02-06T11:20:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcxOTQ2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcxOTUyNQ==", "url": "https://github.com/geoserver/geoserver/pull/4010#discussion_r375719525", "bodyText": "Same as above here.", "author": "nmco", "createdAt": "2020-02-06T09:21:42Z", "path": "src/community/json-ld/src/main/java/org/geoserver/jsonld/builders/impl/DynamicValueBuilder.java", "diffHunk": "@@ -38,10 +41,23 @@ public DynamicValueBuilder(String key, String expression, NamespaceSupport names\n         super(key);\n         this.namespaces = namespaces;\n         if (expression.startsWith(\"$${\")) {\n-            this.cql = ExpressionsUtils.extractCqlExpressions(workXpathFunction(expression));\n+            // takes xpath fun from cql\n+            String strXpathFun = extractXpathFromCQL(expression);\n+            if (strXpathFun.indexOf(XPATH_FUN_START) != -1)\n+                this.contextPos = determineContextPos(strXpathFun);\n+            // takes the literal argument of xpathFun\n+            String literalXpath = getLiteralXpath(strXpathFun);\n+\n+            // clean the function to obtain a cql expression without xpath() syntax\n+            this.cql =\n+                    extractCqlExpressions(\n+                            cleanCQLExpression(expression, strXpathFun, literalXpath));\n+            // replace the xpath literal inside the expression with a PropertyName\n+            literalXpathToPropertyName(this.cql, removeBackDots(literalXpath));\n         } else if (expression.startsWith(\"${\")) {\n-            String strXpath = ExpressionsUtils.extractXpath(expression);\n-            strXpath = determineContextPos(strXpath);\n+            String strXpath = extractXpath(expression);", "originalCommit": "f238987e99e68be789dc2455ec98fa7bdcb249c1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcyMDA5OQ==", "url": "https://github.com/geoserver/geoserver/pull/4010#discussion_r375720099", "bodyText": "This java doc looks bad.", "author": "nmco", "createdAt": "2020-02-06T09:22:55Z", "path": "src/community/json-ld/src/main/java/org/geoserver/jsonld/expressions/ExpressionsUtils.java", "diffHunk": "@@ -220,6 +222,12 @@ public static String quoteXpathAttribute(String xpath) {\n         return xpath;\n     }\n \n+    /**\n+     * Extract Namespaces from given FeatureType\n+     *\n+     * @param type\n+     * @return\n+     */", "originalCommit": "f238987e99e68be789dc2455ec98fa7bdcb249c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc5MDE3MA==", "url": "https://github.com/geoserver/geoserver/pull/4010#discussion_r375790170", "bodyText": "fixed", "author": "taba90", "createdAt": "2020-02-06T11:49:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcyMDA5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcyMjI4OQ==", "url": "https://github.com/geoserver/geoserver/pull/4010#discussion_r375722289", "bodyText": "@taba90 I have a doubt here, if someone writes xpath  ( (notice the extra spaces) in a CQL expression will this be valid? If no then we are good, if yes then this matching needs to be improved.", "author": "nmco", "createdAt": "2020-02-06T09:27:00Z", "path": "src/community/json-ld/src/main/java/org/geoserver/jsonld/expressions/ExpressionsUtils.java", "diffHunk": "@@ -251,4 +259,70 @@ public static String removeQuotes(String cqlFilter) {\n         }\n         return strBuilder.toString();\n     }\n+\n+    /**\n+     * Clean a CQL expression from the xpath function syntax to make the xpath suitable to be\n+     * encoded as a PropertyName\n+     *\n+     * @param expression\n+     * @param toReplace\n+     * @param replacement\n+     * @return\n+     */\n+    public static String cleanCQLExpression(\n+            String expression, String toReplace, String replacement) {\n+        if (expression.indexOf(XPATH_FUN_START) != -1)", "originalCommit": "f238987e99e68be789dc2455ec98fa7bdcb249c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc5MDEwMw==", "url": "https://github.com/geoserver/geoserver/pull/4010#discussion_r375790103", "bodyText": "checked: an \"xpath (\" won't be considered valid", "author": "taba90", "createdAt": "2020-02-06T11:49:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcyMjI4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkzOTEyMQ==", "url": "https://github.com/geoserver/geoserver/pull/4010#discussion_r375939121", "bodyText": "ok, thx", "author": "nmco", "createdAt": "2020-02-06T16:24:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcyMjI4OQ=="}], "type": "inlineReview"}, {"oid": "cea75b226e02e1a59f752bfac7faad51f6a87486", "url": "https://github.com/geoserver/geoserver/commit/cea75b226e02e1a59f752bfac7faad51f6a87486", "message": "[GEOS-9474] Json-ld backward mapping will not work when pointing to cql function comprising xpath", "committedDate": "2020-02-06T11:17:40Z", "type": "forcePushed"}, {"oid": "baf619870b14367b599fda04663bfa41ca51c600", "url": "https://github.com/geoserver/geoserver/commit/baf619870b14367b599fda04663bfa41ca51c600", "message": "[GEOS-9474] Json-ld backward mapping will not work when pointing to cql function comprising xpath", "committedDate": "2020-02-06T11:43:48Z", "type": "forcePushed"}, {"oid": "6854f17d50f4c788d98e62df0851c6db3f8d5073", "url": "https://github.com/geoserver/geoserver/commit/6854f17d50f4c788d98e62df0851c6db3f8d5073", "message": "[GEOS-9474] Json-ld backward mapping will not work when pointing to cql function comprising xpath", "committedDate": "2020-02-06T12:47:51Z", "type": "forcePushed"}, {"oid": "26d3322f02f2f6caee66952d9461df217c83218b", "url": "https://github.com/geoserver/geoserver/commit/26d3322f02f2f6caee66952d9461df217c83218b", "message": "[GEOS-9474] Json-ld backward mapping will not work when pointing to cql function comprising xpath", "committedDate": "2020-02-06T13:29:29Z", "type": "forcePushed"}, {"oid": "b2addce191e6ba1047ef5da9480a6f54f2e149d9", "url": "https://github.com/geoserver/geoserver/commit/b2addce191e6ba1047ef5da9480a6f54f2e149d9", "message": "[GEOS-9474] Json-ld backward mapping will not work when pointing to cql function comprising xpath", "committedDate": "2020-02-06T15:30:47Z", "type": "forcePushed"}, {"oid": "cfb0f86f677a10a25c216aa4681467b16fac5a62", "url": "https://github.com/geoserver/geoserver/commit/cfb0f86f677a10a25c216aa4681467b16fac5a62", "message": "[GEOS-9474] Json-ld backward mapping will not work when pointing to cql function comprising xpath", "committedDate": "2020-02-11T12:03:49Z", "type": "forcePushed"}, {"oid": "4f38d44131b0256274215701e1d76e6ac4d98a9c", "url": "https://github.com/geoserver/geoserver/commit/4f38d44131b0256274215701e1d76e6ac4d98a9c", "message": "[GEOS-9474] Json-ld backward mapping will not work when pointing to cql function comprising xpath", "committedDate": "2020-02-11T16:17:43Z", "type": "commit"}, {"oid": "4f38d44131b0256274215701e1d76e6ac4d98a9c", "url": "https://github.com/geoserver/geoserver/commit/4f38d44131b0256274215701e1d76e6ac4d98a9c", "message": "[GEOS-9474] Json-ld backward mapping will not work when pointing to cql function comprising xpath", "committedDate": "2020-02-11T16:17:43Z", "type": "forcePushed"}]}