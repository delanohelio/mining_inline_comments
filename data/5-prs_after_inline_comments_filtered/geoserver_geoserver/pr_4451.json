{"pr_number": 4451, "pr_title": "[GEOS-9716] Add simple output formats support for complex features", "pr_createdAt": "2020-08-14T00:58:40Z", "pr_url": "https://github.com/geoserver/geoserver/pull/4451", "timeline": [{"oid": "89d99c07db56f2ab81ec29de62995ac918c1e8e7", "url": "https://github.com/geoserver/geoserver/commit/89d99c07db56f2ab81ec29de62995ac918c1e8e7", "message": "[GEOS-9716] Add simple output formats support for complex features", "committedDate": "2020-08-14T12:13:34Z", "type": "forcePushed"}, {"oid": "be10c1832ee01e1031f212765d2c8ca3b823755e", "url": "https://github.com/geoserver/geoserver/commit/be10c1832ee01e1031f212765d2c8ca3b823755e", "message": "[GEOS-9716] Add simple output formats support for complex features", "committedDate": "2020-08-14T12:44:18Z", "type": "forcePushed"}, {"oid": "83a289058a679510d919a6193f9b3c63a0ea91f2", "url": "https://github.com/geoserver/geoserver/commit/83a289058a679510d919a6193f9b3c63a0ea91f2", "message": "[GEOS-9716] Add simple output formats support for complex features", "committedDate": "2020-08-14T13:30:19Z", "type": "forcePushed"}, {"oid": "71e7356cd3ce68142a35050d02d44c51c5712f78", "url": "https://github.com/geoserver/geoserver/commit/71e7356cd3ce68142a35050d02d44c51c5712f78", "message": "[GEOS-9716] Add simple output formats support for complex features", "committedDate": "2020-08-14T14:00:47Z", "type": "forcePushed"}, {"oid": "a369b17177d37afbc3e9d3cbe180f91423b3c4d5", "url": "https://github.com/geoserver/geoserver/commit/a369b17177d37afbc3e9d3cbe180f91423b3c4d5", "message": "[GEOS-9716] Add simple output formats support for complex features", "committedDate": "2020-08-14T14:37:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ2NDk2MA==", "url": "https://github.com/geoserver/geoserver/pull/4451#discussion_r471464960", "bodyText": "This is a mouthful. I'd go with \"simpleConversionEnabled\"", "author": "aaime", "createdAt": "2020-08-17T13:06:18Z", "path": "src/main/src/main/java/org/geoserver/catalog/impl/ResourceInfoImpl.java", "diffHunk": "@@ -77,6 +77,8 @@\n \n     protected List<String> disabledServices = new ArrayList<>();\n \n+    protected Boolean activateComplexToSimpleOutput = false;", "originalCommit": "a369b17177d37afbc3e9d3cbe180f91423b3c4d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ2NTE3NA==", "url": "https://github.com/geoserver/geoserver/pull/4451#discussion_r471465174", "bodyText": "It's a getter for a boolean, should use \"is\" instead of \"get\" as the prefix.", "author": "aaime", "createdAt": "2020-08-17T13:06:45Z", "path": "src/main/src/main/java/org/geoserver/catalog/impl/ResourceInfoImpl.java", "diffHunk": "@@ -383,6 +385,16 @@ public void setDisabledServices(List<String> disabledServices) {\n         this.disabledServices = disabledServices;\n     }\n \n+    @Override\n+    public Boolean getActivateComplexToSimpleOutput() {", "originalCommit": "a369b17177d37afbc3e9d3cbe180f91423b3c4d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ2NzcwMQ==", "url": "https://github.com/geoserver/geoserver/pull/4451#discussion_r471467701", "bodyText": "The format is not really \"aware\" on its own here... it's more like \"ComplexFeatureUnware\" really, and needs other code to help it with conversion from simple to complex.\nMaybe you should be marking GML3OutputFormat and GeoJSONOutputFormat as ComplexFeatureAware instead, and the XSLT and OGR output formats, with a default implementation of supportsComplexFeatures that returns true all the time.", "author": "aaime", "createdAt": "2020-08-17T13:11:20Z", "path": "src/wfs/src/main/java/org/geoserver/wfs/response/ShapeZipOutputFormat.java", "diffHunk": "@@ -83,7 +83,7 @@\n  * @author ported to gs 1.6.x by Saul Farber, MassGIS, saul.farber@state.ma.us\n  */\n public class ShapeZipOutputFormat extends WFSGetFeatureOutputFormat\n-        implements ApplicationContextAware {\n+        implements ApplicationContextAware, ComplexFeatureAwareFormat {", "originalCommit": "a369b17177d37afbc3e9d3cbe180f91423b3c4d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ3MjUxNA==", "url": "https://github.com/geoserver/geoserver/pull/4451#discussion_r471472514", "bodyText": "So here the full, qualified name is used, however, in getComplexAttributeValue, the lookup is made based on the simple name. Confusing?", "author": "aaime", "createdAt": "2020-08-17T13:19:24Z", "path": "src/extension/app-schema/app-schema-web/src/main/java/org/geoserver/complex/ComplexToSimpleFeatureCollection.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.complex;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Optional;\n+import java.util.logging.Logger;\n+import org.geotools.data.DataUtilities;\n+import org.geotools.data.simple.SimpleFeatureCollection;\n+import org.geotools.data.simple.SimpleFeatureIterator;\n+import org.geotools.feature.FeatureCollection;\n+import org.geotools.feature.FeatureIterator;\n+import org.geotools.feature.simple.SimpleFeatureBuilder;\n+import org.geotools.filter.AttributeExpressionImpl;\n+import org.geotools.geometry.jts.ReferencedEnvelope;\n+import org.geotools.util.logging.Logging;\n+import org.opengis.feature.Feature;\n+import org.opengis.feature.FeatureVisitor;\n+import org.opengis.feature.Property;\n+import org.opengis.feature.simple.SimpleFeature;\n+import org.opengis.feature.simple.SimpleFeatureType;\n+import org.opengis.feature.type.FeatureType;\n+import org.opengis.feature.type.PropertyDescriptor;\n+import org.opengis.filter.Filter;\n+import org.opengis.filter.sort.SortBy;\n+import org.opengis.util.ProgressListener;\n+import org.xml.sax.helpers.NamespaceSupport;\n+\n+/**\n+ * Feature collection Wrapper. Converts complex features to simple features on the fly based on the\n+ * Layer info rules.\n+ */\n+public class ComplexToSimpleFeatureCollection implements SimpleFeatureCollection {\n+\n+    private static final Logger LOG = Logging.getLogger(ComplexToSimpleFeatureCollection.class);\n+\n+    private final Map<String, String> rulesMap;\n+    private final FeatureCollection<FeatureType, Feature> delegate;\n+    private final NamespaceSupport namespaceSupport;\n+\n+    private final SimpleFeatureType featureType;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param rulesMap the complex to simple features transformation rules map\n+     * @param featureCollection the source complex features collection\n+     */\n+    public ComplexToSimpleFeatureCollection(\n+            Map<String, String> rulesMap,\n+            FeatureCollection<FeatureType, Feature> featureCollection,\n+            NamespaceSupport namespaceSupport) {\n+        this.rulesMap = new HashMap(requireNonNull(rulesMap));\n+        this.delegate = requireNonNull(featureCollection);\n+        this.namespaceSupport = requireNonNull(namespaceSupport);\n+        this.featureType = requireNonNull(buildConvertedType());\n+        LOG.fine(() -> \"Converted feature type: \" + featureType);\n+    }\n+\n+    /**\n+     * Builds and returns the simple feature type based on the complex type and the transformation\n+     * rules.\n+     */\n+    protected SimpleFeatureType buildConvertedType() {\n+        FeatureTypeConverter converter =\n+                new FeatureTypeConverter(delegate.getSchema(), rulesMap, namespaceSupport);\n+        return converter.produceSimpleType();\n+    }\n+\n+    @Override\n+    public SimpleFeatureType getSchema() {\n+        return featureType;\n+    }\n+\n+    @Override\n+    public SimpleFeatureIterator features() {\n+        return new ComplexToSimpleFeatureIterator(delegate.features());\n+    }\n+\n+    @Override\n+    public SimpleFeatureCollection subCollection(Filter filter) {\n+        return null;\n+    }\n+\n+    @Override\n+    public SimpleFeatureCollection sort(SortBy order) {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getID() {\n+        return delegate.getID();\n+    }\n+\n+    @Override\n+    public void accepts(FeatureVisitor visitor, ProgressListener progress) throws IOException {\n+        DataUtilities.visit(this, visitor, progress);\n+    }\n+\n+    @Override\n+    public ReferencedEnvelope getBounds() {\n+        return delegate.getBounds();\n+    }\n+\n+    @Override\n+    public boolean contains(Object o) {\n+        return delegate.contains(o);\n+    }\n+\n+    @Override\n+    public boolean containsAll(Collection<?> o) {\n+        return delegate.containsAll(o);\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return delegate.isEmpty();\n+    }\n+\n+    @Override\n+    public int size() {\n+        return delegate.size();\n+    }\n+\n+    @Override\n+    public Object[] toArray() {\n+        return getFeaturesList().toArray();\n+    }\n+\n+    @Override\n+    public <O> O[] toArray(O[] a) {\n+        return getFeaturesList().toArray(a);\n+    }\n+\n+    private List<SimpleFeature> getFeaturesList() {\n+        try (SimpleFeatureIterator featureIterator = features()) {\n+            List<SimpleFeature> featuresList = new ArrayList<>();\n+            while (featureIterator.hasNext()) {\n+                featuresList.add(featureIterator.next());\n+            }\n+            return featuresList;\n+        }\n+    }\n+\n+    /** Feature iterator wrapper, converts every complex feature into a simple feature. */\n+    class ComplexToSimpleFeatureIterator implements SimpleFeatureIterator {\n+\n+        private FeatureIterator<Feature> delegate;\n+\n+        public ComplexToSimpleFeatureIterator(FeatureIterator<Feature> delegate) {\n+            this.delegate = delegate;\n+        }\n+\n+        public boolean hasNext() {\n+            return delegate.hasNext();\n+        }\n+\n+        public SimpleFeature next() throws NoSuchElementException {\n+            SimpleFeature simpleFeature = convert(delegate.next());\n+            LOG.finer(() -> \"Converted simple feature: \" + simpleFeature);\n+            return simpleFeature;\n+        }\n+\n+        /**\n+         * Transform the original complex feature into a simple feature, using the convention and\n+         * rules. Returns the resulting simple feature.\n+         */\n+        private SimpleFeature convert(Feature feature) {\n+            SimpleFeatureBuilder builder = new SimpleFeatureBuilder(featureType);\n+            for (PropertyDescriptor descriptor : featureType.getDescriptors()) {\n+                String simpleName = descriptor.getName().getLocalPart();\n+                Object attributeValue = getComplexAttributeValue(simpleName, feature);\n+                builder.set(descriptor.getName(), attributeValue);", "originalCommit": "a369b17177d37afbc3e9d3cbe180f91423b3c4d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ3NjU4NA==", "url": "https://github.com/geoserver/geoserver/pull/4451#discussion_r471476584", "bodyText": "Doesn't need to be public, does it?", "author": "aaime", "createdAt": "2020-08-17T13:25:51Z", "path": "src/extension/app-schema/app-schema-web/src/main/java/org/geoserver/complex/ComplexToSimpleOutputCommons.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.complex;\n+\n+import java.util.List;\n+import javax.xml.namespace.QName;\n+import org.geoserver.ows.Request;\n+\n+/** Common constants and functions for complex to simple features conversion. */\n+public class ComplexToSimpleOutputCommons {", "originalCommit": "a369b17177d37afbc3e9d3cbe180f91423b3c4d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ3NzExOQ==", "url": "https://github.com/geoserver/geoserver/pull/4451#discussion_r471477119", "bodyText": "In GeoServer loggers are (almost) uniformly called LOGGER", "author": "aaime", "createdAt": "2020-08-17T13:26:41Z", "path": "src/extension/app-schema/app-schema-web/src/main/java/org/geoserver/complex/ComplexToSimpleFeatureCollection.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.complex;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Optional;\n+import java.util.logging.Logger;\n+import org.geotools.data.DataUtilities;\n+import org.geotools.data.simple.SimpleFeatureCollection;\n+import org.geotools.data.simple.SimpleFeatureIterator;\n+import org.geotools.feature.FeatureCollection;\n+import org.geotools.feature.FeatureIterator;\n+import org.geotools.feature.simple.SimpleFeatureBuilder;\n+import org.geotools.filter.AttributeExpressionImpl;\n+import org.geotools.geometry.jts.ReferencedEnvelope;\n+import org.geotools.util.logging.Logging;\n+import org.opengis.feature.Feature;\n+import org.opengis.feature.FeatureVisitor;\n+import org.opengis.feature.Property;\n+import org.opengis.feature.simple.SimpleFeature;\n+import org.opengis.feature.simple.SimpleFeatureType;\n+import org.opengis.feature.type.FeatureType;\n+import org.opengis.feature.type.PropertyDescriptor;\n+import org.opengis.filter.Filter;\n+import org.opengis.filter.sort.SortBy;\n+import org.opengis.util.ProgressListener;\n+import org.xml.sax.helpers.NamespaceSupport;\n+\n+/**\n+ * Feature collection Wrapper. Converts complex features to simple features on the fly based on the\n+ * Layer info rules.\n+ */\n+public class ComplexToSimpleFeatureCollection implements SimpleFeatureCollection {\n+\n+    private static final Logger LOG = Logging.getLogger(ComplexToSimpleFeatureCollection.class);", "originalCommit": "a369b17177d37afbc3e9d3cbe180f91423b3c4d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ4MDQ3OA==", "url": "https://github.com/geoserver/geoserver/pull/4451#discussion_r471480478", "bodyText": "Careful here, it's true that the string concatenation does not happen unless needed, but the creation of the lambda (which is, itself, also an object, instantiated and carried around) is not avoided. For something happening for all returned features, it should be guarded.", "author": "aaime", "createdAt": "2020-08-17T13:32:01Z", "path": "src/extension/app-schema/app-schema-web/src/main/java/org/geoserver/complex/ComplexToSimpleFeatureCollection.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.complex;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Optional;\n+import java.util.logging.Logger;\n+import org.geotools.data.DataUtilities;\n+import org.geotools.data.simple.SimpleFeatureCollection;\n+import org.geotools.data.simple.SimpleFeatureIterator;\n+import org.geotools.feature.FeatureCollection;\n+import org.geotools.feature.FeatureIterator;\n+import org.geotools.feature.simple.SimpleFeatureBuilder;\n+import org.geotools.filter.AttributeExpressionImpl;\n+import org.geotools.geometry.jts.ReferencedEnvelope;\n+import org.geotools.util.logging.Logging;\n+import org.opengis.feature.Feature;\n+import org.opengis.feature.FeatureVisitor;\n+import org.opengis.feature.Property;\n+import org.opengis.feature.simple.SimpleFeature;\n+import org.opengis.feature.simple.SimpleFeatureType;\n+import org.opengis.feature.type.FeatureType;\n+import org.opengis.feature.type.PropertyDescriptor;\n+import org.opengis.filter.Filter;\n+import org.opengis.filter.sort.SortBy;\n+import org.opengis.util.ProgressListener;\n+import org.xml.sax.helpers.NamespaceSupport;\n+\n+/**\n+ * Feature collection Wrapper. Converts complex features to simple features on the fly based on the\n+ * Layer info rules.\n+ */\n+public class ComplexToSimpleFeatureCollection implements SimpleFeatureCollection {\n+\n+    private static final Logger LOG = Logging.getLogger(ComplexToSimpleFeatureCollection.class);\n+\n+    private final Map<String, String> rulesMap;\n+    private final FeatureCollection<FeatureType, Feature> delegate;\n+    private final NamespaceSupport namespaceSupport;\n+\n+    private final SimpleFeatureType featureType;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param rulesMap the complex to simple features transformation rules map\n+     * @param featureCollection the source complex features collection\n+     */\n+    public ComplexToSimpleFeatureCollection(\n+            Map<String, String> rulesMap,\n+            FeatureCollection<FeatureType, Feature> featureCollection,\n+            NamespaceSupport namespaceSupport) {\n+        this.rulesMap = new HashMap(requireNonNull(rulesMap));\n+        this.delegate = requireNonNull(featureCollection);\n+        this.namespaceSupport = requireNonNull(namespaceSupport);\n+        this.featureType = requireNonNull(buildConvertedType());\n+        LOG.fine(() -> \"Converted feature type: \" + featureType);\n+    }\n+\n+    /**\n+     * Builds and returns the simple feature type based on the complex type and the transformation\n+     * rules.\n+     */\n+    protected SimpleFeatureType buildConvertedType() {\n+        FeatureTypeConverter converter =\n+                new FeatureTypeConverter(delegate.getSchema(), rulesMap, namespaceSupport);\n+        return converter.produceSimpleType();\n+    }\n+\n+    @Override\n+    public SimpleFeatureType getSchema() {\n+        return featureType;\n+    }\n+\n+    @Override\n+    public SimpleFeatureIterator features() {\n+        return new ComplexToSimpleFeatureIterator(delegate.features());\n+    }\n+\n+    @Override\n+    public SimpleFeatureCollection subCollection(Filter filter) {\n+        return null;\n+    }\n+\n+    @Override\n+    public SimpleFeatureCollection sort(SortBy order) {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getID() {\n+        return delegate.getID();\n+    }\n+\n+    @Override\n+    public void accepts(FeatureVisitor visitor, ProgressListener progress) throws IOException {\n+        DataUtilities.visit(this, visitor, progress);\n+    }\n+\n+    @Override\n+    public ReferencedEnvelope getBounds() {\n+        return delegate.getBounds();\n+    }\n+\n+    @Override\n+    public boolean contains(Object o) {\n+        return delegate.contains(o);\n+    }\n+\n+    @Override\n+    public boolean containsAll(Collection<?> o) {\n+        return delegate.containsAll(o);\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return delegate.isEmpty();\n+    }\n+\n+    @Override\n+    public int size() {\n+        return delegate.size();\n+    }\n+\n+    @Override\n+    public Object[] toArray() {\n+        return getFeaturesList().toArray();\n+    }\n+\n+    @Override\n+    public <O> O[] toArray(O[] a) {\n+        return getFeaturesList().toArray(a);\n+    }\n+\n+    private List<SimpleFeature> getFeaturesList() {\n+        try (SimpleFeatureIterator featureIterator = features()) {\n+            List<SimpleFeature> featuresList = new ArrayList<>();\n+            while (featureIterator.hasNext()) {\n+                featuresList.add(featureIterator.next());\n+            }\n+            return featuresList;\n+        }\n+    }\n+\n+    /** Feature iterator wrapper, converts every complex feature into a simple feature. */\n+    class ComplexToSimpleFeatureIterator implements SimpleFeatureIterator {\n+\n+        private FeatureIterator<Feature> delegate;\n+\n+        public ComplexToSimpleFeatureIterator(FeatureIterator<Feature> delegate) {\n+            this.delegate = delegate;\n+        }\n+\n+        public boolean hasNext() {\n+            return delegate.hasNext();\n+        }\n+\n+        public SimpleFeature next() throws NoSuchElementException {\n+            SimpleFeature simpleFeature = convert(delegate.next());\n+            LOG.finer(() -> \"Converted simple feature: \" + simpleFeature);", "originalCommit": "a369b17177d37afbc3e9d3cbe180f91423b3c4d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ4MzExMQ==", "url": "https://github.com/geoserver/geoserver/pull/4451#discussion_r471483111", "bodyText": "Just thinking out loud here... is this enough? Does one have a workspace for all secondary namespaces when setting up an app-schema mapping?", "author": "aaime", "createdAt": "2020-08-17T13:36:25Z", "path": "src/extension/app-schema/app-schema-web/src/main/java/org/geoserver/complex/ComplexToSimpleOutputHandler.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.complex;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Logger;\n+import javax.xml.namespace.QName;\n+import org.geoserver.catalog.Catalog;\n+import org.geoserver.catalog.LayerInfo;\n+import org.geoserver.catalog.MetadataMap;\n+import org.geoserver.catalog.NamespaceInfo;\n+import org.geoserver.ows.Request;\n+import org.geoserver.wfs.request.FeatureCollectionResponse;\n+import org.geotools.feature.NameImpl;\n+import org.geotools.util.logging.Logging;\n+import org.opengis.feature.type.Name;\n+import org.xml.sax.helpers.NamespaceSupport;\n+\n+/**\n+ * Performs the complex to simple feature collection transformation returning the wrapped feature\n+ * collection.\n+ */\n+public class ComplexToSimpleOutputHandler {\n+\n+    private static final Logger LOG = Logging.getLogger(ComplexToSimpleOutputHandler.class);\n+\n+    private final FeatureCollectionResponse result;\n+    private final Catalog catalog;\n+\n+    private final QName layerName;\n+\n+    public ComplexToSimpleOutputHandler(\n+            Request request, FeatureCollectionResponse result, Catalog catalog) {\n+        this.result = requireNonNull(result);\n+        this.catalog = requireNonNull(catalog);\n+        this.layerName = requireNonNull(ComplexToSimpleOutputCommons.getLayerName(request));\n+    }\n+\n+    /** Performs the transformation and returns the decorated Feature collection . */\n+    public Object execute() {\n+        LOG.fine(() -> \"Executing handler for layer name: \" + layerName);\n+        // get the rules map\n+        Map<String, String> rulesMap = getRulesMap();\n+        // get the feature collection\n+        @SuppressWarnings(\"unchecked\")\n+        ComplexToSimpleFeatureCollection collection =\n+                new ComplexToSimpleFeatureCollection(\n+                        rulesMap, result.getFeature().get(0), buildNamespaceSupport(catalog));\n+        // return the correct type based on the input collection response type\n+        if (result instanceof FeatureCollectionResponse.WFS20) {\n+            return new ComplexToSimpleFeatureCollectionResponse20(result, collection);\n+        } else if (result instanceof FeatureCollectionResponse.WFS11) {\n+            return new ComplexToSimpleFeatureCollectionResponse11(result, collection);\n+        }\n+        return collection;\n+    }\n+\n+    /** Returns the transformation rules map from the GeoServer layer configurations. */\n+    @SuppressWarnings(\"unchecked\")\n+    private Map<String, String> getRulesMap() {\n+        Name name = new NameImpl(layerName);\n+        LayerInfo layerInfo = catalog.getLayerByName(name);\n+        MetadataMap metadataMap = layerInfo.getMetadata();\n+        Map<String, String> map =\n+                metadataMap.get(ComplexToSimpleOutputCommons.RULES_METADATAMAP_KEY, Map.class);\n+        if (map == null) {\n+            LOG.fine(() -> \"Rules map not found on layer: \" + layerInfo);\n+            return Collections.emptyMap();\n+        }\n+        LOG.fine(() -> \"Rules map found: \" + map);\n+        return map;\n+    }\n+\n+    /**\n+     * Builds the {@link NamespaceSupport} instance from the catalog available namespaces.\n+     *\n+     * @param catalog the GeoServer catalog\n+     * @return the resulting instance\n+     */\n+    private NamespaceSupport buildNamespaceSupport(Catalog catalog) {\n+        List<NamespaceInfo> namespaces = catalog.getNamespaces();\n+        NamespaceSupport nsSupport = new NamespaceSupport();\n+        for (NamespaceInfo namespaceInfo : namespaces) {", "originalCommit": "a369b17177d37afbc3e9d3cbe180f91423b3c4d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ4NjcxOQ==", "url": "https://github.com/geoserver/geoserver/pull/4451#discussion_r471486719", "bodyText": "Guess also this class could have been package private. In general, I'd suggest to limit visibility to the minimum actually needed, makes easier to change classes/methods later, no backwards compatibility to preserve.", "author": "aaime", "createdAt": "2020-08-17T13:42:02Z", "path": "src/extension/app-schema/app-schema-web/src/main/java/org/geoserver/complex/FeatureTypeConverter.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.complex;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.logging.Logger;\n+import org.geotools.feature.simple.SimpleFeatureTypeBuilder;\n+import org.geotools.filter.AttributeExpressionImpl;\n+import org.geotools.util.logging.Logging;\n+import org.opengis.feature.simple.SimpleFeatureType;\n+import org.opengis.feature.type.AttributeDescriptor;\n+import org.opengis.feature.type.AttributeType;\n+import org.opengis.feature.type.FeatureType;\n+import org.opengis.feature.type.GeometryDescriptor;\n+import org.opengis.feature.type.Name;\n+import org.opengis.feature.type.PropertyDescriptor;\n+import org.xml.sax.helpers.NamespaceSupport;\n+\n+/**\n+ * Converts a complex feature type to a simple one based on the provided transformation rules map.\n+ */\n+public class FeatureTypeConverter {", "originalCommit": "a369b17177d37afbc3e9d3cbe180f91423b3c4d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ4NzQ5NA==", "url": "https://github.com/geoserver/geoserver/pull/4451#discussion_r471487494", "bodyText": "Single method used only in the dispatcher callback, why roll a separate class for it?", "author": "aaime", "createdAt": "2020-08-17T13:43:12Z", "path": "src/extension/app-schema/app-schema-web/src/main/java/org/geoserver/complex/OutputFormatsSupport.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.complex;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.StringUtils;\n+import org.geoserver.platform.GeoServerExtensions;\n+import org.geoserver.platform.Operation;\n+import org.geoserver.wfs.WFSGetFeatureOutputFormat;\n+import org.geoserver.wfs.response.ComplexFeatureAwareFormat;\n+\n+/**\n+ * Provides high level function to check if the provided format is supported by complex to simple\n+ * features conversion.\n+ */\n+public class OutputFormatsSupport {\n+\n+    /** Checks if the provided format is supported by complex to simple features conversion. */\n+    public static boolean isSupported(String format, Object value, Operation operation) {", "originalCommit": "a369b17177d37afbc3e9d3cbe180f91423b3c4d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ4OTAzMg==", "url": "https://github.com/geoserver/geoserver/pull/4451#discussion_r471489032", "bodyText": "Good! I would also check that GML3 encoding was unaffected (e..g, did not lose namespaces and the like).", "author": "aaime", "createdAt": "2020-08-17T13:45:32Z", "path": "src/extension/app-schema/app-schema-test/src/test/java/org/geoserver/test/SimpleOutputTest.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.test;\n+\n+import static org.geoserver.complex.ComplexToSimpleOutputCommons.RULES_METADATAMAP_KEY;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.custommonkey.xmlunit.SimpleNamespaceContext;\n+import org.custommonkey.xmlunit.XMLUnit;\n+import org.custommonkey.xmlunit.XpathEngine;\n+import org.custommonkey.xmlunit.exceptions.XpathException;\n+import org.geoserver.catalog.Catalog;\n+import org.geoserver.catalog.FeatureTypeInfo;\n+import org.geoserver.catalog.LayerInfo;\n+import org.geoserver.catalog.MetadataMap;\n+import org.geoserver.catalog.WorkspaceInfo;\n+import org.geoserver.data.test.SystemTestData;\n+import org.geotools.data.DataAccess;\n+import org.geotools.data.FeatureSource;\n+import org.geotools.data.complex.AppSchemaDataAccess;\n+import org.geotools.feature.NameImpl;\n+import org.geotools.jdbc.JDBCFeatureStore;\n+import org.junit.Test;\n+import org.opengis.feature.type.Name;\n+import org.w3c.dom.Document;\n+\n+/** Set of tests for simple output formats on complex features requests. */\n+public class SimpleOutputTest extends StationsAppSchemaTestSupport {", "originalCommit": "a369b17177d37afbc3e9d3cbe180f91423b3c4d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b2266fe9d1998ca17527335852b6badf0e571596", "url": "https://github.com/geoserver/geoserver/commit/b2266fe9d1998ca17527335852b6badf0e571596", "message": "[GEOS-9716] Add simple output formats support for complex features", "committedDate": "2020-08-17T23:26:52Z", "type": "forcePushed"}, {"oid": "79c7cd501ecadded1948c46021ee75e50c4e2d72", "url": "https://github.com/geoserver/geoserver/commit/79c7cd501ecadded1948c46021ee75e50c4e2d72", "message": "[GEOS-9716] Add simple output formats support for complex features", "committedDate": "2020-08-17T23:49:57Z", "type": "forcePushed"}, {"oid": "6612cc479ae740200d67e73d37f47fbbdf8247aa", "url": "https://github.com/geoserver/geoserver/commit/6612cc479ae740200d67e73d37f47fbbdf8247aa", "message": "[GEOS-9716] Add simple output formats support for complex features", "committedDate": "2020-08-18T03:24:47Z", "type": "forcePushed"}, {"oid": "87f2df9defc0c8b858eaf98adaa11284d73492ce", "url": "https://github.com/geoserver/geoserver/commit/87f2df9defc0c8b858eaf98adaa11284d73492ce", "message": "[GEOS-9716] Add simple output formats support for complex features", "committedDate": "2020-08-19T13:00:41Z", "type": "forcePushed"}, {"oid": "46ed29882630432766644c98dd8abda06569dd25", "url": "https://github.com/geoserver/geoserver/commit/46ed29882630432766644c98dd8abda06569dd25", "message": "[GEOS-9716] Add simple output formats support for complex features", "committedDate": "2020-08-19T14:52:29Z", "type": "forcePushed"}, {"oid": "5d01155a54cc74f41a2a320613a750afb30e1cfb", "url": "https://github.com/geoserver/geoserver/commit/5d01155a54cc74f41a2a320613a750afb30e1cfb", "message": "[GEOS-9716] Add simple output formats support for complex features", "committedDate": "2020-08-21T16:09:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUwMDAzNQ==", "url": "https://github.com/geoserver/geoserver/pull/4451#discussion_r475500035", "bodyText": "As per my previous comment, this is a boolean properly, should be using \"is\" instead of \"get\":\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Boolean getSimpleConversionEnabled();\n          \n          \n            \n                Boolean isSimpleConversionEnabled();", "author": "aaime", "createdAt": "2020-08-24T10:25:40Z", "path": "src/main/src/main/java/org/geoserver/catalog/ResourceInfo.java", "diffHunk": "@@ -374,4 +374,16 @@\n \n     /** Set the list of disabled services names for this resource */\n     void setDisabledServices(List<String> disabledServices);\n+\n+    /**\n+     * Flag that determines if complex features will be converted to simple feature for compatible\n+     * output formats.\n+     */\n+    Boolean getSimpleConversionEnabled();", "originalCommit": "5d01155a54cc74f41a2a320613a750afb30e1cfb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc5NDk5MQ==", "url": "https://github.com/geoserver/geoserver/pull/4451#discussion_r475794991", "bodyText": "Understood, fixed.", "author": "fernandor777", "createdAt": "2020-08-24T17:57:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUwMDAzNQ=="}], "type": "inlineReview"}, {"oid": "494558e6bc5e18b8bea0a2071325d9b0d101157b", "url": "https://github.com/geoserver/geoserver/commit/494558e6bc5e18b8bea0a2071325d9b0d101157b", "message": "[GEOS-9716] Add simple output formats support for complex features", "committedDate": "2020-08-24T17:56:02Z", "type": "commit"}, {"oid": "494558e6bc5e18b8bea0a2071325d9b0d101157b", "url": "https://github.com/geoserver/geoserver/commit/494558e6bc5e18b8bea0a2071325d9b0d101157b", "message": "[GEOS-9716] Add simple output formats support for complex features", "committedDate": "2020-08-24T17:56:02Z", "type": "forcePushed"}]}