{"pr_number": 4531, "pr_title": "[GEOS-9767] GeoServer COG community module", "pr_createdAt": "2020-10-09T12:46:54Z", "pr_url": "https://github.com/geoserver/geoserver/pull/4531", "timeline": [{"oid": "43580b53801140bd4fd82ded6c95e8623a941585", "url": "https://github.com/geoserver/geoserver/commit/43580b53801140bd4fd82ded6c95e8623a941585", "message": "[GEOS-9767] GeoServer COG community module", "committedDate": "2020-10-09T16:21:34Z", "type": "forcePushed"}, {"oid": "2cd07796a86bfc5594f1c5b5d503a31a3a1046c1", "url": "https://github.com/geoserver/geoserver/commit/2cd07796a86bfc5594f1c5b5d503a31a3a1046c1", "message": "[GEOS-9767] GeoServer COG community module", "committedDate": "2020-10-09T16:34:05Z", "type": "forcePushed"}, {"oid": "ea7b3142cc10cca78ae8142e81d39d2e58ba80e5", "url": "https://github.com/geoserver/geoserver/commit/ea7b3142cc10cca78ae8142e81d39d2e58ba80e5", "message": "[GEOS-9767] GeoServer COG community module", "committedDate": "2020-10-12T10:25:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5MzYxNA==", "url": "https://github.com/geoserver/geoserver/pull/4531#discussion_r503193614", "bodyText": "Confused, why do you need the store too? coverageInfo.getStore() should provide it already. Mind, this is not just a formal question, the structure you create here ends up showing in the REST representation of the resources, which is directly in the REST API user's face. It should be the least surprising possible. I'm not 100% sure, but if you need to reuse the CogSettings, they may also be placed among the store parameters (maybe with some effort in the XStreamPersister, unsure). If not, no big deal, CogSettings is just two values right now, could be stored as two independent params. Unless... do you see it growing much in the future?", "author": "aaime", "createdAt": "2020-10-12T10:20:08Z", "path": "src/main/src/main/java/org/geoserver/catalog/CoverageReaderInputObjectConverter.java", "diffHunk": "@@ -34,4 +33,22 @@\n      * @return an {@link Optional} containing the converted value.\n      */\n     Optional<T> convert(Object input, @Nullable CoverageInfo coverageInfo, @Nullable Hints hints);\n+\n+    /**\n+     * This method inspects the provided input object in an attempt to convert it to a custom class.\n+     * Any of the accompanying method parameters may optionally be used to better inform the\n+     * decision making logic. If an implementation does not support conversion for the given input\n+     * object, the method should return an empty {@link Optional}.\n+     *\n+     * @param input The input object.\n+     * @param coverageStoreInfo The coverage store metadata, may be <code>null</code>.\n+     * @param coverageInfo The grid coverage metadata, may be <code>null</code>.\n+     * @param hints Hints to use when loading the coverage, may be <code>null</code>.\n+     * @return an {@link Optional} containing the converted value.\n+     */\n+    Optional<T> convert(\n+            Object input,\n+            @Nullable CoverageStoreInfo coverageStoreInfo,", "originalCommit": "2cd07796a86bfc5594f1c5b5d503a31a3a1046c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI4Mjc1MQ==", "url": "https://github.com/geoserver/geoserver/pull/4531#discussion_r503282751", "bodyText": "Looking at the ImageMosaic CogConfiguration, which hosts basically a CogConfig + username/password, wondering if the username/pwd could also be shared in CogConfig... could one have default credentials stored just once? I believe the AWS client can also read env variables, in other words, the idea that one uses fixed credentials for the entire app is not so strange in the cloud. Mind, just thinking out loud... and going there would require to have the possibility to override.", "author": "aaime", "createdAt": "2020-10-12T13:05:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5MzYxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMyMTc5Ng==", "url": "https://github.com/geoserver/geoserver/pull/4531#discussion_r503321796", "bodyText": "Right, for some reason I was getting a null storeInfo at the early stage of development... Updated.\nAbout CogSettings, it may end up having a couple of more parameters in the future.\nThe S3 RangeReader implementation actually can read credentials from those IIO_AWS_  System properties too.\nI'm going to update that section of the doc.", "author": "dromagnoli", "createdAt": "2020-10-12T14:08:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5MzYxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgxMjczMw==", "url": "https://github.com/geoserver/geoserver/pull/4531#discussion_r507812733", "bodyText": "With interactive testing, found out that the store is necessary, because the coveage info can be missing, while creating the coveage reader for the first one, while configuring the store from the UI (e.g, a time when the eventual CoverageInfo has not yet been created).", "author": "aaime", "createdAt": "2020-10-19T14:46:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5MzYxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk3NDk5Nw==", "url": "https://github.com/geoserver/geoserver/pull/4531#discussion_r509974997", "bodyText": "Restored.", "author": "dromagnoli", "createdAt": "2020-10-22T08:28:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5MzYxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5NDE4NA==", "url": "https://github.com/geoserver/geoserver/pull/4531#discussion_r503194184", "bodyText": "No need to call it \"custom\", EncryptedFieldsProvider should do.", "author": "aaime", "createdAt": "2020-10-12T10:21:12Z", "path": "src/main/src/main/java/org/geoserver/security/password/CustomEncryptedFieldsProvider.java", "diffHunk": "@@ -0,0 +1,15 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.security.password;\n+\n+import java.util.Set;\n+import org.geoserver.catalog.StoreInfo;\n+\n+/** An interface returning a Set of custom fields needing Encryption */\n+public interface CustomEncryptedFieldsProvider {", "originalCommit": "2cd07796a86bfc5594f1c5b5d503a31a3a1046c1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2OTM1Mg==", "url": "https://github.com/geoserver/geoserver/pull/4531#discussion_r503269352", "bodyText": "Confused as to why username/pwd are part of the connection parmaters, but the other cog settings are in a dedicated object stored in the metadata map instead.", "author": "aaime", "createdAt": "2020-10-12T12:43:17Z", "path": "src/community/cog/src/main/java/org/geoserver/web/data/store/cog/CoverageReaderCogInputObjectConverter.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.web.data.store.cog;\n+\n+import it.geosolutions.imageio.core.BasicAuthURI;\n+import it.geosolutions.imageio.core.SourceSPIProvider;\n+import it.geosolutions.imageioimpl.plugins.cog.*;\n+import it.geosolutions.imageioimpl.plugins.cog.CogSourceSPIProvider;\n+import java.io.Serializable;\n+import java.net.URI;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.logging.Logger;\n+import javax.annotation.Nullable;\n+import javax.imageio.spi.ImageInputStreamSpi;\n+import javax.imageio.spi.ImageReaderSpi;\n+import org.geoserver.catalog.*;\n+import org.geotools.util.factory.Hints;\n+import org.geotools.util.logging.Logging;\n+import org.opengis.coverage.grid.GridCoverageReader;\n+\n+/**\n+ * Attempts to convert the source input object for a {@link GridCoverageReader} to a {@link\n+ * SourceSPIProvider}\n+ */\n+public class CoverageReaderCogInputObjectConverter\n+        implements CoverageReaderInputObjectConverter<SourceSPIProvider> {\n+\n+    static Logger LOGGER = Logging.getLogger(CoverageReaderCogInputObjectConverter.class);\n+\n+    private static final ImageInputStreamSpi COG_IMAGE_INPUT_STREAM_SPI =\n+            new CogImageInputStreamSpi();\n+\n+    private static final ImageReaderSpi COG_IMAGE_READER_SPI = new CogImageReaderSpi();\n+\n+    private final Catalog catalog;\n+\n+    public CoverageReaderCogInputObjectConverter(Catalog catalog) {\n+        this.catalog = catalog;\n+    }\n+\n+    @Override\n+    public Optional<SourceSPIProvider> convert(\n+            Object input, @Nullable CoverageInfo coverageInfo, @Nullable Hints hints) {\n+        return convert(input, null, coverageInfo, hints);\n+    }\n+\n+    /**\n+     * Performs the conversion of the input object to a {@link SourceSPIProvider} object. If this\n+     * converter is not able to convert the input to that, an empty {@link Optional} will be\n+     * returned.\n+     *\n+     * @param input The input object.\n+     * @param coverageStoreInfo The coverage store, may be <code>null</code>.\n+     * @param coverageInfo The grid coverage metadata, may be <code>null</code>.\n+     * @param hints Hints to use when loading the coverage, may be <code>null</code>.\n+     * @return\n+     */\n+    @Override\n+    public Optional<SourceSPIProvider> convert(\n+            Object input,\n+            @Nullable CoverageStoreInfo coverageStoreInfo,\n+            @Nullable CoverageInfo coverageInfo,\n+            @Nullable Hints hints) {\n+        if (!(input instanceof String)) {\n+            return Optional.empty();\n+        }\n+        String urlString = (String) input;\n+        return canConvert(urlString)\n+                ? convertReaderInputObject(urlString, coverageStoreInfo, coverageInfo)\n+                : Optional.empty();\n+    }\n+\n+    /**\n+     * Checks to see if the input string is a COG URI.\n+     *\n+     * @param input The input string.\n+     * @return Value representing whether or not this converter is able to convert the provided\n+     *     input.\n+     */\n+    protected boolean canConvert(String input) {\n+        return input.startsWith(CogSettings.COG_URL_HEADER);\n+    }\n+\n+    /**\n+     * Performs the conversion to a {@link SourceSPIProvider} object\n+     *\n+     * @param input The input string.\n+     * @param coverageStoreInfo the input coverageStore info\n+     * @param coverageInfo the input coverage info\n+     * @return The Optional object containing the provider\n+     */\n+    protected Optional<SourceSPIProvider> convertReaderInputObject(\n+            String input, CoverageStoreInfo coverageStoreInfo, CoverageInfo coverageInfo) {\n+\n+        String realUrl = input;\n+        if (realUrl.startsWith(CogSettings.COG_URL_HEADER)) {\n+            realUrl = input.substring(CogSettings.COG_URL_HEADER.length());\n+        }\n+        MetadataMap metadata = coverageStoreInfo.getMetadata();\n+        CogSettings cogSettings = new CogSettings();\n+        if (metadata != null && metadata.containsKey(CogSettings.COG_SETTINGS_KEY)) {\n+            cogSettings = (CogSettings) metadata.get(CogSettings.COG_SETTINGS_KEY);\n+        }\n+\n+        Map<String, Serializable> connectionParameters =", "originalCommit": "ea7b3142cc10cca78ae8142e81d39d2e58ba80e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMwOTY0OQ==", "url": "https://github.com/geoserver/geoserver/pull/4531#discussion_r503309649", "bodyText": "I have seen that all the other \"store\"s were putting user and pass in the connectionParameters so I have used the same approach. Whilst the CogSettings are more related to configuration/implementation (rangeReader implementation, caching to be used, even if actually disabled) details.", "author": "dromagnoli", "createdAt": "2020-10-12T13:49:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2OTM1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3MDI0MA==", "url": "https://github.com/geoserver/geoserver/pull/4531#discussion_r503270240", "bodyText": "Unused private method?", "author": "aaime", "createdAt": "2020-10-12T12:44:50Z", "path": "src/community/cog/src/main/java/org/geoserver/web/data/store/cog/panel/CogSettingsStorePanel.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.web.data.store.cog.panel;\n+\n+import org.apache.wicket.AttributeModifier;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.form.FormComponent;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.ResourceModel;\n+import org.geoserver.web.data.store.cog.CogSettingsStore;\n+import org.geoserver.web.data.store.panel.PasswordParamPanel;\n+import org.geoserver.web.data.store.panel.TextParamPanel;\n+import org.geoserver.web.util.MapModel;\n+\n+/** Store specific CogSettings panel, containing therefore eventual authentication info */\n+public class CogSettingsStorePanel<T extends CogSettingsStore> extends CogSettingsPanel {\n+\n+    FormComponent user;\n+\n+    FormComponent password;\n+\n+    public CogSettingsStorePanel(String id, IModel settingsModel, Form storeEditForm) {\n+        super(id, settingsModel);\n+\n+        final IModel model = storeEditForm.getModel();\n+        final IModel paramsModel = new PropertyModel(model, \"connectionParameters\");\n+\n+        user = addTextPanel(paramsModel, \"user\", \"user\", \"CogSettings.userName\", false);\n+        password = addPasswordPanel(paramsModel, \"password\", \"CogSettings.password\", false);\n+\n+        user.setOutputMarkupId(true);\n+        password.setOutputMarkupId(true);\n+    }\n+\n+    private CogSettingsStore getSettings(IModel<T> model) {", "originalCommit": "ea7b3142cc10cca78ae8142e81d39d2e58ba80e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "76c460b3a7de44b3fe1c52c52c101cdfabad7426", "url": "https://github.com/geoserver/geoserver/commit/76c460b3a7de44b3fe1c52c52c101cdfabad7426", "message": "[GEOS-9767] GeoServer COG community module", "committedDate": "2020-10-12T14:17:37Z", "type": "forcePushed"}, {"oid": "3ba9c475a8e674ef620cdfd8a07569fa72ed8427", "url": "https://github.com/geoserver/geoserver/commit/3ba9c475a8e674ef620cdfd8a07569fa72ed8427", "message": "[GEOS-9767] GeoServer COG community module", "committedDate": "2020-10-14T10:59:59Z", "type": "forcePushed"}, {"oid": "002edcc3815ef9241d721e5641b7c7465c9be814", "url": "https://github.com/geoserver/geoserver/commit/002edcc3815ef9241d721e5641b7c7465c9be814", "message": "[GEOS-9767] GeoServer COG community module", "committedDate": "2020-10-15T15:43:43Z", "type": "forcePushed"}, {"oid": "235cf3187057b84eeb80bab79d243f68a38527c7", "url": "https://github.com/geoserver/geoserver/commit/235cf3187057b84eeb80bab79d243f68a38527c7", "message": "[GEOS-9767] GeoServer COG community module", "committedDate": "2020-10-16T08:37:05Z", "type": "forcePushed"}, {"oid": "bfabd6a024966d0709667cc029b8c561268718e4", "url": "https://github.com/geoserver/geoserver/commit/bfabd6a024966d0709667cc029b8c561268718e4", "message": "[GEOS-9767] GeoServer COG community module", "committedDate": "2020-10-19T15:25:29Z", "type": "forcePushed"}, {"oid": "18fdc645a868cd6ec66ea4af391f23bbe1d9972b", "url": "https://github.com/geoserver/geoserver/commit/18fdc645a868cd6ec66ea4af391f23bbe1d9972b", "message": "[GEOS-9767] GeoServer COG community module", "committedDate": "2020-10-21T10:21:55Z", "type": "forcePushed"}, {"oid": "bfe868d104e3ade3828443b64a7115d2f346366e", "url": "https://github.com/geoserver/geoserver/commit/bfe868d104e3ade3828443b64a7115d2f346366e", "message": "[GEOS-9767] GeoServer COG community module", "committedDate": "2020-10-22T07:27:50Z", "type": "commit"}, {"oid": "bfe868d104e3ade3828443b64a7115d2f346366e", "url": "https://github.com/geoserver/geoserver/commit/bfe868d104e3ade3828443b64a7115d2f346366e", "message": "[GEOS-9767] GeoServer COG community module", "committedDate": "2020-10-22T07:27:50Z", "type": "forcePushed"}]}