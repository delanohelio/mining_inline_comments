{"pr_number": 4123, "pr_title": "Kafka cluster Id in status", "pr_createdAt": "2020-12-17T07:48:26Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123", "timeline": [{"oid": "15f6cacc2728f52892caa6a3d22c3a18204c43f4", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/15f6cacc2728f52892caa6a3d22c3a18204c43f4", "message": "Kafka cluster Id in status\n\nSigned-off-by: Luis Garc\u00e9s-Erice <lga@zurich.ibm.com>", "committedDate": "2020-12-17T07:50:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMwODg4OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#discussion_r545308888", "bodyText": "You should be able to use the bootstrap service here. That should save you from constructing the name like this.\nThere is a class KafkaResources which has method bootstrapServiceName which should be able to give it to you. Or you can add to the KafkaCluster class some new method similar to podDnsName (since oyu need to use it with the namespace).\nI do not think there is any advantage here in using the pod names => it just adds possible complications with DNS changes.", "author": "scholzj", "createdAt": "2020-12-17T18:28:02Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1874,6 +1879,32 @@ String zkConnectionString(int connectToReplicas, Function<Integer, String> zkNod\n             return withVoid(fut);\n         }\n \n+        /**\n+         * Get the cluster Id of the Kafka cluster\n+         * \n+         * @return\n+         */\n+        Future<ReconciliationState> kafkaGetClusterId() {\n+            String clusterId = null;\n+            log.debug(\"{}: Attempt to get clusterId\", reconciliation);\n+            List<String> podNames = IntStream.range(0, kafkaCluster.getReplicas()).boxed().collect(Collectors.toList()).stream().map(podId -> KafkaCluster.kafkaPodName(this.name, podId)).collect(Collectors.toList());\n+            try {\n+                String bootstrapHostnames = podNames.stream().map(podName -> KafkaCluster.podDnsName(this.namespace, this.name, podName) + \":\" + KafkaCluster.REPLICATION_PORT).collect(Collectors.joining(\",\"));", "originalCommit": "15f6cacc2728f52892caa6a3d22c3a18204c43f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYxNjU2OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#discussion_r545616568", "bodyText": "ok, I will check that. I did try to use kafkaBootstrapDnsName but in my tests it was always empty.", "author": "lga-zurich", "createdAt": "2020-12-18T07:21:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMwODg4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMwOTIzMQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#discussion_r545309231", "bodyText": "Is oldCoSecret really the right one to use? If this is old, it sounds like sometimes it might not be valid anymore.", "author": "scholzj", "createdAt": "2020-12-17T18:28:36Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1874,6 +1879,32 @@ String zkConnectionString(int connectToReplicas, Function<Integer, String> zkNod\n             return withVoid(fut);\n         }\n \n+        /**\n+         * Get the cluster Id of the Kafka cluster\n+         * \n+         * @return\n+         */\n+        Future<ReconciliationState> kafkaGetClusterId() {\n+            String clusterId = null;\n+            log.debug(\"{}: Attempt to get clusterId\", reconciliation);\n+            List<String> podNames = IntStream.range(0, kafkaCluster.getReplicas()).boxed().collect(Collectors.toList()).stream().map(podId -> KafkaCluster.kafkaPodName(this.name, podId)).collect(Collectors.toList());\n+            try {\n+                String bootstrapHostnames = podNames.stream().map(podName -> KafkaCluster.podDnsName(this.namespace, this.name, podName) + \":\" + KafkaCluster.REPLICATION_PORT).collect(Collectors.joining(\",\"));\n+                log.debug(\"{}: Creating AdminClient for clusterId using {}\", reconciliation, bootstrapHostnames);\n+                Admin kafkaAdmin = adminClientProvider.createAdminClient(bootstrapHostnames, this.clusterCa.caCertSecret(), this.oldCoSecret, \"cluster-operator\");", "originalCommit": "15f6cacc2728f52892caa6a3d22c3a18204c43f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMDYxMg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#discussion_r545310612", "bodyText": "What are the situations when this happens? In general:\n\nIs it intentional to continue as success when it fails instead of failing the reconciliation?\nShould the error really be only on debug level?\n\nBoth of these IMHO suggest that this is expected to fail regularly while the failure does not indicate any problems. So I would like to understand why.", "author": "scholzj", "createdAt": "2020-12-17T18:30:46Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1874,6 +1879,32 @@ String zkConnectionString(int connectToReplicas, Function<Integer, String> zkNod\n             return withVoid(fut);\n         }\n \n+        /**\n+         * Get the cluster Id of the Kafka cluster\n+         * \n+         * @return\n+         */\n+        Future<ReconciliationState> kafkaGetClusterId() {\n+            String clusterId = null;\n+            log.debug(\"{}: Attempt to get clusterId\", reconciliation);\n+            List<String> podNames = IntStream.range(0, kafkaCluster.getReplicas()).boxed().collect(Collectors.toList()).stream().map(podId -> KafkaCluster.kafkaPodName(this.name, podId)).collect(Collectors.toList());\n+            try {\n+                String bootstrapHostnames = podNames.stream().map(podName -> KafkaCluster.podDnsName(this.namespace, this.name, podName) + \":\" + KafkaCluster.REPLICATION_PORT).collect(Collectors.joining(\",\"));\n+                log.debug(\"{}: Creating AdminClient for clusterId using {}\", reconciliation, bootstrapHostnames);\n+                Admin kafkaAdmin = adminClientProvider.createAdminClient(bootstrapHostnames, this.clusterCa.caCertSecret(), this.oldCoSecret, \"cluster-operator\");\n+                clusterId = kafkaAdmin.describeCluster().clusterId().get();\n+            } catch (KafkaException e) {\n+                log.debug(\"{}: Kafka exception getting clusterId {}\", reconciliation, e.getMessage());\n+            } catch (Exception e) {\n+                log.debug(\"{}: Exception getting clusterId {}\", reconciliation, e.getMessage());\n+            }", "originalCommit": "15f6cacc2728f52892caa6a3d22c3a18204c43f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYxNzU4Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#discussion_r545617587", "bodyText": "As I said above, I didn't want to make an error here critical. Either it is transient and it will eventually work or the set up is so screwed up that something else more fundamental will blow up. But that can be changed, of course.", "author": "lga-zurich", "createdAt": "2020-12-18T07:24:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMDYxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMTYzMQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#discussion_r545311631", "bodyText": "I'm not too familiar with the Kafka AdminClient API. But the get() IMHO usually suggests it is a blocking call. So it should probably be wrapped into execute blocking or handled asynchronously?", "author": "scholzj", "createdAt": "2020-12-17T18:32:22Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1874,6 +1879,32 @@ String zkConnectionString(int connectToReplicas, Function<Integer, String> zkNod\n             return withVoid(fut);\n         }\n \n+        /**\n+         * Get the cluster Id of the Kafka cluster\n+         * \n+         * @return\n+         */\n+        Future<ReconciliationState> kafkaGetClusterId() {\n+            String clusterId = null;\n+            log.debug(\"{}: Attempt to get clusterId\", reconciliation);\n+            List<String> podNames = IntStream.range(0, kafkaCluster.getReplicas()).boxed().collect(Collectors.toList()).stream().map(podId -> KafkaCluster.kafkaPodName(this.name, podId)).collect(Collectors.toList());\n+            try {\n+                String bootstrapHostnames = podNames.stream().map(podName -> KafkaCluster.podDnsName(this.namespace, this.name, podName) + \":\" + KafkaCluster.REPLICATION_PORT).collect(Collectors.joining(\",\"));\n+                log.debug(\"{}: Creating AdminClient for clusterId using {}\", reconciliation, bootstrapHostnames);\n+                Admin kafkaAdmin = adminClientProvider.createAdminClient(bootstrapHostnames, this.clusterCa.caCertSecret(), this.oldCoSecret, \"cluster-operator\");\n+                clusterId = kafkaAdmin.describeCluster().clusterId().get();", "originalCommit": "15f6cacc2728f52892caa6a3d22c3a18204c43f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYxOTY0OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#discussion_r545619649", "bodyText": "Agreed, the KafkaFuture.get() will wait if necessary, that was just lazy.", "author": "lga-zurich", "createdAt": "2020-12-18T07:29:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMTYzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMzc3NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#discussion_r545313774", "bodyText": "What kind of exception are we expecting here? I think it would be good to use something more specific exception type if possible.", "author": "scholzj", "createdAt": "2020-12-17T18:35:54Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1874,6 +1879,32 @@ String zkConnectionString(int connectToReplicas, Function<Integer, String> zkNod\n             return withVoid(fut);\n         }\n \n+        /**\n+         * Get the cluster Id of the Kafka cluster\n+         * \n+         * @return\n+         */\n+        Future<ReconciliationState> kafkaGetClusterId() {\n+            String clusterId = null;\n+            log.debug(\"{}: Attempt to get clusterId\", reconciliation);\n+            List<String> podNames = IntStream.range(0, kafkaCluster.getReplicas()).boxed().collect(Collectors.toList()).stream().map(podId -> KafkaCluster.kafkaPodName(this.name, podId)).collect(Collectors.toList());\n+            try {\n+                String bootstrapHostnames = podNames.stream().map(podName -> KafkaCluster.podDnsName(this.namespace, this.name, podName) + \":\" + KafkaCluster.REPLICATION_PORT).collect(Collectors.joining(\",\"));\n+                log.debug(\"{}: Creating AdminClient for clusterId using {}\", reconciliation, bootstrapHostnames);\n+                Admin kafkaAdmin = adminClientProvider.createAdminClient(bootstrapHostnames, this.clusterCa.caCertSecret(), this.oldCoSecret, \"cluster-operator\");\n+                clusterId = kafkaAdmin.describeCluster().clusterId().get();\n+            } catch (KafkaException e) {\n+                log.debug(\"{}: Kafka exception getting clusterId {}\", reconciliation, e.getMessage());\n+            } catch (Exception e) {", "originalCommit": "15f6cacc2728f52892caa6a3d22c3a18204c43f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyMDg5MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#discussion_r545620891", "bodyText": "As said in the previous comment, the KafkaFuture needs to be handled better anyway; then those exceptions will likely not be a concern anymore.", "author": "lga-zurich", "createdAt": "2020-12-18T07:32:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMzc3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc3MTI3MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#discussion_r545771270", "bodyText": "Because of where this is running within createOrUpdate I'm guessing it will could fail if the broker aren't ready. Currently that's not really a problem, because the cluster id doesn't change, so most of the time no one would notice. And when creating a cluster the 2nd reconciliation will come around soon enough so the status would only be lacking the id for a short while. If we're going to change the exception handling we'd need to think through the error scenarios in a little more detail. Ignoring the exception in some way is probably the right thing to do, because we don't really want to prevent the rest of the reconciliation from happening. But logging at debug is probably a little too drastic since it's kinda useful for a user to know that we couldn't even describe the cluster. We should go as far as to say the status should be NotReady though? @scholzj wdyt?", "author": "tombentley", "createdAt": "2020-12-18T11:27:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMzc3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1Nzk2Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#discussion_r546257962", "bodyText": "I think there are three separate things.\nFirst ... the Exception seems very generic to me. Catching some more specific types would be better. But I have no clue whether that is possible and what does the Admin API throw. If Exception is the best we can do then ok.\nThen there are the two issues: How do we log the errors and whether we fail the reconciliation. I agree that the clusterId is not critical enough to fail the reconciliation. But maybe then we should bump the log messages to WARN to make sure they get noticed? Otherwise we might one day find out it never works but nobody notices it. That is at least unless it fails for some reason too often and we do not want to confuse users with the WARN messages.\nAs for the placement, I didn't noticed it in my review. But it makes sense to have it only after the Kafka pod readiness check.", "author": "scholzj", "createdAt": "2020-12-19T16:43:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMzc3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxNDI1NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#discussion_r545314255", "bodyText": "I think this tests only one small aspect of this. I think this test would be much more useful, if you mock the Kafka Admin client and have that return a mocker ClusterID. And then in the reconciliation you actually should let the kafkaGetClusterId run as it is in the code. To have it tested as well.", "author": "scholzj", "createdAt": "2020-12-17T18:36:46Z", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaStatusTest.java", "diffHunk": "@@ -998,6 +998,42 @@ public void testInitialStatusOnOldResource() throws ParseException {\n         });\n     }\n \n+    @Test\n+    public void testKafkaClusrerIdInStatus(VertxTestContext context) throws ParseException {", "originalCommit": "15f6cacc2728f52892caa6a3d22c3a18204c43f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyMTI4NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#discussion_r545621285", "bodyText": "Agreed, I'll follow your pointer below, the test I include didn't test much at all.", "author": "lga-zurich", "createdAt": "2020-12-18T07:34:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxNDI1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc2NzkyNQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#discussion_r545767925", "bodyText": "If we're going to change the exception handling, perhaps this should run last, or at least after kafkaPodsReady.", "author": "tombentley", "createdAt": "2020-12-18T11:19:47Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -296,6 +300,7 @@ public KafkaAssemblyOperator(Vertx vertx, PlatformFeaturesAvailability pfa,\n                 .compose(state -> state.kafkaRoutes())\n                 .compose(state -> state.kafkaIngresses())\n                 .compose(state -> state.kafkaInternalServicesReady())\n+                .compose(state -> state.kafkaGetClusterId())", "originalCommit": "15f6cacc2728f52892caa6a3d22c3a18204c43f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8c5f8b549e0a4ae82cbef82fdeb72c1f128ae907", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/8c5f8b549e0a4ae82cbef82fdeb72c1f128ae907", "message": "Introduce clusterId in CHANGELOG\n\nSigned-off-by: Luis Garc\u00e9s-Erice <lga@zurich.ibm.com>", "committedDate": "2020-12-23T22:52:45Z", "type": "forcePushed"}, {"oid": "8d50e6c67acfe213df5bd520f9dd050c6bf9998f", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/8d50e6c67acfe213df5bd520f9dd050c6bf9998f", "message": "Introduce clusterId in CHANGELOG\n\nSigned-off-by: Luis Garc\u00e9s-Erice <lga@zurich.ibm.com>", "committedDate": "2020-12-23T22:57:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM4NzAyOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#discussion_r549387028", "bodyText": "The status starts empty every time ... so I would normally not expect this to every happen. Is it really needed?", "author": "scholzj", "createdAt": "2020-12-28T15:27:05Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1954,6 +1958,45 @@ String zkConnectionString(int connectToReplicas, Function<Integer, String> zkNod\n             return withVoid(fut);\n         }\n \n+        /**\n+         * Get the cluster Id of the Kafka cluster\n+         * \n+         * @return\n+         */\n+        Future<ReconciliationState> kafkaGetClusterId() {\n+            if (kafkaStatus.getClusterId() != null) {\n+                // Cluster Id does not change\n+                return Future.succeededFuture(this);\n+            } else {", "originalCommit": "0565bbd3fcfe6d583bf0f6adbb3e9a4ede16e1ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc1MTQ0Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#discussion_r551751447", "bodyText": "ok, I will get rid of it.", "author": "lga-zurich", "createdAt": "2021-01-05T07:07:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM4NzAyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM4Nzg5OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#discussion_r549387898", "bodyText": "Since you now mocked the cluster-id in the Admin provider, I do not think ou need this ... you should really just call the actual kafkaGetClusterId method IMHO which should set it on its own.", "author": "scholzj", "createdAt": "2020-12-28T15:29:22Z", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaStatusTest.java", "diffHunk": "@@ -1153,4 +1189,18 @@ public MockModelWarningsStatusKafkaAssemblyOperator(Vertx vertx, PlatformFeature\n         }\n \n     }\n+\n+    class MockClusterIdStatusKafkaAssemblyOperator extends KafkaAssemblyOperator  {\n+        public MockClusterIdStatusKafkaAssemblyOperator(Vertx vertx, PlatformFeaturesAvailability pfa, CertManager certManager, PasswordGenerator passwordGenerator, ResourceOperatorSupplier supplier, ClusterOperatorConfig config) {\n+            super(vertx, pfa, certManager, passwordGenerator, supplier, config);\n+        }\n+\n+        @Override\n+        Future<Void> reconcile(ReconciliationState reconcileState)  {\n+            reconcileState.kafkaStatus.setClusterId(\"CLUSTERID\");\n+\n+            return Future.succeededFuture();\n+        }", "originalCommit": "0565bbd3fcfe6d583bf0f6adbb3e9a4ede16e1ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc1MTQ5Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#discussion_r551751496", "bodyText": "Yep, agreed.", "author": "lga-zurich", "createdAt": "2021-01-05T07:07:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM4Nzg5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM5MDU3MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#discussion_r549390571", "bodyText": "I wonder if this does what you want it to do. I think this code would do the warning and return the succeeded future only in case the adminClientProvider.createAdminClient(bootstrapHostname, compositeFuture.resultAt(0), compositeFuture.resultAt(1), \"cluster-operator\"); fails. But not when kafkaAdmin.describeCluster().clusterId().get() fails. When kafkaAdmin.describeCluster().clusterId().get() fails the whole reconciliation will fail.\nIf we really just want to pass the reocnciliation when this fails as discussed before, maybe you need to turn it around and have the whole try-catch block inside the executeBlocking section.", "author": "scholzj", "createdAt": "2020-12-28T15:37:35Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1954,6 +1958,45 @@ String zkConnectionString(int connectToReplicas, Function<Integer, String> zkNod\n             return withVoid(fut);\n         }\n \n+        /**\n+         * Get the cluster Id of the Kafka cluster\n+         * \n+         * @return\n+         */\n+        Future<ReconciliationState> kafkaGetClusterId() {\n+            if (kafkaStatus.getClusterId() != null) {\n+                // Cluster Id does not change\n+                return Future.succeededFuture(this);\n+            } else {\n+                return adminClientSecrets()\n+                    .compose(compositeFuture -> {\n+                        log.debug(\"{}: Attempt to get clusterId\", reconciliation);\n+                        try {\n+                            String bootstrapHostname = KafkaResources.bootstrapServiceName(this.name) + \".\" + this.namespace + \".svc:\" + KafkaCluster.REPLICATION_PORT;\n+                            log.debug(\"{}: Creating AdminClient for clusterId using {}\", reconciliation, bootstrapHostname);\n+                            Admin kafkaAdmin = adminClientProvider.createAdminClient(bootstrapHostname, compositeFuture.resultAt(0), compositeFuture.resultAt(1), \"cluster-operator\");\n+                            Promise<ReconciliationState> resultPromise = Promise.promise();\n+                            vertx.createSharedWorkerExecutor(\"kubernetes-ops-pool\").<ReconciliationState>executeBlocking(\n+                                future -> {\n+                                    try {\n+                                        kafkaStatus.setClusterId(kafkaAdmin.describeCluster().clusterId().get());\n+                                        future.complete(this);\n+                                    } catch (Throwable e) {\n+                                        future.fail(e);\n+                                    }\n+                                },\n+                                true,\n+                                resultPromise);\n+                            return resultPromise.future();\n+                        } catch (KafkaException e) {\n+                            log.warn(\"{}: Kafka exception getting clusterId {}\", reconciliation, e.getMessage());\n+                        }\n+\n+                        return Future.succeededFuture(this);", "originalCommit": "0565bbd3fcfe6d583bf0f6adbb3e9a4ede16e1ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE4NzYwMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#discussion_r551187600", "bodyText": "kafkaAdmin doesn't seem to get closed.", "author": "tombentley", "createdAt": "2021-01-04T09:01:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM5MDU3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc1MTgzNQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4123#discussion_r551751835", "bodyText": "@scholzj ok, I'll move everything into the executeBlocking\n@tombentley good catch!", "author": "lga-zurich", "createdAt": "2021-01-05T07:08:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM5MDU3MQ=="}], "type": "inlineReview"}, {"oid": "b477f00e8321a87856a03e0306887ec47b3441b8", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b477f00e8321a87856a03e0306887ec47b3441b8", "message": "Kafka cluster Id in status\n\nSigned-off-by: Luis Garc\u00e9s-Erice <lga@zurich.ibm.com>", "committedDate": "2021-01-05T08:51:21Z", "type": "commit"}, {"oid": "2f6a7f6ef258ccba4dcd7bebbe9cc4257c1427bd", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/2f6a7f6ef258ccba4dcd7bebbe9cc4257c1427bd", "message": "Make clusterId obtention non-blocking\n\nSigned-off-by: Luis Garc\u00e9s-Erice <lga@zurich.ibm.com>", "committedDate": "2021-01-05T08:51:22Z", "type": "commit"}, {"oid": "0a1b09595c21d0090086351329b9c7db6539d72b", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/0a1b09595c21d0090086351329b9c7db6539d72b", "message": "Copy CRDs including the clusterId\n\nSigned-off-by: Luis Garc\u00e9s-Erice <lga@zurich.ibm.com>", "committedDate": "2021-01-05T08:51:23Z", "type": "commit"}, {"oid": "5e107755365309ed9ddaba7dc2a2e2c27b49ebca", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/5e107755365309ed9ddaba7dc2a2e2c27b49ebca", "message": "Mock clusterId\n\nSigned-off-by: Luis Garc\u00e9s-Erice <lga@zurich.ibm.com>", "committedDate": "2021-01-05T08:51:24Z", "type": "commit"}, {"oid": "a0b069a39d3019b05b09f24a03cd1d1cf4382ee4", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a0b069a39d3019b05b09f24a03cd1d1cf4382ee4", "message": "Introduce clusterId in CHANGELOG\n\nSigned-off-by: Luis Garc\u00e9s-Erice <lga@zurich.ibm.com>", "committedDate": "2021-01-05T08:53:10Z", "type": "commit"}, {"oid": "c00c2c9d8a92732655e863beb167c62f7d19b27c", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c00c2c9d8a92732655e863beb167c62f7d19b27c", "message": "Fix build\n\nSigned-off-by: Luis Garc\u00e9s-Erice <lga@zurich.ibm.com>", "committedDate": "2021-01-05T08:53:11Z", "type": "commit"}, {"oid": "0b627dccc797d11e20bf652e2768025104d1e754", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/0b627dccc797d11e20bf652e2768025104d1e754", "message": "No need to cache cluster Id\n\nSigned-off-by: Luis Garc\u00e9s-Erice <lga@zurich.ibm.com>", "committedDate": "2021-01-05T08:58:21Z", "type": "commit"}, {"oid": "20c95875925ea7e7052d6db15b8bdec32104419c", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/20c95875925ea7e7052d6db15b8bdec32104419c", "message": "Mock cluster Id test\n\nSigned-off-by: Luis Garc\u00e9s-Erice <lga@zurich.ibm.com>", "committedDate": "2021-01-05T08:58:21Z", "type": "forcePushed"}, {"oid": "d780ba78d183b1aee9632f3afdf3f47c298b1c9e", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d780ba78d183b1aee9632f3afdf3f47c298b1c9e", "message": "Mock cluster Id test\n\nSigned-off-by: Luis Garc\u00e9s-Erice <lga@zurich.ibm.com>", "committedDate": "2021-01-05T11:45:27Z", "type": "commit"}, {"oid": "d780ba78d183b1aee9632f3afdf3f47c298b1c9e", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d780ba78d183b1aee9632f3afdf3f47c298b1c9e", "message": "Mock cluster Id test\n\nSigned-off-by: Luis Garc\u00e9s-Erice <lga@zurich.ibm.com>", "committedDate": "2021-01-05T11:45:27Z", "type": "forcePushed"}]}