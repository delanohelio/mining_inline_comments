{"pr_number": 4114, "pr_title": "feat: Add annotations to perform connector/task restart operations", "pr_createdAt": "2020-12-15T21:59:55Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4114", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc4NDQ0Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4114#discussion_r543784446", "bodyText": "Not sure I understand why do we call this at the end. Could you please explain?", "author": "scholzj", "createdAt": "2020-12-16T00:22:25Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/AbstractConnectOperator.java", "diffHunk": "@@ -563,6 +566,91 @@ private boolean needsReconfiguring(Reconciliation reconciliation, String connect\n         }\n     }\n \n+    private Future<Map<String, Object>> maybeRestartConnector(Reconciliation reconciliation, String host, KafkaConnectApi apiClient, String connectorName, CustomResource resource, Map<String, Object> status) {\n+        if (hasRestartAnnotation(resource, connectorName)) {\n+            log.debug(\"{}: Restarting connector {}\", reconciliation, connectorName);\n+            return apiClient.restart(host, port, connectorName)\n+                    .compose(ignored -> removeRestartAnnotation(reconciliation, resource),\n+                        throwable -> {\n+                            // Ignore restart failures - just try again on the next reconcile\n+                            log.warn(\"{}: Failed to restart connector {}. {}\", reconciliation, connectorName, throwable.getMessage());\n+                            return Future.succeededFuture();\n+                        })\n+                    .compose(ignored -> apiClient.statusWithBackOff(new BackOff(200L, 2, 10), host, port,", "originalCommit": "eefc53e1a41f5a2dc0b1796298823d42f93b9519", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE2Nzg1Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4114#discussion_r544167853", "bodyText": "I'm guessing because ultimately maybeCreateOrUpdateConnector needs to return the status. But it would probably be better to make pauseResume, maybeRestartConnector and maybeRestartConnectorTask all return Future<Void> and make the call the apiClient.statusWithBackOff directly from maybeCreateOrUpdateConnector.", "author": "tombentley", "createdAt": "2020-12-16T10:04:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc4NDQ0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIwMDcxMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4114#discussion_r544200710", "bodyText": "Yeah, that is why I wondered about this. If it is about the status for the KafkaConnector status field, it should be probably called only at the end.", "author": "scholzj", "createdAt": "2020-12-16T10:53:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc4NDQ0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY3MDIwNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4114#discussion_r544670206", "bodyText": "Thanks for the review - Tom is correct here & I have updated to move the apiClient.statusWithBackOff call to the end of the compose chains.", "author": "ajborley", "createdAt": "2020-12-16T22:31:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc4NDQ0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE2NjEwMg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4114#discussion_r544166102", "bodyText": "I wonder if we should support a list of ids. It would make it simpler to restart several failed tasks.", "author": "tombentley", "createdAt": "2020-12-16T10:01:29Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/AbstractConnectOperator.java", "diffHunk": "@@ -563,6 +566,91 @@ private boolean needsReconfiguring(Reconciliation reconciliation, String connect\n         }\n     }\n \n+    private Future<Map<String, Object>> maybeRestartConnector(Reconciliation reconciliation, String host, KafkaConnectApi apiClient, String connectorName, CustomResource resource, Map<String, Object> status) {\n+        if (hasRestartAnnotation(resource, connectorName)) {\n+            log.debug(\"{}: Restarting connector {}\", reconciliation, connectorName);\n+            return apiClient.restart(host, port, connectorName)\n+                    .compose(ignored -> removeRestartAnnotation(reconciliation, resource),\n+                        throwable -> {\n+                            // Ignore restart failures - just try again on the next reconcile\n+                            log.warn(\"{}: Failed to restart connector {}. {}\", reconciliation, connectorName, throwable.getMessage());\n+                            return Future.succeededFuture();\n+                        })\n+                    .compose(ignored -> apiClient.statusWithBackOff(new BackOff(200L, 2, 10), host, port,\n+                        connectorName));\n+        } else {\n+            return Future.succeededFuture(status);\n+        }\n+    }\n+\n+    private Future<Map<String, Object>> maybeRestartConnectorTask(Reconciliation reconciliation, String host, KafkaConnectApi apiClient, String connectorName, CustomResource resource, Map<String, Object> status) {\n+        int taskID = getRestartTaskAnnotationTaskID(resource, connectorName);\n+        if (taskID >= 0) {\n+            log.debug(\"{}: Restarting connector task {}:{}\", reconciliation, connectorName, taskID);\n+            return apiClient.restartTask(host, port, connectorName, taskID)\n+                    .compose(ignored -> removeRestartTaskAnnotation(reconciliation, resource),\n+                        throwable -> {\n+                            // Ignore restart failures - just try again on the next reconcile\n+                            log.warn(\"{}: Failed to restart connector task {}:{}. {}\", reconciliation, connectorName, taskID, throwable.getMessage());\n+                            return Future.succeededFuture();\n+                        })\n+                    .compose(ignored -> apiClient.statusWithBackOff(new BackOff(200L, 2, 10), host, port,\n+                        connectorName));\n+        } else {\n+            return Future.succeededFuture(status);\n+        }\n+    }\n+\n+    /**\n+     * Whether the provided resource instance is a KafkaConnector and has the strimzi.io/restart annotation\n+     *\n+     * @param resource resource instance to check\n+     * @param resource connectorName name of the connector to check\n+     * @return true if the provided resource instance has the strimzi.io/restart annotation; false otherwise\n+     */\n+    protected boolean hasRestartAnnotation(CustomResource resource, String connectorName) {\n+        return Annotations.booleanAnnotation(resource, ANNO_STRIMZI_IO_RESTART, false);\n+    }\n+\n+    /**\n+     * Return the ID of the connector task to be restarted if the provided KafkaConnector resource instance has the strimzio.io/restart-task annotation\n+     *\n+     * @param resource resource instance to check\n+     * @param connectorName KafkaConnector resource instance to check\n+     * @return the ID of the task to be restarted if the provided KafkaConnector resource instance has the strimzio.io/restart-task annotation or -1 otherwise.\n+     */\n+    protected int getRestartTaskAnnotationTaskID(CustomResource resource, String connectorName) {\n+        return Annotations.intAnnotation(resource, ANNO_STRIMZI_IO_RESTART_TASK, -1);", "originalCommit": "eefc53e1a41f5a2dc0b1796298823d42f93b9519", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY3OTE5MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4114#discussion_r544679190", "bodyText": "Thanks for the review. I have started looking into this - it should be possible to restart tasks on a KafkaConnector resource using an annotation like: strimzi.io/restart-tasks: \"0 1 2\", although it does raise some questions:\n\nwhat should happen if one of the restart calls fails (e.g. maybe there is no task 2)? Should the annotation be altered to only include the task IDs that were not restarted, so that they can be attempted on the next reconcile?\nwhat should the annotation look like for KafkaMirrorMaker2 resources? The code currently supports annotations that address a single MM2 connector task like: strimzi.io/restart-connector-tasks: \"<MM2-connector-name>:<task-id>\". Do you think it should allow multiple MM2 connectors to be specified? Or just multiple tasks for a single connector? For example strimzi.io/restart-connector-tasks: \"<MM2-connector-name>:0 1 2\"", "author": "ajborley", "createdAt": "2020-12-16T22:48:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE2NjEwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg5ODk2NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4114#discussion_r544898965", "bodyText": "These are good points. I guess it might be a good idea to leave this idea for now and see how this stuff is used in practice. It seems like it would be easy enough to add at a later date.", "author": "tombentley", "createdAt": "2020-12-17T08:28:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE2NjEwMg=="}], "type": "inlineReview"}, {"oid": "40ab8eda1e05204d00ecf60fc09e34720706710b", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/40ab8eda1e05204d00ecf60fc09e34720706710b", "message": "Address review comments\n\n - Add doc, CHANGELOG\n - Reduce calls to connector status.\n\nSigned-off-by: Andrew Borley <borley@uk.ibm.com>", "committedDate": "2020-12-16T22:27:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkwMzM4Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4114#discussion_r544903382", "bodyText": "I have my doubts about this, particularly in the case that the connector task doesn't exist (i.e. bad id, presumably an http 404). If it's only in the logs then the user might not realise why the annotation wasn't removed. For transient errors it will likely succeed, so leaving it in the annotation for another try is not a bad idea. But for permanent errors like non-existence its more of a problem, especially if the user doesn't have access to the logs. I think we should propagate the error as a warning in the status.\nThe error case doesn't seem to be covered by the tests.", "author": "tombentley", "createdAt": "2020-12-17T08:35:27Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/AbstractConnectOperator.java", "diffHunk": "@@ -544,25 +549,98 @@ private boolean needsReconfiguring(Reconciliation reconciliation, String connect\n             boolean shouldPause = Boolean.TRUE.equals(connectorSpec.getPause());\n             if (\"RUNNING\".equals(state) && shouldPause) {\n                 log.debug(\"{}: Pausing connector {}\", reconciliation, connectorName);\n-                return apiClient.pause(host, port,\n-                        connectorName)\n-                        .compose(ignored ->\n-                                apiClient.status(host, port,\n-                                        connectorName));\n+                return apiClient.pause(host, port, connectorName);\n             } else if (\"PAUSED\".equals(state) && !shouldPause) {\n                 log.debug(\"{}: Resuming connector {}\", reconciliation, connectorName);\n-                return apiClient.resume(host, port,\n-                        connectorName)\n-                        .compose(ignored ->\n-                                apiClient.status(host, port,\n-                                        connectorName));\n-\n+                return apiClient.resume(host, port, connectorName);\n             } else {\n-                return Future.succeededFuture(status);\n+                return Future.succeededFuture();\n             }\n         }\n     }\n \n+    private Future<Void> maybeRestartConnector(Reconciliation reconciliation, String host, KafkaConnectApi apiClient, String connectorName, CustomResource resource) {\n+        if (hasRestartAnnotation(resource, connectorName)) {\n+            log.debug(\"{}: Restarting connector {}\", reconciliation, connectorName);\n+            return apiClient.restart(host, port, connectorName)\n+                    .compose(ignored -> removeRestartAnnotation(reconciliation, resource),\n+                        throwable -> {\n+                            // Ignore restart failures - just try again on the next reconcile\n+                            log.warn(\"{}: Failed to restart connector {}. {}\", reconciliation, connectorName, throwable.getMessage());\n+                            return Future.succeededFuture();\n+                        });\n+        } else {\n+            return Future.succeededFuture();\n+        }\n+    }\n+\n+    private Future<Void> maybeRestartConnectorTask(Reconciliation reconciliation, String host, KafkaConnectApi apiClient, String connectorName, CustomResource resource) {\n+        int taskID = getRestartTaskAnnotationTaskID(resource, connectorName);\n+        if (taskID >= 0) {\n+            log.debug(\"{}: Restarting connector task {}:{}\", reconciliation, connectorName, taskID);\n+            return apiClient.restartTask(host, port, connectorName, taskID)\n+                    .compose(ignored -> removeRestartTaskAnnotation(reconciliation, resource),\n+                        throwable -> {\n+                            // Ignore restart failures - just try again on the next reconcile\n+                            log.warn(\"{}: Failed to restart connector task {}:{}. {}\", reconciliation, connectorName, taskID, throwable.getMessage());", "originalCommit": "40ab8eda1e05204d00ecf60fc09e34720706710b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAxOTYxMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4114#discussion_r548019610", "bodyText": "The latest commit adds warning status conditions to the CR when the restart or restartTask REST calls fail. Have also added failure test cases.", "author": "ajborley", "createdAt": "2020-12-23T15:42:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkwMzM4Mg=="}], "type": "inlineReview"}, {"oid": "456fe3e859f265ed7d0d6cfa7ffc38fbb1e91fe7", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/456fe3e859f265ed7d0d6cfa7ffc38fbb1e91fe7", "message": "Add warning condition to status on restart failure\n\n- Also fix accidental doc deletion.\n\nSigned-off-by: Andrew Borley <borley@uk.ibm.com>", "committedDate": "2020-12-23T15:38:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE4OTQwNQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4114#discussion_r551189405", "bodyText": "Needs amending", "author": "tombentley", "createdAt": "2021-01-04T09:05:12Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/AbstractConnectOperator.java", "diffHunk": "@@ -476,28 +480,34 @@ protected KafkaConnectApi getKafkaConnectApi() {\n      * @param apiClient The client instance.\n      * @param connectorName The connector name.\n      * @param connectorSpec The desired connector spec.\n+     * @param resource The resource that defines the connector.\n      * @return A Future whose result, when successfully completed, is a map of the current connector state.", "originalCommit": "456fe3e859f265ed7d0d6cfa7ffc38fbb1e91fe7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIxNzE2Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/4114#discussion_r551217162", "bodyText": "Done", "author": "ajborley", "createdAt": "2021-01-04T09:59:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE4OTQwNQ=="}], "type": "inlineReview"}, {"oid": "274a8cc494341c0ffb4a7cb6078f807a4cddee07", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/274a8cc494341c0ffb4a7cb6078f807a4cddee07", "message": "Update javadoc\n\nSigned-off-by: Andrew Borley <borley@uk.ibm.com>", "committedDate": "2021-01-04T09:49:21Z", "type": "forcePushed"}, {"oid": "1dc869e95d532d127333919a73aba9e2428679e4", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/1dc869e95d532d127333919a73aba9e2428679e4", "message": "feat: Add annotations to perform connector/task restart operations\n\n - This commit implements the first part of the 'Restarting Kafka\nConnect connectors and tasks' proposal\n(https://github.com/strimzi/proposals), adding new annotations that\ncause the operator to restart connectors or tasks. The annotations can\nbe applied to the KafkaConnector, and the KafkaMirrorMaker2 custom\nresources. The annotation acts as a trigger for a single restart call\nby the operator, and is removed from the CR when the restart REST API\ncall is successfully called.\n\nSigned-off-by: Andrew Borley <borley@uk.ibm.com>", "committedDate": "2021-01-12T09:43:41Z", "type": "commit"}, {"oid": "42cb464271fbcbf487b50193e3bac4abf5a09f3a", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/42cb464271fbcbf487b50193e3bac4abf5a09f3a", "message": "Address review comments\n\n - Add doc, CHANGELOG\n - Reduce calls to connector status.\n\nSigned-off-by: Andrew Borley <borley@uk.ibm.com>", "committedDate": "2021-01-12T09:44:36Z", "type": "commit"}, {"oid": "c0cc4a7873b9d4825fa1ed9eb9f5fa9e81f49f0c", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c0cc4a7873b9d4825fa1ed9eb9f5fa9e81f49f0c", "message": "Fix doc references\n\nSigned-off-by: Andrew Borley <borley@uk.ibm.com>", "committedDate": "2021-01-12T09:44:36Z", "type": "commit"}, {"oid": "c0c99b14b0c611871f26d6f1bd06e7eb1aedfc4d", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c0c99b14b0c611871f26d6f1bd06e7eb1aedfc4d", "message": "Add warning condition to status on restart failure\n\n- Also fix accidental doc deletion.\n\nSigned-off-by: Andrew Borley <borley@uk.ibm.com>", "committedDate": "2021-01-12T09:44:36Z", "type": "commit"}, {"oid": "d81b208092cf7f806f5b4a8465aee7dfe26004fe", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d81b208092cf7f806f5b4a8465aee7dfe26004fe", "message": "Update javadoc\n\nSigned-off-by: Andrew Borley <borley@uk.ibm.com>", "committedDate": "2021-01-12T09:44:36Z", "type": "commit"}, {"oid": "d81b208092cf7f806f5b4a8465aee7dfe26004fe", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d81b208092cf7f806f5b4a8465aee7dfe26004fe", "message": "Update javadoc\n\nSigned-off-by: Andrew Borley <borley@uk.ibm.com>", "committedDate": "2021-01-12T09:44:36Z", "type": "forcePushed"}]}