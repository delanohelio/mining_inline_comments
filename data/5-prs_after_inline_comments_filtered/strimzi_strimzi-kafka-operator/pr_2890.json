{"pr_number": 2890, "pr_title": "[systemtest] Make wait for CR status methods more generic way", "pr_createdAt": "2020-04-24T15:20:32Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY3NzE2MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r414677161", "bodyText": "I think here you can use something like KafkaConnect.RESOURCE_KIND etc.", "author": "Frawless", "createdAt": "2020-04-24T15:45:49Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/ResourceManager.java", "diffHunk": "@@ -358,6 +363,51 @@ public static String getImageValueFromCO(String name) {\n         }\n         return \"\";\n     }\n+    /**\n+     * Log actual status of custom resource with pods.\n+     * @param customResource - Kafka, KafkaConnect etc. - every resource that HasMetadata and HasStatus (Strimzi status)\n+     */\n+    public static <T extends HasMetadata & HasStatus> void logCurrentStatus(T customResource) {\n+        String kind = customResource.getKind();\n+        String name = customResource.getMetadata().getName();\n+\n+        List<String> log = new ArrayList<>(asList(\"\\n\", kind, \" status:\\n\", \"\\nConditions:\\n\"));\n+\n+        for (Condition condition : customResource.getStatus().getConditions()) {\n+            log.add(\"\\tType: \" + condition.getType() + \"\\n\");\n+            log.add(\"\\tMessage: \" + condition.getMessage() + \"\\n\");\n+        }\n+\n+        PodUtils.logCurrentPodStatus(name, log);\n+    }\n+\n+    /**\n+     * Wait until the CR is in desired state\n+     * @param operation - client of CR - for example kafkaClient()\n+     * @param resource - custom resource\n+     * @param status - desired status\n+     * @return returns CR\n+     */\n+    public static <T extends HasMetadata & HasStatus> T waitForStatus(MixedOperation<T, ?, ?, ?> operation, T resource, String status) {\n+        List<String> printWholeCr = new ArrayList<>(asList(\"KafkaConnector\", \"KafkaTopic\", \"KafkaUser\"));", "originalCommit": "a665fe87cddbfd2c32fe3aa9309972df2ab8985e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY3ODQ2MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r414678460", "bodyText": "Wouldn't it be better to decide that in logCurrentStatus ?", "author": "Frawless", "createdAt": "2020-04-24T15:47:32Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/ResourceManager.java", "diffHunk": "@@ -358,6 +363,51 @@ public static String getImageValueFromCO(String name) {\n         }\n         return \"\";\n     }\n+    /**\n+     * Log actual status of custom resource with pods.\n+     * @param customResource - Kafka, KafkaConnect etc. - every resource that HasMetadata and HasStatus (Strimzi status)\n+     */\n+    public static <T extends HasMetadata & HasStatus> void logCurrentStatus(T customResource) {\n+        String kind = customResource.getKind();\n+        String name = customResource.getMetadata().getName();\n+\n+        List<String> log = new ArrayList<>(asList(\"\\n\", kind, \" status:\\n\", \"\\nConditions:\\n\"));\n+\n+        for (Condition condition : customResource.getStatus().getConditions()) {\n+            log.add(\"\\tType: \" + condition.getType() + \"\\n\");\n+            log.add(\"\\tMessage: \" + condition.getMessage() + \"\\n\");\n+        }\n+\n+        PodUtils.logCurrentPodStatus(name, log);\n+    }\n+\n+    /**\n+     * Wait until the CR is in desired state\n+     * @param operation - client of CR - for example kafkaClient()\n+     * @param resource - custom resource\n+     * @param status - desired status\n+     * @return returns CR\n+     */\n+    public static <T extends HasMetadata & HasStatus> T waitForStatus(MixedOperation<T, ?, ?, ?> operation, T resource, String status) {\n+        List<String> printWholeCr = new ArrayList<>(asList(\"KafkaConnector\", \"KafkaTopic\", \"KafkaUser\"));\n+\n+        TestUtils.waitFor(\"Wait for {}\" + resource.getKind() + \":{} \" + resource.getMetadata().getName() + \"will have desired state {}\" + status,\n+            Constants.POLL_INTERVAL_FOR_RESOURCE_READINESS, Constants.TIMEOUT_FOR_RESOURCE_READINESS,\n+            () -> operation.inNamespace(resource.getMetadata().getNamespace())\n+            .withName(resource.getMetadata().getName())\n+            .get().getStatus().getConditions().stream().anyMatch(condition -> condition.getType().equals(status)),\n+            () -> {\n+                if (printWholeCr.contains(resource.getKind())) {", "originalCommit": "a665fe87cddbfd2c32fe3aa9309972df2ab8985e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY3OTUxOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r414679519", "bodyText": "waitForResourceStatus is better name from my POV", "author": "Frawless", "createdAt": "2020-04-24T15:49:01Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/ResourceManager.java", "diffHunk": "@@ -358,6 +363,51 @@ public static String getImageValueFromCO(String name) {\n         }\n         return \"\";\n     }\n+    /**\n+     * Log actual status of custom resource with pods.\n+     * @param customResource - Kafka, KafkaConnect etc. - every resource that HasMetadata and HasStatus (Strimzi status)\n+     */\n+    public static <T extends HasMetadata & HasStatus> void logCurrentStatus(T customResource) {\n+        String kind = customResource.getKind();\n+        String name = customResource.getMetadata().getName();\n+\n+        List<String> log = new ArrayList<>(asList(\"\\n\", kind, \" status:\\n\", \"\\nConditions:\\n\"));\n+\n+        for (Condition condition : customResource.getStatus().getConditions()) {\n+            log.add(\"\\tType: \" + condition.getType() + \"\\n\");\n+            log.add(\"\\tMessage: \" + condition.getMessage() + \"\\n\");\n+        }\n+\n+        PodUtils.logCurrentPodStatus(name, log);\n+    }\n+\n+    /**\n+     * Wait until the CR is in desired state\n+     * @param operation - client of CR - for example kafkaClient()\n+     * @param resource - custom resource\n+     * @param status - desired status\n+     * @return returns CR\n+     */\n+    public static <T extends HasMetadata & HasStatus> T waitForStatus(MixedOperation<T, ?, ?, ?> operation, T resource, String status) {", "originalCommit": "a665fe87cddbfd2c32fe3aa9309972df2ab8985e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY4MDYyMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r414680620", "bodyText": "Why did you rename it? Now it's not consistent with other resources", "author": "Frawless", "createdAt": "2020-04-24T15:50:39Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaTopicResource.java", "diffHunk": "@@ -64,7 +63,7 @@ static DoneableKafkaTopic topic(KafkaTopic topic) {\n         return new DoneableKafkaTopic(topic, kt -> {\n             kafkaTopicClient().inNamespace(topic.getMetadata().getNamespace()).createOrReplace(kt);\n             LOGGER.info(\"Created KafkaTopic {}\", kt.getMetadata().getName());\n-            return waitFor(deleteLater(kt));\n+            return waitForStatus(deleteLater(kt));", "originalCommit": "a665fe87cddbfd2c32fe3aa9309972df2ab8985e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc1MjQ5MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r414752491", "bodyText": "This was some error, I didn't wanted to rename it, thanks for the comment", "author": "im-konge", "createdAt": "2020-04-24T17:44:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY4MDYyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY4MTMwNA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r414681304", "bodyText": "Do we really need it? I think CO do this check as well, or maybe we should check it when KafkaUser is rdy", "author": "Frawless", "createdAt": "2020-04-24T15:51:36Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaUserResource.java", "diffHunk": "@@ -68,13 +70,10 @@ public static KafkaUser kafkaUserWithoutWait(KafkaUser user) {\n     }\n \n     private static KafkaUser waitFor(KafkaUser kafkaUser) {\n-        String kafkaUserCrName = kafkaUser.getMetadata().getName();\n-\n-        LOGGER.info(\"Waiting for KafkaUser {}\", kafkaUserCrName);\n-        KafkaUserUtils.waitForKafkaUserCreation(kafkaUserCrName);\n-        LOGGER.info(\"KafkaUser {} is ready\", kafkaUserCrName);\n-\n-        return kafkaUser;\n+        SecretUtils.waitForSecretReady(kafkaUser.getMetadata().getName(),", "originalCommit": "a665fe87cddbfd2c32fe3aa9309972df2ab8985e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY4MjcyNA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r414682724", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ResourceManager.waitForStatus(kafkaBridgeClient(), kafkaBridge, state);\n          \n          \n            \n                    ResourceManager.waitForStatus(KafkaBridgeResource.kafkaBridgeClient(), kafkaBridge, state);\n          \n      \n    \n    \n  \n\nCould you please use this syntax? Or is there any specific reason for this way?", "author": "Frawless", "createdAt": "2020-04-24T15:53:33Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaBridgeUtils.java", "diffHunk": "@@ -65,10 +66,7 @@ public static void checkSendResponse(JsonObject response, int messageCount) {\n     }\n \n     public static void waitUntilKafkaBridgeStatus(String clusterName, String state) {\n-        LOGGER.info(\"Wait until KafkaBridge {} will be in state: {}\", clusterName, state);\n-        TestUtils.waitFor(\"Waiting for Kafka resource status is: \" + state, Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT,\n-            () -> KafkaBridgeResource.kafkaBridgeClient().inNamespace(kubeClient().getNamespace()).withName(clusterName).get().getStatus().getConditions().get(0).getType().equals(state)\n-        );\n-        LOGGER.info(\"KafkaBridge {}} is in state: {}\", clusterName, state);\n+        KafkaBridge kafkaBridge = kafkaBridgeClient().inNamespace(kubeClient().getNamespace()).withName(clusterName).get();\n+        ResourceManager.waitForStatus(kafkaBridgeClient(), kafkaBridge, state);", "originalCommit": "a665fe87cddbfd2c32fe3aa9309972df2ab8985e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY4MzAxOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r414683018", "bodyText": "Same as above", "author": "Frawless", "createdAt": "2020-04-24T15:53:57Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaConnectS2IUtils.java", "diffHunk": "@@ -25,12 +26,8 @@ private KafkaConnectS2IUtils() {}\n      * @param status desired status value\n      */\n     public static void waitForConnectS2IStatus(String name, String status) {\n-        LOGGER.info(\"Wait until KafkaConnectS2I {} will be in state: {}\", name, status);\n-        TestUtils.waitFor(\"KafkaConnectS2I \" + name + \" state: \" + status, Constants.POLL_INTERVAL_FOR_RESOURCE_READINESS, Constants.TIMEOUT_FOR_RESOURCE_READINESS,\n-            () -> KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(kubeClient().getNamespace())\n-                    .withName(name).get().getStatus().getConditions().get(0).getType().equals(status),\n-            () -> StUtils.logCurrentStatus(KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(kubeClient().getNamespace()).withName(name).get()));\n-        LOGGER.info(\"KafkaConnectS2I {} is in desired state: {}\", name, status);\n+        KafkaConnectS2I kafkaConnectS2I = kafkaConnectS2IClient().inNamespace(kubeClient().getNamespace()).withName(name).get();\n+        ResourceManager.waitForStatus(kafkaConnectS2IClient(), kafkaConnectS2I, status);", "originalCommit": "a665fe87cddbfd2c32fe3aa9309972df2ab8985e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY4MzUyNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r414683526", "bodyText": "Indent. Are you sure it will take proper condition? In Kafka case for example.", "author": "Frawless", "createdAt": "2020-04-24T15:54:43Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/ResourceManager.java", "diffHunk": "@@ -358,6 +363,51 @@ public static String getImageValueFromCO(String name) {\n         }\n         return \"\";\n     }\n+    /**\n+     * Log actual status of custom resource with pods.\n+     * @param customResource - Kafka, KafkaConnect etc. - every resource that HasMetadata and HasStatus (Strimzi status)\n+     */\n+    public static <T extends HasMetadata & HasStatus> void logCurrentStatus(T customResource) {\n+        String kind = customResource.getKind();\n+        String name = customResource.getMetadata().getName();\n+\n+        List<String> log = new ArrayList<>(asList(\"\\n\", kind, \" status:\\n\", \"\\nConditions:\\n\"));\n+\n+        for (Condition condition : customResource.getStatus().getConditions()) {\n+            log.add(\"\\tType: \" + condition.getType() + \"\\n\");\n+            log.add(\"\\tMessage: \" + condition.getMessage() + \"\\n\");\n+        }\n+\n+        PodUtils.logCurrentPodStatus(name, log);\n+    }\n+\n+    /**\n+     * Wait until the CR is in desired state\n+     * @param operation - client of CR - for example kafkaClient()\n+     * @param resource - custom resource\n+     * @param status - desired status\n+     * @return returns CR\n+     */\n+    public static <T extends HasMetadata & HasStatus> T waitForStatus(MixedOperation<T, ?, ?, ?> operation, T resource, String status) {\n+        List<String> printWholeCr = new ArrayList<>(asList(\"KafkaConnector\", \"KafkaTopic\", \"KafkaUser\"));\n+\n+        TestUtils.waitFor(\"Wait for {}\" + resource.getKind() + \":{} \" + resource.getMetadata().getName() + \"will have desired state {}\" + status,\n+            Constants.POLL_INTERVAL_FOR_RESOURCE_READINESS, Constants.TIMEOUT_FOR_RESOURCE_READINESS,\n+            () -> operation.inNamespace(resource.getMetadata().getNamespace())\n+            .withName(resource.getMetadata().getName())\n+            .get().getStatus().getConditions().stream().anyMatch(condition -> condition.getType().equals(status)),", "originalCommit": "a665fe87cddbfd2c32fe3aa9309972df2ab8985e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDczNzE0Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r414737147", "bodyText": "I tried whole KafkaST (I know we tried to fix the problem when WARNING appear to condition) and it should work. I will take a deeper look at it and let you know if it will cause any future problems.", "author": "im-konge", "createdAt": "2020-04-24T17:19:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY4MzUyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY4NDkwMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r414684900", "bodyText": "same as above", "author": "Frawless", "createdAt": "2020-04-24T15:56:35Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaConnectUtils.java", "diffHunk": "@@ -29,10 +31,8 @@ public static void createFileSinkConnector(String podName, String topicName, Str\n     }\n \n     public static void waitForConnectStatus(String name, String status) {\n-        LOGGER.info(\"Waiting for KafkaConnect {} state: {}\", name, status);\n-        TestUtils.waitFor(\"KafkaConnect \" + name + \" state: \" + status, Constants.POLL_INTERVAL_FOR_RESOURCE_READINESS, Constants.TIMEOUT_FOR_RESOURCE_READINESS,\n-            () -> KafkaConnectResource.kafkaConnectClient().inNamespace(kubeClient().getNamespace()).withName(name).get().getStatus().getConditions().get(0).getType().equals(status));\n-        LOGGER.info(\"KafkaConnect {} is in desired state: {}\", name, status);\n+        KafkaConnect kafkaConnect = kafkaConnectClient().inNamespace(kubeClient().getNamespace()).withName(name).get();\n+        ResourceManager.waitForStatus(kafkaConnectClient(), kafkaConnect, status);", "originalCommit": "a665fe87cddbfd2c32fe3aa9309972df2ab8985e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcxNDg3Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r414714876", "bodyText": "Same as above", "author": "Frawless", "createdAt": "2020-04-24T16:43:15Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaConnectorUtils.java", "diffHunk": "@@ -40,17 +42,13 @@ public static void waitForConnectorStability(String connectorName, String connec\n                 } else {\n                     throw new RuntimeException(\"Connector\" + connectorName + \" is not stable!\");\n                 }\n-            }, () -> StUtils.logCurrentStatus(KafkaConnectorResource.kafkaConnectorClient().inNamespace(kubeClient().getNamespace()).withName(connectorName).get())\n+            }, () -> logCurrentStatus(kafkaConnectorClient().inNamespace(kubeClient().getNamespace()).withName(connectorName).get())", "originalCommit": "a665fe87cddbfd2c32fe3aa9309972df2ab8985e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcxNjEyMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r414716120", "bodyText": "Guess we can add log, which will tell us that test is waiting for status", "author": "Frawless", "createdAt": "2020-04-24T16:45:19Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/ResourceManager.java", "diffHunk": "@@ -358,6 +363,51 @@ public static String getImageValueFromCO(String name) {\n         }\n         return \"\";\n     }\n+    /**\n+     * Log actual status of custom resource with pods.\n+     * @param customResource - Kafka, KafkaConnect etc. - every resource that HasMetadata and HasStatus (Strimzi status)\n+     */\n+    public static <T extends HasMetadata & HasStatus> void logCurrentStatus(T customResource) {\n+        String kind = customResource.getKind();\n+        String name = customResource.getMetadata().getName();\n+\n+        List<String> log = new ArrayList<>(asList(\"\\n\", kind, \" status:\\n\", \"\\nConditions:\\n\"));\n+\n+        for (Condition condition : customResource.getStatus().getConditions()) {\n+            log.add(\"\\tType: \" + condition.getType() + \"\\n\");\n+            log.add(\"\\tMessage: \" + condition.getMessage() + \"\\n\");\n+        }\n+\n+        PodUtils.logCurrentPodStatus(name, log);\n+    }\n+\n+    /**\n+     * Wait until the CR is in desired state\n+     * @param operation - client of CR - for example kafkaClient()\n+     * @param resource - custom resource\n+     * @param status - desired status\n+     * @return returns CR\n+     */\n+    public static <T extends HasMetadata & HasStatus> T waitForStatus(MixedOperation<T, ?, ?, ?> operation, T resource, String status) {", "originalCommit": "a665fe87cddbfd2c32fe3aa9309972df2ab8985e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcxNjkxNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r414716916", "bodyText": "Again, use ResourceManager.logCurrentStatus instead.", "author": "Frawless", "createdAt": "2020-04-24T16:46:34Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/controllers/StatefulSetUtils.java", "diffHunk": "@@ -137,11 +137,11 @@ public static void waitForAllStatefulSetPodsReady(String statefulSetName, int ex\n         LOGGER.info(\"Waiting for StatefulSet {} to be ready\", statefulSetName);\n         TestUtils.waitFor(\"statefulset \" + statefulSetName + \" to be ready\", Constants.POLL_INTERVAL_FOR_RESOURCE_READINESS, Constants.TIMEOUT_FOR_RESOURCE_READINESS,\n             () -> kubeClient().getStatefulSetStatus(statefulSetName),\n-            () -> StUtils.logCurrentStatus(KafkaResource.kafkaClient().inNamespace(kubeClient().getNamespace()).withName(resourceName).get()));\n+            () -> logCurrentStatus(KafkaResource.kafkaClient().inNamespace(kubeClient().getNamespace()).withName(resourceName).get()));", "originalCommit": "a665fe87cddbfd2c32fe3aa9309972df2ab8985e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcxODE1OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r414718159", "bodyText": "Maybe we should use different name? Or log it directly in that function? Now it's a little bit confusing", "author": "Frawless", "createdAt": "2020-04-24T16:48:36Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/PodUtils.java", "diffHunk": "@@ -265,23 +265,20 @@ public static void waitUntilPodsStability(List<Pod> pods) {\n \n     /**\n      * Log actual pod statuses list by prefix name\n-     * @param kind - custom resource / deployment kind - Kafka, KafkaBridge etc.\n      * @param name - custom resource / deployment name - used for prefix\n      * @param log - ArrayList - add statuses, pods and conditions for future display\n      */\n-    public static void logCurrentPodStatus(String kind, String name, List<String> log) {\n-        if (!(kind.equals(\"KafkaConnector\"))) {\n-            log.add(\"\\nPods with conditions and messages:\\n\\n\");\n-            for (Pod pod : kubeClient().listPodsByPrefixInName(name)) {\n-                log.add(pod.getMetadata().getName() + \":\");\n-                for (PodCondition podCondition : pod.getStatus().getConditions()) {\n-                    if (podCondition.getMessage() != null) {\n-                        log.add(\"\\n\\tType: \" + podCondition.getType() + \"\\n\");\n-                        log.add(\"\\tMessage: \" + podCondition.getMessage() + \"\\n\");\n-                    }\n+    public static void logCurrentPodStatus(String name, List<String> log) {\n+        log.add(\"\\nPods with conditions and messages:\\n\\n\");", "originalCommit": "a665fe87cddbfd2c32fe3aa9309972df2ab8985e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc2MDExOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r414760119", "bodyText": "I think we can add it directly to log function, I think that we will never use without second method.", "author": "im-konge", "createdAt": "2020-04-24T17:57:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcxODE1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcyMzU2NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r414723565", "bodyText": "I'm guessing the {} are something you copy and pasted from some logging stmt? It might be worth using String.format() rather than so much concat.", "author": "tombentley", "createdAt": "2020-04-24T16:57:17Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/ResourceManager.java", "diffHunk": "@@ -358,6 +363,51 @@ public static String getImageValueFromCO(String name) {\n         }\n         return \"\";\n     }\n+    /**\n+     * Log actual status of custom resource with pods.\n+     * @param customResource - Kafka, KafkaConnect etc. - every resource that HasMetadata and HasStatus (Strimzi status)\n+     */\n+    public static <T extends HasMetadata & HasStatus> void logCurrentStatus(T customResource) {\n+        String kind = customResource.getKind();\n+        String name = customResource.getMetadata().getName();\n+\n+        List<String> log = new ArrayList<>(asList(\"\\n\", kind, \" status:\\n\", \"\\nConditions:\\n\"));\n+\n+        for (Condition condition : customResource.getStatus().getConditions()) {\n+            log.add(\"\\tType: \" + condition.getType() + \"\\n\");\n+            log.add(\"\\tMessage: \" + condition.getMessage() + \"\\n\");\n+        }\n+\n+        PodUtils.logCurrentPodStatus(name, log);\n+    }\n+\n+    /**\n+     * Wait until the CR is in desired state\n+     * @param operation - client of CR - for example kafkaClient()\n+     * @param resource - custom resource\n+     * @param status - desired status\n+     * @return returns CR\n+     */\n+    public static <T extends HasMetadata & HasStatus> T waitForStatus(MixedOperation<T, ?, ?, ?> operation, T resource, String status) {\n+        List<String> printWholeCr = new ArrayList<>(asList(\"KafkaConnector\", \"KafkaTopic\", \"KafkaUser\"));\n+\n+        TestUtils.waitFor(\"Wait for {}\" + resource.getKind() + \":{} \" + resource.getMetadata().getName() + \"will have desired state {}\" + status,", "originalCommit": "a665fe87cddbfd2c32fe3aa9309972df2ab8985e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ce9b155e3bf8e7ad649133baff6678718e002d64", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ce9b155e3bf8e7ad649133baff6678718e002d64", "message": "add generic wait method to ResourceManager and update utils and resources classes\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-04-28T08:58:33Z", "type": "commit"}, {"oid": "9b69042573dac7cf7b2485753abecff73af2b0e0", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/9b69042573dac7cf7b2485753abecff73af2b0e0", "message": "edit log methods\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-04-28T08:58:44Z", "type": "commit"}, {"oid": "33a6af80dbccb771e9ffd4418604dbf0156ac84a", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/33a6af80dbccb771e9ffd4418604dbf0156ac84a", "message": "resolve comments\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-04-28T08:59:08Z", "type": "commit"}, {"oid": "65c2420812e5c17e9b61af7fdc6a54fc5357113a", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/65c2420812e5c17e9b61af7fdc6a54fc5357113a", "message": "fix errors after rebase\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-04-28T09:43:44Z", "type": "forcePushed"}, {"oid": "b2ded58a0d7348c7fa72440e236ea6608b296a5d", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b2ded58a0d7348c7fa72440e236ea6608b296a5d", "message": "fix errors after rebase\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-04-28T09:52:43Z", "type": "commit"}, {"oid": "b2ded58a0d7348c7fa72440e236ea6608b296a5d", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b2ded58a0d7348c7fa72440e236ea6608b296a5d", "message": "fix errors after rebase\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-04-28T09:52:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUwNjA0Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r416506042", "bodyText": "printWholeCR? :)", "author": "michalxo", "createdAt": "2020-04-28T10:30:42Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/ResourceManager.java", "diffHunk": "@@ -358,6 +368,63 @@ public static String getImageValueFromCO(String name) {\n         }\n         return \"\";\n     }\n+    /**\n+     * Log actual status of custom resource with pods.\n+     * @param customResource - Kafka, KafkaConnect etc. - every resource that HasMetadata and HasStatus (Strimzi status)\n+     */\n+    public static <T extends HasMetadata & HasStatus> void logCurrentResourceStatus(T customResource) {\n+        List<String> printWholeCr = new ArrayList<>(asList(KafkaConnector.RESOURCE_KIND, KafkaTopic.RESOURCE_KIND, KafkaUser.RESOURCE_KIND));", "originalCommit": "b2ded58a0d7348c7fa72440e236ea6608b296a5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUxMjkzOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r416512938", "bodyText": ":D yes better :) thanks for review :)", "author": "im-konge", "createdAt": "2020-04-28T10:42:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUwNjA0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUxNjM4NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r416516385", "bodyText": "use factory method ->  Arrays.asList() instead  of explicitly calling constructor new ArrayList<>", "author": "see-quick", "createdAt": "2020-04-28T10:48:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUwNjA0Mg=="}], "type": "inlineReview"}, {"oid": "684e44424ba44e829f8247f2483ea83bc1b98527", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/684e44424ba44e829f8247f2483ea83bc1b98527", "message": "resolve comment\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-04-28T14:35:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzOTMyMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r417139320", "bodyText": "If might be worth inlining this.", "author": "tombentley", "createdAt": "2020-04-29T08:10:50Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaConnectS2IResource.java", "diffHunk": "@@ -105,13 +100,7 @@ private static KafkaConnectS2I getKafkaConnectS2IFromYaml(String yamlPath) {\n     }\n \n     private static KafkaConnectS2I waitFor(KafkaConnectS2I kafkaConnectS2I) {", "originalCommit": "684e44424ba44e829f8247f2483ea83bc1b98527", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzNjYzNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r417936637", "bodyText": "Will be resolved in next PR", "author": "im-konge", "createdAt": "2020-04-30T11:18:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzOTMyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzOTQ0MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r417139440", "bodyText": "It might be worth inlining this.", "author": "tombentley", "createdAt": "2020-04-29T08:11:03Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaConnectResource.java", "diffHunk": "@@ -121,13 +116,7 @@ private static KafkaConnect getKafkaConnectFromYaml(String yamlPath) {\n     }\n \n     private static KafkaConnect waitFor(KafkaConnect kafkaConnect) {", "originalCommit": "684e44424ba44e829f8247f2483ea83bc1b98527", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzNjgyMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2890#discussion_r417936820", "bodyText": "Same as above", "author": "im-konge", "createdAt": "2020-04-30T11:18:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzOTQ0MA=="}], "type": "inlineReview"}]}