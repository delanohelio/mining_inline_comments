{"pr_number": 2771, "pr_title": "[systemtest] Create ST cert manager, remake OpenSSL methods", "pr_createdAt": "2020-04-01T10:07:47Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2771", "timeline": [{"oid": "c5e59de78a0c12c95c4df919a38f93208dfb1fea", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c5e59de78a0c12c95c4df919a38f93208dfb1fea", "message": "add new cert manager for systemtest\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-04-01T09:38:56Z", "type": "commit"}, {"oid": "0d785b7f6755b3f805e6a7373116b2f312c03dc4", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/0d785b7f6755b3f805e6a7373116b2f312c03dc4", "message": "remake testCertificates() test and update systemtest cert manager\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-04-01T09:38:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUwNzE2MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2771#discussion_r401507161", "bodyText": "This does not have any relation with the SystemtestCertManager. It would be better to move these methods to the cmdKubeClient or just use cmdKubeClient().execInPodContainer.", "author": "see-quick", "createdAt": "2020-04-01T10:16:21Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/security/SystemtestCertManager.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.security;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static java.util.Arrays.asList;\n+\n+public class SystemtestCertManager {\n+\n+    private static final String KAFKA_CERT_FILE_PATH = \"/opt/kafka/broker-certs/\";\n+    private static final String ZK_CERT_FILE_PATH = \"/etc/tls-sidecar/zookeeper-nodes/\";\n+    private static final String KAFKA_CA_FILE_PATH = \"/opt/kafka/cluster-ca-certs/ca.crt\";\n+    private static final String ZK_CA_FILE_PATH = \"/etc/tls-sidecar/cluster-ca-certs/ca.crt\";\n+\n+    public SystemtestCertManager() {}\n+\n+    private List<String> generateOpenSSLCommand(String server, String caFilePath, String hostname) {\n+        return new ArrayList<>(asList(\"openssl\",\n+                \"s_client\",\n+                \"-connect\", server,\n+                \"-showcerts\",\n+                \"-CAfile\", caFilePath,\n+                \"-verify_hostname\", hostname\n+        ));\n+    }\n+\n+    public String openSSLCommandByResource(String podName, String hostname, String port, String customResource, String namespace) {\n+        return openSSLCommandByResource(podName + \".\" + hostname + \":\" + port,\n+                podName + \".\" + hostname + \".\" + namespace + \".svc.cluster.local\", podName, customResource, true);\n+    }\n+\n+    public String openSSLCommandByResource(String server, String hostname, String podName, String customResource) {\n+        return openSSLCommandByResource(server, hostname, podName, customResource, true);\n+    }\n+\n+    public String openSSLCommandByResource(String server, String hostname, String podName, String customResource, boolean withCertAndKey) {\n+        String path = customResource.equals(\"kafka\") ? KAFKA_CERT_FILE_PATH : ZK_CERT_FILE_PATH;\n+        String caFilePath = customResource.equals(\"kafka\") ? KAFKA_CA_FILE_PATH : ZK_CA_FILE_PATH;\n+        String output;\n+\n+        List<String> cmd = generateOpenSSLCommand(server, caFilePath, hostname);\n+\n+        if (withCertAndKey) {\n+            cmd.add(\"-cert \" + path + podName + \".crt\");\n+            cmd.add(\"-key \" + path + podName + \".key\");\n+        }\n+\n+        if (customResource.equals(\"kafka\")) {\n+            output = executeCommandInPod(cmd, podName);\n+        } else {\n+            output = executeCommandInContainer(cmd, podName, \"tls-sidecar\");\n+        }\n+        return output;\n+    }\n+\n+    public static String executeCommandInPod(List<String> cmd, String podName) {\n+        return cmdKubeClient().execInPod(podName, \"/bin/bash\", \"-c\", String.join(\" \", cmd)).out();\n+    }\n+\n+    public static String executeCommandInContainer(List<String> cmd, String podName, String container) {\n+        return cmdKubeClient().execInPodContainer(podName, container,  \"/bin/bash\", \"-c\",\n+                String.join(\" \", cmd)).out();\n+    }", "originalCommit": "0d785b7f6755b3f805e6a7373116b2f312c03dc4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUwODU1Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2771#discussion_r401508557", "bodyText": "I will go for this one...\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class SystemtestCertManager {\n          \n          \n            \n            public class SystemTestCertManager {", "author": "see-quick", "createdAt": "2020-04-01T10:18:42Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/security/SystemtestCertManager.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.security;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static java.util.Arrays.asList;\n+\n+public class SystemtestCertManager {", "originalCommit": "0d785b7f6755b3f805e6a7373116b2f312c03dc4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUwOTEwNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2771#discussion_r401509107", "bodyText": "What about this method ?", "author": "see-quick", "createdAt": "2020-04-01T10:19:38Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/SecurityST.java", "diffHunk": "@@ -100,83 +101,56 @@\n     void testCertificates() {\n         LOGGER.info(\"Running testCertificates {}\", CLUSTER_NAME);\n         KafkaResource.kafkaEphemeral(CLUSTER_NAME, 2)\n-                .editSpec().editZookeeper().withReplicas(2).endZookeeper().endSpec().done();\n-        String commandForKafkaBootstrap = \"echo -n | openssl s_client -connect my-cluster-kafka-bootstrap:9093 -showcerts\" +\n-                \" -CAfile /opt/kafka/cluster-ca-certs/ca.crt\" +\n-                \" -verify_hostname my-cluster-kafka-bootstrap\";\n-\n-        String outputForKafkaBootstrap =\n-                cmdKubeClient().execInPod(KafkaResources.kafkaPodName(CLUSTER_NAME, 0),\n-                        \"/bin/bash\", \"-c\", commandForKafkaBootstrap).out();\n-        checkKafkaCertificates(outputForKafkaBootstrap);\n-\n-        String commandForZookeeperClient = \"echo -n | openssl s_client -connect my-cluster-zookeeper-client:2181 -showcerts\" +\n-                \" -CAfile /opt/kafka/cluster-ca-certs/ca.crt\" +\n-                \" -verify_hostname my-cluster-zookeeper-client\" +\n-                \" -cert /opt/kafka/broker-certs/my-cluster-kafka-0.crt\" +\n-                \" -key /opt/kafka/broker-certs/my-cluster-kafka-0.key\";\n-        String outputForZookeeperClient =\n-                cmdKubeClient().execInPod(KafkaResources.kafkaPodName(CLUSTER_NAME, 0),\n-                        \"/bin/bash\", \"-c\", commandForZookeeperClient).out();\n-        checkZookeeperCertificates(outputForZookeeperClient);\n+                .editSpec()\n+                    .editZookeeper()\n+                        .withReplicas(2)\n+                    .endZookeeper()\n+                .endSpec()\n+                .done();\n+\n+        SystemtestCertManager stCertManager = new SystemtestCertManager();\n+\n+        LOGGER.info(\"Check Kafka bootstrap certificate\");\n+        String outputCertificate = stCertManager.openSSLCommandByResource(\"my-cluster-kafka-bootstrap:9093\", \"my-cluster-kafka-bootstrap\",\n+                KafkaResources.kafkaPodName(CLUSTER_NAME, 0), \"kafka\", false);\n+        checkKafkaCertificates(outputCertificate);\n+\n+        LOGGER.info(\"Check zookeeper client certificate\");\n+        outputCertificate = stCertManager.openSSLCommandByResource(\"my-cluster-zookeeper-client:2181\", \"my-cluster-zookeeper-client\",\n+                KafkaResources.kafkaPodName(CLUSTER_NAME, 0), \"kafka\");\n+        checkZookeeperCertificates(outputCertificate);\n+\n+        List<String> kafkaPorts = new ArrayList<>(asList(\"9091\", \"9093\"));\n+        List<String> zkPorts = new ArrayList<>(asList(\"2181\", \"2888\", \"3888\"));\n \n         IntStream.rangeClosed(0, 1).forEach(podId -> {\n-            String commandForKafkaPort9091 = generateOpenSSLCommandWithKafkaCerts(KafkaResources.kafkaPodName(CLUSTER_NAME, podId), \"my-cluster-kafka-brokers\", \"9091\");\n-            String commandForKafkaPort9093 = generateOpenSSLCommandWithKafkaCerts(KafkaResources.kafkaPodName(CLUSTER_NAME, podId), \"my-cluster-kafka-brokers\", \"9093\");\n-\n-            String outputForKafkaPort9091 =\n-                    cmdKubeClient().execInPod(KafkaResources.kafkaPodName(CLUSTER_NAME, podId), \"/bin/bash\", \"-c\", commandForKafkaPort9091).out();\n-            String outputForKafkaPort9093 =\n-                    cmdKubeClient().execInPod(KafkaResources.kafkaPodName(CLUSTER_NAME, podId), \"/bin/bash\", \"-c\", commandForKafkaPort9093).out();\n-\n-            checkKafkaCertificates(outputForKafkaPort9091, outputForKafkaPort9093);\n-\n-            String commandForZookeeperPort2181 = generateOpenSSLCommandWithKafkaCerts(KafkaResources.zookeeperPodName(CLUSTER_NAME, podId), \"my-cluster-zookeeper-nodes\", \"2181\");\n-            String commandForZookeeperPort2888 = generateOpenSSLCommandWithZookeeperCerts(KafkaResources.zookeeperPodName(CLUSTER_NAME, podId), \"my-cluster-zookeeper-nodes\", \"2888\");\n-            String commandForZookeeperPort3888 = generateOpenSSLCommandWithZookeeperCerts(KafkaResources.zookeeperPodName(CLUSTER_NAME, podId), \"my-cluster-zookeeper-nodes\", \"3888\");\n-\n-            String outputForZookeeperPort2181 =\n-                    cmdKubeClient().execInPod(KafkaResources.kafkaPodName(CLUSTER_NAME, podId), \"/bin/bash\", \"-c\",\n-                            commandForZookeeperPort2181).out();\n-\n-            String outputForZookeeperPort3888 =\n-                    cmdKubeClient().execInPodContainer(KafkaResources.zookeeperPodName(CLUSTER_NAME, podId), \"tls-sidecar\",  \"/bin/bash\", \"-c\",\n-                            commandForZookeeperPort3888).out();\n-            checkZookeeperCertificates(outputForZookeeperPort2181, outputForZookeeperPort3888);\n-\n-            try {\n-                String outputForZookeeperPort2888 =\n-                        cmdKubeClient().execInPodContainer(KafkaResources.zookeeperPodName(CLUSTER_NAME, podId), \"tls-sidecar\", \"/bin/bash\", \"-c\",\n-                                commandForZookeeperPort2888).out();\n-                checkZookeeperCertificates(outputForZookeeperPort2888);\n-            } catch (KubeClusterException e) {\n-                if (e.result != null && e.result.returnCode() == 104) {\n-                    LOGGER.info(\"The connection for {} was forcibly closed because of new zookeeper leader\", KafkaResources.zookeeperPodName(CLUSTER_NAME, podId));\n-                } else {\n-                    throw new RuntimeException(e);\n+            String output;\n+\n+            LOGGER.info(\"Checking certificates for podId {}\", podId);\n+            for (String kafkaPort : kafkaPorts) {\n+                LOGGER.info(\"Check kafka certificate for port {}\", kafkaPort);\n+                output = stCertManager.openSSLCommandByResource(KafkaResources.kafkaPodName(CLUSTER_NAME, podId),\n+                        \"my-cluster-kafka-brokers\", kafkaPort, \"kafka\", NAMESPACE);\n+                checkKafkaCertificates(output);\n+            }\n+\n+            for (String zkPort : zkPorts) {\n+                try {\n+                    LOGGER.info(\"Check zookeeper certificate for port {}\", zkPort);\n+                    output = stCertManager.openSSLCommandByResource(KafkaResources.zookeeperPodName(CLUSTER_NAME, podId),\n+                            \"my-cluster-zookeeper-nodes\", zkPort, \"zookeeper\", NAMESPACE);\n+                    checkZookeeperCertificates(output);\n+                } catch (KubeClusterException e) {\n+                    if (e.result != null && e.result.returnCode() == 104) {\n+                        LOGGER.info(\"The connection for {} was forcibly closed because of new zookeeper leader\", KafkaResources.zookeeperPodName(CLUSTER_NAME, podId));\n+                    } else {\n+                        throw new RuntimeException(e);\n+                    }\n                 }\n             }\n         });\n     }\n \n-    private String generateOpenSSLCommandWithCAfile(String podName, String hostname, String port, String caFilePath) {\n-        return \"openssl s_client -connect \" + podName + \".\" + hostname + \":\" + port +\n-                \" -showcerts -CAfile \" + caFilePath +\n-                \" -verify_hostname \" + podName + \".\" + hostname + \".\" + NAMESPACE + \".svc.cluster.local\";\n-    }\n-\n-    private String generateOpenSSLCommandWithKafkaCerts(String podName, String hostname, String port) {\n-        return generateOpenSSLCommandWithCAfile(podName, hostname, port, \"/opt/kafka/cluster-ca-certs/ca.crt\") +\n-                \" -cert /opt/kafka/broker-certs/my-cluster-kafka-0.crt\" +\n-                \" -key /opt/kafka/broker-certs/my-cluster-kafka-0.key\";\n-    }\n-\n-    private String generateOpenSSLCommandWithZookeeperCerts(String podName, String hostname, String port) {\n-        return generateOpenSSLCommandWithCAfile(podName, hostname, port, \"/etc/tls-sidecar/cluster-ca-certs/ca.crt\") +\n-                \" -cert /etc/tls-sidecar/zookeeper-nodes/my-cluster-zookeeper-0.crt\" +\n-                \" -key /etc/tls-sidecar/zookeeper-nodes/my-cluster-zookeeper-0.key\";\n-    }\n-\n     private void checkKafkaCertificates(String... kafkaCertificates) {", "originalCommit": "0d785b7f6755b3f805e6a7373116b2f312c03dc4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxMDQ4Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2771#discussion_r401510482", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    \"my-cluster-kafka-brokers\", kafkaPort, \"kafka\", NAMESPACE);\n          \n          \n            \n                                    KafkaResources.brokersServiceName(CLUSTER_NAME), kafkaPort, \"kafka\", NAMESPACE);", "author": "see-quick", "createdAt": "2020-04-01T10:22:02Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/SecurityST.java", "diffHunk": "@@ -100,83 +101,56 @@\n     void testCertificates() {\n         LOGGER.info(\"Running testCertificates {}\", CLUSTER_NAME);\n         KafkaResource.kafkaEphemeral(CLUSTER_NAME, 2)\n-                .editSpec().editZookeeper().withReplicas(2).endZookeeper().endSpec().done();\n-        String commandForKafkaBootstrap = \"echo -n | openssl s_client -connect my-cluster-kafka-bootstrap:9093 -showcerts\" +\n-                \" -CAfile /opt/kafka/cluster-ca-certs/ca.crt\" +\n-                \" -verify_hostname my-cluster-kafka-bootstrap\";\n-\n-        String outputForKafkaBootstrap =\n-                cmdKubeClient().execInPod(KafkaResources.kafkaPodName(CLUSTER_NAME, 0),\n-                        \"/bin/bash\", \"-c\", commandForKafkaBootstrap).out();\n-        checkKafkaCertificates(outputForKafkaBootstrap);\n-\n-        String commandForZookeeperClient = \"echo -n | openssl s_client -connect my-cluster-zookeeper-client:2181 -showcerts\" +\n-                \" -CAfile /opt/kafka/cluster-ca-certs/ca.crt\" +\n-                \" -verify_hostname my-cluster-zookeeper-client\" +\n-                \" -cert /opt/kafka/broker-certs/my-cluster-kafka-0.crt\" +\n-                \" -key /opt/kafka/broker-certs/my-cluster-kafka-0.key\";\n-        String outputForZookeeperClient =\n-                cmdKubeClient().execInPod(KafkaResources.kafkaPodName(CLUSTER_NAME, 0),\n-                        \"/bin/bash\", \"-c\", commandForZookeeperClient).out();\n-        checkZookeeperCertificates(outputForZookeeperClient);\n+                .editSpec()\n+                    .editZookeeper()\n+                        .withReplicas(2)\n+                    .endZookeeper()\n+                .endSpec()\n+                .done();\n+\n+        SystemtestCertManager stCertManager = new SystemtestCertManager();\n+\n+        LOGGER.info(\"Check Kafka bootstrap certificate\");\n+        String outputCertificate = stCertManager.openSSLCommandByResource(\"my-cluster-kafka-bootstrap:9093\", \"my-cluster-kafka-bootstrap\",\n+                KafkaResources.kafkaPodName(CLUSTER_NAME, 0), \"kafka\", false);\n+        checkKafkaCertificates(outputCertificate);\n+\n+        LOGGER.info(\"Check zookeeper client certificate\");\n+        outputCertificate = stCertManager.openSSLCommandByResource(\"my-cluster-zookeeper-client:2181\", \"my-cluster-zookeeper-client\",\n+                KafkaResources.kafkaPodName(CLUSTER_NAME, 0), \"kafka\");\n+        checkZookeeperCertificates(outputCertificate);\n+\n+        List<String> kafkaPorts = new ArrayList<>(asList(\"9091\", \"9093\"));\n+        List<String> zkPorts = new ArrayList<>(asList(\"2181\", \"2888\", \"3888\"));\n \n         IntStream.rangeClosed(0, 1).forEach(podId -> {\n-            String commandForKafkaPort9091 = generateOpenSSLCommandWithKafkaCerts(KafkaResources.kafkaPodName(CLUSTER_NAME, podId), \"my-cluster-kafka-brokers\", \"9091\");\n-            String commandForKafkaPort9093 = generateOpenSSLCommandWithKafkaCerts(KafkaResources.kafkaPodName(CLUSTER_NAME, podId), \"my-cluster-kafka-brokers\", \"9093\");\n-\n-            String outputForKafkaPort9091 =\n-                    cmdKubeClient().execInPod(KafkaResources.kafkaPodName(CLUSTER_NAME, podId), \"/bin/bash\", \"-c\", commandForKafkaPort9091).out();\n-            String outputForKafkaPort9093 =\n-                    cmdKubeClient().execInPod(KafkaResources.kafkaPodName(CLUSTER_NAME, podId), \"/bin/bash\", \"-c\", commandForKafkaPort9093).out();\n-\n-            checkKafkaCertificates(outputForKafkaPort9091, outputForKafkaPort9093);\n-\n-            String commandForZookeeperPort2181 = generateOpenSSLCommandWithKafkaCerts(KafkaResources.zookeeperPodName(CLUSTER_NAME, podId), \"my-cluster-zookeeper-nodes\", \"2181\");\n-            String commandForZookeeperPort2888 = generateOpenSSLCommandWithZookeeperCerts(KafkaResources.zookeeperPodName(CLUSTER_NAME, podId), \"my-cluster-zookeeper-nodes\", \"2888\");\n-            String commandForZookeeperPort3888 = generateOpenSSLCommandWithZookeeperCerts(KafkaResources.zookeeperPodName(CLUSTER_NAME, podId), \"my-cluster-zookeeper-nodes\", \"3888\");\n-\n-            String outputForZookeeperPort2181 =\n-                    cmdKubeClient().execInPod(KafkaResources.kafkaPodName(CLUSTER_NAME, podId), \"/bin/bash\", \"-c\",\n-                            commandForZookeeperPort2181).out();\n-\n-            String outputForZookeeperPort3888 =\n-                    cmdKubeClient().execInPodContainer(KafkaResources.zookeeperPodName(CLUSTER_NAME, podId), \"tls-sidecar\",  \"/bin/bash\", \"-c\",\n-                            commandForZookeeperPort3888).out();\n-            checkZookeeperCertificates(outputForZookeeperPort2181, outputForZookeeperPort3888);\n-\n-            try {\n-                String outputForZookeeperPort2888 =\n-                        cmdKubeClient().execInPodContainer(KafkaResources.zookeeperPodName(CLUSTER_NAME, podId), \"tls-sidecar\", \"/bin/bash\", \"-c\",\n-                                commandForZookeeperPort2888).out();\n-                checkZookeeperCertificates(outputForZookeeperPort2888);\n-            } catch (KubeClusterException e) {\n-                if (e.result != null && e.result.returnCode() == 104) {\n-                    LOGGER.info(\"The connection for {} was forcibly closed because of new zookeeper leader\", KafkaResources.zookeeperPodName(CLUSTER_NAME, podId));\n-                } else {\n-                    throw new RuntimeException(e);\n+            String output;\n+\n+            LOGGER.info(\"Checking certificates for podId {}\", podId);\n+            for (String kafkaPort : kafkaPorts) {\n+                LOGGER.info(\"Check kafka certificate for port {}\", kafkaPort);\n+                output = stCertManager.openSSLCommandByResource(KafkaResources.kafkaPodName(CLUSTER_NAME, podId),\n+                        \"my-cluster-kafka-brokers\", kafkaPort, \"kafka\", NAMESPACE);", "originalCommit": "0d785b7f6755b3f805e6a7373116b2f312c03dc4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyODc4Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2771#discussion_r401528783", "bodyText": "changed everywhere", "author": "im-konge", "createdAt": "2020-04-01T10:56:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxMDQ4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxMTg1Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2771#discussion_r401511853", "bodyText": "Please keep convention with camel-case so here...generateOpenSslCommand. Same applies on others.", "author": "see-quick", "createdAt": "2020-04-01T10:24:28Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/security/SystemtestCertManager.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.security;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static java.util.Arrays.asList;\n+\n+public class SystemtestCertManager {\n+\n+    private static final String KAFKA_CERT_FILE_PATH = \"/opt/kafka/broker-certs/\";\n+    private static final String ZK_CERT_FILE_PATH = \"/etc/tls-sidecar/zookeeper-nodes/\";\n+    private static final String KAFKA_CA_FILE_PATH = \"/opt/kafka/cluster-ca-certs/ca.crt\";\n+    private static final String ZK_CA_FILE_PATH = \"/etc/tls-sidecar/cluster-ca-certs/ca.crt\";\n+\n+    public SystemtestCertManager() {}\n+\n+    private List<String> generateOpenSSLCommand(String server, String caFilePath, String hostname) {", "originalCommit": "0d785b7f6755b3f805e6a7373116b2f312c03dc4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxNDUwMQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2771#discussion_r401514501", "bodyText": "What do you mean by custom resource? Custom resource Kafka contains also Zookeeper so I would suggest renaming it to component or something else...What do you think @Frawless ?", "author": "see-quick", "createdAt": "2020-04-01T10:29:19Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/security/SystemtestCertManager.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.security;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static java.util.Arrays.asList;\n+\n+public class SystemtestCertManager {\n+\n+    private static final String KAFKA_CERT_FILE_PATH = \"/opt/kafka/broker-certs/\";\n+    private static final String ZK_CERT_FILE_PATH = \"/etc/tls-sidecar/zookeeper-nodes/\";\n+    private static final String KAFKA_CA_FILE_PATH = \"/opt/kafka/cluster-ca-certs/ca.crt\";\n+    private static final String ZK_CA_FILE_PATH = \"/etc/tls-sidecar/cluster-ca-certs/ca.crt\";\n+\n+    public SystemtestCertManager() {}\n+\n+    private List<String> generateOpenSSLCommand(String server, String caFilePath, String hostname) {\n+        return new ArrayList<>(asList(\"openssl\",\n+                \"s_client\",\n+                \"-connect\", server,\n+                \"-showcerts\",\n+                \"-CAfile\", caFilePath,\n+                \"-verify_hostname\", hostname\n+        ));\n+    }\n+\n+    public String openSSLCommandByResource(String podName, String hostname, String port, String customResource, String namespace) {\n+        return openSSLCommandByResource(podName + \".\" + hostname + \":\" + port,\n+                podName + \".\" + hostname + \".\" + namespace + \".svc.cluster.local\", podName, customResource, true);\n+    }\n+\n+    public String openSSLCommandByResource(String server, String hostname, String podName, String customResource) {\n+        return openSSLCommandByResource(server, hostname, podName, customResource, true);\n+    }\n+\n+    public String openSSLCommandByResource(String server, String hostname, String podName, String customResource, boolean withCertAndKey) {", "originalCommit": "0d785b7f6755b3f805e6a7373116b2f312c03dc4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxNTYyNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2771#discussion_r401515627", "bodyText": "How I said, naming is not my strong side, so component will be really better..", "author": "im-konge", "createdAt": "2020-04-01T10:31:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxNDUwMQ=="}], "type": "inlineReview"}, {"oid": "7f2dd04818851ea702cf76aae784b7036a282a3e", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/7f2dd04818851ea702cf76aae784b7036a282a3e", "message": "fixup! remake testCertificates() test and update systemtest cert manager\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-04-01T12:49:19Z", "type": "forcePushed"}, {"oid": "c3b0433c0a4a6d2a6ff687a00b8f85dc7560abe4", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c3b0433c0a4a6d2a6ff687a00b8f85dc7560abe4", "message": "fixup! remake testCertificates() test and update systemtest cert manager\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-04-01T18:43:24Z", "type": "commit"}, {"oid": "c3b0433c0a4a6d2a6ff687a00b8f85dc7560abe4", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c3b0433c0a4a6d2a6ff687a00b8f85dc7560abe4", "message": "fixup! remake testCertificates() test and update systemtest cert manager\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-04-01T18:43:24Z", "type": "forcePushed"}]}