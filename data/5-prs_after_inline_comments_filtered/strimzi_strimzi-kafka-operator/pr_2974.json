{"pr_number": 2974, "pr_title": "New configuration options for Strimzi OAuth 0.5.0 features", "pr_createdAt": "2020-05-07T08:46:01Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM1MTkzNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r421351937", "bodyText": "Why is this whole fallback structure needed? Maybe we should explain a bit more in the description when to use it?", "author": "scholzj", "createdAt": "2020-05-07T09:03:36Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/listener/KafkaListenerAuthenticationOAuth.java", "diffHunk": "@@ -141,6 +168,26 @@ public void setUserNameClaim(String userNameClaim) {\n         this.userNameClaim = userNameClaim;\n     }\n \n+    @Description(\"The fallback username claim to be used for user id if the claim specified by `userNameClaim` is not present. \" +", "originalCommit": "e99f7bf9c8800eecc332e7db8cad432573c00572", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM2OTY0Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r421369642", "bodyText": "This is to support some fringe cases - it's hard to tell how commonly it may be used in the end. There are authorization server implementations that set preferred_username or similar into JWT token only if password authentication was used to obtain the token from token endpoint (that's using username and password). If client_credentials authentication  is used (that's using clientId and clientSecret), they set client_id or similar into JWT token. If we only have userNameClaim we would have to set it to either preferred_username or to client_id. In the first case none of the clients would have a user id in the second none of the users would have a user id. Without user id we can say that the authorization server trusts this user, but on Kafka broker we don't have an identifier what could serve for ACLs or  Keycloak authorization.", "author": "mstruk", "createdAt": "2020-05-07T09:31:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM1MTkzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM4MDAyMg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r421380022", "bodyText": "Makes sense. Thanks for the explanation.", "author": "scholzj", "createdAt": "2020-05-07T09:48:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM1MTkzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE1OTU4OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423159588", "bodyText": "Added more explanation to asciidoc documentation.", "author": "mstruk", "createdAt": "2020-05-11T16:20:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM1MTkzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMTQ4Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423501482", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Description(\"The fallback username claim to be used for user id if the claim specified by `userNameClaim` is not present. \" +\n          \n          \n            \n                @Description(\"The fallback username claim to be used for the user id if the claim specified by `userNameClaim` is not present. \" +", "author": "PaulRMellor", "createdAt": "2020-05-12T06:54:02Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/listener/KafkaListenerAuthenticationOAuth.java", "diffHunk": "@@ -141,6 +157,28 @@ public void setUserNameClaim(String userNameClaim) {\n         this.userNameClaim = userNameClaim;\n     }\n \n+    @Description(\"The fallback username claim to be used for user id if the claim specified by `userNameClaim` is not present. \" +", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMTg2MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423501860", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"Useful when `client_credentials` authentication only results in client id being provided in another claim. \" +\n          \n          \n            \n                        \"Useful when `client_credentials` authentication only results in the client id being provided in another claim. \" +", "author": "PaulRMellor", "createdAt": "2020-05-12T06:54:51Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/listener/KafkaListenerAuthenticationOAuth.java", "diffHunk": "@@ -141,6 +157,28 @@ public void setUserNameClaim(String userNameClaim) {\n         this.userNameClaim = userNameClaim;\n     }\n \n+    @Description(\"The fallback username claim to be used for user id if the claim specified by `userNameClaim` is not present. \" +\n+            \"Useful when `client_credentials` authentication only results in client id being provided in another claim. \" +", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMzQwNQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423503405", "bodyText": "Not sure of the possible outcomes here: 'only results in the client if being provided in another claim'", "author": "PaulRMellor", "createdAt": "2020-05-12T06:57:56Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/listener/KafkaListenerAuthenticationOAuth.java", "diffHunk": "@@ -141,6 +157,28 @@ public void setUserNameClaim(String userNameClaim) {\n         this.userNameClaim = userNameClaim;\n     }\n \n+    @Description(\"The fallback username claim to be used for user id if the claim specified by `userNameClaim` is not present. \" +\n+            \"Useful when `client_credentials` authentication only results in client id being provided in another claim. \" +", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc3NjI3NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423776275", "bodyText": "Maybe: ''Useful when client_credentials authentication provides the client id in another claim, but provides no suggested username.\"", "author": "mstruk", "createdAt": "2020-05-12T14:24:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMzQwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQxNTQyOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r424415429", "bodyText": "Maybe: ''Useful when client_credentials authentication provides the client id in another claim, but provides no suggested username.\"\n\n@PaulRMellor WDYT about this suggestion?", "author": "mstruk", "createdAt": "2020-05-13T12:57:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMzQwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAzNDMyNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r431034327", "bodyText": "@PaulRMellor test", "author": "PaulRMellor", "createdAt": "2020-05-27T11:03:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMzQwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyMzkyNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423523927", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"Useful to be able to map usernames and client ids into the same user id space, preventing name collisions.\")\n          \n          \n            \n                        \"Mapping usernames and client ids into the same user id space is useful in preventing name collisions.\")", "author": "PaulRMellor", "createdAt": "2020-05-12T07:37:06Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/listener/KafkaListenerAuthenticationOAuth.java", "diffHunk": "@@ -141,6 +157,28 @@ public void setUserNameClaim(String userNameClaim) {\n         this.userNameClaim = userNameClaim;\n     }\n \n+    @Description(\"The fallback username claim to be used for user id if the claim specified by `userNameClaim` is not present. \" +\n+            \"Useful when `client_credentials` authentication only results in client id being provided in another claim. \" +\n+            \"It only takes effect if `userNameClaim` is set.\")\n+    public String getFallbackUserNameClaim() {\n+        return fallbackUserNameClaim;\n+    }\n+\n+    public void setFallbackUserNameClaim(String fallbackUserNameClaim) {\n+        this.fallbackUserNameClaim = fallbackUserNameClaim;\n+    }\n+\n+    @Description(\"The prefix to use with the value of `fallbackUserNameClaim` to construct the user id. \" +\n+            \"It only takes effect if `fallbackUserNameClaim` is set, and the value is present for the claim. \" +\n+            \"Useful to be able to map usernames and client ids into the same user id space, preventing name collisions.\")", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNDI4OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423524288", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Description(\"Configure whether the access token type check should be performed or not. This should be set to `false` \" +\n          \n          \n            \n                @Description(\"Configure whether the access token type check is performed or not. This should be set to `false` \" +", "author": "PaulRMellor", "createdAt": "2020-05-12T07:37:50Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/listener/KafkaListenerAuthenticationOAuth.java", "diffHunk": "@@ -141,6 +157,28 @@ public void setUserNameClaim(String userNameClaim) {\n         this.userNameClaim = userNameClaim;\n     }\n \n+    @Description(\"The fallback username claim to be used for user id if the claim specified by `userNameClaim` is not present. \" +\n+            \"Useful when `client_credentials` authentication only results in client id being provided in another claim. \" +\n+            \"It only takes effect if `userNameClaim` is set.\")\n+    public String getFallbackUserNameClaim() {\n+        return fallbackUserNameClaim;\n+    }\n+\n+    public void setFallbackUserNameClaim(String fallbackUserNameClaim) {\n+        this.fallbackUserNameClaim = fallbackUserNameClaim;\n+    }\n+\n+    @Description(\"The prefix to use with the value of `fallbackUserNameClaim` to construct the user id. \" +\n+            \"It only takes effect if `fallbackUserNameClaim` is set, and the value is present for the claim. \" +\n+            \"Useful to be able to map usernames and client ids into the same user id space, preventing name collisions.\")\n+    public String getFallbackUserNamePrefix() {\n+        return fallbackUserNamePrefix;\n+    }\n+\n+    public void setFallbackUserNamePrefix(String fallbackUserNamePrefix) {\n+        this.fallbackUserNamePrefix = fallbackUserNamePrefix;\n+    }\n+\n     @Description(\"Configure whether the access token type check should be performed or not. This should be set to `false` \" +", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNDU5MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423524590", "bodyText": "Set to 'false' in any situation?", "author": "PaulRMellor", "createdAt": "2020-05-12T07:38:22Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/listener/KafkaListenerAuthenticationOAuth.java", "diffHunk": "@@ -141,6 +157,28 @@ public void setUserNameClaim(String userNameClaim) {\n         this.userNameClaim = userNameClaim;\n     }\n \n+    @Description(\"The fallback username claim to be used for user id if the claim specified by `userNameClaim` is not present. \" +\n+            \"Useful when `client_credentials` authentication only results in client id being provided in another claim. \" +\n+            \"It only takes effect if `userNameClaim` is set.\")\n+    public String getFallbackUserNameClaim() {\n+        return fallbackUserNameClaim;\n+    }\n+\n+    public void setFallbackUserNameClaim(String fallbackUserNameClaim) {\n+        this.fallbackUserNameClaim = fallbackUserNameClaim;\n+    }\n+\n+    @Description(\"The prefix to use with the value of `fallbackUserNameClaim` to construct the user id. \" +\n+            \"It only takes effect if `fallbackUserNameClaim` is set, and the value is present for the claim. \" +\n+            \"Useful to be able to map usernames and client ids into the same user id space, preventing name collisions.\")\n+    public String getFallbackUserNamePrefix() {\n+        return fallbackUserNamePrefix;\n+    }\n+\n+    public void setFallbackUserNamePrefix(String fallbackUserNamePrefix) {\n+        this.fallbackUserNamePrefix = fallbackUserNamePrefix;\n+    }\n+\n     @Description(\"Configure whether the access token type check should be performed or not. This should be set to `false` \" +", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc3OTI1Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423779252", "bodyText": "If this was the whole sentence the idea would be that by default it is true, and if you're setting it, you probably want to set it to false. But the sentence continues with 'if the authorization server does not include 'typ'' - so that's when it should be set to 'false'.", "author": "mstruk", "createdAt": "2020-05-12T14:28:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNDU5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAzNzY1Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r431037653", "bodyText": "@PaulRMellor Thanks", "author": "PaulRMellor", "createdAt": "2020-05-27T11:09:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNDU5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNTIyMg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423525222", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Description(\"Valid value for `token_type` attribute returned by Introspection Endpoint. No default value, and not checked by default.\")\n          \n          \n            \n                @Description(\"Valid value for the `token_type` attribute returned by the Introspection Endpoint. No default value, and not checked by default.\")", "author": "PaulRMellor", "createdAt": "2020-05-12T07:39:37Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/listener/KafkaListenerAuthenticationOAuth.java", "diffHunk": "@@ -152,6 +190,16 @@ public void setCheckAccessTokenType(boolean checkAccessTokenType) {\n         this.checkAccessTokenType = checkAccessTokenType;\n     }\n \n+    @Description(\"Valid value for `token_type` attribute returned by Introspection Endpoint. No default value, and not checked by default.\")", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNTg4MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423525880", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Description(\"Configure whether the access token should be treated as JWT. This should be set to `false` if \" +\n          \n          \n            \n                @Description(\"Configure whether the access token is treated as JWT. This must be set to `false` if \" +", "author": "PaulRMellor", "createdAt": "2020-05-12T07:40:42Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/listener/KafkaListenerAuthenticationOAuth.java", "diffHunk": "@@ -152,6 +190,16 @@ public void setCheckAccessTokenType(boolean checkAccessTokenType) {\n         this.checkAccessTokenType = checkAccessTokenType;\n     }\n \n+    @Description(\"Valid value for `token_type` attribute returned by Introspection Endpoint. No default value, and not checked by default.\")\n+    @JsonInclude(JsonInclude.Include.NON_DEFAULT)\n+    public String getValidTokenType() {\n+        return validTokenType;\n+    }\n+\n+    public void setValidTokenType(String validTokenType) {\n+        this.validTokenType = validTokenType;\n+    }\n+\n     @Description(\"Configure whether the access token should be treated as JWT. This should be set to `false` if \" +", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNjE0Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423526143", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Description(\"URI of the User Info Endpoint to use as a fallback to obtaining user id when Introspection Endpoint \" +\n          \n          \n            \n                @Description(\"URI of the User Info Endpoint to use as a fallback to obtaining the user id when the Introspection Endpoint \" +", "author": "PaulRMellor", "createdAt": "2020-05-12T07:41:09Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/listener/KafkaListenerAuthenticationOAuth.java", "diffHunk": "@@ -194,4 +242,15 @@ public boolean isEnableECDSA() {\n     public void setEnableECDSA(boolean enableECDSA) {\n         this.enableECDSA = enableECDSA;\n     }\n+\n+    @Description(\"URI of the User Info Endpoint to use as a fallback to obtaining user id when Introspection Endpoint \" +", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNjMyMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423526320", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"does not return information that could be used for user id. \")\n          \n          \n            \n                        \"does not return information that can be used for the user id. \")", "author": "PaulRMellor", "createdAt": "2020-05-12T07:41:27Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/listener/KafkaListenerAuthenticationOAuth.java", "diffHunk": "@@ -194,4 +242,15 @@ public boolean isEnableECDSA() {\n     public void setEnableECDSA(boolean enableECDSA) {\n         this.enableECDSA = enableECDSA;\n     }\n+\n+    @Description(\"URI of the User Info Endpoint to use as a fallback to obtaining user id when Introspection Endpoint \" +\n+            \"does not return information that could be used for user id. \")", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNzEzNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423527137", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new InvalidResourceException(listener + \": User Info Endpoint URI can only be used if Introspection Endpoint URI is also configured\");\n          \n          \n            \n                        throw new InvalidResourceException(listener + \": User Info Endpoint URI can only be used if the Introspection Endpoint URI is also configured\");", "author": "PaulRMellor", "createdAt": "2020-05-12T07:42:56Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaCluster.java", "diffHunk": "@@ -1864,16 +1864,21 @@ private static void validateOauth(KafkaListenerAuthenticationOAuth oAuth, String\n             throw new InvalidResourceException(listener + \": Introspection endpoint URI or JWKS endpoint URI has to be specified\");\n         }\n \n-        if (oAuth.getValidIssuerUri() == null) {\n-            log.error(\"{}: Valid Issuer URI has to be specified\", listener);\n-            throw new InvalidResourceException(listener + \": Valid Issuer URI has to be specified\");\n+        if (oAuth.getValidIssuerUri() == null && oAuth.isCheckIssuer()) {\n+            log.error(\"{}: Valid Issuer URI has to be specified or 'checkIssuer' set to false\", listener);\n+            throw new InvalidResourceException(listener + \": Valid Issuer URI has to be specified or 'checkIssuer' set to false\");\n         }\n \n         if (oAuth.getIntrospectionEndpointUri() != null && (oAuth.getClientId() == null || oAuth.getClientSecret() == null)) {\n             log.error(\"{}: Introspection Endpoint URI needs to be configured together with clientId and clientSecret\", listener);\n             throw new InvalidResourceException(listener + \": Introspection Endpoint URI needs to be configured together with clientId and clientSecret\");\n         }\n \n+        if (oAuth.getUserInfoEndpointUri() != null && oAuth.getIntrospectionEndpointUri() == null) {\n+            log.error(\"{}: User Info Endpoint URI can only be used if Introspection Endpoint URI is also configured\", listener);\n+            throw new InvalidResourceException(listener + \": User Info Endpoint URI can only be used if Introspection Endpoint URI is also configured\");", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "04fe0d197f306c84e8f3abe2de79321a34bbeee6", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/04fe0d197f306c84e8f3abe2de79321a34bbeee6", "message": "Apply suggestions from code review\n\nCo-authored-by: PaulRMellor <47596553+PaulRMellor@users.noreply.github.com>\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-12T14:44:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0MTYzMQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r424241631", "bodyText": "Can you explain in the description the effect of not defining this, since there's \"no default\".", "author": "tombentley", "createdAt": "2020-05-13T07:53:03Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/authentication/KafkaClientAuthenticationOAuth.java", "diffHunk": "@@ -56,6 +57,16 @@ public void setClientId(String clientId) {\n         this.clientId = clientId;\n     }\n \n+    @Description(\"OAuth scope to use when authenticating against the authorization server. No default value.\")", "originalCommit": "5f8268a5d4ee14609fbfc6dc6b8e9a85839775bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MTc1Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r424681756", "bodyText": "I added some more explanation.", "author": "mstruk", "createdAt": "2020-05-13T19:32:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0MTYzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0MjQyNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r424242427", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"Useful when `client_credentials` authentication only results in the client id being provided in another claim. \" +\n          \n          \n            \n                        \"This is useful when `client_credentials` authentication only results in the client id being provided in another claim. \" +", "author": "tombentley", "createdAt": "2020-05-13T07:54:24Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/listener/KafkaListenerAuthenticationOAuth.java", "diffHunk": "@@ -141,7 +157,29 @@ public void setUserNameClaim(String userNameClaim) {\n         this.userNameClaim = userNameClaim;\n     }\n \n-    @Description(\"Configure whether the access token type check should be performed or not. This should be set to `false` \" +\n+    @Description(\"The fallback username claim to be used for the user id if the claim specified by `userNameClaim` is not present. \" +\n+            \"Useful when `client_credentials` authentication only results in the client id being provided in another claim. \" +", "originalCommit": "5f8268a5d4ee14609fbfc6dc6b8e9a85839775bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0Mjg3Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r424242876", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"It only takes effect if `fallbackUserNameClaim` is set, and the value is present for the claim. \" +\n          \n          \n            \n                        \"This only takes effect if `fallbackUserNameClaim` is true, and the value is present for the claim. \" +", "author": "tombentley", "createdAt": "2020-05-13T07:55:10Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/listener/KafkaListenerAuthenticationOAuth.java", "diffHunk": "@@ -141,7 +157,29 @@ public void setUserNameClaim(String userNameClaim) {\n         this.userNameClaim = userNameClaim;\n     }\n \n-    @Description(\"Configure whether the access token type check should be performed or not. This should be set to `false` \" +\n+    @Description(\"The fallback username claim to be used for the user id if the claim specified by `userNameClaim` is not present. \" +\n+            \"Useful when `client_credentials` authentication only results in the client id being provided in another claim. \" +\n+            \"It only takes effect if `userNameClaim` is set.\")\n+    public String getFallbackUserNameClaim() {\n+        return fallbackUserNameClaim;\n+    }\n+\n+    public void setFallbackUserNameClaim(String fallbackUserNameClaim) {\n+        this.fallbackUserNameClaim = fallbackUserNameClaim;\n+    }\n+\n+    @Description(\"The prefix to use with the value of `fallbackUserNameClaim` to construct the user id. \" +\n+            \"It only takes effect if `fallbackUserNameClaim` is set, and the value is present for the claim. \" +", "originalCommit": "5f8268a5d4ee14609fbfc6dc6b8e9a85839775bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI1MjA5Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r424252093", "bodyText": "There's no need for the @SuppressWarnings if you factor out\n    static void addOption(List<String> options, String option, String value) {\n        if (value != null) options.add(String.format(\"%s=\\\"%s\\\"\", option, value));\n    }\nWhich works for all the String-valued options. For the boolean ones, is there anything to be gained by only adding the option when the value is true/false, or would it work as well if we always added the option? If the latter then the same method should work for those too.", "author": "tombentley", "createdAt": "2020-05-13T08:10:45Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaBrokerConfigurationBuilder.java", "diffHunk": "@@ -370,19 +370,25 @@ private String getSecurityProtocol(boolean tls, boolean sasl)   {\n      * @param oauth     OAuth type authentication object\n      * @return  Returns the builder instance\n      */\n+    @SuppressWarnings({\"checkstyle:CyclomaticComplexity\", \"checkstyle:NPathComplexity\"})\n     /*test*/ static List<String> getOAuthOptions(KafkaListenerAuthenticationOAuth oauth)  {\n         List<String> options = new ArrayList<>(5);\n \n         if (oauth.getClientId() != null) options.add(String.format(\"%s=\\\"%s\\\"\", ServerConfig.OAUTH_CLIENT_ID, oauth.getClientId()));\n         if (oauth.getValidIssuerUri() != null) options.add(String.format(\"%s=\\\"%s\\\"\", ServerConfig.OAUTH_VALID_ISSUER_URI, oauth.getValidIssuerUri()));\n+        if (!oauth.isCheckIssuer()) options.add(String.format(\"%s=\\\"%s\\\"\", ServerConfig.OAUTH_CHECK_ISSUER, false));\n         if (oauth.getJwksEndpointUri() != null) options.add(String.format(\"%s=\\\"%s\\\"\", ServerConfig.OAUTH_JWKS_ENDPOINT_URI, oauth.getJwksEndpointUri()));\n         if (oauth.getJwksRefreshSeconds() != null && oauth.getJwksRefreshSeconds() > 0) options.add(String.format(\"%s=\\\"%d\\\"\", ServerConfig.OAUTH_JWKS_REFRESH_SECONDS, oauth.getJwksRefreshSeconds()));\n         if (oauth.getJwksRefreshSeconds() != null && oauth.getJwksExpirySeconds() > 0) options.add(String.format(\"%s=\\\"%d\\\"\", ServerConfig.OAUTH_JWKS_EXPIRY_SECONDS, oauth.getJwksExpirySeconds()));\n         if (oauth.isEnableECDSA()) options.add(String.format(\"%s=\\\"%s\\\"\", ServerConfig.OAUTH_CRYPTO_PROVIDER_BOUNCYCASTLE, true));\n         if (oauth.getIntrospectionEndpointUri() != null) options.add(String.format(\"%s=\\\"%s\\\"\", ServerConfig.OAUTH_INTROSPECTION_ENDPOINT_URI, oauth.getIntrospectionEndpointUri()));\n+        if (oauth.getUserInfoEndpointUri() != null) options.add(String.format(\"%s=\\\"%s\\\"\", ServerConfig.OAUTH_USERINFO_ENDPOINT_URI, oauth.getUserInfoEndpointUri()));\n         if (oauth.getUserNameClaim() != null) options.add(String.format(\"%s=\\\"%s\\\"\", ServerConfig.OAUTH_USERNAME_CLAIM, oauth.getUserNameClaim()));\n+        if (oauth.getFallbackUserNameClaim() != null) options.add(String.format(\"%s=\\\"%s\\\"\", ServerConfig.OAUTH_FALLBACK_USERNAME_CLAIM, oauth.getFallbackUserNameClaim()));\n+        if (oauth.getFallbackUserNamePrefix() != null) options.add(String.format(\"%s=\\\"%s\\\"\", ServerConfig.OAUTH_FALLBACK_USERNAME_PREFIX, oauth.getFallbackUserNamePrefix()));\n         if (!oauth.isAccessTokenIsJwt()) options.add(String.format(\"%s=\\\"%s\\\"\", ServerConfig.OAUTH_ACCESS_TOKEN_IS_JWT, false));\n         if (!oauth.isCheckAccessTokenType()) options.add(String.format(\"%s=\\\"%s\\\"\", ServerConfig.OAUTH_CHECK_ACCESS_TOKEN_TYPE, false));\n+        if (oauth.getValidTokenType() != null) options.add(String.format(\"%s=\\\"%s\\\"\", ServerConfig.OAUTH_VALID_TOKEN_TYPE, oauth.getValidTokenType()));\n         if (oauth.isDisableTlsHostnameVerification()) options.add(String.format(\"%s=\\\"%s\\\"\", ServerConfig.OAUTH_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM, \"\"));", "originalCommit": "5f8268a5d4ee14609fbfc6dc6b8e9a85839775bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0MjQyMQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r424442421", "bodyText": "Nice solution, I'll give it a try.", "author": "mstruk", "createdAt": "2020-05-13T13:35:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI1MjA5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MTkxNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r424681917", "bodyText": "Looks like it works.", "author": "mstruk", "createdAt": "2020-05-13T19:32:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI1MjA5Mw=="}], "type": "inlineReview"}, {"oid": "f2475722fffd8e9319188f6885d78f2d88ec6a4d", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/f2475722fffd8e9319188f6885d78f2d88ec6a4d", "message": "More proper fix for NPathComplexity warning\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-13T18:27:03Z", "type": "forcePushed"}, {"oid": "984496049653b4dc821d0a17cb9a4bc084cb0efa", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/984496049653b4dc821d0a17cb9a4bc084cb0efa", "message": "More proper fix for NPathComplexity warning\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-13T19:26:30Z", "type": "forcePushed"}, {"oid": "202d86113d0805fa221deb9d3a75b38905e39249", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/202d86113d0805fa221deb9d3a75b38905e39249", "message": "More proper fix for NPathComplexity warning\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-13T19:30:23Z", "type": "forcePushed"}, {"oid": "d83571fc7638f808321de7847ecd6974e7c58de7", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d83571fc7638f808321de7847ecd6974e7c58de7", "message": "Add additional config options available in Strimzi Kafka OAuth 0.5.0\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:42Z", "type": "commit"}, {"oid": "06da8af82cfc075a5ba7ca1452a0725afbcd5365", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/06da8af82cfc075a5ba7ca1452a0725afbcd5365", "message": "Add Helm charts\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:48Z", "type": "commit"}, {"oid": "4b6c2db6293f73084292a7393337a884a1b0a716", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/4b6c2db6293f73084292a7393337a884a1b0a716", "message": "Relax the oauth config constraints for some options\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:48Z", "type": "commit"}, {"oid": "1576bddda3fe3bb05d3ab6a0fb85982043e8d3bc", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/1576bddda3fe3bb05d3ab6a0fb85982043e8d3bc", "message": "Add staging repo for strimzi-kafka-oauth 0.5.0\n\nTODO: Remove this before merging the PR\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:48Z", "type": "commit"}, {"oid": "29a7d5988c4aa9270ecc680a50ff4c6441795611", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/29a7d5988c4aa9270ecc680a50ff4c6441795611", "message": "Update staging repo for strimzi-kafka-oauth 0.5.0 (RC2)\n\nTODO: Remove this before merging the PR\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:48Z", "type": "commit"}, {"oid": "981a29dbcee5b0841cc21571d696d94bd36ab74a", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/981a29dbcee5b0841cc21571d696d94bd36ab74a", "message": "Systemtests failures\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:48Z", "type": "commit"}, {"oid": "fd5e8f1acca9aed0c7e33fdc1597c7c8664ab19f", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/fd5e8f1acca9aed0c7e33fdc1597c7c8664ab19f", "message": "Remove scope from listener config, and improve CRD docs.\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:49Z", "type": "commit"}, {"oid": "3dedcedc72213d7a5ca7eb9bd9ea50613e10c3be", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3dedcedc72213d7a5ca7eb9bd9ea50613e10c3be", "message": "Fix error found by spotbugs\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:49Z", "type": "commit"}, {"oid": "bc6aa3526c1fb4f2a28b6b73f58c7a75ce006ac8", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/bc6aa3526c1fb4f2a28b6b73f58c7a75ce006ac8", "message": "Some documentation\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:49Z", "type": "commit"}, {"oid": "2910a812f2eecc1abdc7f42efdaf700d1feeb08c", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/2910a812f2eecc1abdc7f42efdaf700d1feeb08c", "message": "Remove strimzi-kafka-oauth-0.5.0 staging repo\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:49Z", "type": "commit"}, {"oid": "1adec81ad855afb4ceeb289caf719e4a5d2dcbcd", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/1adec81ad855afb4ceeb289caf719e4a5d2dcbcd", "message": "Fix documentation\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:49Z", "type": "commit"}, {"oid": "ddcc23504026eee06da9f2b1202b06866ff0e7d2", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ddcc23504026eee06da9f2b1202b06866ff0e7d2", "message": "Add @SuppressWarnings rather than use suppressions.xml\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:49Z", "type": "commit"}, {"oid": "054ca8a3fea8bc9617e7bc81c96c9d947c4a4bb1", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/054ca8a3fea8bc9617e7bc81c96c9d947c4a4bb1", "message": "Apply suggestions from code review\n\nCo-authored-by: PaulRMellor <47596553+PaulRMellor@users.noreply.github.com>\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:49Z", "type": "commit"}, {"oid": "493c367dcab5a0eb4b0e97fb986cd1fe8181b1ef", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/493c367dcab5a0eb4b0e97fb986cd1fe8181b1ef", "message": "Documentation fixes\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:49Z", "type": "commit"}, {"oid": "9e248f68cbc29d0af52d4c5ecc362269e2a6257e", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/9e248f68cbc29d0af52d4c5ecc362269e2a6257e", "message": "Documentation fixes\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:49Z", "type": "commit"}, {"oid": "295df105cba60f01b7d4fa777f3487bd061460cc", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/295df105cba60f01b7d4fa777f3487bd061460cc", "message": "Apply suggestions from code review\n\nCo-authored-by: Tom Bentley <tombentley@users.noreply.github.com>\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:49Z", "type": "commit"}, {"oid": "99c9038d68765f602d56e514ef9ba131eddc6601", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/99c9038d68765f602d56e514ef9ba131eddc6601", "message": "Documentation fixes\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:49Z", "type": "commit"}, {"oid": "9b74c2591ab98f29399e7497340be31438b6d8bf", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/9b74c2591ab98f29399e7497340be31438b6d8bf", "message": "More proper fix for NPathComplexity warning\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:49Z", "type": "commit"}, {"oid": "00b10806e988a0f43b3b215f8fd0a4a340eb8126", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/00b10806e988a0f43b3b215f8fd0a4a340eb8126", "message": "Fix test failures for KafkaBrokerConfigurationBuilder\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:49Z", "type": "commit"}, {"oid": "00b10806e988a0f43b3b215f8fd0a4a340eb8126", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/00b10806e988a0f43b3b215f8fd0a4a340eb8126", "message": "Fix test failures for KafkaBrokerConfigurationBuilder\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:49Z", "type": "forcePushed"}]}