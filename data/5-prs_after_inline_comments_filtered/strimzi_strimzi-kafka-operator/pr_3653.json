{"pr_number": 3653, "pr_title": "Schema", "pr_createdAt": "2020-09-15T16:05:13Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg2ODE3Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#discussion_r488868173", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        v1beta2Create(name, mapListener(), null);\n          \n          \n            \n                        Exception e = assertThrows(() -> v1beta2Create(name, mapListener(), null))", "author": "samuel-hawker", "createdAt": "2020-09-15T18:12:29Z", "path": "api/src/test/java/io/strimzi/api/kafka/model/ApiEvolutionCrdIT.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.api.kafka.model;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;\n+import io.fabric8.kubernetes.api.model.apiextensions.CustomResourceDefinition;\n+import io.fabric8.kubernetes.client.dsl.NonNamespaceOperation;\n+import io.fabric8.kubernetes.client.dsl.Resource;\n+import io.strimzi.api.kafka.Crds;\n+import io.strimzi.api.kafka.KafkaList;\n+import io.strimzi.api.kafka.model.listener.KafkaListeners;\n+import io.strimzi.api.kafka.model.listener.KafkaListenersBuilder;\n+import io.strimzi.api.kafka.model.listener.arraylistener.ArrayOrObjectKafkaListeners;\n+import io.strimzi.api.kafka.model.listener.arraylistener.GenericKafkaListener;\n+import io.strimzi.api.kafka.model.listener.arraylistener.GenericKafkaListenerBuilder;\n+import io.strimzi.api.kafka.model.listener.arraylistener.KafkaListenerType;\n+import io.strimzi.test.TestUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.Collections.singletonList;\n+\n+public class ApiEvolutionCrdIT extends AbstractCrdIT {\n+    private static final Logger LOGGER = LogManager.getLogger(ApiEvolutionCrdIT.class);\n+\n+    public static final String NAMESPACE = \"api-evolution-it\";\n+\n+    @Test\n+    public void kafkaApiEvolution() throws IOException {\n+        assumeKube1_16Plus();\n+        // Create CRD with v1beta1 having map-or-list listeners (and no v1beta2)\n+        LOGGER.info(\"Create CRD\");\n+        long crdGeneration = createOrReplaceCrd(\"src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-v1alpha1-v1beta1-store-v1beta1.yaml\");\n+        waitForCrd(\"crd\", \"kafkas.kafka.strimzi.io\");\n+\n+        // Create one CR instance with a list listener and one with a map listeners\n+        LOGGER.info(\"Create instances\");\n+        v1beta1Create(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\", mapListener(), null);\n+        v1beta1Create(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\", null, listListener());\n+\n+        // Check we can consume these via v1beta1 endpoint\n+        LOGGER.info(\"Assert instances via v1beta1\");\n+        assertIsMapListener(v1beta1Get(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta1Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+\n+        // Replace CRD with one having v1beta2 which is served but not stored (v1beta1 is stored)\n+        LOGGER.info(\"Replace CRD\");\n+        long crdGeneration2 = createOrReplaceCrd(\"src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-v1beta1-v1beta2-store-v1beta1.yaml\");\n+        waitForCrdUpdate(crdGeneration2);\n+\n+        // Check we can't create a v1beta2 with a map\n+        assertV1beta2CreateFailure(\"v1beta2.map.v1beta1.stored.via.v1beta2.endpoint\");\n+\n+        // Create a v1beta2 with list\n+        LOGGER.info(\"Create 3rd instance via v1beta2 endpoint\");\n+        v1beta2Create(\"v1beta2.list.v1beta1.stored.via.v1beta1.endpoint\", null, listListener());\n+\n+        // Check we can still consume all CRs via both endpoints\n+        LOGGER.info(\"Assert instances via both endpoints\");\n+        assertIsMapListener(v1beta1Get(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta1Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta1Get(\"v1beta2.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsMapListener(v1beta2Get(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta2Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta2Get(\"v1beta2.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+\n+        // Upgrade CRD so v1beta2 is stored\n+        LOGGER.info(\"Update CRD so v1beta2 is stored\");\n+        long crdGeneration3 = createOrReplaceCrd(\"src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-v1beta1-v1beta2-store-v1beta2.yaml\");\n+        waitForCrdUpdate(crdGeneration3);\n+\n+        // Check we can still consume all CRs via both endpoints\n+        LOGGER.info(\"Assert instances via both endpoints\");\n+        assertIsMapListener(v1beta1Get(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta1Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta1Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsMapListener(v1beta2Get(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta2Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta2Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+\n+        // Check we can still create/update v1beta1 endpoint with a map listeners\n+        v1beta1Create(\"v1beta1.map.v1beta2.stored.via.v1beta1.endpoint\", mapListener(), null);\n+        // But we can't via the v1beta2 endpoint\n+        assertV1beta2CreateFailure(\"v1beta2.map.v1beta2.stored.via.v1beta2.endpoint\");\n+        // But lists are still OK\n+        v1beta1Create(\"v1beta1.list.v1beta2.stored.via.v1beta1.endpoint\", null, listListener());\n+        v1beta2Create(\"v1beta2.list.v1beta2.stored.via.v1beta2.endpoint\", null, listListener());\n+    }\n+\n+    private void assertV1beta2CreateFailure(String name) {\n+        try {\n+            LOGGER.info(\"Check can't create map-listener via v1beta2\");\n+            v1beta2Create(name, mapListener(), null);", "originalCommit": "6f44863ce8054e309240493821527e26a0034ed7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg3NTUxNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#discussion_r488875516", "bodyText": "Wouldn't be better to name it createInternalPlainListener or am I missing something?", "author": "see-quick", "createdAt": "2020-09-15T18:26:02Z", "path": "api/src/test/java/io/strimzi/api/kafka/model/ApiEvolutionCrdIT.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.api.kafka.model;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;\n+import io.fabric8.kubernetes.api.model.apiextensions.CustomResourceDefinition;\n+import io.fabric8.kubernetes.client.dsl.NonNamespaceOperation;\n+import io.fabric8.kubernetes.client.dsl.Resource;\n+import io.strimzi.api.kafka.Crds;\n+import io.strimzi.api.kafka.KafkaList;\n+import io.strimzi.api.kafka.model.listener.KafkaListeners;\n+import io.strimzi.api.kafka.model.listener.KafkaListenersBuilder;\n+import io.strimzi.api.kafka.model.listener.arraylistener.ArrayOrObjectKafkaListeners;\n+import io.strimzi.api.kafka.model.listener.arraylistener.GenericKafkaListener;\n+import io.strimzi.api.kafka.model.listener.arraylistener.GenericKafkaListenerBuilder;\n+import io.strimzi.api.kafka.model.listener.arraylistener.KafkaListenerType;\n+import io.strimzi.test.TestUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.Collections.singletonList;\n+\n+public class ApiEvolutionCrdIT extends AbstractCrdIT {\n+    private static final Logger LOGGER = LogManager.getLogger(ApiEvolutionCrdIT.class);\n+\n+    public static final String NAMESPACE = \"api-evolution-it\";\n+\n+    @Test\n+    public void kafkaApiEvolution() throws IOException {\n+        assumeKube1_16Plus();\n+        // Create CRD with v1beta1 having map-or-list listeners (and no v1beta2)\n+        LOGGER.info(\"Create CRD\");\n+        long crdGeneration = createOrReplaceCrd(\"src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-v1alpha1-v1beta1-store-v1beta1.yaml\");\n+        waitForCrd(\"crd\", \"kafkas.kafka.strimzi.io\");\n+\n+        // Create one CR instance with a list listener and one with a map listeners\n+        LOGGER.info(\"Create instances\");\n+        v1beta1Create(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\", mapListener(), null);\n+        v1beta1Create(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\", null, listListener());\n+\n+        // Check we can consume these via v1beta1 endpoint\n+        LOGGER.info(\"Assert instances via v1beta1\");\n+        assertIsMapListener(v1beta1Get(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta1Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+\n+        // Replace CRD with one having v1beta2 which is served but not stored (v1beta1 is stored)\n+        LOGGER.info(\"Replace CRD\");\n+        long crdGeneration2 = createOrReplaceCrd(\"src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-v1beta1-v1beta2-store-v1beta1.yaml\");\n+        waitForCrdUpdate(crdGeneration2);\n+\n+        // Check we can't create a v1beta2 with a map\n+        assertV1beta2CreateFailure(\"v1beta2.map.v1beta1.stored.via.v1beta2.endpoint\");\n+\n+        // Create a v1beta2 with list\n+        LOGGER.info(\"Create 3rd instance via v1beta2 endpoint\");\n+        v1beta2Create(\"v1beta2.list.v1beta1.stored.via.v1beta1.endpoint\", null, listListener());\n+\n+        // Check we can still consume all CRs via both endpoints\n+        LOGGER.info(\"Assert instances via both endpoints\");\n+        assertIsMapListener(v1beta1Get(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta1Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta1Get(\"v1beta2.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsMapListener(v1beta2Get(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta2Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta2Get(\"v1beta2.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+\n+        // Upgrade CRD so v1beta2 is stored\n+        LOGGER.info(\"Update CRD so v1beta2 is stored\");\n+        long crdGeneration3 = createOrReplaceCrd(\"src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka-v1beta1-v1beta2-store-v1beta2.yaml\");\n+        waitForCrdUpdate(crdGeneration3);\n+\n+        // Check we can still consume all CRs via both endpoints\n+        LOGGER.info(\"Assert instances via both endpoints\");\n+        assertIsMapListener(v1beta1Get(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta1Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta1Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsMapListener(v1beta2Get(\"v1beta1.map.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta2Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+        assertIsListListener(v1beta2Get(\"v1beta1.list.v1beta1.stored.via.v1beta1.endpoint\"));\n+\n+        // Check we can still create/update v1beta1 endpoint with a map listeners\n+        v1beta1Create(\"v1beta1.map.v1beta2.stored.via.v1beta1.endpoint\", mapListener(), null);\n+        // But we can't via the v1beta2 endpoint\n+        assertV1beta2CreateFailure(\"v1beta2.map.v1beta2.stored.via.v1beta2.endpoint\");\n+        // But lists are still OK\n+        v1beta1Create(\"v1beta1.list.v1beta2.stored.via.v1beta1.endpoint\", null, listListener());\n+        v1beta2Create(\"v1beta2.list.v1beta2.stored.via.v1beta2.endpoint\", null, listListener());\n+    }\n+\n+    private void assertV1beta2CreateFailure(String name) {\n+        try {\n+            LOGGER.info(\"Check can't create map-listener via v1beta2\");\n+            v1beta2Create(name, mapListener(), null);\n+            Assertions.fail();\n+        } catch (RuntimeException e) {\n+            LOGGER.info(\"Exception, good\", e);\n+            Assertions.assertTrue(e.getMessage().contains(\n+                    \"Kafka.kafka.strimzi.io \\\"\" + name + \"\\\" is invalid: \" +\n+                    \"spec.kafka.listeners: Invalid value: \\\"object\\\": \" +\n+                    \"spec.kafka.listeners in body must be of type array:\"));\n+        }\n+    }\n+\n+    private void v1beta1Create(String name, KafkaListeners kafkaListeners, GenericKafkaListener o) {\n+        v1beta1Op().create(buildKafkaCr(Kafka.V1BETA1, name, kafkaListeners, o));\n+    }\n+\n+    private void v1beta2Create(String name, KafkaListeners kafkaListeners, GenericKafkaListener o) {\n+        v1beta2Op().create(buildKafkaCr(Kafka.V1BETA2, name, kafkaListeners, o));\n+    }\n+\n+    private Kafka v1beta1Get(String s) {\n+        return v1beta1Op().withName(s).get();\n+    }\n+\n+    private Kafka v1beta2Get(String s) {\n+        return v1beta2Op().withName(s).get();\n+    }\n+\n+    private void waitForCrdUpdate(long crdGeneration2) {\n+        TestUtils.waitFor(\"CRD update\", 1000, 30000, () ->\n+                crdGeneration2 == cluster.client().getClient().customResourceDefinitions()\n+                        .withName(\"kafkas.kafka.strimzi.io\").get()\n+                        .getMetadata().getGeneration());\n+    }\n+\n+    private Long createOrReplaceCrd(String s) throws IOException {\n+        File src = new File(s);\n+        if (!src.exists()) {\n+            throw new RuntimeException(src.getAbsolutePath() + \" does not exist\");\n+        }\n+        CustomResourceDefinition crd = new YAMLMapper().readValue(src, CustomResourceDefinition.class);\n+        LOGGER.info(\"Create or replacing {} with versions {}\", crd.getMetadata().getName(),\n+                crd.getSpec().getVersions().stream()\n+                        .map(v -> v.getName() + \"{stored=\" + v.getStorage() + \"}\")\n+                        .collect(Collectors.joining(\", \")));\n+        return cluster.client().getClient().customResourceDefinitions().createOrReplace(crd).getMetadata().getGeneration();\n+    }\n+\n+    private void deleteCrd(String s) throws IOException {\n+        File src = new File(s);\n+        if (!src.exists()) {\n+            throw new RuntimeException(src.getAbsolutePath() + \" does not exist\");\n+        }\n+        CustomResourceDefinition crd = new YAMLMapper().readValue(src, CustomResourceDefinition.class);\n+        LOGGER.info(\"Create or replacing {} with versions {}\", crd.getMetadata().getName(),\n+                crd.getSpec().getVersions().stream()\n+                        .map(v -> v.getName() + \"{stored=\" + v.getStorage() + \"}\")\n+                        .collect(Collectors.joining(\", \")));\n+        cluster.client().getClient().customResourceDefinitions().delete(crd);\n+    }\n+\n+    private void assertIsMapListener(Kafka kafka) {\n+        Assertions.assertNotNull(kafka);\n+        Assertions.assertNotNull(kafka.getSpec());\n+        Assertions.assertNotNull(kafka.getSpec().getKafka());\n+        Assertions.assertNotNull(kafka.getSpec().getKafka().getListeners());\n+        Assertions.assertNotNull(kafka.getSpec().getKafka().getListeners().getKafkaListeners());\n+        Assertions.assertNull(kafka.getSpec().getKafka().getListeners().getGenericKafkaListeners());\n+    }\n+\n+    private void assertIsListListener(Kafka kafka) {\n+        Assertions.assertNotNull(kafka);\n+        Assertions.assertNotNull(kafka.getSpec());\n+        Assertions.assertNotNull(kafka.getSpec().getKafka());\n+        Assertions.assertNotNull(kafka.getSpec().getKafka().getListeners());\n+        Assertions.assertNull(kafka.getSpec().getKafka().getListeners().getKafkaListeners());\n+        Assertions.assertNotNull(kafka.getSpec().getKafka().getListeners().getGenericKafkaListeners());\n+    }\n+\n+    private NonNamespaceOperation<Kafka, KafkaList, DoneableKafka, Resource<Kafka, DoneableKafka>> v1beta1Op() {\n+        return Crds.kafkaV1Beta1Operation(cluster.client().getClient()).inNamespace(NAMESPACE);\n+    }\n+\n+    private NonNamespaceOperation<Kafka, KafkaList, DoneableKafka, Resource<Kafka, DoneableKafka>> v1beta2Op() {\n+        return Crds.kafkaV1Beta2Operation(cluster.client().getClient()).inNamespace(NAMESPACE);\n+    }\n+\n+    private GenericKafkaListener listListener() {", "originalCommit": "6f44863ce8054e309240493821527e26a0034ed7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0OTk0MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#discussion_r489249940", "bodyText": "The precise details of the listener don't matter (the CR is never actually consumed by the operator), instead what we're testing here is that we API server lets us create a Kafka CR with listeners as a list rather than a map.", "author": "tombentley", "createdAt": "2020-09-16T08:16:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg3NTUxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg3OTA1OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#discussion_r488879059", "bodyText": "Just curious, but wouldn't be better to use switch construction for the else if?", "author": "see-quick", "createdAt": "2020-09-15T18:32:25Z", "path": "crd-generator/src/main/java/io/strimzi/crdgenerator/CrdGenerator.java", "diffHunk": "@@ -652,44 +898,91 @@ ArrayNode stringArray(Iterable<String> list) {\n         return arrayNode;\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    public static void main(String[] args) throws IOException, ClassNotFoundException {\n-        boolean yaml = false;\n-        Map<String, String> labels = new LinkedHashMap<>();\n+    static class CommandOptions {\n+        private boolean yaml = false;\n+        private LinkedHashMap<String, String> labels = new LinkedHashMap<>();\n+        VersionRange<KubeVersion> targetKubeVersions = null;\n+        ApiVersion crdApiVersion = null;\n+        List<ApiVersion> apiVersions = null;\n+        ApiVersion storageVersion = null;\n         Map<String, Class<? extends CustomResource>> classes = new HashMap<>();\n-        for (int i = 0; i < args.length; i++) {\n-            String arg = args[i];\n-            if (arg.startsWith(\"--\")) {\n-                if (arg.equals(\"--yaml\")) {\n-                    yaml = true;\n-                } else if (arg.equals(\"--label\")) {\n-                    i++;\n-                    int index = args[i].indexOf(\":\");\n-                    if (index == -1) {\n-                        argParseErr(\"Invalid --label \" + args[i]);\n-                    }\n-                    labels.put(args[i].substring(0, index), args[i].substring(index + 1));\n \n+        @SuppressWarnings({\"unchecked\", \"CyclomaticComplexity\"})\n+        public CommandOptions(String[] args) throws ClassNotFoundException {\n+            for (int i = 0; i < args.length; i++) {\n+                String arg = args[i];\n+                if (arg.startsWith(\"--\")) {\n+                    if (arg.equals(\"--yaml\")) {\n+                        yaml = true;\n+                    } else if (arg.equals(\"--label\")) {", "originalCommit": "6f44863ce8054e309240493821527e26a0034ed7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk0NzAzOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#discussion_r488947038", "bodyText": "What is the difference for these two? Will each of these watch for another version resource? Will we need to do everything twice in the operators?", "author": "scholzj", "createdAt": "2020-09-15T20:16:13Z", "path": "api/src/main/java/io/strimzi/api/kafka/Crds.java", "diffHunk": "@@ -269,6 +269,14 @@ public static CustomResourceDefinition kafka() {\n         return client.customResources(CustomResourceDefinitionContext.fromCrd(crd(Kafka.class, Constants.V1ALPHA1)), Kafka.class, KafkaList.class, DoneableKafka.class);\n     }\n \n+    public static MixedOperation<Kafka, KafkaList, DoneableKafka, Resource<Kafka, DoneableKafka>> kafkaV1Beta1Operation(KubernetesClient client) {\n+        return client.customResources(CustomResourceDefinitionContext.fromCrd(crd(Kafka.class, Constants.V1BETA1)), Kafka.class, KafkaList.class, DoneableKafka.class);\n+    }\n+\n+    public static MixedOperation<Kafka, KafkaList, DoneableKafka, Resource<Kafka, DoneableKafka>> kafkaV1Beta2Operation(KubernetesClient client) {\n+        return client.customResources(CustomResourceDefinitionContext.fromCrd(crd(Kafka.class, Constants.V1BETA2)), Kafka.class, KafkaList.class, DoneableKafka.class);\n+    }", "originalCommit": "6f44863ce8054e309240493821527e26a0034ed7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyMDU3MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#discussion_r489220570", "bodyText": "What's the syntax for the value of this annotation? It's an interval or a list? or something different?", "author": "ppatierno", "createdAt": "2020-09-16T07:26:10Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaClusterSpec.java", "diffHunk": "@@ -146,6 +147,7 @@ public void setLogging(Logging logging) {\n         this.logging = logging;\n     }\n \n+    @PresentInVersions(\"v1alpha1-v1beta1\")", "originalCommit": "6f44863ce8054e309240493821527e26a0034ed7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI1NjE3NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#discussion_r489256174", "bodyText": "It's described here: https://github.com/strimzi/strimzi-kafka-operator/pull/3653/files#diff-762d04edf28bcda2d851e559e33f5ea4R93. In this case it's an interval with inclusive ends (we don't actually know whether there is a v1alpha2, we just compute inclusion based on the endpoints). It can also be an open-ended interval (e.g. v1beta2+), or a single version (v1beta1).", "author": "tombentley", "createdAt": "2020-09-16T08:26:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyMDU3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI2MDAwNA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#discussion_r489260004", "bodyText": "Thanks, got it!", "author": "ppatierno", "createdAt": "2020-09-16T08:32:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyMDU3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyNDA4OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#discussion_r489224088", "bodyText": "can we think more about using an enum as Alpha, Beta and Stable instead of short values 0, 1 and 2 (that anyway could be the corresponding underlying values of the enum)", "author": "ppatierno", "createdAt": "2020-09-16T07:32:15Z", "path": "crd-generator/src/main/java/io/strimzi/crdgenerator/ApiVersion.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.crdgenerator;\n+\n+\n+import java.util.Objects;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static java.lang.Short.parseShort;\n+\n+/**\n+ * Represents the version of a Kubernetes API, for example {@code v1alpha1} or {@code v2}.\n+ * These version numbers are comparable, so {@code v1alpha1 < v1beta1 < v1 < v2alpha1} etc.\n+ */\n+public class ApiVersion implements Comparable<ApiVersion> {\n+\n+    public static final Pattern PATTERN = Pattern.compile(\"v([0-9]+)((alpha|beta)([0-9]+))?\");\n+    public static final ApiVersion V1ALPHA1 = parse(\"v1alpha1\");\n+    public static final ApiVersion V1BETA1 = parse(\"v1beta1\");\n+    public static final ApiVersion V1 = parse(\"v1\");\n+\n+    private final short major;\n+    private final short ab;\n+    private final short minor;\n+\n+    public ApiVersion(short major, short ab, short minor) {\n+        if (major < 0 || ab < 0 || ab > 2 || minor < 0) {\n+            throw new RuntimeException();\n+        }\n+        this.major = major;\n+        this.ab = ab;\n+        this.minor = minor;\n+    }\n+\n+    private static Matcher matcher(String apiVersion) {\n+        return PATTERN.matcher(apiVersion);\n+    }\n+\n+    public static boolean isVersion(String apiVersion) {\n+        return matcher(apiVersion).matches();\n+    }\n+\n+    public static ApiVersion parse(String apiVersion) {\n+        Matcher matcher = matcher(apiVersion);\n+        if (!matcher.matches()) {\n+            throw new IllegalArgumentException(\"Invalid version \" + apiVersion);\n+        }\n+        short major = parseShort(matcher.group(1));\n+        short ab;\n+        short minor;\n+        String alphaBeta = matcher.group(3);\n+        if (matcher.groupCount() > 1 && alphaBeta != null) {\n+            if (\"alpha\".equals(alphaBeta)) {\n+                ab = 0;\n+            } else if (\"beta\".equals(alphaBeta)) {\n+                ab = 1;\n+            } else {\n+                throw new IllegalStateException(alphaBeta);\n+            }\n+            minor = parseShort(matcher.group(4));\n+        } else {\n+            ab = 2;", "originalCommit": "6f44863ce8054e309240493821527e26a0034ed7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI1Nzk0NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#discussion_r489257944", "bodyText": "There's no benefit to using an enum because these things are entirely internal to ApiVersion. The intention is that people use the String form (v1alpha1) rather than using a constructor which takes actual values. Using constants would actually make the compareTo code harder to read imho, but I'll do it anyway.", "author": "tombentley", "createdAt": "2020-09-16T08:28:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyNDA4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI1OTQ1NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3653#discussion_r489259454", "bodyText": "Well, I don't think that the benefit has to be for people using it only but even for developers maintaining it. I got the values now or at least you could document them so no need to update but I think that using enums don't hurt.", "author": "ppatierno", "createdAt": "2020-09-16T08:31:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyNDA4OA=="}], "type": "inlineReview"}, {"oid": "e0f92c6fc18b6dd3638f33950c4fc16da6f3d7c5", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/e0f92c6fc18b6dd3638f33950c4fc16da6f3d7c5", "message": "fix\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>", "committedDate": "2020-09-22T17:17:40Z", "type": "forcePushed"}, {"oid": "d6c128f5ad0763ee832b255088a1fe936ac001d1", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d6c128f5ad0763ee832b255088a1fe936ac001d1", "message": "Rebase fix\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>", "committedDate": "2020-10-05T08:47:03Z", "type": "forcePushed"}, {"oid": "a2aeb50ef0497a39e49106539b6d506b86cfbf91", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a2aeb50ef0497a39e49106539b6d506b86cfbf91", "message": "Add ApiVersion and range. Allow @Pattern, @Description and @Alternative to declare a version\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>", "committedDate": "2020-10-05T09:00:11Z", "type": "commit"}, {"oid": "4815308c7d19fc21416c9c75eb60c1c88518330c", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/4815308c7d19fc21416c9c75eb60c1c88518330c", "message": "Support for versiond schemas\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>", "committedDate": "2020-10-05T09:00:11Z", "type": "commit"}, {"oid": "fe93c86b32d7c3fc719e9098cddb484fae8ff439", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/fe93c86b32d7c3fc719e9098cddb484fae8ff439", "message": "Generify version ranges and versions\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>", "committedDate": "2020-10-05T09:00:11Z", "type": "commit"}, {"oid": "46f2298df9981a7d9b2dcf34fbc579f9628f7a36", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/46f2298df9981a7d9b2dcf34fbc579f9628f7a36", "message": "Fix tests\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>", "committedDate": "2020-10-05T09:00:11Z", "type": "commit"}, {"oid": "6cb598b884d57bad7dc898ebc3f7354b53e87948", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/6cb598b884d57bad7dc898ebc3f7354b53e87948", "message": "Nasty compromise for dealing with properties\n\nProbably need to assert that either annotations have no `apiVersion`, or that the `apiVersions` cover the versions in the CR in which they're embedded.\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>", "committedDate": "2020-10-05T09:00:11Z", "type": "commit"}, {"oid": "0e5c41b5ecf1aa3e3ac264a547f8044485a43624", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/0e5c41b5ecf1aa3e3ac264a547f8044485a43624", "message": "fixes\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>", "committedDate": "2020-10-05T09:00:11Z", "type": "commit"}, {"oid": "1fd1c47d430f252006d43af89c99ea552b3c1267", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/1fd1c47d430f252006d43af89c99ea552b3c1267", "message": "fix\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>", "committedDate": "2020-10-05T09:00:11Z", "type": "commit"}, {"oid": "1193cce2281dc1805fc2ca04981f027de50bc8f3", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/1193cce2281dc1805fc2ca04981f027de50bc8f3", "message": "Make prerequisites-check.sh respect DOCKER_CMD\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>", "committedDate": "2020-10-05T09:00:11Z", "type": "commit"}, {"oid": "3577b7170a381cfc97d3e058c1c41d93e672ac3d", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3577b7170a381cfc97d3e058c1c41d93e672ac3d", "message": "wip\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>", "committedDate": "2020-10-05T09:00:11Z", "type": "commit"}, {"oid": "fa69907115f821c055c58da967ee7462bd75ce98", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/fa69907115f821c055c58da967ee7462bd75ce98", "message": "Fix test\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>", "committedDate": "2020-10-05T09:00:11Z", "type": "commit"}, {"oid": "4cae94f4d0ff23bb4fbc7c40c2444a84ba81410e", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/4cae94f4d0ff23bb4fbc7c40c2444a84ba81410e", "message": "fixup\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>", "committedDate": "2020-10-05T09:00:11Z", "type": "commit"}, {"oid": "d2e0014450b0c36f7b1502db547a79c33b3b6176", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d2e0014450b0c36f7b1502db547a79c33b3b6176", "message": "java11ism\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>", "committedDate": "2020-10-05T09:00:11Z", "type": "commit"}, {"oid": "9c9dd4387efbd69fdb1e510077db9a157b965454", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/9c9dd4387efbd69fdb1e510077db9a157b965454", "message": "spotbuts\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>", "committedDate": "2020-10-05T09:00:11Z", "type": "commit"}, {"oid": "40dda7cafd9817fc98cff9bc3c0adc1dd96db354", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/40dda7cafd9817fc98cff9bc3c0adc1dd96db354", "message": "default\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>", "committedDate": "2020-10-05T09:00:11Z", "type": "commit"}, {"oid": "428b522fbc1f92cb0ccc8477643382475e99409e", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/428b522fbc1f92cb0ccc8477643382475e99409e", "message": "Some code review comments\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>", "committedDate": "2020-10-05T09:00:11Z", "type": "commit"}, {"oid": "c0c0ca15a9ec252fcb1c5f5816bef20b2ce8064c", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c0c0ca15a9ec252fcb1c5f5816bef20b2ce8064c", "message": "More review comments and fixes for CRD v1\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>", "committedDate": "2020-10-05T09:00:11Z", "type": "commit"}, {"oid": "d35a149d84d2fb0267853c7fea9db5d99f5e85b4", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d35a149d84d2fb0267853c7fea9db5d99f5e85b4", "message": "wip\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>", "committedDate": "2020-10-05T09:00:11Z", "type": "commit"}, {"oid": "f550da68e8756ea25dd2847d9c75d08246421d19", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/f550da68e8756ea25dd2847d9c75d08246421d19", "message": "to revert\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>", "committedDate": "2020-10-05T09:00:11Z", "type": "commit"}, {"oid": "74c23bbb3050105bf424594cfc876f2c1cd9018d", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/74c23bbb3050105bf424594cfc876f2c1cd9018d", "message": "Revert \"to revert\"\n\nThis reverts commit 54ad402d6f080b3eba1b5f012518d58ca014c924.\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>", "committedDate": "2020-10-05T09:00:11Z", "type": "commit"}, {"oid": "651a6a425367cc52e97c95fd6bf8a5368100eb04", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/651a6a425367cc52e97c95fd6bf8a5368100eb04", "message": "fix\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>", "committedDate": "2020-10-05T09:00:11Z", "type": "commit"}, {"oid": "371ee692cea6ac9109455567d48f6bf12fe8427d", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/371ee692cea6ac9109455567d48f6bf12fe8427d", "message": "fix\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>", "committedDate": "2020-10-05T09:00:11Z", "type": "commit"}, {"oid": "ce181dbe29bad4cb06d087c3a9762d24ac644741", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ce181dbe29bad4cb06d087c3a9762d24ac644741", "message": "Fix problem with map types with CRD v1\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>", "committedDate": "2020-10-05T09:00:11Z", "type": "commit"}, {"oid": "6df319248f3401a618e9866dc199c2926371878b", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/6df319248f3401a618e9866dc199c2926371878b", "message": "Update derived resources\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>", "committedDate": "2020-10-05T09:00:11Z", "type": "commit"}, {"oid": "a09baad32000aded2cf76d6673cab116c4dc369f", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a09baad32000aded2cf76d6673cab116c4dc369f", "message": "Test\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>", "committedDate": "2020-10-05T09:00:12Z", "type": "commit"}, {"oid": "c053bb54b6e72f35a5bbdf9b0f285077cbb2f6a0", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c053bb54b6e72f35a5bbdf9b0f285077cbb2f6a0", "message": "Test\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>", "committedDate": "2020-10-05T09:00:12Z", "type": "commit"}, {"oid": "d2db69873eb92218c1ee290746c423ae82fd6619", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d2db69873eb92218c1ee290746c423ae82fd6619", "message": "Rebase fix\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>", "committedDate": "2020-10-05T09:00:12Z", "type": "commit"}, {"oid": "735307cf158ccff0882fab3c9e14997d8fc7307e", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/735307cf158ccff0882fab3c9e14997d8fc7307e", "message": "derived\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>", "committedDate": "2020-10-05T09:00:12Z", "type": "commit"}, {"oid": "735307cf158ccff0882fab3c9e14997d8fc7307e", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/735307cf158ccff0882fab3c9e14997d8fc7307e", "message": "derived\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>", "committedDate": "2020-10-05T09:00:12Z", "type": "forcePushed"}]}