{"pr_number": 3533, "pr_title": "[MO] - [oauth + clients] -> removing oauth external lister dependency + refactor clients", "pr_createdAt": "2020-08-21T12:51:41Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3533", "timeline": [{"oid": "d55bc7a89ca09e019703742a0b9cf96cdf996173", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d55bc7a89ca09e019703742a0b9cf96cdf996173", "message": "[MO] - OauthPlainST and OauthTlsST  without external listeners\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-08-25T10:55:24Z", "type": "forcePushed"}, {"oid": "3e8644132ff20ead333eb04d957e8efaef2c823b", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3e8644132ff20ead333eb04d957e8efaef2c823b", "message": "fix\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-08-27T08:28:55Z", "type": "forcePushed"}, {"oid": "631e534b5992f28c5764a61ed68cdaacfc1d2b4d", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/631e534b5992f28c5764a61ed68cdaacfc1d2b4d", "message": "[MO] - [oauth + clients] -> removing oauth external lister dependency + refactor clients\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-08-29T00:06:40Z", "type": "commit"}, {"oid": "2d05b7e065c4b380c33fa7fa8321081956b24ad9", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/2d05b7e065c4b380c33fa7fa8321081956b24ad9", "message": "[MO] - OauthPlainST and OauthTlsST  without external listeners\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-08-29T00:06:40Z", "type": "commit"}, {"oid": "2283e424bdaa2de78c45899f1619b8593332edd9", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/2283e424bdaa2de78c45899f1619b8593332edd9", "message": "[dir]\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-08-29T00:06:40Z", "type": "commit"}, {"oid": "5182b12662965fe05176ae3f166a3d2fc61a64bd", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/5182b12662965fe05176ae3f166a3d2fc61a64bd", "message": "[MO] - [access] -> package - protected\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-08-29T00:06:40Z", "type": "commit"}, {"oid": "54f815539ccc7cb3cdc2f7010a08bec0e473cd93", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/54f815539ccc7cb3cdc2f7010a08bec0e473cd93", "message": "fix\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-08-29T00:06:40Z", "type": "commit"}, {"oid": "b6bf4c70babb8fa38940073fa23056a17fdc42a7", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b6bf4c70babb8fa38940073fa23056a17fdc42a7", "message": "kafka-connect-fix\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-08-29T00:06:40Z", "type": "commit"}, {"oid": "1357f9bc6d766f62eb7116c637dbe479bc4cacd1", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/1357f9bc6d766f62eb7116c637dbe479bc4cacd1", "message": "last\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-08-29T00:06:40Z", "type": "commit"}, {"oid": "d4e9a6bd3b09f906073d367e24766985250d0515", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d4e9a6bd3b09f906073d367e24766985250d0515", "message": "s\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-08-29T00:06:40Z", "type": "commit"}, {"oid": "fb38adc71245412bcb0a5a80352f3bdf70a1ed09", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/fb38adc71245412bcb0a5a80352f3bdf70a1ed09", "message": "kc message\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-08-29T00:06:40Z", "type": "commit"}, {"oid": "a2ba41db5a969527c8f1bc54865144aac52a0f43", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a2ba41db5a969527c8f1bc54865144aac52a0f43", "message": "fix\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-08-29T00:06:40Z", "type": "commit"}, {"oid": "d1a3dbdfa969772ab8218b95c9874bd46f0322a0", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d1a3dbdfa969772ab8218b95c9874bd46f0322a0", "message": "todo remove\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-08-29T00:06:40Z", "type": "commit"}, {"oid": "ae9f1fb7b45d25f4fbffb81e0d6ba289695f8116", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ae9f1fb7b45d25f4fbffb81e0d6ba289695f8116", "message": "fix\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-08-29T00:06:40Z", "type": "commit"}, {"oid": "e8145e8ad8c6fd6141762a1cac7d250a6a8a6b09", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/e8145e8ad8c6fd6141762a1cac7d250a6a8a6b09", "message": "Refactor authorization (#2)\n\n* Refactor authorization\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>\n\n* fixup! Refactor authorization\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>\n\n* fixup! fixup! Refactor authorization\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>\n\n* Finish refactor\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>\n\n* fixup! Finish refactor\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-08-29T00:08:28Z", "type": "commit"}, {"oid": "0001c2ec078560ee3cbd3d601056e973c968b342", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/0001c2ec078560ee3cbd3d601056e973c968b342", "message": "rebase fixups\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-08-29T09:18:28Z", "type": "commit"}, {"oid": "0001c2ec078560ee3cbd3d601056e973c968b342", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/0001c2ec078560ee3cbd3d601056e973c968b342", "message": "rebase fixups\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-08-29T09:18:28Z", "type": "forcePushed"}, {"oid": "cd9800c0aad42ad34c0f214eac0b674e3290a37a", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/cd9800c0aad42ad34c0f214eac0b674e3290a37a", "message": "fixup! rebase fixups\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-08-29T09:19:31Z", "type": "commit"}, {"oid": "3483460e087f589fc8cdfe130b3e3c64173839f8", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3483460e087f589fc8cdfe130b3e3c64173839f8", "message": "Some minor changes\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-08-31T09:43:45Z", "type": "commit"}, {"oid": "93bee8ca22346ac0b49ecebcd0cc87767c3afa76", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/93bee8ca22346ac0b49ecebcd0cc87767c3afa76", "message": "fixup! Some minor changes\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-08-31T09:47:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE5OTEyMw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3533#discussion_r480199123", "bodyText": "Why not to use the JobUtils.deleteJob()?\nAnd question -> don't we want to add something like JobsClient() to not always do the kubeClient().getClient().batch().jobs()? This is just a question/suggestion.", "author": "im-konge", "createdAt": "2020-08-31T15:15:52Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/security/oauth/OauthAbstractST.java", "diffHunk": "@@ -72,73 +67,31 @@ void setup() throws Exception {\n \n         KeycloakUtils.deployKeycloak(NAMESPACE);\n \n-        // https\n-        Service keycloakService = KubernetesResource.createKeycloakNodePortService(NAMESPACE);\n-        KubernetesResource.createServiceResource(keycloakService, NAMESPACE);\n-        ServiceUtils.waitForNodePortService(keycloakService.getMetadata().getName());\n-\n-        // http\n-        Service keycloakHttpService = KubernetesResource.createKeycloakNodePortHttpService(NAMESPACE);\n-        KubernetesResource.createServiceResource(keycloakHttpService, NAMESPACE);\n-        ServiceUtils.waitForNodePortService(keycloakHttpService.getMetadata().getName());\n-\n         String passwordEncoded = kubeClient().getSecret(\"credential-example-keycloak\").getData().get(\"ADMIN_PASSWORD\");\n         String password = new String(Base64.getDecoder().decode(passwordEncoded.getBytes()));\n         keycloakInstance = new KeycloakInstance(\"admin\", password, NAMESPACE);\n \n-        clusterHost = kubeClient().getNodeAddress();\n-\n-        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 1)\n-            .editSpec()\n-                .editKafka()\n-                    .editListeners()\n-                        .withNewTls()\n-                            .withNewKafkaListenerAuthenticationOAuth()\n-                                .withValidIssuerUri(keycloakInstance.getValidIssuerUri())\n-                                .withJwksExpirySeconds(keycloakInstance.getJwksExpireSeconds())\n-                                .withJwksRefreshSeconds(keycloakInstance.getJwksRefreshSeconds())\n-                                .withJwksEndpointUri(keycloakInstance.getJwksEndpointUri())\n-                                .withUserNameClaim(keycloakInstance.getUserNameClaim())\n-                                .withTlsTrustedCertificates(\n-                                    new CertSecretSourceBuilder()\n-                                        .withSecretName(SECRET_OF_KEYCLOAK)\n-                                        .withCertificate(CERTIFICATE_OF_KEYCLOAK)\n-                                        .build())\n-                                .withDisableTlsHostnameVerification(true)\n-                            .endKafkaListenerAuthenticationOAuth()\n-                        .endTls()\n-                        .withNewKafkaListenerExternalNodePort()\n-                            .withNewKafkaListenerAuthenticationOAuth()\n-                                .withValidIssuerUri(keycloakInstance.getValidIssuerUri())\n-                                .withJwksExpirySeconds(keycloakInstance.getJwksExpireSeconds())\n-                                .withJwksRefreshSeconds(keycloakInstance.getJwksRefreshSeconds())\n-                                .withJwksEndpointUri(keycloakInstance.getJwksEndpointUri())\n-                                .withUserNameClaim(keycloakInstance.getUserNameClaim())\n-                                .withTlsTrustedCertificates(\n-                                    new CertSecretSourceBuilder()\n-                                        .withSecretName(SECRET_OF_KEYCLOAK)\n-                                        .withCertificate(CERTIFICATE_OF_KEYCLOAK)\n-                                        .build())\n-                                .withDisableTlsHostnameVerification(true)\n-                            .endKafkaListenerAuthenticationOAuth()\n-                        .endKafkaListenerExternalNodePort()\n-                    .endListeners()\n-                .endKafka()\n-            .endSpec()\n-            .done();\n-\n-        KafkaTopicResource.topic(CLUSTER_NAME, TOPIC_NAME).done();\n-\n         createSecretsForDeployments();\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n \n-        KafkaUserResource.tlsUser(CLUSTER_NAME, OAUTH_CLIENT_NAME).done();\n+        for (Job job : kubeClient().getClient().batch().jobs().inNamespace(NAMESPACE).list().getItems()) {\n+            LOGGER.info(\"Deleting {} job\", job.getMetadata().getName());\n+            kubeClient().getClient().batch().jobs().inNamespace(NAMESPACE).delete(job);\n+        }", "originalCommit": "93bee8ca22346ac0b49ecebcd0cc87767c3afa76", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIwMzgzMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3533#discussion_r480203830", "bodyText": "Leftover, feel free to open issue to add this job implementation to kubeclient.", "author": "Frawless", "createdAt": "2020-08-31T15:23:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE5OTEyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI5Mjk3Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3533#discussion_r481292977", "bodyText": "Perfect, thanks", "author": "im-konge", "createdAt": "2020-09-01T16:53:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE5OTEyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE5OTM0NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3533#discussion_r480199345", "bodyText": "Another suggestion -> shouldn't be better to have builder for this? Just asking ... for the future PR?", "author": "im-konge", "createdAt": "2020-08-31T15:16:12Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/security/oauth/OauthAuthorizationST.java", "diffHunk": "@@ -222,76 +231,70 @@ void testClusterVerification() {\n     void setUp()  {\n         keycloakInstance.setRealm(\"kafka-authz\", true);\n \n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 1)\n+            .editSpec()\n+                .editKafka()\n+                    .editListeners()\n+                        .withNewTls()\n+                            .withNewKafkaListenerAuthenticationOAuth()\n+                                .withValidIssuerUri(keycloakInstance.getValidIssuerUri())\n+                                .withJwksExpirySeconds(keycloakInstance.getJwksExpireSeconds())\n+                                .withJwksRefreshSeconds(keycloakInstance.getJwksRefreshSeconds())\n+                                .withJwksEndpointUri(keycloakInstance.getJwksEndpointUri())\n+                                .withUserNameClaim(keycloakInstance.getUserNameClaim())\n+                                .withTlsTrustedCertificates(\n+                                    new CertSecretSourceBuilder()\n+                                        .withSecretName(KeycloakInstance.KEYCLOAK_SECRET_NAME)\n+                                        .withCertificate(KeycloakInstance.KEYCLOAK_SECRET_CERT)\n+                                        .build())\n+                                .withDisableTlsHostnameVerification(true)\n+                            .endKafkaListenerAuthenticationOAuth()\n+                        .endTls()\n+                    .endListeners()\n+                    .withNewKafkaAuthorizationKeycloak()\n+                        .withClientId(KAFKA_CLIENT_ID)\n+                        .withDisableTlsHostnameVerification(true)\n+                        .withDelegateToKafkaAcls(false)\n+                        // ca.crt a tls.crt\n+                        .withTlsTrustedCertificates(\n+                            new CertSecretSourceBuilder()\n+                                .withSecretName(KeycloakInstance.KEYCLOAK_SECRET_NAME)\n+                                .withCertificate(KeycloakInstance.KEYCLOAK_SECRET_CERT)\n+                                .build()\n+                        )\n+                        .withTokenEndpointUri(keycloakInstance.getOauthTokenEndpointUri())\n+                    .endKafkaAuthorizationKeycloak()\n+                .endKafka()\n+            .endSpec()\n+            .done();\n+\n         LOGGER.info(\"Setting producer and consumer properties\");\n \n         KafkaUserResource.tlsUser(CLUSTER_NAME, TEAM_A_CLIENT).done();\n         KafkaUserResource.tlsUser(CLUSTER_NAME, TEAM_B_CLIENT).done();\n \n-        KafkaUserUtils.waitForKafkaUserCreation(TEAM_A_CLIENT);\n-        KafkaUserUtils.waitForKafkaUserCreation(TEAM_B_CLIENT);\n-\n-        teamAOauthKafkaClient = new OauthExternalKafkaClient.Builder()\n-            .withTopicName(TOPIC_A)\n-            .withNamespaceName(NAMESPACE)\n-            .withClusterName(CLUSTER_NAME)\n-            .withKafkaUsername(TEAM_A_CLIENT)\n-            .withMessageCount(MESSAGE_COUNT)\n-            .withSecurityProtocol(SecurityProtocol.SASL_SSL)\n-            .withConsumerGroupName(\"a-consumer_group\")\n-            .withOauthClientId(TEAM_A_CLIENT)\n-            .withClientSecretName(TEAM_A_CLIENT_SECRET)\n-            .withOauthTokenEndpointUri(keycloakInstance.getOauthTokenEndpointUri())\n-            .build();\n-\n-        teamBOauthKafkaClient = new OauthExternalKafkaClient.Builder()\n-            .withTopicName(TOPIC_NAME)\n-            .withNamespaceName(NAMESPACE)\n-            .withClusterName(CLUSTER_NAME)\n-            .withKafkaUsername(TEAM_A_CLIENT)\n-            .withMessageCount(MESSAGE_COUNT)\n-            .withSecurityProtocol(SecurityProtocol.SASL_SSL)\n-            .withConsumerGroupName(\"x-\" + ClientUtils.generateRandomConsumerGroup())\n-            .withOauthClientId(TEAM_B_CLIENT)\n-            .withClientSecretName(TEAM_B_CLIENT_SECRET)\n-            .withOauthTokenEndpointUri(keycloakInstance.getOauthTokenEndpointUri())\n-            .build();\n-\n-        Map<String, String> kafkaPods = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n-\n-        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n-            kafka.getSpec().getKafka().getListeners().setExternal(\n-                new KafkaListenerExternalNodePortBuilder()\n-                    .withNewKafkaListenerAuthenticationOAuth()\n-                        .withValidIssuerUri(keycloakInstance.getValidIssuerUri())\n-                        .withJwksEndpointUri(keycloakInstance.getJwksEndpointUri())\n-                        .withJwksExpirySeconds(keycloakInstance.getJwksExpireSeconds())\n-                        .withJwksRefreshSeconds(keycloakInstance.getJwksRefreshSeconds())\n-                        .withUserNameClaim(keycloakInstance.getUserNameClaim())\n-                        .withTlsTrustedCertificates(\n-                            new CertSecretSourceBuilder()\n-                                .withSecretName(SECRET_OF_KEYCLOAK)\n-                                .withCertificate(CERTIFICATE_OF_KEYCLOAK)\n-                                .build())\n-                        .withDisableTlsHostnameVerification(true)\n-                    .endKafkaListenerAuthenticationOAuth()\n-                    .build());\n-\n-            kafka.getSpec().getKafka().setAuthorization(\n-                new KafkaAuthorizationKeycloakBuilder()\n-                    .withClientId(KAFKA_CLIENT_ID)\n-                    .withDisableTlsHostnameVerification(true)\n-                    .withDelegateToKafkaAcls(false)\n-                    // ca.crt a tls.crt\n-                    .withTlsTrustedCertificates(\n-                        new CertSecretSourceBuilder()\n-                            .withSecretName(SECRET_OF_KEYCLOAK)\n-                            .withCertificate(CERTIFICATE_OF_KEYCLOAK)\n-                            .build()\n-                    )\n-                    .withTokenEndpointUri(keycloakInstance.getOauthTokenEndpointUri())\n-                    .build());\n-        });\n-\n-        StatefulSetUtils.waitTillSsHasRolled(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME), 3, kafkaPods);\n+        teamAOauthClientJob = new KafkaOauthClientsResource(\n+                TEAM_A_PRODUCER_NAME,\n+                TEAM_A_CONSUMER_NAME,\n+                KafkaResources.tlsBootstrapAddress(CLUSTER_NAME),\n+                TOPIC_A,\n+                MESSAGE_COUNT,\n+                \"\",\n+                \"a-consumer_group\",\n+                TEAM_A_CLIENT,\n+                TEAM_A_CLIENT_SECRET,\n+                keycloakInstance.getOauthTokenEndpointUri());\n+\n+        teamBOauthClientJob = new KafkaOauthClientsResource(\n+                TEAM_B_PRODUCER_NAME,\n+                TEAM_B_CONSUMER_NAME,\n+                KafkaResources.tlsBootstrapAddress(CLUSTER_NAME),\n+                TOPIC_A,\n+                MESSAGE_COUNT,\n+                \"\",\n+                \"x-\" + ClientUtils.generateRandomConsumerGroup(),\n+                TEAM_B_CLIENT,\n+                TEAM_B_CLIENT_SECRET,\n+                keycloakInstance.getOauthTokenEndpointUri());", "originalCommit": "93bee8ca22346ac0b49ecebcd0cc87767c3afa76", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIwNDA4MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3533#discussion_r480204081", "bodyText": "Open issue for that. We discuss it and we decide it needs separete PR.", "author": "Frawless", "createdAt": "2020-08-31T15:23:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE5OTM0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI5Mjg5OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3533#discussion_r481292899", "bodyText": "Thanks :) gonna open it.", "author": "im-konge", "createdAt": "2020-09-01T16:53:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE5OTM0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE5OTQ4Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3533#discussion_r480199487", "bodyText": "Same as above: Why not to use the JobUtils.deleteJob()?", "author": "im-konge", "createdAt": "2020-08-31T15:16:25Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/security/oauth/OauthPlainST.java", "diffHunk": "@@ -187,19 +184,35 @@ void testProducerConsumerMirrorMaker() {\n         TestUtils.waitFor(\"Waiting for Mirror Maker will copy messages from \" + CLUSTER_NAME + \" to \" + targetKafkaCluster,\n             Constants.GLOBAL_CLIENTS_POLL, Constants.TIMEOUT_FOR_MIRROR_MAKER_COPY_MESSAGES_BETWEEN_BROKERS,\n             () -> {\n-                oauthExternalKafkaClient.setConsumerGroup(ClientUtils.generateRandomConsumerGroup());\n-                return oauthExternalKafkaClient.receiveMessagesPlain() == MESSAGE_COUNT;\n+                LOGGER.info(\"Deleting the Job\");\n+                kubeClient().getClient().batch().jobs().inNamespace(NAMESPACE).withName(OAUTH_CONSUMER_NAME).delete();", "originalCommit": "93bee8ca22346ac0b49ecebcd0cc87767c3afa76", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE5OTU4OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3533#discussion_r480199588", "bodyText": "Same as above", "author": "im-konge", "createdAt": "2020-08-31T15:16:35Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/security/oauth/OauthPlainST.java", "diffHunk": "@@ -273,19 +286,35 @@ void testProducerConsumerMirrorMaker2() {\n         TestUtils.waitFor(\"Waiting for Mirror Maker 2 will copy messages from \" + kafkaSourceClusterName + \" to \" + kafkaTargetClusterName,\n             Duration.ofSeconds(30).toMillis(), Constants.TIMEOUT_FOR_MIRROR_MAKER_COPY_MESSAGES_BETWEEN_BROKERS,\n             () -> {\n-                oauthExternalKafkaClient.setConsumerGroup(ClientUtils.generateRandomConsumerGroup());\n-                return oauthExternalKafkaClient.receiveMessagesPlain() == MESSAGE_COUNT;\n+                LOGGER.info(\"Deleting the Job {}\", OAUTH_CONSUMER_NAME);\n+                kubeClient().getClient().batch().jobs().inNamespace(NAMESPACE).withName(OAUTH_CONSUMER_NAME).delete();", "originalCommit": "93bee8ca22346ac0b49ecebcd0cc87767c3afa76", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "28e4b4fdd92fa08f3eeaa91ce46ec8af06fee5af", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/28e4b4fdd92fa08f3eeaa91ce46ec8af06fee5af", "message": "Fix comments\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-09-01T07:37:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk0MzEwNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3533#discussion_r481943107", "bodyText": "Should this be a waitForJobFailure and sit in JobUtils? apart from the log message, there is nothing client specific.", "author": "scholzj", "createdAt": "2020-09-02T09:46:31Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/ClientUtils.java", "diffHunk": "@@ -60,6 +60,12 @@ public static void waitForClientSuccess(String jobName, String namespace, int me\n             () -> kubeClient().getClient().batch().jobs().inNamespace(namespace).withName(jobName).get().getStatus().getSucceeded().equals(1));\n     }\n \n+    public static void waitForClientFailure(String jobName, String namespace, long timeout) {\n+        LOGGER.info(\"Waiting for producer/consumer:{} will be in error state\", jobName);\n+        TestUtils.waitFor(\"job finished\", Constants.GLOBAL_POLL_INTERVAL, timeout,\n+            () -> kubeClient().getClient().batch().jobs().inNamespace(namespace).withName(jobName).get().getStatus().getSucceeded().equals(1));\n+    }", "originalCommit": "28e4b4fdd92fa08f3eeaa91ce46ec8af06fee5af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk0NDM1Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3533#discussion_r481944353", "bodyText": "This seems to be the same for all the Bridge tests. Can this be moved in some way to the abstract class?", "author": "scholzj", "createdAt": "2020-09-02T09:48:46Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/bridge/HttpBridgeKafkaExternalListenersST.java", "diffHunk": "@@ -164,5 +166,8 @@ private void testWeirdUsername(String weirdUserName, KafkaListenerAuthentication\n     @BeforeAll\n     void createClassResources() throws Exception {\n         deployClusterOperator(NAMESPACE);\n+\n+        kafkaBridgeClientJob = new KafkaBridgeClientsResource(producerName, consumerName, KafkaBridgeResources.serviceName(CLUSTER_NAME),\n+            TOPIC_NAME, MESSAGE_COUNT, \"\", ClientUtils.generateRandomConsumerGroup(), bridgePort, 1000, 1000);", "originalCommit": "28e4b4fdd92fa08f3eeaa91ce46ec8af06fee5af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk0Njk3Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3533#discussion_r481946977", "bodyText": "What is the value of having this at the class level? Looks like you use it only within a single loop.", "author": "scholzj", "createdAt": "2020-09-02T09:53:22Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/specific/ClusterOperationST.java", "diffHunk": "@@ -32,16 +32,19 @@\n public class ClusterOperationST extends AbstractST {\n \n     private static final Logger LOGGER = LogManager.getLogger(ClusterOperationST.class);\n+    private KafkaBasicClientResource kafkaBasicClientResource;", "originalCommit": "28e4b4fdd92fa08f3eeaa91ce46ec8af06fee5af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a41625208d3b724616b19aefc9498fa7df904696", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a41625208d3b724616b19aefc9498fa7df904696", "message": "fix comments\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-09-02T11:12:30Z", "type": "commit"}, {"oid": "3bfa5ad9fe820bebeed036691e11f427f2084cac", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3bfa5ad9fe820bebeed036691e11f427f2084cac", "message": "fixup! fix comments\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-09-02T14:53:22Z", "type": "commit"}]}