{"pr_number": 9490, "pr_title": "5.0 cherry pick", "pr_createdAt": "2020-11-25T08:20:23Z", "pr_url": "https://github.com/vaadin/flow/pull/9490", "timeline": [{"oid": "37939ddb876ca77ca5fae628e93785ba736788a2", "url": "https://github.com/vaadin/flow/commit/37939ddb876ca77ca5fae628e93785ba736788a2", "message": "fix: remove instance field from singleton IndexHtmlRequestHandler (#9475)\n\n* fix: remove instance field from singleton IndexHtmlRequestHandler\r\n\r\n* apply code review suggestions", "committedDate": "2020-11-25T08:19:22Z", "type": "commit"}, {"oid": "c75f254e09e4bf3805f34d02f2647a4f89fb4bb3", "url": "https://github.com/vaadin/flow/commit/c75f254e09e4bf3805f34d02f2647a4f89fb4bb3", "message": "Stop logging error when updating dev dependencies (#9476)\n\nAs there is a conflict with the dependencies and prevent adding\r\nthe flow-dev-dependencies package to the platform (#9345), this will hide\r\nthe unavoidable error that was logged for Vaadin apps.\r\n \r\nFixes #9251", "committedDate": "2020-11-25T08:52:07Z", "type": "commit"}, {"oid": "f4f2e117ce8c5165e8a518ff36474e05b88ebcbc", "url": "https://github.com/vaadin/flow/commit/f4f2e117ce8c5165e8a518ff36474e05b88ebcbc", "message": "fix: optimize handling of requests containing Range header (#9484)\n\nMore efficient parsing of the header value. Also, range count is capped at 16\r\n(additional will be ignored) and overlapping ranges at 2 (request will be denied\r\nif above).", "committedDate": "2020-11-25T13:04:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxNDM5NA==", "url": "https://github.com/vaadin/flow/pull/9490#discussion_r530414394", "bodyText": "Replace the synchronized class \"Stack\" by an unsynchronized one such as \"Deque\".", "author": "vaadin-bot", "createdAt": "2020-11-25T14:29:08Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "diffHunk": "@@ -196,13 +208,14 @@ private void writeRangeContents(String range, HttpServletResponse response,\n         long resourceLength = connection.getContentLengthLong();\n         Matcher rangeMatcher = BYTE_RANGE_PATTERN.matcher(byteRanges);\n \n-        List<Pair<Long, Long>> ranges = new ArrayList<>();\n-        while (rangeMatcher.find()) {\n+        Stack<Pair<Long, Long>> ranges = new Stack<>();", "originalCommit": "f4f2e117ce8c5165e8a518ff36474e05b88ebcbc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxNDQxMw==", "url": "https://github.com/vaadin/flow/pull/9490#discussion_r530414413", "bodyText": "Invoke method(s) only conditionally.", "author": "vaadin-bot", "createdAt": "2020-11-25T14:29:09Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "diffHunk": "@@ -211,11 +224,20 @@ private void writeRangeContents(String range, HttpServletResponse response,\n             if (end < start\n                     || (resourceLength >= 0 && start >= resourceLength)) {\n                 // illegal range -> 416\n+                getLogger().info(\"received an illegal range '{}' for resource '{}'\",\n+                        rangeMatcher.group(), resourceURL);", "originalCommit": "f4f2e117ce8c5165e8a518ff36474e05b88ebcbc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxNDQyOA==", "url": "https://github.com/vaadin/flow/pull/9490#discussion_r530414428", "bodyText": "Invoke method(s) only conditionally.", "author": "vaadin-bot", "createdAt": "2020-11-25T14:29:10Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "diffHunk": "@@ -196,13 +208,14 @@ private void writeRangeContents(String range, HttpServletResponse response,\n         long resourceLength = connection.getContentLengthLong();\n         Matcher rangeMatcher = BYTE_RANGE_PATTERN.matcher(byteRanges);\n \n-        List<Pair<Long, Long>> ranges = new ArrayList<>();\n-        while (rangeMatcher.find()) {\n+        Stack<Pair<Long, Long>> ranges = new Stack<>();\n+        while (rangeMatcher.find() && ranges.size() < MAX_RANGE_COUNT) {\n             String startGroup = rangeMatcher.group(1);\n             String endGroup = rangeMatcher.group(2);\n             if (startGroup.isEmpty() && endGroup.isEmpty()) {\n                 response.setContentLengthLong(0L);\n                 response.setStatus(416); // Range Not Satisfiable\n+                getLogger().info(\"received a malformed range: '{}'\", rangeMatcher.group());", "originalCommit": "f4f2e117ce8c5165e8a518ff36474e05b88ebcbc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}