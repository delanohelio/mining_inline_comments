{"pr_number": 9067, "pr_title": "Extract polymer templates into separate module", "pr_createdAt": "2020-09-26T17:25:41Z", "pr_url": "https://github.com/vaadin/flow/pull/9067", "timeline": [{"oid": "b2b0d3ee69d1dab7ce31f3dd0439b6f28984b840", "url": "https://github.com/vaadin/flow/commit/b2b0d3ee69d1dab7ce31f3dd0439b6f28984b840", "message": "Extract polymer templates into separate module", "committedDate": "2020-09-25T10:09:46Z", "type": "commit"}, {"oid": "a2da1bb101fec3cfdc2e6e853eceb3b2a943856f", "url": "https://github.com/vaadin/flow/commit/a2da1bb101fec3cfdc2e6e853eceb3b2a943856f", "message": "Fix serializable test and extract its part to polymer", "committedDate": "2020-09-27T18:27:45Z", "type": "commit"}, {"oid": "9f4f39fc0ea9006fb28260b4882b3438ba827861", "url": "https://github.com/vaadin/flow/commit/9f4f39fc0ea9006fb28260b4882b3438ba827861", "message": "Move template test resources to the correct place", "committedDate": "2020-09-28T05:33:48Z", "type": "commit"}, {"oid": "25997559818e421c118d47cbdaa98392892ce085", "url": "https://github.com/vaadin/flow/commit/25997559818e421c118d47cbdaa98392892ce085", "message": "Add missed class", "committedDate": "2020-09-28T05:59:56Z", "type": "commit"}, {"oid": "3197e97eaaa50677d0e85188af6b2b047b5df107", "url": "https://github.com/vaadin/flow/commit/3197e97eaaa50677d0e85188af6b2b047b5df107", "message": "Move standalone test resource", "committedDate": "2020-09-28T06:05:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcyNTU0Ng==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r495725546", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-28T06:58:10Z", "path": "flow-server/src/main/java/com/vaadin/flow/component/dependency/Uses.java", "diffHunk": "@@ -47,6 +52,7 @@\n @Retention(RUNTIME)\n @Target(TYPE)\n @Repeatable(Uses.Container.class)\n+@Deprecated\n public @interface Uses {", "originalCommit": "3197e97eaaa50677d0e85188af6b2b047b5df107", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcyNTU3Nw==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r495725577", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-28T06:58:14Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/PolymerServerEventHandlers.java", "diffHunk": "@@ -44,9 +45,14 @@\n  */\n @Deprecated\n public class PolymerServerEventHandlers", "originalCommit": "3197e97eaaa50677d0e85188af6b2b047b5df107", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcyNTU4Mg==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r495725582", "bodyText": "Remove this use of \"getHandlerAnnotation\"; it is deprecated.", "author": "vaadin-bot", "createdAt": "2020-09-28T06:58:15Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/AbstractServerHandlers.java", "diffHunk": "@@ -205,9 +216,20 @@ protected void ensureSupportedReturnType(Method method) {\n      * Gets the annotation which is used to mark methods as handlers.\n      *\n      * @return the handler marker annotation\n+     * @deprecated Implement {@link #getHandlerAnnotationFqn()} instead\n      */\n+    @Deprecated\n     protected abstract Class<? extends Annotation> getHandlerAnnotation();\n \n+    /**\n+     * Gets the annotation FQN which is used to mark methods as handlers.\n+     *\n+     * @return the handler marker annotation\n+     */\n+    protected String getHandlerAnnotationFqn() {\n+        return getHandlerAnnotation().getName();", "originalCommit": "3197e97eaaa50677d0e85188af6b2b047b5df107", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcyNTU5MQ==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r495725591", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-28T06:58:16Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/AbstractServerHandlers.java", "diffHunk": "@@ -205,9 +216,20 @@ protected void ensureSupportedReturnType(Method method) {\n      * Gets the annotation which is used to mark methods as handlers.\n      *\n      * @return the handler marker annotation\n+     * @deprecated Implement {@link #getHandlerAnnotationFqn()} instead\n      */\n+    @Deprecated\n     protected abstract Class<? extends Annotation> getHandlerAnnotation();", "originalCommit": "3197e97eaaa50677d0e85188af6b2b047b5df107", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcyNTU5Ng==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r495725596", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-28T06:58:17Z", "path": "flow-server/src/main/java/com/vaadin/flow/component/template/internal/DeprecatedPolymerTemplate.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.template.internal;\n+\n+import java.io.Serializable;\n+import java.lang.reflect.Type;\n+\n+import com.vaadin.flow.component.littemplate.LitTemplate;\n+\n+/**\n+ * Marker interface for Polymer Template.\n+ * \n+ * @author Vaadin Ltd\n+ * @since\n+ * \n+ * @deprecated Polymer template support is deprecated - we recommend you to use\n+ *             {@link LitTemplate} instead. Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n+ *\n+ */\n+@Deprecated\n+public interface DeprecatedPolymerTemplate extends Serializable {", "originalCommit": "3197e97eaaa50677d0e85188af6b2b047b5df107", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcyNTYxMA==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r495725610", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-28T06:58:18Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/AbstractTemplate.java", "diffHunk": "@@ -55,7 +56,7 @@\n  */\n @Deprecated\n public abstract class AbstractTemplate<M extends TemplateModel>", "originalCommit": "3197e97eaaa50677d0e85188af6b2b047b5df107", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcyNTYyMw==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r495725623", "bodyText": "Remove this use of \"DeprecatedPolymerTemplate\"; it is deprecated.", "author": "vaadin-bot", "createdAt": "2020-09-28T06:58:20Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ComponentMapping.java", "diffHunk": "@@ -62,10 +62,10 @@ public void setComponent(Component component) {\n             getNode().getFeature(ClientCallableHandlers.class)\n                     .componentSet(component);\n         }\n-        if (component instanceof PolymerTemplate<?>\n+        if (component instanceof DeprecatedPolymerTemplate", "originalCommit": "3197e97eaaa50677d0e85188af6b2b047b5df107", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcyNTYyNQ==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r495725625", "bodyText": "Remove this use of \"PolymerServerEventHandlers\"; it is deprecated.", "author": "vaadin-bot", "createdAt": "2020-09-28T06:58:21Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ComponentMapping.java", "diffHunk": "@@ -62,10 +62,10 @@ public void setComponent(Component component) {\n             getNode().getFeature(ClientCallableHandlers.class)\n                     .componentSet(component);\n         }\n-        if (component instanceof PolymerTemplate<?>\n+        if (component instanceof DeprecatedPolymerTemplate\n                 && getNode().hasFeature(PolymerServerEventHandlers.class)) {", "originalCommit": "3197e97eaaa50677d0e85188af6b2b047b5df107", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcyNTYzMQ==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r495725631", "bodyText": "Remove this use of \"PolymerServerEventHandlers\"; it is deprecated.", "author": "vaadin-bot", "createdAt": "2020-09-28T06:58:22Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ComponentMapping.java", "diffHunk": "@@ -62,10 +62,10 @@ public void setComponent(Component component) {\n             getNode().getFeature(ClientCallableHandlers.class)\n                     .componentSet(component);\n         }\n-        if (component instanceof PolymerTemplate<?>\n+        if (component instanceof DeprecatedPolymerTemplate\n                 && getNode().hasFeature(PolymerServerEventHandlers.class)) {\n             getNode().getFeature(PolymerServerEventHandlers.class)", "originalCommit": "3197e97eaaa50677d0e85188af6b2b047b5df107", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcyNTYzNg==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r495725636", "bodyText": "Remove this use of \"DeprecatedPolymerTemplate\"; it is deprecated.", "author": "vaadin-bot", "createdAt": "2020-09-28T06:58:22Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ComponentMapping.java", "diffHunk": "@@ -62,10 +62,10 @@ public void setComponent(Component component) {\n             getNode().getFeature(ClientCallableHandlers.class)\n                     .componentSet(component);\n         }\n-        if (component instanceof PolymerTemplate<?>\n+        if (component instanceof DeprecatedPolymerTemplate\n                 && getNode().hasFeature(PolymerServerEventHandlers.class)) {\n             getNode().getFeature(PolymerServerEventHandlers.class)\n-                    .componentSet((PolymerTemplate<?>) component);\n+                    .componentSet((DeprecatedPolymerTemplate) component);", "originalCommit": "3197e97eaaa50677d0e85188af6b2b047b5df107", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fa5e917b928ddf4a7e80602bbb9eecefbdeddfe0", "url": "https://github.com/vaadin/flow/commit/fa5e917b928ddf4a7e80602bbb9eecefbdeddfe0", "message": "Fix SQ reports", "committedDate": "2020-09-28T07:15:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ5OTYwMA==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496499600", "bodyText": "Non-blocking: I'm not sure if this should be in this specific module or in a reusable one", "author": "pleku", "createdAt": "2020-09-29T08:03:21Z", "path": "flow-polymer-template/src/test/java/com/vaadin/flow/component/HasCurrentService.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component;\n+\n+import static org.junit.Assert.assertNull;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+\n+import com.vaadin.flow.server.VaadinService;\n+\n+/**\n+ * Helper for test classes that need to have {@code VaadinService.getCurrent()}\n+ * populated.\n+ *\n+ * @author Vaadin Ltd\n+ * @since 1.0\n+ */\n+public abstract class HasCurrentService {", "originalCommit": "fa5e917b928ddf4a7e80602bbb9eecefbdeddfe0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUwMTQ5Nw==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496501497", "bodyText": "Now I realize the package name kind of points out that this should be in another module instead (even though it is still just a test class in test sources). So this feels like a wrong place for the class and is not probably good for maintenance to be left here", "author": "pleku", "createdAt": "2020-09-29T08:05:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ5OTYwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU0OTUxNg==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496549516", "bodyText": "I didn't get the final request......\nDo you suggest to extract this trivial class to a dedicated test module which will contain only one this class ?\nI'm pretty sure it's not worth it but if you insist I can complicate out build even more with this.", "author": "denis-anisimov", "createdAt": "2020-09-29T08:52:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ5OTYwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkzNTk3OQ==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496935979", "bodyText": "No, I'm not suggesting a new module, c'mon. The package name just seems odd for this module, it is a package for flow-server. This is not critical though as it is inside the test classes. But when I see this, it feels like a mistake and there is no explanation in the code. So I ask in review, why is this here ?", "author": "pleku", "createdAt": "2020-09-29T18:02:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ5OTYwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIzODQzOQ==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r497238439", "bodyText": "that this should be in another module instead\n\nAh, sorry I thought you meant to share this class : since the class is originally from flow-server tests and it's duplicated here. That's why it has this package name.\nThis is a generic superclass so the package name didn't matter for me: it can be used from any class.\nBut OK, I will move to some proper (I hope) package here...", "author": "denis-anisimov", "createdAt": "2020-09-30T04:38:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ5OTYwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUwNjExMQ==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496506111", "bodyText": "This should be probably changed to instead just list the limitations. Or link to those in the docs.\nA user might not know anything about polymer template and doesn't know where to look for.", "author": "pleku", "createdAt": "2020-09-29T08:09:39Z", "path": "flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplate.java", "diffHunk": "@@ -43,7 +42,7 @@\n  * given value to the annotation.\n  * <p>\n  * Note that injected components will have the same limitations as with\n- * {@link PolymerTemplate}.\n+ * {@code PolymerTemplate}.", "originalCommit": "fa5e917b928ddf4a7e80602bbb9eecefbdeddfe0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUwNjQzNg==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496506436", "bodyText": "(Can be a separate issue)", "author": "pleku", "createdAt": "2020-09-29T08:09:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUwNjExMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1MTMwNA==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496551304", "bodyText": "Let it be a separate issue since I didn't get the exact request and it's out if the scope of the PR.", "author": "denis-anisimov", "createdAt": "2020-09-29T08:55:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUwNjExMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUxOTY1MA==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496519650", "bodyText": "Non-blocking: I think removing this will break Karibu-testing, heads up @mvysny", "author": "pleku", "createdAt": "2020-09-29T08:22:04Z", "path": "flow-server/src/main/java/com/vaadin/flow/di/Instantiator.java", "diffHunk": "@@ -228,12 +226,4 @@ default I18NProvider getI18NProvider() {\n         return getOrCreate(I18NProvider.class);\n     }\n \n-    /**\n-     * Returns {@link TemplateParser} for this service.\n-     *\n-     * @return A non-null template parser.\n-     */\n-    default TemplateParser getTemplateParser() {", "originalCommit": "fa5e917b928ddf4a7e80602bbb9eecefbdeddfe0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1MzUxMA==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496553510", "bodyText": "This code should not have been added here at all: Instantiator should stay quite generic for such functionality.\nIt's simply impossible to extract polymer templates into a separate module without removing this alien method.\nThere is a replacement for this. I've introduced a factory which can be used to get a parser instance via instantiator.\nThis is the proper way of doing things.\nSo Karibu-testing will need to correct the code. But yes, it's a breaking change.", "author": "denis-anisimov", "createdAt": "2020-09-29T08:58:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUxOTY1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUyMzU2NQ==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496523565", "bodyText": "I would just add it directly to the message instead of as an static final variable as it is used only here", "author": "pleku", "createdAt": "2020-09-29T08:25:34Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementPropertyMap.java", "diffHunk": "@@ -274,7 +275,7 @@ private AllowUpdate isUpdateFromClientAllowedByFilter(StateNode node,\n                     getLogger().warn(\"Ignoring model update for {}. \"\n                             + \"For security reasons, the property must have a \"\n                             + \"two-way binding in the template, be annotated with @{} in the model, or be defined as synchronized.\",\n-                            key, AllowClientUpdates.class.getSimpleName());\n+                            key, ALLOW_CLIENT_UPDATES_POLYMER);", "originalCommit": "fa5e917b928ddf4a7e80602bbb9eecefbdeddfe0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUyOTYxNg==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496529616", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        + \"two-way binding in the template, be annotated with @{} in the model, or be defined as synchronized.\",\n          \n          \n            \n                                        + \"defined as synchronized. In addition for (deprecated) polymer templates the model could be annotated with @AllowClientUpdates or a two-way binding could be used.\",", "author": "pleku", "createdAt": "2020-09-29T08:31:11Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementPropertyMap.java", "diffHunk": "@@ -274,7 +275,7 @@ private AllowUpdate isUpdateFromClientAllowedByFilter(StateNode node,\n                     getLogger().warn(\"Ignoring model update for {}. \"\n                             + \"For security reasons, the property must have a \"\n                             + \"two-way binding in the template, be annotated with @{} in the model, or be defined as synchronized.\",", "originalCommit": "fa5e917b928ddf4a7e80602bbb9eecefbdeddfe0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUyOTgzOQ==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496529839", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        + \"For security reasons, the property must have a \"\n          \n          \n            \n                                        + \"For security reasons, the property must be \"", "author": "pleku", "createdAt": "2020-09-29T08:31:24Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementPropertyMap.java", "diffHunk": "@@ -274,7 +275,7 @@ private AllowUpdate isUpdateFromClientAllowedByFilter(StateNode node,\n                     getLogger().warn(\"Ignoring model update for {}. \"\n                             + \"For security reasons, the property must have a \"", "originalCommit": "fa5e917b928ddf4a7e80602bbb9eecefbdeddfe0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUzNDg2NQ==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496534865", "bodyText": "Test sources and this package name in flow-server ??? This seems like a mistake, if it is not, then it should be clarified in code why is this class here and what is its role", "author": "pleku", "createdAt": "2020-09-29T08:36:00Z", "path": "flow-server/src/test/java/com/vaadin/flow/component/polymertemplate/EventHandler.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.polymertemplate;", "originalCommit": "fa5e917b928ddf4a7e80602bbb9eecefbdeddfe0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU3Mjc5Mg==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496572792", "bodyText": "This is not a mistake.\nIt is used to test the in flow-server written via reflection and it's impossible to test it without having class in the classpath.", "author": "denis-anisimov", "createdAt": "2020-09-29T09:27:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUzNDg2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUzNjI3Mg==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496536272", "bodyText": "Same thing - it should be clarified in code why is this class here to help the maintainers. Now it just looks like a mistake at a glance", "author": "pleku", "createdAt": "2020-09-29T08:37:14Z", "path": "flow-server/src/test/java/com/vaadin/flow/component/polymertemplate/RepeatIndex.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.component.polymertemplate;", "originalCommit": "fa5e917b928ddf4a7e80602bbb9eecefbdeddfe0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU0MDk2MQ==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496540961", "bodyText": "This added code does not have a unit test in ReflectToolsTest", "author": "pleku", "createdAt": "2020-09-29T08:41:34Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/ReflectTools.java", "diffHunk": "@@ -763,6 +764,67 @@ public static Method getFunctionalMethod(Class<?> functionalClass) {\n         return Optional.empty();\n     }\n \n+    /**\n+     * Checks whether the {@code element} has annotation whose FQN is\n+     * {@code annotationFqn}.\n+     * \n+     * @param element\n+     *            annotated element (field, method, etc.)\n+     * @param annotationFqn\n+     *            annotation FQN\n+     * @return {@code true} is {@code element} has annotation whose FQN is\n+     *         {@code annotationFqn}, {@code false} otherwise\n+     */\n+    public static boolean hasAnnotation(AnnotatedElement element,\n+            String annotationFqn) {\n+        return getAnnotation(element, annotationFqn).isPresent();\n+    }\n+\n+    /**\n+     * Gets the annotation method return value.\n+     * \n+     * @param annotation\n+     *            the annotation\n+     * @param methodName\n+     *            the method name\n+     * @return an optional value, or an empty optional if element has no\n+     *         annotation with required {@code annotationFqn}\n+     */\n+    public static Object getAnnotationMethodValue(Annotation annotation,", "originalCommit": "fa5e917b928ddf4a7e80602bbb9eecefbdeddfe0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1ODU0Mw==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496558543", "bodyText": "Didn't find tests for majority of methods in ReflectTools .\nBut sure.", "author": "denis-anisimov", "createdAt": "2020-09-29T09:05:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU0MDk2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUxOTcyMQ==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496519721", "bodyText": "Test name nor expected exception explain why this should throw and not return content.", "author": "caalador", "createdAt": "2020-09-29T08:22:08Z", "path": "flow-polymer-template/src/test/java/com/vaadin/flow/component/CompositeTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.vaadin.flow.component;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import org.jsoup.Jsoup;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import com.vaadin.flow.component.polymertemplate.PolymerTemplate;\n+import com.vaadin.flow.component.polymertemplate.TemplateParser.TemplateData;\n+import com.vaadin.flow.dom.Element;\n+import com.vaadin.flow.function.DeploymentConfiguration;\n+import com.vaadin.flow.server.VaadinService;\n+import com.vaadin.flow.templatemodel.TemplateModel;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+\n+@NotThreadSafe\n+public class CompositeTest {\n+\n+    @Tag(\"div\")\n+    public static class MyTemplate extends PolymerTemplate<TemplateModel> {\n+\n+        public MyTemplate() {\n+            super((clazz, tag, service) -> new TemplateData(\"\",\n+                    Jsoup.parse(\"<dom-module id='div'></dom-module>\")));\n+        }\n+    }\n+\n+    public static class KeyNotifierComposite extends Composite<MyTemplate>\n+            implements KeyNotifier {\n+\n+        @Override\n+        protected MyTemplate initContent() {\n+            MyTemplate template = new MyTemplate();\n+\n+            addKeyUpListener(Key.ENTER, event -> {\n+            }, KeyModifier.CONTROL);\n+\n+            return template;\n+        }\n+    }\n+\n+    private VaadinService service;\n+\n+    @Before\n+    public void setup() {\n+        service = Mockito.mock(VaadinService.class);\n+        VaadinService.setCurrent(service);\n+        DeploymentConfiguration configuration = Mockito\n+                .mock(DeploymentConfiguration.class);\n+\n+        Mockito.when(service.getDeploymentConfiguration())\n+                .thenReturn(configuration);\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        VaadinService.setCurrent(null);\n+    }\n+\n+    @Test(expected = IllegalStateException.class)\n+    public void getContent_compositeIsKeyNotifier() {", "originalCommit": "fa5e917b928ddf4a7e80602bbb9eecefbdeddfe0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU2NTU0OQ==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496565549", "bodyText": "Indeed.\nhttps://github.com/vaadin/flow/blob/master/flow-server/src/test/java/com/vaadin/flow/component/CompositeTest.java#L429\nThis PR is mostly about refactoring: moves and renames. There are not that much a new code.\nThis is not a new code and this is out of the scope of this PR.", "author": "denis-anisimov", "createdAt": "2020-09-29T09:16:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUxOTcyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUyMjU1NQ==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496522555", "bodyText": "unused method in class that is also a duplicate of the one in the server package.", "author": "caalador", "createdAt": "2020-09-29T08:24:41Z", "path": "flow-polymer-template/src/test/java/com/vaadin/flow/component/CompositeTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.vaadin.flow.component;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import org.jsoup.Jsoup;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import com.vaadin.flow.component.polymertemplate.PolymerTemplate;\n+import com.vaadin.flow.component.polymertemplate.TemplateParser.TemplateData;\n+import com.vaadin.flow.dom.Element;\n+import com.vaadin.flow.function.DeploymentConfiguration;\n+import com.vaadin.flow.server.VaadinService;\n+import com.vaadin.flow.templatemodel.TemplateModel;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+\n+@NotThreadSafe\n+public class CompositeTest {\n+\n+    @Tag(\"div\")\n+    public static class MyTemplate extends PolymerTemplate<TemplateModel> {\n+\n+        public MyTemplate() {\n+            super((clazz, tag, service) -> new TemplateData(\"\",\n+                    Jsoup.parse(\"<dom-module id='div'></dom-module>\")));\n+        }\n+    }\n+\n+    public static class KeyNotifierComposite extends Composite<MyTemplate>\n+            implements KeyNotifier {\n+\n+        @Override\n+        protected MyTemplate initContent() {\n+            MyTemplate template = new MyTemplate();\n+\n+            addKeyUpListener(Key.ENTER, event -> {\n+            }, KeyModifier.CONTROL);\n+\n+            return template;\n+        }\n+    }\n+\n+    private VaadinService service;\n+\n+    @Before\n+    public void setup() {\n+        service = Mockito.mock(VaadinService.class);\n+        VaadinService.setCurrent(service);\n+        DeploymentConfiguration configuration = Mockito\n+                .mock(DeploymentConfiguration.class);\n+\n+        Mockito.when(service.getDeploymentConfiguration())\n+                .thenReturn(configuration);\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        VaadinService.setCurrent(null);\n+    }\n+\n+    @Test(expected = IllegalStateException.class)\n+    public void getContent_compositeIsKeyNotifier() {\n+        KeyNotifierComposite composite = new KeyNotifierComposite();\n+        composite.getContent();\n+    }\n+\n+    /*\n+     * This is just a test for #1181.\n+     */\n+    @Test\n+    // @Ignore(\"Failing after adding connect client generators\")\n+    public void templateInsideComposite_compositeCanBeAdded() {\n+        class MyComponent extends Composite<MyTemplate> {\n+\n+        }\n+\n+        MyComponent component = new MyComponent();\n+\n+        UI ui = new UI();\n+        // Doesn't throw any exception\n+        ui.add(component);\n+    }\n+\n+    public static void assertElementChildren(Element parent,", "originalCommit": "fa5e917b928ddf4a7e80602bbb9eecefbdeddfe0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUyNTE3MQ==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496525171", "bodyText": "Could be nicer with an import instead.", "author": "caalador", "createdAt": "2020-09-29T08:27:05Z", "path": "flow-polymer-template/src/test/java/com/vaadin/flow/component/polymertemplate/PolymerTemplateTest.java", "diffHunk": "@@ -67,7 +67,8 @@\n import net.jcip.annotations.NotThreadSafe;\n \n @NotThreadSafe\n-public class PolymerTemplateTest extends HasCurrentService {\n+public class PolymerTemplateTest\n+        extends com.vaadin.flow.component.HasCurrentService {", "originalCommit": "fa5e917b928ddf4a7e80602bbb9eecefbdeddfe0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUyNzI2MQ==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496527261", "bodyText": "Why do we extend HasCurrentService if we override everything from there?", "author": "caalador", "createdAt": "2020-09-29T08:28:59Z", "path": "flow-polymer-template/src/test/java/com/vaadin/flow/component/polymertemplate/PolymerTemplateTest.java", "diffHunk": "@@ -78,6 +79,25 @@\n     // Field to prevent current instance from being garbage collected\n     private UI ui;\n \n+    private VaadinService service;", "originalCommit": "fa5e917b928ddf4a7e80602bbb9eecefbdeddfe0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU2NzU5MQ==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496567591", "bodyText": "Leftover, thanks", "author": "denis-anisimov", "createdAt": "2020-09-29T09:19:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUyNzI2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUzNTEwMg==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496535102", "bodyText": "Import would be cleaner.", "author": "caalador", "createdAt": "2020-09-29T08:36:13Z", "path": "flow-polymer-template/src/test/java/com/vaadin/flow/templatemodel/TemplateModelProxyHandlerTest.java", "diffHunk": "@@ -6,15 +6,15 @@\n \n import com.vaadin.flow.component.UI;\n import com.vaadin.flow.function.DeploymentConfiguration;\n-import com.vaadin.flow.internal.HasCurrentService;\n import com.vaadin.flow.server.VaadinService;\n import com.vaadin.flow.templatemodel.TemplateModelTest.EmptyModel;\n import com.vaadin.flow.templatemodel.TemplateModelTest.EmptyModelTemplate;\n \n import net.jcip.annotations.NotThreadSafe;\n \n @NotThreadSafe\n-public class TemplateModelProxyHandlerTest extends HasCurrentService {\n+public class TemplateModelProxyHandlerTest\n+        extends com.vaadin.flow.component.HasCurrentService {", "originalCommit": "fa5e917b928ddf4a7e80602bbb9eecefbdeddfe0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUzNTQwMw==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496535403", "bodyText": "import would be cleaner", "author": "caalador", "createdAt": "2020-09-29T08:36:30Z", "path": "flow-polymer-template/src/test/java/com/vaadin/flow/templatemodel/TemplateModelWithEncodersTest.java", "diffHunk": "@@ -23,7 +22,8 @@\n import net.jcip.annotations.NotThreadSafe;\n \n @NotThreadSafe\n-public class TemplateModelWithEncodersTest extends HasCurrentService {\n+public class TemplateModelWithEncodersTest\n+        extends com.vaadin.flow.component.HasCurrentService {", "originalCommit": "fa5e917b928ddf4a7e80602bbb9eecefbdeddfe0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1MDgzNA==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496550834", "bodyText": "Shouldn't any test requiring the for Polymer EventHandler annotation be moved to the polymer package and not duplicate the annotation for a test.", "author": "caalador", "createdAt": "2020-09-29T08:54:31Z", "path": "flow-server/src/test/java/com/vaadin/flow/component/polymertemplate/EventHandler.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.polymertemplate;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import com.vaadin.flow.component.EventData;\n+import com.vaadin.flow.component.littemplate.LitTemplate;\n+import com.vaadin.flow.dom.DisabledUpdateMode;\n+\n+/**\n+ * Publishes the annotated method so it can be invoked from the client side as\n+ * template event handlers.\n+ *\n+ * @see EventData\n+ * @author Vaadin Ltd\n+ * @since 1.0\n+ *\n+ * @deprecated Event handlers are not supported by Lit templates. Add a\n+ *             corresponding DOM listener from server side API instead or fire a\n+ *             custom event from client side template. Also you may handle an\n+ *             event directly on the client side and the server side may be\n+ *             called from this handler via {@code this.$server._some_method}.\n+ *             Polymer template support is deprecated - we recommend you to use\n+ *             {@link LitTemplate} instead. Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n+ */\n+@Deprecated\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.METHOD)\n+@Documented\n+public @interface EventHandler {", "originalCommit": "fa5e917b928ddf4a7e80602bbb9eecefbdeddfe0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU3Njk2NQ==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496576965", "bodyText": "I don't see how.\nThe test can be moved but I see it's as a very bad idea.\nThe test checks the functionality which has not been moved: that's the reason why it's here.\nHaving the functionality in flow-server  but the test for it in flow-polymer-template  looks for me absolutely unacceptable.", "author": "denis-anisimov", "createdAt": "2020-09-29T09:33:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1MDgzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU5MTc0Mw==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496591743", "bodyText": "I wouldn't move the EventHandler class at all out from server as long as PublishedServerEventHandlerRpcHandler is automatically added to the handler list.", "author": "caalador", "createdAt": "2020-09-29T09:56:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1MDgzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwMjE3MA==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496602170", "bodyText": "The only reason why it's added is the absence of simple way to move it to the separate module.\nWell, this class has in fact only one interface method which can be called via reflection and everything else may be moved into the extracted module.\nBut the situation with PolymerServerEventHandlers  is different.\nThe point do not move the classes just because impl class can't be moved makes the whole change questionable: why to move things at all if they may stay here?\nI will move logic of PublishedServerEventHandlerRpcHandler  to the module but not the PolymerServerEventHandlers.", "author": "denis-anisimov", "createdAt": "2020-09-29T10:14:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1MDgzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1MTI5NQ==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496551295", "bodyText": "Shouldn't tests using the RepeatIndex that is a Polymer annotation be moved to polymer package.", "author": "caalador", "createdAt": "2020-09-29T08:55:10Z", "path": "flow-server/src/test/java/com/vaadin/flow/component/polymertemplate/RepeatIndex.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.component.polymertemplate;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import com.vaadin.flow.component.EventData;\n+import com.vaadin.flow.component.littemplate.LitTemplate;\n+\n+/**\n+ * Allows to receive index of an element in dom-repeat Polymer template section.\n+ *\n+ * Can be applied on parameters of {@code int} and {@link Integer} types.\n+ *\n+ * This is a shorthand for {@code @EventData(\"event.model.index\")}, for more\n+ * information, refer to {@link EventData}.\n+ *\n+ * @author Vaadin Ltd\n+ * @since 1.0\n+ * @deprecated dom-repeat is not support by Lit templates but you may still use\n+ *             {@code @EventData(\"some_data\")} directly to receive data from the\n+ *             client side. Polymer template support is deprecated - we\n+ *             recommend you to use {@link LitTemplate} instead. Read more\n+ *             details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n+ */\n+@Deprecated\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target({ ElementType.PARAMETER })\n+@Documented\n+public @interface RepeatIndex {", "originalCommit": "fa5e917b928ddf4a7e80602bbb9eecefbdeddfe0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1MjExNA==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496552114", "bodyText": "Shouldn't this test class be moved as the feature is polymer and should be usable only with the opt in package?", "author": "caalador", "createdAt": "2020-09-29T08:56:18Z", "path": "flow-server/src/test/java/com/vaadin/flow/internal/nodefeature/PolymerServerEventHandlersTest.java", "diffHunk": "@@ -65,15 +64,24 @@\n     private Map<String, Method> correctlyAnnotatedHandlers;\n     private Map<String, Method> wronglyAnnotatedHandlers;\n ", "originalCommit": "fa5e917b928ddf4a7e80602bbb9eecefbdeddfe0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU3NzU1Mw==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496577553", "bodyText": "Answered to all such questions above.", "author": "denis-anisimov", "createdAt": "2020-09-29T09:34:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1MjExNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1MjM1MA==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496552350", "bodyText": "Shouldn't this test class be moved as the feature is polymer and should be usable only with the opt in package?", "author": "caalador", "createdAt": "2020-09-29T08:56:38Z", "path": "flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandlerTest.java", "diffHunk": "@@ -34,36 +33,30 @@\n import com.vaadin.flow.component.internal.PendingJavaScriptInvocation;\n import com.vaadin.flow.component.internal.UIInternals.JavaScriptInvocation;\n import com.vaadin.flow.component.polymertemplate.EventHandler;\n-import com.vaadin.flow.component.polymertemplate.PolymerTemplate;\n-import com.vaadin.flow.component.polymertemplate.TemplateParser.TemplateData;\n+import com.vaadin.flow.component.template.internal.DeprecatedPolymerTemplate;\n import com.vaadin.flow.dom.DisabledUpdateMode;\n import com.vaadin.flow.function.DeploymentConfiguration;\n import com.vaadin.flow.server.VaadinService;\n import com.vaadin.flow.shared.JsonConstants;\n-import com.vaadin.flow.templatemodel.TemplateModel;\n import com.vaadin.tests.util.MockUI;\n \n import elemental.json.Json;\n import elemental.json.JsonArray;\n import elemental.json.JsonObject;\n import elemental.json.JsonValue;\n+import net.jcip.annotations.NotThreadSafe;\n \n @NotThreadSafe\n public class PublishedServerEventHandlerRpcHandlerTest {", "originalCommit": "fa5e917b928ddf4a7e80602bbb9eecefbdeddfe0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "80b31754157e7bb918794210f6be55db4ab119af", "url": "https://github.com/vaadin/flow/commit/80b31754157e7bb918794210f6be55db4ab119af", "message": "Update flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementPropertyMap.java\n\nCo-authored-by: Pekka Hyv\u00f6nen <pekka@vaadin.com>", "committedDate": "2020-09-29T09:08:55Z", "type": "commit"}, {"oid": "97dde3fc20121b7cf5c7d1dc5bf77fe8894bea6d", "url": "https://github.com/vaadin/flow/commit/97dde3fc20121b7cf5c7d1dc5bf77fe8894bea6d", "message": "Remove extra file\nAdd comments\nAdd unit tests", "committedDate": "2020-09-29T09:45:29Z", "type": "commit"}, {"oid": "97dde3fc20121b7cf5c7d1dc5bf77fe8894bea6d", "url": "https://github.com/vaadin/flow/commit/97dde3fc20121b7cf5c7d1dc5bf77fe8894bea6d", "message": "Remove extra file\nAdd comments\nAdd unit tests", "committedDate": "2020-09-29T09:45:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU5ODYxOQ==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496598619", "bodyText": "Retention and Target should probably not be removed.", "author": "caalador", "createdAt": "2020-09-29T10:07:47Z", "path": "flow-server/src/test/java/com/vaadin/flow/component/polymertemplate/EventHandler.java", "diffHunk": "@@ -15,45 +15,14 @@\n  */\n package com.vaadin.flow.component.polymertemplate;\n \n-import java.lang.annotation.Documented;\n-import java.lang.annotation.ElementType;\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.annotation.Target;\n-\n-import com.vaadin.flow.component.EventData;\n-import com.vaadin.flow.component.littemplate.LitTemplate;\n import com.vaadin.flow.dom.DisabledUpdateMode;\n \n /**\n- * Publishes the annotated method so it can be invoked from the client side as\n- * template event handlers.\n- *\n- * @see EventData\n- * @author Vaadin Ltd\n- * @since 1.0\n- *\n- * @deprecated Event handlers are not supported by Lit templates. Add a\n- *             corresponding DOM listener from server side API instead or fire a\n- *             custom event from client side template. Also you may handle an\n- *             event directly on the client side and the server side may be\n- *             called from this handler via {@code this.$server._some_method}.\n- *             Polymer template support is deprecated - we recommend you to use\n- *             {@link LitTemplate} instead. Read more details from <a href=\n- *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n- *             Vaadin blog.</a>\n+ * \n+ * This class here is for testing purpose: it's impossible to test polymer\n+ * templates related code which has not been moved to a separate module.\n  */\n-@Deprecated\n-@Retention(RetentionPolicy.RUNTIME)", "originalCommit": "97dde3fc20121b7cf5c7d1dc5bf77fe8894bea6d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d129a12f05c9373faba4c8db3686b64499479a8e", "url": "https://github.com/vaadin/flow/commit/d129a12f05c9373faba4c8db3686b64499479a8e", "message": "Merge branch '9039-polymer-separate-module' of\ngit@github.com:vaadin/flow.git into 9039-polymer-separate-module\n\nConflicts:\n\tflow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementPropertyMap.java", "committedDate": "2020-09-29T10:42:12Z", "type": "commit"}, {"oid": "d47e0764489838fff13db615d5c5d33b448c5123", "url": "https://github.com/vaadin/flow/commit/d47e0764489838fff13db615d5c5d33b448c5123", "message": "Correct reflection code", "committedDate": "2020-09-29T10:54:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYzMTgzNA==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496631834", "bodyText": "Not an overriding method after merge commit.", "author": "caalador", "createdAt": "2020-09-29T11:08:51Z", "path": "flow-server/src/test/java/com/vaadin/flow/internal/nodefeature/PolymerServerEventHandlersTest.java", "diffHunk": "@@ -65,15 +64,24 @@\n     private Map<String, Method> correctlyAnnotatedHandlers;\n     private Map<String, Method> wronglyAnnotatedHandlers;\n \n-    @Tag(\"polymer\")\n-    private static class CorrectAnnotationUsage\n-            extends PolymerTemplate<TemplateModel> {\n+    private static class AbstractTemplate extends Component\n+            implements DeprecatedPolymerTemplate {\n+\n+        @Override", "originalCommit": "d47e0764489838fff13db615d5c5d33b448c5123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYzMTg2OQ==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496631869", "bodyText": "Not an overriding method after merge commit.", "author": "caalador", "createdAt": "2020-09-29T11:08:55Z", "path": "flow-server/src/test/java/com/vaadin/flow/internal/nodefeature/PolymerServerEventHandlersTest.java", "diffHunk": "@@ -65,15 +64,24 @@\n     private Map<String, Method> correctlyAnnotatedHandlers;\n     private Map<String, Method> wronglyAnnotatedHandlers;\n \n-    @Tag(\"polymer\")\n-    private static class CorrectAnnotationUsage\n-            extends PolymerTemplate<TemplateModel> {\n+    private static class AbstractTemplate extends Component\n+            implements DeprecatedPolymerTemplate {\n+\n+        @Override\n+        public boolean isSupportedClass(Class<?> type) {\n+            return false;\n+        }\n \n-        CorrectAnnotationUsage() {\n-            super((clazz, tag, service) -> new TemplateData(\"\",\n-                    Jsoup.parse(\"<dom-module id='polymer'></dom-module>\")));\n+        @Override", "originalCommit": "d47e0764489838fff13db615d5c5d33b448c5123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "772d9fcded0bcd68ef85da9f7032c3b00a754709", "url": "https://github.com/vaadin/flow/commit/772d9fcded0bcd68ef85da9f7032c3b00a754709", "message": "Fix compilation error", "committedDate": "2020-09-29T11:14:24Z", "type": "commit"}, {"oid": "8cb297a0fa707232221ac8fe4876a2bf1d5d80e6", "url": "https://github.com/vaadin/flow/commit/8cb297a0fa707232221ac8fe4876a2bf1d5d80e6", "message": "Implement Serializable", "committedDate": "2020-09-29T12:14:30Z", "type": "commit"}, {"oid": "d0d85ddb881de110d33dc32051e90c7d61066abe", "url": "https://github.com/vaadin/flow/commit/d0d85ddb881de110d33dc32051e90c7d61066abe", "message": "Correct reflection call", "committedDate": "2020-09-29T12:41:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyMjEyNQ==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496722125", "bodyText": "Define and throw a dedicated exception instead of using a generic one.", "author": "vaadin-bot", "createdAt": "2020-09-29T13:36:15Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/rpc/PublishedServerEventHandlerRpcHandler.java", "diffHunk": "@@ -0,0 +1,371 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.polymertemplate.rpc;\n+\n+import java.io.Serializable;\n+import java.lang.reflect.Array;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.component.ClientCallable;\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.Composite;\n+import com.vaadin.flow.component.littemplate.LitTemplate;\n+import com.vaadin.flow.component.polymertemplate.EventHandler;\n+import com.vaadin.flow.component.polymertemplate.PolymerTemplate;\n+import com.vaadin.flow.dom.DisabledUpdateMode;\n+import com.vaadin.flow.internal.ReflectTools;\n+import com.vaadin.flow.internal.StateNode;\n+import com.vaadin.flow.internal.nodefeature.ClientCallableHandlers;\n+import com.vaadin.flow.internal.nodefeature.ComponentMapping;\n+import com.vaadin.flow.internal.nodefeature.PolymerServerEventHandlers;\n+import com.vaadin.flow.server.communication.rpc.DefaultRpcDecoder;\n+import com.vaadin.flow.server.communication.rpc.RpcDecodeException;\n+import com.vaadin.flow.server.communication.rpc.RpcDecoder;\n+import com.vaadin.flow.server.communication.rpc.StringToEnumDecoder;\n+import com.vaadin.flow.server.communication.rpc.StringToNumberDecoder;\n+import com.vaadin.flow.shared.JsonConstants;\n+import com.vaadin.flow.templatemodel.ModelType;\n+\n+import elemental.json.Json;\n+import elemental.json.JsonArray;\n+import elemental.json.JsonObject;\n+import elemental.json.JsonType;\n+import elemental.json.JsonValue;\n+\n+/**\n+ * RPC handler for events triggered through <code>element.$server</code> or\n+ * simply <code>$server</code> in template event handlers.\n+ *\n+ * @see JsonConstants#RPC_PUBLISHED_SERVER_EVENT_HANDLER\n+ *\n+ * @author Vaadin Ltd\n+ * @since 1.0\n+ *\n+ * @deprecated Polymer template support is deprecated - we recommend you to use\n+ *             {@link LitTemplate} instead. Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n+ */\n+@Deprecated\n+public class PublishedServerEventHandlerRpcHandler implements Serializable {\n+\n+    private static final Collection<RpcDecoder> DECODERS = loadDecoders();\n+\n+    public static void handleNode(StateNode node, JsonObject invocationJson) {\n+        assert invocationJson\n+                .hasKey(JsonConstants.RPC_TEMPLATE_EVENT_METHOD_NAME);\n+        String methodName = invocationJson\n+                .getString(JsonConstants.RPC_TEMPLATE_EVENT_METHOD_NAME);\n+        if (methodName == null) {\n+            throw new IllegalArgumentException(\n+                    \"Event handler method name may not be null\");\n+        }\n+        JsonValue args = invocationJson\n+                .get(JsonConstants.RPC_TEMPLATE_EVENT_ARGS);\n+        if (args == null) {\n+            args = Json.createArray();\n+        }\n+        if (args.getType() != JsonType.ARRAY) {\n+            throw new IllegalArgumentException(\n+                    \"Incorrect type for method arguments: \" + args.getClass());\n+        }\n+        int promiseId;\n+        if (invocationJson.hasKey(JsonConstants.RPC_TEMPLATE_EVENT_PROMISE)) {\n+            promiseId = (int) invocationJson\n+                    .getNumber(JsonConstants.RPC_TEMPLATE_EVENT_PROMISE);\n+        } else {\n+            promiseId = -1;\n+        }\n+        assert node.hasFeature(ComponentMapping.class);\n+        Optional<Component> component = ComponentMapping.getComponent(node);\n+        if (!component.isPresent()) {\n+            throw new IllegalStateException(\n+                    \"Unable to handle RPC template event JSON message: \"\n+                            + \"there is no component available for the target node\");\n+        }\n+\n+        boolean execute = node.isEnabled();\n+\n+        if (!execute) {\n+            ClientCallableHandlers clientDelegate = node\n+                    .getFeature(ClientCallableHandlers.class);\n+            PolymerServerEventHandlers eventHandlers = node\n+                    .getFeature(PolymerServerEventHandlers.class);\n+            if (clientDelegate.hasHandler(methodName)) {\n+                execute = DisabledUpdateMode.ALWAYS.equals(\n+                        clientDelegate.getDisabledUpdateMode(methodName));\n+            }\n+            if (eventHandlers.hasHandler(methodName)) {\n+                execute = execute || DisabledUpdateMode.ALWAYS.equals(\n+                        eventHandlers.getDisabledUpdateMode(methodName));\n+            }\n+        }\n+\n+        if (execute) {\n+            invokeMethod(component.get(), component.get().getClass(),\n+                    methodName, (JsonArray) args, promiseId);\n+        }\n+    }\n+\n+    static void invokeMethod(Component instance, Class<?> clazz,\n+            String methodName, JsonArray args, int promiseId) {\n+        assert instance != null;\n+        Optional<Method> method = findMethod(instance, clazz, methodName);\n+        if (method.isPresent()) {\n+            invokeMethod(instance, method.get(), args, promiseId);\n+        } else if (instance instanceof Composite) {\n+            Component compositeContent = ((Composite<?>) instance).getContent();\n+            invokeMethod(compositeContent, compositeContent.getClass(),\n+                    methodName, args, promiseId);\n+        } else {\n+            String msg = String.format(\"Neither class '%s' \"\n+                    + \"nor its super classes declare event handler method '%s'\",\n+                    instance.getClass().getName(), methodName);\n+            throw new IllegalStateException(msg);\n+        }\n+    }\n+\n+    private static Optional<Method> findMethod(Component instance,\n+            Class<?> clazz, String methodName) {\n+        List<Method> methods = Stream.of(clazz.getDeclaredMethods())\n+                .filter(method -> methodName.equals(method.getName()))\n+                .filter(method -> method.isAnnotationPresent(EventHandler.class)\n+                        || method.isAnnotationPresent(ClientCallable.class))\n+                .collect(Collectors.toList());\n+        if (methods.size() > 1) {\n+            String msg = String.format(\"Class '%s' contains \"\n+                    + \"several event handler method with the same name '%s'\",\n+                    instance.getClass().getName(), methodName);\n+            throw new IllegalStateException(msg);\n+        } else if (methods.size() == 1) {\n+            return Optional.of(methods.get(0));\n+        } else if (!Component.class.equals(clazz)) {\n+            return findMethod(instance, clazz.getSuperclass(), methodName);\n+        } else {\n+            return Optional.empty();\n+        }\n+    }\n+\n+    private static void invokeMethod(Component instance, Method method,\n+            JsonArray args, int promiseId) {\n+        if (promiseId == -1) {\n+            invokeMethod(instance, method, args);\n+        } else {\n+            try {\n+                Serializable returnValue = (Serializable) invokeMethod(instance,\n+                        method, args);\n+\n+                instance.getElement()\n+                        .executeJs(\"this.$server['\"\n+                                + JsonConstants.RPC_PROMISE_CALLBACK_NAME\n+                                + \"']($0, true, $1)\",\n+                                Integer.valueOf(promiseId), returnValue);\n+            } catch (RuntimeException e) {\n+                instance.getElement()\n+                        .executeJs(\"this.$server['\"\n+                                + JsonConstants.RPC_PROMISE_CALLBACK_NAME\n+                                + \"']($0, false)\", Integer.valueOf(promiseId));\n+\n+                throw e;\n+            }\n+        }\n+    }\n+\n+    private static Object invokeMethod(Component instance, Method method,\n+            JsonArray args) {\n+        try {\n+            method.setAccessible(true);\n+            return method.invoke(instance, decodeArgs(instance, method, args));\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        } catch (InvocationTargetException e) {\n+            LoggerFactory.getLogger(\n+                    PublishedServerEventHandlerRpcHandler.class.getName())\n+                    .debug(null, e);\n+            throw new RuntimeException(e.getCause());", "originalCommit": "d0d85ddb881de110d33dc32051e90c7d61066abe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyMjEzOQ==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496722139", "bodyText": "Merge this if statement with the enclosing one.", "author": "vaadin-bot", "createdAt": "2020-09-29T13:36:16Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/rpc/PublishedServerEventHandlerRpcHandler.java", "diffHunk": "@@ -0,0 +1,371 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.polymertemplate.rpc;\n+\n+import java.io.Serializable;\n+import java.lang.reflect.Array;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.component.ClientCallable;\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.Composite;\n+import com.vaadin.flow.component.littemplate.LitTemplate;\n+import com.vaadin.flow.component.polymertemplate.EventHandler;\n+import com.vaadin.flow.component.polymertemplate.PolymerTemplate;\n+import com.vaadin.flow.dom.DisabledUpdateMode;\n+import com.vaadin.flow.internal.ReflectTools;\n+import com.vaadin.flow.internal.StateNode;\n+import com.vaadin.flow.internal.nodefeature.ClientCallableHandlers;\n+import com.vaadin.flow.internal.nodefeature.ComponentMapping;\n+import com.vaadin.flow.internal.nodefeature.PolymerServerEventHandlers;\n+import com.vaadin.flow.server.communication.rpc.DefaultRpcDecoder;\n+import com.vaadin.flow.server.communication.rpc.RpcDecodeException;\n+import com.vaadin.flow.server.communication.rpc.RpcDecoder;\n+import com.vaadin.flow.server.communication.rpc.StringToEnumDecoder;\n+import com.vaadin.flow.server.communication.rpc.StringToNumberDecoder;\n+import com.vaadin.flow.shared.JsonConstants;\n+import com.vaadin.flow.templatemodel.ModelType;\n+\n+import elemental.json.Json;\n+import elemental.json.JsonArray;\n+import elemental.json.JsonObject;\n+import elemental.json.JsonType;\n+import elemental.json.JsonValue;\n+\n+/**\n+ * RPC handler for events triggered through <code>element.$server</code> or\n+ * simply <code>$server</code> in template event handlers.\n+ *\n+ * @see JsonConstants#RPC_PUBLISHED_SERVER_EVENT_HANDLER\n+ *\n+ * @author Vaadin Ltd\n+ * @since 1.0\n+ *\n+ * @deprecated Polymer template support is deprecated - we recommend you to use\n+ *             {@link LitTemplate} instead. Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n+ */\n+@Deprecated\n+public class PublishedServerEventHandlerRpcHandler implements Serializable {\n+\n+    private static final Collection<RpcDecoder> DECODERS = loadDecoders();\n+\n+    public static void handleNode(StateNode node, JsonObject invocationJson) {\n+        assert invocationJson\n+                .hasKey(JsonConstants.RPC_TEMPLATE_EVENT_METHOD_NAME);\n+        String methodName = invocationJson\n+                .getString(JsonConstants.RPC_TEMPLATE_EVENT_METHOD_NAME);\n+        if (methodName == null) {\n+            throw new IllegalArgumentException(\n+                    \"Event handler method name may not be null\");\n+        }\n+        JsonValue args = invocationJson\n+                .get(JsonConstants.RPC_TEMPLATE_EVENT_ARGS);\n+        if (args == null) {\n+            args = Json.createArray();\n+        }\n+        if (args.getType() != JsonType.ARRAY) {\n+            throw new IllegalArgumentException(\n+                    \"Incorrect type for method arguments: \" + args.getClass());\n+        }\n+        int promiseId;\n+        if (invocationJson.hasKey(JsonConstants.RPC_TEMPLATE_EVENT_PROMISE)) {\n+            promiseId = (int) invocationJson\n+                    .getNumber(JsonConstants.RPC_TEMPLATE_EVENT_PROMISE);\n+        } else {\n+            promiseId = -1;\n+        }\n+        assert node.hasFeature(ComponentMapping.class);\n+        Optional<Component> component = ComponentMapping.getComponent(node);\n+        if (!component.isPresent()) {\n+            throw new IllegalStateException(\n+                    \"Unable to handle RPC template event JSON message: \"\n+                            + \"there is no component available for the target node\");\n+        }\n+\n+        boolean execute = node.isEnabled();\n+\n+        if (!execute) {\n+            ClientCallableHandlers clientDelegate = node\n+                    .getFeature(ClientCallableHandlers.class);\n+            PolymerServerEventHandlers eventHandlers = node\n+                    .getFeature(PolymerServerEventHandlers.class);\n+            if (clientDelegate.hasHandler(methodName)) {\n+                execute = DisabledUpdateMode.ALWAYS.equals(\n+                        clientDelegate.getDisabledUpdateMode(methodName));\n+            }\n+            if (eventHandlers.hasHandler(methodName)) {\n+                execute = execute || DisabledUpdateMode.ALWAYS.equals(\n+                        eventHandlers.getDisabledUpdateMode(methodName));\n+            }\n+        }\n+\n+        if (execute) {\n+            invokeMethod(component.get(), component.get().getClass(),\n+                    methodName, (JsonArray) args, promiseId);\n+        }\n+    }\n+\n+    static void invokeMethod(Component instance, Class<?> clazz,\n+            String methodName, JsonArray args, int promiseId) {\n+        assert instance != null;\n+        Optional<Method> method = findMethod(instance, clazz, methodName);\n+        if (method.isPresent()) {\n+            invokeMethod(instance, method.get(), args, promiseId);\n+        } else if (instance instanceof Composite) {\n+            Component compositeContent = ((Composite<?>) instance).getContent();\n+            invokeMethod(compositeContent, compositeContent.getClass(),\n+                    methodName, args, promiseId);\n+        } else {\n+            String msg = String.format(\"Neither class '%s' \"\n+                    + \"nor its super classes declare event handler method '%s'\",\n+                    instance.getClass().getName(), methodName);\n+            throw new IllegalStateException(msg);\n+        }\n+    }\n+\n+    private static Optional<Method> findMethod(Component instance,\n+            Class<?> clazz, String methodName) {\n+        List<Method> methods = Stream.of(clazz.getDeclaredMethods())\n+                .filter(method -> methodName.equals(method.getName()))\n+                .filter(method -> method.isAnnotationPresent(EventHandler.class)\n+                        || method.isAnnotationPresent(ClientCallable.class))\n+                .collect(Collectors.toList());\n+        if (methods.size() > 1) {\n+            String msg = String.format(\"Class '%s' contains \"\n+                    + \"several event handler method with the same name '%s'\",\n+                    instance.getClass().getName(), methodName);\n+            throw new IllegalStateException(msg);\n+        } else if (methods.size() == 1) {\n+            return Optional.of(methods.get(0));\n+        } else if (!Component.class.equals(clazz)) {\n+            return findMethod(instance, clazz.getSuperclass(), methodName);\n+        } else {\n+            return Optional.empty();\n+        }\n+    }\n+\n+    private static void invokeMethod(Component instance, Method method,\n+            JsonArray args, int promiseId) {\n+        if (promiseId == -1) {\n+            invokeMethod(instance, method, args);\n+        } else {\n+            try {\n+                Serializable returnValue = (Serializable) invokeMethod(instance,\n+                        method, args);\n+\n+                instance.getElement()\n+                        .executeJs(\"this.$server['\"\n+                                + JsonConstants.RPC_PROMISE_CALLBACK_NAME\n+                                + \"']($0, true, $1)\",\n+                                Integer.valueOf(promiseId), returnValue);\n+            } catch (RuntimeException e) {\n+                instance.getElement()\n+                        .executeJs(\"this.$server['\"\n+                                + JsonConstants.RPC_PROMISE_CALLBACK_NAME\n+                                + \"']($0, false)\", Integer.valueOf(promiseId));\n+\n+                throw e;\n+            }\n+        }\n+    }\n+\n+    private static Object invokeMethod(Component instance, Method method,\n+            JsonArray args) {\n+        try {\n+            method.setAccessible(true);\n+            return method.invoke(instance, decodeArgs(instance, method, args));\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        } catch (InvocationTargetException e) {\n+            LoggerFactory.getLogger(\n+                    PublishedServerEventHandlerRpcHandler.class.getName())\n+                    .debug(null, e);\n+            throw new RuntimeException(e.getCause());\n+        }\n+    }\n+\n+    private static Object[] decodeArgs(Component instance, Method method,\n+            JsonArray argsFromClient) {\n+        int methodArgs = method.getParameterCount();\n+        int clientValuesCount = argsFromClient.length();\n+        JsonArray argValues;\n+        if (method.isVarArgs()) {\n+            if (clientValuesCount >= methodArgs - 1) {\n+                argValues = unwrapVarArgs(argsFromClient, method);\n+            } else {\n+                String msg = String.format(\n+                        \"The number of received values (%d) is not enough \"\n+                                + \"to call the method '%s' declared in '%s' which \"\n+                                + \"has vararg parameter and the number of arguments %d\",\n+                        argsFromClient.length(), method.getName(),\n+                        method.getDeclaringClass().getName(),\n+                        method.getParameterCount());\n+                throw new IllegalArgumentException(msg);\n+            }\n+        } else {\n+            if (methodArgs == clientValuesCount) {\n+                argValues = argsFromClient;\n+            } else {\n+                String msg = String.format(\n+                        \"The number of received values (%d) is not equal \"\n+                                + \"to the number of arguments (%d) in the method '%s' \"\n+                                + \"declared in '%s'\",\n+                        argsFromClient.length(), method.getParameterCount(),\n+                        method.getName(), method.getDeclaringClass().getName());\n+                throw new IllegalArgumentException(msg);\n+            }\n+        }\n+        List<Object> decoded = new ArrayList<>(method.getParameterCount());\n+        Class<?>[] methodParameterTypes = method.getParameterTypes();\n+        for (int i = 0; i < argValues.length(); i++) {\n+            Class<?> type = methodParameterTypes[i];\n+            decoded.add(decodeArg(instance, method, type, i, argValues.get(i)));\n+        }\n+        return decoded.toArray(new Object[method.getParameterCount()]);\n+    }\n+\n+    private static JsonArray unwrapVarArgs(JsonArray argsFromClient,\n+            Method method) {\n+        int paramCount = method.getParameterCount();\n+        if (argsFromClient.length() == paramCount) {\n+            if (argsFromClient.get(paramCount - 1).getType()", "originalCommit": "d0d85ddb881de110d33dc32051e90c7d61066abe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyMjE1NA==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496722154", "bodyText": "Call \"Optional#isPresent()\" before accessing the value.", "author": "vaadin-bot", "createdAt": "2020-09-29T13:36:17Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/rpc/PublishedServerEventHandlerRpcHandler.java", "diffHunk": "@@ -0,0 +1,371 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.polymertemplate.rpc;\n+\n+import java.io.Serializable;\n+import java.lang.reflect.Array;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.component.ClientCallable;\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.Composite;\n+import com.vaadin.flow.component.littemplate.LitTemplate;\n+import com.vaadin.flow.component.polymertemplate.EventHandler;\n+import com.vaadin.flow.component.polymertemplate.PolymerTemplate;\n+import com.vaadin.flow.dom.DisabledUpdateMode;\n+import com.vaadin.flow.internal.ReflectTools;\n+import com.vaadin.flow.internal.StateNode;\n+import com.vaadin.flow.internal.nodefeature.ClientCallableHandlers;\n+import com.vaadin.flow.internal.nodefeature.ComponentMapping;\n+import com.vaadin.flow.internal.nodefeature.PolymerServerEventHandlers;\n+import com.vaadin.flow.server.communication.rpc.DefaultRpcDecoder;\n+import com.vaadin.flow.server.communication.rpc.RpcDecodeException;\n+import com.vaadin.flow.server.communication.rpc.RpcDecoder;\n+import com.vaadin.flow.server.communication.rpc.StringToEnumDecoder;\n+import com.vaadin.flow.server.communication.rpc.StringToNumberDecoder;\n+import com.vaadin.flow.shared.JsonConstants;\n+import com.vaadin.flow.templatemodel.ModelType;\n+\n+import elemental.json.Json;\n+import elemental.json.JsonArray;\n+import elemental.json.JsonObject;\n+import elemental.json.JsonType;\n+import elemental.json.JsonValue;\n+\n+/**\n+ * RPC handler for events triggered through <code>element.$server</code> or\n+ * simply <code>$server</code> in template event handlers.\n+ *\n+ * @see JsonConstants#RPC_PUBLISHED_SERVER_EVENT_HANDLER\n+ *\n+ * @author Vaadin Ltd\n+ * @since 1.0\n+ *\n+ * @deprecated Polymer template support is deprecated - we recommend you to use\n+ *             {@link LitTemplate} instead. Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n+ */\n+@Deprecated\n+public class PublishedServerEventHandlerRpcHandler implements Serializable {\n+\n+    private static final Collection<RpcDecoder> DECODERS = loadDecoders();\n+\n+    public static void handleNode(StateNode node, JsonObject invocationJson) {\n+        assert invocationJson\n+                .hasKey(JsonConstants.RPC_TEMPLATE_EVENT_METHOD_NAME);\n+        String methodName = invocationJson\n+                .getString(JsonConstants.RPC_TEMPLATE_EVENT_METHOD_NAME);\n+        if (methodName == null) {\n+            throw new IllegalArgumentException(\n+                    \"Event handler method name may not be null\");\n+        }\n+        JsonValue args = invocationJson\n+                .get(JsonConstants.RPC_TEMPLATE_EVENT_ARGS);\n+        if (args == null) {\n+            args = Json.createArray();\n+        }\n+        if (args.getType() != JsonType.ARRAY) {\n+            throw new IllegalArgumentException(\n+                    \"Incorrect type for method arguments: \" + args.getClass());\n+        }\n+        int promiseId;\n+        if (invocationJson.hasKey(JsonConstants.RPC_TEMPLATE_EVENT_PROMISE)) {\n+            promiseId = (int) invocationJson\n+                    .getNumber(JsonConstants.RPC_TEMPLATE_EVENT_PROMISE);\n+        } else {\n+            promiseId = -1;\n+        }\n+        assert node.hasFeature(ComponentMapping.class);\n+        Optional<Component> component = ComponentMapping.getComponent(node);\n+        if (!component.isPresent()) {\n+            throw new IllegalStateException(\n+                    \"Unable to handle RPC template event JSON message: \"\n+                            + \"there is no component available for the target node\");\n+        }\n+\n+        boolean execute = node.isEnabled();\n+\n+        if (!execute) {\n+            ClientCallableHandlers clientDelegate = node\n+                    .getFeature(ClientCallableHandlers.class);\n+            PolymerServerEventHandlers eventHandlers = node\n+                    .getFeature(PolymerServerEventHandlers.class);\n+            if (clientDelegate.hasHandler(methodName)) {\n+                execute = DisabledUpdateMode.ALWAYS.equals(\n+                        clientDelegate.getDisabledUpdateMode(methodName));\n+            }\n+            if (eventHandlers.hasHandler(methodName)) {\n+                execute = execute || DisabledUpdateMode.ALWAYS.equals(\n+                        eventHandlers.getDisabledUpdateMode(methodName));\n+            }\n+        }\n+\n+        if (execute) {\n+            invokeMethod(component.get(), component.get().getClass(),\n+                    methodName, (JsonArray) args, promiseId);\n+        }\n+    }\n+\n+    static void invokeMethod(Component instance, Class<?> clazz,\n+            String methodName, JsonArray args, int promiseId) {\n+        assert instance != null;\n+        Optional<Method> method = findMethod(instance, clazz, methodName);\n+        if (method.isPresent()) {\n+            invokeMethod(instance, method.get(), args, promiseId);\n+        } else if (instance instanceof Composite) {\n+            Component compositeContent = ((Composite<?>) instance).getContent();\n+            invokeMethod(compositeContent, compositeContent.getClass(),\n+                    methodName, args, promiseId);\n+        } else {\n+            String msg = String.format(\"Neither class '%s' \"\n+                    + \"nor its super classes declare event handler method '%s'\",\n+                    instance.getClass().getName(), methodName);\n+            throw new IllegalStateException(msg);\n+        }\n+    }\n+\n+    private static Optional<Method> findMethod(Component instance,\n+            Class<?> clazz, String methodName) {\n+        List<Method> methods = Stream.of(clazz.getDeclaredMethods())\n+                .filter(method -> methodName.equals(method.getName()))\n+                .filter(method -> method.isAnnotationPresent(EventHandler.class)\n+                        || method.isAnnotationPresent(ClientCallable.class))\n+                .collect(Collectors.toList());\n+        if (methods.size() > 1) {\n+            String msg = String.format(\"Class '%s' contains \"\n+                    + \"several event handler method with the same name '%s'\",\n+                    instance.getClass().getName(), methodName);\n+            throw new IllegalStateException(msg);\n+        } else if (methods.size() == 1) {\n+            return Optional.of(methods.get(0));\n+        } else if (!Component.class.equals(clazz)) {\n+            return findMethod(instance, clazz.getSuperclass(), methodName);\n+        } else {\n+            return Optional.empty();\n+        }\n+    }\n+\n+    private static void invokeMethod(Component instance, Method method,\n+            JsonArray args, int promiseId) {\n+        if (promiseId == -1) {\n+            invokeMethod(instance, method, args);\n+        } else {\n+            try {\n+                Serializable returnValue = (Serializable) invokeMethod(instance,\n+                        method, args);\n+\n+                instance.getElement()\n+                        .executeJs(\"this.$server['\"\n+                                + JsonConstants.RPC_PROMISE_CALLBACK_NAME\n+                                + \"']($0, true, $1)\",\n+                                Integer.valueOf(promiseId), returnValue);\n+            } catch (RuntimeException e) {\n+                instance.getElement()\n+                        .executeJs(\"this.$server['\"\n+                                + JsonConstants.RPC_PROMISE_CALLBACK_NAME\n+                                + \"']($0, false)\", Integer.valueOf(promiseId));\n+\n+                throw e;\n+            }\n+        }\n+    }\n+\n+    private static Object invokeMethod(Component instance, Method method,\n+            JsonArray args) {\n+        try {\n+            method.setAccessible(true);\n+            return method.invoke(instance, decodeArgs(instance, method, args));\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        } catch (InvocationTargetException e) {\n+            LoggerFactory.getLogger(\n+                    PublishedServerEventHandlerRpcHandler.class.getName())\n+                    .debug(null, e);\n+            throw new RuntimeException(e.getCause());\n+        }\n+    }\n+\n+    private static Object[] decodeArgs(Component instance, Method method,\n+            JsonArray argsFromClient) {\n+        int methodArgs = method.getParameterCount();\n+        int clientValuesCount = argsFromClient.length();\n+        JsonArray argValues;\n+        if (method.isVarArgs()) {\n+            if (clientValuesCount >= methodArgs - 1) {\n+                argValues = unwrapVarArgs(argsFromClient, method);\n+            } else {\n+                String msg = String.format(\n+                        \"The number of received values (%d) is not enough \"\n+                                + \"to call the method '%s' declared in '%s' which \"\n+                                + \"has vararg parameter and the number of arguments %d\",\n+                        argsFromClient.length(), method.getName(),\n+                        method.getDeclaringClass().getName(),\n+                        method.getParameterCount());\n+                throw new IllegalArgumentException(msg);\n+            }\n+        } else {\n+            if (methodArgs == clientValuesCount) {\n+                argValues = argsFromClient;\n+            } else {\n+                String msg = String.format(\n+                        \"The number of received values (%d) is not equal \"\n+                                + \"to the number of arguments (%d) in the method '%s' \"\n+                                + \"declared in '%s'\",\n+                        argsFromClient.length(), method.getParameterCount(),\n+                        method.getName(), method.getDeclaringClass().getName());\n+                throw new IllegalArgumentException(msg);\n+            }\n+        }\n+        List<Object> decoded = new ArrayList<>(method.getParameterCount());\n+        Class<?>[] methodParameterTypes = method.getParameterTypes();\n+        for (int i = 0; i < argValues.length(); i++) {\n+            Class<?> type = methodParameterTypes[i];\n+            decoded.add(decodeArg(instance, method, type, i, argValues.get(i)));\n+        }\n+        return decoded.toArray(new Object[method.getParameterCount()]);\n+    }\n+\n+    private static JsonArray unwrapVarArgs(JsonArray argsFromClient,\n+            Method method) {\n+        int paramCount = method.getParameterCount();\n+        if (argsFromClient.length() == paramCount) {\n+            if (argsFromClient.get(paramCount - 1).getType()\n+                    .equals(JsonType.ARRAY)) {\n+                return argsFromClient;\n+            }\n+        }\n+        JsonArray result = Json.createArray();\n+        JsonArray rest = Json.createArray();\n+        int newIndex = 0;\n+        for (int i = 0; i < argsFromClient.length(); i++) {\n+            JsonValue value = argsFromClient.get(i);\n+            if (i < paramCount - 1) {\n+                result.set(i, value);\n+            } else {\n+                rest.set(newIndex, value);\n+                newIndex++;\n+            }\n+        }\n+        result.set(paramCount - 1, rest);\n+        return result;\n+    }\n+\n+    private static Object decodeArg(Component instance, Method method,\n+            Class<?> type, int index, JsonValue argValue) {\n+        // come up with method to know that it's an id and should be gotten from\n+        // the model\n+        assert argValue != null;\n+        if (type.isPrimitive() && argValue.getType() == JsonType.NULL) {\n+            String msg = String.format(\n+                    \"Null values are not allowed for primitive types but \"\n+                            + \"a 'null' value was received for parameter %d \"\n+                            + \"which refers to primitive type '%s' \"\n+                            + \"in the method '%s' defined in the class '%s'\",\n+                    index, type.getName(), method.getName(),\n+                    method.getDeclaringClass().getName());\n+            throw new IllegalArgumentException(msg);\n+        } else if (type.isArray()) {\n+            return decodeArray(method, type, index, argValue);\n+        } else {\n+            Class<?> convertedType = ReflectTools.convertPrimitiveType(type);\n+\n+            if (isTemplateModelValue(instance, argValue, convertedType)) {\n+                return getTemplateItem((PolymerTemplate<?>) instance,\n+                        (JsonObject) argValue,\n+                        method.getGenericParameterTypes()[index]);\n+            }\n+\n+            Optional<RpcDecoder> decoder = getDecoder(argValue, convertedType);\n+            if (decoder.isPresent()) {\n+                try {\n+                    return decoder.get().decode(argValue, convertedType);\n+                } catch (RpcDecodeException exception) {\n+                    throw new IllegalArgumentException(exception);\n+                }\n+            }\n+            String msg = String.format(\"Class '%s' has the method '%s' \"\n+                    + \"whose parameter %d refers to unsupported type '%s'\",\n+                    method.getDeclaringClass().getName(), method.getName(),\n+                    index, type.getName());\n+            throw new IllegalArgumentException(msg);\n+        }\n+    }\n+\n+    private static Optional<RpcDecoder> getDecoder(JsonValue value,\n+            Class<?> type) {\n+        return DECODERS.stream()\n+                .filter(decoder -> decoder.isApplicable(value, type))\n+                .findFirst();\n+    }\n+\n+    private static boolean isTemplateModelValue(Component instance,\n+            JsonValue argValue, Class<?> convertedType) {\n+        return instance instanceof PolymerTemplate\n+                && argValue instanceof JsonObject\n+                && ((PolymerTemplate<?>) instance)\n+                        .isSupportedClass(convertedType)\n+                && ((JsonObject) argValue).hasKey(\"nodeId\");\n+    }\n+\n+    private static Object getTemplateItem(PolymerTemplate<?> template,\n+            JsonObject argValue, Type convertedType) {\n+        StateNode node = template.getUI().get().getInternals().getStateTree()", "originalCommit": "d0d85ddb881de110d33dc32051e90c7d61066abe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyMjE2OA==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496722168", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-29T13:36:18Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/rpc/PublishedServerEventHandlerRpcHandler.java", "diffHunk": "@@ -0,0 +1,371 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.polymertemplate.rpc;\n+\n+import java.io.Serializable;\n+import java.lang.reflect.Array;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.component.ClientCallable;\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.Composite;\n+import com.vaadin.flow.component.littemplate.LitTemplate;\n+import com.vaadin.flow.component.polymertemplate.EventHandler;\n+import com.vaadin.flow.component.polymertemplate.PolymerTemplate;\n+import com.vaadin.flow.dom.DisabledUpdateMode;\n+import com.vaadin.flow.internal.ReflectTools;\n+import com.vaadin.flow.internal.StateNode;\n+import com.vaadin.flow.internal.nodefeature.ClientCallableHandlers;\n+import com.vaadin.flow.internal.nodefeature.ComponentMapping;\n+import com.vaadin.flow.internal.nodefeature.PolymerServerEventHandlers;\n+import com.vaadin.flow.server.communication.rpc.DefaultRpcDecoder;\n+import com.vaadin.flow.server.communication.rpc.RpcDecodeException;\n+import com.vaadin.flow.server.communication.rpc.RpcDecoder;\n+import com.vaadin.flow.server.communication.rpc.StringToEnumDecoder;\n+import com.vaadin.flow.server.communication.rpc.StringToNumberDecoder;\n+import com.vaadin.flow.shared.JsonConstants;\n+import com.vaadin.flow.templatemodel.ModelType;\n+\n+import elemental.json.Json;\n+import elemental.json.JsonArray;\n+import elemental.json.JsonObject;\n+import elemental.json.JsonType;\n+import elemental.json.JsonValue;\n+\n+/**\n+ * RPC handler for events triggered through <code>element.$server</code> or\n+ * simply <code>$server</code> in template event handlers.\n+ *\n+ * @see JsonConstants#RPC_PUBLISHED_SERVER_EVENT_HANDLER\n+ *\n+ * @author Vaadin Ltd\n+ * @since 1.0\n+ *\n+ * @deprecated Polymer template support is deprecated - we recommend you to use\n+ *             {@link LitTemplate} instead. Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n+ */\n+@Deprecated\n+public class PublishedServerEventHandlerRpcHandler implements Serializable {", "originalCommit": "d0d85ddb881de110d33dc32051e90c7d61066abe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyMjE4NQ==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496722185", "bodyText": "Define and throw a dedicated exception instead of using a generic one.", "author": "vaadin-bot", "createdAt": "2020-09-29T13:36:19Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/rpc/PublishedServerEventHandlerRpcHandler.java", "diffHunk": "@@ -0,0 +1,371 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.polymertemplate.rpc;\n+\n+import java.io.Serializable;\n+import java.lang.reflect.Array;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.component.ClientCallable;\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.Composite;\n+import com.vaadin.flow.component.littemplate.LitTemplate;\n+import com.vaadin.flow.component.polymertemplate.EventHandler;\n+import com.vaadin.flow.component.polymertemplate.PolymerTemplate;\n+import com.vaadin.flow.dom.DisabledUpdateMode;\n+import com.vaadin.flow.internal.ReflectTools;\n+import com.vaadin.flow.internal.StateNode;\n+import com.vaadin.flow.internal.nodefeature.ClientCallableHandlers;\n+import com.vaadin.flow.internal.nodefeature.ComponentMapping;\n+import com.vaadin.flow.internal.nodefeature.PolymerServerEventHandlers;\n+import com.vaadin.flow.server.communication.rpc.DefaultRpcDecoder;\n+import com.vaadin.flow.server.communication.rpc.RpcDecodeException;\n+import com.vaadin.flow.server.communication.rpc.RpcDecoder;\n+import com.vaadin.flow.server.communication.rpc.StringToEnumDecoder;\n+import com.vaadin.flow.server.communication.rpc.StringToNumberDecoder;\n+import com.vaadin.flow.shared.JsonConstants;\n+import com.vaadin.flow.templatemodel.ModelType;\n+\n+import elemental.json.Json;\n+import elemental.json.JsonArray;\n+import elemental.json.JsonObject;\n+import elemental.json.JsonType;\n+import elemental.json.JsonValue;\n+\n+/**\n+ * RPC handler for events triggered through <code>element.$server</code> or\n+ * simply <code>$server</code> in template event handlers.\n+ *\n+ * @see JsonConstants#RPC_PUBLISHED_SERVER_EVENT_HANDLER\n+ *\n+ * @author Vaadin Ltd\n+ * @since 1.0\n+ *\n+ * @deprecated Polymer template support is deprecated - we recommend you to use\n+ *             {@link LitTemplate} instead. Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n+ */\n+@Deprecated\n+public class PublishedServerEventHandlerRpcHandler implements Serializable {\n+\n+    private static final Collection<RpcDecoder> DECODERS = loadDecoders();\n+\n+    public static void handleNode(StateNode node, JsonObject invocationJson) {\n+        assert invocationJson\n+                .hasKey(JsonConstants.RPC_TEMPLATE_EVENT_METHOD_NAME);\n+        String methodName = invocationJson\n+                .getString(JsonConstants.RPC_TEMPLATE_EVENT_METHOD_NAME);\n+        if (methodName == null) {\n+            throw new IllegalArgumentException(\n+                    \"Event handler method name may not be null\");\n+        }\n+        JsonValue args = invocationJson\n+                .get(JsonConstants.RPC_TEMPLATE_EVENT_ARGS);\n+        if (args == null) {\n+            args = Json.createArray();\n+        }\n+        if (args.getType() != JsonType.ARRAY) {\n+            throw new IllegalArgumentException(\n+                    \"Incorrect type for method arguments: \" + args.getClass());\n+        }\n+        int promiseId;\n+        if (invocationJson.hasKey(JsonConstants.RPC_TEMPLATE_EVENT_PROMISE)) {\n+            promiseId = (int) invocationJson\n+                    .getNumber(JsonConstants.RPC_TEMPLATE_EVENT_PROMISE);\n+        } else {\n+            promiseId = -1;\n+        }\n+        assert node.hasFeature(ComponentMapping.class);\n+        Optional<Component> component = ComponentMapping.getComponent(node);\n+        if (!component.isPresent()) {\n+            throw new IllegalStateException(\n+                    \"Unable to handle RPC template event JSON message: \"\n+                            + \"there is no component available for the target node\");\n+        }\n+\n+        boolean execute = node.isEnabled();\n+\n+        if (!execute) {\n+            ClientCallableHandlers clientDelegate = node\n+                    .getFeature(ClientCallableHandlers.class);\n+            PolymerServerEventHandlers eventHandlers = node\n+                    .getFeature(PolymerServerEventHandlers.class);\n+            if (clientDelegate.hasHandler(methodName)) {\n+                execute = DisabledUpdateMode.ALWAYS.equals(\n+                        clientDelegate.getDisabledUpdateMode(methodName));\n+            }\n+            if (eventHandlers.hasHandler(methodName)) {\n+                execute = execute || DisabledUpdateMode.ALWAYS.equals(\n+                        eventHandlers.getDisabledUpdateMode(methodName));\n+            }\n+        }\n+\n+        if (execute) {\n+            invokeMethod(component.get(), component.get().getClass(),\n+                    methodName, (JsonArray) args, promiseId);\n+        }\n+    }\n+\n+    static void invokeMethod(Component instance, Class<?> clazz,\n+            String methodName, JsonArray args, int promiseId) {\n+        assert instance != null;\n+        Optional<Method> method = findMethod(instance, clazz, methodName);\n+        if (method.isPresent()) {\n+            invokeMethod(instance, method.get(), args, promiseId);\n+        } else if (instance instanceof Composite) {\n+            Component compositeContent = ((Composite<?>) instance).getContent();\n+            invokeMethod(compositeContent, compositeContent.getClass(),\n+                    methodName, args, promiseId);\n+        } else {\n+            String msg = String.format(\"Neither class '%s' \"\n+                    + \"nor its super classes declare event handler method '%s'\",\n+                    instance.getClass().getName(), methodName);\n+            throw new IllegalStateException(msg);\n+        }\n+    }\n+\n+    private static Optional<Method> findMethod(Component instance,\n+            Class<?> clazz, String methodName) {\n+        List<Method> methods = Stream.of(clazz.getDeclaredMethods())\n+                .filter(method -> methodName.equals(method.getName()))\n+                .filter(method -> method.isAnnotationPresent(EventHandler.class)\n+                        || method.isAnnotationPresent(ClientCallable.class))\n+                .collect(Collectors.toList());\n+        if (methods.size() > 1) {\n+            String msg = String.format(\"Class '%s' contains \"\n+                    + \"several event handler method with the same name '%s'\",\n+                    instance.getClass().getName(), methodName);\n+            throw new IllegalStateException(msg);\n+        } else if (methods.size() == 1) {\n+            return Optional.of(methods.get(0));\n+        } else if (!Component.class.equals(clazz)) {\n+            return findMethod(instance, clazz.getSuperclass(), methodName);\n+        } else {\n+            return Optional.empty();\n+        }\n+    }\n+\n+    private static void invokeMethod(Component instance, Method method,\n+            JsonArray args, int promiseId) {\n+        if (promiseId == -1) {\n+            invokeMethod(instance, method, args);\n+        } else {\n+            try {\n+                Serializable returnValue = (Serializable) invokeMethod(instance,\n+                        method, args);\n+\n+                instance.getElement()\n+                        .executeJs(\"this.$server['\"\n+                                + JsonConstants.RPC_PROMISE_CALLBACK_NAME\n+                                + \"']($0, true, $1)\",\n+                                Integer.valueOf(promiseId), returnValue);\n+            } catch (RuntimeException e) {\n+                instance.getElement()\n+                        .executeJs(\"this.$server['\"\n+                                + JsonConstants.RPC_PROMISE_CALLBACK_NAME\n+                                + \"']($0, false)\", Integer.valueOf(promiseId));\n+\n+                throw e;\n+            }\n+        }\n+    }\n+\n+    private static Object invokeMethod(Component instance, Method method,\n+            JsonArray args) {\n+        try {\n+            method.setAccessible(true);\n+            return method.invoke(instance, decodeArgs(instance, method, args));\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(e);", "originalCommit": "d0d85ddb881de110d33dc32051e90c7d61066abe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyMjIwMg==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496722202", "bodyText": "Document this public method by adding an explicit description.", "author": "vaadin-bot", "createdAt": "2020-09-29T13:36:20Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/rpc/PublishedServerEventHandlerRpcHandler.java", "diffHunk": "@@ -0,0 +1,371 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.polymertemplate.rpc;\n+\n+import java.io.Serializable;\n+import java.lang.reflect.Array;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.component.ClientCallable;\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.Composite;\n+import com.vaadin.flow.component.littemplate.LitTemplate;\n+import com.vaadin.flow.component.polymertemplate.EventHandler;\n+import com.vaadin.flow.component.polymertemplate.PolymerTemplate;\n+import com.vaadin.flow.dom.DisabledUpdateMode;\n+import com.vaadin.flow.internal.ReflectTools;\n+import com.vaadin.flow.internal.StateNode;\n+import com.vaadin.flow.internal.nodefeature.ClientCallableHandlers;\n+import com.vaadin.flow.internal.nodefeature.ComponentMapping;\n+import com.vaadin.flow.internal.nodefeature.PolymerServerEventHandlers;\n+import com.vaadin.flow.server.communication.rpc.DefaultRpcDecoder;\n+import com.vaadin.flow.server.communication.rpc.RpcDecodeException;\n+import com.vaadin.flow.server.communication.rpc.RpcDecoder;\n+import com.vaadin.flow.server.communication.rpc.StringToEnumDecoder;\n+import com.vaadin.flow.server.communication.rpc.StringToNumberDecoder;\n+import com.vaadin.flow.shared.JsonConstants;\n+import com.vaadin.flow.templatemodel.ModelType;\n+\n+import elemental.json.Json;\n+import elemental.json.JsonArray;\n+import elemental.json.JsonObject;\n+import elemental.json.JsonType;\n+import elemental.json.JsonValue;\n+\n+/**\n+ * RPC handler for events triggered through <code>element.$server</code> or\n+ * simply <code>$server</code> in template event handlers.\n+ *\n+ * @see JsonConstants#RPC_PUBLISHED_SERVER_EVENT_HANDLER\n+ *\n+ * @author Vaadin Ltd\n+ * @since 1.0\n+ *\n+ * @deprecated Polymer template support is deprecated - we recommend you to use\n+ *             {@link LitTemplate} instead. Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n+ */\n+@Deprecated\n+public class PublishedServerEventHandlerRpcHandler implements Serializable {\n+\n+    private static final Collection<RpcDecoder> DECODERS = loadDecoders();\n+\n+    public static void handleNode(StateNode node, JsonObject invocationJson) {", "originalCommit": "d0d85ddb881de110d33dc32051e90c7d61066abe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyMjIxMw==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496722213", "bodyText": "Either log or rethrow this exception.", "author": "vaadin-bot", "createdAt": "2020-09-29T13:36:21Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandler.java", "diffHunk": "@@ -78,299 +55,28 @@ public String getRpcType() {\n     @Override\n     public Optional<Runnable> handleNode(StateNode node,\n             JsonObject invocationJson) {\n-        assert invocationJson\n-                .hasKey(JsonConstants.RPC_TEMPLATE_EVENT_METHOD_NAME);\n-        String methodName = invocationJson\n-                .getString(JsonConstants.RPC_TEMPLATE_EVENT_METHOD_NAME);\n-        if (methodName == null) {\n-            throw new IllegalArgumentException(\n-                    \"Event handler method name may not be null\");\n-        }\n-        JsonValue args = invocationJson\n-                .get(JsonConstants.RPC_TEMPLATE_EVENT_ARGS);\n-        if (args == null) {\n-            args = Json.createArray();\n-        }\n-        if (args.getType() != JsonType.ARRAY) {\n-            throw new IllegalArgumentException(\n-                    \"Incorrect type for method arguments: \" + args.getClass());\n-        }\n-        int promiseId;\n-        if (invocationJson.hasKey(JsonConstants.RPC_TEMPLATE_EVENT_PROMISE)) {\n-            promiseId = (int) invocationJson\n-                    .getNumber(JsonConstants.RPC_TEMPLATE_EVENT_PROMISE);\n-        } else {\n-            promiseId = -1;\n-        }\n-        assert node.hasFeature(ComponentMapping.class);\n-        Optional<Component> component = ComponentMapping.getComponent(node);\n-        if (!component.isPresent()) {\n-            throw new IllegalStateException(\n-                    \"Unable to handle RPC template event JSON message: \"\n-                            + \"there is no component available for the target node\");\n-        }\n-\n-        boolean execute = node.isEnabled();\n-\n-        if (!execute) {\n-            ClientCallableHandlers clientDelegate = node\n-                    .getFeature(ClientCallableHandlers.class);\n-            PolymerServerEventHandlers eventHandlers = node\n-                    .getFeature(PolymerServerEventHandlers.class);\n-            if (clientDelegate.hasHandler(methodName)) {\n-                execute = DisabledUpdateMode.ALWAYS.equals(\n-                        clientDelegate.getDisabledUpdateMode(methodName));\n-            }\n-            if (eventHandlers.hasHandler(methodName)) {\n-                execute = execute || DisabledUpdateMode.ALWAYS.equals(\n-                        eventHandlers.getDisabledUpdateMode(methodName));\n-            }\n-        }\n-\n-        if (execute) {\n-            invokeMethod(component.get(), component.get().getClass(),\n-                    methodName, (JsonArray) args, promiseId);\n-        }\n-\n-        return Optional.empty();\n-    }\n-\n-    static void invokeMethod(Component instance, Class<?> clazz,\n-            String methodName, JsonArray args, int promiseId) {\n-        assert instance != null;\n-        Optional<Method> method = findMethod(instance, clazz, methodName);\n-        if (method.isPresent()) {\n-            invokeMethod(instance, method.get(), args, promiseId);\n-        } else if (instance instanceof Composite) {\n-            Component compositeContent = ((Composite<?>) instance).getContent();\n-            invokeMethod(compositeContent, compositeContent.getClass(),\n-                    methodName, args, promiseId);\n-        } else {\n-            String msg = String.format(\"Neither class '%s' \"\n-                    + \"nor its super classes declare event handler method '%s'\",\n-                    instance.getClass().getName(), methodName);\n-            throw new IllegalStateException(msg);\n-        }\n-    }\n-\n-    private static Optional<Method> findMethod(Component instance,\n-            Class<?> clazz, String methodName) {\n-        List<Method> methods = Stream.of(clazz.getDeclaredMethods())\n-                .filter(method -> methodName.equals(method.getName()))\n-                .filter(method -> method.isAnnotationPresent(EventHandler.class)\n-                        || method.isAnnotationPresent(ClientCallable.class))\n-                .collect(Collectors.toList());\n-        if (methods.size() > 1) {\n-            String msg = String.format(\"Class '%s' contains \"\n-                    + \"several event handler method with the same name '%s'\",\n-                    instance.getClass().getName(), methodName);\n-            throw new IllegalStateException(msg);\n-        } else if (methods.size() == 1) {\n-            return Optional.of(methods.get(0));\n-        } else if (!Component.class.equals(clazz)) {\n-            return findMethod(instance, clazz.getSuperclass(), methodName);\n-        } else {\n-            return Optional.empty();\n-        }\n-    }\n-\n-    private static void invokeMethod(Component instance, Method method,\n-            JsonArray args, int promiseId) {\n-        if (promiseId == -1) {\n-            invokeMethod(instance, method, args);\n-        } else {\n-            try {\n-                Serializable returnValue = (Serializable) invokeMethod(instance,\n-                        method, args);\n-\n-                instance.getElement()\n-                        .executeJs(\"this.$server['\"\n-                                + JsonConstants.RPC_PROMISE_CALLBACK_NAME\n-                                + \"']($0, true, $1)\",\n-                                Integer.valueOf(promiseId), returnValue);\n-            } catch (RuntimeException e) {\n-                instance.getElement()\n-                        .executeJs(\"this.$server['\"\n-                                + JsonConstants.RPC_PROMISE_CALLBACK_NAME\n-                                + \"']($0, false)\", Integer.valueOf(promiseId));\n-\n-                throw e;\n-            }\n-        }\n-    }\n-\n-    private static Object invokeMethod(Component instance, Method method,\n-            JsonArray args) {\n         try {\n-            method.setAccessible(true);\n-            return method.invoke(instance, decodeArgs(instance, method, args));\n+            Class<?> clazz = Class\n+                    .forName(\"com.vaadin.flow.component.polymertemplate.rpc.\"\n+                            + PublishedServerEventHandlerRpcHandler.class\n+                                    .getSimpleName());\n+            Method handleMethod = Stream.of(clazz.getDeclaredMethods())\n+                    .filter(method -> Modifier.isStatic(method.getModifiers())\n+                            && Modifier.isPublic(method.getModifiers()))\n+                    .findFirst().get();\n+            handleMethod.invoke(null, node, invocationJson);\n+        } catch (ClassNotFoundException e) {", "originalCommit": "d0d85ddb881de110d33dc32051e90c7d61066abe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyMjIyNA==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496722224", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-29T13:36:22Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandler.java", "diffHunk": "@@ -68,8 +47,6 @@\n public class PublishedServerEventHandlerRpcHandler", "originalCommit": "d0d85ddb881de110d33dc32051e90c7d61066abe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkzODkwNA==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496938904", "bodyText": "Non-blocking: should this javadocs be maybe updated about how the \"implementation\" is in polymer-template module.", "author": "pleku", "createdAt": "2020-09-29T18:07:56Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandler.java", "diffHunk": "@@ -15,40 +15,19 @@\n  */\n package com.vaadin.flow.server.communication.rpc;\n \n-import java.io.Serializable;\n-import java.lang.reflect.Array;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n-import java.lang.reflect.Type;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.List;\n+import java.lang.reflect.Modifier;\n import java.util.Optional;\n-import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n import org.slf4j.LoggerFactory;\n \n-import com.vaadin.flow.component.ClientCallable;\n-import com.vaadin.flow.component.Component;\n-import com.vaadin.flow.component.Composite;\n import com.vaadin.flow.component.littemplate.LitTemplate;\n-import com.vaadin.flow.component.polymertemplate.EventHandler;\n-import com.vaadin.flow.component.polymertemplate.PolymerTemplate;\n-import com.vaadin.flow.dom.DisabledUpdateMode;\n-import com.vaadin.flow.internal.ReflectTools;\n import com.vaadin.flow.internal.StateNode;\n-import com.vaadin.flow.internal.nodefeature.ClientCallableHandlers;\n-import com.vaadin.flow.internal.nodefeature.ComponentMapping;\n-import com.vaadin.flow.internal.nodefeature.PolymerServerEventHandlers;\n import com.vaadin.flow.shared.JsonConstants;\n-import com.vaadin.flow.templatemodel.ModelType;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n import elemental.json.JsonObject;\n-import elemental.json.JsonType;\n-import elemental.json.JsonValue;\n \n /**\n  * RPC handler for events triggered through <code>element.$server</code> or", "originalCommit": "d0d85ddb881de110d33dc32051e90c7d61066abe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk0MDgwMQ==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496940801", "bodyText": "This has not been changed - still refers first to outdated deprecated features that people should not know about. It should mention property synchronization first. Unless this logging can only happen with polymer templates, which I'm not really sure about.", "author": "pleku", "createdAt": "2020-09-29T18:11:15Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementPropertyMap.java", "diffHunk": "@@ -273,8 +272,9 @@ private AllowUpdate isUpdateFromClientAllowedByFilter(StateNode node,\n                 if (!allow && log) {\n                     getLogger().warn(\"Ignoring model update for {}. \"\n                             + \"For security reasons, the property must have a \"\n-                            + \"two-way binding in the template, be annotated with @{} in the model, or be defined as synchronized.\",\n-                            key, AllowClientUpdates.class.getSimpleName());\n+                            + \"two-way binding in the template, be annotated\"\n+                            + \" with @AllowClientUpdates in the model, or be defined as synchronized.\",", "originalCommit": "d0d85ddb881de110d33dc32051e90c7d61066abe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk0MTI4MQ==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r496941281", "bodyText": "In case this can only happen with polymer templates, then a comment like // TODO to be removed with polymer template support removal would be nice for the code.", "author": "pleku", "createdAt": "2020-09-29T18:12:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk0MDgwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI0MDcxOA==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r497240718", "bodyText": "We (both you and me) don't know this because of ugly design which doesn't allow to realize this quickly from the code but requires a deep reading the code in totally unrelated classes.\nThis code is invoked only for Polymer templates and this message doesn't have to be modified (even though it should not have been added here as well).", "author": "denis-anisimov", "createdAt": "2020-09-30T04:47:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk0MDgwMQ=="}], "type": "inlineReview"}, {"oid": "47c7d63929145461ac1ab6a558e78d89a414c74c", "url": "https://github.com/vaadin/flow/commit/47c7d63929145461ac1ab6a558e78d89a414c74c", "message": "Add more comments, move test class", "committedDate": "2020-09-30T04:48:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMyMTg2MQ==", "url": "https://github.com/vaadin/flow/pull/9067#discussion_r497321861", "bodyText": "Complete the task associated to this TODO comment.", "author": "vaadin-bot", "createdAt": "2020-09-30T08:10:44Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementPropertyMap.java", "diffHunk": "@@ -269,12 +268,14 @@ private AllowUpdate isUpdateFromClientAllowedByFilter(StateNode node,\n             ElementPropertyMap propertyMap = node\n                     .getFeature(ElementPropertyMap.class);\n             if (propertyMap.updateFromClientFilter != null) {\n+                //// TODO to be removed with polymer template support removal", "originalCommit": "47c7d63929145461ac1ab6a558e78d89a414c74c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}