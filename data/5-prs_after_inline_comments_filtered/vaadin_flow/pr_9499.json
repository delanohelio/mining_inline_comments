{"pr_number": 9499, "pr_title": "chore: move fusion endpoint code to fusion-endpoint module", "pr_createdAt": "2020-11-25T20:34:03Z", "pr_url": "https://github.com/vaadin/flow/pull/9499", "timeline": [{"oid": "b3e66458f0f003b9017815fb82803fa6a8d4a81f", "url": "https://github.com/vaadin/flow/commit/b3e66458f0f003b9017815fb82803fa6a8d4a81f", "message": "chore: move fusion code to fusion-server module", "committedDate": "2020-11-25T20:32:04Z", "type": "commit"}, {"oid": "880a3a48054551d64552a58a934b1387c36ff12d", "url": "https://github.com/vaadin/flow/commit/880a3a48054551d64552a58a934b1387c36ff12d", "message": "ignore failed tests in BuildFrontendMojoTest and PrepareFrontendMojoTest", "committedDate": "2020-11-25T21:17:58Z", "type": "commit"}, {"oid": "ec1727890db23fd6287a61d2b2c7cd0ed18cbbd3", "url": "https://github.com/vaadin/flow/commit/ec1727890db23fd6287a61d2b2c7cd0ed18cbbd3", "message": "update pom dependencies in flow-server", "committedDate": "2020-11-26T18:59:24Z", "type": "commit"}, {"oid": "0539390d527ab165bb397cb990ebc7d4bfdbf22d", "url": "https://github.com/vaadin/flow/commit/0539390d527ab165bb397cb990ebc7d4bfdbf22d", "message": "rename to fusion-endpoint, use Lookup for getting TaskGenerateOpenApi and TaskGenerateConnect", "committedDate": "2020-11-27T11:05:54Z", "type": "commit"}, {"oid": "05a342d8119c3358331f2f12448f6974080b568e", "url": "https://github.com/vaadin/flow/commit/05a342d8119c3358331f2f12448f6974080b568e", "message": "fusion-server->fusion-endpoint", "committedDate": "2020-11-27T11:08:41Z", "type": "commit"}, {"oid": "77150caaa1ca249e4ca382d456307d6f3efc3cca", "url": "https://github.com/vaadin/flow/commit/77150caaa1ca249e4ca382d456307d6f3efc3cca", "message": "servlet container initializer for fusion-endpoint", "committedDate": "2020-11-27T11:52:01Z", "type": "commit"}, {"oid": "5217d14b8e962ceec2d636cefd6896c85cb9a950", "url": "https://github.com/vaadin/flow/commit/5217d14b8e962ceec2d636cefd6896c85cb9a950", "message": "Merge branch 'master' into haijian/fusion-server-module", "committedDate": "2020-11-27T13:22:51Z", "type": "commit"}, {"oid": "b83a288641d10fd1014e690af654986d94073f81", "url": "https://github.com/vaadin/flow/commit/b83a288641d10fd1014e690af654986d94073f81", "message": "remove use of guava-primitives", "committedDate": "2020-11-27T13:47:04Z", "type": "commit"}, {"oid": "e9099d1365c9ea5f84230c3f96c2899e4140c108", "url": "https://github.com/vaadin/flow/commit/e9099d1365c9ea5f84230c3f96c2899e4140c108", "message": "fix compile error in test", "committedDate": "2020-11-27T13:53:44Z", "type": "commit"}, {"oid": "73e1bac3ce87856f174a8c7a58fda9df95841754", "url": "https://github.com/vaadin/flow/commit/73e1bac3ce87856f174a8c7a58fda9df95841754", "message": "ignore known failing tests", "committedDate": "2020-11-27T14:07:07Z", "type": "commit"}, {"oid": "04680f5692ff297c2b8eb78b08cd17ace0f68c9a", "url": "https://github.com/vaadin/flow/commit/04680f5692ff297c2b8eb78b08cd17ace0f68c9a", "message": "add missing commons-lang3 dep for test", "committedDate": "2020-11-27T14:57:18Z", "type": "commit"}, {"oid": "f28dab6e4f5bb0b8177f9988e52a0155123e5b53", "url": "https://github.com/vaadin/flow/commit/f28dab6e4f5bb0b8177f9988e52a0155123e5b53", "message": "move endpoint test resoruces to fusion-endpoint", "committedDate": "2020-11-27T19:50:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc4MTA1Ng==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r531781056", "bodyText": "Make \"lookup\" transient or serializable.", "author": "vaadin-bot", "createdAt": "2020-11-27T20:41:56Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java", "diffHunk": "@@ -125,6 +126,8 @@\n          */\n         private URI nodeDownloadRoot = URI.create(NodeInstaller.DEFAULT_NODEJS_DOWNLOAD_ROOT);\n \n+        private Lookup lookup;", "originalCommit": "f28dab6e4f5bb0b8177f9988e52a0155123e5b53", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fcf1984032a3198648e6fc593dde13ac1df2040f", "url": "https://github.com/vaadin/flow/commit/fcf1984032a3198648e6fc593dde13ac1df2040f", "message": "move endpoint test in NodeTasksTest to fusion-endpoint", "committedDate": "2020-11-27T21:07:24Z", "type": "commit"}, {"oid": "a767bf5e1881ee95ad06e02b435377a52dc2f7ec", "url": "https://github.com/vaadin/flow/commit/a767bf5e1881ee95ad06e02b435377a52dc2f7ec", "message": "move endpoint related tests to fusion-endpoint", "committedDate": "2020-11-30T11:56:19Z", "type": "commit"}, {"oid": "a7fee518964be7a59a817dcbb8a252171f0b3e44", "url": "https://github.com/vaadin/flow/commit/a7fee518964be7a59a817dcbb8a252171f0b3e44", "message": "delete endpoint related tests from BuildFrontendMojo", "committedDate": "2020-11-30T19:26:41Z", "type": "commit"}, {"oid": "e26ce35521f5299076df1be630db847689b6952b", "url": "https://github.com/vaadin/flow/commit/e26ce35521f5299076df1be630db847689b6952b", "message": "Merge branch 'master' into haijian/fusion-server-module", "committedDate": "2020-12-01T06:51:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEwNTc5Mw==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r533105793", "bodyText": "Is it possible to extract lookup creation into a method in a superclass ?\nI would even make it with no-args.", "author": "denis-anisimov", "createdAt": "2020-12-01T06:44:47Z", "path": "flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/PrepareFrontendMojo.java", "diffHunk": "@@ -123,8 +126,10 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n         try {\n             File flowResourcesFolder = new File(npmFolder,\n                     DEFAULT_FLOW_RESOURCES_FOLDER);\n+            ClassFinder classFinder = getClassFinder(project);\n+            Lookup lookup= new LookupImpl(classFinder);", "originalCommit": "a7fee518964be7a59a817dcbb8a252171f0b3e44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk0Njk3Mg==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r533946972", "bodyText": "Done, but couldn't make a non-args, since it depends on a private filed\n(private MavenProject project; ) to get the class finder.", "author": "haijian-vaadin", "createdAt": "2020-12-02T07:25:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEwNTc5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI2MDIxMA==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r537260210", "bodyText": "I thought the classes have( or could have) a common superclasess where the field may be used (may be as a protected field even though I don't like protected). And then it will be possible.\nBut that's minor.", "author": "denis-anisimov", "createdAt": "2020-12-07T06:28:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEwNTc5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzExMDA1MQ==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r533110051", "bodyText": "Is this removed without replacement / moving ?", "author": "denis-anisimov", "createdAt": "2020-12-01T06:57:00Z", "path": "flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/BuildFrontendMojoTest.java", "diffHunk": "@@ -408,14 +408,6 @@ public void noTokenFile_noTokenFileShouldBeCreated()\n         Assert.assertFalse(tokenFile.exists());\n     }\n \n-    @Test\n-    public void mavenGoal_generateOpenApiJson_when_itIsInClientSideMode()", "originalCommit": "a7fee518964be7a59a817dcbb8a252171f0b3e44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEzODU2Mg==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r533138562", "bodyText": "It's moved to BuildFrontendMojoEndpointTest.java, the BuildFrontendMojoEndpointTest.java is currently ignored though, need some work to make it pass.", "author": "haijian-vaadin", "createdAt": "2020-12-01T08:04:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzExMDA1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzExMDgzNQ==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r533110835", "bodyText": "I wold move Lookup as the first arg.\nAnd this param requires javadocs", "author": "denis-anisimov", "createdAt": "2020-12-01T06:59:20Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java", "diffHunk": "@@ -133,8 +136,8 @@\n          * @param npmFolder\n          *            folder with the `package.json` file\n          */\n-        public Builder(ClassFinder classFinder, File npmFolder) {\n-            this(classFinder, npmFolder, new File(npmFolder, System\n+        public Builder(ClassFinder classFinder, File npmFolder, Lookup lookup) {", "originalCommit": "a7fee518964be7a59a817dcbb8a252171f0b3e44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk0NzEwMw==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r533947103", "bodyText": "done", "author": "haijian-vaadin", "createdAt": "2020-12-02T07:25:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzExMDgzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzExMjU0Mw==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r533112543", "bodyText": "Not sure the final usage of this interface but it seems the methods with the return type should return the class and not its superclass.\nSo may be it should be\nTaskGenerateEndpointBase<T extends TaskGenerateEndpointBase> extends FallibleCommand{\n\nT withApplicationProperties(File applicationProperties);\n}", "author": "denis-anisimov", "createdAt": "2020-12-01T07:04:25Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateEndpointBase.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.frontend;\n+\n+import java.io.File;\n+\n+/**\n+ * Base interface for endpoint generation related tasks.\n+ */\n+public interface TaskGenerateEndpointBase extends FallibleCommand {", "originalCommit": "a7fee518964be7a59a817dcbb8a252171f0b3e44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk0NzM3NA==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r533947374", "bodyText": "I removed this unnecessary interface.", "author": "haijian-vaadin", "createdAt": "2020-12-02T07:26:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzExMjU0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzExNjMxMQ==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r533116311", "bodyText": "Another thing which I would recommend: methods withXXX are good for builders.\nThese are commands, not builders.\nI would  make factories instead which produces the command.\nFactory should accept paramer(s) and produces the command instance.\nThe only issue which I see here: there should be only one method. It means the fixed amount of parameters.\nSo factories extending has no sense.\nInstead I would may be make builder (which may extends one each other) and the builder may produce an immutable instance of configuration which will be passed to a factory.", "author": "denis-anisimov", "createdAt": "2020-12-01T07:14:14Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateEndpointBase.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.frontend;\n+\n+import java.io.File;\n+\n+/**\n+ * Base interface for endpoint generation related tasks.\n+ */\n+public interface TaskGenerateEndpointBase extends FallibleCommand {", "originalCommit": "a7fee518964be7a59a817dcbb8a252171f0b3e44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk0Nzg5OQ==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r533947899", "bodyText": "Good point, I removed those withXXX methods, use a init() method instead, in this way, we also don't need the factory.", "author": "haijian-vaadin", "createdAt": "2020-12-02T07:27:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzExNjMxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1ODI0Mg==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r533958242", "bodyText": "init method may be better than withXxx but it's also an evil.\ninit method is a weak API: public method means that the method may be called by anyone at any time.\nSo your intention with init method is to define a contract which says: this method should be called once.\nBut you don't define such contract via Java : as I said the method is public and can be called many times by anyone who has an access to the instance.\nMay be in this case since the instance is \"private\" it's not an issue.\nBut I'm pretty sure that you may replace easily init with a factory create(or whatever), it's almost the same with one significant difference: init may be called any number of times , CTOR may be called only once.\nSo it's always better to create some new instance via CTOR with arguments instead of init method with same arguments.\nThe only difference is : to be able to call CTOR you will need a factory (which can be created with a default CTOR) and then create a required instance via a factory method which instantiate an instance via CTOR instead of calling init on the required instance right away.\nSo it's better to use factories instead of ugly init method: it defines good clear contract via Java without any additional assumption.", "author": "denis-anisimov", "createdAt": "2020-12-02T07:50:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzExNjMxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1MjkyMQ==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r535952921", "bodyText": "done", "author": "haijian-vaadin", "createdAt": "2020-12-04T09:21:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzExNjMxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzExNjU3MA==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r533116570", "bodyText": "same comments as above for TaskGenerateEndpointBase.", "author": "denis-anisimov", "createdAt": "2020-12-01T07:14:49Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateOpenApi.java", "diffHunk": "@@ -16,53 +16,25 @@\n package com.vaadin.flow.server.frontend;\n \n import java.io.File;\n-import java.util.Collections;\n-import java.util.Objects;\n-\n-import com.vaadin.flow.server.ExecutionFailedException;\n-import com.vaadin.flow.server.connect.Endpoint;\n-import com.vaadin.flow.server.connect.generator.OpenApiSpecGenerator;\n \n /**\n  * Generate OpenAPI json file for Vaadin Endpoints.\n  */\n-public class TaskGenerateOpenApi extends AbstractTaskConnectGenerator {\n-\n-    private final File javaSourceFolder;\n-    private final transient ClassLoader classLoader;\n-    private final File output;\n+public interface TaskGenerateOpenApi extends TaskGenerateEndpointBase {", "originalCommit": "a7fee518964be7a59a817dcbb8a252171f0b3e44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk0Nzk4MA==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r533947980", "bodyText": "done", "author": "haijian-vaadin", "createdAt": "2020-12-02T07:27:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzExNjU3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzExODgwMw==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r533118803", "bodyText": "This code and code below assumes that connect will be available and configured.\n(see withConnectApplicationProperties, etc...).\nThe proper logic should check whether a service is available and the configure it only if it's available.", "author": "denis-anisimov", "createdAt": "2020-12-01T07:20:18Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/DevModeInitializer.java", "diffHunk": "@@ -281,8 +282,9 @@ public static void initDevModeHandler(Set<Class<?>> classes,\n         File flowResourcesFolder = new File(baseDir,\n                 DEFAULT_FLOW_RESOURCES_FOLDER);\n \n+        Lookup lookup = new VaadinServletContext(context).getAttribute(Lookup.class);\n         Builder builder = new NodeTasks.Builder(new DevModeClassFinder(classes),\n-                new File(baseDir), new File(generatedDir),\n+                new File(baseDir), lookup, new File(generatedDir),", "originalCommit": "a7fee518964be7a59a817dcbb8a252171f0b3e44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1MjA0NQ==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r533952045", "bodyText": "Add logic to check if endpoint services are available before running endpoint related logic", "author": "haijian-vaadin", "createdAt": "2020-12-02T07:36:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzExODgwMw=="}], "type": "inlineReview"}, {"oid": "12635e6e7bf5c7a285038449ec3906902b7e0657", "url": "https://github.com/vaadin/flow/commit/12635e6e7bf5c7a285038449ec3906902b7e0657", "message": "update fusion-endpoint pom to fix compile errors", "committedDate": "2020-12-01T08:00:25Z", "type": "commit"}, {"oid": "f630dbd8ac1fe1bcee0b25f72d0a45d38acbbcfe", "url": "https://github.com/vaadin/flow/commit/f630dbd8ac1fe1bcee0b25f72d0a45d38acbbcfe", "message": "apply some code review suggestions", "committedDate": "2020-12-01T09:27:34Z", "type": "commit"}, {"oid": "372e18ed853e1bcdd79d9fb1196ca6e3b7672d5f", "url": "https://github.com/vaadin/flow/commit/372e18ed853e1bcdd79d9fb1196ca6e3b7672d5f", "message": "fix compile errors", "committedDate": "2020-12-01T10:43:41Z", "type": "commit"}, {"oid": "2cc2d0f1f0a1c9688e3dad3aa9c5a6b00494fddb", "url": "https://github.com/vaadin/flow/commit/2cc2d0f1f0a1c9688e3dad3aa9c5a6b00494fddb", "message": "clean up fusion and flow-server dependencies", "committedDate": "2020-12-01T14:45:21Z", "type": "commit"}, {"oid": "d0a89329818a61a7274fceac1c19c39f94b8d192", "url": "https://github.com/vaadin/flow/commit/d0a89329818a61a7274fceac1c19c39f94b8d192", "message": "remove unnecessray interfaces", "committedDate": "2020-12-01T21:07:03Z", "type": "commit"}, {"oid": "fa3e9873e0a1382130685603493f0ca9381d04cb", "url": "https://github.com/vaadin/flow/commit/fa3e9873e0a1382130685603493f0ca9381d04cb", "message": "unignore BuildFrontendMojoEndpointTest", "committedDate": "2020-12-01T23:06:52Z", "type": "commit"}, {"oid": "0a60554001238bb41f49e6874c62b61ddd452e9a", "url": "https://github.com/vaadin/flow/commit/0a60554001238bb41f49e6874c62b61ddd452e9a", "message": "move endpoint related tests from DevModeInitializerTest to DevModeInitializerEndpointTest", "committedDate": "2020-12-02T06:36:14Z", "type": "commit"}, {"oid": "249ff821194ce3509e7ca1d4560bba83efef9df0", "url": "https://github.com/vaadin/flow/commit/249ff821194ce3509e7ca1d4560bba83efef9df0", "message": "Merge branch 'master' into haijian/fusion-server-module", "committedDate": "2020-12-02T06:46:15Z", "type": "commit"}, {"oid": "1f739dc98a5e2735b462b848344bb4f9749e41c8", "url": "https://github.com/vaadin/flow/commit/1f739dc98a5e2735b462b848344bb4f9749e41c8", "message": "move instantiable check to ReflectTools", "committedDate": "2020-12-02T07:18:36Z", "type": "commit"}, {"oid": "63183d171b57a710dfd9e1ee3b2da2a79d9f8826", "url": "https://github.com/vaadin/flow/commit/63183d171b57a710dfd9e1ee3b2da2a79d9f8826", "message": "move lookup creation to the super class (FlowModeAbstractMojo)", "committedDate": "2020-12-02T07:24:24Z", "type": "commit"}, {"oid": "00e043281d18491631fc7e6f55643b9b1f75e79b", "url": "https://github.com/vaadin/flow/commit/00e043281d18491631fc7e6f55643b9b1f75e79b", "message": "fix broken link in javadoc", "committedDate": "2020-12-02T07:49:09Z", "type": "commit"}, {"oid": "3de4d91ab89583ab335c6f52dcb149ff115b535d", "url": "https://github.com/vaadin/flow/commit/3de4d91ab89583ab335c6f52dcb149ff115b535d", "message": "move one more endpoint related test from BuildFrontendMojoTest to BuildFrontendMojoEndpointTest", "committedDate": "2020-12-02T07:54:22Z", "type": "commit"}, {"oid": "e2fd79944bee05f2d8c00f9a3196824135575d91", "url": "https://github.com/vaadin/flow/commit/e2fd79944bee05f2d8c00f9a3196824135575d91", "message": "fix broken javadoc link", "committedDate": "2020-12-02T08:04:52Z", "type": "commit"}, {"oid": "475b4864a81150fc3ec4e7af0efdeb76d2ed25b4", "url": "https://github.com/vaadin/flow/commit/475b4864a81150fc3ec4e7af0efdeb76d2ed25b4", "message": "move spring.factories file from flow-server to fusion-endpoint", "committedDate": "2020-12-02T08:41:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk5OTAyMw==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r533999023", "bodyText": "Replace this if-then-else statement by a single return statement.", "author": "vaadin-bot", "createdAt": "2020-12-02T09:02:13Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/ReflectTools.java", "diffHunk": "@@ -825,6 +825,37 @@ public static Object getAnnotationMethodValue(Annotation annotation,\n         return Optional.empty();\n     }\n \n+    /**\n+     * Check if a class can be instantiated or not\n+     * \n+     * @param clazz\n+     *            the class to check\n+     * @return true if the class can be instantiated, otherwise false\n+     */\n+    public static boolean isInstantiable(Class<?> clazz) {\n+        if (clazz.isInterface()) {\n+          return false;\n+        }\n+        if (clazz.isSynthetic()) {\n+          return false;\n+        }\n+        if (Modifier.isAbstract(clazz.getModifiers())) {\n+          return false;\n+        }\n+        if (!Modifier.isPublic(clazz.getModifiers())) {\n+          return false;\n+        }\n+        Optional<Constructor<?>> constructor = Stream.of(clazz.getConstructors())\n+            .filter(ctor -> ctor.getParameterCount() == 0).findFirst();\n+        if (!constructor.isPresent() || !Modifier.isPublic(constructor.get().getModifiers())) {\n+          return false;\n+        }\n+        if (clazz.getEnclosingClass() != null && !Modifier.isStatic(clazz.getModifiers())) {", "originalCommit": "475b4864a81150fc3ec4e7af0efdeb76d2ed25b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk5OTA4Ng==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r533999086", "bodyText": "Remove this use of \"Thread.sleep()\".", "author": "vaadin-bot", "createdAt": "2020-12-02T09:02:18Z", "path": "fusion-endpoint/src/test/java/com/vaadin/flow/server/startup/fusion/DevModeInitializerEndpointTest.java", "diffHunk": "@@ -0,0 +1,199 @@\n+package com.vaadin.flow.server.startup.fusion;\n+\n+import static com.vaadin.flow.server.Constants.CONNECT_JAVA_SOURCE_FOLDER_TOKEN;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_PRODUCTION_MODE;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_REUSE_DEV_SERVER;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.DEFAULT_CONNECT_GENERATED_TS_DIR;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.DEFAULT_CONNECT_JAVA_SOURCE_FOLDER;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.DEFAULT_CONNECT_OPENAPI_JSON_FILE;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.File;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletRegistration;\n+\n+import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.di.ResourceProvider;\n+import com.vaadin.flow.server.DevModeHandler;\n+import com.vaadin.flow.server.VaadinServlet;\n+import com.vaadin.flow.server.frontend.FrontendUtils;\n+import com.vaadin.flow.server.frontend.TaskGenerateConnect;\n+import com.vaadin.flow.server.frontend.TaskGenerateOpenApi;\n+import com.vaadin.flow.server.frontend.fusion.TaskGenerateConnectImpl;\n+import com.vaadin.flow.server.frontend.fusion.TaskGenerateOpenApiImpl;\n+import com.vaadin.flow.server.startup.DevModeInitializer;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mockito;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+\n+@NotThreadSafe\n+public class DevModeInitializerEndpointTest {\n+    private final AtomicReference<DevModeHandler> atomicHandler = new AtomicReference<>();\n+    \n+    String baseDir;\n+    ServletContext servletContext;\n+    Map<String, String> initParams;\n+    Set<Class<?>> classes;\n+    DevModeInitializer devModeInitializer;\n+\n+    private final TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+    private static class VaadinServletSubClass extends VaadinServlet {\n+\n+    }\n+\n+    @Before\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    public void setup() throws Exception {\n+        assertNull(getDevModeHandler());\n+\n+        temporaryFolder.create();\n+        baseDir = temporaryFolder.getRoot().getPath();\n+\n+        servletContext = Mockito.mock(ServletContext.class);\n+        ServletRegistration vaadinServletRegistration = Mockito\n+                .mock(ServletRegistration.class);\n+\n+        Lookup lookup = Mockito.mock(Lookup.class);\n+        Mockito.when(servletContext.getAttribute(Lookup.class.getName()))\n+                .thenReturn(lookup);\n+        Mockito.doReturn(new TaskGenerateConnectImpl()).when(lookup).lookup(TaskGenerateConnect.class);\n+        Mockito.doReturn(new TaskGenerateOpenApiImpl()).when(lookup).lookup(TaskGenerateOpenApi.class);\n+\n+        ResourceProvider resourceProvider = Mockito\n+                .mock(ResourceProvider.class);\n+        Mockito.when(lookup.lookup(ResourceProvider.class))\n+                .thenReturn(resourceProvider);\n+\n+        Mockito.when(vaadinServletRegistration.getClassName())\n+                .thenReturn(VaadinServletSubClass.class.getName());\n+\n+        initParams = new HashMap<>();\n+        initParams.put(FrontendUtils.PROJECT_BASEDIR, baseDir);\n+\n+        Mockito.when(vaadinServletRegistration.getInitParameters())\n+                .thenReturn(initParams);\n+\n+        classes = new HashSet<>();\n+        classes.add(this.getClass());\n+\n+        Map registry = new HashMap();\n+\n+        // Adding extra registrations to make sure that DevModeInitializer picks\n+        // the correct registration which is a VaadinServlet registration.\n+        registry.put(\"extra1\", Mockito.mock(ServletRegistration.class));\n+        registry.put(\"foo\", vaadinServletRegistration);\n+        registry.put(\"extra2\", Mockito.mock(ServletRegistration.class));\n+        Mockito.when(servletContext.getServletRegistrations())\n+                .thenReturn(registry);\n+        Mockito.when(servletContext.getInitParameterNames())\n+                .thenReturn(Collections.emptyEnumeration());\n+        Mockito.when(servletContext.getClassLoader())\n+                .thenReturn(this.getClass().getClassLoader());\n+\n+        FileUtils.forceMkdir(\n+                new File(baseDir, DEFAULT_CONNECT_JAVA_SOURCE_FOLDER));\n+\n+        devModeInitializer = new DevModeInitializer();\n+    }\n+\n+    @After\n+    public void teardown() throws Exception, SecurityException {\n+        System.clearProperty(\"vaadin.\" + SERVLET_PARAMETER_PRODUCTION_MODE);\n+        System.clearProperty(\"vaadin.\" + SERVLET_PARAMETER_REUSE_DEV_SERVER);\n+        System.clearProperty(\"vaadin.\" + CONNECT_JAVA_SOURCE_FOLDER_TOKEN);\n+\n+        temporaryFolder.delete();\n+        if (getDevModeHandler() != null) {\n+            getDevModeHandler().stop();\n+        }\n+    }\n+\n+    @Test\n+    public void should_generateOpenApi_when_EndpointPresents()\n+            throws Exception {\n+\n+        // Configure a folder that has .java classes with valid endpoints\n+        // Not using `src/test/java` because there are invalid endpoint names\n+        // in some tests\n+        File src = new File(\n+                getClass().getClassLoader().getResource(\"java\").getFile());\n+        System.setProperty(\"vaadin.\" + CONNECT_JAVA_SOURCE_FOLDER_TOKEN,\n+                src.getAbsolutePath());\n+\n+        File generatedOpenApiJson = Paths\n+                .get(baseDir, DEFAULT_CONNECT_OPENAPI_JSON_FILE).toFile();\n+\n+        Assert.assertFalse(generatedOpenApiJson.exists());\n+        DevModeInitializer devModeInitializer = new DevModeInitializer();\n+        devModeInitializer.onStartup(classes, servletContext);\n+        waitForDevModeServer();\n+        Thread.sleep(200);", "originalCommit": "475b4864a81150fc3ec4e7af0efdeb76d2ed25b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d19d1088d9920ee34aefd85c061c2a517b6b6cb7", "url": "https://github.com/vaadin/flow/commit/d19d1088d9920ee34aefd85c061c2a517b6b6cb7", "message": "use a factory to create endpoint generator tasks", "committedDate": "2020-12-02T10:27:32Z", "type": "commit"}, {"oid": "ac0a1e825df92eefcaec6c678e7c6b9d912e7a61", "url": "https://github.com/vaadin/flow/commit/ac0a1e825df92eefcaec6c678e7c6b9d912e7a61", "message": "fix javadoc", "committedDate": "2020-12-02T10:32:43Z", "type": "commit"}, {"oid": "2837ad291b1b3035ca3f0e98f5c94df5ec050688", "url": "https://github.com/vaadin/flow/commit/2837ad291b1b3035ca3f0e98f5c94df5ec050688", "message": "refactor: rename method name in ReflectTools", "committedDate": "2020-12-02T13:09:32Z", "type": "commit"}, {"oid": "7824a8a2e1bbaa3ae0e12b3c05ad2f5ceef858e1", "url": "https://github.com/vaadin/flow/commit/7824a8a2e1bbaa3ae0e12b3c05ad2f5ceef858e1", "message": "use class find to load class", "committedDate": "2020-12-02T13:58:43Z", "type": "commit"}, {"oid": "a1a40cb21b45d679c1af6471791f97a221478fb9", "url": "https://github.com/vaadin/flow/commit/a1a40cb21b45d679c1af6471791f97a221478fb9", "message": "code format", "committedDate": "2020-12-02T14:00:14Z", "type": "commit"}, {"oid": "7eba16ecd67064ac0bdc320add74deef1c536d0f", "url": "https://github.com/vaadin/flow/commit/7eba16ecd67064ac0bdc320add74deef1c536d0f", "message": "fix sonar issues", "committedDate": "2020-12-02T19:16:14Z", "type": "commit"}, {"oid": "b0ed6a7f33d526b87b7811eaaa4b310fa386f06f", "url": "https://github.com/vaadin/flow/commit/b0ed6a7f33d526b87b7811eaaa4b310fa386f06f", "message": "fix sonar", "committedDate": "2020-12-02T19:18:07Z", "type": "commit"}, {"oid": "08be3ae4c5545ae82b8fd1ddc848e7afbee20665", "url": "https://github.com/vaadin/flow/commit/08be3ae4c5545ae82b8fd1ddc848e7afbee20665", "message": "fix sonar", "committedDate": "2020-12-02T20:25:46Z", "type": "commit"}, {"oid": "bdec6d1146386adf84b6c580a722269f06e91795", "url": "https://github.com/vaadin/flow/commit/bdec6d1146386adf84b6c580a722269f06e91795", "message": "fix sonar", "committedDate": "2020-12-03T06:39:47Z", "type": "commit"}, {"oid": "2a7b878b4b03854e5daeb7dbfd89e15783af393e", "url": "https://github.com/vaadin/flow/commit/2a7b878b4b03854e5daeb7dbfd89e15783af393e", "message": "fix: load found classes by the plugin's classloader", "committedDate": "2020-12-03T06:43:19Z", "type": "commit"}, {"oid": "791f57f80d81476a2373815495f33f9209b5ad5f", "url": "https://github.com/vaadin/flow/commit/791f57f80d81476a2373815495f33f9209b5ad5f", "message": "Merge branch 'haijian/fusion-server-module' of git@github.com:vaadin/flow.git into haijian/fusion-server-module", "committedDate": "2020-12-03T06:43:35Z", "type": "commit"}, {"oid": "354c80581676ac8b1f8e4e07326e872bedd4754d", "url": "https://github.com/vaadin/flow/commit/354c80581676ac8b1f8e4e07326e872bedd4754d", "message": "remove flow-maven-plugin dependency from fusion-endpoint", "committedDate": "2020-12-03T07:16:11Z", "type": "commit"}, {"oid": "87ed7b3d1c18863e3ed85e81f07524a1c44ad9af", "url": "https://github.com/vaadin/flow/commit/87ed7b3d1c18863e3ed85e81f07524a1c44ad9af", "message": "remove flow-maven-plugin dependency from fusion-endpoint", "committedDate": "2020-12-03T07:16:46Z", "type": "commit"}, {"oid": "49d4a51e82d723271334fad273b82f87a28d077f", "url": "https://github.com/vaadin/flow/commit/49d4a51e82d723271334fad273b82f87a28d077f", "message": "code format", "committedDate": "2020-12-03T08:16:45Z", "type": "commit"}, {"oid": "f81cfe67f57fb094dffbb54c1826d759204bc608", "url": "https://github.com/vaadin/flow/commit/f81cfe67f57fb094dffbb54c1826d759204bc608", "message": "change init method back to constructor", "committedDate": "2020-12-04T07:26:50Z", "type": "commit"}, {"oid": "0db98c8897160eebb7fb552c38a4364b28ad4e14", "url": "https://github.com/vaadin/flow/commit/0db98c8897160eebb7fb552c38a4364b28ad4e14", "message": "code format", "committedDate": "2020-12-04T07:30:13Z", "type": "commit"}, {"oid": "b028a7da9a47dc0c51d1bbe477ed0c6688a2edd6", "url": "https://github.com/vaadin/flow/commit/b028a7da9a47dc0c51d1bbe477ed0c6688a2edd6", "message": "remove endpoint generation templates from flow-server, since they were moved to fusion-endpoint", "committedDate": "2020-12-04T07:43:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwMTg5Nw==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r536001897", "bodyText": "I would may be avoid passing ClassFinder  as a separate parameter here and everywhere.\nLookup may be created so that it may return the ClassFinder by ClassFinder.class.\nYou may implement this by yourself here or wait for #9572 where I introduced two static methods into Lookup which allows to extend it.\nBut this is not very important.", "author": "denis-anisimov", "createdAt": "2020-12-04T10:37:06Z", "path": "flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/BuildFrontendMojo.java", "diffHunk": "@@ -161,8 +159,11 @@ private void runNodeUpdater() throws ExecutionFailedException, MojoExecutionExce\n         } catch (URISyntaxException e) {\n             throw new MojoExecutionException(\"Failed to parse \" + nodeDownloadRoot, e);\n         }\n+        \n+        ClassFinder classFinder = getClassFinder(project);\n+        Lookup lookup= createLookup(classFinder);\n         // @formatter:off\n-        new NodeTasks.Builder(getClassFinder(project),\n+        new NodeTasks.Builder(lookup, classFinder,", "originalCommit": "b028a7da9a47dc0c51d1bbe477ed0c6688a2edd6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA4MTYyMg==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r538081622", "bodyText": "done", "author": "haijian-vaadin", "createdAt": "2020-12-08T06:58:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwMTg5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwMjQyOQ==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r536002429", "bodyText": "Here you may add directly a special case for ClassFinder.class.", "author": "denis-anisimov", "createdAt": "2020-12-04T10:37:56Z", "path": "flow-maven-plugin/src/main/java/com/vaadin/flow/utils/LookupImpl.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.utils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.internal.ReflectTools;\n+import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n+\n+/**\n+ * An implementation of Lookup, which could be used to find service(s) of a give\n+ * type.\n+ */\n+public class LookupImpl implements Lookup {\n+\n+    private ClassFinder classFinder;\n+\n+    /**\n+     * Creates an implementation of Lookup.\n+     * \n+     * @param classFinder\n+     *            for searching service implementations.\n+     */\n+    public LookupImpl(ClassFinder classFinder) {\n+        this.classFinder = classFinder;\n+    }\n+\n+    @Override\n+    public <T> T lookup(Class<T> serviceClass) {\n+        return lookupAll(serviceClass).stream().findFirst().orElse(null);", "originalCommit": "b028a7da9a47dc0c51d1bbe477ed0c6688a2edd6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA4MTUyMQ==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r538081521", "bodyText": "didn't make it a special case, but instead using Lookup.compose() when creating the Lookup", "author": "haijian-vaadin", "createdAt": "2020-12-08T06:58:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwMjQyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwNTMzNg==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r536005336", "bodyText": "Would be good to improve javadoc.\nIt should explain what the service is: this is a static check whether a class may be instantiated via its default CTOR via reflection. static check means that the CTOR may throw an exception and this is not checked but only possibility to instantiate the class based on type data", "author": "denis-anisimov", "createdAt": "2020-12-04T10:42:39Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/ReflectTools.java", "diffHunk": "@@ -825,6 +825,37 @@ public static Object getAnnotationMethodValue(Annotation annotation,\n         return Optional.empty();\n     }\n \n+    /**\n+     * Check if a class can be instantiated as a service or not.", "originalCommit": "b028a7da9a47dc0c51d1bbe477ed0c6688a2edd6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA4MTEzNw==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r538081137", "bodyText": "updated the java doc", "author": "haijian-vaadin", "createdAt": "2020-12-08T06:57:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwNTMzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwNjA3MA==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r536006070", "bodyText": "I suggest to skip ClassFinder  passing as a parameter here (and everywhere).", "author": "denis-anisimov", "createdAt": "2020-12-04T10:43:55Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java", "diffHunk": "@@ -125,39 +126,47 @@\n          */\n         private URI nodeDownloadRoot = URI.create(NodeInstaller.DEFAULT_NODEJS_DOWNLOAD_ROOT);\n \n+        private Lookup lookup;\n+\n         /**\n          * Create a builder instance given an specific npm folder.\n          *\n+         * @param lookup\n+         *            a {@link Lookup} to discover services used by Flow (SPI)\n          * @param classFinder\n          *            a class finder\n          * @param npmFolder\n          *            folder with the `package.json` file\n          */\n-        public Builder(ClassFinder classFinder, File npmFolder) {\n-            this(classFinder, npmFolder, new File(npmFolder, System\n+        public Builder(Lookup lookup, ClassFinder classFinder, File npmFolder) {", "originalCommit": "b028a7da9a47dc0c51d1bbe477ed0c6688a2edd6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA4MDk4Mw==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r538080983", "bodyText": "Removed the ClassFinder parameter, use Lookup to look for ClassFinder", "author": "haijian-vaadin", "createdAt": "2020-12-08T06:57:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwNjA3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwNjk1OQ==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r536006959", "bodyText": "create implies that the return value won't be null  but anyway please add to the @return that it's never null", "author": "denis-anisimov", "createdAt": "2020-12-04T10:45:21Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/EndpointGeneratorTaskFactory.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.server.frontend;\n+\n+import java.io.File;\n+\n+/**\n+ * A factory for creating Vaadin Endpoint generator tasks\n+ *\n+ * @author Vaadin Ltd.\n+ * @since 6.0\n+ */\n+public interface EndpointGeneratorTaskFactory {\n+\n+    /**\n+     * Create a task for generating TS files based.\n+     *\n+     * @param applicationProperties\n+     *            application properties file.\n+     * @param openApi\n+     *            openApi json file.\n+     * @param outputFolder\n+     *            the output folder.\n+     * @param frontendDirectory\n+     *            the frontend folder.\n+     * @return an endpoint tasks for generating TypeScript files for endpoints.", "originalCommit": "b028a7da9a47dc0c51d1bbe477ed0c6688a2edd6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwNzQyMw==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r536007423", "bodyText": "This is technically extra check.\nThe lookup is never null here.", "author": "denis-anisimov", "createdAt": "2020-12-04T10:46:06Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/DevModeInitializer.java", "diffHunk": "@@ -394,13 +397,19 @@ public static void initDevModeHandler(Set<Class<?>> classes,\n         DevModeHandler.start(config, builder.npmFolder, runNodeTasks);\n     }\n \n+    private static boolean isEndpointServiceAvailable(Lookup lookup) {\n+        if (lookup == null) {", "originalCommit": "b028a7da9a47dc0c51d1bbe477ed0c6688a2edd6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwOTM3Mg==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r536009372", "bodyText": "Should these test be really removed ?\nAre they moved somewhere else ?\nShould there be some replacement ?\nE.g. now there is no need to check the functionality (integration: something is generated and so on).\nBut you may check that some methods of classes that are in the lookup are called: e.g. factory is called.\nAnd also objects produced by the factory are called somehow (doesn't matter what they do but they are called).", "author": "denis-anisimov", "createdAt": "2020-12-04T10:49:10Z", "path": "flow-server/src/test/java/com/vaadin/flow/server/startup/DevModeInitializerTest.java", "diffHunk": "@@ -299,29 +295,6 @@ public void shouldUseFullPathScannerByDefault() throws Exception {\n                 Mockito.any(FallbackChunk.class));\n     }\n \n-    @Test\n-    public void should_generateOpenApi_when_EndpointPresents()", "originalCommit": "b028a7da9a47dc0c51d1bbe477ed0c6688a2edd6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA3NjI2Nw==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r536076267", "bodyText": "The tests were moved to DevModeInitializerEndpointTest", "author": "haijian-vaadin", "createdAt": "2020-12-04T12:49:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwOTM3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA4MTI5Nw==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r536081297", "bodyText": "True, good point, I will add tests to verify that certain methods get called", "author": "haijian-vaadin", "createdAt": "2020-12-04T12:58:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwOTM3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEwMzEyNg==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r536103126", "bodyText": "Done", "author": "haijian-vaadin", "createdAt": "2020-12-04T13:35:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwOTM3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAxMDM4Nw==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r536010387", "bodyText": "Up to you , but I would may be add checks that arguments are not null (if they should not be null ).\nAnd javadocs should be extended so it mentions which arguments are allowed to be null and which not.", "author": "denis-anisimov", "createdAt": "2020-12-04T10:50:45Z", "path": "fusion-endpoint/src/main/java/com/vaadin/flow/server/frontend/fusion/EndpointGeneratorTaskFactoryImpl.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.frontend.fusion;\n+\n+import java.io.File;\n+\n+import com.vaadin.flow.server.frontend.EndpointGeneratorTaskFactory;\n+import com.vaadin.flow.server.frontend.TaskGenerateConnect;\n+import com.vaadin.flow.server.frontend.TaskGenerateOpenApi;\n+\n+/**\n+ * An implementation of the EndpointGeneratorTaskFactory, which creates endpoint generator tasks.\n+ */\n+public class EndpointGeneratorTaskFactoryImpl implements EndpointGeneratorTaskFactory {\n+\n+    @Override\n+    public TaskGenerateConnect createTaskGenerateConnect(File applicationProperties, File openApi, ", "originalCommit": "b028a7da9a47dc0c51d1bbe477ed0c6688a2edd6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAxNTY4OQ==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r536015689", "bodyText": "I see you have some checks for parameters in the CTOR.\nBut : is it enough?\nAnd anyway the javadocs doesn't say anything about that.", "author": "denis-anisimov", "createdAt": "2020-12-04T10:59:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAxMDM4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA4MDExNA==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r538080114", "bodyText": "done, added null check, also the javadoc to indicate the fields cannot be null", "author": "haijian-vaadin", "createdAt": "2020-12-08T06:55:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAxMDM4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAxMTA0NQ==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r536011045", "bodyText": "I think all (or most) fields may be set final.", "author": "denis-anisimov", "createdAt": "2020-12-04T10:51:42Z", "path": "fusion-endpoint/src/main/java/com/vaadin/flow/server/frontend/fusion/TaskGenerateConnectImpl.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.frontend.fusion;\n+\n+import java.io.File;\n+import java.util.Objects;\n+\n+import com.vaadin.flow.server.ExecutionFailedException;\n+import com.vaadin.flow.server.frontend.TaskGenerateConnect;\n+import com.vaadin.flow.server.connect.generator.VaadinConnectClientGenerator;\n+import com.vaadin.flow.server.connect.generator.VaadinConnectTsGenerator;\n+\n+import static com.vaadin.flow.server.connect.generator.VaadinConnectClientGenerator.CONNECT_CLIENT_NAME;\n+import static com.vaadin.flow.server.connect.generator.VaadinConnectClientGenerator.CUSTOM_CONNECT_CLIENT_NAME;\n+\n+/**\n+ * Generate the Vaadin TS files for endpoints, and the Client API file.\n+ */\n+public class TaskGenerateConnectImpl extends AbstractTaskConnectGenerator implements TaskGenerateConnect {\n+\n+    private File outputFolder;", "originalCommit": "b028a7da9a47dc0c51d1bbe477ed0c6688a2edd6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA4MDAzMg==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r536080032", "bodyText": "done", "author": "haijian-vaadin", "createdAt": "2020-12-04T12:55:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAxMTA0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAxMTI0OA==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r536011248", "bodyText": "All fields are most likely final.", "author": "denis-anisimov", "createdAt": "2020-12-04T10:52:00Z", "path": "fusion-endpoint/src/main/java/com/vaadin/flow/server/frontend/fusion/TaskGenerateOpenApiImpl.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.frontend.fusion;\n+\n+import java.io.File;\n+import java.util.Collections;\n+import java.util.Objects;\n+\n+import com.vaadin.flow.server.ExecutionFailedException;\n+import com.vaadin.flow.server.frontend.TaskGenerateOpenApi;\n+import com.vaadin.flow.server.connect.generator.OpenApiSpecGenerator;\n+\n+/**\n+ * Generate OpenAPI json file for Vaadin Endpoints.\n+ */\n+public class TaskGenerateOpenApiImpl extends AbstractTaskConnectGenerator implements TaskGenerateOpenApi {\n+\n+    private File javaSourceFolder;", "originalCommit": "b028a7da9a47dc0c51d1bbe477ed0c6688a2edd6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA3OTk5OA==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r536079998", "bodyText": "done", "author": "haijian-vaadin", "createdAt": "2020-12-04T12:55:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAxMTI0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAxMjQ5OQ==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r536012499", "bodyText": "Do you need this class to be Serializable?\nDoes this class even implement Serializable?\nI think the class should not be Serializable : it's not stored anywhere.\nSo if the class is serializable then you should care about transient fields: they won't be restored after deseriallization.\nIf class should not be serialzable then transient is not needed here.", "author": "denis-anisimov", "createdAt": "2020-12-04T10:53:57Z", "path": "fusion-endpoint/src/main/java/com/vaadin/flow/server/frontend/fusion/TaskGenerateOpenApiImpl.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.frontend.fusion;\n+\n+import java.io.File;\n+import java.util.Collections;\n+import java.util.Objects;\n+\n+import com.vaadin.flow.server.ExecutionFailedException;\n+import com.vaadin.flow.server.frontend.TaskGenerateOpenApi;\n+import com.vaadin.flow.server.connect.generator.OpenApiSpecGenerator;\n+\n+/**\n+ * Generate OpenAPI json file for Vaadin Endpoints.\n+ */\n+public class TaskGenerateOpenApiImpl extends AbstractTaskConnectGenerator implements TaskGenerateOpenApi {\n+\n+    private File javaSourceFolder;\n+    private transient ClassLoader classLoader;", "originalCommit": "b028a7da9a47dc0c51d1bbe477ed0c6688a2edd6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA3OTg5OQ==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r536079899", "bodyText": "Done, it was inherited from the existing code, now removed.", "author": "haijian-vaadin", "createdAt": "2020-12-04T12:55:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAxMjQ5OQ=="}], "type": "inlineReview"}, {"oid": "73cc7610e8e4391d89fb8d3e6ac9d3eeeeec830a", "url": "https://github.com/vaadin/flow/commit/73cc7610e8e4391d89fb8d3e6ac9d3eeeeec830a", "message": "add final modifier, remove unnecessary transient", "committedDate": "2020-12-04T12:54:39Z", "type": "commit"}, {"oid": "b1479f707d26a1cac677a5006451b072a2ae051a", "url": "https://github.com/vaadin/flow/commit/b1479f707d26a1cac677a5006451b072a2ae051a", "message": "add tests in DevModeInitializerTest to very ednpoint tasks execution", "committedDate": "2020-12-04T13:34:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyODkwNg==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r536228906", "bodyText": "typo?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Class<?> loadCassFromClassFindler(Class<?> clz) {\n          \n          \n            \n                private Class<?> loadClassFromClassFindler(Class<?> clz) {", "author": "platosha", "createdAt": "2020-12-04T16:38:24Z", "path": "flow-maven-plugin/src/main/java/com/vaadin/flow/utils/LookupImpl.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.utils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.internal.ReflectTools;\n+import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n+\n+/**\n+ * An implementation of Lookup, which could be used to find service(s) of a give\n+ * type.\n+ */\n+public class LookupImpl implements Lookup {\n+\n+    private ClassFinder classFinder;\n+\n+    /**\n+     * Creates an implementation of Lookup.\n+     * \n+     * @param classFinder\n+     *            for searching service implementations.\n+     */\n+    public LookupImpl(ClassFinder classFinder) {\n+        this.classFinder = classFinder;\n+    }\n+\n+    @Override\n+    public <T> T lookup(Class<T> serviceClass) {\n+        return lookupAll(serviceClass).stream().findFirst().orElse(null);\n+    }\n+\n+    @Override\n+    public <T> List<T> lookupAll(Class<T> serviceClass) {\n+        Set<?> subTypes = classFinder\n+                .getSubTypesOf(loadCassFromClassFindler(serviceClass));\n+        List<T> result = new ArrayList<>(subTypes.size());\n+        try {\n+            for (Object clazz : subTypes) {\n+                if (!ReflectTools.isInstantiableService((Class<?>) clazz)) {\n+                    continue;\n+                }\n+                Class<?> serviceType = serviceClass.getClassLoader()\n+                        .loadClass(((Class<?>) clazz).getName());\n+                result.add(serviceClass\n+                        .cast(ReflectTools.createInstance(serviceType)));\n+            }\n+        } catch (ClassNotFoundException e) {\n+            throw new IllegalStateException(\"Could not find service class\", e);\n+        }\n+        return result;\n+    }\n+\n+    private Class<?> loadCassFromClassFindler(Class<?> clz) {", "originalCommit": "b1479f707d26a1cac677a5006451b072a2ae051a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzMDMzMg==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r536230332", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * An implementation of Lookup, which could be used to find service(s) of a give\n          \n          \n            \n             * type.\n          \n          \n            \n             * An implementation of Lookup, which could be used to find service(s) of a given\n          \n          \n            \n             * type.", "author": "platosha", "createdAt": "2020-12-04T16:40:40Z", "path": "flow-maven-plugin/src/main/java/com/vaadin/flow/utils/LookupImpl.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.utils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.internal.ReflectTools;\n+import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n+\n+/**\n+ * An implementation of Lookup, which could be used to find service(s) of a give\n+ * type.", "originalCommit": "b1479f707d26a1cac677a5006451b072a2ae051a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bf87f70d4937e9f7ab95fec0fce0728219118e66", "url": "https://github.com/vaadin/flow/commit/bf87f70d4937e9f7ab95fec0fce0728219118e66", "message": "fix typos", "committedDate": "2020-12-07T11:23:23Z", "type": "commit"}, {"oid": "57482521139643d0fb6cb123321a2009a0edca44", "url": "https://github.com/vaadin/flow/commit/57482521139643d0fb6cb123321a2009a0edca44", "message": "null check and improve javadoc", "committedDate": "2020-12-07T11:40:51Z", "type": "commit"}, {"oid": "4f0d83d8e3a3d0eca28fb5ccee3370617ef9d096", "url": "https://github.com/vaadin/flow/commit/4f0d83d8e3a3d0eca28fb5ccee3370617ef9d096", "message": "Merge branch 'master' into haijian/fusion-server-module", "committedDate": "2020-12-07T11:41:22Z", "type": "commit"}, {"oid": "08b46428e7692433de7bb90cdcfebdf1688c290d", "url": "https://github.com/vaadin/flow/commit/08b46428e7692433de7bb90cdcfebdf1688c290d", "message": "add special check for ClassFinder in LookupImpl", "committedDate": "2020-12-07T11:49:40Z", "type": "commit"}, {"oid": "aca21504210c30e8d51085bcb9b67fead0784819", "url": "https://github.com/vaadin/flow/commit/aca21504210c30e8d51085bcb9b67fead0784819", "message": "get ClassFinder from lookup", "committedDate": "2020-12-07T22:02:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5OTc3Nw==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r537899777", "bodyText": "A \"NullPointerException\" could be thrown; \"lookup\" is nullable here.", "author": "vaadin-bot", "createdAt": "2020-12-07T23:03:55Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/DevModeInitializer.java", "diffHunk": "@@ -376,8 +381,6 @@ public static void initDevModeHandler(Set<Class<?>> classes,\n                 .withEmbeddableWebComponents(true).enablePnpm(enablePnpm)\n                 .withHomeNodeExecRequired(useHomeNodeExec).build();\n \n-        Lookup lookup = vaadinContext.getAttribute(Lookup.class);\n-\n         // Check whether executor is provided by the caller (framework)\n         Executor service = lookup.lookup(Executor.class);", "originalCommit": "aca21504210c30e8d51085bcb9b67fead0784819", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f555a1b1fd4ea03c49a1f1159db397d4e761cde1", "url": "https://github.com/vaadin/flow/commit/f555a1b1fd4ea03c49a1f1159db397d4e761cde1", "message": "add EndpointGeneratorTaskFactory to LookupInitializer", "committedDate": "2020-12-08T10:05:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI0MjM4MA==", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r538242380", "bodyText": "Remove this use of \"DeprecatedPolymerPublishedEventHandler\"; it is deprecated.", "author": "vaadin-bot", "createdAt": "2020-12-08T10:58:22Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/LookupInitializer.java", "diffHunk": "@@ -58,7 +59,8 @@\n  *\n  */\n @HandlesTypes({ ResourceProvider.class, InstantiatorFactory.class,\n-        DeprecatedPolymerPublishedEventHandler.class })\n+        DeprecatedPolymerPublishedEventHandler.class,", "originalCommit": "f555a1b1fd4ea03c49a1f1159db397d4e761cde1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}