{"pr_number": 8657, "pr_title": "Merge support for unknown item count to master", "pr_createdAt": "2020-06-30T09:56:16Z", "pr_url": "https://github.com/vaadin/flow/pull/8657", "timeline": [{"oid": "c0b4c38ea5c16e0b4a3043f9e23d1ffc49776e6e", "url": "https://github.com/vaadin/flow/commit/c0b4c38ea5c16e0b4a3043f9e23d1ffc49776e6e", "message": "Support undefined size for DataCommunicator (#8534)\n\nPart of vaadin/vaadin-grid-flow#966\r\nPart of #8189", "committedDate": "2020-06-12T13:26:01Z", "type": "commit"}, {"oid": "b9137bb3f013d6b768cd1e2edeb7b7e5041556b7", "url": "https://github.com/vaadin/flow/commit/b9137bb3f013d6b768cd1e2edeb7b7e5041556b7", "message": "Add HasDataView interface (#8559)\n\nAdded the HasDataView interface so that for cases that are not handled by ListDataView or LazyDataView there can still be a return type of DataView.\r\n\r\nPart of #8189", "committedDate": "2020-06-15T08:02:30Z", "type": "commit"}, {"oid": "92ab11744cb1643943985d72c1739b244e9c3d4d", "url": "https://github.com/vaadin/flow/commit/92ab11744cb1643943985d72c1739b244e9c3d4d", "message": "Add an AbstractLazyDataView (#8578)\n\n* Add a AbstractLazyDataView\r\n\r\nRemoves the public API for data communicator. Adds unit tests for undefined\r\nsize APIs for data communicator, except for default page increase since\r\nthat is likely to still change.\r\n\r\n* Add missing tests, small fixes\r\n\r\n* Fix review issues", "committedDate": "2020-06-18T11:13:25Z", "type": "commit"}, {"oid": "8305c93c1ba1eee5a6805e5b4794f7eb9ba6362c", "url": "https://github.com/vaadin/flow/commit/8305c93c1ba1eee5a6805e5b4794f7eb9ba6362c", "message": "Merge branch 'feature/dataprovider' into feature/undefined-size", "committedDate": "2020-06-21T14:24:26Z", "type": "commit"}, {"oid": "1b1eb23e374ce055cdfc4a88145b423a3baea881", "url": "https://github.com/vaadin/flow/commit/1b1eb23e374ce055cdfc4a88145b423a3baea881", "message": "Merge branch 'master' into feature/undefined-size", "committedDate": "2020-06-22T10:50:49Z", "type": "commit"}, {"oid": "2d50d23fdd668ac953d8f84a7c87e9445085ce68", "url": "https://github.com/vaadin/flow/commit/2d50d23fdd668ac953d8f84a7c87e9445085ce68", "message": "Update grid module", "committedDate": "2020-06-22T12:58:19Z", "type": "commit"}, {"oid": "03840b93519e563366fcf7b2ea2b92d7751d08da", "url": "https://github.com/vaadin/flow/commit/03840b93519e563366fcf7b2ea2b92d7751d08da", "message": "Refactor lazy data view API based on feedback (#8624)\n\n* Refactor to LazyDataView API based on feedback\r\n\r\nInstead of defined/undefined size, uses setRowCountUnknown and\r\nsetRowCountEstimate etc. Removed callback for estimate.\r\n\r\n* Fixes based on DX test feedback\r\n\r\n* Review fixes", "committedDate": "2020-06-27T14:46:58Z", "type": "commit"}, {"oid": "218d95c0f5ad372445551c8662df306b01e1e4a5", "url": "https://github.com/vaadin/flow/commit/218d95c0f5ad372445551c8662df306b01e1e4a5", "message": "Merge branch 'master' into feature/undefined-size", "committedDate": "2020-06-29T05:45:48Z", "type": "commit"}, {"oid": "f2ec48a189120efd335ec8d5b005749e2f36a80b", "url": "https://github.com/vaadin/flow/commit/f2ec48a189120efd335ec8d5b005749e2f36a80b", "message": "Merge branch 'master' into feature/undefined-size", "committedDate": "2020-06-30T09:29:15Z", "type": "commit"}, {"oid": "b6dac9f8d2c6599c11fe96d6c041a037f6444205", "url": "https://github.com/vaadin/flow/commit/b6dac9f8d2c6599c11fe96d6c041a037f6444205", "message": "Remove unnecessary things for merge to master", "committedDate": "2020-06-30T09:53:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU2NDA3Mw==", "url": "https://github.com/vaadin/flow/pull/8657#discussion_r447564073", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        + \" or getDataView() according to the used data type.\",\n          \n          \n            \n                                        + \" or 'getDataView()' according to the used data type.\",", "author": "mshabarov", "createdAt": "2020-06-30T09:59:38Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractDataView.java", "diffHunk": "@@ -81,10 +81,13 @@ public Registration addSizeChangeListener(\n      *             if data provider type is incompatible with data view type\n      */\n     protected final void verifyDataProviderType(Class<?> dataProviderType) {\n+        // TODO https://github.com/vaadin/flow/issues/8583\n         Class<?> supportedDataProviderType = getSupportedDataProviderType();\n         if (!supportedDataProviderType.isAssignableFrom(dataProviderType)) {\n             final String message = String.format(\n-                    \"%s only supports '%s' or it's subclasses, but was given a '%s'\",\n+                    \"%s only supports '%s' or it's subclasses, but was given a '%s'.\"\n+                            + \"%nUse either 'getLazyDataView()', 'getListDataView()'\"\n+                            + \" or getDataView() according to the used data type.\",", "originalCommit": "b6dac9f8d2c6599c11fe96d6c041a037f6444205", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NDA3MA==", "url": "https://github.com/vaadin/flow/pull/8657#discussion_r447594070", "bodyText": "Done", "author": "pleku", "createdAt": "2020-06-30T10:53:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU2NDA3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU2ODg1OA==", "url": "https://github.com/vaadin/flow/pull/8657#discussion_r447568858", "bodyText": "Could we remove it now, or is it better to create a ticket to improve this in the future?", "author": "mshabarov", "createdAt": "2020-06-30T10:07:54Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -393,16 +636,18 @@ protected Object getFilter() {\n                 inMemorySorting, filter);\n         Stream<T> stream = getDataProvider().fetch(query);\n         if (stream.isParallel()) {\n-            LoggerFactory.getLogger(DataCommunicator.class)\n-                    .debug(\"Data provider {} has returned \"\n+            getLogger(DataCommunicator.class).debug(\n+                    \"Data provider {} has returned \"\n                             + \"parallel stream on 'fetch' call\",\n-                            getDataProvider().getClass());\n+                    getDataProvider().getClass());\n             stream = stream.collect(Collectors.toList()).stream();\n             assert !stream.isParallel();\n         }\n+\n         SizeVerifier verifier = new SizeVerifier<>(limit);\n         stream = stream.peek(verifier);\n \n+        // FIXME simplify by removing these restrictions ?", "originalCommit": "b6dac9f8d2c6599c11fe96d6c041a037f6444205", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5MzM0Nw==", "url": "https://github.com/vaadin/flow/pull/8657#discussion_r447593347", "bodyText": "Done", "author": "pleku", "createdAt": "2020-06-30T10:52:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU2ODg1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU3MDcwNQ==", "url": "https://github.com/vaadin/flow/pull/8657#discussion_r447570705", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        + \"component to fetch the size of the data or a data\"\n          \n          \n            \n                                        + \" component to fetch the size of the data or a data\"", "author": "mshabarov", "createdAt": "2020-06-30T10:11:10Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasLazyDataView.java", "diffHunk": "@@ -16,63 +16,112 @@\n package com.vaadin.flow.data.provider;\n \n import java.io.Serializable;\n+import java.util.Collection;\n \n /**\n- * Interface that defines methods for setting in memory data.\n- * This will return a {@link LazyDataView}.\n+ * Interface that defines methods for fetching data lazily from a backend. The\n+ * API will return a {@link LazyDataView}.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @param <V>\n- *         DataView type\n+ *            DataView type\n  * @since\n  */\n-public interface HasLazyDataView<T, V extends LazyDataView<T>> extends\n-        Serializable {\n+public interface HasLazyDataView<T, V extends LazyDataView<T>>\n+        extends Serializable {\n+\n     /**\n-     * Supply data through a callback provider.\n+     * Supply data lazily with a callback from a backend. The component will\n+     * automatically fetch more items and adjust its size until the data source\n+     * runs out of items. Usage example:\n+     * <p>\n+     * {@code component.setDataSource(query -> orderService.getOrders(query.getOffset(), query.getLimit());}\n+     * <p>\n+     * The returned data view object can be used for further configuration, or\n+     * later on fetched with {@link #getLazyDataView()}. For using in-memory\n+     * data, like {@link java.util.Collection}, use\n+     * {@link HasListDataView#setDataSource(Collection)} instead.\n      *\n      * @param fetchCallback\n-     *         function that returns a stream of items from the back end for\n-     *         a query\n-     * @return LazyDataView instance\n+     *            function that returns a stream of items from the backend based\n+     *            on the offset and limit provided by the query object\n+     * @return LazyDataView instance for further configuration\n      */\n-    V setDataProvider(\n-            CallbackDataProvider.FetchCallback<T, Void> fetchCallback);\n+    default V setDataSource(\n+            CallbackDataProvider.FetchCallback<T, Void> fetchCallback) {\n+        setDataSource(DataProvider.fromCallbacks(fetchCallback, query -> {\n+            throw new IllegalStateException(\n+                    \"Trying to use defined size with a lazy loading component\"\n+                            + \" without either providing a count callback for the\"\n+                            + \"component to fetch the size of the data or a data\"", "originalCommit": "b6dac9f8d2c6599c11fe96d6c041a037f6444205", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NTMzNw==", "url": "https://github.com/vaadin/flow/pull/8657#discussion_r447595337", "bodyText": "Done", "author": "pleku", "createdAt": "2020-06-30T10:56:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU3MDcwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU3MDgyMQ==", "url": "https://github.com/vaadin/flow/pull/8657#discussion_r447570821", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        + \"provider that implements the size query. Provide the \"\n          \n          \n            \n                                        + \" provider that implements the size query. Provide the \"", "author": "mshabarov", "createdAt": "2020-06-30T10:11:22Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasLazyDataView.java", "diffHunk": "@@ -16,63 +16,112 @@\n package com.vaadin.flow.data.provider;\n \n import java.io.Serializable;\n+import java.util.Collection;\n \n /**\n- * Interface that defines methods for setting in memory data.\n- * This will return a {@link LazyDataView}.\n+ * Interface that defines methods for fetching data lazily from a backend. The\n+ * API will return a {@link LazyDataView}.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @param <V>\n- *         DataView type\n+ *            DataView type\n  * @since\n  */\n-public interface HasLazyDataView<T, V extends LazyDataView<T>> extends\n-        Serializable {\n+public interface HasLazyDataView<T, V extends LazyDataView<T>>\n+        extends Serializable {\n+\n     /**\n-     * Supply data through a callback provider.\n+     * Supply data lazily with a callback from a backend. The component will\n+     * automatically fetch more items and adjust its size until the data source\n+     * runs out of items. Usage example:\n+     * <p>\n+     * {@code component.setDataSource(query -> orderService.getOrders(query.getOffset(), query.getLimit());}\n+     * <p>\n+     * The returned data view object can be used for further configuration, or\n+     * later on fetched with {@link #getLazyDataView()}. For using in-memory\n+     * data, like {@link java.util.Collection}, use\n+     * {@link HasListDataView#setDataSource(Collection)} instead.\n      *\n      * @param fetchCallback\n-     *         function that returns a stream of items from the back end for\n-     *         a query\n-     * @return LazyDataView instance\n+     *            function that returns a stream of items from the backend based\n+     *            on the offset and limit provided by the query object\n+     * @return LazyDataView instance for further configuration\n      */\n-    V setDataProvider(\n-            CallbackDataProvider.FetchCallback<T, Void> fetchCallback);\n+    default V setDataSource(\n+            CallbackDataProvider.FetchCallback<T, Void> fetchCallback) {\n+        setDataSource(DataProvider.fromCallbacks(fetchCallback, query -> {\n+            throw new IllegalStateException(\n+                    \"Trying to use defined size with a lazy loading component\"\n+                            + \" without either providing a count callback for the\"\n+                            + \"component to fetch the size of the data or a data\"\n+                            + \"provider that implements the size query. Provide the \"", "originalCommit": "b6dac9f8d2c6599c11fe96d6c041a037f6444205", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NTM1Mg==", "url": "https://github.com/vaadin/flow/pull/8657#discussion_r447595352", "bodyText": "Done", "author": "pleku", "createdAt": "2020-06-30T10:56:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU3MDgyMQ=="}], "type": "inlineReview"}, {"oid": "6a4222e8724b74e07783d16ecdfc623eb2f81118", "url": "https://github.com/vaadin/flow/commit/6a4222e8724b74e07783d16ecdfc623eb2f81118", "message": "Review fixes, remove submodule", "committedDate": "2020-06-30T10:58:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYwMTk0NA==", "url": "https://github.com/vaadin/flow/pull/8657#discussion_r447601944", "bodyText": "Complete the task associated to this TODO comment.", "author": "vaadin-bot", "createdAt": "2020-06-30T11:10:03Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -273,26 +290,230 @@ public void confirmUpdate(int updateId) {\n      * @return size of available data\n      */\n     public int getDataSize() {\n-        if (resendEntireRange || assumeEmptyClient) {\n+        if (isDefinedSize()\n+                && (resendEntireRange || assumeEmptyClient || sizeReset)) {\n+            // TODO it could be possible to cache the value returned here\n+            // and use it next time instead of making another query, unless\n+            // the conditions like filter (or another reset) have changed\n             return getDataProviderSize();\n         }\n+        // do not report a stale size or size estimate\n+        if (!isDefinedSize() && sizeReset) {\n+            return 0;\n+        }\n         return assumedSize;\n     }\n \n+    /**\n+     * Returns whether the given item is part of the active items.\n+     * \n+     * @param item\n+     *            the item to check, not {@code null}\n+     * @return {@code true} if item is active, {@code false} if not\n+     */\n+    public boolean isItemActive(T item) {\n+        return getKeyMapper().has(item);\n+    }\n+\n+    /**\n+     * Returns the active item at the given index or throws a\n+     * {@link IndexOutOfBoundsException} in case the item is not active at the\n+     * moment.\n+     * \n+     * @param index\n+     *            the index of the item to get\n+     * @return the item\n+     */\n+    public T getActiveItemOnIndex(int index) {\n+        int activeDataEnd = activeStart + activeKeyOrder.size() - 1;\n+        if (index < activeStart || index > activeDataEnd) {\n+            throw new IndexOutOfBoundsException(String.format(\n+                    \"Given index %d is outside of the active range of the component '%d - %d'\",\n+                    index, activeStart, activeDataEnd));\n+        }\n+        return getKeyMapper().get(activeKeyOrder.get(index - activeStart));\n+    }\n+\n     /**\n      * Generate a data query with component sorting and filtering.\n      *\n      * @param offset\n-     *         first index to fetch\n+     *            first index to fetch\n      * @param limit\n-     *         fetched item count\n+     *            fetched item count\n      * @return {@link Query} for component state\n      */\n     public Query buildQuery(int offset, int limit) {\n         return new Query(offset, limit, getBackEndSorting(),\n                 getInMemorySorting(), getFilter());\n     }\n \n+    /**\n+     * Sets the page size that is used to fetch items. The queries to data\n+     * provider are a multiple of the page size.\n+     * \n+     * @param pageSize\n+     *            the page size to set\n+     */\n+    // TODO https://github.com/vaadin/flow/issues/8557", "originalCommit": "6a4222e8724b74e07783d16ecdfc623eb2f81118", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYwMTk1Nw==", "url": "https://github.com/vaadin/flow/pull/8657#discussion_r447601957", "bodyText": "Complete the task associated to this TODO comment.", "author": "vaadin-bot", "createdAt": "2020-06-30T11:10:04Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -273,26 +290,230 @@ public void confirmUpdate(int updateId) {\n      * @return size of available data\n      */\n     public int getDataSize() {\n-        if (resendEntireRange || assumeEmptyClient) {\n+        if (isDefinedSize()\n+                && (resendEntireRange || assumeEmptyClient || sizeReset)) {\n+            // TODO it could be possible to cache the value returned here", "originalCommit": "6a4222e8724b74e07783d16ecdfc623eb2f81118", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYwMTk3Mg==", "url": "https://github.com/vaadin/flow/pull/8657#discussion_r447601972", "bodyText": "Remove this useless assignment to local variable \"previousAssumedSize\". \n Remove this unused \"previousAssumedSize\" local variable.", "author": "vaadin-bot", "createdAt": "2020-06-30T11:10:05Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -358,14 +579,36 @@ public void setBackEndSorting(List<QuerySortOrder> sortOrder) {\n     }\n \n     /**\n-     * Getter method for finding the size of DataProvider. Can be overridden by\n-     * a subclass that uses a specific type of DataProvider and/or query.\n+     * Getter method for determining the row count of the data. Can be\n+     * overridden by a subclass that uses a specific type of DataProvider and/or\n+     * query.\n      *\n      * @return the size of data provider with current filter\n      */\n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     protected int getDataProviderSize() {\n-        return getDataProvider().size(new Query(getFilter()));\n+        assert definedSize : \"This method should never be called when using undefined size\";\n+        if (countCallback != null) {\n+            return countCallback.count(new Query(getFilter()));\n+        } else {\n+            return getDataProvider().size(new Query(getFilter()));\n+        }\n+    }\n+\n+    private void updateUndefinedSize() {\n+        assert !definedSize : \"This method should never be called when using defined size\";\n+        int previousAssumedSize = assumedSize;", "originalCommit": "6a4222e8724b74e07783d16ecdfc623eb2f81118", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYwMTk5MA==", "url": "https://github.com/vaadin/flow/pull/8657#discussion_r447601990", "bodyText": "Complete the task associated to this TODO comment.", "author": "vaadin-bot", "createdAt": "2020-06-30T11:10:07Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractDataView.java", "diffHunk": "@@ -81,10 +81,13 @@ public Registration addSizeChangeListener(\n      *             if data provider type is incompatible with data view type\n      */\n     protected final void verifyDataProviderType(Class<?> dataProviderType) {\n+        // TODO https://github.com/vaadin/flow/issues/8583", "originalCommit": "6a4222e8724b74e07783d16ecdfc623eb2f81118", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}