{"pr_number": 8534, "pr_title": "Support undefined size for DataCommunicator", "pr_createdAt": "2020-06-09T18:04:07Z", "pr_url": "https://github.com/vaadin/flow/pull/8534", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY1MDg4Nw==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r437650887", "bodyText": "Take the required action to fix the issue indicated by this comment.", "author": "vaadin-bot", "createdAt": "2020-06-09T18:58:20Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -411,16 +672,18 @@ protected Object getFilter() {\n                 inMemorySorting, filter);\n         Stream<T> stream = getDataProvider().fetch(query);\n         if (stream.isParallel()) {\n-            LoggerFactory.getLogger(DataCommunicator.class)\n-                    .debug(\"Data provider {} has returned \"\n+            getLogger(DataCommunicator.class).debug(\n+                    \"Data provider {} has returned \"\n                             + \"parallel stream on 'fetch' call\",\n-                            getDataProvider().getClass());\n+                    getDataProvider().getClass());\n             stream = stream.collect(Collectors.toList()).stream();\n             assert !stream.isParallel();\n         }\n+\n         SizeVerifier verifier = new SizeVerifier<>(limit);\n         stream = stream.peek(verifier);\n \n+        // FIXME simplify by removing these restrictions ?", "originalCommit": "2762f23ec0e92d278e4d266ee400e84935d45cfa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkyNTM1Mg==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r437925352", "bodyText": "Missing new line", "author": "caalador", "createdAt": "2020-06-10T07:45:19Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/SizeEstimateCallback.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Callback interface for estimating the number of items in a backend based on a\n+ * query.\n+ *\n+ * @param <T>\n+ *            the type of the items\n+ * @param <F>\n+ *            the type of the optional filter in the query, <code>Void</code> if\n+ *            filtering is not supported\n+ */\n+@FunctionalInterface\n+public interface SizeEstimateCallback<T, F> extends Serializable {\n+\n+    /**\n+     * Returns the estimated size of the data set based on a query. This\n+     * callback is invoked for the initial size estimate, when reset or filter\n+     * has changed or when the previous size estimate is about to be reached.\n+     * <p>\n+     * The query provides the previous estimated size and optionally defines any\n+     * filtering to use through {@link Query#getFilter()}. The query also\n+     * contains information about paging and sorting although that information\n+     * is generally not applicable for determining the number of items.\n+     *\n+     * @param query\n+     *            the query that defines which items to count\n+     * @return the number of available items\n+     */\n+    // TODO refactor to return void and provide API to increase the size\n+    int sizeEstimate(SizeEstimateQuery<T, F> query);\n+}", "originalCommit": "2762f23ec0e92d278e4d266ee400e84935d45cfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI4MTg0Nw==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r439281847", "bodyText": "Done", "author": "pleku", "createdAt": "2020-06-12T08:29:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkyNTM1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk1ODgyOQ==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r437958829", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                .info(\"Requested: \" + requestedRange + \" old size: \"\n          \n          \n            \n                                        + assumedSize + \" new size: \" + size);\n          \n          \n            \n                                .info(\"Requested range: {} old size: {} new size: {}\", requestedRange,\n          \n          \n            \n                                        assumedSize, size);", "author": "caalador", "createdAt": "2020-06-10T08:40:32Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -376,14 +546,105 @@ public void setBackEndSorting(List<QuerySortOrder> sortOrder) {\n     }\n \n     /**\n-     * Getter method for finding the size of DataProvider. Can be overridden by\n-     * a subclass that uses a specific type of DataProvider and/or query.\n+     * Getter method for determining the initial size of the data. Can be\n+     * overridden by a subclass that uses a specific type of DataProvider and/or\n+     * query.\n      *\n      * @return the size of data provider with current filter\n      */\n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     protected int getDataProviderSize() {\n-        return getDataProvider().size(new Query(getFilter()));\n+        assert definedSize : \"This method should never be called when using undefined size\";\n+        if (sizeCallback != null) {\n+            return sizeCallback.count(new Query(getFilter()));\n+        } else {\n+            return getDataProvider().size(new Query(getFilter()));\n+        }\n+    }\n+\n+    private void updateUndefinedSize() {\n+        assert !definedSize : \"This method should never be called when using defined size\";\n+        // things have reset\n+        if (resendEntireRange || sizeReset) {\n+            // 1. given size estimate\n+            int size = initialSizeEstimate;\n+            // 2. given estimate callback\n+            if (sizeEstimateCallback != null) {\n+                size = getNewSizeEstimateFromCallback(true);\n+            }\n+            // 3. default initial size\n+            if (size == -1) {\n+                size = getDefaultInitialSize();\n+            }\n+            getLogger(DataCommunicator.class)\n+                    .info(\"Requested: \" + requestedRange + \" old size: \"\n+                            + assumedSize + \" new size: \" + size);", "originalCommit": "2762f23ec0e92d278e4d266ee400e84935d45cfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI1NzY1Nw==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r439257657", "bodyText": "Done", "author": "pleku", "createdAt": "2020-06-12T07:37:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk1ODgyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk1OTQxMg==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r437959412", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            getLogger(DataCommunicator.class).info(\"Requested: \"\n          \n          \n            \n                                    + requestedRange + \" old size: \" + previousAssumedSize\n          \n          \n            \n                                    + \" new size: \" + assumedSize);\n          \n          \n            \n                            getLogger(DataCommunicator.class).info(\"Requested range: {} old size: {} new size: {}\",\n          \n          \n            \n                                    requestedRange, previousAssumedSize, assumedSize);", "author": "caalador", "createdAt": "2020-06-10T08:41:24Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -376,14 +546,105 @@ public void setBackEndSorting(List<QuerySortOrder> sortOrder) {\n     }\n \n     /**\n-     * Getter method for finding the size of DataProvider. Can be overridden by\n-     * a subclass that uses a specific type of DataProvider and/or query.\n+     * Getter method for determining the initial size of the data. Can be\n+     * overridden by a subclass that uses a specific type of DataProvider and/or\n+     * query.\n      *\n      * @return the size of data provider with current filter\n      */\n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     protected int getDataProviderSize() {\n-        return getDataProvider().size(new Query(getFilter()));\n+        assert definedSize : \"This method should never be called when using undefined size\";\n+        if (sizeCallback != null) {\n+            return sizeCallback.count(new Query(getFilter()));\n+        } else {\n+            return getDataProvider().size(new Query(getFilter()));\n+        }\n+    }\n+\n+    private void updateUndefinedSize() {\n+        assert !definedSize : \"This method should never be called when using defined size\";\n+        // things have reset\n+        if (resendEntireRange || sizeReset) {\n+            // 1. given size estimate\n+            int size = initialSizeEstimate;\n+            // 2. given estimate callback\n+            if (sizeEstimateCallback != null) {\n+                size = getNewSizeEstimateFromCallback(true);\n+            }\n+            // 3. default initial size\n+            if (size == -1) {\n+                size = getDefaultInitialSize();\n+            }\n+            getLogger(DataCommunicator.class)\n+                    .info(\"Requested: \" + requestedRange + \" old size: \"\n+                            + assumedSize + \" new size: \" + size);\n+            assumedSize = size;\n+        } else {\n+            // increase size estimate if the last page is being fetched\n+            if (requestedRange.getEnd() + pageSize > assumedSize) {\n+                int previousAssumedSize = assumedSize;\n+                if (sizeEstimateCallback != null) {\n+                    assumedSize = getNewSizeEstimateFromCallback(false);\n+                } else {\n+                    // by default adjust size by multiple of page size\n+                    assumedSize += getEstimatedSizeIncrease();\n+                }\n+                getLogger(DataCommunicator.class).info(\"Requested: \"\n+                        + requestedRange + \" old size: \" + previousAssumedSize\n+                        + \" new size: \" + assumedSize);", "originalCommit": "2762f23ec0e92d278e4d266ee400e84935d45cfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI1NzY3OA==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r439257678", "bodyText": "Done", "author": "pleku", "createdAt": "2020-06-12T07:37:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk1OTQxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk3MzQ1NQ==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r437973455", "bodyText": "Do we need to care about a sizeReset if we are in defined size mode?", "author": "caalador", "createdAt": "2020-06-10T09:03:15Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -499,8 +762,13 @@ private void flush() {\n                 activeKeyOrder.size());\n \n         // Phase 1: Find all items that the client should have\n-        if (resendEntireRange) {\n+\n+        // With defined size the backend is only queried when necessary\n+        if (definedSize && (resendEntireRange || sizeReset)) {", "originalCommit": "2762f23ec0e92d278e4d266ee400e84935d45cfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI1OTA4NA==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r439259084", "bodyText": "Yes when switching from undefined size after the size callback is provided on the run ->\nresendEntireRange = false but the defined size needs to be fetched.\nI added a comment on setSizeCallback(CallbackDataProvider.CountCallback<T, ?> sizeCallback) to highlight it is needed", "author": "pleku", "createdAt": "2020-06-12T07:40:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk3MzQ1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk4MjgyOA==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r437982828", "bodyText": "Constructor parameters amount is too high, should we consider use of builder here?", "author": "mshabarov", "createdAt": "2020-06-10T09:19:33Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/SizeEstimateQuery.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+\n+/**\n+ * Immutable query object used to get the estimated size of the data set with\n+ * {@link LazyDataView}. In addition to normal query parameters, contains the\n+ * previous size estimate that was used.\n+ * \n+ * @param <T>\n+ *            the data type\n+ * @param <F>\n+ *            the filter type\n+ * @since\n+ */\n+public class SizeEstimateQuery<T, F> extends Query<T, F> {\n+\n+    private final int previousSizeEstimate;\n+    private final boolean reset;\n+\n+    /**\n+     * Constructs a size estimate query with given previous size, offset, limit,\n+     * sorting and filtering.\n+     *\n+     * @param offset\n+     *            first index to fetch\n+     * @param limit\n+     *            fetched item count\n+     * @param sortOrders\n+     *            sorting order for fetching; used for sorting backends\n+     * @param inMemorySorting\n+     *            comparator for sorting in-memory data\n+     * @param filter\n+     *            filtering for fetching; can be null\n+     * @param previousSizeEstimate\n+     *            the previous size estimate\n+     * @param reset\n+     *            whether the data set was reset\n+     */\n+    public SizeEstimateQuery(int offset, int limit,\n+            List<QuerySortOrder> sortOrders, Comparator<T> inMemorySorting,", "originalCommit": "2762f23ec0e92d278e4d266ee400e84935d45cfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI4MDM1MA==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r439280350", "bodyText": "No user should ever be constructing this unless they are building their own lazy loading component and decide to have the same API, so I don't think it matters now.", "author": "pleku", "createdAt": "2020-06-12T08:26:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk4MjgyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI4MjEyNQ==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r439282125", "bodyText": "Ok", "author": "mshabarov", "createdAt": "2020-06-12T08:29:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk4MjgyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk4NDE3OQ==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r437984179", "bodyText": "Would replicate this in isReset method javadoc (return true if no previous estimate)", "author": "mshabarov", "createdAt": "2020-06-10T09:21:42Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/SizeEstimateQuery.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+\n+/**\n+ * Immutable query object used to get the estimated size of the data set with\n+ * {@link LazyDataView}. In addition to normal query parameters, contains the\n+ * previous size estimate that was used.\n+ * \n+ * @param <T>\n+ *            the data type\n+ * @param <F>\n+ *            the filter type\n+ * @since\n+ */\n+public class SizeEstimateQuery<T, F> extends Query<T, F> {\n+\n+    private final int previousSizeEstimate;\n+    private final boolean reset;\n+\n+    /**\n+     * Constructs a size estimate query with given previous size, offset, limit,\n+     * sorting and filtering.\n+     *\n+     * @param offset\n+     *            first index to fetch\n+     * @param limit\n+     *            fetched item count\n+     * @param sortOrders\n+     *            sorting order for fetching; used for sorting backends\n+     * @param inMemorySorting\n+     *            comparator for sorting in-memory data\n+     * @param filter\n+     *            filtering for fetching; can be null\n+     * @param previousSizeEstimate\n+     *            the previous size estimate\n+     * @param reset\n+     *            whether the data set was reset\n+     */\n+    public SizeEstimateQuery(int offset, int limit,\n+            List<QuerySortOrder> sortOrders, Comparator<T> inMemorySorting,\n+            F filter, int previousSizeEstimate, boolean reset) {\n+        super(offset, limit, sortOrders, inMemorySorting, filter);\n+        this.previousSizeEstimate = previousSizeEstimate;\n+        this.reset = reset;\n+    }\n+\n+    /**\n+     * Returns whether the data set was reset or not. The reset happens when the\n+     * data was updated due to addition, deleting or filter change.\n+     * \n+     * @return {@code true} for reset, {@code false} for not\n+     */\n+    public boolean isReset() {\n+        return reset;\n+    }\n+\n+    /**\n+     * Returns the previous size estimate used. If no previous size estimate was\n+     * used, returns 0 and at the same time {@link #isReset()} will return\n+     * {@code true}.", "originalCommit": "2762f23ec0e92d278e4d266ee400e84935d45cfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI4MTAyMw==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r439281023", "bodyText": "Done", "author": "pleku", "createdAt": "2020-06-12T08:27:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk4NDE3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk5MDQxMA==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r437990410", "bodyText": "for setting in memory data -> for data lazy fetching from backend", "author": "mshabarov", "createdAt": "2020-06-10T09:31:46Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasLazyDataView.java", "diffHunk": "@@ -18,61 +18,84 @@\n import java.io.Serializable;\n \n /**\n- * Interface that defines methods for setting in memory data.\n- * This will return a {@link LazyDataView}.\n+ * Interface that defines methods for setting in memory data. This will return a", "originalCommit": "2762f23ec0e92d278e4d266ee400e84935d45cfa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA4NTY4OQ==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r438085689", "bodyText": "Do we need skipSizeCheckUntilReset = false; to be set here? it is set within reset method, just a couple lines of code ahead", "author": "mshabarov", "createdAt": "2020-06-10T12:33:59Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -241,6 +256,9 @@ public void confirmUpdate(int updateId) {\n             DataProvider<T, F> dataProvider, F initialFilter) {\n         Objects.requireNonNull(dataProvider, \"data provider cannot be null\");\n         filter = initialFilter;\n+        doSetDefinedSize(null, null, -1, true);\n+        skipSizeCheckUntilReset = false;", "originalCommit": "2762f23ec0e92d278e4d266ee400e84935d45cfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIyMDAyMg==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r439220022", "bodyText": "Good catch. Removed", "author": "pleku", "createdAt": "2020-06-12T05:52:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA4NTY4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA4ODgwOQ==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r438088809", "bodyText": "calls to doSetDefinedSize are really hard to read. Suggestion is to create a shortcut methods for every specific use case. However, this is okay at this point and could be polished later on.", "author": "mshabarov", "createdAt": "2020-06-10T12:39:36Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -241,6 +256,9 @@ public void confirmUpdate(int updateId) {\n             DataProvider<T, F> dataProvider, F initialFilter) {\n         Objects.requireNonNull(dataProvider, \"data provider cannot be null\");\n         filter = initialFilter;\n+        doSetDefinedSize(null, null, -1, true);", "originalCommit": "2762f23ec0e92d278e4d266ee400e84935d45cfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIyMTU3OQ==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r439221579", "bodyText": "You're right but I don't like so many new methods so how about this ?", "author": "pleku", "createdAt": "2020-06-12T05:57:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA4ODgwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI2OTM2OQ==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r439269369", "bodyText": "Well, you usually want to set defined or undefined mode, so consider this split:\ndoSetDefinedSize(CallbackDataProvider.CountCallback<T, ?> sizeCallback) {\n            definedSize = true;\n            sizeEstimateCallback = null;\n            initialSizeEstimate = -1;\n            this.sizeCallback = sizeCallback;\n}\n\ndoSetUndefinedSize(SizeEstimateCallback<T, ?> sizeEstimateCallback, int initialSizeEstimate) {\n           sizeCallback = null;\n           definedSize = false;\n           this.sizeEstimateCallback = sizeEstimateCallback;\n           this.initialSizeEstimate = initialSizeEstimate;\n}\n\nAnd if you need to just set up the boolean definedSize you can do it with setter or directly.", "author": "mshabarov", "createdAt": "2020-06-12T08:02:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA4ODgwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI4MjgyNA==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r439282824", "bodyText": "I did something else to make it explicit", "author": "pleku", "createdAt": "2020-06-12T08:30:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA4ODgwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI4OTI4Mw==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r439289283", "bodyText": "Alright!", "author": "mshabarov", "createdAt": "2020-06-12T08:43:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA4ODgwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE1MTgxMQ==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r438151811", "bodyText": "skipSizeCheckUntilReset is set to true when the fetched items are less than requested range, i.e. range end has been reached.  Then, if no callbacks/dataproviders/estimated size are set by the client it will be still true until reset(), i.e. until refreshAll(), and the size won't be updated. So, does that mean the user would be scrolling up and down with no items list update, until someone calls refreshAll?", "author": "mshabarov", "createdAt": "2020-06-10T14:09:50Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -175,6 +185,7 @@ public void setRequestedRange(int start, int length) {\n      * It effectively resends all available data.\n      */\n     public void reset() {\n+        skipSizeCheckUntilReset = false;", "originalCommit": "2762f23ec0e92d278e4d266ee400e84935d45cfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIxOTQ2OA==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r439219468", "bodyText": "Yes that it the intention.\nOnce the size is known, it should not be asked again until certain conditions change. This is the same regardless of defined/undefined size. Was this variable name confusing, should I try to figure out more descripte name for it as it is only for undefined size ?", "author": "pleku", "createdAt": "2020-06-12T05:49:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE1MTgxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3OTk3MA==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r439279970", "bodyText": "No, variable name is fine. I'm just thinking about what would be the conditions for reset? Could it be a refresh button or periodical requests from client to server to refresh the grid. When I did my investigation on undefined case, I made it so that if user scrolls down until the end of data size, he could then scroll up for a few pages and come back, and there would be another query for size estimation. But, that means that the user should scroll up a bit long and then scroll down to the end again just to refresh the items list. That's a weird UX maybe and over-complication.", "author": "mshabarov", "createdAt": "2020-06-12T08:25:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE1MTgxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI4MjQ4Ng==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r439282486", "bodyText": "I have not heard yet of any reason to ever do something like that.", "author": "pleku", "createdAt": "2020-06-12T08:30:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE1MTgxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE1MzExOQ==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r438153119", "bodyText": "I expect sizeReset = true here. If anything is cleared anyway, probably we can just delete it?", "author": "mshabarov", "createdAt": "2020-06-10T14:11:29Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -241,6 +256,9 @@ public void confirmUpdate(int updateId) {\n             DataProvider<T, F> dataProvider, F initialFilter) {\n         Objects.requireNonNull(dataProvider, \"data provider cannot be null\");\n         filter = initialFilter;\n+        doSetDefinedSize(null, null, -1, true);\n+        skipSizeCheckUntilReset = false;\n+        sizeReset = false; // everything is cleared anyway", "originalCommit": "2762f23ec0e92d278e4d266ee400e84935d45cfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIyMTc3OA==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r439221778", "bodyText": "It should not matter at this point what is set at this point, but setting it to false will be less bug-prone in my opinion.", "author": "pleku", "createdAt": "2020-06-12T05:58:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE1MzExOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI5MTEyOQ==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r439291129", "bodyText": "Ok", "author": "mshabarov", "createdAt": "2020-06-12T08:47:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE1MzExOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE2MjIwNw==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r438162207", "bodyText": "This method has almost the same name as setUndefinedSize(int), but different semantics. Calling setDefinedSize(), I would expect it sets up the int parameter to internal state, but it is not the case, it sets up the mode (defined/undefined). So, I propose to think about renaming this method in the future. For example, something like setDefinedMode, setDefined, setDefinedSizeMode.", "author": "mshabarov", "createdAt": "2020-06-10T14:23:18Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/LazyDataView.java", "diffHunk": "@@ -15,64 +15,116 @@\n  */\n package com.vaadin.flow.data.provider;\n \n-import java.util.Optional;\n-\n /**\n  * DataView for lazy loaded data.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @since\n  */\n public interface LazyDataView<T> extends DataView<T> {\n \n     /**\n-     * Get the item after the given item if available on the server. Server\n-     * only knows the latest set requested by the client and will be filtered\n-     * and sorted accordingly.\n+     * Sets the component to use defined size with the given callback that\n+     * provides the exact size for the dataset.\n+     * <p>\n+     * When the component has a distinct data provider set with\n+     * {@link com.vaadin.flow.data.binder.HasDataProvider#setDataProvider(DataProvider)},\n+     * the given callback will be queried for getting the dataset size instead\n+     * of the data provider {@link DataProvider#size(Query)} method.\n+     * <p>\n+     * Calling this method will clear any previously set initial size estimate\n+     * {@link #setUndefinedSize(int)} and size estimate callback\n+     * {@link #setUndefinedSize(SizeEstimateCallback)}.\n      *\n-     * @param item\n-     *         item to get next from\n-     * @return optional containing next item if available\n+     * @param callback\n+     *            the callback to use for determining dataset size, not\n+     *            {@code null}\n+     * @see #setDefinedSize(boolean)\n      */\n-    Optional<T> getNextItem(T item);\n+    void setDefinedSize(CallbackDataProvider.CountCallback<T, Void> callback);\n \n     /**\n-     * Get the item before the given item if available on the server. Server\n-     * only knows the latest set requested by the client and will be filtered\n-     * and sorted accordingly.\n+     * Sets the component to use undefined size with the given initial size\n+     * estimate of the dataset. The estimated size is used after reset occurs or\n+     * filter changes.\n+     * <p>\n+     * Calling this method will clear any previously set size estimate callback\n+     * {@link #setUndefinedSize(SizeEstimateCallback)} or defined size callback\n+     * {@link #setDefinedSize(CallbackDataProvider.CountCallback)}.\n      *\n-     * @param item\n-     *         item to get previous from\n-     * @return optional containing previous item if available\n+     * @param initialSizeEstimate\n+     *            initial size estimate for the dataset\n      */\n-    Optional<T> getPreviousItem(T item);\n-\n-    // API related supporting undefined size - it makes no sense to have these for in-memory\n+    void setUndefinedSize(int initialSizeEstimate);\n \n     /**\n-     * Add count callback for lazy data with undefined size.\n+     * Sets the component to use undefined size with the given callback for\n+     * estimating the size of the dataset. Calling this method will clear any\n+     * previously set size callback\n+     * {@link #setDefinedSize(CallbackDataProvider.CountCallback)} or initial\n+     * size estimate {@link #setUndefinedSize(int)}.\n+     * <p>\n+     * This callback is triggered:\n+     * <ol>\n+     * <li>initially after setting</li>\n+     * <li>after reset like when the filter has changed</li>\n+     * <li>when the last page of the previous size is being fetched</li>\n+     * </ol>\n+     * <p>\n+     * Once the size is known, because the backend has \"run out of items\", the\n+     * callback is not triggered until a reset occurs or filter changes.\n+     * <p>\n+     * <em>NOTE: The given callback can only return a size estimate that is less\n+     * than the {@link SizeEstimateQuery#getRequestedRangeEnd()} when there has\n+     * been a reset (see {@link SizeEstimateQuery#isReset()},as that would be\n+     * the same as using defined size.</em> An {@link IllegalStateException} is\n+     * thrown instead. For using defined size, use\n+     * {@link #setDefinedSize(CallbackDataProvider.CountCallback)} instead.\n      *\n      * @param callback\n-     *         count callback to use\n+     *            a callback that provides the estimated size of the data\n      */\n-    void withCountCallback(\n-            CallbackDataProvider.CountCallback<T, Void> callback);\n+    void setUndefinedSize(SizeEstimateCallback<T, Void> callback);\n \n     /**\n-     * Set an initial estimate for the item count.\n+     * Switches the component between defined and undefined size.\n+     * <p>\n+     * With defined size, either a size callback needs to have been provided\n+     * with the {@link #setDefinedSize(CallbackDataProvider.CountCallback)} or\n+     * the data provider in the component needs to have implemented the\n+     * {@link DataProvider#size(Query)} method.\n+     * <p>\n+     * The default undefined size depends on the component implementation. For\n+     * controlling the undefined size, use {@link #setUndefinedSize(int)} or\n+     * {@link #setUndefinedSize(SizeEstimateCallback)}. Calling this method will\n+     * clear any previously set initial size estimate or size\n      *\n-     * @param initialCountEstimate\n-     *         initial count estimate\n+     * @param definedSize\n+     *            {@code true} for defined size, {@code false} for undefined\n+     *            size\n      */\n-    void withInitialCountEstimate(int initialCountEstimate);\n+    void setDefinedSize(boolean definedSize);", "originalCommit": "2762f23ec0e92d278e4d266ee400e84935d45cfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI2NDY5OQ==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r439264699", "bodyText": "I don't really agree with how this matches to setUndefinedSize(int initialSizeEstimate), one takes boolean and another an int and those should mean quite different things.\nAlso I don't see directly how setDefinedSizeMode should work, as the user cannot trigger any third mode and need to quite often provide a parameter (like either callback) when switching between the modes. Though I suspect that switching between the \"modes\" is quite rare, but can happen when e.g. filtering is applied.\nBut for the naming I do agree that this is not much better than the original withXyz methods.\nAnother alternative could be to include more semantics to the method names:\nvoid setUndefinedSizeWithInitialSizeEstimate(int)\nvoid setUndefinedSizeWithSizeEstimateCallback(SizeEstimateCallback)\nvoid setDefinedSize(boolean)\nvoid setDefinedSizeWithSizeCallback(CountCallback)\nbut there the added parts are just duplicates from the parameter names.\nIf the developer looks into these methods, they are already taken a step further from the happy path. I'm afraid they will need to browse the methods and read javadocs.\nAs I've said, I'm not happy with the current API but I believe it is better than the original one as there it was quite unclear from the naming that those are alternatives.\nSuggestions welcome @mshabarov @caalador", "author": "pleku", "createdAt": "2020-06-12T07:53:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE2MjIwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3OTI3Mg==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r439279272", "bodyText": "Does the setDefinedSize actually need the boolean if you do setDefinedSize(false) you would still need to actually set one of the other methods, so then it could just be setDefinedSize()  which would set the mode and clear estimates/callbacks.", "author": "caalador", "createdAt": "2020-06-12T08:23:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE2MjIwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI4NDM1NA==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r439284354", "bodyText": "you would still need to actually set one of the other methods\n\nNo, you don't need anything else after setDefinedSize(false) because that is the happy path - same as just setting\ngrid.setDataSource(query -> myBackend.fetch(query.getOffset(), query.getLimit());\nThis also has the shorthand of withUndefinedSize() since then people who used data provider can do\ngrid.setDataSource(myOldDataProvider).withUndefinedSize();", "author": "pleku", "createdAt": "2020-06-12T08:34:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE2MjIwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI5MDQ3MQ==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r439290471", "bodyText": "To still play around with the with would be to switch from the setters to\nvoid withUndefinedSize()\nvoid withUndefinedSize(int initialSizeEstimate)\nvoid withUndefinedSize(SizeEstimateCallback sizeEstimateCallback)\nvoid withDefinedSize()\nvoid withDefinedSize(CountCallback countCallback)\nIt would be maybe better than the original withThisOrThat as the implications are more clearer and how they differ from each other ?", "author": "pleku", "createdAt": "2020-06-12T08:46:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE2MjIwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI5NDUyMg==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r439294522", "bodyText": "Would these with methods ^ or some alternative prefix than with be better than the setDefinedSize&setUndefinedSize variants ? @caalador @mshabarov", "author": "pleku", "createdAt": "2020-06-12T08:54:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE2MjIwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI5ODM0Nw==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r439298347", "bodyText": "Those 5 methods now looks great and transparent. I vote for this version! But set- would be better than with- , my gut tells me that we will get remarks about with- on DX test ;)", "author": "mshabarov", "createdAt": "2020-06-12T09:01:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE2MjIwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI5OTQwMg==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r439299402", "bodyText": "Or...I don't know. Let's keep it as with- and see what the testers say.", "author": "mshabarov", "createdAt": "2020-06-12T09:03:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE2MjIwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI4NjUxNA==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r439286514", "bodyText": "teh -> the", "author": "mshabarov", "createdAt": "2020-06-12T08:38:22Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -301,16 +319,171 @@ public Range getRequestedRange() {\n      * Generate a data query with component sorting and filtering.\n      *\n      * @param offset\n-     *         first index to fetch\n+     *            first index to fetch\n      * @param limit\n-     *         fetched item count\n+     *            fetched item count\n      * @return {@link Query} for component state\n      */\n     public Query buildQuery(int offset, int limit) {\n         return new Query(offset, limit, getBackEndSorting(),\n                 getInMemorySorting(), getFilter());\n     }\n \n+    /**\n+     * Sets the page size that is used to fetch items. The queries to data\n+     * provider are a multiple of the page size.\n+     * \n+     * @param pageSize\n+     *            the page size to set\n+     */\n+    // TODO https://github.com/vaadin/flow/issues/8557\n+    public void setPageSize(int pageSize) {\n+        if (pageSize < 1) {\n+            throw new IllegalArgumentException(String.format(\n+                    \"Page size cannot be less than 1, got %s\", pageSize));\n+        }\n+        this.pageSize = pageSize;\n+    }\n+\n+    /**\n+     * Sets the number of pages that the component estimated size is increased\n+     * when the end has been reached with but when no\n+     * {@link #setSizeEstimateCallback(SizeEstimateCallback)} is provided. This\n+     * method is meant for component specific customizations, but not for\n+     * exposing in the component.\n+     *\n+     * @param sizeIncreasePageCount\n+     *            the count of pages to increase the size\n+     */\n+    public void setSizeIncreasePageCount(int sizeIncreasePageCount) {\n+        this.sizeIncreasePageCount = sizeIncreasePageCount;\n+    }\n+\n+    /**\n+     * Returns the number of pages that the size is increased when the estimated\n+     * end has been reached in undefined size mode.\n+     */\n+    public int getSizeIncreasePageCount() {\n+        return sizeIncreasePageCount;\n+    }\n+\n+    /**\n+     * Sets the size callback to be used and switches the component to defined\n+     * size. Any previously set callbacks or initial size are cleared. The new\n+     * size will be used after this roundtrip.\n+     * \n+     * @param sizeCallback\n+     *            the size callback to use\n+     */\n+    public void setSizeCallback(\n+            CallbackDataProvider.CountCallback<T, ?> sizeCallback) {\n+        if (sizeCallback == null) {\n+            throw new IllegalArgumentException(\n+                    \"Provided size callback cannot be null - for switching between defined and undefined size use setDefinedSize(boolean) method instead.\");\n+        }\n+        clearSizeCallbacksAndState();\n+        this.sizeCallback = sizeCallback;\n+        definedSize = true;\n+        skipSizeCheckUntilReset = false;\n+        // there is no reset but we need to get the defined size\n+        sizeReset = true;\n+        requestFlush();\n+    }\n+\n+    /**\n+     * Sets the size estimate callback to be used and switches teh component to", "originalCommit": "119cd6d51dfac6d9c92af3853e995728283385b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMwMTk3OQ==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r439301979", "bodyText": "Done", "author": "pleku", "createdAt": "2020-06-12T09:09:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI4NjUxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI4NjkwNQ==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r439286905", "bodyText": "line break", "author": "mshabarov", "createdAt": "2020-06-12T08:39:04Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -301,16 +319,171 @@ public Range getRequestedRange() {\n      * Generate a data query with component sorting and filtering.\n      *\n      * @param offset\n-     *         first index to fetch\n+     *            first index to fetch\n      * @param limit\n-     *         fetched item count\n+     *            fetched item count\n      * @return {@link Query} for component state\n      */\n     public Query buildQuery(int offset, int limit) {\n         return new Query(offset, limit, getBackEndSorting(),\n                 getInMemorySorting(), getFilter());\n     }\n \n+    /**\n+     * Sets the page size that is used to fetch items. The queries to data\n+     * provider are a multiple of the page size.\n+     * \n+     * @param pageSize\n+     *            the page size to set\n+     */\n+    // TODO https://github.com/vaadin/flow/issues/8557\n+    public void setPageSize(int pageSize) {\n+        if (pageSize < 1) {\n+            throw new IllegalArgumentException(String.format(\n+                    \"Page size cannot be less than 1, got %s\", pageSize));\n+        }\n+        this.pageSize = pageSize;\n+    }\n+\n+    /**\n+     * Sets the number of pages that the component estimated size is increased\n+     * when the end has been reached with but when no\n+     * {@link #setSizeEstimateCallback(SizeEstimateCallback)} is provided. This\n+     * method is meant for component specific customizations, but not for\n+     * exposing in the component.\n+     *\n+     * @param sizeIncreasePageCount\n+     *            the count of pages to increase the size\n+     */\n+    public void setSizeIncreasePageCount(int sizeIncreasePageCount) {\n+        this.sizeIncreasePageCount = sizeIncreasePageCount;\n+    }\n+\n+    /**\n+     * Returns the number of pages that the size is increased when the estimated\n+     * end has been reached in undefined size mode.\n+     */\n+    public int getSizeIncreasePageCount() {\n+        return sizeIncreasePageCount;\n+    }\n+\n+    /**\n+     * Sets the size callback to be used and switches the component to defined\n+     * size. Any previously set callbacks or initial size are cleared. The new\n+     * size will be used after this roundtrip.\n+     * \n+     * @param sizeCallback\n+     *            the size callback to use\n+     */\n+    public void setSizeCallback(\n+            CallbackDataProvider.CountCallback<T, ?> sizeCallback) {\n+        if (sizeCallback == null) {\n+            throw new IllegalArgumentException(\n+                    \"Provided size callback cannot be null - for switching between defined and undefined size use setDefinedSize(boolean) method instead.\");", "originalCommit": "119cd6d51dfac6d9c92af3853e995728283385b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0NjAwMQ==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r439346001", "bodyText": "Done", "author": "pleku", "createdAt": "2020-06-12T10:46:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI4NjkwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMwODk2Ng==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r439308966", "bodyText": "Complete the task associated to this TODO comment.", "author": "vaadin-bot", "createdAt": "2020-06-12T09:23:43Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -301,16 +319,171 @@ public Range getRequestedRange() {\n      * Generate a data query with component sorting and filtering.\n      *\n      * @param offset\n-     *         first index to fetch\n+     *            first index to fetch\n      * @param limit\n-     *         fetched item count\n+     *            fetched item count\n      * @return {@link Query} for component state\n      */\n     public Query buildQuery(int offset, int limit) {\n         return new Query(offset, limit, getBackEndSorting(),\n                 getInMemorySorting(), getFilter());\n     }\n \n+    /**\n+     * Sets the page size that is used to fetch items. The queries to data\n+     * provider are a multiple of the page size.\n+     * \n+     * @param pageSize\n+     *            the page size to set\n+     */\n+    // TODO https://github.com/vaadin/flow/issues/8557", "originalCommit": "119cd6d51dfac6d9c92af3853e995728283385b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMwODk4MA==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r439308980", "bodyText": "Complete the task associated to this TODO comment.", "author": "vaadin-bot", "createdAt": "2020-06-12T09:23:44Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/SizeEstimateCallback.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Callback interface for estimating the number of items in a backend based on a\n+ * query.\n+ *\n+ * @param <T>\n+ *            the type of the items\n+ * @param <F>\n+ *            the type of the optional filter in the query, <code>Void</code> if\n+ *            filtering is not supported\n+ */\n+@FunctionalInterface\n+public interface SizeEstimateCallback<T, F> extends Serializable {\n+\n+    /**\n+     * Returns the estimated size of the data set based on a query. This\n+     * callback is invoked for the initial size estimate, when reset or filter\n+     * has changed or when the previous size estimate is about to be reached.\n+     * <p>\n+     * The query provides the previous estimated size and optionally defines any\n+     * filtering to use through {@link Query#getFilter()}. The query also\n+     * contains information about paging and sorting although that information\n+     * is generally not applicable for determining the number of items.\n+     *\n+     * @param query\n+     *            the query that defines which items to count\n+     * @return the number of available items\n+     */\n+    // TODO refactor to return void and provide API to increase the size ?", "originalCommit": "119cd6d51dfac6d9c92af3853e995728283385b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "936330cceba44d69d7101031d1317f76c4880869", "url": "https://github.com/vaadin/flow/commit/936330cceba44d69d7101031d1317f76c4880869", "message": "Support undefined size for DataCommunicator\n\nPart of vaadin/vaadin-grid-flow#966", "committedDate": "2020-06-12T11:57:29Z", "type": "commit"}, {"oid": "75b36697e10a4f7aa90fe0d60569fd58449cc18f", "url": "https://github.com/vaadin/flow/commit/75b36697e10a4f7aa90fe0d60569fd58449cc18f", "message": "Address review comments, add ticket #", "committedDate": "2020-06-12T11:57:29Z", "type": "commit"}, {"oid": "7162fd2f8320045b453e8821b6918298f49ef693", "url": "https://github.com/vaadin/flow/commit/7162fd2f8320045b453e8821b6918298f49ef693", "message": "Renamed methods back from setXyz to withXyz\n\nAlso addressed some review comments.", "committedDate": "2020-06-12T11:57:29Z", "type": "commit"}, {"oid": "86ff0a8cf521c72bb6d7f766315467070f301082", "url": "https://github.com/vaadin/flow/commit/86ff0a8cf521c72bb6d7f766315467070f301082", "message": "Rename setDataProvider to setDataSource\n\nPart of #8189", "committedDate": "2020-06-12T12:02:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM4NzA0Mw==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r439387043", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    public FrontendDependenciesScanner  createScanner(\n          \n          \n            \n                    public FrontendDependenciesScanner createScanner(", "author": "mshabarov", "createdAt": "2020-06-12T12:25:19Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesScanner.java", "diffHunk": "@@ -54,7 +54,7 @@\n          *            dependencies if {@code true}, doesn't check otherwise\n          * @return a scanner implementation strategy\n          */\n-        public FrontendDependenciesScanner createScanner(\n+        public FrontendDependenciesScanner  createScanner(", "originalCommit": "86ff0a8cf521c72bb6d7f766315467070f301082", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM4OTE0OA==", "url": "https://github.com/vaadin/flow/pull/8534#discussion_r439389148", "bodyText": "Sorry, accidentally derb", "author": "pleku", "createdAt": "2020-06-12T12:30:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM4NzA0Mw=="}], "type": "inlineReview"}, {"oid": "7aaa6d110eb11914f0aa13c2de5bea1364a22355", "url": "https://github.com/vaadin/flow/commit/7aaa6d110eb11914f0aa13c2de5bea1364a22355", "message": "Rename setDataProvider to setDataSource\n\nPart of #8189", "committedDate": "2020-06-12T12:28:05Z", "type": "commit"}, {"oid": "7aaa6d110eb11914f0aa13c2de5bea1364a22355", "url": "https://github.com/vaadin/flow/commit/7aaa6d110eb11914f0aa13c2de5bea1364a22355", "message": "Rename setDataProvider to setDataSource\n\nPart of #8189", "committedDate": "2020-06-12T12:28:05Z", "type": "forcePushed"}]}