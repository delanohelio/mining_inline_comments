{"pr_number": 9295, "pr_title": "feat: Create Flow plugins for webpack", "pr_createdAt": "2020-11-03T09:41:17Z", "pr_url": "https://github.com/vaadin/flow/pull/9295", "timeline": [{"oid": "2c3f57ca8762b3fcef1a06874c1c7de266f50634", "url": "https://github.com/vaadin/flow/commit/2c3f57ca8762b3fcef1a06874c1c7de266f50634", "message": "feat: Create Flow plugins for webpack\n\nMoved stats file handling to a custom plugin.\nAdded feature for copying custom Flow plugins\nfor use with webpack.\n\nFixes #9283", "committedDate": "2020-11-03T09:40:43Z", "type": "commit"}, {"oid": "8df2ac41978cd59f96662f0479a3f299face0e92", "url": "https://github.com/vaadin/flow/commit/8df2ac41978cd59f96662f0479a3f299face0e92", "message": "Remove unused variable that else breaks pnpm tests if used", "committedDate": "2020-11-03T10:24:07Z", "type": "commit"}, {"oid": "6363817fe7d3c283c7529674ba6acf41907e733d", "url": "https://github.com/vaadin/flow/commit/6363817fe7d3c283c7529674ba6acf41907e733d", "message": "Use correct return call.", "committedDate": "2020-11-03T12:28:38Z", "type": "commit"}, {"oid": "91c9c8f7e4273007bf066edd62c1975e34a8d9df", "url": "https://github.com/vaadin/flow/commit/91c9c8f7e4273007bf066edd62c1975e34a8d9df", "message": "Remove faulty path separator", "committedDate": "2020-11-04T05:09:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE4MDE5OA==", "url": "https://github.com/vaadin/flow/pull/9295#discussion_r517180198", "bodyText": "This block of commented-out lines of code should be removed.", "author": "vaadin-bot", "createdAt": "2020-11-04T08:46:53Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskInstallWebpackPlugins.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.frontend;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import elemental.json.Json;\n+import elemental.json.JsonArray;\n+import elemental.json.JsonObject;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Task that installs any Flow webpack plugins into node_modules/@vaadin for\n+ * use with webpack compilation.\n+ * <p>\n+ * This should preferably be executed after npm installation to not make it skip\n+ * or have the plugins deleted by {@link TaskRunNpmInstall}.\n+ *\n+ * @since\n+ */\n+public class TaskInstallWebpackPlugins implements FallibleCommand {\n+\n+    private File nodeModulesFolder;\n+\n+    /**\n+     * Copy Flow webpack plugins into the given nodeModulesFolder.\n+     *\n+     * @param nodeModulesFolder\n+     *     node_modules folder to copy files to\n+     */\n+    public TaskInstallWebpackPlugins(File nodeModulesFolder) {\n+        this.nodeModulesFolder = nodeModulesFolder;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        getPlugins().forEach(plugin -> {\n+            try {\n+                generatePluginFiles(plugin);\n+            } catch (IOException ioe) {\n+                throw new UncheckedIOException(\n+                    \"Installation of Flow webpack plugin '\" + plugin\n+                        + \"' failed\", ioe);\n+            }\n+        });\n+    }\n+\n+    protected List<String> getPlugins() {\n+        try {\n+            final JsonObject jsonFile = getJsonFile(\n+                \"plugins/webpack-plugins.json\");\n+            if (jsonFile == null) {\n+                log().error(\"Couldn't locate webpack-plugins.json\");\n+                return Collections.emptyList();\n+            }\n+\n+            final JsonArray plugins = jsonFile.getArray(\"plugins\");\n+            List<String> pluginsToInstall = new ArrayList<>(plugins.length());\n+            for (int i = 0; i < plugins.length(); i++) {\n+                pluginsToInstall.add(plugins.getString(i));\n+            }\n+            return pluginsToInstall;\n+        } catch (IOException ioe) {\n+            throw new UncheckedIOException(\n+                \"Couldn't load webpack-plugins.json file\", ioe);\n+        }\n+    }\n+\n+    private void generatePluginFiles(String pluginName) throws IOException {\n+        // Get the target folder where the plugin should be installed to\n+        File pluginTargetFolder = new File(nodeModulesFolder,\n+            \"@vaadin/\" + pluginName);\n+\n+        final String pluginFolder = \"plugins/\" + pluginName;\n+        final JsonObject json = getJsonFile(pluginFolder + \"/package.json\");\n+        if (json == null) {\n+            log().error(\"Couldn't locate files for plugin '{}'\", pluginName);\n+            return;\n+        }\n+\n+        // Validate installed version and don't override if same\n+        if (pluginTargetFolder.exists() && new File(pluginTargetFolder,\n+            \"package.json\").exists()) {\n+            String packageFile = FileUtils\n+                .readFileToString(new File(pluginTargetFolder, \"package.json\"),\n+                    StandardCharsets.UTF_8);\n+            final FrontendVersion packageVersion = new FrontendVersion(\n+                Json.parse(packageFile).getString(\"version\"));\n+            FrontendVersion pluginVersion = new FrontendVersion(\n+                json.getString(\"version\"));\n+            if (packageVersion.isEqualTo(pluginVersion)) {\n+                log().debug(\n+                    \"Skipping install of {} for version {} already installed\",\n+                    pluginName, pluginVersion.getFullVersion());\n+                return;\n+            }\n+        }\n+\n+        // Create target folder if necessary\n+        FileUtils.forceMkdir(pluginTargetFolder);\n+\n+        // copy only files named in package.json { files }", "originalCommit": "bde433b39f8ce52dc9147c5dfa2651872517b8e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0edbdc41ed86ed4c232b1250b2f6fa78d6a42019", "url": "https://github.com/vaadin/flow/commit/0edbdc41ed86ed4c232b1250b2f6fa78d6a42019", "message": "Make getJsonFile less error prone to typos", "committedDate": "2020-11-04T09:03:54Z", "type": "commit"}, {"oid": "0edbdc41ed86ed4c232b1250b2f6fa78d6a42019", "url": "https://github.com/vaadin/flow/commit/0edbdc41ed86ed4c232b1250b2f6fa78d6a42019", "message": "Make getJsonFile less error prone to typos", "committedDate": "2020-11-04T09:03:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI3OTA1Mg==", "url": "https://github.com/vaadin/flow/pull/9295#discussion_r517279052", "bodyText": "protected? missing javadocs then", "author": "pleku", "createdAt": "2020-11-04T11:31:04Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskInstallWebpackPlugins.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.frontend;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import elemental.json.Json;\n+import elemental.json.JsonArray;\n+import elemental.json.JsonObject;\n+import static com.vaadin.flow.server.Constants.PACKAGE_JSON;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Task that installs any Flow webpack plugins into node_modules/@vaadin for\n+ * use with webpack compilation.\n+ * <p>\n+ * This should preferably be executed after npm installation to not make it skip\n+ * or have the plugins deleted by {@link TaskRunNpmInstall}.\n+ *\n+ * @since\n+ */\n+public class TaskInstallWebpackPlugins implements FallibleCommand {\n+\n+    private File nodeModulesFolder;\n+\n+    /**\n+     * Copy Flow webpack plugins into the given nodeModulesFolder.\n+     *\n+     * @param nodeModulesFolder\n+     *     node_modules folder to copy files to\n+     */\n+    public TaskInstallWebpackPlugins(File nodeModulesFolder) {\n+        this.nodeModulesFolder = nodeModulesFolder;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        getPlugins().forEach(plugin -> {\n+            try {\n+                generatePluginFiles(plugin);\n+            } catch (IOException ioe) {\n+                throw new UncheckedIOException(\n+                    \"Installation of Flow webpack plugin '\" + plugin\n+                        + \"' failed\", ioe);\n+            }\n+        });\n+    }\n+\n+    protected List<String> getPlugins() {", "originalCommit": "0edbdc41ed86ed4c232b1250b2f6fa78d6a42019", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMyMjQ1Ng==", "url": "https://github.com/vaadin/flow/pull/9295#discussion_r517322456", "bodyText": "Added", "author": "caalador", "createdAt": "2020-11-04T12:54:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI3OTA1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMzMjYwMg==", "url": "https://github.com/vaadin/flow/pull/9295#discussion_r517332602", "bodyText": "But it is needed as protected ?", "author": "pleku", "createdAt": "2020-11-04T13:13:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI3OTA1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzc5MDA1MA==", "url": "https://github.com/vaadin/flow/pull/9295#discussion_r517790050", "bodyText": "Only for tests, so package protected would also be fine.\nConstructor could also be made package protected as no one should ever have the need to create this task on the outside.", "author": "caalador", "createdAt": "2020-11-05T04:46:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI3OTA1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4MzQwMw==", "url": "https://github.com/vaadin/flow/pull/9295#discussion_r517283403", "bodyText": "I don't know when this could happen, but could maybe expose the impact \"... Webpack plugins for Flow will not be installed to node_modules/@vaddin\"", "author": "pleku", "createdAt": "2020-11-04T11:39:41Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskInstallWebpackPlugins.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.frontend;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import elemental.json.Json;\n+import elemental.json.JsonArray;\n+import elemental.json.JsonObject;\n+import static com.vaadin.flow.server.Constants.PACKAGE_JSON;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Task that installs any Flow webpack plugins into node_modules/@vaadin for\n+ * use with webpack compilation.\n+ * <p>\n+ * This should preferably be executed after npm installation to not make it skip\n+ * or have the plugins deleted by {@link TaskRunNpmInstall}.\n+ *\n+ * @since\n+ */\n+public class TaskInstallWebpackPlugins implements FallibleCommand {\n+\n+    private File nodeModulesFolder;\n+\n+    /**\n+     * Copy Flow webpack plugins into the given nodeModulesFolder.\n+     *\n+     * @param nodeModulesFolder\n+     *     node_modules folder to copy files to\n+     */\n+    public TaskInstallWebpackPlugins(File nodeModulesFolder) {\n+        this.nodeModulesFolder = nodeModulesFolder;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        getPlugins().forEach(plugin -> {\n+            try {\n+                generatePluginFiles(plugin);\n+            } catch (IOException ioe) {\n+                throw new UncheckedIOException(\n+                    \"Installation of Flow webpack plugin '\" + plugin\n+                        + \"' failed\", ioe);\n+            }\n+        });\n+    }\n+\n+    protected List<String> getPlugins() {\n+        try {\n+            final JsonObject jsonFile = getJsonFile(\n+                \"plugins/webpack-plugins.json\");\n+            if (jsonFile == null) {\n+                log().error(\"Couldn't locate webpack-plugins.json\");", "originalCommit": "0edbdc41ed86ed4c232b1250b2f6fa78d6a42019", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMyNDAyMw==", "url": "https://github.com/vaadin/flow/pull/9295#discussion_r517324023", "bodyText": "Shouldn't, but ofc the jar could be corrupt", "author": "caalador", "createdAt": "2020-11-04T12:57:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4MzQwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5MjM4OQ==", "url": "https://github.com/vaadin/flow/pull/9295#discussion_r517292389", "bodyText": "\"Couldn't locate package.json ...\" instead of files ?\nAnd adding the impact \"Not installing the plugin-name plugin.\"", "author": "pleku", "createdAt": "2020-11-04T11:57:19Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskInstallWebpackPlugins.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.frontend;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import elemental.json.Json;\n+import elemental.json.JsonArray;\n+import elemental.json.JsonObject;\n+import static com.vaadin.flow.server.Constants.PACKAGE_JSON;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Task that installs any Flow webpack plugins into node_modules/@vaadin for\n+ * use with webpack compilation.\n+ * <p>\n+ * This should preferably be executed after npm installation to not make it skip\n+ * or have the plugins deleted by {@link TaskRunNpmInstall}.\n+ *\n+ * @since\n+ */\n+public class TaskInstallWebpackPlugins implements FallibleCommand {\n+\n+    private File nodeModulesFolder;\n+\n+    /**\n+     * Copy Flow webpack plugins into the given nodeModulesFolder.\n+     *\n+     * @param nodeModulesFolder\n+     *     node_modules folder to copy files to\n+     */\n+    public TaskInstallWebpackPlugins(File nodeModulesFolder) {\n+        this.nodeModulesFolder = nodeModulesFolder;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        getPlugins().forEach(plugin -> {\n+            try {\n+                generatePluginFiles(plugin);\n+            } catch (IOException ioe) {\n+                throw new UncheckedIOException(\n+                    \"Installation of Flow webpack plugin '\" + plugin\n+                        + \"' failed\", ioe);\n+            }\n+        });\n+    }\n+\n+    protected List<String> getPlugins() {\n+        try {\n+            final JsonObject jsonFile = getJsonFile(\n+                \"plugins/webpack-plugins.json\");\n+            if (jsonFile == null) {\n+                log().error(\"Couldn't locate webpack-plugins.json\");\n+                return Collections.emptyList();\n+            }\n+\n+            final JsonArray plugins = jsonFile.getArray(\"plugins\");\n+            List<String> pluginsToInstall = new ArrayList<>(plugins.length());\n+            for (int i = 0; i < plugins.length(); i++) {\n+                pluginsToInstall.add(plugins.getString(i));\n+            }\n+            return pluginsToInstall;\n+        } catch (IOException ioe) {\n+            throw new UncheckedIOException(\n+                \"Couldn't load webpack-plugins.json file\", ioe);\n+        }\n+    }\n+\n+    private void generatePluginFiles(String pluginName) throws IOException {\n+        // Get the target folder where the plugin should be installed to\n+        File pluginTargetFolder = new File(nodeModulesFolder,\n+            \"@vaadin/\" + pluginName);\n+\n+        final String pluginFolder = \"plugins/\" + pluginName + \"/\";\n+        final JsonObject json = getJsonFile(pluginFolder + PACKAGE_JSON);\n+        if (json == null) {\n+            log().error(\"Couldn't locate files for plugin '{}'\", pluginName);", "originalCommit": "0edbdc41ed86ed4c232b1250b2f6fa78d6a42019", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMyNTYwOQ==", "url": "https://github.com/vaadin/flow/pull/9295#discussion_r517325609", "bodyText": "done", "author": "caalador", "createdAt": "2020-11-04T13:00:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5MjM4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NDQ4OQ==", "url": "https://github.com/vaadin/flow/pull/9295#discussion_r517294489", "bodyText": "Just noting that I was a bit confused with the code for a moment since the variable names are both folder but other is String and other is a File", "author": "pleku", "createdAt": "2020-11-04T12:01:16Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskInstallWebpackPlugins.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.frontend;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import elemental.json.Json;\n+import elemental.json.JsonArray;\n+import elemental.json.JsonObject;\n+import static com.vaadin.flow.server.Constants.PACKAGE_JSON;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Task that installs any Flow webpack plugins into node_modules/@vaadin for\n+ * use with webpack compilation.\n+ * <p>\n+ * This should preferably be executed after npm installation to not make it skip\n+ * or have the plugins deleted by {@link TaskRunNpmInstall}.\n+ *\n+ * @since\n+ */\n+public class TaskInstallWebpackPlugins implements FallibleCommand {\n+\n+    private File nodeModulesFolder;\n+\n+    /**\n+     * Copy Flow webpack plugins into the given nodeModulesFolder.\n+     *\n+     * @param nodeModulesFolder\n+     *     node_modules folder to copy files to\n+     */\n+    public TaskInstallWebpackPlugins(File nodeModulesFolder) {\n+        this.nodeModulesFolder = nodeModulesFolder;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        getPlugins().forEach(plugin -> {\n+            try {\n+                generatePluginFiles(plugin);\n+            } catch (IOException ioe) {\n+                throw new UncheckedIOException(\n+                    \"Installation of Flow webpack plugin '\" + plugin\n+                        + \"' failed\", ioe);\n+            }\n+        });\n+    }\n+\n+    protected List<String> getPlugins() {\n+        try {\n+            final JsonObject jsonFile = getJsonFile(\n+                \"plugins/webpack-plugins.json\");\n+            if (jsonFile == null) {\n+                log().error(\"Couldn't locate webpack-plugins.json\");\n+                return Collections.emptyList();\n+            }\n+\n+            final JsonArray plugins = jsonFile.getArray(\"plugins\");\n+            List<String> pluginsToInstall = new ArrayList<>(plugins.length());\n+            for (int i = 0; i < plugins.length(); i++) {\n+                pluginsToInstall.add(plugins.getString(i));\n+            }\n+            return pluginsToInstall;\n+        } catch (IOException ioe) {\n+            throw new UncheckedIOException(\n+                \"Couldn't load webpack-plugins.json file\", ioe);\n+        }\n+    }\n+\n+    private void generatePluginFiles(String pluginName) throws IOException {\n+        // Get the target folder where the plugin should be installed to\n+        File pluginTargetFolder = new File(nodeModulesFolder,\n+            \"@vaadin/\" + pluginName);\n+\n+        final String pluginFolder = \"plugins/\" + pluginName + \"/\";", "originalCommit": "0edbdc41ed86ed4c232b1250b2f6fa78d6a42019", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMyNDkzMw==", "url": "https://github.com/vaadin/flow/pull/9295#discussion_r517324933", "bodyText": "Using pluginTargetFile and pluginFolderName", "author": "caalador", "createdAt": "2020-11-04T12:59:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NDQ4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMwNzYyMg==", "url": "https://github.com/vaadin/flow/pull/9295#discussion_r517307622", "bodyText": "nitpicking, but shouldn't this be getResourceUrl instead ?", "author": "pleku", "createdAt": "2020-11-04T12:26:58Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskInstallWebpackPlugins.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.frontend;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import elemental.json.Json;\n+import elemental.json.JsonArray;\n+import elemental.json.JsonObject;\n+import static com.vaadin.flow.server.Constants.PACKAGE_JSON;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Task that installs any Flow webpack plugins into node_modules/@vaadin for\n+ * use with webpack compilation.\n+ * <p>\n+ * This should preferably be executed after npm installation to not make it skip\n+ * or have the plugins deleted by {@link TaskRunNpmInstall}.\n+ *\n+ * @since\n+ */\n+public class TaskInstallWebpackPlugins implements FallibleCommand {\n+\n+    private File nodeModulesFolder;\n+\n+    /**\n+     * Copy Flow webpack plugins into the given nodeModulesFolder.\n+     *\n+     * @param nodeModulesFolder\n+     *     node_modules folder to copy files to\n+     */\n+    public TaskInstallWebpackPlugins(File nodeModulesFolder) {\n+        this.nodeModulesFolder = nodeModulesFolder;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        getPlugins().forEach(plugin -> {\n+            try {\n+                generatePluginFiles(plugin);\n+            } catch (IOException ioe) {\n+                throw new UncheckedIOException(\n+                    \"Installation of Flow webpack plugin '\" + plugin\n+                        + \"' failed\", ioe);\n+            }\n+        });\n+    }\n+\n+    protected List<String> getPlugins() {\n+        try {\n+            final JsonObject jsonFile = getJsonFile(\n+                \"plugins/webpack-plugins.json\");\n+            if (jsonFile == null) {\n+                log().error(\"Couldn't locate webpack-plugins.json\");\n+                return Collections.emptyList();\n+            }\n+\n+            final JsonArray plugins = jsonFile.getArray(\"plugins\");\n+            List<String> pluginsToInstall = new ArrayList<>(plugins.length());\n+            for (int i = 0; i < plugins.length(); i++) {\n+                pluginsToInstall.add(plugins.getString(i));\n+            }\n+            return pluginsToInstall;\n+        } catch (IOException ioe) {\n+            throw new UncheckedIOException(\n+                \"Couldn't load webpack-plugins.json file\", ioe);\n+        }\n+    }\n+\n+    private void generatePluginFiles(String pluginName) throws IOException {\n+        // Get the target folder where the plugin should be installed to\n+        File pluginTargetFolder = new File(nodeModulesFolder,\n+            \"@vaadin/\" + pluginName);\n+\n+        final String pluginFolder = \"plugins/\" + pluginName + \"/\";\n+        final JsonObject json = getJsonFile(pluginFolder + PACKAGE_JSON);\n+        if (json == null) {\n+            log().error(\"Couldn't locate files for plugin '{}'\", pluginName);\n+            return;\n+        }\n+\n+        // Validate installed version and don't override if same\n+        if (pluginTargetFolder.exists() && new File(pluginTargetFolder,\n+            PACKAGE_JSON).exists()) {\n+            String packageFile = FileUtils\n+                .readFileToString(new File(pluginTargetFolder, PACKAGE_JSON),\n+                    StandardCharsets.UTF_8);\n+            final FrontendVersion packageVersion = new FrontendVersion(\n+                Json.parse(packageFile).getString(\"version\"));\n+            FrontendVersion pluginVersion = new FrontendVersion(\n+                json.getString(\"version\"));\n+            if (packageVersion.isEqualTo(pluginVersion)) {\n+                log().debug(\n+                    \"Skipping install of {} for version {} already installed\",\n+                    pluginName, pluginVersion.getFullVersion());\n+                return;\n+            }\n+        }\n+\n+        // Create target folder if necessary\n+        FileUtils.forceMkdir(pluginTargetFolder);\n+\n+        // copy only files named in package.json { files }\n+        final JsonArray files = json.getArray(\"files\");\n+        for (int i = 0; i < files.length(); i++) {\n+            final String file = files.getString(i);\n+            FileUtils.copyURLToFile(getUrlResource(pluginFolder + file),\n+                new File(pluginTargetFolder, file));\n+        }\n+        // copy package.json to plugin directory\n+        FileUtils.copyURLToFile(getUrlResource(pluginFolder + PACKAGE_JSON),\n+            new File(pluginTargetFolder, PACKAGE_JSON));\n+    }\n+\n+    private JsonObject getJsonFile(String jsonFilePath) throws IOException {\n+        final URL urlResource = getUrlResource(jsonFilePath);\n+        if (urlResource == null) {\n+            return null;\n+        }\n+        File pluginPackageJson = new File(urlResource.getFile());\n+        String jsonString;\n+        if (!pluginPackageJson.exists()) {\n+            try (InputStream resourceAsStream = this.getClass().getClassLoader()\n+                .getResourceAsStream(jsonFilePath)) {\n+                if (resourceAsStream != null) {\n+                    jsonString = FrontendUtils.streamToString(resourceAsStream);\n+                } else {\n+                    return null;\n+                }\n+            }\n+        } else {\n+            jsonString = FileUtils.readFileToString(pluginPackageJson, UTF_8);\n+        }\n+        return Json.parse(jsonString);\n+    }\n+\n+    private URL getUrlResource(String resource) {", "originalCommit": "0edbdc41ed86ed4c232b1250b2f6fa78d6a42019", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMyNjA2MA==", "url": "https://github.com/vaadin/flow/pull/9295#discussion_r517326060", "bodyText": "done", "author": "caalador", "createdAt": "2020-11-04T13:01:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMwNzYyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMwODM5MQ==", "url": "https://github.com/vaadin/flow/pull/9295#discussion_r517308391", "bodyText": "nitpicking: packageJson  would be clearer name", "author": "pleku", "createdAt": "2020-11-04T12:28:27Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskInstallWebpackPlugins.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.frontend;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import elemental.json.Json;\n+import elemental.json.JsonArray;\n+import elemental.json.JsonObject;\n+import static com.vaadin.flow.server.Constants.PACKAGE_JSON;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Task that installs any Flow webpack plugins into node_modules/@vaadin for\n+ * use with webpack compilation.\n+ * <p>\n+ * This should preferably be executed after npm installation to not make it skip\n+ * or have the plugins deleted by {@link TaskRunNpmInstall}.\n+ *\n+ * @since\n+ */\n+public class TaskInstallWebpackPlugins implements FallibleCommand {\n+\n+    private File nodeModulesFolder;\n+\n+    /**\n+     * Copy Flow webpack plugins into the given nodeModulesFolder.\n+     *\n+     * @param nodeModulesFolder\n+     *     node_modules folder to copy files to\n+     */\n+    public TaskInstallWebpackPlugins(File nodeModulesFolder) {\n+        this.nodeModulesFolder = nodeModulesFolder;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        getPlugins().forEach(plugin -> {\n+            try {\n+                generatePluginFiles(plugin);\n+            } catch (IOException ioe) {\n+                throw new UncheckedIOException(\n+                    \"Installation of Flow webpack plugin '\" + plugin\n+                        + \"' failed\", ioe);\n+            }\n+        });\n+    }\n+\n+    protected List<String> getPlugins() {\n+        try {\n+            final JsonObject jsonFile = getJsonFile(\n+                \"plugins/webpack-plugins.json\");\n+            if (jsonFile == null) {\n+                log().error(\"Couldn't locate webpack-plugins.json\");\n+                return Collections.emptyList();\n+            }\n+\n+            final JsonArray plugins = jsonFile.getArray(\"plugins\");\n+            List<String> pluginsToInstall = new ArrayList<>(plugins.length());\n+            for (int i = 0; i < plugins.length(); i++) {\n+                pluginsToInstall.add(plugins.getString(i));\n+            }\n+            return pluginsToInstall;\n+        } catch (IOException ioe) {\n+            throw new UncheckedIOException(\n+                \"Couldn't load webpack-plugins.json file\", ioe);\n+        }\n+    }\n+\n+    private void generatePluginFiles(String pluginName) throws IOException {\n+        // Get the target folder where the plugin should be installed to\n+        File pluginTargetFolder = new File(nodeModulesFolder,\n+            \"@vaadin/\" + pluginName);\n+\n+        final String pluginFolder = \"plugins/\" + pluginName + \"/\";\n+        final JsonObject json = getJsonFile(pluginFolder + PACKAGE_JSON);", "originalCommit": "0edbdc41ed86ed4c232b1250b2f6fa78d6a42019", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMyNDk5OQ==", "url": "https://github.com/vaadin/flow/pull/9295#discussion_r517324999", "bodyText": "done", "author": "caalador", "createdAt": "2020-11-04T12:59:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMwODM5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMxMDIyMw==", "url": "https://github.com/vaadin/flow/pull/9295#discussion_r517310223", "bodyText": "Wrong variable name left after refactoring this method to be reused ? Should probably just be  jsonFile", "author": "pleku", "createdAt": "2020-11-04T12:32:00Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskInstallWebpackPlugins.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.frontend;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import elemental.json.Json;\n+import elemental.json.JsonArray;\n+import elemental.json.JsonObject;\n+import static com.vaadin.flow.server.Constants.PACKAGE_JSON;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Task that installs any Flow webpack plugins into node_modules/@vaadin for\n+ * use with webpack compilation.\n+ * <p>\n+ * This should preferably be executed after npm installation to not make it skip\n+ * or have the plugins deleted by {@link TaskRunNpmInstall}.\n+ *\n+ * @since\n+ */\n+public class TaskInstallWebpackPlugins implements FallibleCommand {\n+\n+    private File nodeModulesFolder;\n+\n+    /**\n+     * Copy Flow webpack plugins into the given nodeModulesFolder.\n+     *\n+     * @param nodeModulesFolder\n+     *     node_modules folder to copy files to\n+     */\n+    public TaskInstallWebpackPlugins(File nodeModulesFolder) {\n+        this.nodeModulesFolder = nodeModulesFolder;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        getPlugins().forEach(plugin -> {\n+            try {\n+                generatePluginFiles(plugin);\n+            } catch (IOException ioe) {\n+                throw new UncheckedIOException(\n+                    \"Installation of Flow webpack plugin '\" + plugin\n+                        + \"' failed\", ioe);\n+            }\n+        });\n+    }\n+\n+    protected List<String> getPlugins() {\n+        try {\n+            final JsonObject jsonFile = getJsonFile(\n+                \"plugins/webpack-plugins.json\");\n+            if (jsonFile == null) {\n+                log().error(\"Couldn't locate webpack-plugins.json\");\n+                return Collections.emptyList();\n+            }\n+\n+            final JsonArray plugins = jsonFile.getArray(\"plugins\");\n+            List<String> pluginsToInstall = new ArrayList<>(plugins.length());\n+            for (int i = 0; i < plugins.length(); i++) {\n+                pluginsToInstall.add(plugins.getString(i));\n+            }\n+            return pluginsToInstall;\n+        } catch (IOException ioe) {\n+            throw new UncheckedIOException(\n+                \"Couldn't load webpack-plugins.json file\", ioe);\n+        }\n+    }\n+\n+    private void generatePluginFiles(String pluginName) throws IOException {\n+        // Get the target folder where the plugin should be installed to\n+        File pluginTargetFolder = new File(nodeModulesFolder,\n+            \"@vaadin/\" + pluginName);\n+\n+        final String pluginFolder = \"plugins/\" + pluginName + \"/\";\n+        final JsonObject json = getJsonFile(pluginFolder + PACKAGE_JSON);\n+        if (json == null) {\n+            log().error(\"Couldn't locate files for plugin '{}'\", pluginName);\n+            return;\n+        }\n+\n+        // Validate installed version and don't override if same\n+        if (pluginTargetFolder.exists() && new File(pluginTargetFolder,\n+            PACKAGE_JSON).exists()) {\n+            String packageFile = FileUtils\n+                .readFileToString(new File(pluginTargetFolder, PACKAGE_JSON),\n+                    StandardCharsets.UTF_8);\n+            final FrontendVersion packageVersion = new FrontendVersion(\n+                Json.parse(packageFile).getString(\"version\"));\n+            FrontendVersion pluginVersion = new FrontendVersion(\n+                json.getString(\"version\"));\n+            if (packageVersion.isEqualTo(pluginVersion)) {\n+                log().debug(\n+                    \"Skipping install of {} for version {} already installed\",\n+                    pluginName, pluginVersion.getFullVersion());\n+                return;\n+            }\n+        }\n+\n+        // Create target folder if necessary\n+        FileUtils.forceMkdir(pluginTargetFolder);\n+\n+        // copy only files named in package.json { files }\n+        final JsonArray files = json.getArray(\"files\");\n+        for (int i = 0; i < files.length(); i++) {\n+            final String file = files.getString(i);\n+            FileUtils.copyURLToFile(getUrlResource(pluginFolder + file),\n+                new File(pluginTargetFolder, file));\n+        }\n+        // copy package.json to plugin directory\n+        FileUtils.copyURLToFile(getUrlResource(pluginFolder + PACKAGE_JSON),\n+            new File(pluginTargetFolder, PACKAGE_JSON));\n+    }\n+\n+    private JsonObject getJsonFile(String jsonFilePath) throws IOException {\n+        final URL urlResource = getUrlResource(jsonFilePath);\n+        if (urlResource == null) {\n+            return null;\n+        }\n+        File pluginPackageJson = new File(urlResource.getFile());", "originalCommit": "0edbdc41ed86ed4c232b1250b2f6fa78d6a42019", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMyNTkxMw==", "url": "https://github.com/vaadin/flow/pull/9295#discussion_r517325913", "bodyText": "done", "author": "caalador", "createdAt": "2020-11-04T13:01:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMxMDIyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMxNTg2Ng==", "url": "https://github.com/vaadin/flow/pull/9295#discussion_r517315866", "bodyText": "wat - it is now executed but no changes to the actual test ? \ud83d\ude05", "author": "pleku", "createdAt": "2020-11-04T12:42:53Z", "path": "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunNpmInstallTest.java", "diffHunk": "@@ -217,7 +216,7 @@ public void writeLocalHash(String hash) throws IOException {\n     }\n \n     @Test\n-    public void runNpmInstall_dirContainsOnlyFlowNpmPackage_npmInstallIsNotExecuted()\n+    public void runNpmInstall_dirContainsOnlyFlowNpmPackage_npmInstallIsExecuted()", "originalCommit": "0edbdc41ed86ed4c232b1250b2f6fa78d6a42019", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMxOTc4Nw==", "url": "https://github.com/vaadin/flow/pull/9295#discussion_r517319787", "bodyText": "The assertion at the end of the test checks that npm is executed. the test name was wrong as the assertion for not executing npn install would be\n        ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);\n        Mockito.verify(logger).info(captor.capture(),\n                Mockito.matches(getToolName()),\n                Mockito.matches(nodeModules.getAbsolutePath().replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\")), Mockito.any(),\n                Mockito.matches(Constants.PACKAGE_JSON));\n        Assert.assertEquals(\n                \"Skipping `{} install` because the frontend packages are already installed in the folder '{}' and the hash in the file '{}' is the same as in '{}'\",\n                captor.getValue());", "author": "caalador", "createdAt": "2020-11-04T12:50:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMxNTg2Ng=="}], "type": "inlineReview"}, {"oid": "8fdb603bb3115ef77d9d01ee0f70e574f01ceb96", "url": "https://github.com/vaadin/flow/commit/8fdb603bb3115ef77d9d01ee0f70e574f01ceb96", "message": "Update names and add more information to error logging", "committedDate": "2020-11-04T13:04:40Z", "type": "commit"}]}