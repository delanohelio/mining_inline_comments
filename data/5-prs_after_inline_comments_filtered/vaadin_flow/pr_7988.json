{"pr_number": 7988, "pr_title": "Cherry-picks for 3.0", "pr_createdAt": "2020-04-03T07:43:25Z", "pr_url": "https://github.com/vaadin/flow/pull/7988", "timeline": [{"oid": "a10245a7a3721a428d0578b6544e831da52b3f0c", "url": "https://github.com/vaadin/flow/commit/a10245a7a3721a428d0578b6544e831da52b3f0c", "message": "Remove not-existing parameter", "committedDate": "2020-04-03T07:51:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwNjkxNg==", "url": "https://github.com/vaadin/flow/pull/7988#discussion_r402806916", "bodyText": "Use the built-in formatting to construct this argument.", "author": "vaadin-bot", "createdAt": "2020-04-03T08:01:27Z", "path": "flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassFinder.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.testutil;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.List;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.junit.Assert.assertNotNull;\n+\n+/**\n+ * Superclass for testing classes which need to scan project's classpath.\n+ * \n+ * @author Vaadin Ltd\n+ *\n+ */\n+public abstract class ClassFinder {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ClassFinder.class);\n+\n+    protected boolean isTestClassPath(String classPath) {\n+        File file = new File(classPath);\n+        return \"test-classes\".equals(file.getName());\n+    }\n+\n+    protected static boolean isFunctionalType(Type type) {\n+        return type.getTypeName().contains(\"java.util.function\");\n+    }\n+\n+    /**\n+     * Lists all class path entries by splitting the class path string.\n+     * <p>\n+     * Adapted from ClassPathExplorer.getRawClasspathEntries(), but without\n+     * filtering.\n+     *\n+     * @return List of class path segment strings\n+     */\n+    protected static List<String> getRawClasspathEntries() {\n+        // try to keep the order of the classpath\n+\n+        String pathSep = System.getProperty(\"path.separator\");\n+        String classpath = System.getProperty(\"java.class.path\");\n+\n+        if (classpath.startsWith(\"\\\"\")) {\n+            classpath = classpath.substring(1);\n+        }\n+        if (classpath.endsWith(\"\\\"\")) {\n+            classpath = classpath.substring(0, classpath.length() - 1);\n+        }\n+\n+        String[] split = classpath.split(pathSep);\n+        return Arrays.asList(split);\n+    }\n+\n+    /**\n+     * Lists class names (based on .class files) in a directory (a package path\n+     * root).\n+     *\n+     * @param parentPackage\n+     *            parent package name or null at root of hierarchy, used by\n+     *            recursion\n+     * @param parent\n+     *            File representing the directory to scan\n+     * @return collection of fully qualified class names in the directory\n+     */\n+    private static Collection<String> findClassesInDirectory(\n+            String parentPackage, File parent) {\n+        if (parent.isHidden()\n+                || parent.getPath().contains(File.separator + \".\")) {\n+            return Collections.emptyList();\n+        }\n+\n+        if (parentPackage == null) {\n+            parentPackage = \"\";\n+        } else {\n+            parentPackage += \".\";\n+        }\n+\n+        Collection<String> classNames = new ArrayList<>();\n+\n+        // add all directories recursively\n+        File[] files = parent.listFiles();\n+        assertNotNull(files);\n+        for (File child : files) {\n+            if (child.isDirectory()) {\n+                classNames.addAll(findClassesInDirectory(\n+                        parentPackage + child.getName(), child));\n+            } else if (child.getName().endsWith(\".class\")) {\n+                classNames.add(parentPackage.replace(File.separatorChar, '.')\n+                        + child.getName().replaceAll(\"\\\\.class\", \"\"));\n+            }\n+        }\n+\n+        return classNames;\n+    }\n+\n+    /**\n+     * JARs that will be scanned for classes to test, in addition to classpath\n+     * directories.\n+     *\n+     * @return the compiled pattern\n+     */\n+    @SuppressWarnings(\"WeakerAccess\")\n+    protected Pattern getJarPattern() {\n+        return Pattern.compile(\"(.*vaadin.*)|(.*flow.*)\\\\.jar\");\n+    }\n+\n+    @SuppressWarnings(\"WeakerAccess\")\n+    protected Stream<String> getBasePackages() {\n+        return Stream.of(\"com.vaadin\");\n+    }\n+\n+    protected boolean isTestClass(Class<?> cls) {\n+        if (cls.getEnclosingClass() != null\n+                && isTestClass(cls.getEnclosingClass())) {\n+            return true;\n+        }\n+\n+        // Test classes with a @Test annotation on some method\n+        for (Method method : cls.getMethods()) {\n+            if (method.isAnnotationPresent(Test.class)) {\n+                return true;\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    /**\n+     * Finds the server side classes/interfaces under a class path entry -\n+     * either a directory or a JAR that matches {@link #getJarPattern()}.\n+     * <p>\n+     * Only classes under {@link #getBasePackages} are considered, and those\n+     * matching {@code excludes} are filtered out.\n+     */\n+    protected List<String> findServerClasses(String classpathEntry,\n+            Collection<Pattern> excludes) throws IOException {\n+        Collection<String> classes;\n+\n+        File file = new File(classpathEntry);\n+        if (file.isDirectory()) {\n+            classes = findClassesInDirectory(null, file);\n+        } else if (getJarPattern().matcher(file.getName()).matches()) {\n+            classes = findClassesInJar(file);\n+        } else {\n+            logger.debug(\"Ignoring \" + classpathEntry);", "originalCommit": "a10245a7a3721a428d0578b6544e831da52b3f0c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwNjkzMQ==", "url": "https://github.com/vaadin/flow/pull/7988#discussion_r402806931", "bodyText": "Call \"Optional#isPresent()\" before accessing the value.", "author": "vaadin-bot", "createdAt": "2020-04-03T08:01:29Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/ClassLoaderAwareServletContainerInitializer.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.startup;\n+\n+import javax.servlet.ServletContainerInitializer;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletException;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Allows to load the implementation class by one classloader but accepts\n+ * classes in {@link #onStartup(Set, ServletContext)} method loaded by another\n+ * classloader.\n+ * <p>\n+ * Workaround for https://github.com/vaadin/flow/issues/7805.\n+ *\n+ * @author Vaadin Ltd\n+ *\n+ */\n+public interface ClassLoaderAwareServletContainerInitializer\n+        extends ServletContainerInitializer {\n+\n+    /**\n+     * Overridden to use different classloaders if needed.\n+     * <p>\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    default void onStartup(Set<Class<?>> set, ServletContext ctx)\n+            throws ServletException {\n+        ClassLoader webClassLoader = ctx.getClassLoader();\n+        ClassLoader classLoader = getClass().getClassLoader();\n+\n+        /*\n+         * Hack is needed to make a workaround for weird behavior of WildFly\n+         * with skinnywar See https://github.com/vaadin/flow/issues/7805\n+         */\n+        boolean noHack = false;\n+        while (classLoader != null) {\n+            if (classLoader.equals(webClassLoader)) {\n+                noHack = true;\n+                break;\n+            } else {\n+                /*\n+                 * The classloader which has loaded this class ({@code\n+                 * classLoader}) should be either the {@code webClassLoader} or\n+                 * its child: in this case it knows how to handle the classes\n+                 * loaded by the {@code webClassLoader} : it either is able to\n+                 * load them itself or delegate to its parent (which is the\n+                 * {@code webClassLoader}): in this case hack is not needed and\n+                 * the {@link #process(Set, ServletContext)} method can be\n+                 * called directly.\n+                 */\n+                classLoader = classLoader.getParent();\n+            }\n+        }\n+\n+        if (noHack) {\n+            process(set, ctx);\n+            return;\n+        }\n+\n+        try {\n+            Class<?> initializer = ctx.getClassLoader()\n+                    .loadClass(getClass().getName());\n+\n+            String processMethodName = Stream", "originalCommit": "a10245a7a3721a428d0578b6544e831da52b3f0c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "376bc8d563745cd9b2f4db8ba18622f129127671", "url": "https://github.com/vaadin/flow/commit/376bc8d563745cd9b2f4db8ba18622f129127671", "message": "Fix broken merges in cherry-picks", "committedDate": "2020-04-03T10:11:06Z", "type": "forcePushed"}, {"oid": "d6dcd207f6e8fce7b12ff8afd6857cc21a728800", "url": "https://github.com/vaadin/flow/commit/d6dcd207f6e8fce7b12ff8afd6857cc21a728800", "message": "Remove compatibilty mode files.\n\nRemove some compatibilty mode/v13\nfiles as they are not used anymore.", "committedDate": "2020-04-03T10:15:36Z", "type": "forcePushed"}, {"oid": "a6ad2cd17af7f2c04264bd43df4fb5c721272a77", "url": "https://github.com/vaadin/flow/commit/a6ad2cd17af7f2c04264bd43df4fb5c721272a77", "message": "Validate Route and ParentLayout annotations presence at the same time (#7870)\n\n* Validate Route and ParentLayout annotations presence at the same time\n\nFixes #3865\n\n* Correct unit test\n\n* Improve wording", "committedDate": "2020-04-03T10:16:01Z", "type": "commit"}, {"oid": "a92a093188c13a86d1c6c1b512429c57634ca6a6", "url": "https://github.com/vaadin/flow/commit/a92a093188c13a86d1c6c1b512429c57634ca6a6", "message": "Remove some leftovers from \"frontend\" protocol removal change. (#7787)", "committedDate": "2020-04-03T10:16:01Z", "type": "commit"}, {"oid": "272d9e59d2d4fc24f59c0481b2502f3809b9eb48", "url": "https://github.com/vaadin/flow/commit/272d9e59d2d4fc24f59c0481b2502f3809b9eb48", "message": "Add stats for pnpm usage (#7917)", "committedDate": "2020-04-03T10:16:01Z", "type": "commit"}, {"oid": "81839786d3361fbe1bea4fcd4f0a08d3d01a901b", "url": "https://github.com/vaadin/flow/commit/81839786d3361fbe1bea4fcd4f0a08d3d01a901b", "message": "Reload the page on ESC (#7669)\n\n* Reload the page on ESC\n\nFixes #6284\n\n* Add IT test\n\n* Check if test fails\n\n* Merge master into 6284-reload-page-on-esc\n\n* Remove not working test", "committedDate": "2020-04-03T10:16:01Z", "type": "commit"}, {"oid": "ba62554f71a6b8c807c71f361099ea2ab7e86f31", "url": "https://github.com/vaadin/flow/commit/ba62554f71a6b8c807c71f361099ea2ab7e86f31", "message": "Use token file to write parameters for dev mode from maven config\n(#7666)\n\n* Move parameters into a super class.\n* Set init parameter values based on the token file data.\n\n# Conflicts:\n#\tflow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/FlowModeAbstractMojo.java", "committedDate": "2020-04-03T10:16:01Z", "type": "commit"}, {"oid": "591c4836824b46329ab1b973efe9ec60fd455b8b", "url": "https://github.com/vaadin/flow/commit/591c4836824b46329ab1b973efe9ec60fd455b8b", "message": "Don't store optimize bundle in dev mode in the token file. (#7824)\n\nFixes #7773", "committedDate": "2020-04-03T10:16:01Z", "type": "commit"}, {"oid": "c9330da359618c8fbb9ae5a63abcffe9087bce85", "url": "https://github.com/vaadin/flow/commit/c9330da359618c8fbb9ae5a63abcffe9087bce85", "message": "Make a workaround for skinnywar/Wildfly (#7904)\n\nFixes #7805", "committedDate": "2020-04-03T10:16:01Z", "type": "commit"}, {"oid": "0e4db663382faeb158d640e4fa95b4708d55ff22", "url": "https://github.com/vaadin/flow/commit/0e4db663382faeb158d640e4fa95b4708d55ff22", "message": "Fix broken merges in cherry-picks", "committedDate": "2020-04-03T10:16:01Z", "type": "commit"}, {"oid": "10fd53444a519e7e66db00ddbf6515ccd23b86f9", "url": "https://github.com/vaadin/flow/commit/10fd53444a519e7e66db00ddbf6515ccd23b86f9", "message": "Remove compatibilty mode files.\n\nRemove some compatibilty mode/v13\nfiles as they are not used anymore.", "committedDate": "2020-04-03T10:16:01Z", "type": "commit"}, {"oid": "10fd53444a519e7e66db00ddbf6515ccd23b86f9", "url": "https://github.com/vaadin/flow/commit/10fd53444a519e7e66db00ddbf6515ccd23b86f9", "message": "Remove compatibilty mode files.\n\nRemove some compatibilty mode/v13\nfiles as they are not used anymore.", "committedDate": "2020-04-03T10:16:01Z", "type": "forcePushed"}]}