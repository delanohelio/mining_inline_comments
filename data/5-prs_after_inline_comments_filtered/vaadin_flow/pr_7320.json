{"pr_number": 7320, "pr_title": "Update comment parser handling", "pr_createdAt": "2020-01-09T12:11:20Z", "pr_url": "https://github.com/vaadin/flow/pull/7320", "timeline": [{"oid": "7c1f5abb5b048cc39158adc4660437bfa940ad34", "url": "https://github.com/vaadin/flow/commit/7c1f5abb5b048cc39158adc4660437bfa940ad34", "message": "Update comment parser handling\n\nNow apparent comments inside\nstrings are left untouched.\n\nFixes #7082", "committedDate": "2020-01-09T12:10:37Z", "type": "commit"}, {"oid": "6d6a6b560d2a8786342262d49a522ed2c32a477b", "url": "https://github.com/vaadin/flow/commit/6d6a6b560d2a8786342262d49a522ed2c32a477b", "message": "Enums as uppercase.", "committedDate": "2020-01-09T12:56:53Z", "type": "commit"}, {"oid": "32ec4618b6ca983ffde38613810c8617a80db26b", "url": "https://github.com/vaadin/flow/commit/32ec4618b6ca983ffde38613810c8617a80db26b", "message": "Use comment parser also in ImportExtractor", "committedDate": "2020-01-09T13:16:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc1NzUyMQ==", "url": "https://github.com/vaadin/flow/pull/7320#discussion_r364757521", "bodyText": "Refactor this code to not nest more than 3 if/for/while/switch/try statements. \n Move the \"/\" string literal on the left side of this string comparison.", "author": "vaadin-bot", "createdAt": "2020-01-09T14:10:35Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/StringUtil.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.internal;\n+\n+import java.util.Scanner;\n+\n+/**\n+ * Utility class for special string handling.\n+ */\n+public final class StringUtil {\n+\n+    /**\n+     * Comment parser state enumeration.\n+     */\n+    private enum State {\n+        NORMAL, IN_LINE_COMMENT, IN_BLOCK_COMMENT, IN_STRING\n+    }\n+\n+    /**\n+     * Removes comments (block comments and line comments) from the JS code.\n+     *\n+     * @return the code with removed comments\n+     */\n+    public final static String removeComments(String code) {\n+        State state = State.NORMAL;\n+        StringBuilder result = new StringBuilder();\n+        Scanner scanner = new Scanner(code);\n+        scanner.useDelimiter(\"\");\n+        while (scanner.hasNext()) {\n+            String character = scanner.next();\n+            switch (state) {\n+            case NORMAL:\n+                if (character.equals(\"/\") && scanner.hasNext()) {\n+                    String nextCharacter = scanner.next();\n+                    if (nextCharacter.equals(\"/\")) {", "originalCommit": "32ec4618b6ca983ffde38613810c8617a80db26b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc1NzUzNw==", "url": "https://github.com/vaadin/flow/pull/7320#discussion_r364757537", "bodyText": "Move the \"\"\" string literal on the left side of this string comparison.", "author": "vaadin-bot", "createdAt": "2020-01-09T14:10:36Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/StringUtil.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.internal;\n+\n+import java.util.Scanner;\n+\n+/**\n+ * Utility class for special string handling.\n+ */\n+public final class StringUtil {\n+\n+    /**\n+     * Comment parser state enumeration.\n+     */\n+    private enum State {\n+        NORMAL, IN_LINE_COMMENT, IN_BLOCK_COMMENT, IN_STRING\n+    }\n+\n+    /**\n+     * Removes comments (block comments and line comments) from the JS code.\n+     *\n+     * @return the code with removed comments\n+     */\n+    public final static String removeComments(String code) {\n+        State state = State.NORMAL;\n+        StringBuilder result = new StringBuilder();\n+        Scanner scanner = new Scanner(code);\n+        scanner.useDelimiter(\"\");\n+        while (scanner.hasNext()) {\n+            String character = scanner.next();\n+            switch (state) {\n+            case NORMAL:\n+                if (character.equals(\"/\") && scanner.hasNext()) {\n+                    String nextCharacter = scanner.next();\n+                    if (nextCharacter.equals(\"/\")) {\n+                        state = State.IN_LINE_COMMENT;\n+                    } else if (nextCharacter.equals(\"*\")) {\n+                        state = State.IN_BLOCK_COMMENT;\n+                    } else {\n+                        result.append(character).append(nextCharacter);\n+                    }\n+                } else {\n+                    result.append(character);\n+                    if (character.equals(\"\\\"\")) {\n+                        state = State.IN_STRING;\n+                    }\n+                }\n+                break;\n+            case IN_STRING:\n+                result.append(character);\n+                if (character.equals(\"\\\"\")) {", "originalCommit": "32ec4618b6ca983ffde38613810c8617a80db26b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc1NzU1NQ==", "url": "https://github.com/vaadin/flow/pull/7320#discussion_r364757555", "bodyText": "Move the \"*\" string literal on the left side of this string comparison.", "author": "vaadin-bot", "createdAt": "2020-01-09T14:10:38Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/StringUtil.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.internal;\n+\n+import java.util.Scanner;\n+\n+/**\n+ * Utility class for special string handling.\n+ */\n+public final class StringUtil {\n+\n+    /**\n+     * Comment parser state enumeration.\n+     */\n+    private enum State {\n+        NORMAL, IN_LINE_COMMENT, IN_BLOCK_COMMENT, IN_STRING\n+    }\n+\n+    /**\n+     * Removes comments (block comments and line comments) from the JS code.\n+     *\n+     * @return the code with removed comments\n+     */\n+    public final static String removeComments(String code) {\n+        State state = State.NORMAL;\n+        StringBuilder result = new StringBuilder();\n+        Scanner scanner = new Scanner(code);\n+        scanner.useDelimiter(\"\");\n+        while (scanner.hasNext()) {\n+            String character = scanner.next();\n+            switch (state) {\n+            case NORMAL:\n+                if (character.equals(\"/\") && scanner.hasNext()) {\n+                    String nextCharacter = scanner.next();\n+                    if (nextCharacter.equals(\"/\")) {\n+                        state = State.IN_LINE_COMMENT;\n+                    } else if (nextCharacter.equals(\"*\")) {", "originalCommit": "32ec4618b6ca983ffde38613810c8617a80db26b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc1NzU2Ng==", "url": "https://github.com/vaadin/flow/pull/7320#discussion_r364757566", "bodyText": "Move the \"\\\" string literal on the left side of this string comparison.", "author": "vaadin-bot", "createdAt": "2020-01-09T14:10:40Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/StringUtil.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.internal;\n+\n+import java.util.Scanner;\n+\n+/**\n+ * Utility class for special string handling.\n+ */\n+public final class StringUtil {\n+\n+    /**\n+     * Comment parser state enumeration.\n+     */\n+    private enum State {\n+        NORMAL, IN_LINE_COMMENT, IN_BLOCK_COMMENT, IN_STRING\n+    }\n+\n+    /**\n+     * Removes comments (block comments and line comments) from the JS code.\n+     *\n+     * @return the code with removed comments\n+     */\n+    public final static String removeComments(String code) {\n+        State state = State.NORMAL;\n+        StringBuilder result = new StringBuilder();\n+        Scanner scanner = new Scanner(code);\n+        scanner.useDelimiter(\"\");\n+        while (scanner.hasNext()) {\n+            String character = scanner.next();\n+            switch (state) {\n+            case NORMAL:\n+                if (character.equals(\"/\") && scanner.hasNext()) {\n+                    String nextCharacter = scanner.next();\n+                    if (nextCharacter.equals(\"/\")) {\n+                        state = State.IN_LINE_COMMENT;\n+                    } else if (nextCharacter.equals(\"*\")) {\n+                        state = State.IN_BLOCK_COMMENT;\n+                    } else {\n+                        result.append(character).append(nextCharacter);\n+                    }\n+                } else {\n+                    result.append(character);\n+                    if (character.equals(\"\\\"\")) {\n+                        state = State.IN_STRING;\n+                    }\n+                }\n+                break;\n+            case IN_STRING:\n+                result.append(character);\n+                if (character.equals(\"\\\"\")) {\n+                    state = State.NORMAL;\n+                } else if (character.equals(\"\\\\\") && scanner.hasNext()) {", "originalCommit": "32ec4618b6ca983ffde38613810c8617a80db26b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc1NzU3OQ==", "url": "https://github.com/vaadin/flow/pull/7320#discussion_r364757579", "bodyText": "Reorder the modifiers to comply with the Java Language Specification. \n Refactor this method to reduce its Cognitive Complexity from 30 to the 15 allowed. \n \"final\" is redundant in this context.", "author": "vaadin-bot", "createdAt": "2020-01-09T14:10:42Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/StringUtil.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.internal;\n+\n+import java.util.Scanner;\n+\n+/**\n+ * Utility class for special string handling.\n+ */\n+public final class StringUtil {\n+\n+    /**\n+     * Comment parser state enumeration.\n+     */\n+    private enum State {\n+        NORMAL, IN_LINE_COMMENT, IN_BLOCK_COMMENT, IN_STRING\n+    }\n+\n+    /**\n+     * Removes comments (block comments and line comments) from the JS code.\n+     *\n+     * @return the code with removed comments\n+     */\n+    public final static String removeComments(String code) {", "originalCommit": "32ec4618b6ca983ffde38613810c8617a80db26b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc1NzU5Mw==", "url": "https://github.com/vaadin/flow/pull/7320#discussion_r364757593", "bodyText": "Move the \"\\n\" string literal on the left side of this string comparison.", "author": "vaadin-bot", "createdAt": "2020-01-09T14:10:44Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/StringUtil.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.internal;\n+\n+import java.util.Scanner;\n+\n+/**\n+ * Utility class for special string handling.\n+ */\n+public final class StringUtil {\n+\n+    /**\n+     * Comment parser state enumeration.\n+     */\n+    private enum State {\n+        NORMAL, IN_LINE_COMMENT, IN_BLOCK_COMMENT, IN_STRING\n+    }\n+\n+    /**\n+     * Removes comments (block comments and line comments) from the JS code.\n+     *\n+     * @return the code with removed comments\n+     */\n+    public final static String removeComments(String code) {\n+        State state = State.NORMAL;\n+        StringBuilder result = new StringBuilder();\n+        Scanner scanner = new Scanner(code);\n+        scanner.useDelimiter(\"\");\n+        while (scanner.hasNext()) {\n+            String character = scanner.next();\n+            switch (state) {\n+            case NORMAL:\n+                if (character.equals(\"/\") && scanner.hasNext()) {\n+                    String nextCharacter = scanner.next();\n+                    if (nextCharacter.equals(\"/\")) {\n+                        state = State.IN_LINE_COMMENT;\n+                    } else if (nextCharacter.equals(\"*\")) {\n+                        state = State.IN_BLOCK_COMMENT;\n+                    } else {\n+                        result.append(character).append(nextCharacter);\n+                    }\n+                } else {\n+                    result.append(character);\n+                    if (character.equals(\"\\\"\")) {\n+                        state = State.IN_STRING;\n+                    }\n+                }\n+                break;\n+            case IN_STRING:\n+                result.append(character);\n+                if (character.equals(\"\\\"\")) {\n+                    state = State.NORMAL;\n+                } else if (character.equals(\"\\\\\") && scanner.hasNext()) {\n+                    result.append(scanner.next());\n+                }\n+                break;\n+            case IN_LINE_COMMENT:\n+                if (character.equals(\"\\n\")) {", "originalCommit": "32ec4618b6ca983ffde38613810c8617a80db26b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc1NzYwMg==", "url": "https://github.com/vaadin/flow/pull/7320#discussion_r364757602", "bodyText": "Refactor this code to not nest more than 3 if/for/while/switch/try statements. \n Move the \"\"\" string literal on the left side of this string comparison.", "author": "vaadin-bot", "createdAt": "2020-01-09T14:10:45Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/StringUtil.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.internal;\n+\n+import java.util.Scanner;\n+\n+/**\n+ * Utility class for special string handling.\n+ */\n+public final class StringUtil {\n+\n+    /**\n+     * Comment parser state enumeration.\n+     */\n+    private enum State {\n+        NORMAL, IN_LINE_COMMENT, IN_BLOCK_COMMENT, IN_STRING\n+    }\n+\n+    /**\n+     * Removes comments (block comments and line comments) from the JS code.\n+     *\n+     * @return the code with removed comments\n+     */\n+    public final static String removeComments(String code) {\n+        State state = State.NORMAL;\n+        StringBuilder result = new StringBuilder();\n+        Scanner scanner = new Scanner(code);\n+        scanner.useDelimiter(\"\");\n+        while (scanner.hasNext()) {\n+            String character = scanner.next();\n+            switch (state) {\n+            case NORMAL:\n+                if (character.equals(\"/\") && scanner.hasNext()) {\n+                    String nextCharacter = scanner.next();\n+                    if (nextCharacter.equals(\"/\")) {\n+                        state = State.IN_LINE_COMMENT;\n+                    } else if (nextCharacter.equals(\"*\")) {\n+                        state = State.IN_BLOCK_COMMENT;\n+                    } else {\n+                        result.append(character).append(nextCharacter);\n+                    }\n+                } else {\n+                    result.append(character);\n+                    if (character.equals(\"\\\"\")) {", "originalCommit": "32ec4618b6ca983ffde38613810c8617a80db26b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc1NzYxMA==", "url": "https://github.com/vaadin/flow/pull/7320#discussion_r364757610", "bodyText": "Reduce this switch case number of lines from 16 to at most 5, for example by extracting code into methods.", "author": "vaadin-bot", "createdAt": "2020-01-09T14:10:46Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/StringUtil.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.internal;\n+\n+import java.util.Scanner;\n+\n+/**\n+ * Utility class for special string handling.\n+ */\n+public final class StringUtil {\n+\n+    /**\n+     * Comment parser state enumeration.\n+     */\n+    private enum State {\n+        NORMAL, IN_LINE_COMMENT, IN_BLOCK_COMMENT, IN_STRING\n+    }\n+\n+    /**\n+     * Removes comments (block comments and line comments) from the JS code.\n+     *\n+     * @return the code with removed comments\n+     */\n+    public final static String removeComments(String code) {\n+        State state = State.NORMAL;\n+        StringBuilder result = new StringBuilder();\n+        Scanner scanner = new Scanner(code);\n+        scanner.useDelimiter(\"\");\n+        while (scanner.hasNext()) {\n+            String character = scanner.next();\n+            switch (state) {\n+            case NORMAL:", "originalCommit": "32ec4618b6ca983ffde38613810c8617a80db26b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc1NzYxNQ==", "url": "https://github.com/vaadin/flow/pull/7320#discussion_r364757615", "bodyText": "Move the \"*\" string literal on the left side of this string comparison.", "author": "vaadin-bot", "createdAt": "2020-01-09T14:10:47Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/StringUtil.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.internal;\n+\n+import java.util.Scanner;\n+\n+/**\n+ * Utility class for special string handling.\n+ */\n+public final class StringUtil {\n+\n+    /**\n+     * Comment parser state enumeration.\n+     */\n+    private enum State {\n+        NORMAL, IN_LINE_COMMENT, IN_BLOCK_COMMENT, IN_STRING\n+    }\n+\n+    /**\n+     * Removes comments (block comments and line comments) from the JS code.\n+     *\n+     * @return the code with removed comments\n+     */\n+    public final static String removeComments(String code) {\n+        State state = State.NORMAL;\n+        StringBuilder result = new StringBuilder();\n+        Scanner scanner = new Scanner(code);\n+        scanner.useDelimiter(\"\");\n+        while (scanner.hasNext()) {\n+            String character = scanner.next();\n+            switch (state) {\n+            case NORMAL:\n+                if (character.equals(\"/\") && scanner.hasNext()) {\n+                    String nextCharacter = scanner.next();\n+                    if (nextCharacter.equals(\"/\")) {\n+                        state = State.IN_LINE_COMMENT;\n+                    } else if (nextCharacter.equals(\"*\")) {\n+                        state = State.IN_BLOCK_COMMENT;\n+                    } else {\n+                        result.append(character).append(nextCharacter);\n+                    }\n+                } else {\n+                    result.append(character);\n+                    if (character.equals(\"\\\"\")) {\n+                        state = State.IN_STRING;\n+                    }\n+                }\n+                break;\n+            case IN_STRING:\n+                result.append(character);\n+                if (character.equals(\"\\\"\")) {\n+                    state = State.NORMAL;\n+                } else if (character.equals(\"\\\\\") && scanner.hasNext()) {\n+                    result.append(scanner.next());\n+                }\n+                break;\n+            case IN_LINE_COMMENT:\n+                if (character.equals(\"\\n\")) {\n+                    result.append(character);\n+                    state = State.NORMAL;\n+                }\n+                break;\n+            case IN_BLOCK_COMMENT:\n+                if (character.equals(\"*\") && scanner.hasNext() && scanner", "originalCommit": "32ec4618b6ca983ffde38613810c8617a80db26b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc1NzYyNg==", "url": "https://github.com/vaadin/flow/pull/7320#discussion_r364757626", "bodyText": "Reduce this switch case number of lines from 7 to at most 5, for example by extracting code into methods.", "author": "vaadin-bot", "createdAt": "2020-01-09T14:10:48Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/StringUtil.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.internal;\n+\n+import java.util.Scanner;\n+\n+/**\n+ * Utility class for special string handling.\n+ */\n+public final class StringUtil {\n+\n+    /**\n+     * Comment parser state enumeration.\n+     */\n+    private enum State {\n+        NORMAL, IN_LINE_COMMENT, IN_BLOCK_COMMENT, IN_STRING\n+    }\n+\n+    /**\n+     * Removes comments (block comments and line comments) from the JS code.\n+     *\n+     * @return the code with removed comments\n+     */\n+    public final static String removeComments(String code) {\n+        State state = State.NORMAL;\n+        StringBuilder result = new StringBuilder();\n+        Scanner scanner = new Scanner(code);\n+        scanner.useDelimiter(\"\");\n+        while (scanner.hasNext()) {\n+            String character = scanner.next();\n+            switch (state) {\n+            case NORMAL:\n+                if (character.equals(\"/\") && scanner.hasNext()) {\n+                    String nextCharacter = scanner.next();\n+                    if (nextCharacter.equals(\"/\")) {\n+                        state = State.IN_LINE_COMMENT;\n+                    } else if (nextCharacter.equals(\"*\")) {\n+                        state = State.IN_BLOCK_COMMENT;\n+                    } else {\n+                        result.append(character).append(nextCharacter);\n+                    }\n+                } else {\n+                    result.append(character);\n+                    if (character.equals(\"\\\"\")) {\n+                        state = State.IN_STRING;\n+                    }\n+                }\n+                break;\n+            case IN_STRING:", "originalCommit": "32ec4618b6ca983ffde38613810c8617a80db26b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc1NzYzNQ==", "url": "https://github.com/vaadin/flow/pull/7320#discussion_r364757635", "bodyText": "Move the \"/\" string literal on the left side of this string comparison.", "author": "vaadin-bot", "createdAt": "2020-01-09T14:10:49Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/StringUtil.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.internal;\n+\n+import java.util.Scanner;\n+\n+/**\n+ * Utility class for special string handling.\n+ */\n+public final class StringUtil {\n+\n+    /**\n+     * Comment parser state enumeration.\n+     */\n+    private enum State {\n+        NORMAL, IN_LINE_COMMENT, IN_BLOCK_COMMENT, IN_STRING\n+    }\n+\n+    /**\n+     * Removes comments (block comments and line comments) from the JS code.\n+     *\n+     * @return the code with removed comments\n+     */\n+    public final static String removeComments(String code) {\n+        State state = State.NORMAL;\n+        StringBuilder result = new StringBuilder();\n+        Scanner scanner = new Scanner(code);\n+        scanner.useDelimiter(\"\");\n+        while (scanner.hasNext()) {\n+            String character = scanner.next();\n+            switch (state) {\n+            case NORMAL:\n+                if (character.equals(\"/\") && scanner.hasNext()) {", "originalCommit": "32ec4618b6ca983ffde38613810c8617a80db26b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc1NzYzOA==", "url": "https://github.com/vaadin/flow/pull/7320#discussion_r364757638", "bodyText": "Move the \"/\" string literal on the left side of this string comparison.", "author": "vaadin-bot", "createdAt": "2020-01-09T14:10:50Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/StringUtil.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.internal;\n+\n+import java.util.Scanner;\n+\n+/**\n+ * Utility class for special string handling.\n+ */\n+public final class StringUtil {\n+\n+    /**\n+     * Comment parser state enumeration.\n+     */\n+    private enum State {\n+        NORMAL, IN_LINE_COMMENT, IN_BLOCK_COMMENT, IN_STRING\n+    }\n+\n+    /**\n+     * Removes comments (block comments and line comments) from the JS code.\n+     *\n+     * @return the code with removed comments\n+     */\n+    public final static String removeComments(String code) {\n+        State state = State.NORMAL;\n+        StringBuilder result = new StringBuilder();\n+        Scanner scanner = new Scanner(code);\n+        scanner.useDelimiter(\"\");\n+        while (scanner.hasNext()) {\n+            String character = scanner.next();\n+            switch (state) {\n+            case NORMAL:\n+                if (character.equals(\"/\") && scanner.hasNext()) {\n+                    String nextCharacter = scanner.next();\n+                    if (nextCharacter.equals(\"/\")) {\n+                        state = State.IN_LINE_COMMENT;\n+                    } else if (nextCharacter.equals(\"*\")) {\n+                        state = State.IN_BLOCK_COMMENT;\n+                    } else {\n+                        result.append(character).append(nextCharacter);\n+                    }\n+                } else {\n+                    result.append(character);\n+                    if (character.equals(\"\\\"\")) {\n+                        state = State.IN_STRING;\n+                    }\n+                }\n+                break;\n+            case IN_STRING:\n+                result.append(character);\n+                if (character.equals(\"\\\"\")) {\n+                    state = State.NORMAL;\n+                } else if (character.equals(\"\\\\\") && scanner.hasNext()) {\n+                    result.append(scanner.next());\n+                }\n+                break;\n+            case IN_LINE_COMMENT:\n+                if (character.equals(\"\\n\")) {\n+                    result.append(character);\n+                    state = State.NORMAL;\n+                }\n+                break;\n+            case IN_BLOCK_COMMENT:\n+                if (character.equals(\"*\") && scanner.hasNext() && scanner\n+                        .next().equals(\"/\")) {", "originalCommit": "32ec4618b6ca983ffde38613810c8617a80db26b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}