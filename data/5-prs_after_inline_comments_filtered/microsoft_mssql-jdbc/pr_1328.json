{"pr_number": 1328, "pr_title": "Updates for java 8 compliance", "pr_createdAt": "2020-05-05T05:29:50Z", "pr_url": "https://github.com/microsoft/mssql-jdbc/pull/1328", "timeline": [{"oid": "c97b863c95385bdcd1afc897ef39cbebaf495578", "url": "https://github.com/microsoft/mssql-jdbc/commit/c97b863c95385bdcd1afc897ef39cbebaf495578", "message": "Fix AEv2 tests exclude for reqExternalSetup and cleanup (#1247)", "committedDate": "2020-02-05T19:03:48Z", "type": "commit"}, {"oid": "54b5a194e5d46552419c86e0d1f8c800f42d3de8", "url": "https://github.com/microsoft/mssql-jdbc/commit/54b5a194e5d46552419c86e0d1f8c800f42d3de8", "message": "Fix | Add null check for getObject() with LocalTime and LocalDate (#1250)", "committedDate": "2020-02-08T00:19:05Z", "type": "commit"}, {"oid": "672b7d67caae75250c53f82a760e8d3880e62a37", "url": "https://github.com/microsoft/mssql-jdbc/commit/672b7d67caae75250c53f82a760e8d3880e62a37", "message": "added all AKV tests to use reqExternalSetup tag so they will be skipped by default (#1254)\n\n* skip AKV test properly\r\n\r\n* removed enclave properties string to failed errors as enclave tests could be skipped", "committedDate": "2020-02-10T19:04:22Z", "type": "commit"}, {"oid": "3c3331b7b0ff1b27b1e80271bf9ffdc6aae7be79", "url": "https://github.com/microsoft/mssql-jdbc/commit/3c3331b7b0ff1b27b1e80271bf9ffdc6aae7be79", "message": "Merge remote-tracking branch 'upstream/dev' into dev", "committedDate": "2020-03-25T06:21:47Z", "type": "commit"}, {"oid": "e2c5640370daa89c0d8c1559b5791e99656f78c8", "url": "https://github.com/microsoft/mssql-jdbc/commit/e2c5640370daa89c0d8c1559b5791e99656f78c8", "message": "Merge remote-tracking branch 'upstream/dev' into dev", "committedDate": "2020-03-26T06:10:08Z", "type": "commit"}, {"oid": "aad696640378b75f3cb8cb24cc2fa299358db9ac", "url": "https://github.com/microsoft/mssql-jdbc/commit/aad696640378b75f3cb8cb24cc2fa299358db9ac", "message": "Merge remote-tracking branch 'upstream/dev' into dev", "committedDate": "2020-03-28T03:18:02Z", "type": "commit"}, {"oid": "92bf04c2787c3b2a704f641f50cb4a83193f1d6d", "url": "https://github.com/microsoft/mssql-jdbc/commit/92bf04c2787c3b2a704f641f50cb4a83193f1d6d", "message": "Merge remote-tracking branch 'upstream/dev' into dev", "committedDate": "2020-03-31T01:58:20Z", "type": "commit"}, {"oid": "3ba5ab72008501e23f43dbcbcc333775320ddafa", "url": "https://github.com/microsoft/mssql-jdbc/commit/3ba5ab72008501e23f43dbcbcc333775320ddafa", "message": "Merge remote-tracking branch 'upstream/dev' into dev", "committedDate": "2020-04-04T05:47:37Z", "type": "commit"}, {"oid": "d20823deffea162b2b17b079cc291f91269558aa", "url": "https://github.com/microsoft/mssql-jdbc/commit/d20823deffea162b2b17b079cc291f91269558aa", "message": "Merge remote-tracking branch 'upstream/dev' into dev", "committedDate": "2020-04-07T00:45:05Z", "type": "commit"}, {"oid": "4cc959f7e76eedbf49e30e5b92de43c86d7eb803", "url": "https://github.com/microsoft/mssql-jdbc/commit/4cc959f7e76eedbf49e30e5b92de43c86d7eb803", "message": "Merge remote-tracking branch 'upstream/dev' into dev", "committedDate": "2020-04-29T02:59:23Z", "type": "commit"}, {"oid": "02610f71746fb96f3772232a01bbed98eb49b21a", "url": "https://github.com/microsoft/mssql-jdbc/commit/02610f71746fb96f3772232a01bbed98eb49b21a", "message": "added jre8test profile", "committedDate": "2020-04-30T20:15:49Z", "type": "commit"}, {"oid": "a45cf1da032e67a17c9101e9480b64f45f3447ea", "url": "https://github.com/microsoft/mssql-jdbc/commit/a45cf1da032e67a17c9101e9480b64f45f3447ea", "message": "java 8 compliance", "committedDate": "2020-05-01T06:10:35Z", "type": "commit"}, {"oid": "3c4180684bfb22da8cb259bab3ceaf3e5d7634bb", "url": "https://github.com/microsoft/mssql-jdbc/commit/3c4180684bfb22da8cb259bab3ceaf3e5d7634bb", "message": "java 8 compliance", "committedDate": "2020-05-01T07:06:09Z", "type": "commit"}, {"oid": "e6cb40210b7c13b5bdbf8413ead088a90e683a9b", "url": "https://github.com/microsoft/mssql-jdbc/commit/e6cb40210b7c13b5bdbf8413ead088a90e683a9b", "message": "more java 8 changes", "committedDate": "2020-05-01T22:22:42Z", "type": "commit"}, {"oid": "2e5cf28ec3fd6a812e3366f4e8fdfd72bc6d3db4", "url": "https://github.com/microsoft/mssql-jdbc/commit/2e5cf28ec3fd6a812e3366f4e8fdfd72bc6d3db4", "message": "more java 8 fixes", "committedDate": "2020-05-01T22:38:43Z", "type": "commit"}, {"oid": "34890a1a4a16bb4d4eebe8d1b6bf35c0b24c16d6", "url": "https://github.com/microsoft/mssql-jdbc/commit/34890a1a4a16bb4d4eebe8d1b6bf35c0b24c16d6", "message": "format", "committedDate": "2020-05-04T19:17:51Z", "type": "commit"}, {"oid": "827a6e87df56453d347ec05dafc42fd9247e65ce", "url": "https://github.com/microsoft/mssql-jdbc/commit/827a6e87df56453d347ec05dafc42fd9247e65ce", "message": "added java 9 parseInt to Util", "committedDate": "2020-05-04T22:01:03Z", "type": "commit"}, {"oid": "eb59f431440634bcfd8f522701f69380bde4bce7", "url": "https://github.com/microsoft/mssql-jdbc/commit/eb59f431440634bcfd8f522701f69380bde4bce7", "message": "java 8 compliance", "committedDate": "2020-05-06T06:14:20Z", "type": "commit"}, {"oid": "cf51e9ad0d5227a3550a54368d136fce9f1aa0b6", "url": "https://github.com/microsoft/mssql-jdbc/commit/cf51e9ad0d5227a3550a54368d136fce9f1aa0b6", "message": "java 8 compliance", "committedDate": "2020-05-06T06:48:34Z", "type": "commit"}, {"oid": "5f42e41438ee74b7efaa51c3e4c6b96458ebb7d0", "url": "https://github.com/microsoft/mssql-jdbc/commit/5f42e41438ee74b7efaa51c3e4c6b96458ebb7d0", "message": "fixed test for linux server with java 8", "committedDate": "2020-05-06T18:31:44Z", "type": "commit"}, {"oid": "a8951e2b07d40a9c3e1a964705209e4d6eacff1a", "url": "https://github.com/microsoft/mssql-jdbc/commit/a8951e2b07d40a9c3e1a964705209e4d6eacff1a", "message": "fixed formatting", "committedDate": "2020-05-14T20:42:32Z", "type": "commit"}, {"oid": "bcb90b0bc1d2d173dde22984dbe5208c237aa6cb", "url": "https://github.com/microsoft/mssql-jdbc/commit/bcb90b0bc1d2d173dde22984dbe5208c237aa6cb", "message": "fixed formatting", "committedDate": "2020-05-14T20:45:42Z", "type": "commit"}, {"oid": "447cfdc2794862f0d30c68ca2e4e02c93f15db28", "url": "https://github.com/microsoft/mssql-jdbc/commit/447cfdc2794862f0d30c68ca2e4e02c93f15db28", "message": "fixed formatting", "committedDate": "2020-05-14T20:49:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk2MTU3MA==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1328#discussion_r428961570", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            year = Util.parseInt(s, 0, firstDash, 10);\n          \n          \n            \n                            year = Integer.parseInt(s.subSequence(0, firstDash).toString());", "author": "ulvii", "createdAt": "2020-05-21T23:06:49Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/DDC.java", "diffHunk": "@@ -614,9 +614,9 @@ private static LocalDateTime parseStringIntoLDT(String s) {\n         if (firstDash > 0 && secondDash > 0 && secondDash < dividingSpace - 1) {\n             if (firstDash == YEAR_LENGTH && (secondDash - firstDash > 1 && secondDash - firstDash <= MONTH_LENGTH + 1)\n                     && (dividingSpace - secondDash > 1 && dividingSpace - secondDash <= DAY_LENGTH + 1)) {\n-                year = Integer.parseInt(s, 0, firstDash, 10);\n-                month = Integer.parseInt(s, firstDash + 1, secondDash, 10);\n-                day = Integer.parseInt(s, secondDash + 1, dividingSpace, 10);\n+                year = Util.parseInt(s, 0, firstDash, 10);", "originalCommit": "447cfdc2794862f0d30c68ca2e4e02c93f15db28", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk2MTY5NQ==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1328#discussion_r428961695", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            month = Util.parseInt(s, firstDash + 1, secondDash, 10);\n          \n          \n            \n                            month = Integer.parseInt(s.subSequence(firstDash + 1, secondDash).toString());", "author": "ulvii", "createdAt": "2020-05-21T23:07:17Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/DDC.java", "diffHunk": "@@ -614,9 +614,9 @@ private static LocalDateTime parseStringIntoLDT(String s) {\n         if (firstDash > 0 && secondDash > 0 && secondDash < dividingSpace - 1) {\n             if (firstDash == YEAR_LENGTH && (secondDash - firstDash > 1 && secondDash - firstDash <= MONTH_LENGTH + 1)\n                     && (dividingSpace - secondDash > 1 && dividingSpace - secondDash <= DAY_LENGTH + 1)) {\n-                year = Integer.parseInt(s, 0, firstDash, 10);\n-                month = Integer.parseInt(s, firstDash + 1, secondDash, 10);\n-                day = Integer.parseInt(s, secondDash + 1, dividingSpace, 10);\n+                year = Util.parseInt(s, 0, firstDash, 10);\n+                month = Util.parseInt(s, firstDash + 1, secondDash, 10);", "originalCommit": "447cfdc2794862f0d30c68ca2e4e02c93f15db28", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk2MTkxNg==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1328#discussion_r428961916", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            day = Util.parseInt(s, secondDash + 1, dividingSpace, 10);\n          \n          \n            \n                            day = Integer.parseInt(s.subSequence(secondDash + 1, dividingSpace).toString());", "author": "ulvii", "createdAt": "2020-05-21T23:08:09Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/DDC.java", "diffHunk": "@@ -614,9 +614,9 @@ private static LocalDateTime parseStringIntoLDT(String s) {\n         if (firstDash > 0 && secondDash > 0 && secondDash < dividingSpace - 1) {\n             if (firstDash == YEAR_LENGTH && (secondDash - firstDash > 1 && secondDash - firstDash <= MONTH_LENGTH + 1)\n                     && (dividingSpace - secondDash > 1 && dividingSpace - secondDash <= DAY_LENGTH + 1)) {\n-                year = Integer.parseInt(s, 0, firstDash, 10);\n-                month = Integer.parseInt(s, firstDash + 1, secondDash, 10);\n-                day = Integer.parseInt(s, secondDash + 1, dividingSpace, 10);\n+                year = Util.parseInt(s, 0, firstDash, 10);\n+                month = Util.parseInt(s, firstDash + 1, secondDash, 10);\n+                day = Util.parseInt(s, secondDash + 1, dividingSpace, 10);", "originalCommit": "447cfdc2794862f0d30c68ca2e4e02c93f15db28", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk2Mjk3MQ==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1328#discussion_r428962971", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        hour = Util.parseInt(s, dividingSpace + 1, firstColon, 10);\n          \n          \n            \n                        hour = Integer.parseInt(s.subSequence(dividingSpace + 1, firstColon).toString());", "author": "ulvii", "createdAt": "2020-05-21T23:11:37Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/DDC.java", "diffHunk": "@@ -630,16 +630,16 @@ private static LocalDateTime parseStringIntoLDT(String s) {\n         // Convert the time; default missing nanos\n         int len = s.length();\n         if (firstColon > 0 && secondColon > 0 && secondColon < len - 1) {\n-            hour = Integer.parseInt(s, dividingSpace + 1, firstColon, 10);\n-            minute = Integer.parseInt(s, firstColon + 1, secondColon, 10);\n+            hour = Util.parseInt(s, dividingSpace + 1, firstColon, 10);", "originalCommit": "447cfdc2794862f0d30c68ca2e4e02c93f15db28", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk2MzE2MQ==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1328#discussion_r428963161", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        minute = Util.parseInt(s, firstColon + 1, secondColon, 10);\n          \n          \n            \n                        minute = Integer.parseInt(s.subSequence(firstColon + 1, secondColon).toString());", "author": "ulvii", "createdAt": "2020-05-21T23:12:15Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/DDC.java", "diffHunk": "@@ -630,16 +630,16 @@ private static LocalDateTime parseStringIntoLDT(String s) {\n         // Convert the time; default missing nanos\n         int len = s.length();\n         if (firstColon > 0 && secondColon > 0 && secondColon < len - 1) {\n-            hour = Integer.parseInt(s, dividingSpace + 1, firstColon, 10);\n-            minute = Integer.parseInt(s, firstColon + 1, secondColon, 10);\n+            hour = Util.parseInt(s, dividingSpace + 1, firstColon, 10);\n+            minute = Util.parseInt(s, firstColon + 1, secondColon, 10);", "originalCommit": "447cfdc2794862f0d30c68ca2e4e02c93f15db28", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk2MzM1NA==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1328#discussion_r428963354", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            second = Util.parseInt(s, secondColon + 1, period, 10);\n          \n          \n            \n                            second = Integer.parseInt(s.subSequence(secondColon + 1, period).toString());", "author": "ulvii", "createdAt": "2020-05-21T23:12:49Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/DDC.java", "diffHunk": "@@ -630,16 +630,16 @@ private static LocalDateTime parseStringIntoLDT(String s) {\n         // Convert the time; default missing nanos\n         int len = s.length();\n         if (firstColon > 0 && secondColon > 0 && secondColon < len - 1) {\n-            hour = Integer.parseInt(s, dividingSpace + 1, firstColon, 10);\n-            minute = Integer.parseInt(s, firstColon + 1, secondColon, 10);\n+            hour = Util.parseInt(s, dividingSpace + 1, firstColon, 10);\n+            minute = Util.parseInt(s, firstColon + 1, secondColon, 10);\n             if (period > 0 && period < len - 1) {\n-                second = Integer.parseInt(s, secondColon + 1, period, 10);\n+                second = Util.parseInt(s, secondColon + 1, period, 10);", "originalCommit": "447cfdc2794862f0d30c68ca2e4e02c93f15db28", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk2MzYyNA==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1328#discussion_r428963624", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            int tmpNanos = Util.parseInt(s, period + 1, len, 10);\n          \n          \n            \n                            int tmpNanos = Integer.parseInt(s.subSequence(period + 1, len).toString());", "author": "ulvii", "createdAt": "2020-05-21T23:13:51Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/DDC.java", "diffHunk": "@@ -630,16 +630,16 @@ private static LocalDateTime parseStringIntoLDT(String s) {\n         // Convert the time; default missing nanos\n         int len = s.length();\n         if (firstColon > 0 && secondColon > 0 && secondColon < len - 1) {\n-            hour = Integer.parseInt(s, dividingSpace + 1, firstColon, 10);\n-            minute = Integer.parseInt(s, firstColon + 1, secondColon, 10);\n+            hour = Util.parseInt(s, dividingSpace + 1, firstColon, 10);\n+            minute = Util.parseInt(s, firstColon + 1, secondColon, 10);\n             if (period > 0 && period < len - 1) {\n-                second = Integer.parseInt(s, secondColon + 1, period, 10);\n+                second = Util.parseInt(s, secondColon + 1, period, 10);\n                 int nanoPrecision = len - (period + 1);\n                 if (nanoPrecision > 9)\n                     throw new java.lang.IllegalArgumentException(formatError);\n                 if (!Character.isDigit(s.charAt(period + 1)))\n                     throw new java.lang.IllegalArgumentException(formatError);\n-                int tmpNanos = Integer.parseInt(s, period + 1, len, 10);\n+                int tmpNanos = Util.parseInt(s, period + 1, len, 10);", "originalCommit": "447cfdc2794862f0d30c68ca2e4e02c93f15db28", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk2MzczMQ==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1328#discussion_r428963731", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            second = Util.parseInt(s, secondColon + 1, len, 10);\n          \n          \n            \n                            second = Integer.parseInt(s.subSequence(secondColon + 1, len).toString());", "author": "ulvii", "createdAt": "2020-05-21T23:14:19Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/DDC.java", "diffHunk": "@@ -648,7 +648,7 @@ private static LocalDateTime parseStringIntoLDT(String s) {\n             } else if (period > 0) {\n                 throw new java.lang.IllegalArgumentException(formatError);\n             } else {\n-                second = Integer.parseInt(s, secondColon + 1, len, 10);\n+                second = Util.parseInt(s, secondColon + 1, len, 10);", "originalCommit": "447cfdc2794862f0d30c68ca2e4e02c93f15db28", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk2Mzg1Nw==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1328#discussion_r428963857", "bodyText": "Once you commit the suggestions above, you can delete this method.", "author": "ulvii", "createdAt": "2020-05-21T23:14:47Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/Util.java", "diffHunk": "@@ -1032,6 +1033,90 @@ static String convertInputStreamToString(java.io.InputStream is) throws IOExcept\n         }\n         return result.toString();\n     }\n+", "originalCommit": "447cfdc2794862f0d30c68ca2e4e02c93f15db28", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c4db1b68ca1b9ac63c2c4b7ed2b9dc9142d702aa", "url": "https://github.com/microsoft/mssql-jdbc/commit/c4db1b68ca1b9ac63c2c4b7ed2b9dc9142d702aa", "message": "Update src/main/java/com/microsoft/sqlserver/jdbc/DDC.java\n\nCo-authored-by: ulvii <v-ulibra@microsoft.com>", "committedDate": "2020-05-22T05:50:43Z", "type": "commit"}, {"oid": "bac1596d209809d179020f09a89dd2d4ec0dd14f", "url": "https://github.com/microsoft/mssql-jdbc/commit/bac1596d209809d179020f09a89dd2d4ec0dd14f", "message": "Update src/main/java/com/microsoft/sqlserver/jdbc/DDC.java\n\nCo-authored-by: ulvii <v-ulibra@microsoft.com>", "committedDate": "2020-05-22T05:50:52Z", "type": "commit"}, {"oid": "5825e8967d31021d957b87af59ace70adfb0fce0", "url": "https://github.com/microsoft/mssql-jdbc/commit/5825e8967d31021d957b87af59ace70adfb0fce0", "message": "Update src/main/java/com/microsoft/sqlserver/jdbc/DDC.java\n\nCo-authored-by: ulvii <v-ulibra@microsoft.com>", "committedDate": "2020-05-22T05:50:59Z", "type": "commit"}, {"oid": "8e7efe2f8160f00c9ca4e70db3a5a63114ad98ef", "url": "https://github.com/microsoft/mssql-jdbc/commit/8e7efe2f8160f00c9ca4e70db3a5a63114ad98ef", "message": "Update src/main/java/com/microsoft/sqlserver/jdbc/DDC.java\n\nCo-authored-by: ulvii <v-ulibra@microsoft.com>", "committedDate": "2020-05-22T05:51:06Z", "type": "commit"}, {"oid": "c21ded8d8321818cc581d73f8338f0d643e3c68f", "url": "https://github.com/microsoft/mssql-jdbc/commit/c21ded8d8321818cc581d73f8338f0d643e3c68f", "message": "Update src/main/java/com/microsoft/sqlserver/jdbc/DDC.java\n\nCo-authored-by: ulvii <v-ulibra@microsoft.com>", "committedDate": "2020-05-22T05:51:15Z", "type": "commit"}, {"oid": "ad514128706bbfc86dd26eeea56a8c7135de5f88", "url": "https://github.com/microsoft/mssql-jdbc/commit/ad514128706bbfc86dd26eeea56a8c7135de5f88", "message": "Update src/main/java/com/microsoft/sqlserver/jdbc/DDC.java\n\nCo-authored-by: ulvii <v-ulibra@microsoft.com>", "committedDate": "2020-05-22T05:51:22Z", "type": "commit"}, {"oid": "b6e8f6eb2476d4d104c4921a675328554baa2402", "url": "https://github.com/microsoft/mssql-jdbc/commit/b6e8f6eb2476d4d104c4921a675328554baa2402", "message": "Update src/main/java/com/microsoft/sqlserver/jdbc/DDC.java\n\nCo-authored-by: ulvii <v-ulibra@microsoft.com>", "committedDate": "2020-05-22T05:51:31Z", "type": "commit"}, {"oid": "52b02c08dcaad6b4ad73afc24ead90d951af80a8", "url": "https://github.com/microsoft/mssql-jdbc/commit/52b02c08dcaad6b4ad73afc24ead90d951af80a8", "message": "Update src/main/java/com/microsoft/sqlserver/jdbc/DDC.java\n\nCo-authored-by: ulvii <v-ulibra@microsoft.com>", "committedDate": "2020-05-22T05:51:37Z", "type": "commit"}, {"oid": "14597f8fc701059a42a082b1b7a89ae868e5e13b", "url": "https://github.com/microsoft/mssql-jdbc/commit/14597f8fc701059a42a082b1b7a89ae868e5e13b", "message": "removed parseInt", "committedDate": "2020-05-22T05:55:04Z", "type": "commit"}, {"oid": "b31268e8e79574b6f4e8530a4355a622b6d7dfc8", "url": "https://github.com/microsoft/mssql-jdbc/commit/b31268e8e79574b6f4e8530a4355a622b6d7dfc8", "message": "removed parseInt", "committedDate": "2020-05-22T05:57:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1MDU0MQ==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1328#discussion_r429350541", "bodyText": "Is there a reason why we're using subSequence(int,int) here instead of subString(int,int)? It seems like subSequence actually uses subString underneath and the only major difference is that it returns a CharSequence instead of a String. Considering it seems we want a String anyways, lets just use subString(int,int).", "author": "rene-ye", "createdAt": "2020-05-22T16:45:50Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/DDC.java", "diffHunk": "@@ -614,9 +614,9 @@ private static LocalDateTime parseStringIntoLDT(String s) {\n         if (firstDash > 0 && secondDash > 0 && secondDash < dividingSpace - 1) {\n             if (firstDash == YEAR_LENGTH && (secondDash - firstDash > 1 && secondDash - firstDash <= MONTH_LENGTH + 1)\n                     && (dividingSpace - secondDash > 1 && dividingSpace - secondDash <= DAY_LENGTH + 1)) {\n-                year = Integer.parseInt(s, 0, firstDash, 10);\n-                month = Integer.parseInt(s, firstDash + 1, secondDash, 10);\n-                day = Integer.parseInt(s, secondDash + 1, dividingSpace, 10);\n+                year = Integer.parseInt(s.subSequence(0, firstDash).toString());", "originalCommit": "b31268e8e79574b6f4e8530a4355a622b6d7dfc8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1Mjc5OA==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1328#discussion_r429352798", "bodyText": "endpoints.trim().length() > 0 would be more performant than an isEmpty() check.", "author": "rene-ye", "createdAt": "2020-05-22T16:49:25Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerColumnEncryptionAzureKeyVaultProvider.java", "diffHunk": "@@ -667,7 +667,7 @@ public boolean verifyColumnMasterKeyMetadata(String masterKeyPath, boolean allow\n         boolean append = true;\n         if (null != mssqlJdbcProperties) {\n             String endpoints = mssqlJdbcProperties.getProperty(AKV_TRUSTED_ENDPOINTS_KEYWORD);\n-            if (null != endpoints && !endpoints.isBlank()) {\n+            if (null != endpoints && !endpoints.trim().isEmpty()) {", "originalCommit": "b31268e8e79574b6f4e8530a4355a622b6d7dfc8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQxODQ1Ng==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1328#discussion_r429418456", "bodyText": "more readable and minimal difference", "author": "lilgreenbird", "createdAt": "2020-05-22T19:22:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1Mjc5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2MDkzNw==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1328#discussion_r429360937", "bodyText": "Is this really necessary, the Oracle Java docs say rewind() is inherited from Buffer since Java SE7.", "author": "rene-ye", "createdAt": "2020-05-22T17:07:42Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerCertificateUtils.java", "diffHunk": "@@ -153,22 +154,23 @@ private static PrivateKey loadPrivateKeyFromPVK(String keyPath,\n         ByteBuffer buffer = ByteBuffer.allocate((int) f.length());\r\n         try (FileInputStream in = new FileInputStream(f)) {\r\n             in.getChannel().read(buffer);\r\n-            buffer.order(ByteOrder.LITTLE_ENDIAN).rewind();\r\n+            ((Buffer) buffer.order(ByteOrder.LITTLE_ENDIAN)).rewind();\r", "originalCommit": "b31268e8e79574b6f4e8530a4355a622b6d7dfc8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM4NDY2Mg==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1328#discussion_r429384662", "bodyText": "I'm curious about this one as well. Does Java try to use the Java 9 version of rewind from ByteBuffer without this cast?", "author": "peterbae", "createdAt": "2020-05-22T18:01:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2MDkzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQyMDc0Nw==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1328#discussion_r429420747", "bodyText": "yes that is the reason, ByteBuffer doesn't have this method so it will throw a NoSuchMethodError", "author": "lilgreenbird", "createdAt": "2020-05-22T19:28:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2MDkzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2MjgzMg==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1328#discussion_r429362832", "bodyText": "There should be an unclosed resource warning here, but since I wrote this test I can address it in the LOBs PR or a separate PR.", "author": "rene-ye", "createdAt": "2020-05-22T17:12:23Z", "path": "src/test/java/com/microsoft/sqlserver/jdbc/unit/lobs/LobsStreamingTest.java", "diffHunk": "@@ -145,8 +146,7 @@ public void testClobsVarcharASCII() throws SQLException, IOException {\n                         Clob c = rs.getClob(2);\r\n                         assertEquals(c.length(), lob_data.get(index).length());\r\n                         try (InputStream is = c.getAsciiStream();\r\n-                                Scanner s = new Scanner(is, java.nio.charset.StandardCharsets.US_ASCII)\r\n-                                        .useDelimiter(\"\\\\A\")) {\r\n+                                Scanner s = new Scanner(is, \"US-ASCII\").useDelimiter(\"\\\\A\")) {\r", "originalCommit": "b31268e8e79574b6f4e8530a4355a622b6d7dfc8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d041bdbda0efd134570236f1ff123589da76212b", "url": "https://github.com/microsoft/mssql-jdbc/commit/d041bdbda0efd134570236f1ff123589da76212b", "message": "Merge remote-tracking branch 'upstream/dev' into junit", "committedDate": "2020-05-22T18:12:27Z", "type": "commit"}, {"oid": "ed5a11d05b7077de639f8f0d98e39c9dad631335", "url": "https://github.com/microsoft/mssql-jdbc/commit/ed5a11d05b7077de639f8f0d98e39c9dad631335", "message": "review updates", "committedDate": "2020-05-22T19:21:13Z", "type": "commit"}]}