{"pr_number": 1317, "pr_title": "Fix | Use a StringBuilder for 'result'", "pr_createdAt": "2020-04-17T16:24:21Z", "pr_url": "https://github.com/microsoft/mssql-jdbc/pull/1317", "timeline": [{"oid": "cdd53ffb02697641fc768f0515e5e020d129e384", "url": "https://github.com/microsoft/mssql-jdbc/commit/cdd53ffb02697641fc768f0515e5e020d129e384", "message": "change to stringbuilder", "committedDate": "2020-04-17T16:23:22Z", "type": "commit"}, {"oid": "f8e32471968abcd799ee5305179e845105bf4920", "url": "https://github.com/microsoft/mssql-jdbc/commit/f8e32471968abcd799ee5305179e845105bf4920", "message": "fix?", "committedDate": "2020-04-30T16:24:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NTAxNA==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1317#discussion_r418675014", "bodyText": "Why are these else cases handled differently? I think these should also be replaced by result.append(ch);?", "author": "peterbae", "createdAt": "2020-05-01T18:31:01Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/Util.java", "diffHunk": "@@ -370,7 +357,7 @@ else if (ch == ':')\n                         }\n                         // same state\n                     } else {\n-                        builder = new StringBuilder();\n+                        StringBuilder builder = new StringBuilder();", "originalCommit": "f8e32471968abcd799ee5305179e845105bf4920", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI1NTMxNg==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1317#discussion_r420255316", "bodyText": "Because this appends name and not result. This method has fall through logic that forces us to retain some original logic.", "author": "rene-ye", "createdAt": "2020-05-05T16:48:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NTAxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NjcxNQ==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1317#discussion_r418676715", "bodyText": "Lines 477 and 484 will probably error out, because property variable is actually not defined here. You should declare property as a String every time, or move up the declaration of line 468 to somewhere above.", "author": "peterbae", "createdAt": "2020-05-01T18:34:51Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/Util.java", "diffHunk": "@@ -478,27 +465,27 @@ else if (ch == ':')\n         // Exit\n         switch (state) {\n             case inServerName:\n-                result = result.trim();\n-                if (result.length() > 0) {\n+                String property = result.toString().trim();\n+                if (property.length() > 0) {\n                     if (logger.isLoggable(Level.FINE)) {\n-                        logger.fine(\"Property:serverName \" + \"Value:\" + result);\n+                        logger.fine(\"Property:serverName \" + \"Value:\" + property);\n                     }\n-                    p.put(SQLServerDriverStringProperty.SERVER_NAME.toString(), result);\n+                    p.put(SQLServerDriverStringProperty.SERVER_NAME.toString(), property);\n                 }\n                 break;\n             case inPort:\n-                result = result.trim();\n+                property = result.toString().trim();", "originalCommit": "f8e32471968abcd799ee5305179e845105bf4920", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc3OTgzMQ==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1317#discussion_r419779831", "bodyText": "odd, I'm surprised it's not complaining about that", "author": "lilgreenbird", "createdAt": "2020-05-04T23:06:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NjcxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI1MzYzNQ==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1317#discussion_r420253635", "bodyText": "It doesn't error out, it's declared in the first case statement. Cases can fall through into each other if you don't provide a break; at the end of a case, variable declaration scope is more obvious with that taken into consideration. The cases are also not scoped by { } brackets. Also CI tests passing rules out compile errors.", "author": "rene-ye", "createdAt": "2020-05-05T16:45:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NjcxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI2OTE5OQ==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1317#discussion_r420269199", "bodyText": "But there is a break; after the inServerName case. I think the tests are not failing because every test case had inServerName get called before other cases. Can you test this method by providing it a connection string that has maybe the port number come before the server name?", "author": "peterbae", "createdAt": "2020-05-05T17:07:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NjcxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODgwODI4MQ==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1317#discussion_r418808281", "bodyText": "Please add tests for the changes you are making.", "author": "ulvii", "createdAt": "2020-05-02T01:11:36Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/Util.java", "diffHunk": "@@ -242,10 +242,9 @@ static void writeLong(long value, byte valueBytes[], int offset) {\n         Properties p = new Properties();\n         String tmpUrl = url;\n         String sPrefix = \"jdbc:sqlserver://\";\n-        String result = \"\";", "originalCommit": "f8e32471968abcd799ee5305179e845105bf4920", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI1OTEyMA==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1317#discussion_r420259120", "bodyText": "The PR is to change a String variable to a StringBuilder, I don't believe testing will be possible. Regarding code coverage, the lines changed are being used in the driver anytime our tests set a connection string property.", "author": "rene-ye", "createdAt": "2020-05-05T16:51:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODgwODI4MQ=="}], "type": "inlineReview"}]}