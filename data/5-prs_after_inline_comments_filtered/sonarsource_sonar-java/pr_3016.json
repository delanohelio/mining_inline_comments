{"pr_number": 3016, "pr_title": "Rule S5869: Character classes in regular expressions should not ...", "pr_createdAt": "2020-06-15T16:52:35Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/3016", "timeline": [{"oid": "8125b5d3899c821fe973f03b42fae44fdb5e7ef3", "url": "https://github.com/SonarSource/sonar-java/commit/8125b5d3899c821fe973f03b42fae44fdb5e7ef3", "message": "SONARJAVA-3427 Rule S5869: Character classes in regular ...\n\n... expressions should not contain the same character twice", "committedDate": "2020-06-15T16:59:02Z", "type": "forcePushed"}, {"oid": "88bfa432b38378c89e435aefe1aef365afdcde80", "url": "https://github.com/SonarSource/sonar-java/commit/88bfa432b38378c89e435aefe1aef365afdcde80", "message": "SONARJAVA-3427 Rule S5869: Character classes in regular ...\n\n... expressions should not contain the same character twice", "committedDate": "2020-06-16T11:50:31Z", "type": "forcePushed"}, {"oid": "dfdee33be36bc58bee9c39918941d856046bcd15", "url": "https://github.com/SonarSource/sonar-java/commit/dfdee33be36bc58bee9c39918941d856046bcd15", "message": "SONARJAVA-3427 Rule S5869: Character classes in regular ...\n\n... expressions should not contain the same character twice", "committedDate": "2020-06-16T13:21:46Z", "type": "forcePushed"}, {"oid": "49c2a1097d3f05023c88b24dbd926dcd052f58cc", "url": "https://github.com/SonarSource/sonar-java/commit/49c2a1097d3f05023c88b24dbd926dcd052f58cc", "message": "Add tests for base visitor", "committedDate": "2020-06-16T15:29:03Z", "type": "forcePushed"}, {"oid": "42212f4326b1d605dbc9488bd147c00f74cde4c5", "url": "https://github.com/SonarSource/sonar-java/commit/42212f4326b1d605dbc9488bd147c00f74cde4c5", "message": "SONARJAVA-3427 Rule S5869: Character classes in regular ...\n\n... expressions should not contain the same character twice", "committedDate": "2020-06-17T14:08:52Z", "type": "commit"}, {"oid": "cca44d1b0634b7f380219266435b34d649101590", "url": "https://github.com/SonarSource/sonar-java/commit/cca44d1b0634b7f380219266435b34d649101590", "message": "Add tests for base visitor", "committedDate": "2020-06-17T14:08:52Z", "type": "commit"}, {"oid": "cca44d1b0634b7f380219266435b34d649101590", "url": "https://github.com/SonarSource/sonar-java/commit/cca44d1b0634b7f380219266435b34d649101590", "message": "Add tests for base visitor", "committedDate": "2020-06-17T14:08:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYwNTYwNw==", "url": "https://github.com/SonarSource/sonar-java/pull/3016#discussion_r441605607", "bodyText": "I would prefer to have this logic within the constructor of the DuplicateFinder, so we could rewrite this whole block such as:\nif (!regexForLiterals.hasSyntaxErrors()) {\n  regexForLiterals.getResult().accept(new DuplicateFinder(mit));\n}\n\n...\n\nprivate class DuplicateFinder extends RegexBaseVisitor {\n  private DuplicateFinder(MethodInvocationTree mit) {\n    setActiveFlags(getFlags(mit));\n  }\n\n  ...\n}\n\n\nOr, what about having a final method setActiveFlags(MethodInvocationTree mit) within the RegexBaseVisitor, which would itself calls the currently private getFlags(mit) ?\nSo in our case we could just call myVisitor.setActiveFlags(mit). I have the feeling that we will always have to call getFlags and setActiveFlags together.", "author": "m-g-sonar", "createdAt": "2020-06-17T14:50:17Z", "path": "java-checks/src/main/java/org/sonar/java/checks/regex/DuplicatesInCharacterClassCheck.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.regex;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.java.regex.RegexParseResult;\n+import org.sonar.java.regex.ast.CharacterClassUnionTree;\n+import org.sonar.java.regex.ast.CharacterRangeTree;\n+import org.sonar.java.regex.ast.PlainCharacterTree;\n+import org.sonar.java.regex.ast.RegexBaseVisitor;\n+import org.sonar.java.regex.ast.RegexTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+\n+@Rule(key = \"S5869\")\n+public class DuplicatesInCharacterClassCheck extends AbstractRegexCheck {\n+\n+  private static final String MESSAGE = \"Remove duplicates in this character class.\";\n+\n+  @Override\n+  public void checkRegex(RegexParseResult regexForLiterals, MethodInvocationTree mit) {\n+    if (!regexForLiterals.hasSyntaxErrors()) {\n+      DuplicateFinder duplicateFinder = new DuplicateFinder();\n+      duplicateFinder.setActiveFlags(getFlags(mit));", "originalCommit": "cca44d1b0634b7f380219266435b34d649101590", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2MDk0Ng==", "url": "https://github.com/SonarSource/sonar-java/pull/3016#discussion_r441660946", "bodyText": "As discussed, I'll take care of this later in another PR after related changes from #3033 are merged.", "author": "sebastian-hungerecker-sonarsource", "createdAt": "2020-06-17T16:07:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYwNTYwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYxMjY1NA==", "url": "https://github.com/SonarSource/sonar-java/pull/3016#discussion_r441612654", "bodyText": "Why not using another message here? it seems to me to be strange to have the same message for all secondaries.", "author": "m-g-sonar", "createdAt": "2020-06-17T14:59:17Z", "path": "java-checks/src/main/java/org/sonar/java/checks/regex/DuplicatesInCharacterClassCheck.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.regex;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.java.regex.RegexParseResult;\n+import org.sonar.java.regex.ast.CharacterClassUnionTree;\n+import org.sonar.java.regex.ast.CharacterRangeTree;\n+import org.sonar.java.regex.ast.PlainCharacterTree;\n+import org.sonar.java.regex.ast.RegexBaseVisitor;\n+import org.sonar.java.regex.ast.RegexTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+\n+@Rule(key = \"S5869\")\n+public class DuplicatesInCharacterClassCheck extends AbstractRegexCheck {\n+\n+  private static final String MESSAGE = \"Remove duplicates in this character class.\";\n+\n+  @Override\n+  public void checkRegex(RegexParseResult regexForLiterals, MethodInvocationTree mit) {\n+    if (!regexForLiterals.hasSyntaxErrors()) {\n+      DuplicateFinder duplicateFinder = new DuplicateFinder();\n+      duplicateFinder.setActiveFlags(getFlags(mit));\n+      duplicateFinder.visit(regexForLiterals.getResult());\n+    }\n+  }\n+\n+  private class DuplicateFinder extends RegexBaseVisitor {\n+\n+    @Override\n+    public void visitCharacterClassUnion(CharacterClassUnionTree tree) {\n+      List<RegexTree> duplicates = new ArrayList<>();\n+      TreeMap<Character, Boolean> inCharacterClass = new TreeMap<>();\n+      for (RegexTree element : tree.getCharacterClasses()) {\n+        if (element.is(RegexTree.Kind.PLAIN_CHARACTER)) {\n+          char ch = ((PlainCharacterTree) element).getCharacter();\n+          processRange(duplicates, inCharacterClass, ch, ch, element);\n+        } else if (element.is(RegexTree.Kind.CHARACTER_RANGE)) {\n+          CharacterRangeTree range = (CharacterRangeTree) element;\n+          char lower = range.getLowerBound().getCharacter();\n+          char upper = range.getUpperBound().getCharacter();\n+          processRange(duplicates, inCharacterClass, lower, upper, range);\n+        }\n+      }\n+      if (!duplicates.isEmpty()) {\n+        List<RegexIssueLocation> secondaries = duplicates.stream()\n+          .skip(1)\n+          .map(duplicate -> new RegexIssueLocation(duplicate, MESSAGE))", "originalCommit": "cca44d1b0634b7f380219266435b34d649101590", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYxOTk5MQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3016#discussion_r441619991", "bodyText": "What would the other message be? Conceptually, the first duplicated character isn't any different than the others, so in principle we could even report one issue for each duplicated character. But of course that would produce way too much noise if a character class contains a lot of duplicates, so I think making the subsequent duplicates secondaries is preferable, but I don't know how their message should differ.", "author": "sebastian-hungerecker-sonarsource", "createdAt": "2020-06-17T15:08:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYxMjY1NA=="}], "type": "inlineReview"}, {"oid": "73bc66ae02b59e7f9f6c97cb895a5f34f5789d45", "url": "https://github.com/SonarSource/sonar-java/commit/73bc66ae02b59e7f9f6c97cb895a5f34f5789d45", "message": "Fixes from review", "committedDate": "2020-06-17T16:04:09Z", "type": "commit"}]}