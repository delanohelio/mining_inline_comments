{"pr_number": 2797, "pr_title": "SONARJAVA-3250 S2245 should consider methods from ThreadLocalRandom, JVMRandom, RandomUtils, RandomStringUtils", "pr_createdAt": "2020-02-07T10:16:43Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/2797", "timeline": [{"oid": "6caf99a937da1fd4d24a47e9967ef9a3333411af", "url": "https://github.com/SonarSource/sonar-java/commit/6caf99a937da1fd4d24a47e9967ef9a3333411af", "message": "SONARJAVA-3250 S2245 should consider methods from ThreadLocalRandom, JVMRandom, RandomUtils, RandomStringUtils", "committedDate": "2020-02-07T10:19:09Z", "type": "commit"}, {"oid": "6caf99a937da1fd4d24a47e9967ef9a3333411af", "url": "https://github.com/SonarSource/sonar-java/commit/6caf99a937da1fd4d24a47e9967ef9a3333411af", "message": "SONARJAVA-3250 S2245 should consider methods from ThreadLocalRandom, JVMRandom, RandomUtils, RandomStringUtils", "committedDate": "2020-02-07T10:19:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM4MjM2NQ==", "url": "https://github.com/SonarSource/sonar-java/pull/2797#discussion_r376382365", "bodyText": "We should report only 1 issue and not 2.\nFor class used statically \"on the method invocation\" (ex: Math.random(), RandomUtils.nextFloat())\nOtherwise, \"on the new class\" (ex: new Random(), new JVMRandom())", "author": "alban-auzeill", "createdAt": "2020-02-07T13:13:36Z", "path": "java-checks/src/test/files/checks/PseudoRandomCheck.java", "diffHunk": "@@ -1,10 +1,52 @@\n import java.util.Random;\n+import java.util.concurrent.ThreadLocalRandom;\n+import org.apache.commons.lang.math.JVMRandom;\n+import org.apache.commons.lang.math.RandomUtils;\n+import org.apache.commons.lang.RandomStringUtils;\n \n class A {\n   void fun() {\n+    int i = nextInt();\n+\n+    // java.util.Random. Report only constructor\n     Random random = new Random(); // Noncompliant [[sc=25;ec=31]] {{Make sure that using this pseudorandom number generator is safe here.}}\n     byte[] bytes = new byte[20];\n-    random.nextBytes(bytes);\n-    double j = Math.random(); // Noncompliant [[sc=21;ec=27]]\n+    random.nextBytes(bytes); // Compliant\n+\n+    // java.lang.Math. Report only Math.random()\n+    double rand1 = Math.random(); // Noncompliant [[sc=25;ec=31]]\n+    double abs = Math.abs(12); // Compliant\n+\n+    // java.util.concurrent.ThreadLocalRandom\n+    int rand2 = ThreadLocalRandom.current().nextInt();  // Noncompliant\n+\n+    // org.apache.commons.lang.math.JVMRandom\n+    JVMRandom jvmRandom = new JVMRandom(); // Noncompliant\n+    double rand3 = jvmRandom.nextDouble(); // Noncompliant", "originalCommit": "6caf99a937da1fd4d24a47e9967ef9a3333411af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM4Mzk0OQ==", "url": "https://github.com/SonarSource/sonar-java/pull/2797#discussion_r376383949", "bodyText": "RANDOM_TYPES.contains(fullyQualifiedName)", "author": "alban-auzeill", "createdAt": "2020-02-07T13:17:21Z", "path": "java-checks/src/main/java/org/sonar/java/checks/PseudoRandomCheck.java", "diffHunk": "@@ -44,15 +59,35 @@\n   public void visitNode(Tree tree) {\n     if (tree.is(Tree.Kind.METHOD_INVOCATION)) {\n       MethodInvocationTree mit = (MethodInvocationTree) tree;\n+      IdentifierTree reportLocation = ExpressionUtils.methodName(mit);\n       if (MATH_RANDOM_MATCHER.matches(mit)) {\n-        reportIssue(ExpressionUtils.methodName(mit), MESSAGE);\n+        reportIssue(reportLocation, MESSAGE);\n+      } else {\n+        if (mit.methodSelect().is(Tree.Kind.MEMBER_SELECT) && !isChainedMethodInvocation(mit)) {\n+          Type expressionType = ((MemberSelectExpressionTree) mit.methodSelect()).expression().symbolType();\n+          checkSymbolType(expressionType.fullyQualifiedName(), reportLocation);\n+        }\n       }\n     } else {\n       NewClassTree newClass = (NewClassTree) tree;\n-      if (newClass.symbolType().is(\"java.util.Random\")) {\n+      Type symbolType = newClass.symbolType();\n+      if (symbolType.is(\"java.util.Random\")) {\n         reportIssue(newClass.identifier(), MESSAGE);\n+      } else {\n+        checkSymbolType(newClass.symbolType().fullyQualifiedName(), newClass.identifier());\n       }\n     }\n   }\n \n+  private static boolean isChainedMethodInvocation(MethodInvocationTree mit) {\n+    Tree parent = mit.parent();\n+    return parent != null && parent.is(Tree.Kind.MEMBER_SELECT);\n+  }\n+\n+  private void checkSymbolType(String fullyQualifiedName, Tree reportLocation) {\n+    if (RANDOM_TYPES.stream().anyMatch(ty -> ty.equals(fullyQualifiedName))) {", "originalCommit": "6caf99a937da1fd4d24a47e9967ef9a3333411af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "34b148ad795d4ccc02accbf0dddb4ce5fce50768", "url": "https://github.com/SonarSource/sonar-java/commit/34b148ad795d4ccc02accbf0dddb4ce5fce50768", "message": "Fix from review", "committedDate": "2020-02-07T14:03:38Z", "type": "commit"}]}