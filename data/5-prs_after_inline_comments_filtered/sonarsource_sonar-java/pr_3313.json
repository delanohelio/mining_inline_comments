{"pr_number": 3313, "pr_title": "SONARJAVA-3610 Rule S6070: The regex escape sequence \\cX should only be used with characters in the @-_ range", "pr_createdAt": "2020-12-02T13:11:46Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/3313", "timeline": [{"oid": "5f6e9f94f1f1c9cd0690c375b337d1a31bdbbedf", "url": "https://github.com/SonarSource/sonar-java/commit/5f6e9f94f1f1c9cd0690c375b337d1a31bdbbedf", "message": "SONARJAVA-3610 Rule S6070: The regex escape sequence \\cX should only be used with characters in the @-_ range", "committedDate": "2020-12-02T12:59:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE4NzMxOA==", "url": "https://github.com/SonarSource/sonar-java/pull/3313#discussion_r534187318", "bodyText": "This should be matches. I don't think there can ever be a case where it makes a difference (i.e. a case where \\\\cX somehow appears as a substring in some other escape sequence), but since we're not looking for a substring match, we shouldn't be using find.", "author": "sebastian-hungerecker-sonarsource", "createdAt": "2020-12-02T13:59:56Z", "path": "java-checks/src/main/java/org/sonar/java/checks/regex/EscapeSequenceControlCharacterCheck.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.regex;\n+\n+import java.util.Collections;\n+import java.util.regex.Pattern;\n+import org.sonar.check.Rule;\n+import org.sonar.java.regex.RegexParseResult;\n+import org.sonar.java.regex.ast.PlainCharacterTree;\n+import org.sonar.java.regex.ast.RegexBaseVisitor;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+\n+@Rule(key = \"S6070\")\n+public class EscapeSequenceControlCharacterCheck extends AbstractRegexCheck {\n+\n+  private static final String MESSAGE = \"Remove or replace this problematic use of \\\\c.\";\n+\n+  private static final Pattern WRONG_ESCAPED_SEQUENCE = Pattern.compile(\"\\\\\\\\c[^@-_]\");\n+\n+  @Override\n+  public void checkRegex(RegexParseResult regexForLiterals, ExpressionTree methodInvocationOrAnnotation) {\n+    new WrongEscapeSequenceVisitor().visit(regexForLiterals);\n+  }\n+\n+  private class WrongEscapeSequenceVisitor extends RegexBaseVisitor {\n+    @Override\n+    public void visitPlainCharacter(PlainCharacterTree tree) {\n+      if (WRONG_ESCAPED_SEQUENCE.matcher(tree.getText()).find()) {", "originalCommit": "5f6e9f94f1f1c9cd0690c375b337d1a31bdbbedf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI4ODY2MQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3313#discussion_r534288661", "bodyText": "Using matches does make sense indeed.\nIn addition, as discussed, the regex was matching only one backslash. I fixed the regex to correctly match two of them.", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-12-02T16:07:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE4NzMxOA=="}], "type": "inlineReview"}, {"oid": "ec9ff0c58868a62135f34ba35a9f3007d803d9d5", "url": "https://github.com/SonarSource/sonar-java/commit/ec9ff0c58868a62135f34ba35a9f3007d803d9d5", "message": "Use matches and fix the regex to match two backslashes", "committedDate": "2020-12-02T15:13:05Z", "type": "commit"}]}