{"pr_number": 3179, "pr_title": "SONARJAVA-3527 Rule S5977: Tests should use fixed data instead of ran\u2026", "pr_createdAt": "2020-09-15T15:27:18Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/3179", "timeline": [{"oid": "36a76544964cf7d2731617ba7a5d42b9fc0dc716", "url": "https://github.com/SonarSource/sonar-java/commit/36a76544964cf7d2731617ba7a5d42b9fc0dc716", "message": "SONARJAVA-3527 Rule S5977: Tests should use fixed data instead of randomized data", "committedDate": "2020-09-15T15:44:34Z", "type": "forcePushed"}, {"oid": "4b2caa1f2572754f89f9f33c1ac5a9f803de72c7", "url": "https://github.com/SonarSource/sonar-java/commit/4b2caa1f2572754f89f9f33c1ac5a9f803de72c7", "message": "SONARJAVA-3527 Rule S5977: Tests should use fixed data instead of randomized data", "committedDate": "2020-09-16T06:48:24Z", "type": "forcePushed"}, {"oid": "e1cbe96d6048acbacb32d1d3c989777bcd84a990", "url": "https://github.com/SonarSource/sonar-java/commit/e1cbe96d6048acbacb32d1d3c989777bcd84a990", "message": "SONARJAVA-3527 Rule S5977: Tests should use fixed data instead of randomized data", "committedDate": "2020-09-16T07:06:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI2MzE3OQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3179#discussion_r489263179", "bodyText": "Usually when the code is simple enough, we try to keep one file for both compliant and noncompliant examples.", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-09-16T08:37:07Z", "path": "java-checks-test-sources/src/main/java/checks/NonRandomizedTestDataCheck.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package checks;", "originalCommit": "e1cbe96d6048acbacb32d1d3c989777bcd84a990", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMxNjQyOA==", "url": "https://github.com/SonarSource/sonar-java/pull/3179#discussion_r489316428", "bodyText": "This was the intention to check the file without any issues. Because otherwise this case is not covered.", "author": "margarita-nedzelska-sonarsource", "createdAt": "2020-09-16T09:59:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI2MzE3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM4OTYzNA==", "url": "https://github.com/SonarSource/sonar-java/pull/3179#discussion_r489389634", "bodyText": "It makes sense indeed.", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-09-16T12:15:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI2MzE3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3Mjk3MA==", "url": "https://github.com/SonarSource/sonar-java/pull/3179#discussion_r489272970", "bodyText": "This formatting looks strange, is it intended? Same for the next MethodMatchers.", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-09-16T08:51:00Z", "path": "java-checks/src/main/java/org/sonar/java/checks/tests/RandomizedTestDataCheck.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5977\")\n+public class RandomizedTestDataCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final MethodMatchers RANDOM_CONSTRUCTOR_METHOD_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.util.Random\")\n+    .constructor()\n+    .withAnyParameters()\n+      .build();", "originalCommit": "e1cbe96d6048acbacb32d1d3c989777bcd84a990", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3NzM0Ng==", "url": "https://github.com/SonarSource/sonar-java/pull/3179#discussion_r489277346", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final String MESSAGE = \"Replace randomly generated values with a fixed ones.\";\n          \n          \n            \n              private static final String MESSAGE = \"Replace randomly generated values with fixed ones.\";", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-09-16T08:57:40Z", "path": "java-checks/src/main/java/org/sonar/java/checks/tests/RandomizedTestDataCheck.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5977\")\n+public class RandomizedTestDataCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final MethodMatchers RANDOM_CONSTRUCTOR_METHOD_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.util.Random\")\n+    .constructor()\n+    .withAnyParameters()\n+      .build();\n+\n+  private static final MethodMatchers RANDOM_UUID_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.util.UUID\")\n+    .names(\"randomUUID\")\n+    .withAnyParameters()\n+      .build();\n+\n+  private static final String LOCATIONS_TEXT = \"usage of random data in test\";\n+  private static final String MESSAGE = \"Replace randomly generated values with a fixed ones.\";", "originalCommit": "e1cbe96d6048acbacb32d1d3c989777bcd84a990", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3OTMzOQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3179#discussion_r489279339", "bodyText": "I tend to agree that reporting only one issue per test file is enough, we should just make sure that the rspec description reflects this behavior (current Highlighting part mention that one issue per method will be reported).", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-09-16T09:00:52Z", "path": "java-checks/src/main/java/org/sonar/java/checks/tests/RandomizedTestDataCheck.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5977\")\n+public class RandomizedTestDataCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final MethodMatchers RANDOM_CONSTRUCTOR_METHOD_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.util.Random\")\n+    .constructor()\n+    .withAnyParameters()\n+      .build();\n+\n+  private static final MethodMatchers RANDOM_UUID_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.util.UUID\")\n+    .names(\"randomUUID\")\n+    .withAnyParameters()\n+      .build();\n+\n+  private static final String LOCATIONS_TEXT = \"usage of random data in test\";\n+  private static final String MESSAGE = \"Replace randomly generated values with a fixed ones.\";\n+\n+  private boolean reportedUUIDRandom = false;\n+  private final List<Tree> randomSecondaryLocations = new ArrayList<>();\n+\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Arrays.asList(Tree.Kind.METHOD_INVOCATION, Tree.Kind.NEW_CLASS);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    if (tree.is(Tree.Kind.NEW_CLASS)) {\n+      checkForRandomConstructorUsage(tree);\n+    }\n+    if (!reportedUUIDRandom && tree.is(Tree.Kind.METHOD_INVOCATION)) {\n+      checkAndReportUUIDRandomUsage(tree);\n+    }\n+  }\n+\n+  private void checkForRandomConstructorUsage(Tree tree) {\n+    NewClassTree newClassTree = (NewClassTree) tree;\n+    if (RANDOM_CONSTRUCTOR_METHOD_MATCHER.matches(newClassTree)) {\n+      randomSecondaryLocations.add(tree);\n+    }\n+  }\n+\n+  private void checkAndReportUUIDRandomUsage(Tree tree) {\n+    MethodInvocationTree methodInvocationTree = (MethodInvocationTree) tree;\n+    Symbol symbol = methodInvocationTree.symbol();\n+    if (RANDOM_UUID_MATCHER.matches(methodInvocationTree)) {\n+      reportedUUIDRandom = true;\n+      List<JavaFileScannerContext.Location> locations = symbol.usages().stream()\n+        .map(identifierTree -> new JavaFileScannerContext.Location(LOCATIONS_TEXT, identifierTree))\n+        .collect(Collectors.toList());\n+      reportIssue(tree, MESSAGE, locations, null);\n+    }\n+  }\n+\n+  @Override\n+  public void leaveFile(JavaFileScannerContext context) {", "originalCommit": "e1cbe96d6048acbacb32d1d3c989777bcd84a990", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4OTQ3MQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3179#discussion_r489289471", "bodyText": "If you call this method naively with any Tree, the cast is not safe.\nI would rather use NewClassTree as parameter's type and perform the cast when you call it.\nSame for checkAndReportUUIDRandomUsage.", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-09-16T09:16:54Z", "path": "java-checks/src/main/java/org/sonar/java/checks/tests/RandomizedTestDataCheck.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5977\")\n+public class RandomizedTestDataCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final MethodMatchers RANDOM_CONSTRUCTOR_METHOD_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.util.Random\")\n+    .constructor()\n+    .withAnyParameters()\n+      .build();\n+\n+  private static final MethodMatchers RANDOM_UUID_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.util.UUID\")\n+    .names(\"randomUUID\")\n+    .withAnyParameters()\n+      .build();\n+\n+  private static final String LOCATIONS_TEXT = \"usage of random data in test\";\n+  private static final String MESSAGE = \"Replace randomly generated values with a fixed ones.\";\n+\n+  private boolean reportedUUIDRandom = false;\n+  private final List<Tree> randomSecondaryLocations = new ArrayList<>();\n+\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Arrays.asList(Tree.Kind.METHOD_INVOCATION, Tree.Kind.NEW_CLASS);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    if (tree.is(Tree.Kind.NEW_CLASS)) {\n+      checkForRandomConstructorUsage(tree);\n+    }\n+    if (!reportedUUIDRandom && tree.is(Tree.Kind.METHOD_INVOCATION)) {\n+      checkAndReportUUIDRandomUsage(tree);\n+    }\n+  }\n+\n+  private void checkForRandomConstructorUsage(Tree tree) {\n+    NewClassTree newClassTree = (NewClassTree) tree;", "originalCommit": "e1cbe96d6048acbacb32d1d3c989777bcd84a990", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI5NjQ3MQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3179#discussion_r489296471", "bodyText": "It means that we will report an issue for Random with seed.\nNot so unpredictable, but using hardcoded value is still more readable, so it seems correct to me.\nWe should just add a test for this case, to show that we thought about it.", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-09-16T09:27:27Z", "path": "java-checks/src/main/java/org/sonar/java/checks/tests/RandomizedTestDataCheck.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5977\")\n+public class RandomizedTestDataCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final MethodMatchers RANDOM_CONSTRUCTOR_METHOD_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.util.Random\")\n+    .constructor()\n+    .withAnyParameters()", "originalCommit": "e1cbe96d6048acbacb32d1d3c989777bcd84a990", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI5ODkyMQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3179#discussion_r489298921", "bodyText": "Can it actually take parameters? If not, we should consider using addWithoutParametersMatcher().", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-09-16T09:31:11Z", "path": "java-checks/src/main/java/org/sonar/java/checks/tests/RandomizedTestDataCheck.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5977\")\n+public class RandomizedTestDataCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final MethodMatchers RANDOM_CONSTRUCTOR_METHOD_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.util.Random\")\n+    .constructor()\n+    .withAnyParameters()\n+      .build();\n+\n+  private static final MethodMatchers RANDOM_UUID_MATCHER = MethodMatchers.create()\n+    .ofTypes(\"java.util.UUID\")\n+    .names(\"randomUUID\")\n+    .withAnyParameters()", "originalCommit": "e1cbe96d6048acbacb32d1d3c989777bcd84a990", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fb2c7ad1a8693ee98140ad895516ee0b632645f5", "url": "https://github.com/SonarSource/sonar-java/commit/fb2c7ad1a8693ee98140ad895516ee0b632645f5", "message": "Refactoring", "committedDate": "2020-09-16T11:11:44Z", "type": "forcePushed"}, {"oid": "ad1efed781081f19916e353c29e40e0dd9d4ad1d", "url": "https://github.com/SonarSource/sonar-java/commit/ad1efed781081f19916e353c29e40e0dd9d4ad1d", "message": "Implementation", "committedDate": "2020-09-16T11:42:49Z", "type": "commit"}, {"oid": "ad1efed781081f19916e353c29e40e0dd9d4ad1d", "url": "https://github.com/SonarSource/sonar-java/commit/ad1efed781081f19916e353c29e40e0dd9d4ad1d", "message": "Implementation", "committedDate": "2020-09-16T11:42:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM5NDYzMA==", "url": "https://github.com/SonarSource/sonar-java/pull/3179#discussion_r489394630", "bodyText": "I don't think it makes sense to include the main location in the secondaries.", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-09-16T12:24:09Z", "path": "java-checks-test-sources/src/main/java/checks/RandomizedTestDataCheck.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package checks;\n+\n+import java.util.Random;\n+import java.util.UUID;\n+import org.junit.jupiter.api.Test;\n+\n+public class RandomizedTestDataCheck {\n+\n+  @Test\n+  public void randomizedTest() {\n+    int userAge = new Random().nextInt(42);  // Noncompliant[[sc=19;ec=31;secondary=11,25,27,29,31,33,42]]{{Replace randomly generated values with fixed ones.}}\n+    UUID userID = UUID.randomUUID(); // Noncompliant[[sc=19;ec=36;secondary=12,26,28,30,32,34]]{{Replace randomly generated values with fixed ones.}}", "originalCommit": "ad1efed781081f19916e353c29e40e0dd9d4ad1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQxMTM3MQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3179#discussion_r489411371", "bodyText": "On the one hand yes.\nWhat I thought about secondary locations is that there are different cases, If we report the main issue on a different level (example class) and highlight secondaries (example method) we do not report the primary one in a secondary.\nWhen we're talking about this issue. Here we report the first occurrence and highlight other usages. So at this point this makes sense to add the first one to secondary locations. And moreover, this way we have a fair counter of all usages.\nWdyt?", "author": "margarita-nedzelska-sonarsource", "createdAt": "2020-09-16T12:51:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM5NDYzMA=="}], "type": "inlineReview"}, {"oid": "44ba757f3ac3f46916cbaf648630618fce0465ab", "url": "https://github.com/SonarSource/sonar-java/commit/44ba757f3ac3f46916cbaf648630618fce0465ab", "message": "Remove the first usage from secondary locations", "committedDate": "2020-09-16T14:12:10Z", "type": "commit"}, {"oid": "44ba757f3ac3f46916cbaf648630618fce0465ab", "url": "https://github.com/SonarSource/sonar-java/commit/44ba757f3ac3f46916cbaf648630618fce0465ab", "message": "Remove the first usage from secondary locations", "committedDate": "2020-09-16T14:12:10Z", "type": "forcePushed"}]}