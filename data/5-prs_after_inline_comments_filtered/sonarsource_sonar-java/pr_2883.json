{"pr_number": 2883, "pr_title": "SONARJAVA-3314 RSPEC-5378 Deprecated code marked for removal should be removed", "pr_createdAt": "2020-03-23T08:07:08Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/2883", "timeline": [{"oid": "7828403baa45d0af203428b7a18a50455c82971b", "url": "https://github.com/SonarSource/sonar-java/commit/7828403baa45d0af203428b7a18a50455c82971b", "message": "SONARJAVA-3314 RSPEC-5378 Deprecated code marked for removal should be removed", "committedDate": "2020-03-23T07:57:14Z", "type": "commit"}, {"oid": "5f9c5b4695669e7a0ef3f538566dc1d5a6a9f27d", "url": "https://github.com/SonarSource/sonar-java/commit/5f9c5b4695669e7a0ef3f538566dc1d5a6a9f27d", "message": "Project is build using JDK 11 so no need to redefine java.lang", "committedDate": "2020-03-23T09:55:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI4NzkyNw==", "url": "https://github.com/SonarSource/sonar-java/pull/2883#discussion_r396287927", "bodyText": "This method now returns an optional, starting with is, it does not make much sense anymore.", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-03-23T08:45:52Z", "path": "java-checks/src/main/java/org/sonar/java/checks/AbstractCallToDeprecatedCodeChecker.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.SymbolMetadata.AnnotationValue;\n+import org.sonar.plugins.java.api.tree.ClassTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+import org.sonar.plugins.java.api.tree.VariableTree;\n+\n+public abstract class AbstractCallToDeprecatedCodeChecker extends IssuableSubscriptionVisitor {\n+\n+  private int nestedDeprecationLevel = 0;\n+\n+  @Override\n+  public final void leaveFile(JavaFileScannerContext context) {\n+    nestedDeprecationLevel = 0;\n+  }\n+\n+  @Override\n+  public final List<Tree.Kind> nodesToVisit() {\n+    return Arrays.asList(Tree.Kind.IDENTIFIER, Tree.Kind.CLASS, Tree.Kind.ENUM, Tree.Kind.INTERFACE, Tree.Kind.ANNOTATION_TYPE, Tree.Kind.METHOD, Tree.Kind.CONSTRUCTOR);\n+  }\n+\n+  @Override\n+  public final void visitNode(Tree tree) {\n+    if (!hasSemantic()) {\n+      return;\n+    }\n+    if (nestedDeprecationLevel == 0) {\n+      if (tree.is(Tree.Kind.IDENTIFIER)) {\n+        IdentifierTree identifierTree = (IdentifierTree) tree;\n+        if (isSimpleNameOfVariableTreeOrVariableIsDeprecated(identifierTree)) {\n+          return;\n+        }\n+        tryGetDeprecatedSymbol(identifierTree).ifPresent(deprecatedSymbol -> checkDeprecatedIdentifier(identifierTree, deprecatedSymbol));\n+      } else if (tree.is(Tree.Kind.METHOD, Tree.Kind.CONSTRUCTOR)) {\n+        MethodTree methodTree = (MethodTree) tree;\n+        tryGetDeprecatedSymbol(methodTree).ifPresent(deprecatedSymbol -> checkOverridingMethod(methodTree, deprecatedSymbol));\n+      }\n+    }\n+    if (isDeprecatedMethod(tree) || isDeprecatedClassTree(tree)) {\n+      nestedDeprecationLevel++;\n+    }\n+  }\n+\n+  @Override\n+  public final void leaveNode(Tree tree) {\n+    if (!hasSemantic()) {\n+      return;\n+    }\n+    if (isDeprecatedMethod(tree) || isDeprecatedClassTree(tree)) {\n+      nestedDeprecationLevel--;\n+    }\n+  }\n+\n+  private static Optional<Symbol> tryGetDeprecatedSymbol(IdentifierTree identifierTree) {\n+    Symbol symbol = identifierTree.symbol();\n+    if (symbol.isDeprecated()) {\n+      return Optional.of(symbol);\n+    }\n+    if (isConstructor(symbol) && symbol.owner().isDeprecated()) {\n+      return Optional.of(symbol.owner());\n+    }\n+    if (isDeprecatedEnumConstant(symbol)) {\n+      return Optional.of(symbol.type().symbol());\n+    }\n+    return Optional.empty();\n+  }\n+\n+  public static boolean isConstructor(Symbol symbol) {\n+    return symbol.isMethodSymbol() && \"<init>\".equals(symbol.name());\n+  }\n+\n+  private static boolean isDeprecatedEnumConstant(Symbol symbol) {\n+    return symbol.isVariableSymbol() && symbol.isEnum() && symbol.type().symbol().isDeprecated();\n+  }\n+\n+  abstract void checkDeprecatedIdentifier(IdentifierTree identifierTree, Symbol deprecatedSymbol);\n+\n+  private static boolean isSimpleNameOfVariableTreeOrVariableIsDeprecated(IdentifierTree identifierTree) {\n+    Tree parent = identifierTree.parent();\n+    return parent.is(Tree.Kind.VARIABLE) && (identifierTree.equals(((VariableTree) parent).simpleName()) || ((VariableTree) parent).symbol().isDeprecated());\n+  }\n+\n+  private static Optional<Symbol.MethodSymbol> tryGetDeprecatedSymbol(MethodTree methodTree) {\n+    Symbol.MethodSymbol methodSymbol = methodTree.symbol();\n+    if (methodSymbol.isDeprecated()) {\n+      return Optional.empty();\n+    }\n+    return isOverridingDeprecatedConcreteMethod(methodSymbol);\n+  }\n+\n+  abstract void checkOverridingMethod(MethodTree methodTree, Symbol.MethodSymbol deprecatedSymbol);\n+\n+  private static Optional<Symbol.MethodSymbol> isOverridingDeprecatedConcreteMethod(Symbol.MethodSymbol symbol) {", "originalCommit": "7828403baa45d0af203428b7a18a50455c82971b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "32314608df35cbb5156b26398b63e3fc85f5977e", "url": "https://github.com/SonarSource/sonar-java/commit/32314608df35cbb5156b26398b63e3fc85f5977e", "message": "Fix from review", "committedDate": "2020-03-23T10:18:51Z", "type": "commit"}]}