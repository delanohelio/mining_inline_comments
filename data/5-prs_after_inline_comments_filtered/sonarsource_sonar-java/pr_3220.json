{"pr_number": 3220, "pr_title": "SONARJAVA-3538 Cover custom assertions", "pr_createdAt": "2020-09-28T17:51:12Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/3220", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU5OTU4OA==", "url": "https://github.com/SonarSource/sonar-java/pull/3220#discussion_r496599588", "bodyText": "You can use MethodTreeUtils.consecutiveMethodInvocation to do this.", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-09-29T10:09:31Z", "path": "java-checks/src/main/java/org/sonar/java/checks/tests/AssertJConsecutiveAssertionCheck.java", "diffHunk": "@@ -136,26 +140,49 @@ private void reportConsecutiveAssertions(List<StatementTree> statements) {\n     return Optional.empty();\n   }\n \n-  private void reportIssueIfMultipleCalls(@Nullable AssertSubject assertSubject, List<MethodInvocationTree> equivalentAssertions) {\n+  private void reportIssueIfMultipleCalls(@Nullable AssertSubject assertSubject, List<AssertSubject> equivalentAssertions) {\n     if (assertSubject != null && !equivalentAssertions.isEmpty()) {\n-      reportIssue(ExpressionUtils.methodName(assertSubject.mit),\n+      reportIssue(assertSubject.methodName(),\n         \"Join these multiple assertions subject to one assertion chain.\",\n-        equivalentAssertions.stream().map(mit -> new JavaFileScannerContext.Location(\"Other assertThat\", ExpressionUtils.methodName(mit))).collect(Collectors.toList()),\n+        equivalentAssertions.stream().map(AssertSubject::toSecondaryLocation).collect(Collectors.toList()),\n         null);\n     }\n   }\n \n   private static class AssertSubject {\n     final MethodInvocationTree mit;\n+    final Type assertionType;\n     final ExpressionTree arg;\n \n     AssertSubject(MethodInvocationTree mit, ExpressionTree arg) {\n       this.mit = mit;\n+      this.assertionType = mit.symbolType().erasure();\n       this.arg = arg;\n     }\n \n     boolean hasEquivalentArgument(AssertSubject other) {\n-      return SyntacticEquivalence.areEquivalent(arg, other.arg);\n+      return SyntacticEquivalence.areEquivalent(arg, other.arg)\n+        && (other.assertionType.isSubtypeOf(assertionType) || couldBeChained(other));\n+    }\n+\n+    boolean couldBeChained(AssertSubject other) {\n+      Tree otherParent = other.mit\n+        // owning member select\n+        .parent()\n+        // chained method invocation\n+        .parent();", "originalCommit": "b05d9acface3e70d6484e3f1fc67816720487faf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI4MDI3NQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3220#discussion_r497280275", "bodyText": "Oh nice!", "author": "m-g-sonar", "createdAt": "2020-09-30T06:53:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU5OTU4OA=="}], "type": "inlineReview"}, {"oid": "20b1ca205316a8dff31126222d97254693fcedda", "url": "https://github.com/SonarSource/sonar-java/commit/20b1ca205316a8dff31126222d97254693fcedda", "message": "Take advantage of using objects", "committedDate": "2020-09-30T06:56:29Z", "type": "commit"}, {"oid": "e959e1604c5873ac30ee290c29d9445ba572ea08", "url": "https://github.com/SonarSource/sonar-java/commit/e959e1604c5873ac30ee290c29d9445ba572ea08", "message": "SONARJAVA-3538 Cover abstract assertions", "committedDate": "2020-09-30T07:04:27Z", "type": "commit"}, {"oid": "e959e1604c5873ac30ee290c29d9445ba572ea08", "url": "https://github.com/SonarSource/sonar-java/commit/e959e1604c5873ac30ee290c29d9445ba572ea08", "message": "SONARJAVA-3538 Cover abstract assertions", "committedDate": "2020-09-30T07:04:27Z", "type": "forcePushed"}]}