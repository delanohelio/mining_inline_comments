{"pr_number": 722, "pr_title": "Fineract-796 - Use Hikari instead of Tomcat Connection Pool", "pr_createdAt": "2020-03-05T12:12:48Z", "pr_url": "https://github.com/apache/fineract/pull/722", "timeline": [{"oid": "b06c877a2a8e51a54fd7c10c2a1cab797639d25f", "url": "https://github.com/apache/fineract/commit/b06c877a2a8e51a54fd7c10c2a1cab797639d25f", "message": "FINERACT-796\n\nUse Hikari instead of Tomcat Connection Pool\n - Created hikari connection pool bean\n - Configured connection parameters to match hikari\n - Removed tomcat-jdbc and dbcp\n\ncloses https://issues.apache.org/jira/browse/FINERACT-796", "committedDate": "2020-03-06T03:28:50Z", "type": "forcePushed"}, {"oid": "8337d8a65088aca19147e719610ddd16de847fe0", "url": "https://github.com/apache/fineract/commit/8337d8a65088aca19147e719610ddd16de847fe0", "message": "FINERACT-796\n\nUse Hikari instead of Tomcat Connection Pool\n - Created hikari connection pool bean\n - Configured connection parameters to match hikari\n - Removed tomcat-jdbc and dbcp\n\ncloses https://issues.apache.org/jira/browse/FINERACT-796", "committedDate": "2020-03-08T01:52:10Z", "type": "forcePushed"}, {"oid": "1f8920f772fa0892e6bc064b077d52bfc36832de", "url": "https://github.com/apache/fineract/commit/1f8920f772fa0892e6bc064b077d52bfc36832de", "message": "FINERACT-796\n\nUse Hikari instead of Tomcat Connection Pool\n - Created hikari connection pool bean\n - Configured connection parameters to match hikari\n - Removed tomcat-jdbc and dbcp\n\ncloses https://issues.apache.org/jira/browse/FINERACT-796", "committedDate": "2020-03-10T05:04:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIyNzM0MQ==", "url": "https://github.com/apache/fineract/pull/722#discussion_r390227341", "bodyText": "why make this method name upper case? It works, by convention, class names are upper case, and method names are lower case, and it's is a little bit confusing to readers especially when there's an identically named class and method.", "author": "vorburger", "createdAt": "2020-03-10T10:42:27Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/boot/db/DataSourceConfiguration.java", "diffHunk": "@@ -38,19 +39,19 @@\n     @Autowired JDBCDriverConfig config ;\n \n     @Bean\n-    public DataSourceProperties dataSourceProperties() {\n-    return new DataSourceProperties(config.getDriverClassName(), config.getProtocol(), config.getSubProtocol(), config.getPort());\n+    public DataSourceProperties DataSourceProperties() {", "originalCommit": "1f8920f772fa0892e6bc064b077d52bfc36832de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY1MjgxMQ==", "url": "https://github.com/apache/fineract/pull/722#discussion_r392652811", "bodyText": "Oh, little mistake on my behalf. It escaped my attention. Will patch that.\nThanks", "author": "xurror", "createdAt": "2020-03-15T08:36:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIyNzM0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzMjI5NQ==", "url": "https://github.com/apache/fineract/pull/722#discussion_r390232295", "bodyText": "I hope nobody is going to miss this... \ud83d\ude08", "author": "vorburger", "createdAt": "2020-03-10T10:51:48Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/boot/db/DataSourceProperties.java", "diffHunk": "@@ -78,31 +77,23 @@ public DataSourceProperties(String driverClassName, String protocol, String subP\n      * .createNewDataSourceFor(FineractPlatformTenant)\n      */\n     protected void setDefaults() {\n-        setInitialSize(3);\n+        setMinimumIdle(3);\n         // setMaxIdle(6); -- strange, why?\n         // setMinIdle(3); -- JavaDoc says default is initialSize.. so shouldn't\n         // be needed\n-        if (getValidationQuery() == null) setValidationQuery(\"SELECT 1\");\n-        setTestOnBorrow(true);\n-        setTestOnReturn(true);\n-        setTestWhileIdle(true);\n-        setTimeBetweenEvictionRunsMillis(30000);\n-        setTimeBetweenEvictionRunsMillis(60000);\n-        setLogAbandoned(true);\n-        setSuspectTimeout(60);\n-\n-        setJdbcInterceptors(\"org.apache.tomcat.jdbc.pool.interceptor.ConnectionState;\"\n-                + \"org.apache.tomcat.jdbc.pool.interceptor.StatementFinalizer;org.apache.tomcat.jdbc.pool.interceptor.SlowQueryReport\");", "originalCommit": "1f8920f772fa0892e6bc064b077d52bfc36832de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY1Mjg2OQ==", "url": "https://github.com/apache/fineract/pull/722#discussion_r392652869", "bodyText": "Is it better I just comment it out?", "author": "xurror", "createdAt": "2020-03-15T08:37:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzMjI5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY1OTcwNA==", "url": "https://github.com/apache/fineract/pull/722#discussion_r392659704", "bodyText": "No, just delete it, it's fine.", "author": "vorburger", "createdAt": "2020-03-15T10:20:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzMjI5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzMzQwMg==", "url": "https://github.com/apache/fineract/pull/722#discussion_r390233402", "bodyText": "Noteworthy: We're loosing the initial size; according to https://www.javadoc.io/doc/com.zaxxer/HikariCP/latest/com/zaxxer/hikari/HikariDataSource.html apparently Hikari doesn't have such a property. Oh well.", "author": "vorburger", "createdAt": "2020-03-10T10:53:55Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/service/TomcatJdbcDataSourcePerTenantService.java", "diffHunk": "@@ -85,26 +85,30 @@ private DataSource createNewDataSourceFor(final FineractPlatformTenantConnection\n         // http://www.tomcatexpert.com/blog/2010/04/01/configuring-jdbc-pool-high-concurrency\n \n         // see also org.apache.fineract.DataSourceProperties.setDefaults()\n-         String jdbcUrl = this.driverConfig.constructProtocol(tenantConnectionObj.getSchemaServer(), tenantConnectionObj.getSchemaServerPort(), tenantConnectionObj.getSchemaName()) ;\n-        //final String jdbcUrl = tenantConnectionObj.databaseURL();\n-        final PoolConfiguration poolConfiguration = new PoolProperties();\n-        poolConfiguration.setDriverClassName(this.driverConfig.getDriverClassName());\n-        poolConfiguration.setName(tenantConnectionObj.getSchemaName() + \"_pool\");\n-        poolConfiguration.setUrl(jdbcUrl);\n-        poolConfiguration.setUsername(tenantConnectionObj.getSchemaUsername());\n-        poolConfiguration.setPassword(tenantConnectionObj.getSchemaPassword());\n-\n-        poolConfiguration.setInitialSize(tenantConnectionObj.getInitialSize());", "originalCommit": "1f8920f772fa0892e6bc064b077d52bfc36832de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY1Mjk3Mg==", "url": "https://github.com/apache/fineract/pull/722#discussion_r392652972", "bodyText": "Yeah, I tried as much as possible to replicate the properties that are common to the 2 connection pools", "author": "xurror", "createdAt": "2020-03-15T08:38:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzMzQwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzNDY1Ng==", "url": "https://github.com/apache/fineract/pull/722#discussion_r390234656", "bodyText": "shouldn't we keep this setValidationQuery ? Especially because above in DataSourceProperties.java you did keep it..", "author": "vorburger", "createdAt": "2020-03-10T10:56:14Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/service/TomcatJdbcDataSourcePerTenantService.java", "diffHunk": "@@ -85,26 +85,30 @@ private DataSource createNewDataSourceFor(final FineractPlatformTenantConnection\n         // http://www.tomcatexpert.com/blog/2010/04/01/configuring-jdbc-pool-high-concurrency\n \n         // see also org.apache.fineract.DataSourceProperties.setDefaults()\n-         String jdbcUrl = this.driverConfig.constructProtocol(tenantConnectionObj.getSchemaServer(), tenantConnectionObj.getSchemaServerPort(), tenantConnectionObj.getSchemaName()) ;\n-        //final String jdbcUrl = tenantConnectionObj.databaseURL();\n-        final PoolConfiguration poolConfiguration = new PoolProperties();\n-        poolConfiguration.setDriverClassName(this.driverConfig.getDriverClassName());\n-        poolConfiguration.setName(tenantConnectionObj.getSchemaName() + \"_pool\");\n-        poolConfiguration.setUrl(jdbcUrl);\n-        poolConfiguration.setUsername(tenantConnectionObj.getSchemaUsername());\n-        poolConfiguration.setPassword(tenantConnectionObj.getSchemaPassword());\n-\n-        poolConfiguration.setInitialSize(tenantConnectionObj.getInitialSize());\n-\n-        poolConfiguration.setTestOnBorrow(tenantConnectionObj.isTestOnBorrow());\n-        poolConfiguration.setValidationQuery(\"SELECT 1\");", "originalCommit": "1f8920f772fa0892e6bc064b077d52bfc36832de", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzNzk1NQ==", "url": "https://github.com/apache/fineract/pull/722#discussion_r390237955", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            // https://github.com/brettwooldridge/HikariCP/wiki/MySQL-Configuration\n          \n      \n    \n    \n  \n\nreading https://github.com/brettwooldridge/HikariCP#statement-cache I at first wasn't sure what the following properties do, but then found https://github.com/brettwooldridge/HikariCP/wiki/MySQL-Configuration ... if these are inspired by that, I suggest putting that link inline into the code here, for future readers.", "author": "vorburger", "createdAt": "2020-03-10T11:02:23Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/service/TomcatJdbcDataSourcePerTenantService.java", "diffHunk": "@@ -85,26 +85,30 @@ private DataSource createNewDataSourceFor(final FineractPlatformTenantConnection\n         // http://www.tomcatexpert.com/blog/2010/04/01/configuring-jdbc-pool-high-concurrency\n \n         // see also org.apache.fineract.DataSourceProperties.setDefaults()\n-         String jdbcUrl = this.driverConfig.constructProtocol(tenantConnectionObj.getSchemaServer(), tenantConnectionObj.getSchemaServerPort(), tenantConnectionObj.getSchemaName()) ;\n-        //final String jdbcUrl = tenantConnectionObj.databaseURL();\n-        final PoolConfiguration poolConfiguration = new PoolProperties();\n-        poolConfiguration.setDriverClassName(this.driverConfig.getDriverClassName());\n-        poolConfiguration.setName(tenantConnectionObj.getSchemaName() + \"_pool\");\n-        poolConfiguration.setUrl(jdbcUrl);\n-        poolConfiguration.setUsername(tenantConnectionObj.getSchemaUsername());\n-        poolConfiguration.setPassword(tenantConnectionObj.getSchemaPassword());\n-\n-        poolConfiguration.setInitialSize(tenantConnectionObj.getInitialSize());\n-\n-        poolConfiguration.setTestOnBorrow(tenantConnectionObj.isTestOnBorrow());\n-        poolConfiguration.setValidationQuery(\"SELECT 1\");\n-        poolConfiguration.setValidationInterval(tenantConnectionObj.getValidationInterval());\n-\n-        poolConfiguration.setRemoveAbandoned(tenantConnectionObj.isRemoveAbandoned());\n-        poolConfiguration.setRemoveAbandonedTimeout(tenantConnectionObj.getRemoveAbandonedTimeout());\n-        poolConfiguration.setLogAbandoned(tenantConnectionObj.isLogAbandoned());\n-        poolConfiguration.setAbandonWhenPercentageFull(tenantConnectionObj.getAbandonWhenPercentageFull());\n-        poolConfiguration.setDefaultAutoCommit(true);\n+         String jdbcUrl = this.driverConfig.constructProtocol(tenantConnectionObj.getSchemaServer(), tenantConnectionObj.getSchemaServerPort(), tenantConnectionObj.getSchemaName());\n+\n+        HikariConfig config = new HikariConfig();\n+        config.setDriverClassName(this.driverConfig.getDriverClassName());\n+        config.setPoolName(tenantConnectionObj.getSchemaName() + \"_pool\");\n+        config.setJdbcUrl(jdbcUrl);\n+        config.setUsername(tenantConnectionObj.getSchemaUsername());\n+        config.setPassword(tenantConnectionObj.getSchemaPassword());\n+\n+        config.setValidationTimeout(tenantConnectionObj.getValidationInterval());\n+", "originalCommit": "1f8920f772fa0892e6bc064b077d52bfc36832de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY2MzcyNg==", "url": "https://github.com/apache/fineract/pull/722#discussion_r399663726", "bodyText": "@xurror it looks like we lost this again? I'll merge this, and then raise a follow-up PR for you to review where I'll propose to add something like this back again...", "author": "vorburger", "createdAt": "2020-03-28T13:39:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzNzk1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzODcxMw==", "url": "https://github.com/apache/fineract/pull/722#discussion_r390238713", "bodyText": "https://github.com/brettwooldridge/HikariCP/wiki/MySQL-Configuration suggests false instead of true for maintainTimeStats .. any reason you chose the opposite in (only) this case? Just curious.", "author": "vorburger", "createdAt": "2020-03-10T11:03:50Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/service/TomcatJdbcDataSourcePerTenantService.java", "diffHunk": "@@ -85,26 +85,30 @@ private DataSource createNewDataSourceFor(final FineractPlatformTenantConnection\n         // http://www.tomcatexpert.com/blog/2010/04/01/configuring-jdbc-pool-high-concurrency\n \n         // see also org.apache.fineract.DataSourceProperties.setDefaults()\n-         String jdbcUrl = this.driverConfig.constructProtocol(tenantConnectionObj.getSchemaServer(), tenantConnectionObj.getSchemaServerPort(), tenantConnectionObj.getSchemaName()) ;\n-        //final String jdbcUrl = tenantConnectionObj.databaseURL();\n-        final PoolConfiguration poolConfiguration = new PoolProperties();\n-        poolConfiguration.setDriverClassName(this.driverConfig.getDriverClassName());\n-        poolConfiguration.setName(tenantConnectionObj.getSchemaName() + \"_pool\");\n-        poolConfiguration.setUrl(jdbcUrl);\n-        poolConfiguration.setUsername(tenantConnectionObj.getSchemaUsername());\n-        poolConfiguration.setPassword(tenantConnectionObj.getSchemaPassword());\n-\n-        poolConfiguration.setInitialSize(tenantConnectionObj.getInitialSize());\n-\n-        poolConfiguration.setTestOnBorrow(tenantConnectionObj.isTestOnBorrow());\n-        poolConfiguration.setValidationQuery(\"SELECT 1\");\n-        poolConfiguration.setValidationInterval(tenantConnectionObj.getValidationInterval());\n-\n-        poolConfiguration.setRemoveAbandoned(tenantConnectionObj.isRemoveAbandoned());\n-        poolConfiguration.setRemoveAbandonedTimeout(tenantConnectionObj.getRemoveAbandonedTimeout());\n-        poolConfiguration.setLogAbandoned(tenantConnectionObj.isLogAbandoned());\n-        poolConfiguration.setAbandonWhenPercentageFull(tenantConnectionObj.getAbandonWhenPercentageFull());\n-        poolConfiguration.setDefaultAutoCommit(true);\n+         String jdbcUrl = this.driverConfig.constructProtocol(tenantConnectionObj.getSchemaServer(), tenantConnectionObj.getSchemaServerPort(), tenantConnectionObj.getSchemaName());\n+\n+        HikariConfig config = new HikariConfig();\n+        config.setDriverClassName(this.driverConfig.getDriverClassName());\n+        config.setPoolName(tenantConnectionObj.getSchemaName() + \"_pool\");\n+        config.setJdbcUrl(jdbcUrl);\n+        config.setUsername(tenantConnectionObj.getSchemaUsername());\n+        config.setPassword(tenantConnectionObj.getSchemaPassword());\n+\n+        config.setValidationTimeout(tenantConnectionObj.getValidationInterval());\n+\n+        config.addDataSourceProperty(\"cachePrepStmts\", \"true\");\n+        config.addDataSourceProperty(\"prepStmtCacheSize\", \"250\");\n+        config.addDataSourceProperty(\"prepStmtCacheSqlLimit\", \"2048\");\n+        config.addDataSourceProperty(\"useServerPrepStmts\", \"true\");\n+        config.addDataSourceProperty(\"useLocalSessionState\", \"true\");\n+\n+        config.addDataSourceProperty(\"rewriteBatchedStatements\", \"true\");\n+        config.addDataSourceProperty(\"cacheResultSetMetadata\", \"true\");\n+        config.addDataSourceProperty(\"cacheServerConfiguration\", \"true\");\n+        config.addDataSourceProperty(\"elideSetAutoCommits\", \"true\");\n+        config.addDataSourceProperty(\"maintainTimeStats\", \"true\");", "originalCommit": "1f8920f772fa0892e6bc064b077d52bfc36832de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY2NDY5MQ==", "url": "https://github.com/apache/fineract/pull/722#discussion_r399664691", "bodyText": "@xurror this also didn't seem to have been done? I'll propose to change this in my follow-up PR.", "author": "vorburger", "createdAt": "2020-03-28T13:50:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzODcxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzOTA5NA==", "url": "https://github.com/apache/fineract/pull/722#discussion_r390239094", "bodyText": "I would delete this entire old comment at this opportunity.", "author": "vorburger", "createdAt": "2020-03-10T11:04:33Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/service/TomcatJdbcDataSourcePerTenantService.java", "diffHunk": "@@ -85,26 +85,30 @@ private DataSource createNewDataSourceFor(final FineractPlatformTenantConnection\n         // http://www.tomcatexpert.com/blog/2010/04/01/configuring-jdbc-pool-high-concurrency\n \n         // see also org.apache.fineract.DataSourceProperties.setDefaults()\n-         String jdbcUrl = this.driverConfig.constructProtocol(tenantConnectionObj.getSchemaServer(), tenantConnectionObj.getSchemaServerPort(), tenantConnectionObj.getSchemaName()) ;\n-        //final String jdbcUrl = tenantConnectionObj.databaseURL();\n-        final PoolConfiguration poolConfiguration = new PoolProperties();\n-        poolConfiguration.setDriverClassName(this.driverConfig.getDriverClassName());\n-        poolConfiguration.setName(tenantConnectionObj.getSchemaName() + \"_pool\");\n-        poolConfiguration.setUrl(jdbcUrl);\n-        poolConfiguration.setUsername(tenantConnectionObj.getSchemaUsername());\n-        poolConfiguration.setPassword(tenantConnectionObj.getSchemaPassword());\n-\n-        poolConfiguration.setInitialSize(tenantConnectionObj.getInitialSize());\n-\n-        poolConfiguration.setTestOnBorrow(tenantConnectionObj.isTestOnBorrow());\n-        poolConfiguration.setValidationQuery(\"SELECT 1\");\n-        poolConfiguration.setValidationInterval(tenantConnectionObj.getValidationInterval());\n-\n-        poolConfiguration.setRemoveAbandoned(tenantConnectionObj.isRemoveAbandoned());\n-        poolConfiguration.setRemoveAbandonedTimeout(tenantConnectionObj.getRemoveAbandonedTimeout());\n-        poolConfiguration.setLogAbandoned(tenantConnectionObj.isLogAbandoned());\n-        poolConfiguration.setAbandonWhenPercentageFull(tenantConnectionObj.getAbandonWhenPercentageFull());\n-        poolConfiguration.setDefaultAutoCommit(true);\n+         String jdbcUrl = this.driverConfig.constructProtocol(tenantConnectionObj.getSchemaServer(), tenantConnectionObj.getSchemaServerPort(), tenantConnectionObj.getSchemaName());\n+\n+        HikariConfig config = new HikariConfig();\n+        config.setDriverClassName(this.driverConfig.getDriverClassName());\n+        config.setPoolName(tenantConnectionObj.getSchemaName() + \"_pool\");\n+        config.setJdbcUrl(jdbcUrl);\n+        config.setUsername(tenantConnectionObj.getSchemaUsername());\n+        config.setPassword(tenantConnectionObj.getSchemaPassword());\n+\n+        config.setValidationTimeout(tenantConnectionObj.getValidationInterval());\n+\n+        config.addDataSourceProperty(\"cachePrepStmts\", \"true\");\n+        config.addDataSourceProperty(\"prepStmtCacheSize\", \"250\");\n+        config.addDataSourceProperty(\"prepStmtCacheSqlLimit\", \"2048\");\n+        config.addDataSourceProperty(\"useServerPrepStmts\", \"true\");\n+        config.addDataSourceProperty(\"useLocalSessionState\", \"true\");\n+\n+        config.addDataSourceProperty(\"rewriteBatchedStatements\", \"true\");\n+        config.addDataSourceProperty(\"cacheResultSetMetadata\", \"true\");\n+        config.addDataSourceProperty(\"cacheServerConfiguration\", \"true\");\n+        config.addDataSourceProperty(\"elideSetAutoCommits\", \"true\");\n+        config.addDataSourceProperty(\"maintainTimeStats\", \"true\");\n+\n+        config.setAutoCommit(true);\n \n         /**", "originalCommit": "1f8920f772fa0892e6bc064b077d52bfc36832de", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MjY4Mg==", "url": "https://github.com/apache/fineract/pull/722#discussion_r390252682", "bodyText": "So this class is actually one I wrote myself, many many years ago, to get pure Spring Boot working (which subsequently got broken again somehow; fixing it is the point of https://issues.apache.org/jira/browse/FINERACT-764 and https://issues.apache.org/jira/browse/FINERACT-730), because as long as there was a DS in JNDI from Tomcat's server.xml, this was needed. But now that with this change there is an equivalent hikariTenantDataSource bean already, we should be able to just get rid of this class entirely... do you want to try to just delete it, and see if that just works? Anything that requires this bean should now get it from your new hikariDataSource.xml - makes sense?", "author": "vorburger", "createdAt": "2020-03-10T11:34:25Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/boot/db/DataSourceConfiguration.java", "diffHunk": "@@ -38,19 +39,19 @@\n     @Autowired JDBCDriverConfig config ;\n \n     @Bean\n-    public DataSourceProperties dataSourceProperties() {\n-    return new DataSourceProperties(config.getDriverClassName(), config.getProtocol(), config.getSubProtocol(), config.getPort());\n+    public DataSourceProperties DataSourceProperties() {\n+        return new DataSourceProperties(config.getDriverClassName(), config.getProtocol(), config.getSubProtocol(), config.getPort());\n     }\n \n     @Bean\n-    public DataSource tenantDataSourceJndi() {\n-    PoolConfiguration p = getProperties();\n-        org.apache.tomcat.jdbc.pool.DataSource ds = new org.apache.tomcat.jdbc.pool.DataSource(p);\n-        logger.info(\"Created new DataSource; url=\" + p.getUrl());\n+    public DataSource hikariTenantDataSource() {", "originalCommit": "1f8920f772fa0892e6bc064b077d52bfc36832de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY1MzIxMA==", "url": "https://github.com/apache/fineract/pull/722#discussion_r392653210", "bodyText": "I would check that out.", "author": "xurror", "createdAt": "2020-03-15T08:42:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MjY4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1NDQ5NQ==", "url": "https://github.com/apache/fineract/pull/722#discussion_r390254495", "bodyText": "If you manage to delete DataSourceConfiguration.java (above), then I suspect we can delete this entire class as well.. Or is there anything else left that uses this?", "author": "vorburger", "createdAt": "2020-03-10T11:38:22Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/boot/db/DataSourceProperties.java", "diffHunk": "@@ -31,8 +31,7 @@\n  * -Dfineract.datasource.port=3307.\n  */\n // NOT a @Component - we do not want this to picked up by component scan, only explicitly declared in DataSourceConfiguration (if that's active)\n-public class DataSourceProperties extends PoolProperties {\n-\n+public class DataSourceProperties extends HikariConfig {", "originalCommit": "1f8920f772fa0892e6bc064b077d52bfc36832de", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1NTM1NA==", "url": "https://github.com/apache/fineract/pull/722#discussion_r390255354", "bodyText": "Actually, I wonder if it would somehow be possible to read this from the bean for the tenants DB, instead of having to repeat and hard-cod it here... but we could look into that in a follow-up PR as well, your call.", "author": "vorburger", "createdAt": "2020-03-10T11:40:04Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/service/TomcatJdbcDataSourcePerTenantService.java", "diffHunk": "@@ -85,26 +85,30 @@ private DataSource createNewDataSourceFor(final FineractPlatformTenantConnection\n         // http://www.tomcatexpert.com/blog/2010/04/01/configuring-jdbc-pool-high-concurrency\n \n         // see also org.apache.fineract.DataSourceProperties.setDefaults()\n-         String jdbcUrl = this.driverConfig.constructProtocol(tenantConnectionObj.getSchemaServer(), tenantConnectionObj.getSchemaServerPort(), tenantConnectionObj.getSchemaName()) ;\n-        //final String jdbcUrl = tenantConnectionObj.databaseURL();\n-        final PoolConfiguration poolConfiguration = new PoolProperties();\n-        poolConfiguration.setDriverClassName(this.driverConfig.getDriverClassName());\n-        poolConfiguration.setName(tenantConnectionObj.getSchemaName() + \"_pool\");\n-        poolConfiguration.setUrl(jdbcUrl);\n-        poolConfiguration.setUsername(tenantConnectionObj.getSchemaUsername());\n-        poolConfiguration.setPassword(tenantConnectionObj.getSchemaPassword());\n-\n-        poolConfiguration.setInitialSize(tenantConnectionObj.getInitialSize());\n-\n-        poolConfiguration.setTestOnBorrow(tenantConnectionObj.isTestOnBorrow());\n-        poolConfiguration.setValidationQuery(\"SELECT 1\");\n-        poolConfiguration.setValidationInterval(tenantConnectionObj.getValidationInterval());\n-\n-        poolConfiguration.setRemoveAbandoned(tenantConnectionObj.isRemoveAbandoned());\n-        poolConfiguration.setRemoveAbandonedTimeout(tenantConnectionObj.getRemoveAbandonedTimeout());\n-        poolConfiguration.setLogAbandoned(tenantConnectionObj.isLogAbandoned());\n-        poolConfiguration.setAbandonWhenPercentageFull(tenantConnectionObj.getAbandonWhenPercentageFull());\n-        poolConfiguration.setDefaultAutoCommit(true);\n+         String jdbcUrl = this.driverConfig.constructProtocol(tenantConnectionObj.getSchemaServer(), tenantConnectionObj.getSchemaServerPort(), tenantConnectionObj.getSchemaName());\n+\n+        HikariConfig config = new HikariConfig();\n+        config.setDriverClassName(this.driverConfig.getDriverClassName());\n+        config.setPoolName(tenantConnectionObj.getSchemaName() + \"_pool\");\n+        config.setJdbcUrl(jdbcUrl);\n+        config.setUsername(tenantConnectionObj.getSchemaUsername());\n+        config.setPassword(tenantConnectionObj.getSchemaPassword());\n+\n+        config.setValidationTimeout(tenantConnectionObj.getValidationInterval());\n+\n+        config.addDataSourceProperty(\"cachePrepStmts\", \"true\");\n+        config.addDataSourceProperty(\"prepStmtCacheSize\", \"250\");\n+        config.addDataSourceProperty(\"prepStmtCacheSqlLimit\", \"2048\");\n+        config.addDataSourceProperty(\"useServerPrepStmts\", \"true\");\n+        config.addDataSourceProperty(\"useLocalSessionState\", \"true\");\n+\n+        config.addDataSourceProperty(\"rewriteBatchedStatements\", \"true\");\n+        config.addDataSourceProperty(\"cacheResultSetMetadata\", \"true\");\n+        config.addDataSourceProperty(\"cacheServerConfiguration\", \"true\");\n+        config.addDataSourceProperty(\"elideSetAutoCommits\", \"true\");", "originalCommit": "1f8920f772fa0892e6bc064b077d52bfc36832de", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "19481c504b57b66180472472ce1ef141b88f844e", "url": "https://github.com/apache/fineract/commit/19481c504b57b66180472472ce1ef141b88f844e", "message": "FINERACT-796\n\nUse Hikari instead of Tomcat Connection Pool\n - Created hikari connection pool bean\n - Configured connection parameters to match hikari\n - Removed tomcat-jdbc and dbcp\n - Remove unused classes\n - Add Hikari to logback\n - update hikaridatasource bean\n\ncloses https://issues.apache.org/jira/browse/FINERACT-796\n\nremove hikaricp import from gradle files\n\nmore specific bean config\n\n- Set up datasource properties\n- Cleanup unused classes\n- Add hikari to logback", "committedDate": "2020-03-16T10:26:49Z", "type": "forcePushed"}, {"oid": "e8ac2cd8095bde2105c22a7e1432f7bcf4306b10", "url": "https://github.com/apache/fineract/commit/e8ac2cd8095bde2105c22a7e1432f7bcf4306b10", "message": "FINERACT-796\n\nUse Hikari instead of Tomcat Connection Pool\n - Created hikari connection pool bean\n - Configured connection parameters to match hikari\n - Removed tomcat-jdbc and dbcp\n - Remove unused classes\n - Add Hikari to logback\n - update hikaridatasource bean\n\ncloses https://issues.apache.org/jira/browse/FINERACT-796\n\nremove hikaricp import from gradle files\n\nmore specific bean config\n\n- Set up datasource properties\n- Cleanup unused classes\n- Add hikari to logback", "committedDate": "2020-03-16T10:31:36Z", "type": "forcePushed"}, {"oid": "af055bc4f12a2745ae717ce8b8942223df25aab4", "url": "https://github.com/apache/fineract/commit/af055bc4f12a2745ae717ce8b8942223df25aab4", "message": "FINERACT-796\n\nUse Hikari instead of Tomcat Connection Pool\n - Created hikari connection pool bean\n - Configured connection parameters to match hikari\n - Removed tomcat-jdbc and dbcp\n - Remove unused classes\n - Add Hikari to logback\n - update hikaridatasource bean\n\ncloses https://issues.apache.org/jira/browse/FINERACT-796\n\nremove hikaricp import from gradle files\n\nmore specific bean config\n\n- Set up datasource properties\n- Cleanup unused classes\n- Add hikari to logback", "committedDate": "2020-03-16T11:40:56Z", "type": "forcePushed"}, {"oid": "6fc08355e4f4e15f412af372bc878520b36a282d", "url": "https://github.com/apache/fineract/commit/6fc08355e4f4e15f412af372bc878520b36a282d", "message": "FINERACT-796\n\nUse Hikari instead of Tomcat Connection Pool\n - Created hikari connection pool bean\n - Configured connection parameters to match hikari\n - Removed tomcat-jdbc and dbcp\n - Remove unused classes\n - Add Hikari to logback\n - update hikaridatasource bean\n\ncloses https://issues.apache.org/jira/browse/FINERACT-796\n\nremove hikaricp import from gradle files\n\nmore specific bean config\n\n- Set up datasource properties\n- Cleanup unused classes\n- Add hikari to logback", "committedDate": "2020-03-26T13:00:28Z", "type": "commit"}, {"oid": "6fc08355e4f4e15f412af372bc878520b36a282d", "url": "https://github.com/apache/fineract/commit/6fc08355e4f4e15f412af372bc878520b36a282d", "message": "FINERACT-796\n\nUse Hikari instead of Tomcat Connection Pool\n - Created hikari connection pool bean\n - Configured connection parameters to match hikari\n - Removed tomcat-jdbc and dbcp\n - Remove unused classes\n - Add Hikari to logback\n - update hikaridatasource bean\n\ncloses https://issues.apache.org/jira/browse/FINERACT-796\n\nremove hikaricp import from gradle files\n\nmore specific bean config\n\n- Set up datasource properties\n- Cleanup unused classes\n- Add hikari to logback", "committedDate": "2020-03-26T13:00:28Z", "type": "forcePushed"}]}