{"pr_number": 1019, "pr_title": "FINERACT-821 Added and Enforced HideUtilityClassConstructor checkstyle", "pr_createdAt": "2020-06-09T10:16:47Z", "pr_url": "https://github.com/apache/fineract/pull/1019", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzExNDM5MQ==", "url": "https://github.com/apache/fineract/pull/1019#discussion_r443114391", "bodyText": "This is weird / un-usual... I think the typical solution for this is to make the constructor private, and/or (?) declare the class to be final so that there can be no subclasses.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected ClientStatusChecker() {\n          \n          \n            \n                    // prevents calls from subclass(if any)\n          \n          \n            \n                    throw new UnsupportedOperationException();\n          \n          \n            \n                }\n          \n          \n            \n                private ClientStatusChecker() {\n          \n          \n            \n                }", "author": "vorburger", "createdAt": "2020-06-20T08:49:13Z", "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/ClientStatusChecker.java", "diffHunk": "@@ -25,6 +25,12 @@\n import org.slf4j.LoggerFactory;\n \n public class ClientStatusChecker {\n+\n+    protected ClientStatusChecker() {\n+        // prevents calls from subclass(if any)\n+        throw new UnsupportedOperationException();\n+    }", "originalCommit": "4f65d50e50ebe9a635d4a6e5b055c3a9e3e786dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEwNDczMg==", "url": "https://github.com/apache/fineract/pull/1019#discussion_r444104732", "bodyText": "Agreed! Making the changes", "author": "thesmallstar", "createdAt": "2020-06-23T09:54:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzExNDM5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzExNDU1Nw==", "url": "https://github.com/apache/fineract/pull/1019#discussion_r443114557", "bodyText": "Question: Is this (static invocation of static methods) something you have found a way to make your IDE do automatically? If yes, then this would even allow us to enable Error Prone's MethodCanBeStatic in FINERACT-822... but doing it manually for 301 cases (according to @percyashu) is probably not \"worth it\" (https://en.wikipedia.org/wiki/Diminishing_returns).", "author": "vorburger", "createdAt": "2020-06-20T08:52:14Z", "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/bulkimport/populator/client/ClientEntityWorkbookPopulatorTest.java", "diffHunk": "@@ -60,9 +60,8 @@ public void setup(){\n     @Test\n     public void testClientEntityWorkbookPopulate() throws IOException {\n         //in order to populate helper sheets\n-        StaffHelper staffHelper=new StaffHelper();\n         requestSpec.header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON);\n-        Integer outcome_staff_creation =staffHelper.createStaff(requestSpec,responseSpec);\n+        Integer outcome_staff_creation =StaffHelper.createStaff(requestSpec,responseSpec);", "originalCommit": "4f65d50e50ebe9a635d4a6e5b055c3a9e3e786dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEwNTYyOA==", "url": "https://github.com/apache/fineract/pull/1019#discussion_r444105628", "bodyText": "Nope, it is all manual clean-up. Just that my IDE(vscode) does give a suggestion for this while writing code which makes it easier to spot.\nIn this case, since I am removing the object I have \"no other option\" that making it static it throws out an error.", "author": "thesmallstar", "createdAt": "2020-06-23T09:56:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzExNDU1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzExNDYyOQ==", "url": "https://github.com/apache/fineract/pull/1019#discussion_r443114629", "bodyText": "this is actually a very nice clean up - as it makes absolutely no sense to pass requestSpec, responseSpec twice", "author": "vorburger", "createdAt": "2020-06-20T08:53:24Z", "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/bulkimport/populator/loan/LoanWorkbookPopulatorTest.java", "diffHunk": "@@ -64,18 +64,15 @@ public void testLoanWorkbookPopulate() throws IOException {\n         Assert.assertNotNull(\"Could not create office\" ,outcome_office_creation);\n \n         //in order to populate helper sheets\n-        ClientHelper clientHelper=new ClientHelper(requestSpec,responseSpec);\n-        Integer outcome_client_creation=clientHelper.createClient(requestSpec,responseSpec);", "originalCommit": "4f65d50e50ebe9a635d4a6e5b055c3a9e3e786dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEwNTc2OQ==", "url": "https://github.com/apache/fineract/pull/1019#discussion_r444105769", "bodyText": "Yes!", "author": "thesmallstar", "createdAt": "2020-06-23T09:56:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzExNDYyOQ=="}], "type": "inlineReview"}, {"oid": "6362c3b8a9295b702d80d8dfd8fe59921b12735c", "url": "https://github.com/apache/fineract/commit/6362c3b8a9295b702d80d8dfd8fe59921b12735c", "message": "FINERACT-821 Added and Enforced HideUtilityClassConstructor checkstyle", "committedDate": "2020-08-09T01:18:25Z", "type": "commit"}, {"oid": "6362c3b8a9295b702d80d8dfd8fe59921b12735c", "url": "https://github.com/apache/fineract/commit/6362c3b8a9295b702d80d8dfd8fe59921b12735c", "message": "FINERACT-821 Added and Enforced HideUtilityClassConstructor checkstyle", "committedDate": "2020-08-09T01:18:25Z", "type": "forcePushed"}]}