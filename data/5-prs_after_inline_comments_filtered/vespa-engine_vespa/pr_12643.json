{"pr_number": 12643, "pr_title": "Allocate dedicated nodes when no nodes are specified", "pr_createdAt": "2020-03-20T11:46:54Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/12643", "timeline": [{"oid": "d9671728c339a75e0d747e61a32dcbb9e6877ef2", "url": "https://github.com/vespa-engine/vespa/commit/d9671728c339a75e0d747e61a32dcbb9e6877ef2", "message": "Allocate dedicated nodes when no nodes are specified\n\nGuarded by feature flag.", "committedDate": "2020-03-20T10:15:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU5NDYyMg==", "url": "https://github.com/vespa-engine/vespa/pull/12643#discussion_r395594622", "bodyText": "Minor: You could use the request() method that creates a builder here", "author": "hmusum", "createdAt": "2020-03-20T12:08:48Z", "path": "config-model/src/main/java/com/yahoo/vespa/model/container/xml/ContainerModelBuilder.java", "diffHunk": "@@ -652,29 +648,53 @@ private static void applyMemoryPercentage(ApplicationContainerCluster cluster, S\n         }\n     }\n \n-    /** Creates a single host when there is no nodes tag */\n-    private HostResource allocateSingleNodeHost(ApplicationContainerCluster cluster, DeployLogger logger, Element containerElement, ConfigModelContext context) {\n+    /** Allocate a container cluster without a nodes tag */\n+    private List<ApplicationContainer> allocateWithoutNodesTag(ApplicationContainerCluster cluster, Element containerElement, ConfigModelContext context) {\n         DeployState deployState = context.getDeployState();\n         HostSystem hostSystem = cluster.hostSystem();\n         if (deployState.isHosted()) {\n-            Optional<HostResource> singleContentHost = getHostResourceFromContentClusters(cluster, containerElement, context);\n-            if (singleContentHost.isPresent()) { // there is a content cluster; put the container on its first node \n-                return singleContentHost.get();\n+            // TODO(mpolden): The old way of allocating. Remove when 7.198 is the oldest model in production\n+            if (!context.properties().useDedicatedNodesWhenUnspecified()) {\n+                Optional<HostResource> singleContentHost = getHostResourceFromContentClusters(cluster, containerElement, context);\n+                if (singleContentHost.isPresent()) { // there is a content cluster; put the container on its first node\n+                    return singleHostContainerCluster(cluster, singleContentHost.get(), context);\n+                }\n+                else { // request 1 node\n+                    ClusterSpec clusterSpec = ClusterSpec.request(ClusterSpec.Type.container, ClusterSpec.Id.from(cluster.getName()))\n+                                                         .vespaVersion(deployState.getWantedNodeVespaVersion())\n+                                                         .dockerImageRepo(deployState.getWantedDockerImageRepo())\n+                                                         .build();\n+                    Capacity capacity = Capacity.fromCount(1,\n+                                                           Optional.empty(),\n+                                                           false,\n+                                                           ! deployState.getProperties().isBootstrap());\n+                    HostResource host = hostSystem.allocateHosts(clusterSpec, capacity, 1, log).keySet().iterator().next();\n+                    return singleHostContainerCluster(cluster, host, context);\n+                }\n             }\n-            else { // request 1 node\n-                ClusterSpec clusterSpec = ClusterSpec.request(ClusterSpec.Type.container, ClusterSpec.Id.from(cluster.getName()))\n-                        .vespaVersion(deployState.getWantedNodeVespaVersion())\n-                        .dockerImageRepo(deployState.getWantedDockerImageRepo())\n-                        .build();\n-                Capacity capacity = Capacity.fromCount(1,\n-                                                       Optional.empty(),\n-                                                       false,\n-                                                       ! deployState.getProperties().isBootstrap());\n-                return hostSystem.allocateHosts(clusterSpec, capacity, 1, logger).keySet().iterator().next();\n-            }\n-        } else {\n-            return hostSystem.getHost(Container.SINGLENODE_CONTAINER_SERVICESPEC);\n-        }\n+            // request just enough nodes to satisfy environment capacity requirement\n+            ClusterSpec clusterSpec = ClusterSpec.request(ClusterSpec.Type.container,", "originalCommit": "d9671728c339a75e0d747e61a32dcbb9e6877ef2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU5NDg0OQ==", "url": "https://github.com/vespa-engine/vespa/pull/12643#discussion_r395594849", "bodyText": "\" ... AND feature flag is true in all zones\"?", "author": "hmusum", "createdAt": "2020-03-20T12:09:15Z", "path": "config-model/src/main/java/com/yahoo/vespa/model/container/xml/ContainerModelBuilder.java", "diffHunk": "@@ -652,29 +648,53 @@ private static void applyMemoryPercentage(ApplicationContainerCluster cluster, S\n         }\n     }\n \n-    /** Creates a single host when there is no nodes tag */\n-    private HostResource allocateSingleNodeHost(ApplicationContainerCluster cluster, DeployLogger logger, Element containerElement, ConfigModelContext context) {\n+    /** Allocate a container cluster without a nodes tag */\n+    private List<ApplicationContainer> allocateWithoutNodesTag(ApplicationContainerCluster cluster, Element containerElement, ConfigModelContext context) {\n         DeployState deployState = context.getDeployState();\n         HostSystem hostSystem = cluster.hostSystem();\n         if (deployState.isHosted()) {\n-            Optional<HostResource> singleContentHost = getHostResourceFromContentClusters(cluster, containerElement, context);\n-            if (singleContentHost.isPresent()) { // there is a content cluster; put the container on its first node \n-                return singleContentHost.get();\n+            // TODO(mpolden): The old way of allocating. Remove when 7.198 is the oldest model in production", "originalCommit": "d9671728c339a75e0d747e61a32dcbb9e6877ef2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2d1bf0d4fb7f8c78c5eb796dd44be7ee2c08c581", "url": "https://github.com/vespa-engine/vespa/commit/2d1bf0d4fb7f8c78c5eb796dd44be7ee2c08c581", "message": "Use builder", "committedDate": "2020-03-20T12:26:16Z", "type": "commit"}]}