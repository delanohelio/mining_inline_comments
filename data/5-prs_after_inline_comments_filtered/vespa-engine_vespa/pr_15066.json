{"pr_number": 15066, "pr_title": "Handle exclusiveTo in allocation", "pr_createdAt": "2020-10-28T13:24:56Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/15066", "timeline": [{"oid": "e1d25abb24f5f318a8f25726d21acff3c8ccac20", "url": "https://github.com/vespa-engine/vespa/commit/e1d25abb24f5f318a8f25726d21acff3c8ccac20", "message": "Handle exclusiveTo in allocation", "committedDate": "2020-10-28T13:24:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUwMjQ4Nw==", "url": "https://github.com/vespa-engine/vespa/pull/15066#discussion_r513502487", "bodyText": "Space -> Spare", "author": "hakonhall", "createdAt": "2020-10-28T14:44:51Z", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/NodePrioritizer.java", "diffHunk": "@@ -71,9 +71,14 @@\n                 .filter(clusterSpec.group()::equals)\n                 .count();\n \n-        this.allocateForReplacement = isReplacement(nodesInCluster.size(),\n-                                                    nodesInCluster.state(Node.State.failed).size());\n-        this.canAllocateNew = requestedNodes instanceof NodeSpec.CountNodeSpec;\n+        // In dynamically provisioned zones, we can always take spare hosts since we can provision new on-demand,\n+        // NodeCandidate::compareTo will ensure that they will not be used until there is no room elsewhere.\n+        // In non-dynamically provisioned zones, we only allow allocating to spare hosts to replace failed nodes.\n+        this.canAllocateToSpaceHosts = isReplacement(", "originalCommit": "e1d25abb24f5f318a8f25726d21acff3c8ccac20", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUwNDI1Ng==", "url": "https://github.com/vespa-engine/vespa/pull/15066#discussion_r513504256", "bodyText": "Nit:  put dynamicProvisioning as the first condition of the || to short-circuit isReplacement expression if true", "author": "hakonhall", "createdAt": "2020-10-28T14:46:56Z", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/NodePrioritizer.java", "diffHunk": "@@ -71,9 +71,14 @@\n                 .filter(clusterSpec.group()::equals)\n                 .count();\n \n-        this.allocateForReplacement = isReplacement(nodesInCluster.size(),\n-                                                    nodesInCluster.state(Node.State.failed).size());\n-        this.canAllocateNew = requestedNodes instanceof NodeSpec.CountNodeSpec;\n+        // In dynamically provisioned zones, we can always take spare hosts since we can provision new on-demand,\n+        // NodeCandidate::compareTo will ensure that they will not be used until there is no room elsewhere.\n+        // In non-dynamically provisioned zones, we only allow allocating to spare hosts to replace failed nodes.\n+        this.canAllocateToSpaceHosts = isReplacement(\n+                nodesInCluster.size(), nodesInCluster.state(Node.State.failed).size()) || dynamicProvisioning;", "originalCommit": "e1d25abb24f5f318a8f25726d21acff3c8ccac20", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUwODc3OQ==", "url": "https://github.com/vespa-engine/vespa/pull/15066#discussion_r513508779", "bodyText": "!dynamicProvisioning || --> dynamicProvisioning && ?", "author": "hakonhall", "createdAt": "2020-10-28T14:52:07Z", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/NodePrioritizer.java", "diffHunk": "@@ -71,9 +71,14 @@\n                 .filter(clusterSpec.group()::equals)\n                 .count();\n \n-        this.allocateForReplacement = isReplacement(nodesInCluster.size(),\n-                                                    nodesInCluster.state(Node.State.failed).size());\n-        this.canAllocateNew = requestedNodes instanceof NodeSpec.CountNodeSpec;\n+        // In dynamically provisioned zones, we can always take spare hosts since we can provision new on-demand,\n+        // NodeCandidate::compareTo will ensure that they will not be used until there is no room elsewhere.\n+        // In non-dynamically provisioned zones, we only allow allocating to spare hosts to replace failed nodes.\n+        this.canAllocateToSpaceHosts = isReplacement(\n+                nodesInCluster.size(), nodesInCluster.state(Node.State.failed).size()) || dynamicProvisioning;\n+        // Do not allocate new nodes for exclusive deployments in dynamically provisioned zones: provision new host instead.\n+        this.canAllocateNew = requestedNodes instanceof NodeSpec.CountNodeSpec\n+                && (!dynamicProvisioning || !requestedNodes.isExclusive());", "originalCommit": "e1d25abb24f5f318a8f25726d21acff3c8ccac20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUyMDQzNQ==", "url": "https://github.com/vespa-engine/vespa/pull/15066#discussion_r513520435", "bodyText": "Then we wouldn't allocate new nodes in non-dynamically provisioned zones? This should say that we can allocate new nodes on hosts if:\n\nThis is a deployment with count spec\nThis is not an exclusive deployment to dynamically provisioned zone", "author": "freva", "createdAt": "2020-10-28T15:05:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUwODc3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYyNzM5OQ==", "url": "https://github.com/vespa-engine/vespa/pull/15066#discussion_r513627399", "bodyText": "I see, I confused canAllocateNew with \"can allocate new host\" which has the opposite meaning in that case.", "author": "hakonhall", "createdAt": "2020-10-28T17:22:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUwODc3OQ=="}], "type": "inlineReview"}, {"oid": "d3e7cdbd04ede4c172181d006704084f02ae6c61", "url": "https://github.com/vespa-engine/vespa/commit/d3e7cdbd04ede4c172181d006704084f02ae6c61", "message": "Fix typo", "committedDate": "2020-10-28T15:09:25Z", "type": "commit"}]}