{"pr_number": 13651, "pr_title": "Execute Junit tests in container", "pr_createdAt": "2020-06-22T06:57:12Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/13651", "timeline": [{"oid": "e2dace4bc4f72e86a671664cb1b32eea48361cfb", "url": "https://github.com/vespa-engine/vespa/commit/e2dace4bc4f72e86a671664cb1b32eea48361cfb", "message": "Execute Junit tests in container", "committedDate": "2020-06-22T06:55:36Z", "type": "commit"}, {"oid": "b580bf96165691622f19e73d445f346fe29fe74f", "url": "https://github.com/vespa-engine/vespa/commit/b580bf96165691622f19e73d445f346fe29fe74f", "message": "Move configuration of test runtime to test invocation", "committedDate": "2020-06-22T11:08:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ4ODIwNQ==", "url": "https://github.com/vespa-engine/vespa/pull/13651#discussion_r443488205", "bodyText": "Consider using logging framework instead", "author": "bjorncs", "createdAt": "2020-06-22T11:18:23Z", "path": "tenant-cd-api/src/main/java/ai/vespa/hosted/cd/TestRuntime.java", "diffHunk": "@@ -13,8 +16,20 @@\n  */\n public interface TestRuntime {\n     static TestRuntime get() {\n-        ServiceLoader<TestRuntime> serviceLoader = ServiceLoader.load(TestRuntime.class);\n-        return serviceLoader.findFirst().orElseThrow(() -> new RuntimeException(\"No TestRuntime implementation found\"));\n+        var classloader = TestRuntime.class.getClassLoader();\n+\n+        System.out.println(\"classloader.toString() = \" + classloader.toString());", "originalCommit": "b580bf96165691622f19e73d445f346fe29fe74f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ5MTIyNg==", "url": "https://github.com/vespa-engine/vespa/pull/13651#discussion_r443491226", "bodyText": "A public static final field that is a mutable object is a bit awkward\nfor an interface. Should we make this an abstract class instead?", "author": "bjorncs", "createdAt": "2020-06-22T11:25:03Z", "path": "tenant-cd-api/src/main/java/ai/vespa/hosted/cd/internal/TestRuntimeProvider.java", "diffHunk": "@@ -0,0 +1,24 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package ai.vespa.hosted.cd.internal;\n+\n+import ai.vespa.hosted.cd.TestRuntime;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * @author mortent\n+ */\n+public interface TestRuntimeProvider  {\n+\n+    static final AtomicReference<TestRuntime> testRuntime = new AtomicReference<>();", "originalCommit": "b580bf96165691622f19e73d445f346fe29fe74f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ5MjcyMg==", "url": "https://github.com/vespa-engine/vespa/pull/13651#discussion_r443492722", "bodyText": "Return unsupported method if not POST.", "author": "bjorncs", "createdAt": "2020-06-22T11:28:14Z", "path": "vespa-osgi-testrunner/src/main/java/com/yahoo/vespa/testrunner/JunitHandler.java", "diffHunk": "@@ -0,0 +1,71 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.testrunner;\n+\n+import ai.vespa.hosted.cd.internal.TestRuntimeProvider;\n+import com.google.inject.Inject;\n+import com.yahoo.container.handler.metrics.JsonResponse;\n+import com.yahoo.container.jdisc.HttpRequest;\n+import com.yahoo.container.jdisc.HttpResponse;\n+import com.yahoo.container.jdisc.LoggingRequestHandler;\n+import com.yahoo.container.logging.AccessLog;\n+import com.yahoo.io.IOUtils;\n+import com.yahoo.restapi.ErrorResponse;\n+import com.yahoo.restapi.MessageResponse;\n+import org.osgi.framework.Bundle;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.concurrent.Executor;\n+import java.util.function.Function;\n+\n+/**\n+ * @author mortent\n+ */\n+public class JunitHandler extends LoggingRequestHandler {\n+\n+    private final JunitRunner junitRunner;\n+    private final TestRuntimeProvider testRuntimeProvider;\n+\n+    @Inject\n+    public JunitHandler(Executor executor, AccessLog accessLog, JunitRunner junitRunner, TestRuntimeProvider testRuntimeProvider) {\n+        super(executor, accessLog);\n+        this.junitRunner = junitRunner;\n+        this.testRuntimeProvider = testRuntimeProvider;\n+    }\n+\n+    @Override\n+    public HttpResponse handle(HttpRequest httpRequest) {", "originalCommit": "b580bf96165691622f19e73d445f346fe29fe74f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ5MzIyNw==", "url": "https://github.com/vespa-engine/vespa/pull/13651#discussion_r443493227", "bodyText": "https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/InputStream.html#readAllBytes()", "author": "bjorncs", "createdAt": "2020-06-22T11:29:26Z", "path": "vespa-osgi-testrunner/src/main/java/com/yahoo/vespa/testrunner/JunitHandler.java", "diffHunk": "@@ -0,0 +1,71 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.testrunner;\n+\n+import ai.vespa.hosted.cd.internal.TestRuntimeProvider;\n+import com.google.inject.Inject;\n+import com.yahoo.container.handler.metrics.JsonResponse;\n+import com.yahoo.container.jdisc.HttpRequest;\n+import com.yahoo.container.jdisc.HttpResponse;\n+import com.yahoo.container.jdisc.LoggingRequestHandler;\n+import com.yahoo.container.logging.AccessLog;\n+import com.yahoo.io.IOUtils;\n+import com.yahoo.restapi.ErrorResponse;\n+import com.yahoo.restapi.MessageResponse;\n+import org.osgi.framework.Bundle;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.concurrent.Executor;\n+import java.util.function.Function;\n+\n+/**\n+ * @author mortent\n+ */\n+public class JunitHandler extends LoggingRequestHandler {\n+\n+    private final JunitRunner junitRunner;\n+    private final TestRuntimeProvider testRuntimeProvider;\n+\n+    @Inject\n+    public JunitHandler(Executor executor, AccessLog accessLog, JunitRunner junitRunner, TestRuntimeProvider testRuntimeProvider) {\n+        super(executor, accessLog);\n+        this.junitRunner = junitRunner;\n+        this.testRuntimeProvider = testRuntimeProvider;\n+    }\n+\n+    @Override\n+    public HttpResponse handle(HttpRequest httpRequest) {\n+        String mode = property(\"mode\", \"help\", httpRequest, String::valueOf);\n+        TestDescriptor.TestCategory category = property(\"category\", TestDescriptor.TestCategory.systemtest, httpRequest, TestDescriptor.TestCategory::valueOf);\n+\n+        try {\n+            testRuntimeProvider.initialize(IOUtils.readBytes(httpRequest.getData(), 1000 * 1000));", "originalCommit": "b580bf96165691622f19e73d445f346fe29fe74f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ5ODIyNA==", "url": "https://github.com/vespa-engine/vespa/pull/13651#discussion_r443498224", "bodyText": "Can this be simplified to a single method in JunitRunner?", "author": "bjorncs", "createdAt": "2020-06-22T11:40:31Z", "path": "vespa-osgi-testrunner/src/main/java/com/yahoo/vespa/testrunner/JunitHandler.java", "diffHunk": "@@ -0,0 +1,71 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.testrunner;\n+\n+import ai.vespa.hosted.cd.internal.TestRuntimeProvider;\n+import com.google.inject.Inject;\n+import com.yahoo.container.handler.metrics.JsonResponse;\n+import com.yahoo.container.jdisc.HttpRequest;\n+import com.yahoo.container.jdisc.HttpResponse;\n+import com.yahoo.container.jdisc.LoggingRequestHandler;\n+import com.yahoo.container.logging.AccessLog;\n+import com.yahoo.io.IOUtils;\n+import com.yahoo.restapi.ErrorResponse;\n+import com.yahoo.restapi.MessageResponse;\n+import org.osgi.framework.Bundle;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.concurrent.Executor;\n+import java.util.function.Function;\n+\n+/**\n+ * @author mortent\n+ */\n+public class JunitHandler extends LoggingRequestHandler {\n+\n+    private final JunitRunner junitRunner;\n+    private final TestRuntimeProvider testRuntimeProvider;\n+\n+    @Inject\n+    public JunitHandler(Executor executor, AccessLog accessLog, JunitRunner junitRunner, TestRuntimeProvider testRuntimeProvider) {\n+        super(executor, accessLog);\n+        this.junitRunner = junitRunner;\n+        this.testRuntimeProvider = testRuntimeProvider;\n+    }\n+\n+    @Override\n+    public HttpResponse handle(HttpRequest httpRequest) {\n+        String mode = property(\"mode\", \"help\", httpRequest, String::valueOf);\n+        TestDescriptor.TestCategory category = property(\"category\", TestDescriptor.TestCategory.systemtest, httpRequest, TestDescriptor.TestCategory::valueOf);\n+\n+        try {\n+            testRuntimeProvider.initialize(IOUtils.readBytes(httpRequest.getData(), 1000 * 1000));\n+        } catch (IOException e) {\n+            return new ErrorResponse(500, \"testruntime-initialization\", \"Exception reading test config\");\n+        }\n+\n+        if (\"help\".equalsIgnoreCase(mode)) {\n+            return new MessageResponse(\"Accepted modes: \\n help \\n list \\n execute\");\n+        }\n+\n+        if (!\"list\".equalsIgnoreCase(mode) && !\"execute\".equalsIgnoreCase(mode)) {\n+            return new ErrorResponse(400, \"client error\", \"Unknown mode \\\"\" + mode + \"\\\"\");\n+        }\n+\n+        Bundle testBundle = junitRunner.findTestBundle(\"-tests\");\n+        TestDescriptor testDescriptor = junitRunner.loadTestDescriptor(testBundle);\n+        List<Class<?>> testClasses = junitRunner.loadClasses(testBundle, testDescriptor, category);\n+\n+        String jsonResponse = junitRunner.executeTests(testClasses);", "originalCommit": "b580bf96165691622f19e73d445f346fe29fe74f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUwMTYwNQ==", "url": "https://github.com/vespa-engine/vespa/pull/13651#discussion_r443501605", "bodyText": "We may want to reuse this class in maven-vespa-plugin, perhaps hosted-apis.", "author": "bjorncs", "createdAt": "2020-06-22T11:47:29Z", "path": "vespa-osgi-testrunner/src/main/java/com/yahoo/vespa/testrunner/TestDescriptor.java", "diffHunk": "@@ -0,0 +1,60 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.testrunner;\n+\n+import com.yahoo.slime.Cursor;\n+import com.yahoo.slime.Inspector;\n+import com.yahoo.slime.SlimeStream;\n+import com.yahoo.slime.SlimeUtils;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * @author mortent\n+ */\n+public class TestDescriptor {", "originalCommit": "b580bf96165691622f19e73d445f346fe29fe74f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxNzYxOA==", "url": "https://github.com/vespa-engine/vespa/pull/13651#discussion_r443517618", "bodyText": "Maybe move location of manifest file as a constant in TestDescriptor", "author": "bjorncs", "createdAt": "2020-06-22T12:19:56Z", "path": "vespa-osgi-testrunner/src/main/java/com/yahoo/vespa/testrunner/JunitRunner.java", "diffHunk": "@@ -0,0 +1,167 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.testrunner;\n+\n+import com.google.inject.Inject;\n+import com.yahoo.component.AbstractComponent;\n+import com.yahoo.exception.ExceptionUtils;\n+import com.yahoo.io.IOUtils;\n+import com.yahoo.jdisc.application.OsgiFramework;\n+import com.yahoo.slime.Cursor;\n+import com.yahoo.slime.Slime;\n+import com.yahoo.slime.SlimeUtils;\n+import com.yahoo.yolean.Exceptions;\n+import org.junit.jupiter.engine.JupiterTestEngine;\n+import org.junit.platform.engine.discovery.DiscoverySelectors;\n+import org.junit.platform.launcher.Launcher;\n+import org.junit.platform.launcher.LauncherConstants;\n+import org.junit.platform.launcher.LauncherDiscoveryRequest;\n+import org.junit.platform.launcher.core.LauncherConfig;\n+import org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;\n+import org.junit.platform.launcher.core.LauncherFactory;\n+import org.junit.platform.launcher.listeners.LoggingListener;\n+import org.junit.platform.launcher.listeners.SummaryGeneratingListener;\n+import org.junit.platform.launcher.listeners.TestExecutionSummary;\n+import org.osgi.framework.Bundle;\n+import org.osgi.framework.BundleContext;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * @author mortent\n+ */\n+public class JunitRunner extends AbstractComponent {\n+    private static final Logger logger = Logger.getLogger(JunitRunner.class.getName());\n+\n+    private final BundleContext bundleContext;\n+\n+    @Inject\n+    public JunitRunner(OsgiFramework osgiFramework) {\n+        // TODO mortent: Find a way to workaround this hack\n+        var tmp = osgiFramework.bundleContext();\n+        try {\n+            var field = tmp.getClass().getDeclaredField(\"wrapped\");\n+            field.setAccessible(true);\n+            bundleContext = (BundleContext) field.get(tmp);\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public Bundle findTestBundle(String bundleNameSuffix) {\n+        return Stream.of(bundleContext.getBundles())\n+                .filter(bundle -> bundle.getSymbolicName().endsWith(bundleNameSuffix))\n+                .findAny()\n+                .orElseThrow(() -> new RuntimeException(\"No bundle on classpath with name ending on \" + bundleNameSuffix));\n+    }\n+\n+    public TestDescriptor loadTestDescriptor(Bundle bundle) {\n+        URL resource = bundle.getEntry(\"META-INF/testClasses.json\");", "originalCommit": "b580bf96165691622f19e73d445f346fe29fe74f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxODI4Ng==", "url": "https://github.com/vespa-engine/vespa/pull/13651#discussion_r443518286", "bodyText": "Make filename more generic (e.g. testBundleDescriptor.json) ?", "author": "bjorncs", "createdAt": "2020-06-22T12:21:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxNzYxOA=="}], "type": "inlineReview"}, {"oid": "150d6ae37d5a882cb0d612d3f8d56df6c83008bd", "url": "https://github.com/vespa-engine/vespa/commit/150d6ae37d5a882cb0d612d3f8d56df6c83008bd", "message": "Fix review comments", "committedDate": "2020-06-22T13:05:01Z", "type": "forcePushed"}, {"oid": "44491faa8c6362260a71fa3814adb4e7aeaaf198", "url": "https://github.com/vespa-engine/vespa/commit/44491faa8c6362260a71fa3814adb4e7aeaaf198", "message": "Fix review comments", "committedDate": "2020-06-22T13:06:26Z", "type": "commit"}, {"oid": "44491faa8c6362260a71fa3814adb4e7aeaaf198", "url": "https://github.com/vespa-engine/vespa/commit/44491faa8c6362260a71fa3814adb4e7aeaaf198", "message": "Fix review comments", "committedDate": "2020-06-22T13:06:26Z", "type": "forcePushed"}]}