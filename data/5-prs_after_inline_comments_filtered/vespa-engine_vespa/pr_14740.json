{"pr_number": 14740, "pr_title": "Stop taking config lock exclusively in node-repository", "pr_createdAt": "2020-10-06T13:26:28Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/14740", "timeline": [{"oid": "3aedbdfc275fd16081c78b1fee0b95ff8fd0990b", "url": "https://github.com/vespa-engine/vespa/commit/3aedbdfc275fd16081c78b1fee0b95ff8fd0990b", "message": "Stop taking config lock exclusively in node-repository\n\nWe believe we've identified how locking should behave, at least in the\nshort-term:\n\n1) Migrate existing use of `/config/v2/locks/<application-id>` inside\nnode-repository to only use `/provision/v1/locks/<application-id>`. This ensures\nthat prepare only acquires `/provision/v1/locks/<application-id>` on the\nnode-repository side. Locks and node repo writes always happen together, i.e.\nwe're not building a list of transaction that are committed at some later point.\n\n2) Ensure that transactional operations such as `active` and `deactivate` holds\nboth `/config/v2/locks/<application-id>` and\n`/provision/v1/locks/<application-id>` until the transaction is committed.", "committedDate": "2020-10-06T13:23:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMyMjQ4OQ==", "url": "https://github.com/vespa-engine/vespa/pull/14740#discussion_r500322489", "bodyText": "This code is executed on bootstrap, so if a big deployment is happening concurrently the above db.lock() will time out.  But bootstrap redeployments are also vulnerable to this.", "author": "hakonhall", "createdAt": "2020-10-06T14:17:45Z", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/LoadBalancerProvisioner.java", "diffHunk": "@@ -60,8 +60,11 @@ public LoadBalancerProvisioner(NodeRepository nodeRepository, LoadBalancerServic\n         // Read and write all load balancers to make sure they are stored in the latest version of the serialization format\n         for (var id : db.readLoadBalancerIds()) {\n             try (var lock = db.lock(id.application())) {\n-                var loadBalancer = db.readLoadBalancer(id);\n-                loadBalancer.ifPresent(db::writeLoadBalancer);\n+                // TODO(mpolden): Remove inner lock\n+                try (var innerLock = db.configLock(id.application())) {", "originalCommit": "3aedbdfc275fd16081c78b1fee0b95ff8fd0990b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc4NDA0Mg==", "url": "https://github.com/vespa-engine/vespa/pull/14740#discussion_r500784042", "bodyText": "Yes. This is also why I left out locking in the NodeRepository constructor even though it's wrong. If a lock timeout happens at construction time it should recover though as the container will restart and try to construct the components again, and by then deployments are hopefully done.", "author": "mpolden", "createdAt": "2020-10-07T07:09:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMyMjQ4OQ=="}], "type": "inlineReview"}]}