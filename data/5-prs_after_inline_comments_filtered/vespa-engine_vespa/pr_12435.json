{"pr_number": 12435, "pr_title": "Bratseth/handle remote disk", "pr_createdAt": "2020-03-04T12:43:10Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/12435", "timeline": [{"oid": "5fd9d629aca9ab08bf3a87e709c6648889929e14", "url": "https://github.com/vespa-engine/vespa/commit/5fd9d629aca9ab08bf3a87e709c6648889929e14", "message": "Handle remote disk", "committedDate": "2020-03-04T12:40:56Z", "type": "commit"}, {"oid": "597475d9380c3438ddeeec6bcae4d648729fc385", "url": "https://github.com/vespa-engine/vespa/commit/597475d9380c3438ddeeec6bcae4d648729fc385", "message": "Remove println", "committedDate": "2020-03-04T12:42:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1MTg2Nw==", "url": "https://github.com/vespa-engine/vespa/pull/12435#discussion_r387651867", "bodyText": "flavor.resources() returns the real resources, need to run this through hostResourcesCalculator so the bestFlavor ends up as an advertised flavor.", "author": "freva", "createdAt": "2020-03-04T13:03:27Z", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/autoscale/Autoscaler.java", "diffHunk": "@@ -142,6 +143,8 @@ private boolean similar(double r1, double r2, double threshold) {\n             Optional<Flavor> bestFlavor = Optional.empty();\n             for (Flavor flavor : nodeRepository.getAvailableFlavors().getFlavors()) {\n                 if ( ! flavor.resources().satisfies(resources.nodeResources())) continue;", "originalCommit": "597475d9380c3438ddeeec6bcae4d648729fc385", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5NDgzMQ==", "url": "https://github.com/vespa-engine/vespa/pull/12435#discussion_r388294831", "bodyText": "You should also do nodeResourceLimits.enlargeToLegal [...]\n\nOnly if we add host flavors that cannot be allocated, but ok.", "author": "bratseth", "createdAt": "2020-03-05T13:34:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1MTg2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMzOTA5Mg==", "url": "https://github.com/vespa-engine/vespa/pull/12435#discussion_r388339092", "bodyText": "We already have (a few t3- flavors)", "author": "freva", "createdAt": "2020-03-05T14:46:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1MTg2Nw=="}], "type": "inlineReview"}, {"oid": "0e4e9560853d49f9d0a061a7ca8a13ee8f357142", "url": "https://github.com/vespa-engine/vespa/commit/0e4e9560853d49f9d0a061a7ca8a13ee8f357142", "message": "Use advertised resources when making allocations", "committedDate": "2020-03-04T14:25:20Z", "type": "commit"}, {"oid": "34548b00db9cb5865da3180afc080861ada47e2e", "url": "https://github.com/vespa-engine/vespa/commit/34548b00db9cb5865da3180afc080861ada47e2e", "message": "Simplify", "committedDate": "2020-03-04T14:31:19Z", "type": "commit"}, {"oid": "78452759e689f309ec2a60b5e31a9ad7772ba7e3", "url": "https://github.com/vespa-engine/vespa/commit/78452759e689f309ec2a60b5e31a9ad7772ba7e3", "message": "Simplify", "committedDate": "2020-03-04T14:33:40Z", "type": "commit"}, {"oid": "6dfe87a9eb033847737dd32c1937eba42cdf25f8", "url": "https://github.com/vespa-engine/vespa/commit/6dfe87a9eb033847737dd32c1937eba42cdf25f8", "message": "Simplify", "committedDate": "2020-03-04T14:36:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcxNDcwMQ==", "url": "https://github.com/vespa-engine/vespa/pull/12435#discussion_r387714701", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (best.isEmpty() || best.get().cost() > costOf(flavor.resources()))\n          \n          \n            \n                            if (best.isEmpty() || best.get().cost() > candidate.cost())\n          \n      \n    \n    \n  \n\nPreviously this would compare cost of advertised resources for the best match against cost of real resources for the candidate.", "author": "freva", "createdAt": "2020-03-04T14:49:31Z", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/autoscale/Autoscaler.java", "diffHunk": "@@ -126,32 +126,31 @@ private boolean similar(double r1, double r2, double threshold) {\n      * Returns the smallest allocatable node resources larger than the given node resources,\n      * or empty if none available.\n      */\n-    private Optional<ClusterResourcesWithCost> toAllocatableResources(ClusterResources resources, ClusterSpec cluster) {\n+    private Optional<AllocatableClusterResources> toAllocatableResources(ClusterResources resources, ClusterSpec cluster) {\n         if (allowsHostSharing(nodeRepository.zone().cloud())) {\n             // Return the requested resources, adjusted to be legal or empty if they cannot fit on existing hosts\n             NodeResources nodeResources = nodeResourceLimits.enlargeToLegal(resources.nodeResources(), cluster.type());\n             for (Flavor flavor : nodeRepository.getAvailableFlavors().getFlavors())\n                 if (flavor.resources().satisfies(nodeResources))\n-                    return Optional.of(new ClusterResourcesWithCost(resources.with(nodeResources),\n-                                                                    costOf(nodeResources) * resources.nodes()));\n+                    return Optional.of(new AllocatableClusterResources(resources.with(nodeResources),\n+                                                                       nodeResources));\n             return Optional.empty();\n         }\n         else {\n             // return the cheapest flavor satisfying the target resources, if any\n-            double bestCost = Double.MAX_VALUE;\n-            Optional<Flavor> bestFlavor = Optional.empty();\n+            Optional<AllocatableClusterResources> best = Optional.empty();\n             for (Flavor flavor : nodeRepository.getAvailableFlavors().getFlavors()) {\n                 if ( ! flavor.resources().satisfies(resources.nodeResources())) continue;\n-                if (bestFlavor.isEmpty() || bestCost > costOf(flavor.resources())) {\n-                    bestFlavor = Optional.of(flavor);\n-                    bestCost = costOf(flavor);\n-                }\n+\n+                if (flavor.resources().storageType() == NodeResources.StorageType.remote)\n+                    flavor = flavor.with(FlavorOverrides.ofDisk(resources.nodeResources().diskGb()));\n+                var candidate = new AllocatableClusterResources(resources.with(flavor.resources()),\n+                                                                hostResourcesCalculator.availableCapacityOf(flavor.name(), flavor.resources()));\n+\n+                if (best.isEmpty() || best.get().cost() > costOf(flavor.resources()))", "originalCommit": "78452759e689f309ec2a60b5e31a9ad7772ba7e3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "448f417da4df3e674c40915cb3d5418bf110d92c", "url": "https://github.com/vespa-engine/vespa/commit/448f417da4df3e674c40915cb3d5418bf110d92c", "message": "Always track both real and advertised resources", "committedDate": "2020-03-05T12:57:48Z", "type": "commit"}, {"oid": "a5e3c6f4b5db28bc10105188fe7c248b16e91586", "url": "https://github.com/vespa-engine/vespa/commit/a5e3c6f4b5db28bc10105188fe7c248b16e91586", "message": "Simplify", "committedDate": "2020-03-05T12:59:28Z", "type": "commit"}, {"oid": "63ea662df71bbf7fa1f801fb3673b1b013e18843", "url": "https://github.com/vespa-engine/vespa/commit/63ea662df71bbf7fa1f801fb3673b1b013e18843", "message": "Use real resources when computing current usage", "committedDate": "2020-03-05T13:11:17Z", "type": "commit"}, {"oid": "931cb1265c38dabfdd8104385f57a2350b63fda0", "url": "https://github.com/vespa-engine/vespa/commit/931cb1265c38dabfdd8104385f57a2350b63fda0", "message": "Don't wrap ClusterResources", "committedDate": "2020-03-05T13:25:57Z", "type": "commit"}, {"oid": "52bed4d015905c1e08f5f8b2c189ff640a1c1cf8", "url": "https://github.com/vespa-engine/vespa/commit/52bed4d015905c1e08f5f8b2c189ff640a1c1cf8", "message": "Always adjust to legal", "committedDate": "2020-03-05T13:33:20Z", "type": "commit"}]}