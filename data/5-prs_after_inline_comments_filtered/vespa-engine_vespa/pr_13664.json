{"pr_number": 13664, "pr_title": "Trying to add prometheus handler automatically", "pr_createdAt": "2020-06-23T07:50:09Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/13664", "timeline": [{"oid": "81f1c678c990a41caa02d3d5a3a8914ac38ba74d", "url": "https://github.com/vespa-engine/vespa/commit/81f1c678c990a41caa02d3d5a3a8914ac38ba74d", "message": "Trying to add prometheus handler automatically", "committedDate": "2020-06-22T14:48:21Z", "type": "commit"}, {"oid": "83b87878bad7e85fc1536d8ee1074e18173ca9ff", "url": "https://github.com/vespa-engine/vespa/commit/83b87878bad7e85fc1536d8ee1074e18173ca9ff", "message": "Added correct handler for Prometheus requests", "committedDate": "2020-06-23T12:47:22Z", "type": "commit"}, {"oid": "4963ce8309d22beb0773bbccef45254f184ca38b", "url": "https://github.com/vespa-engine/vespa/commit/4963ce8309d22beb0773bbccef45254f184ca38b", "message": "Merge branch 'master' into expose-prometheus", "committedDate": "2020-06-23T20:16:17Z", "type": "commit"}, {"oid": "1ad24f1e2df3adf6c1ded212415e546c903c8b6c", "url": "https://github.com/vespa-engine/vespa/commit/1ad24f1e2df3adf6c1ded212415e546c903c8b6c", "message": "Adding testing", "committedDate": "2020-06-24T11:07:29Z", "type": "commit"}, {"oid": "a213b7e58869e5f5a39e6e6ad795d0f22d8dd904", "url": "https://github.com/vespa-engine/vespa/commit/a213b7e58869e5f5a39e6e6ad795d0f22d8dd904", "message": "Fixed parts of the issues", "committedDate": "2020-06-24T13:02:04Z", "type": "commit"}, {"oid": "a45749b1400f86e112bb7520a288b90c762931d5", "url": "https://github.com/vespa-engine/vespa/commit/a45749b1400f86e112bb7520a288b90c762931d5", "message": "Cleaned up code", "committedDate": "2020-06-24T13:04:04Z", "type": "commit"}, {"oid": "55ddb7fe264b50387d0adbbc2f62341298488519", "url": "https://github.com/vespa-engine/vespa/commit/55ddb7fe264b50387d0adbbc2f62341298488519", "message": "Merge branch 'master' into expose-prometheus", "committedDate": "2020-06-24T13:49:30Z", "type": "commit"}, {"oid": "17d9107ee01a679ccbe591efbff959f603baebdc", "url": "https://github.com/vespa-engine/vespa/commit/17d9107ee01a679ccbe591efbff959f603baebdc", "message": "Returning with correct format. Dependencies broken", "committedDate": "2020-06-25T10:23:43Z", "type": "commit"}, {"oid": "2132ab285831f368f204210be8de409714573df3", "url": "https://github.com/vespa-engine/vespa/commit/2132ab285831f368f204210be8de409714573df3", "message": "Updated ApplicationMetricsHandler. Removed PrometheusV1Handler", "committedDate": "2020-06-26T10:01:42Z", "type": "commit"}, {"oid": "8a03578398636b9a410dbac3dbe16ccfe0292880", "url": "https://github.com/vespa-engine/vespa/commit/8a03578398636b9a410dbac3dbe16ccfe0292880", "message": "Added PrometheusHandler", "committedDate": "2020-06-26T11:12:03Z", "type": "commit"}, {"oid": "ceefd8b84776647662d23018bc62139c86e225bd", "url": "https://github.com/vespa-engine/vespa/commit/ceefd8b84776647662d23018bc62139c86e225bd", "message": "Cleaned up testing", "committedDate": "2020-06-26T11:58:47Z", "type": "commit"}, {"oid": "1fed66d9974297d10ae71fc43a032109b2908c19", "url": "https://github.com/vespa-engine/vespa/commit/1fed66d9974297d10ae71fc43a032109b2908c19", "message": "Used default metric proxy uri", "committedDate": "2020-06-26T12:36:40Z", "type": "commit"}, {"oid": "e682fa35d0c6e9874c1bedb4a6bbdb8900c99948", "url": "https://github.com/vespa-engine/vespa/commit/e682fa35d0c6e9874c1bedb4a6bbdb8900c99948", "message": "Merge branch 'master' into expose-prometheus", "committedDate": "2020-06-26T12:39:20Z", "type": "commit"}, {"oid": "ce432af28ff6f8f35a25b673665a72f5a48c6266", "url": "https://github.com/vespa-engine/vespa/commit/ce432af28ff6f8f35a25b673665a72f5a48c6266", "message": "Added configs", "committedDate": "2020-06-26T13:02:38Z", "type": "commit"}, {"oid": "e3a53542dbff6121488db259959e85965b87600b", "url": "https://github.com/vespa-engine/vespa/commit/e3a53542dbff6121488db259959e85965b87600b", "message": "Cleaning up configs, testing is not working", "committedDate": "2020-06-26T13:31:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE1MjgwNw==", "url": "https://github.com/vespa-engine/vespa/pull/13664#discussion_r446152807", "bodyText": "Please rename to PrometheusV1Handler. Not including the version in some of the other handlers was a mistake from my side.", "author": "gjoranv", "createdAt": "2020-06-26T12:27:53Z", "path": "container-core/src/main/java/com/yahoo/container/handler/metrics/PrometheusHandler.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.yahoo.container.handler.metrics;\n+\n+import ai.vespa.util.http.VespaHttpClientBuilder;\n+import com.yahoo.container.jdisc.HttpResponse;\n+import com.yahoo.restapi.Path;\n+import com.yahoo.restapi.StringResponse;\n+import com.yahoo.vespa.jdk8compat.List;\n+import com.yahoo.yolean.Exceptions;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Optional;\n+import java.util.concurrent.Executor;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.BasicResponseHandler;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.eclipse.jetty.server.Response;\n+\n+import static com.yahoo.container.handler.metrics.MetricsV2Handler.consumerQuery;\n+import static com.yahoo.jdisc.Response.Status.INTERNAL_SERVER_ERROR;\n+\n+public class PrometheusHandler extends HttpHandlerBase{", "originalCommit": "ceefd8b84776647662d23018bc62139c86e225bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI5MDE2NA==", "url": "https://github.com/vespa-engine/vespa/pull/13664#discussion_r446290164", "bodyText": "Use metricsPort instead of prometheusPort", "author": "gjoranv", "createdAt": "2020-06-26T16:35:58Z", "path": "container-core/src/main/java/com/yahoo/container/handler/metrics/PrometheusHandler.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.yahoo.container.handler.metrics;\n+\n+import ai.vespa.util.http.VespaHttpClientBuilder;\n+import com.yahoo.container.jdisc.HttpResponse;\n+import com.yahoo.restapi.Path;\n+import com.yahoo.restapi.StringResponse;\n+import com.yahoo.vespa.jdk8compat.List;\n+import com.yahoo.yolean.Exceptions;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Optional;\n+import java.util.concurrent.Executor;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.BasicResponseHandler;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.eclipse.jetty.server.Response;\n+\n+import static com.yahoo.container.handler.metrics.MetricsV2Handler.consumerQuery;\n+import static com.yahoo.jdisc.Response.Status.INTERNAL_SERVER_ERROR;\n+\n+public class PrometheusHandler extends HttpHandlerBase{\n+\n+    public static final String V1_PATH = \"/prometheus/v1\";\n+    static final String VALUES_PATH = V1_PATH + \"/values\";\n+\n+    private static final int HTTP_CONNECT_TIMEOUT = 5000;\n+    private static final int HTTP_SOCKET_TIMEOUT = 30000;\n+\n+    private final String prometheusProxyUri;\n+    private final HttpClient httpClient = createHttpClient();\n+\n+    protected PrometheusHandler(Executor executor,\n+                                MetricsProxyApiConfig config) {\n+        super(executor);\n+        prometheusProxyUri = \"http://localhost:\" + config.prometheusPort() + config.prometheusApiPath();", "originalCommit": "e3a53542dbff6121488db259959e85965b87600b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMwMzc2MQ==", "url": "https://github.com/vespa-engine/vespa/pull/13664#discussion_r446303761", "bodyText": "Add @Ignore annotation", "author": "gjoranv", "createdAt": "2020-06-26T17:02:01Z", "path": "container-core/src/test/java/com/yahoo/container/handler/metrics/PrometheusHandlerTest.java", "diffHunk": "@@ -0,0 +1,131 @@\n+// Copyright 2019 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.container.handler.metrics;\n+\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import com.yahoo.container.jdisc.RequestHandlerTestDriver;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.concurrent.Executors;\n+import java.util.stream.Collectors;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.get;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlPathEqualTo;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static com.yahoo.container.handler.metrics.MetricsV2Handler.V2_PATH;\n+import static com.yahoo.container.handler.metrics.MetricsV2Handler.VALUES_PATH;\n+import static com.yahoo.container.handler.metrics.MetricsV2Handler.consumerQuery;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * @author gjoranv\n+ */\n+public class PrometheusHandlerTest {\n+\n+    private static final String URI_BASE = \"http://localhost\";\n+\n+    private static final String V2_URI = URI_BASE + PrometheusHandler.V1_PATH;\n+    private static final String VALUES_URI = URI_BASE + PrometheusHandler.VALUES_PATH;\n+\n+    // Mock applicationmetrics api\n+    private static final String MOCK_METRICS_PATH = \"/node0\";\n+\n+    private static final String TEST_FILE = \"application-metrics.json\";\n+    private static final String RESPONSE = getFileContents(TEST_FILE);\n+    private static final String CPU_METRIC = \"cpu.util\";\n+    private static final String REPLACED_CPU_METRIC = \"replaced_cpu_util\";\n+    private static final String CUSTOM_CONSUMER = \"custom-consumer\";\n+\n+    private static RequestHandlerTestDriver testDriver;\n+\n+    @Rule\n+    public WireMockRule wireMockRule = new WireMockRule(options().dynamicPort());\n+\n+    @Before\n+    public void setup() {\n+        setupWireMock();\n+        var handler = new PrometheusHandler(Executors.newSingleThreadExecutor(),\n+                new MetricsProxyApiConfig.Builder()\n+                        .prometheusPort(wireMockRule.port())\n+                        .prometheusApiPath(MOCK_METRICS_PATH)\n+                        .metricsPort(0)\n+                        .metricsApiPath(\"/Not/In/Use\")\n+                        .build());\n+        testDriver = new RequestHandlerTestDriver(handler);\n+\n+    }\n+\n+    private void setupWireMock() {\n+        wireMockRule.stubFor(get(urlPathEqualTo(MOCK_METRICS_PATH))\n+                .willReturn(aResponse().withBody(RESPONSE)));\n+\n+        // Add a slightly different response for a custom consumer.\n+        String myConsumerResponse = RESPONSE.replaceAll(CPU_METRIC, REPLACED_CPU_METRIC);\n+        wireMockRule.stubFor(get(urlPathEqualTo(MOCK_METRICS_PATH))\n+                .withQueryParam(\"consumer\", equalTo(CUSTOM_CONSUMER))\n+                .willReturn(aResponse().withBody(myConsumerResponse)));\n+    }\n+\n+    @Test\n+    public void v2_response_contains_values_uri() throws Exception {\n+        String response = testDriver.sendRequest(V2_URI).readAll();\n+        JSONObject root = new JSONObject(response);\n+        assertTrue(root.has(\"resources\"));\n+\n+        JSONArray resources = root.getJSONArray(\"resources\");\n+        assertEquals(1, resources.length());\n+\n+        JSONObject valuesUri = resources.getJSONObject(0);\n+        assertEquals(VALUES_URI, valuesUri.getString(\"url\"));\n+    }\n+\n+    @Test", "originalCommit": "e3a53542dbff6121488db259959e85965b87600b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMwNTU3Nw==", "url": "https://github.com/vespa-engine/vespa/pull/13664#discussion_r446305577", "bodyText": "I suggest to use a prometheus specific test file, even though this handler should just directly output the data it gets from the metrics-proxy. (The output from the ApplicationMetricsHandler in the real world should be the metrics for all nodes in prometheus format.)", "author": "gjoranv", "createdAt": "2020-06-26T17:05:52Z", "path": "container-core/src/test/java/com/yahoo/container/handler/metrics/PrometheusHandlerTest.java", "diffHunk": "@@ -0,0 +1,131 @@\n+// Copyright 2019 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.container.handler.metrics;\n+\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import com.yahoo.container.jdisc.RequestHandlerTestDriver;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.concurrent.Executors;\n+import java.util.stream.Collectors;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.get;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlPathEqualTo;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static com.yahoo.container.handler.metrics.MetricsV2Handler.V2_PATH;\n+import static com.yahoo.container.handler.metrics.MetricsV2Handler.VALUES_PATH;\n+import static com.yahoo.container.handler.metrics.MetricsV2Handler.consumerQuery;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * @author gjoranv\n+ */\n+public class PrometheusHandlerTest {\n+\n+    private static final String URI_BASE = \"http://localhost\";\n+\n+    private static final String V2_URI = URI_BASE + PrometheusHandler.V1_PATH;\n+    private static final String VALUES_URI = URI_BASE + PrometheusHandler.VALUES_PATH;\n+\n+    // Mock applicationmetrics api\n+    private static final String MOCK_METRICS_PATH = \"/node0\";\n+\n+    private static final String TEST_FILE = \"application-metrics.json\";", "originalCommit": "e3a53542dbff6121488db259959e85965b87600b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMwNTc2NA==", "url": "https://github.com/vespa-engine/vespa/pull/13664#discussion_r446305764", "bodyText": "Un-ignore when test file is added", "author": "gjoranv", "createdAt": "2020-06-26T17:06:15Z", "path": "container-core/src/test/java/com/yahoo/container/handler/metrics/PrometheusHandlerTest.java", "diffHunk": "@@ -0,0 +1,131 @@\n+// Copyright 2019 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.container.handler.metrics;\n+\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import com.yahoo.container.jdisc.RequestHandlerTestDriver;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.concurrent.Executors;\n+import java.util.stream.Collectors;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.get;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlPathEqualTo;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static com.yahoo.container.handler.metrics.MetricsV2Handler.V2_PATH;\n+import static com.yahoo.container.handler.metrics.MetricsV2Handler.VALUES_PATH;\n+import static com.yahoo.container.handler.metrics.MetricsV2Handler.consumerQuery;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * @author gjoranv\n+ */\n+public class PrometheusHandlerTest {\n+\n+    private static final String URI_BASE = \"http://localhost\";\n+\n+    private static final String V2_URI = URI_BASE + PrometheusHandler.V1_PATH;\n+    private static final String VALUES_URI = URI_BASE + PrometheusHandler.VALUES_PATH;\n+\n+    // Mock applicationmetrics api\n+    private static final String MOCK_METRICS_PATH = \"/node0\";\n+\n+    private static final String TEST_FILE = \"application-metrics.json\";\n+    private static final String RESPONSE = getFileContents(TEST_FILE);\n+    private static final String CPU_METRIC = \"cpu.util\";\n+    private static final String REPLACED_CPU_METRIC = \"replaced_cpu_util\";\n+    private static final String CUSTOM_CONSUMER = \"custom-consumer\";\n+\n+    private static RequestHandlerTestDriver testDriver;\n+\n+    @Rule\n+    public WireMockRule wireMockRule = new WireMockRule(options().dynamicPort());\n+\n+    @Before\n+    public void setup() {\n+        setupWireMock();\n+        var handler = new PrometheusHandler(Executors.newSingleThreadExecutor(),\n+                new MetricsProxyApiConfig.Builder()\n+                        .prometheusPort(wireMockRule.port())\n+                        .prometheusApiPath(MOCK_METRICS_PATH)\n+                        .metricsPort(0)\n+                        .metricsApiPath(\"/Not/In/Use\")\n+                        .build());\n+        testDriver = new RequestHandlerTestDriver(handler);\n+\n+    }\n+\n+    private void setupWireMock() {\n+        wireMockRule.stubFor(get(urlPathEqualTo(MOCK_METRICS_PATH))\n+                .willReturn(aResponse().withBody(RESPONSE)));\n+\n+        // Add a slightly different response for a custom consumer.\n+        String myConsumerResponse = RESPONSE.replaceAll(CPU_METRIC, REPLACED_CPU_METRIC);\n+        wireMockRule.stubFor(get(urlPathEqualTo(MOCK_METRICS_PATH))\n+                .withQueryParam(\"consumer\", equalTo(CUSTOM_CONSUMER))\n+                .willReturn(aResponse().withBody(myConsumerResponse)));\n+    }\n+\n+    @Test\n+    public void v2_response_contains_values_uri() throws Exception {\n+        String response = testDriver.sendRequest(V2_URI).readAll();\n+        JSONObject root = new JSONObject(response);\n+        assertTrue(root.has(\"resources\"));\n+\n+        JSONArray resources = root.getJSONArray(\"resources\");\n+        assertEquals(1, resources.length());\n+\n+        JSONObject valuesUri = resources.getJSONObject(0);\n+        assertEquals(VALUES_URI, valuesUri.getString(\"url\"));\n+    }\n+\n+    @Test\n+    public void visually_inspect_values_response() throws Exception {\n+        String response = testDriver.sendRequest(VALUES_URI).readAll();\n+        System.out.println(response);\n+    }\n+\n+    @Test\n+    public void invalid_path_yields_error_response() throws Exception {\n+        String response = testDriver.sendRequest(V2_URI + \"/invalid\").readAll();\n+        JSONObject root = new JSONObject(response);\n+        assertTrue(root.has(\"error\"));\n+        assertTrue(root.getString(\"error\" ).startsWith(\"No content\"));\n+    }\n+\n+    //Currently broken as no way to convert to Prometheus format around here\n+    @Ignore", "originalCommit": "e3a53542dbff6121488db259959e85965b87600b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMxMzU0OQ==", "url": "https://github.com/vespa-engine/vespa/pull/13664#discussion_r446313549", "bodyText": "Rename to V1_URI", "author": "gjoranv", "createdAt": "2020-06-26T17:22:38Z", "path": "container-core/src/test/java/com/yahoo/container/handler/metrics/PrometheusHandlerTest.java", "diffHunk": "@@ -0,0 +1,131 @@\n+// Copyright 2019 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.container.handler.metrics;\n+\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import com.yahoo.container.jdisc.RequestHandlerTestDriver;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.concurrent.Executors;\n+import java.util.stream.Collectors;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.get;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlPathEqualTo;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static com.yahoo.container.handler.metrics.MetricsV2Handler.V2_PATH;\n+import static com.yahoo.container.handler.metrics.MetricsV2Handler.VALUES_PATH;\n+import static com.yahoo.container.handler.metrics.MetricsV2Handler.consumerQuery;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * @author gjoranv\n+ */\n+public class PrometheusHandlerTest {\n+\n+    private static final String URI_BASE = \"http://localhost\";\n+\n+    private static final String V2_URI = URI_BASE + PrometheusHandler.V1_PATH;", "originalCommit": "e3a53542dbff6121488db259959e85965b87600b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMxNDE3MQ==", "url": "https://github.com/vespa-engine/vespa/pull/13664#discussion_r446314171", "bodyText": "You can probably remove this method and use the one in MetricsV2HandlerTest, after making it package private. Less code duplication.", "author": "gjoranv", "createdAt": "2020-06-26T17:23:57Z", "path": "container-core/src/test/java/com/yahoo/container/handler/metrics/PrometheusHandlerTest.java", "diffHunk": "@@ -0,0 +1,131 @@\n+// Copyright 2019 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.container.handler.metrics;\n+\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import com.yahoo.container.jdisc.RequestHandlerTestDriver;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.concurrent.Executors;\n+import java.util.stream.Collectors;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.get;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlPathEqualTo;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static com.yahoo.container.handler.metrics.MetricsV2Handler.V2_PATH;\n+import static com.yahoo.container.handler.metrics.MetricsV2Handler.VALUES_PATH;\n+import static com.yahoo.container.handler.metrics.MetricsV2Handler.consumerQuery;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * @author gjoranv\n+ */\n+public class PrometheusHandlerTest {\n+\n+    private static final String URI_BASE = \"http://localhost\";\n+\n+    private static final String V2_URI = URI_BASE + PrometheusHandler.V1_PATH;\n+    private static final String VALUES_URI = URI_BASE + PrometheusHandler.VALUES_PATH;\n+\n+    // Mock applicationmetrics api\n+    private static final String MOCK_METRICS_PATH = \"/node0\";\n+\n+    private static final String TEST_FILE = \"application-metrics.json\";\n+    private static final String RESPONSE = getFileContents(TEST_FILE);\n+    private static final String CPU_METRIC = \"cpu.util\";\n+    private static final String REPLACED_CPU_METRIC = \"replaced_cpu_util\";\n+    private static final String CUSTOM_CONSUMER = \"custom-consumer\";\n+\n+    private static RequestHandlerTestDriver testDriver;\n+\n+    @Rule\n+    public WireMockRule wireMockRule = new WireMockRule(options().dynamicPort());\n+\n+    @Before\n+    public void setup() {\n+        setupWireMock();\n+        var handler = new PrometheusHandler(Executors.newSingleThreadExecutor(),\n+                new MetricsProxyApiConfig.Builder()\n+                        .prometheusPort(wireMockRule.port())\n+                        .prometheusApiPath(MOCK_METRICS_PATH)\n+                        .metricsPort(0)\n+                        .metricsApiPath(\"/Not/In/Use\")\n+                        .build());\n+        testDriver = new RequestHandlerTestDriver(handler);\n+\n+    }\n+\n+    private void setupWireMock() {\n+        wireMockRule.stubFor(get(urlPathEqualTo(MOCK_METRICS_PATH))\n+                .willReturn(aResponse().withBody(RESPONSE)));\n+\n+        // Add a slightly different response for a custom consumer.\n+        String myConsumerResponse = RESPONSE.replaceAll(CPU_METRIC, REPLACED_CPU_METRIC);\n+        wireMockRule.stubFor(get(urlPathEqualTo(MOCK_METRICS_PATH))\n+                .withQueryParam(\"consumer\", equalTo(CUSTOM_CONSUMER))\n+                .willReturn(aResponse().withBody(myConsumerResponse)));\n+    }\n+\n+    @Test\n+    public void v2_response_contains_values_uri() throws Exception {\n+        String response = testDriver.sendRequest(V2_URI).readAll();\n+        JSONObject root = new JSONObject(response);\n+        assertTrue(root.has(\"resources\"));\n+\n+        JSONArray resources = root.getJSONArray(\"resources\");\n+        assertEquals(1, resources.length());\n+\n+        JSONObject valuesUri = resources.getJSONObject(0);\n+        assertEquals(VALUES_URI, valuesUri.getString(\"url\"));\n+    }\n+\n+    @Test\n+    public void visually_inspect_values_response() throws Exception {\n+        String response = testDriver.sendRequest(VALUES_URI).readAll();\n+        System.out.println(response);\n+    }\n+\n+    @Test\n+    public void invalid_path_yields_error_response() throws Exception {\n+        String response = testDriver.sendRequest(V2_URI + \"/invalid\").readAll();\n+        JSONObject root = new JSONObject(response);\n+        assertTrue(root.has(\"error\"));\n+        assertTrue(root.getString(\"error\" ).startsWith(\"No content\"));\n+    }\n+\n+    //Currently broken as no way to convert to Prometheus format around here\n+    @Ignore\n+    @Test\n+    public void values_response_is_equal_to_test_file() {\n+        String response = testDriver.sendRequest(VALUES_URI).readAll();\n+        assertEquals(RESPONSE, response);\n+    }\n+\n+    @Test\n+    public void consumer_is_propagated_to_metrics_proxy_api() throws JSONException {\n+        String response = testDriver.sendRequest(VALUES_URI + consumerQuery(CUSTOM_CONSUMER)).readAll();\n+\n+        assertTrue(response.contains(REPLACED_CPU_METRIC));\n+    }\n+\n+    private static String getFileContents(String filename) {", "originalCommit": "e3a53542dbff6121488db259959e85965b87600b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMxNTExMA==", "url": "https://github.com/vespa-engine/vespa/pull/13664#discussion_r446315110", "bodyText": "I suggest to rename to METRICS_V1_PATH for consistency.", "author": "gjoranv", "createdAt": "2020-06-26T17:25:59Z", "path": "metrics-proxy/src/main/java/ai/vespa/metricsproxy/http/application/ApplicationMetricsHandler.java", "diffHunk": "@@ -29,8 +37,11 @@\n  */\n public class ApplicationMetricsHandler extends HttpHandlerBase {\n \n-    public static final String V1_PATH = \"/applicationmetrics/v1\";\n-    public static final String VALUES_PATH = V1_PATH + \"/values\";\n+    public static final String V1_METRICS = \"/applicationmetrics/v1\";", "originalCommit": "e3a53542dbff6121488db259959e85965b87600b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMxNTMxNQ==", "url": "https://github.com/vespa-engine/vespa/pull/13664#discussion_r446315315", "bodyText": "Same here, suggest to use PROMETHEUS_V1_PATH", "author": "gjoranv", "createdAt": "2020-06-26T17:26:25Z", "path": "metrics-proxy/src/main/java/ai/vespa/metricsproxy/http/application/ApplicationMetricsHandler.java", "diffHunk": "@@ -29,8 +37,11 @@\n  */\n public class ApplicationMetricsHandler extends HttpHandlerBase {\n \n-    public static final String V1_PATH = \"/applicationmetrics/v1\";\n-    public static final String VALUES_PATH = V1_PATH + \"/values\";\n+    public static final String V1_METRICS = \"/applicationmetrics/v1\";\n+    public static final String METRICS_VALUES_PATH = V1_METRICS + \"/values\";\n+\n+    public static final String V1_PROMETHEUS = \"/applicationprometheus/v1\";", "originalCommit": "e3a53542dbff6121488db259959e85965b87600b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyMTc5Mw==", "url": "https://github.com/vespa-engine/vespa/pull/13664#discussion_r446321793", "bodyText": "You can add a static import of the toPrometheusModel, as the class name does not add any extra value, just extra characters.", "author": "gjoranv", "createdAt": "2020-06-26T17:40:02Z", "path": "metrics-proxy/src/main/java/ai/vespa/metricsproxy/http/application/ApplicationMetricsHandler.java", "diffHunk": "@@ -64,4 +79,16 @@ private JsonResponse applicationMetricsResponse(String requestedConsumer) {\n         }\n     }\n \n+    private TextResponse applicationPrometheusResponse(String requestedConsumer) {\n+        ConsumerId consumer = getConsumerOrDefault(requestedConsumer, metricsConsumers);\n+        var metricsByNode = metricsRetriever.getMetrics(consumer);\n+\n+\n+        return new TextResponse(200, PrometheusUtil.toPrometheusModel(toGenericApplicationModel(metricsByNode).nodes.stream()", "originalCommit": "e3a53542dbff6121488db259959e85965b87600b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyMzkzNg==", "url": "https://github.com/vespa-engine/vespa/pull/13664#discussion_r446323936", "bodyText": "toMetricsPackets can also be static imported.", "author": "gjoranv", "createdAt": "2020-06-26T17:44:25Z", "path": "metrics-proxy/src/main/java/ai/vespa/metricsproxy/http/application/ApplicationMetricsHandler.java", "diffHunk": "@@ -64,4 +79,16 @@ private JsonResponse applicationMetricsResponse(String requestedConsumer) {\n         }\n     }\n \n+    private TextResponse applicationPrometheusResponse(String requestedConsumer) {\n+        ConsumerId consumer = getConsumerOrDefault(requestedConsumer, metricsConsumers);\n+        var metricsByNode = metricsRetriever.getMetrics(consumer);\n+\n+\n+        return new TextResponse(200, PrometheusUtil.toPrometheusModel(toGenericApplicationModel(metricsByNode).nodes.stream()\n+                .flatMap(element -> GenericJsonUtil.toMetricsPackets(element).stream()", "originalCommit": "e3a53542dbff6121488db259959e85965b87600b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyODM5Mg==", "url": "https://github.com/vespa-engine/vespa/pull/13664#discussion_r446328392", "bodyText": "This section was a bit difficult to read. I experimented a bit, and came up with this. Perhaps you can come up with something even better:\n        List<GenericJsonModel> genericNodes = toGenericApplicationModel(metricsByNode).nodes;\n        List<MetricsPacket> metricsForAllNodes = genericNodes.stream()\n                .flatMap(element -> toMetricsPackets(element).stream()\n                        .map(MetricsPacket.Builder::build))\n                .collect(Collectors.toList());\n        return new TextResponse(200, toPrometheusModel(metricsForAllNodes).serialize());", "author": "gjoranv", "createdAt": "2020-06-26T17:53:49Z", "path": "metrics-proxy/src/main/java/ai/vespa/metricsproxy/http/application/ApplicationMetricsHandler.java", "diffHunk": "@@ -64,4 +79,16 @@ private JsonResponse applicationMetricsResponse(String requestedConsumer) {\n         }\n     }\n \n+    private TextResponse applicationPrometheusResponse(String requestedConsumer) {\n+        ConsumerId consumer = getConsumerOrDefault(requestedConsumer, metricsConsumers);\n+        var metricsByNode = metricsRetriever.getMetrics(consumer);\n+\n+\n+        return new TextResponse(200, PrometheusUtil.toPrometheusModel(toGenericApplicationModel(metricsByNode).nodes.stream()", "originalCommit": "e3a53542dbff6121488db259959e85965b87600b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c2fbfa9ebf866d9be5ec4826bab056b2f517f8a4", "url": "https://github.com/vespa-engine/vespa/commit/c2fbfa9ebf866d9be5ec4826bab056b2f517f8a4", "message": "Fixed review comments", "committedDate": "2020-06-29T09:18:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg4ODk3Mg==", "url": "https://github.com/vespa-engine/vespa/pull/13664#discussion_r446888972", "bodyText": "Rename to metricsProxyUri", "author": "gjoranv", "createdAt": "2020-06-29T11:10:31Z", "path": "container-core/src/main/java/com/yahoo/container/handler/metrics/PrometheusV1Handler.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.yahoo.container.handler.metrics;\n+\n+import ai.vespa.util.http.VespaHttpClientBuilder;\n+import com.yahoo.container.jdisc.HttpResponse;\n+import com.yahoo.restapi.Path;\n+import com.yahoo.restapi.StringResponse;\n+import com.yahoo.vespa.jdk8compat.List;\n+import com.yahoo.yolean.Exceptions;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Optional;\n+import java.util.concurrent.Executor;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.BasicResponseHandler;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.eclipse.jetty.server.Response;\n+\n+import static com.yahoo.container.handler.metrics.MetricsV2Handler.consumerQuery;\n+import static com.yahoo.jdisc.Response.Status.INTERNAL_SERVER_ERROR;\n+\n+public class PrometheusV1Handler extends HttpHandlerBase{\n+\n+    public static final String V1_PATH = \"/prometheus/v1\";\n+    static final String VALUES_PATH = V1_PATH + \"/values\";\n+\n+    private static final int HTTP_CONNECT_TIMEOUT = 5000;\n+    private static final int HTTP_SOCKET_TIMEOUT = 30000;\n+\n+    private final String prometheusProxyUri;\n+    private final HttpClient httpClient = createHttpClient();\n+\n+    protected PrometheusV1Handler(Executor executor,\n+                                  MetricsProxyApiConfig config) {\n+        super(executor);\n+        prometheusProxyUri = \"http://localhost:\" + config.metricsPort() + config.prometheusApiPath();", "originalCommit": "c2fbfa9ebf866d9be5ec4826bab056b2f517f8a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg4OTU0MA==", "url": "https://github.com/vespa-engine/vespa/pull/13664#discussion_r446889540", "bodyText": "I think this can be package-private.", "author": "gjoranv", "createdAt": "2020-06-29T11:11:52Z", "path": "container-core/src/test/java/com/yahoo/container/handler/metrics/MetricsV2HandlerTest.java", "diffHunk": "@@ -132,7 +133,7 @@ private JSONObject getResponseAsJson(String consumer) {\n         }\n     }\n \n-    private static String getFileContents(String filename) {\n+    public static String getFileContents(String filename) {", "originalCommit": "c2fbfa9ebf866d9be5ec4826bab056b2f517f8a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg5MDAzNg==", "url": "https://github.com/vespa-engine/vespa/pull/13664#discussion_r446890036", "bodyText": "Rename to v1_response_...", "author": "gjoranv", "createdAt": "2020-06-29T11:12:51Z", "path": "container-core/src/test/java/com/yahoo/container/handler/metrics/PrometheusV1HandlerTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+// Copyright 2019 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.container.handler.metrics;\n+\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import com.yahoo.container.jdisc.RequestHandlerTestDriver;\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.stream.Collectors;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import java.util.concurrent.Executors;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.get;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlPathEqualTo;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static com.yahoo.container.handler.metrics.MetricsV2Handler.consumerQuery;\n+import static com.yahoo.container.handler.metrics.MetricsV2HandlerTest.getFileContents;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * @author gjoranv\n+ */\n+public class PrometheusV1HandlerTest {\n+\n+    private static final String URI_BASE = \"http://localhost\";\n+\n+    private static final String V1_URI = URI_BASE + PrometheusV1Handler.V1_PATH;\n+    private static final String VALUES_URI = URI_BASE + PrometheusV1Handler.VALUES_PATH;\n+\n+    // Mock applicationmetrics api\n+    private static final String MOCK_METRICS_PATH = \"/node0\";\n+\n+    private static final String TEST_FILE = \"application-prometheus.txt\";\n+    private static final String RESPONSE = getFileContents(TEST_FILE);\n+    private static final String CPU_METRIC = \"cpu\";\n+    private static final String REPLACED_CPU_METRIC = \"replaced_cpu\";\n+    private static final String CUSTOM_CONSUMER = \"custom-consumer\";\n+\n+    private static RequestHandlerTestDriver testDriver;\n+\n+    @Rule\n+    public WireMockRule wireMockRule = new WireMockRule(options().dynamicPort());\n+\n+    @Before\n+    public void setup() {\n+        setupWireMock();\n+        var handler = new PrometheusV1Handler(Executors.newSingleThreadExecutor(),\n+                new MetricsProxyApiConfig.Builder()\n+                        .prometheusApiPath(MOCK_METRICS_PATH)\n+                        .metricsPort(wireMockRule.port())\n+                        .metricsApiPath(\"/Not/In/Use\")\n+                        .build());\n+        testDriver = new RequestHandlerTestDriver(handler);\n+\n+    }\n+\n+    private void setupWireMock() {\n+        wireMockRule.stubFor(get(urlPathEqualTo(MOCK_METRICS_PATH))\n+                .willReturn(aResponse().withBody(RESPONSE)));\n+\n+        // Add a slightly different response for a custom consumer.\n+        String myConsumerResponse = RESPONSE.replaceAll(CPU_METRIC, REPLACED_CPU_METRIC);\n+        wireMockRule.stubFor(get(urlPathEqualTo(MOCK_METRICS_PATH))\n+                .withQueryParam(\"consumer\", equalTo(CUSTOM_CONSUMER))\n+                .willReturn(aResponse().withBody(myConsumerResponse)));\n+    }\n+\n+    @Test\n+    public void v2_response_contains_values_uri() throws Exception {", "originalCommit": "c2fbfa9ebf866d9be5ec4826bab056b2f517f8a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg5MDMwNA==", "url": "https://github.com/vespa-engine/vespa/pull/13664#discussion_r446890304", "bodyText": "throws is unnecessary", "author": "gjoranv", "createdAt": "2020-06-29T11:13:27Z", "path": "container-core/src/test/java/com/yahoo/container/handler/metrics/PrometheusV1HandlerTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+// Copyright 2019 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.container.handler.metrics;\n+\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import com.yahoo.container.jdisc.RequestHandlerTestDriver;\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.stream.Collectors;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import java.util.concurrent.Executors;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.get;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlPathEqualTo;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static com.yahoo.container.handler.metrics.MetricsV2Handler.consumerQuery;\n+import static com.yahoo.container.handler.metrics.MetricsV2HandlerTest.getFileContents;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * @author gjoranv\n+ */\n+public class PrometheusV1HandlerTest {\n+\n+    private static final String URI_BASE = \"http://localhost\";\n+\n+    private static final String V1_URI = URI_BASE + PrometheusV1Handler.V1_PATH;\n+    private static final String VALUES_URI = URI_BASE + PrometheusV1Handler.VALUES_PATH;\n+\n+    // Mock applicationmetrics api\n+    private static final String MOCK_METRICS_PATH = \"/node0\";\n+\n+    private static final String TEST_FILE = \"application-prometheus.txt\";\n+    private static final String RESPONSE = getFileContents(TEST_FILE);\n+    private static final String CPU_METRIC = \"cpu\";\n+    private static final String REPLACED_CPU_METRIC = \"replaced_cpu\";\n+    private static final String CUSTOM_CONSUMER = \"custom-consumer\";\n+\n+    private static RequestHandlerTestDriver testDriver;\n+\n+    @Rule\n+    public WireMockRule wireMockRule = new WireMockRule(options().dynamicPort());\n+\n+    @Before\n+    public void setup() {\n+        setupWireMock();\n+        var handler = new PrometheusV1Handler(Executors.newSingleThreadExecutor(),\n+                new MetricsProxyApiConfig.Builder()\n+                        .prometheusApiPath(MOCK_METRICS_PATH)\n+                        .metricsPort(wireMockRule.port())\n+                        .metricsApiPath(\"/Not/In/Use\")\n+                        .build());\n+        testDriver = new RequestHandlerTestDriver(handler);\n+\n+    }\n+\n+    private void setupWireMock() {\n+        wireMockRule.stubFor(get(urlPathEqualTo(MOCK_METRICS_PATH))\n+                .willReturn(aResponse().withBody(RESPONSE)));\n+\n+        // Add a slightly different response for a custom consumer.\n+        String myConsumerResponse = RESPONSE.replaceAll(CPU_METRIC, REPLACED_CPU_METRIC);\n+        wireMockRule.stubFor(get(urlPathEqualTo(MOCK_METRICS_PATH))\n+                .withQueryParam(\"consumer\", equalTo(CUSTOM_CONSUMER))\n+                .willReturn(aResponse().withBody(myConsumerResponse)));\n+    }\n+\n+    @Test\n+    public void v2_response_contains_values_uri() throws Exception {\n+        String response = testDriver.sendRequest(V1_URI).readAll();\n+        JSONObject root = new JSONObject(response);\n+        assertTrue(root.has(\"resources\"));\n+\n+        JSONArray resources = root.getJSONArray(\"resources\");\n+        assertEquals(1, resources.length());\n+\n+        JSONObject valuesUri = resources.getJSONObject(0);\n+        assertEquals(VALUES_URI, valuesUri.getString(\"url\"));\n+    }\n+\n+    @Ignore\n+    @Test\n+    public void visually_inspect_values_response() throws Exception {", "originalCommit": "c2fbfa9ebf866d9be5ec4826bab056b2f517f8a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg5MDQ3NQ==", "url": "https://github.com/vespa-engine/vespa/pull/13664#discussion_r446890475", "bodyText": "throws is unnecessary", "author": "gjoranv", "createdAt": "2020-06-29T11:13:49Z", "path": "container-core/src/test/java/com/yahoo/container/handler/metrics/PrometheusV1HandlerTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+// Copyright 2019 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.container.handler.metrics;\n+\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import com.yahoo.container.jdisc.RequestHandlerTestDriver;\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.stream.Collectors;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import java.util.concurrent.Executors;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.get;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlPathEqualTo;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static com.yahoo.container.handler.metrics.MetricsV2Handler.consumerQuery;\n+import static com.yahoo.container.handler.metrics.MetricsV2HandlerTest.getFileContents;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * @author gjoranv\n+ */\n+public class PrometheusV1HandlerTest {\n+\n+    private static final String URI_BASE = \"http://localhost\";\n+\n+    private static final String V1_URI = URI_BASE + PrometheusV1Handler.V1_PATH;\n+    private static final String VALUES_URI = URI_BASE + PrometheusV1Handler.VALUES_PATH;\n+\n+    // Mock applicationmetrics api\n+    private static final String MOCK_METRICS_PATH = \"/node0\";\n+\n+    private static final String TEST_FILE = \"application-prometheus.txt\";\n+    private static final String RESPONSE = getFileContents(TEST_FILE);\n+    private static final String CPU_METRIC = \"cpu\";\n+    private static final String REPLACED_CPU_METRIC = \"replaced_cpu\";\n+    private static final String CUSTOM_CONSUMER = \"custom-consumer\";\n+\n+    private static RequestHandlerTestDriver testDriver;\n+\n+    @Rule\n+    public WireMockRule wireMockRule = new WireMockRule(options().dynamicPort());\n+\n+    @Before\n+    public void setup() {\n+        setupWireMock();\n+        var handler = new PrometheusV1Handler(Executors.newSingleThreadExecutor(),\n+                new MetricsProxyApiConfig.Builder()\n+                        .prometheusApiPath(MOCK_METRICS_PATH)\n+                        .metricsPort(wireMockRule.port())\n+                        .metricsApiPath(\"/Not/In/Use\")\n+                        .build());\n+        testDriver = new RequestHandlerTestDriver(handler);\n+\n+    }\n+\n+    private void setupWireMock() {\n+        wireMockRule.stubFor(get(urlPathEqualTo(MOCK_METRICS_PATH))\n+                .willReturn(aResponse().withBody(RESPONSE)));\n+\n+        // Add a slightly different response for a custom consumer.\n+        String myConsumerResponse = RESPONSE.replaceAll(CPU_METRIC, REPLACED_CPU_METRIC);\n+        wireMockRule.stubFor(get(urlPathEqualTo(MOCK_METRICS_PATH))\n+                .withQueryParam(\"consumer\", equalTo(CUSTOM_CONSUMER))\n+                .willReturn(aResponse().withBody(myConsumerResponse)));\n+    }\n+\n+    @Test\n+    public void v2_response_contains_values_uri() throws Exception {\n+        String response = testDriver.sendRequest(V1_URI).readAll();\n+        JSONObject root = new JSONObject(response);\n+        assertTrue(root.has(\"resources\"));\n+\n+        JSONArray resources = root.getJSONArray(\"resources\");\n+        assertEquals(1, resources.length());\n+\n+        JSONObject valuesUri = resources.getJSONObject(0);\n+        assertEquals(VALUES_URI, valuesUri.getString(\"url\"));\n+    }\n+\n+    @Ignore\n+    @Test\n+    public void visually_inspect_values_response() throws Exception {\n+        String response = testDriver.sendRequest(VALUES_URI).readAll();\n+        System.out.println(response);\n+    }\n+\n+    @Test\n+    public void invalid_path_yields_error_response() throws Exception {\n+        String response = testDriver.sendRequest(V1_URI + \"/invalid\").readAll();\n+        JSONObject root = new JSONObject(response);\n+        assertTrue(root.has(\"error\"));\n+        assertTrue(root.getString(\"error\" ).startsWith(\"No content\"));\n+    }\n+\n+    @Test\n+    public void values_response_is_equal_to_test_file() {\n+        String response = testDriver.sendRequest(VALUES_URI).readAll();\n+        assertEquals(RESPONSE, response);\n+    }\n+\n+    @Test\n+    public void consumer_is_propagated_to_metrics_proxy_api() throws JSONException {", "originalCommit": "c2fbfa9ebf866d9be5ec4826bab056b2f517f8a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1eb53a6d6cb87750ece9dbb688cbaa9a48eee434", "url": "https://github.com/vespa-engine/vespa/commit/1eb53a6d6cb87750ece9dbb688cbaa9a48eee434", "message": "Fixed minor naming errors and throws", "committedDate": "2020-06-29T11:45:03Z", "type": "commit"}, {"oid": "ac21189ef5ff8561153a4f1b6dc8d8b2dc870fda", "url": "https://github.com/vespa-engine/vespa/commit/ac21189ef5ff8561153a4f1b6dc8d8b2dc870fda", "message": "Fixed throwing", "committedDate": "2020-06-29T11:57:58Z", "type": "commit"}]}