{"pr_number": 12869, "pr_title": "Provide all (relevant runs of all) jobs in deployment API", "pr_createdAt": "2020-04-07T17:06:01Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/12869", "timeline": [{"oid": "1cede6bf2388dfa45a0aed947fded75f4164396e", "url": "https://github.com/vespa-engine/vespa/commit/1cede6bf2388dfa45a0aed947fded75f4164396e", "message": "Provide all (relevant runs of all) jobs in deployment API", "committedDate": "2020-04-07T17:05:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAwNTk5MA==", "url": "https://github.com/vespa-engine/vespa/pull/12869#discussion_r405005990", "bodyText": "Would be nice if we could just list relevant jobs, and maybe list all the jobs once in a list for order, if we need that.", "author": "freva", "createdAt": "2020-04-07T17:59:52Z", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/restapi/deployment/DeploymentApiHandler.java", "diffHunk": "@@ -129,25 +124,73 @@ private HttpResponse root(HttpRequest request) {\n                                                    .flatMap(status -> status.instanceJobs().entrySet().stream())\n                                                    .collect(toUnmodifiableMap(jobs -> jobs.getKey(), jobs -> jobs.getValue()));\n             Cursor productionArray = versionObject.setArray(\"productionApplications\");\n-            deploymentStatistics.get(version.versionNumber()).productionSuccesses().stream()\n-                                .collect(groupingBy(run -> run.id().application()))\n-                                .forEach((id, runs) -> {\n-                                    Cursor applicationObject = productionArray.addObject();\n-                                    toSlime(applicationObject, id, request);\n-                                    applicationObject.setLong(\"productionJobs\", jobsByInstance.get(id).production().size());\n-                                    applicationObject.setLong(\"productionSuccesses\", runs.size());\n-                                });\n+            statistics.productionSuccesses().stream()\n+                      .collect(groupingBy(run -> run.id().application()))\n+                      .forEach((id, runs) -> {\n+                          Cursor applicationObject = productionArray.addObject();\n+                          toSlime(applicationObject, id, request);\n+                          applicationObject.setLong(\"productionJobs\", jobsByInstance.get(id).production().size());\n+                          applicationObject.setLong(\"productionSuccesses\", runs.size());\n+                      });\n \n             Cursor runningArray = versionObject.setArray(\"deployingApplications\");\n-            for (Run run : deploymentStatistics.get(version.versionNumber()).runningUpgrade()) {\n+            for (Run run : statistics.runningUpgrade()) {\n                 Cursor applicationObject = runningArray.addObject();\n                 toSlime(applicationObject, run.id().application(), request);\n                 applicationObject.setString(\"running\", run.id().type().jobName());\n             }\n+\n+            class RunInfo { //  \u30fd\u0f3c\u0e88\u0644\u035c\u0e88\u0f3d\u2501\u2606\uff9f.*\uff65\uff61\uff9f\n+                final Run run;\n+                final boolean upgrade;\n+                RunInfo(Run run, boolean upgrade) { this.run = run; this.upgrade = upgrade; }\n+                @Override public String toString() { return run.id().toString(); }\n+            }\n+            Cursor instancesArray = versionObject.setArray(\"applications\");\n+            Stream.of(statistics.failingUpgrades().stream().map(run -> new RunInfo(run, true)),\n+                      statistics.otherFailing().stream().map(run -> new RunInfo(run, false)),\n+                      statistics.runningUpgrade().stream().map(run -> new RunInfo(run, true)),\n+                      statistics.otherRunning().stream().map(run -> new RunInfo(run, false)),\n+                      statistics.productionSuccesses().stream().map(run -> new RunInfo(run, true)))\n+                  .flatMap(identity())\n+                  .collect(Collectors.groupingBy(run -> run.run.id().application(),\n+                                                 LinkedHashMap::new, // Put apps with failing and running jobs first.\n+                                                 groupingBy(run -> run.run.id().type())))\n+                  .forEach((instance, runs) -> {\n+                      Cursor instanceObject = instancesArray.addObject();\n+                      instanceObject.setString(\"tenant\", instance.tenant().value());\n+                      instanceObject.setString(\"application\", instance.application().value());\n+                      instanceObject.setString(\"instance\", instance.instance().value());\n+                      instanceObject.setLong(\"productionJobCount\", jobsByInstance.get(instance).production().size());\n+                      instanceObject.setString(\"upgradePolicy\", toString(deploymentStatuses.matching(status -> status.application().id().equals(TenantAndApplicationId.from(instance)))\n+                                                                                           .first().map(status -> status.application().deploymentSpec())\n+                                                                                           .flatMap(spec -> spec.instance(instance.instance()).map(DeploymentInstanceSpec::upgradePolicy))\n+                                                                                           .orElse(DeploymentSpec.UpgradePolicy.defaultPolicy)));\n+                      Cursor allJobsObject = instanceObject.setObject(\"allJobs\");\n+                      Cursor upgradeJobsObject = instanceObject.setObject(\"upgradeJobs\");\n+                      for (JobType type : JobType.allIn(controller.system())) {", "originalCommit": "1cede6bf2388dfa45a0aed947fded75f4164396e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyMjkwMg==", "url": "https://github.com/vespa-engine/vespa/pull/12869#discussion_r405022902", "bodyText": "I guess that's an option that saves some JSON over the wire :)", "author": "jonmv", "createdAt": "2020-04-07T18:27:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAwNTk5MA=="}], "type": "inlineReview"}, {"oid": "7bae03fa21e90e67c64d46caf0ad1c3eaf2714d0", "url": "https://github.com/vespa-engine/vespa/commit/7bae03fa21e90e67c64d46caf0ad1c3eaf2714d0", "message": "List jobs explicitly", "committedDate": "2020-04-07T18:48:47Z", "type": "commit"}]}