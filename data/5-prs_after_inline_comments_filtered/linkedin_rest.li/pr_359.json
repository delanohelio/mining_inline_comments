{"pr_number": 359, "pr_title": "[darkcluster] Adding identical traffic multiplier strategy", "pr_createdAt": "2020-07-30T21:30:28Z", "pr_url": "https://github.com/linkedin/rest.li/pull/359", "timeline": [{"oid": "1ef412f3c11400c3529d744a289eaf450a2da519", "url": "https://github.com/linkedin/rest.li/commit/1ef412f3c11400c3529d744a289eaf450a2da519", "message": "[darkcluster] Adding identical traffic multiplier strategy", "committedDate": "2020-07-30T21:19:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI4NDM0Mg==", "url": "https://github.com/linkedin/rest.li/pull/359#discussion_r463284342", "bodyText": "javadoc. this should mention that it is similar to RelativeTraffic, etc.", "author": "davidhoa", "createdAt": "2020-07-30T21:34:18Z", "path": "darkcluster/src/main/java/com/linkedin/darkcluster/impl/IdenticalTrafficMultiplierDarkClusterStrategy.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package com.linkedin.darkcluster.impl;\n+\n+import com.linkedin.common.util.Notifier;\n+import com.linkedin.d2.DarkClusterConfig;\n+import com.linkedin.d2.balancer.ServiceUnavailableException;\n+import com.linkedin.d2.balancer.util.ClusterInfoProvider;\n+import com.linkedin.darkcluster.api.BaseDarkClusterDispatcher;\n+import com.linkedin.darkcluster.api.DarkClusterStrategy;\n+import com.linkedin.r2.message.RequestContext;\n+import com.linkedin.r2.message.rest.RestRequest;\n+import java.util.Random;\n+\n+", "originalCommit": "1ef412f3c11400c3529d744a289eaf450a2da519", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI4NjE4Mg==", "url": "https://github.com/linkedin/rest.li/pull/359#discussion_r463286182", "bodyText": "why is one \"< 0.2\" and the other \"< 0.3\" if they have the same multiplier?", "author": "davidhoa", "createdAt": "2020-07-30T21:38:22Z", "path": "darkcluster/src/main/java/com/linkedin/darkcluster/impl/IdenticalTrafficMultiplierDarkClusterStrategy.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package com.linkedin.darkcluster.impl;\n+\n+import com.linkedin.common.util.Notifier;\n+import com.linkedin.d2.DarkClusterConfig;\n+import com.linkedin.d2.balancer.ServiceUnavailableException;\n+import com.linkedin.d2.balancer.util.ClusterInfoProvider;\n+import com.linkedin.darkcluster.api.BaseDarkClusterDispatcher;\n+import com.linkedin.darkcluster.api.DarkClusterStrategy;\n+import com.linkedin.r2.message.RequestContext;\n+import com.linkedin.r2.message.rest.RestRequest;\n+import java.util.Random;\n+\n+\n+public class IdenticalTrafficMultiplierDarkClusterStrategy implements DarkClusterStrategy {\n+  private final String _originalClusterName;\n+  private final String _darkClusterName;\n+  private final Float _multiplier;\n+  private final BaseDarkClusterDispatcher _baseDarkClusterDispatcher;\n+  private final Notifier _notifier;\n+  private final Random _random;\n+  private final ClusterInfoProvider _clusterInfoProvider;\n+\n+  private static final String RANDOM_NUMBER_KEY = \"identicalTrafficMultiplier.randomNumber\";\n+\n+  public IdenticalTrafficMultiplierDarkClusterStrategy(String sourceClusterName,\n+      String darkClusterName,\n+      Float multiplier,\n+      BaseDarkClusterDispatcher baseDarkClusterDispatcher,\n+      Notifier notifier,\n+      ClusterInfoProvider clusterInfoProvider, Random random)\n+  {\n+    _originalClusterName = sourceClusterName;\n+    _darkClusterName = darkClusterName;\n+    _multiplier = multiplier;\n+    _baseDarkClusterDispatcher = baseDarkClusterDispatcher;\n+    _notifier = notifier;\n+    _random = random;\n+    _clusterInfoProvider = clusterInfoProvider;\n+  }\n+\n+  @Override\n+  public boolean handleRequest(RestRequest originalRequest, RestRequest darkRequest, RequestContext requestContext)\n+  {\n+    int numRequestDuplicates = getNumDuplicateRequests(requestContext);\n+    return _baseDarkClusterDispatcher.sendRequest(originalRequest, darkRequest, requestContext, numRequestDuplicates);\n+  }\n+\n+  /**\n+   * We won't create this strategy if this config isn't valid for this strategy. For instance, we don't want to create\n+   * the IdenticalTrafficMultiplierDarkClusterStrategy if there's no multiplier or if the multiplier is zero, because we'd\n+   * be doing pointless work on every getOrCreate. Instead if will go to the next strategy (or NoOpDarkClusterStrategy).\n+   *\n+   * This is a static method defined here because we don't want to instantiate a strategy to check this. It cannot be a\n+   * method that is on the interface because static methods on an interface cannot be overridden by implementations.\n+   * @param darkClusterConfig\n+   * @return true if config is valid for this strategy\n+   */\n+  public static boolean isValidConfig(DarkClusterConfig darkClusterConfig)\n+  {\n+    return darkClusterConfig.hasMultiplier() && darkClusterConfig.getMultiplier() > 0;\n+  }\n+\n+  /**\n+   * The high level goal of this strategy is to send identical traffic to all the dark clusters configured with this\n+   * strategy. It accomplishes this by persisting the random number generated for a request in {@link RequestContext}\n+   * and reusing the same so that if a request is chosen to be sent to one dark cluster, it will be sent for all other\n+   * dark clusters as well.\n+   *\n+   * The logic to determine if a request should be sent to dark cluster or not for the first time is determined similar\n+   * to {@link RelativeTrafficMultiplierDarkClusterStrategy}\n+   *\n+   * Example 1:\n+   * There are 3 dark clusters: A, B and C all of which are configured with same multiplier of 0.1.\n+   * There is 1 source instance and 1 dark instance in each cluster.\n+   * Assume that the strategy is called for A, B and C in the same order.\n+   * For A, there will be no random number persisted in requestContext since we're seeing this request for the first time\n+   * So we compute random number, say 0.05 and persist the same in requestContext\n+   * Avg#DarkRequests = 1 * 0.1 / 1 = 0.1\n+   * since 0.05 < 0.1, request will be sent to A\n+   * When it comes to B, the random number is already present and since it is < 0.2, request will be sent to B", "originalCommit": "1ef412f3c11400c3529d744a289eaf450a2da519", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ee09c898fb75b9cfb3e7e2a0e061b69fc222465c", "url": "https://github.com/linkedin/rest.li/commit/ee09c898fb75b9cfb3e7e2a0e061b69fc222465c", "message": "[darkcluster] Adding identical traffic multiplier strategy", "committedDate": "2020-07-31T01:32:25Z", "type": "commit"}, {"oid": "0fe84dba85315eebaa989fd306766499e86911d1", "url": "https://github.com/linkedin/rest.li/commit/0fe84dba85315eebaa989fd306766499e86911d1", "message": "Add gradle property to skip generateRestModel task (#362)", "committedDate": "2020-08-04T17:21:10Z", "type": "commit"}, {"oid": "9916eab00528bf26af5e84c660b59c69eca91c97", "url": "https://github.com/linkedin/rest.li/commit/9916eab00528bf26af5e84c660b59c69eca91c97", "message": "Implement support for always projecting fields by name. (#358)\n\n* Release 29.4.7", "committedDate": "2020-08-04T17:23:08Z", "type": "commit"}, {"oid": "3f3559a3f61d657a5e0c43e9b16d92f8729a1816", "url": "https://github.com/linkedin/rest.li/commit/3f3559a3f61d657a5e0c43e9b16d92f8729a1816", "message": "[darkcluster] Adding identical traffic multiplier strategy", "committedDate": "2020-08-04T17:24:19Z", "type": "commit"}, {"oid": "090f1a9d810a3830c080454a3e0679aafa9618a6", "url": "https://github.com/linkedin/rest.li/commit/090f1a9d810a3830c080454a3e0679aafa9618a6", "message": "[darkcluster] Adding identical traffic multiplier strategy", "committedDate": "2020-08-04T17:24:20Z", "type": "commit"}, {"oid": "901639b8d7689081f4b846fad4cca3b1169b49aa", "url": "https://github.com/linkedin/rest.li/commit/901639b8d7689081f4b846fad4cca3b1169b49aa", "message": "Merge remote-tracking branch 'upstream/master' into master", "committedDate": "2020-08-04T17:30:13Z", "type": "commit"}, {"oid": "ac220fac4a770d80a82262d068694eb9de03ea0e", "url": "https://github.com/linkedin/rest.li/commit/ac220fac4a770d80a82262d068694eb9de03ea0e", "message": "Merge remote-tracking branch 'upstream/master' into master", "committedDate": "2020-08-04T17:38:42Z", "type": "commit"}, {"oid": "40b11c3f232affd887d9a0d569d0b8c7f776703b", "url": "https://github.com/linkedin/rest.li/commit/40b11c3f232affd887d9a0d569d0b8c7f776703b", "message": "Merge branch 'master' of github.com:srikrish-19/rest.li into master", "committedDate": "2020-08-04T17:44:04Z", "type": "commit"}, {"oid": "4e48e44c9f91bad387d4015710168692110fd25b", "url": "https://github.com/linkedin/rest.li/commit/4e48e44c9f91bad387d4015710168692110fd25b", "message": "Merge branch 'master' of github.com:srikrish-19/rest.li into master", "committedDate": "2020-08-04T18:17:29Z", "type": "commit"}, {"oid": "9cc3957d0d6d8100cdb4c57d9a3a4c5ea8fe8e79", "url": "https://github.com/linkedin/rest.li/commit/9cc3957d0d6d8100cdb4c57d9a3a4c5ea8fe8e79", "message": "darkcluster - identical traffic multiplier: Adding the formula for avg # of dark requests", "committedDate": "2020-08-04T18:17:39Z", "type": "commit"}, {"oid": "478fa28e9a7acdc45c314e26fd751d614aad0eab", "url": "https://github.com/linkedin/rest.li/commit/478fa28e9a7acdc45c314e26fd751d614aad0eab", "message": "Merge branch 'master' of github.com:srikrish-19/rest.li into master", "committedDate": "2020-08-04T18:18:37Z", "type": "commit"}, {"oid": "d60568b5a6d391cdf1fcec170de90951e8eaf263", "url": "https://github.com/linkedin/rest.li/commit/d60568b5a6d391cdf1fcec170de90951e8eaf263", "message": "updating changelog", "committedDate": "2020-08-04T21:30:20Z", "type": "commit"}]}