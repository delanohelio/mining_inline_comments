{"pr_number": 434, "pr_title": "Add method in ParseResult class to get base schema", "pr_createdAt": "2020-10-02T18:04:27Z", "pr_url": "https://github.com/linkedin/rest.li/pull/434", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk3OTkxNA==", "url": "https://github.com/linkedin/rest.li/pull/434#discussion_r498979914", "bodyText": "Please add java doc on both these methods and also for getSchemaAndLocations. Given we have mutliple methods, it would be helpful to document their behavior.", "author": "karthikbalasub", "createdAt": "2020-10-02T18:19:16Z", "path": "generator/src/main/java/com/linkedin/pegasus/generator/DataSchemaParser.java", "diffHunk": "@@ -211,24 +209,33 @@ private void init(AbstractMultiFormatDataSchemaResolver resolver,\n       return _schemaAndLocations;\n     }\n \n+    public Map<DataSchema, DataSchemaLocation> getBaseDataSchemaAndLocations()\n+    {\n+      return _schemaAndLocations.entrySet().stream().filter(entry -> !isExtensionSchemaLocation(entry))\n+          .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+    }\n+\n     public Map<DataSchema, DataSchemaLocation> getExtensionDataSchemaAndLocations()", "originalCommit": "2588a9447ac0fdb8503d8e9e51e4deca9d5688f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk5ODA3OQ==", "url": "https://github.com/linkedin/rest.li/pull/434#discussion_r498998079", "bodyText": "Added", "author": "BrianPin", "createdAt": "2020-10-02T18:58:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk3OTkxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4MTA4Mw==", "url": "https://github.com/linkedin/rest.li/pull/434#discussion_r498981083", "bodyText": "Not needed as the test will fail for any uncaught exception.", "author": "karthikbalasub", "createdAt": "2020-10-02T18:21:54Z", "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestDataSchemaParser.java", "diffHunk": "@@ -212,6 +212,59 @@ public void testSchemaFilesInExtensionPathInFolder(String[] files, String[] expe\n   }\n \n \n+  @DataProvider(name = \"ERFilesForBaseSchema\")\n+  private Object[][] dataSchemaFiles()\n+  {\n+    return new Object[][]\n+        {\n+            {\n+                new String[]{\n+                    \"extensions/BarExtensions.pdl\",\n+                    \"extensions/FooExtensions.pdl\",\n+                    \"extensions/FuzzExtensions.pdl\",\n+                    \"pegasus/Foo.pdl\",\n+                    \"pegasus/Bar.pdl\",\n+                    \"pegasus/Fuzz.pdsc\"\n+                },\n+                new String[]{\n+                    \"Foo\",\n+                    \"Bar\",\n+                    \"Fuzz\",\n+                    \"InlineRecord\"\n+                }\n+            }\n+        };\n+  }\n+\n+  @Test(dataProvider = \"ERFilesForBaseSchema\")\n+  public void testParseResultToGetBaseSchemas(String[] files, String[] expectedExtensions) throws Exception\n+  {\n+    String pegasusWithFS = pegasusDir + FS;\n+    String resolverPath = pegasusWithFS + \"extensionSchemas/extensions:\"\n+        + pegasusWithFS + \"extensionSchemas/others:\"\n+        + pegasusWithFS + \"extensionSchemas/pegasus\";\n+    try\n+    {\n+      DataSchemaParser parser = new DataSchemaParser(resolverPath);\n+      String[] schemaFiles = Arrays.stream(files).map(casename -> pegasusDir + FS + \"extensionSchemas\" + FS + casename).toArray(String[]::new);\n+      DataSchemaParser.ParseResult parseResult = parser.parseSources(schemaFiles);\n+      Map<DataSchema, DataSchemaLocation> bases = parseResult.getBaseDataSchemaAndLocations();\n+      assertEquals(bases.size(), expectedExtensions.length);\n+      Set<String> actualNames = bases\n+          .keySet()\n+          .stream()\n+          .map(dataSchema -> (NamedDataSchema) dataSchema)\n+          .map(NamedDataSchema::getName)\n+          .collect(Collectors.toSet());\n+      assertEquals(actualNames, Arrays.stream(expectedExtensions).collect(Collectors.toSet()));\n+    }\n+    catch (Exception e)\n+    {\n+      Assert.fail(\"Test failed\");\n+    }", "originalCommit": "2588a9447ac0fdb8503d8e9e51e4deca9d5688f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk5ODI5OQ==", "url": "https://github.com/linkedin/rest.li/pull/434#discussion_r498998299", "bodyText": "Removed", "author": "BrianPin", "createdAt": "2020-10-02T18:58:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4MTA4Mw=="}], "type": "inlineReview"}, {"oid": "81195434f0762f83fa9fb23943dbee18e110c2d2", "url": "https://github.com/linkedin/rest.li/commit/81195434f0762f83fa9fb23943dbee18e110c2d2", "message": "Add method in ParseResult class to get base schema", "committedDate": "2020-10-02T18:22:25Z", "type": "commit"}, {"oid": "81195434f0762f83fa9fb23943dbee18e110c2d2", "url": "https://github.com/linkedin/rest.li/commit/81195434f0762f83fa9fb23943dbee18e110c2d2", "message": "Add method in ParseResult class to get base schema", "committedDate": "2020-10-02T18:22:25Z", "type": "forcePushed"}, {"oid": "2253b518abc4c5b4a187b60accfa8b59eb57518d", "url": "https://github.com/linkedin/rest.li/commit/2253b518abc4c5b4a187b60accfa8b59eb57518d", "message": "address karthik comments", "committedDate": "2020-10-02T18:56:03Z", "type": "commit"}]}