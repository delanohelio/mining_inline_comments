{"pr_number": 414, "pr_title": "Add generatePegasusSchemeSnapshot task", "pr_createdAt": "2020-09-09T16:43:14Z", "pr_url": "https://github.com/linkedin/rest.li/pull/414", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk5MzM3Mw==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r485993373", "bodyText": "I feel this task function and the other function below configurePegasusExtensionSchemaSnapshotGeneration\nshare some common logic, would it be better to factor some common logic together to behave the DRY (Dont repeat yourself) pattern?", "author": "BrianPin", "createdAt": "2020-09-10T00:29:18Z", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -1390,6 +1435,87 @@ protected void configureRestModelGeneration(Project project, SourceSet sourceSet\n     });\n   }\n \n+  protected void configurePegasusSchemaSnapshotGeneration(Project project, SourceSet sourceSet)", "originalCommit": "a1e22a5bd6445d1a228bed59322c03ce5c3198c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAyNTk3NQ==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r486025975", "bodyText": "I could factor some common logic.", "author": "nickibi", "createdAt": "2020-09-10T02:30:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk5MzM3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAzMTI0MQ==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r486031241", "bodyText": "Abstracted common logic to helper methods.", "author": "nickibi", "createdAt": "2020-09-10T02:50:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk5MzM3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk5ODkzNg==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r485998936", "bodyText": "style", "author": "BrianPin", "createdAt": "2020-09-10T00:49:47Z", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/snapshot/gen/PegasusSchemaSnapshotExporter.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.tools.snapshot.gen;\n+\n+import com.linkedin.data.schema.AbstractSchemaEncoder;\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.DataSchemaResolver;\n+import com.linkedin.data.schema.NamedDataSchema;\n+import com.linkedin.data.schema.SchemaToPdlEncoder;\n+import com.linkedin.data.schema.grammar.PdlSchemaParser;\n+import com.linkedin.data.schema.resolver.MultiFormatDataSchemaResolver;\n+import com.linkedin.pegasus.generator.GeneratorResult;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.commons.io.FileUtils;\n+\n+/**\n+ * PegasusSchemaSnapshotExporter, generating pegasus schema snapshot(.pdl) files\n+ *\n+ * @author Yingjie Bi\n+ */\n+public class PegasusSchemaSnapshotExporter\n+{\n+  private static final String PEGASUS_SCHEMA_SNAPSHOT_SUFFIX = \".pdl\";\n+\n+  private static final String PDL = \"pdl\";\n+\n+  /**\n+   * Generate pegasus schema snapshot(pegasusSchemaSnapshot.pdl) files to the provided output directory\n+   * based on the given input pegasus schemas.\n+   *\n+   * @param resolverPath schema resolver path\n+   * @param inputPath input files directory\n+   * @param outputDir output files directory\n+   * @return GeneratorResult\n+   * @throws IOException\n+   */\n+  public GeneratorResult export(String resolverPath, String inputPath, File outputDir) throws IOException {", "originalCommit": "a1e22a5bd6445d1a228bed59322c03ce5c3198c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAyNDQwMw==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r486024403", "bodyText": "fixed", "author": "nickibi", "createdAt": "2020-09-10T02:24:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk5ODkzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwMTM1Nw==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r486001357", "bodyText": "Is get(0) meant to get top level schema only?\nIf say sub-level schema changed, and we just get(0), that means we dont treat sub-level schema change as change? Since the snapshot didn't change.\nBy sub-level I mean some recursive entity in the top level record's field", "author": "BrianPin", "createdAt": "2020-09-10T00:58:50Z", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/snapshot/gen/PegasusSchemaSnapshotExporter.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.tools.snapshot.gen;\n+\n+import com.linkedin.data.schema.AbstractSchemaEncoder;\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.DataSchemaResolver;\n+import com.linkedin.data.schema.NamedDataSchema;\n+import com.linkedin.data.schema.SchemaToPdlEncoder;\n+import com.linkedin.data.schema.grammar.PdlSchemaParser;\n+import com.linkedin.data.schema.resolver.MultiFormatDataSchemaResolver;\n+import com.linkedin.pegasus.generator.GeneratorResult;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.commons.io.FileUtils;\n+\n+/**\n+ * PegasusSchemaSnapshotExporter, generating pegasus schema snapshot(.pdl) files\n+ *\n+ * @author Yingjie Bi\n+ */\n+public class PegasusSchemaSnapshotExporter\n+{\n+  private static final String PEGASUS_SCHEMA_SNAPSHOT_SUFFIX = \".pdl\";\n+\n+  private static final String PDL = \"pdl\";\n+\n+  /**\n+   * Generate pegasus schema snapshot(pegasusSchemaSnapshot.pdl) files to the provided output directory\n+   * based on the given input pegasus schemas.\n+   *\n+   * @param resolverPath schema resolver path\n+   * @param inputPath input files directory\n+   * @param outputDir output files directory\n+   * @return GeneratorResult\n+   * @throws IOException\n+   */\n+  public GeneratorResult export(String resolverPath, String inputPath, File outputDir) throws IOException {\n+    List<DataSchema> dataSchemas = parseDataSchema(resolverPath, inputPath);\n+    pegasusSchemaSnapshotResult result = new pegasusSchemaSnapshotResult();\n+    for (DataSchema dataSchema : dataSchemas)\n+    {\n+     File file = writeSnapshotFile(outputDir, ((NamedDataSchema) dataSchema).getFullName(), dataSchema);\n+     result.addModifiedFile(file);\n+     result.addTargetFile(file);\n+    }\n+    return result;\n+  }\n+\n+  private static List<DataSchema> parseDataSchema(String resolverPath, String inputPath)\n+      throws RuntimeException, FileNotFoundException\n+  {\n+    Iterator<File> iterator = FileUtils.iterateFiles(new File(inputPath), new String[]{PDL}, true);\n+    DataSchemaResolver resolver = MultiFormatDataSchemaResolver.withBuiltinFormats(resolverPath);\n+    List<DataSchema> schemas = new ArrayList<>();\n+    while (iterator.hasNext())\n+    {\n+      File inputFile = iterator.next();\n+      PdlSchemaParser parser = new PdlSchemaParser(resolver);\n+      parser.parse(new FileInputStream(inputFile));\n+      if (parser.hasError())\n+      {\n+        throw new RuntimeException(parser.errorMessage());\n+      }\n+\n+      List<DataSchema> topLevelDataSchemas = parser.topLevelDataSchemas();\n+      if (topLevelDataSchemas == null || topLevelDataSchemas.isEmpty() || topLevelDataSchemas.size() > 1)\n+      {\n+        throw new RuntimeException(\"Could not parse extension schema : \" + inputFile.getAbsolutePath());\n+      }\n+      DataSchema topLevelDataSchema = topLevelDataSchemas.get(0);", "originalCommit": "a1e22a5bd6445d1a228bed59322c03ce5c3198c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwMzkwMQ==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r486003901", "bodyText": "thanks for addressing this question offline", "author": "BrianPin", "createdAt": "2020-09-10T01:08:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwMTM1Nw=="}], "type": "inlineReview"}, {"oid": "26865d7cf0830e4f5128aabac38be728bf4bec19", "url": "https://github.com/linkedin/rest.li/commit/26865d7cf0830e4f5128aabac38be728bf4bec19", "message": "Add generatePegasusSchemeSnapshot task", "committedDate": "2020-09-10T02:21:38Z", "type": "forcePushed"}, {"oid": "731b1373a6d1012e1936daa121cd8206c58afd59", "url": "https://github.com/linkedin/rest.li/commit/731b1373a6d1012e1936daa121cd8206c58afd59", "message": "Add generatePegasusSchemeSnapshot task", "committedDate": "2020-09-10T02:23:31Z", "type": "forcePushed"}, {"oid": "7097fdb9915541dd4dca49d97e121a1325b4d064", "url": "https://github.com/linkedin/rest.li/commit/7097fdb9915541dd4dca49d97e121a1325b4d064", "message": "Add generatePegasusSchemeSnapshot task", "committedDate": "2020-09-10T02:48:42Z", "type": "forcePushed"}, {"oid": "4fc4d7d18c9a84e49b64fc3ae74438753ec3257a", "url": "https://github.com/linkedin/rest.li/commit/4fc4d7d18c9a84e49b64fc3ae74438753ec3257a", "message": "Add generatePegasusSchemeSnapshot task", "committedDate": "2020-09-10T05:49:11Z", "type": "forcePushed"}, {"oid": "b0a4c6fb591065c399e157c910ba287fdd04d0f9", "url": "https://github.com/linkedin/rest.li/commit/b0a4c6fb591065c399e157c910ba287fdd04d0f9", "message": "Add generatePegasusSchemeSnapshot task", "committedDate": "2020-09-10T06:10:22Z", "type": "forcePushed"}, {"oid": "74fe54efc2bd8f9085b283a892fc40d46502fca6", "url": "https://github.com/linkedin/rest.li/commit/74fe54efc2bd8f9085b283a892fc40d46502fca6", "message": "Add generatePegasusSchemeSnapshot task", "committedDate": "2020-09-10T06:29:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIwNTgwNw==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r486205807", "bodyText": "PEGASUS_PLUGIN_CONFIGURATION can be instead of pegasusPlugin here.\nalso, Pegasus may be removed from enablePegasusSchemaCompatibilityCheck, same for other constants", "author": "aman1309", "createdAt": "2020-09-10T09:42:23Z", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -571,6 +573,16 @@\n \n   private static final String PEGASUS_PLUGIN_CONFIGURATION = \"pegasusPlugin\";\n \n+  // Enable the use of generic pegasus schema compatibility checker\n+  private static final String ENABLE_PEGASUS_SCHEMA_COMPATIBILITY_CHECK = \"pegasusPlugin.enablePegasusSchemaCompatibilityCheck\";", "originalCommit": "74fe54efc2bd8f9085b283a892fc40d46502fca6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU2MDE1NQ==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r486560155", "bodyText": "\"pegasusPlugin.\" prefix is used to make the configuration name unique, just in case the configuration name is duplicate with other configuration name in other plugins. It is the same format as other pegasus configurations. I will keep this part as is.", "author": "nickibi", "createdAt": "2020-09-10T18:43:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIwNTgwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIwNzc0NQ==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r486207745", "bodyText": "in order to distinguish, recommend replacing pegsus with ENTITY/Data SchemaSnapshot here and same for other places", "author": "aman1309", "createdAt": "2020-09-10T09:45:29Z", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -571,6 +573,16 @@\n \n   private static final String PEGASUS_PLUGIN_CONFIGURATION = \"pegasusPlugin\";\n \n+  // Enable the use of generic pegasus schema compatibility checker\n+  private static final String ENABLE_PEGASUS_SCHEMA_COMPATIBILITY_CHECK = \"pegasusPlugin.enablePegasusSchemaCompatibilityCheck\";\n+\n+  private static final String PEGASUS_SCHEMA_SNAPSHOT = \"PegasusSchemaSnapshot\";", "originalCommit": "74fe54efc2bd8f9085b283a892fc40d46502fca6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4NDUyOQ==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r486584529", "bodyText": "I am kind of confused here. Are you saying PegasusSchemaSnapshot is not an appropriate name? It is used as the gradle task name. For example, generatePegasusSchemaSnapshot.\n\"Entity\" is definitely inappropriate here. I feel \"Data\" is not accurate. This is specific for Pegasus schema, we have avroSchema task in the same plugin. DataSchema makes it so generic.", "author": "nickibi", "createdAt": "2020-09-10T19:29:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIwNzc0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIwODU2Nw==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r486208567", "bodyText": "move \"src\" to constant", "author": "aman1309", "createdAt": "2020-09-10T09:46:49Z", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -1070,6 +1089,32 @@ private static String getIdlPath(Project project, SourceSet sourceSet)\n     }\n   }\n \n+  private static String getPegasusSchemaSnapshotPath(Project project, SourceSet sourceSet)\n+  {\n+    String override = getOverridePath(project, sourceSet, \"overridePegasusSchemaSnapshotDir\");\n+    if (override == null)\n+    {\n+      return \"src\" + File.separatorChar + sourceSet.getName() + File.separatorChar + \"pegasusSchemaSnapshot\";", "originalCommit": "74fe54efc2bd8f9085b283a892fc40d46502fca6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4MDcyNw==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r486680727", "bodyText": "used constant instead", "author": "nickibi", "createdAt": "2020-09-10T23:04:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIwODU2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIxODg1MQ==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r486218851", "bodyText": "move \"assemble\" to constant", "author": "aman1309", "createdAt": "2020-09-10T10:04:06Z", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -1390,6 +1435,64 @@ protected void configureRestModelGeneration(Project project, SourceSet sourceSet\n     });\n   }\n \n+  protected void configurePegasusSchemaSnapshotGeneration(Project project, SourceSet sourceSet)\n+  {\n+    File pegasusSchemaDir = project.file(getDataSchemaPath(project, sourceSet));\n+    File publishablePegasusSchemaSnapshotDir = project.file(project.getBuildDir().getAbsolutePath()\n+        + File.separatorChar + sourceSet.getName() + PEGASUS_SCHEMA_SNAPSHOT);\n+\n+    Task generatePegasusSchemaSnapshot = generatePegasusSchemaSnapshot(project, sourceSet,\n+        PEGASUS_SCHEMA_SNAPSHOT, pegasusSchemaDir, publishablePegasusSchemaSnapshotDir);\n+\n+    Task checkSchemaSnapshot = project.getTasks().create(sourceSet.getTaskName(\"check\", PEGASUS_SCHEMA_SNAPSHOT),\n+        CheckPegasusSnapshotTask.class, task ->\n+        {\n+          task.dependsOn(generatePegasusSchemaSnapshot);\n+          // TODO: update CheckPegasusSnapshotTask\n+        });\n+\n+    File pegasusSchemaSnapshotDir = new File(getPegasusSchemaSnapshotPath(project, sourceSet));\n+    pegasusSchemaSnapshotDir.mkdirs();\n+\n+    Task publishPegasusSchemaSnapshot = publishPegasusSchemaSnapshot(project, sourceSet,\n+        PEGASUS_SCHEMA_SNAPSHOT, checkSchemaSnapshot, publishablePegasusSchemaSnapshotDir,pegasusSchemaSnapshotDir);\n+\n+    project.getTasks().getByName(\"assemble\").dependsOn(publishPegasusSchemaSnapshot);", "originalCommit": "74fe54efc2bd8f9085b283a892fc40d46502fca6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIyNDc5MQ==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r486224791", "bodyText": "is log level info required? this can be debug", "author": "aman1309", "createdAt": "2020-09-10T10:14:49Z", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -1390,6 +1435,64 @@ protected void configureRestModelGeneration(Project project, SourceSet sourceSet\n     });\n   }\n \n+  protected void configurePegasusSchemaSnapshotGeneration(Project project, SourceSet sourceSet)\n+  {\n+    File pegasusSchemaDir = project.file(getDataSchemaPath(project, sourceSet));\n+    File publishablePegasusSchemaSnapshotDir = project.file(project.getBuildDir().getAbsolutePath()\n+        + File.separatorChar + sourceSet.getName() + PEGASUS_SCHEMA_SNAPSHOT);\n+\n+    Task generatePegasusSchemaSnapshot = generatePegasusSchemaSnapshot(project, sourceSet,\n+        PEGASUS_SCHEMA_SNAPSHOT, pegasusSchemaDir, publishablePegasusSchemaSnapshotDir);\n+\n+    Task checkSchemaSnapshot = project.getTasks().create(sourceSet.getTaskName(\"check\", PEGASUS_SCHEMA_SNAPSHOT),\n+        CheckPegasusSnapshotTask.class, task ->\n+        {\n+          task.dependsOn(generatePegasusSchemaSnapshot);\n+          // TODO: update CheckPegasusSnapshotTask\n+        });\n+\n+    File pegasusSchemaSnapshotDir = new File(getPegasusSchemaSnapshotPath(project, sourceSet));\n+    pegasusSchemaSnapshotDir.mkdirs();\n+\n+    Task publishPegasusSchemaSnapshot = publishPegasusSchemaSnapshot(project, sourceSet,\n+        PEGASUS_SCHEMA_SNAPSHOT, checkSchemaSnapshot, publishablePegasusSchemaSnapshotDir,pegasusSchemaSnapshotDir);\n+\n+    project.getTasks().getByName(\"assemble\").dependsOn(publishPegasusSchemaSnapshot);\n+  }\n+\n+  protected void configurePegasusExtensionSchemaSnapshotGeneration(Project project, SourceSet sourceSet)\n+  {\n+    File publishablePegasusExtensionSchemaSnapshotDir = project.file(project.getBuildDir().getAbsolutePath()\n+        + File.separatorChar + sourceSet.getName() + PEGASUS_EXTENSION_SCHEMA_SNAPSHOT);\n+    File extensionSchemaDir = project.file(getExtensionSchemaPath(project, sourceSet));\n+\n+    if (!SharedFileUtils.getSuffixedFiles(project, extensionSchemaDir, PDL_FILE_SUFFIX).isEmpty())\n+    {\n+      Task generatePegasusExtensionSchemaSnapshot = generatePegasusSchemaSnapshot(project, sourceSet,\n+          PEGASUS_EXTENSION_SCHEMA_SNAPSHOT, extensionSchemaDir, publishablePegasusExtensionSchemaSnapshotDir);\n+\n+      File pegasusExtensionSchemaSnapshotDir = new File(getPegasusExtensionSchemaSnapshotPath(project, sourceSet));\n+      pegasusExtensionSchemaSnapshotDir.mkdirs();\n+\n+      Task checkPegasusExtensionSchemaSnapshotTask = project.getTasks().create(sourceSet.getTaskName(\"check\", PEGASUS_EXTENSION_SCHEMA_SNAPSHOT),\n+          CheckPegasusSnapshotTask.class, task ->\n+          {\n+            task.dependsOn(generatePegasusExtensionSchemaSnapshot);\n+            // TODO: update CheckPegasusSnapshotTask\n+          });\n+\n+      Task publishPegasusExtensionSchemaSnapshot = publishPegasusSchemaSnapshot(project, sourceSet, PEGASUS_EXTENSION_SCHEMA_SNAPSHOT,\n+          checkPegasusExtensionSchemaSnapshotTask, publishablePegasusExtensionSchemaSnapshotDir, pegasusExtensionSchemaSnapshotDir);\n+\n+      project.getTasks().getByName(\"assemble\").dependsOn(publishPegasusExtensionSchemaSnapshot);\n+    }\n+    else\n+    {\n+      project.getLogger().info(\"No extension schemas, skip generatePegasusExtensionSchemaSnapshot task\");", "originalCommit": "74fe54efc2bd8f9085b283a892fc40d46502fca6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4MDA4NA==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r486680084", "bodyText": "info is not required, changed it to debug log.", "author": "nickibi", "createdAt": "2020-09-10T23:02:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIyNDc5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIyOTk4NA==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r486229984", "bodyText": "remove this", "author": "aman1309", "createdAt": "2020-09-10T10:23:57Z", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/tasks/GeneratePegasusSnapshotTask.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.pegasus.gradle.tasks;\n+\n+import com.linkedin.pegasus.gradle.PathingJarUtil;\n+import com.linkedin.pegasus.gradle.PegasusPlugin;\n+import com.linkedin.pegasus.gradle.internal.ArgumentFileGenerator;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.file.FileCollection;\n+import org.gradle.api.file.FileTree;\n+import org.gradle.api.tasks.CacheableTask;\n+import org.gradle.api.tasks.Classpath;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.InputDirectory;\n+import org.gradle.api.tasks.OutputDirectory;\n+import org.gradle.api.tasks.PathSensitive;\n+import org.gradle.api.tasks.PathSensitivity;\n+import org.gradle.api.tasks.SkipWhenEmpty;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import static com.linkedin.pegasus.gradle.SharedFileUtils.*;\n+\n+\n+/**\n+ * Generate pegasus schema's snapshot, which will be used for pegasus schema compatibility check\n+ *\n+ * To use this plugin, add these three lines to your build.gradle:\n+ * <pre>\n+ * apply plugin: 'li-pegasus'\n+ * </pre>", "originalCommit": "74fe54efc2bd8f9085b283a892fc40d46502fca6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI0MzU5Mw==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r486243593", "bodyText": "since we are supporting pdsc for extensions, would be good to add support here also.", "author": "aman1309", "createdAt": "2020-09-10T10:49:48Z", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/snapshot/gen/PegasusSchemaSnapshotExporter.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.tools.snapshot.gen;\n+\n+import com.linkedin.data.schema.AbstractSchemaEncoder;\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.DataSchemaResolver;\n+import com.linkedin.data.schema.NamedDataSchema;\n+import com.linkedin.data.schema.SchemaToPdlEncoder;\n+import com.linkedin.data.schema.grammar.PdlSchemaParser;\n+import com.linkedin.data.schema.resolver.MultiFormatDataSchemaResolver;\n+import com.linkedin.pegasus.generator.GeneratorResult;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.commons.io.FileUtils;\n+\n+\n+/**\n+ * PegasusSchemaSnapshotExporter, generating pegasus schema snapshot(.pdl) files\n+ *\n+ * @author Yingjie Bi\n+ */\n+public class PegasusSchemaSnapshotExporter\n+{\n+  private static final String PEGASUS_SCHEMA_SNAPSHOT_SUFFIX = \".pdl\";\n+\n+  private static final String PDL = \"pdl\";\n+\n+  /**\n+   * Generate pegasus schema snapshot(pegasusSchemaSnapshot.pdl) files to the provided output directory\n+   * based on the given input pegasus schemas.\n+   *\n+   * @param resolverPath schema resolver path\n+   * @param inputPath input files directory\n+   * @param outputDir output files directory\n+   * @return GeneratorResult\n+   * @throws IOException\n+   */\n+  public GeneratorResult export(String resolverPath, String inputPath, File outputDir) throws IOException\n+  {\n+    List<DataSchema> dataSchemas = parseDataSchema(resolverPath, inputPath);\n+    pegasusSchemaSnapshotResult result = new pegasusSchemaSnapshotResult();\n+    for (DataSchema dataSchema : dataSchemas)\n+    {\n+     File file = writeSnapshotFile(outputDir, ((NamedDataSchema) dataSchema).getFullName(), dataSchema);\n+     result.addModifiedFile(file);\n+     result.addTargetFile(file);\n+    }\n+    return result;\n+  }\n+\n+  private static List<DataSchema> parseDataSchema(String resolverPath, String inputPath)\n+      throws RuntimeException, FileNotFoundException\n+  {\n+    Iterator<File> iterator = FileUtils.iterateFiles(new File(inputPath), new String[]{PDL}, true);", "originalCommit": "74fe54efc2bd8f9085b283a892fc40d46502fca6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUxOTIxMA==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r486519210", "bodyText": "Extensions schema can only be pdl by design.\nSince we are going to remove pdsc support in the future, I feel for new feature, we should support pdl only.", "author": "nickibi", "createdAt": "2020-09-10T17:38:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI0MzU5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg4MzgyNw==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r486883827", "bodyText": "This task is also used for base schema snapshot and we. still support PDSC in oss. So I suggest adding PDSC support. You can keep the snapshot file format as PDL.", "author": "karthikbalasub", "createdAt": "2020-09-11T09:05:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI0MzU5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIzOTYzOQ==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487239639", "bodyText": "Updated", "author": "nickibi", "createdAt": "2020-09-11T19:15:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI0MzU5Mw=="}], "type": "inlineReview"}, {"oid": "08f607c88fad47affc5a21f243e7c1c60e853295", "url": "https://github.com/linkedin/rest.li/commit/08f607c88fad47affc5a21f243e7c1c60e853295", "message": "Add generatePegasusSchemeSnapshot task", "committedDate": "2020-09-10T18:53:35Z", "type": "forcePushed"}, {"oid": "c2c1f5221b654597245b101851d2ff65c8ff50c5", "url": "https://github.com/linkedin/rest.li/commit/c2c1f5221b654597245b101851d2ff65c8ff50c5", "message": "Add generatePegasusSchemeSnapshot task", "committedDate": "2020-09-10T19:51:34Z", "type": "forcePushed"}, {"oid": "3971dd49c2a9977f968223930b130e5df911dc66", "url": "https://github.com/linkedin/rest.li/commit/3971dd49c2a9977f968223930b130e5df911dc66", "message": "Add generatePegasusSchemeSnapshot task", "committedDate": "2020-09-10T23:03:10Z", "type": "forcePushed"}, {"oid": "aab19c3e906c7216daf5c1aa5d51b3b049fee105", "url": "https://github.com/linkedin/rest.li/commit/aab19c3e906c7216daf5c1aa5d51b3b049fee105", "message": "Add generatePegasusSchemeSnapshot task", "committedDate": "2020-09-11T01:52:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2NDA3OQ==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r486864079", "bodyText": "Why do you need separate snapshot directories? Can't we have just one snapshot dir that contains both regular and extension schemas?", "author": "karthikbalasub", "createdAt": "2020-09-11T08:40:16Z", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -571,6 +573,28 @@\n \n   private static final String PEGASUS_PLUGIN_CONFIGURATION = \"pegasusPlugin\";\n \n+  // Enable the use of generic pegasus schema compatibility checker\n+  private static final String ENABLE_PEGASUS_SCHEMA_COMPATIBILITY_CHECK = \"pegasusPlugin.enablePegasusSchemaCompatibilityCheck\";\n+\n+  private static final String PEGASUS_SCHEMA_SNAPSHOT = \"PegasusSchemaSnapshot\";\n+\n+  private static final String PEGASUS_EXTENSION_SCHEMA_SNAPSHOT = \"PegasusExtensionSchemaSnapshot\";\n+\n+  private static final String PEGASUS_SCHEMA_SNAPSHOT_DIR = \"pegasusSchemaSnapshot\";", "originalCommit": "aab19c3e906c7216daf5c1aa5d51b3b049fee105", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE3NDI5NQ==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487174295", "bodyText": "I feel they are two different use cases. Extension schema snapshot is a default feature, regular one is an optional feature. It could be clearer to keep them into separate directories. Also whether there will be a scenario regular schema and extension schema have the same name coincidently?", "author": "nickibi", "createdAt": "2020-09-11T17:02:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2NDA3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2NDM4MQ==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r486864381", "bodyText": "Remove unnecessary linespacing.", "author": "karthikbalasub", "createdAt": "2020-09-11T08:40:43Z", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -571,6 +573,28 @@\n \n   private static final String PEGASUS_PLUGIN_CONFIGURATION = \"pegasusPlugin\";\n \n+  // Enable the use of generic pegasus schema compatibility checker\n+  private static final String ENABLE_PEGASUS_SCHEMA_COMPATIBILITY_CHECK = \"pegasusPlugin.enablePegasusSchemaCompatibilityCheck\";\n+\n+  private static final String PEGASUS_SCHEMA_SNAPSHOT = \"PegasusSchemaSnapshot\";\n+\n+  private static final String PEGASUS_EXTENSION_SCHEMA_SNAPSHOT = \"PegasusExtensionSchemaSnapshot\";\n+\n+  private static final String PEGASUS_SCHEMA_SNAPSHOT_DIR = \"pegasusSchemaSnapshot\";\n+\n+  private static final String PEGASUS_EXTENSION_SCHEMA_SNAPSHOT_DIR = \"pegasusExtensionSchemaSnapshot\";\n+\n+  private static final String PEGASUS_SCHEMA_SNAPSHOT_DIR_OVERRIDE = \"overridePegasusSchemaSnapshotDir\";\n+\n+  private static final String PEGASUS_EXTENSION_SCHEMA_SNAPSHOT_DIR_OVERRIDE = \"overridePegasusExtensionSchemaSnapshotDir\";\n+\n+  private static final String ASSEMBLE = \"assemble\";\n+\n+  private static final String SRC = \"src\";\n+\n+\n+\n+", "originalCommit": "aab19c3e906c7216daf5c1aa5d51b3b049fee105", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIzODgzMQ==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487238831", "bodyText": "fixed", "author": "nickibi", "createdAt": "2020-09-11T19:13:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2NDM4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2NTgwNQ==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r486865805", "bodyText": "Add a comment to explain why this is conditional on a config", "author": "karthikbalasub", "createdAt": "2020-09-11T08:43:05Z", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -810,6 +834,13 @@ public void apply(Project project)\n       // if it can fail, fail it early\n       configureRestModelGeneration(project, sourceSet);\n \n+      if (isPropertyTrue(project, ENABLE_PEGASUS_SCHEMA_COMPATIBILITY_CHECK))", "originalCommit": "aab19c3e906c7216daf5c1aa5d51b3b049fee105", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIzODc4Ng==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487238786", "bodyText": "Added", "author": "nickibi", "createdAt": "2020-09-11T19:13:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2NTgwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2ODA3Ng==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r486868076", "bodyText": "nit: space after ,", "author": "karthikbalasub", "createdAt": "2020-09-11T08:46:58Z", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -1390,6 +1447,64 @@ protected void configureRestModelGeneration(Project project, SourceSet sourceSet\n     });\n   }\n \n+  protected void configurePegasusSchemaSnapshotGeneration(Project project, SourceSet sourceSet)\n+  {\n+    File pegasusSchemaDir = project.file(getDataSchemaPath(project, sourceSet));\n+    File publishablePegasusSchemaSnapshotDir = project.file(project.getBuildDir().getAbsolutePath()\n+        + File.separatorChar + sourceSet.getName() + PEGASUS_SCHEMA_SNAPSHOT);\n+\n+    Task generatePegasusSchemaSnapshot = generatePegasusSchemaSnapshot(project, sourceSet,\n+        PEGASUS_SCHEMA_SNAPSHOT, pegasusSchemaDir, publishablePegasusSchemaSnapshotDir);\n+\n+    Task checkSchemaSnapshot = project.getTasks().create(sourceSet.getTaskName(\"check\", PEGASUS_SCHEMA_SNAPSHOT),\n+        CheckPegasusSnapshotTask.class, task ->\n+        {\n+          task.dependsOn(generatePegasusSchemaSnapshot);\n+          // TODO: update CheckPegasusSnapshotTask\n+        });\n+\n+    File pegasusSchemaSnapshotDir = new File(getPegasusSchemaSnapshotPath(project, sourceSet));\n+    pegasusSchemaSnapshotDir.mkdirs();\n+\n+    Task publishPegasusSchemaSnapshot = publishPegasusSchemaSnapshot(project, sourceSet,\n+        PEGASUS_SCHEMA_SNAPSHOT, checkSchemaSnapshot, publishablePegasusSchemaSnapshotDir,pegasusSchemaSnapshotDir);", "originalCommit": "aab19c3e906c7216daf5c1aa5d51b3b049fee105", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI0MTg3Nw==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487241877", "bodyText": "fixed", "author": "nickibi", "createdAt": "2020-09-11T19:18:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2ODA3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2ODg2MA==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r486868860", "bodyText": "This and the previous method seem identical except for the input/output directories. Can we de-duplicate the logic?", "author": "karthikbalasub", "createdAt": "2020-09-11T08:48:26Z", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -1390,6 +1447,64 @@ protected void configureRestModelGeneration(Project project, SourceSet sourceSet\n     });\n   }\n \n+  protected void configurePegasusSchemaSnapshotGeneration(Project project, SourceSet sourceSet)\n+  {\n+    File pegasusSchemaDir = project.file(getDataSchemaPath(project, sourceSet));\n+    File publishablePegasusSchemaSnapshotDir = project.file(project.getBuildDir().getAbsolutePath()\n+        + File.separatorChar + sourceSet.getName() + PEGASUS_SCHEMA_SNAPSHOT);\n+\n+    Task generatePegasusSchemaSnapshot = generatePegasusSchemaSnapshot(project, sourceSet,\n+        PEGASUS_SCHEMA_SNAPSHOT, pegasusSchemaDir, publishablePegasusSchemaSnapshotDir);\n+\n+    Task checkSchemaSnapshot = project.getTasks().create(sourceSet.getTaskName(\"check\", PEGASUS_SCHEMA_SNAPSHOT),\n+        CheckPegasusSnapshotTask.class, task ->\n+        {\n+          task.dependsOn(generatePegasusSchemaSnapshot);\n+          // TODO: update CheckPegasusSnapshotTask\n+        });\n+\n+    File pegasusSchemaSnapshotDir = new File(getPegasusSchemaSnapshotPath(project, sourceSet));\n+    pegasusSchemaSnapshotDir.mkdirs();\n+\n+    Task publishPegasusSchemaSnapshot = publishPegasusSchemaSnapshot(project, sourceSet,\n+        PEGASUS_SCHEMA_SNAPSHOT, checkSchemaSnapshot, publishablePegasusSchemaSnapshotDir,pegasusSchemaSnapshotDir);\n+\n+    project.getTasks().getByName(ASSEMBLE).dependsOn(publishPegasusSchemaSnapshot);\n+  }\n+\n+  protected void configurePegasusExtensionSchemaSnapshotGeneration(Project project, SourceSet sourceSet)", "originalCommit": "aab19c3e906c7216daf5c1aa5d51b3b049fee105", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIzOTI5NQ==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487239295", "bodyText": "Fixed", "author": "nickibi", "createdAt": "2020-09-11T19:14:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2ODg2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2OTU4NA==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r486869584", "bodyText": "DependentTask -> dependentTask\nor call it generateSnapshotTask?", "author": "karthikbalasub", "createdAt": "2020-09-11T08:49:45Z", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -2095,4 +2210,32 @@ private static void configureDataSchemaResourcesRoot(Project project, SourceSet\n       });\n     });\n   }\n+\n+  private Task generatePegasusSchemaSnapshot(Project project, SourceSet sourceSet, String taskName, File inputDir, File outputDir)\n+  {\n+    return project.getTasks().create(sourceSet.getTaskName(\"generate\", taskName),\n+        GeneratePegasusSnapshotTask.class, task ->\n+        {\n+          task.setInputDir(inputDir);\n+          task.setResolverPath(getDataModelConfig(project, sourceSet).plus(project.files(getDataSchemaPath(project, sourceSet))));\n+          task.setClassPath(project.getConfigurations().getByName(PEGASUS_PLUGIN_CONFIGURATION));\n+          task.setPegasusSchemaSnapshotDestinationDir(outputDir);\n+          if (isPropertyTrue(project, ENABLE_ARG_FILE))\n+          {\n+            task.setEnableArgFile(true);\n+          }\n+        });\n+  }\n+\n+  private Task publishPegasusSchemaSnapshot(Project project, SourceSet sourceSet, String taskName, Task DependentTask,", "originalCommit": "aab19c3e906c7216daf5c1aa5d51b3b049fee105", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIzOTMzOA==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487239338", "bodyText": "Fixed", "author": "nickibi", "createdAt": "2020-09-11T19:14:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2OTU4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg3MDQxMw==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r486870413", "bodyText": "not relevant, so remove this?", "author": "karthikbalasub", "createdAt": "2020-09-11T08:51:15Z", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/tasks/GeneratePegasusSnapshotTask.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.pegasus.gradle.tasks;\n+\n+import com.linkedin.pegasus.gradle.PathingJarUtil;\n+import com.linkedin.pegasus.gradle.PegasusPlugin;\n+import com.linkedin.pegasus.gradle.internal.ArgumentFileGenerator;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.file.FileCollection;\n+import org.gradle.api.file.FileTree;\n+import org.gradle.api.tasks.CacheableTask;\n+import org.gradle.api.tasks.Classpath;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.InputDirectory;\n+import org.gradle.api.tasks.OutputDirectory;\n+import org.gradle.api.tasks.PathSensitive;\n+import org.gradle.api.tasks.PathSensitivity;\n+import org.gradle.api.tasks.SkipWhenEmpty;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import static com.linkedin.pegasus.gradle.SharedFileUtils.*;\n+\n+\n+/**\n+ * Generate pegasus schema's snapshot, which will be used for pegasus schema compatibility check\n+ *\n+ * To use this plugin, add these three lines to your build.gradle:\n+ * <pre>\n+ * apply plugin: 'pegasus'\n+ * </pre>\n+ *", "originalCommit": "aab19c3e906c7216daf5c1aa5d51b3b049fee105", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIzOTQwOA==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487239408", "bodyText": "Removed", "author": "nickibi", "createdAt": "2020-09-11T19:15:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg3MDQxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg3MTM4NA==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r486871384", "bodyText": "nit: braces on new line", "author": "karthikbalasub", "createdAt": "2020-09-11T08:52:55Z", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/tasks/GeneratePegasusSnapshotTask.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.pegasus.gradle.tasks;\n+\n+import com.linkedin.pegasus.gradle.PathingJarUtil;\n+import com.linkedin.pegasus.gradle.PegasusPlugin;\n+import com.linkedin.pegasus.gradle.internal.ArgumentFileGenerator;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.file.FileCollection;\n+import org.gradle.api.file.FileTree;\n+import org.gradle.api.tasks.CacheableTask;\n+import org.gradle.api.tasks.Classpath;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.InputDirectory;\n+import org.gradle.api.tasks.OutputDirectory;\n+import org.gradle.api.tasks.PathSensitive;\n+import org.gradle.api.tasks.PathSensitivity;\n+import org.gradle.api.tasks.SkipWhenEmpty;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import static com.linkedin.pegasus.gradle.SharedFileUtils.*;\n+\n+\n+/**\n+ * Generate pegasus schema's snapshot, which will be used for pegasus schema compatibility check\n+ *\n+ * To use this plugin, add these three lines to your build.gradle:\n+ * <pre>\n+ * apply plugin: 'pegasus'\n+ * </pre>\n+ *\n+ */\n+@CacheableTask\n+public class GeneratePegasusSnapshotTask extends DefaultTask\n+{\n+  private File _inputDir;\n+  private FileCollection _resolverPath;\n+  private File _pegasusSchemaSnapshotDestinationDir;\n+  private FileCollection _classPath;\n+  private boolean _enableArgFile;\n+\n+  @TaskAction\n+  public void generatePegasusSnapshot() throws IOException\n+  {\n+    FileTree inputDataSchemaFiles = getSuffixedFiles(getProject(), _inputDir,\n+        PegasusPlugin.DATA_TEMPLATE_FILE_SUFFIXES);\n+\n+    List<String> inputDataSchemaFilenames = StreamSupport.stream(inputDataSchemaFiles.spliterator(), false)\n+        .map(File::getPath)\n+        .collect(Collectors.toList());\n+\n+    if (inputDataSchemaFilenames.isEmpty())\n+    {\n+      getLogger().lifecycle(\"There are no Pegasus schema input files. Skip generating Pegasus schema snapshots.\");\n+      return;\n+    }\n+    getProject().getLogger().info(\"Generating Pegasus schema snapshot...\");\n+\n+    String resolverPathStr = _resolverPath.plus(getProject().files(_inputDir)).getAsPath();\n+\n+    FileCollection _pathedClasspath;\n+    try {\n+      _pathedClasspath = PathingJarUtil.generatePathingJar(getProject(), getName(),\n+          _classPath, false);\n+    }\n+    catch (IOException e) {", "originalCommit": "aab19c3e906c7216daf5c1aa5d51b3b049fee105", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIzOTQ2Nw==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487239467", "bodyText": "Fixed", "author": "nickibi", "createdAt": "2020-09-11T19:15:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg3MTM4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg3MTUzMw==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r486871533", "bodyText": "{ on next line", "author": "karthikbalasub", "createdAt": "2020-09-11T08:53:09Z", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/tasks/GeneratePegasusSnapshotTask.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.pegasus.gradle.tasks;\n+\n+import com.linkedin.pegasus.gradle.PathingJarUtil;\n+import com.linkedin.pegasus.gradle.PegasusPlugin;\n+import com.linkedin.pegasus.gradle.internal.ArgumentFileGenerator;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.file.FileCollection;\n+import org.gradle.api.file.FileTree;\n+import org.gradle.api.tasks.CacheableTask;\n+import org.gradle.api.tasks.Classpath;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.InputDirectory;\n+import org.gradle.api.tasks.OutputDirectory;\n+import org.gradle.api.tasks.PathSensitive;\n+import org.gradle.api.tasks.PathSensitivity;\n+import org.gradle.api.tasks.SkipWhenEmpty;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import static com.linkedin.pegasus.gradle.SharedFileUtils.*;\n+\n+\n+/**\n+ * Generate pegasus schema's snapshot, which will be used for pegasus schema compatibility check\n+ *\n+ * To use this plugin, add these three lines to your build.gradle:\n+ * <pre>\n+ * apply plugin: 'pegasus'\n+ * </pre>\n+ *\n+ */\n+@CacheableTask\n+public class GeneratePegasusSnapshotTask extends DefaultTask\n+{\n+  private File _inputDir;\n+  private FileCollection _resolverPath;\n+  private File _pegasusSchemaSnapshotDestinationDir;\n+  private FileCollection _classPath;\n+  private boolean _enableArgFile;\n+\n+  @TaskAction\n+  public void generatePegasusSnapshot() throws IOException\n+  {\n+    FileTree inputDataSchemaFiles = getSuffixedFiles(getProject(), _inputDir,\n+        PegasusPlugin.DATA_TEMPLATE_FILE_SUFFIXES);\n+\n+    List<String> inputDataSchemaFilenames = StreamSupport.stream(inputDataSchemaFiles.spliterator(), false)\n+        .map(File::getPath)\n+        .collect(Collectors.toList());\n+\n+    if (inputDataSchemaFilenames.isEmpty())\n+    {\n+      getLogger().lifecycle(\"There are no Pegasus schema input files. Skip generating Pegasus schema snapshots.\");\n+      return;\n+    }\n+    getProject().getLogger().info(\"Generating Pegasus schema snapshot...\");\n+\n+    String resolverPathStr = _resolverPath.plus(getProject().files(_inputDir)).getAsPath();\n+\n+    FileCollection _pathedClasspath;\n+    try {\n+      _pathedClasspath = PathingJarUtil.generatePathingJar(getProject(), getName(),\n+          _classPath, false);\n+    }\n+    catch (IOException e) {\n+      throw new GradleException(\"Error occurred generating pathing JAR.\", e);\n+    }\n+\n+    getProject().javaexec(javaExecSpec -> {", "originalCommit": "aab19c3e906c7216daf5c1aa5d51b3b049fee105", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIzOTQ4Nw==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487239487", "bodyText": "Fixed", "author": "nickibi", "createdAt": "2020-09-11T19:15:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg3MTUzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg3Mzk2Mw==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r486873963", "bodyText": "delete extra newlines", "author": "karthikbalasub", "createdAt": "2020-09-11T08:55:30Z", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/snapshot/gen/PegasusSchemaSnapshotGenerationCmdLineApp.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.tools.snapshot.gen;\n+\n+import com.linkedin.restli.internal.tools.RestLiToolsUtils;\n+import java.io.File;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.GnuParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.OptionBuilder;\n+import org.apache.commons.cli.Options;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Tool that encodes pegasus schemas to pegasusSchemaSnapshot files\n+ *\n+ * @author Yingjie Bi\n+ */\n+public class PegasusSchemaSnapshotGenerationCmdLineApp\n+{\n+  private static final Logger _logger = LoggerFactory.getLogger(\n+      PegasusSchemaSnapshotGenerationCmdLineApp.class);\n+\n+  private static final Options _options = new Options();\n+\n+", "originalCommit": "aab19c3e906c7216daf5c1aa5d51b3b049fee105", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI0MDAyOQ==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487240029", "bodyText": "Removed", "author": "nickibi", "createdAt": "2020-09-11T19:15:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg3Mzk2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg4NTg1NQ==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r486885855", "bodyText": "You can move this resolver outside the loop.", "author": "karthikbalasub", "createdAt": "2020-09-11T09:07:16Z", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/snapshot/gen/PegasusSchemaSnapshotExporter.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.tools.snapshot.gen;\n+\n+import com.linkedin.data.schema.AbstractSchemaEncoder;\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.DataSchemaResolver;\n+import com.linkedin.data.schema.NamedDataSchema;\n+import com.linkedin.data.schema.SchemaToPdlEncoder;\n+import com.linkedin.data.schema.grammar.PdlSchemaParser;\n+import com.linkedin.data.schema.resolver.MultiFormatDataSchemaResolver;\n+import com.linkedin.pegasus.generator.GeneratorResult;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.commons.io.FileUtils;\n+\n+\n+/**\n+ * PegasusSchemaSnapshotExporter, generating pegasus schema snapshot(.pdl) files\n+ *\n+ * @author Yingjie Bi\n+ */\n+public class PegasusSchemaSnapshotExporter\n+{\n+  private static final String PEGASUS_SCHEMA_SNAPSHOT_SUFFIX = \".pdl\";\n+\n+  private static final String PDL = \"pdl\";\n+\n+  /**\n+   * Generate pegasus schema snapshot(pegasusSchemaSnapshot.pdl) files to the provided output directory\n+   * based on the given input pegasus schemas.\n+   *\n+   * @param resolverPath schema resolver path\n+   * @param inputPath input files directory\n+   * @param outputDir output files directory\n+   * @return GeneratorResult\n+   * @throws IOException\n+   */\n+  public GeneratorResult export(String resolverPath, String inputPath, File outputDir) throws IOException\n+  {\n+    List<DataSchema> dataSchemas = parseDataSchema(resolverPath, inputPath);\n+    pegasusSchemaSnapshotResult result = new pegasusSchemaSnapshotResult();\n+    for (DataSchema dataSchema : dataSchemas)\n+    {\n+     File file = writeSnapshotFile(outputDir, ((NamedDataSchema) dataSchema).getFullName(), dataSchema);\n+     result.addModifiedFile(file);\n+     result.addTargetFile(file);\n+    }\n+    return result;\n+  }\n+\n+  private static List<DataSchema> parseDataSchema(String resolverPath, String inputPath)\n+      throws RuntimeException, FileNotFoundException\n+  {\n+    Iterator<File> iterator = FileUtils.iterateFiles(new File(inputPath), new String[]{PDL}, true);\n+    List<DataSchema> schemas = new ArrayList<>();\n+    while (iterator.hasNext())\n+    {\n+      DataSchemaResolver resolver = MultiFormatDataSchemaResolver.withBuiltinFormats(resolverPath);", "originalCommit": "aab19c3e906c7216daf5c1aa5d51b3b049fee105", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE4NTgyOQ==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487185829", "bodyText": "The resolver was outside the loop.\nHowever, I tested the change in dr-restaurant, in codegen module while parsing the pdl, it threw an error that a schema is already defined.\nI think each input file should have its own resolver to avoid such case.", "author": "nickibi", "createdAt": "2020-09-11T17:25:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg4NTg1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg4Nzk2NQ==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r486887965", "bodyText": "What is the purpose of this result? Please add documentation", "author": "karthikbalasub", "createdAt": "2020-09-11T09:09:24Z", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/snapshot/gen/PegasusSchemaSnapshotExporter.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.tools.snapshot.gen;\n+\n+import com.linkedin.data.schema.AbstractSchemaEncoder;\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.DataSchemaResolver;\n+import com.linkedin.data.schema.NamedDataSchema;\n+import com.linkedin.data.schema.SchemaToPdlEncoder;\n+import com.linkedin.data.schema.grammar.PdlSchemaParser;\n+import com.linkedin.data.schema.resolver.MultiFormatDataSchemaResolver;\n+import com.linkedin.pegasus.generator.GeneratorResult;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.commons.io.FileUtils;\n+\n+\n+/**\n+ * PegasusSchemaSnapshotExporter, generating pegasus schema snapshot(.pdl) files\n+ *\n+ * @author Yingjie Bi\n+ */\n+public class PegasusSchemaSnapshotExporter\n+{\n+  private static final String PEGASUS_SCHEMA_SNAPSHOT_SUFFIX = \".pdl\";\n+\n+  private static final String PDL = \"pdl\";\n+\n+  /**\n+   * Generate pegasus schema snapshot(pegasusSchemaSnapshot.pdl) files to the provided output directory\n+   * based on the given input pegasus schemas.\n+   *\n+   * @param resolverPath schema resolver path\n+   * @param inputPath input files directory\n+   * @param outputDir output files directory\n+   * @return GeneratorResult\n+   * @throws IOException\n+   */\n+  public GeneratorResult export(String resolverPath, String inputPath, File outputDir) throws IOException\n+  {\n+    List<DataSchema> dataSchemas = parseDataSchema(resolverPath, inputPath);\n+    pegasusSchemaSnapshotResult result = new pegasusSchemaSnapshotResult();\n+    for (DataSchema dataSchema : dataSchemas)\n+    {\n+     File file = writeSnapshotFile(outputDir, ((NamedDataSchema) dataSchema).getFullName(), dataSchema);\n+     result.addModifiedFile(file);\n+     result.addTargetFile(file);\n+    }\n+    return result;\n+  }\n+\n+  private static List<DataSchema> parseDataSchema(String resolverPath, String inputPath)\n+      throws RuntimeException, FileNotFoundException\n+  {\n+    Iterator<File> iterator = FileUtils.iterateFiles(new File(inputPath), new String[]{PDL}, true);\n+    List<DataSchema> schemas = new ArrayList<>();\n+    while (iterator.hasNext())\n+    {\n+      DataSchemaResolver resolver = MultiFormatDataSchemaResolver.withBuiltinFormats(resolverPath);\n+      File inputFile = iterator.next();\n+      PdlSchemaParser parser = new PdlSchemaParser(resolver);\n+      parser.parse(new FileInputStream(inputFile));\n+\n+      if (parser.hasError())\n+      {\n+        throw new RuntimeException(parser.errorMessage());\n+      }\n+\n+      List<DataSchema> topLevelDataSchemas = parser.topLevelDataSchemas();\n+      if (topLevelDataSchemas == null || topLevelDataSchemas.isEmpty() || topLevelDataSchemas.size() > 1)\n+      {\n+        throw new RuntimeException(\"Could not parse schema : \" + inputFile.getAbsolutePath());\n+      }\n+      DataSchema topLevelDataSchema = topLevelDataSchemas.get(0);\n+      if (!(topLevelDataSchema instanceof NamedDataSchema))\n+      {\n+        throw new RuntimeException(\"Invalid schema : \" + inputFile.getAbsolutePath() + \", the schema is not a named schema.\");\n+      }\n+      schemas.add(topLevelDataSchema);\n+    }\n+    return schemas;\n+  }\n+\n+  private static File writeSnapshotFile(File outputDir, String fileName, DataSchema dataSchema) throws IOException\n+  {\n+    StringWriter stringWriter = new StringWriter();\n+    SchemaToPdlEncoder schemaToPdlEncoder = new SchemaToPdlEncoder(stringWriter);\n+    schemaToPdlEncoder.setTypeReferenceFormat(AbstractSchemaEncoder.TypeReferenceFormat.DENORMALIZE);\n+    schemaToPdlEncoder.encode(dataSchema);\n+\n+    File generatedSnapshotFile = new File(outputDir, fileName + PEGASUS_SCHEMA_SNAPSHOT_SUFFIX);\n+\n+    if (generatedSnapshotFile.exists())\n+    {\n+      if (!generatedSnapshotFile.delete())\n+      {\n+        throw new IOException(generatedSnapshotFile + \": Can't delete previous version\");\n+      }\n+    }\n+\n+    try (FileOutputStream out = new FileOutputStream(generatedSnapshotFile))\n+    {\n+      out.write(stringWriter.toString().getBytes());\n+    }\n+    return generatedSnapshotFile;\n+  }\n+\n+  private static class pegasusSchemaSnapshotResult implements GeneratorResult", "originalCommit": "aab19c3e906c7216daf5c1aa5d51b3b049fee105", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE4NjE2OA==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487186168", "bodyText": "I added it for testing purpose.", "author": "nickibi", "createdAt": "2020-09-11T17:26:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg4Nzk2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIzOTg4OA==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487239888", "bodyText": "Since it is not used anywhere, removed.", "author": "nickibi", "createdAt": "2020-09-11T19:15:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg4Nzk2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg5MjcyOA==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r486892728", "bodyText": "nit: delete empty line", "author": "karthikbalasub", "createdAt": "2020-09-11T09:14:04Z", "path": "restli-tools/src/test/java/com/linkedin/restli/tools/ExporterTestUtils.java", "diffHunk": "@@ -85,6 +85,14 @@ public static void compareFiles(String actualFileName, String expectedFileName)\n     }\n   }\n \n+  public static void comparePegasusSchemaSnapshotFiles(String actualFileName, String expectedFileName)\n+      throws IOException {\n+    String actualContent = ExporterTestUtils.readFile(actualFileName);\n+    String expectedContent = ExporterTestUtils.readFile(expectedFileName);\n+    Assert.assertEquals(actualContent, expectedContent);\n+", "originalCommit": "aab19c3e906c7216daf5c1aa5d51b3b049fee105", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI0MDE2Mw==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487240163", "bodyText": "Fixed", "author": "nickibi", "createdAt": "2020-09-11T19:16:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg5MjcyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg5Mjg5OA==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r486892898", "bodyText": "nit: brace to next line", "author": "karthikbalasub", "createdAt": "2020-09-11T09:14:14Z", "path": "restli-tools/src/test/java/com/linkedin/restli/tools/ExporterTestUtils.java", "diffHunk": "@@ -85,6 +85,14 @@ public static void compareFiles(String actualFileName, String expectedFileName)\n     }\n   }\n \n+  public static void comparePegasusSchemaSnapshotFiles(String actualFileName, String expectedFileName)\n+      throws IOException {", "originalCommit": "aab19c3e906c7216daf5c1aa5d51b3b049fee105", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI0MDEyNA==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487240124", "bodyText": "Fixed", "author": "nickibi", "createdAt": "2020-09-11T19:16:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg5Mjg5OA=="}], "type": "inlineReview"}, {"oid": "6854dc2c7ab2aa84d52e9c79c03912cb58a3b076", "url": "https://github.com/linkedin/rest.li/commit/6854dc2c7ab2aa84d52e9c79c03912cb58a3b076", "message": "Add generatePegasusSchemeSnapshot task", "committedDate": "2020-09-11T19:12:35Z", "type": "forcePushed"}, {"oid": "e63ac7a9091c67407ffbf4b6e91e43f01774f51f", "url": "https://github.com/linkedin/rest.li/commit/e63ac7a9091c67407ffbf4b6e91e43f01774f51f", "message": "Add generatePegasusSchemeSnapshot task", "committedDate": "2020-09-11T19:17:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM4NTE0MA==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487385140", "bodyText": "This is honestly just an OCD nitpick, but lastIndexOf('.') seems like it should be a little more efficient than lastIndexOf(\".\").", "author": "tjni", "createdAt": "2020-09-12T08:25:50Z", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/snapshot/gen/PegasusSchemaSnapshotExporter.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.tools.snapshot.gen;\n+\n+import com.linkedin.data.schema.AbstractSchemaEncoder;\n+import com.linkedin.data.schema.AbstractSchemaParser;\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.DataSchemaResolver;\n+import com.linkedin.data.schema.NamedDataSchema;\n+import com.linkedin.data.schema.PegasusSchemaParser;\n+import com.linkedin.data.schema.SchemaToPdlEncoder;\n+import com.linkedin.data.schema.resolver.MultiFormatDataSchemaResolver;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.commons.io.FileUtils;\n+\n+\n+/**\n+ * PegasusSchemaSnapshotExporter, generating pegasus schema snapshot(.pdl) files\n+ *\n+ * @author Yingjie Bi\n+ */\n+public class PegasusSchemaSnapshotExporter\n+{\n+  private static final String PEGASUS_SCHEMA_SNAPSHOT_SUFFIX = \".pdl\";\n+\n+  private static final String PDL = \"pdl\";\n+\n+  private static final String PDSC = \"pdsc\";\n+\n+  /**\n+   * Generate pegasus schema snapshot(pegasusSchemaSnapshot.pdl) files to the provided output directory\n+   * based on the given input pegasus schemas.\n+   *\n+   * @param resolverPath schema resolver path\n+   * @param inputPath input files directory\n+   * @param outputDir output files directory\n+   * @return GeneratorResult\n+   * @throws IOException\n+   */\n+  public void export(String resolverPath, String inputPath, File outputDir) throws IOException\n+  {\n+    List<DataSchema> dataSchemas = parseDataSchema(resolverPath, inputPath);\n+    for (DataSchema dataSchema : dataSchemas)\n+    {\n+      writeSnapshotFile(outputDir, ((NamedDataSchema) dataSchema).getFullName(), dataSchema);\n+    }\n+  }\n+\n+  private static List<DataSchema> parseDataSchema(String resolverPath, String inputPath)\n+      throws RuntimeException, FileNotFoundException\n+  {\n+    Iterator<File> iterator = FileUtils.iterateFiles(new File(inputPath), new String[]{PDL, PDSC}, true);\n+    List<DataSchema> schemas = new ArrayList<>();\n+    while (iterator.hasNext())\n+    {\n+      DataSchemaResolver resolver = MultiFormatDataSchemaResolver.withBuiltinFormats(resolverPath);\n+      File inputFile = iterator.next();\n+      String fileExtension = getFileExtension(inputFile.getName());\n+      PegasusSchemaParser parser = AbstractSchemaParser.parserForFileExtension(fileExtension, resolver);\n+      parser.parse(new FileInputStream(inputFile));\n+\n+      if (parser.hasError())\n+      {\n+        throw new RuntimeException(parser.errorMessage());\n+      }\n+\n+      List<DataSchema> topLevelDataSchemas = parser.topLevelDataSchemas();\n+      if (topLevelDataSchemas == null || topLevelDataSchemas.isEmpty() || topLevelDataSchemas.size() > 1)\n+      {\n+        throw new RuntimeException(\"Could not parse schema : \" + inputFile.getAbsolutePath());\n+      }\n+      DataSchema topLevelDataSchema = topLevelDataSchemas.get(0);\n+      if (!(topLevelDataSchema instanceof NamedDataSchema))\n+      {\n+        throw new RuntimeException(\"Invalid schema : \" + inputFile.getAbsolutePath() + \", the schema is not a named schema.\");\n+      }\n+      schemas.add(topLevelDataSchema);\n+    }\n+    return schemas;\n+  }\n+\n+  private static void writeSnapshotFile(File outputDir, String fileName, DataSchema dataSchema) throws IOException\n+  {\n+    StringWriter stringWriter = new StringWriter();\n+    SchemaToPdlEncoder schemaToPdlEncoder = new SchemaToPdlEncoder(stringWriter);\n+    schemaToPdlEncoder.setTypeReferenceFormat(AbstractSchemaEncoder.TypeReferenceFormat.DENORMALIZE);\n+    schemaToPdlEncoder.encode(dataSchema);\n+\n+    File generatedSnapshotFile = new File(outputDir, fileName + PEGASUS_SCHEMA_SNAPSHOT_SUFFIX);\n+\n+    if (generatedSnapshotFile.exists())\n+    {\n+      if (!generatedSnapshotFile.delete())\n+      {\n+        throw new IOException(generatedSnapshotFile + \": Can't delete previous version\");\n+      }\n+    }\n+\n+    try (FileOutputStream out = new FileOutputStream(generatedSnapshotFile))\n+    {\n+      out.write(stringWriter.toString().getBytes());\n+    }\n+  }\n+\n+  private static String getFileExtension(String fileName)\n+  {\n+    return fileName.substring(fileName.lastIndexOf(\".\") + 1);", "originalCommit": "e63ac7a9091c67407ffbf4b6e91e43f01774f51f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM4NTE1Mw==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487385153", "bodyText": "This can be replaced by\nFiles.write(generatedSnapshotFile.toPath(), stringWriter.toString().getBytes())\n\nAs a nitpick, call getBytes(StandardCharsets.UTF_8) so as to not rely on the default character encoding of the system.", "author": "tjni", "createdAt": "2020-09-12T08:25:57Z", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/snapshot/gen/PegasusSchemaSnapshotExporter.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.tools.snapshot.gen;\n+\n+import com.linkedin.data.schema.AbstractSchemaEncoder;\n+import com.linkedin.data.schema.AbstractSchemaParser;\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.DataSchemaResolver;\n+import com.linkedin.data.schema.NamedDataSchema;\n+import com.linkedin.data.schema.PegasusSchemaParser;\n+import com.linkedin.data.schema.SchemaToPdlEncoder;\n+import com.linkedin.data.schema.resolver.MultiFormatDataSchemaResolver;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.commons.io.FileUtils;\n+\n+\n+/**\n+ * PegasusSchemaSnapshotExporter, generating pegasus schema snapshot(.pdl) files\n+ *\n+ * @author Yingjie Bi\n+ */\n+public class PegasusSchemaSnapshotExporter\n+{\n+  private static final String PEGASUS_SCHEMA_SNAPSHOT_SUFFIX = \".pdl\";\n+\n+  private static final String PDL = \"pdl\";\n+\n+  private static final String PDSC = \"pdsc\";\n+\n+  /**\n+   * Generate pegasus schema snapshot(pegasusSchemaSnapshot.pdl) files to the provided output directory\n+   * based on the given input pegasus schemas.\n+   *\n+   * @param resolverPath schema resolver path\n+   * @param inputPath input files directory\n+   * @param outputDir output files directory\n+   * @return GeneratorResult\n+   * @throws IOException\n+   */\n+  public void export(String resolverPath, String inputPath, File outputDir) throws IOException\n+  {\n+    List<DataSchema> dataSchemas = parseDataSchema(resolverPath, inputPath);\n+    for (DataSchema dataSchema : dataSchemas)\n+    {\n+      writeSnapshotFile(outputDir, ((NamedDataSchema) dataSchema).getFullName(), dataSchema);\n+    }\n+  }\n+\n+  private static List<DataSchema> parseDataSchema(String resolverPath, String inputPath)\n+      throws RuntimeException, FileNotFoundException\n+  {\n+    Iterator<File> iterator = FileUtils.iterateFiles(new File(inputPath), new String[]{PDL, PDSC}, true);\n+    List<DataSchema> schemas = new ArrayList<>();\n+    while (iterator.hasNext())\n+    {\n+      DataSchemaResolver resolver = MultiFormatDataSchemaResolver.withBuiltinFormats(resolverPath);\n+      File inputFile = iterator.next();\n+      String fileExtension = getFileExtension(inputFile.getName());\n+      PegasusSchemaParser parser = AbstractSchemaParser.parserForFileExtension(fileExtension, resolver);\n+      parser.parse(new FileInputStream(inputFile));\n+\n+      if (parser.hasError())\n+      {\n+        throw new RuntimeException(parser.errorMessage());\n+      }\n+\n+      List<DataSchema> topLevelDataSchemas = parser.topLevelDataSchemas();\n+      if (topLevelDataSchemas == null || topLevelDataSchemas.isEmpty() || topLevelDataSchemas.size() > 1)\n+      {\n+        throw new RuntimeException(\"Could not parse schema : \" + inputFile.getAbsolutePath());\n+      }\n+      DataSchema topLevelDataSchema = topLevelDataSchemas.get(0);\n+      if (!(topLevelDataSchema instanceof NamedDataSchema))\n+      {\n+        throw new RuntimeException(\"Invalid schema : \" + inputFile.getAbsolutePath() + \", the schema is not a named schema.\");\n+      }\n+      schemas.add(topLevelDataSchema);\n+    }\n+    return schemas;\n+  }\n+\n+  private static void writeSnapshotFile(File outputDir, String fileName, DataSchema dataSchema) throws IOException\n+  {\n+    StringWriter stringWriter = new StringWriter();\n+    SchemaToPdlEncoder schemaToPdlEncoder = new SchemaToPdlEncoder(stringWriter);\n+    schemaToPdlEncoder.setTypeReferenceFormat(AbstractSchemaEncoder.TypeReferenceFormat.DENORMALIZE);\n+    schemaToPdlEncoder.encode(dataSchema);\n+\n+    File generatedSnapshotFile = new File(outputDir, fileName + PEGASUS_SCHEMA_SNAPSHOT_SUFFIX);\n+\n+    if (generatedSnapshotFile.exists())\n+    {\n+      if (!generatedSnapshotFile.delete())\n+      {\n+        throw new IOException(generatedSnapshotFile + \": Can't delete previous version\");\n+      }\n+    }\n+\n+    try (FileOutputStream out = new FileOutputStream(generatedSnapshotFile))\n+    {\n+      out.write(stringWriter.toString().getBytes());\n+    }\n+  }", "originalCommit": "e63ac7a9091c67407ffbf4b6e91e43f01774f51f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM4NTE1Nw==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487385157", "bodyText": "Nit: Must be readable and writeable.", "author": "tjni", "createdAt": "2020-09-12T08:26:03Z", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/snapshot/gen/PegasusSchemaSnapshotGenerationCmdLineApp.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.tools.snapshot.gen;\n+\n+import com.linkedin.restli.internal.tools.RestLiToolsUtils;\n+import java.io.File;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.GnuParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.OptionBuilder;\n+import org.apache.commons.cli.Options;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Tool that encodes pegasus schemas to pegasusSchemaSnapshot files\n+ *\n+ * @author Yingjie Bi\n+ */\n+public class PegasusSchemaSnapshotGenerationCmdLineApp\n+{\n+  private static final Logger _logger = LoggerFactory.getLogger(\n+      PegasusSchemaSnapshotGenerationCmdLineApp.class);\n+\n+  private static final Options _options = new Options();\n+\n+  static\n+  {\n+    _options.addOption(OptionBuilder.withLongOpt(\"help\")\n+        .withDescription(\"Print help\")\n+        .create('h'));\n+  }\n+\n+  public static void main(String[] args) throws Exception\n+  {\n+    final CommandLineParser parser = new GnuParser();\n+    CommandLine cl = parser.parse(_options, args);\n+\n+    if (cl.hasOption('h'))\n+    {\n+      help();\n+      System.exit(0);\n+    }\n+\n+    String[] cliArgs = cl.getArgs();\n+    if (cliArgs.length != 3)\n+    {\n+      _logger.error(\"Invalid arguments\");\n+      help();\n+      System.exit(1);\n+    }\n+    int i = 0;\n+    String resolverPath = RestLiToolsUtils.readArgFromFileIfNeeded(cliArgs[i++]);\n+    String inputPath = cliArgs[i++];\n+    String outputPath = cliArgs[i];\n+\n+    try\n+    {\n+      File outputDir = new File(outputPath);\n+      if (!outputDir.exists())\n+      {\n+        if (!outputDir.mkdirs())\n+        {\n+          throw new RuntimeException(\"Output directory '\" + outputDir + \"' could not be created!\");\n+        }\n+      }\n+      if (!outputDir.isDirectory())\n+      {\n+        throw new RuntimeException(\"Output directory '\" + outputDir + \"' is not a directory\");\n+      }\n+      if (!outputDir.canRead() || !outputDir.canWrite())\n+      {\n+        throw new RuntimeException(\"Output directory '\" + outputDir + \"' must be writeable\");", "originalCommit": "e63ac7a9091c67407ffbf4b6e91e43f01774f51f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM4NTIwMA==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487385200", "bodyText": "For clarity, consider just using 0, 1, and 2 directly instead of incrementing i.", "author": "tjni", "createdAt": "2020-09-12T08:26:32Z", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/snapshot/gen/PegasusSchemaSnapshotGenerationCmdLineApp.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.tools.snapshot.gen;\n+\n+import com.linkedin.restli.internal.tools.RestLiToolsUtils;\n+import java.io.File;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.GnuParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.OptionBuilder;\n+import org.apache.commons.cli.Options;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Tool that encodes pegasus schemas to pegasusSchemaSnapshot files\n+ *\n+ * @author Yingjie Bi\n+ */\n+public class PegasusSchemaSnapshotGenerationCmdLineApp\n+{\n+  private static final Logger _logger = LoggerFactory.getLogger(\n+      PegasusSchemaSnapshotGenerationCmdLineApp.class);\n+\n+  private static final Options _options = new Options();\n+\n+  static\n+  {\n+    _options.addOption(OptionBuilder.withLongOpt(\"help\")\n+        .withDescription(\"Print help\")\n+        .create('h'));\n+  }\n+\n+  public static void main(String[] args) throws Exception\n+  {\n+    final CommandLineParser parser = new GnuParser();\n+    CommandLine cl = parser.parse(_options, args);\n+\n+    if (cl.hasOption('h'))\n+    {\n+      help();\n+      System.exit(0);\n+    }\n+\n+    String[] cliArgs = cl.getArgs();\n+    if (cliArgs.length != 3)\n+    {\n+      _logger.error(\"Invalid arguments\");\n+      help();\n+      System.exit(1);\n+    }\n+    int i = 0;\n+    String resolverPath = RestLiToolsUtils.readArgFromFileIfNeeded(cliArgs[i++]);\n+    String inputPath = cliArgs[i++];\n+    String outputPath = cliArgs[i];", "originalCommit": "e63ac7a9091c67407ffbf4b6e91e43f01774f51f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM4NTIyMg==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487385222", "bodyText": "Is this necessary, given that the way FileOutputStream is constructed later is to overwrite any existing files?", "author": "tjni", "createdAt": "2020-09-12T08:26:44Z", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/snapshot/gen/PegasusSchemaSnapshotExporter.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.tools.snapshot.gen;\n+\n+import com.linkedin.data.schema.AbstractSchemaEncoder;\n+import com.linkedin.data.schema.AbstractSchemaParser;\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.DataSchemaResolver;\n+import com.linkedin.data.schema.NamedDataSchema;\n+import com.linkedin.data.schema.PegasusSchemaParser;\n+import com.linkedin.data.schema.SchemaToPdlEncoder;\n+import com.linkedin.data.schema.resolver.MultiFormatDataSchemaResolver;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.commons.io.FileUtils;\n+\n+\n+/**\n+ * PegasusSchemaSnapshotExporter, generating pegasus schema snapshot(.pdl) files\n+ *\n+ * @author Yingjie Bi\n+ */\n+public class PegasusSchemaSnapshotExporter\n+{\n+  private static final String PEGASUS_SCHEMA_SNAPSHOT_SUFFIX = \".pdl\";\n+\n+  private static final String PDL = \"pdl\";\n+\n+  private static final String PDSC = \"pdsc\";\n+\n+  /**\n+   * Generate pegasus schema snapshot(pegasusSchemaSnapshot.pdl) files to the provided output directory\n+   * based on the given input pegasus schemas.\n+   *\n+   * @param resolverPath schema resolver path\n+   * @param inputPath input files directory\n+   * @param outputDir output files directory\n+   * @return GeneratorResult\n+   * @throws IOException\n+   */\n+  public void export(String resolverPath, String inputPath, File outputDir) throws IOException\n+  {\n+    List<DataSchema> dataSchemas = parseDataSchema(resolverPath, inputPath);\n+    for (DataSchema dataSchema : dataSchemas)\n+    {\n+      writeSnapshotFile(outputDir, ((NamedDataSchema) dataSchema).getFullName(), dataSchema);\n+    }\n+  }\n+\n+  private static List<DataSchema> parseDataSchema(String resolverPath, String inputPath)\n+      throws RuntimeException, FileNotFoundException\n+  {\n+    Iterator<File> iterator = FileUtils.iterateFiles(new File(inputPath), new String[]{PDL, PDSC}, true);\n+    List<DataSchema> schemas = new ArrayList<>();\n+    while (iterator.hasNext())\n+    {\n+      DataSchemaResolver resolver = MultiFormatDataSchemaResolver.withBuiltinFormats(resolverPath);\n+      File inputFile = iterator.next();\n+      String fileExtension = getFileExtension(inputFile.getName());\n+      PegasusSchemaParser parser = AbstractSchemaParser.parserForFileExtension(fileExtension, resolver);\n+      parser.parse(new FileInputStream(inputFile));\n+\n+      if (parser.hasError())\n+      {\n+        throw new RuntimeException(parser.errorMessage());\n+      }\n+\n+      List<DataSchema> topLevelDataSchemas = parser.topLevelDataSchemas();\n+      if (topLevelDataSchemas == null || topLevelDataSchemas.isEmpty() || topLevelDataSchemas.size() > 1)\n+      {\n+        throw new RuntimeException(\"Could not parse schema : \" + inputFile.getAbsolutePath());\n+      }\n+      DataSchema topLevelDataSchema = topLevelDataSchemas.get(0);\n+      if (!(topLevelDataSchema instanceof NamedDataSchema))\n+      {\n+        throw new RuntimeException(\"Invalid schema : \" + inputFile.getAbsolutePath() + \", the schema is not a named schema.\");\n+      }\n+      schemas.add(topLevelDataSchema);\n+    }\n+    return schemas;\n+  }\n+\n+  private static void writeSnapshotFile(File outputDir, String fileName, DataSchema dataSchema) throws IOException\n+  {\n+    StringWriter stringWriter = new StringWriter();\n+    SchemaToPdlEncoder schemaToPdlEncoder = new SchemaToPdlEncoder(stringWriter);\n+    schemaToPdlEncoder.setTypeReferenceFormat(AbstractSchemaEncoder.TypeReferenceFormat.DENORMALIZE);\n+    schemaToPdlEncoder.encode(dataSchema);\n+\n+    File generatedSnapshotFile = new File(outputDir, fileName + PEGASUS_SCHEMA_SNAPSHOT_SUFFIX);\n+\n+    if (generatedSnapshotFile.exists())\n+    {\n+      if (!generatedSnapshotFile.delete())\n+      {\n+        throw new IOException(generatedSnapshotFile + \": Can't delete previous version\");\n+      }\n+    }", "originalCommit": "e63ac7a9091c67407ffbf4b6e91e43f01774f51f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1MjAzMw==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487452033", "bodyText": "Good catch, removed.", "author": "nickibi", "createdAt": "2020-09-12T21:49:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM4NTIyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM4NTIzNQ==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487385235", "bodyText": "This can probably be a more informative error message.", "author": "tjni", "createdAt": "2020-09-12T08:26:51Z", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/snapshot/gen/PegasusSchemaSnapshotExporter.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.tools.snapshot.gen;\n+\n+import com.linkedin.data.schema.AbstractSchemaEncoder;\n+import com.linkedin.data.schema.AbstractSchemaParser;\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.DataSchemaResolver;\n+import com.linkedin.data.schema.NamedDataSchema;\n+import com.linkedin.data.schema.PegasusSchemaParser;\n+import com.linkedin.data.schema.SchemaToPdlEncoder;\n+import com.linkedin.data.schema.resolver.MultiFormatDataSchemaResolver;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.commons.io.FileUtils;\n+\n+\n+/**\n+ * PegasusSchemaSnapshotExporter, generating pegasus schema snapshot(.pdl) files\n+ *\n+ * @author Yingjie Bi\n+ */\n+public class PegasusSchemaSnapshotExporter\n+{\n+  private static final String PEGASUS_SCHEMA_SNAPSHOT_SUFFIX = \".pdl\";\n+\n+  private static final String PDL = \"pdl\";\n+\n+  private static final String PDSC = \"pdsc\";\n+\n+  /**\n+   * Generate pegasus schema snapshot(pegasusSchemaSnapshot.pdl) files to the provided output directory\n+   * based on the given input pegasus schemas.\n+   *\n+   * @param resolverPath schema resolver path\n+   * @param inputPath input files directory\n+   * @param outputDir output files directory\n+   * @return GeneratorResult\n+   * @throws IOException\n+   */\n+  public void export(String resolverPath, String inputPath, File outputDir) throws IOException\n+  {\n+    List<DataSchema> dataSchemas = parseDataSchema(resolverPath, inputPath);\n+    for (DataSchema dataSchema : dataSchemas)\n+    {\n+      writeSnapshotFile(outputDir, ((NamedDataSchema) dataSchema).getFullName(), dataSchema);\n+    }\n+  }\n+\n+  private static List<DataSchema> parseDataSchema(String resolverPath, String inputPath)\n+      throws RuntimeException, FileNotFoundException\n+  {\n+    Iterator<File> iterator = FileUtils.iterateFiles(new File(inputPath), new String[]{PDL, PDSC}, true);\n+    List<DataSchema> schemas = new ArrayList<>();\n+    while (iterator.hasNext())\n+    {\n+      DataSchemaResolver resolver = MultiFormatDataSchemaResolver.withBuiltinFormats(resolverPath);\n+      File inputFile = iterator.next();\n+      String fileExtension = getFileExtension(inputFile.getName());\n+      PegasusSchemaParser parser = AbstractSchemaParser.parserForFileExtension(fileExtension, resolver);\n+      parser.parse(new FileInputStream(inputFile));\n+\n+      if (parser.hasError())\n+      {\n+        throw new RuntimeException(parser.errorMessage());\n+      }\n+\n+      List<DataSchema> topLevelDataSchemas = parser.topLevelDataSchemas();\n+      if (topLevelDataSchemas == null || topLevelDataSchemas.isEmpty() || topLevelDataSchemas.size() > 1)\n+      {\n+        throw new RuntimeException(\"Could not parse schema : \" + inputFile.getAbsolutePath());", "originalCommit": "e63ac7a9091c67407ffbf4b6e91e43f01774f51f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM4NTIzNg==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487385236", "bodyText": "Nit: It looks like topLevelDataSchemas() never returns null, so the condition can be simplified to topLevelDataSchemas.size() != 1.", "author": "tjni", "createdAt": "2020-09-12T08:26:53Z", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/snapshot/gen/PegasusSchemaSnapshotExporter.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.tools.snapshot.gen;\n+\n+import com.linkedin.data.schema.AbstractSchemaEncoder;\n+import com.linkedin.data.schema.AbstractSchemaParser;\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.DataSchemaResolver;\n+import com.linkedin.data.schema.NamedDataSchema;\n+import com.linkedin.data.schema.PegasusSchemaParser;\n+import com.linkedin.data.schema.SchemaToPdlEncoder;\n+import com.linkedin.data.schema.resolver.MultiFormatDataSchemaResolver;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.commons.io.FileUtils;\n+\n+\n+/**\n+ * PegasusSchemaSnapshotExporter, generating pegasus schema snapshot(.pdl) files\n+ *\n+ * @author Yingjie Bi\n+ */\n+public class PegasusSchemaSnapshotExporter\n+{\n+  private static final String PEGASUS_SCHEMA_SNAPSHOT_SUFFIX = \".pdl\";\n+\n+  private static final String PDL = \"pdl\";\n+\n+  private static final String PDSC = \"pdsc\";\n+\n+  /**\n+   * Generate pegasus schema snapshot(pegasusSchemaSnapshot.pdl) files to the provided output directory\n+   * based on the given input pegasus schemas.\n+   *\n+   * @param resolverPath schema resolver path\n+   * @param inputPath input files directory\n+   * @param outputDir output files directory\n+   * @return GeneratorResult\n+   * @throws IOException\n+   */\n+  public void export(String resolverPath, String inputPath, File outputDir) throws IOException\n+  {\n+    List<DataSchema> dataSchemas = parseDataSchema(resolverPath, inputPath);\n+    for (DataSchema dataSchema : dataSchemas)\n+    {\n+      writeSnapshotFile(outputDir, ((NamedDataSchema) dataSchema).getFullName(), dataSchema);\n+    }\n+  }\n+\n+  private static List<DataSchema> parseDataSchema(String resolverPath, String inputPath)\n+      throws RuntimeException, FileNotFoundException\n+  {\n+    Iterator<File> iterator = FileUtils.iterateFiles(new File(inputPath), new String[]{PDL, PDSC}, true);\n+    List<DataSchema> schemas = new ArrayList<>();\n+    while (iterator.hasNext())\n+    {\n+      DataSchemaResolver resolver = MultiFormatDataSchemaResolver.withBuiltinFormats(resolverPath);\n+      File inputFile = iterator.next();\n+      String fileExtension = getFileExtension(inputFile.getName());\n+      PegasusSchemaParser parser = AbstractSchemaParser.parserForFileExtension(fileExtension, resolver);\n+      parser.parse(new FileInputStream(inputFile));\n+\n+      if (parser.hasError())\n+      {\n+        throw new RuntimeException(parser.errorMessage());\n+      }\n+\n+      List<DataSchema> topLevelDataSchemas = parser.topLevelDataSchemas();\n+      if (topLevelDataSchemas == null || topLevelDataSchemas.isEmpty() || topLevelDataSchemas.size() > 1)", "originalCommit": "e63ac7a9091c67407ffbf4b6e91e43f01774f51f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM4NTIzOA==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487385238", "bodyText": "Can you double check if the parser's error message includes the name of the file? (If it does not, let's either update the parser to include it or include it here.)", "author": "tjni", "createdAt": "2020-09-12T08:26:57Z", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/snapshot/gen/PegasusSchemaSnapshotExporter.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.tools.snapshot.gen;\n+\n+import com.linkedin.data.schema.AbstractSchemaEncoder;\n+import com.linkedin.data.schema.AbstractSchemaParser;\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.DataSchemaResolver;\n+import com.linkedin.data.schema.NamedDataSchema;\n+import com.linkedin.data.schema.PegasusSchemaParser;\n+import com.linkedin.data.schema.SchemaToPdlEncoder;\n+import com.linkedin.data.schema.resolver.MultiFormatDataSchemaResolver;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.commons.io.FileUtils;\n+\n+\n+/**\n+ * PegasusSchemaSnapshotExporter, generating pegasus schema snapshot(.pdl) files\n+ *\n+ * @author Yingjie Bi\n+ */\n+public class PegasusSchemaSnapshotExporter\n+{\n+  private static final String PEGASUS_SCHEMA_SNAPSHOT_SUFFIX = \".pdl\";\n+\n+  private static final String PDL = \"pdl\";\n+\n+  private static final String PDSC = \"pdsc\";\n+\n+  /**\n+   * Generate pegasus schema snapshot(pegasusSchemaSnapshot.pdl) files to the provided output directory\n+   * based on the given input pegasus schemas.\n+   *\n+   * @param resolverPath schema resolver path\n+   * @param inputPath input files directory\n+   * @param outputDir output files directory\n+   * @return GeneratorResult\n+   * @throws IOException\n+   */\n+  public void export(String resolverPath, String inputPath, File outputDir) throws IOException\n+  {\n+    List<DataSchema> dataSchemas = parseDataSchema(resolverPath, inputPath);\n+    for (DataSchema dataSchema : dataSchemas)\n+    {\n+      writeSnapshotFile(outputDir, ((NamedDataSchema) dataSchema).getFullName(), dataSchema);\n+    }\n+  }\n+\n+  private static List<DataSchema> parseDataSchema(String resolverPath, String inputPath)\n+      throws RuntimeException, FileNotFoundException\n+  {\n+    Iterator<File> iterator = FileUtils.iterateFiles(new File(inputPath), new String[]{PDL, PDSC}, true);\n+    List<DataSchema> schemas = new ArrayList<>();\n+    while (iterator.hasNext())\n+    {\n+      DataSchemaResolver resolver = MultiFormatDataSchemaResolver.withBuiltinFormats(resolverPath);\n+      File inputFile = iterator.next();\n+      String fileExtension = getFileExtension(inputFile.getName());\n+      PegasusSchemaParser parser = AbstractSchemaParser.parserForFileExtension(fileExtension, resolver);\n+      parser.parse(new FileInputStream(inputFile));\n+\n+      if (parser.hasError())\n+      {\n+        throw new RuntimeException(parser.errorMessage());\n+      }", "originalCommit": "e63ac7a9091c67407ffbf4b6e91e43f01774f51f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1MTk5Nw==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487451997", "bodyText": "included the name of the file here.", "author": "nickibi", "createdAt": "2020-09-12T21:49:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM4NTIzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM4NTI0Mg==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487385242", "bodyText": "Consider implementing this using streams natively, something like:\ntry (Stream<Path> paths = Files.walk(...))\n{\n  return paths\n      .filter(/* files that end in PDL or PDSC */)\n      .map(/* convert to DataSchema */)\n      .collect(Collectors.toList());\n}", "author": "tjni", "createdAt": "2020-09-12T08:27:02Z", "path": "restli-tools/src/main/java/com/linkedin/restli/tools/snapshot/gen/PegasusSchemaSnapshotExporter.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.restli.tools.snapshot.gen;\n+\n+import com.linkedin.data.schema.AbstractSchemaEncoder;\n+import com.linkedin.data.schema.AbstractSchemaParser;\n+import com.linkedin.data.schema.DataSchema;\n+import com.linkedin.data.schema.DataSchemaResolver;\n+import com.linkedin.data.schema.NamedDataSchema;\n+import com.linkedin.data.schema.PegasusSchemaParser;\n+import com.linkedin.data.schema.SchemaToPdlEncoder;\n+import com.linkedin.data.schema.resolver.MultiFormatDataSchemaResolver;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.commons.io.FileUtils;\n+\n+\n+/**\n+ * PegasusSchemaSnapshotExporter, generating pegasus schema snapshot(.pdl) files\n+ *\n+ * @author Yingjie Bi\n+ */\n+public class PegasusSchemaSnapshotExporter\n+{\n+  private static final String PEGASUS_SCHEMA_SNAPSHOT_SUFFIX = \".pdl\";\n+\n+  private static final String PDL = \"pdl\";\n+\n+  private static final String PDSC = \"pdsc\";\n+\n+  /**\n+   * Generate pegasus schema snapshot(pegasusSchemaSnapshot.pdl) files to the provided output directory\n+   * based on the given input pegasus schemas.\n+   *\n+   * @param resolverPath schema resolver path\n+   * @param inputPath input files directory\n+   * @param outputDir output files directory\n+   * @return GeneratorResult\n+   * @throws IOException\n+   */\n+  public void export(String resolverPath, String inputPath, File outputDir) throws IOException\n+  {\n+    List<DataSchema> dataSchemas = parseDataSchema(resolverPath, inputPath);\n+    for (DataSchema dataSchema : dataSchemas)\n+    {\n+      writeSnapshotFile(outputDir, ((NamedDataSchema) dataSchema).getFullName(), dataSchema);\n+    }\n+  }\n+\n+  private static List<DataSchema> parseDataSchema(String resolverPath, String inputPath)\n+      throws RuntimeException, FileNotFoundException\n+  {\n+    Iterator<File> iterator = FileUtils.iterateFiles(new File(inputPath), new String[]{PDL, PDSC}, true);\n+    List<DataSchema> schemas = new ArrayList<>();\n+    while (iterator.hasNext())\n+    {\n+      DataSchemaResolver resolver = MultiFormatDataSchemaResolver.withBuiltinFormats(resolverPath);", "originalCommit": "e63ac7a9091c67407ffbf4b6e91e43f01774f51f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1MTk2Nw==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487451967", "bodyText": "Used streams", "author": "nickibi", "createdAt": "2020-09-12T21:48:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM4NTI0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM4NTI1OA==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487385258", "bodyText": "Instead of using the project's logger, we can use the task's logger as you do above.", "author": "tjni", "createdAt": "2020-09-12T08:27:10Z", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/tasks/GeneratePegasusSnapshotTask.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package com.linkedin.pegasus.gradle.tasks;\n+\n+import com.linkedin.pegasus.gradle.PathingJarUtil;\n+import com.linkedin.pegasus.gradle.PegasusPlugin;\n+import com.linkedin.pegasus.gradle.internal.ArgumentFileGenerator;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.file.FileCollection;\n+import org.gradle.api.file.FileTree;\n+import org.gradle.api.tasks.CacheableTask;\n+import org.gradle.api.tasks.Classpath;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.InputDirectory;\n+import org.gradle.api.tasks.OutputDirectory;\n+import org.gradle.api.tasks.PathSensitive;\n+import org.gradle.api.tasks.PathSensitivity;\n+import org.gradle.api.tasks.SkipWhenEmpty;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import static com.linkedin.pegasus.gradle.SharedFileUtils.*;\n+\n+\n+/**\n+ * Generate pegasus schema's snapshot, which will be used for pegasus schema compatibility check\n+ *\n+ * @author Yingjie Bi\n+ */\n+@CacheableTask\n+public class GeneratePegasusSnapshotTask extends DefaultTask\n+{\n+  private File _inputDir;\n+  private FileCollection _resolverPath;\n+  private File _pegasusSchemaSnapshotDestinationDir;\n+  private FileCollection _classPath;\n+  private boolean _enableArgFile;\n+\n+  @TaskAction\n+  public void generatePegasusSnapshot() throws IOException\n+  {\n+    FileTree inputDataSchemaFiles = getSuffixedFiles(getProject(), _inputDir,\n+        PegasusPlugin.DATA_TEMPLATE_FILE_SUFFIXES);\n+\n+    List<String> inputDataSchemaFilenames = StreamSupport.stream(inputDataSchemaFiles.spliterator(), false)\n+        .map(File::getPath)\n+        .collect(Collectors.toList());\n+\n+    if (inputDataSchemaFilenames.isEmpty())\n+    {\n+      getLogger().lifecycle(\"There are no Pegasus schema input files. Skip generating Pegasus schema snapshots.\");\n+      return;\n+    }\n+    getProject().getLogger().info(\"Generating Pegasus schema snapshot...\");", "originalCommit": "e63ac7a9091c67407ffbf4b6e91e43f01774f51f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM4NTI2MA==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487385260", "bodyText": "Consider whether the Sync task is better, since it also deletes anything that has been removed.", "author": "tjni", "createdAt": "2020-09-12T08:27:17Z", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -2095,4 +2184,32 @@ private static void configureDataSchemaResourcesRoot(Project project, SourceSet\n       });\n     });\n   }\n+\n+  private Task generatePegasusSchemaSnapshot(Project project, SourceSet sourceSet, String taskName, File inputDir, File outputDir)\n+  {\n+    return project.getTasks().create(sourceSet.getTaskName(\"generate\", taskName),\n+        GeneratePegasusSnapshotTask.class, task ->\n+        {\n+          task.setInputDir(inputDir);\n+          task.setResolverPath(getDataModelConfig(project, sourceSet).plus(project.files(getDataSchemaPath(project, sourceSet))));\n+          task.setClassPath(project.getConfigurations().getByName(PEGASUS_PLUGIN_CONFIGURATION));\n+          task.setPegasusSchemaSnapshotDestinationDir(outputDir);\n+          if (isPropertyTrue(project, ENABLE_ARG_FILE))\n+          {\n+            task.setEnableArgFile(true);\n+          }\n+        });\n+  }\n+\n+  private Task publishPegasusSchemaSnapshot(Project project, SourceSet sourceSet, String taskName, Task checkPegasusSnapshotTast,\n+      File inputDir, File outputDir)\n+  {\n+    return project.getTasks().create(sourceSet.getTaskName(\"publish\", taskName),\n+        Copy.class, task ->", "originalCommit": "e63ac7a9091c67407ffbf4b6e91e43f01774f51f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1MTk0NA==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487451944", "bodyText": "Used Sync instead", "author": "nickibi", "createdAt": "2020-09-12T21:47:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM4NTI2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM4NTI2Mw==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487385263", "bodyText": "checkPegasusSnapshotTast => checkPegasusSnapshotTask", "author": "tjni", "createdAt": "2020-09-12T08:27:18Z", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -2095,4 +2184,32 @@ private static void configureDataSchemaResourcesRoot(Project project, SourceSet\n       });\n     });\n   }\n+\n+  private Task generatePegasusSchemaSnapshot(Project project, SourceSet sourceSet, String taskName, File inputDir, File outputDir)\n+  {\n+    return project.getTasks().create(sourceSet.getTaskName(\"generate\", taskName),\n+        GeneratePegasusSnapshotTask.class, task ->\n+        {\n+          task.setInputDir(inputDir);\n+          task.setResolverPath(getDataModelConfig(project, sourceSet).plus(project.files(getDataSchemaPath(project, sourceSet))));\n+          task.setClassPath(project.getConfigurations().getByName(PEGASUS_PLUGIN_CONFIGURATION));\n+          task.setPegasusSchemaSnapshotDestinationDir(outputDir);\n+          if (isPropertyTrue(project, ENABLE_ARG_FILE))\n+          {\n+            task.setEnableArgFile(true);\n+          }\n+        });\n+  }\n+\n+  private Task publishPegasusSchemaSnapshot(Project project, SourceSet sourceSet, String taskName, Task checkPegasusSnapshotTast,", "originalCommit": "e63ac7a9091c67407ffbf4b6e91e43f01774f51f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM4NTI3Mg==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487385272", "bodyText": "In general, if support for Gradle 4 can be dropped, consider starting to use task configuration avoidance. This involves using TaskContainer#register instead of TaskContainer#create, for example, and this line would become:\nproject.getTasks().named(ASSEMBLE,\n    assembleTask -> assembleTask.dependsOn(publishPegasusSchemaSnapshot));\n\nFeel free also to postpone that until a later time too, as it's not a completely trivial change.", "author": "tjni", "createdAt": "2020-09-12T08:27:22Z", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -1390,6 +1445,40 @@ protected void configureRestModelGeneration(Project project, SourceSet sourceSet\n     });\n   }\n \n+  protected void configurePegasusSchemaSnapshotGeneration(Project project, SourceSet sourceSet, boolean isExtensionSchema)\n+  {\n+    File schemaDir = isExtensionSchema? project.file(getExtensionSchemaPath(project, sourceSet))\n+        : project.file(getDataSchemaPath(project, sourceSet));\n+    if (isExtensionSchema && !SharedFileUtils.getSuffixedFiles(project, schemaDir, PDL_FILE_SUFFIX).isEmpty())\n+    {\n+      project.getLogger().debug(\"No extension schemas, skip generatePegasusExtensionSchemaSnapshot task\");\n+      return;\n+    }\n+    File publishablePegasusSchemaSnapshotDir = project.file(project.getBuildDir().getAbsolutePath()\n+        + File.separatorChar + sourceSet.getName() + (isExtensionSchema ? PEGASUS_EXTENSION_SCHEMA_SNAPSHOT: PEGASUS_SCHEMA_SNAPSHOT));\n+\n+    Task generatePegasusSchemaSnapshot = generatePegasusSchemaSnapshot(project, sourceSet,\n+        isExtensionSchema ? PEGASUS_EXTENSION_SCHEMA_SNAPSHOT: PEGASUS_SCHEMA_SNAPSHOT, schemaDir, publishablePegasusSchemaSnapshotDir);\n+\n+    Task checkSchemaSnapshot = project.getTasks().create(sourceSet.getTaskName(\"check\",\n+        isExtensionSchema ? PEGASUS_EXTENSION_SCHEMA_SNAPSHOT: PEGASUS_SCHEMA_SNAPSHOT),\n+        CheckPegasusSnapshotTask.class, task ->\n+        {\n+          task.dependsOn(generatePegasusSchemaSnapshot);\n+          // TODO: update CheckPegasusSnapshotTask\n+        });\n+\n+    File pegasusSchemaSnapshotDir = new File(isExtensionSchema ? getPegasusExtensionSchemaSnapshotPath(project, sourceSet)\n+        : getPegasusSchemaSnapshotPath(project, sourceSet));\n+    pegasusSchemaSnapshotDir.mkdirs();\n+\n+    Task publishPegasusSchemaSnapshot = publishPegasusSchemaSnapshot(project, sourceSet,\n+        isExtensionSchema ? PEGASUS_EXTENSION_SCHEMA_SNAPSHOT: PEGASUS_SCHEMA_SNAPSHOT, checkSchemaSnapshot,\n+        publishablePegasusSchemaSnapshotDir, pegasusSchemaSnapshotDir);\n+\n+    project.getTasks().getByName(ASSEMBLE).dependsOn(publishPegasusSchemaSnapshot);", "originalCommit": "e63ac7a9091c67407ffbf4b6e91e43f01774f51f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1MDcxMg==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487450712", "bodyText": "That's a good suggestion. I'd prefer to do that later. Thanks.", "author": "nickibi", "createdAt": "2020-09-12T21:30:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM4NTI3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM4NTI3NQ==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487385275", "bodyText": "The into method on the Copy task (and the Sync task) configures the destination directory property of the task, which is annotated with @OutputDirectory. This means that Gradle will create the directory for us if it is missing, and this call to mkdirs() can be removed.", "author": "tjni", "createdAt": "2020-09-12T08:27:27Z", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -1390,6 +1445,40 @@ protected void configureRestModelGeneration(Project project, SourceSet sourceSet\n     });\n   }\n \n+  protected void configurePegasusSchemaSnapshotGeneration(Project project, SourceSet sourceSet, boolean isExtensionSchema)\n+  {\n+    File schemaDir = isExtensionSchema? project.file(getExtensionSchemaPath(project, sourceSet))\n+        : project.file(getDataSchemaPath(project, sourceSet));\n+    if (isExtensionSchema && !SharedFileUtils.getSuffixedFiles(project, schemaDir, PDL_FILE_SUFFIX).isEmpty())\n+    {\n+      project.getLogger().debug(\"No extension schemas, skip generatePegasusExtensionSchemaSnapshot task\");\n+      return;\n+    }\n+    File publishablePegasusSchemaSnapshotDir = project.file(project.getBuildDir().getAbsolutePath()\n+        + File.separatorChar + sourceSet.getName() + (isExtensionSchema ? PEGASUS_EXTENSION_SCHEMA_SNAPSHOT: PEGASUS_SCHEMA_SNAPSHOT));\n+\n+    Task generatePegasusSchemaSnapshot = generatePegasusSchemaSnapshot(project, sourceSet,\n+        isExtensionSchema ? PEGASUS_EXTENSION_SCHEMA_SNAPSHOT: PEGASUS_SCHEMA_SNAPSHOT, schemaDir, publishablePegasusSchemaSnapshotDir);\n+\n+    Task checkSchemaSnapshot = project.getTasks().create(sourceSet.getTaskName(\"check\",\n+        isExtensionSchema ? PEGASUS_EXTENSION_SCHEMA_SNAPSHOT: PEGASUS_SCHEMA_SNAPSHOT),\n+        CheckPegasusSnapshotTask.class, task ->\n+        {\n+          task.dependsOn(generatePegasusSchemaSnapshot);\n+          // TODO: update CheckPegasusSnapshotTask\n+        });\n+\n+    File pegasusSchemaSnapshotDir = new File(isExtensionSchema ? getPegasusExtensionSchemaSnapshotPath(project, sourceSet)\n+        : getPegasusSchemaSnapshotPath(project, sourceSet));\n+    pegasusSchemaSnapshotDir.mkdirs();", "originalCommit": "e63ac7a9091c67407ffbf4b6e91e43f01774f51f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1MjE1OA==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487452158", "bodyText": "Good to know that, removed.", "author": "nickibi", "createdAt": "2020-09-12T21:50:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM4NTI3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM4NTI3OQ==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487385279", "bodyText": "It shouldn't be necessary to build a String and pass it through Project#file. I would recommend using java.nio.file.Path whenever possible, since it allows you to write:\nproject.getBuildDir().toPath().resolve(sourceSet.getName() + ...)\n\nGradle task properties can be Path instead of File as well, and it is also possible to convert from a Path to a File using Path#toFile.", "author": "tjni", "createdAt": "2020-09-12T08:27:31Z", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -1390,6 +1445,40 @@ protected void configureRestModelGeneration(Project project, SourceSet sourceSet\n     });\n   }\n \n+  protected void configurePegasusSchemaSnapshotGeneration(Project project, SourceSet sourceSet, boolean isExtensionSchema)\n+  {\n+    File schemaDir = isExtensionSchema? project.file(getExtensionSchemaPath(project, sourceSet))\n+        : project.file(getDataSchemaPath(project, sourceSet));\n+    if (isExtensionSchema && !SharedFileUtils.getSuffixedFiles(project, schemaDir, PDL_FILE_SUFFIX).isEmpty())\n+    {\n+      project.getLogger().debug(\"No extension schemas, skip generatePegasusExtensionSchemaSnapshot task\");\n+      return;\n+    }\n+    File publishablePegasusSchemaSnapshotDir = project.file(project.getBuildDir().getAbsolutePath()\n+        + File.separatorChar + sourceSet.getName() + (isExtensionSchema ? PEGASUS_EXTENSION_SCHEMA_SNAPSHOT: PEGASUS_SCHEMA_SNAPSHOT));", "originalCommit": "e63ac7a9091c67407ffbf4b6e91e43f01774f51f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1MjE4OQ==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487452189", "bodyText": "Updated based on suggestion", "author": "nickibi", "createdAt": "2020-09-12T21:51:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM4NTI3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM4NTI4Mg==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487385282", "bodyText": "At first glance, it's not obvious to me why this check only applies to the extension task.\nSeparately, there is a way to describe this behavior more declaratively that you can consider. Your implementation is pretty close to it already.\nIf you create a FileTree that includes only PDL files, it can be passed to tasks that require them through a task property of type Iterable<File> (or a subclass, such as FileTree itself) and annotated with @InputFiles. Furthermore, the property can be annotated with @SkipWhenEmpty, which will cause Gradle to skip the task if no input files were found.\nThe benefit of this approach is that the task will always exist, so a script that runs, for instance, ./gradlew generatePegasusExtensionSchemaSnapshot won't fail when no PDL files are found.", "author": "tjni", "createdAt": "2020-09-12T08:27:35Z", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -1390,6 +1445,40 @@ protected void configureRestModelGeneration(Project project, SourceSet sourceSet\n     });\n   }\n \n+  protected void configurePegasusSchemaSnapshotGeneration(Project project, SourceSet sourceSet, boolean isExtensionSchema)\n+  {\n+    File schemaDir = isExtensionSchema? project.file(getExtensionSchemaPath(project, sourceSet))\n+        : project.file(getDataSchemaPath(project, sourceSet));\n+    if (isExtensionSchema && !SharedFileUtils.getSuffixedFiles(project, schemaDir, PDL_FILE_SUFFIX).isEmpty())\n+    {\n+      project.getLogger().debug(\"No extension schemas, skip generatePegasusExtensionSchemaSnapshot task\");\n+      return;\n+    }", "originalCommit": "e63ac7a9091c67407ffbf4b6e91e43f01774f51f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1MDM4Mg==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487450382", "bodyText": "I was thinking that extension task will run by default and extension schemas can only be PDL format, so I added this check.  The regular schema task only runs when configuration property is provided.\nUpdated GeneratePegasusSnapshotTask based on the suggestion.", "author": "nickibi", "createdAt": "2020-09-12T21:26:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM4NTI4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM4NTI5NA==", "url": "https://github.com/linkedin/rest.li/pull/414#discussion_r487385294", "bodyText": "Consider using LifecycleBasePlugin.ASSEMBLE_TASK_NAME constant.", "author": "tjni", "createdAt": "2020-09-12T08:27:40Z", "path": "gradle-plugins/src/main/java/com/linkedin/pegasus/gradle/PegasusPlugin.java", "diffHunk": "@@ -571,6 +573,25 @@\n \n   private static final String PEGASUS_PLUGIN_CONFIGURATION = \"pegasusPlugin\";\n \n+  // Enable the use of generic pegasus schema compatibility checker\n+  private static final String ENABLE_PEGASUS_SCHEMA_COMPATIBILITY_CHECK = \"pegasusPlugin.enablePegasusSchemaCompatibilityCheck\";\n+\n+  private static final String PEGASUS_SCHEMA_SNAPSHOT = \"PegasusSchemaSnapshot\";\n+\n+  private static final String PEGASUS_EXTENSION_SCHEMA_SNAPSHOT = \"PegasusExtensionSchemaSnapshot\";\n+\n+  private static final String PEGASUS_SCHEMA_SNAPSHOT_DIR = \"pegasusSchemaSnapshot\";\n+\n+  private static final String PEGASUS_EXTENSION_SCHEMA_SNAPSHOT_DIR = \"pegasusExtensionSchemaSnapshot\";\n+\n+  private static final String PEGASUS_SCHEMA_SNAPSHOT_DIR_OVERRIDE = \"overridePegasusSchemaSnapshotDir\";\n+\n+  private static final String PEGASUS_EXTENSION_SCHEMA_SNAPSHOT_DIR_OVERRIDE = \"overridePegasusExtensionSchemaSnapshotDir\";\n+\n+  private static final String ASSEMBLE = \"assemble\";", "originalCommit": "e63ac7a9091c67407ffbf4b6e91e43f01774f51f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f907dfbb0192c514f6c294d215a36fe7d1b8b91a", "url": "https://github.com/linkedin/rest.li/commit/f907dfbb0192c514f6c294d215a36fe7d1b8b91a", "message": "Add generatePegasusSchemeSnapshot task", "committedDate": "2020-09-12T21:46:34Z", "type": "commit"}, {"oid": "f907dfbb0192c514f6c294d215a36fe7d1b8b91a", "url": "https://github.com/linkedin/rest.li/commit/f907dfbb0192c514f6c294d215a36fe7d1b8b91a", "message": "Add generatePegasusSchemeSnapshot task", "committedDate": "2020-09-12T21:46:34Z", "type": "forcePushed"}]}