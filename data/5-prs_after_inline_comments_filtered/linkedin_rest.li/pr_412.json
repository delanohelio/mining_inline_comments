{"pr_number": 412, "pr_title": "Generate code to avoid reflection and map access to improve generated data template runtime performance", "pr_createdAt": "2020-09-09T03:02:50Z", "pr_url": "https://github.com/linkedin/rest.li/pull/412", "timeline": [{"oid": "b992f7036699dcd5b6e71ead28a567eab318e840", "url": "https://github.com/linkedin/rest.li/commit/b992f7036699dcd5b6e71ead28a567eab318e840", "message": "Generate code to avoid reflection and map access to improve generated datatemplate runtime performance", "committedDate": "2020-09-09T04:44:53Z", "type": "forcePushed"}, {"oid": "c494ea7e33b998a528649fbefae26462caab877b", "url": "https://github.com/linkedin/rest.li/commit/c494ea7e33b998a528649fbefae26462caab877b", "message": "Generate code to avoid reflection and map access to improve generated datatemplate runtime performance", "committedDate": "2020-09-09T05:23:13Z", "type": "forcePushed"}, {"oid": "23590dd439724ad79d2332075c8942ccf8b29f10", "url": "https://github.com/linkedin/rest.li/commit/23590dd439724ad79d2332075c8942ccf8b29f10", "message": "Generate code to avoid reflection and map access to improve generated datatemplate runtime performance", "committedDate": "2020-09-09T06:57:16Z", "type": "forcePushed"}, {"oid": "6f309c1f7550c816463d1c8b2b09dfbc1444fb06", "url": "https://github.com/linkedin/rest.li/commit/6f309c1f7550c816463d1c8b2b09dfbc1444fb06", "message": "Generate code to avoid reflection and map access to improve generated datatemplate runtime performance", "committedDate": "2020-09-09T07:32:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUyMjIxOQ==", "url": "https://github.com/linkedin/rest.li/pull/412#discussion_r485522219", "bodyText": "This might not be safe?\nAtleast for existing record templates, we need to do the checks to ensure there are no cycles in the data.", "author": "karthikbalasub", "createdAt": "2020-09-09T10:57:54Z", "path": "data/src/main/java/com/linkedin/data/template/WrappingArrayTemplate.java", "diffHunk": "@@ -43,15 +43,14 @@ protected WrappingArrayTemplate(DataList list, ArrayDataSchema schema, Class<E>\n       throws TemplateOutputCastException\n   {\n     super(list, schema, elementClass, DataList.class);\n-    _constructor = DataTemplateUtil.templateConstructor(elementClass, schema.getItems());\n-    _cache = new DataObjectToObjectCache<E>(data().size());\n+    _cache = new DataObjectToObjectCache<>(DataMapBuilder.getOptimumHashMapCapacityFromSize(list.size()));\n   }\n \n   @Override\n   public boolean add(E element) throws ClassCastException\n   {\n     Object unwrapped;\n-    boolean result = _list.add(unwrapped = unwrap(element));\n+    boolean result = CheckedUtil.addWithoutChecking(_list, unwrapped = unwrap(element));", "originalCommit": "6f309c1f7550c816463d1c8b2b09dfbc1444fb06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgyMTIzMA==", "url": "https://github.com/linkedin/rest.li/pull/412#discussion_r485821230", "bodyText": "I know it is not safe. But someone inserting a datatemplate with cycles is shooting themselves in the foot, and should actually be penalized for it?\nThis becomes especially more poignant because today these checks take up a lot of CPU everytime a set of any record/union happens, bogging performance.\nIf you really have concerns about punishing them with StackOverflowError, one place to add checks would be Data.traverse where we can maintain an identitySet to track cycles and error out when serializing.", "author": "karthikrg", "createdAt": "2020-09-09T18:16:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUyMjIxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk5ODA5Mg==", "url": "https://github.com/linkedin/rest.li/pull/412#discussion_r485998092", "bodyText": "Added check to Data.traverse as discussed offline.", "author": "karthikrg", "createdAt": "2020-09-10T00:46:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUyMjIxOQ=="}], "type": "inlineReview"}, {"oid": "93c1e95f96d4dd6b948b04521bd207d70bfb23d8", "url": "https://github.com/linkedin/rest.li/commit/93c1e95f96d4dd6b948b04521bd207d70bfb23d8", "message": "Generate code to avoid reflection and map access to improve generated datatemplate runtime performance", "committedDate": "2020-09-10T00:33:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIyNDA4MA==", "url": "https://github.com/linkedin/rest.li/pull/412#discussion_r487224080", "bodyText": "This should also check for Data.NULL.\nwe put Data.NULL in the datamap if we see null while decoding. Mainly used for union with null, but can also happen for other fields", "author": "karthikbalasub", "createdAt": "2020-09-11T18:42:21Z", "path": "data/src/main/java/com/linkedin/data/collections/CheckedMap.java", "diffHunk": "@@ -241,13 +258,22 @@ public void putAll(Map<? extends K, ? extends V> m)\n     checkAll(m);\n     checkMutability();\n     _map.putAll(m);\n+    notifyChangeListenersOnPutAll(m);\n   }\n \n   @Override\n+  @SuppressWarnings(\"unchecked\")\n   public V remove(Object key)\n   {\n     checkMutability();\n-    return _map.remove(key);\n+    V oldValue = _map.remove(key);\n+\n+    if (oldValue != null)", "originalCommit": "93c1e95f96d4dd6b948b04521bd207d70bfb23d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY2MzE4OQ==", "url": "https://github.com/linkedin/rest.li/pull/412#discussion_r487663189", "bodyText": "Good catch. Fixed", "author": "karthikrg", "createdAt": "2020-09-14T05:43:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIyNDA4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI0MjUxNg==", "url": "https://github.com/linkedin/rest.li/pull/412#discussion_r487242516", "bodyText": "Add @OverRide (same for similar changes in other files)", "author": "karthikbalasub", "createdAt": "2020-09-11T19:18:59Z", "path": "data/src/main/java/com/linkedin/data/template/BooleanArray.java", "diffHunk": "@@ -68,4 +69,16 @@ public BooleanArray copy() throws CloneNotSupportedException\n   {\n     return (BooleanArray) super.copy();\n   }\n+\n+  protected Object coerceInput(Boolean object) throws ClassCastException\n+  {\n+    ArgumentUtil.notNull(object, \"object\");\n+    return object;\n+  }\n+\n+  protected Boolean coerceOutput(Object object) throws TemplateOutputCastException\n+  {\n+    assert(object != null);\n+    return DataTemplateUtil.coerceBooleanOutput(object);\n+  }", "originalCommit": "93c1e95f96d4dd6b948b04521bd207d70bfb23d8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyNzQ1NQ==", "url": "https://github.com/linkedin/rest.li/pull/412#discussion_r487327455", "bodyText": "We can avoid this if we override ::data() in IdResponse to return null..\n--- a/restli-common/src/main/java/com/linkedin/restli/common/IdResponse.java\n+++ b/restli-common/src/main/java/com/linkedin/restli/common/IdResponse.java\n@@ -17,6 +17,7 @@\n package com.linkedin.restli.common;\n \n \n+import com.linkedin.data.DataMap;\n import com.linkedin.data.template.RecordTemplate;\n \n \n@@ -41,10 +42,15 @@ public class IdResponse<K> extends RecordTemplate\n \n   public IdResponse(K key)\n   {\n-    super(null, null);\n+    super(new DataMap(), null);\n     _key = key;\n   }\n \n+  @Override\n+  public DataMap data() {\n+    return null;\n+  }\n+\n   public K getId()\n   {\n     return _key;", "author": "karthikbalasub", "createdAt": "2020-09-11T23:08:13Z", "path": "data/src/main/java/com/linkedin/data/template/RecordTemplate.java", "diffHunk": "@@ -403,6 +404,21 @@ else if ((template = (DataTemplate<?>) getCache().get(found)) != null && templat\n     return wrapped;\n   }\n \n+  /**\n+   * Register a change listener to get notified when the underlying map changes.\n+   */\n+  protected void addChangeListener(BiFunction<String, Object, Void> listener)\n+  {\n+    //\n+    // This UGLY hack is needed because IdResponse breaks the implicit RecordTemplate contract and passes in\n+    // a null datamap. We even have a test for this obnoxious behavior.", "originalCommit": "93c1e95f96d4dd6b948b04521bd207d70bfb23d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY2MzM3MQ==", "url": "https://github.com/linkedin/rest.li/pull/412#discussion_r487663371", "bodyText": "I did this and now some other tests seem to fail. I suggest we fix this in a follow up PR, since it is unrelated to the main issue here.", "author": "karthikrg", "createdAt": "2020-09-14T05:43:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyNzQ1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIyMjIzOQ==", "url": "https://github.com/linkedin/rest.li/pull/412#discussion_r488222239", "bodyText": "Would splitting the work up into 2 PRs be backward-compatible? For instance, we don't want to introduce a public method in PR 1, then remove it in PR 2 once we have the fix. If not, then I'd suggest doing the fix in this PR.", "author": "evanw555", "createdAt": "2020-09-14T21:10:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyNzQ1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyOTg3MQ==", "url": "https://github.com/linkedin/rest.li/pull/412#discussion_r487329871", "bodyText": "The last argument is supposed to be the type of object stored in DataList(dataClass), so using DataList.class here is wrong. This was not failing because the dataClass is not used for Wrapping*Template classes.\nHowever, using DataList (and DataMap for MapTemplate) is confusing. We should atleast change it to Object.class", "author": "karthikbalasub", "createdAt": "2020-09-11T23:19:46Z", "path": "data/src/main/java/com/linkedin/data/template/WrappingArrayTemplate.java", "diffHunk": "@@ -43,15 +43,14 @@ protected WrappingArrayTemplate(DataList list, ArrayDataSchema schema, Class<E>\n       throws TemplateOutputCastException\n   {\n     super(list, schema, elementClass, DataList.class);", "originalCommit": "93c1e95f96d4dd6b948b04521bd207d70bfb23d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY4MjI2Nw==", "url": "https://github.com/linkedin/rest.li/pull/412#discussion_r487682267", "bodyText": "Looks like an existing bug.\nUsing Object.class will work in theory because no one is using _dataClass right now, but is technically incorrect. I enhanced this code to get the dataclass from the schema.", "author": "karthikrg", "createdAt": "2020-09-14T06:39:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyOTg3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyOTk3MA==", "url": "https://github.com/linkedin/rest.li/pull/412#discussion_r487329970", "bodyText": "DataMap.class -> Object.class (see my comment above)", "author": "karthikbalasub", "createdAt": "2020-09-11T23:20:15Z", "path": "data/src/main/java/com/linkedin/data/template/WrappingMapTemplate.java", "diffHunk": "@@ -48,8 +50,7 @@ protected WrappingMapTemplate(DataMap map, MapDataSchema schema, Class<V> valueC\n       throws TemplateOutputCastException\n   {\n     super(map, schema, valueClass, DataMap.class);", "originalCommit": "93c1e95f96d4dd6b948b04521bd207d70bfb23d8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMzODQwMA==", "url": "https://github.com/linkedin/rest.li/pull/412#discussion_r487338400", "bodyText": "What if we set the instance vars for primitive fields to the value if the value is not null? It would avoid a map lookup when the field is accessed later.\neg,\nprivate Void onUnderlyingMapChanged(String key, Object value) {\nswitch (key) {\n           // _owner_name is primitive, so we can initialize the field\n            case \"owner_name\":\n                _owner_name = value instanceOf String.class ? (String) value : null;\n                return null;\n            case \"acls\":\n               // _acls is ACLArray so no need to wrap unless the field is accessed. \n                _acls = null;\n                return null;\n        }\n        return null;", "author": "karthikbalasub", "createdAt": "2020-09-12T00:02:40Z", "path": "generator/src/main/java/com/linkedin/pegasus/generator/JavaDataTemplateGenerator.java", "diffHunk": "@@ -1218,6 +1443,110 @@ private void generateConstructorWithMap(JDefinedClass cls, JClass valueClass)\n     argConstructor.body().invoke(\"putAll\").arg(m);\n   }\n \n+  private void generateOnUnderlyingMapChanged(JDefinedClass cls, Map<String, JVar> fieldMap)\n+  {\n+    final JMethod method = cls.method(JMod.PRIVATE, Void.class, \"onUnderlyingMapChanged\");\n+    final JVar keyParam = method.param(String.class, \"key\");\n+    method.param(_objectClass, \"value\");\n+    JSwitch keySwitch = method.body()._switch(keyParam);\n+    fieldMap.forEach((key, field) -> {\n+      JCase keyCase = keySwitch._case(JExpr.lit(key));\n+      keyCase.body().assign(field, JExpr._null());", "originalCommit": "93c1e95f96d4dd6b948b04521bd207d70bfb23d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY2NDAyMg==", "url": "https://github.com/linkedin/rest.li/pull/412#discussion_r487664022", "bodyText": "I thought about this, but IMO it will add minimum value. Let me explain why:\n\n\nWhen records/unions are created, fields/members are set via the generated setters which do set the ivars. Rarely are the map put methods directly invoked. Even if they are later in the filter chain etc. the object wrapper is gone by then.\n\n\nWhen decoding the map put is invoked, but there is no record/union wrapper then.", "author": "karthikrg", "createdAt": "2020-09-14T05:45:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMzODQwMA=="}], "type": "inlineReview"}, {"oid": "57c3149aef41a96fada7b0844b9fbd0e149e89ab", "url": "https://github.com/linkedin/rest.li/commit/57c3149aef41a96fada7b0844b9fbd0e149e89ab", "message": "Generate code to avoid reflection and map access to improve generated datatemplate runtime performance", "committedDate": "2020-09-14T06:38:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIxNjkxMw==", "url": "https://github.com/linkedin/rest.li/pull/412#discussion_r488216913", "bodyText": "Is it possible to just reduce this to being package-private? Don't think we'd want this field to be settable by subclasses.", "author": "evanw555", "createdAt": "2020-09-14T21:00:17Z", "path": "data/src/main/java/com/linkedin/data/template/RecordTemplate.java", "diffHunk": "@@ -499,7 +515,7 @@ private boolean checkPutNullValue(RecordDataSchema.Field field, Object object, S\n     return _cache;\n   }\n \n-  private DataMap _map;\n+  protected DataMap _map;", "originalCommit": "57c3149aef41a96fada7b0844b9fbd0e149e89ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3ODU5OQ==", "url": "https://github.com/linkedin/rest.li/pull/412#discussion_r489778599", "bodyText": "We can't. Generated subclasses need this.", "author": "karthikrg", "createdAt": "2020-09-16T22:00:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIxNjkxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIxODcwOQ==", "url": "https://github.com/linkedin/rest.li/pull/412#discussion_r488218709", "bodyText": "I'd suggest being a little more clear in this Javadoc: say that this method returns the class of this type's in-memory data representation (perhaps can be rephrased).", "author": "evanw555", "createdAt": "2020-09-14T21:04:02Z", "path": "data/src/main/java/com/linkedin/data/template/DataTemplateUtil.java", "diffHunk": "@@ -392,6 +415,41 @@ public static TyperefInfo getTyperefInfo(Class<? extends DataTemplate> type)\n     return typerefInfo;\n   }\n \n+  /**", "originalCommit": "57c3149aef41a96fada7b0844b9fbd0e149e89ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3OTQ3Mw==", "url": "https://github.com/linkedin/rest.li/pull/412#discussion_r489779473", "bodyText": "Fixed", "author": "karthikrg", "createdAt": "2020-09-16T22:02:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIxODcwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIyMDk0OA==", "url": "https://github.com/linkedin/rest.li/pull/412#discussion_r488220948", "bodyText": "For all of these new methods you're introducing, consider the access level carefully. Do all of these need to be public? Can we reduce any of them to private, or package-private? If so, then we definitely should.", "author": "evanw555", "createdAt": "2020-09-14T21:08:33Z", "path": "data/src/main/java/com/linkedin/data/template/DataTemplateUtil.java", "diffHunk": "@@ -832,14 +903,46 @@ public static boolean hasCoercer(Class<?> klass)\n       if (fromClass.isEnum())\n         return object.toString();\n     }\n-    @SuppressWarnings(\"unchecked\") DirectCoercer<T> coercer = (DirectCoercer<T>) _classToCoercerMap.get(fromClass);\n+\n+    return coerceCustomInput(object, fromClass);\n+  }\n+\n+  public static Object coerceIntInput(Integer value)", "originalCommit": "57c3149aef41a96fada7b0844b9fbd0e149e89ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3ODgxNQ==", "url": "https://github.com/linkedin/rest.li/pull/412#discussion_r489778815", "bodyText": "All these util methods are invoked from generated classes and hence need to be public.", "author": "karthikrg", "createdAt": "2020-09-16T22:00:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIyMDk0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIyMjg0NA==", "url": "https://github.com/linkedin/rest.li/pull/412#discussion_r488222844", "bodyText": "If this is no longer just for unit tests, please remove the comment.", "author": "evanw555", "createdAt": "2020-09-14T21:11:59Z", "path": "data/src/main/java/com/linkedin/data/DataMap.java", "diffHunk": "@@ -401,7 +401,7 @@ void disableChecker()\n   }\n \n   // Unit test use only\n-  Map<String, Object> getUnderlying()\n+  protected Map<String, Object> getUnderlying()", "originalCommit": "57c3149aef41a96fada7b0844b9fbd0e149e89ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3OTkyNw==", "url": "https://github.com/linkedin/rest.li/pull/412#discussion_r489779927", "bodyText": "Actually it is still for unit tests only. I removed the protected and retained the comment.", "author": "karthikrg", "createdAt": "2020-09-16T22:03:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIyMjg0NA=="}], "type": "inlineReview"}, {"oid": "2d76cf2f22a762b62f93bdf61cb7e644e8f770d8", "url": "https://github.com/linkedin/rest.li/commit/2d76cf2f22a762b62f93bdf61cb7e644e8f770d8", "message": "Generate code to avoid reflection and map access to improve generated datatemplate runtime performance", "committedDate": "2020-09-16T22:04:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTMxNDc1Ng==", "url": "https://github.com/linkedin/rest.li/pull/412#discussion_r491314756", "bodyText": "nit: This cycled situation does not sounds like an IOException, we probably want to throw exceptions more close to whats happening.\nOne question to ask is, if previously we don't check this cycling condition and now we are blocking them, would it cause any unexpected runtime issue we have to deal with?", "author": "BrianPin", "createdAt": "2020-09-19T07:39:31Z", "path": "data/src/main/java/com/linkedin/data/Data.java", "diffHunk": "@@ -693,6 +720,29 @@ private static boolean reachable(DataComplex source, Object destination)\n     return false;\n   }\n \n+  /**\n+   * Check for cycles.\n+   *\n+   * <p>This checks if the given {@link DataComplex} is present in the given set of ancestor complexes. If yes,\n+   * then it indicates that a cycle exists and we throw an exception. If not, we add it to the set.</p>\n+   *\n+   * @param dataComplex The current {@link DataComplex}\n+   * @param ancestorSet The set containing all ancestors of the {@link DataComplex}\n+   * @param pathList The list of paths encountered so far. Used to populate a useful exception message when a cycle is\n+   *                 detected.\n+   * @throws IOException If this {@link DataComplex} is present in the ancestor set indicating a cycle.\n+   */\n+  private static void checkForCyclesAndAdd(DataComplex dataComplex,\n+      Set<DataComplex> ancestorSet, List<String> pathList) throws IOException\n+  {\n+    if (ancestorSet.contains(dataComplex))\n+    {\n+      throw new IOException(\"Cycle detected. Path: \" + pathList);", "originalCommit": "2d76cf2f22a762b62f93bdf61cb7e644e8f770d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTMzNDQ2Mw==", "url": "https://github.com/linkedin/rest.li/pull/412#discussion_r491334463", "bodyText": "We earlier used to check for cycles when adding any DataComplex to a DataList/DataMap. This is probably a bad tradeoff since we penalize everyone on set. Instead we decided to skip it there (except for in assert mode) and do it here. This was discussed with @karthikbalasub", "author": "karthikrg", "createdAt": "2020-09-19T08:44:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTMxNDc1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTMxNzY3MA==", "url": "https://github.com/linkedin/rest.li/pull/412#discussion_r491317670", "bodyText": "Just curious, how/and why do we want to put WeakReference here.", "author": "BrianPin", "createdAt": "2020-09-19T07:48:21Z", "path": "data/src/main/java/com/linkedin/data/collections/CheckedMap.java", "diffHunk": "@@ -299,6 +326,27 @@ private final void checkMutability()\n     }\n   }\n \n+  /**\n+   * Add a change listener to be notified of changes to the underlying map.\n+   *\n+   * <p>This class internally maintains weak references to the listeners to avoid leaking them.</p>\n+   *\n+   * @param listener The listener to register.\n+   */\n+  public final void addChangeListener(BiFunction<K, V, Void> listener)\n+  {\n+    if (_changeListeners == null)\n+    {\n+      // Change listeners are mostly used by map wrappers, and most maps will only have 1\n+      // wrapper, so initialize list with a capacity of 1.\n+      _changeListeners = new ArrayList<>(1);\n+    }\n+\n+    // Maintain a weak reference to to the listener to avoid leaking the wrapper beyond its\n+    // lifetime.\n+    _changeListeners.add(new WeakReference<>(listener));", "originalCommit": "2d76cf2f22a762b62f93bdf61cb7e644e8f770d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTMzNDY5OQ==", "url": "https://github.com/linkedin/rest.li/pull/412#discussion_r491334699", "bodyText": "As the comment says we don't want to leak the wrapper record/union beyond its lifetime. Without a weakreference the record/union will live on as long as the datamap lives on.", "author": "karthikrg", "createdAt": "2020-09-19T08:45:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTMxNzY3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTMxODE0Nw==", "url": "https://github.com/linkedin/rest.li/pull/412#discussion_r491318147", "bodyText": "New to restli, why do we want to listen to data structure changes?", "author": "BrianPin", "createdAt": "2020-09-19T07:49:55Z", "path": "data/src/main/java/com/linkedin/data/collections/CheckedMap.java", "diffHunk": "@@ -149,14 +156,23 @@ public CheckedMap(int initialCapacity, MapChecker<K,V> checker)\n   public CheckedMap(int initialCapacity, float loadFactor, MapChecker<K,V> checker)\n   {\n     _checker = checker;\n-    _map = new HashMap<K,V>(initialCapacity, loadFactor);\n+    _map = new HashMap<>(initialCapacity, loadFactor);\n   }\n \n   @Override\n   public void clear()\n   {\n     checkMutability();\n+    Set<K> keys = null;\n+    if (_changeListeners != null)\n+    {\n+      keys = new HashSet<>(keySet());\n+    }\n     _map.clear();\n+    if (keys != null)\n+    {\n+      notifyChangeListenersOnClear(keys);", "originalCommit": "2d76cf2f22a762b62f93bdf61cb7e644e8f770d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTMzNDg4MQ==", "url": "https://github.com/linkedin/rest.li/pull/412#discussion_r491334881", "bodyText": "So that we can clear our local cache of ivars, if the underlying map is updated directly instead of calling the wrapper record/union setters. The ivars have been added for performance reasons to avoid map lookups.", "author": "karthikrg", "createdAt": "2020-09-19T08:45:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTMxODE0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ3MzM3Mw==", "url": "https://github.com/linkedin/rest.li/pull/412#discussion_r492473373", "bodyText": "Can we keep this protected, then reduce it to private in a later major version release? Doing this would be better practice and I doubt it would cause problems (since I don't think anyone is gonna set it between now and the next major version).", "author": "evanw555", "createdAt": "2020-09-22T04:54:30Z", "path": "data/src/main/java/com/linkedin/data/template/WrappingArrayTemplate.java", "diffHunk": "@@ -162,7 +161,17 @@ protected E cacheLookup(Object object, int index) throws TemplateOutputCastExcep\n     return wrapped;\n   }\n \n-  protected final Constructor<E> _constructor;\n+  protected E coerceOutput(Object value) throws TemplateOutputCastException\n+  {\n+    if (_constructor == null)\n+    {\n+      _constructor = DataTemplateUtil.templateConstructor(_elementClass, schema().getItems());\n+    }\n+\n+    return DataTemplateUtil.wrap(value, _constructor);\n+  }\n+\n+  private Constructor<E> _constructor;", "originalCommit": "2d76cf2f22a762b62f93bdf61cb7e644e8f770d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ4MTEzNQ==", "url": "https://github.com/linkedin/rest.li/pull/412#discussion_r492481135", "bodyText": "I prefer keeping it private because, in case folks were using it via subclassing the change would break at build time. If we make it protected and folks continue to use it, there is a chance it may barf and throw NPE at runtime, since we now initialize the constructor on demand.", "author": "karthikrg", "createdAt": "2020-09-22T05:27:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ3MzM3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ3MzQ1Mg==", "url": "https://github.com/linkedin/rest.li/pull/412#discussion_r492473452", "bodyText": "Same comment as above.", "author": "evanw555", "createdAt": "2020-09-22T04:54:49Z", "path": "data/src/main/java/com/linkedin/data/template/WrappingMapTemplate.java", "diffHunk": "@@ -318,7 +329,7 @@ public V setValue(V value) throws ClassCastException, TemplateOutputCastExceptio\n \n   }\n \n-  protected final Constructor<V> _constructor;\n+  private Constructor<V> _constructor;", "originalCommit": "2d76cf2f22a762b62f93bdf61cb7e644e8f770d8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ3NzEwMQ==", "url": "https://github.com/linkedin/rest.li/pull/412#discussion_r492477101", "bodyText": "Why bother having the \"add\" logic bundled in with this method? I can think of a couple reasons to move it out:\n\nImproves readability in the containing method because there's visible symmetry between the \"add ancestor\" and \"remove ancestor\" statements.\nAdds an on-success side effect to an otherwise assertion-like method. Method is cleaner and simpler if it's just a \"check for cycles\" method.\nAdding the ancestor isn't really related to this method and could just be included outside the method. Could just move the last line outside to get the same effect.", "author": "evanw555", "createdAt": "2020-09-22T05:11:12Z", "path": "data/src/main/java/com/linkedin/data/Data.java", "diffHunk": "@@ -693,6 +720,29 @@ private static boolean reachable(DataComplex source, Object destination)\n     return false;\n   }\n \n+  /**\n+   * Check for cycles.\n+   *\n+   * <p>This checks if the given {@link DataComplex} is present in the given set of ancestor complexes. If yes,\n+   * then it indicates that a cycle exists and we throw an exception. If not, we add it to the set.</p>\n+   *\n+   * @param dataComplex The current {@link DataComplex}\n+   * @param ancestorSet The set containing all ancestors of the {@link DataComplex}\n+   * @param pathList The list of paths encountered so far. Used to populate a useful exception message when a cycle is\n+   *                 detected.\n+   * @throws IOException If this {@link DataComplex} is present in the ancestor set indicating a cycle.\n+   */\n+  private static void checkForCyclesAndAdd(DataComplex dataComplex,", "originalCommit": "2d76cf2f22a762b62f93bdf61cb7e644e8f770d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ4MjQ1Ng==", "url": "https://github.com/linkedin/rest.li/pull/412#discussion_r492482456", "bodyText": "Fixed", "author": "karthikrg", "createdAt": "2020-09-22T05:32:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ3NzEwMQ=="}], "type": "inlineReview"}, {"oid": "6e6c0a1514b135ac197a6015a19a5cedda3600bc", "url": "https://github.com/linkedin/rest.li/commit/6e6c0a1514b135ac197a6015a19a5cedda3600bc", "message": "Generate code to avoid reflection and map access to improve generated datatemplate runtime performance", "committedDate": "2020-09-22T05:32:52Z", "type": "commit"}, {"oid": "6e6c0a1514b135ac197a6015a19a5cedda3600bc", "url": "https://github.com/linkedin/rest.li/commit/6e6c0a1514b135ac197a6015a19a5cedda3600bc", "message": "Generate code to avoid reflection and map access to improve generated datatemplate runtime performance", "committedDate": "2020-09-22T05:32:52Z", "type": "forcePushed"}, {"oid": "25818945ce0ba2238907b332a8073b401e575e1f", "url": "https://github.com/linkedin/rest.li/commit/25818945ce0ba2238907b332a8073b401e575e1f", "message": "Merge branch 'master' into master", "committedDate": "2020-09-23T06:14:04Z", "type": "commit"}]}