{"pr_number": 4066, "pr_title": "PLFM-6159: Code review follow up", "pr_createdAt": "2020-05-29T17:14:22Z", "pr_url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4066", "timeline": [{"oid": "15f3a31a42293e10c04546d6be71a3cb0b837305", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/15f3a31a42293e10c04546d6be71a3cb0b837305", "message": "PLFM-6159: Simplify findByName in DefaultColumnModel", "committedDate": "2020-05-29T00:58:03Z", "type": "commit"}, {"oid": "97d4f05ae1fb5a6f2d1e6bcc545ebfb204932b2c", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/97d4f05ae1fb5a6f2d1e6bcc545ebfb204932b2c", "message": "PLFM-6159: Removed modifiedBy from submission view columns", "committedDate": "2020-05-29T00:58:03Z", "type": "commit"}, {"oid": "f28c892366df2baa7794ccea869eb3f287ab002d", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/f28c892366df2baa7794ccea869eb3f287ab002d", "message": "PLFM-6159: New integration test with multiple evaluations", "committedDate": "2020-05-29T00:58:03Z", "type": "commit"}, {"oid": "db9c6760d6e8c5b4e007cb94630677705f8125eb", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/db9c6760d6e8c5b4e007cb94630677705f8125eb", "message": "PLFM-6159: Additional tests on new column types", "committedDate": "2020-05-29T00:58:03Z", "type": "commit"}, {"oid": "1664a84f87857b9dd22eadfc18c3ffd8c1ca8778", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/1664a84f87857b9dd22eadfc18c3ffd8c1ca8778", "message": "PLFM-6159: Added submission view client integration test", "committedDate": "2020-05-29T01:29:34Z", "type": "commit"}, {"oid": "5e7f4fc21f709a6c3238db68db4195941ed353f6", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/5e7f4fc21f709a6c3238db68db4195941ed353f6", "message": "PLFM-6159: New enumeration with subset of view entity types", "committedDate": "2020-05-29T02:03:42Z", "type": "commit"}, {"oid": "7dabaf1f3f8312ca02b490b505f00ad5c33a915a", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/7dabaf1f3f8312ca02b490b505f00ad5c33a915a", "message": "PLFM-6159: Remove ViewScopeUtils", "committedDate": "2020-05-29T02:34:50Z", "type": "commit"}, {"oid": "240f8c3a5c5b119f9ae1b5d40baea73a38dc0bad", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/240f8c3a5c5b119f9ae1b5d40baea73a38dc0bad", "message": "PLFM-6159: ACL check optimization for submission views", "committedDate": "2020-05-29T03:35:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU2ODA3Mg==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4066#discussion_r433568072", "bodyText": "need a better name.  maybe getAccessibleIds()", "author": "john-hill", "createdAt": "2020-06-02T01:10:53Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/evaluation/manager/EvaluationPermissionsManagerImpl.java", "diffHunk": "@@ -144,24 +147,61 @@ public AccessControlList getAcl(UserInfo userInfo, String evalId)\n \t@Override\n \tpublic AuthorizationStatus hasAccess(UserInfo userInfo, String evalId, ACCESS_TYPE accessType)\n \t\t\tthrows NotFoundException, DatastoreException {\n-\t\tif (userInfo == null) {\n-\t\t\tthrow new IllegalArgumentException(\"User info cannot be null.\");\n-\t\t}\n \t\tif (evalId == null || evalId.isEmpty()) {\n \t\t\tthrow new IllegalArgumentException(\"Evaluation ID cannot be null or empty.\");\n \t\t}\n+\n+\t\treturn hasAccess(userInfo, accessType).orElseGet(() -> {\n+\t\t\tif (!aclDAO.canAccess(userInfo.getGroups(), evalId, ObjectType.EVALUATION, accessType)) {\n+\t\t\t\treturn AuthorizationStatus.accessDenied(\"User lacks \"+accessType+\" access to Evaluation \"+evalId);\n+\t\t\t}\n+\t\t\t\n+\t\t\treturn AuthorizationStatus.authorized();\n+\t\t});\n+\t}\n+\t\n+\t@Override\n+\tpublic AuthorizationStatus hasAccess(UserInfo userInfo, ACCESS_TYPE accessType, List<String> evaluationIds)\n+\t\t\tthrows NotFoundException, DatastoreException {\n+\t\tif (evaluationIds == null || evaluationIds.isEmpty()) {\n+\t\t\tthrow new IllegalArgumentException(\"The set of evaluation ids cannot be null or empty.\");\n+\t\t}\n+\t\t\n+\t\tSet<Long> benefactorIds = evaluationIds.stream()\n+\t\t\t\t.map((id) -> KeyFactory.stringToKey(id))\n+\t\t\t\t.collect(Collectors.toSet());\n+\t\t\n+\t\treturn hasAccess(userInfo, accessType).orElseGet(() -> {\n+\t\t\tSet<Long> accessibleSet = aclDAO.getAccessibleBenefactors(userInfo.getGroups(), benefactorIds, ObjectType.EVALUATION, accessType);", "originalCommit": "240f8c3a5c5b119f9ae1b5d40baea73a38dc0bad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}