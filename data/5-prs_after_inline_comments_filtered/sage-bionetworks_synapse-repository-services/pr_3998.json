{"pr_number": 3998, "pr_title": "Plfm 6161", "pr_createdAt": "2020-04-13T20:47:46Z", "pr_url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3998", "timeline": [{"oid": "a42885acc2d81e54d2a1a701835bacbeaab86564", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/a42885acc2d81e54d2a1a701835bacbeaab86564", "message": "json-schema tables DDLs and DBO objects", "committedDate": "2020-04-07T01:33:01Z", "type": "commit"}, {"oid": "ebc94ef07063906c7db47622fdd55764eb91d008", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/ebc94ef07063906c7db47622fdd55764eb91d008", "message": "starting manager", "committedDate": "2020-04-07T18:58:25Z", "type": "commit"}, {"oid": "1e7d94dabea2078bc2c46ffdc814625b66d732ef", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/1e7d94dabea2078bc2c46ffdc814625b66d732ef", "message": "Merge branch 'develop' into PLFM-6161", "committedDate": "2020-04-13T20:22:15Z", "type": "commit"}, {"oid": "c3c5f0db2a30f14e7dbce907151df9eeb4cf0c95", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/c3c5f0db2a30f14e7dbce907151df9eeb4cf0c95", "message": "Merge branch 'PLFM-6161-id-parser' into PLFM-6161", "committedDate": "2020-04-13T20:28:38Z", "type": "commit"}, {"oid": "e73e26b63af163b266a73b40d30bbfa009e272eb", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/e73e26b63af163b266a73b40d30bbfa009e272eb", "message": "switched to the new parsers and started implementing the schema DOA", "committedDate": "2020-04-14T01:33:55Z", "type": "commit"}, {"oid": "0b6ec3ecfcd2913f0fc564b4d85b329eda588007", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/0b6ec3ecfcd2913f0fc564b4d85b329eda588007", "message": "use new eclipse hash/equals", "committedDate": "2020-04-14T01:37:47Z", "type": "commit"}, {"oid": "53daf5293b7acf9ce7048582d6965f79692df004", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/53daf5293b7acf9ce7048582d6965f79692df004", "message": "test fix", "committedDate": "2020-04-14T18:48:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUxMjIyMA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3998#discussion_r408512220", "bodyText": "Can remove duplicate", "author": "marcomarasca", "createdAt": "2020-04-15T00:28:30Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/schema/JsonSchemaManagerImpl.java", "diffHunk": "@@ -152,4 +157,33 @@ public Organization getOrganizationByName(UserInfo user, String name) {\n \t\treturn organizationDao.getOrganizationByName(processedOrganizationName);\n \t}\n \n+\t@WriteTransaction\n+\t@Override\n+\tpublic CreateSchemaResponse createJsonSchema(UserInfo user, CreateSchemaRequest request) {\n+\t\tValidateArgument.required(user, \"UserInfo\");\n+\t\tValidateArgument.required(request, \"request\");\n+\t\tValidateArgument.required(request.getSchema(), \"request.schema\");\n+\t\tValidateArgument.required(request.getSchema(), \"request.schema\");", "originalCommit": "53daf5293b7acf9ce7048582d6965f79692df004", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUyNDA3OQ==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3998#discussion_r408524079", "bodyText": "We might be able to avoid having a nullable id while using the select for update first and still use the insert ignore below with a new id from the id generator.", "author": "marcomarasca", "createdAt": "2020-04-15T01:12:48Z", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/schema/JsonSchemaDaoImpl.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package org.sagebionetworks.repo.model.dbo.schema;\n+\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_CREATED_BY;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_CREATED_ON;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_NAME;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_ORG_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.TABLE_JSON_SCHEMA;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import org.sagebionetworks.ids.IdGenerator;\n+import org.sagebionetworks.ids.IdType;\n+import org.sagebionetworks.repo.model.schema.SchemaInfo;\n+import org.sagebionetworks.repo.transactions.WriteTransaction;\n+import org.sagebionetworks.util.ValidateArgument;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.RowMapper;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class JsonSchemaDaoImpl implements JsonSchemaDao {\n+\n+\t@Autowired\n+\tprivate IdGenerator idGenerator;\n+\t@Autowired\n+\tprivate JdbcTemplate jdbcTemplate;\n+\n+\tpublic static final RowMapper<SchemaInfo> SCHEMA_INFO_MAPPER = new RowMapper<SchemaInfo>() {\n+\n+\t\t@Override\n+\t\tpublic SchemaInfo mapRow(ResultSet rs, int rowNum) throws SQLException {\n+\t\t\tSchemaInfo info = new SchemaInfo();\n+\t\t\tinfo.setNumericId(rs.getString(COL_JSON_SCHEMA_ID));\n+\t\t\tinfo.setOrganizationId(rs.getString(COL_JSON_SCHEMA_ORG_ID));\n+\t\t\tinfo.setName(rs.getString(COL_JSON_SCHEMA_NAME));\n+\t\t\tinfo.setCreatedBy(rs.getString(COL_JSON_SCHEMA_CREATED_BY));\n+\t\t\tinfo.setCreatedOn(rs.getTimestamp(COL_JSON_SCHEMA_CREATED_ON));\n+\t\t\treturn info;\n+\t\t}\n+\t};\n+\n+\t@WriteTransaction\n+\t@Override\n+\tpublic SchemaInfo createSchemaIfDoesNotExist(SchemaInfo schemaRoot) {\n+\t\tValidateArgument.required(schemaRoot, \"SchemaInfo\");\n+\t\tValidateArgument.required(schemaRoot.getOrganizationId(), \"schema.organizationId\");\n+\t\tValidateArgument.required(schemaRoot.getName(), \"schema.name\");\n+\t\tValidateArgument.required(schemaRoot.getCreatedBy(), \"schema.createdBy\");\n+\t\tValidateArgument.required(schemaRoot.getCreatedOn(), \"schema.createdOn\");\n+\n+\t\t// By inserting a row without an ID we ensure concurrent calls lock on the new\n+\t\t// row.\n+\t\tint updateCount = jdbcTemplate.update(", "originalCommit": "53daf5293b7acf9ce7048582d6965f79692df004", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}