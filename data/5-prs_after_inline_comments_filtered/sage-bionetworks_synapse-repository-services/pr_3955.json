{"pr_number": 3955, "pr_title": "R298 plfm 6108", "pr_createdAt": "2020-02-26T23:28:58Z", "pr_url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3955", "timeline": [{"oid": "f8122148d55a6f2df32388988581c5e388c3c30f", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/f8122148d55a6f2df32388988581c5e388c3c30f", "message": "REST client - build passed. Needs more tests of client itself.", "committedDate": "2020-02-25T00:24:11Z", "type": "commit"}, {"oid": "56665cfca92707ed9a83333fa87e838632991a92", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/56665cfca92707ed9a83333fa87e838632991a92", "message": "Unit test jiraclient", "committedDate": "2020-02-25T19:08:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzMTU4Mw==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3955#discussion_r384831583", "bodyText": "Use when neeeded, don't cache. Also check if parser is thread-safe.", "author": "xschildw", "createdAt": "2020-02-26T23:34:35Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JiraClientImpl.java", "diffHunk": "@@ -3,73 +3,193 @@\n import java.net.URI;\n import java.util.concurrent.ExecutionException;\n \n-import io.atlassian.util.concurrent.Promise;\n import org.sagebionetworks.StackConfigurationSingleton;\n \n-import com.atlassian.jira.rest.client.api.IssueRestClient;\n-import com.atlassian.jira.rest.client.api.JiraRestClient;\n-import com.atlassian.jira.rest.client.api.MetadataRestClient;\n-import com.atlassian.jira.rest.client.api.ProjectRestClient;\n-import com.atlassian.jira.rest.client.api.domain.BasicIssue;\n-import com.atlassian.jira.rest.client.api.domain.Field;\n-import com.atlassian.jira.rest.client.api.domain.Project;\n-import com.atlassian.jira.rest.client.api.domain.input.IssueInput;\n-import com.atlassian.jira.rest.client.internal.async.AsynchronousJiraRestClientFactory;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpStatus;\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+import org.sagebionetworks.repo.model.UnauthorizedException;\n+import org.sagebionetworks.repo.web.NotFoundException;\n+import org.sagebionetworks.repo.web.ServiceUnavailableException;\n+import org.sagebionetworks.simpleHttpClient.*;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.UnsupportedEncodingException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n \n /**\n- * An implementation of JiraClient using the Jira-Rest-Java-Client\n- * \n- * @author brucehoff\n- *\n+ * Mini JIRA REST client\n  */\n public class JiraClientImpl implements JiraClient {\n \tprivate static final String JIRA_URL = \"https://sagebionetworks.jira.com\";\n \n-\tprivate JiraRestClient restClient;\n-\t\n-\tprivate static <T> T waitForPromise(Promise<T> promise) {\n-\t\ttry {\n-\t\t\twhile (!promise.isDone()) {\n-\t\t\t\tThread.sleep(100L);\n-\t\t\t}\n-\t\t\treturn promise.get();\n-\t\t} catch (InterruptedException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t} catch (ExecutionException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t}\n-\t}\n-\t\n+\tprivate final SimpleHttpClient httpClient;\n+\tprivate String USERNAME;\n+\tprivate String APIKEY;\n+\tprivate static final Integer TIME_OUT = 30 * 1000; // 30 seconds\n+\tprivate static final String JIRA_API_PROJECT_URL = \"/rest/api/3/project/\";\n+\tprivate static final String JIRA_API_FIELDS_URL = \"/rest/api/3/field/\";\n+\tprivate static final String JIRA_API_ISSUE_URL = \"/rest/api/3/issue/\";\n+\tprivate static final String USER_AGENT = \"Synapse\";\n+\tprivate static JSONParser parser;\n+\tprivate static final String JIRA_PROJECT_ISSUE_TYPES_KEY = \"issueTypes\";\n+\tprivate static final String JIRA_PROJECT_ID_KEY = \"id\";\n+\n \tpublic JiraClientImpl() {\n-    \tfinal AsynchronousJiraRestClientFactory factory = new AsynchronousJiraRestClientFactory();\n-    \tURI jiraServerUri = URI.create(JIRA_URL);\n-    \tthis.restClient = factory.createWithBasicHttpAuthentication(\n-    \t\t\tjiraServerUri, \n-    \t\t\tStackConfigurationSingleton.singleton().getJiraUserEmail(), \n-    \t\t\tStackConfigurationSingleton.singleton().getJiraUserApikey());\n+\t\tSimpleHttpClientConfig httpClientConfig = new SimpleHttpClientConfig();\n+\t\thttpClientConfig.setSocketTimeoutMs(TIME_OUT);\n+\t\thttpClient = new SimpleHttpClientImpl(httpClientConfig);\n+\n+\t\tUSERNAME = StackConfigurationSingleton.singleton().getJiraUserEmail();\n+\t\tAPIKEY = StackConfigurationSingleton.singleton().getJiraUserApikey();\n+\t\tparser = new JSONParser();", "originalCommit": "56665cfca92707ed9a83333fa87e838632991a92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzMjA0MA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3955#discussion_r384832040", "bodyText": "make private method to et all headers", "author": "xschildw", "createdAt": "2020-02-26T23:36:08Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JiraClientImpl.java", "diffHunk": "@@ -3,73 +3,193 @@\n import java.net.URI;\n import java.util.concurrent.ExecutionException;\n \n-import io.atlassian.util.concurrent.Promise;\n import org.sagebionetworks.StackConfigurationSingleton;\n \n-import com.atlassian.jira.rest.client.api.IssueRestClient;\n-import com.atlassian.jira.rest.client.api.JiraRestClient;\n-import com.atlassian.jira.rest.client.api.MetadataRestClient;\n-import com.atlassian.jira.rest.client.api.ProjectRestClient;\n-import com.atlassian.jira.rest.client.api.domain.BasicIssue;\n-import com.atlassian.jira.rest.client.api.domain.Field;\n-import com.atlassian.jira.rest.client.api.domain.Project;\n-import com.atlassian.jira.rest.client.api.domain.input.IssueInput;\n-import com.atlassian.jira.rest.client.internal.async.AsynchronousJiraRestClientFactory;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpStatus;\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+import org.sagebionetworks.repo.model.UnauthorizedException;\n+import org.sagebionetworks.repo.web.NotFoundException;\n+import org.sagebionetworks.repo.web.ServiceUnavailableException;\n+import org.sagebionetworks.simpleHttpClient.*;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.UnsupportedEncodingException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n \n /**\n- * An implementation of JiraClient using the Jira-Rest-Java-Client\n- * \n- * @author brucehoff\n- *\n+ * Mini JIRA REST client\n  */\n public class JiraClientImpl implements JiraClient {\n \tprivate static final String JIRA_URL = \"https://sagebionetworks.jira.com\";\n \n-\tprivate JiraRestClient restClient;\n-\t\n-\tprivate static <T> T waitForPromise(Promise<T> promise) {\n-\t\ttry {\n-\t\t\twhile (!promise.isDone()) {\n-\t\t\t\tThread.sleep(100L);\n-\t\t\t}\n-\t\t\treturn promise.get();\n-\t\t} catch (InterruptedException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t} catch (ExecutionException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t}\n-\t}\n-\t\n+\tprivate final SimpleHttpClient httpClient;\n+\tprivate String USERNAME;\n+\tprivate String APIKEY;\n+\tprivate static final Integer TIME_OUT = 30 * 1000; // 30 seconds\n+\tprivate static final String JIRA_API_PROJECT_URL = \"/rest/api/3/project/\";\n+\tprivate static final String JIRA_API_FIELDS_URL = \"/rest/api/3/field/\";\n+\tprivate static final String JIRA_API_ISSUE_URL = \"/rest/api/3/issue/\";\n+\tprivate static final String USER_AGENT = \"Synapse\";\n+\tprivate static JSONParser parser;\n+\tprivate static final String JIRA_PROJECT_ISSUE_TYPES_KEY = \"issueTypes\";\n+\tprivate static final String JIRA_PROJECT_ID_KEY = \"id\";\n+\n \tpublic JiraClientImpl() {\n-    \tfinal AsynchronousJiraRestClientFactory factory = new AsynchronousJiraRestClientFactory();\n-    \tURI jiraServerUri = URI.create(JIRA_URL);\n-    \tthis.restClient = factory.createWithBasicHttpAuthentication(\n-    \t\t\tjiraServerUri, \n-    \t\t\tStackConfigurationSingleton.singleton().getJiraUserEmail(), \n-    \t\t\tStackConfigurationSingleton.singleton().getJiraUserApikey());\n+\t\tSimpleHttpClientConfig httpClientConfig = new SimpleHttpClientConfig();\n+\t\thttpClientConfig.setSocketTimeoutMs(TIME_OUT);\n+\t\thttpClient = new SimpleHttpClientImpl(httpClientConfig);\n+\n+\t\tUSERNAME = StackConfigurationSingleton.singleton().getJiraUserEmail();\n+\t\tAPIKEY = StackConfigurationSingleton.singleton().getJiraUserApikey();\n+\t\tparser = new JSONParser();\n \t}\n \n \t@Override\n-\tpublic Project getProject(String projectKey) {\n-\t\tProjectRestClient prc = restClient.getProjectClient();\n-\t\treturn waitForPromise(prc.getProject(projectKey));\n+\tpublic JSONObject getProjectInfo(String projectKey, String issueTypeName) {\n+\t\tSimpleHttpRequest req = createRequest(JIRA_API_PROJECT_URL, \"SG\", \"application/json\");\n+\t\tSimpleHttpResponse resp = null;\n+\t\ttry {\n+\t\t\tresp = httpClient.get(req);\n+\t\t} catch (IOException e) {\n+\t\t\tthrow new RuntimeException();\n+\t\t}\n+\t\thandleResponseStatus(resp.getStatusCode());\n+\t\tString json = null;\n+\t\tjson = resp.getContent();\n+\n+\t\tLong issueTypeId = -1L;\n+\t\tString projectId = null;\n+\t\ttry (Reader reader = new StringReader(json)) {\n+\t\t\tJSONObject pInfo = (JSONObject) parser.parse(reader);\n+\t\t\tJSONArray issueTypeNames = (JSONArray)pInfo.get(JIRA_PROJECT_ISSUE_TYPES_KEY);\n+\t\t\tIterator<JSONObject> it = issueTypeNames.iterator();\n+\t\t\twhile (it.hasNext()) {\n+\t\t\t\tJSONObject issueType = it.next();\n+\t\t\t\tString name = (String) issueType.get(\"name\");\n+\t\t\t\tif (issueTypeName.equalsIgnoreCase(name)) {\n+\t\t\t\t\tissueTypeId = Long.parseLong((String) issueType.get(\"id\"));\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (issueTypeId == -1L) {\n+\t\t\t\tthrow new IllegalStateException(String.format(\"Could not find the issue typeId for issue type {}\", issueTypeName));\n+\t\t\t}\n+\t\t\tprojectId = (String) pInfo.get(JIRA_PROJECT_ID_KEY);\n+\t\t}\n+\t\tcatch (IOException | ParseException e) {\n+\t\t\tthrow new RuntimeException(\"JIRA client: error processing JSON\");\n+\t\t}\n+\t\tJSONObject projInfo = new JSONObject();\n+\t\tprojInfo.put(\"issueTypeId\", issueTypeId);\n+\t\tprojInfo.put(\"id\", projectId);\n+\t\treturn projInfo;\n \t}\n \n \t@Override\n-\tpublic Iterable<Field> getFields() {\n-\t\t// NOTE:  In order to appear in this list a Jira 'custom field' \n-\t\t// must have a 'global context'.  If it applies just to selected\n-\t\t// projects it will not appear in this list.\n-    \tMetadataRestClient mrc = restClient.getMetadataClient();\n-    \treturn waitForPromise(mrc.getFields());\n+\tpublic Map<String,String> getFields() {\n+\t\tSimpleHttpRequest req = createRequest(JIRA_API_FIELDS_URL, null, \"application/json\");\n+\t\tSimpleHttpResponse resp = null;\n+\t\ttry {\n+\t\t\tresp = httpClient.get(req);\n+\t\t} catch (IOException e) {\n+\t\t\tthrow new RuntimeException();\n+\t\t}\n+\t\thandleResponseStatus(resp.getStatusCode());\n+\t\tString json = null;\n+\t\tjson = resp.getContent();\n+\n+\t\tJSONArray fields = null;\n+\t\tMap<String, String> fieldsMap = new HashMap<>();\n+\t\ttry (Reader reader = new StringReader(json)) {\n+\t\t\tfields = (JSONArray) parser.parse(reader);\n+\t\t\tIterator<JSONObject> it = fields.iterator();\n+\t\t\twhile (it.hasNext()) {\n+\t\t\t\tJSONObject fieldDetail = it.next();\n+\t\t\t\tString fieldName = (String) fieldDetail.get(\"name\");\n+\t\t\t\tString fieldId = (String) fieldDetail.get(\"id\");\n+\t\t\t\tfieldsMap.put(fieldName, fieldId);\n+\t\t\t}\n+\t\t}\n+\t\tcatch (IOException | ParseException e) {\n+\t\t\tthrow new RuntimeException((\"JIRA client: error processing JSON\\n\"));\n+\t\t}\n+\t\treturn fieldsMap;\n \t}\n \n \t@Override\n-\tpublic BasicIssue createIssue(IssueInput issueInput) {\n-        IssueRestClient irc = restClient.getIssueClient();\n-        Promise<BasicIssue> basicIssuePromise = irc.createIssue(issueInput);\n-        return waitForPromise(basicIssuePromise);\n+\tpublic JSONObject createIssue(JSONObject issue) {\n+\t\tSimpleHttpRequest req = createRequest(JIRA_API_ISSUE_URL, null, \"application/json\");\n+\t\tSimpleHttpResponse resp = null;\n+\t\ttry {\n+\t\t\tresp = httpClient.post(req, issue.toJSONString());\n+\t\t} catch (IOException e) {\n+\t\t\tthrow new RuntimeException();\n+\t\t}\n+\t\thandleResponseStatus(resp.getStatusCode());\n+\n+\t\tString json = null;\n+\t\tjson = resp.getContent();\n+\n+\t\tJSONObject createdIssue = null;\n+\t\ttry (Reader reader = new StringReader(json)) {\n+\t\t\tcreatedIssue = (JSONObject) parser.parse(reader);\n+\t\t}\n+\t\tcatch (IOException | ParseException e) {\n+\t\t\tthrow new RuntimeException(\"JIRA client: error processing JSON\\n\");\n+\t\t}\n+\t\treturn createdIssue;\n \t}\n \n+\tSimpleHttpRequest createRequest(String path, String resource, String contentType) {\n+\t\tif (! (path.startsWith(\"/\") && path.endsWith(\"/\"))) {\n+\t\t\tthrow new IllegalArgumentException(\"Path needs to begin and end with '/'\");\n+\t\t}\n+\n+\t\tSimpleHttpRequest request = new SimpleHttpRequest();\n+\t\tif (resource == null) {\n+\t\t\trequest.setUri(JIRA_URL + path);\n+\t\t} else {\n+\t\t\trequest.setUri(JIRA_URL + path + resource);\n+\t\t}\n+\t\tMap<String, String> headers = new HashMap<>();\n+\t\ttry {\n+\t\t\theaders.put(HttpHeaders.AUTHORIZATION, \"Basic \" + Base64.getEncoder().encodeToString((USERNAME + \":\" + APIKEY).getBytes(\"utf-8\")));", "originalCommit": "56665cfca92707ed9a83333fa87e838632991a92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzMjQ0Mg==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3955#discussion_r384832442", "bodyText": "Always set content type to app/json. Check if constant exists somewhere.", "author": "xschildw", "createdAt": "2020-02-26T23:37:18Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JiraClientImpl.java", "diffHunk": "@@ -3,73 +3,193 @@\n import java.net.URI;\n import java.util.concurrent.ExecutionException;\n \n-import io.atlassian.util.concurrent.Promise;\n import org.sagebionetworks.StackConfigurationSingleton;\n \n-import com.atlassian.jira.rest.client.api.IssueRestClient;\n-import com.atlassian.jira.rest.client.api.JiraRestClient;\n-import com.atlassian.jira.rest.client.api.MetadataRestClient;\n-import com.atlassian.jira.rest.client.api.ProjectRestClient;\n-import com.atlassian.jira.rest.client.api.domain.BasicIssue;\n-import com.atlassian.jira.rest.client.api.domain.Field;\n-import com.atlassian.jira.rest.client.api.domain.Project;\n-import com.atlassian.jira.rest.client.api.domain.input.IssueInput;\n-import com.atlassian.jira.rest.client.internal.async.AsynchronousJiraRestClientFactory;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpStatus;\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+import org.sagebionetworks.repo.model.UnauthorizedException;\n+import org.sagebionetworks.repo.web.NotFoundException;\n+import org.sagebionetworks.repo.web.ServiceUnavailableException;\n+import org.sagebionetworks.simpleHttpClient.*;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.UnsupportedEncodingException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n \n /**\n- * An implementation of JiraClient using the Jira-Rest-Java-Client\n- * \n- * @author brucehoff\n- *\n+ * Mini JIRA REST client\n  */\n public class JiraClientImpl implements JiraClient {\n \tprivate static final String JIRA_URL = \"https://sagebionetworks.jira.com\";\n \n-\tprivate JiraRestClient restClient;\n-\t\n-\tprivate static <T> T waitForPromise(Promise<T> promise) {\n-\t\ttry {\n-\t\t\twhile (!promise.isDone()) {\n-\t\t\t\tThread.sleep(100L);\n-\t\t\t}\n-\t\t\treturn promise.get();\n-\t\t} catch (InterruptedException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t} catch (ExecutionException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t}\n-\t}\n-\t\n+\tprivate final SimpleHttpClient httpClient;\n+\tprivate String USERNAME;\n+\tprivate String APIKEY;\n+\tprivate static final Integer TIME_OUT = 30 * 1000; // 30 seconds\n+\tprivate static final String JIRA_API_PROJECT_URL = \"/rest/api/3/project/\";\n+\tprivate static final String JIRA_API_FIELDS_URL = \"/rest/api/3/field/\";\n+\tprivate static final String JIRA_API_ISSUE_URL = \"/rest/api/3/issue/\";\n+\tprivate static final String USER_AGENT = \"Synapse\";\n+\tprivate static JSONParser parser;\n+\tprivate static final String JIRA_PROJECT_ISSUE_TYPES_KEY = \"issueTypes\";\n+\tprivate static final String JIRA_PROJECT_ID_KEY = \"id\";\n+\n \tpublic JiraClientImpl() {\n-    \tfinal AsynchronousJiraRestClientFactory factory = new AsynchronousJiraRestClientFactory();\n-    \tURI jiraServerUri = URI.create(JIRA_URL);\n-    \tthis.restClient = factory.createWithBasicHttpAuthentication(\n-    \t\t\tjiraServerUri, \n-    \t\t\tStackConfigurationSingleton.singleton().getJiraUserEmail(), \n-    \t\t\tStackConfigurationSingleton.singleton().getJiraUserApikey());\n+\t\tSimpleHttpClientConfig httpClientConfig = new SimpleHttpClientConfig();\n+\t\thttpClientConfig.setSocketTimeoutMs(TIME_OUT);\n+\t\thttpClient = new SimpleHttpClientImpl(httpClientConfig);\n+\n+\t\tUSERNAME = StackConfigurationSingleton.singleton().getJiraUserEmail();\n+\t\tAPIKEY = StackConfigurationSingleton.singleton().getJiraUserApikey();\n+\t\tparser = new JSONParser();\n \t}\n \n \t@Override\n-\tpublic Project getProject(String projectKey) {\n-\t\tProjectRestClient prc = restClient.getProjectClient();\n-\t\treturn waitForPromise(prc.getProject(projectKey));\n+\tpublic JSONObject getProjectInfo(String projectKey, String issueTypeName) {\n+\t\tSimpleHttpRequest req = createRequest(JIRA_API_PROJECT_URL, \"SG\", \"application/json\");\n+\t\tSimpleHttpResponse resp = null;\n+\t\ttry {\n+\t\t\tresp = httpClient.get(req);\n+\t\t} catch (IOException e) {\n+\t\t\tthrow new RuntimeException();\n+\t\t}\n+\t\thandleResponseStatus(resp.getStatusCode());\n+\t\tString json = null;\n+\t\tjson = resp.getContent();\n+\n+\t\tLong issueTypeId = -1L;\n+\t\tString projectId = null;\n+\t\ttry (Reader reader = new StringReader(json)) {\n+\t\t\tJSONObject pInfo = (JSONObject) parser.parse(reader);\n+\t\t\tJSONArray issueTypeNames = (JSONArray)pInfo.get(JIRA_PROJECT_ISSUE_TYPES_KEY);\n+\t\t\tIterator<JSONObject> it = issueTypeNames.iterator();\n+\t\t\twhile (it.hasNext()) {\n+\t\t\t\tJSONObject issueType = it.next();\n+\t\t\t\tString name = (String) issueType.get(\"name\");\n+\t\t\t\tif (issueTypeName.equalsIgnoreCase(name)) {\n+\t\t\t\t\tissueTypeId = Long.parseLong((String) issueType.get(\"id\"));\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (issueTypeId == -1L) {\n+\t\t\t\tthrow new IllegalStateException(String.format(\"Could not find the issue typeId for issue type {}\", issueTypeName));\n+\t\t\t}\n+\t\t\tprojectId = (String) pInfo.get(JIRA_PROJECT_ID_KEY);\n+\t\t}\n+\t\tcatch (IOException | ParseException e) {\n+\t\t\tthrow new RuntimeException(\"JIRA client: error processing JSON\");\n+\t\t}\n+\t\tJSONObject projInfo = new JSONObject();\n+\t\tprojInfo.put(\"issueTypeId\", issueTypeId);\n+\t\tprojInfo.put(\"id\", projectId);\n+\t\treturn projInfo;\n \t}\n \n \t@Override\n-\tpublic Iterable<Field> getFields() {\n-\t\t// NOTE:  In order to appear in this list a Jira 'custom field' \n-\t\t// must have a 'global context'.  If it applies just to selected\n-\t\t// projects it will not appear in this list.\n-    \tMetadataRestClient mrc = restClient.getMetadataClient();\n-    \treturn waitForPromise(mrc.getFields());\n+\tpublic Map<String,String> getFields() {\n+\t\tSimpleHttpRequest req = createRequest(JIRA_API_FIELDS_URL, null, \"application/json\");\n+\t\tSimpleHttpResponse resp = null;\n+\t\ttry {\n+\t\t\tresp = httpClient.get(req);\n+\t\t} catch (IOException e) {\n+\t\t\tthrow new RuntimeException();\n+\t\t}\n+\t\thandleResponseStatus(resp.getStatusCode());\n+\t\tString json = null;\n+\t\tjson = resp.getContent();\n+\n+\t\tJSONArray fields = null;\n+\t\tMap<String, String> fieldsMap = new HashMap<>();\n+\t\ttry (Reader reader = new StringReader(json)) {\n+\t\t\tfields = (JSONArray) parser.parse(reader);\n+\t\t\tIterator<JSONObject> it = fields.iterator();\n+\t\t\twhile (it.hasNext()) {\n+\t\t\t\tJSONObject fieldDetail = it.next();\n+\t\t\t\tString fieldName = (String) fieldDetail.get(\"name\");\n+\t\t\t\tString fieldId = (String) fieldDetail.get(\"id\");\n+\t\t\t\tfieldsMap.put(fieldName, fieldId);\n+\t\t\t}\n+\t\t}\n+\t\tcatch (IOException | ParseException e) {\n+\t\t\tthrow new RuntimeException((\"JIRA client: error processing JSON\\n\"));\n+\t\t}\n+\t\treturn fieldsMap;\n \t}\n \n \t@Override\n-\tpublic BasicIssue createIssue(IssueInput issueInput) {\n-        IssueRestClient irc = restClient.getIssueClient();\n-        Promise<BasicIssue> basicIssuePromise = irc.createIssue(issueInput);\n-        return waitForPromise(basicIssuePromise);\n+\tpublic JSONObject createIssue(JSONObject issue) {\n+\t\tSimpleHttpRequest req = createRequest(JIRA_API_ISSUE_URL, null, \"application/json\");\n+\t\tSimpleHttpResponse resp = null;\n+\t\ttry {\n+\t\t\tresp = httpClient.post(req, issue.toJSONString());\n+\t\t} catch (IOException e) {\n+\t\t\tthrow new RuntimeException();\n+\t\t}\n+\t\thandleResponseStatus(resp.getStatusCode());\n+\n+\t\tString json = null;\n+\t\tjson = resp.getContent();\n+\n+\t\tJSONObject createdIssue = null;\n+\t\ttry (Reader reader = new StringReader(json)) {\n+\t\t\tcreatedIssue = (JSONObject) parser.parse(reader);\n+\t\t}\n+\t\tcatch (IOException | ParseException e) {\n+\t\t\tthrow new RuntimeException(\"JIRA client: error processing JSON\\n\");\n+\t\t}\n+\t\treturn createdIssue;\n \t}\n \n+\tSimpleHttpRequest createRequest(String path, String resource, String contentType) {\n+\t\tif (! (path.startsWith(\"/\") && path.endsWith(\"/\"))) {\n+\t\t\tthrow new IllegalArgumentException(\"Path needs to begin and end with '/'\");\n+\t\t}\n+\n+\t\tSimpleHttpRequest request = new SimpleHttpRequest();\n+\t\tif (resource == null) {\n+\t\t\trequest.setUri(JIRA_URL + path);\n+\t\t} else {\n+\t\t\trequest.setUri(JIRA_URL + path + resource);\n+\t\t}\n+\t\tMap<String, String> headers = new HashMap<>();\n+\t\ttry {\n+\t\t\theaders.put(HttpHeaders.AUTHORIZATION, \"Basic \" + Base64.getEncoder().encodeToString((USERNAME + \":\" + APIKEY).getBytes(\"utf-8\")));\n+\t\t} catch (UnsupportedEncodingException e) {\n+\t\t\tthrow new RuntimeException(\"Error encoding credentials\");\n+\t\t}\n+\t\tif (contentType != null) {", "originalCommit": "56665cfca92707ed9a83333fa87e838632991a92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzMzc0NQ==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3955#discussion_r384833745", "bodyText": "Create a dedicated Exception resulting in Bad Gateway.\nAlso surface the msg.", "author": "xschildw", "createdAt": "2020-02-26T23:40:59Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JiraClientImpl.java", "diffHunk": "@@ -3,73 +3,193 @@\n import java.net.URI;\n import java.util.concurrent.ExecutionException;\n \n-import io.atlassian.util.concurrent.Promise;\n import org.sagebionetworks.StackConfigurationSingleton;\n \n-import com.atlassian.jira.rest.client.api.IssueRestClient;\n-import com.atlassian.jira.rest.client.api.JiraRestClient;\n-import com.atlassian.jira.rest.client.api.MetadataRestClient;\n-import com.atlassian.jira.rest.client.api.ProjectRestClient;\n-import com.atlassian.jira.rest.client.api.domain.BasicIssue;\n-import com.atlassian.jira.rest.client.api.domain.Field;\n-import com.atlassian.jira.rest.client.api.domain.Project;\n-import com.atlassian.jira.rest.client.api.domain.input.IssueInput;\n-import com.atlassian.jira.rest.client.internal.async.AsynchronousJiraRestClientFactory;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpStatus;\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+import org.sagebionetworks.repo.model.UnauthorizedException;\n+import org.sagebionetworks.repo.web.NotFoundException;\n+import org.sagebionetworks.repo.web.ServiceUnavailableException;\n+import org.sagebionetworks.simpleHttpClient.*;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.UnsupportedEncodingException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n \n /**\n- * An implementation of JiraClient using the Jira-Rest-Java-Client\n- * \n- * @author brucehoff\n- *\n+ * Mini JIRA REST client\n  */\n public class JiraClientImpl implements JiraClient {\n \tprivate static final String JIRA_URL = \"https://sagebionetworks.jira.com\";\n \n-\tprivate JiraRestClient restClient;\n-\t\n-\tprivate static <T> T waitForPromise(Promise<T> promise) {\n-\t\ttry {\n-\t\t\twhile (!promise.isDone()) {\n-\t\t\t\tThread.sleep(100L);\n-\t\t\t}\n-\t\t\treturn promise.get();\n-\t\t} catch (InterruptedException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t} catch (ExecutionException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t}\n-\t}\n-\t\n+\tprivate final SimpleHttpClient httpClient;\n+\tprivate String USERNAME;\n+\tprivate String APIKEY;\n+\tprivate static final Integer TIME_OUT = 30 * 1000; // 30 seconds\n+\tprivate static final String JIRA_API_PROJECT_URL = \"/rest/api/3/project/\";\n+\tprivate static final String JIRA_API_FIELDS_URL = \"/rest/api/3/field/\";\n+\tprivate static final String JIRA_API_ISSUE_URL = \"/rest/api/3/issue/\";\n+\tprivate static final String USER_AGENT = \"Synapse\";\n+\tprivate static JSONParser parser;\n+\tprivate static final String JIRA_PROJECT_ISSUE_TYPES_KEY = \"issueTypes\";\n+\tprivate static final String JIRA_PROJECT_ID_KEY = \"id\";\n+\n \tpublic JiraClientImpl() {\n-    \tfinal AsynchronousJiraRestClientFactory factory = new AsynchronousJiraRestClientFactory();\n-    \tURI jiraServerUri = URI.create(JIRA_URL);\n-    \tthis.restClient = factory.createWithBasicHttpAuthentication(\n-    \t\t\tjiraServerUri, \n-    \t\t\tStackConfigurationSingleton.singleton().getJiraUserEmail(), \n-    \t\t\tStackConfigurationSingleton.singleton().getJiraUserApikey());\n+\t\tSimpleHttpClientConfig httpClientConfig = new SimpleHttpClientConfig();\n+\t\thttpClientConfig.setSocketTimeoutMs(TIME_OUT);\n+\t\thttpClient = new SimpleHttpClientImpl(httpClientConfig);\n+\n+\t\tUSERNAME = StackConfigurationSingleton.singleton().getJiraUserEmail();\n+\t\tAPIKEY = StackConfigurationSingleton.singleton().getJiraUserApikey();\n+\t\tparser = new JSONParser();\n \t}\n \n \t@Override\n-\tpublic Project getProject(String projectKey) {\n-\t\tProjectRestClient prc = restClient.getProjectClient();\n-\t\treturn waitForPromise(prc.getProject(projectKey));\n+\tpublic JSONObject getProjectInfo(String projectKey, String issueTypeName) {\n+\t\tSimpleHttpRequest req = createRequest(JIRA_API_PROJECT_URL, \"SG\", \"application/json\");\n+\t\tSimpleHttpResponse resp = null;\n+\t\ttry {\n+\t\t\tresp = httpClient.get(req);\n+\t\t} catch (IOException e) {\n+\t\t\tthrow new RuntimeException();\n+\t\t}\n+\t\thandleResponseStatus(resp.getStatusCode());\n+\t\tString json = null;\n+\t\tjson = resp.getContent();\n+\n+\t\tLong issueTypeId = -1L;\n+\t\tString projectId = null;\n+\t\ttry (Reader reader = new StringReader(json)) {\n+\t\t\tJSONObject pInfo = (JSONObject) parser.parse(reader);\n+\t\t\tJSONArray issueTypeNames = (JSONArray)pInfo.get(JIRA_PROJECT_ISSUE_TYPES_KEY);\n+\t\t\tIterator<JSONObject> it = issueTypeNames.iterator();\n+\t\t\twhile (it.hasNext()) {\n+\t\t\t\tJSONObject issueType = it.next();\n+\t\t\t\tString name = (String) issueType.get(\"name\");\n+\t\t\t\tif (issueTypeName.equalsIgnoreCase(name)) {\n+\t\t\t\t\tissueTypeId = Long.parseLong((String) issueType.get(\"id\"));\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (issueTypeId == -1L) {\n+\t\t\t\tthrow new IllegalStateException(String.format(\"Could not find the issue typeId for issue type {}\", issueTypeName));\n+\t\t\t}\n+\t\t\tprojectId = (String) pInfo.get(JIRA_PROJECT_ID_KEY);\n+\t\t}\n+\t\tcatch (IOException | ParseException e) {\n+\t\t\tthrow new RuntimeException(\"JIRA client: error processing JSON\");\n+\t\t}\n+\t\tJSONObject projInfo = new JSONObject();\n+\t\tprojInfo.put(\"issueTypeId\", issueTypeId);\n+\t\tprojInfo.put(\"id\", projectId);\n+\t\treturn projInfo;\n \t}\n \n \t@Override\n-\tpublic Iterable<Field> getFields() {\n-\t\t// NOTE:  In order to appear in this list a Jira 'custom field' \n-\t\t// must have a 'global context'.  If it applies just to selected\n-\t\t// projects it will not appear in this list.\n-    \tMetadataRestClient mrc = restClient.getMetadataClient();\n-    \treturn waitForPromise(mrc.getFields());\n+\tpublic Map<String,String> getFields() {\n+\t\tSimpleHttpRequest req = createRequest(JIRA_API_FIELDS_URL, null, \"application/json\");\n+\t\tSimpleHttpResponse resp = null;\n+\t\ttry {\n+\t\t\tresp = httpClient.get(req);\n+\t\t} catch (IOException e) {\n+\t\t\tthrow new RuntimeException();\n+\t\t}\n+\t\thandleResponseStatus(resp.getStatusCode());\n+\t\tString json = null;\n+\t\tjson = resp.getContent();\n+\n+\t\tJSONArray fields = null;\n+\t\tMap<String, String> fieldsMap = new HashMap<>();\n+\t\ttry (Reader reader = new StringReader(json)) {\n+\t\t\tfields = (JSONArray) parser.parse(reader);\n+\t\t\tIterator<JSONObject> it = fields.iterator();\n+\t\t\twhile (it.hasNext()) {\n+\t\t\t\tJSONObject fieldDetail = it.next();\n+\t\t\t\tString fieldName = (String) fieldDetail.get(\"name\");\n+\t\t\t\tString fieldId = (String) fieldDetail.get(\"id\");\n+\t\t\t\tfieldsMap.put(fieldName, fieldId);\n+\t\t\t}\n+\t\t}\n+\t\tcatch (IOException | ParseException e) {\n+\t\t\tthrow new RuntimeException((\"JIRA client: error processing JSON\\n\"));\n+\t\t}\n+\t\treturn fieldsMap;\n \t}\n \n \t@Override\n-\tpublic BasicIssue createIssue(IssueInput issueInput) {\n-        IssueRestClient irc = restClient.getIssueClient();\n-        Promise<BasicIssue> basicIssuePromise = irc.createIssue(issueInput);\n-        return waitForPromise(basicIssuePromise);\n+\tpublic JSONObject createIssue(JSONObject issue) {\n+\t\tSimpleHttpRequest req = createRequest(JIRA_API_ISSUE_URL, null, \"application/json\");\n+\t\tSimpleHttpResponse resp = null;\n+\t\ttry {\n+\t\t\tresp = httpClient.post(req, issue.toJSONString());\n+\t\t} catch (IOException e) {\n+\t\t\tthrow new RuntimeException();\n+\t\t}\n+\t\thandleResponseStatus(resp.getStatusCode());\n+\n+\t\tString json = null;\n+\t\tjson = resp.getContent();\n+\n+\t\tJSONObject createdIssue = null;\n+\t\ttry (Reader reader = new StringReader(json)) {\n+\t\t\tcreatedIssue = (JSONObject) parser.parse(reader);\n+\t\t}\n+\t\tcatch (IOException | ParseException e) {\n+\t\t\tthrow new RuntimeException(\"JIRA client: error processing JSON\\n\");\n+\t\t}\n+\t\treturn createdIssue;\n \t}\n \n+\tSimpleHttpRequest createRequest(String path, String resource, String contentType) {\n+\t\tif (! (path.startsWith(\"/\") && path.endsWith(\"/\"))) {\n+\t\t\tthrow new IllegalArgumentException(\"Path needs to begin and end with '/'\");\n+\t\t}\n+\n+\t\tSimpleHttpRequest request = new SimpleHttpRequest();\n+\t\tif (resource == null) {\n+\t\t\trequest.setUri(JIRA_URL + path);\n+\t\t} else {\n+\t\t\trequest.setUri(JIRA_URL + path + resource);\n+\t\t}\n+\t\tMap<String, String> headers = new HashMap<>();\n+\t\ttry {\n+\t\t\theaders.put(HttpHeaders.AUTHORIZATION, \"Basic \" + Base64.getEncoder().encodeToString((USERNAME + \":\" + APIKEY).getBytes(\"utf-8\")));\n+\t\t} catch (UnsupportedEncodingException e) {\n+\t\t\tthrow new RuntimeException(\"Error encoding credentials\");\n+\t\t}\n+\t\tif (contentType != null) {\n+\t\t\theaders.put(HttpHeaders.CONTENT_TYPE, contentType);\n+\t\t}\n+\t\theaders.put(HttpHeaders.USER_AGENT, USER_AGENT);\n+\t\trequest.setHeaders(headers);\n \n+\t\treturn request;\n+\t}\n+\n+\tstatic void handleResponseStatus(int status) {", "originalCommit": "56665cfca92707ed9a83333fa87e838632991a92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzODIyMA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3955#discussion_r384838220", "bodyText": "parse() takes string so no need for reader", "author": "xschildw", "createdAt": "2020-02-26T23:54:59Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JiraClientImpl.java", "diffHunk": "@@ -3,73 +3,193 @@\n import java.net.URI;\n import java.util.concurrent.ExecutionException;\n \n-import io.atlassian.util.concurrent.Promise;\n import org.sagebionetworks.StackConfigurationSingleton;\n \n-import com.atlassian.jira.rest.client.api.IssueRestClient;\n-import com.atlassian.jira.rest.client.api.JiraRestClient;\n-import com.atlassian.jira.rest.client.api.MetadataRestClient;\n-import com.atlassian.jira.rest.client.api.ProjectRestClient;\n-import com.atlassian.jira.rest.client.api.domain.BasicIssue;\n-import com.atlassian.jira.rest.client.api.domain.Field;\n-import com.atlassian.jira.rest.client.api.domain.Project;\n-import com.atlassian.jira.rest.client.api.domain.input.IssueInput;\n-import com.atlassian.jira.rest.client.internal.async.AsynchronousJiraRestClientFactory;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpStatus;\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+import org.sagebionetworks.repo.model.UnauthorizedException;\n+import org.sagebionetworks.repo.web.NotFoundException;\n+import org.sagebionetworks.repo.web.ServiceUnavailableException;\n+import org.sagebionetworks.simpleHttpClient.*;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.UnsupportedEncodingException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n \n /**\n- * An implementation of JiraClient using the Jira-Rest-Java-Client\n- * \n- * @author brucehoff\n- *\n+ * Mini JIRA REST client\n  */\n public class JiraClientImpl implements JiraClient {\n \tprivate static final String JIRA_URL = \"https://sagebionetworks.jira.com\";\n \n-\tprivate JiraRestClient restClient;\n-\t\n-\tprivate static <T> T waitForPromise(Promise<T> promise) {\n-\t\ttry {\n-\t\t\twhile (!promise.isDone()) {\n-\t\t\t\tThread.sleep(100L);\n-\t\t\t}\n-\t\t\treturn promise.get();\n-\t\t} catch (InterruptedException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t} catch (ExecutionException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t}\n-\t}\n-\t\n+\tprivate final SimpleHttpClient httpClient;\n+\tprivate String USERNAME;\n+\tprivate String APIKEY;\n+\tprivate static final Integer TIME_OUT = 30 * 1000; // 30 seconds\n+\tprivate static final String JIRA_API_PROJECT_URL = \"/rest/api/3/project/\";\n+\tprivate static final String JIRA_API_FIELDS_URL = \"/rest/api/3/field/\";\n+\tprivate static final String JIRA_API_ISSUE_URL = \"/rest/api/3/issue/\";\n+\tprivate static final String USER_AGENT = \"Synapse\";\n+\tprivate static JSONParser parser;\n+\tprivate static final String JIRA_PROJECT_ISSUE_TYPES_KEY = \"issueTypes\";\n+\tprivate static final String JIRA_PROJECT_ID_KEY = \"id\";\n+\n \tpublic JiraClientImpl() {\n-    \tfinal AsynchronousJiraRestClientFactory factory = new AsynchronousJiraRestClientFactory();\n-    \tURI jiraServerUri = URI.create(JIRA_URL);\n-    \tthis.restClient = factory.createWithBasicHttpAuthentication(\n-    \t\t\tjiraServerUri, \n-    \t\t\tStackConfigurationSingleton.singleton().getJiraUserEmail(), \n-    \t\t\tStackConfigurationSingleton.singleton().getJiraUserApikey());\n+\t\tSimpleHttpClientConfig httpClientConfig = new SimpleHttpClientConfig();\n+\t\thttpClientConfig.setSocketTimeoutMs(TIME_OUT);\n+\t\thttpClient = new SimpleHttpClientImpl(httpClientConfig);\n+\n+\t\tUSERNAME = StackConfigurationSingleton.singleton().getJiraUserEmail();\n+\t\tAPIKEY = StackConfigurationSingleton.singleton().getJiraUserApikey();\n+\t\tparser = new JSONParser();\n \t}\n \n \t@Override\n-\tpublic Project getProject(String projectKey) {\n-\t\tProjectRestClient prc = restClient.getProjectClient();\n-\t\treturn waitForPromise(prc.getProject(projectKey));\n+\tpublic JSONObject getProjectInfo(String projectKey, String issueTypeName) {\n+\t\tSimpleHttpRequest req = createRequest(JIRA_API_PROJECT_URL, \"SG\", \"application/json\");\n+\t\tSimpleHttpResponse resp = null;\n+\t\ttry {\n+\t\t\tresp = httpClient.get(req);\n+\t\t} catch (IOException e) {\n+\t\t\tthrow new RuntimeException();\n+\t\t}\n+\t\thandleResponseStatus(resp.getStatusCode());\n+\t\tString json = null;\n+\t\tjson = resp.getContent();\n+\n+\t\tLong issueTypeId = -1L;\n+\t\tString projectId = null;\n+\t\ttry (Reader reader = new StringReader(json)) {\n+\t\t\tJSONObject pInfo = (JSONObject) parser.parse(reader);", "originalCommit": "56665cfca92707ed9a83333fa87e838632991a92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzODY0Mw==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3955#discussion_r384838643", "bodyText": "IllegalState", "author": "xschildw", "createdAt": "2020-02-26T23:56:21Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JiraClientImpl.java", "diffHunk": "@@ -3,73 +3,193 @@\n import java.net.URI;\n import java.util.concurrent.ExecutionException;\n \n-import io.atlassian.util.concurrent.Promise;\n import org.sagebionetworks.StackConfigurationSingleton;\n \n-import com.atlassian.jira.rest.client.api.IssueRestClient;\n-import com.atlassian.jira.rest.client.api.JiraRestClient;\n-import com.atlassian.jira.rest.client.api.MetadataRestClient;\n-import com.atlassian.jira.rest.client.api.ProjectRestClient;\n-import com.atlassian.jira.rest.client.api.domain.BasicIssue;\n-import com.atlassian.jira.rest.client.api.domain.Field;\n-import com.atlassian.jira.rest.client.api.domain.Project;\n-import com.atlassian.jira.rest.client.api.domain.input.IssueInput;\n-import com.atlassian.jira.rest.client.internal.async.AsynchronousJiraRestClientFactory;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpStatus;\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+import org.sagebionetworks.repo.model.UnauthorizedException;\n+import org.sagebionetworks.repo.web.NotFoundException;\n+import org.sagebionetworks.repo.web.ServiceUnavailableException;\n+import org.sagebionetworks.simpleHttpClient.*;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.UnsupportedEncodingException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n \n /**\n- * An implementation of JiraClient using the Jira-Rest-Java-Client\n- * \n- * @author brucehoff\n- *\n+ * Mini JIRA REST client\n  */\n public class JiraClientImpl implements JiraClient {\n \tprivate static final String JIRA_URL = \"https://sagebionetworks.jira.com\";\n \n-\tprivate JiraRestClient restClient;\n-\t\n-\tprivate static <T> T waitForPromise(Promise<T> promise) {\n-\t\ttry {\n-\t\t\twhile (!promise.isDone()) {\n-\t\t\t\tThread.sleep(100L);\n-\t\t\t}\n-\t\t\treturn promise.get();\n-\t\t} catch (InterruptedException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t} catch (ExecutionException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t}\n-\t}\n-\t\n+\tprivate final SimpleHttpClient httpClient;\n+\tprivate String USERNAME;\n+\tprivate String APIKEY;\n+\tprivate static final Integer TIME_OUT = 30 * 1000; // 30 seconds\n+\tprivate static final String JIRA_API_PROJECT_URL = \"/rest/api/3/project/\";\n+\tprivate static final String JIRA_API_FIELDS_URL = \"/rest/api/3/field/\";\n+\tprivate static final String JIRA_API_ISSUE_URL = \"/rest/api/3/issue/\";\n+\tprivate static final String USER_AGENT = \"Synapse\";\n+\tprivate static JSONParser parser;\n+\tprivate static final String JIRA_PROJECT_ISSUE_TYPES_KEY = \"issueTypes\";\n+\tprivate static final String JIRA_PROJECT_ID_KEY = \"id\";\n+\n \tpublic JiraClientImpl() {\n-    \tfinal AsynchronousJiraRestClientFactory factory = new AsynchronousJiraRestClientFactory();\n-    \tURI jiraServerUri = URI.create(JIRA_URL);\n-    \tthis.restClient = factory.createWithBasicHttpAuthentication(\n-    \t\t\tjiraServerUri, \n-    \t\t\tStackConfigurationSingleton.singleton().getJiraUserEmail(), \n-    \t\t\tStackConfigurationSingleton.singleton().getJiraUserApikey());\n+\t\tSimpleHttpClientConfig httpClientConfig = new SimpleHttpClientConfig();\n+\t\thttpClientConfig.setSocketTimeoutMs(TIME_OUT);\n+\t\thttpClient = new SimpleHttpClientImpl(httpClientConfig);\n+\n+\t\tUSERNAME = StackConfigurationSingleton.singleton().getJiraUserEmail();\n+\t\tAPIKEY = StackConfigurationSingleton.singleton().getJiraUserApikey();\n+\t\tparser = new JSONParser();\n \t}\n \n \t@Override\n-\tpublic Project getProject(String projectKey) {\n-\t\tProjectRestClient prc = restClient.getProjectClient();\n-\t\treturn waitForPromise(prc.getProject(projectKey));\n+\tpublic JSONObject getProjectInfo(String projectKey, String issueTypeName) {\n+\t\tSimpleHttpRequest req = createRequest(JIRA_API_PROJECT_URL, \"SG\", \"application/json\");\n+\t\tSimpleHttpResponse resp = null;\n+\t\ttry {\n+\t\t\tresp = httpClient.get(req);\n+\t\t} catch (IOException e) {\n+\t\t\tthrow new RuntimeException();\n+\t\t}\n+\t\thandleResponseStatus(resp.getStatusCode());\n+\t\tString json = null;\n+\t\tjson = resp.getContent();\n+\n+\t\tLong issueTypeId = -1L;\n+\t\tString projectId = null;\n+\t\ttry (Reader reader = new StringReader(json)) {\n+\t\t\tJSONObject pInfo = (JSONObject) parser.parse(reader);\n+\t\t\tJSONArray issueTypeNames = (JSONArray)pInfo.get(JIRA_PROJECT_ISSUE_TYPES_KEY);\n+\t\t\tIterator<JSONObject> it = issueTypeNames.iterator();\n+\t\t\twhile (it.hasNext()) {\n+\t\t\t\tJSONObject issueType = it.next();\n+\t\t\t\tString name = (String) issueType.get(\"name\");\n+\t\t\t\tif (issueTypeName.equalsIgnoreCase(name)) {\n+\t\t\t\t\tissueTypeId = Long.parseLong((String) issueType.get(\"id\"));\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (issueTypeId == -1L) {\n+\t\t\t\tthrow new IllegalStateException(String.format(\"Could not find the issue typeId for issue type {}\", issueTypeName));\n+\t\t\t}\n+\t\t\tprojectId = (String) pInfo.get(JIRA_PROJECT_ID_KEY);\n+\t\t}\n+\t\tcatch (IOException | ParseException e) {\n+\t\t\tthrow new RuntimeException(\"JIRA client: error processing JSON\");", "originalCommit": "56665cfca92707ed9a83333fa87e838632991a92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzODgxNw==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3955#discussion_r384838817", "bodyText": "Handle null case", "author": "xschildw", "createdAt": "2020-02-26T23:56:55Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JiraClientImpl.java", "diffHunk": "@@ -3,73 +3,193 @@\n import java.net.URI;\n import java.util.concurrent.ExecutionException;\n \n-import io.atlassian.util.concurrent.Promise;\n import org.sagebionetworks.StackConfigurationSingleton;\n \n-import com.atlassian.jira.rest.client.api.IssueRestClient;\n-import com.atlassian.jira.rest.client.api.JiraRestClient;\n-import com.atlassian.jira.rest.client.api.MetadataRestClient;\n-import com.atlassian.jira.rest.client.api.ProjectRestClient;\n-import com.atlassian.jira.rest.client.api.domain.BasicIssue;\n-import com.atlassian.jira.rest.client.api.domain.Field;\n-import com.atlassian.jira.rest.client.api.domain.Project;\n-import com.atlassian.jira.rest.client.api.domain.input.IssueInput;\n-import com.atlassian.jira.rest.client.internal.async.AsynchronousJiraRestClientFactory;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpStatus;\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+import org.sagebionetworks.repo.model.UnauthorizedException;\n+import org.sagebionetworks.repo.web.NotFoundException;\n+import org.sagebionetworks.repo.web.ServiceUnavailableException;\n+import org.sagebionetworks.simpleHttpClient.*;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.UnsupportedEncodingException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n \n /**\n- * An implementation of JiraClient using the Jira-Rest-Java-Client\n- * \n- * @author brucehoff\n- *\n+ * Mini JIRA REST client\n  */\n public class JiraClientImpl implements JiraClient {\n \tprivate static final String JIRA_URL = \"https://sagebionetworks.jira.com\";\n \n-\tprivate JiraRestClient restClient;\n-\t\n-\tprivate static <T> T waitForPromise(Promise<T> promise) {\n-\t\ttry {\n-\t\t\twhile (!promise.isDone()) {\n-\t\t\t\tThread.sleep(100L);\n-\t\t\t}\n-\t\t\treturn promise.get();\n-\t\t} catch (InterruptedException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t} catch (ExecutionException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t}\n-\t}\n-\t\n+\tprivate final SimpleHttpClient httpClient;\n+\tprivate String USERNAME;\n+\tprivate String APIKEY;\n+\tprivate static final Integer TIME_OUT = 30 * 1000; // 30 seconds\n+\tprivate static final String JIRA_API_PROJECT_URL = \"/rest/api/3/project/\";\n+\tprivate static final String JIRA_API_FIELDS_URL = \"/rest/api/3/field/\";\n+\tprivate static final String JIRA_API_ISSUE_URL = \"/rest/api/3/issue/\";\n+\tprivate static final String USER_AGENT = \"Synapse\";\n+\tprivate static JSONParser parser;\n+\tprivate static final String JIRA_PROJECT_ISSUE_TYPES_KEY = \"issueTypes\";\n+\tprivate static final String JIRA_PROJECT_ID_KEY = \"id\";\n+\n \tpublic JiraClientImpl() {\n-    \tfinal AsynchronousJiraRestClientFactory factory = new AsynchronousJiraRestClientFactory();\n-    \tURI jiraServerUri = URI.create(JIRA_URL);\n-    \tthis.restClient = factory.createWithBasicHttpAuthentication(\n-    \t\t\tjiraServerUri, \n-    \t\t\tStackConfigurationSingleton.singleton().getJiraUserEmail(), \n-    \t\t\tStackConfigurationSingleton.singleton().getJiraUserApikey());\n+\t\tSimpleHttpClientConfig httpClientConfig = new SimpleHttpClientConfig();\n+\t\thttpClientConfig.setSocketTimeoutMs(TIME_OUT);\n+\t\thttpClient = new SimpleHttpClientImpl(httpClientConfig);\n+\n+\t\tUSERNAME = StackConfigurationSingleton.singleton().getJiraUserEmail();\n+\t\tAPIKEY = StackConfigurationSingleton.singleton().getJiraUserApikey();\n+\t\tparser = new JSONParser();\n \t}\n \n \t@Override\n-\tpublic Project getProject(String projectKey) {\n-\t\tProjectRestClient prc = restClient.getProjectClient();\n-\t\treturn waitForPromise(prc.getProject(projectKey));\n+\tpublic JSONObject getProjectInfo(String projectKey, String issueTypeName) {\n+\t\tSimpleHttpRequest req = createRequest(JIRA_API_PROJECT_URL, \"SG\", \"application/json\");\n+\t\tSimpleHttpResponse resp = null;\n+\t\ttry {\n+\t\t\tresp = httpClient.get(req);\n+\t\t} catch (IOException e) {\n+\t\t\tthrow new RuntimeException();\n+\t\t}\n+\t\thandleResponseStatus(resp.getStatusCode());\n+\t\tString json = null;\n+\t\tjson = resp.getContent();\n+\n+\t\tLong issueTypeId = -1L;\n+\t\tString projectId = null;\n+\t\ttry (Reader reader = new StringReader(json)) {\n+\t\t\tJSONObject pInfo = (JSONObject) parser.parse(reader);\n+\t\t\tJSONArray issueTypeNames = (JSONArray)pInfo.get(JIRA_PROJECT_ISSUE_TYPES_KEY);\n+\t\t\tIterator<JSONObject> it = issueTypeNames.iterator();\n+\t\t\twhile (it.hasNext()) {\n+\t\t\t\tJSONObject issueType = it.next();\n+\t\t\t\tString name = (String) issueType.get(\"name\");\n+\t\t\t\tif (issueTypeName.equalsIgnoreCase(name)) {\n+\t\t\t\t\tissueTypeId = Long.parseLong((String) issueType.get(\"id\"));\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (issueTypeId == -1L) {\n+\t\t\t\tthrow new IllegalStateException(String.format(\"Could not find the issue typeId for issue type {}\", issueTypeName));\n+\t\t\t}\n+\t\t\tprojectId = (String) pInfo.get(JIRA_PROJECT_ID_KEY);", "originalCommit": "56665cfca92707ed9a83333fa87e838632991a92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzODg3Mw==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3955#discussion_r384838873", "bodyText": "Leave to null", "author": "xschildw", "createdAt": "2020-02-26T23:57:10Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JiraClientImpl.java", "diffHunk": "@@ -3,73 +3,193 @@\n import java.net.URI;\n import java.util.concurrent.ExecutionException;\n \n-import io.atlassian.util.concurrent.Promise;\n import org.sagebionetworks.StackConfigurationSingleton;\n \n-import com.atlassian.jira.rest.client.api.IssueRestClient;\n-import com.atlassian.jira.rest.client.api.JiraRestClient;\n-import com.atlassian.jira.rest.client.api.MetadataRestClient;\n-import com.atlassian.jira.rest.client.api.ProjectRestClient;\n-import com.atlassian.jira.rest.client.api.domain.BasicIssue;\n-import com.atlassian.jira.rest.client.api.domain.Field;\n-import com.atlassian.jira.rest.client.api.domain.Project;\n-import com.atlassian.jira.rest.client.api.domain.input.IssueInput;\n-import com.atlassian.jira.rest.client.internal.async.AsynchronousJiraRestClientFactory;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpStatus;\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+import org.sagebionetworks.repo.model.UnauthorizedException;\n+import org.sagebionetworks.repo.web.NotFoundException;\n+import org.sagebionetworks.repo.web.ServiceUnavailableException;\n+import org.sagebionetworks.simpleHttpClient.*;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.UnsupportedEncodingException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n \n /**\n- * An implementation of JiraClient using the Jira-Rest-Java-Client\n- * \n- * @author brucehoff\n- *\n+ * Mini JIRA REST client\n  */\n public class JiraClientImpl implements JiraClient {\n \tprivate static final String JIRA_URL = \"https://sagebionetworks.jira.com\";\n \n-\tprivate JiraRestClient restClient;\n-\t\n-\tprivate static <T> T waitForPromise(Promise<T> promise) {\n-\t\ttry {\n-\t\t\twhile (!promise.isDone()) {\n-\t\t\t\tThread.sleep(100L);\n-\t\t\t}\n-\t\t\treturn promise.get();\n-\t\t} catch (InterruptedException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t} catch (ExecutionException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t}\n-\t}\n-\t\n+\tprivate final SimpleHttpClient httpClient;\n+\tprivate String USERNAME;\n+\tprivate String APIKEY;\n+\tprivate static final Integer TIME_OUT = 30 * 1000; // 30 seconds\n+\tprivate static final String JIRA_API_PROJECT_URL = \"/rest/api/3/project/\";\n+\tprivate static final String JIRA_API_FIELDS_URL = \"/rest/api/3/field/\";\n+\tprivate static final String JIRA_API_ISSUE_URL = \"/rest/api/3/issue/\";\n+\tprivate static final String USER_AGENT = \"Synapse\";\n+\tprivate static JSONParser parser;\n+\tprivate static final String JIRA_PROJECT_ISSUE_TYPES_KEY = \"issueTypes\";\n+\tprivate static final String JIRA_PROJECT_ID_KEY = \"id\";\n+\n \tpublic JiraClientImpl() {\n-    \tfinal AsynchronousJiraRestClientFactory factory = new AsynchronousJiraRestClientFactory();\n-    \tURI jiraServerUri = URI.create(JIRA_URL);\n-    \tthis.restClient = factory.createWithBasicHttpAuthentication(\n-    \t\t\tjiraServerUri, \n-    \t\t\tStackConfigurationSingleton.singleton().getJiraUserEmail(), \n-    \t\t\tStackConfigurationSingleton.singleton().getJiraUserApikey());\n+\t\tSimpleHttpClientConfig httpClientConfig = new SimpleHttpClientConfig();\n+\t\thttpClientConfig.setSocketTimeoutMs(TIME_OUT);\n+\t\thttpClient = new SimpleHttpClientImpl(httpClientConfig);\n+\n+\t\tUSERNAME = StackConfigurationSingleton.singleton().getJiraUserEmail();\n+\t\tAPIKEY = StackConfigurationSingleton.singleton().getJiraUserApikey();\n+\t\tparser = new JSONParser();\n \t}\n \n \t@Override\n-\tpublic Project getProject(String projectKey) {\n-\t\tProjectRestClient prc = restClient.getProjectClient();\n-\t\treturn waitForPromise(prc.getProject(projectKey));\n+\tpublic JSONObject getProjectInfo(String projectKey, String issueTypeName) {\n+\t\tSimpleHttpRequest req = createRequest(JIRA_API_PROJECT_URL, \"SG\", \"application/json\");\n+\t\tSimpleHttpResponse resp = null;\n+\t\ttry {\n+\t\t\tresp = httpClient.get(req);\n+\t\t} catch (IOException e) {\n+\t\t\tthrow new RuntimeException();\n+\t\t}\n+\t\thandleResponseStatus(resp.getStatusCode());\n+\t\tString json = null;\n+\t\tjson = resp.getContent();\n+\n+\t\tLong issueTypeId = -1L;", "originalCommit": "56665cfca92707ed9a83333fa87e838632991a92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzOTI2OA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3955#discussion_r384839268", "bodyText": "use valueOf(), check that get() does not return null. And extract \"id\" as constant.", "author": "xschildw", "createdAt": "2020-02-26T23:58:25Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JiraClientImpl.java", "diffHunk": "@@ -3,73 +3,193 @@\n import java.net.URI;\n import java.util.concurrent.ExecutionException;\n \n-import io.atlassian.util.concurrent.Promise;\n import org.sagebionetworks.StackConfigurationSingleton;\n \n-import com.atlassian.jira.rest.client.api.IssueRestClient;\n-import com.atlassian.jira.rest.client.api.JiraRestClient;\n-import com.atlassian.jira.rest.client.api.MetadataRestClient;\n-import com.atlassian.jira.rest.client.api.ProjectRestClient;\n-import com.atlassian.jira.rest.client.api.domain.BasicIssue;\n-import com.atlassian.jira.rest.client.api.domain.Field;\n-import com.atlassian.jira.rest.client.api.domain.Project;\n-import com.atlassian.jira.rest.client.api.domain.input.IssueInput;\n-import com.atlassian.jira.rest.client.internal.async.AsynchronousJiraRestClientFactory;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpStatus;\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+import org.sagebionetworks.repo.model.UnauthorizedException;\n+import org.sagebionetworks.repo.web.NotFoundException;\n+import org.sagebionetworks.repo.web.ServiceUnavailableException;\n+import org.sagebionetworks.simpleHttpClient.*;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.UnsupportedEncodingException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n \n /**\n- * An implementation of JiraClient using the Jira-Rest-Java-Client\n- * \n- * @author brucehoff\n- *\n+ * Mini JIRA REST client\n  */\n public class JiraClientImpl implements JiraClient {\n \tprivate static final String JIRA_URL = \"https://sagebionetworks.jira.com\";\n \n-\tprivate JiraRestClient restClient;\n-\t\n-\tprivate static <T> T waitForPromise(Promise<T> promise) {\n-\t\ttry {\n-\t\t\twhile (!promise.isDone()) {\n-\t\t\t\tThread.sleep(100L);\n-\t\t\t}\n-\t\t\treturn promise.get();\n-\t\t} catch (InterruptedException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t} catch (ExecutionException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t}\n-\t}\n-\t\n+\tprivate final SimpleHttpClient httpClient;\n+\tprivate String USERNAME;\n+\tprivate String APIKEY;\n+\tprivate static final Integer TIME_OUT = 30 * 1000; // 30 seconds\n+\tprivate static final String JIRA_API_PROJECT_URL = \"/rest/api/3/project/\";\n+\tprivate static final String JIRA_API_FIELDS_URL = \"/rest/api/3/field/\";\n+\tprivate static final String JIRA_API_ISSUE_URL = \"/rest/api/3/issue/\";\n+\tprivate static final String USER_AGENT = \"Synapse\";\n+\tprivate static JSONParser parser;\n+\tprivate static final String JIRA_PROJECT_ISSUE_TYPES_KEY = \"issueTypes\";\n+\tprivate static final String JIRA_PROJECT_ID_KEY = \"id\";\n+\n \tpublic JiraClientImpl() {\n-    \tfinal AsynchronousJiraRestClientFactory factory = new AsynchronousJiraRestClientFactory();\n-    \tURI jiraServerUri = URI.create(JIRA_URL);\n-    \tthis.restClient = factory.createWithBasicHttpAuthentication(\n-    \t\t\tjiraServerUri, \n-    \t\t\tStackConfigurationSingleton.singleton().getJiraUserEmail(), \n-    \t\t\tStackConfigurationSingleton.singleton().getJiraUserApikey());\n+\t\tSimpleHttpClientConfig httpClientConfig = new SimpleHttpClientConfig();\n+\t\thttpClientConfig.setSocketTimeoutMs(TIME_OUT);\n+\t\thttpClient = new SimpleHttpClientImpl(httpClientConfig);\n+\n+\t\tUSERNAME = StackConfigurationSingleton.singleton().getJiraUserEmail();\n+\t\tAPIKEY = StackConfigurationSingleton.singleton().getJiraUserApikey();\n+\t\tparser = new JSONParser();\n \t}\n \n \t@Override\n-\tpublic Project getProject(String projectKey) {\n-\t\tProjectRestClient prc = restClient.getProjectClient();\n-\t\treturn waitForPromise(prc.getProject(projectKey));\n+\tpublic JSONObject getProjectInfo(String projectKey, String issueTypeName) {\n+\t\tSimpleHttpRequest req = createRequest(JIRA_API_PROJECT_URL, \"SG\", \"application/json\");\n+\t\tSimpleHttpResponse resp = null;\n+\t\ttry {\n+\t\t\tresp = httpClient.get(req);\n+\t\t} catch (IOException e) {\n+\t\t\tthrow new RuntimeException();\n+\t\t}\n+\t\thandleResponseStatus(resp.getStatusCode());\n+\t\tString json = null;\n+\t\tjson = resp.getContent();\n+\n+\t\tLong issueTypeId = -1L;\n+\t\tString projectId = null;\n+\t\ttry (Reader reader = new StringReader(json)) {\n+\t\t\tJSONObject pInfo = (JSONObject) parser.parse(reader);\n+\t\t\tJSONArray issueTypeNames = (JSONArray)pInfo.get(JIRA_PROJECT_ISSUE_TYPES_KEY);\n+\t\t\tIterator<JSONObject> it = issueTypeNames.iterator();\n+\t\t\twhile (it.hasNext()) {\n+\t\t\t\tJSONObject issueType = it.next();\n+\t\t\t\tString name = (String) issueType.get(\"name\");\n+\t\t\t\tif (issueTypeName.equalsIgnoreCase(name)) {\n+\t\t\t\t\tissueTypeId = Long.parseLong((String) issueType.get(\"id\"));", "originalCommit": "56665cfca92707ed9a83333fa87e838632991a92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzOTUwNg==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3955#discussion_r384839506", "bodyText": "Create a small DTO object.", "author": "xschildw", "createdAt": "2020-02-26T23:59:07Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JiraClientImpl.java", "diffHunk": "@@ -3,73 +3,193 @@\n import java.net.URI;\n import java.util.concurrent.ExecutionException;\n \n-import io.atlassian.util.concurrent.Promise;\n import org.sagebionetworks.StackConfigurationSingleton;\n \n-import com.atlassian.jira.rest.client.api.IssueRestClient;\n-import com.atlassian.jira.rest.client.api.JiraRestClient;\n-import com.atlassian.jira.rest.client.api.MetadataRestClient;\n-import com.atlassian.jira.rest.client.api.ProjectRestClient;\n-import com.atlassian.jira.rest.client.api.domain.BasicIssue;\n-import com.atlassian.jira.rest.client.api.domain.Field;\n-import com.atlassian.jira.rest.client.api.domain.Project;\n-import com.atlassian.jira.rest.client.api.domain.input.IssueInput;\n-import com.atlassian.jira.rest.client.internal.async.AsynchronousJiraRestClientFactory;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpStatus;\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+import org.sagebionetworks.repo.model.UnauthorizedException;\n+import org.sagebionetworks.repo.web.NotFoundException;\n+import org.sagebionetworks.repo.web.ServiceUnavailableException;\n+import org.sagebionetworks.simpleHttpClient.*;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.UnsupportedEncodingException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n \n /**\n- * An implementation of JiraClient using the Jira-Rest-Java-Client\n- * \n- * @author brucehoff\n- *\n+ * Mini JIRA REST client\n  */\n public class JiraClientImpl implements JiraClient {\n \tprivate static final String JIRA_URL = \"https://sagebionetworks.jira.com\";\n \n-\tprivate JiraRestClient restClient;\n-\t\n-\tprivate static <T> T waitForPromise(Promise<T> promise) {\n-\t\ttry {\n-\t\t\twhile (!promise.isDone()) {\n-\t\t\t\tThread.sleep(100L);\n-\t\t\t}\n-\t\t\treturn promise.get();\n-\t\t} catch (InterruptedException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t} catch (ExecutionException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t}\n-\t}\n-\t\n+\tprivate final SimpleHttpClient httpClient;\n+\tprivate String USERNAME;\n+\tprivate String APIKEY;\n+\tprivate static final Integer TIME_OUT = 30 * 1000; // 30 seconds\n+\tprivate static final String JIRA_API_PROJECT_URL = \"/rest/api/3/project/\";\n+\tprivate static final String JIRA_API_FIELDS_URL = \"/rest/api/3/field/\";\n+\tprivate static final String JIRA_API_ISSUE_URL = \"/rest/api/3/issue/\";\n+\tprivate static final String USER_AGENT = \"Synapse\";\n+\tprivate static JSONParser parser;\n+\tprivate static final String JIRA_PROJECT_ISSUE_TYPES_KEY = \"issueTypes\";\n+\tprivate static final String JIRA_PROJECT_ID_KEY = \"id\";\n+\n \tpublic JiraClientImpl() {\n-    \tfinal AsynchronousJiraRestClientFactory factory = new AsynchronousJiraRestClientFactory();\n-    \tURI jiraServerUri = URI.create(JIRA_URL);\n-    \tthis.restClient = factory.createWithBasicHttpAuthentication(\n-    \t\t\tjiraServerUri, \n-    \t\t\tStackConfigurationSingleton.singleton().getJiraUserEmail(), \n-    \t\t\tStackConfigurationSingleton.singleton().getJiraUserApikey());\n+\t\tSimpleHttpClientConfig httpClientConfig = new SimpleHttpClientConfig();\n+\t\thttpClientConfig.setSocketTimeoutMs(TIME_OUT);\n+\t\thttpClient = new SimpleHttpClientImpl(httpClientConfig);\n+\n+\t\tUSERNAME = StackConfigurationSingleton.singleton().getJiraUserEmail();\n+\t\tAPIKEY = StackConfigurationSingleton.singleton().getJiraUserApikey();\n+\t\tparser = new JSONParser();\n \t}\n \n \t@Override\n-\tpublic Project getProject(String projectKey) {\n-\t\tProjectRestClient prc = restClient.getProjectClient();\n-\t\treturn waitForPromise(prc.getProject(projectKey));\n+\tpublic JSONObject getProjectInfo(String projectKey, String issueTypeName) {\n+\t\tSimpleHttpRequest req = createRequest(JIRA_API_PROJECT_URL, \"SG\", \"application/json\");\n+\t\tSimpleHttpResponse resp = null;\n+\t\ttry {\n+\t\t\tresp = httpClient.get(req);\n+\t\t} catch (IOException e) {\n+\t\t\tthrow new RuntimeException();\n+\t\t}\n+\t\thandleResponseStatus(resp.getStatusCode());\n+\t\tString json = null;\n+\t\tjson = resp.getContent();\n+\n+\t\tLong issueTypeId = -1L;\n+\t\tString projectId = null;\n+\t\ttry (Reader reader = new StringReader(json)) {\n+\t\t\tJSONObject pInfo = (JSONObject) parser.parse(reader);\n+\t\t\tJSONArray issueTypeNames = (JSONArray)pInfo.get(JIRA_PROJECT_ISSUE_TYPES_KEY);\n+\t\t\tIterator<JSONObject> it = issueTypeNames.iterator();\n+\t\t\twhile (it.hasNext()) {\n+\t\t\t\tJSONObject issueType = it.next();\n+\t\t\t\tString name = (String) issueType.get(\"name\");\n+\t\t\t\tif (issueTypeName.equalsIgnoreCase(name)) {\n+\t\t\t\t\tissueTypeId = Long.parseLong((String) issueType.get(\"id\"));\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (issueTypeId == -1L) {\n+\t\t\t\tthrow new IllegalStateException(String.format(\"Could not find the issue typeId for issue type {}\", issueTypeName));\n+\t\t\t}\n+\t\t\tprojectId = (String) pInfo.get(JIRA_PROJECT_ID_KEY);\n+\t\t}\n+\t\tcatch (IOException | ParseException e) {\n+\t\t\tthrow new RuntimeException(\"JIRA client: error processing JSON\");\n+\t\t}\n+\t\tJSONObject projInfo = new JSONObject();", "originalCommit": "56665cfca92707ed9a83333fa87e838632991a92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzOTgxNw==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3955#discussion_r384839817", "bodyText": "Extract method", "author": "xschildw", "createdAt": "2020-02-27T00:00:09Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JiraClientImpl.java", "diffHunk": "@@ -3,73 +3,193 @@\n import java.net.URI;\n import java.util.concurrent.ExecutionException;\n \n-import io.atlassian.util.concurrent.Promise;\n import org.sagebionetworks.StackConfigurationSingleton;\n \n-import com.atlassian.jira.rest.client.api.IssueRestClient;\n-import com.atlassian.jira.rest.client.api.JiraRestClient;\n-import com.atlassian.jira.rest.client.api.MetadataRestClient;\n-import com.atlassian.jira.rest.client.api.ProjectRestClient;\n-import com.atlassian.jira.rest.client.api.domain.BasicIssue;\n-import com.atlassian.jira.rest.client.api.domain.Field;\n-import com.atlassian.jira.rest.client.api.domain.Project;\n-import com.atlassian.jira.rest.client.api.domain.input.IssueInput;\n-import com.atlassian.jira.rest.client.internal.async.AsynchronousJiraRestClientFactory;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpStatus;\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+import org.sagebionetworks.repo.model.UnauthorizedException;\n+import org.sagebionetworks.repo.web.NotFoundException;\n+import org.sagebionetworks.repo.web.ServiceUnavailableException;\n+import org.sagebionetworks.simpleHttpClient.*;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.UnsupportedEncodingException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n \n /**\n- * An implementation of JiraClient using the Jira-Rest-Java-Client\n- * \n- * @author brucehoff\n- *\n+ * Mini JIRA REST client\n  */\n public class JiraClientImpl implements JiraClient {\n \tprivate static final String JIRA_URL = \"https://sagebionetworks.jira.com\";\n \n-\tprivate JiraRestClient restClient;\n-\t\n-\tprivate static <T> T waitForPromise(Promise<T> promise) {\n-\t\ttry {\n-\t\t\twhile (!promise.isDone()) {\n-\t\t\t\tThread.sleep(100L);\n-\t\t\t}\n-\t\t\treturn promise.get();\n-\t\t} catch (InterruptedException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t} catch (ExecutionException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t}\n-\t}\n-\t\n+\tprivate final SimpleHttpClient httpClient;\n+\tprivate String USERNAME;\n+\tprivate String APIKEY;\n+\tprivate static final Integer TIME_OUT = 30 * 1000; // 30 seconds\n+\tprivate static final String JIRA_API_PROJECT_URL = \"/rest/api/3/project/\";\n+\tprivate static final String JIRA_API_FIELDS_URL = \"/rest/api/3/field/\";\n+\tprivate static final String JIRA_API_ISSUE_URL = \"/rest/api/3/issue/\";\n+\tprivate static final String USER_AGENT = \"Synapse\";\n+\tprivate static JSONParser parser;\n+\tprivate static final String JIRA_PROJECT_ISSUE_TYPES_KEY = \"issueTypes\";\n+\tprivate static final String JIRA_PROJECT_ID_KEY = \"id\";\n+\n \tpublic JiraClientImpl() {\n-    \tfinal AsynchronousJiraRestClientFactory factory = new AsynchronousJiraRestClientFactory();\n-    \tURI jiraServerUri = URI.create(JIRA_URL);\n-    \tthis.restClient = factory.createWithBasicHttpAuthentication(\n-    \t\t\tjiraServerUri, \n-    \t\t\tStackConfigurationSingleton.singleton().getJiraUserEmail(), \n-    \t\t\tStackConfigurationSingleton.singleton().getJiraUserApikey());\n+\t\tSimpleHttpClientConfig httpClientConfig = new SimpleHttpClientConfig();\n+\t\thttpClientConfig.setSocketTimeoutMs(TIME_OUT);\n+\t\thttpClient = new SimpleHttpClientImpl(httpClientConfig);\n+\n+\t\tUSERNAME = StackConfigurationSingleton.singleton().getJiraUserEmail();\n+\t\tAPIKEY = StackConfigurationSingleton.singleton().getJiraUserApikey();\n+\t\tparser = new JSONParser();\n \t}\n \n \t@Override\n-\tpublic Project getProject(String projectKey) {\n-\t\tProjectRestClient prc = restClient.getProjectClient();\n-\t\treturn waitForPromise(prc.getProject(projectKey));\n+\tpublic JSONObject getProjectInfo(String projectKey, String issueTypeName) {\n+\t\tSimpleHttpRequest req = createRequest(JIRA_API_PROJECT_URL, \"SG\", \"application/json\");\n+\t\tSimpleHttpResponse resp = null;\n+\t\ttry {\n+\t\t\tresp = httpClient.get(req);\n+\t\t} catch (IOException e) {\n+\t\t\tthrow new RuntimeException();\n+\t\t}\n+\t\thandleResponseStatus(resp.getStatusCode());\n+\t\tString json = null;\n+\t\tjson = resp.getContent();\n+\n+\t\tLong issueTypeId = -1L;\n+\t\tString projectId = null;\n+\t\ttry (Reader reader = new StringReader(json)) {\n+\t\t\tJSONObject pInfo = (JSONObject) parser.parse(reader);\n+\t\t\tJSONArray issueTypeNames = (JSONArray)pInfo.get(JIRA_PROJECT_ISSUE_TYPES_KEY);\n+\t\t\tIterator<JSONObject> it = issueTypeNames.iterator();\n+\t\t\twhile (it.hasNext()) {\n+\t\t\t\tJSONObject issueType = it.next();\n+\t\t\t\tString name = (String) issueType.get(\"name\");\n+\t\t\t\tif (issueTypeName.equalsIgnoreCase(name)) {\n+\t\t\t\t\tissueTypeId = Long.parseLong((String) issueType.get(\"id\"));\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (issueTypeId == -1L) {\n+\t\t\t\tthrow new IllegalStateException(String.format(\"Could not find the issue typeId for issue type {}\", issueTypeName));\n+\t\t\t}\n+\t\t\tprojectId = (String) pInfo.get(JIRA_PROJECT_ID_KEY);\n+\t\t}\n+\t\tcatch (IOException | ParseException e) {\n+\t\t\tthrow new RuntimeException(\"JIRA client: error processing JSON\");\n+\t\t}\n+\t\tJSONObject projInfo = new JSONObject();\n+\t\tprojInfo.put(\"issueTypeId\", issueTypeId);\n+\t\tprojInfo.put(\"id\", projectId);\n+\t\treturn projInfo;\n \t}\n \n \t@Override\n-\tpublic Iterable<Field> getFields() {\n-\t\t// NOTE:  In order to appear in this list a Jira 'custom field' \n-\t\t// must have a 'global context'.  If it applies just to selected\n-\t\t// projects it will not appear in this list.\n-    \tMetadataRestClient mrc = restClient.getMetadataClient();\n-    \treturn waitForPromise(mrc.getFields());\n+\tpublic Map<String,String> getFields() {\n+\t\tSimpleHttpRequest req = createRequest(JIRA_API_FIELDS_URL, null, \"application/json\");\n+\t\tSimpleHttpResponse resp = null;", "originalCommit": "56665cfca92707ed9a83333fa87e838632991a92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0MjYyNQ==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3955#discussion_r384842625", "bodyText": "Create a DTO for issue", "author": "xschildw", "createdAt": "2020-02-27T00:09:10Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JiraClientImpl.java", "diffHunk": "@@ -3,73 +3,193 @@\n import java.net.URI;\n import java.util.concurrent.ExecutionException;\n \n-import io.atlassian.util.concurrent.Promise;\n import org.sagebionetworks.StackConfigurationSingleton;\n \n-import com.atlassian.jira.rest.client.api.IssueRestClient;\n-import com.atlassian.jira.rest.client.api.JiraRestClient;\n-import com.atlassian.jira.rest.client.api.MetadataRestClient;\n-import com.atlassian.jira.rest.client.api.ProjectRestClient;\n-import com.atlassian.jira.rest.client.api.domain.BasicIssue;\n-import com.atlassian.jira.rest.client.api.domain.Field;\n-import com.atlassian.jira.rest.client.api.domain.Project;\n-import com.atlassian.jira.rest.client.api.domain.input.IssueInput;\n-import com.atlassian.jira.rest.client.internal.async.AsynchronousJiraRestClientFactory;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpStatus;\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+import org.sagebionetworks.repo.model.UnauthorizedException;\n+import org.sagebionetworks.repo.web.NotFoundException;\n+import org.sagebionetworks.repo.web.ServiceUnavailableException;\n+import org.sagebionetworks.simpleHttpClient.*;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.UnsupportedEncodingException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n \n /**\n- * An implementation of JiraClient using the Jira-Rest-Java-Client\n- * \n- * @author brucehoff\n- *\n+ * Mini JIRA REST client\n  */\n public class JiraClientImpl implements JiraClient {\n \tprivate static final String JIRA_URL = \"https://sagebionetworks.jira.com\";\n \n-\tprivate JiraRestClient restClient;\n-\t\n-\tprivate static <T> T waitForPromise(Promise<T> promise) {\n-\t\ttry {\n-\t\t\twhile (!promise.isDone()) {\n-\t\t\t\tThread.sleep(100L);\n-\t\t\t}\n-\t\t\treturn promise.get();\n-\t\t} catch (InterruptedException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t} catch (ExecutionException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t}\n-\t}\n-\t\n+\tprivate final SimpleHttpClient httpClient;\n+\tprivate String USERNAME;\n+\tprivate String APIKEY;\n+\tprivate static final Integer TIME_OUT = 30 * 1000; // 30 seconds\n+\tprivate static final String JIRA_API_PROJECT_URL = \"/rest/api/3/project/\";\n+\tprivate static final String JIRA_API_FIELDS_URL = \"/rest/api/3/field/\";\n+\tprivate static final String JIRA_API_ISSUE_URL = \"/rest/api/3/issue/\";\n+\tprivate static final String USER_AGENT = \"Synapse\";\n+\tprivate static JSONParser parser;\n+\tprivate static final String JIRA_PROJECT_ISSUE_TYPES_KEY = \"issueTypes\";\n+\tprivate static final String JIRA_PROJECT_ID_KEY = \"id\";\n+\n \tpublic JiraClientImpl() {\n-    \tfinal AsynchronousJiraRestClientFactory factory = new AsynchronousJiraRestClientFactory();\n-    \tURI jiraServerUri = URI.create(JIRA_URL);\n-    \tthis.restClient = factory.createWithBasicHttpAuthentication(\n-    \t\t\tjiraServerUri, \n-    \t\t\tStackConfigurationSingleton.singleton().getJiraUserEmail(), \n-    \t\t\tStackConfigurationSingleton.singleton().getJiraUserApikey());\n+\t\tSimpleHttpClientConfig httpClientConfig = new SimpleHttpClientConfig();\n+\t\thttpClientConfig.setSocketTimeoutMs(TIME_OUT);\n+\t\thttpClient = new SimpleHttpClientImpl(httpClientConfig);\n+\n+\t\tUSERNAME = StackConfigurationSingleton.singleton().getJiraUserEmail();\n+\t\tAPIKEY = StackConfigurationSingleton.singleton().getJiraUserApikey();\n+\t\tparser = new JSONParser();\n \t}\n \n \t@Override\n-\tpublic Project getProject(String projectKey) {\n-\t\tProjectRestClient prc = restClient.getProjectClient();\n-\t\treturn waitForPromise(prc.getProject(projectKey));\n+\tpublic JSONObject getProjectInfo(String projectKey, String issueTypeName) {\n+\t\tSimpleHttpRequest req = createRequest(JIRA_API_PROJECT_URL, \"SG\", \"application/json\");\n+\t\tSimpleHttpResponse resp = null;\n+\t\ttry {\n+\t\t\tresp = httpClient.get(req);\n+\t\t} catch (IOException e) {\n+\t\t\tthrow new RuntimeException();\n+\t\t}\n+\t\thandleResponseStatus(resp.getStatusCode());\n+\t\tString json = null;\n+\t\tjson = resp.getContent();\n+\n+\t\tLong issueTypeId = -1L;\n+\t\tString projectId = null;\n+\t\ttry (Reader reader = new StringReader(json)) {\n+\t\t\tJSONObject pInfo = (JSONObject) parser.parse(reader);\n+\t\t\tJSONArray issueTypeNames = (JSONArray)pInfo.get(JIRA_PROJECT_ISSUE_TYPES_KEY);\n+\t\t\tIterator<JSONObject> it = issueTypeNames.iterator();\n+\t\t\twhile (it.hasNext()) {\n+\t\t\t\tJSONObject issueType = it.next();\n+\t\t\t\tString name = (String) issueType.get(\"name\");\n+\t\t\t\tif (issueTypeName.equalsIgnoreCase(name)) {\n+\t\t\t\t\tissueTypeId = Long.parseLong((String) issueType.get(\"id\"));\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (issueTypeId == -1L) {\n+\t\t\t\tthrow new IllegalStateException(String.format(\"Could not find the issue typeId for issue type {}\", issueTypeName));\n+\t\t\t}\n+\t\t\tprojectId = (String) pInfo.get(JIRA_PROJECT_ID_KEY);\n+\t\t}\n+\t\tcatch (IOException | ParseException e) {\n+\t\t\tthrow new RuntimeException(\"JIRA client: error processing JSON\");\n+\t\t}\n+\t\tJSONObject projInfo = new JSONObject();\n+\t\tprojInfo.put(\"issueTypeId\", issueTypeId);\n+\t\tprojInfo.put(\"id\", projectId);\n+\t\treturn projInfo;\n \t}\n \n \t@Override\n-\tpublic Iterable<Field> getFields() {\n-\t\t// NOTE:  In order to appear in this list a Jira 'custom field' \n-\t\t// must have a 'global context'.  If it applies just to selected\n-\t\t// projects it will not appear in this list.\n-    \tMetadataRestClient mrc = restClient.getMetadataClient();\n-    \treturn waitForPromise(mrc.getFields());\n+\tpublic Map<String,String> getFields() {\n+\t\tSimpleHttpRequest req = createRequest(JIRA_API_FIELDS_URL, null, \"application/json\");\n+\t\tSimpleHttpResponse resp = null;\n+\t\ttry {\n+\t\t\tresp = httpClient.get(req);\n+\t\t} catch (IOException e) {\n+\t\t\tthrow new RuntimeException();\n+\t\t}\n+\t\thandleResponseStatus(resp.getStatusCode());\n+\t\tString json = null;\n+\t\tjson = resp.getContent();\n+\n+\t\tJSONArray fields = null;\n+\t\tMap<String, String> fieldsMap = new HashMap<>();\n+\t\ttry (Reader reader = new StringReader(json)) {\n+\t\t\tfields = (JSONArray) parser.parse(reader);\n+\t\t\tIterator<JSONObject> it = fields.iterator();\n+\t\t\twhile (it.hasNext()) {\n+\t\t\t\tJSONObject fieldDetail = it.next();\n+\t\t\t\tString fieldName = (String) fieldDetail.get(\"name\");\n+\t\t\t\tString fieldId = (String) fieldDetail.get(\"id\");\n+\t\t\t\tfieldsMap.put(fieldName, fieldId);\n+\t\t\t}\n+\t\t}\n+\t\tcatch (IOException | ParseException e) {\n+\t\t\tthrow new RuntimeException((\"JIRA client: error processing JSON\\n\"));\n+\t\t}\n+\t\treturn fieldsMap;\n \t}\n \n \t@Override\n-\tpublic BasicIssue createIssue(IssueInput issueInput) {\n-        IssueRestClient irc = restClient.getIssueClient();\n-        Promise<BasicIssue> basicIssuePromise = irc.createIssue(issueInput);\n-        return waitForPromise(basicIssuePromise);\n+\tpublic JSONObject createIssue(JSONObject issue) {", "originalCommit": "56665cfca92707ed9a83333fa87e838632991a92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0MzIxMw==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3955#discussion_r384843213", "bodyText": "Move to JUnit5", "author": "xschildw", "createdAt": "2020-02-27T00:11:00Z", "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/util/jrjc/JiraClientImplTest.java", "diffHunk": "@@ -0,0 +1,340 @@\n+package org.sagebionetworks.repo.util.jrjc;\n+\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpStatus;\n+import org.apache.http.ParseException;\n+import org.json.simple.JSONObject;", "originalCommit": "56665cfca92707ed9a83333fa87e838632991a92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1MDk0Ng==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3955#discussion_r384850946", "bodyText": "Create a DTO and push most of this inside.", "author": "xschildw", "createdAt": "2020-02-27T00:36:24Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JRJCHelper.java", "diffHunk": "@@ -47,41 +48,28 @@ public static String createRestrictIssue(JiraClient jiraClient, String principal\n \t * @param params a map from field names to field values\n \t * @return\n \t */\n-\tpublic static BasicIssue createIssue(JiraClient jiraClient, String issueTypeName, String summary, Map<String,String> params) {\n-\t\t// first, find the project from the JIRA_PROJECT_KEY\n-        Project project = jiraClient.getProject(JIRA_PROJECT_KEY);\n-        \n-        // second, find the issue type ID from the issue type name\n-\t\tlong issueTypeId = -1L;\n-\t\tfor (IssueType it : project.getIssueTypes()) {\n-\t\t\tif (issueTypeName.equalsIgnoreCase(it.getName())) issueTypeId = it.getId();\n-\t\t}\n-\t\tif (issueTypeId==-1L) throw new IllegalStateException(\"Cannot find issue type \"+issueTypeName+\" in Jira project \"+JIRA_PROJECT_KEY);\n-\t\t\n-\t\t// third, find the defined fields, mapping their names to their IDs\t\n-\t\tMap<String, String> lcFieldNameToIdMap = new HashMap<String, String>();\n-\t\tfor (Field field : jiraClient.getFields()) {\n-\t\t\tlcFieldNameToIdMap.put(field.getName().toLowerCase(), field.getId());\n-\t\t}\n+\tpublic static JSONObject createIssue(JiraClient jiraClient, String issueTypeName, String summary, Map<String,String> params) {", "originalCommit": "56665cfca92707ed9a83333fa87e838632991a92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1MTgzNw==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3955#discussion_r384851837", "bodyText": "Convert to junit5", "author": "xschildw", "createdAt": "2020-02-27T00:39:12Z", "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/util/jrjc/JRJCHelperTest.java", "diffHunk": "@@ -1,92 +1,98 @@\n package org.sagebionetworks.repo.util.jrjc;", "originalCommit": "56665cfca92707ed9a83333fa87e838632991a92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "43185a214a507dfdf79bd18454e41e07057c0de3", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/43185a214a507dfdf79bd18454e41e07057c0de3", "message": "Fixes pre-DTO/TestRefactor", "committedDate": "2020-02-28T01:49:34Z", "type": "commit"}]}