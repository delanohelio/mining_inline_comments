{"pr_number": 4108, "pr_title": "detect when the table index is invalid and rebulid", "pr_createdAt": "2020-06-25T02:10:11Z", "pr_url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4108", "timeline": [{"oid": "b948b2f4f73461b36e486f5ae65dfbe71dc7b6e4", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/b948b2f4f73461b36e486f5ae65dfbe71dc7b6e4", "message": "detect when the table index is invalid and rebulid", "committedDate": "2020-06-25T02:07:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc4NzczMw==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4108#discussion_r445787733", "bodyText": "Might want to use: return Optional.ofNullable(etag)", "author": "marcomarasca", "createdAt": "2020-06-25T19:24:56Z", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/dao/table/TableStatusDAOImpl.java", "diffHunk": "@@ -260,8 +267,24 @@ public boolean updateChangedOnIfAvailable(IdAndVersion tableId) {\n \t\tlong now = System.currentTimeMillis();\n \t\tint count = jdbcTemplate.update(\"UPDATE \" + TABLE_STATUS + \" SET \" + COL_TABLE_STATUS_CHANGE_ON + \" = ? WHERE \"\n \t\t\t\t+ COL_TABLE_STATUS_ID + \" = ?\" + \" AND \" + COL_TABLE_STATUS_VERSION + \" = ? AND \"\n-\t\t\t\t+ COL_TABLE_STATUS_STATE + \" = '\" + TableState.AVAILABLE.name()+\"'\", now, tableId.getId(), version);\n+\t\t\t\t+ COL_TABLE_STATUS_STATE + \" = '\" + TableState.AVAILABLE.name() + \"'\", now, tableId.getId(), version);\n \t\treturn count > 0;\n \t}\n \n+\t@Override\n+\tpublic Optional<String> getLastChangeEtag(IdAndVersion tableId) {\n+\t\tlong version = validateAndGetVersion(tableId);\n+\t\ttry {\n+\t\t\tString sql = String.format(SELECT_STATUS_TEMPLATE, COL_TABLE_LAST_TABLE_CHANGE_ETAG);\n+\t\t\tString etag = jdbcTemplate.queryForObject(sql, String.class, tableId.getId(), version);\n+\t\t\tif (etag != null) {", "originalCommit": "b948b2f4f73461b36e486f5ae65dfbe71dc7b6e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc5MDQyMQ==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4108#discussion_r445790421", "bodyText": "Might just want to use a COUNT() without the try/catch", "author": "marcomarasca", "createdAt": "2020-06-25T19:30:29Z", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/dao/table/TableRowTruthDAOImpl.java", "diffHunk": "@@ -518,7 +495,32 @@ public boolean hasAtLeastOneChangeOfType(String tableIdString, TableChangeType t\n \t\t\treturn Optional.of(transactionId);\n \t\t} catch (EmptyResultDataAccessException e) {\n \t\t\treturn Optional.empty();\n-\t\t} \n+\t\t}\n \t}\n-\t\n+\n+\t@WriteTransaction\n+\t@Override\n+\tpublic void deleteChangeNumber(String tableIdString, long changeNumber) {\n+\t\tValidateArgument.required(tableIdString, \"tableId\");\n+\t\tlong tableId = KeyFactory.stringToKey(tableIdString);\n+\t\tjdbcTemplate.update(\"DELETE FROM \" + TABLE_ROW_CHANGE + \" WHERE \" + COL_TABLE_ROW_TABLE_ID + \" = ? AND \"\n+\t\t\t\t+ COL_TABLE_ROW_VERSION + \" = ?\", tableId, changeNumber);\n+\t}\n+\n+\t@Override\n+\tpublic boolean isEtagInTablesChangeHistory(String tableIdString, String etag) {\n+\t\tValidateArgument.required(tableIdString, \"tableId\");\n+\t\tValidateArgument.required(etag, \"etag\");\n+\t\tlong tableId = KeyFactory.stringToKey(tableIdString);\n+\t\ttry {\n+\t\t\tjdbcTemplate.queryForObject(\n+\t\t\t\t\t\"SELECT \" + COL_TABLE_ROW_TABLE_ETAG + \" FROM \" + TABLE_ROW_CHANGE + \" WHERE \"", "originalCommit": "b948b2f4f73461b36e486f5ae65dfbe71dc7b6e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc5MjM2Mg==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4108#discussion_r445792362", "bodyText": "Consider adding a test where the matching etag is not the latest", "author": "marcomarasca", "createdAt": "2020-06-25T19:34:37Z", "path": "lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/dao/table/TableRowTruthDAOImplTest.java", "diffHunk": "@@ -508,4 +509,68 @@ public void testgetLastTransactionIdTable() throws IOException {\n \t\tassertTrue(secondTransaction.isPresent());\r\n \t\tassertTrue(secondTransaction.get() > firstTransaction.get());\r\n \t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testIsEtagInTablesChangeHistoryWithNoTable() {\r\n+\t\tString etag = \"does not exist\";\r\n+\t\t// call under test\r\n+\t\tassertFalse(tableRowTruthDao.isEtagInTablesChangeHistory(tableId, etag));\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testIsEtagInTablesChangeHistoryWithTableWithMatch() throws IOException {\r\n+\t\t// Create some test column models\r\n+\t\tList<ColumnModel> columns = TableModelTestUtils.createOneOfEachType();\r\n+\t\t// create some test rows.\r\n+\t\tList<Row> rows = TableModelTestUtils.createRows(columns, 5);\r\n+\t\tRawRowSet set = new RawRowSet(TableModelUtils.getIds(columns), null, tableId, rows);\r\n+\t\t// Append this change set\r\n+\t\tappendRowSetToTable(creatorUserGroupId, tableId, columns, set);\r\n+\t\r\n+\t\tTableChangeType changeType = TableChangeType.ROW;\r\n+\t\tTableRowChange change = tableRowTruthDao.getLastTableRowChange(tableId, changeType);\r\n+\t\tassertNotNull(change);\r\n+\t\tassertEquals(changeType, change.getChangeType());\r\n+\t\t\r\n+\t\t// call under test\r\n+\t\tassertTrue(tableRowTruthDao.isEtagInTablesChangeHistory(tableId, change.getEtag()));\r\n+\t}\r", "originalCommit": "b948b2f4f73461b36e486f5ae65dfbe71dc7b6e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}