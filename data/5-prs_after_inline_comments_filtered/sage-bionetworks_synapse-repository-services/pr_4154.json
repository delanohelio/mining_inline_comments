{"pr_number": 4154, "pr_title": "Plfm 6327", "pr_createdAt": "2020-08-07T20:38:04Z", "pr_url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4154", "timeline": [{"oid": "3e2789ed3338cfdc353aeeabf61a6cdee50c4cc1", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/3e2789ed3338cfdc353aeeabf61a6cdee50c4cc1", "message": "fix for PLFM-6381", "committedDate": "2020-08-03T22:32:23Z", "type": "commit"}, {"oid": "f79e7470c5141e704e53bb7de6bc619b45de40b4", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/f79e7470c5141e704e53bb7de6bc619b45de40b4", "message": "started validation worker", "committedDate": "2020-08-04T00:42:57Z", "type": "commit"}, {"oid": "72d3e7bc3d6379bca84ba0602aba5e56a05e3c1a", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/72d3e7bc3d6379bca84ba0602aba5e56a05e3c1a", "message": "added validation results dao", "committedDate": "2020-08-05T01:57:17Z", "type": "commit"}, {"oid": "d6ba0d26dd7006ac54f4c8be1c3a9ade852dfeb1", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/d6ba0d26dd7006ac54f4c8be1c3a9ade852dfeb1", "message": "tests for entity schema manager", "committedDate": "2020-08-05T19:48:39Z", "type": "commit"}, {"oid": "8fe15e54b90ccbbb34f194ded4c10a7e4d3ea332", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/8fe15e54b90ccbbb34f194ded4c10a7e4d3ea332", "message": "validation worker tests and broadcast hierarchy changes for binding", "committedDate": "2020-08-07T02:30:34Z", "type": "commit"}, {"oid": "dbe779e7cb812854a47b70f3921dbeeb1f31767e", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/dbe779e7cb812854a47b70f3921dbeeb1f31767e", "message": "added validation results service and tests", "committedDate": "2020-08-07T19:12:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE4NTE1NA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4154#discussion_r468185154", "bodyText": "We should consider sending out a similar notification when the schema itself is updated after figuring out the entities that are touched by the change.", "author": "marcomarasca", "createdAt": "2020-08-10T21:04:50Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/EntityManagerImpl.java", "diffHunk": "@@ -560,25 +570,45 @@ public JsonSchemaObjectBinding bindSchemaToEntity(UserInfo userInfo, BindSchemaT\n \t\tValidateArgument.required(request.getSchema$id(), \"request.schema$id\");\n \t\tentityPermissionsManager.hasAccess(request.getEntityId(), ACCESS_TYPE.UPDATE, userInfo)\n \t\t\t\t.checkAuthorizationOrElseThrow();\n-\t\treturn jsonSchemaManager.bindSchemaToObject(userInfo.getId(), request.getSchema$id(),\n+\t\tJsonSchemaObjectBinding binding = jsonSchemaManager.bindSchemaToObject(userInfo.getId(), request.getSchema$id(),\n \t\t\t\tKeyFactory.stringToKey(request.getEntityId()), BoundObjectType.entity);\n+\t\tsendEntityUpdateNotifications(request.getEntityId());\n+\t\treturn binding;\n \t}\n \n \t@Override\n \tpublic JsonSchemaObjectBinding getBoundSchema(UserInfo userInfo, String id) {\n \t\tValidateArgument.required(userInfo, \"userInfo\");\n \t\tValidateArgument.required(id, \"id\");\n \t\tentityPermissionsManager.hasAccess(id, ACCESS_TYPE.READ, userInfo).checkAuthorizationOrElseThrow();\n-\t\tLong boundEntityId = nodeManager.findFirstBoundJsonSchema(KeyFactory.stringToKey(id));\n+\t\treturn getBoundSchema(id);\n+\t}\n+\t\n+\t@Override\n+\tpublic JsonSchemaObjectBinding getBoundSchema(String entityId) {\n+\t\tLong boundEntityId = nodeManager.findFirstBoundJsonSchema(KeyFactory.stringToKey(entityId));\n \t\treturn jsonSchemaManager.getJsonSchemaObjectBinding(boundEntityId, BoundObjectType.entity);\n \t}\n+\t\n \n+\t@WriteTransaction\n \t@Override\n \tpublic void clearBoundSchema(UserInfo userInfo, String id) {\n \t\tValidateArgument.required(userInfo, \"userInfo\");\n \t\tValidateArgument.required(id, \"id\");\n \t\tentityPermissionsManager.hasAccess(id, ACCESS_TYPE.DELETE, userInfo).checkAuthorizationOrElseThrow();\n \t\tjsonSchemaManager.clearBoundSchema(KeyFactory.stringToKey(id), BoundObjectType.entity);\n+\t\tsendEntityUpdateNotifications(id);\n+\t}\n+\t\n+\tvoid sendEntityUpdateNotifications(String entityId) {", "originalCommit": "dbe779e7cb812854a47b70f3921dbeeb1f31767e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE4NjIxOQ==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4154#discussion_r468186219", "bodyText": "You might not need to marker interface if you do not have additional functionality, we can simply implement the ObjectSchemaValidator", "author": "marcomarasca", "createdAt": "2020-08-10T21:07:01Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/schema/EntitySchemaValidator.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package org.sagebionetworks.repo.manager.schema;\n+\n+public interface EntitySchemaValidator extends ObjectSchemaValidator {", "originalCommit": "dbe779e7cb812854a47b70f3921dbeeb1f31767e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE4OTkzMg==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4154#discussion_r468189932", "bodyText": "We might want to deal with all this deprecation/new methods in this class", "author": "marcomarasca", "createdAt": "2020-08-10T21:15:02Z", "path": "lib/models/src/main/java/org/sagebionetworks/repo/model/message/TransactionalMessenger.java", "diffHunk": "@@ -33,6 +33,8 @@\n \t@Deprecated\n \tpublic void sendMessageAfterCommit(String objectId, ObjectType objectType, String etag, ChangeType changeType);\n \t\n+\tvoid sendMessageAfterCommit(String objectId, ObjectType objectType, ChangeType changeType);", "originalCommit": "dbe779e7cb812854a47b70f3921dbeeb1f31767e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0MTg0MQ==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4154#discussion_r468241841", "bodyText": "Could use a lambda", "author": "marcomarasca", "createdAt": "2020-08-10T23:33:12Z", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/schema/SchemaValidationResultDaoImpl.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package org.sagebionetworks.repo.model.dbo.schema;\n+\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_ALL_ERRORS;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_ERROR_MESSAGE;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_EXCEPTION;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_IS_VALID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_OBJECT_ETAG;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_OBJECT_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_OBJECT_TYPE;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_SCHEMA_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_VALIDATED_ON;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.TABLE_SCHEMA_VALIDATION_RESULTS;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Timestamp;\n+\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n+import org.sagebionetworks.repo.model.DatastoreException;\n+import org.sagebionetworks.repo.model.dbo.DBOBasicDao;\n+import org.sagebionetworks.repo.model.jdo.KeyFactory;\n+import org.sagebionetworks.repo.model.schema.ObjectType;\n+import org.sagebionetworks.repo.model.schema.ValidationResults;\n+import org.sagebionetworks.repo.transactions.WriteTransaction;\n+import org.sagebionetworks.repo.web.NotFoundException;\n+import org.sagebionetworks.schema.adapter.JSONObjectAdapter;\n+import org.sagebionetworks.schema.adapter.JSONObjectAdapterException;\n+import org.sagebionetworks.schema.adapter.org.json.JSONObjectAdapterImpl;\n+import org.sagebionetworks.util.ValidateArgument;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.RowMapper;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class SchemaValidationResultDaoImpl implements SchemaValidationResultDao {\n+\n+\tprivate JdbcTemplate jdbcTemplate;\n+\tprivate DBOBasicDao basicDao;\n+\n+\t@Autowired\n+\tpublic SchemaValidationResultDaoImpl(JdbcTemplate jdbcTemplate, DBOBasicDao basicDao) {\n+\t\tsuper();\n+\t\tthis.jdbcTemplate = jdbcTemplate;\n+\t\tthis.basicDao = basicDao;\n+\t}\n+\n+\tstatic RowMapper<ValidationResults> MAPPER = new RowMapper<ValidationResults>() {", "originalCommit": "dbe779e7cb812854a47b70f3921dbeeb1f31767e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0NDY4MA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4154#discussion_r468244680", "bodyText": "IllegalStateException might be more appropriate", "author": "marcomarasca", "createdAt": "2020-08-10T23:41:57Z", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/schema/SchemaValidationResultDaoImpl.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package org.sagebionetworks.repo.model.dbo.schema;\n+\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_ALL_ERRORS;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_ERROR_MESSAGE;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_EXCEPTION;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_IS_VALID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_OBJECT_ETAG;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_OBJECT_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_OBJECT_TYPE;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_SCHEMA_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_VALIDATED_ON;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.TABLE_SCHEMA_VALIDATION_RESULTS;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Timestamp;\n+\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n+import org.sagebionetworks.repo.model.DatastoreException;\n+import org.sagebionetworks.repo.model.dbo.DBOBasicDao;\n+import org.sagebionetworks.repo.model.jdo.KeyFactory;\n+import org.sagebionetworks.repo.model.schema.ObjectType;\n+import org.sagebionetworks.repo.model.schema.ValidationResults;\n+import org.sagebionetworks.repo.transactions.WriteTransaction;\n+import org.sagebionetworks.repo.web.NotFoundException;\n+import org.sagebionetworks.schema.adapter.JSONObjectAdapter;\n+import org.sagebionetworks.schema.adapter.JSONObjectAdapterException;\n+import org.sagebionetworks.schema.adapter.org.json.JSONObjectAdapterImpl;\n+import org.sagebionetworks.util.ValidateArgument;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.RowMapper;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class SchemaValidationResultDaoImpl implements SchemaValidationResultDao {\n+\n+\tprivate JdbcTemplate jdbcTemplate;\n+\tprivate DBOBasicDao basicDao;\n+\n+\t@Autowired\n+\tpublic SchemaValidationResultDaoImpl(JdbcTemplate jdbcTemplate, DBOBasicDao basicDao) {\n+\t\tsuper();\n+\t\tthis.jdbcTemplate = jdbcTemplate;\n+\t\tthis.basicDao = basicDao;\n+\t}\n+\n+\tstatic RowMapper<ValidationResults> MAPPER = new RowMapper<ValidationResults>() {\n+\n+\t\t@Override\n+\t\tpublic ValidationResults mapRow(ResultSet rs, int rowNum) throws SQLException {\n+\t\t\tValidationResults dto = new ValidationResults();\n+\t\t\tString allErrorsJson = rs.getString(COL_JSON_SCHEMA_VALIDATION_ALL_ERRORS);\n+\t\t\tString validationExceptionJson = rs.getString(COL_JSON_SCHEMA_VALIDATION_EXCEPTION);\n+\t\t\tJSONObject json = new JSONObject();\n+\t\t\tif (allErrorsJson != null) {\n+\t\t\t\tjson.put(\"allValidationMessages\", new JSONArray(allErrorsJson));\n+\t\t\t}\n+\t\t\tif (validationExceptionJson != null) {\n+\t\t\t\tjson.put(\"validationException\", new JSONObject(validationExceptionJson));\n+\t\t\t}\n+\t\t\ttry {\n+\t\t\t\tdto.initializeFromJSONObject(new JSONObjectAdapterImpl(json));\n+\t\t\t} catch (JSONObjectAdapterException e) {\n+\t\t\t\tthrow new RuntimeException(e);", "originalCommit": "dbe779e7cb812854a47b70f3921dbeeb1f31767e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0NTQ3OQ==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4154#discussion_r468245479", "bodyText": "You might want to extract the fields as constants", "author": "marcomarasca", "createdAt": "2020-08-10T23:44:58Z", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/schema/SchemaValidationResultDaoImpl.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package org.sagebionetworks.repo.model.dbo.schema;\n+\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_ALL_ERRORS;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_ERROR_MESSAGE;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_EXCEPTION;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_IS_VALID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_OBJECT_ETAG;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_OBJECT_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_OBJECT_TYPE;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_SCHEMA_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_VALIDATED_ON;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.TABLE_SCHEMA_VALIDATION_RESULTS;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Timestamp;\n+\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n+import org.sagebionetworks.repo.model.DatastoreException;\n+import org.sagebionetworks.repo.model.dbo.DBOBasicDao;\n+import org.sagebionetworks.repo.model.jdo.KeyFactory;\n+import org.sagebionetworks.repo.model.schema.ObjectType;\n+import org.sagebionetworks.repo.model.schema.ValidationResults;\n+import org.sagebionetworks.repo.transactions.WriteTransaction;\n+import org.sagebionetworks.repo.web.NotFoundException;\n+import org.sagebionetworks.schema.adapter.JSONObjectAdapter;\n+import org.sagebionetworks.schema.adapter.JSONObjectAdapterException;\n+import org.sagebionetworks.schema.adapter.org.json.JSONObjectAdapterImpl;\n+import org.sagebionetworks.util.ValidateArgument;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.RowMapper;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class SchemaValidationResultDaoImpl implements SchemaValidationResultDao {\n+\n+\tprivate JdbcTemplate jdbcTemplate;\n+\tprivate DBOBasicDao basicDao;\n+\n+\t@Autowired\n+\tpublic SchemaValidationResultDaoImpl(JdbcTemplate jdbcTemplate, DBOBasicDao basicDao) {\n+\t\tsuper();\n+\t\tthis.jdbcTemplate = jdbcTemplate;\n+\t\tthis.basicDao = basicDao;\n+\t}\n+\n+\tstatic RowMapper<ValidationResults> MAPPER = new RowMapper<ValidationResults>() {\n+\n+\t\t@Override\n+\t\tpublic ValidationResults mapRow(ResultSet rs, int rowNum) throws SQLException {\n+\t\t\tValidationResults dto = new ValidationResults();\n+\t\t\tString allErrorsJson = rs.getString(COL_JSON_SCHEMA_VALIDATION_ALL_ERRORS);\n+\t\t\tString validationExceptionJson = rs.getString(COL_JSON_SCHEMA_VALIDATION_EXCEPTION);\n+\t\t\tJSONObject json = new JSONObject();\n+\t\t\tif (allErrorsJson != null) {\n+\t\t\t\tjson.put(\"allValidationMessages\", new JSONArray(allErrorsJson));\n+\t\t\t}\n+\t\t\tif (validationExceptionJson != null) {\n+\t\t\t\tjson.put(\"validationException\", new JSONObject(validationExceptionJson));\n+\t\t\t}\n+\t\t\ttry {\n+\t\t\t\tdto.initializeFromJSONObject(new JSONObjectAdapterImpl(json));\n+\t\t\t} catch (JSONObjectAdapterException e) {\n+\t\t\t\tthrow new RuntimeException(e);\n+\t\t\t}\n+\t\t\tdto.setObjectType(ObjectType.valueOf(rs.getString(COL_JSON_SCHEMA_VALIDATION_OBJECT_TYPE)));\n+\t\t\tLong objectIdLong = rs.getLong(COL_JSON_SCHEMA_VALIDATION_OBJECT_ID);\n+\t\t\tif (ObjectType.entity.equals(dto.getObjectType())) {\n+\t\t\t\tdto.setObjectId(KeyFactory.keyToString(objectIdLong));\n+\t\t\t} else {\n+\t\t\t\tdto.setObjectId(objectIdLong.toString());\n+\t\t\t}\n+\t\t\tdto.setObjectEtag(rs.getString(COL_JSON_SCHEMA_VALIDATION_OBJECT_ETAG));\n+\t\t\tdto.setSchema$id(rs.getString(COL_JSON_SCHEMA_VALIDATION_SCHEMA_ID));\n+\t\t\tdto.setIsValid(rs.getBoolean(COL_JSON_SCHEMA_VALIDATION_IS_VALID));\n+\t\t\tdto.setValidatedOn(rs.getTimestamp(COL_JSON_SCHEMA_VALIDATION_VALIDATED_ON));\n+\t\t\tdto.setValidationErrorMessage(rs.getString(COL_JSON_SCHEMA_VALIDATION_ERROR_MESSAGE));\n+\t\t\treturn dto;\n+\t\t}\n+\t};\n+\n+\t@WriteTransaction\n+\t@Override\n+\tpublic void clearResults(String objectid, ObjectType objectType) {\n+\t\tValidateArgument.required(objectid, \"objectId\");\n+\t\tValidateArgument.required(objectType, \"objectType\");\n+\t\tjdbcTemplate.update(\n+\t\t\t\t\"DELETE FROM \" + TABLE_SCHEMA_VALIDATION_RESULTS + \" WHERE \" + COL_JSON_SCHEMA_VALIDATION_OBJECT_ID\n+\t\t\t\t\t\t+ \" = ? AND \" + COL_JSON_SCHEMA_VALIDATION_OBJECT_TYPE + \" = ?\",\n+\t\t\t\tKeyFactory.stringToKey(objectid), objectType.name());\n+\t}\n+\n+\t@WriteTransaction\n+\t@Override\n+\tpublic void createOrUpdateResults(ValidationResults results) {\n+\t\tDBOSchemaValidationResults dbo = translateDTOtoDBO(results);\n+\t\tbasicDao.createOrUpdate(dbo);\n+\t}\n+\n+\t/**\n+\t * Translate from the given DTO to a DBO.\n+\t * \n+\t * @param results\n+\t * @return\n+\t */\n+\tstatic DBOSchemaValidationResults translateDTOtoDBO(ValidationResults results) {\n+\t\tValidateArgument.required(results, \"results\");\n+\t\tValidateArgument.required(results.getObjectId(), \"results.objectId\");\n+\t\tValidateArgument.required(results.getObjectType(), \"results.objectType\");\n+\t\tValidateArgument.required(results.getObjectEtag(), \"results.objectEtag\");\n+\t\tValidateArgument.required(results.getSchema$id(), \"results.schema$id\");\n+\t\tValidateArgument.required(results.getIsValid(), \"results.isValid\");\n+\t\tValidateArgument.required(results.getValidatedOn(), \"results.validateOn\");\n+\n+\t\tJSONObject json = new JSONObject();\n+\t\tJSONObjectAdapter adapter = new JSONObjectAdapterImpl(json);\n+\t\ttry {\n+\t\t\tresults.writeToJSONObject(adapter);\n+\t\t} catch (JSONObjectAdapterException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t\tDBOSchemaValidationResults dbo = new DBOSchemaValidationResults();\n+\t\tdbo.setObjectId(KeyFactory.stringToKey(results.getObjectId()));\n+\t\tdbo.setObjectType(results.getObjectType().toString());\n+\t\tdbo.setObjectEtag(results.getObjectEtag());\n+\t\tdbo.setSchema$id(results.getSchema$id());\n+\t\tdbo.setIsValid(results.getIsValid());\n+\t\tdbo.setValidatedOn(new Timestamp(results.getValidatedOn().getTime()));\n+\t\tdbo.setErrorMessage(results.getValidationErrorMessage());\n+\t\tif (json.has(\"allValidationMessages\")) {\n+\t\t\tJSONArray allMessages = json.getJSONArray(\"allValidationMessages\");", "originalCommit": "dbe779e7cb812854a47b70f3921dbeeb1f31767e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}