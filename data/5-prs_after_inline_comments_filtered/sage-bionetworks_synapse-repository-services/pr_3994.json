{"pr_number": 3994, "pr_title": "Plfm 6161 id parser", "pr_createdAt": "2020-04-09T01:57:02Z", "pr_url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3994", "timeline": [{"oid": "f213a7b027b8ab627ae4432f529beefa3b52fd65", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/f213a7b027b8ab627ae4432f529beefa3b52fd65", "message": "starting new schema  parser including sementic versioning", "committedDate": "2020-04-08T02:38:11Z", "type": "commit"}, {"oid": "c78263603d330ef1bcdd706a4cecdc7596262017", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/c78263603d330ef1bcdd706a4cecdc7596262017", "message": "semantic version parsing done", "committedDate": "2020-04-09T01:55:59Z", "type": "commit"}, {"oid": "c43b31f5fe08f232fe7965b86edaa0407db83543", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/c43b31f5fe08f232fe7965b86edaa0407db83543", "message": "testing for parse messages does not work", "committedDate": "2020-04-09T02:20:47Z", "type": "commit"}, {"oid": "51b847b44f8925f9483e0f9a415834c60bfaa8d6", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/51b847b44f8925f9483e0f9a415834c60bfaa8d6", "message": "support for full  parsing", "committedDate": "2020-04-10T00:04:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU1Njk1Nw==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3994#discussion_r406556957", "bodyText": "This should probably throw", "author": "marcomarasca", "createdAt": "2020-04-10T01:14:43Z", "path": "lib/lib-schema-id/src/test/java/org/sagebionetworks/schema/SchemaIdParserTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+package org.sagebionetworks.schema;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import org.junit.jupiter.api.Test;\n+import org.sagebionetworks.schema.id.DotSeparatedAlphaNumeric;\n+import org.sagebionetworks.schema.id.OrganizationName;\n+import org.sagebionetworks.schema.id.SchemaId;\n+import org.sagebionetworks.schema.id.SchemaName;\n+import org.sagebionetworks.schema.parser.ParseException;\n+import org.sagebionetworks.schema.parser.SchemaIdParser;\n+import org.sagebionetworks.schema.semantic.version.AlphanumericIdentifier;\n+import org.sagebionetworks.schema.semantic.version.Build;\n+import org.sagebionetworks.schema.semantic.version.NumericIdentifier;\n+import org.sagebionetworks.schema.semantic.version.Prerelease;\n+import org.sagebionetworks.schema.semantic.version.PrereleaseIdentifier;\n+import org.sagebionetworks.schema.semantic.version.SemanticVersion;\n+import org.sagebionetworks.schema.semantic.version.VersionCore;\n+\n+public class SchemaIdParserTest {\n+\t\n+\n+\t@Test\n+\tpublic void testNumericIdentifier() throws ParseException {\n+\t\t// test all numbers from 0 to 100\n+\t\tfor(long i = 0; i<100; i++) {\n+\t\t\tnumericTest(i, Long.toString(i));\n+\t\t}\n+\t}\n+\t\n+\tvoid numericTest(Long expected, String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tNumericIdentifier numericId = parser.numericIdentifier();\n+\t\tassertEquals(new NumericIdentifier(expected), numericId);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCore() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.0.2\");\n+\t\tVersionCore core = parser.versionCore();\n+\t\tassertNotNull(core);\n+\t\tassertEquals(1L, core.getMajor().getValue());\n+\t\tassertEquals(0L, core.getMinor().getValue());\n+\t\tassertEquals(2L, core.getPatch().getValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreAllZeros() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"0.0.0\");\n+\t\tVersionCore core = parser.versionCore();\n+\t\tassertNotNull(core);\n+\t\tassertEquals(0L, core.getMajor().getValue());\n+\t\tassertEquals(0L, core.getMinor().getValue());\n+\t\tassertEquals(0L, core.getPatch().getValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreMajorLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"01.0.2\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.versionCore();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreMinorLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.05.2\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.versionCore();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCorePatchLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.5.02\");", "originalCommit": "51b847b44f8925f9483e0f9a415834c60bfaa8d6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU1ODAwNA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3994#discussion_r406558004", "bodyText": "Add case aaa123", "author": "marcomarasca", "createdAt": "2020-04-10T01:19:09Z", "path": "lib/lib-schema-id/src/test/java/org/sagebionetworks/schema/SchemaIdParserTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+package org.sagebionetworks.schema;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import org.junit.jupiter.api.Test;\n+import org.sagebionetworks.schema.id.DotSeparatedAlphaNumeric;\n+import org.sagebionetworks.schema.id.OrganizationName;\n+import org.sagebionetworks.schema.id.SchemaId;\n+import org.sagebionetworks.schema.id.SchemaName;\n+import org.sagebionetworks.schema.parser.ParseException;\n+import org.sagebionetworks.schema.parser.SchemaIdParser;\n+import org.sagebionetworks.schema.semantic.version.AlphanumericIdentifier;\n+import org.sagebionetworks.schema.semantic.version.Build;\n+import org.sagebionetworks.schema.semantic.version.NumericIdentifier;\n+import org.sagebionetworks.schema.semantic.version.Prerelease;\n+import org.sagebionetworks.schema.semantic.version.PrereleaseIdentifier;\n+import org.sagebionetworks.schema.semantic.version.SemanticVersion;\n+import org.sagebionetworks.schema.semantic.version.VersionCore;\n+\n+public class SchemaIdParserTest {\n+\t\n+\n+\t@Test\n+\tpublic void testNumericIdentifier() throws ParseException {\n+\t\t// test all numbers from 0 to 100\n+\t\tfor(long i = 0; i<100; i++) {\n+\t\t\tnumericTest(i, Long.toString(i));\n+\t\t}\n+\t}\n+\t\n+\tvoid numericTest(Long expected, String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tNumericIdentifier numericId = parser.numericIdentifier();\n+\t\tassertEquals(new NumericIdentifier(expected), numericId);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCore() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.0.2\");\n+\t\tVersionCore core = parser.versionCore();\n+\t\tassertNotNull(core);\n+\t\tassertEquals(1L, core.getMajor().getValue());\n+\t\tassertEquals(0L, core.getMinor().getValue());\n+\t\tassertEquals(2L, core.getPatch().getValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreAllZeros() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"0.0.0\");\n+\t\tVersionCore core = parser.versionCore();\n+\t\tassertNotNull(core);\n+\t\tassertEquals(0L, core.getMajor().getValue());\n+\t\tassertEquals(0L, core.getMinor().getValue());\n+\t\tassertEquals(0L, core.getPatch().getValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreMajorLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"01.0.2\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.versionCore();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreMinorLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.05.2\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.versionCore();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCorePatchLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.5.02\");\n+\t\t// while this will parse everything after the zero is lost, so it would fail in a larger context\n+\t\tVersionCore core = parser.versionCore();\n+\t\t// confirm the 2 is lost\n+\t\tassertEquals(\"1.5.0\", core.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testAlphaNumeric() throws ParseException {\n+\t\ttestAlphanumericIdentifier(\"-\");\n+\t\ttestAlphanumericIdentifier(\"a\");\n+\t\ttestAlphanumericIdentifier(\"a1123\");", "originalCommit": "51b847b44f8925f9483e0f9a415834c60bfaa8d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU1ODM5OQ==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3994#discussion_r406558399", "bodyText": "Also single 0 is allowed", "author": "marcomarasca", "createdAt": "2020-04-10T01:20:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU1ODAwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2MDEwNg==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3994#discussion_r406560106", "bodyText": "missing core+build only", "author": "marcomarasca", "createdAt": "2020-04-10T01:27:58Z", "path": "lib/lib-schema-id/src/test/java/org/sagebionetworks/schema/SchemaIdParserTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+package org.sagebionetworks.schema;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import org.junit.jupiter.api.Test;\n+import org.sagebionetworks.schema.id.DotSeparatedAlphaNumeric;\n+import org.sagebionetworks.schema.id.OrganizationName;\n+import org.sagebionetworks.schema.id.SchemaId;\n+import org.sagebionetworks.schema.id.SchemaName;\n+import org.sagebionetworks.schema.parser.ParseException;\n+import org.sagebionetworks.schema.parser.SchemaIdParser;\n+import org.sagebionetworks.schema.semantic.version.AlphanumericIdentifier;\n+import org.sagebionetworks.schema.semantic.version.Build;\n+import org.sagebionetworks.schema.semantic.version.NumericIdentifier;\n+import org.sagebionetworks.schema.semantic.version.Prerelease;\n+import org.sagebionetworks.schema.semantic.version.PrereleaseIdentifier;\n+import org.sagebionetworks.schema.semantic.version.SemanticVersion;\n+import org.sagebionetworks.schema.semantic.version.VersionCore;\n+\n+public class SchemaIdParserTest {\n+\t\n+\n+\t@Test\n+\tpublic void testNumericIdentifier() throws ParseException {\n+\t\t// test all numbers from 0 to 100\n+\t\tfor(long i = 0; i<100; i++) {\n+\t\t\tnumericTest(i, Long.toString(i));\n+\t\t}\n+\t}\n+\t\n+\tvoid numericTest(Long expected, String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tNumericIdentifier numericId = parser.numericIdentifier();\n+\t\tassertEquals(new NumericIdentifier(expected), numericId);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCore() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.0.2\");\n+\t\tVersionCore core = parser.versionCore();\n+\t\tassertNotNull(core);\n+\t\tassertEquals(1L, core.getMajor().getValue());\n+\t\tassertEquals(0L, core.getMinor().getValue());\n+\t\tassertEquals(2L, core.getPatch().getValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreAllZeros() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"0.0.0\");\n+\t\tVersionCore core = parser.versionCore();\n+\t\tassertNotNull(core);\n+\t\tassertEquals(0L, core.getMajor().getValue());\n+\t\tassertEquals(0L, core.getMinor().getValue());\n+\t\tassertEquals(0L, core.getPatch().getValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreMajorLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"01.0.2\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.versionCore();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreMinorLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.05.2\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.versionCore();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCorePatchLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.5.02\");\n+\t\t// while this will parse everything after the zero is lost, so it would fail in a larger context\n+\t\tVersionCore core = parser.versionCore();\n+\t\t// confirm the 2 is lost\n+\t\tassertEquals(\"1.5.0\", core.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testAlphaNumeric() throws ParseException {\n+\t\ttestAlphanumericIdentifier(\"-\");\n+\t\ttestAlphanumericIdentifier(\"a\");\n+\t\ttestAlphanumericIdentifier(\"a1123\");\n+\t\ttestAlphanumericIdentifier(\"abcdefghijklmnopqurstuvwxyz\");\n+\t\ttestAlphanumericIdentifier(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n+\t\ttestAlphanumericIdentifier(\"z1-z2\");\n+\t}\n+\t\n+\tpublic void testAlphanumericIdentifier(String toTest) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(toTest);\n+\t\tAlphanumericIdentifier alphanumeric = parser.alphanumericIdentifier();\n+\t\tassertEquals(toTest, alphanumeric.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testAlphaNumericStartWithNumber() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"9abc\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.alphanumericIdentifier();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testAlphaNumericStartWithZero() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"0123\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.alphanumericIdentifier();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPrereleaseIdentifier() throws ParseException {\n+\t\ttestPrereleaseIdentifier(\"123\");\n+\t\ttestPrereleaseIdentifier(\"-abc\");\n+\t}\n+\t\n+\tpublic void testPrereleaseIdentifier(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tPrereleaseIdentifier prereleaseIdentifier = parser.prereleaseIdentifier();\n+\t\tassertEquals(prereleaseIdentifier.toString(), input);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPrereleaseIdentifierStartWithZero() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"045\");\n+\t\t// while this does not fail it does not parse anything after the zero\n+\t\tPrereleaseIdentifier prereleaseIdentifier = parser.prereleaseIdentifier();\n+\t\t// digits after the zero are lost\n+\t\tassertEquals(\"0\", prereleaseIdentifier.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPrerelease() throws ParseException {\n+\t\ttestPrerelease(\"alpha\");\n+\t\ttestPrerelease(\"alpha.1\");\n+\t\ttestPrerelease(\"0.3.7\");\n+\t\ttestPrerelease(\"x.7.z.92\");\n+\t}\n+\t\n+\tpublic void testPrerelease(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tPrerelease prerelease = parser.prerelease();\n+\t\tassertEquals(prerelease.toString(), input);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testBuild() throws ParseException {\n+\t\ttestBuild(\"001\");\n+\t\ttestBuild(\"20130313144700\");\n+\t\ttestBuild(\"exp.sha.5114f85\");\n+\t}\n+\t\n+\tpublic void testBuild(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tBuild build = parser.build();\n+\t\tassertEquals(build.toString(), input);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testSemanticVersion() throws ParseException {\n+\t\ttestSemanticVersion(\"0.0.0\");\n+\t\ttestSemanticVersion(\"1.23.456\");\n+\t\ttestSemanticVersion(\"1.23.456-x.7.z.92\");\n+\t\ttestSemanticVersion(\"1.23.456-x.7.z.92+exp.sha.5114f85\");", "originalCommit": "51b847b44f8925f9483e0f9a415834c60bfaa8d6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2MDQ0Ng==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3994#discussion_r406560446", "bodyText": "Add test for dotSeparatedAlphanumeritc that starts with a dot (and fails)", "author": "marcomarasca", "createdAt": "2020-04-10T01:29:26Z", "path": "lib/lib-schema-id/src/test/java/org/sagebionetworks/schema/SchemaIdParserTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+package org.sagebionetworks.schema;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import org.junit.jupiter.api.Test;\n+import org.sagebionetworks.schema.id.DotSeparatedAlphaNumeric;\n+import org.sagebionetworks.schema.id.OrganizationName;\n+import org.sagebionetworks.schema.id.SchemaId;\n+import org.sagebionetworks.schema.id.SchemaName;\n+import org.sagebionetworks.schema.parser.ParseException;\n+import org.sagebionetworks.schema.parser.SchemaIdParser;\n+import org.sagebionetworks.schema.semantic.version.AlphanumericIdentifier;\n+import org.sagebionetworks.schema.semantic.version.Build;\n+import org.sagebionetworks.schema.semantic.version.NumericIdentifier;\n+import org.sagebionetworks.schema.semantic.version.Prerelease;\n+import org.sagebionetworks.schema.semantic.version.PrereleaseIdentifier;\n+import org.sagebionetworks.schema.semantic.version.SemanticVersion;\n+import org.sagebionetworks.schema.semantic.version.VersionCore;\n+\n+public class SchemaIdParserTest {\n+\t\n+\n+\t@Test\n+\tpublic void testNumericIdentifier() throws ParseException {\n+\t\t// test all numbers from 0 to 100\n+\t\tfor(long i = 0; i<100; i++) {\n+\t\t\tnumericTest(i, Long.toString(i));\n+\t\t}\n+\t}\n+\t\n+\tvoid numericTest(Long expected, String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tNumericIdentifier numericId = parser.numericIdentifier();\n+\t\tassertEquals(new NumericIdentifier(expected), numericId);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCore() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.0.2\");\n+\t\tVersionCore core = parser.versionCore();\n+\t\tassertNotNull(core);\n+\t\tassertEquals(1L, core.getMajor().getValue());\n+\t\tassertEquals(0L, core.getMinor().getValue());\n+\t\tassertEquals(2L, core.getPatch().getValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreAllZeros() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"0.0.0\");\n+\t\tVersionCore core = parser.versionCore();\n+\t\tassertNotNull(core);\n+\t\tassertEquals(0L, core.getMajor().getValue());\n+\t\tassertEquals(0L, core.getMinor().getValue());\n+\t\tassertEquals(0L, core.getPatch().getValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreMajorLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"01.0.2\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.versionCore();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreMinorLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.05.2\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.versionCore();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCorePatchLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.5.02\");\n+\t\t// while this will parse everything after the zero is lost, so it would fail in a larger context\n+\t\tVersionCore core = parser.versionCore();\n+\t\t// confirm the 2 is lost\n+\t\tassertEquals(\"1.5.0\", core.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testAlphaNumeric() throws ParseException {\n+\t\ttestAlphanumericIdentifier(\"-\");\n+\t\ttestAlphanumericIdentifier(\"a\");\n+\t\ttestAlphanumericIdentifier(\"a1123\");\n+\t\ttestAlphanumericIdentifier(\"abcdefghijklmnopqurstuvwxyz\");\n+\t\ttestAlphanumericIdentifier(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n+\t\ttestAlphanumericIdentifier(\"z1-z2\");\n+\t}\n+\t\n+\tpublic void testAlphanumericIdentifier(String toTest) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(toTest);\n+\t\tAlphanumericIdentifier alphanumeric = parser.alphanumericIdentifier();\n+\t\tassertEquals(toTest, alphanumeric.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testAlphaNumericStartWithNumber() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"9abc\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.alphanumericIdentifier();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testAlphaNumericStartWithZero() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"0123\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.alphanumericIdentifier();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPrereleaseIdentifier() throws ParseException {\n+\t\ttestPrereleaseIdentifier(\"123\");\n+\t\ttestPrereleaseIdentifier(\"-abc\");\n+\t}\n+\t\n+\tpublic void testPrereleaseIdentifier(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tPrereleaseIdentifier prereleaseIdentifier = parser.prereleaseIdentifier();\n+\t\tassertEquals(prereleaseIdentifier.toString(), input);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPrereleaseIdentifierStartWithZero() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"045\");\n+\t\t// while this does not fail it does not parse anything after the zero\n+\t\tPrereleaseIdentifier prereleaseIdentifier = parser.prereleaseIdentifier();\n+\t\t// digits after the zero are lost\n+\t\tassertEquals(\"0\", prereleaseIdentifier.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPrerelease() throws ParseException {\n+\t\ttestPrerelease(\"alpha\");\n+\t\ttestPrerelease(\"alpha.1\");\n+\t\ttestPrerelease(\"0.3.7\");\n+\t\ttestPrerelease(\"x.7.z.92\");\n+\t}\n+\t\n+\tpublic void testPrerelease(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tPrerelease prerelease = parser.prerelease();\n+\t\tassertEquals(prerelease.toString(), input);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testBuild() throws ParseException {\n+\t\ttestBuild(\"001\");\n+\t\ttestBuild(\"20130313144700\");\n+\t\ttestBuild(\"exp.sha.5114f85\");\n+\t}\n+\t\n+\tpublic void testBuild(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tBuild build = parser.build();\n+\t\tassertEquals(build.toString(), input);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testSemanticVersion() throws ParseException {\n+\t\ttestSemanticVersion(\"0.0.0\");\n+\t\ttestSemanticVersion(\"1.23.456\");\n+\t\ttestSemanticVersion(\"1.23.456-x.7.z.92\");\n+\t\ttestSemanticVersion(\"1.23.456-x.7.z.92+exp.sha.5114f85\");\n+\t}\n+\t\n+\tpublic void testSemanticVersion(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tSemanticVersion semanticVersion = parser.semanticVersion();\n+\t\tassertEquals(input, semanticVersion.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testDotSeparatedAlphanumeric() throws ParseException {\n+\t\ttestDotSeparatedAlphanumeric(\"abc\");\n+\t\ttestDotSeparatedAlphanumeric(\"abc.xyz\");\n+\t\ttestDotSeparatedAlphanumeric(\"a1.b-3.c4123\");\n+\t}\n+\t\n+\tpublic void testDotSeparatedAlphanumeric(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tDotSeparatedAlphaNumeric dotSeparatedAlphaNumeric = parser.dotSeparatedAlphaNumeric();\n+\t\tassertEquals(input, dotSeparatedAlphaNumeric.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testDotSeparatedAlphanumericStartsWithNumber() {\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\ttestDotSeparatedAlphanumeric(\"1abc\");\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testDotSeparatedAlphanumericStartsWithZero() {\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\ttestDotSeparatedAlphanumeric(\"0\");\n+\t\t});\n+\t}", "originalCommit": "51b847b44f8925f9483e0f9a415834c60bfaa8d6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2MDgzMg==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3994#discussion_r406560832", "bodyText": "Add tests for failing cases", "author": "marcomarasca", "createdAt": "2020-04-10T01:31:28Z", "path": "lib/lib-schema-id/src/test/java/org/sagebionetworks/schema/SchemaIdParserTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+package org.sagebionetworks.schema;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import org.junit.jupiter.api.Test;\n+import org.sagebionetworks.schema.id.DotSeparatedAlphaNumeric;\n+import org.sagebionetworks.schema.id.OrganizationName;\n+import org.sagebionetworks.schema.id.SchemaId;\n+import org.sagebionetworks.schema.id.SchemaName;\n+import org.sagebionetworks.schema.parser.ParseException;\n+import org.sagebionetworks.schema.parser.SchemaIdParser;\n+import org.sagebionetworks.schema.semantic.version.AlphanumericIdentifier;\n+import org.sagebionetworks.schema.semantic.version.Build;\n+import org.sagebionetworks.schema.semantic.version.NumericIdentifier;\n+import org.sagebionetworks.schema.semantic.version.Prerelease;\n+import org.sagebionetworks.schema.semantic.version.PrereleaseIdentifier;\n+import org.sagebionetworks.schema.semantic.version.SemanticVersion;\n+import org.sagebionetworks.schema.semantic.version.VersionCore;\n+\n+public class SchemaIdParserTest {\n+\t\n+\n+\t@Test\n+\tpublic void testNumericIdentifier() throws ParseException {\n+\t\t// test all numbers from 0 to 100\n+\t\tfor(long i = 0; i<100; i++) {\n+\t\t\tnumericTest(i, Long.toString(i));\n+\t\t}\n+\t}\n+\t\n+\tvoid numericTest(Long expected, String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tNumericIdentifier numericId = parser.numericIdentifier();\n+\t\tassertEquals(new NumericIdentifier(expected), numericId);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCore() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.0.2\");\n+\t\tVersionCore core = parser.versionCore();\n+\t\tassertNotNull(core);\n+\t\tassertEquals(1L, core.getMajor().getValue());\n+\t\tassertEquals(0L, core.getMinor().getValue());\n+\t\tassertEquals(2L, core.getPatch().getValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreAllZeros() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"0.0.0\");\n+\t\tVersionCore core = parser.versionCore();\n+\t\tassertNotNull(core);\n+\t\tassertEquals(0L, core.getMajor().getValue());\n+\t\tassertEquals(0L, core.getMinor().getValue());\n+\t\tassertEquals(0L, core.getPatch().getValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreMajorLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"01.0.2\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.versionCore();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreMinorLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.05.2\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.versionCore();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCorePatchLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.5.02\");\n+\t\t// while this will parse everything after the zero is lost, so it would fail in a larger context\n+\t\tVersionCore core = parser.versionCore();\n+\t\t// confirm the 2 is lost\n+\t\tassertEquals(\"1.5.0\", core.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testAlphaNumeric() throws ParseException {\n+\t\ttestAlphanumericIdentifier(\"-\");\n+\t\ttestAlphanumericIdentifier(\"a\");\n+\t\ttestAlphanumericIdentifier(\"a1123\");\n+\t\ttestAlphanumericIdentifier(\"abcdefghijklmnopqurstuvwxyz\");\n+\t\ttestAlphanumericIdentifier(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n+\t\ttestAlphanumericIdentifier(\"z1-z2\");\n+\t}\n+\t\n+\tpublic void testAlphanumericIdentifier(String toTest) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(toTest);\n+\t\tAlphanumericIdentifier alphanumeric = parser.alphanumericIdentifier();\n+\t\tassertEquals(toTest, alphanumeric.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testAlphaNumericStartWithNumber() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"9abc\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.alphanumericIdentifier();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testAlphaNumericStartWithZero() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"0123\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.alphanumericIdentifier();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPrereleaseIdentifier() throws ParseException {\n+\t\ttestPrereleaseIdentifier(\"123\");\n+\t\ttestPrereleaseIdentifier(\"-abc\");\n+\t}\n+\t\n+\tpublic void testPrereleaseIdentifier(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tPrereleaseIdentifier prereleaseIdentifier = parser.prereleaseIdentifier();\n+\t\tassertEquals(prereleaseIdentifier.toString(), input);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPrereleaseIdentifierStartWithZero() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"045\");\n+\t\t// while this does not fail it does not parse anything after the zero\n+\t\tPrereleaseIdentifier prereleaseIdentifier = parser.prereleaseIdentifier();\n+\t\t// digits after the zero are lost\n+\t\tassertEquals(\"0\", prereleaseIdentifier.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPrerelease() throws ParseException {\n+\t\ttestPrerelease(\"alpha\");\n+\t\ttestPrerelease(\"alpha.1\");\n+\t\ttestPrerelease(\"0.3.7\");\n+\t\ttestPrerelease(\"x.7.z.92\");\n+\t}\n+\t\n+\tpublic void testPrerelease(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tPrerelease prerelease = parser.prerelease();\n+\t\tassertEquals(prerelease.toString(), input);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testBuild() throws ParseException {\n+\t\ttestBuild(\"001\");\n+\t\ttestBuild(\"20130313144700\");\n+\t\ttestBuild(\"exp.sha.5114f85\");\n+\t}\n+\t\n+\tpublic void testBuild(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tBuild build = parser.build();\n+\t\tassertEquals(build.toString(), input);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testSemanticVersion() throws ParseException {\n+\t\ttestSemanticVersion(\"0.0.0\");\n+\t\ttestSemanticVersion(\"1.23.456\");\n+\t\ttestSemanticVersion(\"1.23.456-x.7.z.92\");\n+\t\ttestSemanticVersion(\"1.23.456-x.7.z.92+exp.sha.5114f85\");\n+\t}\n+\t\n+\tpublic void testSemanticVersion(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tSemanticVersion semanticVersion = parser.semanticVersion();\n+\t\tassertEquals(input, semanticVersion.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testDotSeparatedAlphanumeric() throws ParseException {\n+\t\ttestDotSeparatedAlphanumeric(\"abc\");\n+\t\ttestDotSeparatedAlphanumeric(\"abc.xyz\");\n+\t\ttestDotSeparatedAlphanumeric(\"a1.b-3.c4123\");\n+\t}\n+\t\n+\tpublic void testDotSeparatedAlphanumeric(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tDotSeparatedAlphaNumeric dotSeparatedAlphaNumeric = parser.dotSeparatedAlphaNumeric();\n+\t\tassertEquals(input, dotSeparatedAlphaNumeric.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testDotSeparatedAlphanumericStartsWithNumber() {\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\ttestDotSeparatedAlphanumeric(\"1abc\");\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testDotSeparatedAlphanumericStartsWithZero() {\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\ttestDotSeparatedAlphanumeric(\"0\");\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testOrganziationName() throws ParseException {\n+\t\ttestOrganizationName(\"foo\");\n+\t\ttestOrganizationName(\"foo.bar.a1\");\n+\t}\n+\t", "originalCommit": "51b847b44f8925f9483e0f9a415834c60bfaa8d6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2MDk0OA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3994#discussion_r406560948", "bodyText": "Add additional tests (failing/more coverage)", "author": "marcomarasca", "createdAt": "2020-04-10T01:32:05Z", "path": "lib/lib-schema-id/src/test/java/org/sagebionetworks/schema/SchemaIdParserTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+package org.sagebionetworks.schema;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import org.junit.jupiter.api.Test;\n+import org.sagebionetworks.schema.id.DotSeparatedAlphaNumeric;\n+import org.sagebionetworks.schema.id.OrganizationName;\n+import org.sagebionetworks.schema.id.SchemaId;\n+import org.sagebionetworks.schema.id.SchemaName;\n+import org.sagebionetworks.schema.parser.ParseException;\n+import org.sagebionetworks.schema.parser.SchemaIdParser;\n+import org.sagebionetworks.schema.semantic.version.AlphanumericIdentifier;\n+import org.sagebionetworks.schema.semantic.version.Build;\n+import org.sagebionetworks.schema.semantic.version.NumericIdentifier;\n+import org.sagebionetworks.schema.semantic.version.Prerelease;\n+import org.sagebionetworks.schema.semantic.version.PrereleaseIdentifier;\n+import org.sagebionetworks.schema.semantic.version.SemanticVersion;\n+import org.sagebionetworks.schema.semantic.version.VersionCore;\n+\n+public class SchemaIdParserTest {\n+\t\n+\n+\t@Test\n+\tpublic void testNumericIdentifier() throws ParseException {\n+\t\t// test all numbers from 0 to 100\n+\t\tfor(long i = 0; i<100; i++) {\n+\t\t\tnumericTest(i, Long.toString(i));\n+\t\t}\n+\t}\n+\t\n+\tvoid numericTest(Long expected, String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tNumericIdentifier numericId = parser.numericIdentifier();\n+\t\tassertEquals(new NumericIdentifier(expected), numericId);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCore() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.0.2\");\n+\t\tVersionCore core = parser.versionCore();\n+\t\tassertNotNull(core);\n+\t\tassertEquals(1L, core.getMajor().getValue());\n+\t\tassertEquals(0L, core.getMinor().getValue());\n+\t\tassertEquals(2L, core.getPatch().getValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreAllZeros() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"0.0.0\");\n+\t\tVersionCore core = parser.versionCore();\n+\t\tassertNotNull(core);\n+\t\tassertEquals(0L, core.getMajor().getValue());\n+\t\tassertEquals(0L, core.getMinor().getValue());\n+\t\tassertEquals(0L, core.getPatch().getValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreMajorLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"01.0.2\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.versionCore();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreMinorLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.05.2\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.versionCore();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCorePatchLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.5.02\");\n+\t\t// while this will parse everything after the zero is lost, so it would fail in a larger context\n+\t\tVersionCore core = parser.versionCore();\n+\t\t// confirm the 2 is lost\n+\t\tassertEquals(\"1.5.0\", core.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testAlphaNumeric() throws ParseException {\n+\t\ttestAlphanumericIdentifier(\"-\");\n+\t\ttestAlphanumericIdentifier(\"a\");\n+\t\ttestAlphanumericIdentifier(\"a1123\");\n+\t\ttestAlphanumericIdentifier(\"abcdefghijklmnopqurstuvwxyz\");\n+\t\ttestAlphanumericIdentifier(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n+\t\ttestAlphanumericIdentifier(\"z1-z2\");\n+\t}\n+\t\n+\tpublic void testAlphanumericIdentifier(String toTest) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(toTest);\n+\t\tAlphanumericIdentifier alphanumeric = parser.alphanumericIdentifier();\n+\t\tassertEquals(toTest, alphanumeric.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testAlphaNumericStartWithNumber() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"9abc\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.alphanumericIdentifier();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testAlphaNumericStartWithZero() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"0123\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.alphanumericIdentifier();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPrereleaseIdentifier() throws ParseException {\n+\t\ttestPrereleaseIdentifier(\"123\");\n+\t\ttestPrereleaseIdentifier(\"-abc\");\n+\t}\n+\t\n+\tpublic void testPrereleaseIdentifier(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tPrereleaseIdentifier prereleaseIdentifier = parser.prereleaseIdentifier();\n+\t\tassertEquals(prereleaseIdentifier.toString(), input);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPrereleaseIdentifierStartWithZero() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"045\");\n+\t\t// while this does not fail it does not parse anything after the zero\n+\t\tPrereleaseIdentifier prereleaseIdentifier = parser.prereleaseIdentifier();\n+\t\t// digits after the zero are lost\n+\t\tassertEquals(\"0\", prereleaseIdentifier.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPrerelease() throws ParseException {\n+\t\ttestPrerelease(\"alpha\");\n+\t\ttestPrerelease(\"alpha.1\");\n+\t\ttestPrerelease(\"0.3.7\");\n+\t\ttestPrerelease(\"x.7.z.92\");\n+\t}\n+\t\n+\tpublic void testPrerelease(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tPrerelease prerelease = parser.prerelease();\n+\t\tassertEquals(prerelease.toString(), input);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testBuild() throws ParseException {\n+\t\ttestBuild(\"001\");\n+\t\ttestBuild(\"20130313144700\");\n+\t\ttestBuild(\"exp.sha.5114f85\");\n+\t}\n+\t\n+\tpublic void testBuild(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tBuild build = parser.build();\n+\t\tassertEquals(build.toString(), input);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testSemanticVersion() throws ParseException {\n+\t\ttestSemanticVersion(\"0.0.0\");\n+\t\ttestSemanticVersion(\"1.23.456\");\n+\t\ttestSemanticVersion(\"1.23.456-x.7.z.92\");\n+\t\ttestSemanticVersion(\"1.23.456-x.7.z.92+exp.sha.5114f85\");\n+\t}\n+\t\n+\tpublic void testSemanticVersion(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tSemanticVersion semanticVersion = parser.semanticVersion();\n+\t\tassertEquals(input, semanticVersion.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testDotSeparatedAlphanumeric() throws ParseException {\n+\t\ttestDotSeparatedAlphanumeric(\"abc\");\n+\t\ttestDotSeparatedAlphanumeric(\"abc.xyz\");\n+\t\ttestDotSeparatedAlphanumeric(\"a1.b-3.c4123\");\n+\t}\n+\t\n+\tpublic void testDotSeparatedAlphanumeric(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tDotSeparatedAlphaNumeric dotSeparatedAlphaNumeric = parser.dotSeparatedAlphaNumeric();\n+\t\tassertEquals(input, dotSeparatedAlphaNumeric.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testDotSeparatedAlphanumericStartsWithNumber() {\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\ttestDotSeparatedAlphanumeric(\"1abc\");\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testDotSeparatedAlphanumericStartsWithZero() {\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\ttestDotSeparatedAlphanumeric(\"0\");\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testOrganziationName() throws ParseException {\n+\t\ttestOrganizationName(\"foo\");\n+\t\ttestOrganizationName(\"foo.bar.a1\");\n+\t}\n+\t\n+\tpublic void testOrganizationName(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tOrganizationName organizationName = parser.organizationName();\n+\t\tassertEquals(input, organizationName.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testSchemaName() throws ParseException {\n+\t\ttestSchemaName(\"SomeClass\");\n+\t\ttestSchemaName(\"repo.model.SomeClass\");\n+\t}\n+\t\n+\tpublic void testSchemaName(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tSchemaName schemaName = parser.schemaName();\n+\t\tassertEquals(input, schemaName.toString());\n+\t}", "originalCommit": "51b847b44f8925f9483e0f9a415834c60bfaa8d6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2MTM1OQ==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3994#discussion_r406561359", "bodyText": "Add (failing) test for \"org.myorg/path.SomeClass/1.2.03", "author": "marcomarasca", "createdAt": "2020-04-10T01:33:55Z", "path": "lib/lib-schema-id/src/test/java/org/sagebionetworks/schema/SchemaIdParserTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+package org.sagebionetworks.schema;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import org.junit.jupiter.api.Test;\n+import org.sagebionetworks.schema.id.DotSeparatedAlphaNumeric;\n+import org.sagebionetworks.schema.id.OrganizationName;\n+import org.sagebionetworks.schema.id.SchemaId;\n+import org.sagebionetworks.schema.id.SchemaName;\n+import org.sagebionetworks.schema.parser.ParseException;\n+import org.sagebionetworks.schema.parser.SchemaIdParser;\n+import org.sagebionetworks.schema.semantic.version.AlphanumericIdentifier;\n+import org.sagebionetworks.schema.semantic.version.Build;\n+import org.sagebionetworks.schema.semantic.version.NumericIdentifier;\n+import org.sagebionetworks.schema.semantic.version.Prerelease;\n+import org.sagebionetworks.schema.semantic.version.PrereleaseIdentifier;\n+import org.sagebionetworks.schema.semantic.version.SemanticVersion;\n+import org.sagebionetworks.schema.semantic.version.VersionCore;\n+\n+public class SchemaIdParserTest {\n+\t\n+\n+\t@Test\n+\tpublic void testNumericIdentifier() throws ParseException {\n+\t\t// test all numbers from 0 to 100\n+\t\tfor(long i = 0; i<100; i++) {\n+\t\t\tnumericTest(i, Long.toString(i));\n+\t\t}\n+\t}\n+\t\n+\tvoid numericTest(Long expected, String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tNumericIdentifier numericId = parser.numericIdentifier();\n+\t\tassertEquals(new NumericIdentifier(expected), numericId);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCore() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.0.2\");\n+\t\tVersionCore core = parser.versionCore();\n+\t\tassertNotNull(core);\n+\t\tassertEquals(1L, core.getMajor().getValue());\n+\t\tassertEquals(0L, core.getMinor().getValue());\n+\t\tassertEquals(2L, core.getPatch().getValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreAllZeros() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"0.0.0\");\n+\t\tVersionCore core = parser.versionCore();\n+\t\tassertNotNull(core);\n+\t\tassertEquals(0L, core.getMajor().getValue());\n+\t\tassertEquals(0L, core.getMinor().getValue());\n+\t\tassertEquals(0L, core.getPatch().getValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreMajorLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"01.0.2\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.versionCore();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreMinorLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.05.2\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.versionCore();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCorePatchLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.5.02\");\n+\t\t// while this will parse everything after the zero is lost, so it would fail in a larger context\n+\t\tVersionCore core = parser.versionCore();\n+\t\t// confirm the 2 is lost\n+\t\tassertEquals(\"1.5.0\", core.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testAlphaNumeric() throws ParseException {\n+\t\ttestAlphanumericIdentifier(\"-\");\n+\t\ttestAlphanumericIdentifier(\"a\");\n+\t\ttestAlphanumericIdentifier(\"a1123\");\n+\t\ttestAlphanumericIdentifier(\"abcdefghijklmnopqurstuvwxyz\");\n+\t\ttestAlphanumericIdentifier(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n+\t\ttestAlphanumericIdentifier(\"z1-z2\");\n+\t}\n+\t\n+\tpublic void testAlphanumericIdentifier(String toTest) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(toTest);\n+\t\tAlphanumericIdentifier alphanumeric = parser.alphanumericIdentifier();\n+\t\tassertEquals(toTest, alphanumeric.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testAlphaNumericStartWithNumber() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"9abc\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.alphanumericIdentifier();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testAlphaNumericStartWithZero() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"0123\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.alphanumericIdentifier();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPrereleaseIdentifier() throws ParseException {\n+\t\ttestPrereleaseIdentifier(\"123\");\n+\t\ttestPrereleaseIdentifier(\"-abc\");\n+\t}\n+\t\n+\tpublic void testPrereleaseIdentifier(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tPrereleaseIdentifier prereleaseIdentifier = parser.prereleaseIdentifier();\n+\t\tassertEquals(prereleaseIdentifier.toString(), input);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPrereleaseIdentifierStartWithZero() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"045\");\n+\t\t// while this does not fail it does not parse anything after the zero\n+\t\tPrereleaseIdentifier prereleaseIdentifier = parser.prereleaseIdentifier();\n+\t\t// digits after the zero are lost\n+\t\tassertEquals(\"0\", prereleaseIdentifier.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPrerelease() throws ParseException {\n+\t\ttestPrerelease(\"alpha\");\n+\t\ttestPrerelease(\"alpha.1\");\n+\t\ttestPrerelease(\"0.3.7\");\n+\t\ttestPrerelease(\"x.7.z.92\");\n+\t}\n+\t\n+\tpublic void testPrerelease(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tPrerelease prerelease = parser.prerelease();\n+\t\tassertEquals(prerelease.toString(), input);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testBuild() throws ParseException {\n+\t\ttestBuild(\"001\");\n+\t\ttestBuild(\"20130313144700\");\n+\t\ttestBuild(\"exp.sha.5114f85\");\n+\t}\n+\t\n+\tpublic void testBuild(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tBuild build = parser.build();\n+\t\tassertEquals(build.toString(), input);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testSemanticVersion() throws ParseException {\n+\t\ttestSemanticVersion(\"0.0.0\");\n+\t\ttestSemanticVersion(\"1.23.456\");\n+\t\ttestSemanticVersion(\"1.23.456-x.7.z.92\");\n+\t\ttestSemanticVersion(\"1.23.456-x.7.z.92+exp.sha.5114f85\");\n+\t}\n+\t\n+\tpublic void testSemanticVersion(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tSemanticVersion semanticVersion = parser.semanticVersion();\n+\t\tassertEquals(input, semanticVersion.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testDotSeparatedAlphanumeric() throws ParseException {\n+\t\ttestDotSeparatedAlphanumeric(\"abc\");\n+\t\ttestDotSeparatedAlphanumeric(\"abc.xyz\");\n+\t\ttestDotSeparatedAlphanumeric(\"a1.b-3.c4123\");\n+\t}\n+\t\n+\tpublic void testDotSeparatedAlphanumeric(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tDotSeparatedAlphaNumeric dotSeparatedAlphaNumeric = parser.dotSeparatedAlphaNumeric();\n+\t\tassertEquals(input, dotSeparatedAlphaNumeric.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testDotSeparatedAlphanumericStartsWithNumber() {\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\ttestDotSeparatedAlphanumeric(\"1abc\");\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testDotSeparatedAlphanumericStartsWithZero() {\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\ttestDotSeparatedAlphanumeric(\"0\");\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testOrganziationName() throws ParseException {\n+\t\ttestOrganizationName(\"foo\");\n+\t\ttestOrganizationName(\"foo.bar.a1\");\n+\t}\n+\t\n+\tpublic void testOrganizationName(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tOrganizationName organizationName = parser.organizationName();\n+\t\tassertEquals(input, organizationName.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testSchemaName() throws ParseException {\n+\t\ttestSchemaName(\"SomeClass\");\n+\t\ttestSchemaName(\"repo.model.SomeClass\");\n+\t}\n+\t\n+\tpublic void testSchemaName(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tSchemaName schemaName = parser.schemaName();\n+\t\tassertEquals(input, schemaName.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testSchemaIdNoVersion() throws ParseException {\n+\t\tSchemaId id = testSchemaId(\"org.myorg/path.SomeClass\");\n+\t\tassertNotNull(id);\n+\t\tassertNotNull(id.getOrganizationName());\n+\t\tassertEquals(\"org.myorg\",id.getOrganizationName().toString());\n+\t\tassertNotNull(id.getSchemaName());\n+\t\tassertEquals(\"path.SomeClass\", id.getSchemaName().toString());\n+\t\tassertNull(id.getSemanticVersion());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testSchemaIdWithVersion() throws ParseException {\n+\t\tSchemaId id = testSchemaId(\"org.myorg/path.SomeClass/1.2.3-alpha+1234f\");\n+\t\tassertNotNull(id);\n+\t\tassertNotNull(id.getOrganizationName());\n+\t\tassertEquals(\"org.myorg\",id.getOrganizationName().toString());\n+\t\tassertNotNull(id.getSchemaName());\n+\t\tassertEquals(\"path.SomeClass\", id.getSchemaName().toString());\n+\t\tassertNotNull(id.getSemanticVersion());\n+\t\tassertEquals(\"1.2.3-alpha+1234f\", id.getSemanticVersion().toString());\n+\t}", "originalCommit": "51b847b44f8925f9483e0f9a415834c60bfaa8d6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2MzcxNQ==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3994#discussion_r406563715", "bodyText": "Should extend DotSeparatedAlphaNumeric", "author": "marcomarasca", "createdAt": "2020-04-10T01:44:49Z", "path": "lib/lib-schema-id/src/main/java/org/sagebionetworks/schema/id/OrganizationName.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.sagebionetworks.schema.id;\n+\n+import org.sagebionetworks.schema.element.SimpleBranch;\n+\n+public class OrganizationName extends SimpleBranch {", "originalCommit": "51b847b44f8925f9483e0f9a415834c60bfaa8d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY2MzA3OA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3994#discussion_r407663078", "bodyText": "I tried to do this but it is not compatible with how the parser works.", "author": "john-hill", "createdAt": "2020-04-13T19:15:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2MzcxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2Mzk1MQ==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3994#discussion_r406563951", "bodyText": "/ can be constant", "author": "marcomarasca", "createdAt": "2020-04-10T01:45:46Z", "path": "lib/lib-schema-id/src/main/java/org/sagebionetworks/schema/id/SchemaId.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package org.sagebionetworks.schema.id;\n+\n+import java.util.Objects;\n+\n+import org.sagebionetworks.schema.element.Element;\n+import org.sagebionetworks.schema.semantic.version.SemanticVersion;\n+\n+public final class SchemaId extends Element {\n+\n+\tprivate final OrganizationName organizationName;\n+\tprivate final SchemaName schemaName;\n+\tprivate final SemanticVersion semanticVersion;\n+\n+\tpublic SchemaId(OrganizationName organizationName, SchemaName schemaName, SemanticVersion semanticVersion) {\n+\t\tsuper();\n+\t\tif (organizationName == null) {\n+\t\t\tthrow new IllegalArgumentException(\"OrganizationName cannot be null\");\n+\n+\t\t}\n+\t\tif (schemaName == null) {\n+\t\t\tthrow new IllegalArgumentException(\"SchemaName cannot be null\");\n+\t\t}\n+\t\tthis.organizationName = organizationName;\n+\t\tthis.schemaName = schemaName;\n+\t\tthis.semanticVersion = semanticVersion;\n+\t}\n+\n+\t\n+\t/**\n+\t * @return the organizationName\n+\t */\n+\tpublic OrganizationName getOrganizationName() {\n+\t\treturn organizationName;\n+\t}\n+\n+\n+\t/**\n+\t * @return the schemaName\n+\t */\n+\tpublic SchemaName getSchemaName() {\n+\t\treturn schemaName;\n+\t}\n+\n+\n+\t/**\n+\t * @return the semanticVersion\n+\t */\n+\tpublic SemanticVersion getSemanticVersion() {\n+\t\treturn semanticVersion;\n+\t}\n+\n+\n+\t@Override\n+\tpublic void toString(StringBuilder builder) {\n+\t\torganizationName.toString(builder);\n+\t\tbuilder.append(\"/\");", "originalCommit": "51b847b44f8925f9483e0f9a415834c60bfaa8d6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2NDEyNw==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3994#discussion_r406564127", "bodyText": "Should extends DotSeparatedAlphaNumeric", "author": "marcomarasca", "createdAt": "2020-04-10T01:46:37Z", "path": "lib/lib-schema-id/src/main/java/org/sagebionetworks/schema/id/SchemaName.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package org.sagebionetworks.schema.id;\n+\n+import org.sagebionetworks.schema.element.SimpleBranch;\n+\n+public class SchemaName extends SimpleBranch {", "originalCommit": "51b847b44f8925f9483e0f9a415834c60bfaa8d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY2Mzg2Nw==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3994#discussion_r407663867", "bodyText": "Same issue with OorganizaionName", "author": "john-hill", "createdAt": "2020-04-13T19:17:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2NDEyNw=="}], "type": "inlineReview"}]}