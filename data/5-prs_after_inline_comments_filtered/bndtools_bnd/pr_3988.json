{"pr_number": 3988, "pr_title": "memoize: A null consumer to accept should not trigger memoizing", "pr_createdAt": "2020-04-29T12:26:04Z", "pr_url": "https://github.com/bndtools/bnd/pull/3988", "timeline": [{"oid": "4a77d1291cfd12d9a60037e9df1248cbad65cb51", "url": "https://github.com/bndtools/bnd/commit/4a77d1291cfd12d9a60037e9df1248cbad65cb51", "message": "memoize: A null consumer to accept should not trigger memoizing\n\nSigned-off-by: BJ Hargrave <bj@bjhargrave.com>", "committedDate": "2020-04-29T12:25:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyNDA0Mw==", "url": "https://github.com/bndtools/bnd/pull/3988#discussion_r417324043", "bodyText": "Why not just return?\nWe should be nice in accepting nulls but rather strict in never returning nulls. Now you might force some to have to check.", "author": "pkriens", "createdAt": "2020-04-29T13:42:50Z", "path": "aQute.libg/src/aQute/lib/memoize/CloseableMemoizingSupplier.java", "diffHunk": "@@ -107,6 +107,7 @@ public void close() throws Exception {\n \n \t@Override\n \tpublic CloseableMemoize<T> accept(Consumer<? super T> consumer) {\n+\t\trequireNonNull(consumer);", "originalCommit": "4a77d1291cfd12d9a60037e9df1248cbad65cb51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyNTgxMw==", "url": "https://github.com/bndtools/bnd/pull/3988#discussion_r417325813", "bodyText": "I think it is a programming error to pass a null consumer. It may be ok to accept null for a collection argument as if it were an empty collection. But a consumer is code to execute.", "author": "bjhargrave", "createdAt": "2020-04-29T13:45:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyNDA0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyODA4Mg==", "url": "https://github.com/bndtools/bnd/pull/3988#discussion_r417328082", "bodyText": "What is the rationale? Someone needs to check you or any of your N callers. There is a perfect case to make that null means 'do not call me'. By having such a default you just significantly reduce the error space of this function, i.e. you make it a complete function, without any cost on your side and potential savings on the caller side.", "author": "pkriens", "createdAt": "2020-04-29T13:48:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyNDA0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMzNTg0Nw==", "url": "https://github.com/bndtools/bnd/pull/3988#discussion_r417335847", "bodyText": "It is the general contract of methods taking a Consumer, that the Consumer be non-null.\nFor example from java.util.function.Consumer itself:\nhttps://github.com/openjdk/jdk/blob/478773c10278d86a4b81d2ad5382f7314cee4c17/src/java.base/share/classes/java/util/function/Consumer.java#L63-L66\nThis code already required that. I just move the check earlier to avoid memoizing when you would NPE anyway later in the code.\nBy allowing null to mean no-op you avoid catching programming errors early.\nI think it is a bad idea to allow null here as it hides programming errors.", "author": "bjhargrave", "createdAt": "2020-04-29T13:58:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyNDA0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM0MTI1Mw==", "url": "https://github.com/bndtools/bnd/pull/3988#discussion_r417341253", "bodyText": "I know it is a common pattern in Java, but sadly so are checked exceptions. I just do not like the extra error space you allow by having incomplete functions. The idea that you catch programming errors this way is a bit like hitting your head hard against a wall and then when you stop saying that it feels so good. You just force the error handling on the N callers.\nBut it is a matter of style and we do not have a style book.", "author": "pkriens", "createdAt": "2020-04-29T14:05:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyNDA0Mw=="}], "type": "inlineReview"}]}