{"pr_number": 9865, "pr_title": "Support JEP383 (Part 2) and CDS natives", "pr_createdAt": "2020-06-12T17:43:56Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/9865", "timeline": [{"oid": "c6ff813463f624c59a2e9a9d750b75f0a3f0d3ed", "url": "https://github.com/eclipse-openj9/openj9/commit/c6ff813463f624c59a2e9a9d750b75f0a3f0d3ed", "message": "Implement method ensureInitialized in class Lookup to support Java 15\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-06-12T17:22:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4MzM4OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9865#discussion_r442983388", "bodyText": "Pls add a blank line.", "author": "pshipton", "createdAt": "2020-06-19T18:16:39Z", "path": "jcl/src/java.base/share/classes/java/lang/invoke/InfoFromMemberName.java", "diffHunk": "@@ -21,3 +21,46 @@\n  *\n  * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n  *******************************************************************************/\n+/*[IF Java15]*/\n+package java.lang.invoke;\n+\n+import java.lang.invoke.MethodHandles.Lookup;\n+import java.lang.reflect.Member;\n+\n+class InfoFromMemberName implements MethodHandleInfo {\n+\tInfoFromMemberName(Lookup lookup, MemberName member, byte kind) {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\t@Override\n+\tpublic Class<?> getDeclaringClass() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\t@Override\n+\tpublic String getName() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\t@Override\n+\tpublic MethodType getMethodType() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\n+\t}\n+\n+\t@Override\n+\tpublic int getModifiers() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\t@Override\n+\tpublic int getReferenceKind() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\t@Override\n+\tpublic <T extends Member> T reflectAs(Class<T> expected, Lookup lookup) {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+}\n+/* [ENDIF] Java15 */", "originalCommit": "c6ff813463f624c59a2e9a9d750b75f0a3f0d3ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4MzczNQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9865#discussion_r442983735", "bodyText": "Java 10 is no longer supported, these could all be inside [IF Java 11]", "author": "pshipton", "createdAt": "2020-06-19T18:17:32Z", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MemberName.java", "diffHunk": "@@ -97,6 +97,8 @@ String getMethodDescriptor() {\n \tpublic Class<?> getDeclaringClass() {\n \t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n \t}\n+\t/*[ENDIF] Java10 */", "originalCommit": "c6ff813463f624c59a2e9a9d750b75f0a3f0d3ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4NTQ4NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9865#discussion_r442985485", "bodyText": "The external messages need to be declared via preprocessor MSG on the line above, otherwise the messages won't be in the build.  The ExternalMessages-MasterIndex.properties file is just for tracking the indexes, it doesn't go into the build.", "author": "pshipton", "createdAt": "2020-06-19T18:21:50Z", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -2313,6 +2317,19 @@ ClassDefiner makeHiddenClassDefiner(String name, byte[] template) {\n \t\t\tClassDefiner definer = new ClassDefiner(name, template, this);\n \t\t\treturn definer;\n \t\t}\n+\t\t\n+\t\tpublic Class<?> ensureInitialized(Class<?> cls) throws IllegalArgumentException, IllegalAccessException {\n+\t\t\tif (cls.isArray()) {\n+\t\t\t\tthrow new IllegalArgumentException(com.ibm.oti.util.Msg.getString(\"K0683\", cls));", "originalCommit": "c6ff813463f624c59a2e9a9d750b75f0a3f0d3ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7f264ca4d59c0c6362bae48db35508f01b9c433d", "url": "https://github.com/eclipse-openj9/openj9/commit/7f264ca4d59c0c6362bae48db35508f01b9c433d", "message": "Support JEP383 (Part 2) and CDS natives (Java 15)\n\n1. Add a stub for class InfoFromMemberName\n2. Add a stub for JVM_RegisterLambdaProxyClassForArchiving\n3. Add a stub for JVM_LookupLambdaProxyClassFromArchive\n4. Implement JVM_IsCDSDumpingEnabled\n5. Implement JVM_IsCDSSharingEnabled\n6. Add a MemberName field in class DirectMethodHandle\n7. Add stub method MemberName.getReferenceKind\n8. Add stub method MethodHandleNatives.refKindIsMethod\n9. Add stub method MethodHandleNatives.refKindIsConstructor\n10. Add stub method MethodHandles.collectReturnValue\n11. Implement method ensureInitialized in class Lookup\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-06-19T20:31:49Z", "type": "commit"}, {"oid": "7f264ca4d59c0c6362bae48db35508f01b9c433d", "url": "https://github.com/eclipse-openj9/openj9/commit/7f264ca4d59c0c6362bae48db35508f01b9c433d", "message": "Support JEP383 (Part 2) and CDS natives (Java 15)\n\n1. Add a stub for class InfoFromMemberName\n2. Add a stub for JVM_RegisterLambdaProxyClassForArchiving\n3. Add a stub for JVM_LookupLambdaProxyClassFromArchive\n4. Implement JVM_IsCDSDumpingEnabled\n5. Implement JVM_IsCDSSharingEnabled\n6. Add a MemberName field in class DirectMethodHandle\n7. Add stub method MemberName.getReferenceKind\n8. Add stub method MethodHandleNatives.refKindIsMethod\n9. Add stub method MethodHandleNatives.refKindIsConstructor\n10. Add stub method MethodHandles.collectReturnValue\n11. Implement method ensureInitialized in class Lookup\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-06-19T20:31:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY0MjQxOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9865#discussion_r443642419", "bodyText": "Now it seems there is an extra blank line.", "author": "pshipton", "createdAt": "2020-06-22T15:26:47Z", "path": "jcl/src/java.base/share/classes/java/lang/invoke/InfoFromMemberName.java", "diffHunk": "@@ -21,3 +21,47 @@\n  *\n  * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n  *******************************************************************************/\n+/*[IF Java15]*/\n+package java.lang.invoke;\n+\n+import java.lang.invoke.MethodHandles.Lookup;\n+import java.lang.reflect.Member;\n+\n+class InfoFromMemberName implements MethodHandleInfo {\n+\tInfoFromMemberName(Lookup lookup, MemberName member, byte kind) {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\t@Override\n+\tpublic Class<?> getDeclaringClass() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\t@Override\n+\tpublic String getName() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\t@Override\n+\tpublic MethodType getMethodType() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\n+\t}\n+\n+\t@Override\n+\tpublic int getModifiers() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\t@Override\n+\tpublic int getReferenceKind() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\t@Override\n+\tpublic <T extends Member> T reflectAs(Class<T> expected, Lookup lookup) {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+}\n+/*[ENDIF] Java15 */\n+", "originalCommit": "7f264ca4d59c0c6362bae48db35508f01b9c433d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY0NzI2OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9865#discussion_r443647269", "bodyText": "I thought the previous feedback #9865 (comment) had requested a blank line. I am hoping this is fine.", "author": "babsingh", "createdAt": "2020-06-22T15:33:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY0MjQxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY5MjI2Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/9865#discussion_r443692266", "bodyText": "There doesn't need to be a blank line, we just like to have a linefeed at the end of the last line, and there wasn't one originally.", "author": "pshipton", "createdAt": "2020-06-22T16:43:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY0MjQxOQ=="}], "type": "inlineReview"}, {"oid": "4fcfd236e5c8d0fbab4bf605ee65435da00c6ace", "url": "https://github.com/eclipse-openj9/openj9/commit/4fcfd236e5c8d0fbab4bf605ee65435da00c6ace", "message": "Implement MethodHandle.viewAsType\n\nTemporarily support MethodHandle.viewAsType until OpenJ9 adopts OpenJDK\nMethodHandles.\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-06-22T16:03:37Z", "type": "forcePushed"}, {"oid": "0df4485a8083b0f40c066267bfab7677732ddda5", "url": "https://github.com/eclipse-openj9/openj9/commit/0df4485a8083b0f40c066267bfab7677732ddda5", "message": "Implement MethodHandle.viewAsType\n\nHack implementation for MethodHandle.viewAsType until OpenJ9 adopts OpenJDK\nMethodHandles.\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-06-22T16:15:46Z", "type": "commit"}, {"oid": "0df4485a8083b0f40c066267bfab7677732ddda5", "url": "https://github.com/eclipse-openj9/openj9/commit/0df4485a8083b0f40c066267bfab7677732ddda5", "message": "Implement MethodHandle.viewAsType\n\nHack implementation for MethodHandle.viewAsType until OpenJ9 adopts OpenJDK\nMethodHandles.\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-06-22T16:15:46Z", "type": "forcePushed"}]}