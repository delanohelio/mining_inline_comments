{"pr_number": 8830, "pr_title": "Improve overflow checking in String classes", "pr_createdAt": "2020-03-11T15:22:34Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/8830", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA1NzY3NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8830#discussion_r391057675", "bodyText": "Just noting that this looks like a small method and should get inlined, but it is not a guarantee. @cathyzhyi should we consider adding this to the always worth inlining list?", "author": "fjeremic", "createdAt": "2020-03-11T15:30:28Z", "path": "jcl/src/java.base/share/classes/java/lang/String.java", "diffHunk": "@@ -686,7 +690,7 @@ private String(String s, char c) {\n \n \t\t\thelpers.putByteInArrayByIndex(value, slen, (byte) c);\n \t\t} else {\n-\t\t\tvalue = new byte[concatlen * 2];\n+\t\t\tvalue = StringUTF16.newBytesFor(concatlen);", "originalCommit": "ad295e8e75025dc31e440cdd5887a25b7b331ac6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA3MTU2MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8830#discussion_r391071560", "bodyText": "opened an issue for adding the method to the list #8831", "author": "cathyzhyi", "createdAt": "2020-03-11T15:48:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA1NzY3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA4MzgyMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/8830#discussion_r391083822", "bodyText": "@fjeremic Does this helper method treat the third parameter as unsigned? If not, there's potential for overflow here because in Java 8, strings can be longer than Integer.MAX_VALUE / 2 characters.", "author": "keithc-ca", "createdAt": "2020-03-11T16:04:45Z", "path": "jcl/src/java.base/share/classes/java/lang/String.java", "diffHunk": "@@ -7070,13 +7139,13 @@ public String toUpperCase(Locale locale) {\n \t\t\tint sLength = lengthInternal();\n \n \t\t\tif (enableCompression && (null == compressionFlag || count >= 0)) {\n-\t\t\t\tchar[] output = new char[(sLength + 1) / 2];\n-\t\t\t\tif (helpers.toUpperIntrinsicLatin1(value, output, sLength)){\n+\t\t\t\tchar[] output = new char[(sLength + 1) >>> 1];\n+\t\t\t\tif (helpers.toUpperIntrinsicLatin1(value, output, sLength)) {\n \t\t\t\t\treturn new String(output, 0, sLength, true);\n \t\t\t\t}\n \t\t\t} else {\n \t\t\t\tchar[] output = new char[sLength];\n-\t\t\t\tif (helpers.toUpperIntrinsicUTF16(value, output, sLength * 2)){\n+\t\t\t\tif (helpers.toUpperIntrinsicUTF16(value, output, sLength * 2)) {", "originalCommit": "ad295e8e75025dc31e440cdd5887a25b7b331ac6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEyNzI3Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/8830#discussion_r391127272", "bodyText": "I just took a look at the Z implementation for this intrinsic and only parts of it treat the value as unsigned. Other parts treat it as signed. As such yeah there is definitely a bug here today. Can we add a length check to ensure the third parameter is non-negative?", "author": "fjeremic", "createdAt": "2020-03-11T17:08:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA4MzgyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE0NTQ0MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8830#discussion_r391145441", "bodyText": "I think we need to fix the intrinsic, otherwise we would effectively reduce the maximum string length by half.", "author": "keithc-ca", "createdAt": "2020-03-11T17:34:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA4MzgyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2NDA4OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8830#discussion_r391164089", "bodyText": "I think we need to fix the intrinsic, otherwise we would effectively reduce the maximum string length by half.\n\nOr we can just not call the intrinsic for this extreme case, which is what I was suggesting. To fix the intrinsic we would have to do it across all platforms which exploit it which could take time and resources just to handle an extreme case.", "author": "fjeremic", "createdAt": "2020-03-11T18:04:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA4MzgyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2Njc5NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8830#discussion_r391166795", "bodyText": "I hadn't thought of that: I'll make that change.", "author": "keithc-ca", "createdAt": "2020-03-11T18:08:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA4MzgyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4MjY0OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8830#discussion_r391182649", "bodyText": "Done.", "author": "keithc-ca", "createdAt": "2020-03-11T18:36:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA4MzgyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1NzExMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/8830#discussion_r391257112", "bodyText": "Need to double check returning the identical string is appropriate here.", "author": "pshipton", "createdAt": "2020-03-11T20:44:07Z", "path": "jcl/src/java.base/share/classes/java/lang/String.java", "diffHunk": "@@ -3614,7 +3642,20 @@ public String replace(CharSequence sequence1, CharSequence sequence2) {\n \t\tint sequence1len = sequence1.length();\n \n \t\tif (sequence1len == 0) {\n-\t\t\tStringBuilder builder = new StringBuilder((len + 1) * sequence2.length());\n+\t\t\tint sequence2len = sequence2.length();\n+\n+\t\t\tif (sequence2len == 0) {\n+\t\t\t\treturn this;", "originalCommit": "d41c2db74ee0f66b403c47e704055a2078a9a45e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM3MjIxMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/8830#discussion_r391372212", "bodyText": "The API docs [1] don't say anything special about that case.\n[1] https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#replace-\njava.lang.CharSequence-java.lang.CharSequence-", "author": "keithc-ca", "createdAt": "2020-03-12T02:37:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1NzExMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczOTMxNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8830#discussion_r391739314", "bodyText": "Testing on the RI shows a copy is returned, OpenJ9 should have the same behavior for compatibility even though it's not specified or likely to cause any problem.", "author": "pshipton", "createdAt": "2020-03-12T16:25:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1NzExMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc3MzcwMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8830#discussion_r391773701", "bodyText": "Fixed.", "author": "keithc-ca", "createdAt": "2020-03-12T17:20:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1NzExMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1OTMxMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/8830#discussion_r391259312", "bodyText": "Please bracket for easier readability.", "author": "pshipton", "createdAt": "2020-03-11T20:48:44Z", "path": "jcl/src/java.base/share/classes/java/lang/String.java", "diffHunk": "@@ -3614,7 +3642,20 @@ public String replace(CharSequence sequence1, CharSequence sequence2) {\n \t\tint sequence1len = sequence1.length();\n \n \t\tif (sequence1len == 0) {\n-\t\t\tStringBuilder builder = new StringBuilder((len + 1) * sequence2.length());\n+\t\t\tint sequence2len = sequence2.length();\n+\n+\t\t\tif (sequence2len == 0) {\n+\t\t\t\treturn this;\n+\t\t\t}\n+\n+\t\t\tint tooManyCopies = (Integer.MAX_VALUE - len) / sequence2len;\n+\n+\t\t\tif (len >= tooManyCopies) {\n+\t\t\t\t/*[MSG \"K0D01\", \"Array capacity exceeded\"]*/\n+\t\t\t\tthrow new OutOfMemoryError(com.ibm.oti.util.Msg.getString(\"K0D01\")); //$NON-NLS-1$\n+\t\t\t}\n+\n+\t\t\tStringBuilder builder = new StringBuilder(len + (len + 1) * sequence2len);", "originalCommit": "d41c2db74ee0f66b403c47e704055a2078a9a45e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY2NjEzMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8830#discussion_r391666131", "bodyText": "Done.", "author": "keithc-ca", "createdAt": "2020-03-12T14:38:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1OTMxMg=="}], "type": "inlineReview"}, {"oid": "dfa60abd2baf5ebc4a043de1b4665af349d01b61", "url": "https://github.com/eclipse-openj9/openj9/commit/dfa60abd2baf5ebc4a043de1b4665af349d01b61", "message": "Improve overflow checking in String classes\n\n* fix char array length computation to handle Integer.MAX_VALUE\n\n* check length in private String constructors\n\n* check length in String.concat()\n\n* check length in String.repeat()\n\n* check length in String.replace(CharSequence, CharSequence)\n\n* use StringUTF16.newBytesFor() to allocate byte arrays for jdk11+\n  uncompressed strings\n\n* compare chars with 255 consistently (not 256 some places)\n\n* make private methods static where possible\n\n* avoid using intrinsics if byte count would exceed Integer.MAX_VALUE\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>", "committedDate": "2020-03-12T17:25:14Z", "type": "commit"}, {"oid": "dfa60abd2baf5ebc4a043de1b4665af349d01b61", "url": "https://github.com/eclipse-openj9/openj9/commit/dfa60abd2baf5ebc4a043de1b4665af349d01b61", "message": "Improve overflow checking in String classes\n\n* fix char array length computation to handle Integer.MAX_VALUE\n\n* check length in private String constructors\n\n* check length in String.concat()\n\n* check length in String.repeat()\n\n* check length in String.replace(CharSequence, CharSequence)\n\n* use StringUTF16.newBytesFor() to allocate byte arrays for jdk11+\n  uncompressed strings\n\n* compare chars with 255 consistently (not 256 some places)\n\n* make private methods static where possible\n\n* avoid using intrinsics if byte count would exceed Integer.MAX_VALUE\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>", "committedDate": "2020-03-12T17:25:14Z", "type": "forcePushed"}]}