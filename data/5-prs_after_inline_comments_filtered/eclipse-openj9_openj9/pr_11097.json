{"pr_number": 11097, "pr_title": " Add tests for unresolved value types", "pr_createdAt": "2020-11-03T21:52:06Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/11097", "timeline": [{"oid": "491ed392c3b77ee942ab11bec5001b2b20ad2e2d", "url": "https://github.com/eclipse-openj9/openj9/commit/491ed392c3b77ee942ab11bec5001b2b20ad2e2d", "message": "Simplify generateClass to accept a class configuration object\n\nThe signature for generateClass was becoming unwieldy, with many String\nand String array arguments.  This is an attempt to simplify that with\na ClassConfiguration argument that provides the various pieces of\nconfiguration information.\n\nSigned-off-by:  Henry Zongaro <zongaro@ca.ibm.com>", "committedDate": "2020-11-03T21:56:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyMDgzOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11097#discussion_r517620839", "bodyText": "fields is not used in testUnresolvedValueTypeDefaultValue, why is it passed in?", "author": "a7ehuo", "createdAt": "2020-11-04T20:45:24Z", "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeGenerator.java", "diffHunk": "@@ -380,6 +398,101 @@ private static void testCheckCastRefClassOnNull(ClassWriter cw, String className\n \t\tmv.visitEnd();\n \t}\n \n+\tprivate static void testUnresolvedValueTypeDefaultValue(ClassWriter cw, String className, String valueUsedInCode, String[] fields) {", "originalCommit": "9520d8c1eea80c7442e0d1741e833718ee72c9ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY1MDU3Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11097#discussion_r517650577", "bodyText": "Almost all of the test methods have a fields argument, even though most of them don't use it, so I just followed suit.  I would be happy to drop the fieldsargument in this case.", "author": "hzongaro", "createdAt": "2020-11-04T21:48:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyMDgzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM1MzI0NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11097#discussion_r518353244", "bodyText": "Agreed, no need to add field params if they are not being used. This was probably an oversight in the other tests.", "author": "tajila", "createdAt": "2020-11-05T20:44:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyMDgzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ3MDkyMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11097#discussion_r518470921", "bodyText": "Removed the fields argument in commit 20e8e8a.", "author": "hzongaro", "createdAt": "2020-11-06T01:30:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyMDgzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyNDQ4MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11097#discussion_r517624480", "bodyText": "Why does passing -1 avoid the execution of GETFIELD?", "author": "a7ehuo", "createdAt": "2020-11-04T20:52:38Z", "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeTests.java", "diffHunk": "@@ -2460,6 +2460,201 @@ static public void testFlattenedFieldInitSequence() throws Throwable {\n \t\tassertNotNull(getB.invoke(getD.invoke(containerC)));\n \t}\n \t\n+\t/*\n+\t * Test use of DEFAULTVALUE for a value type class that has not been resolved.\n+\t * The method is first called so that the DEFAULTVALUE will not be executed,\n+\t * and the class not resolved, and then called so that the DEFAULTVALUE\n+\t * and class resolution is triggered.\n+\t */\n+\t@Test(priority=1)\n+\tstatic public void testUnresolvedDefaultValueUse() throws Throwable {\n+\t\tString fields[] = {\"x:I\", \"y:I\"};\n+\t\tClass valueClass = ValueTypeGenerator.generateValueClass(\"UnresolvedA\", fields);\n+\t\tString fields2[] = {};\n+\t\tClass usingClass = ValueTypeGenerator.generateRefClass(\"UsingUnresolvedA\", fields2, \"UnresolvedA\");\n+\n+\t\tMethodHandle defaultValueUnresolved = lookup.findStatic(usingClass, \"testUnresolvedValueTypeDefaultValue\", MethodType.methodType(Object.class, int.class));\n+\n+\t\tfor (int i = 0; i < 10; i++) {\n+\t\t\t// Pass zero to avoid execution of DEFAULTVALUE and resolution of value type class\n+\t\t\tassertNull(defaultValueUnresolved.invoke(0));\n+\t\t}\n+\n+\t\tMethodHandle getX = generateGenericGetter(valueClass, \"x\");\n+\t\tMethodHandle getY = generateGenericGetter(valueClass, \"y\");\n+\n+\t\tfor (int i = 0; i < 10; i++) {\n+\t\t\t// Pass one to force execution of DEFAULTVALUE and resolution of value type class\n+\t\t\tObject defaultValue = defaultValueUnresolved.invoke(1);\n+\t\t\tassertNotNull(defaultValue);\n+\t\t\tassertEquals(getX.invoke(defaultValue), Integer.valueOf(0));\n+\t\t\tassertEquals(getY.invoke(defaultValue), Integer.valueOf(0));\n+\t\t}\n+\t}\n+\n+\t@Test(priority=1)\n+\tstatic public void testUnresolvedWithFieldUse() throws Throwable {\n+\t\tString fields[] = {\"x:I\", \"y:I\"};\n+\t\tClass valueClass = ValueTypeGenerator.generateValueClass(\"UnresolvedD\", fields, \"HostD\");\n+\t\tString fields2[] = {};\n+\t\tClass usingClass = ValueTypeGenerator.generateHostRefClass(\"UsingUnresolvedD\", fields2, \"UnresolvedD\", fields);\n+\n+\t\tMethodHandle withFieldUnresolved = lookup.findStatic(usingClass, \"testUnresolvedValueTypeWithField\", MethodType.methodType(Object.class, new Class[] {int.class, Object.class}));\n+\n+\t\tfor (int i = 0; i < 10; i++) {\n+\t\t\t// Pass zero to avoid execution of WITHFIELD and resolution of value type class\n+\t\t\tassertNull(withFieldUnresolved.invoke(0, null));\n+\t\t}\n+\n+\t\tMethodHandle makeDefaultValue = lookup.findStatic(valueClass, \"makeValueTypeDefaultValue\", MethodType.methodType(Object.class));\n+\t\tObject defaultValue = makeDefaultValue.invoke();\n+\n+\t\tMethodHandle getX = generateGenericGetter(valueClass, \"x\");\n+\t\tMethodHandle getY = generateGenericGetter(valueClass, \"y\");\n+\n+\t\tfor (int i = 0; i < 10; i++) {\n+\t\t\t// Pass one to force execution of WITHFIELD and resolution of value type class\n+\t\t\tObject withFieldValue = (withFieldUnresolved.invoke(1, defaultValue));\n+\t\t\tassertEquals(getX.invoke(withFieldValue), Integer.valueOf(1));\n+\t\t\tassertEquals(getY.invoke(withFieldValue), Integer.valueOf(2));\n+\t\t}\n+\t}\n+\n+\tprivate static class UnresolvedClassDesc {\n+\t\tpublic String name;\n+\t\tpublic String[] fields;\n+\t\tpublic UnresolvedClassDesc(String name, String[] fields) {\n+\t\t\tthis.name = name;\n+\t\t\tthis.fields = fields;\n+\t\t}\n+\t}\n+\n+\t/*\n+\t * Test use of GETFIELD operations on the fields of a container class, where\n+\t * the fields are of value type classes that have not been resolved.\n+\t *\n+\t * The method is first called so that the GETFIELD will not be executed, and\n+\t * the class not resolved, and then called so that the GETFIELD and class\n+\t * resolution is triggered.\n+\t */\n+\t@Test(priority=1)\n+\tstatic public void testUnresolvedGetFieldUse() throws Throwable {\n+\t\tUnresolvedClassDesc[] uclassDescArr = new UnresolvedClassDesc[] {\n+\t\t\t\t\t\t\t\tnew UnresolvedClassDesc(\"UnresolvedB1\", new String[] {\"a:I\", \"b:I\"}),\n+\t\t\t\t\t\t\t\tnew UnresolvedClassDesc(\"UnresolvedB2\", new String[] {\"c:I\", \"d:I\"}),\n+\t\t\t\t\t\t\t\tnew UnresolvedClassDesc(\"UnresolvedB3\", new String[] {\"e:I\", \"f:I\"})};\n+\n+\t\tClass[] valueClassArr = new Class[uclassDescArr.length];\n+\t\tString containerFields[] = new String[uclassDescArr.length];\n+\t\tMethodHandle[][] valueFieldGetters = new MethodHandle[uclassDescArr.length][];\n+\n+\t\tfor (int i = 0; i < uclassDescArr.length; i++) {\n+\t\t\tUnresolvedClassDesc desc = uclassDescArr[i];\n+\t\t\tvalueClassArr[i] = ValueTypeGenerator.generateValueClass(desc.name, desc.fields);\n+\t\t\tvalueFieldGetters[i] = new MethodHandle[desc.fields.length];\n+\t\t\tcontainerFields[i] = \"v\"+(i+1)+\":Q\"+desc.name+\";\";\n+\n+\t\t\tfor (int j = 0; j < desc.fields.length; j++) {\n+\t\t\t\tString[] nameAndSig = desc.fields[j].split(\":\");\n+\t\t\t\tvalueFieldGetters[i][j] = generateGenericGetter(valueClassArr[i], nameAndSig[0]);\n+\t\t\t}\n+\t\t}\n+\n+\t\tClass containerClass = ValueTypeGenerator.generateRefClass(\"ContainerForUnresolvedB\", containerFields);\n+\n+\t\tString fieldsUsing[] = {};\n+\t\tClass usingClass = ValueTypeGenerator.generateRefClass(\"UsingUnresolvedB\", fieldsUsing, \"ContainerForUnresolvedB\", containerFields);\n+\n+\t\tMethodHandle getFieldUnresolved = lookup.findStatic(usingClass, \"testUnresolvedValueTypeGetField\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tMethodType.methodType(Object.class, new Class[] {int.class, containerClass}));\n+\n+\t\tfor (int i = 0; i < 10; i++) {\n+\t\t\t// Pass -1 to avoid execution of GETFIELD against field that has a value type class\n+\t\t\t// In turn that delays the resolution of the value type class\n+\t\t\tassertNull(getFieldUnresolved.invoke(-1, null));", "originalCommit": "9520d8c1eea80c7442e0d1741e833718ee72c9ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY1MzM0MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11097#discussion_r517653341", "bodyText": "The code in the ValueTypeGenerator.testUnresolvedValueTypeGetField method that generates this test uses a TABLESWITCH instruction with values in the range [0..fieldWatch-1] to decide which field to retrieve.  -1 goes to the default case, which returns null.\nI'll clarify this comment, and a similar comment in the test for PUTFIELD.", "author": "hzongaro", "createdAt": "2020-11-04T21:54:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyNDQ4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ3MDcwNQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11097#discussion_r518470705", "bodyText": "Annabelle @a7ehuo, I have addressed this in commit 20e8e8a.  May I ask you to have a look?", "author": "hzongaro", "createdAt": "2020-11-06T01:29:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyNDQ4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg1MDAzOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11097#discussion_r518850038", "bodyText": "LGTM. Thanks for adding the sample code.", "author": "a7ehuo", "createdAt": "2020-11-06T16:07:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyNDQ4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyODA4MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11097#discussion_r517628081", "bodyText": "Would adding some java example code on how UnresolvedB* , ContainerForUnresolvedB, UsingUnresolvedB, and getters are defined and used help people follow the test better? Same question on testUnresolvedPutFieldUse.", "author": "a7ehuo", "createdAt": "2020-11-04T20:59:43Z", "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeTests.java", "diffHunk": "@@ -2460,6 +2460,201 @@ static public void testFlattenedFieldInitSequence() throws Throwable {\n \t\tassertNotNull(getB.invoke(getD.invoke(containerC)));\n \t}\n \t\n+\t/*\n+\t * Test use of DEFAULTVALUE for a value type class that has not been resolved.\n+\t * The method is first called so that the DEFAULTVALUE will not be executed,\n+\t * and the class not resolved, and then called so that the DEFAULTVALUE\n+\t * and class resolution is triggered.\n+\t */\n+\t@Test(priority=1)\n+\tstatic public void testUnresolvedDefaultValueUse() throws Throwable {\n+\t\tString fields[] = {\"x:I\", \"y:I\"};\n+\t\tClass valueClass = ValueTypeGenerator.generateValueClass(\"UnresolvedA\", fields);\n+\t\tString fields2[] = {};\n+\t\tClass usingClass = ValueTypeGenerator.generateRefClass(\"UsingUnresolvedA\", fields2, \"UnresolvedA\");\n+\n+\t\tMethodHandle defaultValueUnresolved = lookup.findStatic(usingClass, \"testUnresolvedValueTypeDefaultValue\", MethodType.methodType(Object.class, int.class));\n+\n+\t\tfor (int i = 0; i < 10; i++) {\n+\t\t\t// Pass zero to avoid execution of DEFAULTVALUE and resolution of value type class\n+\t\t\tassertNull(defaultValueUnresolved.invoke(0));\n+\t\t}\n+\n+\t\tMethodHandle getX = generateGenericGetter(valueClass, \"x\");\n+\t\tMethodHandle getY = generateGenericGetter(valueClass, \"y\");\n+\n+\t\tfor (int i = 0; i < 10; i++) {\n+\t\t\t// Pass one to force execution of DEFAULTVALUE and resolution of value type class\n+\t\t\tObject defaultValue = defaultValueUnresolved.invoke(1);\n+\t\t\tassertNotNull(defaultValue);\n+\t\t\tassertEquals(getX.invoke(defaultValue), Integer.valueOf(0));\n+\t\t\tassertEquals(getY.invoke(defaultValue), Integer.valueOf(0));\n+\t\t}\n+\t}\n+\n+\t@Test(priority=1)\n+\tstatic public void testUnresolvedWithFieldUse() throws Throwable {\n+\t\tString fields[] = {\"x:I\", \"y:I\"};\n+\t\tClass valueClass = ValueTypeGenerator.generateValueClass(\"UnresolvedD\", fields, \"HostD\");\n+\t\tString fields2[] = {};\n+\t\tClass usingClass = ValueTypeGenerator.generateHostRefClass(\"UsingUnresolvedD\", fields2, \"UnresolvedD\", fields);\n+\n+\t\tMethodHandle withFieldUnresolved = lookup.findStatic(usingClass, \"testUnresolvedValueTypeWithField\", MethodType.methodType(Object.class, new Class[] {int.class, Object.class}));\n+\n+\t\tfor (int i = 0; i < 10; i++) {\n+\t\t\t// Pass zero to avoid execution of WITHFIELD and resolution of value type class\n+\t\t\tassertNull(withFieldUnresolved.invoke(0, null));\n+\t\t}\n+\n+\t\tMethodHandle makeDefaultValue = lookup.findStatic(valueClass, \"makeValueTypeDefaultValue\", MethodType.methodType(Object.class));\n+\t\tObject defaultValue = makeDefaultValue.invoke();\n+\n+\t\tMethodHandle getX = generateGenericGetter(valueClass, \"x\");\n+\t\tMethodHandle getY = generateGenericGetter(valueClass, \"y\");\n+\n+\t\tfor (int i = 0; i < 10; i++) {\n+\t\t\t// Pass one to force execution of WITHFIELD and resolution of value type class\n+\t\t\tObject withFieldValue = (withFieldUnresolved.invoke(1, defaultValue));\n+\t\t\tassertEquals(getX.invoke(withFieldValue), Integer.valueOf(1));\n+\t\t\tassertEquals(getY.invoke(withFieldValue), Integer.valueOf(2));\n+\t\t}\n+\t}\n+\n+\tprivate static class UnresolvedClassDesc {\n+\t\tpublic String name;\n+\t\tpublic String[] fields;\n+\t\tpublic UnresolvedClassDesc(String name, String[] fields) {\n+\t\t\tthis.name = name;\n+\t\t\tthis.fields = fields;\n+\t\t}\n+\t}\n+\n+\t/*\n+\t * Test use of GETFIELD operations on the fields of a container class, where\n+\t * the fields are of value type classes that have not been resolved.\n+\t *\n+\t * The method is first called so that the GETFIELD will not be executed, and\n+\t * the class not resolved, and then called so that the GETFIELD and class\n+\t * resolution is triggered.\n+\t */\n+\t@Test(priority=1)\n+\tstatic public void testUnresolvedGetFieldUse() throws Throwable {", "originalCommit": "9520d8c1eea80c7442e0d1741e833718ee72c9ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY1MzMyOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11097#discussion_r517653328", "bodyText": "Yes, definitely.  I'll do that.", "author": "hzongaro", "createdAt": "2020-11-04T21:54:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyODA4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ3MDY0NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11097#discussion_r518470644", "bodyText": "Annabelle @a7ehuo, I have addressed this in commit 20e8e8a.  May I ask you to have a look?", "author": "hzongaro", "createdAt": "2020-11-06T01:29:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyODA4MQ=="}], "type": "inlineReview"}, {"oid": "57a652d00483cac5c92f341e93509a40bd5516f2", "url": "https://github.com/eclipse-openj9/openj9/commit/57a652d00483cac5c92f341e93509a40bd5516f2", "message": "Simplify generateClass to accept a class configuration object\n\nThe signature for generateClass was becoming unwieldy, with many String\nand String array arguments.  This is an attempt to simplify that with\na ClassConfiguration argument that provides the various pieces of\nconfiguration information.\n\nSigned-off-by:  Henry Zongaro <zongaro@ca.ibm.com>", "committedDate": "2020-11-06T01:28:04Z", "type": "forcePushed"}, {"oid": "20e8e8a2ffb0b82381bb17fa8a603bfdd4c9f9fb", "url": "https://github.com/eclipse-openj9/openj9/commit/20e8e8a2ffb0b82381bb17fa8a603bfdd4c9f9fb", "message": "Add tests for unresolved value types\n\nAdd tests that perform defaultvalue, withfield, putfield or getfield\noperations on value types, where the types or fields involved will be\nunresolved for the first few times that the method that performs the\noperation is invoked.  This helps to test special JIT handling of\nthese situations in particular.\n\nSigned-off-by:  Henry Zongaro <zongaro@ca.ibm.com>", "committedDate": "2020-11-06T01:33:22Z", "type": "commit"}, {"oid": "981320df6d1cd23fadf8f599b1ccf01978362cdc", "url": "https://github.com/eclipse-openj9/openj9/commit/981320df6d1cd23fadf8f599b1ccf01978362cdc", "message": "Simplify generateClass to accept a class configuration object\n\nThe signature for generateClass was becoming unwieldy, with many String\nand String array arguments.  This is an attempt to simplify that with\na ClassConfiguration argument that provides the various pieces of\nconfiguration information.\n\nSigned-off-by:  Henry Zongaro <zongaro@ca.ibm.com>", "committedDate": "2020-11-06T01:33:30Z", "type": "commit"}, {"oid": "981320df6d1cd23fadf8f599b1ccf01978362cdc", "url": "https://github.com/eclipse-openj9/openj9/commit/981320df6d1cd23fadf8f599b1ccf01978362cdc", "message": "Simplify generateClass to accept a class configuration object\n\nThe signature for generateClass was becoming unwieldy, with many String\nand String array arguments.  This is an attempt to simplify that with\na ClassConfiguration argument that provides the various pieces of\nconfiguration information.\n\nSigned-off-by:  Henry Zongaro <zongaro@ca.ibm.com>", "committedDate": "2020-11-06T01:33:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg2NjMxOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11097#discussion_r518866319", "bodyText": "instead of duplicating the body, this can  call generateValueClass(String name, String[] fields, String nestHost) with a null nest host", "author": "tajila", "createdAt": "2020-11-06T16:33:52Z", "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeGenerator.java", "diffHunk": "@@ -921,17 +1117,64 @@ public static void generateClassFile(String name, byte[] bytes) {\n \t}\n \n \tpublic static Class<?> generateValueClass(String name, String[] fields) throws Throwable {\n-\t\tbyte[] bytes = generateClass(name, fields, false, false);", "originalCommit": "981320df6d1cd23fadf8f599b1ccf01978362cdc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg5ODU0Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11097#discussion_r519898543", "bodyText": "Addressed in commit fbba191", "author": "hzongaro", "createdAt": "2020-11-09T15:27:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg2NjMxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg2ODM2Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11097#discussion_r518868367", "bodyText": "can you add a comment describing what accessedContainer and valueClassUsedInCode are", "author": "tajila", "createdAt": "2020-11-06T16:37:14Z", "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeGenerator.java", "diffHunk": "@@ -46,8 +46,91 @@\n \tstatic {\n \t\tgenerator = new ValueTypeGenerator();\n \t}\n-\t\n-\tprivate static byte[] generateClass(String className, String[] fields, boolean isVerifiable, boolean isRef) {\n+\n+\tprivate static class ClassConfiguration {", "originalCommit": "981320df6d1cd23fadf8f599b1ccf01978362cdc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg5ODk3Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/11097#discussion_r519898972", "bodyText": "Addressed in commit fbba191", "author": "hzongaro", "createdAt": "2020-11-09T15:28:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg2ODM2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg2OTIyMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11097#discussion_r518869223", "bodyText": "nitpick: please use the /* style comments", "author": "tajila", "createdAt": "2020-11-06T16:38:42Z", "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeTests.java", "diffHunk": "@@ -2460,6 +2460,322 @@ static public void testFlattenedFieldInitSequence() throws Throwable {\n \t\tassertNotNull(getB.invoke(getD.invoke(containerC)));\n \t}\n \t\n+\t/*\n+\t * Test use of DEFAULTVALUE for a value type class that has not been resolved.\n+\t * The method is first called so that the DEFAULTVALUE will not be executed,\n+\t * and the class not resolved, and then called so that the DEFAULTVALUE\n+\t * and class resolution is triggered.\n+\t */\n+\t@Test(priority=1)\n+\tstatic public void testUnresolvedDefaultValueUse() throws Throwable {\n+\t\t// Set up classes that look roughly like this:", "originalCommit": "981320df6d1cd23fadf8f599b1ccf01978362cdc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg5ODczMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11097#discussion_r519898730", "bodyText": "Addressed in commit fbba191", "author": "hzongaro", "createdAt": "2020-11-09T15:28:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg2OTIyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg0NzgzNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11097#discussion_r519847834", "bodyText": "This should be a call to visitNestMember.  I must have messed it up in the process of refactoring code.", "author": "hzongaro", "createdAt": "2020-11-09T14:20:01Z", "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeGenerator.java", "diffHunk": "@@ -60,6 +143,14 @@\n \t\t}\n \n \t\tcw.visitSource(className + \".java\", null);\n+\n+\t\tif (nestHost != null) {\n+\t\t\tcw.visitNestHost(nestHost);\n+\t\t}\n+\n+\t\tif (valueUsedInCode != null) {\n+\t\t\tcw.visitNestHost(valueUsedInCode);", "originalCommit": "981320df6d1cd23fadf8f599b1ccf01978362cdc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg5OTI0MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11097#discussion_r519899241", "bodyText": "Fixed in commit fbba191", "author": "hzongaro", "createdAt": "2020-11-09T15:28:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg0NzgzNA=="}], "type": "inlineReview"}, {"oid": "fbba1911401fd4be37d50554604842503481cb42", "url": "https://github.com/eclipse-openj9/openj9/commit/fbba1911401fd4be37d50554604842503481cb42", "message": "Address review comments\n\nAddressed various review comments:\n\n1) Added comments describing accessedContainer and valueClassUsedInCode\nfields of ClassConfiguration;\n2) Replaced line comments with block comments;\n3) Replaced a call to ClassWriter.visitNestHost with a call to\nClassWriter.visitNestMember.\n\nSigned-off-by:  Henry Zongaro <zongaro@ca.ibm.com>", "committedDate": "2020-11-09T15:06:42Z", "type": "commit"}]}