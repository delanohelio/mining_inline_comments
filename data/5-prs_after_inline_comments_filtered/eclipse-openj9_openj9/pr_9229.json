{"pr_number": 9229, "pr_title": "Add test to verify the qualified UTF8 class name", "pr_createdAt": "2020-04-13T18:23:43Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/9229", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY4NDgwMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9229#discussion_r407684802", "bodyText": "Pls use File.deleteOnExit() to remove the jar file after the test is finished.", "author": "pshipton", "createdAt": "2020-04-13T19:57:10Z", "path": "test/functional/Java8andUp/src/org/openj9/test/utf8ClassPkgName/LoadClassWithUTF8PkgNameTest.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+package org.openj9.test.utf8ClassPkgName;\n+\n+import java.util.regex.Pattern;\n+import java.util.jar.Manifest;\n+import java.util.jar.Attributes;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarOutputStream;\n+import java.io.OutputStream;\n+import java.io.FileOutputStream;\n+import java.io.File;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+\n+import org.objectweb.asm.*;\n+import static org.objectweb.asm.Opcodes.ACC_PUBLIC;\n+import static org.objectweb.asm.Opcodes.ACC_SUPER;\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.INVOKESPECIAL;\n+import static org.objectweb.asm.Opcodes.RETURN;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+import org.testng.annotations.BeforeTest;\n+\n+\n+/**\n+ * Verify whether VM successfully loads a class with a Chinese UTF8 package name from a jar file\n+ * Note: The specified jar file to to be loaded in this test is automatically generated so as to\n+ * avoid any issue with platform dependencies.\n+ * \n+ */\n+@Test(groups = { \"level.sanity\" })\n+public class LoadClassWithUTF8PkgNameTest {\n+\t\n+\tprivate static byte[] classBytes;\n+\tfinal static int classVersionJava8 = 52;\n+\tfinal static String loadedPackagePath = \"org/openj9/resources/utf8pkgname/loaded_Utf8Class_\\u6b63\\u5728\\u52a0\\u8f7d\\u7c7b\\u5305\\u540d\\u957f\\u5ea6\\u6570\\u68c0\\u67e5/\";\n+\tfinal static String loadedClassName = \"Utf8ClassPackageNameTest\";\n+\tfinal static String loadedClassFileWithPackagePath = loadedPackagePath + loadedClassName + \".class\";\n+\tfinal static String loadedClassNameWithDotPath = loadedPackagePath.replace('/', '.') + loadedClassName;\n+\tfinal static String jarFileNameWithPath = System.getProperty(\"user.dir\") + \"/\" + \"Utf8PkgName.jar\";\n+\t\n+\tpublic static byte[] generateClassBytes(String loadedPackagePath, String loadedClassName, int classVersion) throws Exception {\n+\n+\t\tClassWriter cw = new ClassWriter(0);\n+\t\tFieldVisitor fv;\n+\t\tMethodVisitor mv;\n+\t\tAnnotationVisitor av0;\n+\n+\t\tcw.visit(classVersion, ACC_PUBLIC + ACC_SUPER, loadedPackagePath + loadedClassName, null, \"java/lang/Object\", null);\n+\t\tcw.visitSource(loadedClassName + \".java\", null);\n+\n+\t\t{\n+\t\t\tmv = cw.visitMethod(ACC_PUBLIC, \"<init>\", \"()V\", null, null);\n+\t\t\tmv.visitCode();\n+\t\t\tLabel l0 = new Label();\n+\t\t\tmv.visitLabel(l0);\n+\t\t\tmv.visitLineNumber(29, l0);\n+\t\t\tmv.visitVarInsn(ALOAD, 0);\n+\t\t\tmv.visitMethodInsn(INVOKESPECIAL, \"java/lang/Object\", \"<init>\", \"()V\");\n+\t\t\tmv.visitInsn(RETURN);\n+\t\t\tLabel l1 = new Label();\n+\t\t\tmv.visitLabel(l1);\n+\t\t\tmv.visitLocalVariable(\"this\", \"L\" + loadedPackagePath + loadedClassName + \";\", null, l0, l1, 0);\n+\t\t\tmv.visitMaxs(1, 1);\n+\t\t\tmv.visitEnd();\n+\t\t}\n+\t\tcw.visitEnd();\n+\n+\t\treturn cw.toByteArray();\n+\t}\n+\t\n+\t@BeforeTest\n+\tpublic void beforeTest() throws Exception {\n+\t\tString ver = System.getProperty(\"java.version\");\n+\t\tboolean isJava8ClassFile = ((ver.length()>=3) && ver.substring(0, 2).equalsIgnoreCase(\"1.8\")) ? true : false;\n+\t\t\n+\t\t/* The generated class file is only used by the java version >= Java 8 */\n+\t\tint classVersion = classVersionJava8;\n+\t\tif (!isJava8ClassFile) {\n+\t\t\t/* use the first located number in the version string assuming\n+\t\t\t * the major version number is 9, 10, 11, 12, 13, 14 ... \n+\t\t\t * Note: internal build might come with '-' in the version string.\n+\t\t\t * e.g. 14-internal\n+\t\t\t */\n+\t\t\tString splitPattern = (ver.indexOf('.') >= 0) ? Pattern.quote(\".\") : \n+\t\t\t\t\t\t\t\t\t((ver.indexOf('-') >=0) ? Pattern.quote(\"-\"): null);\n+\t\t\tString verDigits = (null != splitPattern) ? ver.split(splitPattern)[0] : ver;\n+\t\t\tclassVersion = (Integer.parseInt(verDigits) - 8) + classVersionJava8;\n+\t\t}\n+\t\tclassBytes = generateClassBytes(loadedPackagePath, loadedClassName, classVersion);\n+\t\t\n+\t\t/* prepare the MANIFEST data for the specified jar file */\n+\t\tString jarFileVersion = \"1.0.0\";\n+\t\tString jarFileAuthor = \"IBM OpenJ9\";\n+\t\tManifest manifestData = new Manifest();\n+\t\tAttributes manifestAttrs = manifestData.getMainAttributes();\n+\t\tmanifestAttrs.put(Attributes.Name.MANIFEST_VERSION, jarFileVersion);\n+\t\tmanifestAttrs.put(new Attributes.Name(\"Created-By\"), jarFileAuthor);\n+\t\t\n+\t\t/* write the class bytes into the specified jar file */\n+\t\tOutputStream fos = new FileOutputStream(new File(jarFileNameWithPath));\n+\t\tJarOutputStream jos = new JarOutputStream(fos, manifestData);\n+\t\tJarEntry jarEntry = new JarEntry(loadedClassFileWithPackagePath);\n+\t\tjos.putNextEntry(jarEntry);\n+\t\tjos.write(classBytes, 0, classBytes.length);\n+\t\tjos.closeEntry();\n+\t\tjos.close();\n+\t}", "originalCommit": "82bd13bdec5e7d2b198e3583f508f856d77e2b9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY5MTE5MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9229#discussion_r407691190", "bodyText": "Note try {} finally should be used to ensure deleteOnExit() is called even if something goes wrong.", "author": "pshipton", "createdAt": "2020-04-13T20:09:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY4NDgwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY5MTY4Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9229#discussion_r407691682", "bodyText": "Or call deleteOnExit() before writing to the file.", "author": "pshipton", "createdAt": "2020-04-13T20:10:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY4NDgwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcwMTg0Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/9229#discussion_r407701846", "bodyText": "The jar file is generated temporarily inside .../openj9/test/TKG/test_output_xxxx (xxxx means random digits) which should be cleaned up by the test framework.", "author": "ChengJin01", "createdAt": "2020-04-13T20:29:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY4NDgwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcxMTc5Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9229#discussion_r407711797", "bodyText": "ok sounds good.", "author": "pshipton", "createdAt": "2020-04-13T20:48:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY4NDgwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY4NjMyMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9229#discussion_r407686320", "bodyText": "There is a helper that does this, can you use org.openj9.test.util.VersionCheck.major() instead?", "author": "pshipton", "createdAt": "2020-04-13T19:59:56Z", "path": "test/functional/Java8andUp/src/org/openj9/test/utf8ClassPkgName/LoadClassWithUTF8PkgNameTest.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+package org.openj9.test.utf8ClassPkgName;\n+\n+import java.util.regex.Pattern;\n+import java.util.jar.Manifest;\n+import java.util.jar.Attributes;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarOutputStream;\n+import java.io.OutputStream;\n+import java.io.FileOutputStream;\n+import java.io.File;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+\n+import org.objectweb.asm.*;\n+import static org.objectweb.asm.Opcodes.ACC_PUBLIC;\n+import static org.objectweb.asm.Opcodes.ACC_SUPER;\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.INVOKESPECIAL;\n+import static org.objectweb.asm.Opcodes.RETURN;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+import org.testng.annotations.BeforeTest;\n+\n+\n+/**\n+ * Verify whether VM successfully loads a class with a Chinese UTF8 package name from a jar file\n+ * Note: The specified jar file to to be loaded in this test is automatically generated so as to\n+ * avoid any issue with platform dependencies.\n+ * \n+ */\n+@Test(groups = { \"level.sanity\" })\n+public class LoadClassWithUTF8PkgNameTest {\n+\t\n+\tprivate static byte[] classBytes;\n+\tfinal static int classVersionJava8 = 52;\n+\tfinal static String loadedPackagePath = \"org/openj9/resources/utf8pkgname/loaded_Utf8Class_\\u6b63\\u5728\\u52a0\\u8f7d\\u7c7b\\u5305\\u540d\\u957f\\u5ea6\\u6570\\u68c0\\u67e5/\";\n+\tfinal static String loadedClassName = \"Utf8ClassPackageNameTest\";\n+\tfinal static String loadedClassFileWithPackagePath = loadedPackagePath + loadedClassName + \".class\";\n+\tfinal static String loadedClassNameWithDotPath = loadedPackagePath.replace('/', '.') + loadedClassName;\n+\tfinal static String jarFileNameWithPath = System.getProperty(\"user.dir\") + \"/\" + \"Utf8PkgName.jar\";\n+\t\n+\tpublic static byte[] generateClassBytes(String loadedPackagePath, String loadedClassName, int classVersion) throws Exception {\n+\n+\t\tClassWriter cw = new ClassWriter(0);\n+\t\tFieldVisitor fv;\n+\t\tMethodVisitor mv;\n+\t\tAnnotationVisitor av0;\n+\n+\t\tcw.visit(classVersion, ACC_PUBLIC + ACC_SUPER, loadedPackagePath + loadedClassName, null, \"java/lang/Object\", null);\n+\t\tcw.visitSource(loadedClassName + \".java\", null);\n+\n+\t\t{\n+\t\t\tmv = cw.visitMethod(ACC_PUBLIC, \"<init>\", \"()V\", null, null);\n+\t\t\tmv.visitCode();\n+\t\t\tLabel l0 = new Label();\n+\t\t\tmv.visitLabel(l0);\n+\t\t\tmv.visitLineNumber(29, l0);\n+\t\t\tmv.visitVarInsn(ALOAD, 0);\n+\t\t\tmv.visitMethodInsn(INVOKESPECIAL, \"java/lang/Object\", \"<init>\", \"()V\");\n+\t\t\tmv.visitInsn(RETURN);\n+\t\t\tLabel l1 = new Label();\n+\t\t\tmv.visitLabel(l1);\n+\t\t\tmv.visitLocalVariable(\"this\", \"L\" + loadedPackagePath + loadedClassName + \";\", null, l0, l1, 0);\n+\t\t\tmv.visitMaxs(1, 1);\n+\t\t\tmv.visitEnd();\n+\t\t}\n+\t\tcw.visitEnd();\n+\n+\t\treturn cw.toByteArray();\n+\t}\n+\t\n+\t@BeforeTest\n+\tpublic void beforeTest() throws Exception {\n+\t\tString ver = System.getProperty(\"java.version\");\n+\t\tboolean isJava8ClassFile = ((ver.length()>=3) && ver.substring(0, 2).equalsIgnoreCase(\"1.8\")) ? true : false;", "originalCommit": "82bd13bdec5e7d2b198e3583f508f856d77e2b9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcxNzk0OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9229#discussion_r407717948", "bodyText": "Replaced with VersionCheck.major() and verified locally with internal JDK8, OpenJDK Java 11 and 14.", "author": "ChengJin01", "createdAt": "2020-04-13T20:59:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY4NjMyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY4NzYyMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9229#discussion_r407687623", "bodyText": "There is a JarOutputStream constructor that doesn't take a manifest. Can it be used instead to simplify the test?", "author": "pshipton", "createdAt": "2020-04-13T20:02:25Z", "path": "test/functional/Java8andUp/src/org/openj9/test/utf8ClassPkgName/LoadClassWithUTF8PkgNameTest.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+package org.openj9.test.utf8ClassPkgName;\n+\n+import java.util.regex.Pattern;\n+import java.util.jar.Manifest;\n+import java.util.jar.Attributes;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarOutputStream;\n+import java.io.OutputStream;\n+import java.io.FileOutputStream;\n+import java.io.File;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+\n+import org.objectweb.asm.*;\n+import static org.objectweb.asm.Opcodes.ACC_PUBLIC;\n+import static org.objectweb.asm.Opcodes.ACC_SUPER;\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.INVOKESPECIAL;\n+import static org.objectweb.asm.Opcodes.RETURN;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+import org.testng.annotations.BeforeTest;\n+\n+\n+/**\n+ * Verify whether VM successfully loads a class with a Chinese UTF8 package name from a jar file\n+ * Note: The specified jar file to to be loaded in this test is automatically generated so as to\n+ * avoid any issue with platform dependencies.\n+ * \n+ */\n+@Test(groups = { \"level.sanity\" })\n+public class LoadClassWithUTF8PkgNameTest {\n+\t\n+\tprivate static byte[] classBytes;\n+\tfinal static int classVersionJava8 = 52;\n+\tfinal static String loadedPackagePath = \"org/openj9/resources/utf8pkgname/loaded_Utf8Class_\\u6b63\\u5728\\u52a0\\u8f7d\\u7c7b\\u5305\\u540d\\u957f\\u5ea6\\u6570\\u68c0\\u67e5/\";\n+\tfinal static String loadedClassName = \"Utf8ClassPackageNameTest\";\n+\tfinal static String loadedClassFileWithPackagePath = loadedPackagePath + loadedClassName + \".class\";\n+\tfinal static String loadedClassNameWithDotPath = loadedPackagePath.replace('/', '.') + loadedClassName;\n+\tfinal static String jarFileNameWithPath = System.getProperty(\"user.dir\") + \"/\" + \"Utf8PkgName.jar\";\n+\t\n+\tpublic static byte[] generateClassBytes(String loadedPackagePath, String loadedClassName, int classVersion) throws Exception {\n+\n+\t\tClassWriter cw = new ClassWriter(0);\n+\t\tFieldVisitor fv;\n+\t\tMethodVisitor mv;\n+\t\tAnnotationVisitor av0;\n+\n+\t\tcw.visit(classVersion, ACC_PUBLIC + ACC_SUPER, loadedPackagePath + loadedClassName, null, \"java/lang/Object\", null);\n+\t\tcw.visitSource(loadedClassName + \".java\", null);\n+\n+\t\t{\n+\t\t\tmv = cw.visitMethod(ACC_PUBLIC, \"<init>\", \"()V\", null, null);\n+\t\t\tmv.visitCode();\n+\t\t\tLabel l0 = new Label();\n+\t\t\tmv.visitLabel(l0);\n+\t\t\tmv.visitLineNumber(29, l0);\n+\t\t\tmv.visitVarInsn(ALOAD, 0);\n+\t\t\tmv.visitMethodInsn(INVOKESPECIAL, \"java/lang/Object\", \"<init>\", \"()V\");\n+\t\t\tmv.visitInsn(RETURN);\n+\t\t\tLabel l1 = new Label();\n+\t\t\tmv.visitLabel(l1);\n+\t\t\tmv.visitLocalVariable(\"this\", \"L\" + loadedPackagePath + loadedClassName + \";\", null, l0, l1, 0);\n+\t\t\tmv.visitMaxs(1, 1);\n+\t\t\tmv.visitEnd();\n+\t\t}\n+\t\tcw.visitEnd();\n+\n+\t\treturn cw.toByteArray();\n+\t}\n+\t\n+\t@BeforeTest\n+\tpublic void beforeTest() throws Exception {\n+\t\tString ver = System.getProperty(\"java.version\");\n+\t\tboolean isJava8ClassFile = ((ver.length()>=3) && ver.substring(0, 2).equalsIgnoreCase(\"1.8\")) ? true : false;\n+\t\t\n+\t\t/* The generated class file is only used by the java version >= Java 8 */\n+\t\tint classVersion = classVersionJava8;\n+\t\tif (!isJava8ClassFile) {\n+\t\t\t/* use the first located number in the version string assuming\n+\t\t\t * the major version number is 9, 10, 11, 12, 13, 14 ... \n+\t\t\t * Note: internal build might come with '-' in the version string.\n+\t\t\t * e.g. 14-internal\n+\t\t\t */\n+\t\t\tString splitPattern = (ver.indexOf('.') >= 0) ? Pattern.quote(\".\") : \n+\t\t\t\t\t\t\t\t\t((ver.indexOf('-') >=0) ? Pattern.quote(\"-\"): null);\n+\t\t\tString verDigits = (null != splitPattern) ? ver.split(splitPattern)[0] : ver;\n+\t\t\tclassVersion = (Integer.parseInt(verDigits) - 8) + classVersionJava8;\n+\t\t}\n+\t\tclassBytes = generateClassBytes(loadedPackagePath, loadedClassName, classVersion);\n+\t\t\n+\t\t/* prepare the MANIFEST data for the specified jar file */\n+\t\tString jarFileVersion = \"1.0.0\";\n+\t\tString jarFileAuthor = \"IBM OpenJ9\";\n+\t\tManifest manifestData = new Manifest();", "originalCommit": "82bd13bdec5e7d2b198e3583f508f856d77e2b9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcxODEzMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9229#discussion_r407718130", "bodyText": "Removed as suggested above.", "author": "ChengJin01", "createdAt": "2020-04-13T21:00:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY4NzYyMw=="}], "type": "inlineReview"}, {"oid": "498986be7c4b89f84f2259da66ce71b0192cf7b3", "url": "https://github.com/eclipse-openj9/openj9/commit/498986be7c4b89f84f2259da66ce71b0192cf7b3", "message": "Add test to verify the qualified UTF8 class name\n\nThe test is to verify the length of the class name\nwith UTF8 package path name in loading classes from\na specified jar file.\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>", "committedDate": "2020-04-13T20:58:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyMTMxNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9229#discussion_r407721317", "bodyText": "Pls remove the unused entries from the imports.", "author": "pshipton", "createdAt": "2020-04-13T21:06:23Z", "path": "test/functional/Java8andUp/src/org/openj9/test/utf8ClassPkgName/LoadClassWithUTF8PkgNameTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+package org.openj9.test.utf8ClassPkgName;\n+\n+import java.util.regex.Pattern;\n+import java.util.jar.Manifest;", "originalCommit": "498986be7c4b89f84f2259da66ce71b0192cf7b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyODk1NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9229#discussion_r407728955", "bodyText": "Removed.", "author": "ChengJin01", "createdAt": "2020-04-13T21:21:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyMTMxNw=="}], "type": "inlineReview"}, {"oid": "7d6f7da97052895affd10f250f1b380f471c59b3", "url": "https://github.com/eclipse-openj9/openj9/commit/7d6f7da97052895affd10f250f1b380f471c59b3", "message": "Add test to verify the qualified UTF8 class name\n\nThe test is to verify the length of the class name\nwith UTF8 package path name in loading classes from\na specified jar file. [ci skip]\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>", "committedDate": "2020-04-13T21:20:38Z", "type": "forcePushed"}, {"oid": "0a1677bab77fa9e417990897cda6ca4f772c9903", "url": "https://github.com/eclipse-openj9/openj9/commit/0a1677bab77fa9e417990897cda6ca4f772c9903", "message": "Add test to verify the qualified UTF8 class name\n\nThe test is to verify the length of the class name\nwith UTF8 package path name in loading classes from\na specified jar file. [ci skip]\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>", "committedDate": "2020-04-16T17:54:40Z", "type": "commit"}, {"oid": "0a1677bab77fa9e417990897cda6ca4f772c9903", "url": "https://github.com/eclipse-openj9/openj9/commit/0a1677bab77fa9e417990897cda6ca4f772c9903", "message": "Add test to verify the qualified UTF8 class name\n\nThe test is to verify the length of the class name\nwith UTF8 package path name in loading classes from\na specified jar file. [ci skip]\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>", "committedDate": "2020-04-16T17:54:40Z", "type": "forcePushed"}]}