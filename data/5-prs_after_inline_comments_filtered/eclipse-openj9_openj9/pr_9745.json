{"pr_number": 9745, "pr_title": "Sampling allocation bytes precisely without compromising the performance", "pr_createdAt": "2020-05-29T18:59:20Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/9745", "timeline": [{"oid": "3e18189e1a258cb36380c6965d2cec270a1d9994", "url": "https://github.com/eclipse-openj9/openj9/commit/3e18189e1a258cb36380c6965d2cec270a1d9994", "message": "Sampling allocation bytes precisely without compromising the performance\n\nin order to sampling heap allocation bytes precisely without\ncompromising the performance, we have the below changes.\n\nHandle instrumentableAllocateHook and\nVM_OBJECT_ALLOCATE_WITHIN_THRESHOLD is still via disabling inline\nallocation\nHandle smapling for tracepoint is still during out of line allocation\nHandle smapling for JEP331 is via setTLHSamplingTop(size)\n\nUsing fake Heap Top instead of fake Heap Alloc for disabling inline\nallocation (realHeapAlloc-->realHeapTop,\nset/getRealAlloc()-->set/getRealTop(), getRealSize(), getUsedSize())\nUsing fake Heap Top to force out of line allocation at sampling thresold\nfor sampling heap allocation (setTLHSamplingTop()/resetTLHSamplingTop())\nsetTLHSamplingTop(size) are only called in the below 3 cases\n\t1, sampling threshold has been changed via GC-VM api\nj9gc_set_allocation_sampling_interval()\n\t2, TLH is refreshed\n\t3, after sampling is done\n\nCounting trace allocation byte includes allocation bytes inside TLH\nCache before flushing(_stats.bytesAllocated(true),\nstats->_tlhAllocatedUsed, )\nHandle traceAllocationByte for Health\nCenter(_oolTraceAllocationBytesForTracepoint,\noolObjectSamplingBytesGranularityForTracepoint) and traceAllocationByte\nfor JEP331(_traceAllocationBytesForHook,\nobjectSamplingBytesGranularityForHook) independently\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>", "committedDate": "2020-06-01T19:15:43Z", "type": "forcePushed"}, {"oid": "03f2d378a2fc4de288719cc6e485ea68b9f84547", "url": "https://github.com/eclipse-openj9/openj9/commit/03f2d378a2fc4de288719cc6e485ea68b9f84547", "message": "Sampling allocation bytes precisely without compromising the performance\n\nin order to sampling heap allocation bytes precisely without\ncompromising the performance, we have the below changes.\n\nHandle instrumentableAllocateHook and\nVM_OBJECT_ALLOCATE_WITHIN_THRESHOLD is still via disabling inline\nallocation\nHandle smapling for tracepoint is still during out of line allocation\nHandle smapling for JEP331 is via setTLHSamplingTop(size)\n\nUsing fake Heap Top instead of fake Heap Alloc for disabling inline\nallocation (realHeapAlloc-->realHeapTop,\nset/getRealAlloc()-->set/getRealTop(), getRealSize(), getUsedSize())\nUsing fake Heap Top to force out of line allocation at sampling thresold\nfor sampling heap allocation (setTLHSamplingTop()/resetTLHSamplingTop())\nsetTLHSamplingTop(size) are only called in the below 3 cases\n\t1, sampling threshold has been changed via GC-VM api\nj9gc_set_allocation_sampling_interval()\n\t2, TLH is refreshed\n\t3, after sampling is done\n\nCounting trace allocation byte includes allocation bytes inside TLH\nCache before flushing(_stats.bytesAllocated(true),\nstats->_tlhAllocatedUsed, )\nHandle traceAllocationByte for Health\nCenter(_oolTraceAllocationBytesForTracepoint,\noolObjectSamplingBytesGranularityForTracepoint) and traceAllocationByte\nfor JEP331(_traceAllocationBytesForHook,\nobjectSamplingBytesGranularityForHook) independently\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>", "committedDate": "2020-06-02T02:40:23Z", "type": "forcePushed"}, {"oid": "0b095c2c42709d99721cb48b63251f1d575eebb0", "url": "https://github.com/eclipse-openj9/openj9/commit/0b095c2c42709d99721cb48b63251f1d575eebb0", "message": "Sampling allocation bytes precisely without compromising the performance\n\nin order to sampling heap allocation bytes precisely without\ncompromising the performance, we have the below changes.\n\nHandle instrumentableAllocateHook and\nVM_OBJECT_ALLOCATE_WITHIN_THRESHOLD is still via disabling inline\nallocation\nHandle smapling for tracepoint is still during out of line allocation\nHandle smapling for JEP331 is via setTLHSamplingTop(size)\n\nUsing fake Heap Top instead of fake Heap Alloc for disabling inline\nallocation (realHeapAlloc-->realHeapTop,\nset/getRealAlloc()-->set/getRealTop(), getRealSize(), getUsedSize())\nUsing fake Heap Top to force out of line allocation at sampling thresold\nfor sampling heap allocation (setTLHSamplingTop()/resetTLHSamplingTop())\nsetTLHSamplingTop(size) are only called in the below 3 cases\n\t1, sampling threshold has been changed via GC-VM api\nj9gc_set_allocation_sampling_interval()\n\t2, TLH is refreshed\n\t3, after sampling is done\n\nCounting trace allocation byte includes allocation bytes inside TLH\nCache before flushing(_stats.bytesAllocated(true),\nstats->_tlhAllocatedUsed, )\nHandle traceAllocationByte for Health\nCenter(_oolTraceAllocationBytesForTracepoint,\noolObjectSamplingBytesGranularityForTracepoint) and traceAllocationByte\nfor JEP331(_traceAllocationBytesForHook,\nobjectSamplingBytesGranularityForHook) independently\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>", "committedDate": "2020-06-02T15:08:29Z", "type": "forcePushed"}, {"oid": "502edcd17f84c254e74a42242e8c08409d86c078", "url": "https://github.com/eclipse-openj9/openj9/commit/502edcd17f84c254e74a42242e8c08409d86c078", "message": "Sampling allocation bytes precisely without compromising the performance\n\nin order to sampling heap allocation bytes precisely without\ncompromising the performance, we have the below changes.\n\nHandle instrumentableAllocateHook and\nVM_OBJECT_ALLOCATE_WITHIN_THRESHOLD is still via disabling inline\nallocation\nHandle smapling for tracepoint is still during out of line allocation\nHandle smapling for JEP331 is via setTLHSamplingTop(size)\n\nUsing fake Heap Top instead of fake Heap Alloc for disabling inline\nallocation (realHeapAlloc-->realHeapTop,\nset/getRealAlloc()-->set/getRealTop(), getRealSize(), getUsedSize())\nUsing fake Heap Top to force out of line allocation at sampling thresold\nfor sampling heap allocation (setTLHSamplingTop()/resetTLHSamplingTop())\nsetTLHSamplingTop(size) are only called in the below 3 cases\n\t1, sampling threshold has been changed via GC-VM api\nj9gc_set_allocation_sampling_interval()\n\t2, TLH is refreshed\n\t3, after sampling is done\n\nCounting trace allocation byte includes allocation bytes inside TLH\nCache before flushing(_stats.bytesAllocated(true),\nstats->_tlhAllocatedUsed, )\nHandle traceAllocationByte for Health\nCenter(_oolTraceAllocationBytesForTracepoint,\noolObjectSamplingBytesGranularityForTracepoint) and traceAllocationByte\nfor JEP331(_traceAllocationBytesForHook,\nobjectSamplingBytesGranularityForHook) independently\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>", "committedDate": "2020-06-02T16:02:35Z", "type": "forcePushed"}, {"oid": "5402cf7fc7be87a3c5724e66db29e8e9b2a7cbf7", "url": "https://github.com/eclipse-openj9/openj9/commit/5402cf7fc7be87a3c5724e66db29e8e9b2a7cbf7", "message": "Sampling allocation bytes precisely without compromising the performance\n\nin order to sampling heap allocation bytes precisely without\ncompromising the performance, we have the below changes.\n\nHandle instrumentableAllocateHook and\nVM_OBJECT_ALLOCATE_WITHIN_THRESHOLD is still via disabling inline\nallocation\nHandle smapling for tracepoint is still during out of line allocation\nHandle smapling for JEP331 is via setTLHSamplingTop(size)\n\nUsing fake Heap Top instead of fake Heap Alloc for disabling inline\nallocation (realHeapAlloc-->realHeapTop,\nset/getRealAlloc()-->set/getRealTop(), getRealSize(), getUsedSize())\nUsing fake Heap Top to force out of line allocation at sampling thresold\nfor sampling heap allocation (setTLHSamplingTop()/resetTLHSamplingTop())\nsetTLHSamplingTop(size) are only called in the below 3 cases\n\t1, sampling threshold has been changed via GC-VM api\nj9gc_set_allocation_sampling_interval()\n\t2, TLH is refreshed\n\t3, after sampling is done\n\nCounting trace allocation byte includes allocation bytes inside TLH\nCache before flushing(_stats.bytesAllocated(true),\nstats->_tlhAllocatedUsed, )\nHandle traceAllocationByte for Health\nCenter(_oolTraceAllocationBytesForTracepoint,\noolObjectSamplingBytesGranularityForTracepoint) and traceAllocationByte\nfor JEP331(_traceAllocationBytesForHook,\nobjectSamplingBytesGranularityForHook) independently\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>", "committedDate": "2020-06-02T19:17:00Z", "type": "forcePushed"}, {"oid": "e07dcc466b56a6fb26b1bc499a62adcebb1e6549", "url": "https://github.com/eclipse-openj9/openj9/commit/e07dcc466b56a6fb26b1bc499a62adcebb1e6549", "message": "Sampling allocation bytes precisely without compromising the performance\n\nin order to sampling heap allocation bytes precisely without\ncompromising the performance, we have the below changes.\n\nHandle instrumentableAllocateHook and\nVM_OBJECT_ALLOCATE_WITHIN_THRESHOLD is still via disabling inline\nallocation\nHandle smapling for tracepoint is still during out of line allocation\nHandle smapling for JEP331 is via setTLHSamplingTop(size)\n\nUsing fake Heap Top instead of fake Heap Alloc for disabling inline\nallocation (realHeapAlloc-->realHeapTop,\nset/getRealAlloc()-->set/getRealTop(), getRealSize(), getUsedSize())\nUsing fake Heap Top to force out of line allocation at sampling thresold\nfor sampling heap allocation (setTLHSamplingTop()/resetTLHSamplingTop())\nsetTLHSamplingTop(size) are only called in the below 3 cases\n\t1, sampling threshold has been changed via GC-VM api\nj9gc_set_allocation_sampling_interval()\n\t2, TLH is refreshed\n\t3, after sampling is done\n\nCounting trace allocation byte includes allocation bytes inside TLH\nCache before flushing(_stats.bytesAllocated(true),\nstats->_tlhAllocatedUsed, )\nHandle traceAllocationByte for Health\nCenter(_oolTraceAllocationBytesForTracepoint,\noolObjectSamplingBytesGranularityForTracepoint) and traceAllocationByte\nfor JEP331(_traceAllocationBytesForHook,\nobjectSamplingBytesGranularityForHook) independently\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>", "committedDate": "2020-06-03T20:14:00Z", "type": "forcePushed"}, {"oid": "02d2c1bb10337124fa21680748a004cc72083808", "url": "https://github.com/eclipse-openj9/openj9/commit/02d2c1bb10337124fa21680748a004cc72083808", "message": "Sampling allocation bytes precisely without compromising the performance\n\nin order to sampling heap allocation bytes precisely without\ncompromising the performance, we have the below changes.\n\nHandle instrumentableAllocateHook and\nVM_OBJECT_ALLOCATE_WITHIN_THRESHOLD is still via disabling inline\nallocation\nHandle smapling for tracepoint is still during out of line allocation\nHandle smapling for JEP331 is via setTLHSamplingTop(size)\n\nUsing fake Heap Top instead of fake Heap Alloc for disabling inline\nallocation (realHeapAlloc-->realHeapTop,\nset/getRealAlloc()-->set/getRealTop(), getRealSize(), getUsedSize())\nUsing fake Heap Top to force out of line allocation at sampling thresold\nfor sampling heap allocation (setTLHSamplingTop()/resetTLHSamplingTop())\nsetTLHSamplingTop(size) are only called in the below 3 cases\n\t1, sampling threshold has been changed via GC-VM api\nj9gc_set_allocation_sampling_interval()\n\t2, TLH is refreshed\n\t3, after sampling is done\n\nCounting trace allocation byte includes allocation bytes inside TLH\nCache before flushing(_stats.bytesAllocated(true),\nstats->_tlhAllocatedUsed, )\nHandle traceAllocationByte for Health\nCenter(_oolTraceAllocationBytesForTracepoint,\noolObjectSamplingBytesGranularityForTracepoint) and traceAllocationByte\nfor JEP331(_traceAllocationBytesForHook,\nobjectSamplingBytesGranularityForHook) independently\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>", "committedDate": "2020-06-03T20:50:02Z", "type": "forcePushed"}, {"oid": "3e1814067f92394aa73a773e15a8f83e9c43990c", "url": "https://github.com/eclipse-openj9/openj9/commit/3e1814067f92394aa73a773e15a8f83e9c43990c", "message": "Sampling allocation bytes precisely without compromising the performance\n\nin order to sampling heap allocation bytes precisely without\ncompromising the performance, we have the below changes.\n\nHandle instrumentableAllocateHook and\nVM_OBJECT_ALLOCATE_WITHIN_THRESHOLD is still via disabling inline\nallocation\nHandle smapling for tracepoint is still during out of line allocation\nHandle smapling for JEP331 is via setTLHSamplingTop(size)\n\nUsing fake Heap Top instead of fake Heap Alloc for disabling inline\nallocation (realHeapAlloc-->realHeapTop,\nset/getRealAlloc()-->set/getRealTop(), getRealSize(), getUsedSize())\nUsing fake Heap Top to force out of line allocation at sampling thresold\nfor sampling heap allocation (setTLHSamplingTop()/resetTLHSamplingTop())\nsetTLHSamplingTop(size) are only called in the below 3 cases\n\t1, sampling threshold has been changed via GC-VM api\nj9gc_set_allocation_sampling_interval()\n\t2, TLH is refreshed\n\t3, after sampling is done\n\nCounting trace allocation byte includes allocation bytes inside TLH\nCache before flushing(_stats.bytesAllocated(true),\nstats->_tlhAllocatedUsed, )\nHandle traceAllocationByte for Health\nCenter(_oolTraceAllocationBytesForTracepoint,\noolObjectSamplingBytesGranularityForTracepoint) and traceAllocationByte\nfor JEP331(_traceAllocationBytesForHook,\nobjectSamplingBytesGranularityForHook) independently\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>", "committedDate": "2020-06-03T21:12:34Z", "type": "forcePushed"}, {"oid": "86eb95857b3d16128ee37448649f80ab7615d635", "url": "https://github.com/eclipse-openj9/openj9/commit/86eb95857b3d16128ee37448649f80ab7615d635", "message": "Sampling allocation bytes precisely without compromising the performance\n\nin order to sampling heap allocation bytes precisely without\ncompromising the performance, we have the below changes.\n\nHandle instrumentableAllocateHook and\nVM_OBJECT_ALLOCATE_WITHIN_THRESHOLD is still via disabling inline\nallocation\nHandle smapling for tracepoint is still during out of line allocation\nHandle smapling for JEP331 is via setTLHSamplingTop(size)\n\nUsing fake Heap Top instead of fake Heap Alloc for disabling inline\nallocation (realHeapAlloc-->realHeapTop,\nset/getRealAlloc()-->set/getRealTop(), getRealSize(), getUsedSize())\nUsing fake Heap Top to force out of line allocation at sampling thresold\nfor sampling heap allocation (setTLHSamplingTop()/resetTLHSamplingTop())\nsetTLHSamplingTop(size) are only called in the below 3 cases\n\t1, sampling threshold has been changed via GC-VM api\nj9gc_set_allocation_sampling_interval()\n\t2, TLH is refreshed\n\t3, after sampling is done\n\nCounting trace allocation byte includes allocation bytes inside TLH\nCache before flushing(_stats.bytesAllocated(true),\nstats->_tlhAllocatedUsed, )\nHandle traceAllocationByte for Health\nCenter(_oolTraceAllocationBytesForTracepoint,\noolObjectSamplingBytesGranularityForTracepoint) and traceAllocationByte\nfor JEP331(_traceAllocationBytesForHook,\nobjectSamplingBytesGranularityForHook) independently\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>", "committedDate": "2020-06-04T13:48:55Z", "type": "forcePushed"}, {"oid": "d2dd5591146ad6d9c1690cd2be03d9dd7e187452", "url": "https://github.com/eclipse-openj9/openj9/commit/d2dd5591146ad6d9c1690cd2be03d9dd7e187452", "message": "Sampling allocation bytes precisely without compromising the performance\n\nin order to sampling heap allocation bytes precisely without\ncompromising the performance, we have the below changes.\n\nHandle instrumentableAllocateHook and\nVM_OBJECT_ALLOCATE_WITHIN_THRESHOLD is still via disabling inline\nallocation\nHandle smapling for tracepoint is still during out of line allocation\nHandle smapling for JEP331 is via setTLHSamplingTop(size)\n\nUsing fake Heap Top instead of fake Heap Alloc for disabling inline\nallocation (realHeapAlloc-->realHeapTop,\nset/getRealAlloc()-->set/getRealTop(), getRealSize(), getUsedSize())\nUsing fake Heap Top to force out of line allocation at sampling thresold\nfor sampling heap allocation (setTLHSamplingTop()/resetTLHSamplingTop())\nsetTLHSamplingTop(size) are only called in the below 3 cases\n\t1, sampling threshold has been changed via GC-VM api\nj9gc_set_allocation_sampling_interval()\n\t2, TLH is refreshed\n\t3, after sampling is done\n\nCounting trace allocation byte includes allocation bytes inside TLH\nCache before flushing(_stats.bytesAllocated(true),\nstats->_tlhAllocatedUsed, )\nHandle traceAllocationByte for Health\nCenter(_oolTraceAllocationBytesForTracepoint,\noolObjectSamplingBytesGranularityForTracepoint) and traceAllocationByte\nfor JEP331(_traceAllocationBytesForHook,\nobjectSamplingBytesGranularityForHook) independently\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>", "committedDate": "2020-06-04T13:53:34Z", "type": "commit"}, {"oid": "d2dd5591146ad6d9c1690cd2be03d9dd7e187452", "url": "https://github.com/eclipse-openj9/openj9/commit/d2dd5591146ad6d9c1690cd2be03d9dd7e187452", "message": "Sampling allocation bytes precisely without compromising the performance\n\nin order to sampling heap allocation bytes precisely without\ncompromising the performance, we have the below changes.\n\nHandle instrumentableAllocateHook and\nVM_OBJECT_ALLOCATE_WITHIN_THRESHOLD is still via disabling inline\nallocation\nHandle smapling for tracepoint is still during out of line allocation\nHandle smapling for JEP331 is via setTLHSamplingTop(size)\n\nUsing fake Heap Top instead of fake Heap Alloc for disabling inline\nallocation (realHeapAlloc-->realHeapTop,\nset/getRealAlloc()-->set/getRealTop(), getRealSize(), getUsedSize())\nUsing fake Heap Top to force out of line allocation at sampling thresold\nfor sampling heap allocation (setTLHSamplingTop()/resetTLHSamplingTop())\nsetTLHSamplingTop(size) are only called in the below 3 cases\n\t1, sampling threshold has been changed via GC-VM api\nj9gc_set_allocation_sampling_interval()\n\t2, TLH is refreshed\n\t3, after sampling is done\n\nCounting trace allocation byte includes allocation bytes inside TLH\nCache before flushing(_stats.bytesAllocated(true),\nstats->_tlhAllocatedUsed, )\nHandle traceAllocationByte for Health\nCenter(_oolTraceAllocationBytesForTracepoint,\noolObjectSamplingBytesGranularityForTracepoint) and traceAllocationByte\nfor JEP331(_traceAllocationBytesForHook,\nobjectSamplingBytesGranularityForHook) independently\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>", "committedDate": "2020-06-04T13:53:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2Mzk0OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9745#discussion_r435563949", "bodyText": "This will fail with NoSuchFieldError when examining core files created before the addition of realHeapTop.", "author": "keithc-ca", "createdAt": "2020-06-04T21:29:56Z", "path": "debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java", "diffHunk": "@@ -75,9 +75,9 @@ protected GCObjectHeapIteratorAddressOrderedList_V1(U8Pointer base, U8Pointer to\n \t\t\t\t\t\texcludedRangeList.add(new U8Pointer[] {heapAlloc, heapTop});\n \t\t\t\t\t} else {\n \t\t\t\t\t\t/* Might be an instrumented VM */\n-\t\t\t\t\t\tU8Pointer realHeapAlloc = adjustedToRange(vmThread.allocateThreadLocalHeap().realHeapAlloc(), base, top);\n-\t\t\t\t\t\tif(realHeapAlloc.notNull() && isSomethingToAdd(realHeapAlloc, heapTop)) {\n-\t\t\t\t\t\t\texcludedRangeList.add(new U8Pointer[] {realHeapAlloc, heapTop});\n+\t\t\t\t\t\tU8Pointer realHeapTop = adjustedToRange(vmThread.allocateThreadLocalHeap().realHeapTop(), base, top);", "originalCommit": "d2dd5591146ad6d9c1690cd2be03d9dd7e187452", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5MDAyNQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9745#discussion_r435590025", "bodyText": "Good point, thank you very much.", "author": "dmitripivkine", "createdAt": "2020-06-04T22:37:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2Mzk0OQ=="}], "type": "inlineReview"}]}