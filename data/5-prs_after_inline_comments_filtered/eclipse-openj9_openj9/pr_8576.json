{"pr_number": 8576, "pr_title": "Include Xlp Tests on Sanity Functional", "pr_createdAt": "2020-02-13T19:44:37Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/8576", "timeline": [{"oid": "30a5f9913d7475031ab4dd293caf28eed99d4071", "url": "https://github.com/eclipse-openj9/openj9/commit/30a5f9913d7475031ab4dd293caf28eed99d4071", "message": "Include Xlp Tests on Sanity Functional\n\nEnabling both the xlpcodecache and xlp(objectheap) tests.\n\nSigned-off-by: AlenBadel <Alen.Badel@ibm.com>", "committedDate": "2020-02-13T19:47:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzODQ0NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8576#discussion_r379138445", "bodyText": "Why the check for \"s390\"?", "author": "pshipton", "createdAt": "2020-02-13T21:50:12Z", "path": "test/functional/VM_Test/src/j9vm/runner/Runner.java", "diffHunk": "@@ -67,40 +67,45 @@\n \n \tprivate void setPlatform() {\n \t\t\n-\t\tString spec = System.getProperty(\"platform\");\n-\t\tif (spec != null) {\n+\t\tString OSSpec = System.getProperty(\"os.name\").toLowerCase();\n+\t\tif (OSSpec != null) {\n \t\t\t/* Get OS from the spec string */\n-\t\t\tif (spec.indexOf(\"aix\") != -1) {\n+\t\t\tif (OSSpec.contains(\"aix\")) {\n \t\t\t\tosName = OSName.AIX;\n-\t\t\t} else if (spec.indexOf(\"linux\") != -1){\n+\t\t\t} else if (OSSpec.contains(\"linux\")) {\n \t\t\t\tosName = OSName.LINUX;\n-\t\t\t} else if (spec.indexOf(\"win\") != -1) {\n+\t\t\t} else if (OSSpec.contains(\"windows\")) {\n \t\t\t\tosName = OSName.WINDOWS;\n-\t\t\t} else if (spec.indexOf(\"zos\") != -1) {\n+\t\t\t} else if (OSSpec.contains(\"z/os\")) {\n \t\t\t\tosName = OSName.ZOS;\n \t\t\t} else {\n+\t\t\t\tSystem.out.println(\"Runner couldn't determine underlying OS. Got OS Name:\" + OSSpec);\n \t\t\t\tosName = OSName.UNKNOWN;\n \t\t\t}\n-\t\t\t\n+\t\t}\n+\t\tString archSpec = System.getProperty(\"os.arch\").toLowerCase();\n+\t\tif (archSpec != null) {\n \t\t\t/* Get arch from spec string */\n-\t\t\tif (spec.indexOf(\"ppc\") != -1) {\n+\t\t\tif (archSpec.contains(\"ppc\")) {\n \t\t\t\tosArch = OSArch.PPC;\n-\t\t\t} else if (spec.indexOf(\"390\") != -1) {\n+\t\t\t} else if (archSpec.contains(\"s390\")) {\n \t\t\t\tosArch = OSArch.S390X;\n-\t\t\t} else if (spec.indexOf(\"x86\") != -1) {\n+\t\t\t} else if (archSpec.contains(\"amd64\") || archSpec.contains(\"x86\")) {\n \t\t\t\tosArch = OSArch.X86;\n \t\t\t} else {\n+\t\t\t\tSystem.out.println(\"Runner couldn't determine underlying architecture. Got OS Arch:\" + archSpec);\n \t\t\t\tosArch = OSArch.UNKNOWN;\n \t\t\t}\n \t\t\t\n \t\t\t/* Get address mode */\n-\t\t\tif (spec.indexOf(\"31\") != -1) {\n+\t\t\tif (archSpec.contains(\"31\")) {\n \t\t\t\taddrMode = AddrMode.BIT31;\n-\t\t\t} else if (spec.indexOf(\"32\") != -1) {\n+\t\t\t} else if (archSpec.contains(\"32\")) {\n \t\t\t\taddrMode = AddrMode.BIT32;\n-\t\t\t} else if (spec.indexOf(\"64\") != -1) {\n+\t\t\t} else if (archSpec.contains(\"64\") || archSpec.contains(\"s390\")) {", "originalCommit": "30a5f9913d7475031ab4dd293caf28eed99d4071", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0NTA4Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/8576#discussion_r379145086", "bodyText": "S390 contains a 31 bit, and 64bit addressing modes. The string on Z/OS does not actually have a \"64\" to signify that it's operating on a 64 bit addressing mode.", "author": "AlenBadel", "createdAt": "2020-02-13T22:04:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzODQ0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0OTkxOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8576#discussion_r379149919", "bodyText": "It would be good to have a comment to explain this.", "author": "pshipton", "createdAt": "2020-02-13T22:15:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzODQ0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU3MjA2OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8576#discussion_r379572069", "bodyText": "Done. I've added the comment and squashed it. Thanks for the feedback.", "author": "AlenBadel", "createdAt": "2020-02-14T18:10:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzODQ0NQ=="}], "type": "inlineReview"}, {"oid": "0aa32c29ca66c64138f05d80db74ce3836e0cbc5", "url": "https://github.com/eclipse-openj9/openj9/commit/0aa32c29ca66c64138f05d80db74ce3836e0cbc5", "message": "Include Xlp Tests on Sanity Functional\n\nEnabling both the xlpcodecache and xlp(objectheap) tests.\n\nSigned-off-by: AlenBadel <Alen.Badel@ibm.com>", "committedDate": "2020-02-14T18:08:35Z", "type": "forcePushed"}, {"oid": "6a672f9e73cd5db54d843f554960c521df172d31", "url": "https://github.com/eclipse-openj9/openj9/commit/6a672f9e73cd5db54d843f554960c521df172d31", "message": "Include Xlp Tests on Sanity Functional\n\nEnabling both the xlpcodecache and xlp(objectheap) tests.\n\nSigned-off-by: AlenBadel <Alen.Badel@ibm.com>", "committedDate": "2020-02-14T18:24:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwNDAyOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8576#discussion_r379604028", "bodyText": "It should be z/OS does.\nI don't see how z/OS 31-bit can be detected property. Not sure why the test uses os.arch to get the address mode, there is a better property that works across all platforms.\nz/OS 31-bit sun.arch.data.model = 32\nz/OS 64-bit sun.arch.data.model = 64", "author": "pshipton", "createdAt": "2020-02-14T19:24:55Z", "path": "test/functional/VM_Test/src/j9vm/runner/Runner.java", "diffHunk": "@@ -67,40 +67,46 @@\n \n \tprivate void setPlatform() {\n \t\t\n-\t\tString spec = System.getProperty(\"platform\");\n-\t\tif (spec != null) {\n+\t\tString OSSpec = System.getProperty(\"os.name\").toLowerCase();\n+\t\tif (OSSpec != null) {\n \t\t\t/* Get OS from the spec string */\n-\t\t\tif (spec.indexOf(\"aix\") != -1) {\n+\t\t\tif (OSSpec.contains(\"aix\")) {\n \t\t\t\tosName = OSName.AIX;\n-\t\t\t} else if (spec.indexOf(\"linux\") != -1){\n+\t\t\t} else if (OSSpec.contains(\"linux\")) {\n \t\t\t\tosName = OSName.LINUX;\n-\t\t\t} else if (spec.indexOf(\"win\") != -1) {\n+\t\t\t} else if (OSSpec.contains(\"windows\")) {\n \t\t\t\tosName = OSName.WINDOWS;\n-\t\t\t} else if (spec.indexOf(\"zos\") != -1) {\n+\t\t\t} else if (OSSpec.contains(\"z/os\")) {\n \t\t\t\tosName = OSName.ZOS;\n \t\t\t} else {\n+\t\t\t\tSystem.out.println(\"Runner couldn't determine underlying OS. Got OS Name:\" + OSSpec);\n \t\t\t\tosName = OSName.UNKNOWN;\n \t\t\t}\n-\t\t\t\n+\t\t}\n+\t\tString archSpec = System.getProperty(\"os.arch\").toLowerCase();\n+\t\tif (archSpec != null) {\n \t\t\t/* Get arch from spec string */\n-\t\t\tif (spec.indexOf(\"ppc\") != -1) {\n+\t\t\tif (archSpec.contains(\"ppc\")) {\n \t\t\t\tosArch = OSArch.PPC;\n-\t\t\t} else if (spec.indexOf(\"390\") != -1) {\n+\t\t\t} else if (archSpec.contains(\"s390\")) {\n \t\t\t\tosArch = OSArch.S390X;\n-\t\t\t} else if (spec.indexOf(\"x86\") != -1) {\n+\t\t\t} else if (archSpec.contains(\"amd64\") || archSpec.contains(\"x86\")) {\n \t\t\t\tosArch = OSArch.X86;\n \t\t\t} else {\n+\t\t\t\tSystem.out.println(\"Runner couldn't determine underlying architecture. Got OS Arch:\" + archSpec);\n \t\t\t\tosArch = OSArch.UNKNOWN;\n \t\t\t}\n \t\t\t\n \t\t\t/* Get address mode */\n-\t\t\tif (spec.indexOf(\"31\") != -1) {\n+\t\t\tif (archSpec.contains(\"31\")) {\n \t\t\t\taddrMode = AddrMode.BIT31;\n-\t\t\t} else if (spec.indexOf(\"32\") != -1) {\n+\t\t\t} else if (archSpec.contains(\"32\")) {\n \t\t\t\taddrMode = AddrMode.BIT32;\n-\t\t\t} else if (spec.indexOf(\"64\") != -1) {\n+\t\t\t/* os.arch on Z/OS Does not include the architecture. To support 64 bit addressing mode look for s390. */", "originalCommit": "6a672f9e73cd5db54d843f554960c521df172d31", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY0NjE2NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8576#discussion_r379646164", "bodyText": "Thanks for pointing that out. I've added that logic here 3187061.", "author": "AlenBadel", "createdAt": "2020-02-14T21:11:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwNDAyOA=="}], "type": "inlineReview"}, {"oid": "51580491fec4cf0e2cb287ee3f74dc56c00293e4", "url": "https://github.com/eclipse-openj9/openj9/commit/51580491fec4cf0e2cb287ee3f74dc56c00293e4", "message": "Use sun.arch.data.model to determine addressing mode", "committedDate": "2020-02-14T21:02:55Z", "type": "forcePushed"}, {"oid": "3187061c91b1751e1dbd85d0df02e9ed461ceef8", "url": "https://github.com/eclipse-openj9/openj9/commit/3187061c91b1751e1dbd85d0df02e9ed461ceef8", "message": "Use sun.arch.data.model to determine addressing mode", "committedDate": "2020-02-14T21:08:34Z", "type": "forcePushed"}, {"oid": "2edc870141963185aff600e822f201e76975fa37", "url": "https://github.com/eclipse-openj9/openj9/commit/2edc870141963185aff600e822f201e76975fa37", "message": "Include Xlp Tests on Sanity Functional\n\nEnabling both the xlpcodecache and xlp(objectheap) tests.\n\nSigned-off-by: AlenBadel <Alen.Badel@ibm.com>", "committedDate": "2020-02-15T00:44:14Z", "type": "forcePushed"}, {"oid": "155b25ae874122339b396caaedfa40d61d1943cd", "url": "https://github.com/eclipse-openj9/openj9/commit/155b25ae874122339b396caaedfa40d61d1943cd", "message": "Include Xlp Tests on Sanity Functional\n\nEnabling both the xlpcodecache and xlp(objectheap) tests.\n\nSigned-off-by: AlenBadel <Alen.Badel@ibm.com>", "committedDate": "2020-02-15T00:47:39Z", "type": "commit"}, {"oid": "155b25ae874122339b396caaedfa40d61d1943cd", "url": "https://github.com/eclipse-openj9/openj9/commit/155b25ae874122339b396caaedfa40d61d1943cd", "message": "Include Xlp Tests on Sanity Functional\n\nEnabling both the xlpcodecache and xlp(objectheap) tests.\n\nSigned-off-by: AlenBadel <Alen.Badel@ibm.com>", "committedDate": "2020-02-15T00:47:39Z", "type": "forcePushed"}]}