{"pr_number": 1378, "pr_title": "Pegin to any address", "pr_createdAt": "2020-11-26T22:23:51Z", "pr_url": "https://github.com/rsksmart/rskj/pull/1378", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQzNzk1Mg==", "url": "https://github.com/rsksmart/rskj/pull/1378#discussion_r544437952", "bodyText": "We might want to prevent addresses like the federation here. Not a big deal, but would just waste resources", "author": "donequis", "createdAt": "2020-12-16T16:25:10Z", "path": "rskj-core/src/main/java/co/rsk/peg/PeginInformation.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package co.rsk.peg;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.core.RskAddress;\n+import co.rsk.peg.btcLockSender.BtcLockSender;\n+import co.rsk.peg.btcLockSender.BtcLockSender.TxSenderAddressType;\n+import co.rsk.peg.btcLockSender.BtcLockSenderProvider;\n+import co.rsk.peg.pegininstructions.PeginInstructions;\n+import co.rsk.peg.pegininstructions.PeginInstructionsException;\n+import co.rsk.peg.pegininstructions.PeginInstructionsProvider;\n+import co.rsk.peg.pegininstructions.PeginInstructionsVersion1;\n+import java.util.Optional;\n+import org.ethereum.config.blockchain.upgrades.ActivationConfig;\n+import org.ethereum.config.blockchain.upgrades.ConsensusRule;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInformation {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInformation.class);\n+\n+    private final BtcLockSenderProvider btcLockSenderProvider;\n+    private final PeginInstructionsProvider peginInstructionsProvider;\n+    private final ActivationConfig.ForBlock activations;\n+\n+    private int protocolVersion;\n+    private RskAddress rskDestinationAddress;\n+    private Address btcRefundAddress;\n+    private Address senderBtcAddress;\n+    private TxSenderAddressType senderBtcAddressType;\n+\n+    public PeginInformation(\n+        BtcLockSenderProvider btcLockSenderProvider,\n+        PeginInstructionsProvider peginInstructionsProvider,\n+        ActivationConfig.ForBlock activations) {\n+        this.btcLockSenderProvider = btcLockSenderProvider;\n+        this.peginInstructionsProvider = peginInstructionsProvider;\n+        this.activations = activations;\n+        this.protocolVersion = -1; // Set an invalid value by default\n+        this.senderBtcAddressType = TxSenderAddressType.UNKNOWN;\n+    }\n+\n+    public int getProtocolVersion() {\n+        return protocolVersion;\n+    }\n+\n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    public Address getBtcRefundAddress() {\n+        return this.btcRefundAddress;\n+    }\n+\n+    public Address getSenderBtcAddress() {\n+        return this.senderBtcAddress;\n+    }\n+\n+    public TxSenderAddressType getSenderBtcAddressType() {\n+        return this.senderBtcAddressType;\n+    }\n+\n+    public void parse(BtcTransaction btcTx) throws PeginInstructionsException {\n+        logger.trace(\"[parse] Trying to parse peg-in information from btc tx {}\", btcTx.getHash());\n+\n+        // Get information from tx sender first\n+        Optional<BtcLockSender> btcLockSenderOptional = btcLockSenderProvider.tryGetBtcLockSender(btcTx);\n+        if (btcLockSenderOptional.isPresent()) {\n+            BtcLockSender btcLockSender = btcLockSenderOptional.get();\n+            parseFromBtcLockSender(btcLockSender);\n+        }\n+\n+        // If HF is active and peg-in instructions were provided then override the info obtained from BtcLockSender\n+        Optional<PeginInstructions> peginInstructionsOptional = Optional.empty();\n+        if (activations.isActive(ConsensusRule.RSKIP170)) {\n+            peginInstructionsOptional = peginInstructionsProvider.buildPeginInstructions(btcTx);\n+            if (peginInstructionsOptional.isPresent()) {\n+                PeginInstructions peginInstructions = peginInstructionsOptional.get();\n+                parseFromPeginInstructions(peginInstructions);\n+            }\n+        }\n+\n+        // If BtcLockSender could not be parsed and peg-in instructions were not provided, then this tx can't be processed\n+        if(!btcLockSenderOptional.isPresent() && !peginInstructionsOptional.isPresent()) {\n+            String message = String.format(\"Could not get peg-in information for tx %s\", btcTx.getHash());\n+            logger.warn(\"[parse] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+    }\n+\n+    private void parseFromBtcLockSender(BtcLockSender btcLockSender) {\n+        this.protocolVersion = 0;\n+        this.rskDestinationAddress = btcLockSender.getRskAddress();\n+        this.btcRefundAddress = btcLockSender.getBTCAddress();\n+        this.senderBtcAddress = btcLockSender.getBTCAddress();\n+        this.senderBtcAddressType = btcLockSender.getTxSenderAddressType();\n+\n+        logger.trace(\"[parseFromBtcLockSender] Protocol version: {}\", this.protocolVersion);\n+        logger.trace(\"[parseFromBtcLockSender] RSK destination address: {}\", btcLockSender.getRskAddress());\n+        logger.trace(\"[parseFromBtcLockSender] BTC refund address: {}\", btcLockSender.getBTCAddress());\n+        logger.trace(\"[parseFromBtcLockSender] Sender BTC address: {}\", btcLockSender.getBTCAddress());\n+        logger.trace(\"[parseFromBtcLockSender] Sender BTC address type: {}\", btcLockSender.getTxSenderAddressType());\n+    }\n+\n+    private void parseFromPeginInstructions(PeginInstructions peginInstructions)  throws PeginInstructionsException {\n+        this.protocolVersion = peginInstructions.getProtocolVersion();\n+        this.rskDestinationAddress = peginInstructions.getRskDestinationAddress();\n+        logger.trace(\"[parseFromPeginInstructions] Protocol version: {}\", peginInstructions.getProtocolVersion());\n+        logger.trace(\"[parseFromPeginInstructions] RSK destination address: {}\", peginInstructions.getRskDestinationAddress());\n+\n+        switch (protocolVersion) {\n+            case 1:\n+                PeginInstructionsVersion1 peginInstructionsV1 = (PeginInstructionsVersion1) peginInstructions;\n+                parseFromPeginInstructionsVersion1(peginInstructionsV1);\n+                break;\n+            default:\n+                String message = String.format(\"Invalid protocol version: %d\", protocolVersion);\n+                logger.warn(\"[parseFromPeginInstructions] {}\", message);\n+                throw new PeginInstructionsException(message);\n+        }\n+    }\n+\n+    private void parseFromPeginInstructionsVersion1(PeginInstructionsVersion1 peginInstructions) {\n+        Optional<Address> btcRefundAddressOptional = peginInstructions.getBtcRefundAddress();\n+        if (btcRefundAddressOptional.isPresent()) {", "originalCommit": "8acfdb2939fc035701a6158362dd64b5f597b097", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ0MjMxNQ==", "url": "https://github.com/rsksmart/rskj/pull/1378#discussion_r544442315", "bodyText": "I could be wrong on this, but I feel that we have an unexpected change in consensus here.\nIf we send a transaction from a wp2pkh without presenting the witness, before the activation of the rskip170, it used to reject the transaction and send the money back because with no sender the transaction wouldn't be lockeable, but now it does not seem to send the money back. Or, in general, non lockeable transaction because there's no sending, before rskip170 used to generate a rejection release while it does not happen anymore.", "author": "donequis", "createdAt": "2020-12-16T16:30:38Z", "path": "rskj-core/src/main/java/co/rsk/peg/PeginInformation.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package co.rsk.peg;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.core.RskAddress;\n+import co.rsk.peg.btcLockSender.BtcLockSender;\n+import co.rsk.peg.btcLockSender.BtcLockSender.TxSenderAddressType;\n+import co.rsk.peg.btcLockSender.BtcLockSenderProvider;\n+import co.rsk.peg.pegininstructions.PeginInstructions;\n+import co.rsk.peg.pegininstructions.PeginInstructionsException;\n+import co.rsk.peg.pegininstructions.PeginInstructionsProvider;\n+import co.rsk.peg.pegininstructions.PeginInstructionsVersion1;\n+import java.util.Optional;\n+import org.ethereum.config.blockchain.upgrades.ActivationConfig;\n+import org.ethereum.config.blockchain.upgrades.ConsensusRule;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInformation {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInformation.class);\n+\n+    private final BtcLockSenderProvider btcLockSenderProvider;\n+    private final PeginInstructionsProvider peginInstructionsProvider;\n+    private final ActivationConfig.ForBlock activations;\n+\n+    private int protocolVersion;\n+    private RskAddress rskDestinationAddress;\n+    private Address btcRefundAddress;\n+    private Address senderBtcAddress;\n+    private TxSenderAddressType senderBtcAddressType;\n+\n+    public PeginInformation(\n+        BtcLockSenderProvider btcLockSenderProvider,\n+        PeginInstructionsProvider peginInstructionsProvider,\n+        ActivationConfig.ForBlock activations) {\n+        this.btcLockSenderProvider = btcLockSenderProvider;\n+        this.peginInstructionsProvider = peginInstructionsProvider;\n+        this.activations = activations;\n+        this.protocolVersion = -1; // Set an invalid value by default\n+        this.senderBtcAddressType = TxSenderAddressType.UNKNOWN;\n+    }\n+\n+    public int getProtocolVersion() {\n+        return protocolVersion;\n+    }\n+\n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    public Address getBtcRefundAddress() {\n+        return this.btcRefundAddress;\n+    }\n+\n+    public Address getSenderBtcAddress() {\n+        return this.senderBtcAddress;\n+    }\n+\n+    public TxSenderAddressType getSenderBtcAddressType() {\n+        return this.senderBtcAddressType;\n+    }\n+\n+    public void parse(BtcTransaction btcTx) throws PeginInstructionsException {\n+        logger.trace(\"[parse] Trying to parse peg-in information from btc tx {}\", btcTx.getHash());\n+\n+        // Get information from tx sender first\n+        Optional<BtcLockSender> btcLockSenderOptional = btcLockSenderProvider.tryGetBtcLockSender(btcTx);\n+        if (btcLockSenderOptional.isPresent()) {\n+            BtcLockSender btcLockSender = btcLockSenderOptional.get();\n+            parseFromBtcLockSender(btcLockSender);\n+        }\n+\n+        // If HF is active and peg-in instructions were provided then override the info obtained from BtcLockSender\n+        Optional<PeginInstructions> peginInstructionsOptional = Optional.empty();\n+        if (activations.isActive(ConsensusRule.RSKIP170)) {\n+            peginInstructionsOptional = peginInstructionsProvider.buildPeginInstructions(btcTx);\n+            if (peginInstructionsOptional.isPresent()) {\n+                PeginInstructions peginInstructions = peginInstructionsOptional.get();\n+                parseFromPeginInstructions(peginInstructions);\n+            }\n+        }\n+\n+        // If BtcLockSender could not be parsed and peg-in instructions were not provided, then this tx can't be processed\n+        if(!btcLockSenderOptional.isPresent() && !peginInstructionsOptional.isPresent()) {", "originalCommit": "8acfdb2939fc035701a6158362dd64b5f597b097", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ0MzAxMQ==", "url": "https://github.com/rsksmart/rskj/pull/1378#discussion_r544443011", "bodyText": "Here: refund is only created when there's a pegininstructionexception only after the rskip170 activation", "author": "donequis", "createdAt": "2020-12-16T16:31:31Z", "path": "rskj-core/src/main/java/co/rsk/peg/BridgeSupport.java", "diffHunk": "@@ -328,52 +338,148 @@ protected TxType getTransactionType(BtcTransaction btcTx) {\n         return TxType.UNKNOWN;\n     }\n \n-    protected void processPegIn(BtcTransaction btcTx, Transaction rskTx, int height, Sha256Hash btcTxHash)\n-            throws IOException, RegisterBtcTransactionException {\n+    protected void processPegIn(\n+        BtcTransaction btcTx,\n+        Transaction rskTx,\n+        int height,\n+        Sha256Hash btcTxHash) throws IOException, RegisterBtcTransactionException {\n+\n         logger.debug(\"[processPegIn] This is a lock tx {}\", btcTx);\n-        Optional<BtcLockSender> btcLockSenderOptional = btcLockSenderProvider.tryGetBtcLockSender(btcTx);\n-        if (!btcLockSenderOptional.isPresent() ||\n-                !BridgeUtils.txIsProcessable(btcLockSenderOptional.get().getType(), activations)) {\n-            logger.warn(\"[processPegIn] [btcTx:{}] Could not get BtcLockSender from Btc tx\", btcTx.getHash());\n-            throw new RegisterBtcTransactionException(\"Could not get BtcLockSender from Btc tx\");\n+\n+        Coin totalAmount = computeTotalAmountSent(btcTx);\n+\n+        PeginInformation peginInformation = new PeginInformation(\n+            btcLockSenderProvider,\n+            peginInstructionsProvider,\n+            activations\n+        );\n+        try {\n+            peginInformation.parse(btcTx);\n+        } catch (PeginInstructionsException e) {\n+            if (activations.isActive(ConsensusRule.RSKIP170)) {\n+                // If possible to get the sender address, refund\n+                refundTxSender(btcTx, rskTx, peginInformation, totalAmount);", "originalCommit": "8acfdb2939fc035701a6158362dd64b5f597b097", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2c86ed0d850c6fa03e71a8bd07f2cfbd3c399335", "url": "https://github.com/rsksmart/rskj/commit/2c86ed0d850c6fa03e71a8bd07f2cfbd3c399335", "message": "Fix test after rebase", "committedDate": "2020-12-29T14:59:01Z", "type": "forcePushed"}, {"oid": "acd608e60f415c514d47a484b94201e56990df76", "url": "https://github.com/rsksmart/rskj/commit/acd608e60f415c514d47a484b94201e56990df76", "message": "Fix test after rebase", "committedDate": "2021-01-18T14:21:44Z", "type": "forcePushed"}, {"oid": "e636d4c5f73283e0735ad60f3dc035b5ce6090e8", "url": "https://github.com/rsksmart/rskj/commit/e636d4c5f73283e0735ad60f3dc035b5ce6090e8", "message": "Fix test after rebase", "committedDate": "2021-01-18T16:06:23Z", "type": "forcePushed"}, {"oid": "5c049ed97c20aa1058f20091523d5dd5d37c3d86", "url": "https://github.com/rsksmart/rskj/commit/5c049ed97c20aa1058f20091523d5dd5d37c3d86", "message": "Fix test after rebase", "committedDate": "2021-01-18T18:30:17Z", "type": "forcePushed"}, {"oid": "39466642d74161e02e464ddd9f4c13b62e130aa7", "url": "https://github.com/rsksmart/rskj/commit/39466642d74161e02e464ddd9f4c13b62e130aa7", "message": "Fix test after rebase", "committedDate": "2021-01-19T16:47:28Z", "type": "forcePushed"}, {"oid": "21ddaa865506af8fd487fc2f1209d8faaaee3009", "url": "https://github.com/rsksmart/rskj/commit/21ddaa865506af8fd487fc2f1209d8faaaee3009", "message": "Create OP_RETURN parser\n\nCreate interface and implement it on PegInstructionBaseClase from where all the versions will extend.\nCreate multiple exceptions to manage errors.", "committedDate": "2021-01-21T13:00:53Z", "type": "commit"}, {"oid": "28650380e580b51e8dc4db69c145986957a56c6b", "url": "https://github.com/rsksmart/rskj/commit/28650380e580b51e8dc4db69c145986957a56c6b", "message": "Add unit test for PeginInstructions classes and update BtcTransactionFormatUtilsTest as it now contains the method extractOpReturnData", "committedDate": "2021-01-21T13:00:53Z", "type": "commit"}, {"oid": "7d47f5befe2cfe68002f7eec928c1e476eda8431", "url": "https://github.com/rsksmart/rskj/commit/7d47f5befe2cfe68002f7eec928c1e476eda8431", "message": "Create class to contain all the raw transactions and rename some tests", "committedDate": "2021-01-21T13:00:53Z", "type": "commit"}, {"oid": "c51dc6bdeb9e05b0b2fa06e28c88df0575ba32b9", "url": "https://github.com/rsksmart/rskj/commit/c51dc6bdeb9e05b0b2fa06e28c88df0575ba32b9", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void\n- Move NoOpReturnException class to pegininstructions package\n- Add some debug info\n- Remove unnecessary data validation length from provider\n- Move getBtcRefundAddress logic to parseAdditionalData on PeginInstructionsV1", "committedDate": "2021-01-21T13:00:53Z", "type": "commit"}, {"oid": "ef15fc5a75450af5743c4c6d4671fc005e0d680b", "url": "https://github.com/rsksmart/rskj/commit/ef15fc5a75450af5743c4c6d4671fc005e0d680b", "message": "Remove data length validation from provider\nValidate data on extractProtocolVersion", "committedDate": "2021-01-21T13:00:53Z", "type": "commit"}, {"oid": "f4825c03f9cced48fd2ea2c011f67fd403ee0a64", "url": "https://github.com/rsksmart/rskj/commit/f4825c03f9cced48fd2ea2c011f67fd403ee0a64", "message": "Create PeginInformation class\n\nThis class is responsible for parsing a btc lock tx and obtaining the rsk address to where the funds should be transferred, and a BTC refund address in case the lock can not be completed. This information is obtained from peg-in instructions included in an output with OP_RETURN in the tx, or from the tx sender using BtcLockSender class.", "committedDate": "2021-01-21T13:00:53Z", "type": "commit"}, {"oid": "20465bf134e3e26229187c35bdf1bbc9a511a1c2", "url": "https://github.com/rsksmart/rskj/commit/20465bf134e3e26229187c35bdf1bbc9a511a1c2", "message": "Create RSKIP 170 activation code", "committedDate": "2021-01-21T13:00:53Z", "type": "commit"}, {"oid": "809c99b48174e054c299de9f3b4dbb7629f48be9", "url": "https://github.com/rsksmart/rskj/commit/809c99b48174e054c299de9f3b4dbb7629f48be9", "message": "Update BridgeSupport to use new PeginInformation class when performing peg-ins", "committedDate": "2021-01-21T13:00:53Z", "type": "commit"}, {"oid": "7ecd46c48fb8fe46350957b38595679f071df619", "url": "https://github.com/rsksmart/rskj/commit/7ecd46c48fb8fe46350957b38595679f071df619", "message": "Peg-in protocol version uses 1 byte instead of 2", "committedDate": "2021-01-21T13:00:53Z", "type": "commit"}, {"oid": "418ab2419823c390e73ca8f4db7b7bd0fbc05b75", "url": "https://github.com/rsksmart/rskj/commit/418ab2419823c390e73ca8f4db7b7bd0fbc05b75", "message": "Add prefix verification to peg-in instrcutions parser.\n\nPeg-in instructions parser now verifies that a prefix is included in the payload indicating the OP_RETURN output is for RSK. Updated tests to create transaction objects for each case instead of using raw txs.", "committedDate": "2021-01-21T13:00:53Z", "type": "commit"}, {"oid": "7df014fadcf478a2c0cc134682811c00415cd6af", "url": "https://github.com/rsksmart/rskj/commit/7df014fadcf478a2c0cc134682811c00415cd6af", "message": "Implement peg-in process for protocol version 1", "committedDate": "2021-01-21T13:00:53Z", "type": "commit"}, {"oid": "1e1da8fbbabff7b7f14b7e4a7d1343a4a188fd5d", "url": "https://github.com/rsksmart/rskj/commit/1e1da8fbbabff7b7f14b7e4a7d1343a4a188fd5d", "message": "Update lockBtc event in BridgeEventLogger to handle the case when sender is null\n\nIf senderBtcAddress is null because the sender could not be obtained, then put \"Undetermined\" string in the sender field of the event", "committedDate": "2021-01-21T13:00:53Z", "type": "commit"}, {"oid": "fe279911bb14aa90fbdebc00d45ca573034df5de", "url": "https://github.com/rsksmart/rskj/commit/fe279911bb14aa90fbdebc00d45ca573034df5de", "message": "Rename BtcLockSender TxType enum to TxSenderAddressType", "committedDate": "2021-01-21T13:00:53Z", "type": "commit"}, {"oid": "64209f6e446efd337d58c2fde2589cf520d2e2c1", "url": "https://github.com/rsksmart/rskj/commit/64209f6e446efd337d58c2fde2589cf520d2e2c1", "message": "Rename txIsProcessable to txIsProcessableInLegacyVersion in BridgeUtils", "committedDate": "2021-01-21T13:00:53Z", "type": "commit"}, {"oid": "2df669669bec9296066946fd13794c923957604c", "url": "https://github.com/rsksmart/rskj/commit/2df669669bec9296066946fd13794c923957604c", "message": "Generte rejection release to refund address instead of sender", "committedDate": "2021-01-21T13:00:53Z", "type": "commit"}, {"oid": "08331c596ca609df26bc86fd8c5b13748913cfb1", "url": "https://github.com/rsksmart/rskj/commit/08331c596ca609df26bc86fd8c5b13748913cfb1", "message": "Check if RSKIP 170 is active before parsing peg-in instructions", "committedDate": "2021-01-21T13:00:53Z", "type": "commit"}, {"oid": "f59a263c50c118d8557762c6c330253dbf5daeb4", "url": "https://github.com/rsksmart/rskj/commit/f59a263c50c118d8557762c6c330253dbf5daeb4", "message": "Try to refund sender if lock tx is invalid", "committedDate": "2021-01-21T13:00:54Z", "type": "commit"}, {"oid": "44d486061bfc3615fd300a90bd8916e1a195b3d2", "url": "https://github.com/rsksmart/rskj/commit/44d486061bfc3615fd300a90bd8916e1a195b3d2", "message": "Add new pegin_btc event, replaces lock_btc event after RSKIP 170 activation\n\nRemoved also tests from BridgeSupportTestPowerMock that were duplicated in BridgeSupport", "committedDate": "2021-01-21T13:00:54Z", "type": "commit"}, {"oid": "c1e4cc5de49206df3654668b5b65272f23e1acf9", "url": "https://github.com/rsksmart/rskj/commit/c1e4cc5de49206df3654668b5b65272f23e1acf9", "message": "Fix test after rebase", "committedDate": "2021-01-21T13:00:54Z", "type": "commit"}, {"oid": "c1e4cc5de49206df3654668b5b65272f23e1acf9", "url": "https://github.com/rsksmart/rskj/commit/c1e4cc5de49206df3654668b5b65272f23e1acf9", "message": "Fix test after rebase", "committedDate": "2021-01-21T13:00:54Z", "type": "forcePushed"}]}