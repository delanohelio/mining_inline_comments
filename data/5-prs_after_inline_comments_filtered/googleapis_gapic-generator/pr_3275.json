{"pr_number": 3275, "pr_title": "feat: REST GAPIC (REGAPIC) Support for Java", "pr_createdAt": "2020-09-10T00:05:02Z", "pr_url": "https://github.com/googleapis/gapic-generator/pull/3275", "timeline": [{"oid": "7666bdfa275f57fdfb542afd0fd42b64cd4500c7", "url": "https://github.com/googleapis/gapic-generator/commit/7666bdfa275f57fdfb542afd0fd42b64cd4500c7", "message": "feat: Implement rest-gapic prototype", "committedDate": "2020-08-08T23:54:05Z", "type": "commit"}, {"oid": "59c36da5f820cae6055439eafe4c5118bd9d86a1", "url": "https://github.com/googleapis/gapic-generator/commit/59c36da5f820cae6055439eafe4c5118bd9d86a1", "message": "fix: Fix DIREGAPIC path elements name format", "committedDate": "2020-08-08T23:54:05Z", "type": "commit"}, {"oid": "45022ca750851ec66ad60bf2321f2d7f52642e7c", "url": "https://github.com/googleapis/gapic-generator/commit/45022ca750851ec66ad60bf2321f2d7f52642e7c", "message": "fix: Add transport_protocol parameter to java assembly pkg rule", "committedDate": "2020-08-09T06:44:38Z", "type": "commit"}, {"oid": "7b32072e58757249cadfb4bf06c801a49ecb8a33", "url": "https://github.com/googleapis/gapic-generator/commit/7b32072e58757249cadfb4bf06c801a49ecb8a33", "message": "fix: Fix pathTemplate issue", "committedDate": "2020-08-18T07:21:25Z", "type": "commit"}, {"oid": "e2b56c08699624fde004ba1b4c0a33eb9e7a7411", "url": "https://github.com/googleapis/gapic-generator/commit/e2b56c08699624fde004ba1b4c0a33eb9e7a7411", "message": "Merge remote-tracking branch 'upstream/master' into rest-gapic", "committedDate": "2020-09-08T22:33:44Z", "type": "commit"}, {"oid": "0bae1fc2fc8d1b1e98e848dad3c74e1a390821b6", "url": "https://github.com/googleapis/gapic-generator/commit/0bae1fc2fc8d1b1e98e848dad3c74e1a390821b6", "message": "fix formatting", "committedDate": "2020-09-08T23:17:58Z", "type": "commit"}, {"oid": "676b82cb22c0a81e46a4d7959bf9b1fe44aa8478", "url": "https://github.com/googleapis/gapic-generator/commit/676b82cb22c0a81e46a4d7959bf9b1fe44aa8478", "message": "Add rest transport tests", "committedDate": "2020-09-10T00:01:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0Mjk4Nw==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r487342987", "bodyText": "Since only one of HTTP or gRPC will be generated, would it make sense to split the template into grpc_stub.snip and http_stub.snip? As a reader, I would prefer duplicate code to parsing the diffs (which is less clear without doing a deep dive).\nDitto for test.snip.", "author": "miraleung", "createdAt": "2020-09-12T00:29:43Z", "path": "src/main/java/com/google/api/codegen/transformer/java/JavaGapicSurfaceTransformer.java", "diffHunk": "@@ -42,9 +43,11 @@\n   private static final String SETTINGS_TEMPLATE_FILENAME = \"java/settings.snip\";\n   private static final String STUB_SETTINGS_TEMPLATE_FILENAME = \"java/stub_settings.snip\";\n   private static final String STUB_INTERFACE_TEMPLATE_FILENAME = \"java/stub_interface.snip\";\n-  private static final String GRPC_STUB_TEMPLATE_FILENAME = \"java/grpc_stub.snip\";\n+  private static final String STUB_TEMPLATE_FILENAME = \"java/stub.snip\";", "originalCommit": "676b82cb22c0a81e46a4d7959bf9b1fe44aa8478", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIxMDY3OA==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r489210678", "bodyText": "GRPC and REST stubs share too much (like 90-80% of the file is the same). Keeping them separate makes it much easier for rest and grpc stubs to drift from each other leading to troubles supporting it.\nI tried to make the .ship files match the philosophical view on the two different transports implementations - they are essentially the same thing with some transport-specific tweaks. Duplicating the .snip files for each transport views them differently - two transports are two separate independent things.", "author": "vam-google", "createdAt": "2020-09-16T07:07:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0Mjk4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY3NjI1MA==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r494676250", "bodyText": "SGTM.", "author": "miraleung", "createdAt": "2020-09-25T00:08:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0Mjk4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2ODg1MQ==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r496168851", "bodyText": "+1", "author": "vchudnov-g", "createdAt": "2020-09-28T19:01:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0Mjk4Nw=="}], "type": "inlineReview"}, {"oid": "63d4e38676ba8d2658b0139ce72fdc29a4bab0ba", "url": "https://github.com/googleapis/gapic-generator/commit/63d4e38676ba8d2658b0139ce72fdc29a4bab0ba", "message": "Adjust to the corresponding gax-java PR feedback changes (toQueryParam -> putQueryParam, toPathParam -> putPathParam)", "committedDate": "2020-09-12T06:47:55Z", "type": "commit"}, {"oid": "0f4eee3fe065e3940fdd30f3ccc43e062a32cf30", "url": "https://github.com/googleapis/gapic-generator/commit/0f4eee3fe065e3940fdd30f3ccc43e062a32cf30", "message": "Address PR feedback", "committedDate": "2020-09-16T07:07:43Z", "type": "commit"}, {"oid": "4395976346735e58cd9555fdf5962954c79ae238", "url": "https://github.com/googleapis/gapic-generator/commit/4395976346735e58cd9555fdf5962954c79ae238", "message": "increase test coverage", "committedDate": "2020-09-17T06:06:34Z", "type": "commit"}, {"oid": "3157ca50cf9ef16acfbb56531e6a1f35fef3236d", "url": "https://github.com/googleapis/gapic-generator/commit/3157ca50cf9ef16acfbb56531e6a1f35fef3236d", "message": "Merge remote-tracking branch 'upstream/master' into rest-gapic", "committedDate": "2020-09-22T21:49:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA0MTUyNA==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493041524", "bodyText": "I suggest removing the comment above and including the info in the description:\n\"List of transports the GAPIC should support. Valid transport names ('grpc' or 'rest') are separated by '+'. Default is 'grpc+rest'. NOTE: for now, GAPICs support only the first transport in the list.\"", "author": "vchudnov-g", "createdAt": "2020-09-22T21:22:24Z", "path": "src/main/java/com/google/api/codegen/GeneratorMain.java", "diffHunk": "@@ -149,6 +149,14 @@\n           .argName(\"GRPC-SERVICE-CONFIG\")\n           .required(false)\n           .build();\n+  private static final Option TRANSPORT =\n+      Option.builder()\n+          .longOpt(\"transport\") // Possible values: grpc, rest or grpc+rest (not supported yet).\n+          .desc(\"Transport used by the generated clients.\")", "originalCommit": "4395976346735e58cd9555fdf5962954c79ae238", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIwOTEyNg==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493209126", "bodyText": "Done, but keeping grpc as default for backward compatibility.", "author": "vam-google", "createdAt": "2020-09-23T05:38:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA0MTUyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA0NDE3OA==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493044178", "bodyText": "cruft?", "author": "vchudnov-g", "createdAt": "2020-09-22T21:28:23Z", "path": "src/main/java/com/google/api/codegen/config/GapicProductConfig.java", "diffHunk": "@@ -305,7 +306,7 @@ public static GapicProductConfig create(\n       return null;\n     }\n \n-    TransportProtocol transportProtocol = TransportProtocol.GRPC;\n+    // TransportProtocol transportProtocol = TransportProtocol.GRPC;", "originalCommit": "4395976346735e58cd9555fdf5962954c79ae238", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIwOTQ2MA==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493209460", "bodyText": "Removed", "author": "vam-google", "createdAt": "2020-09-23T05:39:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA0NDE3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA0NDgzNA==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493044834", "bodyText": "Could you please add transportProtocol (and grpcServiceConfig) to the javadoc for this method?", "author": "vchudnov-g", "createdAt": "2020-09-22T21:29:50Z", "path": "src/main/java/com/google/api/codegen/config/GapicProductConfig.java", "diffHunk": "@@ -159,7 +159,8 @@ public static GapicProductConfig create(\n       @Nullable String protoPackage,\n       @Nullable String clientPackage,\n       TargetLanguage language,\n-      @Nullable ServiceConfig grpcServiceConfig) {\n+      @Nullable ServiceConfig grpcServiceConfig,\n+      TransportProtocol transportProtocol) {", "originalCommit": "4395976346735e58cd9555fdf5962954c79ae238", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIxMjM4Mg==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493212382", "bodyText": "Added", "author": "vam-google", "createdAt": "2020-09-23T05:48:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA0NDgzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA0NjU5Mw==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493046593", "bodyText": "Let's change the description to\n\"List of transports the GAPIC can use ('rest' or 'grpc') separated by '+'. NOTE: For now we only support the first transport in the list\"\nand the default to\n\"grpc+rest\"", "author": "vchudnov-g", "createdAt": "2020-09-22T21:33:36Z", "path": "src/main/java/com/google/api/codegen/gapic/GapicGeneratorApp.java", "diffHunk": "@@ -112,6 +113,10 @@\n           \"The filepath of the JSON gRPC Service Config file.\",\n           \"\");\n \n+  public static final Option<String> TRANSPORT =\n+      ToolOptions.createOption(\n+          String.class, \"transport\", \"The generated client transport.\", \"grpc\");", "originalCommit": "4395976346735e58cd9555fdf5962954c79ae238", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIyNzUyMA==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493227520", "bodyText": "Added, but kept grpc as default.", "author": "vam-google", "createdAt": "2020-09-23T06:29:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA0NjU5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA0ODQ5MA==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493048490", "bodyText": "Let's use a construct like I suggested for the Bazel file, taking just the first element in the transport list (with a TODO that this is not the intended ultimate behavior).\nLet's also add a TODO that when we do support multiple transports, we'll have to change the code below. (If we were to do it in the monolith, what would be your approach? Having multiple productConfig or refactoring deeply so that either transport can be used from a single client? I assume from previous discussions it would be the latter....)", "author": "vchudnov-g", "createdAt": "2020-09-22T21:37:56Z", "path": "src/main/java/com/google/api/codegen/gapic/GapicGeneratorApp.java", "diffHunk": "@@ -208,6 +213,16 @@ protected void process() throws Exception {\n     }\n \n     String clientPackage = Strings.emptyToNull(options.get(CLIENT_PACKAGE));\n+    String transport = options.get(TRANSPORT).toLowerCase();\n+\n+    TransportProtocol tp;\n+    if (transport.equals(\"grpc\")) {", "originalCommit": "4395976346735e58cd9555fdf5962954c79ae238", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIzODIxNA==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493238214", "bodyText": "Please, lets keep it as is. It is very unlikely that we will ever support multiple transports in the monolith.", "author": "vam-google", "createdAt": "2020-09-23T06:53:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA0ODQ5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2NjY3OQ==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r496166679", "bodyText": "OK. My own preference, as I said above, is to have the right outer structure and just stubs for the unimplemented parts (ie multi-transport). It's just as simple and clearer. But I feel more strongly about it in the outermost surface (Bazel) than in the generator.", "author": "vchudnov-g", "createdAt": "2020-09-28T18:57:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA0ODQ5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1MjMxNg==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493052316", "bodyText": "Just to make sure I'm following along:\nthis else is what is used for REGAPIC, and the corresponding if above is what is used for DiscoGapic, which we will deprecate. Correct?  If so, it might be helpful to add a comment to the effect of \"This section is only for DiscoGapic and will be deleted once the generator stops ingesting Discovery files\"", "author": "vchudnov-g", "createdAt": "2020-09-22T21:46:42Z", "path": "src/main/java/com/google/api/codegen/transformer/ApiCallableTransformer.java", "diffHunk": "@@ -212,39 +220,91 @@ private void setCommonApiCallableFields(\n \n   private HttpMethodView generateHttpFields(MethodContext context) {\n     if (context.getProductConfig().getTransportProtocol().equals(TransportProtocol.HTTP)) {\n-      Method method = ((DiscoveryMethodModel) context.getMethodModel()).getDiscoMethod();\n-      HttpMethodView.Builder httpMethodView = HttpMethodView.newBuilder();\n-      httpMethodView.fullMethodName(method.id());\n-      httpMethodView.httpMethod(method.httpMethod());\n-      List<String> pathParams = new ArrayList<>(method.pathParams().keySet());\n-      List<String> queryParams = new ArrayList<>(method.queryParams().keySet());\n-      Collections.sort(pathParams);\n-      Collections.sort(queryParams);\n-      httpMethodView.pathParams(pathParams);\n-      httpMethodView.queryParams(queryParams);\n-      httpMethodView.pathTemplate(method.path());\n-\n-      // TODO(andrealin): handle multiple resource names.\n-      DiscoGapicInterfaceConfig interfaceConfig =\n-          (DiscoGapicInterfaceConfig) context.getSurfaceInterfaceContext().getInterfaceConfig();\n-      SingleResourceNameConfig nameConfig =\n-          interfaceConfig.methodToResourceNameMap().get(context.getMethodConfig());\n-      httpMethodView.resourceNameTypeName(\n-          context.getNamer().publicClassName(DiscoGapicParser.getResourceNameName(nameConfig)));\n-      // Find the field with the resource name config.\n-      for (FieldConfig fieldConfig : context.getMethodConfig().getRequiredFieldConfigs()) {\n-        if (fieldConfig.getResourceNameConfig() != null\n-            && fieldConfig.getResourceNameConfig().equals(nameConfig)) {\n-          httpMethodView.resourceNameFieldName(\n-              context\n-                  .getNamer()\n-                  .privateFieldName(Name.anyCamel(fieldConfig.getField().getNameAsParameter())));\n+      if (context.getMethodModel() instanceof DiscoveryMethodModel) {\n+        Method method = ((DiscoveryMethodModel) context.getMethodModel()).getDiscoMethod();\n+        HttpMethodView.Builder httpMethodView = HttpMethodView.newBuilder();\n+        httpMethodView.fullMethodName(method.id());\n+        httpMethodView.httpMethod(method.httpMethod());\n+        List<String> pathParams = new ArrayList<>(method.pathParams().keySet());\n+        List<String> queryParams = new ArrayList<>(method.queryParams().keySet());\n+        Collections.sort(pathParams);\n+        Collections.sort(queryParams);\n+        httpMethodView.pathParams(pathParams);\n+        httpMethodView.queryParams(queryParams);\n+        httpMethodView.pathTemplate(method.path());\n+\n+        // TODO(andrealin): handle multiple resource names.\n+        DiscoGapicInterfaceConfig interfaceConfig =\n+            (DiscoGapicInterfaceConfig) context.getSurfaceInterfaceContext().getInterfaceConfig();\n+        SingleResourceNameConfig nameConfig =\n+            interfaceConfig.methodToResourceNameMap().get(context.getMethodConfig());\n+        httpMethodView.resourceNameTypeName(\n+            context.getNamer().publicClassName(DiscoGapicParser.getResourceNameName(nameConfig)));\n+        // Find the field with the resource name config.\n+        for (FieldConfig fieldConfig : context.getMethodConfig().getRequiredFieldConfigs()) {\n+          if (fieldConfig.getResourceNameConfig() != null\n+              && fieldConfig.getResourceNameConfig().equals(nameConfig)) {\n+            httpMethodView.resourceNameFieldName(\n+                context\n+                    .getNamer()\n+                    .privateFieldName(Name.anyCamel(fieldConfig.getField().getNameAsParameter())));\n+          }\n         }\n+        return httpMethodView.build();\n+      } else if (context.getMethodModel() instanceof ProtoMethodModel) {", "originalCommit": "4395976346735e58cd9555fdf5962954c79ae238", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIzOTI3Mg==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493239272", "bodyText": "Your understanding is correct. Added the comment.", "author": "vam-google", "createdAt": "2020-09-23T06:55:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1MjMxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4NTY2Mg==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493085662", "bodyText": "nit: Suggest a \\n before populateMethodSelectors to highlight the parallelism with the previous two calls.", "author": "vchudnov-g", "createdAt": "2020-09-22T23:18:05Z", "path": "src/main/java/com/google/api/codegen/transformer/ApiCallableTransformer.java", "diffHunk": "@@ -212,39 +220,91 @@ private void setCommonApiCallableFields(\n \n   private HttpMethodView generateHttpFields(MethodContext context) {\n     if (context.getProductConfig().getTransportProtocol().equals(TransportProtocol.HTTP)) {\n-      Method method = ((DiscoveryMethodModel) context.getMethodModel()).getDiscoMethod();\n-      HttpMethodView.Builder httpMethodView = HttpMethodView.newBuilder();\n-      httpMethodView.fullMethodName(method.id());\n-      httpMethodView.httpMethod(method.httpMethod());\n-      List<String> pathParams = new ArrayList<>(method.pathParams().keySet());\n-      List<String> queryParams = new ArrayList<>(method.queryParams().keySet());\n-      Collections.sort(pathParams);\n-      Collections.sort(queryParams);\n-      httpMethodView.pathParams(pathParams);\n-      httpMethodView.queryParams(queryParams);\n-      httpMethodView.pathTemplate(method.path());\n-\n-      // TODO(andrealin): handle multiple resource names.\n-      DiscoGapicInterfaceConfig interfaceConfig =\n-          (DiscoGapicInterfaceConfig) context.getSurfaceInterfaceContext().getInterfaceConfig();\n-      SingleResourceNameConfig nameConfig =\n-          interfaceConfig.methodToResourceNameMap().get(context.getMethodConfig());\n-      httpMethodView.resourceNameTypeName(\n-          context.getNamer().publicClassName(DiscoGapicParser.getResourceNameName(nameConfig)));\n-      // Find the field with the resource name config.\n-      for (FieldConfig fieldConfig : context.getMethodConfig().getRequiredFieldConfigs()) {\n-        if (fieldConfig.getResourceNameConfig() != null\n-            && fieldConfig.getResourceNameConfig().equals(nameConfig)) {\n-          httpMethodView.resourceNameFieldName(\n-              context\n-                  .getNamer()\n-                  .privateFieldName(Name.anyCamel(fieldConfig.getField().getNameAsParameter())));\n+      if (context.getMethodModel() instanceof DiscoveryMethodModel) {\n+        Method method = ((DiscoveryMethodModel) context.getMethodModel()).getDiscoMethod();\n+        HttpMethodView.Builder httpMethodView = HttpMethodView.newBuilder();\n+        httpMethodView.fullMethodName(method.id());\n+        httpMethodView.httpMethod(method.httpMethod());\n+        List<String> pathParams = new ArrayList<>(method.pathParams().keySet());\n+        List<String> queryParams = new ArrayList<>(method.queryParams().keySet());\n+        Collections.sort(pathParams);\n+        Collections.sort(queryParams);\n+        httpMethodView.pathParams(pathParams);\n+        httpMethodView.queryParams(queryParams);\n+        httpMethodView.pathTemplate(method.path());\n+\n+        // TODO(andrealin): handle multiple resource names.\n+        DiscoGapicInterfaceConfig interfaceConfig =\n+            (DiscoGapicInterfaceConfig) context.getSurfaceInterfaceContext().getInterfaceConfig();\n+        SingleResourceNameConfig nameConfig =\n+            interfaceConfig.methodToResourceNameMap().get(context.getMethodConfig());\n+        httpMethodView.resourceNameTypeName(\n+            context.getNamer().publicClassName(DiscoGapicParser.getResourceNameName(nameConfig)));\n+        // Find the field with the resource name config.\n+        for (FieldConfig fieldConfig : context.getMethodConfig().getRequiredFieldConfigs()) {\n+          if (fieldConfig.getResourceNameConfig() != null\n+              && fieldConfig.getResourceNameConfig().equals(nameConfig)) {\n+            httpMethodView.resourceNameFieldName(\n+                context\n+                    .getNamer()\n+                    .privateFieldName(Name.anyCamel(fieldConfig.getField().getNameAsParameter())));\n+          }\n         }\n+        return httpMethodView.build();\n+      } else if (context.getMethodModel() instanceof ProtoMethodModel) {\n+        com.google.api.tools.framework.model.Method method =\n+            ((ProtoMethodModel) context.getMethodModel()).getProtoMethod();\n+        HttpAttribute httpAttr = method.getAttribute(HttpAttribute.KEY);\n+\n+        HttpMethodView.Builder httpMethodView = HttpMethodView.newBuilder();\n+        httpMethodView.httpMethod(httpAttr.getMethodKind().toString());\n+        httpMethodView.fullMethodName(httpAttr.getRestMethod().getFullName());\n+\n+        SurfaceNamer namer = context.getNamer();\n+        httpMethodView.pathTemplate(\n+            httpAttr\n+                .getPath()\n+                .stream()\n+                .map(pathSegment -> normalizePathSegment(pathSegment.toString()))\n+                .collect(Collectors.joining(\"/\", \"/\", \"\")));\n+\n+        httpMethodView.pathParamSelectors(\n+            populateMethodSelectors(namer, httpAttr.getPathSelectors()));\n+        httpMethodView.queryParamSelectors(\n+            populateMethodSelectors(namer, httpAttr.getParamSelectors()));\n+        httpMethodView.bodySelectors(populateMethodSelectors(namer, httpAttr.getBodySelectors()));", "originalCommit": "3157ca50cf9ef16acfbb56531e6a1f35fef3236d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIzOTc1OQ==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493239759", "bodyText": "Added", "author": "vam-google", "createdAt": "2020-09-23T06:56:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4NTY2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2Nzg4MQ==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r496167881", "bodyText": "Don't see it. I think maybe you added the \\n in the previous line rather than just inside the outer parenthesis?", "author": "vchudnov-g", "createdAt": "2020-09-28T19:00:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4NTY2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYwOTc0MQ==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r500609741", "bodyText": "ping", "author": "vchudnov-g", "createdAt": "2020-10-06T21:35:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4NTY2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4NTkzOA==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493085938", "bodyText": "The deleted lines are just cleanup?", "author": "vchudnov-g", "createdAt": "2020-09-22T23:19:02Z", "path": "src/main/java/com/google/api/codegen/transformer/java/JavaFeatureConfig.java", "diffHunk": "@@ -19,22 +19,26 @@\n import com.google.api.codegen.config.MethodContext;\n import com.google.api.codegen.config.ResourceNameMessageConfigs;\n import com.google.api.codegen.config.ResourceNameType;\n+import com.google.api.codegen.config.TransportProtocol;\n import com.google.api.codegen.transformer.DefaultFeatureConfig;\n import com.google.auto.value.AutoValue;\n \n @AutoValue\n public abstract class JavaFeatureConfig extends DefaultFeatureConfig {\n+  @Override\n+  public abstract boolean resourceNameTypesEnabled();\n \n   @Override\n-  public abstract boolean enableStringFormatFunctions();", "originalCommit": "3157ca50cf9ef16acfbb56531e6a1f35fef3236d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI0MTUyNg==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493241526", "bodyText": "This is GitHub diff tool doing poor job =(. Nothing was removed, just shifted a bit. This method is still there on line 29 in the \"new\" version of the file, shown as addition.", "author": "vam-google", "createdAt": "2020-09-23T06:59:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4NTkzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2ODQ4Ng==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r496168486", "bodyText": "oops. I missed that!", "author": "vchudnov-g", "createdAt": "2020-09-28T19:01:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4NTkzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4NzIwNg==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493087206", "bodyText": "nit: This is fine, but I'd consider a look-up table here.", "author": "vchudnov-g", "createdAt": "2020-09-22T23:23:19Z", "path": "src/main/java/com/google/api/codegen/transformer/java/JavaSurfaceTransformer.java", "diffHunk": "@@ -635,6 +635,15 @@ private StaticLangRpcStubView generateRpcStubClass(\n     stubClass.hasDefaultInstance(interfaceConfig.hasDefaultInstance());\n     stubClass.hasLongRunningOperations(interfaceConfig.hasLongRunningOperations());\n \n+    stubClass.transportProtocol(productConfig.getTransportProtocol());\n+    if (productConfig.getTransportProtocol() == TransportProtocol.HTTP) {", "originalCommit": "3157ca50cf9ef16acfbb56531e6a1f35fef3236d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI0MjI5Mw==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493242293", "bodyText": "This is how these types of differences were reflected in the other parts of gapic-generator (i.e. if statements like this are pretty common). Not very pretty, but given there are only two options, lookup table seems not necessary.", "author": "vam-google", "createdAt": "2020-09-23T07:01:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4NzIwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2ODk5OA==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r496168998", "bodyText": "sgtm", "author": "vchudnov-g", "createdAt": "2020-09-28T19:02:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4NzIwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4NzY1Mg==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493087652", "bodyText": "Is this also to distinguish between DiscoGAPIC and REGAPIC? If so, add a comment to make that explicit.", "author": "vchudnov-g", "createdAt": "2020-09-22T23:24:53Z", "path": "src/main/java/com/google/api/codegen/transformer/java/JavaSurfaceTransformer.java", "diffHunk": "@@ -922,8 +931,17 @@ private void addRpcStubImports(InterfaceContext context) {\n         typeTable.saveNicknameFor(\"com.google.api.client.http.HttpMethods\");\n         typeTable.saveNicknameFor(\"com.google.api.core.InternalApi\");\n         typeTable.saveNicknameFor(\"com.google.api.pathtemplate.PathTemplate\");\n-        typeTable.saveNicknameFor(\"com.google.api.gax.httpjson.ApiMessageHttpRequestFormatter\");\n-        typeTable.saveNicknameFor(\"com.google.api.gax.httpjson.ApiMessageHttpResponseParser\");\n+        String configSchemaVersion = context.getProductConfig().getConfigSchemaVersion();\n+        if (configSchemaVersion != null && configSchemaVersion.startsWith(\"1.\")) {", "originalCommit": "3157ca50cf9ef16acfbb56531e6a1f35fef3236d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI0Mjc1Nw==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493242757", "bodyText": "This is correct. A hacky way of doing it, but it is quite reliable way to distinguish (DIREGAPIC is always 2.0 gapic yaml or no yaml, while discogapic is always gapic yaml 1.0). Added a comment.", "author": "vam-google", "createdAt": "2020-09-23T07:02:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4NzY1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2OTkyNA==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r496169924", "bodyText": "Yeah. The comment is very helpful! (As in the other file where you also added it.) Thanks!", "author": "vchudnov-g", "createdAt": "2020-09-28T19:04:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4NzY1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4OTQyMg==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493089422", "bodyText": "This is used in the templates, right? Maybe we need to translate HTTP to REST, which is what we're exposing externally....", "author": "vchudnov-g", "createdAt": "2020-09-22T23:30:30Z", "path": "src/main/java/com/google/api/codegen/viewmodel/StaticLangRpcStubView.java", "diffHunk": "@@ -45,6 +46,19 @@\n \n   public abstract String parentName();\n \n+  public abstract TransportProtocol transportProtocol();\n+\n+  public String transportProtocolName() {\n+    if (transportProtocol() == TransportProtocol.GRPC) {\n+      return \"gRPC\";\n+    }\n+    return transportProtocol().toString();", "originalCommit": "3157ca50cf9ef16acfbb56531e6a1f35fef3236d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI1MTIxNg==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493251216", "bodyText": "Agree. Changed to REST", "author": "vam-google", "createdAt": "2020-09-23T07:18:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4OTQyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5MzI3Ng==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493093276", "bodyText": "Could we also add equivalent tests for HTTP?", "author": "vchudnov-g", "createdAt": "2020-09-22T23:42:33Z", "path": "src/test/java/com/google/api/codegen/gapic/GapicCodeGeneratorTest.java", "diffHunk": "@@ -64,19 +67,22 @@ public GapicCodeGeneratorTest(\n             null,\n             \"library\",\n             null,\n+            TransportProtocol.GRPC,", "originalCommit": "3157ca50cf9ef16acfbb56531e6a1f35fef3236d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI1NDU0NQ==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493254545", "bodyText": "This test is for gapic yaml v1 generation, which is not applicable for REGAPIC.", "author": "vam-google", "createdAt": "2020-09-23T07:24:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5MzI3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5MzgyMw==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493093823", "bodyText": "can we also test for transport=rest?", "author": "vchudnov-g", "createdAt": "2020-09-22T23:44:24Z", "path": "src/test/java/com/google/api/codegen/gapic/ProtocGapicPluginGeneratorTest.java", "diffHunk": "@@ -53,7 +53,7 @@ public void testGenerator() {\n                 model.getFiles().stream().map(ProtoFile::getProto).collect(Collectors.toList()))\n             // Only the file to generate a client for (don't generate dependencies)\n             .addFileToGenerate(\"multiple_services.proto\")\n-            .setParameter(\"language=java\")\n+            .setParameter(\"language=java,transport=grpc\")", "originalCommit": "3157ca50cf9ef16acfbb56531e6a1f35fef3236d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI1NTYzMw==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r493255633", "bodyText": "We technically do, on line 76. But seriously speaking, these tests are useless, because gapic-generator is never executed as plugin in production, so they are testing dead logic.", "author": "vam-google", "createdAt": "2020-09-23T07:26:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5MzgyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE3NzYwMw==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r496177603", "bodyText": "But we are providing the functionality in the generator, even if we ourselves don't use it, so it should be tested. Line 76 tests the failing case.\nAll that said, it's only worth doing if it exercises additional code. I think this will test that the high-level transport selection doesn't error out, right? So it might be worth including. Can you simply copy this existing test case and change the transport (and maybe check for the presence of a REST-specific string, if that's simple).", "author": "vchudnov-g", "createdAt": "2020-09-28T19:19:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5MzgyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYxMDQ3Mg==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r500610472", "bodyText": "ping", "author": "vchudnov-g", "createdAt": "2020-10-06T21:36:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5MzgyMw=="}], "type": "inlineReview"}, {"oid": "60456126af698742039eb57416de3d0383a12835", "url": "https://github.com/googleapis/gapic-generator/commit/60456126af698742039eb57416de3d0383a12835", "message": "Address PR feedback", "committedDate": "2020-09-23T07:50:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY3NjA1Mw==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r494676053", "bodyText": "Should this just be \"Transport to use\" since it's not a List option?", "author": "miraleung", "createdAt": "2020-09-25T00:08:04Z", "path": "src/main/java/com/google/api/codegen/gapic/GapicGeneratorApp.java", "diffHunk": "@@ -112,6 +113,14 @@\n           \"The filepath of the JSON gRPC Service Config file.\",\n           \"\");\n \n+  public static final Option<String> TRANSPORT =\n+      ToolOptions.createOption(\n+          String.class,\n+          \"transport\",\n+          \"List of transports to use ('rest' or 'grpc') separated by '+'. NOTE: For now\"", "originalCommit": "60456126af698742039eb57416de3d0383a12835", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2NDg1Ng==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r496164856", "bodyText": "But you can list more than one, separated by \"+\". It's a string representation of a +-separated list.", "author": "vchudnov-g", "createdAt": "2020-09-28T18:54:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY3NjA1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYwOTI4NA==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r500609284", "bodyText": "Again, change the NOTE to be accurate: for now, we only support a single transport.", "author": "vchudnov-g", "createdAt": "2020-10-06T21:34:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY3NjA1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE4NDc1MA==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r496184750", "bodyText": "This comment as phrased makes sense with the code changes I suggested in the last pass, where (a) the default list is grpc+rest and (b) because we're not yet implementing dual transport, we then look at only the first element in the list as per my #[1] comment: all_transports = all_transports[0:1]", "author": "vchudnov-g", "createdAt": "2020-09-28T19:32:53Z", "path": "src/main/java/com/google/api/codegen/GeneratorMain.java", "diffHunk": "@@ -149,6 +149,17 @@\n           .argName(\"GRPC-SERVICE-CONFIG\")\n           .required(false)\n           .build();\n+  private static final Option TRANSPORT =\n+      Option.builder()\n+          .longOpt(\"transport\")\n+          .desc(\n+              \"List of transports to support. Valid transport names ('grpc' or 'rest') are\"\n+                  + \" separated by '+'. Default is 'grpc'. NOTE: for now, GAPICs support only\"", "originalCommit": "60456126af698742039eb57416de3d0383a12835", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYwODk1NQ==", "url": "https://github.com/googleapis/gapic-generator/pull/3275#discussion_r500608955", "bodyText": "Please update the comment if you're not handling the list option: you're not handling the \"+\" separated list unless you make changes like the ones I suggested,.", "author": "vchudnov-g", "createdAt": "2020-10-06T21:33:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE4NDc1MA=="}], "type": "inlineReview"}, {"oid": "9219acf6d6d8e6d3c125222e8ead504944a1b7d6", "url": "https://github.com/googleapis/gapic-generator/commit/9219acf6d6d8e6d3c125222e8ead504944a1b7d6", "message": "Merge remote-tracking branch 'upstream/master' into rest-gapic", "committedDate": "2020-10-12T19:12:07Z", "type": "commit"}]}