{"pr_number": 3048, "pr_title": "[NCL-5691] Port tests to BuildConfigurationEndpointTest", "pr_createdAt": "2020-05-18T14:33:07Z", "pr_url": "https://github.com/project-ncl/pnc/pull/3048", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3ODI2MA==", "url": "https://github.com/project-ncl/pnc/pull/3048#discussion_r430278260", "bodyText": "You are traing to make a copy of existing? Are you sure it's failing because of non-null id and not for example existing name?", "author": "janinko", "createdAt": "2020-05-26T09:27:55Z", "path": "integration-test/src/test/java/org/jboss/pnc/integration_new/endpoint/BuildConfigurationEndpointTest.java", "diffHunk": "@@ -606,4 +613,151 @@ public void shouldUpdateBuildConfigurationWithDependencies() throws ClientExcept\n         assertThat(updatedBC.getEnvironment().getId()).isEqualTo(environmentId);\n         assertThat(modificationTime).isNotEqualTo(updatedBC.getModificationTime());\n     }\n+\n+    @Test\n+    @InSequence(61)\n+    public void shouldChangeRepositoryConfiguration() throws ClientException {\n+        // given\n+        BuildConfigurationClient bcClient = new BuildConfigurationClient(RestClientConfiguration.asUser());\n+        SCMRepositoryClient scmClient = new SCMRepositoryClient(RestClientConfiguration.asAnonymous());\n+        BuildConfiguration buildConfiguration = bcClient.getSpecific(configuration4Id);\n+\n+        // make sure this RC is not already set\n+        assertThat(buildConfiguration.getScmRepository().getId()).isNotEqualTo(repositoryConfiguration2Id);\n+\n+        // when\n+        BuildConfiguration updateBC = BuildConfiguration.builder()\n+                .id(buildConfiguration.getId())\n+                .name(buildConfiguration.getName())\n+                .buildScript(buildConfiguration.getBuildScript())\n+                .creationTime(buildConfiguration.getCreationTime())\n+                .modificationTime(buildConfiguration.getModificationTime())\n+                .project(buildConfiguration.getProject())\n+                .environment(buildConfiguration.getEnvironment())\n+                .parameters(buildConfiguration.getParameters())\n+                .scmRepository(scmClient.getSpecific(repositoryConfiguration2Id))\n+                .buildType(buildConfiguration.getBuildType())\n+                .build();\n+        bcClient.update(updateBC.getId(), updateBC);\n+        BuildConfiguration updatedBC = bcClient.getSpecific(updateBC.getId());\n+\n+        // then\n+        assertThat(updateBC.getScmRepository().getId()).isEqualTo(repositoryConfiguration2Id);\n+    }\n+\n+    @Test\n+    public void shouldFailToCreateNewBuildConfigurationBecauseIdIsNotNull() throws ClientException {\n+        BuildConfigurationClient client = new BuildConfigurationClient(RestClientConfiguration.asUser());\n+\n+        BuildConfiguration bc = client.getSpecific(configurationId);\n+\n+        assertThatThrownBy(() -> client.createNew(bc)).hasCauseInstanceOf(BadRequestException.class);", "originalCommit": "dd8f05ee6f795abd81caf1376a378fe5ab43c3e3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI4MDMzMQ==", "url": "https://github.com/project-ncl/pnc/pull/3048#discussion_r430280331", "bodyText": "Please mention the test in the issue when merged", "author": "janinko", "createdAt": "2020-05-26T09:31:23Z", "path": "integration-test/src/test/java/org/jboss/pnc/integration_new/endpoint/BuildConfigurationEndpointTest.java", "diffHunk": "@@ -606,4 +613,151 @@ public void shouldUpdateBuildConfigurationWithDependencies() throws ClientExcept\n         assertThat(updatedBC.getEnvironment().getId()).isEqualTo(environmentId);\n         assertThat(modificationTime).isNotEqualTo(updatedBC.getModificationTime());\n     }\n+\n+    @Test\n+    @InSequence(61)\n+    public void shouldChangeRepositoryConfiguration() throws ClientException {\n+        // given\n+        BuildConfigurationClient bcClient = new BuildConfigurationClient(RestClientConfiguration.asUser());\n+        SCMRepositoryClient scmClient = new SCMRepositoryClient(RestClientConfiguration.asAnonymous());\n+        BuildConfiguration buildConfiguration = bcClient.getSpecific(configuration4Id);\n+\n+        // make sure this RC is not already set\n+        assertThat(buildConfiguration.getScmRepository().getId()).isNotEqualTo(repositoryConfiguration2Id);\n+\n+        // when\n+        BuildConfiguration updateBC = BuildConfiguration.builder()\n+                .id(buildConfiguration.getId())\n+                .name(buildConfiguration.getName())\n+                .buildScript(buildConfiguration.getBuildScript())\n+                .creationTime(buildConfiguration.getCreationTime())\n+                .modificationTime(buildConfiguration.getModificationTime())\n+                .project(buildConfiguration.getProject())\n+                .environment(buildConfiguration.getEnvironment())\n+                .parameters(buildConfiguration.getParameters())\n+                .scmRepository(scmClient.getSpecific(repositoryConfiguration2Id))\n+                .buildType(buildConfiguration.getBuildType())\n+                .build();\n+        bcClient.update(updateBC.getId(), updateBC);\n+        BuildConfiguration updatedBC = bcClient.getSpecific(updateBC.getId());\n+\n+        // then\n+        assertThat(updateBC.getScmRepository().getId()).isEqualTo(repositoryConfiguration2Id);\n+    }\n+\n+    @Test\n+    public void shouldFailToCreateNewBuildConfigurationBecauseIdIsNotNull() throws ClientException {\n+        BuildConfigurationClient client = new BuildConfigurationClient(RestClientConfiguration.asUser());\n+\n+        BuildConfiguration bc = client.getSpecific(configurationId);\n+\n+        assertThatThrownBy(() -> client.createNew(bc)).hasCauseInstanceOf(BadRequestException.class);\n+    }\n+\n+    @Test\n+    public void shouldGetConflictWhenCreatingNewBuildConfigurationWithTheSameNameAndProjectId() throws ClientException {\n+        BuildConfigurationClient client = new BuildConfigurationClient(RestClientConfiguration.asUser());\n+\n+        BuildConfiguration bc = client.getSpecific(configurationId);\n+\n+        BuildConfiguration duplicate = BuildConfiguration.builder()\n+                .name(bc.getName())\n+                .buildScript(bc.getBuildScript())\n+                .project(bc.getProject())\n+                .environment(bc.getEnvironment())\n+                .parameters(bc.getParameters())\n+                .scmRepository(bc.getScmRepository())\n+                .buildType(bc.getBuildType())\n+                .build();\n+\n+        assertThatThrownBy(() -> client.createNew(duplicate)).hasCauseInstanceOf(ClientErrorException.class)\n+                .has(\n+                        new Condition<Throwable>(\n+                                (e -> ((ClientErrorException) e.getCause()).getResponse().getStatus() == 409),\n+                                \"HTTP 409 Conflict\"));\n+    }\n+\n+    @Test\n+    public void shouldFailToCreateBuildConfigurationWhichDoesntMatchRegexp() throws ClientException {\n+        BuildConfigurationClient client = new BuildConfigurationClient(RestClientConfiguration.asUser());\n+\n+        BuildConfiguration bc = client.getSpecific(configurationId);\n+\n+        BuildConfiguration invalidName = BuildConfiguration.builder()\n+                .name(\":\")\n+                .buildScript(bc.getBuildScript())\n+                .project(bc.getProject())\n+                .environment(bc.getEnvironment())\n+                .parameters(bc.getParameters())\n+                .scmRepository(bc.getScmRepository())\n+                .buildType(bc.getBuildType())\n+                .build();\n+\n+        assertThatThrownBy(() -> client.createNew(invalidName)).hasCauseInstanceOf(BadRequestException.class);\n+    }\n+\n+    @Test\n+    public void shouldNotCreateWithInternalUrlNotMatchingPattern() throws ClientException {\n+        BuildConfigurationClient client = new BuildConfigurationClient(RestClientConfiguration.asUser());\n+\n+        BuildConfiguration bc = client.getSpecific(configurationId);\n+        BuildConfiguration newBC = BuildConfiguration.builder()\n+                .name(\"othername\")\n+                .buildScript(bc.getBuildScript())\n+                .project(bc.getProject())\n+                .environment(bc.getEnvironment())\n+                .parameters(bc.getParameters())\n+                .buildType(bc.getBuildType())\n+                .build();\n+\n+        BuildConfigWithSCMRequest request = BuildConfigWithSCMRequest.builder()\n+                .buildConfig(newBC)\n+                .scmUrl(\"ssh://git@github.com:22/gerrit/newRepo.git\")\n+                .build();\n+        assertThatThrownBy(() -> client.createWithSCM(request)).hasCauseInstanceOf(BadRequestException.class);\n+        BuildConfigWithSCMRequest request2 = BuildConfigWithSCMRequest.builder()\n+                .buildConfig(newBC)\n+                .scmUrl(\"ssh://git@github.com:22/foo/newRepo\")\n+                .build();\n+        assertThatThrownBy(() -> client.createWithSCM(request2)).hasCauseInstanceOf(BadRequestException.class);\n+    }\n+\n+    @Test\n+    @InSequence(62)\n+    public void shouldCreateWithInternalUrlMatchingPattern() throws ClientException {\n+        // given\n+        BuildConfigurationClient client = new BuildConfigurationClient(RestClientConfiguration.asUser());\n+\n+        BuildConfiguration bc = client.getSpecific(configurationId);\n+        BuildConfiguration newBC = BuildConfiguration.builder()\n+                .name(\"othernameforbc\")\n+                .buildScript(bc.getBuildScript())\n+                .project(bc.getProject())\n+                .environment(bc.getEnvironment())\n+                .parameters(bc.getParameters())\n+                .buildType(bc.getBuildType())\n+                .build();\n+\n+        BuildConfigWithSCMRequest request = BuildConfigWithSCMRequest.builder()\n+                .buildConfig(newBC)\n+                .scmUrl(\"ssh://git@github.com:22/newUser/newRepo.git\")\n+                .build();\n+\n+        BuildConfigCreationResponse received = client.createWithSCM(request);\n+\n+        assertThat(received).isNotNull();\n+        assertThat(received.getBuildConfig().getId()).isNotNull();\n+        assertThat(client.getSpecific(received.getBuildConfig().getId()))\n+                .hasFieldOrPropertyWithValue(\"name\", \"othernameforbc\");\n+    }\n+\n+    // TODO Test will fail due to issue: NCL-4473, remove @Ignore when fixed.", "originalCommit": "dd8f05ee6f795abd81caf1376a378fe5ab43c3e3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "942424496685e3a07f3fffbb49a04ced43095541", "url": "https://github.com/project-ncl/pnc/commit/942424496685e3a07f3fffbb49a04ced43095541", "message": "[NCL-5691] Port tests to BuildConfigurationEndpointTest", "committedDate": "2020-05-26T10:19:44Z", "type": "commit"}, {"oid": "942424496685e3a07f3fffbb49a04ced43095541", "url": "https://github.com/project-ncl/pnc/commit/942424496685e3a07f3fffbb49a04ced43095541", "message": "[NCL-5691] Port tests to BuildConfigurationEndpointTest", "committedDate": "2020-05-26T10:19:44Z", "type": "forcePushed"}]}