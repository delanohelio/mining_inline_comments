{"pr_number": 3634, "pr_title": "[RW-4258][RISK:NO] Admin UI for CRUD of Institute entities for affiliation - Add/Edit", "pr_createdAt": "2020-06-02T13:42:21Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3634", "timeline": [{"oid": "968c101063cafd7940b3e2d724f4b5449938065f", "url": "https://github.com/all-of-us/workbench/commit/968c101063cafd7940b3e2d724f4b5449938065f", "message": "Admin Institution Add/Edit", "committedDate": "2020-06-02T13:37:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4ODEwOA==", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r433888108", "bodyText": "The assumption is that request will be coming from UI ,the shortName will be different as we will be generating it  and just display Name is something we will not have control over and can be same.", "author": "NehaBroad", "createdAt": "2020-06-02T13:47:27Z", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -128,20 +138,25 @@ public void deleteInstitution(final String shortName) {\n   @Override\n   public Optional<Institution> updateInstitution(\n       final String shortName, final Institution institutionToUpdate) {\n-    return institutionDao\n-        .findOneByShortName(shortName)\n-        .map(DbInstitution::getInstitutionId)\n-        .map(\n-            dbId -> {\n-              // create new DB object, but mark it with the original's ID to indicate that this is\n-              // an update\n-\n-              final DbInstitution dbObjectToUpdate =\n-                  institutionDao.save(\n-                      institutionMapper.modelToDb(institutionToUpdate).setInstitutionId(dbId));\n-              populateAuxTables(institutionToUpdate, dbObjectToUpdate);\n-              return toModel(dbObjectToUpdate);\n-            });\n+    validateInstitution(institutionToUpdate);\n+    try {\n+      return institutionDao\n+          .findOneByShortName(shortName)\n+          .map(DbInstitution::getInstitutionId)\n+          .map(\n+              dbId -> {\n+                // create new DB object, but mark it with the original's ID to indicate that this is\n+                // an update\n+\n+                final DbInstitution dbObjectToUpdate =\n+                    institutionDao.save(\n+                        institutionMapper.modelToDb(institutionToUpdate).setInstitutionId(dbId));\n+                populateAuxTables(institutionToUpdate, dbObjectToUpdate);\n+                return toModel(dbObjectToUpdate);\n+              });\n+    } catch (DataIntegrityViolationException ex) {\n+      throw new ConflictException(\"Display Name already exist\");", "originalCommit": "968c101063cafd7940b3e2d724f4b5449938065f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk0NTk0OA==", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r433945948", "bodyText": "I don't think that is a safe assumption.  What is wrong with throwing the existing DataIntegrityViolationException?\nWe should check in the UI that the display name doesn't exist before we even make a request like this.  See the new user creation page for an example of what I'm thinking.", "author": "jmthibault79", "createdAt": "2020-06-02T15:02:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4ODEwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk2NzMxMA==", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r433967310", "bodyText": "same thought above, for the other try/catch", "author": "jmthibault79", "createdAt": "2020-06-02T15:32:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4ODEwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwMzkwMQ==", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434203901", "bodyText": "Conflict Exception throws 409 HTTP Status code that helps me distinguish it from other 500 in UI code and i can show Institution with same name already exist error message to the user", "author": "NehaBroad", "createdAt": "2020-06-02T22:12:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4ODEwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzMzU3NQ==", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434633575", "bodyText": "Good point.  ConflictException is good, let's use that.  But we should include the original exception message in the text.  Maybe something like:\nnew ConflictException(\"DataIntegrityViolationException: \" + ex.getMessage())", "author": "jmthibault79", "createdAt": "2020-06-03T14:59:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4ODEwOA=="}], "type": "inlineReview"}, {"oid": "6dde2ae816a34e170cd0bd309cf41d971202dab5", "url": "https://github.com/all-of-us/workbench/commit/6dde2ae816a34e170cd0bd309cf41d971202dab5", "message": "Add comments", "committedDate": "2020-06-02T14:14:02Z", "type": "commit"}, {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632", "url": "https://github.com/all-of-us/workbench/commit/c9476ae698cc631895ba88ab201cc7d445f9d632", "message": "Fix test", "committedDate": "2020-06-02T15:14:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk1Mzg4Ng==", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r433953886", "bodyText": "Good catch, thank you!  Could you add a test for this if you haven't already?", "author": "jmthibault79", "createdAt": "2020-06-02T15:13:36Z", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -269,6 +284,13 @@ private void populateAuxTables(\n           new InstitutionUserInstructions()\n               .institutionShortName(modelInstitution.getShortName())\n               .instructions(userInstructions));\n+    } else {\n+      // Remove institution entry from institution_user_instructions table if user_instructions is", "originalCommit": "6dde2ae816a34e170cd0bd309cf41d971202dab5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA0Nzc3Mw==", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434047773", "bodyText": "Yes have added test_updateInstitution_RemoveUserInstructionFromExistingInstitution", "author": "NehaBroad", "createdAt": "2020-06-02T17:26:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk1Mzg4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk1NjQ2MQ==", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r433956461", "bodyText": "These can all be Strings.isNullOrEmpty()", "author": "jmthibault79", "createdAt": "2020-06-02T15:17:18Z", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -289,4 +311,48 @@ private void setInstitutionEmailAddresses(\n         .modelToDb(modelInstitution, dbInstitution)\n         .forEach(institutionEmailAddressDao::save);\n   }\n+\n+  // Take first 76 characters from display Name (with no spaces) and append 3 random number\n+  private String generateShortName(String displayName) {\n+    Random r = new Random();\n+    displayName = displayName.replaceAll(\"\\\\s\", \"\");\n+    String shortName = displayName.length() > 76 ? displayName.substring(0, 76) : displayName;\n+    shortName = shortName + r.nextInt(500) + 1;\n+    return shortName;\n+  }\n+\n+  private void validateInstitution(Institution institutionRequest) {\n+    if (StringUtils.isEmpty(institutionRequest.getDisplayName())) {", "originalCommit": "6dde2ae816a34e170cd0bd309cf41d971202dab5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk1NzYyOA==", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r433957628", "bodyText": "Would you mind updating line 13 to be import com.google.common.base.Strings; instead?  I chose the wrong one originally and this would be a better choice than elasticsearch.", "author": "jmthibault79", "createdAt": "2020-06-02T15:18:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk1NjQ2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk1OTg3Ng==", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r433959876", "bodyText": "typo: be", "author": "jmthibault79", "createdAt": "2020-06-02T15:22:00Z", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -289,4 +311,48 @@ private void setInstitutionEmailAddresses(\n         .modelToDb(modelInstitution, dbInstitution)\n         .forEach(institutionEmailAddressDao::save);\n   }\n+\n+  // Take first 76 characters from display Name (with no spaces) and append 3 random number\n+  private String generateShortName(String displayName) {\n+    Random r = new Random();\n+    displayName = displayName.replaceAll(\"\\\\s\", \"\");\n+    String shortName = displayName.length() > 76 ? displayName.substring(0, 76) : displayName;\n+    shortName = shortName + r.nextInt(500) + 1;\n+    return shortName;\n+  }\n+\n+  private void validateInstitution(Institution institutionRequest) {\n+    if (StringUtils.isEmpty(institutionRequest.getDisplayName())) {\n+      throw new BadRequestException(\"Display Name cannot be empty\");\n+    }\n+    if (StringUtils.isEmpty(institutionRequest.getShortName())) {\n+      institutionRequest.setShortName(generateShortName(institutionRequest.getDisplayName()));\n+    }\n+    if (institutionRequest.getDuaTypeEnum() == null) {\n+      // For Existing Institutions\n+      institutionRequest.setDuaTypeEnum(DuaType.MASTER);\n+    }\n+    if (institutionRequest.getOrganizationTypeEnum() == null) {\n+      throw new BadRequestException(\"Organization type cannot by null\");", "originalCommit": "6dde2ae816a34e170cd0bd309cf41d971202dab5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk3MDMxNQ==", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r433970315", "bodyText": "This can also throw a NullPointerException.", "author": "jmthibault79", "createdAt": "2020-06-02T15:36:32Z", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -289,4 +311,48 @@ private void setInstitutionEmailAddresses(\n         .modelToDb(modelInstitution, dbInstitution)\n         .forEach(institutionEmailAddressDao::save);\n   }\n+\n+  // Take first 76 characters from display Name (with no spaces) and append 3 random number\n+  private String generateShortName(String displayName) {\n+    Random r = new Random();\n+    displayName = displayName.replaceAll(\"\\\\s\", \"\");\n+    String shortName = displayName.length() > 76 ? displayName.substring(0, 76) : displayName;\n+    shortName = shortName + r.nextInt(500) + 1;\n+    return shortName;\n+  }\n+\n+  private void validateInstitution(Institution institutionRequest) {\n+    if (StringUtils.isEmpty(institutionRequest.getDisplayName())) {\n+      throw new BadRequestException(\"Display Name cannot be empty\");\n+    }\n+    if (StringUtils.isEmpty(institutionRequest.getShortName())) {\n+      institutionRequest.setShortName(generateShortName(institutionRequest.getDisplayName()));\n+    }\n+    if (institutionRequest.getDuaTypeEnum() == null) {\n+      // For Existing Institutions\n+      institutionRequest.setDuaTypeEnum(DuaType.MASTER);\n+    }\n+    if (institutionRequest.getOrganizationTypeEnum() == null) {\n+      throw new BadRequestException(\"Organization type cannot by null\");\n+    }\n+    if (institutionRequest.getOrganizationTypeEnum().equals(OrganizationType.OTHER)\n+        && StringUtils.isEmpty(institutionRequest.getOrganizationTypeOtherText())) {\n+      throw new BadRequestException(\"If organization type is OTHER, additional text is needed\");\n+    }\n+\n+    // If Agreement type is Restricted confirm Each Email address in list is valid\n+    if (institutionRequest.getDuaTypeEnum().equals(DuaType.RESTRICTED)\n+        && !institutionRequest.getEmailAddresses().isEmpty()) {\n+      institutionRequest\n+          .getEmailAddresses()\n+          .forEach(\n+              emailAddress -> {\n+                try {\n+                  new InternetAddress(emailAddress).validate();\n+                } catch (AddressException e) {", "originalCommit": "c9476ae698cc631895ba88ab201cc7d445f9d632", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAzODM3OA==", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434038378", "bodyText": "That's not what this test is intended to show.  Please update the new Institution() to supply a valid Institution.", "author": "jmthibault79", "createdAt": "2020-06-02T17:10:18Z", "path": "api/src/test/java/org/pmiops/workbench/institution/InstitutionServiceTest.java", "diffHunk": "@@ -260,17 +275,36 @@ public void test_nonUniqueEmailPatterns() {\n         .containsExactlyElementsIn(similarInstViaDb.getEmailAddresses());\n   }\n \n-  @Test\n+  // Display Name cannot be empty", "originalCommit": "c9476ae698cc631895ba88ab201cc7d445f9d632", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA0NDIyMg==", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434044222", "bodyText": "Ahh i see its trying to verify updateInstitution with valid institute but a shortName thats not in DB", "author": "NehaBroad", "createdAt": "2020-06-02T17:20:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAzODM3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAzODYyNw==", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434038627", "bodyText": "\ud83d\udc4d", "author": "jmthibault79", "createdAt": "2020-06-02T17:10:45Z", "path": "api/src/test/java/org/pmiops/workbench/institution/InstitutionServiceTest.java", "diffHunk": "@@ -260,17 +275,36 @@ public void test_nonUniqueEmailPatterns() {\n         .containsExactlyElementsIn(similarInstViaDb.getEmailAddresses());\n   }\n \n-  @Test\n+  // Display Name cannot be empty\n+  @Test(expected = BadRequestException.class)\n   public void test_InstitutionNotFound() {\n     assertThat(service.getInstitution(\"missing\")).isEmpty();\n     assertThat(service.updateInstitution(\"missing\", new Institution())).isEmpty();\n   }\n \n-  @Test(expected = DataIntegrityViolationException.class)\n+  @Test(expected = ConflictException.class)\n   public void test_nonUniqueIds() {\n     service.createInstitution(\n-        new Institution().shortName(\"test\").displayName(\"We are all individuals\"));\n-    service.createInstitution(new Institution().shortName(\"test\").displayName(\"I'm not\"));\n+        new Institution()\n+            .shortName(\"test\")\n+            .displayName(\"We are all individuals\")\n+            .organizationTypeEnum(OrganizationType.INDUSTRY));\n+    service\n+        .createInstitution(new Institution().shortName(\"test\").displayName(\"I'm not\"))\n+        .organizationTypeEnum(OrganizationType.EDUCATIONAL_INSTITUTION);\n+  }\n+\n+  @Test(expected = ConflictException.class)\n+  public void test_nonUniqueDisplayName() {", "originalCommit": "c9476ae698cc631895ba88ab201cc7d445f9d632", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA0MDU0Mg==", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434040542", "bodyText": "A little nicer if we skip the get() above and instead use isEmpty() here.", "author": "jmthibault79", "createdAt": "2020-06-02T17:14:15Z", "path": "api/src/test/java/org/pmiops/workbench/institution/InstitutionServiceTest.java", "diffHunk": "@@ -511,6 +558,64 @@ public void validate_OperationalUser_nullInstitution() {\n     assertThat(service.validateOperationalUser(institution)).isFalse();\n   }\n \n+  @Test(expected = BadRequestException.class)\n+  public void test_createInstitution_MissingOrganizationType() {\n+    Institution institution_NoOrgType =\n+        new Institution()\n+            .displayName(\"No Organization\")\n+            .duaTypeEnum(DuaType.MASTER)\n+            .emailAddresses(Arrays.asList(\"testDomain.com\"))\n+            .userInstructions(\"Should throw exception\");\n+    service.createInstitution(institution_NoOrgType);\n+  }\n+\n+  @Test\n+  public void test_createInstitution_AddDefaultDUA() {\n+    Institution institution_NoDUA =\n+        new Institution()\n+            .displayName(\"No Organization\")\n+            .emailAddresses(Collections.emptyList())\n+            .emailDomains(Collections.emptyList())\n+            .userInstructions(\"Should Add dua Type As Master\")\n+            .organizationTypeEnum(OrganizationType.INDUSTRY);\n+    Institution createdInstitution = service.createInstitution(institution_NoDUA);\n+    Institution institutionWithDua = institution_NoDUA.duaTypeEnum(DuaType.MASTER);\n+    assertThat(createdInstitution).isEqualTo(institutionWithDua);\n+  }\n+\n+  @Test(expected = BadRequestException.class)\n+  public void test_createInstitution_IncorrectEmailAddressFormat() {\n+    Institution institution_EmailAddress =\n+        new Institution()\n+            .displayName(\"No Organization\")\n+            .duaTypeEnum(DuaType.RESTRICTED)\n+            .emailAddresses(Arrays.asList(\"CorrectEmailAddress@domain.com, incorrectEmail.com\"))\n+            .organizationTypeEnum(OrganizationType.INDUSTRY);\n+    service.createInstitution(institution_EmailAddress);\n+  }\n+\n+  @Test\n+  public void test_updateInstitution_RemoveUserInstructionFromExistingInstitution() {\n+    Institution institution_WithUserInstructions =\n+        new Institution()\n+            .displayName(\"No Organization\")\n+            .duaTypeEnum(DuaType.RESTRICTED)\n+            .emailAddresses(Arrays.asList(\"CorrectEmailAddress@domain.com\"))\n+            .organizationTypeEnum(OrganizationType.INDUSTRY)\n+            .userInstructions(\"Some user instructions\");\n+    Institution createdInstitution = service.createInstitution(institution_WithUserInstructions);\n+    assertThat(createdInstitution.getUserInstructions()).isEqualTo(\"Some user instructions\");\n+\n+    Institution institutionNoUserInstruction =\n+        institution_WithUserInstructions.userInstructions(\"\");\n+    Institution updatedInstitution =\n+        service\n+            .updateInstitution(\n+                institution_WithUserInstructions.getShortName(), institutionNoUserInstruction)\n+            .get();\n+    assertThat(updatedInstitution.getUserInstructions()).isNull();", "originalCommit": "c9476ae698cc631895ba88ab201cc7d445f9d632", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA0MTAxMA==", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434041010", "bodyText": "I like these.  Could you add one more for enforcing that OtherText exists when the type is OTHER?", "author": "jmthibault79", "createdAt": "2020-06-02T17:15:09Z", "path": "api/src/test/java/org/pmiops/workbench/institution/InstitutionServiceTest.java", "diffHunk": "@@ -511,6 +558,64 @@ public void validate_OperationalUser_nullInstitution() {\n     assertThat(service.validateOperationalUser(institution)).isFalse();\n   }\n \n+  @Test(expected = BadRequestException.class)", "originalCommit": "c9476ae698cc631895ba88ab201cc7d445f9d632", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "10d47a4343833858c3d9f072113f5ee4c90aaa71", "url": "https://github.com/all-of-us/workbench/commit/10d47a4343833858c3d9f072113f5ee4c90aaa71", "message": "PR Comments", "committedDate": "2020-06-04T13:45:31Z", "type": "commit"}, {"oid": "8ccc7842e56aa73b81a030daed29cc5fa22f0f8c", "url": "https://github.com/all-of-us/workbench/commit/8ccc7842e56aa73b81a030daed29cc5fa22f0f8c", "message": "Api error message for conflict", "committedDate": "2020-06-04T15:38:41Z", "type": "commit"}, {"oid": "4cd04fe84bd538912eddf2a6cdddb4185ffa5d87", "url": "https://github.com/all-of-us/workbench/commit/4cd04fe84bd538912eddf2a6cdddb4185ffa5d87", "message": "Pr Comments: Remove unused methods etc", "committedDate": "2020-06-05T13:01:29Z", "type": "commit"}, {"oid": "5e88046b37d615d4e7701c2385aca11240b655de", "url": "https://github.com/all-of-us/workbench/commit/5e88046b37d615d4e7701c2385aca11240b655de", "message": "Fix errors for emaill Address and domain", "committedDate": "2020-06-05T13:51:19Z", "type": "commit"}, {"oid": "afe2dc1960509f6ce9b49a58d97e995ef4719821", "url": "https://github.com/all-of-us/workbench/commit/afe2dc1960509f6ce9b49a58d97e995ef4719821", "message": "Improve conflict error message", "committedDate": "2020-06-05T20:07:24Z", "type": "commit"}, {"oid": "504f1b0f490ee49e3bd46c90e922d843dc1c4077", "url": "https://github.com/all-of-us/workbench/commit/504f1b0f490ee49e3bd46c90e922d843dc1c4077", "message": "PR Comments", "committedDate": "2020-06-08T15:02:21Z", "type": "commit"}, {"oid": "76ac234c1aa36f42f1a0822b48e1e7b529be43d0", "url": "https://github.com/all-of-us/workbench/commit/76ac234c1aa36f42f1a0822b48e1e7b529be43d0", "message": "Fix: Cannot add Space in display Name", "committedDate": "2020-06-08T18:25:42Z", "type": "commit"}, {"oid": "4308ac15671a9e76fe4f3cd98352dbb1bb1024a2", "url": "https://github.com/all-of-us/workbench/commit/4308ac15671a9e76fe4f3cd98352dbb1bb1024a2", "message": "remove Bad authority", "committedDate": "2020-06-08T18:37:19Z", "type": "commit"}, {"oid": "af66cd5ccb667c55914dd55d53be8fcf6d325fa4", "url": "https://github.com/all-of-us/workbench/commit/af66cd5ccb667c55914dd55d53be8fcf6d325fa4", "message": "Merge branch 'master' into nsaxena/AdminInstituteUIAdd", "committedDate": "2020-06-08T20:54:37Z", "type": "commit"}, {"oid": "bb25555ee07039ad2eacd60be01db41407fedc25", "url": "https://github.com/all-of-us/workbench/commit/bb25555ee07039ad2eacd60be01db41407fedc25", "message": "Rebase", "committedDate": "2020-06-08T20:57:15Z", "type": "commit"}]}