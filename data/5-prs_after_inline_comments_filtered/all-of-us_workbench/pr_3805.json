{"pr_number": 3805, "pr_title": "[RW-5295][risk=low] Consolidate field masking, fix mapper", "pr_createdAt": "2020-07-18T00:15:27Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3805", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcyMjc2OA==", "url": "https://github.com/all-of-us/workbench/pull/3805#discussion_r456722768", "bodyText": "I switched to a default mapper because apparently @Mapping cannot support multi-source mappers: mapstruct/mapstruct#621", "author": "calbach", "createdAt": "2020-07-18T00:16:02Z", "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/WorkspaceMapper.java", "diffHunk": "@@ -61,10 +62,14 @@\n   @Mapping(target = \"researchPurpose\", source = \"dbWorkspace\")\n   Workspace toApiWorkspace(DbWorkspace dbWorkspace);\n \n-  @Mapping(target = \"workspace\", source = \"dbWorkspace\")\n-  @Mapping(target = \"accessLevel\", source = \"firecloudWorkspaceResponse\")\n-  WorkspaceResponse toApiWorkspaceResponse(\n-      DbWorkspace dbWorkspace, FirecloudWorkspaceResponse firecloudWorkspaceResponse);\n+  default WorkspaceResponse toApiWorkspaceResponse(", "originalCommit": "c9ae628cac303a9cb767932f630cd3cbc9651527", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc5NDY0OQ==", "url": "https://github.com/all-of-us/workbench/pull/3805#discussion_r456794649", "bodyText": "It might be cleaner to declare WorkspaceResponse toApiWorkspaceResponse(Workspace w, AccessLevel a) and then build/extract the access level (or cajole the mapper to do it) when calling that. It's a more natural signature to expose, and I think we can more simply implement WorkspaceResponse toApiWorkspaceResponse(DbWorkspace dbWorkspace, FirecloudWorkspaceResponse firecloudWorkspaceResponse).", "author": "jaycarlton", "createdAt": "2020-07-18T14:21:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcyMjc2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY5OTQ5MA==", "url": "https://github.com/all-of-us/workbench/pull/3805#discussion_r457699490", "bodyText": "I think this is what you were suggesting. I think I agree this is slightly cleaner - at least it allows me to remove the mapper fetch.", "author": "calbach", "createdAt": "2020-07-20T21:22:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcyMjc2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcyMjkxOQ==", "url": "https://github.com/all-of-us/workbench/pull/3805#discussion_r456722919", "bodyText": "Now that I'm in a default mapper, I needed to map the access level. This is the mechanism I could come up with for achieving this - I didn't see another built-in mechanism to inject/invoke another mapper, though I'm thinking perhaps it would be possible if I just split this mapper out from this class.", "author": "calbach", "createdAt": "2020-07-18T00:17:02Z", "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/WorkspaceMapper.java", "diffHunk": "@@ -61,10 +62,14 @@\n   @Mapping(target = \"researchPurpose\", source = \"dbWorkspace\")\n   Workspace toApiWorkspace(DbWorkspace dbWorkspace);\n \n-  @Mapping(target = \"workspace\", source = \"dbWorkspace\")\n-  @Mapping(target = \"accessLevel\", source = \"firecloudWorkspaceResponse\")\n-  WorkspaceResponse toApiWorkspaceResponse(\n-      DbWorkspace dbWorkspace, FirecloudWorkspaceResponse firecloudWorkspaceResponse);\n+  default WorkspaceResponse toApiWorkspaceResponse(\n+      DbWorkspace dbWorkspace, FirecloudWorkspaceResponse firecloudWorkspaceResponse) {\n+    FirecloudMapper fcMapper = Mappers.getMapper(FirecloudMapper.class);", "originalCommit": "c9ae628cac303a9cb767932f630cd3cbc9651527", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc5MjU3MA==", "url": "https://github.com/all-of-us/workbench/pull/3805#discussion_r456792570", "bodyText": "I think you shouldn't need to do this explicitly. If you just say @Mapping(source = \"firecloudWorkspaceResponse\" , target = \"accessLevel\"), then MapStruct is supposed to walk the graph of converters (including any mappers in the uses lists) and find the method that matches the signature. There's a way to tell it explicitly in the mapping annotation too, usually only needed for common types like String or Timestamp where there can be lots of  conflicts.", "author": "jaycarlton", "createdAt": "2020-07-18T13:56:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcyMjkxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc5MzE2OQ==", "url": "https://github.com/all-of-us/workbench/pull/3805#discussion_r456793169", "bodyText": "Another useful trick  is the @AfterMapping facility, which works well,  but is somewhat less elegant IMHO. Don't think  you necessarily need it here.", "author": "jaycarlton", "createdAt": "2020-07-18T14:04:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcyMjkxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcwMjA3MQ==", "url": "https://github.com/all-of-us/workbench/pull/3805#discussion_r457702071", "bodyText": "Right, but this is a default mapper. AFAICT the @Mapping annotation on a default mapper does nothing as default mappers don't even result in generated code.", "author": "calbach", "createdAt": "2020-07-20T21:28:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcyMjkxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI2MzU3Mg==", "url": "https://github.com/all-of-us/workbench/pull/3805#discussion_r458263572", "bodyText": "I see what you're saying. If you just make it non-derfault, you get this:\n    @Override\n    public WorkspaceResponse toApiWorkspaceResponse(DbWorkspace dbWorkspace, FirecloudWorkspaceResponse firecloudWorkspaceResponse) {\n        if ( dbWorkspace == null && firecloudWorkspaceResponse == null ) {\n            return null;\n        }\n\n        WorkspaceResponse workspaceResponse = new WorkspaceResponse();\n\n        if ( firecloudWorkspaceResponse != null ) {\n            workspaceResponse.setWorkspace( firecloudWorkspaceToWorkspace( firecloudWorkspaceResponse.getWorkspace() ) );\n            workspaceResponse.setAccessLevel( firecloudMapper.fcToApiWorkspaceAccessLevel( firecloudWorkspaceResponse.getAccessLevel() ) );\n        }\n\n        return workspaceResponse;\n    }\n\nand it's calling the naive mapper firecloudWorkspaceToWorkspace() instead of toApiWorkspace(DbWorkspace, FirecloudWorkspace).\nIt turns out the incomplete mapper was auto-generated (and doesn't override anything in the mapper interface).\n    protected Workspace firecloudWorkspaceToWorkspace(FirecloudWorkspace firecloudWorkspace) {\n        if ( firecloudWorkspace == null ) {\n            return null;\n        }\n\n        Workspace workspace = new Workspace();\n\n        workspace.setName( firecloudWorkspace.getName() );\n        workspace.setNamespace( firecloudWorkspace.getNamespace() );\n\n        return workspace;\n    }", "author": "jaycarlton", "createdAt": "2020-07-21T17:21:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcyMjkxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4Nzg5Ng==", "url": "https://github.com/all-of-us/workbench/pull/3805#discussion_r458287896", "bodyText": "I fiddled with it for 20 minutes or so but didn't get much further. If a simple default method is working then I'd stick with that until we can overhaul the WorkspaceMapper somewhat.", "author": "jaycarlton", "createdAt": "2020-07-21T18:01:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcyMjkxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMxOTc5OA==", "url": "https://github.com/all-of-us/workbench/pull/3805#discussion_r458319798", "bodyText": "Thanks for pulling it down and testing.", "author": "calbach", "createdAt": "2020-07-21T18:57:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcyMjkxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc5MjgwNQ==", "url": "https://github.com/all-of-us/workbench/pull/3805#discussion_r456792805", "bodyText": "\ud83d\udc4d to not doing this; it's pretty opaque and likely doesn't  save  much. I really like objects in Java  to be densely populated.", "author": "jaycarlton", "createdAt": "2020-07-18T14:00:02Z", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceImpl.java", "diffHunk": "@@ -242,10 +242,10 @@ private WorkspaceResponse getWorkspaceImpl(DbWorkspace dbWorkspace) {\n     return workspaceResponse;\n   }\n \n-  private Map<String, FirecloudWorkspaceResponse> getFirecloudWorkspaces(List<String> fields) {\n+  private Map<String, FirecloudWorkspaceResponse> getFirecloudWorkspaces() {\n     // fields must include at least \"workspace.workspaceId\", otherwise\n     // the map creation will fail\n-    return fireCloudService.getWorkspaces(fields).stream()", "originalCommit": "1da61f51e7e51cb621e106493b96ea91bb1ec17c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY5ODkwNQ==", "url": "https://github.com/all-of-us/workbench/pull/3805#discussion_r457698905", "bodyText": "Sorry to break to it to you, but it's still sparse after this change. We're just accepting the underlying service's default partial field settings, and making it standard across different entry points. We can debate the best server side representation of the partial workspace, but it is necessary to request partial data from Firecloud for performance reasons.", "author": "calbach", "createdAt": "2020-07-20T21:21:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc5MjgwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc5Mjk4OA==", "url": "https://github.com/all-of-us/workbench/pull/3805#discussion_r456792988", "bodyText": "nit: I'd name this like  uuidToFirecloudWorkspace. I'd abbreviate  workspace before  firecloud because of local context.", "author": "jaycarlton", "createdAt": "2020-07-18T14:02:10Z", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceImpl.java", "diffHunk": "@@ -187,10 +187,10 @@ public DbWorkspace get(String ns, String firecloudName) {\n \n   @Override\n   public List<WorkspaceResponse> getWorkspacesAndPublicWorkspaces() {\n-    Map<String, FirecloudWorkspaceResponse> fcWorkspaces =\n-        getFirecloudWorkspaces(ImmutableList.of(\"accessLevel\", \"workspace.workspaceId\"));\n+    Map<String, FirecloudWorkspaceResponse> fcWorkspaces = getFirecloudWorkspaces();", "originalCommit": "1da61f51e7e51cb621e106493b96ea91bb1ec17c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY5NzA5Mg==", "url": "https://github.com/all-of-us/workbench/pull/3805#discussion_r457697092", "bodyText": "Existing issue, but sure", "author": "calbach", "createdAt": "2020-07-20T21:17:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc5Mjk4OA=="}], "type": "inlineReview"}, {"oid": "f5714069dfe69acca996d63e6a30384429446289", "url": "https://github.com/all-of-us/workbench/commit/f5714069dfe69acca996d63e6a30384429446289", "message": "Consolidate field masking, fix mapper", "committedDate": "2020-07-21T18:40:37Z", "type": "commit"}, {"oid": "d4568d9a554df22ac936d872b5a19d779e3f6107", "url": "https://github.com/all-of-us/workbench/commit/d4568d9a554df22ac936d872b5a19d779e3f6107", "message": "test fixes", "committedDate": "2020-07-21T18:40:37Z", "type": "commit"}, {"oid": "5c12ff7468c81a9441d1867a2c8e4ab71b4c1ca0", "url": "https://github.com/all-of-us/workbench/commit/5c12ff7468c81a9441d1867a2c8e4ab71b4c1ca0", "message": "PR feedback", "committedDate": "2020-07-21T18:40:38Z", "type": "commit"}, {"oid": "913338c2264c596b33b554ce21a425d2a017833d", "url": "https://github.com/all-of-us/workbench/commit/913338c2264c596b33b554ce21a425d2a017833d", "message": "PR feedback", "committedDate": "2020-07-21T18:40:39Z", "type": "commit"}, {"oid": "9f3efdde990f07a758ff8f37c03345a9073778de", "url": "https://github.com/all-of-us/workbench/commit/9f3efdde990f07a758ff8f37c03345a9073778de", "message": "regression test", "committedDate": "2020-07-21T18:56:08Z", "type": "commit"}, {"oid": "9f3efdde990f07a758ff8f37c03345a9073778de", "url": "https://github.com/all-of-us/workbench/commit/9f3efdde990f07a758ff8f37c03345a9073778de", "message": "regression test", "committedDate": "2020-07-21T18:56:08Z", "type": "forcePushed"}]}