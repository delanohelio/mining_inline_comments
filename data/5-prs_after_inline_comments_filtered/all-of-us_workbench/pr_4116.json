{"pr_number": 4116, "pr_title": "[RW-5679][risk=no] Support Institution Table", "pr_createdAt": "2020-10-05T17:54:28Z", "pr_url": "https://github.com/all-of-us/workbench/pull/4116", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ4ODYwMg==", "url": "https://github.com/all-of-us/workbench/pull/4116#discussion_r500488602", "bodyText": "Since the entity class does these enums the \"right way\", I had to make sure not to drop back to Short in the generated code.", "author": "jaycarlton", "createdAt": "2020-10-06T17:54:29Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/projection/ProjectedReportingInstitution.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package org.pmiops.workbench.db.dao.projection;\n+\n+// This is a Spring Data projection interface for the Hibernate entity\n+// class DbInstitution. The properties listed correspond to query results\n+// that will be mapped into BigQuery rows in a (mostly) 1:1 fashion.\n+// Fields may not be renamed or reordered or have their types\n+// changed unless both the entity class and any queries returning\n+// this projection type are in complete agreement.\n+\n+// This code was generated using reporting-wizard.rb at 2020-10-05T09:51:25-04:00.\n+// Manual modification should be avoided if possible as this is a one-time generation\n+// and does not run on every build and updates must be merged manually for now.\n+\n+import org.pmiops.workbench.model.DuaType;\n+import org.pmiops.workbench.model.OrganizationType;\n+\n+public interface ProjectedReportingInstitution {\n+  String getDisplayName();\n+\n+  DuaType getDuaTypeEnum();\n+\n+  Long getInstitutionId();\n+\n+  OrganizationType getOrganizationTypeEnum();", "originalCommit": "e29fcb773af97303955d915878a716c9253e07f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ4OTMyOQ==", "url": "https://github.com/all-of-us/workbench/pull/4116#discussion_r500489329", "bodyText": "Since cron jobs only report 204 or 500, the enum wasn't making much sense. However, I do continue jobs as far as I can before throwing an exception today.", "author": "jaycarlton", "createdAt": "2020-10-06T17:55:36Z", "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingService.java", "diffHunk": "@@ -6,5 +6,5 @@\n  * daily) uploads, and aggregate and time-series metrics are computed in BigQuery.\n  */\n public interface ReportingService {\n-  ReportingJobResult takeAndUploadSnapshot();\n+  void takeAndUploadSnapshot();", "originalCommit": "e29fcb773af97303955d915878a716c9253e07f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5MDM1NA==", "url": "https://github.com/all-of-us/workbench/pull/4116#discussion_r500490354", "bodyText": "These are easy to forget, especially when there are two upload service implementations. I'm thinking about consolidating them into their own thing, like an enum to rule the enums. It could hold the table name and have a method to fetch the extractor values from the other enum.", "author": "jaycarlton", "createdAt": "2020-10-06T17:57:15Z", "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingUploadServiceDmlImpl.java", "diffHunk": "@@ -3,58 +3,88 @@\n import com.google.cloud.bigquery.QueryJobConfiguration;\n import com.google.cloud.bigquery.QueryParameterValue;\n import com.google.cloud.bigquery.TableResult;\n+import com.google.common.base.Stopwatch;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableList.Builder;\n-import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.Lists;\n import java.time.Duration;\n import java.util.List;\n-import java.util.Map;\n-import java.util.function.Function;\n+import java.util.Optional;\n import java.util.logging.Logger;\n+import java.util.regex.Pattern;\n import javax.inject.Provider;\n import org.pmiops.workbench.api.BigQueryService;\n import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.model.ReportingCohort;\n+import org.pmiops.workbench.model.ReportingInstitution;\n import org.pmiops.workbench.model.ReportingSnapshot;\n import org.pmiops.workbench.model.ReportingUser;\n import org.pmiops.workbench.model.ReportingWorkspace;\n+import org.pmiops.workbench.reporting.insertion.CohortColumnValueExtractor;\n import org.pmiops.workbench.reporting.insertion.DmlInsertJobBuilder;\n+import org.pmiops.workbench.reporting.insertion.InstitutionColumnValueExtractor;\n import org.pmiops.workbench.reporting.insertion.UserColumnValueExtractor;\n import org.pmiops.workbench.reporting.insertion.WorkspaceColumnValueExtractor;\n+import org.pmiops.workbench.utils.LogFormatters;\n+import org.pmiops.workbench.utils.Matchers;\n import org.springframework.context.annotation.Primary;\n import org.springframework.stereotype.Service;\n \n @Service(\"REPORTING_UPLOAD_SERVICE_DML_IMPL\")\n @Primary\n public class ReportingUploadServiceDmlImpl implements ReportingUploadService {\n \n-  private static final Logger logger = Logger.getLogger(\"ReportingUploadServiceInsertQueryImpl\");\n+  private static final Logger logger =\n+      Logger.getLogger(ReportingUploadServiceDmlImpl.class.getName());\n   private static final long MAX_WAIT_TIME = Duration.ofSeconds(60).toMillis();\n \n   private final BigQueryService bigQueryService;\n+  private final Provider<Stopwatch> stopwatchProvider;\n   private final Provider<WorkbenchConfig> workbenchConfigProvider;\n \n   private static final DmlInsertJobBuilder<ReportingUser> userJobBuilder =\n       UserColumnValueExtractor::values;\n+\n+  private static final DmlInsertJobBuilder<ReportingCohort> cohortJobBuilder =", "originalCommit": "e29fcb773af97303955d915878a716c9253e07f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6d25a3f231d25e90c87f862ceb8a3b9f83c9afc7", "url": "https://github.com/all-of-us/workbench/commit/6d25a3f231d25e90c87f862ceb8a3b9f83c9afc7", "message": "institution support", "committedDate": "2020-10-08T20:57:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAyNTU1NA==", "url": "https://github.com/all-of-us/workbench/pull/4116#discussion_r502025554", "bodyText": "spellllling", "author": "jmthibault79", "createdAt": "2020-10-08T21:34:10Z", "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingMapper.java", "diffHunk": "@@ -17,16 +20,68 @@\n     config = MapStructConfig.class,\n     uses = {CommonMappers.class, DbStorageEnums.class})\n public interface ReportingMapper {\n-  ReportingUser toDto(ProjectedReportingUser prjUser);\n+\n+  ReportingInstitution toReporrtingInstitution(ProjectedReportingInstitution prjInstitution);", "originalCommit": "6d25a3f231d25e90c87f862ceb8a3b9f83c9afc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM5ODM5Mw==", "url": "https://github.com/all-of-us/workbench/pull/4116#discussion_r502398393", "bodyText": "My laptop keyboard is over-correcting for not being able to type keys by auto-repeating (even with the key repeat feature disabled). If I weren't an Alphabet shareholder I'd requisition a new one.", "author": "jaycarlton", "createdAt": "2020-10-09T12:40:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAyNTU1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAzMjQ4Mw==", "url": "https://github.com/all-of-us/workbench/pull/4116#discussion_r502032483", "bodyText": "does this need to be contained within the ReportingMapper class?", "author": "jmthibault79", "createdAt": "2020-10-08T21:50:05Z", "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingMapper.java", "diffHunk": "@@ -17,16 +20,68 @@\n     config = MapStructConfig.class,\n     uses = {CommonMappers.class, DbStorageEnums.class})\n public interface ReportingMapper {\n-  ReportingUser toDto(ProjectedReportingUser prjUser);\n+\n+  ReportingInstitution toReporrtingInstitution(ProjectedReportingInstitution prjInstitution);\n+\n+  List<ReportingInstitution> toReportingInstitutionList(\n+      Collection<ProjectedReportingInstitution> institutions);\n+\n+  ReportingUser toReportingUser(ProjectedReportingUser prjUser);\n \n   List<ReportingUser> toReportingUserList(Collection<ProjectedReportingUser> users);\n \n-  ReportingWorkspace toDto(ProjectedReportingWorkspace prjWorkspace);\n+  ReportingWorkspace toReportingWorkspace(ProjectedReportingWorkspace prjWorkspace);\n \n   List<ReportingWorkspace> toReportingWorkspaceList(\n       Collection<ProjectedReportingWorkspace> dbWorkspace);\n \n-  ReportingCohort toDto(ProjectedReportingCohort cohort);\n+  ReportingCohort toReportingCohort(ProjectedReportingCohort cohort);\n \n   List<ReportingCohort> toModelList(Collection<ProjectedReportingCohort> cohorts);\n+\n+  default ReportingSnapshot toReportingSnapshot(\n+      QueryResultBundle queryResultBundle, long snapshotTimestamp) {\n+    return new ReportingSnapshot()\n+        .captureTimestamp(snapshotTimestamp)\n+        .cohorts(toModelList(queryResultBundle.getCohorts()))\n+        .institutions(toReportingInstitutionList(queryResultBundle.getInstitutions()))\n+        .users(toReportingUserList(queryResultBundle.getUsers()))\n+        .workspaces(toReportingWorkspaceList(queryResultBundle.getWorkspaces()));\n+  }\n+\n+  // Define immutable value class to hold results of queries within a transaction. Mapping to\n+  // Reporting DTO classes will happen outside the transaction.\n+  class QueryResultBundle {", "originalCommit": "6d25a3f231d25e90c87f862ceb8a3b9f83c9afc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM5Njc1Mw==", "url": "https://github.com/all-of-us/workbench/pull/4116#discussion_r502396753", "bodyText": "Good question. It's an intermediate object that only exists to make timings easier, and it's its only reason to exist is to support mapping reporting inputs.\nI tried it in the impl class, but then it had to be public instead of package private somehow, at which point it makes more sense to give it its own class.", "author": "jaycarlton", "createdAt": "2020-10-09T12:36:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAzMjQ4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAzODE0MA==", "url": "https://github.com/all-of-us/workbench/pull/4116#discussion_r502038140", "bodyText": "does getOrganizationTypeOtherText() return NULL or '' for inst 2?  Add an assert for the correct one", "author": "jmthibault79", "createdAt": "2020-10-08T22:03:55Z", "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionDaoTest.java", "diffHunk": "@@ -106,4 +112,55 @@ public void test_uniqueDisplayNameRequired() {\n         new DbInstitution().setShortName(\"Inst2\").setDisplayName(\"Not Unique\");\n     institutionDao.save(snowflake2);\n   }\n+\n+  @Test\n+  public void testGetReportingInstitutions() {\n+    DbInstitution institution = ReportingTestUtils.createDbInstitution();\n+    institutionDao.deleteAll();\n+    institution = institutionDao.save(institution);\n+\n+    final List<ProjectedReportingInstitution> institutions =\n+        institutionDao.getReportingInstitutions();\n+    assertThat(institutions).hasSize(1);\n+    ReportingTestUtils.assertInstitutionFields(institutions.get(0));\n+  }\n+\n+  @Test\n+  public void testGetReportingInstitutions_empty() {\n+    institutionDao.deleteAll();\n+    assertThat(institutionDao.getReportingInstitutions()).isEmpty();\n+  }\n+\n+  @Test\n+  public void testGetReportingInstitutions_multiple() {\n+    institutionDao.deleteAll();\n+\n+    DbInstitution institution1 = ReportingTestUtils.createDbInstitution();\n+    institution1.setDisplayName(\"Cairo Consulting\");\n+    institution1.setDuaTypeEnum(DuaType.RESTRICTED);\n+    institution1.setOrganizationTypeEnum(OrganizationType.OTHER);\n+    institution1.setOrganizationTypeOtherText(\"Pyramid Scheme\");\n+\n+    DbInstitution institution2 = new DbInstitution();\n+    institution2.setShortName(\"mash\");\n+    institution2.setDisplayName(\"MASH\");\n+    institution2.setDuaTypeEnum(DuaType.MASTER);\n+    institution2.setOrganizationTypeEnum(OrganizationType.HEALTH_CENTER_NON_PROFIT);\n+\n+    institutionDao.save(ImmutableList.of(institution1, institution2));\n+\n+    final List<ProjectedReportingInstitution> institutions =\n+        institutionDao.getReportingInstitutions();\n+    assertThat(institutions).hasSize(2);\n+    assertThat(institutions.get(0).getDisplayName()).isEqualTo(\"Cairo Consulting\");\n+    assertThat(institutions.get(0).getDuaTypeEnum()).isEqualTo(DuaType.RESTRICTED);\n+    assertThat(institutions.get(0).getOrganizationTypeEnum()).isEqualTo(OrganizationType.OTHER);\n+    assertThat(institutions.get(0).getOrganizationTypeOtherText()).isEqualTo(\"Pyramid Scheme\");\n+\n+    assertThat(institutions.get(1).getDisplayName()).isEqualTo(\"MASH\");\n+    assertThat(institutions.get(1).getDuaTypeEnum()).isEqualTo(DuaType.MASTER);\n+    assertThat(institutions.get(1).getOrganizationTypeEnum())\n+        .isEqualTo(OrganizationType.HEALTH_CENTER_NON_PROFIT);\n+    assertThat(institutions.get(1).getDisplayName()).isEqualTo(\"MASH\");\n+  }", "originalCommit": "6d25a3f231d25e90c87f862ceb8a3b9f83c9afc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQwOTIwMg==", "url": "https://github.com/all-of-us/workbench/pull/4116#discussion_r502409202", "bodyText": "Projections don't do any conversion at all to what's in the DB, so you get whatever is in the table. If the application enforces nullity, that's great, but I don't think we need tests to show that all nullable columns can be null.\nIf we're going to tackle null vs empty, I'd prefer to have a standalone story for that to do it app-wide, maybe even in an interceptor \ud83d\ude08 .", "author": "jaycarlton", "createdAt": "2020-10-09T12:58:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAzODE0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQyMTAyNw==", "url": "https://github.com/all-of-us/workbench/pull/4116#discussion_r502421027", "bodyText": "ok", "author": "jmthibault79", "createdAt": "2020-10-09T13:18:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAzODE0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAzODY2Mg==", "url": "https://github.com/all-of-us/workbench/pull/4116#discussion_r502038662", "bodyText": "?", "author": "jmthibault79", "createdAt": "2020-10-08T22:05:14Z", "path": "api/src/test/java/org/pmiops/workbench/reporting/ReportingMapperTest.java", "diffHunk": "@@ -26,16 +30,33 @@\n   public static class conifg {}", "originalCommit": "6d25a3f231d25e90c87f862ceb8a3b9f83c9afc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQwOTcwNw==", "url": "https://github.com/all-of-us/workbench/pull/4116#discussion_r502409707", "bodyText": "renamed. These classes are basically never used by name (since annotation finds them), but Configuration is our standard name.", "author": "jaycarlton", "createdAt": "2020-10-09T12:59:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAzODY2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDIyOQ==", "url": "https://github.com/all-of-us/workbench/pull/4116#discussion_r502040229", "bodyText": "no", "author": "jmthibault79", "createdAt": "2020-10-08T22:09:21Z", "path": "api/src/test/java/org/pmiops/workbench/testconfig/FakeTicker.java", "diffHunk": "@@ -1,17 +1,19 @@\n package org.pmiops.workbench.testconfig;\n \n import com.google.common.base.Ticker;\n+import java.util.concurrent.TimeUnit;\n \n public class FakeTicker extends Ticker {\n-  private final long elapsedMillis;\n+  private long elapsedMillis;\n \n-  protected FakeTicker(long elapsedMillis) {\n+  protected FakeTicker(long tickNanos) {\n     super();\n-    this.elapsedMillis = elapsedMillis;\n+    this.elapsedMillis = tickNanos;", "originalCommit": "6d25a3f231d25e90c87f862ceb8a3b9f83c9afc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQxMDU4MA==", "url": "https://github.com/all-of-us/workbench/pull/4116#discussion_r502410580", "bodyText": "If I had a dollar for every timestamp and duration type I've had to use in this project, I'd have $150 Eastern/$149 Central.", "author": "jaycarlton", "createdAt": "2020-10-09T13:01:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDIyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDMxNA==", "url": "https://github.com/all-of-us/workbench/pull/4116#discussion_r502040314", "bodyText": "also no", "author": "jmthibault79", "createdAt": "2020-10-08T22:09:35Z", "path": "api/src/test/java/org/pmiops/workbench/testconfig/FakeTicker.java", "diffHunk": "@@ -1,17 +1,19 @@\n package org.pmiops.workbench.testconfig;\n \n import com.google.common.base.Ticker;\n+import java.util.concurrent.TimeUnit;\n \n public class FakeTicker extends Ticker {\n-  private final long elapsedMillis;\n+  private long elapsedMillis;\n \n-  protected FakeTicker(long elapsedMillis) {\n+  protected FakeTicker(long tickNanos) {\n     super();\n-    this.elapsedMillis = elapsedMillis;\n+    this.elapsedMillis = tickNanos;\n   }\n \n   @Override\n   public long read() {\n+    elapsedMillis += TimeUnit.MILLISECONDS.toNanos(200);", "originalCommit": "6d25a3f231d25e90c87f862ceb8a3b9f83c9afc7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ba044206079cfe819cd1856785eb60efaef6c3b3", "url": "https://github.com/all-of-us/workbench/commit/ba044206079cfe819cd1856785eb60efaef6c3b3", "message": "rebase", "committedDate": "2020-10-09T13:23:22Z", "type": "commit"}, {"oid": "ba044206079cfe819cd1856785eb60efaef6c3b3", "url": "https://github.com/all-of-us/workbench/commit/ba044206079cfe819cd1856785eb60efaef6c3b3", "message": "rebase", "committedDate": "2020-10-09T13:23:22Z", "type": "forcePushed"}]}