{"pr_number": 3292, "pr_title": "[risk=no]RW-4562 Send institution-specific instructions to new users", "pr_createdAt": "2020-03-23T22:04:35Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3292", "timeline": [{"oid": "f1bfd96d7c1d050602a6b976f302530924075c90", "url": "https://github.com/all-of-us/workbench/commit/f1bfd96d7c1d050602a6b976f302530924075c90", "message": "Group and reorder UserServiceImpl dependencies", "committedDate": "2020-03-23T17:50:32Z", "type": "commit"}, {"oid": "c0aa5561ede616e2e9d4057a1acdbd1cfe0a1541", "url": "https://github.com/all-of-us/workbench/commit/c0aa5561ede616e2e9d4057a1acdbd1cfe0a1541", "message": "RW-4562 Institution User Instructions", "committedDate": "2020-03-23T17:51:58Z", "type": "commit"}, {"oid": "ddf66dc26742f4361a20763f3c44656856458eb5", "url": "https://github.com/all-of-us/workbench/commit/ddf66dc26742f4361a20763f3c44656856458eb5", "message": "sanitize inputs, revise tests, rm InstitutionUserInstructionsMapper", "committedDate": "2020-03-24T13:52:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwNTQ4Ng==", "url": "https://github.com/all-of-us/workbench/pull/3292#discussion_r397205486", "bodyText": "opportunistic reordering/grouping.  I can revert.", "author": "jmthibault79", "createdAt": "2020-03-24T14:41:45Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -78,53 +78,55 @@\n   private static final int CURRENT_DATA_USE_AGREEMENT_VERSION = 2;\n   private static final int CURRENT_TERMS_OF_SERVICE_VERSION = 1;\n \n+  private final Provider<WorkbenchConfig> configProvider;", "originalCommit": "ddf66dc26742f4361a20763f3c44656856458eb5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwNjA1OA==", "url": "https://github.com/all-of-us/workbench/pull/3292#discussion_r397206058", "bodyText": "Everwhere this was called, it was required to exist", "author": "jmthibault79", "createdAt": "2020-03-24T14:42:29Z", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionService.java", "diffHunk": "@@ -15,7 +16,8 @@\n \n   Optional<Institution> getInstitution(final String shortName);\n \n-  Optional<DbInstitution> getDbInstitution(final String shortName);", "originalCommit": "ddf66dc26742f4361a20763f3c44656856458eb5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b34e95e4eb1e9c853fd21a43b7b1c2bf0dc81010", "url": "https://github.com/all-of-us/workbench/commit/b34e95e4eb1e9c853fd21a43b7b1c2bf0dc81010", "message": "add comments and change signature", "committedDate": "2020-03-24T14:56:02Z", "type": "commit"}, {"oid": "4c981fbbf1b92bc2c16dc1c7473b2c87d8f1fc1c", "url": "https://github.com/all-of-us/workbench/commit/4c981fbbf1b92bc2c16dc1c7473b2c87d8f1fc1c", "message": "rv rm InstitutionUserInstructionsMapper", "committedDate": "2020-03-24T15:06:53Z", "type": "commit"}, {"oid": "91362b99cf8a5680accedca490c2456ac3ba1adf", "url": "https://github.com/all-of-us/workbench/commit/91362b99cf8a5680accedca490c2456ac3ba1adf", "message": "fix name", "committedDate": "2020-03-24T15:13:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIzMTg5OQ==", "url": "https://github.com/all-of-us/workbench/pull/3292#discussion_r397231899", "bodyText": "just a reordering to match", "author": "jmthibault79", "createdAt": "2020-03-24T15:14:47Z", "path": "api/src/test/java/org/pmiops/workbench/api/AuthDomainControllerTest.java", "diffHunk": "@@ -81,20 +81,20 @@ public void setUp() {\n     FakeClock clock = new FakeClock(Instant.now());\n     UserService userService =\n         new UserServiceImpl(\n+            Providers.of(config),", "originalCommit": "4c981fbbf1b92bc2c16dc1c7473b2c87d8f1fc1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIzMjcwOQ==", "url": "https://github.com/all-of-us/workbench/pull/3292#discussion_r397232709", "bodyText": "Open to naming suggestions", "author": "jmthibault79", "createdAt": "2020-03-24T15:15:47Z", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionService.java", "diffHunk": "@@ -15,7 +16,8 @@\n \n   Optional<Institution> getInstitution(final String shortName);\n \n-  Optional<DbInstitution> getDbInstitution(final String shortName);\n+  // throws NotFoundException if the DbInstitution is not found\n+  DbInstitution getDbInstitutionOrThrow(final String shortName);", "originalCommit": "4c981fbbf1b92bc2c16dc1c7473b2c87d8f1fc1c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyNzU0NA==", "url": "https://github.com/all-of-us/workbench/pull/3292#discussion_r398027544", "bodyText": "looks more like findDBInstitutionElseThrow but i know our convention is get so we can keep it as is", "author": "NehaBroad", "createdAt": "2020-03-25T17:13:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIzMjcwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyMjgxNg==", "url": "https://github.com/all-of-us/workbench/pull/3292#discussion_r398022816", "bodyText": "should this be institutionUserInstructionsId and institutionId rather than institutionUserInstructionsId and userInstructions", "author": "NehaBroad", "createdAt": "2020-03-25T17:07:42Z", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbInstitutionUserInstructions.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.pmiops.workbench.db.model;\n+\n+import java.util.Objects;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"institution_user_instructions\")\n+public class DbInstitutionUserInstructions {\n+\n+  private long institutionUserInstructionsId;\n+  private long institutionId;\n+  private String userInstructions;\n+\n+  public DbInstitutionUserInstructions() {}\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  @Column(name = \"institution_user_instructions_id\", nullable = false)\n+  public long getInstitutionUserInstructionsId() {\n+    return institutionUserInstructionsId;\n+  }\n+\n+  public DbInstitutionUserInstructions setInstitutionUserInstructionsId(\n+      long institutionUserInstructionsId) {\n+    this.institutionUserInstructionsId = institutionUserInstructionsId;\n+    return this;\n+  }\n+\n+  @Column(name = \"institution_id\", nullable = false)\n+  public long getInstitutionId() {\n+    return institutionId;\n+  }\n+\n+  public DbInstitutionUserInstructions setInstitutionId(long institutionId) {\n+    this.institutionId = institutionId;\n+    return this;\n+  }\n+\n+  @Column(name = \"user_instructions\", nullable = false)\n+  public String getUserInstructions() {\n+    return userInstructions;\n+  }\n+\n+  public DbInstitutionUserInstructions setUserInstructions(String userInstructions) {\n+    this.userInstructions = userInstructions;\n+    return this;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) return true;\n+    if (o == null || getClass() != o.getClass()) return false;\n+\n+    DbInstitutionUserInstructions that = (DbInstitutionUserInstructions) o;\n+\n+    return Objects.equals(institutionUserInstructionsId, that.institutionUserInstructionsId)\n+        && Objects.equals(userInstructions, that.userInstructions);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(institutionUserInstructionsId, userInstructions);", "originalCommit": "91362b99cf8a5680accedca490c2456ac3ba1adf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA2MzM1MA==", "url": "https://github.com/all-of-us/workbench/pull/3292#discussion_r398063350", "bodyText": "institutionId and userInstructions actually - I'll fix and comment", "author": "jmthibault79", "createdAt": "2020-03-25T18:05:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyMjgxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzNDY0NA==", "url": "https://github.com/all-of-us/workbench/pull/3292#discussion_r398034644", "bodyText": "will it make sense to have a method that takes in shortName and send institutionID as well in addition to getDbInstitutionOrThrow because thats being used at a lot of places.", "author": "NehaBroad", "createdAt": "2020-03-25T17:23:32Z", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionUserInstructionsMapper.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package org.pmiops.workbench.institution;\n+\n+import org.mapstruct.AfterMapping;\n+import org.mapstruct.Context;\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.mapstruct.MappingTarget;\n+import org.owasp.html.HtmlPolicyBuilder;\n+import org.owasp.html.PolicyFactory;\n+import org.pmiops.workbench.db.model.DbInstitutionUserInstructions;\n+import org.pmiops.workbench.model.InstitutionUserInstructions;\n+\n+@Mapper(componentModel = \"spring\")\n+public interface InstitutionUserInstructionsMapper {\n+  @Mapping(target = \"institutionUserInstructionsId\", ignore = true)\n+  @Mapping(target = \"institutionId\", ignore = true) // set by setFields()\n+  @Mapping(target = \"userInstructions\", ignore = true) // set by setFields()\n+  DbInstitutionUserInstructions modelToDb(\n+      InstitutionUserInstructions modelObject, @Context InstitutionService institutionService);\n+\n+  @AfterMapping\n+  default void setFields(\n+      @MappingTarget DbInstitutionUserInstructions target,\n+      InstitutionUserInstructions modelObject,\n+      @Context InstitutionService institutionService) {\n+\n+    final long institutionId =\n+        institutionService\n+            .getDbInstitutionOrThrow(modelObject.getInstitutionShortName())\n+            .getInstitutionId();", "originalCommit": "91362b99cf8a5680accedca490c2456ac3ba1adf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA2OTE0NQ==", "url": "https://github.com/all-of-us/workbench/pull/3292#discussion_r398069145", "bodyText": "We do need the full DbInstitution in a few places so we'd need to have both.\nSo my preferences is to keep it as-is.", "author": "jmthibault79", "createdAt": "2020-03-25T18:14:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzNDY0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5MDMyNg==", "url": "https://github.com/all-of-us/workbench/pull/3292#discussion_r398090326", "bodyText": "i meant adding a new method in addition to getDBInstitution", "author": "NehaBroad", "createdAt": "2020-03-25T18:47:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzNDY0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzNzMxMg==", "url": "https://github.com/all-of-us/workbench/pull/3292#discussion_r398037312", "bodyText": "\ud83d\ude06", "author": "NehaBroad", "createdAt": "2020-03-25T17:27:16Z", "path": "api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java", "diffHunk": "@@ -676,6 +669,82 @@ public void resendWelcomeEmail_OK() throws MessagingException {\n     verify(directoryService, times(1)).resetUserPassword(anyString());\n   }\n \n+  @Test\n+  public void sendUserInstructions_none() throws MessagingException {\n+    config.featureFlags.requireInstitutionalVerification = true;\n+\n+    final VerifiedInstitutionalAffiliation verifiedInstitutionalAffiliation =\n+        createVerifiedInstitutionalAffiliation();\n+\n+    createAccountRequest\n+        .getProfile()\n+        .setVerifiedInstitutionalAffiliation(verifiedInstitutionalAffiliation);\n+\n+    createUser();\n+    verify(mailService).sendWelcomeEmail(any(), any(), any());\n+\n+    // don't send the user instructions email if there are no instructions\n+    verifyNoMoreInteractions(mailService);\n+  }\n+\n+  @Test\n+  public void sendUserInstructions_sanitized() throws MessagingException {\n+    config.featureFlags.requireInstitutionalVerification = true;\n+\n+    final VerifiedInstitutionalAffiliation verifiedInstitutionalAffiliation =\n+        createVerifiedInstitutionalAffiliation();\n+\n+    createAccountRequest\n+        .getProfile()\n+        .setVerifiedInstitutionalAffiliation(verifiedInstitutionalAffiliation);\n+\n+    final String rawInstructions =\n+        \"<html><script>window.alert('hacked');</script></html>\"\n+            + \"Wash your hands for 20 seconds\"", "originalCommit": "91362b99cf8a5680accedca490c2456ac3ba1adf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f8b933cfb6609ae686159f99ba4e51a18db6d71f", "url": "https://github.com/all-of-us/workbench/commit/f8b933cfb6609ae686159f99ba4e51a18db6d71f", "message": "Fix logical equality and add comments", "committedDate": "2020-03-25T18:08:04Z", "type": "commit"}, {"oid": "cb349f01c90955f7cb70b8264d75fc610a7fdce5", "url": "https://github.com/all-of-us/workbench/commit/cb349f01c90955f7cb70b8264d75fc610a7fdce5", "message": "make support email a link", "committedDate": "2020-03-25T20:43:57Z", "type": "commit"}]}