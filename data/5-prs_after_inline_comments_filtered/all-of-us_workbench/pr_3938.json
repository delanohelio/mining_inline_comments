{"pr_number": 3938, "pr_title": "[RW-5379][risk=no] move mappers from CohortReviewController to CohortReviewService", "pr_createdAt": "2020-08-28T18:51:42Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3938", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ5Mjg0Mw==", "url": "https://github.com/all-of-us/workbench/pull/3938#discussion_r479492843", "bodyText": "Remove this cause it's also happening in cohortReviewService.findCohort(cohortId)", "author": "freemabd", "createdAt": "2020-08-28T19:22:24Z", "path": "api/src/main/java/org/pmiops/workbench/api/CohortAnnotationDefinitionController.java", "diffHunk": "@@ -134,11 +132,7 @@ private CohortAnnotationDefinition findCohortAnnotationDefinition(\n   }\n \n   private void validateCohortExist(long cohortId) {\n-    DbCohort cohort = cohortReviewService.findCohort(cohortId);\n-    if (cohort == null) {\n-      throw new NotFoundException(\n-          String.format(\"Not Found: No Cohort exists for cohortId: %s\", cohortId));\n-    }", "originalCommit": "a0dfe0811ed2ba0e5930b1e335d233aee541af30", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ5NTg4OA==", "url": "https://github.com/all-of-us/workbench/pull/3938#discussion_r479495888", "bodyText": "No longer need this mapper method. I will create a future story that will remove page, pageSize, sortOrder and sortColumn for the CohortReview object", "author": "freemabd", "createdAt": "2020-08-28T19:29:46Z", "path": "api/src/main/java/org/pmiops/workbench/cohortreview/mapper/CohortReviewMapper.java", "diffHunk": "@@ -28,25 +28,19 @@\n   @Mapping(target = \"participantCohortStatuses\", ignore = true)\n   CohortReview dbModelToClient(DbCohortReview dbCohortReview);\n \n-  @Mapping(target = \"etag\", source = \"version\", qualifiedByName = \"cdrVersionToEtag\")\n-  // used for pagination. Effectively deprecated, to remove with RW-4706\n-  @Mapping(target = \"queryResultSize\", ignore = true)\n-  @Mapping(target = \"page\", ignore = true)\n-  @Mapping(target = \"pageSize\", ignore = true)\n-  @Mapping(target = \"sortOrder\", ignore = true)\n-  @Mapping(target = \"sortColumn\", ignore = true)\n-  // this fetches all participants, and can be large, we don't want to fetch by\n-  // default. May be removed from object pending design\n-  @Mapping(target = \"participantCohortStatuses\", ignore = true)\n-  CohortReview dbModelToClient(DbCohortReview dbCohortReview, @Context PageRequest pageRequest);", "originalCommit": "998d3885186a254ae93717365289ac7f83663e75", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ5NjQ0NA==", "url": "https://github.com/all-of-us/workbench/pull/3938#discussion_r479496444", "bodyText": "I will create a future story that will remove page, pageSize, sortOrder and sortColumn for the CohortReview object", "author": "freemabd", "createdAt": "2020-08-28T19:31:06Z", "path": "api/src/main/java/org/pmiops/workbench/api/CohortReviewController.java", "diffHunk": "@@ -219,19 +199,16 @@\n             .sortOrder(SortOrder.ASC)\n             .sortColumn(FilterColumns.PARTICIPANTID.toString());\n \n-    List<DbParticipantCohortStatus> paginatedPCS =\n+    List<ParticipantCohortStatus> paginatedPCS =\n         cohortReviewService.findAll(cohortReview.getCohortReviewId(), pageRequest);\n \n-    org.pmiops.workbench.model.CohortReview responseReview =\n-        cohortReviewMapper.dbModelToClient(cohortReview, pageRequest);\n-    responseReview.setParticipantCohortStatuses(\n-        paginatedPCS.stream()\n-            .map(\n-                pcs ->\n-                    participantCohortStatusMapper.dbModelToClient(\n-                        pcs, cohortBuilderService.findAllDemographicsMap()))\n-            .collect(Collectors.toList()));\n-    return ResponseEntity.ok(responseReview);\n+    cohortReview\n+        .page(pageRequest.getPage())\n+        .pageSize(pageRequest.getPageSize())\n+        .sortOrder(pageRequest.getSortOrder().toString())\n+        .sortColumn(pageRequest.getSortColumn())\n+        .participantCohortStatuses(paginatedPCS);", "originalCommit": "998d3885186a254ae93717365289ac7f83663e75", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEyMzM5Nw==", "url": "https://github.com/all-of-us/workbench/pull/3938#discussion_r481123397", "bodyText": "Why is this removed?", "author": "NehaBroad", "createdAt": "2020-09-01T13:07:48Z", "path": "api/src/main/java/org/pmiops/workbench/api/CohortReviewController.java", "diffHunk": "@@ -99,70 +92,56 @@\n \n   public static final Integer PAGE = 0;\n   public static final Integer PAGE_SIZE = 25;\n-  public static final Integer MAX_PAGE_SIZE = 1000;\n   public static final Integer MAX_REVIEW_SIZE = 10000;\n   public static final Integer MIN_LIMIT = 1;\n   public static final Integer MAX_LIMIT = 20;\n   public static final Integer DEFAULT_LIMIT = 5;\n   public static final List<String> SEX_GENDER_RACE_ETHNICITY_TYPES =\n       ImmutableList.of(\n-          FilterColumns.SEX_AT_BIRTH.name(),\n+          FilterColumns.SEXATBIRTH.name(),\n           FilterColumns.ETHNICITY.name(),\n           FilterColumns.GENDER.name(),\n           FilterColumns.RACE.name());\n \n-  private CohortBuilderService cohortBuilderService;\n-  private CohortReviewService cohortReviewService;\n-  private BigQueryService bigQueryService;\n-  private CohortQueryBuilder cohortQueryBuilder;\n-  private ReviewQueryBuilder reviewQueryBuilder;\n-  private UserRecentResourceService userRecentResourceService;\n-  private Provider<DbUser> userProvider;\n-  private ParticipantCohortStatusMapper participantCohortStatusMapper;\n-  private CohortReviewMapper cohortReviewMapper;\n-  private ParticipantCohortAnnotationMapper participantCohortAnnotationMapper;\n+  private final CohortBuilderService cohortBuilderService;\n+  private final CohortReviewService cohortReviewService;\n+  private final BigQueryService bigQueryService;\n+  private final CohortQueryBuilder cohortQueryBuilder;\n+  private final ReviewQueryBuilder reviewQueryBuilder;\n+  private final UserRecentResourceService userRecentResourceService;\n+  private final Provider<DbUser> userProvider;\n+  private final WorkspaceService workspaceService;\n   private final Clock clock;\n-  private static final Logger log = Logger.getLogger(CohortReviewController.class.getName());\n \n   @Autowired\n   CohortReviewController(\n+      CohortReviewService cohortReviewService,\n       BigQueryService bigQueryService,\n       CohortBuilderService cohortBuilderService,\n       CohortQueryBuilder cohortQueryBuilder,\n-      CohortReviewService cohortReviewService,\n       ReviewQueryBuilder reviewQueryBuilder,\n       UserRecentResourceService userRecentResourceService,\n       Provider<DbUser> userProvider,\n-      ParticipantCohortStatusMapper participantCohortStatusMapper,\n-      CohortReviewMapper cohortReviewMapper,\n-      ParticipantCohortAnnotationMapper participantCohortAnnotationMapper,\n+      WorkspaceService workspaceService,\n       Clock clock) {\n+    this.cohortReviewService = cohortReviewService;\n     this.bigQueryService = bigQueryService;\n     this.cohortBuilderService = cohortBuilderService;\n     this.cohortQueryBuilder = cohortQueryBuilder;\n-    this.cohortReviewService = cohortReviewService;\n     this.reviewQueryBuilder = reviewQueryBuilder;\n     this.userRecentResourceService = userRecentResourceService;\n     this.userProvider = userProvider;\n-    this.participantCohortStatusMapper = participantCohortStatusMapper;\n-    this.cohortReviewMapper = cohortReviewMapper;\n-    this.participantCohortAnnotationMapper = participantCohortAnnotationMapper;\n+    this.workspaceService = workspaceService;\n     this.clock = clock;\n   }\n \n   /**\n    * Create a cohort review per the specified workspaceId, cohortId, cdrVersionId and size. If\n    * participant cohort status data exists for a review or no cohort review exists for\n    * cohortReviewId then throw a {@link BadRequestException}.\n-   *\n-   * @param workspaceNamespace\n-   * @param workspaceId\n-   * @param cohortId\n-   * @param cdrVersionId", "originalCommit": "55c5b91b5a9f5f53b336a6d4da56cdbcbb136718", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE0NzI2NA==", "url": "https://github.com/all-of-us/workbench/pull/3938#discussion_r481147264", "bodyText": "A few reasons, they didn't match the parameters being passed into the method and Intellij gives a warning for any @param that doesn't have a description attached to them.  I feel that they are self explanatory and don't need descriptions and was tired of seeing the warnings, so i removed them.", "author": "freemabd", "createdAt": "2020-09-01T13:42:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEyMzM5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEyOTg2NQ==", "url": "https://github.com/all-of-us/workbench/pull/3938#discussion_r481129865", "bodyText": "I know its update, but should we still wrap this around a try catch just in case cohortReviewId does not exist in DB", "author": "NehaBroad", "createdAt": "2020-09-01T13:17:48Z", "path": "api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewServiceImpl.java", "diffHunk": "@@ -110,86 +105,118 @@ public DbCohortReview findCohortReview(Long cohortId, Long cdrVersionId) {\n               \"Not Found: Cohort Review does not exist for cohortId: %s, cdrVersionId: %s\",\n               cohortId, cdrVersionId));\n     }\n-    return cohortReview;\n-  }\n-\n-  @Override\n-  public DbCohortReview findCohortReview(Long cohortReviewId) {\n-    DbCohortReview cohortReview = cohortReviewDao.findCohortReviewByCohortReviewId(cohortReviewId);\n-\n-    if (cohortReview == null) {\n-      throw new NotFoundException(\n-          String.format(\n-              \"Not Found: Cohort Review does not exist for cohortReviewId: %s\", cohortReviewId));\n-    }\n-    return cohortReview;\n+    return cohortReviewMapper.dbModelToClient(cohortReview);\n   }\n \n   @Override\n-  public DbCohortReview findCohortReview(String ns, String firecloudName, Long cohortReviewId) {\n-    DbCohortReview cohortReview =\n-        cohortReviewDao.findByNamespaceAndFirecloudNameAndCohortReviewId(\n-            ns, firecloudName, cohortReviewId);\n-\n-    if (cohortReview == null) {\n-      throw new NotFoundException(\n-          String.format(\n-              \"Not Found: Cohort Review does not exist for namespace: %s, firecloudName: %s and cohortReviewId: %d\",\n-              ns, firecloudName, cohortReviewId));\n-    }\n-    return cohortReview;\n+  public CohortReview findCohortReview(Long cohortReviewId) {\n+    DbCohortReview cohortReview = findDbCohortReview(cohortReviewId);\n+    return cohortReviewMapper.dbModelToClient(cohortReview);\n   }\n \n   @Override\n-  public void deleteCohortReview(DbCohortReview cohortReview) {\n-    cohortReviewDao.delete(cohortReview);\n+  public void deleteCohortReview(Long cohortReviewId) {\n+    cohortReviewDao.delete(findDbCohortReview(cohortReviewId));\n   }\n \n   @Override\n-  public List<DbCohortReview> getRequiredWithCohortReviews(String ns, String firecloudName) {\n-    return cohortReviewDao.findByFirecloudNameAndActiveStatus(\n-        ns,\n-        firecloudName,\n-        DbStorageEnums.workspaceActiveStatusToStorage(WorkspaceActiveStatus.ACTIVE));\n+  public List<CohortReview> getRequiredWithCohortReviews(String ns, String firecloudName) {\n+    return cohortReviewDao\n+        .findByFirecloudNameAndActiveStatus(\n+            ns,\n+            firecloudName,\n+            DbStorageEnums.workspaceActiveStatusToStorage(WorkspaceActiveStatus.ACTIVE))\n+        .stream()\n+        .map(cohortReviewMapper::dbModelToClient)\n+        .collect(Collectors.toList());\n   }\n \n   @Override\n-  public DbCohortReview saveCohortReview(DbCohortReview cohortReview) {\n-    return cohortReviewDao.save(cohortReview);\n+  public CohortReview saveCohortReview(CohortReview cohortReview, DbUser creator) {\n+    return cohortReviewMapper.dbModelToClient(\n+        cohortReviewDao.save(cohortReviewMapper.clientToDbModel(cohortReview, creator)));\n   }\n \n   @Override\n   @Transactional\n   public void saveFullCohortReview(\n-      DbCohortReview cohortReview, List<DbParticipantCohortStatus> participantCohortStatuses) {\n-    saveCohortReview(cohortReview);\n+      CohortReview cohortReview, List<DbParticipantCohortStatus> participantCohortStatuses) {\n+    cohortReviewDao.save(cohortReviewMapper.clientToDbModel(cohortReview));\n     participantCohortStatusDao.saveParticipantCohortStatusesCustom(participantCohortStatuses);\n   }\n \n+  public CohortReview updateCohortReview(\n+      CohortReview cohortReview, Long cohortReviewId, Timestamp lastModified) {\n+    DbCohortReview dbCohortReview = findDbCohortReview(cohortReviewId);", "originalCommit": "55c5b91b5a9f5f53b336a6d4da56cdbcbb136718", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEzNjIwMA==", "url": "https://github.com/all-of-us/workbench/pull/3938#discussion_r481136200", "bodyText": "Nvm i see findDbCohortReview is already doing that", "author": "NehaBroad", "createdAt": "2020-09-01T13:27:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEyOTg2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEzMDY5Mw==", "url": "https://github.com/all-of-us/workbench/pull/3938#discussion_r481130693", "bodyText": "Similarly here", "author": "NehaBroad", "createdAt": "2020-09-01T13:19:02Z", "path": "api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewServiceImpl.java", "diffHunk": "@@ -110,86 +105,118 @@ public DbCohortReview findCohortReview(Long cohortId, Long cdrVersionId) {\n               \"Not Found: Cohort Review does not exist for cohortId: %s, cdrVersionId: %s\",\n               cohortId, cdrVersionId));\n     }\n-    return cohortReview;\n-  }\n-\n-  @Override\n-  public DbCohortReview findCohortReview(Long cohortReviewId) {\n-    DbCohortReview cohortReview = cohortReviewDao.findCohortReviewByCohortReviewId(cohortReviewId);\n-\n-    if (cohortReview == null) {\n-      throw new NotFoundException(\n-          String.format(\n-              \"Not Found: Cohort Review does not exist for cohortReviewId: %s\", cohortReviewId));\n-    }\n-    return cohortReview;\n+    return cohortReviewMapper.dbModelToClient(cohortReview);\n   }\n \n   @Override\n-  public DbCohortReview findCohortReview(String ns, String firecloudName, Long cohortReviewId) {\n-    DbCohortReview cohortReview =\n-        cohortReviewDao.findByNamespaceAndFirecloudNameAndCohortReviewId(\n-            ns, firecloudName, cohortReviewId);\n-\n-    if (cohortReview == null) {\n-      throw new NotFoundException(\n-          String.format(\n-              \"Not Found: Cohort Review does not exist for namespace: %s, firecloudName: %s and cohortReviewId: %d\",\n-              ns, firecloudName, cohortReviewId));\n-    }\n-    return cohortReview;\n+  public CohortReview findCohortReview(Long cohortReviewId) {\n+    DbCohortReview cohortReview = findDbCohortReview(cohortReviewId);\n+    return cohortReviewMapper.dbModelToClient(cohortReview);\n   }\n \n   @Override\n-  public void deleteCohortReview(DbCohortReview cohortReview) {\n-    cohortReviewDao.delete(cohortReview);\n+  public void deleteCohortReview(Long cohortReviewId) {\n+    cohortReviewDao.delete(findDbCohortReview(cohortReviewId));\n   }\n \n   @Override\n-  public List<DbCohortReview> getRequiredWithCohortReviews(String ns, String firecloudName) {\n-    return cohortReviewDao.findByFirecloudNameAndActiveStatus(\n-        ns,\n-        firecloudName,\n-        DbStorageEnums.workspaceActiveStatusToStorage(WorkspaceActiveStatus.ACTIVE));\n+  public List<CohortReview> getRequiredWithCohortReviews(String ns, String firecloudName) {\n+    return cohortReviewDao\n+        .findByFirecloudNameAndActiveStatus(\n+            ns,\n+            firecloudName,\n+            DbStorageEnums.workspaceActiveStatusToStorage(WorkspaceActiveStatus.ACTIVE))\n+        .stream()\n+        .map(cohortReviewMapper::dbModelToClient)\n+        .collect(Collectors.toList());\n   }\n \n   @Override\n-  public DbCohortReview saveCohortReview(DbCohortReview cohortReview) {\n-    return cohortReviewDao.save(cohortReview);\n+  public CohortReview saveCohortReview(CohortReview cohortReview, DbUser creator) {\n+    return cohortReviewMapper.dbModelToClient(\n+        cohortReviewDao.save(cohortReviewMapper.clientToDbModel(cohortReview, creator)));\n   }\n \n   @Override\n   @Transactional\n   public void saveFullCohortReview(\n-      DbCohortReview cohortReview, List<DbParticipantCohortStatus> participantCohortStatuses) {\n-    saveCohortReview(cohortReview);\n+      CohortReview cohortReview, List<DbParticipantCohortStatus> participantCohortStatuses) {\n+    cohortReviewDao.save(cohortReviewMapper.clientToDbModel(cohortReview));\n     participantCohortStatusDao.saveParticipantCohortStatusesCustom(participantCohortStatuses);\n   }\n \n+  public CohortReview updateCohortReview(\n+      CohortReview cohortReview, Long cohortReviewId, Timestamp lastModified) {\n+    DbCohortReview dbCohortReview = findDbCohortReview(cohortReviewId);\n+    if (Strings.isNullOrEmpty(cohortReview.getEtag())) {\n+      throw new ConflictException(\"missing required update field 'etag'\");\n+    }\n+    int version = Etags.toVersion(cohortReview.getEtag());\n+    if (dbCohortReview.getVersion() != version) {\n+      throw new ConflictException(\"Attempted to modify outdated cohort review version\");\n+    }\n+    if (cohortReview.getCohortName() != null) {\n+      dbCohortReview.setCohortName(cohortReview.getCohortName());\n+    }\n+    if (cohortReview.getDescription() != null) {\n+      dbCohortReview.setDescription(cohortReview.getDescription());\n+    }\n+    dbCohortReview.setLastModifiedTime(lastModified);\n+    try {\n+      return cohortReviewMapper.dbModelToClient(cohortReviewDao.save(dbCohortReview));\n+    } catch (OptimisticLockException e) {\n+      throw new ConflictException(\"Failed due to concurrent cohort review modification\");\n+    }\n+  }\n+\n   @Override\n-  public DbParticipantCohortStatus saveParticipantCohortStatus(\n-      DbParticipantCohortStatus participantCohortStatus) {\n-    return participantCohortStatusDao.save(participantCohortStatus);\n+  public ParticipantCohortStatus updateParticipantCohortStatus(\n+      Long cohortReviewId, Long participantId, CohortStatus status, Timestamp lastModified) {\n+    DbCohortReview dbCohortReview = findDbCohortReview(cohortReviewId);", "originalCommit": "55c5b91b5a9f5f53b336a6d4da56cdbcbb136718", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEzNjcyMw==", "url": "https://github.com/all-of-us/workbench/pull/3938#discussion_r481136723", "bodyText": "nvm findDbCohortReview is taking care of it", "author": "NehaBroad", "createdAt": "2020-09-01T13:28:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEzMDY5Mw=="}], "type": "inlineReview"}, {"oid": "4b51792a335f0ffe857be042a917a427efce7e82", "url": "https://github.com/all-of-us/workbench/commit/4b51792a335f0ffe857be042a917a427efce7e82", "message": "RW-5379 updated controller and service", "committedDate": "2020-09-02T14:20:14Z", "type": "commit"}, {"oid": "d3ceaf1fcc79cc03c23eea4ec125ee8663079e72", "url": "https://github.com/all-of-us/workbench/commit/d3ceaf1fcc79cc03c23eea4ec125ee8663079e72", "message": "RW-5379 updated controller and service", "committedDate": "2020-09-02T14:20:14Z", "type": "commit"}, {"oid": "98c2a0593ff13316eaca5872dddcc7694f213ef6", "url": "https://github.com/all-of-us/workbench/commit/98c2a0593ff13316eaca5872dddcc7694f213ef6", "message": "RW-5379 finally got it working", "committedDate": "2020-09-02T14:20:14Z", "type": "commit"}, {"oid": "15247b301e51c3685740a752bdb8a813e3710d0f", "url": "https://github.com/all-of-us/workbench/commit/15247b301e51c3685740a752bdb8a813e3710d0f", "message": "RW-5379 finsihing up", "committedDate": "2020-09-02T14:20:14Z", "type": "commit"}, {"oid": "056e63c5f6a6307a53297e73d082f08d7f5c90ec", "url": "https://github.com/all-of-us/workbench/commit/056e63c5f6a6307a53297e73d082f08d7f5c90ec", "message": "RW-5379 fixing tests", "committedDate": "2020-09-02T14:20:14Z", "type": "commit"}, {"oid": "f06fbe912a8fa9cb6bdb68180b9d90f456615a3c", "url": "https://github.com/all-of-us/workbench/commit/f06fbe912a8fa9cb6bdb68180b9d90f456615a3c", "message": "RW-5379 fixing tests", "committedDate": "2020-09-02T14:20:14Z", "type": "commit"}, {"oid": "78744f9aac3e3d10dc5532d500aded655373c633", "url": "https://github.com/all-of-us/workbench/commit/78744f9aac3e3d10dc5532d500aded655373c633", "message": "RW-5379 fixing tests", "committedDate": "2020-09-02T14:20:14Z", "type": "commit"}, {"oid": "30b1a6312c92a9b72f8ccb08eef0c40c2314908c", "url": "https://github.com/all-of-us/workbench/commit/30b1a6312c92a9b72f8ccb08eef0c40c2314908c", "message": "RW-5379 fixing test case.", "committedDate": "2020-09-02T14:20:14Z", "type": "commit"}, {"oid": "21763325c89eb2a8839f0b01db129bb2e4fe483b", "url": "https://github.com/all-of-us/workbench/commit/21763325c89eb2a8839f0b01db129bb2e4fe483b", "message": "RW-5379 fixing test", "committedDate": "2020-09-02T14:20:15Z", "type": "commit"}, {"oid": "f01423b74bb3abe555a6629fa593d063579f1a63", "url": "https://github.com/all-of-us/workbench/commit/f01423b74bb3abe555a6629fa593d063579f1a63", "message": "RW-5379 spotless", "committedDate": "2020-09-02T14:20:15Z", "type": "commit"}, {"oid": "f01423b74bb3abe555a6629fa593d063579f1a63", "url": "https://github.com/all-of-us/workbench/commit/f01423b74bb3abe555a6629fa593d063579f1a63", "message": "RW-5379 spotless", "committedDate": "2020-09-02T14:20:15Z", "type": "forcePushed"}]}