{"pr_number": 3734, "pr_title": "[RW-5139][risk=low] Switch profile validation to only validate changed fields", "pr_createdAt": "2020-06-30T23:24:37Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3734", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3NzAxNg==", "url": "https://github.com/all-of-us/workbench/pull/3734#discussion_r448077016", "bodyText": "nit: I'd add a wrapper around this in the service so you could do profileService.validateProfile(profile);. Ideally, we should very rarely need to write out null.", "author": "jaycarlton", "createdAt": "2020-07-01T02:12:30Z", "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -270,12 +270,8 @@ private DbUser initializeUserIfNeeded() {\n \n     final Profile profile = request.getProfile();\n \n-    // We don't include this check in validateAndCleanProfile since some existing user profiles\n-    // may have empty addresses. So we only check this on user creation, not update.\n-    Optional.ofNullable(profile.getAddress())\n-        .orElseThrow(() -> new BadRequestException(\"Address must not be empty\"));\n-\n-    profileService.validateAndCleanProfile(profile);\n+    // Run all profile validation by passing in a null 'previous' object.", "originalCommit": "c45e40cb5e11eae1756a48894c9a149f7e9d6b54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3NDMxMA==", "url": "https://github.com/all-of-us/workbench/pull/3734#discussion_r448274310", "bodyText": "Done. Note that both methods need to be public though, so we can't get entirely away from having a nullable parameter.\nFor cross-reference, the Javers API used to have two separate methods (one to check \"new\" objects, and one to check diffs) but they've since deprecated the separate method. There's a tiny complexity tradeoff in either direction.", "author": "gjuggler", "createdAt": "2020-07-01T10:37:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3NzAxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3Nzk0Ng==", "url": "https://github.com/all-of-us/workbench/pull/3734#discussion_r448077946", "bodyText": "should we not just bail here if the username is missing? Either throw IllegalStateException or return a failure code.", "author": "jaycarlton", "createdAt": "2020-07-01T02:16:15Z", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -227,23 +235,16 @@ public void updateProfileForUser(DbUser user, Profile updatedProfile, Profile pr\n     profileAuditor.fireUpdateAction(previousProfile, appliedUpdatedProfile);\n   }\n \n-  public void validateAndCleanProfile(Profile profile) throws BadRequestException {\n-    // Validation steps, which yield a BadRequestException if errors are found.\n-    String userName = profile.getUsername();\n-    if (userName == null || userName.length() < 3 || userName.length() > 64) {\n-      throw new BadRequestException(\n-          \"Username should be at least 3 characters and not more than 64 characters\");\n-    }\n-    validateStringLength(profile.getGivenName(), \"Given Name\", 80, 1);\n-    validateStringLength(profile.getFamilyName(), \"Family Name\", 80, 1);\n-\n+  public void cleanProfile(Profile profile) throws BadRequestException {\n     // Cleaning steps, which provide non-null fields or apply some cleanup / transformation.\n     profile.setDemographicSurvey(\n         Optional.ofNullable(profile.getDemographicSurvey()).orElse(new DemographicSurvey()));\n     profile.setInstitutionalAffiliations(\n         Optional.ofNullable(profile.getInstitutionalAffiliations()).orElse(new ArrayList<>()));\n-    // We always store the username as all lowercase.\n-    profile.setUsername(profile.getUsername().toLowerCase());\n+    if (profile.getUsername() != null) {", "originalCommit": "c45e40cb5e11eae1756a48894c9a149f7e9d6b54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3NTY4Mw==", "url": "https://github.com/all-of-us/workbench/pull/3734#discussion_r448275683", "bodyText": "We separately check for missing username in the 'validate' method. I was trying to make the clean-up code as permissive as possible; I think I specifically added this to support the minimal test cases, but I think it's not unreasonable behavior for cleanProfile to avoid throwing errors.", "author": "gjuggler", "createdAt": "2020-07-01T10:40:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3Nzk0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3OTM2OA==", "url": "https://github.com/all-of-us/workbench/pull/3734#discussion_r448079368", "bodyText": "Did you look at ModelBackedTargetProperty and the TargetPropertyExtractor? It works via one of the target property enums like ProprtyTargetProperty.\nI'd prefer not to have separate logic for essentially the same thing both here and in the audit code.", "author": "jaycarlton", "createdAt": "2020-07-01T02:22:07Z", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -286,50 +287,132 @@ private void updateInstitutionalAffiliations(Profile updatedProfile, DbUser user\n     }\n   }\n \n-  private void validateUpdatedProfile(Profile updatedProfile, Profile prevProfile)\n-      throws BadRequestException {\n-    validateAndCleanProfile(updatedProfile);\n-    if (StringUtils.isEmpty(updatedProfile.getAreaOfResearch())) {\n-      throw new BadRequestException(\"Research background cannot be empty\");\n+  private void validateStringLength(String field, String fieldName, int max, int min) {\n+    if (field == null) {\n+      throw new BadRequestException(String.format(\"%s cannot be left blank!\", fieldName));\n+    }\n+    if (field.length() > max) {\n+      throw new BadRequestException(\n+          String.format(\"%s length exceeds character limit. (%d)\", fieldName, max));\n+    }\n+    if (field.length() < min) {\n+      if (min == 1) {\n+        throw new BadRequestException(String.format(\"%s cannot be left blank.\", fieldName));\n+      } else {\n+        throw new BadRequestException(\n+            String.format(\"%s is under character minimum. (%d)\", fieldName, min));\n+      }\n+    }\n+  }\n+\n+  private void validateUsername(Profile profile) throws BadRequestException {\n+    String username = profile.getUsername();\n+    if (username == null || username.length() < 3 || username.length() > 64) {\n+      throw new BadRequestException(\n+          \"Username should be at least 3 characters and not more than 64 characters\");\n     }\n-    Optional.ofNullable(updatedProfile.getAddress())\n+  }\n+\n+  private void validateContactEmail(Profile profile) throws BadRequestException {\n+    if (StringUtils.isEmpty(profile.getContactEmail())) {\n+      throw new BadRequestException(\"Contact email cannot be empty\");\n+    }\n+  }\n+\n+  private void validateGivenName(Profile profile) throws BadRequestException {\n+    validateStringLength(profile.getGivenName(), \"Given Name\", 80, 1);\n+  }\n+\n+  private void validateFamilyName(Profile profile) throws BadRequestException {\n+    validateStringLength(profile.getFamilyName(), \"Family Name\", 80, 1);\n+  }\n+\n+  private void validateAddress(Profile profile) throws BadRequestException {\n+    Optional.ofNullable(profile.getAddress())\n         .orElseThrow(() -> new BadRequestException(\"Address must not be empty\"));\n \n-    Address updatedProfileAddress = updatedProfile.getAddress();\n+    Address updatedProfileAddress = profile.getAddress();\n     if (StringUtils.isEmpty(updatedProfileAddress.getStreetAddress1())\n         || StringUtils.isEmpty(updatedProfileAddress.getCity())\n         || StringUtils.isEmpty(updatedProfileAddress.getState())\n         || StringUtils.isEmpty(updatedProfileAddress.getCountry())\n         || StringUtils.isEmpty(updatedProfileAddress.getZipCode())) {\n       throw new BadRequestException(\n-          \"Address cannot have empty street Address 1/city/state/country or Zip Code\");\n+          \"Address cannot have empty street address, city, state, country or zip code\");\n     }\n-    if (updatedProfile.getContactEmail() != null\n-        && !updatedProfile.getContactEmail().equals(prevProfile.getContactEmail())) {\n-      // See RW-1488.\n-      throw new BadRequestException(\"Changing email is not currently supported\");\n-    }\n-    if (updatedProfile.getUsername() != null\n-        && !updatedProfile.getUsername().equals(prevProfile.getUsername())) {\n-      // See RW-1488.\n-      throw new BadRequestException(\"Changing username is not supported\");\n+  }\n+\n+  private void validateAreaOfResearch(Profile profile) throws BadRequestException {\n+    if (StringUtils.isEmpty(profile.getAreaOfResearch())) {\n+      throw new BadRequestException(\"Research background cannot be empty\");\n     }\n   }\n \n-  private void validateStringLength(String field, String fieldName, int max, int min) {\n-    if (field == null) {\n-      throw new BadRequestException(String.format(\"%s cannot be left blank!\", fieldName));\n+  /**\n+   * Returns a list of PropertyChange entries from a diff that match either a field or any of its\n+   * subfields. For example, a pathPrefix of 'address' will match a field change for both 'address'\n+   * and for 'address.zipCode'.\n+   */\n+  private List<Change> getChangesWithPrefix(final Diff diff, final String pathPrefix) {\n+    return diff.getChanges(\n+        change -> {\n+          if (change instanceof PropertyChange) {\n+            return ((PropertyChange) change).getPropertyNameWithPath().startsWith(pathPrefix);\n+          } else {\n+            return false;\n+          }\n+        });\n+  }\n+\n+  /**\n+   * Validates a set of Profile changes by comparing the updated profile to the previous version.\n+   * Only fields that have changed are subject to validation.\n+   *\n+   * <p>If the previous version is null, the updated profile is presumed to be a new profile and all\n+   * validation rules are run. If both versions are non-null, only changed fields are validated.\n+   *\n+   * @param updatedProfile\n+   * @param prevProfile\n+   * @throws BadRequestException\n+   */\n+  public void validateProfile(Profile updatedProfile, Profile prevProfile)\n+      throws BadRequestException {\n+    cleanProfile(updatedProfile);\n+\n+    boolean isNewObject = prevProfile == null;\n+    Diff diff = javers.compare(prevProfile, updatedProfile);", "originalCommit": "c45e40cb5e11eae1756a48894c9a149f7e9d6b54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI4MTIwOQ==", "url": "https://github.com/all-of-us/workbench/pull/3734#discussion_r448281209", "bodyText": "Responded to a similar comment above \u2013 I took a look. My initial assessment was that it would have required some deep retooling to adapt the TargetProperty stuff to cover these exact use cases, and Javers was too fit-for-purpose to not use here.\nEspecially with the \"not boil the ocean\" principle in mind for this PR, this felt like the reasonable path.", "author": "gjuggler", "createdAt": "2020-07-01T10:51:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3OTM2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3OTk4Mg==", "url": "https://github.com/all-of-us/workbench/pull/3734#discussion_r448079982", "bodyText": "If we could avoid nullable parameters, that would be better. Optional works, but even optional parameters are discouraged.\nI think the breakdown is also a bit confusing, because validateProfile() calls cleanProfile(), which makes changes. I generally expect validate methods to just check something and either return a boolean or throw something.", "author": "jaycarlton", "createdAt": "2020-07-01T02:24:38Z", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -286,50 +287,132 @@ private void updateInstitutionalAffiliations(Profile updatedProfile, DbUser user\n     }\n   }\n \n-  private void validateUpdatedProfile(Profile updatedProfile, Profile prevProfile)\n-      throws BadRequestException {\n-    validateAndCleanProfile(updatedProfile);\n-    if (StringUtils.isEmpty(updatedProfile.getAreaOfResearch())) {\n-      throw new BadRequestException(\"Research background cannot be empty\");\n+  private void validateStringLength(String field, String fieldName, int max, int min) {\n+    if (field == null) {\n+      throw new BadRequestException(String.format(\"%s cannot be left blank!\", fieldName));\n+    }\n+    if (field.length() > max) {\n+      throw new BadRequestException(\n+          String.format(\"%s length exceeds character limit. (%d)\", fieldName, max));\n+    }\n+    if (field.length() < min) {\n+      if (min == 1) {\n+        throw new BadRequestException(String.format(\"%s cannot be left blank.\", fieldName));\n+      } else {\n+        throw new BadRequestException(\n+            String.format(\"%s is under character minimum. (%d)\", fieldName, min));\n+      }\n+    }\n+  }\n+\n+  private void validateUsername(Profile profile) throws BadRequestException {\n+    String username = profile.getUsername();\n+    if (username == null || username.length() < 3 || username.length() > 64) {\n+      throw new BadRequestException(\n+          \"Username should be at least 3 characters and not more than 64 characters\");\n     }\n-    Optional.ofNullable(updatedProfile.getAddress())\n+  }\n+\n+  private void validateContactEmail(Profile profile) throws BadRequestException {\n+    if (StringUtils.isEmpty(profile.getContactEmail())) {\n+      throw new BadRequestException(\"Contact email cannot be empty\");\n+    }\n+  }\n+\n+  private void validateGivenName(Profile profile) throws BadRequestException {\n+    validateStringLength(profile.getGivenName(), \"Given Name\", 80, 1);\n+  }\n+\n+  private void validateFamilyName(Profile profile) throws BadRequestException {\n+    validateStringLength(profile.getFamilyName(), \"Family Name\", 80, 1);\n+  }\n+\n+  private void validateAddress(Profile profile) throws BadRequestException {\n+    Optional.ofNullable(profile.getAddress())\n         .orElseThrow(() -> new BadRequestException(\"Address must not be empty\"));\n \n-    Address updatedProfileAddress = updatedProfile.getAddress();\n+    Address updatedProfileAddress = profile.getAddress();\n     if (StringUtils.isEmpty(updatedProfileAddress.getStreetAddress1())\n         || StringUtils.isEmpty(updatedProfileAddress.getCity())\n         || StringUtils.isEmpty(updatedProfileAddress.getState())\n         || StringUtils.isEmpty(updatedProfileAddress.getCountry())\n         || StringUtils.isEmpty(updatedProfileAddress.getZipCode())) {\n       throw new BadRequestException(\n-          \"Address cannot have empty street Address 1/city/state/country or Zip Code\");\n+          \"Address cannot have empty street address, city, state, country or zip code\");\n     }\n-    if (updatedProfile.getContactEmail() != null\n-        && !updatedProfile.getContactEmail().equals(prevProfile.getContactEmail())) {\n-      // See RW-1488.\n-      throw new BadRequestException(\"Changing email is not currently supported\");\n-    }\n-    if (updatedProfile.getUsername() != null\n-        && !updatedProfile.getUsername().equals(prevProfile.getUsername())) {\n-      // See RW-1488.\n-      throw new BadRequestException(\"Changing username is not supported\");\n+  }\n+\n+  private void validateAreaOfResearch(Profile profile) throws BadRequestException {\n+    if (StringUtils.isEmpty(profile.getAreaOfResearch())) {\n+      throw new BadRequestException(\"Research background cannot be empty\");\n     }\n   }\n \n-  private void validateStringLength(String field, String fieldName, int max, int min) {\n-    if (field == null) {\n-      throw new BadRequestException(String.format(\"%s cannot be left blank!\", fieldName));\n+  /**\n+   * Returns a list of PropertyChange entries from a diff that match either a field or any of its\n+   * subfields. For example, a pathPrefix of 'address' will match a field change for both 'address'\n+   * and for 'address.zipCode'.\n+   */\n+  private List<Change> getChangesWithPrefix(final Diff diff, final String pathPrefix) {\n+    return diff.getChanges(\n+        change -> {\n+          if (change instanceof PropertyChange) {\n+            return ((PropertyChange) change).getPropertyNameWithPath().startsWith(pathPrefix);\n+          } else {\n+            return false;\n+          }\n+        });\n+  }\n+\n+  /**\n+   * Validates a set of Profile changes by comparing the updated profile to the previous version.\n+   * Only fields that have changed are subject to validation.\n+   *\n+   * <p>If the previous version is null, the updated profile is presumed to be a new profile and all\n+   * validation rules are run. If both versions are non-null, only changed fields are validated.\n+   *\n+   * @param updatedProfile\n+   * @param prevProfile\n+   * @throws BadRequestException\n+   */\n+  public void validateProfile(Profile updatedProfile, Profile prevProfile)\n+      throws BadRequestException {\n+    cleanProfile(updatedProfile);\n+\n+    boolean isNewObject = prevProfile == null;", "originalCommit": "c45e40cb5e11eae1756a48894c9a149f7e9d6b54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI4MDA2NA==", "url": "https://github.com/all-of-us/workbench/pull/3734#discussion_r448280064", "bodyText": "I bumped cleanProfile out and added a separate validateNewProfile method. I can't identify any room for simplification beyond that. Javers aligned on a nullable 'previous' object for diffing a new instance, and they've clearly put some thought into this.", "author": "gjuggler", "createdAt": "2020-07-01T10:49:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3OTk4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA4MDYwOA==", "url": "https://github.com/all-of-us/workbench/pull/3734#discussion_r448080608", "bodyText": "Can we just add validation methods to the ProfileTargetProperty enum and cycle through those instead of putting a bunch of if's here? That way we won't have to remember to update them all.\nWhere we have\nenum class ProfileTargetProperty\nconstructor(override val propertyName: String, override val extractor: (Profile) -> String?) : ModelBackedTargetProperty<Profile>\n\nwe can just add another parameter like String? -> boolean\nYou could also add another interface for this like ValidatingTargetProperty<Profile>.\nThe downside is we have to make everything into a string.", "author": "jaycarlton", "createdAt": "2020-07-01T02:27:16Z", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -286,50 +287,132 @@ private void updateInstitutionalAffiliations(Profile updatedProfile, DbUser user\n     }\n   }\n \n-  private void validateUpdatedProfile(Profile updatedProfile, Profile prevProfile)\n-      throws BadRequestException {\n-    validateAndCleanProfile(updatedProfile);\n-    if (StringUtils.isEmpty(updatedProfile.getAreaOfResearch())) {\n-      throw new BadRequestException(\"Research background cannot be empty\");\n+  private void validateStringLength(String field, String fieldName, int max, int min) {\n+    if (field == null) {\n+      throw new BadRequestException(String.format(\"%s cannot be left blank!\", fieldName));\n+    }\n+    if (field.length() > max) {\n+      throw new BadRequestException(\n+          String.format(\"%s length exceeds character limit. (%d)\", fieldName, max));\n+    }\n+    if (field.length() < min) {\n+      if (min == 1) {\n+        throw new BadRequestException(String.format(\"%s cannot be left blank.\", fieldName));\n+      } else {\n+        throw new BadRequestException(\n+            String.format(\"%s is under character minimum. (%d)\", fieldName, min));\n+      }\n+    }\n+  }\n+", "originalCommit": "c45e40cb5e11eae1756a48894c9a149f7e9d6b54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3NzEwNA==", "url": "https://github.com/all-of-us/workbench/pull/3734#discussion_r448277104", "bodyText": "I did have an initial look, since they're definitely somewhat related use cases. But it felt like enough plumbing would be required that I checked to see what else was out there, and Javers ended up working well with surprisingly little adapter code required. Especially w.r.t. handling nested properties it seems pretty robust.\nAs a lesser point, one of the important things w.r.t. this validation is that we have meaningful error messages when validation fails. Having those error messages live within the service implementation felt appropriate.", "author": "gjuggler", "createdAt": "2020-07-01T10:43:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA4MDYwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA4MTIwMg==", "url": "https://github.com/all-of-us/workbench/pull/3734#discussion_r448081202", "bodyText": "Why not use && after the instanceof check?", "author": "jaycarlton", "createdAt": "2020-07-01T02:29:54Z", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -286,50 +287,132 @@ private void updateInstitutionalAffiliations(Profile updatedProfile, DbUser user\n     }\n   }\n \n-  private void validateUpdatedProfile(Profile updatedProfile, Profile prevProfile)\n-      throws BadRequestException {\n-    validateAndCleanProfile(updatedProfile);\n-    if (StringUtils.isEmpty(updatedProfile.getAreaOfResearch())) {\n-      throw new BadRequestException(\"Research background cannot be empty\");\n+  private void validateStringLength(String field, String fieldName, int max, int min) {\n+    if (field == null) {\n+      throw new BadRequestException(String.format(\"%s cannot be left blank!\", fieldName));\n+    }\n+    if (field.length() > max) {\n+      throw new BadRequestException(\n+          String.format(\"%s length exceeds character limit. (%d)\", fieldName, max));\n+    }\n+    if (field.length() < min) {\n+      if (min == 1) {\n+        throw new BadRequestException(String.format(\"%s cannot be left blank.\", fieldName));\n+      } else {\n+        throw new BadRequestException(\n+            String.format(\"%s is under character minimum. (%d)\", fieldName, min));\n+      }\n+    }\n+  }\n+\n+  private void validateUsername(Profile profile) throws BadRequestException {\n+    String username = profile.getUsername();\n+    if (username == null || username.length() < 3 || username.length() > 64) {\n+      throw new BadRequestException(\n+          \"Username should be at least 3 characters and not more than 64 characters\");\n     }\n-    Optional.ofNullable(updatedProfile.getAddress())\n+  }\n+\n+  private void validateContactEmail(Profile profile) throws BadRequestException {\n+    if (StringUtils.isEmpty(profile.getContactEmail())) {\n+      throw new BadRequestException(\"Contact email cannot be empty\");\n+    }\n+  }\n+\n+  private void validateGivenName(Profile profile) throws BadRequestException {\n+    validateStringLength(profile.getGivenName(), \"Given Name\", 80, 1);\n+  }\n+\n+  private void validateFamilyName(Profile profile) throws BadRequestException {\n+    validateStringLength(profile.getFamilyName(), \"Family Name\", 80, 1);\n+  }\n+\n+  private void validateAddress(Profile profile) throws BadRequestException {\n+    Optional.ofNullable(profile.getAddress())\n         .orElseThrow(() -> new BadRequestException(\"Address must not be empty\"));\n \n-    Address updatedProfileAddress = updatedProfile.getAddress();\n+    Address updatedProfileAddress = profile.getAddress();\n     if (StringUtils.isEmpty(updatedProfileAddress.getStreetAddress1())\n         || StringUtils.isEmpty(updatedProfileAddress.getCity())\n         || StringUtils.isEmpty(updatedProfileAddress.getState())\n         || StringUtils.isEmpty(updatedProfileAddress.getCountry())\n         || StringUtils.isEmpty(updatedProfileAddress.getZipCode())) {\n       throw new BadRequestException(\n-          \"Address cannot have empty street Address 1/city/state/country or Zip Code\");\n+          \"Address cannot have empty street address, city, state, country or zip code\");\n     }\n-    if (updatedProfile.getContactEmail() != null\n-        && !updatedProfile.getContactEmail().equals(prevProfile.getContactEmail())) {\n-      // See RW-1488.\n-      throw new BadRequestException(\"Changing email is not currently supported\");\n-    }\n-    if (updatedProfile.getUsername() != null\n-        && !updatedProfile.getUsername().equals(prevProfile.getUsername())) {\n-      // See RW-1488.\n-      throw new BadRequestException(\"Changing username is not supported\");\n+  }\n+\n+  private void validateAreaOfResearch(Profile profile) throws BadRequestException {\n+    if (StringUtils.isEmpty(profile.getAreaOfResearch())) {\n+      throw new BadRequestException(\"Research background cannot be empty\");\n     }\n   }\n \n-  private void validateStringLength(String field, String fieldName, int max, int min) {\n-    if (field == null) {\n-      throw new BadRequestException(String.format(\"%s cannot be left blank!\", fieldName));\n+  /**\n+   * Returns a list of PropertyChange entries from a diff that match either a field or any of its\n+   * subfields. For example, a pathPrefix of 'address' will match a field change for both 'address'\n+   * and for 'address.zipCode'.\n+   */\n+  private List<Change> getChangesWithPrefix(final Diff diff, final String pathPrefix) {\n+    return diff.getChanges(\n+        change -> {\n+          if (change instanceof PropertyChange) {", "originalCommit": "c45e40cb5e11eae1756a48894c9a149f7e9d6b54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3OTAzNA==", "url": "https://github.com/all-of-us/workbench/pull/3734#discussion_r448279034", "bodyText": "I'd been experimenting with some add'l logic and hadn't cleaned it up yet. Done.", "author": "gjuggler", "createdAt": "2020-07-01T10:47:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA4MTIwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA4MTQ1Nw==", "url": "https://github.com/all-of-us/workbench/pull/3734#discussion_r448081457", "bodyText": "Can you make a list of Strings and iterate over tit since it's the same condition really? Better yet, can you simply tell Javers not to look at these fields?", "author": "jaycarlton", "createdAt": "2020-07-01T02:30:49Z", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -286,50 +287,132 @@ private void updateInstitutionalAffiliations(Profile updatedProfile, DbUser user\n     }\n   }\n \n-  private void validateUpdatedProfile(Profile updatedProfile, Profile prevProfile)\n-      throws BadRequestException {\n-    validateAndCleanProfile(updatedProfile);\n-    if (StringUtils.isEmpty(updatedProfile.getAreaOfResearch())) {\n-      throw new BadRequestException(\"Research background cannot be empty\");\n+  private void validateStringLength(String field, String fieldName, int max, int min) {\n+    if (field == null) {\n+      throw new BadRequestException(String.format(\"%s cannot be left blank!\", fieldName));\n+    }\n+    if (field.length() > max) {\n+      throw new BadRequestException(\n+          String.format(\"%s length exceeds character limit. (%d)\", fieldName, max));\n+    }\n+    if (field.length() < min) {\n+      if (min == 1) {\n+        throw new BadRequestException(String.format(\"%s cannot be left blank.\", fieldName));\n+      } else {\n+        throw new BadRequestException(\n+            String.format(\"%s is under character minimum. (%d)\", fieldName, min));\n+      }\n+    }\n+  }\n+\n+  private void validateUsername(Profile profile) throws BadRequestException {\n+    String username = profile.getUsername();\n+    if (username == null || username.length() < 3 || username.length() > 64) {\n+      throw new BadRequestException(\n+          \"Username should be at least 3 characters and not more than 64 characters\");\n     }\n-    Optional.ofNullable(updatedProfile.getAddress())\n+  }\n+\n+  private void validateContactEmail(Profile profile) throws BadRequestException {\n+    if (StringUtils.isEmpty(profile.getContactEmail())) {\n+      throw new BadRequestException(\"Contact email cannot be empty\");\n+    }\n+  }\n+\n+  private void validateGivenName(Profile profile) throws BadRequestException {\n+    validateStringLength(profile.getGivenName(), \"Given Name\", 80, 1);\n+  }\n+\n+  private void validateFamilyName(Profile profile) throws BadRequestException {\n+    validateStringLength(profile.getFamilyName(), \"Family Name\", 80, 1);\n+  }\n+\n+  private void validateAddress(Profile profile) throws BadRequestException {\n+    Optional.ofNullable(profile.getAddress())\n         .orElseThrow(() -> new BadRequestException(\"Address must not be empty\"));\n \n-    Address updatedProfileAddress = updatedProfile.getAddress();\n+    Address updatedProfileAddress = profile.getAddress();\n     if (StringUtils.isEmpty(updatedProfileAddress.getStreetAddress1())\n         || StringUtils.isEmpty(updatedProfileAddress.getCity())\n         || StringUtils.isEmpty(updatedProfileAddress.getState())\n         || StringUtils.isEmpty(updatedProfileAddress.getCountry())\n         || StringUtils.isEmpty(updatedProfileAddress.getZipCode())) {\n       throw new BadRequestException(\n-          \"Address cannot have empty street Address 1/city/state/country or Zip Code\");\n+          \"Address cannot have empty street address, city, state, country or zip code\");\n     }\n-    if (updatedProfile.getContactEmail() != null\n-        && !updatedProfile.getContactEmail().equals(prevProfile.getContactEmail())) {\n-      // See RW-1488.\n-      throw new BadRequestException(\"Changing email is not currently supported\");\n-    }\n-    if (updatedProfile.getUsername() != null\n-        && !updatedProfile.getUsername().equals(prevProfile.getUsername())) {\n-      // See RW-1488.\n-      throw new BadRequestException(\"Changing username is not supported\");\n+  }\n+\n+  private void validateAreaOfResearch(Profile profile) throws BadRequestException {\n+    if (StringUtils.isEmpty(profile.getAreaOfResearch())) {\n+      throw new BadRequestException(\"Research background cannot be empty\");\n     }\n   }\n \n-  private void validateStringLength(String field, String fieldName, int max, int min) {\n-    if (field == null) {\n-      throw new BadRequestException(String.format(\"%s cannot be left blank!\", fieldName));\n+  /**\n+   * Returns a list of PropertyChange entries from a diff that match either a field or any of its\n+   * subfields. For example, a pathPrefix of 'address' will match a field change for both 'address'\n+   * and for 'address.zipCode'.\n+   */\n+  private List<Change> getChangesWithPrefix(final Diff diff, final String pathPrefix) {\n+    return diff.getChanges(\n+        change -> {\n+          if (change instanceof PropertyChange) {\n+            return ((PropertyChange) change).getPropertyNameWithPath().startsWith(pathPrefix);\n+          } else {\n+            return false;\n+          }\n+        });\n+  }\n+\n+  /**\n+   * Validates a set of Profile changes by comparing the updated profile to the previous version.\n+   * Only fields that have changed are subject to validation.\n+   *\n+   * <p>If the previous version is null, the updated profile is presumed to be a new profile and all\n+   * validation rules are run. If both versions are non-null, only changed fields are validated.\n+   *\n+   * @param updatedProfile\n+   * @param prevProfile\n+   * @throws BadRequestException\n+   */\n+  public void validateProfile(Profile updatedProfile, Profile prevProfile)\n+      throws BadRequestException {\n+    cleanProfile(updatedProfile);\n+\n+    boolean isNewObject = prevProfile == null;\n+    Diff diff = javers.compare(prevProfile, updatedProfile);\n+\n+    if (!getChangesWithPrefix(diff, \"username\").isEmpty() || isNewObject) {\n+      validateUsername(updatedProfile);\n     }\n-    if (field.length() > max) {\n-      throw new BadRequestException(\n-          String.format(\"%s length exceeds character limit. (%d)\", fieldName, max));\n+    if (!getChangesWithPrefix(diff, \"contactEmail\").isEmpty() || isNewObject) {\n+      validateContactEmail(updatedProfile);\n     }\n-    if (field.length() < min) {\n-      if (min == 1) {\n-        throw new BadRequestException(String.format(\"%s cannot be left blank.\", fieldName));\n-      } else {\n-        throw new BadRequestException(\n-            String.format(\"%s is under character minimum. (%d)\", fieldName, min));\n+    if (!getChangesWithPrefix(diff, \"givenName\").isEmpty() || isNewObject) {\n+      validateGivenName(updatedProfile);\n+    }\n+    if (!getChangesWithPrefix(diff, \"familyName\").isEmpty() || isNewObject) {\n+      validateFamilyName(updatedProfile);\n+    }\n+    if (!getChangesWithPrefix(diff, \"address\").isEmpty() || isNewObject) {\n+      validateAddress(updatedProfile);\n+    }\n+    if (!getChangesWithPrefix(diff, \"areaOfResearch\").isEmpty() || isNewObject) {\n+      validateAreaOfResearch(updatedProfile);\n+    }\n+    if (!getChangesWithPrefix(diff, \"verifiedInstitutionalAffiliation\").isEmpty() || isNewObject) {\n+      validateInstitutionalAffiliation(updatedProfile);\n+    }\n+\n+    if (!isNewObject) {\n+      // We disallow changes in certain fields.\n+      if (!getChangesWithPrefix(diff, \"username\").isEmpty()) {", "originalCommit": "c45e40cb5e11eae1756a48894c9a149f7e9d6b54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI4MTQ5MA==", "url": "https://github.com/all-of-us/workbench/pull/3734#discussion_r448281490", "bodyText": "I'm not sure what you mean here. We definitely do want Javers to check these fields, so we can throw an error when they've changed.", "author": "gjuggler", "createdAt": "2020-07-01T10:52:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA4MTQ1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1MDgzOA==", "url": "https://github.com/all-of-us/workbench/pull/3734#discussion_r448550838", "bodyText": "Oh, I was thinking we only wrote fields that changed. nvm.", "author": "jaycarlton", "createdAt": "2020-07-01T18:43:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA4MTQ1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA4MTgxNg==", "url": "https://github.com/all-of-us/workbench/pull/3734#discussion_r448081816", "bodyText": "It's easier to interpret and maintain if the fields look more like real data. If they're all asdf, we won't catch errors that swap them.\nIt's also much easier to pick up how the class is supposed to be used if there's recognizable state in it.", "author": "jaycarlton", "createdAt": "2020-07-01T02:32:25Z", "path": "api/src/test/java/org/pmiops/workbench/profile/ProfileServiceTest.java", "diffHunk": "@@ -31,22 +35,52 @@\n import org.pmiops.workbench.institution.VerifiedInstitutionalAffiliationMapper;\n import org.pmiops.workbench.institution.VerifiedInstitutionalAffiliationMapperImpl;\n import org.pmiops.workbench.institution.deprecated.InstitutionalAffiliationMapperImpl;\n+import org.pmiops.workbench.model.Address;\n import org.pmiops.workbench.model.InstitutionalRole;\n import org.pmiops.workbench.model.Profile;\n import org.pmiops.workbench.model.VerifiedInstitutionalAffiliation;\n import org.pmiops.workbench.test.FakeClock;\n import org.pmiops.workbench.utils.mappers.CommonMappers;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n import org.springframework.boot.test.context.TestConfiguration;\n import org.springframework.boot.test.mock.mockito.MockBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Scope;\n import org.springframework.test.context.junit4.SpringRunner;\n \n @RunWith(SpringRunner.class)\n @DataJpaTest\n public class ProfileServiceTest {\n+  private static final FakeClock CLOCK = new FakeClock(Instant.parse(\"2000-01-01T00:00:00.00Z\"));\n+\n+  private static final DbInstitution BROAD_INSTITUTION =\n+      new DbInstitution().setShortName(\"Broad\").setDisplayName(\"The Broad Institute\");\n+\n+  private static final VerifiedInstitutionalAffiliation BROAD_AFFILIATION =\n+      new VerifiedInstitutionalAffiliation()\n+          .institutionShortName(\"Broad\")\n+          .institutionDisplayName(\"The Broad Institute\")\n+          .institutionalRoleEnum(InstitutionalRole.ADMIN);\n+\n+  private static final Profile VALID_PROFILE =\n+      new Profile()\n+          .username(\"jdoe123\")\n+          .contactEmail(\"jdoe123@gmail.com\")\n+          .address(\n+              new Address()", "originalCommit": "c45e40cb5e11eae1756a48894c9a149f7e9d6b54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI4Mjg1MA==", "url": "https://github.com/all-of-us/workbench/pull/3734#discussion_r448282850", "bodyText": "Done", "author": "gjuggler", "createdAt": "2020-07-01T10:55:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA4MTgxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA4Mjc5NA==", "url": "https://github.com/all-of-us/workbench/pull/3734#discussion_r448082794", "bodyText": "Is there not a way to associate a schema with a Diff? It seems somewhat risky (in terms of unintended changes in behavior) to use reflection, though I can see the other argument.", "author": "jaycarlton", "createdAt": "2020-07-01T02:36:06Z", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -286,50 +287,132 @@ private void updateInstitutionalAffiliations(Profile updatedProfile, DbUser user\n     }\n   }\n \n-  private void validateUpdatedProfile(Profile updatedProfile, Profile prevProfile)\n-      throws BadRequestException {\n-    validateAndCleanProfile(updatedProfile);\n-    if (StringUtils.isEmpty(updatedProfile.getAreaOfResearch())) {\n-      throw new BadRequestException(\"Research background cannot be empty\");\n+  private void validateStringLength(String field, String fieldName, int max, int min) {\n+    if (field == null) {\n+      throw new BadRequestException(String.format(\"%s cannot be left blank!\", fieldName));\n+    }\n+    if (field.length() > max) {\n+      throw new BadRequestException(\n+          String.format(\"%s length exceeds character limit. (%d)\", fieldName, max));\n+    }\n+    if (field.length() < min) {\n+      if (min == 1) {\n+        throw new BadRequestException(String.format(\"%s cannot be left blank.\", fieldName));\n+      } else {\n+        throw new BadRequestException(\n+            String.format(\"%s is under character minimum. (%d)\", fieldName, min));\n+      }\n+    }\n+  }\n+\n+  private void validateUsername(Profile profile) throws BadRequestException {\n+    String username = profile.getUsername();\n+    if (username == null || username.length() < 3 || username.length() > 64) {\n+      throw new BadRequestException(\n+          \"Username should be at least 3 characters and not more than 64 characters\");\n     }\n-    Optional.ofNullable(updatedProfile.getAddress())\n+  }\n+\n+  private void validateContactEmail(Profile profile) throws BadRequestException {\n+    if (StringUtils.isEmpty(profile.getContactEmail())) {\n+      throw new BadRequestException(\"Contact email cannot be empty\");\n+    }\n+  }\n+\n+  private void validateGivenName(Profile profile) throws BadRequestException {\n+    validateStringLength(profile.getGivenName(), \"Given Name\", 80, 1);\n+  }\n+\n+  private void validateFamilyName(Profile profile) throws BadRequestException {\n+    validateStringLength(profile.getFamilyName(), \"Family Name\", 80, 1);\n+  }\n+\n+  private void validateAddress(Profile profile) throws BadRequestException {\n+    Optional.ofNullable(profile.getAddress())\n         .orElseThrow(() -> new BadRequestException(\"Address must not be empty\"));\n \n-    Address updatedProfileAddress = updatedProfile.getAddress();\n+    Address updatedProfileAddress = profile.getAddress();\n     if (StringUtils.isEmpty(updatedProfileAddress.getStreetAddress1())\n         || StringUtils.isEmpty(updatedProfileAddress.getCity())\n         || StringUtils.isEmpty(updatedProfileAddress.getState())\n         || StringUtils.isEmpty(updatedProfileAddress.getCountry())\n         || StringUtils.isEmpty(updatedProfileAddress.getZipCode())) {\n       throw new BadRequestException(\n-          \"Address cannot have empty street Address 1/city/state/country or Zip Code\");\n+          \"Address cannot have empty street address, city, state, country or zip code\");\n     }\n-    if (updatedProfile.getContactEmail() != null\n-        && !updatedProfile.getContactEmail().equals(prevProfile.getContactEmail())) {\n-      // See RW-1488.\n-      throw new BadRequestException(\"Changing email is not currently supported\");\n-    }\n-    if (updatedProfile.getUsername() != null\n-        && !updatedProfile.getUsername().equals(prevProfile.getUsername())) {\n-      // See RW-1488.\n-      throw new BadRequestException(\"Changing username is not supported\");\n+  }\n+\n+  private void validateAreaOfResearch(Profile profile) throws BadRequestException {\n+    if (StringUtils.isEmpty(profile.getAreaOfResearch())) {\n+      throw new BadRequestException(\"Research background cannot be empty\");\n     }\n   }\n \n-  private void validateStringLength(String field, String fieldName, int max, int min) {\n-    if (field == null) {\n-      throw new BadRequestException(String.format(\"%s cannot be left blank!\", fieldName));\n+  /**\n+   * Returns a list of PropertyChange entries from a diff that match either a field or any of its\n+   * subfields. For example, a pathPrefix of 'address' will match a field change for both 'address'\n+   * and for 'address.zipCode'.\n+   */\n+  private List<Change> getChangesWithPrefix(final Diff diff, final String pathPrefix) {", "originalCommit": "c45e40cb5e11eae1756a48894c9a149f7e9d6b54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3ODg2OA==", "url": "https://github.com/all-of-us/workbench/pull/3734#discussion_r448278868", "bodyText": "There's all sorts of configuration possible, but the non-configured flow worked well enough here. The use of strings to identify changed fields is the riskiest part, but (1) those fields are part of our API model and shouldn't change much, and (2) each validation flow is covered by unit tests.", "author": "gjuggler", "createdAt": "2020-07-01T10:47:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA4Mjc5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMyMDU2Nw==", "url": "https://github.com/all-of-us/workbench/pull/3734#discussion_r448320567", "bodyText": "I thought of a couple of things to be careful about would be any dynamic properties that return different results every time or properties derived from other properties, which would be double-evaluated. Neiither are an issue for a simple codegen'd model class I suppose.", "author": "jaycarlton", "createdAt": "2020-07-01T12:13:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA4Mjc5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA4Mjg2OA==", "url": "https://github.com/all-of-us/workbench/pull/3734#discussion_r448082868", "bodyText": "I like the name change. It makes expect changes.\nI would prefer a more immutable style, though, where we take in a profile and return a new one, especially since these aren't ORM objects.", "author": "jaycarlton", "createdAt": "2020-07-01T02:36:19Z", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -227,23 +235,16 @@ public void updateProfileForUser(DbUser user, Profile updatedProfile, Profile pr\n     profileAuditor.fireUpdateAction(previousProfile, appliedUpdatedProfile);\n   }\n \n-  public void validateAndCleanProfile(Profile profile) throws BadRequestException {\n-    // Validation steps, which yield a BadRequestException if errors are found.\n-    String userName = profile.getUsername();\n-    if (userName == null || userName.length() < 3 || userName.length() > 64) {\n-      throw new BadRequestException(\n-          \"Username should be at least 3 characters and not more than 64 characters\");\n-    }\n-    validateStringLength(profile.getGivenName(), \"Given Name\", 80, 1);\n-    validateStringLength(profile.getFamilyName(), \"Family Name\", 80, 1);\n-\n+  public void cleanProfile(Profile profile) throws BadRequestException {", "originalCommit": "c45e40cb5e11eae1756a48894c9a149f7e9d6b54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3NDgwMg==", "url": "https://github.com/all-of-us/workbench/pull/3734#discussion_r448274802", "bodyText": "If we had a Profile.clone method I'd probably have done that. Too much code without it (and too much risk of missing something when hand-rolling the clone). Maybe there's something Swagger-codegen can be improved to do (or already has added in more recent versions?)", "author": "gjuggler", "createdAt": "2020-07-01T10:38:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA4Mjg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1MTM0Mw==", "url": "https://github.com/all-of-us/workbench/pull/3734#discussion_r448551343", "bodyText": "We can  make a cloneProfile() easily with MapStruct. You just have a method that takes and returns a Profile.", "author": "jaycarlton", "createdAt": "2020-07-01T18:44:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA4Mjg2OA=="}], "type": "inlineReview"}, {"oid": "f97ce62cbc24f7eb5a4b32d543443d50c9290531", "url": "https://github.com/all-of-us/workbench/commit/f97ce62cbc24f7eb5a4b32d543443d50c9290531", "message": "First cut at more flexible profile validation.", "committedDate": "2020-07-01T18:01:39Z", "type": "commit"}, {"oid": "c621d459561cc944e90b34e022469606c15f5681", "url": "https://github.com/all-of-us/workbench/commit/c621d459561cc944e90b34e022469606c15f5681", "message": "Gradle build fix", "committedDate": "2020-07-01T18:01:39Z", "type": "commit"}, {"oid": "e4bc2b225f902ed8b369783fda22b05491c467dd", "url": "https://github.com/all-of-us/workbench/commit/e4bc2b225f902ed8b369783fda22b05491c467dd", "message": "Tiny doc addition", "committedDate": "2020-07-01T18:01:40Z", "type": "commit"}, {"oid": "fbf4e32d12f61eee83d973d0b19facad8ab87650", "url": "https://github.com/all-of-us/workbench/commit/fbf4e32d12f61eee83d973d0b19facad8ab87650", "message": "Fix controller tests with some diff improvements.", "committedDate": "2020-07-01T18:01:40Z", "type": "commit"}, {"oid": "a3a51b9e94df6b84bcc275676708f40f57a95cda", "url": "https://github.com/all-of-us/workbench/commit/a3a51b9e94df6b84bcc275676708f40f57a95cda", "message": "PR feedback", "committedDate": "2020-07-01T18:01:40Z", "type": "commit"}, {"oid": "9284eee24093bd0bd2213e805719b2ec45cbfa41", "url": "https://github.com/all-of-us/workbench/commit/9284eee24093bd0bd2213e805719b2ec45cbfa41", "message": "Test fixes", "committedDate": "2020-07-01T18:01:41Z", "type": "commit"}, {"oid": "d4e5e87e13fa8536f60742af9faad0a6dfd50c31", "url": "https://github.com/all-of-us/workbench/commit/d4e5e87e13fa8536f60742af9faad0a6dfd50c31", "message": "Populate an empty Address field in cleanProfile if null", "committedDate": "2020-07-01T18:01:41Z", "type": "commit"}, {"oid": "6ab9486d564678ab1a90bc3f47bc47e6197f2f06", "url": "https://github.com/all-of-us/workbench/commit/6ab9486d564678ab1a90bc3f47bc47e6197f2f06", "message": "Add test for updateProfileForUser method.", "committedDate": "2020-07-01T18:01:41Z", "type": "commit"}, {"oid": "6e57e2cd3938cec4ad29a9a1c1f7df715751825c", "url": "https://github.com/all-of-us/workbench/commit/6e57e2cd3938cec4ad29a9a1c1f7df715751825c", "message": "Handle null address.", "committedDate": "2020-07-01T18:01:42Z", "type": "commit"}, {"oid": "6e57e2cd3938cec4ad29a9a1c1f7df715751825c", "url": "https://github.com/all-of-us/workbench/commit/6e57e2cd3938cec4ad29a9a1c1f7df715751825c", "message": "Handle null address.", "committedDate": "2020-07-01T18:01:42Z", "type": "forcePushed"}, {"oid": "1f8d199c43589f819f40479d155de44cdb775c6d", "url": "https://github.com/all-of-us/workbench/commit/1f8d199c43589f819f40479d155de44cdb775c6d", "message": "Remove extra println", "committedDate": "2020-07-01T18:49:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1NTA0Ng==", "url": "https://github.com/all-of-us/workbench/pull/3734#discussion_r448555046", "bodyText": "nit: we're alphabetizing these lists now (also 2 spots below)", "author": "jmthibault79", "createdAt": "2020-07-01T18:52:04Z", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -53,6 +60,7 @@\n   private final UserTermsOfServiceDao userTermsOfServiceDao;\n   private final VerifiedInstitutionalAffiliationDao verifiedInstitutionalAffiliationDao;\n   private final VerifiedInstitutionalAffiliationMapper verifiedInstitutionalAffiliationMapper;\n+  private final Javers javers;", "originalCommit": "1f8d199c43589f819f40479d155de44cdb775c6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU2NDk3NQ==", "url": "https://github.com/all-of-us/workbench/pull/3734#discussion_r448564975", "bodyText": "I lurve alphabetization \u2013\u00a0dunno why I didn't notice we're doing that here.", "author": "gjuggler", "createdAt": "2020-07-01T19:12:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1NTA0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1NjQxNw==", "url": "https://github.com/all-of-us/workbench/pull/3734#discussion_r448556417", "bodyText": "nit - ifPresent(DbAddress::setUser)", "author": "jmthibault79", "createdAt": "2020-07-01T18:54:48Z", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -185,31 +210,30 @@ public void updateProfileForUser(DbUser user, Profile updatedProfile, Profile pr\n     user.setAreaOfResearch(updatedProfile.getAreaOfResearch());\n     user.setProfessionalUrl(updatedProfile.getProfessionalUrl());\n     user.setAddress(addressMapper.addressToDbAddress(updatedProfile.getAddress()));\n-    user.getAddress().setUser(user);\n+    // Address may be null for users who were created before address validation was in place. See\n+    // RW-5139.\n+    Optional.ofNullable(user.getAddress()).ifPresent(address -> address.setUser(user));", "originalCommit": "1f8d199c43589f819f40479d155de44cdb775c6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU2NjUxNg==", "url": "https://github.com/all-of-us/workbench/pull/3734#discussion_r448566516", "bodyText": "I don't think this quite works since the ifPresent subject is what we want to call the method on, not the argument.", "author": "gjuggler", "createdAt": "2020-07-01T19:16:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1NjQxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU5ODk5Ng==", "url": "https://github.com/all-of-us/workbench/pull/3734#discussion_r448598996", "bodyText": "oops.  yes.", "author": "jmthibault79", "createdAt": "2020-07-01T20:28:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1NjQxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1OTkyNw==", "url": "https://github.com/all-of-us/workbench/pull/3734#discussion_r448559927", "bodyText": "I often trip up on @MockBean vs @Autowired vs @import ... do we have a doc?\nI have probably asked this before.", "author": "jmthibault79", "createdAt": "2020-07-01T19:02:12Z", "path": "api/src/test/java/org/pmiops/workbench/profile/ProfileServiceTest.java", "diffHunk": "@@ -55,12 +92,12 @@\n   @MockBean\n   private VerifiedInstitutionalAffiliationMapper mockVerifiedInstitutionalAffiliationMapper;\n \n-  private static final FakeClock CLOCK = new FakeClock(Instant.parse(\"2000-01-01T00:00:00.00Z\"));\n+  @MockBean private VerifiedInstitutionalAffiliationDao mockVerifiedInstitutionalAffiliationDao;", "originalCommit": "1f8d199c43589f819f40479d155de44cdb775c6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU2OTc0Mg==", "url": "https://github.com/all-of-us/workbench/pull/3734#discussion_r448569742", "bodyText": "Eek, yeah it would be great to have some docs on this. I've definitely developed an aesthetic that seems to work reliably for most cases, it'll be good to capture that. Tracked in https://precisionmedicineinitiative.atlassian.net/browse/RW-5159", "author": "gjuggler", "createdAt": "2020-07-01T19:23:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1OTkyNw=="}], "type": "inlineReview"}, {"oid": "db2154d0d9e88231c8dde173af4a847982c14b17", "url": "https://github.com/all-of-us/workbench/commit/db2154d0d9e88231c8dde173af4a847982c14b17", "message": "Alphabetize", "committedDate": "2020-07-01T19:23:54Z", "type": "commit"}]}