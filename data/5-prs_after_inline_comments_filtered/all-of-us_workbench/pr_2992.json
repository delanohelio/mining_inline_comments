{"pr_number": 2992, "pr_title": "[RW-2253] [risk=low] Add inbound API to handle SumoLogic egress alerts", "pr_createdAt": "2020-01-10T14:28:01Z", "pr_url": "https://github.com/all-of-us/workbench/pull/2992", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM3NjQ3NA==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r365376474", "bodyText": "I'd externalize the prefix all-of-us-. I don't know from this statement what its scope is.\nAlso, one pet peeve I have is that if we're using hyphens to delineate subparts of an identifier, then it should be allofus-. Likely way too late.", "author": "jaycarlton", "createdAt": "2020-01-10T18:45:51Z", "path": "api/src/main/java/org/pmiops/workbench/api/ClusterController.java", "diffHunk": "@@ -272,7 +272,13 @@\n     return ResponseEntity.ok(new EmptyResponse());\n   }\n \n-  private static String clusterNameForUser(DbUser user) {\n+  /**\n+   * Returns a name for the VM / cluster to be created for a given user in the workspace.\n+   *\n+   * @param user\n+   * @return\n+   */\n+  public static String clusterNameForUser(DbUser user) {", "originalCommit": "9fb336e7a3ae0b034d938078d06a3087d28f6820", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQxMjYwNg==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r365412606", "bodyText": "What do you mean by externalize? Bump to a constant in this file, out to a separate class, or all the way out to WorkbenchConfig?\nI'm willing to find a separate class to home it in, to at least protect against circular dependencies.\nAnything more probably isn't worth the effort. We haven't changed this value for the ~lifetime of the project, so I don't think it's a particularly sensitive constant.", "author": "gjuggler", "createdAt": "2020-01-10T20:14:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM3NjQ3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM3NzI3Nw==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r365377277", "bodyText": "why are we screaming the parameter name?", "author": "jaycarlton", "createdAt": "2020-01-10T18:47:38Z", "path": "api/src/main/java/org/pmiops/workbench/api/SumoLogicController.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.pmiops.workbench.api;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import org.pmiops.workbench.actionaudit.auditors.SumoLogicAuditor;\n+import org.pmiops.workbench.exceptions.BadRequestException;\n+import org.pmiops.workbench.exceptions.UnauthorizedException;\n+import org.pmiops.workbench.google.CloudStorageService;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.pmiops.workbench.model.EgressEventRequest;\n+import org.pmiops.workbench.model.EmptyResponse;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+public class SumoLogicController implements SumoLogicApiDelegate {\n+\n+  public static final String SUMOLOGIC_KEY_FILENAME = \"inbound-sumologic-keys.txt\";\n+\n+  private static final Logger log = Logger.getLogger(SumoLogicController.class.getName());\n+  private final SumoLogicAuditor sumoLogicAuditor;\n+  private final CloudStorageService cloudStorageService;\n+\n+  @Autowired\n+  SumoLogicController(SumoLogicAuditor sumoLogicAuditor, CloudStorageService cloudStorageService) {\n+    this.sumoLogicAuditor = sumoLogicAuditor;\n+    this.cloudStorageService = cloudStorageService;\n+  }\n+\n+  @Override\n+  public ResponseEntity<EmptyResponse> logEgressEvent(\n+      String X_API_KEY, EgressEventRequest request) {", "originalCommit": "9fb336e7a3ae0b034d938078d06a3087d28f6820", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQxMjkyNQ==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r365412925", "bodyText": "Swagger-codegen is choosing the parameter naming here \u2013\u00a0it's based on what I used in the YAML file. It felt more appropriate to use the traditional UPPERCASE_HEADER casing over there, so... meh.", "author": "gjuggler", "createdAt": "2020-01-10T20:15:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM3NzI3Nw=="}], "type": "inlineReview"}, {"oid": "52c7af7fed27b2c8a09e26b20466088693e1415c", "url": "https://github.com/all-of-us/workbench/commit/52c7af7fed27b2c8a09e26b20466088693e1415c", "message": "Add an API for receiving inbound SumoLogic events and logging action audit events.", "committedDate": "2020-01-16T22:00:50Z", "type": "commit"}, {"oid": "790ec977e86e666ffc0e04f512a523048de43e29", "url": "https://github.com/all-of-us/workbench/commit/790ec977e86e666ffc0e04f512a523048de43e29", "message": "Add API key authorization.", "committedDate": "2020-01-16T22:00:50Z", "type": "commit"}, {"oid": "dae6aa487c96c5394cdb688a7bb266cb5adfcf3b", "url": "https://github.com/all-of-us/workbench/commit/dae6aa487c96c5394cdb688a7bb266cb5adfcf3b", "message": "Fix formatting.", "committedDate": "2020-01-16T22:00:50Z", "type": "commit"}, {"oid": "365e14f7203f3d4ab5f41fa34183a6d4f50d3651", "url": "https://github.com/all-of-us/workbench/commit/365e14f7203f3d4ab5f41fa34183a6d4f50d3651", "message": "Rename API key filename for clarity.", "committedDate": "2020-01-16T22:00:50Z", "type": "commit"}, {"oid": "f34aa3f52653cae84a3daa307df94f04a5e07292", "url": "https://github.com/all-of-us/workbench/commit/f34aa3f52653cae84a3daa307df94f04a5e07292", "message": "Remove unnecessary import of non-test auditing beans.", "committedDate": "2020-01-16T22:00:50Z", "type": "commit"}, {"oid": "d2cb698da599d4d28afa82ceb6de3d6e15a8ef15", "url": "https://github.com/all-of-us/workbench/commit/d2cb698da599d4d28afa82ceb6de3d6e15a8ef15", "message": "Import the correct test config class.", "committedDate": "2020-01-16T22:00:50Z", "type": "commit"}, {"oid": "c72cfa2c4599920ea9d136cfd2073487f9ccac81", "url": "https://github.com/all-of-us/workbench/commit/c72cfa2c4599920ea9d136cfd2073487f9ccac81", "message": "Fix file formatting.", "committedDate": "2020-01-16T22:00:50Z", "type": "commit"}, {"oid": "8c166c21b74a92a1080adf56fb4c0a6afb4ebd63", "url": "https://github.com/all-of-us/workbench/commit/8c166c21b74a92a1080adf56fb4c0a6afb4ebd63", "message": "Add egress_mib_threshold to API signature.", "committedDate": "2020-01-16T22:00:50Z", "type": "commit"}, {"oid": "7003c938a6c25213150b493e053bcdb3a7810eb4", "url": "https://github.com/all-of-us/workbench/commit/7003c938a6c25213150b493e053bcdb3a7810eb4", "message": "Fix Swagger merge error.", "committedDate": "2020-01-16T22:00:50Z", "type": "commit"}, {"oid": "7d5f38eef661bbbaf621fa36b318dfbeb62ca7a1", "url": "https://github.com/all-of-us/workbench/commit/7d5f38eef661bbbaf621fa36b318dfbeb62ca7a1", "message": "Comments and refactors while previewing the diff in GitHub.", "committedDate": "2020-01-16T22:00:50Z", "type": "commit"}, {"oid": "23aa92e0775fd299f88072cc207494a7da80cd5a", "url": "https://github.com/all-of-us/workbench/commit/23aa92e0775fd299f88072cc207494a7da80cd5a", "message": "Add controller tests", "committedDate": "2020-01-16T22:00:50Z", "type": "commit"}, {"oid": "ca91f87b0cf806ee4718f0c41cbf0e8861c34fff", "url": "https://github.com/all-of-us/workbench/commit/ca91f87b0cf806ee4718f0c41cbf0e8861c34fff", "message": "Change how comments are handled.", "committedDate": "2020-01-16T22:01:50Z", "type": "commit"}, {"oid": "9e06a78c3b05edc0697d8ce54b02246bba054435", "url": "https://github.com/all-of-us/workbench/commit/9e06a78c3b05edc0697d8ce54b02246bba054435", "message": "Add flag values to config JSON.", "committedDate": "2020-01-16T22:03:14Z", "type": "commit"}, {"oid": "1d0f988ad163b5075cfdb90f4febaba13db7d7c8", "url": "https://github.com/all-of-us/workbench/commit/1d0f988ad163b5075cfdb90f4febaba13db7d7c8", "message": "Change how high-egress events are logged to the audit system.", "committedDate": "2020-01-16T22:03:14Z", "type": "commit"}, {"oid": "1d0f988ad163b5075cfdb90f4febaba13db7d7c8", "url": "https://github.com/all-of-us/workbench/commit/1d0f988ad163b5075cfdb90f4febaba13db7d7c8", "message": "Change how high-egress events are logged to the audit system.", "committedDate": "2020-01-16T22:03:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY5NDY4MA==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r367694680", "bodyText": "I'd make this a per-env property most likely. Can we simulate the events on Test and Local?", "author": "jaycarlton", "createdAt": "2020-01-16T23:03:26Z", "path": "api/src/main/java/org/pmiops/workbench/api/SumoLogicController.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package org.pmiops.workbench.api;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.actionaudit.auditors.SumoLogicAuditor;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.exceptions.BadRequestException;\n+import org.pmiops.workbench.exceptions.UnauthorizedException;\n+import org.pmiops.workbench.google.CloudStorageService;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.pmiops.workbench.model.EgressEventRequest;\n+import org.pmiops.workbench.model.EmptyResponse;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+public class SumoLogicController implements SumoLogicApiDelegate {\n+\n+  public static final String SUMOLOGIC_KEY_FILENAME = \"inbound-sumologic-keys.txt\";", "originalCommit": "1d0f988ad163b5075cfdb90f4febaba13db7d7c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0Mzc2NA==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r368043764", "bodyText": "For all other files in the credentials bucket, the filename is constant across all environments. It would be inconsistent to break from that pattern.\n(Note: I am breaking with an existing pattern, where CloudStorageService houses the filename constants pointing to where each credential type lives. CH had made a point in my GoogleCredentials PR that that sort of stuff really doesn't belong in the cloud storage service \u2013\u00a0which I agree with!)", "author": "gjuggler", "createdAt": "2020-01-17T17:10:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY5NDY4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY5NTA3Nw==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r367695077", "bodyText": "Should this just be a no-op with a warning?", "author": "jaycarlton", "createdAt": "2020-01-16T23:04:52Z", "path": "api/src/main/java/org/pmiops/workbench/api/SumoLogicController.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package org.pmiops.workbench.api;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.actionaudit.auditors.SumoLogicAuditor;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.exceptions.BadRequestException;\n+import org.pmiops.workbench.exceptions.UnauthorizedException;\n+import org.pmiops.workbench.google.CloudStorageService;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.pmiops.workbench.model.EgressEventRequest;\n+import org.pmiops.workbench.model.EmptyResponse;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+public class SumoLogicController implements SumoLogicApiDelegate {\n+\n+  public static final String SUMOLOGIC_KEY_FILENAME = \"inbound-sumologic-keys.txt\";\n+\n+  private static final Logger log = Logger.getLogger(SumoLogicController.class.getName());\n+  private final SumoLogicAuditor sumoLogicAuditor;\n+  private final CloudStorageService cloudStorageService;\n+  private final Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  @Autowired\n+  SumoLogicController(\n+      SumoLogicAuditor sumoLogicAuditor,\n+      CloudStorageService cloudStorageService,\n+      Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.sumoLogicAuditor = sumoLogicAuditor;\n+    this.cloudStorageService = cloudStorageService;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  @Override\n+  public ResponseEntity<EmptyResponse> logEgressEvent(\n+      String X_API_KEY, EgressEventRequest request) {\n+    if (!workbenchConfigProvider.get().featureFlags.enableSumoLogicEventHandling) {", "originalCommit": "1d0f988ad163b5075cfdb90f4febaba13db7d7c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyMTM1Mg==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r367721352", "bodyText": "Nvm, it's a controller method, so this makes sense.", "author": "jaycarlton", "createdAt": "2020-01-17T00:45:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY5NTA3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY5NTEzOA==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r367695138", "bodyText": "nit: check wrapping", "author": "jaycarlton", "createdAt": "2020-01-16T23:05:07Z", "path": "api/src/main/java/org/pmiops/workbench/api/SumoLogicController.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package org.pmiops.workbench.api;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.actionaudit.auditors.SumoLogicAuditor;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.exceptions.BadRequestException;\n+import org.pmiops.workbench.exceptions.UnauthorizedException;\n+import org.pmiops.workbench.google.CloudStorageService;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.pmiops.workbench.model.EgressEventRequest;\n+import org.pmiops.workbench.model.EmptyResponse;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+public class SumoLogicController implements SumoLogicApiDelegate {\n+\n+  public static final String SUMOLOGIC_KEY_FILENAME = \"inbound-sumologic-keys.txt\";\n+\n+  private static final Logger log = Logger.getLogger(SumoLogicController.class.getName());\n+  private final SumoLogicAuditor sumoLogicAuditor;\n+  private final CloudStorageService cloudStorageService;\n+  private final Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  @Autowired\n+  SumoLogicController(\n+      SumoLogicAuditor sumoLogicAuditor,\n+      CloudStorageService cloudStorageService,\n+      Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.sumoLogicAuditor = sumoLogicAuditor;\n+    this.cloudStorageService = cloudStorageService;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  @Override\n+  public ResponseEntity<EmptyResponse> logEgressEvent(\n+      String X_API_KEY, EgressEventRequest request) {\n+    if (!workbenchConfigProvider.get().featureFlags.enableSumoLogicEventHandling) {\n+      throw new BadRequestException(\"SumoLogic event handling is disabled in this environment.\");\n+    }\n+\n+    authorizeRequest(X_API_KEY, request);\n+\n+    try {\n+      // The \"eventsJsonArray\" field is a JSON-formatted array of EgressEvent JSON objects. Parse\n+      // this", "originalCommit": "1d0f988ad163b5075cfdb90f4febaba13db7d7c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0NDQ1OQ==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r368044459", "bodyText": "Done. Spotless might have done something weird here.", "author": "gjuggler", "createdAt": "2020-01-17T17:11:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY5NTEzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyMjI4Mw==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r367722283", "bodyText": "What do you think about naming this more broadly as ExternalEventReportingController? If not, I'd still drop the SumoLogic and call it EgressViolationController or something, as above.", "author": "jaycarlton", "createdAt": "2020-01-17T00:49:04Z", "path": "api/src/main/java/org/pmiops/workbench/api/SumoLogicController.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package org.pmiops.workbench.api;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.actionaudit.auditors.SumoLogicAuditor;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.exceptions.BadRequestException;\n+import org.pmiops.workbench.exceptions.UnauthorizedException;\n+import org.pmiops.workbench.google.CloudStorageService;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.pmiops.workbench.model.EgressEventRequest;\n+import org.pmiops.workbench.model.EmptyResponse;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+public class SumoLogicController implements SumoLogicApiDelegate {\n+\n+  public static final String SUMOLOGIC_KEY_FILENAME = \"inbound-sumologic-keys.txt\";\n+\n+  private static final Logger log = Logger.getLogger(SumoLogicController.class.getName());\n+  private final SumoLogicAuditor sumoLogicAuditor;\n+  private final CloudStorageService cloudStorageService;\n+  private final Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  @Autowired\n+  SumoLogicController(", "originalCommit": "1d0f988ad163b5075cfdb90f4febaba13db7d7c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0NDI2Mg==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r368044262", "bodyText": "I'd like to keep the name as-is. These API endpoints are specifically crafted for SumoLogic (e.g. the API signature would look different if we were accepting requests from some other service), so I think it's helpful for the controller name to reflect that connection point.", "author": "gjuggler", "createdAt": "2020-01-17T17:11:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyMjI4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyODIzMA==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r367728230", "bodyText": "FWIW you don't have to specify prototype here, IIUC. The DI lookup doesn't consider whether or not it's a prototype.", "author": "jaycarlton", "createdAt": "2020-01-17T01:14:13Z", "path": "api/src/test/java/org/pmiops/workbench/actionaudit/auditors/ActionAuditTestConfig.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package org.pmiops.workbench.actionaudit.auditors;\n+\n+import java.time.Clock;\n+import java.time.Instant;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.test.FakeClock;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Scope;\n+\n+/** Common beans used by action audit test classes. */\n+@Configuration\n+public class ActionAuditTestConfig {\n+\n+  public static final Instant INSTANT = Instant.parse(\"2000-01-01T00:00:00.00Z\");\n+  public static final String ACTION_ID = \"9095d2f9-8db2-46c3-8f8e-4f90a62b457f\";\n+  public static final long ADMINISTRATOR_USER_ID = 222L;\n+  public static final String ADMINISTRATOR_EMAIL = \"admin@aou.biz\";\n+\n+  @Bean\n+  public static DbUser getUser() {\n+    final DbUser administrator = new DbUser();\n+    administrator.setUserId(ADMINISTRATOR_USER_ID);\n+    administrator.setUsername(ADMINISTRATOR_EMAIL);\n+    return administrator;\n+  }\n+\n+  @Bean(name = \"ACTION_ID\")\n+  @Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE)", "originalCommit": "1d0f988ad163b5075cfdb90f4febaba13db7d7c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA5MDAwMA==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r368090000", "bodyText": "Done.", "author": "gjuggler", "createdAt": "2020-01-17T19:05:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyODIzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyODMyOQ==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r367728329", "bodyText": "\ud83d\udc4f Love the consolidation!", "author": "jaycarlton", "createdAt": "2020-01-17T01:14:45Z", "path": "api/src/test/java/org/pmiops/workbench/actionaudit/auditors/AuthDomainAuditorTest.java", "diffHunk": "@@ -16,67 +14,36 @@\n import org.pmiops.workbench.actionaudit.TargetType;\n import org.pmiops.workbench.actionaudit.targetproperties.AccountTargetProperty;\n import org.pmiops.workbench.actionaudit.targetproperties.values.AccountDisabledStatus;\n-import org.pmiops.workbench.db.model.DbUser;\n-import org.pmiops.workbench.test.FakeClock;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n import org.springframework.boot.test.context.TestConfiguration;\n import org.springframework.boot.test.mock.mockito.MockBean;\n-import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Import;\n-import org.springframework.context.annotation.Scope;\n import org.springframework.test.context.junit4.SpringRunner;\n \n @RunWith(SpringRunner.class)\n public class AuthDomainAuditorTest {\n \n   private static final long USER_ID = 101L;", "originalCommit": "1d0f988ad163b5075cfdb90f4febaba13db7d7c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc0Mzk1NQ==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r367743955", "bodyText": "nit: use method reference this::handleEgressEvent.", "author": "jaycarlton", "createdAt": "2020-01-17T02:30:26Z", "path": "api/src/main/java/org/pmiops/workbench/api/SumoLogicController.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package org.pmiops.workbench.api;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.actionaudit.auditors.SumoLogicAuditor;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.exceptions.BadRequestException;\n+import org.pmiops.workbench.exceptions.UnauthorizedException;\n+import org.pmiops.workbench.google.CloudStorageService;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.pmiops.workbench.model.EgressEventRequest;\n+import org.pmiops.workbench.model.EmptyResponse;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+public class SumoLogicController implements SumoLogicApiDelegate {\n+\n+  public static final String SUMOLOGIC_KEY_FILENAME = \"inbound-sumologic-keys.txt\";\n+\n+  private static final Logger log = Logger.getLogger(SumoLogicController.class.getName());\n+  private final SumoLogicAuditor sumoLogicAuditor;\n+  private final CloudStorageService cloudStorageService;\n+  private final Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  @Autowired\n+  SumoLogicController(\n+      SumoLogicAuditor sumoLogicAuditor,\n+      CloudStorageService cloudStorageService,\n+      Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.sumoLogicAuditor = sumoLogicAuditor;\n+    this.cloudStorageService = cloudStorageService;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  @Override\n+  public ResponseEntity<EmptyResponse> logEgressEvent(\n+      String X_API_KEY, EgressEventRequest request) {\n+    if (!workbenchConfigProvider.get().featureFlags.enableSumoLogicEventHandling) {\n+      throw new BadRequestException(\"SumoLogic event handling is disabled in this environment.\");\n+    }\n+\n+    authorizeRequest(X_API_KEY, request);\n+\n+    try {\n+      // The \"eventsJsonArray\" field is a JSON-formatted array of EgressEvent JSON objects. Parse\n+      // this\n+      // out so we can work with each event as a model object.\n+      ObjectMapper mapper = new ObjectMapper();\n+      EgressEvent[] events = mapper.readValue(request.getEventsJsonArray(), EgressEvent[].class);\n+      Arrays.stream(events).forEach(event -> handleEgressEvent(event));", "originalCommit": "1d0f988ad163b5075cfdb90f4febaba13db7d7c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0NDYwMw==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r368044603", "bodyText": "Done.", "author": "gjuggler", "createdAt": "2020-01-17T17:12:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc0Mzk1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc0NDMyNw==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r367744327", "bodyText": "Can we move this splitting logic into CloudStorageService and have it return a list for us?", "author": "jaycarlton", "createdAt": "2020-01-17T02:32:28Z", "path": "api/src/main/java/org/pmiops/workbench/api/SumoLogicController.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package org.pmiops.workbench.api;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.actionaudit.auditors.SumoLogicAuditor;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.exceptions.BadRequestException;\n+import org.pmiops.workbench.exceptions.UnauthorizedException;\n+import org.pmiops.workbench.google.CloudStorageService;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.pmiops.workbench.model.EgressEventRequest;\n+import org.pmiops.workbench.model.EmptyResponse;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+public class SumoLogicController implements SumoLogicApiDelegate {\n+\n+  public static final String SUMOLOGIC_KEY_FILENAME = \"inbound-sumologic-keys.txt\";\n+\n+  private static final Logger log = Logger.getLogger(SumoLogicController.class.getName());\n+  private final SumoLogicAuditor sumoLogicAuditor;\n+  private final CloudStorageService cloudStorageService;\n+  private final Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  @Autowired\n+  SumoLogicController(\n+      SumoLogicAuditor sumoLogicAuditor,\n+      CloudStorageService cloudStorageService,\n+      Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.sumoLogicAuditor = sumoLogicAuditor;\n+    this.cloudStorageService = cloudStorageService;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  @Override\n+  public ResponseEntity<EmptyResponse> logEgressEvent(\n+      String X_API_KEY, EgressEventRequest request) {\n+    if (!workbenchConfigProvider.get().featureFlags.enableSumoLogicEventHandling) {\n+      throw new BadRequestException(\"SumoLogic event handling is disabled in this environment.\");\n+    }\n+\n+    authorizeRequest(X_API_KEY, request);\n+\n+    try {\n+      // The \"eventsJsonArray\" field is a JSON-formatted array of EgressEvent JSON objects. Parse\n+      // this\n+      // out so we can work with each event as a model object.\n+      ObjectMapper mapper = new ObjectMapper();\n+      EgressEvent[] events = mapper.readValue(request.getEventsJsonArray(), EgressEvent[].class);\n+      Arrays.stream(events).forEach(event -> handleEgressEvent(event));\n+      return ResponseEntity.ok(new EmptyResponse());\n+    } catch (IOException e) {\n+      log.severe(\n+          String.format(\n+              \"Failed to parse SumoLogic egress event JSON: %s\", request.getEventsJsonArray()));\n+      log.severe(e.getMessage());\n+      this.sumoLogicAuditor.fireFailedToParseEgressEvent(request);\n+      throw new BadRequestException(\"Error parsing event details\");\n+    }\n+  }\n+\n+  /**\n+   * Reads the SumoLogic keys file to get the list of valid API key strings for inbound SumoLogic\n+   * requests.\n+   *\n+   * @return\n+   * @throws IOException\n+   */\n+  private List<String> getSumoLogicApiKeys() throws IOException {\n+    String apiKeys = cloudStorageService.getCredentialsBucketString(SUMOLOGIC_KEY_FILENAME);\n+    return Arrays.asList(apiKeys.split(\"[\\\\r\\\\n]+\"));", "originalCommit": "1d0f988ad163b5075cfdb90f4febaba13db7d7c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0NjY1Mw==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r368046653", "bodyText": "Meh \u2013\u00a0I think this is simple enough, and purpose-specific enough to this auth scheme, that it's reasonable to live here.", "author": "gjuggler", "createdAt": "2020-01-17T17:17:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc0NDMyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc0NDQ2MQ==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r367744461", "bodyText": "Should the key file name be configured per env?", "author": "jaycarlton", "createdAt": "2020-01-17T02:33:09Z", "path": "api/src/main/java/org/pmiops/workbench/api/SumoLogicController.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package org.pmiops.workbench.api;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.actionaudit.auditors.SumoLogicAuditor;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.exceptions.BadRequestException;\n+import org.pmiops.workbench.exceptions.UnauthorizedException;\n+import org.pmiops.workbench.google.CloudStorageService;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.pmiops.workbench.model.EgressEventRequest;\n+import org.pmiops.workbench.model.EmptyResponse;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+public class SumoLogicController implements SumoLogicApiDelegate {\n+\n+  public static final String SUMOLOGIC_KEY_FILENAME = \"inbound-sumologic-keys.txt\";\n+\n+  private static final Logger log = Logger.getLogger(SumoLogicController.class.getName());\n+  private final SumoLogicAuditor sumoLogicAuditor;\n+  private final CloudStorageService cloudStorageService;\n+  private final Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  @Autowired\n+  SumoLogicController(\n+      SumoLogicAuditor sumoLogicAuditor,\n+      CloudStorageService cloudStorageService,\n+      Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.sumoLogicAuditor = sumoLogicAuditor;\n+    this.cloudStorageService = cloudStorageService;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  @Override\n+  public ResponseEntity<EmptyResponse> logEgressEvent(\n+      String X_API_KEY, EgressEventRequest request) {\n+    if (!workbenchConfigProvider.get().featureFlags.enableSumoLogicEventHandling) {\n+      throw new BadRequestException(\"SumoLogic event handling is disabled in this environment.\");\n+    }\n+\n+    authorizeRequest(X_API_KEY, request);\n+\n+    try {\n+      // The \"eventsJsonArray\" field is a JSON-formatted array of EgressEvent JSON objects. Parse\n+      // this\n+      // out so we can work with each event as a model object.\n+      ObjectMapper mapper = new ObjectMapper();\n+      EgressEvent[] events = mapper.readValue(request.getEventsJsonArray(), EgressEvent[].class);\n+      Arrays.stream(events).forEach(event -> handleEgressEvent(event));\n+      return ResponseEntity.ok(new EmptyResponse());\n+    } catch (IOException e) {\n+      log.severe(\n+          String.format(\n+              \"Failed to parse SumoLogic egress event JSON: %s\", request.getEventsJsonArray()));\n+      log.severe(e.getMessage());\n+      this.sumoLogicAuditor.fireFailedToParseEgressEvent(request);\n+      throw new BadRequestException(\"Error parsing event details\");\n+    }\n+  }\n+\n+  /**\n+   * Reads the SumoLogic keys file to get the list of valid API key strings for inbound SumoLogic\n+   * requests.\n+   *\n+   * @return\n+   * @throws IOException\n+   */\n+  private List<String> getSumoLogicApiKeys() throws IOException {\n+    String apiKeys = cloudStorageService.getCredentialsBucketString(SUMOLOGIC_KEY_FILENAME);", "originalCommit": "1d0f988ad163b5075cfdb90f4febaba13db7d7c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0NjQzOQ==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r368046439", "bodyText": "Nope \u2013\u00a0the creds bucket location is different for each env, but the filenames are constant for consistency.", "author": "gjuggler", "createdAt": "2020-01-17T17:16:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc0NDQ2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc0NTAwMg==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r367745002", "bodyText": "This feels kind of out of place here. I wonder if a stand-alone AouApiAuthService would make sense, both so we can reuse this logic for other tools or use cases, and more easily transition or enhance these endpoints to other auth schemes down the road.", "author": "jaycarlton", "createdAt": "2020-01-17T02:35:59Z", "path": "api/src/main/java/org/pmiops/workbench/api/SumoLogicController.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package org.pmiops.workbench.api;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.actionaudit.auditors.SumoLogicAuditor;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.exceptions.BadRequestException;\n+import org.pmiops.workbench.exceptions.UnauthorizedException;\n+import org.pmiops.workbench.google.CloudStorageService;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.pmiops.workbench.model.EgressEventRequest;\n+import org.pmiops.workbench.model.EmptyResponse;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+public class SumoLogicController implements SumoLogicApiDelegate {\n+\n+  public static final String SUMOLOGIC_KEY_FILENAME = \"inbound-sumologic-keys.txt\";\n+\n+  private static final Logger log = Logger.getLogger(SumoLogicController.class.getName());\n+  private final SumoLogicAuditor sumoLogicAuditor;\n+  private final CloudStorageService cloudStorageService;\n+  private final Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  @Autowired\n+  SumoLogicController(\n+      SumoLogicAuditor sumoLogicAuditor,\n+      CloudStorageService cloudStorageService,\n+      Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.sumoLogicAuditor = sumoLogicAuditor;\n+    this.cloudStorageService = cloudStorageService;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  @Override\n+  public ResponseEntity<EmptyResponse> logEgressEvent(\n+      String X_API_KEY, EgressEventRequest request) {\n+    if (!workbenchConfigProvider.get().featureFlags.enableSumoLogicEventHandling) {\n+      throw new BadRequestException(\"SumoLogic event handling is disabled in this environment.\");\n+    }\n+\n+    authorizeRequest(X_API_KEY, request);\n+\n+    try {\n+      // The \"eventsJsonArray\" field is a JSON-formatted array of EgressEvent JSON objects. Parse\n+      // this\n+      // out so we can work with each event as a model object.\n+      ObjectMapper mapper = new ObjectMapper();\n+      EgressEvent[] events = mapper.readValue(request.getEventsJsonArray(), EgressEvent[].class);\n+      Arrays.stream(events).forEach(event -> handleEgressEvent(event));\n+      return ResponseEntity.ok(new EmptyResponse());\n+    } catch (IOException e) {\n+      log.severe(\n+          String.format(\n+              \"Failed to parse SumoLogic egress event JSON: %s\", request.getEventsJsonArray()));\n+      log.severe(e.getMessage());\n+      this.sumoLogicAuditor.fireFailedToParseEgressEvent(request);\n+      throw new BadRequestException(\"Error parsing event details\");\n+    }\n+  }\n+\n+  /**\n+   * Reads the SumoLogic keys file to get the list of valid API key strings for inbound SumoLogic\n+   * requests.\n+   *\n+   * @return\n+   * @throws IOException\n+   */\n+  private List<String> getSumoLogicApiKeys() throws IOException {\n+    String apiKeys = cloudStorageService.getCredentialsBucketString(SUMOLOGIC_KEY_FILENAME);\n+    return Arrays.asList(apiKeys.split(\"[\\\\r\\\\n]+\"));\n+  }\n+\n+  /**\n+   * Authorizes an inbound EgressEventRequest with a given API key. If the API key is invalid, a\n+   * generic audit event is logged.\n+   *\n+   * @param apiKey\n+   * @param request\n+   */\n+  private void authorizeRequest(String apiKey, EgressEventRequest request) {", "originalCommit": "1d0f988ad163b5075cfdb90f4febaba13db7d7c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0NzcwNg==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r368047706", "bodyText": "I generally try not to over-aggressively generalize things. It will be almost trivial to factor this out if & when it's needed elsewhere, and the whole controller is still quite small, so I don't think it's impacting maintainability.", "author": "gjuggler", "createdAt": "2020-01-17T17:19:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc0NTAwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc0NTI4MA==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r367745280", "bodyText": "Why not return a set? We don't want duplicates, don't rely on order, and are just using contains()", "author": "jaycarlton", "createdAt": "2020-01-17T02:37:43Z", "path": "api/src/main/java/org/pmiops/workbench/api/SumoLogicController.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package org.pmiops.workbench.api;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.actionaudit.auditors.SumoLogicAuditor;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.exceptions.BadRequestException;\n+import org.pmiops.workbench.exceptions.UnauthorizedException;\n+import org.pmiops.workbench.google.CloudStorageService;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.pmiops.workbench.model.EgressEventRequest;\n+import org.pmiops.workbench.model.EmptyResponse;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+public class SumoLogicController implements SumoLogicApiDelegate {\n+\n+  public static final String SUMOLOGIC_KEY_FILENAME = \"inbound-sumologic-keys.txt\";\n+\n+  private static final Logger log = Logger.getLogger(SumoLogicController.class.getName());\n+  private final SumoLogicAuditor sumoLogicAuditor;\n+  private final CloudStorageService cloudStorageService;\n+  private final Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  @Autowired\n+  SumoLogicController(\n+      SumoLogicAuditor sumoLogicAuditor,\n+      CloudStorageService cloudStorageService,\n+      Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.sumoLogicAuditor = sumoLogicAuditor;\n+    this.cloudStorageService = cloudStorageService;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  @Override\n+  public ResponseEntity<EmptyResponse> logEgressEvent(\n+      String X_API_KEY, EgressEventRequest request) {\n+    if (!workbenchConfigProvider.get().featureFlags.enableSumoLogicEventHandling) {\n+      throw new BadRequestException(\"SumoLogic event handling is disabled in this environment.\");\n+    }\n+\n+    authorizeRequest(X_API_KEY, request);\n+\n+    try {\n+      // The \"eventsJsonArray\" field is a JSON-formatted array of EgressEvent JSON objects. Parse\n+      // this\n+      // out so we can work with each event as a model object.\n+      ObjectMapper mapper = new ObjectMapper();\n+      EgressEvent[] events = mapper.readValue(request.getEventsJsonArray(), EgressEvent[].class);\n+      Arrays.stream(events).forEach(event -> handleEgressEvent(event));\n+      return ResponseEntity.ok(new EmptyResponse());\n+    } catch (IOException e) {\n+      log.severe(\n+          String.format(\n+              \"Failed to parse SumoLogic egress event JSON: %s\", request.getEventsJsonArray()));\n+      log.severe(e.getMessage());\n+      this.sumoLogicAuditor.fireFailedToParseEgressEvent(request);\n+      throw new BadRequestException(\"Error parsing event details\");\n+    }\n+  }\n+\n+  /**\n+   * Reads the SumoLogic keys file to get the list of valid API key strings for inbound SumoLogic\n+   * requests.\n+   *\n+   * @return\n+   * @throws IOException\n+   */\n+  private List<String> getSumoLogicApiKeys() throws IOException {", "originalCommit": "1d0f988ad163b5075cfdb90f4febaba13db7d7c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0NjI0Ng==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r368046246", "bodyText": "Done.", "author": "gjuggler", "createdAt": "2020-01-17T17:16:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc0NTI4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc0NTk4Mw==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r367745983", "bodyText": "thinking out loud: I generally like to see dumb controllers that offload all the real work to services, but this is a special case where the auditor basically is the service.", "author": "jaycarlton", "createdAt": "2020-01-17T02:41:15Z", "path": "api/src/main/java/org/pmiops/workbench/api/SumoLogicController.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package org.pmiops.workbench.api;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.actionaudit.auditors.SumoLogicAuditor;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.exceptions.BadRequestException;\n+import org.pmiops.workbench.exceptions.UnauthorizedException;\n+import org.pmiops.workbench.google.CloudStorageService;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.pmiops.workbench.model.EgressEventRequest;\n+import org.pmiops.workbench.model.EmptyResponse;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+public class SumoLogicController implements SumoLogicApiDelegate {", "originalCommit": "1d0f988ad163b5075cfdb90f4febaba13db7d7c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0MjY2MQ==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r368042661", "bodyText": "Agreed \u2013\u00a0the controller is less than 100 lines long, which is about where it should be for a simple authenticated request.", "author": "gjuggler", "createdAt": "2020-01-17T17:07:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc0NTk4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc0OTY5Nw==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r367749697", "bodyText": "I'd probably make an enum with these values or store them in per-env configs. In principle we could have separate Moodles, etc.", "author": "jaycarlton", "createdAt": "2020-01-17T03:01:57Z", "path": "api/src/main/java/org/pmiops/workbench/google/CloudStorageServiceImpl.java", "diffHunk": "@@ -36,7 +36,7 @@ public CloudStorageServiceImpl(Provider<WorkbenchConfig> configProvider) {\n \n   @Override\n   public String readInvitationKey() {\n-    return readCredentialsBucketString(\"invitation-key.txt\");\n+    return getCredentialsBucketString(\"invitation-key.txt\");", "originalCommit": "1d0f988ad163b5075cfdb90f4febaba13db7d7c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc0OTg5Nw==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r367749897", "bodyText": "Please return Optional<DbWorkspace> instead of using null.", "author": "jaycarlton", "createdAt": "2020-01-17T03:03:20Z", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceService.java", "diffHunk": "@@ -27,6 +27,10 @@\n \n   DbWorkspace get(String ns, String firecloudName);\n \n+  // Returns the requested workspace looked up by workspace namespace (aka billing project name).\n+  // Only active workspaces are searched. Returns null if no active workspace is found.\n+  DbWorkspace getByNamespace(String workspaceNamespace);", "originalCommit": "1d0f988ad163b5075cfdb90f4febaba13db7d7c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1MTI3MQ==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r368051271", "bodyText": "Done.", "author": "gjuggler", "createdAt": "2020-01-17T17:28:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc0OTg5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc1MDA2MA==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r367750060", "bodyText": "I believe you can return an optional here, if you do so in the Dao.", "author": "jaycarlton", "createdAt": "2020-01-17T03:04:21Z", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceImpl.java", "diffHunk": "@@ -235,6 +235,12 @@ public DbWorkspace getRequired(String ns, String firecloudName) {\n     return workspace;\n   }\n \n+  @Override\n+  public DbWorkspace getByNamespace(String ns) {", "originalCommit": "1d0f988ad163b5075cfdb90f4febaba13db7d7c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1MTkwMw==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r368051903", "bodyText": "Done.", "author": "gjuggler", "createdAt": "2020-01-17T17:30:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc1MDA2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc1MDI2NQ==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r367750265", "bodyText": "nit: UserRole could just define its own internal Comparator and implement Comparable so you don't need to do it below.", "author": "jaycarlton", "createdAt": "2020-01-17T03:05:39Z", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceImpl.java", "diffHunk": "@@ -500,8 +506,10 @@ public DbWorkspace getWorkspaceEnforceAccessLevelAndSetCdrVersion(\n   }\n \n   @Override\n-  public List<UserRole> convertWorkspaceAclsToUserRoles(\n-      Map<String, FirecloudWorkspaceAccessEntry> rolesMap) {\n+  public List<UserRole> getFirecloudUserRoles(String workspaceNamespace, String firecloudName) {\n+    Map<String, FirecloudWorkspaceAccessEntry> rolesMap =\n+        getFirecloudWorkspaceAcls(workspaceNamespace, firecloudName);\n+", "originalCommit": "1d0f988ad163b5075cfdb90f4febaba13db7d7c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc1MDQ3NA==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r367750474", "bodyText": "nit: it helps to name maps like keyToValue", "author": "jaycarlton", "createdAt": "2020-01-17T03:06:55Z", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceImpl.java", "diffHunk": "@@ -500,8 +506,10 @@ public DbWorkspace getWorkspaceEnforceAccessLevelAndSetCdrVersion(\n   }\n \n   @Override\n-  public List<UserRole> convertWorkspaceAclsToUserRoles(\n-      Map<String, FirecloudWorkspaceAccessEntry> rolesMap) {\n+  public List<UserRole> getFirecloudUserRoles(String workspaceNamespace, String firecloudName) {\n+    Map<String, FirecloudWorkspaceAccessEntry> rolesMap =", "originalCommit": "1d0f988ad163b5075cfdb90f4febaba13db7d7c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1MjQzNw==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r368052437", "bodyText": "Done.", "author": "gjuggler", "createdAt": "2020-01-17T17:31:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc1MDQ3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc1MDY4MA==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r367750680", "bodyText": "Might make sense to give this a Name, and have another one for a regular user.", "author": "jaycarlton", "createdAt": "2020-01-17T03:08:03Z", "path": "api/src/test/java/org/pmiops/workbench/actionaudit/auditors/ActionAuditTestConfig.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package org.pmiops.workbench.actionaudit.auditors;\n+\n+import java.time.Clock;\n+import java.time.Instant;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.test.FakeClock;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Scope;\n+\n+/** Common beans used by action audit test classes. */\n+@Configuration\n+public class ActionAuditTestConfig {\n+\n+  public static final Instant INSTANT = Instant.parse(\"2000-01-01T00:00:00.00Z\");\n+  public static final String ACTION_ID = \"9095d2f9-8db2-46c3-8f8e-4f90a62b457f\";\n+  public static final long ADMINISTRATOR_USER_ID = 222L;\n+  public static final String ADMINISTRATOR_EMAIL = \"admin@aou.biz\";\n+\n+  @Bean\n+  public static DbUser getUser() {", "originalCommit": "1d0f988ad163b5075cfdb90f4febaba13db7d7c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc1MDc3Mg==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r367750772", "bodyText": "Oh, so that's how you do it. Neat.", "author": "jaycarlton", "createdAt": "2020-01-17T03:08:35Z", "path": "api/src/test/java/org/pmiops/workbench/actionaudit/auditors/AuthDomainAuditorTest.java", "diffHunk": "@@ -16,67 +14,36 @@\n import org.pmiops.workbench.actionaudit.TargetType;\n import org.pmiops.workbench.actionaudit.targetproperties.AccountTargetProperty;\n import org.pmiops.workbench.actionaudit.targetproperties.values.AccountDisabledStatus;\n-import org.pmiops.workbench.db.model.DbUser;\n-import org.pmiops.workbench.test.FakeClock;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n import org.springframework.boot.test.context.TestConfiguration;\n import org.springframework.boot.test.mock.mockito.MockBean;\n-import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Import;\n-import org.springframework.context.annotation.Scope;\n import org.springframework.test.context.junit4.SpringRunner;\n \n @RunWith(SpringRunner.class)\n public class AuthDomainAuditorTest {\n \n   private static final long USER_ID = 101L;\n-  private static final long ADMINISTRATOR_USER_ID = 222L;\n-  private static final String ADMINISTRATOR_EMAIL = \"admin@aou.biz\";\n-  private static final Instant INSTANT = Instant.parse(\"2000-01-01T00:00:00.00Z\");\n-  private static final String ACTION_ID = \"9095d2f9-8db2-46c3-8f8e-4f90a62b457f\";\n-\n-  @Autowired private ActionAuditService mockActionAuditService;\n-\n-  @Captor private ArgumentCaptor<ActionAuditEvent> eventCaptor;\n \n   @Autowired private AuthDomainAuditor authDomainAuditAdapter;\n+  @MockBean private ActionAuditService mockActionAuditService;\n+  @Captor private ArgumentCaptor<ActionAuditEvent> eventCaptor;\n \n   @TestConfiguration\n-  @Import({AuthDomainAuditorImpl.class})\n-  @MockBean({ActionAuditService.class})\n-  static class Config {\n-    @Bean(name = \"ACTION_ID\")\n-    @Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n-    public String getActionId() {\n-      return ACTION_ID;\n-    }\n-\n-    @Bean\n-    public DbUser getUser() {\n-      final DbUser administrator = new DbUser();\n-      administrator.setUserId(ADMINISTRATOR_USER_ID);\n-      administrator.setUsername(ADMINISTRATOR_EMAIL);\n-      return administrator;\n-    }\n-\n-    @Bean\n-    public Clock getClock() {\n-      return new FakeClock(INSTANT);\n-    }\n-  }\n+  @Import({AuthDomainAuditorImpl.class, ActionAuditTestConfig.class})", "originalCommit": "1d0f988ad163b5075cfdb90f4febaba13db7d7c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc1MDkwNw==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r367750907", "bodyText": "Cool. I didn't know about this version. I'd been using @Autowired even for the mocks and putting a @MockBean on the config class.", "author": "jaycarlton", "createdAt": "2020-01-17T03:09:22Z", "path": "api/src/test/java/org/pmiops/workbench/actionaudit/auditors/AuthDomainAuditorTest.java", "diffHunk": "@@ -16,67 +14,36 @@\n import org.pmiops.workbench.actionaudit.TargetType;\n import org.pmiops.workbench.actionaudit.targetproperties.AccountTargetProperty;\n import org.pmiops.workbench.actionaudit.targetproperties.values.AccountDisabledStatus;\n-import org.pmiops.workbench.db.model.DbUser;\n-import org.pmiops.workbench.test.FakeClock;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n import org.springframework.boot.test.context.TestConfiguration;\n import org.springframework.boot.test.mock.mockito.MockBean;\n-import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Import;\n-import org.springframework.context.annotation.Scope;\n import org.springframework.test.context.junit4.SpringRunner;\n \n @RunWith(SpringRunner.class)\n public class AuthDomainAuditorTest {\n \n   private static final long USER_ID = 101L;\n-  private static final long ADMINISTRATOR_USER_ID = 222L;\n-  private static final String ADMINISTRATOR_EMAIL = \"admin@aou.biz\";\n-  private static final Instant INSTANT = Instant.parse(\"2000-01-01T00:00:00.00Z\");\n-  private static final String ACTION_ID = \"9095d2f9-8db2-46c3-8f8e-4f90a62b457f\";\n-\n-  @Autowired private ActionAuditService mockActionAuditService;\n-\n-  @Captor private ArgumentCaptor<ActionAuditEvent> eventCaptor;\n \n   @Autowired private AuthDomainAuditor authDomainAuditAdapter;\n+  @MockBean private ActionAuditService mockActionAuditService;", "originalCommit": "1d0f988ad163b5075cfdb90f4febaba13db7d7c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA5MDM5OQ==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r368090399", "bodyText": "Yeah, I think I only discovered this while digging into some Spring examples out on the internets. I think it's marginally cleaner this way.", "author": "gjuggler", "createdAt": "2020-01-17T19:06:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc1MDkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODEzODgwMw==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r368138803", "bodyText": "Yep, there's less duplication and you don't rely only on the name convention.", "author": "jaycarlton", "createdAt": "2020-01-17T21:13:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc1MDkwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc1MTUzNQ==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r367751535", "bodyText": "I was going to say, you can make these a bit shorter and avoid collecting by using allMatch(). But then your assertion failure message wouldn't be as clear. So keep it this way.", "author": "jaycarlton", "createdAt": "2020-01-17T03:12:51Z", "path": "api/src/test/java/org/pmiops/workbench/actionaudit/auditors/SumoLogicAuditorTest.java", "diffHunk": "@@ -0,0 +1,216 @@\n+package org.pmiops.workbench.actionaudit.auditors;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.pmiops.workbench.actionaudit.ActionAuditEvent;\n+import org.pmiops.workbench.actionaudit.ActionAuditService;\n+import org.pmiops.workbench.actionaudit.ActionType;\n+import org.pmiops.workbench.actionaudit.AgentType;\n+import org.pmiops.workbench.actionaudit.targetproperties.EgressEventCommentTargetProperty;\n+import org.pmiops.workbench.actionaudit.targetproperties.EgressEventTargetProperty;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.exceptions.BadRequestException;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.pmiops.workbench.model.EgressEventRequest;\n+import org.pmiops.workbench.model.UserRole;\n+import org.pmiops.workbench.workspaces.WorkspaceService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+public class SumoLogicAuditorTest {\n+\n+  private static final long USER_ID = 1L;\n+  private static final String USER_EMAIL = \"user@researchallofus.org\";\n+  private static final long WORKSPACE_ID = 1L;\n+  private static final String WORKSPACE_NAMESPACE = \"aou-rw-test-c7dec260\";\n+  private static final String WORKSPACE_FIRECLOUD_NAME = \"mytestworkspacename\";\n+\n+  private static final String EGRESS_EVENT_PROJECT_NAME = WORKSPACE_NAMESPACE;\n+  private static final String EGRESS_EVENT_VM_NAME = \"all-of-us-\" + USER_ID + \"-m\";\n+\n+  // Pre-built data objects for test.\n+  private DbUser dbUser;\n+  private DbWorkspace dbWorkspace;\n+  private List<UserRole> firecloudUserRoles = new ArrayList<>();\n+\n+  @Autowired private SumoLogicAuditor sumoLogicAuditor;\n+\n+  @MockBean private ActionAuditService mockActionAuditService;\n+  @MockBean private WorkspaceService mockWorkspaceService;\n+  @MockBean private UserDao mockUserDao;\n+\n+  @Captor private ArgumentCaptor<Collection<ActionAuditEvent>> eventsCaptor;\n+\n+  @Rule public final ExpectedException exception = ExpectedException.none();\n+\n+  @Before\n+  public void setUp() {\n+    dbUser = new DbUser();\n+    dbUser.setUserId(USER_ID);\n+    dbUser.setUsername(USER_EMAIL);\n+    when(mockUserDao.findUserByUsername(USER_EMAIL)).thenReturn(dbUser);\n+\n+    dbWorkspace = new DbWorkspace();\n+    dbWorkspace.setWorkspaceId(WORKSPACE_ID);\n+    dbWorkspace.setWorkspaceNamespace(WORKSPACE_NAMESPACE);\n+    dbWorkspace.setFirecloudName(WORKSPACE_FIRECLOUD_NAME);\n+    when(mockWorkspaceService.getByNamespace(WORKSPACE_NAMESPACE)).thenReturn(dbWorkspace);\n+    firecloudUserRoles.add(new UserRole().email(USER_EMAIL));\n+    when(mockWorkspaceService.getFirecloudUserRoles(WORKSPACE_NAMESPACE, WORKSPACE_FIRECLOUD_NAME))\n+        .thenReturn(firecloudUserRoles);\n+  }\n+\n+  Set<String> extractValuesFromEvents(\n+      Collection<ActionAuditEvent> events, Function<ActionAuditEvent, String> fn) {\n+    return events.stream().map(fn).collect(Collectors.toSet());\n+  }\n+\n+  @Test\n+  public void testFireEgressEvent() {\n+    sumoLogicAuditor.fireEgressEvent(\n+        new EgressEvent()\n+            .projectName(EGRESS_EVENT_PROJECT_NAME)\n+            .vmName(EGRESS_EVENT_VM_NAME)\n+            .timeWindowStart(0l)\n+            .egressMib(12.3));\n+    verify(mockActionAuditService).send(eventsCaptor.capture());\n+    Collection<ActionAuditEvent> events = eventsCaptor.getValue();\n+\n+    // Ensure all events have the expected set of constant fields.\n+    assertThat(events.stream().map(event -> event.getAgentType()).collect(Collectors.toSet()))\n+        .containsExactly(AgentType.USER);\n+    assertThat(events.stream().map(event -> event.getActionType()).collect(Collectors.toSet()))", "originalCommit": "1d0f988ad163b5075cfdb90f4febaba13db7d7c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc1MTkyNw==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r367751927", "bodyText": "You can use method references like ActionAuditEvent::getEmailMaybe.", "author": "jaycarlton", "createdAt": "2020-01-17T03:15:17Z", "path": "api/src/test/java/org/pmiops/workbench/actionaudit/auditors/SumoLogicAuditorTest.java", "diffHunk": "@@ -0,0 +1,216 @@\n+package org.pmiops.workbench.actionaudit.auditors;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.pmiops.workbench.actionaudit.ActionAuditEvent;\n+import org.pmiops.workbench.actionaudit.ActionAuditService;\n+import org.pmiops.workbench.actionaudit.ActionType;\n+import org.pmiops.workbench.actionaudit.AgentType;\n+import org.pmiops.workbench.actionaudit.targetproperties.EgressEventCommentTargetProperty;\n+import org.pmiops.workbench.actionaudit.targetproperties.EgressEventTargetProperty;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.exceptions.BadRequestException;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.pmiops.workbench.model.EgressEventRequest;\n+import org.pmiops.workbench.model.UserRole;\n+import org.pmiops.workbench.workspaces.WorkspaceService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+public class SumoLogicAuditorTest {\n+\n+  private static final long USER_ID = 1L;\n+  private static final String USER_EMAIL = \"user@researchallofus.org\";\n+  private static final long WORKSPACE_ID = 1L;\n+  private static final String WORKSPACE_NAMESPACE = \"aou-rw-test-c7dec260\";\n+  private static final String WORKSPACE_FIRECLOUD_NAME = \"mytestworkspacename\";\n+\n+  private static final String EGRESS_EVENT_PROJECT_NAME = WORKSPACE_NAMESPACE;\n+  private static final String EGRESS_EVENT_VM_NAME = \"all-of-us-\" + USER_ID + \"-m\";\n+\n+  // Pre-built data objects for test.\n+  private DbUser dbUser;\n+  private DbWorkspace dbWorkspace;\n+  private List<UserRole> firecloudUserRoles = new ArrayList<>();\n+\n+  @Autowired private SumoLogicAuditor sumoLogicAuditor;\n+\n+  @MockBean private ActionAuditService mockActionAuditService;\n+  @MockBean private WorkspaceService mockWorkspaceService;\n+  @MockBean private UserDao mockUserDao;\n+\n+  @Captor private ArgumentCaptor<Collection<ActionAuditEvent>> eventsCaptor;\n+\n+  @Rule public final ExpectedException exception = ExpectedException.none();\n+\n+  @Before\n+  public void setUp() {\n+    dbUser = new DbUser();\n+    dbUser.setUserId(USER_ID);\n+    dbUser.setUsername(USER_EMAIL);\n+    when(mockUserDao.findUserByUsername(USER_EMAIL)).thenReturn(dbUser);\n+\n+    dbWorkspace = new DbWorkspace();\n+    dbWorkspace.setWorkspaceId(WORKSPACE_ID);\n+    dbWorkspace.setWorkspaceNamespace(WORKSPACE_NAMESPACE);\n+    dbWorkspace.setFirecloudName(WORKSPACE_FIRECLOUD_NAME);\n+    when(mockWorkspaceService.getByNamespace(WORKSPACE_NAMESPACE)).thenReturn(dbWorkspace);\n+    firecloudUserRoles.add(new UserRole().email(USER_EMAIL));\n+    when(mockWorkspaceService.getFirecloudUserRoles(WORKSPACE_NAMESPACE, WORKSPACE_FIRECLOUD_NAME))\n+        .thenReturn(firecloudUserRoles);\n+  }\n+\n+  Set<String> extractValuesFromEvents(\n+      Collection<ActionAuditEvent> events, Function<ActionAuditEvent, String> fn) {\n+    return events.stream().map(fn).collect(Collectors.toSet());\n+  }\n+\n+  @Test\n+  public void testFireEgressEvent() {\n+    sumoLogicAuditor.fireEgressEvent(\n+        new EgressEvent()\n+            .projectName(EGRESS_EVENT_PROJECT_NAME)\n+            .vmName(EGRESS_EVENT_VM_NAME)\n+            .timeWindowStart(0l)\n+            .egressMib(12.3));\n+    verify(mockActionAuditService).send(eventsCaptor.capture());\n+    Collection<ActionAuditEvent> events = eventsCaptor.getValue();\n+\n+    // Ensure all events have the expected set of constant fields.\n+    assertThat(events.stream().map(event -> event.getAgentType()).collect(Collectors.toSet()))\n+        .containsExactly(AgentType.USER);\n+    assertThat(events.stream().map(event -> event.getActionType()).collect(Collectors.toSet()))\n+        .containsExactly(ActionType.HIGH_EGRESS);\n+    assertThat(events.stream().map(event -> event.getAgentId()).collect(Collectors.toSet()))\n+        .containsExactly(USER_ID);\n+    assertThat(events.stream().map(event -> event.getAgentEmailMaybe()).collect(Collectors.toSet()))\n+        .containsExactly(USER_EMAIL);\n+    assertThat(events.stream().map(event -> event.getTargetIdMaybe()).collect(Collectors.toSet()))", "originalCommit": "1d0f988ad163b5075cfdb90f4febaba13db7d7c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA5MTEyNw==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r368091127", "bodyText": "In this case, the lambda actually saves characters :)", "author": "gjuggler", "createdAt": "2020-01-17T19:08:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc1MTkyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODEzOTY1MQ==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r368139651", "bodyText": "But you gain an operator, and a scope, and lose at least half an abstraction level :/", "author": "jaycarlton", "createdAt": "2020-01-17T21:16:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc1MTkyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc1MjMwNQ==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r367752305", "bodyText": "You're doing enough of this that it could be helpful to have an assertion helper funciton in the parent class like assertContainsUniqueValue(Collection<T> objects, Function<T, U> extractor, U value); I Could use that in a few places as well.", "author": "jaycarlton", "createdAt": "2020-01-17T03:17:04Z", "path": "api/src/test/java/org/pmiops/workbench/actionaudit/auditors/SumoLogicAuditorTest.java", "diffHunk": "@@ -0,0 +1,216 @@\n+package org.pmiops.workbench.actionaudit.auditors;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.pmiops.workbench.actionaudit.ActionAuditEvent;\n+import org.pmiops.workbench.actionaudit.ActionAuditService;\n+import org.pmiops.workbench.actionaudit.ActionType;\n+import org.pmiops.workbench.actionaudit.AgentType;\n+import org.pmiops.workbench.actionaudit.targetproperties.EgressEventCommentTargetProperty;\n+import org.pmiops.workbench.actionaudit.targetproperties.EgressEventTargetProperty;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.exceptions.BadRequestException;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.pmiops.workbench.model.EgressEventRequest;\n+import org.pmiops.workbench.model.UserRole;\n+import org.pmiops.workbench.workspaces.WorkspaceService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+public class SumoLogicAuditorTest {\n+\n+  private static final long USER_ID = 1L;\n+  private static final String USER_EMAIL = \"user@researchallofus.org\";\n+  private static final long WORKSPACE_ID = 1L;\n+  private static final String WORKSPACE_NAMESPACE = \"aou-rw-test-c7dec260\";\n+  private static final String WORKSPACE_FIRECLOUD_NAME = \"mytestworkspacename\";\n+\n+  private static final String EGRESS_EVENT_PROJECT_NAME = WORKSPACE_NAMESPACE;\n+  private static final String EGRESS_EVENT_VM_NAME = \"all-of-us-\" + USER_ID + \"-m\";\n+\n+  // Pre-built data objects for test.\n+  private DbUser dbUser;\n+  private DbWorkspace dbWorkspace;\n+  private List<UserRole> firecloudUserRoles = new ArrayList<>();\n+\n+  @Autowired private SumoLogicAuditor sumoLogicAuditor;\n+\n+  @MockBean private ActionAuditService mockActionAuditService;\n+  @MockBean private WorkspaceService mockWorkspaceService;\n+  @MockBean private UserDao mockUserDao;\n+\n+  @Captor private ArgumentCaptor<Collection<ActionAuditEvent>> eventsCaptor;\n+\n+  @Rule public final ExpectedException exception = ExpectedException.none();\n+\n+  @Before\n+  public void setUp() {\n+    dbUser = new DbUser();\n+    dbUser.setUserId(USER_ID);\n+    dbUser.setUsername(USER_EMAIL);\n+    when(mockUserDao.findUserByUsername(USER_EMAIL)).thenReturn(dbUser);\n+\n+    dbWorkspace = new DbWorkspace();\n+    dbWorkspace.setWorkspaceId(WORKSPACE_ID);\n+    dbWorkspace.setWorkspaceNamespace(WORKSPACE_NAMESPACE);\n+    dbWorkspace.setFirecloudName(WORKSPACE_FIRECLOUD_NAME);\n+    when(mockWorkspaceService.getByNamespace(WORKSPACE_NAMESPACE)).thenReturn(dbWorkspace);\n+    firecloudUserRoles.add(new UserRole().email(USER_EMAIL));\n+    when(mockWorkspaceService.getFirecloudUserRoles(WORKSPACE_NAMESPACE, WORKSPACE_FIRECLOUD_NAME))\n+        .thenReturn(firecloudUserRoles);\n+  }\n+\n+  Set<String> extractValuesFromEvents(\n+      Collection<ActionAuditEvent> events, Function<ActionAuditEvent, String> fn) {\n+    return events.stream().map(fn).collect(Collectors.toSet());\n+  }\n+\n+  @Test\n+  public void testFireEgressEvent() {\n+    sumoLogicAuditor.fireEgressEvent(\n+        new EgressEvent()\n+            .projectName(EGRESS_EVENT_PROJECT_NAME)\n+            .vmName(EGRESS_EVENT_VM_NAME)\n+            .timeWindowStart(0l)\n+            .egressMib(12.3));\n+    verify(mockActionAuditService).send(eventsCaptor.capture());\n+    Collection<ActionAuditEvent> events = eventsCaptor.getValue();\n+\n+    // Ensure all events have the expected set of constant fields.\n+    assertThat(events.stream().map(event -> event.getAgentType()).collect(Collectors.toSet()))\n+        .containsExactly(AgentType.USER);\n+    assertThat(events.stream().map(event -> event.getActionType()).collect(Collectors.toSet()))\n+        .containsExactly(ActionType.HIGH_EGRESS);\n+    assertThat(events.stream().map(event -> event.getAgentId()).collect(Collectors.toSet()))", "originalCommit": "1d0f988ad163b5075cfdb90f4febaba13db7d7c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA5MDg3Nw==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r368090877", "bodyText": "Yeah... I almost started doing that, but it only would have saved a \"bit\" of code, and would add indirection which has a cost on readability. I'll leave as-is, but I agree some helpers may be warranted if this grows in size.", "author": "gjuggler", "createdAt": "2020-01-17T19:08:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc1MjMwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc1MjYwNQ==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r367752605", "bodyText": "nit: for Java string comparisons, it's nice to put the known non-null string on the left so you can use .equals()", "author": "jaycarlton", "createdAt": "2020-01-17T03:18:36Z", "path": "api/src/test/java/org/pmiops/workbench/actionaudit/auditors/SumoLogicAuditorTest.java", "diffHunk": "@@ -0,0 +1,216 @@\n+package org.pmiops.workbench.actionaudit.auditors;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.pmiops.workbench.actionaudit.ActionAuditEvent;\n+import org.pmiops.workbench.actionaudit.ActionAuditService;\n+import org.pmiops.workbench.actionaudit.ActionType;\n+import org.pmiops.workbench.actionaudit.AgentType;\n+import org.pmiops.workbench.actionaudit.targetproperties.EgressEventCommentTargetProperty;\n+import org.pmiops.workbench.actionaudit.targetproperties.EgressEventTargetProperty;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.exceptions.BadRequestException;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.pmiops.workbench.model.EgressEventRequest;\n+import org.pmiops.workbench.model.UserRole;\n+import org.pmiops.workbench.workspaces.WorkspaceService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+public class SumoLogicAuditorTest {\n+\n+  private static final long USER_ID = 1L;\n+  private static final String USER_EMAIL = \"user@researchallofus.org\";\n+  private static final long WORKSPACE_ID = 1L;\n+  private static final String WORKSPACE_NAMESPACE = \"aou-rw-test-c7dec260\";\n+  private static final String WORKSPACE_FIRECLOUD_NAME = \"mytestworkspacename\";\n+\n+  private static final String EGRESS_EVENT_PROJECT_NAME = WORKSPACE_NAMESPACE;\n+  private static final String EGRESS_EVENT_VM_NAME = \"all-of-us-\" + USER_ID + \"-m\";\n+\n+  // Pre-built data objects for test.\n+  private DbUser dbUser;\n+  private DbWorkspace dbWorkspace;\n+  private List<UserRole> firecloudUserRoles = new ArrayList<>();\n+\n+  @Autowired private SumoLogicAuditor sumoLogicAuditor;\n+\n+  @MockBean private ActionAuditService mockActionAuditService;\n+  @MockBean private WorkspaceService mockWorkspaceService;\n+  @MockBean private UserDao mockUserDao;\n+\n+  @Captor private ArgumentCaptor<Collection<ActionAuditEvent>> eventsCaptor;\n+\n+  @Rule public final ExpectedException exception = ExpectedException.none();\n+\n+  @Before\n+  public void setUp() {\n+    dbUser = new DbUser();\n+    dbUser.setUserId(USER_ID);\n+    dbUser.setUsername(USER_EMAIL);\n+    when(mockUserDao.findUserByUsername(USER_EMAIL)).thenReturn(dbUser);\n+\n+    dbWorkspace = new DbWorkspace();\n+    dbWorkspace.setWorkspaceId(WORKSPACE_ID);\n+    dbWorkspace.setWorkspaceNamespace(WORKSPACE_NAMESPACE);\n+    dbWorkspace.setFirecloudName(WORKSPACE_FIRECLOUD_NAME);\n+    when(mockWorkspaceService.getByNamespace(WORKSPACE_NAMESPACE)).thenReturn(dbWorkspace);\n+    firecloudUserRoles.add(new UserRole().email(USER_EMAIL));\n+    when(mockWorkspaceService.getFirecloudUserRoles(WORKSPACE_NAMESPACE, WORKSPACE_FIRECLOUD_NAME))\n+        .thenReturn(firecloudUserRoles);\n+  }\n+\n+  Set<String> extractValuesFromEvents(\n+      Collection<ActionAuditEvent> events, Function<ActionAuditEvent, String> fn) {\n+    return events.stream().map(fn).collect(Collectors.toSet());\n+  }\n+\n+  @Test\n+  public void testFireEgressEvent() {\n+    sumoLogicAuditor.fireEgressEvent(\n+        new EgressEvent()\n+            .projectName(EGRESS_EVENT_PROJECT_NAME)\n+            .vmName(EGRESS_EVENT_VM_NAME)\n+            .timeWindowStart(0l)\n+            .egressMib(12.3));\n+    verify(mockActionAuditService).send(eventsCaptor.capture());\n+    Collection<ActionAuditEvent> events = eventsCaptor.getValue();\n+\n+    // Ensure all events have the expected set of constant fields.\n+    assertThat(events.stream().map(event -> event.getAgentType()).collect(Collectors.toSet()))\n+        .containsExactly(AgentType.USER);\n+    assertThat(events.stream().map(event -> event.getActionType()).collect(Collectors.toSet()))\n+        .containsExactly(ActionType.HIGH_EGRESS);\n+    assertThat(events.stream().map(event -> event.getAgentId()).collect(Collectors.toSet()))\n+        .containsExactly(USER_ID);\n+    assertThat(events.stream().map(event -> event.getAgentEmailMaybe()).collect(Collectors.toSet()))\n+        .containsExactly(USER_EMAIL);\n+    assertThat(events.stream().map(event -> event.getTargetIdMaybe()).collect(Collectors.toSet()))\n+        .containsExactly(WORKSPACE_ID);\n+\n+    // We should have distinct event rows with values from the egress event.\n+    assertThat(\n+            events.stream()\n+                .filter(\n+                    event ->\n+                        event.getTargetPropertyMaybe()\n+                            == EgressEventTargetProperty.EGRESS_MIB.getPropertyName())\n+                .map(event -> event.getNewValueMaybe())\n+                .collect(Collectors.toSet()))\n+        .containsExactly(\"12.3\");\n+    assertThat(\n+            events.stream()\n+                .filter(\n+                    event ->\n+                        event.getTargetPropertyMaybe()\n+                            == EgressEventTargetProperty.VM_NAME.getPropertyName())", "originalCommit": "1d0f988ad163b5075cfdb90f4febaba13db7d7c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA5MTM4MQ==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r368091381", "bodyText": "Ah, I always forget about that. Done.", "author": "gjuggler", "createdAt": "2020-01-17T19:09:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc1MjYwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc1Mjg4Mg==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r367752882", "bodyText": "This is kind of scary. I'd instead do a  .filter(Objects::nonNull) and assert that the set is empty.", "author": "jaycarlton", "createdAt": "2020-01-17T03:20:06Z", "path": "api/src/test/java/org/pmiops/workbench/actionaudit/auditors/SumoLogicAuditorTest.java", "diffHunk": "@@ -0,0 +1,216 @@\n+package org.pmiops.workbench.actionaudit.auditors;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.pmiops.workbench.actionaudit.ActionAuditEvent;\n+import org.pmiops.workbench.actionaudit.ActionAuditService;\n+import org.pmiops.workbench.actionaudit.ActionType;\n+import org.pmiops.workbench.actionaudit.AgentType;\n+import org.pmiops.workbench.actionaudit.targetproperties.EgressEventCommentTargetProperty;\n+import org.pmiops.workbench.actionaudit.targetproperties.EgressEventTargetProperty;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.exceptions.BadRequestException;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.pmiops.workbench.model.EgressEventRequest;\n+import org.pmiops.workbench.model.UserRole;\n+import org.pmiops.workbench.workspaces.WorkspaceService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+public class SumoLogicAuditorTest {\n+\n+  private static final long USER_ID = 1L;\n+  private static final String USER_EMAIL = \"user@researchallofus.org\";\n+  private static final long WORKSPACE_ID = 1L;\n+  private static final String WORKSPACE_NAMESPACE = \"aou-rw-test-c7dec260\";\n+  private static final String WORKSPACE_FIRECLOUD_NAME = \"mytestworkspacename\";\n+\n+  private static final String EGRESS_EVENT_PROJECT_NAME = WORKSPACE_NAMESPACE;\n+  private static final String EGRESS_EVENT_VM_NAME = \"all-of-us-\" + USER_ID + \"-m\";\n+\n+  // Pre-built data objects for test.\n+  private DbUser dbUser;\n+  private DbWorkspace dbWorkspace;\n+  private List<UserRole> firecloudUserRoles = new ArrayList<>();\n+\n+  @Autowired private SumoLogicAuditor sumoLogicAuditor;\n+\n+  @MockBean private ActionAuditService mockActionAuditService;\n+  @MockBean private WorkspaceService mockWorkspaceService;\n+  @MockBean private UserDao mockUserDao;\n+\n+  @Captor private ArgumentCaptor<Collection<ActionAuditEvent>> eventsCaptor;\n+\n+  @Rule public final ExpectedException exception = ExpectedException.none();\n+\n+  @Before\n+  public void setUp() {\n+    dbUser = new DbUser();\n+    dbUser.setUserId(USER_ID);\n+    dbUser.setUsername(USER_EMAIL);\n+    when(mockUserDao.findUserByUsername(USER_EMAIL)).thenReturn(dbUser);\n+\n+    dbWorkspace = new DbWorkspace();\n+    dbWorkspace.setWorkspaceId(WORKSPACE_ID);\n+    dbWorkspace.setWorkspaceNamespace(WORKSPACE_NAMESPACE);\n+    dbWorkspace.setFirecloudName(WORKSPACE_FIRECLOUD_NAME);\n+    when(mockWorkspaceService.getByNamespace(WORKSPACE_NAMESPACE)).thenReturn(dbWorkspace);\n+    firecloudUserRoles.add(new UserRole().email(USER_EMAIL));\n+    when(mockWorkspaceService.getFirecloudUserRoles(WORKSPACE_NAMESPACE, WORKSPACE_FIRECLOUD_NAME))\n+        .thenReturn(firecloudUserRoles);\n+  }\n+\n+  Set<String> extractValuesFromEvents(\n+      Collection<ActionAuditEvent> events, Function<ActionAuditEvent, String> fn) {\n+    return events.stream().map(fn).collect(Collectors.toSet());\n+  }\n+\n+  @Test\n+  public void testFireEgressEvent() {\n+    sumoLogicAuditor.fireEgressEvent(\n+        new EgressEvent()\n+            .projectName(EGRESS_EVENT_PROJECT_NAME)\n+            .vmName(EGRESS_EVENT_VM_NAME)\n+            .timeWindowStart(0l)\n+            .egressMib(12.3));\n+    verify(mockActionAuditService).send(eventsCaptor.capture());\n+    Collection<ActionAuditEvent> events = eventsCaptor.getValue();\n+\n+    // Ensure all events have the expected set of constant fields.\n+    assertThat(events.stream().map(event -> event.getAgentType()).collect(Collectors.toSet()))\n+        .containsExactly(AgentType.USER);\n+    assertThat(events.stream().map(event -> event.getActionType()).collect(Collectors.toSet()))\n+        .containsExactly(ActionType.HIGH_EGRESS);\n+    assertThat(events.stream().map(event -> event.getAgentId()).collect(Collectors.toSet()))\n+        .containsExactly(USER_ID);\n+    assertThat(events.stream().map(event -> event.getAgentEmailMaybe()).collect(Collectors.toSet()))\n+        .containsExactly(USER_EMAIL);\n+    assertThat(events.stream().map(event -> event.getTargetIdMaybe()).collect(Collectors.toSet()))\n+        .containsExactly(WORKSPACE_ID);\n+\n+    // We should have distinct event rows with values from the egress event.\n+    assertThat(\n+            events.stream()\n+                .filter(\n+                    event ->\n+                        event.getTargetPropertyMaybe()\n+                            == EgressEventTargetProperty.EGRESS_MIB.getPropertyName())\n+                .map(event -> event.getNewValueMaybe())\n+                .collect(Collectors.toSet()))\n+        .containsExactly(\"12.3\");\n+    assertThat(\n+            events.stream()\n+                .filter(\n+                    event ->\n+                        event.getTargetPropertyMaybe()\n+                            == EgressEventTargetProperty.VM_NAME.getPropertyName())\n+                .map(event -> event.getNewValueMaybe())\n+                .collect(Collectors.toSet()))\n+        .containsExactly(EGRESS_EVENT_VM_NAME);\n+  }\n+\n+  @Test\n+  public void testNoWorkspaceFound() {\n+    exception.expect(BadRequestException.class);\n+\n+    // When the workspace lookup doesn't succeed, the event is filed w/ a system agent and an\n+    // empty target ID.\n+    when(mockWorkspaceService.getByNamespace(WORKSPACE_NAMESPACE)).thenReturn(null);\n+    sumoLogicAuditor.fireEgressEvent(\n+        new EgressEvent().projectName(EGRESS_EVENT_PROJECT_NAME).vmName(EGRESS_EVENT_VM_NAME));\n+    verify(mockActionAuditService).send(eventsCaptor.capture());\n+    Collection<ActionAuditEvent> events = eventsCaptor.getValue();\n+\n+    // Some of the properties should be nulled out, since we can't identify the target workspace\n+    // for the egress event.\n+    assertThat(events.stream().map(event -> event.getAgentId()).collect(Collectors.toSet()))\n+        .containsExactly(0);\n+    assertThat(events.stream().map(event -> event.getAgentEmailMaybe()).collect(Collectors.toSet()))\n+        .containsExactly((Object[]) null);", "originalCommit": "1d0f988ad163b5075cfdb90f4febaba13db7d7c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA5MjUyNA==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r368092524", "bodyText": "Good idea \u2013\u00a0done.", "author": "gjuggler", "createdAt": "2020-01-17T19:11:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc1Mjg4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc1MzA3Mw==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r367753073", "bodyText": "nit: If the array isn't valid JSON, I would've expected a lower-level exception to be thrown first.", "author": "jaycarlton", "createdAt": "2020-01-17T03:21:06Z", "path": "api/src/test/java/org/pmiops/workbench/actionaudit/auditors/SumoLogicAuditorTest.java", "diffHunk": "@@ -0,0 +1,216 @@\n+package org.pmiops.workbench.actionaudit.auditors;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.pmiops.workbench.actionaudit.ActionAuditEvent;\n+import org.pmiops.workbench.actionaudit.ActionAuditService;\n+import org.pmiops.workbench.actionaudit.ActionType;\n+import org.pmiops.workbench.actionaudit.AgentType;\n+import org.pmiops.workbench.actionaudit.targetproperties.EgressEventCommentTargetProperty;\n+import org.pmiops.workbench.actionaudit.targetproperties.EgressEventTargetProperty;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.exceptions.BadRequestException;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.pmiops.workbench.model.EgressEventRequest;\n+import org.pmiops.workbench.model.UserRole;\n+import org.pmiops.workbench.workspaces.WorkspaceService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+public class SumoLogicAuditorTest {\n+\n+  private static final long USER_ID = 1L;\n+  private static final String USER_EMAIL = \"user@researchallofus.org\";\n+  private static final long WORKSPACE_ID = 1L;\n+  private static final String WORKSPACE_NAMESPACE = \"aou-rw-test-c7dec260\";\n+  private static final String WORKSPACE_FIRECLOUD_NAME = \"mytestworkspacename\";\n+\n+  private static final String EGRESS_EVENT_PROJECT_NAME = WORKSPACE_NAMESPACE;\n+  private static final String EGRESS_EVENT_VM_NAME = \"all-of-us-\" + USER_ID + \"-m\";\n+\n+  // Pre-built data objects for test.\n+  private DbUser dbUser;\n+  private DbWorkspace dbWorkspace;\n+  private List<UserRole> firecloudUserRoles = new ArrayList<>();\n+\n+  @Autowired private SumoLogicAuditor sumoLogicAuditor;\n+\n+  @MockBean private ActionAuditService mockActionAuditService;\n+  @MockBean private WorkspaceService mockWorkspaceService;\n+  @MockBean private UserDao mockUserDao;\n+\n+  @Captor private ArgumentCaptor<Collection<ActionAuditEvent>> eventsCaptor;\n+\n+  @Rule public final ExpectedException exception = ExpectedException.none();\n+\n+  @Before\n+  public void setUp() {\n+    dbUser = new DbUser();\n+    dbUser.setUserId(USER_ID);\n+    dbUser.setUsername(USER_EMAIL);\n+    when(mockUserDao.findUserByUsername(USER_EMAIL)).thenReturn(dbUser);\n+\n+    dbWorkspace = new DbWorkspace();\n+    dbWorkspace.setWorkspaceId(WORKSPACE_ID);\n+    dbWorkspace.setWorkspaceNamespace(WORKSPACE_NAMESPACE);\n+    dbWorkspace.setFirecloudName(WORKSPACE_FIRECLOUD_NAME);\n+    when(mockWorkspaceService.getByNamespace(WORKSPACE_NAMESPACE)).thenReturn(dbWorkspace);\n+    firecloudUserRoles.add(new UserRole().email(USER_EMAIL));\n+    when(mockWorkspaceService.getFirecloudUserRoles(WORKSPACE_NAMESPACE, WORKSPACE_FIRECLOUD_NAME))\n+        .thenReturn(firecloudUserRoles);\n+  }\n+\n+  Set<String> extractValuesFromEvents(\n+      Collection<ActionAuditEvent> events, Function<ActionAuditEvent, String> fn) {\n+    return events.stream().map(fn).collect(Collectors.toSet());\n+  }\n+\n+  @Test\n+  public void testFireEgressEvent() {\n+    sumoLogicAuditor.fireEgressEvent(\n+        new EgressEvent()\n+            .projectName(EGRESS_EVENT_PROJECT_NAME)\n+            .vmName(EGRESS_EVENT_VM_NAME)\n+            .timeWindowStart(0l)\n+            .egressMib(12.3));\n+    verify(mockActionAuditService).send(eventsCaptor.capture());\n+    Collection<ActionAuditEvent> events = eventsCaptor.getValue();\n+\n+    // Ensure all events have the expected set of constant fields.\n+    assertThat(events.stream().map(event -> event.getAgentType()).collect(Collectors.toSet()))\n+        .containsExactly(AgentType.USER);\n+    assertThat(events.stream().map(event -> event.getActionType()).collect(Collectors.toSet()))\n+        .containsExactly(ActionType.HIGH_EGRESS);\n+    assertThat(events.stream().map(event -> event.getAgentId()).collect(Collectors.toSet()))\n+        .containsExactly(USER_ID);\n+    assertThat(events.stream().map(event -> event.getAgentEmailMaybe()).collect(Collectors.toSet()))\n+        .containsExactly(USER_EMAIL);\n+    assertThat(events.stream().map(event -> event.getTargetIdMaybe()).collect(Collectors.toSet()))\n+        .containsExactly(WORKSPACE_ID);\n+\n+    // We should have distinct event rows with values from the egress event.\n+    assertThat(\n+            events.stream()\n+                .filter(\n+                    event ->\n+                        event.getTargetPropertyMaybe()\n+                            == EgressEventTargetProperty.EGRESS_MIB.getPropertyName())\n+                .map(event -> event.getNewValueMaybe())\n+                .collect(Collectors.toSet()))\n+        .containsExactly(\"12.3\");\n+    assertThat(\n+            events.stream()\n+                .filter(\n+                    event ->\n+                        event.getTargetPropertyMaybe()\n+                            == EgressEventTargetProperty.VM_NAME.getPropertyName())\n+                .map(event -> event.getNewValueMaybe())\n+                .collect(Collectors.toSet()))\n+        .containsExactly(EGRESS_EVENT_VM_NAME);\n+  }\n+\n+  @Test\n+  public void testNoWorkspaceFound() {\n+    exception.expect(BadRequestException.class);\n+\n+    // When the workspace lookup doesn't succeed, the event is filed w/ a system agent and an\n+    // empty target ID.\n+    when(mockWorkspaceService.getByNamespace(WORKSPACE_NAMESPACE)).thenReturn(null);\n+    sumoLogicAuditor.fireEgressEvent(\n+        new EgressEvent().projectName(EGRESS_EVENT_PROJECT_NAME).vmName(EGRESS_EVENT_VM_NAME));\n+    verify(mockActionAuditService).send(eventsCaptor.capture());\n+    Collection<ActionAuditEvent> events = eventsCaptor.getValue();\n+\n+    // Some of the properties should be nulled out, since we can't identify the target workspace\n+    // for the egress event.\n+    assertThat(events.stream().map(event -> event.getAgentId()).collect(Collectors.toSet()))\n+        .containsExactly(0);\n+    assertThat(events.stream().map(event -> event.getAgentEmailMaybe()).collect(Collectors.toSet()))\n+        .containsExactly((Object[]) null);\n+    assertThat(events.stream().map(event -> event.getTargetIdMaybe()).collect(Collectors.toSet()))\n+        .containsExactly((Object[]) null);\n+\n+    // We expect to see an audit event row with a comment describing the issue encountered when\n+    // trying to handle the high-egress message.\n+    assertThat(\n+            events.stream()\n+                .filter(\n+                    event ->\n+                        event.getTargetPropertyMaybe()\n+                            == EgressEventCommentTargetProperty.COMMENT.getPropertyName())\n+                .map(event -> event.getNewValueMaybe())\n+                .findFirst()\n+                .get())\n+        .contains(\"Failed to find workspace\");\n+  }\n+\n+  @Test\n+  public void testFailedParsing() {\n+    // When the inbound request parsing fails, an event is logged at the system agent.\n+    when(mockWorkspaceService.getByNamespace(WORKSPACE_NAMESPACE)).thenReturn(null);\n+    sumoLogicAuditor.fireFailedToParseEgressEvent(new EgressEventRequest().eventsJsonArray(\"asdf\"));", "originalCommit": "1d0f988ad163b5075cfdb90f4febaba13db7d7c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA5MjY5Mg==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r368092692", "bodyText": "\ud83e\udd37\u200d\u2642", "author": "gjuggler", "createdAt": "2020-01-17T19:12:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc1MzA3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODEzOTIwNg==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r368139206", "bodyText": "Except that your controller is passing it in internally, so this makes sense.", "author": "jaycarlton", "createdAt": "2020-01-17T21:14:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc1MzA3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc1MzE5MA==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r367753190", "bodyText": "nit: Oh, I'm used to seeing these at the top.", "author": "jaycarlton", "createdAt": "2020-01-17T03:21:44Z", "path": "api/src/test/java/org/pmiops/workbench/actionaudit/auditors/SumoLogicAuditorTest.java", "diffHunk": "@@ -0,0 +1,216 @@\n+package org.pmiops.workbench.actionaudit.auditors;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.pmiops.workbench.actionaudit.ActionAuditEvent;\n+import org.pmiops.workbench.actionaudit.ActionAuditService;\n+import org.pmiops.workbench.actionaudit.ActionType;\n+import org.pmiops.workbench.actionaudit.AgentType;\n+import org.pmiops.workbench.actionaudit.targetproperties.EgressEventCommentTargetProperty;\n+import org.pmiops.workbench.actionaudit.targetproperties.EgressEventTargetProperty;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.exceptions.BadRequestException;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.pmiops.workbench.model.EgressEventRequest;\n+import org.pmiops.workbench.model.UserRole;\n+import org.pmiops.workbench.workspaces.WorkspaceService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+public class SumoLogicAuditorTest {\n+\n+  private static final long USER_ID = 1L;\n+  private static final String USER_EMAIL = \"user@researchallofus.org\";\n+  private static final long WORKSPACE_ID = 1L;\n+  private static final String WORKSPACE_NAMESPACE = \"aou-rw-test-c7dec260\";\n+  private static final String WORKSPACE_FIRECLOUD_NAME = \"mytestworkspacename\";\n+\n+  private static final String EGRESS_EVENT_PROJECT_NAME = WORKSPACE_NAMESPACE;\n+  private static final String EGRESS_EVENT_VM_NAME = \"all-of-us-\" + USER_ID + \"-m\";\n+\n+  // Pre-built data objects for test.\n+  private DbUser dbUser;\n+  private DbWorkspace dbWorkspace;\n+  private List<UserRole> firecloudUserRoles = new ArrayList<>();\n+\n+  @Autowired private SumoLogicAuditor sumoLogicAuditor;\n+\n+  @MockBean private ActionAuditService mockActionAuditService;\n+  @MockBean private WorkspaceService mockWorkspaceService;\n+  @MockBean private UserDao mockUserDao;\n+\n+  @Captor private ArgumentCaptor<Collection<ActionAuditEvent>> eventsCaptor;\n+\n+  @Rule public final ExpectedException exception = ExpectedException.none();\n+\n+  @Before\n+  public void setUp() {\n+    dbUser = new DbUser();\n+    dbUser.setUserId(USER_ID);\n+    dbUser.setUsername(USER_EMAIL);\n+    when(mockUserDao.findUserByUsername(USER_EMAIL)).thenReturn(dbUser);\n+\n+    dbWorkspace = new DbWorkspace();\n+    dbWorkspace.setWorkspaceId(WORKSPACE_ID);\n+    dbWorkspace.setWorkspaceNamespace(WORKSPACE_NAMESPACE);\n+    dbWorkspace.setFirecloudName(WORKSPACE_FIRECLOUD_NAME);\n+    when(mockWorkspaceService.getByNamespace(WORKSPACE_NAMESPACE)).thenReturn(dbWorkspace);\n+    firecloudUserRoles.add(new UserRole().email(USER_EMAIL));\n+    when(mockWorkspaceService.getFirecloudUserRoles(WORKSPACE_NAMESPACE, WORKSPACE_FIRECLOUD_NAME))\n+        .thenReturn(firecloudUserRoles);\n+  }\n+\n+  Set<String> extractValuesFromEvents(\n+      Collection<ActionAuditEvent> events, Function<ActionAuditEvent, String> fn) {\n+    return events.stream().map(fn).collect(Collectors.toSet());\n+  }\n+\n+  @Test\n+  public void testFireEgressEvent() {\n+    sumoLogicAuditor.fireEgressEvent(\n+        new EgressEvent()\n+            .projectName(EGRESS_EVENT_PROJECT_NAME)\n+            .vmName(EGRESS_EVENT_VM_NAME)\n+            .timeWindowStart(0l)\n+            .egressMib(12.3));\n+    verify(mockActionAuditService).send(eventsCaptor.capture());\n+    Collection<ActionAuditEvent> events = eventsCaptor.getValue();\n+\n+    // Ensure all events have the expected set of constant fields.\n+    assertThat(events.stream().map(event -> event.getAgentType()).collect(Collectors.toSet()))\n+        .containsExactly(AgentType.USER);\n+    assertThat(events.stream().map(event -> event.getActionType()).collect(Collectors.toSet()))\n+        .containsExactly(ActionType.HIGH_EGRESS);\n+    assertThat(events.stream().map(event -> event.getAgentId()).collect(Collectors.toSet()))\n+        .containsExactly(USER_ID);\n+    assertThat(events.stream().map(event -> event.getAgentEmailMaybe()).collect(Collectors.toSet()))\n+        .containsExactly(USER_EMAIL);\n+    assertThat(events.stream().map(event -> event.getTargetIdMaybe()).collect(Collectors.toSet()))\n+        .containsExactly(WORKSPACE_ID);\n+\n+    // We should have distinct event rows with values from the egress event.\n+    assertThat(\n+            events.stream()\n+                .filter(\n+                    event ->\n+                        event.getTargetPropertyMaybe()\n+                            == EgressEventTargetProperty.EGRESS_MIB.getPropertyName())\n+                .map(event -> event.getNewValueMaybe())\n+                .collect(Collectors.toSet()))\n+        .containsExactly(\"12.3\");\n+    assertThat(\n+            events.stream()\n+                .filter(\n+                    event ->\n+                        event.getTargetPropertyMaybe()\n+                            == EgressEventTargetProperty.VM_NAME.getPropertyName())\n+                .map(event -> event.getNewValueMaybe())\n+                .collect(Collectors.toSet()))\n+        .containsExactly(EGRESS_EVENT_VM_NAME);\n+  }\n+\n+  @Test\n+  public void testNoWorkspaceFound() {\n+    exception.expect(BadRequestException.class);\n+\n+    // When the workspace lookup doesn't succeed, the event is filed w/ a system agent and an\n+    // empty target ID.\n+    when(mockWorkspaceService.getByNamespace(WORKSPACE_NAMESPACE)).thenReturn(null);\n+    sumoLogicAuditor.fireEgressEvent(\n+        new EgressEvent().projectName(EGRESS_EVENT_PROJECT_NAME).vmName(EGRESS_EVENT_VM_NAME));\n+    verify(mockActionAuditService).send(eventsCaptor.capture());\n+    Collection<ActionAuditEvent> events = eventsCaptor.getValue();\n+\n+    // Some of the properties should be nulled out, since we can't identify the target workspace\n+    // for the egress event.\n+    assertThat(events.stream().map(event -> event.getAgentId()).collect(Collectors.toSet()))\n+        .containsExactly(0);\n+    assertThat(events.stream().map(event -> event.getAgentEmailMaybe()).collect(Collectors.toSet()))\n+        .containsExactly((Object[]) null);\n+    assertThat(events.stream().map(event -> event.getTargetIdMaybe()).collect(Collectors.toSet()))\n+        .containsExactly((Object[]) null);\n+\n+    // We expect to see an audit event row with a comment describing the issue encountered when\n+    // trying to handle the high-egress message.\n+    assertThat(\n+            events.stream()\n+                .filter(\n+                    event ->\n+                        event.getTargetPropertyMaybe()\n+                            == EgressEventCommentTargetProperty.COMMENT.getPropertyName())\n+                .map(event -> event.getNewValueMaybe())\n+                .findFirst()\n+                .get())\n+        .contains(\"Failed to find workspace\");\n+  }\n+\n+  @Test\n+  public void testFailedParsing() {\n+    // When the inbound request parsing fails, an event is logged at the system agent.\n+    when(mockWorkspaceService.getByNamespace(WORKSPACE_NAMESPACE)).thenReturn(null);\n+    sumoLogicAuditor.fireFailedToParseEgressEvent(new EgressEventRequest().eventsJsonArray(\"asdf\"));\n+    verify(mockActionAuditService).send(eventsCaptor.capture());\n+    Collection<ActionAuditEvent> events = eventsCaptor.getValue();\n+\n+    assertThat(\n+            events.stream()\n+                .filter(\n+                    event ->\n+                        event.getTargetPropertyMaybe()\n+                            == EgressEventCommentTargetProperty.COMMENT.getPropertyName())\n+                .map(event -> event.getNewValueMaybe())\n+                .findFirst()\n+                .get())\n+        .contains(\"Failed to parse egress event\");\n+  }\n+\n+  @Test\n+  public void testBadApiKey() {\n+    // When the inbound request parsing fails, an event is logged at the system agent.\n+    when(mockWorkspaceService.getByNamespace(WORKSPACE_NAMESPACE)).thenReturn(null);\n+    sumoLogicAuditor.fireBadApiKeyEgressEvent(\"ASDF\", new EgressEventRequest());\n+    verify(mockActionAuditService).send(eventsCaptor.capture());\n+    Collection<ActionAuditEvent> events = eventsCaptor.getValue();\n+\n+    assertThat(\n+            events.stream()\n+                .filter(\n+                    event ->\n+                        event.getTargetPropertyMaybe()\n+                            == EgressEventCommentTargetProperty.COMMENT.getPropertyName())\n+                .map(event -> event.getNewValueMaybe())\n+                .findFirst()\n+                .get())\n+        .contains(\"Received bad API key\");\n+  }\n+\n+  @TestConfiguration", "originalCommit": "1d0f988ad163b5075cfdb90f4febaba13db7d7c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA5Mjc4OA==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r368092788", "bodyText": "Yeah I don't know why these ended up down here... moved back up.", "author": "gjuggler", "createdAt": "2020-01-17T19:12:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc1MzE5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc1MzU1MA==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r367753550", "bodyText": "nit: I'd use a Duration object and then call toSecionds() or w/e.", "author": "jaycarlton", "createdAt": "2020-01-17T03:23:59Z", "path": "api/src/test/java/org/pmiops/workbench/api/SumoLogicControllerTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package org.pmiops.workbench.api;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.time.Instant;\n+import java.util.Arrays;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.actionaudit.auditors.SumoLogicAuditor;\n+import org.pmiops.workbench.exceptions.BadRequestException;\n+import org.pmiops.workbench.exceptions.UnauthorizedException;\n+import org.pmiops.workbench.google.CloudStorageService;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.pmiops.workbench.model.EgressEventRequest;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+public class SumoLogicControllerTest {\n+\n+  private static final String API_KEY = \"12345\";\n+\n+  @MockBean private SumoLogicAuditor sumoLogicAuditor;\n+  @MockBean private CloudStorageService cloudStorageService;\n+\n+  @Autowired private SumoLogicController sumoLogicController;\n+\n+  @Rule public final ExpectedException exception = ExpectedException.none();\n+\n+  private EgressEventRequest request;\n+  private EgressEvent event;\n+\n+  private ObjectMapper mapper = new ObjectMapper();\n+\n+  @TestConfiguration\n+  @Import({SumoLogicController.class})\n+  static class Configuration {}\n+\n+  @Before\n+  public void setUp() throws JsonProcessingException {\n+    event = new EgressEvent();\n+    event.setProjectName(\"aou-rw-test-c7dec260\");\n+    event.setEgressMibThreshold(100.0);\n+    event.setEgressMib(123.0);\n+    event.setEnvironment(EgressEvent.EnvironmentEnum.TEST);\n+    event.setTimeWindowDuration(300L);", "originalCommit": "1d0f988ad163b5075cfdb90f4febaba13db7d7c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA5MzYwOQ==", "url": "https://github.com/all-of-us/workbench/pull/2992#discussion_r368093609", "bodyText": "Heh... it reads as a bit repetitive, but it does add clarity. Done.", "author": "gjuggler", "createdAt": "2020-01-17T19:14:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc1MzU1MA=="}], "type": "inlineReview"}, {"oid": "aa3b5cb2ff93e9a226ba95ce9a51579a336010e6", "url": "https://github.com/all-of-us/workbench/commit/aa3b5cb2ff93e9a226ba95ce9a51579a336010e6", "message": "Respond to PR comments.", "committedDate": "2020-01-17T19:20:00Z", "type": "commit"}, {"oid": "9d8ea4b28a248e9c24ab5d0017284f73daa2ff48", "url": "https://github.com/all-of-us/workbench/commit/9d8ea4b28a248e9c24ab5d0017284f73daa2ff48", "message": "Add a few extra class comments.", "committedDate": "2020-01-17T19:35:06Z", "type": "commit"}, {"oid": "ec5c28b6a82a3658d27bb00e7e8d0c666e48ae9c", "url": "https://github.com/all-of-us/workbench/commit/ec5c28b6a82a3658d27bb00e7e8d0c666e48ae9c", "message": "Rename high-egress action type.", "committedDate": "2020-01-19T16:42:52Z", "type": "commit"}]}