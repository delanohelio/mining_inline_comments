{"pr_number": 3117, "pr_title": "[risk=low][RW-3407] Workspace Admin UI", "pr_createdAt": "2020-02-11T21:17:05Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3117", "timeline": [{"oid": "322039cdf01e041c03d0b3fe5a8d936b41de6d56", "url": "https://github.com/all-of-us/workbench/commit/322039cdf01e041c03d0b3fe5a8d936b41de6d56", "message": "get clusters for gcp project id", "committedDate": "2020-02-11T21:19:27Z", "type": "commit"}, {"oid": "7bf1eaf93b1aecd5b01c2206620d74931fa7634a", "url": "https://github.com/all-of-us/workbench/commit/7bf1eaf93b1aecd5b01c2206620d74931fa7634a", "message": "stashing.", "committedDate": "2020-02-11T21:20:03Z", "type": "commit"}, {"oid": "fb151ce0e0cf774b3a803f949a1129d9482d73ed", "url": "https://github.com/all-of-us/workbench/commit/fb151ce0e0cf774b3a803f949a1129d9482d73ed", "message": "ok got workspace info now", "committedDate": "2020-02-11T21:20:03Z", "type": "commit"}, {"oid": "2dec2bfe273d7032e90cd6eedaf91f6776b7c4b2", "url": "https://github.com/all-of-us/workbench/commit/2dec2bfe273d7032e90cd6eedaf91f6776b7c4b2", "message": "workspace objects", "committedDate": "2020-02-11T21:20:40Z", "type": "commit"}, {"oid": "5131284e012e0d1e4d76efd7f93fd655edd81b18", "url": "https://github.com/all-of-us/workbench/commit/5131284e012e0d1e4d76efd7f93fd655edd81b18", "message": "more data, small refactor", "committedDate": "2020-02-11T21:20:40Z", "type": "commit"}, {"oid": "d8eec70d5d7456900330124f66efa92c82095519", "url": "https://github.com/all-of-us/workbench/commit/d8eec70d5d7456900330124f66efa92c82095519", "message": "styling", "committedDate": "2020-02-11T21:20:40Z", "type": "commit"}, {"oid": "af1b052d4d6ee48fb7f3e67c80d7f058e1233c67", "url": "https://github.com/all-of-us/workbench/commit/af1b052d4d6ee48fb7f3e67c80d7f058e1233c67", "message": "clusters", "committedDate": "2020-02-11T21:20:40Z", "type": "commit"}, {"oid": "b47c3fee2efbd487aaef5a7b7d4965dc45fc9b7d", "url": "https://github.com/all-of-us/workbench/commit/b47c3fee2efbd487aaef5a7b7d4965dc45fc9b7d", "message": "expando + research purpose", "committedDate": "2020-02-11T21:20:40Z", "type": "commit"}, {"oid": "8585e137c7599b657884ce796e1266a21f448a00", "url": "https://github.com/all-of-us/workbench/commit/8585e137c7599b657884ce796e1266a21f448a00", "message": "small refactors", "committedDate": "2020-02-11T21:20:40Z", "type": "commit"}, {"oid": "efd09e908424d11f75317f67c52d9adf79a0eda9", "url": "https://github.com/all-of-us/workbench/commit/efd09e908424d11f75317f67c52d9adf79a0eda9", "message": "linting", "committedDate": "2020-02-11T21:20:40Z", "type": "commit"}, {"oid": "efd09e908424d11f75317f67c52d9adf79a0eda9", "url": "https://github.com/all-of-us/workbench/commit/efd09e908424d11f75317f67c52d9adf79a0eda9", "message": "linting", "committedDate": "2020-02-11T21:20:40Z", "type": "forcePushed"}, {"oid": "e08f465be337ef7ff50a6979b3a748bedf00db2d", "url": "https://github.com/all-of-us/workbench/commit/e08f465be337ef7ff50a6979b3a748bedf00db2d", "message": "bad rebase", "committedDate": "2020-02-11T21:23:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM0Mjk4OQ==", "url": "https://github.com/all-of-us/workbench/pull/3117#discussion_r378342989", "bodyText": "style nit: I'd prefer a construction like\nworkspaceMaybe.map(this::getDetailsResponse).orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build())\nover an explicit ifPresent() / get() pair", "author": "jmthibault79", "createdAt": "2020-02-12T15:55:55Z", "path": "api/src/main/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminController.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.pmiops.workbench.workspaceadmin;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.pmiops.workbench.annotations.AuthorityRequired;\n+import org.pmiops.workbench.api.WorkspaceAdminApiDelegate;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.firecloud.FireCloudService;\n+import org.pmiops.workbench.firecloud.model.FirecloudWorkspace;\n+import org.pmiops.workbench.model.AdminFederatedWorkspaceDetailsResponse;\n+import org.pmiops.workbench.model.AdminWorkspaceCloudStorageCounts;\n+import org.pmiops.workbench.model.AdminWorkspaceObjectsCounts;\n+import org.pmiops.workbench.model.AdminWorkspaceResources;\n+import org.pmiops.workbench.model.Authority;\n+import org.pmiops.workbench.model.ClusterStatus;\n+import org.pmiops.workbench.model.ListClusterResponse;\n+import org.pmiops.workbench.model.UserRole;\n+import org.pmiops.workbench.notebooks.LeonardoNotebooksClient;\n+import org.pmiops.workbench.utils.WorkspaceMapper;\n+import org.pmiops.workbench.workspaces.WorkspaceService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+public class WorkspaceAdminController implements WorkspaceAdminApiDelegate {\n+  private final FireCloudService fireCloudService;\n+  private final LeonardoNotebooksClient leonardoNotebooksClient;\n+  private final WorkspaceAdminService workspaceAdminService;\n+  private final WorkspaceMapper workspaceMapper;\n+  private final WorkspaceService workspaceService;\n+\n+  @Autowired\n+  public WorkspaceAdminController(\n+      FireCloudService fireCloudService,\n+      LeonardoNotebooksClient leonardoNotebooksClient,\n+      WorkspaceAdminService workspaceAdminService,\n+      WorkspaceMapper workspaceMapper,\n+      WorkspaceService workspaceService) {\n+    this.fireCloudService = fireCloudService;\n+    this.leonardoNotebooksClient = leonardoNotebooksClient;\n+    this.workspaceAdminService = workspaceAdminService;\n+    this.workspaceMapper = workspaceMapper;\n+    this.workspaceService = workspaceService;\n+  }\n+\n+  @Override\n+  @AuthorityRequired({Authority.WORKSPACES_VIEW})\n+  public ResponseEntity<AdminFederatedWorkspaceDetailsResponse> getFederatedWorkspaceDetails(\n+      String workspaceNamespace) {\n+    Optional<DbWorkspace> workspaceMaybe =\n+        workspaceAdminService.getFirstWorkspaceByNamespace(workspaceNamespace);\n+    if (workspaceMaybe.isPresent()) {", "originalCommit": "e08f465be337ef7ff50a6979b3a748bedf00db2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0NzcwOA==", "url": "https://github.com/all-of-us/workbench/pull/3117#discussion_r379147708", "bodyText": "map doesn't like that one would be parameterized and the other wouldn't.", "author": "als364", "createdAt": "2020-02-13T22:10:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM0Mjk4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM1MDIyNQ==", "url": "https://github.com/all-of-us/workbench/pull/3117#discussion_r378350225", "bodyText": "I don't love that we have DB objects and IDs in this interface, but looking at other Workspace code I think that is too big a hill to climb for today.  This fits our current state of the world.", "author": "jmthibault79", "createdAt": "2020-02-12T16:06:21Z", "path": "api/src/main/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminService.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package org.pmiops.workbench.workspaceadmin;\n+\n+import java.util.Optional;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.model.AdminWorkspaceCloudStorageCounts;\n+import org.pmiops.workbench.model.AdminWorkspaceObjectsCounts;\n+\n+public interface WorkspaceAdminService {", "originalCommit": "e08f465be337ef7ff50a6979b3a748bedf00db2d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM1MjQyMQ==", "url": "https://github.com/all-of-us/workbench/pull/3117#discussion_r378352421", "bodyText": "can get the stream count() directly here if switching to long is acceptable", "author": "jmthibault79", "createdAt": "2020-02-12T16:09:40Z", "path": "api/src/main/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminServiceImpl.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package org.pmiops.workbench.workspaceadmin;\n+\n+import com.google.cloud.storage.BlobInfo;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.pmiops.workbench.db.dao.CohortDao;\n+import org.pmiops.workbench.db.dao.ConceptSetDao;\n+import org.pmiops.workbench.db.dao.DataSetDao;\n+import org.pmiops.workbench.db.dao.WorkspaceDao;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.firecloud.FireCloudService;\n+import org.pmiops.workbench.google.CloudStorageService;\n+import org.pmiops.workbench.model.AdminWorkspaceCloudStorageCounts;\n+import org.pmiops.workbench.model.AdminWorkspaceObjectsCounts;\n+import org.pmiops.workbench.notebooks.NotebooksService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class WorkspaceAdminServiceImpl implements WorkspaceAdminService {\n+  private final CloudStorageService cloudStorageService;\n+  private final CohortDao cohortDao;\n+  private final ConceptSetDao conceptSetDao;\n+  private final DataSetDao dataSetDao;\n+  private final FireCloudService fireCloudService;\n+  private final NotebooksService notebooksService;\n+  private final WorkspaceDao workspaceDao;\n+\n+  @Autowired\n+  public WorkspaceAdminServiceImpl(\n+      CloudStorageService cloudStorageService,\n+      CohortDao cohortDao,\n+      ConceptSetDao conceptSetDao,\n+      DataSetDao dataSetDao,\n+      FireCloudService fireCloudService,\n+      NotebooksService notebooksService,\n+      WorkspaceDao workspaceDao) {\n+    this.cloudStorageService = cloudStorageService;\n+    this.cohortDao = cohortDao;\n+    this.conceptSetDao = conceptSetDao;\n+    this.dataSetDao = dataSetDao;\n+    this.fireCloudService = fireCloudService;\n+    this.notebooksService = notebooksService;\n+    this.workspaceDao = workspaceDao;\n+  }\n+\n+  @Override\n+  public Optional<DbWorkspace> getFirstWorkspaceByNamespace(String workspaceNamespace) {\n+    return workspaceDao.findFirstByWorkspaceNamespaceOrderByFirecloudNameAsc(workspaceNamespace);\n+  }\n+\n+  @Override\n+  public AdminWorkspaceObjectsCounts getAdminWorkspaceObjects(long workspaceId) {\n+    int cohortCount = cohortDao.countByWorkspaceId(workspaceId);\n+    int conceptSetCount = conceptSetDao.countByWorkspaceId(workspaceId);\n+    int dataSetCount = dataSetDao.countByWorkspaceId(workspaceId);\n+    return new AdminWorkspaceObjectsCounts()\n+        .cohortCount(cohortCount)\n+        .conceptSetCount(conceptSetCount)\n+        .datasetCount(dataSetCount);\n+  }\n+\n+  @Override\n+  public AdminWorkspaceCloudStorageCounts getAdminWorkspaceCloudStorageCounts(\n+      String workspaceNamespace, String workspaceName) {\n+    String bucketName =\n+        fireCloudService\n+            .getWorkspace(workspaceNamespace, workspaceName)\n+            .getWorkspace()\n+            .getBucketName();\n+\n+    int notebookFilesCount =\n+        notebooksService.getNotebooks(workspaceNamespace, workspaceName).size();\n+    int nonNotebookFilesCount = getNonNotebookFileCount(bucketName);\n+    long storageSizeBytes = getStorageSizeBytes(bucketName);\n+\n+    return new AdminWorkspaceCloudStorageCounts()\n+        .notebookFileCount(notebookFilesCount)\n+        .nonNotebookFileCount(nonNotebookFilesCount)\n+        .storageBytesUsed(storageSizeBytes);\n+  }\n+\n+  private int getNonNotebookFileCount(String bucketName) {\n+    return cloudStorageService\n+        .getBlobListForPrefix(bucketName, NotebooksService.NOTEBOOKS_WORKSPACE_DIRECTORY).stream()\n+        .filter(blob -> !NotebooksService.NOTEBOOK_PATTERN.matcher(blob.getName()).matches())\n+        .collect(Collectors.toList())", "originalCommit": "e08f465be337ef7ff50a6979b3a748bedf00db2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUxNDYwOA==", "url": "https://github.com/all-of-us/workbench/pull/3117#discussion_r378514608", "bodyText": "considered it. it makes it a bit ugly in other ways.", "author": "als364", "createdAt": "2020-02-12T21:11:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM1MjQyMQ=="}], "type": "inlineReview"}, {"oid": "f73a21927ca12fcf805672918f605b7df5fc7d07", "url": "https://github.com/all-of-us/workbench/commit/f73a21927ca12fcf805672918f605b7df5fc7d07", "message": "fix test", "committedDate": "2020-02-12T19:09:38Z", "type": "commit"}, {"oid": "a1a753f94f2451af70f53b10d7aa7e5c09b1c4ee", "url": "https://github.com/all-of-us/workbench/commit/a1a753f94f2451af70f53b10d7aa7e5c09b1c4ee", "message": "ui feedback", "committedDate": "2020-02-13T22:06:36Z", "type": "commit"}, {"oid": "8a7c0296d7b60807a1794f718c5fff8eea51874f", "url": "https://github.com/all-of-us/workbench/commit/8a7c0296d7b60807a1794f718c5fff8eea51874f", "message": "lint", "committedDate": "2020-02-14T17:17:02Z", "type": "commit"}, {"oid": "a9e3a80c7ba1efe81213ab570ca9cb0a24259a96", "url": "https://github.com/all-of-us/workbench/commit/a9e3a80c7ba1efe81213ab570ca9cb0a24259a96", "message": "reconfigure styles", "committedDate": "2020-02-14T20:56:03Z", "type": "commit"}, {"oid": "561f7810512269bcb77da4b0ac0c7f89cd773208", "url": "https://github.com/all-of-us/workbench/commit/561f7810512269bcb77da4b0ac0c7f89cd773208", "message": "lint", "committedDate": "2020-02-14T22:25:42Z", "type": "commit"}, {"oid": "e4ba3c9e40c05e3e00336da86ff218f52821689e", "url": "https://github.com/all-of-us/workbench/commit/e4ba3c9e40c05e3e00336da86ff218f52821689e", "message": "new test", "committedDate": "2020-02-18T16:00:59Z", "type": "commit"}]}