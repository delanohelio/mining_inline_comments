{"pr_number": 3813, "pr_title": "[RW-5033][risk=no] Scripts to generate a randomish multisample VCF", "pr_createdAt": "2020-07-21T17:09:16Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3813", "timeline": [{"oid": "613e8421b0c8bb6ce706ab4deddd28afb32e45a8", "url": "https://github.com/all-of-us/workbench/commit/613e8421b0c8bb6ce706ab4deddd28afb32e45a8", "message": "pushing up for environment help", "committedDate": "2020-07-14T14:39:53Z", "type": "commit"}, {"oid": "d8860f2effa560bd3abbab424e3d454810ee04f8", "url": "https://github.com/all-of-us/workbench/commit/d8860f2effa560bd3abbab424e3d454810ee04f8", "message": "now in api/src/main", "committedDate": "2020-07-14T17:33:24Z", "type": "commit"}, {"oid": "2a775e27e261ac499faffc13d9a3212757645aa5", "url": "https://github.com/all-of-us/workbench/commit/2a775e27e261ac499faffc13d9a3212757645aa5", "message": "shelving, again", "committedDate": "2020-07-16T20:31:09Z", "type": "commit"}, {"oid": "2262d418c9099b788a50c3a51af5726bf0e52396", "url": "https://github.com/all-of-us/workbench/commit/2262d418c9099b788a50c3a51af5726bf0e52396", "message": "good staging point", "committedDate": "2020-07-21T14:49:26Z", "type": "commit"}, {"oid": "41051d5190bc89db9350a89e5c6eb99857656b27", "url": "https://github.com/all-of-us/workbench/commit/41051d5190bc89db9350a89e5c6eb99857656b27", "message": "working", "committedDate": "2020-07-21T16:53:22Z", "type": "commit"}, {"oid": "e1480bf2873536150fa23170ef6e82f31cf6d035", "url": "https://github.com/all-of-us/workbench/commit/e1480bf2873536150fa23170ef6e82f31cf6d035", "message": "revert unnecessary top level gradle changes", "committedDate": "2020-07-21T17:08:22Z", "type": "commit"}, {"oid": "6974b7d3292b4f1ad9f3de2f866f11672de14495", "url": "https://github.com/all-of-us/workbench/commit/6974b7d3292b4f1ad9f3de2f866f11672de14495", "message": "spotless...", "committedDate": "2020-07-21T17:49:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI2NTkzNw==", "url": "https://github.com/all-of-us/workbench/pull/3813#discussion_r458265937", "bodyText": "stale comment I think - don't want to change the alleles", "author": "calbach", "createdAt": "2020-07-21T17:25:48Z", "path": "api/genomics/src/main/java/org/pmiops/workbench/genomics/RandomizeVcf.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package org.pmiops.workbench.genomics;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import htsjdk.variant.variantcontext.Allele;\n+import htsjdk.variant.variantcontext.Genotype;\n+import htsjdk.variant.variantcontext.GenotypeBuilder;\n+import htsjdk.variant.variantcontext.GenotypesContext;\n+import htsjdk.variant.variantcontext.VariantContext;\n+import htsjdk.variant.variantcontext.VariantContextBuilder;\n+import htsjdk.variant.variantcontext.writer.VariantContextWriter;\n+import htsjdk.variant.vcf.VCFHeader;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.stream.Collectors;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.engine.FeatureContext;\n+import org.broadinstitute.hellbender.engine.ReadsContext;\n+import org.broadinstitute.hellbender.engine.ReferenceContext;\n+import org.broadinstitute.hellbender.engine.VariantWalker;\n+import picard.cmdline.programgroups.VariantManipulationProgramGroup;\n+\n+@CommandLineProgramProperties(\n+    summary = \"Generates random variant alleles at the same contigs as an example VCF\",\n+    oneLineSummary = \"Randomizes a VCF\",\n+    programGroup = VariantManipulationProgramGroup.class\n+)\n+public class RandomizeVcf extends VariantWalker {\n+  @Argument(doc = \"Output vcf name.\",\n+      fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+      shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME)\n+  protected File outputVcf;\n+\n+  @Argument(doc = \"Sample name suffix.\",\n+      fullName = \"SAMPLE_NAME_SUFFIX\",\n+      shortName = \"S\"\n+  )\n+  protected static String sampleNameSuffix;\n+\n+  static Random random = new Random();\n+\n+  private VariantContextWriter vcfWriter;\n+\n+  @Override\n+  public void apply(VariantContext variant, ReadsContext readsContext,\n+      ReferenceContext referenceContext, FeatureContext featureContext) {\n+    vcfWriter.add(randomizeVariant(variant));\n+  }\n+\n+  @Override\n+  public void onTraversalStart() {\n+    final VCFHeader inputHeader = getHeaderForVariants();\n+    final List<String> newSampleNames = inputHeader.getSampleNamesInOrder().stream()\n+        .map(RandomizeVcf::appendSuffixToSampleName)\n+        .collect(Collectors.toList());\n+    final VCFHeader outputHeader = new VCFHeader(inputHeader.getMetaDataInInputOrder(), newSampleNames);\n+    vcfWriter = this.createVCFWriter(outputVcf);\n+    vcfWriter.writeHeader(outputHeader);\n+  }\n+\n+  @Override\n+  public void closeTool() {\n+    if ( vcfWriter != null ) {\n+      vcfWriter.close();\n+    }\n+  }\n+\n+  @VisibleForTesting\n+  protected static VariantContext randomizeVariant(VariantContext variant) {\n+    // This initializes most of the VariantContextBuilder fields to what they were in the original variant.\n+    // We just want to change the alleles, genotypes, and quality score.", "originalCommit": "e1480bf2873536150fa23170ef6e82f31cf6d035", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4NjA5Mg==", "url": "https://github.com/all-of-us/workbench/pull/3813#discussion_r458286092", "bodyText": "Yes, stale comment, thanks for the catch", "author": "als364", "createdAt": "2020-07-21T17:58:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI2NTkzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI2ODgyNA==", "url": "https://github.com/all-of-us/workbench/pull/3813#discussion_r458268824", "bodyText": "nit: looks like these builder methods can be chained", "author": "calbach", "createdAt": "2020-07-21T17:30:23Z", "path": "api/genomics/src/main/java/org/pmiops/workbench/genomics/RandomizeVcf.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package org.pmiops.workbench.genomics;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import htsjdk.variant.variantcontext.Allele;\n+import htsjdk.variant.variantcontext.Genotype;\n+import htsjdk.variant.variantcontext.GenotypeBuilder;\n+import htsjdk.variant.variantcontext.GenotypesContext;\n+import htsjdk.variant.variantcontext.VariantContext;\n+import htsjdk.variant.variantcontext.VariantContextBuilder;\n+import htsjdk.variant.variantcontext.writer.VariantContextWriter;\n+import htsjdk.variant.vcf.VCFHeader;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.stream.Collectors;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.engine.FeatureContext;\n+import org.broadinstitute.hellbender.engine.ReadsContext;\n+import org.broadinstitute.hellbender.engine.ReferenceContext;\n+import org.broadinstitute.hellbender.engine.VariantWalker;\n+import picard.cmdline.programgroups.VariantManipulationProgramGroup;\n+\n+@CommandLineProgramProperties(\n+    summary = \"Generates random variant alleles at the same contigs as an example VCF\",\n+    oneLineSummary = \"Randomizes a VCF\",\n+    programGroup = VariantManipulationProgramGroup.class\n+)\n+public class RandomizeVcf extends VariantWalker {\n+  @Argument(doc = \"Output vcf name.\",\n+      fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+      shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME)\n+  protected File outputVcf;\n+\n+  @Argument(doc = \"Sample name suffix.\",\n+      fullName = \"SAMPLE_NAME_SUFFIX\",\n+      shortName = \"S\"\n+  )\n+  protected static String sampleNameSuffix;\n+\n+  static Random random = new Random();\n+\n+  private VariantContextWriter vcfWriter;\n+\n+  @Override\n+  public void apply(VariantContext variant, ReadsContext readsContext,\n+      ReferenceContext referenceContext, FeatureContext featureContext) {\n+    vcfWriter.add(randomizeVariant(variant));\n+  }\n+\n+  @Override\n+  public void onTraversalStart() {\n+    final VCFHeader inputHeader = getHeaderForVariants();\n+    final List<String> newSampleNames = inputHeader.getSampleNamesInOrder().stream()\n+        .map(RandomizeVcf::appendSuffixToSampleName)\n+        .collect(Collectors.toList());\n+    final VCFHeader outputHeader = new VCFHeader(inputHeader.getMetaDataInInputOrder(), newSampleNames);\n+    vcfWriter = this.createVCFWriter(outputVcf);\n+    vcfWriter.writeHeader(outputHeader);\n+  }\n+\n+  @Override\n+  public void closeTool() {\n+    if ( vcfWriter != null ) {\n+      vcfWriter.close();\n+    }\n+  }\n+\n+  @VisibleForTesting\n+  protected static VariantContext randomizeVariant(VariantContext variant) {\n+    // This initializes most of the VariantContextBuilder fields to what they were in the original variant.\n+    // We just want to change the alleles, genotypes, and quality score.\n+    VariantContextBuilder variantContextBuilder = new VariantContextBuilder(variant);\n+    variantContextBuilder.alleles(variant.getAlleles());\n+\n+    List<Genotype> randomizedGenotypes = variant.getGenotypes()\n+        .stream()\n+        .map(genotype -> randomizeGenotype(variant, genotype))\n+        .collect(Collectors.toList());\n+    GenotypesContext randomizedGenotypesContext = GenotypesContext.create(new ArrayList<>(randomizedGenotypes));\n+\n+    variantContextBuilder.genotypes(randomizedGenotypesContext);\n+\n+    // We want kind of random error. If there's no error, have no error for the new variant as well.\n+    // If there's error, fuzz the error.\n+    if (variant.hasLog10PError()) {\n+      variantContextBuilder.log10PError(random.nextDouble() * variant.getLog10PError());\n+    }\n+\n+    return variantContextBuilder.make();\n+  }\n+\n+  protected static Genotype randomizeGenotype(VariantContext variantContext, Genotype genotype) {\n+    GenotypeBuilder genotypeBuilder = new GenotypeBuilder();", "originalCommit": "e1480bf2873536150fa23170ef6e82f31cf6d035", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4MDc4Nw==", "url": "https://github.com/all-of-us/workbench/pull/3813#discussion_r458280787", "bodyText": "opt: another way we could do this would be to take the global rate of no-call in the VCF file (just look it up manually and hardcode it here), then pick no call with the corresponding probability. This would probably be better since the current approach will result in strictly fewer no-calls w.r.t. the original VCF, and only in the same positions.\nI was curious so I looked at the frequencies of each genotype in the sample VCF:\n  27629 ./.\n1518493 0/0\n 106755 0/1\n 117349 1/0\n 138615 1/1\n   1123 2/2\n\nPerhaps this randomizer should also favor homozygous reference as well.", "author": "calbach", "createdAt": "2020-07-21T17:49:53Z", "path": "api/genomics/src/main/java/org/pmiops/workbench/genomics/RandomizeVcf.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package org.pmiops.workbench.genomics;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import htsjdk.variant.variantcontext.Allele;\n+import htsjdk.variant.variantcontext.Genotype;\n+import htsjdk.variant.variantcontext.GenotypeBuilder;\n+import htsjdk.variant.variantcontext.GenotypesContext;\n+import htsjdk.variant.variantcontext.VariantContext;\n+import htsjdk.variant.variantcontext.VariantContextBuilder;\n+import htsjdk.variant.variantcontext.writer.VariantContextWriter;\n+import htsjdk.variant.vcf.VCFHeader;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.stream.Collectors;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.engine.FeatureContext;\n+import org.broadinstitute.hellbender.engine.ReadsContext;\n+import org.broadinstitute.hellbender.engine.ReferenceContext;\n+import org.broadinstitute.hellbender.engine.VariantWalker;\n+import picard.cmdline.programgroups.VariantManipulationProgramGroup;\n+\n+@CommandLineProgramProperties(\n+    summary = \"Generates random variant alleles at the same contigs as an example VCF\",\n+    oneLineSummary = \"Randomizes a VCF\",\n+    programGroup = VariantManipulationProgramGroup.class\n+)\n+public class RandomizeVcf extends VariantWalker {\n+  @Argument(doc = \"Output vcf name.\",\n+      fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+      shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME)\n+  protected File outputVcf;\n+\n+  @Argument(doc = \"Sample name suffix.\",\n+      fullName = \"SAMPLE_NAME_SUFFIX\",\n+      shortName = \"S\"\n+  )\n+  protected static String sampleNameSuffix;\n+\n+  static Random random = new Random();\n+\n+  private VariantContextWriter vcfWriter;\n+\n+  @Override\n+  public void apply(VariantContext variant, ReadsContext readsContext,\n+      ReferenceContext referenceContext, FeatureContext featureContext) {\n+    vcfWriter.add(randomizeVariant(variant));\n+  }\n+\n+  @Override\n+  public void onTraversalStart() {\n+    final VCFHeader inputHeader = getHeaderForVariants();\n+    final List<String> newSampleNames = inputHeader.getSampleNamesInOrder().stream()\n+        .map(RandomizeVcf::appendSuffixToSampleName)\n+        .collect(Collectors.toList());\n+    final VCFHeader outputHeader = new VCFHeader(inputHeader.getMetaDataInInputOrder(), newSampleNames);\n+    vcfWriter = this.createVCFWriter(outputVcf);\n+    vcfWriter.writeHeader(outputHeader);\n+  }\n+\n+  @Override\n+  public void closeTool() {\n+    if ( vcfWriter != null ) {\n+      vcfWriter.close();\n+    }\n+  }\n+\n+  @VisibleForTesting\n+  protected static VariantContext randomizeVariant(VariantContext variant) {\n+    // This initializes most of the VariantContextBuilder fields to what they were in the original variant.\n+    // We just want to change the alleles, genotypes, and quality score.\n+    VariantContextBuilder variantContextBuilder = new VariantContextBuilder(variant);\n+    variantContextBuilder.alleles(variant.getAlleles());\n+\n+    List<Genotype> randomizedGenotypes = variant.getGenotypes()\n+        .stream()\n+        .map(genotype -> randomizeGenotype(variant, genotype))\n+        .collect(Collectors.toList());\n+    GenotypesContext randomizedGenotypesContext = GenotypesContext.create(new ArrayList<>(randomizedGenotypes));\n+\n+    variantContextBuilder.genotypes(randomizedGenotypesContext);\n+\n+    // We want kind of random error. If there's no error, have no error for the new variant as well.\n+    // If there's error, fuzz the error.\n+    if (variant.hasLog10PError()) {\n+      variantContextBuilder.log10PError(random.nextDouble() * variant.getLog10PError());\n+    }\n+\n+    return variantContextBuilder.make();\n+  }\n+\n+  protected static Genotype randomizeGenotype(VariantContext variantContext, Genotype genotype) {\n+    GenotypeBuilder genotypeBuilder = new GenotypeBuilder();\n+    genotypeBuilder.copy(genotype);\n+    genotypeBuilder.name(appendSuffixToSampleName(genotype.getSampleName()));\n+    genotypeBuilder.alleles(randomizeAlleles(variantContext, genotype.getAlleles()));\n+    return genotypeBuilder.make();\n+  }\n+\n+  @VisibleForTesting\n+  protected static List<Allele> randomizeAlleles(VariantContext variantContext, List<Allele> genotypeAlleles) {\n+    // The alleles list on the VariantContext has first the reference and then all possible alternates.\n+    // For each genotype, we pick from among those possible alternates (or we put a no-call.)", "originalCommit": "e1480bf2873536150fa23170ef6e82f31cf6d035", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4Njc5NA==", "url": "https://github.com/all-of-us/workbench/pull/3813#discussion_r458286794", "bodyText": "Thank you for doing that! Yeah, now that I have a process that works, I can spend some time futzing with the actual gt generation.", "author": "als364", "createdAt": "2020-07-21T17:59:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4MDc4Nw=="}], "type": "inlineReview"}, {"oid": "7744e4dda9f2631bf0e1a0ded4caf98ddadf0b78", "url": "https://github.com/all-of-us/workbench/commit/7744e4dda9f2631bf0e1a0ded4caf98ddadf0b78", "message": "project.rb commands", "committedDate": "2020-07-21T20:13:35Z", "type": "commit"}, {"oid": "b3301d46d134747b27dbfbb830066f756b869d94", "url": "https://github.com/all-of-us/workbench/commit/b3301d46d134747b27dbfbb830066f756b869d94", "message": "better GT generation", "committedDate": "2020-07-22T15:28:26Z", "type": "commit"}, {"oid": "4812d11e6fd9529c6ef278b8889b4101dd41dfb1", "url": "https://github.com/all-of-us/workbench/commit/4812d11e6fd9529c6ef278b8889b4101dd41dfb1", "message": "spotless. again", "committedDate": "2020-07-22T15:49:21Z", "type": "commit"}, {"oid": "e2b91c832b2608a56c793896a5d0e43331e4f2b9", "url": "https://github.com/all-of-us/workbench/commit/e2b91c832b2608a56c793896a5d0e43331e4f2b9", "message": "shelving", "committedDate": "2020-07-22T16:42:55Z", "type": "commit"}, {"oid": "d6bac045a3deb7e2f87c4be261fbd79905757ba7", "url": "https://github.com/all-of-us/workbench/commit/d6bac045a3deb7e2f87c4be261fbd79905757ba7", "message": "fix whitespace bug", "committedDate": "2020-07-22T18:01:56Z", "type": "commit"}, {"oid": "3b7ae1b338d6aa3f33300b5ec8981603efe09cf3", "url": "https://github.com/all-of-us/workbench/commit/3b7ae1b338d6aa3f33300b5ec8981603efe09cf3", "message": "gradle subproject", "committedDate": "2020-07-22T18:37:51Z", "type": "commit"}, {"oid": "35140bdd553be49972b88b24d88cee7648fc0455", "url": "https://github.com/all-of-us/workbench/commit/35140bdd553be49972b88b24d88cee7648fc0455", "message": "ugh typo", "committedDate": "2020-07-22T18:43:07Z", "type": "commit"}, {"oid": "8199241f8a9643b07fd3776ee800506b9ec4ac0b", "url": "https://github.com/all-of-us/workbench/commit/8199241f8a9643b07fd3776ee800506b9ec4ac0b", "message": "review feedback", "committedDate": "2020-07-22T18:46:35Z", "type": "commit"}, {"oid": "d2d0ca920e12328a18c60d25fd454110cfbe8c34", "url": "https://github.com/all-of-us/workbench/commit/d2d0ca920e12328a18c60d25fd454110cfbe8c34", "message": "formatting", "committedDate": "2020-07-22T18:48:52Z", "type": "commit"}, {"oid": "4f26212fdeddb337c5bf5272b186af6fefeb7275", "url": "https://github.com/all-of-us/workbench/commit/4f26212fdeddb337c5bf5272b186af6fefeb7275", "message": "spotless", "committedDate": "2020-07-22T18:49:30Z", "type": "commit"}, {"oid": "ac506af57bf3d408bf218c5c91b9ae50e139f7fd", "url": "https://github.com/all-of-us/workbench/commit/ac506af57bf3d408bf218c5c91b9ae50e139f7fd", "message": "try adding genomics to the test glob", "committedDate": "2020-07-22T21:17:21Z", "type": "commit"}, {"oid": "5c82bcde15070cd8b489dfe320687c404a8918b1", "url": "https://github.com/all-of-us/workbench/commit/5c82bcde15070cd8b489dfe320687c404a8918b1", "message": "print gradle args for test", "committedDate": "2020-07-22T21:27:16Z", "type": "commit"}, {"oid": "24f199ce195f8d768f4768012fea9bae497246bb", "url": "https://github.com/all-of-us/workbench/commit/24f199ce195f8d768f4768012fea9bae497246bb", "message": "add junitplatform", "committedDate": "2020-07-22T21:30:05Z", "type": "commit"}, {"oid": "846a1a86db4cf2889e69b0958550762d3e695903", "url": "https://github.com/all-of-us/workbench/commit/846a1a86db4cf2889e69b0958550762d3e695903", "message": "trying something with the circle config", "committedDate": "2020-07-22T21:58:57Z", "type": "commit"}, {"oid": "a49ea5c50efe3ae4f293cf0223807df860cb3f6d", "url": "https://github.com/all-of-us/workbench/commit/a49ea5c50efe3ae4f293cf0223807df860cb3f6d", "message": "merge conflict ugh", "committedDate": "2020-07-23T13:03:33Z", "type": "commit"}, {"oid": "982445f58586519021747db074e207f1ab7f6575", "url": "https://github.com/all-of-us/workbench/commit/982445f58586519021747db074e207f1ab7f6575", "message": "what about this for filtering out genomics", "committedDate": "2020-07-23T13:05:22Z", "type": "commit"}, {"oid": "2a5b49def05f7610f3076d163cf40dc1eaf2a4aa", "url": "https://github.com/all-of-us/workbench/commit/2a5b49def05f7610f3076d163cf40dc1eaf2a4aa", "message": "filter out genomics", "committedDate": "2020-07-23T13:20:52Z", "type": "commit"}, {"oid": "5d220f08fd024ce777cf35ff34c693eea1883c88", "url": "https://github.com/all-of-us/workbench/commit/5d220f08fd024ce777cf35ff34c693eea1883c88", "message": "exclude genomics task", "committedDate": "2020-07-23T13:32:12Z", "type": "commit"}, {"oid": "c3f7d6dc252df043eb886851ec2308ca27549fcb", "url": "https://github.com/all-of-us/workbench/commit/c3f7d6dc252df043eb886851ec2308ca27549fcb", "message": "ugh", "committedDate": "2020-07-23T13:35:10Z", "type": "commit"}, {"oid": "48ac4bd0523df3110de85fa1f42436addd2f86f3", "url": "https://github.com/all-of-us/workbench/commit/48ac4bd0523df3110de85fa1f42436addd2f86f3", "message": "now for genomics", "committedDate": "2020-07-23T13:49:31Z", "type": "commit"}, {"oid": "161afc56ba6a97dcf250e441e5fe7bdc228a6be1", "url": "https://github.com/all-of-us/workbench/commit/161afc56ba6a97dcf250e441e5fe7bdc228a6be1", "message": "extraneous close paren...", "committedDate": "2020-07-23T13:56:52Z", "type": "commit"}, {"oid": "7e2ad76d557ca7a305fcdcb40009dff97331a6cf", "url": "https://github.com/all-of-us/workbench/commit/7e2ad76d557ca7a305fcdcb40009dff97331a6cf", "message": "how is this not finding tests", "committedDate": "2020-07-23T14:10:31Z", "type": "commit"}, {"oid": "6eade455960916901f6c6487ba2bd2ea5a773c84", "url": "https://github.com/all-of-us/workbench/commit/6eade455960916901f6c6487ba2bd2ea5a773c84", "message": "oops:", "committedDate": "2020-07-23T14:15:39Z", "type": "commit"}, {"oid": "f77f99aaf1ca6ad89f406ece83619fe7ec0a491b", "url": "https://github.com/all-of-us/workbench/commit/f77f99aaf1ca6ad89f406ece83619fe7ec0a491b", "message": "fml", "committedDate": "2020-07-23T14:18:54Z", "type": "commit"}, {"oid": "ae72c6e3056e797104d617674dd24ddc113b4d97", "url": "https://github.com/all-of-us/workbench/commit/ae72c6e3056e797104d617674dd24ddc113b4d97", "message": "incrementally resolving", "committedDate": "2020-07-23T14:23:05Z", "type": "commit"}, {"oid": "ad0b58f118fca05168dc43df5ce34a002f0bc539", "url": "https://github.com/all-of-us/workbench/commit/ad0b58f118fca05168dc43df5ce34a002f0bc539", "message": "yay", "committedDate": "2020-07-23T14:33:21Z", "type": "commit"}, {"oid": "746966b6dbd2231c7e84dc80c024f41109d0e162", "url": "https://github.com/all-of-us/workbench/commit/746966b6dbd2231c7e84dc80c024f41109d0e162", "message": "explanatory comment", "committedDate": "2020-07-23T14:48:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYwNjQwMA==", "url": "https://github.com/all-of-us/workbench/pull/3813#discussion_r459606400", "bodyText": "nit: I'd probably just expose two constructors here, 1 default constructor, 1 that takes the sampleNameSuffix, used by the test (and @VisibleForTesting)", "author": "calbach", "createdAt": "2020-07-23T17:19:04Z", "path": "api/genomics/src/test/java/org/pmiops/workbench/genomics/RandomizeVcfTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package org.pmiops.workbench.genomics;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import htsjdk.variant.variantcontext.Allele;\n+import htsjdk.variant.variantcontext.Genotype;\n+import htsjdk.variant.variantcontext.VariantContext;\n+import htsjdk.variant.vcf.VCFFileReader;\n+import java.io.File;\n+import java.util.List;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class RandomizeVcfTest {\n+  private static final VCFFileReader reader =\n+      new VCFFileReader(new File(\"src/test/resources/NA12878_204126160130_R01C01.toy.vcf.gz\"));\n+  private static final VariantContext variantContext = reader.iterator().next();\n+  private static final RandomizeVcf randomizeVcf = new RandomizeVcf();\n+\n+  @BeforeClass\n+  public static void setUp() {\n+    randomizeVcf.sampleNameSuffix = \"0\";", "originalCommit": "746966b6dbd2231c7e84dc80c024f41109d0e162", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0MzI4OQ==", "url": "https://github.com/all-of-us/workbench/pull/3813#discussion_r459643289", "bodyText": "oh that would make more sense wouldn't it", "author": "als364", "createdAt": "2020-07-23T18:23:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYwNjQwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYwNjg0MQ==", "url": "https://github.com/all-of-us/workbench/pull/3813#discussion_r459606841", "bodyText": "nit: method names should be lower camel", "author": "calbach", "createdAt": "2020-07-23T17:19:50Z", "path": "api/genomics/src/test/java/org/pmiops/workbench/genomics/RandomizeVcfTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package org.pmiops.workbench.genomics;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import htsjdk.variant.variantcontext.Allele;\n+import htsjdk.variant.variantcontext.Genotype;\n+import htsjdk.variant.variantcontext.VariantContext;\n+import htsjdk.variant.vcf.VCFFileReader;\n+import java.io.File;\n+import java.util.List;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class RandomizeVcfTest {\n+  private static final VCFFileReader reader =\n+      new VCFFileReader(new File(\"src/test/resources/NA12878_204126160130_R01C01.toy.vcf.gz\"));\n+  private static final VariantContext variantContext = reader.iterator().next();\n+  private static final RandomizeVcf randomizeVcf = new RandomizeVcf();\n+\n+  @BeforeClass\n+  public static void setUp() {\n+    randomizeVcf.sampleNameSuffix = \"0\";\n+  }\n+\n+  @Test\n+  public void TestRandomizeVariant() {", "originalCommit": "746966b6dbd2231c7e84dc80c024f41109d0e162", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxMDA4MA==", "url": "https://github.com/all-of-us/workbench/pull/3813#discussion_r459610080", "bodyText": "opt nit: you could probably reduce some nesting here by using stream flatMap. This basically lets you expand the current stream with more elements, i.e. map a small collection of genotypes into a larger collection alleles\n.getGenotypes()\n.stream()\n.flatMap(Genotype::getAlleles)\n.forEach(... assertion ...)", "author": "calbach", "createdAt": "2020-07-23T17:25:33Z", "path": "api/genomics/src/test/java/org/pmiops/workbench/genomics/RandomizeVcfTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package org.pmiops.workbench.genomics;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import htsjdk.variant.variantcontext.Allele;\n+import htsjdk.variant.variantcontext.Genotype;\n+import htsjdk.variant.variantcontext.VariantContext;\n+import htsjdk.variant.vcf.VCFFileReader;\n+import java.io.File;\n+import java.util.List;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class RandomizeVcfTest {\n+  private static final VCFFileReader reader =\n+      new VCFFileReader(new File(\"src/test/resources/NA12878_204126160130_R01C01.toy.vcf.gz\"));\n+  private static final VariantContext variantContext = reader.iterator().next();\n+  private static final RandomizeVcf randomizeVcf = new RandomizeVcf();\n+\n+  @BeforeClass\n+  public static void setUp() {\n+    randomizeVcf.sampleNameSuffix = \"0\";\n+  }\n+\n+  @Test\n+  public void TestRandomizeVariant() {\n+    VariantContext randomizedVariant = randomizeVcf.randomizeVariant(variantContext);\n+    // For each sample/GT in the variant...\n+    randomizedVariant\n+        .getGenotypes()", "originalCommit": "746966b6dbd2231c7e84dc80c024f41109d0e162", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0MzY1MA==", "url": "https://github.com/all-of-us/workbench/pull/3813#discussion_r459643650", "bodyText": "Oh yeah, that's true, thank you", "author": "als364", "createdAt": "2020-07-23T18:24:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxMDA4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxMTI1NQ==", "url": "https://github.com/all-of-us/workbench/pull/3813#discussion_r459611255", "bodyText": "I recommend allowing the test to set a fixed seed to make the test more deterministic. See my comment in the test file for how you could plumb that through in a test constructor", "author": "calbach", "createdAt": "2020-07-23T17:27:28Z", "path": "api/genomics/src/main/java/org/pmiops/workbench/genomics/RandomizeVcf.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package org.pmiops.workbench.genomics;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import htsjdk.variant.variantcontext.Allele;\n+import htsjdk.variant.variantcontext.Genotype;\n+import htsjdk.variant.variantcontext.GenotypeBuilder;\n+import htsjdk.variant.variantcontext.GenotypesContext;\n+import htsjdk.variant.variantcontext.VariantContext;\n+import htsjdk.variant.variantcontext.VariantContextBuilder;\n+import htsjdk.variant.variantcontext.writer.VariantContextWriter;\n+import htsjdk.variant.vcf.VCFHeader;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.stream.Collectors;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.engine.FeatureContext;\n+import org.broadinstitute.hellbender.engine.ReadsContext;\n+import org.broadinstitute.hellbender.engine.ReferenceContext;\n+import org.broadinstitute.hellbender.engine.VariantWalker;\n+import picard.cmdline.programgroups.VariantManipulationProgramGroup;\n+\n+@CommandLineProgramProperties(\n+    summary = \"Generates random variant alleles at the same contigs as an example VCF\",\n+    oneLineSummary = \"Randomizes a VCF\",\n+    programGroup = VariantManipulationProgramGroup.class)\n+public class RandomizeVcf extends VariantWalker {\n+  @Argument(\n+      doc = \"Output vcf name.\",\n+      fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+      shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME)\n+  protected File outputVcf;\n+\n+  @Argument(doc = \"Sample name suffix.\", fullName = \"SAMPLE_NAME_SUFFIX\", shortName = \"S\")\n+  protected String sampleNameSuffix;\n+\n+  private Random random = new Random();", "originalCommit": "746966b6dbd2231c7e84dc80c024f41109d0e162", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxODc2NQ==", "url": "https://github.com/all-of-us/workbench/pull/3813#discussion_r459618765", "bodyText": "This works for now, we're not too concerned with errors at the moment - I'd probably put a comment with possible improvements or deficiencies. Specifically:\n\nI'm not sure about applying a fractional scaling to a log10 value. The net effect on the original error value will be amplified. Though I'm not familiar enough with these error ranges to know whether the output is something that's still within reason.\nthis currently should strictly reduce the value; most likely we would want to fuzz it in either direction, or just generate a new value altogether here, unrelated to the original.", "author": "calbach", "createdAt": "2020-07-23T17:40:34Z", "path": "api/genomics/src/main/java/org/pmiops/workbench/genomics/RandomizeVcf.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package org.pmiops.workbench.genomics;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import htsjdk.variant.variantcontext.Allele;\n+import htsjdk.variant.variantcontext.Genotype;\n+import htsjdk.variant.variantcontext.GenotypeBuilder;\n+import htsjdk.variant.variantcontext.GenotypesContext;\n+import htsjdk.variant.variantcontext.VariantContext;\n+import htsjdk.variant.variantcontext.VariantContextBuilder;\n+import htsjdk.variant.variantcontext.writer.VariantContextWriter;\n+import htsjdk.variant.vcf.VCFHeader;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.stream.Collectors;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.engine.FeatureContext;\n+import org.broadinstitute.hellbender.engine.ReadsContext;\n+import org.broadinstitute.hellbender.engine.ReferenceContext;\n+import org.broadinstitute.hellbender.engine.VariantWalker;\n+import picard.cmdline.programgroups.VariantManipulationProgramGroup;\n+\n+@CommandLineProgramProperties(\n+    summary = \"Generates random variant alleles at the same contigs as an example VCF\",\n+    oneLineSummary = \"Randomizes a VCF\",\n+    programGroup = VariantManipulationProgramGroup.class)\n+public class RandomizeVcf extends VariantWalker {\n+  @Argument(\n+      doc = \"Output vcf name.\",\n+      fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+      shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME)\n+  protected File outputVcf;\n+\n+  @Argument(doc = \"Sample name suffix.\", fullName = \"SAMPLE_NAME_SUFFIX\", shortName = \"S\")\n+  protected String sampleNameSuffix;\n+\n+  private Random random = new Random();\n+\n+  private VariantContextWriter vcfWriter;\n+\n+  @Override\n+  public void apply(\n+      VariantContext variant,\n+      ReadsContext readsContext,\n+      ReferenceContext referenceContext,\n+      FeatureContext featureContext) {\n+    vcfWriter.add(randomizeVariant(variant));\n+  }\n+\n+  @Override\n+  public void onTraversalStart() {\n+    final VCFHeader inputHeader = getHeaderForVariants();\n+    final List<String> newSampleNames =\n+        inputHeader.getSampleNamesInOrder().stream()\n+            .map(this::appendSuffixToSampleName)\n+            .collect(Collectors.toList());\n+    final VCFHeader outputHeader =\n+        new VCFHeader(inputHeader.getMetaDataInInputOrder(), newSampleNames);\n+    vcfWriter = this.createVCFWriter(outputVcf);\n+    vcfWriter.writeHeader(outputHeader);\n+  }\n+\n+  @Override\n+  public void closeTool() {\n+    if (vcfWriter != null) {\n+      vcfWriter.close();\n+    }\n+  }\n+\n+  @VisibleForTesting\n+  protected VariantContext randomizeVariant(VariantContext variant) {\n+    // This initializes most of the VariantContextBuilder fields to what they were in the original\n+    // variant. We just want to change the genotypes and quality score.\n+    VariantContextBuilder variantContextBuilder = new VariantContextBuilder(variant);\n+    variantContextBuilder.alleles(variant.getAlleles());\n+\n+    List<Genotype> randomizedGenotypes =\n+        variant.getGenotypes().stream()\n+            .map(genotype -> randomizeGenotype(variant, genotype))\n+            .collect(Collectors.toList());\n+    GenotypesContext randomizedGenotypesContext =\n+        GenotypesContext.create(new ArrayList<>(randomizedGenotypes));\n+\n+    variantContextBuilder.genotypes(randomizedGenotypesContext);\n+\n+    // We want kind of random error. If there's no error, have no error for the new variant as well.\n+    // If there's error, fuzz the error.\n+    if (variant.hasLog10PError()) {\n+      variantContextBuilder.log10PError(random.nextDouble() * variant.getLog10PError());", "originalCommit": "746966b6dbd2231c7e84dc80c024f41109d0e162", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0Mjc3Nw==", "url": "https://github.com/all-of-us/workbench/pull/3813#discussion_r459642777", "bodyText": "Heh, I'm also not too sure about the usual error ranges. Might just remove this and put a follow-up ticket to investigate error fuzzing.", "author": "als364", "createdAt": "2020-07-23T18:22:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxODc2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxOTMxOA==", "url": "https://github.com/all-of-us/workbench/pull/3813#discussion_r459619318", "bodyText": "opt: personal preference, but I think this could just go into the RandomizeVcf file directly, rather than having the separate entrypoint file. I don't feel strongly.", "author": "calbach", "createdAt": "2020-07-23T17:41:30Z", "path": "api/genomics/src/main/java/org/pmiops/workbench/genomics/RandomizeVcfEntryPoint.java", "diffHunk": "@@ -0,0 +1,7 @@\n+package org.pmiops.workbench.genomics;\n+\n+public class RandomizeVcfEntryPoint {\n+  public static void main(String[] argv) {\n+    new RandomizeVcf().instanceMain(argv);", "originalCommit": "746966b6dbd2231c7e84dc80c024f41109d0e162", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0MzEyNQ==", "url": "https://github.com/all-of-us/workbench/pull/3813#discussion_r459643125", "bodyText": "I'll give a try; if it works I'll get rid of these. I do need the combine entry point cause I'm not extending anything from Picard", "author": "als364", "createdAt": "2020-07-23T18:23:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxOTMxOA=="}], "type": "inlineReview"}, {"oid": "1c59ef613cd48f94c13a8352b8bb9973945422e9", "url": "https://github.com/all-of-us/workbench/commit/1c59ef613cd48f94c13a8352b8bb9973945422e9", "message": "review comments", "committedDate": "2020-07-23T19:56:06Z", "type": "commit"}, {"oid": "45fc8c2a13a89155029ff098439c7c0440d40ec1", "url": "https://github.com/all-of-us/workbench/commit/45fc8c2a13a89155029ff098439c7c0440d40ec1", "message": "more review feedback", "committedDate": "2020-07-23T20:15:53Z", "type": "commit"}, {"oid": "d98add377672e1f7eb8409917706d13df39a932e", "url": "https://github.com/all-of-us/workbench/commit/d98add377672e1f7eb8409917706d13df39a932e", "message": "dot slash gradle double-u spotless apply", "committedDate": "2020-07-23T20:28:38Z", "type": "commit"}, {"oid": "b4f6cecb2638abd322510403b56a283584637831", "url": "https://github.com/all-of-us/workbench/commit/b4f6cecb2638abd322510403b56a283584637831", "message": "one last circle tweak", "committedDate": "2020-07-24T15:42:02Z", "type": "commit"}]}