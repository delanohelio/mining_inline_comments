{"pr_number": 4331, "pr_title": "[RW-5384][risk=no] Check for duplicate rows after streaming upload", "pr_createdAt": "2020-11-29T16:46:34Z", "pr_url": "https://github.com/all-of-us/workbench/pull/4331", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkwMzE4NQ==", "url": "https://github.com/all-of-us/workbench/pull/4331#discussion_r532903185", "bodyText": "It doesn't look like this is checking anything, would something like buildReportingUploadResult be a better name?", "author": "als364", "createdAt": "2020-11-30T21:06:01Z", "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingVerificationServiceImpl.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package org.pmiops.workbench.reporting;\n+\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.QueryParameterValue;\n+import com.google.common.base.Stopwatch;\n+import com.google.common.collect.ImmutableList;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.StreamSupport;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.api.BigQueryService;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.model.ReportingSnapshot;\n+import org.pmiops.workbench.model.ReportingUploadDetails;\n+import org.pmiops.workbench.model.ReportingUploadResult;\n+import org.pmiops.workbench.reporting.insertion.CohortColumnValueExtractor;\n+import org.pmiops.workbench.reporting.insertion.InstitutionColumnValueExtractor;\n+import org.pmiops.workbench.reporting.insertion.UserColumnValueExtractor;\n+import org.pmiops.workbench.reporting.insertion.WorkspaceColumnValueExtractor;\n+import org.pmiops.workbench.utils.FieldValues;\n+import org.pmiops.workbench.utils.LogFormatters;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ReportingVerificationServiceImpl implements ReportingVerificationService {\n+  private static final Logger logger =\n+      Logger.getLogger(ReportingVerificationServiceImpl.class.getName());\n+\n+  private final BigQueryService bigQueryService;\n+  private final Provider<WorkbenchConfig> workbenchConfigProvider;\n+  private Provider<Stopwatch> stopwatchProvider;\n+\n+  public ReportingVerificationServiceImpl(\n+      BigQueryService bigQueryService,\n+      Provider<WorkbenchConfig> workbenchConfigProvider,\n+      Provider<Stopwatch> stopwatchProvider) {\n+    this.bigQueryService = bigQueryService;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+    this.stopwatchProvider = stopwatchProvider;\n+  }\n+\n+  @Override\n+  public ReportingUploadDetails checkUploads(ReportingSnapshot snapshot) {\n+    final Stopwatch verifyStopwatch = stopwatchProvider.get();\n+    verifyStopwatch.start();\n+\n+    final ReportingUploadDetails result =\n+        new ReportingUploadDetails()\n+            .snapshotTimestamp(snapshot.getCaptureTimestamp())\n+            .projectId(getProjectId())\n+            .dataset(getDataset())\n+            .uploads(\n+                ImmutableList.of(\n+                    checkUpload(\n+                        UserColumnValueExtractor.TABLE_NAME,\n+                        snapshot.getCaptureTimestamp(),\n+                        snapshot.getUsers().size()),\n+                    checkUpload(\n+                        WorkspaceColumnValueExtractor.TABLE_NAME,\n+                        snapshot.getCaptureTimestamp(),\n+                        snapshot.getWorkspaces().size()),\n+                    checkUpload(\n+                        CohortColumnValueExtractor.TABLE_NAME,\n+                        snapshot.getCaptureTimestamp(),\n+                        snapshot.getCohorts().size()),\n+                    checkUpload(\n+                        InstitutionColumnValueExtractor.TABLE_NAME,\n+                        snapshot.getCaptureTimestamp(),\n+                        snapshot.getInstitutions().size())));\n+    verifyStopwatch.stop();\n+    logger.info(LogFormatters.duration(\"Verification queries\", verifyStopwatch.elapsed()));\n+    return result;\n+  }\n+\n+  @Override\n+  public ReportingUploadDetails verifyAndLog(ReportingSnapshot reportingSnapshot) {\n+    // check each table. Note that for streaming inputs, not all rows may be immediately available.\n+    final ReportingUploadDetails uploadDetails = checkUploads(reportingSnapshot);\n+    final StringBuilder sb =\n+        new StringBuilder(\n+            String.format(\"Verifying Snapshot %d:\\n\", reportingSnapshot.getCaptureTimestamp()));\n+    sb.append(\"Table\\tUploaded\\tExpected\\tDifference(%)\\n\");\n+    Level detailsLogLevel = Level.INFO;\n+    for (final ReportingUploadResult result : uploadDetails.getUploads()) {\n+      final long delta = result.getDestinationRowCount() - result.getSourceRowCount();\n+      final String relativeDelta;\n+      if (result.getSourceRowCount() == 0) {\n+        relativeDelta = \"\";\n+      } else {\n+        relativeDelta = String.format(\" (%.3f%%)\", 100.0 * delta / result.getSourceRowCount());\n+      }\n+      sb.append(\n+          String.format(\n+              \"%s\\t%d\\t%d\\t%d%s\\n\",\n+              result.getTableName(),\n+              result.getSourceRowCount(),\n+              result.getDestinationRowCount(),\n+              delta,\n+              relativeDelta));\n+      if (!result.getDestinationRowCount().equals(result.getSourceRowCount())) {\n+        detailsLogLevel = Level.WARNING;\n+      }\n+    }\n+    logger.log(detailsLogLevel, sb.toString());\n+    return uploadDetails;\n+  }\n+\n+  public String getDataset() {\n+    return workbenchConfigProvider.get().reporting.dataset;\n+  }\n+\n+  public String getProjectId() {\n+    return workbenchConfigProvider.get().server.projectId;\n+  }\n+\n+  private ReportingUploadResult checkUpload(", "originalCommit": "a04863c6041d428e1f45e9e4c6ed85cde6d924a9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkwMzc1NA==", "url": "https://github.com/all-of-us/workbench/pull/4331#discussion_r532903754", "bodyText": "This isn't checking anything, it's just building a ReportingUploadDetails, perhaps the function name could reflect that", "author": "als364", "createdAt": "2020-11-30T21:07:13Z", "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingVerificationServiceImpl.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package org.pmiops.workbench.reporting;\n+\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.QueryParameterValue;\n+import com.google.common.base.Stopwatch;\n+import com.google.common.collect.ImmutableList;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.StreamSupport;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.api.BigQueryService;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.model.ReportingSnapshot;\n+import org.pmiops.workbench.model.ReportingUploadDetails;\n+import org.pmiops.workbench.model.ReportingUploadResult;\n+import org.pmiops.workbench.reporting.insertion.CohortColumnValueExtractor;\n+import org.pmiops.workbench.reporting.insertion.InstitutionColumnValueExtractor;\n+import org.pmiops.workbench.reporting.insertion.UserColumnValueExtractor;\n+import org.pmiops.workbench.reporting.insertion.WorkspaceColumnValueExtractor;\n+import org.pmiops.workbench.utils.FieldValues;\n+import org.pmiops.workbench.utils.LogFormatters;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ReportingVerificationServiceImpl implements ReportingVerificationService {\n+  private static final Logger logger =\n+      Logger.getLogger(ReportingVerificationServiceImpl.class.getName());\n+\n+  private final BigQueryService bigQueryService;\n+  private final Provider<WorkbenchConfig> workbenchConfigProvider;\n+  private Provider<Stopwatch> stopwatchProvider;\n+\n+  public ReportingVerificationServiceImpl(\n+      BigQueryService bigQueryService,\n+      Provider<WorkbenchConfig> workbenchConfigProvider,\n+      Provider<Stopwatch> stopwatchProvider) {\n+    this.bigQueryService = bigQueryService;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+    this.stopwatchProvider = stopwatchProvider;\n+  }\n+\n+  @Override\n+  public ReportingUploadDetails checkUploads(ReportingSnapshot snapshot) {", "originalCommit": "a04863c6041d428e1f45e9e4c6ed85cde6d924a9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "25957d87062974a6cbbde5086f7e7758092cf30a", "url": "https://github.com/all-of-us/workbench/commit/25957d87062974a6cbbde5086f7e7758092cf30a", "message": "rebase", "committedDate": "2020-12-01T15:38:00Z", "type": "commit"}, {"oid": "25957d87062974a6cbbde5086f7e7758092cf30a", "url": "https://github.com/all-of-us/workbench/commit/25957d87062974a6cbbde5086f7e7758092cf30a", "message": "rebase", "committedDate": "2020-12-01T15:38:00Z", "type": "forcePushed"}]}