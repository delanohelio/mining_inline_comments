{"pr_number": 3618, "pr_title": "[risk=low] Refactor Institutional email matching model objects", "pr_createdAt": "2020-05-28T00:13:29Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3618", "timeline": [{"oid": "2609fb696396276a2db27f40ee7e5b303405504b", "url": "https://github.com/all-of-us/workbench/commit/2609fb696396276a2db27f40ee7e5b303405504b", "message": "Remove email domains and addresses from DbInstitution model", "committedDate": "2020-05-27T17:43:07Z", "type": "commit"}, {"oid": "6cd12ab26b8a25d4caef70626e758a154d0513bb", "url": "https://github.com/all-of-us/workbench/commit/6cd12ab26b8a25d4caef70626e758a154d0513bb", "message": "Move institution aux table saving from the mapper to the service", "committedDate": "2020-05-27T19:49:27Z", "type": "commit"}, {"oid": "2e630897597453cd6509a54c1f1c808aa5833051", "url": "https://github.com/all-of-us/workbench/commit/2e630897597453cd6509a54c1f1c808aa5833051", "message": "disallow empty user instructions in InstitutionUserInstructionsMapper", "committedDate": "2020-05-27T19:57:11Z", "type": "commit"}, {"oid": "151239c3c4ad0c152baaf6385f90b120c4f09410", "url": "https://github.com/all-of-us/workbench/commit/151239c3c4ad0c152baaf6385f90b120c4f09410", "message": "attempt to update equals/hashCode", "committedDate": "2020-05-27T20:39:07Z", "type": "commit"}, {"oid": "91729d7181bd279437b0bfd743a9ec540a00df60", "url": "https://github.com/all-of-us/workbench/commit/91729d7181bd279437b0bfd743a9ec540a00df60", "message": "restore ManyToOne association", "committedDate": "2020-05-27T23:57:19Z", "type": "commit"}, {"oid": "730a730e7e8bdcee3b929d73a5b81895f07b0963", "url": "https://github.com/all-of-us/workbench/commit/730a730e7e8bdcee3b929d73a5b81895f07b0963", "message": "tmp rv", "committedDate": "2020-05-28T00:07:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxMzI2NQ==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r431513265", "bodyText": "Remove this error prone logic.  It's now distributed among mappers, InstitutionServiceImpl, and the DbInstitutionEmailDomain/DbInstitutionEmailAddress classes.", "author": "jmthibault79", "createdAt": "2020-05-28T00:15:09Z", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbInstitution.java", "diffHunk": "@@ -95,66 +85,29 @@ public DbInstitution setOrganizationTypeOtherText(String organizationTypeOtherTe\n     return this;\n   }\n \n-  @OneToMany(mappedBy = \"institution\", cascade = CascadeType.ALL)", "originalCommit": "730a730e7e8bdcee3b929d73a5b81895f07b0963", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxNDE1NQ==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r431514155", "bodyText": "An earlier version of this was at #3601", "author": "jmthibault79", "createdAt": "2020-05-28T00:18:06Z", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbInstitution.java", "diffHunk": "@@ -95,66 +85,29 @@ public DbInstitution setOrganizationTypeOtherText(String organizationTypeOtherTe\n     return this;\n   }\n \n-  @OneToMany(mappedBy = \"institution\", cascade = CascadeType.ALL)\n-  @NotNull\n-  public Set<DbInstitutionEmailDomain> getEmailDomains() {\n-    return emailDomains;\n-  }\n-\n-  /**\n-   * Effectively: do an in-place this.emailDomains = emailDomains\n-   *\n-   * <p>Hibernate doesn't like it when you reassign collections. Instead, modify in-place. First,\n-   * call retainAll() to subset DB rows to those we wish to keep: the intersection of old and new.\n-   * Then, call addAll() to add the diff(new - old) rows.\n-   *\n-   * <p>https://stackoverflow.com/questions/5587482/hibernate-a-collection-with-cascade-all-delete-orphan-was-no-longer-referenc\n-   *\n-   * @param emailDomains the new collection of domains for this Institution\n-   */\n-  public DbInstitution setEmailDomains(final Collection<DbInstitutionEmailDomain> emailDomains) {\n-    final Set<DbInstitutionEmailDomain> attachedDomains =\n-        Optional.ofNullable(emailDomains)\n-            .map(Collection::stream)\n-            .orElse(Stream.empty())\n-            .map(domain -> domain.setInstitution(this))\n-            .collect(Collectors.toSet());\n-    // modifies this set so that its value is the intersection of the two sets\n-    this.emailDomains.retainAll(attachedDomains);\n-    this.emailDomains.addAll(Sets.difference(attachedDomains, this.emailDomains));\n+  // omit ID field from equality so equivalent objects match regardless", "originalCommit": "730a730e7e8bdcee3b929d73a5b81895f07b0963", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwNjE5OA==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r431906198", "bodyText": "Are all of our Db objects using the same semantics for equals()?", "author": "jaycarlton", "createdAt": "2020-05-28T15:00:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxNDE1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ4Njc2Mw==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r432486763", "bodyText": "I did not audit other DB objects.  In the case of DbInstitution and friends, it is necessary for things like determining Set membership and comparisons between already-persisted and newly-created objects.", "author": "jmthibault79", "createdAt": "2020-05-29T13:36:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxNDE1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU5MDQxOA==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r432590418", "bodyText": "I get that, and it's a natural thing to do, but I feel like a general strategy for equals and hash for this class of objects would help. Do you mind filing a ticket for that?", "author": "jaycarlton", "createdAt": "2020-05-29T16:12:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxNDE1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxNDM3Mw==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r431514373", "bodyText": "reordered so the more-likely-to-differ field comes first", "author": "jmthibault79", "createdAt": "2020-05-28T00:18:48Z", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbInstitutionEmailAddress.java", "diffHunk": "@@ -67,12 +68,12 @@ public boolean equals(Object o) {\n \n     DbInstitutionEmailAddress that = (DbInstitutionEmailAddress) o;\n \n-    return Objects.equals(institution, that.institution)\n-        && Objects.equals(emailAddress, that.emailAddress);\n+    return Objects.equals(emailAddress, that.emailAddress)", "originalCommit": "730a730e7e8bdcee3b929d73a5b81895f07b0963", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwNjkwNQ==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r431906905", "bodyText": "I usually try to use expected == actual. But I'm not that consistent (unless expected is a constant`).", "author": "jaycarlton", "createdAt": "2020-05-28T15:01:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxNDM3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4MTA2MQ==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r432581061", "bodyText": "I'm confused here.  This is not a test so we don't have the concept of expected.  This also needs to use equals() instead of ==", "author": "jmthibault79", "createdAt": "2020-05-29T15:56:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxNDM3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyMDQyMQ==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r432620421", "bodyText": "yeah never mind. it's an old convention from a different language anyway.", "author": "jaycarlton", "createdAt": "2020-05-29T17:05:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxNDM3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxNDczNg==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r431514736", "bodyText": "open to suggestions for a better pattern here (and below)", "author": "jmthibault79", "createdAt": "2020-05-28T00:20:11Z", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbVerifiedInstitutionalAffiliation.java", "diffHunk": "@@ -91,15 +95,19 @@ public boolean equals(Object o) {\n \n     DbVerifiedInstitutionalAffiliation that = (DbVerifiedInstitutionalAffiliation) o;\n \n-    return Objects.equals(user, that.user)\n+    // TODO: DbUser doesn't have a well-defined equals() so we use the username instead", "originalCommit": "730a730e7e8bdcee3b929d73a5b81895f07b0963", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwODcyMw==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r431908723", "bodyText": "Why not add one in DbUser? If equals is taken, you could use isEffectivelyEqualTo() or something.", "author": "jaycarlton", "createdAt": "2020-05-28T15:04:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxNDczNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU0NjYzNA==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r432546634", "bodyText": "done", "author": "jmthibault79", "createdAt": "2020-05-29T15:01:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxNDczNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU2Mzg2OA==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r432563868", "bodyText": "nope - my attempt at full DbUser.equals() resulted in\nCaused by: org.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: org.pmiops.workbench.db.model.DbUser.authorities, could not initialize proxy - no Session\n\nSo I chose the easier username-only path", "author": "jmthibault79", "createdAt": "2020-05-29T15:29:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxNDczNg=="}], "type": "inlineReview"}, {"oid": "188ac5e9da20115541ff89d530ac4f6ff4620fc8", "url": "https://github.com/all-of-us/workbench/commit/188ac5e9da20115541ff89d530ac4f6ff4620fc8", "message": "move email mapping logic to email mappers", "committedDate": "2020-05-28T00:43:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUyMTAxNA==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r431521014", "bodyText": "moved this logic to the email domain / address mappers", "author": "jmthibault79", "createdAt": "2020-05-28T00:43:43Z", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionMapper.java", "diffHunk": "@@ -1,64 +1,32 @@\n package org.pmiops.workbench.institution;\n \n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-import org.jetbrains.annotations.Nullable;\n import org.mapstruct.AfterMapping;\n import org.mapstruct.Context;\n import org.mapstruct.Mapper;\n import org.mapstruct.Mapping;\n import org.mapstruct.MappingTarget;\n import org.pmiops.workbench.db.model.DbInstitution;\n-import org.pmiops.workbench.db.model.DbInstitutionEmailAddress;\n-import org.pmiops.workbench.db.model.DbInstitutionEmailDomain;\n import org.pmiops.workbench.model.Institution;\n import org.pmiops.workbench.utils.mappers.MapStructConfig;\n \n @Mapper(config = MapStructConfig.class)\n+//    uses = {InstitutionEmailDomainMapper.class, InstitutionEmailDomainMapper.class})\n public interface InstitutionMapper {\n   @Mapping(target = \"institutionId\", ignore = true)\n   DbInstitution modelToDb(Institution modelObject);\n \n-  // userInstructions will be populated by setUserInstruction afterMapping\n+  // these fields will be populated by @AfterMapping populateFromAuxTables\n+  @Mapping(target = \"emailDomains\", ignore = true)\n+  @Mapping(target = \"emailAddresses\", ignore = true)\n   @Mapping(target = \"userInstructions\", ignore = true)\n   Institution dbToModel(DbInstitution dbObject, @Context InstitutionService institutionService);\n \n-  default List<String> toModelDomains(Set<DbInstitutionEmailDomain> dbDomains) {", "originalCommit": "730a730e7e8bdcee3b929d73a5b81895f07b0963", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUyMjkxMg==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r431522912", "bodyText": "moved from slightly below here", "author": "jmthibault79", "createdAt": "2020-05-28T00:50:57Z", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -29,27 +32,40 @@\n \n   private static final Logger log = Logger.getLogger(InstitutionServiceImpl.class.getName());\n \n+  private final String OPERATIONAL_USER_INSTITUTION_SHORT_NAME = \"AouOps\";", "originalCommit": "188ac5e9da20115541ff89d530ac4f6ff4620fc8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxNzc0Nw==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r431917747", "bodyText": "For later consideration: After experimenting in SQL  yesterday, I think we need an environment-agnostic way to refer to this special institution, or to find it. (Maybe a method we can call to get its ID for queries).", "author": "jaycarlton", "createdAt": "2020-05-28T15:16:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUyMjkxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyNjE0NQ==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r432626145", "bodyText": "I heard there's a plan for a flag somewhere, so that's fine.", "author": "jaycarlton", "createdAt": "2020-05-29T17:15:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUyMjkxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUyMzI0Ng==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r431523246", "bodyText": "replaced this method with its contents", "author": "jmthibault79", "createdAt": "2020-05-28T00:52:21Z", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -70,26 +86,26 @@\n \n   @Override\n   public Optional<Institution> getInstitution(final String shortName) {\n-    return getDbInstitution(shortName)", "originalCommit": "188ac5e9da20115541ff89d530ac4f6ff4620fc8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "52459a63354b3317a8363bda6adf29d7eef56b57", "url": "https://github.com/all-of-us/workbench/commit/52459a63354b3317a8363bda6adf29d7eef56b57", "message": "add comments", "committedDate": "2020-05-28T00:53:09Z", "type": "commit"}, {"oid": "2981982cf2ff481bf3ec04ac0eec4acfee67b8a7", "url": "https://github.com/all-of-us/workbench/commit/2981982cf2ff481bf3ec04ac0eec4acfee67b8a7", "message": "don't do another DB fetch for pop-aux", "committedDate": "2020-05-28T00:58:03Z", "type": "commit"}, {"oid": "3ffd7e83b13cca5eaecae23d9373e87a395d6be0", "url": "https://github.com/all-of-us/workbench/commit/3ffd7e83b13cca5eaecae23d9373e87a395d6be0", "message": "don't need to ignore this", "committedDate": "2020-05-28T00:59:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUyNTI3OQ==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r431525279", "bodyText": "these are no longer relvant", "author": "jmthibault79", "createdAt": "2020-05-28T01:00:15Z", "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionDaoTest.java", "diffHunk": "@@ -25,183 +21,54 @@\n \n   @Autowired InstitutionDao institutionDao;\n \n-  private DbInstitution institutionWithoutEmailPatterns;\n-  private DbInstitution institutionWithEmailPatterns;\n-  private Set<DbInstitutionEmailAddress> emailAddresses;\n-  private Set<DbInstitutionEmailDomain> emailDomains;\n+  private DbInstitution testInst;\n \n   @Before\n   public void setUp() {\n-    institutionWithoutEmailPatterns =\n+    testInst =\n         institutionDao.save(\n             new DbInstitution().setShortName(\"Broad\").setDisplayName(\"The Broad Institute\"));\n-\n-    emailAddresses =\n-        Sets.newHashSet(new DbInstitutionEmailAddress().setEmailAddress(\"broad@example.com\"));\n-    emailDomains = Sets.newHashSet(new DbInstitutionEmailDomain().setEmailDomain(\"broad.org\"));\n-\n-    institutionWithEmailPatterns =\n-        institutionDao.save(\n-            new DbInstitution()\n-                .setShortName(\"NIH\")\n-                .setDisplayName(\"The National Institutes of Health\")\n-                .setEmailAddresses(emailAddresses)\n-                .setEmailDomains(emailDomains));\n   }\n \n   @Test\n   public void test_save() {\n-    final DbInstitution toSaveWithEmailPatterns =\n-        new DbInstitution()\n-            .setShortName(\"Vanderbilt\")\n-            .setDisplayName(\"Vanderbilt University\")\n-            .setEmailDomains(emailDomains)\n-            .setEmailAddresses(emailAddresses);\n-    final DbInstitution savedWithEmailPatterns = institutionDao.save(toSaveWithEmailPatterns);\n-    assertThat(savedWithEmailPatterns).isEqualTo(toSaveWithEmailPatterns);\n-    assertThat(savedWithEmailPatterns.getEmailDomains()).containsExactlyElementsIn(emailDomains);\n-    assertThat(savedWithEmailPatterns.getEmailAddresses())\n-        .containsExactlyElementsIn(emailAddresses);\n-\n-    // OK to duplicate email patterns between institutions\n-    assertThat(savedWithEmailPatterns.getEmailDomains())\n-        .containsExactlyElementsIn(institutionWithEmailPatterns.getEmailDomains());\n-    assertThat(savedWithEmailPatterns.getEmailAddresses())\n-        .containsExactlyElementsIn(institutionWithEmailPatterns.getEmailAddresses());\n-\n-    final DbInstitution toSaveWithoutEmailPatterns =\n+    final DbInstitution toSave =\n         new DbInstitution()\n             .setShortName(\"VUMC\")\n             .setDisplayName(\"Vanderbilt University Medical Center\");\n-    final DbInstitution savedWithoutEmailPatterns = institutionDao.save(toSaveWithoutEmailPatterns);\n-    assertThat(savedWithoutEmailPatterns).isEqualTo(toSaveWithoutEmailPatterns);\n-    assertThat(savedWithoutEmailPatterns.getEmailDomains()).isEmpty();\n-    assertThat(savedWithoutEmailPatterns.getEmailAddresses()).isEmpty();\n+    final DbInstitution saved = institutionDao.save(toSave);\n+    assertThat(saved).isEqualTo(toSave);\n   }\n \n   @Test\n   public void test_delete() {\n-    institutionDao.delete(institutionWithoutEmailPatterns.getInstitutionId());\n-    DbInstitution dbInstitution =\n-        institutionDao.findOne(institutionWithoutEmailPatterns.getInstitutionId());\n+    institutionDao.delete(testInst.getInstitutionId());\n+    DbInstitution dbInstitution = institutionDao.findOne(testInst.getInstitutionId());\n     assertThat(dbInstitution).isNull();\n-    assertThat(institutionDao.findAll()).containsExactly(institutionWithEmailPatterns);\n+    assertThat(institutionDao.findAll()).isEmpty();\n   }\n \n   @Test\n   public void test_findAll() {\n-    assertThat(institutionDao.findAll())\n-        .containsExactly(institutionWithoutEmailPatterns, institutionWithEmailPatterns);\n+    assertThat(institutionDao.findAll()).containsExactly(testInst);\n   }\n \n   @Test\n   public void test_findOne() {\n-    DbInstitution dbInstitution =\n-        institutionDao.findOne(institutionWithoutEmailPatterns.getInstitutionId());\n-    assertThat(dbInstitution).isEqualTo(institutionWithoutEmailPatterns);\n-    assertThat(dbInstitution.getEmailDomains()).isEmpty();\n-    assertThat(dbInstitution.getEmailAddresses()).isEmpty();\n-\n-    dbInstitution = institutionDao.findOne(institutionWithEmailPatterns.getInstitutionId());\n-    assertThat(dbInstitution).isEqualTo(institutionWithEmailPatterns);\n-    assertThat(dbInstitution.getEmailDomains()).isEqualTo(emailDomains);\n-    assertThat(dbInstitution.getEmailAddresses()).isEqualTo(emailAddresses);\n+    DbInstitution dbInstitution = institutionDao.findOne(testInst.getInstitutionId());\n+    assertThat(dbInstitution).isEqualTo(testInst);\n   }\n \n   @Test\n   public void test_findOneByShortName() {\n-    assertThat(institutionDao.findOneByShortName(\"Broad\"))\n-        .hasValue(institutionWithoutEmailPatterns);\n-    assertThat(institutionDao.findOneByShortName(\"NIH\")).hasValue(institutionWithEmailPatterns);\n+    assertThat(institutionDao.findOneByShortName(\"Broad\")).hasValue(testInst);\n     assertThat(institutionDao.findOneByShortName(\"Verily\")).isEmpty();\n   }\n \n   @Test\n   public void test_findOneByDisplayName() {\n-    assertThat(institutionDao.findOneByDisplayName(\"The Broad Institute\"))\n-        .hasValue(institutionWithoutEmailPatterns);\n-    assertThat(institutionDao.findOneByDisplayName(\"The National Institutes of Health\"))\n-        .hasValue(institutionWithEmailPatterns);\n-    assertThat(institutionDao.findOneByDisplayName(\"Verily, LLC\")).isEmpty();\n-  }\n-\n-  @Test\n-  public void test_updateAllNewEmailAddresses() {", "originalCommit": "188ac5e9da20115541ff89d530ac4f6ff4620fc8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c94d95c54dc2f9563658fc421a90101c3d7099ca", "url": "https://github.com/all-of-us/workbench/commit/c94d95c54dc2f9563658fc421a90101c3d7099ca", "message": "pop aux fix", "committedDate": "2020-05-28T01:03:27Z", "type": "commit"}, {"oid": "7e5cc80105513819a26cc6b91af3e760b8d1e0cf", "url": "https://github.com/all-of-us/workbench/commit/7e5cc80105513819a26cc6b91af3e760b8d1e0cf", "message": "rename institutionService.getInstitutionEmailDomains/Addresses\n- add populateFromAuxTables tests", "committedDate": "2020-05-28T01:27:39Z", "type": "commit"}, {"oid": "14fba8f38c30b24643a63493a2e7f5c1915154de", "url": "https://github.com/all-of-us/workbench/commit/14fba8f38c30b24643a63493a2e7f5c1915154de", "message": "mapper tests", "committedDate": "2020-05-28T02:52:56Z", "type": "commit"}, {"oid": "46f4be8b14bc94cc3f781fd220c4a4696386fef9", "url": "https://github.com/all-of-us/workbench/commit/46f4be8b14bc94cc3f781fd220c4a4696386fef9", "message": "don't cascade!", "committedDate": "2020-05-28T03:15:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwNTYzNQ==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r431905635", "bodyText": "How does the return value work? Do you get 0 if nothing is deleted or the ID if something was?", "author": "jaycarlton", "createdAt": "2020-05-28T15:00:03Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/InstitutionEmailDomainDao.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.pmiops.workbench.db.dao;\n+\n+import java.util.Set;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailDomain;\n+import org.springframework.data.repository.CrudRepository;\n+\n+public interface InstitutionEmailDomainDao extends CrudRepository<DbInstitutionEmailDomain, Long> {\n+\n+  Set<DbInstitutionEmailDomain> getByInstitution(final DbInstitution institution);\n+\n+  long deleteByInstitution(final DbInstitution institution);", "originalCommit": "46f4be8b14bc94cc3f781fd220c4a4696386fef9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ4ODkzNw==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r432488937", "bodyText": "a count of how many were deleted", "author": "jmthibault79", "createdAt": "2020-05-29T13:39:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwNTYzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4OTY1OA==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r432589658", "bodyText": "That's better than nothing, but you don't know which ones failed to delete (if that matters).", "author": "jaycarlton", "createdAt": "2020-05-29T16:10:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwNTYzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxMDAxMw==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r431910013", "bodyText": "I'd try to guard against the list being nullable.\nWe noticed in #workbench-techdesign that some of our generated models are getting their lists initialized to new ArrayLists when they're declared, but others (sadly including yours) aren't. It would be great to get away from the need to do this check everywhere for a null collection.", "author": "jaycarlton", "createdAt": "2020-05-28T15:06:12Z", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionEmailAddressMapper.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package org.pmiops.workbench.institution;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.mapstruct.Mapper;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailAddress;\n+import org.pmiops.workbench.model.Institution;\n+import org.pmiops.workbench.utils.mappers.MapStructConfig;\n+\n+@Mapper(config = MapStructConfig.class)\n+public interface InstitutionEmailAddressMapper {\n+  default Set<DbInstitutionEmailAddress> modelToDb(\n+      final Institution modelInstitution, final DbInstitution dbInstitution) {\n+    return Optional.ofNullable(modelInstitution.getEmailAddresses()).orElse(Collections.emptyList())", "originalCommit": "46f4be8b14bc94cc3f781fd220c4a4696386fef9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkzMjM2NQ==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r431932365", "bodyText": "Do you know why this is happening in the codegen? Seems to me the simplest way to handle this would be to figure out what causes the empty list initialization and just do that to everything list-y.", "author": "als364", "createdAt": "2020-05-28T15:36:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxMDAxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ4OTc4Ng==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r432489786", "bodyText": "Do you have examples for the better models ?", "author": "jmthibault79", "createdAt": "2020-05-29T13:41:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxMDAxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyMjA3NQ==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r432622075", "bodyText": "This showed up on a Friday afternoon and the best we could say about it was that it was \"odd\". I can take a look.\nI still need to get back on OpenApi3 now that we're launched.", "author": "jaycarlton", "createdAt": "2020-05-29T17:07:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxMDAxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxMDYyNA==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r431910624", "bodyText": "You should be able to just define a mapping from DbInstitutionEmailAddress to String and let MapStruct generate this for you. It's pretty smart with collection mappings.", "author": "jaycarlton", "createdAt": "2020-05-28T15:07:07Z", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionEmailAddressMapper.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package org.pmiops.workbench.institution;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.mapstruct.Mapper;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailAddress;\n+import org.pmiops.workbench.model.Institution;\n+import org.pmiops.workbench.utils.mappers.MapStructConfig;\n+\n+@Mapper(config = MapStructConfig.class)\n+public interface InstitutionEmailAddressMapper {\n+  default Set<DbInstitutionEmailAddress> modelToDb(\n+      final Institution modelInstitution, final DbInstitution dbInstitution) {\n+    return Optional.ofNullable(modelInstitution.getEmailAddresses()).orElse(Collections.emptyList())\n+        .stream()\n+        .distinct()\n+        .map(\n+            address ->\n+                new DbInstitutionEmailAddress()\n+                    .setEmailAddress(address)\n+                    .setInstitution(dbInstitution))\n+        .collect(Collectors.toSet());\n+  }\n+\n+  default List<String> dbToModel(Set<DbInstitutionEmailAddress> dbAddresses) {", "originalCommit": "46f4be8b14bc94cc3f781fd220c4a4696386fef9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5MTc1MA==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r432491750", "bodyText": "In this case I want the list to be sorted so I'd have to add a step for that anyway", "author": "jmthibault79", "createdAt": "2020-05-29T13:44:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxMDYyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4MTYxNA==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r432581614", "bodyText": "update: I was able to do this.  thanks.", "author": "jmthibault79", "createdAt": "2020-05-29T15:57:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxMDYyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxMjkxOQ==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r431912919", "bodyText": "For mappers that write to a DB object, maybe document whether or not the caller can immediately call save() afterwards, or if anything changes in the database as a side effect. Currently we're not doing that anywhere, though.", "author": "jaycarlton", "createdAt": "2020-05-28T15:10:11Z", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionEmailDomainMapper.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package org.pmiops.workbench.institution;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.mapstruct.Mapper;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailDomain;\n+import org.pmiops.workbench.model.Institution;\n+import org.pmiops.workbench.utils.mappers.MapStructConfig;\n+\n+@Mapper(config = MapStructConfig.class)\n+public interface InstitutionEmailDomainMapper {\n+  default Set<DbInstitutionEmailDomain> modelToDb(\n+      final Institution modelInstitution, final DbInstitution dbInstitution) {\n+    return Optional.ofNullable(modelInstitution.getEmailDomains()).orElse(Collections.emptyList())\n+        .stream()\n+        .distinct()", "originalCommit": "46f4be8b14bc94cc3f781fd220c4a4696386fef9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxNDU4Mw==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r431914583", "bodyText": "As above, you should just be able to clue in MapStruct now to convert the DbInstitutionEmailDomain to a String and it will write your collection mapping for you.\nplease name this something like dbDomainToDomainNameList().\nAlso, why a list and not a set?", "author": "jaycarlton", "createdAt": "2020-05-28T15:12:27Z", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionEmailDomainMapper.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package org.pmiops.workbench.institution;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.mapstruct.Mapper;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailDomain;\n+import org.pmiops.workbench.model.Institution;\n+import org.pmiops.workbench.utils.mappers.MapStructConfig;\n+\n+@Mapper(config = MapStructConfig.class)\n+public interface InstitutionEmailDomainMapper {\n+  default Set<DbInstitutionEmailDomain> modelToDb(\n+      final Institution modelInstitution, final DbInstitution dbInstitution) {\n+    return Optional.ofNullable(modelInstitution.getEmailDomains()).orElse(Collections.emptyList())\n+        .stream()\n+        .distinct()\n+        .map(\n+            domain ->\n+                new DbInstitutionEmailDomain().setEmailDomain(domain).setInstitution(dbInstitution))\n+        .collect(Collectors.toSet());\n+  }\n+\n+  default List<String> dbToModel(final Set<DbInstitutionEmailDomain> dbDomains) {", "originalCommit": "46f4be8b14bc94cc3f781fd220c4a4696386fef9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5MjM3Mw==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r432492373", "bodyText": "The model has a (sorted) list", "author": "jmthibault79", "createdAt": "2020-05-29T13:45:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxNDU4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzNjg2NA==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r432536864", "bodyText": "got this to work returning a SortedSet.  Thanks.", "author": "jmthibault79", "createdAt": "2020-05-29T14:46:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxNDU4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxNjA0Mg==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r431916042", "bodyText": "I believe you can do this in your main mapping with attributes like @Mapping(source = \"institutionService.emailDomains\", target = \"emailDomains\", unless I've missed something.", "author": "jaycarlton", "createdAt": "2020-05-28T15:14:27Z", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionMapper.java", "diffHunk": "@@ -23,42 +14,17 @@\n   @Mapping(target = \"institutionId\", ignore = true)\n   DbInstitution modelToDb(Institution modelObject);\n \n-  // userInstructions will be populated by setUserInstruction afterMapping\n+  // these fields will be populated by @AfterMapping populateFromAuxTables\n+  @Mapping(target = \"emailDomains\", ignore = true)\n+  @Mapping(target = \"emailAddresses\", ignore = true)\n   @Mapping(target = \"userInstructions\", ignore = true)\n   Institution dbToModel(DbInstitution dbObject, @Context InstitutionService institutionService);\n \n-  default List<String> toModelDomains(Set<DbInstitutionEmailDomain> dbDomains) {\n-    return Optional.ofNullable(dbDomains).orElse(Collections.emptySet()).stream()\n-        .map(DbInstitutionEmailDomain::getEmailDomain)\n-        .sorted()\n-        .collect(Collectors.toList());\n-  }\n-\n-  default List<String> toModelAddresses(Set<DbInstitutionEmailAddress> dbAddresses) {\n-    return Optional.ofNullable(dbAddresses).orElse(Collections.emptySet()).stream()\n-        .map(DbInstitutionEmailAddress::getEmailAddress)\n-        .sorted()\n-        .collect(Collectors.toList());\n-  }\n-\n-  // Swagger-generated Lists are null by default, so we should handle that\n-  default Set<DbInstitutionEmailDomain> toDbDomainsWithoutInstitution(\n-      @Nullable Collection<String> modelDomains) {\n-    return Optional.ofNullable(modelDomains).orElse(Collections.emptySet()).stream()\n-        .map(domain -> new DbInstitutionEmailDomain().setEmailDomain(domain))\n-        .collect(Collectors.toSet());\n-  }\n-\n-  default Set<DbInstitutionEmailAddress> toDbAddressesWithoutInstitution(\n-      @Nullable Collection<String> modelAddresses) {\n-    return Optional.ofNullable(modelAddresses).orElse(Collections.emptySet()).stream()\n-        .map(address -> new DbInstitutionEmailAddress().setEmailAddress(address))\n-        .collect(Collectors.toSet());\n-  }\n-\n   @AfterMapping\n-  default void setUserInstruction(\n+  default void populateFromAuxTables(\n       @MappingTarget Institution target, @Context InstitutionService institutionService) {\n+    target.setEmailDomains(institutionService.getEmailDomains(target.getShortName()));", "originalCommit": "46f4be8b14bc94cc3f781fd220c4a4696386fef9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5OTEyNA==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r432499124", "bodyText": "How would that work?  You'd have to specify the source parameter to institutionService.getEmailDomains() as well.  I have not seen examples like this.", "author": "jmthibault79", "createdAt": "2020-05-29T13:55:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxNjA0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyNDEwMQ==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r432624101", "bodyText": "Oh, I see.\nBy the way, I think you can put InstitutionService.class in your uses list so you don't need to use @Context.", "author": "jaycarlton", "createdAt": "2020-05-29T17:11:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxNjA0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxNjk1NQ==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r431916955", "bodyText": "So my thing is, why not just fetch an institution and then ask it for its email domains and addresses? I would expect the institution object to know (or expose how to get) this, but seeing it also on the service makes me wonder what the source of truth is.", "author": "jaycarlton", "createdAt": "2020-05-28T15:15:42Z", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionService.java", "diffHunk": "@@ -52,6 +52,25 @@ boolean validateAffiliation(\n    */\n   boolean validateInstitutionalEmail(Institution institution, String contactEmail);\n \n+  /**\n+   * Retrieve an ordered list of the email domains which this institution uses to match user contact\n+   * email, or an empty list if none. Throws NotFoundException if the Institution does not exist.\n+   *\n+   * @param institutionShortName the short name (key) used to refer to this institution in the API\n+   * @return the list of email domains associated with this institution, if any\n+   */\n+  List<String> getEmailDomains(String institutionShortName);", "originalCommit": "46f4be8b14bc94cc3f781fd220c4a4696386fef9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5OTk4NA==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r432499984", "bodyText": "The mapper itself needs this in order to create the Institution", "author": "jmthibault79", "createdAt": "2020-05-29T13:57:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxNjk1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxOTA0NA==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r431919044", "bodyText": "Why are you declaring method parameters final? I'm a pretty big finalphile, but I don't generally do that.\nIn the case of calling save(), you should technically be nullling out its argument or replacing it so you don't accidentally reuse it. Though in practice it's less dangerous than the doc makes it sound.", "author": "jaycarlton", "createdAt": "2020-05-28T15:18:30Z", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -70,26 +86,26 @@\n \n   @Override\n   public Optional<Institution> getInstitution(final String shortName) {\n-    return getDbInstitution(shortName)\n+    return institutionDao\n+        .findOneByShortName(shortName)\n         .map(institution -> institutionMapper.dbToModel(institution, this));\n   }\n \n   @Override\n   public DbInstitution getDbInstitutionOrThrow(final String shortName) {\n-    return getDbInstitution(shortName)\n+    return institutionDao\n+        .findOneByShortName(shortName)\n         .orElseThrow(\n             () ->\n                 new NotFoundException(String.format(\"Could not find Institution '%s'\", shortName)));\n   }\n \n-  private Optional<DbInstitution> getDbInstitution(final String shortName) {\n-    return institutionDao.findOneByShortName(shortName);\n-  }\n-\n   @Override\n   public Institution createInstitution(final Institution institutionToCreate) {", "originalCommit": "46f4be8b14bc94cc3f781fd220c4a4696386fef9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwMTg1Mg==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r432501852", "bodyText": "I don't have a specific reason to make them final.  I also don't have a specific reason not to - so my default is to make all things final unless I have a good reason.\nThe argument to save here is never stored in a variable so there's nothing to null out", "author": "jmthibault79", "createdAt": "2020-05-29T14:00:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxOTA0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzMTYzOA==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r432631638", "bodyText": "Oh, I misread it. The thing being saved is anonymous, so you're good.\nMy default is to make everything final that could possibly be final, with the exception of method parameters, and that's only for readability.", "author": "jaycarlton", "createdAt": "2020-05-29T17:26:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxOTA0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyMDA1Mw==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r431920053", "bodyText": "Please make a private wrapper in the service like toModel(dbObjectToUpdate) so readers don't see this scary passing of this as a second argument.", "author": "jaycarlton", "createdAt": "2020-05-28T15:19:58Z", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -113,15 +129,19 @@ public void deleteInstitution(final String shortName) {\n   @Override\n   public Optional<Institution> updateInstitution(\n       final String shortName, final Institution institutionToUpdate) {\n-    return getDbInstitution(shortName)\n+    return institutionDao\n+        .findOneByShortName(shortName)\n         .map(DbInstitution::getInstitutionId)\n         .map(\n             dbId -> {\n               // create new DB object, but mark it with the original's ID to indicate that this is\n               // an update\n+\n               final DbInstitution dbObjectToUpdate =\n-                  institutionMapper.modelToDb(institutionToUpdate).setInstitutionId(dbId);\n-              return institutionMapper.dbToModel(institutionDao.save(dbObjectToUpdate), this);\n+                  institutionDao.save(\n+                      institutionMapper.modelToDb(institutionToUpdate).setInstitutionId(dbId));\n+              populateAuxTables(institutionToUpdate, dbObjectToUpdate);\n+              return institutionMapper.dbToModel(dbObjectToUpdate, this);", "originalCommit": "46f4be8b14bc94cc3f781fd220c4a4696386fef9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwMjc2NQ==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r432502765", "bodyText": "what is scary about it?", "author": "jmthibault79", "createdAt": "2020-05-29T14:01:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyMDA1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzNTI4Mw==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r432635283", "bodyText": "I'm scarred by COM programming. I distrust any fancy footwork with this.\nBasically this class already has a reference to the institution mapper, so it can pass whatever is needed into that method. I don't expect methods that I call to need a reference to me in general.", "author": "jaycarlton", "createdAt": "2020-05-29T17:32:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyMDA1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY2NzU2OQ==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r432667569", "bodyText": "easy enough, updated", "author": "jmthibault79", "createdAt": "2020-05-29T18:37:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyMDA1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyMTA3NA==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r431921074", "bodyText": "nit: \"AuxTables\" isn't really an abstraction.", "author": "jaycarlton", "createdAt": "2020-05-28T15:21:22Z", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -217,4 +249,34 @@ public boolean validateOperationalUser(DbInstitution institution) {\n     return institution != null\n         && institution.getShortName().equals(OPERATIONAL_USER_INSTITUTION_SHORT_NAME);\n   }\n+\n+  private void populateAuxTables(", "originalCommit": "46f4be8b14bc94cc3f781fd220c4a4696386fef9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyMTQxOQ==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r431921419", "bodyText": "Please document that this is replacing rather than appending or merging to the domains. Here and below.", "author": "jaycarlton", "createdAt": "2020-05-28T15:21:53Z", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -217,4 +249,34 @@ public boolean validateOperationalUser(DbInstitution institution) {\n     return institution != null\n         && institution.getShortName().equals(OPERATIONAL_USER_INSTITUTION_SHORT_NAME);\n   }\n+\n+  private void populateAuxTables(\n+      final Institution modelInstitution, final DbInstitution dbInstitution) {\n+    setInstitutionEmailDomains(modelInstitution, dbInstitution);\n+    setInstitutionEmailAddresses(modelInstitution, dbInstitution);\n+\n+    final String userInstructions = modelInstitution.getUserInstructions();\n+    if (!Strings.isNullOrEmpty(userInstructions)) {\n+      setInstitutionUserInstructions(\n+          new InstitutionUserInstructions()\n+              .institutionShortName(modelInstitution.getShortName())\n+              .instructions(userInstructions));\n+    }\n+  }\n+\n+  private void setInstitutionEmailDomains(\n+      final Institution modelInstitution, final DbInstitution dbInstitution) {\n+    institutionEmailDomainDao.deleteByInstitution(dbInstitution);", "originalCommit": "46f4be8b14bc94cc3f781fd220c4a4696386fef9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyMjM3Mg==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r431922372", "bodyText": "FWIW, I'd be fine lumping all the institution mapping functions into one Mapper. It would simplify dependencies, and there's hardly any additional cost to pulling functions you don't need.", "author": "jaycarlton", "createdAt": "2020-05-28T15:23:17Z", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/institutions/LoadInstitutions.java", "diffHunk": "@@ -28,6 +30,8 @@\n   InstitutionMapperImpl.class,\n   InstitutionUserInstructionsMapperImpl.class,\n   PublicInstitutionDetailsMapperImpl.class,\n+  InstitutionEmailDomainMapperImpl.class,", "originalCommit": "46f4be8b14bc94cc3f781fd220c4a4696386fef9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyNTk5Mg==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r431925992", "bodyText": "\ud83d\udd2e I see this potentially blowing up into a much larger set of metadata on the institution that will need to be managed and tended with care.", "author": "jaycarlton", "createdAt": "2020-05-28T15:28:09Z", "path": "api/src/test/java/org/pmiops/workbench/institution/InstitutionUserInstructionsMapperTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package org.pmiops.workbench.institution;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbInstitutionUserInstructions;\n+import org.pmiops.workbench.exceptions.BadRequestException;\n+import org.pmiops.workbench.exceptions.NotFoundException;\n+import org.pmiops.workbench.model.InstitutionUserInstructions;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@Import(InstitutionUserInstructionsMapperImpl.class)\n+@DataJpaTest\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.BEFORE_EACH_TEST_METHOD)\n+public class InstitutionUserInstructionsMapperTest {\n+  @Autowired InstitutionUserInstructionsMapper mapper;\n+  @MockBean InstitutionService service;\n+\n+  @Test\n+  public void test_modelToDb() {\n+    final DbInstitution broad =\n+        new DbInstitution().setShortName(\"Broad\").setDisplayName(\"The Broad Institute\");\n+    when(service.getDbInstitutionOrThrow(broad.getShortName())).thenReturn(broad);\n+\n+    final InstitutionUserInstructions userInstructions =\n+        new InstitutionUserInstructions()\n+            .instructions(\"Wash your hands\")\n+            .institutionShortName(broad.getShortName());\n+\n+    final DbInstitutionUserInstructions dbUserInstructions =\n+        mapper.modelToDb(userInstructions, service);\n+\n+    assertThat(dbUserInstructions.getUserInstructions()).isEqualTo(\"Wash your hands\");\n+    assertThat(dbUserInstructions.getInstitution()).isEqualTo(broad);\n+  }\n+\n+  @Test(expected = NotFoundException.class)\n+  public void test_modelToDb_missingInst() {\n+    final DbInstitution broad =\n+        new DbInstitution().setShortName(\"Broad\").setDisplayName(\"The Broad Institute\");\n+    when(service.getDbInstitutionOrThrow(broad.getShortName())).thenReturn(broad);\n+    when(service.getDbInstitutionOrThrow(\"other\")).thenThrow(new NotFoundException());\n+\n+    final InstitutionUserInstructions userInstructions =\n+        new InstitutionUserInstructions()\n+            .instructions(\"Wash your hands\")\n+            .institutionShortName(\"other\");\n+\n+    mapper.modelToDb(userInstructions, service);\n+  }\n+\n+  @Test(expected = BadRequestException.class)\n+  public void test_modelToDb_nullInstructions() {\n+    final DbInstitution broad =\n+        new DbInstitution().setShortName(\"Broad\").setDisplayName(\"The Broad Institute\");\n+    when(service.getDbInstitutionOrThrow(broad.getShortName())).thenReturn(broad);\n+\n+    final InstitutionUserInstructions userInstructions =\n+        new InstitutionUserInstructions().institutionShortName(broad.getShortName());\n+\n+    mapper.modelToDb(userInstructions, service);\n+  }\n+\n+  @Test(expected = BadRequestException.class)\n+  public void test_modelToDb_emptyInstructions() {\n+    final DbInstitution broad =\n+        new DbInstitution().setShortName(\"Broad\").setDisplayName(\"The Broad Institute\");\n+    when(service.getDbInstitutionOrThrow(broad.getShortName())).thenReturn(broad);\n+\n+    final InstitutionUserInstructions userInstructions =\n+        new InstitutionUserInstructions()\n+            .instructions(\"\")", "originalCommit": "46f4be8b14bc94cc3f781fd220c4a4696386fef9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "84d23dfe9ed34fa2e4394178868fd2215d9e87f3", "url": "https://github.com/all-of-us/workbench/commit/84d23dfe9ed34fa2e4394178868fd2215d9e87f3", "message": "comments", "committedDate": "2020-05-29T14:04:22Z", "type": "commit"}, {"oid": "426b62280fd4867da1d6c06f4061730e89df25da", "url": "https://github.com/all-of-us/workbench/commit/426b62280fd4867da1d6c06f4061730e89df25da", "message": "Let MapStruct do more of the work", "committedDate": "2020-05-29T14:46:05Z", "type": "commit"}, {"oid": "5df0ba3d1d779ec6582bfe6830d98985bc82c1cc", "url": "https://github.com/all-of-us/workbench/commit/5df0ba3d1d779ec6582bfe6830d98985bc82c1cc", "message": "add DbUser equality", "committedDate": "2020-05-29T15:00:16Z", "type": "commit"}, {"oid": "fdf74c9864fc66f2b7fc8187ee31d8c4cd26b2b3", "url": "https://github.com/all-of-us/workbench/commit/fdf74c9864fc66f2b7fc8187ee31d8c4cd26b2b3", "message": "rv dbuser eauals", "committedDate": "2020-05-29T15:10:53Z", "type": "commit"}, {"oid": "ce7c025c6fcb90d93952a97d822477f4a1cfeed2", "url": "https://github.com/all-of-us/workbench/commit/ce7c025c6fcb90d93952a97d822477f4a1cfeed2", "message": "DbUser equalUsernames() and usernameHashCode()", "committedDate": "2020-05-29T15:20:55Z", "type": "commit"}, {"oid": "c2c17be89fce7834b6068c33e293c212efb28fda", "url": "https://github.com/all-of-us/workbench/commit/c2c17be89fce7834b6068c33e293c212efb28fda", "message": "lint", "committedDate": "2020-05-29T15:28:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyMzA2MQ==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r432623061", "bodyText": "If you define a mapping from domain and dbInst to DbInstitutionEmailDomain, MapStruct should be able to write this code I think.", "author": "jaycarlton", "createdAt": "2020-05-29T17:09:18Z", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionEmailDomainMapper.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package org.pmiops.workbench.institution;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.stream.Collectors;\n+import org.mapstruct.Mapper;\n+import org.mapstruct.NullValueMappingStrategy;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailDomain;\n+import org.pmiops.workbench.model.Institution;\n+import org.pmiops.workbench.utils.mappers.MapStructConfig;\n+\n+@Mapper(\n+    config = MapStructConfig.class,\n+    nullValueMappingStrategy = NullValueMappingStrategy.RETURN_DEFAULT)\n+public interface InstitutionEmailDomainMapper {\n+  default Set<DbInstitutionEmailDomain> modelToDb(\n+      final Institution modelInstitution, final DbInstitution dbInstitution) {\n+    return Optional.ofNullable(modelInstitution.getEmailDomains()).orElse(Collections.emptyList())\n+        .stream()\n+        .distinct()\n+        .map(\n+            domain ->\n+                new DbInstitutionEmailDomain().setEmailDomain(domain).setInstitution(dbInstitution))", "originalCommit": "c2c17be89fce7834b6068c33e293c212efb28fda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY1Mzk0MQ==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r432653941", "bodyText": "updated", "author": "jmthibault79", "createdAt": "2020-05-29T18:10:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyMzA2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyMzY4Mw==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r432623683", "bodyText": "nit: I wonder if there's a way to do this inline in a mapping annotation. No need to chase that rabbit if you have other prey.", "author": "jaycarlton", "createdAt": "2020-05-29T17:10:30Z", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionEmailDomainMapper.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package org.pmiops.workbench.institution;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.stream.Collectors;\n+import org.mapstruct.Mapper;\n+import org.mapstruct.NullValueMappingStrategy;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailDomain;\n+import org.pmiops.workbench.model.Institution;\n+import org.pmiops.workbench.utils.mappers.MapStructConfig;\n+\n+@Mapper(\n+    config = MapStructConfig.class,\n+    nullValueMappingStrategy = NullValueMappingStrategy.RETURN_DEFAULT)\n+public interface InstitutionEmailDomainMapper {\n+  default Set<DbInstitutionEmailDomain> modelToDb(\n+      final Institution modelInstitution, final DbInstitution dbInstitution) {\n+    return Optional.ofNullable(modelInstitution.getEmailDomains()).orElse(Collections.emptyList())\n+        .stream()\n+        .distinct()\n+        .map(\n+            domain ->\n+                new DbInstitutionEmailDomain().setEmailDomain(domain).setInstitution(dbInstitution))\n+        .collect(Collectors.toSet());\n+  }\n+\n+  SortedSet<String> dbDomainsToStrings(final Set<DbInstitutionEmailDomain> dbDomains);\n+\n+  default String dbDomainToString(final DbInstitutionEmailDomain dbDomain) {", "originalCommit": "c2c17be89fce7834b6068c33e293c212efb28fda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzNTY4NA==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r432635684", "bodyText": "style-wise: I would just pass the short name in as the second parameter instead of the whole service. It's a \"law of demeter\" thing: You hand the ATM your debit card, not your jacket with the pocket with the wallet with the card in it.  As a bonus, this would allow other services to use the mapper more easily.\nAlso, do you not need @Context here?", "author": "jaycarlton", "createdAt": "2020-05-29T17:33:20Z", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionUserInstructionsMapper.java", "diffHunk": "@@ -1,37 +1,36 @@\n package org.pmiops.workbench.institution;\n \n-import org.mapstruct.AfterMapping;\n-import org.mapstruct.Context;\n+import com.google.common.base.Strings;\n import org.mapstruct.Mapper;\n-import org.mapstruct.Mapping;\n-import org.mapstruct.MappingTarget;\n import org.owasp.html.HtmlPolicyBuilder;\n import org.owasp.html.PolicyFactory;\n import org.pmiops.workbench.db.model.DbInstitution;\n import org.pmiops.workbench.db.model.DbInstitutionUserInstructions;\n+import org.pmiops.workbench.exceptions.BadRequestException;\n import org.pmiops.workbench.model.InstitutionUserInstructions;\n import org.pmiops.workbench.utils.mappers.MapStructConfig;\n \n @Mapper(config = MapStructConfig.class)\n public interface InstitutionUserInstructionsMapper {\n-  @Mapping(target = \"institutionUserInstructionsId\", ignore = true)\n-  @Mapping(target = \"institution\", ignore = true) // set by setFields()\n-  @Mapping(target = \"userInstructions\", ignore = true) // set by setFields()\n-  DbInstitutionUserInstructions modelToDb(\n-      InstitutionUserInstructions modelObject, @Context InstitutionService institutionService);\n+  default DbInstitutionUserInstructions modelToDb(\n+      InstitutionUserInstructions modelObject, InstitutionService institutionService) {", "originalCommit": "c2c17be89fce7834b6068c33e293c212efb28fda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzODQ0Nw==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r432638447", "bodyText": "nit: the spelled out numbers as names confuse me. They make me use the wrong side of my brain.", "author": "jaycarlton", "createdAt": "2020-05-29T17:38:58Z", "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionEmailDomainDaoTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package org.pmiops.workbench.db.dao;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailDomain;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.annotation.DirtiesContext.ClassMode;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+@DirtiesContext(classMode = ClassMode.BEFORE_EACH_TEST_METHOD)\n+public class InstitutionEmailDomainDaoTest {\n+\n+  @Autowired InstitutionDao institutionDao;\n+  @Autowired InstitutionEmailDomainDao institutionEmailDomainDao;\n+\n+  private DbInstitution testInst;\n+\n+  @Before\n+  public void setUp() {\n+    testInst =\n+        institutionDao.save(\n+            new DbInstitution().setShortName(\"Broad\").setDisplayName(\"The Broad Institute\"));\n+  }\n+\n+  @Test\n+  public void test_getByInstitution_empty() {\n+    assertThat(institutionEmailDomainDao.getByInstitution(testInst)).isEmpty();\n+    assertThat(institutionEmailDomainDao.count()).isEqualTo(0L);\n+  }\n+\n+  @Test\n+  public void test_getByInstitution_multiple() {\n+    final DbInstitutionEmailDomain one =", "originalCommit": "c2c17be89fce7834b6068c33e293c212efb28fda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzODc4Mg==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r432638782", "bodyText": "nit: use hasSize() on dbAddresses", "author": "jaycarlton", "createdAt": "2020-05-29T17:39:42Z", "path": "api/src/test/java/org/pmiops/workbench/institution/InstitutionEmailAddressMapperTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package org.pmiops.workbench.institution;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Sets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailAddress;\n+import org.pmiops.workbench.model.Institution;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@Import(InstitutionEmailAddressMapperImpl.class)\n+@DataJpaTest\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.BEFORE_EACH_TEST_METHOD)\n+public class InstitutionEmailAddressMapperTest {\n+  @Autowired InstitutionEmailAddressMapper mapper;\n+\n+  @Test\n+  public void test_modelToDb() {\n+    // contains an out-of-order duplicate\n+    final List<String> rawAddresses =\n+        Lists.newArrayList(\"alice@nih.gov\", \"joel@other-inst.org\", \"alice@nih.gov\");\n+    final SortedSet<String> sortedDistinctAddresses = new TreeSet<>(rawAddresses);\n+\n+    final Institution modelInst =\n+        new Institution()\n+            .shortName(\"Broad\")\n+            .displayName(\"The Broad Institute\")\n+            .emailAddresses(rawAddresses);\n+\n+    // does not need to match the modelInst; it is simply attached to the DbInstitutionEmailAddress\n+    final DbInstitution dbInst = new DbInstitution();\n+\n+    final Set<DbInstitutionEmailAddress> dbAddresses = mapper.modelToDb(modelInst, dbInst);\n+\n+    assertThat(dbAddresses.size()).isEqualTo(sortedDistinctAddresses.size());", "originalCommit": "c2c17be89fce7834b6068c33e293c212efb28fda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzOTMzMg==", "url": "https://github.com/all-of-us/workbench/pull/3618#discussion_r432639332", "bodyText": "nit: you can do this without a loop if you like by asserting with contains all and doing the stream operation for all match.", "author": "jaycarlton", "createdAt": "2020-05-29T17:40:40Z", "path": "api/src/test/java/org/pmiops/workbench/institution/InstitutionEmailAddressMapperTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package org.pmiops.workbench.institution;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Sets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailAddress;\n+import org.pmiops.workbench.model.Institution;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@Import(InstitutionEmailAddressMapperImpl.class)\n+@DataJpaTest\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.BEFORE_EACH_TEST_METHOD)\n+public class InstitutionEmailAddressMapperTest {\n+  @Autowired InstitutionEmailAddressMapper mapper;\n+\n+  @Test\n+  public void test_modelToDb() {\n+    // contains an out-of-order duplicate\n+    final List<String> rawAddresses =\n+        Lists.newArrayList(\"alice@nih.gov\", \"joel@other-inst.org\", \"alice@nih.gov\");\n+    final SortedSet<String> sortedDistinctAddresses = new TreeSet<>(rawAddresses);\n+\n+    final Institution modelInst =\n+        new Institution()\n+            .shortName(\"Broad\")\n+            .displayName(\"The Broad Institute\")\n+            .emailAddresses(rawAddresses);\n+\n+    // does not need to match the modelInst; it is simply attached to the DbInstitutionEmailAddress\n+    final DbInstitution dbInst = new DbInstitution();\n+\n+    final Set<DbInstitutionEmailAddress> dbAddresses = mapper.modelToDb(modelInst, dbInst);\n+\n+    assertThat(dbAddresses.size()).isEqualTo(sortedDistinctAddresses.size());\n+\n+    for (final DbInstitutionEmailAddress dbAddress : dbAddresses) {", "originalCommit": "c2c17be89fce7834b6068c33e293c212efb28fda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6dac5fa255c7f96980e6837b2a5c4838aa94207a", "url": "https://github.com/all-of-us/workbench/commit/6dac5fa255c7f96980e6837b2a5c4838aa94207a", "message": "let MapStruct do more work", "committedDate": "2020-05-29T18:08:41Z", "type": "commit"}, {"oid": "801c1e98f2ec99306fd8d4016530da538379064c", "url": "https://github.com/all-of-us/workbench/commit/801c1e98f2ec99306fd8d4016530da538379064c", "message": "Don't need to call back into the service here", "committedDate": "2020-05-29T18:16:20Z", "type": "commit"}, {"oid": "e70276d958c15db8154128232d5e86901596b7c2", "url": "https://github.com/all-of-us/workbench/commit/e70276d958c15db8154128232d5e86901596b7c2", "message": "hasSize", "committedDate": "2020-05-29T18:18:33Z", "type": "commit"}, {"oid": "39e8450e744906a95b65193c49be824046325beb", "url": "https://github.com/all-of-us/workbench/commit/39e8450e744906a95b65193c49be824046325beb", "message": "toModel()", "committedDate": "2020-05-29T18:27:49Z", "type": "commit"}, {"oid": "1ea1474d34f52a5b4e54fd7237d33143e1141fe2", "url": "https://github.com/all-of-us/workbench/commit/1ea1474d34f52a5b4e54fd7237d33143e1141fe2", "message": "test fixes", "committedDate": "2020-05-29T18:30:43Z", "type": "commit"}, {"oid": "5c91c4d64d9f1333c16dc66278e55f67464b1e78", "url": "https://github.com/all-of-us/workbench/commit/5c91c4d64d9f1333c16dc66278e55f67464b1e78", "message": "more test fixes", "committedDate": "2020-05-29T18:35:17Z", "type": "commit"}]}