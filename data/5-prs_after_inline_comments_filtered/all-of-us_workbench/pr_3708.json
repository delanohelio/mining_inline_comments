{"pr_number": 3708, "pr_title": "[RW-4929][risk=low] Add flag control & GSuite email extraction for dev auto-registration", "pr_createdAt": "2020-06-24T17:36:47Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3708", "timeline": [{"oid": "1870573fd38bc7eef7f0f522c81cdf9c1f385b99", "url": "https://github.com/all-of-us/workbench/commit/1870573fd38bc7eef7f0f522c81cdf9c1f385b99", "message": "Initial check-in with tests and new config variable.", "committedDate": "2020-06-19T18:39:14Z", "type": "commit"}, {"oid": "8de63199d8a99fe3c2da65c7d8951ea995306b81", "url": "https://github.com/all-of-us/workbench/commit/8de63199d8a99fe3c2da65c7d8951ea995306b81", "message": "Split out DevUserRegistration into its own service.", "committedDate": "2020-06-20T04:20:04Z", "type": "commit"}, {"oid": "9bb9f7f230ee3dc661b3cbb9693dad91806a7493", "url": "https://github.com/all-of-us/workbench/commit/9bb9f7f230ee3dc661b3cbb9693dad91806a7493", "message": "Rename config var and fix integation tests.", "committedDate": "2020-06-24T17:44:46Z", "type": "commit"}, {"oid": "e3f52ca05b825e11796b507aed9407b1abc06ab3", "url": "https://github.com/all-of-us/workbench/commit/e3f52ca05b825e11796b507aed9407b1abc06ab3", "message": "Fix method rename.", "committedDate": "2020-06-24T17:50:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA2NjE1NQ==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445066155", "bodyText": "Changes in this file were mostly opportunistic (e.g. s/emailAddress/email/ in method names), but the key need was to add a method supportting conversion from the full GSuite email address (gjordan@fake-research-aou.org) to the username (gjordan).", "author": "gjuggler", "createdAt": "2020-06-24T17:46:33Z", "path": "api/src/main/java/org/pmiops/workbench/google/DirectoryService.java", "diffHunk": "@@ -1,25 +1,29 @@\n package org.pmiops.workbench.google;", "originalCommit": "9bb9f7f230ee3dc661b3cbb9693dad91806a7493", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA2NjUzMA==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445066530", "bodyText": "I decided this wasn't worth a unit test case... feel free to disagree!", "author": "gjuggler", "createdAt": "2020-06-24T17:47:13Z", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -356,4 +356,10 @@ private void validateInstitution(Institution institutionRequest) {\n               });\n     }\n   }\n+\n+  public Optional<Institution> getFirstMatchingInstitution(final String contactEmail) {", "originalCommit": "9bb9f7f230ee3dc661b3cbb9693dad91806a7493", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA2Njc2Nw==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445066767", "bodyText": "Opportunistic rename \u2013 the original var didn't conform to style guidelines, and userInfo is sufficiently precise.", "author": "gjuggler", "createdAt": "2020-06-24T17:47:38Z", "path": "api/src/main/java/org/pmiops/workbench/interceptors/AuthInterceptor.java", "diffHunk": "@@ -110,16 +114,15 @@ public boolean preHandle(HttpServletRequest request, HttpServletResponse respons\n     }\n \n     final String token = authorizationHeader.substring(\"Bearer\".length()).trim();\n-    final Userinfoplus OAuth2Userinfo = userInfoService.getUserInfo(token);\n+    final Userinfoplus userInfo = userInfoService.getUserInfo(token);", "originalCommit": "9bb9f7f230ee3dc661b3cbb9693dad91806a7493", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE0OTE1MA==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445149150", "bodyText": "nit: Userinfoplus isn't the most descriptive class name. Maybe oauthInfo? \"user\" is implied I think.", "author": "jaycarlton", "createdAt": "2020-06-24T20:22:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA2Njc2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwMjgzOQ==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445202839", "bodyText": "I agree, but we don't control that class. It's part of Google's OAuth2 implementation.", "author": "gjuggler", "createdAt": "2020-06-24T22:18:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA2Njc2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUwODQ5Nw==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445508497", "bodyText": "I understand,  but I'm saying  changing the var  name to  be more descriptive at the  expense of matching the type would help.", "author": "jaycarlton", "createdAt": "2020-06-25T12:07:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA2Njc2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA2NzQzNA==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445067434", "bodyText": "A lot of the changes in this file were related to Spring-ifying this test class, and pulling some very common logic into simple helper methods.", "author": "gjuggler", "createdAt": "2020-06-24T17:48:49Z", "path": "api/src/test/java/org/pmiops/workbench/interceptors/AuthInterceptorTest.java", "diffHunk": "@@ -47,95 +60,114 @@ public void handle() {}\n   public void handle() {}\n }\n \n+@RunWith(SpringRunner.class)", "originalCommit": "9bb9f7f230ee3dc661b3cbb9693dad91806a7493", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b64740172c49d08096ada5e3af84a63e86b95122", "url": "https://github.com/all-of-us/workbench/commit/b64740172c49d08096ada5e3af84a63e86b95122", "message": "One more unit test fix.", "committedDate": "2020-06-24T18:28:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3NjUyNw==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445076527", "bodyText": "nit: If you do\nimport static com.google.common.truth.Truth8.assertThat;\n\nin addition to the main assertThat(), you can use\nassertThat(service.getContactEmail(userName)).hasValue(\"notasecret@gmail.com\");", "author": "jaycarlton", "createdAt": "2020-06-24T18:04:54Z", "path": "api/src/integration/java/org/pmiops/workbench/google/DirectoryServiceImplIntegrationTest.java", "diffHunk": "@@ -53,7 +53,14 @@ public void testCreateAndDeleteTestUser() {\n                 });\n     // Ensure our two custom schema fields are correctly set & re-fetched from GSuite.\n     assertThat(aouMeta).containsEntry(\"Institution\", \"All of Us Research Workbench\");\n-    assertThat(service.getContactEmailAddress(userName)).isEqualTo(\"notasecret@gmail.com\");\n+    assertThat(service.getContactEmail(userName).get()).isEqualTo(\"notasecret@gmail.com\");", "originalCommit": "e3f52ca05b825e11796b507aed9407b1abc06ab3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI0MDAxNQ==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445240015", "bodyText": "Good call, done. (Is there a good way to get IntelliJ to offer to auto-import the Truth8 version when I want to use this pattern?)", "author": "gjuggler", "createdAt": "2020-06-25T00:17:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3NjUyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3ODI0Mw==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445078243", "bodyText": "Maybe add a comment that this \"email\" is what we now call username.", "author": "jaycarlton", "createdAt": "2020-06-24T18:08:08Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -312,12 +312,15 @@ public DbUser createServiceAccountUser(String username) {\n   }\n \n   @Override\n-  public DbUser createUser(final Userinfoplus oAuth2Userinfo) {\n+  public DbUser createUser(\n+      final Userinfoplus oAuth2Userinfo,\n+      final String contactEmail,\n+      DbVerifiedInstitutionalAffiliation dbVerifiedAffiliation) {\n     return createUser(\n         oAuth2Userinfo.getGivenName(),\n         oAuth2Userinfo.getFamilyName(),\n         oAuth2Userinfo.getEmail(),", "originalCommit": "e3f52ca05b825e11796b507aed9407b1abc06ab3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3ODUwMw==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445078503", "bodyText": "aside: a builder would be nice for this class.", "author": "jaycarlton", "createdAt": "2020-06-24T18:08:39Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -326,7 +329,7 @@ public DbUser createUser(final Userinfoplus oAuth2Userinfo) {\n         null,\n         null,\n         null,\n-        null);\n+        dbVerifiedAffiliation);", "originalCommit": "e3f52ca05b825e11796b507aed9407b1abc06ab3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3OTExMg==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445079112", "bodyText": "this is the only place I've seen gSuiteEmailAddress instead of username. Is the idea here that there may not actually be a user yet?", "author": "jaycarlton", "createdAt": "2020-06-24T18:09:44Z", "path": "api/src/main/java/org/pmiops/workbench/google/DirectoryService.java", "diffHunk": "@@ -1,25 +1,29 @@\n package org.pmiops.workbench.google;\n \n import com.google.api.services.directory.model.User;\n+import java.util.Optional;\n \n /** Encapsulate Googe APIs for handling GSuite user accounts. */\n public interface DirectoryService {\n   boolean isUsernameTaken(String username);\n \n-  /** Returns a user via email address lookup. */\n+  /** Returns a user via email address lookup. Returns null if no user was found. */\n   User getUser(String email);\n \n   /**\n    * Returns a user via username lookup (e.g. the user's GSuite email address without the domain\n-   * suffix.\n+   * suffix. Returns null if no user was found.\n    */\n   User getUserByUsername(String username);\n \n+  /** Looks up a user by username and returns their stored contact email address, if available. */\n+  Optional<String> getContactEmail(String username);\n+\n   /**\n-   * Looks up a user by username and returns their stored contact email address. If no contact email\n-   * is stored in G Suite, then null is returned.\n+   * Looks up a user by GSuite email address and returns their stored contact email address, if\n+   * available.\n    */\n-  String getContactEmailAddress(String username);\n+  Optional<String> getContactEmailFromGSuiteEmail(String gSuiteEmailAddress);", "originalCommit": "e3f52ca05b825e11796b507aed9407b1abc06ab3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyNDg2NA==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445124864", "bodyText": "Mostly for consistency and clarity within this file, since username within this service has an existing meaning (which is the GSuite email without the domain suffix). It looks like it would be possible to drop that meaning from this service \u2013\u00a0IMO not a huge win, I'll opt to leave as-is.", "author": "gjuggler", "createdAt": "2020-06-24T19:34:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3OTExMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE0Njk2NA==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445146964", "bodyText": "In that case, I'd rename username in this class then to usernamePrefix or some such.\nFWIW I rarely absorb code a file at a time. It's 80% hopping via IDE linkage between occurrences. Email already means two things. If username means two things, then we're in trouble.", "author": "jaycarlton", "createdAt": "2020-06-24T20:17:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3OTExMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI4NTU3MA==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445285570", "bodyText": "I was about to punt on this, but when I looked through even this file I found there was some inconsistency in how username alone was being used. I took a broader pass at cleaning up the naming in existing methods too (turns out most of these are only used in one place, so the surface area was relatively small). Feels like an improvement, as long as I didn't break anything. PTAL.", "author": "gjuggler", "createdAt": "2020-06-25T03:22:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3OTExMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA4MDgyMw==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445080823", "bodyText": "nit: If we need to do much with this API, a helper class might...help. For example\nOptional<String> getStringField(customSchemaMap, schemaName, fieldName)", "author": "jaycarlton", "createdAt": "2020-06-24T18:12:51Z", "path": "api/src/main/java/org/pmiops/workbench/google/DirectoryServiceImpl.java", "diffHunk": "@@ -189,12 +189,26 @@ public boolean isUsernameTaken(String username) {\n   }\n \n   // Returns a user's contact email address via the custom schema in the directory API.\n-  public String getContactEmailAddress(String username) {\n-    return (String)\n-        getUserByUsername(username)\n-            .getCustomSchemas()\n-            .get(GSUITE_AOU_SCHEMA_NAME)\n-            .get(GSUITE_FIELD_CONTACT_EMAIL);\n+  public Optional<String> getContactEmail(String username) {\n+    return Optional.ofNullable(getUserByUsername(username))\n+        .map(\n+            user ->\n+                (String)", "originalCommit": "e3f52ca05b825e11796b507aed9407b1abc06ab3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA5NTEwNQ==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445095105", "bodyText": "nit: I prefer very small names for lambda arguments, especially if they go out of scope in the same line.", "author": "jaycarlton", "createdAt": "2020-06-24T18:39:00Z", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -356,4 +356,10 @@ private void validateInstitution(Institution institutionRequest) {\n               });\n     }\n   }\n+\n+  public Optional<Institution> getFirstMatchingInstitution(final String contactEmail) {\n+    return getInstitutions().stream()\n+        .filter(institution -> validateInstitutionalEmail(institution, contactEmail))", "originalCommit": "e3f52ca05b825e11796b507aed9407b1abc06ab3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE2OTE1Mw==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445169153", "bodyText": "If we had a clear style rule one way or another, I'd follow it! For now I'm sticking with my general aesthetic, which is longer-but-clearer parameter names.", "author": "gjuggler", "createdAt": "2020-06-24T21:00:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA5NTEwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE0NzUxOA==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445147518", "bodyText": "super nit: might be faster to do this via a query directly on the DAO, but with a small # of institutions it doesn't much matter.", "author": "jaycarlton", "createdAt": "2020-06-24T20:18:55Z", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -356,4 +356,10 @@ private void validateInstitution(Institution institutionRequest) {\n               });\n     }\n   }\n+\n+  public Optional<Institution> getFirstMatchingInstitution(final String contactEmail) {\n+    return getInstitutions().stream()", "originalCommit": "b64740172c49d08096ada5e3af84a63e86b95122", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE2OTcyMA==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445169720", "bodyText": "Good point \u2013\u00a0I'll avoid premature optimization in this case (especially since we do a full read of institutions in a few other places in this service).", "author": "gjuggler", "createdAt": "2020-06-24T21:01:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE0NzUxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1MDA4NQ==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445150085", "bodyText": "nit: not sure if \"dev\" is an approved abbrev.", "author": "jaycarlton", "createdAt": "2020-06-24T20:23:53Z", "path": "api/src/main/java/org/pmiops/workbench/user/DevUserRegistrationService.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package org.pmiops.workbench.user;\n+\n+import com.google.api.services.oauth2.model.Userinfoplus;\n+import org.pmiops.workbench.db.model.DbUser;\n+\n+public interface DevUserRegistrationService {", "originalCommit": "b64740172c49d08096ada5e3af84a63e86b95122", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE3MDc3NA==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445170774", "bodyText": "I think dev is pretty well-established usage \u2013\u00a0e.g. project.rb dev-up", "author": "gjuggler", "createdAt": "2020-06-24T21:04:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1MDA4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1MDYzNg==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445150636", "bodyText": "Might as well use the full class name createUserFromUserinfoplus or leave it out, i.e. createUser().", "author": "jaycarlton", "createdAt": "2020-06-24T20:24:58Z", "path": "api/src/main/java/org/pmiops/workbench/user/DevUserRegistrationService.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package org.pmiops.workbench.user;\n+\n+import com.google.api.services.oauth2.model.Userinfoplus;\n+import org.pmiops.workbench.db.model.DbUser;\n+\n+public interface DevUserRegistrationService {\n+  DbUser createUserFromUserInfo(Userinfoplus userInfo);", "originalCommit": "b64740172c49d08096ada5e3af84a63e86b95122", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwMjA4MA==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445202080", "bodyText": "Yeah, I agree this isn't super consistent. Just createUser seems like an all around improvement \u2013\u00a0done.", "author": "gjuggler", "createdAt": "2020-06-24T22:16:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1MDYzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1MjM3Mw==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445152373", "bodyText": "It seems awkward that this service needs to know anything about institutions. It seems like the UserService should have all the machinery necessary to affiliate the user.", "author": "jaycarlton", "createdAt": "2020-06-24T20:28:09Z", "path": "api/src/main/java/org/pmiops/workbench/user/DevUserRegistrationServiceImpl.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package org.pmiops.workbench.user;\n+\n+import com.google.api.services.oauth2.model.Userinfoplus;\n+import java.util.Optional;\n+import java.util.logging.Logger;\n+import org.pmiops.workbench.db.dao.UserService;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.exceptions.BadRequestException;\n+import org.pmiops.workbench.google.DirectoryService;\n+import org.pmiops.workbench.institution.InstitutionService;\n+import org.pmiops.workbench.institution.VerifiedInstitutionalAffiliationMapper;\n+import org.pmiops.workbench.model.Institution;\n+import org.pmiops.workbench.model.InstitutionalRole;\n+import org.pmiops.workbench.model.VerifiedInstitutionalAffiliation;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class DevUserRegistrationServiceImpl implements DevUserRegistrationService {\n+\n+  private static final Logger log =\n+      Logger.getLogger(DevUserRegistrationServiceImpl.class.getName());\n+\n+  private final DirectoryService directoryService;\n+  private final InstitutionService institutionService;\n+  private final UserService userService;\n+  private final VerifiedInstitutionalAffiliationMapper verifiedInstitutionalAffiliationMapper;\n+\n+  @Autowired\n+  DevUserRegistrationServiceImpl(\n+      DirectoryService directoryService,\n+      InstitutionService institutionService,\n+      UserService userService,\n+      VerifiedInstitutionalAffiliationMapper verifiedInstitutionalAffiliationMapper) {\n+    this.directoryService = directoryService;\n+    this.institutionService = institutionService;\n+    this.userService = userService;\n+    this.verifiedInstitutionalAffiliationMapper = verifiedInstitutionalAffiliationMapper;\n+  }\n+\n+  @Override\n+  public DbUser createUserFromUserInfo(Userinfoplus userInfo) {\n+    // We'll try to lookup the GSuite contact email if available. Otherwise, fall back to the\n+    // username email address (e.g. foobar@fake-research-aou.org).\n+    Optional<String> gSuiteContactEmail =\n+        directoryService.getContactEmailFromGSuiteEmail(userInfo.getEmail());\n+    String contactEmail = gSuiteContactEmail.orElse(userInfo.getEmail());\n+\n+    log.info(\n+        String.format(\n+            \"Re-creating dev user '%s' with contact email '%s'.\",\n+            userInfo.getEmail(), contactEmail));\n+\n+    Institution institution =\n+        institutionService\n+            .getFirstMatchingInstitution(contactEmail)\n+            .orElseThrow(\n+                () ->\n+                    new BadRequestException(\n+                        String.format(\n+                            \"Contact email %s does not match any institutions. Cannot register new dev user.\",\n+                            contactEmail)));\n+    VerifiedInstitutionalAffiliation verifiedAffiliation =", "originalCommit": "b64740172c49d08096ada5e3af84a63e86b95122", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1NTY3Mg==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445155672", "bodyText": "nit: you can use the new Optional<DbUser> getByUsername(String username) on UserService to avoid the null comparison.", "author": "jaycarlton", "createdAt": "2020-06-24T20:34:37Z", "path": "api/src/main/java/org/pmiops/workbench/interceptors/AuthInterceptor.java", "diffHunk": "@@ -155,8 +159,13 @@ public boolean preHandle(HttpServletRequest request, HttpServletResponse respons\n     }\n     DbUser user = userDao.findUserByUsername(userName);", "originalCommit": "b64740172c49d08096ada5e3af84a63e86b95122", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwMjUwMQ==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445202501", "bodyText": "I made a good-faith attempt to use Optional patterns here, but I couldn't come up with a solution that wasn't more awkward than the current conditional logic. The challenge is that we want to either provide a non-null DbUser object if the flag allows it, or return false, which isn't easily expressed within chained optional lambdas.\nThere was a bug in my existing logic though, which I did fix (pushing new commit in a minute). So there's that...", "author": "gjuggler", "createdAt": "2020-06-24T22:17:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1NTY3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUxMDY3OA==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445510678", "bodyText": "Yeah, it's hard to write awkward logic with Optionals, which is kind of the point.\nFWIW you can do DbUser user  = getByUsername(String username).orElseGet(() -> userService.createServiceAccountUser(userName)); to clean up one  conditional. Or better yet put a getOrCreateServiceAccount(String username) on the UserService.", "author": "jaycarlton", "createdAt": "2020-06-25T12:11:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1NTY3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1NjE1NQ==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445156155", "bodyText": "for later: it would be good to audit this...though if it never happens in production \ud83e\udd37 .", "author": "jaycarlton", "createdAt": "2020-06-24T20:35:31Z", "path": "api/src/main/java/org/pmiops/workbench/interceptors/AuthInterceptor.java", "diffHunk": "@@ -155,8 +159,13 @@ public boolean preHandle(HttpServletRequest request, HttpServletResponse respons\n     }\n     DbUser user = userDao.findUserByUsername(userName);\n     if (user == null) {\n-      // TODO(danrodney): start populating contact email in Google account, use it here.\n-      user = userService.createUser(OAuth2Userinfo);\n+      if (workbenchConfigProvider.get().access.unsafeAllowUserCreationFromGSuiteData) {\n+        DbUser dbUser = devUserRegistrationService.createUserFromUserInfo(userInfo);\n+        log.info(String.format(\"Dev user '%s' has been re-created.\", dbUser.getUsername()));", "originalCommit": "b64740172c49d08096ada5e3af84a63e86b95122", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1NjkwOA==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445156908", "bodyText": "You could make this a bean I think.", "author": "jaycarlton", "createdAt": "2020-06-24T20:36:55Z", "path": "api/src/test/java/org/pmiops/workbench/interceptors/AuthInterceptorTest.java", "diffHunk": "@@ -47,95 +59,114 @@ public void handle() {}\n   public void handle() {}\n }\n \n+@RunWith(SpringRunner.class)\n public class AuthInterceptorTest {\n \n   private static final long USER_ID = 123L;\n \n-  @Mock private UserInfoService userInfoService;\n-  @Mock private FireCloudService fireCloudService;\n-  @Mock private UserDao userDao;\n+  @MockBean private UserInfoService userInfoService;\n+  @MockBean private FireCloudService fireCloudService;\n+  @MockBean private UserDao userDao;\n+  @MockBean private UserService userService;\n+  @MockBean private DevUserRegistrationService devUserRegistrationService;\n+\n+  private static WorkbenchConfig workbenchConfig;\n+\n   @Mock private HttpServletRequest request;\n   @Mock private HttpServletResponse response;\n   @Mock private HandlerMethod handler;\n-  @Mock private UserService userService;\n+  private DbUser user;\n \n   @Rule public MockitoRule mockitoRule = MockitoJUnit.rule();\n \n-  private AuthInterceptor interceptor;\n-  private DbUser user;\n+  @Autowired private AuthInterceptor interceptor;\n+\n+  @TestConfiguration\n+  @Import({AuthInterceptor.class})\n+  static class Configuration {\n+    @Bean\n+    @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+    public WorkbenchConfig getWorkbenchConfig() {\n+      return workbenchConfig;\n+    }\n+  }\n \n   @Before\n   public void setUp() {\n-    WorkbenchConfig workbenchConfig = new WorkbenchConfig();\n+    workbenchConfig = WorkbenchConfig.createEmptyConfig();\n     workbenchConfig.googleDirectoryService = new GoogleDirectoryServiceConfig();\n     workbenchConfig.googleDirectoryService.gSuiteDomain = \"fake-domain.org\";\n     workbenchConfig.auth = new AuthConfig();\n     workbenchConfig.auth.serviceAccountApiUsers = new ArrayList<>();\n     workbenchConfig.auth.serviceAccountApiUsers.add(\"service-account@appspot.gserviceaccount.com\");\n-    this.interceptor =\n-        new AuthInterceptor(\n-            userInfoService, fireCloudService, Providers.of(workbenchConfig), userDao, userService);\n-    this.user = new DbUser();\n+    user = new DbUser();", "originalCommit": "b64740172c49d08096ada5e3af84a63e86b95122", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE4Mzk2NQ==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445183965", "bodyText": "Not sure why?", "author": "gjuggler", "createdAt": "2020-06-24T21:32:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1NjkwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUwNTg0OQ==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445505849", "bodyText": "Oh  if this class doesn't use a user provider then I guess t that doesn't make sense.", "author": "jaycarlton", "createdAt": "2020-06-25T12:01:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1NjkwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1OTE1MQ==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445159151", "bodyText": "nit: new convention is to have a mock prefix for mock instance variables, since the call site can be a long way from the declaration.", "author": "jaycarlton", "createdAt": "2020-06-24T20:41:22Z", "path": "api/src/test/java/org/pmiops/workbench/interceptors/AuthInterceptorTest.java", "diffHunk": "@@ -47,95 +59,114 @@ public void handle() {}\n   public void handle() {}\n }\n \n+@RunWith(SpringRunner.class)\n public class AuthInterceptorTest {\n \n   private static final long USER_ID = 123L;\n \n-  @Mock private UserInfoService userInfoService;\n-  @Mock private FireCloudService fireCloudService;\n-  @Mock private UserDao userDao;\n+  @MockBean private UserInfoService userInfoService;\n+  @MockBean private FireCloudService fireCloudService;\n+  @MockBean private UserDao userDao;\n+  @MockBean private UserService userService;\n+  @MockBean private DevUserRegistrationService devUserRegistrationService;\n+\n+  private static WorkbenchConfig workbenchConfig;\n+\n   @Mock private HttpServletRequest request;", "originalCommit": "b64740172c49d08096ada5e3af84a63e86b95122", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE4NjI2Nw==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445186267", "bodyText": "\ud83d\udc4d  I think creating an API style guide will be a helpful place to document conventions like this, especially when they're a change from much of our existing code.", "author": "gjuggler", "createdAt": "2020-06-24T21:37:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1OTE1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUwNzU0Mw==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445507543", "bodyText": "I could spend time on that. In most  instances folks are ok making little improvements like that without a guide. I've just been changing them all whenever I edit a test class.", "author": "jaycarlton", "createdAt": "2020-06-25T12:05:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1OTE1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE2MDc0MQ==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445160741", "bodyText": "Are there no other side effects to verify here?", "author": "jaycarlton", "createdAt": "2020-06-24T20:44:23Z", "path": "api/src/test/java/org/pmiops/workbench/user/DevUserRegistrationServiceTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package org.pmiops.workbench.user;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.api.services.oauth2.model.Userinfoplus;\n+import java.util.Optional;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.pmiops.workbench.db.dao.UserService;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbVerifiedInstitutionalAffiliation;\n+import org.pmiops.workbench.exceptions.BadRequestException;\n+import org.pmiops.workbench.google.DirectoryService;\n+import org.pmiops.workbench.institution.InstitutionService;\n+import org.pmiops.workbench.institution.VerifiedInstitutionalAffiliationMapperImpl;\n+import org.pmiops.workbench.model.Institution;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+public class DevUserRegistrationServiceTest {\n+\n+  @MockBean private DirectoryService directoryService;\n+  @MockBean private InstitutionService institutionService;\n+  @MockBean private UserService userService;\n+\n+  private Userinfoplus userInfo;\n+  private ArgumentCaptor<DbVerifiedInstitutionalAffiliation> dbAffiliationCaptor =\n+      ArgumentCaptor.forClass(DbVerifiedInstitutionalAffiliation.class);\n+\n+  @Autowired private DevUserRegistrationService service;\n+\n+  @TestConfiguration\n+  @Import({DevUserRegistrationServiceImpl.class, VerifiedInstitutionalAffiliationMapperImpl.class})\n+  static class Configuration {}\n+\n+  @Before\n+  public void setUp() {\n+    userInfo = new Userinfoplus().setEmail(\"gjordan@fake-research-aou.org\");\n+  }\n+\n+  @Test\n+  public void testCreateUserFromUserInfo() {\n+    // Tests the happy path: a contact email and matching institution are both found, allowing us\n+    // to register the dev user.\n+    DbUser dbUser = new DbUser();\n+    dbUser.setContactEmail(\"gregory.jordan.123@gmail.com\");\n+    dbUser.setUsername(\"gjordan@fake-research-aou.org\");\n+    DbInstitution dbInstitution = new DbInstitution();\n+    dbInstitution.setShortName(\"Google\");\n+\n+    when(directoryService.getContactEmailFromGSuiteEmail(eq(\"gjordan@fake-research-aou.org\")))\n+        .thenReturn(Optional.of(\"gregory.jordan.123@gmail.com\"));\n+    when(institutionService.getFirstMatchingInstitution(\"gregory.jordan.123@gmail.com\"))\n+        .thenReturn(Optional.of(new Institution().shortName(\"Google\")));\n+    when(institutionService.getDbInstitutionOrThrow(eq(\"Google\"))).thenReturn(dbInstitution);\n+    when(userService.createUser(\n+            eq(userInfo), eq(\"gregory.jordan.123@gmail.com\"), dbAffiliationCaptor.capture()))\n+        .thenReturn(dbUser);\n+\n+    service.createUserFromUserInfo(userInfo);\n+\n+    assertThat(dbAffiliationCaptor.getValue().getInstitution().getShortName()).isEqualTo(\"Google\");", "originalCommit": "b64740172c49d08096ada5e3af84a63e86b95122", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE5NDgxMA==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445194810", "bodyText": "The Mockito stubs above pretty much cover the function under test line-by-line... I couldn't really think of anything else that wouldn't be super redundant.", "author": "gjuggler", "createdAt": "2020-06-24T21:57:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE2MDc0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUxNDQ0NA==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445514444", "bodyText": "OK. I was going to  see if any other fields on the  created user could  be validated, but it's mocks all  the way down.", "author": "jaycarlton", "createdAt": "2020-06-25T12:18:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE2MDc0MQ=="}], "type": "inlineReview"}, {"oid": "4ad4ed644073c61a9369b05ee60e3b911e2eec39", "url": "https://github.com/all-of-us/workbench/commit/4ad4ed644073c61a9369b05ee60e3b911e2eec39", "message": "Tweak the logic in auth interceptor.", "committedDate": "2020-06-24T22:04:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwODExNQ==", "url": "https://github.com/all-of-us/workbench/pull/3708#discussion_r445208115", "bodyText": "Thanks for this improvement. Will reference this in the post-mortem.", "author": "calbach", "createdAt": "2020-06-24T22:32:34Z", "path": "api/src/main/java/org/pmiops/workbench/interceptors/AuthInterceptor.java", "diffHunk": "@@ -155,8 +159,13 @@ public boolean preHandle(HttpServletRequest request, HttpServletResponse respons\n     }\n     DbUser user = userDao.findUserByUsername(userName);\n     if (user == null) {\n-      // TODO(danrodney): start populating contact email in Google account, use it here.\n-      user = userService.createUser(OAuth2Userinfo);\n+      if (workbenchConfigProvider.get().access.unsafeAllowUserCreationFromGSuiteData) {", "originalCommit": "b64740172c49d08096ada5e3af84a63e86b95122", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "572c196be99bf9b1dd761808a289ddb706250bdb", "url": "https://github.com/all-of-us/workbench/commit/572c196be99bf9b1dd761808a289ddb706250bdb", "message": "Method renames and PR feedback", "committedDate": "2020-06-25T00:17:29Z", "type": "commit"}, {"oid": "3c534f35cf8b801e8485a46d4194a576054ee4d1", "url": "https://github.com/all-of-us/workbench/commit/3c534f35cf8b801e8485a46d4194a576054ee4d1", "message": "Refactor to improve consistency of username handling in DirectoryService.", "committedDate": "2020-06-25T03:26:24Z", "type": "commit"}, {"oid": "bb5a79b9cb9a8916bb58307aab6e10420a5f6581", "url": "https://github.com/all-of-us/workbench/commit/bb5a79b9cb9a8916bb58307aab6e10420a5f6581", "message": "Fix comment formatting.", "committedDate": "2020-06-25T03:28:49Z", "type": "commit"}]}