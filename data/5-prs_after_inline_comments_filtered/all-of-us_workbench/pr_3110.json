{"pr_number": 3110, "pr_title": "[RW-3685][risk=low] Add a config variable controlling invitation key verification", "pr_createdAt": "2020-02-10T15:45:58Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3110", "timeline": [{"oid": "046ef319b964122b7b6a7abd06549e0c6a8c4ed3", "url": "https://github.com/all-of-us/workbench/commit/046ef319b964122b7b6a7abd06549e0c6a8c4ed3", "message": "WIP adding new flag.", "committedDate": "2020-02-12T13:21:34Z", "type": "commit"}, {"oid": "92d645210f25e8e919ebf14630118d9935a94791", "url": "https://github.com/all-of-us/workbench/commit/92d645210f25e8e919ebf14630118d9935a94791", "message": "Add feature flag and controller integrations.", "committedDate": "2020-02-12T13:21:34Z", "type": "commit"}, {"oid": "b7a4ef9a91fd8df874955359f7c498bf369cb3ab", "url": "https://github.com/all-of-us/workbench/commit/b7a4ef9a91fd8df874955359f7c498bf369cb3ab", "message": "Add UI support for requireInvitationKey flag.", "committedDate": "2020-02-12T13:21:34Z", "type": "commit"}, {"oid": "ac18b98f1c876287ee57db2a2cf635c978bf383a", "url": "https://github.com/all-of-us/workbench/commit/ac18b98f1c876287ee57db2a2cf635c978bf383a", "message": "Fix tests.", "committedDate": "2020-02-12T13:21:34Z", "type": "commit"}, {"oid": "ac18b98f1c876287ee57db2a2cf635c978bf383a", "url": "https://github.com/all-of-us/workbench/commit/ac18b98f1c876287ee57db2a2cf635c978bf383a", "message": "Fix tests.", "committedDate": "2020-02-12T13:21:34Z", "type": "forcePushed"}, {"oid": "98fbf61ff9b165eb5aaffd3bf2328473ac865275", "url": "https://github.com/all-of-us/workbench/commit/98fbf61ff9b165eb5aaffd3bf2328473ac865275", "message": "Fix tests, add a small comment.", "committedDate": "2020-02-12T14:04:59Z", "type": "commit"}, {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71", "url": "https://github.com/all-of-us/workbench/commit/7ad31366b9afad98c560483a3c6e8f051a72cb71", "message": "Fix clock increment issue.", "committedDate": "2020-02-12T14:47:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3MDUxMQ==", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378470511", "bodyText": "With a name like this, I'd expect everything to extend it. Can you call this something that makes it clearer this class is intended for composition? Maybe something like WithWorkbenchConfig?", "author": "als364", "createdAt": "2020-02-12T19:39:10Z", "path": "api/src/test/java/org/pmiops/workbench/api/BaseControllerTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.pmiops.workbench.api;\n+\n+import com.google.common.io.Resources;\n+import com.google.gson.Gson;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.util.Random;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.test.FakeLongRandom;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public abstract class BaseControllerTest {", "originalCommit": "7ad31366b9afad98c560483a3c6e8f051a72cb71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzMzM5NQ==", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378533395", "bodyText": "Hmm, good point. My intention here would be for this to be a base class extended by all other test classes (I don't think there's enough variability in our tests to warrant full composition.\nBut given the number of controller test cases, I didn't want to bite this off as part of this PR. I filed https://precisionmedicineinitiative.atlassian.net/browse/RW-4443 and added some class-level comments clarifying the intent.", "author": "gjuggler", "createdAt": "2020-02-12T21:51:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3MDUxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU0NTI5Ng==", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378545296", "bodyText": "Works for me. Can you coordinate with Joel to put this on the list of best practices things?", "author": "als364", "createdAt": "2020-02-12T22:17:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3MDUxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3NTQ0OQ==", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378475449", "bodyText": "extraneous", "author": "als364", "createdAt": "2020-02-12T19:48:11Z", "path": "api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java", "diffHunk": "@@ -644,24 +660,8 @@ private void assertUser(\n     assertThat(user.getFamilyName()).isEqualTo(familyName);\n     assertThat(user.getGivenName()).isEqualTo(givenName);\n     assertThat(user.getDataAccessLevelEnum()).isEqualTo(dataAccessLevel);\n-    assertThat(user.getFirstSignInTime()).isEqualTo(firstSignInTime);\n+    assertThat(user.getFirstSignInTime().getTime()).isEqualTo(firstSignInTime.getTime());\n+    // assertThat(user.getFirstSignInTime()).isEqualTo(firstSignInTime);", "originalCommit": "7ad31366b9afad98c560483a3c6e8f051a72cb71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzMzcxNw==", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378533717", "bodyText": "Yep, sorry. I'd been mucking with debugging some errors while refactoring the tests, forgot to clean up.", "author": "gjuggler", "createdAt": "2020-02-12T21:51:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3NTQ0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3NTU2OQ==", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378475569", "bodyText": "validate", "author": "als364", "createdAt": "2020-02-12T19:48:23Z", "path": "common-api/src/main/java/org/pmiops/workbench/config/WorkbenchConfig.java", "diffHunk": "@@ -184,16 +184,21 @@ public String freeTierBillingAccountName() {\n     public String host;\n   }\n \n-  // The access object specifies whether each of the following access requirements block access\n-  // to the workbench.\n+  // Config related to user sign-up and registration, including access modules and controls around\n+  // the sign-up flow.\n   public static class AccessConfig {\n     // Allows a user to bypass their own access modules. This is used for testing purposes so that\n     // We can give control over 3rd party access modules\n     public boolean unsafeAllowSelfBypass;\n+    // These booleans control whether each of our core access modules are enabled per environment.\n     public boolean enableComplianceTraining;\n     public boolean enableEraCommons;\n     public boolean enableDataUseAgreement;\n     public boolean enableBetaAccess;\n+    // Controls whether an invitation key is required for user creation. When true, the account\n+    // creation UI will show an invitation key form, and the server-side will valide the key before", "originalCommit": "7ad31366b9afad98c560483a3c6e8f051a72cb71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzNjU5OQ==", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378536599", "bodyText": "Done", "author": "gjuggler", "createdAt": "2020-02-12T21:58:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3NTU2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3NTcwOQ==", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378475709", "bodyText": "valide -> validate", "author": "als364", "createdAt": "2020-02-12T19:48:38Z", "path": "common-api/src/main/java/org/pmiops/workbench/config/WorkbenchConfig.java", "diffHunk": "@@ -184,16 +184,21 @@ public String freeTierBillingAccountName() {\n     public String host;\n   }\n \n-  // The access object specifies whether each of the following access requirements block access\n-  // to the workbench.\n+  // Config related to user sign-up and registration, including access modules and controls around\n+  // the sign-up flow.\n   public static class AccessConfig {\n     // Allows a user to bypass their own access modules. This is used for testing purposes so that\n     // We can give control over 3rd party access modules\n     public boolean unsafeAllowSelfBypass;\n+    // These booleans control whether each of our core access modules are enabled per environment.\n     public boolean enableComplianceTraining;\n     public boolean enableEraCommons;\n     public boolean enableDataUseAgreement;\n     public boolean enableBetaAccess;\n+    // Controls whether an invitation key is required for user creation. When true, the account\n+    // creation UI will show an invitation key form, and the server-side will valide the key before", "originalCommit": "7ad31366b9afad98c560483a3c6e8f051a72cb71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzNjU3Ng==", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378536576", "bodyText": "Done", "author": "gjuggler", "createdAt": "2020-02-12T21:57:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3NTcwOQ=="}], "type": "inlineReview"}, {"oid": "8cdfdfd1a4870ce59d8bd806ce1bdc97a5f1c145", "url": "https://github.com/all-of-us/workbench/commit/8cdfdfd1a4870ce59d8bd806ce1bdc97a5f1c145", "message": "PR feedback.", "committedDate": "2020-02-12T22:02:44Z", "type": "commit"}]}