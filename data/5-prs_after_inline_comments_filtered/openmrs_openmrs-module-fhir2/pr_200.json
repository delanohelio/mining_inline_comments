{"pr_number": 200, "pr_title": "FM2-101:Implement sorting for AllergyIntolerance resource", "pr_createdAt": "2020-06-10T20:06:07Z", "pr_url": "https://github.com/openmrs/openmrs-module-fhir2/pull/200", "timeline": [{"oid": "15da7d372baab3d0ebf34ed47bcf6a90d55f96a5", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/15da7d372baab3d0ebf34ed47bcf6a90d55f96a5", "message": "FM2-101:Implement sorting for AllegyIntolerance resource", "committedDate": "2020-06-11T08:37:38Z", "type": "forcePushed"}, {"oid": "1fb4d7a1b0821bb7d32a7e59d6d925f69d05980d", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/1fb4d7a1b0821bb7d32a7e59d6d925f69d05980d", "message": "FM2-101:Implement sorting for AllergyIntolerance resource", "committedDate": "2020-06-14T18:39:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc1MDY0OQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/200#discussion_r441750649", "bodyText": "@gitcliff  Instead of doing get(results) so many times and considering it repeatedly queries the database, it's better to store it in a variable once and then use it. You may refer to other search query test classes for reference like LocationSearchQueryImplTest. Please find this useful throughout the PR.", "author": "varung-31", "createdAt": "2020-06-17T18:39:06Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/search/AllergyIntoleranceSearchQueryImplTest.java", "diffHunk": "@@ -490,4 +494,86 @@ public void searchForAllergies_shouldHandleComplexQuery() {\n \t\t    equalTo(PATIENT_UUID));\n \t}\n \t\n+\t@Test\n+\tpublic void shouldReturnCollectionOfAllergiesSortedBySeveritySevere() {\n+\t\t\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(AllergyIntolerance.SP_SEVERITY);\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tIBundleProvider results = search(\n+\t\t new SearchParameterMap().addParameter(FhirConstants.SEVERITY_SEARCH_HANDLER, FhirConstants.GLOBAL_PROPERTY_SEVERE, new TokenAndListParam().addAnd(new TokenParam(SEVERITY_SEVERE))).setSortSpec(sort));\n+\t\t\n+\t\tsort.setOrder(SortOrderEnum.DESC);\n+\t\tfor (int i = 1; i < get(results).size(); i++) {", "originalCommit": "1fb4d7a1b0821bb7d32a7e59d6d925f69d05980d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxMDU2Mw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/200#discussion_r445810563", "bodyText": "@gitcliff This should be something like:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tfor (int i = 1; i < get(results).size(); i++) {\n          \n          \n            \n            \t\t\t\n          \n          \n            \n            \t\t\tassertThat(((AllergyIntolerance) get(results).get(i - 1)).getReactionFirstRep().getSeverity(),\n          \n          \n            \n            \t\t\t\t    lessThanOrEqualTo(((AllergyIntolerance) get(results).get(i)).getReactionFirstRep().getSeverity()));\t\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \t\tList<AllergyIntolerance> fullResults = (List<AllergyIntolerance>) get(results);\n          \n          \n            \n            \t\tfor (int i = 1; i < fullResults.size(); i++) {\n          \n          \n            \n            \t\t\tassertThat(fullResults.get(i - 1).getReactionFirstRep().getSeverity(),\n          \n          \n            \n            \t\t\t\t    lessThanOrEqualTo(fullResults.get(i).getReactionFirstRep().getSeverity()));\t\n          \n          \n            \n            \t\t}", "author": "ibacher", "createdAt": "2020-06-25T20:11:08Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/search/AllergyIntoleranceSearchQueryImplTest.java", "diffHunk": "@@ -490,4 +494,86 @@ public void searchForAllergies_shouldHandleComplexQuery() {\n \t\t    equalTo(PATIENT_UUID));\n \t}\n \t\n+\t@Test\n+\tpublic void shouldReturnCollectionOfAllergiesSortedBySeveritySevere() {\n+\t\t\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(AllergyIntolerance.SP_SEVERITY);\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tIBundleProvider results = search(\n+\t\t new SearchParameterMap().addParameter(FhirConstants.SEVERITY_SEARCH_HANDLER, FhirConstants.GLOBAL_PROPERTY_SEVERE, new TokenAndListParam().addAnd(new TokenParam(SEVERITY_SEVERE))).setSortSpec(sort));\n+\t\t\n+\t\tsort.setOrder(SortOrderEnum.DESC);\n+\t\tfor (int i = 1; i < get(results).size(); i++) {\n+\t\t\t\n+\t\t\tassertThat(((AllergyIntolerance) get(results).get(i - 1)).getReactionFirstRep().getSeverity(),\n+\t\t\t\t    lessThanOrEqualTo(((AllergyIntolerance) get(results).get(i)).getReactionFirstRep().getSeverity()));\t\n+\t\t}", "originalCommit": "1fb4d7a1b0821bb7d32a7e59d6d925f69d05980d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxMDkzOQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/200#discussion_r445810939", "bodyText": "Similar comments apply to the rest of the sorting test methods.", "author": "ibacher", "createdAt": "2020-06-25T20:11:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxMDU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIxNzk1OA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/200#discussion_r447217958", "bodyText": "@ibacher  the above change you suggested which involves casting drops Cannot cast from List<IBaseResource> to List<AllergyIntolerance> compilation error", "author": "gitcliff", "createdAt": "2020-06-29T19:57:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxMDU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIyMDAzNQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/200#discussion_r447220035", "bodyText": "You can do it using the following approach-\nget(results).stream().map(p -> (AllergyIntolerance)p).collect(Collectors.toList());", "author": "varung-31", "createdAt": "2020-06-29T20:01:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxMDU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQxMzkyNw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/200#discussion_r447413927", "bodyText": "thanks @varung-31  let me try it out", "author": "gitcliff", "createdAt": "2020-06-30T05:13:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxMDU2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxMDY4NQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/200#discussion_r445810685", "bodyText": "This should be after the for loop.", "author": "ibacher", "createdAt": "2020-06-25T20:11:25Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/search/AllergyIntoleranceSearchQueryImplTest.java", "diffHunk": "@@ -490,4 +494,86 @@ public void searchForAllergies_shouldHandleComplexQuery() {\n \t\t    equalTo(PATIENT_UUID));\n \t}\n \t\n+\t@Test\n+\tpublic void shouldReturnCollectionOfAllergiesSortedBySeveritySevere() {\n+\t\t\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(AllergyIntolerance.SP_SEVERITY);\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tIBundleProvider results = search(\n+\t\t new SearchParameterMap().addParameter(FhirConstants.SEVERITY_SEARCH_HANDLER, FhirConstants.GLOBAL_PROPERTY_SEVERE, new TokenAndListParam().addAnd(new TokenParam(SEVERITY_SEVERE))).setSortSpec(sort));\n+\t\t\n+\t\tsort.setOrder(SortOrderEnum.DESC);", "originalCommit": "1fb4d7a1b0821bb7d32a7e59d6d925f69d05980d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQyNTI0Mw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/200#discussion_r447425243", "bodyText": "@ibacher i have fixed it ,,,kindly review", "author": "gitcliff", "createdAt": "2020-06-30T05:50:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxMDY4NQ=="}], "type": "inlineReview"}, {"oid": "a27f51433ba672605fb64b8b5ab08aba0d4204b0", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/a27f51433ba672605fb64b8b5ab08aba0d4204b0", "message": "FM2-101:Implement sorting for AllergyIntolerance resource", "committedDate": "2020-06-30T05:49:11Z", "type": "forcePushed"}, {"oid": "f8edf70581ba75d8079a38c07548caf17edb154b", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/f8edf70581ba75d8079a38c07548caf17edb154b", "message": "FM2-101:Implement sorting for AllergyIntolerance resource", "committedDate": "2020-06-30T06:11:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4Nzk0NA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/200#discussion_r447487944", "bodyText": "Do you think we need to cast it again to AllergyIntolerance given that the list contains AllergyIntolerance objects?\nPlease use this for all other sorting tests added.", "author": "varung-31", "createdAt": "2020-06-30T08:00:14Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/search/AllergyIntoleranceSearchQueryImplTest.java", "diffHunk": "@@ -760,4 +764,91 @@ public void searchForAllergies_shouldHandleComplexQuery() {\n \t\t    equalTo(PATIENT_UUID));\n \t}\n \t\n+\t@Test\n+\tpublic void shouldReturnCollectionOfAllergiesSortedBySeveritySevere() {\n+\t\t\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(AllergyIntolerance.SP_SEVERITY);\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tIBundleProvider results = search(\n+\t\t new SearchParameterMap().addParameter(FhirConstants.SEVERITY_SEARCH_HANDLER, FhirConstants.GLOBAL_PROPERTY_SEVERE, new TokenAndListParam().addAnd(new TokenParam(SEVERITY_SEVERE))).setSortSpec(sort));\n+\t\t\n+\t\tList<AllergyIntolerance> fullResults = get(results).stream().map(p -> (AllergyIntolerance)p).collect(Collectors.toList());\n+\t\tfor (int i = 1; i < fullResults.size(); i++) {\n+\t\t\t\n+\t\t\tassertThat(((AllergyIntolerance) fullResults.get(i - 1)).getReactionFirstRep().getSeverity(),\n+\t\t\t\t    lessThanOrEqualTo(((AllergyIntolerance) fullResults.get(i)).getReactionFirstRep().getSeverity()));\t", "originalCommit": "f8edf70581ba75d8079a38c07548caf17edb154b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4OTAwMg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/200#discussion_r447489002", "bodyText": "We don't need to add FhirConstants.GLOBAL_PROPERTY_SEVERE. Check the dao implementation.\nPlease use this for all other sorting tests added.", "author": "varung-31", "createdAt": "2020-06-30T08:01:41Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/search/AllergyIntoleranceSearchQueryImplTest.java", "diffHunk": "@@ -760,4 +764,91 @@ public void searchForAllergies_shouldHandleComplexQuery() {\n \t\t    equalTo(PATIENT_UUID));\n \t}\n \t\n+\t@Test\n+\tpublic void shouldReturnCollectionOfAllergiesSortedBySeveritySevere() {\n+\t\t\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(AllergyIntolerance.SP_SEVERITY);\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tIBundleProvider results = search(\n+\t\t new SearchParameterMap().addParameter(FhirConstants.SEVERITY_SEARCH_HANDLER, FhirConstants.GLOBAL_PROPERTY_SEVERE, new TokenAndListParam().addAnd(new TokenParam(SEVERITY_SEVERE))).setSortSpec(sort));", "originalCommit": "f8edf70581ba75d8079a38c07548caf17edb154b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "20dd5feaeb65f362bdf59209135ba1cd5835a831", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/20dd5feaeb65f362bdf59209135ba1cd5835a831", "message": "FM2-101:Implement sorting for AllergyIntolerance resource", "committedDate": "2020-06-30T10:55:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYwMzE1NQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/200#discussion_r447603155", "bodyText": "@gitcliff\nYou forgot to remove the casting I guess.", "author": "varung-31", "createdAt": "2020-06-30T11:12:36Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/search/AllergyIntoleranceSearchQueryImplTest.java", "diffHunk": "@@ -760,4 +764,91 @@ public void searchForAllergies_shouldHandleComplexQuery() {\n \t\t    equalTo(PATIENT_UUID));\n \t}\n \t\n+\t@Test\n+\tpublic void shouldReturnCollectionOfAllergiesSortedBySeveritySevere() {\n+\t\t\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(AllergyIntolerance.SP_SEVERITY);\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tIBundleProvider results = search(\n+\t\t new SearchParameterMap().addParameter(FhirConstants.SEVERITY_SEARCH_HANDLER, new TokenAndListParam().addAnd(new TokenParam(SEVERITY_SEVERE))).setSortSpec(sort));\n+\t\t\n+\t\tList<AllergyIntolerance> fullResults = get(results).stream().map(p -> (AllergyIntolerance)p).collect(Collectors.toList());\n+\t\tfor (int i = 1; i < fullResults.size(); i++) {\n+\t\t\t\n+\t\t\tassertThat(((AllergyIntolerance) fullResults.get(i - 1)).getReactionFirstRep().getSeverity(),", "originalCommit": "20dd5feaeb65f362bdf59209135ba1cd5835a831", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a8ce45b1e7fee659535812bb5fadd467ed2bb536", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/a8ce45b1e7fee659535812bb5fadd467ed2bb536", "message": "FM2-101:Implement sorting for AllergyIntolerance resource", "committedDate": "2020-06-30T11:59:09Z", "type": "commit"}, {"oid": "a8ce45b1e7fee659535812bb5fadd467ed2bb536", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/a8ce45b1e7fee659535812bb5fadd467ed2bb536", "message": "FM2-101:Implement sorting for AllergyIntolerance resource", "committedDate": "2020-06-30T11:59:09Z", "type": "forcePushed"}]}