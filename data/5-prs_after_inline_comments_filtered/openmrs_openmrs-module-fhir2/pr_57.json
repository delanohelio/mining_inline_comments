{"pr_number": 57, "pr_title": "Improve ability to generate complex queries", "pr_createdAt": "2020-02-07T13:24:54Z", "pr_url": "https://github.com/openmrs/openmrs-module-fhir2/pull/57", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAzMTU2Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/57#discussion_r377031567", "bodyText": "Why can't we have this in the BaseDaoImpl so that we override", "author": "corneliouzbett", "createdAt": "2020-02-10T12:25:03Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "diffHunk": "@@ -89,4 +101,115 @@ public PatientIdentifierType getPatientIdentifierTypeByNameOrUuid(String name, S\n \t\treturn sessionFactory.getCurrentSession().createCriteria(Patient.class).createAlias(\"names\", \"names\")\n \t\t        .add(ilike(\"names.familyName\", family, MatchMode.START)).list();\n \t}\n+\n+\t@Override\n+\tpublic Collection<Patient> searchForPatients(StringOrListParam name, StringOrListParam given, StringOrListParam family,\n+\t\t\tTokenOrListParam identifier, TokenOrListParam gender, DateRangeParam birthDate, DateRangeParam deathDate,\n+\t\t\tTokenOrListParam deceased, StringOrListParam city, StringOrListParam state, StringOrListParam postalCode,\n+\t\t\tSortSpec sort) {\n+\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Patient.class);\n+\n+\t\thandleNames(criteria, name, given, family);\n+\t\thandleIdentifier(criteria, identifier);\n+\t\thandleGender(\"gender\", gender).ifPresent(criteria::add);\n+\t\thandleDateRange(\"birthdate\", birthDate).ifPresent(criteria::add);\n+\t\thandleDateRange(\"deathdate\", deathDate).ifPresent(criteria::add);\n+\t\thandleBoolean(\"dead\", deceased).ifPresent(criteria::add);\n+\t\thandleAddress(criteria, city, state, postalCode);\n+\t\thandleSort(criteria, sort, this::paramToProp);\n+\n+\t\treturn criteria.list();\n+\t}\n+\n+\tprivate void handleAddress(Criteria criteria, StringOrListParam city, StringOrListParam state, StringOrListParam postalCode) {\n+\t\tif (city == null && state == null && postalCode == null) {\n+\t\t\treturn;\n+\t\t}\n+\t}\n+\n+\tprivate void handleIdentifier(Criteria criteria, TokenOrListParam identifier) {\n+\t\tif (identifier == null) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tcriteria.createAlias(\"identifiers\", \"pi\");\n+\t\tcriteria.createAlias(\"pi.identifierType\", \"pit\");\n+\t\tcriteria.add(eq(\"pi.retired\", false));\n+\n+\t\tList<Criterion> criterionList = new ArrayList<>();\n+\n+\t\tList<TokenParam> paramList = identifier.getValuesAsQueryTokens();\n+\n+\t\tString previousSystem = null;\n+\t\tList<String> codes = new ArrayList<>();\n+\t\tfor (TokenParam coding : paramList) {\n+\t\t\tif (coding.getSystem() != null) {\n+\t\t\t\tif (!coding.getSystem().equals(previousSystem)) {\n+\t\t\t\t\tif (codes.size() > 0) {\n+\t\t\t\t\t\tcriterionList.add(and(eq(\"pit.name\", previousSystem), in(\"pi.identifier\", codes)));\n+\t\t\t\t\t\tcodes.clear();\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tpreviousSystem = coding.getSystem();\n+\t\t\t\t}\n+\n+\t\t\t\tcodes.add(coding.getValue());\n+\t\t\t} else {\n+\t\t\t\tcriterionList.add(eq(\"pi.identifier\", coding.getValue()));\n+\t\t\t}\n+\n+\t\t\tif (codes.size() > 0) {\n+\t\t\t\tcriterionList.add(and(eq(\"pit.name\", previousSystem), in(\"pi.identifier\", codes)));\n+\t\t\t}\n+\t\t}\n+\n+\t\tcriteria.add(or(criterionList.toArray(new Criterion[0])));\n+\t}\n+\n+\tprivate void handleNames(Criteria criteria, StringOrListParam name, StringOrListParam given, StringOrListParam family) {\n+\t\tif (name == null && given == null && family == null) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tcriteria.createAlias(\"names\", \"pn\");\n+\n+\t\tif (name != null) {\n+\t\t\tList<Criterion> criterionList = new ArrayList<>();\n+\n+\t\t\tfor (StringParam nameParam : name.getValuesAsQueryTokens()) {\n+\t\t\t\tfor (String token : StringUtils.split(nameParam.getValue(), \" \\t,\")) {\n+\t\t\t\t\tStringParam tokenParam = new StringParam().setValue(token).setExact(nameParam.isExact()).setContains(nameParam.isContains());\n+\t\t\t\t\tpropertyLike(\"pn.givenName\", tokenParam).ifPresent(criterionList::add);\n+\t\t\t\t\tpropertyLike(\"pn.middle\", tokenParam).ifPresent(criterionList::add);\n+\t\t\t\t\tpropertyLike(\"pn.family\", tokenParam).ifPresent(criterionList::add);\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tcriteria.add(or(criterionList.toArray(new Criterion[0])));\n+\t\t}\n+\n+\t\tif (given != null) {\n+\t\t\tList<Criterion> criterionList = new ArrayList<>();\n+\n+\t\t\tfor (StringParam givenName : given.getValuesAsQueryTokens()) {\n+\t\t\t\tpropertyLike(\"pn.givenName\", givenName).ifPresent(criterionList::add);\n+\t\t\t}\n+\n+\t\t\tcriteria.add(or(criterionList.toArray(new Criterion[0])));\n+\t\t}\n+\n+\t\tif (family != null) {\n+\t\t\tList<Criterion> criterionList = new ArrayList<>();\n+\n+\t\t\tfor (StringParam familyName : family.getValuesAsQueryTokens()) {\n+\t\t\t\tpropertyLike(\"pn.familyName\", familyName).ifPresent(criterionList::add);\n+\t\t\t}\n+\n+\t\t\tcriteria.add(or(criterionList.toArray(new Criterion[0])));\n+\t\t}\n+\t}\n+\n+\tprivate String paramToProp(String paramName) {\n+\t\treturn null;\n+\t}", "originalCommit": "5a2ddbefa7551a2bda190c46d4bf2c6560eff842", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3ODM1OQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/57#discussion_r377078359", "bodyText": "That's a good thought!", "author": "ibacher", "createdAt": "2020-02-10T13:59:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAzMTU2Nw=="}], "type": "inlineReview"}, {"oid": "0f1cbd3c35e0e7dc9e18d1477a5d06ffc7524169", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/0f1cbd3c35e0e7dc9e18d1477a5d06ffc7524169", "message": "Refactoring and additional methods to make it easier to generate\ncomplex queries", "committedDate": "2020-02-10T15:33:50Z", "type": "forcePushed"}, {"oid": "8fae2bfe1bb4f36141dded2f9150de7afe2733c6", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/8fae2bfe1bb4f36141dded2f9150de7afe2733c6", "message": "Refactoring and additional methods to make it easier to generate\ncomplex queries", "committedDate": "2020-02-10T15:34:35Z", "type": "forcePushed"}, {"oid": "efafe44164e619cf65be6f9be3b93150e687bbd0", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/efafe44164e619cf65be6f9be3b93150e687bbd0", "message": "Refactoring and additional methods to make it easier to generate\ncomplex queries", "committedDate": "2020-02-10T19:10:01Z", "type": "forcePushed"}, {"oid": "e72960d4fe0fb6777f5555d433063c6ddda1b7d7", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/e72960d4fe0fb6777f5555d433063c6ddda1b7d7", "message": "Refactoring and additional methods to make it easier to generate\ncomplex queries", "committedDate": "2020-02-10T19:31:00Z", "type": "forcePushed"}, {"oid": "6441c824539dab71170b9225965033d6d5f7f24d", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/6441c824539dab71170b9225965033d6d5f7f24d", "message": "Refactoring and additional methods to make it easier to generate\ncomplex queries", "committedDate": "2020-02-17T17:02:58Z", "type": "forcePushed"}, {"oid": "4cc0eb7444ffd810c07b70deb2460fc541f133b7", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/4cc0eb7444ffd810c07b70deb2460fc541f133b7", "message": "Refactoring and additional methods to make it easier to generate\ncomplex queries", "committedDate": "2020-02-17T17:46:59Z", "type": "forcePushed"}, {"oid": "6969878148292a0c0d4bf1170aff298cc11db886", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/6969878148292a0c0d4bf1170aff298cc11db886", "message": "Refactoring and additional methods to make it easier to generate\ncomplex queries", "committedDate": "2020-02-17T19:35:45Z", "type": "forcePushed"}, {"oid": "efdf84f9d24ed06bb34e06aa0fa120bb631d95b9", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/efdf84f9d24ed06bb34e06aa0fa120bb631d95b9", "message": "Refactoring and additional methods to make it easier to generate\ncomplex queries", "committedDate": "2020-02-17T19:57:50Z", "type": "forcePushed"}, {"oid": "080a2411bfb69da08bea0f2f8a601a3f9fdc1622", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/080a2411bfb69da08bea0f2f8a601a3f9fdc1622", "message": "Refactoring and additional methods to make it easier to generate\ncomplex queries", "committedDate": "2020-02-17T20:05:37Z", "type": "forcePushed"}, {"oid": "1c29ac820ddce8ba3f411a8e5e71d6fff4882287", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/1c29ac820ddce8ba3f411a8e5e71d6fff4882287", "message": "Refactoring and additional methods to make it easier to generate\ncomplex queries", "committedDate": "2020-02-18T14:04:47Z", "type": "forcePushed"}, {"oid": "835fd774d28068e97bf57d17f52db0abe8589949", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/835fd774d28068e97bf57d17f52db0abe8589949", "message": "Refactoring and additional methods to make it easier to generate\ncomplex queries", "committedDate": "2020-02-19T15:23:15Z", "type": "forcePushed"}, {"oid": "2bdba261dd03350a6e8e1bc39077f8adc417d54d", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/2bdba261dd03350a6e8e1bc39077f8adc417d54d", "message": "Refactoring and additional methods to make it easier to generate\ncomplex queries", "committedDate": "2020-02-19T19:50:34Z", "type": "commit"}, {"oid": "2bdba261dd03350a6e8e1bc39077f8adc417d54d", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/2bdba261dd03350a6e8e1bc39077f8adc417d54d", "message": "Refactoring and additional methods to make it easier to generate\ncomplex queries", "committedDate": "2020-02-19T19:50:34Z", "type": "forcePushed"}]}