{"pr_number": 224, "pr_title": "FM2-222: Add create, update, and delete methods for Practitioner", "pr_createdAt": "2020-06-22T12:07:13Z", "pr_url": "https://github.com/openmrs/openmrs-module-fhir2/pull/224", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkxODg0Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/224#discussion_r444918847", "bodyText": "Why is there a need to use this annotation ? You have anyways used these methods in your unit tests. Please find this useful throughout the PR.", "author": "varung-31", "createdAt": "2020-06-24T14:05:32Z", "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/PractitionerFhirResourceProvider.java", "diffHunk": "@@ -55,6 +59,38 @@ public Practitioner getPractitionerById(@IdParam @NotNull IdType id) {\n \t\treturn Practitioner30_40.convertPractitioner(practitioner);\n \t}\n \t\n+\n+\t@Create\n+\tpublic MethodOutcome createPractitioner(@ResourceParam Practitioner practitioner) {\n+\t\treturn FhirProviderUtils.buildCreate(practitionerService.create(Practitioner30_40.convertPractitioner(practitioner)));\n+\t} \n+\t\n+\t@Update\n+\t@SuppressWarnings(\"unused\")", "originalCommit": "bd7adee4b57da9b8bf37bde730239ea875cc2669", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2MzA5Ng==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/224#discussion_r446063096", "bodyText": "i wanted to maintain the status quo as in all other resources", "author": "gitcliff", "createdAt": "2020-06-26T09:07:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkxODg0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUwOTc4Mw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/224#discussion_r445509783", "bodyText": "Make use of util from FhirProviderUtils.buildDelete introduced here #214", "author": "corneliouzbett", "createdAt": "2020-06-25T12:09:32Z", "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/PractitionerFhirResourceProvider.java", "diffHunk": "@@ -55,6 +59,38 @@ public Practitioner getPractitionerById(@IdParam @NotNull IdType id) {\n \t\treturn Practitioner30_40.convertPractitioner(practitioner);\n \t}\n \t\n+\n+\t@Create\n+\tpublic MethodOutcome createPractitioner(@ResourceParam Practitioner practitioner) {\n+\t\treturn FhirProviderUtils.buildCreate(practitionerService.create(Practitioner30_40.convertPractitioner(practitioner)));\n+\t} \n+\t\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updatePractitioner(@IdParam IdType id, @ResourceParam Practitioner practitioner) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\n+\t\tpractitioner.setId(id.getIdPart());\n+\n+\t\treturn FhirProviderUtils.buildUpdate(practitionerService.update(id.getIdPart(),\n+\t\t\t\tPractitioner30_40.convertPractitioner(practitioner)));\n+\t}\n+\t\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic OperationOutcome deletePractitioner(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Practitioner practitioner = practitionerService.delete(id.getIdPart());\n+\t\tif (practitioner == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find practitioner to delete with id \" + id.getIdPart());\n+\t\t}\n+\t\tOperationOutcome retVal = new OperationOutcome();\n+\t\tretVal.setId(id.getIdPart());\n+\t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n+\t\treturn retVal;", "originalCommit": "bd7adee4b57da9b8bf37bde730239ea875cc2669", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2MzY3Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/224#discussion_r446063677", "bodyText": "its done", "author": "gitcliff", "createdAt": "2020-06-26T09:08:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUwOTc4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMjYwMw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/224#discussion_r445822603", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PRACTITIONER_PATH)) {\n          \n          \n            \n            \t\t\tjsonPractitioner = IOUtils.toString(is);\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PRACTITIONER_PATH)) {\n          \n          \n            \n            \t\t\tObjects.requireNonNull(is);\n          \n          \n            \n            \t\t\tjsonPractitioner = IOUtils.toString(is, StandardCharsets.UTF_8);\n          \n          \n            \n            \t\t}", "author": "ibacher", "createdAt": "2020-06-25T20:35:19Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r3/PractitionerFhirResourceProviderWebTest.java", "diffHunk": "@@ -330,4 +344,93 @@ private void verifyUri(String uri) throws Exception {\n \t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n \t}\n+\t\n+\t@Test\n+\tpublic void createPractitioner_shouldCreatePractitioner() throws Exception {\n+\t\tString jsonPractitioner;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PRACTITIONER_PATH)) {\n+\t\t\tjsonPractitioner = IOUtils.toString(is);\n+\t\t}", "originalCommit": "49d123b458b27cd7429f034c0e7a961e7543bc3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2MzkxNg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/224#discussion_r446063916", "bodyText": "i have adopted it", "author": "gitcliff", "createdAt": "2020-06-26T09:08:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMjYwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMjg2NA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/224#discussion_r445822864", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tjsonPractitioner = IOUtils.toString(is);\n          \n          \n            \n            \t\t\tObjects.requireNonNull(is);\n          \n          \n            \n            \t\t\tjsonPractitioner = IOUtils.toString(is, StandardCharsets.UTF_8);", "author": "ibacher", "createdAt": "2020-06-25T20:35:47Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r3/PractitionerFhirResourceProviderWebTest.java", "diffHunk": "@@ -330,4 +344,93 @@ private void verifyUri(String uri) throws Exception {\n \t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n \t}\n+\t\n+\t@Test\n+\tpublic void createPractitioner_shouldCreatePractitioner() throws Exception {\n+\t\tString jsonPractitioner;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PRACTITIONER_PATH)) {\n+\t\t\tjsonPractitioner = IOUtils.toString(is);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Practitioner practitioner = new org.hl7.fhir.r4.model.Practitioner();\n+\t\tpractitioner.setId(PRACTITIONER_UUID);\n+\n+\t\twhen(practitionerService.create(any(org.hl7.fhir.r4.model.Practitioner.class))).thenReturn(practitioner);\n+\n+\t\tMockHttpServletResponse response = post(\"/Practitioner\").jsonContent(jsonPractitioner)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isCreated());\n+\t}\n+\n+\t@Test\n+\tpublic void updatePractitioner_shouldUpdateExistingPractitioner() throws Exception {\n+\t\tString jsonPractitioner;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_PRACTITIONER_PATH )) {\n+\t\t\tjsonPractitioner = IOUtils.toString(is);", "originalCommit": "49d123b458b27cd7429f034c0e7a961e7543bc3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2NDA0OA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/224#discussion_r446064048", "bodyText": "i have adopted it", "author": "gitcliff", "createdAt": "2020-06-26T09:09:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMjg2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMjk4Ng==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/224#discussion_r445822986", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tjsonPractitioner = IOUtils.toString(is);\n          \n          \n            \n            \t\t\tObjects.requireNonNull(is);\n          \n          \n            \n            \t\t\tjsonPractitioner = IOUtils.toString(is, StandardCharsets.UTF_8);", "author": "ibacher", "createdAt": "2020-06-25T20:36:00Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r3/PractitionerFhirResourceProviderWebTest.java", "diffHunk": "@@ -330,4 +344,93 @@ private void verifyUri(String uri) throws Exception {\n \t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n \t}\n+\t\n+\t@Test\n+\tpublic void createPractitioner_shouldCreatePractitioner() throws Exception {\n+\t\tString jsonPractitioner;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PRACTITIONER_PATH)) {\n+\t\t\tjsonPractitioner = IOUtils.toString(is);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Practitioner practitioner = new org.hl7.fhir.r4.model.Practitioner();\n+\t\tpractitioner.setId(PRACTITIONER_UUID);\n+\n+\t\twhen(practitionerService.create(any(org.hl7.fhir.r4.model.Practitioner.class))).thenReturn(practitioner);\n+\n+\t\tMockHttpServletResponse response = post(\"/Practitioner\").jsonContent(jsonPractitioner)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isCreated());\n+\t}\n+\n+\t@Test\n+\tpublic void updatePractitioner_shouldUpdateExistingPractitioner() throws Exception {\n+\t\tString jsonPractitioner;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_PRACTITIONER_PATH )) {\n+\t\t\tjsonPractitioner = IOUtils.toString(is);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Practitioner practitioner = new org.hl7.fhir.r4.model.Practitioner();\n+\t\tpractitioner.setId(PRACTITIONER_UUID);\n+\n+\t\twhen(practitionerService.update(anyString(), any(org.hl7.fhir.r4.model.Practitioner.class))).thenReturn(practitioner);\n+\n+\t\tMockHttpServletResponse response = put(\"/Practitioner/\" + PRACTITIONER_UUID).jsonContent(jsonPractitioner)\n+\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isOk());\n+\t}\n+\n+\t@Test\n+\tpublic void updatePractitioner_shouldErrorForNoId() throws Exception {\n+\t\tString jsonPractitioner;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_PRACTITIONER_NO_ID_PATH)) {\n+\t\t\tjsonPractitioner = IOUtils.toString(is);", "originalCommit": "49d123b458b27cd7429f034c0e7a961e7543bc3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2NDExOA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/224#discussion_r446064118", "bodyText": "i have adopted it", "author": "gitcliff", "createdAt": "2020-06-26T09:09:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMjk4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMzEyOA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/224#discussion_r445823128", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tjsonPractitioner = IOUtils.toString(is);\n          \n          \n            \n            \t\t\tObjects.requireNonNull(is);\n          \n          \n            \n            \t\t\tjsonPractitioner = IOUtils.toString(is, StandardCharsets.UTF_8);", "author": "ibacher", "createdAt": "2020-06-25T20:36:15Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r3/PractitionerFhirResourceProviderWebTest.java", "diffHunk": "@@ -330,4 +344,93 @@ private void verifyUri(String uri) throws Exception {\n \t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n \t}\n+\t\n+\t@Test\n+\tpublic void createPractitioner_shouldCreatePractitioner() throws Exception {\n+\t\tString jsonPractitioner;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PRACTITIONER_PATH)) {\n+\t\t\tjsonPractitioner = IOUtils.toString(is);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Practitioner practitioner = new org.hl7.fhir.r4.model.Practitioner();\n+\t\tpractitioner.setId(PRACTITIONER_UUID);\n+\n+\t\twhen(practitionerService.create(any(org.hl7.fhir.r4.model.Practitioner.class))).thenReturn(practitioner);\n+\n+\t\tMockHttpServletResponse response = post(\"/Practitioner\").jsonContent(jsonPractitioner)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isCreated());\n+\t}\n+\n+\t@Test\n+\tpublic void updatePractitioner_shouldUpdateExistingPractitioner() throws Exception {\n+\t\tString jsonPractitioner;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_PRACTITIONER_PATH )) {\n+\t\t\tjsonPractitioner = IOUtils.toString(is);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Practitioner practitioner = new org.hl7.fhir.r4.model.Practitioner();\n+\t\tpractitioner.setId(PRACTITIONER_UUID);\n+\n+\t\twhen(practitionerService.update(anyString(), any(org.hl7.fhir.r4.model.Practitioner.class))).thenReturn(practitioner);\n+\n+\t\tMockHttpServletResponse response = put(\"/Practitioner/\" + PRACTITIONER_UUID).jsonContent(jsonPractitioner)\n+\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isOk());\n+\t}\n+\n+\t@Test\n+\tpublic void updatePractitioner_shouldErrorForNoId() throws Exception {\n+\t\tString jsonPractitioner;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_PRACTITIONER_NO_ID_PATH)) {\n+\t\t\tjsonPractitioner = IOUtils.toString(is);\n+\t\t}\n+\n+\t\tMockHttpServletResponse response = put(\"/Practitioner/\" + PRACTITIONER_UUID).jsonContent(jsonPractitioner)\n+\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t\t\tcontainsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\n+\t@Test\n+\tpublic void updatePractitioner_shouldErrorForIdMissMatch() throws Exception {\n+\t\tString jsonPractitioner;\n+\t\ttry (InputStream is = this.getClass().getClassLoader()\n+\t\t\t\t.getResourceAsStream(JSON_UPDATE_PRACTITIONER_WRONG_ID_PATH)) {\n+\t\t\tjsonPractitioner = IOUtils.toString(is);", "originalCommit": "49d123b458b27cd7429f034c0e7a961e7543bc3e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMzI3Mw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/224#discussion_r445823273", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tjsonPractitioner = IOUtils.toString(is);\n          \n          \n            \n            \t\t\tObjects.requireNonNull(is);\n          \n          \n            \n            \t\t\tjsonPractitioner = IOUtils.toString(is, StandardCharsets.UTF_8);", "author": "ibacher", "createdAt": "2020-06-25T20:36:31Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PractitionerFhirResourceProviderWebTest.java", "diffHunk": "@@ -330,4 +346,89 @@ private void verifyUri(String uri) throws Exception {\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n \t}\n \t\n+\t@Test\n+\tpublic void createPractitioner_shouldCreatePractitioner() throws Exception {\n+\t\tString jsonPractitioner;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PRACTITIONER_PATH)) {\n+\t\t\tjsonPractitioner = IOUtils.toString(is);", "originalCommit": "49d123b458b27cd7429f034c0e7a961e7543bc3e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMzM2Mw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/224#discussion_r445823363", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tjsonPractitioner = IOUtils.toString(is);\n          \n          \n            \n            \t\t\tObjects.requireNonNull(is);\n          \n          \n            \n            \t\t\tjsonPractitioner = IOUtils.toString(is, StandardCharsets.UTF_8);", "author": "ibacher", "createdAt": "2020-06-25T20:36:40Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PractitionerFhirResourceProviderWebTest.java", "diffHunk": "@@ -330,4 +346,89 @@ private void verifyUri(String uri) throws Exception {\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n \t}\n \t\n+\t@Test\n+\tpublic void createPractitioner_shouldCreatePractitioner() throws Exception {\n+\t\tString jsonPractitioner;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PRACTITIONER_PATH)) {\n+\t\t\tjsonPractitioner = IOUtils.toString(is);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Practitioner practitioner = new org.hl7.fhir.r4.model.Practitioner();\n+\t\tpractitioner.setId(PRACTITIONER_UUID);\n+\n+\t\twhen(practitionerService.create(any(org.hl7.fhir.r4.model.Practitioner.class))).thenReturn(practitioner);\n+\n+\t\tMockHttpServletResponse response = post(\"/Practitioner\").jsonContent(jsonPractitioner)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isCreated());\n+\t}\n+\n+\t@Test\n+\tpublic void updatePractitioner_shouldUpdateExistingPractitioner() throws Exception {\n+\t\tString jsonPractitioner;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_PRACTITIONER_PATH )) {\n+\t\t\tjsonPractitioner = IOUtils.toString(is);", "originalCommit": "49d123b458b27cd7429f034c0e7a961e7543bc3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2NDIwMw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/224#discussion_r446064203", "bodyText": "i have adopted it", "author": "gitcliff", "createdAt": "2020-06-26T09:09:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMzM2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMzQ1Mg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/224#discussion_r445823452", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tjsonPractitioner = IOUtils.toString(is);\n          \n          \n            \n            \t\t\tObjects.requireNonNull(is);\n          \n          \n            \n            \t\t\tjsonPractitioner = IOUtils.toString(is, StandardCharsets.UTF_8);", "author": "ibacher", "createdAt": "2020-06-25T20:36:50Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PractitionerFhirResourceProviderWebTest.java", "diffHunk": "@@ -330,4 +346,89 @@ private void verifyUri(String uri) throws Exception {\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n \t}\n \t\n+\t@Test\n+\tpublic void createPractitioner_shouldCreatePractitioner() throws Exception {\n+\t\tString jsonPractitioner;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PRACTITIONER_PATH)) {\n+\t\t\tjsonPractitioner = IOUtils.toString(is);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Practitioner practitioner = new org.hl7.fhir.r4.model.Practitioner();\n+\t\tpractitioner.setId(PRACTITIONER_UUID);\n+\n+\t\twhen(practitionerService.create(any(org.hl7.fhir.r4.model.Practitioner.class))).thenReturn(practitioner);\n+\n+\t\tMockHttpServletResponse response = post(\"/Practitioner\").jsonContent(jsonPractitioner)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isCreated());\n+\t}\n+\n+\t@Test\n+\tpublic void updatePractitioner_shouldUpdateExistingPractitioner() throws Exception {\n+\t\tString jsonPractitioner;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_PRACTITIONER_PATH )) {\n+\t\t\tjsonPractitioner = IOUtils.toString(is);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Practitioner practitioner = new org.hl7.fhir.r4.model.Practitioner();\n+\t\tpractitioner.setId(PRACTITIONER_UUID);\n+\n+\t\twhen(practitionerService.update(anyString(), any(org.hl7.fhir.r4.model.Practitioner.class))).thenReturn(practitioner);\n+\n+\t\tMockHttpServletResponse response = put(\"/Practitioner/\" + PRACTITIONER_UUID).jsonContent(jsonPractitioner)\n+\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isOk());\n+\t}\n+\n+\t@Test\n+\tpublic void updatePractitioner_shouldErrorForNoId() throws Exception {\n+\t\tString jsonPractitioner;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_PRACTITIONER_NO_ID_PATH)) {\n+\t\t\tjsonPractitioner = IOUtils.toString(is);", "originalCommit": "49d123b458b27cd7429f034c0e7a961e7543bc3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2NDI3MQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/224#discussion_r446064271", "bodyText": "its done", "author": "gitcliff", "createdAt": "2020-06-26T09:09:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMzQ1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMzU0Mw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/224#discussion_r445823543", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tjsonPractitioner = IOUtils.toString(is);\n          \n          \n            \n            \t\t\tObjects.requireNonNull(is);\n          \n          \n            \n            \t\t\tjsonPractitioner = IOUtils.toString(is, StandardCharsets.UTF_8);", "author": "ibacher", "createdAt": "2020-06-25T20:36:59Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PractitionerFhirResourceProviderWebTest.java", "diffHunk": "@@ -330,4 +346,89 @@ private void verifyUri(String uri) throws Exception {\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(PRACTITIONER_UUID));\n \t}\n \t\n+\t@Test\n+\tpublic void createPractitioner_shouldCreatePractitioner() throws Exception {\n+\t\tString jsonPractitioner;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PRACTITIONER_PATH)) {\n+\t\t\tjsonPractitioner = IOUtils.toString(is);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Practitioner practitioner = new org.hl7.fhir.r4.model.Practitioner();\n+\t\tpractitioner.setId(PRACTITIONER_UUID);\n+\n+\t\twhen(practitionerService.create(any(org.hl7.fhir.r4.model.Practitioner.class))).thenReturn(practitioner);\n+\n+\t\tMockHttpServletResponse response = post(\"/Practitioner\").jsonContent(jsonPractitioner)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isCreated());\n+\t}\n+\n+\t@Test\n+\tpublic void updatePractitioner_shouldUpdateExistingPractitioner() throws Exception {\n+\t\tString jsonPractitioner;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_PRACTITIONER_PATH )) {\n+\t\t\tjsonPractitioner = IOUtils.toString(is);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Practitioner practitioner = new org.hl7.fhir.r4.model.Practitioner();\n+\t\tpractitioner.setId(PRACTITIONER_UUID);\n+\n+\t\twhen(practitionerService.update(anyString(), any(org.hl7.fhir.r4.model.Practitioner.class))).thenReturn(practitioner);\n+\n+\t\tMockHttpServletResponse response = put(\"/Practitioner/\" + PRACTITIONER_UUID).jsonContent(jsonPractitioner)\n+\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isOk());\n+\t}\n+\n+\t@Test\n+\tpublic void updatePractitioner_shouldErrorForNoId() throws Exception {\n+\t\tString jsonPractitioner;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_PRACTITIONER_NO_ID_PATH)) {\n+\t\t\tjsonPractitioner = IOUtils.toString(is);\n+\t\t}\n+\n+\t\tMockHttpServletResponse response = put(\"/Practitioner/\" + PRACTITIONER_UUID).jsonContent(jsonPractitioner)\n+\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t\t\tcontainsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\n+\t@Test\n+\tpublic void updatePractitioner_shouldErrorForIdMissMatch() throws Exception {\n+\t\tString jsonPractitioner;\n+\t\ttry (InputStream is = this.getClass().getClassLoader()\n+\t\t\t\t.getResourceAsStream(JSON_UPDATE_PRACTITIONER_WRONG_ID_PATH)) {\n+\t\t\tjsonPractitioner = IOUtils.toString(is);", "originalCommit": "49d123b458b27cd7429f034c0e7a961e7543bc3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2NDQyNA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/224#discussion_r446064424", "bodyText": "i have fixed it", "author": "gitcliff", "createdAt": "2020-06-26T09:10:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMzU0Mw=="}], "type": "inlineReview"}, {"oid": "32af4bebdc0df9362dc627eef38ce9b1636d2b82", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/32af4bebdc0df9362dc627eef38ce9b1636d2b82", "message": "FM2-222:Add create,update, and delete methods for Practitioner", "committedDate": "2020-06-26T09:05:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxNzMyMA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/224#discussion_r446517320", "bodyText": "ditto", "author": "Akayeshmantha", "createdAt": "2020-06-27T11:55:50Z", "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/PractitionerFhirResourceProvider.java", "diffHunk": "@@ -55,6 +59,38 @@ public Practitioner getPractitionerById(@IdParam @NotNull IdType id) {\n \t\treturn Practitioner30_40.convertPractitioner(practitioner);\n \t}\n \t\n+\t@Create\n+\tpublic MethodOutcome createPractitioner(@ResourceParam Practitioner practitioner) {\n+\t\treturn FhirProviderUtils.buildCreate(practitionerService.create(Practitioner30_40.convertPractitioner(practitioner)));\n+\t} \n+\t\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updatePractitioner(@IdParam IdType id, @ResourceParam Practitioner practitioner) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\n+\t\tpractitioner.setId(id.getIdPart());\n+\n+\t\treturn FhirProviderUtils.buildUpdate(practitionerService.update(id.getIdPart(),\n+\t\t\t\tPractitioner30_40.convertPractitioner(practitioner)));\n+\t}\n+\t\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic org.hl7.fhir.r4.model.OperationOutcome deletePractitioner(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Practitioner practitioner = practitionerService.delete(id.getIdPart());\n+\t\tif (practitioner == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find practitioner to delete with id \" + id.getIdPart());\n+\t\t}\n+\t\tOperationOutcome retVal = new OperationOutcome();\n+\t\tretVal.setId(id.getIdPart());", "originalCommit": "32af4bebdc0df9362dc627eef38ce9b1636d2b82", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxNzMyOA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/224#discussion_r446517328", "bodyText": "ditto", "author": "Akayeshmantha", "createdAt": "2020-06-27T11:56:01Z", "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r4/PractitionerFhirResourceProvider.java", "diffHunk": "@@ -57,6 +65,36 @@ public Practitioner getPractitionerById(@IdParam @NotNull IdType id) {\n \t\treturn practitioner;\n \t}\n \t\n+\t@Create\n+\tpublic MethodOutcome createPractitioner(@ResourceParam Practitioner practitioner) {\n+\t\treturn FhirProviderUtils.buildCreate(practitionerService.create(practitioner));\n+\t} \n+\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updatePractitioner(@IdParam IdType id, @ResourceParam Practitioner practitioner) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\n+\t\tpractitioner.setId(id.getIdPart());\n+\n+\t\treturn FhirProviderUtils.buildUpdate(practitionerService.update(id.getIdPart(),practitioner));\n+\t}\n+\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic OperationOutcome deletePractitioner(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Practitioner practitioner = practitionerService.delete(id.getIdPart());\n+\t\tif (practitioner == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find practitioner to delete with id \" + id.getIdPart());\n+\t\t}\n+\t\tOperationOutcome retVal = new OperationOutcome();", "originalCommit": "32af4bebdc0df9362dc627eef38ce9b1636d2b82", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxNzM0Ng==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/224#discussion_r446517346", "bodyText": "ditto", "author": "Akayeshmantha", "createdAt": "2020-06-27T11:56:18Z", "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r4/PractitionerFhirResourceProviderTest.java", "diffHunk": "@@ -452,4 +457,64 @@ public void getPractitionerHistoryByWithWrongId_shouldThrowResourceNotFoundExcep\n \t\tassertThat(resourceProvider.getPractitionerHistoryById(idType).isEmpty(), Matchers.is(true));\n \t\tassertThat(resourceProvider.getPractitionerHistoryById(idType).size(), Matchers.equalTo(0));\n \t}\n+\t\n+\t@Test\n+\tpublic void updatePractitioner_shouldUpdatePractitioner() {\n+\t\tPractitioner newPractitioner = practitioner;", "originalCommit": "32af4bebdc0df9362dc627eef38ce9b1636d2b82", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxNzM4Mw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/224#discussion_r446517383", "bodyText": "ditto", "author": "Akayeshmantha", "createdAt": "2020-06-27T11:56:32Z", "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r4/PractitionerFhirResourceProviderTest.java", "diffHunk": "@@ -452,4 +457,64 @@ public void getPractitionerHistoryByWithWrongId_shouldThrowResourceNotFoundExcep\n \t\tassertThat(resourceProvider.getPractitionerHistoryById(idType).isEmpty(), Matchers.is(true));\n \t\tassertThat(resourceProvider.getPractitionerHistoryById(idType).size(), Matchers.equalTo(0));\n \t}\n+\t\n+\t@Test\n+\tpublic void updatePractitioner_shouldUpdatePractitioner() {\n+\t\tPractitioner newPractitioner = practitioner;\n+\n+\t\twhen(practitionerService.update(PRACTITIONER_UUID, practitioner)).thenReturn(newPractitioner);\n+\n+\t\tMethodOutcome result = resourceProvider.updatePractitioner(new IdType().setValue(PRACTITIONER_UUID), practitioner);\n+\t\tassertThat(result, CoreMatchers.notNullValue());\n+\t\tassertThat(result.getResource(), CoreMatchers.equalTo(newPractitioner));\n+\t}\n+\n+\n+\t@Test(expected = InvalidRequestException.class)\n+\tpublic void updatePractitioner_shouldThrowInvalidRequestExceptionForWrongPractitionerUuid() {\n+\t\twhen(practitionerService.update(WRONG_PRACTITIONER_UUID, practitioner)).thenThrow(InvalidRequestException.class);\n+\n+\t\tresourceProvider.updatePractitioner(new IdType().setValue(WRONG_PRACTITIONER_UUID), practitioner);\n+\t}\n+\n+\t@Test(expected = MethodNotAllowedException.class)\n+\tpublic void updateAllergyShouldThrowMethodNotAllowedIfDoesNotExist() {\n+\t\tPractitioner wrongPractitioner = new Practitioner();\n+\n+\t\twrongPractitioner.setId(WRONG_PRACTITIONER_UUID);\n+\n+\t\twhen(practitionerService.update(WRONG_PRACTITIONER_UUID, wrongPractitioner)).thenThrow(MethodNotAllowedException.class);\n+\n+\t\tresourceProvider.updatePractitioner(new IdType().setValue(WRONG_PRACTITIONER_UUID), wrongPractitioner);\n+\t}\n+\n+\t@Test\n+\tpublic void deletePractitioner_shouldDeletePractitioner() {", "originalCommit": "32af4bebdc0df9362dc627eef38ce9b1636d2b82", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxNzQxMA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/224#discussion_r446517410", "bodyText": "ditto", "author": "Akayeshmantha", "createdAt": "2020-06-27T11:56:50Z", "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r4/PractitionerFhirResourceProviderTest.java", "diffHunk": "@@ -452,4 +457,64 @@ public void getPractitionerHistoryByWithWrongId_shouldThrowResourceNotFoundExcep\n \t\tassertThat(resourceProvider.getPractitionerHistoryById(idType).isEmpty(), Matchers.is(true));\n \t\tassertThat(resourceProvider.getPractitionerHistoryById(idType).size(), Matchers.equalTo(0));\n \t}\n+\t\n+\t@Test\n+\tpublic void updatePractitioner_shouldUpdatePractitioner() {\n+\t\tPractitioner newPractitioner = practitioner;\n+\n+\t\twhen(practitionerService.update(PRACTITIONER_UUID, practitioner)).thenReturn(newPractitioner);\n+\n+\t\tMethodOutcome result = resourceProvider.updatePractitioner(new IdType().setValue(PRACTITIONER_UUID), practitioner);\n+\t\tassertThat(result, CoreMatchers.notNullValue());\n+\t\tassertThat(result.getResource(), CoreMatchers.equalTo(newPractitioner));\n+\t}\n+\n+\n+\t@Test(expected = InvalidRequestException.class)\n+\tpublic void updatePractitioner_shouldThrowInvalidRequestExceptionForWrongPractitionerUuid() {\n+\t\twhen(practitionerService.update(WRONG_PRACTITIONER_UUID, practitioner)).thenThrow(InvalidRequestException.class);\n+\n+\t\tresourceProvider.updatePractitioner(new IdType().setValue(WRONG_PRACTITIONER_UUID), practitioner);\n+\t}\n+\n+\t@Test(expected = MethodNotAllowedException.class)\n+\tpublic void updateAllergyShouldThrowMethodNotAllowedIfDoesNotExist() {\n+\t\tPractitioner wrongPractitioner = new Practitioner();\n+\n+\t\twrongPractitioner.setId(WRONG_PRACTITIONER_UUID);\n+\n+\t\twhen(practitionerService.update(WRONG_PRACTITIONER_UUID, wrongPractitioner)).thenThrow(MethodNotAllowedException.class);\n+\n+\t\tresourceProvider.updatePractitioner(new IdType().setValue(WRONG_PRACTITIONER_UUID), wrongPractitioner);\n+\t}\n+\n+\t@Test\n+\tpublic void deletePractitioner_shouldDeletePractitioner() {\n+\t\tPractitioner newPractitioner = new Practitioner();\n+\n+\t\twhen(practitionerService.delete(PRACTITIONER_UUID)).thenReturn(newPractitioner);\n+\n+\t\torg.hl7.fhir.r4.model.OperationOutcome result = resourceProvider.deletePractitioner(new IdType().setValue(PRACTITIONER_UUID));", "originalCommit": "32af4bebdc0df9362dc627eef38ce9b1636d2b82", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxNzQ3OQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/224#discussion_r446517479", "bodyText": "ditto ===== previously mentioned \ud83d\ude03\ud83d\ude03", "author": "Akayeshmantha", "createdAt": "2020-06-27T11:57:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxNzQxMA=="}], "type": "inlineReview"}, {"oid": "57891dac24275e9b8a318c3e21c49ded31e14074", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/57891dac24275e9b8a318c3e21c49ded31e14074", "message": "FM2-222:Add create,update, and delete methods for Practitioner", "committedDate": "2020-07-01T11:03:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYzNTE3Mw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/224#discussion_r453635173", "bodyText": "please rewrite this as FhirProviderUtils.buildDelete(Practitioner30_40.convertPractitioner(practitioner));", "author": "varung-31", "createdAt": "2020-07-13T13:07:00Z", "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/PractitionerFhirResourceProvider.java", "diffHunk": "@@ -60,6 +70,35 @@ public Practitioner getPractitionerById(@IdParam @NotNull IdType id) {\n \t\treturn Practitioner30_40.convertPractitioner(practitioner);\n \t}\n \t\n+\t@Create\n+\tpublic MethodOutcome createPractitioner(@ResourceParam Practitioner practitioner) {\n+\t\treturn FhirProviderUtils.buildCreate(practitionerService.create(Practitioner30_40.convertPractitioner(practitioner)));\n+\t} \n+\t\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updatePractitioner(@IdParam IdType id, @ResourceParam Practitioner practitioner) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\n+\t\tpractitioner.setId(id.getIdPart());\n+\n+\t\treturn FhirProviderUtils.buildUpdate(practitionerService.update(id.getIdPart(),\n+\t\t\t\tPractitioner30_40.convertPractitioner(practitioner)));\n+\t}\n+\t\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic OperationOutcome deletePractitioner(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Practitioner practitioner = practitionerService.delete(id.getIdPart());\n+\t\tif (practitioner == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find practitioner to delete with id \" + id.getIdPart());\n+\t\t}\n+\n+\t\treturn OperationOutcome30_40.convertOperationOutcome(FhirProviderUtils.buildDelete(practitioner));", "originalCommit": "ce302fb2e0c8d62de3f94de39af68786a4d61949", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "de3637c1f754e7850a106112457a174a4cfb4778", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/de3637c1f754e7850a106112457a174a4cfb4778", "message": "FM2-222:Add create,update, and delete methods for Practitioner", "committedDate": "2020-07-13T18:06:03Z", "type": "commit"}, {"oid": "b5ad9c357956b7f6c4da007e4ab5f08acd72c4ee", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/b5ad9c357956b7f6c4da007e4ab5f08acd72c4ee", "message": "FM2-222:Add create.delete,update,and delete methods for practitioner", "committedDate": "2020-07-13T18:35:32Z", "type": "commit"}, {"oid": "b5ad9c357956b7f6c4da007e4ab5f08acd72c4ee", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/b5ad9c357956b7f6c4da007e4ab5f08acd72c4ee", "message": "FM2-222:Add create.delete,update,and delete methods for practitioner", "committedDate": "2020-07-13T18:35:32Z", "type": "forcePushed"}, {"oid": "c5a9841ac987c0fd85afcec7b12becb9e96f2c5f", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/c5a9841ac987c0fd85afcec7b12becb9e96f2c5f", "message": "Remove whitespace", "committedDate": "2020-07-13T18:53:19Z", "type": "commit"}, {"oid": "898934f31fd75bfae95242a2cc23722a4d4e8a2c", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/898934f31fd75bfae95242a2cc23722a4d4e8a2c", "message": "Remove unnecessary whitespace", "committedDate": "2020-07-13T18:53:52Z", "type": "commit"}, {"oid": "55f90d428e0f9cd45d9e3a1f98adf01e9ee70edb", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/55f90d428e0f9cd45d9e3a1f98adf01e9ee70edb", "message": "Remove unnecessary whitespace", "committedDate": "2020-07-13T18:54:12Z", "type": "commit"}, {"oid": "4e48de148a7994951985cfa32f10a8e8baf01228", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/4e48de148a7994951985cfa32f10a8e8baf01228", "message": "Remove unnecessary whitespace", "committedDate": "2020-07-13T18:54:36Z", "type": "commit"}, {"oid": "5b2699266b8d99e4774d4f89a79aff7bb2656526", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/5b2699266b8d99e4774d4f89a79aff7bb2656526", "message": "Remove unnecessary whitespace", "committedDate": "2020-07-13T18:55:12Z", "type": "commit"}, {"oid": "e6ad5be8a1b09c53245b66a96b3a8a698c30e31f", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/e6ad5be8a1b09c53245b66a96b3a8a698c30e31f", "message": "Formatting fixes", "committedDate": "2020-07-13T18:58:07Z", "type": "commit"}]}