{"pr_number": 212, "pr_title": "FM2-212 : Extend allergyIntoleranceResource to support update delete.", "pr_createdAt": "2020-06-15T23:12:18Z", "pr_url": "https://github.com/openmrs/openmrs-module-fhir2/pull/212", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA3NzQ2Mg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/212#discussion_r441077462", "bodyText": "@Akayeshmantha thanks for the work,,,,,\nmay be the naming can be like this updateAllergy_shouldUpdateAllergyIntolerance()", "author": "gitcliff", "createdAt": "2020-06-16T19:02:33Z", "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r4/AllergyIntoleranceFhirResourceProviderTest.java", "diffHunk": "@@ -336,4 +339,51 @@ public void createAllergy_shouldCreateAllergyIntolerance() {\n \t\tassertThat(result.getResource(), CoreMatchers.equalTo(allergyIntolerance));\n \t}\n \t\n+\t@Test\n+\tpublic void shouldUpdateAllergy() {", "originalCommit": "abd3eacbdaeca0ed3a4807bcdf4cba7229055033", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEzMTk0NQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/212#discussion_r441131945", "bodyText": "Good point @gitcliff", "author": "Akayeshmantha", "createdAt": "2020-06-16T20:46:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA3NzQ2Mg=="}], "type": "inlineReview"}, {"oid": "f8c3c844d9c20fe81848bb9d3ce444a409696ea0", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/f8c3c844d9c20fe81848bb9d3ce444a409696ea0", "message": "FM2-212 : Extend allergyIntoleranceResource to support update delete.", "committedDate": "2020-06-16T20:45:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ2NjE3NA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/212#discussion_r445466174", "bodyText": "Make use of util method introduced by #214\nreturn FhirProviderUtils.buildDelete(allergyIntolerance);", "author": "corneliouzbett", "createdAt": "2020-06-25T10:38:38Z", "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/AllergyIntoleranceFhirResourceProvider.java", "diffHunk": "@@ -76,6 +84,39 @@ public AllergyIntolerance getAllergyIntoleranceById(@IdParam @NotNull IdType id)\n \t\t        .map(Provenance30_40::convertProvenance).collect(Collectors.toList());\n \t}\n \t\n+\t@Create\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome creatAllergyIntolerance(@ResourceParam AllergyIntolerance allergyIntolerance) {\n+\t\treturn FhirProviderUtils.buildCreate(\n+\t\t    allergyIntoleranceService.create(AllergyIntolerance30_40.convertAllergyIntolerance(allergyIntolerance)));\n+\t}\n+\t\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updateAllergyIntolerance(@IdParam IdType id, @ResourceParam AllergyIntolerance allergyIntolerance) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\t\t\n+\t\tallergyIntolerance.setId(id.getIdPart());\n+\t\t\n+\t\treturn FhirProviderUtils.buildUpdate(allergyIntoleranceService.update(id.getIdPart(),\n+\t\t    AllergyIntolerance30_40.convertAllergyIntolerance(allergyIntolerance)));\n+\t}\n+\t\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic OperationOutcome deleteAllergyIntolerance(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.AllergyIntolerance allergyIntolerance = allergyIntoleranceService.delete(id.getIdPart());\n+\t\tif (allergyIntolerance == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find allergyIntolerance to delete with id \" + id.getIdPart());\n+\t\t}\n+\t\tOperationOutcome retVal = new OperationOutcome();\n+\t\tretVal.setId(id.getIdPart());\n+\t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n+\t\treturn retVal;", "originalCommit": "f8c3c844d9c20fe81848bb9d3ce444a409696ea0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwOTEwNg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/212#discussion_r446509106", "bodyText": "sure for the operationoutcome right ?", "author": "Akayeshmantha", "createdAt": "2020-06-27T10:10:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ2NjE3NA=="}], "type": "inlineReview"}, {"oid": "a8a731a220054bb71283c83fbf7ea8e4919043f8", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/a8a731a220054bb71283c83fbf7ea8e4919043f8", "message": "fixes for the review comments.", "committedDate": "2020-06-27T12:37:19Z", "type": "forcePushed"}, {"oid": "0e7dd384c454772e21c94621f5042c51efb574d9", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/0e7dd384c454772e21c94621f5042c51efb574d9", "message": "fixes for the review comments.", "committedDate": "2020-06-28T18:24:21Z", "type": "forcePushed"}, {"oid": "723856a0ba32082386291541d3faf346275122c8", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/723856a0ba32082386291541d3faf346275122c8", "message": "fixes for the review comments.", "committedDate": "2020-06-29T12:19:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1NTIwMw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/212#discussion_r446955203", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic MethodOutcome creatAllergyIntolerance(@ResourceParam AllergyIntolerance allergyIntolerance) {\n          \n          \n            \n            \tpublic MethodOutcome createAllergyIntolerance(@ResourceParam AllergyIntolerance allergyIntolerance) {", "author": "ibacher", "createdAt": "2020-06-29T13:05:36Z", "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/AllergyIntoleranceFhirResourceProvider.java", "diffHunk": "@@ -76,6 +85,36 @@ public AllergyIntolerance getAllergyIntoleranceById(@IdParam @NotNull IdType id)\n \t\t        .map(Provenance30_40::convertProvenance).collect(Collectors.toList());\n \t}\n \t\n+\t@Create\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome creatAllergyIntolerance(@ResourceParam AllergyIntolerance allergyIntolerance) {", "originalCommit": "723856a0ba32082386291541d3faf346275122c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI5OTI1NQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/212#discussion_r447299255", "bodyText": "@Akayeshmantha Can we add the update tests as well?", "author": "ibacher", "createdAt": "2020-06-29T22:38:06Z", "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r3/AllergyIntoleranceFhirR3ResourceProviderTest.java", "diffHunk": "@@ -323,4 +326,20 @@ public void searchForAllergies_shouldReturnMatchingBundleOfAllergiesByStatus() {\n \t\tassertThat(((org.hl7.fhir.r4.model.AllergyIntolerance) resultList.iterator().next()).getId(), equalTo(ALLERGY_UUID));\n \t}\n \t\n+\t@Test", "originalCommit": "723856a0ba32082386291541d3faf346275122c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4NDAzNg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/212#discussion_r447484036", "bodyText": "@ibacher  sure I will do it", "author": "Akayeshmantha", "createdAt": "2020-06-30T07:54:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI5OTI1NQ=="}], "type": "inlineReview"}, {"oid": "0082b32e80644a189890e4a9a3d24a1dbd7bb7cd", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/0082b32e80644a189890e4a9a3d24a1dbd7bb7cd", "message": "fixes for the review comments.", "committedDate": "2020-06-30T13:32:22Z", "type": "forcePushed"}, {"oid": "e554e9c9d704bee71945d55fb5ed6420f3f20991", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/e554e9c9d704bee71945d55fb5ed6420f3f20991", "message": "final changes.", "committedDate": "2020-06-30T13:59:46Z", "type": "forcePushed"}, {"oid": "8d111eb93ac06269609317035f484e03ae75eb01", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/8d111eb93ac06269609317035f484e03ae75eb01", "message": "fixes for the review comments.", "committedDate": "2020-06-30T14:05:23Z", "type": "forcePushed"}, {"oid": "482b0082e6e9ddbd663461e0e7bd1ae603433017", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/482b0082e6e9ddbd663461e0e7bd1ae603433017", "message": "fixes for the review comments.", "committedDate": "2020-07-03T12:43:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5MTM3MQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/212#discussion_r450191371", "bodyText": "Please use delete instead of get in this test", "author": "varung-31", "createdAt": "2020-07-06T12:38:32Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/AllergyIntoleranceFhirResourceProviderWebTest.java", "diffHunk": "@@ -433,4 +442,90 @@ public void createAllergy_shouldCreateAllergyIntolerance() throws Exception {\n \t\tassertThat(response, isCreated());\n \t\tassertThat(response.getStatus(), is(201));\n \t}\n+\t\n+\t@Test\n+\tpublic void updateAllergyIntolerance_shouldUpdateRequestedAllergyIntolerance() throws Exception {\n+\t\tAllergyIntolerance allergy = new AllergyIntolerance();\n+\t\tallergy.setId(ALLERGY_UUID);\n+\t\tString createAllergyJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_ALLERGY_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tcreateAllergyJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\twhen(allergyService.update(any(String.class), any(AllergyIntolerance.class))).thenReturn(allergy);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/AllergyIntolerance/\" + ALLERGY_UUID).jsonContent(createAllergyJson)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateAllergyIntolerance_shouldThrowErrorForIdMismatch() throws Exception {\n+\t\tString createAllergyJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_ALLERGY_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tcreateAllergyJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/AllergyIntolerance/\" + WRONG_ALLERGY_UUID).jsonContent(createAllergyJson)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateAllergyIntolerance_shouldThrowErrorForNoId() throws Exception {\n+\t\tString createAllergyJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_WITHOUTID_ALLERGY_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tcreateAllergyJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/AllergyIntolerance/\" + ALLERGY_UUID).jsonContent(createAllergyJson)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateAllergyIntolerance_shouldThrowErrorForNonexistentMedication() throws Exception {\n+\t\tString createAllergyJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_WITH_WRONGID_ALLERGY_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tcreateAllergyJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\twhen(allergyService.update(eq(WRONG_ALLERGY_UUID), any(AllergyIntolerance.class)))\n+\t\t        .thenThrow(new MethodNotAllowedException(\"AllergyIntolerance \" + WRONG_ALLERGY_UUID + \" does not exist\"));\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/AllergyIntolerance/\" + WRONG_ALLERGY_UUID).jsonContent(createAllergyJson)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isMethodNotAllowed());\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteAllergyIntolerance_shouldDeleteRequestedAllergyIntolerance() throws Exception {\n+\t\twhen(allergyService.delete(any(String.class))).thenReturn(allergyIntolerance);\n+\t\t\n+\t\tMockHttpServletResponse response = delete(\"/AllergyIntolerance/\" + ALLERGY_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t}\n+\n+\t@Test\n+\tpublic void deleteAllergyIntolerance_shouldReturn404ForNonExistingAllergyIntolerance() throws Exception {\n+\t\twhen(allergyService.get(WRONG_ALLERGY_UUID)).thenReturn(null);\n+\n+\t\tMockHttpServletResponse response = get(\"/AllergyIntolerance/\" + WRONG_ALLERGY_UUID).accept(FhirMediaTypes.JSON).go();", "originalCommit": "482b0082e6e9ddbd663461e0e7bd1ae603433017", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5MTU2Ng==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/212#discussion_r450191566", "bodyText": "Please use delete instead of get in this test", "author": "varung-31", "createdAt": "2020-07-06T12:38:55Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r3/AllergyIntoleranceFhirR3ResourceProviderWebTest.java", "diffHunk": "@@ -393,4 +408,111 @@ private void verifyUri(String uri) throws Exception {\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(ALLERGY_UUID));\n \t}\n \t\n+\t@Test\n+\tpublic void createAllergyIntolerance_shouldCreateNewAllergyIntolerance() throws Exception {\n+\t\torg.hl7.fhir.r4.model.AllergyIntolerance allergyIntolerance = new org.hl7.fhir.r4.model.AllergyIntolerance();\n+\t\tallergyIntolerance.setId(ALLERGY_UUID);\n+\t\tString allergyJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_ALLERGY_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tallergyJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\twhen(allergyService.create(any(org.hl7.fhir.r4.model.AllergyIntolerance.class))).thenReturn(allergyIntolerance);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/AllergyIntolerance\").jsonContent(allergyJson).accept(FhirMediaTypes.JSON)\n+\t\t        .go();\n+\t\t\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getStatus(), is(201));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateAllergyIntolerance_shouldUpdateRequestedAllergyIntolerance() throws Exception {\n+\t\torg.hl7.fhir.r4.model.AllergyIntolerance allergyIntolerance = new org.hl7.fhir.r4.model.AllergyIntolerance();\n+\t\tallergyIntolerance.setId(ALLERGY_UUID);\n+\t\tString allergyJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_ALLERGY_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tallergyJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\twhen(allergyService.update(any(String.class), any(org.hl7.fhir.r4.model.AllergyIntolerance.class)))\n+\t\t        .thenReturn(allergyIntolerance);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/AllergyIntolerance/\" + ALLERGY_UUID).jsonContent(allergyJson)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateAllergyIntolerance_shouldThrowErrorForIdMismatch() throws Exception {\n+\t\tString allergyJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_ALLERGY_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tallergyJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/AllergyIntolerance/\" + WRONG_ALLERGY_UUID).jsonContent(allergyJson)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateAllergyIntolerance_shouldErrorForNoId() throws Exception {\n+\t\tString allergyJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_WITHOUTID_ALLERGY_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tallergyJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/AllergyIntolerance/\" + ALLERGY_UUID).jsonContent(allergyJson)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateAllergyIntolerance_shouldErrorForNonexistentMedication() throws Exception {\n+\t\tString medicationJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_WITH_WRONGID_ALLERGY_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tmedicationJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\twhen(allergyService.update(eq(WRONG_ALLERGY_UUID), any(org.hl7.fhir.r4.model.AllergyIntolerance.class)))\n+\t\t        .thenThrow(new MethodNotAllowedException(\"AllergyIntolerance \" + WRONG_ALLERGY_UUID + \" does not exist\"));\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/AllergyIntolerance/\" + WRONG_ALLERGY_UUID).jsonContent(medicationJson)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isMethodNotAllowed());\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteAllergyIntolerance_shouldDeleteAllergyIntolerance() throws Exception {\n+\t\torg.hl7.fhir.r4.model.AllergyIntolerance allergyIntolerance = new org.hl7.fhir.r4.model.AllergyIntolerance();\n+\t\tallergyIntolerance.setId(ALLERGY_UUID);\n+\t\t\n+\t\twhen(allergyService.delete(any(String.class))).thenReturn(allergyIntolerance);\n+\t\t\n+\t\tMockHttpServletResponse response = delete(\"/AllergyIntolerance/\" + ALLERGY_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteAllergyIntolerance_shouldReturn404ForNonExistingAllergyIntolerance() throws Exception {\n+\t\twhen(allergyService.get(WRONG_ALLERGY_UUID)).thenReturn(null);\n+\t\t\n+\t\tMockHttpServletResponse response = get(\"/AllergyIntolerance/\" + WRONG_ALLERGY_UUID).accept(FhirMediaTypes.JSON).go();", "originalCommit": "482b0082e6e9ddbd663461e0e7bd1ae603433017", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "143960587def71f0d04c91997365f433fb0b3b63", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/143960587def71f0d04c91997365f433fb0b3b63", "message": "fixes for the review comments.", "committedDate": "2020-07-06T13:07:28Z", "type": "forcePushed"}, {"oid": "da5f6becee5272f5464e33b560223039dcfc9cc1", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/da5f6becee5272f5464e33b560223039dcfc9cc1", "message": "fixes for the review comments.", "committedDate": "2020-07-09T13:16:33Z", "type": "forcePushed"}, {"oid": "9b1d672c888ca5e5cf80da7462941dca8edf552f", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/9b1d672c888ca5e5cf80da7462941dca8edf552f", "message": "fixes for the review comments.", "committedDate": "2020-07-09T13:22:21Z", "type": "forcePushed"}, {"oid": "9d649b74085de589c553e49c15a978ec89cc578e", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/9d649b74085de589c553e49c15a978ec89cc578e", "message": "fixes for the review comments.", "committedDate": "2020-07-14T20:29:17Z", "type": "forcePushed"}, {"oid": "837852d3d7f19eb71643b61d6a4d6495b3a6c8e3", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/837852d3d7f19eb71643b61d6a4d6495b3a6c8e3", "message": "FM2-212 : Extend allergyIntoleranceResource to support update delete.", "committedDate": "2020-07-14T20:30:32Z", "type": "commit"}, {"oid": "837852d3d7f19eb71643b61d6a4d6495b3a6c8e3", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/837852d3d7f19eb71643b61d6a4d6495b3a6c8e3", "message": "FM2-212 : Extend allergyIntoleranceResource to support update delete.", "committedDate": "2020-07-14T20:30:32Z", "type": "forcePushed"}]}