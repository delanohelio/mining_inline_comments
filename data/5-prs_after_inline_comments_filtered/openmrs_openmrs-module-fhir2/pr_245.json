{"pr_number": 245, "pr_title": "FM2-223: Add create, update, and delete methods for ServiceRequest", "pr_createdAt": "2020-07-03T13:13:17Z", "pr_url": "https://github.com/openmrs/openmrs-module-fhir2/pull/245", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0NjA3MA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/245#discussion_r453646070", "bodyText": "Typo in MissMatch", "author": "varung-31", "createdAt": "2020-07-13T13:24:17Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java", "diffHunk": "@@ -68,4 +86,93 @@ public void getEncounterByWrongUuid_shouldReturn404() throws Exception {\n \t\t\n \t\tassertThat(response, isNotFound());\n \t}\n+\t\n+\n+\t@Test\n+\tpublic void createServiceRequest_shouldCreateServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_SERVICE_REQUEST_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n+\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\n+\t\twhen(service.create(any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);\n+\n+\t\tMockHttpServletResponse response = post(\"/ServiceRequest\").jsonContent(jsonServiceRequest)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isCreated());\n+\t}\n+\n+\t@Test\n+\tpublic void updateServiceRequest_shouldUpdateExistingServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_PATH )) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n+\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\n+\t\twhen(service.update(anyString(), any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);\n+\n+\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n+\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isOk());\n+\t}\n+\n+\t@Test\n+\tpublic void updateServiceRequest_shouldErrorForNoId() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n+\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t\t\tcontainsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\n+\t@Test\n+\tpublic void updateServiceRequest_shouldErrorForIdMissMatch() throws Exception {", "originalCommit": "dbd2dac0c08593af3a0a7bb3c7d6a3af31237c22", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9bb0e6be24cd61ec69e3cab19195de81c57d2c5d", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/9bb0e6be24cd61ec69e3cab19195de81c57d2c5d", "message": "FM2-223:adding more parameters", "committedDate": "2020-07-14T20:07:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyNzgzNw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/245#discussion_r455027837", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void updateServiceRequest_shouldrRaiseExceptionForIdMissMatch() throws Exception {\n          \n          \n            \n            \tpublic void updateServiceRequest_shouldRaiseExceptionForIdMisMatch() throws Exception {", "author": "varung-31", "createdAt": "2020-07-15T12:53:36Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java", "diffHunk": "@@ -141,4 +160,92 @@ private void verifyUri(String uri) throws Exception {\n \t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n \t}\n+\n+\t@Test\n+\tpublic void createServiceRequest_shouldCreateServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_SERVICE_REQUEST_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n+\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\n+\t\twhen(service.create(any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);\n+\n+\t\tMockHttpServletResponse response = post(\"/ServiceRequest\").jsonContent(jsonServiceRequest)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isCreated());\n+\t}\n+\n+\t@Test\n+\tpublic void updateServiceRequest_shouldUpdateExistingServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_PATH )) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n+\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\n+\t\twhen(service.update(anyString(), any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);\n+\n+\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n+\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isOk());\n+\t}\n+\n+\t@Test\n+\tpublic void updateServiceRequest_shouldRaiseExceptionForNoId() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n+\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t\t\tcontainsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\n+\t@Test\n+\tpublic void updateServiceRequest_shouldrRaiseExceptionForIdMissMatch() throws Exception {", "originalCommit": "9bb0e6be24cd61ec69e3cab19195de81c57d2c5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyODM1Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/245#discussion_r455028357", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = serviceRequestService.delete(id.getIdPart());\n          \n          \n            \n            \t\tServiceRequest serviceRequest = serviceRequestService.delete(id.getIdPart());", "author": "varung-31", "createdAt": "2020-07-15T12:54:28Z", "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProvider.java", "diffHunk": "@@ -55,6 +63,33 @@ public ServiceRequest getServiceRequestById(@IdParam @NotNull IdType id) {\n \t\treturn serviceRequest;\n \t}\n \t\n+\t@Create\n+\tpublic MethodOutcome createServiceRequest(@ResourceParam ServiceRequest serviceRequest) {\n+\t\treturn FhirProviderUtils.buildCreate(serviceRequestService.create(serviceRequest));\n+\t} \n+\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updateServiceRequest(@IdParam IdType id, @ResourceParam ServiceRequest serviceRequest) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\n+\t\tserviceRequest.setId(id.getIdPart());\n+\n+\t\treturn FhirProviderUtils.buildUpdate(serviceRequestService.update(id.getIdPart(), serviceRequest));\n+\t}\n+\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic OperationOutcome deleteServiceRequest(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = serviceRequestService.delete(id.getIdPart());", "originalCommit": "9bb0e6be24cd61ec69e3cab19195de81c57d2c5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyODU4NQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/245#discussion_r455028585", "bodyText": "Please remove this.", "author": "varung-31", "createdAt": "2020-07-15T12:54:53Z", "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderTest.java", "diffHunk": "@@ -106,6 +112,7 @@ public void getServiceRequestByWithWrongId_shouldThrowResourceNotFoundException(\n \t}\n \t\n \t@Test\n+", "originalCommit": "9bb0e6be24cd61ec69e3cab19195de81c57d2c5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyOTI3Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/245#discussion_r455029277", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n          \n          \n            \n            \t\tServiceRequest serviceRequest = new ServiceRequest();", "author": "varung-31", "createdAt": "2020-07-15T12:55:59Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java", "diffHunk": "@@ -141,4 +160,92 @@ private void verifyUri(String uri) throws Exception {\n \t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n \t}\n+\n+\t@Test\n+\tpublic void createServiceRequest_shouldCreateServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_SERVICE_REQUEST_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();", "originalCommit": "9bb0e6be24cd61ec69e3cab19195de81c57d2c5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyOTU1MA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/245#discussion_r455029550", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\twhen(service.create(any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);\n          \n          \n            \n            \t\twhen(service.create(any(ServiceRequest.class))).thenReturn(serviceRequest);", "author": "varung-31", "createdAt": "2020-07-15T12:56:23Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java", "diffHunk": "@@ -141,4 +160,92 @@ private void verifyUri(String uri) throws Exception {\n \t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n \t}\n+\n+\t@Test\n+\tpublic void createServiceRequest_shouldCreateServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_SERVICE_REQUEST_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n+\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\n+\t\twhen(service.create(any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);", "originalCommit": "9bb0e6be24cd61ec69e3cab19195de81c57d2c5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyOTY5Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/245#discussion_r455029697", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n          \n          \n            \n            \t\tServiceRequest serviceRequest = new ServiceRequest();", "author": "varung-31", "createdAt": "2020-07-15T12:56:39Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java", "diffHunk": "@@ -141,4 +160,92 @@ private void verifyUri(String uri) throws Exception {\n \t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n \t}\n+\n+\t@Test\n+\tpublic void createServiceRequest_shouldCreateServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_SERVICE_REQUEST_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n+\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\n+\t\twhen(service.create(any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);\n+\n+\t\tMockHttpServletResponse response = post(\"/ServiceRequest\").jsonContent(jsonServiceRequest)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isCreated());\n+\t}\n+\n+\t@Test\n+\tpublic void updateServiceRequest_shouldUpdateExistingServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_PATH )) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();", "originalCommit": "9bb0e6be24cd61ec69e3cab19195de81c57d2c5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyOTgwNQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/245#discussion_r455029805", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\twhen(service.update(anyString(), any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);\n          \n          \n            \n            \t\twhen(service.update(anyString(), any(ServiceRequest.class))).thenReturn(serviceRequest);", "author": "varung-31", "createdAt": "2020-07-15T12:56:48Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java", "diffHunk": "@@ -141,4 +160,92 @@ private void verifyUri(String uri) throws Exception {\n \t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n \t}\n+\n+\t@Test\n+\tpublic void createServiceRequest_shouldCreateServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_SERVICE_REQUEST_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n+\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\n+\t\twhen(service.create(any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);\n+\n+\t\tMockHttpServletResponse response = post(\"/ServiceRequest\").jsonContent(jsonServiceRequest)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isCreated());\n+\t}\n+\n+\t@Test\n+\tpublic void updateServiceRequest_shouldUpdateExistingServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_PATH )) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n+\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\n+\t\twhen(service.update(anyString(), any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);", "originalCommit": "9bb0e6be24cd61ec69e3cab19195de81c57d2c5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAzMDA5OQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/245#discussion_r455030099", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n          \n          \n            \n            \t\tServiceRequest serviceRequest = new ServiceRequest();", "author": "varung-31", "createdAt": "2020-07-15T12:57:17Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java", "diffHunk": "@@ -141,4 +160,92 @@ private void verifyUri(String uri) throws Exception {\n \t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n \t}\n+\n+\t@Test\n+\tpublic void createServiceRequest_shouldCreateServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_SERVICE_REQUEST_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n+\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\n+\t\twhen(service.create(any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);\n+\n+\t\tMockHttpServletResponse response = post(\"/ServiceRequest\").jsonContent(jsonServiceRequest)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isCreated());\n+\t}\n+\n+\t@Test\n+\tpublic void updateServiceRequest_shouldUpdateExistingServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_PATH )) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n+\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\n+\t\twhen(service.update(anyString(), any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);\n+\n+\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n+\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isOk());\n+\t}\n+\n+\t@Test\n+\tpublic void updateServiceRequest_shouldRaiseExceptionForNoId() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n+\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t\t\tcontainsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\n+\t@Test\n+\tpublic void updateServiceRequest_shouldrRaiseExceptionForIdMissMatch() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader()\n+\t\t\t\t.getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_WRONG_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + WRONG_SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n+\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t\t\tcontainsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t}\n+\n+\t@Test\n+\tpublic void deleteServiceRequest_shouldDeleteServiceRequest() throws Exception {\n+\t\tOperationOutcome retVal = new OperationOutcome();\n+\t\tretVal.setId(SERVICE_REQUEST_UUID);\n+\t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();", "originalCommit": "9bb0e6be24cd61ec69e3cab19195de81c57d2c5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9907227a91a036191b19903469b7008980f2a23b", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/9907227a91a036191b19903469b7008980f2a23b", "message": "FM2-223:Add create,update, and delete methods for ServiceRequest", "committedDate": "2020-07-21T12:36:48Z", "type": "commit"}, {"oid": "4347f1766bc15bf6034aaac4a2d3746416870312", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/4347f1766bc15bf6034aaac4a2d3746416870312", "message": "FM2-223:adding more parameters", "committedDate": "2020-07-21T12:36:50Z", "type": "commit"}, {"oid": "47b9b670d08496a8f07637ef3de51c95cba6931d", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/47b9b670d08496a8f07637ef3de51c95cba6931d", "message": "FM2-223:Fixing formats", "committedDate": "2020-07-21T13:24:06Z", "type": "commit"}, {"oid": "47b9b670d08496a8f07637ef3de51c95cba6931d", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/47b9b670d08496a8f07637ef3de51c95cba6931d", "message": "FM2-223:Fixing formats", "committedDate": "2020-07-21T13:24:06Z", "type": "forcePushed"}]}