{"pr_number": 5550, "pr_title": "add support for dbcp 2.x plugin", "pr_createdAt": "2020-09-23T17:25:58Z", "pr_url": "https://github.com/apache/skywalking/pull/5550", "timeline": [{"oid": "0ef8a8f80c4d3a2827309638b5d1bf3ff2f40bb0", "url": "https://github.com/apache/skywalking/commit/0ef8a8f80c4d3a2827309638b5d1bf3ff2f40bb0", "message": "Add support for dbcp", "committedDate": "2020-09-23T16:19:06Z", "type": "commit"}, {"oid": "2ef8be3d81d2b2228b1bb8361195b7e6417a3ec6", "url": "https://github.com/apache/skywalking/commit/2ef8be3d81d2b2228b1bb8361195b7e6417a3ec6", "message": "delete something useless for dbcp plugin", "committedDate": "2020-09-23T16:41:08Z", "type": "commit"}, {"oid": "06793c5dc390e585ce7caa5c3911276ace3da2ed", "url": "https://github.com/apache/skywalking/commit/06793c5dc390e585ce7caa5c3911276ace3da2ed", "message": "Merge branch 'master' into dbcp-2.x-plugin", "committedDate": "2020-09-24T00:44:28Z", "type": "commit"}, {"oid": "4a345ae524a413a545e91953c2517814f7d26db9", "url": "https://github.com/apache/skywalking/commit/4a345ae524a413a545e91953c2517814f7d26db9", "message": "Merge branch 'master' of github.com:apache/skywalking into dbcp-2.x-plugin", "committedDate": "2020-09-24T06:10:06Z", "type": "commit"}, {"oid": "eaf58825f9ab19e70509d72f794518b64d875295", "url": "https://github.com/apache/skywalking/commit/eaf58825f9ab19e70509d72f794518b64d875295", "message": "update plugin list", "committedDate": "2020-09-24T11:28:14Z", "type": "commit"}, {"oid": "a048c0d7a4a35dd1f57f3218d5f0b76fe6ae453d", "url": "https://github.com/apache/skywalking/commit/a048c0d7a4a35dd1f57f3218d5f0b76fe6ae453d", "message": "Merge branch 'dbcp-2.x-plugin' of github.com:Jargon96/skywalking into dbcp-2.x-plugin", "committedDate": "2020-09-24T12:02:32Z", "type": "commit"}, {"oid": "ddc53eb0d5aa184bf8bcc12cdcd5d7972339ac9b", "url": "https://github.com/apache/skywalking/commit/ddc53eb0d5aa184bf8bcc12cdcd5d7972339ac9b", "message": "add license to pom", "committedDate": "2020-09-24T15:04:16Z", "type": "commit"}, {"oid": "28330f2a6bff4fad632a76dcc72e95813567be17", "url": "https://github.com/apache/skywalking/commit/28330f2a6bff4fad632a76dcc72e95813567be17", "message": "update dbcp plugin", "committedDate": "2020-09-24T16:19:46Z", "type": "commit"}, {"oid": "9231dbcf1acb3d6d354ca584c39064585630d8ec", "url": "https://github.com/apache/skywalking/commit/9231dbcf1acb3d6d354ca584c39064585630d8ec", "message": "update dbcp plugin", "committedDate": "2020-09-26T17:19:56Z", "type": "commit"}, {"oid": "870d616d81ae68640d68d055080737b283a40a45", "url": "https://github.com/apache/skywalking/commit/870d616d81ae68640d68d055080737b283a40a45", "message": "Merge branch 'master' of github.com:apache/skywalking into dbcp-2.x-plugin", "committedDate": "2020-09-26T17:23:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODI4Mg==", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r495508282", "bodyText": "This is not the right way to close Statement.", "author": "wu-sheng", "createdAt": "2020-09-27T00:06:14Z", "path": "test/plugin/scenarios/dbcp-2.x-scenario/src/main/java/org/apache/skywalking/apm/testcase/dbcp/SQLExecutor.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.testcase.dbcp;\n+\n+import org.apache.commons.dbcp2.BasicDataSource;\n+import org.apache.commons.dbcp2.BasicDataSourceFactory;\n+\n+import java.io.InputStream;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Properties;\n+\n+public class SQLExecutor implements AutoCloseable {\n+    public static BasicDataSource ds;\n+    private static Connection connection;\n+\n+    public SQLExecutor() throws SQLException {\n+        try {\n+            Properties properties = new Properties();\n+            properties.setProperty(\"driverClassName\", \"com.mysql.jdbc.Driver\");\n+            properties.setProperty(\"url\", MysqlConfig.getUrl());\n+            properties.setProperty(\"username\", MysqlConfig.getUserName());\n+            properties.setProperty(\"password\", MysqlConfig.getPassword());\n+            ds = BasicDataSourceFactory.createDataSource(properties);\n+        } catch (Exception e) {\n+            //\n+        }\n+        connection = ds.getConnection();\n+    }\n+\n+    public void createTable(String sql) throws SQLException {\n+        Statement statement = connection.createStatement();\n+        statement.execute(sql);\n+        statement.close();", "originalCommit": "870d616d81ae68640d68d055080737b283a40a45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODI5OQ==", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r495508299", "bodyText": "Why init the static field in the constructor?", "author": "wu-sheng", "createdAt": "2020-09-27T00:06:31Z", "path": "test/plugin/scenarios/dbcp-2.x-scenario/src/main/java/org/apache/skywalking/apm/testcase/dbcp/SQLExecutor.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.testcase.dbcp;\n+\n+import org.apache.commons.dbcp2.BasicDataSource;\n+import org.apache.commons.dbcp2.BasicDataSourceFactory;\n+\n+import java.io.InputStream;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Properties;\n+\n+public class SQLExecutor implements AutoCloseable {\n+    public static BasicDataSource ds;\n+    private static Connection connection;\n+\n+    public SQLExecutor() throws SQLException {\n+        try {\n+            Properties properties = new Properties();\n+            properties.setProperty(\"driverClassName\", \"com.mysql.jdbc.Driver\");\n+            properties.setProperty(\"url\", MysqlConfig.getUrl());\n+            properties.setProperty(\"username\", MysqlConfig.getUserName());\n+            properties.setProperty(\"password\", MysqlConfig.getPassword());\n+            ds = BasicDataSourceFactory.createDataSource(properties);", "originalCommit": "870d616d81ae68640d68d055080737b283a40a45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODM5Ng==", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r495508396", "bodyText": "Don't use the closing pool. The pool should have the same life cycle as the application.", "author": "wu-sheng", "createdAt": "2020-09-27T00:07:55Z", "path": "test/plugin/scenarios/dbcp-2.x-scenario/src/main/java/org/apache/skywalking/apm/testcase/dbcp/SQLExecutor.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.testcase.dbcp;\n+\n+import org.apache.commons.dbcp2.BasicDataSource;\n+import org.apache.commons.dbcp2.BasicDataSourceFactory;\n+\n+import java.io.InputStream;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Properties;\n+\n+public class SQLExecutor implements AutoCloseable {\n+    public static BasicDataSource ds;\n+    private static Connection connection;\n+\n+    public SQLExecutor() throws SQLException {\n+        try {\n+            Properties properties = new Properties();\n+            properties.setProperty(\"driverClassName\", \"com.mysql.jdbc.Driver\");\n+            properties.setProperty(\"url\", MysqlConfig.getUrl());\n+            properties.setProperty(\"username\", MysqlConfig.getUserName());\n+            properties.setProperty(\"password\", MysqlConfig.getPassword());\n+            ds = BasicDataSourceFactory.createDataSource(properties);\n+        } catch (Exception e) {\n+            //\n+        }\n+        connection = ds.getConnection();\n+    }\n+\n+    public void createTable(String sql) throws SQLException {\n+        Statement statement = connection.createStatement();\n+        statement.execute(sql);\n+        statement.close();\n+        connection.close();\n+        connection = null;\n+    }\n+\n+    public void dropTable(String sql) throws SQLException {\n+        connection = ds.getConnection();\n+        executeStatement(sql);\n+    }\n+\n+    public void executeStatement(String sql) throws SQLException {\n+        Statement statement = connection.createStatement();\n+        statement.execute(sql);\n+        statement.close();\n+    }\n+    \n+    public void closeConnection() throws SQLException {\n+        if (connection != null) {\n+            connection.close();\n+        }\n+    }\n+\n+    public void closePool() throws SQLException {\n+        if (ds != null) {\n+            ds.close();\n+        }\n+    }\n+\n+    @Override\n+    public void close() throws Exception {\n+        closeConnection();\n+        closePool();", "originalCommit": "870d616d81ae68640d68d055080737b283a40a45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODQyMQ==", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r495508421", "bodyText": "Connection pool is not a DB layer.", "author": "wu-sheng", "createdAt": "2020-09-27T00:08:37Z", "path": "apm-sniffer/apm-sdk-plugin/dbcp-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/dbcp/v2/PoolingCloseConnectInterceptor.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.dbcp.v2;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Method;\n+\n+public class PoolingCloseConnectInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        AbstractSpan span = ContextManager.createLocalSpan(\"DBCP/Connection/\" + method.getName());\n+        span.setComponent(ComponentsDefine.DBCP);\n+        SpanLayer.asDB(span);", "originalCommit": "870d616d81ae68640d68d055080737b283a40a45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM4ODY2MQ==", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r509388661", "bodyText": "Dear Mr Wu @wu-sheng, Is connection pool a cache layer? I didn't find any other suitable layer to describe it.", "author": "Jargon96", "createdAt": "2020-10-21T15:31:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODQyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgzNDMwMA==", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r510834300", "bodyText": "Dear Mr Wu @wu-sheng  ,sorry to bother you, but could you give me some help?", "author": "Jargon96", "createdAt": "2020-10-23T12:01:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODQyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg0NzY2OQ==", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r510847669", "bodyText": "Dear Mr Wu @wu-sheng ,sorry to bother you, but could you give me some help?\n\nHe is on vocation recently.\nFrom the functionality of connection pool, I think it's ok to consider it as cache layer.", "author": "kezhenxu94", "createdAt": "2020-10-23T12:27:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODQyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg1NDk4MA==", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r510854980", "bodyText": "Dear Mr Wu @wu-sheng ,sorry to bother you, but could you give me some help?\n\nHe is on vocation recently.\nFrom the functionality of connection pool, I think it's ok to consider it as cache layer.\n\nI got it\uff01thanks for your reply\uff01", "author": "Jargon96", "createdAt": "2020-10-23T12:40:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODQyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg4MTYwMg==", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r510881602", "bodyText": "We don't.require layer for all plugins. For the connection pool, layer is not required.", "author": "wu-sheng", "createdAt": "2020-10-23T13:25:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODQyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk3MDM4Nw==", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r510970387", "bodyText": "We don't.require layer for all plugins. For the connection pool, layer is not required.\n\nThank you sir, and wish you a happy vacation!", "author": "Jargon96", "createdAt": "2020-10-23T15:36:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODQyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODQzOQ==", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r495508439", "bodyText": "Why need this?", "author": "wu-sheng", "createdAt": "2020-09-27T00:08:52Z", "path": "apm-sniffer/apm-sdk-plugin/dbcp-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/dbcp/v2/PoolingCloseConnectInterceptor.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.dbcp.v2;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Method;\n+\n+public class PoolingCloseConnectInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        AbstractSpan span = ContextManager.createLocalSpan(\"DBCP/Connection/\" + method.getName());\n+        span.setComponent(ComponentsDefine.DBCP);\n+        SpanLayer.asDB(span);\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        if (ContextManager.isActive()) {", "originalCommit": "870d616d81ae68640d68d055080737b283a40a45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODQ2Mw==", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r495508463", "bodyText": "Why need this?", "author": "wu-sheng", "createdAt": "2020-09-27T00:09:06Z", "path": "apm-sniffer/apm-sdk-plugin/dbcp-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/dbcp/v2/PoolingCloseConnectInterceptor.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.dbcp.v2;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Method;\n+\n+public class PoolingCloseConnectInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        AbstractSpan span = ContextManager.createLocalSpan(\"DBCP/Connection/\" + method.getName());\n+        span.setComponent(ComponentsDefine.DBCP);\n+        SpanLayer.asDB(span);\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        if (ContextManager.isActive()) {\n+            ContextManager.stopSpan();\n+        }\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Throwable t) {\n+        if (ContextManager.isActive()) {", "originalCommit": "870d616d81ae68640d68d055080737b283a40a45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODUwNw==", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r495508507", "bodyText": "Take the reference from the review on PoolingCloseConnectInterceptor.", "author": "wu-sheng", "createdAt": "2020-09-27T00:09:47Z", "path": "apm-sniffer/apm-sdk-plugin/dbcp-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/dbcp/v2/PoolingGetConnectInterceptor.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.dbcp.v2;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Method;\n+\n+public class PoolingGetConnectInterceptor implements InstanceMethodsAroundInterceptor {", "originalCommit": "870d616d81ae68640d68d055080737b283a40a45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODUzMQ==", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r495508531", "bodyText": "Comments are required.", "author": "wu-sheng", "createdAt": "2020-09-27T00:09:57Z", "path": "apm-sniffer/apm-sdk-plugin/dbcp-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/dbcp/v2/PoolingCloseConnectInterceptor.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.dbcp.v2;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Method;\n+\n+public class PoolingCloseConnectInterceptor implements InstanceMethodsAroundInterceptor {", "originalCommit": "870d616d81ae68640d68d055080737b283a40a45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODYwNg==", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r495508606", "bodyText": "Please extends ClassInstanceMethodsEnhancePluginDefine.", "author": "wu-sheng", "createdAt": "2020-09-27T00:11:02Z", "path": "apm-sniffer/apm-sdk-plugin/dbcp-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/dbcp/v2/define/BasicDataSourceInstrumentation.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.dbcp.v2.define;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.StaticMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;\n+\n+public class BasicDataSourceInstrumentation extends ClassEnhancePluginDefine {", "originalCommit": "870d616d81ae68640d68d055080737b283a40a45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODY3Ng==", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r495508676", "bodyText": "Comments required.", "author": "wu-sheng", "createdAt": "2020-09-27T00:11:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODYwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODY3MA==", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r495508670", "bodyText": "Please extends ClassInstanceMethodsEnhancePluginDefine.", "author": "wu-sheng", "createdAt": "2020-09-27T00:11:32Z", "path": "apm-sniffer/apm-sdk-plugin/dbcp-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/dbcp/v2/define/DelegatingConnectionInstrumentation.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.dbcp.v2.define;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.StaticMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;\n+\n+public class DelegatingConnectionInstrumentation extends ClassEnhancePluginDefine {", "originalCommit": "870d616d81ae68640d68d055080737b283a40a45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODc1Nw==", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r495508757", "bodyText": "Create and drop are not typical SQLs in the execution stage, insert/update/delete are.", "author": "wu-sheng", "createdAt": "2020-09-27T00:13:12Z", "path": "test/plugin/scenarios/dbcp-2.x-scenario/src/main/java/org/apache/skywalking/apm/testcase/dbcp/controller/CaseController.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.testcase.dbcp.controller;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.skywalking.apm.testcase.dbcp.SQLExecutor;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@RequestMapping(\"/case\")\n+public class CaseController {\n+\n+    private static final Logger logger = LogManager.getLogger(CaseController.class);\n+\n+    private static final String SUCCESS = \"Success\";\n+\n+    private static final String CREATE_TABLE_SQL = \"CREATE TABLE test_DBCP(\\n\" + \"id VARCHAR(1) PRIMARY KEY, \\n\" + \"value VARCHAR(1) NOT NULL)\";\n+    private static final String DROP_TABLE_SQL = \"DROP table test_DBCP\";\n+    \n+    @RequestMapping(\"/dbcp-2.x-scenario\")\n+    @ResponseBody\n+    public String testcase() throws Exception {\n+        try (SQLExecutor sqlExecute = new SQLExecutor()) {\n+            sqlExecute.createTable(CREATE_TABLE_SQL);\n+            sqlExecute.dropTable(DROP_TABLE_SQL);", "originalCommit": "870d616d81ae68640d68d055080737b283a40a45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODgxMw==", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r495508813", "bodyText": "You are using SQLExecutor like a connection, but in the codes, it actually is controlling the whole datasource. This is not right. The real services don't use it in this way.", "author": "wu-sheng", "createdAt": "2020-09-27T00:14:10Z", "path": "test/plugin/scenarios/dbcp-2.x-scenario/src/main/java/org/apache/skywalking/apm/testcase/dbcp/controller/CaseController.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.testcase.dbcp.controller;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.skywalking.apm.testcase.dbcp.SQLExecutor;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@RequestMapping(\"/case\")\n+public class CaseController {\n+\n+    private static final Logger logger = LogManager.getLogger(CaseController.class);\n+\n+    private static final String SUCCESS = \"Success\";\n+\n+    private static final String CREATE_TABLE_SQL = \"CREATE TABLE test_DBCP(\\n\" + \"id VARCHAR(1) PRIMARY KEY, \\n\" + \"value VARCHAR(1) NOT NULL)\";\n+    private static final String DROP_TABLE_SQL = \"DROP table test_DBCP\";\n+    \n+    @RequestMapping(\"/dbcp-2.x-scenario\")\n+    @ResponseBody\n+    public String testcase() throws Exception {\n+        try (SQLExecutor sqlExecute = new SQLExecutor()) {", "originalCommit": "870d616d81ae68640d68d055080737b283a40a45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "64c2b1fd97aa2454828f75834266f8cb20d234d1", "url": "https://github.com/apache/skywalking/commit/64c2b1fd97aa2454828f75834266f8cb20d234d1", "message": "update dbcp plugin", "committedDate": "2020-09-28T05:56:47Z", "type": "commit"}, {"oid": "ca5180f0445645a125b623466d8486d4dbdbdb09", "url": "https://github.com/apache/skywalking/commit/ca5180f0445645a125b623466d8486d4dbdbdb09", "message": "update webflux plugin", "committedDate": "2020-09-28T15:03:01Z", "type": "commit"}, {"oid": "eee90042e08f798af0143502b10a6a3cf398622d", "url": "https://github.com/apache/skywalking/commit/eee90042e08f798af0143502b10a6a3cf398622d", "message": "Merge branch 'master' of github.com:apache/skywalking into dbcp-2.x-plugin", "committedDate": "2020-09-28T15:03:14Z", "type": "commit"}, {"oid": "d019c2ade623baca2d52f17f75ef146fad8fcbe0", "url": "https://github.com/apache/skywalking/commit/d019c2ade623baca2d52f17f75ef146fad8fcbe0", "message": "update dbcp plugin", "committedDate": "2020-09-28T15:05:45Z", "type": "commit"}, {"oid": "6e48e99496bd02ca5e00e5270753c94e9d826910", "url": "https://github.com/apache/skywalking/commit/6e48e99496bd02ca5e00e5270753c94e9d826910", "message": "Add comments to dbcp plugin", "committedDate": "2020-10-18T07:57:53Z", "type": "commit"}, {"oid": "f7dfb47911af8814f09a81b624ef0e71a01f91eb", "url": "https://github.com/apache/skywalking/commit/f7dfb47911af8814f09a81b624ef0e71a01f91eb", "message": "merge current branch", "committedDate": "2020-10-21T15:42:25Z", "type": "commit"}, {"oid": "6843a760d4bc90b8a838dc6094a28d82f17ad569", "url": "https://github.com/apache/skywalking/commit/6843a760d4bc90b8a838dc6094a28d82f17ad569", "message": "Merge branch 'master' of github.com:apache/skywalking into dbcp-2.x-plugin", "committedDate": "2020-10-21T15:42:50Z", "type": "commit"}, {"oid": "6e15a717d9dccbd97c3fdfbc315da890ab8a4dea", "url": "https://github.com/apache/skywalking/commit/6e15a717d9dccbd97c3fdfbc315da890ab8a4dea", "message": "modify layer", "committedDate": "2020-10-23T12:45:12Z", "type": "commit"}, {"oid": "3dc28a07496127330b4fa241cd77c637c9541e62", "url": "https://github.com/apache/skywalking/commit/3dc28a07496127330b4fa241cd77c637c9541e62", "message": "update dbcp plugin", "committedDate": "2020-10-23T14:52:30Z", "type": "commit"}, {"oid": "890d16fda1d4272a521832793163015ec8a6f773", "url": "https://github.com/apache/skywalking/commit/890d16fda1d4272a521832793163015ec8a6f773", "message": "Merge branch 'master' of github.com:apache/skywalking into dbcp-2.x-plugin", "committedDate": "2020-10-23T15:31:52Z", "type": "commit"}, {"oid": "685bf3e968a3d1327d0b67a001c4b533586886ac", "url": "https://github.com/apache/skywalking/commit/685bf3e968a3d1327d0b67a001c4b533586886ac", "message": "Add licence to testcase", "committedDate": "2020-10-24T02:50:57Z", "type": "commit"}, {"oid": "80a92a9bbdf7627c4a9e12d0a1aebd8f03f443a9", "url": "https://github.com/apache/skywalking/commit/80a92a9bbdf7627c4a9e12d0a1aebd8f03f443a9", "message": "Merge current code", "committedDate": "2020-11-02T13:14:51Z", "type": "commit"}, {"oid": "e45599d91d6570370aeaf66ddd33de049b981aa3", "url": "https://github.com/apache/skywalking/commit/e45599d91d6570370aeaf66ddd33de049b981aa3", "message": "Remove unnessceary assertion segment", "committedDate": "2020-11-02T13:18:30Z", "type": "commit"}, {"oid": "a4daf0298c1d8d9c812efe315d37e064eb375d60", "url": "https://github.com/apache/skywalking/commit/a4daf0298c1d8d9c812efe315d37e064eb375d60", "message": "Modify dbcp-2.x-plugin pom", "committedDate": "2020-11-02T15:25:50Z", "type": "commit"}, {"oid": "accd7d04917c5ca4511a0267e666a2fd95ebcd79", "url": "https://github.com/apache/skywalking/commit/accd7d04917c5ca4511a0267e666a2fd95ebcd79", "message": "Merge branch 'master' into dbcp-2.x-plugin", "committedDate": "2020-11-03T07:57:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY1MDA1OQ==", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r516650059", "bodyText": "I mean, does the connection pool has an attribute called name or something?", "author": "wu-sheng", "createdAt": "2020-11-03T13:03:45Z", "path": "test/plugin/scenarios/dbcp-2.x-scenario/src/main/java/org/apache/skywalking/apm/testcase/dbcp/service/CaseService.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.testcase.dbcp.service;\n+\n+import org.apache.commons.dbcp2.BasicDataSourceFactory;\n+import org.apache.skywalking.apm.testcase.dbcp.MysqlConfig;\n+import org.springframework.stereotype.Service;\n+\n+import javax.sql.DataSource;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Properties;\n+\n+@Service\n+public class CaseService {\n+\n+    public static DataSource ds;\n+    private static final String CREATE_TABLE_SQL = \"CREATE TABLE test_DBCP(\\n\" + \"id VARCHAR(1) PRIMARY KEY, \\n\" + \"value VARCHAR(1) NOT NULL)\";\n+    private static final String INSERT_DATA_SQL = \"INSERT INTO test_DBCP(id, value) VALUES(1,1)\";\n+    private static final String QUERY_DATA_SQL = \"SELECT id, value FROM test_DBCP WHERE id=1\";\n+    private static final String DELETE_DATA_SQL = \"DELETE FROM test_DBCP WHERE id=1\";\n+    private static final String DROP_TABLE_SQL = \"DROP table test_DBCP\";\n+\n+    static {\n+        Properties properties = new Properties();\n+        properties.setProperty(\"driverClassName\", \"com.mysql.jdbc.Driver\");\n+        properties.setProperty(\"url\", MysqlConfig.getUrl());\n+        properties.setProperty(\"username\", MysqlConfig.getUserName());\n+        properties.setProperty(\"password\", MysqlConfig.getPassword());\n+        try {\n+            ds = BasicDataSourceFactory.createDataSource(properties);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }", "originalCommit": "accd7d04917c5ca4511a0267e666a2fd95ebcd79", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY1MjQ5MA==", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r516652490", "bodyText": "If not, then there is nothing to be changed.", "author": "wu-sheng", "createdAt": "2020-11-03T13:07:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY1MDA1OQ=="}], "type": "inlineReview"}, {"oid": "7441c421acdc7a111a1fbc6bacc9d6ba9fe35991", "url": "https://github.com/apache/skywalking/commit/7441c421acdc7a111a1fbc6bacc9d6ba9fe35991", "message": "Update support-version list", "committedDate": "2020-11-03T14:21:03Z", "type": "commit"}, {"oid": "f779ca96d2f49850f413bb04c654d295a53a0071", "url": "https://github.com/apache/skywalking/commit/f779ca96d2f49850f413bb04c654d295a53a0071", "message": "Merge branch 'master' into dbcp-2.x-plugin", "committedDate": "2020-11-03T14:37:07Z", "type": "commit"}, {"oid": "10acb6b4f7aca3d6a2fca5ff43b8ad7a1381f3e8", "url": "https://github.com/apache/skywalking/commit/10acb6b4f7aca3d6a2fca5ff43b8ad7a1381f3e8", "message": "Merge branch 'master' of github.com:apache/skywalking into dbcp-2.x-plugin", "committedDate": "2020-11-03T14:44:08Z", "type": "commit"}, {"oid": "2b92d1159f25f0a13cc26999eaae4f129e7bf7a8", "url": "https://github.com/apache/skywalking/commit/2b92d1159f25f0a13cc26999eaae4f129e7bf7a8", "message": "Merge branch 'dbcp-2.x-plugin' of github.com:Jargon96/skywalking into dbcp-2.x-plugin", "committedDate": "2020-11-03T14:46:12Z", "type": "commit"}, {"oid": "e40bae1c4ef2a24fbb90719f578ac809618f3e7e", "url": "https://github.com/apache/skywalking/commit/e40bae1c4ef2a24fbb90719f578ac809618f3e7e", "message": "Merge branch 'master' into dbcp-2.x-plugin", "committedDate": "2020-11-04T02:04:37Z", "type": "commit"}, {"oid": "fe058df885d57eb3f95b612551048b72f964ab8c", "url": "https://github.com/apache/skywalking/commit/fe058df885d57eb3f95b612551048b72f964ab8c", "message": "Merge master", "committedDate": "2020-11-07T13:21:03Z", "type": "commit"}, {"oid": "c3dd9fabeff562fa98bf539cf299e762fbe6ab86", "url": "https://github.com/apache/skywalking/commit/c3dd9fabeff562fa98bf539cf299e762fbe6ab86", "message": "Update dbcp-2.x-plugin test", "committedDate": "2020-11-07T13:21:45Z", "type": "commit"}, {"oid": "b28b4c498b066ea0197740f4bb2e013bedaf74c2", "url": "https://github.com/apache/skywalking/commit/b28b4c498b066ea0197740f4bb2e013bedaf74c2", "message": "Merge branch 'dbcp-2.x-plugin' of github.com:Jargon96/skywalking into dbcp-2.x-plugin", "committedDate": "2020-11-07T13:24:10Z", "type": "commit"}, {"oid": "6ca95dd0398f2ce8a0a77776c1ca218c67e1ab9a", "url": "https://github.com/apache/skywalking/commit/6ca95dd0398f2ce8a0a77776c1ca218c67e1ab9a", "message": "Merge branch 'master' of github.com:apache/skywalking into dbcp-2.x-plugin", "committedDate": "2020-11-07T13:56:23Z", "type": "commit"}, {"oid": "e0ca69a4d696d9ecf8049f87795143df4214ea8e", "url": "https://github.com/apache/skywalking/commit/e0ca69a4d696d9ecf8049f87795143df4214ea8e", "message": "Update java-agent supported-list", "committedDate": "2020-11-07T15:09:55Z", "type": "commit"}, {"oid": "ea2fba9a250e29f6b79583c1d876634c8820e678", "url": "https://github.com/apache/skywalking/commit/ea2fba9a250e29f6b79583c1d876634c8820e678", "message": "Update CHANGES.md", "committedDate": "2020-11-08T00:43:06Z", "type": "commit"}]}