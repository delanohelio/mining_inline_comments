{"pr_number": 4177, "pr_title": "Enhance gRPC plugin", "pr_createdAt": "2020-01-05T20:17:42Z", "pr_url": "https://github.com/apache/skywalking/pull/4177", "timeline": [{"oid": "e16f12ae439bcc7102018560f3dbe9552effa241", "url": "https://github.com/apache/skywalking/commit/e16f12ae439bcc7102018560f3dbe9552effa241", "message": "Enhance gRPC plugin", "committedDate": "2020-01-05T19:36:19Z", "type": "commit"}, {"oid": "337442dc2edfad63a0fe08a994e2a68641972dbe", "url": "https://github.com/apache/skywalking/commit/337442dc2edfad63a0fe08a994e2a68641972dbe", "message": "Fix blocking call", "committedDate": "2020-01-05T20:17:04Z", "type": "commit"}, {"oid": "77f2530e5452b8c40a710ee790a6e13e99ee902f", "url": "https://github.com/apache/skywalking/commit/77f2530e5452b8c40a710ee790a6e13e99ee902f", "message": "Add server call ok status and modify auth name", "committedDate": "2020-01-06T06:41:16Z", "type": "commit"}, {"oid": "8e99d189d743400f7725574130e10c9f212318d1", "url": "https://github.com/apache/skywalking/commit/8e99d189d743400f7725574130e10c9f212318d1", "message": "Merge branch 'master' into grpc", "committedDate": "2020-01-07T13:38:30Z", "type": "commit"}, {"oid": "40cbd77066fdc3704d3a70e659e840a64d512863", "url": "https://github.com/apache/skywalking/commit/40cbd77066fdc3704d3a70e659e840a64d512863", "message": "Merge commit '8e99d189d743400f7725574130e10c9f212318d1' into grpc", "committedDate": "2020-01-08T03:12:58Z", "type": "commit"}, {"oid": "577efd28872aa8a851837e1db1677d12f5d97b21", "url": "https://github.com/apache/skywalking/commit/577efd28872aa8a851837e1db1677d12f5d97b21", "message": "Add grpc error test (#1)\n\n* Add grpc on error test\r\n\r\n* Fixed bugs\r\n\r\n* Add license and fix bugs\r\n\r\n* Fixed bugs\r\n\r\n* Fix bugs\r\n\r\n* Override expect data\r\n\r\n* Update expectedData.yaml\r\n\r\nCo-authored-by: Kanro <higan@live.cn>", "committedDate": "2020-01-11T17:10:03Z", "type": "commit"}, {"oid": "6547afa486ec1c3b675abc8b5d647ae05ad1ebd5", "url": "https://github.com/apache/skywalking/commit/6547afa486ec1c3b675abc8b5d647ae05ad1ebd5", "message": "Merge branch 'master' into grpc", "committedDate": "2020-01-12T01:28:58Z", "type": "commit"}, {"oid": "157a649655118520ee448790831ab7f74f1ca3a7", "url": "https://github.com/apache/skywalking/commit/157a649655118520ee448790831ab7f74f1ca3a7", "message": "Add doc for gRPC configs", "committedDate": "2020-01-12T16:21:09Z", "type": "commit"}, {"oid": "722f77a3c9fb7cb92886687ce6d2efb93fbb3b4c", "url": "https://github.com/apache/skywalking/commit/722f77a3c9fb7cb92886687ce6d2efb93fbb3b4c", "message": "Merge remote-tracking branch 'apache/master' into trace-ignore", "committedDate": "2020-01-12T16:21:21Z", "type": "commit"}, {"oid": "7ff8b91c7fb39dc2e86fb7a0cef5215da4b6b5cf", "url": "https://github.com/apache/skywalking/commit/7ff8b91c7fb39dc2e86fb7a0cef5215da4b6b5cf", "message": "Merge branch 'master' into grpc", "committedDate": "2020-01-12T23:38:52Z", "type": "commit"}, {"oid": "9f3c9e1ab09f0cb23cf936d1ca9fd8f098bfb00d", "url": "https://github.com/apache/skywalking/commit/9f3c9e1ab09f0cb23cf936d1ca9fd8f098bfb00d", "message": "Remove simple tracing", "committedDate": "2020-01-13T13:58:03Z", "type": "commit"}, {"oid": "b559dbb7acaddf1ec9e26acee85347e04ae9bcd3", "url": "https://github.com/apache/skywalking/commit/b559dbb7acaddf1ec9e26acee85347e04ae9bcd3", "message": "Merge branch 'master' into grpc", "committedDate": "2020-01-13T15:10:25Z", "type": "commit"}, {"oid": "5a1d453a53bba15397d708d6558bdf28500320ae", "url": "https://github.com/apache/skywalking/commit/5a1d453a53bba15397d708d6558bdf28500320ae", "message": "Merge branch 'master' into grpc", "committedDate": "2020-01-15T14:40:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjkxMTYyMQ==", "url": "https://github.com/apache/skywalking/pull/4177#discussion_r366911621", "bodyText": "Do you forget to remove all these?", "author": "wu-sheng", "createdAt": "2020-01-15T14:41:08Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "diffHunk": "@@ -388,5 +390,26 @@\n              */\n             public static int HTTP_PARAMS_LENGTH_THRESHOLD = 1024;\n         }\n+\n+        public static class Grpc {\n+            /**\n+             * If this config is false, only client spans of peer which configured in {@link Grpc#INCLUDED_CLIENT_TRACING_PEERS}\n+             * will be collected. In this mode {@link Grpc#EXCLUDED_CLIENT_TRACING_PEERS} will override {@link Grpc#INCLUDED_CLIENT_TRACING_PEERS}.\n+             * <p>\n+             * If this config is true, only client spans of peer which configured in {@link Grpc#EXCLUDED_CLIENT_TRACING_PEERS}\n+             * will not be collected. In this mode {@link Grpc#INCLUDED_CLIENT_TRACING_PEERS} will override {@link Grpc#EXCLUDED_CLIENT_TRACING_PEERS}.\n+             */\n+            public static boolean DEFAULT_CLIENT_TRACING_ENABLE = false;\n+\n+            /**\n+             * Included client tracing peers. gRPC plugin will collect client spans of configured config.\n+             */\n+            public static List<String> INCLUDED_CLIENT_TRACING_PEERS = new LinkedList<>();\n+\n+            /**\n+             * Excluded client tracing peers. gRPC plugin will not collect client spans of configured config.\n+             */\n+            public static List<String> EXCLUDED_CLIENT_TRACING_PEERS = new LinkedList<>();", "originalCommit": "5a1d453a53bba15397d708d6558bdf28500320ae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjkxMzM4NQ==", "url": "https://github.com/apache/skywalking/pull/4177#discussion_r366913385", "bodyText": "When will remove this from the RuntimeContext?", "author": "wu-sheng", "createdAt": "2020-01-15T14:44:21Z", "path": "apm-sniffer/apm-sdk-plugin/grpc-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/grpc/v1/client/BlockingCallInterceptor.java", "diffHunk": "@@ -16,43 +16,48 @@\n  *\n  */\n \n-package org.apache.skywalking.apm.plugin.grpc.v1;\n+package org.apache.skywalking.apm.plugin.grpc.v1.client;\n \n import io.grpc.Channel;\n import io.grpc.MethodDescriptor;\n-import java.lang.reflect.Method;\n import org.apache.skywalking.apm.agent.core.context.ContextManager;\n import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.StaticMethodsAroundInterceptor;\n import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n \n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.plugin.grpc.v1.Constants.BLOCKING_CALL_EXIT_SPAN;\n import static org.apache.skywalking.apm.plugin.grpc.v1.OperationNameFormatUtil.formatOperationName;\n \n /**\n- * @author zhang xin\n+ * @author zhang xin, kanro\n  */\n public class BlockingCallInterceptor implements StaticMethodsAroundInterceptor {\n \n-    @Override public void beforeMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes,\n-        MethodInterceptResult result) {\n-        Channel channel = (Channel)allArguments[0];\n-        MethodDescriptor methodDescriptor = (MethodDescriptor)allArguments[1];\n+    @Override\n+    public void beforeMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes,\n+                             MethodInterceptResult result) {\n+        Channel channel = (Channel) allArguments[0];\n+        MethodDescriptor<?, ?> methodDescriptor = (MethodDescriptor<?, ?>) allArguments[1];\n         final AbstractSpan span = ContextManager.createExitSpan(formatOperationName(methodDescriptor), channel.authority());\n         span.setComponent(ComponentsDefine.GRPC);\n-        SpanLayer.asRPCFramework(span);\n+        span.setLayer(SpanLayer.RPC_FRAMEWORK);\n+        ContextManager.getRuntimeContext().put(BLOCKING_CALL_EXIT_SPAN, span);", "originalCommit": "5a1d453a53bba15397d708d6558bdf28500320ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjkxNDA1Mg==", "url": "https://github.com/apache/skywalking/pull/4177#discussion_r366914052", "bodyText": "If not, whether the multiple RPCs will trigger dirty read?", "author": "wu-sheng", "createdAt": "2020-01-15T14:45:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjkxMzM4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI2MTM3MA==", "url": "https://github.com/apache/skywalking/pull/4177#discussion_r367261370", "bodyText": "Yes, got it, I will fix it later", "author": "devkanro", "createdAt": "2020-01-16T07:12:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjkxMzM4NQ=="}], "type": "inlineReview"}, {"oid": "aef265d3b025888448034bc621c8074074e3ea55", "url": "https://github.com/apache/skywalking/commit/aef265d3b025888448034bc621c8074074e3ea55", "message": "Merge branch 'master' into grpc", "committedDate": "2020-01-16T08:36:26Z", "type": "commit"}, {"oid": "caaa969aef3b36f686662665fefe1f08cf0c255e", "url": "https://github.com/apache/skywalking/commit/caaa969aef3b36f686662665fefe1f08cf0c255e", "message": "Remove runtime context", "committedDate": "2020-01-16T12:15:25Z", "type": "commit"}, {"oid": "5ca626e57d811aae3b792beeb8e35511400d4d41", "url": "https://github.com/apache/skywalking/commit/5ca626e57d811aae3b792beeb8e35511400d4d41", "message": "Merge branch 'master' into grpc", "committedDate": "2020-01-16T12:52:10Z", "type": "commit"}, {"oid": "9d7741944d3390109e4d30e6f9c05b8a5cb6171a", "url": "https://github.com/apache/skywalking/commit/9d7741944d3390109e4d30e6f9c05b8a5cb6171a", "message": "Update test case", "committedDate": "2020-01-17T16:36:27Z", "type": "commit"}, {"oid": "407e318bc78066ec9b13081d3f491dab7b8ced6b", "url": "https://github.com/apache/skywalking/commit/407e318bc78066ec9b13081d3f491dab7b8ced6b", "message": "Update test case", "committedDate": "2020-01-17T16:38:34Z", "type": "commit"}, {"oid": "047b6f4ae74d185b92e1de96ce0c96d48231dcea", "url": "https://github.com/apache/skywalking/commit/047b6f4ae74d185b92e1de96ce0c96d48231dcea", "message": "Fix format", "committedDate": "2020-01-17T17:25:54Z", "type": "commit"}, {"oid": "0572360550ff4ec39e2609425ae1f14384557543", "url": "https://github.com/apache/skywalking/commit/0572360550ff4ec39e2609425ae1f14384557543", "message": "Fix bugs", "committedDate": "2020-01-17T18:05:16Z", "type": "commit"}, {"oid": "97fc457c8005c7d6977f3c00198442b4dce923ca", "url": "https://github.com/apache/skywalking/commit/97fc457c8005c7d6977f3c00198442b4dce923ca", "message": "Fix error type", "committedDate": "2020-01-18T01:56:32Z", "type": "commit"}, {"oid": "577c28546feddd6d2ec8ddedd53df536ba7079a7", "url": "https://github.com/apache/skywalking/commit/577c28546feddd6d2ec8ddedd53df536ba7079a7", "message": "Final", "committedDate": "2020-01-18T13:21:12Z", "type": "commit"}, {"oid": "821cad2633b170020f6b90d2046350575744546f", "url": "https://github.com/apache/skywalking/commit/821cad2633b170020f6b90d2046350575744546f", "message": "Fix format", "committedDate": "2020-01-18T15:07:45Z", "type": "commit"}, {"oid": "d44d145bce7e75063b89b28490a413968346fe06", "url": "https://github.com/apache/skywalking/commit/d44d145bce7e75063b89b28490a413968346fe06", "message": "Merge branch 'master' into grpc", "committedDate": "2020-01-19T01:00:51Z", "type": "commit"}, {"oid": "7de2df7e38d1ce34646f5ddf16df9b99dcb85cb4", "url": "https://github.com/apache/skywalking/commit/7de2df7e38d1ce34646f5ddf16df9b99dcb85cb4", "message": "Fix format", "committedDate": "2020-01-19T02:15:09Z", "type": "commit"}, {"oid": "85f4c35e56875de311ce67869e77a6090720d724", "url": "https://github.com/apache/skywalking/commit/85f4c35e56875de311ce67869e77a6090720d724", "message": "Fix format", "committedDate": "2020-01-19T02:54:01Z", "type": "commit"}, {"oid": "6cdce30f866768ea777b06b1e5445e8ee69cc2b4", "url": "https://github.com/apache/skywalking/commit/6cdce30f866768ea777b06b1e5445e8ee69cc2b4", "message": "Fix format", "committedDate": "2020-01-19T07:03:41Z", "type": "commit"}, {"oid": "1b191ddbde4f34aec1406bb230e654a945d9b933", "url": "https://github.com/apache/skywalking/commit/1b191ddbde4f34aec1406bb230e654a945d9b933", "message": "Try", "committedDate": "2020-01-19T08:29:26Z", "type": "commit"}, {"oid": "00a5ccf974dc221243b0f76258e1eb5f36cbc31a", "url": "https://github.com/apache/skywalking/commit/00a5ccf974dc221243b0f76258e1eb5f36cbc31a", "message": "Try again", "committedDate": "2020-01-19T10:00:41Z", "type": "commit"}, {"oid": "c377e1281a05fa8d3c5de8e7ab63df99806f2354", "url": "https://github.com/apache/skywalking/commit/c377e1281a05fa8d3c5de8e7ab63df99806f2354", "message": "Fix format", "committedDate": "2020-01-19T11:27:45Z", "type": "commit"}, {"oid": "e541130139cba235d90ad176e91ed3a6685aee2b", "url": "https://github.com/apache/skywalking/commit/e541130139cba235d90ad176e91ed3a6685aee2b", "message": "Update expectedData.yaml", "committedDate": "2020-01-19T15:33:16Z", "type": "commit"}, {"oid": "93cdc2a0e658e44fef7fc20c0cb388a1356417cd", "url": "https://github.com/apache/skywalking/commit/93cdc2a0e658e44fef7fc20c0cb388a1356417cd", "message": "Merge pull request #2 from GuoDuanLZ/grpc\n\nUpdate test case", "committedDate": "2020-01-20T03:16:39Z", "type": "commit"}, {"oid": "416582ea553217f38315b03118467965b7470b55", "url": "https://github.com/apache/skywalking/commit/416582ea553217f38315b03118467965b7470b55", "message": "Merge branch 'master' into grpc", "committedDate": "2020-01-20T06:01:02Z", "type": "commit"}, {"oid": "d0ef0dff770e4342ad98a643eb19b9ccd5a5fb69", "url": "https://github.com/apache/skywalking/commit/d0ef0dff770e4342ad98a643eb19b9ccd5a5fb69", "message": "Merge branch 'master' into grpc", "committedDate": "2020-01-20T07:27:17Z", "type": "commit"}, {"oid": "394adec0dfd00cf744df06a299079eba17e9e0e3", "url": "https://github.com/apache/skywalking/commit/394adec0dfd00cf744df06a299079eba17e9e0e3", "message": "Merge branch 'master' into grpc", "committedDate": "2020-01-21T06:05:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA5OTc2Ng==", "url": "https://github.com/apache/skywalking/pull/4177#discussion_r371099766", "bodyText": "This comment seems not right. Do you miss the changes of old version?", "author": "wu-sheng", "createdAt": "2020-01-27T07:59:37Z", "path": "apm-sniffer/apm-sdk-plugin/grpc-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/grpc/v1/client/TracingClientCall.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.grpc.v1.client;\n+\n+import io.grpc.*;\n+import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.ContextSnapshot;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.apache.skywalking.apm.plugin.grpc.v1.OperationNameFormatUtil;\n+\n+import javax.annotation.Nullable;\n+\n+import static org.apache.skywalking.apm.plugin.grpc.v1.Constants.*;\n+import static org.apache.skywalking.apm.plugin.grpc.v1.OperationNameFormatUtil.formatOperationName;\n+\n+/**\n+ * Fully client tracing for external gRPC server which not be registered in the same Skywalking server.", "originalCommit": "394adec0dfd00cf744df06a299079eba17e9e0e3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEwMjc5Ng==", "url": "https://github.com/apache/skywalking/pull/4177#discussion_r371102796", "bodyText": "case UNKNOWN, case INTERNAL and default seem to have the same logic. What is the difference?", "author": "wu-sheng", "createdAt": "2020-01-27T08:09:46Z", "path": "apm-sniffer/apm-sdk-plugin/grpc-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/grpc/v1/server/TracingServerCall.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.grpc.v1.server;\n+\n+import io.grpc.ForwardingServerCall;\n+import io.grpc.Metadata;\n+import io.grpc.ServerCall;\n+import io.grpc.Status;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.ContextSnapshot;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.apache.skywalking.apm.plugin.grpc.v1.OperationNameFormatUtil;\n+\n+import static org.apache.skywalking.apm.plugin.grpc.v1.Constants.*;\n+\n+/**\n+ * @author wang zheng, kanro\n+ */\n+public class TracingServerCall<REQUEST, RESPONSE> extends ForwardingServerCall.SimpleForwardingServerCall<REQUEST, RESPONSE> {\n+\n+    private final String operationPrefix;\n+    private final ContextSnapshot contextSnapshot;\n+\n+    protected TracingServerCall(ServerCall<REQUEST, RESPONSE> delegate, ContextSnapshot contextSnapshot) {\n+        super(delegate);\n+        this.operationPrefix = OperationNameFormatUtil.formatOperationName(delegate.getMethodDescriptor()) + SERVER;\n+        this.contextSnapshot = contextSnapshot;\n+    }\n+\n+    @Override\n+    public void sendMessage(RESPONSE message) {\n+        // We just create the request on message span for server stream calls.\n+        if (!getMethodDescriptor().getType().serverSendsOneMessage()) {\n+            try {\n+                final AbstractSpan span = ContextManager.createLocalSpan(operationPrefix + RESPONSE_ON_MESSAGE_OPERATION_NAME);\n+                span.setComponent(ComponentsDefine.GRPC);\n+                span.setLayer(SpanLayer.RPC_FRAMEWORK);\n+                ContextManager.continued(contextSnapshot);\n+                super.sendMessage(message);\n+            } catch (Throwable t) {\n+                ContextManager.activeSpan().errorOccurred().log(t);\n+                throw t;\n+            } finally {\n+                ContextManager.stopSpan();\n+            }\n+        } else {\n+            super.sendMessage(message);\n+        }\n+    }\n+\n+    @Override\n+    public void close(Status status, Metadata trailers) {\n+        try {\n+            final AbstractSpan span = ContextManager.createLocalSpan(operationPrefix + RESPONSE_ON_CLOSE_OPERATION_NAME);\n+            span.setComponent(ComponentsDefine.GRPC);\n+            span.setLayer(SpanLayer.RPC_FRAMEWORK);\n+            ContextManager.continued(contextSnapshot);\n+\n+            switch (status.getCode()) {\n+                case OK:\n+                    break;\n+                // UNKNOWN/INTERNAL status code will case error in this span.\n+                // Those status code means some unexpected error occurred in server.\n+                // Similar to 5XX in HTTP status.\n+                case UNKNOWN:\n+                case INTERNAL:\n+                    if (status.getCause() == null) {\n+                        span.errorOccurred().log(status.asRuntimeException());\n+                    } else {\n+                        span.errorOccurred().log(status.getCause());\n+                    }\n+                    break;\n+                // Other status code means some predictable error occurred in server.\n+                // Like PERMISSION_DENIED or UNAUTHENTICATED somethings.\n+                // Similar to 4XX in HTTP status.\n+                default:", "originalCommit": "394adec0dfd00cf744df06a299079eba17e9e0e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQwMzMzMQ==", "url": "https://github.com/apache/skywalking/pull/4177#discussion_r371403331", "bodyText": "UNKNOWN and INTERNAL is similar to the 5xx errors in HTTP, it must case span error even status has no cause exception.\ndefault(others) is similar to the 4xx errors in HTTP, we just case error when status has cause exception for user debugging.", "author": "devkanro", "createdAt": "2020-01-27T18:20:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEwMjc5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEwNDYxOQ==", "url": "https://github.com/apache/skywalking/pull/4177#discussion_r371104619", "bodyText": "You should add a new try/final in this code block, and keep super#close in the final.", "author": "wu-sheng", "createdAt": "2020-01-27T08:15:35Z", "path": "apm-sniffer/apm-sdk-plugin/grpc-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/grpc/v1/server/TracingServerCall.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.grpc.v1.server;\n+\n+import io.grpc.ForwardingServerCall;\n+import io.grpc.Metadata;\n+import io.grpc.ServerCall;\n+import io.grpc.Status;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.ContextSnapshot;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.apache.skywalking.apm.plugin.grpc.v1.OperationNameFormatUtil;\n+\n+import static org.apache.skywalking.apm.plugin.grpc.v1.Constants.*;\n+\n+/**\n+ * @author wang zheng, kanro\n+ */\n+public class TracingServerCall<REQUEST, RESPONSE> extends ForwardingServerCall.SimpleForwardingServerCall<REQUEST, RESPONSE> {\n+\n+    private final String operationPrefix;\n+    private final ContextSnapshot contextSnapshot;\n+\n+    protected TracingServerCall(ServerCall<REQUEST, RESPONSE> delegate, ContextSnapshot contextSnapshot) {\n+        super(delegate);\n+        this.operationPrefix = OperationNameFormatUtil.formatOperationName(delegate.getMethodDescriptor()) + SERVER;\n+        this.contextSnapshot = contextSnapshot;\n+    }\n+\n+    @Override\n+    public void sendMessage(RESPONSE message) {\n+        // We just create the request on message span for server stream calls.\n+        if (!getMethodDescriptor().getType().serverSendsOneMessage()) {\n+            try {\n+                final AbstractSpan span = ContextManager.createLocalSpan(operationPrefix + RESPONSE_ON_MESSAGE_OPERATION_NAME);\n+                span.setComponent(ComponentsDefine.GRPC);\n+                span.setLayer(SpanLayer.RPC_FRAMEWORK);\n+                ContextManager.continued(contextSnapshot);\n+                super.sendMessage(message);\n+            } catch (Throwable t) {\n+                ContextManager.activeSpan().errorOccurred().log(t);\n+                throw t;\n+            } finally {\n+                ContextManager.stopSpan();\n+            }\n+        } else {\n+            super.sendMessage(message);\n+        }\n+    }\n+\n+    @Override\n+    public void close(Status status, Metadata trailers) {\n+        try {\n+            final AbstractSpan span = ContextManager.createLocalSpan(operationPrefix + RESPONSE_ON_CLOSE_OPERATION_NAME);\n+            span.setComponent(ComponentsDefine.GRPC);\n+            span.setLayer(SpanLayer.RPC_FRAMEWORK);\n+            ContextManager.continued(contextSnapshot);\n+\n+            switch (status.getCode()) {\n+                case OK:\n+                    break;\n+                // UNKNOWN/INTERNAL status code will case error in this span.\n+                // Those status code means some unexpected error occurred in server.\n+                // Similar to 5XX in HTTP status.\n+                case UNKNOWN:\n+                case INTERNAL:\n+                    if (status.getCause() == null) {\n+                        span.errorOccurred().log(status.asRuntimeException());\n+                    } else {\n+                        span.errorOccurred().log(status.getCause());\n+                    }\n+                    break;\n+                // Other status code means some predictable error occurred in server.\n+                // Like PERMISSION_DENIED or UNAUTHENTICATED somethings.\n+                // Similar to 4XX in HTTP status.\n+                default:\n+                    // But if the status still has cause exception, we will log it too.\n+                    if (status.getCause() != null) {\n+                        span.errorOccurred().log(status.getCause());\n+                    }\n+                    break;\n+            }\n+            Tags.STATUS_CODE.set(span, status.getCode().name());\n+            super.close(status, trailers);", "originalCommit": "394adec0dfd00cf744df06a299079eba17e9e0e3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEwNDkyMg==", "url": "https://github.com/apache/skywalking/pull/4177#discussion_r371104922", "bodyText": "A similar suggestion, try/final should be added here.", "author": "wu-sheng", "createdAt": "2020-01-27T08:16:33Z", "path": "apm-sniffer/apm-sdk-plugin/grpc-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/grpc/v1/server/TracingServerCallListener.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.grpc.v1.server;\n+\n+import io.grpc.ForwardingServerCallListener;\n+import io.grpc.MethodDescriptor;\n+import io.grpc.ServerCall;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.ContextSnapshot;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.apache.skywalking.apm.plugin.grpc.v1.OperationNameFormatUtil;\n+\n+import static org.apache.skywalking.apm.plugin.grpc.v1.Constants.*;\n+\n+/**\n+ * @author wang zheng, kanro\n+ */\n+public class TracingServerCallListener<REQUEST> extends ForwardingServerCallListener.SimpleForwardingServerCallListener<REQUEST> {\n+\n+    private final ContextSnapshot contextSnapshot;\n+    private final MethodDescriptor.MethodType methodType;\n+    private final String operationPrefix;\n+\n+    protected TracingServerCallListener(ServerCall.Listener<REQUEST> delegate, MethodDescriptor<REQUEST, ?> descriptor,\n+                                        ContextSnapshot contextSnapshot) {\n+        super(delegate);\n+        this.contextSnapshot = contextSnapshot;\n+        this.methodType = descriptor.getType();\n+        this.operationPrefix = OperationNameFormatUtil.formatOperationName(descriptor) + SERVER;\n+    }\n+\n+    @Override\n+    public void onMessage(REQUEST message) {\n+        // We just create the request on message span for client stream calls.\n+        if (!methodType.clientSendsOneMessage()) {\n+            try {\n+                final AbstractSpan span = ContextManager.createLocalSpan(operationPrefix + REQUEST_ON_MESSAGE_OPERATION_NAME);\n+                span.setComponent(ComponentsDefine.GRPC);\n+                span.setLayer(SpanLayer.RPC_FRAMEWORK);\n+                ContextManager.continued(contextSnapshot);\n+                super.onMessage(message);", "originalCommit": "394adec0dfd00cf744df06a299079eba17e9e0e3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEwNTAxMw==", "url": "https://github.com/apache/skywalking/pull/4177#discussion_r371105013", "bodyText": "A similar suggestion, try/final should be added here.", "author": "wu-sheng", "createdAt": "2020-01-27T08:16:48Z", "path": "apm-sniffer/apm-sdk-plugin/grpc-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/grpc/v1/server/TracingServerCallListener.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.grpc.v1.server;\n+\n+import io.grpc.ForwardingServerCallListener;\n+import io.grpc.MethodDescriptor;\n+import io.grpc.ServerCall;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.ContextSnapshot;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.apache.skywalking.apm.plugin.grpc.v1.OperationNameFormatUtil;\n+\n+import static org.apache.skywalking.apm.plugin.grpc.v1.Constants.*;\n+\n+/**\n+ * @author wang zheng, kanro\n+ */\n+public class TracingServerCallListener<REQUEST> extends ForwardingServerCallListener.SimpleForwardingServerCallListener<REQUEST> {\n+\n+    private final ContextSnapshot contextSnapshot;\n+    private final MethodDescriptor.MethodType methodType;\n+    private final String operationPrefix;\n+\n+    protected TracingServerCallListener(ServerCall.Listener<REQUEST> delegate, MethodDescriptor<REQUEST, ?> descriptor,\n+                                        ContextSnapshot contextSnapshot) {\n+        super(delegate);\n+        this.contextSnapshot = contextSnapshot;\n+        this.methodType = descriptor.getType();\n+        this.operationPrefix = OperationNameFormatUtil.formatOperationName(descriptor) + SERVER;\n+    }\n+\n+    @Override\n+    public void onMessage(REQUEST message) {\n+        // We just create the request on message span for client stream calls.\n+        if (!methodType.clientSendsOneMessage()) {\n+            try {\n+                final AbstractSpan span = ContextManager.createLocalSpan(operationPrefix + REQUEST_ON_MESSAGE_OPERATION_NAME);\n+                span.setComponent(ComponentsDefine.GRPC);\n+                span.setLayer(SpanLayer.RPC_FRAMEWORK);\n+                ContextManager.continued(contextSnapshot);\n+                super.onMessage(message);\n+            } catch (Throwable t) {\n+                ContextManager.activeSpan().errorOccurred().log(t);\n+                throw t;\n+            } finally {\n+                ContextManager.stopSpan();\n+            }\n+        } else {\n+            super.onMessage(message);\n+        }\n+    }\n+\n+    @Override\n+    public void onCancel() {\n+        try {\n+            final AbstractSpan span = ContextManager.createLocalSpan(operationPrefix + REQUEST_ON_CANCEL_OPERATION_NAME);\n+            span.setComponent(ComponentsDefine.GRPC);\n+            span.setLayer(SpanLayer.RPC_FRAMEWORK);\n+            ContextManager.continued(contextSnapshot);\n+            super.onCancel();", "originalCommit": "394adec0dfd00cf744df06a299079eba17e9e0e3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEwNTA5Mw==", "url": "https://github.com/apache/skywalking/pull/4177#discussion_r371105093", "bodyText": "A similar suggestion, try/final should be added here.", "author": "wu-sheng", "createdAt": "2020-01-27T08:17:07Z", "path": "apm-sniffer/apm-sdk-plugin/grpc-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/grpc/v1/server/TracingServerCallListener.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.grpc.v1.server;\n+\n+import io.grpc.ForwardingServerCallListener;\n+import io.grpc.MethodDescriptor;\n+import io.grpc.ServerCall;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.ContextSnapshot;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.apache.skywalking.apm.plugin.grpc.v1.OperationNameFormatUtil;\n+\n+import static org.apache.skywalking.apm.plugin.grpc.v1.Constants.*;\n+\n+/**\n+ * @author wang zheng, kanro\n+ */\n+public class TracingServerCallListener<REQUEST> extends ForwardingServerCallListener.SimpleForwardingServerCallListener<REQUEST> {\n+\n+    private final ContextSnapshot contextSnapshot;\n+    private final MethodDescriptor.MethodType methodType;\n+    private final String operationPrefix;\n+\n+    protected TracingServerCallListener(ServerCall.Listener<REQUEST> delegate, MethodDescriptor<REQUEST, ?> descriptor,\n+                                        ContextSnapshot contextSnapshot) {\n+        super(delegate);\n+        this.contextSnapshot = contextSnapshot;\n+        this.methodType = descriptor.getType();\n+        this.operationPrefix = OperationNameFormatUtil.formatOperationName(descriptor) + SERVER;\n+    }\n+\n+    @Override\n+    public void onMessage(REQUEST message) {\n+        // We just create the request on message span for client stream calls.\n+        if (!methodType.clientSendsOneMessage()) {\n+            try {\n+                final AbstractSpan span = ContextManager.createLocalSpan(operationPrefix + REQUEST_ON_MESSAGE_OPERATION_NAME);\n+                span.setComponent(ComponentsDefine.GRPC);\n+                span.setLayer(SpanLayer.RPC_FRAMEWORK);\n+                ContextManager.continued(contextSnapshot);\n+                super.onMessage(message);\n+            } catch (Throwable t) {\n+                ContextManager.activeSpan().errorOccurred().log(t);\n+                throw t;\n+            } finally {\n+                ContextManager.stopSpan();\n+            }\n+        } else {\n+            super.onMessage(message);\n+        }\n+    }\n+\n+    @Override\n+    public void onCancel() {\n+        try {\n+            final AbstractSpan span = ContextManager.createLocalSpan(operationPrefix + REQUEST_ON_CANCEL_OPERATION_NAME);\n+            span.setComponent(ComponentsDefine.GRPC);\n+            span.setLayer(SpanLayer.RPC_FRAMEWORK);\n+            ContextManager.continued(contextSnapshot);\n+            super.onCancel();\n+        } catch (Throwable t) {\n+            ContextManager.activeSpan().errorOccurred().log(t);\n+            throw t;\n+        } finally {\n+            ContextManager.stopSpan();\n+        }\n+    }\n+\n+    @Override\n+    public void onHalfClose() {\n+        try {\n+            final AbstractSpan span = ContextManager.createLocalSpan(operationPrefix + REQUEST_ON_COMPLETE_OPERATION_NAME);\n+            span.setComponent(ComponentsDefine.GRPC);\n+            span.setLayer(SpanLayer.RPC_FRAMEWORK);\n+            ContextManager.continued(contextSnapshot);\n+            super.onHalfClose();", "originalCommit": "394adec0dfd00cf744df06a299079eba17e9e0e3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c601e1d53e11d5d50b877d8ce93088f6a4d10a01", "url": "https://github.com/apache/skywalking/commit/c601e1d53e11d5d50b877d8ce93088f6a4d10a01", "message": "Fix comments", "committedDate": "2020-01-27T19:46:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0NTY3Mg==", "url": "https://github.com/apache/skywalking/pull/4177#discussion_r371645672", "bodyText": "What is this catch for? I can't see any code happens except the plugin logic. We should not log an error caused by our own codes, rather than users.", "author": "wu-sheng", "createdAt": "2020-01-28T07:41:50Z", "path": "apm-sniffer/apm-sdk-plugin/grpc-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/grpc/v1/server/TracingServerCall.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.grpc.v1.server;\n+\n+import io.grpc.ForwardingServerCall;\n+import io.grpc.Metadata;\n+import io.grpc.ServerCall;\n+import io.grpc.Status;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.ContextSnapshot;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.apache.skywalking.apm.plugin.grpc.v1.OperationNameFormatUtil;\n+\n+import static org.apache.skywalking.apm.plugin.grpc.v1.Constants.*;\n+\n+/**\n+ * @author wang zheng, kanro\n+ */\n+public class TracingServerCall<REQUEST, RESPONSE> extends ForwardingServerCall.SimpleForwardingServerCall<REQUEST, RESPONSE> {\n+\n+    private final String operationPrefix;\n+    private final ContextSnapshot contextSnapshot;\n+\n+    protected TracingServerCall(ServerCall<REQUEST, RESPONSE> delegate, ContextSnapshot contextSnapshot) {\n+        super(delegate);\n+        this.operationPrefix = OperationNameFormatUtil.formatOperationName(delegate.getMethodDescriptor()) + SERVER;\n+        this.contextSnapshot = contextSnapshot;\n+    }\n+\n+    @Override\n+    public void sendMessage(RESPONSE message) {\n+        // We just create the request on message span for server stream calls.\n+        if (!getMethodDescriptor().getType().serverSendsOneMessage()) {\n+            try {\n+                final AbstractSpan span = ContextManager.createLocalSpan(operationPrefix + RESPONSE_ON_MESSAGE_OPERATION_NAME);\n+                span.setComponent(ComponentsDefine.GRPC);\n+                span.setLayer(SpanLayer.RPC_FRAMEWORK);\n+                ContextManager.continued(contextSnapshot);\n+            } catch (Throwable t) {\n+                ContextManager.activeSpan().errorOccurred().log(t);\n+                throw t;\n+            } finally {\n+                super.sendMessage(message);\n+                ContextManager.stopSpan();\n+            }\n+        } else {\n+            super.sendMessage(message);\n+        }\n+    }\n+\n+    @Override\n+    public void close(Status status, Metadata trailers) {\n+        try {\n+            final AbstractSpan span = ContextManager.createLocalSpan(operationPrefix + RESPONSE_ON_CLOSE_OPERATION_NAME);\n+            span.setComponent(ComponentsDefine.GRPC);\n+            span.setLayer(SpanLayer.RPC_FRAMEWORK);\n+            ContextManager.continued(contextSnapshot);\n+\n+            switch (status.getCode()) {\n+                case OK:\n+                    break;\n+                // UNKNOWN/INTERNAL status code will case error in this span.\n+                // Those status code means some unexpected error occurred in server.\n+                // Similar to 5XX in HTTP status.\n+                case UNKNOWN:\n+                case INTERNAL:\n+                    if (status.getCause() == null) {\n+                        span.errorOccurred().log(status.asRuntimeException());\n+                    } else {\n+                        span.errorOccurred().log(status.getCause());\n+                    }\n+                    break;\n+                // Other status code means some predictable error occurred in server.\n+                // Like PERMISSION_DENIED or UNAUTHENTICATED somethings.\n+                // Similar to 4XX in HTTP status.\n+                default:\n+                    // But if the status still has cause exception, we will log it too.\n+                    if (status.getCause() != null) {\n+                        span.errorOccurred().log(status.getCause());\n+                    }\n+                    break;\n+            }\n+            Tags.STATUS_CODE.set(span, status.getCode().name());\n+        } catch (Throwable t) {", "originalCommit": "c601e1d53e11d5d50b877d8ce93088f6a4d10a01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0ODIxNA==", "url": "https://github.com/apache/skywalking/pull/4177#discussion_r371648214", "bodyText": "Please follow the next comment.", "author": "wu-sheng", "createdAt": "2020-01-28T07:49:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0NTY3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0Nzc4MA==", "url": "https://github.com/apache/skywalking/pull/4177#discussion_r371647780", "bodyText": "As I last comment, please just try/final, but not catch. I just want to guarantee our plugins would not break the original codes even our plugins have bugs.\nPlease recheck the codes based on this rule.", "author": "wu-sheng", "createdAt": "2020-01-28T07:48:14Z", "path": "apm-sniffer/apm-sdk-plugin/grpc-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/grpc/v1/server/TracingServerCallListener.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.grpc.v1.server;\n+\n+import io.grpc.ForwardingServerCallListener;\n+import io.grpc.MethodDescriptor;\n+import io.grpc.ServerCall;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.ContextSnapshot;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.apache.skywalking.apm.plugin.grpc.v1.OperationNameFormatUtil;\n+\n+import static org.apache.skywalking.apm.plugin.grpc.v1.Constants.*;\n+\n+/**\n+ * @author wang zheng, kanro\n+ */\n+public class TracingServerCallListener<REQUEST> extends ForwardingServerCallListener.SimpleForwardingServerCallListener<REQUEST> {\n+\n+    private final ContextSnapshot contextSnapshot;\n+    private final MethodDescriptor.MethodType methodType;\n+    private final String operationPrefix;\n+\n+    protected TracingServerCallListener(ServerCall.Listener<REQUEST> delegate, MethodDescriptor<REQUEST, ?> descriptor,\n+                                        ContextSnapshot contextSnapshot) {\n+        super(delegate);\n+        this.contextSnapshot = contextSnapshot;\n+        this.methodType = descriptor.getType();\n+        this.operationPrefix = OperationNameFormatUtil.formatOperationName(descriptor) + SERVER;\n+    }\n+\n+    @Override\n+    public void onMessage(REQUEST message) {\n+        // We just create the request on message span for client stream calls.\n+        if (!methodType.clientSendsOneMessage()) {\n+            try {\n+                final AbstractSpan span = ContextManager.createLocalSpan(operationPrefix + REQUEST_ON_MESSAGE_OPERATION_NAME);\n+                span.setComponent(ComponentsDefine.GRPC);\n+                span.setLayer(SpanLayer.RPC_FRAMEWORK);\n+                ContextManager.continued(contextSnapshot);\n+            } catch (Throwable t) {\n+                ContextManager.activeSpan().errorOccurred().log(t);", "originalCommit": "c601e1d53e11d5d50b877d8ce93088f6a4d10a01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2fae778db9b8f4f3b3244841a6f352314bc76df4", "url": "https://github.com/apache/skywalking/commit/2fae778db9b8f4f3b3244841a6f352314bc76df4", "message": "Fix comments", "committedDate": "2020-01-28T07:59:19Z", "type": "commit"}, {"oid": "3d11d83299211f04e4cde3e4198607e3ed2dfac8", "url": "https://github.com/apache/skywalking/commit/3d11d83299211f04e4cde3e4198607e3ed2dfac8", "message": "Fix test format", "committedDate": "2020-01-29T04:03:59Z", "type": "commit"}, {"oid": "5f00e93c0b53eb0b116bb769799c7bd650743bf1", "url": "https://github.com/apache/skywalking/commit/5f00e93c0b53eb0b116bb769799c7bd650743bf1", "message": "Merge branch 'master' into grpc", "committedDate": "2020-01-29T05:35:55Z", "type": "commit"}, {"oid": "23be98441c0aee38119d1beace166be57930fcbf", "url": "https://github.com/apache/skywalking/commit/23be98441c0aee38119d1beace166be57930fcbf", "message": "Merge branch 'master' into grpc", "committedDate": "2020-01-29T06:25:39Z", "type": "commit"}, {"oid": "9608d0733ff07bd69ac0ef9d6682fc81dd417aa0", "url": "https://github.com/apache/skywalking/commit/9608d0733ff07bd69ac0ef9d6682fc81dd417aa0", "message": "Merge branch 'master' into grpc", "committedDate": "2020-01-29T09:10:27Z", "type": "commit"}, {"oid": "a6e143e6a2ed9f33f4ae95f9741d8dca024b3ec2", "url": "https://github.com/apache/skywalking/commit/a6e143e6a2ed9f33f4ae95f9741d8dca024b3ec2", "message": "Merge branch 'master' into grpc", "committedDate": "2020-01-30T09:52:02Z", "type": "commit"}, {"oid": "d86e017fc5027fe9e86b7d39c9313999ed03e02f", "url": "https://github.com/apache/skywalking/commit/d86e017fc5027fe9e86b7d39c9313999ed03e02f", "message": "Merge branch 'master' into grpc", "committedDate": "2020-01-30T11:16:15Z", "type": "commit"}]}