{"pr_number": 4959, "pr_title": "Configmap configuration", "pr_createdAt": "2020-06-22T10:03:40Z", "pr_url": "https://github.com/apache/skywalking/pull/4959", "timeline": [{"oid": "002f4c2573399a96649a64fb399dc8b7e80cd175", "url": "https://github.com/apache/skywalking/commit/002f4c2573399a96649a64fb399dc8b7e80cd175", "message": "add SuperDataset tag for add super size dataset shards config in es", "committedDate": "2020-05-16T09:46:41Z", "type": "commit"}, {"oid": "3fead29fe6379c1784feb1e21b28888266242d69", "url": "https://github.com/apache/skywalking/commit/3fead29fe6379c1784feb1e21b28888266242d69", "message": "explain the meaning of indexShardsNumber and superDatasetIndexShardsFactor", "committedDate": "2020-05-16T13:40:59Z", "type": "commit"}, {"oid": "f84bf3ea704ac9c0b7d751d6533d8ad25ba94625", "url": "https://github.com/apache/skywalking/commit/f84bf3ea704ac9c0b7d751d6533d8ad25ba94625", "message": "code style format", "committedDate": "2020-05-17T08:19:36Z", "type": "commit"}, {"oid": "b9c0d17a67d7213e7426b1449410700079b0ac2a", "url": "https://github.com/apache/skywalking/commit/b9c0d17a67d7213e7426b1449410700079b0ac2a", "message": "Merge branch 'master' into master", "committedDate": "2020-05-17T08:35:47Z", "type": "commit"}, {"oid": "f176bdbb28a466f0683d341d7b5eb1782068438f", "url": "https://github.com/apache/skywalking/commit/f176bdbb28a466f0683d341d7b5eb1782068438f", "message": "code style format", "committedDate": "2020-05-17T08:55:05Z", "type": "commit"}, {"oid": "34df4295c55fb7343a4e3e3dc86ff417d44f0010", "url": "https://github.com/apache/skywalking/commit/34df4295c55fb7343a4e3e3dc86ff417d44f0010", "message": "code style format and change notes", "committedDate": "2020-05-17T08:59:25Z", "type": "commit"}, {"oid": "e698ddf0b0d522894d94b4f1143210afabffd8d5", "url": "https://github.com/apache/skywalking/commit/e698ddf0b0d522894d94b4f1143210afabffd8d5", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-05-20T08:01:53Z", "type": "commit"}, {"oid": "52e21a287727aeffa241533f3c208a7b9c4fb215", "url": "https://github.com/apache/skywalking/commit/52e21a287727aeffa241533f3c208a7b9c4fb215", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-05-27T13:54:44Z", "type": "commit"}, {"oid": "87cc6a2c405f3b31deaf8d5a47f718edd6c0eee5", "url": "https://github.com/apache/skywalking/commit/87cc6a2c405f3b31deaf8d5a47f718edd6c0eee5", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-06-10T04:41:26Z", "type": "commit"}, {"oid": "39669e67a8b738f7cf5030b3277ddc1668a88835", "url": "https://github.com/apache/skywalking/commit/39669e67a8b738f7cf5030b3277ddc1668a88835", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-06-22T09:47:59Z", "type": "commit"}, {"oid": "432558da1fd1c40c2d2a027981478b13429c6b55", "url": "https://github.com/apache/skywalking/commit/432558da1fd1c40c2d2a027981478b13429c6b55", "message": "add kubernetes config dynamic configmap support", "committedDate": "2020-06-22T10:02:18Z", "type": "commit"}, {"oid": "d29d7eb862c8e6a155f1b4336b73e0122e659390", "url": "https://github.com/apache/skywalking/commit/d29d7eb862c8e6a155f1b4336b73e0122e659390", "message": "Merge branch 'master' into configmap-configuration", "committedDate": "2020-06-30T06:51:26Z", "type": "commit"}, {"oid": "996ece28e60170157f117e58a38ffe4080d8b9f3", "url": "https://github.com/apache/skywalking/commit/996ece28e60170157f117e58a38ffe4080d8b9f3", "message": "add unit test", "committedDate": "2020-06-30T16:14:11Z", "type": "commit"}, {"oid": "34ed1f9afa68e107f244d7f9143c7eb9a019dff4", "url": "https://github.com/apache/skywalking/commit/34ed1f9afa68e107f244d7f9143c7eb9a019dff4", "message": "Merge branch 'configmap-configuration' of https://github.com/EvanLjp/skywalking into configmap-configuration", "committedDate": "2020-06-30T16:41:02Z", "type": "commit"}, {"oid": "a49d42216e0dc009c65463c37e5ad18a8e2e1e54", "url": "https://github.com/apache/skywalking/commit/a49d42216e0dc009c65463c37e5ad18a8e2e1e54", "message": "Merge remote-tracking branch 'upstream/master' into configmap-configuration", "committedDate": "2020-07-01T01:38:14Z", "type": "commit"}, {"oid": "88a795c6dc89bb5280ad6923d87a787f945a1634", "url": "https://github.com/apache/skywalking/commit/88a795c6dc89bb5280ad6923d87a787f945a1634", "message": "checkstyle format", "committedDate": "2020-07-01T01:38:51Z", "type": "commit"}, {"oid": "05a2312826cc0d90342ffb5536dc7e61ea5e927d", "url": "https://github.com/apache/skywalking/commit/05a2312826cc0d90342ffb5536dc7e61ea5e927d", "message": "Merge branch 'master' into configmap-configuration", "committedDate": "2020-07-03T14:16:54Z", "type": "commit"}, {"oid": "ea6b8e7f47df29365aadee9b0fa30840502b7145", "url": "https://github.com/apache/skywalking/commit/ea6b8e7f47df29365aadee9b0fa30840502b7145", "message": "add kubernetes config doc", "committedDate": "2020-07-06T15:24:01Z", "type": "commit"}, {"oid": "5e3be8f4b6d46be5d8d538d1e542bb1c89d2fcfd", "url": "https://github.com/apache/skywalking/commit/5e3be8f4b6d46be5d8d538d1e542bb1c89d2fcfd", "message": "Merge remote-tracking branch 'upstream/master' into configmap-configuration", "committedDate": "2020-07-06T15:26:08Z", "type": "commit"}, {"oid": "c21948c3e4deddd1772ca6c557b526f2ebb6ee21", "url": "https://github.com/apache/skywalking/commit/c21948c3e4deddd1772ca6c557b526f2ebb6ee21", "message": "Merge branch 'configmap-configuration' of https://github.com/EvanLjp/skywalking into configmap-configuration", "committedDate": "2020-07-06T15:26:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIxMTc1Nw==", "url": "https://github.com/apache/skywalking/pull/4959#discussion_r451211757", "bodyText": "Why enum? Typically, we recommend don't' do this, unless you have to.", "author": "wu-sheng", "createdAt": "2020-07-08T00:12:34Z", "path": "oap-server/server-configuration/configuration-configmap/src/main/java/org/apache/skywalking/oap/server/configuration/configmap/ConfigurationConfigmapInformer.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.configuration.configmap;\n+\n+import io.kubernetes.client.informer.SharedIndexInformer;\n+import io.kubernetes.client.informer.SharedInformerFactory;\n+import io.kubernetes.client.informer.cache.Lister;\n+import io.kubernetes.client.openapi.ApiClient;\n+import io.kubernetes.client.openapi.apis.CoreV1Api;\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1ConfigMapList;\n+import io.kubernetes.client.util.Config;\n+import java.io.IOException;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public enum ConfigurationConfigmapInformer {", "originalCommit": "c21948c3e4deddd1772ca6c557b526f2ebb6ee21", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyNzA4Ng==", "url": "https://github.com/apache/skywalking/pull/4959#discussion_r451227086", "bodyText": "It is supposed to be singleton and initialized once, but there are some problems, I will fix it.", "author": "EvanLjp", "createdAt": "2020-07-08T01:13:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIxMTc1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIzMTI1NA==", "url": "https://github.com/apache/skywalking/pull/4959#discussion_r451231254", "bodyText": "I hope it should a logic singleton, rather than an enum. Because you have the provider initialization process to make sure there is only one instance.", "author": "wu-sheng", "createdAt": "2020-07-08T01:29:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIxMTc1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIzNDMwNg==", "url": "https://github.com/apache/skywalking/pull/4959#discussion_r451234306", "bodyText": "yes, i agree with u ,thx for review again", "author": "EvanLjp", "createdAt": "2020-07-08T01:41:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIxMTc1Nw=="}], "type": "inlineReview"}, {"oid": "3abf5177ebc0cd5e9cb898644a97cbbefc82b8f6", "url": "https://github.com/apache/skywalking/commit/3abf5177ebc0cd5e9cb898644a97cbbefc82b8f6", "message": "add doc explain", "committedDate": "2020-07-08T01:29:30Z", "type": "commit"}, {"oid": "6dc8772014f5bbe9ba2b1f73cfc969c71ae09374", "url": "https://github.com/apache/skywalking/commit/6dc8772014f5bbe9ba2b1f73cfc969c71ae09374", "message": "convert enum as normal class", "committedDate": "2020-07-08T01:39:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0ODczNg==", "url": "https://github.com/apache/skywalking/pull/4959#discussion_r451248736", "bodyText": "Typo doAddShowdownHook -> doAddShutdownHook", "author": "kezhenxu94", "createdAt": "2020-07-08T02:38:36Z", "path": "oap-server/server-configuration/configuration-configmap/src/main/java/org/apache/skywalking/oap/server/configuration/configmap/ConfigurationConfigmapInformer.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.configuration.configmap;\n+\n+import io.kubernetes.client.informer.SharedIndexInformer;\n+import io.kubernetes.client.informer.SharedInformerFactory;\n+import io.kubernetes.client.informer.cache.Lister;\n+import io.kubernetes.client.openapi.ApiClient;\n+import io.kubernetes.client.openapi.apis.CoreV1Api;\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1ConfigMapList;\n+import io.kubernetes.client.util.Config;\n+import java.io.IOException;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class ConfigurationConfigmapInformer {\n+\n+    private static ConfigurationConfigmapInformer informer;\n+\n+    private Lister<V1ConfigMap> configMapLister;\n+\n+    private SharedInformerFactory factory;\n+\n+    private final ExecutorService executorService = Executors.newSingleThreadExecutor(r -> {\n+        Thread thread = new Thread(r, \"SKYWALKING_KUBERNETES_CONFIGURATION_INFORMER\");\n+        thread.setDaemon(true);\n+        return thread;\n+    });\n+\n+    public static ConfigurationConfigmapInformer getInstance(ConfigmapConfigurationSettings settings) {\n+        if (informer == null) {\n+            synchronized (ConfigurationConfigmapInformer.class) {\n+                if (informer == null) {\n+                    informer = new ConfigurationConfigmapInformer(settings);\n+                }\n+            }\n+        }\n+        return informer;\n+    }\n+\n+    private ConfigurationConfigmapInformer(ConfigmapConfigurationSettings settings) {\n+\n+        try {\n+            doStartConfigMapInformer(settings);\n+            doAddShowdownHook();\n+        } catch (IOException e) {\n+            log.error(\"cannot connect with api server in kubernetes\", e);\n+        }\n+\n+    }\n+\n+    private void doAddShowdownHook() {", "originalCommit": "6dc8772014f5bbe9ba2b1f73cfc969c71ae09374", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI3NjM2NQ==", "url": "https://github.com/apache/skywalking/pull/4959#discussion_r451276365", "bodyText": "fixed", "author": "EvanLjp", "createdAt": "2020-07-08T04:30:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0ODczNg=="}], "type": "inlineReview"}, {"oid": "a21cda771e716c876e87bca16aa3ae854110e116", "url": "https://github.com/apache/skywalking/commit/a21cda771e716c876e87bca16aa3ae854110e116", "message": "Merge remote-tracking branch 'upstream/master' into configmap-configuration", "committedDate": "2020-07-08T04:29:43Z", "type": "commit"}, {"oid": "3949a5294c6795e9cb1827f982b5220fdafeed69", "url": "https://github.com/apache/skywalking/commit/3949a5294c6795e9cb1827f982b5220fdafeed69", "message": "fix spelling mistake", "committedDate": "2020-07-08T04:31:30Z", "type": "commit"}, {"oid": "bfcbdbcd321da24075782d3c40d0b9eb91501f39", "url": "https://github.com/apache/skywalking/commit/bfcbdbcd321da24075782d3c40d0b9eb91501f39", "message": "Merge branch 'master' into configmap-configuration", "committedDate": "2020-07-09T00:06:11Z", "type": "commit"}, {"oid": "bf2d4c8a2ad7957a0d222ae18c1b46e7c6aae1d4", "url": "https://github.com/apache/skywalking/commit/bf2d4c8a2ad7957a0d222ae18c1b46e7c6aae1d4", "message": "fix checkstyle", "committedDate": "2020-07-10T01:36:17Z", "type": "commit"}, {"oid": "4407ff7c20e8c034be59228e5e69691c815638fd", "url": "https://github.com/apache/skywalking/commit/4407ff7c20e8c034be59228e5e69691c815638fd", "message": "Merge remote-tracking branch 'upstream/master' into configmap-configuration", "committedDate": "2020-07-10T01:37:07Z", "type": "commit"}, {"oid": "015ffa78fcd5e73fc65fad6b76b32bace183b276", "url": "https://github.com/apache/skywalking/commit/015ffa78fcd5e73fc65fad6b76b32bace183b276", "message": "Merge branch 'configmap-configuration' of https://github.com/EvanLjp/skywalking into configmap-configuration", "committedDate": "2020-07-10T01:38:09Z", "type": "commit"}, {"oid": "6c44aa06b28c3df8f054e9510253c3718113822f", "url": "https://github.com/apache/skywalking/commit/6c44aa06b28c3df8f054e9510253c3718113822f", "message": "Merge branch 'master' into configmap-configuration", "committedDate": "2020-07-12T06:20:06Z", "type": "commit"}, {"oid": "8544523ee0d4754b304403f81f3a0a1b1fd1925e", "url": "https://github.com/apache/skywalking/commit/8544523ee0d4754b304403f81f3a0a1b1fd1925e", "message": "fix some  wrong doc", "committedDate": "2020-07-12T14:20:10Z", "type": "commit"}, {"oid": "7974483a9613c8e8f4ade4885619c27df85296bd", "url": "https://github.com/apache/skywalking/commit/7974483a9613c8e8f4ade4885619c27df85296bd", "message": "Merge remote-tracking branch 'upstream/master' into configmap-configuration", "committedDate": "2020-07-12T14:20:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMyNzQ1MA==", "url": "https://github.com/apache/skywalking/pull/4959#discussion_r453327450", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return \"configmap\";\n          \n          \n            \n                    return \"k8s_configmap\";\n          \n      \n    \n    \n  \n\nAnd please change other docs related to this.", "author": "wu-sheng", "createdAt": "2020-07-12T15:02:54Z", "path": "oap-server/server-configuration/configuration-configmap/src/main/java/org/apache/skywalking/oap/server/configuration/configmap/ConfigmapConfigurationProvider.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.configuration.configmap;\n+\n+import com.google.common.base.Strings;\n+import org.apache.skywalking.oap.server.configuration.api.AbstractConfigurationProvider;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigWatcherRegister;\n+import org.apache.skywalking.oap.server.library.module.ModuleConfig;\n+import org.apache.skywalking.oap.server.library.module.ModuleStartException;\n+\n+public class ConfigmapConfigurationProvider extends AbstractConfigurationProvider {\n+\n+    private final ConfigmapConfigurationSettings settings;\n+\n+    public ConfigmapConfigurationProvider() {\n+        this.settings = new ConfigmapConfigurationSettings();\n+    }\n+\n+    @Override\n+    public String name() {\n+        return \"configmap\";", "originalCommit": "7974483a9613c8e8f4ade4885619c27df85296bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMyNzQ5Mg==", "url": "https://github.com/apache/skywalking/pull/4959#discussion_r453327492", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return \"configmap\";\n          \n          \n            \n                    return \"k8s_configmap\";", "author": "wu-sheng", "createdAt": "2020-07-12T15:03:08Z", "path": "oap-server/server-configuration/configuration-configmap/src/main/java/org/apache/skywalking/oap/server/configuration/configmap/ConfigmapConfigurationProvider.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.configuration.configmap;\n+\n+import com.google.common.base.Strings;\n+import org.apache.skywalking.oap.server.configuration.api.AbstractConfigurationProvider;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigWatcherRegister;\n+import org.apache.skywalking.oap.server.library.module.ModuleConfig;\n+import org.apache.skywalking.oap.server.library.module.ModuleStartException;\n+\n+public class ConfigmapConfigurationProvider extends AbstractConfigurationProvider {\n+\n+    private final ConfigmapConfigurationSettings settings;\n+\n+    public ConfigmapConfigurationProvider() {\n+        this.settings = new ConfigmapConfigurationSettings();\n+    }\n+\n+    @Override\n+    public String name() {\n+        return \"configmap\";", "originalCommit": "7974483a9613c8e8f4ade4885619c27df85296bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "be276dcff9656191fbea0efbad262d19cdcf46ef", "url": "https://github.com/apache/skywalking/commit/be276dcff9656191fbea0efbad262d19cdcf46ef", "message": "move dir && add test log", "committedDate": "2020-07-14T07:28:31Z", "type": "commit"}, {"oid": "4603dcedf462a0b5efd887476d55a375bee6c29a", "url": "https://github.com/apache/skywalking/commit/4603dcedf462a0b5efd887476d55a375bee6c29a", "message": "Merge remote-tracking branch 'upstream/master' into configmap-configuration", "committedDate": "2020-07-14T07:29:34Z", "type": "commit"}, {"oid": "6a975acc0577280575f91c9bd7eea52624146c14", "url": "https://github.com/apache/skywalking/commit/6a975acc0577280575f91c9bd7eea52624146c14", "message": "Merge branch 'master' into configmap-configuration", "committedDate": "2020-07-14T07:56:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE3NTkyMg==", "url": "https://github.com/apache/skywalking/pull/4959#discussion_r454175922", "bodyText": "If you can't read the key from configmap, please don't include value in the ConfigTable. I received a report today, someone accidentally reset the default value, even they didn't config the new value in the dynamic configuration center.", "author": "wu-sheng", "createdAt": "2020-07-14T08:00:44Z", "path": "oap-server/server-configuration/configuration-configmap/src/main/java/org/apache/skywalking/oap/server/configuration/configmap/ConfigmapConfigurationWatcherRegister.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.configuration.configmap;\n+\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import java.util.Optional;\n+import java.util.Set;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigTable;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigWatcherRegister;\n+\n+@Slf4j\n+public class ConfigmapConfigurationWatcherRegister extends ConfigWatcherRegister {\n+\n+    private final ConfigurationConfigmapInformer informer;\n+\n+    public ConfigmapConfigurationWatcherRegister(ConfigmapConfigurationSettings settings,\n+                                                 ConfigurationConfigmapInformer informer) {\n+        super(settings.getPeriod());\n+        this.informer = informer;\n+    }\n+\n+    @Override\n+    public Optional<ConfigTable> readConfig(Set<String> keys) {\n+        final ConfigTable configTable = new ConfigTable();\n+\n+        Optional<V1ConfigMap> v1ConfigMap = informer.configMap();\n+\n+        for (final String name : keys) {\n+\n+            final String value = v1ConfigMap.map(configMap -> configMap.getData().get(name)).orElse(null);", "originalCommit": "6a975acc0577280575f91c9bd7eea52624146c14", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIwODM3OQ==", "url": "https://github.com/apache/skywalking/pull/4959#discussion_r454208379", "bodyText": "ok,thanks for your notice", "author": "EvanLjp", "createdAt": "2020-07-14T08:57:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE3NTkyMg=="}], "type": "inlineReview"}, {"oid": "0e7a2576219765f6698e0c710e8c1ca7a1a49e71", "url": "https://github.com/apache/skywalking/commit/0e7a2576219765f6698e0c710e8c1ca7a1a49e71", "message": "filter null value", "committedDate": "2020-07-14T09:21:06Z", "type": "commit"}, {"oid": "0781a7c3b97714084268add2fb865f3f872d6a11", "url": "https://github.com/apache/skywalking/commit/0781a7c3b97714084268add2fb865f3f872d6a11", "message": "Merge branch 'configmap-configuration' of https://github.com/EvanLjp/skywalking into configmap-configuration", "committedDate": "2020-07-14T09:23:02Z", "type": "commit"}, {"oid": "e53325b70663ddbbe06976530f51c2761658ae33", "url": "https://github.com/apache/skywalking/commit/e53325b70663ddbbe06976530f51c2761658ae33", "message": "fix unit test", "committedDate": "2020-07-14T11:31:58Z", "type": "commit"}, {"oid": "8f5a07b36278e29e2ad243fe5516772e01b7cbe7", "url": "https://github.com/apache/skywalking/commit/8f5a07b36278e29e2ad243fe5516772e01b7cbe7", "message": "Merge branch 'master' into configmap-configuration", "committedDate": "2020-07-15T06:32:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc0MzI5Nw==", "url": "https://github.com/apache/skywalking/pull/4959#discussion_r455743297", "bodyText": "Many emtpy lines, please polish the code format.", "author": "wu-sheng", "createdAt": "2020-07-16T12:19:24Z", "path": "oap-server/server-configuration/configuration-k8s_configmap/src/main/java/org/apache/skywalking/oap/server/configuration/configmap/ConfigurationConfigmapInformer.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.configuration.configmap;\n+\n+import io.kubernetes.client.informer.SharedIndexInformer;\n+import io.kubernetes.client.informer.SharedInformerFactory;\n+import io.kubernetes.client.informer.cache.Lister;\n+import io.kubernetes.client.openapi.ApiClient;\n+import io.kubernetes.client.openapi.apis.CoreV1Api;\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1ConfigMapList;\n+import io.kubernetes.client.util.Config;\n+import java.io.IOException;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class ConfigurationConfigmapInformer {\n+\n+    private Lister<V1ConfigMap> configMapLister;\n+\n+    private SharedInformerFactory factory;\n+\n+    private final ExecutorService executorService = Executors.newSingleThreadExecutor(r -> {\n+        Thread thread = new Thread(r, \"SKYWALKING_KUBERNETES_CONFIGURATION_INFORMER\");\n+        thread.setDaemon(true);\n+        return thread;\n+    });\n+\n+    public ConfigurationConfigmapInformer(ConfigmapConfigurationSettings settings) {\n+\n+        try {\n+            doStartConfigMapInformer(settings);\n+            doAddShutdownHook();\n+        } catch (IOException e) {\n+            log.error(\"cannot connect with api server in kubernetes\", e);\n+        }\n+\n+    }\n+\n+    private void doAddShutdownHook() {\n+        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n+            if (Objects.nonNull(factory)) {\n+                factory.stopAllRegisteredInformers();\n+            }\n+        }));\n+    }\n+\n+    private void doStartConfigMapInformer(final ConfigmapConfigurationSettings settings) throws IOException {\n+        ApiClient apiClient = Config.defaultClient();\n+        apiClient.setHttpClient(apiClient.getHttpClient().newBuilder().readTimeout(0, TimeUnit.SECONDS).build());\n+        CoreV1Api coreV1Api = new CoreV1Api(apiClient);\n+\n+        factory = new SharedInformerFactory(executorService);\n+\n+        SharedIndexInformer<V1ConfigMap> configMapSharedIndexInformer = factory.sharedIndexInformerFor(\n+            params -> coreV1Api.listNamespacedConfigMapCall(\n+                settings.getNamespace(), null, null, null, null, settings.getLabelSelector()\n+                , 1, params.resourceVersion, params.timeoutSeconds, params.watch, null\n+            ),\n+            V1ConfigMap.class, V1ConfigMapList.class\n+        );\n+\n+        factory.startAllRegisteredInformers();\n+        configMapLister = new Lister<>(configMapSharedIndexInformer.getIndexer());\n+\n+    }\n+\n+    public Optional<V1ConfigMap> configMap() {\n+\n+        return Optional.ofNullable(configMapLister.list().size() == 1 ? configMapLister.list().get(0) : null);\n+", "originalCommit": "8f5a07b36278e29e2ad243fe5516772e01b7cbe7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "013bf3a71bd31969a2145a9d3927fa03b6c407c1", "url": "https://github.com/apache/skywalking/commit/013bf3a71bd31969a2145a9d3927fa03b6c407c1", "message": "Merge branch 'master' into configmap-configuration", "committedDate": "2020-07-16T14:53:33Z", "type": "commit"}, {"oid": "8e2c6ebd2caa9232bf33ddb36c0e56ea176b93e9", "url": "https://github.com/apache/skywalking/commit/8e2c6ebd2caa9232bf33ddb36c0e56ea176b93e9", "message": "rename module", "committedDate": "2020-07-17T12:43:32Z", "type": "commit"}, {"oid": "5420036022f171551aed596061831a4ab7b08b1c", "url": "https://github.com/apache/skywalking/commit/5420036022f171551aed596061831a4ab7b08b1c", "message": "rename module", "committedDate": "2020-07-17T12:51:55Z", "type": "commit"}, {"oid": "d5629b9c40688a3be7bccb5e2b11fc4b4c261c0b", "url": "https://github.com/apache/skywalking/commit/d5629b9c40688a3be7bccb5e2b11fc4b4c261c0b", "message": "Merge branch 'configmap-configuration' of https://github.com/EvanLjp/skywalking into configmap-configuration", "committedDate": "2020-07-17T12:56:50Z", "type": "commit"}, {"oid": "c259cb52f4095b1ff9bbef064d62e060b8d2e9b5", "url": "https://github.com/apache/skywalking/commit/c259cb52f4095b1ff9bbef064d62e060b8d2e9b5", "message": "Merge branch 'master' into configmap-configuration", "committedDate": "2020-07-17T13:25:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ0MjkxMQ==", "url": "https://github.com/apache/skywalking/pull/4959#discussion_r456442911", "bodyText": "An unnecessary empty line.", "author": "wu-sheng", "createdAt": "2020-07-17T13:30:16Z", "path": "oap-server/server-configuration/configuration-k8s-configmap/src/main/java/org/apache/skywalking/oap/server/configuration/configmap/ConfigurationConfigmapInformer.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.configuration.configmap;\n+\n+import io.kubernetes.client.informer.SharedIndexInformer;\n+import io.kubernetes.client.informer.SharedInformerFactory;\n+import io.kubernetes.client.informer.cache.Lister;\n+import io.kubernetes.client.openapi.ApiClient;\n+import io.kubernetes.client.openapi.apis.CoreV1Api;\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1ConfigMapList;\n+import io.kubernetes.client.util.Config;\n+import java.io.IOException;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class ConfigurationConfigmapInformer {\n+\n+    private Lister<V1ConfigMap> configMapLister;\n+\n+    private SharedInformerFactory factory;\n+\n+    private final ExecutorService executorService = Executors.newSingleThreadExecutor(r -> {\n+        Thread thread = new Thread(r, \"SKYWALKING_KUBERNETES_CONFIGURATION_INFORMER\");\n+        thread.setDaemon(true);\n+        return thread;\n+    });\n+\n+    public ConfigurationConfigmapInformer(ConfigmapConfigurationSettings settings) {\n+", "originalCommit": "c259cb52f4095b1ff9bbef064d62e060b8d2e9b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ0MzAwNg==", "url": "https://github.com/apache/skywalking/pull/4959#discussion_r456443006", "bodyText": "Many unnecessary empty lines.", "author": "wu-sheng", "createdAt": "2020-07-17T13:30:27Z", "path": "oap-server/server-configuration/configuration-k8s-configmap/src/main/java/org/apache/skywalking/oap/server/configuration/configmap/ConfigmapConfigurationWatcherRegister.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.configuration.configmap;\n+\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigTable;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigWatcherRegister;\n+\n+@Slf4j\n+public class ConfigmapConfigurationWatcherRegister extends ConfigWatcherRegister {\n+\n+    private final ConfigurationConfigmapInformer informer;\n+\n+    public ConfigmapConfigurationWatcherRegister(ConfigmapConfigurationSettings settings,\n+                                                 ConfigurationConfigmapInformer informer) {\n+        super(settings.getPeriod());\n+        this.informer = informer;\n+    }\n+\n+    @Override\n+    public Optional<ConfigTable> readConfig(Set<String> keys) {\n+        final ConfigTable configTable = new ConfigTable();\n+\n+        Optional<V1ConfigMap> v1ConfigMap = informer.configMap();\n+\n+        for (final String name : keys) {\n+\n+            final String value = v1ConfigMap.map(configMap -> configMap.getData().get(name)).orElse(null);\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"read config: name:{} ,value:{}\", name, value);\n+            }\n+            if (Objects.nonNull(value)) {\n+                configTable.add(new ConfigTable.ConfigItem(name, value));\n+            }\n+        }\n+", "originalCommit": "c259cb52f4095b1ff9bbef064d62e060b8d2e9b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ0MzEwNA==", "url": "https://github.com/apache/skywalking/pull/4959#discussion_r456443104", "bodyText": "An unnecessary empty line.", "author": "wu-sheng", "createdAt": "2020-07-17T13:30:36Z", "path": "oap-server/server-configuration/configuration-k8s-configmap/src/main/java/org/apache/skywalking/oap/server/configuration/configmap/ConfigmapConfigurationSettings.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.configuration.configmap;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.library.module.ModuleConfig;\n+\n+@Setter\n+@Getter\n+public class ConfigmapConfigurationSettings extends ModuleConfig {\n+", "originalCommit": "c259cb52f4095b1ff9bbef064d62e060b8d2e9b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ0MzIxMQ==", "url": "https://github.com/apache/skywalking/pull/4959#discussion_r456443211", "bodyText": "Comments are required in here too.", "author": "wu-sheng", "createdAt": "2020-07-17T13:30:45Z", "path": "oap-server/server-configuration/configuration-k8s-configmap/src/main/java/org/apache/skywalking/oap/server/configuration/configmap/ConfigmapConfigurationSettings.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.configuration.configmap;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.library.module.ModuleConfig;\n+\n+@Setter\n+@Getter\n+public class ConfigmapConfigurationSettings extends ModuleConfig {\n+\n+    private String namespace;\n+    private String labelSelector;\n+    private Integer period;", "originalCommit": "c259cb52f4095b1ff9bbef064d62e060b8d2e9b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ0MzI2Mg==", "url": "https://github.com/apache/skywalking/pull/4959#discussion_r456443262", "bodyText": "An unnecessary empty line.", "author": "wu-sheng", "createdAt": "2020-07-17T13:30:50Z", "path": "oap-server/server-configuration/configuration-k8s-configmap/src/main/java/org/apache/skywalking/oap/server/configuration/configmap/ConfigmapConfigurationProvider.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.configuration.configmap;\n+\n+import com.google.common.base.Strings;\n+import org.apache.skywalking.oap.server.configuration.api.AbstractConfigurationProvider;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigWatcherRegister;\n+import org.apache.skywalking.oap.server.library.module.ModuleConfig;\n+import org.apache.skywalking.oap.server.library.module.ModuleStartException;\n+\n+public class ConfigmapConfigurationProvider extends AbstractConfigurationProvider {\n+\n+    private final ConfigmapConfigurationSettings settings;\n+\n+    public ConfigmapConfigurationProvider() {\n+        this.settings = new ConfigmapConfigurationSettings();\n+    }\n+\n+    @Override\n+    public String name() {\n+        return \"k8s-configmap\";\n+    }\n+\n+    @Override\n+    public ModuleConfig createConfigBeanIfAbsent() {\n+        return settings;\n+    }\n+\n+    @Override\n+    protected ConfigWatcherRegister initConfigReader() throws ModuleStartException {\n+", "originalCommit": "c259cb52f4095b1ff9bbef064d62e060b8d2e9b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ0MzMzNQ==", "url": "https://github.com/apache/skywalking/pull/4959#discussion_r456443335", "bodyText": "An unnecessary empty line.", "author": "wu-sheng", "createdAt": "2020-07-17T13:30:56Z", "path": "oap-server/server-configuration/configuration-k8s-configmap/src/main/java/org/apache/skywalking/oap/server/configuration/configmap/ConfigmapConfigurationProvider.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.configuration.configmap;\n+\n+import com.google.common.base.Strings;\n+import org.apache.skywalking.oap.server.configuration.api.AbstractConfigurationProvider;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigWatcherRegister;\n+import org.apache.skywalking.oap.server.library.module.ModuleConfig;\n+import org.apache.skywalking.oap.server.library.module.ModuleStartException;\n+\n+public class ConfigmapConfigurationProvider extends AbstractConfigurationProvider {\n+\n+    private final ConfigmapConfigurationSettings settings;\n+\n+    public ConfigmapConfigurationProvider() {\n+        this.settings = new ConfigmapConfigurationSettings();\n+    }\n+\n+    @Override\n+    public String name() {\n+        return \"k8s-configmap\";\n+    }\n+\n+    @Override\n+    public ModuleConfig createConfigBeanIfAbsent() {\n+        return settings;\n+    }\n+\n+    @Override\n+    protected ConfigWatcherRegister initConfigReader() throws ModuleStartException {\n+\n+        if (Strings.isNullOrEmpty(settings.getLabelSelector()) || Strings.isNullOrEmpty(settings.getNamespace())) {\n+            throw new ModuleStartException(\"the settings of configmap configuration is illegal.\");\n+        }\n+", "originalCommit": "c259cb52f4095b1ff9bbef064d62e060b8d2e9b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ0Mzk2MA==", "url": "https://github.com/apache/skywalking/pull/4959#discussion_r456443960", "bodyText": "Many unnecessary empty lines.", "author": "wu-sheng", "createdAt": "2020-07-17T13:32:08Z", "path": "oap-server/server-configuration/configuration-k8s-configmap/src/test/java/org/apache/skywalking/oap/server/configuration/configmap/ConfigmapConfigWatcherRegisterTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.configuration.configmap;\n+\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import java.io.Reader;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigTable;\n+import org.apache.skywalking.oap.server.library.util.ResourceUtils;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PowerMockIgnore;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.yaml.snakeyaml.Yaml;\n+\n+@RunWith(PowerMockRunner.class)\n+@PowerMockIgnore(\"javax.management.*\")\n+@PrepareForTest({ConfigurationConfigmapInformer.class})\n+public class ConfigmapConfigWatcherRegisterTest {\n+\n+    private ConfigmapConfigurationWatcherRegister register;\n+\n+    private ConfigurationConfigmapInformer informer;\n+", "originalCommit": "c259cb52f4095b1ff9bbef064d62e060b8d2e9b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ0NDAyMQ==", "url": "https://github.com/apache/skywalking/pull/4959#discussion_r456444021", "bodyText": "An unnecessary empty line.", "author": "wu-sheng", "createdAt": "2020-07-17T13:32:14Z", "path": "oap-server/server-configuration/configuration-k8s-configmap/src/test/java/org/apache/skywalking/oap/server/configuration/configmap/ConfigmapConfigurationProviderTest.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.configuration.configmap;\n+\n+import org.apache.skywalking.oap.server.library.module.ModuleConfig;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.powermock.core.classloader.annotations.PowerMockIgnore;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(PowerMockRunner.class)\n+@PowerMockIgnore(\"javax.management.*\")\n+public class ConfigmapConfigurationProviderTest {\n+", "originalCommit": "c259cb52f4095b1ff9bbef064d62e060b8d2e9b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c889feeab188fb29e6b9e0e3cb40741e791369b1", "url": "https://github.com/apache/skywalking/commit/c889feeab188fb29e6b9e0e3cb40741e791369b1", "message": "remove empty lines and delete unnecessary files", "committedDate": "2020-07-20T01:28:11Z", "type": "commit"}, {"oid": "c81dea782d5a5998cf9d9c33a61d1dcb178a6dc0", "url": "https://github.com/apache/skywalking/commit/c81dea782d5a5998cf9d9c33a61d1dcb178a6dc0", "message": "Merge branch 'configmap-configuration' of https://github.com/EvanLjp/skywalking into configmap-configuration", "committedDate": "2020-07-20T01:28:32Z", "type": "commit"}, {"oid": "6dbea3186d8fc2ee8fd454afa3b320b83a82e1eb", "url": "https://github.com/apache/skywalking/commit/6dbea3186d8fc2ee8fd454afa3b320b83a82e1eb", "message": "Merge remote-tracking branch 'upstream/master' into configmap-configuration", "committedDate": "2020-07-20T01:29:12Z", "type": "commit"}]}