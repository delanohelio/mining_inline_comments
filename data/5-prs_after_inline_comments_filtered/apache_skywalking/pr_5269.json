{"pr_number": 5269, "pr_title": "Support !=, like filter expressions in OAL", "pr_createdAt": "2020-08-08T10:27:19Z", "pr_url": "https://github.com/apache/skywalking/pull/5269", "timeline": [{"oid": "6662df440bb1ba572499c0256c3a9d347ec882f1", "url": "https://github.com/apache/skywalking/commit/6662df440bb1ba572499c0256c3a9d347ec882f1", "message": "Feature: support !=, like filter expressions\n\nAnd slightly refactor the matchers\n\nresolves https://github.com/apache/skywalking/issues/5234", "committedDate": "2020-08-08T10:42:16Z", "type": "commit"}, {"oid": "6662df440bb1ba572499c0256c3a9d347ec882f1", "url": "https://github.com/apache/skywalking/commit/6662df440bb1ba572499c0256c3a9d347ec882f1", "message": "Feature: support !=, like filter expressions\n\nAnd slightly refactor the matchers\n\nresolves https://github.com/apache/skywalking/issues/5234", "committedDate": "2020-08-08T10:42:16Z", "type": "forcePushed"}, {"oid": "c24a1503d87cb22599dcbb0e5cc9005dc03cb624", "url": "https://github.com/apache/skywalking/commit/c24a1503d87cb22599dcbb0e5cc9005dc03cb624", "message": "Merge branch 'master' into oal/filter-expression", "committedDate": "2020-08-08T14:35:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU0MDM1OA==", "url": "https://github.com/apache/skywalking/pull/5269#discussion_r467540358", "bodyText": "The start method is called more than once", "author": "arugal", "createdAt": "2020-08-09T05:49:43Z", "path": "oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/OALRuntime.java", "diffHunk": "@@ -150,6 +151,12 @@ public void start(ClassLoader currentClassLoader) throws ModuleStartException, O\n             throw new ModuleStartException(\"load metrics functions error.\", e);\n         }\n \n+        try {\n+            FilterMatchers.INSTANCE.init();", "originalCommit": "c24a1503d87cb22599dcbb0e5cc9005dc03cb624", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU1Mzg2MA==", "url": "https://github.com/apache/skywalking/pull/5269#discussion_r467553860", "bodyText": "No side effect even initializing multiple times, fixed anyway", "author": "kezhenxu94", "createdAt": "2020-08-09T08:27:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU0MDM1OA=="}], "type": "inlineReview"}, {"oid": "ec058dc11430f49ca3cca5f163b6ca90bed0b95a", "url": "https://github.com/apache/skywalking/commit/ec058dc11430f49ca3cca5f163b6ca90bed0b95a", "message": "Merge branch 'master' into oal/filter-expression", "committedDate": "2020-08-09T08:22:00Z", "type": "commit"}, {"oid": "e7f094aea1cd853933133cacc6199d48a4c86598", "url": "https://github.com/apache/skywalking/commit/e7f094aea1cd853933133cacc6199d48a4c86598", "message": "Avoid initializing multiple times", "committedDate": "2020-08-09T08:26:27Z", "type": "commit"}, {"oid": "9350989673934f4b309e49c6edea405bb5123eec", "url": "https://github.com/apache/skywalking/commit/9350989673934f4b309e49c6edea405bb5123eec", "message": "Remove unused imports", "committedDate": "2020-08-09T08:56:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU1ODE5Ng==", "url": "https://github.com/apache/skywalking/pull/5269#discussion_r467558196", "bodyText": "Please make this as lazy initialization in the #find method. The static block is not recommended.", "author": "wu-sheng", "createdAt": "2020-08-09T09:10:29Z", "path": "oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/MetricsHolder.java", "diffHunk": "@@ -26,10 +26,19 @@\n import org.apache.skywalking.oap.server.core.analysis.metrics.Metrics;\n import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.MetricsFunction;\n \n+@SuppressWarnings(\"UnstableApiUsage\")\n public class MetricsHolder {\n-    private static Map<String, Class<? extends Metrics>> REGISTER = new HashMap<>();\n+    private static final Map<String, Class<? extends Metrics>> REGISTER = new HashMap<>();\n \n-    public static void init() throws IOException {\n+    static {\n+        try {\n+            init();\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"load metrics functions error.\", e);\n+        }\n+    }", "originalCommit": "9350989673934f4b309e49c6edea405bb5123eec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU1ODQ0NQ==", "url": "https://github.com/apache/skywalking/pull/5269#discussion_r467558445", "bodyText": "like should support %xxx%, right?", "author": "wu-sheng", "createdAt": "2020-08-09T09:13:24Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/expression/LikeMatch.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.analysis.metrics.expression;\n+\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.FilterMatcher;\n+\n+@FilterMatcher\n+public class LikeMatch {", "originalCommit": "9350989673934f4b309e49c6edea405bb5123eec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU1OTgyOA==", "url": "https://github.com/apache/skywalking/pull/5269#discussion_r467559828", "bodyText": "According to the usage and the comments, why just name this as isBoolean? Or, I prefer to create a new BooleanValueFilterMatcher annotation?", "author": "wu-sheng", "createdAt": "2020-08-09T09:27:46Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/annotation/FilterMatcher.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.analysis.metrics.annotation;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.expression.BooleanMatch;\n+\n+/**\n+ * Classes annotated with {@code FilterMatcher} are processors of the expressions in {@code filter} of the OAL script.\n+ * Take {@link BooleanMatch} as an example.\n+ */\n+@Target(ElementType.TYPE)\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface FilterMatcher {\n+    /**\n+     * @return the operator name(s) defined in the .g4 files, such as {@code lessEqualMatch} and {@code notEqualMatch},\n+     * the default value is the name of the class annotated with {@link FilterMatcher}, with the first letter being\n+     * lowercase.\n+     */\n+    String[] value() default {};\n+\n+    /**\n+     * @return the type of the filter operand, which decides the getter of the operands, i.e. getter of {@code Boolean}\n+     * and {@code boolean} type is {@code isArg}, otherwise {@code getArg}.\n+     */\n+    Class<?> type() default Object.class;", "originalCommit": "9350989673934f4b309e49c6edea405bb5123eec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU1OTk5Nw==", "url": "https://github.com/apache/skywalking/pull/5269#discussion_r467559997", "bodyText": "Replacing getType() to isBoolean seems more clear.", "author": "wu-sheng", "createdAt": "2020-08-09T09:29:47Z", "path": "oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/DeepAnalysis.java", "diffHunk": "@@ -45,45 +45,22 @@ public AnalysisResult analysis(AnalysisResult result) {\n         List<ConditionExpression> expressions = result.getFilterExpressionsParserResult();\n         if (expressions != null && expressions.size() > 0) {\n             for (ConditionExpression expression : expressions) {\n-                Expression filterExpression = new Expression();\n-                if (\"booleanMatch\".equals(expression.getExpressionType())) {\n-                    filterExpression.setExpressionObject(\"EqualMatch\");\n-                    filterExpression.setLeft(\"source.\" + ClassMethodUtil.toIsMethod(expression.getAttribute()) + \"()\");\n-                    filterExpression.setRight(expression.getValue());\n-                    result.addFilterExpressions(filterExpression);\n-                } else if (\"stringMatch\".equals(expression.getExpressionType())) {\n-                    filterExpression.setExpressionObject(\"EqualMatch\");\n-                    filterExpression.setLeft(\"source.\" + ClassMethodUtil.toGetMethod(expression.getAttribute()) + \"()\");\n-                    filterExpression.setRight(expression.getValue());\n-                    result.addFilterExpressions(filterExpression);\n-                } else if (\"greaterMatch\".equals(expression.getExpressionType())) {\n-                    filterExpression.setExpressionObject(\"GreaterMatch\");\n-                    filterExpression.setLeft(\"source.\" + ClassMethodUtil.toGetMethod(expression.getAttribute()) + \"()\");\n-                    filterExpression.setRight(expression.getValue());\n-                    result.addFilterExpressions(filterExpression);\n-                } else if (\"lessMatch\".equals(expression.getExpressionType())) {\n-                    filterExpression.setExpressionObject(\"LessMatch\");\n-                    filterExpression.setLeft(\"source.\" + ClassMethodUtil.toGetMethod(expression.getAttribute()) + \"()\");\n-                    filterExpression.setRight(expression.getValue());\n-                    result.addFilterExpressions(filterExpression);\n-                } else if (\"greaterEqualMatch\".equals(expression.getExpressionType())) {\n-                    filterExpression.setExpressionObject(\"GreaterEqualMatch\");\n-                    filterExpression.setLeft(\"source.\" + ClassMethodUtil.toGetMethod(expression.getAttribute()) + \"()\");\n-                    filterExpression.setRight(expression.getValue());\n-                    result.addFilterExpressions(filterExpression);\n-                } else if (\"lessEqualMatch\".equals(expression.getExpressionType())) {\n-                    filterExpression.setExpressionObject(\"LessEqualMatch\");\n-                    filterExpression.setLeft(\"source.\" + ClassMethodUtil.toGetMethod(expression.getAttribute()) + \"()\");\n-                    filterExpression.setRight(expression.getValue());\n-                    result.addFilterExpressions(filterExpression);\n-                } else {\n-                    throw new IllegalArgumentException(\"filter expression [\" + expression.getExpressionType() + \"] not found\");\n-                }\n+                final FilterMatchers.MatcherInfo matcherClass = FilterMatchers.INSTANCE.find(expression.getExpressionType());\n+\n+                final String getter = matcherClass.getType() == boolean.class || matcherClass.getType() == Boolean.class", "originalCommit": "9350989673934f4b309e49c6edea405bb5123eec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f33730b1fa789c788338fd423a1806b5762148fa", "url": "https://github.com/apache/skywalking/commit/f33730b1fa789c788338fd423a1806b5762148fa", "message": "Address review comments", "committedDate": "2020-08-10T14:15:13Z", "type": "commit"}, {"oid": "0750054d99ae9871bb616e4c7d6e7f87c4312ec4", "url": "https://github.com/apache/skywalking/commit/0750054d99ae9871bb616e4c7d6e7f87c4312ec4", "message": "Merge remote-tracking branch 'origin/master' into oal/filter-expression", "committedDate": "2020-08-10T14:15:30Z", "type": "commit"}, {"oid": "112f150a4dfd01ed795ca31b46203de25d0e9881", "url": "https://github.com/apache/skywalking/commit/112f150a4dfd01ed795ca31b46203de25d0e9881", "message": "Add missing license header", "committedDate": "2020-08-10T14:47:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk2NzIzNw==", "url": "https://github.com/apache/skywalking/pull/5269#discussion_r467967237", "bodyText": "Which unstable API?", "author": "wu-sheng", "createdAt": "2020-08-10T15:02:22Z", "path": "oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/FilterMatchers.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oal.rt.parser;\n+\n+import com.google.common.reflect.ClassPath;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.BooleanValueFilterMatcher;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.FilterMatcher;\n+\n+@SuppressWarnings(\"UnstableApiUsage\")", "originalCommit": "112f150a4dfd01ed795ca31b46203de25d0e9881", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk4MTY2MQ==", "url": "https://github.com/apache/skywalking/pull/5269#discussion_r467981661", "bodyText": "com.google.common.reflect.ClassPath", "author": "kezhenxu94", "createdAt": "2020-08-10T15:23:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk2NzIzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk3MDg0MQ==", "url": "https://github.com/apache/skywalking/pull/5269#discussion_r467970841", "bodyText": "AFAIK, IllegalArgumentException is a RuntimeException. Why need this?", "author": "wu-sheng", "createdAt": "2020-08-10T15:07:39Z", "path": "oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/MetricsHolder.java", "diffHunk": "@@ -45,13 +48,16 @@ public static void init() throws IOException {\n         }\n     }\n \n-    public static Class<? extends Metrics> find(\n-        String functionName) {\n-        String func = functionName;\n-        Class<? extends Metrics> metricsClass = REGISTER.get(\n-            func);\n+    @SneakyThrows", "originalCommit": "112f150a4dfd01ed795ca31b46203de25d0e9881", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk4MzI3OQ==", "url": "https://github.com/apache/skywalking/pull/5269#discussion_r467983279", "bodyText": "init throws IOException, which is not runtime exception", "author": "kezhenxu94", "createdAt": "2020-08-10T15:25:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk3MDg0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk3MjA1Ng==", "url": "https://github.com/apache/skywalking/pull/5269#discussion_r467972056", "bodyText": "Do you forget to delete this?", "author": "wu-sheng", "createdAt": "2020-08-10T15:09:21Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/annotation/FilterMatcher.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.analysis.metrics.annotation;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.expression.BooleanMatch;\n+\n+/**\n+ * Classes annotated with {@code FilterMatcher} are processors of the expressions in {@code filter} of the OAL script.\n+ * Take {@link BooleanMatch} as an example.\n+ */\n+@Target(ElementType.TYPE)\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface FilterMatcher {\n+    /**\n+     * @return the operator name(s) defined in the .g4 files, such as {@code lessEqualMatch} and {@code notEqualMatch},\n+     * the default value is the name of the class annotated with {@link FilterMatcher}, with the first letter being\n+     * lowercase.\n+     */\n+    String[] value() default {};\n+\n+    /**\n+     * @return the type of the filter operand, which decides the getter of the operands, i.e. getter of {@code Boolean}\n+     * and {@code boolean} type is {@code isArg}, otherwise {@code getArg}.\n+     */\n+    Class<?> type() default Object.class;", "originalCommit": "112f150a4dfd01ed795ca31b46203de25d0e9881", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7776beb0f355bdf0bd93494b926c897a4d3f8eda", "url": "https://github.com/apache/skywalking/commit/7776beb0f355bdf0bd93494b926c897a4d3f8eda", "message": "Remove unused codes", "committedDate": "2020-08-10T15:26:28Z", "type": "commit"}, {"oid": "891dcc59d284672e6ee486ecfa33383b3f84b3bd", "url": "https://github.com/apache/skywalking/commit/891dcc59d284672e6ee486ecfa33383b3f84b3bd", "message": "Merge branch 'master' into oal/filter-expression", "committedDate": "2020-08-10T23:27:46Z", "type": "commit"}]}