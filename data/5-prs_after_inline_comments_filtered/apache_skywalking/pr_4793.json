{"pr_number": 4793, "pr_title": "Add a SuperDataset tag for custom super size dataset shards config in es storage", "pr_createdAt": "2020-05-16T09:52:57Z", "pr_url": "https://github.com/apache/skywalking/pull/4793", "timeline": [{"oid": "002f4c2573399a96649a64fb399dc8b7e80cd175", "url": "https://github.com/apache/skywalking/commit/002f4c2573399a96649a64fb399dc8b7e80cd175", "message": "add SuperDataset tag for add super size dataset shards config in es", "committedDate": "2020-05-16T09:46:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MDc4OQ==", "url": "https://github.com/apache/skywalking/pull/4793#discussion_r426150789", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This annotation applies to super size dataset entities\n          \n          \n            \n             * This annotation applies to the supersize dataset entity.", "author": "wu-sheng", "createdAt": "2020-05-16T12:47:47Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/annotation/SuperDataset.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.storage.annotation;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.apache.skywalking.oap.server.core.analysis.manual.segment.SegmentRecord;\n+\n+/**\n+ * This annotation applies to super size dataset entities", "originalCommit": "002f4c2573399a96649a64fb399dc8b7e80cd175", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MDkxNA==", "url": "https://github.com/apache/skywalking/pull/4793#discussion_r426150914", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * <p>1. adjust the number of shards in es storage</p>\n          \n          \n            \n             * <p>Storage implementation could provide different and specific optimization as this entity has much larger data set.</p>", "author": "wu-sheng", "createdAt": "2020-05-16T12:49:58Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/annotation/SuperDataset.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.storage.annotation;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.apache.skywalking.oap.server.core.analysis.manual.segment.SegmentRecord;\n+\n+/**\n+ * This annotation applies to super size dataset entities\n+ * for example:\n+ * <p>1. adjust the number of shards in es storage</p>", "originalCommit": "002f4c2573399a96649a64fb399dc8b7e80cd175", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MTAyNQ==", "url": "https://github.com/apache/skywalking/pull/4793#discussion_r426151025", "bodyText": "These should be removed. This is core level annotation, those entities are only optional.", "author": "wu-sheng", "createdAt": "2020-05-16T12:51:19Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/annotation/SuperDataset.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.storage.annotation;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.apache.skywalking.oap.server.core.analysis.manual.segment.SegmentRecord;\n+\n+/**\n+ * This annotation applies to super size dataset entities\n+ * for example:\n+ * <p>1. adjust the number of shards in es storage</p>\n+ *\n+ * @see SegmentRecord\n+ * @see org.apache.skywalking.oap.server.storage.plugin.zipkin.ZipkinSpanRecord\n+ * @see org.apache.skywalking.oap.server.storage.plugin.jaeger.JaegerSpanRecord", "originalCommit": "002f4c2573399a96649a64fb399dc8b7e80cd175", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MTA2Nw==", "url": "https://github.com/apache/skywalking/pull/4793#discussion_r426151067", "bodyText": "These lines should not be re-formated.", "author": "wu-sheng", "createdAt": "2020-05-16T12:52:00Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/StorageModels.java", "diffHunk": "@@ -98,15 +107,17 @@ private void retrieval(Class<?> clazz,\n             if (field.isAnnotationPresent(Column.class)) {\n                 Column column = field.getAnnotation(Column.class);\n                 modelColumns.add(\n-                    new ModelColumn(\n-                        new ColumnName(modelName, column.columnName()), field.getType(), column.matchQuery(), column\n-                        .storageOnly(), column.dataType().isValue(), column.length()));\n+                        new ModelColumn(\n+                                new ColumnName(modelName, column.columnName()), field.getType(), column.matchQuery(),\n+                                column\n+                                        .storageOnly(), column.dataType().isValue(), column.length()));", "originalCommit": "002f4c2573399a96649a64fb399dc8b7e80cd175", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MTA3Nw==", "url": "https://github.com/apache/skywalking/pull/4793#discussion_r426151077", "bodyText": "These lines should not be re-formated.", "author": "wu-sheng", "createdAt": "2020-05-16T12:52:10Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/StorageModels.java", "diffHunk": "@@ -98,15 +107,17 @@ private void retrieval(Class<?> clazz,\n             if (field.isAnnotationPresent(Column.class)) {\n                 Column column = field.getAnnotation(Column.class);\n                 modelColumns.add(\n-                    new ModelColumn(\n-                        new ColumnName(modelName, column.columnName()), field.getType(), column.matchQuery(), column\n-                        .storageOnly(), column.dataType().isValue(), column.length()));\n+                        new ModelColumn(\n+                                new ColumnName(modelName, column.columnName()), field.getType(), column.matchQuery(),\n+                                column\n+                                        .storageOnly(), column.dataType().isValue(), column.length()));\n                 if (log.isDebugEnabled()) {\n                     log.debug(\"The field named {} with the {} type\", column.columnName(), field.getType());\n                 }\n                 if (column.dataType().isValue()) {\n                     ValueColumnMetadata.INSTANCE.putIfAbsent(\n-                        modelName, column.columnName(), column.dataType(), column.function(), column.defaultValue());\n+                            modelName, column.columnName(), column.dataType(), column.function(),\n+                            column.defaultValue());", "originalCommit": "002f4c2573399a96649a64fb399dc8b7e80cd175", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MTA4NA==", "url": "https://github.com/apache/skywalking/pull/4793#discussion_r426151084", "bodyText": "These lines should not be re-formated.", "author": "wu-sheng", "createdAt": "2020-05-16T12:52:19Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/StorageModels.java", "diffHunk": "@@ -119,8 +130,8 @@ private void retrieval(Class<?> clazz,\n                 }\n \n                 indexDefinitions.forEach(indexDefinition -> extraQueryIndices.add(new ExtraQueryIndex(\n-                    column.columnName(),\n-                    indexDefinition.withColumns()\n+                        column.columnName(),\n+                        indexDefinition.withColumns()", "originalCommit": "002f4c2573399a96649a64fb399dc8b7e80cd175", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MTEyMg==", "url": "https://github.com/apache/skywalking/pull/4793#discussion_r426151122", "bodyText": "Default values should follow the config file suggestions too.", "author": "wu-sheng", "createdAt": "2020-05-16T12:52:44Z", "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchConfig.java", "diffHunk": "@@ -32,7 +33,9 @@\n     @Setter\n     String protocol = \"http\";\n     @Setter\n-    private int indexShardsNumber = 2;\n+    private int indexShardsNumber = 1;\n+    @Setter\n+    private int superDatasetIndexShardsFactor = 5;", "originalCommit": "002f4c2573399a96649a64fb399dc8b7e80cd175", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MTEyNw==", "url": "https://github.com/apache/skywalking/pull/4793#discussion_r426151127", "bodyText": "These lines should not be re-formated.", "author": "wu-sheng", "createdAt": "2020-05-16T12:52:51Z", "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchConfig.java", "diffHunk": "@@ -76,7 +79,6 @@\n      * @since 7.0.0 dayStep represents how many days a single one index represents. Default is 1, meaning no difference\n      * with previous versions. But if there isn't much traffic for single one day, user could set the step larger to\n      * reduce the number of indexes, and keep the TTL longer.\n-     *", "originalCommit": "002f4c2573399a96649a64fb399dc8b7e80cd175", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIzNzI0OQ==", "url": "https://github.com/apache/skywalking/pull/4793#discussion_r426237249", "bodyText": "When I add this line, it will still be cleared after formatting with skywalking code style", "author": "EvanLjp", "createdAt": "2020-05-17T09:12:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MTEyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MTEzMA==", "url": "https://github.com/apache/skywalking/pull/4793#discussion_r426151130", "bodyText": "These lines should not be re-formated.", "author": "wu-sheng", "createdAt": "2020-05-16T12:52:58Z", "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/StorageEsInstaller.java", "diffHunk": "@@ -62,16 +65,16 @@ protected boolean isExists(Model model) throws StorageException {\n     protected void createTable(Model model) throws StorageException {\n         ElasticSearchClient esClient = (ElasticSearchClient) client;\n \n-        Map<String, Object> settings = createSetting(model.isRecord());\n+        Map<String, Object> settings = createSetting(model);\n         Map<String, Object> mapping = createMapping(model);\n         log.info(\"index {}'s columnTypeEsMapping builder str: {}\", esClient.formatIndexName(model.getName()), mapping\n-            .toString());\n+                                                                                                                      .toString());", "originalCommit": "002f4c2573399a96649a64fb399dc8b7e80cd175", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MTEzOQ==", "url": "https://github.com/apache/skywalking/pull/4793#discussion_r426151139", "bodyText": "These lines should not be re-formated.", "author": "wu-sheng", "createdAt": "2020-05-16T12:53:01Z", "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/StorageEsInstaller.java", "diffHunk": "@@ -62,16 +65,16 @@ protected boolean isExists(Model model) throws StorageException {\n     protected void createTable(Model model) throws StorageException {\n         ElasticSearchClient esClient = (ElasticSearchClient) client;\n \n-        Map<String, Object> settings = createSetting(model.isRecord());\n+        Map<String, Object> settings = createSetting(model);\n         Map<String, Object> mapping = createMapping(model);\n         log.info(\"index {}'s columnTypeEsMapping builder str: {}\", esClient.formatIndexName(model.getName()), mapping\n-            .toString());\n+                                                                                                                      .toString());\n \n         try {\n             if (!esClient.isExistsTemplate(model.getName())) {\n                 boolean isAcknowledged = esClient.createTemplate(model.getName(), settings, mapping);\n                 log.info(\n-                    \"create {} index template finished, isAcknowledged: {}\", model.getName(), isAcknowledged);\n+                        \"create {} index template finished, isAcknowledged: {}\", model.getName(), isAcknowledged);", "originalCommit": "002f4c2573399a96649a64fb399dc8b7e80cd175", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3fead29fe6379c1784feb1e21b28888266242d69", "url": "https://github.com/apache/skywalking/commit/3fead29fe6379c1784feb1e21b28888266242d69", "message": "explain the meaning of indexShardsNumber and superDatasetIndexShardsFactor", "committedDate": "2020-05-16T13:40:59Z", "type": "commit"}, {"oid": "f84bf3ea704ac9c0b7d751d6533d8ad25ba94625", "url": "https://github.com/apache/skywalking/commit/f84bf3ea704ac9c0b7d751d6533d8ad25ba94625", "message": "code style format", "committedDate": "2020-05-17T08:19:36Z", "type": "commit"}, {"oid": "b9c0d17a67d7213e7426b1449410700079b0ac2a", "url": "https://github.com/apache/skywalking/commit/b9c0d17a67d7213e7426b1449410700079b0ac2a", "message": "Merge branch 'master' into master", "committedDate": "2020-05-17T08:35:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIzNDYzMQ==", "url": "https://github.com/apache/skywalking/pull/4793#discussion_r426234631", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    new ColumnName(modelName, column.columnName()), field.getType(), column.matchQuery(),\n          \n          \n            \n                                    column\n          \n          \n            \n                                        .storageOnly(), column.dataType().isValue(), column.length()\n          \n          \n            \n                                ));\n          \n          \n            \n                                    new ColumnName(modelName, column.columnName()), field.getType(), column.matchQuery(),\n          \n          \n            \n                                    column.storageOnly(), column.dataType().isValue(), column.length()\n          \n          \n            \n                                ));\n          \n      \n    \n    \n  \n\nThese lines seems should be layout better.", "author": "wu-sheng", "createdAt": "2020-05-17T08:44:07Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/StorageModels.java", "diffHunk": "@@ -99,14 +109,18 @@ private void retrieval(Class<?> clazz,\n                 Column column = field.getAnnotation(Column.class);\n                 modelColumns.add(\n                     new ModelColumn(\n-                        new ColumnName(modelName, column.columnName()), field.getType(), column.matchQuery(), column\n-                        .storageOnly(), column.dataType().isValue(), column.length()));\n+                        new ColumnName(modelName, column.columnName()), field.getType(), column.matchQuery(),\n+                        column\n+                            .storageOnly(), column.dataType().isValue(), column.length()\n+                    ));", "originalCommit": "b9c0d17a67d7213e7426b1449410700079b0ac2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIzNjI3Ng==", "url": "https://github.com/apache/skywalking/pull/4793#discussion_r426236276", "bodyText": "already change, Since code style is not installed this time, there will not be so many formatting problems next time", "author": "EvanLjp", "createdAt": "2020-05-17T09:02:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIzNDYzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIzNDY1Mw==", "url": "https://github.com/apache/skywalking/pull/4793#discussion_r426234653", "bodyText": "What does this mean?", "author": "wu-sheng", "createdAt": "2020-05-17T08:44:24Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/StorageModels.java", "diffHunk": "@@ -52,14 +55,17 @@ public Model add(Class<?> aClass, int scopeId, Storage storage, boolean record)\n         // Check this scope id is valid.\n         DefaultScopeDefine.nameOf(scopeId);\n \n+        // extract properties from class\n         List<ModelColumn> modelColumns = new ArrayList<>();\n         List<ExtraQueryIndex> extraQueryIndices = new ArrayList<>();\n+        // extract", "originalCommit": "b9c0d17a67d7213e7426b1449410700079b0ac2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIzNTc5MA==", "url": "https://github.com/apache/skywalking/pull/4793#discussion_r426235790", "bodyText": "already remove it", "author": "EvanLjp", "createdAt": "2020-05-17T08:55:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIzNDY1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIzNDY3OA==", "url": "https://github.com/apache/skywalking/pull/4793#discussion_r426234678", "bodyText": "What does this mean? This doesn't match the codes.", "author": "wu-sheng", "createdAt": "2020-05-17T08:44:38Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/StorageModels.java", "diffHunk": "@@ -52,14 +55,17 @@ public Model add(Class<?> aClass, int scopeId, Storage storage, boolean record)\n         // Check this scope id is valid.\n         DefaultScopeDefine.nameOf(scopeId);\n \n+        // extract properties from class", "originalCommit": "b9c0d17a67d7213e7426b1449410700079b0ac2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIzNTc1NA==", "url": "https://github.com/apache/skywalking/pull/4793#discussion_r426235754", "bodyText": "already remove it", "author": "EvanLjp", "createdAt": "2020-05-17T08:55:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIzNDY3OA=="}], "type": "inlineReview"}, {"oid": "f176bdbb28a466f0683d341d7b5eb1782068438f", "url": "https://github.com/apache/skywalking/commit/f176bdbb28a466f0683d341d7b5eb1782068438f", "message": "code style format", "committedDate": "2020-05-17T08:55:05Z", "type": "commit"}, {"oid": "34df4295c55fb7343a4e3e3dc86ff417d44f0010", "url": "https://github.com/apache/skywalking/commit/34df4295c55fb7343a4e3e3dc86ff417d44f0010", "message": "code style format and change notes", "committedDate": "2020-05-17T08:59:25Z", "type": "commit"}]}