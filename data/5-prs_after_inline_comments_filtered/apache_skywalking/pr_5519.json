{"pr_number": 5519, "pr_title": "Add support for xxl-job", "pr_createdAt": "2020-09-18T16:46:04Z", "pr_url": "https://github.com/apache/skywalking/pull/5519", "timeline": [{"oid": "6f784447a805811d14136f5f7405d10822aaad44", "url": "https://github.com/apache/skywalking/commit/6f784447a805811d14136f5f7405d10822aaad44", "message": "Add support for xxl-job", "committedDate": "2020-09-18T16:41:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1NDMwMQ==", "url": "https://github.com/apache/skywalking/pull/5519#discussion_r491254301", "bodyText": "Why need to change this?", "author": "wu-sheng", "createdAt": "2020-09-19T01:51:23Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/MultiClassNameMatch.java", "diffHunk": "@@ -57,7 +57,7 @@ public boolean isMatch(TypeDescription typeDescription) {\n         return matchClassNames.contains(typeDescription.getTypeName());\n     }\n \n-    public static ClassMatch byMultiClassMatch(String... classNames) {\n+    public static IndirectMatch byMultiClassMatch(String... classNames) {", "originalCommit": "6f784447a805811d14136f5f7405d10822aaad44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1ODY0NQ==", "url": "https://github.com/apache/skywalking/pull/5519#discussion_r491258645", "bodyText": "Change to use it here\nLogicalMatchOperation#not only accept subtype IndirectMatch.", "author": "hailin0", "createdAt": "2020-09-19T02:39:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1NDMwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1NDcwMg==", "url": "https://github.com/apache/skywalking/pull/5519#discussion_r491254702", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ContextManager.activeSpan().errorOccurred().log(t);\n          \n          \n            \n                    ContextManager.activeSpan().log(t);\n          \n      \n    \n    \n  \n\nSince #5426, errorOccurred() should be called when and only when the logic error, like response code 500.", "author": "wu-sheng", "createdAt": "2020-09-19T01:54:43Z", "path": "apm-sniffer/apm-sdk-plugin/xxl-job-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/xxljob/ScriptJobHandlerMethodInterceptor.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.xxljob;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.plugin.xxljob.Constants.JOB_PARAM;\n+\n+/**\n+ * Intercept method of {@link com.xxl.job.core.handler.impl.ScriptJobHandler#execute(String)}.\n+ * record the xxl-job script job local span.\n+ */\n+public class ScriptJobHandlerMethodInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        String jobTypeAndId = (String) objInst.getSkyWalkingDynamicField();\n+        String jobParam = (String) allArguments[0];\n+        String operationName = ComponentsDefine.XXL_JOB.getName() + \"/ScriptJob/\" + jobTypeAndId;\n+\n+        AbstractSpan span = ContextManager.createLocalSpan(operationName);\n+        span.setComponent(ComponentsDefine.XXL_JOB);\n+        Tags.LOGIC_ENDPOINT.set(span, Tags.VAL_LOCAL_SPAN_AS_LOGIC_ENDPOINT);\n+        span.tag(JOB_PARAM, jobParam);\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        ContextManager.stopSpan();\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Throwable t) {\n+        ContextManager.activeSpan().errorOccurred().log(t);", "originalCommit": "6f784447a805811d14136f5f7405d10822aaad44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1NDgzNw==", "url": "https://github.com/apache/skywalking/pull/5519#discussion_r491254837", "bodyText": "Normally, #log has included the errorOccurred.", "author": "wu-sheng", "createdAt": "2020-09-19T01:55:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1NDcwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1NDczMw==", "url": "https://github.com/apache/skywalking/pull/5519#discussion_r491254733", "bodyText": "Same here about errorOccurred.", "author": "wu-sheng", "createdAt": "2020-09-19T01:54:57Z", "path": "apm-sniffer/apm-sdk-plugin/xxl-job-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/xxljob/SimpleJobHandlerMethodInterceptor.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.xxljob;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.plugin.xxljob.Constants.JOB_PARAM;\n+\n+/**\n+ * Intercept execute(String) method on implement class of {@link com.xxl.job.core.handler.IJobHandler}.\n+ * record the xxl-job simple job local span.\n+ */\n+public class SimpleJobHandlerMethodInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        String jobParam = (String) allArguments[0];\n+        String operationName = ComponentsDefine.XXL_JOB.getName() + \"/SimpleJob/\" + method.getDeclaringClass().getName();\n+\n+        AbstractSpan span = ContextManager.createLocalSpan(operationName);\n+        span.setComponent(ComponentsDefine.XXL_JOB);\n+        Tags.LOGIC_ENDPOINT.set(span, Tags.VAL_LOCAL_SPAN_AS_LOGIC_ENDPOINT);\n+        span.tag(JOB_PARAM, jobParam);\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        ContextManager.stopSpan();\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Throwable t) {\n+        ContextManager.activeSpan().errorOccurred().log(t);", "originalCommit": "6f784447a805811d14136f5f7405d10822aaad44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1NDc5Mg==", "url": "https://github.com/apache/skywalking/pull/5519#discussion_r491254792", "bodyText": "Same errorOccurred here.", "author": "wu-sheng", "createdAt": "2020-09-19T01:55:17Z", "path": "apm-sniffer/apm-sdk-plugin/xxl-job-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/xxljob/MethodJobHandlerMethodInterceptor.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.xxljob;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.plugin.xxljob.Constants.JOB_PARAM;\n+\n+/**\n+ * Intercept method of {@link com.xxl.job.core.handler.impl.MethodJobHandler#execute(String)}.\n+ * record the xxl-job method job local span.\n+ */\n+public class MethodJobHandlerMethodInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        String methodName = (String) objInst.getSkyWalkingDynamicField();\n+        String jobParam = (String) allArguments[0];\n+        String operationName = ComponentsDefine.XXL_JOB.getName() + \"/MethodJob/\" + methodName;\n+\n+        AbstractSpan span = ContextManager.createLocalSpan(operationName);\n+        span.setComponent(ComponentsDefine.XXL_JOB);\n+        Tags.LOGIC_ENDPOINT.set(span, Tags.VAL_LOCAL_SPAN_AS_LOGIC_ENDPOINT);\n+        span.tag(JOB_PARAM, jobParam);\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        ContextManager.stopSpan();\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Throwable t) {\n+        ContextManager.activeSpan().errorOccurred().log(t);", "originalCommit": "6f784447a805811d14136f5f7405d10822aaad44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1NTE1Ng==", "url": "https://github.com/apache/skywalking/pull/5519#discussion_r491255156", "bodyText": "Is there any rule, such as length limitation, for this parameter?", "author": "wu-sheng", "createdAt": "2020-09-19T01:59:26Z", "path": "apm-sniffer/apm-sdk-plugin/xxl-job-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/xxljob/MethodJobHandlerMethodInterceptor.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.xxljob;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.plugin.xxljob.Constants.JOB_PARAM;\n+\n+/**\n+ * Intercept method of {@link com.xxl.job.core.handler.impl.MethodJobHandler#execute(String)}.\n+ * record the xxl-job method job local span.\n+ */\n+public class MethodJobHandlerMethodInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        String methodName = (String) objInst.getSkyWalkingDynamicField();\n+        String jobParam = (String) allArguments[0];", "originalCommit": "6f784447a805811d14136f5f7405d10822aaad44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1OTE2Mw==", "url": "https://github.com/apache/skywalking/pull/5519#discussion_r491259163", "bodyText": "xxl-job defines the type as varchar(512)", "author": "hailin0", "createdAt": "2020-09-19T02:44:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1NTE1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI2MDI3NA==", "url": "https://github.com/apache/skywalking/pull/5519#discussion_r491260274", "bodyText": "Good, then, it is safe for our memory cost.", "author": "wu-sheng", "createdAt": "2020-09-19T02:55:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1NTE1Ng=="}], "type": "inlineReview"}, {"oid": "88d5c111bf509e3be9f95c8a1ab516bdc5f139d5", "url": "https://github.com/apache/skywalking/commit/88d5c111bf509e3be9f95c8a1ab516bdc5f139d5", "message": "fixed", "committedDate": "2020-09-19T02:48:14Z", "type": "commit"}, {"oid": "606fce24958afe629c0b59923e689b9b5f43fa8c", "url": "https://github.com/apache/skywalking/commit/606fce24958afe629c0b59923e689b9b5f43fa8c", "message": "Merge branch 'master' into xxl-job", "committedDate": "2020-09-19T12:33:24Z", "type": "commit"}]}