{"pr_number": 4214, "pr_title": "Support multiple linear values and merging p50/75/90/95/99 into percentile", "pr_createdAt": "2020-01-10T14:15:49Z", "pr_url": "https://github.com/apache/skywalking/pull/4214", "timeline": [{"oid": "39c9222ded0705a529636b7a9caedd939886a7af", "url": "https://github.com/apache/skywalking/commit/39c9222ded0705a529636b7a9caedd939886a7af", "message": "Support new percentile func with new alarm and exporter for this new func.", "committedDate": "2020-01-10T09:04:04Z", "type": "commit"}, {"oid": "604feef09e678b044f0b2faf3acf4ac2fa62e69e", "url": "https://github.com/apache/skywalking/commit/604feef09e678b044f0b2faf3acf4ac2fa62e69e", "message": "Fix e2e and OAL script", "committedDate": "2020-01-10T09:10:19Z", "type": "commit"}, {"oid": "898cefacd9dab058c392096fd4cfeacb37f68f82", "url": "https://github.com/apache/skywalking/commit/898cefacd9dab058c392096fd4cfeacb37f68f82", "message": "Fix wrong column.", "committedDate": "2020-01-10T09:54:14Z", "type": "commit"}, {"oid": "446032a0e904e1a3eabaec31d3985459b219352d", "url": "https://github.com/apache/skywalking/commit/446032a0e904e1a3eabaec31d3985459b219352d", "message": "Fix percentile bug and oal engine bug.", "committedDate": "2020-01-10T12:27:38Z", "type": "commit"}, {"oid": "05d791a92f28fc48dbf8d6bde5f7e974867c8b93", "url": "https://github.com/apache/skywalking/commit/05d791a92f28fc48dbf8d6bde5f7e974867c8b93", "message": "Update query protocol and add percentile test case", "committedDate": "2020-01-10T12:54:14Z", "type": "commit"}, {"oid": "0d4f2cbae12f28421a5cbc4845f7e323843c937e", "url": "https://github.com/apache/skywalking/commit/0d4f2cbae12f28421a5cbc4845f7e323843c937e", "message": "Support new query", "committedDate": "2020-01-10T14:02:19Z", "type": "commit"}, {"oid": "d7b42e3150fdb5f65fa61e00b31ba25e1c3c2fdf", "url": "https://github.com/apache/skywalking/commit/d7b42e3150fdb5f65fa61e00b31ba25e1c3c2fdf", "message": "Adopt GraphQL requirement", "committedDate": "2020-01-10T14:08:50Z", "type": "commit"}, {"oid": "12c8796f6eeb2b9d28b677add2b2ab00e401777b", "url": "https://github.com/apache/skywalking/commit/12c8796f6eeb2b9d28b677add2b2ab00e401777b", "message": "Fix wrong type cast.", "committedDate": "2020-01-10T15:05:48Z", "type": "commit"}, {"oid": "a2113b12fd765c3a27b31b45964f8e8df33a8c4d", "url": "https://github.com/apache/skywalking/commit/a2113b12fd765c3a27b31b45964f8e8df33a8c4d", "message": "Fix query in H2 and ES.", "committedDate": "2020-01-10T15:21:19Z", "type": "commit"}, {"oid": "9b7cc82f1de464174a369f670bed885652b3abb7", "url": "https://github.com/apache/skywalking/commit/9b7cc82f1de464174a369f670bed885652b3abb7", "message": "Merge branch 'master' into percentile", "committedDate": "2020-01-10T15:22:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI2NjM2NQ==", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365266365", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * IntValueHolder always holds a set of int(s).\n          \n          \n            \n             * MultiIntValuesHolder always holds a set of int(s).", "author": "kezhenxu94", "createdAt": "2020-01-10T14:43:51Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/MultiIntValuesHolder.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.analysis.metrics;\n+\n+/**\n+ * IntValueHolder always holds a set of int(s).", "originalCommit": "d7b42e3150fdb5f65fa61e00b31ba25e1c3c2fdf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI2NzA4Nw==", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365267087", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Percentile is a better implementation than {@link PxxMetrics}. It is introduced since 7.0.0, it could calculate the\n          \n          \n            \n             * PercentileMetrics is a better implementation than {@link PxxMetrics}. It is introduced since 7.0.0, it could calculate the", "author": "kezhenxu94", "createdAt": "2020-01-10T14:45:21Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentileMetrics.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+\n+package org.apache.skywalking.oap.server.core.analysis.metrics;\n+\n+import java.util.Comparator;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Arg;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Entrance;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.MetricsFunction;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.SourceFrom;\n+import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+\n+/**\n+ * Percentile is a better implementation than {@link PxxMetrics}. It is introduced since 7.0.0, it could calculate the", "originalCommit": "d7b42e3150fdb5f65fa61e00b31ba25e1c3c2fdf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5NjQ4Mw==", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365296483", "bodyText": "This is using the func name.", "author": "wu-sheng", "createdAt": "2020-01-10T15:43:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI2NzA4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4Mzk3MQ==", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365283971", "bodyText": "Is it reasonable to make it 0 by default? My intuition of the following configs:\nthreshold: 1000,1000\nmay be just monitor and alarm the p99 and p95 only, ignoring others percentile metrics, and your implementation seems to always send alarm? (because the other metrics may be almostly always > 0).\nAnd are there any possibility when the users want to monitor p99 and p75, how to config the threshold?", "author": "kezhenxu94", "createdAt": "2020-01-10T15:20:22Z", "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RunningRule.java", "diffHunk": "@@ -343,6 +345,31 @@ private boolean isMatch() {\n                                 break;\n                         }\n                         break;\n+                    case MULTI_INTS:\n+                        int[] ivalueArray = ((MultiIntValuesHolder)metrics).getValues();\n+                        int[] iaexpected = RunningRule.this.threshold.getIntValuesThreshold();\n+                        MULTI_VALUE_CHECK: for (int i = 0; i < ivalueArray.length; i++) {\n+                            ivalue = ivalueArray[i];\n+                            iexpected = 0;\n+                            if (iaexpected.length > i) {\n+                                iexpected = iaexpected[i];\n+                            }", "originalCommit": "12c8796f6eeb2b9d28b677add2b2ab00e401777b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5NzUxNg==", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365297516", "bodyText": "This is only a fail-safe mechanism, in case user doesn't set enough values.", "author": "wu-sheng", "createdAt": "2020-01-10T15:45:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4Mzk3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMxNjk1OQ==", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365316959", "bodyText": "So the users are expected to set all thresholds for all percentile metrics?", "author": "kezhenxu94", "createdAt": "2020-01-10T16:24:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4Mzk3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMyMDI4NQ==", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365320285", "bodyText": "Yes. Or set to 0, then percentile alarm wouldn't be triggered by it. Because you will use > as OP.", "author": "wu-sheng", "createdAt": "2020-01-10T16:31:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4Mzk3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2NDkxMw==", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365564913", "bodyText": "Sorry, my mistake. All thresholds must be set at current implementation.", "author": "wu-sheng", "createdAt": "2020-01-12T08:10:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4Mzk3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2NDk2NA==", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365564964", "bodyText": "I haven't found a better way to support setting part of it, maybe set - to represent skipping?", "author": "wu-sheng", "createdAt": "2020-01-12T08:11:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4Mzk3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2NTA0Mw==", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365565043", "bodyText": "I haven't found a better way to support setting part of it, maybe set - to represent skipping?\n\nSounds good to me", "author": "kezhenxu94", "createdAt": "2020-01-12T08:13:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4Mzk3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2NTgyMg==", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365565822", "bodyText": "Done, please review.", "author": "wu-sheng", "createdAt": "2020-01-12T08:27:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4Mzk3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4NjU3OQ==", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365286579", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    percentileValues = new IntKeyLongValueHashMap(5);\n          \n          \n            \n                    percentileValues = new IntKeyLongValueHashMap(RANKS.length);", "author": "kezhenxu94", "createdAt": "2020-01-10T15:25:31Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentileMetrics.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+\n+package org.apache.skywalking.oap.server.core.analysis.metrics;\n+\n+import java.util.Comparator;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Arg;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Entrance;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.MetricsFunction;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.SourceFrom;\n+import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+\n+/**\n+ * Percentile is a better implementation than {@link PxxMetrics}. It is introduced since 7.0.0, it could calculate the\n+ * multiple P50/75/90/95/99 values once for all.\n+ *\n+ * @author wusheng\n+ */\n+@MetricsFunction(functionName = \"percentile\")\n+public abstract class PercentileMetrics extends GroupMetrics implements MultiIntValuesHolder {\n+    protected static final String DATASET = \"dataset\";\n+    protected static final String VALUE = \"value\";\n+    protected static final String PRECISION = \"precision\";\n+\n+    private static final int[] RANKS = {50, 75, 90, 95, 99};\n+\n+    @Getter @Setter @Column(columnName = VALUE, isValue = true) private IntKeyLongValueHashMap percentileValues;\n+    @Getter @Setter @Column(columnName = PRECISION) private int precision;\n+    @Getter @Setter @Column(columnName = DATASET) private IntKeyLongValueHashMap dataset;\n+\n+    private boolean isCalculated;\n+\n+    public PercentileMetrics() {\n+        percentileValues = new IntKeyLongValueHashMap(5);", "originalCommit": "9b7cc82f1de464174a369f670bed885652b3abb7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4Njk1Ng==", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365286956", "bodyText": "may reduce one multiply operation, I'm not sure though?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            roofs[i] = Math.round(total * RANKS[i] * 1.0f / 100);\n          \n          \n            \n                            roofs[i] = Math.round(total * RANKS[i] / 100.0);", "author": "kezhenxu94", "createdAt": "2020-01-10T15:26:10Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentileMetrics.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+\n+package org.apache.skywalking.oap.server.core.analysis.metrics;\n+\n+import java.util.Comparator;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Arg;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Entrance;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.MetricsFunction;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.SourceFrom;\n+import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+\n+/**\n+ * Percentile is a better implementation than {@link PxxMetrics}. It is introduced since 7.0.0, it could calculate the\n+ * multiple P50/75/90/95/99 values once for all.\n+ *\n+ * @author wusheng\n+ */\n+@MetricsFunction(functionName = \"percentile\")\n+public abstract class PercentileMetrics extends GroupMetrics implements MultiIntValuesHolder {\n+    protected static final String DATASET = \"dataset\";\n+    protected static final String VALUE = \"value\";\n+    protected static final String PRECISION = \"precision\";\n+\n+    private static final int[] RANKS = {50, 75, 90, 95, 99};\n+\n+    @Getter @Setter @Column(columnName = VALUE, isValue = true) private IntKeyLongValueHashMap percentileValues;\n+    @Getter @Setter @Column(columnName = PRECISION) private int precision;\n+    @Getter @Setter @Column(columnName = DATASET) private IntKeyLongValueHashMap dataset;\n+\n+    private boolean isCalculated;\n+\n+    public PercentileMetrics() {\n+        percentileValues = new IntKeyLongValueHashMap(5);\n+        dataset = new IntKeyLongValueHashMap(30);\n+    }\n+\n+    @Entrance\n+    public final void combine(@SourceFrom int value, @Arg int precision) {\n+        this.isCalculated = false;\n+        this.precision = precision;\n+\n+        int index = value / precision;\n+        IntKeyLongValue element = dataset.get(index);\n+        if (element == null) {\n+            element = new IntKeyLongValue(index, 1);\n+            dataset.put(element.getKey(), element);\n+        } else {\n+            element.addValue(1);\n+        }\n+    }\n+\n+    @Override\n+    public void combine(Metrics metrics) {\n+        this.isCalculated = false;\n+\n+        PercentileMetrics percentileMetrics = (PercentileMetrics)metrics;\n+        combine(percentileMetrics.getDataset(), this.dataset);\n+    }\n+\n+    @Override\n+    public final void calculate() {\n+\n+        if (!isCalculated) {\n+            int total = dataset.values().stream().mapToInt(element -> (int)element.getValue()).sum();\n+\n+            int index = 0;\n+            int[] roofs = new int[RANKS.length];\n+            for (int i = 0; i < RANKS.length; i++) {\n+                roofs[i] = Math.round(total * RANKS[i] * 1.0f / 100);", "originalCommit": "9b7cc82f1de464174a369f670bed885652b3abb7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5ODAxNg==", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365298016", "bodyText": "This should be optimized by the JDK, from my understanding.", "author": "wu-sheng", "createdAt": "2020-01-10T15:46:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4Njk1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4NzU4OA==", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365287588", "bodyText": "Do we need .toArray?", "author": "kezhenxu94", "createdAt": "2020-01-10T15:27:16Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentileMetrics.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+\n+package org.apache.skywalking.oap.server.core.analysis.metrics;\n+\n+import java.util.Comparator;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Arg;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Entrance;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.MetricsFunction;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.SourceFrom;\n+import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+\n+/**\n+ * Percentile is a better implementation than {@link PxxMetrics}. It is introduced since 7.0.0, it could calculate the\n+ * multiple P50/75/90/95/99 values once for all.\n+ *\n+ * @author wusheng\n+ */\n+@MetricsFunction(functionName = \"percentile\")\n+public abstract class PercentileMetrics extends GroupMetrics implements MultiIntValuesHolder {\n+    protected static final String DATASET = \"dataset\";\n+    protected static final String VALUE = \"value\";\n+    protected static final String PRECISION = \"precision\";\n+\n+    private static final int[] RANKS = {50, 75, 90, 95, 99};\n+\n+    @Getter @Setter @Column(columnName = VALUE, isValue = true) private IntKeyLongValueHashMap percentileValues;\n+    @Getter @Setter @Column(columnName = PRECISION) private int precision;\n+    @Getter @Setter @Column(columnName = DATASET) private IntKeyLongValueHashMap dataset;\n+\n+    private boolean isCalculated;\n+\n+    public PercentileMetrics() {\n+        percentileValues = new IntKeyLongValueHashMap(5);\n+        dataset = new IntKeyLongValueHashMap(30);\n+    }\n+\n+    @Entrance\n+    public final void combine(@SourceFrom int value, @Arg int precision) {\n+        this.isCalculated = false;\n+        this.precision = precision;\n+\n+        int index = value / precision;\n+        IntKeyLongValue element = dataset.get(index);\n+        if (element == null) {\n+            element = new IntKeyLongValue(index, 1);\n+            dataset.put(element.getKey(), element);\n+        } else {\n+            element.addValue(1);\n+        }\n+    }\n+\n+    @Override\n+    public void combine(Metrics metrics) {\n+        this.isCalculated = false;\n+\n+        PercentileMetrics percentileMetrics = (PercentileMetrics)metrics;\n+        combine(percentileMetrics.getDataset(), this.dataset);\n+    }\n+\n+    @Override\n+    public final void calculate() {\n+\n+        if (!isCalculated) {\n+            int total = dataset.values().stream().mapToInt(element -> (int)element.getValue()).sum();\n+\n+            int index = 0;\n+            int[] roofs = new int[RANKS.length];\n+            for (int i = 0; i < RANKS.length; i++) {\n+                roofs[i] = Math.round(total * RANKS[i] * 1.0f / 100);\n+            }\n+\n+            int count = 0;\n+            IntKeyLongValue[] sortedData = dataset.values().stream().sorted(new Comparator<IntKeyLongValue>() {\n+                @Override public int compare(IntKeyLongValue o1, IntKeyLongValue o2) {\n+                    return o1.getKey() - o2.getKey();\n+                }\n+            }).toArray(IntKeyLongValue[]::new);", "originalCommit": "9b7cc82f1de464174a369f670bed885652b3abb7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5OTMyNw==", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365299327", "bodyText": "What do you suggest?", "author": "wu-sheng", "createdAt": "2020-01-10T15:49:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4NzU4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ4OTI4Mw==", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365489283", "bodyText": "Simply iterate over the \u201cstream\u201d without creating new object", "author": "kezhenxu94", "createdAt": "2020-01-11T01:47:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4NzU4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ4OTQ2Nw==", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365489467", "bodyText": "I am not familiar with the stream API. Do you have a proposal about how to change?", "author": "wu-sheng", "createdAt": "2020-01-11T01:50:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4NzU4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ5MDE3Mw==", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365490173", "bodyText": "Did not open in IDE just now, and the comparator can be simplified too, trivial though:\ndataset.values().stream().sorted(Comparator.comparingInt(IntKeyLongValue::getKey)).forEach(element -> {\n                count += element.getValue();\n                for (int i = index; i < roofs.length; i++) {\n                    int roof = roofs[i];\n\n                    if (count >= roof) {\n                        percentileValues.put(index, new IntKeyLongValue(index, element.getKey() * precision));\n                        index++;\n                    } else {\n                        break;\n                    }\n                }\n            });\n\nSimply iterate over the \u201cstream\u201d without creating new object\n\nSince you're using several variables that are non-final, it may make it uncomfortable to iterate over the stream directly, just ignore my previous comment, but the comparator can be simplified indeed", "author": "kezhenxu94", "createdAt": "2020-01-11T01:59:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4NzU4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUxODk1Mg==", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365518952", "bodyText": "I copied most of the codes from Pxx, so, I prefer don't change it in this PR at least. If you want to change, let's move this to another new PR about code refactor, OK?", "author": "wu-sheng", "createdAt": "2020-01-11T12:35:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4NzU4OA=="}], "type": "inlineReview"}, {"oid": "502d0a6bfb2f509f99c3108d9c68eae52d9a747e", "url": "https://github.com/apache/skywalking/commit/502d0a6bfb2f509f99c3108d9c68eae52d9a747e", "message": "Fix docs and comments.", "committedDate": "2020-01-10T15:49:10Z", "type": "commit"}, {"oid": "dcbd3055c2360787a1e1812efdaf9de8b7e3e594", "url": "https://github.com/apache/skywalking/commit/dcbd3055c2360787a1e1812efdaf9de8b7e3e594", "message": "Merge branch 'percentile' of https://github.com/apache/skywalking into percentile", "committedDate": "2020-01-10T15:49:32Z", "type": "commit"}, {"oid": "409aeb7bdb6f24e9d4f23b1d8e2406fe33783437", "url": "https://github.com/apache/skywalking/commit/409aeb7bdb6f24e9d4f23b1d8e2406fe33783437", "message": "Fix an e2e compile issue", "committedDate": "2020-01-10T16:21:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMyMjQ0MA==", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365322440", "bodyText": "may be if condition count >= roofs[i] && count<roofs[i+1]? also change for i;", "author": null, "createdAt": "2020-01-10T16:35:09Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentileMetrics.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+\n+package org.apache.skywalking.oap.server.core.analysis.metrics;\n+\n+import java.util.Comparator;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Arg;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Entrance;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.MetricsFunction;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.SourceFrom;\n+import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+\n+/**\n+ * Percentile is a better implementation than {@link PxxMetrics}. It is introduced since 7.0.0, it could calculate the\n+ * multiple P50/75/90/95/99 values once for all.\n+ *\n+ * @author wusheng\n+ */\n+@MetricsFunction(functionName = \"percentile\")\n+public abstract class PercentileMetrics extends GroupMetrics implements MultiIntValuesHolder {\n+    protected static final String DATASET = \"dataset\";\n+    protected static final String VALUE = \"value\";\n+    protected static final String PRECISION = \"precision\";\n+\n+    private static final int[] RANKS = {50, 75, 90, 95, 99};\n+\n+    @Getter @Setter @Column(columnName = VALUE, isValue = true) private IntKeyLongValueHashMap percentileValues;\n+    @Getter @Setter @Column(columnName = PRECISION) private int precision;\n+    @Getter @Setter @Column(columnName = DATASET) private IntKeyLongValueHashMap dataset;\n+\n+    private boolean isCalculated;\n+\n+    public PercentileMetrics() {\n+        percentileValues = new IntKeyLongValueHashMap(RANKS.length);\n+        dataset = new IntKeyLongValueHashMap(30);\n+    }\n+\n+    @Entrance\n+    public final void combine(@SourceFrom int value, @Arg int precision) {\n+        this.isCalculated = false;\n+        this.precision = precision;\n+\n+        int index = value / precision;\n+        IntKeyLongValue element = dataset.get(index);\n+        if (element == null) {\n+            element = new IntKeyLongValue(index, 1);\n+            dataset.put(element.getKey(), element);\n+        } else {\n+            element.addValue(1);\n+        }\n+    }\n+\n+    @Override\n+    public void combine(Metrics metrics) {\n+        this.isCalculated = false;\n+\n+        PercentileMetrics percentileMetrics = (PercentileMetrics)metrics;\n+        combine(percentileMetrics.getDataset(), this.dataset);\n+    }\n+\n+    @Override\n+    public final void calculate() {\n+\n+        if (!isCalculated) {\n+            int total = dataset.values().stream().mapToInt(element -> (int)element.getValue()).sum();\n+\n+            int index = 0;\n+            int[] roofs = new int[RANKS.length];\n+            for (int i = 0; i < RANKS.length; i++) {\n+                roofs[i] = Math.round(total * RANKS[i] * 1.0f / 100);\n+            }\n+\n+            int count = 0;\n+            IntKeyLongValue[] sortedData = dataset.values().stream().sorted(new Comparator<IntKeyLongValue>() {\n+                @Override public int compare(IntKeyLongValue o1, IntKeyLongValue o2) {\n+                    return o1.getKey() - o2.getKey();\n+                }\n+            }).toArray(IntKeyLongValue[]::new);\n+            for (IntKeyLongValue element : sortedData) {\n+                count += element.getValue();\n+                for (int i = index; i < roofs.length; i++) {\n+                    int roof = roofs[i];\n+\n+                    if (count >= roof) {", "originalCommit": "dcbd3055c2360787a1e1812efdaf9de8b7e3e594", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMyODExOQ==", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365328119", "bodyText": "Why? I am not following. Please provide test case to describe the concern.", "author": "wu-sheng", "createdAt": "2020-01-10T16:47:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMyMjQ0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4ODk0Ng==", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365588946", "bodyText": "Should be correct, logical thinking is a bit problematic. above roofs should all hit", "author": null, "createdAt": "2020-01-12T15:02:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMyMjQ0MA=="}], "type": "inlineReview"}, {"oid": "be9d4bd28b965da202e96944efb4a2bb09496507", "url": "https://github.com/apache/skywalking/commit/be9d4bd28b965da202e96944efb4a2bb09496507", "message": "Fix javadoc issue and e2e test issue.", "committedDate": "2020-01-11T01:26:47Z", "type": "commit"}, {"oid": "6e95c8444b069757eb3abf089ecec306f5d4dd34", "url": "https://github.com/apache/skywalking/commit/6e95c8444b069757eb3abf089ecec306f5d4dd34", "message": "Change CPM to Apdex in TTL test.", "committedDate": "2020-01-11T12:28:55Z", "type": "commit"}, {"oid": "df57014cd0b66be220a429d782fa0f8301023227", "url": "https://github.com/apache/skywalking/commit/df57014cd0b66be220a429d782fa0f8301023227", "message": "Fix OAL for TTL e2e", "committedDate": "2020-01-11T13:25:32Z", "type": "commit"}, {"oid": "e24e07ddae3dcbc71a6ed5a948d6e42a6248ccfd", "url": "https://github.com/apache/skywalking/commit/e24e07ddae3dcbc71a6ed5a948d6e42a6248ccfd", "message": "Add metrics query for service percentile.", "committedDate": "2020-01-11T14:13:56Z", "type": "commit"}, {"oid": "b4fedef409047b0fd56b4430895a192e3fea5ba5", "url": "https://github.com/apache/skywalking/commit/b4fedef409047b0fd56b4430895a192e3fea5ba5", "message": "Fix OAL engine bug. Method deserialize is not working when more than two field types are IntKeyLongValueHashMap", "committedDate": "2020-01-11T15:22:17Z", "type": "commit"}, {"oid": "3ae78103ef6d20e4fffc34ae771e072920824f54", "url": "https://github.com/apache/skywalking/commit/3ae78103ef6d20e4fffc34ae771e072920824f54", "message": "Support multiple IntKeyLongValueHashMap fields in remote. About serialize/deserialize methods.", "committedDate": "2020-01-11T16:04:45Z", "type": "commit"}, {"oid": "857a9a990cfa559e517187aef35e67aeccffd6a3", "url": "https://github.com/apache/skywalking/commit/857a9a990cfa559e517187aef35e67aeccffd6a3", "message": "Fix graphql statement error in e2e.", "committedDate": "2020-01-11T16:32:19Z", "type": "commit"}, {"oid": "831721d1dfbff1b31de3f2b5d0cb53d35f3dffbf", "url": "https://github.com/apache/skywalking/commit/831721d1dfbff1b31de3f2b5d0cb53d35f3dffbf", "message": "Fix serialize not working and add generated serialize/deserialize of percentile into test cases.", "committedDate": "2020-01-12T00:59:47Z", "type": "commit"}, {"oid": "75b9446827a44842ed3a3a562b607f4c6b412ae0", "url": "https://github.com/apache/skywalking/commit/75b9446827a44842ed3a3a562b607f4c6b412ae0", "message": "Fix test case format", "committedDate": "2020-01-12T01:03:22Z", "type": "commit"}, {"oid": "b1cc88160b4613e2ffbc868b3a29abd2d2f9b640", "url": "https://github.com/apache/skywalking/commit/b1cc88160b4613e2ffbc868b3a29abd2d2f9b640", "message": "Merge branch 'master' into percentile", "committedDate": "2020-01-12T01:25:20Z", "type": "commit"}, {"oid": "c1f06054380f09ac12709c701222cf34ca4d8206", "url": "https://github.com/apache/skywalking/commit/c1f06054380f09ac12709c701222cf34ca4d8206", "message": "Remove generated code test.", "committedDate": "2020-01-12T01:46:45Z", "type": "commit"}, {"oid": "8f31c41292b50cf14113ed1c4d584023bc6d7dc5", "url": "https://github.com/apache/skywalking/commit/8f31c41292b50cf14113ed1c4d584023bc6d7dc5", "message": "Fix failed e2e test", "committedDate": "2020-01-12T06:13:51Z", "type": "commit"}, {"oid": "b1e600712b9112daa300e25bd9e18f34486ae397", "url": "https://github.com/apache/skywalking/commit/b1e600712b9112daa300e25bd9e18f34486ae397", "message": "Use avg resp time to apdex in the TTL test.", "committedDate": "2020-01-12T07:38:46Z", "type": "commit"}, {"oid": "cef90eeda05af3abe75708cee7ada406742f6d46", "url": "https://github.com/apache/skywalking/commit/cef90eeda05af3abe75708cee7ada406742f6d46", "message": "Merge branch 'master' into percentile", "committedDate": "2020-01-12T08:07:07Z", "type": "commit"}, {"oid": "8cf61473575ca13be390b4c26e0dda13a7fe7adf", "url": "https://github.com/apache/skywalking/commit/8cf61473575ca13be390b4c26e0dda13a7fe7adf", "message": "ADD multiple linear metrics check for endpoint in e2e cluster.", "committedDate": "2020-01-12T08:07:23Z", "type": "commit"}, {"oid": "567621de539a8f90489b591ccc3c1c8f1aa76506", "url": "https://github.com/apache/skywalking/commit/567621de539a8f90489b591ccc3c1c8f1aa76506", "message": "Support `-` to represent no threshold and doc of alarm about this.", "committedDate": "2020-01-12T08:26:45Z", "type": "commit"}, {"oid": "c8ece13a3af694b9e1d24ff58a6e197c499e1ece", "url": "https://github.com/apache/skywalking/commit/c8ece13a3af694b9e1d24ff58a6e197c499e1ece", "message": "Move break to right place.", "committedDate": "2020-01-12T08:53:36Z", "type": "commit"}, {"oid": "d2ed279952c345d866a5127aa9ae98c5edcec392", "url": "https://github.com/apache/skywalking/commit/d2ed279952c345d866a5127aa9ae98c5edcec392", "message": "Fix wrong break(s)", "committedDate": "2020-01-12T08:56:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2NzkxNg==", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365567916", "bodyText": "Missing break after if statement\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                }\n          \n          \n            \n                                                }\n          \n          \n            \n                                                break;", "author": "kezhenxu94", "createdAt": "2020-01-12T09:05:06Z", "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RunningRule.java", "diffHunk": "@@ -343,6 +345,38 @@ private boolean isMatch() {\n                                 break;\n                         }\n                         break;\n+                    case MULTI_INTS:\n+                        int[] ivalueArray = ((MultiIntValuesHolder)metrics).getValues();\n+                        Integer[] iaexpected = RunningRule.this.threshold.getIntValuesThreshold();\n+                        MULTI_VALUE_CHECK:\n+                        for (int i = 0; i < ivalueArray.length; i++) {\n+                            ivalue = ivalueArray[i];\n+                            Integer iNullableExpected = 0;\n+                            if (iaexpected.length > i) {\n+                                iNullableExpected = iaexpected[i];\n+                                if (iNullableExpected == null) {\n+                                    continue;\n+                                }\n+                            }\n+                            switch (op) {\n+                                case LESS:\n+                                    if (ivalue < iNullableExpected) {\n+                                        matchCount++;\n+                                        break MULTI_VALUE_CHECK;\n+                                    }", "originalCommit": "d2ed279952c345d866a5127aa9ae98c5edcec392", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2Nzk1MA==", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365567950", "bodyText": "Same here", "author": "kezhenxu94", "createdAt": "2020-01-12T09:05:46Z", "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RunningRule.java", "diffHunk": "@@ -343,6 +345,38 @@ private boolean isMatch() {\n                                 break;\n                         }\n                         break;\n+                    case MULTI_INTS:\n+                        int[] ivalueArray = ((MultiIntValuesHolder)metrics).getValues();\n+                        Integer[] iaexpected = RunningRule.this.threshold.getIntValuesThreshold();\n+                        MULTI_VALUE_CHECK:\n+                        for (int i = 0; i < ivalueArray.length; i++) {\n+                            ivalue = ivalueArray[i];\n+                            Integer iNullableExpected = 0;\n+                            if (iaexpected.length > i) {\n+                                iNullableExpected = iaexpected[i];\n+                                if (iNullableExpected == null) {\n+                                    continue;\n+                                }\n+                            }\n+                            switch (op) {\n+                                case LESS:\n+                                    if (ivalue < iNullableExpected) {\n+                                        matchCount++;\n+                                        break MULTI_VALUE_CHECK;\n+                                    }\n+                                case GREATER:\n+                                    if (ivalue > iNullableExpected) {\n+                                        matchCount++;\n+                                        break MULTI_VALUE_CHECK;\n+                                    }\n+                                case EQUAL:\n+                                    if (ivalue == iNullableExpected) {\n+                                        matchCount++;\n+                                        break MULTI_VALUE_CHECK;\n+                                    }", "originalCommit": "d2ed279952c345d866a5127aa9ae98c5edcec392", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "da11ad3c1a656137e944723e8a8ace1d429a2463", "url": "https://github.com/apache/skywalking/commit/da11ad3c1a656137e944723e8a8ace1d429a2463", "message": "Fix break and add a test case for multiple values alarm.", "committedDate": "2020-01-12T09:30:58Z", "type": "commit"}, {"oid": "35cf76e21daefee4a870569bc5b3d7711c9201b4", "url": "https://github.com/apache/skywalking/commit/35cf76e21daefee4a870569bc5b3d7711c9201b4", "message": "Fix format.", "committedDate": "2020-01-12T09:43:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU3MTc2Ng==", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365571766", "bodyText": "I'm not very comfortable with the magic number here", "author": "kezhenxu94", "createdAt": "2020-01-12T10:13:18Z", "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetricsQueryEsDAO.java", "diffHunk": "@@ -121,7 +134,43 @@ protected void functionAggregation(Function function, TermsAggregationBuilder pa\n         return intValues;\n     }\n \n-    @Override public Thermodynamic getThermodynamic(String indName, Downsampling downsampling, List<String> ids, String valueCName) throws IOException {\n+    @Override public IntValues[] getMultipleLinearIntValues(String indName, Downsampling downsampling,\n+        List<String> ids, int numOfLinear, String valueCName) throws IOException {\n+        String indexName = ModelName.build(downsampling, indName);\n+\n+        SearchResponse response = getClient().ids(indexName, ids.toArray(new String[0]));\n+        Map<String, Map<String, Object>> idMap = toMap(response);\n+\n+        IntValues[] intValuesArray = new IntValues[numOfLinear];\n+        for (int i = 0; i < intValuesArray.length; i++) {\n+            intValuesArray[i] = new IntValues();\n+        }\n+\n+        for (String id : ids) {\n+            for (int i = 0; i < intValuesArray.length; i++) {\n+                KVInt kvInt = new KVInt();\n+                kvInt.setId(id);\n+                kvInt.setValue(0);\n+                intValuesArray[i].addKVInt(kvInt);\n+            }\n+\n+            if (idMap.containsKey(id)) {\n+                Map<String, Object> source = idMap.get(id);\n+                IntKeyLongValueHashMap multipleValues = new IntKeyLongValueHashMap(5);", "originalCommit": "35cf76e21daefee4a870569bc5b3d7711c9201b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU3Mjc2MA==", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365572760", "bodyText": "What do you expect? 5 should be suitable for 5-10 elements.", "author": "wu-sheng", "createdAt": "2020-01-12T10:30:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU3MTc2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU3Mjk2NA==", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365572964", "bodyText": "What do you expect? 5 should be suitable for 5-10 elements.\n\noops, didn't notice it is a map, I thought it was array mistakenly, ignore me \ud83d\ude04", "author": "kezhenxu94", "createdAt": "2020-01-12T10:33:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU3MTc2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU3MTc5MA==", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365571790", "bodyText": "Same here", "author": "kezhenxu94", "createdAt": "2020-01-12T10:13:28Z", "path": "oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetricsQueryDAO.java", "diffHunk": "@@ -129,6 +143,48 @@ public IntValues getValues(String indName, Downsampling downsampling, long start\n         return orderWithDefault0(intValues, ids);\n     }\n \n+    @Override public IntValues[] getMultipleLinearIntValues(String indName, Downsampling downsampling,\n+        List<String> ids,\n+        int numOfLinear,\n+        String valueCName) throws IOException {\n+        String tableName = ModelName.build(downsampling, indName);\n+\n+        StringBuilder idValues = new StringBuilder();\n+        for (int valueIdx = 0; valueIdx < ids.size(); valueIdx++) {\n+            if (valueIdx != 0) {\n+                idValues.append(\",\");\n+            }\n+            idValues.append(\"'\").append(ids.get(valueIdx)).append(\"'\");\n+        }\n+\n+        IntValues[] intValuesArray = new IntValues[numOfLinear];\n+        for (int i = 0; i < intValuesArray.length; i++) {\n+            intValuesArray[i] = new IntValues();\n+        }\n+\n+        try (Connection connection = h2Client.getConnection()) {\n+            try (ResultSet resultSet = h2Client.executeQuery(connection, \"select id, \" + valueCName + \" from \" + tableName + \" where id in (\" + idValues.toString() + \")\")) {\n+                while (resultSet.next()) {\n+                    String id = resultSet.getString(\"id\");\n+\n+                    IntKeyLongValueHashMap multipleValues = new IntKeyLongValueHashMap(5);", "originalCommit": "35cf76e21daefee4a870569bc5b3d7711c9201b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cf6ea4138d4528377e79644792bb482c81af8ca4", "url": "https://github.com/apache/skywalking/commit/cf6ea4138d4528377e79644792bb482c81af8ca4", "message": "Add more doc for this new feature and GraphQL query protocol.", "committedDate": "2020-01-12T12:51:24Z", "type": "commit"}]}