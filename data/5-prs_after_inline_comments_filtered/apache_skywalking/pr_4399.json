{"pr_number": 4399, "pr_title": "support http api for upstream trace.", "pr_createdAt": "2020-02-23T02:59:45Z", "pr_url": "https://github.com/apache/skywalking/pull/4399", "timeline": [{"oid": "47bb0c0247290e42923496b2b164eb75ec7cdfe6", "url": "https://github.com/apache/skywalking/commit/47bb0c0247290e42923496b2b164eb75ec7cdfe6", "message": "support http api.", "committedDate": "2020-02-23T02:58:16Z", "type": "commit"}, {"oid": "ef86e724ffb8787dddfb294a2c16570d872bfd2b", "url": "https://github.com/apache/skywalking/commit/ef86e724ffb8787dddfb294a2c16570d872bfd2b", "message": "Merge branch 'master' into rest_api", "committedDate": "2020-02-23T03:01:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1OTk0MA==", "url": "https://github.com/apache/skywalking/pull/4399#discussion_r382959940", "bodyText": "Why use service_id rather than serviceId? I thought we keep the same name as gRPC?", "author": "wu-sheng", "createdAt": "2020-02-23T03:13:07Z", "path": "oap-server/server-receiver-plugin/skywalking-register-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/register/provider/handler/v6/rest/ServiceInstanceRegisterServletHandler.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.register.provider.handler.v6.rest;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.servlet.http.HttpServletRequest;\n+import org.apache.skywalking.oap.server.core.CoreModule;\n+import org.apache.skywalking.oap.server.core.cache.ServiceInventoryCache;\n+import org.apache.skywalking.oap.server.core.register.ServiceInstanceInventory;\n+import org.apache.skywalking.oap.server.core.register.ServiceInventory;\n+import org.apache.skywalking.oap.server.core.register.service.IServiceInstanceInventoryRegister;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+import org.apache.skywalking.oap.server.library.server.jetty.ArgumentsParseException;\n+import org.apache.skywalking.oap.server.library.server.jetty.JettyJsonHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.skywalking.oap.server.core.register.ServiceInstanceInventory.PropertyUtil.HOST_NAME;\n+import static org.apache.skywalking.oap.server.core.register.ServiceInstanceInventory.PropertyUtil.PROCESS_NO;\n+\n+public class ServiceInstanceRegisterServletHandler extends JettyJsonHandler {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ServiceInstanceRegisterServletHandler.class);\n+\n+    private final IServiceInstanceInventoryRegister serviceInstanceInventoryRegister;\n+    private final ServiceInventoryCache serviceInventoryCache;\n+    private final Gson gson = new Gson();\n+\n+    private static final String SERVICE_ID = \"service_id\";", "originalCommit": "ef86e724ffb8787dddfb294a2c16570d872bfd2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk2MTU3Ng==", "url": "https://github.com/apache/skywalking/pull/4399#discussion_r382961576", "bodyText": "Okay", "author": "JaredTan95", "createdAt": "2020-02-23T03:54:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1OTk0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1OTk1OQ==", "url": "https://github.com/apache/skywalking/pull/4399#discussion_r382959959", "bodyText": "OS_INFO could be null, we don't require for that, right? And where is the language?", "author": "wu-sheng", "createdAt": "2020-02-23T03:13:57Z", "path": "oap-server/server-receiver-plugin/skywalking-register-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/register/provider/handler/v6/rest/ServiceInstanceRegisterServletHandler.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.register.provider.handler.v6.rest;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.servlet.http.HttpServletRequest;\n+import org.apache.skywalking.oap.server.core.CoreModule;\n+import org.apache.skywalking.oap.server.core.cache.ServiceInventoryCache;\n+import org.apache.skywalking.oap.server.core.register.ServiceInstanceInventory;\n+import org.apache.skywalking.oap.server.core.register.ServiceInventory;\n+import org.apache.skywalking.oap.server.core.register.service.IServiceInstanceInventoryRegister;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+import org.apache.skywalking.oap.server.library.server.jetty.ArgumentsParseException;\n+import org.apache.skywalking.oap.server.library.server.jetty.JettyJsonHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.skywalking.oap.server.core.register.ServiceInstanceInventory.PropertyUtil.HOST_NAME;\n+import static org.apache.skywalking.oap.server.core.register.ServiceInstanceInventory.PropertyUtil.PROCESS_NO;\n+\n+public class ServiceInstanceRegisterServletHandler extends JettyJsonHandler {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ServiceInstanceRegisterServletHandler.class);\n+\n+    private final IServiceInstanceInventoryRegister serviceInstanceInventoryRegister;\n+    private final ServiceInventoryCache serviceInventoryCache;\n+    private final Gson gson = new Gson();\n+\n+    private static final String SERVICE_ID = \"service_id\";\n+    private static final String AGENT_UUID = \"agent_uuid\";\n+    private static final String REGISTER_TIME = \"register_time\";\n+    private static final String INSTANCE_ID = \"instance_id\";\n+    private static final String OS_INFO = \"os_info\";\n+\n+    public ServiceInstanceRegisterServletHandler(ModuleManager moduleManager) {\n+        this.serviceInventoryCache = moduleManager.find(CoreModule.NAME)\n+                                                  .provider()\n+                                                  .getService(ServiceInventoryCache.class);\n+        this.serviceInstanceInventoryRegister = moduleManager.find(CoreModule.NAME).provider().getService(\n+            IServiceInstanceInventoryRegister.class);\n+    }\n+\n+    @Override\n+    public String pathSpec() {\n+        return \"/v2/instance/register\";\n+    }\n+\n+    @Override\n+    protected JsonElement doGet(HttpServletRequest req) throws ArgumentsParseException {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    protected JsonElement doPost(HttpServletRequest req) throws ArgumentsParseException {\n+        JsonObject responseJson = new JsonObject();\n+        try {\n+            JsonObject instance = gson.fromJson(req.getReader(), JsonObject.class);\n+            int serviceId = instance.get(SERVICE_ID).getAsInt();\n+            String agentUUID = instance.get(AGENT_UUID).getAsString();\n+            long registerTime = instance.get(REGISTER_TIME).getAsLong();\n+            JsonObject osInfoJson = instance.get(OS_INFO).getAsJsonObject();", "originalCommit": "ef86e724ffb8787dddfb294a2c16570d872bfd2b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk2MTg5Nw==", "url": "https://github.com/apache/skywalking/pull/4399#discussion_r382961897", "bodyText": "I have begun to adopt your path definitions, please don't change them :)", "author": "wu-sheng", "createdAt": "2020-02-23T04:01:31Z", "path": "oap-server/server-receiver-plugin/skywalking-register-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/register/provider/handler/v6/rest/ServiceInstanceRegisterServletHandler.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.register.provider.handler.v6.rest;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.servlet.http.HttpServletRequest;\n+import org.apache.skywalking.oap.server.core.CoreModule;\n+import org.apache.skywalking.oap.server.core.cache.ServiceInventoryCache;\n+import org.apache.skywalking.oap.server.core.register.ServiceInstanceInventory;\n+import org.apache.skywalking.oap.server.core.register.ServiceInventory;\n+import org.apache.skywalking.oap.server.core.register.service.IServiceInstanceInventoryRegister;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+import org.apache.skywalking.oap.server.library.server.jetty.ArgumentsParseException;\n+import org.apache.skywalking.oap.server.library.server.jetty.JettyJsonHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.skywalking.oap.server.core.register.ServiceInstanceInventory.PropertyUtil.HOST_NAME;\n+import static org.apache.skywalking.oap.server.core.register.ServiceInstanceInventory.PropertyUtil.PROCESS_NO;\n+\n+public class ServiceInstanceRegisterServletHandler extends JettyJsonHandler {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ServiceInstanceRegisterServletHandler.class);\n+\n+    private final IServiceInstanceInventoryRegister serviceInstanceInventoryRegister;\n+    private final ServiceInventoryCache serviceInventoryCache;\n+    private final Gson gson = new Gson();\n+\n+    private static final String SERVICE_ID = \"service_id\";\n+    private static final String AGENT_UUID = \"agent_uuid\";\n+    private static final String REGISTER_TIME = \"register_time\";\n+    private static final String INSTANCE_ID = \"instance_id\";\n+    private static final String OS_INFO = \"os_info\";\n+\n+    public ServiceInstanceRegisterServletHandler(ModuleManager moduleManager) {\n+        this.serviceInventoryCache = moduleManager.find(CoreModule.NAME)\n+                                                  .provider()\n+                                                  .getService(ServiceInventoryCache.class);\n+        this.serviceInstanceInventoryRegister = moduleManager.find(CoreModule.NAME).provider().getService(\n+            IServiceInstanceInventoryRegister.class);\n+    }\n+\n+    @Override\n+    public String pathSpec() {\n+        return \"/v2/instance/register\";", "originalCommit": "ef86e724ffb8787dddfb294a2c16570d872bfd2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzEwMDk1MA==", "url": "https://github.com/apache/skywalking/pull/4399#discussion_r383100950", "bodyText": "Sure.", "author": "JaredTan95", "createdAt": "2020-02-24T06:32:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk2MTg5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk2ODM2Mg==", "url": "https://github.com/apache/skywalking/pull/4399#discussion_r382968362", "bodyText": "Segment should be JSON format directly. There is no way to parse this in proto format. The reason of using HTTP, is there is no protobuf and grpc libs there. Such as Nginx lua. We can't built it.", "author": "wu-sheng", "createdAt": "2020-02-23T06:22:34Z", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/handler/v6/rest/TraceSegmentCollectServletHandler.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider.handler.v6.rest;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.stream.JsonReader;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import javax.servlet.http.HttpServletRequest;\n+import org.apache.skywalking.oap.server.library.server.jetty.JettyJsonHandler;\n+import org.apache.skywalking.oap.server.receiver.trace.provider.handler.v6.rest.reader.TraceSegment;\n+import org.apache.skywalking.oap.server.receiver.trace.provider.handler.v6.rest.reader.UpstreamSegmentJsonReader;\n+import org.apache.skywalking.oap.server.receiver.trace.provider.parser.SegmentParseV2;\n+import org.apache.skywalking.oap.server.receiver.trace.provider.parser.SegmentSource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TraceSegmentCollectServletHandler extends JettyJsonHandler {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(TraceSegmentCollectServletHandler.class);\n+\n+    private final SegmentParseV2.Producer segmentProducer;\n+\n+    public TraceSegmentCollectServletHandler(SegmentParseV2.Producer segmentProducer) {\n+        this.segmentProducer = segmentProducer;\n+    }\n+\n+    @Override\n+    public String pathSpec() {\n+        return \"/v2/segments\";\n+    }\n+\n+    @Override\n+    protected JsonElement doGet(HttpServletRequest req) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    protected JsonElement doPost(HttpServletRequest req) {\n+        if (logger.isDebugEnabled()) {\n+            logger.debug(\"receive stream segment\");\n+        }\n+\n+        try {\n+            BufferedReader bufferedReader = req.getReader();\n+            read(bufferedReader);\n+        } catch (IOException e) {\n+            logger.error(e.getMessage(), e);\n+        }\n+\n+        return null;\n+    }\n+\n+    private UpstreamSegmentJsonReader jsonReader = new UpstreamSegmentJsonReader();\n+\n+    private void read(BufferedReader bufferedReader) throws IOException {\n+        JsonReader reader = new JsonReader(bufferedReader);\n+\n+        reader.beginArray();", "originalCommit": "ef86e724ffb8787dddfb294a2c16570d872bfd2b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA4ODgwNQ==", "url": "https://github.com/apache/skywalking/pull/4399#discussion_r383088805", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            //", "author": null, "createdAt": "2020-02-24T05:17:56Z", "path": "oap-server/server-receiver-plugin/skywalking-register-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/register/provider/handler/v6/rest/ServiceRegisterServletHandler.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.register.provider.handler.v6.rest;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import java.io.IOException;\n+import javax.servlet.http.HttpServletRequest;\n+import org.apache.skywalking.oap.server.core.CoreModule;\n+import org.apache.skywalking.oap.server.core.register.service.IServiceInventoryRegister;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+import org.apache.skywalking.oap.server.library.server.jetty.ArgumentsParseException;\n+import org.apache.skywalking.oap.server.library.server.jetty.JettyJsonHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ServiceRegisterServletHandler extends JettyJsonHandler {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ServiceRegisterServletHandler.class);\n+\n+    private final IServiceInventoryRegister serviceInventoryRegister;\n+    private final Gson gson = new Gson();\n+    private static final String SERVICE_NAME = \"service_name\";\n+    private static final String SERVICE_ID = \"service_id\";\n+\n+    public ServiceRegisterServletHandler(ModuleManager moduleManager) {\n+        serviceInventoryRegister = moduleManager.find(CoreModule.NAME)\n+                                                .provider()\n+                                                .getService(IServiceInventoryRegister.class);\n+    }\n+\n+    @Override\n+    public String pathSpec() {\n+        return \"/v2/service/register\";\n+    }\n+\n+    @Override\n+    protected JsonElement doGet(HttpServletRequest req) throws ArgumentsParseException {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    protected JsonElement doPost(HttpServletRequest req) throws ArgumentsParseException {\n+        JsonArray responseArray = new JsonArray();\n+        try {\n+            JsonArray serviceCodes = gson.fromJson(req.getReader(), JsonArray.class);\n+            for (int i = 0; i < serviceCodes.size(); i++) {\n+                JsonObject service = serviceCodes.get(i).getAsJsonObject();\n+                String serviceCode = service.get(SERVICE_NAME).getAsString();\n+                int serviceId = serviceInventoryRegister.getOrCreate(serviceCode, null);\n+                JsonObject mapping = new JsonObject();\n+                mapping.addProperty(SERVICE_NAME, serviceCode);\n+                mapping.addProperty(SERVICE_ID, serviceId);\n+                responseArray.add(mapping);\n+                //", "originalCommit": "ef86e724ffb8787dddfb294a2c16570d872bfd2b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA4OTczMg==", "url": "https://github.com/apache/skywalking/pull/4399#discussion_r383089732", "bodyText": "Suggested change", "author": null, "createdAt": "2020-02-24T05:25:09Z", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/handler/v6/rest/reader/UpstreamSegmentJsonReader.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider.handler.v6.rest.reader;\n+\n+import com.google.gson.stream.JsonReader;\n+import java.io.IOException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class UpstreamSegmentJsonReader implements StreamJsonReader<TraceSegment> {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(UpstreamSegmentJsonReader.class);\n+\n+    private UniqueIdJsonReader uniqueIdJsonReader = new UniqueIdJsonReader();\n+    private SegmentJsonReader segmentJsonReader = new SegmentJsonReader();\n+\n+    private static final String GLOBAL_TRACE_IDS = \"global_trace_ids\";\n+    private static final String SEGMENT = \"segment\";\n+\n+    @Override\n+    public TraceSegment read(JsonReader reader) throws IOException {\n+        TraceSegment traceSegment = new TraceSegment();\n+\n+        reader.beginObject();\n+        while (reader.hasNext()) {\n+            switch (reader.nextName()) {\n+                case GLOBAL_TRACE_IDS:\n+                    reader.beginArray();\n+                    while (reader.hasNext()) {\n+                        traceSegment.addGlobalTraceId(uniqueIdJsonReader.read(reader));\n+                    }\n+                    reader.endArray();\n+", "originalCommit": "ef86e724ffb8787dddfb294a2c16570d872bfd2b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ce46725871eaee74c83fa4501ec38790714c33f0", "url": "https://github.com/apache/skywalking/commit/ce46725871eaee74c83fa4501ec38790714c33f0", "message": "update logical.", "committedDate": "2020-02-24T06:31:32Z", "type": "commit"}, {"oid": "c1fd3aa61089dff912309cfa392498243ac55b32", "url": "https://github.com/apache/skywalking/commit/c1fd3aa61089dff912309cfa392498243ac55b32", "message": "Merge branch 'master' into rest_api", "committedDate": "2020-02-24T06:33:02Z", "type": "commit"}, {"oid": "1730d5fe0218874c2126c66f05203ce742cf1d10", "url": "https://github.com/apache/skywalking/commit/1730d5fe0218874c2126c66f05203ce742cf1d10", "message": "add license.", "committedDate": "2020-02-24T06:42:27Z", "type": "commit"}, {"oid": "8e0286fe92ac9787e7c98ed9c388a05f69a524d2", "url": "https://github.com/apache/skywalking/commit/8e0286fe92ac9787e7c98ed9c388a05f69a524d2", "message": "Merge remote-tracking branch 'origin/rest_api' into rest_api", "committedDate": "2020-02-24T06:44:39Z", "type": "commit"}, {"oid": "fa74d0d3e39b23d8564593efe573d8f2388dd82a", "url": "https://github.com/apache/skywalking/commit/fa74d0d3e39b23d8564593efe573d8f2388dd82a", "message": "update test", "committedDate": "2020-02-24T06:51:14Z", "type": "commit"}, {"oid": "b922fe3dbf8989738ebc38273a9cbe94fe224732", "url": "https://github.com/apache/skywalking/commit/b922fe3dbf8989738ebc38273a9cbe94fe224732", "message": "update register logical.", "committedDate": "2020-02-24T08:13:47Z", "type": "commit"}, {"oid": "c2a6ca58b51e119123e9b93129fad60124010a71", "url": "https://github.com/apache/skywalking/commit/c2a6ca58b51e119123e9b93129fad60124010a71", "message": "add protobuf java utils license.", "committedDate": "2020-02-24T13:23:02Z", "type": "commit"}, {"oid": "5e13faa7e57f86a9cfbd1fdab4259db371b3a6f4", "url": "https://github.com/apache/skywalking/commit/5e13faa7e57f86a9cfbd1fdab4259db371b3a6f4", "message": "Merge branch 'master' into rest_api", "committedDate": "2020-02-25T06:25:20Z", "type": "commit"}, {"oid": "1f81c6a74bb503e18985ce13d881af022c5185ec", "url": "https://github.com/apache/skywalking/commit/1f81c6a74bb503e18985ce13d881af022c5185ec", "message": "fix maven.", "committedDate": "2020-02-26T12:48:08Z", "type": "commit"}, {"oid": "b4faf8cbb567b039734297541c48f56623457730", "url": "https://github.com/apache/skywalking/commit/b4faf8cbb567b039734297541c48f56623457730", "message": "Merge branch 'master' into rest_api", "committedDate": "2020-02-26T12:50:58Z", "type": "commit"}, {"oid": "11f2d3028b20a9bb0444343c1925f595a4445bfd", "url": "https://github.com/apache/skywalking/commit/11f2d3028b20a9bb0444343c1925f595a4445bfd", "message": "Merge branch 'master' into rest_api", "committedDate": "2020-02-26T13:57:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk2MTAzNg==", "url": "https://github.com/apache/skywalking/pull/4399#discussion_r382961036", "bodyText": "add some error message to response?", "author": "kezhenxu94", "createdAt": "2020-02-23T03:41:05Z", "path": "oap-server/server-receiver-plugin/skywalking-register-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/register/provider/handler/v6/rest/ServiceInstancePingServletHandler.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.register.provider.handler.v6.rest;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import java.io.IOException;\n+import java.util.Objects;\n+import javax.servlet.http.HttpServletRequest;\n+import org.apache.skywalking.apm.network.common.Command;\n+import org.apache.skywalking.apm.network.common.Commands;\n+import org.apache.skywalking.apm.network.trace.component.command.ServiceResetCommand;\n+import org.apache.skywalking.oap.server.core.CoreModule;\n+import org.apache.skywalking.oap.server.core.cache.ServiceInstanceInventoryCache;\n+import org.apache.skywalking.oap.server.core.command.CommandService;\n+import org.apache.skywalking.oap.server.core.register.ServiceInstanceInventory;\n+import org.apache.skywalking.oap.server.core.register.service.IServiceInstanceInventoryRegister;\n+import org.apache.skywalking.oap.server.core.register.service.IServiceInventoryRegister;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+import org.apache.skywalking.oap.server.library.server.jetty.ArgumentsParseException;\n+import org.apache.skywalking.oap.server.library.server.jetty.JettyJsonHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ServiceInstancePingServletHandler extends JettyJsonHandler {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ServiceInstancePingServletHandler.class);\n+\n+    private final IServiceInstanceInventoryRegister serviceInstanceInventoryRegister;\n+    private final ServiceInstanceInventoryCache serviceInstanceInventoryCache;\n+    private final IServiceInventoryRegister serviceInventoryRegister;\n+    private final CommandService commandService;\n+    private final Gson gson = new Gson();\n+\n+    private static final String INSTANCE_ID = \"instance_id\";\n+    private static final String TIME = \"time\";\n+    private static final String SERVICE_INSTANCE_UUID = \"service_instance_UUID\";\n+    private static final String COMMANDS = \"commands\";\n+\n+    public ServiceInstancePingServletHandler(ModuleManager moduleManager) {\n+        this.serviceInstanceInventoryRegister = moduleManager.find(CoreModule.NAME).provider().getService(\n+            IServiceInstanceInventoryRegister.class);\n+        this.serviceInstanceInventoryCache = moduleManager.find(CoreModule.NAME).provider().getService(\n+            ServiceInstanceInventoryCache.class);\n+        this.serviceInventoryRegister = moduleManager.find(CoreModule.NAME).provider().getService(\n+            IServiceInventoryRegister.class);\n+        this.commandService = moduleManager.find(CoreModule.NAME).provider().getService(CommandService.class);\n+    }\n+\n+    @Override\n+    public String pathSpec() {\n+        return \"/v2/instance/heartbeat\";\n+    }\n+\n+    @Override\n+    protected JsonElement doGet(HttpServletRequest req) throws ArgumentsParseException {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    protected JsonElement doPost(HttpServletRequest req) throws ArgumentsParseException, IOException {\n+        JsonObject responseJson = new JsonObject();\n+        try {\n+            JsonObject heartBeat = gson.fromJson(req.getReader(), JsonObject.class);\n+            int instanceId = heartBeat.get(INSTANCE_ID).getAsInt();\n+            long heartBeatTime = heartBeat.get(TIME).getAsLong();\n+            String serviceInstanceUUID = heartBeat.get(SERVICE_INSTANCE_UUID).getAsString();\n+\n+            serviceInstanceInventoryRegister.heartbeat(instanceId, heartBeatTime);\n+            ServiceInstanceInventory serviceInstanceInventory = serviceInstanceInventoryCache.get(instanceId);\n+            if (Objects.nonNull(serviceInstanceInventory)) {\n+                serviceInventoryRegister.heartbeat(serviceInstanceInventory.getServiceId(), heartBeatTime);\n+            } else {\n+                logger.warn(\n+                    \"Can't found service by service instance id from cache, service instance id is: {}\", instanceId);\n+\n+                final ServiceResetCommand resetCommand = commandService.newResetCommand(\n+                    instanceId, heartBeatTime, serviceInstanceUUID);\n+                final Command command = resetCommand.serialize().build();\n+                final Commands nextCommands = Commands.newBuilder().addCommands(command).build();\n+                responseJson.add(COMMANDS, gson.toJsonTree(nextCommands, Commands.class));\n+            }\n+            responseJson.addProperty(INSTANCE_ID, instanceId);\n+            responseJson.addProperty(TIME, heartBeatTime);\n+        } catch (IOException e) {\n+            logger.error(e.getMessage(), e);", "originalCommit": "ef86e724ffb8787dddfb294a2c16570d872bfd2b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk2MTEzNg==", "url": "https://github.com/apache/skywalking/pull/4399#discussion_r382961136", "bodyText": "use org.apache.skywalking.oap.server.library.util.ProtoBufJsonUtils#toJSON", "author": "kezhenxu94", "createdAt": "2020-02-23T03:43:37Z", "path": "oap-server/server-receiver-plugin/skywalking-register-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/register/provider/handler/v6/rest/ServiceInstancePingServletHandler.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.register.provider.handler.v6.rest;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import java.io.IOException;\n+import java.util.Objects;\n+import javax.servlet.http.HttpServletRequest;\n+import org.apache.skywalking.apm.network.common.Command;\n+import org.apache.skywalking.apm.network.common.Commands;\n+import org.apache.skywalking.apm.network.trace.component.command.ServiceResetCommand;\n+import org.apache.skywalking.oap.server.core.CoreModule;\n+import org.apache.skywalking.oap.server.core.cache.ServiceInstanceInventoryCache;\n+import org.apache.skywalking.oap.server.core.command.CommandService;\n+import org.apache.skywalking.oap.server.core.register.ServiceInstanceInventory;\n+import org.apache.skywalking.oap.server.core.register.service.IServiceInstanceInventoryRegister;\n+import org.apache.skywalking.oap.server.core.register.service.IServiceInventoryRegister;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+import org.apache.skywalking.oap.server.library.server.jetty.ArgumentsParseException;\n+import org.apache.skywalking.oap.server.library.server.jetty.JettyJsonHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ServiceInstancePingServletHandler extends JettyJsonHandler {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ServiceInstancePingServletHandler.class);\n+\n+    private final IServiceInstanceInventoryRegister serviceInstanceInventoryRegister;\n+    private final ServiceInstanceInventoryCache serviceInstanceInventoryCache;\n+    private final IServiceInventoryRegister serviceInventoryRegister;\n+    private final CommandService commandService;\n+    private final Gson gson = new Gson();\n+\n+    private static final String INSTANCE_ID = \"instance_id\";\n+    private static final String TIME = \"time\";\n+    private static final String SERVICE_INSTANCE_UUID = \"service_instance_UUID\";\n+    private static final String COMMANDS = \"commands\";\n+\n+    public ServiceInstancePingServletHandler(ModuleManager moduleManager) {\n+        this.serviceInstanceInventoryRegister = moduleManager.find(CoreModule.NAME).provider().getService(\n+            IServiceInstanceInventoryRegister.class);\n+        this.serviceInstanceInventoryCache = moduleManager.find(CoreModule.NAME).provider().getService(\n+            ServiceInstanceInventoryCache.class);\n+        this.serviceInventoryRegister = moduleManager.find(CoreModule.NAME).provider().getService(\n+            IServiceInventoryRegister.class);\n+        this.commandService = moduleManager.find(CoreModule.NAME).provider().getService(CommandService.class);\n+    }\n+\n+    @Override\n+    public String pathSpec() {\n+        return \"/v2/instance/heartbeat\";\n+    }\n+\n+    @Override\n+    protected JsonElement doGet(HttpServletRequest req) throws ArgumentsParseException {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    protected JsonElement doPost(HttpServletRequest req) throws ArgumentsParseException, IOException {\n+        JsonObject responseJson = new JsonObject();\n+        try {\n+            JsonObject heartBeat = gson.fromJson(req.getReader(), JsonObject.class);\n+            int instanceId = heartBeat.get(INSTANCE_ID).getAsInt();\n+            long heartBeatTime = heartBeat.get(TIME).getAsLong();\n+            String serviceInstanceUUID = heartBeat.get(SERVICE_INSTANCE_UUID).getAsString();\n+\n+            serviceInstanceInventoryRegister.heartbeat(instanceId, heartBeatTime);\n+            ServiceInstanceInventory serviceInstanceInventory = serviceInstanceInventoryCache.get(instanceId);\n+            if (Objects.nonNull(serviceInstanceInventory)) {\n+                serviceInventoryRegister.heartbeat(serviceInstanceInventory.getServiceId(), heartBeatTime);\n+            } else {\n+                logger.warn(\n+                    \"Can't found service by service instance id from cache, service instance id is: {}\", instanceId);\n+\n+                final ServiceResetCommand resetCommand = commandService.newResetCommand(\n+                    instanceId, heartBeatTime, serviceInstanceUUID);\n+                final Command command = resetCommand.serialize().build();\n+                final Commands nextCommands = Commands.newBuilder().addCommands(command).build();\n+                responseJson.add(COMMANDS, gson.toJsonTree(nextCommands, Commands.class));", "originalCommit": "ef86e724ffb8787dddfb294a2c16570d872bfd2b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUwMTI0NQ==", "url": "https://github.com/apache/skywalking/pull/4399#discussion_r384501245", "bodyText": "Why not put this test into the library-util module? If I remember correctly, coverage of unit tests locate in another module won't be counted", "author": "kezhenxu94", "createdAt": "2020-02-26T13:47:44Z", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/segment/ProtoBufJsonUtilsTest.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider.parser.listener.segment;\n+\n+import java.io.IOException;\n+import org.apache.skywalking.apm.network.language.agent.UpstreamSegment;\n+import org.apache.skywalking.apm.network.language.agent.v2.SegmentObject;\n+import org.apache.skywalking.oap.server.library.util.ProtoBufJsonUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class ProtoBufJsonUtilsTest {", "originalCommit": "b4faf8cbb567b039734297541c48f56623457730", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUxNzIyNg==", "url": "https://github.com/apache/skywalking/pull/4399#discussion_r384517226", "bodyText": "If so, apm-network module should be added into library-util module.", "author": "JaredTan95", "createdAt": "2020-02-26T14:14:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUwMTI0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU3MjY2MA==", "url": "https://github.com/apache/skywalking/pull/4399#discussion_r384572660", "bodyText": "If so, apm-network module should be added into library-util module.\n\nHum, that's more unacceptable, just ignore it please", "author": "kezhenxu94", "createdAt": "2020-02-26T15:35:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUwMTI0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUwNDk5Ng==", "url": "https://github.com/apache/skywalking/pull/4399#discussion_r384504996", "bodyText": "Seems the returned value is never used, thus .build() is unnecessary", "author": "kezhenxu94", "createdAt": "2020-02-26T13:54:08Z", "path": "oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/ProtoBufJsonUtils.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.library.util;\n+\n+import com.google.protobuf.Message;\n+import com.google.protobuf.util.JsonFormat;\n+import java.io.IOException;\n+\n+public class ProtoBufJsonUtils {\n+\n+    public static String toJSON(Message sourceMessage) throws IOException {\n+        return JsonFormat.printer().print(sourceMessage);\n+    }\n+\n+    /**\n+     * Extract data from a JSON String and use them to construct a Protocol Buffers Message.\n+     *\n+     * @param json          A JSON data string to parse\n+     * @param targetBuilder A Message builder to use to construct the resulting Message\n+     * @return the constructed Message\n+     * @throws com.google.protobuf.InvalidProtocolBufferException Thrown in case of invalid Message data\n+     */\n+    public static Message fromJSON(String json, Message.Builder targetBuilder) throws IOException {\n+        JsonFormat.parser()\n+                  .usingTypeRegistry(JsonFormat.TypeRegistry.newBuilder()\n+                                                            .add(targetBuilder.getDescriptorForType())\n+                                                            .build())\n+                  .ignoringUnknownFields()\n+                  .merge(json, targetBuilder);\n+        return targetBuilder.build();", "originalCommit": "b4faf8cbb567b039734297541c48f56623457730", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUwNjc3OA==", "url": "https://github.com/apache/skywalking/pull/4399#discussion_r384506778", "bodyText": "'StringBuffer stringBuffer' may be declared as 'StringBuilder'", "author": "kezhenxu94", "createdAt": "2020-02-26T13:57:14Z", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/handler/v6/rest/TraceSegmentCollectServletHandler.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider.handler.v6.rest;\n+\n+import com.google.gson.JsonElement;\n+import java.io.BufferedReader;\n+import javax.servlet.http.HttpServletRequest;\n+import org.apache.skywalking.apm.network.language.agent.UpstreamSegment;\n+import org.apache.skywalking.oap.server.library.server.jetty.JettyJsonHandler;\n+import org.apache.skywalking.oap.server.receiver.trace.provider.handler.v6.rest.reader.UpstreamSegmentJsonReader;\n+import org.apache.skywalking.oap.server.receiver.trace.provider.parser.SegmentParseV2;\n+import org.apache.skywalking.oap.server.receiver.trace.provider.parser.SegmentSource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TraceSegmentCollectServletHandler extends JettyJsonHandler {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(TraceSegmentCollectServletHandler.class);\n+\n+    private final SegmentParseV2.Producer segmentProducer;\n+\n+    private UpstreamSegmentJsonReader upstreamSegmentJsonReader = new UpstreamSegmentJsonReader();\n+\n+    public TraceSegmentCollectServletHandler(SegmentParseV2.Producer segmentProducer) {\n+        this.segmentProducer = segmentProducer;\n+    }\n+\n+    @Override\n+    public String pathSpec() {\n+        return \"/v2/segments\";\n+    }\n+\n+    @Override\n+    protected JsonElement doGet(HttpServletRequest req) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    protected JsonElement doPost(HttpServletRequest req) {\n+        if (logger.isDebugEnabled()) {\n+            logger.debug(\"receive stream segment\");\n+        }\n+\n+        StringBuffer stringBuffer = new StringBuffer();", "originalCommit": "b4faf8cbb567b039734297541c48f56623457730", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "244740e32e48be4d1c8801c098919594baeb5e96", "url": "https://github.com/apache/skywalking/commit/244740e32e48be4d1c8801c098919594baeb5e96", "message": "fix maven and finish docs.", "committedDate": "2020-02-29T03:31:47Z", "type": "commit"}, {"oid": "a0d075b7e1e51a33ac2108c03a065448bac9f944", "url": "https://github.com/apache/skywalking/commit/a0d075b7e1e51a33ac2108c03a065448bac9f944", "message": "Merge remote-tracking branch 'origin/rest_api' into rest_api", "committedDate": "2020-02-29T03:32:33Z", "type": "commit"}, {"oid": "446840c039ccfaeb1af305f481d63dd0654ada79", "url": "https://github.com/apache/skywalking/commit/446840c039ccfaeb1af305f481d63dd0654ada79", "message": "remove", "committedDate": "2020-02-29T03:37:54Z", "type": "commit"}, {"oid": "3178f7e5e23d64aaa6be1539f2446e7e14f47164", "url": "https://github.com/apache/skywalking/commit/3178f7e5e23d64aaa6be1539f2446e7e14f47164", "message": "Merge branch 'master' into rest_api", "committedDate": "2020-02-29T03:38:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyNTc4OQ==", "url": "https://github.com/apache/skywalking/pull/4399#discussion_r386025789", "bodyText": "Dangling Javadoc comment", "author": "kezhenxu94", "createdAt": "2020-02-29T12:41:13Z", "path": "oap-server/server-receiver-plugin/skywalking-register-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/register/provider/handler/v6/rest/ServiceInstanceRegisterServletHandler.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.register.provider.handler.v6.rest;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.servlet.http.HttpServletRequest;\n+import org.apache.skywalking.apm.network.common.KeyStringValuePair;\n+import org.apache.skywalking.apm.network.register.v2.ServiceInstance;\n+import org.apache.skywalking.apm.network.register.v2.ServiceInstances;\n+import org.apache.skywalking.oap.server.core.CoreModule;\n+import org.apache.skywalking.oap.server.core.cache.ServiceInventoryCache;\n+import org.apache.skywalking.oap.server.core.register.ServiceInstanceInventory;\n+import org.apache.skywalking.oap.server.core.register.ServiceInventory;\n+import org.apache.skywalking.oap.server.core.register.service.IServiceInstanceInventoryRegister;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+import org.apache.skywalking.oap.server.library.server.jetty.ArgumentsParseException;\n+import org.apache.skywalking.oap.server.library.server.jetty.JettyJsonHandler;\n+import org.apache.skywalking.oap.server.library.util.ProtoBufJsonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.skywalking.oap.server.core.register.ServiceInstanceInventory.PropertyUtil.HOST_NAME;\n+import static org.apache.skywalking.oap.server.core.register.ServiceInstanceInventory.PropertyUtil.IPV4S;\n+import static org.apache.skywalking.oap.server.core.register.ServiceInstanceInventory.PropertyUtil.LANGUAGE;\n+import static org.apache.skywalking.oap.server.core.register.ServiceInstanceInventory.PropertyUtil.OS_NAME;\n+import static org.apache.skywalking.oap.server.core.register.ServiceInstanceInventory.PropertyUtil.PROCESS_NO;\n+\n+public class ServiceInstanceRegisterServletHandler extends JettyJsonHandler {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ServiceInstanceRegisterServletHandler.class);\n+    private static final String INSTANCE_CUSTOMIZED_NAME_PREFIX = \"NAME:\";\n+\n+    private final IServiceInstanceInventoryRegister serviceInstanceInventoryRegister;\n+    private final ServiceInventoryCache serviceInventoryCache;\n+\n+    private static final String KEY = \"key\";\n+    private static final String VALUE = \"value\";\n+\n+    public ServiceInstanceRegisterServletHandler(ModuleManager moduleManager) {\n+        this.serviceInventoryCache = moduleManager.find(CoreModule.NAME)\n+                                                  .provider()\n+                                                  .getService(ServiceInventoryCache.class);\n+        this.serviceInstanceInventoryRegister = moduleManager.find(CoreModule.NAME).provider().getService(\n+            IServiceInstanceInventoryRegister.class);\n+    }\n+\n+    @Override\n+    public String pathSpec() {\n+        return \"/v2/instance/register\";\n+    }\n+\n+    @Override\n+    protected JsonElement doGet(HttpServletRequest req) throws ArgumentsParseException {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    protected JsonElement doPost(HttpServletRequest req) throws ArgumentsParseException {\n+\n+        JsonObject responseJson = new JsonObject();\n+\n+        try {\n+            ServiceInstances.Builder builder = ServiceInstances.newBuilder();\n+            ProtoBufJsonUtils.fromJSON(getJsonBody(req), builder);\n+            List<ServiceInstance> serviceInstances = builder.build().getInstancesList();\n+\n+            serviceInstances.forEach(instance -> {\n+                long time = instance.getTime();\n+                int serviceId = instance.getServiceId();\n+                String instanceUUID = instance.getInstanceUUID();\n+\n+                JsonObject instanceProperties = new JsonObject();\n+                List<String> ipv4s = new ArrayList<>();\n+\n+                for (KeyStringValuePair property : instance.getPropertiesList()) {\n+                    String key = property.getKey();\n+                    switch (key) {\n+                        case HOST_NAME:\n+                            instanceProperties.addProperty(HOST_NAME, property.getValue());\n+                            break;\n+                        case OS_NAME:\n+                            instanceProperties.addProperty(OS_NAME, property.getValue());\n+                            break;\n+                        case LANGUAGE:\n+                            instanceProperties.addProperty(LANGUAGE, property.getValue());\n+                            break;\n+                        case \"ipv4\":\n+                            ipv4s.add(property.getValue());\n+                            break;\n+                        case PROCESS_NO:\n+                            instanceProperties.addProperty(PROCESS_NO, property.getValue());\n+                            break;\n+                        default:\n+                            instanceProperties.addProperty(key, property.getValue());\n+                    }\n+                }\n+                instanceProperties.addProperty(IPV4S, ServiceInstanceInventory.PropertyUtil.ipv4sSerialize(ipv4s));\n+\n+                String instanceName = null;\n+                if (instanceUUID.startsWith(INSTANCE_CUSTOMIZED_NAME_PREFIX)) {\n+                    instanceName = instanceUUID.substring(INSTANCE_CUSTOMIZED_NAME_PREFIX.length());\n+                }\n+\n+                ServiceInventory serviceInventory = serviceInventoryCache.get(serviceId);\n+\n+                if (instanceName == null) {\n+                    /**", "originalCommit": "3178f7e5e23d64aaa6be1539f2446e7e14f47164", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyNTgzOQ==", "url": "https://github.com/apache/skywalking/pull/4399#discussion_r386025839", "bodyText": "no return now", "author": "kezhenxu94", "createdAt": "2020-02-29T12:41:55Z", "path": "oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/ProtoBufJsonUtils.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.library.util;\n+\n+import com.google.protobuf.Message;\n+import com.google.protobuf.util.JsonFormat;\n+import java.io.IOException;\n+\n+public class ProtoBufJsonUtils {\n+\n+    public static String toJSON(Message sourceMessage) throws IOException {\n+        return JsonFormat.printer().print(sourceMessage);\n+    }\n+\n+    /**\n+     * Extract data from a JSON String and use them to construct a Protocol Buffers Message.\n+     *\n+     * @param json          A JSON data string to parse\n+     * @param targetBuilder A Message builder to use to construct the resulting Message\n+     * @return the constructed Message", "originalCommit": "3178f7e5e23d64aaa6be1539f2446e7e14f47164", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "649f430041b4b7cf9fb0bf39d9f9d4d48f578eeb", "url": "https://github.com/apache/skywalking/commit/649f430041b4b7cf9fb0bf39d9f9d4d48f578eeb", "message": "add e2e.", "committedDate": "2020-02-29T14:51:30Z", "type": "commit"}, {"oid": "f5031fa7f3bbb9bff04cf255fcac5ac45b358cbe", "url": "https://github.com/apache/skywalking/commit/f5031fa7f3bbb9bff04cf255fcac5ac45b358cbe", "message": "e2e", "committedDate": "2020-02-29T14:51:40Z", "type": "commit"}, {"oid": "cab97c67bb6b735c5d0105f9ce1b2faeba993ddf", "url": "https://github.com/apache/skywalking/commit/cab97c67bb6b735c5d0105f9ce1b2faeba993ddf", "message": "revert application.yml", "committedDate": "2020-02-29T14:51:40Z", "type": "commit"}, {"oid": "e05e4e924ecfe8c4dc012588424482fc591ff45e", "url": "https://github.com/apache/skywalking/commit/e05e4e924ecfe8c4dc012588424482fc591ff45e", "message": "init e2e", "committedDate": "2020-02-29T14:51:40Z", "type": "commit"}, {"oid": "d714955f705072688ee98df8ff77d2c371cd9a2d", "url": "https://github.com/apache/skywalking/commit/d714955f705072688ee98df8ff77d2c371cd9a2d", "message": "revert application.yml", "committedDate": "2020-02-29T15:06:03Z", "type": "commit"}, {"oid": "599c4fd238dd491f5d996a2cfced6e902fa9ab22", "url": "https://github.com/apache/skywalking/commit/599c4fd238dd491f5d996a2cfced6e902fa9ab22", "message": "Merge branch 'master' into rest_api", "committedDate": "2020-02-29T15:12:41Z", "type": "commit"}, {"oid": "e94b7fe587174c74431081cbdca60e2567881968", "url": "https://github.com/apache/skywalking/commit/e94b7fe587174c74431081cbdca60e2567881968", "message": "active http e2e", "committedDate": "2020-02-29T15:18:33Z", "type": "commit"}, {"oid": "214671ab3c55214a38cd580ece56ef12115542e4", "url": "https://github.com/apache/skywalking/commit/214671ab3c55214a38cd580ece56ef12115542e4", "message": "Merge branch 'rest_api' of github.com:apache/skywalking into rest_api", "committedDate": "2020-02-29T15:19:52Z", "type": "commit"}, {"oid": "9b4a9b83ebeee7ddef104456867cd62c347f1b72", "url": "https://github.com/apache/skywalking/commit/9b4a9b83ebeee7ddef104456867cd62c347f1b72", "message": "fix", "committedDate": "2020-03-01T04:24:07Z", "type": "commit"}, {"oid": "630786d5a244fe482536bfc69101ecab0e9b6976", "url": "https://github.com/apache/skywalking/commit/630786d5a244fe482536bfc69101ecab0e9b6976", "message": "fix json array.", "committedDate": "2020-03-01T05:00:52Z", "type": "commit"}, {"oid": "455857d85b788575a9e24f4fb254e017ed2ba555", "url": "https://github.com/apache/skywalking/commit/455857d85b788575a9e24f4fb254e017ed2ba555", "message": "update e2e.", "committedDate": "2020-03-01T08:01:28Z", "type": "commit"}, {"oid": "4c7b71bd74dfe006292898bb1187a4f7a0093d22", "url": "https://github.com/apache/skywalking/commit/4c7b71bd74dfe006292898bb1187a4f7a0093d22", "message": "fix env in shell.", "committedDate": "2020-03-01T08:02:20Z", "type": "commit"}, {"oid": "0f030d4a61d9cdc27a452b5581e457baf1215725", "url": "https://github.com/apache/skywalking/commit/0f030d4a61d9cdc27a452b5581e457baf1215725", "message": "fix nginx port.", "committedDate": "2020-03-01T12:07:58Z", "type": "commit"}, {"oid": "a1fd779223da02d85dbb14ec53244695d1a8862c", "url": "https://github.com/apache/skywalking/commit/a1fd779223da02d85dbb14ec53244695d1a8862c", "message": "fix container network.", "committedDate": "2020-03-01T12:32:55Z", "type": "commit"}, {"oid": "045a1eb271672c88382021f4b6ac16ac67d05c6c", "url": "https://github.com/apache/skywalking/commit/045a1eb271672c88382021f4b6ac16ac67d05c6c", "message": "fix container network.", "committedDate": "2020-03-01T12:52:46Z", "type": "commit"}, {"oid": "c1aae8b93cd680898eaa94455f27818b68890558", "url": "https://github.com/apache/skywalking/commit/c1aae8b93cd680898eaa94455f27818b68890558", "message": "fix license.", "committedDate": "2020-03-01T13:44:11Z", "type": "commit"}, {"oid": "49d148483b8e9c5562bdfb15a355c81060feeeb4", "url": "https://github.com/apache/skywalking/commit/49d148483b8e9c5562bdfb15a355c81060feeeb4", "message": "e2e:fix lua agent register ip port.", "committedDate": "2020-03-02T02:50:44Z", "type": "commit"}, {"oid": "dfc6a5b3639ffec3250a66720916aaf2a1ee5b10", "url": "https://github.com/apache/skywalking/commit/dfc6a5b3639ffec3250a66720916aaf2a1ee5b10", "message": "e2e:fix lua agent register ip port.", "committedDate": "2020-03-02T02:54:08Z", "type": "commit"}, {"oid": "be624839042dd9256d2c75e3966c075147bf8ebf", "url": "https://github.com/apache/skywalking/commit/be624839042dd9256d2c75e3966c075147bf8ebf", "message": "rename e2e name.", "committedDate": "2020-03-02T05:23:28Z", "type": "commit"}, {"oid": "effc253b8b58fe829984424623972a77fe9c85f0", "url": "https://github.com/apache/skywalking/commit/effc253b8b58fe829984424623972a77fe9c85f0", "message": "rename", "committedDate": "2020-03-02T05:25:12Z", "type": "commit"}, {"oid": "bd5301ab0f87621759a08c762b3a207542ba0d3b", "url": "https://github.com/apache/skywalking/commit/bd5301ab0f87621759a08c762b3a207542ba0d3b", "message": "fix no file.", "committedDate": "2020-03-02T06:07:44Z", "type": "commit"}, {"oid": "1e3e1ee41c35dd78bbc02cdcc4c905211818d42c", "url": "https://github.com/apache/skywalking/commit/1e3e1ee41c35dd78bbc02cdcc4c905211818d42c", "message": "update e2e", "committedDate": "2020-03-03T06:23:27Z", "type": "commit"}, {"oid": "7e04508bcce776ab801501cbdb2da2de3cee920d", "url": "https://github.com/apache/skywalking/commit/7e04508bcce776ab801501cbdb2da2de3cee920d", "message": "fix logical", "committedDate": "2020-03-03T06:39:06Z", "type": "commit"}, {"oid": "eb7cf03b4f8b27b6c3a54b25ed1881d52b8558e2", "url": "https://github.com/apache/skywalking/commit/eb7cf03b4f8b27b6c3a54b25ed1881d52b8558e2", "message": "Update .github/workflows/e2e.yaml\n\nCo-Authored-By: kezhenxu94 <kezhenxu94@apache.org>", "committedDate": "2020-03-03T09:49:05Z", "type": "commit"}, {"oid": "8e87fa2290dca0adaf0b50affa3b2aef553f527e", "url": "https://github.com/apache/skywalking/commit/8e87fa2290dca0adaf0b50affa3b2aef553f527e", "message": "fix docker upstream ip", "committedDate": "2020-03-04T03:51:55Z", "type": "commit"}, {"oid": "e7ab489f6a477f61e41c86178405d12472a98750", "url": "https://github.com/apache/skywalking/commit/e7ab489f6a477f61e41c86178405d12472a98750", "message": "Merge branch 'master' into rest_api", "committedDate": "2020-03-04T07:36:45Z", "type": "commit"}, {"oid": "203d8f0f52ca7c49c1c2fd1c653ca3473170b1e6", "url": "https://github.com/apache/skywalking/commit/203d8f0f52ca7c49c1c2fd1c653ca3473170b1e6", "message": "update expected data.", "committedDate": "2020-03-04T08:35:07Z", "type": "commit"}, {"oid": "1cf45fde7f7719125099160e8266145c70f59a91", "url": "https://github.com/apache/skywalking/commit/1cf45fde7f7719125099160e8266145c70f59a91", "message": "update expected data.", "committedDate": "2020-03-04T12:50:37Z", "type": "commit"}, {"oid": "93b95ee75bb65a4f47d5f6fce7b98e5fe6f6cb66", "url": "https://github.com/apache/skywalking/commit/93b95ee75bb65a4f47d5f6fce7b98e5fe6f6cb66", "message": "update expected data.", "committedDate": "2020-03-05T08:57:25Z", "type": "commit"}, {"oid": "0ca5beb7fc571791e541e27e3cb968ea09d647a6", "url": "https://github.com/apache/skywalking/commit/0ca5beb7fc571791e541e27e3cb968ea09d647a6", "message": "fix yaml.", "committedDate": "2020-03-05T09:49:36Z", "type": "commit"}, {"oid": "458980b83ea696330a582b973eeab6dd4711f6d2", "url": "https://github.com/apache/skywalking/commit/458980b83ea696330a582b973eeab6dd4711f6d2", "message": "update expected data.", "committedDate": "2020-03-05T13:04:19Z", "type": "commit"}, {"oid": "6f3b9df420b2220d86138aedc2d1dfee4ea03a55", "url": "https://github.com/apache/skywalking/commit/6f3b9df420b2220d86138aedc2d1dfee4ea03a55", "message": "update e2e.", "committedDate": "2020-03-06T02:58:30Z", "type": "commit"}, {"oid": "f155d06d787e4757b39c2584bfdef0f5c01a3ac1", "url": "https://github.com/apache/skywalking/commit/f155d06d787e4757b39c2584bfdef0f5c01a3ac1", "message": "update e2e.", "committedDate": "2020-03-06T02:59:07Z", "type": "commit"}, {"oid": "adacfb6fe1e1dd1b5d2398d0b6e6ba64916331d3", "url": "https://github.com/apache/skywalking/commit/adacfb6fe1e1dd1b5d2398d0b6e6ba64916331d3", "message": "Merge branch 'master' into rest_api", "committedDate": "2020-03-06T03:26:27Z", "type": "commit"}, {"oid": "6777c477a294d65ea1d66c8ab7ea2acd29aa8afa", "url": "https://github.com/apache/skywalking/commit/6777c477a294d65ea1d66c8ab7ea2acd29aa8afa", "message": "fix dep", "committedDate": "2020-03-06T03:38:24Z", "type": "commit"}, {"oid": "1bc056299d7cbfbe1463cd94ce4421c250f1aa20", "url": "https://github.com/apache/skywalking/commit/1bc056299d7cbfbe1463cd94ce4421c250f1aa20", "message": "fix request url", "committedDate": "2020-03-06T04:37:57Z", "type": "commit"}, {"oid": "6cbde2bf68fc6a285a3bc8453b4d14a89a7916b7", "url": "https://github.com/apache/skywalking/commit/6cbde2bf68fc6a285a3bc8453b4d14a89a7916b7", "message": "fix request url", "committedDate": "2020-03-06T05:01:55Z", "type": "commit"}, {"oid": "873f573f78e4c07c882c6ca674b2d125b60cbad1", "url": "https://github.com/apache/skywalking/commit/873f573f78e4c07c882c6ca674b2d125b60cbad1", "message": "fix traces.", "committedDate": "2020-03-06T05:35:03Z", "type": "commit"}, {"oid": "d196bbafa1f664d2e84fdba2d62c544d5a5fa5a4", "url": "https://github.com/apache/skywalking/commit/d196bbafa1f664d2e84fdba2d62c544d5a5fa5a4", "message": "fix endpoint verify.", "committedDate": "2020-03-06T07:03:21Z", "type": "commit"}, {"oid": "da18a3febd5bf4e841d024eee6b80f143299474c", "url": "https://github.com/apache/skywalking/commit/da18a3febd5bf4e841d024eee6b80f143299474c", "message": "fix expected data.", "committedDate": "2020-03-06T10:21:22Z", "type": "commit"}, {"oid": "87baa2a2f338aa47cac661650a7447551fdc593f", "url": "https://github.com/apache/skywalking/commit/87baa2a2f338aa47cac661650a7447551fdc593f", "message": "rollback data.", "committedDate": "2020-03-06T10:27:53Z", "type": "commit"}, {"oid": "c1c4ceca4dbe310509c0f494efe498975db03bc8", "url": "https://github.com/apache/skywalking/commit/c1c4ceca4dbe310509c0f494efe498975db03bc8", "message": "update api name.", "committedDate": "2020-03-06T12:13:27Z", "type": "commit"}]}