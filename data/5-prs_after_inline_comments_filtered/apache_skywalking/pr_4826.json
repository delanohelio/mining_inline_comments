{"pr_number": 4826, "pr_title": "fix ClassCastException in KafkaProducerInterceptor", "pr_createdAt": "2020-05-26T05:56:45Z", "pr_url": "https://github.com/apache/skywalking/pull/4826", "timeline": [{"oid": "f9e91a7d8b68ef95c4c32a482649d586cb85e074", "url": "https://github.com/apache/skywalking/commit/f9e91a7d8b68ef95c4c32a482649d586cb85e074", "message": "fix bug: https://github.com/apache/skywalking/issues/4825\npre check kafka CallBack instance can or not convert EnhancedInstance, when need to cast Callback instance to EnhancedInstance.", "committedDate": "2020-05-26T05:45:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE4NDY5OQ==", "url": "https://github.com/apache/skywalking/pull/4826#discussion_r430184699", "bodyText": "We don't add this link, once we did that, the links are everywhere.", "author": "wu-sheng", "createdAt": "2020-05-26T06:34:46Z", "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/KafkaProducerInterceptor.java", "diffHunk": "@@ -59,8 +59,12 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n             next = next.next();\n             record.headers().add(next.getHeadKey(), next.getHeadValue().getBytes());\n         }\n-        EnhancedInstance callbackInstance = (EnhancedInstance) allArguments[1];\n-        if (null != callbackInstance) {\n+        //fix bug: https://github.com/apache/skywalking/issues/4825", "originalCommit": "f9e91a7d8b68ef95c4c32a482649d586cb85e074", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI5Mjc1Mg==", "url": "https://github.com/apache/skywalking/pull/4826#discussion_r430292752", "bodyText": "fixd.", "author": "zifeihan", "createdAt": "2020-05-26T09:52:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE4NDY5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE4NjIyNg==", "url": "https://github.com/apache/skywalking/pull/4826#discussion_r430186226", "bodyText": "If you skip this, the cast exception is gone, yes. But, the callback will not be traced, right? I think you should create a new function to delegate the existing parameter, which could propagate the context and continue the trace in the callback invocation. WDYT?", "author": "wu-sheng", "createdAt": "2020-05-26T06:38:50Z", "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/KafkaProducerInterceptor.java", "diffHunk": "@@ -59,8 +59,12 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n             next = next.next();\n             record.headers().add(next.getHeadKey(), next.getHeadValue().getBytes());\n         }\n-        EnhancedInstance callbackInstance = (EnhancedInstance) allArguments[1];\n-        if (null != callbackInstance) {\n+        //fix bug: https://github.com/apache/skywalking/issues/4825\n+        //when use lambda expression, not to generate inner class,\n+        //    and not to trigger kafka CallBack class define, so allArguments[1] can't to cast EnhancedInstance\n+        Object shouldCallbackInstance = allArguments[1];\n+        if (null != shouldCallbackInstance && shouldCallbackInstance instanceof EnhancedInstance) {", "originalCommit": "f9e91a7d8b68ef95c4c32a482649d586cb85e074", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI5MjMzNw==", "url": "https://github.com/apache/skywalking/pull/4826#discussion_r430292337", "bodyText": "thanks for your advice.", "author": "zifeihan", "createdAt": "2020-05-26T09:51:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE4NjIyNg=="}], "type": "inlineReview"}, {"oid": "8d784d840136f9695a89fa6c50e399dd4af3cd0d", "url": "https://github.com/apache/skywalking/commit/8d784d840136f9695a89fa6c50e399dd4af3cd0d", "message": "fix bug: https://github.com/apache/skywalking/issues/4825\ntrace kafka CallBack through proxy, when Callback not is EnhancedInstance instance.", "committedDate": "2020-05-26T09:44:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM2NTM0Mg==", "url": "https://github.com/apache/skywalking/pull/4826#discussion_r430365342", "bodyText": "This should be static.", "author": "wu-sheng", "createdAt": "2020-05-26T12:12:53Z", "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/CallbackAdapterInterceptor.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.kafka;\n+\n+import org.apache.kafka.clients.producer.Callback;\n+import org.apache.kafka.clients.producer.RecordMetadata;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+/**\n+ * implements Callback and EnhancedInstance, for kafka callback in lambda expression\n+ */\n+public class CallbackAdapterInterceptor implements Callback, EnhancedInstance {\n+\n+    private Method method;\n+\n+    private CallbackCache callbackCache;\n+\n+    private static CallbackInterceptor CALLBACK_INTERCEPTOR = new CallbackInterceptor();\n+\n+    private ILog logger = LogManager.getLogger(CallbackAdapterInterceptor.class);", "originalCommit": "8d784d840136f9695a89fa6c50e399dd4af3cd0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM2NTU5NQ==", "url": "https://github.com/apache/skywalking/pull/4826#discussion_r430365595", "bodyText": "Why this static?", "author": "wu-sheng", "createdAt": "2020-05-26T12:13:20Z", "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/CallbackAdapterInterceptor.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.kafka;\n+\n+import org.apache.kafka.clients.producer.Callback;\n+import org.apache.kafka.clients.producer.RecordMetadata;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+/**\n+ * implements Callback and EnhancedInstance, for kafka callback in lambda expression\n+ */\n+public class CallbackAdapterInterceptor implements Callback, EnhancedInstance {\n+\n+    private Method method;\n+\n+    private CallbackCache callbackCache;\n+\n+    private static CallbackInterceptor CALLBACK_INTERCEPTOR = new CallbackInterceptor();", "originalCommit": "8d784d840136f9695a89fa6c50e399dd4af3cd0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM2NTk2Mw==", "url": "https://github.com/apache/skywalking/pull/4826#discussion_r430365963", "bodyText": "Why use reflect? You should be able to typecast in the interceptor.", "author": "wu-sheng", "createdAt": "2020-05-26T12:14:02Z", "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/CallbackAdapterInterceptor.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.kafka;\n+\n+import org.apache.kafka.clients.producer.Callback;\n+import org.apache.kafka.clients.producer.RecordMetadata;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+/**\n+ * implements Callback and EnhancedInstance, for kafka callback in lambda expression\n+ */\n+public class CallbackAdapterInterceptor implements Callback, EnhancedInstance {\n+\n+    private Method method;\n+\n+    private CallbackCache callbackCache;\n+\n+    private static CallbackInterceptor CALLBACK_INTERCEPTOR = new CallbackInterceptor();\n+\n+    private ILog logger = LogManager.getLogger(CallbackAdapterInterceptor.class);\n+\n+    public CallbackAdapterInterceptor(CallbackCache callbackCache) {\n+\n+        this.callbackCache = callbackCache;\n+        try {\n+            this.method = CallbackAdapterInterceptor.class.getMethod(\"onCompletion\", new Class[]{RecordMetadata.class, Exception.class});", "originalCommit": "8d784d840136f9695a89fa6c50e399dd4af3cd0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM2NzI5NQ==", "url": "https://github.com/apache/skywalking/pull/4826#discussion_r430367295", "bodyText": "In this method, why so many try-catch? Super confusing about what you are doing. Could you explain?", "author": "wu-sheng", "createdAt": "2020-05-26T12:16:31Z", "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/CallbackAdapterInterceptor.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.kafka;\n+\n+import org.apache.kafka.clients.producer.Callback;\n+import org.apache.kafka.clients.producer.RecordMetadata;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+/**\n+ * implements Callback and EnhancedInstance, for kafka callback in lambda expression\n+ */\n+public class CallbackAdapterInterceptor implements Callback, EnhancedInstance {\n+\n+    private Method method;\n+\n+    private CallbackCache callbackCache;\n+\n+    private static CallbackInterceptor CALLBACK_INTERCEPTOR = new CallbackInterceptor();\n+\n+    private ILog logger = LogManager.getLogger(CallbackAdapterInterceptor.class);\n+\n+    public CallbackAdapterInterceptor(CallbackCache callbackCache) {\n+\n+        this.callbackCache = callbackCache;\n+        try {\n+            this.method = CallbackAdapterInterceptor.class.getMethod(\"onCompletion\", new Class[]{RecordMetadata.class, Exception.class});\n+        } catch (Exception e) {\n+        }\n+    }\n+\n+    @Override\n+    public void onCompletion(RecordMetadata metadata, Exception exception) {", "originalCommit": "8d784d840136f9695a89fa6c50e399dd4af3cd0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM2NzgyNQ==", "url": "https://github.com/apache/skywalking/pull/4826#discussion_r430367825", "bodyText": "This class should just make sure the original callback being traced, but currently, I can't follow your point.", "author": "wu-sheng", "createdAt": "2020-05-26T12:17:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM2NzI5NQ=="}], "type": "inlineReview"}, {"oid": "a17ba7c6d73a4311ec9ca42ddd272b2734155340", "url": "https://github.com/apache/skywalking/commit/a17ba7c6d73a4311ec9ca42ddd272b2734155340", "message": "Merge branch 'master' into master", "committedDate": "2020-05-27T00:17:09Z", "type": "commit"}, {"oid": "fef869934c7c19eb010dc3560b02baa2dc991fb1", "url": "https://github.com/apache/skywalking/commit/fef869934c7c19eb010dc3560b02baa2dc991fb1", "message": "Polishing kafka Callback trace.", "committedDate": "2020-05-28T16:48:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE4ODY5Nw==", "url": "https://github.com/apache/skywalking/pull/4826#discussion_r432188697", "bodyText": "As you have changed the scenario, you should change the expected data file, otherwise, all tests break.", "author": "wu-sheng", "createdAt": "2020-05-29T00:05:31Z", "path": "test/plugin/scenarios/kafka-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/kafka/controller/CaseController.java", "diffHunk": "@@ -68,12 +68,10 @@ public String kafkaCase() {\n         wrapProducer(producer -> {\n             ProducerRecord<String, String> record = new ProducerRecord<String, String>(topicName, \"testKey\", Integer.toString(1));\n             record.headers().add(\"TEST\", \"TEST\".getBytes());\n-            producer.send(record, new Callback() {\n-                @Override\n-                public void onCompletion(RecordMetadata metadata, Exception exception) {\n-                    logger.info(\"send success metadata={}\", metadata);\n-                }\n-            });\n+            Callback callback = (metadata, exception) -> {\n+                logger.info(\"send success metadata={}\", metadata);\n+            };\n+            producer.send(record, callback);", "originalCommit": "fef869934c7c19eb010dc3560b02baa2dc991fb1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE4ODc2NA==", "url": "https://github.com/apache/skywalking/pull/4826#discussion_r432188764", "bodyText": "Same here.", "author": "wu-sheng", "createdAt": "2020-05-29T00:05:46Z", "path": "test/plugin/scenarios/kafka-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/kafka/controller/CaseController.java", "diffHunk": "@@ -134,14 +132,12 @@ public void run() {\n                         ProducerRecord<String, String> record = new ProducerRecord<String, String>(\"check\", \"checkKey\", Integer\n                             .toString(1));\n                         record.headers().add(\"CHECK\", \"CHECK\".getBytes());\n-                        producer.send(record, new Callback() {\n-                            @Override\n-                            public void onCompletion(RecordMetadata recordMetadata, Exception e) {\n-                                if (isNull(e)) {\n-                                    KAFKA_STATUS = true;\n-                                }\n+                        Callback callback = (metadata, e) -> {\n+                            if (isNull(e)) {\n+                                KAFKA_STATUS = true;\n                             }\n-                        });\n+                        };\n+                        producer.send(record, callback);", "originalCommit": "fef869934c7c19eb010dc3560b02baa2dc991fb1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "892e44aa18fb0324f5ac9817e966e72c5cfd66a2", "url": "https://github.com/apache/skywalking/commit/892e44aa18fb0324f5ac9817e966e72c5cfd66a2", "message": "Merge branch 'master' into master", "committedDate": "2020-05-29T00:06:23Z", "type": "commit"}, {"oid": "eef5c8617f8c938466dc4ee7749131dc6841faa7", "url": "https://github.com/apache/skywalking/commit/eef5c8617f8c938466dc4ee7749131dc6841faa7", "message": "Polishing.", "committedDate": "2020-05-30T10:32:29Z", "type": "commit"}, {"oid": "f8009845f396e89469dacb87f4badc2874d7c862", "url": "https://github.com/apache/skywalking/commit/f8009845f396e89469dacb87f4badc2874d7c862", "message": "Merge remote-tracking branch 'origin/master'", "committedDate": "2020-05-30T10:35:17Z", "type": "commit"}, {"oid": "831b6e741ece9cfa4f3afdb558244c596f55c9a2", "url": "https://github.com/apache/skywalking/commit/831b6e741ece9cfa4f3afdb558244c596f55c9a2", "message": "Merge branch 'master' into master", "committedDate": "2020-05-30T12:38:38Z", "type": "commit"}]}