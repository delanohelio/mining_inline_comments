{"pr_number": 4555, "pr_title": "Correlation protocol implement", "pr_createdAt": "2020-03-23T08:35:26Z", "pr_url": "https://github.com/apache/skywalking/pull/4555", "timeline": [{"oid": "b1b90eb11e985fe0698a351354c6b52fd1919c86", "url": "https://github.com/apache/skywalking/commit/b1b90eb11e985fe0698a351354c6b52fd1919c86", "message": "Provide correlation protocol java implement", "committedDate": "2020-03-23T06:57:47Z", "type": "commit"}, {"oid": "32b949f3b672dfe75fa1b05f075582e61578d016", "url": "https://github.com/apache/skywalking/commit/32b949f3b672dfe75fa1b05f075582e61578d016", "message": "add doc link, check toolkit plugin test", "committedDate": "2020-03-23T08:26:02Z", "type": "commit"}, {"oid": "9e3afc528fb5b35bec031d16597eb86e28bc8889", "url": "https://github.com/apache/skywalking/commit/9e3afc528fb5b35bec031d16597eb86e28bc8889", "message": "Merge branch 'master' into correlation-protocol-implement", "committedDate": "2020-03-23T08:36:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxNDE2NA==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396414164", "bodyText": "Should be renamed to ELEMENT_MAX_NUMBER.", "author": "wu-sheng", "createdAt": "2020-03-23T12:29:03Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "diffHunk": "@@ -394,4 +394,16 @@\n             public static int HTTP_PARAMS_LENGTH_THRESHOLD = 1024;\n         }\n     }\n+\n+    public static class Correlation {\n+        /**\n+         * Max key count in the correlation context.\n+         */\n+        public static int KEY_COUNT = 3;", "originalCommit": "9e3afc528fb5b35bec031d16597eb86e28bc8889", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxNDYxOQ==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396414619", "bodyText": "Should be renamed to VALUE_MAX_LENGTH .", "author": "wu-sheng", "createdAt": "2020-03-23T12:29:54Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "diffHunk": "@@ -394,4 +394,16 @@\n             public static int HTTP_PARAMS_LENGTH_THRESHOLD = 1024;\n         }\n     }\n+\n+    public static class Correlation {\n+        /**\n+         * Max key count in the correlation context.\n+         */\n+        public static int KEY_COUNT = 3;\n+\n+        /**\n+         * Max value length in each key.\n+         */\n+        public static int VALUE_LENGTH = 128;", "originalCommit": "9e3afc528fb5b35bec031d16597eb86e28bc8889", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxNjM2Mg==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396416362", "bodyText": "Why there is reset here? Why does a context require reset?", "author": "wu-sheng", "createdAt": "2020-03-23T12:33:17Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/CorrelationContext.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context;\n+\n+import org.apache.skywalking.apm.agent.core.base64.Base64;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+import org.apache.skywalking.apm.util.StringUtil;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Correlation context, use to propagation user custom data.\n+ * Working on the protocol and delegate set/get method.\n+ */\n+public class CorrelationContext {\n+\n+    private volatile Map<String, String> data;\n+\n+    public CorrelationContext() {\n+        this.data = new HashMap<>(0);\n+    }\n+\n+    public SettingResult set(String key, String value) {\n+        // key must not null\n+        if (key == null) {\n+            return SettingResult.buildWithSettingError(\"Key Cannot be null\");\n+        }\n+        if (value == null) {\n+            value = \"\";\n+        }\n+\n+        // check value length\n+        if (value.length() > Config.Correlation.VALUE_LENGTH) {\n+            return SettingResult.buildWithSettingError(\"Out out correlation value length limit\");\n+        }\n+\n+        // already contain key\n+        if (data.containsKey(key)) {\n+            final String previousValue = data.put(key, value);\n+            return SettingResult.buildWithSuccess(previousValue);\n+        }\n+\n+        // check keys count\n+        if (data.size() >= Config.Correlation.KEY_COUNT) {\n+            return SettingResult.buildWithSettingError(\"Out out correlation key count limit\");\n+        }\n+\n+        // setting\n+        data.put(key, value);\n+        return SettingResult.buildWithSuccess(null);\n+    }\n+\n+    public String get(String key) {\n+        if (key == null) {\n+            return \"\";\n+        }\n+\n+        final String value = data.get(key);\n+        return value == null ? \"\" : value;\n+    }\n+\n+    /**\n+     * Serialize this {@link CorrelationContext} to a {@link String}\n+     *\n+     * @return the serialization string.\n+     */\n+    String serialize() {\n+        if (data.isEmpty()) {\n+            return \"\";\n+        }\n+\n+        return data.entrySet().stream()\n+            .map(entry -> Base64.encode(entry.getKey()) + \":\" + Base64.encode(entry.getValue()))\n+            .collect(Collectors.joining(\",\"));\n+    }\n+\n+    /**\n+     * Deserialize data from {@link String}\n+     */\n+    void deserialize(String value) {\n+        if (StringUtil.isEmpty(value)) {\n+            return;\n+        }\n+\n+        for (String perData : value.split(\",\")) {\n+            final String[] parts = perData.split(\":\");\n+            String perDataKey = parts[0];\n+            String perDataValue = parts.length > 1 ? parts[1] : \"\";\n+            data.put(Base64.decode2UTFString(perDataKey), Base64.decode2UTFString(perDataValue));\n+        }\n+    }\n+\n+    /**\n+     * Reset correlation context from other context\n+     */\n+    public void resetFrom(CorrelationContext context) {", "originalCommit": "9e3afc528fb5b35bec031d16597eb86e28bc8889", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxNzU2NA==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396417564", "bodyText": "Why isn't this inject/extract like the existing API design?", "author": "wu-sheng", "createdAt": "2020-03-23T12:35:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxNjM2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxNjkxMA==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396416910", "bodyText": "Why this could be changed? And further as a volatile? What are the cases?", "author": "wu-sheng", "createdAt": "2020-03-23T12:34:18Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/CorrelationContext.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context;\n+\n+import org.apache.skywalking.apm.agent.core.base64.Base64;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+import org.apache.skywalking.apm.util.StringUtil;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Correlation context, use to propagation user custom data.\n+ * Working on the protocol and delegate set/get method.\n+ */\n+public class CorrelationContext {\n+\n+    private volatile Map<String, String> data;", "originalCommit": "9e3afc528fb5b35bec031d16597eb86e28bc8889", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUzMzczNQ==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396533735", "bodyText": "Change that to final, and use the extract and inject to operate the data.", "author": "mrproliu", "createdAt": "2020-03-23T15:23:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxNjkxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxNzk5Mg==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396417992", "bodyText": "inject is for further propagation, I am confused the implementation here.", "author": "wu-sheng", "createdAt": "2020-03-23T12:36:27Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/IgnoredTracerContext.java", "diffHunk": "@@ -32,30 +32,33 @@\n public class IgnoredTracerContext implements AbstractTracerContext {\n     private static final NoopSpan NOOP_SPAN = new NoopSpan();\n \n+    private final CorrelationContext correlationContext;\n+\n     private int stackDepth;\n \n     public IgnoredTracerContext() {\n         this.stackDepth = 0;\n+        this.correlationContext = new CorrelationContext();\n     }\n \n     @Override\n     public void inject(ContextCarrier carrier) {\n-\n+        carrier.getCorrelationContext().resetFrom(this.correlationContext);", "originalCommit": "9e3afc528fb5b35bec031d16597eb86e28bc8889", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUzNTY1NQ==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396535655", "bodyText": "Add the inject and extract into correlation context, and delete the resetFrom method.", "author": "mrproliu", "createdAt": "2020-03-23T15:25:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxNzk5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxOTEzOQ==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396419139", "bodyText": "As you are propagating the context, and this is called a snapshot, you should clone the existing context to new thread. Otherwise, this is not a ContextSnapshot. Think in this way, when you do the thread snapshot, what does it mean?", "author": "wu-sheng", "createdAt": "2020-03-23T12:38:38Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ContextSnapshot.java", "diffHunk": "@@ -49,12 +49,15 @@\n \n     private int entryApplicationInstanceId = DictionaryUtil.nullValue();\n \n-    ContextSnapshot(ID traceSegmentId, int spanId, List<DistributedTraceId> distributedTraceIds) {\n+    private CorrelationContext correlationContext;\n+\n+    ContextSnapshot(ID traceSegmentId, int spanId, List<DistributedTraceId> distributedTraceIds, CorrelationContext correlationContext) {\n         this.traceSegmentId = traceSegmentId;\n         this.spanId = spanId;\n         if (distributedTraceIds != null) {\n             this.primaryDistributedTraceId = distributedTraceIds.get(0);\n         }\n+        this.correlationContext = correlationContext;", "originalCommit": "9e3afc528fb5b35bec031d16597eb86e28bc8889", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUzNzQxOQ==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396537419", "bodyText": "In this case, I neglected the interference between threads. Change that using clone mode.", "author": "mrproliu", "createdAt": "2020-03-23T15:28:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxOTEzOQ=="}], "type": "inlineReview"}, {"oid": "a510f4559734a837d63c768e45d5246081eeb6e0", "url": "https://github.com/apache/skywalking/commit/a510f4559734a837d63c768e45d5246081eeb6e0", "message": "fix some issues", "committedDate": "2020-03-23T15:17:08Z", "type": "commit"}, {"oid": "9ce7a3e9201fa65067677d2721dc55dc65fc2650", "url": "https://github.com/apache/skywalking/commit/9ce7a3e9201fa65067677d2721dc55dc65fc2650", "message": "Merge branch 'master' into correlation-protocol-implement", "committedDate": "2020-03-23T15:29:21Z", "type": "commit"}, {"oid": "8da122e2cb3ded5057ca56751d1856e4eb36c52e", "url": "https://github.com/apache/skywalking/commit/8da122e2cb3ded5057ca56751d1856e4eb36c52e", "message": "fix plugin test error", "committedDate": "2020-03-23T15:37:45Z", "type": "commit"}, {"oid": "71d076b3208a07ac2aadc2e3be41f54c006553b8", "url": "https://github.com/apache/skywalking/commit/71d076b3208a07ac2aadc2e3be41f54c006553b8", "message": "Merge remote-tracking branch 'origin/correlation-protocol-implement' into correlation-protocol-implement", "committedDate": "2020-03-23T15:38:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg0OTk5Nw==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396849997", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return not empty when override the previous value.\n          \n          \n            \n                 * @return previous value if it exists.", "author": "wu-sheng", "createdAt": "2020-03-24T01:13:40Z", "path": "apm-application-toolkit/apm-toolkit-trace/src/main/java/org/apache/skywalking/apm/toolkit/trace/CorrelationContext.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.toolkit.trace;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Propagate the custom data in the tracing context.\n+ */\n+public class CorrelationContext {\n+\n+    /**\n+     * Try to get the custom value from trace context.\n+     *\n+     * @return custom data value.\n+     */\n+    public static Optional<String> get(String key) {\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Setting the custom key/value into trace context.\n+     *\n+     * @return not empty when override the previous value.", "originalCommit": "71d076b3208a07ac2aadc2e3be41f54c006553b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg1MzA1OQ==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396853059", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * Max value length in each key.\n          \n          \n            \n                     * Max value length of each element.", "author": "wu-sheng", "createdAt": "2020-03-24T01:25:40Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "diffHunk": "@@ -394,4 +394,16 @@\n             public static int HTTP_PARAMS_LENGTH_THRESHOLD = 1024;\n         }\n     }\n+\n+    public static class Correlation {\n+        /**\n+         * Max element count in the correlation context.\n+         */\n+        public static int ELEMENT_MAX_NUMBER = 3;\n+\n+        /**\n+         * Max value length in each key.", "originalCommit": "71d076b3208a07ac2aadc2e3be41f54c006553b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg1MzY3Ng==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396853676", "bodyText": "0 should be replaced by ELEMENT_MAX_NUMBER to avoid resize for most cases.", "author": "wu-sheng", "createdAt": "2020-03-24T01:27:56Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/CorrelationContext.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context;\n+\n+import org.apache.skywalking.apm.agent.core.base64.Base64;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+import org.apache.skywalking.apm.util.StringUtil;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Correlation context, use to propagation user custom data.\n+ * Working on the protocol and delegate set/get method.\n+ */\n+public class CorrelationContext {\n+\n+    private final Map<String, String> data;\n+\n+    public CorrelationContext() {\n+        this.data = new HashMap<>(0);", "originalCommit": "71d076b3208a07ac2aadc2e3be41f54c006553b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MDc1OA==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396870758", "bodyText": "Remove this, we don't log unless this is a serious issue.  Can't see the case this will happen.", "author": "wu-sheng", "createdAt": "2020-03-24T02:36:55Z", "path": "apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/trace/CorrelationContextGetInterceptor.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.toolkit.activation.trace;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.StaticMethodsAroundInterceptor;\n+\n+import java.lang.reflect.Method;\n+import java.util.Optional;\n+\n+public class CorrelationContextGetInterceptor implements StaticMethodsAroundInterceptor {\n+\n+    private ILog logger = LogManager.getLogger(CorrelationContextGetInterceptor.class);\n+\n+    @Override\n+    public void beforeMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, MethodInterceptResult result) {\n+        final String key = (String) allArguments[0];\n+        final Optional<String> data = ContextManager.getCorrelationContext().get(key);\n+\n+        result.defineReturnValue(data);\n+    }\n+\n+    @Override\n+    public Object afterMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, Object ret) {\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, Throwable t) {\n+        logger.error(\"Failed to get correlation value.\", t);", "originalCommit": "71d076b3208a07ac2aadc2e3be41f54c006553b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MDc5Mg==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396870792", "bodyText": "Same here.", "author": "wu-sheng", "createdAt": "2020-03-24T02:37:02Z", "path": "apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/trace/CorrelationContextSetInterceptor.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.toolkit.activation.trace;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.StaticMethodsAroundInterceptor;\n+\n+import java.lang.reflect.Method;\n+import java.util.Optional;\n+\n+public class CorrelationContextSetInterceptor implements StaticMethodsAroundInterceptor {\n+\n+    private ILog logger = LogManager.getLogger(CorrelationContextSetInterceptor.class);\n+\n+    @Override\n+    public void beforeMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, MethodInterceptResult result) {\n+        final String key = (String) allArguments[0];\n+        final String value = (String) allArguments[1];\n+        final Optional<String> previous = ContextManager.getCorrelationContext().set(key, value);\n+\n+        result.defineReturnValue(previous);\n+    }\n+\n+    @Override\n+    public Object afterMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, Object ret) {\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, Throwable t) {\n+        logger.error(\"Failed to setting correlation.\", t);", "originalCommit": "71d076b3208a07ac2aadc2e3be41f54c006553b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3NTE5MA==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396875190", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Propagate the custom data in the tracing context.\n          \n          \n            \n             * CorrelationContext is the interactive API for end user to put/set custom data.", "author": "wu-sheng", "createdAt": "2020-03-24T02:54:18Z", "path": "test/plugin/scenarios/apm-toolkit-trace-scenario/src/main/java/org/apache/skywalking/apm/toolkit/trace/CorrelationContext.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.toolkit.trace;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Propagate the custom data in the tracing context.", "originalCommit": "71d076b3208a07ac2aadc2e3be41f54c006553b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3NTI0OA==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396875248", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Propagate the custom data in the tracing context.\n          \n          \n            \n             * CorrelationContext is the interactive API for end user to put/set custom data.", "author": "wu-sheng", "createdAt": "2020-03-24T02:54:34Z", "path": "apm-application-toolkit/apm-toolkit-trace/src/main/java/org/apache/skywalking/apm/toolkit/trace/CorrelationContext.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.toolkit.trace;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Propagate the custom data in the tracing context.", "originalCommit": "71d076b3208a07ac2aadc2e3be41f54c006553b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d1b7e05391a96abfeed0edec911c6d54675bd426", "url": "https://github.com/apache/skywalking/commit/d1b7e05391a96abfeed0edec911c6d54675bd426", "message": "Merge branch 'master' into correlation-protocol-implement", "committedDate": "2020-03-24T02:55:04Z", "type": "commit"}, {"oid": "fcf4aee99dd99b95734113947f947a95e8aa57b1", "url": "https://github.com/apache/skywalking/commit/fcf4aee99dd99b95734113947f947a95e8aa57b1", "message": "resolve issues.", "committedDate": "2020-03-24T04:15:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwMDY0OA==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396900648", "bodyText": "remove this", "author": "kezhenxu94", "createdAt": "2020-03-24T04:49:09Z", "path": "apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/trace/CorrelationContextGetInterceptor.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.toolkit.activation.trace;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.StaticMethodsAroundInterceptor;\n+\n+import java.lang.reflect.Method;\n+import java.util.Optional;\n+\n+public class CorrelationContextGetInterceptor implements StaticMethodsAroundInterceptor {\n+\n+    private ILog logger = LogManager.getLogger(CorrelationContextGetInterceptor.class);", "originalCommit": "fcf4aee99dd99b95734113947f947a95e8aa57b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwMjM4Nw==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396902387", "bodyText": "How do I remove a key if you consider a null as \"\". For example, if I already have 3 items in the context and I want to remove one of them and put another one (different key), there's no way to do so", "author": "kezhenxu94", "createdAt": "2020-03-24T04:57:01Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/CorrelationContext.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context;\n+\n+import org.apache.skywalking.apm.agent.core.base64.Base64;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+import org.apache.skywalking.apm.util.StringUtil;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Correlation context, use to propagation user custom data.\n+ * Working on the protocol and delegate set/get method.\n+ */\n+public class CorrelationContext {\n+\n+    private final Map<String, String> data;\n+\n+    public CorrelationContext() {\n+        this.data = new HashMap<>(Config.Correlation.ELEMENT_MAX_NUMBER);\n+    }\n+\n+    public Optional<String> set(String key, String value) {\n+        // key must not null\n+        if (key == null) {\n+            return Optional.empty();\n+        }\n+        if (value == null) {\n+            value = \"\";\n+        }", "originalCommit": "fcf4aee99dd99b95734113947f947a95e8aa57b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNTcxOA==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396915718", "bodyText": "Do you mean delete the key when the value is null? Should I add a new method to implement the remove method?", "author": "mrproliu", "createdAt": "2020-03-24T05:52:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwMjM4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxODU0Mg==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396918542", "bodyText": "Do you mean delete the key when the value is null? Should I add a new method to implement the remove method?\n\nAdding a new API remove looks good to me, but I prefer to remove the item when the value == null(or even when value.isEmpty()) because the places in the context are \"precious\" (only 3 items are allowed by default), and propagating null or \"\" is a waste of bandwidth, WDYT @wu-sheng", "author": "kezhenxu94", "createdAt": "2020-03-24T06:03:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwMjM4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk1MzEyMA==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396953120", "bodyText": "Agree, we should remove the element when value doesn't exist. And for remove, adding or not both works for me. But the logic of null/empty triggers removing should be documented clearly.", "author": "wu-sheng", "createdAt": "2020-03-24T07:44:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwMjM4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk2MTAwNA==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396961004", "bodyText": "@mrproliu please perform a removal when value == null || value.isEmpty(), and document it, remove is unnecessary then (I tend to keep the core API as simple as possible)", "author": "kezhenxu94", "createdAt": "2020-03-24T08:00:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwMjM4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEzNTAzNg==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r397135036", "bodyText": "fixed. It will remove the item when the value is empty or null.", "author": "mrproliu", "createdAt": "2020-03-24T13:04:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwMjM4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwOTA4OQ==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396909089", "bodyText": "Personally, I don't recommend to return Optional<String> in these two APIs, for Strings, we(developers, our users are developers too) don't usually JUST care about the nullability, we also want to check whether it's empty/blank, with Optional<String>, we have to unwrap the Optional, and check isEmpty/isBlank:\n        Optional<String> s = CorrelationContext.get(CORRELATION_CONTEXT_KEY);\n        if (s.isPresent() && Strings.isNotBlank(s.get())) {\n            // ...\n        }\nOR\n        if (!Strings.isNullOrEmpty(CorrelationContext.get(CORRELATION_CONTEXT_KEY).orElse(\"\"))) {\n            \n        }\nMy point is that in this specific situation, Optional<String> may not bring much convenience as it should have done, simply returning nullable String may do, in the contrast", "author": "kezhenxu94", "createdAt": "2020-03-24T05:26:28Z", "path": "apm-application-toolkit/apm-toolkit-trace/src/main/java/org/apache/skywalking/apm/toolkit/trace/CorrelationContext.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.toolkit.trace;\n+\n+import java.util.Optional;\n+\n+/**\n+ * CorrelationContext is the interactive API for end user to put/set custom data.\n+ */\n+public class CorrelationContext {\n+\n+    /**\n+     * Try to get the custom value from trace context.\n+     *\n+     * @return custom data value.\n+     */\n+    public static Optional<String> get(String key) {\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Setting the custom key/value into trace context.\n+     *\n+     * @return previous value if it exists.\n+     */\n+    public static Optional<String> set(String key, String value) {\n+        return Optional.empty();\n+    }", "originalCommit": "fcf4aee99dd99b95734113947f947a95e8aa57b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxOTIxMA==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396919210", "bodyText": "You're saying to unwrap the Optional<String>, so we don't need to use get(or orElse)  and Strings.isNullOrEmpty to double-check. It's looking good to me. @wu-sheng any suggestion?", "author": "mrproliu", "createdAt": "2020-03-24T06:05:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwOTA4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxOTYxNg==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396919616", "bodyText": "You're saying to unwrap the Optional<String>, so we don't need to use get(or orElse) and Strings.isNullOrEmpty to double-check\n\nExactly", "author": "kezhenxu94", "createdAt": "2020-03-24T06:06:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwOTA4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk1NTI0NA==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396955244", "bodyText": "As Optional, the point is avoiding NPE explicitly for API user. We could guarantee there is no EMPTY_STRING as the value, as we discussed above. Then user doesn't have doublt-check case. We also don't ask user to do .orElse(\"\") and then Strings.isNullOrEmpty. Your demo codes are written by yourself in this way.\nI am a little confusing about your conclusion.", "author": "wu-sheng", "createdAt": "2020-03-24T07:48:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwOTA4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk2MzI4NA==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396963284", "bodyText": "We could guarantee there is no EMPTY_STRING as the value, as we discussed above.\n\nSince we have reached a consensus that null/\"\" values should trigger a removal, this concern is gone accordingly", "author": "kezhenxu94", "createdAt": "2020-03-24T08:05:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwOTA4OQ=="}], "type": "inlineReview"}, {"oid": "b2316ae3602a541100de32d00afd7d54f01acca0", "url": "https://github.com/apache/skywalking/commit/b2316ae3602a541100de32d00afd7d54f01acca0", "message": "fix naming issues", "committedDate": "2020-03-24T05:59:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk1MTk4NA==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396951984", "bodyText": "This is using putAll, I am feeling we have a memory leak point. If user to inject a header with more elements than our limitation, inject and deserialize both wouldn't reject or ignore part of them, then basically, the config of this agent is useless.", "author": "wu-sheng", "createdAt": "2020-03-24T07:41:46Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/CorrelationContext.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context;\n+\n+import org.apache.skywalking.apm.agent.core.base64.Base64;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+import org.apache.skywalking.apm.util.StringUtil;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Correlation context, use to propagation user custom data.\n+ * Working on the protocol and delegate set/get method.\n+ */\n+public class CorrelationContext {\n+\n+    private final Map<String, String> data;\n+\n+    public CorrelationContext() {\n+        this.data = new HashMap<>(Config.Correlation.ELEMENT_MAX_NUMBER);\n+    }\n+\n+    public Optional<String> set(String key, String value) {\n+        // key must not null\n+        if (key == null) {\n+            return Optional.empty();\n+        }\n+        if (value == null) {\n+            value = \"\";\n+        }\n+\n+        // check value length\n+        if (value.length() > Config.Correlation.VALUE_MAX_LENGTH) {\n+            return Optional.empty();\n+        }\n+\n+        // already contain key\n+        if (data.containsKey(key)) {\n+            final String previousValue = data.put(key, value);\n+            return Optional.of(previousValue);\n+        }\n+\n+        // check keys count\n+        if (data.size() >= Config.Correlation.ELEMENT_MAX_NUMBER) {\n+            return Optional.empty();\n+        }\n+\n+        // setting\n+        data.put(key, value);\n+        return Optional.empty();\n+    }\n+\n+    public Optional<String> get(String key) {\n+        if (key == null) {\n+            return Optional.empty();\n+        }\n+\n+        return Optional.ofNullable(data.get(key));\n+    }\n+\n+    /**\n+     * Serialize this {@link CorrelationContext} to a {@link String}\n+     *\n+     * @return the serialization string.\n+     */\n+    String serialize() {\n+        if (data.isEmpty()) {\n+            return \"\";\n+        }\n+\n+        return data.entrySet().stream()\n+            .map(entry -> Base64.encode(entry.getKey()) + \":\" + Base64.encode(entry.getValue()))\n+            .collect(Collectors.joining(\",\"));\n+    }\n+\n+    /**\n+     * Deserialize data from {@link String}\n+     */\n+    void deserialize(String value) {\n+        if (StringUtil.isEmpty(value)) {\n+            return;\n+        }\n+\n+        for (String perData : value.split(\",\")) {\n+            final String[] parts = perData.split(\":\");\n+            String perDataKey = parts[0];\n+            String perDataValue = parts.length > 1 ? parts[1] : \"\";\n+            data.put(Base64.decode2UTFString(perDataKey), Base64.decode2UTFString(perDataValue));\n+        }\n+    }\n+\n+    /**\n+     * Prepare for the cross-process propagation. Inject the {@link #data} into {@link ContextCarrier#getCorrelationContext()}\n+     */\n+    void inject(ContextCarrier carrier) {\n+        carrier.getCorrelationContext().data.putAll(this.data);", "originalCommit": "b2316ae3602a541100de32d00afd7d54f01acca0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk1MjI4MA==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396952280", "bodyText": "We will propagate all context key/value(s) without any protection. Please fix this.", "author": "wu-sheng", "createdAt": "2020-03-24T07:42:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk1MTk4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk1NzA3NQ==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396957075", "bodyText": "That's true. If another agent approves to setting more than element count or value length. So we will delete their data?", "author": "mrproliu", "createdAt": "2020-03-24T07:52:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk1MTk4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk1OTQ5NA==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396959494", "bodyText": "I think so. We should keep the memory safe as 1st priority.", "author": "wu-sheng", "createdAt": "2020-03-24T07:57:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk1MTk4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk2ODk3Ng==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396968976", "bodyText": "My mistake, this comment should target extract and deserialize, not inject.", "author": "wu-sheng", "createdAt": "2020-03-24T08:17:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk1MTk4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEzNTIxNw==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r397135217", "bodyText": "fixed.", "author": "mrproliu", "createdAt": "2020-03-24T13:04:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk1MTk4NA=="}], "type": "inlineReview"}, {"oid": "788a17b99febfc7d7e9d8fda66a29a8ef3b4a53f", "url": "https://github.com/apache/skywalking/commit/788a17b99febfc7d7e9d8fda66a29a8ef3b4a53f", "message": "resolve issues", "committedDate": "2020-03-24T13:02:50Z", "type": "commit"}, {"oid": "0f6087cec0681fd9507cb939ee40766e117816f8", "url": "https://github.com/apache/skywalking/commit/0f6087cec0681fd9507cb939ee40766e117816f8", "message": "Merge branch 'master' into correlation-protocol-implement", "committedDate": "2020-03-24T13:04:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE0NDU0OA==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r397144548", "bodyText": "There are two CorrelationContext in your codes. Seems strange. In the old APIs, we have TraceContext(for users) and ContextManager/TracingContext for internal. I suggest we fix the duplicated naming issue.\nSuch as for users, we could have TraceContext#putCorrelation. @kezhenxu94 @mrproliu WDYT?", "author": "wu-sheng", "createdAt": "2020-03-24T13:19:28Z", "path": "apm-application-toolkit/apm-toolkit-trace/src/main/java/org/apache/skywalking/apm/toolkit/trace/CorrelationContext.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.toolkit.trace;\n+\n+import java.util.Optional;\n+\n+/**\n+ * CorrelationContext is the interactive API for end user to put/set custom data.\n+ */\n+public class CorrelationContext {", "originalCommit": "0f6087cec0681fd9507cb939ee40766e117816f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE0ODU5OA==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r397148598", "bodyText": "Looks good to me", "author": "kezhenxu94", "createdAt": "2020-03-24T13:25:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE0NDU0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE1MTEyMg==", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r397151122", "bodyText": "Sure. I could change to TraceContext#putCorrelation and TraceContext#getCorrelation, replace the CorrelationContext toolkit.\nI think it's the same for users, they refer to the document and use them.", "author": "mrproliu", "createdAt": "2020-03-24T13:28:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE0NDU0OA=="}], "type": "inlineReview"}, {"oid": "d6d488c230143392f7764977513c8fbf1a1126e7", "url": "https://github.com/apache/skywalking/commit/d6d488c230143392f7764977513c8fbf1a1126e7", "message": "fix test", "committedDate": "2020-03-24T13:20:35Z", "type": "commit"}, {"oid": "ec8be4a420eefe42284e093e477ecfbb542c1563", "url": "https://github.com/apache/skywalking/commit/ec8be4a420eefe42284e093e477ecfbb542c1563", "message": "fix missing module packaging type declare", "committedDate": "2020-03-24T14:20:15Z", "type": "commit"}, {"oid": "b5b446fea5c4b0e8db2f833af207350569190818", "url": "https://github.com/apache/skywalking/commit/b5b446fea5c4b0e8db2f833af207350569190818", "message": "fix wrong interceptor class name", "committedDate": "2020-03-24T14:50:35Z", "type": "commit"}, {"oid": "d04e34037bc850032978202b57148a2e495bc2c3", "url": "https://github.com/apache/skywalking/commit/d04e34037bc850032978202b57148a2e495bc2c3", "message": "Change method name", "committedDate": "2020-03-24T15:15:47Z", "type": "commit"}, {"oid": "c497d7a6101ef09e1a0d7d5e11ce0272a07d7383", "url": "https://github.com/apache/skywalking/commit/c497d7a6101ef09e1a0d7d5e11ce0272a07d7383", "message": "Merge branch 'master' into correlation-protocol-implement", "committedDate": "2020-03-24T15:47:31Z", "type": "commit"}, {"oid": "7770524ad0173f46389a46a819821023c58b6d19", "url": "https://github.com/apache/skywalking/commit/7770524ad0173f46389a46a819821023c58b6d19", "message": "Merge branch 'master' into correlation-protocol-implement", "committedDate": "2020-03-25T05:28:38Z", "type": "commit"}, {"oid": "03c91aa8cbe5c0096f45b7def557c9bf92e1189d", "url": "https://github.com/apache/skywalking/commit/03c91aa8cbe5c0096f45b7def557c9bf92e1189d", "message": "Merge branch 'master' into correlation-protocol-implement", "committedDate": "2020-03-25T14:12:08Z", "type": "commit"}, {"oid": "469b6213224dc0c38b82e8e108f6d326a202e8e5", "url": "https://github.com/apache/skywalking/commit/469b6213224dc0c38b82e8e108f6d326a202e8e5", "message": "fix typo", "committedDate": "2020-03-25T15:00:00Z", "type": "commit"}]}