{"pr_number": 5187, "pr_title": "Add AvgLabeledFunction to ingest multiple labels", "pr_createdAt": "2020-07-27T23:09:22Z", "pr_url": "https://github.com/apache/skywalking/pull/5187", "timeline": [{"oid": "4e1008ee2884711fdf2e75038ada9c87e73bd051", "url": "https://github.com/apache/skywalking/commit/4e1008ee2884711fdf2e75038ada9c87e73bd051", "message": "Add AvgLabeledFunction to ingest multiple labels", "committedDate": "2020-07-27T23:05:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI0NDU2Nw==", "url": "https://github.com/apache/skywalking/pull/5187#discussion_r461244567", "bodyText": "I think you should add keys instead of using sortedKeys? I noticed you used Comparator#naturalOrder, but base on the Comparators#NaturalOrderComparator, you still have to loop and reorder hashmap, it still does this.\n        @Override\n        public int compare(Comparable<Object> c1, Comparable<Object> c2) {\n            return c1.compareTo(c2);\n        }", "author": "wu-sheng", "createdAt": "2020-07-28T00:21:30Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/AvgLabeledFunction.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.analysis.meter.function;\n+\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+import org.apache.skywalking.oap.server.core.Const;\n+import org.apache.skywalking.oap.server.core.UnexpectedException;\n+import org.apache.skywalking.oap.server.core.analysis.manual.instance.InstanceTraffic;\n+import org.apache.skywalking.oap.server.core.analysis.meter.MeterEntity;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.DataTable;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.Metrics;\n+import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;\n+import org.apache.skywalking.oap.server.core.storage.StorageBuilder;\n+import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+\n+@MeterFunction(functionName = \"avgLabeled\")\n+@ToString\n+public abstract class AvgLabeledFunction extends Metrics implements AcceptableValue<DataTable> {\n+    protected static final String SUMMATION = \"summation\";\n+    protected static final String COUNT = \"count\";\n+    protected static final String VALUE = \"value\";\n+\n+    @Setter\n+    @Getter\n+    @Column(columnName = ENTITY_ID, length = 512)\n+    private String entityId;\n+\n+    /**\n+     * Service ID is required for sort query.\n+     */\n+    @Setter\n+    @Getter\n+    @Column(columnName = InstanceTraffic.SERVICE_ID)\n+    private String serviceId;\n+\n+    @Getter\n+    @Setter\n+    @Column(columnName = SUMMATION, storageOnly = true)\n+    protected DataTable summation = new DataTable(30);\n+    @Getter\n+    @Setter\n+    @Column(columnName = COUNT, storageOnly = true)\n+    protected DataTable count = new DataTable(30);\n+    @Getter\n+    @Setter\n+    @Column(columnName = VALUE, dataType = Column.ValueDataType.LABELED_VALUE, storageOnly = true)\n+    private DataTable value = new DataTable(30);\n+\n+    @Override\n+    public final void combine(Metrics metrics) {\n+        AvgLabeledFunction longAvgMetrics = (AvgLabeledFunction) metrics;\n+        summation.append(longAvgMetrics.summation);\n+        count.append(longAvgMetrics.count);\n+    }\n+\n+    @Override\n+    public final void calculate() {\n+        List<String> keys = count.sortedKeys(Comparator.naturalOrder());", "originalCommit": "4e1008ee2884711fdf2e75038ada9c87e73bd051", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMyMjgxOA==", "url": "https://github.com/apache/skywalking/pull/5187#discussion_r461322818", "bodyText": "yep, for a hashmap, sorting is unnecessary.", "author": "hanahmily", "createdAt": "2020-07-28T05:14:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI0NDU2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMyNDczNA==", "url": "https://github.com/apache/skywalking/pull/5187#discussion_r461324734", "bodyText": "done", "author": "hanahmily", "createdAt": "2020-07-28T05:20:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI0NDU2Nw=="}], "type": "inlineReview"}, {"oid": "61bad20f2de932fdd6551e1216b202eb3ceb23b2", "url": "https://github.com/apache/skywalking/commit/61bad20f2de932fdd6551e1216b202eb3ceb23b2", "message": "Use DataTable.keys instead of DataTable.sortedKeys.", "committedDate": "2020-07-28T05:20:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMzNzY4NA==", "url": "https://github.com/apache/skywalking/pull/5187#discussion_r461337684", "bodyText": "There is another sort.", "author": "wu-sheng", "createdAt": "2020-07-28T06:01:30Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/AvgLabeledFunction.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.analysis.meter.function;\n+\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+import org.apache.skywalking.oap.server.core.Const;\n+import org.apache.skywalking.oap.server.core.UnexpectedException;\n+import org.apache.skywalking.oap.server.core.analysis.manual.instance.InstanceTraffic;\n+import org.apache.skywalking.oap.server.core.analysis.meter.MeterEntity;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.DataTable;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.Metrics;\n+import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;\n+import org.apache.skywalking.oap.server.core.storage.StorageBuilder;\n+import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+\n+@MeterFunction(functionName = \"avgLabeled\")\n+@ToString\n+public abstract class AvgLabeledFunction extends Metrics implements AcceptableValue<DataTable> {\n+    protected static final String SUMMATION = \"summation\";\n+    protected static final String COUNT = \"count\";\n+    protected static final String VALUE = \"value\";\n+\n+    @Setter\n+    @Getter\n+    @Column(columnName = ENTITY_ID, length = 512)\n+    private String entityId;\n+\n+    /**\n+     * Service ID is required for sort query.\n+     */\n+    @Setter\n+    @Getter\n+    @Column(columnName = InstanceTraffic.SERVICE_ID)\n+    private String serviceId;\n+\n+    @Getter\n+    @Setter\n+    @Column(columnName = SUMMATION, storageOnly = true)\n+    protected DataTable summation = new DataTable(30);\n+    @Getter\n+    @Setter\n+    @Column(columnName = COUNT, storageOnly = true)\n+    protected DataTable count = new DataTable(30);\n+    @Getter\n+    @Setter\n+    @Column(columnName = VALUE, dataType = Column.ValueDataType.LABELED_VALUE, storageOnly = true)\n+    private DataTable value = new DataTable(30);\n+\n+    @Override\n+    public final void combine(Metrics metrics) {\n+        AvgLabeledFunction longAvgMetrics = (AvgLabeledFunction) metrics;\n+        summation.append(longAvgMetrics.summation);\n+        count.append(longAvgMetrics.count);\n+    }\n+\n+    @Override\n+    public final void calculate() {\n+        Set<String> keys = count.keys();\n+        for (String key : keys) {\n+            Long s = summation.get(key);\n+            if (Objects.isNull(s)) {\n+                continue;\n+            }\n+            Long c = count.get(key);\n+            if (Objects.isNull(c)) {\n+                continue;\n+            }\n+            long result = s / c;\n+            if (result == 0 && s > 0) {\n+                result = 1;\n+            }\n+            value.put(key, result);\n+        }\n+    }\n+\n+    @Override\n+    public Metrics toHour() {\n+        AvgLabeledFunction metrics = (AvgLabeledFunction) createNew();\n+        metrics.setEntityId(getEntityId());\n+        metrics.setTimeBucket(toTimeBucketInHour());\n+        metrics.setServiceId(getServiceId());\n+        metrics.setSummation(getSummation());\n+        metrics.setCount(getCount());\n+        return metrics;\n+    }\n+\n+    @Override\n+    public Metrics toDay() {\n+        AvgLabeledFunction metrics = (AvgLabeledFunction) createNew();\n+        metrics.setEntityId(getEntityId());\n+        metrics.setTimeBucket(toTimeBucketInDay());\n+        metrics.setServiceId(getServiceId());\n+        metrics.setSummation(getSummation());\n+        metrics.setCount(getCount());\n+        return metrics;\n+    }\n+\n+    @Override\n+    public int remoteHashCode() {\n+        return entityId.hashCode();\n+    }\n+\n+    @Override\n+    public void deserialize(final RemoteData remoteData) {\n+        this.setCount(new DataTable(remoteData.getDataObjectStrings(0)));\n+        this.setSummation(new DataTable(remoteData.getDataObjectStrings(1)));\n+        setTimeBucket(remoteData.getDataLongs(0));\n+\n+        this.entityId = remoteData.getDataStrings(0);\n+        this.serviceId = remoteData.getDataStrings(1);\n+    }\n+\n+    @Override\n+    public RemoteData.Builder serialize() {\n+        RemoteData.Builder remoteBuilder = RemoteData.newBuilder();\n+        remoteBuilder.addDataObjectStrings(count.toStorageData());\n+        remoteBuilder.addDataObjectStrings(summation.toStorageData());\n+        remoteBuilder.addDataLongs(getTimeBucket());\n+\n+        remoteBuilder.addDataStrings(entityId);\n+        remoteBuilder.addDataStrings(serviceId);\n+\n+        return remoteBuilder;\n+    }\n+\n+    @Override\n+    public String id() {\n+        return getTimeBucket() + Const.ID_CONNECTOR + entityId;\n+    }\n+\n+    @Override\n+    public void accept(final MeterEntity entity, final DataTable value) {\n+        this.entityId = entity.id();\n+        this.serviceId = entity.serviceId();\n+        this.summation.append(value);\n+        DataTable c = new DataTable();\n+        value.sortedKeys(Comparator.naturalOrder()).forEach(key -> c.put(key, 1L));", "originalCommit": "61bad20f2de932fdd6551e1216b202eb3ceb23b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM1OTcwMA==", "url": "https://github.com/apache/skywalking/pull/5187#discussion_r462359700", "bodyText": "done", "author": "hanahmily", "createdAt": "2020-07-29T14:49:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMzNzY4NA=="}], "type": "inlineReview"}, {"oid": "d4f7c66e11535839ef57f8c783ff2ea5eafe32fd", "url": "https://github.com/apache/skywalking/commit/d4f7c66e11535839ef57f8c783ff2ea5eafe32fd", "message": "Polish codes", "committedDate": "2020-07-29T14:49:15Z", "type": "commit"}, {"oid": "ca4d4877b63b15c937d074fb4fcdf117a619dc6c", "url": "https://github.com/apache/skywalking/commit/ca4d4877b63b15c937d074fb4fcdf117a619dc6c", "message": "Merge branch 'master' into meter-label", "committedDate": "2020-07-29T14:50:05Z", "type": "commit"}]}