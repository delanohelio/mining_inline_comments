{"pr_number": 4858, "pr_title": "support class cache for ByteBuddy", "pr_createdAt": "2020-06-04T08:34:43Z", "pr_url": "https://github.com/apache/skywalking/pull/4858", "timeline": [{"oid": "e25b4f9f73c71fee8bc278dc0ba5df0db5d89976", "url": "https://github.com/apache/skywalking/commit/e25b4f9f73c71fee8bc278dc0ba5df0db5d89976", "message": "fix #4820, support class cache for ByteBuddy, solve the problem of other javaagent retransform classes enhanced by SkyWalking.", "committedDate": "2020-06-04T08:14:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExMjA2MQ==", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r435112061", "bodyText": "Copying from JDK requires you to explain which JDK, what is original license.", "author": "wu-sheng", "createdAt": "2020-06-04T09:19:06Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/util/IOUtils.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.util;\n+\n+/**\n+ * Copied from {@link org.apache.commons.io.IOUtils}\n+ */\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+public class IOUtils {\n+\n+    private static final int EOF = -1;\n+\n+    /**\n+     * The default buffer size ({@value}) to use for\n+     * {@link #copyLarge(InputStream, OutputStream)}\n+     */\n+    private static final int DEFAULT_BUFFER_SIZE = 1024 * 4;\n+\n+    /**\n+     * Get the contents of an <code>InputStream</code> as a <code>byte[]</code>.\n+     * <p>\n+     * This method buffers the input internally, so there is no need to use a\n+     * <code>BufferedInputStream</code>.\n+     *\n+     * @param input  the <code>InputStream</code> to read from\n+     * @return the requested byte array\n+     * @throws NullPointerException if the input is null\n+     * @throws IOException if an I/O error occurs\n+     */\n+    public static byte[] toByteArray(InputStream input) throws IOException {\n+        ByteArrayOutputStream output = new ByteArrayOutputStream();\n+        copy(input, output);\n+        return output.toByteArray();\n+    }\n+\n+\n+    /**\n+     * Copy bytes from an <code>InputStream</code> to an", "originalCommit": "e25b4f9f73c71fee8bc278dc0ba5df0db5d89976", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE3NzMxMA==", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r435177310", "bodyText": "IOUtils copy from commons-io-2.2, origin license is Apache 2.0", "author": "kylixs", "createdAt": "2020-06-04T11:16:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExMjA2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE4Njk0Ng==", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r435186946", "bodyText": "Then you need to update the License file in the root file. There are some included, learn from them.", "author": "wu-sheng", "createdAt": "2020-06-04T11:35:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExMjA2MQ=="}], "type": "inlineReview"}, {"oid": "bb0860e7fc6e0f044d464ba1145af70928e4e151", "url": "https://github.com/apache/skywalking/commit/bb0860e7fc6e0f044d464ba1145af70928e4e151", "message": "Class caches isolate by classloader", "committedDate": "2020-06-04T09:51:39Z", "type": "commit"}, {"oid": "f1f549188d901e5952a32ca56065ce3f017985fd", "url": "https://github.com/apache/skywalking/commit/f1f549188d901e5952a32ca56065ce3f017985fd", "message": "Add origin license of IOUtils", "committedDate": "2020-06-04T11:15:57Z", "type": "commit"}, {"oid": "b67f1a3aca000f4888604eec3159c047efc84e3d", "url": "https://github.com/apache/skywalking/commit/b67f1a3aca000f4888604eec3159c047efc84e3d", "message": "add usage of config `agent.is_cache_enhanced_class`", "committedDate": "2020-06-04T11:33:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5MDU0OA==", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r435190548", "bodyText": "This is not necessary, but OK. The key is License in the root folder of SkyWalking. We need to follow the License requirement, which require we add the explicit statement in the end of the license file.", "author": "wu-sheng", "createdAt": "2020-06-04T11:43:01Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/util/IOUtils.java", "diffHunk": "@@ -18,16 +18,17 @@\n \n package org.apache.skywalking.apm.agent.core.util;\n \n-/**\n- * Copied from {@link org.apache.commons.io.IOUtils}\n- */\n-\n import java.io.ByteArrayOutputStream;\n import java.io.Closeable;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n \n+/**\n+ * Copied from commons-io-2.2 {@link org.apache.commons.io.IOUtils}\n+ * Origin license: http://www.apache.org/licenses/LICENSE-2.0", "originalCommit": "b67f1a3aca000f4888604eec3159c047efc84e3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7c4f03630d6c243c85bbc9daf524bb57cfb0b419", "url": "https://github.com/apache/skywalking/commit/7c4f03630d6c243c85bbc9daf524bb57cfb0b419", "message": "agent class cache feature is disabled by default", "committedDate": "2020-06-07T16:22:54Z", "type": "commit"}, {"oid": "906dc61c5428638b223fa548b4ca004d51aeaa68", "url": "https://github.com/apache/skywalking/commit/906dc61c5428638b223fa548b4ca004d51aeaa68", "message": "add testcase for agent class cache feature", "committedDate": "2020-06-07T16:24:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyNDM0Ng==", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r437824346", "bodyText": "author should be removed.", "author": "wu-sheng", "createdAt": "2020-06-10T02:26:23Z", "path": "test/plugin/scenarios/retransform-class-scenario/src/main/java/org/apache/skywalking/apm/testcase/retransform_class/RetransformUtil.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.apache.skywalking.apm.testcase.retransform_class;\n+\n+import net.bytebuddy.agent.ByteBuddyAgent;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import test.org.apache.skywalking.apm.testcase.controller.TestController;\n+\n+import java.lang.instrument.ClassFileTransformer;\n+import java.lang.instrument.IllegalClassFormatException;\n+import java.lang.instrument.Instrumentation;\n+import java.security.ProtectionDomain;\n+\n+/**\n+ * @author gongdewei 2020/6/7", "originalCommit": "906dc61c5428638b223fa548b4ca004d51aeaa68", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUxNDQ4Ng==", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r438514486", "bodyText": "done", "author": "kylixs", "createdAt": "2020-06-11T02:55:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyNDM0Ng=="}], "type": "inlineReview"}, {"oid": "60f13edbc4bb347dcd12397c9ca65cf57a8f4c77", "url": "https://github.com/apache/skywalking/commit/60f13edbc4bb347dcd12397c9ca65cf57a8f4c77", "message": "simplify retransform class testcase detection, remove author info", "committedDate": "2020-06-11T02:54:04Z", "type": "commit"}, {"oid": "106a180946b6c8fa8ea6f93b98366ab35c7b54f5", "url": "https://github.com/apache/skywalking/commit/106a180946b6c8fa8ea6f93b98366ab35c7b54f5", "message": "add license", "committedDate": "2020-06-11T03:29:01Z", "type": "commit"}, {"oid": "cb6a47c35cc7a88f89a058f0491ef2e0b09d46f5", "url": "https://github.com/apache/skywalking/commit/cb6a47c35cc7a88f89a058f0491ef2e0b09d46f5", "message": "delete class cache dir on exit", "committedDate": "2020-06-11T07:23:23Z", "type": "commit"}, {"oid": "a6998018b519728b83654753c0eace6351f02d9a", "url": "https://github.com/apache/skywalking/commit/a6998018b519728b83654753c0eace6351f02d9a", "message": "add testcase to github workflow", "committedDate": "2020-06-11T09:28:45Z", "type": "commit"}, {"oid": "7244f9811622c429815e07d14f04687403ace505", "url": "https://github.com/apache/skywalking/commit/7244f9811622c429815e07d14f04687403ace505", "message": "add doc for FileUtils", "committedDate": "2020-06-11T09:40:17Z", "type": "commit"}, {"oid": "032305635a72f556b26609fa221b861a3d058125", "url": "https://github.com/apache/skywalking/commit/032305635a72f556b26609fa221b861a3d058125", "message": "Merge branch 'master' into agent-class-cache", "committedDate": "2020-06-13T06:50:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxNzIyMA==", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r439717220", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.info(\"SkyWalking agent setup class cache: {}\", Config.Agent.CLASS_CACHE_MODE);\n          \n          \n            \n                            logger.info(\"SkyWalking agent class cache [{}] activated.\", Config.Agent.CLASS_CACHE_MODE);", "author": "wu-sheng", "createdAt": "2020-06-13T07:20:39Z", "path": "apm-sniffer/apm-agent/src/main/java/org/apache/skywalking/apm/agent/SkyWalkingAgent.java", "diffHunk": "@@ -99,6 +100,15 @@ public static void premain(String agentArgs, Instrumentation instrumentation) th\n             return;\n         }\n \n+        if (Config.Agent.IS_CACHE_ENHANCED_CLASS) {\n+            try {\n+                agentBuilder = agentBuilder.with(new CacheableTransformerDecorator(Config.Agent.CLASS_CACHE_MODE));\n+                logger.info(\"SkyWalking agent setup class cache: {}\", Config.Agent.CLASS_CACHE_MODE);", "originalCommit": "032305635a72f556b26609fa221b861a3d058125", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxNzI3MA==", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r439717270", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.error(e, \"SkyWalking agent setup class cache failure.\");\n          \n          \n            \n                            logger.error(e, \"SkyWalking agent can't active class cache.\");", "author": "wu-sheng", "createdAt": "2020-06-13T07:21:06Z", "path": "apm-sniffer/apm-agent/src/main/java/org/apache/skywalking/apm/agent/SkyWalkingAgent.java", "diffHunk": "@@ -99,6 +100,15 @@ public static void premain(String agentArgs, Instrumentation instrumentation) th\n             return;\n         }\n \n+        if (Config.Agent.IS_CACHE_ENHANCED_CLASS) {\n+            try {\n+                agentBuilder = agentBuilder.with(new CacheableTransformerDecorator(Config.Agent.CLASS_CACHE_MODE));\n+                logger.info(\"SkyWalking agent setup class cache: {}\", Config.Agent.CLASS_CACHE_MODE);\n+            } catch (Exception e) {\n+                logger.error(e, \"SkyWalking agent setup class cache failure.\");", "originalCommit": "032305635a72f556b26609fa221b861a3d058125", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxNzU2Mw==", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r439717563", "bodyText": "File cache is a very sensitive and tricky thing, thinking in this way, once 2+ agents are sharing the agent.config, and open this feature, most likely they will share this dir. What will happen if they active file cache?\nIn most cases, file cache is meaning you need a dir lock, and generate the dir automatically.", "author": "wu-sheng", "createdAt": "2020-06-13T07:26:07Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/bytebuddy/CacheableTransformerDecorator.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.plugin.bytebuddy;\n+\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import net.bytebuddy.agent.builder.ResettableClassFileTransformer;\n+import net.bytebuddy.utility.RandomString;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.util.FileUtils;\n+import org.apache.skywalking.apm.agent.core.util.IOUtils;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.lang.instrument.IllegalClassFormatException;\n+import java.nio.file.Files;\n+import java.security.ProtectionDomain;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Wrapper classFileTransformer of ByteBuddy, save the enhanced bytecode to memory cache or file cache,\n+ * and automatically load the previously generated bytecode during the second retransform,\n+ * to solve the problem that ByteBuddy generates auxiliary classes with different random names every time.\n+ * Allow other javaagent to enhance those classes that enhanced by SkyWalking agent.\n+ */\n+public class CacheableTransformerDecorator implements AgentBuilder.TransformerDecorator {\n+\n+    private static final ILog logger = LogManager.getLogger(CacheableTransformerDecorator.class);\n+\n+    private String cacheDirBase;\n+    private final ClassCacheMode cacheMode;\n+    private ClassCacheResolver cacheResolver;\n+\n+    public CacheableTransformerDecorator(ClassCacheMode cacheMode) throws IOException {\n+        this.cacheMode = cacheMode;\n+        initClassCache();\n+    }\n+\n+    public CacheableTransformerDecorator(ClassCacheMode cacheMode, String cacheDirBase) throws IOException {\n+        this.cacheDirBase = cacheDirBase;\n+        this.cacheMode = cacheMode;\n+        initClassCache();\n+    }\n+\n+    private void initClassCache() throws IOException {\n+        if (this.cacheMode.equals(ClassCacheMode.FILE)) {\n+            File cacheDir;\n+            if (this.cacheDirBase == null) {\n+                cacheDir = Files.createTempDirectory(\"class-cache\").toFile();\n+            } else {\n+                cacheDir = new File(this.cacheDirBase + \"/class-cache-\" + RandomString.make());\n+            }\n+            cacheResolver = new FileCacheResolver(cacheDir);\n+        } else {\n+            cacheResolver = new MemoryCacheResolver();\n+        }\n+    }\n+\n+    @Override\n+    public ResettableClassFileTransformer decorate(ResettableClassFileTransformer classFileTransformer) {\n+        return new ResettableClassFileTransformer.WithDelegation(classFileTransformer) {\n+\n+            @Override\n+            public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {\n+                // load from cache\n+                byte[] classCache = cacheResolver.getClassCache(loader, className);\n+                if (classCache != null) {\n+                    return classCache;\n+                }\n+\n+                //transform class\n+                classfileBuffer = classFileTransformer.transform(loader, className, classBeingRedefined, protectionDomain, classfileBuffer);\n+\n+                // save to cache\n+                if (classfileBuffer != null) {\n+                    cacheResolver.putClassCache(loader, className, classfileBuffer);\n+                }\n+\n+                return classfileBuffer;\n+            }\n+        };\n+    }\n+\n+    private static String getClassLoaderHash(ClassLoader loader) {\n+        String classloader;\n+        if (loader != null) {\n+            classloader = Integer.toHexString(loader.hashCode());\n+        } else {\n+            //classloader is null for BootstrapClassLoader\n+            classloader = \"00000000\";\n+        }\n+        return classloader;\n+    }\n+\n+    interface ClassCacheResolver {\n+\n+        byte[] getClassCache(ClassLoader loader, String className);\n+\n+        void putClassCache(ClassLoader loader, String className, byte[] classfileBuffer);\n+    }\n+\n+    static class MemoryCacheResolver implements ClassCacheResolver {\n+        // classloaderHashcode@className -> class bytes\n+        private Map<String, byte[]> classCacheMap = new ConcurrentHashMap<String, byte[]>();\n+\n+        @Override\n+        public byte[] getClassCache(ClassLoader loader, String className) {\n+            String cacheKey = getCacheKey(loader, className);\n+            return classCacheMap.get(cacheKey);\n+        }\n+\n+        @Override\n+        public void putClassCache(ClassLoader loader, String className, byte[] classfileBuffer) {\n+            String cacheKey = getCacheKey(loader, className);\n+            classCacheMap.put(cacheKey, classfileBuffer);\n+        }\n+\n+        private String getCacheKey(ClassLoader loader, String className) {\n+            return getClassLoaderHash(loader) + \"@\" + className;\n+        }\n+    }\n+\n+    static class FileCacheResolver implements ClassCacheResolver {", "originalCommit": "032305635a72f556b26609fa221b861a3d058125", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkwNTA1OQ==", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r439905059", "bodyText": "class cache dir is a auto generated random directory, different agents will isolate their respective class cache.\ncacheDir = new File(this.cacheDirBase + \"/class-cache-\" + RandomString.make());", "author": "kylixs", "createdAt": "2020-06-15T02:46:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxNzU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkwNTY5Ng==", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r439905696", "bodyText": "Yes, but can't find the API using public CacheableTransformerDecorator(ClassCacheMode cacheMode, String cacheDirBase) . Do I miss anything?\nThe cacheDirBase seems never be used.", "author": "wu-sheng", "createdAt": "2020-06-15T02:49:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxNzU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkwNjI3MA==", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r439906270", "bodyText": "So, base on your codes, it uses the temp folder only.", "author": "wu-sheng", "createdAt": "2020-06-15T02:52:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxNzU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkxMDI5Mw==", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r439910293", "bodyText": "From my understanding, I think the folder should be in the agent folder, in order to make sure writable. Also, should be more friendly to docker and k8s users. They would expect log folder is writable and will be new files added.", "author": "wu-sheng", "createdAt": "2020-06-15T03:12:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxNzU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU1NDA2MQ==", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r441554061", "bodyText": "So, base on your codes, it uses the temp folder only.\n\nYes,  it uses the temp folder starts with 'class-cache' and with random suffix,  like 'class-cache23123131'", "author": "kylixs", "createdAt": "2020-06-17T13:41:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxNzU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU1NjQ0Nw==", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r441556447", "bodyText": "From my understanding, I think the folder should be in the agent folder, in order to make sure writable. Also, should be more friendly to docker and k8s users. They would expect log folder is writable and will be new files added.\n\nThe agent folder is writable?  Please give a sample path of class cache.", "author": "kylixs", "createdAt": "2020-06-17T13:44:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxNzU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU3MjQ3Ng==", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r441572476", "bodyText": "AgentPackagePath#getPath. WriterFactory(logging) is using this to write.", "author": "wu-sheng", "createdAt": "2020-06-17T14:06:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxNzU2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxNzU4Mg==", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r439717582", "bodyText": "Deleting file shares the same issue of cache dir confliction.", "author": "wu-sheng", "createdAt": "2020-06-13T07:26:33Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/bytebuddy/CacheableTransformerDecorator.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.plugin.bytebuddy;\n+\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import net.bytebuddy.agent.builder.ResettableClassFileTransformer;\n+import net.bytebuddy.utility.RandomString;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.util.FileUtils;\n+import org.apache.skywalking.apm.agent.core.util.IOUtils;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.lang.instrument.IllegalClassFormatException;\n+import java.nio.file.Files;\n+import java.security.ProtectionDomain;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Wrapper classFileTransformer of ByteBuddy, save the enhanced bytecode to memory cache or file cache,\n+ * and automatically load the previously generated bytecode during the second retransform,\n+ * to solve the problem that ByteBuddy generates auxiliary classes with different random names every time.\n+ * Allow other javaagent to enhance those classes that enhanced by SkyWalking agent.\n+ */\n+public class CacheableTransformerDecorator implements AgentBuilder.TransformerDecorator {\n+\n+    private static final ILog logger = LogManager.getLogger(CacheableTransformerDecorator.class);\n+\n+    private String cacheDirBase;\n+    private final ClassCacheMode cacheMode;\n+    private ClassCacheResolver cacheResolver;\n+\n+    public CacheableTransformerDecorator(ClassCacheMode cacheMode) throws IOException {\n+        this.cacheMode = cacheMode;\n+        initClassCache();\n+    }\n+\n+    public CacheableTransformerDecorator(ClassCacheMode cacheMode, String cacheDirBase) throws IOException {\n+        this.cacheDirBase = cacheDirBase;\n+        this.cacheMode = cacheMode;\n+        initClassCache();\n+    }\n+\n+    private void initClassCache() throws IOException {\n+        if (this.cacheMode.equals(ClassCacheMode.FILE)) {\n+            File cacheDir;\n+            if (this.cacheDirBase == null) {\n+                cacheDir = Files.createTempDirectory(\"class-cache\").toFile();\n+            } else {\n+                cacheDir = new File(this.cacheDirBase + \"/class-cache-\" + RandomString.make());\n+            }\n+            cacheResolver = new FileCacheResolver(cacheDir);\n+        } else {\n+            cacheResolver = new MemoryCacheResolver();\n+        }\n+    }\n+\n+    @Override\n+    public ResettableClassFileTransformer decorate(ResettableClassFileTransformer classFileTransformer) {\n+        return new ResettableClassFileTransformer.WithDelegation(classFileTransformer) {\n+\n+            @Override\n+            public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {\n+                // load from cache\n+                byte[] classCache = cacheResolver.getClassCache(loader, className);\n+                if (classCache != null) {\n+                    return classCache;\n+                }\n+\n+                //transform class\n+                classfileBuffer = classFileTransformer.transform(loader, className, classBeingRedefined, protectionDomain, classfileBuffer);\n+\n+                // save to cache\n+                if (classfileBuffer != null) {\n+                    cacheResolver.putClassCache(loader, className, classfileBuffer);\n+                }\n+\n+                return classfileBuffer;\n+            }\n+        };\n+    }\n+\n+    private static String getClassLoaderHash(ClassLoader loader) {\n+        String classloader;\n+        if (loader != null) {\n+            classloader = Integer.toHexString(loader.hashCode());\n+        } else {\n+            //classloader is null for BootstrapClassLoader\n+            classloader = \"00000000\";\n+        }\n+        return classloader;\n+    }\n+\n+    interface ClassCacheResolver {\n+\n+        byte[] getClassCache(ClassLoader loader, String className);\n+\n+        void putClassCache(ClassLoader loader, String className, byte[] classfileBuffer);\n+    }\n+\n+    static class MemoryCacheResolver implements ClassCacheResolver {\n+        // classloaderHashcode@className -> class bytes\n+        private Map<String, byte[]> classCacheMap = new ConcurrentHashMap<String, byte[]>();\n+\n+        @Override\n+        public byte[] getClassCache(ClassLoader loader, String className) {\n+            String cacheKey = getCacheKey(loader, className);\n+            return classCacheMap.get(cacheKey);\n+        }\n+\n+        @Override\n+        public void putClassCache(ClassLoader loader, String className, byte[] classfileBuffer) {\n+            String cacheKey = getCacheKey(loader, className);\n+            classCacheMap.put(cacheKey, classfileBuffer);\n+        }\n+\n+        private String getCacheKey(ClassLoader loader, String className) {\n+            return getClassLoaderHash(loader) + \"@\" + className;\n+        }\n+    }\n+\n+    static class FileCacheResolver implements ClassCacheResolver {\n+\n+        private final File cacheDir;\n+\n+        FileCacheResolver(File cacheDir) {\n+            this.cacheDir = cacheDir;\n+            if (!cacheDir.exists()) {\n+                cacheDir.mkdirs();\n+            }\n+\n+            //clean cache dir on exit\n+            FileUtils.deleteDirectoryOnExit(cacheDir);", "originalCommit": "032305635a72f556b26609fa221b861a3d058125", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkwNTI2OQ==", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r439905269", "bodyText": "different agents will isolate their respective class cache.", "author": "kylixs", "createdAt": "2020-06-15T02:47:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxNzU4Mg=="}], "type": "inlineReview"}, {"oid": "9d3a0dfbb0768ed1564b4c0968366755c57f1217", "url": "https://github.com/apache/skywalking/commit/9d3a0dfbb0768ed1564b4c0968366755c57f1217", "message": "Update log message of class cache\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>", "committedDate": "2020-06-15T02:35:25Z", "type": "commit"}, {"oid": "8645c7cf817bbee67cdea0d85efced749147db37", "url": "https://github.com/apache/skywalking/commit/8645c7cf817bbee67cdea0d85efced749147db37", "message": "Update log message of class cache\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>", "committedDate": "2020-06-15T02:36:12Z", "type": "commit"}, {"oid": "ef9225cebe6d50714aa003306a58eb5ff1984111", "url": "https://github.com/apache/skywalking/commit/ef9225cebe6d50714aa003306a58eb5ff1984111", "message": "Merge branch 'master' into agent-class-cache", "committedDate": "2020-06-16T09:39:05Z", "type": "commit"}, {"oid": "e5301c23453a6e3c8a1d219357b5b51e69e5f121", "url": "https://github.com/apache/skywalking/commit/e5301c23453a6e3c8a1d219357b5b51e69e5f121", "message": "create class cache dir under agent path", "committedDate": "2020-06-29T09:20:39Z", "type": "commit"}, {"oid": "a823a017427886301fa83c024388daeaa9dc41a4", "url": "https://github.com/apache/skywalking/commit/a823a017427886301fa83c024388daeaa9dc41a4", "message": "Comment class cache config", "committedDate": "2020-06-29T12:24:29Z", "type": "commit"}, {"oid": "f95fe80aa1998e503934794268bc9f02fe6a9f56", "url": "https://github.com/apache/skywalking/commit/f95fe80aa1998e503934794268bc9f02fe6a9f56", "message": "Merge branch 'master' into agent-class-cache", "committedDate": "2020-06-30T02:29:09Z", "type": "commit"}, {"oid": "69115cb4fffc285b24c75588980f33a9d8a018b8", "url": "https://github.com/apache/skywalking/commit/69115cb4fffc285b24c75588980f33a9d8a018b8", "message": "Add class cache faq doc", "committedDate": "2020-06-30T03:47:11Z", "type": "commit"}, {"oid": "2326ab7bbc5f5751d189e568ec02015de3a49bab", "url": "https://github.com/apache/skywalking/commit/2326ab7bbc5f5751d189e568ec02015de3a49bab", "message": "fix javadoc ref error", "committedDate": "2020-06-30T07:14:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4NTkzNg==", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r447485936", "bodyText": "You are putting all files in one folder, NOTICE potential issue\nFAT32: Maximum number of files per directory: 216 - 1 (65,535)\nNTFS:Maximum number of files: 2^32 - 1 (4,294,967,295)\next2/ext3:Maximum number of files per directory: ~1.3 \u00d7 1020 (performance issues past 10,000)\next4: Maximum number of files per directory: unlimited\nMaterial source, https://stackoverflow.com/questions/466521/how-many-files-can-i-put-in-a-directory", "author": "wu-sheng", "createdAt": "2020-06-30T07:57:09Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/bytebuddy/CacheableTransformerDecorator.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.plugin.bytebuddy;\n+\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import net.bytebuddy.agent.builder.ResettableClassFileTransformer;\n+import net.bytebuddy.utility.RandomString;\n+import org.apache.skywalking.apm.agent.core.boot.AgentPackageNotFoundException;\n+import org.apache.skywalking.apm.agent.core.boot.AgentPackagePath;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.util.FileUtils;\n+import org.apache.skywalking.apm.agent.core.util.IOUtils;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.lang.instrument.IllegalClassFormatException;\n+import java.security.ProtectionDomain;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Wrapper classFileTransformer of ByteBuddy, save the enhanced bytecode to memory cache or file cache,\n+ * and automatically load the previously generated bytecode during the second retransform,\n+ * to solve the problem that ByteBuddy generates auxiliary classes with different random names every time.\n+ * Allow other javaagent to enhance those classes that enhanced by SkyWalking agent.\n+ */\n+public class CacheableTransformerDecorator implements AgentBuilder.TransformerDecorator {\n+\n+    private static final ILog logger = LogManager.getLogger(CacheableTransformerDecorator.class);\n+\n+    private final ClassCacheMode cacheMode;\n+    private ClassCacheResolver cacheResolver;\n+\n+    public CacheableTransformerDecorator(ClassCacheMode cacheMode) throws IOException {\n+        this.cacheMode = cacheMode;\n+        initClassCache();\n+    }\n+\n+    private void initClassCache() throws IOException {\n+        if (this.cacheMode.equals(ClassCacheMode.FILE)) {\n+            String cacheDirBase = null;\n+            try {\n+                cacheDirBase = AgentPackagePath.getPath() + \"/class-cache\";\n+            } catch (AgentPackageNotFoundException e) {\n+                throw new IOException(\"Can't find the root path for creating /class-cache folder.\");\n+            }\n+            File cacheDir = new File(cacheDirBase + \"/class-cache-\" + RandomString.make());\n+            if (!cacheDir.exists()) {\n+                cacheDir.mkdirs();\n+            }\n+            if (!cacheDir.exists()) {\n+                throw new IOException(\"Create class cache dir failure\");\n+            }\n+\n+            cacheResolver = new FileCacheResolver(cacheDir);\n+        } else {\n+            cacheResolver = new MemoryCacheResolver();\n+        }\n+    }\n+\n+    @Override\n+    public ResettableClassFileTransformer decorate(ResettableClassFileTransformer classFileTransformer) {\n+        return new ResettableClassFileTransformer.WithDelegation(classFileTransformer) {\n+\n+            @Override\n+            public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {\n+                // load from cache\n+                byte[] classCache = cacheResolver.getClassCache(loader, className);\n+                if (classCache != null) {\n+                    return classCache;\n+                }\n+\n+                //transform class\n+                classfileBuffer = classFileTransformer.transform(loader, className, classBeingRedefined, protectionDomain, classfileBuffer);\n+\n+                // save to cache\n+                if (classfileBuffer != null) {\n+                    cacheResolver.putClassCache(loader, className, classfileBuffer);\n+                }\n+\n+                return classfileBuffer;\n+            }\n+        };\n+    }\n+\n+    private static String getClassLoaderHash(ClassLoader loader) {\n+        String classloader;\n+        if (loader != null) {\n+            classloader = Integer.toHexString(loader.hashCode());\n+        } else {\n+            //classloader is null for BootstrapClassLoader\n+            classloader = \"00000000\";\n+        }\n+        return classloader;\n+    }\n+\n+    interface ClassCacheResolver {\n+\n+        byte[] getClassCache(ClassLoader loader, String className);\n+\n+        void putClassCache(ClassLoader loader, String className, byte[] classfileBuffer);\n+    }\n+\n+    static class MemoryCacheResolver implements ClassCacheResolver {\n+        // classloaderHashcode@className -> class bytes\n+        private Map<String, byte[]> classCacheMap = new ConcurrentHashMap<String, byte[]>();\n+\n+        @Override\n+        public byte[] getClassCache(ClassLoader loader, String className) {\n+            String cacheKey = getCacheKey(loader, className);\n+            return classCacheMap.get(cacheKey);\n+        }\n+\n+        @Override\n+        public void putClassCache(ClassLoader loader, String className, byte[] classfileBuffer) {\n+            String cacheKey = getCacheKey(loader, className);\n+            classCacheMap.put(cacheKey, classfileBuffer);\n+        }\n+\n+        private String getCacheKey(ClassLoader loader, String className) {\n+            return getClassLoaderHash(loader) + \"@\" + className;\n+        }\n+    }\n+\n+    static class FileCacheResolver implements ClassCacheResolver {\n+\n+        private final File cacheDir;\n+\n+        FileCacheResolver(File cacheDir) {\n+            this.cacheDir = cacheDir;\n+\n+            //clean cache dir on exit\n+            FileUtils.deleteDirectoryOnExit(cacheDir);\n+        }\n+\n+        @Override\n+        public byte[] getClassCache(ClassLoader loader, String className) {\n+            // load from cache\n+            File cacheFile = getCacheFile(loader, className);\n+            if (cacheFile.exists()) {\n+                FileInputStream fileInputStream = null;\n+                try {\n+                    fileInputStream = new FileInputStream(cacheFile);\n+                    return IOUtils.toByteArray(fileInputStream);\n+                } catch (IOException e) {\n+                    logger.error(\"load class bytes from cache file failure\", e);\n+                } finally {\n+                    IOUtils.closeQuietly(fileInputStream);\n+                }\n+            }\n+            return null;\n+        }\n+\n+        @Override\n+        public void putClassCache(ClassLoader loader, String className, byte[] classfileBuffer) {\n+            File cacheFile = getCacheFile(loader, className);\n+            FileOutputStream output = null;\n+            try {\n+                output = new FileOutputStream(cacheFile);\n+                IOUtils.copy(new ByteArrayInputStream(classfileBuffer), output);\n+            } catch (IOException e) {\n+                logger.error(\"save class bytes to cache file failure\", e);\n+            } finally {\n+                IOUtils.closeQuietly(output);\n+            }\n+        }\n+\n+        private File getCacheFile(ClassLoader loader, String className) {\n+            String filename = getClassLoaderHash(loader) + \"@\" + className.replace('/', '.') + \".class\";", "originalCommit": "2326ab7bbc5f5751d189e568ec02015de3a49bab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4NjYyMw==", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r447486623", "bodyText": "I don't think this is a block, as FAT32 is rarely to see now. But just want to inform you, this could happen.", "author": "wu-sheng", "createdAt": "2020-06-30T07:58:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4NTkzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ5Mjc4NA==", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r447492784", "bodyText": "Any suggestions?  Some dynamically generated classes may have a large number.", "author": "kylixs", "createdAt": "2020-06-30T08:08:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4NTkzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUxMDY2NA==", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r447510664", "bodyText": "Usually, file could be generated based on classloader/package....name/class name.\nDo you want to change? I am sure how many people are still using FAT32.", "author": "wu-sheng", "createdAt": "2020-06-30T08:35:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4NTkzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY1MDA3Ng==", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r447650076", "bodyText": "At the same time, I think you forgot the conflicts could happen when agents installed in several Services, but share the same folder?", "author": "wu-sheng", "createdAt": "2020-06-30T12:40:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4NTkzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3OTc3Ng==", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r448079776", "bodyText": "Each SkyWalking agent has a random directory like '/class-cache/class-cache-z3sdv3d4'\nFile cacheDir = new File(cacheDirBase + \"/class-cache-\" + RandomString.make());", "author": "kylixs", "createdAt": "2020-07-01T02:23:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4NTkzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA4MDY2MA==", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r448080660", "bodyText": "Got it. Do I need to wait for folder structure change?", "author": "wu-sheng", "createdAt": "2020-07-01T02:27:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4NTkzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA4OTUwMQ==", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r448089501", "bodyText": "It's done, save cache class file to structure directory.", "author": "kylixs", "createdAt": "2020-07-01T03:05:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4NTkzNg=="}], "type": "inlineReview"}, {"oid": "ff9de1285999c2423cb97e379f41603cc3edaae8", "url": "https://github.com/apache/skywalking/commit/ff9de1285999c2423cb97e379f41603cc3edaae8", "message": "Update docs/en/FAQ/Compatible-with-other-javaagent-bytecode-processing.md\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>", "committedDate": "2020-07-01T02:24:12Z", "type": "commit"}, {"oid": "e61d1e5d00533a3c001c5f5562e78926c9579ee2", "url": "https://github.com/apache/skywalking/commit/e61d1e5d00533a3c001c5f5562e78926c9579ee2", "message": "Update docs/en/FAQ/Compatible-with-other-javaagent-bytecode-processing.md\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>", "committedDate": "2020-07-01T02:26:48Z", "type": "commit"}, {"oid": "a6355ce87bebaba46657e5ba2615f49d3ff0ca63", "url": "https://github.com/apache/skywalking/commit/a6355ce87bebaba46657e5ba2615f49d3ff0ca63", "message": "Update docs/en/FAQ/Compatible-with-other-javaagent-bytecode-processing.md\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>", "committedDate": "2020-07-01T02:27:14Z", "type": "commit"}, {"oid": "1831a6c31150380f2a46a6ddf56b807ef8935572", "url": "https://github.com/apache/skywalking/commit/1831a6c31150380f2a46a6ddf56b807ef8935572", "message": "Update docs/en/FAQ/Compatible-with-other-javaagent-bytecode-processing.md\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>", "committedDate": "2020-07-01T02:27:43Z", "type": "commit"}, {"oid": "1f1421a4e1f5b504e9360fc4ea3b6d02fbc73180", "url": "https://github.com/apache/skywalking/commit/1f1421a4e1f5b504e9360fc4ea3b6d02fbc73180", "message": "Update docs/en/FAQ/Compatible-with-other-javaagent-bytecode-processing.md\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>", "committedDate": "2020-07-01T02:31:30Z", "type": "commit"}, {"oid": "15bb8d75d939a857549ab1212fdafbc0d6bb672f", "url": "https://github.com/apache/skywalking/commit/15bb8d75d939a857549ab1212fdafbc0d6bb672f", "message": "Update docs/en/FAQ/Compatible-with-other-javaagent-bytecode-processing.md\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>", "committedDate": "2020-07-01T02:31:52Z", "type": "commit"}, {"oid": "4e6b64c2612104884437459b3d4469ad7f67f5ab", "url": "https://github.com/apache/skywalking/commit/4e6b64c2612104884437459b3d4469ad7f67f5ab", "message": "Update docs/en/FAQ/Compatible-with-other-javaagent-bytecode-processing.md\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>", "committedDate": "2020-07-01T02:32:11Z", "type": "commit"}, {"oid": "4c975b07f2e2308e068d159ef1b38304ff6df151", "url": "https://github.com/apache/skywalking/commit/4c975b07f2e2308e068d159ef1b38304ff6df151", "message": "Update docs/en/FAQ/Compatible-with-other-javaagent-bytecode-processing.md\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>", "committedDate": "2020-07-01T02:32:43Z", "type": "commit"}, {"oid": "eabc3b44c6b9fa9eb436987ec454f99a113eefcb", "url": "https://github.com/apache/skywalking/commit/eabc3b44c6b9fa9eb436987ec454f99a113eefcb", "message": "Merge branch 'master' into agent-class-cache", "committedDate": "2020-07-01T02:39:24Z", "type": "commit"}, {"oid": "2a3aae22fe3bc7b5d5cec9c3f3d24311ae004851", "url": "https://github.com/apache/skywalking/commit/2a3aae22fe3bc7b5d5cec9c3f3d24311ae004851", "message": "Add FAQ link to `agent.is_cache_enhanced_class`", "committedDate": "2020-07-01T02:42:43Z", "type": "commit"}, {"oid": "f8f3a82e0217a36ec8ec2404cbe707c55f382469", "url": "https://github.com/apache/skywalking/commit/f8f3a82e0217a36ec8ec2404cbe707c55f382469", "message": "Update docs/en/FAQ/Compatible-with-other-javaagent-bytecode-processing.md\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>", "committedDate": "2020-07-01T02:43:53Z", "type": "commit"}, {"oid": "f221261776e9656a6f45da8b930da8a853ae82de", "url": "https://github.com/apache/skywalking/commit/f221261776e9656a6f45da8b930da8a853ae82de", "message": "save class cache as structured file", "committedDate": "2020-07-01T03:02:00Z", "type": "commit"}, {"oid": "d8cd53c279b5fc54d4cd5db4a4502c5751b8872c", "url": "https://github.com/apache/skywalking/commit/d8cd53c279b5fc54d4cd5db4a4502c5751b8872c", "message": "Change retransform demo repo link", "committedDate": "2020-07-01T07:38:56Z", "type": "commit"}, {"oid": "d93f3389eeb21f2a25dba9250f8ac8648fec412a", "url": "https://github.com/apache/skywalking/commit/d93f3389eeb21f2a25dba9250f8ac8648fec412a", "message": "add retransform class testcase for tomcat container", "committedDate": "2020-07-01T09:51:04Z", "type": "commit"}, {"oid": "7da2bc5c0f7795b510cf183793adeee939d823ed", "url": "https://github.com/apache/skywalking/commit/7da2bc5c0f7795b510cf183793adeee939d823ed", "message": "enable class cache feature", "committedDate": "2020-07-01T09:58:17Z", "type": "commit"}, {"oid": "b9d3203ad8c72c9ad5225b39ad7b1dfdd6d02fc2", "url": "https://github.com/apache/skywalking/commit/b9d3203ad8c72c9ad5225b39ad7b1dfdd6d02fc2", "message": "Merge branch 'master' into agent-class-cache", "committedDate": "2020-07-01T11:06:59Z", "type": "commit"}]}