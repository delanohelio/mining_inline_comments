{"pr_number": 5413, "pr_title": "Add support for quartz-scheduler", "pr_createdAt": "2020-08-30T06:29:21Z", "pr_url": "https://github.com/apache/skywalking/pull/5413", "timeline": [{"oid": "72cdd897cb173ae6db8b9aa211f900343aa34200", "url": "https://github.com/apache/skywalking/commit/72cdd897cb173ae6db8b9aa211f900343aa34200", "message": "Add support for quartz-scheduler", "committedDate": "2020-08-30T05:46:18Z", "type": "commit"}, {"oid": "3f7c2c6b67fe39d6a7f47fda6892e978b8409f40", "url": "https://github.com/apache/skywalking/commit/3f7c2c6b67fe39d6a7f47fda6892e978b8409f40", "message": "fixed", "committedDate": "2020-08-30T06:41:46Z", "type": "commit"}, {"oid": "1b6c5b11b5af0fd0cd920ae754ffe2b722794ef5", "url": "https://github.com/apache/skywalking/commit/1b6c5b11b5af0fd0cd920ae754ffe2b722794ef5", "message": "fixed", "committedDate": "2020-08-30T07:01:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc0NTM4NA==", "url": "https://github.com/apache/skywalking/pull/5413#discussion_r479745384", "bodyText": "What is this? The job parameter?", "author": "wu-sheng", "createdAt": "2020-08-30T09:24:09Z", "path": "apm-sniffer/optional-plugins/quartz-scheduler-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/quartz/JobRunShellMethodInterceptor.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.quartz;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.AbstractTag;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobDetail;\n+\n+import java.lang.reflect.Method;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Intercept method of {@link org.quartz.core.JobRunShell#run()}.\n+ * record the quartz job local span.\n+ */\n+public class JobRunShellMethodInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    private static final AbstractTag JOB_GROUP = Tags.ofKey(\"jobGroup\");\n+    private static final AbstractTag JOB_DATA_MAP = Tags.ofKey(\"jobDataMap\");\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        JobDetail jobDetail = (JobDetail) objInst.getSkyWalkingDynamicField();\n+\n+        String jobName = jobDetail.getKey().getName();\n+        String jobGroup = jobDetail.getKey().getGroup();\n+        String operationName = ComponentsDefine.QUARTZ_SCHEDULER.getName() + \"/\" + jobName;\n+\n+        AbstractSpan span = ContextManager.createLocalSpan(operationName);\n+        span.setComponent(ComponentsDefine.QUARTZ_SCHEDULER);\n+        Tags.LOGIC_ENDPOINT.set(span, Tags.VAL_LOCAL_SPAN_AS_LOGIC_ENDPOINT);\n+        span.tag(JOB_GROUP, jobGroup == null ? \"\" : jobGroup);\n+        span.tag(JOB_DATA_MAP, getJobDataMap(jobDetail).toString());", "originalCommit": "1b6c5b11b5af0fd0cd920ae754ffe2b722794ef5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc2MTgxNA==", "url": "https://github.com/apache/skywalking/pull/5413#discussion_r479761814", "bodyText": "https://github.com/quartz-scheduler/quartz/blob/master/quartz-core/src/main/java/org/quartz/JobDetail.java#L75\nhttps://github.com/quartz-scheduler/quartz/blob/master/quartz-core/src/main/java/org/quartz/JobDataMap.java#L36", "author": "hailin0", "createdAt": "2020-08-30T12:07:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc0NTM4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc2MjIzOQ==", "url": "https://github.com/apache/skywalking/pull/5413#discussion_r479762239", "bodyText": "Could call JobDataMap#toString directly? Typically, all maps should have supported this way, as a string-string map.", "author": "wu-sheng", "createdAt": "2020-08-30T12:11:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc0NTM4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc2Mjc0Mg==", "url": "https://github.com/apache/skywalking/pull/5413#discussion_r479762742", "bodyText": "yes, may have the same job name and job class but parameter not equal", "author": "hailin0", "createdAt": "2020-08-30T12:17:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc0NTM4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc0NTQyNQ==", "url": "https://github.com/apache/skywalking/pull/5413#discussion_r479745425", "bodyText": "What is jobGroup? Could you provide a document link?", "author": "wu-sheng", "createdAt": "2020-08-30T09:24:35Z", "path": "apm-sniffer/optional-plugins/quartz-scheduler-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/quartz/JobRunShellMethodInterceptor.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.quartz;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.AbstractTag;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobDetail;\n+\n+import java.lang.reflect.Method;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Intercept method of {@link org.quartz.core.JobRunShell#run()}.\n+ * record the quartz job local span.\n+ */\n+public class JobRunShellMethodInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    private static final AbstractTag JOB_GROUP = Tags.ofKey(\"jobGroup\");\n+    private static final AbstractTag JOB_DATA_MAP = Tags.ofKey(\"jobDataMap\");\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        JobDetail jobDetail = (JobDetail) objInst.getSkyWalkingDynamicField();\n+\n+        String jobName = jobDetail.getKey().getName();\n+        String jobGroup = jobDetail.getKey().getGroup();", "originalCommit": "1b6c5b11b5af0fd0cd920ae754ffe2b722794ef5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc2MTQ4OA==", "url": "https://github.com/apache/skywalking/pull/5413#discussion_r479761488", "bodyText": "https://github.com/quartz-scheduler/quartz/blob/master/quartz-core/src/main/java/org/quartz/Scheduler.java#L69\nhttps://github.com/quartz-scheduler/quartz/blob/master/quartz-core/src/main/java/org/quartz/JobKey.java#L23", "author": "hailin0", "createdAt": "2020-08-30T12:04:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc0NTQyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc2MzE5OQ==", "url": "https://github.com/apache/skywalking/pull/5413#discussion_r479763199", "bodyText": "I mean here, you build a new map, which is expensive. If originalJobDataMap could toString directly, we should do that.", "author": "wu-sheng", "createdAt": "2020-08-30T12:22:05Z", "path": "apm-sniffer/optional-plugins/quartz-scheduler-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/quartz/JobRunShellMethodInterceptor.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.quartz;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.AbstractTag;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobDetail;\n+\n+import java.lang.reflect.Method;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Intercept method of {@link org.quartz.core.JobRunShell#run()}.\n+ * record the quartz job local span.\n+ */\n+public class JobRunShellMethodInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    private static final AbstractTag JOB_GROUP = Tags.ofKey(\"jobGroup\");\n+    private static final AbstractTag JOB_DATA_MAP = Tags.ofKey(\"jobDataMap\");\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        JobDetail jobDetail = (JobDetail) objInst.getSkyWalkingDynamicField();\n+\n+        String jobName = jobDetail.getKey().getName();\n+        String jobGroup = jobDetail.getKey().getGroup();\n+        String operationName = ComponentsDefine.QUARTZ_SCHEDULER.getName() + \"/\" + jobName;\n+\n+        AbstractSpan span = ContextManager.createLocalSpan(operationName);\n+        span.setComponent(ComponentsDefine.QUARTZ_SCHEDULER);\n+        Tags.LOGIC_ENDPOINT.set(span, Tags.VAL_LOCAL_SPAN_AS_LOGIC_ENDPOINT);\n+        span.tag(JOB_GROUP, jobGroup == null ? \"\" : jobGroup);\n+        span.tag(JOB_DATA_MAP, getJobDataMap(jobDetail).toString());\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        ContextManager.stopSpan();\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Throwable t) {\n+        ContextManager.activeSpan().errorOccurred().log(t);\n+    }\n+\n+    private static Map<String, String> getJobDataMap(JobDetail jobDetail) {\n+        JobDataMap originalJobDataMap = jobDetail.getJobDataMap();\n+        if (originalJobDataMap != null) {\n+            Map<String, String> jobDataMap = new HashMap();", "originalCommit": "1b6c5b11b5af0fd0cd920ae754ffe2b722794ef5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc2ODE2NQ==", "url": "https://github.com/apache/skywalking/pull/5413#discussion_r479768165", "bodyText": "ok.", "author": "hailin0", "createdAt": "2020-08-30T13:10:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc2MzE5OQ=="}], "type": "inlineReview"}, {"oid": "b5048e111352782dd3d743619d25cac32cd19f9a", "url": "https://github.com/apache/skywalking/commit/b5048e111352782dd3d743619d25cac32cd19f9a", "message": "fixed", "committedDate": "2020-08-30T13:07:35Z", "type": "commit"}, {"oid": "c04ce017973a3702d559cd7df83db40ad08e5429", "url": "https://github.com/apache/skywalking/commit/c04ce017973a3702d559cd7df83db40ad08e5429", "message": "Update docs/en/setup/service-agent/java-agent/README.md", "committedDate": "2020-08-30T14:56:03Z", "type": "commit"}]}