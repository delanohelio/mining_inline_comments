{"pr_number": 4783, "pr_title": " Ingest prometheus metrics through meter system ", "pr_createdAt": "2020-05-13T17:24:48Z", "pr_url": "https://github.com/apache/skywalking/pull/4783", "timeline": [{"oid": "513bc1dfd4ee3225a28fe15df3e6090f6d868113", "url": "https://github.com/apache/skywalking/commit/513bc1dfd4ee3225a28fe15df3e6090f6d868113", "message": "Parse prometheus expostion text format\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>", "committedDate": "2020-05-14T00:10:35Z", "type": "forcePushed"}, {"oid": "d5140463e749c46b6ebf59fb4c3d5bbe31847cdf", "url": "https://github.com/apache/skywalking/commit/d5140463e749c46b6ebf59fb4c3d5bbe31847cdf", "message": "Parse prometheus expostion text format\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>", "committedDate": "2020-05-24T23:30:23Z", "type": "commit"}, {"oid": "0202791d1e03dba496293071d07f3fdf347f421d", "url": "https://github.com/apache/skywalking/commit/0202791d1e03dba496293071d07f3fdf347f421d", "message": "Add fetcher prototype\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>", "committedDate": "2020-05-24T23:39:51Z", "type": "commit"}, {"oid": "0202791d1e03dba496293071d07f3fdf347f421d", "url": "https://github.com/apache/skywalking/commit/0202791d1e03dba496293071d07f3fdf347f421d", "message": "Add fetcher prototype\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>", "committedDate": "2020-05-24T23:39:51Z", "type": "forcePushed"}, {"oid": "8974e7ca57fd62a06028e429215e6d9ed30e2715", "url": "https://github.com/apache/skywalking/commit/8974e7ca57fd62a06028e429215e6d9ed30e2715", "message": "Implement irate and increase functions for counter\nand Add exception handler for streaming\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>", "committedDate": "2020-05-26T03:09:03Z", "type": "commit"}, {"oid": "fa50cc7192fcef32d079a4865041bf009a271286", "url": "https://github.com/apache/skywalking/commit/fa50cc7192fcef32d079a4865041bf009a271286", "message": "Add heatmap for histogram\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>", "committedDate": "2020-05-27T09:57:07Z", "type": "commit"}, {"oid": "ef1a5fd0b79aa070b6a3d8d3bf163b401ae0010d", "url": "https://github.com/apache/skywalking/commit/ef1a5fd0b79aa070b6a3d8d3bf163b401ae0010d", "message": "Add summary\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>", "committedDate": "2020-05-28T01:12:19Z", "type": "commit"}, {"oid": "2e6976dd4957255badf8b74e3563d7082d490cdb", "url": "https://github.com/apache/skywalking/commit/2e6976dd4957255badf8b74e3563d7082d490cdb", "message": "Add avg downsampling to histogram and pencentile\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>", "committedDate": "2020-06-01T06:41:24Z", "type": "commit"}, {"oid": "15f83a0e0431fc04c5a139cf8d5d6a3b86beccbd", "url": "https://github.com/apache/skywalking/commit/15f83a0e0431fc04c5a139cf8d5d6a3b86beccbd", "message": "Add endpoint entity\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>", "committedDate": "2020-06-01T07:08:04Z", "type": "commit"}, {"oid": "51be4b99640e4f4b4fb36d87a45a8f0fe29c9571", "url": "https://github.com/apache/skywalking/commit/51be4b99640e4f4b4fb36d87a45a8f0fe29c9571", "message": "Merge branch 'master' into meter/prometheus", "committedDate": "2020-06-01T07:10:31Z", "type": "commit"}, {"oid": "969b4ca36deac3dec625f6f884087c2c79a83b78", "url": "https://github.com/apache/skywalking/commit/969b4ca36deac3dec625f6f884087c2c79a83b78", "message": "Polish codes\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>", "committedDate": "2020-06-01T07:17:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4MzgyNQ==", "url": "https://github.com/apache/skywalking/pull/4783#discussion_r433083825", "bodyText": "I want to discuss whether should we remote the PercentileMetrics and HistogramMetrics? Are they still required?\nUpdated below.", "author": "wu-sheng", "createdAt": "2020-06-01T07:32:55Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/AvgPercentileFunction.java", "diffHunk": "@@ -0,0 +1,328 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.analysis.meter.function;\n+\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.IntStream;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.Const;\n+import org.apache.skywalking.oap.server.core.UnexpectedException;\n+import org.apache.skywalking.oap.server.core.analysis.meter.MeterEntity;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.DataTable;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.IntList;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.Metrics;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.MultiIntValuesHolder;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.PercentileMetrics;\n+import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;\n+import org.apache.skywalking.oap.server.core.storage.StorageBuilder;\n+import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+\n+/**\n+ * PercentileFunction is the implementation of {@link PercentileMetrics} in the meter system. The major difference is\n+ * the PercentileFunction accepts the {@link AvgPercentileArgument} as input rather than every single request.", "originalCommit": "969b4ca36deac3dec625f6f884087c2c79a83b78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4NDIyMQ==", "url": "https://github.com/apache/skywalking/pull/4783#discussion_r433084221", "bodyText": "Ping @mrproliu WDYT?", "author": "wu-sheng", "createdAt": "2020-06-01T07:34:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4MzgyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEwMDAyNw==", "url": "https://github.com/apache/skywalking/pull/4783#discussion_r433100027", "bodyText": "I read the codes again, and this comment, including AvgHistogram, the key differences should be Calculating the avg value of all given values in the time bucket, not you are mentioned about the difference of the parameter type. The parameter type is quite similar, but the logic has a very big difference.\nPlease consider giving an example in the comment.", "author": "wu-sheng", "createdAt": "2020-06-01T08:14:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4MzgyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEwNTE2NQ==", "url": "https://github.com/apache/skywalking/pull/4783#discussion_r433105165", "bodyText": "This comment was copied from the old PercentileFunction, please fix.", "author": "wu-sheng", "createdAt": "2020-06-01T08:25:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4MzgyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMyOTk1Nw==", "url": "https://github.com/apache/skywalking/pull/4783#discussion_r433329957", "bodyText": "Updated", "author": "hanahmily", "createdAt": "2020-06-01T15:56:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4MzgyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4NDA0OQ==", "url": "https://github.com/apache/skywalking/pull/4783#discussion_r433084049", "bodyText": "We have getter, why need `protected?", "author": "wu-sheng", "createdAt": "2020-06-01T07:33:34Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/Metrics.java", "diffHunk": "@@ -40,7 +40,7 @@\n     @Getter\n     @Setter\n     @Column(columnName = TIME_BUCKET)\n-    private long timeBucket;\n+    protected long timeBucket;", "originalCommit": "969b4ca36deac3dec625f6f884087c2c79a83b78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMzMTEyNQ==", "url": "https://github.com/apache/skywalking/pull/4783#discussion_r433331125", "bodyText": "leverage getter now.", "author": "hanahmily", "createdAt": "2020-06-01T15:58:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4NDA0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4NDA4Mg==", "url": "https://github.com/apache/skywalking/pull/4783#discussion_r433084082", "bodyText": "We have getter, why need `protected?", "author": "wu-sheng", "createdAt": "2020-06-01T07:33:40Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/DoubleAvgMetrics.java", "diffHunk": "@@ -37,11 +37,11 @@\n     @Getter\n     @Setter\n     @Column(columnName = SUMMATION, storageOnly = true)\n-    private double summation;\n+    protected double summation;\n     @Getter\n     @Setter\n     @Column(columnName = COUNT, storageOnly = true)\n-    private long count;\n+    protected long count;", "originalCommit": "969b4ca36deac3dec625f6f884087c2c79a83b78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMzMDIxMg==", "url": "https://github.com/apache/skywalking/pull/4783#discussion_r433330212", "bodyText": "pick up getter now", "author": "hanahmily", "createdAt": "2020-06-01T15:56:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4NDA4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4NDQ3NA==", "url": "https://github.com/apache/skywalking/pull/4783#discussion_r433084474", "bodyText": "Please add comments", "author": "wu-sheng", "createdAt": "2020-06-01T07:34:40Z", "path": "oap-server/server-fetcher-plugin/prometheus-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/fetcher/prometheus/provider/counter/Window.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.fetcher.prometheus.provider.counter;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Maps;\n+import io.vavr.Function2;\n+import io.vavr.Tuple;\n+import io.vavr.Tuple2;\n+import java.time.Duration;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Queue;\n+import lombok.EqualsAndHashCode;\n+import lombok.RequiredArgsConstructor;\n+import lombok.ToString;\n+import org.apache.skywalking.oap.server.fetcher.prometheus.provider.operation.Source;\n+\n+@RequiredArgsConstructor\n+@ToString\n+@EqualsAndHashCode\n+public class Window {", "originalCommit": "969b4ca36deac3dec625f6f884087c2c79a83b78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMyNjIzMQ==", "url": "https://github.com/apache/skywalking/pull/4783#discussion_r433326231", "bodyText": "done", "author": "hanahmily", "createdAt": "2020-06-01T15:52:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4NDQ3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4NDcwOQ==", "url": "https://github.com/apache/skywalking/pull/4783#discussion_r433084709", "bodyText": "There is an org.apache.skywalking.oap.server.core.source.Source in the core. Do we have a better name?", "author": "wu-sheng", "createdAt": "2020-06-01T07:35:19Z", "path": "oap-server/server-fetcher-plugin/prometheus-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/fetcher/prometheus/provider/operation/Source.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.fetcher.prometheus.provider.operation;\n+\n+import com.google.common.collect.ImmutableMap;\n+import lombok.Builder;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.ToString;\n+import org.apache.skywalking.oap.server.core.analysis.meter.MeterEntity;\n+import org.apache.skywalking.oap.server.fetcher.prometheus.provider.rule.CounterFunction;\n+\n+@EqualsAndHashCode\n+@ToString\n+@Getter\n+@Builder\n+public class Source {", "originalCommit": "969b4ca36deac3dec625f6f884087c2c79a83b78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMzMDQxNw==", "url": "https://github.com/apache/skywalking/pull/4783#discussion_r433330417", "bodyText": "Naming it MetricSource", "author": "hanahmily", "createdAt": "2020-06-01T15:57:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4NDcwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA5ODg4Mw==", "url": "https://github.com/apache/skywalking/pull/4783#discussion_r433098883", "bodyText": "According to this method, you are calculating the avg value of all given values in the time bucket, including the downsampling. I think you should add very clear comments about what is different.", "author": "wu-sheng", "createdAt": "2020-06-01T08:11:08Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/AvgPercentileFunction.java", "diffHunk": "@@ -0,0 +1,328 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.analysis.meter.function;\n+\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.IntStream;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.Const;\n+import org.apache.skywalking.oap.server.core.UnexpectedException;\n+import org.apache.skywalking.oap.server.core.analysis.meter.MeterEntity;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.DataTable;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.IntList;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.Metrics;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.MultiIntValuesHolder;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.PercentileMetrics;\n+import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;\n+import org.apache.skywalking.oap.server.core.storage.StorageBuilder;\n+import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+\n+/**\n+ * PercentileFunction is the implementation of {@link PercentileMetrics} in the meter system. The major difference is\n+ * the PercentileFunction accepts the {@link AvgPercentileArgument} as input rather than every single request.\n+ */\n+@MeterFunction(functionName = \"avgPercentile\")\n+@Slf4j\n+public abstract class AvgPercentileFunction extends Metrics implements AcceptableValue<AvgPercentileFunction.AvgPercentileArgument>, MultiIntValuesHolder {\n+    public static final String DATASET = \"dataset\";\n+    public static final String RANKS = \"ranks\";\n+    public static final String VALUE = \"value\";\n+    protected static final String SUMMATION = \"summation\";\n+    protected static final String COUNT = \"count\";\n+\n+    @Setter\n+    @Getter\n+    @Column(columnName = ENTITY_ID)\n+    private String entityId;\n+    @Getter\n+    @Setter\n+    @Column(columnName = VALUE, dataType = Column.ValueDataType.LABELED_VALUE, storageOnly = true)\n+    private DataTable percentileValues = new DataTable(10);\n+    @Getter\n+    @Setter\n+    @Column(columnName = SUMMATION, storageOnly = true)\n+    protected DataTable summation = new DataTable(30);\n+    @Getter\n+    @Setter\n+    @Column(columnName = COUNT, storageOnly = true)\n+    protected DataTable count = new DataTable(30);\n+    @Getter\n+    @Setter\n+    @Column(columnName = DATASET, storageOnly = true)\n+    private DataTable dataset = new DataTable(30);\n+    /**\n+     * Rank\n+     */\n+    @Getter\n+    @Setter\n+    @Column(columnName = RANKS, storageOnly = true)\n+    private IntList ranks = new IntList(10);\n+\n+    private boolean isCalculated = false;\n+\n+    @Override\n+    public void accept(final MeterEntity entity, final AvgPercentileArgument value) {\n+        if (dataset.size() > 0) {\n+            if (!value.getBucketedValues().isCompatible(dataset)) {\n+                throw new IllegalArgumentException(\n+                    \"Incompatible BucketedValues [\" + value + \"] for current PercentileFunction[\" + dataset + \"]\");\n+            }\n+        }\n+\n+        for (final int rank : value.getRanks()) {\n+            if (rank <= 0) {\n+                throw new IllegalArgumentException(\"Illegal rank value \" + rank + \", must be positive\");\n+            }\n+        }\n+\n+        if (ranks.size() > 0) {\n+            if (ranks.size() != value.getRanks().length) {\n+                throw new IllegalArgumentException(\n+                    \"Incompatible ranks size = [\" + value.getRanks().length + \"] for current PercentileFunction[\" + ranks\n+                        .size() + \"]\");\n+            } else {\n+                for (final int rank : value.getRanks()) {\n+                    if (!ranks.include(rank)) {\n+                        throw new IllegalArgumentException(\n+                            \"Rank \" + rank + \" doesn't exist in the previous ranks \" + ranks);\n+                    }\n+                }\n+            }\n+        } else {\n+            for (final int rank : value.getRanks()) {\n+                ranks.add(rank);\n+            }\n+        }\n+\n+        this.entityId = entity.id();\n+\n+        final long[] values = value.getBucketedValues().getValues();\n+        for (int i = 0; i < values.length; i++) {\n+            String bucketName = String.valueOf(value.getBucketedValues().getBuckets()[i]);\n+            summation.valueAccumulation(bucketName, values[i]);\n+            count.valueAccumulation(bucketName, 1L);\n+        }\n+\n+        this.isCalculated = false;\n+    }\n+\n+    @Override\n+    public void combine(final Metrics metrics) {\n+        AvgPercentileFunction percentile = (AvgPercentileFunction) metrics;\n+\n+        if (!summation.keysEqual(percentile.getSummation())) {\n+            log.warn(\"Incompatible input [{}}] for current PercentileFunction[{}], entity {}\",\n+                     percentile, this, entityId\n+            );\n+            return;\n+        }\n+        if (ranks.size() > 0) {\n+            if (this.ranks.size() != ranks.size()) {\n+                log.warn(\"Incompatible ranks size = [{}}] for current PercentileFunction[{}]\",\n+                         ranks.size(), this.ranks.size()\n+                );\n+                return;\n+            } else {\n+                if (!this.ranks.equals(percentile.getRanks())) {\n+                    log.warn(\"Rank {} doesn't exist in the previous ranks {}\", percentile.getRanks(), ranks);\n+                    return;\n+                }\n+            }\n+        }\n+\n+        this.summation.append(percentile.summation);\n+        this.count.append(percentile.count);\n+\n+        this.isCalculated = false;\n+    }\n+\n+    @Override\n+    public void calculate() {", "originalCommit": "969b4ca36deac3dec625f6f884087c2c79a83b78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMyOTI0OQ==", "url": "https://github.com/apache/skywalking/pull/4783#discussion_r433329249", "bodyText": "Comment on this class.", "author": "hanahmily", "createdAt": "2020-06-01T15:55:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA5ODg4Mw=="}], "type": "inlineReview"}, {"oid": "b8eedea9be0155fd758d01a733c4ad1c4eff8ae0", "url": "https://github.com/apache/skywalking/commit/b8eedea9be0155fd758d01a733c4ad1c4eff8ae0", "message": "Polish cont'd\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>", "committedDate": "2020-06-01T15:47:02Z", "type": "commit"}, {"oid": "351ee221fb4f71944055cb21f2262e942dfe57c6", "url": "https://github.com/apache/skywalking/commit/351ee221fb4f71944055cb21f2262e942dfe57c6", "message": "Merge branch 'master' into meter/prometheus", "committedDate": "2020-06-01T15:50:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU1NDE0MA==", "url": "https://github.com/apache/skywalking/pull/4783#discussion_r433554140", "bodyText": "I think this function, including AvgPercentile, is a quite Prometheus style. Should we consider to move this into the Prometheus fetcher only? Seems more reasonable to me.", "author": "wu-sheng", "createdAt": "2020-06-02T00:15:21Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/AvgHistogramFunction.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.analysis.meter.function;\n+\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.Const;\n+import org.apache.skywalking.oap.server.core.UnexpectedException;\n+import org.apache.skywalking.oap.server.core.analysis.meter.MeterEntity;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.DataTable;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.Metrics;\n+import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;\n+import org.apache.skywalking.oap.server.core.storage.StorageBuilder;\n+import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+\n+/**\n+ * AvgHistogram intends to aggregate raw values over the interval (minute, hour or day). When users query a value\n+ * from such a interval, an average over it will be sent back.\n+ *\n+ * The acceptable bucket value should be a result from one of \"increase\", \"rate\" and \"irate\" query functions.\n+ * That means the value is the increase or per-second instant rate of increase in a specific range.\n+ *\n+ * Example:\n+ * \"persistence_timer_bulk_execute_latency\" is histogram, the possible PromQL format of acceptable bucket value should be:\n+ * \"increase(persistence_timer_bulk_execute_latency{service=\"oap-server\", instance=\"localhost:1234\"}[5m])\"", "originalCommit": "351ee221fb4f71944055cb21f2262e942dfe57c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI5NDU0NQ==", "url": "https://github.com/apache/skywalking/pull/4783#discussion_r434294545", "bodyText": "They're about how to handle the downsampling/rollup aggregation of a histogram based on the counter, which is more generic than Prometheus. except for openmetrics(which is from Prometheus), the micrometer also exports a similar histogram.\nAnd in the future, we should implements other functions more than avg, for instance, sum, count, max, min, first and last.", "author": "hanahmily", "createdAt": "2020-06-03T03:59:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU1NDE0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI5NjE1NQ==", "url": "https://github.com/apache/skywalking/pull/4783#discussion_r434296155", "bodyText": "OK, then you need to think about how to reuse codes.", "author": "wu-sheng", "createdAt": "2020-06-03T04:07:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU1NDE0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTczMjc5MQ==", "url": "https://github.com/apache/skywalking/pull/4783#discussion_r435732791", "bodyText": "may we split current functions into small pieces based on their roles.", "author": "hanahmily", "createdAt": "2020-06-05T07:16:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU1NDE0MA=="}], "type": "inlineReview"}, {"oid": "655af5b01553e3cac7e34b1886854419bc8f8a01", "url": "https://github.com/apache/skywalking/commit/655af5b01553e3cac7e34b1886854419bc8f8a01", "message": "Merge branch 'master' into meter/prometheus", "committedDate": "2020-06-05T00:24:51Z", "type": "commit"}, {"oid": "f650cbf226d9610e3a9ec81914751584318f2907", "url": "https://github.com/apache/skywalking/commit/f650cbf226d9610e3a9ec81914751584318f2907", "message": "Document prometheus fetcher and some nists\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>", "committedDate": "2020-06-05T07:13:10Z", "type": "commit"}, {"oid": "402bb152d60ee59d818c9006c0ec7a543e759df4", "url": "https://github.com/apache/skywalking/commit/402bb152d60ee59d818c9006c0ec7a543e759df4", "message": "Merge branch 'master' into meter/prometheus", "committedDate": "2020-06-05T07:13:53Z", "type": "commit"}, {"oid": "ed701c15ce02767501caf342c2ca03bfd0a2a20b", "url": "https://github.com/apache/skywalking/commit/ed701c15ce02767501caf342c2ca03bfd0a2a20b", "message": "Merge branch 'meter/prometheus' of github.com:apache/skywalking into meter/prometheus", "committedDate": "2020-06-05T07:14:20Z", "type": "commit"}, {"oid": "6af1bc3a995bf1e4abe31028efda6370778dccd7", "url": "https://github.com/apache/skywalking/commit/6af1bc3a995bf1e4abe31028efda6370778dccd7", "message": "Merge branch 'master' into meter/prometheus", "committedDate": "2020-06-05T14:23:33Z", "type": "commit"}, {"oid": "f5c460dc1c6d801fb8afaae957b798050b0aa391", "url": "https://github.com/apache/skywalking/commit/f5c460dc1c6d801fb8afaae957b798050b0aa391", "message": "Remove redundant notices.\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>", "committedDate": "2020-06-05T14:24:11Z", "type": "commit"}, {"oid": "ca3473ec7c42425e91dc9a749b2ab6f7859d53b2", "url": "https://github.com/apache/skywalking/commit/ca3473ec7c42425e91dc9a749b2ab6f7859d53b2", "message": "Merge branch 'master' into meter/prometheus", "committedDate": "2020-06-07T08:55:02Z", "type": "commit"}, {"oid": "d82b588bf6742b72866eb52661aafde1ef0688a8", "url": "https://github.com/apache/skywalking/commit/d82b588bf6742b72866eb52661aafde1ef0688a8", "message": "Cleanup codes\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>", "committedDate": "2020-06-07T09:01:11Z", "type": "commit"}, {"oid": "5c2ee51b05bc236d518439132a379c377c8c8961", "url": "https://github.com/apache/skywalking/commit/5c2ee51b05bc236d518439132a379c377c8c8961", "message": "Fixed oap can't list rule files\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>", "committedDate": "2020-06-07T16:27:16Z", "type": "commit"}, {"oid": "715d171ed543abdb69f7e8cea8c17d206bad1c67", "url": "https://github.com/apache/skywalking/commit/715d171ed543abdb69f7e8cea8c17d206bad1c67", "message": "Merge branch 'master' into meter/prometheus", "committedDate": "2020-06-07T16:47:31Z", "type": "commit"}]}