{"pr_number": 4843, "pr_title": "Support UI template management.", "pr_createdAt": "2020-05-29T16:01:39Z", "pr_url": "https://github.com/apache/skywalking/pull/4843", "timeline": [{"oid": "bced16d8d86cdab02864a43d6d18f960d1770fdf", "url": "https://github.com/apache/skywalking/commit/bced16d8d86cdab02864a43d6d18f960d1770fdf", "message": "Implement the ui management GraphQL. And implement storage for H2 and MySQL", "committedDate": "2020-05-29T09:59:33Z", "type": "commit"}, {"oid": "c8ba05fe816e57697a927a6d191f3f92c8b25f30", "url": "https://github.com/apache/skywalking/commit/c8ba05fe816e57697a927a6d191f3f92c8b25f30", "message": "Finish UI template management ES/ES7 DAOs", "committedDate": "2020-05-29T15:28:58Z", "type": "commit"}, {"oid": "85f2cbf97a0f42448551706357844c80d427ff4e", "url": "https://github.com/apache/skywalking/commit/85f2cbf97a0f42448551706357844c80d427ff4e", "message": "Add an empty InfluxDB implementation shell.", "committedDate": "2020-05-29T15:57:05Z", "type": "commit"}, {"oid": "db01079c1c0d00b4574fb36b26978ccf82178207", "url": "https://github.com/apache/skywalking/commit/db01079c1c0d00b4574fb36b26978ccf82178207", "message": "Support UI templates auto initialized through the `ui-initialized-templates.yml` YAML file.", "committedDate": "2020-05-30T12:13:55Z", "type": "commit"}, {"oid": "b47be875f6e46e3047b6f9960693a878fdb183d0", "url": "https://github.com/apache/skywalking/commit/b47be875f6e46e3047b6f9960693a878fdb183d0", "message": "Merge branch 'master' into ui-template", "committedDate": "2020-05-30T12:14:20Z", "type": "commit"}, {"oid": "79a7a0dba015315530ce857b84640e8ca971d588", "url": "https://github.com/apache/skywalking/commit/79a7a0dba015315530ce857b84640e8ca971d588", "message": "Fix the style.", "committedDate": "2020-05-30T12:35:54Z", "type": "commit"}, {"oid": "6e537f64b3d49672d596667d9ddbf930ba9e51b4", "url": "https://github.com/apache/skywalking/commit/6e537f64b3d49672d596667d9ddbf930ba9e51b4", "message": "influx storage implemention", "committedDate": "2020-05-30T16:33:48Z", "type": "commit"}, {"oid": "5397452f4501d8d4636dc75a9cc077db5224cd8a", "url": "https://github.com/apache/skywalking/commit/5397452f4501d8d4636dc75a9cc077db5224cd8a", "message": "Merge branch 'master' into ui-template", "committedDate": "2020-05-31T04:17:26Z", "type": "commit"}, {"oid": "bcc58099b5d49825d070e16308c3227e698b1c99", "url": "https://github.com/apache/skywalking/commit/bcc58099b5d49825d070e16308c3227e698b1c99", "message": "Merge branch 'master' into ui-template", "committedDate": "2020-05-31T08:10:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNDYxOQ==", "url": "https://github.com/apache/skywalking/pull/4843#discussion_r432924619", "bodyText": "Is it a typo? If it \"should be activated by default\", why the default value is false", "author": "kezhenxu94", "createdAt": "2020-05-31T08:48:16Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/management/ui/template/UITemplateInitializer.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.management.ui.template;\n+\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import org.apache.skywalking.apm.util.StringUtil;\n+import org.apache.skywalking.oap.server.core.query.enumeration.TemplateType;\n+import org.apache.skywalking.oap.server.library.util.BooleanUtils;\n+import org.yaml.snakeyaml.Yaml;\n+\n+/**\n+ * UITemplateInitializer load the template from the config file in YAML format. The template definition is by JSON format in default,\n+ * but it depends on the UI implementation only.\n+ */\n+public class UITemplateInitializer {\n+    private Map yamlData;\n+\n+    public UITemplateInitializer(InputStream inputStream) {\n+        Yaml yaml = new Yaml();\n+        yamlData = yaml.loadAs(inputStream, Map.class);\n+    }\n+\n+    public UITemplateInitializer(Reader io) {\n+        Yaml yaml = new Yaml();\n+        yamlData = yaml.loadAs(io, Map.class);\n+    }\n+\n+    public List<UITemplate> read() {\n+        List<UITemplate> uiTemplates = new ArrayList<>();\n+        if (Objects.nonNull(yamlData)) {\n+            List templates = (List) yamlData.get(\"templates\");\n+            if (templates != null) {\n+                templates.forEach(templateObj -> {\n+                    final Map template = (Map) templateObj;\n+                    UITemplate newTemplate = new UITemplate();\n+                    final String name = (String) template.get(\"name\");\n+                    if (StringUtil.isEmpty(name)) {\n+                        throw new IllegalArgumentException(\"template name shouldn't be null\");\n+                    }\n+                    newTemplate.setName(name);\n+                    final String type = (String) template.getOrDefault(\"type\", TemplateType.DASHBOARD.name());\n+                    TemplateType.forName(type); // for checking.\n+                    newTemplate.setType(type);\n+                    final String configuration = (String) template.get(\"configuration\");\n+                    if (StringUtil.isEmpty(name)) {\n+                        throw new IllegalArgumentException(\"template configuration shouldn't be null\");\n+                    }\n+                    newTemplate.setConfiguration(configuration);\n+                    newTemplate.setActivated(\n+                            BooleanUtils.booleanToValue(\n+                                    // The template should be activated in default, it is just an option.\n+                                    (Boolean) template.getOrDefault(\"activated\", false)", "originalCommit": "bcc58099b5d49825d070e16308c3227e698b1c99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyODA3Ng==", "url": "https://github.com/apache/skywalking/pull/4843#discussion_r432928076", "bodyText": "No, it isn't. Based on the comments\nActivated as the DASHBOARD type, makes this template added into the UI page automatically.\nFalse means providing a basic template, user needs to add it manually.", "author": "wu-sheng", "createdAt": "2020-05-31T09:34:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNDYxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNDc0MA==", "url": "https://github.com/apache/skywalking/pull/4843#discussion_r432924740", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                if (StringUtil.isEmpty(name)) {\n          \n          \n            \n                                if (StringUtil.isEmpty(configuration)) {\n          \n      \n    \n    \n  \n\nand better to check that configuration is a valid JSON string", "author": "kezhenxu94", "createdAt": "2020-05-31T08:50:02Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/management/ui/template/UITemplateInitializer.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.management.ui.template;\n+\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import org.apache.skywalking.apm.util.StringUtil;\n+import org.apache.skywalking.oap.server.core.query.enumeration.TemplateType;\n+import org.apache.skywalking.oap.server.library.util.BooleanUtils;\n+import org.yaml.snakeyaml.Yaml;\n+\n+/**\n+ * UITemplateInitializer load the template from the config file in YAML format. The template definition is by JSON format in default,\n+ * but it depends on the UI implementation only.\n+ */\n+public class UITemplateInitializer {\n+    private Map yamlData;\n+\n+    public UITemplateInitializer(InputStream inputStream) {\n+        Yaml yaml = new Yaml();\n+        yamlData = yaml.loadAs(inputStream, Map.class);\n+    }\n+\n+    public UITemplateInitializer(Reader io) {\n+        Yaml yaml = new Yaml();\n+        yamlData = yaml.loadAs(io, Map.class);\n+    }\n+\n+    public List<UITemplate> read() {\n+        List<UITemplate> uiTemplates = new ArrayList<>();\n+        if (Objects.nonNull(yamlData)) {\n+            List templates = (List) yamlData.get(\"templates\");\n+            if (templates != null) {\n+                templates.forEach(templateObj -> {\n+                    final Map template = (Map) templateObj;\n+                    UITemplate newTemplate = new UITemplate();\n+                    final String name = (String) template.get(\"name\");\n+                    if (StringUtil.isEmpty(name)) {\n+                        throw new IllegalArgumentException(\"template name shouldn't be null\");\n+                    }\n+                    newTemplate.setName(name);\n+                    final String type = (String) template.getOrDefault(\"type\", TemplateType.DASHBOARD.name());\n+                    TemplateType.forName(type); // for checking.\n+                    newTemplate.setType(type);\n+                    final String configuration = (String) template.get(\"configuration\");\n+                    if (StringUtil.isEmpty(name)) {", "originalCommit": "bcc58099b5d49825d070e16308c3227e698b1c99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyODkwMw==", "url": "https://github.com/apache/skywalking/pull/4843#discussion_r432928903", "bodyText": "@wu-sheng this should be fixed too, it's a copy-paste mistake", "author": "kezhenxu94", "createdAt": "2020-05-31T09:44:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNDc0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNDg4Mg==", "url": "https://github.com/apache/skywalking/pull/4843#discussion_r432924882", "bodyText": "just curious why the name is disable instead of disabled, if the export/import features are done, does it work then? the query returns disabled, here you're expecting disable", "author": "kezhenxu94", "createdAt": "2020-05-31T08:52:06Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/management/ui/template/UITemplateInitializer.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.management.ui.template;\n+\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import org.apache.skywalking.apm.util.StringUtil;\n+import org.apache.skywalking.oap.server.core.query.enumeration.TemplateType;\n+import org.apache.skywalking.oap.server.library.util.BooleanUtils;\n+import org.yaml.snakeyaml.Yaml;\n+\n+/**\n+ * UITemplateInitializer load the template from the config file in YAML format. The template definition is by JSON format in default,\n+ * but it depends on the UI implementation only.\n+ */\n+public class UITemplateInitializer {\n+    private Map yamlData;\n+\n+    public UITemplateInitializer(InputStream inputStream) {\n+        Yaml yaml = new Yaml();\n+        yamlData = yaml.loadAs(inputStream, Map.class);\n+    }\n+\n+    public UITemplateInitializer(Reader io) {\n+        Yaml yaml = new Yaml();\n+        yamlData = yaml.loadAs(io, Map.class);\n+    }\n+\n+    public List<UITemplate> read() {\n+        List<UITemplate> uiTemplates = new ArrayList<>();\n+        if (Objects.nonNull(yamlData)) {\n+            List templates = (List) yamlData.get(\"templates\");\n+            if (templates != null) {\n+                templates.forEach(templateObj -> {\n+                    final Map template = (Map) templateObj;\n+                    UITemplate newTemplate = new UITemplate();\n+                    final String name = (String) template.get(\"name\");\n+                    if (StringUtil.isEmpty(name)) {\n+                        throw new IllegalArgumentException(\"template name shouldn't be null\");\n+                    }\n+                    newTemplate.setName(name);\n+                    final String type = (String) template.getOrDefault(\"type\", TemplateType.DASHBOARD.name());\n+                    TemplateType.forName(type); // for checking.\n+                    newTemplate.setType(type);\n+                    final String configuration = (String) template.get(\"configuration\");\n+                    if (StringUtil.isEmpty(name)) {\n+                        throw new IllegalArgumentException(\"template configuration shouldn't be null\");\n+                    }\n+                    newTemplate.setConfiguration(configuration);\n+                    newTemplate.setActivated(\n+                            BooleanUtils.booleanToValue(\n+                                    // The template should be activated in default, it is just an option.\n+                                    (Boolean) template.getOrDefault(\"activated\", false)\n+                            )\n+                    );\n+                    newTemplate.setDisabled(\n+                            BooleanUtils.booleanToValue(\n+                                    // The template should be available in default.\n+                                    (Boolean) template.getOrDefault(\"disable\", false)", "originalCommit": "bcc58099b5d49825d070e16308c3227e698b1c99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyODIzNg==", "url": "https://github.com/apache/skywalking/pull/4843#discussion_r432928236", "bodyText": "I changed it to disabled.", "author": "wu-sheng", "createdAt": "2020-05-31T09:36:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNDg4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyODI2OQ==", "url": "https://github.com/apache/skywalking/pull/4843#discussion_r432928269", "bodyText": "I changed it to disabled.", "author": "wu-sheng", "createdAt": "2020-05-31T09:36:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNDg4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNTQ3NA==", "url": "https://github.com/apache/skywalking/pull/4843#discussion_r432925474", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .where(eq(\"id\", managementData.id()));\n          \n          \n            \n                            .where(eq(ID_COLUMN, managementData.id()));", "author": "kezhenxu94", "createdAt": "2020-05-31T08:59:13Z", "path": "oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/base/ManagementDAO.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.storage.plugin.influxdb.base;\n+\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.analysis.management.ManagementData;\n+import org.apache.skywalking.oap.server.core.analysis.manual.service.ServiceTraffic;\n+import org.apache.skywalking.oap.server.core.storage.IManagementDAO;\n+import org.apache.skywalking.oap.server.core.storage.StorageBuilder;\n+import org.apache.skywalking.oap.server.core.storage.model.Model;\n+import org.apache.skywalking.oap.server.storage.plugin.influxdb.InfluxClient;\n+import org.apache.skywalking.oap.server.storage.plugin.influxdb.TableMetaInfo;\n+import org.influxdb.dto.QueryResult;\n+import org.influxdb.querybuilder.SelectQueryImpl;\n+import org.influxdb.querybuilder.WhereQueryImpl;\n+\n+import static org.apache.skywalking.oap.server.storage.plugin.influxdb.InfluxConstants.ID_COLUMN;\n+import static org.apache.skywalking.oap.server.storage.plugin.influxdb.InfluxConstants.NAME;\n+import static org.influxdb.querybuilder.BuiltQuery.QueryBuilder.eq;\n+import static org.influxdb.querybuilder.BuiltQuery.QueryBuilder.select;\n+\n+@Slf4j\n+public class ManagementDAO implements IManagementDAO {\n+    private static final long STATIC_TIMESTAMP = 1_000_000;\n+\n+    private InfluxClient client;\n+    private StorageBuilder<ManagementData> storageBuilder;\n+\n+    public ManagementDAO(InfluxClient client, StorageBuilder<ManagementData> storageBuilder) {\n+        this.client = client;\n+        this.storageBuilder = storageBuilder;\n+    }\n+\n+    @Override\n+    public void insert(final Model model, final ManagementData managementData) throws IOException {\n+        final WhereQueryImpl<SelectQueryImpl> query = select()\n+                .column(ID_COLUMN).column(NAME)\n+                .from(ServiceTraffic.INDEX_NAME)\n+                .where(eq(\"id\", managementData.id()));", "originalCommit": "bcc58099b5d49825d070e16308c3227e698b1c99", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNTY4MQ==", "url": "https://github.com/apache/skywalking/pull/4843#discussion_r432925681", "bodyText": "The || operation on series != null and series.getValues().size() == 0 is somewhat confusing, is it a mistake?", "author": "kezhenxu94", "createdAt": "2020-05-31T09:01:54Z", "path": "oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/base/ManagementDAO.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.storage.plugin.influxdb.base;\n+\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.analysis.management.ManagementData;\n+import org.apache.skywalking.oap.server.core.analysis.manual.service.ServiceTraffic;\n+import org.apache.skywalking.oap.server.core.storage.IManagementDAO;\n+import org.apache.skywalking.oap.server.core.storage.StorageBuilder;\n+import org.apache.skywalking.oap.server.core.storage.model.Model;\n+import org.apache.skywalking.oap.server.storage.plugin.influxdb.InfluxClient;\n+import org.apache.skywalking.oap.server.storage.plugin.influxdb.TableMetaInfo;\n+import org.influxdb.dto.QueryResult;\n+import org.influxdb.querybuilder.SelectQueryImpl;\n+import org.influxdb.querybuilder.WhereQueryImpl;\n+\n+import static org.apache.skywalking.oap.server.storage.plugin.influxdb.InfluxConstants.ID_COLUMN;\n+import static org.apache.skywalking.oap.server.storage.plugin.influxdb.InfluxConstants.NAME;\n+import static org.influxdb.querybuilder.BuiltQuery.QueryBuilder.eq;\n+import static org.influxdb.querybuilder.BuiltQuery.QueryBuilder.select;\n+\n+@Slf4j\n+public class ManagementDAO implements IManagementDAO {\n+    private static final long STATIC_TIMESTAMP = 1_000_000;\n+\n+    private InfluxClient client;\n+    private StorageBuilder<ManagementData> storageBuilder;\n+\n+    public ManagementDAO(InfluxClient client, StorageBuilder<ManagementData> storageBuilder) {\n+        this.client = client;\n+        this.storageBuilder = storageBuilder;\n+    }\n+\n+    @Override\n+    public void insert(final Model model, final ManagementData managementData) throws IOException {\n+        final WhereQueryImpl<SelectQueryImpl> query = select()\n+                .column(ID_COLUMN).column(NAME)\n+                .from(ServiceTraffic.INDEX_NAME)\n+                .where(eq(\"id\", managementData.id()));\n+        QueryResult.Series series = client.queryForSingleSeries(query);\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"SQL: {} result: {}\", query.getCommand(), series);\n+        }\n+        if (series != null || series.getValues().size() == 0) {", "originalCommit": "bcc58099b5d49825d070e16308c3227e698b1c99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyODQyNw==", "url": "https://github.com/apache/skywalking/pull/4843#discussion_r432928427", "bodyText": "@dmsolr I changed this to if (series == null || series.getValues().size() == 0) {, please confirm.", "author": "wu-sheng", "createdAt": "2020-05-31T09:39:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNTY4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyODgxNg==", "url": "https://github.com/apache/skywalking/pull/4843#discussion_r432928816", "bodyText": "@dmsolr I changed this to if (series == null || series.getValues().size() == 0) {, please confirm.\n\nI am afraid that it should be if (series != null && series.getValues().size() > 0), this is to check whether the management data already exists", "author": "kezhenxu94", "createdAt": "2020-05-31T09:43:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNTY4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkzNDYwMA==", "url": "https://github.com/apache/skywalking/pull/4843#discussion_r432934600", "bodyText": "Done though cellphone. Hope I have luck.", "author": "wu-sheng", "createdAt": "2020-05-31T10:56:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNTY4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNjcyNw==", "url": "https://github.com/apache/skywalking/pull/4843#discussion_r432926727", "bodyText": "Just to name a few, these code styles are obviously not what we set in the codeStyle.xml, I believe one of you may loss the code style settings in the IDE", "author": "kezhenxu94", "createdAt": "2020-05-31T09:15:56Z", "path": "oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLTableInstaller.java", "diffHunk": "@@ -74,22 +74,22 @@ protected void createTableIndexes(JDBCHikariCPClient client,\n             if (!modelColumn.isStorageOnly()) {\n                 SQLBuilder tableIndexSQL = new SQLBuilder(\"CREATE INDEX \");\n                 tableIndexSQL.append(model.getName().toUpperCase())\n-                             .append(\"_\")\n-                             .append(String.valueOf(indexSeq++))\n-                             .append(\"_IDX \");\n+                        .append(\"_\")\n+                        .append(String.valueOf(indexSeq++))\n+                        .append(\"_IDX \");\n                 tableIndexSQL.append(\"ON \").append(model.getName()).append(\"(\")\n-                             .append(modelColumn.getColumnName().getStorageName())\n-                             .append(\")\");\n+                        .append(modelColumn.getColumnName().getStorageName())\n+                        .append(\")\");", "originalCommit": "bcc58099b5d49825d070e16308c3227e698b1c99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyODM4Mg==", "url": "https://github.com/apache/skywalking/pull/4843#discussion_r432928382", "bodyText": "I don't know why, but the CI doesn't report in both ways.", "author": "wu-sheng", "createdAt": "2020-05-31T09:38:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNjcyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyOTM1Mw==", "url": "https://github.com/apache/skywalking/pull/4843#discussion_r432929353", "bodyText": "I don't know why, but the CI doesn't report in both ways.\n\nCI never reports this kind of styles, we have many existed codes that don't follow the styles yet, just wanted to remind that the settings may be lost in your local machine,", "author": "kezhenxu94", "createdAt": "2020-05-31T09:50:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNjcyNw=="}], "type": "inlineReview"}, {"oid": "feb4ccdaa47cc7f51e117738e611295ace99d826", "url": "https://github.com/apache/skywalking/commit/feb4ccdaa47cc7f51e117738e611295ace99d826", "message": "Update oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/base/ManagementDAO.java\n\nCo-authored-by: kezhenxu94 <kezhenxu94@apache.org>", "committedDate": "2020-05-31T09:36:17Z", "type": "commit"}, {"oid": "e2efd9f6c26e6a92e8af15616d2051818ee62ae0", "url": "https://github.com/apache/skywalking/commit/e2efd9f6c26e6a92e8af15616d2051818ee62ae0", "message": "Follow reviews.", "committedDate": "2020-05-31T09:38:38Z", "type": "commit"}, {"oid": "1a5c59633f7bcbe630d2f0c845db0d58db6791c8", "url": "https://github.com/apache/skywalking/commit/1a5c59633f7bcbe630d2f0c845db0d58db6791c8", "message": "Update ManagementDAO.java", "committedDate": "2020-05-31T10:55:54Z", "type": "commit"}, {"oid": "2bf66298b5029478c83bd65cffb776c78c6efe66", "url": "https://github.com/apache/skywalking/commit/2bf66298b5029478c83bd65cffb776c78c6efe66", "message": "e2e", "committedDate": "2020-05-31T12:09:38Z", "type": "commit"}, {"oid": "11a674fac50b76c8bd2533b5a8ca6df75ceee58f", "url": "https://github.com/apache/skywalking/commit/11a674fac50b76c8bd2533b5a8ca6df75ceee58f", "message": "add ui-template e2e", "committedDate": "2020-05-31T12:37:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk0MzYzNw==", "url": "https://github.com/apache/skywalking/pull/4843#discussion_r432943637", "bodyText": "I think we should verify through the queryAll. Status could be fake :)", "author": "wu-sheng", "createdAt": "2020-05-31T12:47:36Z", "path": "test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/storage/StorageE2E.java", "diffHunk": "@@ -156,6 +165,47 @@ void serviceInstanceTopo() throws Exception {\n         verifyServiceInstanceRelationMetrics(topology.getCalls());\n     }\n \n+    @RetryableTest\n+    void addUITemplate() throws Exception {\n+        TemplateChangeStatus templateChangeStatus = graphql.addTemplate(\n+            new DashboardSetting()\n+                .name(\"test-ui-config-1\")\n+                .active(true)\n+                .configuration(\"{}\")\n+                .type(TemplateType.DASHBOARD)\n+        );\n+        LOGGER.info(\"{}\", templateChangeStatus);\n+        Assertions.assertTrue(templateChangeStatus.isStatus());", "originalCommit": "11a674fac50b76c8bd2533b5a8ca6df75ceee58f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk0ODA5Mg==", "url": "https://github.com/apache/skywalking/pull/4843#discussion_r432948092", "bodyText": "The field is better named successful (or something similar) IMO, based on its type boolean", "author": "kezhenxu94", "createdAt": "2020-05-31T13:38:31Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/TemplateChangeStatus.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.query.type;\n+\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+@Setter\n+@Getter\n+@Builder\n+public class TemplateChangeStatus {\n+    private boolean status;", "originalCommit": "11a674fac50b76c8bd2533b5a8ca6df75ceee58f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk0ODIyMg==", "url": "https://github.com/apache/skywalking/pull/4843#discussion_r432948222", "bodyText": "I think he follows the GraphQL name.", "author": "wu-sheng", "createdAt": "2020-05-31T13:39:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk0ODA5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk1MDMzMg==", "url": "https://github.com/apache/skywalking/pull/4843#discussion_r432950332", "bodyText": "I think he follows the GraphQL name.\n\nI mean the name in core module, not e2e test codes", "author": "kezhenxu94", "createdAt": "2020-05-31T14:01:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk0ODA5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk1MDkxMA==", "url": "https://github.com/apache/skywalking/pull/4843#discussion_r432950910", "bodyText": "That needs to change in the GraphQL level. But to be honest, the status = true/false is very common in the skywalking as an expression. Check all sources, such as org.apache.skywalking.oap.server.core.source.Service#status.", "author": "wu-sheng", "createdAt": "2020-05-31T14:07:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk0ODA5Mg=="}], "type": "inlineReview"}, {"oid": "285286351b5af3659df2ea722149620547d2da34", "url": "https://github.com/apache/skywalking/commit/285286351b5af3659df2ea722149620547d2da34", "message": "update", "committedDate": "2020-05-31T13:42:21Z", "type": "commit"}, {"oid": "b592a6527b7aaf2d65a01fb30c454144c4ae65cf", "url": "https://github.com/apache/skywalking/commit/b592a6527b7aaf2d65a01fb30c454144c4ae65cf", "message": "Update oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/management/ui/template/UITemplateInitializer.java\n\nCo-authored-by: kezhenxu94 <kezhenxu94@apache.org>", "committedDate": "2020-05-31T14:05:21Z", "type": "commit"}, {"oid": "be873dad82792436b1368cb42bca465abfca694f", "url": "https://github.com/apache/skywalking/commit/be873dad82792436b1368cb42bca465abfca694f", "message": "update", "committedDate": "2020-05-31T14:15:00Z", "type": "commit"}, {"oid": "a2879a2c5f386fbf296e27148b1b5fcea3da061f", "url": "https://github.com/apache/skywalking/commit/a2879a2c5f386fbf296e27148b1b5fcea3da061f", "message": "update", "committedDate": "2020-05-31T14:36:51Z", "type": "commit"}, {"oid": "d4f0a1bda830517c68cbf9e0c12764d41e40342d", "url": "https://github.com/apache/skywalking/commit/d4f0a1bda830517c68cbf9e0c12764d41e40342d", "message": "use name as ID", "committedDate": "2020-05-31T14:50:34Z", "type": "commit"}, {"oid": "3b489627637b3f11bdf5406a9ac2567b83a1b3b2", "url": "https://github.com/apache/skywalking/commit/3b489627637b3f11bdf5406a9ac2567b83a1b3b2", "message": "revert", "committedDate": "2020-05-31T14:58:54Z", "type": "commit"}, {"oid": "a3d4e62c5b99e3e2dc0089cf2eaab863c62b85ff", "url": "https://github.com/apache/skywalking/commit/a3d4e62c5b99e3e2dc0089cf2eaab863c62b85ff", "message": "update", "committedDate": "2020-05-31T15:47:49Z", "type": "commit"}, {"oid": "41e5c53168055f918ca69cfc6f642b0a13725122", "url": "https://github.com/apache/skywalking/commit/41e5c53168055f918ca69cfc6f642b0a13725122", "message": "update", "committedDate": "2020-05-31T15:50:19Z", "type": "commit"}, {"oid": "569dbd672f948fd6d399fd0d168ec5876d3cd388", "url": "https://github.com/apache/skywalking/commit/569dbd672f948fd6d399fd0d168ec5876d3cd388", "message": "update", "committedDate": "2020-05-31T16:15:36Z", "type": "commit"}, {"oid": "b5a3f22eec5878c8a07d09158218cb3256abcc0b", "url": "https://github.com/apache/skywalking/commit/b5a3f22eec5878c8a07d09158218cb3256abcc0b", "message": "fix e2e", "committedDate": "2020-05-31T16:36:24Z", "type": "commit"}, {"oid": "9c27aaeccb997ec7f2c8c23d7c6e44b4ea3621e3", "url": "https://github.com/apache/skywalking/commit/9c27aaeccb997ec7f2c8c23d7c6e44b4ea3621e3", "message": "update", "committedDate": "2020-05-31T20:17:28Z", "type": "commit"}, {"oid": "336b9ecac4fd6c09ae89f33cc36a11cc786e8708", "url": "https://github.com/apache/skywalking/commit/336b9ecac4fd6c09ae89f33cc36a11cc786e8708", "message": "update", "committedDate": "2020-06-01T02:19:53Z", "type": "commit"}, {"oid": "e8047326ed54e8e1a5d8b02513a31bba43440731", "url": "https://github.com/apache/skywalking/commit/e8047326ed54e8e1a5d8b02513a31bba43440731", "message": "??", "committedDate": "2020-06-01T02:45:12Z", "type": "commit"}, {"oid": "4cefbfc0eacd2ff8e73c0c6894736247223a1a46", "url": "https://github.com/apache/skywalking/commit/4cefbfc0eacd2ff8e73c0c6894736247223a1a46", "message": "fix", "committedDate": "2020-06-01T03:06:17Z", "type": "commit"}, {"oid": "99f09a836838fd07d4a301b8cd2d3903313f4657", "url": "https://github.com/apache/skywalking/commit/99f09a836838fd07d4a301b8cd2d3903313f4657", "message": "update", "committedDate": "2020-06-01T03:16:16Z", "type": "commit"}, {"oid": "22c52e8b83a6f9c82d309bc2df1811e0f3c2f4c0", "url": "https://github.com/apache/skywalking/commit/22c52e8b83a6f9c82d309bc2df1811e0f3c2f4c0", "message": "update", "committedDate": "2020-06-01T03:27:33Z", "type": "commit"}, {"oid": "5363350978cab50d6cd86ae037b6f7daa29d3171", "url": "https://github.com/apache/skywalking/commit/5363350978cab50d6cd86ae037b6f7daa29d3171", "message": "store", "committedDate": "2020-06-01T03:38:48Z", "type": "commit"}, {"oid": "6a53b862bbec1607c4dae739dd9aac46073cfbbe", "url": "https://github.com/apache/skywalking/commit/6a53b862bbec1607c4dae739dd9aac46073cfbbe", "message": "fix e2e", "committedDate": "2020-06-01T03:43:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA0MzIwMg==", "url": "https://github.com/apache/skywalking/pull/4843#discussion_r433043202", "bodyText": "The template-related operations should not be retryable, it should be successful or failed at one time.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @RetryableTest\n          \n          \n            \n                void addUITemplate() throws Exception {\n          \n          \n            \n                @Test\n          \n          \n            \n                void addUITemplate() throws Exception {", "author": "kezhenxu94", "createdAt": "2020-06-01T05:07:49Z", "path": "test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/storage/StorageE2E.java", "diffHunk": "@@ -156,6 +167,54 @@ void serviceInstanceTopo() throws Exception {\n         verifyServiceInstanceRelationMetrics(topology.getCalls());\n     }\n \n+    @RetryableTest\n+    void addUITemplate() throws Exception {", "originalCommit": "6a53b862bbec1607c4dae739dd9aac46073cfbbe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "07e36744f160b614fe677eb79d30111b91b557b0", "url": "https://github.com/apache/skywalking/commit/07e36744f160b614fe677eb79d30111b91b557b0", "message": "Update test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/storage/StorageE2E.java\n\nCo-authored-by: kezhenxu94 <kezhenxu94@apache.org>", "committedDate": "2020-06-01T05:09:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA0MzkyOQ==", "url": "https://github.com/apache/skywalking/pull/4843#discussion_r433043929", "bodyText": "Seems this case depends on addUITemplate, it's a bad idea that one test case depends on another, please add an individual template in this case for testing modification (changeTemplate), BTW, I'm wondering whether updateTemplate in the backend query plugin is better or not, update is more widely used in the CRUD operations @wu-sheng change is somewhat Chinglish", "author": "kezhenxu94", "createdAt": "2020-06-01T05:11:15Z", "path": "test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/storage/StorageE2E.java", "diffHunk": "@@ -156,6 +167,54 @@ void serviceInstanceTopo() throws Exception {\n         verifyServiceInstanceRelationMetrics(topology.getCalls());\n     }\n \n+    @RetryableTest\n+    void addUITemplate() throws Exception {\n+        try {\n+            TemplateChangeStatus templateChangeStatus = graphql.addTemplate(\n+                new DashboardSetting()\n+                    .name(\"test-ui-config-1\")\n+                    .active(true)\n+                    .configuration(\"{}\")\n+                    .type(TemplateType.DASHBOARD)\n+            );\n+            LOGGER.info(\"add template = {}\", templateChangeStatus);\n+        } catch (Exception e) {\n+            LOGGER.error(\"add ui template error.\", e);\n+        }\n+        verifyTemplates(\"expected/storage/dashboardConfiguration.yml\");\n+    }\n+\n+    @RetryableTest\n+    void changeTemplate() throws Exception {", "originalCommit": "6a53b862bbec1607c4dae739dd9aac46073cfbbe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA0NTc4NA==", "url": "https://github.com/apache/skywalking/pull/4843#discussion_r433045784", "bodyText": "I don't want to discuss about the language culture thing, as these two words are not that different. You could argue about add, insert or create too. As creating is a part of CRUD.\nThe point is, unless we want to set up term rules in order to keep all names consistent in the project, don't know how to say which one is better.", "author": "wu-sheng", "createdAt": "2020-06-01T05:20:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA0MzkyOQ=="}], "type": "inlineReview"}, {"oid": "79c14a168390c0bb47d6cfddc196d83eaace7c6a", "url": "https://github.com/apache/skywalking/commit/79c14a168390c0bb47d6cfddc196d83eaace7c6a", "message": "Fix E2E test", "committedDate": "2020-06-01T05:26:29Z", "type": "commit"}, {"oid": "76057c0778496ca5804a4667cfd3a7de84e6c68d", "url": "https://github.com/apache/skywalking/commit/76057c0778496ca5804a4667cfd3a7de84e6c68d", "message": "fix e2e test", "committedDate": "2020-06-01T05:42:23Z", "type": "commit"}, {"oid": "ebd84f9b086059d6b9ebe891097d3819112a4fb3", "url": "https://github.com/apache/skywalking/commit/ebd84f9b086059d6b9ebe891097d3819112a4fb3", "message": "fix checkstyle & remove fluent", "committedDate": "2020-06-01T05:58:18Z", "type": "commit"}, {"oid": "2b02e766f35664b1f87cc697b18719508bd7b0ac", "url": "https://github.com/apache/skywalking/commit/2b02e766f35664b1f87cc697b18719508bd7b0ac", "message": "fix e2e test", "committedDate": "2020-06-01T07:27:53Z", "type": "commit"}, {"oid": "f66fad0b0aa6c987c93d9715d0f1e9b35afbf1b9", "url": "https://github.com/apache/skywalking/commit/f66fad0b0aa6c987c93d9715d0f1e9b35afbf1b9", "message": "keep execution order", "committedDate": "2020-06-01T08:26:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyOTgwNw==", "url": "https://github.com/apache/skywalking/pull/4843#discussion_r433129807", "bodyText": "getProfileTaskDAO  this is another copy-and-paste mistake @wu-sheng", "author": "kezhenxu94", "createdAt": "2020-06-01T09:21:43Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/management/ui/template/UITemplateManagementService.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.management.ui.template;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import lombok.RequiredArgsConstructor;\n+import org.apache.skywalking.oap.server.core.query.input.DashboardSetting;\n+import org.apache.skywalking.oap.server.core.query.type.DashboardConfiguration;\n+import org.apache.skywalking.oap.server.core.query.type.TemplateChangeStatus;\n+import org.apache.skywalking.oap.server.core.storage.StorageModule;\n+import org.apache.skywalking.oap.server.core.storage.management.UITemplateManagementDAO;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+import org.apache.skywalking.oap.server.library.module.Service;\n+\n+@RequiredArgsConstructor\n+public class UITemplateManagementService implements Service {\n+    private final ModuleManager moduleManager;\n+    private UITemplateManagementDAO uiTemplateManagementDAO;\n+\n+    private UITemplateManagementDAO getProfileTaskDAO() {", "originalCommit": "f66fad0b0aa6c987c93d9715d0f1e9b35afbf1b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEzMjEyNg==", "url": "https://github.com/apache/skywalking/pull/4843#discussion_r433132126", "bodyText": "Fixed.", "author": "wu-sheng", "createdAt": "2020-06-01T09:27:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyOTgwNw=="}], "type": "inlineReview"}, {"oid": "a29b75dd1d4229fe0f46da51f13bceab6769fdfe", "url": "https://github.com/apache/skywalking/commit/a29b75dd1d4229fe0f46da51f13bceab6769fdfe", "message": "Fix method name.", "committedDate": "2020-06-01T09:26:51Z", "type": "commit"}, {"oid": "43bcaf2135cea69d11c2dda887f99b4b437ac323", "url": "https://github.com/apache/skywalking/commit/43bcaf2135cea69d11c2dda887f99b4b437ac323", "message": "fix e2e test", "committedDate": "2020-06-01T10:39:35Z", "type": "commit"}, {"oid": "80e3de87eacaae42011e35c6c1f2427cc4fb9227", "url": "https://github.com/apache/skywalking/commit/80e3de87eacaae42011e35c6c1f2427cc4fb9227", "message": "fix e2e test", "committedDate": "2020-06-01T12:06:54Z", "type": "commit"}, {"oid": "962cac29e8082019ebf62c8fec91c13b8f2d636c", "url": "https://github.com/apache/skywalking/commit/962cac29e8082019ebf62c8fec91c13b8f2d636c", "message": "Merge branch 'master' into ui-template", "committedDate": "2020-06-01T13:13:25Z", "type": "commit"}]}