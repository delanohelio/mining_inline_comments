{"pr_number": 295, "pr_title": "[KOGITO-2053] [KOGITO-2054] Create integration tests for process-timer-quarkus/springboot", "pr_createdAt": "2020-07-06T13:55:30Z", "pr_url": "https://github.com/kiegroup/kogito-examples/pull/295", "timeline": [{"oid": "4239df6434f4443255c731e2b0fddee362ec6f51", "url": "https://github.com/kiegroup/kogito-examples/commit/4239df6434f4443255c731e2b0fddee362ec6f51", "message": "Create integration tests for process-timer-quarkus\n\nAdding job service parameter from pom.xml", "committedDate": "2020-07-06T13:49:52Z", "type": "commit"}, {"oid": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca", "url": "https://github.com/kiegroup/kogito-examples/commit/ca9b3fb4283958c854796fbcd4ac43e85ec001ca", "message": "Using kogito.version for jobs-service", "committedDate": "2020-07-06T15:12:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYyNzM3Nw==", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450627377", "bodyText": "This field should be marked as final.", "author": "Sgitario", "createdAt": "2020-07-07T05:57:28Z", "path": "examples-test-utils/src/main/java/org/kie/kogito/local/LocalProcessTestResource.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.local;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Optional;\n+\n+import org.kie.kogito.resources.ConditionHolder;\n+import org.kie.kogito.resources.ConditionalTestResource;\n+\n+public class LocalProcessTestResource implements ConditionalTestResource<LocalProcessTestResource> {\n+\n+    private URL resource;\n+    private Process process;\n+    private final ConditionHolder condition;\n+    private String jvmArguments;", "originalCommit": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgwNDA4Mw==", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450804083", "bodyText": "+1", "author": "tiagodolphine", "createdAt": "2020-07-07T11:47:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYyNzM3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYyNzQyNQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450627425", "bodyText": "This field should be marked as final.", "author": "Sgitario", "createdAt": "2020-07-07T05:57:37Z", "path": "examples-test-utils/src/main/java/org/kie/kogito/local/LocalProcessTestResource.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.local;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Optional;\n+\n+import org.kie.kogito.resources.ConditionHolder;\n+import org.kie.kogito.resources.ConditionalTestResource;\n+\n+public class LocalProcessTestResource implements ConditionalTestResource<LocalProcessTestResource> {\n+\n+    private URL resource;", "originalCommit": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgwMzk2MA==", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450803960", "bodyText": "+1", "author": "tiagodolphine", "createdAt": "2020-07-07T11:46:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYyNzQyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYyNzU1MQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450627551", "bodyText": "The package \"local\" is to ambiguous for me. What about \"process\" ?", "author": "Sgitario", "createdAt": "2020-07-07T05:58:08Z", "path": "examples-test-utils/src/main/java/org/kie/kogito/local/LocalProcessTestResource.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.local;", "originalCommit": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgwNDAyMg==", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450804022", "bodyText": "+1", "author": "tiagodolphine", "createdAt": "2020-07-07T11:46:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYyNzU1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNjUxMw==", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450706513", "bodyText": "If using testcontainers, the Jobs Service test resource could go to the example test utils module and be shared to other examples that might need it in the future.", "author": "Sgitario", "createdAt": "2020-07-07T08:46:40Z", "path": "process-timer-quarkus/src/test/java/org/acme/travels/it/JobServiceTestResource.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import java.util.Optional;\n+\n+import org.kie.kogito.local.LocalProcessTestResource;\n+import org.kie.kogito.resources.ConditionalQuarkusTestResource;\n+\n+public class JobServiceTestResource extends ConditionalQuarkusTestResource {", "originalCommit": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgwNDU4Mw==", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450804583", "bodyText": "check my comment here #295 (comment)", "author": "tiagodolphine", "createdAt": "2020-07-07T11:48:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNjUxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNjgzNQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450706835", "bodyText": "Can we move this class in a separate file or move it to the bottom?", "author": "Sgitario", "createdAt": "2020-07-07T08:47:09Z", "path": "process-timer-quarkus/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+@QuarkusTest\n+@QuarkusTestResource(JobServiceTestResource.class)\n+public class ProcessTimerIT {\n+\n+    /**\n+     * Simple bean class to send as body on the requests\n+     */\n+    private class Delay {", "originalCommit": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNzUyOA==", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450707528", "bodyText": "The test methods should go before the rest of methods.", "author": "Sgitario", "createdAt": "2020-07-07T08:48:20Z", "path": "process-timer-quarkus/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+@QuarkusTest\n+@QuarkusTestResource(JobServiceTestResource.class)\n+public class ProcessTimerIT {\n+\n+    /**\n+     * Simple bean class to send as body on the requests\n+     */\n+    private class Delay {\n+\n+        String delay;\n+\n+        public Delay(String delay) {\n+            this.delay = delay;\n+        }\n+\n+        public String getDelay() {\n+            return delay;\n+        }\n+    }\n+\n+    public static final String TIMERS = \"timers\";\n+    public static final String TIMERS_CYCLE = \"timerscycle\";\n+    public static final String TIMERS_ON_TASK = \"timersOnTask\";\n+\n+    public ValidatableResponse getTimerWithStatusCode(String id, int code, String path) {\n+        return given()\n+                .accept(ContentType.JSON)\n+                .when()\n+                .get(\"/\" + path + \"/{id}\", id)\n+                .then()\n+                .statusCode(code);\n+    }\n+\n+    public String createTimer(Delay delay, String path) {\n+        return given()\n+                .contentType(ContentType.JSON)\n+                .accept(ContentType.JSON)\n+                .body(delay)\n+                .when()\n+                .post(\"/\" + path)\n+                .then()\n+                .statusCode(200)\n+                .body(\"id\", notNullValue())\n+                .extract()\n+                .path(\"id\");\n+    }\n+\n+    public String getTimerById(String id, String path) {\n+        return getTimerWithStatusCode(id, 200, path)\n+                .body(\"id\", notNullValue())\n+                .extract()\n+                .path(\"id\");\n+    }\n+\n+    public Object deleteTimer(String id, String path) {\n+        return given()\n+                .accept(ContentType.JSON)\n+                .when()\n+                .delete(\"/\" + path + \"/{id}\", id)\n+                .then()\n+                .statusCode(200)\n+                .body(\"id\", notNullValue())\n+                .extract()\n+                .path(\"id\");\n+    }\n+\n+    //Timers Tests\n+    @Test\n+    public void testTimers() {", "originalCommit": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNzU5Nw==", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450707597", "bodyText": "why public?", "author": "Sgitario", "createdAt": "2020-07-07T08:48:28Z", "path": "process-timer-quarkus/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+@QuarkusTest\n+@QuarkusTestResource(JobServiceTestResource.class)\n+public class ProcessTimerIT {\n+\n+    /**\n+     * Simple bean class to send as body on the requests\n+     */\n+    private class Delay {\n+\n+        String delay;\n+\n+        public Delay(String delay) {\n+            this.delay = delay;\n+        }\n+\n+        public String getDelay() {\n+            return delay;\n+        }\n+    }\n+\n+    public static final String TIMERS = \"timers\";\n+    public static final String TIMERS_CYCLE = \"timerscycle\";\n+    public static final String TIMERS_ON_TASK = \"timersOnTask\";\n+\n+    public ValidatableResponse getTimerWithStatusCode(String id, int code, String path) {", "originalCommit": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNzY0OQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450707649", "bodyText": "why public?", "author": "Sgitario", "createdAt": "2020-07-07T08:48:33Z", "path": "process-timer-quarkus/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+@QuarkusTest\n+@QuarkusTestResource(JobServiceTestResource.class)\n+public class ProcessTimerIT {\n+\n+    /**\n+     * Simple bean class to send as body on the requests\n+     */\n+    private class Delay {\n+\n+        String delay;\n+\n+        public Delay(String delay) {\n+            this.delay = delay;\n+        }\n+\n+        public String getDelay() {\n+            return delay;\n+        }\n+    }\n+\n+    public static final String TIMERS = \"timers\";\n+    public static final String TIMERS_CYCLE = \"timerscycle\";\n+    public static final String TIMERS_ON_TASK = \"timersOnTask\";\n+\n+    public ValidatableResponse getTimerWithStatusCode(String id, int code, String path) {\n+        return given()\n+                .accept(ContentType.JSON)\n+                .when()\n+                .get(\"/\" + path + \"/{id}\", id)\n+                .then()\n+                .statusCode(code);\n+    }\n+\n+    public String createTimer(Delay delay, String path) {", "originalCommit": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNzcyMQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450707721", "bodyText": "why public?", "author": "Sgitario", "createdAt": "2020-07-07T08:48:40Z", "path": "process-timer-quarkus/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+@QuarkusTest\n+@QuarkusTestResource(JobServiceTestResource.class)\n+public class ProcessTimerIT {\n+\n+    /**\n+     * Simple bean class to send as body on the requests\n+     */\n+    private class Delay {\n+\n+        String delay;\n+\n+        public Delay(String delay) {\n+            this.delay = delay;\n+        }\n+\n+        public String getDelay() {\n+            return delay;\n+        }\n+    }\n+\n+    public static final String TIMERS = \"timers\";\n+    public static final String TIMERS_CYCLE = \"timerscycle\";\n+    public static final String TIMERS_ON_TASK = \"timersOnTask\";\n+\n+    public ValidatableResponse getTimerWithStatusCode(String id, int code, String path) {\n+        return given()\n+                .accept(ContentType.JSON)\n+                .when()\n+                .get(\"/\" + path + \"/{id}\", id)\n+                .then()\n+                .statusCode(code);\n+    }\n+\n+    public String createTimer(Delay delay, String path) {\n+        return given()\n+                .contentType(ContentType.JSON)\n+                .accept(ContentType.JSON)\n+                .body(delay)\n+                .when()\n+                .post(\"/\" + path)\n+                .then()\n+                .statusCode(200)\n+                .body(\"id\", notNullValue())\n+                .extract()\n+                .path(\"id\");\n+    }\n+\n+    public String getTimerById(String id, String path) {", "originalCommit": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNzc5OA==", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450707798", "bodyText": "why public?", "author": "Sgitario", "createdAt": "2020-07-07T08:48:47Z", "path": "process-timer-quarkus/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+@QuarkusTest\n+@QuarkusTestResource(JobServiceTestResource.class)\n+public class ProcessTimerIT {\n+\n+    /**\n+     * Simple bean class to send as body on the requests\n+     */\n+    private class Delay {\n+\n+        String delay;\n+\n+        public Delay(String delay) {\n+            this.delay = delay;\n+        }\n+\n+        public String getDelay() {\n+            return delay;\n+        }\n+    }\n+\n+    public static final String TIMERS = \"timers\";\n+    public static final String TIMERS_CYCLE = \"timerscycle\";\n+    public static final String TIMERS_ON_TASK = \"timersOnTask\";\n+\n+    public ValidatableResponse getTimerWithStatusCode(String id, int code, String path) {\n+        return given()\n+                .accept(ContentType.JSON)\n+                .when()\n+                .get(\"/\" + path + \"/{id}\", id)\n+                .then()\n+                .statusCode(code);\n+    }\n+\n+    public String createTimer(Delay delay, String path) {\n+        return given()\n+                .contentType(ContentType.JSON)\n+                .accept(ContentType.JSON)\n+                .body(delay)\n+                .when()\n+                .post(\"/\" + path)\n+                .then()\n+                .statusCode(200)\n+                .body(\"id\", notNullValue())\n+                .extract()\n+                .path(\"id\");\n+    }\n+\n+    public String getTimerById(String id, String path) {\n+        return getTimerWithStatusCode(id, 200, path)\n+                .body(\"id\", notNullValue())\n+                .extract()\n+                .path(\"id\");\n+    }\n+\n+    public Object deleteTimer(String id, String path) {", "originalCommit": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a0b7a0ae2f4d95e7bb3b25a51fa660fe8f8809da", "url": "https://github.com/kiegroup/kogito-examples/commit/a0b7a0ae2f4d95e7bb3b25a51fa660fe8f8809da", "message": "Adding process-timer-springboot integration tests and applying PR comments", "committedDate": "2020-07-07T14:11:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxMzI5Ng==", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450913296", "bodyText": "The format is not correct here.", "author": "Sgitario", "createdAt": "2020-07-07T14:35:17Z", "path": "process-timer-quarkus/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.process.JobServiceQuarkusTestResource;\n+\n+import static io.restassured.RestAssured.given;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+@QuarkusTest\n+@QuarkusTestResource(JobServiceQuarkusTestResource.class)\n+public class ProcessTimerIT {\n+\n+    /**\n+     * Simple bean class to send as body on the requests\n+     */\n+    private class Delay {\n+\n+        String delay;\n+\n+        public Delay(String delay) {\n+            this.delay = delay;\n+        }\n+\n+        public String getDelay() {\n+            return delay;\n+        }\n+    }\n+\n+    private static final String TIMERS = \"timers\";\n+    private static final String TIMERS_CYCLE = \"timerscycle\";\n+    private static final String TIMERS_ON_TASK = \"timersOnTask\";\n+\n+    //Timers Tests\n+    @Test\n+    public void testTimers() {\n+        String id = createTimer(new Delay(\"PT02S\"), TIMERS);\n+        Object id2 = getTimerById(id, TIMERS);\n+        assertThat(id).isEqualTo(id2);\n+        with().pollDelay(2, SECONDS)\n+                .atMost(3, SECONDS)\n+                .untilAsserted(() -> getTimerWithStatusCode(id, 204, TIMERS));\n+    }\n+\n+    @Test\n+    public void testCancelTimer() {\n+        String id = createTimer(new Delay(\"PT030S\"), TIMERS);\n+        Object id2 = deleteTimer(id, TIMERS);\n+        assertThat(id).isEqualTo(id2);\n+        getTimerWithStatusCode(id, 204, TIMERS);\n+    }\n+\n+    //Cycle Timers Tests\n+    @Test\n+    public void testTimerCycle() {\n+        String id = createTimer(new Delay(\"R2/PT1S\"), TIMERS_CYCLE);\n+        String id2 = getTimerById(id, TIMERS_CYCLE);\n+        assertThat(id).isEqualTo(id2);\n+        with().pollDelay(2, SECONDS)\n+                .atMost(3, SECONDS)\n+                .untilAsserted(() -> getTimerWithStatusCode(id, 204, TIMERS));\n+    }\n+\n+    @Test\n+    public void testDeleteTimerCycle() {\n+        String id = createTimer(new Delay(\"R20/PT1S\"), TIMERS_CYCLE);\n+        String id2 = getTimerById(id, TIMERS_CYCLE);\n+        assertThat(id).isEqualTo(id2);\n+        deleteTimer(id, TIMERS_CYCLE);\n+    }\n+\n+    //Boundary Timers Tests\n+    @Test\n+    public void testBoundaryTimersOnTask() {\n+        String id = createTimer(new Delay(\"PT02S\"), TIMERS_ON_TASK);\n+        String id2 = getTimerById(id, TIMERS_ON_TASK);\n+        assertThat(id).isEqualTo(id2);\n+        with().pollDelay(2, SECONDS)\n+                .atMost(3, SECONDS)\n+                .untilAsserted(() -> getTimerWithStatusCode(id, 204, TIMERS_ON_TASK));\n+    }\n+\n+    @Test\n+    public void testDeleteBoundaryTimersOnTask() {\n+        String id = createTimer(new Delay(\"PT030S\"), TIMERS_ON_TASK);\n+        String id2 = getTimerById(id, TIMERS_ON_TASK);\n+        assertThat(id).isEqualTo(id2);\n+        deleteTimer(id, TIMERS_ON_TASK);\n+    }\n+\n+    private ValidatableResponse getTimerWithStatusCode(String id, int code, String path) {\n+        return given()\n+                .accept(ContentType.JSON)\n+                .when()\n+                .get(\"/\" + path + \"/{id}\", id)\n+                .then()\n+                .statusCode(code);\n+    }\n+\n+    private String createTimer(Delay delay, String path) {\n+        return given()\n+", "originalCommit": "a0b7a0ae2f4d95e7bb3b25a51fa660fe8f8809da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3MzA4NQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450973085", "bodyText": "there was one line break\nfixed", "author": "tiagodolphine", "createdAt": "2020-07-07T15:58:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxMzI5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxMzk0OQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450913949", "bodyText": "This class should be in a separate file or at the bottom of this class.", "author": "Sgitario", "createdAt": "2020-07-07T14:36:12Z", "path": "process-timer-springboot/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.process.JobServiceTestResource;\n+import org.kie.kogito.tests.KogitoApplication;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+import static io.restassured.RestAssured.given;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT, classes = KogitoApplication.class)\n+@ExtendWith(SpringExtension.class)\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_CLASS) // reset spring context after each test method\n+public class ProcessTimerIT {\n+\n+    @LocalServerPort\n+    private Integer httpPort;\n+\n+    /**\n+     * Simple bean class to send as body on the requests\n+     */\n+    private class Delay {", "originalCommit": "a0b7a0ae2f4d95e7bb3b25a51fa660fe8f8809da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3NDEzOA==", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450974138", "bodyText": "moved to the bottom, since it is used just on this test I'll keep here but we can move outside if needed.", "author": "tiagodolphine", "createdAt": "2020-07-07T15:59:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxMzk0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxNDg4NA==", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450914884", "bodyText": "Why aren't you using the @container and @testcontainers annotations for sprintboot? This way, you don't need to start/stop the resource.", "author": "Sgitario", "createdAt": "2020-07-07T14:37:29Z", "path": "process-timer-springboot/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.process.JobServiceTestResource;\n+import org.kie.kogito.tests.KogitoApplication;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+import static io.restassured.RestAssured.given;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT, classes = KogitoApplication.class)\n+@ExtendWith(SpringExtension.class)\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_CLASS) // reset spring context after each test method\n+public class ProcessTimerIT {\n+\n+    @LocalServerPort\n+    private Integer httpPort;\n+\n+    /**\n+     * Simple bean class to send as body on the requests\n+     */\n+    private class Delay {\n+\n+        String delay;\n+\n+        public Delay(String delay) {\n+            this.delay = delay;\n+        }\n+\n+        public String getDelay() {\n+            return delay;\n+        }\n+    }\n+\n+    private static final String TIMERS = \"timers\";\n+    private static final String TIMERS_CYCLE = \"timerscycle\";\n+    private static final String TIMERS_ON_TASK = \"timersOnTask\";\n+    private static JobServiceTestResource jobServiceTestResource;", "originalCommit": "a0b7a0ae2f4d95e7bb3b25a51fa660fe8f8809da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3NTczNw==", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450975737", "bodyText": "if the JobSErviceTestResource were a container we could do it, but since for now, it is just a process running locally I needed to control the lifecycle here to start/stop, anyway if we go to use it as a container we can change.", "author": "tiagodolphine", "createdAt": "2020-07-07T16:02:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxNDg4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxNjI3MA==", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450916270", "bodyText": "Wrong format here. Are you using the formatter from here?", "author": "Sgitario", "createdAt": "2020-07-07T14:39:26Z", "path": "process-timer-springboot/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.process.JobServiceTestResource;\n+import org.kie.kogito.tests.KogitoApplication;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+import static io.restassured.RestAssured.given;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT, classes = KogitoApplication.class)\n+@ExtendWith(SpringExtension.class)\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_CLASS) // reset spring context after each test method\n+public class ProcessTimerIT {\n+\n+    @LocalServerPort\n+    private Integer httpPort;\n+\n+    /**\n+     * Simple bean class to send as body on the requests\n+     */\n+    private class Delay {\n+\n+        String delay;\n+\n+        public Delay(String delay) {\n+            this.delay = delay;\n+        }\n+\n+        public String getDelay() {\n+            return delay;\n+        }\n+    }\n+\n+    private static final String TIMERS = \"timers\";\n+    private static final String TIMERS_CYCLE = \"timerscycle\";\n+    private static final String TIMERS_ON_TASK = \"timersOnTask\";\n+    private static JobServiceTestResource jobServiceTestResource;\n+\n+    //Timers Tests\n+    @Test\n+    public void testTimers() {\n+        String id = createTimer(new Delay(\"PT02S\"), TIMERS);\n+        Object id2 = getTimerById(id, TIMERS);\n+        assertThat(id).isEqualTo(id2);\n+        with().pollDelay(2, SECONDS)\n+                .atMost(3, SECONDS)\n+                .untilAsserted(() -> getTimerWithStatusCode(id, 204, TIMERS));\n+    }\n+\n+    @Test\n+    public void testCancelTimer() {\n+        String id = createTimer(new Delay(\"PT030S\"), TIMERS);\n+        Object id2 = deleteTimer(id, TIMERS);\n+        assertThat(id).isEqualTo(id2);\n+        getTimerWithStatusCode(id, 204, TIMERS);\n+    }\n+\n+    //Cycle Timers Tests\n+    @Test\n+    public void testTimerCycle() {\n+        String id = createTimer(new Delay(\"R2/PT1S\"), TIMERS_CYCLE);\n+        String id2 = getTimerById(id, TIMERS_CYCLE);\n+        assertThat(id).isEqualTo(id2);\n+        with().pollDelay(2, SECONDS)\n+                .atMost(3, SECONDS)\n+                .untilAsserted(() -> getTimerWithStatusCode(id, 204, TIMERS));\n+    }\n+\n+    @Test\n+    public void testDeleteTimerCycle() {\n+        String id = createTimer(new Delay(\"R20/PT1S\"), TIMERS_CYCLE);\n+        String id2 = getTimerById(id, TIMERS_CYCLE);\n+        assertThat(id).isEqualTo(id2);\n+        deleteTimer(id, TIMERS_CYCLE);\n+    }\n+\n+    //Boundary Timers Tests\n+    @Test\n+    public void testBoundaryTimersOnTask() {\n+        String id = createTimer(new Delay(\"PT02S\"), TIMERS_ON_TASK);\n+        String id2 = getTimerById(id, TIMERS_ON_TASK);\n+        assertThat(id).isEqualTo(id2);\n+        with().pollDelay(2, SECONDS)\n+                .atMost(3, SECONDS)\n+                .untilAsserted(() -> getTimerWithStatusCode(id, 204, TIMERS_ON_TASK));\n+    }\n+\n+    @Test\n+    public void testDeleteBoundaryTimersOnTask() {\n+        String id = createTimer(new Delay(\"PT030S\"), TIMERS_ON_TASK);\n+        String id2 = getTimerById(id, TIMERS_ON_TASK);\n+        assertThat(id).isEqualTo(id2);\n+        deleteTimer(id, TIMERS_ON_TASK);\n+    }\n+\n+    @BeforeAll\n+    public static void beforeAll() {\n+        jobServiceTestResource = new JobServiceTestResource();\n+        jobServiceTestResource.start();\n+    }\n+\n+    @BeforeEach\n+    public void beforeEach(){\n+        RestAssured.port = httpPort;\n+    }\n+\n+    @AfterAll\n+    public static void destroy() {\n+        jobServiceTestResource.stop();\n+    }\n+\n+    private ValidatableResponse getTimerWithStatusCode(String id, int code, String path) {\n+        return given()\n+                .accept(ContentType.JSON)\n+                .when()\n+                .get(\"/\" + path + \"/{id}\", id)\n+                .then()\n+                .statusCode(code);\n+    }\n+\n+    private String createTimer(Delay delay, String path) {\n+        return given()\n+", "originalCommit": "a0b7a0ae2f4d95e7bb3b25a51fa660fe8f8809da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3Njk1OQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450976959", "bodyText": "yes I use it on IDEA, but there was a  wrong linebreak, it didn't complain don't know why, anyway, fixed.", "author": "tiagodolphine", "createdAt": "2020-07-07T16:04:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxNjI3MA=="}], "type": "inlineReview"}, {"oid": "766e078c63384331c1ec29c0d5228b4283cc7be5", "url": "https://github.com/kiegroup/kogito-examples/commit/766e078c63384331c1ec29c0d5228b4283cc7be5", "message": "Applying PR comments", "committedDate": "2020-07-07T16:05:33Z", "type": "commit"}, {"oid": "36bedffe972771b46a32ffe8fc4b24a52f8c4ed1", "url": "https://github.com/kiegroup/kogito-examples/commit/36bedffe972771b46a32ffe8fc4b24a52f8c4ed1", "message": "Fix broken tests", "committedDate": "2020-07-07T18:32:31Z", "type": "commit"}]}