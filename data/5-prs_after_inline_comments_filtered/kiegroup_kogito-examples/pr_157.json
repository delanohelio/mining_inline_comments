{"pr_number": 157, "pr_title": "Quarkus version of the spring-boot flight example.", "pr_createdAt": "2020-03-20T19:38:14Z", "pr_url": "https://github.com/kiegroup/kogito-examples/pull/157", "timeline": [{"oid": "20ecf9a0d67e5619d7a587e2617d169ba617c2f9", "url": "https://github.com/kiegroup/kogito-examples/commit/20ecf9a0d67e5619d7a587e2617d169ba617c2f9", "message": "Begin work on the Quarkus version of the spring-boot flight example.", "committedDate": "2020-03-20T19:34:34Z", "type": "commit"}, {"oid": "7e822cc882407ff1ec3869ae6fc22ff30358c352", "url": "https://github.com/kiegroup/kogito-examples/commit/7e822cc882407ff1ec3869ae6fc22ff30358c352", "message": "Fix CSS styling by including version in path.", "committedDate": "2020-03-20T19:41:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk3Mjg2NQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/157#discussion_r395972865", "bodyText": "Are business intelligent equals/hashCode methods needed for the quarkus and spring boot example to work?\nLess is more: if it works without these methods on the domain objects, please remove them, otherwise users think they are crucial.", "author": "ge0ffrey", "createdAt": "2020-03-21T08:13:17Z", "path": "jbpm-optaplanner-quarkus-example/src/main/java/org/kie/kogito/examples/domain/Seat.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.kie.kogito.examples.domain;\n+\n+import java.util.Objects;\n+\n+import org.optaplanner.core.api.domain.lookup.PlanningId;\n+\n+public class Seat {\n+\n+    @PlanningId\n+    private final String name;\n+    private final int row;\n+    private final int column;\n+    private final SeatType seatType;\n+    private final boolean emergencyExitRow;\n+\n+    public Seat(int row, int column, SeatType seatType, boolean emergencyExitRow) {\n+        this.row = row;\n+        this.column = column;\n+        // ASCII has a nice property: The English Alphabet are placed in consecutive\n+        // ASCII codes. So 'B' is immediately after 'A', 'C' is immediately after 'B',\n+        // etc. So 'A' + n = nth letter of the alphabet.\n+        // Name is row number (starting at 1) + column letter (starting at 'A').  \n+        this.name = (row + 1) + Character.toString((char) ('A' + column));\n+        this.seatType = seatType;\n+        this.emergencyExitRow = emergencyExitRow;\n+    }\n+\n+    // ************************************************************************\n+    // Getters and setters\n+    // ************************************************************************\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public int getRow() {\n+        return row;\n+    }\n+\n+    public int getColumn() {\n+        return column;\n+    }\n+\n+    public SeatType getSeatType() {\n+        return seatType;\n+    }\n+\n+    public boolean isEmergencyExitRow() {\n+        return emergencyExitRow;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (o instanceof Seat) {\n+            Seat other = (Seat) o;\n+            // Name is computed based on row and column and thus does not need to be checked.\n+            // (seatType is based on column and emergencyExitRow is based on row, but not guaranteed\n+            // by API (we need to know row and column length to calculate this here))\n+            return this.row == other.row &&\n+                    this.column == other.column &&\n+                    this.seatType.equals(other.getSeatType()) &&\n+                    this.emergencyExitRow == other.emergencyExitRow;\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        // Name is computed based on row and column and thus does not need to be included in the hash.\n+        return Objects.hash(row, column, seatType, emergencyExitRow);\n+    }", "originalCommit": "7e822cc882407ff1ec3869ae6fc22ff30358c352", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ0NTMzOA==", "url": "https://github.com/kiegroup/kogito-examples/pull/157#discussion_r396445338", "bodyText": "Not needed; @triceo advocated for it since Seat is immutable. Curious, how does OptaPlanner handles equals but not is (that is, x.equals(y) but not x == y)? If I pin a passenger to a Seat that is not a Seat on the Flight, but rather a Seat equal to a Seat on the Flight, will there be no adverse side effects (the Seat won't be in a Problem Fact Collection)?", "author": "Christopher-Chianelli", "createdAt": "2020-03-23T13:22:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk3Mjg2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ0Njc3MQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/157#discussion_r396446771", "bodyText": "(If it handled well,\n            String[] seatLoc = passenger.getSeat().split(\";\");\n            int row = Integer.parseInt(seatLoc[0]);\n            int col = Integer.parseInt(seatLoc[1]);\n            seat = flight.getSeatList().stream().filter(s -> s.getRow() == row && s.getColumn() == col).findAny().get();\n\ncan be removed and we can just access the Seat directly from the DTO.", "author": "Christopher-Chianelli", "createdAt": "2020-03-23T13:24:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk3Mjg2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUyODkzNg==", "url": "https://github.com/kiegroup/kogito-examples/pull/157#discussion_r398528936", "bodyText": "OptaPlanner expects that given the following input:\n- Rooms [A, B]\n- Lessons [ {Math, room: A}, {French, room: A}]\n\nthat all those A instances are the same instance. (That's btw that in JPA the rooms and lessons need to be fetched in the same transaction).\nThen, the output of OptaPlanner also respects this philosophy. Basically, a solution will never have 2 room A instances. Or two seat instances. (Even if planning cloning happens that still holds true) So default Object.hashCode/equals() suffices. Less code is better than more code.", "author": "ge0ffrey", "createdAt": "2020-03-26T12:21:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk3Mjg2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk3Mjk0MQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/157#discussion_r395972941", "bodyText": "Oh yes, I need to prioritize PLANNER-1868 so there's no need to do \"new Thread\". Let's merge this as is and feel free to remind me about 1868 if I haven't fixed that next week.", "author": "ge0ffrey", "createdAt": "2020-03-21T08:15:03Z", "path": "jbpm-optaplanner-quarkus-example/src/main/java/org/kie/kogito/examples/service/FlightSeatingSolveService.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package org.kie.kogito.examples.service;\n+\n+import java.util.concurrent.ExecutionException;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import javax.inject.Qualifier;\n+\n+import org.kie.kogito.examples.domain.Flight;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.impl.Sig;\n+import org.optaplanner.core.api.solver.SolverJob;\n+import org.optaplanner.core.api.solver.SolverManager;\n+\n+@ApplicationScoped\n+public class FlightSeatingSolveService {\n+\n+    @Inject\n+    SolverManager<Flight, String> solverManager;\n+\n+    @Inject\n+    @Named(\"flights\")\n+    Process<?> process;\n+\n+    public void assignSeats(String id, Flight problem) {\n+        SolverJob<Flight, String> solverJob = solverManager.solveAndListen(id, (problemId) -> problem, (bestSolution) -> {\n+            process.instances().findById(id).ifPresent(pi -> {\n+                pi.send(Sig.of(\"newSolution\", bestSolution));\n+            });\n+        });\n+\n+        // TODO: Workaround for https://issues.redhat.com/browse/PLANNER-1868\n+        // Wait for solving to finish in new thread (so we don't block the return)\n+        new Thread(() -> {\n+            try {\n+                Flight finalBestSolution = solverJob.getFinalBestSolution();\n+                process.instances().findById(id).ifPresent(pi -> {\n+                    pi.send(Sig.of(\"solvingTerminated\", finalBestSolution));\n+                });\n+            } catch (InterruptedException | ExecutionException e) {\n+                e.printStackTrace();\n+            }\n+        }).start();", "originalCommit": "7e822cc882407ff1ec3869ae6fc22ff30358c352", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk3MzAyNg==", "url": "https://github.com/kiegroup/kogito-examples/pull/157#discussion_r395973026", "bodyText": "we might want to do this in \"milis\" or maybe not. Something to discuss, please bring this subject up in our next sync-up so I can explain the \"milis\" approach and we can determine if it's needed here.", "author": "ge0ffrey", "createdAt": "2020-03-21T08:16:48Z", "path": "jbpm-optaplanner-quarkus-example/src/main/java/org/kie/kogito/examples/solver/FlightSeatingConstraintProvider.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package org.kie.kogito.examples.solver;\n+\n+import org.kie.kogito.examples.domain.FlightInfo;\n+import org.kie.kogito.examples.domain.Passenger;\n+import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintCollectors;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+\n+import java.awt.geom.Point2D;\n+\n+public class FlightSeatingConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory factory) {\n+        return new Constraint[]{\n+                seatConflict(factory),\n+                emergencyExitRow(factory),\n+                seatTypePreference(factory),\n+                planeBalance(factory)\n+        };\n+    }\n+\n+    private Constraint seatConflict(ConstraintFactory factory) {\n+        return factory\n+                .fromUniquePair(Passenger.class, equal(Passenger::getSeat))\n+                .penalize(\"Seat conflict\", HardSoftScore.ONE_HARD);\n+    }\n+\n+    private Constraint emergencyExitRow(ConstraintFactory factory) {\n+        return factory\n+                .from(Passenger.class)\n+                .filter(passenger -> passenger.getSeat().isEmergencyExitRow()\n+                        && !passenger.isEmergencyExitRowCapable())\n+                .penalize(\"Emergency exit row has incapable passenger\", HardSoftScore.ONE_HARD);\n+    }\n+\n+    private Constraint seatTypePreference(ConstraintFactory factory) {\n+        return factory\n+                .from(Passenger.class)\n+                .filter(passenger -> passenger.getSeat().getSeatType().violatesPreference(\n+                        passenger.getSeatTypePreference()))\n+                .penalize(\"Seat type preference\", HardSoftScore.ONE_SOFT);\n+    }\n+\n+    private Constraint planeBalance(ConstraintFactory factory) {\n+        return factory.from(Passenger.class).groupBy(ConstraintCollectors.sum(p -> p.getSeat().getColumn()))\n+                .join(factory.from(Passenger.class).groupBy(ConstraintCollectors.sum(p -> p.getSeat().getRow())))\n+                .join(factory.from(Passenger.class).groupBy(ConstraintCollectors.count()))\n+                .join(FlightInfo.class)\n+                .penalize(\"Plane Balance\", HardSoftScore.ONE_SOFT, (totalX, totalY, passengerCount, flightInfo) -> {\n+                    double localTotalX = totalX - passengerCount * ((flightInfo.getSeatColumnSize() / 2.0) - 0.5);\n+                    double localTotalY = totalY - passengerCount * ((flightInfo.getSeatRowSize() / 2.0) - 0.5);\n+                    double averageX = localTotalX / passengerCount;\n+                    double averageY = localTotalY / passengerCount;\n+                    return (int) Math.round(Point2D.distance(0, 0, averageX, averageY) * passengerCount * 100);", "originalCommit": "7e822cc882407ff1ec3869ae6fc22ff30358c352", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7a92e71eaca8df60b771df22a9b1ee24d76312b1", "url": "https://github.com/kiegroup/kogito-examples/commit/7a92e71eaca8df60b771df22a9b1ee24d76312b1", "message": "Remove .gitignore, remove unrequired dependencies, remove Spring Boot references", "committedDate": "2020-03-23T16:00:10Z", "type": "commit"}, {"oid": "76c1d0a32520c365c2035fbe9cf3a06db6728478", "url": "https://github.com/kiegroup/kogito-examples/commit/76c1d0a32520c365c2035fbe9cf3a06db6728478", "message": "Remove --allow-incomplete-classpath flag since the missing method\nwas backported to Drools.", "committedDate": "2020-03-24T14:53:18Z", "type": "commit"}, {"oid": "223c8d849e44db6e1df2aaf7ad3785ec0f493b37", "url": "https://github.com/kiegroup/kogito-examples/commit/223c8d849e44db6e1df2aaf7ad3785ec0f493b37", "message": "Merge branch 'master' into quarkus-flight-example", "committedDate": "2020-04-09T18:12:41Z", "type": "commit"}, {"oid": "8ce77b40cb1692c5f7fab93483ddc0e919cfefce", "url": "https://github.com/kiegroup/kogito-examples/commit/8ce77b40cb1692c5f7fab93483ddc0e919cfefce", "message": "Merge branch 'master' into quarkus-flight-example", "committedDate": "2020-04-15T17:26:18Z", "type": "commit"}, {"oid": "fa4648155e8c9c660ab91caf59772d9b645ecd4e", "url": "https://github.com/kiegroup/kogito-examples/commit/fa4648155e8c9c660ab91caf59772d9b645ecd4e", "message": "Add tests for both JVM and native mode for process-optaplanner-quarkus.", "committedDate": "2020-04-16T21:25:24Z", "type": "commit"}, {"oid": "c8333c26608513eda1e6bef1c8fd6412b4501d77", "url": "https://github.com/kiegroup/kogito-examples/commit/c8333c26608513eda1e6bef1c8fd6412b4501d77", "message": "Merge branch 'master' into quarkus-flight-example", "committedDate": "2020-04-23T18:26:46Z", "type": "commit"}, {"oid": "afeb8f6f1ee1c2c42954cca34b771286efb2bca1", "url": "https://github.com/kiegroup/kogito-examples/commit/afeb8f6f1ee1c2c42954cca34b771286efb2bca1", "message": "Align Java and Maven version in README, generate swagger definition.", "committedDate": "2020-04-23T18:39:08Z", "type": "commit"}, {"oid": "755edb6935dcd042bab676d86202313ea76f3cfc", "url": "https://github.com/kiegroup/kogito-examples/commit/755edb6935dcd042bab676d86202313ea76f3cfc", "message": "Change jBPM to Process in pom.xml and README\n\nCo-Authored-By: Ricardo Zanini <1538000+ricardozanini@users.noreply.github.com>", "committedDate": "2020-04-23T19:48:52Z", "type": "commit"}, {"oid": "e2b4792eb5ca24172c601c5627a0d54ca23446f3", "url": "https://github.com/kiegroup/kogito-examples/commit/e2b4792eb5ca24172c601c5627a0d54ca23446f3", "message": "Add an Operator Deployement file for process-optaplanner-quarkus", "committedDate": "2020-04-23T19:55:25Z", "type": "commit"}]}