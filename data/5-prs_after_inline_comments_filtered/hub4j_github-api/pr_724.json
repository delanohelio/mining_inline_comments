{"pr_number": 724, "pr_title": "Add Builder/Creator/Updater for GHLabel", "pr_createdAt": "2020-03-02T09:49:21Z", "pr_url": "https://github.com/hub4j/github-api/pull/724", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwNDg1NQ==", "url": "https://github.com/hub4j/github-api/pull/724#discussion_r386304855", "bodyText": "Single Update", "author": "bitwiseman", "createdAt": "2020-03-02T10:17:50Z", "path": "src/test/java/org/kohsuke/github/AppTest.java", "diffHunk": "@@ -784,44 +784,47 @@ public void testRepoLabel() throws IOException {\n         }\n         assertTrue(lst.size() > 5);\n         GHLabel e = r.getLabel(\"enhancement\");\n-        assertEquals(\"enhancement\", e.getName());\n-        assertNotNull(e.getUrl());\n-        assertTrue(Pattern.matches(\"[0-9a-fA-F]{6}\", e.getColor()));\n+        assertEquals(\"enhancement\", e.name());\n+        assertNotNull(e.url());\n+        assertTrue(Pattern.matches(\"[0-9a-fA-F]{6}\", e.color()));\n \n         GHLabel t = null;\n         GHLabel t2 = null;\n         try {// CRUD\n             t = r.createLabel(\"test\", \"123456\");\n             t2 = r.getLabel(\"test\");\n-            assertEquals(t.getName(), t2.getName());\n-            assertEquals(t.getColor(), \"123456\");\n-            assertEquals(t.getColor(), t2.getColor());\n-            assertEquals(t.getDescription(), \"\");\n-            assertEquals(t.getDescription(), t2.getDescription());\n-            assertEquals(t.getUrl(), t2.getUrl());\n-\n-            t.setColor(\"000000\");\n-\n-            // This is annoying behavior, but it is by design at this time.\n-            // Verifying so we can know when it is fixed.\n-            assertEquals(t.getColor(), \"123456\");\n+            assertEquals(t.name(), t2.name());\n+            assertEquals(t.color(), \"123456\");\n+            assertEquals(t.color(), t2.color());\n+            assertEquals(t.description(), \"\");\n+            assertEquals(t.description(), t2.description());\n+            assertEquals(t.url(), t2.url());\n+\n+            // update works on multiple changes in one call\n+            // t.setColor(\"\");\n+            t2 = t.update().color(\"000000\").description(\"It is dark!\").done();\n+\n+            // instances are immutable, but update returns a new updated instance.\n+            assertEquals(t.color(), \"123456\");\n+            assertEquals(t.description(), \"\");\n+            assertEquals(t2.color(), \"000000\");\n+            assertEquals(t2.description(), \"It is dark!\");\n \n             t = r.getLabel(\"test\");\n-            t.setDescription(\"this is also a test\");\n+            GHLabel t3 = t.set().description(\"this is also a test\");", "originalCommit": "d59794b25f2db0889c3da09fe98a13d42e42181d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwNDkyNA==", "url": "https://github.com/hub4j/github-api/pull/724#discussion_r386304924", "bodyText": "Batch update", "author": "bitwiseman", "createdAt": "2020-03-02T10:17:58Z", "path": "src/test/java/org/kohsuke/github/AppTest.java", "diffHunk": "@@ -784,44 +784,47 @@ public void testRepoLabel() throws IOException {\n         }\n         assertTrue(lst.size() > 5);\n         GHLabel e = r.getLabel(\"enhancement\");\n-        assertEquals(\"enhancement\", e.getName());\n-        assertNotNull(e.getUrl());\n-        assertTrue(Pattern.matches(\"[0-9a-fA-F]{6}\", e.getColor()));\n+        assertEquals(\"enhancement\", e.name());\n+        assertNotNull(e.url());\n+        assertTrue(Pattern.matches(\"[0-9a-fA-F]{6}\", e.color()));\n \n         GHLabel t = null;\n         GHLabel t2 = null;\n         try {// CRUD\n             t = r.createLabel(\"test\", \"123456\");\n             t2 = r.getLabel(\"test\");\n-            assertEquals(t.getName(), t2.getName());\n-            assertEquals(t.getColor(), \"123456\");\n-            assertEquals(t.getColor(), t2.getColor());\n-            assertEquals(t.getDescription(), \"\");\n-            assertEquals(t.getDescription(), t2.getDescription());\n-            assertEquals(t.getUrl(), t2.getUrl());\n-\n-            t.setColor(\"000000\");\n-\n-            // This is annoying behavior, but it is by design at this time.\n-            // Verifying so we can know when it is fixed.\n-            assertEquals(t.getColor(), \"123456\");\n+            assertEquals(t.name(), t2.name());\n+            assertEquals(t.color(), \"123456\");\n+            assertEquals(t.color(), t2.color());\n+            assertEquals(t.description(), \"\");\n+            assertEquals(t.description(), t2.description());\n+            assertEquals(t.url(), t2.url());\n+\n+            // update works on multiple changes in one call\n+            // t.setColor(\"\");\n+            t2 = t.update().color(\"000000\").description(\"It is dark!\").done();", "originalCommit": "d59794b25f2db0889c3da09fe98a13d42e42181d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwNTM4Mw==", "url": "https://github.com/hub4j/github-api/pull/724#discussion_r386305383", "bodyText": "Moved all the calls that create instances of GHLabel into that class.", "author": "bitwiseman", "createdAt": "2020-03-02T10:18:57Z", "path": "src/main/java/org/kohsuke/github/GHRepository.java", "diffHunk": "@@ -1842,9 +1842,7 @@ public GHCommitStatus createCommitStatus(String sha1, GHCommitState state, Strin\n      *             the io exception\n      */\n     public PagedIterable<GHLabel> listLabels() throws IOException {\n-        return root.createRequest()\n-                .withUrlPath(getApiTailUrl(\"labels\"))\n-                .toIterable(GHLabel[].class, item -> item.wrapUp(this));\n+        return GHLabel.readAll(this);", "originalCommit": "d59794b25f2db0889c3da09fe98a13d42e42181d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY4NzgzNQ==", "url": "https://github.com/hub4j/github-api/pull/724#discussion_r386687835", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // instances are immutable, but update returns a new updated instance.\n          \n          \n            \n                        // instances behave as immutable by default. Update returns a new updated instance.", "author": "bitwiseman", "createdAt": "2020-03-02T22:24:17Z", "path": "src/test/java/org/kohsuke/github/AppTest.java", "diffHunk": "@@ -800,16 +800,19 @@ public void testRepoLabel() throws IOException {\n             assertEquals(t.getDescription(), t2.getDescription());\n             assertEquals(t.getUrl(), t2.getUrl());\n \n-            t.setColor(\"000000\");\n+            // update works on multiple changes in one call\n+            // t.setColor(\"\");\n+            t2 = t.update().color(\"000000\").description(\"It is dark!\").done();\n \n-            // This is annoying behavior, but it is by design at this time.\n-            // Verifying so we can know when it is fixed.\n+            // instances are immutable, but update returns a new updated instance.", "originalCommit": "38f087c401ec891c4d3118c5afc75116af3d24a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk0ODMyMQ==", "url": "https://github.com/hub4j/github-api/pull/724#discussion_r386948321", "bodyText": "This threw me off the first time I read this code to realize that this is what ensures setters still make the REST API call instead of batching", "author": "res0nance", "createdAt": "2020-03-03T11:06:49Z", "path": "src/main/java/org/kohsuke/github/AbstractBuilder.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package org.kohsuke.github;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.CheckForNull;\n+import javax.annotation.Nonnull;\n+\n+/**\n+ *\n+ * @param <R>\n+ *            Final return type for built by this builder returned when {@link #done()}} is called.\n+ * @param <S>\n+ *            Intermediate return type for this builder returned by calls to {@link #with(String, Object)}. If {@link S}\n+ *            the same as {@link R}, this builder will commit changes after each call to {@link #with(String, Object)}.\n+ */\n+abstract class AbstractBuilder<R, S> {\n+\n+    // TODO: Not sure how update-in-place behavior should be controlled, but\n+    // it certainly can be controlled dynamically down to the instance level or inherited for all children of some\n+    // connection.\n+    protected boolean updateInPlace;\n+    private final Class<R> returnType;\n+    private final Class<S> intermediateReturnType;\n+    protected final Requester requester;\n+\n+    @CheckForNull\n+    private final R baseInstance;\n+\n+    /**\n+     * Creates a builder.\n+     *\n+     * @param root\n+     *            the GitHub instance to connect to.\n+     * @param intermediateReturnType\n+     *            the intermediate return type returned by calls to {@link #with(String, Object)}.\n+     * @param builtReturnType\n+     *            the final return type for built by this builder returned when {@link #done()}} is called.\n+     * @param baseInstance\n+     *            optional instance on which to base this builder.\n+     */\n+    protected AbstractBuilder(@Nonnull GitHub root,\n+            @Nonnull Class<S> intermediateReturnType,\n+            @Nonnull Class<R> builtReturnType,\n+            @CheckForNull R baseInstance) {\n+        this.requester = root.createRequest();\n+        this.returnType = builtReturnType;\n+        this.intermediateReturnType = intermediateReturnType;\n+        this.baseInstance = baseInstance;\n+        this.updateInPlace = false;\n+    }\n+\n+    /**\n+     * Finishes an update, committing changes.\n+     *\n+     * This method may update-in-place or not. Either way it returns the resulting instance.\n+     *\n+     * @return an instance with updated current data\n+     * @throws IOException\n+     *             if there is an I/O Exception\n+     */\n+    @Nonnull\n+    public R done() throws IOException {\n+        R result;\n+        if (updateInPlace && baseInstance != null) {\n+            result = requester.fetchInto(baseInstance);\n+        } else {\n+            result = requester.fetch(returnType);\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Applies a value to a name for this builder.\n+     *\n+     * The internals of this method look terrifying, but they they're actually basically safe due to previous comparison\n+     * of U and T determined by comparing class instances passed in during construction.\n+     *\n+     * If U is the same as T, this cause the builder to commit changes after the first value change and return a T from\n+     * done().\n+     *\n+     * If U is not the same as T, the builder will batch together multiple changes and let the user call done() when\n+     * they are ready.\n+     *\n+     * This little bit of roughness in this base class means all inheriting builders get to create Updater and Setter\n+     * classes from almost identical code. Creator can be implemented with significant code reuse as well.\n+     *\n+     * There is probably a cleaner way to implement this, but I'm not sure what it is right now.\n+     *\n+     * @param name\n+     *            the name of the field\n+     * @param value\n+     *            the value of the field\n+     * @return either a continuing builder or an updated data record\n+     * @throws IOException\n+     *             if an I/O error occurs\n+     */\n+    @Nonnull\n+    protected S with(@Nonnull String name, Object value) throws IOException {\n+        requester.with(name, value);\n+        if (returnType.equals(intermediateReturnType)) {\n+            return intermediateReturnType.cast(done());", "originalCommit": "cec3e67cfc4ee0b4d0d0c1a28c325113b5e5a229", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEwNzcyMQ==", "url": "https://github.com/hub4j/github-api/pull/724#discussion_r387107721", "bodyText": "I should make it a method or boolean field with comments to make it clearer.", "author": "bitwiseman", "createdAt": "2020-03-03T15:43:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk0ODMyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2NjA2Ng==", "url": "https://github.com/hub4j/github-api/pull/724#discussion_r387466066", "bodyText": "@res0nance How about now? Better?", "author": "bitwiseman", "createdAt": "2020-03-04T06:12:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk0ODMyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE4Njg5NA==", "url": "https://github.com/hub4j/github-api/pull/724#discussion_r394186894", "bodyText": "Much better", "author": "res0nance", "createdAt": "2020-03-18T08:51:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk0ODMyMQ=="}], "type": "inlineReview"}, {"oid": "9111081d7ed0f1b8cc6a8933522c412e200497bd", "url": "https://github.com/hub4j/github-api/commit/9111081d7ed0f1b8cc6a8933522c412e200497bd", "message": "Clarify behavior", "committedDate": "2020-03-04T06:10:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2NjIxNg==", "url": "https://github.com/hub4j/github-api/pull/724#discussion_r387466216", "bodyText": "Replaced wrapUp() with lateBind().\nUpdate: removed need for late bind.", "author": "bitwiseman", "createdAt": "2020-03-04T06:13:05Z", "path": "src/main/java/org/kohsuke/github/GHLabel.java", "diffHunk": "@@ -48,41 +69,23 @@ public String getColor() {\n      *\n      * @return the description\n      */\n+    @Nonnull\n     public String getDescription() {\n         return description;\n     }\n \n-    GHLabel wrapUp(GHRepository repo) {", "originalCommit": "d1205ff97144bd929364f834a380214da3a430d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2NzA3OQ==", "url": "https://github.com/hub4j/github-api/pull/724#discussion_r387467079", "bodyText": "Any suggestions for a better method name than done()?   send()?  submit()?\nWe can't use commit() because it will almost surely collide with a git \"commit\" at least conceptually if not literally.", "author": "bitwiseman", "createdAt": "2020-03-04T06:16:22Z", "path": "src/main/java/org/kohsuke/github/AbstractBuilder.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package org.kohsuke.github;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.CheckForNull;\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * An abstract data object builder/updater.\n+ *\n+ * This class can be use to make a Builder that supports both batch and single property changes.\n+ * <p>\n+ * Batching looks like this:\n+ * \n+ * <pre>\n+ * update().someName(value).otherName(value).done()\n+ * </pre>\n+ * </p>\n+ * <p>\n+ * Single changee look like this:\n+ * \n+ * <pre>\n+ * set().someName(value);\n+ * set().otherName(value);\n+ * </pre>\n+ * </p>\n+ * <p>\n+ * If S is the same as R, {@link #with(String, Object)} will commit changes after the first value change and return a R\n+ * from {@link #done()}.\n+ * </p>\n+ * <p>\n+ * If S is not the same as R, {@link #with(String, Object)} will batch together multiple changes and let the user call\n+ * {@link #done()} when they are ready.\n+ *\n+ * @param <R>\n+ *            Final return type for built by this builder returned when {@link #done()}} is called.\n+ * @param <S>\n+ *            Intermediate return type for this builder returned by calls to {@link #with(String, Object)}. If {@link S}\n+ *            the same as {@link R}, this builder will commit changes after each call to {@link #with(String, Object)}.\n+ */\n+abstract class AbstractBuilder<R, S> {\n+\n+    @Nonnull\n+    private final Class<R> returnType;\n+\n+    @Nonnull\n+    private final Class<S> intermediateReturnType;\n+\n+    private final boolean commitChangesImmediately;\n+\n+    @CheckForNull\n+    private final R baseInstance;\n+\n+    @Nonnull\n+    protected final Requester requester;\n+\n+    // TODO: Not sure how update-in-place behavior should be controlled, but\n+    // it certainly can be controlled dynamically down to the instance level or inherited for all children of some\n+    // connection.\n+    protected boolean updateInPlace;\n+\n+    /**\n+     * Creates a builder.\n+     *\n+     * @param root\n+     *            the GitHub instance to connect to.\n+     * @param intermediateReturnType\n+     *            the intermediate return type returned by calls to {@link #with(String, Object)}. Must either be equal\n+     *            to {@code builtReturnType} or this instance must be castable to this class. If not, the constructor\n+     *            {@link IllegalArgumentException}\n+     * @param builtReturnType\n+     *            the final return type for built by this builder returned when {@link #done()}} is called.\n+     * @param baseInstance\n+     *            optional instance on which to base this builder.\n+     */\n+    protected AbstractBuilder(@Nonnull GitHub root,\n+            @Nonnull Class<S> intermediateReturnType,\n+            @Nonnull Class<R> builtReturnType,\n+            @CheckForNull R baseInstance) {\n+        this.requester = root.createRequest();\n+        this.returnType = builtReturnType;\n+        this.intermediateReturnType = intermediateReturnType;\n+        this.commitChangesImmediately = returnType.equals(intermediateReturnType);\n+        if (!commitChangesImmediately && intermediateReturnType.isInstance(this)) {\n+            throw new IllegalArgumentException(\n+                    \"Argument \\\"intermediateReturnType\\\": This instance must be castable to intermediateReturnType or intermediateReturnType must be equal to builtReturnType.\");\n+        }\n+\n+        this.baseInstance = baseInstance;\n+        this.updateInPlace = false;\n+\n+    }\n+\n+    /**\n+     * Finishes an update, committing changes.\n+     *\n+     * This method may update-in-place or not. Either way it returns the resulting instance.\n+     *\n+     * @return an instance with updated current data\n+     * @throws IOException\n+     *             if there is an I/O Exception\n+     */\n+    @Nonnull\n+    public R done() throws IOException {", "originalCommit": "d1205ff97144bd929364f834a380214da3a430d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ3MTE4Mw==", "url": "https://github.com/hub4j/github-api/pull/724#discussion_r387471183", "bodyText": "BulkChange in core uses commit and abort. abort is not needed. Maybe send is a good choice. or call?", "author": "res0nance", "createdAt": "2020-03-04T06:31:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2NzA3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ3NTUwNg==", "url": "https://github.com/hub4j/github-api/pull/724#discussion_r387475506", "bodyText": "The two places this will get used look something like this:\nGHLabel label = GHLabel.create().name(name).color(color).description(description).xxxx();\nlabel.update().color(color2).description(description2).xxxx();\nsend() could work.  call not as much. I'd just like to make sure we've considered alternatives before releasing this.", "author": "bitwiseman", "createdAt": "2020-03-04T06:47:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2NzA3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkzMzE0OQ==", "url": "https://github.com/hub4j/github-api/pull/724#discussion_r393933149", "bodyText": "Okay, well, this api is internal, so changing it later is not a breaking API change.  I'll go with the current verbs for now and we can change them later if needed.", "author": "bitwiseman", "createdAt": "2020-03-17T19:56:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2NzA3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIzNjcwOA==", "url": "https://github.com/hub4j/github-api/pull/724#discussion_r395236708", "bodyText": "Hm, doh, no, what was I thinking this is public.  Ah, but I can use the same structure we already have for API Previews and ship this now.  \ud83d\ude04There we go.", "author": "bitwiseman", "createdAt": "2020-03-19T18:30:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2NzA3OQ=="}], "type": "inlineReview"}, {"oid": "a92c2e687f44c1b46e115f69e4f0a654a37a87e5", "url": "https://github.com/hub4j/github-api/commit/a92c2e687f44c1b46e115f69e4f0a654a37a87e5", "message": "Clarify behavior", "committedDate": "2020-03-04T06:26:18Z", "type": "forcePushed"}, {"oid": "54914c86d45a7c04fc11c7e9b8d25b6c6eceff4b", "url": "https://github.com/hub4j/github-api/commit/54914c86d45a7c04fc11c7e9b8d25b6c6eceff4b", "message": "Clarify behavior", "committedDate": "2020-03-04T06:27:04Z", "type": "forcePushed"}, {"oid": "0b46ce05df7e274fe52f284208a29c6fcbaf4b94", "url": "https://github.com/hub4j/github-api/commit/0b46ce05df7e274fe52f284208a29c6fcbaf4b94", "message": "Clarify behavior", "committedDate": "2020-03-04T08:30:47Z", "type": "forcePushed"}, {"oid": "208ffac5ddf2d320c79f5c42d5636fe786691413", "url": "https://github.com/hub4j/github-api/commit/208ffac5ddf2d320c79f5c42d5636fe786691413", "message": "Remove Repository member from GHLabel\n\nIt turns out GHLabel instances do not need a reference to their repo, just to root.", "committedDate": "2020-03-04T21:38:37Z", "type": "forcePushed"}, {"oid": "fb50ade0bd733f94d485502e4be751c7c6ca376e", "url": "https://github.com/hub4j/github-api/commit/fb50ade0bd733f94d485502e4be751c7c6ca376e", "message": "Re-record test for GHLabel", "committedDate": "2020-03-23T22:38:50Z", "type": "forcePushed"}, {"oid": "2607d6a107b90360c6e782f10b399815e4921bc7", "url": "https://github.com/hub4j/github-api/commit/2607d6a107b90360c6e782f10b399815e4921bc7", "message": "Make GHLabel example of proposed API design", "committedDate": "2020-03-24T00:40:01Z", "type": "commit"}, {"oid": "b7de4359fd8ed47ecdeb8cc28378b081e7daa4e8", "url": "https://github.com/hub4j/github-api/commit/b7de4359fd8ed47ecdeb8cc28378b081e7daa4e8", "message": "Alternative proposal\n\nThe guts of this version are a bit ugly but they result reasonable API code without a ton of extra\ncode needed.", "committedDate": "2020-03-24T00:40:01Z", "type": "commit"}, {"oid": "0cb237151777ce8aaa10838a959cdbadc2cbcd84", "url": "https://github.com/hub4j/github-api/commit/0cb237151777ce8aaa10838a959cdbadc2cbcd84", "message": "Third alternative proposal\n\nThis removes the  from the fields.  Functionally the behavior is unchanged but\nit is no longer guaranteed at compile time.  This simplifies streamlines the code slightly,\nbut at the cost of only being able to assert immutability rather than know it.\n\nHowever, as we move to using this structure through more of the library, this is may be a better choice.\nThere are so many places where the GitHub API itself returns partial records or updates them dynamically.\nTrying to claim immutability where it doesn't exist is not great either.", "committedDate": "2020-03-24T00:40:01Z", "type": "commit"}, {"oid": "134222fd692f3b1f731b2f42d08ea1fc71354986", "url": "https://github.com/hub4j/github-api/commit/134222fd692f3b1f731b2f42d08ea1fc71354986", "message": "Minor cleanups", "committedDate": "2020-03-24T00:40:01Z", "type": "commit"}, {"oid": "98ef2cc640022464759bffa90971ff16dff9eb16", "url": "https://github.com/hub4j/github-api/commit/98ef2cc640022464759bffa90971ff16dff9eb16", "message": "Update-in-place and safer single or batch calculation", "committedDate": "2020-03-24T00:40:01Z", "type": "commit"}, {"oid": "f37e4bd76e4378b5f7e905813e0195bf2dea0393", "url": "https://github.com/hub4j/github-api/commit/f37e4bd76e4378b5f7e905813e0195bf2dea0393", "message": "Private fields", "committedDate": "2020-03-24T00:40:01Z", "type": "commit"}, {"oid": "64a82f478542ed641d585403c304cd9b1b88e63d", "url": "https://github.com/hub4j/github-api/commit/64a82f478542ed641d585403c304cd9b1b88e63d", "message": "Clean up proposed API changes", "committedDate": "2020-03-24T00:40:01Z", "type": "commit"}, {"oid": "9f1d7323c7f14b670d6881ca2a1dede9f9718e14", "url": "https://github.com/hub4j/github-api/commit/9f1d7323c7f14b670d6881ca2a1dede9f9718e14", "message": "Reverted getter changes to highlight the more important set/update changes", "committedDate": "2020-03-24T00:40:01Z", "type": "commit"}, {"oid": "79a1bb3571cadc74ddaf42a93a6d7f3df1c1cffc", "url": "https://github.com/hub4j/github-api/commit/79a1bb3571cadc74ddaf42a93a6d7f3df1c1cffc", "message": "Update src/test/java/org/kohsuke/github/AppTest.java", "committedDate": "2020-03-24T00:40:01Z", "type": "commit"}, {"oid": "863ad0f48691a8a42a9c425c29624e11cc66c042", "url": "https://github.com/hub4j/github-api/commit/863ad0f48691a8a42a9c425c29624e11cc66c042", "message": "Clarify behavior", "committedDate": "2020-03-24T00:40:01Z", "type": "commit"}, {"oid": "09ec89bc2e060d9addac48d51746d01b693211f9", "url": "https://github.com/hub4j/github-api/commit/09ec89bc2e060d9addac48d51746d01b693211f9", "message": "Remove Repository member from GHLabel\n\nIt turns out GHLabel instances do not need a reference to their repo, just to root.", "committedDate": "2020-03-24T00:40:01Z", "type": "commit"}, {"oid": "fcb8d03a0f923e594d39ffd7c9a69919612bc297", "url": "https://github.com/hub4j/github-api/commit/fcb8d03a0f923e594d39ffd7c9a69919612bc297", "message": "Ensure that Description is part of GHLabel comparision", "committedDate": "2020-03-24T00:40:01Z", "type": "commit"}, {"oid": "b8180314d89fb1ccc9082f74f20b48313cf27be9", "url": "https://github.com/hub4j/github-api/commit/b8180314d89fb1ccc9082f74f20b48313cf27be9", "message": "Change to Preview for new builder pattern", "committedDate": "2020-03-24T00:40:01Z", "type": "commit"}, {"oid": "b15e0d4c458bd55bcfe26b4c99b71fd55676ad85", "url": "https://github.com/hub4j/github-api/commit/b15e0d4c458bd55bcfe26b4c99b71fd55676ad85", "message": "Cleanup and tweaks", "committedDate": "2020-03-24T00:40:01Z", "type": "commit"}, {"oid": "2ab4eafee938d1113f34bddb158a11ec0992b532", "url": "https://github.com/hub4j/github-api/commit/2ab4eafee938d1113f34bddb158a11ec0992b532", "message": "Tweaks and cleanup", "committedDate": "2020-03-24T00:40:01Z", "type": "commit"}, {"oid": "0625940c7d8f46dc362e698f6f3bff036390cc4e", "url": "https://github.com/hub4j/github-api/commit/0625940c7d8f46dc362e698f6f3bff036390cc4e", "message": "Re-record test for GHLabel", "committedDate": "2020-03-24T00:40:01Z", "type": "forcePushed"}, {"oid": "2df06735029ca7e6e2b14e7e2de036ca1c7c73ce", "url": "https://github.com/hub4j/github-api/commit/2df06735029ca7e6e2b14e7e2de036ca1c7c73ce", "message": "Re-record test for GHLabel", "committedDate": "2020-03-24T00:45:59Z", "type": "forcePushed"}, {"oid": "29019d4620676dd4d54b886ed532c6f5dcb812fb", "url": "https://github.com/hub4j/github-api/commit/29019d4620676dd4d54b886ed532c6f5dcb812fb", "message": "Re-record test for GHLabel", "committedDate": "2020-03-24T16:38:12Z", "type": "forcePushed"}, {"oid": "b823d688e2832b4dcd44bfcb837f904547118ca0", "url": "https://github.com/hub4j/github-api/commit/b823d688e2832b4dcd44bfcb837f904547118ca0", "message": "Re-record test for GHLabel", "committedDate": "2020-03-24T18:10:53Z", "type": "forcePushed"}, {"oid": "772272ff36f48424c99115970b481a33f5c49ae0", "url": "https://github.com/hub4j/github-api/commit/772272ff36f48424c99115970b481a33f5c49ae0", "message": "Re-record test for GHLabel", "committedDate": "2020-03-24T19:32:13Z", "type": "commit"}, {"oid": "772272ff36f48424c99115970b481a33f5c49ae0", "url": "https://github.com/hub4j/github-api/commit/772272ff36f48424c99115970b481a33f5c49ae0", "message": "Re-record test for GHLabel", "committedDate": "2020-03-24T19:32:13Z", "type": "forcePushed"}]}