{"pr_number": 694, "pr_title": "Streamline fetch and retry process", "pr_createdAt": "2020-02-06T16:13:33Z", "pr_url": "https://github.com/hub4j/github-api/pull/694", "timeline": [{"oid": "b8fae1308d67e971776afa22333e4c9b0217c43f", "url": "https://github.com/hub4j/github-api/commit/b8fae1308d67e971776afa22333e4c9b0217c43f", "message": "Streamline fetch and retry process", "committedDate": "2020-02-06T16:01:17Z", "type": "commit"}, {"oid": "1234c2e99e8265e87cc22eab6476e4f1fc77f2d1", "url": "https://github.com/hub4j/github-api/commit/1234c2e99e8265e87cc22eab6476e4f1fc77f2d1", "message": "Add tests for rate limit", "committedDate": "2020-02-06T21:33:29Z", "type": "commit"}, {"oid": "1234c2e99e8265e87cc22eab6476e4f1fc77f2d1", "url": "https://github.com/hub4j/github-api/commit/1234c2e99e8265e87cc22eab6476e4f1fc77f2d1", "message": "Add tests for rate limit", "committedDate": "2020-02-06T21:33:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5NzU0NA==", "url": "https://github.com/hub4j/github-api/pull/694#discussion_r376097544", "bodyText": "It is better to view this in split diff view.  Two methods got squashed down and blended.", "author": "bitwiseman", "createdAt": "2020-02-06T21:41:11Z", "path": "src/main/java/org/kohsuke/github/Requester.java", "diffHunk": "@@ -497,73 +497,81 @@ public InputStream fetchStream() throws IOException {\n     }\n \n     private <T> T _fetch(String tailApiUrl, URL url, SupplierThrows<T, IOException> supplier) throws IOException {\n-        while (true) {// loop while API rate limit is hit\n+        int responseCode = -1;\n+        String responseMessage = null;\n+", "originalCommit": "1234c2e99e8265e87cc22eab6476e4f1fc77f2d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5ODAyMw==", "url": "https://github.com/hub4j/github-api/pull/694#discussion_r376098023", "bodyText": "This ensures that on retry we don't somehow accidentally use the connection from the previous loop.", "author": "bitwiseman", "createdAt": "2020-02-06T21:42:18Z", "path": "src/main/java/org/kohsuke/github/Requester.java", "diffHunk": "@@ -497,73 +497,81 @@ public InputStream fetchStream() throws IOException {\n     }\n \n     private <T> T _fetch(String tailApiUrl, URL url, SupplierThrows<T, IOException> supplier) throws IOException {\n-        while (true) {// loop while API rate limit is hit\n+        int responseCode = -1;\n+        String responseMessage = null;\n+\n+        int retries = CONNECTION_ERROR_RETRIES;\n+\n+        do {\n+            // if we fail to create a connection we do not retry and we do not wrap\n+            uc = null;", "originalCommit": "1234c2e99e8265e87cc22eab6476e4f1fc77f2d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEwMDU4Mw==", "url": "https://github.com/hub4j/github-api/pull/694#discussion_r376100583", "bodyText": "We note the rate limit change as soon as we have confidence that we have enough information to do so.\nBetter for race conditions.", "author": "bitwiseman", "createdAt": "2020-02-06T21:47:55Z", "path": "src/main/java/org/kohsuke/github/Requester.java", "diffHunk": "@@ -497,73 +497,81 @@ public InputStream fetchStream() throws IOException {\n     }\n \n     private <T> T _fetch(String tailApiUrl, URL url, SupplierThrows<T, IOException> supplier) throws IOException {\n-        while (true) {// loop while API rate limit is hit\n+        int responseCode = -1;\n+        String responseMessage = null;\n+\n+        int retries = CONNECTION_ERROR_RETRIES;\n+\n+        do {\n+            // if we fail to create a connection we do not retry and we do not wrap\n+            uc = null;\n             uc = setupConnection(url);\n \n             try {\n-                return _fetchOrRetry(supplier, CONNECTION_ERROR_RETRIES);\n-            } catch (IOException e) {\n-                handleApiError(e);\n-            } finally {\n+                // This is where the request is sent and response is processing starts\n+                responseCode = uc.getResponseCode();\n+                responseMessage = uc.getResponseMessage();\n                 noteRateLimit(tailApiUrl);", "originalCommit": "1234c2e99e8265e87cc22eab6476e4f1fc77f2d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "825c36c15eb427fb2fd4366e95da0111722bc6da", "url": "https://github.com/hub4j/github-api/commit/825c36c15eb427fb2fd4366e95da0111722bc6da", "message": "Tweaks for clarity", "committedDate": "2020-02-06T22:11:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExMTM3NA==", "url": "https://github.com/hub4j/github-api/pull/694#discussion_r376111374", "bodyText": "If we have an error condition that we can detect early, skip calling the lambda.", "author": "bitwiseman", "createdAt": "2020-02-06T22:11:59Z", "path": "src/main/java/org/kohsuke/github/Requester.java", "diffHunk": "@@ -497,73 +497,89 @@ public InputStream fetchStream() throws IOException {\n     }\n \n     private <T> T _fetch(String tailApiUrl, URL url, SupplierThrows<T, IOException> supplier) throws IOException {\n-        while (true) {// loop while API rate limit is hit\n+        int responseCode = -1;\n+        String responseMessage = null;\n+\n+        int retries = CONNECTION_ERROR_RETRIES;\n+\n+        do {\n+            // if we fail to create a connection we do not retry and we do not wrap\n+            uc = null;\n             uc = setupConnection(url);\n \n             try {\n-                return _fetchOrRetry(supplier, CONNECTION_ERROR_RETRIES);\n-            } catch (IOException e) {\n-                handleApiError(e);\n-            } finally {\n+                // This is where the request is sent and response is processing starts\n+                responseCode = uc.getResponseCode();\n+                responseMessage = uc.getResponseMessage();\n                 noteRateLimit(tailApiUrl);\n+\n+                // for this workaround, we can retry now\n+                if (isInvalidCached404Response(responseCode)) {\n+                    continue;\n+                }\n+                if (!(isRateLimitResponse(responseCode) || isAbuseLimitResponse(responseCode))) {", "originalCommit": "825c36c15eb427fb2fd4366e95da0111722bc6da", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExMjA4OA==", "url": "https://github.com/hub4j/github-api/pull/694#discussion_r376112088", "bodyText": "If the error is not transient, process it if needed and throw.", "author": "bitwiseman", "createdAt": "2020-02-06T22:13:41Z", "path": "src/main/java/org/kohsuke/github/Requester.java", "diffHunk": "@@ -497,73 +497,89 @@ public InputStream fetchStream() throws IOException {\n     }\n \n     private <T> T _fetch(String tailApiUrl, URL url, SupplierThrows<T, IOException> supplier) throws IOException {\n-        while (true) {// loop while API rate limit is hit\n+        int responseCode = -1;\n+        String responseMessage = null;\n+\n+        int retries = CONNECTION_ERROR_RETRIES;\n+\n+        do {\n+            // if we fail to create a connection we do not retry and we do not wrap\n+            uc = null;\n             uc = setupConnection(url);\n \n             try {\n-                return _fetchOrRetry(supplier, CONNECTION_ERROR_RETRIES);\n-            } catch (IOException e) {\n-                handleApiError(e);\n-            } finally {\n+                // This is where the request is sent and response is processing starts\n+                responseCode = uc.getResponseCode();\n+                responseMessage = uc.getResponseMessage();\n                 noteRateLimit(tailApiUrl);\n+\n+                // for this workaround, we can retry now\n+                if (isInvalidCached404Response(responseCode)) {\n+                    continue;\n+                }\n+                if (!(isRateLimitResponse(responseCode) || isAbuseLimitResponse(responseCode))) {\n+                    return supplier.get();\n+                }\n+            } catch (IOException e) {\n+                // For transient errors, retry\n+                if (handledTransientConnectionError(e, url, retries)) {\n+                    continue;\n+                }\n+\n+                throw interpretApiError(e, responseCode, responseMessage, url, retries);", "originalCommit": "825c36c15eb427fb2fd4366e95da0111722bc6da", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExNDA5Ng==", "url": "https://github.com/hub4j/github-api/pull/694#discussion_r376114096", "bodyText": "This case is handled in the main _fetch method now.  We pass in the best known values and don't have to guard against bad state here.", "author": "bitwiseman", "createdAt": "2020-02-06T22:18:49Z", "path": "src/main/java/org/kohsuke/github/Requester.java", "diffHunk": "@@ -1023,57 +1039,36 @@ private InputStream wrapStream(InputStream in) throws IOException {\n     /**\n      * Handle API error by either throwing it or by returning normally to retry.\n      */\n-    void handleApiError(IOException e) throws IOException {\n-        int responseCode;\n-        try {", "originalCommit": "825c36c15eb427fb2fd4366e95da0111722bc6da", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2NTIzOA==", "url": "https://github.com/hub4j/github-api/pull/694#discussion_r376165238", "bodyText": "All of these were move from handleApiError.", "author": "bitwiseman", "createdAt": "2020-02-07T00:58:09Z", "path": "src/main/java/org/kohsuke/github/Requester.java", "diffHunk": "@@ -497,73 +497,101 @@ public InputStream fetchStream() throws IOException {\n     }\n \n     private <T> T _fetch(String tailApiUrl, URL url, SupplierThrows<T, IOException> supplier) throws IOException {\n-        while (true) {// loop while API rate limit is hit\n+        int responseCode = -1;\n+        String responseMessage = null;\n+\n+        int retries = CONNECTION_ERROR_RETRIES;\n+\n+        do {\n+            // if we fail to create a connection we do not retry and we do not wrap\n+            uc = null;\n             uc = setupConnection(url);\n \n             try {\n-                return _fetchOrRetry(supplier, CONNECTION_ERROR_RETRIES);\n-            } catch (IOException e) {\n-                handleApiError(e);\n-            } finally {\n+                // This is where the request is sent and response is processing starts\n+                responseCode = uc.getResponseCode();\n+                responseMessage = uc.getResponseMessage();\n                 noteRateLimit(tailApiUrl);\n+                detectOTPRequired(responseCode);\n+\n+                // for this workaround, we can retry now\n+                if (isInvalidCached404Response(responseCode)) {\n+                    continue;\n+                }\n+                if (!(isRateLimitResponse(responseCode) || isAbuseLimitResponse(responseCode))) {\n+                    return supplier.get();\n+                }\n+            } catch (IOException e) {\n+                // For transient errors, retry\n+                if (handledTransientConnectionError(e, url, retries)) {\n+                    continue;\n+                }\n+\n+                throw interpretApiError(e, responseCode, responseMessage, url, retries);\n             }\n-        }\n-    }\n \n-    private <T> T _fetchOrRetry(SupplierThrows<T, IOException> supplier, int retries) throws IOException {\n-        int responseCode = -1;\n-        String responseMessage = null;\n-        // When retries equal 0 the previous call must return or throw, not retry again\n-        if (retries < 0) {\n-            throw new IllegalArgumentException(\"'retries' cannot be less than 0\");\n-        }\n+            handleLimitingErrors(responseCode);\n \n-        try {\n-            // This is where the request is sent and response is processing starts\n-            responseCode = uc.getResponseCode();\n-            responseMessage = uc.getResponseMessage();\n+        } while (--retries >= 0);\n \n-            // If we are caching and get an invalid cached 404, retry it.\n-            if (!retryInvalidCached404Response(responseCode, retries)) {\n-                return supplier.get();\n-            }\n-        } catch (FileNotFoundException e) {\n-            // java.net.URLConnection handles 404 exception as FileNotFoundException,\n-            // don't wrap exception in HttpException to preserve backward compatibility\n-            throw e;\n-        } catch (IOException e) {\n+        throw new GHIOException(\"Ran out of retries for URL: \" + url.toString());\n+    }\n \n-            if (!retryConnectionError(e, retries)) {\n-                throw new HttpException(responseCode, responseMessage, uc.getURL(), e);\n+    private void detectOTPRequired(int responseCode) throws GHIOException {", "originalCommit": "a0fb8d3730135aacafe20d102983698567b2786a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "289282e235997bfe24ac07bd8d77d071561450f6", "url": "https://github.com/hub4j/github-api/commit/289282e235997bfe24ac07bd8d77d071561450f6", "message": "Move OTP detection earlier\n\nLike other errors we've been waiting until later to catch, this one is detectable so\nwhe should do that before the downstream exception needs to be thrown.", "committedDate": "2020-02-07T00:59:49Z", "type": "commit"}, {"oid": "289282e235997bfe24ac07bd8d77d071561450f6", "url": "https://github.com/hub4j/github-api/commit/289282e235997bfe24ac07bd8d77d071561450f6", "message": "Move OTP detection earlier\n\nLike other errors we've been waiting until later to catch, this one is detectable so\nwhe should do that before the downstream exception needs to be thrown.", "committedDate": "2020-02-07T00:59:49Z", "type": "forcePushed"}]}