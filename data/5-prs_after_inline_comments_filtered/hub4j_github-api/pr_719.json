{"pr_number": 719, "pr_title": "Remove a few long deprecated methods and fully annotate others", "pr_createdAt": "2020-02-26T04:32:33Z", "pr_url": "https://github.com/hub4j/github-api/pull/719", "timeline": [{"oid": "1b63a58e631e69a4f4691be3e2e9305c67817c12", "url": "https://github.com/hub4j/github-api/commit/1b63a58e631e69a4f4691be3e2e9305c67817c12", "message": "Increase coverage", "committedDate": "2020-02-27T17:38:24Z", "type": "commit"}, {"oid": "fe4f45c2b05d503afda64fb717514f02950b9ac6", "url": "https://github.com/hub4j/github-api/commit/fe4f45c2b05d503afda64fb717514f02950b9ac6", "message": "Remove DeleteToken class the was never in github v3 api", "committedDate": "2020-02-27T17:38:50Z", "type": "commit"}, {"oid": "0155d5aa39103f6e290aa4f44271be878c44dc61", "url": "https://github.com/hub4j/github-api/commit/0155d5aa39103f6e290aa4f44271be878c44dc61", "message": "Make HttpConnector a functional interface", "committedDate": "2020-02-27T17:39:03Z", "type": "commit"}, {"oid": "944d92bbb408dc7be91fcbe539a21762c6e0491a", "url": "https://github.com/hub4j/github-api/commit/944d92bbb408dc7be91fcbe539a21762c6e0491a", "message": "Make more methods as deprecated", "committedDate": "2020-02-27T17:40:03Z", "type": "commit"}, {"oid": "5e5708d8d4db9c08e1e02b6c4310437b07bc7bff", "url": "https://github.com/hub4j/github-api/commit/5e5708d8d4db9c08e1e02b6c4310437b07bc7bff", "message": "Clean up GHPerson deprecated a bit more", "committedDate": "2020-02-27T18:16:48Z", "type": "commit"}, {"oid": "5e5708d8d4db9c08e1e02b6c4310437b07bc7bff", "url": "https://github.com/hub4j/github-api/commit/5e5708d8d4db9c08e1e02b6c4310437b07bc7bff", "message": "Clean up GHPerson deprecated a bit more", "committedDate": "2020-02-27T18:16:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQwNDg4OQ==", "url": "https://github.com/hub4j/github-api/pull/719#discussion_r385404889", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // for backward compatibility with < 1.63, this collection needs to hold instances of Label, not GHLabel", "author": "bitwiseman", "createdAt": "2020-02-27T22:19:57Z", "path": "src/main/java/org/kohsuke/github/GHIssue.java", "diffHunk": "@@ -64,22 +64,14 @@\n     @SkipFromToString\n     protected String body;\n     // for backward compatibility with < 1.63, this collection needs to hold instances of Label, not GHLabel", "originalCommit": "5e5708d8d4db9c08e1e02b6c4310437b07bc7bff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "56a51f18e7d73a7149aabac840008182c5d475a0", "url": "https://github.com/hub4j/github-api/commit/56a51f18e7d73a7149aabac840008182c5d475a0", "message": "Update src/main/java/org/kohsuke/github/GHIssue.java", "committedDate": "2020-02-27T22:20:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQwNTM5MQ==", "url": "https://github.com/hub4j/github-api/pull/719#discussion_r385405391", "bodyText": "v1.63 is 5 years ago.", "author": "bitwiseman", "createdAt": "2020-02-27T22:21:04Z", "path": "src/main/java/org/kohsuke/github/GHIssue.java", "diffHunk": "@@ -63,23 +63,14 @@\n     protected int comments;\n     @SkipFromToString\n     protected String body;\n-    // for backward compatibility with < 1.63, this collection needs to hold instances of Label, not GHLabel", "originalCommit": "56a51f18e7d73a7149aabac840008182c5d475a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQwNTc0MQ==", "url": "https://github.com/hub4j/github-api/pull/719#discussion_r385405741", "bodyText": "This is publicly visible, but not returned from any properties.  It exists in one spot (above).", "author": "bitwiseman", "createdAt": "2020-02-27T22:21:57Z", "path": "src/main/java/org/kohsuke/github/GHIssue.java", "diffHunk": "@@ -63,23 +63,14 @@\n     protected int comments;\n     @SkipFromToString\n     protected String body;\n-    // for backward compatibility with < 1.63, this collection needs to hold instances of Label, not GHLabel\n-    protected List<Label> labels;\n+    protected List<GHLabel> labels;\n     protected GHUser user;\n     protected String title, html_url;\n     protected GHIssue.PullRequest pull_request;\n     protected GHMilestone milestone;\n     protected GHUser closed_by;\n     protected boolean locked;\n \n-    /**\n-     * The type Label.\n-     *\n-     * @deprecated use {@link GHLabel}\n-     */\n-    public static class Label extends GHLabel {", "originalCommit": "56a51f18e7d73a7149aabac840008182c5d475a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQwNTk3NA==", "url": "https://github.com/hub4j/github-api/pull/719#discussion_r385405974", "bodyText": "Clean up to use even more of the existing code base.  Still behaves the same.", "author": "bitwiseman", "createdAt": "2020-02-27T22:22:31Z", "path": "src/main/java/org/kohsuke/github/GHPerson.java", "diffHunk": "@@ -115,31 +114,27 @@ protected synchronized void populate() throws IOException {\n      */\n     @Deprecated\n     public synchronized Iterable<List<GHRepository>> iterateRepositories(final int pageSize) {\n-        return new Iterable<List<GHRepository>>() {\n-            public Iterator<List<GHRepository>> iterator() {\n-                final Iterator<GHRepository[]> pager;\n-                try {\n-                    pager = GitHubPageIterator.create(root.getClient(),\n-                            GHRepository[].class,\n-                            root.createRequest().withUrlPath(\"users\", login, \"repos\").build(),\n-                            pageSize);\n-                } catch (MalformedURLException e) {\n-                    throw new GHException(\"Unable to build GitHub API URL\", e);\n+        return () -> {", "originalCommit": "56a51f18e7d73a7149aabac840008182c5d475a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQwNjE1OQ==", "url": "https://github.com/hub4j/github-api/pull/719#discussion_r385406159", "bodyText": "This always returns \"\" anyway.  So, let's be explicit about it.", "author": "bitwiseman", "createdAt": "2020-02-27T22:22:58Z", "path": "src/main/java/org/kohsuke/github/GHPerson.java", "diffHunk": "@@ -178,22 +173,18 @@ public GHRepository getRepository(String name) throws IOException {\n      * @return the gravatar id\n      * @deprecated No longer available in the v3 API.\n      */\n+    @Deprecated\n     public String getGravatarId() {\n-        return gravatar_id;\n+        return \"\";", "originalCommit": "56a51f18e7d73a7149aabac840008182c5d475a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQwNjU3Nw==", "url": "https://github.com/hub4j/github-api/pull/719#discussion_r385406577", "bodyText": "If this is null, it is still more meaningful that the \"\" returned from gravatar.", "author": "bitwiseman", "createdAt": "2020-02-27T22:23:58Z", "path": "src/main/java/org/kohsuke/github/GHPerson.java", "diffHunk": "@@ -178,22 +173,18 @@ public GHRepository getRepository(String name) throws IOException {\n      * @return the gravatar id\n      * @deprecated No longer available in the v3 API.\n      */\n+    @Deprecated\n     public String getGravatarId() {\n-        return gravatar_id;\n+        return \"\";\n     }\n \n     /**\n-     * Returns a string like 'https://secure.gravatar.com/avatar/0cb9832a01c22c083390f3c5dcb64105' that indicates the\n-     * avatar image URL.\n+     * Returns a string of the avatar image URL.\n      *\n      * @return the avatar url\n      */\n     public String getAvatarUrl() {\n-        if (avatar_url != null)", "originalCommit": "56a51f18e7d73a7149aabac840008182c5d475a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQwNjk0OQ==", "url": "https://github.com/hub4j/github-api/pull/719#discussion_r385406949", "bodyText": "Found a way to do this without dynamic classes.", "author": "bitwiseman", "createdAt": "2020-02-27T22:24:52Z", "path": "src/main/java/org/kohsuke/github/GitHubBuilder.java", "diffHunk": "@@ -396,11 +398,7 @@ public GitHubBuilder withRateLimitChecker(@Nonnull RateLimitChecker coreRateLimi\n      * @return the git hub builder\n      */\n     public GitHubBuilder withProxy(final Proxy p) {\n-        return withConnector(new ImpatientHttpConnector(new HttpConnector() {\n-            public HttpURLConnection connect(URL url) throws IOException {\n-                return (HttpURLConnection) url.openConnection(p);\n-            }\n-        }));\n+        return withConnector(new ImpatientHttpConnector(url -> (HttpURLConnection) url.openConnection(p)));", "originalCommit": "56a51f18e7d73a7149aabac840008182c5d475a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ba8d2a251fa78c1b28988c281e00c708c00652ed", "url": "https://github.com/hub4j/github-api/commit/ba8d2a251fa78c1b28988c281e00c708c00652ed", "message": "Merge branch 'master' into task/deprecated", "committedDate": "2020-02-28T16:37:51Z", "type": "commit"}, {"oid": "5b575134fccd19c6ead3225b18489b67b383afdb", "url": "https://github.com/hub4j/github-api/commit/5b575134fccd19c6ead3225b18489b67b383afdb", "message": "Merge branch 'master' into task/deprecated", "committedDate": "2020-02-28T22:38:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2OTczNA==", "url": "https://github.com/hub4j/github-api/pull/719#discussion_r386469734", "bodyText": "Are these commented out intentionally?", "author": "kshultzCB", "createdAt": "2020-03-02T15:41:11Z", "path": "src/test/java/org/kohsuke/github/AppTest.java", "diffHunk": "@@ -861,10 +862,27 @@ public void notifications() throws Exception {\n         for (GHThread t : gitHub.listNotifications().nonBlocking(true).read(true)) {\n             if (!found) {\n                 found = true;\n+                // both thread an unread are included\n+                assertThat(t.getTitle(), is(\"Create a Jenkinsfile for Librecores CI in mor1kx\"));\n+                assertThat(t.getLastReadAt(), notNullValue());\n+                assertThat(t.isRead(), equalTo(true));\n+\n                 t.markAsRead(); // test this by calling it once on old notfication\n             }\n-            assertNotNull(t.getTitle());\n-            assertNotNull(t.getReason());\n+            assertThat(t.getReason(), oneOf(\"subscribed\", \"mention\", \"review_requested\", \"comment\"));\n+            assertThat(t.getTitle(), notNullValue());\n+            assertThat(t.getLastCommentUrl(), notNullValue());\n+            assertThat(t.getRepository(), notNullValue());\n+            assertThat(t.getUpdatedAt(), notNullValue());\n+            assertThat(t.getType(), oneOf(\"Issue\", \"PullRequest\"));\n+\n+            // both thread an unread are included\n+            // assertThat(t.getLastReadAt(), notNullValue());\n+            // assertThat(t.isRead(), equalTo(true));", "originalCommit": "56a51f18e7d73a7149aabac840008182c5d475a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUxMjQ4OQ==", "url": "https://github.com/hub4j/github-api/pull/719#discussion_r386512489", "bodyText": "Yes, I meant this as a note to say, \"This query doesn't return only records where isRead() is true.\"", "author": "bitwiseman", "createdAt": "2020-03-02T16:45:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2OTczNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3Nzg2OA==", "url": "https://github.com/hub4j/github-api/pull/719#discussion_r386477868", "bodyText": "It took me a few eye blinks to see this \ud83d\udcaf", "author": "kshultzCB", "createdAt": "2020-03-02T15:52:48Z", "path": "src/main/java/org/kohsuke/github/GHRepository.java", "diffHunk": "@@ -217,16 +219,6 @@ public String getHttpTransportUrl() {\n         return clone_url;\n     }\n \n-    /**\n-     * Git http transport url string.\n-     *\n-     * @return the string\n-     * @deprecated Typo of {@link #getHttpTransportUrl()}\n-     */\n-    public String gitHttpTransportUrl() {", "originalCommit": "56a51f18e7d73a7149aabac840008182c5d475a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4MDc1Ng==", "url": "https://github.com/hub4j/github-api/pull/719#discussion_r386480756", "bodyText": "I think this is a typo. It shows up again on 879. Probably meant to be this?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            // both thread an unread are included\n          \n          \n            \n                            // both read and unread are included", "author": "kshultzCB", "createdAt": "2020-03-02T15:56:36Z", "path": "src/test/java/org/kohsuke/github/AppTest.java", "diffHunk": "@@ -861,10 +862,27 @@ public void notifications() throws Exception {\n         for (GHThread t : gitHub.listNotifications().nonBlocking(true).read(true)) {\n             if (!found) {\n                 found = true;\n+                // both thread an unread are included", "originalCommit": "56a51f18e7d73a7149aabac840008182c5d475a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "75d95d844c6e787fe834393e07c2ca636ce3cea5", "url": "https://github.com/hub4j/github-api/commit/75d95d844c6e787fe834393e07c2ca636ce3cea5", "message": "Update src/test/java/org/kohsuke/github/AppTest.java\n\nCo-Authored-By: Karl Shultz <kshultz@cloudbees.com>", "committedDate": "2020-03-02T16:41:21Z", "type": "commit"}]}