{"pr_number": 1831, "pr_title": "Add platform logging", "pr_createdAt": "2020-07-29T18:05:17Z", "pr_url": "https://github.com/firebase/firebase-android-sdk/pull/1831", "timeline": [{"oid": "b78b4edfa1b455ac4779c6402e10a092cc5c103d", "url": "https://github.com/firebase/firebase-android-sdk/commit/b78b4edfa1b455ac4779c6402e10a092cc5c103d", "message": "heart beat info storage", "committedDate": "2020-07-27T17:55:16Z", "type": "commit"}, {"oid": "8f6e2d94627a4e95c8b611ab1a3c2d705c7e2776", "url": "https://github.com/firebase/firebase-android-sdk/commit/8f6e2d94627a4e95c8b611ab1a3c2d705c7e2776", "message": "added heartbeat info", "committedDate": "2020-07-29T18:04:07Z", "type": "commit"}, {"oid": "6daab382882ee8977c42b6f81319dcb4a1683f4b", "url": "https://github.com/firebase/firebase-android-sdk/commit/6daab382882ee8977c42b6f81319dcb4a1683f4b", "message": "add tests", "committedDate": "2020-07-29T18:24:10Z", "type": "commit"}, {"oid": "c1be078808833fad15aadc6d9e89ce328a258eea", "url": "https://github.com/firebase/firebase-android-sdk/commit/c1be078808833fad15aadc6d9e89ce328a258eea", "message": "add platform logging", "committedDate": "2020-07-30T18:11:03Z", "type": "commit"}, {"oid": "84e0ab773da68e36c2135bfe687c1f328e834c48", "url": "https://github.com/firebase/firebase-android-sdk/commit/84e0ab773da68e36c2135bfe687c1f328e834c48", "message": "add tests for platform logging", "committedDate": "2020-07-31T18:23:43Z", "type": "commit"}, {"oid": "d621b58c74b80dc81230e468b09709629938a4b1", "url": "https://github.com/firebase/firebase-android-sdk/commit/d621b58c74b80dc81230e468b09709629938a4b1", "message": "add docs", "committedDate": "2020-07-31T19:14:16Z", "type": "commit"}, {"oid": "985104911bacbed0ffd14ce4b284386804dff2d9", "url": "https://github.com/firebase/firebase-android-sdk/commit/985104911bacbed0ffd14ce4b284386804dff2d9", "message": "gjf", "committedDate": "2020-07-31T19:29:29Z", "type": "commit"}, {"oid": "6dd4641cf9c2a447937b1e8d4853e88494fa8b61", "url": "https://github.com/firebase/firebase-android-sdk/commit/6dd4641cf9c2a447937b1e8d4853e88494fa8b61", "message": "default heartbeat info", "committedDate": "2020-08-05T17:45:31Z", "type": "commit"}, {"oid": "e866390567718c432d00d857657ba413b6045a06", "url": "https://github.com/firebase/firebase-android-sdk/commit/e866390567718c432d00d857657ba413b6045a06", "message": "test changes", "committedDate": "2020-08-05T18:15:24Z", "type": "commit"}, {"oid": "a207831bf669775ede223af7041176ef753aa6fa", "url": "https://github.com/firebase/firebase-android-sdk/commit/a207831bf669775ede223af7041176ef753aa6fa", "message": "add calendar day storage", "committedDate": "2020-08-13T18:19:31Z", "type": "commit"}, {"oid": "2bc1fecd256a7b96dfe4790687863c3dfa56afd6", "url": "https://github.com/firebase/firebase-android-sdk/commit/2bc1fecd256a7b96dfe4790687863c3dfa56afd6", "message": "fix heart beat info storage test", "committedDate": "2020-08-13T18:32:56Z", "type": "commit"}, {"oid": "7d2e9477fd845d1d961113d02c7831a299c2e0e7", "url": "https://github.com/firebase/firebase-android-sdk/commit/7d2e9477fd845d1d961113d02c7831a299c2e0e7", "message": "add log source", "committedDate": "2020-08-18T17:21:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM2Mjc5Mg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r472362792", "bodyText": "To me it sounds like a \"consumer\" rather than a logSource, I would suggest you rename it to HeartBeatConsumer.", "author": "vkryachko", "createdAt": "2020-08-18T17:27:51Z", "path": "firebase-common/src/main/java/com/google/firebase/heartbeatinfo/HeartBeatLogSource.java", "diffHunk": "@@ -0,0 +1,29 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.heartbeatinfo;\n+\n+import com.google.auto.value.AutoValue;\n+import javax.annotation.Nonnull;\n+\n+/** The class is not public to ensure other components cannot depend on it. */\n+@AutoValue\n+abstract class HeartBeatLogSource {", "originalCommit": "7d2e9477fd845d1d961113d02c7831a299c2e0e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM2Mzk2Nw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r472363967", "bodyText": "Additionally it could be just an empty interface rather than a class(you would have to make it public in this case).", "author": "vkryachko", "createdAt": "2020-08-18T17:29:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM2Mjc5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM2NDEzOA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r472364138", "bodyText": "this value is not used anywhere, consider removing altogether.", "author": "vkryachko", "createdAt": "2020-08-18T17:30:12Z", "path": "firebase-common/src/main/java/com/google/firebase/heartbeatinfo/HeartBeatLogSource.java", "diffHunk": "@@ -0,0 +1,29 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.heartbeatinfo;\n+\n+import com.google.auto.value.AutoValue;\n+import javax.annotation.Nonnull;\n+\n+/** The class is not public to ensure other components cannot depend on it. */\n+@AutoValue\n+abstract class HeartBeatLogSource {\n+  static HeartBeatLogSource create(String name) {\n+    return new AutoValue_HeartBeatLogSource(name);\n+  }\n+\n+  @Nonnull\n+  public abstract String getLogSourceName();", "originalCommit": "7d2e9477fd845d1d961113d02c7831a299c2e0e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM3MDAzNA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r472370034", "bodyText": "pls change the javadocs in this class", "author": "vkryachko", "createdAt": "2020-08-18T17:39:40Z", "path": "firebase-common/src/main/java/com/google/firebase/heartbeatinfo/HeartBeatLogSourceComponent.java", "diffHunk": "@@ -0,0 +1,27 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.heartbeatinfo;\n+\n+import com.google.firebase.components.Component;\n+\n+/** Factory to create a component that publishes the version of an SDK */", "originalCommit": "7d2e9477fd845d1d961113d02c7831a299c2e0e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM3MzI3Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r472373276", "bodyText": "you may want to hold on to the set and check if it's empty every time, this will make it future proof for when we add support for dynamic loading.", "author": "vkryachko", "createdAt": "2020-08-18T17:45:02Z", "path": "firebase-common/src/main/java/com/google/firebase/heartbeatinfo/DefaultHeartBeatInfo.java", "diffHunk": "@@ -20,20 +20,27 @@\n import androidx.annotation.VisibleForTesting;\n import com.google.firebase.components.Component;\n import com.google.firebase.components.Dependency;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n \n /** Provides information as whether to send heart beat or not. */\n public class DefaultHeartBeatInfo implements HeartBeatInfo {\n \n   private HeartBeatInfoStorage storage;\n \n-  private DefaultHeartBeatInfo(Context context) {\n+  private boolean doesSourceExist;\n+\n+  private DefaultHeartBeatInfo(Context context, Set<HeartBeatLogSource> logSources) {\n     storage = HeartBeatInfoStorage.getInstance(context);\n+    doesSourceExist = (logSources.size() > 0);", "originalCommit": "7d2e9477fd845d1d961113d02c7831a299c2e0e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM3NDA4OQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r472374089", "bodyText": "nit: delegate to the other constructor to avoid logic duplication.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                storage = HeartBeatInfoStorage.getInstance(context);\n          \n          \n            \n                doesSourceExist = (logSources.size() > 0);\n          \n          \n            \n                this(HeartBeatInfoStorage.getInstance(context), doesSourceExist = (logSources.size() > 0));", "author": "vkryachko", "createdAt": "2020-08-18T17:46:31Z", "path": "firebase-common/src/main/java/com/google/firebase/heartbeatinfo/DefaultHeartBeatInfo.java", "diffHunk": "@@ -20,20 +20,27 @@\n import androidx.annotation.VisibleForTesting;\n import com.google.firebase.components.Component;\n import com.google.firebase.components.Dependency;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n \n /** Provides information as whether to send heart beat or not. */\n public class DefaultHeartBeatInfo implements HeartBeatInfo {\n \n   private HeartBeatInfoStorage storage;\n \n-  private DefaultHeartBeatInfo(Context context) {\n+  private boolean doesSourceExist;\n+\n+  private DefaultHeartBeatInfo(Context context, Set<HeartBeatLogSource> logSources) {\n     storage = HeartBeatInfoStorage.getInstance(context);\n+    doesSourceExist = (logSources.size() > 0);", "originalCommit": "7d2e9477fd845d1d961113d02c7831a299c2e0e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQwMzExOQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r472403119", "bodyText": "ahh this is not possible since the other class can only be accessed via tests.", "author": "VinayGuthal", "createdAt": "2020-08-18T18:38:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM3NDA4OQ=="}], "type": "inlineReview"}, {"oid": "6b08f54e2fa63782606f8b1c5ae93178c8b4cdca", "url": "https://github.com/firebase/firebase-android-sdk/commit/6b08f54e2fa63782606f8b1c5ae93178c8b4cdca", "message": "platform logging update", "committedDate": "2020-08-18T18:04:14Z", "type": "commit"}, {"oid": "e6bdea8e0bacc99389b601397001a4c722ae30c0", "url": "https://github.com/firebase/firebase-android-sdk/commit/e6bdea8e0bacc99389b601397001a4c722ae30c0", "message": "address comments", "committedDate": "2020-08-18T18:37:23Z", "type": "commit"}, {"oid": "cd57fe9b538769c958d76bcdff4e8d02efffbb8d", "url": "https://github.com/firebase/firebase-android-sdk/commit/cd57fe9b538769c958d76bcdff4e8d02efffbb8d", "message": "make it a task", "committedDate": "2020-09-15T01:53:37Z", "type": "commit"}, {"oid": "1cd7aca65d67b09905858e5665c68c6274a8d9c0", "url": "https://github.com/firebase/firebase-android-sdk/commit/1cd7aca65d67b09905858e5665c68c6274a8d9c0", "message": "Merge branch 'master' into add_platform_logging", "committedDate": "2020-09-15T01:57:09Z", "type": "commit"}, {"oid": "513e894b414a78b945720a8f971f36ba826e0d2d", "url": "https://github.com/firebase/firebase-android-sdk/commit/513e894b414a78b945720a8f971f36ba826e0d2d", "message": "android manifest update", "committedDate": "2020-09-15T14:10:49Z", "type": "commit"}, {"oid": "303ef7a223808bdc6f1249032d1446cff851bd30", "url": "https://github.com/firebase/firebase-android-sdk/commit/303ef7a223808bdc6f1249032d1446cff851bd30", "message": "update common gradle", "committedDate": "2020-09-15T14:17:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODczMzU0OA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r488733548", "bodyText": "iiuc you just wrapped the result in a Task but did not actually make it asynchronous, so it will block anyway.", "author": "vkryachko", "createdAt": "2020-09-15T14:54:15Z", "path": "firebase-common/src/main/java/com/google/firebase/heartbeatinfo/DefaultHeartBeatInfo.java", "diffHunk": "@@ -51,10 +60,59 @@ private DefaultHeartBeatInfo(Context context) {\n     return HeartBeat.NONE;\n   }\n \n+  @Override\n+  public Task<List<HeartBeatResult>> getAndClearStoredHeartBeatInfo() {", "originalCommit": "303ef7a223808bdc6f1249032d1446cff851bd30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgyNDU2OA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r488824568", "bodyText": "Oops sorry about that. Updated", "author": "VinayGuthal", "createdAt": "2020-09-15T17:05:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODczMzU0OA=="}], "type": "inlineReview"}, {"oid": "f903248c10f91294f159300b69d3005c69cf481c", "url": "https://github.com/firebase/firebase-android-sdk/commit/f903248c10f91294f159300b69d3005c69cf481c", "message": "run in an executor", "committedDate": "2020-09-15T17:04:58Z", "type": "commit"}, {"oid": "88ae2536e482d8ac0ab05e7c979cb88693064834", "url": "https://github.com/firebase/firebase-android-sdk/commit/88ae2536e482d8ac0ab05e7c979cb88693064834", "message": "revert gradle", "committedDate": "2020-09-15T17:07:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzMTUzNQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r488831535", "bodyText": "why do use a counter if the thread pool has at most one thread?", "author": "vkryachko", "createdAt": "2020-09-15T17:18:15Z", "path": "firebase-common/src/main/java/com/google/firebase/heartbeatinfo/DefaultHeartBeatInfo.java", "diffHunk": "@@ -18,22 +18,57 @@\n import androidx.annotation.NonNull;\n import androidx.annotation.RestrictTo;\n import androidx.annotation.VisibleForTesting;\n+import com.google.android.gms.tasks.Task;\n+import com.google.android.gms.tasks.TaskCompletionSource;\n import com.google.firebase.components.Component;\n import com.google.firebase.components.Dependency;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n /** Provides information as whether to send heart beat or not. */\n public class DefaultHeartBeatInfo implements HeartBeatInfo {\n \n   private HeartBeatInfoStorage storage;\n \n-  private DefaultHeartBeatInfo(Context context) {\n+  private Set<HeartBeatConsumer> consumers;\n+\n+  private ExecutorService backgroundExecutor;\n+\n+  private static final ThreadFactory THREAD_FACTORY =\n+      new ThreadFactory() {\n+        private final AtomicInteger mCount = new AtomicInteger(1);", "originalCommit": "88ae2536e482d8ac0ab05e7c979cb88693064834", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzMTgyOA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r488831828", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private HeartBeatInfoStorage storage;\n          \n          \n            \n              private final HeartBeatInfoStorage storage;\n          \n      \n    \n    \n  \n\nhere and throughout", "author": "vkryachko", "createdAt": "2020-09-15T17:18:46Z", "path": "firebase-common/src/main/java/com/google/firebase/heartbeatinfo/DefaultHeartBeatInfo.java", "diffHunk": "@@ -18,22 +18,57 @@\n import androidx.annotation.NonNull;\n import androidx.annotation.RestrictTo;\n import androidx.annotation.VisibleForTesting;\n+import com.google.android.gms.tasks.Task;\n+import com.google.android.gms.tasks.TaskCompletionSource;\n import com.google.firebase.components.Component;\n import com.google.firebase.components.Dependency;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n /** Provides information as whether to send heart beat or not. */\n public class DefaultHeartBeatInfo implements HeartBeatInfo {\n \n   private HeartBeatInfoStorage storage;", "originalCommit": "88ae2536e482d8ac0ab05e7c979cb88693064834", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzMjU0Mg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r488832542", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private ExecutorService backgroundExecutor;\n          \n          \n            \n              private Executor backgroundExecutor;\n          \n      \n    \n    \n  \n\nsince you only use the execute() method", "author": "vkryachko", "createdAt": "2020-09-15T17:20:00Z", "path": "firebase-common/src/main/java/com/google/firebase/heartbeatinfo/DefaultHeartBeatInfo.java", "diffHunk": "@@ -18,22 +18,57 @@\n import androidx.annotation.NonNull;\n import androidx.annotation.RestrictTo;\n import androidx.annotation.VisibleForTesting;\n+import com.google.android.gms.tasks.Task;\n+import com.google.android.gms.tasks.TaskCompletionSource;\n import com.google.firebase.components.Component;\n import com.google.firebase.components.Dependency;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n /** Provides information as whether to send heart beat or not. */\n public class DefaultHeartBeatInfo implements HeartBeatInfo {\n \n   private HeartBeatInfoStorage storage;\n \n-  private DefaultHeartBeatInfo(Context context) {\n+  private Set<HeartBeatConsumer> consumers;\n+\n+  private ExecutorService backgroundExecutor;", "originalCommit": "88ae2536e482d8ac0ab05e7c979cb88693064834", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzMzM4Mg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r488833382", "bodyText": "pls have this constructor delegate to the one below", "author": "vkryachko", "createdAt": "2020-09-15T17:20:53Z", "path": "firebase-common/src/main/java/com/google/firebase/heartbeatinfo/DefaultHeartBeatInfo.java", "diffHunk": "@@ -18,22 +18,57 @@\n import androidx.annotation.NonNull;\n import androidx.annotation.RestrictTo;\n import androidx.annotation.VisibleForTesting;\n+import com.google.android.gms.tasks.Task;\n+import com.google.android.gms.tasks.TaskCompletionSource;\n import com.google.firebase.components.Component;\n import com.google.firebase.components.Dependency;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n /** Provides information as whether to send heart beat or not. */\n public class DefaultHeartBeatInfo implements HeartBeatInfo {\n \n   private HeartBeatInfoStorage storage;\n \n-  private DefaultHeartBeatInfo(Context context) {\n+  private Set<HeartBeatConsumer> consumers;\n+\n+  private ExecutorService backgroundExecutor;\n+\n+  private static final ThreadFactory THREAD_FACTORY =\n+      new ThreadFactory() {\n+        private final AtomicInteger mCount = new AtomicInteger(1);\n+\n+        @Override\n+        public Thread newThread(Runnable r) {\n+          return new Thread(\n+              r, String.format(\"heartbeat-information-executor-%d\", mCount.getAndIncrement()));\n+        }\n+      };\n+\n+  private DefaultHeartBeatInfo(Context context, Set<HeartBeatConsumer> consumers) {", "originalCommit": "88ae2536e482d8ac0ab05e7c979cb88693064834", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA5ODI3OA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r489098278", "bodyText": "hmm so the other constructor is test only and can't be accessed via this", "author": "VinayGuthal", "createdAt": "2020-09-16T00:54:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzMzM4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAwODAzMw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r491008033", "bodyText": "in this case pls change the annotation to @VisibleForTesting so that linter does not complain", "author": "vkryachko", "createdAt": "2020-09-18T14:57:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzMzM4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzNDM2OA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r488834368", "bodyText": "if you don't need the indexes, pls use for(Result result: sdkHeartBeatResults)", "author": "vkryachko", "createdAt": "2020-09-15T17:21:51Z", "path": "firebase-common/src/main/java/com/google/firebase/heartbeatinfo/DefaultHeartBeatInfo.java", "diffHunk": "@@ -51,10 +86,69 @@ private DefaultHeartBeatInfo(Context context) {\n     return HeartBeat.NONE;\n   }\n \n+  @Override\n+  public Task<List<HeartBeatResult>> getAndClearStoredHeartBeatInfo() {\n+    TaskCompletionSource<List<HeartBeatResult>> taskCompletionSource = new TaskCompletionSource<>();\n+    this.backgroundExecutor.execute(\n+        () -> {\n+          ArrayList<HeartBeatResult> heartBeatResults = new ArrayList<>();\n+          boolean shouldSendGlobalHeartBeat = false;\n+          List<SdkHeartBeatResult> sdkHeartBeatResults = storage.getStoredHeartBeats(true);\n+          long lastGlobalHeartBeat = storage.getLastGlobalHeartBeat();\n+          for (int i = 0; i < sdkHeartBeatResults.size(); i++) {", "originalCommit": "88ae2536e482d8ac0ab05e7c979cb88693064834", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1NDUxMg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r488854512", "bodyText": "Even though Tasks.call() is deprecated I suggest you use it as it makes sure that the task actually completes in the face of exceptions and errors, i.e. see b/157690112 for how tasks can hang indefinitely if an exception happens.", "author": "vkryachko", "createdAt": "2020-09-15T17:48:09Z", "path": "firebase-common/src/main/java/com/google/firebase/heartbeatinfo/DefaultHeartBeatInfo.java", "diffHunk": "@@ -51,10 +86,69 @@ private DefaultHeartBeatInfo(Context context) {\n     return HeartBeat.NONE;\n   }\n \n+  @Override\n+  public Task<List<HeartBeatResult>> getAndClearStoredHeartBeatInfo() {\n+    TaskCompletionSource<List<HeartBeatResult>> taskCompletionSource = new TaskCompletionSource<>();\n+    this.backgroundExecutor.execute(", "originalCommit": "88ae2536e482d8ac0ab05e7c979cb88693064834", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1NDkxMA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r488854910", "bodyText": "use Tasks.forResult(true) ?", "author": "vkryachko", "createdAt": "2020-09-15T17:48:52Z", "path": "firebase-common/src/main/java/com/google/firebase/heartbeatinfo/DefaultHeartBeatInfo.java", "diffHunk": "@@ -51,10 +86,69 @@ private DefaultHeartBeatInfo(Context context) {\n     return HeartBeat.NONE;\n   }\n \n+  @Override\n+  public Task<List<HeartBeatResult>> getAndClearStoredHeartBeatInfo() {\n+    TaskCompletionSource<List<HeartBeatResult>> taskCompletionSource = new TaskCompletionSource<>();\n+    this.backgroundExecutor.execute(\n+        () -> {\n+          ArrayList<HeartBeatResult> heartBeatResults = new ArrayList<>();\n+          boolean shouldSendGlobalHeartBeat = false;\n+          List<SdkHeartBeatResult> sdkHeartBeatResults = storage.getStoredHeartBeats(true);\n+          long lastGlobalHeartBeat = storage.getLastGlobalHeartBeat();\n+          for (int i = 0; i < sdkHeartBeatResults.size(); i++) {\n+            SdkHeartBeatResult sdkHeartBeatResult = sdkHeartBeatResults.get(i);\n+            HeartBeat heartBeat;\n+            shouldSendGlobalHeartBeat =\n+                storage.isValidHeartBeat(lastGlobalHeartBeat, sdkHeartBeatResult.getMillis());\n+            if (shouldSendGlobalHeartBeat) {\n+              heartBeat = HeartBeat.COMBINED;\n+            } else {\n+              heartBeat = HeartBeat.SDK;\n+            }\n+            if (shouldSendGlobalHeartBeat) {\n+              lastGlobalHeartBeat = sdkHeartBeatResult.getMillis();\n+            }\n+            heartBeatResults.add(\n+                HeartBeatResult.create(\n+                    sdkHeartBeatResult.getSdkName(), sdkHeartBeatResult.getMillis(), heartBeat));\n+          }\n+          if (lastGlobalHeartBeat > 0) {\n+            storage.updateGlobalHeartBeat(lastGlobalHeartBeat);\n+          }\n+          taskCompletionSource.setResult(heartBeatResults);\n+        });\n+    return taskCompletionSource.getTask();\n+  }\n+\n+  @Override\n+  public Task storeHeartBeatInfo(@NonNull String heartBeatTag) {\n+    TaskCompletionSource<Boolean> taskCompletionSource = new TaskCompletionSource<>();\n+    if (consumers.size() <= 0) {\n+      taskCompletionSource.setResult(true);\n+      return taskCompletionSource.getTask();", "originalCommit": "88ae2536e482d8ac0ab05e7c979cb88693064834", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1NTc3Nw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r488855777", "bodyText": "why is it a raw Task? should it be Task<Boolean>? also consider renaming the method to something like shouldStoreHeardBeatInfo()", "author": "vkryachko", "createdAt": "2020-09-15T17:50:16Z", "path": "firebase-common/src/main/java/com/google/firebase/heartbeatinfo/HeartBeatInfo.java", "diffHunk": "@@ -44,4 +49,10 @@ public int getCode() {\n \n   @NonNull\n   HeartBeat getHeartBeatCode(@NonNull String heartBeatTag);\n+\n+  @NonNull\n+  Task storeHeartBeatInfo(@NonNull String heartBeatTag);", "originalCommit": "88ae2536e482d8ac0ab05e7c979cb88693064834", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg5MzM0NQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r488893345", "bodyText": "hmm the method itself would storeHeartBeatInformation. It returns a task so that we can wait on the task to complete if needed. The return type doesn't matter in this case but TaskCompletionSource requires a returnType.", "author": "VinayGuthal", "createdAt": "2020-09-15T18:54:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1NTc3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAwNjM1NA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r491006354", "bodyText": "in this case use Task<Void>, but raw types break type safety", "author": "vkryachko", "createdAt": "2020-09-18T14:55:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1NTc3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1Njc1NQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r488856755", "bodyText": "I wonder what will happen if the device changes timezone, can we use utc here? Additionally getDate() seems deprecated.\nAlso is it possible that the date is the same but the month is different?", "author": "vkryachko", "createdAt": "2020-09-15T17:51:55Z", "path": "firebase-common/src/main/java/com/google/firebase/heartbeatinfo/HeartBeatInfoStorage.java", "diffHunk": "@@ -50,15 +74,63 @@ static synchronized HeartBeatInfoStorage getInstance(Context applicationContext)\n     return instance;\n   }\n \n+  synchronized void storeHeartBeatInformation(String heartBeatTag, long millis) {\n+    this.heartBeatSharedPreferences.edit().putString(String.valueOf(millis), heartBeatTag).apply();\n+    this.heartBeatCount += 1;\n+    if (this.heartBeatCount > HEART_BEAT_COUNT_LIMIT) {\n+      this.cleanUpStoredHeartBeats();\n+    }\n+  }\n+\n+  private synchronized void cleanUpStoredHeartBeats() {\n+    ArrayList<Long> timestampList = new ArrayList<>();\n+    for (Map.Entry<String, ?> entry : heartBeatSharedPreferences.getAll().entrySet()) {\n+      timestampList.add(Long.parseLong(entry.getKey()));\n+    }\n+    Collections.sort(timestampList);\n+    for (Long millis : timestampList) {\n+      this.heartBeatSharedPreferences.edit().remove(String.valueOf(millis)).apply();\n+      this.heartBeatCount -= 1;\n+      if (this.heartBeatCount <= (HEART_BEAT_COUNT_LIMIT / 2)) return;\n+    }\n+  }\n+\n+  synchronized long getLastGlobalHeartBeat() {\n+    return sharedPreferences.getLong(GLOBAL, -1);\n+  }\n+\n+  synchronized void updateGlobalHeartBeat(long millis) {\n+    sharedPreferences.edit().putLong(GLOBAL, millis).apply();\n+  }\n+\n+  synchronized List<SdkHeartBeatResult> getStoredHeartBeats(boolean shouldClear) {\n+    ArrayList<SdkHeartBeatResult> sdkHeartBeatResults = new ArrayList<>();\n+    for (Map.Entry<String, ?> entry : heartBeatSharedPreferences.getAll().entrySet()) {\n+      long millis = Long.parseLong(entry.getKey());\n+      String sdkName = ((String) entry.getValue());\n+      sdkHeartBeatResults.add(SdkHeartBeatResult.create(sdkName, millis));\n+    }\n+    Collections.sort(sdkHeartBeatResults);\n+    if (shouldClear) clearStoredHeartBeats();\n+    return sdkHeartBeatResults;\n+  }\n+\n+  void clearStoredHeartBeats() {\n+    heartBeatSharedPreferences.edit().clear().apply();\n+  }\n+\n+  boolean isValidHeartBeat(long base, long target) {\n+    return !((new Date(base).getDate()) == (new Date(target).getDate()));", "originalCommit": "88ae2536e482d8ac0ab05e7c979cb88693064834", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg5MTY1Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r488891656", "bodyText": "no the date would include a combination of month day and year. Yeah can use utc", "author": "VinayGuthal", "createdAt": "2020-09-15T18:52:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1Njc1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg5ODQ2Nw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r488898467", "bodyText": "what I mean is that date.getDate() returns the day of the month, so there is no info about which month it is or which year", "author": "vkryachko", "createdAt": "2020-09-15T18:59:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1Njc1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA5NzMyNg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r489097326", "bodyText": "Ah okay I thought it handled all the 3. I will change it.", "author": "VinayGuthal", "createdAt": "2020-09-16T00:50:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1Njc1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwMDE2OQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r489100169", "bodyText": "Regarding the first question, it shouldn't matter if the device changes timezone it should still be utc bcz we are getting the date based on the milliseconds which are the number of milliseconds since epoch (System.getMillis)", "author": "VinayGuthal", "createdAt": "2020-09-16T01:01:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1Njc1NQ=="}], "type": "inlineReview"}, {"oid": "9396e20c556263566a82737ea45a4126b2aa62b6", "url": "https://github.com/firebase/firebase-android-sdk/commit/9396e20c556263566a82737ea45a4126b2aa62b6", "message": "gJF", "committedDate": "2020-09-16T01:48:34Z", "type": "commit"}, {"oid": "d27a72428fdaed96cbcd9061b99e9b4a3d4d9110", "url": "https://github.com/firebase/firebase-android-sdk/commit/d27a72428fdaed96cbcd9061b99e9b4a3d4d9110", "message": "use utc format", "committedDate": "2020-09-16T02:13:39Z", "type": "commit"}, {"oid": "eef22955d5fa7a4e2367f1daffbe4a065ca8c9dc", "url": "https://github.com/firebase/firebase-android-sdk/commit/eef22955d5fa7a4e2367f1daffbe4a065ca8c9dc", "message": "default heartbeat update", "committedDate": "2020-09-17T16:29:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAwOTA1Mw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r491009053", "bodyText": "From the code below it looks like it's important that this executor is single-threaded, otherwise there will be race conditions, can you pls document it here for our future selves?", "author": "vkryachko", "createdAt": "2020-09-18T14:59:31Z", "path": "firebase-common/src/main/java/com/google/firebase/heartbeatinfo/DefaultHeartBeatInfo.java", "diffHunk": "@@ -18,22 +18,49 @@\n import androidx.annotation.NonNull;\n import androidx.annotation.RestrictTo;\n import androidx.annotation.VisibleForTesting;\n+import com.google.android.gms.tasks.Task;\n+import com.google.android.gms.tasks.Tasks;\n import com.google.firebase.components.Component;\n import com.google.firebase.components.Dependency;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n \n /** Provides information as whether to send heart beat or not. */\n public class DefaultHeartBeatInfo implements HeartBeatInfo {\n \n-  private HeartBeatInfoStorage storage;\n+  private final HeartBeatInfoStorage storage;\n \n-  private DefaultHeartBeatInfo(Context context) {\n+  private Set<HeartBeatConsumer> consumers;\n+\n+  private Executor backgroundExecutor;\n+\n+  private static final ThreadFactory THREAD_FACTORY =\n+      r -> new Thread(r, \"heartbeat-information-executor\");\n+\n+  private DefaultHeartBeatInfo(Context context, Set<HeartBeatConsumer> consumers) {\n     storage = HeartBeatInfoStorage.getInstance(context);\n+    this.consumers = consumers;\n+    this.backgroundExecutor =\n+        new ThreadPoolExecutor(\n+            0, 1, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<>(), THREAD_FACTORY);", "originalCommit": "eef22955d5fa7a4e2367f1daffbe4a065ca8c9dc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAwOTQ1NQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r491009455", "bodyText": "Please make these final as well, and in other places in this PR(if any).", "author": "vkryachko", "createdAt": "2020-09-18T15:00:07Z", "path": "firebase-common/src/main/java/com/google/firebase/heartbeatinfo/DefaultHeartBeatInfo.java", "diffHunk": "@@ -18,22 +18,49 @@\n import androidx.annotation.NonNull;\n import androidx.annotation.RestrictTo;\n import androidx.annotation.VisibleForTesting;\n+import com.google.android.gms.tasks.Task;\n+import com.google.android.gms.tasks.Tasks;\n import com.google.firebase.components.Component;\n import com.google.firebase.components.Dependency;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n \n /** Provides information as whether to send heart beat or not. */\n public class DefaultHeartBeatInfo implements HeartBeatInfo {\n \n-  private HeartBeatInfoStorage storage;\n+  private final HeartBeatInfoStorage storage;\n \n-  private DefaultHeartBeatInfo(Context context) {\n+  private Set<HeartBeatConsumer> consumers;\n+\n+  private Executor backgroundExecutor;", "originalCommit": "eef22955d5fa7a4e2367f1daffbe4a065ca8c9dc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAxMjE4Mg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r491012182", "bodyText": "consider extracting this formatter into a constant since it never changes.", "author": "vkryachko", "createdAt": "2020-09-18T15:04:47Z", "path": "firebase-common/src/main/java/com/google/firebase/heartbeatinfo/HeartBeatInfoStorage.java", "diffHunk": "@@ -50,15 +75,66 @@ static synchronized HeartBeatInfoStorage getInstance(Context applicationContext)\n     return instance;\n   }\n \n+  synchronized void storeHeartBeatInformation(String heartBeatTag, long millis) {\n+    this.heartBeatSharedPreferences.edit().putString(String.valueOf(millis), heartBeatTag).apply();\n+    this.heartBeatCount += 1;\n+    if (this.heartBeatCount > HEART_BEAT_COUNT_LIMIT) {\n+      this.cleanUpStoredHeartBeats();\n+    }\n+  }\n+\n+  private synchronized void cleanUpStoredHeartBeats() {\n+    ArrayList<Long> timestampList = new ArrayList<>();\n+    for (Map.Entry<String, ?> entry : heartBeatSharedPreferences.getAll().entrySet()) {\n+      timestampList.add(Long.parseLong(entry.getKey()));\n+    }\n+    Collections.sort(timestampList);\n+    for (Long millis : timestampList) {\n+      this.heartBeatSharedPreferences.edit().remove(String.valueOf(millis)).apply();\n+      this.heartBeatCount -= 1;\n+      if (this.heartBeatCount <= (HEART_BEAT_COUNT_LIMIT / 2)) return;\n+    }\n+  }\n+\n+  synchronized long getLastGlobalHeartBeat() {\n+    return sharedPreferences.getLong(GLOBAL, -1);\n+  }\n+\n+  synchronized void updateGlobalHeartBeat(long millis) {\n+    sharedPreferences.edit().putLong(GLOBAL, millis).apply();\n+  }\n+\n+  synchronized List<SdkHeartBeatResult> getStoredHeartBeats(boolean shouldClear) {\n+    ArrayList<SdkHeartBeatResult> sdkHeartBeatResults = new ArrayList<>();\n+    for (Map.Entry<String, ?> entry : heartBeatSharedPreferences.getAll().entrySet()) {\n+      long millis = Long.parseLong(entry.getKey());\n+      String sdkName = ((String) entry.getValue());\n+      sdkHeartBeatResults.add(SdkHeartBeatResult.create(sdkName, millis));\n+    }\n+    Collections.sort(sdkHeartBeatResults);\n+    if (shouldClear) clearStoredHeartBeats();\n+    return sdkHeartBeatResults;\n+  }\n+\n+  void clearStoredHeartBeats() {\n+    heartBeatSharedPreferences.edit().clear().apply();\n+  }\n+\n+  boolean isValidHeartBeat(long base, long target) {\n+    Date baseDate = new Date(base);\n+    Date targetDate = new Date(target);\n+    SimpleDateFormat formatter = new SimpleDateFormat(\"dd/MM/yyyy z\");", "originalCommit": "eef22955d5fa7a4e2367f1daffbe4a065ca8c9dc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAxMzg1OA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r491013858", "bodyText": "looking at the signature, iiuc this method does not have anything to do with heartbeat, but rather checks if 2 timestamps belong to the same day in utc, consider renaming the method to something like\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              boolean isValidHeartBeat(long base, long target) {\n          \n          \n            \n              boolean static isSameDateUtc(long oneMillis, long otherMillis) {\n          \n      \n    \n    \n  \n\nnot static, since you don't use any member state of this class.", "author": "vkryachko", "createdAt": "2020-09-18T15:07:28Z", "path": "firebase-common/src/main/java/com/google/firebase/heartbeatinfo/HeartBeatInfoStorage.java", "diffHunk": "@@ -50,15 +75,66 @@ static synchronized HeartBeatInfoStorage getInstance(Context applicationContext)\n     return instance;\n   }\n \n+  synchronized void storeHeartBeatInformation(String heartBeatTag, long millis) {\n+    this.heartBeatSharedPreferences.edit().putString(String.valueOf(millis), heartBeatTag).apply();\n+    this.heartBeatCount += 1;\n+    if (this.heartBeatCount > HEART_BEAT_COUNT_LIMIT) {\n+      this.cleanUpStoredHeartBeats();\n+    }\n+  }\n+\n+  private synchronized void cleanUpStoredHeartBeats() {\n+    ArrayList<Long> timestampList = new ArrayList<>();\n+    for (Map.Entry<String, ?> entry : heartBeatSharedPreferences.getAll().entrySet()) {\n+      timestampList.add(Long.parseLong(entry.getKey()));\n+    }\n+    Collections.sort(timestampList);\n+    for (Long millis : timestampList) {\n+      this.heartBeatSharedPreferences.edit().remove(String.valueOf(millis)).apply();\n+      this.heartBeatCount -= 1;\n+      if (this.heartBeatCount <= (HEART_BEAT_COUNT_LIMIT / 2)) return;\n+    }\n+  }\n+\n+  synchronized long getLastGlobalHeartBeat() {\n+    return sharedPreferences.getLong(GLOBAL, -1);\n+  }\n+\n+  synchronized void updateGlobalHeartBeat(long millis) {\n+    sharedPreferences.edit().putLong(GLOBAL, millis).apply();\n+  }\n+\n+  synchronized List<SdkHeartBeatResult> getStoredHeartBeats(boolean shouldClear) {\n+    ArrayList<SdkHeartBeatResult> sdkHeartBeatResults = new ArrayList<>();\n+    for (Map.Entry<String, ?> entry : heartBeatSharedPreferences.getAll().entrySet()) {\n+      long millis = Long.parseLong(entry.getKey());\n+      String sdkName = ((String) entry.getValue());\n+      sdkHeartBeatResults.add(SdkHeartBeatResult.create(sdkName, millis));\n+    }\n+    Collections.sort(sdkHeartBeatResults);\n+    if (shouldClear) clearStoredHeartBeats();\n+    return sdkHeartBeatResults;\n+  }\n+\n+  void clearStoredHeartBeats() {\n+    heartBeatSharedPreferences.edit().clear().apply();\n+  }\n+\n+  boolean isValidHeartBeat(long base, long target) {", "originalCommit": "eef22955d5fa7a4e2367f1daffbe4a065ca8c9dc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "55515bd6efcfd11fbacfafae16ec55d5782829f7", "url": "https://github.com/firebase/firebase-android-sdk/commit/55515bd6efcfd11fbacfafae16ec55d5782829f7", "message": "address comments", "committedDate": "2020-09-21T18:48:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgwNDQ1Mg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r492804452", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private Set<HeartBeatConsumer> consumers;\n          \n          \n            \n              private final Set<HeartBeatConsumer> consumers;", "author": "vkryachko", "createdAt": "2020-09-22T14:57:47Z", "path": "firebase-common/src/main/java/com/google/firebase/heartbeatinfo/DefaultHeartBeatInfo.java", "diffHunk": "@@ -16,24 +16,48 @@\n \n import android.content.Context;\n import androidx.annotation.NonNull;\n-import androidx.annotation.RestrictTo;\n import androidx.annotation.VisibleForTesting;\n+import com.google.android.gms.tasks.Task;\n+import com.google.android.gms.tasks.Tasks;\n import com.google.firebase.components.Component;\n import com.google.firebase.components.Dependency;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n \n /** Provides information as whether to send heart beat or not. */\n public class DefaultHeartBeatInfo implements HeartBeatInfo {\n \n-  private HeartBeatInfoStorage storage;\n+  private final HeartBeatInfoStorage storage;\n \n-  private DefaultHeartBeatInfo(Context context) {\n-    storage = HeartBeatInfoStorage.getInstance(context);\n+  private Set<HeartBeatConsumer> consumers;", "originalCommit": "55515bd6efcfd11fbacfafae16ec55d5782829f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgwNTk0OQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r492805949", "bodyText": "constants should use CAPS_SNAKE_CASE, pls change throughout", "author": "vkryachko", "createdAt": "2020-09-22T14:59:34Z", "path": "firebase-common/src/main/java/com/google/firebase/heartbeatinfo/HeartBeatInfoStorage.java", "diffHunk": "@@ -30,17 +36,38 @@\n \n   private static final String preferencesName = \"FirebaseAppHeartBeat\";\n \n+  // As soon as you hit the limit of heartbeats. The number of stored heartbeats is halved.\n+  private static final int HEART_BEAT_COUNT_LIMIT = 200;\n+\n+  private static final SimpleDateFormat FORMATTER = new SimpleDateFormat(\"dd/MM/yyyy z\");\n+\n+  // Stores a key value mapping from timestamp to the sdkName and heartBeat code.\n+  private static final String storagePreferencesName = \"FirebaseAppHeartBeatStorage\";", "originalCommit": "55515bd6efcfd11fbacfafae16ec55d5782829f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgwNzc5MQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r492807791", "bodyText": "looks like you're updating it inside synchronized, but reading it unprotected, this is a race. consider making this method synchronized as well", "author": "vkryachko", "createdAt": "2020-09-22T15:01:47Z", "path": "firebase-common/src/main/java/com/google/firebase/heartbeatinfo/HeartBeatInfoStorage.java", "diffHunk": "@@ -30,17 +36,38 @@\n \n   private static final String preferencesName = \"FirebaseAppHeartBeat\";\n \n+  // As soon as you hit the limit of heartbeats. The number of stored heartbeats is halved.\n+  private static final int HEART_BEAT_COUNT_LIMIT = 200;\n+\n+  private static final SimpleDateFormat FORMATTER = new SimpleDateFormat(\"dd/MM/yyyy z\");\n+\n+  // Stores a key value mapping from timestamp to the sdkName and heartBeat code.\n+  private static final String storagePreferencesName = \"FirebaseAppHeartBeatStorage\";\n+\n   private final SharedPreferences sharedPreferences;\n+  private final SharedPreferences heartBeatSharedPreferences;\n+  private int heartBeatCount;\n \n   private HeartBeatInfoStorage(Context applicationContext) {\n     this.sharedPreferences =\n         applicationContext.getSharedPreferences(preferencesName, Context.MODE_PRIVATE);\n+    this.heartBeatSharedPreferences =\n+        applicationContext.getSharedPreferences(preferencesName, Context.MODE_PRIVATE);\n+    this.heartBeatCount = 0;\n   }\n \n   @VisibleForTesting\n   @RestrictTo(RestrictTo.Scope.TESTS)\n-  HeartBeatInfoStorage(SharedPreferences preferences) {\n+  HeartBeatInfoStorage(\n+      SharedPreferences preferences, SharedPreferences heartBeatSharedPreferences) {\n     this.sharedPreferences = preferences;\n+    this.heartBeatSharedPreferences = heartBeatSharedPreferences;\n+  }\n+\n+  @VisibleForTesting\n+  @RestrictTo(RestrictTo.Scope.TESTS)\n+  int getHeartBeatCount() {\n+    return this.heartBeatCount;", "originalCommit": "55515bd6efcfd11fbacfafae16ec55d5782829f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgxMDI0Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r492810246", "bodyText": "hm, actually: are you using this variable to control when to clean up stale heartbeats? if so, is it ok that this variable will not survive app restarts? wouldn't it cause storage to grow in an unbounded manner?", "author": "vkryachko", "createdAt": "2020-09-22T15:04:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgwNzc5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg1NDEzNA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r492854134", "bodyText": "Hmm the method is just restricted for Testing so hadn't made it synchronized.  Hmmm but good catch, maybe it makes sense to put this as well under shared preferences?", "author": "VinayGuthal", "createdAt": "2020-09-22T15:59:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgwNzc5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgxMjIwNw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r492812207", "bodyText": "what is the purpose of these listeners? why not just use Tasks.await(info.storeHeartBeatInfo(testSdk)) for example?", "author": "vkryachko", "createdAt": "2020-09-22T15:07:14Z", "path": "firebase-common/src/test/java/com/google/firebase/heartbeatinfo/DefaultHeartBeatInfoTest.java", "diffHunk": "@@ -15,20 +15,50 @@\n package com.google.firebase.heartbeatinfo;\n \n import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n import static org.mockito.ArgumentMatchers.anyLong;\n import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.JUnit4;\n \n @RunWith(JUnit4.class)\n public class DefaultHeartBeatInfoTest {\n   private String testSdk = \"fire-test\";\n+  private ExecutorService executor;\n+  private TestOnCompleteListener<Boolean> storeOnCompleteListener;\n+  private TestOnCompleteListener<List<HeartBeatResult>> getOnCompleteListener;\n   private HeartBeatInfoStorage storage = mock(HeartBeatInfoStorage.class);\n-  private DefaultHeartBeatInfo heartBeatInfo = new DefaultHeartBeatInfo(storage);\n+  private Set<HeartBeatConsumer> logSources =\n+      new HashSet<HeartBeatConsumer>() {\n+        {\n+          add(new HeartBeatConsumer() {});\n+        }\n+      };\n+  private DefaultHeartBeatInfo heartBeatInfo;\n+\n+  @Before\n+  public void setUp() {\n+    executor = new ThreadPoolExecutor(0, 1, 30L, TimeUnit.SECONDS, new LinkedBlockingQueue<>());\n+    storeOnCompleteListener = new TestOnCompleteListener<>();", "originalCommit": "55515bd6efcfd11fbacfafae16ec55d5782829f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg1OTIwNg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r492859206", "bodyText": "hmm I used Tasks.await before but it would cause the looper wait issue as there could be more than one threads. Hence the need of the listener similar to what has been done in firebase-installations.", "author": "VinayGuthal", "createdAt": "2020-09-22T16:06:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgxMjIwNw=="}], "type": "inlineReview"}, {"oid": "f453a7aab4fd1c779a152308340da7adbfcf1c84", "url": "https://github.com/firebase/firebase-android-sdk/commit/f453a7aab4fd1c779a152308340da7adbfcf1c84", "message": "heartbeat storage update", "committedDate": "2020-09-22T16:18:11Z", "type": "commit"}, {"oid": "798ae23714edbecd6f8390656571fe20f48bd9a5", "url": "https://github.com/firebase/firebase-android-sdk/commit/798ae23714edbecd6f8390656571fe20f48bd9a5", "message": "update platform logging", "committedDate": "2020-11-18T20:28:08Z", "type": "commit"}, {"oid": "5e3d6b380a1ceb9fae6b739120ff038bf192a696", "url": "https://github.com/firebase/firebase-android-sdk/commit/5e3d6b380a1ceb9fae6b739120ff038bf192a696", "message": "add heartbeat count clear", "committedDate": "2020-11-18T20:37:21Z", "type": "commit"}, {"oid": "2a87ae35e49d55a141873c2422790fc68cc240a4", "url": "https://github.com/firebase/firebase-android-sdk/commit/2a87ae35e49d55a141873c2422790fc68cc240a4", "message": "update background executor call", "committedDate": "2020-11-18T21:02:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE4MjU3OQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1831#discussion_r527182579", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public Task storeHeartBeatInfo(@NonNull String heartBeatTag) {\n          \n          \n            \n              public Task<Void> storeHeartBeatInfo(@NonNull String heartBeatTag) {", "author": "vkryachko", "createdAt": "2020-11-19T20:37:17Z", "path": "firebase-common/src/main/java/com/google/firebase/heartbeatinfo/DefaultHeartBeatInfo.java", "diffHunk": "@@ -51,10 +80,64 @@ private DefaultHeartBeatInfo(Context context) {\n     return HeartBeat.NONE;\n   }\n \n+  @Override\n+  public Task<List<HeartBeatResult>> getAndClearStoredHeartBeatInfo() {\n+    return Tasks.call(\n+        backgroundExecutor,\n+        () -> {\n+          ArrayList<HeartBeatResult> heartBeatResults = new ArrayList<>();\n+          boolean shouldSendGlobalHeartBeat = false;\n+          HeartBeatInfoStorage storage = storageProvider.get();\n+          List<SdkHeartBeatResult> sdkHeartBeatResults = storage.getStoredHeartBeats(true);\n+          long lastGlobalHeartBeat = storage.getLastGlobalHeartBeat();\n+          HeartBeat heartBeat;\n+          for (SdkHeartBeatResult sdkHeartBeatResult : sdkHeartBeatResults) {\n+            shouldSendGlobalHeartBeat =\n+                HeartBeatInfoStorage.isSameDateUtc(\n+                    lastGlobalHeartBeat, sdkHeartBeatResult.getMillis());\n+            if (shouldSendGlobalHeartBeat) {\n+              heartBeat = HeartBeat.COMBINED;\n+            } else {\n+              heartBeat = HeartBeat.SDK;\n+            }\n+            if (shouldSendGlobalHeartBeat) {\n+              lastGlobalHeartBeat = sdkHeartBeatResult.getMillis();\n+            }\n+            heartBeatResults.add(\n+                HeartBeatResult.create(\n+                    sdkHeartBeatResult.getSdkName(), sdkHeartBeatResult.getMillis(), heartBeat));\n+          }\n+          if (lastGlobalHeartBeat > 0) {\n+            storage.updateGlobalHeartBeat(lastGlobalHeartBeat);\n+          }\n+          return heartBeatResults;\n+        });\n+  }\n+\n+  @Override\n+  public Task storeHeartBeatInfo(@NonNull String heartBeatTag) {", "originalCommit": "2a87ae35e49d55a141873c2422790fc68cc240a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fd6ed25891d339792b393ccdd771e55f2fa8005b", "url": "https://github.com/firebase/firebase-android-sdk/commit/fd6ed25891d339792b393ccdd771e55f2fa8005b", "message": "gJF", "committedDate": "2020-11-24T20:15:57Z", "type": "commit"}]}