{"pr_number": 2134, "pr_title": "Add new CustomModelDownloadService to retrieve download details about\u2026", "pr_createdAt": "2020-11-03T18:03:43Z", "pr_url": "https://github.com/firebase/firebase-android-sdk/pull/2134", "timeline": [{"oid": "c9b035322aaf32baa6fba5f38c12285ece1077b9", "url": "https://github.com/firebase/firebase-android-sdk/commit/c9b035322aaf32baa6fba5f38c12285ece1077b9", "message": "Add new CustomModelDownloadService to retrieve download details about the CustomModel.", "committedDate": "2020-11-03T18:03:01Z", "type": "commit"}, {"oid": "70dabcac04485fb0577352d572df2e9170b46ed5", "url": "https://github.com/firebase/firebase-android-sdk/commit/70dabcac04485fb0577352d572df2e9170b46ed5", "message": "Add tests for download service calls", "committedDate": "2020-11-05T18:46:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA1MTEwOA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2134#discussion_r520051108", "bodyText": "I think the URL needs to be: \"https://firebaseml.googleapis.com/v1beta2/projects/%s/models/%s:download\".", "author": "manjanac", "createdAt": "2020-11-09T19:06:23Z", "path": "firebase-ml-modeldownloader/src/main/java/com/google/firebase/ml/modeldownloader/internal/CustomModelDownloadService.java", "diffHunk": "@@ -0,0 +1,247 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.ml.modeldownloader.internal;\n+\n+import android.os.Build.VERSION_CODES;\n+import android.util.JsonReader;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.RequiresApi;\n+import com.google.android.gms.common.util.VisibleForTesting;\n+import com.google.android.gms.tasks.Task;\n+import com.google.android.gms.tasks.Tasks;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.installations.FirebaseInstallationsApi;\n+import com.google.firebase.installations.InstallationTokenResult;\n+import com.google.firebase.ml.modeldownloader.CustomModel;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import javax.net.ssl.HttpsURLConnection;\n+\n+/**\n+ * Calls the Download Service API and returns the information related to the current status of a\n+ * custom model. If new model available returns 200 and new model details such as the download url;\n+ * If same model is available returns 304 (not modified) Otherwise returns an error.\n+ *\n+ * @hide\n+ */\n+@RequiresApi(api = VERSION_CODES.KITKAT)\n+final class CustomModelDownloadService {\n+\n+  private static final String TAG = \"CustomModelDownloadSer\";\n+  private final ExecutorService executorService;\n+\n+  private static final int CONNECTION_TIME_OUT_MS = 2000; // 2 seconds.\n+  private static final Charset UTF_8 = StandardCharsets.UTF_8;\n+\n+  private static final String ETAG_HEADER = \"ETag\";\n+\n+  @VisibleForTesting\n+  static final String INSTALLATIONS_AUTH_TOKEN_HEADER = \"X-Goog-Firebase-Installations-Auth\";\n+\n+  @VisibleForTesting\n+  static final String DOWNLOAD_MODEL_REGEX =\n+      \"https://firebaseml.googleapis.com/Model/v1beta2/projects/%s/models/%s:download\";", "originalCommit": "70dabcac04485fb0577352d572df2e9170b46ed5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6d845a628fa40285cec7437988033054352b2394", "url": "https://github.com/firebase/firebase-android-sdk/commit/6d845a628fa40285cec7437988033054352b2394", "message": "Change to mockwire standalone - now builds locally.\nTest still needs work and code seems to actually run and not use mockwire?", "committedDate": "2020-11-10T21:53:23Z", "type": "commit"}, {"oid": "6cdfd60aea1927df4280fc63d179c4525e02a15b", "url": "https://github.com/firebase/firebase-android-sdk/commit/6cdfd60aea1927df4280fc63d179c4525e02a15b", "message": "add first working wiremock unit test.", "committedDate": "2020-11-12T16:09:29Z", "type": "commit"}, {"oid": "c4a4f366ebf023271b4a00a2ab075b8fe45eb50f", "url": "https://github.com/firebase/firebase-android-sdk/commit/c4a4f366ebf023271b4a00a2ab075b8fe45eb50f", "message": "add more wiremock unit test.", "committedDate": "2020-11-12T20:13:05Z", "type": "commit"}, {"oid": "afe92165e8bc6c0e1a3104405f8fa0823fae2b0e", "url": "https://github.com/firebase/firebase-android-sdk/commit/afe92165e8bc6c0e1a3104405f8fa0823fae2b0e", "message": "Merge branch 'master' into getModelInfo", "committedDate": "2020-11-12T22:14:50Z", "type": "commit"}, {"oid": "e9c8ed05734dc8762da444eefffb0063ff1a876c", "url": "https://github.com/firebase/firebase-android-sdk/commit/e9c8ed05734dc8762da444eefffb0063ff1a876c", "message": "Update the registrar to use CustomModelDownloadService.", "committedDate": "2020-11-13T18:55:19Z", "type": "commit"}, {"oid": "172cadcb145289ba0dc0c3a3a8a07df43650bac1", "url": "https://github.com/firebase/firebase-android-sdk/commit/172cadcb145289ba0dc0c3a3a8a07df43650bac1", "message": "Update the registrar to use CustomModelDownloadService.", "committedDate": "2020-11-13T19:09:16Z", "type": "commit"}, {"oid": "438b95811cc13bf0f23fdad56673270b8cc0ab6f", "url": "https://github.com/firebase/firebase-android-sdk/commit/438b95811cc13bf0f23fdad56673270b8cc0ab6f", "message": "Update the registrar to use CustomModelDownloadService.", "committedDate": "2020-11-13T19:11:10Z", "type": "commit"}, {"oid": "06e20c9ec7a7b926550407e8cb48892bb6840e5b", "url": "https://github.com/firebase/firebase-android-sdk/commit/06e20c9ec7a7b926550407e8cb48892bb6840e5b", "message": "Merge remote-tracking branch 'origin/getModelInfo' into getModelInfo", "committedDate": "2020-11-13T19:11:58Z", "type": "commit"}, {"oid": "0ab45169605520b1552e02fef986bfcf33cc98c7", "url": "https://github.com/firebase/firebase-android-sdk/commit/0ab45169605520b1552e02fef986bfcf33cc98c7", "message": "Update the registrar to use CustomModelDownloadService.", "committedDate": "2020-11-13T19:13:54Z", "type": "commit"}, {"oid": "0ba2ee723fc5e030dae64adb01309b0e52e6f6dd", "url": "https://github.com/firebase/firebase-android-sdk/commit/0ba2ee723fc5e030dae64adb01309b0e52e6f6dd", "message": "Fixing returned task values and tests.", "committedDate": "2020-11-13T20:00:41Z", "type": "commit"}, {"oid": "8b125a39579ffcd4cd5ff4dd75fea01dd66bc6f2", "url": "https://github.com/firebase/firebase-android-sdk/commit/8b125a39579ffcd4cd5ff4dd75fea01dd66bc6f2", "message": "Changing equals asserts.", "committedDate": "2020-11-13T20:36:03Z", "type": "commit"}, {"oid": "c5b248e23d10ef9d3a791051caeadbc6b757b130", "url": "https://github.com/firebase/firebase-android-sdk/commit/c5b248e23d10ef9d3a791051caeadbc6b757b130", "message": "Fix errors caused by timestamp issues, hardcoding to UTC as that's the correct solution.", "committedDate": "2020-11-13T21:32:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI1MDYyMA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2134#discussion_r523250620", "bodyText": "may be \"in\" instead of \"is\"? Not sure :-)", "author": "rlazo", "createdAt": "2020-11-13T21:50:16Z", "path": "firebase-ml-modeldownloader/src/main/java/com/google/firebase/ml/modeldownloader/CustomModel.java", "diffHunk": "@@ -42,7 +44,46 @@\n    */\n   public CustomModel(\n       @NonNull String name, long downloadId, long fileSize, @NonNull String modelHash) {\n-    this(name, downloadId, fileSize, modelHash, \"\");\n+    this(name, downloadId, fileSize, modelHash, \"\", \"\", 0);\n+  }\n+\n+  /**\n+   * Use when creating a custom model from a stored model with a new download is the background.", "originalCommit": "c5b248e23d10ef9d3a791051caeadbc6b757b130", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI1MDk2Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2134#discussion_r523250966", "bodyText": "spurious whitespace before tag", "author": "rlazo", "createdAt": "2020-11-13T21:51:11Z", "path": "firebase-ml-modeldownloader/src/main/java/com/google/firebase/ml/modeldownloader/CustomModel.java", "diffHunk": "@@ -130,19 +177,43 @@ public boolean equals(Object o) {\n         && Objects.equal(modelHash, other.modelHash)\n         && Objects.equal(fileSize, other.fileSize)\n         && Objects.equal(localFilePath, other.localFilePath)\n-        && Objects.equal(downloadId, other.downloadId);\n+        && Objects.equal(downloadId, other.downloadId)\n+        && Objects.equal(downloadUrl, other.downloadUrl)\n+        && Objects.equal(downloadUrlExpiry, other.downloadUrlExpiry);\n   }\n \n   @Override\n   public int hashCode() {\n-    return Objects.hashCode(name, modelHash, fileSize, localFilePath, downloadId);\n+    return Objects.hashCode(\n+        name, modelHash, fileSize, localFilePath, downloadId, downloadUrl, downloadUrlExpiry);\n+  }\n+\n+  /**\n+   * The expiry time for the current download url.\n+   *\n+   * <p>Internal use only.\n+   *\n+   * @hide\n+   */\n+  public long getDownloadUrlExpiry() {\n+    return downloadUrlExpiry;\n+  }\n+\n+  /**\n+   * @return the model download url\n+   *     <p>Internal use only", "originalCommit": "c5b248e23d10ef9d3a791051caeadbc6b757b130", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUwMjE3MA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2134#discussion_r524502170", "bodyText": "formatting adds this back", "author": "annzimmer", "createdAt": "2020-11-16T18:59:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI1MDk2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDMzMzA5Mg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2134#discussion_r524333092", "bodyText": "Although probably not a big deal, but the order of common args in this constructor and in the prev one doesn't match.", "author": "rlazo", "createdAt": "2020-11-16T15:02:16Z", "path": "firebase-ml-modeldownloader/src/main/java/com/google/firebase/ml/modeldownloader/CustomModel.java", "diffHunk": "@@ -42,7 +44,46 @@\n    */\n   public CustomModel(\n       @NonNull String name, long downloadId, long fileSize, @NonNull String modelHash) {\n-    this(name, downloadId, fileSize, modelHash, \"\");\n+    this(name, downloadId, fileSize, modelHash, \"\", \"\", 0);\n+  }\n+\n+  /**\n+   * Use when creating a custom model from a stored model with a new download is the background.\n+   *\n+   * @param name - model name\n+   * @param downloadId - Android Download Manger - download id\n+   * @param fileSize - model file size\n+   * @param modelHash - model hash size\n+   * @hide\n+   */\n+  public CustomModel(\n+      @NonNull String name,\n+      long downloadId,\n+      long fileSize,\n+      @NonNull String modelHash,\n+      String localFilePath) {\n+    this(name, downloadId, fileSize, modelHash, localFilePath, \"\", 0);\n+  }\n+\n+  /**\n+   * Use when creating a custom model from a download service response. Download url and download\n+   * url expiry should go together. These will not be stored in user preferences as this is a\n+   * temporary step towards setting the actual download id.\n+   *\n+   * @param name - model name\n+   * @param modelHash - model hash size\n+   * @param fileSize - model file size\n+   * @param downloadUrl - download url path\n+   * @param downloadUrlExpiry - time download url path expires\n+   * @hide\n+   */\n+  public CustomModel(", "originalCommit": "c5b248e23d10ef9d3a791051caeadbc6b757b130", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUwMDQ3Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2134#discussion_r524500476", "bodyText": "Good catch - made more consistent.", "author": "annzimmer", "createdAt": "2020-11-16T18:56:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDMzMzA5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDMzMzQ1MA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2134#discussion_r524333450", "bodyText": "is it the size or the hash itself?", "author": "rlazo", "createdAt": "2020-11-16T15:02:42Z", "path": "firebase-ml-modeldownloader/src/main/java/com/google/firebase/ml/modeldownloader/CustomModel.java", "diffHunk": "@@ -42,7 +44,46 @@\n    */\n   public CustomModel(\n       @NonNull String name, long downloadId, long fileSize, @NonNull String modelHash) {\n-    this(name, downloadId, fileSize, modelHash, \"\");\n+    this(name, downloadId, fileSize, modelHash, \"\", \"\", 0);\n+  }\n+\n+  /**\n+   * Use when creating a custom model from a stored model with a new download is the background.\n+   *\n+   * @param name - model name\n+   * @param downloadId - Android Download Manger - download id\n+   * @param fileSize - model file size\n+   * @param modelHash - model hash size", "originalCommit": "c5b248e23d10ef9d3a791051caeadbc6b757b130", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDMzMzQ5OA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2134#discussion_r524333498", "bodyText": "is it the size or the hash itself?", "author": "rlazo", "createdAt": "2020-11-16T15:02:46Z", "path": "firebase-ml-modeldownloader/src/main/java/com/google/firebase/ml/modeldownloader/CustomModel.java", "diffHunk": "@@ -42,7 +44,46 @@\n    */\n   public CustomModel(\n       @NonNull String name, long downloadId, long fileSize, @NonNull String modelHash) {\n-    this(name, downloadId, fileSize, modelHash, \"\");\n+    this(name, downloadId, fileSize, modelHash, \"\", \"\", 0);\n+  }\n+\n+  /**\n+   * Use when creating a custom model from a stored model with a new download is the background.\n+   *\n+   * @param name - model name\n+   * @param downloadId - Android Download Manger - download id\n+   * @param fileSize - model file size\n+   * @param modelHash - model hash size\n+   * @hide\n+   */\n+  public CustomModel(\n+      @NonNull String name,\n+      long downloadId,\n+      long fileSize,\n+      @NonNull String modelHash,\n+      String localFilePath) {\n+    this(name, downloadId, fileSize, modelHash, localFilePath, \"\", 0);\n+  }\n+\n+  /**\n+   * Use when creating a custom model from a download service response. Download url and download\n+   * url expiry should go together. These will not be stored in user preferences as this is a\n+   * temporary step towards setting the actual download id.\n+   *\n+   * @param name - model name\n+   * @param modelHash - model hash size", "originalCommit": "c5b248e23d10ef9d3a791051caeadbc6b757b130", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM0MDgzMQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2134#discussion_r524340831", "bodyText": "sgtm", "author": "rlazo", "createdAt": "2020-11-16T15:13:00Z", "path": "firebase-ml-modeldownloader/src/main/java/com/google/firebase/ml/modeldownloader/internal/CustomModelDownloadService.java", "diffHunk": "@@ -0,0 +1,296 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.ml.modeldownloader.internal;\n+\n+import android.os.Build.VERSION_CODES;\n+import android.util.JsonReader;\n+import android.util.Log;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.RequiresApi;\n+import com.google.android.gms.common.util.VisibleForTesting;\n+import com.google.android.gms.tasks.Task;\n+import com.google.android.gms.tasks.Tasks;\n+import com.google.firebase.FirebaseOptions;\n+import com.google.firebase.installations.FirebaseInstallationsApi;\n+import com.google.firebase.installations.InstallationTokenResult;\n+import com.google.firebase.ml.modeldownloader.CustomModel;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.zip.GZIPInputStream;\n+\n+/**\n+ * Calls the Download Service API and returns the information related to the current status of a\n+ * custom model. If new model available returns 200 and new model details such as the download url;\n+ * If same model is available returns 304 (not modified) Otherwise returns an error.\n+ *\n+ * @hide\n+ */\n+@RequiresApi(api = VERSION_CODES.KITKAT)\n+public final class CustomModelDownloadService {\n+\n+  private static final String TAG = \"CustomModelDownloadSer\";\n+  private final ExecutorService executorService;\n+\n+  private static final int CONNECTION_TIME_OUT_MS = 2000; // 2 seconds.\n+  private static final Charset UTF_8 = StandardCharsets.UTF_8;\n+\n+  @VisibleForTesting static final String ETAG_HEADER = \"etag\";\n+\n+  private static final String ACCEPT_ENCODING_HEADER_KEY = \"Accept-Encoding\";\n+  private static final String CONTENT_ENCODING_HEADER_KEY = \"Content-Encoding\";\n+  private static final String GZIP_CONTENT_ENCODING = \"gzip\";\n+  private static final String FIREBASE_DOWNLOAD_HOST = \"https://firebaseml.googleapis.com\";\n+  @VisibleForTesting static final String CONTENT_TYPE = \"Content-Type\";\n+  @VisibleForTesting static final String APPLICATION_JSON = \"application/json; charset=UTF-8\";\n+  @VisibleForTesting static final String IF_NONE_MATCH_HEADER_KEY = \"If-None-Match\";\n+\n+  @VisibleForTesting\n+  static final String INSTALLATIONS_AUTH_TOKEN_HEADER = \"X-Goog-Firebase-Installations-Auth\";\n+\n+  @VisibleForTesting static final String API_KEY_HEADER = \"x-goog-api-key\";\n+\n+  @VisibleForTesting\n+  static final String DOWNLOAD_MODEL_REGEX = \"%s/v1beta2/projects/%s/models/%s:download\";\n+\n+  private FirebaseInstallationsApi firebaseInstallations;\n+  private String apiKey;\n+  private String downloadHost = FIREBASE_DOWNLOAD_HOST;\n+\n+  public CustomModelDownloadService(\n+      FirebaseOptions firebaseOptions, FirebaseInstallationsApi installationsApi) {\n+    firebaseInstallations = installationsApi;\n+    apiKey = firebaseOptions.getApiKey();\n+    // is this an appropriate executor?\n+    executorService = Executors.newCachedThreadPool();", "originalCommit": "c5b248e23d10ef9d3a791051caeadbc6b757b130", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM0MjM3NQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2134#discussion_r524342375", "bodyText": "maybe a class level constant?", "author": "rlazo", "createdAt": "2020-11-16T15:15:08Z", "path": "firebase-ml-modeldownloader/src/main/java/com/google/firebase/ml/modeldownloader/internal/CustomModelDownloadService.java", "diffHunk": "@@ -0,0 +1,296 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.ml.modeldownloader.internal;\n+\n+import android.os.Build.VERSION_CODES;\n+import android.util.JsonReader;\n+import android.util.Log;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.RequiresApi;\n+import com.google.android.gms.common.util.VisibleForTesting;\n+import com.google.android.gms.tasks.Task;\n+import com.google.android.gms.tasks.Tasks;\n+import com.google.firebase.FirebaseOptions;\n+import com.google.firebase.installations.FirebaseInstallationsApi;\n+import com.google.firebase.installations.InstallationTokenResult;\n+import com.google.firebase.ml.modeldownloader.CustomModel;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.zip.GZIPInputStream;\n+\n+/**\n+ * Calls the Download Service API and returns the information related to the current status of a\n+ * custom model. If new model available returns 200 and new model details such as the download url;\n+ * If same model is available returns 304 (not modified) Otherwise returns an error.\n+ *\n+ * @hide\n+ */\n+@RequiresApi(api = VERSION_CODES.KITKAT)\n+public final class CustomModelDownloadService {\n+\n+  private static final String TAG = \"CustomModelDownloadSer\";\n+  private final ExecutorService executorService;\n+\n+  private static final int CONNECTION_TIME_OUT_MS = 2000; // 2 seconds.\n+  private static final Charset UTF_8 = StandardCharsets.UTF_8;\n+\n+  @VisibleForTesting static final String ETAG_HEADER = \"etag\";\n+\n+  private static final String ACCEPT_ENCODING_HEADER_KEY = \"Accept-Encoding\";\n+  private static final String CONTENT_ENCODING_HEADER_KEY = \"Content-Encoding\";\n+  private static final String GZIP_CONTENT_ENCODING = \"gzip\";\n+  private static final String FIREBASE_DOWNLOAD_HOST = \"https://firebaseml.googleapis.com\";\n+  @VisibleForTesting static final String CONTENT_TYPE = \"Content-Type\";\n+  @VisibleForTesting static final String APPLICATION_JSON = \"application/json; charset=UTF-8\";\n+  @VisibleForTesting static final String IF_NONE_MATCH_HEADER_KEY = \"If-None-Match\";\n+\n+  @VisibleForTesting\n+  static final String INSTALLATIONS_AUTH_TOKEN_HEADER = \"X-Goog-Firebase-Installations-Auth\";\n+\n+  @VisibleForTesting static final String API_KEY_HEADER = \"x-goog-api-key\";\n+\n+  @VisibleForTesting\n+  static final String DOWNLOAD_MODEL_REGEX = \"%s/v1beta2/projects/%s/models/%s:download\";\n+\n+  private FirebaseInstallationsApi firebaseInstallations;\n+  private String apiKey;\n+  private String downloadHost = FIREBASE_DOWNLOAD_HOST;\n+\n+  public CustomModelDownloadService(\n+      FirebaseOptions firebaseOptions, FirebaseInstallationsApi installationsApi) {\n+    firebaseInstallations = installationsApi;\n+    apiKey = firebaseOptions.getApiKey();\n+    // is this an appropriate executor?\n+    executorService = Executors.newCachedThreadPool();\n+  }\n+\n+  @VisibleForTesting\n+  CustomModelDownloadService(\n+      FirebaseInstallationsApi firebaseInstallations,\n+      ExecutorService executorService,\n+      String apiKey,\n+      String downloadHost) {\n+    this.firebaseInstallations = firebaseInstallations;\n+    this.executorService = executorService;\n+    this.apiKey = apiKey;\n+    this.downloadHost = downloadHost;\n+  }\n+\n+  /**\n+   * Calls the Firebase ML Download Service to retrieve the download url for the modelName. Use when\n+   * a download attempt fails due to an expired timestamp.\n+   *\n+   * @param projectNumber - firebase project number\n+   * @param modelName - model name\n+   * @return - updated model with new download url and expiry time\n+   * @throws Exception - errors when Firebase ML Download Service call fails.\n+   */\n+  @Nullable\n+  public Task<CustomModel> getNewDownloadUrlWithExpiry(String projectNumber, String modelName)\n+      throws Exception {\n+    return getCustomModelDetails(projectNumber, modelName, \"\");\n+  }\n+\n+  /**\n+   * Gets the download details for the custom model, returns null if the current model is the\n+   * latest.\n+   *\n+   * @param projectNumber - firebase project number\n+   * @param modelName - model name\n+   * @param modelHash - current model hash - input empty string if no current download exists or to\n+   *     force retrieval of a new download url\n+   * @return The download details for the model or null if the current model hash matches the latest\n+   *     model.\n+   * @throws Exception -errors when call to API fails.\n+   */\n+  @Nullable\n+  public Task<CustomModel> getCustomModelDetails(\n+      String projectNumber, String modelName, String modelHash) throws Exception {\n+    try {\n+      URL url =\n+          new URL(String.format(DOWNLOAD_MODEL_REGEX, downloadHost, projectNumber, modelName));\n+\n+      HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n+      connection.setConnectTimeout(CONNECTION_TIME_OUT_MS);\n+      connection.setRequestProperty(ACCEPT_ENCODING_HEADER_KEY, GZIP_CONTENT_ENCODING);\n+      connection.setRequestProperty(CONTENT_TYPE, APPLICATION_JSON);\n+      if (modelHash != null && !modelHash.isEmpty()) {\n+        connection.setRequestProperty(IF_NONE_MATCH_HEADER_KEY, modelHash);\n+      }\n+\n+      Task<InstallationTokenResult> installationAuthTokenTask =\n+          firebaseInstallations.getToken(false);\n+      return installationAuthTokenTask.continueWithTask(\n+          executorService,\n+          (CustomModelTask) -> {\n+            if (!installationAuthTokenTask.isSuccessful()) {\n+              // TODO(annz) update to better error handling (use FirebaseMLExceptions)\n+              return Tasks.forException(\n+                  new Exception(\n+                      \"Firebase Installations failed to get installation auth token for fetch.\",\n+                      installationAuthTokenTask.getException()));\n+            }\n+\n+            connection.setRequestProperty(\n+                INSTALLATIONS_AUTH_TOKEN_HEADER, installationAuthTokenTask.getResult().getToken());\n+            connection.setRequestProperty(API_KEY_HEADER, apiKey);\n+\n+            return fetchDownloadDetails(modelName, connection);\n+          });\n+\n+    } catch (Exception e) {\n+      // TODO(annz) update to better error handling (use FirebaseMLExceptions)\n+      throw new Exception(\"Error reading custom model from download service: \" + e.getMessage(), e);\n+    }\n+  }\n+\n+  @VisibleForTesting\n+  static long parseTokenExpirationTimestamp(String expiresIn) {\n+    if (expiresIn == null || expiresIn.length() == 0) {\n+      return 0;\n+    }\n+\n+    try {\n+      String isoDatePattern = \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\";\n+      SimpleDateFormat iso8601Format = new SimpleDateFormat(isoDatePattern, Locale.US);", "originalCommit": "c5b248e23d10ef9d3a791051caeadbc6b757b130", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUwMDM5NA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2134#discussion_r524500394", "bodyText": "done", "author": "annzimmer", "createdAt": "2020-11-16T18:56:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM0MjM3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM0MjY2Nw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2134#discussion_r524342667", "bodyText": "unnecessary extra line", "author": "rlazo", "createdAt": "2020-11-16T15:15:27Z", "path": "firebase-ml-modeldownloader/src/main/java/com/google/firebase/ml/modeldownloader/internal/CustomModelDownloadService.java", "diffHunk": "@@ -0,0 +1,296 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.ml.modeldownloader.internal;\n+\n+import android.os.Build.VERSION_CODES;\n+import android.util.JsonReader;\n+import android.util.Log;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.RequiresApi;\n+import com.google.android.gms.common.util.VisibleForTesting;\n+import com.google.android.gms.tasks.Task;\n+import com.google.android.gms.tasks.Tasks;\n+import com.google.firebase.FirebaseOptions;\n+import com.google.firebase.installations.FirebaseInstallationsApi;\n+import com.google.firebase.installations.InstallationTokenResult;\n+import com.google.firebase.ml.modeldownloader.CustomModel;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.zip.GZIPInputStream;\n+\n+/**\n+ * Calls the Download Service API and returns the information related to the current status of a\n+ * custom model. If new model available returns 200 and new model details such as the download url;\n+ * If same model is available returns 304 (not modified) Otherwise returns an error.\n+ *\n+ * @hide\n+ */\n+@RequiresApi(api = VERSION_CODES.KITKAT)\n+public final class CustomModelDownloadService {\n+\n+  private static final String TAG = \"CustomModelDownloadSer\";\n+  private final ExecutorService executorService;\n+\n+  private static final int CONNECTION_TIME_OUT_MS = 2000; // 2 seconds.\n+  private static final Charset UTF_8 = StandardCharsets.UTF_8;\n+\n+  @VisibleForTesting static final String ETAG_HEADER = \"etag\";\n+\n+  private static final String ACCEPT_ENCODING_HEADER_KEY = \"Accept-Encoding\";\n+  private static final String CONTENT_ENCODING_HEADER_KEY = \"Content-Encoding\";\n+  private static final String GZIP_CONTENT_ENCODING = \"gzip\";\n+  private static final String FIREBASE_DOWNLOAD_HOST = \"https://firebaseml.googleapis.com\";\n+  @VisibleForTesting static final String CONTENT_TYPE = \"Content-Type\";\n+  @VisibleForTesting static final String APPLICATION_JSON = \"application/json; charset=UTF-8\";\n+  @VisibleForTesting static final String IF_NONE_MATCH_HEADER_KEY = \"If-None-Match\";\n+\n+  @VisibleForTesting\n+  static final String INSTALLATIONS_AUTH_TOKEN_HEADER = \"X-Goog-Firebase-Installations-Auth\";\n+\n+  @VisibleForTesting static final String API_KEY_HEADER = \"x-goog-api-key\";\n+\n+  @VisibleForTesting\n+  static final String DOWNLOAD_MODEL_REGEX = \"%s/v1beta2/projects/%s/models/%s:download\";\n+\n+  private FirebaseInstallationsApi firebaseInstallations;\n+  private String apiKey;\n+  private String downloadHost = FIREBASE_DOWNLOAD_HOST;\n+\n+  public CustomModelDownloadService(\n+      FirebaseOptions firebaseOptions, FirebaseInstallationsApi installationsApi) {\n+    firebaseInstallations = installationsApi;\n+    apiKey = firebaseOptions.getApiKey();\n+    // is this an appropriate executor?\n+    executorService = Executors.newCachedThreadPool();\n+  }\n+\n+  @VisibleForTesting\n+  CustomModelDownloadService(\n+      FirebaseInstallationsApi firebaseInstallations,\n+      ExecutorService executorService,\n+      String apiKey,\n+      String downloadHost) {\n+    this.firebaseInstallations = firebaseInstallations;\n+    this.executorService = executorService;\n+    this.apiKey = apiKey;\n+    this.downloadHost = downloadHost;\n+  }\n+\n+  /**\n+   * Calls the Firebase ML Download Service to retrieve the download url for the modelName. Use when\n+   * a download attempt fails due to an expired timestamp.\n+   *\n+   * @param projectNumber - firebase project number\n+   * @param modelName - model name\n+   * @return - updated model with new download url and expiry time\n+   * @throws Exception - errors when Firebase ML Download Service call fails.\n+   */\n+  @Nullable\n+  public Task<CustomModel> getNewDownloadUrlWithExpiry(String projectNumber, String modelName)\n+      throws Exception {\n+    return getCustomModelDetails(projectNumber, modelName, \"\");\n+  }\n+\n+  /**\n+   * Gets the download details for the custom model, returns null if the current model is the\n+   * latest.\n+   *\n+   * @param projectNumber - firebase project number\n+   * @param modelName - model name\n+   * @param modelHash - current model hash - input empty string if no current download exists or to\n+   *     force retrieval of a new download url\n+   * @return The download details for the model or null if the current model hash matches the latest\n+   *     model.\n+   * @throws Exception -errors when call to API fails.\n+   */\n+  @Nullable\n+  public Task<CustomModel> getCustomModelDetails(\n+      String projectNumber, String modelName, String modelHash) throws Exception {\n+    try {\n+      URL url =\n+          new URL(String.format(DOWNLOAD_MODEL_REGEX, downloadHost, projectNumber, modelName));\n+\n+      HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n+      connection.setConnectTimeout(CONNECTION_TIME_OUT_MS);\n+      connection.setRequestProperty(ACCEPT_ENCODING_HEADER_KEY, GZIP_CONTENT_ENCODING);\n+      connection.setRequestProperty(CONTENT_TYPE, APPLICATION_JSON);\n+      if (modelHash != null && !modelHash.isEmpty()) {\n+        connection.setRequestProperty(IF_NONE_MATCH_HEADER_KEY, modelHash);\n+      }\n+\n+      Task<InstallationTokenResult> installationAuthTokenTask =\n+          firebaseInstallations.getToken(false);\n+      return installationAuthTokenTask.continueWithTask(\n+          executorService,\n+          (CustomModelTask) -> {\n+            if (!installationAuthTokenTask.isSuccessful()) {\n+              // TODO(annz) update to better error handling (use FirebaseMLExceptions)\n+              return Tasks.forException(\n+                  new Exception(\n+                      \"Firebase Installations failed to get installation auth token for fetch.\",\n+                      installationAuthTokenTask.getException()));\n+            }\n+\n+            connection.setRequestProperty(\n+                INSTALLATIONS_AUTH_TOKEN_HEADER, installationAuthTokenTask.getResult().getToken());\n+            connection.setRequestProperty(API_KEY_HEADER, apiKey);\n+\n+            return fetchDownloadDetails(modelName, connection);\n+          });\n+\n+    } catch (Exception e) {\n+      // TODO(annz) update to better error handling (use FirebaseMLExceptions)\n+      throw new Exception(\"Error reading custom model from download service: \" + e.getMessage(), e);\n+    }\n+  }\n+\n+  @VisibleForTesting\n+  static long parseTokenExpirationTimestamp(String expiresIn) {\n+    if (expiresIn == null || expiresIn.length() == 0) {\n+      return 0;\n+    }\n+\n+    try {\n+      String isoDatePattern = \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\";\n+      SimpleDateFormat iso8601Format = new SimpleDateFormat(isoDatePattern, Locale.US);\n+      iso8601Format.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+      Date date = iso8601Format.parse(expiresIn);\n+      return date.getTime();\n+    } catch (ParseException pe) {\n+      // log error and maybe throw an error\n+      Log.w(TAG, \"unable to parse datetime:\" + expiresIn, pe);\n+      return 0;\n+    }\n+  }\n+\n+  private Task<CustomModel> fetchDownloadDetails(String modelName, HttpURLConnection connection)\n+      throws Exception {\n+", "originalCommit": "c5b248e23d10ef9d3a791051caeadbc6b757b130", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM0NjE4OQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2134#discussion_r524346189", "bodyText": "conditional could be simpler as\nif (httpResponseCode == HttpURLConnection.HTTP_OK) {\n  return Tasks.forResult(readCustomModelResponse(modelName, connection));\n}\nif (httpResponseCode == HttpURLConnection.HTTP_NOT_MODIFIED) {\n  return Tasks.forResult(null)\n}\n\n// handle error", "author": "rlazo", "createdAt": "2020-11-16T15:20:20Z", "path": "firebase-ml-modeldownloader/src/main/java/com/google/firebase/ml/modeldownloader/internal/CustomModelDownloadService.java", "diffHunk": "@@ -0,0 +1,296 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.ml.modeldownloader.internal;\n+\n+import android.os.Build.VERSION_CODES;\n+import android.util.JsonReader;\n+import android.util.Log;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.RequiresApi;\n+import com.google.android.gms.common.util.VisibleForTesting;\n+import com.google.android.gms.tasks.Task;\n+import com.google.android.gms.tasks.Tasks;\n+import com.google.firebase.FirebaseOptions;\n+import com.google.firebase.installations.FirebaseInstallationsApi;\n+import com.google.firebase.installations.InstallationTokenResult;\n+import com.google.firebase.ml.modeldownloader.CustomModel;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.zip.GZIPInputStream;\n+\n+/**\n+ * Calls the Download Service API and returns the information related to the current status of a\n+ * custom model. If new model available returns 200 and new model details such as the download url;\n+ * If same model is available returns 304 (not modified) Otherwise returns an error.\n+ *\n+ * @hide\n+ */\n+@RequiresApi(api = VERSION_CODES.KITKAT)\n+public final class CustomModelDownloadService {\n+\n+  private static final String TAG = \"CustomModelDownloadSer\";\n+  private final ExecutorService executorService;\n+\n+  private static final int CONNECTION_TIME_OUT_MS = 2000; // 2 seconds.\n+  private static final Charset UTF_8 = StandardCharsets.UTF_8;\n+\n+  @VisibleForTesting static final String ETAG_HEADER = \"etag\";\n+\n+  private static final String ACCEPT_ENCODING_HEADER_KEY = \"Accept-Encoding\";\n+  private static final String CONTENT_ENCODING_HEADER_KEY = \"Content-Encoding\";\n+  private static final String GZIP_CONTENT_ENCODING = \"gzip\";\n+  private static final String FIREBASE_DOWNLOAD_HOST = \"https://firebaseml.googleapis.com\";\n+  @VisibleForTesting static final String CONTENT_TYPE = \"Content-Type\";\n+  @VisibleForTesting static final String APPLICATION_JSON = \"application/json; charset=UTF-8\";\n+  @VisibleForTesting static final String IF_NONE_MATCH_HEADER_KEY = \"If-None-Match\";\n+\n+  @VisibleForTesting\n+  static final String INSTALLATIONS_AUTH_TOKEN_HEADER = \"X-Goog-Firebase-Installations-Auth\";\n+\n+  @VisibleForTesting static final String API_KEY_HEADER = \"x-goog-api-key\";\n+\n+  @VisibleForTesting\n+  static final String DOWNLOAD_MODEL_REGEX = \"%s/v1beta2/projects/%s/models/%s:download\";\n+\n+  private FirebaseInstallationsApi firebaseInstallations;\n+  private String apiKey;\n+  private String downloadHost = FIREBASE_DOWNLOAD_HOST;\n+\n+  public CustomModelDownloadService(\n+      FirebaseOptions firebaseOptions, FirebaseInstallationsApi installationsApi) {\n+    firebaseInstallations = installationsApi;\n+    apiKey = firebaseOptions.getApiKey();\n+    // is this an appropriate executor?\n+    executorService = Executors.newCachedThreadPool();\n+  }\n+\n+  @VisibleForTesting\n+  CustomModelDownloadService(\n+      FirebaseInstallationsApi firebaseInstallations,\n+      ExecutorService executorService,\n+      String apiKey,\n+      String downloadHost) {\n+    this.firebaseInstallations = firebaseInstallations;\n+    this.executorService = executorService;\n+    this.apiKey = apiKey;\n+    this.downloadHost = downloadHost;\n+  }\n+\n+  /**\n+   * Calls the Firebase ML Download Service to retrieve the download url for the modelName. Use when\n+   * a download attempt fails due to an expired timestamp.\n+   *\n+   * @param projectNumber - firebase project number\n+   * @param modelName - model name\n+   * @return - updated model with new download url and expiry time\n+   * @throws Exception - errors when Firebase ML Download Service call fails.\n+   */\n+  @Nullable\n+  public Task<CustomModel> getNewDownloadUrlWithExpiry(String projectNumber, String modelName)\n+      throws Exception {\n+    return getCustomModelDetails(projectNumber, modelName, \"\");\n+  }\n+\n+  /**\n+   * Gets the download details for the custom model, returns null if the current model is the\n+   * latest.\n+   *\n+   * @param projectNumber - firebase project number\n+   * @param modelName - model name\n+   * @param modelHash - current model hash - input empty string if no current download exists or to\n+   *     force retrieval of a new download url\n+   * @return The download details for the model or null if the current model hash matches the latest\n+   *     model.\n+   * @throws Exception -errors when call to API fails.\n+   */\n+  @Nullable\n+  public Task<CustomModel> getCustomModelDetails(\n+      String projectNumber, String modelName, String modelHash) throws Exception {\n+    try {\n+      URL url =\n+          new URL(String.format(DOWNLOAD_MODEL_REGEX, downloadHost, projectNumber, modelName));\n+\n+      HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n+      connection.setConnectTimeout(CONNECTION_TIME_OUT_MS);\n+      connection.setRequestProperty(ACCEPT_ENCODING_HEADER_KEY, GZIP_CONTENT_ENCODING);\n+      connection.setRequestProperty(CONTENT_TYPE, APPLICATION_JSON);\n+      if (modelHash != null && !modelHash.isEmpty()) {\n+        connection.setRequestProperty(IF_NONE_MATCH_HEADER_KEY, modelHash);\n+      }\n+\n+      Task<InstallationTokenResult> installationAuthTokenTask =\n+          firebaseInstallations.getToken(false);\n+      return installationAuthTokenTask.continueWithTask(\n+          executorService,\n+          (CustomModelTask) -> {\n+            if (!installationAuthTokenTask.isSuccessful()) {\n+              // TODO(annz) update to better error handling (use FirebaseMLExceptions)\n+              return Tasks.forException(\n+                  new Exception(\n+                      \"Firebase Installations failed to get installation auth token for fetch.\",\n+                      installationAuthTokenTask.getException()));\n+            }\n+\n+            connection.setRequestProperty(\n+                INSTALLATIONS_AUTH_TOKEN_HEADER, installationAuthTokenTask.getResult().getToken());\n+            connection.setRequestProperty(API_KEY_HEADER, apiKey);\n+\n+            return fetchDownloadDetails(modelName, connection);\n+          });\n+\n+    } catch (Exception e) {\n+      // TODO(annz) update to better error handling (use FirebaseMLExceptions)\n+      throw new Exception(\"Error reading custom model from download service: \" + e.getMessage(), e);\n+    }\n+  }\n+\n+  @VisibleForTesting\n+  static long parseTokenExpirationTimestamp(String expiresIn) {\n+    if (expiresIn == null || expiresIn.length() == 0) {\n+      return 0;\n+    }\n+\n+    try {\n+      String isoDatePattern = \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\";\n+      SimpleDateFormat iso8601Format = new SimpleDateFormat(isoDatePattern, Locale.US);\n+      iso8601Format.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+      Date date = iso8601Format.parse(expiresIn);\n+      return date.getTime();\n+    } catch (ParseException pe) {\n+      // log error and maybe throw an error\n+      Log.w(TAG, \"unable to parse datetime:\" + expiresIn, pe);\n+      return 0;\n+    }\n+  }\n+\n+  private Task<CustomModel> fetchDownloadDetails(String modelName, HttpURLConnection connection)\n+      throws Exception {\n+\n+    connection.connect();\n+    int httpResponseCode = connection.getResponseCode();\n+\n+    if ((httpResponseCode != HttpURLConnection.HTTP_OK)\n+        && (httpResponseCode != HttpURLConnection.HTTP_NOT_MODIFIED)) {\n+      String errorMessage = getErrorStream(connection);\n+\n+      // todo(annz) add more specific error handling. NOT_FOUND, etc.\n+      return Tasks.forException(\n+          new Exception(\n+              String.format(\n+                  Locale.getDefault(),\n+                  \"Failed to connect to Firebase ML download server with HTTP status code: %d\"\n+                      + \" and error message: %s\",\n+                  connection.getResponseCode(),\n+                  errorMessage)));\n+    } else if (httpResponseCode == HttpURLConnection.HTTP_NOT_MODIFIED) {", "originalCommit": "c5b248e23d10ef9d3a791051caeadbc6b757b130", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUwMDI5NA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2134#discussion_r524500294", "bodyText": "updated.", "author": "annzimmer", "createdAt": "2020-11-16T18:56:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM0NjE4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2NjEwNA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2134#discussion_r524366104", "bodyText": "Use b/79920590\n(other instances fixed in #2174)", "author": "rlazo", "createdAt": "2020-11-16T15:45:31Z", "path": "firebase-ml-modeldownloader/src/main/java/com/google/firebase/ml/modeldownloader/internal/CustomModelDownloadService.java", "diffHunk": "@@ -0,0 +1,296 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.ml.modeldownloader.internal;\n+\n+import android.os.Build.VERSION_CODES;\n+import android.util.JsonReader;\n+import android.util.Log;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.RequiresApi;\n+import com.google.android.gms.common.util.VisibleForTesting;\n+import com.google.android.gms.tasks.Task;\n+import com.google.android.gms.tasks.Tasks;\n+import com.google.firebase.FirebaseOptions;\n+import com.google.firebase.installations.FirebaseInstallationsApi;\n+import com.google.firebase.installations.InstallationTokenResult;\n+import com.google.firebase.ml.modeldownloader.CustomModel;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.zip.GZIPInputStream;\n+\n+/**\n+ * Calls the Download Service API and returns the information related to the current status of a\n+ * custom model. If new model available returns 200 and new model details such as the download url;\n+ * If same model is available returns 304 (not modified) Otherwise returns an error.\n+ *\n+ * @hide\n+ */\n+@RequiresApi(api = VERSION_CODES.KITKAT)\n+public final class CustomModelDownloadService {\n+\n+  private static final String TAG = \"CustomModelDownloadSer\";\n+  private final ExecutorService executorService;\n+\n+  private static final int CONNECTION_TIME_OUT_MS = 2000; // 2 seconds.\n+  private static final Charset UTF_8 = StandardCharsets.UTF_8;\n+\n+  @VisibleForTesting static final String ETAG_HEADER = \"etag\";\n+\n+  private static final String ACCEPT_ENCODING_HEADER_KEY = \"Accept-Encoding\";\n+  private static final String CONTENT_ENCODING_HEADER_KEY = \"Content-Encoding\";\n+  private static final String GZIP_CONTENT_ENCODING = \"gzip\";\n+  private static final String FIREBASE_DOWNLOAD_HOST = \"https://firebaseml.googleapis.com\";\n+  @VisibleForTesting static final String CONTENT_TYPE = \"Content-Type\";\n+  @VisibleForTesting static final String APPLICATION_JSON = \"application/json; charset=UTF-8\";\n+  @VisibleForTesting static final String IF_NONE_MATCH_HEADER_KEY = \"If-None-Match\";\n+\n+  @VisibleForTesting\n+  static final String INSTALLATIONS_AUTH_TOKEN_HEADER = \"X-Goog-Firebase-Installations-Auth\";\n+\n+  @VisibleForTesting static final String API_KEY_HEADER = \"x-goog-api-key\";\n+\n+  @VisibleForTesting\n+  static final String DOWNLOAD_MODEL_REGEX = \"%s/v1beta2/projects/%s/models/%s:download\";\n+\n+  private FirebaseInstallationsApi firebaseInstallations;\n+  private String apiKey;\n+  private String downloadHost = FIREBASE_DOWNLOAD_HOST;\n+\n+  public CustomModelDownloadService(\n+      FirebaseOptions firebaseOptions, FirebaseInstallationsApi installationsApi) {\n+    firebaseInstallations = installationsApi;\n+    apiKey = firebaseOptions.getApiKey();\n+    // is this an appropriate executor?\n+    executorService = Executors.newCachedThreadPool();\n+  }\n+\n+  @VisibleForTesting\n+  CustomModelDownloadService(\n+      FirebaseInstallationsApi firebaseInstallations,\n+      ExecutorService executorService,\n+      String apiKey,\n+      String downloadHost) {\n+    this.firebaseInstallations = firebaseInstallations;\n+    this.executorService = executorService;\n+    this.apiKey = apiKey;\n+    this.downloadHost = downloadHost;\n+  }\n+\n+  /**\n+   * Calls the Firebase ML Download Service to retrieve the download url for the modelName. Use when\n+   * a download attempt fails due to an expired timestamp.\n+   *\n+   * @param projectNumber - firebase project number\n+   * @param modelName - model name\n+   * @return - updated model with new download url and expiry time\n+   * @throws Exception - errors when Firebase ML Download Service call fails.\n+   */\n+  @Nullable\n+  public Task<CustomModel> getNewDownloadUrlWithExpiry(String projectNumber, String modelName)\n+      throws Exception {\n+    return getCustomModelDetails(projectNumber, modelName, \"\");\n+  }\n+\n+  /**\n+   * Gets the download details for the custom model, returns null if the current model is the\n+   * latest.\n+   *\n+   * @param projectNumber - firebase project number\n+   * @param modelName - model name\n+   * @param modelHash - current model hash - input empty string if no current download exists or to\n+   *     force retrieval of a new download url\n+   * @return The download details for the model or null if the current model hash matches the latest\n+   *     model.\n+   * @throws Exception -errors when call to API fails.\n+   */\n+  @Nullable\n+  public Task<CustomModel> getCustomModelDetails(\n+      String projectNumber, String modelName, String modelHash) throws Exception {\n+    try {\n+      URL url =\n+          new URL(String.format(DOWNLOAD_MODEL_REGEX, downloadHost, projectNumber, modelName));\n+\n+      HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n+      connection.setConnectTimeout(CONNECTION_TIME_OUT_MS);\n+      connection.setRequestProperty(ACCEPT_ENCODING_HEADER_KEY, GZIP_CONTENT_ENCODING);\n+      connection.setRequestProperty(CONTENT_TYPE, APPLICATION_JSON);\n+      if (modelHash != null && !modelHash.isEmpty()) {\n+        connection.setRequestProperty(IF_NONE_MATCH_HEADER_KEY, modelHash);\n+      }\n+\n+      Task<InstallationTokenResult> installationAuthTokenTask =\n+          firebaseInstallations.getToken(false);\n+      return installationAuthTokenTask.continueWithTask(\n+          executorService,\n+          (CustomModelTask) -> {\n+            if (!installationAuthTokenTask.isSuccessful()) {\n+              // TODO(annz) update to better error handling (use FirebaseMLExceptions)\n+              return Tasks.forException(\n+                  new Exception(\n+                      \"Firebase Installations failed to get installation auth token for fetch.\",\n+                      installationAuthTokenTask.getException()));\n+            }\n+\n+            connection.setRequestProperty(\n+                INSTALLATIONS_AUTH_TOKEN_HEADER, installationAuthTokenTask.getResult().getToken());\n+            connection.setRequestProperty(API_KEY_HEADER, apiKey);\n+\n+            return fetchDownloadDetails(modelName, connection);\n+          });\n+\n+    } catch (Exception e) {\n+      // TODO(annz) update to better error handling (use FirebaseMLExceptions)\n+      throw new Exception(\"Error reading custom model from download service: \" + e.getMessage(), e);\n+    }\n+  }\n+\n+  @VisibleForTesting\n+  static long parseTokenExpirationTimestamp(String expiresIn) {\n+    if (expiresIn == null || expiresIn.length() == 0) {\n+      return 0;\n+    }\n+\n+    try {\n+      String isoDatePattern = \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\";\n+      SimpleDateFormat iso8601Format = new SimpleDateFormat(isoDatePattern, Locale.US);\n+      iso8601Format.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+      Date date = iso8601Format.parse(expiresIn);\n+      return date.getTime();\n+    } catch (ParseException pe) {\n+      // log error and maybe throw an error\n+      Log.w(TAG, \"unable to parse datetime:\" + expiresIn, pe);\n+      return 0;\n+    }\n+  }\n+\n+  private Task<CustomModel> fetchDownloadDetails(String modelName, HttpURLConnection connection)\n+      throws Exception {\n+\n+    connection.connect();\n+    int httpResponseCode = connection.getResponseCode();\n+\n+    if ((httpResponseCode != HttpURLConnection.HTTP_OK)\n+        && (httpResponseCode != HttpURLConnection.HTTP_NOT_MODIFIED)) {\n+      String errorMessage = getErrorStream(connection);\n+\n+      // todo(annz) add more specific error handling. NOT_FOUND, etc.\n+      return Tasks.forException(\n+          new Exception(\n+              String.format(\n+                  Locale.getDefault(),\n+                  \"Failed to connect to Firebase ML download server with HTTP status code: %d\"\n+                      + \" and error message: %s\",\n+                  connection.getResponseCode(),\n+                  errorMessage)));\n+    } else if (httpResponseCode == HttpURLConnection.HTTP_NOT_MODIFIED) {\n+      return Tasks.forResult(null);\n+    }\n+\n+    return Tasks.forResult(readCustomModelResponse(modelName, connection));\n+  }\n+\n+  private CustomModel readCustomModelResponse(\n+      @NonNull String modelName, HttpURLConnection connection) throws IOException {\n+\n+    String encodingKey = connection.getHeaderField(CONTENT_ENCODING_HEADER_KEY);\n+    InputStream inputStream = maybeUnGzip(connection.getInputStream(), encodingKey);\n+    JsonReader reader = new JsonReader(new InputStreamReader(inputStream, UTF_8));\n+    long fileSize = 0L;\n+    String downloadUrl = \"\";\n+    long expireTime = 0L;\n+\n+    String modelHash = maybeUnGzipHeader(connection.getHeaderField(ETAG_HEADER), encodingKey);\n+\n+    if (modelHash == null || modelHash.isEmpty()) {\n+      // todo(annz) replace this...\n+      modelHash = connection.getResponseMessage();\n+    }\n+\n+    // JsonReader.peek will sometimes throw AssertionErrors in Android 8.0 and above. See\n+    // https://b.corp.google.com/issues/79920590 for details.", "originalCommit": "c5b248e23d10ef9d3a791051caeadbc6b757b130", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUwMDI3Mg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2134#discussion_r524500272", "bodyText": "Done.", "author": "annzimmer", "createdAt": "2020-11-16T18:56:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2NjEwNA=="}], "type": "inlineReview"}, {"oid": "aca332d5f6a59ba0397d610221024a9da59438d3", "url": "https://github.com/firebase/firebase-android-sdk/commit/aca332d5f6a59ba0397d610221024a9da59438d3", "message": "Reviewer request updates.", "committedDate": "2020-11-16T18:28:39Z", "type": "commit"}, {"oid": "2178f9307c8661446c8912f6ec6174e215cd1e19", "url": "https://github.com/firebase/firebase-android-sdk/commit/2178f9307c8661446c8912f6ec6174e215cd1e19", "message": "Reviewer request updates.", "committedDate": "2020-11-16T18:55:25Z", "type": "commit"}, {"oid": "b3c77f199a524c843635b592473aa2946ba28931", "url": "https://github.com/firebase/firebase-android-sdk/commit/b3c77f199a524c843635b592473aa2946ba28931", "message": "Reviewer request updates.", "committedDate": "2020-11-16T18:57:55Z", "type": "commit"}]}