{"pr_number": 2352, "pr_title": "HDFS-15607. Create trash dir when allowing snapshottable dir", "pr_createdAt": "2020-09-30T07:36:14Z", "pr_url": "https://github.com/apache/hadoop/pull/2352", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQwOTIzNg==", "url": "https://github.com/apache/hadoop/pull/2352#discussion_r497409236", "bodyText": "should it be even allowed to create a .Trash file inside a snapshottable root?", "author": "bshashikant", "createdAt": "2020-09-30T10:35:32Z", "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java", "diffHunk": "@@ -2094,6 +2103,41 @@ public Void next(final FileSystem fs, final Path p)\n     }.resolve(this, absF);\n   }\n \n+  /**\n+   * Helper function to check if a trash root exists in the given directory,\n+   * remove the trash root if it is empty, or throw IOException if not empty\n+   * @param p Path to a directory.\n+   */\n+  private void checkTrashRootAndRemoveIfEmpty(final Path p) throws IOException {\n+    Path trashRoot = new Path(p, FileSystem.TRASH_PREFIX);\n+    try {\n+      // listStatus has 4 possible outcomes here:\n+      // 1) throws FileNotFoundException: the trash root doesn't exist.\n+      // 2) returns empty array: the trash path is an empty directory.\n+      // 3) returns non-empty array, len >= 2: the trash root is not empty.\n+      // 4) returns non-empty array, len == 1:\n+      //    i) if the element's path is exactly p, the trash path is not a dir.\n+      //       e.g. a file named .Trash. Ignore.\n+      //   ii) if the element's path isn't p, the trash root is not empty.\n+      FileStatus[] fileStatuses = listStatus(trashRoot);\n+      if (fileStatuses.length == 0) {\n+        DFSClient.LOG.debug(\"Removing empty trash root {}\", trashRoot);\n+        delete(trashRoot, false);\n+      } else {\n+        if (fileStatuses.length == 1\n+            && !fileStatuses[0].isDirectory()\n+            && !fileStatuses[0].getPath().equals(p)) {\n+          // Ignore the trash path because it is not a directory.\n+          DFSClient.LOG.warn(\"{} is not a directory.\", trashRoot);", "originalCommit": "b20640f3dc8c6cb4ca26ba7971d5bc4026db077c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcyMDY0OQ==", "url": "https://github.com/apache/hadoop/pull/2352#discussion_r497720649", "bodyText": "I get your point. But I don't think it is worth it to prevent the user from doing so. At best, we can throw some client-side warnings when the user is attempting to do so.\nThere are so many ways to circumvent this that I can think of so far if the user really wants to: the user could create the .Trash file before allowing snapshot, rename .Trash file from another place.\nEven if we have placed restrictions on a newer version of HDFS NameNode, they might have already created the .Trash before the NN upgrade.\nAlso, regular user trash also faces the same issue.\n$ hdfs dfs -touch hdfs://127.0.0.1:9999/user/smeng/.Trash\n$ hdfs dfs -touch hdfs://127.0.0.1:9999/file3\n$ hdfs dfs -rm hdfs://127.0.0.1:9999/file3\n2020-09-30 11:27:43,062 WARN fs.TrashPolicyDefault: Can't create trash directory: hdfs://127.0.0.1:9999/user/smeng/.Trash/Current\norg.apache.hadoop.fs.ParentNotDirectoryException: /user/smeng/.Trash (is not a directory)\n\tat org.apache.hadoop.hdfs.server.namenode.FSPermissionChecker.checkIsDirectory(FSPermissionChecker.java:743)\n...\nrm: Failed to move to trash: hdfs://127.0.0.1:9999/file3: /user/smeng/.Trash (is not a directory)\n\nAnother point is, trash is mostly a client-side feature. The client should still have some freedom to do something with it.\nIt is a bit sarcastic for me to say this cause I myself have made so many changes to intervene the trash usage :D.\nAt least creating this .Trash file shouldn't cause harm. It just fails, gloriously, if it is a file and someone is trying to move to that trash.\nOr, maybe the admin would do this intentionally to prevent users from using trash inside that specific snapshot directory?", "author": "smengcl", "createdAt": "2020-09-30T18:36:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQwOTIzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ0OTYwNw==", "url": "https://github.com/apache/hadoop/pull/2352#discussion_r497449607", "bodyText": "Should isSnapshotTrashRootEnabled be checked here?  If isSnapshotTrashRootEnabled == false, all the provisionSnapshottableDirTrash calls should fail.", "author": "szetszwo", "createdAt": "2020-09-30T11:54:27Z", "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java", "diffHunk": "@@ -2901,6 +2945,74 @@ private void provisionEZTrash(String path, FsPermission trashPermission)\n     setPermission(trashPath, trashPermission);\n   }\n \n+  /**\n+   * HDFS only.\n+   * \n+   * Provision snapshottable directory trash.\n+   * @param path Path to a snapshottable directory.\n+   * @param trashPermission Expected FsPermission of the trash root.\n+   * @throws IOException\n+   */\n+  public void provisionSnapshottableDirTrash(final Path path,\n+      final FsPermission trashPermission) throws IOException {\n+    Path absF = fixRelativePart(path);\n+    new FileSystemLinkResolver<Void>() {\n+      @Override\n+      public Void doCall(Path p) throws IOException {\n+        provisionSnapshottableDirTrash(getPathName(p), trashPermission);\n+        return null;\n+      }\n+\n+      @Override\n+      public Void next(FileSystem fs, Path p) throws IOException {\n+        if (fs instanceof DistributedFileSystem) {\n+          DistributedFileSystem myDfs = (DistributedFileSystem)fs;\n+          myDfs.provisionSnapshottableDirTrash(p, trashPermission);\n+          return null;\n+        }\n+        throw new UnsupportedOperationException(\n+            \"Cannot provisionSnapshottableDirTrash through a symlink to\" +\n+            \" a non-DistributedFileSystem: \" + fs + \" -> \" + p);\n+      }\n+    }.resolve(this, absF);\n+  }\n+\n+  private void provisionSnapshottableDirTrash(\n+      String pathStr, FsPermission trashPermission) throws IOException {\n+    Path path = new Path(pathStr);", "originalCommit": "b20640f3dc8c6cb4ca26ba7971d5bc4026db077c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzczMTIzOA==", "url": "https://github.com/apache/hadoop/pull/2352#discussion_r497731238", "bodyText": "Hi Nicholas, thanks for reviewing the patch.\nI thought about placing the check, but I eventually didn't. Only admins can use it since this is a dfsadmin command. Maybe the admin just want to provision snapshot trash before restarting the NameNode to enable snapshot trash root.\nThat being said, I want to add a warning if isSnapshotTrashRootEnabled == false when running this command. So the admin can be reminded. What do you think?", "author": "smengcl", "createdAt": "2020-09-30T18:55:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ0OTYwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg4MjYyMw==", "url": "https://github.com/apache/hadoop/pull/2352#discussion_r497882623", "bodyText": "Sure, adding a warning sounds good.", "author": "szetszwo", "createdAt": "2020-10-01T00:37:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ0OTYwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ1MTA4NA==", "url": "https://github.com/apache/hadoop/pull/2352#discussion_r497451084", "bodyText": "Use the constant HdfsAdmin.TRASH_PERMISSION instead of harding coding it.", "author": "szetszwo", "createdAt": "2020-09-30T11:57:23Z", "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java", "diffHunk": "@@ -1245,6 +1265,10 @@ private void printHelp(String cmd) {\n     String disallowSnapshot = \"-disallowSnapshot <snapshotDir>:\\n\" +\n         \"\\tDo not allow snapshots to be taken on a directory any more.\\n\";\n \n+    String provisionSnapshotTrash = \"-provisionSnapshotTrash <snapshotDir>:\\n\" +\n+        \"\\tProvision trash root in a snapshottable directory with permission\"\n+        + \"\\t777 and sticky bit.\\n\";", "originalCommit": "b20640f3dc8c6cb4ca26ba7971d5bc4026db077c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzczMzI3OA==", "url": "https://github.com/apache/hadoop/pull/2352#discussion_r497733278", "bodyText": "done. made HdfsAdmin.TRASH_PERMISSION public for this.", "author": "smengcl", "createdAt": "2020-09-30T18:59:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ1MTA4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ1MjQxMg==", "url": "https://github.com/apache/hadoop/pull/2352#discussion_r497452412", "bodyText": "Return the trash path.", "author": "szetszwo", "createdAt": "2020-09-30T11:59:50Z", "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java", "diffHunk": "@@ -2901,6 +2945,74 @@ private void provisionEZTrash(String path, FsPermission trashPermission)\n     setPermission(trashPath, trashPermission);\n   }\n \n+  /**\n+   * HDFS only.\n+   * \n+   * Provision snapshottable directory trash.\n+   * @param path Path to a snapshottable directory.\n+   * @param trashPermission Expected FsPermission of the trash root.\n+   * @throws IOException\n+   */\n+  public void provisionSnapshottableDirTrash(final Path path,\n+      final FsPermission trashPermission) throws IOException {\n+    Path absF = fixRelativePart(path);\n+    new FileSystemLinkResolver<Void>() {\n+      @Override\n+      public Void doCall(Path p) throws IOException {\n+        provisionSnapshottableDirTrash(getPathName(p), trashPermission);\n+        return null;\n+      }\n+\n+      @Override\n+      public Void next(FileSystem fs, Path p) throws IOException {\n+        if (fs instanceof DistributedFileSystem) {\n+          DistributedFileSystem myDfs = (DistributedFileSystem)fs;\n+          myDfs.provisionSnapshottableDirTrash(p, trashPermission);\n+          return null;\n+        }\n+        throw new UnsupportedOperationException(\n+            \"Cannot provisionSnapshottableDirTrash through a symlink to\" +\n+            \" a non-DistributedFileSystem: \" + fs + \" -> \" + p);\n+      }\n+    }.resolve(this, absF);\n+  }\n+\n+  private void provisionSnapshottableDirTrash(", "originalCommit": "b20640f3dc8c6cb4ca26ba7971d5bc4026db077c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ1MzMyNA==", "url": "https://github.com/apache/hadoop/pull/2352#discussion_r497453324", "bodyText": "Return the trash path.", "author": "szetszwo", "createdAt": "2020-09-30T12:01:32Z", "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java", "diffHunk": "@@ -2901,6 +2945,74 @@ private void provisionEZTrash(String path, FsPermission trashPermission)\n     setPermission(trashPath, trashPermission);\n   }\n \n+  /**\n+   * HDFS only.\n+   * \n+   * Provision snapshottable directory trash.\n+   * @param path Path to a snapshottable directory.\n+   * @param trashPermission Expected FsPermission of the trash root.\n+   * @throws IOException\n+   */\n+  public void provisionSnapshottableDirTrash(final Path path,", "originalCommit": "b20640f3dc8c6cb4ca26ba7971d5bc4026db077c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ1MzYzNw==", "url": "https://github.com/apache/hadoop/pull/2352#discussion_r497453637", "bodyText": "Print out the trash path.", "author": "szetszwo", "createdAt": "2020-09-30T12:02:05Z", "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java", "diffHunk": "@@ -782,14 +784,32 @@ public void allowSnapshot(String[] argv) throws IOException {\n    */\n   public void disallowSnapshot(String[] argv) throws IOException {\n     Path p = new Path(argv[1]);\n-    final DistributedFileSystem dfs = AdminHelper.getDFS(p.toUri(), getConf());\n+    final HdfsAdmin admin = new HdfsAdmin(p.toUri(), getConf());\n     try {\n-      dfs.disallowSnapshot(p);\n+      admin.disallowSnapshot(p);\n     } catch (SnapshotException e) {\n       throw new RemoteException(e.getClass().getName(), e.getMessage());\n     }\n     System.out.println(\"Disallowing snapshot on \" + argv[1] + \" succeeded\");\n   }\n+\n+  /**\n+   * Provision trash root in a snapshottable directory.\n+   * Usage: hdfs dfsadmin -provisionSnapshotTrash snapshotDir\n+   * @param argv List of of command line parameters.\n+   * @exception IOException\n+   */\n+  public void provisionSnapshotTrash(String[] argv) throws IOException {\n+    Path p = new Path(argv[1]);\n+    final HdfsAdmin admin = new HdfsAdmin(p.toUri(), getConf());\n+    try {\n+      admin.provisionSnapshottableDirTrash(p);\n+    } catch (SnapshotException e) {\n+      throw new RemoteException(e.getClass().getName(), e.getMessage());\n+    }\n+    System.out.println(\"Provision of snapshot trash in \" + argv[1] +", "originalCommit": "b20640f3dc8c6cb4ca26ba7971d5bc4026db077c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3bb23eff179cdb78e903936982a1a0f6822eb762", "url": "https://github.com/apache/hadoop/commit/3bb23eff179cdb78e903936982a1a0f6822eb762", "message": "Implement provisionSnapshottableDirTrash;\nadd new dfsadmin command;\nadd test in TestDistributedFileSystem.\n\nChange-Id: I09cf74a13168af6f448b85a60808ee4d3068041f", "committedDate": "2020-10-02T19:15:35Z", "type": "commit"}, {"oid": "aded6c64ba4d1f65d4bd0eea6bfc2d9f49053b6a", "url": "https://github.com/apache/hadoop/commit/aded6c64ba4d1f65d4bd0eea6bfc2d9f49053b6a", "message": "Add test TestDFSAdmin#testAllowDisallowSnapshot.\n\nChange-Id: If7ead8db1e2f515777d2ddc9ca5af914ddc58d2a", "committedDate": "2020-10-02T19:15:35Z", "type": "commit"}, {"oid": "4458fc4ac16084af8d3bc562e41ad2274f0bd9e7", "url": "https://github.com/apache/hadoop/commit/4458fc4ac16084af8d3bc562e41ad2274f0bd9e7", "message": "provisionSnapshottableDirTrash now returns Path.\n\nChange-Id: I6f662871c877aecbf1734c21d64b454df97b2a58", "committedDate": "2020-10-02T19:15:35Z", "type": "commit"}, {"oid": "0e66cb598b93ff0d28dcc00bec2148c14db2c6ee", "url": "https://github.com/apache/hadoop/commit/0e66cb598b93ff0d28dcc00bec2148c14db2c6ee", "message": "Address checkstyle/whitespace.\n\nChange-Id: I1016a08ecd00cefcb8225cf07d21a5047cda9c2c", "committedDate": "2020-10-02T19:15:35Z", "type": "commit"}, {"oid": "f8f0c1af9e73d30e3d1296bfb5c58d3e541099ff", "url": "https://github.com/apache/hadoop/commit/f8f0c1af9e73d30e3d1296bfb5c58d3e541099ff", "message": "Rename provisionSnapshottableDirTrash to provisionSnapshotTrash; Add warning if snapshot trash root is disabled when provisioning trash.\n\nChange-Id: I26f40b6e8296bcd3c3b26c2187d4d942dbf99887", "committedDate": "2020-10-02T19:15:35Z", "type": "commit"}, {"oid": "f36217b2bfd4f0623906da8db3b2a80fa0c2f994", "url": "https://github.com/apache/hadoop/commit/f36217b2bfd4f0623906da8db3b2a80fa0c2f994", "message": "Improve warning message.\n\nChange-Id: I31e2236a6e96ef8bd2e94e09a57f4ef74c5996e7", "committedDate": "2020-10-02T19:15:35Z", "type": "commit"}, {"oid": "5d71f9eab1f74010ba79902b5843d47ae8a4fad4", "url": "https://github.com/apache/hadoop/commit/5d71f9eab1f74010ba79902b5843d47ae8a4fad4", "message": "Fix existing test; checkstyle.\n\nChange-Id: Icf8eee168afa3becb122cb5a7d82da89dae20f0e", "committedDate": "2020-10-02T19:15:35Z", "type": "commit"}, {"oid": "9878c4eed46d7f0bd7480e43e87529c346b2e099", "url": "https://github.com/apache/hadoop/commit/9878c4eed46d7f0bd7480e43e87529c346b2e099", "message": "Fix TestViewFileSystemOverloadSchemeWithDFSAdmin#testAllowAndDisalllowSnapShot failure.\n\nChange-Id: I6dc54a8d0dec4fa295faa15475ad4fb5d83dd294", "committedDate": "2020-10-02T19:25:43Z", "type": "commit"}, {"oid": "9878c4eed46d7f0bd7480e43e87529c346b2e099", "url": "https://github.com/apache/hadoop/commit/9878c4eed46d7f0bd7480e43e87529c346b2e099", "message": "Fix TestViewFileSystemOverloadSchemeWithDFSAdmin#testAllowAndDisalllowSnapShot failure.\n\nChange-Id: I6dc54a8d0dec4fa295faa15475ad4fb5d83dd294", "committedDate": "2020-10-02T19:25:43Z", "type": "forcePushed"}]}