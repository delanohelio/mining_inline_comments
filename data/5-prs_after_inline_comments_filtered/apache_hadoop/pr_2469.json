{"pr_number": 2469, "pr_title": "MAPREDUCE-7307. Potential thread leak in LocatedFileStatusFetcher", "pr_createdAt": "2020-11-18T04:32:11Z", "pr_url": "https://github.com/apache/hadoop/pull/2469", "timeline": [{"oid": "0ee010a86a3b42c6c219530453dabd29d71fa8b9", "url": "https://github.com/apache/hadoop/commit/0ee010a86a3b42c6c219530453dabd29d71fa8b9", "message": "Potential thread leak in LocatedFileStatusFetcher", "committedDate": "2020-11-18T04:16:25Z", "type": "commit"}, {"oid": "8581bea57b933668c1155c158722fb6518dcb912", "url": "https://github.com/apache/hadoop/commit/8581bea57b933668c1155c158722fb6518dcb912", "message": "add unit test", "committedDate": "2020-11-19T12:14:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkxMjMzMQ==", "url": "https://github.com/apache/hadoop/pull/2469#discussion_r526912331", "bodyText": "we're using a shaded org.apache.hadoop.thirdparty ref here. Guava has been too painful", "author": "steveloughran", "createdAt": "2020-11-19T14:06:07Z", "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/LocatedFileStatusFetcher.java", "diffHunk": "@@ -29,6 +29,7 @@\n import java.util.concurrent.locks.Condition;\n import java.util.concurrent.locks.ReentrantLock;\n \n+import com.google.common.annotations.VisibleForTesting;", "originalCommit": "8581bea57b933668c1155c158722fb6518dcb912", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAyMDE1Mw==", "url": "https://github.com/apache/hadoop/pull/2469#discussion_r527020153", "bodyText": "Fixed, thank you very much for your review!", "author": "dengzhhu653", "createdAt": "2020-11-19T16:23:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkxMjMzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkxNDE1Mw==", "url": "https://github.com/apache/hadoop/pull/2469#discussion_r526914153", "bodyText": "import ordering on new code should be\njava.*\nnon-org.apache\norg.apache.*\nstatics\nexisting stuff we normally leave alone as it makes cherrypicking harder. Imports are core part of merge pain", "author": "steveloughran", "createdAt": "2020-11-19T14:08:48Z", "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/test/java/org/apache/hadoop/mapred/TestLocatedFileStatusFetcher.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.mapred;\n+\n+import org.apache.hadoop.conf.Configuration;", "originalCommit": "8581bea57b933668c1155c158722fb6518dcb912", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAyMDMwOQ==", "url": "https://github.com/apache/hadoop/pull/2469#discussion_r527020309", "bodyText": "Done", "author": "dengzhhu653", "createdAt": "2020-11-19T16:24:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkxNDE1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkxNDg5Nw==", "url": "https://github.com/apache/hadoop/pull/2469#discussion_r526914897", "bodyText": "make a subclass of AbstractHadoopTestBase for timeout rull and thread naming", "author": "steveloughran", "createdAt": "2020-11-19T14:09:53Z", "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/test/java/org/apache/hadoop/mapred/TestLocatedFileStatusFetcher.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.mapred;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.FileUtil;\n+import org.apache.hadoop.fs.LocalFileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.PathFilter;\n+import org.apache.hadoop.test.GenericTestUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+public class TestLocatedFileStatusFetcher {", "originalCommit": "8581bea57b933668c1155c158722fb6518dcb912", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAyMDY5MQ==", "url": "https://github.com/apache/hadoop/pull/2469#discussion_r527020691", "bodyText": "Done", "author": "dengzhhu653", "createdAt": "2020-11-19T16:24:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkxNDg5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkxNTY1Ng==", "url": "https://github.com/apache/hadoop/pull/2469#discussion_r526915656", "bodyText": "add an error message for the assertion", "author": "steveloughran", "createdAt": "2020-11-19T14:10:54Z", "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/test/java/org/apache/hadoop/mapred/TestLocatedFileStatusFetcher.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.mapred;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.FileUtil;\n+import org.apache.hadoop.fs.LocalFileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.PathFilter;\n+import org.apache.hadoop.test.GenericTestUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+public class TestLocatedFileStatusFetcher {\n+\n+  private Configuration conf;\n+  private FileSystem fileSys;\n+  private boolean mkdirs;\n+  private File dir = GenericTestUtils.getTestDir(\"test-localfs\");\n+  private static long TIME_FOR_SLEEP = 10000;\n+\n+  @Before\n+  public void setup() throws Exception {\n+    conf = new Configuration(false);\n+    conf.set(\"fs.file.impl\", MockFileSystem.class.getName());\n+    fileSys = FileSystem.getLocal(conf);\n+  }\n+\n+  @After\n+  public void after() throws IOException {\n+    if (mkdirs) {\n+      FileUtil.fullyDelete(dir);\n+    }\n+  }\n+\n+  @Test\n+  public void testExecutorsShutDown() throws Exception {\n+    Path scanPath = new Path(dir.getAbsolutePath());\n+    mkdirs = fileSys.mkdirs(scanPath);\n+    Path[] dirs = new Path[] {scanPath};\n+    final LocatedFileStatusFetcher fetcher = new LocatedFileStatusFetcher(conf, dirs, true,\n+        new PathFilter() {\n+          @Override\n+          public boolean accept(Path path) {\n+            return true;\n+          }\n+        }, true);\n+\n+    Thread t = new Thread() {\n+      @Override\n+      public void run() {\n+        try {\n+          fetcher.getFileStatuses();\n+        } catch (Exception e) {\n+          // This should interrupt condition.await()\n+          Assert.assertTrue(e instanceof InterruptedException);\n+        }\n+      }\n+    };\n+\n+    t.start();\n+    Thread.sleep(TIME_FOR_SLEEP / 2);\n+\n+    t.interrupt();\n+    t.join();\n+    // Check the status for executor service\n+    Assert.assertTrue(fetcher.getListeningExecutorService().isShutdown());", "originalCommit": "8581bea57b933668c1155c158722fb6518dcb912", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAyMTIyMg==", "url": "https://github.com/apache/hadoop/pull/2469#discussion_r527021222", "bodyText": "Done", "author": "dengzhhu653", "createdAt": "2020-11-19T16:25:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkxNTY1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkxNzEzMQ==", "url": "https://github.com/apache/hadoop/pull/2469#discussion_r526917131", "bodyText": "do we need this separate thread? Shouldn't the fetcher.getFileStatuses be enough?", "author": "steveloughran", "createdAt": "2020-11-19T14:13:01Z", "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/test/java/org/apache/hadoop/mapred/TestLocatedFileStatusFetcher.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.mapred;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.FileUtil;\n+import org.apache.hadoop.fs.LocalFileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.PathFilter;\n+import org.apache.hadoop.test.GenericTestUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+public class TestLocatedFileStatusFetcher {\n+\n+  private Configuration conf;\n+  private FileSystem fileSys;\n+  private boolean mkdirs;\n+  private File dir = GenericTestUtils.getTestDir(\"test-localfs\");\n+  private static long TIME_FOR_SLEEP = 10000;\n+\n+  @Before\n+  public void setup() throws Exception {\n+    conf = new Configuration(false);\n+    conf.set(\"fs.file.impl\", MockFileSystem.class.getName());\n+    fileSys = FileSystem.getLocal(conf);\n+  }\n+\n+  @After\n+  public void after() throws IOException {\n+    if (mkdirs) {\n+      FileUtil.fullyDelete(dir);\n+    }\n+  }\n+\n+  @Test\n+  public void testExecutorsShutDown() throws Exception {\n+    Path scanPath = new Path(dir.getAbsolutePath());\n+    mkdirs = fileSys.mkdirs(scanPath);\n+    Path[] dirs = new Path[] {scanPath};\n+    final LocatedFileStatusFetcher fetcher = new LocatedFileStatusFetcher(conf, dirs, true,\n+        new PathFilter() {\n+          @Override\n+          public boolean accept(Path path) {\n+            return true;\n+          }\n+        }, true);\n+\n+    Thread t = new Thread() {", "originalCommit": "8581bea57b933668c1155c158722fb6518dcb912", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAyOTQyNA==", "url": "https://github.com/apache/hadoop/pull/2469#discussion_r527029424", "bodyText": "The fetcher.getFileStatuses blocks the current thread by condition.await(), which would be notified by the getting file tasks,  and shut down the executor.  Maybe raising the fetcher.getFileStatuses in a separate thread  can make it easy to interrupt the condition.await(), which will throw exception to show the case described.", "author": "dengzhhu653", "createdAt": "2020-11-19T16:36:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkxNzEzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc5MzAyNg==", "url": "https://github.com/apache/hadoop/pull/2469#discussion_r528793026", "bodyText": "let's leave fetcher alone -the more changes we do, the riskier the patch becomes.", "author": "steveloughran", "createdAt": "2020-11-23T15:37:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkxNzEzMQ=="}], "type": "inlineReview"}, {"oid": "eadfcc198837dfbd0a70d5b186b8b49b4d685306", "url": "https://github.com/apache/hadoop/commit/eadfcc198837dfbd0a70d5b186b8b49b4d685306", "message": "address the comments", "committedDate": "2020-11-19T15:30:42Z", "type": "commit"}, {"oid": "b286cbba3b6ad481a7299ae51d6d5aa4aa4aae0b", "url": "https://github.com/apache/hadoop/commit/b286cbba3b6ad481a7299ae51d6d5aa4aa4aae0b", "message": "Merge branch 'trunk' of https://github.com/apache/hadoop into test", "committedDate": "2020-11-19T15:52:30Z", "type": "commit"}, {"oid": "3c061f6b0b48ff18a88df6747aec70005425e388", "url": "https://github.com/apache/hadoop/commit/3c061f6b0b48ff18a88df6747aec70005425e388", "message": "refine", "committedDate": "2020-11-19T16:21:11Z", "type": "commit"}, {"oid": "af5323ff389b98c73188814eb2917ee5640b392f", "url": "https://github.com/apache/hadoop/commit/af5323ff389b98c73188814eb2917ee5640b392f", "message": "fix the comments", "committedDate": "2020-11-21T00:55:37Z", "type": "commit"}, {"oid": "c217bf29b978c40626042da22667c1d0626313cc", "url": "https://github.com/apache/hadoop/commit/c217bf29b978c40626042da22667c1d0626313cc", "message": "fix checkstyle", "committedDate": "2020-11-22T02:15:06Z", "type": "commit"}]}