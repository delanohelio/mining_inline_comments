{"pr_number": 399, "pr_title": "Cbrune/bfd 520 null etl fields", "pr_createdAt": "2020-11-16T16:25:21Z", "pr_url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/399", "timeline": [{"oid": "ac187057f066e69dfd80c6267fef769910653fdd", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/ac187057f066e69dfd80c6267fef769910653fdd", "message": "Added null check to rifprocessingutils", "committedDate": "2020-11-15T05:09:22Z", "type": "commit"}, {"oid": "7835824b3b926ac2fb421da52edf84c80dca23fe", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/7835824b3b926ac2fb421da52edf84c80dca23fe", "message": "Changed rif parsing for null fields", "committedDate": "2020-11-15T05:27:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMxMjQ0OQ==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/399#discussion_r525312449", "bodyText": "I'd suggest a slight wording tweak to clarify your intent here:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /**\n          \n          \n            \n               * @param string tring to parse\n          \n          \n            \n               * @return an {@link String} with a null representation stripped from it if the input has a null\n          \n          \n            \n               *     field representation.\n          \n          \n            \n               */\n          \n          \n            \n              public static String removeInvalidCharacters(String string) {\n          \n          \n            \n                String newString = string;\n          \n          \n            \n            \n          \n          \n            \n                // Null Field\n          \n          \n            \n                String nullFields = \"\\\\0\";\n          \n          \n            \n                if (!Strings.isNullOrEmpty(newString)) {\n          \n          \n            \n                  if (newString.contains(nullFields)) newString = newString.replace(nullFields, \"\");\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                return newString;\n          \n          \n            \n              }\n          \n          \n            \n              /**\n          \n          \n            \n               * @param string the {@link String} to parse\n          \n          \n            \n               * @return a copy of the specified {@link String} but with any/all null bytes it contained removed\n          \n          \n            \n               */\n          \n          \n            \n              public static String removeInvalidCharacters(String string) {\n          \n          \n            \n                String newString = string;\n          \n          \n            \n            \n          \n          \n            \n                String nullByte = \"\\\\0\";\n          \n          \n            \n                if (!Strings.isNullOrEmpty(newString)) {\n          \n          \n            \n                  if (newString.contains(nullByte)) newString = newString.replace(nullByte, \"\");\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                return newString;\n          \n          \n            \n              }", "author": "karlmdavis", "createdAt": "2020-11-17T16:42:32Z", "path": "apps/bfd-model/bfd-model-rif/src/main/java/gov/cms/bfd/model/rif/parse/RifParsingUtils.java", "diffHunk": "@@ -269,4 +270,21 @@ public static Character parseCharacter(String charText) {\n       return Optional.of(parseCharacter(charText));\n     }\n   }\n+\n+  /**\n+   * @param string tring to parse\n+   * @return an {@link String} with a null representation stripped from it if the input has a null\n+   *     field representation.\n+   */\n+  public static String removeInvalidCharacters(String string) {\n+    String newString = string;\n+\n+    // Null Field\n+    String nullFields = \"\\\\0\";\n+    if (!Strings.isNullOrEmpty(newString)) {\n+      if (newString.contains(nullFields)) newString = newString.replace(nullFields, \"\");\n+    }\n+\n+    return newString;\n+  }", "originalCommit": "7835824b3b926ac2fb421da52edf84c80dca23fe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMxNTQ1NA==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/399#discussion_r525315454", "bodyText": "I'd probably simplify this way down by:\n\nChecking any/all fields with null bytes, to ensure they were cleaned up correctly.\nChecking one field after the null byte(s), to ensure they're correct.\nGetting rid of most other assertions.\n\nAs-is, it's a bit hard to figure out which field(s) were supposed to be corrected. Maybe also add a comment mentioning that?", "author": "karlmdavis", "createdAt": "2020-11-17T16:46:29Z", "path": "apps/bfd-pipeline/bfd-pipeline-rif-extract/src/test/java/gov/cms/bfd/pipeline/rif/extract/RifFilesProcessorTest.java", "diffHunk": "@@ -105,6 +105,70 @@ public void process1BeneRecord() {\n     Assert.assertEquals(new BigDecimal(\"1\"), beneRow.getBeneLinkKey().get());\n   }\n \n+  @Test\n+  public void process1BeneRecordWithTrailingNulls() {", "originalCommit": "7835824b3b926ac2fb421da52edf84c80dca23fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMzODcwMw==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/399#discussion_r525338703", "bodyText": "Done", "author": "cbrunefearless", "createdAt": "2020-11-17T17:14:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMxNTQ1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMxNjE3NA==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/399#discussion_r525316174", "bodyText": "Love this approach!", "author": "karlmdavis", "createdAt": "2020-11-17T16:47:25Z", "path": "apps/bfd-model/bfd-model-rif/src/main/java/gov/cms/bfd/model/rif/parse/RifParsingUtils.java", "diffHunk": "@@ -78,7 +79,7 @@ public static CSVParser createCsvParser(\n    *     consistency)\n    */\n   public static String parseString(String string) {\n-    return string;\n+    return removeInvalidCharacters(string);", "originalCommit": "7835824b3b926ac2fb421da52edf84c80dca23fe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMxNjI3NQ==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/399#discussion_r525316275", "bodyText": "Love this approach!", "author": "karlmdavis", "createdAt": "2020-11-17T16:47:34Z", "path": "apps/bfd-model/bfd-model-rif/src/main/java/gov/cms/bfd/model/rif/parse/RifParsingUtils.java", "diffHunk": "@@ -88,7 +89,7 @@ public static String parseString(String string) {\n    *     value\n    */\n   public static Optional<String> parseOptionalString(String string) {\n-    return string.isEmpty() ? Optional.empty() : Optional.of(string);\n+    return string.isEmpty() ? Optional.empty() : Optional.of(removeInvalidCharacters(string));", "originalCommit": "7835824b3b926ac2fb421da52edf84c80dca23fe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d9f0e4ffd99020b992da39d9c24e90a427b4e373", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/d9f0e4ffd99020b992da39d9c24e90a427b4e373", "message": "refactored some code from the code review", "committedDate": "2020-11-17T18:15:51Z", "type": "commit"}, {"oid": "5964ea21d292a8275033a1b0612fc599acbfeb02", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/5964ea21d292a8275033a1b0612fc599acbfeb02", "message": "added new dependency to share utils", "committedDate": "2020-11-17T18:44:53Z", "type": "commit"}, {"oid": "9567d84a81fc938b4cdf886861453e0138c3eae7", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/9567d84a81fc938b4cdf886861453e0138c3eae7", "message": "moved dependency out to shared utils", "committedDate": "2020-11-18T17:32:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyMzY3Mw==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/399#discussion_r526323673", "bodyText": "I've been staring at this for a while now and I think it's incorrect? What you're searching for and replacing here is a two-char sequence: a '\\' followed by a '0'. Is that what is needed? Are we getting backslash-zero character sequences from the CCW that we need to strip out?\nOr are we really getting null bytes hiding in strings? If we are, then you'd want to change this to \"\\0\" or perhaps \"\\0x00\", instead. You'd also likely need to update the sample RIF. I'd guess that you'd need to use a hex editor to add the null bytes to the RIF, as I don't think most text editors would let you type them and I don't think CSV/Excel supports fancy escapes like that (though I could be wrong).", "author": "karlmdavis", "createdAt": "2020-11-18T18:25:51Z", "path": "apps/bfd-model/bfd-model-rif/src/main/java/gov/cms/bfd/model/rif/parse/RifParsingUtils.java", "diffHunk": "@@ -269,4 +270,22 @@ public static Character parseCharacter(String charText) {\n       return Optional.of(parseCharacter(charText));\n     }\n   }\n+\n+  /**\n+   * @param inputString {@link String} that possible contains invalid characters\n+   * @return an {@link String} with a null representation stripped from it if the input has a null\n+   *     field representation.\n+   */\n+  public static String removeInvalidCharacters(String inputString) {\n+    String verifiedInputString = inputString;\n+\n+    // Null Field\n+    String nullFields = \"\\\\0\";", "originalCommit": "9567d84a81fc938b4cdf886861453e0138c3eae7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2251198e52ba41f98fb4483a450ebf780c63f219", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/2251198e52ba41f98fb4483a450ebf780c63f219", "message": "Added null check", "committedDate": "2020-11-18T19:09:43Z", "type": "commit"}, {"oid": "f1f0c4aa76c958999764038c1a0e5ee333cb1a22", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/f1f0c4aa76c958999764038c1a0e5ee333cb1a22", "message": "Replace \"\\0\" strings in test RIF with null bytes.\n\nAt least, I think I did. I'm bad at this.\n\nBFD-520", "committedDate": "2020-11-18T20:46:53Z", "type": "commit"}, {"oid": "058549d871a0ef810eba8eb82c03ccd208efae71", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/058549d871a0ef810eba8eb82c03ccd208efae71", "message": "added trim for tests", "committedDate": "2020-11-18T22:15:39Z", "type": "commit"}, {"oid": "df4cbd5d2511f850dc360480b95ee9ef534ab5af", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/df4cbd5d2511f850dc360480b95ee9ef534ab5af", "message": "Added trim function", "committedDate": "2020-11-18T22:31:02Z", "type": "commit"}, {"oid": "4d07dff273e149cbfecf8605ca761cb09d0a8aec", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/4d07dff273e149cbfecf8605ca761cb09d0a8aec", "message": "Remove nulls", "committedDate": "2020-11-19T16:04:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzExMTgwMA==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/399#discussion_r527111800", "bodyText": "This really didn't look right to me, based on my reading of Pattern (the \"Backslashes, escapes, and quoting\" section, in particular). However, I was wrong!\nBased on some local testing, both of these code samples work (i.e. print out \"fixed\"):\nThis:\npublic static void main(String[] args) {\n  String valueToFix = \"Howdy!\\u0000\";\n  String valueFixed = valueToFix.replaceAll(\"\\u0000\", \"\");\n  if (valueToFix.contentEquals(valueFixed))\n    System.out.println(\"not fixed\");\n  else\n    System.out.println(\"fixed\");\n}\nAnd this:\npublic static void main(String[] args) {\n  String valueToFix = \"Howdy!\\u0000\";\n  String valueFixed = valueToFix.replaceAll(\"\\\\x00\", \"\");\n  if (valueToFix.contentEquals(valueFixed))\n    System.out.println(\"not fixed\");\n  else\n    System.out.println(\"fixed\");\n}\nI still don't understand why the second one works, but it does. So: neat!", "author": "karlmdavis", "createdAt": "2020-11-19T18:36:23Z", "path": "apps/bfd-model/bfd-model-rif/src/main/java/gov/cms/bfd/model/rif/parse/RifParsingUtils.java", "diffHunk": "@@ -269,4 +270,20 @@ public static Character parseCharacter(String charText) {\n       return Optional.of(parseCharacter(charText));\n     }\n   }\n+\n+  /**\n+   * @param inputString {@link String} that possible contains invalid characters\n+   * @return an {@link String} with a null representation stripped from it if the input has a null\n+   *     field representation.\n+   */\n+  public static String removeInvalidCharacters(String inputString) {\n+    String verifiedInputString = inputString;\n+\n+    if (!Strings.isNullOrEmpty(verifiedInputString)) {\n+      // remove all NULLs\n+      verifiedInputString = verifiedInputString.replaceAll(\"\\\\x00\", \"\");", "originalCommit": "4d07dff273e149cbfecf8605ca761cb09d0a8aec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}