{"pr_number": 390, "pr_title": "BFD-379-Support-BB2-Address-Fields-Filtering-header-includeAddressFields", "pr_createdAt": "2020-11-06T04:56:51Z", "pr_url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/390", "timeline": [{"oid": "d5138f788138775e03dc7def8b274f3547168737", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/d5138f788138775e03dc7def8b274f3547168737", "message": "Update apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/PatientResourceProvider.java\n\nCo-authored-by: John Zulim <john.zulim@adhocteam.us>", "committedDate": "2021-01-20T22:56:41Z", "type": "forcePushed"}, {"oid": "087ca7b322930fe9718f640eadd06a44245cb749", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/087ca7b322930fe9718f640eadd06a44245cb749", "message": "implement support header includeAddressFields", "committedDate": "2021-02-02T16:37:40Z", "type": "commit"}, {"oid": "db94a927211044c520979473116f3c76e26ec15c", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/db94a927211044c520979473116f3c76e26ec15c", "message": "fix link ref in javadoc.", "committedDate": "2021-02-02T16:37:40Z", "type": "commit"}, {"oid": "8f837574ac2018455aea9ed8e411478fe1ca9c3f", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/8f837574ac2018455aea9ed8e411478fe1ca9c3f", "message": "Added responses for json files", "committedDate": "2021-02-02T16:37:40Z", "type": "commit"}, {"oid": "1b400b40c1c58d5bd9d3a3787be4ca4fe15852d8", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/1b400b40c1c58d5bd9d3a3787be4ca4fe15852d8", "message": "Fixed integration tests", "committedDate": "2021-02-02T16:37:41Z", "type": "commit"}, {"oid": "f531dfdfc11e669c0b6a20a16c3e5602b52598b6", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/f531dfdfc11e669c0b6a20a16c3e5602b52598b6", "message": "re-factor tests and fix minor bugs and code packup\n\nfix methods signature: extraParamsInterceptor.setIncludeIdentifiers(...)\n\nre-factor bene transformer, patient resource provider, etc. and integration tests.\n\nfix a typo in exception message, add stack dump to debug on CI.\n\nadd callstack dump for debugging.\n\ndebug trace\n\ndiagnose changes\n\nfix header value parsing.\n\ntest code pack up clean up\n\ntrace CI failure\n\nfix str compare!", "committedDate": "2021-02-02T16:37:41Z", "type": "commit"}, {"oid": "5c0a3d6c5fd415d32ed5b7d678cd1236ebc41f71", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/5c0a3d6c5fd415d32ed5b7d678cd1236ebc41f71", "message": "patch a missed line in ITs", "committedDate": "2021-02-02T16:37:41Z", "type": "commit"}, {"oid": "8d888bae08af2809281167fb104a749dd125471b", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/8d888bae08af2809281167fb104a749dd125471b", "message": "changes made per PR review.", "committedDate": "2021-02-02T16:37:41Z", "type": "commit"}, {"oid": "acc5032a9dc8facaa77a622e78b9e5a3416ef8f0", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/acc5032a9dc8facaa77a622e78b9e5a3416ef8f0", "message": "Update apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/BeneficiaryTransformer.java\n\nCo-authored-by: John Zulim <john.zulim@adhocteam.us>", "committedDate": "2021-02-02T16:37:41Z", "type": "commit"}, {"oid": "d8d0359fe1c68f75d5e7b7e630e253fabd4a6872", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/d8d0359fe1c68f75d5e7b7e630e253fabd4a6872", "message": "Update apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/stu3/providers/PatientResourceProvider.java\n\nCo-authored-by: John Zulim <john.zulim@adhocteam.us>", "committedDate": "2021-02-02T16:37:41Z", "type": "commit"}, {"oid": "df96522f1c783abb909a51e1f3a828484f1e2865", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/df96522f1c783abb909a51e1f3a828484f1e2865", "message": "changes made per PR review. extract common code, enable address fields filter on V2", "committedDate": "2021-02-02T16:37:41Z", "type": "commit"}, {"oid": "aa2f49b1f2d1e1f95050b5225d23d89c62f655f4", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/aa2f49b1f2d1e1f95050b5225d23d89c62f655f4", "message": "code cleanup.", "committedDate": "2021-02-02T16:37:41Z", "type": "commit"}, {"oid": "aa2f49b1f2d1e1f95050b5225d23d89c62f655f4", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/aa2f49b1f2d1e1f95050b5225d23d89c62f655f4", "message": "code cleanup.", "committedDate": "2021-02-02T16:37:41Z", "type": "forcePushed"}, {"oid": "74022676645f81db4c1c8d915ff32a8b91d8c524", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/74022676645f81db4c1c8d915ff32a8b91d8c524", "message": "add and fix javadoc", "committedDate": "2021-02-02T19:04:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODg3MjAxNQ==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/390#discussion_r568872015", "bodyText": "@jfuqian Can you detail the reason for failing requests if these request headers arent populated? These should be optional, and the default to false I believe. What was your thinking with this?", "author": "jzulim", "createdAt": "2021-02-02T19:27:50Z", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/commons/RequestHeaders.java", "diffHunk": "@@ -0,0 +1,207 @@\n+package gov.cms.bfd.server.war.commons;\n+\n+import ca.uhn.fhir.rest.api.server.RequestDetails;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A per request instance holds all resource (FHIR) request headers, such as: \"includeIdentifiers\"\n+ * {@link PatientResourceProvider#HEADER_NAME_INCLUDE_IDENTIFIERS} \"includeAddressFields\" {@link\n+ * PatientResourceProvider#HEADER_NAME_INCLUDE_ADDRESS_FIELDS} which serve as part of BFD API\n+ */\n+public class RequestHeaders {\n+  RequestDetails requestDetails;\n+  Map<String, Object> headerNVs = new HashMap<String, Object>();\n+\n+  private RequestHeaders(RequestDetails requestDetails) {\n+    this.requestDetails = requestDetails;\n+    // parse headers\n+    CommonHeaders.FHIR_REQUEST_HEADERS.forEach(\n+        (h) -> {\n+          String v = this.requestDetails.getHeader(h);\n+          if (h.equals(CommonHeaders.HEADER_NAME_INCLUDE_ADDRESS_FIELDS)) {\n+            this.headerNVs.put(h, returnIncludeAddressFieldsValue(v));\n+          }\n+          if (h.equals(CommonHeaders.HEADER_NAME_INCLUDE_IDENTIFIERS)) {\n+            this.headerNVs.put(h, returnIncludeIdentifiersValues(v));\n+          }\n+        });\n+  }\n+\n+  /**\n+   * instantiate an empty RH, used by tests\n+   *\n+   * @param requestDetails\n+   */\n+  private RequestHeaders() {}\n+\n+  /**\n+   * currently used by internal code to create a RH instance with ad hoc header/value pairs for\n+   * testing code\n+   *\n+   * @param hdrValues the header/value pairs\n+   */\n+  private RequestHeaders(String... hdrValues) {\n+    // convert h1 v1, h2 v2, ... into nv pairs\n+    if (hdrValues == null || hdrValues.length % 2 != 0) {", "originalCommit": "aa2f49b1f2d1e1f95050b5225d23d89c62f655f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODg5MTAyOQ==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/390#discussion_r568891029", "bodyText": "that constructor is used for tests only.", "author": "JFU-GIT", "createdAt": "2021-02-02T19:59:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODg3MjAxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODg3MjI2NA==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/390#discussion_r568872264", "bodyText": "Similar Question, what's the purpose for checking for brackets?", "author": "jzulim", "createdAt": "2021-02-02T19:28:13Z", "path": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/commons/RequestHeaders.java", "diffHunk": "@@ -0,0 +1,207 @@\n+package gov.cms.bfd.server.war.commons;\n+\n+import ca.uhn.fhir.rest.api.server.RequestDetails;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A per request instance holds all resource (FHIR) request headers, such as: \"includeIdentifiers\"\n+ * {@link PatientResourceProvider#HEADER_NAME_INCLUDE_IDENTIFIERS} \"includeAddressFields\" {@link\n+ * PatientResourceProvider#HEADER_NAME_INCLUDE_ADDRESS_FIELDS} which serve as part of BFD API\n+ */\n+public class RequestHeaders {\n+  RequestDetails requestDetails;\n+  Map<String, Object> headerNVs = new HashMap<String, Object>();\n+\n+  private RequestHeaders(RequestDetails requestDetails) {\n+    this.requestDetails = requestDetails;\n+    // parse headers\n+    CommonHeaders.FHIR_REQUEST_HEADERS.forEach(\n+        (h) -> {\n+          String v = this.requestDetails.getHeader(h);\n+          if (h.equals(CommonHeaders.HEADER_NAME_INCLUDE_ADDRESS_FIELDS)) {\n+            this.headerNVs.put(h, returnIncludeAddressFieldsValue(v));\n+          }\n+          if (h.equals(CommonHeaders.HEADER_NAME_INCLUDE_IDENTIFIERS)) {\n+            this.headerNVs.put(h, returnIncludeIdentifiersValues(v));\n+          }\n+        });\n+  }\n+\n+  /**\n+   * instantiate an empty RH, used by tests\n+   *\n+   * @param requestDetails\n+   */\n+  private RequestHeaders() {}\n+\n+  /**\n+   * currently used by internal code to create a RH instance with ad hoc header/value pairs for\n+   * testing code\n+   *\n+   * @param hdrValues the header/value pairs\n+   */\n+  private RequestHeaders(String... hdrValues) {\n+    // convert h1 v1, h2 v2, ... into nv pairs\n+    if (hdrValues == null || hdrValues.length % 2 != 0) {\n+      throw new IllegalArgumentException(\n+          \"Header Value string not valid - must be in pairs like h1, v1, h2, v2, ...: \"\n+              + hdrValues);\n+    }\n+    Map<String, String> nvPairs = new HashMap<String, String>();\n+    String curKey = null;\n+    for (String s : hdrValues) {\n+      if (s.startsWith(\"[\")) {", "originalCommit": "aa2f49b1f2d1e1f95050b5225d23d89c62f655f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODg5MDUzOQ==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/390#discussion_r568890539", "bodyText": "OH, need to remove  the whole if ..., that was added while debugging an error, now that should never occur.\n  if (s.startsWith(\"[\")) {\n    String stackStr = \"CALLSTACK:\";\n    for (StackTraceElement ste : Thread.currentThread().getStackTrace()) {\n      stackStr = stackStr + ste.toString();\n    }\n    throw new InvalidRequestException(\n        \"got header value with BRACKET: \" + s + \", CALLSTACK:\" + stackStr);\n  }", "author": "JFU-GIT", "createdAt": "2021-02-02T19:58:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODg3MjI2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODg5MDgyNQ==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/390#discussion_r568890825", "bodyText": "and this part of code is only called by tests.", "author": "JFU-GIT", "createdAt": "2021-02-02T19:59:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODg3MjI2NA=="}], "type": "inlineReview"}, {"oid": "f1e8c4475f9766cdebf3d7547844e284c1f69101", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/f1e8c4475f9766cdebf3d7547844e284c1f69101", "message": "code clean up", "committedDate": "2021-02-02T20:09:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTA1NTA2NA==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/390#discussion_r569055064", "bodyText": "\ud83d\udc4d", "author": "jzulim", "createdAt": "2021-02-03T01:44:36Z", "path": "apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/stu3/providers/BeneficiaryTransformerTest.java", "diffHunk": "@@ -367,5 +417,70 @@ else if (beneficiary.getSex() == Sex.FEMALE.getCode())\n           CcwCodebookVariable.RFRNC_YR, beneficiary.getBeneEnrollmentReferenceYear(), patient);\n \n     TransformerTestUtils.assertLastUpdatedEquals(beneficiary.getLastUpdated(), patient);\n+\n+    Boolean inclAddrFlds =\n+        (Boolean)\n+            requestHeader.getValue(PatientResourceProvider.HEADER_NAME_INCLUDE_ADDRESS_FIELDS);\n+\n+    if (inclAddrFlds != null && inclAddrFlds) {\n+      Assert.assertEquals(1, patient.getAddress().size());\n+      // assert address fields etc.\n+      Assert.assertEquals(beneficiary.getStateCode(), patient.getAddress().get(0).getState());\n+      // assert CountyCode is no longer mapped\n+      Assert.assertNull(patient.getAddress().get(0).getDistrict());\n+      Assert.assertEquals(beneficiary.getPostalCode(), patient.getAddress().get(0).getPostalCode());\n+      Assert.assertEquals(\n+          beneficiary.getDerivedCityName().orElse(null), patient.getAddress().get(0).getCity());\n+\n+      Assert.assertEquals(\n+          beneficiary.getDerivedMailingAddress1().orElse(\"\"),\n+          patient.getAddress().get(0).getLine().get(0).getValueNotNull());\n+      Assert.assertEquals(\n+          beneficiary.getDerivedMailingAddress2().orElse(\"\"),\n+          patient.getAddress().get(0).getLine().get(1).getValueNotNull());\n+      Assert.assertEquals(\n+          beneficiary.getDerivedMailingAddress3().orElse(\"\"),\n+          patient.getAddress().get(0).getLine().get(2).getValueNotNull());\n+      Assert.assertEquals(\n+          beneficiary.getDerivedMailingAddress4().orElse(\"\"),\n+          patient.getAddress().get(0).getLine().get(3).getValueNotNull());\n+      Assert.assertEquals(\n+          beneficiary.getDerivedMailingAddress5().orElse(\"\"),\n+          patient.getAddress().get(0).getLine().get(4).getValueNotNull());\n+      Assert.assertEquals(\n+          beneficiary.getDerivedMailingAddress6().orElse(\"\"),\n+          patient.getAddress().get(0).getLine().get(5).getValueNotNull());\n+    } else {\n+      Assert.assertEquals(1, patient.getAddress().size());", "originalCommit": "f1e8c4475f9766cdebf3d7547844e284c1f69101", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}