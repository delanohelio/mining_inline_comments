{"pr_number": 305, "pr_title": "Cbrune/bfd 189 beneficiary table", "pr_createdAt": "2020-06-29T19:05:13Z", "pr_url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/305", "timeline": [{"oid": "a23d99d7755ff1e0f21a3867101feea8f6ed3e4b", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/a23d99d7755ff1e0f21a3867101feea8f6ed3e4b", "message": "Changed version of hapi fihr from v4.1 to v4.2", "committedDate": "2020-05-20T17:42:28Z", "type": "commit"}, {"oid": "384682569e98865b5a0153331c34fb00972522a9", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/384682569e98865b5a0153331c34fb00972522a9", "message": "Merge branch 'master' of github.com:CMSgov/beneficiary-fhir-data", "committedDate": "2020-06-05T16:49:15Z", "type": "commit"}, {"oid": "2c1ec0adac797862b92c3f2d0a700733aecd6d58", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/2c1ec0adac797862b92c3f2d0a700733aecd6d58", "message": "Merge branch 'master' of github.com:CMSgov/beneficiary-fhir-data", "committedDate": "2020-06-06T03:03:16Z", "type": "commit"}, {"oid": "1b2b4462567cc460d442d4b22a045607ded37ddb", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/1b2b4462567cc460d442d4b22a045607ded37ddb", "message": "Merge branch 'master' of github.com:CMSgov/beneficiary-fhir-data", "committedDate": "2020-06-16T01:05:05Z", "type": "commit"}, {"oid": "1b8916b8ed830704e1ab607ca7ec35ec0973fcf3", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/1b8916b8ed830704e1ab607ca7ec35ec0973fcf3", "message": "Merge branch 'master' of github.com:CMSgov/beneficiary-fhir-data", "committedDate": "2020-06-25T18:02:11Z", "type": "commit"}, {"oid": "bf945afe63bc8e318a93bb52f18cc54320b8eae9", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/bf945afe63bc8e318a93bb52f18cc54320b8eae9", "message": "Added a beneficiaryhistoryequals function to check whether the old and new records are equal.", "committedDate": "2020-06-26T04:03:19Z", "type": "commit"}, {"oid": "43df584d5137f84017cf26727458559f051184b7", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/43df584d5137f84017cf26727458559f051184b7", "message": "Added a beneficiaryhistoryequals function to check whether the old and new records are equal.", "committedDate": "2020-06-26T04:24:21Z", "type": "commit"}, {"oid": "67c213cf4a3a7fe156fa15289a264314e6e9d215", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/67c213cf4a3a7fe156fa15289a264314e6e9d215", "message": "Added unit tests and integration tests for beneficiary history entries that dont change", "committedDate": "2020-06-28T23:50:38Z", "type": "commit"}, {"oid": "e6905c72d63686adc5ed0b9c88e50d2972c5f77f", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/e6905c72d63686adc5ed0b9c88e50d2972c5f77f", "message": "Added integration test for unchanged beneficiary history records", "committedDate": "2020-06-29T02:06:13Z", "type": "commit"}, {"oid": "a07518b026ea30b4829487af31948c26c2b0e4f6", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/a07518b026ea30b4829487af31948c26c2b0e4f6", "message": "Added check to see if mbihash is equal", "committedDate": "2020-07-01T18:06:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE5MzU1NA==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/305#discussion_r455193554", "bodyText": "Looks good, but seeing some comments not describing what is being asserted starting at this section of the file.  Also some typos, like \"unleashed\" and \"hicnUnhased\".", "author": "dtisza1", "createdAt": "2020-07-15T16:54:28Z", "path": "apps/bfd-pipeline/bfd-pipeline-rif-load/src/test/java/gov/cms/bfd/pipeline/rif/load/RifLoaderTest.java", "diffHunk": "@@ -86,4 +89,111 @@ public void computeMbiHash() {\n         \"742086db6bf338dedda6175ea3af8ca5e85b81fda9cc7078004a4d3e4792494b\",\n         RifLoader.computeMbiHash(options, secretKeyFactory, \"2456689\"));\n   }\n+\n+  /**\n+   * Runs a couple of fake HICNs through {@link\n+   * gov.cms.bfd.pipeline.rif.load.RifLoader#computeHicnHash(LoadAppOptions, SecretKeyFactory,\n+   * String)} to verify that the expected result is produced.\n+   */\n+  @Test\n+  public void isBeneficiaryHistoryEqual() {\n+    Beneficiary newBene = new Beneficiary();\n+    LocalDate birthDate = LocalDate.of(1960, 1, 8);\n+    String hicn = \"2332j3l2\";\n+    Optional<String> hicnUnhased = Optional.of(\"323232\");\n+    char sex = 'M';\n+    Optional<String> medicareBeneficiaryId = Optional.of(\"beneficiaryId\");\n+    Optional<String> mbiHash = Optional.of(\"mbiHash\");\n+\n+    newBene.setBirthDate(birthDate);\n+    newBene.setHicn(hicn);\n+    newBene.setHicnUnhashed(hicnUnhased);\n+    newBene.setSex(sex);\n+    newBene.setMedicareBeneficiaryId(medicareBeneficiaryId);\n+    newBene.setMbiHash(mbiHash);\n+\n+    Beneficiary oldBene = new Beneficiary();\n+    oldBene.setBirthDate(birthDate);\n+    oldBene.setHicn(hicn);\n+    oldBene.setHicnUnhashed(hicnUnhased);\n+    oldBene.setSex(sex);\n+    oldBene.setMedicareBeneficiaryId(medicareBeneficiaryId);\n+    oldBene.setMbiHash(mbiHash);\n+\n+    // Both old and new beneficiary have the same values return true\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary birth date is not the same as old should assert false\n+    newBene.setBirthDate(LocalDate.of(1950, 1, 8));\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary birth date and set it back to old should assert true\n+    newBene.setBirthDate(birthDate);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary hicn is not the same as old should assert false\n+    newBene.setHicn(\"difHicn\");\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary hicn and set it back to old should assert true\n+    newBene.setHicn(hicn);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary hicn unleashed is not the same as old should assert false\n+    newBene.setHicnUnhashed(Optional.of(\"difHicn\"));\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary hicn unleashed and set it back to old should assert true\n+    newBene.setHicnUnhashed(hicnUnhased);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary hicn unleashed is not the same as old should assert false\n+    newBene.setSex('F');\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));", "originalCommit": "a07518b026ea30b4829487af31948c26c2b0e4f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIwNjg2Nw==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/305#discussion_r455206867", "bodyText": "fixed", "author": "cbrunefearless", "createdAt": "2020-07-15T17:15:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE5MzU1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIwMDIyMA==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/305#discussion_r455200220", "bodyText": "comment mismatch?", "author": "dtisza1", "createdAt": "2020-07-15T17:05:15Z", "path": "apps/bfd-pipeline/bfd-pipeline-rif-load/src/test/java/gov/cms/bfd/pipeline/rif/load/RifLoaderTest.java", "diffHunk": "@@ -86,4 +89,111 @@ public void computeMbiHash() {\n         \"742086db6bf338dedda6175ea3af8ca5e85b81fda9cc7078004a4d3e4792494b\",\n         RifLoader.computeMbiHash(options, secretKeyFactory, \"2456689\"));\n   }\n+\n+  /**\n+   * Runs a couple of fake HICNs through {@link\n+   * gov.cms.bfd.pipeline.rif.load.RifLoader#computeHicnHash(LoadAppOptions, SecretKeyFactory,\n+   * String)} to verify that the expected result is produced.\n+   */\n+  @Test\n+  public void isBeneficiaryHistoryEqual() {\n+    Beneficiary newBene = new Beneficiary();\n+    LocalDate birthDate = LocalDate.of(1960, 1, 8);\n+    String hicn = \"2332j3l2\";\n+    Optional<String> hicnUnhased = Optional.of(\"323232\");\n+    char sex = 'M';\n+    Optional<String> medicareBeneficiaryId = Optional.of(\"beneficiaryId\");\n+    Optional<String> mbiHash = Optional.of(\"mbiHash\");\n+\n+    newBene.setBirthDate(birthDate);\n+    newBene.setHicn(hicn);\n+    newBene.setHicnUnhashed(hicnUnhased);\n+    newBene.setSex(sex);\n+    newBene.setMedicareBeneficiaryId(medicareBeneficiaryId);\n+    newBene.setMbiHash(mbiHash);\n+\n+    Beneficiary oldBene = new Beneficiary();\n+    oldBene.setBirthDate(birthDate);\n+    oldBene.setHicn(hicn);\n+    oldBene.setHicnUnhashed(hicnUnhased);\n+    oldBene.setSex(sex);\n+    oldBene.setMedicareBeneficiaryId(medicareBeneficiaryId);\n+    oldBene.setMbiHash(mbiHash);\n+\n+    // Both old and new beneficiary have the same values return true\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary birth date is not the same as old should assert false\n+    newBene.setBirthDate(LocalDate.of(1950, 1, 8));\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary birth date and set it back to old should assert true\n+    newBene.setBirthDate(birthDate);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary hicn is not the same as old should assert false\n+    newBene.setHicn(\"difHicn\");\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary hicn and set it back to old should assert true\n+    newBene.setHicn(hicn);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary hicn unleashed is not the same as old should assert false\n+    newBene.setHicnUnhashed(Optional.of(\"difHicn\"));\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary hicn unleashed and set it back to old should assert true\n+    newBene.setHicnUnhashed(hicnUnhased);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary hicn unleashed is not the same as old should assert false\n+    newBene.setSex('F');\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary sex and set it back to old should assert true\n+    newBene.setSex(sex);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary mediciarybeneficiaryid is not the same as old should assert false\n+    newBene.setMedicareBeneficiaryId(Optional.of(\"diff\"));\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary sex and set it back to old should assert true", "originalCommit": "a07518b026ea30b4829487af31948c26c2b0e4f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIwNjgwMQ==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/305#discussion_r455206801", "bodyText": "fixed", "author": "cbrunefearless", "createdAt": "2020-07-15T17:15:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIwMDIyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIwMDU5OA==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/305#discussion_r455200598", "bodyText": "comment mismatch?", "author": "dtisza1", "createdAt": "2020-07-15T17:05:50Z", "path": "apps/bfd-pipeline/bfd-pipeline-rif-load/src/test/java/gov/cms/bfd/pipeline/rif/load/RifLoaderTest.java", "diffHunk": "@@ -86,4 +89,111 @@ public void computeMbiHash() {\n         \"742086db6bf338dedda6175ea3af8ca5e85b81fda9cc7078004a4d3e4792494b\",\n         RifLoader.computeMbiHash(options, secretKeyFactory, \"2456689\"));\n   }\n+\n+  /**\n+   * Runs a couple of fake HICNs through {@link\n+   * gov.cms.bfd.pipeline.rif.load.RifLoader#computeHicnHash(LoadAppOptions, SecretKeyFactory,\n+   * String)} to verify that the expected result is produced.\n+   */\n+  @Test\n+  public void isBeneficiaryHistoryEqual() {\n+    Beneficiary newBene = new Beneficiary();\n+    LocalDate birthDate = LocalDate.of(1960, 1, 8);\n+    String hicn = \"2332j3l2\";\n+    Optional<String> hicnUnhased = Optional.of(\"323232\");\n+    char sex = 'M';\n+    Optional<String> medicareBeneficiaryId = Optional.of(\"beneficiaryId\");\n+    Optional<String> mbiHash = Optional.of(\"mbiHash\");\n+\n+    newBene.setBirthDate(birthDate);\n+    newBene.setHicn(hicn);\n+    newBene.setHicnUnhashed(hicnUnhased);\n+    newBene.setSex(sex);\n+    newBene.setMedicareBeneficiaryId(medicareBeneficiaryId);\n+    newBene.setMbiHash(mbiHash);\n+\n+    Beneficiary oldBene = new Beneficiary();\n+    oldBene.setBirthDate(birthDate);\n+    oldBene.setHicn(hicn);\n+    oldBene.setHicnUnhashed(hicnUnhased);\n+    oldBene.setSex(sex);\n+    oldBene.setMedicareBeneficiaryId(medicareBeneficiaryId);\n+    oldBene.setMbiHash(mbiHash);\n+\n+    // Both old and new beneficiary have the same values return true\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary birth date is not the same as old should assert false\n+    newBene.setBirthDate(LocalDate.of(1950, 1, 8));\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary birth date and set it back to old should assert true\n+    newBene.setBirthDate(birthDate);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary hicn is not the same as old should assert false\n+    newBene.setHicn(\"difHicn\");\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary hicn and set it back to old should assert true\n+    newBene.setHicn(hicn);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary hicn unleashed is not the same as old should assert false\n+    newBene.setHicnUnhashed(Optional.of(\"difHicn\"));\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary hicn unleashed and set it back to old should assert true\n+    newBene.setHicnUnhashed(hicnUnhased);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary hicn unleashed is not the same as old should assert false\n+    newBene.setSex('F');\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary sex and set it back to old should assert true\n+    newBene.setSex(sex);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary mediciarybeneficiaryid is not the same as old should assert false\n+    newBene.setMedicareBeneficiaryId(Optional.of(\"diff\"));\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary sex and set it back to old should assert true\n+    newBene.setMedicareBeneficiaryId(medicareBeneficiaryId);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary mbihash is not the same as old should assert false\n+    newBene.setMbiHash(Optional.of(\"mbihashdiff\"));\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary mbihash and set it back to old should assert true\n+    newBene.setMbiHash(mbiHash);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Check for nulls\n+    // New beneficiary hicn unleashed is null and the return result should assert false\n+    newBene.setHicnUnhashed(Optional.empty());\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary hicn unleashed and set it back to old should assert true\n+    newBene.setHicnUnhashed(hicnUnhased);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary hicn unleashed is null and the return result should assert false\n+    newBene.setSex(Character.MIN_VALUE);\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary sex and set it back to old should assert true\n+    newBene.setSex(sex);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary mediciarybeneficiaryid is null and the return result should assert false\n+    newBene.setMedicareBeneficiaryId(Optional.empty());\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary sex and set it back to old should assert true", "originalCommit": "a07518b026ea30b4829487af31948c26c2b0e4f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIwODkwNA==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/305#discussion_r455208904", "bodyText": "fixed", "author": "cbrunefearless", "createdAt": "2020-07-15T17:19:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIwMDU5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIwMTQxNw==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/305#discussion_r455201417", "bodyText": "comment mismatch?", "author": "dtisza1", "createdAt": "2020-07-15T17:07:19Z", "path": "apps/bfd-pipeline/bfd-pipeline-rif-load/src/test/java/gov/cms/bfd/pipeline/rif/load/RifLoaderTest.java", "diffHunk": "@@ -86,4 +89,111 @@ public void computeMbiHash() {\n         \"742086db6bf338dedda6175ea3af8ca5e85b81fda9cc7078004a4d3e4792494b\",\n         RifLoader.computeMbiHash(options, secretKeyFactory, \"2456689\"));\n   }\n+\n+  /**\n+   * Runs a couple of fake HICNs through {@link\n+   * gov.cms.bfd.pipeline.rif.load.RifLoader#computeHicnHash(LoadAppOptions, SecretKeyFactory,\n+   * String)} to verify that the expected result is produced.\n+   */\n+  @Test\n+  public void isBeneficiaryHistoryEqual() {\n+    Beneficiary newBene = new Beneficiary();\n+    LocalDate birthDate = LocalDate.of(1960, 1, 8);\n+    String hicn = \"2332j3l2\";\n+    Optional<String> hicnUnhased = Optional.of(\"323232\");\n+    char sex = 'M';\n+    Optional<String> medicareBeneficiaryId = Optional.of(\"beneficiaryId\");\n+    Optional<String> mbiHash = Optional.of(\"mbiHash\");\n+\n+    newBene.setBirthDate(birthDate);\n+    newBene.setHicn(hicn);\n+    newBene.setHicnUnhashed(hicnUnhased);\n+    newBene.setSex(sex);\n+    newBene.setMedicareBeneficiaryId(medicareBeneficiaryId);\n+    newBene.setMbiHash(mbiHash);\n+\n+    Beneficiary oldBene = new Beneficiary();\n+    oldBene.setBirthDate(birthDate);\n+    oldBene.setHicn(hicn);\n+    oldBene.setHicnUnhashed(hicnUnhased);\n+    oldBene.setSex(sex);\n+    oldBene.setMedicareBeneficiaryId(medicareBeneficiaryId);\n+    oldBene.setMbiHash(mbiHash);\n+\n+    // Both old and new beneficiary have the same values return true\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary birth date is not the same as old should assert false\n+    newBene.setBirthDate(LocalDate.of(1950, 1, 8));\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary birth date and set it back to old should assert true\n+    newBene.setBirthDate(birthDate);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary hicn is not the same as old should assert false\n+    newBene.setHicn(\"difHicn\");\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary hicn and set it back to old should assert true\n+    newBene.setHicn(hicn);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary hicn unleashed is not the same as old should assert false\n+    newBene.setHicnUnhashed(Optional.of(\"difHicn\"));\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary hicn unleashed and set it back to old should assert true\n+    newBene.setHicnUnhashed(hicnUnhased);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary hicn unleashed is not the same as old should assert false\n+    newBene.setSex('F');\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary sex and set it back to old should assert true\n+    newBene.setSex(sex);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary mediciarybeneficiaryid is not the same as old should assert false\n+    newBene.setMedicareBeneficiaryId(Optional.of(\"diff\"));\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary sex and set it back to old should assert true\n+    newBene.setMedicareBeneficiaryId(medicareBeneficiaryId);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary mbihash is not the same as old should assert false\n+    newBene.setMbiHash(Optional.of(\"mbihashdiff\"));\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary mbihash and set it back to old should assert true\n+    newBene.setMbiHash(mbiHash);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Check for nulls\n+    // New beneficiary hicn unleashed is null and the return result should assert false\n+    newBene.setHicnUnhashed(Optional.empty());\n+    Assert.assertFalse(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // Undo New beneficiary hicn unleashed and set it back to old should assert true\n+    newBene.setHicnUnhashed(hicnUnhased);\n+    Assert.assertTrue(RifLoader.isBeneficiaryHistoryEqual(newBene, oldBene));\n+\n+    // New beneficiary hicn unleashed is null and the return result should assert false", "originalCommit": "a07518b026ea30b4829487af31948c26c2b0e4f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIwNjYzNw==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/305#discussion_r455206637", "bodyText": "fixed", "author": "cbrunefearless", "createdAt": "2020-07-15T17:15:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIwMTQxNw=="}], "type": "inlineReview"}, {"oid": "8a68745f34016320c7064e15c3c7cce6613db30a", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/8a68745f34016320c7064e15c3c7cce6613db30a", "message": "Changed comments on tests", "committedDate": "2020-07-15T17:18:27Z", "type": "commit"}, {"oid": "32dfb84fad81b24e021cb20c6e692f58695e8397", "url": "https://github.com/CMSgov/beneficiary-fhir-data/commit/32dfb84fad81b24e021cb20c6e692f58695e8397", "message": "Changed comments on tests", "committedDate": "2020-07-15T17:22:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU1Mzg4OQ==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/305#discussion_r471553889", "bodyText": "This line missing before: oof!\nThis possibly adds extra work to our de-dupe, @keithdadkins: we should consider also merging history records where the only difference is that the MBI hash is missing in one of them.", "author": "karlmdavis", "createdAt": "2020-08-17T15:22:04Z", "path": "apps/bfd-pipeline/bfd-pipeline-rif-load/src/main/java/gov/cms/bfd/pipeline/rif/load/RifLoader.java", "diffHunk": "@@ -609,20 +609,46 @@ private static void updateBeneficaryHistory(\n     Beneficiary oldBeneficiaryRecord =\n         entityManager.find(Beneficiary.class, newBeneficiaryRecord.getBeneficiaryId());\n \n-    if (oldBeneficiaryRecord != null) {\n+    if (oldBeneficiaryRecord != null\n+        && !isBeneficiaryHistoryEqual(newBeneficiaryRecord, oldBeneficiaryRecord)) {\n       BeneficiaryHistory oldBeneCopy = new BeneficiaryHistory();\n       oldBeneCopy.setBeneficiaryId(oldBeneficiaryRecord.getBeneficiaryId());\n       oldBeneCopy.setBirthDate(oldBeneficiaryRecord.getBirthDate());\n       oldBeneCopy.setHicn(oldBeneficiaryRecord.getHicn());\n       oldBeneCopy.setHicnUnhashed(oldBeneficiaryRecord.getHicnUnhashed());\n       oldBeneCopy.setSex(oldBeneficiaryRecord.getSex());\n       oldBeneCopy.setMedicareBeneficiaryId(oldBeneficiaryRecord.getMedicareBeneficiaryId());\n+      oldBeneCopy.setMbiHash(oldBeneficiaryRecord.getMbiHash());", "originalCommit": "32dfb84fad81b24e021cb20c6e692f58695e8397", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU1NTI4OA==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/305#discussion_r471555288", "bodyText": "The inconsistent field names here make me sad (and make this harder to read), but that's not this PR's fault.", "author": "karlmdavis", "createdAt": "2020-08-17T15:24:13Z", "path": "apps/bfd-pipeline/bfd-pipeline-rif-load/src/main/java/gov/cms/bfd/pipeline/rif/load/RifLoader.java", "diffHunk": "@@ -609,20 +609,46 @@ private static void updateBeneficaryHistory(\n     Beneficiary oldBeneficiaryRecord =\n         entityManager.find(Beneficiary.class, newBeneficiaryRecord.getBeneficiaryId());\n \n-    if (oldBeneficiaryRecord != null) {\n+    if (oldBeneficiaryRecord != null\n+        && !isBeneficiaryHistoryEqual(newBeneficiaryRecord, oldBeneficiaryRecord)) {\n       BeneficiaryHistory oldBeneCopy = new BeneficiaryHistory();\n       oldBeneCopy.setBeneficiaryId(oldBeneficiaryRecord.getBeneficiaryId());\n       oldBeneCopy.setBirthDate(oldBeneficiaryRecord.getBirthDate());\n       oldBeneCopy.setHicn(oldBeneficiaryRecord.getHicn());\n       oldBeneCopy.setHicnUnhashed(oldBeneficiaryRecord.getHicnUnhashed());\n       oldBeneCopy.setSex(oldBeneficiaryRecord.getSex());\n       oldBeneCopy.setMedicareBeneficiaryId(oldBeneficiaryRecord.getMedicareBeneficiaryId());\n+      oldBeneCopy.setMbiHash(oldBeneficiaryRecord.getMbiHash());\n       oldBeneCopy.setLastUpdated(batchTimestamp);\n \n       entityManager.persist(oldBeneCopy);\n     }\n   }\n \n+  /**\n+   * Ensures that a {@link Beneficiary} records for old and new benificiaries are equal or not\n+   * equal.\n+   *\n+   * @param newBeneficiaryRecord the {@link Beneficiary} new record being processed\n+   * @param oldBeneficiaryRecord the {@link Beneficiary} old record that was processed\n+   */\n+  static boolean isBeneficiaryHistoryEqual(\n+      Beneficiary newBeneficiaryRecord, Beneficiary oldBeneficiaryRecord) {\n+\n+    if (newBeneficiaryRecord.getBirthDate().equals(oldBeneficiaryRecord.getBirthDate())\n+        && newBeneficiaryRecord.getHicn().equals(oldBeneficiaryRecord.getHicn())\n+        && newBeneficiaryRecord.getHicnUnhashed().equals(oldBeneficiaryRecord.getHicnUnhashed())\n+        && newBeneficiaryRecord.getSex() == oldBeneficiaryRecord.getSex()\n+        && newBeneficiaryRecord.getMbiHash().equals(oldBeneficiaryRecord.getMbiHash())\n+        && newBeneficiaryRecord\n+            .getMedicareBeneficiaryId()\n+            .equals(oldBeneficiaryRecord.getMedicareBeneficiaryId())) {", "originalCommit": "32dfb84fad81b24e021cb20c6e692f58695e8397", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU5NzY5Mw==", "url": "https://github.com/CMSgov/beneficiary-fhir-data/pull/305#discussion_r471597693", "bodyText": "Shouldn't this just be checking to see if lastUpdated is less than or equal to start?\nAlso: you could just pull the lastUpdated from the record after the first load, run the second load, and then verify that it's unchanged. That seems simplest+clearest.", "author": "karlmdavis", "createdAt": "2020-08-17T16:30:45Z", "path": "apps/bfd-pipeline/bfd-pipeline-rif-load/src/test/java/gov/cms/bfd/pipeline/rif/load/RifLoaderIT.java", "diffHunk": "@@ -258,6 +259,63 @@ public void loadSampleU() {\n     }\n   }\n \n+  /**\n+   * Runs {@link gov.cms.bfd.pipeline.rif.load.RifLoader} against the {@link\n+   * StaticRifResourceGroup#SAMPLE_U} data.\n+   */\n+  @Test\n+  public void loadSampleUUnchanged() {\n+    DataSource dataSource = DatabaseTestHelper.getTestDatabaseAfterClean();\n+    loadSample(dataSource, Arrays.asList(StaticRifResourceGroup.SAMPLE_A.getResources()));\n+    // this should insert a new beneficiary history record\n+    loadSample(dataSource, Arrays.asList(StaticRifResource.SAMPLE_U_BENES_UNCHANGED));\n+\n+    long start = System.currentTimeMillis();\n+    // this should bypass inserting a new beneficiary history record because it already exists\n+    loadSample(dataSource, Arrays.asList(StaticRifResource.SAMPLE_U_BENES_UNCHANGED));\n+\n+    /*\n+     * Verify that the updates worked as expected by manually checking some fields.\n+     */\n+    LoadAppOptions options = RifLoaderTestUtils.getLoadOptions(dataSource);\n+    EntityManagerFactory entityManagerFactory =\n+        RifLoaderTestUtils.createEntityManagerFactory(options);\n+    EntityManager entityManager = null;\n+    try {\n+      entityManager = entityManagerFactory.createEntityManager();\n+\n+      CriteriaQuery<BeneficiaryHistory> beneficiaryHistoryCriteria =\n+          entityManager.getCriteriaBuilder().createQuery(BeneficiaryHistory.class);\n+      List<BeneficiaryHistory> beneficiaryHistoryEntries =\n+          entityManager\n+              .createQuery(\n+                  beneficiaryHistoryCriteria.select(\n+                      beneficiaryHistoryCriteria.from(BeneficiaryHistory.class)))\n+              .getResultList();\n+      for (BeneficiaryHistory beneHistory : beneficiaryHistoryEntries) {\n+        Assert.assertEquals(\"567834\", beneHistory.getBeneficiaryId());\n+        // A recent lastUpdated timestamp\n+        Assert.assertTrue(\"Expected a lastUpdated field\", beneHistory.getLastUpdated().isPresent());\n+        long end = System.currentTimeMillis();\n+        // finding the time difference and converting it into seconds\n+        long secs = (end - start) / 1000L;\n+        beneHistory\n+            .getLastUpdated()\n+            .ifPresent(\n+                lastUpdated -> {\n+                  Assert.assertFalse(\n+                      \"Expected not a recent lastUpdated timestamp\",\n+                      lastUpdated.after(Date.from(Instant.now().minusSeconds(secs))));\n+                });", "originalCommit": "32dfb84fad81b24e021cb20c6e692f58695e8397", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}