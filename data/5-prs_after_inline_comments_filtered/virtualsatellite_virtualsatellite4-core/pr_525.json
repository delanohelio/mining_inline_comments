{"pr_number": 525, "pr_title": "import from .mat-files", "pr_createdAt": "2020-03-17T09:02:04Z", "pr_url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/525", "timeline": [{"oid": "c616495079614611a301e1fa420700ebd9f6f564", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/c616495079614611a301e1fa420700ebd9f6f564", "message": "First commit - (Task #520)\n\nAdded Importer and ImporterTest\n\n---\nTask #520: Import from Matlab", "committedDate": "2020-03-05T14:31:11Z", "type": "commit"}, {"oid": "8a28175da72b9a20bf960e0378c303ecac9e7b1a", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/8a28175da72b9a20bf960e0378c303ecac9e7b1a", "message": "Check which Instance is given - (Task #520)\n\n---\nTask #520: Import from Matlab", "committedDate": "2020-03-05T16:46:16Z", "type": "commit"}, {"oid": "7f72113afdd503bf4d31f901272e88e69e1fa619", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/7f72113afdd503bf4d31f901272e88e69e1fa619", "message": "Get Changes from Exporter - (Task #489)\n\n---\nTask #489: Include Matlab libary", "committedDate": "2020-03-06T07:40:05Z", "type": "commit"}, {"oid": "be5959b9b9a18f467e199da097b834291cf35ee1", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/be5959b9b9a18f467e199da097b834291cf35ee1", "message": "Change ExporterName  - (Task #520)\n\n---\nTask #520: Import from Matlab", "committedDate": "2020-03-06T08:00:10Z", "type": "commit"}, {"oid": "d16df182ef86c294f9b36cc167d06ed14fb7c47c", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/d16df182ef86c294f9b36cc167d06ed14fb7c47c", "message": "Merge branch 'feature/task_489-Include_Matlab_libary' into feature/task_520-Import_from_Matlab", "committedDate": "2020-03-06T08:43:43Z", "type": "commit"}, {"oid": "5b33237dd427d071167ea4707bbcb39bd241d35f", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/5b33237dd427d071167ea4707bbcb39bd241d35f", "message": "Added some things - (Task #520)\n\n---\nTask #520: Import from Matlab", "committedDate": "2020-03-06T12:54:54Z", "type": "commit"}, {"oid": "41e2669378733dbe09dbfdc4bd1b72dd0084d048", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/41e2669378733dbe09dbfdc4bd1b72dd0084d048", "message": "Can import values, unit and name - (Task #520)\n\n---\nTask #520: Import from Matlab", "committedDate": "2020-03-10T07:28:41Z", "type": "commit"}, {"oid": "34ee753a4f72a5e7b18fb0b6e492f4089fb2d93a", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/34ee753a4f72a5e7b18fb0b6e492f4089fb2d93a", "message": "Working resourceProperty - (Task #520)\n\n---\nTask #520: Import from Matlab", "committedDate": "2020-03-10T11:59:17Z", "type": "commit"}, {"oid": "65fbc02225bb852a922f8ae2a8cac65b6d7352a0", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/65fbc02225bb852a922f8ae2a8cac65b6d7352a0", "message": "Changes for better importing - (Task #520)\n\n---\nTask #520: Import from Matlab", "committedDate": "2020-03-10T12:43:52Z", "type": "commit"}, {"oid": "d4f50a28441fb663239eff3cbf758f47bf740913", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/d4f50a28441fb663239eff3cbf758f47bf740913", "message": "Array and ERef - (Task #520)\n\n---\nTask #520: Import from Matlab", "committedDate": "2020-03-10T14:54:44Z", "type": "commit"}, {"oid": "3e6b6bbd084810214399aa7508948090f2214dd5", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/3e6b6bbd084810214399aa7508948090f2214dd5", "message": "Import everything given without tests - (Task #520)\n\nCan inport everything if only the value changes\n\n---\nTask #520: Import from Matlab", "committedDate": "2020-03-10T16:29:46Z", "type": "commit"}, {"oid": "16fd412b3fbcbc448c76bcfe4085441470a605ed", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/16fd412b3fbcbc448c76bcfe4085441470a605ed", "message": "Added some Tests - (Task #520)\n\n---\nTask #520: Import from Matlab", "committedDate": "2020-03-11T14:34:21Z", "type": "commit"}, {"oid": "d5a716c2fe528f3944dfa71f602b67235c55c0af", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/d5a716c2fe528f3944dfa71f602b67235c55c0af", "message": "Can update - (Task #520)\n\ncan update int-, float-, bool-, string- and enumproperties\n\n---\nTask #520: Import from Matlab", "committedDate": "2020-03-12T09:48:37Z", "type": "commit"}, {"oid": "25254a53d59ae4f753ed744d98ac5cb825ed2139", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/25254a53d59ae4f753ed744d98ac5cb825ed2139", "message": "Can Import from Matlab - (Task #520)\n\nCan Import and update everything except Reference and EReference.\n\n---\nTask #520: Import from Matlab", "committedDate": "2020-03-16T08:41:38Z", "type": "commit"}, {"oid": "47df20fa0979cbabd3f5fa3241530cf9a558e780", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/47df20fa0979cbabd3f5fa3241530cf9a558e780", "message": "Can update ReferenceProperty - (Task #520)\n\ncan update a reference property if the resource is given\n\n---\nTask #520: Import from Matlab", "committedDate": "2020-03-16T15:07:42Z", "type": "commit"}, {"oid": "492f728eeeb12bce618635cb353b7763688abb84", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/492f728eeeb12bce618635cb353b7763688abb84", "message": "Can Import EReference - (Task #520)\n\n---\nTask #520: Import from Matlab", "committedDate": "2020-03-16T15:22:32Z", "type": "commit"}, {"oid": "0fa0b09ea9a877a5893feb98e18ea958f6514a0d", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/0fa0b09ea9a877a5893feb98e18ea958f6514a0d", "message": "Can update all properties- (Task #520)\n\ncan update all properties.\n\n---\nTask #520: Import from Matlab", "committedDate": "2020-03-16T16:10:58Z", "type": "commit"}, {"oid": "426646f6e8ebc74ec09dca899c48c568bf9c7e0d", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/426646f6e8ebc74ec09dca899c48c568bf9c7e0d", "message": "Some changes - (Task #520)\n\n---\nTask #520: Import from Matlab", "committedDate": "2020-03-17T08:31:31Z", "type": "commit"}, {"oid": "3a70d7f0a9faaf1f4c2832f6d64704f6544edd3f", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/3a70d7f0a9faaf1f4c2832f6d64704f6544edd3f", "message": "Clean Up - (Task #520)\n\n---\nTask #520: Import from Matlab", "committedDate": "2020-03-17T10:27:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU1NDg5MQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/525#discussion_r393554891", "bodyText": "What is this uncommented code here? Do we still need it?", "author": "franzTobiasDLR", "createdAt": "2020-03-17T09:46:00Z", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/dvlm/mat/MatImporter.java", "diffHunk": "@@ -0,0 +1,451 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.dvlm.mat;\r\n+\r\n+import java.io.IOException;\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.common.util.URI;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.emf.ecore.resource.Resource;\r\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\r\n+\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.BooleanProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.FloatProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IntProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ResourceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ArrayInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ComposedPropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EnumUnitPropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ResourcePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.UnitValuePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ValuePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.impl.ArrayInstanceImpl;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.util.PropertyinstancesSwitch;\r\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\r\n+import us.hebi.matlab.mat.types.MatFile;\r\n+import us.hebi.matlab.mat.types.Struct;\r\n+import us.hebi.matlab.mat.types.Cell;\r\n+ \r\n+/**\r\n+ * Class for exporting data to .mat\r\n+ */\r\n+public class MatImporter {\r\n+\tStructuralElementInstance sei;\r\n+\t\r\n+\t/**\r\n+\t * checks if mat and sei fit together\r\n+\t * @param sei sei which should be changed\r\n+\t * @param matFile MatFile that includes all Information\r\n+\t */\r\n+\tpublic void importSei(StructuralElementInstance sei, MatFile mat) throws IOException {\r\n+\t\tthis.sei = sei;\r\n+\t\tif (checkIfCorrectSei(sei, mat)) {\r\n+\t\t\tStruct struct = mat.getStruct(sei.getName());\r\n+\t\t\timportSei(sei, struct);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * split up children and CategoryAssinments\r\n+\t * @param sei sei which should be changed\r\n+\t * @param seiStruct MatStruct that includes all Information\r\n+\t */\r\n+\tpublic void importSei(StructuralElementInstance sei, Struct seiStruct) {\r\n+\t\tif (seiStruct.getFieldNames().contains(MatHelper.CHILDREN)) {\r\n+\t\t\tStruct matChildren = seiStruct.getStruct(MatHelper.CHILDREN);\r\n+\t\t\tEList<StructuralElementInstance> seiChildren = sei.getChildren();\r\n+\t\t\tfor (StructuralElementInstance seiChild : seiChildren) {\r\n+\t\t\t\timportSei(seiChild, matChildren.getStruct(seiChild.getName()));\r\n+\t\t\t}\r\n+\t\t\tseiStruct.remove(MatHelper.CHILDREN);\r\n+\t\t}\r\n+\t\tEList<CategoryAssignment> seiCas = sei.getCategoryAssignments();\r\n+\t\timportCas(seiCas, seiStruct);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * split up CategoryAssinment\r\n+\t * @param seiCas List of CategoryAssinments which should be changed\r\n+\t * @param struct MatStruct that includes all Information\r\n+\t */\r\n+\tprivate void importCas(EList<CategoryAssignment> seiCas, Struct struct) {\r\n+\t\t\r\n+\t\tList<String> nameMatCas = struct.getFieldNames();\r\n+\t\tList<String> nameSeiCas = new ArrayList<String>();\r\n+\t\tfor (CategoryAssignment seiCa : seiCas) {\r\n+\t\t\tnameSeiCas.add(seiCa.getName());\r\n+\t\t}\r\n+\r\n+\t\tfor (int i = 0; i < seiCas.size();) {\r\n+\t\t\tif (nameMatCas.contains(seiCas.get(i).getName())) { //import all given CategoryAssinments\r\n+\t\t\t\timportGivenCa(seiCas.get(i), struct.get(seiCas.get(i).getName()));\r\n+\t\t\t\tnameMatCas.remove(seiCas.get(i).getName());\r\n+\t\t\t\ti++;\r\n+\t\t\t} else {\r\n+\t\t\t\tseiCas.remove(i);\r\n+\t\t\t}\r\n+\t\t}\r\n+\r\n+\t\t//import all new CategoryAssinments\r\n+\t\t//for (String nameMatCa : nameMatCas) {\r\n+\t\t//\tseiCas.add(importNewCa(struct.get(nameMatCa),nameMatCa));\r\n+\t\t//}\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * split up PropertyInstances\r\n+\t * @param seiCa CategoryAssinments which should be changed\r\n+\t * @param struct MatStruct that includes all Information\r\n+\t */\r\n+\tprivate void importGivenCa(CategoryAssignment seiCa, Struct struct) {\r\n+\t\tEList<APropertyInstance> seiAPIs = seiCa.getPropertyInstances();\r\n+\t\tList<String> nameMatAPIs = struct.getFieldNames();\r\n+\t\t\r\n+\t\t//import all given APropertyInstances\r\n+\t\tfor (int i = 0; i < seiAPIs.size();) {\r\n+\t\t\tif (nameMatAPIs.contains(seiAPIs.get(i).getType().getName())) {\r\n+\t\t\t\tif (!(seiAPIs instanceof ArrayInstanceImpl)) {\r\n+\t\t\t\t\timportGivenAPI(seiAPIs.get(i), struct.get(seiAPIs.get(i).getType().getName()));\r\n+\t\t\t\t} else {\r\n+\t\t\t\t\timportGivenAPI(seiAPIs.get(i), struct);\r\n+\t\t\t\t}\r\n+\t\t\t\tnameMatAPIs.remove(seiAPIs.get(i).getType().getName());\r\n+\t\t\t\ti++;\r\n+\t\t\t} else {\r\n+\t\t\t\tseiAPIs.remove(seiAPIs.get(i));\r\n+\t\t\t}\r\n+\t\t}\r\n+\r\n+\t\t//import all new APropertyInstances\r", "originalCommit": "426646f6e8ebc74ec09dca899c48c568bf9c7e0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4MDc1Mw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/525#discussion_r393680753", "bodyText": "It is deleted now.", "author": "ALEhmerDLR", "createdAt": "2020-03-17T13:32:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU1NDg5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU2MjYxNg==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/525#discussion_r393562616", "bodyText": "Did you check what happens if you import a string value here which doesn't correspond to any Enum Literal?", "author": "franzTobiasDLR", "createdAt": "2020-03-17T09:58:51Z", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/dvlm/mat/MatImporter.java", "diffHunk": "@@ -0,0 +1,451 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.dvlm.mat;\r\n+\r\n+import java.io.IOException;\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.common.util.URI;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.emf.ecore.resource.Resource;\r\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\r\n+\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.BooleanProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.FloatProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IntProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ResourceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ArrayInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ComposedPropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EnumUnitPropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ResourcePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.UnitValuePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ValuePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.impl.ArrayInstanceImpl;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.util.PropertyinstancesSwitch;\r\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\r\n+import us.hebi.matlab.mat.types.MatFile;\r\n+import us.hebi.matlab.mat.types.Struct;\r\n+import us.hebi.matlab.mat.types.Cell;\r\n+ \r\n+/**\r\n+ * Class for exporting data to .mat\r\n+ */\r\n+public class MatImporter {\r\n+\tStructuralElementInstance sei;\r\n+\t\r\n+\t/**\r\n+\t * checks if mat and sei fit together\r\n+\t * @param sei sei which should be changed\r\n+\t * @param matFile MatFile that includes all Information\r\n+\t */\r\n+\tpublic void importSei(StructuralElementInstance sei, MatFile mat) throws IOException {\r\n+\t\tthis.sei = sei;\r\n+\t\tif (checkIfCorrectSei(sei, mat)) {\r\n+\t\t\tStruct struct = mat.getStruct(sei.getName());\r\n+\t\t\timportSei(sei, struct);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * split up children and CategoryAssinments\r\n+\t * @param sei sei which should be changed\r\n+\t * @param seiStruct MatStruct that includes all Information\r\n+\t */\r\n+\tpublic void importSei(StructuralElementInstance sei, Struct seiStruct) {\r\n+\t\tif (seiStruct.getFieldNames().contains(MatHelper.CHILDREN)) {\r\n+\t\t\tStruct matChildren = seiStruct.getStruct(MatHelper.CHILDREN);\r\n+\t\t\tEList<StructuralElementInstance> seiChildren = sei.getChildren();\r\n+\t\t\tfor (StructuralElementInstance seiChild : seiChildren) {\r\n+\t\t\t\timportSei(seiChild, matChildren.getStruct(seiChild.getName()));\r\n+\t\t\t}\r\n+\t\t\tseiStruct.remove(MatHelper.CHILDREN);\r\n+\t\t}\r\n+\t\tEList<CategoryAssignment> seiCas = sei.getCategoryAssignments();\r\n+\t\timportCas(seiCas, seiStruct);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * split up CategoryAssinment\r\n+\t * @param seiCas List of CategoryAssinments which should be changed\r\n+\t * @param struct MatStruct that includes all Information\r\n+\t */\r\n+\tprivate void importCas(EList<CategoryAssignment> seiCas, Struct struct) {\r\n+\t\t\r\n+\t\tList<String> nameMatCas = struct.getFieldNames();\r\n+\t\tList<String> nameSeiCas = new ArrayList<String>();\r\n+\t\tfor (CategoryAssignment seiCa : seiCas) {\r\n+\t\t\tnameSeiCas.add(seiCa.getName());\r\n+\t\t}\r\n+\r\n+\t\tfor (int i = 0; i < seiCas.size();) {\r\n+\t\t\tif (nameMatCas.contains(seiCas.get(i).getName())) { //import all given CategoryAssinments\r\n+\t\t\t\timportGivenCa(seiCas.get(i), struct.get(seiCas.get(i).getName()));\r\n+\t\t\t\tnameMatCas.remove(seiCas.get(i).getName());\r\n+\t\t\t\ti++;\r\n+\t\t\t} else {\r\n+\t\t\t\tseiCas.remove(i);\r\n+\t\t\t}\r\n+\t\t}\r\n+\r\n+\t\t//import all new CategoryAssinments\r\n+\t\t//for (String nameMatCa : nameMatCas) {\r\n+\t\t//\tseiCas.add(importNewCa(struct.get(nameMatCa),nameMatCa));\r\n+\t\t//}\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * split up PropertyInstances\r\n+\t * @param seiCa CategoryAssinments which should be changed\r\n+\t * @param struct MatStruct that includes all Information\r\n+\t */\r\n+\tprivate void importGivenCa(CategoryAssignment seiCa, Struct struct) {\r\n+\t\tEList<APropertyInstance> seiAPIs = seiCa.getPropertyInstances();\r\n+\t\tList<String> nameMatAPIs = struct.getFieldNames();\r\n+\t\t\r\n+\t\t//import all given APropertyInstances\r\n+\t\tfor (int i = 0; i < seiAPIs.size();) {\r\n+\t\t\tif (nameMatAPIs.contains(seiAPIs.get(i).getType().getName())) {\r\n+\t\t\t\tif (!(seiAPIs instanceof ArrayInstanceImpl)) {\r\n+\t\t\t\t\timportGivenAPI(seiAPIs.get(i), struct.get(seiAPIs.get(i).getType().getName()));\r\n+\t\t\t\t} else {\r\n+\t\t\t\t\timportGivenAPI(seiAPIs.get(i), struct);\r\n+\t\t\t\t}\r\n+\t\t\t\tnameMatAPIs.remove(seiAPIs.get(i).getType().getName());\r\n+\t\t\t\ti++;\r\n+\t\t\t} else {\r\n+\t\t\t\tseiAPIs.remove(seiAPIs.get(i));\r\n+\t\t\t}\r\n+\t\t}\r\n+\r\n+\t\t//import all new APropertyInstances\r\n+\t\t//for (String nameMatAPI : nameMatAPIs) {\r\n+\t\t//\tseiAPIs.add(importNewAPI(struct.get(nameMatAPI)));\r\n+\t\t//}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * import a given Property\r\n+\t * @param seiAPI PropertyInstance which should be changed\r\n+\t * @param struct MatStruct that includes all Information\r\n+\t */\r\n+\tprivate void importGivenAPI(APropertyInstance seiAPI, Struct struct) {\r\n+\t\tgetRightPropertyBySei(seiAPI, struct);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * import a given Property as Instance of\r\n+\t * \r\n+\t * return value is not needed or used\r\n+\t * @param element PropertyInstance which should be changed\r\n+\t * @param struct MatStruct that includes all Information\r\n+\t */\r\n+\tprivate Boolean getRightPropertyBySei(APropertyInstance element, Struct struct) {\r\n+\t\tBoolean done = new PropertyinstancesSwitch<Boolean>() {\r\n+\t\t\t@Override\r\n+\t\t\tpublic Boolean caseUnitValuePropertyInstance(UnitValuePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object, struct);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Boolean caseResourcePropertyInstance(ResourcePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object, struct);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Boolean caseEnumUnitPropertyInstance(EnumUnitPropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object, struct);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Boolean caseValuePropertyInstance(ValuePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object, struct);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Boolean caseReferencePropertyInstance(ReferencePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object, struct);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Boolean caseEReferencePropertyInstance(EReferencePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object, struct);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Boolean caseComposedPropertyInstance(ComposedPropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object, struct);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Boolean caseArrayInstance(ArrayInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object, struct.getCell(object.getType().getName()));\r\n+\t\t\t}\r\n+\r\n+\t\t}.doSwitch(element);\r\n+\t\treturn done;\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * import a given ArrayInstance\r\n+\t * \r\n+\t * updates everything inside it\r\n+\t * @param element PropertyInstance which should be changed\r\n+\t * @param cell MatCell that includes all Information\r\n+\t */\r\n+\tprotected Boolean contentOfProperty(ArrayInstance element, Cell cell) {\r\n+\t\tEList<APropertyInstance> propertyInstances = element.getArrayInstances();\r\n+\t\tint [] dims = cell.getDimensions();\r\n+\t\tfor (int i = 0; i < dims[0]; i++) {\r\n+\t\t\timportGivenAPI(propertyInstances.get(i), cell.get(i));\r\n+\t\t}\r\n+\t\treturn true;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * import a given ComposedPropertyInstance\r\n+\t * \r\n+\t * updates everything inside it\r\n+\t * @param element PropertyInstance which should be changed\r\n+\t * @param struct MatStruct that includes all Information\r\n+\t */\r\n+\tprotected Boolean contentOfProperty(ComposedPropertyInstance element, Struct struct) {\r\n+\t\tCategoryAssignment ca = element.getTypeInstance();\t\r\n+\t\timportGivenCa(ca, struct);\r\n+\t\treturn true;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * import a given EReferencePropertyInstance\r\n+\t * \r\n+\t * updates value\r\n+\t * @param element PropertyInstance which should be changed\r\n+\t * @param struct MatStruct that includes all Information\r\n+\t */\r\n+\tprotected Boolean contentOfProperty(EReferencePropertyInstance element, Struct struct) {\r\n+\t\tif (element.getType() instanceof EReferenceProperty) {\r\n+\t\t\tBeanPropertyEReference<EReferenceProperty> bpe = new BeanPropertyEReference<EReferenceProperty>(element);\r\n+\t\t\tif (\"''\".equals(struct.get(MatHelper.URI).toString())) {\r\n+\t\t\t\tbpe.unset();\r\n+\t\t\t} else {\r\n+\t\t\t\tURI uri = URI.createPlatformPluginURI(shorter(struct.get(MatHelper.URI).toString()), true);\r\n+\t\t\t\tResource res = new ResourceSetImpl().getResource(uri, true);\r\n+\t\t\t\tEObject eReferenceValue = res.getEObject(uri.fragment());\r\n+\t\t\t\telement.setReference(eReferenceValue);\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\treturn true;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * import a given ReferencePropertyInstance\r\n+\t * \r\n+\t * updates reference\r\n+\t * @param element PropertyInstance which should be changed\r\n+\t * @param struct MatStruct that includes all Information\r\n+\t */\r\n+\tprotected Boolean contentOfProperty(ReferencePropertyInstance element, Struct struct) {\r\n+\t\tif (element.getType() instanceof ReferenceProperty) {\r\n+\t\t\tif (\"''\".equals(struct.get(MatHelper.UUID).toString())) {\r\n+\t\t\t\telement.setReference(null);\r\n+\t\t\t} else {\r\n+\t\t\t\t//StructuralElementInstance sei2 = sei;\r\n+\t\t\t\tEList<Resource> res = sei.eResource().getResourceSet().getResources();\r\n+\t\t\t\tfor (Resource re : res) {\r\n+\t\t\t\t\tEObject ref = re.getEObject(shorter(struct.get(MatHelper.UUID).toString()));\r\n+\t\t\t\t\tif (ref != null) {\r\n+\t\t\t\t\t\tif (ref instanceof ATypeInstance) {\r\n+\t\t\t\t\t\t\telement.setReference((ATypeInstance) ref);\r\n+\t\t\t\t\t\t} \r\n+\t\t\t\t\t}\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\treturn true;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * import a given ValuePropertyInstance\r\n+\t * \r\n+\t * updates value\r\n+\t * @param element PropertyInstance which should be changed\r\n+\t * @param struct MatStruct that includes all Information\r\n+\t */\r\n+\tprotected Boolean contentOfProperty(ValuePropertyInstance element, Struct struct) {\r\n+\t\tif (element.getType() instanceof BooleanProperty) {\r\n+\t\t\tBeanPropertyBoolean bpb = new BeanPropertyBoolean(element);\r\n+\t\t\tif (!struct.get(MatHelper.VALUE).toString().equals(\"''\")) {\r\n+\t\t\t\tif (struct.get(MatHelper.VALUE).toString().equals(\"true\")) {\r\n+\t\t\t\t\tbpb.setValue(true);\r\n+\t\t\t\t} else {\r\n+\t\t\t\t\tbpb.setValue(false);\r\n+\t\t\t\t}\r\n+\t\t\t} else {\r\n+\t\t\t\tbpb.unset();\r\n+\t\t\t}\r\n+\t\t} else if (element.getType() instanceof StringProperty) {\r\n+\t\t\tBeanPropertyString bps = new BeanPropertyString(element);\r\n+\t\t\tif (!struct.get(MatHelper.VALUE).toString().equals(\"''\")) {\r\n+\t\t\t\tbps.setValue(shorter(struct.get(MatHelper.VALUE).toString()));\r\n+\t\t\t} else {\r\n+\t\t\t\tbps.unset();\r\n+\t\t\t}\r\n+\t\t\t\r\n+\t\t}\r\n+\t\treturn true;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * import a given EnumUnitPropertyInstance\r\n+\t * \r\n+\t * updates name and unit. value is updates automatically\r\n+\t * @param element PropertyInstance which should be changed\r\n+\t * @param struct MatStruct that includes all Information\r\n+\t */\r\n+\tprivate Boolean contentOfProperty(EnumUnitPropertyInstance element, Struct struct) {\r\n+\t\tif (element.getType() instanceof EnumProperty) {\r\n+\t\t\tBeanPropertyEnum bpe = new BeanPropertyEnum(element);\r\n+\t\t\tbpe.setValue(shorter(struct.get(MatHelper.NAME).toString()));\r", "originalCommit": "426646f6e8ebc74ec09dca899c48c568bf9c7e0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5MDMxNw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/525#discussion_r393690317", "bodyText": "It sets the Value null.", "author": "ALEhmerDLR", "createdAt": "2020-03-17T13:46:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU2MjYxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgzOTkyOA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/525#discussion_r394839928", "bodyText": "If there was a value set and you want to import a new value which doesn't correspond to any Enum Literal, it will set the value to null.", "author": "ALEhmerDLR", "createdAt": "2020-03-19T07:45:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU2MjYxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU2NzU0OQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/525#discussion_r393567549", "bodyText": "Is this unspecified 'createURI' creating the right type of URI?", "author": "franzTobiasDLR", "createdAt": "2020-03-17T10:07:35Z", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/dvlm/mat/MatImporter.java", "diffHunk": "@@ -0,0 +1,451 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.dvlm.mat;\r\n+\r\n+import java.io.IOException;\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.common.util.URI;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.emf.ecore.resource.Resource;\r\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\r\n+\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.BooleanProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.FloatProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IntProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ResourceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ArrayInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ComposedPropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EnumUnitPropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ResourcePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.UnitValuePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ValuePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.impl.ArrayInstanceImpl;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.util.PropertyinstancesSwitch;\r\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\r\n+import us.hebi.matlab.mat.types.MatFile;\r\n+import us.hebi.matlab.mat.types.Struct;\r\n+import us.hebi.matlab.mat.types.Cell;\r\n+ \r\n+/**\r\n+ * Class for exporting data to .mat\r\n+ */\r\n+public class MatImporter {\r\n+\tStructuralElementInstance sei;\r\n+\t\r\n+\t/**\r\n+\t * checks if mat and sei fit together\r\n+\t * @param sei sei which should be changed\r\n+\t * @param matFile MatFile that includes all Information\r\n+\t */\r\n+\tpublic void importSei(StructuralElementInstance sei, MatFile mat) throws IOException {\r\n+\t\tthis.sei = sei;\r\n+\t\tif (checkIfCorrectSei(sei, mat)) {\r\n+\t\t\tStruct struct = mat.getStruct(sei.getName());\r\n+\t\t\timportSei(sei, struct);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * split up children and CategoryAssinments\r\n+\t * @param sei sei which should be changed\r\n+\t * @param seiStruct MatStruct that includes all Information\r\n+\t */\r\n+\tpublic void importSei(StructuralElementInstance sei, Struct seiStruct) {\r\n+\t\tif (seiStruct.getFieldNames().contains(MatHelper.CHILDREN)) {\r\n+\t\t\tStruct matChildren = seiStruct.getStruct(MatHelper.CHILDREN);\r\n+\t\t\tEList<StructuralElementInstance> seiChildren = sei.getChildren();\r\n+\t\t\tfor (StructuralElementInstance seiChild : seiChildren) {\r\n+\t\t\t\timportSei(seiChild, matChildren.getStruct(seiChild.getName()));\r\n+\t\t\t}\r\n+\t\t\tseiStruct.remove(MatHelper.CHILDREN);\r\n+\t\t}\r\n+\t\tEList<CategoryAssignment> seiCas = sei.getCategoryAssignments();\r\n+\t\timportCas(seiCas, seiStruct);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * split up CategoryAssinment\r\n+\t * @param seiCas List of CategoryAssinments which should be changed\r\n+\t * @param struct MatStruct that includes all Information\r\n+\t */\r\n+\tprivate void importCas(EList<CategoryAssignment> seiCas, Struct struct) {\r\n+\t\t\r\n+\t\tList<String> nameMatCas = struct.getFieldNames();\r\n+\t\tList<String> nameSeiCas = new ArrayList<String>();\r\n+\t\tfor (CategoryAssignment seiCa : seiCas) {\r\n+\t\t\tnameSeiCas.add(seiCa.getName());\r\n+\t\t}\r\n+\r\n+\t\tfor (int i = 0; i < seiCas.size();) {\r\n+\t\t\tif (nameMatCas.contains(seiCas.get(i).getName())) { //import all given CategoryAssinments\r\n+\t\t\t\timportGivenCa(seiCas.get(i), struct.get(seiCas.get(i).getName()));\r\n+\t\t\t\tnameMatCas.remove(seiCas.get(i).getName());\r\n+\t\t\t\ti++;\r\n+\t\t\t} else {\r\n+\t\t\t\tseiCas.remove(i);\r\n+\t\t\t}\r\n+\t\t}\r\n+\r\n+\t\t//import all new CategoryAssinments\r\n+\t\t//for (String nameMatCa : nameMatCas) {\r\n+\t\t//\tseiCas.add(importNewCa(struct.get(nameMatCa),nameMatCa));\r\n+\t\t//}\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * split up PropertyInstances\r\n+\t * @param seiCa CategoryAssinments which should be changed\r\n+\t * @param struct MatStruct that includes all Information\r\n+\t */\r\n+\tprivate void importGivenCa(CategoryAssignment seiCa, Struct struct) {\r\n+\t\tEList<APropertyInstance> seiAPIs = seiCa.getPropertyInstances();\r\n+\t\tList<String> nameMatAPIs = struct.getFieldNames();\r\n+\t\t\r\n+\t\t//import all given APropertyInstances\r\n+\t\tfor (int i = 0; i < seiAPIs.size();) {\r\n+\t\t\tif (nameMatAPIs.contains(seiAPIs.get(i).getType().getName())) {\r\n+\t\t\t\tif (!(seiAPIs instanceof ArrayInstanceImpl)) {\r\n+\t\t\t\t\timportGivenAPI(seiAPIs.get(i), struct.get(seiAPIs.get(i).getType().getName()));\r\n+\t\t\t\t} else {\r\n+\t\t\t\t\timportGivenAPI(seiAPIs.get(i), struct);\r\n+\t\t\t\t}\r\n+\t\t\t\tnameMatAPIs.remove(seiAPIs.get(i).getType().getName());\r\n+\t\t\t\ti++;\r\n+\t\t\t} else {\r\n+\t\t\t\tseiAPIs.remove(seiAPIs.get(i));\r\n+\t\t\t}\r\n+\t\t}\r\n+\r\n+\t\t//import all new APropertyInstances\r\n+\t\t//for (String nameMatAPI : nameMatAPIs) {\r\n+\t\t//\tseiAPIs.add(importNewAPI(struct.get(nameMatAPI)));\r\n+\t\t//}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * import a given Property\r\n+\t * @param seiAPI PropertyInstance which should be changed\r\n+\t * @param struct MatStruct that includes all Information\r\n+\t */\r\n+\tprivate void importGivenAPI(APropertyInstance seiAPI, Struct struct) {\r\n+\t\tgetRightPropertyBySei(seiAPI, struct);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * import a given Property as Instance of\r\n+\t * \r\n+\t * return value is not needed or used\r\n+\t * @param element PropertyInstance which should be changed\r\n+\t * @param struct MatStruct that includes all Information\r\n+\t */\r\n+\tprivate Boolean getRightPropertyBySei(APropertyInstance element, Struct struct) {\r\n+\t\tBoolean done = new PropertyinstancesSwitch<Boolean>() {\r\n+\t\t\t@Override\r\n+\t\t\tpublic Boolean caseUnitValuePropertyInstance(UnitValuePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object, struct);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Boolean caseResourcePropertyInstance(ResourcePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object, struct);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Boolean caseEnumUnitPropertyInstance(EnumUnitPropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object, struct);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Boolean caseValuePropertyInstance(ValuePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object, struct);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Boolean caseReferencePropertyInstance(ReferencePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object, struct);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Boolean caseEReferencePropertyInstance(EReferencePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object, struct);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Boolean caseComposedPropertyInstance(ComposedPropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object, struct);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Boolean caseArrayInstance(ArrayInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object, struct.getCell(object.getType().getName()));\r\n+\t\t\t}\r\n+\r\n+\t\t}.doSwitch(element);\r\n+\t\treturn done;\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * import a given ArrayInstance\r\n+\t * \r\n+\t * updates everything inside it\r\n+\t * @param element PropertyInstance which should be changed\r\n+\t * @param cell MatCell that includes all Information\r\n+\t */\r\n+\tprotected Boolean contentOfProperty(ArrayInstance element, Cell cell) {\r\n+\t\tEList<APropertyInstance> propertyInstances = element.getArrayInstances();\r\n+\t\tint [] dims = cell.getDimensions();\r\n+\t\tfor (int i = 0; i < dims[0]; i++) {\r\n+\t\t\timportGivenAPI(propertyInstances.get(i), cell.get(i));\r\n+\t\t}\r\n+\t\treturn true;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * import a given ComposedPropertyInstance\r\n+\t * \r\n+\t * updates everything inside it\r\n+\t * @param element PropertyInstance which should be changed\r\n+\t * @param struct MatStruct that includes all Information\r\n+\t */\r\n+\tprotected Boolean contentOfProperty(ComposedPropertyInstance element, Struct struct) {\r\n+\t\tCategoryAssignment ca = element.getTypeInstance();\t\r\n+\t\timportGivenCa(ca, struct);\r\n+\t\treturn true;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * import a given EReferencePropertyInstance\r\n+\t * \r\n+\t * updates value\r\n+\t * @param element PropertyInstance which should be changed\r\n+\t * @param struct MatStruct that includes all Information\r\n+\t */\r\n+\tprotected Boolean contentOfProperty(EReferencePropertyInstance element, Struct struct) {\r\n+\t\tif (element.getType() instanceof EReferenceProperty) {\r\n+\t\t\tBeanPropertyEReference<EReferenceProperty> bpe = new BeanPropertyEReference<EReferenceProperty>(element);\r\n+\t\t\tif (\"''\".equals(struct.get(MatHelper.URI).toString())) {\r\n+\t\t\t\tbpe.unset();\r\n+\t\t\t} else {\r\n+\t\t\t\tURI uri = URI.createPlatformPluginURI(shorter(struct.get(MatHelper.URI).toString()), true);\r\n+\t\t\t\tResource res = new ResourceSetImpl().getResource(uri, true);\r\n+\t\t\t\tEObject eReferenceValue = res.getEObject(uri.fragment());\r\n+\t\t\t\telement.setReference(eReferenceValue);\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\treturn true;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * import a given ReferencePropertyInstance\r\n+\t * \r\n+\t * updates reference\r\n+\t * @param element PropertyInstance which should be changed\r\n+\t * @param struct MatStruct that includes all Information\r\n+\t */\r\n+\tprotected Boolean contentOfProperty(ReferencePropertyInstance element, Struct struct) {\r\n+\t\tif (element.getType() instanceof ReferenceProperty) {\r\n+\t\t\tif (\"''\".equals(struct.get(MatHelper.UUID).toString())) {\r\n+\t\t\t\telement.setReference(null);\r\n+\t\t\t} else {\r\n+\t\t\t\t//StructuralElementInstance sei2 = sei;\r\n+\t\t\t\tEList<Resource> res = sei.eResource().getResourceSet().getResources();\r\n+\t\t\t\tfor (Resource re : res) {\r\n+\t\t\t\t\tEObject ref = re.getEObject(shorter(struct.get(MatHelper.UUID).toString()));\r\n+\t\t\t\t\tif (ref != null) {\r\n+\t\t\t\t\t\tif (ref instanceof ATypeInstance) {\r\n+\t\t\t\t\t\t\telement.setReference((ATypeInstance) ref);\r\n+\t\t\t\t\t\t} \r\n+\t\t\t\t\t}\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\treturn true;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * import a given ValuePropertyInstance\r\n+\t * \r\n+\t * updates value\r\n+\t * @param element PropertyInstance which should be changed\r\n+\t * @param struct MatStruct that includes all Information\r\n+\t */\r\n+\tprotected Boolean contentOfProperty(ValuePropertyInstance element, Struct struct) {\r\n+\t\tif (element.getType() instanceof BooleanProperty) {\r\n+\t\t\tBeanPropertyBoolean bpb = new BeanPropertyBoolean(element);\r\n+\t\t\tif (!struct.get(MatHelper.VALUE).toString().equals(\"''\")) {\r\n+\t\t\t\tif (struct.get(MatHelper.VALUE).toString().equals(\"true\")) {\r\n+\t\t\t\t\tbpb.setValue(true);\r\n+\t\t\t\t} else {\r\n+\t\t\t\t\tbpb.setValue(false);\r\n+\t\t\t\t}\r\n+\t\t\t} else {\r\n+\t\t\t\tbpb.unset();\r\n+\t\t\t}\r\n+\t\t} else if (element.getType() instanceof StringProperty) {\r\n+\t\t\tBeanPropertyString bps = new BeanPropertyString(element);\r\n+\t\t\tif (!struct.get(MatHelper.VALUE).toString().equals(\"''\")) {\r\n+\t\t\t\tbps.setValue(shorter(struct.get(MatHelper.VALUE).toString()));\r\n+\t\t\t} else {\r\n+\t\t\t\tbps.unset();\r\n+\t\t\t}\r\n+\t\t\t\r\n+\t\t}\r\n+\t\treturn true;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * import a given EnumUnitPropertyInstance\r\n+\t * \r\n+\t * updates name and unit. value is updates automatically\r\n+\t * @param element PropertyInstance which should be changed\r\n+\t * @param struct MatStruct that includes all Information\r\n+\t */\r\n+\tprivate Boolean contentOfProperty(EnumUnitPropertyInstance element, Struct struct) {\r\n+\t\tif (element.getType() instanceof EnumProperty) {\r\n+\t\t\tBeanPropertyEnum bpe = new BeanPropertyEnum(element);\r\n+\t\t\tbpe.setValue(shorter(struct.get(MatHelper.NAME).toString()));\r\n+\t\t\tbpe.setUnit(shorter(struct.get(MatHelper.UNIT).toString()));\r\n+\t\t}\r\n+\t\treturn true;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * import a given ResourcePropertyInstance\r\n+\t * \r\n+\t * updates uri\r\n+\t * @param element PropertyInstance which should be changed\r\n+\t * @param struct MatStruct that includes all Information\r\n+\t */\r\n+\tprivate Boolean contentOfProperty(ResourcePropertyInstance element, Struct struct) {\r\n+\t\tif (element.getType() instanceof ResourceProperty) {\r\n+\t\t\tBeanPropertyResource bpr = new BeanPropertyResource(element);\r\n+\t\t\tif (\"''\".equals(struct.get(MatHelper.URI).toString())) {\r\n+\t\t\t\tbpr.unset();\r\n+\t\t\t} else {\r\n+\t\t\t\tbpr.setValue(URI.createURI(shorter(struct.get(MatHelper.URI).toString()), true));\r", "originalCommit": "426646f6e8ebc74ec09dca899c48c568bf9c7e0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg0MDE3Mg==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/525#discussion_r394840172", "bodyText": "It is.", "author": "ALEhmerDLR", "createdAt": "2020-03-19T07:46:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU2NzU0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU3MTgwNQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/525#discussion_r393571805", "bodyText": "Why do you remove the element of index 0 here? Could you add a comment? Do you assume the type and UUID are always on top? Why don't you remove these elements explicitly then?", "author": "franzTobiasDLR", "createdAt": "2020-03-17T10:15:20Z", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/dvlm/mat/MatImporter.java", "diffHunk": "@@ -0,0 +1,451 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.dvlm.mat;\r\n+\r\n+import java.io.IOException;\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.common.util.URI;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.emf.ecore.resource.Resource;\r\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\r\n+\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.BooleanProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.FloatProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IntProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ResourceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ArrayInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ComposedPropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EnumUnitPropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ResourcePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.UnitValuePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ValuePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.impl.ArrayInstanceImpl;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.util.PropertyinstancesSwitch;\r\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\r\n+import us.hebi.matlab.mat.types.MatFile;\r\n+import us.hebi.matlab.mat.types.Struct;\r\n+import us.hebi.matlab.mat.types.Cell;\r\n+ \r\n+/**\r\n+ * Class for exporting data to .mat\r\n+ */\r\n+public class MatImporter {\r\n+\tStructuralElementInstance sei;\r\n+\t\r\n+\t/**\r\n+\t * checks if mat and sei fit together\r\n+\t * @param sei sei which should be changed\r\n+\t * @param matFile MatFile that includes all Information\r\n+\t */\r\n+\tpublic void importSei(StructuralElementInstance sei, MatFile mat) throws IOException {\r\n+\t\tthis.sei = sei;\r\n+\t\tif (checkIfCorrectSei(sei, mat)) {\r\n+\t\t\tStruct struct = mat.getStruct(sei.getName());\r\n+\t\t\timportSei(sei, struct);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * split up children and CategoryAssinments\r\n+\t * @param sei sei which should be changed\r\n+\t * @param seiStruct MatStruct that includes all Information\r\n+\t */\r\n+\tpublic void importSei(StructuralElementInstance sei, Struct seiStruct) {\r\n+\t\tif (seiStruct.getFieldNames().contains(MatHelper.CHILDREN)) {\r\n+\t\t\tStruct matChildren = seiStruct.getStruct(MatHelper.CHILDREN);\r\n+\t\t\tEList<StructuralElementInstance> seiChildren = sei.getChildren();\r\n+\t\t\tfor (StructuralElementInstance seiChild : seiChildren) {\r\n+\t\t\t\timportSei(seiChild, matChildren.getStruct(seiChild.getName()));\r\n+\t\t\t}\r\n+\t\t\tseiStruct.remove(MatHelper.CHILDREN);\r\n+\t\t}\r\n+\t\tEList<CategoryAssignment> seiCas = sei.getCategoryAssignments();\r\n+\t\timportCas(seiCas, seiStruct);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * split up CategoryAssinment\r\n+\t * @param seiCas List of CategoryAssinments which should be changed\r\n+\t * @param struct MatStruct that includes all Information\r\n+\t */\r\n+\tprivate void importCas(EList<CategoryAssignment> seiCas, Struct struct) {\r\n+\t\t\r\n+\t\tList<String> nameMatCas = struct.getFieldNames();\r\n+\t\tList<String> nameSeiCas = new ArrayList<String>();\r\n+\t\tfor (CategoryAssignment seiCa : seiCas) {\r\n+\t\t\tnameSeiCas.add(seiCa.getName());\r\n+\t\t}\r\n+\r\n+\t\tfor (int i = 0; i < seiCas.size();) {\r\n+\t\t\tif (nameMatCas.contains(seiCas.get(i).getName())) { //import all given CategoryAssinments\r\n+\t\t\t\timportGivenCa(seiCas.get(i), struct.get(seiCas.get(i).getName()));\r\n+\t\t\t\tnameMatCas.remove(seiCas.get(i).getName());\r\n+\t\t\t\ti++;\r\n+\t\t\t} else {\r\n+\t\t\t\tseiCas.remove(i);\r\n+\t\t\t}\r\n+\t\t}\r\n+\r\n+\t\t//import all new CategoryAssinments\r\n+\t\t//for (String nameMatCa : nameMatCas) {\r\n+\t\t//\tseiCas.add(importNewCa(struct.get(nameMatCa),nameMatCa));\r\n+\t\t//}\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * split up PropertyInstances\r\n+\t * @param seiCa CategoryAssinments which should be changed\r\n+\t * @param struct MatStruct that includes all Information\r\n+\t */\r\n+\tprivate void importGivenCa(CategoryAssignment seiCa, Struct struct) {\r\n+\t\tEList<APropertyInstance> seiAPIs = seiCa.getPropertyInstances();\r\n+\t\tList<String> nameMatAPIs = struct.getFieldNames();\r\n+\t\t\r\n+\t\t//import all given APropertyInstances\r\n+\t\tfor (int i = 0; i < seiAPIs.size();) {\r\n+\t\t\tif (nameMatAPIs.contains(seiAPIs.get(i).getType().getName())) {\r\n+\t\t\t\tif (!(seiAPIs instanceof ArrayInstanceImpl)) {\r\n+\t\t\t\t\timportGivenAPI(seiAPIs.get(i), struct.get(seiAPIs.get(i).getType().getName()));\r\n+\t\t\t\t} else {\r\n+\t\t\t\t\timportGivenAPI(seiAPIs.get(i), struct);\r\n+\t\t\t\t}\r\n+\t\t\t\tnameMatAPIs.remove(seiAPIs.get(i).getType().getName());\r\n+\t\t\t\ti++;\r\n+\t\t\t} else {\r\n+\t\t\t\tseiAPIs.remove(seiAPIs.get(i));\r\n+\t\t\t}\r\n+\t\t}\r\n+\r\n+\t\t//import all new APropertyInstances\r\n+\t\t//for (String nameMatAPI : nameMatAPIs) {\r\n+\t\t//\tseiAPIs.add(importNewAPI(struct.get(nameMatAPI)));\r\n+\t\t//}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * import a given Property\r\n+\t * @param seiAPI PropertyInstance which should be changed\r\n+\t * @param struct MatStruct that includes all Information\r\n+\t */\r\n+\tprivate void importGivenAPI(APropertyInstance seiAPI, Struct struct) {\r\n+\t\tgetRightPropertyBySei(seiAPI, struct);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * import a given Property as Instance of\r\n+\t * \r\n+\t * return value is not needed or used\r\n+\t * @param element PropertyInstance which should be changed\r\n+\t * @param struct MatStruct that includes all Information\r\n+\t */\r\n+\tprivate Boolean getRightPropertyBySei(APropertyInstance element, Struct struct) {\r\n+\t\tBoolean done = new PropertyinstancesSwitch<Boolean>() {\r\n+\t\t\t@Override\r\n+\t\t\tpublic Boolean caseUnitValuePropertyInstance(UnitValuePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object, struct);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Boolean caseResourcePropertyInstance(ResourcePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object, struct);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Boolean caseEnumUnitPropertyInstance(EnumUnitPropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object, struct);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Boolean caseValuePropertyInstance(ValuePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object, struct);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Boolean caseReferencePropertyInstance(ReferencePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object, struct);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Boolean caseEReferencePropertyInstance(EReferencePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object, struct);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Boolean caseComposedPropertyInstance(ComposedPropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object, struct);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Boolean caseArrayInstance(ArrayInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object, struct.getCell(object.getType().getName()));\r\n+\t\t\t}\r\n+\r\n+\t\t}.doSwitch(element);\r\n+\t\treturn done;\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * import a given ArrayInstance\r\n+\t * \r\n+\t * updates everything inside it\r\n+\t * @param element PropertyInstance which should be changed\r\n+\t * @param cell MatCell that includes all Information\r\n+\t */\r\n+\tprotected Boolean contentOfProperty(ArrayInstance element, Cell cell) {\r\n+\t\tEList<APropertyInstance> propertyInstances = element.getArrayInstances();\r\n+\t\tint [] dims = cell.getDimensions();\r\n+\t\tfor (int i = 0; i < dims[0]; i++) {\r\n+\t\t\timportGivenAPI(propertyInstances.get(i), cell.get(i));\r\n+\t\t}\r\n+\t\treturn true;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * import a given ComposedPropertyInstance\r\n+\t * \r\n+\t * updates everything inside it\r\n+\t * @param element PropertyInstance which should be changed\r\n+\t * @param struct MatStruct that includes all Information\r\n+\t */\r\n+\tprotected Boolean contentOfProperty(ComposedPropertyInstance element, Struct struct) {\r\n+\t\tCategoryAssignment ca = element.getTypeInstance();\t\r\n+\t\timportGivenCa(ca, struct);\r\n+\t\treturn true;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * import a given EReferencePropertyInstance\r\n+\t * \r\n+\t * updates value\r\n+\t * @param element PropertyInstance which should be changed\r\n+\t * @param struct MatStruct that includes all Information\r\n+\t */\r\n+\tprotected Boolean contentOfProperty(EReferencePropertyInstance element, Struct struct) {\r\n+\t\tif (element.getType() instanceof EReferenceProperty) {\r\n+\t\t\tBeanPropertyEReference<EReferenceProperty> bpe = new BeanPropertyEReference<EReferenceProperty>(element);\r\n+\t\t\tif (\"''\".equals(struct.get(MatHelper.URI).toString())) {\r\n+\t\t\t\tbpe.unset();\r\n+\t\t\t} else {\r\n+\t\t\t\tURI uri = URI.createPlatformPluginURI(shorter(struct.get(MatHelper.URI).toString()), true);\r\n+\t\t\t\tResource res = new ResourceSetImpl().getResource(uri, true);\r\n+\t\t\t\tEObject eReferenceValue = res.getEObject(uri.fragment());\r\n+\t\t\t\telement.setReference(eReferenceValue);\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\treturn true;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * import a given ReferencePropertyInstance\r\n+\t * \r\n+\t * updates reference\r\n+\t * @param element PropertyInstance which should be changed\r\n+\t * @param struct MatStruct that includes all Information\r\n+\t */\r\n+\tprotected Boolean contentOfProperty(ReferencePropertyInstance element, Struct struct) {\r\n+\t\tif (element.getType() instanceof ReferenceProperty) {\r\n+\t\t\tif (\"''\".equals(struct.get(MatHelper.UUID).toString())) {\r\n+\t\t\t\telement.setReference(null);\r\n+\t\t\t} else {\r\n+\t\t\t\t//StructuralElementInstance sei2 = sei;\r\n+\t\t\t\tEList<Resource> res = sei.eResource().getResourceSet().getResources();\r\n+\t\t\t\tfor (Resource re : res) {\r\n+\t\t\t\t\tEObject ref = re.getEObject(shorter(struct.get(MatHelper.UUID).toString()));\r\n+\t\t\t\t\tif (ref != null) {\r\n+\t\t\t\t\t\tif (ref instanceof ATypeInstance) {\r\n+\t\t\t\t\t\t\telement.setReference((ATypeInstance) ref);\r\n+\t\t\t\t\t\t} \r\n+\t\t\t\t\t}\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\treturn true;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * import a given ValuePropertyInstance\r\n+\t * \r\n+\t * updates value\r\n+\t * @param element PropertyInstance which should be changed\r\n+\t * @param struct MatStruct that includes all Information\r\n+\t */\r\n+\tprotected Boolean contentOfProperty(ValuePropertyInstance element, Struct struct) {\r\n+\t\tif (element.getType() instanceof BooleanProperty) {\r\n+\t\t\tBeanPropertyBoolean bpb = new BeanPropertyBoolean(element);\r\n+\t\t\tif (!struct.get(MatHelper.VALUE).toString().equals(\"''\")) {\r\n+\t\t\t\tif (struct.get(MatHelper.VALUE).toString().equals(\"true\")) {\r\n+\t\t\t\t\tbpb.setValue(true);\r\n+\t\t\t\t} else {\r\n+\t\t\t\t\tbpb.setValue(false);\r\n+\t\t\t\t}\r\n+\t\t\t} else {\r\n+\t\t\t\tbpb.unset();\r\n+\t\t\t}\r\n+\t\t} else if (element.getType() instanceof StringProperty) {\r\n+\t\t\tBeanPropertyString bps = new BeanPropertyString(element);\r\n+\t\t\tif (!struct.get(MatHelper.VALUE).toString().equals(\"''\")) {\r\n+\t\t\t\tbps.setValue(shorter(struct.get(MatHelper.VALUE).toString()));\r\n+\t\t\t} else {\r\n+\t\t\t\tbps.unset();\r\n+\t\t\t}\r\n+\t\t\t\r\n+\t\t}\r\n+\t\treturn true;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * import a given EnumUnitPropertyInstance\r\n+\t * \r\n+\t * updates name and unit. value is updates automatically\r\n+\t * @param element PropertyInstance which should be changed\r\n+\t * @param struct MatStruct that includes all Information\r\n+\t */\r\n+\tprivate Boolean contentOfProperty(EnumUnitPropertyInstance element, Struct struct) {\r\n+\t\tif (element.getType() instanceof EnumProperty) {\r\n+\t\t\tBeanPropertyEnum bpe = new BeanPropertyEnum(element);\r\n+\t\t\tbpe.setValue(shorter(struct.get(MatHelper.NAME).toString()));\r\n+\t\t\tbpe.setUnit(shorter(struct.get(MatHelper.UNIT).toString()));\r\n+\t\t}\r\n+\t\treturn true;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * import a given ResourcePropertyInstance\r\n+\t * \r\n+\t * updates uri\r\n+\t * @param element PropertyInstance which should be changed\r\n+\t * @param struct MatStruct that includes all Information\r\n+\t */\r\n+\tprivate Boolean contentOfProperty(ResourcePropertyInstance element, Struct struct) {\r\n+\t\tif (element.getType() instanceof ResourceProperty) {\r\n+\t\t\tBeanPropertyResource bpr = new BeanPropertyResource(element);\r\n+\t\t\tif (\"''\".equals(struct.get(MatHelper.URI).toString())) {\r\n+\t\t\t\tbpr.unset();\r\n+\t\t\t} else {\r\n+\t\t\t\tbpr.setValue(URI.createURI(shorter(struct.get(MatHelper.URI).toString()), true));\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\treturn true;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * import a given UnitValuePropertyInstance\r\n+\t * \r\n+\t * updates value and unit\r\n+\t * @param element PropertyInstance which should be changed\r\n+\t * @param struct MatStruct that includes all Information\r\n+\t */\r\n+\tprivate Boolean contentOfProperty(UnitValuePropertyInstance element, Struct struct) {\r\n+\t\tif (element.getType() instanceof FloatProperty) {\r\n+\t\t\tBeanPropertyFloat bpf = new BeanPropertyFloat(element);\r\n+\t\t\tbpf.setUnit(shorter(struct.get(MatHelper.UNIT).toString()));\r\n+\t\t\tif (\"NaN\".equals(struct.get(MatHelper.VALUE).toString()) || \"''\".equals(struct.get(MatHelper.VALUE).toString())) {\r\n+\t\t\t\tbpf.unset();\r\n+\t\t\t} else {\r\n+\t\t\t\tbpf.setValue(Double.valueOf(struct.get(MatHelper.VALUE).toString()));\r\n+\t\t\t}\r\n+\t\t} else if (element.getType() instanceof IntProperty) {\r\n+\t\t\tBeanPropertyInt bpi = new BeanPropertyInt(element);\r\n+\t\t\tbpi.setUnit(shorter(struct.get(MatHelper.UNIT).toString()));\r\n+\t\t\tif (\"NaN\".equals(struct.get(MatHelper.VALUE).toString()) || \"''\".equals(struct.get(MatHelper.VALUE).toString())) {\r\n+\t\t\t\tbpi.unset();\r\n+\t\t\t} else {\r\n+\t\t\t\tdouble value = Double.valueOf(struct.get(MatHelper.VALUE).toString());\r\n+\t\t\t\tbpi.setValue((long) value);\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\treturn true;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * hands back boolean that represents if the MatFile and the sei are equal\r\n+\t * @param sei StructuralElementInstance to test\r\n+\t * @param mat MatFile to test\r\n+\t */\r\n+\tpublic boolean checkIfCorrectSei(StructuralElementInstance sei, MatFile mat) {\r\n+\t\ttry {\r\n+\t\t\tStruct seiStruct = mat.getStruct(sei.getName());\r\n+\t\t\treturn checkIfCorrectSei(sei, seiStruct);\r\n+\t\t} catch (Exception e) {\r\n+\t\t\treturn false;\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * hands back boolean that represents if the struct and the sei are equal\r\n+\t * @param sei StructuralElementInstance to test\r\n+\t * @param seiStruct Struct to test\r\n+\t */\r\n+\tprivate boolean checkIfCorrectSei(StructuralElementInstance sei, Struct seiStruct) {\r\n+\t\tEList<StructuralElementInstance> seiChildren = sei.getChildren();\r\n+\t\tList<String> structFields = seiStruct.getFieldNames();\r\n+\r\n+\t\t//check Type and Uuid\r\n+\t\tif (structFields.contains(\"type\") && structFields.contains(\"uuid\")) {\r\n+\t\t\tString matSeiType = shorter(seiStruct.getChar(\"type\").toString()); \r\n+\t\t\tString matSeiUUID = shorter(seiStruct.getChar(\"uuid\").toString());\r\n+\t\t\tstructFields.remove(0);\r", "originalCommit": "426646f6e8ebc74ec09dca899c48c568bf9c7e0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4MzE5Ng==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/525#discussion_r393683196", "bodyText": "I can remove them explicity. I changed this.", "author": "ALEhmerDLR", "createdAt": "2020-03-17T13:35:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU3MTgwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU4MTE5Ng==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/525#discussion_r393581196", "bodyText": "Just for clearification... Can't a SEI still be the 'correct' one if the number of childrean is different? What does correct mean? It's for mapping the imported data to  a corresponding SEI in the model, ins't it? Isn't it sufficient to compare the UUID here?", "author": "franzTobiasDLR", "createdAt": "2020-03-17T10:31:51Z", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/dvlm/mat/MatImporterTest.java", "diffHunk": "@@ -0,0 +1,343 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.dvlm.mat;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.IOException;\r\n+\r\n+import org.eclipse.core.runtime.CoreException;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.common.util.URI;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.EReferenceTest;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryComposition;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryReference;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestStructuralElement;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestStructuralElementOther;\r\n+import de.dlr.sc.virsat.model.extension.tests.test.ATestConceptTestCase;\r\n+import de.dlr.sc.virsat.model.external.tests.ExternalTestType;\r\n+import us.hebi.matlab.mat.types.MatFile;\r\n+\r\n+public class MatImporterTest extends ATestConceptTestCase {\r\n+\r\n+\tprivate StructuralElementInstance sei;\r\n+\tprivate TestStructuralElement tsei;\r\n+\tprivate MatExporter exporter;\r\n+\tprivate MatImporter importer;\r\n+\tprivate MatFile mat;\r\n+\tprivate static final int NUMBEROFELEMENTS = 6;\r\n+\r\n+\t@Before\r\n+\tpublic void setUp() throws CoreException {\r\n+\t\texporter = new MatExporter();\r\n+\t\timporter = new MatImporter();\r\n+\t\tsuper.setUp();\r\n+\t\taddEditingDomainAndRepository();\r\n+\t\texecuteAsCommand(() -> loadTestConcept());\r\n+\t\ttsei = new TestStructuralElement(testConcept);\r\n+\t\tsei = tsei.getStructuralElementInstance();\r\n+\t\tsei.setName(\"testsei\");\r\n+\t\texecuteAsCommand(() -> repository.getRootEntities().add(sei));\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiCorrect() {\r\n+\t\tassertTrue(\"Is the same\", importer.checkIfCorrectSei(sei, mat));\r\n+\t\tsei.setName(\"Testsein\");\r\n+\t\tassertFalse(\"Not the same name\", importer.checkIfCorrectSei(sei, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiWrongUUID() {\r\n+\t\tTestStructuralElementOther tsei2 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setType(sei.getType());\r\n+\t\tassertFalse(\"Not the same uuid\", importer.checkIfCorrectSei(sei2, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiWrongType() {\r\n+\t\tTestStructuralElementOther tsei2 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setUuid(sei.getUuid());\r\n+\t\tassertFalse(\"Not the same type\", importer.checkIfCorrectSei(sei2, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiWrongNumberOfChildren() {\r\n+\t\tTestStructuralElementOther tsei2 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setParent(sei);\r\n+\t\tassertFalse(\"Not the same number of children\", importer.checkIfCorrectSei(sei, mat));\r", "originalCommit": "426646f6e8ebc74ec09dca899c48c568bf9c7e0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg0MDcxNw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/525#discussion_r394840717", "bodyText": "I changed it that way it is checking UUID and Type. Now children can be added and it will get the sei as a fitting one. Correct means that the sei and the one in the .mat fit to each other.", "author": "ALEhmerDLR", "createdAt": "2020-03-19T07:47:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU4MTE5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU5Nzc4Mg==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/525#discussion_r393597782", "bodyText": "Could we also have one test that doesn't use the exporter to test the importer? By creating this matlab-string manually for example? Because like this, if the exporter might have a bug, we would maybe also miss bugs in the importer test", "author": "franzTobiasDLR", "createdAt": "2020-03-17T11:02:29Z", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/dvlm/mat/MatImporterTest.java", "diffHunk": "@@ -0,0 +1,343 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.dvlm.mat;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.IOException;\r\n+\r\n+import org.eclipse.core.runtime.CoreException;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.common.util.URI;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.EReferenceTest;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryComposition;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryReference;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestStructuralElement;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestStructuralElementOther;\r\n+import de.dlr.sc.virsat.model.extension.tests.test.ATestConceptTestCase;\r\n+import de.dlr.sc.virsat.model.external.tests.ExternalTestType;\r\n+import us.hebi.matlab.mat.types.MatFile;\r\n+\r\n+public class MatImporterTest extends ATestConceptTestCase {\r\n+\r\n+\tprivate StructuralElementInstance sei;\r\n+\tprivate TestStructuralElement tsei;\r\n+\tprivate MatExporter exporter;\r\n+\tprivate MatImporter importer;\r\n+\tprivate MatFile mat;\r\n+\tprivate static final int NUMBEROFELEMENTS = 6;\r\n+\r\n+\t@Before\r\n+\tpublic void setUp() throws CoreException {\r\n+\t\texporter = new MatExporter();\r\n+\t\timporter = new MatImporter();\r\n+\t\tsuper.setUp();\r\n+\t\taddEditingDomainAndRepository();\r\n+\t\texecuteAsCommand(() -> loadTestConcept());\r\n+\t\ttsei = new TestStructuralElement(testConcept);\r\n+\t\tsei = tsei.getStructuralElementInstance();\r\n+\t\tsei.setName(\"testsei\");\r\n+\t\texecuteAsCommand(() -> repository.getRootEntities().add(sei));\r\n+\t\tmat = exporter.exportSei(sei);\r", "originalCommit": "426646f6e8ebc74ec09dca899c48c568bf9c7e0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzNDEzNw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/525#discussion_r395634137", "bodyText": "Nice \ud83d\udc4d Thanks :)", "author": "franzTobiasDLR", "createdAt": "2020-03-20T13:26:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU5Nzc4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU5ODk3OQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/525#discussion_r393598979", "bodyText": "It's reletively hard to follow this test as someone from the outside... All this index handling and the connection of tsei and sei are hard to understand... Could you add som comments in your tests?", "author": "franzTobiasDLR", "createdAt": "2020-03-17T11:04:49Z", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/dvlm/mat/MatImporterTest.java", "diffHunk": "@@ -0,0 +1,343 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.dvlm.mat;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.IOException;\r\n+\r\n+import org.eclipse.core.runtime.CoreException;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.common.util.URI;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.EReferenceTest;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryComposition;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryReference;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestStructuralElement;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestStructuralElementOther;\r\n+import de.dlr.sc.virsat.model.extension.tests.test.ATestConceptTestCase;\r\n+import de.dlr.sc.virsat.model.external.tests.ExternalTestType;\r\n+import us.hebi.matlab.mat.types.MatFile;\r\n+\r\n+public class MatImporterTest extends ATestConceptTestCase {\r\n+\r\n+\tprivate StructuralElementInstance sei;\r\n+\tprivate TestStructuralElement tsei;\r\n+\tprivate MatExporter exporter;\r\n+\tprivate MatImporter importer;\r\n+\tprivate MatFile mat;\r\n+\tprivate static final int NUMBEROFELEMENTS = 6;\r\n+\r\n+\t@Before\r\n+\tpublic void setUp() throws CoreException {\r\n+\t\texporter = new MatExporter();\r\n+\t\timporter = new MatImporter();\r\n+\t\tsuper.setUp();\r\n+\t\taddEditingDomainAndRepository();\r\n+\t\texecuteAsCommand(() -> loadTestConcept());\r\n+\t\ttsei = new TestStructuralElement(testConcept);\r\n+\t\tsei = tsei.getStructuralElementInstance();\r\n+\t\tsei.setName(\"testsei\");\r\n+\t\texecuteAsCommand(() -> repository.getRootEntities().add(sei));\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiCorrect() {\r\n+\t\tassertTrue(\"Is the same\", importer.checkIfCorrectSei(sei, mat));\r\n+\t\tsei.setName(\"Testsein\");\r\n+\t\tassertFalse(\"Not the same name\", importer.checkIfCorrectSei(sei, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiWrongUUID() {\r\n+\t\tTestStructuralElementOther tsei2 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setType(sei.getType());\r\n+\t\tassertFalse(\"Not the same uuid\", importer.checkIfCorrectSei(sei2, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiWrongType() {\r\n+\t\tTestStructuralElementOther tsei2 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setUuid(sei.getUuid());\r\n+\t\tassertFalse(\"Not the same type\", importer.checkIfCorrectSei(sei2, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiWrongNumberOfChildren() {\r\n+\t\tTestStructuralElementOther tsei2 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setParent(sei);\r\n+\t\tassertFalse(\"Not the same number of children\", importer.checkIfCorrectSei(sei, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiWrongChildren() {\r\n+\t\tTestStructuralElement tsei2 = new TestStructuralElement(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setParent(sei);\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t\tTestStructuralElementOther tsei3 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei3 = tsei3.getStructuralElementInstance();\r\n+\t\tsei3.setName(\"testseiChild\");\r\n+\t\tTestStructuralElementOther tsei4 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei4 = tsei4.getStructuralElementInstance();\r\n+\t\tsei4.setName(\"testseiChild2\");\r\n+\t\tsei2.setParent(sei3);\r\n+\t\tsei4.setParent(sei);\r\n+\t\tassertFalse(\"Not the same children\", importer.checkIfCorrectSei(sei, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportCasDeleteCas() throws IOException {\r\n+\t\tTestCategoryAllProperty tc2 = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei.add(tc2);\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t\tTestCategoryComposition tc1 = new TestCategoryComposition(testConcept);\r\n+\t\ttsei.add(tc1);\r\n+\t\tassertTrue(\"Sei has two CategoryAssinments\", sei.getCategoryAssignments().size() == 2);\r\n+\t\timporter.importSei(sei, mat);\r\n+\t\tassertTrue(\"Only one CategoryAssinment\", sei.getCategoryAssignments().size() == 1);\r\n+\t\tassertTrue(\"Right CategoryAssinment included\",\r\n+\t\t\t\tsei.getCategoryAssignments().get(0).getName().equals(tc2.getName()));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportAPIDeleteAPI() throws IOException {\r\n+\t\tEReferenceTest tc2 = new EReferenceTest(testConcept);\r\n+\t\ttsei.add(tc2);\r\n+\t\tTestCategoryAllProperty tc3 = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei.add(tc3);\r\n+\t\tAPropertyInstance nInstance = sei.getCategoryAssignments().get(0).getPropertyInstances().get(0);\r", "originalCommit": "426646f6e8ebc74ec09dca899c48c568bf9c7e0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYxMzY5NQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/525#discussion_r393613695", "bodyText": "You mixed up expected and actual here, didn't you? You expect that all values of tc1 are overwritten by the import of tc? Then it the order in the assert statement should be the other way around... This way it is confusing because you think that tc should have change to the values you set to tc1.... And please also add a comment here or a more meaningful name of the test case", "author": "franzTobiasDLR", "createdAt": "2020-03-17T11:33:31Z", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/dvlm/mat/MatImporterTest.java", "diffHunk": "@@ -0,0 +1,343 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.dvlm.mat;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.IOException;\r\n+\r\n+import org.eclipse.core.runtime.CoreException;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.common.util.URI;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.EReferenceTest;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryComposition;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryReference;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestStructuralElement;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestStructuralElementOther;\r\n+import de.dlr.sc.virsat.model.extension.tests.test.ATestConceptTestCase;\r\n+import de.dlr.sc.virsat.model.external.tests.ExternalTestType;\r\n+import us.hebi.matlab.mat.types.MatFile;\r\n+\r\n+public class MatImporterTest extends ATestConceptTestCase {\r\n+\r\n+\tprivate StructuralElementInstance sei;\r\n+\tprivate TestStructuralElement tsei;\r\n+\tprivate MatExporter exporter;\r\n+\tprivate MatImporter importer;\r\n+\tprivate MatFile mat;\r\n+\tprivate static final int NUMBEROFELEMENTS = 6;\r\n+\r\n+\t@Before\r\n+\tpublic void setUp() throws CoreException {\r\n+\t\texporter = new MatExporter();\r\n+\t\timporter = new MatImporter();\r\n+\t\tsuper.setUp();\r\n+\t\taddEditingDomainAndRepository();\r\n+\t\texecuteAsCommand(() -> loadTestConcept());\r\n+\t\ttsei = new TestStructuralElement(testConcept);\r\n+\t\tsei = tsei.getStructuralElementInstance();\r\n+\t\tsei.setName(\"testsei\");\r\n+\t\texecuteAsCommand(() -> repository.getRootEntities().add(sei));\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiCorrect() {\r\n+\t\tassertTrue(\"Is the same\", importer.checkIfCorrectSei(sei, mat));\r\n+\t\tsei.setName(\"Testsein\");\r\n+\t\tassertFalse(\"Not the same name\", importer.checkIfCorrectSei(sei, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiWrongUUID() {\r\n+\t\tTestStructuralElementOther tsei2 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setType(sei.getType());\r\n+\t\tassertFalse(\"Not the same uuid\", importer.checkIfCorrectSei(sei2, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiWrongType() {\r\n+\t\tTestStructuralElementOther tsei2 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setUuid(sei.getUuid());\r\n+\t\tassertFalse(\"Not the same type\", importer.checkIfCorrectSei(sei2, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiWrongNumberOfChildren() {\r\n+\t\tTestStructuralElementOther tsei2 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setParent(sei);\r\n+\t\tassertFalse(\"Not the same number of children\", importer.checkIfCorrectSei(sei, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiWrongChildren() {\r\n+\t\tTestStructuralElement tsei2 = new TestStructuralElement(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setParent(sei);\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t\tTestStructuralElementOther tsei3 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei3 = tsei3.getStructuralElementInstance();\r\n+\t\tsei3.setName(\"testseiChild\");\r\n+\t\tTestStructuralElementOther tsei4 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei4 = tsei4.getStructuralElementInstance();\r\n+\t\tsei4.setName(\"testseiChild2\");\r\n+\t\tsei2.setParent(sei3);\r\n+\t\tsei4.setParent(sei);\r\n+\t\tassertFalse(\"Not the same children\", importer.checkIfCorrectSei(sei, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportCasDeleteCas() throws IOException {\r\n+\t\tTestCategoryAllProperty tc2 = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei.add(tc2);\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t\tTestCategoryComposition tc1 = new TestCategoryComposition(testConcept);\r\n+\t\ttsei.add(tc1);\r\n+\t\tassertTrue(\"Sei has two CategoryAssinments\", sei.getCategoryAssignments().size() == 2);\r\n+\t\timporter.importSei(sei, mat);\r\n+\t\tassertTrue(\"Only one CategoryAssinment\", sei.getCategoryAssignments().size() == 1);\r\n+\t\tassertTrue(\"Right CategoryAssinment included\",\r\n+\t\t\t\tsei.getCategoryAssignments().get(0).getName().equals(tc2.getName()));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportAPIDeleteAPI() throws IOException {\r\n+\t\tEReferenceTest tc2 = new EReferenceTest(testConcept);\r\n+\t\ttsei.add(tc2);\r\n+\t\tTestCategoryAllProperty tc3 = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei.add(tc3);\r\n+\t\tAPropertyInstance nInstance = sei.getCategoryAssignments().get(0).getPropertyInstances().get(0);\r\n+\t\tsei.getCategoryAssignments().remove(0);\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t\tsei.getCategoryAssignments().get(0).getPropertyInstances().add(nInstance);\r\n+\t\tassertEquals(\"CategoryAssinment has seven PropertyInstances\", sei.getCategoryAssignments().get(0).getPropertyInstances().size(), NUMBEROFELEMENTS + 1);\r\n+\t\timporter.importSei(sei, mat);\r\n+\t\tassertTrue(\"Instance deleted\", sei.getCategoryAssignments().get(0).getPropertyInstances().size() == NUMBEROFELEMENTS);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportOfValuesRemoveAll() throws IOException {\r\n+\t\tTestCategoryAllProperty tc = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei.add(tc);\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t\t\r\n+\t\tTestStructuralElement tsei2 = new TestStructuralElement(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tTestCategoryAllProperty tc1 = new TestCategoryAllProperty(testConcept);\r\n+\t\ttc1.setTestBool(false);\r\n+\t\ttc1.setTestFloat(2);\r\n+\t\ttc1.setTestEnum(\"HIGH\");\r\n+\t\ttc1.setTestString(\"test\");\r\n+\t\ttc1.setTestInt(1);\r\n+\t\tURI testUri =  URI.createPlatformResourceURI(\"Testresource\", false);\r\n+\t\ttc1.setTestResource(testUri);\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setUuid(sei.getUuid());\r\n+\t\ttsei2.add(tc1);\r\n+\t\timporter.importSei(sei2, mat);\r\n+\r\n+\t\tEList<APropertyInstance> caSei = sei.getCategoryAssignments().get(0).getPropertyInstances();\r\n+\t\tEList<APropertyInstance> caSei2 = sei2.getCategoryAssignments().get(0).getPropertyInstances();\r\n+\t\tassertTrue(\"same number of elements\", caSei.size() == caSei2.size());\r\n+\t\tassertEquals(\"same testString\", tc1.getTestString(), tc.getTestString());\r", "originalCommit": "426646f6e8ebc74ec09dca899c48c568bf9c7e0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE0MzgwMQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/525#discussion_r394143801", "bodyText": "I changed the order and added some comments.", "author": "ALEhmerDLR", "createdAt": "2020-03-18T07:16:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYxMzY5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYxNTI1Nw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/525#discussion_r393615257", "bodyText": "Could you create these values as contants and then assert against these constants? As it is write now it might happen that tc changes for some reason and then the assert statements are invalid..\nSomething like:\nfinal String TEST_STRING = \"TestString\";\ntc.setTestString(TEST_STRING);\n...\nassert(\"Some comment\", TEST_STRING, tc1.getTestString());", "author": "franzTobiasDLR", "createdAt": "2020-03-17T11:36:17Z", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/dvlm/mat/MatImporterTest.java", "diffHunk": "@@ -0,0 +1,343 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.dvlm.mat;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.IOException;\r\n+\r\n+import org.eclipse.core.runtime.CoreException;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.common.util.URI;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.EReferenceTest;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryComposition;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryReference;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestStructuralElement;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestStructuralElementOther;\r\n+import de.dlr.sc.virsat.model.extension.tests.test.ATestConceptTestCase;\r\n+import de.dlr.sc.virsat.model.external.tests.ExternalTestType;\r\n+import us.hebi.matlab.mat.types.MatFile;\r\n+\r\n+public class MatImporterTest extends ATestConceptTestCase {\r\n+\r\n+\tprivate StructuralElementInstance sei;\r\n+\tprivate TestStructuralElement tsei;\r\n+\tprivate MatExporter exporter;\r\n+\tprivate MatImporter importer;\r\n+\tprivate MatFile mat;\r\n+\tprivate static final int NUMBEROFELEMENTS = 6;\r\n+\r\n+\t@Before\r\n+\tpublic void setUp() throws CoreException {\r\n+\t\texporter = new MatExporter();\r\n+\t\timporter = new MatImporter();\r\n+\t\tsuper.setUp();\r\n+\t\taddEditingDomainAndRepository();\r\n+\t\texecuteAsCommand(() -> loadTestConcept());\r\n+\t\ttsei = new TestStructuralElement(testConcept);\r\n+\t\tsei = tsei.getStructuralElementInstance();\r\n+\t\tsei.setName(\"testsei\");\r\n+\t\texecuteAsCommand(() -> repository.getRootEntities().add(sei));\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiCorrect() {\r\n+\t\tassertTrue(\"Is the same\", importer.checkIfCorrectSei(sei, mat));\r\n+\t\tsei.setName(\"Testsein\");\r\n+\t\tassertFalse(\"Not the same name\", importer.checkIfCorrectSei(sei, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiWrongUUID() {\r\n+\t\tTestStructuralElementOther tsei2 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setType(sei.getType());\r\n+\t\tassertFalse(\"Not the same uuid\", importer.checkIfCorrectSei(sei2, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiWrongType() {\r\n+\t\tTestStructuralElementOther tsei2 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setUuid(sei.getUuid());\r\n+\t\tassertFalse(\"Not the same type\", importer.checkIfCorrectSei(sei2, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiWrongNumberOfChildren() {\r\n+\t\tTestStructuralElementOther tsei2 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setParent(sei);\r\n+\t\tassertFalse(\"Not the same number of children\", importer.checkIfCorrectSei(sei, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiWrongChildren() {\r\n+\t\tTestStructuralElement tsei2 = new TestStructuralElement(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setParent(sei);\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t\tTestStructuralElementOther tsei3 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei3 = tsei3.getStructuralElementInstance();\r\n+\t\tsei3.setName(\"testseiChild\");\r\n+\t\tTestStructuralElementOther tsei4 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei4 = tsei4.getStructuralElementInstance();\r\n+\t\tsei4.setName(\"testseiChild2\");\r\n+\t\tsei2.setParent(sei3);\r\n+\t\tsei4.setParent(sei);\r\n+\t\tassertFalse(\"Not the same children\", importer.checkIfCorrectSei(sei, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportCasDeleteCas() throws IOException {\r\n+\t\tTestCategoryAllProperty tc2 = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei.add(tc2);\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t\tTestCategoryComposition tc1 = new TestCategoryComposition(testConcept);\r\n+\t\ttsei.add(tc1);\r\n+\t\tassertTrue(\"Sei has two CategoryAssinments\", sei.getCategoryAssignments().size() == 2);\r\n+\t\timporter.importSei(sei, mat);\r\n+\t\tassertTrue(\"Only one CategoryAssinment\", sei.getCategoryAssignments().size() == 1);\r\n+\t\tassertTrue(\"Right CategoryAssinment included\",\r\n+\t\t\t\tsei.getCategoryAssignments().get(0).getName().equals(tc2.getName()));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportAPIDeleteAPI() throws IOException {\r\n+\t\tEReferenceTest tc2 = new EReferenceTest(testConcept);\r\n+\t\ttsei.add(tc2);\r\n+\t\tTestCategoryAllProperty tc3 = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei.add(tc3);\r\n+\t\tAPropertyInstance nInstance = sei.getCategoryAssignments().get(0).getPropertyInstances().get(0);\r\n+\t\tsei.getCategoryAssignments().remove(0);\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t\tsei.getCategoryAssignments().get(0).getPropertyInstances().add(nInstance);\r\n+\t\tassertEquals(\"CategoryAssinment has seven PropertyInstances\", sei.getCategoryAssignments().get(0).getPropertyInstances().size(), NUMBEROFELEMENTS + 1);\r\n+\t\timporter.importSei(sei, mat);\r\n+\t\tassertTrue(\"Instance deleted\", sei.getCategoryAssignments().get(0).getPropertyInstances().size() == NUMBEROFELEMENTS);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportOfValuesRemoveAll() throws IOException {\r\n+\t\tTestCategoryAllProperty tc = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei.add(tc);\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t\t\r\n+\t\tTestStructuralElement tsei2 = new TestStructuralElement(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tTestCategoryAllProperty tc1 = new TestCategoryAllProperty(testConcept);\r\n+\t\ttc1.setTestBool(false);\r\n+\t\ttc1.setTestFloat(2);\r\n+\t\ttc1.setTestEnum(\"HIGH\");\r\n+\t\ttc1.setTestString(\"test\");\r\n+\t\ttc1.setTestInt(1);\r\n+\t\tURI testUri =  URI.createPlatformResourceURI(\"Testresource\", false);\r\n+\t\ttc1.setTestResource(testUri);\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setUuid(sei.getUuid());\r\n+\t\ttsei2.add(tc1);\r\n+\t\timporter.importSei(sei2, mat);\r\n+\r\n+\t\tEList<APropertyInstance> caSei = sei.getCategoryAssignments().get(0).getPropertyInstances();\r\n+\t\tEList<APropertyInstance> caSei2 = sei2.getCategoryAssignments().get(0).getPropertyInstances();\r\n+\t\tassertTrue(\"same number of elements\", caSei.size() == caSei2.size());\r\n+\t\tassertEquals(\"same testString\", tc1.getTestString(), tc.getTestString());\r\n+\t\tassertEquals(\"same testBool\", tc1.getTestBool(), tc.getTestBool());\r\n+\t\tassertEquals(tc1.getTestFloat(), tc.getTestFloat(), 0);\r\n+\t\tassertEquals(\"same testResource\", tc1.getTestResource(), tc.getTestResource());\r\n+\t\tassertEquals(\"same testEnum\", tc1.getTestEnum(), tc.getTestEnum());\r\n+\t\t\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportOfValuesAddAll() throws IOException {\r\n+\t\tTestCategoryAllProperty tc = new TestCategoryAllProperty(testConcept);\r", "originalCommit": "426646f6e8ebc74ec09dca899c48c568bf9c7e0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE0MzU2MA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/525#discussion_r394143560", "bodyText": "Changed it.", "author": "ALEhmerDLR", "createdAt": "2020-03-18T07:15:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYxNTI1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYxODY5NQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/525#discussion_r393618695", "bodyText": "ChangeNothingValues? TestCase with no updates?", "author": "franzTobiasDLR", "createdAt": "2020-03-17T11:42:57Z", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/dvlm/mat/MatImporterTest.java", "diffHunk": "@@ -0,0 +1,343 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.dvlm.mat;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.IOException;\r\n+\r\n+import org.eclipse.core.runtime.CoreException;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.common.util.URI;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.EReferenceTest;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryComposition;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryReference;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestStructuralElement;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestStructuralElementOther;\r\n+import de.dlr.sc.virsat.model.extension.tests.test.ATestConceptTestCase;\r\n+import de.dlr.sc.virsat.model.external.tests.ExternalTestType;\r\n+import us.hebi.matlab.mat.types.MatFile;\r\n+\r\n+public class MatImporterTest extends ATestConceptTestCase {\r\n+\r\n+\tprivate StructuralElementInstance sei;\r\n+\tprivate TestStructuralElement tsei;\r\n+\tprivate MatExporter exporter;\r\n+\tprivate MatImporter importer;\r\n+\tprivate MatFile mat;\r\n+\tprivate static final int NUMBEROFELEMENTS = 6;\r\n+\r\n+\t@Before\r\n+\tpublic void setUp() throws CoreException {\r\n+\t\texporter = new MatExporter();\r\n+\t\timporter = new MatImporter();\r\n+\t\tsuper.setUp();\r\n+\t\taddEditingDomainAndRepository();\r\n+\t\texecuteAsCommand(() -> loadTestConcept());\r\n+\t\ttsei = new TestStructuralElement(testConcept);\r\n+\t\tsei = tsei.getStructuralElementInstance();\r\n+\t\tsei.setName(\"testsei\");\r\n+\t\texecuteAsCommand(() -> repository.getRootEntities().add(sei));\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiCorrect() {\r\n+\t\tassertTrue(\"Is the same\", importer.checkIfCorrectSei(sei, mat));\r\n+\t\tsei.setName(\"Testsein\");\r\n+\t\tassertFalse(\"Not the same name\", importer.checkIfCorrectSei(sei, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiWrongUUID() {\r\n+\t\tTestStructuralElementOther tsei2 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setType(sei.getType());\r\n+\t\tassertFalse(\"Not the same uuid\", importer.checkIfCorrectSei(sei2, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiWrongType() {\r\n+\t\tTestStructuralElementOther tsei2 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setUuid(sei.getUuid());\r\n+\t\tassertFalse(\"Not the same type\", importer.checkIfCorrectSei(sei2, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiWrongNumberOfChildren() {\r\n+\t\tTestStructuralElementOther tsei2 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setParent(sei);\r\n+\t\tassertFalse(\"Not the same number of children\", importer.checkIfCorrectSei(sei, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiWrongChildren() {\r\n+\t\tTestStructuralElement tsei2 = new TestStructuralElement(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setParent(sei);\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t\tTestStructuralElementOther tsei3 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei3 = tsei3.getStructuralElementInstance();\r\n+\t\tsei3.setName(\"testseiChild\");\r\n+\t\tTestStructuralElementOther tsei4 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei4 = tsei4.getStructuralElementInstance();\r\n+\t\tsei4.setName(\"testseiChild2\");\r\n+\t\tsei2.setParent(sei3);\r\n+\t\tsei4.setParent(sei);\r\n+\t\tassertFalse(\"Not the same children\", importer.checkIfCorrectSei(sei, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportCasDeleteCas() throws IOException {\r\n+\t\tTestCategoryAllProperty tc2 = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei.add(tc2);\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t\tTestCategoryComposition tc1 = new TestCategoryComposition(testConcept);\r\n+\t\ttsei.add(tc1);\r\n+\t\tassertTrue(\"Sei has two CategoryAssinments\", sei.getCategoryAssignments().size() == 2);\r\n+\t\timporter.importSei(sei, mat);\r\n+\t\tassertTrue(\"Only one CategoryAssinment\", sei.getCategoryAssignments().size() == 1);\r\n+\t\tassertTrue(\"Right CategoryAssinment included\",\r\n+\t\t\t\tsei.getCategoryAssignments().get(0).getName().equals(tc2.getName()));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportAPIDeleteAPI() throws IOException {\r\n+\t\tEReferenceTest tc2 = new EReferenceTest(testConcept);\r\n+\t\ttsei.add(tc2);\r\n+\t\tTestCategoryAllProperty tc3 = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei.add(tc3);\r\n+\t\tAPropertyInstance nInstance = sei.getCategoryAssignments().get(0).getPropertyInstances().get(0);\r\n+\t\tsei.getCategoryAssignments().remove(0);\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t\tsei.getCategoryAssignments().get(0).getPropertyInstances().add(nInstance);\r\n+\t\tassertEquals(\"CategoryAssinment has seven PropertyInstances\", sei.getCategoryAssignments().get(0).getPropertyInstances().size(), NUMBEROFELEMENTS + 1);\r\n+\t\timporter.importSei(sei, mat);\r\n+\t\tassertTrue(\"Instance deleted\", sei.getCategoryAssignments().get(0).getPropertyInstances().size() == NUMBEROFELEMENTS);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportOfValuesRemoveAll() throws IOException {\r\n+\t\tTestCategoryAllProperty tc = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei.add(tc);\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t\t\r\n+\t\tTestStructuralElement tsei2 = new TestStructuralElement(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tTestCategoryAllProperty tc1 = new TestCategoryAllProperty(testConcept);\r\n+\t\ttc1.setTestBool(false);\r\n+\t\ttc1.setTestFloat(2);\r\n+\t\ttc1.setTestEnum(\"HIGH\");\r\n+\t\ttc1.setTestString(\"test\");\r\n+\t\ttc1.setTestInt(1);\r\n+\t\tURI testUri =  URI.createPlatformResourceURI(\"Testresource\", false);\r\n+\t\ttc1.setTestResource(testUri);\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setUuid(sei.getUuid());\r\n+\t\ttsei2.add(tc1);\r\n+\t\timporter.importSei(sei2, mat);\r\n+\r\n+\t\tEList<APropertyInstance> caSei = sei.getCategoryAssignments().get(0).getPropertyInstances();\r\n+\t\tEList<APropertyInstance> caSei2 = sei2.getCategoryAssignments().get(0).getPropertyInstances();\r\n+\t\tassertTrue(\"same number of elements\", caSei.size() == caSei2.size());\r\n+\t\tassertEquals(\"same testString\", tc1.getTestString(), tc.getTestString());\r\n+\t\tassertEquals(\"same testBool\", tc1.getTestBool(), tc.getTestBool());\r\n+\t\tassertEquals(tc1.getTestFloat(), tc.getTestFloat(), 0);\r\n+\t\tassertEquals(\"same testResource\", tc1.getTestResource(), tc.getTestResource());\r\n+\t\tassertEquals(\"same testEnum\", tc1.getTestEnum(), tc.getTestEnum());\r\n+\t\t\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportOfValuesAddAll() throws IOException {\r\n+\t\tTestCategoryAllProperty tc = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei.add(tc);\r\n+\t\ttc.setTestBool(true);\r\n+\t\ttc.setTestFloat(2);\r\n+\t\ttc.setTestEnum(\"HIGH\");\r\n+\t\ttc.setTestString(\"test\");\r\n+\t\ttc.setTestInt(1);\r\n+\t\tURI testUri = URI.createPlatformPluginURI(\"Testresource\", true);\r\n+\t\ttc.setTestResource(testUri);\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\r\n+\t\tTestStructuralElement tsei2 = new TestStructuralElement(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setUuid(sei.getUuid());\r\n+\t\tTestCategoryAllProperty tc1 = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei2.add(tc1);\r\n+\t\timporter.importSei(sei2, mat);\r\n+\r\n+\t\tEList<APropertyInstance> caSei = sei.getCategoryAssignments().get(0).getPropertyInstances();\r\n+\t\tEList<APropertyInstance> caSei2 = sei2.getCategoryAssignments().get(0).getPropertyInstances();\r\n+\t\tassertTrue(\"same number of elements\", caSei.size() == caSei2.size());\r\n+\t\tassertEquals(\"same testString\", tc1.getTestString(), tc.getTestString());\r\n+\t\tassertEquals(\"same testBool\", tc1.getTestBool(), tc.getTestBool());\r\n+\t\tassertEquals(tc1.getTestFloat(), tc.getTestFloat(), 0);\r\n+\t\tassertEquals(\"same testResource\", tc1.getTestResource(), tc.getTestResource());\r\n+\t\tassertEquals(\"same testEnum\", tc1.getTestEnum(), tc.getTestEnum());\r\n+\t\tassertEquals(\"same testInt\", tc1.getTestInt(), tc.getTestInt());\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportOfValuesChangeNothingEmpty() throws IOException {\r\n+\t\tTestCategoryAllProperty tc = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei.add(tc);\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\r\n+\t\tTestStructuralElement tsei2 = new TestStructuralElement(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setUuid(sei.getUuid());\r\n+\t\tTestCategoryAllProperty tc1 = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei2.add(tc1);\r\n+\t\timporter.importSei(sei2, mat);\r\n+\r\n+\t\tEList<APropertyInstance> caSei = sei.getCategoryAssignments().get(0).getPropertyInstances();\r\n+\t\tEList<APropertyInstance> caSei2 = sei2.getCategoryAssignments().get(0).getPropertyInstances();\r\n+\t\tassertTrue(\"same number of elements\", caSei.size() == caSei2.size());\r\n+\t\tassertEquals(\"same testString\", tc1.getTestString(), tc.getTestString());\r\n+\t\tassertEquals(\"same testBool\", tc1.getTestBool(), tc.getTestBool());\r\n+\t\tassertEquals(tc1.getTestFloat(), tc.getTestFloat(), 0);\r\n+\t\tassertEquals(\"same testResource\", tc1.getTestResource(), tc.getTestResource());\r\n+\t\tassertEquals(\"same testEnum\", tc1.getTestEnum(), tc.getTestEnum());\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportOfValuesChangeNothingValues() throws IOException {\r", "originalCommit": "426646f6e8ebc74ec09dca899c48c568bf9c7e0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE0MzE0OQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/525#discussion_r394143149", "bodyText": "A TestCase with no Values is exported and than imported. The test check if the sei doesn't change by this.", "author": "ALEhmerDLR", "createdAt": "2020-03-18T07:14:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYxODY5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYyMDE0Nw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/525#discussion_r393620147", "bodyText": "This method just returns you a command... which is not executed as long as you don't invoke its execution...\nCommand cmd = tsei.add(edetingDomain, tc);\nedetingDomain.execute(cmd);", "author": "franzTobiasDLR", "createdAt": "2020-03-17T11:45:52Z", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/dvlm/mat/MatImporterTest.java", "diffHunk": "@@ -0,0 +1,343 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.dvlm.mat;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.IOException;\r\n+\r\n+import org.eclipse.core.runtime.CoreException;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.common.util.URI;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.EReferenceTest;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryComposition;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryReference;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestStructuralElement;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestStructuralElementOther;\r\n+import de.dlr.sc.virsat.model.extension.tests.test.ATestConceptTestCase;\r\n+import de.dlr.sc.virsat.model.external.tests.ExternalTestType;\r\n+import us.hebi.matlab.mat.types.MatFile;\r\n+\r\n+public class MatImporterTest extends ATestConceptTestCase {\r\n+\r\n+\tprivate StructuralElementInstance sei;\r\n+\tprivate TestStructuralElement tsei;\r\n+\tprivate MatExporter exporter;\r\n+\tprivate MatImporter importer;\r\n+\tprivate MatFile mat;\r\n+\tprivate static final int NUMBEROFELEMENTS = 6;\r\n+\r\n+\t@Before\r\n+\tpublic void setUp() throws CoreException {\r\n+\t\texporter = new MatExporter();\r\n+\t\timporter = new MatImporter();\r\n+\t\tsuper.setUp();\r\n+\t\taddEditingDomainAndRepository();\r\n+\t\texecuteAsCommand(() -> loadTestConcept());\r\n+\t\ttsei = new TestStructuralElement(testConcept);\r\n+\t\tsei = tsei.getStructuralElementInstance();\r\n+\t\tsei.setName(\"testsei\");\r\n+\t\texecuteAsCommand(() -> repository.getRootEntities().add(sei));\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiCorrect() {\r\n+\t\tassertTrue(\"Is the same\", importer.checkIfCorrectSei(sei, mat));\r\n+\t\tsei.setName(\"Testsein\");\r\n+\t\tassertFalse(\"Not the same name\", importer.checkIfCorrectSei(sei, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiWrongUUID() {\r\n+\t\tTestStructuralElementOther tsei2 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setType(sei.getType());\r\n+\t\tassertFalse(\"Not the same uuid\", importer.checkIfCorrectSei(sei2, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiWrongType() {\r\n+\t\tTestStructuralElementOther tsei2 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setUuid(sei.getUuid());\r\n+\t\tassertFalse(\"Not the same type\", importer.checkIfCorrectSei(sei2, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiWrongNumberOfChildren() {\r\n+\t\tTestStructuralElementOther tsei2 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setParent(sei);\r\n+\t\tassertFalse(\"Not the same number of children\", importer.checkIfCorrectSei(sei, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiWrongChildren() {\r\n+\t\tTestStructuralElement tsei2 = new TestStructuralElement(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setParent(sei);\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t\tTestStructuralElementOther tsei3 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei3 = tsei3.getStructuralElementInstance();\r\n+\t\tsei3.setName(\"testseiChild\");\r\n+\t\tTestStructuralElementOther tsei4 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei4 = tsei4.getStructuralElementInstance();\r\n+\t\tsei4.setName(\"testseiChild2\");\r\n+\t\tsei2.setParent(sei3);\r\n+\t\tsei4.setParent(sei);\r\n+\t\tassertFalse(\"Not the same children\", importer.checkIfCorrectSei(sei, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportCasDeleteCas() throws IOException {\r\n+\t\tTestCategoryAllProperty tc2 = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei.add(tc2);\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t\tTestCategoryComposition tc1 = new TestCategoryComposition(testConcept);\r\n+\t\ttsei.add(tc1);\r\n+\t\tassertTrue(\"Sei has two CategoryAssinments\", sei.getCategoryAssignments().size() == 2);\r\n+\t\timporter.importSei(sei, mat);\r\n+\t\tassertTrue(\"Only one CategoryAssinment\", sei.getCategoryAssignments().size() == 1);\r\n+\t\tassertTrue(\"Right CategoryAssinment included\",\r\n+\t\t\t\tsei.getCategoryAssignments().get(0).getName().equals(tc2.getName()));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportAPIDeleteAPI() throws IOException {\r\n+\t\tEReferenceTest tc2 = new EReferenceTest(testConcept);\r\n+\t\ttsei.add(tc2);\r\n+\t\tTestCategoryAllProperty tc3 = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei.add(tc3);\r\n+\t\tAPropertyInstance nInstance = sei.getCategoryAssignments().get(0).getPropertyInstances().get(0);\r\n+\t\tsei.getCategoryAssignments().remove(0);\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t\tsei.getCategoryAssignments().get(0).getPropertyInstances().add(nInstance);\r\n+\t\tassertEquals(\"CategoryAssinment has seven PropertyInstances\", sei.getCategoryAssignments().get(0).getPropertyInstances().size(), NUMBEROFELEMENTS + 1);\r\n+\t\timporter.importSei(sei, mat);\r\n+\t\tassertTrue(\"Instance deleted\", sei.getCategoryAssignments().get(0).getPropertyInstances().size() == NUMBEROFELEMENTS);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportOfValuesRemoveAll() throws IOException {\r\n+\t\tTestCategoryAllProperty tc = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei.add(tc);\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t\t\r\n+\t\tTestStructuralElement tsei2 = new TestStructuralElement(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tTestCategoryAllProperty tc1 = new TestCategoryAllProperty(testConcept);\r\n+\t\ttc1.setTestBool(false);\r\n+\t\ttc1.setTestFloat(2);\r\n+\t\ttc1.setTestEnum(\"HIGH\");\r\n+\t\ttc1.setTestString(\"test\");\r\n+\t\ttc1.setTestInt(1);\r\n+\t\tURI testUri =  URI.createPlatformResourceURI(\"Testresource\", false);\r\n+\t\ttc1.setTestResource(testUri);\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setUuid(sei.getUuid());\r\n+\t\ttsei2.add(tc1);\r\n+\t\timporter.importSei(sei2, mat);\r\n+\r\n+\t\tEList<APropertyInstance> caSei = sei.getCategoryAssignments().get(0).getPropertyInstances();\r\n+\t\tEList<APropertyInstance> caSei2 = sei2.getCategoryAssignments().get(0).getPropertyInstances();\r\n+\t\tassertTrue(\"same number of elements\", caSei.size() == caSei2.size());\r\n+\t\tassertEquals(\"same testString\", tc1.getTestString(), tc.getTestString());\r\n+\t\tassertEquals(\"same testBool\", tc1.getTestBool(), tc.getTestBool());\r\n+\t\tassertEquals(tc1.getTestFloat(), tc.getTestFloat(), 0);\r\n+\t\tassertEquals(\"same testResource\", tc1.getTestResource(), tc.getTestResource());\r\n+\t\tassertEquals(\"same testEnum\", tc1.getTestEnum(), tc.getTestEnum());\r\n+\t\t\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportOfValuesAddAll() throws IOException {\r\n+\t\tTestCategoryAllProperty tc = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei.add(tc);\r\n+\t\ttc.setTestBool(true);\r\n+\t\ttc.setTestFloat(2);\r\n+\t\ttc.setTestEnum(\"HIGH\");\r\n+\t\ttc.setTestString(\"test\");\r\n+\t\ttc.setTestInt(1);\r\n+\t\tURI testUri = URI.createPlatformPluginURI(\"Testresource\", true);\r\n+\t\ttc.setTestResource(testUri);\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\r\n+\t\tTestStructuralElement tsei2 = new TestStructuralElement(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setUuid(sei.getUuid());\r\n+\t\tTestCategoryAllProperty tc1 = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei2.add(tc1);\r\n+\t\timporter.importSei(sei2, mat);\r\n+\r\n+\t\tEList<APropertyInstance> caSei = sei.getCategoryAssignments().get(0).getPropertyInstances();\r\n+\t\tEList<APropertyInstance> caSei2 = sei2.getCategoryAssignments().get(0).getPropertyInstances();\r\n+\t\tassertTrue(\"same number of elements\", caSei.size() == caSei2.size());\r\n+\t\tassertEquals(\"same testString\", tc1.getTestString(), tc.getTestString());\r\n+\t\tassertEquals(\"same testBool\", tc1.getTestBool(), tc.getTestBool());\r\n+\t\tassertEquals(tc1.getTestFloat(), tc.getTestFloat(), 0);\r\n+\t\tassertEquals(\"same testResource\", tc1.getTestResource(), tc.getTestResource());\r\n+\t\tassertEquals(\"same testEnum\", tc1.getTestEnum(), tc.getTestEnum());\r\n+\t\tassertEquals(\"same testInt\", tc1.getTestInt(), tc.getTestInt());\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportOfValuesChangeNothingEmpty() throws IOException {\r\n+\t\tTestCategoryAllProperty tc = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei.add(tc);\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\r\n+\t\tTestStructuralElement tsei2 = new TestStructuralElement(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setUuid(sei.getUuid());\r\n+\t\tTestCategoryAllProperty tc1 = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei2.add(tc1);\r\n+\t\timporter.importSei(sei2, mat);\r\n+\r\n+\t\tEList<APropertyInstance> caSei = sei.getCategoryAssignments().get(0).getPropertyInstances();\r\n+\t\tEList<APropertyInstance> caSei2 = sei2.getCategoryAssignments().get(0).getPropertyInstances();\r\n+\t\tassertTrue(\"same number of elements\", caSei.size() == caSei2.size());\r\n+\t\tassertEquals(\"same testString\", tc1.getTestString(), tc.getTestString());\r\n+\t\tassertEquals(\"same testBool\", tc1.getTestBool(), tc.getTestBool());\r\n+\t\tassertEquals(tc1.getTestFloat(), tc.getTestFloat(), 0);\r\n+\t\tassertEquals(\"same testResource\", tc1.getTestResource(), tc.getTestResource());\r\n+\t\tassertEquals(\"same testEnum\", tc1.getTestEnum(), tc.getTestEnum());\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportOfValuesChangeNothingValues() throws IOException {\r\n+\t\tTestCategoryAllProperty tc = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei.add(tc);\r\n+\t\ttc.setTestBool(true);\r\n+\t\ttc.setTestFloat(2);\r\n+\t\ttc.setTestEnum(\"HIGH\");\r\n+\t\ttc.setTestString(\"test\");\r\n+\t\ttc.setTestInt(1);\r\n+\t\tURI testUri = URI.createPlatformPluginURI(\"Testresource\", true);\r\n+\t\ttc.setTestResource(testUri);\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\r\n+\t\tTestStructuralElement tsei2 = new TestStructuralElement(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setUuid(sei.getUuid());\r\n+\t\tTestCategoryAllProperty tc1 = new TestCategoryAllProperty(testConcept);\r\n+\t\ttc1.setTestBool(true);\r\n+\t\ttc1.setTestFloat(2);\r\n+\t\ttc1.setTestEnum(\"HIGH\");\r\n+\t\ttc1.setTestString(\"test\");\r\n+\t\ttc1.setTestInt(1);\r\n+\t\ttc1.setTestResource(testUri);\r\n+\t\ttsei2.add(tc1);\r\n+\t\timporter.importSei(sei2, mat);\r\n+\r\n+\t\tEList<APropertyInstance> caSei = sei.getCategoryAssignments().get(0).getPropertyInstances();\r\n+\t\tEList<APropertyInstance> caSei2 = sei2.getCategoryAssignments().get(0).getPropertyInstances();\r\n+\t\tassertTrue(\"same number of elements\", caSei.size() == caSei2.size());\r\n+\t\tassertEquals(\"same testString\", tc1.getTestString(), tc.getTestString());\r\n+\t\tassertEquals(\"same testBool\", tc1.getTestBool(), tc.getTestBool());\r\n+\t\tassertEquals(tc1.getTestFloat(), tc.getTestFloat(), 0);\r\n+\t\tassertEquals(\"same testResource\", tc1.getTestResource(), tc.getTestResource());\r\n+\t\tassertEquals(\"same testEnum\", tc1.getTestEnum(), tc.getTestEnum());\r\n+\t\tassertEquals(\"same testInt\", tc1.getTestInt(), tc.getTestInt());\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportOfValuesRef() throws IOException {\r\n+\t\t//empty and import empty\r\n+\t\tTestCategoryReference tc = new TestCategoryReference(testConcept);\r\n+\t\ttsei.add(editingDomain, tc);\r", "originalCommit": "426646f6e8ebc74ec09dca899c48c568bf9c7e0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYyMDg1Nw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/525#discussion_r393620857", "bodyText": "Looks like this test isn't doing anything till now, is it? If values are not set then this CA is still empty", "author": "franzTobiasDLR", "createdAt": "2020-03-17T11:47:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYyMDE0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYyNTY4OA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/525#discussion_r393625688", "bodyText": "I think it makes more sense to test the value of an EReference here... rather than comparing the property...", "author": "franzTobiasDLR", "createdAt": "2020-03-17T11:56:30Z", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/dvlm/mat/MatImporterTest.java", "diffHunk": "@@ -0,0 +1,343 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.dvlm.mat;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.IOException;\r\n+\r\n+import org.eclipse.core.runtime.CoreException;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.common.util.URI;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.EReferenceTest;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryComposition;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryReference;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestStructuralElement;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestStructuralElementOther;\r\n+import de.dlr.sc.virsat.model.extension.tests.test.ATestConceptTestCase;\r\n+import de.dlr.sc.virsat.model.external.tests.ExternalTestType;\r\n+import us.hebi.matlab.mat.types.MatFile;\r\n+\r\n+public class MatImporterTest extends ATestConceptTestCase {\r\n+\r\n+\tprivate StructuralElementInstance sei;\r\n+\tprivate TestStructuralElement tsei;\r\n+\tprivate MatExporter exporter;\r\n+\tprivate MatImporter importer;\r\n+\tprivate MatFile mat;\r\n+\tprivate static final int NUMBEROFELEMENTS = 6;\r\n+\r\n+\t@Before\r\n+\tpublic void setUp() throws CoreException {\r\n+\t\texporter = new MatExporter();\r\n+\t\timporter = new MatImporter();\r\n+\t\tsuper.setUp();\r\n+\t\taddEditingDomainAndRepository();\r\n+\t\texecuteAsCommand(() -> loadTestConcept());\r\n+\t\ttsei = new TestStructuralElement(testConcept);\r\n+\t\tsei = tsei.getStructuralElementInstance();\r\n+\t\tsei.setName(\"testsei\");\r\n+\t\texecuteAsCommand(() -> repository.getRootEntities().add(sei));\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiCorrect() {\r\n+\t\tassertTrue(\"Is the same\", importer.checkIfCorrectSei(sei, mat));\r\n+\t\tsei.setName(\"Testsein\");\r\n+\t\tassertFalse(\"Not the same name\", importer.checkIfCorrectSei(sei, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiWrongUUID() {\r\n+\t\tTestStructuralElementOther tsei2 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setType(sei.getType());\r\n+\t\tassertFalse(\"Not the same uuid\", importer.checkIfCorrectSei(sei2, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiWrongType() {\r\n+\t\tTestStructuralElementOther tsei2 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setUuid(sei.getUuid());\r\n+\t\tassertFalse(\"Not the same type\", importer.checkIfCorrectSei(sei2, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiWrongNumberOfChildren() {\r\n+\t\tTestStructuralElementOther tsei2 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setParent(sei);\r\n+\t\tassertFalse(\"Not the same number of children\", importer.checkIfCorrectSei(sei, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiWrongChildren() {\r\n+\t\tTestStructuralElement tsei2 = new TestStructuralElement(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setParent(sei);\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t\tTestStructuralElementOther tsei3 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei3 = tsei3.getStructuralElementInstance();\r\n+\t\tsei3.setName(\"testseiChild\");\r\n+\t\tTestStructuralElementOther tsei4 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei4 = tsei4.getStructuralElementInstance();\r\n+\t\tsei4.setName(\"testseiChild2\");\r\n+\t\tsei2.setParent(sei3);\r\n+\t\tsei4.setParent(sei);\r\n+\t\tassertFalse(\"Not the same children\", importer.checkIfCorrectSei(sei, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportCasDeleteCas() throws IOException {\r\n+\t\tTestCategoryAllProperty tc2 = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei.add(tc2);\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t\tTestCategoryComposition tc1 = new TestCategoryComposition(testConcept);\r\n+\t\ttsei.add(tc1);\r\n+\t\tassertTrue(\"Sei has two CategoryAssinments\", sei.getCategoryAssignments().size() == 2);\r\n+\t\timporter.importSei(sei, mat);\r\n+\t\tassertTrue(\"Only one CategoryAssinment\", sei.getCategoryAssignments().size() == 1);\r\n+\t\tassertTrue(\"Right CategoryAssinment included\",\r\n+\t\t\t\tsei.getCategoryAssignments().get(0).getName().equals(tc2.getName()));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportAPIDeleteAPI() throws IOException {\r\n+\t\tEReferenceTest tc2 = new EReferenceTest(testConcept);\r\n+\t\ttsei.add(tc2);\r\n+\t\tTestCategoryAllProperty tc3 = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei.add(tc3);\r\n+\t\tAPropertyInstance nInstance = sei.getCategoryAssignments().get(0).getPropertyInstances().get(0);\r\n+\t\tsei.getCategoryAssignments().remove(0);\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t\tsei.getCategoryAssignments().get(0).getPropertyInstances().add(nInstance);\r\n+\t\tassertEquals(\"CategoryAssinment has seven PropertyInstances\", sei.getCategoryAssignments().get(0).getPropertyInstances().size(), NUMBEROFELEMENTS + 1);\r\n+\t\timporter.importSei(sei, mat);\r\n+\t\tassertTrue(\"Instance deleted\", sei.getCategoryAssignments().get(0).getPropertyInstances().size() == NUMBEROFELEMENTS);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportOfValuesRemoveAll() throws IOException {\r\n+\t\tTestCategoryAllProperty tc = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei.add(tc);\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t\t\r\n+\t\tTestStructuralElement tsei2 = new TestStructuralElement(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tTestCategoryAllProperty tc1 = new TestCategoryAllProperty(testConcept);\r\n+\t\ttc1.setTestBool(false);\r\n+\t\ttc1.setTestFloat(2);\r\n+\t\ttc1.setTestEnum(\"HIGH\");\r\n+\t\ttc1.setTestString(\"test\");\r\n+\t\ttc1.setTestInt(1);\r\n+\t\tURI testUri =  URI.createPlatformResourceURI(\"Testresource\", false);\r\n+\t\ttc1.setTestResource(testUri);\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setUuid(sei.getUuid());\r\n+\t\ttsei2.add(tc1);\r\n+\t\timporter.importSei(sei2, mat);\r\n+\r\n+\t\tEList<APropertyInstance> caSei = sei.getCategoryAssignments().get(0).getPropertyInstances();\r\n+\t\tEList<APropertyInstance> caSei2 = sei2.getCategoryAssignments().get(0).getPropertyInstances();\r\n+\t\tassertTrue(\"same number of elements\", caSei.size() == caSei2.size());\r\n+\t\tassertEquals(\"same testString\", tc1.getTestString(), tc.getTestString());\r\n+\t\tassertEquals(\"same testBool\", tc1.getTestBool(), tc.getTestBool());\r\n+\t\tassertEquals(tc1.getTestFloat(), tc.getTestFloat(), 0);\r\n+\t\tassertEquals(\"same testResource\", tc1.getTestResource(), tc.getTestResource());\r\n+\t\tassertEquals(\"same testEnum\", tc1.getTestEnum(), tc.getTestEnum());\r\n+\t\t\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportOfValuesAddAll() throws IOException {\r\n+\t\tTestCategoryAllProperty tc = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei.add(tc);\r\n+\t\ttc.setTestBool(true);\r\n+\t\ttc.setTestFloat(2);\r\n+\t\ttc.setTestEnum(\"HIGH\");\r\n+\t\ttc.setTestString(\"test\");\r\n+\t\ttc.setTestInt(1);\r\n+\t\tURI testUri = URI.createPlatformPluginURI(\"Testresource\", true);\r\n+\t\ttc.setTestResource(testUri);\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\r\n+\t\tTestStructuralElement tsei2 = new TestStructuralElement(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setUuid(sei.getUuid());\r\n+\t\tTestCategoryAllProperty tc1 = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei2.add(tc1);\r\n+\t\timporter.importSei(sei2, mat);\r\n+\r\n+\t\tEList<APropertyInstance> caSei = sei.getCategoryAssignments().get(0).getPropertyInstances();\r\n+\t\tEList<APropertyInstance> caSei2 = sei2.getCategoryAssignments().get(0).getPropertyInstances();\r\n+\t\tassertTrue(\"same number of elements\", caSei.size() == caSei2.size());\r\n+\t\tassertEquals(\"same testString\", tc1.getTestString(), tc.getTestString());\r\n+\t\tassertEquals(\"same testBool\", tc1.getTestBool(), tc.getTestBool());\r\n+\t\tassertEquals(tc1.getTestFloat(), tc.getTestFloat(), 0);\r\n+\t\tassertEquals(\"same testResource\", tc1.getTestResource(), tc.getTestResource());\r\n+\t\tassertEquals(\"same testEnum\", tc1.getTestEnum(), tc.getTestEnum());\r\n+\t\tassertEquals(\"same testInt\", tc1.getTestInt(), tc.getTestInt());\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportOfValuesChangeNothingEmpty() throws IOException {\r\n+\t\tTestCategoryAllProperty tc = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei.add(tc);\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\r\n+\t\tTestStructuralElement tsei2 = new TestStructuralElement(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setUuid(sei.getUuid());\r\n+\t\tTestCategoryAllProperty tc1 = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei2.add(tc1);\r\n+\t\timporter.importSei(sei2, mat);\r\n+\r\n+\t\tEList<APropertyInstance> caSei = sei.getCategoryAssignments().get(0).getPropertyInstances();\r\n+\t\tEList<APropertyInstance> caSei2 = sei2.getCategoryAssignments().get(0).getPropertyInstances();\r\n+\t\tassertTrue(\"same number of elements\", caSei.size() == caSei2.size());\r\n+\t\tassertEquals(\"same testString\", tc1.getTestString(), tc.getTestString());\r\n+\t\tassertEquals(\"same testBool\", tc1.getTestBool(), tc.getTestBool());\r\n+\t\tassertEquals(tc1.getTestFloat(), tc.getTestFloat(), 0);\r\n+\t\tassertEquals(\"same testResource\", tc1.getTestResource(), tc.getTestResource());\r\n+\t\tassertEquals(\"same testEnum\", tc1.getTestEnum(), tc.getTestEnum());\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportOfValuesChangeNothingValues() throws IOException {\r\n+\t\tTestCategoryAllProperty tc = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei.add(tc);\r\n+\t\ttc.setTestBool(true);\r\n+\t\ttc.setTestFloat(2);\r\n+\t\ttc.setTestEnum(\"HIGH\");\r\n+\t\ttc.setTestString(\"test\");\r\n+\t\ttc.setTestInt(1);\r\n+\t\tURI testUri = URI.createPlatformPluginURI(\"Testresource\", true);\r\n+\t\ttc.setTestResource(testUri);\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\r\n+\t\tTestStructuralElement tsei2 = new TestStructuralElement(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setUuid(sei.getUuid());\r\n+\t\tTestCategoryAllProperty tc1 = new TestCategoryAllProperty(testConcept);\r\n+\t\ttc1.setTestBool(true);\r\n+\t\ttc1.setTestFloat(2);\r\n+\t\ttc1.setTestEnum(\"HIGH\");\r\n+\t\ttc1.setTestString(\"test\");\r\n+\t\ttc1.setTestInt(1);\r\n+\t\ttc1.setTestResource(testUri);\r\n+\t\ttsei2.add(tc1);\r\n+\t\timporter.importSei(sei2, mat);\r\n+\r\n+\t\tEList<APropertyInstance> caSei = sei.getCategoryAssignments().get(0).getPropertyInstances();\r\n+\t\tEList<APropertyInstance> caSei2 = sei2.getCategoryAssignments().get(0).getPropertyInstances();\r\n+\t\tassertTrue(\"same number of elements\", caSei.size() == caSei2.size());\r\n+\t\tassertEquals(\"same testString\", tc1.getTestString(), tc.getTestString());\r\n+\t\tassertEquals(\"same testBool\", tc1.getTestBool(), tc.getTestBool());\r\n+\t\tassertEquals(tc1.getTestFloat(), tc.getTestFloat(), 0);\r\n+\t\tassertEquals(\"same testResource\", tc1.getTestResource(), tc.getTestResource());\r\n+\t\tassertEquals(\"same testEnum\", tc1.getTestEnum(), tc.getTestEnum());\r\n+\t\tassertEquals(\"same testInt\", tc1.getTestInt(), tc.getTestInt());\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportOfValuesRef() throws IOException {\r\n+\t\t//empty and import empty\r\n+\t\tTestCategoryReference tc = new TestCategoryReference(testConcept);\r\n+\t\ttsei.add(editingDomain, tc);\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t\tMatFile mat1 = exporter.exportSei(sei);\r\n+\t\tTestStructuralElement tsei2 = new TestStructuralElement(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tTestCategoryReference tc1 = new TestCategoryReference(testConcept);\r\n+\t\ttsei2.add(editingDomain, tc1);\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setUuid(sei.getUuid());\r\n+\t\timporter.importSei(sei2, mat);\r\n+\t\tassertEquals(\"same EReference from empty to empty\", tc1.getTestRefCategory(), tc.getTestRefCategory()); //empty to empty\r\n+\r\n+\t\t//values and import empty\r\n+\t\tTestCategoryAllProperty tc2 = new TestCategoryAllProperty(testConcept);\r\n+\t\ttc1.setTestRefCategory(editingDomain, tc2);\r\n+\t\timporter.importSei(sei2, mat1);\r\n+\t\tassertEquals(\"same EReference from value to empty\", tc1.getTestRefCategory(), tc.getTestRefCategory());\r\n+\r\n+\t\t//empty and import values\r\n+\t\ttc1.setTestRefCategory(editingDomain, tc2);\r\n+\t\teditingDomain.saveAll();\r\n+\t\tmat = exporter.exportSei(sei2);\r\n+\t\timporter.importSei(sei, mat);\r\n+\t\tassertEquals(\"same Reference from empty to value\", tc1.getTestRefCategory(), tc.getTestRefCategory());\r\n+\r\n+\t\t//values and import values\r\n+\t\ttc.setTestRefCategory(editingDomain, tc2);\r\n+\t\ttc1.setTestRefCategory(editingDomain, tc2);\r\n+\t\teditingDomain.saveAll();\r\n+\t\tmat = exporter.exportSei(sei2);\r\n+\t\timporter.importSei(sei, mat);\r\n+\t\tassertEquals(\"same Reference from value to value\", tc1.getTestRefCategory(), tc.getTestRefCategory());\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportOfValuesERef() throws IOException {\r\n+\t\tExternalTestType testERef = de.dlr.sc.virsat.model.external.tests.TestsFactory.eINSTANCE.createExternalTestType();\r\n+\t\t\r\n+\t\t//empty and import empty\r\n+\t\tEReferenceTest tc = new EReferenceTest(testConcept);\r\n+\t\ttsei.add(editingDomain, tc);\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t\tMatFile mat1 = exporter.exportSei(sei);\r\n+\t\tTestStructuralElement tsei2 = new TestStructuralElement(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tEReferenceTest tc1 = new EReferenceTest(testConcept);\r\n+\t\ttsei2.add(editingDomain, tc1);\r\n+\t\tsei2.setName(\"testsei\");\r\n+\t\tsei2.setUuid(sei.getUuid());\r\n+\t\timporter.importSei(sei2, mat);\r\n+\t\tassertEquals(\"same Reference from empty to empty\", tc1.getEReferenceTest(), tc.getEReferenceTest());\r", "originalCommit": "426646f6e8ebc74ec09dca899c48c568bf9c7e0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "222edc5cbea9ddf556e4c905b4eb0b2d267a9152", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/222edc5cbea9ddf556e4c905b4eb0b2d267a9152", "message": "Changed Remove - (Task #520)\n\n---\nTask #520: Import from Matlab", "committedDate": "2020-03-17T13:41:17Z", "type": "commit"}, {"oid": "4873b70b4e62eeed007053041ed4c255b6b1e703", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/4873b70b4e62eeed007053041ed4c255b6b1e703", "message": "Changes - (Task #520)\n\n---\nTask #520: Import from Matlab", "committedDate": "2020-03-17T15:15:30Z", "type": "commit"}, {"oid": "8968b2d8e75f4a0740faf692b853dd2c23379f3f", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/8968b2d8e75f4a0740faf692b853dd2c23379f3f", "message": "Changed order of assertEquals - (Task #520)\n\nAdded value to compare to\n\n---\nTask #520: Import from Matlab", "committedDate": "2020-03-18T07:05:29Z", "type": "commit"}, {"oid": "a6e9e558748e66b24a2a54d29a25ce1af4cf4730", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/a6e9e558748e66b24a2a54d29a25ce1af4cf4730", "message": "Added some comments - (Task #520)\n\n---\nTask #520: Import from Matlab", "committedDate": "2020-03-18T07:25:13Z", "type": "commit"}, {"oid": "d05681c7dd36920c666941fc3eb9e51a084043f1", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/d05681c7dd36920c666941fc3eb9e51a084043f1", "message": "Fix commands - (Task #520)\n\n---\nTask #520: Import from Matlab", "committedDate": "2020-03-18T10:09:19Z", "type": "commit"}, {"oid": "71f31896aadde813be874d1f9e28ed652f9e09f3", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/71f31896aadde813be874d1f9e28ed652f9e09f3", "message": "Changes everything to commands - (Task #520)\n\neverything working exept units, EReference and Reference\n\n---\nTask #520: Import from Matlab", "committedDate": "2020-03-19T14:20:25Z", "type": "commit"}, {"oid": "33021f9d8779cc8b062e5d15a957941f16f5a212", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/33021f9d8779cc8b062e5d15a957941f16f5a212", "message": "Fix import of units - (Task #520)", "committedDate": "2020-03-20T01:10:35Z", "type": "commit"}, {"oid": "e8f9ce6537a6579a44982a2712810bed568b94fd", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/e8f9ce6537a6579a44982a2712810bed568b94fd", "message": "Fix EReference export - (Task #520)", "committedDate": "2020-03-20T01:11:24Z", "type": "commit"}, {"oid": "98411a79e9f373be8ea567c64ff513a3c9f9639a", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/98411a79e9f373be8ea567c64ff513a3c9f9639a", "message": "Reset test of basic attributes to version without commands - (Task #520)", "committedDate": "2020-03-20T01:15:00Z", "type": "commit"}, {"oid": "27056814c6233492a5eb6cd6d781bb3dee061b8f", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/27056814c6233492a5eb6cd6d781bb3dee061b8f", "message": "Add instance of external test model - (Task #520)", "committedDate": "2020-03-20T01:17:29Z", "type": "commit"}, {"oid": "a8cd9210ef0ad2d7ab22282e8a964c8b37facb42", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/a8cd9210ef0ad2d7ab22282e8a964c8b37facb42", "message": "Fix import of reference and erference - (Task #520)", "committedDate": "2020-03-20T02:19:19Z", "type": "commit"}, {"oid": "fd151638701f83e8e6882cb2b4b6785b24fa8e59", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/fd151638701f83e8e6882cb2b4b6785b24fa8e59", "message": "Fix test for import of references - (Task #520)", "committedDate": "2020-03-20T02:19:37Z", "type": "commit"}, {"oid": "cca6bd9f85014383830a8849d368b3a19ca77408", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/cca6bd9f85014383830a8849d368b3a19ca77408", "message": "Fix Array- (Task #520)\n\n---\nTask #520: Import from Matlab", "committedDate": "2020-03-20T08:47:41Z", "type": "commit"}, {"oid": "95d524d9532ea3e2c81cdcecfabe6f5c08ea1640", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/95d524d9532ea3e2c81cdcecfabe6f5c08ea1640", "message": "Fix Ref and add Test for Unit - (Task #520)\n\n---\nTask #520: Import from Matlab", "committedDate": "2020-03-20T10:04:28Z", "type": "commit"}, {"oid": "3c20fe8df7721a4a16242bf569527abd8636a0d3", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/3c20fe8df7721a4a16242bf569527abd8636a0d3", "message": "ImportTest without export - (Task #520)\n\n---\nTask #520: Import from Matlab", "committedDate": "2020-03-20T11:22:15Z", "type": "commit"}, {"oid": "a9848b2573d5eaba26964959168c25c5473aaa51", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/a9848b2573d5eaba26964959168c25c5473aaa51", "message": "Fix surefire error - (Task #520)\n\n---\nTask #520: Import from Matlab", "committedDate": "2020-03-20T12:31:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzNTg5OQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/525#discussion_r395635899", "bodyText": "So we prevent renaming of SEIs? Why? Aren't UUIDs itendfier enough?", "author": "franzTobiasDLR", "createdAt": "2020-03-20T13:29:54Z", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/dvlm/mat/MatImporterTest.java", "diffHunk": "@@ -0,0 +1,464 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.dvlm.mat;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertNotNull;\r\n+import static org.junit.Assert.assertNull;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.IOException;\r\n+\r\n+import org.eclipse.core.runtime.CoreException;\r\n+import org.eclipse.emf.common.command.Command;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.common.util.URI;\r\n+import org.eclipse.emf.ecore.util.EcoreUtil;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.EReferenceTest;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryComposition;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryCompositionArray;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryReference;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestStructuralElement;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestStructuralElementOther;\r\n+import de.dlr.sc.virsat.model.extension.tests.test.ATestConceptTestCase;\r\n+import de.dlr.sc.virsat.model.external.tests.ExternalModelTestHelper;\r\n+import de.dlr.sc.virsat.model.external.tests.ExternalTestType;\r\n+import de.dlr.sc.virsat.project.resources.command.CreateSeiResourceAndFileCommand;\r\n+import us.hebi.matlab.mat.format.Mat5;\r\n+import us.hebi.matlab.mat.types.MatFile;\r\n+import us.hebi.matlab.mat.types.Struct;\r\n+\r\n+public class MatImporterTest extends ATestConceptTestCase {\r\n+\r\n+\tprivate StructuralElementInstance sei;\r\n+\tprivate TestStructuralElement tsei;\r\n+\tprivate MatExporter exporter;\r\n+\tprivate MatImporter importer;\r\n+\tprivate MatFile mat;\r\n+\tprivate static final String TEST_STRING = \"testString\";\r\n+\tprivate static final int TEST_INT = 1;\r\n+\tprivate static final float TEST_FLOAT = 2;\r\n+\tprivate static final String TEST_ENUM_VALUE = \"HIGH\";\r\n+\tprivate static final String TEST_SEI = \"testsei\";\r\n+\tprivate static final Boolean TEST_BOOL = true;\r\n+\r\n+\t@Before\r\n+\tpublic void setUp() throws CoreException {\r\n+\t\texporter = new MatExporter();\r\n+\t\timporter = new MatImporter();\r\n+\t\tsuper.setUp();\r\n+\t\taddEditingDomainAndRepository();\r\n+\t\texecuteAsCommand(() -> loadTestConcept());\r\n+\t\ttsei = new TestStructuralElement(testConcept);\r\n+\t\tsei = tsei.getStructuralElementInstance();\r\n+\t\tsei.setName(TEST_SEI);\r\n+\t\texecuteAsCommand(() -> repository.getRootEntities().add(sei));\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testWithoutExport() throws IOException {\r\n+\t\tTestCategoryAllProperty tc = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei.add(tc);\r\n+\t\t//Create Mat\r\n+\t\tMatFile matfile = Mat5.newMatFile();\r\n+\t\t\r\n+\t\tStruct boolPropertyStruct = Mat5.newStruct();\r\n+\t\tboolPropertyStruct.set(MatHelper.VALUE, Mat5.newLogicalScalar(TEST_BOOL));\r\n+\t\t\r\n+\t\tStruct stringPropertyStruct = Mat5.newStruct();\r\n+\t\tstringPropertyStruct.set(MatHelper.VALUE, Mat5.newString(TEST_STRING));\r\n+\t\t\r\n+\t\tStruct intPropertyStruct = Mat5.newStruct();\r\n+\t\tintPropertyStruct.set(MatHelper.UNIT, Mat5.newString(\"\"));\r\n+\t\tintPropertyStruct.set(MatHelper.VALUE, Mat5.newScalar(TEST_INT));\r\n+\t\t\r\n+\t\tStruct floatPropertyStruct = Mat5.newStruct();\r\n+\t\tfloatPropertyStruct.set(MatHelper.UNIT, Mat5.newString(\"\"));\r\n+\t\tfloatPropertyStruct.set(MatHelper.VALUE, Mat5.newScalar(TEST_FLOAT));\r\n+\t\t\r\n+\t\tStruct enumPropertyStruct = Mat5.newStruct();\r\n+\t\tenumPropertyStruct.set(MatHelper.UNIT, Mat5.newString(\"Kilogram\"));\r\n+\t\tenumPropertyStruct.set(MatHelper.VALUE, Mat5.newString(\"25\"));\r\n+\t\tenumPropertyStruct.set(MatHelper.NAME, Mat5.newString(TEST_ENUM_VALUE));\r\n+\r\n+\t\tStruct resourcePropertyStruct = Mat5.newStruct();\r\n+\t\tresourcePropertyStruct.set(MatHelper.URI, Mat5.newString(\"\"));\r\n+\t\t\r\n+\t\tStruct caStruct = Mat5.newStruct();\r\n+\t\tcaStruct.set(\"testString\", stringPropertyStruct);\r\n+\t\tcaStruct.set(\"testInt\", intPropertyStruct);\r\n+\t\tcaStruct.set(\"testFloat\", floatPropertyStruct);\r\n+\t\tcaStruct.set(\"testResource\", resourcePropertyStruct);\r\n+\t\tcaStruct.set(\"testEnum\", enumPropertyStruct);\r\n+\t\tcaStruct.set(\"testBool\", boolPropertyStruct);\r\n+\t\t\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\t\tstruct.set(MatHelper.TYPE, Mat5.newString(sei.getType().getName()))\r\n+\t\t\t  .set(MatHelper.UUID, Mat5.newString(sei.getUuid().toString()));\r\n+\t\tstruct.set(tc.getName(), caStruct);\r\n+\t\tmatfile.addArray(sei.getName(), struct);\r\n+\t\tCommand cmd = importer.importSei(editingDomain, sei, matfile);\r\n+\t\teditingDomain.getCommandStack().execute(cmd);\r\n+\t\tassertEquals(\"Is the same\", TEST_STRING, tc.getTestString());\r\n+\t\tassertEquals(\"Is the same\", TEST_ENUM_VALUE, tc.getTestEnum());\r\n+\t\tassertEquals(\"Is the same\", TEST_BOOL, tc.getTestBool());\r\n+\t\tassertEquals(\"Is the same\", TEST_INT, tc.getTestInt());\r\n+\t\tassertEquals(TEST_FLOAT, tc.getTestFloat(), 0);\r\n+\t\tassertEquals(\"Is the same\", null, tc.getTestResource());\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiCorrect() {\r\n+\t\tassertTrue(\"Is the same\", importer.checkIfCorrectSei(sei, mat));\r\n+\t\tsei.setName(\"Testsein\");\r", "originalCommit": "a9848b2573d5eaba26964959168c25c5473aaa51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY0NjE0MA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/525#discussion_r395646140", "bodyText": "Right now yes. The name is used to take the right Entry of the .mat. So if it is the wrong name, it will not work yet", "author": "ALEhmerDLR", "createdAt": "2020-03-20T13:46:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzNTg5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzNjY5Mw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/525#discussion_r395636693", "bodyText": "That test is legacy or? It doesn't do anything else than the upper test? Or am I missing something?", "author": "franzTobiasDLR", "createdAt": "2020-03-20T13:31:11Z", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/dvlm/mat/MatImporterTest.java", "diffHunk": "@@ -0,0 +1,464 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.dvlm.mat;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertNotNull;\r\n+import static org.junit.Assert.assertNull;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.IOException;\r\n+\r\n+import org.eclipse.core.runtime.CoreException;\r\n+import org.eclipse.emf.common.command.Command;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.common.util.URI;\r\n+import org.eclipse.emf.ecore.util.EcoreUtil;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.EReferenceTest;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryComposition;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryCompositionArray;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryReference;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestStructuralElement;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestStructuralElementOther;\r\n+import de.dlr.sc.virsat.model.extension.tests.test.ATestConceptTestCase;\r\n+import de.dlr.sc.virsat.model.external.tests.ExternalModelTestHelper;\r\n+import de.dlr.sc.virsat.model.external.tests.ExternalTestType;\r\n+import de.dlr.sc.virsat.project.resources.command.CreateSeiResourceAndFileCommand;\r\n+import us.hebi.matlab.mat.format.Mat5;\r\n+import us.hebi.matlab.mat.types.MatFile;\r\n+import us.hebi.matlab.mat.types.Struct;\r\n+\r\n+public class MatImporterTest extends ATestConceptTestCase {\r\n+\r\n+\tprivate StructuralElementInstance sei;\r\n+\tprivate TestStructuralElement tsei;\r\n+\tprivate MatExporter exporter;\r\n+\tprivate MatImporter importer;\r\n+\tprivate MatFile mat;\r\n+\tprivate static final String TEST_STRING = \"testString\";\r\n+\tprivate static final int TEST_INT = 1;\r\n+\tprivate static final float TEST_FLOAT = 2;\r\n+\tprivate static final String TEST_ENUM_VALUE = \"HIGH\";\r\n+\tprivate static final String TEST_SEI = \"testsei\";\r\n+\tprivate static final Boolean TEST_BOOL = true;\r\n+\r\n+\t@Before\r\n+\tpublic void setUp() throws CoreException {\r\n+\t\texporter = new MatExporter();\r\n+\t\timporter = new MatImporter();\r\n+\t\tsuper.setUp();\r\n+\t\taddEditingDomainAndRepository();\r\n+\t\texecuteAsCommand(() -> loadTestConcept());\r\n+\t\ttsei = new TestStructuralElement(testConcept);\r\n+\t\tsei = tsei.getStructuralElementInstance();\r\n+\t\tsei.setName(TEST_SEI);\r\n+\t\texecuteAsCommand(() -> repository.getRootEntities().add(sei));\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testWithoutExport() throws IOException {\r\n+\t\tTestCategoryAllProperty tc = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei.add(tc);\r\n+\t\t//Create Mat\r\n+\t\tMatFile matfile = Mat5.newMatFile();\r\n+\t\t\r\n+\t\tStruct boolPropertyStruct = Mat5.newStruct();\r\n+\t\tboolPropertyStruct.set(MatHelper.VALUE, Mat5.newLogicalScalar(TEST_BOOL));\r\n+\t\t\r\n+\t\tStruct stringPropertyStruct = Mat5.newStruct();\r\n+\t\tstringPropertyStruct.set(MatHelper.VALUE, Mat5.newString(TEST_STRING));\r\n+\t\t\r\n+\t\tStruct intPropertyStruct = Mat5.newStruct();\r\n+\t\tintPropertyStruct.set(MatHelper.UNIT, Mat5.newString(\"\"));\r\n+\t\tintPropertyStruct.set(MatHelper.VALUE, Mat5.newScalar(TEST_INT));\r\n+\t\t\r\n+\t\tStruct floatPropertyStruct = Mat5.newStruct();\r\n+\t\tfloatPropertyStruct.set(MatHelper.UNIT, Mat5.newString(\"\"));\r\n+\t\tfloatPropertyStruct.set(MatHelper.VALUE, Mat5.newScalar(TEST_FLOAT));\r\n+\t\t\r\n+\t\tStruct enumPropertyStruct = Mat5.newStruct();\r\n+\t\tenumPropertyStruct.set(MatHelper.UNIT, Mat5.newString(\"Kilogram\"));\r\n+\t\tenumPropertyStruct.set(MatHelper.VALUE, Mat5.newString(\"25\"));\r\n+\t\tenumPropertyStruct.set(MatHelper.NAME, Mat5.newString(TEST_ENUM_VALUE));\r\n+\r\n+\t\tStruct resourcePropertyStruct = Mat5.newStruct();\r\n+\t\tresourcePropertyStruct.set(MatHelper.URI, Mat5.newString(\"\"));\r\n+\t\t\r\n+\t\tStruct caStruct = Mat5.newStruct();\r\n+\t\tcaStruct.set(\"testString\", stringPropertyStruct);\r\n+\t\tcaStruct.set(\"testInt\", intPropertyStruct);\r\n+\t\tcaStruct.set(\"testFloat\", floatPropertyStruct);\r\n+\t\tcaStruct.set(\"testResource\", resourcePropertyStruct);\r\n+\t\tcaStruct.set(\"testEnum\", enumPropertyStruct);\r\n+\t\tcaStruct.set(\"testBool\", boolPropertyStruct);\r\n+\t\t\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\t\tstruct.set(MatHelper.TYPE, Mat5.newString(sei.getType().getName()))\r\n+\t\t\t  .set(MatHelper.UUID, Mat5.newString(sei.getUuid().toString()));\r\n+\t\tstruct.set(tc.getName(), caStruct);\r\n+\t\tmatfile.addArray(sei.getName(), struct);\r\n+\t\tCommand cmd = importer.importSei(editingDomain, sei, matfile);\r\n+\t\teditingDomain.getCommandStack().execute(cmd);\r\n+\t\tassertEquals(\"Is the same\", TEST_STRING, tc.getTestString());\r\n+\t\tassertEquals(\"Is the same\", TEST_ENUM_VALUE, tc.getTestEnum());\r\n+\t\tassertEquals(\"Is the same\", TEST_BOOL, tc.getTestBool());\r\n+\t\tassertEquals(\"Is the same\", TEST_INT, tc.getTestInt());\r\n+\t\tassertEquals(TEST_FLOAT, tc.getTestFloat(), 0);\r\n+\t\tassertEquals(\"Is the same\", null, tc.getTestResource());\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiCorrect() {\r\n+\t\tassertTrue(\"Is the same\", importer.checkIfCorrectSei(sei, mat));\r\n+\t\tsei.setName(\"Testsein\");\r\n+\t\tassertFalse(\"Not the same name\", importer.checkIfCorrectSei(sei, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiWrongUUID() {\r\n+\t\tTestStructuralElementOther tsei2 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(TEST_SEI);\r\n+\t\tsei2.setType(sei.getType());\r\n+\t\tassertFalse(\"Not the same uuid\", importer.checkIfCorrectSei(sei2, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiWrongType() {\r\n+\t\tTestStructuralElementOther tsei2 = new TestStructuralElementOther(testConcept);\r", "originalCommit": "a9848b2573d5eaba26964959168c25c5473aaa51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY0NTIxOA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/525#discussion_r395645218", "bodyText": "One checks for UUID, one for TYPE", "author": "ALEhmerDLR", "createdAt": "2020-03-20T13:45:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzNjY5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzODE0MQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/525#discussion_r395638141", "bodyText": "Would be nice if the Unit would be in a constant as well... :)\nfinal String UNIT_NAME = \"Kilogram\";", "author": "franzTobiasDLR", "createdAt": "2020-03-20T13:33:35Z", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/dvlm/mat/MatImporterTest.java", "diffHunk": "@@ -0,0 +1,464 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.dvlm.mat;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertNotNull;\r\n+import static org.junit.Assert.assertNull;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.IOException;\r\n+\r\n+import org.eclipse.core.runtime.CoreException;\r\n+import org.eclipse.emf.common.command.Command;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.common.util.URI;\r\n+import org.eclipse.emf.ecore.util.EcoreUtil;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.EReferenceTest;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryComposition;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryCompositionArray;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryReference;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestStructuralElement;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestStructuralElementOther;\r\n+import de.dlr.sc.virsat.model.extension.tests.test.ATestConceptTestCase;\r\n+import de.dlr.sc.virsat.model.external.tests.ExternalModelTestHelper;\r\n+import de.dlr.sc.virsat.model.external.tests.ExternalTestType;\r\n+import de.dlr.sc.virsat.project.resources.command.CreateSeiResourceAndFileCommand;\r\n+import us.hebi.matlab.mat.format.Mat5;\r\n+import us.hebi.matlab.mat.types.MatFile;\r\n+import us.hebi.matlab.mat.types.Struct;\r\n+\r\n+public class MatImporterTest extends ATestConceptTestCase {\r\n+\r\n+\tprivate StructuralElementInstance sei;\r\n+\tprivate TestStructuralElement tsei;\r\n+\tprivate MatExporter exporter;\r\n+\tprivate MatImporter importer;\r\n+\tprivate MatFile mat;\r\n+\tprivate static final String TEST_STRING = \"testString\";\r\n+\tprivate static final int TEST_INT = 1;\r\n+\tprivate static final float TEST_FLOAT = 2;\r\n+\tprivate static final String TEST_ENUM_VALUE = \"HIGH\";\r\n+\tprivate static final String TEST_SEI = \"testsei\";\r\n+\tprivate static final Boolean TEST_BOOL = true;\r\n+\r\n+\t@Before\r\n+\tpublic void setUp() throws CoreException {\r\n+\t\texporter = new MatExporter();\r\n+\t\timporter = new MatImporter();\r\n+\t\tsuper.setUp();\r\n+\t\taddEditingDomainAndRepository();\r\n+\t\texecuteAsCommand(() -> loadTestConcept());\r\n+\t\ttsei = new TestStructuralElement(testConcept);\r\n+\t\tsei = tsei.getStructuralElementInstance();\r\n+\t\tsei.setName(TEST_SEI);\r\n+\t\texecuteAsCommand(() -> repository.getRootEntities().add(sei));\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testWithoutExport() throws IOException {\r\n+\t\tTestCategoryAllProperty tc = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei.add(tc);\r\n+\t\t//Create Mat\r\n+\t\tMatFile matfile = Mat5.newMatFile();\r\n+\t\t\r\n+\t\tStruct boolPropertyStruct = Mat5.newStruct();\r\n+\t\tboolPropertyStruct.set(MatHelper.VALUE, Mat5.newLogicalScalar(TEST_BOOL));\r\n+\t\t\r\n+\t\tStruct stringPropertyStruct = Mat5.newStruct();\r\n+\t\tstringPropertyStruct.set(MatHelper.VALUE, Mat5.newString(TEST_STRING));\r\n+\t\t\r\n+\t\tStruct intPropertyStruct = Mat5.newStruct();\r\n+\t\tintPropertyStruct.set(MatHelper.UNIT, Mat5.newString(\"\"));\r\n+\t\tintPropertyStruct.set(MatHelper.VALUE, Mat5.newScalar(TEST_INT));\r\n+\t\t\r\n+\t\tStruct floatPropertyStruct = Mat5.newStruct();\r\n+\t\tfloatPropertyStruct.set(MatHelper.UNIT, Mat5.newString(\"\"));\r\n+\t\tfloatPropertyStruct.set(MatHelper.VALUE, Mat5.newScalar(TEST_FLOAT));\r\n+\t\t\r\n+\t\tStruct enumPropertyStruct = Mat5.newStruct();\r\n+\t\tenumPropertyStruct.set(MatHelper.UNIT, Mat5.newString(\"Kilogram\"));\r\n+\t\tenumPropertyStruct.set(MatHelper.VALUE, Mat5.newString(\"25\"));\r\n+\t\tenumPropertyStruct.set(MatHelper.NAME, Mat5.newString(TEST_ENUM_VALUE));\r\n+\r\n+\t\tStruct resourcePropertyStruct = Mat5.newStruct();\r\n+\t\tresourcePropertyStruct.set(MatHelper.URI, Mat5.newString(\"\"));\r\n+\t\t\r\n+\t\tStruct caStruct = Mat5.newStruct();\r\n+\t\tcaStruct.set(\"testString\", stringPropertyStruct);\r\n+\t\tcaStruct.set(\"testInt\", intPropertyStruct);\r\n+\t\tcaStruct.set(\"testFloat\", floatPropertyStruct);\r\n+\t\tcaStruct.set(\"testResource\", resourcePropertyStruct);\r\n+\t\tcaStruct.set(\"testEnum\", enumPropertyStruct);\r\n+\t\tcaStruct.set(\"testBool\", boolPropertyStruct);\r\n+\t\t\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\t\tstruct.set(MatHelper.TYPE, Mat5.newString(sei.getType().getName()))\r\n+\t\t\t  .set(MatHelper.UUID, Mat5.newString(sei.getUuid().toString()));\r\n+\t\tstruct.set(tc.getName(), caStruct);\r\n+\t\tmatfile.addArray(sei.getName(), struct);\r\n+\t\tCommand cmd = importer.importSei(editingDomain, sei, matfile);\r\n+\t\teditingDomain.getCommandStack().execute(cmd);\r\n+\t\tassertEquals(\"Is the same\", TEST_STRING, tc.getTestString());\r\n+\t\tassertEquals(\"Is the same\", TEST_ENUM_VALUE, tc.getTestEnum());\r\n+\t\tassertEquals(\"Is the same\", TEST_BOOL, tc.getTestBool());\r\n+\t\tassertEquals(\"Is the same\", TEST_INT, tc.getTestInt());\r\n+\t\tassertEquals(TEST_FLOAT, tc.getTestFloat(), 0);\r\n+\t\tassertEquals(\"Is the same\", null, tc.getTestResource());\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiCorrect() {\r\n+\t\tassertTrue(\"Is the same\", importer.checkIfCorrectSei(sei, mat));\r\n+\t\tsei.setName(\"Testsein\");\r\n+\t\tassertFalse(\"Not the same name\", importer.checkIfCorrectSei(sei, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiWrongUUID() {\r\n+\t\tTestStructuralElementOther tsei2 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(TEST_SEI);\r\n+\t\tsei2.setType(sei.getType());\r\n+\t\tassertFalse(\"Not the same uuid\", importer.checkIfCorrectSei(sei2, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiWrongType() {\r\n+\t\tTestStructuralElementOther tsei2 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(TEST_SEI);\r\n+\t\tsei2.setUuid(sei.getUuid());\r\n+\t\tassertFalse(\"Not the same type\", importer.checkIfCorrectSei(sei2, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportUnit() throws IOException {\r\n+\t\tTestCategoryAllProperty tc = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei.add(tc);\r\n+\t\ttc.getTestFloatBean().setUnit(\"Kilogram\");\r", "originalCommit": "a9848b2573d5eaba26964959168c25c5473aaa51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY0ODE3NQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/525#discussion_r395648175", "bodyText": "Done", "author": "ALEhmerDLR", "createdAt": "2020-03-20T13:49:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzODE0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzODcwMg==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/525#discussion_r395638702", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertEquals(\"Unit set\", \"Kilogram\", tc1.getTestFloatBean().getUnit());\n          \n          \n            \n            \t\tassertEquals(\"Unit set\", UNIT_NAME, tc1.getTestFloatBean().getUnit());", "author": "franzTobiasDLR", "createdAt": "2020-03-20T13:34:34Z", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/dvlm/mat/MatImporterTest.java", "diffHunk": "@@ -0,0 +1,464 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.dvlm.mat;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertNotNull;\r\n+import static org.junit.Assert.assertNull;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.IOException;\r\n+\r\n+import org.eclipse.core.runtime.CoreException;\r\n+import org.eclipse.emf.common.command.Command;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.common.util.URI;\r\n+import org.eclipse.emf.ecore.util.EcoreUtil;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.EReferenceTest;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryComposition;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryCompositionArray;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryReference;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestStructuralElement;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestStructuralElementOther;\r\n+import de.dlr.sc.virsat.model.extension.tests.test.ATestConceptTestCase;\r\n+import de.dlr.sc.virsat.model.external.tests.ExternalModelTestHelper;\r\n+import de.dlr.sc.virsat.model.external.tests.ExternalTestType;\r\n+import de.dlr.sc.virsat.project.resources.command.CreateSeiResourceAndFileCommand;\r\n+import us.hebi.matlab.mat.format.Mat5;\r\n+import us.hebi.matlab.mat.types.MatFile;\r\n+import us.hebi.matlab.mat.types.Struct;\r\n+\r\n+public class MatImporterTest extends ATestConceptTestCase {\r\n+\r\n+\tprivate StructuralElementInstance sei;\r\n+\tprivate TestStructuralElement tsei;\r\n+\tprivate MatExporter exporter;\r\n+\tprivate MatImporter importer;\r\n+\tprivate MatFile mat;\r\n+\tprivate static final String TEST_STRING = \"testString\";\r\n+\tprivate static final int TEST_INT = 1;\r\n+\tprivate static final float TEST_FLOAT = 2;\r\n+\tprivate static final String TEST_ENUM_VALUE = \"HIGH\";\r\n+\tprivate static final String TEST_SEI = \"testsei\";\r\n+\tprivate static final Boolean TEST_BOOL = true;\r\n+\r\n+\t@Before\r\n+\tpublic void setUp() throws CoreException {\r\n+\t\texporter = new MatExporter();\r\n+\t\timporter = new MatImporter();\r\n+\t\tsuper.setUp();\r\n+\t\taddEditingDomainAndRepository();\r\n+\t\texecuteAsCommand(() -> loadTestConcept());\r\n+\t\ttsei = new TestStructuralElement(testConcept);\r\n+\t\tsei = tsei.getStructuralElementInstance();\r\n+\t\tsei.setName(TEST_SEI);\r\n+\t\texecuteAsCommand(() -> repository.getRootEntities().add(sei));\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testWithoutExport() throws IOException {\r\n+\t\tTestCategoryAllProperty tc = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei.add(tc);\r\n+\t\t//Create Mat\r\n+\t\tMatFile matfile = Mat5.newMatFile();\r\n+\t\t\r\n+\t\tStruct boolPropertyStruct = Mat5.newStruct();\r\n+\t\tboolPropertyStruct.set(MatHelper.VALUE, Mat5.newLogicalScalar(TEST_BOOL));\r\n+\t\t\r\n+\t\tStruct stringPropertyStruct = Mat5.newStruct();\r\n+\t\tstringPropertyStruct.set(MatHelper.VALUE, Mat5.newString(TEST_STRING));\r\n+\t\t\r\n+\t\tStruct intPropertyStruct = Mat5.newStruct();\r\n+\t\tintPropertyStruct.set(MatHelper.UNIT, Mat5.newString(\"\"));\r\n+\t\tintPropertyStruct.set(MatHelper.VALUE, Mat5.newScalar(TEST_INT));\r\n+\t\t\r\n+\t\tStruct floatPropertyStruct = Mat5.newStruct();\r\n+\t\tfloatPropertyStruct.set(MatHelper.UNIT, Mat5.newString(\"\"));\r\n+\t\tfloatPropertyStruct.set(MatHelper.VALUE, Mat5.newScalar(TEST_FLOAT));\r\n+\t\t\r\n+\t\tStruct enumPropertyStruct = Mat5.newStruct();\r\n+\t\tenumPropertyStruct.set(MatHelper.UNIT, Mat5.newString(\"Kilogram\"));\r\n+\t\tenumPropertyStruct.set(MatHelper.VALUE, Mat5.newString(\"25\"));\r\n+\t\tenumPropertyStruct.set(MatHelper.NAME, Mat5.newString(TEST_ENUM_VALUE));\r\n+\r\n+\t\tStruct resourcePropertyStruct = Mat5.newStruct();\r\n+\t\tresourcePropertyStruct.set(MatHelper.URI, Mat5.newString(\"\"));\r\n+\t\t\r\n+\t\tStruct caStruct = Mat5.newStruct();\r\n+\t\tcaStruct.set(\"testString\", stringPropertyStruct);\r\n+\t\tcaStruct.set(\"testInt\", intPropertyStruct);\r\n+\t\tcaStruct.set(\"testFloat\", floatPropertyStruct);\r\n+\t\tcaStruct.set(\"testResource\", resourcePropertyStruct);\r\n+\t\tcaStruct.set(\"testEnum\", enumPropertyStruct);\r\n+\t\tcaStruct.set(\"testBool\", boolPropertyStruct);\r\n+\t\t\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\t\tstruct.set(MatHelper.TYPE, Mat5.newString(sei.getType().getName()))\r\n+\t\t\t  .set(MatHelper.UUID, Mat5.newString(sei.getUuid().toString()));\r\n+\t\tstruct.set(tc.getName(), caStruct);\r\n+\t\tmatfile.addArray(sei.getName(), struct);\r\n+\t\tCommand cmd = importer.importSei(editingDomain, sei, matfile);\r\n+\t\teditingDomain.getCommandStack().execute(cmd);\r\n+\t\tassertEquals(\"Is the same\", TEST_STRING, tc.getTestString());\r\n+\t\tassertEquals(\"Is the same\", TEST_ENUM_VALUE, tc.getTestEnum());\r\n+\t\tassertEquals(\"Is the same\", TEST_BOOL, tc.getTestBool());\r\n+\t\tassertEquals(\"Is the same\", TEST_INT, tc.getTestInt());\r\n+\t\tassertEquals(TEST_FLOAT, tc.getTestFloat(), 0);\r\n+\t\tassertEquals(\"Is the same\", null, tc.getTestResource());\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiCorrect() {\r\n+\t\tassertTrue(\"Is the same\", importer.checkIfCorrectSei(sei, mat));\r\n+\t\tsei.setName(\"Testsein\");\r\n+\t\tassertFalse(\"Not the same name\", importer.checkIfCorrectSei(sei, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiWrongUUID() {\r\n+\t\tTestStructuralElementOther tsei2 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(TEST_SEI);\r\n+\t\tsei2.setType(sei.getType());\r\n+\t\tassertFalse(\"Not the same uuid\", importer.checkIfCorrectSei(sei2, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiWrongType() {\r\n+\t\tTestStructuralElementOther tsei2 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(TEST_SEI);\r\n+\t\tsei2.setUuid(sei.getUuid());\r\n+\t\tassertFalse(\"Not the same type\", importer.checkIfCorrectSei(sei2, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportUnit() throws IOException {\r\n+\t\tTestCategoryAllProperty tc = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei.add(tc);\r\n+\t\ttc.getTestFloatBean().setUnit(\"Kilogram\");\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t\tTestStructuralElement tsei2 = new TestStructuralElement(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(TEST_SEI);\r\n+\t\tsei2.setUuid(sei.getUuid());\r\n+\t\tTestCategoryAllProperty tc1 = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei2.add(tc1);\r\n+\t\teditingDomain.getCommandStack().execute(importer.importSei(editingDomain, sei2, mat));\r\n+\t\tassertEquals(\"Unit set\", \"Kilogram\", tc1.getTestFloatBean().getUnit());\r", "originalCommit": "a9848b2573d5eaba26964959168c25c5473aaa51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY0NzgxMw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/525#discussion_r395647813", "bodyText": "Done", "author": "ALEhmerDLR", "createdAt": "2020-03-20T13:48:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzODcwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY0MDk4OA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/525#discussion_r395640988", "bodyText": "Missleading comment... Test is further down. Rather \"Prepare test data\" or remove it", "author": "franzTobiasDLR", "createdAt": "2020-03-20T13:38:18Z", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/dvlm/mat/MatImporterTest.java", "diffHunk": "@@ -0,0 +1,464 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.dvlm.mat;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertNotNull;\r\n+import static org.junit.Assert.assertNull;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.IOException;\r\n+\r\n+import org.eclipse.core.runtime.CoreException;\r\n+import org.eclipse.emf.common.command.Command;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.common.util.URI;\r\n+import org.eclipse.emf.ecore.util.EcoreUtil;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.EReferenceTest;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryComposition;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryCompositionArray;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryReference;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestStructuralElement;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestStructuralElementOther;\r\n+import de.dlr.sc.virsat.model.extension.tests.test.ATestConceptTestCase;\r\n+import de.dlr.sc.virsat.model.external.tests.ExternalModelTestHelper;\r\n+import de.dlr.sc.virsat.model.external.tests.ExternalTestType;\r\n+import de.dlr.sc.virsat.project.resources.command.CreateSeiResourceAndFileCommand;\r\n+import us.hebi.matlab.mat.format.Mat5;\r\n+import us.hebi.matlab.mat.types.MatFile;\r\n+import us.hebi.matlab.mat.types.Struct;\r\n+\r\n+public class MatImporterTest extends ATestConceptTestCase {\r\n+\r\n+\tprivate StructuralElementInstance sei;\r\n+\tprivate TestStructuralElement tsei;\r\n+\tprivate MatExporter exporter;\r\n+\tprivate MatImporter importer;\r\n+\tprivate MatFile mat;\r\n+\tprivate static final String TEST_STRING = \"testString\";\r\n+\tprivate static final int TEST_INT = 1;\r\n+\tprivate static final float TEST_FLOAT = 2;\r\n+\tprivate static final String TEST_ENUM_VALUE = \"HIGH\";\r\n+\tprivate static final String TEST_SEI = \"testsei\";\r\n+\tprivate static final Boolean TEST_BOOL = true;\r\n+\r\n+\t@Before\r\n+\tpublic void setUp() throws CoreException {\r\n+\t\texporter = new MatExporter();\r\n+\t\timporter = new MatImporter();\r\n+\t\tsuper.setUp();\r\n+\t\taddEditingDomainAndRepository();\r\n+\t\texecuteAsCommand(() -> loadTestConcept());\r\n+\t\ttsei = new TestStructuralElement(testConcept);\r\n+\t\tsei = tsei.getStructuralElementInstance();\r\n+\t\tsei.setName(TEST_SEI);\r\n+\t\texecuteAsCommand(() -> repository.getRootEntities().add(sei));\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testWithoutExport() throws IOException {\r\n+\t\tTestCategoryAllProperty tc = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei.add(tc);\r\n+\t\t//Create Mat\r\n+\t\tMatFile matfile = Mat5.newMatFile();\r\n+\t\t\r\n+\t\tStruct boolPropertyStruct = Mat5.newStruct();\r\n+\t\tboolPropertyStruct.set(MatHelper.VALUE, Mat5.newLogicalScalar(TEST_BOOL));\r\n+\t\t\r\n+\t\tStruct stringPropertyStruct = Mat5.newStruct();\r\n+\t\tstringPropertyStruct.set(MatHelper.VALUE, Mat5.newString(TEST_STRING));\r\n+\t\t\r\n+\t\tStruct intPropertyStruct = Mat5.newStruct();\r\n+\t\tintPropertyStruct.set(MatHelper.UNIT, Mat5.newString(\"\"));\r\n+\t\tintPropertyStruct.set(MatHelper.VALUE, Mat5.newScalar(TEST_INT));\r\n+\t\t\r\n+\t\tStruct floatPropertyStruct = Mat5.newStruct();\r\n+\t\tfloatPropertyStruct.set(MatHelper.UNIT, Mat5.newString(\"\"));\r\n+\t\tfloatPropertyStruct.set(MatHelper.VALUE, Mat5.newScalar(TEST_FLOAT));\r\n+\t\t\r\n+\t\tStruct enumPropertyStruct = Mat5.newStruct();\r\n+\t\tenumPropertyStruct.set(MatHelper.UNIT, Mat5.newString(\"Kilogram\"));\r\n+\t\tenumPropertyStruct.set(MatHelper.VALUE, Mat5.newString(\"25\"));\r\n+\t\tenumPropertyStruct.set(MatHelper.NAME, Mat5.newString(TEST_ENUM_VALUE));\r\n+\r\n+\t\tStruct resourcePropertyStruct = Mat5.newStruct();\r\n+\t\tresourcePropertyStruct.set(MatHelper.URI, Mat5.newString(\"\"));\r\n+\t\t\r\n+\t\tStruct caStruct = Mat5.newStruct();\r\n+\t\tcaStruct.set(\"testString\", stringPropertyStruct);\r\n+\t\tcaStruct.set(\"testInt\", intPropertyStruct);\r\n+\t\tcaStruct.set(\"testFloat\", floatPropertyStruct);\r\n+\t\tcaStruct.set(\"testResource\", resourcePropertyStruct);\r\n+\t\tcaStruct.set(\"testEnum\", enumPropertyStruct);\r\n+\t\tcaStruct.set(\"testBool\", boolPropertyStruct);\r\n+\t\t\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\t\tstruct.set(MatHelper.TYPE, Mat5.newString(sei.getType().getName()))\r\n+\t\t\t  .set(MatHelper.UUID, Mat5.newString(sei.getUuid().toString()));\r\n+\t\tstruct.set(tc.getName(), caStruct);\r\n+\t\tmatfile.addArray(sei.getName(), struct);\r\n+\t\tCommand cmd = importer.importSei(editingDomain, sei, matfile);\r\n+\t\teditingDomain.getCommandStack().execute(cmd);\r\n+\t\tassertEquals(\"Is the same\", TEST_STRING, tc.getTestString());\r\n+\t\tassertEquals(\"Is the same\", TEST_ENUM_VALUE, tc.getTestEnum());\r\n+\t\tassertEquals(\"Is the same\", TEST_BOOL, tc.getTestBool());\r\n+\t\tassertEquals(\"Is the same\", TEST_INT, tc.getTestInt());\r\n+\t\tassertEquals(TEST_FLOAT, tc.getTestFloat(), 0);\r\n+\t\tassertEquals(\"Is the same\", null, tc.getTestResource());\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiCorrect() {\r\n+\t\tassertTrue(\"Is the same\", importer.checkIfCorrectSei(sei, mat));\r\n+\t\tsei.setName(\"Testsein\");\r\n+\t\tassertFalse(\"Not the same name\", importer.checkIfCorrectSei(sei, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiWrongUUID() {\r\n+\t\tTestStructuralElementOther tsei2 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(TEST_SEI);\r\n+\t\tsei2.setType(sei.getType());\r\n+\t\tassertFalse(\"Not the same uuid\", importer.checkIfCorrectSei(sei2, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCheckIfCorrectSeiWrongType() {\r\n+\t\tTestStructuralElementOther tsei2 = new TestStructuralElementOther(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(TEST_SEI);\r\n+\t\tsei2.setUuid(sei.getUuid());\r\n+\t\tassertFalse(\"Not the same type\", importer.checkIfCorrectSei(sei2, mat));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportUnit() throws IOException {\r\n+\t\tTestCategoryAllProperty tc = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei.add(tc);\r\n+\t\ttc.getTestFloatBean().setUnit(\"Kilogram\");\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t\tTestStructuralElement tsei2 = new TestStructuralElement(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(TEST_SEI);\r\n+\t\tsei2.setUuid(sei.getUuid());\r\n+\t\tTestCategoryAllProperty tc1 = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei2.add(tc1);\r\n+\t\teditingDomain.getCommandStack().execute(importer.importSei(editingDomain, sei2, mat));\r\n+\t\tassertEquals(\"Unit set\", \"Kilogram\", tc1.getTestFloatBean().getUnit());\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportOfValuesRemoveAll() throws IOException {\r\n+\t\tTestCategoryAllProperty tc = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei.add(tc);\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\t\t\r\n+\t\tTestStructuralElement tsei2 = new TestStructuralElement(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tTestCategoryAllProperty tc1 = new TestCategoryAllProperty(testConcept);\r\n+\t\ttc1.setTestBool(TEST_BOOL);\r\n+\t\ttc1.setTestFloat(TEST_FLOAT);\r\n+\t\ttc1.setTestEnum(TEST_ENUM_VALUE);\r\n+\t\ttc1.setTestString(TEST_STRING);\r\n+\t\ttc1.setTestInt(TEST_INT);\r\n+\t\tURI testUri =  URI.createPlatformResourceURI(\"Testresource\", false);\r\n+\t\ttc1.setTestResource(testUri);\r\n+\t\tsei2.setName(TEST_SEI);\r\n+\t\tsei2.setUuid(sei.getUuid());\r\n+\t\ttsei2.add(tc1);\r\n+\t\teditingDomain.getCommandStack().execute(importer.importSei(editingDomain, sei2, mat));\r\n+\r\n+\t\t//checks if the import deletes all values\r\n+\t\tEList<APropertyInstance> caSei = sei.getCategoryAssignments().get(0).getPropertyInstances();\r\n+\t\tEList<APropertyInstance> caSei2 = sei2.getCategoryAssignments().get(0).getPropertyInstances();\r\n+\t\tassertTrue(\"same number of elements\", caSei.size() == caSei2.size());\r\n+\t\tassertEquals(\"same testString\", tc.getTestString(), tc1.getTestString());\r\n+\t\tassertEquals(\"same testBool\", tc.getTestBool(), tc1.getTestBool());\r\n+\t\tassertEquals(tc.getTestFloat(), tc1.getTestFloat(), 0);\r\n+\t\tassertEquals(\"same testResource\", tc.getTestResource(), tc1.getTestResource());\r\n+\t\tassertEquals(\"same testEnum\", tc.getTestEnum(), tc1.getTestEnum());\r\n+\t\t\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportOfValuesAddAll() throws IOException {\r\n+\t\tTestCategoryAllProperty tc = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei.add(tc);\r\n+\t\ttc.setTestBool(TEST_BOOL);\r\n+\t\ttc.setTestFloat(TEST_FLOAT);\r\n+\t\ttc.setTestEnum(TEST_ENUM_VALUE);\r\n+\t\ttc.setTestString(TEST_STRING);\r\n+\t\ttc.setTestInt(TEST_INT);\r\n+\t\tURI testUri = URI.createPlatformPluginURI(\"Testresource\", true);\r\n+\t\ttc.setTestResource(testUri);\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\r\n+\t\tTestStructuralElement tsei2 = new TestStructuralElement(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(TEST_SEI);\r\n+\t\tsei2.setUuid(sei.getUuid());\r\n+\t\tTestCategoryAllProperty tc1 = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei2.add(tc1);\r\n+\t\teditingDomain.getCommandStack().execute(importer.importSei(editingDomain, sei2, mat));\r\n+\r\n+\t\t//checks if the import adds all Values\r\n+\t\tEList<APropertyInstance> caSei = sei.getCategoryAssignments().get(0).getPropertyInstances();\r\n+\t\tEList<APropertyInstance> caSei2 = sei2.getCategoryAssignments().get(0).getPropertyInstances();\r\n+\t\tassertTrue(\"same number of elements\", caSei.size() == caSei2.size());\r\n+\t\tassertEquals(\"same testString\", TEST_STRING, tc1.getTestString());\r\n+\t\tassertEquals(\"same testBool\", TEST_BOOL, tc1.getTestBool());\r\n+\t\tassertEquals(TEST_FLOAT, tc1.getTestFloat(), 0);\r\n+\t\tassertEquals(\"same testResource\", tc.getTestResource(), tc1.getTestResource());\r\n+\t\tassertEquals(\"same testEnum\", TEST_ENUM_VALUE, tc1.getTestEnum());\r\n+\t\tassertEquals(\"same testInt\", TEST_INT, tc1.getTestInt());\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportOfValuesChangeNothingEmpty() throws IOException {\r\n+\t\tTestCategoryAllProperty tc = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei.add(tc);\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\r\n+\t\tTestStructuralElement tsei2 = new TestStructuralElement(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(TEST_SEI);\r\n+\t\tsei2.setUuid(sei.getUuid());\r\n+\t\tTestCategoryAllProperty tc1 = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei2.add(tc1);\r\n+\t\teditingDomain.getCommandStack().execute(importer.importSei(editingDomain, sei, mat));\r\n+\r\n+\t\t//checks that if the same sei is imported and everything is empty, it stays empty\r\n+\t\tEList<APropertyInstance> caSei = sei.getCategoryAssignments().get(0).getPropertyInstances();\r\n+\t\tEList<APropertyInstance> caSei2 = sei2.getCategoryAssignments().get(0).getPropertyInstances();\r\n+\t\tassertTrue(\"same number of elements\", caSei.size() == caSei2.size());\r\n+\t\tassertEquals(\"same testString\", tc.getTestString(), tc1.getTestString());\r\n+\t\tassertEquals(\"same testBool\", tc.getTestBool(), tc1.getTestBool());\r\n+\t\tassertEquals(tc.getTestFloat(), tc1.getTestFloat(), 0);\r\n+\t\tassertEquals(\"same testResource\", tc.getTestResource(), tc1.getTestResource());\r\n+\t\tassertEquals(\"same testEnum\", tc.getTestEnum(), tc1.getTestEnum());\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportOfValuesChangeNothingValues() throws IOException {\r\n+\t\tTestCategoryAllProperty tc = new TestCategoryAllProperty(testConcept);\r\n+\t\ttsei.add(tc);\r\n+\t\ttc.setTestBool(TEST_BOOL);\r\n+\t\ttc.setTestFloat(TEST_FLOAT);\r\n+\t\ttc.setTestEnum(TEST_ENUM_VALUE);\r\n+\t\ttc.setTestString(TEST_STRING);\r\n+\t\ttc.setTestInt(TEST_INT);\r\n+\t\tURI testUri = URI.createPlatformPluginURI(\"Testresource\", true);\r\n+\t\ttc.setTestResource(testUri);\r\n+\t\tmat = exporter.exportSei(sei);\r\n+\r\n+\t\tTestStructuralElement tsei2 = new TestStructuralElement(testConcept);\r\n+\t\tStructuralElementInstance sei2 = tsei2.getStructuralElementInstance();\r\n+\t\tsei2.setName(TEST_SEI);\r\n+\t\tsei2.setUuid(sei.getUuid());\r\n+\t\tTestCategoryAllProperty tc1 = new TestCategoryAllProperty(testConcept);\r\n+\t\ttc1.setTestBool(TEST_BOOL);\r\n+\t\ttc1.setTestFloat(TEST_FLOAT);\r\n+\t\ttc1.setTestEnum(TEST_ENUM_VALUE);\r\n+\t\ttc1.setTestString(TEST_STRING);\r\n+\t\ttc1.setTestInt(TEST_INT);\r\n+\t\ttc1.setTestResource(testUri);\r\n+\t\ttsei2.add(tc1);\r\n+\t\teditingDomain.getCommandStack().execute(importer.importSei(editingDomain, sei, mat));\r\n+\r\n+\t\t//checks if the same seiis imported and everything has a value, the value doesnt change\r\n+\t\tEList<APropertyInstance> caSei = sei.getCategoryAssignments().get(0).getPropertyInstances();\r\n+\t\tEList<APropertyInstance> caSei2 = sei2.getCategoryAssignments().get(0).getPropertyInstances();\r\n+\t\tassertTrue(\"same number of elements\", caSei.size() == caSei2.size());\r\n+\t\tassertEquals(\"same testString\", TEST_STRING, tc1.getTestString());\r\n+\t\tassertEquals(\"same testBool\", TEST_BOOL, tc1.getTestBool());\r\n+\t\tassertEquals(TEST_FLOAT, tc1.getTestFloat(), 0);\r\n+\t\tassertEquals(\"same testResource\", tc.getTestResource(), tc1.getTestResource());\r\n+\t\tassertEquals(\"same testEnumValue\", tc.getTestEnumBean().getValue(), tc1.getTestEnumBean().getValue());\r\n+\t\tassertEquals(\"same testEnumValue\", tc.getTestEnumBean().getUnit(), tc1.getTestEnumBean().getUnit());\r\n+\t\tassertEquals(\"same testInt\", TEST_INT, tc1.getTestInt());\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testImportOfValuesRef() throws IOException {\r\n+\t\t//Reference test target\r\n+\t\tfinal TestCategoryAllProperty TEST_REFERENCE_TARGET = new TestCategoryAllProperty(testConcept);\r\n+\t\t\r\n+\t\t//empty and import empty\r", "originalCommit": "a9848b2573d5eaba26964959168c25c5473aaa51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY0NzczMg==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/525#discussion_r395647732", "bodyText": "Done", "author": "ALEhmerDLR", "createdAt": "2020-03-20T13:48:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY0MDk4OA=="}], "type": "inlineReview"}, {"oid": "4608d3fb502a7912f03c98b91a4e2bdfda5553c0", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/4608d3fb502a7912f03c98b91a4e2bdfda5553c0", "message": "Requested changes - (Task #520)\n\n---\nTask #520: Import from Matlab", "committedDate": "2020-03-20T13:48:36Z", "type": "commit"}]}