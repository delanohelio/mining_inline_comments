{"pr_number": 747, "pr_title": "PR #1 Low Level API - Add CAs and Properties", "pr_createdAt": "2020-10-05T10:33:38Z", "pr_url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/747", "timeline": [{"oid": "fb08101bcb5a63c9238b03be83ac78e04b3d498c", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/fb08101bcb5a63c9238b03be83ac78e04b3d498c", "message": "Update ModelAccessResource - (Task #555)\n\n- Add Endpoint for for the repository\n- Add first endpoint for a test property\n- Add ModelAccessResourceTest and add this class to AllTests\n- Add abstract test case AServerRepositoryTest\n- Add CustomJsonProvider that get's injected into the\nModelAccessResource and is used to add the stateful adapters with the\ncurrent ResourceSet to the Unmarshaller\n- Register ModelAccessResource and CustomJsonProvider in the servlet\n\n---\nTask #555: Add Low Level Data API to access SEIs and CAs to REST server", "committedDate": "2020-08-05T12:31:17Z", "type": "commit"}, {"oid": "c83c896ced607c066fa2ad9a094a097b97a66032", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/c83c896ced607c066fa2ad9a094a097b97a66032", "message": "Move CustomJsonProvider - (Task #555)\n\n---\nTask #555: Add Low Level Data API to access SEIs and CAs to REST server", "committedDate": "2020-08-07T10:13:17Z", "type": "commit"}, {"oid": "120463c0ecc09d74fc821c57e05d3706f8659d3c", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/120463c0ecc09d74fc821c57e05d3706f8659d3c", "message": "Add RepositoryUtility and ITreeTraverserMatcher - (Task #555)\n\nFrom second branch.\n\n---\nTask #555: Add Low Level Data API to access SEIs and CAs to REST server", "committedDate": "2020-08-07T10:15:46Z", "type": "commit"}, {"oid": "09e6ca03238f78680ea529b2e00d08c1483d5925", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/09e6ca03238f78680ea529b2e00d08c1483d5925", "message": "Update test setup in ModelAccessResourceTest - (Task #555)\n\n---\nTask #555: Add Low Level Data API to access SEIs and CAs to REST server", "committedDate": "2020-08-07T10:16:37Z", "type": "commit"}, {"oid": "f59ed892fe1c22da8bfd49c90b69db82c4c10efc", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/f59ed892fe1c22da8bfd49c90b69db82c4c10efc", "message": "Add test cases for CAs and PUT - (Task #555)\n\n- Register classes for put:\n  - property beans: XmlSeeAlso in ABeanObject\n  - CA beans: Register classes in CustomJsonProvider\n- in ModelAccessResource add PUT CA endpoint\n- add test cases for multiple CAs to ModelAccessResource\n\n---\nTask #555: Add Low Level Data API to access SEIs and CAs to REST server", "committedDate": "2020-08-12T10:54:55Z", "type": "commit"}, {"oid": "afa29852bf5884f7f285f294af590ffc6a87176c", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/afa29852bf5884f7f285f294af590ffc6a87176c", "message": "Improve ModelAccessResourceTest cases- (Task #555)\n\n- Compare marshalled objects with JAXB marshalling\n\n---\nTask #555: Add Low Level Data API to access SEIs and CAs to REST server", "committedDate": "2020-08-14T14:37:14Z", "type": "commit"}, {"oid": "723c1ce3dbadb31c206020fc5c5eda532268ac5a", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/723c1ce3dbadb31c206020fc5c5eda532268ac5a", "message": "Add tests cases for all properties - (Task #555)\n\n- Added missing beans to BeanPropertyFactory\n- Register classes for properties in CustomJsonProvider\n\n---\nTask #555: Add Low Level Data API to access SEIs and CAs to REST server", "committedDate": "2020-08-17T10:02:10Z", "type": "commit"}, {"oid": "011e20f17d5fd2ddffdf455f88c56f75c4e11499", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/011e20f17d5fd2ddffdf455f88c56f75c4e11499", "message": "Add classes to register dynamically in CustomJsonProvider- (Task #555)\n\n---\nTask #555: Add Low Level Data API to access SEIs and CAs to REST server", "committedDate": "2020-08-18T12:29:11Z", "type": "commit"}, {"oid": "832300a7f14abd040e68b4d52b0b88bb531ed6bd", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/832300a7f14abd040e68b4d52b0b88bb531ed6bd", "message": "Fix ModelAccessResourceTest - (Task #555)\n\n- Use transactional editing domain in CustomJsonProvider\n- Refactor the ModelAccessResource for Properties\n\n---\nTask #555: Add Low Level Data API to access SEIs and CAs to REST server", "committedDate": "2020-08-19T10:54:13Z", "type": "commit"}, {"oid": "239f778c1482fa73edfa53bb17166478c1680df0", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/239f778c1482fa73edfa53bb17166478c1680df0", "message": "Add CustomJsonProviderTest and RepositoryUtilityTest - (Task #555)\n\n---\nTask #555: Add Low Level Data API to access SEIs and CAs to REST server", "committedDate": "2020-08-21T12:37:47Z", "type": "commit"}, {"oid": "30961ddc52a10511aafb7dd296d5875eeb56b32d", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/30961ddc52a10511aafb7dd296d5875eeb56b32d", "message": "Update AccessTestResourceTest - (Task #555)\n\nFix a Nullpointer in CustomJsonProvider and json format. Also update the\ncontext cash test case in CustomJsonProviderTest.\n\n---\nTask #555: Add Low Level Data API to access SEIs and CAs to REST server", "committedDate": "2020-08-24T07:57:26Z", "type": "commit"}, {"oid": "08e7fce17e3fbbd8d83351e218846502aa97f5a4", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/08e7fce17e3fbbd8d83351e218846502aa97f5a4", "message": "Resolve class hierarchy error - (Task #555)\n\n---\nTask #555: Add Low Level Data API to access SEIs and CAs to REST server", "committedDate": "2020-08-24T11:33:25Z", "type": "commit"}, {"oid": "39f71a7bcc5b701b7a901728321cf50590b9e451", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/39f71a7bcc5b701b7a901728321cf50590b9e451", "message": "Add missing import - (Task #555)\n\nTry to fix CI\n\n---\nTask #555: Add Low Level Data API to access SEIs and CAs to REST server", "committedDate": "2020-08-25T08:52:10Z", "type": "commit"}, {"oid": "985191780f313b1c84d77864862421c3e4d50b50", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/985191780f313b1c84d77864862421c3e4d50b50", "message": "Remove AConceptTest from MANIFEST - (Task #555)\n\n---\nTask #555: Add Low Level Data API to access SEIs and CAs to REST server", "committedDate": "2020-08-25T09:36:35Z", "type": "commit"}, {"oid": "c1416b0fe31f73aa3133cc9215171b60b36e1d0a", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/c1416b0fe31f73aa3133cc9215171b60b36e1d0a", "message": "Remove unwritten field in CustomJsonProviderTest - (Task #555)\n\n---\nTask #555: Add Low Level Data API to access SEIs and CAs to REST server", "committedDate": "2020-08-25T10:24:12Z", "type": "commit"}, {"oid": "ece2663d9ec08e8075f2a13da173668a9ed4bf15", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/ece2663d9ec08e8075f2a13da173668a9ed4bf15", "message": "Merge branch 'development' into feature/task_555-Add_Low_Level_Data_API_2", "committedDate": "2020-08-27T10:14:36Z", "type": "commit"}, {"oid": "56fed7f1dc6aa22e8f68cdd3b68b4fe8783616b1", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/56fed7f1dc6aa22e8f68cdd3b68b4fe8783616b1", "message": "Merge branch 'development' into feature/task_555-Add_Low_Level_Data_API_2", "committedDate": "2020-09-30T12:11:00Z", "type": "commit"}, {"oid": "20a37802b5ea1634a5db25f78943cb43d3d4546c", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/20a37802b5ea1634a5db25f78943cb43d3d4546c", "message": "Rename ReferenceAdapter to ABeanObjectAdapter - (Task #555)\n\n---\nTask #555: Add Low Level Data API to access SEIs and CAs to REST server", "committedDate": "2020-09-30T12:23:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA2MDA4Ng==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/747#discussion_r500060086", "bodyText": "We can simplify this with the executeAsCommand method in AProjectTestCase", "author": "SaMuellerDLR", "createdAt": "2020-10-06T07:27:03Z", "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/dataaccess/CustomJsonProviderTest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.server.dataaccess;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBException;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.emf.transaction.RecordingCommand;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoriesFactory;\n+import de.dlr.sc.virsat.model.dvlm.categories.Category;\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.PropertydefinitionsFactory;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesFactory;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ValuePropertyInstance;\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElement;\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralFactory;\n+import de.dlr.sc.virsat.project.test.AProjectTestCase;\n+\n+public class CustomJsonProviderTest extends AProjectTestCase {\n+\n+\tprivate CustomJsonProvider provider;\n+\tprivate BeanPropertyString testBean;\n+\tprivate Class<?> type;\n+\tprivate Set<Class<?>> beanClass = new HashSet<>();\n+\tprivate MediaType mediaType;\n+\tprivate String testString = \"test\";\n+\n+\t@Before\n+\tpublic void setUp() throws CoreException {\n+\t\tsuper.setUp();\n+\t\taddEditingDomainAndRepository();\n+\t\t\n+\t\tprovider = new CustomJsonProvider();\n+\t\tprovider.setEd(editingDomain);\n+\t\t\n+\t\tStructuralElement testSe = StructuralFactory.eINSTANCE.createStructuralElement();\n+\t\tStructuralElementInstance testSei = StructuralFactory.eINSTANCE.createStructuralElementInstance();\n+\t\tCategory testCategory = CategoriesFactory.eINSTANCE.createCategory();\n+\t\tCategoryAssignment testCa = CategoriesFactory.eINSTANCE.createCategoryAssignment();\n+\t\tStringProperty testProperty = PropertydefinitionsFactory.eINSTANCE.createStringProperty();\n+\t\tValuePropertyInstance testPropertyInstance = PropertyinstancesFactory.eINSTANCE.createValuePropertyInstance();\n+\t\t\n+\t\ttestPropertyInstance.setType(testProperty);\n+\t\t\n+\t\ttestCategory.setIsApplicableForAll(true);\n+\t\ttestCategory.getProperties().add(testProperty);\n+\t\t\n+\t\ttestCa.setType(testCategory);\n+\t\ttestCa.getPropertyInstances().add(testPropertyInstance);\n+\t\t\n+\t\ttestSe.setIsRootStructuralElement(true);\n+\t\t\n+\t\ttestSei.setType(testSe);\n+\t\ttestSei.getCategoryAssignments().add(testCa);\n+\t\ttestSei.getCategoryAssignments();\n+\t\t\n+\t\tRecordingCommand recordingCommand = new RecordingCommand(editingDomain) {", "originalCommit": "20a37802b5ea1634a5db25f78943cb43d3d4546c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU0OTg1NA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/747#discussion_r507549854", "bodyText": "Yes I changed it", "author": "JAmmermann-DLR", "createdAt": "2020-10-19T08:05:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA2MDA4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA2MTE2Mw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/747#discussion_r500061163", "bodyText": "Dont we have some helper function/helper assert that takes care of the whitespaces?", "author": "SaMuellerDLR", "createdAt": "2020-10-06T07:28:56Z", "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/resources/AccessTestResourceTest.java", "diffHunk": "@@ -59,6 +59,6 @@ public void testServerConnection() {\n \t\tString expectedJson = \"{\\\"UUID\\\":\\\"data\\\"}\";\r\n \t\t\r\n \t\tassertEquals(\"Server response is correct\", expectedResponse, serverResponse);\r\n-\t\tassertEquals(\"Server json paylaod is correct\", expectedJson, serverJson);\r\n+\t\tassertEquals(\"Server json paylaod is correct\", expectedJson, serverJson.replaceAll(\"\\\\s+\", \"\"));\r", "originalCommit": "20a37802b5ea1634a5db25f78943cb43d3d4546c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU1MjIwOQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/747#discussion_r507552209", "bodyText": "I now use the method from de.dlr.sc.virsat.model.extension.tests.test.TestActivator. But I am not sure if that is better", "author": "JAmmermann-DLR", "createdAt": "2020-10-19T08:09:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA2MTE2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM1MjY4MA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/747#discussion_r508352680", "bodyText": "I reverted the changes above because this class is deprecated and has to be deleted in #597 anyways", "author": "JAmmermann-DLR", "createdAt": "2020-10-20T09:33:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA2MTE2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4MjAwMQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/747#discussion_r500082001", "bodyText": "Superflous printout statements", "author": "SaMuellerDLR", "createdAt": "2020-10-06T08:05:11Z", "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/resources/ModelAccessResourceTest.java", "diffHunk": "@@ -0,0 +1,432 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.server.resources;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+\n+import java.io.StringWriter;\n+\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import javax.xml.bind.JAXBException;\n+\n+import org.eclipse.emf.transaction.RecordingCommand;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.concept.list.IBeanList;\n+import de.dlr.sc.virsat.model.concept.types.IBeanObject;\n+import de.dlr.sc.virsat.model.concept.types.category.IBeanCategoryAssignment;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyComposed;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyReference;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryBeanA;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryComposition;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryCompositionArray;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryIntrinsicArray;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryReference;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryReferenceArray;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestStructuralElement;\n+import de.dlr.sc.virsat.project.editingDomain.VirSatTransactionalEditingDomain;\n+import de.dlr.sc.virsat.project.resources.VirSatResourceSet;\n+import de.dlr.sc.virsat.server.test.AServerRepositoryTest;\n+\n+public class ModelAccessResourceTest extends AServerRepositoryTest {\n+\n+\tprivate Concept conceptTest;\n+\tprivate VirSatResourceSet resourceSet;\n+\t\n+\tprivate TestStructuralElement tSei;\n+\t\n+\tprivate TestCategoryAllProperty tcAllProperty;\n+\tprivate TestCategoryBeanA tcBeanA;\n+\tprivate TestCategoryComposition tcComposition;\n+\tprivate TestCategoryReference tcReference;\n+\tprivate TestCategoryIntrinsicArray tcIntrinsicArray;\n+\tprivate TestCategoryCompositionArray tcCompositionArray;\n+\tprivate TestCategoryReferenceArray tcReferenceArray;\n+\t\n+\tprivate BeanPropertyString tString;\n+\tprivate BeanPropertyBoolean tBool;\n+\tprivate BeanPropertyEnum tEnum;\n+\tprivate BeanPropertyFloat tFloat;\n+\tprivate BeanPropertyInt tInt;\n+\tprivate BeanPropertyResource tResource;\n+\tprivate BeanPropertyReference<BeanPropertyString> tReferenceProp;\n+\tprivate BeanPropertyComposed<TestCategoryAllProperty> tComposed;\n+\tprivate BeanPropertyReference<TestCategoryAllProperty> tReferenceCa;\n+\n+\tprivate static final String TEST_STRING = \"testString\";\n+\t\n+\t@Before\n+\tpublic void setUpModel() throws Exception {\n+\n+\t\tVirSatTransactionalEditingDomain ed = testServerRepository.getEd();\n+\t\tresourceSet = ed.getResourceSet();\n+\n+\t\tconceptTest = loadConceptFromPlugin(\"de.dlr.sc.virsat.model.extension.tests\");\n+\t\t\n+\t\t// Create various test categories\n+\t\ttcAllProperty = new TestCategoryAllProperty(conceptTest);\n+\t\ttcBeanA = new TestCategoryBeanA(conceptTest);\n+\t\ttcComposition = new TestCategoryComposition(conceptTest);\n+\t\ttcReference = new TestCategoryReference(conceptTest);\n+\t\ttcIntrinsicArray = new TestCategoryIntrinsicArray(conceptTest);\n+\t\ttcCompositionArray = new TestCategoryCompositionArray(conceptTest);\n+\t\ttcReferenceArray = new TestCategoryReferenceArray(conceptTest);\n+\n+\t\t// Add them to a sei\n+\t\ttSei = new TestStructuralElement(conceptTest);\n+\t\ttSei.add(tcAllProperty);\n+\t\ttSei.add(tcBeanA);\n+\t\ttSei.add(tcComposition);\n+\t\ttSei.add(tcReference);\n+\t\ttSei.add(tcIntrinsicArray);\n+\t\ttSei.add(tcCompositionArray);\n+\t\ttSei.add(tcReferenceArray);\n+\n+\t\tStructuralElementInstance sei = tSei.getStructuralElementInstance();\n+\t\t\n+\t\ttString = tcAllProperty.getTestStringBean();\n+\t\ttBool = tcAllProperty.getTestBoolBean();\n+\t\ttEnum = tcAllProperty.getTestEnumBean();\n+\t\ttFloat = tcAllProperty.getTestFloatBean();\n+\t\ttInt = tcAllProperty.getTestIntBean();\n+\t\ttResource = tcAllProperty.getTestResourceBean();\n+\t\ttReferenceProp = tcReference.getTestRefPropertyBean();\n+\t\ttReferenceCa = tcReference.getTestRefCategoryBean();\n+\t\ttComposed = tcComposition.getTestSubCategoryBean();\n+\t\t\n+\t\ttcReference.setTestRefProperty(tString);\n+\t\ttcReference.setTestRefCategory(tcAllProperty);\n+\t\tIBeanList<BeanPropertyReference<TestCategoryAllProperty>> catArray = tcReferenceArray.getTestCategoryReferenceArrayStaticBean();\n+\t\tfor (BeanPropertyReference<TestCategoryAllProperty> element : catArray) {\n+\t\t\telement.setValue(tcAllProperty);\n+\t\t}\n+\t\tIBeanList<BeanPropertyReference<BeanPropertyString>> propArray = tcReferenceArray.getTestPropertyReferenceArrayStaticBean();\n+\t\tfor (BeanPropertyReference<BeanPropertyString> element : propArray) {\n+\t\t\telement.setValue(tString);\n+\t\t}\n+\t\t\n+\t\tRecordingCommand recordingCommand = new RecordingCommand(ed) {\n+\t\t\t@Override\n+\t\t\tprotected void doExecute() {\n+\t\t\t\ted.getResourceSet().getRepository().getActiveConcepts().add(conceptTest);\n+\t\t\t\ted.getResourceSet().getRepository().getRootEntities().add(sei);\n+\t\t\t\tresourceSet.getAndAddStructuralElementInstanceResource(sei);\n+\t\t\t}\n+\t\t};\n+\t\ted.getCommandStack().execute(recordingCommand);\n+\t}\n+\t\n+\t/*\n+\t * Test GET various elements\n+\t */\n+\t\n+\t/**\n+\t * Get a testSubject at a path from the server\n+\t * Then marshall it manually via the JAXBUtility using the classes\n+\t * Assert that server json and manual marshalled json are equal\n+\t * @param testSubject the subject to be tested\n+\t * @param path the path in the ModelAccessResource\n+\t * @param classes the classes required for marshalling\n+\t * @throws JAXBException\n+\t */\n+\t@SuppressWarnings(\"rawtypes\")\n+\tprivate void testGet(IBeanObject testSubject, String path, Class[] classes) throws JAXBException {\n+\t\tString uuid = testSubject.getUuid();\n+\t\tResponse response = webTarget.path(ModelAccessResource.PATH)\n+\t\t\t\t.path(projectName)\n+\t\t\t\t.path(path)\n+\t\t\t\t.path(uuid)\n+\t\t\t\t.request()\n+\t\t\t\t.get();\n+\t\t\n+\t\tassertEquals(HttpStatus.OK_200, response.getStatus());\n+\t\t\n+\t\tString entity = webTarget.path(ModelAccessResource.PATH)\n+\t\t\t\t.path(projectName)\n+\t\t\t\t.path(path)\n+\t\t\t\t.path(uuid)\n+\t\t\t\t.request()\n+\t\t\t\t.get(String.class);\n+\t\t\n+\t\t// Compare with the expected\n+\t\tJAXBUtility jaxbUtility = new JAXBUtility(classes);\n+\t\tStringWriter sw = new StringWriter();\n+\t\tjaxbUtility.getJsonMarshaller().marshal(testSubject, sw);\n+\t\tString expected = sw.toString();\n+\t\tassertEquals(\"Marshalled object as expected\", expected, entity);\n+\t}\n+\t\n+\t@SuppressWarnings(\"rawtypes\")\n+\tprivate void testGetProperty(IBeanObject testSubject) throws JAXBException {\n+\t\ttestGet(testSubject, ModelAccessResource.PROPERTY, new Class[] {testSubject.getClass()});\n+\t}\n+\t\n+\t@SuppressWarnings(\"rawtypes\")\n+\tprivate void testGetProperty(IBeanObject testSubject, Class[] classes) throws JAXBException {\n+\t\ttestGet(testSubject, ModelAccessResource.PROPERTY, classes);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPropertyStringGet() throws JAXBException {\n+\t\ttestGetProperty(tString);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPropertyBoolGet() throws JAXBException {\n+\t\ttestGetProperty(tBool);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPropertyEnumGet() throws JAXBException {\n+\t\ttestGetProperty(tEnum);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPropertyFloatGet() throws JAXBException {\n+\t\ttestGetProperty(tFloat);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPropertyIntGet() throws JAXBException {\n+\t\ttestGetProperty(tInt);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPropertyResourceGet() throws JAXBException {\n+\t\ttestGetProperty(tResource);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPropertyReferenceGet() throws JAXBException {\n+\t\ttestGetProperty(tReferenceProp, new Class[] {tReferenceProp.getClass(), tString.getClass()});\n+\t\ttestGetProperty(tReferenceCa, new Class[] {tReferenceProp.getClass(), tcAllProperty.getClass()});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPropertyComposedGet() throws JAXBException {\n+\t\ttestGetProperty(tComposed, new Class[] {tComposed.getClass(), tcAllProperty.getClass()});\n+\t}\n+\t\n+\t@SuppressWarnings(\"rawtypes\")\n+\tprivate void testGetCa(IBeanObject testSubject) throws JAXBException {\n+\t\ttestGet(testSubject, ModelAccessResource.CA, new Class[] {testSubject.getClass()});\n+\t}\n+\t\n+\t@SuppressWarnings(\"rawtypes\")\n+\tprivate void testGetCa(IBeanObject testSubject, Class[] classes) throws JAXBException {\n+\t\ttestGet(testSubject, ModelAccessResource.CA, classes);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testCaAllPropertyGet() throws JAXBException {\n+\t\ttestGetCa(tcAllProperty);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testCaBeanAGet() throws JAXBException {\n+\t\ttestGetCa(tcBeanA);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testCaCompositionGet() throws JAXBException {\n+\t\ttestGetCa(tcComposition);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testCaRefernceGet() throws JAXBException {\n+\t\ttestGetCa(tcReference);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testCaIntrinsicArrayGet() throws JAXBException {\n+\t\ttestGetCa(tcIntrinsicArray);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testCaCompositionArrayGet() throws JAXBException {\n+\t\ttestGetCa(tcCompositionArray, new Class[] {tcCompositionArray.getClass(), tcAllProperty.getClass()});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testCaReferenceArrayGet() throws JAXBException {\n+\t\ttestGetCa(tcReferenceArray);\n+\t}\n+\t\n+\t/*\n+\t * Test PUT various elements\n+\t */\n+\t@Test\n+\tpublic void testPropertyStringPutChangesModel() throws JAXBException {\n+\t\t\n+\t\t// Manually marshall the Class to edit the json\n+\t\tJAXBUtility jaxbUtility = new JAXBUtility(new Class[] {BeanPropertyString.class});\n+\t\tStringWriter sw = new StringWriter();\n+\t\tjaxbUtility.getJsonMarshaller().marshal(tString, sw);\n+\t\tString jsonIn = sw.toString();\n+\t\tSystem.out.println(jsonIn);\n+\t\tjsonIn = jsonIn.replace(\"null\", \"\\\"testString\\\"\");\n+\t\tSystem.out.println(jsonIn);", "originalCommit": "20a37802b5ea1634a5db25f78943cb43d3d4546c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU1Mjg5NA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/747#discussion_r507552894", "bodyText": "Deleted", "author": "JAmmermann-DLR", "createdAt": "2020-10-19T08:10:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4MjAwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4Mjg0Mw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/747#discussion_r500082843", "bodyText": "Hmm I guess the t stands for test, but that isnt a 100% clear. Maybe we can rename these to beanString, etc? In the above variables I think its fine because the \"Test\" actually part of the class name. So when I see tString I first thought we somehow have a class TestString. So this might be a bit misleading.", "author": "SaMuellerDLR", "createdAt": "2020-10-06T08:06:34Z", "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/resources/ModelAccessResourceTest.java", "diffHunk": "@@ -0,0 +1,432 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.server.resources;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+\n+import java.io.StringWriter;\n+\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import javax.xml.bind.JAXBException;\n+\n+import org.eclipse.emf.transaction.RecordingCommand;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.concept.list.IBeanList;\n+import de.dlr.sc.virsat.model.concept.types.IBeanObject;\n+import de.dlr.sc.virsat.model.concept.types.category.IBeanCategoryAssignment;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyComposed;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyReference;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryBeanA;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryComposition;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryCompositionArray;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryIntrinsicArray;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryReference;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryReferenceArray;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestStructuralElement;\n+import de.dlr.sc.virsat.project.editingDomain.VirSatTransactionalEditingDomain;\n+import de.dlr.sc.virsat.project.resources.VirSatResourceSet;\n+import de.dlr.sc.virsat.server.test.AServerRepositoryTest;\n+\n+public class ModelAccessResourceTest extends AServerRepositoryTest {\n+\n+\tprivate Concept conceptTest;\n+\tprivate VirSatResourceSet resourceSet;\n+\t\n+\tprivate TestStructuralElement tSei;\n+\t\n+\tprivate TestCategoryAllProperty tcAllProperty;\n+\tprivate TestCategoryBeanA tcBeanA;\n+\tprivate TestCategoryComposition tcComposition;\n+\tprivate TestCategoryReference tcReference;\n+\tprivate TestCategoryIntrinsicArray tcIntrinsicArray;\n+\tprivate TestCategoryCompositionArray tcCompositionArray;\n+\tprivate TestCategoryReferenceArray tcReferenceArray;\n+\t\n+\tprivate BeanPropertyString tString;", "originalCommit": "20a37802b5ea1634a5db25f78943cb43d3d4546c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU1MjcxMg==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/747#discussion_r507552712", "bodyText": "Renamed to beanString", "author": "JAmmermann-DLR", "createdAt": "2020-10-19T08:10:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4Mjg0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4NDg4Mw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/747#discussion_r500084883", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tPath pathRepoRemote = null;\n          \n          \n            \n            \t\tFile localRepoHome = null;\n          \n          \n            \n            \t\tpathRepoRemote = VirSatFileUtils.createAutoDeleteTempDirectory(\"VirtualSatelliteGitRemote_\");\n          \n          \n            \n            \t\tlocalRepoHome = VirSatFileUtils.createAutoDeleteTempDirectory(\"VirtualSatelliteLocalRepoHome_\").toFile();\n          \n          \n            \n            Path pathRepoRemote = VirSatFileUtils.createAutoDeleteTempDirectory(\"VirtualSatelliteGitRemote_\");\n          \n          \n            \n            File localRepoHome = VirSatFileUtils.createAutoDeleteTempDirectory(\"VirtualSatelliteLocalRepoHome_\").toFile();", "author": "SaMuellerDLR", "createdAt": "2020-10-06T08:10:00Z", "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/test/AServerRepositoryTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.server.test;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+\n+import org.eclipse.jgit.api.Git;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+\n+import de.dlr.sc.virsat.commons.file.VirSatFileUtils;\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\n+import de.dlr.sc.virsat.server.repository.RepoRegistry;\n+import de.dlr.sc.virsat.server.repository.ServerRepository;\n+import de.dlr.sc.virsat.team.VersionControlSystem;\n+\n+public abstract class AServerRepositoryTest extends AGitAndJettyServerTest {\n+\n+\tprotected static ServerRepository testServerRepository;\n+\tprotected static String projectName;\n+\n+\t@BeforeClass\n+\tpublic static void addServerRepository() throws Exception {\n+\t\tPath pathRepoRemote = null;\n+\t\tFile localRepoHome = null;\n+\t\tpathRepoRemote = VirSatFileUtils.createAutoDeleteTempDirectory(\"VirtualSatelliteGitRemote_\");\n+\t\tlocalRepoHome = VirSatFileUtils.createAutoDeleteTempDirectory(\"VirtualSatelliteLocalRepoHome_\").toFile();", "originalCommit": "20a37802b5ea1634a5db25f78943cb43d3d4546c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU1Mzc4NQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/747#discussion_r507553785", "bodyText": "Changed", "author": "JAmmermann-DLR", "createdAt": "2020-10-19T08:12:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4NDg4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4NjkzMg==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/747#discussion_r500086932", "bodyText": "This line being uncovered seems weird.", "author": "SaMuellerDLR", "createdAt": "2020-10-06T08:13:18Z", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/dataaccess/RepositoryUtility.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.server.dataaccess;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.emf.common.util.EList;\n+import org.eclipse.emf.ecore.EObject;\n+\n+import de.dlr.sc.virsat.model.dvlm.Repository;\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.dvlm.general.IUuid;\n+import de.dlr.sc.virsat.model.dvlm.roles.Discipline;\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElement;\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\n+import de.dlr.sc.virsat.model.dvlm.tree.ITreeTraverserMatcher;\n+import de.dlr.sc.virsat.model.dvlm.tree.TreeTraverser;\n+\n+public class RepositoryUtility {\n+\n+\tprivate RepositoryUtility() { }\n+\n+\t/**\n+\t * Traverses a Repository and all Seis\n+\t */\n+\tstatic class UuidTraverser implements ITreeTraverserMatcher<IUuid> {\n+\n+\t\t@Override\n+\t\tpublic boolean isMatching(IUuid treeNode) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void processMatch(IUuid treeNode, IUuid matchingParent) {\n+\t\t\t// Will be handled in isMatching\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Collection<? extends IUuid> getChildren(IUuid treeNode) {\n+\t\t\tif (treeNode instanceof Repository) {\n+\t\t\t\treturn ((Repository) treeNode).getRootEntities();\n+\t\t\t} else if (treeNode instanceof StructuralElementInstance) {\n+\t\t\t\treturn ((StructuralElementInstance) treeNode).getChildren();\n+\t\t\t}\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\t/**\n+\t * Finds a sei instance by it's uuid\n+\t * @param uuid the seis uuid\n+\t * @return the StructuralElementInstance or null\n+\t * @throws CoreException\n+\t */\n+\tpublic static StructuralElementInstance findSei(String uuid, Repository repository) throws CoreException {\n+\t\t\n+\t\tList<StructuralElementInstance> match = new ArrayList<StructuralElementInstance>(); \n+\t\t\n+\t\tTreeTraverser<IUuid> traverser = new TreeTraverser<IUuid>();\n+\t\ttraverser.traverse(repository, new UuidTraverser() {\n+\t\t\t@Override\n+\t\t\tpublic boolean isMatching(IUuid treeNode) {\n+\t\t\t\tboolean isMatching = treeNode.getUuid().toString().equals(uuid);\n+\t\t\t\t\n+\t\t\t\tif (isMatching) {\n+\t\t\t\t\tmatch.add((StructuralElementInstance) treeNode);\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\treturn isMatching;\n+\t\t\t}\n+\t\t});\n+\t\t\n+\t\tif (match.isEmpty()) {\n+\t\t\treturn null;", "originalCommit": "20a37802b5ea1634a5db25f78943cb43d3d4546c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU1MTMyNw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/747#discussion_r507551327", "bodyText": "Is now covered", "author": "JAmmermann-DLR", "createdAt": "2020-10-19T08:08:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4NjkzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4NzA3OQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/747#discussion_r500087079", "bodyText": "Same as above.", "author": "SaMuellerDLR", "createdAt": "2020-10-06T08:13:32Z", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/dataaccess/RepositoryUtility.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.server.dataaccess;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.emf.common.util.EList;\n+import org.eclipse.emf.ecore.EObject;\n+\n+import de.dlr.sc.virsat.model.dvlm.Repository;\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.dvlm.general.IUuid;\n+import de.dlr.sc.virsat.model.dvlm.roles.Discipline;\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElement;\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\n+import de.dlr.sc.virsat.model.dvlm.tree.ITreeTraverserMatcher;\n+import de.dlr.sc.virsat.model.dvlm.tree.TreeTraverser;\n+\n+public class RepositoryUtility {\n+\n+\tprivate RepositoryUtility() { }\n+\n+\t/**\n+\t * Traverses a Repository and all Seis\n+\t */\n+\tstatic class UuidTraverser implements ITreeTraverserMatcher<IUuid> {\n+\n+\t\t@Override\n+\t\tpublic boolean isMatching(IUuid treeNode) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void processMatch(IUuid treeNode, IUuid matchingParent) {\n+\t\t\t// Will be handled in isMatching\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Collection<? extends IUuid> getChildren(IUuid treeNode) {\n+\t\t\tif (treeNode instanceof Repository) {\n+\t\t\t\treturn ((Repository) treeNode).getRootEntities();\n+\t\t\t} else if (treeNode instanceof StructuralElementInstance) {\n+\t\t\t\treturn ((StructuralElementInstance) treeNode).getChildren();\n+\t\t\t}\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\t/**\n+\t * Finds a sei instance by it's uuid\n+\t * @param uuid the seis uuid\n+\t * @return the StructuralElementInstance or null\n+\t * @throws CoreException\n+\t */\n+\tpublic static StructuralElementInstance findSei(String uuid, Repository repository) throws CoreException {\n+\t\t\n+\t\tList<StructuralElementInstance> match = new ArrayList<StructuralElementInstance>(); \n+\t\t\n+\t\tTreeTraverser<IUuid> traverser = new TreeTraverser<IUuid>();\n+\t\ttraverser.traverse(repository, new UuidTraverser() {\n+\t\t\t@Override\n+\t\t\tpublic boolean isMatching(IUuid treeNode) {\n+\t\t\t\tboolean isMatching = treeNode.getUuid().toString().equals(uuid);\n+\t\t\t\t\n+\t\t\t\tif (isMatching) {\n+\t\t\t\t\tmatch.add((StructuralElementInstance) treeNode);\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\treturn isMatching;\n+\t\t\t}\n+\t\t});\n+\t\t\n+\t\tif (match.isEmpty()) {\n+\t\t\treturn null;\n+\t\t} else {\n+\t\t\treturn match.get(0);\n+\t\t}\n+\t}\n+\t\n+\t/**\n+\t * Iterates over all seis in the repository and matches the uuid on eobject level\n+\t * @param uuid\n+\t * @param repository\n+\t * @return\n+\t */\n+\tpublic static IUuid findObjectById(String uuid, Repository repository) {\n+\t\tList<IUuid> match = new ArrayList<IUuid>(); \n+\t\t\n+\t\tTreeTraverser<IUuid> traverser = new TreeTraverser<IUuid>();\n+\t\ttraverser.traverse(repository, new UuidTraverser() {\n+\t\t\t@Override\n+\t\t\tpublic boolean isMatching(IUuid treeNode) {\n+\t\t\t\tboolean isMatching = false;\n+\t\t\t\t\n+\t\t\t\tif (treeNode instanceof StructuralElementInstance) {\n+\t\t\t\t\tEObject objByUuid = treeNode.eResource().getEObject(uuid);\n+\t\t\t\t\tisMatching = objByUuid != null;\n+\t\t\t\t\tif (isMatching) {\n+\t\t\t\t\t\tmatch.add((IUuid) objByUuid);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\treturn isMatching;\n+\t\t\t}\n+\t\t});\n+\t\t\n+\t\tif (match.isEmpty()) {\n+\t\t\treturn null;", "originalCommit": "20a37802b5ea1634a5db25f78943cb43d3d4546c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU1MTM5Nw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/747#discussion_r507551397", "bodyText": "Is now covered", "author": "JAmmermann-DLR", "createdAt": "2020-10-19T08:08:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4NzA3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4NzMyMg==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/747#discussion_r500087322", "bodyText": "There generaly should also be test cases that do not find the requested object.", "author": "SaMuellerDLR", "createdAt": "2020-10-06T08:13:58Z", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/dataaccess/RepositoryUtility.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.server.dataaccess;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.emf.common.util.EList;\n+import org.eclipse.emf.ecore.EObject;\n+\n+import de.dlr.sc.virsat.model.dvlm.Repository;\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.dvlm.general.IUuid;\n+import de.dlr.sc.virsat.model.dvlm.roles.Discipline;\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElement;\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\n+import de.dlr.sc.virsat.model.dvlm.tree.ITreeTraverserMatcher;\n+import de.dlr.sc.virsat.model.dvlm.tree.TreeTraverser;\n+\n+public class RepositoryUtility {\n+\n+\tprivate RepositoryUtility() { }\n+\n+\t/**\n+\t * Traverses a Repository and all Seis\n+\t */\n+\tstatic class UuidTraverser implements ITreeTraverserMatcher<IUuid> {\n+\n+\t\t@Override\n+\t\tpublic boolean isMatching(IUuid treeNode) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void processMatch(IUuid treeNode, IUuid matchingParent) {\n+\t\t\t// Will be handled in isMatching\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Collection<? extends IUuid> getChildren(IUuid treeNode) {\n+\t\t\tif (treeNode instanceof Repository) {\n+\t\t\t\treturn ((Repository) treeNode).getRootEntities();\n+\t\t\t} else if (treeNode instanceof StructuralElementInstance) {\n+\t\t\t\treturn ((StructuralElementInstance) treeNode).getChildren();\n+\t\t\t}\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\t/**\n+\t * Finds a sei instance by it's uuid\n+\t * @param uuid the seis uuid\n+\t * @return the StructuralElementInstance or null\n+\t * @throws CoreException\n+\t */\n+\tpublic static StructuralElementInstance findSei(String uuid, Repository repository) throws CoreException {\n+\t\t\n+\t\tList<StructuralElementInstance> match = new ArrayList<StructuralElementInstance>(); \n+\t\t\n+\t\tTreeTraverser<IUuid> traverser = new TreeTraverser<IUuid>();\n+\t\ttraverser.traverse(repository, new UuidTraverser() {\n+\t\t\t@Override\n+\t\t\tpublic boolean isMatching(IUuid treeNode) {\n+\t\t\t\tboolean isMatching = treeNode.getUuid().toString().equals(uuid);\n+\t\t\t\t\n+\t\t\t\tif (isMatching) {\n+\t\t\t\t\tmatch.add((StructuralElementInstance) treeNode);\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\treturn isMatching;\n+\t\t\t}\n+\t\t});\n+\t\t\n+\t\tif (match.isEmpty()) {\n+\t\t\treturn null;\n+\t\t} else {\n+\t\t\treturn match.get(0);\n+\t\t}\n+\t}\n+\t\n+\t/**\n+\t * Iterates over all seis in the repository and matches the uuid on eobject level\n+\t * @param uuid\n+\t * @param repository\n+\t * @return\n+\t */\n+\tpublic static IUuid findObjectById(String uuid, Repository repository) {\n+\t\tList<IUuid> match = new ArrayList<IUuid>(); \n+\t\t\n+\t\tTreeTraverser<IUuid> traverser = new TreeTraverser<IUuid>();\n+\t\ttraverser.traverse(repository, new UuidTraverser() {\n+\t\t\t@Override\n+\t\t\tpublic boolean isMatching(IUuid treeNode) {\n+\t\t\t\tboolean isMatching = false;\n+\t\t\t\t\n+\t\t\t\tif (treeNode instanceof StructuralElementInstance) {\n+\t\t\t\t\tEObject objByUuid = treeNode.eResource().getEObject(uuid);\n+\t\t\t\t\tisMatching = objByUuid != null;\n+\t\t\t\t\tif (isMatching) {\n+\t\t\t\t\t\tmatch.add((IUuid) objByUuid);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\treturn isMatching;\n+\t\t\t}\n+\t\t});\n+\t\t\n+\t\tif (match.isEmpty()) {\n+\t\t\treturn null;\n+\t\t} else {\n+\t\t\treturn match.get(0);\n+\t\t}\n+\t}\n+\t\n+\t/**\n+\t * Finds a ca instance by it's uuid\n+\t * @param uuid the cas uuid\n+\t * @return the CategoryAssignment or null\n+\t * @throws CoreException\n+\t */\n+\tpublic static CategoryAssignment findCa(String uuid, Repository repository) {\n+\t\tIUuid obj = findObjectById(uuid, repository);\n+\t\tif (obj instanceof CategoryAssignment) {\n+\t\t\treturn (CategoryAssignment) obj;\n+\t\t}\n+\t\t\n+\t\treturn null;", "originalCommit": "20a37802b5ea1634a5db25f78943cb43d3d4546c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU1MTU5Mg==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/747#discussion_r507551592", "bodyText": "I added the tests", "author": "JAmmermann-DLR", "createdAt": "2020-10-19T08:08:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4NzMyMg=="}], "type": "inlineReview"}, {"oid": "a00385a08dfb61592e57db4d4e272e7c682ec7ea", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/a00385a08dfb61592e57db4d4e272e7c682ec7ea", "message": "Changes due to review - (Task #555)\n\n---\nTask #555: Add Low Level Data API to access SEIs and CAs to REST server", "committedDate": "2020-10-08T15:12:20Z", "type": "commit"}, {"oid": "1a47c8beba5bcc3e9fe05510148e04b92ea7d2e9", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/1a47c8beba5bcc3e9fe05510148e04b92ea7d2e9", "message": "Resolve codebeat error - (Task #555)\n\nRemove instance variables from RecordingCommand constructor.\n\n---\nTask #555: Add Low Level Data API to access SEIs and CAs to REST server", "committedDate": "2020-10-19T09:02:42Z", "type": "commit"}, {"oid": "8e4813f6ee7a7eeb8171f556a8b4d45625be8947", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/8e4813f6ee7a7eeb8171f556a8b4d45625be8947", "message": "Add ReadFromArguments to resolve code beat issue - (Task #555)\n\nAlso revert changes in AccessTestResourceTest.\n\n---\nTask #555: Add Low Level Data API to access SEIs and CAs to REST server", "committedDate": "2020-10-20T09:31:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM2MDE3Mg==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/747#discussion_r508360172", "bodyText": "Something is off with the exceptions. They are instantiated here, not passed to the readFromCommand and then the readFromCommand has its own exception data.\nMaybe we can simplify this by\n\nCompletely moving the exception objects into the ReadFromCommand\nMaking a throwExceptionsIfSet() method in the ReadFromCommand that deals with throwing the indificual exceptions when needed", "author": "SaMuellerDLR", "createdAt": "2020-10-20T09:44:34Z", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/dataaccess/CustomJsonProvider.java", "diffHunk": "@@ -113,27 +113,78 @@ public Object readFrom(Class<Object> type, Type genericType, Annotation[] annota\n \t\tAtomicExceptionReference<IOException> atomicIoException = new AtomicExceptionReference<>();", "originalCommit": "8e4813f6ee7a7eeb8171f556a8b4d45625be8947", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3NTAwNQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/747#discussion_r508375005", "bodyText": "You are right this got messed up, I will change it", "author": "JAmmermann-DLR", "createdAt": "2020-10-20T10:07:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM2MDE3Mg=="}], "type": "inlineReview"}, {"oid": "b72036f72616a9dd7e99afb05407aa53b85e404e", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/b72036f72616a9dd7e99afb05407aa53b85e404e", "message": "Fix exception handling in ReadFromCommand - (Task #555)\n\n---\nTask #555: Add Low Level Data API to access SEIs and CAs to REST server", "committedDate": "2020-10-20T10:15:16Z", "type": "commit"}, {"oid": "3552a2bb24f1269463049b2c2abd2e92f33ba2c7", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/3552a2bb24f1269463049b2c2abd2e92f33ba2c7", "message": "Make ReadFromArguments static to fix spotbugs error - (Task #555)\n\n---\nTask #555: Add Low Level Data API to access SEIs and CAs to REST server", "committedDate": "2020-10-20T11:02:03Z", "type": "commit"}, {"oid": "2de874eac1106af361c8c20f68b180531f4ae77b", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/2de874eac1106af361c8c20f68b180531f4ae77b", "message": "Code beat increase number of instance variables- (Task #555)\n\n---\nTask #555: Add Low Level Data API to access SEIs and CAs to REST server", "committedDate": "2020-10-21T08:51:20Z", "type": "commit"}, {"oid": "d199e1f2b21bdd091b3d91da99641693f1bdc7c5", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/d199e1f2b21bdd091b3d91da99641693f1bdc7c5", "message": "Merge branch 'development' into feature/task_555-Add_Low_Level_Data_API_2", "committedDate": "2020-10-21T09:06:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIyOTc4NQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/747#discussion_r509229785", "bodyText": "No newline", "author": "andriikovalov-dlr", "createdAt": "2020-10-21T12:19:07Z", "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/test/AServerRepositoryTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.server.test;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+\n+import org.eclipse.jgit.api.Git;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+\n+import de.dlr.sc.virsat.commons.file.VirSatFileUtils;\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\n+import de.dlr.sc.virsat.server.repository.RepoRegistry;\n+import de.dlr.sc.virsat.server.repository.ServerRepository;\n+import de.dlr.sc.virsat.team.VersionControlSystem;\n+\n+public abstract class AServerRepositoryTest extends AGitAndJettyServerTest {\n+\n+\tprotected static ServerRepository testServerRepository;\n+\tprotected static String projectName;\n+\n+\t@BeforeClass\n+\tpublic static void addServerRepository() throws Exception {\n+\t\tPath pathRepoRemote = VirSatFileUtils.createAutoDeleteTempDirectory(\"VirtualSatelliteGitRemote_\");\n+\t\tFile localRepoHome = VirSatFileUtils.createAutoDeleteTempDirectory(\"VirtualSatelliteLocalRepoHome_\").toFile();\n+\t\tFile fileGitRemoteRepo = pathRepoRemote.toFile();\n+\t\tGit.init().setDirectory(fileGitRemoteRepo).setBare(true).call();\n+\n+\t\t// Create a repository configuration\n+\t\tprojectName = \"testProject\";\n+\t\tString uri = pathRepoRemote.toUri().toString();\n+\t\tVersionControlSystem backend = VersionControlSystem.GIT;\n+\t\tString username = \"\";\n+\t\tString password = \"\";\n+\t\tString localPath = \"\";\n+\n+\t\tRepositoryConfiguration testProjectConfiguration = new RepositoryConfiguration(projectName, localPath, uri, backend, username, password);\n+\n+\t\ttestServerRepository = new ServerRepository(\n+\t\t\t localRepoHome, \n+\t\t\t testProjectConfiguration);\n+\n+\t\ttestServerRepository.checkoutRepository();\n+\t}\n+\n+\t@Before\n+\tpublic void addRepoToRegistry() {\n+\t\t// AGitAndJettyServerTest clears the RepoRegistry in the @After method so we have to create the mapping every time\n+\t\tRepoRegistry.getInstance().addRepository(projectName, testServerRepository);\n+\t}\n+\n+}", "originalCommit": "d199e1f2b21bdd091b3d91da99641693f1bdc7c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMyMTIyNA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/747#discussion_r510321224", "bodyText": "No newline", "author": "andriikovalov-dlr", "createdAt": "2020-10-22T17:04:10Z", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/dataaccess/CustomJsonProvider.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.server.dataaccess;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.ext.Provider;\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.bind.ValidationEventHandler;\n+import javax.xml.bind.helpers.DefaultValidationEventHandler;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.emf.transaction.RecordingCommand;\n+import org.eclipse.emf.transaction.TransactionalEditingDomain;\n+import org.glassfish.jersey.moxy.json.internal.ConfigurableMoxyJsonProvider;\n+\n+import de.dlr.sc.virsat.commons.exception.AtomicExceptionReference;\n+import de.dlr.sc.virsat.model.concept.types.category.IBeanCategoryAssignment;\n+import de.dlr.sc.virsat.model.concept.types.factory.BeanCategoryAssignmentFactory;\n+import de.dlr.sc.virsat.model.dvlm.categories.Category;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.dvlm.json.ABeanObjectAdapter;\n+import de.dlr.sc.virsat.model.dvlm.json.TypeInstanceAdapter;\n+import de.dlr.sc.virsat.project.editingDomain.VirSatTransactionalEditingDomain;\n+import de.dlr.sc.virsat.project.resources.VirSatResourceSet;\n+\n+@Provider\n+@Produces(MediaType.APPLICATION_JSON)\n+@Consumes(MediaType.APPLICATION_JSON)\n+public class CustomJsonProvider extends ConfigurableMoxyJsonProvider {\n+\t\n+\tprivate ValidationEventHandler eventHandler;\n+\n+\tprivate VirSatTransactionalEditingDomain ed;\n+\tprivate VirSatResourceSet resourceSet;\n+\n+\tpublic CustomJsonProvider() {\n+\t\tsetFormattedOutput(true);\n+\t\teventHandler = new DefaultValidationEventHandler();\n+\t}\n+\t\n+\tpublic void setEd(VirSatTransactionalEditingDomain ed) {\n+\t\tthis.ed = ed;\n+\t\tthis.resourceSet = ed.getResourceSet();\n+\t}\n+\n+\t/**\n+\t * Get all category assignment classes that are present in the current concepts\n+\t * @return Set<Class<?>> the classes\n+\t */\n+\tprivate Set<Class<?>> getClassesToRegister() {\n+\t\tSet<Class<?>> allCaClasses = new HashSet<>();\n+\t\tBeanCategoryAssignmentFactory beanCaFactory = new BeanCategoryAssignmentFactory();\n+\t\t\n+\t\tfor (Concept concept : resourceSet.getRepository().getActiveConcepts()) {\n+\t\t\tfor (Category category : concept.getNonAbstractCategories()) {\n+\t\t\t\ttry {\n+\t\t\t\t\tIBeanCategoryAssignment bean = beanCaFactory.getInstanceFor(category);\n+\t\t\t\t\tallCaClasses.add(bean.getClass());\n+\t\t\t\t} catch (CoreException e) {\n+\t\t\t\t\tthrow new RuntimeException(e);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\treturn allCaClasses;\n+\t}\n+\t\n+\t@Override\n+\tprotected void preWriteTo(Object object, Class<?> type, Type genericType,\n+\t\t\tAnnotation[] annotations, MediaType mediaType,\n+\t\t\tMultivaluedMap<String, Object> httpHeaders, Marshaller marshaller) throws JAXBException {\n+\t\tmarshaller.setEventHandler(eventHandler);\n+\t}\n+\n+\t@Override\n+\tprotected void preReadFrom(Class<Object> type, Type genericType, Annotation[] annotations,\n+\t\t\tMediaType mediaType, MultivaluedMap<String, String> httpHeaders,\n+\t\t\tUnmarshaller unmarshaller) throws JAXBException {\n+\t\t\n+\t\tunmarshaller.setEventHandler(eventHandler);\n+\t\tunmarshaller.setAdapter(new TypeInstanceAdapter(resourceSet));\n+\t\tunmarshaller.setAdapter(new ABeanObjectAdapter(resourceSet));\n+\t}\n+\t\n+\t@Override\n+\tpublic Object readFrom(Class<Object> type, Type genericType, Annotation[] annotations, MediaType mediaType,\n+\t\t\tMultivaluedMap<String, String> httpHeaders, InputStream entityStream)\n+\t\t\tthrows IOException, WebApplicationException {\n+\t\t\n+\t\tReadFromArguments arguments = new ReadFromArguments(\n+\t\t\t\ttype, genericType, annotations, mediaType, httpHeaders, entityStream);\n+\t\tReadFromCommand readFromCommand = new ReadFromCommand(ed, arguments);\n+\t\t\n+\t\ted.getCommandStack().execute(readFromCommand);\n+\t\t\n+\t\treadFromCommand.throwExceptionsIfSet();\n+\t\t\n+\t\treturn readFromCommand.getResult().iterator().next();\n+\t}\n+\t\n+\t/**\n+\t * POJO to bundle the arguments for the readFrom function\n+\t */\n+\tprivate static class ReadFromArguments {\n+\t\t\n+\t\tprivate Class<Object> type;\n+\t\tprivate Type genericType;\n+\t\tprivate Annotation[] annotations;\n+\t\tprivate MediaType mediaType;\n+\t\tprivate MultivaluedMap<String, String> httpHeaders;\n+\t\tprivate InputStream entityStream;\n+\t\t\n+\t\t/**\n+\t\t * Constructor with all required arguments\n+\t\t * @param type\n+\t\t * @param genericType\n+\t\t * @param annotations\n+\t\t * @param mediaType\n+\t\t * @param httpHeaders\n+\t\t * @param entityStream\n+\t\t */\n+\t\tReadFromArguments(Class<Object> type, Type genericType, Annotation[] annotations, MediaType mediaType,\n+\t\t\t\tMultivaluedMap<String, String> httpHeaders, InputStream entityStream) {\n+\t\t\tthis.type = type;\n+\t\t\tthis.genericType = type;\n+\t\t\tthis.annotations = annotations;\n+\t\t\tthis.mediaType = mediaType;\n+\t\t\tthis.httpHeaders = httpHeaders;\n+\t\t\tthis.entityStream = entityStream;\n+\t\t}\n+\t\t\n+\t\tpublic Class<Object> getType() {\n+\t\t\treturn type;\n+\t\t}\n+\t\t\n+\t\tpublic Type getGenericType() {\n+\t\t\treturn genericType;\n+\t\t}\n+\t\t\n+\t\tpublic Annotation[] getAnnotations() {\n+\t\t\treturn annotations;\n+\t\t}\n+\t\t\n+\t\tpublic MediaType getMediaType() {\n+\t\t\treturn mediaType;\n+\t\t}\n+\t\t\n+\t\tpublic MultivaluedMap<String, String> getHttpHeaders() {\n+\t\t\treturn httpHeaders;\n+\t\t}\n+\t\t\n+\t\tpublic InputStream getEntityStream() {\n+\t\t\treturn entityStream;\n+\t\t}\n+\t}\n+\t\n+\tprivate class ReadFromCommand extends RecordingCommand {\n+\t\t\n+\t\tprivate Collection<Object> results = new ArrayList<>();\n+\t\tprivate ReadFromArguments arguments;\n+\n+\t\tprivate AtomicExceptionReference<WebApplicationException> atomicWebAppException;\n+\t\tprivate AtomicExceptionReference<IOException> atomicIoException;\n+\t\t\n+\t\t/**\n+\t\t * Create a command to call ConfigurableMoxyJsonProvider.readFrom()\n+\t\t * over the transactional editing domain\n+\t\t * @param domain the ed\n+\t\t * @param arguments for the readFrom function \n+\t\t */\n+\t\tReadFromCommand(TransactionalEditingDomain domain, ReadFromArguments arguments) {\n+\t\t\tsuper(domain);\n+\t\t\tthis.arguments = arguments;\n+\t\t\t\n+\t\t\tatomicIoException = new AtomicExceptionReference<>();\n+\t\t\tatomicWebAppException = new AtomicExceptionReference<>();\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected void doExecute() {\n+\t\t\ttry {\n+\t\t\t\tObject result = CustomJsonProvider.super.readFrom(\n+\t\t\t\t\targuments.getType(),\n+\t\t\t\t\targuments.getGenericType(),\n+\t\t\t\t\targuments.getAnnotations(),\n+\t\t\t\t\targuments.getMediaType(),\n+\t\t\t\t\targuments.getHttpHeaders(),\n+\t\t\t\t\targuments.getEntityStream());\n+\t\t\t\tresults.add(result);\n+\t\t\t} catch (WebApplicationException e) {\n+\t\t\t\tatomicWebAppException.set(e);\n+\t\t\t} catch (IOException e) {\n+\t\t\t\tatomicIoException.set(e);\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\t/**\n+\t\t * Returns the result of ConfigurableMoxyJsonProvider.readFrom()\n+\t\t */\n+\t\t@Override\n+\t\tpublic Collection<?> getResult() {\n+\t\t\treturn results;\n+\t\t}\n+\t\t\n+\t\tpublic void throwExceptionsIfSet() throws IOException, WebApplicationException {\n+\t\t\tatomicWebAppException.throwIfSet();\n+\t\t\tatomicIoException.throwIfSet();\n+\t\t}\n+\t}\n+\t\n+\t@Override\n+\tprotected JAXBContext getJAXBContext(Set<Class<?>> domainClasses, Annotation[] annotations, MediaType mediaType,\n+\t\t\tMultivaluedMap<String, ?> httpHeaders) throws JAXBException {\n+\t\t\n+\t\t// We assume that the registered classes in the concept can change any time\n+\t\t// so no cashing is possible and we have to get the current ones on each request\n+\t\tif (ed != null) {\n+\t\t\tdomainClasses.addAll(getClassesToRegister());\n+\t\t}\n+\t\t\n+\t\t// But the contexts are being cashed on domainClasses\n+\t\t// So it will reuse a context for the same domainClasses\n+\t\treturn super.getJAXBContext(domainClasses, annotations, mediaType, httpHeaders);\n+\t}\n+}", "originalCommit": "d199e1f2b21bdd091b3d91da99641693f1bdc7c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM0MTc4NA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/747#discussion_r510341784", "bodyText": "Should we maybe name this class in a way that reflects its function? Like transactional or something :)", "author": "andriikovalov-dlr", "createdAt": "2020-10-22T17:37:57Z", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/dataaccess/CustomJsonProvider.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.server.dataaccess;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.ext.Provider;\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.bind.ValidationEventHandler;\n+import javax.xml.bind.helpers.DefaultValidationEventHandler;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.emf.transaction.RecordingCommand;\n+import org.eclipse.emf.transaction.TransactionalEditingDomain;\n+import org.glassfish.jersey.moxy.json.internal.ConfigurableMoxyJsonProvider;\n+\n+import de.dlr.sc.virsat.commons.exception.AtomicExceptionReference;\n+import de.dlr.sc.virsat.model.concept.types.category.IBeanCategoryAssignment;\n+import de.dlr.sc.virsat.model.concept.types.factory.BeanCategoryAssignmentFactory;\n+import de.dlr.sc.virsat.model.dvlm.categories.Category;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.dvlm.json.ABeanObjectAdapter;\n+import de.dlr.sc.virsat.model.dvlm.json.TypeInstanceAdapter;\n+import de.dlr.sc.virsat.project.editingDomain.VirSatTransactionalEditingDomain;\n+import de.dlr.sc.virsat.project.resources.VirSatResourceSet;\n+\n+@Provider\n+@Produces(MediaType.APPLICATION_JSON)\n+@Consumes(MediaType.APPLICATION_JSON)\n+public class CustomJsonProvider extends ConfigurableMoxyJsonProvider {", "originalCommit": "d199e1f2b21bdd091b3d91da99641693f1bdc7c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY5NTczOA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/747#discussion_r510695738", "bodyText": "Yeah sounds good :)", "author": "JAmmermann-DLR", "createdAt": "2020-10-23T07:43:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM0MTc4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM1MDIwNg==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/747#discussion_r510350206", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Call writeTo and assert that the the output String is as expected\n          \n          \n            \n            \t * Call writeTo and assert that the the output String contains the test value", "author": "andriikovalov-dlr", "createdAt": "2020-10-22T17:51:45Z", "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/dataaccess/CustomJsonProviderTest.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.server.dataaccess;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBException;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoriesFactory;\n+import de.dlr.sc.virsat.model.dvlm.categories.Category;\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.PropertydefinitionsFactory;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesFactory;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ValuePropertyInstance;\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElement;\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralFactory;\n+import de.dlr.sc.virsat.project.test.AProjectTestCase;\n+\n+public class CustomJsonProviderTest extends AProjectTestCase {\n+\n+\tprivate CustomJsonProvider provider;\n+\tprivate BeanPropertyString testBean;\n+\tprivate Class<?> type;\n+\tprivate Set<Class<?>> beanClass = new HashSet<>();\n+\tprivate MediaType mediaType;\n+\tprivate String testString = \"test\";\n+\n+\t@Before\n+\tpublic void setUp() throws CoreException {\n+\t\tsuper.setUp();\n+\t\taddEditingDomainAndRepository();\n+\t\t\n+\t\tprovider = new CustomJsonProvider();\n+\t\tprovider.setEd(editingDomain);\n+\t\t\n+\t\tStructuralElement testSe = StructuralFactory.eINSTANCE.createStructuralElement();\n+\t\tStructuralElementInstance testSei = StructuralFactory.eINSTANCE.createStructuralElementInstance();\n+\t\tCategory testCategory = CategoriesFactory.eINSTANCE.createCategory();\n+\t\tCategoryAssignment testCa = CategoriesFactory.eINSTANCE.createCategoryAssignment();\n+\t\tStringProperty testProperty = PropertydefinitionsFactory.eINSTANCE.createStringProperty();\n+\t\tValuePropertyInstance testPropertyInstance = PropertyinstancesFactory.eINSTANCE.createValuePropertyInstance();\n+\t\t\n+\t\ttestPropertyInstance.setType(testProperty);\n+\t\t\n+\t\ttestCategory.setIsApplicableForAll(true);\n+\t\ttestCategory.getProperties().add(testProperty);\n+\t\t\n+\t\ttestCa.setType(testCategory);\n+\t\ttestCa.getPropertyInstances().add(testPropertyInstance);\n+\t\t\n+\t\ttestSe.setIsRootStructuralElement(true);\n+\t\t\n+\t\ttestSei.setType(testSe);\n+\t\ttestSei.getCategoryAssignments().add(testCa);\n+\t\ttestSei.getCategoryAssignments();\n+\t\t\n+\t\texecuteAsCommand(() -> rs.getAndAddStructuralElementInstanceResource(testSei));\n+\t\t\n+\t\ttestBean = new BeanPropertyString(testPropertyInstance);\n+\t\teditingDomain.getVirSatCommandStack().execute(testBean.setValue(editingDomain, testString));\n+\n+\t\ttype = BeanPropertyString.class;\n+\t\tbeanClass.add(type);\n+\t\t\n+\t\tmediaType = MediaType.APPLICATION_JSON_TYPE;\n+\t}\n+\n+\t/**\n+\t * Call writeTo and assert that the the output String is as expected", "originalCommit": "d199e1f2b21bdd091b3d91da99641693f1bdc7c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM5NTMyOQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/747#discussion_r510395329", "bodyText": "Why are these inner class and not normal classes?", "author": "andriikovalov-dlr", "createdAt": "2020-10-22T19:10:27Z", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/resources/ModelAccessResource.java", "diffHunk": "@@ -10,21 +10,222 @@\n package de.dlr.sc.virsat.server.resources;\r\n \r\n \r\n+import javax.inject.Inject;\r\n+import javax.ws.rs.Consumes;\r\n import javax.ws.rs.GET;\r\n+import javax.ws.rs.PUT;\r\n import javax.ws.rs.Path;\r\n import javax.ws.rs.PathParam;\r\n import javax.ws.rs.Produces;\r\n import javax.ws.rs.core.MediaType;\r\n+import javax.ws.rs.core.Response;\r\n \r\n-import de.dlr.sc.virsat.server.dataaccess.Model;\r\n+import org.eclipse.core.runtime.CoreException;\r\n \r\n-@Path(\"/mar\")\r\n+import de.dlr.sc.virsat.model.concept.types.category.ABeanCategoryAssignment;\r\n+import de.dlr.sc.virsat.model.concept.types.factory.BeanCategoryAssignmentFactory;\r\n+import de.dlr.sc.virsat.model.concept.types.factory.BeanPropertyFactory;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyComposed;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyReference;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\r\n+import de.dlr.sc.virsat.model.dvlm.Repository;\r\n+import de.dlr.sc.virsat.project.editingDomain.VirSatTransactionalEditingDomain;\r\n+import de.dlr.sc.virsat.server.dataaccess.CustomJsonProvider;\r\n+import de.dlr.sc.virsat.server.dataaccess.RepositoryUtility;\r\n+import de.dlr.sc.virsat.server.repository.RepoRegistry;\r\n+import de.dlr.sc.virsat.server.repository.ServerRepository;\r\n+\r\n+/**\r\n+ * The resource to access the VirSat data model of a server repository\r\n+ * Provides an endpoint to access a repository\r\n+ */\r\n+@Path(ModelAccessResource.PATH)\r\n public class ModelAccessResource {\r\n+\r\n+\tCustomJsonProvider provider;\r\n+\t\r\n+\tpublic static final String PATH = \"/repository\";\r\n+\r\n+\tpublic static final String ROOT_SEIS = \"seis\";\r\n+\tpublic static final String SEI = \"sei\";\r\n+\tpublic static final String DISCIPLINES = \"disciplines\";\r\n+\tpublic static final String CONCEPTS = \"concepts\";\r\n+\tpublic static final String CA = \"ca\";\r\n+\tpublic static final String CA_AND_PROPERTIES = \"caAndProperties\";\r\n+\tpublic static final String PROPERTY = \"property\";\r\n+\t\r\n+\tpublic static final String BOOLEAN = \"boolean\";\r\n+\tpublic static final String STRING = \"string\";\r\n+\tpublic static final String INT = \"int\";\r\n+\tpublic static final String FLOAT = \"float\";\r\n+\tpublic static final String ENUM = \"enum\";\r\n+\tpublic static final String RESOURCE = \"resource\";\r\n+\tpublic static final String REFERENCE = \"reference\";\r\n+\tpublic static final String COMPOSED = \"composed\";\r\n+\r\n+\t@Inject\r\n+\tpublic ModelAccessResource(CustomJsonProvider provider) { \r\n+\t\tthis.provider = provider;\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Get the ServerRepository corresponding to the repoName and create a new RepoModelAccessResource\r\n+\t * @param repoName of the repository to be accessed by the request\r\n+\t * @return RepoModelAccessResource or null if the repo is not found\r\n+\t */\r\n+\t@Path(\"{repoName}\")\r\n+\tpublic RepoModelAccessResource getConcreteResource(@PathParam(\"repoName\") String repoName) {\r\n+\t\tServerRepository repo = RepoRegistry.getInstance().getRepository(repoName);\r\n+\t\tif (repo != null) {\r\n+\t\t\tVirSatTransactionalEditingDomain ed = repo.getEd();\r\n+\t\t\tprovider.setEd(ed);\r\n+\t\t\treturn new RepoModelAccessResource(ed.getResourceSet().getRepository());\r\n+\t\t}\r\n+\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * The resource to access the VirSat data model of a specific server repository\r\n+\t * Provides the following endpoints:\r\n+\t *   - Get roots seis\r\n+\t *   - Get and update sei by uuid\r\n+\t *   - Get disciplines\r\n+\t *   - Get concepts\r\n+\t *   - Get and update ca (with property uuids) by uuid\r\n+\t *   - Get and update ca with properties by uuid\r\n+\t *   - Get and update properties by uuid\r\n+\t */\r\n+\tpublic static class RepoModelAccessResource {\r", "originalCommit": "d199e1f2b21bdd091b3d91da99641693f1bdc7c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDcwMTcyNQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/747#discussion_r510701725", "bodyText": "So I found it more intuitive because those classes are subresources only used in this class. But I also see no problem in changing it. Should we change it?", "author": "JAmmermann-DLR", "createdAt": "2020-10-23T07:54:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM5NTMyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDcyMTIwNw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/747#discussion_r510721207", "bodyText": "I would rather split it into different files, but I'm not going to insist, we can also leave it like this.", "author": "andriikovalov-dlr", "createdAt": "2020-10-23T08:29:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM5NTMyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDcyODgyNg==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/747#discussion_r510728826", "bodyText": "Ok then I will change it in #748 after we merged this from dev so that we don't have a big merge conflict there if we change it here now", "author": "JAmmermann-DLR", "createdAt": "2020-10-23T08:42:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM5NTMyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM5NjcxMA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/747#discussion_r510396710", "bodyText": "No newline", "author": "andriikovalov-dlr", "createdAt": "2020-10-22T19:13:05Z", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/resources/ModelAccessResource.java", "diffHunk": "@@ -10,21 +10,222 @@\n package de.dlr.sc.virsat.server.resources;\r\n \r\n \r\n+import javax.inject.Inject;\r\n+import javax.ws.rs.Consumes;\r\n import javax.ws.rs.GET;\r\n+import javax.ws.rs.PUT;\r\n import javax.ws.rs.Path;\r\n import javax.ws.rs.PathParam;\r\n import javax.ws.rs.Produces;\r\n import javax.ws.rs.core.MediaType;\r\n+import javax.ws.rs.core.Response;\r\n \r\n-import de.dlr.sc.virsat.server.dataaccess.Model;\r\n+import org.eclipse.core.runtime.CoreException;\r\n \r\n-@Path(\"/mar\")\r\n+import de.dlr.sc.virsat.model.concept.types.category.ABeanCategoryAssignment;\r\n+import de.dlr.sc.virsat.model.concept.types.factory.BeanCategoryAssignmentFactory;\r\n+import de.dlr.sc.virsat.model.concept.types.factory.BeanPropertyFactory;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyComposed;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyReference;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\r\n+import de.dlr.sc.virsat.model.dvlm.Repository;\r\n+import de.dlr.sc.virsat.project.editingDomain.VirSatTransactionalEditingDomain;\r\n+import de.dlr.sc.virsat.server.dataaccess.CustomJsonProvider;\r\n+import de.dlr.sc.virsat.server.dataaccess.RepositoryUtility;\r\n+import de.dlr.sc.virsat.server.repository.RepoRegistry;\r\n+import de.dlr.sc.virsat.server.repository.ServerRepository;\r\n+\r\n+/**\r\n+ * The resource to access the VirSat data model of a server repository\r\n+ * Provides an endpoint to access a repository\r\n+ */\r\n+@Path(ModelAccessResource.PATH)\r\n public class ModelAccessResource {\r\n+\r\n+\tCustomJsonProvider provider;\r\n+\t\r\n+\tpublic static final String PATH = \"/repository\";\r\n+\r\n+\tpublic static final String ROOT_SEIS = \"seis\";\r\n+\tpublic static final String SEI = \"sei\";\r\n+\tpublic static final String DISCIPLINES = \"disciplines\";\r\n+\tpublic static final String CONCEPTS = \"concepts\";\r\n+\tpublic static final String CA = \"ca\";\r\n+\tpublic static final String CA_AND_PROPERTIES = \"caAndProperties\";\r\n+\tpublic static final String PROPERTY = \"property\";\r\n+\t\r\n+\tpublic static final String BOOLEAN = \"boolean\";\r\n+\tpublic static final String STRING = \"string\";\r\n+\tpublic static final String INT = \"int\";\r\n+\tpublic static final String FLOAT = \"float\";\r\n+\tpublic static final String ENUM = \"enum\";\r\n+\tpublic static final String RESOURCE = \"resource\";\r\n+\tpublic static final String REFERENCE = \"reference\";\r\n+\tpublic static final String COMPOSED = \"composed\";\r\n+\r\n+\t@Inject\r\n+\tpublic ModelAccessResource(CustomJsonProvider provider) { \r\n+\t\tthis.provider = provider;\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Get the ServerRepository corresponding to the repoName and create a new RepoModelAccessResource\r\n+\t * @param repoName of the repository to be accessed by the request\r\n+\t * @return RepoModelAccessResource or null if the repo is not found\r\n+\t */\r\n+\t@Path(\"{repoName}\")\r\n+\tpublic RepoModelAccessResource getConcreteResource(@PathParam(\"repoName\") String repoName) {\r\n+\t\tServerRepository repo = RepoRegistry.getInstance().getRepository(repoName);\r\n+\t\tif (repo != null) {\r\n+\t\t\tVirSatTransactionalEditingDomain ed = repo.getEd();\r\n+\t\t\tprovider.setEd(ed);\r\n+\t\t\treturn new RepoModelAccessResource(ed.getResourceSet().getRepository());\r\n+\t\t}\r\n+\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * The resource to access the VirSat data model of a specific server repository\r\n+\t * Provides the following endpoints:\r\n+\t *   - Get roots seis\r\n+\t *   - Get and update sei by uuid\r\n+\t *   - Get disciplines\r\n+\t *   - Get concepts\r\n+\t *   - Get and update ca (with property uuids) by uuid\r\n+\t *   - Get and update ca with properties by uuid\r\n+\t *   - Get and update properties by uuid\r\n+\t */\r\n+\tpublic static class RepoModelAccessResource {\r\n+\t\r\n+\t\tprivate Repository repository;\r\n+\t\t\r\n+\t\tpublic RepoModelAccessResource(Repository repository) {\r\n+\t\t\tthis.repository = repository;\r\n+\t\t}\r\n+\t\t\r\n+\t\tprivate Response createBadRequestResponse(String msg) {\r\n+\t\t\treturn Response.status(Response.Status.BAD_REQUEST).entity(msg).build();\r\n+\t\t}\r\n+\t\r\n+\t\t@Path(PROPERTY)\r\n+\t\tpublic PropertyResource accessProperty() {\r\n+\t\t\treturn new PropertyResource(repository);\r\n+\t\t}\r\n+\t\t\r\n+\t\t/*\r\n+\t\t * A function for each property bean because \r\n+\t\t * the generic definition with wildcards\r\n+\t\t * of a bean property (ABeanObject<? extends APropertyInstance)\r\n+\t\t * is not supported\r\n+\t\t * \r\n+\t\t * If a new property should be supported \r\n+\t\t * it has to be added here\r\n+\t\t */\r\n+\t\tpublic static class PropertyResource {\r\n+\t\t\tprivate Repository repository;\r\n+\t\t\t\r\n+\t\t\tpublic PropertyResource(Repository repository) {\r\n+\t\t\t\tthis.repository = repository;\r\n+\t\t\t}\r\n+\t\t\t\r\n+\t\t\t@GET\r\n+\t\t\t@Path(\"/{propertyUuid}\")\r\n+\t\t\t@Produces(MediaType.APPLICATION_JSON)\r\n+\t\t\tpublic Response getProperty(@PathParam(\"propertyUuid\") String propertyUuid) {\r\n+\t\t\t\treturn Response.status(Response.Status.OK).entity(\r\n+\t\t\t\t\t\tnew BeanPropertyFactory().getInstanceFor(\r\n+\t\t\t\t\t\t\t\tRepositoryUtility.findProperty(propertyUuid, repository)\r\n+\t\t\t\t\t\t)).build();\r\n+\t\t\t}\r\n+\t\t\t\r\n+\t\t\t@PUT\r\n+\t\t\t@Path(STRING)\r\n+\t\t\t@Consumes(MediaType.APPLICATION_JSON)\r\n+\t\t\tpublic Response putProperty(BeanPropertyString bean) {\r\n+\t\t\t\treturn Response.status(Response.Status.OK).build();\r\n+\t\t\t}\r\n+\t\t\t\r\n+\t\t\t@PUT\r\n+\t\t\t@Path(INT)\r\n+\t\t\t@Consumes(MediaType.APPLICATION_JSON)\r\n+\t\t\tpublic Response putProperty(BeanPropertyInt bean) {\r\n+\t\t\t\treturn Response.status(Response.Status.OK).build();\r\n+\t\t\t}\r\n+\t\t\t\r\n+\t\t\t@PUT\r\n+\t\t\t@Path(FLOAT)\r\n+\t\t\t@Consumes(MediaType.APPLICATION_JSON)\r\n+\t\t\tpublic Response putProperty(BeanPropertyFloat bean) {\r\n+\t\t\t\treturn Response.status(Response.Status.OK).build();\r\n+\t\t\t}\r\n+\t\t\t\r\n+\t\t\t@PUT\r\n+\t\t\t@Path(ENUM)\r\n+\t\t\t@Consumes(MediaType.APPLICATION_JSON)\r\n+\t\t\tpublic Response putProperty(BeanPropertyEnum bean) {\r\n+\t\t\t\treturn Response.status(Response.Status.OK).build();\r\n+\t\t\t}\r\n+\t\t\t\r\n+\t\t\t@PUT\r\n+\t\t\t@Path(RESOURCE)\r\n+\t\t\t@Consumes(MediaType.APPLICATION_JSON)\r\n+\t\t\tpublic Response putProperty(BeanPropertyResource bean) {\r\n+\t\t\t\treturn Response.status(Response.Status.OK).build();\r\n+\t\t\t}\r\n+\t\t\t\r\n+\t\t\t@PUT\r\n+\t\t\t@Path(BOOLEAN)\r\n+\t\t\t@Consumes(MediaType.APPLICATION_JSON)\r\n+\t\t\tpublic Response putProperty(BeanPropertyBoolean bean) {\r\n+\t\t\t\treturn Response.status(Response.Status.OK).build();\r\n+\t\t\t}\r\n+\t\t\t\r\n+\t\t\t@PUT\r\n+\t\t\t@Path(REFERENCE)\r\n+\t\t\t@Consumes(MediaType.APPLICATION_JSON)\r\n+\t\t\tpublic Response putProperty(@SuppressWarnings(\"rawtypes\") BeanPropertyReference bean) {\r\n+\t\t\t\treturn Response.status(Response.Status.OK).build();\r\n+\t\t\t}\r\n+\t\t\t\r\n+\t\t\t@PUT\r\n+\t\t\t@Path(COMPOSED)\r\n+\t\t\t@Consumes(MediaType.APPLICATION_JSON)\r\n+\t\t\tpublic Response putProperty(@SuppressWarnings(\"rawtypes\") BeanPropertyComposed bean) {\r\n+\t\t\t\treturn Response.status(Response.Status.OK).build();\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\t\r\n+\t\t/**\r\n+\t\t * Returns a response with the category assignment with the caUuid\r\n+\t\t * @param caUuid uuid of the category assignment\r\n+\t\t * @return a server response\r\n+\t\t */\r\n+\t\t@GET\r\n+\t\t@Path(CA + \"/{caUuid}\")\r\n+\t\t@Produces(MediaType.APPLICATION_JSON)\r\n+\t\tpublic Response getCa(@PathParam(\"caUuid\") String caUuid) {\r\n+\t\t\ttry {\r\n+\t\t\t\treturn Response.status(Response.Status.OK).entity(\r\n+\t\t\t\t\t\tnew BeanCategoryAssignmentFactory().getInstanceFor(\r\n+\t\t\t\t\t\t\t\tRepositoryUtility.findCa(caUuid, repository)\r\n+\t\t\t\t\t\t)).build();\r\n+\t\t\t} catch (CoreException e) {\r\n+\t\t\t\treturn createBadRequestResponse(e.getMessage());\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\t\r\n+\t\t@PUT\r\n+\t\t@Path(CA)\r\n+\t\t@Consumes(MediaType.APPLICATION_JSON)\r\n+\t\tpublic Response putCa(ABeanCategoryAssignment bean) {\r\n+\t\t\treturn Response.status(Response.Status.OK).build();\r\n+\t\t}\r\n \t\r\n-\t@GET\r\n-\t@Path(\"/{uuid}\")\r\n-\t@Produces(MediaType.APPLICATION_JSON)\r\n-\tpublic Model hello(@PathParam(\"uuid\") String uuid) {\r\n-\t\treturn new Model(uuid);\r\n \t}\r\n }", "originalCommit": "d199e1f2b21bdd091b3d91da99641693f1bdc7c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQwNTkxNQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/747#discussion_r510405915", "bodyText": "Let's also use our TEST_STRING constant here", "author": "andriikovalov-dlr", "createdAt": "2020-10-22T19:30:24Z", "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/resources/ModelAccessResourceTest.java", "diffHunk": "@@ -0,0 +1,428 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.server.resources;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+\n+import java.io.StringWriter;\n+\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import javax.xml.bind.JAXBException;\n+\n+import org.eclipse.emf.transaction.RecordingCommand;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.concept.list.IBeanList;\n+import de.dlr.sc.virsat.model.concept.types.IBeanObject;\n+import de.dlr.sc.virsat.model.concept.types.category.IBeanCategoryAssignment;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyComposed;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyReference;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryBeanA;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryComposition;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryCompositionArray;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryIntrinsicArray;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryReference;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryReferenceArray;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestStructuralElement;\n+import de.dlr.sc.virsat.project.editingDomain.VirSatTransactionalEditingDomain;\n+import de.dlr.sc.virsat.project.resources.VirSatResourceSet;\n+import de.dlr.sc.virsat.server.test.AServerRepositoryTest;\n+\n+public class ModelAccessResourceTest extends AServerRepositoryTest {\n+\n+\tprivate Concept conceptTest;\n+\tprivate VirSatResourceSet resourceSet;\n+\t\n+\tprivate TestStructuralElement tSei;\n+\t\n+\tprivate TestCategoryAllProperty tcAllProperty;\n+\tprivate TestCategoryBeanA tcBeanA;\n+\tprivate TestCategoryComposition tcComposition;\n+\tprivate TestCategoryReference tcReference;\n+\tprivate TestCategoryIntrinsicArray tcIntrinsicArray;\n+\tprivate TestCategoryCompositionArray tcCompositionArray;\n+\tprivate TestCategoryReferenceArray tcReferenceArray;\n+\t\n+\tprivate BeanPropertyString beanString;\n+\tprivate BeanPropertyBoolean tBool;\n+\tprivate BeanPropertyEnum tEnum;\n+\tprivate BeanPropertyFloat tFloat;\n+\tprivate BeanPropertyInt tInt;\n+\tprivate BeanPropertyResource tResource;\n+\tprivate BeanPropertyReference<BeanPropertyString> tReferenceProp;\n+\tprivate BeanPropertyComposed<TestCategoryAllProperty> tComposed;\n+\tprivate BeanPropertyReference<TestCategoryAllProperty> tReferenceCa;\n+\n+\tprivate static final String TEST_STRING = \"testString\";\n+\t\n+\t@Before\n+\tpublic void setUpModel() throws Exception {\n+\n+\t\tVirSatTransactionalEditingDomain ed = testServerRepository.getEd();\n+\t\tresourceSet = ed.getResourceSet();\n+\n+\t\tconceptTest = loadConceptFromPlugin(\"de.dlr.sc.virsat.model.extension.tests\");\n+\t\t\n+\t\t// Create various test categories\n+\t\ttcAllProperty = new TestCategoryAllProperty(conceptTest);\n+\t\ttcBeanA = new TestCategoryBeanA(conceptTest);\n+\t\ttcComposition = new TestCategoryComposition(conceptTest);\n+\t\ttcReference = new TestCategoryReference(conceptTest);\n+\t\ttcIntrinsicArray = new TestCategoryIntrinsicArray(conceptTest);\n+\t\ttcCompositionArray = new TestCategoryCompositionArray(conceptTest);\n+\t\ttcReferenceArray = new TestCategoryReferenceArray(conceptTest);\n+\n+\t\t// Add them to a sei\n+\t\ttSei = new TestStructuralElement(conceptTest);\n+\t\ttSei.add(tcAllProperty);\n+\t\ttSei.add(tcBeanA);\n+\t\ttSei.add(tcComposition);\n+\t\ttSei.add(tcReference);\n+\t\ttSei.add(tcIntrinsicArray);\n+\t\ttSei.add(tcCompositionArray);\n+\t\ttSei.add(tcReferenceArray);\n+\n+\t\tStructuralElementInstance sei = tSei.getStructuralElementInstance();\n+\t\t\n+\t\tbeanString = tcAllProperty.getTestStringBean();\n+\t\ttBool = tcAllProperty.getTestBoolBean();\n+\t\ttEnum = tcAllProperty.getTestEnumBean();\n+\t\ttFloat = tcAllProperty.getTestFloatBean();\n+\t\ttInt = tcAllProperty.getTestIntBean();\n+\t\ttResource = tcAllProperty.getTestResourceBean();\n+\t\ttReferenceProp = tcReference.getTestRefPropertyBean();\n+\t\ttReferenceCa = tcReference.getTestRefCategoryBean();\n+\t\ttComposed = tcComposition.getTestSubCategoryBean();\n+\t\t\n+\t\ttcReference.setTestRefProperty(beanString);\n+\t\ttcReference.setTestRefCategory(tcAllProperty);\n+\t\tIBeanList<BeanPropertyReference<TestCategoryAllProperty>> catArray = tcReferenceArray.getTestCategoryReferenceArrayStaticBean();\n+\t\tfor (BeanPropertyReference<TestCategoryAllProperty> element : catArray) {\n+\t\t\telement.setValue(tcAllProperty);\n+\t\t}\n+\t\tIBeanList<BeanPropertyReference<BeanPropertyString>> propArray = tcReferenceArray.getTestPropertyReferenceArrayStaticBean();\n+\t\tfor (BeanPropertyReference<BeanPropertyString> element : propArray) {\n+\t\t\telement.setValue(beanString);\n+\t\t}\n+\t\t\n+\t\tRecordingCommand recordingCommand = new RecordingCommand(ed) {\n+\t\t\t@Override\n+\t\t\tprotected void doExecute() {\n+\t\t\t\ted.getResourceSet().getRepository().getActiveConcepts().add(conceptTest);\n+\t\t\t\ted.getResourceSet().getRepository().getRootEntities().add(sei);\n+\t\t\t\tresourceSet.getAndAddStructuralElementInstanceResource(sei);\n+\t\t\t}\n+\t\t};\n+\t\ted.getCommandStack().execute(recordingCommand);\n+\t}\n+\t\n+\t/*\n+\t * Test GET various elements\n+\t */\n+\t\n+\t/**\n+\t * Get a testSubject at a path from the server\n+\t * Then marshall it manually via the JAXBUtility using the classes\n+\t * Assert that server json and manual marshalled json are equal\n+\t * @param testSubject the subject to be tested\n+\t * @param path the path in the ModelAccessResource\n+\t * @param classes the classes required for marshalling\n+\t * @throws JAXBException\n+\t */\n+\t@SuppressWarnings(\"rawtypes\")\n+\tprivate void testGet(IBeanObject testSubject, String path, Class[] classes) throws JAXBException {\n+\t\tString uuid = testSubject.getUuid();\n+\t\tResponse response = webTarget.path(ModelAccessResource.PATH)\n+\t\t\t\t.path(projectName)\n+\t\t\t\t.path(path)\n+\t\t\t\t.path(uuid)\n+\t\t\t\t.request()\n+\t\t\t\t.get();\n+\t\t\n+\t\tassertEquals(HttpStatus.OK_200, response.getStatus());\n+\t\t\n+\t\tString entity = webTarget.path(ModelAccessResource.PATH)\n+\t\t\t\t.path(projectName)\n+\t\t\t\t.path(path)\n+\t\t\t\t.path(uuid)\n+\t\t\t\t.request()\n+\t\t\t\t.get(String.class);\n+\t\t\n+\t\t// Compare with the expected\n+\t\tJAXBUtility jaxbUtility = new JAXBUtility(classes);\n+\t\tStringWriter sw = new StringWriter();\n+\t\tjaxbUtility.getJsonMarshaller().marshal(testSubject, sw);\n+\t\tString expected = sw.toString();\n+\t\tassertEquals(\"Marshalled object as expected\", expected, entity);\n+\t}\n+\t\n+\t@SuppressWarnings(\"rawtypes\")\n+\tprivate void testGetProperty(IBeanObject testSubject) throws JAXBException {\n+\t\ttestGet(testSubject, ModelAccessResource.PROPERTY, new Class[] {testSubject.getClass()});\n+\t}\n+\t\n+\t@SuppressWarnings(\"rawtypes\")\n+\tprivate void testGetProperty(IBeanObject testSubject, Class[] classes) throws JAXBException {\n+\t\ttestGet(testSubject, ModelAccessResource.PROPERTY, classes);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPropertyStringGet() throws JAXBException {\n+\t\ttestGetProperty(beanString);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPropertyBoolGet() throws JAXBException {\n+\t\ttestGetProperty(tBool);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPropertyEnumGet() throws JAXBException {\n+\t\ttestGetProperty(tEnum);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPropertyFloatGet() throws JAXBException {\n+\t\ttestGetProperty(tFloat);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPropertyIntGet() throws JAXBException {\n+\t\ttestGetProperty(tInt);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPropertyResourceGet() throws JAXBException {\n+\t\ttestGetProperty(tResource);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPropertyReferenceGet() throws JAXBException {\n+\t\ttestGetProperty(tReferenceProp, new Class[] {tReferenceProp.getClass(), beanString.getClass()});\n+\t\ttestGetProperty(tReferenceCa, new Class[] {tReferenceProp.getClass(), tcAllProperty.getClass()});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPropertyComposedGet() throws JAXBException {\n+\t\ttestGetProperty(tComposed, new Class[] {tComposed.getClass(), tcAllProperty.getClass()});\n+\t}\n+\t\n+\t@SuppressWarnings(\"rawtypes\")\n+\tprivate void testGetCa(IBeanObject testSubject) throws JAXBException {\n+\t\ttestGet(testSubject, ModelAccessResource.CA, new Class[] {testSubject.getClass()});\n+\t}\n+\t\n+\t@SuppressWarnings(\"rawtypes\")\n+\tprivate void testGetCa(IBeanObject testSubject, Class[] classes) throws JAXBException {\n+\t\ttestGet(testSubject, ModelAccessResource.CA, classes);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testCaAllPropertyGet() throws JAXBException {\n+\t\ttestGetCa(tcAllProperty);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testCaBeanAGet() throws JAXBException {\n+\t\ttestGetCa(tcBeanA);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testCaCompositionGet() throws JAXBException {\n+\t\ttestGetCa(tcComposition);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testCaRefernceGet() throws JAXBException {\n+\t\ttestGetCa(tcReference);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testCaIntrinsicArrayGet() throws JAXBException {\n+\t\ttestGetCa(tcIntrinsicArray);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testCaCompositionArrayGet() throws JAXBException {\n+\t\ttestGetCa(tcCompositionArray, new Class[] {tcCompositionArray.getClass(), tcAllProperty.getClass()});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testCaReferenceArrayGet() throws JAXBException {\n+\t\ttestGetCa(tcReferenceArray);\n+\t}\n+\t\n+\t/*\n+\t * Test PUT various elements\n+\t */\n+\t@Test\n+\tpublic void testPropertyStringPutChangesModel() throws JAXBException {\n+\t\t\n+\t\t// Manually marshall the Class to edit the json\n+\t\tJAXBUtility jaxbUtility = new JAXBUtility(new Class[] {BeanPropertyString.class});\n+\t\tStringWriter sw = new StringWriter();\n+\t\tjaxbUtility.getJsonMarshaller().marshal(beanString, sw);\n+\t\tString jsonIn = sw.toString();\n+\t\tjsonIn = jsonIn.replace(\"null\", \"\\\"testString\\\"\");", "originalCommit": "d199e1f2b21bdd091b3d91da99641693f1bdc7c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fcc110227c57c4912c3edb0efa4495b91c0c46ca", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/fcc110227c57c4912c3edb0efa4495b91c0c46ca", "message": "Changes due to review - (Task #555)\n\n- Add missing newlines\n- Rename CustomJsonProvider to TransactionalJsonProvider\n- Move imports to server.test manifest\n\n---\nTask #555: Add Low Level Data API to access SEIs and CAs to REST server", "committedDate": "2020-10-23T08:13:59Z", "type": "commit"}, {"oid": "fa91ef47063553eb40337c1c9f67aaa496aafcc6", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/fa91ef47063553eb40337c1c9f67aaa496aafcc6", "message": "Merge branch 'development' into feature/task_555-Add_Low_Level_Data_API_2", "committedDate": "2020-10-23T08:46:27Z", "type": "commit"}, {"oid": "cb29271e705a0073806d6722e706ea97b5ff82b3", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/cb29271e705a0073806d6722e706ea97b5ff82b3", "message": "Change name of TypeInstanceAdapter to IUuidAdapter - (Task #555)\n\n---\nTask #555: Add Low Level Data API to access SEIs and CAs to REST server", "committedDate": "2020-10-23T08:51:06Z", "type": "commit"}]}