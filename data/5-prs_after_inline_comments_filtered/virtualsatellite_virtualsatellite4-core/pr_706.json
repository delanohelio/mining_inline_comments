{"pr_number": 706, "pr_title": "Updated handling of set and add in TypeSafeArrayInstanceList - (Task #705)", "pr_createdAt": "2020-07-20T15:24:06Z", "pr_url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/706", "timeline": [{"oid": "8a74f78d6f5918c14d97f4f8e36cc1a085725b8c", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/8a74f78d6f5918c14d97f4f8e36cc1a085725b8c", "message": "Update handling of set and add in AArrayInstanceList - (Task #705)\n\nNow set is also allowed for static lists. Now add on a static lists\nworks calls a set with an internal pointer.\nUpdated the test cases.\n\n---\nTask #705: Improve handling of static lists in AArrayInstanceList", "committedDate": "2020-07-20T15:21:47Z", "type": "commit"}, {"oid": "d2143e9b32260e56d98a653cb98a09b0f5af6bff", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/d2143e9b32260e56d98a653cb98a09b0f5af6bff", "message": "Revert changes to AArrayInstanceList - (Task #705)\n\n---\nTask #705: Improve handling of static lists in AArrayInstanceList", "committedDate": "2020-07-21T14:30:36Z", "type": "commit"}, {"oid": "12f8666ee3f2f3010a452430377f454fb2edc7f5", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/12f8666ee3f2f3010a452430377f454fb2edc7f5", "message": "Use TypeSafeArrayInstanceList instead - (Task #705)\n\nNow add and set work only on elements with the same uuid.\n\n---\nTask #705: Improve handling of static lists in AArrayInstanceList", "committedDate": "2020-07-21T14:48:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg4NjUyOA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/706#discussion_r458886528", "bodyText": "Lets move this block into a small helper method like getIndexByUUID(...).", "author": "SaMuellerDLR", "createdAt": "2020-07-22T15:37:18Z", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/list/TypeSafeArrayInstanceList.java", "diffHunk": "@@ -191,14 +192,53 @@ public BEAN_TYPE get(int index) {\n \t\treturn bean;\r\n \t}\r\n \r\n+\t/**\r\n+\t * Custom handling for static lists:\r\n+\t * Checks if the current element at the index has the same UUID as the new one\r\n+\t * If that is the case it gets set, else an UnsupportedOperationException is thrown\r\n+\t */\r\n \t@Override\r\n \tpublic BEAN_TYPE set(int index, BEAN_TYPE element) {\r\n-\t\tsuper.set(index, element);\r\n \t\tBEAN_TYPE oldBean = get(index);\r\n+\t\t\r\n+\t\tif (arrayModifier instanceof StaticArrayModifier) {\r\n+\t\t\tif (!element.getUuid().equals(oldBean.getUuid())) {\r\n+\t\t\t\tthrow new UnsupportedOperationException();\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\t\r\n \t\tai.getArrayInstances().set(index, element.getTypeInstance());\r\n \t\treturn oldBean;\r\n \t}\r\n \r\n+\t/**\r\n+\t * Custom handling for static lists:\r\n+\t * Checks if an element with the same UUID exists in the list\r\n+\t * If that is the case the set method is called,\r\n+\t * else an UnsupportedOperationException is thrown\r\n+\t */\r\n+\t@Override\r\n+\tpublic boolean add(BEAN_TYPE e) {\r\n+\t\tif (arrayModifier instanceof StaticArrayModifier) {\r\n+\t\t\tint index = -1;\r", "originalCommit": "12f8666ee3f2f3010a452430377f454fb2edc7f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg4NzI3MA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/706#discussion_r458887270", "bodyText": "\"is be\" looks redundant", "author": "SaMuellerDLR", "createdAt": "2020-07-22T15:38:23Z", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/TestCategoryIntrinsicArrayStaticTest.java", "diffHunk": "@@ -80,20 +80,30 @@ public void testAddAllIntCollectionOfQextendsBeansType() {\n \t\tarrayStatic.addAll(addBeans);\r\n \t}\r\n \r\n-\t@Test(expected = UnsupportedOperationException.class)\r\n+\t@Test\r\n \tpublic void testAddBeanType() {\r\n \t\tBeanPropertyString property1 = createNewStringProperty();\r\n \t\t\r\n-\t\tassertEquals(\"List has one items\", LIST_WITH_STATIC_SIZE, arrayStatic.size());\r\n-\t\t\t\r\n-\t\tarrayStatic.add(property1);\t\t\r\n+\t\tassertEquals(\"List has four items\", LIST_WITH_STATIC_SIZE, arrayStatic.size());\r\n+\t\t\r\n+\t\tassertThrows(\"Can't add an element with a new uuid\", UnsupportedOperationException.class, () -> {\r\n+\t\t\tarrayStatic.add(property1);\r\n+\t\t});\r\n+\t\t\r\n+\t\tproperty1.getTypeInstance().setUuid(arrayStatic.get(0).getTypeInstance().getUuid());\r\n+\t\tassertNotEquals(\"Elements are not the same\", property1.getTypeInstance(), arrayStatic.get(0).getTypeInstance());\r\n+\t\tarrayStatic.add(property1);\r\n+\t\tassertEquals(\"Added the element\", property1.getTypeInstance(), arrayStatic.get(0).getTypeInstance());\r\n+\t\t\r\n+\t\tarrayStatic.add(property1);\r\n+\t\tassertEquals(\"Adding the same element again is be idempotend for static lists\", property1.getTypeInstance(), arrayStatic.get(0).getTypeInstance());\r", "originalCommit": "12f8666ee3f2f3010a452430377f454fb2edc7f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6a5640e35b8a002baf578f2bacdec591d29ae292", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/6a5640e35b8a002baf578f2bacdec591d29ae292", "message": "Changes due to review - (Task #705)\n\nExtract code in function and fix spelling.\n\n---\nTask #705: Improve handling of static lists in AArrayInstanceList", "committedDate": "2020-07-23T12:14:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYwODg1Ng==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/706#discussion_r465608856", "bodyText": "The whole file is marked as changed - probably wrong line endings? Let's revert it and only have meaningful changes to have a cleaner history", "author": "andriikovalov-dlr", "createdAt": "2020-08-05T09:51:37Z", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/TestCategoryIntrinsicArrayStaticTest.java", "diffHunk": "@@ -1,170 +1,186 @@\n-/*******************************************************************************\r\n- * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n- *\r\n- * This program and the accompanying materials are made available under the\r\n- * terms of the Eclipse Public License 2.0 which is available at\r\n- * http://www.eclipse.org/legal/epl-2.0.\r\n- *\r\n- * SPDX-License-Identifier: EPL-2.0\r\n- *******************************************************************************/\r\n-package de.dlr.sc.virsat.model.extension.tests.model;\r\n-\r\n-\r\n-import static org.junit.Assert.assertEquals;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-\r\n-import org.eclipse.emf.common.command.Command;\r\n-import org.eclipse.emf.common.command.UnexecutableCommand;\r\n-import org.junit.Before;\r\n-import org.junit.Test;\r\n-\r\n-import de.dlr.sc.virsat.model.concept.list.IBeanList;\r\n-import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\r\n-import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n-import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ArrayInstance;\r\n-import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ValuePropertyInstance;\r\n-import de.dlr.sc.virsat.model.dvlm.categories.util.CategoryInstantiator;\r\n-import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\r\n-\r\n-/**\r\n- * test case for the array capabilities on intrinsic properties in the beans model\r\n- * @author fisc_ph\r\n- *\r\n- */\r\n-public class TestCategoryIntrinsicArrayStaticTest extends AConceptTestCase {\r\n-\r\n-\tprivate TestCategoryIntrinsicArray tcIntrinsicArray;\r\n-\tprivate IBeanList<BeanPropertyString> arrayStatic;\r\n-\tprivate ArrayInstance ai;\r\n-\tprivate CategoryInstantiator ci;\r\n-\t\r\n-\t/**\r\n-\t * Method to create a test property\r\n-\t * @return a new BeanPropertyString\r\n-\t */\r\n-\tprivate BeanPropertyString createNewStringProperty() {\r\n-\t\tAPropertyInstance pi = ci.generateInstance(ai);\r\n-\t\tBeanPropertyString newBeanProperty = new BeanPropertyString();\r\n-\t\tnewBeanProperty.setTypeInstance((ValuePropertyInstance) pi);\r\n-\t\treturn newBeanProperty;\r\n-\t}\r\n-\r\n-\t@Before\r\n-\tpublic void setup() {\r\n-\t\tprepareEditingDomain();\r\n-\t\t// Load the concept to create the test object\r\n-\t\tConcept concept = loadConceptFromPlugin();\r\n-\t\ttcIntrinsicArray = new TestCategoryIntrinsicArray(concept);\r\n-\t\tarrayStatic = tcIntrinsicArray.getTestStringArrayStaticBean();\r\n-\t\tai = arrayStatic.getArrayInstance();\r\n-\t\tci = new CategoryInstantiator(); \r\n-\t}\r\n-\t\r\n-\tprivate static final int LIST_WITH_STATIC_SIZE = 4;\r\n-\t\r\n-\t@Test(expected = UnsupportedOperationException.class)\r\n-\tpublic void testAddAllIntCollectionOfQextendsBeansType() {\r\n-\t\tBeanPropertyString property1 = createNewStringProperty();\r\n-\t\tBeanPropertyString property2 = createNewStringProperty();\r\n-\t\tBeanPropertyString property3 = createNewStringProperty();\r\n-\r\n-\t\tassertEquals(\"List has one items\", LIST_WITH_STATIC_SIZE, arrayStatic.size());\r\n-\t\t\r\n-\t\tList<BeanPropertyString> addBeans = new ArrayList<>();\r\n-\t\taddBeans.add(property1);\r\n-\t\taddBeans.add(property2);\r\n-\t\taddBeans.add(property3);\r\n-\t\t\r\n-\t\tarrayStatic.addAll(addBeans);\r\n-\t}\r\n-\r\n-\t@Test(expected = UnsupportedOperationException.class)\r\n-\tpublic void testAddBeanType() {\r\n-\t\tBeanPropertyString property1 = createNewStringProperty();\r\n-\t\t\r\n-\t\tassertEquals(\"List has one items\", LIST_WITH_STATIC_SIZE, arrayStatic.size());\r\n-\t\t\t\r\n-\t\tarrayStatic.add(property1);\t\t\r\n-\t}\r\n-\r\n-\t@Test\r\n-\tpublic void testAddBeanTypeCommand() {\r\n-\t\tBeanPropertyString property1 = createNewStringProperty();\r\n-\t\t\r\n-\t\tassertEquals(\"List has one items\", LIST_WITH_STATIC_SIZE, arrayStatic.size());\r\n-\t\t\t\r\n-\t\tCommand command = arrayStatic.add(editingDomain, property1);\r\n-\t\tassertEquals(\"Command cannot be executed\", UnexecutableCommand.INSTANCE, command);\r\n-\t}\r\n-\t\r\n-\t@Test(expected = UnsupportedOperationException.class)\r\n-\tpublic void testAddIntBeanType() {\r\n-\t\tBeanPropertyString property1 = createNewStringProperty();\r\n-\r\n-\t\tassertEquals(\"List has one items\", LIST_WITH_STATIC_SIZE, arrayStatic.size());\r\n-\t\t\r\n-\t\tarrayStatic.add(1, property1);\r\n-\t}\r\n-\t\r\n-\t@Test(expected = UnsupportedOperationException.class)\r\n-\tpublic void testClear() {\r\n-\t\tarrayStatic.clear();\r\n-\t}\r\n-\r\n-\t@Test(expected = UnsupportedOperationException.class)\r\n-\tpublic void testRemoveAll() {\r\n-\t\tBeanPropertyString property1 = createNewStringProperty();\r\n-\t\tBeanPropertyString property3 = createNewStringProperty();\r\n-\r\n-\t\tassertEquals(\"List has one items\", LIST_WITH_STATIC_SIZE, arrayStatic.size());\r\n-\t\t\r\n-\t\tList<BeanPropertyString> removeBeans = new ArrayList<>();\r\n-\t\tremoveBeans.add(property1);\r\n-\t\tremoveBeans.add(property3);\r\n-\t\t\r\n-\t\tarrayStatic.removeAll(removeBeans);\r\n-\t}\r\n-\r\n-\t@Test(expected = UnsupportedOperationException.class)\r\n-\tpublic void testRemoveInt() {\r\n-\t\tarrayStatic.remove(1);\r\n-\t}\r\n-\r\n-\t@Test(expected = UnsupportedOperationException.class)\r\n-\tpublic void testRemoveObject() {\r\n-\t\tBeanPropertyString propertyOne = createNewStringProperty();\r\n-\r\n-\t\tarrayStatic.remove(propertyOne);\r\n-\t}\r\n-\t\r\n-\t@Test\r\n-\tpublic void testRemoveObjectCommand() {\r\n-\t\tBeanPropertyString property1 = createNewStringProperty();\r\n-\t\t\r\n-\t\tassertEquals(\"List has one items\", LIST_WITH_STATIC_SIZE, arrayStatic.size());\r\n-\t\t\t\r\n-\t\tCommand command = arrayStatic.remove(editingDomain, property1);\r\n-\t\tassertEquals(\"Command cannot be executed\", UnexecutableCommand.INSTANCE, command);\r\n-\t}\r\n-\r\n-\t@Test(expected = UnsupportedOperationException.class)\r\n-\tpublic void testRetainAll() {\r\n-\t\tBeanPropertyString property1 = createNewStringProperty();\r\n-\t\tBeanPropertyString property3 = createNewStringProperty();\r\n-\t\t\r\n-\t\tList<BeanPropertyString> retainBeans = new ArrayList<>();\r\n-\t\tretainBeans.add(property1);\r\n-\t\tretainBeans.add(property3);\r\n-\t\t\r\n-\t\tarrayStatic.retainAll(retainBeans);\r\n-\t}\r\n-\r\n-\t@Test(expected = UnsupportedOperationException.class)\r\n-\tpublic void testSetIntBeanType() {\r\n-\t\tBeanPropertyString property3 = createNewStringProperty();\r\n-\r\n-\t\tarrayStatic.set(1, property3);\r\n-\t}\r\n-}\r\n+/*******************************************************************************", "originalCommit": "6a5640e35b8a002baf578f2bacdec591d29ae292", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgwODgxMQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/706#discussion_r465808811", "bodyText": "I think I deleted some trailing tabs -.- Now you can see the changes.", "author": "JAmmermann-DLR", "createdAt": "2020-08-05T15:23:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYwODg1Ng=="}], "type": "inlineReview"}, {"oid": "ccbaaf9c40088d8a8809f1a3ea7ed90388bcee36", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/ccbaaf9c40088d8a8809f1a3ea7ed90388bcee36", "message": "Changes due to review - (Task #705)\n\nRevert TestCategoryIntrinsicArrayStaticTest to only have meaningful\nchanges and a cleaner history.\n\n---\nTask #705: Improve handling of static lists in AArrayInstanceList", "committedDate": "2020-08-05T15:20:49Z", "type": "commit"}]}