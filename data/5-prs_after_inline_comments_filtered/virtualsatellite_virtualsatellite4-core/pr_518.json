{"pr_number": 518, "pr_title": "Migration with new dependencies", "pr_createdAt": "2020-03-04T12:00:37Z", "pr_url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/518", "timeline": [{"oid": "f22fb2a35d567c6e5ff889655a1c45e9a576583c", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/f22fb2a35d567c6e5ff889655a1c45e9a576583c", "message": "Move activating concept and handle new dependencies (#465)", "committedDate": "2020-03-03T16:36:41Z", "type": "commit"}, {"oid": "d2f77502f7d71c9c0a1166e85ee70c8384a07c04", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/d2f77502f7d71c9c0a1166e85ee70c8384a07c04", "message": "Add test for getting new depencies - (Task #465)", "committedDate": "2020-03-04T11:57:34Z", "type": "commit"}, {"oid": "76c3606e5653aa1c0a4b05107dbd4e3e8136b030", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/76c3606e5653aa1c0a4b05107dbd4e3e8136b030", "message": "Improve documentation", "committedDate": "2020-03-04T12:16:45Z", "type": "commit"}, {"oid": "78e606f453b67a1064efd7acef888781b538e0a6", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/78e606f453b67a1064efd7acef888781b538e0a6", "message": "Fix compiler problems in test - (Task #465)", "committedDate": "2020-03-04T12:17:09Z", "type": "commit"}, {"oid": "65de8ed8ec3fbd20de9559ed024287df5c429820", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/65de8ed8ec3fbd20de9559ed024287df5c429820", "message": "Move concept activation to dedicated class - (Task #101)\n\n(cherry picked from commit 6e7c7a448a598acbb7ea64c60e87646e09f6c988)", "committedDate": "2020-03-04T21:06:17Z", "type": "commit"}, {"oid": "e96adaea421e7bed1febca37ee19e8dd81d43b20", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/e96adaea421e7bed1febca37ee19e8dd81d43b20", "message": "Clean up concept activation - (Task #465)\n\n(cherry picked from commit ffac34510f06c7fa3b2f1bb1825f64ba6081298e)", "committedDate": "2020-03-04T21:06:32Z", "type": "commit"}, {"oid": "05014ca90d3b0d1621cde96d024d200beb08a694", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/05014ca90d3b0d1621cde96d024d200beb08a694", "message": "Refactoring - (Task #465)\n\n(cherry picked from commit 1c30a47a57fc1c2220d379835f82913ce40c0a36)", "committedDate": "2020-03-04T21:06:51Z", "type": "commit"}, {"oid": "f6c49ab28c2a0583cb76a24e4865efb09930f057", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/f6c49ab28c2a0583cb76a24e4865efb09930f057", "message": "Give functions better names - (Task #465)", "committedDate": "2020-03-04T21:14:55Z", "type": "commit"}, {"oid": "1baaa12fd326f2267201ad430ede54eb0dd62044", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/1baaa12fd326f2267201ad430ede54eb0dd62044", "message": "Improve documentation - (Task #465)", "committedDate": "2020-03-04T21:21:22Z", "type": "commit"}, {"oid": "b1666081bb9b905edf76955df9c2acf467ae47ba", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/b1666081bb9b905edf76955df9c2acf467ae47ba", "message": "Add test for loading concepts - (Task #465)", "committedDate": "2020-03-04T22:25:44Z", "type": "commit"}, {"oid": "85965b48181010b9427bbbf749e7e9d388442a69", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/85965b48181010b9427bbbf749e7e9d388442a69", "message": "Fix failing test cases - (Task #465)", "committedDate": "2020-03-04T22:45:01Z", "type": "commit"}, {"oid": "8c1ae254bbf7f2cf9569e998a65e9463b13f093c", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/8c1ae254bbf7f2cf9569e998a65e9463b13f093c", "message": "Add test with activation and migration combined - (Task #465)", "committedDate": "2020-03-05T01:29:17Z", "type": "commit"}, {"oid": "15c1656377cb97e4f21283757a3aac9fbdbb7c11", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/15c1656377cb97e4f21283757a3aac9fbdbb7c11", "message": "Add test for concept migration with new dependency - (Task #465)", "committedDate": "2020-03-05T09:41:50Z", "type": "commit"}, {"oid": "ce3a30d5381e38d583dd1c33cfc030f4e0565591", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/ce3a30d5381e38d583dd1c33cfc030f4e0565591", "message": "Add some style and documentation fixes - (Task #465)", "committedDate": "2020-03-05T09:58:55Z", "type": "commit"}, {"oid": "8024fa1ea050771dbd187b0cdbb470eeecb483d0", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/8024fa1ea050771dbd187b0cdbb470eeecb483d0", "message": "Fix not getting migrator - (Task #465)", "committedDate": "2020-03-05T13:15:12Z", "type": "commit"}, {"oid": "d49057dee9bc8c230f2e6795181c122cb4863556", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/d49057dee9bc8c230f2e6795181c122cb4863556", "message": "Remove new activator - (Task #465)", "committedDate": "2020-03-05T13:31:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM1Mjc5MA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/518#discussion_r388352790", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * @return a list of new required concepts\n          \n          \n            \n            \t * @return a list of new required concept names", "author": "andriikovalov-dlr", "createdAt": "2020-03-05T15:05:59Z", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/migrator/IMigrator.java", "diffHunk": "@@ -21,6 +23,15 @@\n \t\r\n \tString EXTENSION_POINT_ID = \"de.dlr.sc.virsat.model.edit.ConceptMigrator\";\r\n \t\r\n+\t/**\r\n+\t * Returns new dependencies of the new concept version. These have to be activated\r\n+\t * before migration can be done\r\n+\t * @param concept the concept to be migrated\r\n+\t * @param previousMigrator the previously executed migrator, can be null if none was executed before\r\n+\t * @return a list of new required concepts\r", "originalCommit": "d49057dee9bc8c230f2e6795181c122cb4863556", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQzOTI1OA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/518#discussion_r388439258", "bodyText": "Else throw exception?", "author": "andriikovalov-dlr", "createdAt": "2020-03-05T17:14:01Z", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/util/ConceptActivationHelper.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.concept.util;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.HashMap;\r\n+import java.util.HashSet;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import org.eclipse.core.runtime.CoreException;\r\n+import org.eclipse.core.runtime.IProgressMonitor;\r\n+import org.eclipse.core.runtime.Status;\r\n+import org.eclipse.emf.common.command.Command;\r\n+import org.eclipse.emf.ecore.EClass;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.emf.ecore.resource.Resource;\r\n+import org.eclipse.emf.ecore.util.EcoreUtil;\r\n+import org.eclipse.emf.edit.domain.EditingDomain;\r\n+import org.eclipse.emf.transaction.TransactionalEditingDomain;\r\n+\r\n+import de.dlr.sc.virsat.commons.datastructures.DependencyTree;\r\n+import de.dlr.sc.virsat.model.concept.migrator.ConceptMigrator;\r\n+import de.dlr.sc.virsat.model.concept.migrator.CreateMigrateConceptToLatestCommand;\r\n+import de.dlr.sc.virsat.model.concept.migrator.IMigrator;\r\n+import de.dlr.sc.virsat.model.dvlm.Repository;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferencePropertyHelper;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.IConceptTypeDefinition;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.registry.ActiveConceptConfigurationElement;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.util.ActiveConceptHelper;\r\n+import de.dlr.sc.virsat.model.dvlm.provider.DVLMEditPlugin;\r\n+\r\n+/**\r\n+ * This class helps activating concepts. Concepts are copied into the \r\n+ * repository. Furthermore, this class redirects references so that these can be \r\n+ * resolved from a platform plugin. References to other concepts are redirected \r\n+ * to their active version within the repository\r\n+ *\r\n+ */\r\n+public class ConceptActivationHelper {\r\n+\t\r\n+\tprivate static final String CONCEPT_PATH = \"/concept/concept.xmi\";\r\n+\tprotected Repository repository;\r\n+\t\r\n+\tpublic ConceptActivationHelper(Repository repository) {\r\n+\t\tthis.repository = repository;\r\n+\t}\r\n+\t\r\n+\tpublic ConceptActivationHelper(Concept concept) {\r\n+\t\tif (concept.eContainer() != null && concept.eContainer() instanceof Repository) {\r\n+\t\t\tthis.repository = ((Repository) concept.eContainer());\r\n+\t\t}\r", "originalCommit": "d49057dee9bc8c230f2e6795181c122cb4863556", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3OTk2MQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/518#discussion_r388779961", "bodyText": "Good idea \ud83d\udc4d", "author": "franzTobiasDLR", "createdAt": "2020-03-06T08:54:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQzOTI1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1MTk5OA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/518#discussion_r388451998", "bodyText": "Should we maybe also handle the situation when a dependency was removed in one of the concept versions?", "author": "andriikovalov-dlr", "createdAt": "2020-03-05T17:36:49Z", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/util/ConceptActivationHelper.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.concept.util;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.HashMap;\r\n+import java.util.HashSet;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import org.eclipse.core.runtime.CoreException;\r\n+import org.eclipse.core.runtime.IProgressMonitor;\r\n+import org.eclipse.core.runtime.Status;\r\n+import org.eclipse.emf.common.command.Command;\r\n+import org.eclipse.emf.ecore.EClass;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.emf.ecore.resource.Resource;\r\n+import org.eclipse.emf.ecore.util.EcoreUtil;\r\n+import org.eclipse.emf.edit.domain.EditingDomain;\r\n+import org.eclipse.emf.transaction.TransactionalEditingDomain;\r\n+\r\n+import de.dlr.sc.virsat.commons.datastructures.DependencyTree;\r\n+import de.dlr.sc.virsat.model.concept.migrator.ConceptMigrator;\r\n+import de.dlr.sc.virsat.model.concept.migrator.CreateMigrateConceptToLatestCommand;\r\n+import de.dlr.sc.virsat.model.concept.migrator.IMigrator;\r\n+import de.dlr.sc.virsat.model.dvlm.Repository;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferencePropertyHelper;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.IConceptTypeDefinition;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.registry.ActiveConceptConfigurationElement;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.util.ActiveConceptHelper;\r\n+import de.dlr.sc.virsat.model.dvlm.provider.DVLMEditPlugin;\r\n+\r\n+/**\r\n+ * This class helps activating concepts. Concepts are copied into the \r\n+ * repository. Furthermore, this class redirects references so that these can be \r\n+ * resolved from a platform plugin. References to other concepts are redirected \r\n+ * to their active version within the repository\r\n+ *\r\n+ */\r\n+public class ConceptActivationHelper {\r\n+\t\r\n+\tprivate static final String CONCEPT_PATH = \"/concept/concept.xmi\";\r\n+\tprotected Repository repository;\r\n+\t\r\n+\tpublic ConceptActivationHelper(Repository repository) {\r\n+\t\tthis.repository = repository;\r\n+\t}\r\n+\t\r\n+\tpublic ConceptActivationHelper(Concept concept) {\r\n+\t\tif (concept.eContainer() != null && concept.eContainer() instanceof Repository) {\r\n+\t\t\tthis.repository = ((Repository) concept.eContainer());\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Activate type by redirecting it to type in the repository\r\n+\t * @param type the type to be activates\r\n+\t * @return the activated type\r\n+\t */\r\n+\tpublic EObject getActiveType(EObject type) {\r\n+\t\t\r\n+\t\t// For EReferences to external EClasses ignore concept \r\n+\t\t// activation and convert URIs instead. The URI needs to be\r\n+\t\t// transformed from a PluginResourceURI to a PlattformPluginURI so \r\n+\t\t// that it can be resolved from the VirSat project in the eclipse runtime\r\n+\t\t// instance.\r\n+\t\t// VirSat does not ensure external model's storage.\r\n+\t\t// We only enable non-containment references.\r\n+\t\tif (type instanceof EClass) {\r\n+\t\t\treturn new EReferencePropertyHelper().activateEClassType((EClass) type);\r\n+\t\t}\r\n+\r\n+\t\t// In case we try to create a reference to an object which was not copied\r\n+\t\t// we should try to redirect that reference to an already active and existing concept\r\n+\t\tif (repository != null && repository.eResource() != null && type instanceof IConceptTypeDefinition) {\r\n+\t\t\tIConceptTypeDefinition typeDefinition = (IConceptTypeDefinition) type;\r\n+\t\r\n+\t\t\t// Get the fragment URI of the concept we want to reference to\r\n+\t\t\tString uriFragment = EcoreUtil.getURI(typeDefinition).fragment();\r\n+\t\t\r\n+\t\t\t// ask the repository if there is such an object with the given URI fragment\r\n+\t\t\tResource repoResource = repository.eResource();\r\n+\t\t\tEObject repoTypeDefinition = repoResource.getEObject(uriFragment);\r\n+\r\n+\t\t\t// If not throw a warning that there is something missing\r\n+\t\t\tif (repoTypeDefinition == null) {\r\n+\t\t\t\tString fqId = ActiveConceptHelper.getFullQualifiedId(typeDefinition);\r\n+\t\t\t\r\n+\t\t\t\tthrow new RuntimeException(\"Install missing concept first! Missing concept: \" + fqId);\r\n+\t\t\t}\r\n+\t\t\treturn repoTypeDefinition;\r\n+\t\t}\r\n+\t\t\r\n+\t\treturn type;\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Handle the activation of concepts from their configuration elements\r\n+\t * @param conceptConfigurationElements an array of concept configurations\r\n+\t * @param editingDomain the editing domain\r\n+\t */\r\n+\tpublic void activateConcepts(Object[] conceptConfigurationElements, EditingDomain editingDomain, IProgressMonitor progressMonitor) {\r\n+\t\t\r\n+\t\tList<Concept> concepts = new ArrayList<Concept>();\r\n+\t\tfor (Object acce : conceptConfigurationElements) {\r\n+\t\t\tif (acce instanceof ActiveConceptConfigurationElement) {\r\n+\t\t\t\tconcepts.add(((ActiveConceptConfigurationElement) acce).loadConceptFromPlugin());\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\tactivateConcepts(concepts, editingDomain, progressMonitor);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Handle the activation of concepts. Resolves dependencies in correct order. \r\n+\t * @param conceptConfigurationElements a list of concept configurations\r\n+\t * @param editingDomain the editing domain\r\n+\t */\r\n+\tpublic void activateConcepts(List<Concept> concepts, EditingDomain editingDomain, IProgressMonitor progressMonitor) {\r\n+\t\t\r\n+\t\t// Correctly sort the selected concepts depending on their dependencies\r\n+\t\tDependencyTree<String> dependencyTree = new DependencyTree<String>();\r\n+\t\tMap<String, Concept> selectedConcepts = new HashMap<String, Concept>();\r\n+\t\t\r\n+\t\t// Create a map conceptName -> concept and add all concept names to the dependency tree\r\n+\t\tfor (Concept concept : concepts) {\r\n+\t\t\tselectedConcepts.put(concept.getName(), concept);\r\n+\t\t\tdependencyTree.addDependencies(concept.getName(), new String[] {});\r\n+\t\t}\r\n+\t\t\r\n+\t\t// Now create the dependencies using the concept names as identifiers\r\n+\t\tfor (Concept concept : selectedConcepts.values()) {\r\n+\t\t\tList<String> conceptDependencyIds = new ArrayList<>(ActiveConceptHelper.getConceptDependencies(concept));\r\n+\t\t\tdependencyTree.addDependencies(concept.getName(), conceptDependencyIds);\r\n+\t\t}\r\n+\t\t\r\n+\t\tList<String> orderedConcepts = dependencyTree.getLinearOrder();\r\n+\t\t\r\n+\t\t// And then install them by using the ordered list of concept names\r\n+\t\t// and the map of concept names pointing to the already preloaded concepts\r\n+\t\tfor (String conceptName : orderedConcepts) {\r\n+\t\t\tif (selectedConcepts.containsKey(conceptName)) {\r\n+\t\t\t\tactivateConcept(selectedConcepts.get(conceptName), editingDomain, progressMonitor);\r\n+\t\t\t}\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Prepare a selected concept for activation. Checks if an older version is already in the repository and if so\r\n+\t * migrates it to the latest version, otherwise the concept will be simply added to the active concepts\r\n+\t * @param concept the selected concept\r\n+\t * @param editingDomain the editing domain\r\n+\t */\r\n+\tprotected void activateConcept(Concept concept, EditingDomain editingDomain, IProgressMonitor progressMonitor) {\r\n+\r\n+\t\t// Check if we already have this concept but with a different version added to the repository\r\n+\t\tConcept activeConcept = new ActiveConceptHelper(repository).getConcept(concept.getName());\r\n+\r\n+\t\tboolean conceptIsInRepository = activeConcept != null;\r\n+\t\t\r\n+\t\t// There is a concept of a different version in the repository\r\n+\t\tif (conceptIsInRepository && !activeConcept.getVersion().equals(concept.getVersion())) {\r\n+\t\t\t\t\r\n+\t\t\t//Check if new dependencies have to be added before migration\r\n+\t\t\tif (activeConcept.eContainer() != null && activeConcept.eContainer() instanceof Repository) {\r\n+\t\t\t\tRepository repository = (Repository) activeConcept.eContainer();\r\n+\t\t\t\tnew ConceptActivationHelper(repository).handleNewDependencies(activeConcept, editingDomain, progressMonitor);\r\n+\t\t\t}\r\n+\t\t\t\r\n+\t\t\ttry {\r\n+\t\t\t\tCommand migrateToLatestCommand = CreateMigrateConceptToLatestCommand.create(activeConcept, (TransactionalEditingDomain) editingDomain, progressMonitor);\r\n+\t\t\t\teditingDomain.getCommandStack().execute(migrateToLatestCommand);\r\n+\t\t\t} catch (CoreException e) {\r\n+\t\t\t\tDVLMEditPlugin.getPlugin().getLog().log(new Status(Status.ERROR, DVLMEditPlugin.PLUGIN_ID, \"Failed to do migration on active concept: \" + concept.getDisplayName(), e));\r\n+\t\t\t}\r\n+\t\t\t\r\n+\t\t}\r\n+\t\t\r\n+\t\tif (!conceptIsInRepository) {\r\n+\t\t\tCommand cmd = ActiveConceptConfigurationElement.createCopyConceptToRepository(editingDomain, concept, repository);\r\n+\t\t\teditingDomain.getCommandStack().execute(cmd);\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Activate new concept dependencies \r\n+\t * @param concept the concept to be prepared for migration\r\n+\t * @param editingDomain the editing domain\r\n+\t */\r\n+\tpublic void handleNewDependencies(Concept concept, EditingDomain editingDomain, IProgressMonitor progressMonitor) {\r", "originalCommit": "d49057dee9bc8c230f2e6795181c122cb4863556", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4MDc4Nw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/518#discussion_r388780787", "bodyText": "How would you handle that? I mean we can add that to the migrator, but we currently do not forsee removing deactivating concepts... So any idea what that would do with the removed dependency?", "author": "franzTobiasDLR", "createdAt": "2020-03-06T08:56:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1MTk5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI5OTg4OQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/518#discussion_r390299889", "bodyText": "Assume v1 has no dependency, v2 has a dependency, v3 has no dependency again. If I want to migrate from v1 to v3, I don't need to activate this dependency. But I guess it's not going to happen often, so we leave it", "author": "andriikovalov-dlr", "createdAt": "2020-03-10T13:09:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1MTk5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1MzgzMQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/518#discussion_r388453831", "bodyText": "According to ther javadoc, previousMigrator can be null, which would result in NPE here", "author": "andriikovalov-dlr", "createdAt": "2020-03-05T17:39:48Z", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/migrator/AMigrator.java", "diffHunk": "@@ -204,6 +222,34 @@ protected void removeFromTarget(ReferenceChange diff, boolean rightToLeft) {\n \tprotected void registerOldToNewIds() {\r\n \t}\r\n \t\r\n+\t@Override\r\n+\tpublic Set<String> getNewDependencies(Concept concept, IMigrator previousMigrator) {\r\n+\t\t\r\n+\t\tString conceptId = concept.getFullQualifiedName() + \"/\";\r\n+\t\tConcept conceptPrevious = loadConceptXmi(conceptId + previousMigrator.getResource());\r", "originalCommit": "d49057dee9bc8c230f2e6795181c122cb4863556", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxMjA3Mg==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/518#discussion_r388812072", "bodyText": "Oh true, and actually the same holds for the migration itself", "author": "franzTobiasDLR", "createdAt": "2020-03-06T09:59:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1MzgzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1NTE3OQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/518#discussion_r388455179", "bodyText": "Looks like we don't need conceptPrevious", "author": "andriikovalov-dlr", "createdAt": "2020-03-05T17:42:02Z", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/migrator/AMigrator.java", "diffHunk": "@@ -204,6 +222,34 @@ protected void removeFromTarget(ReferenceChange diff, boolean rightToLeft) {\n \tprotected void registerOldToNewIds() {\r\n \t}\r\n \t\r\n+\t@Override\r\n+\tpublic Set<String> getNewDependencies(Concept concept, IMigrator previousMigrator) {\r\n+\t\t\r\n+\t\tString conceptId = concept.getFullQualifiedName() + \"/\";\r\n+\t\tConcept conceptPrevious = loadConceptXmi(conceptId + previousMigrator.getResource());\r\n+\t\tConcept conceptNext = loadConceptXmi(conceptId + getResource());\r\n+\t\t\r\n+\t\treturn getNewDependencies(conceptPrevious, concept, conceptNext);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Return new dependencies of new concept versions\r\n+\t * @param conceptPrevious the previous concept version. A comparison between conceptPrevious\r\n+\t * and the conceptCurrent should not yield any differences.\r\n+\t * @param conceptCurrent the current concept as it is in the repository\r\n+\t * @param conceptNext the next concept version\r\n+\t * @return A set of new concept names\r\n+\t */\r\n+\tpublic Set<String> getNewDependencies(Concept conceptPrevious, Concept conceptCurrent, Concept conceptNext) {\r", "originalCommit": "d49057dee9bc8c230f2e6795181c122cb4863556", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxMjkwMw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/518#discussion_r388812903", "bodyText": "Yes, I just wanted to keep the interface analog to the migration... But I guess that only overcomplicates thinks", "author": "franzTobiasDLR", "createdAt": "2020-03-06T10:01:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1NTE3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2MDU2Mg==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/518#discussion_r388460562", "bodyText": "Could you please explain this fragment? When can the migrator be null, why are we returning a new resource set and what does it mean to the calling code?", "author": "andriikovalov-dlr", "createdAt": "2020-03-05T17:52:27Z", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/migrator/AMigrator.java", "diffHunk": "@@ -608,6 +656,13 @@ public EObject getEObject(URI uri, boolean loadOnDemand) {\n \t\tString nsURI = ReleaseUtils.getNamespaceURI(conceptResourceUri);\r\n \t\tMigrator migrator = MigratorRegistry.getInstance().getMigrator(nsURI);\r\n \t\t\r\n+\t\tif (migrator == null) {\r\n+\t\t\tDVLMEditPlugin.getPlugin().getLog().log(new Status(Status.ERROR, DVLMEditPlugin.PLUGIN_ID, \r\n+\t\t\t\t\t\"Could not get DVLM migrator for concept resource: \" + conceptResourceUri));\r\n+\t\t\t//Check that all dependent concepts and their plugins are available in platform...  \r\n+\t\t\treturn new ResourceSetImpl();\r", "originalCommit": "d49057dee9bc8c230f2e6795181c122cb4863556", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4NDE1NA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/518#discussion_r388784154", "bodyText": "Well, I had the problem that a test case was failing in the maven build (only in the maven build!) because there the migrator was \"null\". I was debugging that for several hours until I tried returning a simple resource set in that case... The resource set then informed me that a required concepts of that cocept could not be found, because its plugin was not found... So I simply had to add the dependent concept's plugin as required plugin in the test fragement...\nIf you don't like that we can also remove this fragement... But I was that pissed of that the migrator was just \"null\" without any explonation that I added this pease of code. I had that pronblem some time ago and I think there that would have helped as well", "author": "franzTobiasDLR", "createdAt": "2020-03-06T09:03:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2MDU2Mg=="}], "type": "inlineReview"}, {"oid": "cd534cafc5394635b244b93313b9a88243f13f14", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/cd534cafc5394635b244b93313b9a88243f13f14", "message": "Update de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/migrator/IMigrator.java\n\nCo-Authored-By: andriikovalov-dlr <48556822+andriikovalov-dlr@users.noreply.github.com>", "committedDate": "2020-03-06T08:53:50Z", "type": "commit"}, {"oid": "cf6b20803817fdcefa4a6b94f31634b5eb5e4b00", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/cf6b20803817fdcefa4a6b94f31634b5eb5e4b00", "message": "Update accoring to feedback in review - (Task #465)", "committedDate": "2020-03-06T10:21:07Z", "type": "commit"}, {"oid": "a7f7046f40d5e2fe942197c82d433b1318175fba", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/a7f7046f40d5e2fe942197c82d433b1318175fba", "message": "Merge branch 'feature/task_465-Migration_with_new_dependencies' of https://github.com/virtualsatellite/VirtualSatellite4-Core.git into feature/task_465-Migration_with_new_dependencies", "committedDate": "2020-03-06T10:21:22Z", "type": "commit"}, {"oid": "bb20bd490cb4d29d959349bf99e13bd1a685b3d8", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/bb20bd490cb4d29d959349bf99e13bd1a685b3d8", "message": "Fix migrator test - (Task #465)", "committedDate": "2020-03-15T18:50:49Z", "type": "commit"}, {"oid": "0b97576cf5f34421692e31b9cbb02defd538920f", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/0b97576cf5f34421692e31b9cbb02defd538920f", "message": "Merge branch 'development' into feature/task_465-Migration_with_new_dependencies", "committedDate": "2020-03-15T19:07:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2ODk2MA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/518#discussion_r393668960", "bodyText": "Maybe a little hint why the concept has to be placed into the repository?", "author": "PhilMFischer", "createdAt": "2020-03-17T13:14:42Z", "path": "de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/concept/migrator/AMigratorTest.java", "diffHunk": "@@ -136,6 +139,8 @@ public void testMigrateAddStructuralElement() {\n \t\tConcept conceptPrevious = ConceptsFactory.eINSTANCE.createConcept();\r\n \t\tConcept conceptCurrent = ConceptsFactory.eINSTANCE.createConcept();\r\n \t\tConcept conceptNext = ConceptsFactory.eINSTANCE.createConcept();\r\n+\t\tRepository repository = DVLMFactory.eINSTANCE.createRepository();\r\n+\t\trepository.getActiveConcepts().add(conceptCurrent);\r", "originalCommit": "0b97576cf5f34421692e31b9cbb02defd538920f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f19e577b2c7896a390d3a97b77533b573af27951", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/f19e577b2c7896a390d3a97b77533b573af27951", "message": "Add comments about why concepts have to be in repository - (Task #465)", "committedDate": "2020-03-19T09:35:27Z", "type": "commit"}, {"oid": "99535db7b4913bba8e94f6677c0655403975167e", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/99535db7b4913bba8e94f6677c0655403975167e", "message": "Merge branch 'feature/task_465-Migration_with_new_dependencies' of https://github.com/virtualsatellite/VirtualSatellite4-Core.git into feature/task_465-Migration_with_new_dependencies", "committedDate": "2020-03-19T09:35:46Z", "type": "commit"}]}