{"pr_number": 834, "pr_title": "Add overloaded Listen Bucket Notification method", "pr_createdAt": "2020-01-06T07:44:17Z", "pr_url": "https://github.com/minio/minio-java/pull/834", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU2MjkyOQ==", "url": "https://github.com/minio/minio-java/pull/834#discussion_r363562929", "bodyText": "My suggestion is to deprecate this style of API and introduce lazy eval'ed style like\npublic Iterable<Result<NotificationInfo>> listenBucketNotification(String bucketName, String prefix, String suffix, String[] events)\nIf we stick with current style, the fix is just while (continueListening || scanner.hasNext())", "author": "balamurugana", "createdAt": "2020-01-07T01:56:49Z", "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -5741,12 +5743,16 @@ public void listenBucketNotification(String bucketName, String prefix, String su\n       scanner = new Scanner(response.body().charStream());\n       scanner.useDelimiter(\"\\n\");\n       while (scanner.hasNext()) {", "originalCommit": "3f4146b1d1727af0f73a71183b0e0a227cdd6d30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3NjgwNg==", "url": "https://github.com/minio/minio-java/pull/834#discussion_r363576806", "bodyText": "A more idiomatic Java style is preferred, so I think lazy evaled style is better and bump the version for breakage", "author": "harshavardhana", "createdAt": "2020-01-07T03:17:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU2MjkyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMyMTQ4Ng==", "url": "https://github.com/minio/minio-java/pull/834#discussion_r364321486", "bodyText": "@balamurugana  need your input on this . I have implemented the listenBucketNotification as below but it waits at scanner.next() .Please review the below code.\npublic Iterable<Result<NotificationInfo>> listenBucketNotification(String bucketName, String prefix,\n      String suffix, String[] events) {\n    return new Iterable<Result<NotificationInfo>>() {\n\n      @Override\n      public Iterator<Result<NotificationInfo>> iterator() {\n        return new Iterator<Result<NotificationInfo>>() {\n\n          private Result<NotificationInfo> error;\n          NotificationInfo ni;\n          private boolean completed = false;\n\n          private synchronized void populate() {\n            Multimap<String,String> queryParamMap = HashMultimap.create();\n            queryParamMap.put(\"prefix\", prefix);\n            queryParamMap.put(\"suffix\", suffix);\n            for (String event: events) {\n              queryParamMap.put(\"events\", event);\n            }\n\n            String bodyContent = \"\";\n            Scanner scanner = null;\n            HttpResponse response = null;\n            ObjectMapper mapper = new ObjectMapper();\n\n            try {\n              response = executeReq(Method.GET, getRegion(bucketName),\n                bucketName, \"\", null, queryParamMap, null, 0);\n              scanner = new Scanner(response.body().charStream());\n              scanner.useDelimiter(\"\\n\");\n              if (scanner.hasNext()) {\n                bodyContent = scanner.next().trim();\n                if (!bodyContent.equals(\"\")) {\n                  ni = mapper.readValue(bodyContent, NotificationInfo.class);\n                }\n              }\n            } catch (InvalidBucketNameException | NoSuchAlgorithmException | InsufficientDataException | IOException\n              | InvalidKeyException | NoResponseException | XmlPullParserException | ErrorResponseException\n              | InternalException | InvalidResponseException | RuntimeException e) {\n              this.error = new Result<>(null, e);\n            }             finally {\n              if (response != null) {\n                response.body().close();\n              }\n              if (scanner != null) {\n                scanner.close();\n              }\n            }\n\n          }\n\n\n          @Override\n          public boolean hasNext() {\n            if (this.completed) {\n              return false;\n            }\n\n            if (this.error == null ) {\n              populate();\n            }\n\n            if (this.ni == null ) {\n              populate();\n            }\n\n            this.completed = true;\n            return false;\n          }\n\n          @Override\n          public Result<NotificationInfo> next() {\n            if (this.completed) {\n              throw new NoSuchElementException();\n            }\n            if (this.error == null ) {\n              populate();\n            }\n            this.completed = true;\n            throw new NoSuchElementException();\n          }\n\n          @Override\n          public void remove() {\n            throw new UnsupportedOperationException();\n          }\n        };\n      }\n    };\n  }", "author": "sinhaashish", "createdAt": "2020-01-08T16:26:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU2MjkyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM0NjQxNQ==", "url": "https://github.com/minio/minio-java/pull/834#discussion_r364346415", "bodyText": "This looks neat \ud83d\udc4d @sinhaashish unless @balamurugana has any concerns", "author": "harshavardhana", "createdAt": "2020-01-08T17:16:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU2MjkyOQ=="}], "type": "inlineReview"}, {"oid": "d56034ae65e5693f62944d8b2e98fa48cbd8eb0f", "url": "https://github.com/minio/minio-java/commit/d56034ae65e5693f62944d8b2e98fa48cbd8eb0f", "message": "Modify Listen Bucket Notification signature", "committedDate": "2020-01-11T20:18:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0MTMwNQ==", "url": "https://github.com/minio/minio-java/pull/834#discussion_r365541305", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               *  client.listenBucketNotification(\"sinha1\", \"\", \"\", events).iterator();\n          \n          \n            \n               *  client.listenBucketNotification(\"bucketname\", \"\", \"\", events).iterator();", "author": "kannappanr", "createdAt": "2020-01-11T20:47:05Z", "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -5692,77 +5693,110 @@ public void removeIncompleteUpload(String bucketName, String objectName)\n     }\n   }\n \n+\n   /**\n-   * Listen to bucket notifications.\n+   * Listen to bucket notifications. As bucket notification are lazily executed, its required\n+   * to iterate the returned Iterable.\n+   *\n+   * </p><b>Example:</b><br>\n+\n+   * <pre>{@code\n+   * Iterator<Result<NotificationInfo>> it =\n+   *  client.listenBucketNotification(\"sinha1\", \"\", \"\", events).iterator();", "originalCommit": "d56034ae65e5693f62944d8b2e98fa48cbd8eb0f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fbc3c874e0051fbfe4d87b00a2e4cfd2464fe21a", "url": "https://github.com/minio/minio-java/commit/fbc3c874e0051fbfe4d87b00a2e4cfd2464fe21a", "message": "Modify Listen Bucket Notification signature", "committedDate": "2020-01-11T20:47:46Z", "type": "forcePushed"}, {"oid": "60846c612d4a20d493acbb0d13691ccdcc071cd4", "url": "https://github.com/minio/minio-java/commit/60846c612d4a20d493acbb0d13691ccdcc071cd4", "message": "Modify Listen Bucket Notification signature", "committedDate": "2020-01-11T20:55:44Z", "type": "forcePushed"}, {"oid": "cd86d9d10141632371b21ab4f4ea1c183c6d9d4c", "url": "https://github.com/minio/minio-java/commit/cd86d9d10141632371b21ab4f4ea1c183c6d9d4c", "message": "Modify Listen Bucket Notification signature", "committedDate": "2020-01-11T20:58:28Z", "type": "forcePushed"}, {"oid": "ba39dca2d167a3dc3685ce62e6e09fe97ebc63af", "url": "https://github.com/minio/minio-java/commit/ba39dca2d167a3dc3685ce62e6e09fe97ebc63af", "message": "Add overloaded listen bucket notification method", "committedDate": "2020-01-13T13:12:42Z", "type": "forcePushed"}, {"oid": "793e1e0ae30f4e7ae9109dc0d54d1334cf740321", "url": "https://github.com/minio/minio-java/commit/793e1e0ae30f4e7ae9109dc0d54d1334cf740321", "message": "Add overloaded listen bucket notification method", "committedDate": "2020-01-14T03:59:17Z", "type": "forcePushed"}, {"oid": "e12e64cae1fcff6ce166078dba24d7d6f7cf03ea", "url": "https://github.com/minio/minio-java/commit/e12e64cae1fcff6ce166078dba24d7d6f7cf03ea", "message": "Add overloaded listen bucket notification method", "committedDate": "2020-01-15T12:52:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjkwMjI4Ng==", "url": "https://github.com/minio/minio-java/pull/834#discussion_r366902286", "bodyText": "do not make changes in deprecated methods instead you remove them in separate PR", "author": "balamurugana", "createdAt": "2020-01-15T14:24:37Z", "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -5717,6 +5719,7 @@ public void removeIncompleteUpload(String bucketName, String objectName)\n    *\n    */\n \n+  @Deprecated", "originalCommit": "e12e64cae1fcff6ce166078dba24d7d6f7cf03ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjkwMzAyNQ==", "url": "https://github.com/minio/minio-java/pull/834#discussion_r366903025", "bodyText": "this is wrong message. you would need to print the event", "author": "balamurugana", "createdAt": "2020-01-15T14:25:53Z", "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -5763,6 +5770,56 @@ public void listenBucketNotification(String bucketName, String prefix, String su\n   }\n \n \n+\n+\n+  /**\n+   * Listen to bucket notifications. As bucket notification are lazily executed, its required\n+   * to iterate.\n+   *\n+   * </p><b>Example:</b><br>\n+   * <pre>{@code\n+   * String[] events = {\"s3:ObjectCreated:*\", \"s3:ObjectAccessed:*\"};\n+   *   try (CloseableIterator<Result<NotificationInfo>> ci = client\n+   *     .listenBucketNotification(\"bucket-name\", \"\", \"\", events).getMyCloseableIterator()) {\n+   *      while (ci.hasNext()) {\n+   *        NotificationInfo info = ci.next().get();\n+   *        if ( info != null) {\n+   *\n+   *      System.out.println(info.records[0].s3.bucket.name + \"/\"\n+   *          + info.records[0].s3.object.key + \" has been created\");", "originalCommit": "e12e64cae1fcff6ce166078dba24d7d6f7cf03ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjkwMzUxMQ==", "url": "https://github.com/minio/minio-java/pull/834#discussion_r366903511", "bodyText": "you could use executeGet()", "author": "balamurugana", "createdAt": "2020-01-15T14:26:43Z", "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -5763,6 +5770,56 @@ public void listenBucketNotification(String bucketName, String prefix, String su\n   }\n \n \n+\n+\n+  /**\n+   * Listen to bucket notifications. As bucket notification are lazily executed, its required\n+   * to iterate.\n+   *\n+   * </p><b>Example:</b><br>\n+   * <pre>{@code\n+   * String[] events = {\"s3:ObjectCreated:*\", \"s3:ObjectAccessed:*\"};\n+   *   try (CloseableIterator<Result<NotificationInfo>> ci = client\n+   *     .listenBucketNotification(\"bucket-name\", \"\", \"\", events).getMyCloseableIterator()) {\n+   *      while (ci.hasNext()) {\n+   *        NotificationInfo info = ci.next().get();\n+   *        if ( info != null) {\n+   *\n+   *      System.out.println(info.records[0].s3.bucket.name + \"/\"\n+   *          + info.records[0].s3.object.key + \" has been created\");\n+   *       break;\n+   *      }\n+   *    }\n+   *  }\n+   *  }</pre>\n+   *\n+   * @param bucketName Bucket name.\n+   * @param prefix Prefix of concerned objects events.\n+   * @param suffix Suffix of concerned objects events.\n+   * @param events List of events to watch.\n+   *\n+   * @return NotificationListener\n+   */\n+  public NotificationListener listenBucketNotification(String bucketName, String prefix,\n+      String suffix, String[] events)\n+    throws IOException, InvalidKeyException, NoSuchAlgorithmException, InsufficientDataException,\n+    InvalidResponseException, InternalException, NoResponseException, InvalidBucketNameException,\n+    XmlPullParserException, ErrorResponseException {\n+\n+    Multimap<String, String> queryParamMap = HashMultimap.create();\n+    queryParamMap.put(\"prefix\", prefix);\n+    queryParamMap.put(\"suffix\", suffix);\n+    for (String event : events) {\n+      queryParamMap.put(\"events\", event);\n+    }\n+    HttpResponse response = executeReq(Method.GET, getRegion(bucketName),", "originalCommit": "e12e64cae1fcff6ce166078dba24d7d6f7cf03ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUyNTcwNQ==", "url": "https://github.com/minio/minio-java/pull/834#discussion_r367525705", "bodyText": "we cant use executeGet as it uses a HashMap for queryParameter. While using a hashmap the values are overridden in the below code . that is for the key the values will be replaced if events array has more than one entry.\nfor (String event : events) {\n      queryParamMap.put(\"events\", event);\n    }\n\nwhile executeReq uses Multimap in which the values are appended for the key events.", "author": "sinhaashish", "createdAt": "2020-01-16T16:38:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjkwMzUxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjkwNDU4NQ==", "url": "https://github.com/minio/minio-java/pull/834#discussion_r366904585", "bodyText": "cleanup all spacing and styling", "author": "balamurugana", "createdAt": "2020-01-15T14:28:39Z", "path": "api/src/main/java/io/minio/NotificationListener.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package io.minio;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.minio.notification.NotificationInfo;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.Scanner;\n+\n+/**\n+ * NotificationListener is used for listening notification.\n+ */\n+public class NotificationListener  {\n+\n+  Scanner sc = null;\n+  String notificationString = \"\";\n+  NotificationInfo ni = null;\n+  Reader inputReader;\n+  boolean isClosed = false;\n+  ObjectMapper mapper = new ObjectMapper();\n+\n+  NotificationListener( Reader reader) {\n+    this.inputReader = reader;\n+\n+    this.sc = new Scanner(inputReader);\n+    this.sc.useDelimiter(\"\\n\");\n+  }\n+  /**\n+   * Return a closeable iterator.\n+   */", "originalCommit": "e12e64cae1fcff6ce166078dba24d7d6f7cf03ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjkwNTU5Nw==", "url": "https://github.com/minio/minio-java/pull/834#discussion_r366905597", "bodyText": "this is incorrect. this class supposes to have implemented ClosableIterable", "author": "balamurugana", "createdAt": "2020-01-15T14:30:27Z", "path": "api/src/main/java/io/minio/NotificationListener.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package io.minio;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.minio.notification.NotificationInfo;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.Scanner;\n+\n+/**\n+ * NotificationListener is used for listening notification.\n+ */\n+public class NotificationListener  {\n+\n+  Scanner sc = null;\n+  String notificationString = \"\";\n+  NotificationInfo ni = null;\n+  Reader inputReader;\n+  boolean isClosed = false;\n+  ObjectMapper mapper = new ObjectMapper();\n+\n+  NotificationListener( Reader reader) {\n+    this.inputReader = reader;\n+\n+    this.sc = new Scanner(inputReader);\n+    this.sc.useDelimiter(\"\\n\");\n+  }\n+  /**\n+   * Return a closeable iterator.\n+   */\n+\n+  public  CloseableIterator<Result<NotificationInfo>> getMyCloseableIterator() {", "originalCommit": "e12e64cae1fcff6ce166078dba24d7d6f7cf03ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjkwNjkzNw==", "url": "https://github.com/minio/minio-java/pull/834#discussion_r366906937", "bodyText": "its not good to print exceptions", "author": "balamurugana", "createdAt": "2020-01-15T14:32:51Z", "path": "api/src/main/java/io/minio/NotificationListener.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package io.minio;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.minio.notification.NotificationInfo;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.Scanner;\n+\n+/**\n+ * NotificationListener is used for listening notification.\n+ */\n+public class NotificationListener  {\n+\n+  Scanner sc = null;\n+  String notificationString = \"\";\n+  NotificationInfo ni = null;\n+  Reader inputReader;\n+  boolean isClosed = false;\n+  ObjectMapper mapper = new ObjectMapper();\n+\n+  NotificationListener( Reader reader) {\n+    this.inputReader = reader;\n+\n+    this.sc = new Scanner(inputReader);\n+    this.sc.useDelimiter(\"\\n\");\n+  }\n+  /**\n+   * Return a closeable iterator.\n+   */\n+\n+  public  CloseableIterator<Result<NotificationInfo>> getMyCloseableIterator() {\n+    return new CloseableIterator<Result<NotificationInfo>>() {\n+\n+      @Override\n+      public boolean hasNext() {\n+        if (isClosed) {\n+          return false;\n+        }\n+        if (!NotificationListener.this.sc.hasNext()) {\n+          try {\n+            close();\n+          } catch (IOException e) {\n+            e.printStackTrace();", "originalCommit": "e12e64cae1fcff6ce166078dba24d7d6f7cf03ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjkwNzMzMA==", "url": "https://github.com/minio/minio-java/pull/834#discussion_r366907330", "bodyText": "you would need to also check for empty events and ignore them here", "author": "balamurugana", "createdAt": "2020-01-15T14:33:33Z", "path": "api/src/main/java/io/minio/NotificationListener.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package io.minio;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.minio.notification.NotificationInfo;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.Scanner;\n+\n+/**\n+ * NotificationListener is used for listening notification.\n+ */\n+public class NotificationListener  {\n+\n+  Scanner sc = null;\n+  String notificationString = \"\";\n+  NotificationInfo ni = null;\n+  Reader inputReader;\n+  boolean isClosed = false;\n+  ObjectMapper mapper = new ObjectMapper();\n+\n+  NotificationListener( Reader reader) {\n+    this.inputReader = reader;\n+\n+    this.sc = new Scanner(inputReader);\n+    this.sc.useDelimiter(\"\\n\");\n+  }\n+  /**\n+   * Return a closeable iterator.\n+   */\n+\n+  public  CloseableIterator<Result<NotificationInfo>> getMyCloseableIterator() {\n+    return new CloseableIterator<Result<NotificationInfo>>() {\n+\n+      @Override\n+      public boolean hasNext() {\n+        if (isClosed) {\n+          return false;\n+        }\n+        if (!NotificationListener.this.sc.hasNext()) {", "originalCommit": "e12e64cae1fcff6ce166078dba24d7d6f7cf03ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjkwNzgzOQ==", "url": "https://github.com/minio/minio-java/pull/834#discussion_r366907839", "bodyText": "this while should be in hasNext()", "author": "balamurugana", "createdAt": "2020-01-15T14:34:30Z", "path": "api/src/main/java/io/minio/NotificationListener.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package io.minio;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.minio.notification.NotificationInfo;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.Scanner;\n+\n+/**\n+ * NotificationListener is used for listening notification.\n+ */\n+public class NotificationListener  {\n+\n+  Scanner sc = null;\n+  String notificationString = \"\";\n+  NotificationInfo ni = null;\n+  Reader inputReader;\n+  boolean isClosed = false;\n+  ObjectMapper mapper = new ObjectMapper();\n+\n+  NotificationListener( Reader reader) {\n+    this.inputReader = reader;\n+\n+    this.sc = new Scanner(inputReader);\n+    this.sc.useDelimiter(\"\\n\");\n+  }\n+  /**\n+   * Return a closeable iterator.\n+   */\n+\n+  public  CloseableIterator<Result<NotificationInfo>> getMyCloseableIterator() {\n+    return new CloseableIterator<Result<NotificationInfo>>() {\n+\n+      @Override\n+      public boolean hasNext() {\n+        if (isClosed) {\n+          return false;\n+        }\n+        if (!NotificationListener.this.sc.hasNext()) {\n+          try {\n+            close();\n+          } catch (IOException e) {\n+            e.printStackTrace();\n+          }\n+          return false;\n+        }\n+        return true;\n+      }\n+\n+      @Override\n+      public Result<NotificationInfo> next() {\n+        try {\n+          while (sc.hasNext()) {", "originalCommit": "e12e64cae1fcff6ce166078dba24d7d6f7cf03ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU2MTEwNg==", "url": "https://github.com/minio/minio-java/pull/834#discussion_r367561106", "bodyText": "When i tried to have the while in hasNext() as shown in the code below\n@Override\n      public boolean hasNext()  {\n        if (isClosed) {\n          return false;\n        }\n        if (!scanner.hasNext()) {\n          try {\n            close();\n          } catch (IOException e) {\n            exception = e;\n          }\n          return false;\n        }\n\n        while (scanner.hasNext()) {\n          notificationString = scanner.next().trim();\n          if (notificationString.equals(\"\")) {\n            continue;\n          } else {\n            break;\n          }\n\n        }\n        return true;\n      }\n\n      @Override\n      public Result<NotificationInfo> next() {\n        try {\n          notificationInfo = mapper.readValue(notificationString, NotificationInfo.class);\n        } catch (JsonParseException e) {\n          exception = e;\n        } catch (  JsonMappingException mappingEx) {\n          exception = mappingEx;\n        } catch ( IOException ioexception) {\n          exception = ioexception;\n        }\n        if ( exception != null ) {\n          return new Result<>(null, exception);\n        }\n        return new Result<>(notificationInfo, null);\n      }\n\nGot a build error as shown\nio.minio.MinioClient$8.next() can't throw NoSuchElementException\n\nThus while is not a part of hasNext", "author": "sinhaashish", "createdAt": "2020-01-16T17:47:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjkwNzgzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjkxMTMxOA==", "url": "https://github.com/minio/minio-java/pull/834#discussion_r366911318", "bodyText": "below logic is crisp and clear\nif (!isClosed) {\n    try {\n        reader.close();\n        scanner.close();\n    } finally {\n        reader = null;\n        scanner = null;\n        isClosed = true;\n    }\n}", "author": "balamurugana", "createdAt": "2020-01-15T14:40:32Z", "path": "api/src/main/java/io/minio/NotificationListener.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package io.minio;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.minio.notification.NotificationInfo;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.Scanner;\n+\n+/**\n+ * NotificationListener is used for listening notification.\n+ */\n+public class NotificationListener  {\n+\n+  Scanner sc = null;\n+  String notificationString = \"\";\n+  NotificationInfo ni = null;\n+  Reader inputReader;\n+  boolean isClosed = false;\n+  ObjectMapper mapper = new ObjectMapper();\n+\n+  NotificationListener( Reader reader) {\n+    this.inputReader = reader;\n+\n+    this.sc = new Scanner(inputReader);\n+    this.sc.useDelimiter(\"\\n\");\n+  }\n+  /**\n+   * Return a closeable iterator.\n+   */\n+\n+  public  CloseableIterator<Result<NotificationInfo>> getMyCloseableIterator() {\n+    return new CloseableIterator<Result<NotificationInfo>>() {\n+\n+      @Override\n+      public boolean hasNext() {\n+        if (isClosed) {\n+          return false;\n+        }\n+        if (!NotificationListener.this.sc.hasNext()) {\n+          try {\n+            close();\n+          } catch (IOException e) {\n+            e.printStackTrace();\n+          }\n+          return false;\n+        }\n+        return true;\n+      }\n+\n+      @Override\n+      public Result<NotificationInfo> next() {\n+        try {\n+          while (sc.hasNext()) {\n+            notificationString = NotificationListener.this.sc.next().trim();\n+            if (!notificationString.equals(\"\")) {\n+              ni = mapper.readValue(notificationString, NotificationInfo.class);\n+              break;\n+            } else {\n+              continue;\n+            }\n+          }\n+        } catch (IOException e) {\n+          return new Result<>(null, e);\n+        }\n+        return new Result<>(ni, null);\n+      }\n+\n+      @Override\n+      public void close() throws IOException {\n+        if (!isClosed) {\n+          if (NotificationListener.this.inputReader != null) {\n+            inputReader.close();\n+          }\n+\n+          if (NotificationListener.this.sc != null) {\n+            sc.close();\n+          }\n+          isClosed = true;\n+        }", "originalCommit": "e12e64cae1fcff6ce166078dba24d7d6f7cf03ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjkxMzU1MQ==", "url": "https://github.com/minio/minio-java/pull/834#discussion_r366913551", "bodyText": "use reader, scanner, notificationInfo instead of inputReader, sc, ni\ngroup relevant fields together reader, scanner and mapper, notificationInfo, then isClosed", "author": "balamurugana", "createdAt": "2020-01-15T14:44:41Z", "path": "api/src/main/java/io/minio/NotificationListener.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package io.minio;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.minio.notification.NotificationInfo;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.Scanner;\n+\n+/**\n+ * NotificationListener is used for listening notification.\n+ */\n+public class NotificationListener  {\n+\n+  Scanner sc = null;\n+  String notificationString = \"\";\n+  NotificationInfo ni = null;\n+  Reader inputReader;\n+  boolean isClosed = false;\n+  ObjectMapper mapper = new ObjectMapper();", "originalCommit": "e12e64cae1fcff6ce166078dba24d7d6f7cf03ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1c9eb15a60bb13dae8633204aa0454142c77595d", "url": "https://github.com/minio/minio-java/commit/1c9eb15a60bb13dae8633204aa0454142c77595d", "message": "Add overloaded listen bucket notification method", "committedDate": "2020-01-16T17:38:53Z", "type": "forcePushed"}, {"oid": "6e67dec2dd531235e95a6e60255fb8395e0a55b7", "url": "https://github.com/minio/minio-java/commit/6e67dec2dd531235e95a6e60255fb8395e0a55b7", "message": "Add overloaded listen bucket notification method", "committedDate": "2020-01-16T17:55:36Z", "type": "forcePushed"}, {"oid": "1b0708aabb8ea8907728cf3211baab80feef694c", "url": "https://github.com/minio/minio-java/commit/1b0708aabb8ea8907728cf3211baab80feef694c", "message": "Add overloaded listen bucket notification method", "committedDate": "2020-01-17T13:06:14Z", "type": "forcePushed"}, {"oid": "16a6c73553dca1d21adca461ddc0be043cdfe54e", "url": "https://github.com/minio/minio-java/commit/16a6c73553dca1d21adca461ddc0be043cdfe54e", "message": "Add overloaded listen bucket notification method", "committedDate": "2020-01-17T13:13:39Z", "type": "forcePushed"}, {"oid": "5a1a10c232f9d14480d67b7357591f1e9735428a", "url": "https://github.com/minio/minio-java/commit/5a1a10c232f9d14480d67b7357591f1e9735428a", "message": "Add overloaded listen bucket notification method", "committedDate": "2020-01-17T13:21:57Z", "type": "forcePushed"}, {"oid": "74f7d1d459d4cd80d57284652a21e753f6d2d91a", "url": "https://github.com/minio/minio-java/commit/74f7d1d459d4cd80d57284652a21e753f6d2d91a", "message": "Add overloaded listen bucket notification method", "committedDate": "2020-01-17T13:25:11Z", "type": "forcePushed"}, {"oid": "ea11fffda3a67f8882d827d1d92767a516df57ad", "url": "https://github.com/minio/minio-java/commit/ea11fffda3a67f8882d827d1d92767a516df57ad", "message": "Add overloaded listen bucket notification method", "committedDate": "2020-01-17T13:40:10Z", "type": "forcePushed"}, {"oid": "59bfd360f872267b7133bc340cd36f52a30f20d7", "url": "https://github.com/minio/minio-java/commit/59bfd360f872267b7133bc340cd36f52a30f20d7", "message": "Add overloaded listen bucket notification method", "committedDate": "2020-01-17T14:08:28Z", "type": "forcePushed"}, {"oid": "66f7e1ed6448cca8e8f47b149afb2449b6e385c0", "url": "https://github.com/minio/minio-java/commit/66f7e1ed6448cca8e8f47b149afb2449b6e385c0", "message": "Add overloaded listen bucket notification method", "committedDate": "2020-01-17T14:40:27Z", "type": "forcePushed"}, {"oid": "999324ed8f714a1bddda036499e106437f3a0559", "url": "https://github.com/minio/minio-java/commit/999324ed8f714a1bddda036499e106437f3a0559", "message": "Add overloaded listen bucket notification method", "committedDate": "2020-01-17T14:44:29Z", "type": "forcePushed"}, {"oid": "ee77575f5769c8ff339006cdb94ac5e5e72f222a", "url": "https://github.com/minio/minio-java/commit/ee77575f5769c8ff339006cdb94ac5e5e72f222a", "message": "Add overloaded listen bucket notification method", "committedDate": "2020-01-17T14:51:30Z", "type": "forcePushed"}, {"oid": "2f3fea7439d10c6dbcb4ee2197680df5248b21fa", "url": "https://github.com/minio/minio-java/commit/2f3fea7439d10c6dbcb4ee2197680df5248b21fa", "message": "Add overloaded listen bucket notification method", "committedDate": "2020-01-17T14:55:48Z", "type": "forcePushed"}, {"oid": "2be0d8c210ddb62fd9e4a8b768608a5b41b27c1f", "url": "https://github.com/minio/minio-java/commit/2be0d8c210ddb62fd9e4a8b768608a5b41b27c1f", "message": "Add overloaded listen bucket notification method", "committedDate": "2020-01-17T14:59:35Z", "type": "forcePushed"}, {"oid": "5851e2c49e0edcd38ac64d99082da3cbe0a0fa06", "url": "https://github.com/minio/minio-java/commit/5851e2c49e0edcd38ac64d99082da3cbe0a0fa06", "message": "Add overloaded listen bucket notification method", "committedDate": "2020-01-17T15:07:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2OTgxOQ==", "url": "https://github.com/minio/minio-java/pull/834#discussion_r368069819", "bodyText": "you could remove this if block i.e. let it run indefinitely in the example.", "author": "balamurugana", "createdAt": "2020-01-17T18:15:52Z", "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -5762,6 +5763,131 @@ public void listenBucketNotification(String bucketName, String prefix, String su\n     }\n   }\n \n+  /**\n+   * Listen to bucket notifications. As bucket notification are lazily executed,\n+   * its required to iterate. The returned closeable iterator must be used with\n+   * try with resource or else the stream will not be closed.\n+   *\n+   * </p><b>Example:</b><br>\n+   * <pre>{@code\n+   *  try (CloseableIterator<Result<NotificationInfo>> ci = client\n+   * .listenBucketNotification(\"my-bucket\", \"\", \"\", events)) {\n+   *  while (ci.hasNext()) {\n+   *    NotificationInfo info = ci.next().get();\n+   *    System.out.println(info.toString());\n+   *    if (info != null) {\n+   *      break;\n+   *      }", "originalCommit": "5851e2c49e0edcd38ac64d99082da3cbe0a0fa06", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA5MDkwOA==", "url": "https://github.com/minio/minio-java/pull/834#discussion_r368090908", "bodyText": "below code is correct.\n} catch (JsonParseException | JsonMappingException | IOException e) {\n    return new Result(null, e);\n}\nIn Result.java, you need to have get() like below (Note: I modified if block better)\n  public T get()\n    throws InvalidBucketNameException, NoSuchAlgorithmException, InsufficientDataException, IOException,\n           InvalidKeyException, NoResponseException, XmlPullParserException, ErrorResponseException,\n           JsonParseException, JsonMappingException, InternalException {\n    if (ex == null) {\n      return type;\n    }\n\n    if (ex instanceof InvalidBucketNameException) {\n      throw (InvalidBucketNameException) ex;\n    }\n\n    if (ex instanceof NoSuchAlgorithmException) {\n      throw (NoSuchAlgorithmException) ex;\n    }\n\n    if (ex instanceof InsufficientDataException) {\n      throw (InsufficientDataException) ex;\n    }\n\n    if (ex instanceof IOException) {\n      throw (IOException) ex;\n    }\n\n    if (ex instanceof InvalidKeyException) {\n      throw (InvalidKeyException) ex;\n    }\n\n    if (ex instanceof NoResponseException) {\n      throw (NoResponseException) ex;\n    }\n\n    if (ex instanceof XmlPullParserException) {\n      throw (XmlPullParserException) ex;\n    }\n\n    if (ex instanceof ErrorResponseException) {\n      throw (ErrorResponseException) ex;\n    }\n\n    if (ex instanceof JsonParseException) {\n      throw (JsonParseException) ex;\n    }\n\n    if (ex instanceof JsonMappingException) {\n      throw (JsonMappingException) ex;\n    }\n\n    throw (InternalException) ex;\n  }\n}", "author": "balamurugana", "createdAt": "2020-01-17T19:08:04Z", "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -5762,6 +5763,131 @@ public void listenBucketNotification(String bucketName, String prefix, String su\n     }\n   }\n \n+  /**\n+   * Listen to bucket notifications. As bucket notification are lazily executed,\n+   * its required to iterate. The returned closeable iterator must be used with\n+   * try with resource or else the stream will not be closed.\n+   *\n+   * </p><b>Example:</b><br>\n+   * <pre>{@code\n+   *  try (CloseableIterator<Result<NotificationInfo>> ci = client\n+   * .listenBucketNotification(\"my-bucket\", \"\", \"\", events)) {\n+   *  while (ci.hasNext()) {\n+   *    NotificationInfo info = ci.next().get();\n+   *    System.out.println(info.toString());\n+   *    if (info != null) {\n+   *      break;\n+   *      }\n+   *   }\n+   *  } catch (IOException e) {\n+   *    System.out.println(\"Error occurred: \" + e);\n+   *  }\n+   * }\n+   * </pre>\n+   *\n+   * @param bucketName Bucket name.\n+   * @param prefix Prefix of concerned objects events.\n+   * @param suffix Suffix of concerned objects events.\n+   * @param events List of events to watch.\n+   *\n+   * @return (lazy) CloseableIterator of the Result NotificationInfo.\n+   *\n+   */\n+  public CloseableIterator<Result<NotificationInfo>> listenBucketNotification(String bucketName, String prefix,\n+      String suffix, String[] events)\n+    throws IOException, InvalidKeyException, NoSuchAlgorithmException, InsufficientDataException,\n+    InvalidResponseException, InternalException, NoResponseException, InvalidBucketNameException,\n+    XmlPullParserException, ErrorResponseException {\n+\n+    Multimap<String, String> queryParamMap = HashMultimap.create();\n+    queryParamMap.put(\"prefix\", prefix);\n+    queryParamMap.put(\"suffix\", suffix);\n+    for (String event : events) {\n+      queryParamMap.put(\"events\", event);\n+    }\n+\n+    HttpResponse response = executeReq(Method.GET, getRegion(bucketName),\n+        bucketName, \"\", null, queryParamMap, null, 0);\n+\n+    return new CloseableIterator<Result<NotificationInfo>>() {\n+      Scanner scanner  = new Scanner(response.body().charStream()).useDelimiter(\"\\n\");\n+\n+      String notificationString = null;\n+      ObjectMapper mapper = new ObjectMapper();\n+      NotificationInfo notificationInfo = null;\n+      boolean isClosed = false;\n+\n+      @Override\n+      public void close() throws IOException {\n+        if (!isClosed) {\n+          try {\n+            response.body().close();\n+            scanner.close();\n+          } finally {\n+            isClosed = true;\n+          }\n+        }\n+      }\n+\n+      public boolean populate()  {\n+        if (isClosed) {\n+          return false;\n+        }\n+\n+        if (notificationString != null) {\n+          return true;\n+        }\n+\n+        while (scanner.hasNext()) {\n+          notificationString = scanner.next().trim();\n+          if ( !notificationString.equals(\"\")) {\n+            break;\n+          }\n+        }\n+\n+        if (notificationString  == null || notificationString.equals(\"\")) {\n+          try {\n+            close();\n+          } catch (IOException e) {\n+            isClosed = true;\n+          }\n+          return false;\n+        }\n+        return true;\n+      }\n+\n+      @Override\n+      public boolean hasNext() {\n+        return populate();\n+      }\n+\n+      @Override\n+      public Result<NotificationInfo> next() {\n+        if (isClosed) {\n+          throw new NoSuchElementException();\n+        }\n+        if ((notificationString  == null || notificationString.equals(\"\")) &&  !populate() ) {\n+              throw  new NoSuchElementException();\n+        }\n+\n+        try {\n+              notificationInfo = mapper.readValue(notificationString, NotificationInfo.class);\n+              return new Result<>(notificationInfo, null);\n+            } catch ( IOException ex ) {\n+              if ( ex instanceof JsonParseException) {\n+                return new Result<>(null, (JsonParseException)ex);\n+              } else if ( ex instanceof  JsonMappingException) {\n+                return new Result<>(null, (JsonMappingException)ex);\n+              } else {\n+                return new Result<>(null, ex);", "originalCommit": "5851e2c49e0edcd38ac64d99082da3cbe0a0fa06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE5MTgxMQ==", "url": "https://github.com/minio/minio-java/pull/834#discussion_r368191811", "bodyText": "Since JsonParseException  and JsonMappingException are sub classes of IOException , the pipe in catch would not work. So i have caught the child class exception first and then the parent class.\nRefer https://stackoverflow.com/questions/11116853/declare-method-to-throw-an-exception-and-subclass-of-this-exception\n            } catch (JsonParseException e) {\n              return new Result<>(null, e);\n            } catch ( JsonMappingException e) {\n              return new Result<>(null, e);\n            } catch ( IOException e) {\n              return new Result<>(null, e);", "author": "sinhaashish", "createdAt": "2020-01-18T00:55:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA5MDkwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwMTc4NQ==", "url": "https://github.com/minio/minio-java/pull/834#discussion_r368201785", "bodyText": "\ud83d\udc4d You would need to do the same in Result.get()", "author": "balamurugana", "createdAt": "2020-01-18T03:02:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA5MDkwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIzNzY2Nw==", "url": "https://github.com/minio/minio-java/pull/834#discussion_r368237667", "bodyText": "@sinhaashish Is the change requested in Result.get() done?", "author": "kannappanr", "createdAt": "2020-01-18T17:15:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA5MDkwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI2MjkxMA==", "url": "https://github.com/minio/minio-java/pull/834#discussion_r368262910", "bodyText": "@balamurugana  this code is already added in Result.java.\n\n    if (ex instanceof JsonParseException) {\n      throw (JsonParseException) ex;\n    }\n\n    if (ex instanceof JsonMappingException) {\n      throw (JsonMappingException) ex;\n    }\n\n    if (ex instanceof IOException) {\n      throw (IOException) ex;\n    }", "author": "sinhaashish", "createdAt": "2020-01-19T03:29:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA5MDkwOA=="}], "type": "inlineReview"}, {"oid": "b0dc6639d9a290a1d7f64dece4c5bf262023346e", "url": "https://github.com/minio/minio-java/commit/b0dc6639d9a290a1d7f64dece4c5bf262023346e", "message": "Add overloaded listen bucket notification method", "committedDate": "2020-01-18T00:52:45Z", "type": "commit"}, {"oid": "b0dc6639d9a290a1d7f64dece4c5bf262023346e", "url": "https://github.com/minio/minio-java/commit/b0dc6639d9a290a1d7f64dece4c5bf262023346e", "message": "Add overloaded listen bucket notification method", "committedDate": "2020-01-18T00:52:45Z", "type": "forcePushed"}]}