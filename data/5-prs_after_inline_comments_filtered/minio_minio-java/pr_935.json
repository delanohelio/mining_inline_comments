{"pr_number": 935, "pr_title": "add arg builder to {set,get,delete}DefaultRetention APIs", "pr_createdAt": "2020-05-14T14:26:23Z", "pr_url": "https://github.com/minio/minio-java/pull/935", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY4OTU3MQ==", "url": "https://github.com/minio/minio-java/pull/935#discussion_r425689571", "bodyText": "We should set some default retention and then try to fetch it out in example code.", "author": "sinhaashish", "createdAt": "2020-05-15T09:46:18Z", "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -3502,23 +3502,60 @@ public void disableVersioning(String bucketName)\n    * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n    * @throws XmlParserException thrown to indicate XML parsing error.\n    */\n+  @Deprecated\n   public void setDefaultRetention(String bucketName, ObjectLockConfiguration config)\n       throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n           InternalException, InvalidBucketNameException, InvalidKeyException,\n           InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+    setDefaultRetention(\n+        SetDefaultRetentionArgs.builder().bucket(bucketName).config(config).build());\n+  }\n+\n+  /**\n+   * Sets default object retention in a bucket.\n+   *\n+   * <pre>Example:{@code\n+   * ObjectLockConfiguration config = new ObjectLockConfiguration(\n+   *     RetentionMode.COMPLIANCE, new RetentionDurationDays(100));\n+   * minioClient.setDefaultRetention(\n+   *     SetDefaultRetentionArgs.builder().bucket(\"my-bucketname\").config(config).build());\n+   * }</pre>\n+   *\n+   * @param args {@link SetDefaultRetentionArgs} object.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  public void setDefaultRetention(SetDefaultRetentionArgs args)\n+      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n+          InternalException, InvalidBucketNameException, InvalidKeyException,\n+          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+    if (args == null) {\n+      throw new IllegalArgumentException(\"null arguments\");\n+    }\n+\n     Map<String, String> queryParamMap = new HashMap<>();\n     queryParamMap.put(\"object-lock\", \"\");\n \n-    Response response = executePut(bucketName, null, null, queryParamMap, config, 0);\n-    response.body().close();\n+    Response response = executePut(args.bucketName(), null, null, queryParamMap, args.config(), 0);\n+    response.close();\n   }\n \n   /**\n    * Gets default object retention in a bucket.\n    *\n    * <pre>Example:{@code\n    * // bucket must be created with object lock enabled.\n-   * minioClient.makeBucket(\"my-bucketname\", null, true);\n+   * minioClient.makeBucket(\n+   *     MakeBucketArgs.builder().bucket(\"my-bucketname\").objectLock(true).build());\n    * ObjectLockConfiguration config = minioClient.getDefaultRetention(\"my-bucketname\");", "originalCommit": "ebf2002bce1436e3df590b2fb526fa4892a586d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkyMTIxMg==", "url": "https://github.com/minio/minio-java/pull/935#discussion_r425921212", "bodyText": "Its wrong to have makeBucket() here. Removing now.", "author": "balamurugana", "createdAt": "2020-05-15T16:40:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY4OTU3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY5MDYyNQ==", "url": "https://github.com/minio/minio-java/pull/935#discussion_r425690625", "bodyText": "We should set some default retention and then try to fetch it.", "author": "sinhaashish", "createdAt": "2020-05-15T09:48:18Z", "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -3539,17 +3576,56 @@ public void setDefaultRetention(String bucketName, ObjectLockConfiguration confi\n    * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n    * @throws XmlParserException thrown to indicate XML parsing error.\n    */\n+  @Deprecated\n   public ObjectLockConfiguration getDefaultRetention(String bucketName)\n       throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n           InternalException, InvalidBucketNameException, InvalidKeyException,\n           InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+    return getDefaultRetention(GetDefaultRetentionArgs.builder().bucket(bucketName).build());\n+  }\n+\n+  /**\n+   * Gets default object retention in a bucket.\n+   *\n+   * <pre>Example:{@code\n+   * // bucket must be created with object lock enabled.\n+   * minioClient.makeBucket(\n+   *     MakeBucketArgs.builder().bucket(\"my-bucketname\").objectLock(true).build());\n+   * ObjectLockConfiguration config =", "originalCommit": "ebf2002bce1436e3df590b2fb526fa4892a586d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkyNDAzNw==", "url": "https://github.com/minio/minio-java/pull/935#discussion_r425924037", "bodyText": "Its wrong to have makeBucket() here. Removing now.", "author": "balamurugana", "createdAt": "2020-05-15T16:45:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY5MDYyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY5OTEzOA==", "url": "https://github.com/minio/minio-java/pull/935#discussion_r425699138", "bodyText": "IMO we should have a complete example, like creating the bucket, setting the default retention and then fetching it. So that  user just have to edit the credentials and run the file.", "author": "sinhaashish", "createdAt": "2020-05-15T10:04:40Z", "path": "examples/GetDefaultRetention.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2019 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import io.minio.GetDefaultRetentionArgs;\n+import io.minio.MinioClient;\n+import io.minio.errors.MinioException;\n+import io.minio.messages.ObjectLockConfiguration;\n+import java.io.IOException;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+\n+public class GetDefaultRetention {\n+  /** MinioClient.getDefaultRetention() example. */\n+  public static void main(String[] args)\n+      throws IOException, NoSuchAlgorithmException, InvalidKeyException {\n+    try {\n+      /* Amazon S3: */\n+      MinioClient s3Client =\n+          new MinioClient(\"https://s3.amazonaws.com\", \"YOUR-ACCESSKEYID\", \"YOUR-SECRETACCESSKEY\");\n+\n+      ObjectLockConfiguration config =", "originalCommit": "ebf2002bce1436e3df590b2fb526fa4892a586d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkyOTUwMg==", "url": "https://github.com/minio/minio-java/pull/935#discussion_r425929502", "bodyText": "I think we need to be specific to examples for an API. Its not possible to run any example without modifying essentials like endpoint, credentials, bucket/object names, respective variables etc and some operations are chargeable in some service providers.\nWe wouldn't consider examples as tests.", "author": "balamurugana", "createdAt": "2020-05-15T16:55:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY5OTEzOA=="}], "type": "inlineReview"}, {"oid": "92c28ed237a687d1c7fff56687f034c37c737144", "url": "https://github.com/minio/minio-java/commit/92c28ed237a687d1c7fff56687f034c37c737144", "message": "add arg builder to {set,get}DefaultRetention APIs", "committedDate": "2020-05-15T16:56:14Z", "type": "forcePushed"}, {"oid": "787d9bb5380c8b897cc8cba37f6ee10a5dc18786", "url": "https://github.com/minio/minio-java/commit/787d9bb5380c8b897cc8cba37f6ee10a5dc18786", "message": "add arg builder to {set,get}DefaultRetention APIs", "committedDate": "2020-05-19T14:43:43Z", "type": "forcePushed"}, {"oid": "2135974f0e33f99a08af155c7b40abaca5591617", "url": "https://github.com/minio/minio-java/commit/2135974f0e33f99a08af155c7b40abaca5591617", "message": "add arg builder to {set,get}DefaultRetention APIs", "committedDate": "2020-05-21T10:22:34Z", "type": "forcePushed"}, {"oid": "cb399ba211883910c6ce615059403bef2db53c52", "url": "https://github.com/minio/minio-java/commit/cb399ba211883910c6ce615059403bef2db53c52", "message": "add arg builder to {set,get}DefaultRetention APIs", "committedDate": "2020-05-21T10:28:37Z", "type": "forcePushed"}, {"oid": "eb5e5151a8244b890604c29af88cd1fb612a557c", "url": "https://github.com/minio/minio-java/commit/eb5e5151a8244b890604c29af88cd1fb612a557c", "message": "add arg builder to {set,get}DefaultRetention APIs", "committedDate": "2020-05-22T06:57:02Z", "type": "forcePushed"}, {"oid": "d44dfd8743cb8e662b5a9d5305ae4455a701dfb0", "url": "https://github.com/minio/minio-java/commit/d44dfd8743cb8e662b5a9d5305ae4455a701dfb0", "message": "add arg builder to {set,get}DefaultRetention APIs", "committedDate": "2020-05-26T09:57:30Z", "type": "forcePushed"}, {"oid": "0f16896c79625297190d5adf6addc0cd4a02838a", "url": "https://github.com/minio/minio-java/commit/0f16896c79625297190d5adf6addc0cd4a02838a", "message": "add arg builder to {set,get}DefaultRetention APIs", "committedDate": "2020-05-28T04:28:27Z", "type": "forcePushed"}, {"oid": "4084abae2c374b1c3ef03adfa06d9880611ce906", "url": "https://github.com/minio/minio-java/commit/4084abae2c374b1c3ef03adfa06d9880611ce906", "message": "add arg builder to {set,get}DefaultRetention APIs", "committedDate": "2020-05-29T04:52:08Z", "type": "forcePushed"}, {"oid": "46320165a7b259868d5729b6c132247f04e351ac", "url": "https://github.com/minio/minio-java/commit/46320165a7b259868d5729b6c132247f04e351ac", "message": "add arg builder to {set,get}DefaultRetention APIs", "committedDate": "2020-05-29T14:00:16Z", "type": "forcePushed"}, {"oid": "c5f2f1f697f5224ac25a2a0839532e7d2226ae36", "url": "https://github.com/minio/minio-java/commit/c5f2f1f697f5224ac25a2a0839532e7d2226ae36", "message": "add arg builder to {set,get}DefaultRetention APIs", "committedDate": "2020-05-30T18:21:47Z", "type": "forcePushed"}, {"oid": "a32c068e1db978454711fce2d15fc3bb748bb3c3", "url": "https://github.com/minio/minio-java/commit/a32c068e1db978454711fce2d15fc3bb748bb3c3", "message": "add arg builder to {set,get}DefaultRetention APIs", "committedDate": "2020-05-31T05:20:05Z", "type": "forcePushed"}, {"oid": "624ae252ffc3b03c96889b78e25ad33312e38f2d", "url": "https://github.com/minio/minio-java/commit/624ae252ffc3b03c96889b78e25ad33312e38f2d", "message": "add arg builder to {set,get}DefaultRetention APIs", "committedDate": "2020-06-01T16:16:50Z", "type": "forcePushed"}, {"oid": "762df3cfe704473a73edfb721b37cc3c6ed4c886", "url": "https://github.com/minio/minio-java/commit/762df3cfe704473a73edfb721b37cc3c6ed4c886", "message": "add arg builder to {set,get}DefaultRetention APIs", "committedDate": "2020-06-02T07:04:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY2MDUwOA==", "url": "https://github.com/minio/minio-java/pull/935#discussion_r433660508", "bodyText": "Please add an @Override annotation", "author": "anjalshireesh", "createdAt": "2020-06-02T06:59:57Z", "path": "api/src/main/java/io/minio/SetDefaultRetentionArgs.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+import io.minio.messages.ObjectLockConfiguration;\n+\n+/** Argument class of MinioClient.setDefaultRetention(). */\n+public class SetDefaultRetentionArgs extends BucketArgs {\n+  private ObjectLockConfiguration config;\n+\n+  public ObjectLockConfiguration config() {\n+    return config;\n+  }\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  /** Argument builder of {@link SetDefaultRetentionArgs}. */\n+  public static final class Builder extends BucketArgs.Builder<Builder, SetDefaultRetentionArgs> {\n+    private void validateConfig(ObjectLockConfiguration config) {\n+      if (config == null) {\n+        throw new IllegalArgumentException(\"null object-lock configuration\");\n+      }\n+    }\n+\n+    protected void validate(SetDefaultRetentionArgs args) {", "originalCommit": "624ae252ffc3b03c96889b78e25ad33312e38f2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzczMDMyMg==", "url": "https://github.com/minio/minio-java/pull/935#discussion_r433730322", "bodyText": "done", "author": "balamurugana", "createdAt": "2020-06-02T09:06:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY2MDUwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY2NjUxMg==", "url": "https://github.com/minio/minio-java/pull/935#discussion_r433666512", "bodyText": "Retention mode and duration can be logged as args", "author": "anjalshireesh", "createdAt": "2020-06-02T07:13:15Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3593,37 +3596,22 @@ public static void setDefaultRetention_test() throws Exception {\n       try {\n         ObjectLockConfiguration config =\n             new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n-        client.setDefaultRetention(bucketName, config);\n+        client.setDefaultRetention(\n+            SetDefaultRetentionArgs.builder().bucket(bucketName).config(config).build());\n       } finally {\n         client.removeBucket(RemoveBucketArgs.builder().bucket(bucketName).build());\n       }\n-      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      mintSuccessLog(methodName, null, startTime);", "originalCommit": "762df3cfe704473a73edfb721b37cc3c6ed4c886", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzczOTM3OA==", "url": "https://github.com/minio/minio-java/pull/935#discussion_r433739378", "bodyText": "done", "author": "balamurugana", "createdAt": "2020-06-02T09:22:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY2NjUxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY2ODg5OQ==", "url": "https://github.com/minio/minio-java/pull/935#discussion_r433668899", "bodyText": "This whole code seems to be same as the previous lines except for the retention mode and duration. It can be made into a method and called twice with different arguments. Something like:\n  testGetDefaultRetentionFor(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n  testGetDefaultRetentionFor(RetentionMode.GOVERNANCE, new RetentionDurationYears(1));", "author": "anjalshireesh", "createdAt": "2020-06-02T07:18:21Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3633,66 +3621,49 @@ public static void getDefaultRetention_test() throws Exception {\n       try {\n         ObjectLockConfiguration expectedConfig =\n             new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n-        client.setDefaultRetention(bucketName, expectedConfig);\n-        ObjectLockConfiguration config = client.getDefaultRetention(bucketName);\n+        client.setDefaultRetention(\n+            SetDefaultRetentionArgs.builder().bucket(bucketName).config(expectedConfig).build());\n+        ObjectLockConfiguration config =\n+            client.getDefaultRetention(\n+                GetDefaultRetentionArgs.builder().bucket(bucketName).build());\n \n-        if ((!(config.duration().unit() == expectedConfig.duration().unit()\n-                && config.duration().duration() == expectedConfig.duration().duration()))\n-            || (config.mode() != expectedConfig.mode())) {\n+        if (config.mode() != expectedConfig.mode()) {\n           throw new Exception(\n-              \"[FAILED] Expected: expected duration : \"\n-                  + expectedConfig.duration()\n-                  + \", got: \"\n-                  + config.duration()\n-                  + \" expected mode :\"\n-                  + expectedConfig.mode()\n-                  + \", got: \"\n-                  + config.mode());\n+              \"[FAILED] mode: expected: \" + expectedConfig.mode() + \", got: \" + config.mode());\n+        }\n+\n+        if (config.duration().unit() != expectedConfig.duration().unit()\n+            || config.duration().duration() != expectedConfig.duration().duration()) {\n+          throw new Exception(\n+              \"[FAILED] duration: \" + expectedConfig.duration() + \", got: \" + config.duration());\n         }\n \n         expectedConfig =\n             new ObjectLockConfiguration(RetentionMode.GOVERNANCE, new RetentionDurationYears(1));\n-        client.setDefaultRetention(bucketName, expectedConfig);\n-        config = client.getDefaultRetention(bucketName);\n+        client.setDefaultRetention(\n+            SetDefaultRetentionArgs.builder().bucket(bucketName).config(expectedConfig).build());\n+        config =\n+            client.getDefaultRetention(\n+                GetDefaultRetentionArgs.builder().bucket(bucketName).build());\n \n-        if ((!(config.duration().unit() == expectedConfig.duration().unit()\n-                && config.duration().duration() == expectedConfig.duration().duration()))\n-            || (config.mode() != expectedConfig.mode())) {\n+        if (config.mode() != expectedConfig.mode()) {\n           throw new Exception(\n-              \"[FAILED] Expected: expected duration : \"\n-                  + expectedConfig.duration()\n-                  + \", got: \"\n-                  + config.duration()\n-                  + \" expected mode :\"\n-                  + expectedConfig.mode()\n-                  + \", got: \"\n-                  + config.mode());\n+              \"[FAILED] mode: expected: \" + expectedConfig.mode() + \", got: \" + config.mode());\n         }\n+\n+        if (config.duration().unit() != expectedConfig.duration().unit()\n+            || config.duration().duration() != expectedConfig.duration().duration()) {\n+          throw new Exception(\n+              \"[FAILED] duration: \" + expectedConfig.duration() + \", got: \" + config.duration());\n+        }", "originalCommit": "762df3cfe704473a73edfb721b37cc3c6ed4c886", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc0MzY4Mg==", "url": "https://github.com/minio/minio-java/pull/935#discussion_r433743682", "bodyText": "done", "author": "balamurugana", "createdAt": "2020-06-02T09:29:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY2ODg5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY2OTA1OA==", "url": "https://github.com/minio/minio-java/pull/935#discussion_r433669058", "bodyText": "The retention mode and duration can be logged as arguments", "author": "anjalshireesh", "createdAt": "2020-06-02T07:18:40Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3633,66 +3621,49 @@ public static void getDefaultRetention_test() throws Exception {\n       try {\n         ObjectLockConfiguration expectedConfig =\n             new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n-        client.setDefaultRetention(bucketName, expectedConfig);\n-        ObjectLockConfiguration config = client.getDefaultRetention(bucketName);\n+        client.setDefaultRetention(\n+            SetDefaultRetentionArgs.builder().bucket(bucketName).config(expectedConfig).build());\n+        ObjectLockConfiguration config =\n+            client.getDefaultRetention(\n+                GetDefaultRetentionArgs.builder().bucket(bucketName).build());\n \n-        if ((!(config.duration().unit() == expectedConfig.duration().unit()\n-                && config.duration().duration() == expectedConfig.duration().duration()))\n-            || (config.mode() != expectedConfig.mode())) {\n+        if (config.mode() != expectedConfig.mode()) {\n           throw new Exception(\n-              \"[FAILED] Expected: expected duration : \"\n-                  + expectedConfig.duration()\n-                  + \", got: \"\n-                  + config.duration()\n-                  + \" expected mode :\"\n-                  + expectedConfig.mode()\n-                  + \", got: \"\n-                  + config.mode());\n+              \"[FAILED] mode: expected: \" + expectedConfig.mode() + \", got: \" + config.mode());\n+        }\n+\n+        if (config.duration().unit() != expectedConfig.duration().unit()\n+            || config.duration().duration() != expectedConfig.duration().duration()) {\n+          throw new Exception(\n+              \"[FAILED] duration: \" + expectedConfig.duration() + \", got: \" + config.duration());\n         }\n \n         expectedConfig =\n             new ObjectLockConfiguration(RetentionMode.GOVERNANCE, new RetentionDurationYears(1));\n-        client.setDefaultRetention(bucketName, expectedConfig);\n-        config = client.getDefaultRetention(bucketName);\n+        client.setDefaultRetention(\n+            SetDefaultRetentionArgs.builder().bucket(bucketName).config(expectedConfig).build());\n+        config =\n+            client.getDefaultRetention(\n+                GetDefaultRetentionArgs.builder().bucket(bucketName).build());\n \n-        if ((!(config.duration().unit() == expectedConfig.duration().unit()\n-                && config.duration().duration() == expectedConfig.duration().duration()))\n-            || (config.mode() != expectedConfig.mode())) {\n+        if (config.mode() != expectedConfig.mode()) {\n           throw new Exception(\n-              \"[FAILED] Expected: expected duration : \"\n-                  + expectedConfig.duration()\n-                  + \", got: \"\n-                  + config.duration()\n-                  + \" expected mode :\"\n-                  + expectedConfig.mode()\n-                  + \", got: \"\n-                  + config.mode());\n+              \"[FAILED] mode: expected: \" + expectedConfig.mode() + \", got: \" + config.mode());\n         }\n+\n+        if (config.duration().unit() != expectedConfig.duration().unit()\n+            || config.duration().duration() != expectedConfig.duration().duration()) {\n+          throw new Exception(\n+              \"[FAILED] duration: \" + expectedConfig.duration() + \", got: \" + config.duration());\n+        }\n+\n       } finally {\n         client.removeBucket(RemoveBucketArgs.builder().bucket(bucketName).build());\n       }\n \n-      mintSuccessLog(\"getDefaultRetention (String bucketName)\", null, startTime);\n-\n+      mintSuccessLog(methodName, null, startTime);", "originalCommit": "762df3cfe704473a73edfb721b37cc3c6ed4c886", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc0NTY0Nw==", "url": "https://github.com/minio/minio-java/pull/935#discussion_r433745647", "bodyText": "It wouldn't be useful because the failure may happen any one of two checks. I am not favour of mint args because stack trace is the best to find the issue.", "author": "balamurugana", "createdAt": "2020-06-02T09:32:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY2OTA1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgyOTIxNg==", "url": "https://github.com/minio/minio-java/pull/935#discussion_r433829216", "bodyText": "Actually if the try-catch and exception handling is also moved to the new method (testGetDefaultRetention) then the args logging can be done.", "author": "anjalshireesh", "createdAt": "2020-06-02T12:14:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY2OTA1OA=="}], "type": "inlineReview"}, {"oid": "98f74f18bbd070001d54bc5f3b474687b7ef31da", "url": "https://github.com/minio/minio-java/commit/98f74f18bbd070001d54bc5f3b474687b7ef31da", "message": "address review comments and add deleteDefaultRetention() API", "committedDate": "2020-06-02T09:41:10Z", "type": "forcePushed"}, {"oid": "2250265a7d20a76e9d008cab1b0927263f0c6103", "url": "https://github.com/minio/minio-java/commit/2250265a7d20a76e9d008cab1b0927263f0c6103", "message": "add arg builder to {set,get}DefaultRetention APIs", "committedDate": "2020-06-03T04:42:57Z", "type": "commit"}, {"oid": "7517d8387aab877ee4ad9817c0beb41c8a95e685", "url": "https://github.com/minio/minio-java/commit/7517d8387aab877ee4ad9817c0beb41c8a95e685", "message": "address review comments and add deleteDefaultRetention() API", "committedDate": "2020-06-03T04:42:58Z", "type": "commit"}, {"oid": "7517d8387aab877ee4ad9817c0beb41c8a95e685", "url": "https://github.com/minio/minio-java/commit/7517d8387aab877ee4ad9817c0beb41c8a95e685", "message": "address review comments and add deleteDefaultRetention() API", "committedDate": "2020-06-03T04:42:58Z", "type": "forcePushed"}]}