{"pr_number": 996, "pr_title": "Sts client grants", "pr_createdAt": "2020-06-29T10:09:30Z", "pr_url": "https://github.com/minio/minio-java/pull/996", "timeline": [{"oid": "c06ab28d59506d92ecb58027b1afa253f30de5af", "url": "https://github.com/minio/minio-java/commit/c06ab28d59506d92ecb58027b1afa253f30de5af", "message": "Add sts response messages for client grants", "committedDate": "2020-06-28T11:19:33Z", "type": "commit"}, {"oid": "286d9168c881df596f6864d4c356b259b925e2bb", "url": "https://github.com/minio/minio-java/commit/286d9168c881df596f6864d4c356b259b925e2bb", "message": "Add struct for access token & token expiration", "committedDate": "2020-06-28T16:23:41Z", "type": "commit"}, {"oid": "284369a88ed2a821ff5e9bb1359f151b4884ecbb", "url": "https://github.com/minio/minio-java/commit/284369a88ed2a821ff5e9bb1359f151b4884ecbb", "message": "Switch ZonedDateTime with wrapper", "committedDate": "2020-06-28T16:24:32Z", "type": "commit"}, {"oid": "3d2cfec60be5ad8c5d396fc38a3c34a200e30a20", "url": "https://github.com/minio/minio-java/commit/3d2cfec60be5ad8c5d396fc38a3c34a200e30a20", "message": "Implement base sts client grants functionality", "committedDate": "2020-06-28T16:33:36Z", "type": "commit"}, {"oid": "ea688da641747ba9f54c3af5aad771ec6b206425", "url": "https://github.com/minio/minio-java/commit/ea688da641747ba9f54c3af5aad771ec6b206425", "message": "Add ClientGrants example", "committedDate": "2020-06-28T16:36:12Z", "type": "commit"}, {"oid": "0b1242e827eab208d2bfb728092aae6664af025a", "url": "https://github.com/minio/minio-java/commit/0b1242e827eab208d2bfb728092aae6664af025a", "message": "Fix code style", "committedDate": "2020-06-29T09:18:55Z", "type": "commit"}, {"oid": "d097c82c0d9bcd1e21aeeef42e76ce9c7ac7c86d", "url": "https://github.com/minio/minio-java/commit/d097c82c0d9bcd1e21aeeef42e76ce9c7ac7c86d", "message": "Add javadocs", "committedDate": "2020-06-29T09:36:30Z", "type": "commit"}, {"oid": "42232c66d14403deb1cd90588e911b517c6a20e0", "url": "https://github.com/minio/minio-java/commit/42232c66d14403deb1cd90588e911b517c6a20e0", "message": "Update README.md with link to ClientGrants example", "committedDate": "2020-06-29T09:39:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyMzYxNA==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r446923614", "bodyText": "You could have below instead of this method.\npublic Credentials credentials() {\n  return clientGrantsResult == null ? null : clientGrantsResult.credentials();\n}\n}", "author": "balamurugana", "createdAt": "2020-06-29T12:14:38Z", "path": "api/src/main/java/io/minio/messages/AssumeRoleWithClientGrantsResponse.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package io.minio.messages;\n+\n+import org.simpleframework.xml.Element;\n+import org.simpleframework.xml.Namespace;\n+import org.simpleframework.xml.Root;\n+\n+@Root(name = \"AssumeRoleWithClientGrantsResponse\", strict = false)\n+@Namespace(reference = \"https://sts.amazonaws.com/doc/2011-06-15/\")\n+public class AssumeRoleWithClientGrantsResponse {\n+\n+  @Element(name = \"AssumeRoleWithClientGrantsResult\")\n+  private AssumeRoleWithClientGrantsResult clientGrantsResult;\n+\n+  public AssumeRoleWithClientGrantsResult getClientGrantsResult() {", "originalCommit": "42232c66d14403deb1cd90588e911b517c6a20e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3OTg2NA==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r446979864", "bodyText": "my bad", "author": "egetman", "createdAt": "2020-06-29T13:41:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyMzYxNA=="}], "type": "inlineReview"}, {"oid": "a29e3da4c6ca1a12b36651ecc785040bf8a85c05", "url": "https://github.com/minio/minio-java/commit/a29e3da4c6ca1a12b36651ecc785040bf8a85c05", "message": "Fix getters naming issues", "committedDate": "2020-06-29T13:50:23Z", "type": "commit"}, {"oid": "8ca3cf7ddb51d0698e3b54f02184f701a1631ad2", "url": "https://github.com/minio/minio-java/commit/8ca3cf7ddb51d0698e3b54f02184f701a1631ad2", "message": "Change S3Escaper sync StrBuffer -> StrBuilder", "committedDate": "2020-06-30T13:05:04Z", "type": "commit"}, {"oid": "fb86cf0ad0014867a86ee18f678e51bd8eaa3534", "url": "https://github.com/minio/minio-java/commit/fb86cf0ad0014867a86ee18f678e51bd8eaa3534", "message": "Update STS request/response structures", "committedDate": "2020-06-30T16:54:21Z", "type": "commit"}, {"oid": "eba0ae9baa0ddf0817d1f4e71d85663749e6846e", "url": "https://github.com/minio/minio-java/commit/eba0ae9baa0ddf0817d1f4e71d85663749e6846e", "message": "Make S3Escaper visible outside the package", "committedDate": "2020-06-30T16:54:54Z", "type": "commit"}, {"oid": "ea299dd62b437d229f95e8b3ed2e9940119b0807", "url": "https://github.com/minio/minio-java/commit/ea299dd62b437d229f95e8b3ed2e9940119b0807", "message": "Add basic CredentialsProvider interface", "committedDate": "2020-06-30T16:56:34Z", "type": "commit"}, {"oid": "48950c3f3826660e15287cc38307c68321d71d8c", "url": "https://github.com/minio/minio-java/commit/48950c3f3826660e15287cc38307c68321d71d8c", "message": "Added a bunch of CredentialsProvider implementations", "committedDate": "2020-06-30T16:58:46Z", "type": "commit"}, {"oid": "e187846f5db708dad42b434891732123e8f36021", "url": "https://github.com/minio/minio-java/commit/e187846f5db708dad42b434891732123e8f36021", "message": "Fix some issues with DCL", "committedDate": "2020-07-01T10:53:36Z", "type": "commit"}, {"oid": "c5d8f0839bbd2548104b14c29e467d47f9f5651a", "url": "https://github.com/minio/minio-java/commit/c5d8f0839bbd2548104b14c29e467d47f9f5651a", "message": "Add WebIdentityCredentialsProvider", "committedDate": "2020-07-01T11:09:26Z", "type": "commit"}, {"oid": "115599ce7d8fdfd8a07f688b369d102a2da948e2", "url": "https://github.com/minio/minio-java/commit/115599ce7d8fdfd8a07f688b369d102a2da948e2", "message": "Make Credentials immutable", "committedDate": "2020-07-01T13:09:57Z", "type": "commit"}, {"oid": "348838cdce762535be197227dad9b643fcf4bbc8", "url": "https://github.com/minio/minio-java/commit/348838cdce762535be197227dad9b643fcf4bbc8", "message": "Add Token request for WebIdentity", "committedDate": "2020-07-01T13:10:39Z", "type": "commit"}, {"oid": "341fa6017811caf26e0883185462e6ec29367c3c", "url": "https://github.com/minio/minio-java/commit/341fa6017811caf26e0883185462e6ec29367c3c", "message": "Update ClientGrants with new api", "committedDate": "2020-07-01T13:15:25Z", "type": "commit"}, {"oid": "2b6c19b86f4f68af0ea8fe7cbe7fc381f7707f4a", "url": "https://github.com/minio/minio-java/commit/2b6c19b86f4f68af0ea8fe7cbe7fc381f7707f4a", "message": "Add WebIdentity example", "committedDate": "2020-07-01T13:15:47Z", "type": "commit"}, {"oid": "4afbcdec0a6a35cabbbd170b0653475b92a9d7e5", "url": "https://github.com/minio/minio-java/commit/4afbcdec0a6a35cabbbd170b0653475b92a9d7e5", "message": "Update README.md reference for sts api", "committedDate": "2020-07-01T13:16:46Z", "type": "commit"}, {"oid": "c924f4921bf9093bbe6e7b203b987a49b78f637b", "url": "https://github.com/minio/minio-java/commit/c924f4921bf9093bbe6e7b203b987a49b78f637b", "message": "Update MinioClient with new CredentialsProvider api. Minor code cleanups", "committedDate": "2020-07-01T13:17:53Z", "type": "commit"}, {"oid": "a350ca75b6542ec015954b22e869e371e4d375ec", "url": "https://github.com/minio/minio-java/commit/a350ca75b6542ec015954b22e869e371e4d375ec", "message": "Fix code formatting", "committedDate": "2020-07-01T13:18:26Z", "type": "commit"}, {"oid": "54f4cb88702d41805e48a68edb2ee3a21a596a86", "url": "https://github.com/minio/minio-java/commit/54f4cb88702d41805e48a68edb2ee3a21a596a86", "message": "Update resources host/port in examples", "committedDate": "2020-07-01T13:21:54Z", "type": "commit"}, {"oid": "e4d878e1cdd141b49fac2640c62a4a290e0f02c4", "url": "https://github.com/minio/minio-java/commit/e4d878e1cdd141b49fac2640c62a4a290e0f02c4", "message": "Add copyright for examples", "committedDate": "2020-07-01T14:04:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MDc0MQ==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r448670741", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // no instances plz\n          \n          \n            \n                // no instances please", "author": "harshavardhana", "createdAt": "2020-07-01T23:41:26Z", "path": "api/src/main/java/io/minio/S3Escaper.java", "diffHunk": "@@ -19,9 +19,14 @@\n import com.google.common.escape.Escaper;\n import com.google.common.net.UrlEscapers;\n \n-class S3Escaper {\n+public class S3Escaper {\n+\n   private static final Escaper ESCAPER = UrlEscapers.urlPathSegmentEscaper();\n \n+  private S3Escaper() {\n+    // no instances plz", "originalCommit": "e4d878e1cdd141b49fac2640c62a4a290e0f02c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc1NTc3Ng==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r448755776", "bodyText": "I don't think we need this comment.", "author": "balamurugana", "createdAt": "2020-07-02T05:24:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MDc0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg1MTY5Mg==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r448851692", "bodyText": "sorry, it's a fight with warnings in my workspace  =)", "author": "egetman", "createdAt": "2020-07-02T08:54:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MDc0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg3MTM2MA==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r448871360", "bodyText": "We have many such constructors. Can't you adjust your editor more precisely to google java format?", "author": "balamurugana", "createdAt": "2020-07-02T09:27:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MDc0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg3ODA2Mw==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r448878063", "bodyText": "It's not a spotless/checkstyle issues, that can use a google style guide. It's sonar issues =). I've changed it.", "author": "egetman", "createdAt": "2020-07-02T09:38:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MDc0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MDc5OQ==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r448670799", "bodyText": "license missing should point to 2020", "author": "harshavardhana", "createdAt": "2020-07-01T23:41:38Z", "path": "api/src/main/java/io/minio/credentials/AnonymousCredentialsProvider.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package io.minio.credentials;", "originalCommit": "e4d878e1cdd141b49fac2640c62a4a290e0f02c4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MTUwMw==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r448671503", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final String stsEndpoint = \"http://sts-host:sts-port/sts\";\n          \n          \n            \n                // STS endpoint usually points to MinIO endpoint in case of MinIO\n          \n          \n            \n                final String stsEndpoint = \"http://sts-host:sts-port/\";", "author": "harshavardhana", "createdAt": "2020-07-01T23:44:06Z", "path": "examples/ClientGrants.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2017 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.introspect.VisibilityChecker;\n+import io.minio.MinioClient;\n+import io.minio.credentials.ClientGrantsCredentialsProvider;\n+import io.minio.credentials.CredentialsProvider;\n+import io.minio.messages.Bucket;\n+import io.minio.messages.ClientGrantsToken;\n+import java.beans.ConstructorProperties;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import javax.annotation.Nonnull;\n+import okhttp3.FormBody;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import okhttp3.RequestBody;\n+import okhttp3.Response;\n+\n+public class ClientGrants {\n+\n+  private static final String POLICY =\n+      new StringBuilder()\n+          .append(\"{\\n\")\n+          .append(\"    \\\"Statement\\\": [\\n\")\n+          .append(\"       \" + \" {\\n\")\n+          .append(\"            \\\"Action\\\": [\\n\")\n+          .append(\"                \\\"s3:GetBucketLocation\\\",\\n\")\n+          .append(\"                \\\"s3:ListBucket\\\"\\n\")\n+          .append(\"            ],\\n\")\n+          .append(\"            \\\"Effect\\\": \\\"Allow\\\",\\n\")\n+          .append(\"            \\\"Principal\\\": \\\"*\\\",\\n\")\n+          .append(\"            \\\"Resource\\\": \\\"arn:aws:s3:::test\\\"\\n\")\n+          .append(\"        }\\n\")\n+          .append(\"    ],\\n\")\n+          .append(\"    \\\"Version\\\": \\\"2012-10-17\\\"\\n\")\n+          .append(\"}\\n\")\n+          .toString();\n+\n+  static class JwtToken {\n+\n+    @JsonProperty(\"access_token\")\n+    private final String accessToken;\n+\n+    @JsonProperty(\"expires_in\")\n+    private final long expiredAfter;\n+\n+    @ConstructorProperties({\"access_token\", \"expires_in\"})\n+    public JwtToken(String accessToken, long expiredAfter) {\n+      this.accessToken = accessToken;\n+      this.expiredAfter = expiredAfter;\n+    }\n+  }\n+\n+  @SuppressWarnings({\"SameParameterValue\", \"squid:S1192\"})\n+  static ClientGrantsToken getTokenAndExpiry(\n+      @Nonnull String clientId,\n+      @Nonnull String clientSecret,\n+      @Nonnull String idpClientId,\n+      @Nonnull String idpEndpoint) {\n+    Objects.requireNonNull(clientId, \"Client id must not be null\");\n+    Objects.requireNonNull(clientSecret, \"ClientSecret must not be null\");\n+\n+    final RequestBody requestBody =\n+        new FormBody.Builder()\n+            .add(\"username\", clientId)\n+            .add(\"password\", clientSecret)\n+            .add(\"grant_type\", \"password\")\n+            .add(\"client_id\", idpClientId)\n+            .build();\n+\n+    final Request request = new Request.Builder().url(idpEndpoint).post(requestBody).build();\n+\n+    final OkHttpClient client = new OkHttpClient();\n+    try (Response response = client.newCall(request).execute()) {\n+      final ObjectMapper mapper = new ObjectMapper();\n+      mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n+      mapper.setVisibility(\n+          VisibilityChecker.Std.defaultInstance()\n+              .withFieldVisibility(JsonAutoDetect.Visibility.ANY));\n+\n+      final JwtToken jwtToken =\n+          mapper.readValue(Objects.requireNonNull(response.body()).charStream(), JwtToken.class);\n+      return new ClientGrantsToken(jwtToken.accessToken, jwtToken.expiredAfter, POLICY);\n+    } catch (IOException e) {\n+      throw new IllegalStateException(e);\n+    }\n+  }\n+\n+  @SuppressWarnings(\"squid:S106\")\n+  public static void main(String[] args) throws Exception {\n+    final String clientId = \"user\";\n+    final String clientSecret = \"password\";\n+    final String idpEndpoint =\n+        \"http://idp-host:idp-port/auth/realms/master/protocol/openid-connect/token\";\n+    final String stsEndpoint = \"http://sts-host:sts-port/sts\";", "originalCommit": "e4d878e1cdd141b49fac2640c62a4a290e0f02c4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MTU0MQ==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r448671541", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final String stsEndpoint = \"http://sts-host:sts-port/sts\";\n          \n          \n            \n                final String stsEndpoint = \"http://sts-host:sts-port/\";", "author": "harshavardhana", "createdAt": "2020-07-01T23:44:18Z", "path": "examples/WebIdentity.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2017 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.introspect.VisibilityChecker;\n+import io.minio.MinioClient;\n+import io.minio.credentials.CredentialsProvider;\n+import io.minio.credentials.WebIdentityCredentialsProvider;\n+import io.minio.messages.Bucket;\n+import io.minio.messages.WebIdentityToken;\n+import java.beans.ConstructorProperties;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import javax.annotation.Nonnull;\n+import okhttp3.FormBody;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import okhttp3.RequestBody;\n+import okhttp3.Response;\n+\n+public class WebIdentity {\n+\n+  static class JwtToken {\n+\n+    @JsonProperty(\"access_token\")\n+    private final String accessToken;\n+\n+    @JsonProperty(\"expires_in\")\n+    private final long expiredAfter;\n+\n+    @ConstructorProperties({\"access_token\", \"expires_in\"})\n+    public JwtToken(String accessToken, long expiredAfter) {\n+      this.accessToken = accessToken;\n+      this.expiredAfter = expiredAfter;\n+    }\n+  }\n+\n+  @SuppressWarnings({\"SameParameterValue\", \"squid:S1192\"})\n+  static WebIdentityToken getTokenAndExpiry(\n+      @Nonnull String clientId,\n+      @Nonnull String clientSecret,\n+      @Nonnull String idpClientId,\n+      @Nonnull String idpEndpoint) {\n+    Objects.requireNonNull(clientId, \"Client id must not be null\");\n+    Objects.requireNonNull(clientSecret, \"ClientSecret must not be null\");\n+\n+    final RequestBody requestBody =\n+        new FormBody.Builder()\n+            .add(\"username\", clientId)\n+            .add(\"password\", clientSecret)\n+            .add(\"grant_type\", \"password\")\n+            .add(\"client_id\", idpClientId)\n+            .build();\n+\n+    final Request request = new Request.Builder().url(idpEndpoint).post(requestBody).build();\n+\n+    final OkHttpClient client = new OkHttpClient();\n+    try (Response response = client.newCall(request).execute()) {\n+      final ObjectMapper mapper = new ObjectMapper();\n+      mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n+      mapper.setVisibility(\n+          VisibilityChecker.Std.defaultInstance()\n+              .withFieldVisibility(JsonAutoDetect.Visibility.ANY));\n+\n+      final JwtToken jwtToken =\n+          mapper.readValue(Objects.requireNonNull(response.body()).charStream(), JwtToken.class);\n+      return new WebIdentityToken(jwtToken.accessToken, jwtToken.expiredAfter);\n+    } catch (IOException e) {\n+      throw new IllegalStateException(e);\n+    }\n+  }\n+\n+  @SuppressWarnings(\"squid:S106\")\n+  public static void main(String[] args) throws Exception {\n+    final String clientId = \"user\";\n+    final String clientSecret = \"password\";\n+    final String idpEndpoint =\n+        \"http://idp-host:idp-port/auth/realms/master/protocol/openid-connect/token\";\n+    final String stsEndpoint = \"http://sts-host:sts-port/sts\";", "originalCommit": "e4d878e1cdd141b49fac2640c62a4a290e0f02c4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc1NjQzMw==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r448756433", "bodyText": "All newly added source files should have copyright to 2020", "author": "balamurugana", "createdAt": "2020-07-02T05:27:34Z", "path": "examples/ClientGrants.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2017 MinIO, Inc.", "originalCommit": "e4d878e1cdd141b49fac2640c62a4a290e0f02c4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6d63fb288da407604062a2ec7f3ec2dae1373fc2", "url": "https://github.com/minio/minio-java/commit/6d63fb288da407604062a2ec7f3ec2dae1373fc2", "message": "Remove comments from S3Escaper init", "committedDate": "2020-07-02T08:55:19Z", "type": "commit"}, {"oid": "2b70264bdaf7424e14efe6fba6482167d66718a6", "url": "https://github.com/minio/minio-java/commit/2b70264bdaf7424e14efe6fba6482167d66718a6", "message": "Update licence year for examples, update sts url's", "committedDate": "2020-07-02T08:56:54Z", "type": "commit"}, {"oid": "fac6501096d5e3470d4b40dd8d90a2d76245e796", "url": "https://github.com/minio/minio-java/commit/fac6501096d5e3470d4b40dd8d90a2d76245e796", "message": "Added license for new files", "committedDate": "2020-07-02T09:01:48Z", "type": "commit"}, {"oid": "f6b277612b778275a3d491cad44b44ea65530172", "url": "https://github.com/minio/minio-java/commit/f6b277612b778275a3d491cad44b44ea65530172", "message": "Simplify AwsEnvironmentCredentialsProvider", "committedDate": "2020-07-02T09:05:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg4ODg2Nw==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r448888867", "bodyText": "Please add license.", "author": "balamurugana", "createdAt": "2020-07-02T09:57:23Z", "path": "api/src/main/java/io/minio/messages/Credentials.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package io.minio.messages;", "originalCommit": "f6b277612b778275a3d491cad44b44ea65530172", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1ODU2OA==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r448958568", "bodyText": "missed (", "author": "egetman", "createdAt": "2020-07-02T12:16:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg4ODg2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5MTU3OA==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r448891578", "bodyText": "As we are moving away from many overloaded methods, you could keep two public constructors\n\nno arg constructor for XML unmarshalling\n\npublic Credentials() {}\n\nconstructor with accessKey, secretKey, sessionToken and expiration for creating Credentials object; here accessKey cannot be null/empty, secretKey cannot be null and  sessionToken and expiration can be null.\n\npublic Credentials(String accessKey, String secretKey, String sessionToken, ZonedDateTime expiration) {\n    // validate accessKey\n}", "author": "balamurugana", "createdAt": "2020-07-02T10:02:19Z", "path": "api/src/main/java/io/minio/messages/Credentials.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package io.minio.messages;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Objects;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.simpleframework.xml.Element;\n+import org.simpleframework.xml.Root;\n+\n+@Root(name = \"Credentials\", strict = false)\n+public class Credentials {\n+\n+  public static final Credentials EMPTY = new Credentials();\n+\n+  @Element(name = \"AccessKeyId\")\n+  private final String accessKey;\n+\n+  @Element(name = \"SecretAccessKey\")\n+  private final String secretKey;\n+\n+  @Element(name = \"Expiration\")\n+  private final ResponseDate expiredAt;\n+\n+  @Element(name = \"SessionToken\")\n+  private final String sessionToken;\n+\n+  private Credentials() {\n+    accessKey = null;\n+    secretKey = null;\n+    expiredAt = null;\n+    sessionToken = null;\n+  }\n+\n+  public Credentials(@Nonnull String accessKey, @Nonnull String secretKey) {\n+    this(accessKey, secretKey, null);\n+  }\n+\n+  public Credentials(\n+      @Nonnull String accessKey, @Nonnull String secretKey, @Nullable ZonedDateTime expiredAt) {\n+    this(accessKey, secretKey, expiredAt, null);\n+  }\n+\n+  public Credentials(\n+      @Nonnull String accessKey,\n+      @Nonnull String secretKey,\n+      @Nullable ZonedDateTime expiredAt,\n+      @Nullable String sessionToken) {\n+    this(accessKey, secretKey, new ResponseDate(expiredAt), sessionToken);\n+  }\n+\n+  // deserialization constructor\n+  @SuppressWarnings(\"unused\")\n+  public Credentials(", "originalCommit": "f6b277612b778275a3d491cad44b44ea65530172", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk2ODMwMA==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r448968300", "bodyText": "@balamurugana  There are some reasons to use several constructors:\n\nno-agr constructor should not be exposed, in my opinion. It leaves the credentials in an unknown state, so it's difficult to make any assumptions about it.\nusing all-arg constructor for deserialization allows us to make all the credentials fields final. And it's required for correct multithreaded usage of CredentialsProvider. (final fields visibility to concurrent threads).\n2-3-4 args constructor used by different provider implementations (2 for static, 3 for minio env, 4 for aws env). We can remove them, but you will have to pass 2/1 null references in every implementation that use it. If we can suggest that some users will implement their own implementation (based on their access rules/policies) forcing them to use nulls is not the best idea.\n\nWhat do you think about it?", "author": "egetman", "createdAt": "2020-07-02T12:35:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5MTU3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA0ODc0OQ==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r449048749", "bodyText": "If so, we could live with this constructor only. It is perfectly fine to pass null values to arguments accepting null values. I don't know why it is bad to pass null for such arguments.", "author": "balamurugana", "createdAt": "2020-07-02T14:36:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5MTU3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5MjY5Mw==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r448892693", "bodyText": "I don't think EMPTY and this private constructor are useful. Either a credentials object is available or not available.", "author": "balamurugana", "createdAt": "2020-07-02T10:04:18Z", "path": "api/src/main/java/io/minio/messages/Credentials.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package io.minio.messages;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Objects;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.simpleframework.xml.Element;\n+import org.simpleframework.xml.Root;\n+\n+@Root(name = \"Credentials\", strict = false)\n+public class Credentials {\n+\n+  public static final Credentials EMPTY = new Credentials();\n+\n+  @Element(name = \"AccessKeyId\")\n+  private final String accessKey;\n+\n+  @Element(name = \"SecretAccessKey\")\n+  private final String secretKey;\n+\n+  @Element(name = \"Expiration\")\n+  private final ResponseDate expiredAt;\n+\n+  @Element(name = \"SessionToken\")\n+  private final String sessionToken;\n+\n+  private Credentials() {", "originalCommit": "f6b277612b778275a3d491cad44b44ea65530172", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk2MDkwMA==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r448960900", "bodyText": "what about anonymous access? You can hide internal details of creds, or add everywhere null checks (which is a kind of bad api practice)", "author": "egetman", "createdAt": "2020-07-02T12:20:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5MjY5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAzNTQ1NA==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r449035454", "bodyText": "No. If provider is null, it is anonymous and this check should only be in MinioClient. No credential providers return null credentials and null values to access/secret keys.", "author": "balamurugana", "createdAt": "2020-07-02T14:18:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5MjY5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5NTA1Mg==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r448895052", "bodyText": "You could have this method as isEmpty().\nFor anonymous access, we shouldn't pass Credentials object to MinioClient.builder().credentials().\nIf a credential provider returning an empty credential is an error i.e. provider should retry N no. of times (or with configured N) and throw an exception on failure.", "author": "balamurugana", "createdAt": "2020-07-02T10:08:40Z", "path": "api/src/main/java/io/minio/messages/Credentials.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package io.minio.messages;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Objects;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.simpleframework.xml.Element;\n+import org.simpleframework.xml.Root;\n+\n+@Root(name = \"Credentials\", strict = false)\n+public class Credentials {\n+\n+  public static final Credentials EMPTY = new Credentials();\n+\n+  @Element(name = \"AccessKeyId\")\n+  private final String accessKey;\n+\n+  @Element(name = \"SecretAccessKey\")\n+  private final String secretKey;\n+\n+  @Element(name = \"Expiration\")\n+  private final ResponseDate expiredAt;\n+\n+  @Element(name = \"SessionToken\")\n+  private final String sessionToken;\n+\n+  private Credentials() {\n+    accessKey = null;\n+    secretKey = null;\n+    expiredAt = null;\n+    sessionToken = null;\n+  }\n+\n+  public Credentials(@Nonnull String accessKey, @Nonnull String secretKey) {\n+    this(accessKey, secretKey, null);\n+  }\n+\n+  public Credentials(\n+      @Nonnull String accessKey, @Nonnull String secretKey, @Nullable ZonedDateTime expiredAt) {\n+    this(accessKey, secretKey, expiredAt, null);\n+  }\n+\n+  public Credentials(\n+      @Nonnull String accessKey,\n+      @Nonnull String secretKey,\n+      @Nullable ZonedDateTime expiredAt,\n+      @Nullable String sessionToken) {\n+    this(accessKey, secretKey, new ResponseDate(expiredAt), sessionToken);\n+  }\n+\n+  // deserialization constructor\n+  @SuppressWarnings(\"unused\")\n+  public Credentials(\n+      @Nonnull @Element(name = \"AccessKeyId\") String accessKey,\n+      @Nonnull @Element(name = \"SecretAccessKey\") String secretKey,\n+      @Nullable @Element(name = \"Expiration\") ResponseDate expiredAt,\n+      @Nullable @Element(name = \"SessionToken\") String sessionToken) {\n+    this.accessKey = Objects.requireNonNull(accessKey, \"AccessKey must not be null\");\n+    this.secretKey = Objects.requireNonNull(secretKey, \"SecretKey must not be null\");\n+    if (accessKey.isEmpty() || secretKey.isEmpty()) {\n+      throw new IllegalArgumentException(\"AccessKey and SecretKey must not be empty\");\n+    }\n+    this.sessionToken = sessionToken;\n+    this.expiredAt = expiredAt;\n+  }\n+\n+  public String accessKey() {\n+    return accessKey;\n+  }\n+\n+  public String secretKey() {\n+    return secretKey;\n+  }\n+\n+  public ZonedDateTime expiredAt() {\n+    return expiredAt.zonedDateTime();\n+  }\n+\n+  public String sessionToken() {\n+    return sessionToken;\n+  }\n+\n+  public boolean isAnonymous() {", "originalCommit": "f6b277612b778275a3d491cad44b44ea65530172", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3Mjk0MQ==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r448972941", "bodyText": "@balamurugana anonymous access - perfectly valid business use case, if minio allows it. Empty credentials - exception situation, where you can do something, or just retry. So isEmpty() has different semantics. Btw, minio-client builder use by default an anonymous provider, until the client chose to use another. It allows using the same api in minio-client without any null-checks and similar smells.", "author": "egetman", "createdAt": "2020-07-02T12:43:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5NTA1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1NjM5OQ==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r449056399", "bodyText": "Yes. We do support anonymous access i.e. MinioClient.builder().endpoint(\"https://s3.amazonaws.com\").build(); is used to create client instance for anonymous access.\nWhen provider is used, the provider should return credentials on fetch() i.e. returning non-null and access/secret keys in the object are non-null. However MinioClient needs to check for valid credentials by\nCredentials creds = provider.fetch();\nif (creds == null || creds.isEmpty()) {\n  throw new InvalidCredentialsException();\n}\nIt can't blindly use creds with null values.", "author": "balamurugana", "createdAt": "2020-07-02T14:47:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5NTA1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwMzgzNA==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r448903834", "bodyText": "You could remove this constructor.", "author": "balamurugana", "createdAt": "2020-07-02T10:25:23Z", "path": "api/src/main/java/io/minio/messages/WebIdentityToken.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.minio.messages;\n+\n+import java.util.Objects;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+public class WebIdentityToken {\n+\n+  private final String jwtAccessToken;\n+  private final long expiredAfter;\n+  private final String policy;\n+\n+  @SuppressWarnings(\"unused\")\n+  public WebIdentityToken(@Nonnull String jwtAccessToken, long expiredAfter) {", "originalCommit": "f6b277612b778275a3d491cad44b44ea65530172", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3NDcxNA==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r448974714", "bodyText": "I mark it unused because in an example I use another one (without the custom policy). But it's a public api, so some clients definitely will use it. Mb just remove a suppression?", "author": "egetman", "createdAt": "2020-07-02T12:46:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwMzgzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAyOTMzNw==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r449029337", "bodyText": "It is perfectly fine to use below constructor and this can be removed.", "author": "balamurugana", "createdAt": "2020-07-02T14:09:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwMzgzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwNTUzMQ==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r448905531", "bodyText": "This class as same as WebIdentityToken. You could just inherit WebIdentityToken class.", "author": "balamurugana", "createdAt": "2020-07-02T10:28:48Z", "path": "api/src/main/java/io/minio/messages/ClientGrantsToken.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.minio.messages;\n+\n+import java.util.Objects;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+public class ClientGrantsToken {", "originalCommit": "f6b277612b778275a3d491cad44b44ea65530172", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3ODU4OQ==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r448978589", "bodyText": "@balamurugana is it a domain-specific similarity, or just accidentally similarity? In the first case you absolutely right, and both classes can be merged. In the second case what we will do in case of api changes? Are web identity and client grants requests keep looks the same? It will be difficult to change public api later. So tell me please, is we have a first case or second one.", "author": "egetman", "createdAt": "2020-07-02T12:52:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwNTUzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAzMDcyOQ==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r449030729", "bodyText": "I don't know; and not sure where you got web identity. As both the classes are same except names, you could just do by inheritance or bring an abstract class for both and add additional properties in respective classes.", "author": "balamurugana", "createdAt": "2020-07-02T14:11:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwNTUzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwNjkxOQ==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r448906919", "bodyText": "Just have below and remove api/src/main/java/io/minio/messages/AssumeRoleWithWebIdentityResult.java\n  @Path(value = \"AssumeRoleWithWebIdentityResult\")\n  @Element(name = \"Credentials\")\n  private Credentials credentials;", "author": "balamurugana", "createdAt": "2020-07-02T10:31:31Z", "path": "api/src/main/java/io/minio/messages/AssumeRoleWithWebIdentityResponse.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.minio.messages;\n+\n+import org.simpleframework.xml.Element;\n+import org.simpleframework.xml.Namespace;\n+import org.simpleframework.xml.Root;\n+\n+@Root(name = \"AssumeRoleWithWebIdentityResponse\", strict = false)\n+@Namespace(reference = \"https://sts.amazonaws.com/doc/2011-06-15/\")\n+public class AssumeRoleWithWebIdentityResponse {\n+\n+  @Element(name = \"AssumeRoleWithWebIdentityResult\")\n+  private AssumeRoleWithWebIdentityResult webIdentityResult;", "originalCommit": "f6b277612b778275a3d491cad44b44ea65530172", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3OTM1MA==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r448979350", "bodyText": "@balamurugana thanks! i didn't know about that trick", "author": "egetman", "createdAt": "2020-07-02T12:54:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwNjkxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzMDcwNw==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r448930707", "bodyText": "You could use below and remove api/src/main/java/io/minio/messages/AssumeRoleWithClientGrantsResult.java\n  @path(value = \"AssumeRoleWithClientGrantsResult\")\n  @Element(name = \"Credentials\")\n  private Credentials credentials;", "author": "balamurugana", "createdAt": "2020-07-02T11:20:40Z", "path": "api/src/main/java/io/minio/messages/AssumeRoleWithClientGrantsResponse.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.minio.messages;\n+\n+import org.simpleframework.xml.Element;\n+import org.simpleframework.xml.Namespace;\n+import org.simpleframework.xml.Root;\n+\n+@Root(name = \"AssumeRoleWithClientGrantsResponse\", strict = false)\n+@Namespace(reference = \"https://sts.amazonaws.com/doc/2011-06-15/\")\n+public class AssumeRoleWithClientGrantsResponse {\n+\n+  @Element(name = \"AssumeRoleWithClientGrantsResult\")", "originalCommit": "f6b277612b778275a3d491cad44b44ea65530172", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk0MDk3Mg==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r448940972", "bodyText": "We would need to have force fetch as well.", "author": "balamurugana", "createdAt": "2020-07-02T11:42:28Z", "path": "api/src/main/java/io/minio/credentials/CredentialsProvider.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.minio.credentials;\n+\n+import io.minio.messages.Credentials;\n+import java.time.Duration;\n+import java.time.ZonedDateTime;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * This component allows {@link io.minio.MinioClient} to fetch valid (not expired) credentials.\n+ * Note: any provider implementation should cache valid credentials and control it's lifetime to\n+ * prevent unnesessary computation logic of repeatedly called {@link #fetch()}, while holding a\n+ * valid {@link Credentials} instance.\n+ */\n+@SuppressWarnings(\"unused\")\n+public interface CredentialsProvider {\n+\n+  /**\n+   * @return a valid (not expired) {@link Credentials} instance for {@link io.minio.MinioClient}.\n+   */\n+  Credentials fetch();", "originalCommit": "f6b277612b778275a3d491cad44b44ea65530172", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk4MTUwNw==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r448981507", "bodyText": "@balamurugana can you explain?", "author": "egetman", "createdAt": "2020-07-02T12:57:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk0MDk3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk0MTgyOQ==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r448941829", "bodyText": "Anonymous does not have any credentials. You could remove all anonymous credential handling.", "author": "balamurugana", "createdAt": "2020-07-02T11:44:24Z", "path": "api/src/main/java/io/minio/credentials/AnonymousCredentialsProvider.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.", "originalCommit": "f6b277612b778275a3d491cad44b44ea65530172", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk0MzkzMQ==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r448943931", "bodyText": "You could name it as just Provider; Credentials in io.minio.credentials is not needed.", "author": "balamurugana", "createdAt": "2020-07-02T11:48:41Z", "path": "api/src/main/java/io/minio/credentials/CredentialsProvider.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.minio.credentials;\n+\n+import io.minio.messages.Credentials;\n+import java.time.Duration;\n+import java.time.ZonedDateTime;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * This component allows {@link io.minio.MinioClient} to fetch valid (not expired) credentials.\n+ * Note: any provider implementation should cache valid credentials and control it's lifetime to\n+ * prevent unnesessary computation logic of repeatedly called {@link #fetch()}, while holding a\n+ * valid {@link Credentials} instance.\n+ */\n+@SuppressWarnings(\"unused\")\n+public interface CredentialsProvider {", "originalCommit": "f6b277612b778275a3d491cad44b44ea65530172", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk4MjI2OA==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r448982268", "bodyText": "@balamurugana fair", "author": "egetman", "createdAt": "2020-07-02T12:58:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk0MzkzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk0NDc0Nw==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r448944747", "bodyText": "Why is it needed?", "author": "balamurugana", "createdAt": "2020-07-02T11:50:14Z", "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -200,76 +208,80 @@\n   private static final String US_EAST_1 = \"us-east-1\";\n   private static final String UPLOAD_ID = \"uploadId\";\n \n-  private static final Set<String> amzHeaders = new HashSet<>();\n+  @SuppressWarnings(\"MismatchedQueryAndUpdateOfCollection\")", "originalCommit": "f6b277612b778275a3d491cad44b44ea65530172", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk4NjQyOQ==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r448986429", "bodyText": "It means that after initialization that collections don't used anywhere in code. Mb I just don't know about its use cases, so I just added a suppression.", "author": "egetman", "createdAt": "2020-07-02T13:05:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk0NDc0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA2NDUzNw==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r449064537", "bodyText": "Can you send all clean ups and unrelated changes as separate PR?", "author": "balamurugana", "createdAt": "2020-07-02T14:59:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk0NDc0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk0NTg3NQ==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r448945875", "bodyText": "Can you remove these specific to your env?", "author": "balamurugana", "createdAt": "2020-07-02T11:52:29Z", "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -200,76 +208,80 @@\n   private static final String US_EAST_1 = \"us-east-1\";\n   private static final String UPLOAD_ID = \"uploadId\";\n \n-  private static final Set<String> amzHeaders = new HashSet<>();\n+  @SuppressWarnings(\"MismatchedQueryAndUpdateOfCollection\")\n+  private static final Set<String> AMZ_HEADERS = new HashSet<>();\n \n   static {\n-    amzHeaders.add(\"server-side-encryption\");\n-    amzHeaders.add(\"server-side-encryption-aws-kms-key-id\");\n-    amzHeaders.add(\"server-side-encryption-context\");\n-    amzHeaders.add(\"server-side-encryption-customer-algorithm\");\n-    amzHeaders.add(\"server-side-encryption-customer-key\");\n-    amzHeaders.add(\"server-side-encryption-customer-key-md5\");\n-    amzHeaders.add(\"website-redirect-location\");\n-    amzHeaders.add(\"storage-class\");\n+    AMZ_HEADERS.add(\"server-side-encryption\");\n+    AMZ_HEADERS.add(\"server-side-encryption-aws-kms-key-id\");\n+    AMZ_HEADERS.add(\"server-side-encryption-context\");\n+    AMZ_HEADERS.add(\"server-side-encryption-customer-algorithm\");\n+    AMZ_HEADERS.add(\"server-side-encryption-customer-key\");\n+    AMZ_HEADERS.add(\"server-side-encryption-customer-key-md5\");\n+    AMZ_HEADERS.add(\"website-redirect-location\");\n+    AMZ_HEADERS.add(\"storage-class\");\n   }\n \n-  private static final Set<String> standardHeaders = new HashSet<>();\n+  @SuppressWarnings(\"MismatchedQueryAndUpdateOfCollection\")\n+  private static final Set<String> STANDARD_HEADERS = new HashSet<>();\n \n   static {\n-    standardHeaders.add(\"content-type\");\n-    standardHeaders.add(\"cache-control\");\n-    standardHeaders.add(\"content-encoding\");\n-    standardHeaders.add(\"content-disposition\");\n-    standardHeaders.add(\"content-language\");\n-    standardHeaders.add(\"expires\");\n-    standardHeaders.add(\"range\");\n+    STANDARD_HEADERS.add(\"content-type\");\n+    STANDARD_HEADERS.add(\"cache-control\");\n+    STANDARD_HEADERS.add(\"content-encoding\");\n+    STANDARD_HEADERS.add(\"content-disposition\");\n+    STANDARD_HEADERS.add(\"content-language\");\n+    STANDARD_HEADERS.add(\"expires\");\n+    STANDARD_HEADERS.add(\"range\");\n   }\n \n   private String userAgent = DEFAULT_USER_AGENT;\n   private PrintWriter traceStream;\n \n-  private HttpUrl baseUrl;\n-  private String region;\n-  private boolean isAwsHost;\n+  private final HttpUrl baseUrl;\n+  private final String region;\n+  private final boolean isAwsHost;\n   private boolean isAcceleratedHost;\n   private boolean isDualStackHost;\n   private boolean useVirtualStyle;\n-  private String accessKey;\n-  private String secretKey;\n   private OkHttpClient httpClient;\n \n+  private final CredentialsProvider credentialsProvider;\n+\n+  @SuppressWarnings(\"java:S107\")", "originalCommit": "f6b277612b778275a3d491cad44b44ea65530172", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk4NjUzOQ==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r448986539", "bodyText": "ok", "author": "egetman", "createdAt": "2020-07-02T13:05:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk0NTg3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk0NjM2NA==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r448946364", "bodyText": "Builder should take care this check i.e. values from builder are already validated", "author": "balamurugana", "createdAt": "2020-07-02T11:53:26Z", "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -200,76 +208,80 @@\n   private static final String US_EAST_1 = \"us-east-1\";\n   private static final String UPLOAD_ID = \"uploadId\";\n \n-  private static final Set<String> amzHeaders = new HashSet<>();\n+  @SuppressWarnings(\"MismatchedQueryAndUpdateOfCollection\")\n+  private static final Set<String> AMZ_HEADERS = new HashSet<>();\n \n   static {\n-    amzHeaders.add(\"server-side-encryption\");\n-    amzHeaders.add(\"server-side-encryption-aws-kms-key-id\");\n-    amzHeaders.add(\"server-side-encryption-context\");\n-    amzHeaders.add(\"server-side-encryption-customer-algorithm\");\n-    amzHeaders.add(\"server-side-encryption-customer-key\");\n-    amzHeaders.add(\"server-side-encryption-customer-key-md5\");\n-    amzHeaders.add(\"website-redirect-location\");\n-    amzHeaders.add(\"storage-class\");\n+    AMZ_HEADERS.add(\"server-side-encryption\");\n+    AMZ_HEADERS.add(\"server-side-encryption-aws-kms-key-id\");\n+    AMZ_HEADERS.add(\"server-side-encryption-context\");\n+    AMZ_HEADERS.add(\"server-side-encryption-customer-algorithm\");\n+    AMZ_HEADERS.add(\"server-side-encryption-customer-key\");\n+    AMZ_HEADERS.add(\"server-side-encryption-customer-key-md5\");\n+    AMZ_HEADERS.add(\"website-redirect-location\");\n+    AMZ_HEADERS.add(\"storage-class\");\n   }\n \n-  private static final Set<String> standardHeaders = new HashSet<>();\n+  @SuppressWarnings(\"MismatchedQueryAndUpdateOfCollection\")\n+  private static final Set<String> STANDARD_HEADERS = new HashSet<>();\n \n   static {\n-    standardHeaders.add(\"content-type\");\n-    standardHeaders.add(\"cache-control\");\n-    standardHeaders.add(\"content-encoding\");\n-    standardHeaders.add(\"content-disposition\");\n-    standardHeaders.add(\"content-language\");\n-    standardHeaders.add(\"expires\");\n-    standardHeaders.add(\"range\");\n+    STANDARD_HEADERS.add(\"content-type\");\n+    STANDARD_HEADERS.add(\"cache-control\");\n+    STANDARD_HEADERS.add(\"content-encoding\");\n+    STANDARD_HEADERS.add(\"content-disposition\");\n+    STANDARD_HEADERS.add(\"content-language\");\n+    STANDARD_HEADERS.add(\"expires\");\n+    STANDARD_HEADERS.add(\"range\");\n   }\n \n   private String userAgent = DEFAULT_USER_AGENT;\n   private PrintWriter traceStream;\n \n-  private HttpUrl baseUrl;\n-  private String region;\n-  private boolean isAwsHost;\n+  private final HttpUrl baseUrl;\n+  private final String region;\n+  private final boolean isAwsHost;\n   private boolean isAcceleratedHost;\n   private boolean isDualStackHost;\n   private boolean useVirtualStyle;\n-  private String accessKey;\n-  private String secretKey;\n   private OkHttpClient httpClient;\n \n+  private final CredentialsProvider credentialsProvider;\n+\n+  @SuppressWarnings(\"java:S107\")\n   private MinioClient(\n       HttpUrl baseUrl,\n       String region,\n       boolean isAwsHost,\n       boolean isAcceleratedHost,\n       boolean isDualStackHost,\n       boolean useVirtualStyle,\n-      String accessKey,\n-      String secretKey,\n+      CredentialsProvider credentialsProvider,\n       OkHttpClient httpClient) {\n-    this.baseUrl = baseUrl;\n+\n     this.region = region;\n+    this.baseUrl = baseUrl;\n     this.isAwsHost = isAwsHost;\n-    this.isAcceleratedHost = isAcceleratedHost;\n+    this.httpClient = httpClient;\n     this.isDualStackHost = isDualStackHost;\n     this.useVirtualStyle = useVirtualStyle;\n-    this.accessKey = accessKey;\n-    this.secretKey = secretKey;\n-    this.httpClient = httpClient;\n+    this.isAcceleratedHost = isAcceleratedHost;\n+    this.credentialsProvider =\n+        Objects.requireNonNull(credentialsProvider, \"Credentials provider can't be null\");", "originalCommit": "f6b277612b778275a3d491cad44b44ea65530172", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3a353de2955f4222e638c1007d8ae1b1bf1985fc", "url": "https://github.com/minio/minio-java/commit/3a353de2955f4222e638c1007d8ae1b1bf1985fc", "message": "Some review fixes", "committedDate": "2020-07-02T13:12:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA2MjA2Mw==", "url": "https://github.com/minio/minio-java/pull/996#discussion_r449062063", "bodyText": "You could refer minio-py; but it can be brought later if needed.", "author": "balamurugana", "createdAt": "2020-07-02T14:56:02Z", "path": "api/src/main/java/io/minio/credentials/Provider.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.minio.credentials;\n+\n+import io.minio.messages.Credentials;\n+import java.time.Duration;\n+import java.time.ZonedDateTime;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * This component allows {@link io.minio.MinioClient} to fetch valid (not expired) credentials.\n+ * Note: any provider implementation should cache valid credentials and control it's lifetime to\n+ * prevent unnesessary computation logic of repeatedly called {@link #fetch()}, while holding a\n+ * valid {@link Credentials} instance.\n+ */\n+@SuppressWarnings(\"unused\")\n+public interface Provider {\n+\n+  /**\n+   * @return a valid (not expired) {@link Credentials} instance for {@link io.minio.MinioClient}.\n+   */\n+  Credentials fetch();", "originalCommit": "3a353de2955f4222e638c1007d8ae1b1bf1985fc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "db1f61fa97cab39481128ce96c3fb67d9712a071", "url": "https://github.com/minio/minio-java/commit/db1f61fa97cab39481128ce96c3fb67d9712a071", "message": "Revert \"Update MinioClient with new CredentialsProvider api. Minor code cleanups\"\n\nThis reverts commit c924f492", "committedDate": "2020-07-08T15:21:26Z", "type": "commit"}, {"oid": "74587025427ccd8095d142a191c157a613b89429", "url": "https://github.com/minio/minio-java/commit/74587025427ccd8095d142a191c157a613b89429", "message": "Removed AnonymousProvider, cleanups and some constructors. Added several null-checks in different places.", "committedDate": "2020-07-08T16:38:07Z", "type": "commit"}, {"oid": "faf607485cfc985292a438cfe6b1a1d6de6c0236", "url": "https://github.com/minio/minio-java/commit/faf607485cfc985292a438cfe6b1a1d6de6c0236", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-07-09T10:03:51Z", "type": "commit"}, {"oid": "89e97214b0c52256a757336bf8c0995019f24c86", "url": "https://github.com/minio/minio-java/commit/89e97214b0c52256a757336bf8c0995019f24c86", "message": "Update pr with upstream", "committedDate": "2020-07-09T10:36:43Z", "type": "commit"}, {"oid": "5f3cfb3f2ffd83214e936a61e34ee3fdaa5b20b0", "url": "https://github.com/minio/minio-java/commit/5f3cfb3f2ffd83214e936a61e34ee3fdaa5b20b0", "message": "Merge remote-tracking branch 'upstream/master' into sts-client-grants", "committedDate": "2020-07-23T15:44:22Z", "type": "commit"}, {"oid": "2217140ff4af8781946b8693b4441c9d70e69af5", "url": "https://github.com/minio/minio-java/commit/2217140ff4af8781946b8693b4441c9d70e69af5", "message": "Merge remote-tracking branch 'upstream/master' into sts-client-grants", "committedDate": "2020-07-23T15:58:48Z", "type": "commit"}, {"oid": "8384194934e1e1b501fdda41e2d0f48505b0aa55", "url": "https://github.com/minio/minio-java/commit/8384194934e1e1b501fdda41e2d0f48505b0aa55", "message": "Merge remote-tracking branch 'origin/sts-client-grants' into sts-client-grants\n\n# Conflicts:\n#\tapi/src/main/java/io/minio/MinioClient.java", "committedDate": "2020-07-23T15:59:42Z", "type": "commit"}]}