{"pr_number": 1042, "pr_title": "add MinioClient credential provider from config file", "pr_createdAt": "2020-08-17T10:12:11Z", "pr_url": "https://github.com/minio/minio-java/pull/1042", "timeline": [{"oid": "79d325c26ee1d5bda761bb655243016f63473a66", "url": "https://github.com/minio/minio-java/commit/79d325c26ee1d5bda761bb655243016f63473a66", "message": "add MinioClient credential provider from config file", "committedDate": "2020-08-17T10:10:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIxMjczNQ==", "url": "https://github.com/minio/minio-java/pull/1042#discussion_r480212735", "bodyText": "you will have to handle bucket vs Path style access also. In that case, the format has changed recently, so both of them have to be supported", "author": "kannappanr", "createdAt": "2020-08-31T15:37:55Z", "path": "api/src/main/java/io/minio/credentials/MinioClientConfigProvider.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.credentials;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Paths;\n+import java.util.Locale;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+\n+/** Credential provider using MinioClient configuration file. */\n+public class MinioClientConfigProvider extends EnvironmentProvider {\n+  private final String filename;\n+  private final String alias;\n+  private final ObjectMapper mapper;\n+\n+  public MinioClientConfigProvider(@Nullable String filename, @Nullable String alias) {\n+    if (filename != null && filename.isEmpty()) {\n+      throw new IllegalArgumentException(\"Filename must not be empty\");\n+    }\n+\n+    if (alias != null && alias.isEmpty()) {\n+      throw new IllegalArgumentException(\"Alias must not be empty\");\n+    }\n+\n+    this.filename = filename;\n+    this.alias = alias;\n+    this.mapper = new ObjectMapper();\n+    this.mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+    this.mapper.configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true);\n+  }\n+\n+  /**\n+   * Retrieve credentials in provided alias or MINIO_ALIAS or \"s3\" alias in configuration file from\n+   * provided filename or AWS_SHARED_CREDENTIALS_FILE environment variable or file .aws/credentials\n+   * in user's home directory.\n+   */\n+  @Override\n+  public Credentials fetch() {\n+    String filename = this.filename;\n+    if (filename == null) {\n+      filename = getProperty(\"MINIO_SHARED_CREDENTIALS_FILE\");\n+    }\n+    if (filename == null) {\n+      String mcDir = \".mc\";\n+      if (System.getProperty(\"os.name\").toLowerCase(Locale.US).contains(\"windows\")) {\n+        mcDir = \"mc\";\n+      }\n+\n+      filename = Paths.get(System.getProperty(\"user.home\"), mcDir, \"config.json\").toString();\n+    }\n+\n+    String alias = this.alias;\n+    if (alias == null) {\n+      alias = getProperty(\"MINIO_ALIAS\");\n+    }\n+    if (alias == null) {\n+      alias = \"s3\";\n+    }\n+\n+    try (InputStream is = new FileInputStream(filename)) {\n+      McConfig config =\n+          mapper.readValue(new InputStreamReader(is, StandardCharsets.UTF_8), McConfig.class);\n+      Map<String, String> values = config.get(alias);\n+      if (values == null) {\n+        throw new IllegalStateException(\n+            \"Alias \" + alias + \" does not exist in MinioClient configuration file\");\n+      }\n+\n+      String accessKey = values.get(\"accessKey\");\n+      String secretKey = values.get(\"secretKey\");\n+\n+      if (accessKey == null) {\n+        throw new IllegalStateException(\n+            \"Access key does not exist in alias \" + alias + \" in MinioClient configuration file\");\n+      }\n+\n+      if (secretKey == null) {\n+        throw new IllegalStateException(\n+            \"Secret key does not exist in alias \" + alias + \" in MinioClient configuration file\");\n+      }\n+\n+      return new Credentials(accessKey, secretKey, null, null);", "originalCommit": "79d325c26ee1d5bda761bb655243016f63473a66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0Njk4NQ==", "url": "https://github.com/minio/minio-java/pull/1042#discussion_r480246985", "bodyText": "@kannappanr\nCan you explain what is  bucket vs Path style access? Also can you provide new format change?", "author": "balamurugana", "createdAt": "2020-08-31T16:31:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIxMjczNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4NjA0Mw==", "url": "https://github.com/minio/minio-java/pull/1042#discussion_r480286043", "bodyText": "with the new format\n\"default\": {\n                        \"url\": \"http://localhost:9000\",\n                        \"accessKey\": \"minioadmin\",\n                        \"secretKey\": \"minioadmin\",\n                        \"api\": \"s3v4\",\n                        \"path\": \"auto\"\n                },\n\nHere path has two possible values auto and off, off means it is bucket style access. If the endpoint is AWS, you still have to do bucket style access", "author": "kannappanr", "createdAt": "2020-08-31T17:43:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIxMjczNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4NzQxOQ==", "url": "https://github.com/minio/minio-java/pull/1042#discussion_r480287419", "bodyText": "with old format,\n \"s3\": {\n                        \"url\": \"https://s3.amazonaws.com\",\n                        \"accessKey\": \"YOUR-ACCESS-KEY-HERE\",\n                        \"secretKey\": \"YOUR-SECRET-KEY-HERE\",\n                        \"api\": \"S3v4\",\n                        \"lookup\": \"dns\"\n                }\n\n\nlookup will have one of three values dns, path, auto dns means it is bucket style access, in the case of auto, if the endpoint is AWS, we should do bucket style access", "author": "kannappanr", "createdAt": "2020-08-31T17:46:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIxMjczNQ=="}], "type": "inlineReview"}]}