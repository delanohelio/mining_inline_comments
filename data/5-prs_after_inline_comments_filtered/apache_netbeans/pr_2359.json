{"pr_number": 2359, "pr_title": "commit-validation fixes: code improvements", "pr_createdAt": "2020-09-10T12:46:44Z", "pr_url": "https://github.com/apache/netbeans/pull/2359", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMwNzYzMg==", "url": "https://github.com/apache/netbeans/pull/2359#discussion_r486307632", "bodyText": "Compatible, Services Lookup is recursive.", "author": "sdedic", "createdAt": "2020-09-10T12:47:53Z", "path": "ide/gsf.testrunner/src/org/netbeans/modules/gsf/testrunner/TestCreatorProviderProcessor.java", "diffHunk": "@@ -47,11 +47,11 @@ protected boolean handleProcess(Set<? extends TypeElement> annotations, RoundEnv\n             if(registration == null) {\n                 continue;\n             }\n-            File f = layer(e).instanceFile(\"Services\", null);\n+            File f = layer(e).instanceFile(\"Services/TestCreatorProviders\", null);", "originalCommit": "e2b55e525aa4a10c7e974f50e0fff6d9bf9dd011", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIxNDc0Mw==", "url": "https://github.com/apache/netbeans/pull/2359#discussion_r489214743", "bodyText": "Right. It is.", "author": "JaroslavTulach", "createdAt": "2020-09-16T07:15:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMwNzYzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMwOTU4MA==", "url": "https://github.com/apache/netbeans/pull/2359#discussion_r486309580", "bodyText": "The Processor generates same position for all position-less registrations, which fails commit-validationtest.", "author": "sdedic", "createdAt": "2020-09-10T12:50:49Z", "path": "ide/gsf.testrunner/src/org/netbeans/modules/gsf/testrunner/TestCreatorProviderProcessor.java", "diffHunk": "@@ -47,11 +47,11 @@ protected boolean handleProcess(Set<? extends TypeElement> annotations, RoundEnv\n             if(registration == null) {\n                 continue;\n             }\n-            File f = layer(e).instanceFile(\"Services\", null);\n+            File f = layer(e).instanceFile(\"Services/TestCreatorProviders\", null);\n             f.stringvalue(\"instanceOf\", TestCreatorProvider.class.getName());\n             f.bundlevalue(\"displayName\", registration.displayName());\n             f.bundlevalue(\"identifier\", registration.identifier());\n-            if (registration.position() != -1) {\n+            if (registration.position() != -1 && registration.position() != Integer.MAX_VALUE) {", "originalCommit": "e2b55e525aa4a10c7e974f50e0fff6d9bf9dd011", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMwOTY5MQ==", "url": "https://github.com/apache/netbeans/pull/2359#discussion_r486309691", "bodyText": "Surprisingly this Lambda caused the test to fail on CNFE when instantiating the Iterator (test checks if the instanceCreate works), as nbjavac's *Element were not available at test time. Moving to a subclass delayed linkage (the task actually never runs during test)", "author": "sdedic", "createdAt": "2020-09-10T12:50:58Z", "path": "java/java.project.ui/src/org/netbeans/modules/java/project/ui/NewJavaFileWizardIterator.java", "diffHunk": "@@ -241,17 +242,28 @@ private void addRequires(FileObject createdFile, Set<String> requiredModuleNames\n             final JavaSource src = JavaSource.forFileObject(createdFile);\n             if (src != null) {\n                 final Set<String> mNames = requiredModuleNames;\n-                src.runModificationTask((WorkingCopy copy) -> {\n-                    copy.toPhase(JavaSource.Phase.RESOLVED);", "originalCommit": "e2b55e525aa4a10c7e974f50e0fff6d9bf9dd011", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIxNTA0Mw==", "url": "https://github.com/apache/netbeans/pull/2359#discussion_r489215043", "bodyText": "Fine.", "author": "JaroslavTulach", "createdAt": "2020-09-16T07:16:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMwOTY5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMxMzM3MQ==", "url": "https://github.com/apache/netbeans/pull/2359#discussion_r486313371", "bodyText": "The problem is that with MIME being hierarchical, a single position defined in text/x-java means, that if anyone registers a general service (in /):\n\nif position is not specified, that service faisl commit-validation as the sequence text/x-java/* + /* contains both defined and undefined positions\nif general service does define position, then all MIMEs other than java must start to provide positions.\n\nSo as discussed with @JaroslavTulach, it's far more safer to generate some positions always.\nThe goal is to:\n\ngenerate position\nprefer more specific (lower in the folder hierarchy) registrations\ndefine some stable order\ngenerate different numbers :-)\n\nNote the exclusion of the \"\" (none) subfolder: various services are registered in Editors/ (or relevant MIME) directly which do NOT have position at the moment, and are registerd manually (entries in layers.xml, ...). Tons of changes would happen if positions would be generated by the annotation processor there. So this change only affect \"named\" service subfolders.", "author": "sdedic", "createdAt": "2020-09-10T12:56:12Z", "path": "platform/editor.mimelookup/src/org/netbeans/modules/editor/mimelookup/CreateRegistrationProcessor.java", "diffHunk": "@@ -145,7 +147,17 @@ private void process(Element toRegister, AnnotationMirror mimeRegistration) thro\n             }\n \n             instantiableClassOrMethod(toRegister, apiTE);\n-            layer(toRegister).instanceFile(\"Editors\" + mimeType + folder, null, null).position(position).stringvalue(\"instanceOf\", processingEnv.getElementUtils().getBinaryName(apiTE).toString()).write();    //NOI18N\n+            File f = layer(toRegister).instanceFile(\"Editors\" + mimeType + folder, null, null);\n+            if (position == Integer.MAX_VALUE && !\"\".equals(folder)) {", "originalCommit": "e2b55e525aa4a10c7e974f50e0fff6d9bf9dd011", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIxNTUzMA==", "url": "https://github.com/apache/netbeans/pull/2359#discussion_r489215530", "bodyText": "Right, generate some positions always.", "author": "JaroslavTulach", "createdAt": "2020-09-16T07:17:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMxMzM3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMxMzc4NQ==", "url": "https://github.com/apache/netbeans/pull/2359#discussion_r486313785", "bodyText": "Turned out to be a problem when commit-validation was run on clustrer.config=platform (no keymaps there)", "author": "sdedic", "createdAt": "2020-09-10T12:56:50Z", "path": "platform/o.n.core/test/qa-functional/src/org/netbeans/core/validation/ValidateLayerConsistencyTest.java", "diffHunk": "@@ -905,7 +905,11 @@ private boolean skipFile(FileObject fo) {\n \n     public void testKeymapOverrides() throws Exception { // #170677\n         List<String> warnings = new ArrayList<String>();\n-        FileObject[] keymaps = FileUtil.getConfigFile(\"Keymaps\").getChildren();\n+        FileObject keymapRoot = FileUtil.getConfigFile(\"Keymaps\");", "originalCommit": "e2b55e525aa4a10c7e974f50e0fff6d9bf9dd011", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "56a2b4b08974f588191bd5c23a0d118525465f20", "url": "https://github.com/apache/netbeans/commit/56a2b4b08974f588191bd5c23a0d118525465f20", "message": "Do not fail on smaller cluster.configs", "committedDate": "2020-09-10T14:14:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIxNjE2OA==", "url": "https://github.com/apache/netbeans/pull/2359#discussion_r489216168", "bodyText": "Couldn't, by a chance, the check for Projects/.+/Lookup be removed by using the same trick with autogenerating the position? No need to solve it in this PR however.", "author": "JaroslavTulach", "createdAt": "2020-09-16T07:18:24Z", "path": "platform/openide.filesystems/src/org/openide/filesystems/Ordering.java", "diffHunk": "@@ -158,7 +164,8 @@ public int compareTo(ChildAndPosition o) {\n                 previousChild = subsequentChild;\n             }\n         }\n-        if (logWarnings && /* #201893*/ !parent.getPath().matches(\"Projects/.+/Lookup\") && !childrenByPosition.isEmpty() && childrenByPosition.size() < children.size()) {\n+        if (logWarnings && /* #201893*/ !parent.getPath().matches(\"Projects/.+/Lookup\") && !childrenByPosition.isEmpty() && childrenByPosition.size() < children.size() && ", "originalCommit": "56a2b4b08974f588191bd5c23a0d118525465f20", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3MzE1Ng==", "url": "https://github.com/apache/netbeans/pull/2359#discussion_r491673156", "bodyText": "The more specific type caused reflection errors when instantiated from OpenIDE's MimeFactory.", "author": "sdedic", "createdAt": "2020-09-20T09:33:30Z", "path": "enterprise/j2ee.sun.ddui/src/org/netbeans/modules/j2ee/sun/ddloaders/SunDescriptorDataObject.java", "diffHunk": "@@ -107,7 +108,7 @@ protected int getXMLMultiViewIndex() {\n     private DDType descriptorType;\n     private final int xmlIndex;\n     \n-    public SunDescriptorDataObject(FileObject pf, SunDescriptorDataLoader loader) throws DataObjectExistsException {\n+    public SunDescriptorDataObject(FileObject pf, MultiFileLoader loader) throws DataObjectExistsException {", "originalCommit": "5c6f453d566c064e9d44f4f348b72af937dab69f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY5NDQ3Nw==", "url": "https://github.com/apache/netbeans/pull/2359#discussion_r491694477", "bodyText": "Failure in sigtest check:\nClass org.netbeans.modules.j2ee.sun.ddloaders.SunDescriptorDataObject\n\n  \"E5.4 - Removing constructor\" : constructor public org.netbeans.modules.j2ee.sun.ddloaders.SunDescriptorDataObject.init(org.openide.filesystems.FileObject,org.netbeans.modules.j2ee.sun.ddloaders.SunDescriptorDataLoader)\n\nKeep both constructors, if possible. Alternatively let's investigate why this is broken at all: what is the actual failure with the old constructor signature?", "author": "JaroslavTulach", "createdAt": "2020-09-20T14:01:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3MzE1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcyODA2MQ==", "url": "https://github.com/apache/netbeans/pull/2359#discussion_r491728061", "bodyText": "For the records, the error was:\n    [junit] java.lang.NoSuchMethodException: org.netbeans.modules.payara.eecommon.dd.loader.PayaraDescriptorDataObject.<init>(org.openide.filesystems.FileObj\nect, org.openide.loaders.MultiFileLoader)\n    [junit]     at java.lang.Class.getConstructor0(Class.java:3082)\n    [junit]     at java.lang.Class.getConstructor(Class.java:1825)\n    [junit]     at org.openide.loaders.MimeFactory.<init>(MimeFactory.java:54)\n    [junit] Caused: java.lang.IllegalStateException: org.netbeans.modules.payara.eecommon.dd.loader.PayaraDescriptorDataObject.<init>(org.openide.filesystems\n.FileObject, org.openide.loaders.MultiFileLoader)\n    [junit]     at org.openide.loaders.MimeFactory.<init>(MimeFactory.java:57)\n    [junit]     at org.openide.loaders.MimeFactory.layer(MimeFactory.java:77)\n    [junit]     at org.openide.loaders.DataLoaderPool.factory(DataLoaderPool.java:641)\n    [junit] Caused: java.lang.reflect.InvocationTargetException\n    [junit]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    [junit]     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    [junit]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    [junit]     at java.lang.reflect.Method.invoke(Method.java:498)\n    [junit]     at org.netbeans.core.startup.layers.BinaryFS$AttrImpl$MethodAndParams.invoke(BinaryFS.java:730)\n    [junit] [catch] at org.netbeans.core.startup.layers.BinaryFS$AttrImpl.getValue(BinaryFS.java:660)\n    [junit]     at org.netbeans.core.startup.layers.BinaryFS$BFSBase.getAttribute(BinaryFS.java:506)\n    [junit]     at org.openide.filesystems.MultiFileObject.getAttribute(MultiFileObject.java:918)\n    [junit]     at org.openide.filesystems.MultiFileObject.getAttribute(MultiFileObject.java:851)", "author": "sdedic", "createdAt": "2020-09-20T19:57:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3MzE1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcyODExMA==", "url": "https://github.com/apache/netbeans/pull/2359#discussion_r491728110", "bodyText": "MimeFactory looks specifically for a constructor with MultiFileLoader in the signature; maybe it could search constructors for MFL subclass ?", "author": "sdedic", "createdAt": "2020-09-20T19:58:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3MzE1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkwNjkwMA==", "url": "https://github.com/apache/netbeans/pull/2359#discussion_r491906900", "bodyText": "Strangely enough, the @DataObject.Registration on  PayaraDescriptorDataObject could have never worked, IMHO: MimeFactory passes in an instance created by DataLoaderPool.getDefaultFileLoader(), which is definitely not a SunDDwhatever. Maybe I could save the API change entirely by removing the extra (not effectively used) registration completely, leaving the registration on PayaraDescriptorDataLoader only.", "author": "sdedic", "createdAt": "2020-09-21T09:34:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3MzE1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY2Mzk2Mw==", "url": "https://github.com/apache/netbeans/pull/2359#discussion_r492663963", "bodyText": "I have reverted the SunDescriptorDataObject, and removed the extra (and non-working) registration in Payara. Filed NETBEANS-4828.", "author": "sdedic", "createdAt": "2020-09-22T11:36:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3MzE1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3MzI4NA==", "url": "https://github.com/apache/netbeans/pull/2359#discussion_r491673284", "bodyText": "Apparently a typo, but please review, @jGauravGupta", "author": "sdedic", "createdAt": "2020-09-20T09:34:59Z", "path": "enterprise/payara.eecommon/src/org/netbeans/modules/payara/eecommon/dd/loader/PayaraDescriptorDataObject.java", "diffHunk": "@@ -113,7 +114,7 @@\n     ),\n     @ActionReference(\n             path = DD_ACTION_PATH,\n-            id = @ActionID(category = \"Edit\", id = \"org.openide.actions.RenameAction\"),\n+            id = @ActionID(category = \"System\", id = \"org.openide.actions.RenameAction\"),", "originalCommit": "5c6f453d566c064e9d44f4f348b72af937dab69f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3MzYxNA==", "url": "https://github.com/apache/netbeans/pull/2359#discussion_r491673614", "bodyText": "Even junit has positional info, let's generate automatically.", "author": "sdedic", "createdAt": "2020-09-20T09:39:45Z", "path": "ide/gsf.testrunner/src/org/netbeans/modules/gsf/testrunner/TestCreatorProviderProcessor.java", "diffHunk": "@@ -47,12 +47,19 @@ protected boolean handleProcess(Set<? extends TypeElement> annotations, RoundEnv\n             if(registration == null) {\n                 continue;\n             }\n-            File f = layer(e).instanceFile(\"Services\", null);\n+            File f = layer(e).instanceFile(\"Services/TestCreatorProviders\", null);\n             f.stringvalue(\"instanceOf\", TestCreatorProvider.class.getName());\n             f.bundlevalue(\"displayName\", registration.displayName());\n             f.bundlevalue(\"identifier\", registration.identifier());\n-            if (registration.position() != -1) {\n-                f.intvalue(\"position\", registration.position());\n+            int pos = registration.position();\n+            if (pos != -1) {\n+                if (pos == Integer.MAX_VALUE) {", "originalCommit": "5c6f453d566c064e9d44f4f348b72af937dab69f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3MzgwNg==", "url": "https://github.com/apache/netbeans/pull/2359#discussion_r491673806", "bodyText": "Ignnores unsatisfied Java dependencies for both eager and autoload modules: when tests run on JDK8 dependencies on JDK9/11 makes the module to fail. If it is eager, it's OK to ignore, it's just enhancing something.", "author": "sdedic", "createdAt": "2020-09-20T09:42:12Z", "path": "platform/core.startup/src/org/netbeans/core/startup/ConsistencyVerifier.java", "diffHunk": "@@ -152,7 +152,7 @@ private ConsistencyVerifier() {}\n             for (Object prob : probs) {\n                 if (prob instanceof Dependency) {\n                     Dependency d = (Dependency) prob;\n-                    if (Dependency.TYPE_JAVA == d.getType() && m.isAutoload()) {\n+                    if (Dependency.TYPE_JAVA == d.getType() && (m.isEager() || m.isAutoload())) {", "originalCommit": "5c6f453d566c064e9d44f4f348b72af937dab69f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3MzkzNA==", "url": "https://github.com/apache/netbeans/pull/2359#discussion_r491673934", "bodyText": "both ordered and undordered bits have to be set for a category (folder OR file) to log the warning.", "author": "sdedic", "createdAt": "2020-09-20T09:44:16Z", "path": "platform/openide.filesystems/src/org/openide/filesystems/Ordering.java", "diffHunk": "@@ -158,7 +164,18 @@ public int compareTo(ChildAndPosition o) {\n                 previousChild = subsequentChild;\n             }\n         }\n-        if (logWarnings && /* #201893*/ !parent.getPath().matches(\"Projects/.+/Lookup\") && !childrenByPosition.isEmpty() && childrenByPosition.size() < children.size()) {\n+        boolean shouldLog = logWarnings && !childrenByPosition.isEmpty() && childrenByPosition.size() < children.size();\n+        if (shouldLog) {\n+            // exceptions:  See Bugzilla#201893 \n+            if (parent.getPath().matches(\"Projects/.+/Lookup\")) {\n+                // do not report any order issues for Projects/Lookup, even between files, or between folders.\n+                shouldLog = false;\n+            } else if (FileUtil.isParentOf(FileUtil.getConfigRoot(), parent) && ((ordered & unordered) == 0)) {", "originalCommit": "5c6f453d566c064e9d44f4f348b72af937dab69f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b54371e7df39f603d86856a9dd6cc6352f7df41b", "url": "https://github.com/apache/netbeans/commit/b54371e7df39f603d86856a9dd6cc6352f7df41b", "message": "Positions always generated for MIME services; Ordering does not warn if all files or all dirs are unordered.", "committedDate": "2020-09-20T18:31:13Z", "type": "commit"}, {"oid": "b75cef340f0e5753ed851e7f6422d7228fa97215", "url": "https://github.com/apache/netbeans/commit/b75cef340f0e5753ed851e7f6422d7228fa97215", "message": "Do not generate spurious MAXINT positions.", "committedDate": "2020-09-20T18:31:13Z", "type": "commit"}, {"oid": "3a191af559fcc5b6a1fd4175e3973e3c39d24211", "url": "https://github.com/apache/netbeans/commit/3a191af559fcc5b6a1fd4175e3973e3c39d24211", "message": "Lambda causes linkage error during tests (nbjavac not present on cp).", "committedDate": "2020-09-20T18:31:13Z", "type": "commit"}, {"oid": "c008c90bd565e9aac9889b104bd63fb59b01f82f", "url": "https://github.com/apache/netbeans/commit/c008c90bd565e9aac9889b104bd63fb59b01f82f", "message": "Do not fail on smaller cluster.configs", "committedDate": "2020-09-20T18:31:14Z", "type": "commit"}, {"oid": "3dad0684ba632392f9db32fb6aecbe832bf48313", "url": "https://github.com/apache/netbeans/commit/3dad0684ba632392f9db32fb6aecbe832bf48313", "message": "Fixed checking in Ordering, relaxed only for configfs", "committedDate": "2020-09-20T18:31:14Z", "type": "commit"}, {"oid": "15447f6bb22e37db445ea6b79d7e0ad9b270430d", "url": "https://github.com/apache/netbeans/commit/15447f6bb22e37db445ea6b79d7e0ad9b270430d", "message": "Add webcommon for testing", "committedDate": "2020-09-20T18:31:14Z", "type": "commit"}, {"oid": "8e5d5d115f88f4569f88600ac22f68503afd302a", "url": "https://github.com/apache/netbeans/commit/8e5d5d115f88f4569f88600ac22f68503afd302a", "message": "Collect more errors in one run.", "committedDate": "2020-09-20T18:31:14Z", "type": "commit"}, {"oid": "69bdff9b6700b3b3491a635172ae7946b51f273f", "url": "https://github.com/apache/netbeans/commit/69bdff9b6700b3b3491a635172ae7946b51f273f", "message": "Various fixes that may affect code. Pending review: NETBEANS-4826, NETBEANS-4828", "committedDate": "2020-09-21T12:36:09Z", "type": "commit"}, {"oid": "5b7f33611db77d2f66e97ceb354aef209df90b2d", "url": "https://github.com/apache/netbeans/commit/5b7f33611db77d2f66e97ceb354aef209df90b2d", "message": "Ignore java failures for eager modules as well.", "committedDate": "2020-09-21T12:36:09Z", "type": "commit"}, {"oid": "4c86f659fd22c1ec3dd6f41c1450166aa19a8ce6", "url": "https://github.com/apache/netbeans/commit/4c86f659fd22c1ec3dd6f41c1450166aa19a8ce6", "message": "Removed unused performance.* modules.", "committedDate": "2020-09-21T12:36:10Z", "type": "commit"}, {"oid": "166f1d17b6ccbdb823599471265809b27cf0bd77", "url": "https://github.com/apache/netbeans/commit/166f1d17b6ccbdb823599471265809b27cf0bd77", "message": "Added release to cpplite", "committedDate": "2020-09-21T12:36:10Z", "type": "commit"}, {"oid": "b3bbf3ced43422ee1aa7a0bb2f2a89e1d37cfbe9", "url": "https://github.com/apache/netbeans/commit/b3bbf3ced43422ee1aa7a0bb2f2a89e1d37cfbe9", "message": "Wait for Updater to finish before testing.", "committedDate": "2020-09-22T10:45:22Z", "type": "commit"}, {"oid": "b3bbf3ced43422ee1aa7a0bb2f2a89e1d37cfbe9", "url": "https://github.com/apache/netbeans/commit/b3bbf3ced43422ee1aa7a0bb2f2a89e1d37cfbe9", "message": "Wait for Updater to finish before testing.", "committedDate": "2020-09-22T10:45:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY2NTAwMA==", "url": "https://github.com/apache/netbeans/pull/2359#discussion_r492665000", "bodyText": "checkCompletion waits for Updater to finish, this check's variant did not. Caused spurious errors / race conditions locally.", "author": "sdedic", "createdAt": "2020-09-22T11:38:19Z", "path": "webcommon/javascript2.jquery/test/unit/src/org/netbeans/modules/javascript2/jquery/JQueryCodeCompletionSelectorsTest.java", "diffHunk": "@@ -190,6 +191,7 @@ public void testAttributeName_05() throws Exception {\n     }\n \n     public void checkAppliedCompletion(final String file, final String caretLine, final String expectedLine, final String itemToComplete, final boolean includeModifiers) throws Exception {\n+        RepositoryUpdater.getDefault().waitUntilFinished(10000);", "originalCommit": "b3bbf3ced43422ee1aa7a0bb2f2a89e1d37cfbe9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}