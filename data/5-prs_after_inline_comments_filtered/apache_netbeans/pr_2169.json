{"pr_number": 2169, "pr_title": "[NETBEANS-4415] Export dataview results to file", "pr_createdAt": "2020-06-07T23:50:46Z", "pr_url": "https://github.com/apache/netbeans/pull/2169", "timeline": [{"oid": "76a7f1f08177340084b645859ab4f21e04c24b5e", "url": "https://github.com/apache/netbeans/commit/76a7f1f08177340084b645859ab4f21e04c24b5e", "message": "[NETBEANS-4415] Export dataview results to file\n\n * Support .csv, .tsv and .xlsx formats\n\nJira: https://issues.apache.org/jira/browse/NETBEANS-4415", "committedDate": "2020-07-13T21:21:46Z", "type": "commit"}, {"oid": "76a7f1f08177340084b645859ab4f21e04c24b5e", "url": "https://github.com/apache/netbeans/commit/76a7f1f08177340084b645859ab4f21e04c24b5e", "message": "[NETBEANS-4415] Export dataview results to file\n\n * Support .csv, .tsv and .xlsx formats\n\nJira: https://issues.apache.org/jira/browse/NETBEANS-4415", "committedDate": "2020-07-13T21:21:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0OTM4Mg==", "url": "https://github.com/apache/netbeans/pull/2169#discussion_r458349382", "bodyText": "This splits at the first dot, not the last. Would it make sense to use a FileObject#getExt?", "author": "matthiasblaesing", "createdAt": "2020-07-21T19:52:58Z", "path": "ide/db.dataview/src/org/netbeans/modules/db/dataview/output/dataexport/DataExportUtils.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.db.dataview.output.dataexport;\n+\n+import java.sql.SQLException;\n+import javax.swing.JTable;\n+import org.netbeans.modules.db.dataview.util.FileBackedClob;\n+import org.openide.util.Exceptions;\n+\n+/**\n+ * Data export utility methods.\n+ *\n+ * @author Periklis Ntanasis <pntanasis@gmail.com>\n+ */\n+public class DataExportUtils {\n+\n+    /**\n+     * Returns the filename file type extension in lower case. The extension is\n+     * the part after the last dot character (.). Example: for filename\n+     * \"foo.java\" it will return \"java\".\n+     *\n+     * @param filename\n+     * @return The filename extension (part after the last .) in lower case.\n+     */\n+    public static String getExtension(String filename) {\n+        String[] tokens = filename.split(\"\\\\.\");", "originalCommit": "76a7f1f08177340084b645859ab4f21e04c24b5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA3NzYzNw==", "url": "https://github.com/apache/netbeans/pull/2169#discussion_r464077637", "bodyText": "I don't quite understand what do you mean by \"splits at the first dot, not the last\". Anyway, I like your suggestion. I will look into it.", "author": "MasterEx", "createdAt": "2020-08-02T13:16:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0OTM4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA3ODY2MA==", "url": "https://github.com/apache/netbeans/pull/2169#discussion_r464078660", "bodyText": "Sorry - read that wrong - I had the split(patttern, count) variant in mind. The code should work as is.", "author": "matthiasblaesing", "createdAt": "2020-08-02T13:28:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0OTM4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxNTkwOQ==", "url": "https://github.com/apache/netbeans/pull/2169#discussion_r467315909", "bodyText": "I have removed this method all together. I have rewritten the interfaces as abstract classes and have moved (and modified) the implementation there.", "author": "MasterEx", "createdAt": "2020-08-07T22:42:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0OTM4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM1MjIzMg==", "url": "https://github.com/apache/netbeans/pull/2169#discussion_r458352232", "bodyText": "This operates on the JTable and thus must be called from the EDT. I feel uncomfortable with that, as the EDT should not be blocked for long times. Could you please check if a copy / read-only version of the data is available without touching Swing or only shortly?", "author": "matthiasblaesing", "createdAt": "2020-07-21T19:58:10Z", "path": "ide/db.dataview/src/org/netbeans/modules/db/dataview/output/dataexport/DataExportUtils.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.db.dataview.output.dataexport;\n+\n+import java.sql.SQLException;\n+import javax.swing.JTable;\n+import org.netbeans.modules.db.dataview.util.FileBackedClob;\n+import org.openide.util.Exceptions;\n+\n+/**\n+ * Data export utility methods.\n+ *\n+ * @author Periklis Ntanasis <pntanasis@gmail.com>\n+ */\n+public class DataExportUtils {\n+\n+    /**\n+     * Returns the filename file type extension in lower case. The extension is\n+     * the part after the last dot character (.). Example: for filename\n+     * \"foo.java\" it will return \"java\".\n+     *\n+     * @param filename\n+     * @return The filename extension (part after the last .) in lower case.\n+     */\n+    public static String getExtension(String filename) {\n+        String[] tokens = filename.split(\"\\\\.\");\n+        return tokens[tokens.length - 1].toLowerCase();\n+    }\n+\n+    /**\n+     * Returns the column names of a JTable as an array of strings.\n+     *\n+     * @param table A JTable.\n+     * @return String[] populated with the column names.\n+     */\n+    public static String[] getColumnNames(JTable table) {\n+        String[] header = new String[table.getColumnCount()];\n+        for (int i = 0; i < table.getColumnCount(); i++) {\n+            header[i] = table.getColumnName(i);\n+        }\n+        return header;\n+    }\n+\n+    /**\n+     * Returns the contents of a JTable as a two dimensional Object array.\n+     *\n+     * @param table A JTable.\n+     * @return Object[][] populated with the table contents.\n+     */\n+    public static Object[][] getTableContents(JTable table) {\n+        Object[][] contents = new Object[table.getRowCount()][table.getColumnCount()];\n+        for (int i = 0; i < table.getRowCount(); i++) {\n+            for (int j = 0; j < table.getColumnCount(); j++) {\n+                if (table.getValueAt(i, j) instanceof FileBackedClob) {\n+                    FileBackedClob lob = (FileBackedClob) table.getValueAt(i, j);\n+                    try {\n+                        contents[i][j] = lob.getSubString(1, (int) lob.length());\n+                    } catch (SQLException ex) {\n+                        Exceptions.printStackTrace(ex);\n+                    }\n+                } else {\n+                    contents[i][j] = table.getValueAt(i, j);\n+                }\n+            }\n+        }\n+        return contents;", "originalCommit": "76a7f1f08177340084b645859ab4f21e04c24b5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA3ODkyNg==", "url": "https://github.com/apache/netbeans/pull/2169#discussion_r464078926", "bodyText": "OK, I am not sure how this could be improved at the moment but I will look into it and get back to you. I understand your concern. The reason I am actually copying the JTable contents is partially to mitigate the risk of blocking for too long the EDT or using the JTable accidentally outside of it and also to decouple the core export code from Swing.", "author": "MasterEx", "createdAt": "2020-08-02T13:30:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM1MjIzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyMDA2Mg==", "url": "https://github.com/apache/netbeans/pull/2169#discussion_r467320062", "bodyText": "I am still looking into it. Until now what I have found out is that when rows are selected to be copied, the rows are copied into clipboard in a similar way (see copyRowValues() in ResultSetJXTable).\nAlso, I was thinking that my original intention as described in https://issues.apache.org/jira/browse/NETBEANS-4415 was to \"export the results displayed in the table as a file\".\nBased on that, if we want to export the table as the user sees it (keep the order of the results etc.) then probably we have to read the data from the JTable.\nAnyway, as I have said I am still looking into it. If you have any suggestion it is very welcome.", "author": "MasterEx", "createdAt": "2020-08-07T22:59:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM1MjIzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2MjI1Ng==", "url": "https://github.com/apache/netbeans/pull/2169#discussion_r462562256", "bodyText": "My gut feeling is, that this is one of the cases where an abstract base class is a better fit for this case. But this is discussable.  If we ever get an SPI where modules can supply their own serializers, we need to rethink this anyway.", "author": "matthiasblaesing", "createdAt": "2020-07-29T20:16:53Z", "path": "ide/db.dataview/src/org/netbeans/modules/db/dataview/output/dataexport/CSVCommonsDataExporter.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.db.dataview.output.dataexport;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import org.apache.commons.csv.CSVFormat;\n+import org.apache.commons.csv.CSVPrinter;\n+import org.openide.util.Exceptions;\n+\n+/**\n+ *\n+ * Exports the given data to the target file in the provided CSV format.\n+ *\n+ * @author Periklis Ntanasis <pntanasis@gmail.com>\n+ */\n+public interface CSVCommonsDataExporter {\n+\n+    default void exportData(String[] headers, Object[][] contents, File file, CSVFormat format) {", "originalCommit": "76a7f1f08177340084b645859ab4f21e04c24b5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA4MDkyMQ==", "url": "https://github.com/apache/netbeans/pull/2169#discussion_r464080921", "bodyText": "As you may have seen I have implemented the concrete exporters (i.e. CSVDataExporter) as enums because I wanted them to be singletons and this is the way I usually do it. For this reason I haven't considered of using abstract classes because I couldn't extend the enums with them.\nIf you have a strong preference for this to be written as an abstract class I don't mind rewrite the code, just let me know.\nAnother alternative would be to implement CSVCommonsDataExporter as a concrete class (probably also singleton/enum) and just use it wherever this functionality is required. So, that way we would favor composition over inheritance and avoid having logic implemented into interfaces. I actually think that I prefer this over the current implementation. Please, let me know what you think.", "author": "MasterEx", "createdAt": "2020-08-02T13:52:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2MjI1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxNjk5OQ==", "url": "https://github.com/apache/netbeans/pull/2169#discussion_r467316999", "bodyText": "After some thought I have rewritten the interfaces as abstract classes. Some code duplication is avoided that way. Eventually I haven't implemented the exporters as singletons because actually it doesn't really matter if there are more than one instances at the same time and this results in simpler implementation. Please, let me know if you see any other improvement.", "author": "MasterEx", "createdAt": "2020-08-07T22:46:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2MjI1Ng=="}], "type": "inlineReview"}, {"oid": "3c70b59cdcd1e7467da2b69501d32b99d0fa9752", "url": "https://github.com/apache/netbeans/commit/3c70b59cdcd1e7467da2b69501d32b99d0fa9752", "message": "[NETBEANS-4415] Fixed license issues\n\n * Added notice.txt files where applicable\n * Added the optional Type header to the licenses of the compile time dependencies", "committedDate": "2020-08-07T22:38:23Z", "type": "commit"}, {"oid": "962ffd2083fef6a8cd69f3ada975f196ad5365eb", "url": "https://github.com/apache/netbeans/commit/962ffd2083fef6a8cd69f3ada975f196ad5365eb", "message": "[NETBEANS-4415] Use of abstract classes for common functionality\n\n * DataExporter and CSVCommonDataExporter became abstract classes\n instead of interfaces. Common functionality that was implemented\n in the concrete classes was implemented there.\n * Concrete classes are not longer Singletons.\n * Some functionality that was in DataExportUitls was moved (and\n   modified) in the DataExporter abstract class.", "committedDate": "2020-08-07T22:38:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIwNTM2NQ==", "url": "https://github.com/apache/netbeans/pull/2169#discussion_r475205365", "bodyText": "At this point I would store the value of fc.getCurrentDirectory() into a static variable currentDirectory and initialize the file chooser in line 51 via fc.setCurrentDirectory to that value. The same is true for the selected file format. I would expect both value to be pretty constant when invoked multiple times.", "author": "matthiasblaesing", "createdAt": "2020-08-23T11:04:19Z", "path": "ide/db.dataview/src/org/netbeans/modules/db/dataview/output/dataexport/DataViewTableDataExportFileChooser.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.db.dataview.output.dataexport;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.swing.JFileChooser;\n+import javax.swing.JOptionPane;\n+import javax.swing.JTable;\n+import javax.swing.filechooser.FileFilter;\n+import org.netbeans.api.progress.BaseProgressUtils;\n+import org.openide.util.NbBundle;\n+\n+/**\n+ *\n+ * @author Periklis Ntanasis <pntanasis@gmail.com>\n+ */\n+@NbBundle.Messages({\n+    \"LBL_FILE_CHOOSER=Export Table Data\",\n+    \"LBL_OVEWRITE_DIALOG=Confirm Data Export\",\n+    \"MSG_OVEWRITE_DIALOG=File already exists.\\nDo you want to overwrite it?\",\n+    \"MSG_EXPORT_DATA=Export Data...\"\n+})\n+public class DataViewTableDataExportFileChooser {\n+\n+    private static final List<DataExporter> EXPORTERS = Arrays.asList(\n+            new CSVDataExporter(),\n+            new TSVDataExporter(),\n+            new XLSXDataExporter()\n+    );\n+\n+    public static void extractAsFile(final JTable table) {\n+        final JFileChooser fc = new JFileChooser();\n+        fc.setAcceptAllFileFilterUsed(false);\n+        EXPORTERS.forEach(exporter -> fc.addChoosableFileFilter(exporter.getFileFilter()));\n+        int returnVal = fc.showDialog(null, Bundle.LBL_FILE_CHOOSER());\n+        switch (returnVal) {\n+            case JFileChooser.APPROVE_OPTION:\n+                FileFilter filter = fc.getFileFilter();", "originalCommit": "962ffd2083fef6a8cd69f3ada975f196ad5365eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM4ODcyMw==", "url": "https://github.com/apache/netbeans/pull/2169#discussion_r480388723", "bodyText": "@matthiasblaesing Once again thank you for your time and patience. Sure, I would be more than happy if this change would make it to upstream and I would be very interested to provide further improvements or fixes if required in the future.\nRegarding your comments, I have added the .pass files to the licenseinfo.xml.\nAlso, I have implemented the suggestion about storing and using the current directory and also explicitly setting the default file filter. To be honest if I understand correctly the default behavior should also be constant between invocations and always return the user's \"default\" directory. I guess that this could change in theory while the application is still running but it seems a bit extreme scenario. Anyway, I have made the change and any other suggestion is mote than welcome.\nRegarding a previous comment about accessing the JTable and potentially blocking the EDT I am afraid that I don't have any better suggestion without making significant changes to the existing code or this pull request. Some alternatives I can think are:\n\nStore the query result somewhere else and access it from there. This requires modifying the existing code that performs the query.\nChange approach and instead of exporting to a file whatever the JTable displays, execute the query again and export the outcome of the query. I personally like the behavior as introduced by this pull request better so I am against this approach.\n\nWhat do you think?\nIf I am missing something else please let me know and I will have a look with the first chance.", "author": "MasterEx", "createdAt": "2020-08-31T20:44:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIwNTM2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcyMzgyNw==", "url": "https://github.com/apache/netbeans/pull/2169#discussion_r491723827", "bodyText": "Regarding a previous comment about accessing the JTable and potentially blocking the EDT I am afraid that I don't have any better suggestion without making significant changes to the existing code or this pull request. Some alternatives I can think are:\n1. Store the query result somewhere else and access it from there. This requires modifying the existing code that performs the query.\n\n2. Change approach and instead of exporting to a file whatever the `JTable` displays, execute the query again and export the outcome of the query. I personally like the behavior as introduced by this pull request better so I am against this approach.\n\nWhat do you think?\n\nI had another look at db.dataview. I think your extraction code would be easier, if it would work directly on the DataViewTableUIModel. That class (or more precise its superclass) already has the necessary accessors: getData() and getColumnName. That prevents reinventing the wheel.\nExporting in this case means exporting the visible data - given that it is only logical to reuse the already queried data. We don't gain much from doing a requery. Storing the query result twice is IMHO a no-go as it will double the necessary heap and we are already suffering from OOMEs.", "author": "matthiasblaesing", "createdAt": "2020-09-20T19:13:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIwNTM2NQ=="}], "type": "inlineReview"}, {"oid": "629b733c94d0fda27cf96714a19fb383c9156f21", "url": "https://github.com/apache/netbeans/commit/629b733c94d0fda27cf96714a19fb383c9156f21", "message": "[NETBEANS-4415] Set default FileChooser directory and file filter\n\n Ensures similar behavior between consequent executions.", "committedDate": "2020-08-30T17:58:56Z", "type": "commit"}, {"oid": "f2b1287d9aa6b80331fd15fd411c471bfb394fe6", "url": "https://github.com/apache/netbeans/commit/f2b1287d9aa6b80331fd15fd411c471bfb394fe6", "message": "[NETBEANS-4415] Added test files to licenseinfo.xml", "committedDate": "2020-08-30T19:33:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcyNDE3OQ==", "url": "https://github.com/apache/netbeans/pull/2169#discussion_r491724179", "bodyText": "Also, I have implemented the suggestion about storing and using the current directory and also explicitly setting the default file filter. To be honest if I understand correctly the default behavior should also be constant between invocations and always return the user's \"default\" directory. I guess that this could change in theory while the application is still running but it seems a bit extreme scenario. Anyway, I have made the change and any other suggestion is mote than welcome.\n\nLines 98-100 are unnecessary:\nhttps://docs.oracle.com/javase/7/docs/api/javax/swing/JFileChooser.html#setCurrentDirectory(java.io.File)\nWhat I meant is, that you should modify extractAsFile and there the switch case for JFileChooser.APPROVE_OPTION. If the user uses that, query the the current directory and store that. The file chooser on the second call will start in the directory the user selected last.", "author": "matthiasblaesing", "createdAt": "2020-09-20T19:17:33Z", "path": "ide/db.dataview/src/org/netbeans/modules/db/dataview/output/dataexport/DataViewTableDataExportFileChooser.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.db.dataview.output.dataexport;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.swing.JFileChooser;\n+import javax.swing.JOptionPane;\n+import javax.swing.JTable;\n+import javax.swing.filechooser.FileFilter;\n+import org.netbeans.api.progress.BaseProgressUtils;\n+import org.openide.util.NbBundle;\n+\n+/**\n+ *\n+ * @author Periklis Ntanasis <pntanasis@gmail.com>\n+ */\n+@NbBundle.Messages({\n+    \"LBL_FILE_CHOOSER=Export Table Data\",\n+    \"LBL_OVEWRITE_DIALOG=Confirm Data Export\",\n+    \"MSG_OVEWRITE_DIALOG=File already exists.\\nDo you want to overwrite it?\",\n+    \"MSG_EXPORT_DATA=Export Data...\"\n+})\n+public class DataViewTableDataExportFileChooser {\n+\n+    private static final List<DataExporter> EXPORTERS = Arrays.asList(\n+            new CSVDataExporter(),\n+            new TSVDataExporter(),\n+            new XLSXDataExporter()\n+    );\n+    \n+    private static File defaultDirectory;\n+\n+    public static void extractAsFile(final JTable table) {\n+        final JFileChooser fc = initializeFileChooser();\n+        int returnVal = fc.showDialog(null, Bundle.LBL_FILE_CHOOSER());\n+        switch (returnVal) {\n+            case JFileChooser.APPROVE_OPTION:\n+                FileFilter filter = fc.getFileFilter();\n+                DataExporter selectedExporter = EXPORTERS.stream()\n+                        .filter(exporter -> exporter.getFileFilter() == filter)\n+                        .findAny().orElseThrow(() -> new AssertionError(\"No matching file exporter filter found.\"));\n+                final File file = checkFileExtension(fc.getSelectedFile(), selectedExporter);\n+                if (checkFile(file)) {\n+                    final String[] columnNames = DataExportUtils.getColumnNames(table);\n+                    final Object[][] content = DataExportUtils.getTableContents(table);\n+                    BaseProgressUtils.showProgressDialogAndRun(\n+                            () -> selectedExporter.exportData(\n+                                    columnNames,\n+                                    content,\n+                                    file),\n+                            Bundle.MSG_EXPORT_DATA());\n+                }\n+                break;\n+        }\n+    }\n+\n+    private static boolean checkFile(File file) {\n+        if (file.exists()) {\n+            int a = JOptionPane.showConfirmDialog(\n+                    null,\n+                    Bundle.LBL_OVEWRITE_DIALOG(),\n+                    Bundle.MSG_OVEWRITE_DIALOG(),\n+                    JOptionPane.YES_NO_OPTION);\n+            return a == JOptionPane.YES_OPTION;\n+        }\n+        return true;\n+    }\n+\n+    private static File checkFileExtension(File file, DataExporter exporter) {\n+        if (!exporter.handlesFileFormat(file)) {\n+            return new File(file.getAbsolutePath() + \".\" + exporter.getDefaultFileExtension());\n+        }\n+        return file;\n+    }\n+    \n+    private static JFileChooser initializeFileChooser() {\n+        final JFileChooser fc = new JFileChooser();\n+        fc.setAcceptAllFileFilterUsed(false);\n+        EXPORTERS.forEach(exporter -> fc.addChoosableFileFilter(exporter.getFileFilter()));\n+        if (defaultDirectory == null) {\n+            defaultDirectory = fc.getCurrentDirectory();\n+        }", "originalCommit": "f2b1287d9aa6b80331fd15fd411c471bfb394fe6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAyODgwMw==", "url": "https://github.com/apache/netbeans/pull/2169#discussion_r493028803", "bodyText": "What I meant is, that you should modify extractAsFile and there the switch case for JFileChooser.APPROVE_OPTION. If the user uses that, query the the current directory and store that. The file chooser on the second call will start in the directory the user selected last.\n\nI see, so the point is to always open the last used directory so the user won't have to navigate again there if he wants to save many files. OK, that makes sense.\nI will look all the above probably over the weekend and get back to you. Thanks for the feedback!", "author": "MasterEx", "createdAt": "2020-09-22T20:56:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcyNDE3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5NzIzMA==", "url": "https://github.com/apache/netbeans/pull/2169#discussion_r499297230", "bodyText": "Sorry for the late response, I was a bit busier than expected. I have made the relevant change about the file chooser's current directory.\nRegarding the DataViewTableUIModel suggestion I use now this instead of the JTable in DataViewTableDataExportFileChooser. However, I don't use it internally in the \"exporters\" (concrete DataExporter classes). I am not sure if this was exactly your recommendation but after some thought I think that this would lead to a more complex implementation for the following reasons:\n\nDuring the exporting of the file a progress dialog is presented and the \"exporting\" job happens to another thread than the EDT. However, the model's getColumnName() and getData() are intended to be used from within EDT.\nPassing a DataViewTableUIModel to the exporters would complicate the unit tests.\n\nFinally, I have made a few improvements regarding the handling of the Clob and Blob values.\nAs always your feedback is more than welcome.", "author": "MasterEx", "createdAt": "2020-10-04T22:51:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcyNDE3OQ=="}], "type": "inlineReview"}, {"oid": "ebb13ea9068d0205a795abcc942ac6484dcb4d3e", "url": "https://github.com/apache/netbeans/commit/ebb13ea9068d0205a795abcc942ac6484dcb4d3e", "message": "[NETBEANS-4415] FileChooser opens in previously used directory", "committedDate": "2020-10-03T13:30:54Z", "type": "commit"}, {"oid": "fae19c610ed5a9cb640992e88dfb7a1b18180f91", "url": "https://github.com/apache/netbeans/commit/fae19c610ed5a9cb640992e88dfb7a1b18180f91", "message": "[NETBEANS-4415] Use of DataViewTableUIModel instead of JTable\n\n * Better handling of Clob and Blob textual representations.\n * In XLSX truncate Clob values bigger than the max cell length.", "committedDate": "2020-10-04T22:44:43Z", "type": "commit"}]}