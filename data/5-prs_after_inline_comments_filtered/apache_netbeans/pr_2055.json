{"pr_number": 2055, "pr_title": "NETBEANS-3580] : Fixed Debug Expression Lambda ", "pr_createdAt": "2020-03-31T06:28:29Z", "pr_url": "https://github.com/apache/netbeans/pull/2055", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIxMzE0NA==", "url": "https://github.com/apache/netbeans/pull/2055#discussion_r411213144", "bodyText": "It's better to use Comparator.comparingLong", "author": "entlicher", "createdAt": "2020-04-20T09:02:23Z", "path": "java/debugger.jpda/src/org/netbeans/modules/debugger/jpda/breakpoints/LineBreakpointImpl.java", "diffHunk": "@@ -337,32 +343,35 @@ protected void classLoaded (List<ReferenceType> referenceTypes) {\n                     continue;\n                 }\n                 // Submit the breakpoint for the lowest location on the line only:\n-                Location location = locations.get(0);\n-                com.sun.jdi.Method m0 = location.method();\n-                for (int li = 1; li < locations.size(); li++) {\n-                    Location l = locations.get(li);\n-                    if (l.codeIndex() < location.codeIndex()) {\n-                        if (l.method().equals(m0)) {\n-                            // Assure that we're still in the same method\n-                            location = l;\n-                        }\n-                    }\n-                }\n+                /* If location contains multiple event breakpoint for the same line \n+                (e.g lambda expression along with any function calling \n+                map(n -> foo(\n+                        boo(n)))) \n+                then take the lowest location from each type of event*/\n+                Collection<Location> lowestLocationList = locations\n+                        .stream()\n+                        .collect(groupingBy(loc->loc.method().toString(),\n+                                LinkedHashMap::new,\n+                                collectingAndThen(minBy(Comparator.comparingDouble(Location::codeIndex)), ", "originalCommit": "4004978c79eb78532ea14d5923f4796a1e31a47b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMyMzM3MA==", "url": "https://github.com/apache/netbeans/pull/2055#discussion_r411323370", "bodyText": "comments addressed.", "author": "singh-akhilesh", "createdAt": "2020-04-20T12:06:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIxMzE0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUxMjI4OQ==", "url": "https://github.com/apache/netbeans/pull/2055#discussion_r416512289", "bodyText": "Please squash the commits before merging", "author": "arusinha", "createdAt": "2020-04-28T10:41:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIxMzE0NA=="}], "type": "inlineReview"}, {"oid": "61e57e8961e45d4ee49d1019677e839827745f07", "url": "https://github.com/apache/netbeans/commit/61e57e8961e45d4ee49d1019677e839827745f07", "message": "[NETBEANS-3580] : Fixed lambda debug breakpoint issue by processing all location event coming from vm", "committedDate": "2020-04-28T12:55:06Z", "type": "commit"}, {"oid": "61e57e8961e45d4ee49d1019677e839827745f07", "url": "https://github.com/apache/netbeans/commit/61e57e8961e45d4ee49d1019677e839827745f07", "message": "[NETBEANS-3580] : Fixed lambda debug breakpoint issue by processing all location event coming from vm", "committedDate": "2020-04-28T12:55:06Z", "type": "forcePushed"}]}