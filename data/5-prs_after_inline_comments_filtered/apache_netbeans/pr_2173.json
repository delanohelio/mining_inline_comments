{"pr_number": 2173, "pr_title": "[NETBEANS-2623] Added Composer actions to update autoloader and run script", "pr_createdAt": "2020-06-08T21:18:15Z", "pr_url": "https://github.com/apache/netbeans/pull/2173", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIxNDY0OA==", "url": "https://github.com/apache/netbeans/pull/2173#discussion_r437214648", "bodyText": "This means that the order of the scripts is undefined - is this expected? I would likely expect (a) order as it is in the file or maybe better (b) alphabetical sort.", "author": "tmysik", "createdAt": "2020-06-09T08:05:57Z", "path": "php/php.composer/src/org/netbeans/modules/php/composer/files/ComposerJson.java", "diffHunk": "@@ -75,6 +78,14 @@ public File getVendorDir() {\n         return new File(getFile().getParentFile(), vendorDir);\n     }\n \n+    public Set<String> getScripts() {\n+        Map<String, Object> scripts = composerJson.getContentValue(Map.class, FIELD_SCRIPTS);\n+        if (scripts == null) {\n+            return Collections.emptySet();\n+        }\n+        return scripts.keySet();", "originalCommit": "79fe7ba4dd54979e70ae2881d42556b6147bf2c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIxNTM0Ng==", "url": "https://github.com/apache/netbeans/pull/2173#discussion_r437215346", "bodyText": "Actually, not sure what Map implementation is used by the JSON parser so it could be linked hashMap. Could you pleae verify it? Thank you.", "author": "tmysik", "createdAt": "2020-06-09T08:07:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIxNDY0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIxNjUxNA==", "url": "https://github.com/apache/netbeans/pull/2173#discussion_r437216514", "bodyText": "Aha, now I see that the sorting is in the action itself.", "author": "tmysik", "createdAt": "2020-06-09T08:09:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIxNDY0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIxNTgxNg==", "url": "https://github.com/apache/netbeans/pull/2173#discussion_r437215816", "bodyText": "Missing @Nullable annotation.", "author": "tmysik", "createdAt": "2020-06-09T08:07:59Z", "path": "php/php.composer/src/org/netbeans/modules/php/composer/ui/actions/ComposerScriptsAction.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.php.composer.ui.actions;\n+\n+import java.awt.event.ActionEvent;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import javax.swing.AbstractAction;\n+import javax.swing.Action;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuItem;\n+import org.netbeans.api.project.Project;\n+import org.netbeans.modules.php.api.executable.InvalidPhpExecutableException;\n+import org.netbeans.modules.php.api.phpmodule.PhpModule;\n+import org.netbeans.modules.php.composer.commands.Composer;\n+import org.netbeans.modules.php.composer.files.ComposerJson;\n+import org.openide.awt.ActionID;\n+import org.openide.awt.ActionReference;\n+import org.openide.awt.ActionRegistration;\n+import org.openide.awt.Actions;\n+import org.openide.awt.DynamicMenuContent;\n+import org.openide.util.ContextAwareAction;\n+import org.openide.util.Lookup;\n+import org.openide.util.NbBundle;\n+import org.openide.util.actions.Presenter;\n+\n+@ActionID(id = \"org.netbeans.modules.php.composer.ui.actions.ComposerScriptsAction\", category = \"Project\")\n+@ActionRegistration(displayName = \"#ComposerScriptsAction.name\", lazy = false)\n+@ActionReference(path = \"Projects/org-netbeans-modules-php-project/Actions\", position = 1051)\n+@NbBundle.Messages(\"ComposerScriptsAction.name=Composer Scripts\")\n+public class ComposerScriptsAction extends AbstractAction implements ContextAwareAction, Presenter.Popup {\n+\n+    final Project project;", "originalCommit": "79fe7ba4dd54979e70ae2881d42556b6147bf2c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5MTk5Nw==", "url": "https://github.com/apache/netbeans/pull/2173#discussion_r437591997", "bodyText": "Added @NullAllowed annotation.\nI didn't find @Nullable annotation in NetBeans.", "author": "KacerCZ", "createdAt": "2020-06-09T17:16:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIxNTgxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3NjE1MA==", "url": "https://github.com/apache/netbeans/pull/2173#discussion_r437676150", "bodyText": "You are right, sorry :)", "author": "tmysik", "createdAt": "2020-06-09T19:45:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIxNTgxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIxNzMwMA==", "url": "https://github.com/apache/netbeans/pull/2173#discussion_r437217300", "bodyText": "Could this class be static?", "author": "tmysik", "createdAt": "2020-06-09T08:10:31Z", "path": "php/php.composer/src/org/netbeans/modules/php/composer/ui/actions/ComposerScriptsAction.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.php.composer.ui.actions;\n+\n+import java.awt.event.ActionEvent;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import javax.swing.AbstractAction;\n+import javax.swing.Action;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuItem;\n+import org.netbeans.api.project.Project;\n+import org.netbeans.modules.php.api.executable.InvalidPhpExecutableException;\n+import org.netbeans.modules.php.api.phpmodule.PhpModule;\n+import org.netbeans.modules.php.composer.commands.Composer;\n+import org.netbeans.modules.php.composer.files.ComposerJson;\n+import org.openide.awt.ActionID;\n+import org.openide.awt.ActionReference;\n+import org.openide.awt.ActionRegistration;\n+import org.openide.awt.Actions;\n+import org.openide.awt.DynamicMenuContent;\n+import org.openide.util.ContextAwareAction;\n+import org.openide.util.Lookup;\n+import org.openide.util.NbBundle;\n+import org.openide.util.actions.Presenter;\n+\n+@ActionID(id = \"org.netbeans.modules.php.composer.ui.actions.ComposerScriptsAction\", category = \"Project\")\n+@ActionRegistration(displayName = \"#ComposerScriptsAction.name\", lazy = false)\n+@ActionReference(path = \"Projects/org-netbeans-modules-php-project/Actions\", position = 1051)\n+@NbBundle.Messages(\"ComposerScriptsAction.name=Composer Scripts\")\n+public class ComposerScriptsAction extends AbstractAction implements ContextAwareAction, Presenter.Popup {\n+\n+    final Project project;\n+    final List<String> scripts = new CopyOnWriteArrayList<>();\n+\n+    public ComposerScriptsAction() {\n+        this(null, null);\n+    }\n+\n+    public ComposerScriptsAction(Project project, Collection<String> scripts) {\n+        this.project = project;\n+        if (scripts != null) {\n+            this.scripts.addAll(scripts);\n+        }\n+        setEnabled(project != null);\n+        putValue(DynamicMenuContent.HIDE_WHEN_DISABLED, true);\n+        // hide this action from Tools > Keymap\n+        putValue(Action.NAME, \"\"); // NOI18N\n+    }\n+\n+    @Override\n+    public void actionPerformed(ActionEvent e) {\n+        assert false;\n+    }\n+\n+    @Override\n+    public Action createContextAwareInstance(Lookup context) {\n+        Project contextProject = context.lookup(Project.class);\n+        if (contextProject == null) {\n+            return this;\n+        }\n+        PhpModule phpModule = PhpModule.Factory.lookupPhpModule(context);\n+        ComposerJson composerJson = new ComposerJson(phpModule.getProjectDirectory());\n+        if (composerJson == null) {\n+            return this;\n+        }\n+        Set<String> allScripts = composerJson.getScripts();\n+        if (allScripts.isEmpty()) {\n+            return this;\n+        }\n+        List<String> scripts = new ArrayList<>(allScripts);\n+        Collections.sort(scripts);\n+        return new ComposerScriptsAction(contextProject, scripts);\n+    }\n+\n+    @Override\n+    public JMenuItem getPopupPresenter() {\n+        if (project == null) {\n+            return new Actions.MenuItem(this, false);\n+        }\n+        return createScriptsMenu();\n+    }\n+\n+    private JMenuItem createScriptsMenu() {\n+        assert project != null;\n+        assert !scripts.isEmpty();\n+        JMenu menu = new JMenu(Bundle.ComposerScriptsAction_name());\n+        for (final String command : scripts) {\n+            RunScriptAction scriptAction = new RunScriptAction(command);\n+            menu.add(scriptAction);\n+        }\n+        return menu;\n+    }\n+\n+    //~ Inner classes\n+    private class RunScriptAction extends BaseComposerAction {", "originalCommit": "79fe7ba4dd54979e70ae2881d42556b6147bf2c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5MjQ0Ng==", "url": "https://github.com/apache/netbeans/pull/2173#discussion_r437592446", "bodyText": "Changed class to static.", "author": "KacerCZ", "createdAt": "2020-06-09T17:17:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIxNzMwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIxNzUyOQ==", "url": "https://github.com/apache/netbeans/pull/2173#discussion_r437217529", "bodyText": "Could be final I think.", "author": "tmysik", "createdAt": "2020-06-09T08:10:52Z", "path": "php/php.composer/src/org/netbeans/modules/php/composer/ui/actions/ComposerScriptsAction.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.php.composer.ui.actions;\n+\n+import java.awt.event.ActionEvent;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import javax.swing.AbstractAction;\n+import javax.swing.Action;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuItem;\n+import org.netbeans.api.project.Project;\n+import org.netbeans.modules.php.api.executable.InvalidPhpExecutableException;\n+import org.netbeans.modules.php.api.phpmodule.PhpModule;\n+import org.netbeans.modules.php.composer.commands.Composer;\n+import org.netbeans.modules.php.composer.files.ComposerJson;\n+import org.openide.awt.ActionID;\n+import org.openide.awt.ActionReference;\n+import org.openide.awt.ActionRegistration;\n+import org.openide.awt.Actions;\n+import org.openide.awt.DynamicMenuContent;\n+import org.openide.util.ContextAwareAction;\n+import org.openide.util.Lookup;\n+import org.openide.util.NbBundle;\n+import org.openide.util.actions.Presenter;\n+\n+@ActionID(id = \"org.netbeans.modules.php.composer.ui.actions.ComposerScriptsAction\", category = \"Project\")\n+@ActionRegistration(displayName = \"#ComposerScriptsAction.name\", lazy = false)\n+@ActionReference(path = \"Projects/org-netbeans-modules-php-project/Actions\", position = 1051)\n+@NbBundle.Messages(\"ComposerScriptsAction.name=Composer Scripts\")\n+public class ComposerScriptsAction extends AbstractAction implements ContextAwareAction, Presenter.Popup {\n+\n+    final Project project;\n+    final List<String> scripts = new CopyOnWriteArrayList<>();\n+\n+    public ComposerScriptsAction() {\n+        this(null, null);\n+    }\n+\n+    public ComposerScriptsAction(Project project, Collection<String> scripts) {\n+        this.project = project;\n+        if (scripts != null) {\n+            this.scripts.addAll(scripts);\n+        }\n+        setEnabled(project != null);\n+        putValue(DynamicMenuContent.HIDE_WHEN_DISABLED, true);\n+        // hide this action from Tools > Keymap\n+        putValue(Action.NAME, \"\"); // NOI18N\n+    }\n+\n+    @Override\n+    public void actionPerformed(ActionEvent e) {\n+        assert false;\n+    }\n+\n+    @Override\n+    public Action createContextAwareInstance(Lookup context) {\n+        Project contextProject = context.lookup(Project.class);\n+        if (contextProject == null) {\n+            return this;\n+        }\n+        PhpModule phpModule = PhpModule.Factory.lookupPhpModule(context);\n+        ComposerJson composerJson = new ComposerJson(phpModule.getProjectDirectory());\n+        if (composerJson == null) {\n+            return this;\n+        }\n+        Set<String> allScripts = composerJson.getScripts();\n+        if (allScripts.isEmpty()) {\n+            return this;\n+        }\n+        List<String> scripts = new ArrayList<>(allScripts);\n+        Collections.sort(scripts);\n+        return new ComposerScriptsAction(contextProject, scripts);\n+    }\n+\n+    @Override\n+    public JMenuItem getPopupPresenter() {\n+        if (project == null) {\n+            return new Actions.MenuItem(this, false);\n+        }\n+        return createScriptsMenu();\n+    }\n+\n+    private JMenuItem createScriptsMenu() {\n+        assert project != null;\n+        assert !scripts.isEmpty();\n+        JMenu menu = new JMenu(Bundle.ComposerScriptsAction_name());\n+        for (final String command : scripts) {\n+            RunScriptAction scriptAction = new RunScriptAction(command);\n+            menu.add(scriptAction);\n+        }\n+        return menu;\n+    }\n+\n+    //~ Inner classes\n+    private class RunScriptAction extends BaseComposerAction {\n+\n+        private String script;", "originalCommit": "79fe7ba4dd54979e70ae2881d42556b6147bf2c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzczNTU5OQ==", "url": "https://github.com/apache/netbeans/pull/2173#discussion_r437735599", "bodyText": "Yes, changed.", "author": "KacerCZ", "createdAt": "2020-06-09T21:33:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIxNzUyOQ=="}], "type": "inlineReview"}, {"oid": "b67dd5c0faa740734128104dc5aca7283093830e", "url": "https://github.com/apache/netbeans/commit/b67dd5c0faa740734128104dc5aca7283093830e", "message": "[NETBEANS-2623] Added Composer actions to update autoloader and run script", "committedDate": "2020-06-09T17:11:30Z", "type": "forcePushed"}, {"oid": "7f5f787cb2e3740619d4f3424fa818e17bfbdfd8", "url": "https://github.com/apache/netbeans/commit/7f5f787cb2e3740619d4f3424fa818e17bfbdfd8", "message": "[NETBEANS-2623] Added Composer actions to update autoloader and run script", "committedDate": "2020-06-09T21:32:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5MjY4NQ==", "url": "https://github.com/apache/netbeans/pull/2173#discussion_r439692685", "bodyText": "could add serialVersionUID", "author": "junichi11", "createdAt": "2020-06-13T00:50:22Z", "path": "php/php.composer/src/org/netbeans/modules/php/composer/ui/actions/ComposerScriptsAction.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.php.composer.ui.actions;\n+\n+import java.awt.event.ActionEvent;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import javax.swing.AbstractAction;\n+import javax.swing.Action;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuItem;\n+import org.netbeans.api.annotations.common.NullAllowed;\n+import org.netbeans.api.project.Project;\n+import org.netbeans.modules.php.api.executable.InvalidPhpExecutableException;\n+import org.netbeans.modules.php.api.phpmodule.PhpModule;\n+import org.netbeans.modules.php.composer.commands.Composer;\n+import org.netbeans.modules.php.composer.files.ComposerJson;\n+import org.openide.awt.ActionID;\n+import org.openide.awt.ActionReference;\n+import org.openide.awt.ActionRegistration;\n+import org.openide.awt.Actions;\n+import org.openide.awt.DynamicMenuContent;\n+import org.openide.util.ContextAwareAction;\n+import org.openide.util.Lookup;\n+import org.openide.util.NbBundle;\n+import org.openide.util.actions.Presenter;\n+\n+@ActionID(id = \"org.netbeans.modules.php.composer.ui.actions.ComposerScriptsAction\", category = \"Project\")\n+@ActionRegistration(displayName = \"#ComposerScriptsAction.name\", lazy = false)\n+@ActionReference(path = \"Projects/org-netbeans-modules-php-project/Actions\", position = 1051)\n+@NbBundle.Messages(\"ComposerScriptsAction.name=Composer Scripts\")\n+public class ComposerScriptsAction extends AbstractAction implements ContextAwareAction, Presenter.Popup {\n+", "originalCommit": "7f5f787cb2e3740619d4f3424fa818e17bfbdfd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcwODU3Nw==", "url": "https://github.com/apache/netbeans/pull/2173#discussion_r439708577", "bodyText": "Added. I used serialver tool.", "author": "KacerCZ", "createdAt": "2020-06-13T04:41:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5MjY4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5MzE5NA==", "url": "https://github.com/apache/netbeans/pull/2173#discussion_r439693194", "bodyText": "Should check whether phpModule is null.\ncomposerJson  is never null.", "author": "junichi11", "createdAt": "2020-06-13T00:54:53Z", "path": "php/php.composer/src/org/netbeans/modules/php/composer/ui/actions/ComposerScriptsAction.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.php.composer.ui.actions;\n+\n+import java.awt.event.ActionEvent;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import javax.swing.AbstractAction;\n+import javax.swing.Action;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuItem;\n+import org.netbeans.api.annotations.common.NullAllowed;\n+import org.netbeans.api.project.Project;\n+import org.netbeans.modules.php.api.executable.InvalidPhpExecutableException;\n+import org.netbeans.modules.php.api.phpmodule.PhpModule;\n+import org.netbeans.modules.php.composer.commands.Composer;\n+import org.netbeans.modules.php.composer.files.ComposerJson;\n+import org.openide.awt.ActionID;\n+import org.openide.awt.ActionReference;\n+import org.openide.awt.ActionRegistration;\n+import org.openide.awt.Actions;\n+import org.openide.awt.DynamicMenuContent;\n+import org.openide.util.ContextAwareAction;\n+import org.openide.util.Lookup;\n+import org.openide.util.NbBundle;\n+import org.openide.util.actions.Presenter;\n+\n+@ActionID(id = \"org.netbeans.modules.php.composer.ui.actions.ComposerScriptsAction\", category = \"Project\")\n+@ActionRegistration(displayName = \"#ComposerScriptsAction.name\", lazy = false)\n+@ActionReference(path = \"Projects/org-netbeans-modules-php-project/Actions\", position = 1051)\n+@NbBundle.Messages(\"ComposerScriptsAction.name=Composer Scripts\")\n+public class ComposerScriptsAction extends AbstractAction implements ContextAwareAction, Presenter.Popup {\n+\n+    @NullAllowed\n+    final Project project;\n+    final List<String> scripts = new CopyOnWriteArrayList<>();\n+\n+    public ComposerScriptsAction() {\n+        this(null, null);\n+    }\n+\n+    public ComposerScriptsAction(Project project, Collection<String> scripts) {\n+        this.project = project;\n+        if (scripts != null) {\n+            this.scripts.addAll(scripts);\n+        }\n+        setEnabled(project != null);\n+        putValue(DynamicMenuContent.HIDE_WHEN_DISABLED, true);\n+        // hide this action from Tools > Keymap\n+        putValue(Action.NAME, \"\"); // NOI18N\n+    }\n+\n+    @Override\n+    public void actionPerformed(ActionEvent e) {\n+        assert false;\n+    }\n+\n+    @Override\n+    public Action createContextAwareInstance(Lookup context) {\n+        Project contextProject = context.lookup(Project.class);\n+        if (contextProject == null) {\n+            return this;\n+        }\n+        PhpModule phpModule = PhpModule.Factory.lookupPhpModule(context);\n+        ComposerJson composerJson = new ComposerJson(phpModule.getProjectDirectory());\n+        if (composerJson == null) {\n+            return this;\n+        }", "originalCommit": "7f5f787cb2e3740619d4f3424fa818e17bfbdfd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcwODYwMA==", "url": "https://github.com/apache/netbeans/pull/2173#discussion_r439708600", "bodyText": "Fixed.", "author": "KacerCZ", "createdAt": "2020-06-13T04:42:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5MzE5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5MzQ0OA==", "url": "https://github.com/apache/netbeans/pull/2173#discussion_r439693448", "bodyText": "Should use another variable name instead of scripts because this class has the same field name.", "author": "junichi11", "createdAt": "2020-06-13T00:57:07Z", "path": "php/php.composer/src/org/netbeans/modules/php/composer/ui/actions/ComposerScriptsAction.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.php.composer.ui.actions;\n+\n+import java.awt.event.ActionEvent;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import javax.swing.AbstractAction;\n+import javax.swing.Action;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuItem;\n+import org.netbeans.api.annotations.common.NullAllowed;\n+import org.netbeans.api.project.Project;\n+import org.netbeans.modules.php.api.executable.InvalidPhpExecutableException;\n+import org.netbeans.modules.php.api.phpmodule.PhpModule;\n+import org.netbeans.modules.php.composer.commands.Composer;\n+import org.netbeans.modules.php.composer.files.ComposerJson;\n+import org.openide.awt.ActionID;\n+import org.openide.awt.ActionReference;\n+import org.openide.awt.ActionRegistration;\n+import org.openide.awt.Actions;\n+import org.openide.awt.DynamicMenuContent;\n+import org.openide.util.ContextAwareAction;\n+import org.openide.util.Lookup;\n+import org.openide.util.NbBundle;\n+import org.openide.util.actions.Presenter;\n+\n+@ActionID(id = \"org.netbeans.modules.php.composer.ui.actions.ComposerScriptsAction\", category = \"Project\")\n+@ActionRegistration(displayName = \"#ComposerScriptsAction.name\", lazy = false)\n+@ActionReference(path = \"Projects/org-netbeans-modules-php-project/Actions\", position = 1051)\n+@NbBundle.Messages(\"ComposerScriptsAction.name=Composer Scripts\")\n+public class ComposerScriptsAction extends AbstractAction implements ContextAwareAction, Presenter.Popup {\n+\n+    @NullAllowed\n+    final Project project;\n+    final List<String> scripts = new CopyOnWriteArrayList<>();\n+\n+    public ComposerScriptsAction() {\n+        this(null, null);\n+    }\n+\n+    public ComposerScriptsAction(Project project, Collection<String> scripts) {\n+        this.project = project;\n+        if (scripts != null) {\n+            this.scripts.addAll(scripts);\n+        }\n+        setEnabled(project != null);\n+        putValue(DynamicMenuContent.HIDE_WHEN_DISABLED, true);\n+        // hide this action from Tools > Keymap\n+        putValue(Action.NAME, \"\"); // NOI18N\n+    }\n+\n+    @Override\n+    public void actionPerformed(ActionEvent e) {\n+        assert false;\n+    }\n+\n+    @Override\n+    public Action createContextAwareInstance(Lookup context) {\n+        Project contextProject = context.lookup(Project.class);\n+        if (contextProject == null) {\n+            return this;\n+        }\n+        PhpModule phpModule = PhpModule.Factory.lookupPhpModule(context);\n+        ComposerJson composerJson = new ComposerJson(phpModule.getProjectDirectory());\n+        if (composerJson == null) {\n+            return this;\n+        }\n+        Set<String> allScripts = composerJson.getScripts();\n+        if (allScripts.isEmpty()) {\n+            return this;\n+        }\n+        List<String> scripts = new ArrayList<>(allScripts);", "originalCommit": "7f5f787cb2e3740619d4f3424fa818e17bfbdfd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcwODYyNg==", "url": "https://github.com/apache/netbeans/pull/2173#discussion_r439708626", "bodyText": "I renamed variable to orderedScripts.", "author": "KacerCZ", "createdAt": "2020-06-13T04:42:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5MzQ0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NDAyMw==", "url": "https://github.com/apache/netbeans/pull/2173#discussion_r439694023", "bodyText": "Should regenerate serialVersionUID.", "author": "junichi11", "createdAt": "2020-06-13T01:02:02Z", "path": "php/php.composer/src/org/netbeans/modules/php/composer/ui/actions/UpdateAutoloaderDevAction.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.php.composer.ui.actions;\n+\n+import org.netbeans.modules.php.api.executable.InvalidPhpExecutableException;\n+import org.netbeans.modules.php.api.phpmodule.PhpModule;\n+import org.netbeans.modules.php.composer.commands.Composer;\n+import org.openide.util.NbBundle;\n+\n+public class UpdateAutoloaderDevAction extends BaseComposerAction {\n+\n+    private static final long serialVersionUID = 8974514465465464L;", "originalCommit": "7f5f787cb2e3740619d4f3424fa818e17bfbdfd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcwODY3MQ==", "url": "https://github.com/apache/netbeans/pull/2173#discussion_r439708671", "bodyText": "Updated using serialver. Hopefully it's OK.", "author": "KacerCZ", "createdAt": "2020-06-13T04:43:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NDAyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NDA0OA==", "url": "https://github.com/apache/netbeans/pull/2173#discussion_r439694048", "bodyText": "Should regenerate serialVersionUID.", "author": "junichi11", "createdAt": "2020-06-13T01:02:20Z", "path": "php/php.composer/src/org/netbeans/modules/php/composer/ui/actions/UpdateAutoloaderNoDevAction.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.php.composer.ui.actions;\n+\n+import org.netbeans.modules.php.api.executable.InvalidPhpExecutableException;\n+import org.netbeans.modules.php.api.phpmodule.PhpModule;\n+import org.netbeans.modules.php.composer.commands.Composer;\n+import org.openide.util.NbBundle;\n+\n+public class UpdateAutoloaderNoDevAction extends BaseComposerAction {\n+\n+    private static final long serialVersionUID = 8974514465465464L;", "originalCommit": "7f5f787cb2e3740619d4f3424fa818e17bfbdfd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcwODY5MQ==", "url": "https://github.com/apache/netbeans/pull/2173#discussion_r439708691", "bodyText": "Updated using serialver.", "author": "KacerCZ", "createdAt": "2020-06-13T04:43:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NDA0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NjkwNw==", "url": "https://github.com/apache/netbeans/pull/2173#discussion_r439696907", "bodyText": "Please use the diamond operator.", "author": "junichi11", "createdAt": "2020-06-13T01:31:58Z", "path": "php/php.composer/test/unit/src/org/netbeans/modules/php/composer/files/ComposerJsonTest.java", "diffHunk": "@@ -75,4 +77,23 @@ public void testDefaultVendorDir() {\n         assertEquals(new File(getDataDir(), ComposerJson.DEFAULT_VENDOR_DIR), composerJson.getVendorDir());\n     }\n \n+    public void testScripts() {\n+        ComposerJson composerJson = new ComposerJson(FileUtil.toFileObject(getDataDir()), \"composer-scripts.json\");\n+        assertTrue(composerJson.getFile().getAbsolutePath(), composerJson.exists());\n+        Set<String> scripts = composerJson.getScripts();\n+        assertEquals(3, scripts.size());\n+        Set<String> expectedScripts = new TreeSet<String>();", "originalCommit": "7f5f787cb2e3740619d4f3424fa818e17bfbdfd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcwODcwOA==", "url": "https://github.com/apache/netbeans/pull/2173#discussion_r439708708", "bodyText": "Fixed.", "author": "KacerCZ", "createdAt": "2020-06-13T04:44:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NjkwNw=="}], "type": "inlineReview"}, {"oid": "df7fe828a24c304378517e3fe2154573b8cdc8fa", "url": "https://github.com/apache/netbeans/commit/df7fe828a24c304378517e3fe2154573b8cdc8fa", "message": "[NETBEANS-2623] Added Composer actions to update autoloader and run script", "committedDate": "2020-06-13T04:40:28Z", "type": "commit"}, {"oid": "df7fe828a24c304378517e3fe2154573b8cdc8fa", "url": "https://github.com/apache/netbeans/commit/df7fe828a24c304378517e3fe2154573b8cdc8fa", "message": "[NETBEANS-2623] Added Composer actions to update autoloader and run script", "committedDate": "2020-06-13T04:40:28Z", "type": "forcePushed"}]}