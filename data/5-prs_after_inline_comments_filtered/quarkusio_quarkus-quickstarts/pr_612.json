{"pr_number": 612, "pr_title": "Use Mutiny event-based API in the Hibernate Reactive quickstart", "pr_createdAt": "2020-07-02T17:27:34Z", "pr_url": "https://github.com/quarkusio/quarkus-quickstarts/pull/612", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI2MDY1Nw==", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/612#discussion_r449260657", "bodyText": "Could the \"get\" method return Uni<List<Fruit>> rather than needing the toArray conversion?", "author": "Sanne", "createdAt": "2020-07-02T20:52:57Z", "path": "hibernate-reactive-quickstart/src/main/java/org/acme/hibernate/reactive/FruitMutinyResource.java", "diffHunk": "@@ -25,65 +25,67 @@\n public class FruitMutinyResource {\n \n     @Inject\n-    Uni<Mutiny.Session> mutinySession;\n+    Mutiny.Session mutinySession;\n \n     @GET\n     public Uni<Fruit[]> get() {\n-        return mutinySession.flatMap( session -> session.createNamedQuery( \"Fruits.findAll\", Fruit.class ).getResultList() )\n-                .map( fruits -> fruits.toArray( new Fruit[fruits.size()] ) );\n+        return mutinySession\n+                .createNamedQuery( \"Fruits.findAll\", Fruit.class ).getResultList()\n+                .onItem().apply( fruits -> fruits.toArray( new Fruit[fruits.size()] ) );", "originalCommit": "43cd1781f8c1cbe4f6d67f8f86119c7452dad02f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM5NTI3Mw==", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/612#discussion_r449395273", "bodyText": "I think I tried and didn't work, I'll have a second look.", "author": "DavideD", "createdAt": "2020-07-03T06:17:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI2MDY1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2MjUwOA==", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/612#discussion_r449462508", "bodyText": "Yep, it works with List. Nice.\nI think we should update the ORM test as well: https://github.com/quarkusio/quarkus-quickstarts/blob/development/hibernate-orm-quickstart/src/main/java/org/acme/hibernate/orm/FruitResource.java#L37", "author": "DavideD", "createdAt": "2020-07-03T08:51:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI2MDY1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI2MDgxNg==", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/612#discussion_r449260816", "bodyText": "great, much better!", "author": "Sanne", "createdAt": "2020-07-02T20:53:21Z", "path": "hibernate-reactive-quickstart/src/main/java/org/acme/hibernate/reactive/FruitMutinyResource.java", "diffHunk": "@@ -25,65 +25,67 @@\n public class FruitMutinyResource {\n \n     @Inject\n-    Uni<Mutiny.Session> mutinySession;\n+    Mutiny.Session mutinySession;\n \n     @GET\n     public Uni<Fruit[]> get() {\n-        return mutinySession.flatMap( session -> session.createNamedQuery( \"Fruits.findAll\", Fruit.class ).getResultList() )\n-                .map( fruits -> fruits.toArray( new Fruit[fruits.size()] ) );\n+        return mutinySession\n+                .createNamedQuery( \"Fruits.findAll\", Fruit.class ).getResultList()\n+                .onItem().apply( fruits -> fruits.toArray( new Fruit[fruits.size()] ) );\n     }\n \n     @GET\n     @Path(\"{id}\")\n     public Uni<Fruit> getSingle(@PathParam Integer id) {\n-        return mutinySession\n-                .flatMap( session -> session.find( Fruit.class, id ) );\n+        return mutinySession.find( Fruit.class, id );", "originalCommit": "43cd1781f8c1cbe4f6d67f8f86119c7452dad02f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI2MTg1MQ==", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/612#discussion_r449261851", "bodyText": "I have to admit that even with help from indentation, it's not clear to me to which element of the chain the \"ifNull\" applies here..", "author": "Sanne", "createdAt": "2020-07-02T20:55:59Z", "path": "hibernate-reactive-quickstart/src/main/java/org/acme/hibernate/reactive/FruitMutinyResource.java", "diffHunk": "@@ -25,65 +25,67 @@\n public class FruitMutinyResource {\n \n     @Inject\n-    Uni<Mutiny.Session> mutinySession;\n+    Mutiny.Session mutinySession;\n \n     @GET\n     public Uni<Fruit[]> get() {\n-        return mutinySession.flatMap( session -> session.createNamedQuery( \"Fruits.findAll\", Fruit.class ).getResultList() )\n-                .map( fruits -> fruits.toArray( new Fruit[fruits.size()] ) );\n+        return mutinySession\n+                .createNamedQuery( \"Fruits.findAll\", Fruit.class ).getResultList()\n+                .onItem().apply( fruits -> fruits.toArray( new Fruit[fruits.size()] ) );\n     }\n \n     @GET\n     @Path(\"{id}\")\n     public Uni<Fruit> getSingle(@PathParam Integer id) {\n-        return mutinySession\n-                .flatMap( session -> session.find( Fruit.class, id ) );\n+        return mutinySession.find( Fruit.class, id );\n     }\n \n     @POST\n     public Uni<Response> create(Fruit fruit) {\n         if (fruit.getId() != null) {\n             throw new WebApplicationException(\"Id was invalidly set on request.\", 422);\n         }\n+\n         return mutinySession\n-                .flatMap( session -> session.persist( fruit ) )\n-                .flatMap( session -> session.flush() )\n-                .map( ignore -> Response.ok( fruit ).status( 201 ).build() );\n+                .persist( fruit )\n+                .onItem().produceUni( session -> mutinySession.flush() )\n+                .onItem().apply( ignore -> Response.ok( fruit ).status( 201 ).build() );\n     }\n \n     @PUT\n     @Path(\"{id}\")\n-    public Uni<Fruit>  update(@PathParam Integer id, Fruit fruit) {\n+    public Uni<Response> update(@PathParam Integer id, Fruit fruit) {\n         if (fruit.getName() == null) {\n             throw new WebApplicationException(\"Fruit Name was not set on request.\", 422);\n         }\n \n         return mutinySession\n-                .flatMap( session -> session.find( Fruit.class, id )\n-                        .flatMap( entity -> {\n-                            if (entity == null) {\n-                                throw new WebApplicationException(\"Fruit with id of \" + id + \" does not exist.\", 404);\n-                            }\n-                            entity.setName( fruit.getName() );\n-                            return session.flush()\n-                                    .map( ignore -> entity );\n-                        } )\n-                );\n+                .find( Fruit.class, id )\n+                // Found\n+                .onItem().ifNotNull()\n+                    .produceUni( entity -> {\n+                        entity.setName( fruit.getName() );\n+                        return mutinySession.flush()\n+                                .onItem().apply( ignore -> Response.ok( entity ).build() );\n+                    } )\n+                // Not found\n+                .onItem().ifNull()", "originalCommit": "43cd1781f8c1cbe4f6d67f8f86119c7452dad02f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM5NjE1MQ==", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/612#discussion_r449396151", "bodyText": "What do you think it apply to?", "author": "DavideD", "createdAt": "2020-07-03T06:20:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI2MTg1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQwMDkyNQ==", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/612#discussion_r449400925", "bodyText": "What do you think it apply to?\n\nI just realized that I might sound more confrontational than I intended. I'm just trying to understand what you find confusing so that I can think of a better approach", "author": "DavideD", "createdAt": "2020-07-03T06:35:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI2MTg1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQxNTk5NA==", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/612#discussion_r449415994", "bodyText": "Mine was  just a thought about the ifNull API, I'm not sure if there is any thing you can do about it.\nIn particular, it loolks the \"if null\" check could apply on the last produced item: the Response object", "author": "Sanne", "createdAt": "2020-07-03T07:14:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI2MTg1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQyNTQxMw==", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/612#discussion_r449425413", "bodyText": "Do you think something like this is less confusing?\n    // Update the entity\n    Function<Fruit, Uni<Response>> update = entity -> {\n        entity.setName(fruit.getName());\n        return mutinySession.flush()\n                .onItem().apply(ignore -> Response.ok( entity ).build());\n    };\n\n    return mutinySession\n            .find( Fruit.class, id )\n                  // If entity exists then\n                .onItem().ifNotNull()\n                    .produceUni(update)\n                // else\n                .onItem().ifNull()\n                    .continueWith(Response.ok().status( 404 ).build());", "author": "DavideD", "createdAt": "2020-07-03T07:36:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI2MTg1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQyOTUyMQ==", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/612#discussion_r449429521", "bodyText": "I guess it's not correct though, this works because update never returns null so the comment is a bit misleading", "author": "DavideD", "createdAt": "2020-07-03T07:45:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI2MTg1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQzODI0MQ==", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/612#discussion_r449438241", "bodyText": "I checked the documentation and this is the way it is supposed to be used so I think we are good: https://smallrye.io/smallrye-mutiny/#_how_do_i_handle_null\nI will extract the function because I think it makes the code more readable.", "author": "DavideD", "createdAt": "2020-07-03T08:02:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI2MTg1MQ=="}], "type": "inlineReview"}, {"oid": "e47d85d6ecae754019ebe279ed8c636393be3f42", "url": "https://github.com/quarkusio/quarkus-quickstarts/commit/e47d85d6ecae754019ebe279ed8c636393be3f42", "message": "Use Mutiny event-based API in the Hibernate Reactive quickstart\n\n  * Inject the Session directly, unwrap from Uni\n  * Additional tests for update and not found entities", "committedDate": "2020-07-03T08:16:45Z", "type": "forcePushed"}, {"oid": "ce83683dc8e78bdc5ea4c7b3258728926d7451c8", "url": "https://github.com/quarkusio/quarkus-quickstarts/commit/ce83683dc8e78bdc5ea4c7b3258728926d7451c8", "message": "Use Mutiny event-based API in the Hibernate Reactive quickstart\n\n  * Inject the Session directly, unwrap from Uni\n  * Additional tests for update and not found entities", "committedDate": "2020-07-03T08:50:43Z", "type": "forcePushed"}, {"oid": "a2b2c727075f96cd63b5a22e16466244359785a0", "url": "https://github.com/quarkusio/quarkus-quickstarts/commit/a2b2c727075f96cd63b5a22e16466244359785a0", "message": "Use Mutiny event-based API in the Hibernate Reactive quickstart\n\n  * Inject the Session directly, unwrap from Uni\n  * Additional tests for update and not found entities\n  * Return Uni<List<Fruit>> instead of Uni<Fruit[]>\n  * Add example on how to map exceptions in the HTTP response", "committedDate": "2020-07-03T09:01:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1NTUzNQ==", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/612#discussion_r452155535", "bodyText": "This is perhaps the wrong place, but given it's a quickstart to help people.. why isn't this Multi<Fruit> ? Seems like a weird API if it's only a Uni wrapper for normal blocking models instead of real reactive one.", "author": "burmanm", "createdAt": "2020-07-09T11:41:01Z", "path": "hibernate-reactive-quickstart/src/main/java/org/acme/hibernate/reactive/FruitMutinyResource.java", "diffHunk": "@@ -23,67 +30,118 @@\n @Produces(\"application/json\")\n @Consumes(\"application/json\")\n public class FruitMutinyResource {\n+    private static final Logger LOGGER = Logger.getLogger(FruitMutinyResource.class.getName());\n \n     @Inject\n-    Uni<Mutiny.Session> mutinySession;\n+    Mutiny.Session mutinySession;\n \n     @GET\n-    public Uni<Fruit[]> get() {\n-        return mutinySession.flatMap( session -> session.createNamedQuery( \"Fruits.findAll\", Fruit.class ).getResultList() )\n-                .map( fruits -> fruits.toArray( new Fruit[fruits.size()] ) );\n+    public Uni<List<Fruit>> get() {", "originalCommit": "a2b2c727075f96cd63b5a22e16466244359785a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE5NDAwMg==", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/612#discussion_r452194002", "bodyText": "At the moment, hibernate reactive returns a Uni for reasons described here: hibernate/hibernate-reactive#49\nBut you are right, we could return a Multi in this case. I think I will update the quickstart calling Session#getResults instead", "author": "DavideD", "createdAt": "2020-07-09T12:52:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1NTUzNQ=="}], "type": "inlineReview"}, {"oid": "5e5fa03d9be1ad1f22ab0e8cae8dd2e25f27f8dc", "url": "https://github.com/quarkusio/quarkus-quickstarts/commit/5e5fa03d9be1ad1f22ab0e8cae8dd2e25f27f8dc", "message": "Use Mutiny event-based API in the Hibernate Reactive quickstart\n\n  * Inject the Session directly, unwrap from Uni\n  * Additional tests for update and not found entities\n  * Return Uni<List<Fruit>> instead of Uni<Fruit[]>\n  * Add example on how to map exceptions in the HTTP response", "committedDate": "2020-07-09T13:18:38Z", "type": "forcePushed"}, {"oid": "f2abc7d9718af320846ab4143ee428bc9b6fd5c0", "url": "https://github.com/quarkusio/quarkus-quickstarts/commit/f2abc7d9718af320846ab4143ee428bc9b6fd5c0", "message": "Use Mutiny event-based API in the Hibernate Reactive quickstart\n\n  * Inject the Session directly, unwrap from Uni\n  * Additional tests for update and not found entities\n  * Return Multi<Fruit> instead of Uni<Fruit[]>\n  * Add example on how to map exceptions in the HTTP response", "committedDate": "2020-07-14T11:43:35Z", "type": "commit"}, {"oid": "f2abc7d9718af320846ab4143ee428bc9b6fd5c0", "url": "https://github.com/quarkusio/quarkus-quickstarts/commit/f2abc7d9718af320846ab4143ee428bc9b6fd5c0", "message": "Use Mutiny event-based API in the Hibernate Reactive quickstart\n\n  * Inject the Session directly, unwrap from Uni\n  * Additional tests for update and not found entities\n  * Return Multi<Fruit> instead of Uni<Fruit[]>\n  * Add example on how to map exceptions in the HTTP response", "committedDate": "2020-07-14T11:43:35Z", "type": "forcePushed"}]}