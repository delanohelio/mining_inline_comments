{"pr_number": 3255, "pr_title": "[GEOT-6750]: ImageMosaic COG Harvesting support", "pr_createdAt": "2020-12-07T12:12:08Z", "pr_url": "https://github.com/geotools/geotools/pull/3255", "timeline": [{"oid": "e759e744d7d1c19e989275750ad703e8e740be1b", "url": "https://github.com/geotools/geotools/commit/e759e744d7d1c19e989275750ad703e8e740be1b", "message": "[GEOT-6750]: ImageMosaic COG Harvesting support", "committedDate": "2020-12-07T13:58:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzODM5MQ==", "url": "https://github.com/geotools/geotools/pull/3255#discussion_r537538391", "bodyText": "This whole block seems the same as collect(File)", "author": "aaime", "createdAt": "2020-12-07T14:14:29Z", "path": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/properties/RegExPropertiesCollector.java", "diffHunk": "@@ -78,6 +79,36 @@ public RegExPropertiesCollector collect(File file) {\n         return this;\n     }\n \n+    @Override\n+    public RegExPropertiesCollector collect(URL url) {\n+        super.collect(url);\n+\n+        // get name of the url\n+        final String fullUrl = url.toString();\n+        String name = fullUrl;\n+        if (!fullPath) {\n+            int index = name.lastIndexOf(\"/\");\n+            name = name.substring(index + 1);\n+        }\n+\n+        // get matches\n+        final Matcher matcher = pattern.matcher(name);\n+\n+        while (matcher.find()) {\n+            // Chaining group Strings together\n+            int count = matcher.groupCount();\n+            String match = \"\";\n+            if (count == 0) {\n+                match = matcher.group();\n+            }\n+            for (int i = 1; i <= count; i++) {\n+                match += matcher.group(i);\n+            }\n+            addMatch(match);\n+        }", "originalCommit": "e759e744d7d1c19e989275750ad703e8e740be1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYwOTU5OA==", "url": "https://github.com/geotools/geotools/pull/3255#discussion_r537609598", "bodyText": "Right. Moving it to a common method.", "author": "dromagnoli", "createdAt": "2020-12-07T15:45:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzODM5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU0MTIwNw==", "url": "https://github.com/geotools/geotools/pull/3255#discussion_r537541207", "bodyText": "How about the other collectors? Some return a static value (like the current date) and could trivially be extended to support URLs, e.g, CurrentDateExtractor.  FSDateExtractor could maybe use HTTP headers, though its name is a tad specific to FileSystems.\nThe others seem to be reading off GridCoverage, which I assume happens at a later step and is uniform, regardless\nof the source of the raster (did you check?).", "author": "aaime", "createdAt": "2020-12-07T14:18:11Z", "path": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/properties/RegExPropertiesCollector.java", "diffHunk": "@@ -78,6 +79,36 @@ public RegExPropertiesCollector collect(File file) {\n         return this;\n     }\n \n+    @Override\n+    public RegExPropertiesCollector collect(URL url) {", "originalCommit": "e759e744d7d1c19e989275750ad703e8e740be1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY1NTU0OQ==", "url": "https://github.com/geotools/geotools/pull/3255#discussion_r537655549", "bodyText": "I didn't modified the FSDateExtractor since that one was specific for files on disk indeed.\nUpdating it to extract the info from the header.\nThe GridCoverage based are unrelated to the underlying source so I think they should work :-)", "author": "dromagnoli", "createdAt": "2020-12-07T16:43:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU0MTIwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU1NzczNw==", "url": "https://github.com/geotools/geotools/pull/3255#discussion_r537557737", "bodyText": "What happens if it's not?  Looks like it's going to NPE when setGranuleInput is called. Does it even make sense to have this with anything but a CogConfiguration?", "author": "aaime", "createdAt": "2020-12-07T14:39:56Z", "path": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/CogGranuleAccessProvider.java", "diffHunk": "@@ -56,7 +56,10 @@\n     public CogGranuleAccessProvider(CatalogConfigurationBean bean) {\n         // A Cog Provider will always have at least a streamSpi and an ImageReaderSpi\n         this(getHints(bean));\n-        cogConfig = bean.getCogConfiguration();\n+        URLSourceSPIProvider urlSourceSpiProvider = bean.getUrlSourceSPIProvider();\n+        if (urlSourceSpiProvider instanceof CogConfiguration) {", "originalCommit": "e759e744d7d1c19e989275750ad703e8e740be1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY3MTQ0MQ==", "url": "https://github.com/geotools/geotools/pull/3255#discussion_r537671441", "bodyText": "I will update it to throw a runtime exception in advance.", "author": "dromagnoli", "createdAt": "2020-12-07T17:03:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU1NzczNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU1ODk3MQ==", "url": "https://github.com/geotools/geotools/pull/3255#discussion_r537558971", "bodyText": "Does it need to be public?", "author": "aaime", "createdAt": "2020-12-07T14:41:34Z", "path": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/HarvestedResource.java", "diffHunk": "@@ -0,0 +1,482 @@\n+/*\n+ *    GeoTools - The Open Source Java GIS Toolkit\n+ *    http://geotools.org\n+ *\n+ *    (C) 2006 - 2016, Open Source Geospatial Foundation (OSGeo)\n+ *\n+ *    This library is free software; you can redistribute it and/or\n+ *    modify it under the terms of the GNU Lesser General Public\n+ *    License as published by the Free Software Foundation;\n+ *    version 2.1 of the License.\n+ *\n+ *    This library is distributed in the hope that it will be useful,\n+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ *    Lesser General Public License for more details.\n+ */\n+package org.geotools.gce.imagemosaic;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import org.apache.commons.io.filefilter.IOFileFilter;\n+import org.geotools.coverage.grid.io.DefaultHarvestedSource;\n+import org.geotools.coverage.grid.io.HarvestedSource;\n+import org.geotools.gce.imagemosaic.catalog.GranuleCatalog;\n+import org.geotools.gce.imagemosaic.catalog.index.Indexer;\n+import org.geotools.gce.imagemosaic.catalog.index.IndexerUtils;\n+import org.geotools.gce.imagemosaic.catalog.index.ParametersType;\n+import org.geotools.gce.imagemosaic.catalogbuilder.CatalogBuilderConfiguration;\n+import org.geotools.util.URLs;\n+import org.geotools.util.factory.Hints;\n+\n+/** Types of Resources being supported by ImageMosaic harvest operation. */\n+public enum HarvestedResource {", "originalCommit": "e759e744d7d1c19e989275750ad703e8e740be1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYwOTY1OA==", "url": "https://github.com/geotools/geotools/pull/3255#discussion_r537609658", "bodyText": "Mmm. nope. At the beginning I was thinking it being used by GeoServer but it's not true. removing public qualifier right now.", "author": "dromagnoli", "createdAt": "2020-12-07T15:45:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU1ODk3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU2MzE2OA==", "url": "https://github.com/geotools/geotools/pull/3255#discussion_r537563168", "bodyText": "Hum... what if the source is a string, but looks like http://myserver/myfile?\nGuess one could try to build a URL around it, and if succeeds, if the protocol is file, and/or try to build a File first, check if exists, and only later try the URL road.", "author": "aaime", "createdAt": "2020-12-07T14:46:53Z", "path": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/HarvestedResource.java", "diffHunk": "@@ -0,0 +1,482 @@\n+/*\n+ *    GeoTools - The Open Source Java GIS Toolkit\n+ *    http://geotools.org\n+ *\n+ *    (C) 2006 - 2016, Open Source Geospatial Foundation (OSGeo)\n+ *\n+ *    This library is free software; you can redistribute it and/or\n+ *    modify it under the terms of the GNU Lesser General Public\n+ *    License as published by the Free Software Foundation;\n+ *    version 2.1 of the License.\n+ *\n+ *    This library is distributed in the hope that it will be useful,\n+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ *    Lesser General Public License for more details.\n+ */\n+package org.geotools.gce.imagemosaic;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import org.apache.commons.io.filefilter.IOFileFilter;\n+import org.geotools.coverage.grid.io.DefaultHarvestedSource;\n+import org.geotools.coverage.grid.io.HarvestedSource;\n+import org.geotools.gce.imagemosaic.catalog.GranuleCatalog;\n+import org.geotools.gce.imagemosaic.catalog.index.Indexer;\n+import org.geotools.gce.imagemosaic.catalog.index.IndexerUtils;\n+import org.geotools.gce.imagemosaic.catalog.index.ParametersType;\n+import org.geotools.gce.imagemosaic.catalogbuilder.CatalogBuilderConfiguration;\n+import org.geotools.util.URLs;\n+import org.geotools.util.factory.Hints;\n+\n+/** Types of Resources being supported by ImageMosaic harvest operation. */\n+public enum HarvestedResource {\n+    FILE {\n+        @Override\n+        public void harvest(\n+                String defaultCoverage,\n+                Object source,\n+                Hints hints,\n+                final List<HarvestedSource> result,\n+                ImageMosaicReader reader) {\n+            File file;\n+            if (source instanceof Collection<?>) {\n+                file = (File) ((Collection<?>) source).iterator().next();\n+            } else {\n+                file = (File) source;\n+            }\n+            // Harvesting file\n+            harvestCollection(defaultCoverage, result, reader, Collections.singletonList(file));\n+        }\n+    },\n+    DIRECTORY {\n+        @Override\n+        public void harvest(\n+                String defaultCoverage,\n+                Object source,\n+                Hints hints,\n+                final List<HarvestedSource> result,\n+                ImageMosaicReader reader) {\n+            File directory;\n+            if (source instanceof Collection<?>) {\n+                directory = (File) ((Collection<?>) source).iterator().next();\n+            } else {\n+                directory = (File) source;\n+            }\n+            // Harvesting directory\n+            harvestCalculation(defaultCoverage, result, reader, directory, null);\n+        }\n+    },\n+    FILE_COLLECTION {\n+        @Override\n+        public void harvest(\n+                String defaultCoverage,\n+                Object source,\n+                Hints hints,\n+                final List<HarvestedSource> result,\n+                final ImageMosaicReader reader) {\n+            // I have already checked that it is a Collection of File objects\n+            @SuppressWarnings(\"unchecked\")\n+            Collection<File> files = (Collection<File>) source;\n+            harvestCollection(defaultCoverage, result, reader, files);\n+        }\n+    },\n+    URL {\n+        @Override\n+        public void harvest(\n+                String defaultCoverage,\n+                Object source,\n+                Hints hints,\n+                final List<HarvestedSource> result,\n+                ImageMosaicReader reader) {\n+            harvestURLCollection(\n+                    defaultCoverage, result, reader, Collections.singletonList((URL) source));\n+        }\n+    },\n+    URL_COLLECTION {\n+        @Override\n+        public void harvest(\n+                String defaultCoverage,\n+                Object source,\n+                Hints hints,\n+                final List<HarvestedSource> result,\n+                ImageMosaicReader reader) {\n+            Collection<URL> urls = null;\n+\n+            if (source instanceof Collection<?>) {\n+                try {\n+                    @SuppressWarnings(\"unchecked\")\n+                    Collection<URL> cast = (Collection<URL>) source;\n+                    urls = cast;\n+                } catch (ClassCastException e) {\n+                    // Log the exception\n+                    if (LOGGER.isLoggable(Level.WARNING)) {\n+                        LOGGER.log(Level.WARNING, e.getMessage(), e);\n+                    }\n+                }\n+            } else {\n+                urls = Collections.singletonList((URL) source);\n+            }\n+            // Harvesting Urls\n+            harvestURLCollection(defaultCoverage, result, reader, urls);\n+        }\n+    };\n+\n+    HarvestedResource() {}\n+\n+    /** Logger. */\n+    private static final Logger LOGGER =\n+            org.geotools.util.logging.Logging.getLogger(HarvestedResource.class);\n+\n+    /**\n+     * Harvesting of the input resource. The result will be strored inside the {@link List} object.\n+     */\n+    public abstract void harvest(\n+            String defaultCoverage,\n+            Object source,\n+            Hints hints,\n+            final List<HarvestedSource> result,\n+            ImageMosaicReader reader);\n+\n+    /** Returns the HarvestedResource associated to the input Object */\n+    public static HarvestedResource getResourceFromObject(Object source) {\n+        // Check if the resource is a File or a Directory\n+        if (source instanceof File) {\n+            return getResourceFromFile((File) source);\n+        }\n+        if (source instanceof URL) {\n+            return URL;\n+        }\n+        // For a String instance, it is converted to String\n+        if (source instanceof String) {", "originalCommit": "e759e744d7d1c19e989275750ad703e8e740be1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYyNzAyMg==", "url": "https://github.com/geotools/geotools/pull/3255#discussion_r537627022", "bodyText": "@aaime\nThe previous code wasn't checking for file.exist when converting to file.\nI would try with a URL + protocol file check without checking it actually exist as before. Does it make sense?", "author": "dromagnoli", "createdAt": "2020-12-07T16:06:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU2MzE2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYzMDQwMw==", "url": "https://github.com/geotools/geotools/pull/3255#discussion_r537630403", "bodyText": "Maybe? Wondering what happens with a plain file system path, without the protocol... would it be recognized as a valid URL? Maybe URL should be used only if the protocol is there, and it's not file.", "author": "aaime", "createdAt": "2020-12-07T16:10:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU2MzE2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYzMjE0OA==", "url": "https://github.com/geotools/geotools/pull/3255#discussion_r537632148", "bodyText": "actually the protocol isn't always being returned...\ni.e. \"/home/dromagno/test.zip\" or \"c:\\myfile.zip\"", "author": "dromagnoli", "createdAt": "2020-12-07T16:13:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU2MzE2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY4NDc4Nw==", "url": "https://github.com/geotools/geotools/pull/3255#discussion_r537684787", "bodyText": "k. I will go through the URL way ONLY IF protocol is not null and is not file.", "author": "dromagnoli", "createdAt": "2020-12-07T17:21:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU2MzE2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU2NzM5Nw==", "url": "https://github.com/geotools/geotools/pull/3255#discussion_r537567397", "bodyText": "harvestCollection and harvestURLCollection share some bits of code, maybe they can be factored out in their own methods?", "author": "aaime", "createdAt": "2020-12-07T14:52:02Z", "path": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/HarvestedResource.java", "diffHunk": "@@ -0,0 +1,482 @@\n+/*\n+ *    GeoTools - The Open Source Java GIS Toolkit\n+ *    http://geotools.org\n+ *\n+ *    (C) 2006 - 2016, Open Source Geospatial Foundation (OSGeo)\n+ *\n+ *    This library is free software; you can redistribute it and/or\n+ *    modify it under the terms of the GNU Lesser General Public\n+ *    License as published by the Free Software Foundation;\n+ *    version 2.1 of the License.\n+ *\n+ *    This library is distributed in the hope that it will be useful,\n+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ *    Lesser General Public License for more details.\n+ */\n+package org.geotools.gce.imagemosaic;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import org.apache.commons.io.filefilter.IOFileFilter;\n+import org.geotools.coverage.grid.io.DefaultHarvestedSource;\n+import org.geotools.coverage.grid.io.HarvestedSource;\n+import org.geotools.gce.imagemosaic.catalog.GranuleCatalog;\n+import org.geotools.gce.imagemosaic.catalog.index.Indexer;\n+import org.geotools.gce.imagemosaic.catalog.index.IndexerUtils;\n+import org.geotools.gce.imagemosaic.catalog.index.ParametersType;\n+import org.geotools.gce.imagemosaic.catalogbuilder.CatalogBuilderConfiguration;\n+import org.geotools.util.URLs;\n+import org.geotools.util.factory.Hints;\n+\n+/** Types of Resources being supported by ImageMosaic harvest operation. */\n+public enum HarvestedResource {\n+    FILE {\n+        @Override\n+        public void harvest(\n+                String defaultCoverage,\n+                Object source,\n+                Hints hints,\n+                final List<HarvestedSource> result,\n+                ImageMosaicReader reader) {\n+            File file;\n+            if (source instanceof Collection<?>) {\n+                file = (File) ((Collection<?>) source).iterator().next();\n+            } else {\n+                file = (File) source;\n+            }\n+            // Harvesting file\n+            harvestCollection(defaultCoverage, result, reader, Collections.singletonList(file));\n+        }\n+    },\n+    DIRECTORY {\n+        @Override\n+        public void harvest(\n+                String defaultCoverage,\n+                Object source,\n+                Hints hints,\n+                final List<HarvestedSource> result,\n+                ImageMosaicReader reader) {\n+            File directory;\n+            if (source instanceof Collection<?>) {\n+                directory = (File) ((Collection<?>) source).iterator().next();\n+            } else {\n+                directory = (File) source;\n+            }\n+            // Harvesting directory\n+            harvestCalculation(defaultCoverage, result, reader, directory, null);\n+        }\n+    },\n+    FILE_COLLECTION {\n+        @Override\n+        public void harvest(\n+                String defaultCoverage,\n+                Object source,\n+                Hints hints,\n+                final List<HarvestedSource> result,\n+                final ImageMosaicReader reader) {\n+            // I have already checked that it is a Collection of File objects\n+            @SuppressWarnings(\"unchecked\")\n+            Collection<File> files = (Collection<File>) source;\n+            harvestCollection(defaultCoverage, result, reader, files);\n+        }\n+    },\n+    URL {\n+        @Override\n+        public void harvest(\n+                String defaultCoverage,\n+                Object source,\n+                Hints hints,\n+                final List<HarvestedSource> result,\n+                ImageMosaicReader reader) {\n+            harvestURLCollection(\n+                    defaultCoverage, result, reader, Collections.singletonList((URL) source));\n+        }\n+    },\n+    URL_COLLECTION {\n+        @Override\n+        public void harvest(\n+                String defaultCoverage,\n+                Object source,\n+                Hints hints,\n+                final List<HarvestedSource> result,\n+                ImageMosaicReader reader) {\n+            Collection<URL> urls = null;\n+\n+            if (source instanceof Collection<?>) {\n+                try {\n+                    @SuppressWarnings(\"unchecked\")\n+                    Collection<URL> cast = (Collection<URL>) source;\n+                    urls = cast;\n+                } catch (ClassCastException e) {\n+                    // Log the exception\n+                    if (LOGGER.isLoggable(Level.WARNING)) {\n+                        LOGGER.log(Level.WARNING, e.getMessage(), e);\n+                    }\n+                }\n+            } else {\n+                urls = Collections.singletonList((URL) source);\n+            }\n+            // Harvesting Urls\n+            harvestURLCollection(defaultCoverage, result, reader, urls);\n+        }\n+    };\n+\n+    HarvestedResource() {}\n+\n+    /** Logger. */\n+    private static final Logger LOGGER =\n+            org.geotools.util.logging.Logging.getLogger(HarvestedResource.class);\n+\n+    /**\n+     * Harvesting of the input resource. The result will be strored inside the {@link List} object.\n+     */\n+    public abstract void harvest(\n+            String defaultCoverage,\n+            Object source,\n+            Hints hints,\n+            final List<HarvestedSource> result,\n+            ImageMosaicReader reader);\n+\n+    /** Returns the HarvestedResource associated to the input Object */\n+    public static HarvestedResource getResourceFromObject(Object source) {\n+        // Check if the resource is a File or a Directory\n+        if (source instanceof File) {\n+            return getResourceFromFile((File) source);\n+        }\n+        if (source instanceof URL) {\n+            return URL;\n+        }\n+        // For a String instance, it is converted to String\n+        if (source instanceof String) {\n+            File file = new File((String) source);\n+            return getResourceFromFile(file);\n+        }\n+        // Check if the input Object is a File/URL Collection\n+        if (source instanceof Collection<?>) {\n+            Object sample = ((Collection) source).iterator().next();\n+            // Let's check if it's a Collection of files\n+            if (sample instanceof File) {\n+                Collection<File> files = null;\n+                try {\n+                    @SuppressWarnings(\"unchecked\")\n+                    Collection<File> cast = (Collection<File>) source;\n+                    files = cast;\n+                } catch (ClassCastException e) {\n+                    // Log the exception\n+                    if (LOGGER.isLoggable(Level.WARNING)) {\n+                        LOGGER.log(Level.WARNING, e.getMessage(), e);\n+                    }\n+                }\n+                // If the files are present\n+                if (files != null) {\n+                    // No File is saved\n+                    int fileSize = files.size();\n+                    // Check on the File Size\n+                    if (fileSize < 1) {\n+                        return null;\n+                    } else if (fileSize == 1) {\n+                        // If the Collection size is 1 then the object can be only a file or a\n+                        // directory\n+                        return getResourceFromFile(files.iterator().next());\n+                    } else {\n+                        return FILE_COLLECTION;\n+                    }\n+                }\n+                // We only support File and URL but let's doublecheck\n+                // if it's an URL in any case\n+            } else if (sample instanceof URL) {\n+                return URL_COLLECTION;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Check if the File Object is a DIRECTORY or not and return the associated {@link\n+     * HarvestedResource}\n+     */\n+    private static HarvestedResource getResourceFromFile(File file) {\n+        if (file != null) {\n+            if (file.isDirectory()) {\n+                return DIRECTORY;\n+            } else {\n+                return FILE;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /** Method for harvesting on a directory */\n+    private static void harvestCollection(", "originalCommit": "e759e744d7d1c19e989275750ad703e8e740be1b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU3NTM5NQ==", "url": "https://github.com/geotools/geotools/pull/3255#discussion_r537575395", "bodyText": "Is this the only line different from fireFileEvent? If so, can you please factor out the difference and share code?", "author": "aaime", "createdAt": "2020-12-07T15:01:48Z", "path": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/ImageMosaicEventHandlers.java", "diffHunk": "@@ -240,6 +267,36 @@ protected void fireFileEvent(\n         }\n     }\n \n+    /**\n+     * Firing an event to listeners in order to inform them about what we are doing and about the\n+     * percentage of work already carried out.\n+     *\n+     * @param inMessage The message to show.\n+     * @param percentage The percentage for the process.\n+     */\n+    protected void fireUrlEvent(\n+            Level level,\n+            final URL url,\n+            final boolean ingested,\n+            final String inMessage,\n+            final double percentage) {\n+        if (LOGGER.isLoggable(level)) {\n+            LOGGER.log(level, inMessage);\n+        }\n+        synchronized (notificationListeners) {\n+            final String newLine = System.getProperty(\"line.separator\");\n+            final StringBuilder message = new StringBuilder(\"Thread Name \");\n+            message.append(Thread.currentThread().getName()).append(newLine);\n+            message.append(this.getClass().toString()).append(newLine).append(inMessage);\n+            final URLProcessingEvent evt =", "originalCommit": "e759e744d7d1c19e989275750ad703e8e740be1b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU3OTExMQ==", "url": "https://github.com/geotools/geotools/pull/3255#discussion_r537579111", "bodyText": "Maybe a better name?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                abstract T getInnerObject();\n          \n          \n            \n                abstract T getElement();", "author": "aaime", "createdAt": "2020-12-07T15:06:36Z", "path": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/ImageMosaicSourceElement.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ *    GeoTools - The Open Source Java GIS Toolkit\n+ *    http://geotools.org\n+ *\n+ *    (C) 2020, Open Source Geospatial Foundation (OSGeo)\n+ *\n+ *    This library is free software; you can redistribute it and/or\n+ *    modify it under the terms of the GNU Lesser General Public\n+ *    License as published by the Free Software Foundation;\n+ *    version 2.1 of the License.\n+ *\n+ *    This library is distributed in the hope that it will be useful,\n+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ *    Lesser General Public License for more details.\n+ */\n+package org.geotools.gce.imagemosaic;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.logging.Level;\n+import java.util.regex.Pattern;\n+import org.apache.commons.io.FilenameUtils;\n+import org.geotools.gce.imagemosaic.catalogbuilder.CatalogBuilderConfiguration;\n+import org.geotools.gce.imagemosaic.properties.PropertiesCollector;\n+\n+/** An elementary source element (a File, a URL, ...) of an ImageMosaic */\n+abstract class ImageMosaicSourceElement<T> {\n+\n+    /** Return the inner object */\n+    abstract T getInnerObject();", "originalCommit": "e759e744d7d1c19e989275750ad703e8e740be1b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU4MDkzMw==", "url": "https://github.com/geotools/geotools/pull/3255#discussion_r537580933", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                static class ImageMosaicFile extends ImageMosaicSourceElement<File> {\n          \n          \n            \n                static class FileElement extends ImageMosaicSourceElement<File> {", "author": "aaime", "createdAt": "2020-12-07T15:08:52Z", "path": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/ImageMosaicSourceElement.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ *    GeoTools - The Open Source Java GIS Toolkit\n+ *    http://geotools.org\n+ *\n+ *    (C) 2020, Open Source Geospatial Foundation (OSGeo)\n+ *\n+ *    This library is free software; you can redistribute it and/or\n+ *    modify it under the terms of the GNU Lesser General Public\n+ *    License as published by the Free Software Foundation;\n+ *    version 2.1 of the License.\n+ *\n+ *    This library is distributed in the hope that it will be useful,\n+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ *    Lesser General Public License for more details.\n+ */\n+package org.geotools.gce.imagemosaic;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.logging.Level;\n+import java.util.regex.Pattern;\n+import org.apache.commons.io.FilenameUtils;\n+import org.geotools.gce.imagemosaic.catalogbuilder.CatalogBuilderConfiguration;\n+import org.geotools.gce.imagemosaic.properties.PropertiesCollector;\n+\n+/** An elementary source element (a File, a URL, ...) of an ImageMosaic */\n+abstract class ImageMosaicSourceElement<T> {\n+\n+    /** Return the inner object */\n+    abstract T getInnerObject();\n+\n+    /** Get the location of this element, taking into account the configuration */\n+    abstract String getLocation(CatalogBuilderConfiguration config) throws IOException;\n+\n+    /**\n+     * Provide this element to the specified {@link PropertiesCollector} so that it can collect it\n+     * for properties extraction\n+     */\n+    abstract void addToCollector(PropertiesCollector pc);\n+\n+    /** Have the provided eventHandler firing an event related to the harvesting of this element */\n+    abstract void fireHarvestingEvent(\n+            ImageMosaicEventHandlers eventHandler,\n+            int elementIndex,\n+            int numElements,\n+            String message);\n+\n+    /** a {@link File} ImageMosaic source element */\n+    static class ImageMosaicFile extends ImageMosaicSourceElement<File> {", "originalCommit": "e759e744d7d1c19e989275750ad703e8e740be1b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU4MTEwOA==", "url": "https://github.com/geotools/geotools/pull/3255#discussion_r537581108", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                static class ImageMosaicURL extends ImageMosaicSourceElement<URL> {\n          \n          \n            \n                static class URLElement extends ImageMosaicSourceElement<URL> {", "author": "aaime", "createdAt": "2020-12-07T15:09:05Z", "path": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/ImageMosaicSourceElement.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ *    GeoTools - The Open Source Java GIS Toolkit\n+ *    http://geotools.org\n+ *\n+ *    (C) 2020, Open Source Geospatial Foundation (OSGeo)\n+ *\n+ *    This library is free software; you can redistribute it and/or\n+ *    modify it under the terms of the GNU Lesser General Public\n+ *    License as published by the Free Software Foundation;\n+ *    version 2.1 of the License.\n+ *\n+ *    This library is distributed in the hope that it will be useful,\n+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ *    Lesser General Public License for more details.\n+ */\n+package org.geotools.gce.imagemosaic;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.logging.Level;\n+import java.util.regex.Pattern;\n+import org.apache.commons.io.FilenameUtils;\n+import org.geotools.gce.imagemosaic.catalogbuilder.CatalogBuilderConfiguration;\n+import org.geotools.gce.imagemosaic.properties.PropertiesCollector;\n+\n+/** An elementary source element (a File, a URL, ...) of an ImageMosaic */\n+abstract class ImageMosaicSourceElement<T> {\n+\n+    /** Return the inner object */\n+    abstract T getInnerObject();\n+\n+    /** Get the location of this element, taking into account the configuration */\n+    abstract String getLocation(CatalogBuilderConfiguration config) throws IOException;\n+\n+    /**\n+     * Provide this element to the specified {@link PropertiesCollector} so that it can collect it\n+     * for properties extraction\n+     */\n+    abstract void addToCollector(PropertiesCollector pc);\n+\n+    /** Have the provided eventHandler firing an event related to the harvesting of this element */\n+    abstract void fireHarvestingEvent(\n+            ImageMosaicEventHandlers eventHandler,\n+            int elementIndex,\n+            int numElements,\n+            String message);\n+\n+    /** a {@link File} ImageMosaic source element */\n+    static class ImageMosaicFile extends ImageMosaicSourceElement<File> {\n+\n+        File file;\n+\n+        ImageMosaicFile(File file) {\n+            this.file = file;\n+        }\n+\n+        @Override\n+        File getInnerObject() {\n+            return file;\n+        }\n+\n+        @Override\n+        String getLocation(CatalogBuilderConfiguration config) throws IOException {\n+            return prepareLocation(config, file);\n+        }\n+\n+        @Override\n+        void addToCollector(PropertiesCollector pc) {\n+            pc.collect(getInnerObject());\n+        }\n+\n+        @Override\n+        void fireHarvestingEvent(\n+                ImageMosaicEventHandlers eventHandler,\n+                int elementIndex,\n+                int numElements,\n+                String message) {\n+            eventHandler.fireFileEvent(\n+                    Level.FINE, file, true, message, ((elementIndex + 1) * 99.0) / numElements);\n+        }\n+\n+        /** Prepare the location on top of the configuration and file to be processed. */\n+        private static String prepareLocation(\n+                CatalogBuilderConfiguration runConfiguration, final File fileBeingProcessed)\n+                throws IOException {\n+            // absolute\n+            String pathType = runConfiguration.getParameter(Utils.Prop.PATH_TYPE);\n+            String absolutePath = runConfiguration.getParameter(Utils.Prop.ABSOLUTE_PATH);\n+            if (Boolean.valueOf(absolutePath) || PathType.ABSOLUTE.name().equals(pathType)) {\n+                return fileBeingProcessed.getAbsolutePath();\n+            }\n+\n+            // relative (harvesting of PathType.URL is not supported)\n+            String targetPath = fileBeingProcessed.getCanonicalPath();\n+            String basePath = runConfiguration.getParameter(Utils.Prop.ROOT_MOSAIC_DIR);\n+            String relative = getRelativePath(targetPath, basePath, File.separator);\n+            // escaping\n+            return relative;\n+        }\n+\n+        /**\n+         * Get the relative path from one file to another, specifying the directory separator. If\n+         * one of the provided resources does not exist, it is assumed to be a file unless it ends\n+         * with '/' or '\\'.\n+         *\n+         * @param targetPath targetPath is calculated to this file\n+         * @param basePath basePath is calculated from this file\n+         * @param pathSeparator directory separator. The platform default is not assumed so that we\n+         *     can test Unix behaviour when running on Windows (for example)\n+         */\n+        private static String getRelativePath(\n+                String targetPath, String basePath, String pathSeparator) {\n+\n+            // Normalize the paths\n+            String normalizedTargetPath = FilenameUtils.normalizeNoEndSeparator(targetPath);\n+            String normalizedBasePath = FilenameUtils.normalizeNoEndSeparator(basePath);\n+\n+            // Undo the changes to the separators made by normalization\n+            if (pathSeparator.equals(\"/\")) {\n+                normalizedTargetPath = FilenameUtils.separatorsToUnix(normalizedTargetPath);\n+                normalizedBasePath = FilenameUtils.separatorsToUnix(normalizedBasePath);\n+\n+            } else if (pathSeparator.equals(\"\\\\\")) {\n+                normalizedTargetPath = FilenameUtils.separatorsToWindows(normalizedTargetPath);\n+                normalizedBasePath = FilenameUtils.separatorsToWindows(normalizedBasePath);\n+\n+            } else {\n+                throw new IllegalArgumentException(\n+                        \"Unrecognised dir separator '\" + pathSeparator + \"'\");\n+            }\n+\n+            String[] base = normalizedBasePath.split(Pattern.quote(pathSeparator));\n+            String[] target = normalizedTargetPath.split(Pattern.quote(pathSeparator));\n+\n+            // First get all the common elements. Store them as a string,\n+            // and also count how many of them there are.\n+            StringBuilder common = new StringBuilder();\n+\n+            int commonIndex = 0;\n+            while (commonIndex < target.length\n+                    && commonIndex < base.length\n+                    && target[commonIndex].equals(base[commonIndex])) {\n+                common.append(target[commonIndex] + pathSeparator);\n+                commonIndex++;\n+            }\n+\n+            if (commonIndex == 0) {\n+                // No single common path element. This most\n+                // likely indicates differing drive letters, like C: and D:.\n+                // These paths cannot be relativized.\n+                throw new RuntimeException(\n+                        \"No common path element found for '\"\n+                                + normalizedTargetPath\n+                                + \"' and '\"\n+                                + normalizedBasePath\n+                                + \"'\");\n+            }\n+\n+            // The number of directories we have to backtrack depends on whether the base is a file\n+            // or a dir\n+            // For example, the relative path from\n+            //\n+            // /foo/bar/baz/gg/ff to /foo/bar/baz\n+            //\n+            // \"..\" if ff is a file\n+            // \"../..\" if ff is a directory\n+            //\n+            // The following is a heuristic to figure out if the base refers to a file or dir. It's\n+            // not perfect, because the resource referred to by this path may not actually exist,\n+            // but it's the best I can do\n+            boolean baseIsFile = true;\n+\n+            File baseResource = new File(normalizedBasePath);\n+\n+            if (baseResource.exists()) {\n+                baseIsFile = baseResource.isFile();\n+\n+            } else if (basePath.endsWith(pathSeparator)) {\n+                baseIsFile = false;\n+            }\n+\n+            StringBuilder relative = new StringBuilder();\n+\n+            if (base.length != commonIndex) {\n+                int numDirsUp =\n+                        baseIsFile ? base.length - commonIndex - 1 : base.length - commonIndex;\n+\n+                for (int i = 0; i < numDirsUp; i++) {\n+                    relative.append(\"..\" + pathSeparator);\n+                }\n+            }\n+            relative.append(normalizedTargetPath.substring(common.length()));\n+            return relative.toString();\n+        }\n+    }\n+\n+    /** A {@link URL} ImageMosaic source element. */\n+    static class ImageMosaicURL extends ImageMosaicSourceElement<URL> {", "originalCommit": "e759e744d7d1c19e989275750ad703e8e740be1b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU4NTgxNQ==", "url": "https://github.com/geotools/geotools/pull/3255#discussion_r537585815", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testEmpytMosaic() throws Exception {\n          \n          \n            \n                public void testEmptyMosaic() throws Exception {", "author": "aaime", "createdAt": "2020-12-07T15:14:59Z", "path": "modules/plugin/imagemosaic/src/test/java/org/geotools/gce/imagemosaic/ImageMosaicCogOnlineTest.java", "diffHunk": "@@ -148,4 +151,158 @@ public void testCogMosaicDefaultConfig() throws Exception {\n         assertEquals(1, raster.getNumBands());\n         reader.dispose();\n     }\n+\n+    @Test\n+    public void testHarvestSingleURL() throws Exception {\n+        File workDir = prepareWorkingDir(\"cogtest.zip\", \"harvest\", \"cogtest\");\n+        File file = new File(workDir, \"indexer.properties\");\n+        Properties properties = new Properties();\n+        try (FileInputStream fin = new FileInputStream(file)) {\n+            properties.load(fin);\n+        }\n+\n+        try (FileWriter fw = new FileWriter(file)) {\n+            assertNotNull(properties.remove(\"UseExistingSchema\"));\n+            properties.store(fw, \"\");\n+        }\n+\n+        ImageMosaicReader reader = IMAGE_MOSAIC_FORMAT.getReader(workDir);\n+        String coverageName = reader.getGridCoverageNames()[0];\n+        GranuleSource granules = reader.getGranules(coverageName, true);\n+\n+        // Only 1 granule available before doing the harvest\n+        assertEquals(1, granules.getCount(Query.ALL));\n+\n+        try {\n+            // now go and harvest the url\n+            URL source =\n+                    new URL(\n+                            \"https://s3-us-west-2.amazonaws.com/landsat-pds/c1/L8/153/075/LC08_L1TP_153075_20190515_20190515_01_RT/LC08_L1TP_153075_20190515_20190515_01_RT_B3.TIF\");\n+            List<HarvestedSource> summary = reader.harvest(null, source, null);\n+            HarvestedSource hf = summary.get(0);\n+\n+            // check the granule catalog\n+            granules = reader.getGranules(coverageName, true);\n+\n+            // We now have 2 granules\n+            assertEquals(2, granules.getCount(Query.ALL));\n+        } finally {\n+            reader.dispose();\n+        }\n+    }\n+\n+    /** Simple test method to test emptyMosaic creation support followed by harvesting a URL */\n+    @Test\n+    public void testEmpytMosaic() throws Exception {", "originalCommit": "e759e744d7d1c19e989275750ad703e8e740be1b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU4NjExOA==", "url": "https://github.com/geotools/geotools/pull/3255#discussion_r537586118", "bodyText": "(not your fault, but while you're at it...)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testEmpytMosaic() throws Exception {\n          \n          \n            \n                public void testEmptyMosaic() throws Exception {", "author": "aaime", "createdAt": "2020-12-07T15:15:23Z", "path": "modules/plugin/imagemosaic/src/test/java/org/geotools/gce/imagemosaic/ImageMosaicReaderTest.java", "diffHunk": "@@ -1241,7 +1241,6 @@ public void timeAdditionalDimRanges() throws Exception {\n \n     /** Simple test method to test emptyMosaic creation support followed by harvesting. dataset */\n     @Test\n-    // @Ignore\n     public void testEmpytMosaic() throws Exception {", "originalCommit": "e759e744d7d1c19e989275750ad703e8e740be1b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU4NjgwMg==", "url": "https://github.com/geotools/geotools/pull/3255#discussion_r537586802", "bodyText": "So are these tests going to run in some builds? PR checks? build server? Or just locally if manually enabled?", "author": "aaime", "createdAt": "2020-12-07T15:16:15Z", "path": "modules/plugin/imagemosaic/src/test/java/org/geotools/gce/imagemosaic/ImageMosaicCogOnlineTest.java", "diffHunk": "@@ -26,34 +28,51 @@\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileWriter;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.List;\n import java.util.Properties;\n import junit.framework.TestCase;\n import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang3.StringUtils;\n import org.geotools.coverage.grid.GridCoverage2D;\n import org.geotools.coverage.grid.GridEnvelope2D;\n import org.geotools.coverage.grid.GridGeometry2D;\n import org.geotools.coverage.grid.io.AbstractGridCoverage2DReader;\n import org.geotools.coverage.grid.io.AbstractGridFormat;\n+import org.geotools.coverage.grid.io.GranuleSource;\n+import org.geotools.coverage.grid.io.HarvestedSource;\n+import org.geotools.data.Query;\n+import org.geotools.data.simple.SimpleFeatureIterator;\n+import org.geotools.gce.imagemosaic.catalog.GranuleCatalog;\n import org.geotools.geometry.GeneralEnvelope;\n import org.geotools.test.TestData;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n import org.junit.Test;\n+import org.opengis.feature.simple.SimpleFeature;\n import org.opengis.parameter.GeneralParameterValue;\n import org.opengis.parameter.ParameterValue;\n \n /** Testing using COG remote granules on an ImageMosaic */\n public class ImageMosaicCogOnlineTest extends TestCase {", "originalCommit": "e759e744d7d1c19e989275750ad703e8e740be1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU4ODAxMw==", "url": "https://github.com/geotools/geotools/pull/3255#discussion_r537588013", "bodyText": "Also, I see code trying to handle a list of URLs during harvesting (one of the harvested resources). Is there a test for that case?", "author": "aaime", "createdAt": "2020-12-07T15:17:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU4NjgwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYyMzM5NQ==", "url": "https://github.com/geotools/geotools/pull/3255#discussion_r537623395", "bodyText": "Yep. there is the online test checking it. (which was failing, bytheway. Fixed it)\nI have also updated the timeMosaic test to harvest a List of 2 URLs instead of just a single one.", "author": "dromagnoli", "createdAt": "2020-12-07T16:02:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU4NjgwMg=="}], "type": "inlineReview"}, {"oid": "af756e4246e592bdf77a5d1ba4978cfff3842b6f", "url": "https://github.com/geotools/geotools/commit/af756e4246e592bdf77a5d1ba4978cfff3842b6f", "message": "[GEOT-6750]: ImageMosaic COG Harvesting support", "committedDate": "2020-12-07T17:44:00Z", "type": "forcePushed"}, {"oid": "5bb3358565a7c081e78f39e1c85a14eff8dcc021", "url": "https://github.com/geotools/geotools/commit/5bb3358565a7c081e78f39e1c85a14eff8dcc021", "message": "[GEOT-6750]: ImageMosaic COG Harvesting support", "committedDate": "2020-12-09T09:30:41Z", "type": "forcePushed"}, {"oid": "c47b9f39f71bec761d4e3a5389f29e66974c61b2", "url": "https://github.com/geotools/geotools/commit/c47b9f39f71bec761d4e3a5389f29e66974c61b2", "message": "[GEOT-6750]: ImageMosaic COG Harvesting support", "committedDate": "2020-12-09T10:14:45Z", "type": "forcePushed"}, {"oid": "4e00a522c3e0378f17e03dff80dd04fbf23d6e9f", "url": "https://github.com/geotools/geotools/commit/4e00a522c3e0378f17e03dff80dd04fbf23d6e9f", "message": "[GEOT-6750]: ImageMosaic COG Harvesting support", "committedDate": "2020-12-15T10:40:24Z", "type": "forcePushed"}, {"oid": "ac7c8772d9ded7a90cef00e87acc9f66571df6ef", "url": "https://github.com/geotools/geotools/commit/ac7c8772d9ded7a90cef00e87acc9f66571df6ef", "message": "[GEOT-6750]: ImageMosaic COG Harvesting support", "committedDate": "2020-12-15T14:35:45Z", "type": "forcePushed"}, {"oid": "4c3f833b0887c7e6492b6ef794561b767b33ca17", "url": "https://github.com/geotools/geotools/commit/4c3f833b0887c7e6492b6ef794561b767b33ca17", "message": "[GEOT-6750]: ImageMosaic COG Harvesting support", "committedDate": "2020-12-21T10:23:52Z", "type": "commit"}, {"oid": "4c3f833b0887c7e6492b6ef794561b767b33ca17", "url": "https://github.com/geotools/geotools/commit/4c3f833b0887c7e6492b6ef794561b767b33ca17", "message": "[GEOT-6750]: ImageMosaic COG Harvesting support", "committedDate": "2020-12-21T10:23:52Z", "type": "forcePushed"}]}