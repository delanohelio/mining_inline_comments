{"pr_number": 2982, "pr_title": "[GEOT-6623] Add support for jsonPointer to SQL translation in a Postg\u2026", "pr_createdAt": "2020-06-11T15:05:19Z", "pr_url": "https://github.com/geotools/geotools/pull/2982", "timeline": [{"oid": "a4104a1cce8b5ddd2a1b3cfd30d1b4d1ab9433a8", "url": "https://github.com/geotools/geotools/commit/a4104a1cce8b5ddd2a1b3cfd30d1b4d1ab9433a8", "message": "[GEOT-6623] Add support for jsonPointer to SQL translation in a PostgreSQL database", "committedDate": "2020-06-11T15:30:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3NDM0NQ==", "url": "https://github.com/geotools/geotools/pull/2982#discussion_r440074345", "bodyText": "Does the same as the overridden method, should be removed.", "author": "aaime", "createdAt": "2020-06-15T10:16:49Z", "path": "modules/library/main/src/main/java/org/geotools/filter/function/JsonPointerFunction.java", "diffHunk": "@@ -152,4 +154,9 @@ private void serializeObject(JsonParser parser, JsonGenerator generator) throws\n         }\n         generator.writeEndObject();\n     }\n+\n+    @Override\n+    public Object accept(ExpressionVisitor visitor, Object extraData) {", "originalCommit": "a4104a1cce8b5ddd2a1b3cfd30d1b4d1ab9433a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ2MjEzMw==", "url": "https://github.com/geotools/geotools/pull/2982#discussion_r441462133", "bodyText": "fixed", "author": "taba90", "createdAt": "2020-06-17T11:00:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3NDM0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3NDYxOQ==", "url": "https://github.com/geotools/geotools/pull/2982#discussion_r440074619", "bodyText": "This class is extended for all databases, please add javadoc for this method so that subclassers know what it is for.", "author": "aaime", "createdAt": "2020-06-15T10:17:22Z", "path": "modules/library/jdbc/src/main/java/org/geotools/data/jdbc/FilterToSQL.java", "diffHunk": "@@ -824,6 +824,16 @@ protected void visitBinaryComparisonOperator(BinaryComparisonOperator filter, Ob\n         Class rightContext = getExpressionType(left);\n         Class leftContext = getExpressionType(right);\n \n+        encodeBinaryComparisonOperator(filter, extraData, left, right, leftContext, rightContext);\n+    }\n+\n+    protected void encodeBinaryComparisonOperator(", "originalCommit": "a4104a1cce8b5ddd2a1b3cfd30d1b4d1ab9433a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ2MjE3OA==", "url": "https://github.com/geotools/geotools/pull/2982#discussion_r441462178", "bodyText": "fixed", "author": "taba90", "createdAt": "2020-06-17T11:00:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3NDYxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA4MjUxMg==", "url": "https://github.com/geotools/geotools/pull/2982#discussion_r440082512", "bodyText": "In general you cannot assume it's going to be a Literal, functions must work with whatever expression they are given as input. The existing function, without the postgresql encoding, would work even if the pointer was specified with a complex expression, possibly attribute based.\nIf you check SQLDialect, it gets called for splitting filters. For this case, I suggest to override it, and check if there is a pointer function, and if the function is called in a \"static\" way. Static does not mean \"literal\" directly, it just means that the expression tree referenced by  \"pointer\" :\n\ndoes not use any attribute\ndoes not use any VolatileFunction\n\nIf those conditions are met, you can include the function in the capabilities, otherwise, you exclude it from them and have the splitter move it to the post-filter.\nI think (please verify) that the JDBCDataStore code makes the filter go through a SimplfyingFilterVisitor, which is already doing this job for you:\n\n  \n    \n      geotools/modules/library/main/src/main/java/org/geotools/filter/visitor/SimplifyingFilterVisitor.java\n    \n    \n         Line 453\n      in\n      029dc5c\n    \n    \n    \n    \n\n        \n          \n           public Object visit(org.opengis.filter.expression.Function function, Object extraData) { \n        \n    \n  \n\n\nIf so, all you need to do is to write a DefaultFilterVisitor, if it finds a JSONPointerFunction, it means it was not eliminated by the simplifier, and thus it's dynamic, cannot be encoded in SQL.", "author": "aaime", "createdAt": "2020-06-15T10:32:35Z", "path": "modules/plugin/jdbc/jdbc-postgis/src/main/java/org/geotools/data/postgis/FilterToSqlHelper.java", "diffHunk": "@@ -625,6 +633,42 @@ public boolean visitFunction(Function function, Object extraData) throws IOExcep\n         return true;\n     }\n \n+    private void encodeJsonPointer(Function jsonPointer, Object extraData) throws IOException {\n+        Expression json = getParameter(jsonPointer, 0, true);\n+        Expression pointer = getParameter(jsonPointer, 1, true);\n+        if (json instanceof PropertyName && pointer instanceof Literal) {\n+            // if not a string need to cast the json attribute\n+            boolean needCast =\n+                    extraData != null\n+                            && extraData instanceof Class\n+                            && !extraData.equals(String.class);\n+\n+            if (needCast) out.write('(');\n+            json.accept(delegate, null);\n+            out.write(\" ::json \");\n+            String strPointer = ((Literal) pointer).getValue().toString();", "originalCommit": "a4104a1cce8b5ddd2a1b3cfd30d1b4d1ab9433a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ2MjM1OQ==", "url": "https://github.com/geotools/geotools/pull/2982#discussion_r441462359", "bodyText": "thanks for the point and the explanation, fixed", "author": "taba90", "createdAt": "2020-06-17T11:00:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA4MjUxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA4NDIwMg==", "url": "https://github.com/geotools/geotools/pull/2982#discussion_r440084202", "bodyText": "Please add a test for nested properties, like a/b (instead of array case) and also one for a non-encodable case, like, the pointer value is contained in a second attribute of the feature.", "author": "aaime", "createdAt": "2020-06-15T10:36:03Z", "path": "modules/plugin/jdbc/jdbc-postgis/src/test/java/org/geotools/data/postgis/PostgisFilterToSQLTest.java", "diffHunk": "@@ -248,4 +250,27 @@ public void testFunctionLike() throws Exception {\n         String sql = writer.toString().toLowerCase().trim();\n         assertEquals(\"where lower(teststring) like 'a_literal'\", sql);\n     }\n+\n+    @Test\n+    public void testFunctionJsonPointer() throws Exception {\n+        filterToSql.setFeatureType(testSchema);\n+        Function pointer =\n+                ff.function(\"jsonPointer\", ff.property(\"testJSON\"), ff.literal(\"/arr/0\"));\n+\n+        filterToSql.encode(pointer);\n+        String sql = writer.toString().toLowerCase().trim();\n+        assertEquals(\"testjson ::json  -> 'arr' ->> 0\", sql);\n+    }\n+\n+    @Test\n+    public void testBinaryComparisonWithJsonPointer() throws Exception {", "originalCommit": "a4104a1cce8b5ddd2a1b3cfd30d1b4d1ab9433a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ2MjQ0NA==", "url": "https://github.com/geotools/geotools/pull/2982#discussion_r441462444", "bodyText": "fixed", "author": "taba90", "createdAt": "2020-06-17T11:00:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA4NDIwMg=="}], "type": "inlineReview"}, {"oid": "f0d68f5458e02a11d8e8cad5345252cee0bf7178", "url": "https://github.com/geotools/geotools/commit/f0d68f5458e02a11d8e8cad5345252cee0bf7178", "message": "[GEOT-6623] Add support for jsonPointer to SQL translation in a PostgreSQL database", "committedDate": "2020-06-17T09:29:32Z", "type": "commit"}, {"oid": "71423e684efbf214370745287fad42b2ec8d1ae3", "url": "https://github.com/geotools/geotools/commit/71423e684efbf214370745287fad42b2ec8d1ae3", "message": "reviewer's suggestion applied", "committedDate": "2020-06-17T10:14:00Z", "type": "commit"}, {"oid": "71423e684efbf214370745287fad42b2ec8d1ae3", "url": "https://github.com/geotools/geotools/commit/71423e684efbf214370745287fad42b2ec8d1ae3", "message": "reviewer's suggestion applied", "committedDate": "2020-06-17T10:14:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYxNTc4Mg==", "url": "https://github.com/geotools/geotools/pull/2982#discussion_r443615782", "bodyText": "Thread safety issue here. The capabilities object is big and normally shared, you should not be modifying it. Since it's large, cloning it is also somehow expensive.\nSuggestion: change the PostPreProcessFilterSplittingVisitor so that the \"!fcs.supports(expression.getClass())\" check is delegated to a separate method that you can override here.", "author": "aaime", "createdAt": "2020-06-22T14:49:13Z", "path": "modules/plugin/jdbc/jdbc-postgis/src/main/java/org/geotools/data/postgis/PostGISDialect.java", "diffHunk": "@@ -1490,4 +1499,42 @@ protected String getEstimatedExtentFunction() {\n                 ? \"ST_EstimatedExtent\"\n                 : \"ST_Estimated_Extent\";\n     }\n+\n+    public Filter[] splitFilter(Filter filter, SimpleFeatureType schema) {\n+        PostPreProcessFilterSplittingVisitor splitter =\n+                new PostPreProcessFilterSplittingVisitor(\n+                        dataStore.getFilterCapabilities(), schema, null) {\n+                    private FilterFactory2 ff = CommonFactoryFinder.getFilterFactory2();\n+\n+                    @Override\n+                    public Object visit(Function expression, Object notUsed) {\n+                        if (expression instanceof JsonPointerFunction) {\n+                            // takes the json pointer param to check if\n+                            // can be encoded\n+                            Expression param = expression.getParameters().get(1);\n+                            if ((expression.getParameters().get(1) instanceof Literal))\n+                                // can encode\n+                                fcs.addType(JsonPointerFunction.class);", "originalCommit": "71423e684efbf214370745287fad42b2ec8d1ae3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAxMzE5MQ==", "url": "https://github.com/geotools/geotools/pull/2982#discussion_r445013191", "bodyText": "fixed", "author": "taba90", "createdAt": "2020-06-24T16:16:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYxNTc4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYxNjEwMg==", "url": "https://github.com/geotools/geotools/pull/2982#discussion_r443616102", "bodyText": "The filter to sql will fail if the expression is not a Literal though (class cast exception).", "author": "aaime", "createdAt": "2020-06-22T14:49:40Z", "path": "modules/plugin/jdbc/jdbc-postgis/src/main/java/org/geotools/data/postgis/PostGISDialect.java", "diffHunk": "@@ -1490,4 +1499,42 @@ protected String getEstimatedExtentFunction() {\n                 ? \"ST_EstimatedExtent\"\n                 : \"ST_Estimated_Extent\";\n     }\n+\n+    public Filter[] splitFilter(Filter filter, SimpleFeatureType schema) {\n+        PostPreProcessFilterSplittingVisitor splitter =\n+                new PostPreProcessFilterSplittingVisitor(\n+                        dataStore.getFilterCapabilities(), schema, null) {\n+                    private FilterFactory2 ff = CommonFactoryFinder.getFilterFactory2();\n+\n+                    @Override\n+                    public Object visit(Function expression, Object notUsed) {\n+                        if (expression instanceof JsonPointerFunction) {\n+                            // takes the json pointer param to check if\n+                            // can be encoded\n+                            Expression param = expression.getParameters().get(1);\n+                            if ((expression.getParameters().get(1) instanceof Literal))\n+                                // can encode\n+                                fcs.addType(JsonPointerFunction.class);\n+                            else {\n+                                FilterAttributeExtractor extractor = new FilterAttributeExtractor();", "originalCommit": "71423e684efbf214370745287fad42b2ec8d1ae3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI3MDk5OQ==", "url": "https://github.com/geotools/geotools/pull/2982#discussion_r444270999", "bodyText": "Never mind, I see you are replacing it with a Literal... however, you should not be modifying the filter here, unless you are sure it has been through a copy first, otherwise you risk changing some cached state (e.g., the structure of a in memory SLD representation, or some such).", "author": "aaime", "createdAt": "2020-06-23T14:32:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYxNjEwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAxNDY0MA==", "url": "https://github.com/geotools/geotools/pull/2982#discussion_r445014640", "bodyText": "Thanks for your suggestion @aaime fixed", "author": "taba90", "createdAt": "2020-06-24T16:18:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYxNjEwMg=="}], "type": "inlineReview"}, {"oid": "19d172a88948f1a4e5e79148e7863f7bdb45a833", "url": "https://github.com/geotools/geotools/commit/19d172a88948f1a4e5e79148e7863f7bdb45a833", "message": "proper handling of capabilities + defensive filter copy before manipulating it", "committedDate": "2020-06-24T16:14:58Z", "type": "commit"}, {"oid": "da7eabbd362ec0b1bffeb2f3776128aa8f4293b3", "url": "https://github.com/geotools/geotools/commit/da7eabbd362ec0b1bffeb2f3776128aa8f4293b3", "message": "check for JsonPointer function support inside support method", "committedDate": "2020-06-29T10:45:05Z", "type": "commit"}]}