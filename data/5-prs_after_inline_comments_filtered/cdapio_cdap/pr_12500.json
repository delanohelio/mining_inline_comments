{"pr_number": 12500, "pr_title": "Support Instance URI prefix for CLI by removing host:port assumption", "pr_createdAt": "2020-07-24T20:53:47Z", "pr_url": "https://github.com/cdapio/cdap/pull/12500", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5MjcwOA==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r460292708", "bodyText": "revert back to previous. Same for others.", "author": "pandyajay10", "createdAt": "2020-07-24T21:18:47Z", "path": "cdap-client/src/main/java/io/cdap/cdap/client/ApplicationClient.java", "diffHunk": "@@ -94,26 +94,27 @@ public ApplicationClient(ClientConfig config) {\n    *\n    * @param namespace the namespace to list applications from\n    * @return list of {@link ApplicationRecord ApplicationRecords}.\n-   * @throws IOException if a network error occurred", "originalCommit": "4c2b244a1b7f66b1aa9b71c954c80c2727a28b77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5MzQ4OA==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r460293488", "bodyText": "here and other places same.", "author": "pandyajay10", "createdAt": "2020-07-24T21:21:01Z", "path": "cdap-client/src/main/java/io/cdap/cdap/client/ApplicationClient.java", "diffHunk": "@@ -438,9 +444,9 @@ public void deploy(NamespaceId namespace, File jarFile,\n   /**\n    * Creates an application with a version using an existing artifact.\n    *\n-   * @param appId the id of the application to add", "originalCommit": "4c2b244a1b7f66b1aa9b71c954c80c2727a28b77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5NDE2Ng==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r460294166", "bodyText": "Seems like the whole file got formatted, will resubmit this file.", "author": "greeshmaswaminathan", "createdAt": "2020-07-24T21:23:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5MzQ4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MTg3OA==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r460341878", "bodyText": "Done", "author": "greeshmaswaminathan", "createdAt": "2020-07-25T00:43:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5MzQ4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5NjcxMA==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r460296710", "bodyText": "do we need setUri?", "author": "pandyajay10", "createdAt": "2020-07-24T21:30:29Z", "path": "cdap-cli/src/main/java/io/cdap/cdap/cli/LaunchOptions.java", "diffHunk": "@@ -67,12 +84,19 @@ public static Builder builder() {\n     private boolean autoconnect;\n     private boolean debug;\n     private boolean verifySSL;\n+    private String namespace;\n+    private String instanceURI;\n \n     public Builder setUri(String uri) {", "originalCommit": "4c2b244a1b7f66b1aa9b71c954c80c2727a28b77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMyODMyMw==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r460328323", "bodyText": "setUri is required for -u option. Based on which field (uri/instanceURI is populated different action is taken by the parser)", "author": "greeshmaswaminathan", "createdAt": "2020-07-24T23:25:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5NjcxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5Nzg2NA==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r460297864", "bodyText": "A better error message? May be something like \"Check connection parameters and/or accesstoken\". Would invalid accesstoken throw IOException? Or it will be for invalid access token file?", "author": "pandyajay10", "createdAt": "2020-07-24T21:33:45Z", "path": "cdap-cli/src/main/java/io/cdap/cdap/cli/CLIConfig.java", "diffHunk": "@@ -183,7 +183,7 @@ private void checkConnection(ClientConfig baseClientConfig, ConnectionConfig con\n     try {\n       metaClient.ping();\n     } catch (IOException e) {\n-      throw new IOException(\"Check hostname and/or port\", e);\n+      throw new IOException(\"Check hostname and/or port and/or accesstoken\", e);", "originalCommit": "4c2b244a1b7f66b1aa9b71c954c80c2727a28b77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMwNDMxMQ==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r460304311", "bodyText": "Depending on whether it is sandbox or not different response comes back from the server which is caught in 'MetaClient' and thrown as IO exception. Will change the error message.", "author": "greeshmaswaminathan", "createdAt": "2020-07-24T21:53:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5Nzg2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MTkyMA==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r460341920", "bodyText": "Done.", "author": "greeshmaswaminathan", "createdAt": "2020-07-25T00:44:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5Nzg2NA=="}], "type": "inlineReview"}, {"oid": "6a391481548df11239774f6a336a2f8f90004d8c", "url": "https://github.com/cdapio/cdap/commit/6a391481548df11239774f6a336a2f8f90004d8c", "message": "Support Instance URI prefix for CLI by removing host:port assumption", "committedDate": "2020-07-25T00:29:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMTUxMg==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r460431512", "bodyText": "Instead of defining test methods as static and have other classes calling it, it is better to define this class as a Base class with @Test method and have sub-classes to just alter the behavior instead of repeating all the test methods. You can have all the parameters to test methods defined as protected abstract method and let the sub-classes to implement them and return instances needed by the test methods.", "author": "chtyim", "createdAt": "2020-07-25T18:32:21Z", "path": "cdap-cli-tests/src/test/java/io/cdap/cdap/cli/CLICommonTests.java", "diffHunk": "@@ -0,0 +1,919 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.cli;\n+\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.base.Function;\n+import com.google.common.base.Joiner;\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import com.google.common.io.Files;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.gson.Gson;\n+import io.cdap.cdap.ConfigTestApp;\n+import io.cdap.cdap.StandaloneTester;\n+import io.cdap.cdap.api.artifact.ArtifactScope;\n+import io.cdap.cdap.api.metadata.MetadataEntity;\n+import io.cdap.cdap.cli.command.NamespaceCommandUtils;\n+import io.cdap.cdap.cli.command.metadata.MetadataCommandHelper;\n+import io.cdap.cdap.cli.util.RowMaker;\n+import io.cdap.cdap.cli.util.table.Table;\n+import io.cdap.cdap.client.DatasetTypeClient;\n+import io.cdap.cdap.client.NamespaceClient;\n+import io.cdap.cdap.client.ProgramClient;\n+import io.cdap.cdap.client.QueryClient;\n+import io.cdap.cdap.client.app.FakeApp;\n+import io.cdap.cdap.client.app.FakeDataset;\n+import io.cdap.cdap.client.app.FakePlugin;\n+import io.cdap.cdap.client.app.FakeSpark;\n+import io.cdap.cdap.client.app.FakeWorkflow;\n+import io.cdap.cdap.client.app.PingService;\n+import io.cdap.cdap.client.app.PluginConfig;\n+import io.cdap.cdap.client.app.PrefixedEchoHandler;\n+import io.cdap.cdap.common.DatasetTypeNotFoundException;\n+import io.cdap.cdap.common.io.Locations;\n+import io.cdap.cdap.common.test.AppJarHelper;\n+import io.cdap.cdap.common.utils.Tasks;\n+import io.cdap.cdap.explore.client.ExploreExecutionResult;\n+import io.cdap.cdap.proto.DatasetTypeMeta;\n+import io.cdap.cdap.proto.NamespaceMeta;\n+import io.cdap.cdap.proto.ProgramRunStatus;\n+import io.cdap.cdap.proto.ProgramStatus;\n+import io.cdap.cdap.proto.QueryStatus;\n+import io.cdap.cdap.proto.RunRecord;\n+import io.cdap.cdap.proto.WorkflowTokenDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.ArtifactId;\n+import io.cdap.cdap.proto.id.DatasetId;\n+import io.cdap.cdap.proto.id.DatasetTypeId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.proto.id.ServiceId;\n+import io.cdap.common.cli.CLI;\n+import org.apache.twill.filesystem.LocalLocationFactory;\n+import org.apache.twill.filesystem.Location;\n+import org.apache.twill.filesystem.LocationFactory;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedWriter;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+public class CLICommonTests {", "originalCommit": "6a391481548df11239774f6a336a2f8f90004d8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5MjQ3Ng==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461192476", "bodyText": "Done", "author": "greeshmaswaminathan", "createdAt": "2020-07-27T21:53:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMTUxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMTc2NA==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r460431764", "bodyText": "So access token is always needed now??", "author": "chtyim", "createdAt": "2020-07-25T18:35:11Z", "path": "cdap-cli/src/main/java/io/cdap/cdap/cli/CLIConfig.java", "diffHunk": "@@ -196,10 +196,6 @@ private UserAccessToken acquireAccessToken(\n     ClientConfig clientConfig, ConnectionConfig connectionInfo, PrintStream output,\n     boolean debug) throws IOException, UnauthorizedException {\n \n-    if (!isAuthenticationEnabled(connectionInfo)) {\n-      return null;\n-    }\n-\n     try {\n       UserAccessToken savedToken = getSavedAccessToken(connectionInfo.getHostname());", "originalCommit": "6a391481548df11239774f6a336a2f8f90004d8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE1NTU1Nw==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461155557", "bodyText": "If the access token is available in a file, it is used before checking for authentication enabled. If not, check for authentication enabled is made. The authentication enabled check looks for a HTTP_UNAUTHORIZED (401) response which is not returned if there is a redirect for authentication.", "author": "greeshmaswaminathan", "createdAt": "2020-07-27T20:39:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMTc2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI2NzgxMw==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461267813", "bodyText": "I see.. this throwing and exception and then catching it back in the same block and falling through is not very good code. Also, when savedToken is null, do we check for connection as well?", "author": "chtyim", "createdAt": "2020-07-28T01:44:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMTc2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3MDk4Nw==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461270987", "bodyText": "Oh I see the throwing and catching in the same block. Will clean that up. If savedToken is null, isAuthenticationEnabled is tried next.", "author": "greeshmaswaminathan", "createdAt": "2020-07-28T01:55:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMTc2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMwMDU2Ng==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461300566", "bodyText": "Refactored the code", "author": "greeshmaswaminathan", "createdAt": "2020-07-28T03:47:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMTc2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMTg1NA==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r460431854", "bodyText": "annotate with @Nullable since null value is being passed for this parameter.", "author": "chtyim", "createdAt": "2020-07-25T18:36:10Z", "path": "cdap-cli/src/main/java/io/cdap/cdap/cli/CLIConnectionConfig.java", "diffHunk": "@@ -42,8 +43,13 @@ public CLIConnectionConfig(CLIConnectionConfig connectionConfig, NamespaceId nam\n     this.namespace = namespace;\n   }\n \n-  public CLIConnectionConfig(NamespaceId namespace, String hostname, int port, boolean sslEnabled) {\n-    super(hostname, port, sslEnabled);\n+  public CLIConnectionConfig(NamespaceId namespace, String hostname, Integer port, boolean sslEnabled) {\n+    this(namespace, hostname, port, sslEnabled, null);\n+  }\n+\n+  public CLIConnectionConfig(NamespaceId namespace, String hostname, Integer port, boolean sslEnabled,\n+                             String apiPath) {", "originalCommit": "6a391481548df11239774f6a336a2f8f90004d8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5MjU0MA==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461192540", "bodyText": "Done", "author": "greeshmaswaminathan", "createdAt": "2020-07-27T21:53:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMTg1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMTkwOQ==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r460431909", "bodyText": "Overriding equals requires overriding hashCode too.", "author": "chtyim", "createdAt": "2020-07-25T18:36:46Z", "path": "cdap-cli/src/main/java/io/cdap/cdap/cli/CLIConnectionConfig.java", "diffHunk": "@@ -58,8 +64,23 @@ public String getUsername() {\n \n   @Override\n   public URI getURI() {\n-    return URI.create(String.format(\"%s://%s%s:%d/%s\", super.isSSLEnabled() ? \"https\" : \"http\",\n-                                    username == null ? \"\" : username + \"@\",\n-                                    super.getHostname(), super.getPort(), namespace.getNamespace()));\n+    return URI.create(String.format(\"%s://%s%s/%s%s\", super.isSSLEnabled() ? \"https\" : \"http\",\n+                                    (username == null || username.isEmpty()) ? \"\" : username + \"@\",\n+                                    getFullHost(), getApiPath() == null ? \"\" : getApiPath(),\n+                                    namespace.getNamespace()));\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj) {", "originalCommit": "6a391481548df11239774f6a336a2f8f90004d8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5MjU4OA==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461192588", "bodyText": "Done", "author": "greeshmaswaminathan", "createdAt": "2020-07-27T21:53:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMTkwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMTk5NQ==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r460431995", "bodyText": "There is no need to have or for the format. The format is just:\nhttp[s]://<hostname>[:<port>][/<path>]", "author": "chtyim", "createdAt": "2020-07-25T18:37:57Z", "path": "cdap-cli/src/main/java/io/cdap/cdap/cli/CLIMain.java", "diffHunk": "@@ -81,10 +83,19 @@\n     \"h\", \"help\", false, \"Print the usage message.\");\n \n   private static final Option URI_OPTION = new Option(\n-    \"u\", \"uri\", true, \"CDAP instance URI to interact with in\" +\n+    \"u\", \"uri\", true, \"(Deprecated. Please use option l instead). CDAP instance URI to interact with in\" +\n     \" the format \\\"[http[s]://]<hostname>[:<port>[/<namespace>]]\\\".\" +\n     \" Defaults to \\\"\" + getDefaultURI().toString() + \"\\\".\");\n \n+  private static final Option LINK_OPTION = new Option(\n+    \"l\", \"link\", true, \"CDAP instance URI to interact with in\" +\n+    \" the format \\\"[http[s]://]<hostname>[:<port>]\\\" or \\\"[https[s]://]<hostname>[/<apipath>]\\\".\" +", "originalCommit": "6a391481548df11239774f6a336a2f8f90004d8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5MjYyOQ==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461192629", "bodyText": "Done", "author": "greeshmaswaminathan", "createdAt": "2020-07-27T21:53:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMTk5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMjAyNw==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r460432027", "bodyText": "annotate with @Nullable", "author": "chtyim", "createdAt": "2020-07-25T18:38:28Z", "path": "cdap-cli/src/main/java/io/cdap/cdap/cli/LaunchOptions.java", "diffHunk": "@@ -31,18 +31,31 @@\n   private final boolean autoconnect;\n   private final boolean debug;\n   private final boolean verifySSL;\n+  private final String namespace;\n+  private final String instanceURI;\n \n   public LaunchOptions(String uri, boolean autoconnect, boolean debug, boolean verifySSL) {\n+    this(uri, autoconnect, debug, verifySSL, null, null);\n+  }\n+\n+  public LaunchOptions(String uri, boolean autoconnect, boolean debug, boolean verifySSL,\n+                       String namespace, String instanceURI) {", "originalCommit": "6a391481548df11239774f6a336a2f8f90004d8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5MjY3Ng==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461192676", "bodyText": "Done", "author": "greeshmaswaminathan", "createdAt": "2020-07-27T21:54:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMjAyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMjIyOQ==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r460432229", "bodyText": "You can combine the withBody and build to\nHttpRequest request = HttpRequest.post(url).withBody(\"\").build();", "author": "chtyim", "createdAt": "2020-07-25T18:40:46Z", "path": "cdap-client/src/main/java/io/cdap/cdap/client/DatasetClient.java", "diffHunk": "@@ -240,7 +240,10 @@ public void truncate(DatasetId instance)\n     throws IOException, UnauthenticatedException, UnauthorizedException {\n     URL url = config.resolveNamespacedURLV3(instance.getParent(),\n                                             String.format(\"data/datasets/%s/admin/truncate\", instance.getDataset()));\n-    restClient.execute(HttpMethod.POST, url, config.getAccessToken());\n+    HttpRequest.Builder request = HttpRequest.post(url);\n+    //Important to add body even if runtimeArgs is null to avoid 411 error for Http POST\n+    request.withBody(\"\");", "originalCommit": "6a391481548df11239774f6a336a2f8f90004d8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5MjczMQ==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461192731", "bodyText": "Done", "author": "greeshmaswaminathan", "createdAt": "2020-07-27T21:54:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMjIyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMjI3OQ==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r460432279", "bodyText": "Same as above. Combine into a single line would make this more readable.", "author": "chtyim", "createdAt": "2020-07-25T18:41:28Z", "path": "cdap-client/src/main/java/io/cdap/cdap/client/MetricsClient.java", "diffHunk": "@@ -87,7 +87,10 @@ public MetricsClient(ClientConfig config) {\n     addTags(tags, queryParts);\n \n     URL url = config.resolveURLV3(String.format(\"metrics/search?%s\", Joiner.on(\"&\").join(queryParts)));\n-    HttpResponse response = restClient.execute(HttpMethod.POST, url, config.getAccessToken());\n+    HttpRequest.Builder request = HttpRequest.post(url);\n+    //Important to add body even if runtimeArgs is null to avoid 411 error for Http POST\n+    request.withBody(\"\");", "originalCommit": "6a391481548df11239774f6a336a2f8f90004d8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5MjgxMA==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461192810", "bodyText": "Done", "author": "greeshmaswaminathan", "createdAt": "2020-07-27T21:54:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMjI3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMjM1Nw==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r460432357", "bodyText": "Modifying equals requires modifying hashCode as well.", "author": "chtyim", "createdAt": "2020-07-25T18:42:15Z", "path": "cdap-client/src/main/java/io/cdap/cdap/client/config/ConnectionConfig.java", "diffHunk": "@@ -113,7 +128,8 @@ public boolean equals(Object obj) {\n     final ConnectionConfig other = (ConnectionConfig) obj;\n     return Objects.equal(this.hostname, other.hostname) &&\n       Objects.equal(this.port, other.port) &&\n-      Objects.equal(this.sslEnabled, other.sslEnabled);\n+      Objects.equal(this.sslEnabled, other.sslEnabled) &&", "originalCommit": "6a391481548df11239774f6a336a2f8f90004d8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5Mjg5Nw==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461192897", "bodyText": "Done", "author": "greeshmaswaminathan", "createdAt": "2020-07-27T21:54:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMjM1Nw=="}], "type": "inlineReview"}, {"oid": "733ce1e14986910151a119cea953fcacfebe4cf8", "url": "https://github.com/cdapio/cdap/commit/733ce1e14986910151a119cea953fcacfebe4cf8", "message": "Support Instance URI prefix for CLI by removing host:port assumption", "committedDate": "2020-07-27T21:38:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNTUxOA==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461225518", "bodyText": "Try to keep the same alignment with the \"String.fornat(\" block.. same for everywhere else.", "author": "pandyajay10", "createdAt": "2020-07-27T23:21:53Z", "path": "cdap-cli-tests/src/test/java/io/cdap/cdap/cli/AuthorizationCLITest.java", "diffHunk": "@@ -141,75 +141,79 @@ public void testAuthorizationCLI() throws Exception {\n \n     NamespaceId namespaceId = new NamespaceId(\"ns1\");\n \n-    testCommandOutputContains(cli, String.format(\"create namespace %s\", namespaceId.getNamespace()),\n+    CLITestBase.testCommandOutputContains(cli, String.format(\"create namespace %s\", namespaceId.getNamespace()),\n                               String.format(\"Namespace '%s' created successfully\", namespaceId.getNamespace()));\n \n     // test creating role\n-    testCommandOutputContains(cli, \"create role \" + role.getName(), String.format(\"Successfully created role '%s'\",\n-                                                                                  role.getName()));\n+    CLITestBase.testCommandOutputContains(cli, \"create role \" + role.getName(),\n+                                          String.format(\"Successfully created role '%s'\",\n+                                                        role.getName()));\n \n     // test add role to principal\n-    testCommandOutputContains(cli, String.format(\"add role %s to %s %s\", role.getName(), principal.getType(),\n-                                                 principal.getName()),\n-                              String.format(\"Successfully added role '%s' to '%s' '%s'\", role.getName(),\n-                                            principal.getType(), principal.getName()));\n+    CLITestBase.testCommandOutputContains(cli, String.format(\"add role %s to %s %s\", role.getName(),\n+                                                             principal.getType(),\n+                                                             principal.getName()),\n+                                          String.format(\"Successfully added role '%s' to '%s' '%s'\", role.getName(),\n+                                                        principal.getType(), principal.getName()));\n \n     // test listing all roles\n-    String output = getCommandOutput(cli, \"list roles\");\n+    String output = CLITestBase.getCommandOutput(cli, \"list roles\");\n     List<String> lines = Arrays.asList(output.split(\"\\\\r?\\\\n\"));\n     Assert.assertEquals(2, lines.size());\n     Assert.assertEquals(role.getName(), lines.get(1)); // 0 is just the table headers\n \n     // test listing roles for a principal\n-    output = getCommandOutput(cli, String.format(\"list roles for %s %s\", principal.getType(), principal.getName()));\n+    output = CLITestBase.getCommandOutput(cli, String.format(\"list roles for %s %s\", principal.getType(),\n+                                                             principal.getName()));\n     lines = Arrays.asList(output.split(\"\\\\r?\\\\n\"));\n     Assert.assertEquals(2, lines.size());\n     Assert.assertEquals(role.getName(), lines.get(1));\n \n     // test grant action. also tests case insensitivity of Action and Principal.PrincipalType\n-    testCommandOutputContains(cli, String.format(\"grant actions %s on entity %s to %s %s\",\n+    CLITestBase.testCommandOutputContains(cli, String.format(\"grant actions %s on entity %s to %s %s\",\n                                                  Action.READ.name().toLowerCase(), namespaceId.toString(),", "originalCommit": "733ce1e14986910151a119cea953fcacfebe4cf8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIzMTE0Mw==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461231143", "bodyText": "Is there a setting for Intellij to autoformat on save?", "author": "greeshmaswaminathan", "createdAt": "2020-07-27T23:39:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNTUxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI2NzE2Ng==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461267166", "bodyText": "Reformatted with CDAP settings", "author": "greeshmaswaminathan", "createdAt": "2020-07-28T01:42:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNTUxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIzMDg0Ng==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461230846", "bodyText": "remove?", "author": "pandyajay10", "createdAt": "2020-07-27T23:38:37Z", "path": "cdap-cli/src/main/java/io/cdap/cdap/cli/util/InstanceURIParser.java", "diffHunk": "@@ -26,6 +26,7 @@\n import java.net.URI;\n \n /**\n+ *", "originalCommit": "733ce1e14986910151a119cea953fcacfebe4cf8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIzMTA2NQ==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461231065", "bodyText": "unintended format", "author": "pandyajay10", "createdAt": "2020-07-27T23:39:14Z", "path": "cdap-cli/src/main/java/io/cdap/cdap/cli/util/InstanceURIParser.java", "diffHunk": "@@ -40,14 +41,12 @@ public InstanceURIParser(CConfiguration cConf) {\n   }\n \n   public CLIConnectionConfig parse(String uriString) {\n-    if (!uriString.contains(\"://\")) {\n-      uriString = DEFAULT_PROTOCOL + \"://\" + uriString;\n-    }\n+    uriString = addScheme(uriString);\n \n     URI uri = URI.create(uriString);\n     NamespaceId namespace =\n       (uri.getPath() == null || uri.getPath().isEmpty() || \"/\".equals(uri.getPath())) ?\n-      NamespaceId.DEFAULT : new NamespaceId(uri.getPath().substring(1));\n+        NamespaceId.DEFAULT : new NamespaceId(uri.getPath().substring(1));", "originalCommit": "733ce1e14986910151a119cea953fcacfebe4cf8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0959cff2cb44f8c7287ef9b51eed134043f71869", "url": "https://github.com/cdapio/cdap/commit/0959cff2cb44f8c7287ef9b51eed134043f71869", "message": "Support Instance URI prefix for CLI by removing host:port assumption", "committedDate": "2020-07-28T01:29:27Z", "type": "forcePushed"}, {"oid": "fdcffe8ef38845012afec3bbc3bea435a312c580", "url": "https://github.com/cdapio/cdap/commit/fdcffe8ef38845012afec3bbc3bea435a312c580", "message": "Support Instance URI prefix for CLI by removing host:port assumption", "committedDate": "2020-07-28T03:42:05Z", "type": "forcePushed"}, {"oid": "c428bd78f8af6ba21f8b9841327b976a5e1001de", "url": "https://github.com/cdapio/cdap/commit/c428bd78f8af6ba21f8b9841327b976a5e1001de", "message": "Support Instance URI prefix for CLI by removing host:port assumption", "committedDate": "2020-07-28T04:01:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQyODk5MA==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461428990", "bodyText": "Use the java.util.Objects instead of the guava one.", "author": "chtyim", "createdAt": "2020-07-28T09:01:50Z", "path": "cdap-cli/src/main/java/io/cdap/cdap/cli/CLIConnectionConfig.java", "diffHunk": "@@ -16,6 +16,7 @@\n \n package io.cdap.cdap.cli;\n \n+import com.google.common.base.Objects;", "originalCommit": "c428bd78f8af6ba21f8b9841327b976a5e1001de", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc2NDc5MA==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461764790", "bodyText": "\"Please use option --link instead.\"", "author": "pandyajay10", "createdAt": "2020-07-28T17:51:56Z", "path": "cdap-cli/src/main/java/io/cdap/cdap/cli/CLIMain.java", "diffHunk": "@@ -81,10 +83,19 @@\n     \"h\", \"help\", false, \"Print the usage message.\");\n \n   private static final Option URI_OPTION = new Option(\n-    \"u\", \"uri\", true, \"CDAP instance URI to interact with in\" +\n+    \"u\", \"uri\", true, \"(Deprecated. Please use option l instead). CDAP instance URI to interact with in\" +", "originalCommit": "c428bd78f8af6ba21f8b9841327b976a5e1001de", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc2NjE1OA==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461766158", "bodyText": "How does it differ from ConnectCommand? May be a bit more information like \"Connects to a CDAP instance using given URI. URI can be in format of ...\"", "author": "pandyajay10", "createdAt": "2020-07-28T17:54:02Z", "path": "cdap-cli/src/main/java/io/cdap/cdap/cli/command/ConnectLinkCommand.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.cli.command;\n+\n+import io.cdap.cdap.cli.ArgumentName;\n+import io.cdap.cdap.cli.CLIConfig;\n+import io.cdap.cdap.cli.CLIConnectionConfig;\n+import io.cdap.cdap.cli.LaunchOptions;\n+import io.cdap.cdap.cli.util.InstanceURIParser;\n+import io.cdap.common.cli.Arguments;\n+import io.cdap.common.cli.Command;\n+\n+import java.io.PrintStream;\n+import javax.inject.Inject;\n+\n+/**\n+ * Connects to a CDAP instance.", "originalCommit": "c428bd78f8af6ba21f8b9841327b976a5e1001de", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc2NjU0Ng==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461766546", "bodyText": "Is ConnectCommand deprecated now? If so, please mention that in the Class comment for it.", "author": "pandyajay10", "createdAt": "2020-07-28T17:54:37Z", "path": "cdap-cli/src/main/java/io/cdap/cdap/cli/commandset/GeneralCommands.java", "diffHunk": "@@ -42,6 +43,7 @@ public GeneralCommands(Injector injector) {\n         .add(injector.getInstance(ExitCommand.class))\n         .add(injector.getInstance(QuitCommand.class))\n         .add(injector.getInstance(ConnectCommand.class))", "originalCommit": "c428bd78f8af6ba21f8b9841327b976a5e1001de", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc2NzM1OQ==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461767359", "bodyText": "mention deprecation in Class comment too for readability. Also mention to use ConnectLinkCommand instead in the class comment.", "author": "pandyajay10", "createdAt": "2020-07-28T17:55:55Z", "path": "cdap-cli/src/main/java/io/cdap/cdap/cli/command/ConnectCommand.java", "diffHunk": "@@ -69,6 +70,6 @@ public String getPattern() {\n \n   @Override\n   public String getDescription() {\n-    return \"Connects to a CDAP instance\";\n+    return \"Connects to a CDAP instance (Deprecated, use connect-link instead)\";", "originalCommit": "c428bd78f8af6ba21f8b9841327b976a5e1001de", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc2ODI3Mw==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461768273", "bodyText": "Required to add body ...", "author": "pandyajay10", "createdAt": "2020-07-28T17:57:23Z", "path": "cdap-client/src/main/java/io/cdap/cdap/client/ProgramClient.java", "diffHunk": "@@ -123,11 +123,8 @@ public void start(ProgramId program, boolean debug, @Nullable Map<String, String\n     String path = String.format(\"apps/%s/versions/%s/%s/%s/%s\", program.getApplication(), program.getVersion(),\n                                 program.getType().getCategoryName(), program.getProgram(), action);\n     URL url = config.resolveNamespacedURLV3(program.getNamespaceId(), path);\n-    HttpRequest.Builder request = HttpRequest.post(url);\n-    if (runtimeArgs != null) {\n-      request.withBody(GSON.toJson(runtimeArgs));\n-    }\n-\n+    //Important to add body even if runtimeArgs is null to avoid 411 error for Http POST", "originalCommit": "c428bd78f8af6ba21f8b9841327b976a5e1001de", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc2ODQ0NQ==", "url": "https://github.com/cdapio/cdap/pull/12500#discussion_r461768445", "bodyText": "Required to add body ...", "author": "pandyajay10", "createdAt": "2020-07-28T17:57:37Z", "path": "cdap-client/src/main/java/io/cdap/cdap/client/ProgramClient.java", "diffHunk": "@@ -220,7 +217,9 @@ public void stop(ProgramId programId) throws IOException, ProgramNotFoundExcepti\n     String path = String.format(\"apps/%s/versions/%s/%s/%s/stop\", programId.getApplication(), programId.getVersion(),\n                                 programId.getType().getCategoryName(), programId.getProgram());\n     URL url = config.resolveNamespacedURLV3(programId.getNamespaceId(), path);\n-    HttpResponse response = restClient.execute(HttpMethod.POST, url, config.getAccessToken(),\n+    //Important to add body even if runtimeArgs is null to avoid 411 error for Http POST", "originalCommit": "c428bd78f8af6ba21f8b9841327b976a5e1001de", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e6fba8d139253ad3afffe9e0d2b57c21a07b808e", "url": "https://github.com/cdapio/cdap/commit/e6fba8d139253ad3afffe9e0d2b57c21a07b808e", "message": "Support Instance URI prefix for CLI by removing host:port assumption", "committedDate": "2020-07-29T16:22:50Z", "type": "commit"}, {"oid": "e6fba8d139253ad3afffe9e0d2b57c21a07b808e", "url": "https://github.com/cdapio/cdap/commit/e6fba8d139253ad3afffe9e0d2b57c21a07b808e", "message": "Support Instance URI prefix for CLI by removing host:port assumption", "committedDate": "2020-07-29T16:22:50Z", "type": "forcePushed"}]}