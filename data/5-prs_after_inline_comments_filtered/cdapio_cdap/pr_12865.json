{"pr_number": 12865, "pr_title": "(CDAP-17415) Speedup job launching by uploading files in parallel", "pr_createdAt": "2020-11-20T20:22:40Z", "pr_url": "https://github.com/cdapio/cdap/pull/12865", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk1NTk0OA==", "url": "https://github.com/cdapio/cdap/pull/12865#discussion_r527955948", "bodyText": "Typo here", "author": "fernst", "createdAt": "2020-11-20T20:34:18Z", "path": "cdap-spark-core-base/src/main/java/io/cdap/cdap/app/runtime/spark/classloader/SparkClassRewriter.java", "diffHunk": "@@ -812,7 +812,7 @@ public MethodVisitor visitMethod(int access, String name, String desc, String si\n         //   completion.completed();\n         // } catch (Throwable t) {\n         //   completion.completedWithException(t);\n-        //   // Wrap it with RuntimeException to prevent SparkSubmit calling System.exit in local mode\n+        //   // Wrap it with RuntimeException to preven SparkSubmit calling System.exit in local mode", "originalCommit": "ea86c28865b6a6ccfb3579225b30b13903646c1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk2MjU3Mg==", "url": "https://github.com/cdapio/cdap/pull/12865#discussion_r527962572", "bodyText": "fixup", "author": "chtyim", "createdAt": "2020-11-20T20:49:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk1NTk0OA=="}], "type": "inlineReview"}, {"oid": "3a84e05c556abe6985ff93f8f0d67f5466b017d3", "url": "https://github.com/cdapio/cdap/commit/3a84e05c556abe6985ff93f8f0d67f5466b017d3", "message": "(CDAP-17415) Speedup job launching on Dataproc\n\n- Not to recompress jar files when building archive\n- Upload files in parallel", "committedDate": "2020-11-20T20:48:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk1OTMwNg==", "url": "https://github.com/cdapio/cdap/pull/12865#discussion_r527959306", "bodyText": "Is it safe to have an unbounded queue? Any chance we can run into OOM with it?", "author": "tivv", "createdAt": "2020-11-20T20:42:06Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/provision/ProvisioningService.java", "diffHunk": "@@ -154,10 +158,19 @@\n   @Override\n   protected void startUp() throws Exception {\n     LOG.info(\"Starting {}\", getClass().getSimpleName());\n+\n+    this.taskExecutor = new KeyedExecutor<>(\n+      Executors.newScheduledThreadPool(cConf.getInt(Constants.Provisioner.EXECUTOR_THREADS),\n+                                       Threads.createDaemonThreadFactory(\"provisioning-task-%d\")));\n+\n+    int maxPoolSize = cConf.getInt(Constants.Provisioner.CONTEXT_EXECUTOR_THREADS);\n+    ThreadPoolExecutor contextExecutor = new ThreadPoolExecutor(\n+      maxPoolSize, maxPoolSize, 60, TimeUnit.SECONDS, new LinkedBlockingQueue<>(),", "originalCommit": "ea86c28865b6a6ccfb3579225b30b13903646c1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk3MDg4NQ==", "url": "https://github.com/cdapio/cdap/pull/12865#discussion_r527970885", "bodyText": "We typically use unbounded queue for executor with a thread pool (same as the default in Java Executors). If this queue even gets OOM, we are in bigger problem than the OOM itself.", "author": "chtyim", "createdAt": "2020-11-20T21:09:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk1OTMwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk1OTk0OQ==", "url": "https://github.com/cdapio/cdap/pull/12865#discussion_r527959949", "bodyText": "Do we want to catch Throwable? What is our strategy on handling something like StackOverflowError here?", "author": "tivv", "createdAt": "2020-11-20T20:43:36Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/provision/DefaultProvisionerContext.java", "diffHunk": "@@ -125,4 +132,18 @@ public ProvisionerMetrics getMetrics(Map<String, String> context) {\n     tags.put(Constants.Metrics.Tag.PROVISIONER, provisionerName);\n     return new DefaultProvisionerMetrics(metricsCollectionService.getContext(tags));\n   }\n+\n+  @Override\n+  public <T> CompletionStage<T> execute(Callable<T> callable) {\n+    CompletableFuture<T> result = new CompletableFuture<>();\n+\n+    executor.execute(() -> {\n+      try {\n+        result.complete(callable.call());\n+      } catch (Exception e) {", "originalCommit": "ea86c28865b6a6ccfb3579225b30b13903646c1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk2Mzg4Mg==", "url": "https://github.com/cdapio/cdap/pull/12865#discussion_r527963882", "bodyText": "We can also use standard wrapping approach with something like this:\nCompletableFuture.supplyAsync(executor,  () -> {\n try {\n  result.complete(callable.call());\n } catch (Exception e) {\n  throw new CompletionException(e);\n }\n});\n\nIt would produce same result, but we would rely on JDK to ensure any exit from function will complete the future without explicit Throwable catching.", "author": "tivv", "createdAt": "2020-11-20T20:52:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk1OTk0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk3MjQ0NA==", "url": "https://github.com/cdapio/cdap/pull/12865#discussion_r527972444", "bodyText": "Change to catch Throwable is simpler. The supplyAsync doesn't really buy us anything in this case.", "author": "chtyim", "createdAt": "2020-11-20T21:13:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk1OTk0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk3MjcyNA==", "url": "https://github.com/cdapio/cdap/pull/12865#discussion_r527972724", "bodyText": "Generally speak, catching Throwable is not desirable. But in this case is necessary to complete the future returned.", "author": "chtyim", "createdAt": "2020-11-20T21:13:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk1OTk0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk4NDUzOA==", "url": "https://github.com/cdapio/cdap/pull/12865#discussion_r527984538", "bodyText": "Yep, that's the main reason I proposed supplyAsync. I don't like to catch Throwable either.", "author": "tivv", "createdAt": "2020-11-20T21:37:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk1OTk0OQ=="}], "type": "inlineReview"}, {"oid": "adbaa37652183c8b676476546a934e55c4c29e75", "url": "https://github.com/cdapio/cdap/commit/adbaa37652183c8b676476546a934e55c4c29e75", "message": "(CDAP-17415) Speedup job launching on Dataproc\n\n- Not to recompress jar files when building archive\n- Upload files in parallel", "committedDate": "2020-11-20T21:14:02Z", "type": "commit"}, {"oid": "adbaa37652183c8b676476546a934e55c4c29e75", "url": "https://github.com/cdapio/cdap/commit/adbaa37652183c8b676476546a934e55c4c29e75", "message": "(CDAP-17415) Speedup job launching on Dataproc\n\n- Not to recompress jar files when building archive\n- Upload files in parallel", "committedDate": "2020-11-20T21:14:02Z", "type": "forcePushed"}]}