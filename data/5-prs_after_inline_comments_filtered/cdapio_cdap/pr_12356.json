{"pr_number": 12356, "pr_title": "Implementation of preview request queue and polling service for standalone more.", "pr_createdAt": "2020-06-17T15:42:55Z", "pr_url": "https://github.com/cdapio/cdap/pull/12356", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyMDM5OA==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r441720398", "bodyText": "does this mean if removeFromWaitingState throws error, we will lose that preview request and user has to resubmit?", "author": "CuriousVini", "createdAt": "2020-06-17T17:46:12Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/preview/DefaultPreviewRequestQueue.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.preview;\n+\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.preview.PreviewRequest;\n+import io.cdap.cdap.app.preview.PreviewRequestQueue;\n+import io.cdap.cdap.app.preview.PreviewRequestQueueState;\n+import io.cdap.cdap.app.store.preview.PreviewStore;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+/**\n+ * Implementation of {@link PreviewRequestQueue} backed by {@link PreviewStore}.\n+ */\n+public class DefaultPreviewRequestQueue implements PreviewRequestQueue {\n+  private final PreviewStore previewStore;\n+  private final ConcurrentLinkedQueue<PreviewRequest> requestQueue;\n+  private int capacity;\n+\n+  @Inject\n+  DefaultPreviewRequestQueue(CConfiguration cConf, PreviewStore previewStore) {\n+    this.previewStore = previewStore;\n+    this.capacity = cConf.getInt(Constants.Preview.WAITING_QUEUE_CAPACITY, 50);\n+    List<PreviewRequest> allInWaitingState = previewStore.getAllInWaitingState();\n+    this.requestQueue = new ConcurrentLinkedQueue<>();\n+    requestQueue.addAll(allInWaitingState);\n+  }\n+\n+  @Override\n+  public Optional<PreviewRequest> poll() {\n+    PreviewRequest previewRequest = requestQueue.poll();\n+    if (previewRequest == null) {\n+      return Optional.empty();\n+    }\n+\n+    previewStore.removeFromWaitingState(previewRequest.getProgram().getParent());", "originalCommit": "53faf3804ca214a79bc62bb044004ace39578f53", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU5NTMzOQ==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r442595339", "bodyText": "Removed removeFromWaitingState from API instead doing it in setPreviewRequestPollerInfo method. Also doing poll in the end so as to not loose the request in case any exception.", "author": "sagarkapare", "createdAt": "2020-06-19T02:17:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyMDM5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyMTY3Mg==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r441721672", "bodyText": "should this be final?", "author": "CuriousVini", "createdAt": "2020-06-17T17:48:25Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/preview/DefaultPreviewRequestQueue.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.preview;\n+\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.preview.PreviewRequest;\n+import io.cdap.cdap.app.preview.PreviewRequestQueue;\n+import io.cdap.cdap.app.preview.PreviewRequestQueueState;\n+import io.cdap.cdap.app.store.preview.PreviewStore;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+/**\n+ * Implementation of {@link PreviewRequestQueue} backed by {@link PreviewStore}.\n+ */\n+public class DefaultPreviewRequestQueue implements PreviewRequestQueue {\n+  private final PreviewStore previewStore;\n+  private final ConcurrentLinkedQueue<PreviewRequest> requestQueue;\n+  private int capacity;", "originalCommit": "53faf3804ca214a79bc62bb044004ace39578f53", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU5NTA2OQ==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r442595069", "bodyText": "done.", "author": "sagarkapare", "createdAt": "2020-06-19T02:15:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyMTY3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyNTg4OQ==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r441725889", "bodyText": "size is defined by requestQueue.size() where as state is defined by previewStore.getAllInWaitingState(). Can there be any race conditions which can cause different results for these 2 calls?", "author": "CuriousVini", "createdAt": "2020-06-17T17:55:22Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/preview/DefaultPreviewRequestQueue.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.preview;\n+\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.preview.PreviewRequest;\n+import io.cdap.cdap.app.preview.PreviewRequestQueue;\n+import io.cdap.cdap.app.preview.PreviewRequestQueueState;\n+import io.cdap.cdap.app.store.preview.PreviewStore;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+/**\n+ * Implementation of {@link PreviewRequestQueue} backed by {@link PreviewStore}.\n+ */\n+public class DefaultPreviewRequestQueue implements PreviewRequestQueue {\n+  private final PreviewStore previewStore;\n+  private final ConcurrentLinkedQueue<PreviewRequest> requestQueue;\n+  private int capacity;\n+\n+  @Inject\n+  DefaultPreviewRequestQueue(CConfiguration cConf, PreviewStore previewStore) {\n+    this.previewStore = previewStore;\n+    this.capacity = cConf.getInt(Constants.Preview.WAITING_QUEUE_CAPACITY, 50);\n+    List<PreviewRequest> allInWaitingState = previewStore.getAllInWaitingState();\n+    this.requestQueue = new ConcurrentLinkedQueue<>();\n+    requestQueue.addAll(allInWaitingState);\n+  }\n+\n+  @Override\n+  public Optional<PreviewRequest> poll() {\n+    PreviewRequest previewRequest = requestQueue.poll();\n+    if (previewRequest == null) {\n+      return Optional.empty();\n+    }\n+\n+    previewStore.removeFromWaitingState(previewRequest.getProgram().getParent());\n+    return Optional.of(previewRequest);\n+  }\n+\n+  @Override\n+  public void add(PreviewRequest previewRequest) {\n+    int size = requestQueue.size();\n+    if (size >= capacity) {\n+      throw new IllegalStateException(String.format(\"Preview request waiting queue is full with %d requests.\", size));\n+    }\n+    previewStore.addToWaitingState(previewRequest.getProgram().getParent(), previewRequest.getAppRequest());\n+    requestQueue.add(previewRequest);\n+  }\n+\n+  @Override\n+  public PreviewRequestQueueState getState() {\n+    List<PreviewRequest> allWaiting = previewStore.getAllInWaitingState();", "originalCommit": "53faf3804ca214a79bc62bb044004ace39578f53", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU5NTA0Mg==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r442595042", "bodyText": "Actually this should be just requestQueue.size() no need to go to store.", "author": "sagarkapare", "createdAt": "2020-06-19T02:15:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyNTg4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyNzE0Ng==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r441727146", "bodyText": "would this be added in subsequent PRs? Could you please file a bug for this?", "author": "CuriousVini", "createdAt": "2020-06-17T17:57:18Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/preview/PreviewRequestPollingService.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.preview;\n+\n+import io.cdap.cdap.app.preview.PreviewRequest;\n+import io.cdap.cdap.app.preview.PreviewRequestPoller;\n+import io.cdap.cdap.app.preview.PreviewRequestQueue;\n+import io.cdap.cdap.app.preview.PreviewRunner;\n+import io.cdap.cdap.common.service.AbstractRetryableScheduledService;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Service for polling {@link PreviewRequest}s from {@link PreviewRequestQueue}\n+ */\n+public class PreviewRequestPollingService extends AbstractRetryableScheduledService {\n+  private static final Logger LOG = LoggerFactory.getLogger(PreviewRequestPollingService.class);\n+  private final PreviewRequestPoller previewRequestPoller;\n+  private final PreviewRunner previewRunner;\n+\n+  public PreviewRequestPollingService(PreviewRequestPoller previewRequestPoller, PreviewRunner previewRunner) {\n+    // TODO add polling configs", "originalCommit": "53faf3804ca214a79bc62bb044004ace39578f53", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyNzE4Nw==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r441727187", "bodyText": "Could you please file a bug for this?", "author": "CuriousVini", "createdAt": "2020-06-17T17:57:21Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/preview/PreviewRequestPollingService.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.preview;\n+\n+import io.cdap.cdap.app.preview.PreviewRequest;\n+import io.cdap.cdap.app.preview.PreviewRequestPoller;\n+import io.cdap.cdap.app.preview.PreviewRequestQueue;\n+import io.cdap.cdap.app.preview.PreviewRunner;\n+import io.cdap.cdap.common.service.AbstractRetryableScheduledService;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Service for polling {@link PreviewRequest}s from {@link PreviewRequestQueue}\n+ */\n+public class PreviewRequestPollingService extends AbstractRetryableScheduledService {\n+  private static final Logger LOG = LoggerFactory.getLogger(PreviewRequestPollingService.class);\n+  private final PreviewRequestPoller previewRequestPoller;\n+  private final PreviewRunner previewRunner;\n+\n+  public PreviewRequestPollingService(PreviewRequestPoller previewRequestPoller, PreviewRunner previewRunner) {\n+    // TODO add polling configs\n+    super(RetryStrategies.fixDelay(1, TimeUnit.SECONDS));\n+    this.previewRequestPoller = previewRequestPoller;\n+    this.previewRunner = previewRunner;\n+  }\n+\n+  @Override\n+  protected long runTask() {\n+    Optional<PreviewRequest> requestOptional = previewRequestPoller.poll();\n+    if (requestOptional.isPresent()) {\n+      PreviewRequest previewRequest = requestOptional.get();\n+      try {\n+        LOG.info(\"Starting preview for program id {}\", requestOptional.get().getProgram());\n+        previewRunner.startPreview(requestOptional.get());\n+      } catch (Exception e) {\n+        LOG.warn(\"Failed to run preview with program id {}.\", previewRequest.getProgram(), e);\n+      }\n+    }\n+    //TODO change this after adding retry strategy config", "originalCommit": "53faf3804ca214a79bc62bb044004ace39578f53", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU5NDk1Ng==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r442594956", "bodyText": "Removed this class from PR.", "author": "sagarkapare", "createdAt": "2020-06-19T02:15:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyNzE4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyOTQ4OQ==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r441729489", "bodyText": "Can this be Queue< PreviewRequest>?", "author": "CuriousVini", "createdAt": "2020-06-17T18:01:06Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/preview/DefaultPreviewRequestQueue.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.preview;\n+\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.preview.PreviewRequest;\n+import io.cdap.cdap.app.preview.PreviewRequestQueue;\n+import io.cdap.cdap.app.preview.PreviewRequestQueueState;\n+import io.cdap.cdap.app.store.preview.PreviewStore;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+/**\n+ * Implementation of {@link PreviewRequestQueue} backed by {@link PreviewStore}.\n+ */\n+public class DefaultPreviewRequestQueue implements PreviewRequestQueue {\n+  private final PreviewStore previewStore;\n+  private final ConcurrentLinkedQueue<PreviewRequest> requestQueue;", "originalCommit": "53faf3804ca214a79bc62bb044004ace39578f53", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU5NDg4OA==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r442594888", "bodyText": "yes. changed.", "author": "sagarkapare", "createdAt": "2020-06-19T02:14:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyOTQ4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczMDI4Nw==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r441730287", "bodyText": "Could you please add javadoc around what is the expected thread safety of this data structure implementation.", "author": "CuriousVini", "createdAt": "2020-06-17T18:02:33Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/PreviewRequestQueue.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.app.preview;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Interface designed for holding {@link PreviewRequest}s that are in WAITING state.", "originalCommit": "53faf3804ca214a79bc62bb044004ace39578f53", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU5NDg0MA==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r442594840", "bodyText": "Added doc to the implementation class.", "author": "sagarkapare", "createdAt": "2020-06-19T02:14:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczMDI4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MTkyNw==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r448541927", "bodyText": "So thread safety is not a contract enforced by this interface?", "author": "chtyim", "createdAt": "2020-07-01T18:25:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczMDI4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAzNTM4MQ==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r459035381", "bodyText": "Should this interface enforces all implementations to be thread safe?", "author": "chtyim", "createdAt": "2020-07-22T19:35:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczMDI4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE0MTI3Mw==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r459141273", "bodyText": "Not sure I understand this comment. Did you mean adding ThreadSafe annotation to interface?", "author": "sagarkapare", "createdAt": "2020-07-22T23:33:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczMDI4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxNjkwMw==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r459316903", "bodyText": "Yes and clearly state that it is a requirement for the implementing class.", "author": "chtyim", "createdAt": "2020-07-23T09:15:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczMDI4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU3MjUzMA==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r459572530", "bodyText": "Got it. done.", "author": "sagarkapare", "createdAt": "2020-07-23T16:22:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczMDI4Nw=="}], "type": "inlineReview"}, {"oid": "4597885f2c50b2a5de52417783ff9dd714796c1c", "url": "https://github.com/cdapio/cdap/commit/4597885f2c50b2a5de52417783ff9dd714796c1c", "message": "Addressed comments.", "committedDate": "2020-06-19T00:06:07Z", "type": "forcePushed"}, {"oid": "f80f7fe9ac2cf84576078ca6b4f8054779b340c5", "url": "https://github.com/cdapio/cdap/commit/f80f7fe9ac2cf84576078ca6b4f8054779b340c5", "message": "Addressed comments.", "committedDate": "2020-06-19T00:13:47Z", "type": "forcePushed"}, {"oid": "27232a8d7c5903d48bbc95a1358c45e41e5a6bad", "url": "https://github.com/cdapio/cdap/commit/27232a8d7c5903d48bbc95a1358c45e41e5a6bad", "message": "Addressed comments.", "committedDate": "2020-06-19T02:13:05Z", "type": "forcePushed"}, {"oid": "5e45cf43440f829752fa965938a1e301437ae547", "url": "https://github.com/cdapio/cdap/commit/5e45cf43440f829752fa965938a1e301437ae547", "message": "Integrated with the poller service.", "committedDate": "2020-07-01T18:15:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MTEzNA==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r448541134", "bodyText": "Why expose?", "author": "chtyim", "createdAt": "2020-07-01T18:23:53Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/DefaultPreviewRunnerModule.java", "diffHunk": "@@ -175,6 +178,9 @@ protected void configure() {\n     bind(PreviewStore.class).to(DefaultPreviewStore.class).in(Scopes.SINGLETON);\n     bind(Scheduler.class).to(NoOpScheduler.class);\n \n+    bind(PreviewRequestQueue.class).to(DefaultPreviewRequestQueue.class).in(Scopes.SINGLETON);\n+    expose(PreviewRequestQueue.class);", "originalCommit": "5e45cf43440f829752fa965938a1e301437ae547", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY1MjU1Ng==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r448652556", "bodyText": "PreviewManager gets the instance of this class using preview injector and adds request to it, which is why its exposed.", "author": "sagarkapare", "createdAt": "2020-07-01T22:41:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MTEzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5NTIxNA==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r450395214", "bodyText": "Shouldn't the queue belongs to the Preview Manager internally? Why the binding is in separate injector?", "author": "chtyim", "createdAt": "2020-07-06T18:08:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MTEzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4NTkwMg==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r451185902", "bodyText": "Refactoored the guice bindings in the last commit. PTAL. thanks!", "author": "sagarkapare", "createdAt": "2020-07-07T22:46:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MTEzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MTI2OA==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r448541268", "bodyText": "Why need to expose?", "author": "chtyim", "createdAt": "2020-07-01T18:24:07Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/DefaultPreviewRunnerModule.java", "diffHunk": "@@ -188,6 +194,9 @@ protected void configure() {\n \n     bind(PreferencesFetcher.class).toProvider(preferencesFetcherProvider);\n     expose(PreferencesFetcher.class);\n+\n+    bind(PreviewRequestFetcher.class).to(DirectPreviewRequestFetcher.class);\n+    expose(PreviewRequestFetcher.class);", "originalCommit": "5e45cf43440f829752fa965938a1e301437ae547", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY1MzA4Mg==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r448653082", "bodyText": "PreviewManager for standalone creates instances of PreviewRunnerService using injector. PreviewRunnerService requires PreviewRequestFetcher which is why its exposed here.", "author": "sagarkapare", "createdAt": "2020-07-01T22:42:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MTI2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5NjczMg==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r450396732", "bodyText": "It shouldn't be the PreviewManager to create the runner service in Standalone. Conceptually, the manager and the runner service are two separated services. In distributed, they started in different pod (hence different processes), while in standalone, they are started from Standalone Main independently. We might need a separate service class for starting N number of PreviewRunnerServices, in which that new service is started in StandaloneMain independently of the PreviewManager.", "author": "chtyim", "createdAt": "2020-07-06T18:11:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MTI2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4NTczMw==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r451185733", "bodyText": "I refactored code to separate the PreviewManager and PreviewRunner interfaces. Basically preview manager had method to get the preview runner. And then all HttpHandler requests were served by PreviewRunner - for example getData(), getStatus() etc. I removed those methods from PreviewRunner and moved to PreviewManager in one commit\nand added separate guice bindings for them in separate commit.", "author": "sagarkapare", "createdAt": "2020-07-07T22:46:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MTI2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MjQ3Ng==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r448542476", "bodyText": "Better use byte[] payload here than using JsonObject as the interface", "author": "chtyim", "createdAt": "2020-07-01T18:26:39Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/PreviewRequestQueue.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.app.preview;\n+\n+import com.google.gson.JsonObject;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Interface designed for holding {@link PreviewRequest}s that are in WAITING state.\n+ */\n+public interface PreviewRequestQueue {\n+  /**\n+   * Poll the next available request in the queue.\n+   * @param pollerInfo information about the poller in JSON format\n+   * @return {@code PreviewRequest} if such request is available in the queue\n+   */\n+  Optional<PreviewRequest> poll(@Nullable JsonObject pollerInfo);", "originalCommit": "5e45cf43440f829752fa965938a1e301437ae547", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY1MTg5Mw==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r448651893", "bodyText": "done.", "author": "sagarkapare", "createdAt": "2020-07-01T22:39:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MjQ3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MjgyNA==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r448542824", "bodyText": "final", "author": "chtyim", "createdAt": "2020-07-01T18:27:22Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/PreviewRequestQueueState.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.app.preview;\n+\n+import com.google.common.base.Objects;\n+\n+/**\n+ * Class representing the state of the preview job queue.\n+ */\n+public class PreviewRequestQueueState {\n+  private long numOfPreviewWaiting;", "originalCommit": "5e45cf43440f829752fa965938a1e301437ae547", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MzA5OA==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r448543098", "bodyText": "Also, call it pendingRequests", "author": "chtyim", "createdAt": "2020-07-01T18:27:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MjgyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MzIxNQ==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r448543215", "bodyText": "BTW, it can be just an int instead of long, right?", "author": "chtyim", "createdAt": "2020-07-01T18:28:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MjgyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY1MTkzMQ==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r448651931", "bodyText": "fixed.", "author": "sagarkapare", "createdAt": "2020-07-01T22:39:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MjgyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0NjM0MQ==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r448546341", "bodyText": "What is Acquired state for?", "author": "chtyim", "createdAt": "2020-07-01T18:34:24Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/PreviewStatus.java", "diffHunk": "@@ -29,6 +29,8 @@\n    * Status for the preview\n    */\n   public enum Status {\n+    WAITING(false),\n+    ACQUIRED(false),", "originalCommit": "5e45cf43440f829752fa965938a1e301437ae547", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY1NDU4NQ==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r448654585", "bodyText": "Preview app goes to the Acquired state once the poller info is written for it. Added this state, so that if the manager restarted before INIT status is received from runner, the application is ignored while building the preview request queue.", "author": "sagarkapare", "createdAt": "2020-07-01T22:47:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0NjM0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5ODgxOQ==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r450398819", "bodyText": "When do we mark a preview as ACQUIRED state? If it is during the poll call, then it means a preview can be in ACQUIRED state and yet no pod is owning it (consider the state is updated on the server, but failed to reach the client). If that happen, what will happen? I assume the preview will get timeout after sometime and marked as killed by timeout.\nIf that's the case, however, we can simply record it as INIT state on poll.", "author": "chtyim", "createdAt": "2020-07-06T18:16:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0NjM0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4NTM5Ng==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r451185396", "bodyText": "Removed and using INIT status now.", "author": "sagarkapare", "createdAt": "2020-07-07T22:45:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0NjM0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0NzY5NA==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r448547694", "bodyText": "Why need a specific method for the waiting state? Shouldn't be the same as other state transition that uses the setPreviewStatus method?", "author": "chtyim", "createdAt": "2020-07-01T18:37:03Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/app/store/preview/PreviewStore.java", "diffHunk": "@@ -91,4 +92,30 @@\n    */\n   @Nullable\n   PreviewStatus getPreviewStatus(ApplicationId applicationId);\n+\n+  /**\n+   * Adds the preview request for given application id in waiting state.\n+   * @param applicationId the application id corresponding to the request\n+   * @param appRequest preview request configuration\n+   */\n+  void addToWaitingState(ApplicationId applicationId, AppRequest appRequest);", "originalCommit": "5e45cf43440f829752fa965938a1e301437ae547", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY1MTgwOQ==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r448651809", "bodyText": "Renamed this method to add. This method also sets the status as WAITING since thats the initial status of the preview.", "author": "sagarkapare", "createdAt": "2020-07-01T22:38:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0NzY5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0Nzk4Nw==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r448547987", "bodyText": "Why need a special one for waiting state? It should be more generic like getAllInStatus(PreviewState.Status status)", "author": "chtyim", "createdAt": "2020-07-01T18:37:37Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/app/store/preview/PreviewStore.java", "diffHunk": "@@ -91,4 +92,30 @@\n    */\n   @Nullable\n   PreviewStatus getPreviewStatus(ApplicationId applicationId);\n+\n+  /**\n+   * Adds the preview request for given application id in waiting state.\n+   * @param applicationId the application id corresponding to the request\n+   * @param appRequest preview request configuration\n+   */\n+  void addToWaitingState(ApplicationId applicationId, AppRequest appRequest);\n+\n+  /**\n+   * @return list of all waiting requests in waiting state sorted by submit time\n+   */\n+  List<PreviewRequest> getAllInWaitingState();", "originalCommit": "5e45cf43440f829752fa965938a1e301437ae547", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY1MDkwMA==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r448650900", "bodyText": "This is called from PreviewRequestQueue implementation to build the in-memory queue in case manager is restarted. This method is special since it returns the list of PreviewRequest.  PreviewRequest is only stored for requests in waiting state.", "author": "sagarkapare", "createdAt": "2020-07-01T22:35:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0Nzk4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0ODA4Nw==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r448548087", "bodyText": "Dangling javadoc?", "author": "chtyim", "createdAt": "2020-07-01T18:37:50Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/app/store/preview/PreviewStore.java", "diffHunk": "@@ -91,4 +92,30 @@\n    */\n   @Nullable\n   PreviewStatus getPreviewStatus(ApplicationId applicationId);\n+\n+  /**\n+   * Adds the preview request for given application id in waiting state.\n+   * @param applicationId the application id corresponding to the request\n+   * @param appRequest preview request configuration\n+   */\n+  void addToWaitingState(ApplicationId applicationId, AppRequest appRequest);\n+\n+  /**\n+   * @return list of all waiting requests in waiting state sorted by submit time\n+   */\n+  List<PreviewRequest> getAllInWaitingState();\n+\n+  /**", "originalCommit": "5e45cf43440f829752fa965938a1e301437ae547", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY0ODczMw==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r448648733", "bodyText": "removed.", "author": "sagarkapare", "createdAt": "2020-07-01T22:29:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0ODA4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0ODUwMA==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r448548500", "bodyText": "The PreviewManager shouldn't be starting this service. Is this only used in standalone?", "author": "chtyim", "createdAt": "2020-07-01T18:38:37Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/preview/DefaultPreviewManager.java", "diffHunk": "@@ -115,13 +119,20 @@\n     this.secureStore = secureStore;\n     this.transactionSystemClient = transactionSystemClient;\n     this.previewDataDir = Paths.get(cConf.get(Constants.CFG_LOCAL_DATA_DIR), \"preview\").toAbsolutePath();\n-    this.maxPreviews = cConf.getInt(Constants.Preview.CACHE_SIZE, 10);\n+    this.maxConcurrentPreviews = cConf.getInt(Constants.Preview.CACHE_SIZE, 10);\n     this.previewRunnerModuleFactory = previewRunnerModuleFactory;\n+    this.previewPollers = new HashSet<>();\n   }\n \n   @Override\n   protected void startUp() throws Exception {\n     previewInjector = createPreviewInjector();\n+    // Create and start the preview poller services.\n+    for (int i = 0; i < maxConcurrentPreviews; i++) {\n+      Service pollerService = previewInjector.getInstance(PreviewRunnerService.class);", "originalCommit": "5e45cf43440f829752fa965938a1e301437ae547", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzMjQ3Ng==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r448632476", "bodyText": "Yes. We will have another preview manager implementation for distributed which wont start these services.", "author": "sagarkapare", "createdAt": "2020-07-01T21:44:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0ODUwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4NTI0MQ==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r451185241", "bodyText": "Moved to separate service PreviewRunnerManager", "author": "sagarkapare", "createdAt": "2020-07-07T22:44:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0ODUwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0OTQ0NQ==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r448549445", "bodyText": "Why? This means a misbehaving client can actually causes all preview requests being ignored?", "author": "chtyim", "createdAt": "2020-07-01T18:40:32Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/preview/DefaultPreviewRequestQueue.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.preview;\n+\n+import com.google.gson.JsonObject;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.preview.PreviewRequest;\n+import io.cdap.cdap.app.preview.PreviewRequestQueue;\n+import io.cdap.cdap.app.preview.PreviewRequestQueueState;\n+import io.cdap.cdap.app.store.preview.PreviewStore;\n+import io.cdap.cdap.common.app.RunIds;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import net.jcip.annotations.ThreadSafe;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentLinkedDeque;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Thread-safe implementation of {@link PreviewRequestQueue} backed by {@link PreviewStore}.\n+ */\n+@ThreadSafe\n+public class DefaultPreviewRequestQueue implements PreviewRequestQueue {\n+  private static final Logger LOG = LoggerFactory.getLogger(DefaultPreviewRequestQueue.class);\n+  private final PreviewStore previewStore;\n+  private final ConcurrentLinkedDeque<PreviewRequest> requestQueue;\n+  private final int capacity;\n+  private final long waitTimeOut;\n+  private final AtomicInteger queueSize;\n+\n+  @Inject\n+  DefaultPreviewRequestQueue(CConfiguration cConf, PreviewStore previewStore) {\n+    this.previewStore = previewStore;\n+    this.capacity = cConf.getInt(Constants.Preview.WAITING_QUEUE_CAPACITY, 50);\n+    this.waitTimeOut = cConf.getLong(Constants.Preview.WAITING_QUEUE_TIMEOUT_SECONDS, 60);\n+    this.requestQueue = new ConcurrentLinkedDeque<>();\n+    this.queueSize = new AtomicInteger();\n+    List<PreviewRequest> allInWaitingState = previewStore.getAllInWaitingState();\n+    for (PreviewRequest request : allInWaitingState) {\n+      if (isTimedOut(request)) {\n+        continue;\n+      }\n+      requestQueue.add(request);\n+      queueSize.incrementAndGet();\n+    }\n+  }\n+\n+  @Override\n+  public Optional<PreviewRequest> poll(JsonObject pollerInfo) {\n+    while (true) {\n+      PreviewRequest previewRequest = requestQueue.poll();\n+      if (previewRequest == null) {\n+        return Optional.empty();\n+      }\n+\n+      if (isTimedOut(previewRequest)) {\n+        LOG.warn(\"Preview request wth application id {} is timed out. Ignoring it.\",\n+                 previewRequest.getProgram().getParent());\n+        continue;\n+      }\n+\n+      try {\n+        previewStore.setPreviewRequestPollerInfo(previewRequest.getProgram().getParent(), pollerInfo);\n+      } catch (IllegalArgumentException e) {\n+        LOG.warn(\"Error while setting the poller info for preview request with application id {}. Ignoring the preview\",", "originalCommit": "5e45cf43440f829752fa965938a1e301437ae547", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY0ODY1NQ==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r448648655", "bodyText": "This was added if the poller info is attempted to set but the preview is not in WAITING state (for example when killed by user). Throwing ConflictException from the  setPreviewRequestPollerInfo for this case now to make contract clear. PreviewRequest will be ignored.", "author": "sagarkapare", "createdAt": "2020-07-01T22:29:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0OTQ0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0OTkxMw==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r448549913", "bodyText": "Why use json string to create an AppRequest?? It's better to new the object directly", "author": "chtyim", "createdAt": "2020-07-01T18:41:29Z", "path": "cdap-app-fabric/src/test/java/io/cdap/cdap/internal/app/store/preview/DefaultPreviewStoreTest.java", "diffHunk": "@@ -122,4 +127,80 @@ public void testPreviewInfo() throws IOException {\n     Assert.assertEquals(runId, store.getProgramRunId(applicationId));\n     Assert.assertEquals(status, store.getPreviewStatus(applicationId));\n   }\n+\n+  @Test\n+  public void testPreviewWaitingRequests() {\n+    String json = \"{ \\\"id\\\": \\\"runner-1\\\"}\";\n+    JsonObject pollerInfo = new JsonParser().parse(json).getAsJsonObject();\n+\n+    Assert.assertEquals(0, store.getAllInWaitingState().size());\n+\n+    RunId id1 = RunIds.generate();\n+    ApplicationId applicationId = new ApplicationId(\"ns1\", id1.getId());\n+    store.addToWaitingState(applicationId, getAppRequest());\n+    List<PreviewRequest> allWaiting = store.getAllInWaitingState();\n+    Assert.assertEquals(1, allWaiting.size());\n+\n+    AppRequest appRequest = allWaiting.get(0).getAppRequest();\n+    Assert.assertNotNull(appRequest);\n+    Assert.assertNotNull(appRequest.getPreview());\n+    Assert.assertEquals(\"WordCount\", appRequest.getPreview().getProgramName());\n+    store.setPreviewRequestPollerInfo(applicationId, pollerInfo);\n+\n+    Assert.assertEquals(0, store.getAllInWaitingState().size());\n+\n+    // add 2 requests to the queue\n+    ApplicationId applicationId2 = new ApplicationId(\"ns1\", RunIds.generate().getId());\n+    store.addToWaitingState(applicationId2, getAppRequest());\n+    ApplicationId applicationId3 = new ApplicationId(\"ns1\", RunIds.generate().getId());\n+    store.addToWaitingState(applicationId3, getAppRequest());\n+\n+    allWaiting = store.getAllInWaitingState();\n+    Assert.assertEquals(2, allWaiting.size());\n+    Assert.assertEquals(applicationId2, allWaiting.get(0).getProgram().getParent());\n+    Assert.assertEquals(applicationId3, allWaiting.get(1).getProgram().getParent());\n+\n+    store.setPreviewRequestPollerInfo(applicationId2, pollerInfo);\n+    allWaiting = store.getAllInWaitingState();\n+    Assert.assertEquals(1, allWaiting.size());\n+    Assert.assertEquals(applicationId3, allWaiting.get(0).getProgram().getParent());\n+\n+    store.setPreviewRequestPollerInfo(applicationId3, pollerInfo);\n+    allWaiting = store.getAllInWaitingState();\n+    Assert.assertEquals(0, allWaiting.size());\n+  }\n+\n+  private AppRequest getAppRequest() {\n+    String appRequestWithSchedules = \"{\\n\" +", "originalCommit": "5e45cf43440f829752fa965938a1e301437ae547", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY0NzA3NA==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r448647074", "bodyText": "fixed.", "author": "sagarkapare", "createdAt": "2020-07-01T22:24:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0OTkxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4ODk0Ng==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r451188946", "bodyText": "This change is required because PreviewRunner needs to know the program run id in order to stop it using ProgramLifeCycleService. Previously ProgramRunId was found in PreviewStore, however preview runner will not have access to the PreviewStore which is why we need to preserve it here.", "author": "sagarkapare", "createdAt": "2020-07-07T22:55:55Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/preview/DefaultPreviewRunner.java", "diffHunk": "@@ -134,15 +129,14 @@\n     this.dataTracerFactory = dataTracerFactory;\n     this.namespaceAdmin = namespaceAdmin;\n     this.metricsCollectionService = metricsCollectionService;\n-    this.metricsQueryHelper = metricsQueryHelper;\n     this.programNotificationSubscriberService = programNotificationSubscriberService;\n     this.levelDBTableService = levelDBTableService;\n     this.structuredTableAdmin = structuredTableAdmin;\n     this.structuredTableRegistry = structuredTableRegistry;\n   }\n \n   @Override\n-  public Future<PreviewRequest> startPreview(PreviewRequest previewRequest) throws Exception {\n+  public Map.Entry<Future<PreviewRequest>, ProgramRunId> startPreview(PreviewRequest previewRequest) throws Exception {", "originalCommit": "2fb4f241f61d04492f058055dd1ea68979d23352", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0ac7781e06a405cda9394eece65bac3700c1b9c7", "url": "https://github.com/cdapio/cdap/commit/0ac7781e06a405cda9394eece65bac3700c1b9c7", "message": "fixed tests", "committedDate": "2020-07-09T03:49:00Z", "type": "forcePushed"}, {"oid": "625328d6b20a0115b413a2147a6d3a7d01d9ebfe", "url": "https://github.com/cdapio/cdap/commit/625328d6b20a0115b413a2147a6d3a7d01d9ebfe", "message": "Implementation of the preview killer.", "committedDate": "2020-07-09T06:30:11Z", "type": "forcePushed"}, {"oid": "7ccd1e522b2d58ba2e2bcd64369044c24c661c6b", "url": "https://github.com/cdapio/cdap/commit/7ccd1e522b2d58ba2e2bcd64369044c24c661c6b", "message": "Implementation of the preview killer.", "committedDate": "2020-07-09T17:03:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4MTY3NA==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r458981674", "bodyText": "Is this class only used in standalone?? Because in distributed mode, we shouldn't have this.", "author": "chtyim", "createdAt": "2020-07-22T18:01:24Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/DefaultPreviewRunnerManager.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.app.preview;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.util.concurrent.AbstractIdleService;\n+import com.google.common.util.concurrent.Service;\n+import com.google.inject.AbstractModule;\n+import com.google.inject.Guice;\n+import com.google.inject.Inject;\n+import com.google.inject.Injector;\n+import com.google.inject.Provides;\n+import com.google.inject.name.Named;\n+import com.google.inject.util.Modules;\n+import io.cdap.cdap.api.common.Bytes;\n+import io.cdap.cdap.api.security.store.SecureStore;\n+import io.cdap.cdap.app.guice.ProgramRunnerRuntimeModule;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.conf.SConfiguration;\n+import io.cdap.cdap.common.guice.ConfigModule;\n+import io.cdap.cdap.common.guice.IOModule;\n+import io.cdap.cdap.common.guice.LocalLocationModule;\n+import io.cdap.cdap.common.guice.preview.PreviewDiscoveryRuntimeModule;\n+import io.cdap.cdap.common.utils.Networks;\n+import io.cdap.cdap.config.guice.ConfigStoreModule;\n+import io.cdap.cdap.data.runtime.DataSetServiceModules;\n+import io.cdap.cdap.data.runtime.DataSetsModules;\n+import io.cdap.cdap.data.runtime.preview.PreviewDataModules;\n+import io.cdap.cdap.data2.dataset2.DatasetFramework;\n+import io.cdap.cdap.data2.dataset2.lib.table.leveldb.LevelDBTableService;\n+import io.cdap.cdap.data2.metadata.writer.MetadataServiceClient;\n+import io.cdap.cdap.data2.metadata.writer.NoOpMetadataServiceClient;\n+import io.cdap.cdap.internal.app.preview.PreviewRequestFetcherFactory;\n+import io.cdap.cdap.internal.app.preview.PreviewRunnerService;\n+import io.cdap.cdap.internal.provision.ProvisionerModule;\n+import io.cdap.cdap.logging.guice.LocalLogAppenderModule;\n+import io.cdap.cdap.messaging.guice.MessagingServerRuntimeModule;\n+import io.cdap.cdap.metadata.MetadataReaderWriterModules;\n+import io.cdap.cdap.metrics.guice.MetricsClientRuntimeModule;\n+import io.cdap.cdap.security.auth.context.AuthenticationContextModules;\n+import io.cdap.cdap.security.guice.preview.PreviewSecureStoreModule;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.tephra.TransactionSystemClient;\n+import org.apache.twill.discovery.DiscoveryService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Service for managing {@link PreviewRunnerService}.\n+ */\n+public class DefaultPreviewRunnerManager extends AbstractIdleService implements PreviewRunnerManager {\n+  private static final Logger LOG = LoggerFactory.getLogger(DefaultPreviewRunnerManager.class);\n+\n+  private final CConfiguration previewCConf;\n+  private final Configuration previewHConf;\n+  private final SConfiguration previewSConf;\n+  private final int maxConcurrentPreviews;\n+  private final DiscoveryService discoveryService;\n+  private final DatasetFramework datasetFramework;\n+  private final SecureStore secureStore;\n+  private final TransactionSystemClient transactionSystemClient;\n+  private Injector previewInjector;\n+  private final PreviewRunnerModule previewRunnerModule;\n+  private final Map<String, PreviewRunnerService> previewPollers;\n+  private final LevelDBTableService previewLevelDBTableService;\n+  private final PreviewRequestFetcherFactory previewRequestFetcherFactory;\n+\n+  @Inject\n+  DefaultPreviewRunnerManager(\n+    @Named(PreviewConfigModule.PREVIEW_CCONF) CConfiguration previewCConf,\n+    @Named(PreviewConfigModule.PREVIEW_HCONF) Configuration previewHConf,\n+    @Named(PreviewConfigModule.PREVIEW_SCONF) SConfiguration previewSConf,\n+    SecureStore secureStore, DiscoveryService discoveryService,\n+    @Named(DataSetsModules.BASE_DATASET_FRAMEWORK) DatasetFramework datasetFramework,\n+    TransactionSystemClient transactionSystemClient,\n+    @Named(PreviewConfigModule.PREVIEW_LEVEL_DB) LevelDBTableService previewLevelDBTableService,\n+    PreviewRunnerModule previewRunnerModule, PreviewRequestFetcherFactory previewRequestFetcherFactory) {\n+    this.previewCConf = previewCConf;\n+    this.previewHConf = previewHConf;\n+    this.previewSConf = previewSConf;\n+    this.datasetFramework = datasetFramework;\n+    this.secureStore = secureStore;\n+    this.discoveryService = discoveryService;\n+    this.transactionSystemClient = transactionSystemClient;\n+    this.maxConcurrentPreviews = previewCConf.getInt(Constants.Preview.CACHE_SIZE, 10);\n+    this.previewPollers = new ConcurrentHashMap<>();", "originalCommit": "7ccd1e522b2d58ba2e2bcd64369044c24c661c6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAyODk5OQ==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r459028999", "bodyText": "For simplicity kept the same class in distributed mode as well. In Distributed mode maxConcurrentPreviews will be set to 1.\nWe can adjust the guice bindings if required in the PR which will have distributed mode changes.", "author": "sagarkapare", "createdAt": "2020-07-22T19:23:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4MTY3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4MTgxNg==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r458981816", "bodyText": "No need to have synchronized keyword", "author": "chtyim", "createdAt": "2020-07-22T18:01:40Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/DefaultPreviewRunnerManager.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.app.preview;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.util.concurrent.AbstractIdleService;\n+import com.google.common.util.concurrent.Service;\n+import com.google.inject.AbstractModule;\n+import com.google.inject.Guice;\n+import com.google.inject.Inject;\n+import com.google.inject.Injector;\n+import com.google.inject.Provides;\n+import com.google.inject.name.Named;\n+import com.google.inject.util.Modules;\n+import io.cdap.cdap.api.common.Bytes;\n+import io.cdap.cdap.api.security.store.SecureStore;\n+import io.cdap.cdap.app.guice.ProgramRunnerRuntimeModule;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.conf.SConfiguration;\n+import io.cdap.cdap.common.guice.ConfigModule;\n+import io.cdap.cdap.common.guice.IOModule;\n+import io.cdap.cdap.common.guice.LocalLocationModule;\n+import io.cdap.cdap.common.guice.preview.PreviewDiscoveryRuntimeModule;\n+import io.cdap.cdap.common.utils.Networks;\n+import io.cdap.cdap.config.guice.ConfigStoreModule;\n+import io.cdap.cdap.data.runtime.DataSetServiceModules;\n+import io.cdap.cdap.data.runtime.DataSetsModules;\n+import io.cdap.cdap.data.runtime.preview.PreviewDataModules;\n+import io.cdap.cdap.data2.dataset2.DatasetFramework;\n+import io.cdap.cdap.data2.dataset2.lib.table.leveldb.LevelDBTableService;\n+import io.cdap.cdap.data2.metadata.writer.MetadataServiceClient;\n+import io.cdap.cdap.data2.metadata.writer.NoOpMetadataServiceClient;\n+import io.cdap.cdap.internal.app.preview.PreviewRequestFetcherFactory;\n+import io.cdap.cdap.internal.app.preview.PreviewRunnerService;\n+import io.cdap.cdap.internal.provision.ProvisionerModule;\n+import io.cdap.cdap.logging.guice.LocalLogAppenderModule;\n+import io.cdap.cdap.messaging.guice.MessagingServerRuntimeModule;\n+import io.cdap.cdap.metadata.MetadataReaderWriterModules;\n+import io.cdap.cdap.metrics.guice.MetricsClientRuntimeModule;\n+import io.cdap.cdap.security.auth.context.AuthenticationContextModules;\n+import io.cdap.cdap.security.guice.preview.PreviewSecureStoreModule;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.tephra.TransactionSystemClient;\n+import org.apache.twill.discovery.DiscoveryService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Service for managing {@link PreviewRunnerService}.\n+ */\n+public class DefaultPreviewRunnerManager extends AbstractIdleService implements PreviewRunnerManager {\n+  private static final Logger LOG = LoggerFactory.getLogger(DefaultPreviewRunnerManager.class);\n+\n+  private final CConfiguration previewCConf;\n+  private final Configuration previewHConf;\n+  private final SConfiguration previewSConf;\n+  private final int maxConcurrentPreviews;\n+  private final DiscoveryService discoveryService;\n+  private final DatasetFramework datasetFramework;\n+  private final SecureStore secureStore;\n+  private final TransactionSystemClient transactionSystemClient;\n+  private Injector previewInjector;\n+  private final PreviewRunnerModule previewRunnerModule;\n+  private final Map<String, PreviewRunnerService> previewPollers;\n+  private final LevelDBTableService previewLevelDBTableService;\n+  private final PreviewRequestFetcherFactory previewRequestFetcherFactory;\n+\n+  @Inject\n+  DefaultPreviewRunnerManager(\n+    @Named(PreviewConfigModule.PREVIEW_CCONF) CConfiguration previewCConf,\n+    @Named(PreviewConfigModule.PREVIEW_HCONF) Configuration previewHConf,\n+    @Named(PreviewConfigModule.PREVIEW_SCONF) SConfiguration previewSConf,\n+    SecureStore secureStore, DiscoveryService discoveryService,\n+    @Named(DataSetsModules.BASE_DATASET_FRAMEWORK) DatasetFramework datasetFramework,\n+    TransactionSystemClient transactionSystemClient,\n+    @Named(PreviewConfigModule.PREVIEW_LEVEL_DB) LevelDBTableService previewLevelDBTableService,\n+    PreviewRunnerModule previewRunnerModule, PreviewRequestFetcherFactory previewRequestFetcherFactory) {\n+    this.previewCConf = previewCConf;\n+    this.previewHConf = previewHConf;\n+    this.previewSConf = previewSConf;\n+    this.datasetFramework = datasetFramework;\n+    this.secureStore = secureStore;\n+    this.discoveryService = discoveryService;\n+    this.transactionSystemClient = transactionSystemClient;\n+    this.maxConcurrentPreviews = previewCConf.getInt(Constants.Preview.CACHE_SIZE, 10);\n+    this.previewPollers = new ConcurrentHashMap<>();\n+    this.previewRunnerModule = previewRunnerModule;\n+    this.previewLevelDBTableService = previewLevelDBTableService;\n+    this.previewRequestFetcherFactory = previewRequestFetcherFactory;\n+  }\n+\n+  @Override\n+  protected synchronized void startUp() throws Exception {", "originalCommit": "7ccd1e522b2d58ba2e2bcd64369044c24c661c6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAyNjQzMg==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r459026432", "bodyText": "Fixed.", "author": "sagarkapare", "createdAt": "2020-07-22T19:19:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4MTgxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4MjQ1OA==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r458982458", "bodyText": "Same here. Is this class only used for Standalone?", "author": "chtyim", "createdAt": "2020-07-22T18:02:47Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/DefaultPreviewRunnerManager.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.app.preview;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.util.concurrent.AbstractIdleService;\n+import com.google.common.util.concurrent.Service;\n+import com.google.inject.AbstractModule;\n+import com.google.inject.Guice;\n+import com.google.inject.Inject;\n+import com.google.inject.Injector;\n+import com.google.inject.Provides;\n+import com.google.inject.name.Named;\n+import com.google.inject.util.Modules;\n+import io.cdap.cdap.api.common.Bytes;\n+import io.cdap.cdap.api.security.store.SecureStore;\n+import io.cdap.cdap.app.guice.ProgramRunnerRuntimeModule;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.conf.SConfiguration;\n+import io.cdap.cdap.common.guice.ConfigModule;\n+import io.cdap.cdap.common.guice.IOModule;\n+import io.cdap.cdap.common.guice.LocalLocationModule;\n+import io.cdap.cdap.common.guice.preview.PreviewDiscoveryRuntimeModule;\n+import io.cdap.cdap.common.utils.Networks;\n+import io.cdap.cdap.config.guice.ConfigStoreModule;\n+import io.cdap.cdap.data.runtime.DataSetServiceModules;\n+import io.cdap.cdap.data.runtime.DataSetsModules;\n+import io.cdap.cdap.data.runtime.preview.PreviewDataModules;\n+import io.cdap.cdap.data2.dataset2.DatasetFramework;\n+import io.cdap.cdap.data2.dataset2.lib.table.leveldb.LevelDBTableService;\n+import io.cdap.cdap.data2.metadata.writer.MetadataServiceClient;\n+import io.cdap.cdap.data2.metadata.writer.NoOpMetadataServiceClient;\n+import io.cdap.cdap.internal.app.preview.PreviewRequestFetcherFactory;\n+import io.cdap.cdap.internal.app.preview.PreviewRunnerService;\n+import io.cdap.cdap.internal.provision.ProvisionerModule;\n+import io.cdap.cdap.logging.guice.LocalLogAppenderModule;\n+import io.cdap.cdap.messaging.guice.MessagingServerRuntimeModule;\n+import io.cdap.cdap.metadata.MetadataReaderWriterModules;\n+import io.cdap.cdap.metrics.guice.MetricsClientRuntimeModule;\n+import io.cdap.cdap.security.auth.context.AuthenticationContextModules;\n+import io.cdap.cdap.security.guice.preview.PreviewSecureStoreModule;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.tephra.TransactionSystemClient;\n+import org.apache.twill.discovery.DiscoveryService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Service for managing {@link PreviewRunnerService}.\n+ */\n+public class DefaultPreviewRunnerManager extends AbstractIdleService implements PreviewRunnerManager {\n+  private static final Logger LOG = LoggerFactory.getLogger(DefaultPreviewRunnerManager.class);\n+\n+  private final CConfiguration previewCConf;\n+  private final Configuration previewHConf;\n+  private final SConfiguration previewSConf;\n+  private final int maxConcurrentPreviews;\n+  private final DiscoveryService discoveryService;\n+  private final DatasetFramework datasetFramework;\n+  private final SecureStore secureStore;\n+  private final TransactionSystemClient transactionSystemClient;\n+  private Injector previewInjector;\n+  private final PreviewRunnerModule previewRunnerModule;\n+  private final Map<String, PreviewRunnerService> previewPollers;\n+  private final LevelDBTableService previewLevelDBTableService;\n+  private final PreviewRequestFetcherFactory previewRequestFetcherFactory;\n+\n+  @Inject\n+  DefaultPreviewRunnerManager(\n+    @Named(PreviewConfigModule.PREVIEW_CCONF) CConfiguration previewCConf,\n+    @Named(PreviewConfigModule.PREVIEW_HCONF) Configuration previewHConf,\n+    @Named(PreviewConfigModule.PREVIEW_SCONF) SConfiguration previewSConf,\n+    SecureStore secureStore, DiscoveryService discoveryService,\n+    @Named(DataSetsModules.BASE_DATASET_FRAMEWORK) DatasetFramework datasetFramework,\n+    TransactionSystemClient transactionSystemClient,\n+    @Named(PreviewConfigModule.PREVIEW_LEVEL_DB) LevelDBTableService previewLevelDBTableService,\n+    PreviewRunnerModule previewRunnerModule, PreviewRequestFetcherFactory previewRequestFetcherFactory) {\n+    this.previewCConf = previewCConf;\n+    this.previewHConf = previewHConf;\n+    this.previewSConf = previewSConf;\n+    this.datasetFramework = datasetFramework;\n+    this.secureStore = secureStore;\n+    this.discoveryService = discoveryService;\n+    this.transactionSystemClient = transactionSystemClient;\n+    this.maxConcurrentPreviews = previewCConf.getInt(Constants.Preview.CACHE_SIZE, 10);\n+    this.previewPollers = new ConcurrentHashMap<>();\n+    this.previewRunnerModule = previewRunnerModule;\n+    this.previewLevelDBTableService = previewLevelDBTableService;\n+    this.previewRequestFetcherFactory = previewRequestFetcherFactory;\n+  }\n+\n+  @Override\n+  protected synchronized void startUp() throws Exception {\n+    previewInjector = createPreviewInjector();\n+    // Create and start the preview poller services.\n+    for (int i = 0; i < maxConcurrentPreviews; i++) {\n+      String pollerInfo = UUID.randomUUID().toString();\n+\n+      PreviewRunnerService pollerService = new PreviewRunnerService(\n+        previewCConf, previewInjector.getInstance(PreviewRunner.class),\n+        previewRequestFetcherFactory.create(Bytes.toBytes(pollerInfo)));\n+\n+      pollerService.startAndWait();\n+      previewPollers.put(pollerInfo, pollerService);\n+    }\n+    PreviewRunner runner = previewInjector.getInstance(PreviewRunner.class);", "originalCommit": "7ccd1e522b2d58ba2e2bcd64369044c24c661c6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4MjY0Nw==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r458982647", "bodyText": "Should be logged as warning.", "author": "chtyim", "createdAt": "2020-07-22T18:03:04Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/DefaultPreviewRunnerManager.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.app.preview;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.util.concurrent.AbstractIdleService;\n+import com.google.common.util.concurrent.Service;\n+import com.google.inject.AbstractModule;\n+import com.google.inject.Guice;\n+import com.google.inject.Inject;\n+import com.google.inject.Injector;\n+import com.google.inject.Provides;\n+import com.google.inject.name.Named;\n+import com.google.inject.util.Modules;\n+import io.cdap.cdap.api.common.Bytes;\n+import io.cdap.cdap.api.security.store.SecureStore;\n+import io.cdap.cdap.app.guice.ProgramRunnerRuntimeModule;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.conf.SConfiguration;\n+import io.cdap.cdap.common.guice.ConfigModule;\n+import io.cdap.cdap.common.guice.IOModule;\n+import io.cdap.cdap.common.guice.LocalLocationModule;\n+import io.cdap.cdap.common.guice.preview.PreviewDiscoveryRuntimeModule;\n+import io.cdap.cdap.common.utils.Networks;\n+import io.cdap.cdap.config.guice.ConfigStoreModule;\n+import io.cdap.cdap.data.runtime.DataSetServiceModules;\n+import io.cdap.cdap.data.runtime.DataSetsModules;\n+import io.cdap.cdap.data.runtime.preview.PreviewDataModules;\n+import io.cdap.cdap.data2.dataset2.DatasetFramework;\n+import io.cdap.cdap.data2.dataset2.lib.table.leveldb.LevelDBTableService;\n+import io.cdap.cdap.data2.metadata.writer.MetadataServiceClient;\n+import io.cdap.cdap.data2.metadata.writer.NoOpMetadataServiceClient;\n+import io.cdap.cdap.internal.app.preview.PreviewRequestFetcherFactory;\n+import io.cdap.cdap.internal.app.preview.PreviewRunnerService;\n+import io.cdap.cdap.internal.provision.ProvisionerModule;\n+import io.cdap.cdap.logging.guice.LocalLogAppenderModule;\n+import io.cdap.cdap.messaging.guice.MessagingServerRuntimeModule;\n+import io.cdap.cdap.metadata.MetadataReaderWriterModules;\n+import io.cdap.cdap.metrics.guice.MetricsClientRuntimeModule;\n+import io.cdap.cdap.security.auth.context.AuthenticationContextModules;\n+import io.cdap.cdap.security.guice.preview.PreviewSecureStoreModule;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.tephra.TransactionSystemClient;\n+import org.apache.twill.discovery.DiscoveryService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Service for managing {@link PreviewRunnerService}.\n+ */\n+public class DefaultPreviewRunnerManager extends AbstractIdleService implements PreviewRunnerManager {\n+  private static final Logger LOG = LoggerFactory.getLogger(DefaultPreviewRunnerManager.class);\n+\n+  private final CConfiguration previewCConf;\n+  private final Configuration previewHConf;\n+  private final SConfiguration previewSConf;\n+  private final int maxConcurrentPreviews;\n+  private final DiscoveryService discoveryService;\n+  private final DatasetFramework datasetFramework;\n+  private final SecureStore secureStore;\n+  private final TransactionSystemClient transactionSystemClient;\n+  private Injector previewInjector;\n+  private final PreviewRunnerModule previewRunnerModule;\n+  private final Map<String, PreviewRunnerService> previewPollers;\n+  private final LevelDBTableService previewLevelDBTableService;\n+  private final PreviewRequestFetcherFactory previewRequestFetcherFactory;\n+\n+  @Inject\n+  DefaultPreviewRunnerManager(\n+    @Named(PreviewConfigModule.PREVIEW_CCONF) CConfiguration previewCConf,\n+    @Named(PreviewConfigModule.PREVIEW_HCONF) Configuration previewHConf,\n+    @Named(PreviewConfigModule.PREVIEW_SCONF) SConfiguration previewSConf,\n+    SecureStore secureStore, DiscoveryService discoveryService,\n+    @Named(DataSetsModules.BASE_DATASET_FRAMEWORK) DatasetFramework datasetFramework,\n+    TransactionSystemClient transactionSystemClient,\n+    @Named(PreviewConfigModule.PREVIEW_LEVEL_DB) LevelDBTableService previewLevelDBTableService,\n+    PreviewRunnerModule previewRunnerModule, PreviewRequestFetcherFactory previewRequestFetcherFactory) {\n+    this.previewCConf = previewCConf;\n+    this.previewHConf = previewHConf;\n+    this.previewSConf = previewSConf;\n+    this.datasetFramework = datasetFramework;\n+    this.secureStore = secureStore;\n+    this.discoveryService = discoveryService;\n+    this.transactionSystemClient = transactionSystemClient;\n+    this.maxConcurrentPreviews = previewCConf.getInt(Constants.Preview.CACHE_SIZE, 10);\n+    this.previewPollers = new ConcurrentHashMap<>();\n+    this.previewRunnerModule = previewRunnerModule;\n+    this.previewLevelDBTableService = previewLevelDBTableService;\n+    this.previewRequestFetcherFactory = previewRequestFetcherFactory;\n+  }\n+\n+  @Override\n+  protected synchronized void startUp() throws Exception {\n+    previewInjector = createPreviewInjector();\n+    // Create and start the preview poller services.\n+    for (int i = 0; i < maxConcurrentPreviews; i++) {\n+      String pollerInfo = UUID.randomUUID().toString();\n+\n+      PreviewRunnerService pollerService = new PreviewRunnerService(\n+        previewCConf, previewInjector.getInstance(PreviewRunner.class),\n+        previewRequestFetcherFactory.create(Bytes.toBytes(pollerInfo)));\n+\n+      pollerService.startAndWait();\n+      previewPollers.put(pollerInfo, pollerService);\n+    }\n+    PreviewRunner runner = previewInjector.getInstance(PreviewRunner.class);\n+    if (runner instanceof Service) {\n+      ((Service) runner).startAndWait();\n+    }\n+  }\n+\n+  @Override\n+  protected synchronized void shutDown() throws Exception {\n+    PreviewRunner runner = previewInjector.getInstance(PreviewRunner.class);\n+    if (runner instanceof Service) {\n+      stopQuietly((Service) runner);\n+    }\n+\n+    for (Service pollerService : previewPollers.values()) {\n+      stopQuietly(pollerService);\n+    }\n+  }\n+\n+  private void stopQuietly(Service service) {\n+    try {\n+      service.stopAndWait();\n+    } catch (Exception e) {\n+      LOG.debug(\"Error stopping the preview runner.\", e);", "originalCommit": "7ccd1e522b2d58ba2e2bcd64369044c24c661c6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAyNjM4Nw==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r459026387", "bodyText": "+1", "author": "sagarkapare", "createdAt": "2020-07-22T19:18:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4MjY0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4MzA2Nw==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r458983067", "bodyText": "No need to declare msg. Just move the message into the Exception constructor.", "author": "chtyim", "createdAt": "2020-07-22T18:03:45Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/DefaultPreviewRunnerManager.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.app.preview;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.util.concurrent.AbstractIdleService;\n+import com.google.common.util.concurrent.Service;\n+import com.google.inject.AbstractModule;\n+import com.google.inject.Guice;\n+import com.google.inject.Inject;\n+import com.google.inject.Injector;\n+import com.google.inject.Provides;\n+import com.google.inject.name.Named;\n+import com.google.inject.util.Modules;\n+import io.cdap.cdap.api.common.Bytes;\n+import io.cdap.cdap.api.security.store.SecureStore;\n+import io.cdap.cdap.app.guice.ProgramRunnerRuntimeModule;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.conf.SConfiguration;\n+import io.cdap.cdap.common.guice.ConfigModule;\n+import io.cdap.cdap.common.guice.IOModule;\n+import io.cdap.cdap.common.guice.LocalLocationModule;\n+import io.cdap.cdap.common.guice.preview.PreviewDiscoveryRuntimeModule;\n+import io.cdap.cdap.common.utils.Networks;\n+import io.cdap.cdap.config.guice.ConfigStoreModule;\n+import io.cdap.cdap.data.runtime.DataSetServiceModules;\n+import io.cdap.cdap.data.runtime.DataSetsModules;\n+import io.cdap.cdap.data.runtime.preview.PreviewDataModules;\n+import io.cdap.cdap.data2.dataset2.DatasetFramework;\n+import io.cdap.cdap.data2.dataset2.lib.table.leveldb.LevelDBTableService;\n+import io.cdap.cdap.data2.metadata.writer.MetadataServiceClient;\n+import io.cdap.cdap.data2.metadata.writer.NoOpMetadataServiceClient;\n+import io.cdap.cdap.internal.app.preview.PreviewRequestFetcherFactory;\n+import io.cdap.cdap.internal.app.preview.PreviewRunnerService;\n+import io.cdap.cdap.internal.provision.ProvisionerModule;\n+import io.cdap.cdap.logging.guice.LocalLogAppenderModule;\n+import io.cdap.cdap.messaging.guice.MessagingServerRuntimeModule;\n+import io.cdap.cdap.metadata.MetadataReaderWriterModules;\n+import io.cdap.cdap.metrics.guice.MetricsClientRuntimeModule;\n+import io.cdap.cdap.security.auth.context.AuthenticationContextModules;\n+import io.cdap.cdap.security.guice.preview.PreviewSecureStoreModule;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.tephra.TransactionSystemClient;\n+import org.apache.twill.discovery.DiscoveryService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Service for managing {@link PreviewRunnerService}.\n+ */\n+public class DefaultPreviewRunnerManager extends AbstractIdleService implements PreviewRunnerManager {\n+  private static final Logger LOG = LoggerFactory.getLogger(DefaultPreviewRunnerManager.class);\n+\n+  private final CConfiguration previewCConf;\n+  private final Configuration previewHConf;\n+  private final SConfiguration previewSConf;\n+  private final int maxConcurrentPreviews;\n+  private final DiscoveryService discoveryService;\n+  private final DatasetFramework datasetFramework;\n+  private final SecureStore secureStore;\n+  private final TransactionSystemClient transactionSystemClient;\n+  private Injector previewInjector;\n+  private final PreviewRunnerModule previewRunnerModule;\n+  private final Map<String, PreviewRunnerService> previewPollers;\n+  private final LevelDBTableService previewLevelDBTableService;\n+  private final PreviewRequestFetcherFactory previewRequestFetcherFactory;\n+\n+  @Inject\n+  DefaultPreviewRunnerManager(\n+    @Named(PreviewConfigModule.PREVIEW_CCONF) CConfiguration previewCConf,\n+    @Named(PreviewConfigModule.PREVIEW_HCONF) Configuration previewHConf,\n+    @Named(PreviewConfigModule.PREVIEW_SCONF) SConfiguration previewSConf,\n+    SecureStore secureStore, DiscoveryService discoveryService,\n+    @Named(DataSetsModules.BASE_DATASET_FRAMEWORK) DatasetFramework datasetFramework,\n+    TransactionSystemClient transactionSystemClient,\n+    @Named(PreviewConfigModule.PREVIEW_LEVEL_DB) LevelDBTableService previewLevelDBTableService,\n+    PreviewRunnerModule previewRunnerModule, PreviewRequestFetcherFactory previewRequestFetcherFactory) {\n+    this.previewCConf = previewCConf;\n+    this.previewHConf = previewHConf;\n+    this.previewSConf = previewSConf;\n+    this.datasetFramework = datasetFramework;\n+    this.secureStore = secureStore;\n+    this.discoveryService = discoveryService;\n+    this.transactionSystemClient = transactionSystemClient;\n+    this.maxConcurrentPreviews = previewCConf.getInt(Constants.Preview.CACHE_SIZE, 10);\n+    this.previewPollers = new ConcurrentHashMap<>();\n+    this.previewRunnerModule = previewRunnerModule;\n+    this.previewLevelDBTableService = previewLevelDBTableService;\n+    this.previewRequestFetcherFactory = previewRequestFetcherFactory;\n+  }\n+\n+  @Override\n+  protected synchronized void startUp() throws Exception {\n+    previewInjector = createPreviewInjector();\n+    // Create and start the preview poller services.\n+    for (int i = 0; i < maxConcurrentPreviews; i++) {\n+      String pollerInfo = UUID.randomUUID().toString();\n+\n+      PreviewRunnerService pollerService = new PreviewRunnerService(\n+        previewCConf, previewInjector.getInstance(PreviewRunner.class),\n+        previewRequestFetcherFactory.create(Bytes.toBytes(pollerInfo)));\n+\n+      pollerService.startAndWait();\n+      previewPollers.put(pollerInfo, pollerService);\n+    }\n+    PreviewRunner runner = previewInjector.getInstance(PreviewRunner.class);\n+    if (runner instanceof Service) {\n+      ((Service) runner).startAndWait();\n+    }\n+  }\n+\n+  @Override\n+  protected synchronized void shutDown() throws Exception {\n+    PreviewRunner runner = previewInjector.getInstance(PreviewRunner.class);\n+    if (runner instanceof Service) {\n+      stopQuietly((Service) runner);\n+    }\n+\n+    for (Service pollerService : previewPollers.values()) {\n+      stopQuietly(pollerService);\n+    }\n+  }\n+\n+  private void stopQuietly(Service service) {\n+    try {\n+      service.stopAndWait();\n+    } catch (Exception e) {\n+      LOG.debug(\"Error stopping the preview runner.\", e);\n+    }\n+  }\n+\n+  @Override\n+  public void stop(byte[] runnerId) throws Exception {\n+    PreviewRunnerService service = previewPollers.get(Bytes.toString(runnerId));\n+    if (service == null) {\n+      String msg = \"Preview run cannot be stopped. Please try stopping again or start new preview run.\";", "originalCommit": "7ccd1e522b2d58ba2e2bcd64369044c24c661c6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAyNjMxNQ==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r459026315", "bodyText": "done.", "author": "sagarkapare", "createdAt": "2020-07-22T19:18:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4MzA2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4MzYwMw==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r458983603", "bodyText": "Should use more specify exception. E.g. NotFoundException, since the given runner id is not found?", "author": "chtyim", "createdAt": "2020-07-22T18:04:28Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/DefaultPreviewRunnerManager.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.app.preview;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.util.concurrent.AbstractIdleService;\n+import com.google.common.util.concurrent.Service;\n+import com.google.inject.AbstractModule;\n+import com.google.inject.Guice;\n+import com.google.inject.Inject;\n+import com.google.inject.Injector;\n+import com.google.inject.Provides;\n+import com.google.inject.name.Named;\n+import com.google.inject.util.Modules;\n+import io.cdap.cdap.api.common.Bytes;\n+import io.cdap.cdap.api.security.store.SecureStore;\n+import io.cdap.cdap.app.guice.ProgramRunnerRuntimeModule;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.conf.SConfiguration;\n+import io.cdap.cdap.common.guice.ConfigModule;\n+import io.cdap.cdap.common.guice.IOModule;\n+import io.cdap.cdap.common.guice.LocalLocationModule;\n+import io.cdap.cdap.common.guice.preview.PreviewDiscoveryRuntimeModule;\n+import io.cdap.cdap.common.utils.Networks;\n+import io.cdap.cdap.config.guice.ConfigStoreModule;\n+import io.cdap.cdap.data.runtime.DataSetServiceModules;\n+import io.cdap.cdap.data.runtime.DataSetsModules;\n+import io.cdap.cdap.data.runtime.preview.PreviewDataModules;\n+import io.cdap.cdap.data2.dataset2.DatasetFramework;\n+import io.cdap.cdap.data2.dataset2.lib.table.leveldb.LevelDBTableService;\n+import io.cdap.cdap.data2.metadata.writer.MetadataServiceClient;\n+import io.cdap.cdap.data2.metadata.writer.NoOpMetadataServiceClient;\n+import io.cdap.cdap.internal.app.preview.PreviewRequestFetcherFactory;\n+import io.cdap.cdap.internal.app.preview.PreviewRunnerService;\n+import io.cdap.cdap.internal.provision.ProvisionerModule;\n+import io.cdap.cdap.logging.guice.LocalLogAppenderModule;\n+import io.cdap.cdap.messaging.guice.MessagingServerRuntimeModule;\n+import io.cdap.cdap.metadata.MetadataReaderWriterModules;\n+import io.cdap.cdap.metrics.guice.MetricsClientRuntimeModule;\n+import io.cdap.cdap.security.auth.context.AuthenticationContextModules;\n+import io.cdap.cdap.security.guice.preview.PreviewSecureStoreModule;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.tephra.TransactionSystemClient;\n+import org.apache.twill.discovery.DiscoveryService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Service for managing {@link PreviewRunnerService}.\n+ */\n+public class DefaultPreviewRunnerManager extends AbstractIdleService implements PreviewRunnerManager {\n+  private static final Logger LOG = LoggerFactory.getLogger(DefaultPreviewRunnerManager.class);\n+\n+  private final CConfiguration previewCConf;\n+  private final Configuration previewHConf;\n+  private final SConfiguration previewSConf;\n+  private final int maxConcurrentPreviews;\n+  private final DiscoveryService discoveryService;\n+  private final DatasetFramework datasetFramework;\n+  private final SecureStore secureStore;\n+  private final TransactionSystemClient transactionSystemClient;\n+  private Injector previewInjector;\n+  private final PreviewRunnerModule previewRunnerModule;\n+  private final Map<String, PreviewRunnerService> previewPollers;\n+  private final LevelDBTableService previewLevelDBTableService;\n+  private final PreviewRequestFetcherFactory previewRequestFetcherFactory;\n+\n+  @Inject\n+  DefaultPreviewRunnerManager(\n+    @Named(PreviewConfigModule.PREVIEW_CCONF) CConfiguration previewCConf,\n+    @Named(PreviewConfigModule.PREVIEW_HCONF) Configuration previewHConf,\n+    @Named(PreviewConfigModule.PREVIEW_SCONF) SConfiguration previewSConf,\n+    SecureStore secureStore, DiscoveryService discoveryService,\n+    @Named(DataSetsModules.BASE_DATASET_FRAMEWORK) DatasetFramework datasetFramework,\n+    TransactionSystemClient transactionSystemClient,\n+    @Named(PreviewConfigModule.PREVIEW_LEVEL_DB) LevelDBTableService previewLevelDBTableService,\n+    PreviewRunnerModule previewRunnerModule, PreviewRequestFetcherFactory previewRequestFetcherFactory) {\n+    this.previewCConf = previewCConf;\n+    this.previewHConf = previewHConf;\n+    this.previewSConf = previewSConf;\n+    this.datasetFramework = datasetFramework;\n+    this.secureStore = secureStore;\n+    this.discoveryService = discoveryService;\n+    this.transactionSystemClient = transactionSystemClient;\n+    this.maxConcurrentPreviews = previewCConf.getInt(Constants.Preview.CACHE_SIZE, 10);\n+    this.previewPollers = new ConcurrentHashMap<>();\n+    this.previewRunnerModule = previewRunnerModule;\n+    this.previewLevelDBTableService = previewLevelDBTableService;\n+    this.previewRequestFetcherFactory = previewRequestFetcherFactory;\n+  }\n+\n+  @Override\n+  protected synchronized void startUp() throws Exception {\n+    previewInjector = createPreviewInjector();\n+    // Create and start the preview poller services.\n+    for (int i = 0; i < maxConcurrentPreviews; i++) {\n+      String pollerInfo = UUID.randomUUID().toString();\n+\n+      PreviewRunnerService pollerService = new PreviewRunnerService(\n+        previewCConf, previewInjector.getInstance(PreviewRunner.class),\n+        previewRequestFetcherFactory.create(Bytes.toBytes(pollerInfo)));\n+\n+      pollerService.startAndWait();\n+      previewPollers.put(pollerInfo, pollerService);\n+    }\n+    PreviewRunner runner = previewInjector.getInstance(PreviewRunner.class);\n+    if (runner instanceof Service) {\n+      ((Service) runner).startAndWait();\n+    }\n+  }\n+\n+  @Override\n+  protected synchronized void shutDown() throws Exception {\n+    PreviewRunner runner = previewInjector.getInstance(PreviewRunner.class);\n+    if (runner instanceof Service) {\n+      stopQuietly((Service) runner);\n+    }\n+\n+    for (Service pollerService : previewPollers.values()) {\n+      stopQuietly(pollerService);\n+    }\n+  }\n+\n+  private void stopQuietly(Service service) {\n+    try {\n+      service.stopAndWait();\n+    } catch (Exception e) {\n+      LOG.debug(\"Error stopping the preview runner.\", e);\n+    }\n+  }\n+\n+  @Override\n+  public void stop(byte[] runnerId) throws Exception {\n+    PreviewRunnerService service = previewPollers.get(Bytes.toString(runnerId));\n+    if (service == null) {\n+      String msg = \"Preview run cannot be stopped. Please try stopping again or start new preview run.\";\n+      throw new Exception(msg);", "originalCommit": "7ccd1e522b2d58ba2e2bcd64369044c24c661c6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAyNjI0Nw==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r459026247", "bodyText": "+1", "author": "sagarkapare", "createdAt": "2020-07-22T19:18:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4MzYwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4NjE5NA==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r458986194", "bodyText": "It says getting RunRecord, but what it returns is just the run id. Shall we rename the method?", "author": "chtyim", "createdAt": "2020-07-22T18:08:35Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/PreviewManager.java", "diffHunk": "@@ -35,10 +43,40 @@\n   ApplicationId start(NamespaceId namespace, AppRequest<?> request) throws Exception;\n \n   /**\n-   * Get the {@link PreviewRunner} responsible for managing the preview.\n-   * @return the {@link PreviewRunner} associated with the preview\n+   * Get the status of the preview.\n+   * @param applicationId id of the preview application for which preview status is to be returned\n+   * @return the status of the preview\n+   * @throws NotFoundException if preview application is not found\n+   */\n+  PreviewStatus getStatus(ApplicationId applicationId) throws NotFoundException;\n+\n+  /**\n+   * Stop the preview run represented by this {@link ApplicationId}.\n+   * @param applicationId id of the preview\n+   * @throws Exception thrown when any error in stopping the preview run\n+   */\n+  void stopPreview(ApplicationId applicationId) throws Exception;\n+\n+  /**\n+   * Get the data associated with the preview run represented by this {@link PreviewRunner}.\n+   * @param applicationId the id of the preview application\n+   * @param tracerName the name of the tracer used for preview\n+   * @return the {@link Map} of properties associated with the tracer for a given preview\n+   */\n+  Map<String, List<JsonElement>> getData(ApplicationId applicationId, String tracerName);\n+\n+  /**\n+   * Get the run record of the program executed as a part of preview.\n+   * @param applicationId the id of the preview application\n+   * @return the {@link ProgramRunId} associated with the preview or {@code null} if there is no run record\n+   */\n+  ProgramRunId getRunRecord(ApplicationId applicationId) throws Exception;", "originalCommit": "7ccd1e522b2d58ba2e2bcd64369044c24c661c6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAyNjE3OQ==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r459026179", "bodyText": "Renamed method.", "author": "sagarkapare", "createdAt": "2020-07-22T19:18:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4NjE5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4Nzk0OA==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r458987948", "bodyText": "It's better to use the java.util.Objects then the one from guava.", "author": "chtyim", "createdAt": "2020-07-22T18:11:46Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/PreviewStatus.java", "diffHunk": "@@ -16,9 +16,9 @@\n \n package io.cdap.cdap.app.preview;\n \n+import com.google.common.base.Objects;", "originalCommit": "7ccd1e522b2d58ba2e2bcd64369044c24c661c6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAyNTY4NA==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r459025684", "bodyText": "done.", "author": "sagarkapare", "createdAt": "2020-07-22T19:17:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4Nzk0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk5MTI4OQ==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r458991289", "bodyText": "You can simplify to\nthis.requestQueue = previewStore.getAllInWaitingState().stream()\n  .filter(DefaultPreviewRequestQueue::isValid)\n  .collect(Collectors.toCollection(ConcurrentLinkedDeque::new));\n\nwith the isValid a static method, which basically is flipping the isTimedOut method.", "author": "chtyim", "createdAt": "2020-07-22T18:17:51Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/preview/DefaultPreviewRequestQueue.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.preview;\n+\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.preview.PreviewRequest;\n+import io.cdap.cdap.app.preview.PreviewRequestQueue;\n+import io.cdap.cdap.app.preview.PreviewRequestQueueState;\n+import io.cdap.cdap.app.store.preview.PreviewStore;\n+import io.cdap.cdap.common.ConflictException;\n+import io.cdap.cdap.common.app.RunIds;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import net.jcip.annotations.ThreadSafe;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentLinkedDeque;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Thread-safe implementation of {@link PreviewRequestQueue} backed by {@link PreviewStore}.\n+ */\n+@ThreadSafe\n+public class DefaultPreviewRequestQueue implements PreviewRequestQueue {\n+  private static final Logger LOG = LoggerFactory.getLogger(DefaultPreviewRequestQueue.class);\n+  private final PreviewStore previewStore;\n+  private final ConcurrentLinkedDeque<PreviewRequest> requestQueue;\n+  private final int capacity;\n+  private final long waitTimeOut;\n+  private final AtomicInteger queueSize;\n+\n+  @Inject\n+  public DefaultPreviewRequestQueue(CConfiguration cConf, PreviewStore previewStore) {\n+    this.previewStore = previewStore;\n+    this.capacity = cConf.getInt(Constants.Preview.WAITING_QUEUE_CAPACITY, 50);\n+    this.waitTimeOut = cConf.getLong(Constants.Preview.WAITING_QUEUE_TIMEOUT_SECONDS, 60);\n+    this.requestQueue = new ConcurrentLinkedDeque<>();\n+    this.queueSize = new AtomicInteger();\n+    List<PreviewRequest> allInWaitingState = previewStore.getAllInWaitingState();\n+    for (PreviewRequest request : allInWaitingState) {", "originalCommit": "7ccd1e522b2d58ba2e2bcd64369044c24c661c6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAyNTYxNg==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r459025616", "bodyText": "isValid also depends on the member field waitTimeOut so couldn't make it static.", "author": "sagarkapare", "createdAt": "2020-07-22T19:17:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk5MTI4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAzNjU0NA==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r459036544", "bodyText": "you can pass it in through argument:\n.filter(r -> isValid(r, waitTimeOut))", "author": "chtyim", "createdAt": "2020-07-22T19:37:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk5MTI4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk5MTY1MQ==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r458991651", "bodyText": "Why we need to track it separated from the requestQueue.size()? It is better to use the queue size as the only source of truth.", "author": "chtyim", "createdAt": "2020-07-22T18:18:38Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/preview/DefaultPreviewRequestQueue.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.preview;\n+\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.preview.PreviewRequest;\n+import io.cdap.cdap.app.preview.PreviewRequestQueue;\n+import io.cdap.cdap.app.preview.PreviewRequestQueueState;\n+import io.cdap.cdap.app.store.preview.PreviewStore;\n+import io.cdap.cdap.common.ConflictException;\n+import io.cdap.cdap.common.app.RunIds;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import net.jcip.annotations.ThreadSafe;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentLinkedDeque;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Thread-safe implementation of {@link PreviewRequestQueue} backed by {@link PreviewStore}.\n+ */\n+@ThreadSafe\n+public class DefaultPreviewRequestQueue implements PreviewRequestQueue {\n+  private static final Logger LOG = LoggerFactory.getLogger(DefaultPreviewRequestQueue.class);\n+  private final PreviewStore previewStore;\n+  private final ConcurrentLinkedDeque<PreviewRequest> requestQueue;\n+  private final int capacity;\n+  private final long waitTimeOut;\n+  private final AtomicInteger queueSize;\n+\n+  @Inject\n+  public DefaultPreviewRequestQueue(CConfiguration cConf, PreviewStore previewStore) {\n+    this.previewStore = previewStore;\n+    this.capacity = cConf.getInt(Constants.Preview.WAITING_QUEUE_CAPACITY, 50);\n+    this.waitTimeOut = cConf.getLong(Constants.Preview.WAITING_QUEUE_TIMEOUT_SECONDS, 60);\n+    this.requestQueue = new ConcurrentLinkedDeque<>();\n+    this.queueSize = new AtomicInteger();", "originalCommit": "7ccd1e522b2d58ba2e2bcd64369044c24c661c6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAyNDg2NA==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r459024864", "bodyText": "fixed. Also made add method as synchronized. Did it in branch but moved that change to this PR.", "author": "sagarkapare", "createdAt": "2020-07-22T19:16:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk5MTY1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAzNDEzNg==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r459034136", "bodyText": "So where does the metrics go?? Inside the preview runner pod?", "author": "chtyim", "createdAt": "2020-07-22T19:33:13Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/DefaultPreviewRunnerManager.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.app.preview;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.util.concurrent.AbstractIdleService;\n+import com.google.common.util.concurrent.Service;\n+import com.google.inject.AbstractModule;\n+import com.google.inject.Guice;\n+import com.google.inject.Inject;\n+import com.google.inject.Injector;\n+import com.google.inject.Provides;\n+import com.google.inject.name.Named;\n+import com.google.inject.util.Modules;\n+import io.cdap.cdap.api.common.Bytes;\n+import io.cdap.cdap.api.security.store.SecureStore;\n+import io.cdap.cdap.app.guice.ProgramRunnerRuntimeModule;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.conf.SConfiguration;\n+import io.cdap.cdap.common.guice.ConfigModule;\n+import io.cdap.cdap.common.guice.IOModule;\n+import io.cdap.cdap.common.guice.LocalLocationModule;\n+import io.cdap.cdap.common.guice.preview.PreviewDiscoveryRuntimeModule;\n+import io.cdap.cdap.common.utils.Networks;\n+import io.cdap.cdap.config.guice.ConfigStoreModule;\n+import io.cdap.cdap.data.runtime.DataSetServiceModules;\n+import io.cdap.cdap.data.runtime.DataSetsModules;\n+import io.cdap.cdap.data.runtime.preview.PreviewDataModules;\n+import io.cdap.cdap.data2.dataset2.DatasetFramework;\n+import io.cdap.cdap.data2.dataset2.lib.table.leveldb.LevelDBTableService;\n+import io.cdap.cdap.data2.metadata.writer.MetadataServiceClient;\n+import io.cdap.cdap.data2.metadata.writer.NoOpMetadataServiceClient;\n+import io.cdap.cdap.internal.app.preview.PreviewRequestFetcherFactory;\n+import io.cdap.cdap.internal.app.preview.PreviewRunnerService;\n+import io.cdap.cdap.internal.provision.ProvisionerModule;\n+import io.cdap.cdap.logging.guice.LocalLogAppenderModule;\n+import io.cdap.cdap.messaging.guice.MessagingServerRuntimeModule;\n+import io.cdap.cdap.metadata.MetadataReaderWriterModules;\n+import io.cdap.cdap.metrics.guice.MetricsClientRuntimeModule;\n+import io.cdap.cdap.security.auth.context.AuthenticationContextModules;\n+import io.cdap.cdap.security.guice.preview.PreviewSecureStoreModule;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.tephra.TransactionSystemClient;\n+import org.apache.twill.discovery.DiscoveryService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Service for managing {@link PreviewRunnerService}.\n+ */\n+public class DefaultPreviewRunnerManager extends AbstractIdleService implements PreviewRunnerManager {\n+  private static final Logger LOG = LoggerFactory.getLogger(DefaultPreviewRunnerManager.class);\n+\n+  private final CConfiguration previewCConf;\n+  private final Configuration previewHConf;\n+  private final SConfiguration previewSConf;\n+  private final int maxConcurrentPreviews;\n+  private final DiscoveryService discoveryService;\n+  private final DatasetFramework datasetFramework;\n+  private final SecureStore secureStore;\n+  private final TransactionSystemClient transactionSystemClient;\n+  private Injector previewInjector;\n+  private final PreviewRunnerModule previewRunnerModule;\n+  private final Map<String, PreviewRunnerService> previewPollers;\n+  private final LevelDBTableService previewLevelDBTableService;\n+  private final PreviewRequestFetcherFactory previewRequestFetcherFactory;\n+\n+  @Inject\n+  DefaultPreviewRunnerManager(\n+    @Named(PreviewConfigModule.PREVIEW_CCONF) CConfiguration previewCConf,\n+    @Named(PreviewConfigModule.PREVIEW_HCONF) Configuration previewHConf,\n+    @Named(PreviewConfigModule.PREVIEW_SCONF) SConfiguration previewSConf,\n+    SecureStore secureStore, DiscoveryService discoveryService,\n+    @Named(DataSetsModules.BASE_DATASET_FRAMEWORK) DatasetFramework datasetFramework,\n+    TransactionSystemClient transactionSystemClient,\n+    @Named(PreviewConfigModule.PREVIEW_LEVEL_DB) LevelDBTableService previewLevelDBTableService,\n+    PreviewRunnerModule previewRunnerModule, PreviewRequestFetcherFactory previewRequestFetcherFactory) {\n+    this.previewCConf = previewCConf;\n+    this.previewHConf = previewHConf;\n+    this.previewSConf = previewSConf;\n+    this.datasetFramework = datasetFramework;\n+    this.secureStore = secureStore;\n+    this.discoveryService = discoveryService;\n+    this.transactionSystemClient = transactionSystemClient;\n+    this.maxConcurrentPreviews = previewCConf.getInt(Constants.Preview.CACHE_SIZE, 10);\n+    this.previewPollers = new ConcurrentHashMap<>();\n+    this.previewRunnerModule = previewRunnerModule;\n+    this.previewLevelDBTableService = previewLevelDBTableService;\n+    this.previewRequestFetcherFactory = previewRequestFetcherFactory;\n+  }\n+\n+  @Override\n+  protected void startUp() throws Exception {\n+    previewInjector = createPreviewInjector();\n+    // Create and start the preview poller services.\n+    for (int i = 0; i < maxConcurrentPreviews; i++) {\n+      String pollerInfo = UUID.randomUUID().toString();\n+\n+      PreviewRunnerService pollerService = new PreviewRunnerService(\n+        previewCConf, previewInjector.getInstance(PreviewRunner.class),\n+        previewRequestFetcherFactory.create(Bytes.toBytes(pollerInfo)));\n+\n+      pollerService.startAndWait();\n+      previewPollers.put(pollerInfo, pollerService);\n+    }\n+    PreviewRunner runner = previewInjector.getInstance(PreviewRunner.class);\n+    if (runner instanceof Service) {\n+      ((Service) runner).startAndWait();\n+    }\n+  }\n+\n+  @Override\n+  protected void shutDown() throws Exception {\n+    PreviewRunner runner = previewInjector.getInstance(PreviewRunner.class);\n+    if (runner instanceof Service) {\n+      stopQuietly((Service) runner);\n+    }\n+\n+    for (Service pollerService : previewPollers.values()) {\n+      stopQuietly(pollerService);\n+    }\n+  }\n+\n+  private void stopQuietly(Service service) {\n+    try {\n+      service.stopAndWait();\n+    } catch (Exception e) {\n+      LOG.warn(\"Error stopping the preview runner.\", e);\n+    }\n+  }\n+\n+  @Override\n+  public void stop(byte[] runnerId) throws Exception {\n+    PreviewRunnerService service = previewPollers.get(Bytes.toString(runnerId));\n+    if (service == null) {\n+      throw new NotFoundException(\"Preview run cannot be stopped. Please try stopping again or start new preview run.\");\n+    }\n+    service.stopAndWait();\n+    String newRunnerId = UUID.randomUUID().toString();\n+    PreviewRunnerService newService = new PreviewRunnerService(\n+      previewCConf, previewInjector.getInstance(PreviewRunner.class),\n+      previewRequestFetcherFactory.create(Bytes.toBytes(newRunnerId)));\n+    newService.startAndWait();\n+    previewPollers.put(newRunnerId, newService);\n+  }\n+\n+  /**\n+   * Create injector for the given application id.\n+   */\n+  @VisibleForTesting\n+  Injector createPreviewInjector() throws IOException {\n+    return Guice.createInjector(\n+      new ConfigModule(previewCConf, previewHConf, previewSConf),\n+      new IOModule(),\n+      new AuthenticationContextModules().getMasterModule(),\n+      new PreviewSecureStoreModule(secureStore),\n+      new PreviewDiscoveryRuntimeModule(discoveryService),\n+      new LocalLocationModule(),\n+      new ConfigStoreModule(),\n+      previewRunnerModule,\n+      new ProgramRunnerRuntimeModule().getStandaloneModules(),\n+      new PreviewDataModules().getDataFabricModule(transactionSystemClient, previewLevelDBTableService),\n+      new PreviewDataModules().getDataSetsModule(datasetFramework),\n+      new DataSetServiceModules().getStandaloneModules(),\n+      // Use the in-memory module for metrics collection, which metrics still get persisted to dataset, but\n+      // save threads for reading metrics from TMS, as there won't be metrics in TMS.\n+      new MetricsClientRuntimeModule().getInMemoryModules(),", "originalCommit": "9cbf63e82a4a7bffaf80c62e9242bbd5763fb1b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE0MDUzNA==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r459140534", "bodyText": "Currently yes. Will add this change in separate PR.", "author": "sagarkapare", "createdAt": "2020-07-22T23:30:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAzNDEzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAzNTYxNw==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r459035617", "bodyText": "Missing javadoc.", "author": "chtyim", "createdAt": "2020-07-22T19:36:05Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/PreviewRunnerManagerModule.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright \u00a9 2016-2019 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.app.preview;\n+\n+import com.google.inject.PrivateModule;\n+import com.google.inject.Provides;\n+import com.google.inject.Scopes;\n+import com.google.inject.Singleton;\n+import com.google.inject.name.Names;\n+import io.cdap.cdap.data.runtime.DataSetsModules;\n+import io.cdap.cdap.data2.datafabric.dataset.RemoteDatasetFramework;\n+import io.cdap.cdap.data2.dataset2.DatasetDefinitionRegistryFactory;\n+import io.cdap.cdap.data2.dataset2.DatasetFramework;\n+import io.cdap.cdap.data2.dataset2.DefaultDatasetDefinitionRegistryFactory;\n+import io.cdap.cdap.internal.app.preview.DirectPreviewRequestFetcherFactory;\n+import io.cdap.cdap.internal.app.preview.PreviewRequestFetcherFactory;\n+import io.cdap.cdap.internal.app.preview.PreviewRunnerServiceStopper;\n+\n+/**\n+ *", "originalCommit": "9cbf63e82a4a7bffaf80c62e9242bbd5763fb1b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE0MDA5OA==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r459140098", "bodyText": "fixed.", "author": "sagarkapare", "createdAt": "2020-07-22T23:29:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAzNTYxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAzOTUzMQ==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r459039531", "bodyText": "Shouldn't synchronize the whole method. You can use a BlockingDeque to limit the capacity so that it can never grow beyond a given size in a concurrent safe way.", "author": "chtyim", "createdAt": "2020-07-22T19:43:13Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/preview/DefaultPreviewRequestQueue.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.preview;\n+\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.preview.PreviewRequest;\n+import io.cdap.cdap.app.preview.PreviewRequestQueue;\n+import io.cdap.cdap.app.preview.PreviewRequestQueueState;\n+import io.cdap.cdap.app.store.preview.PreviewStore;\n+import io.cdap.cdap.common.ConflictException;\n+import io.cdap.cdap.common.app.RunIds;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import net.jcip.annotations.ThreadSafe;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentLinkedDeque;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Thread-safe implementation of {@link PreviewRequestQueue} backed by {@link PreviewStore}.\n+ */\n+@ThreadSafe\n+public class DefaultPreviewRequestQueue implements PreviewRequestQueue {\n+  private static final Logger LOG = LoggerFactory.getLogger(DefaultPreviewRequestQueue.class);\n+  private final PreviewStore previewStore;\n+  private final ConcurrentLinkedDeque<PreviewRequest> requestQueue;\n+  private final int capacity;\n+  private final long waitTimeOut;\n+\n+  @Inject\n+  public DefaultPreviewRequestQueue(CConfiguration cConf, PreviewStore previewStore) {\n+    this.previewStore = previewStore;\n+    this.capacity = cConf.getInt(Constants.Preview.WAITING_QUEUE_CAPACITY, 50);\n+    this.waitTimeOut = cConf.getLong(Constants.Preview.WAITING_QUEUE_TIMEOUT_SECONDS, 60);\n+    this.requestQueue = new ConcurrentLinkedDeque<>();\n+    List<PreviewRequest> allInWaitingState = previewStore.getAllInWaitingState();\n+    for (PreviewRequest request : allInWaitingState) {\n+      if (isTimedOut(request)) {\n+        continue;\n+      }\n+      requestQueue.add(request);\n+    }\n+  }\n+\n+  @Override\n+  public Optional<PreviewRequest> poll(byte[] pollerInfo) {\n+    while (true) {\n+      PreviewRequest previewRequest = requestQueue.poll();\n+      if (previewRequest == null) {\n+        return Optional.empty();\n+      }\n+\n+      if (isTimedOut(previewRequest)) {\n+        LOG.warn(\"Preview request wth application id {} is timed out. Ignoring it.\",\n+                 previewRequest.getProgram().getParent());\n+        continue;\n+      }\n+\n+      try {\n+        previewStore.setPreviewRequestPollerInfo(previewRequest.getProgram().getParent(), pollerInfo);\n+      } catch (ConflictException e) {\n+        LOG.debug(\"Preview application with id {} is not present in WAITING state. Ignoring the preview.\",\n+                  previewRequest.getProgram().getParent());\n+        continue;\n+      } catch (Exception e) {\n+        LOG.warn(\"Error while setting the poller info for preview request with application id {}. Trying again\",\n+                 previewRequest.getProgram().getParent(), e);\n+        requestQueue.addFirst(previewRequest);\n+        continue;\n+      }\n+\n+      return Optional.of(previewRequest);\n+    }\n+  }\n+\n+  @Override\n+  public synchronized void add(PreviewRequest previewRequest) {", "originalCommit": "9cbf63e82a4a7bffaf80c62e9242bbd5763fb1b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE0MDA0OQ==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r459140049", "bodyText": "done.", "author": "sagarkapare", "createdAt": "2020-07-22T23:29:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAzOTUzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA0MDU3Ng==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r459040576", "bodyText": "Under concurrent condition, this is possible for the queue to grow beyond the allowed size. Better use BlockingDeque and not to add it back, but rather retry locally for calling the setPreviewRequestPollerInfo method (probably with a RetryStrategy to avoid infinite retry like the logic in here).", "author": "chtyim", "createdAt": "2020-07-22T19:45:13Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/preview/DefaultPreviewRequestQueue.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.preview;\n+\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.preview.PreviewRequest;\n+import io.cdap.cdap.app.preview.PreviewRequestQueue;\n+import io.cdap.cdap.app.preview.PreviewRequestQueueState;\n+import io.cdap.cdap.app.store.preview.PreviewStore;\n+import io.cdap.cdap.common.ConflictException;\n+import io.cdap.cdap.common.app.RunIds;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import net.jcip.annotations.ThreadSafe;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentLinkedDeque;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Thread-safe implementation of {@link PreviewRequestQueue} backed by {@link PreviewStore}.\n+ */\n+@ThreadSafe\n+public class DefaultPreviewRequestQueue implements PreviewRequestQueue {\n+  private static final Logger LOG = LoggerFactory.getLogger(DefaultPreviewRequestQueue.class);\n+  private final PreviewStore previewStore;\n+  private final ConcurrentLinkedDeque<PreviewRequest> requestQueue;\n+  private final int capacity;\n+  private final long waitTimeOut;\n+\n+  @Inject\n+  public DefaultPreviewRequestQueue(CConfiguration cConf, PreviewStore previewStore) {\n+    this.previewStore = previewStore;\n+    this.capacity = cConf.getInt(Constants.Preview.WAITING_QUEUE_CAPACITY, 50);\n+    this.waitTimeOut = cConf.getLong(Constants.Preview.WAITING_QUEUE_TIMEOUT_SECONDS, 60);\n+    this.requestQueue = new ConcurrentLinkedDeque<>();\n+    List<PreviewRequest> allInWaitingState = previewStore.getAllInWaitingState();\n+    for (PreviewRequest request : allInWaitingState) {\n+      if (isTimedOut(request)) {\n+        continue;\n+      }\n+      requestQueue.add(request);\n+    }\n+  }\n+\n+  @Override\n+  public Optional<PreviewRequest> poll(byte[] pollerInfo) {\n+    while (true) {\n+      PreviewRequest previewRequest = requestQueue.poll();\n+      if (previewRequest == null) {\n+        return Optional.empty();\n+      }\n+\n+      if (isTimedOut(previewRequest)) {\n+        LOG.warn(\"Preview request wth application id {} is timed out. Ignoring it.\",\n+                 previewRequest.getProgram().getParent());\n+        continue;\n+      }\n+\n+      try {\n+        previewStore.setPreviewRequestPollerInfo(previewRequest.getProgram().getParent(), pollerInfo);\n+      } catch (ConflictException e) {\n+        LOG.debug(\"Preview application with id {} is not present in WAITING state. Ignoring the preview.\",\n+                  previewRequest.getProgram().getParent());\n+        continue;\n+      } catch (Exception e) {\n+        LOG.warn(\"Error while setting the poller info for preview request with application id {}. Trying again\",\n+                 previewRequest.getProgram().getParent(), e);\n+        requestQueue.addFirst(previewRequest);", "originalCommit": "9cbf63e82a4a7bffaf80c62e9242bbd5763fb1b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzOTk5Ng==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r459139996", "bodyText": "Good idea. Using BlockingDeque.", "author": "sagarkapare", "createdAt": "2020-07-22T23:29:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA0MDU3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxOTE5MQ==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r459319191", "bodyText": "When this happen, the preview request is not ignored but getting returned instead. The retry callable should return the previewRequest if it persisted successfully, or null if conflict, so that you can break the loop based on the value.", "author": "chtyim", "createdAt": "2020-07-23T09:19:37Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/preview/DefaultPreviewRequestQueue.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.preview;\n+\n+import com.google.inject.Inject;\n+import io.cdap.cdap.app.preview.PreviewRequest;\n+import io.cdap.cdap.app.preview.PreviewRequestQueue;\n+import io.cdap.cdap.app.preview.PreviewRequestQueueState;\n+import io.cdap.cdap.app.store.preview.PreviewStore;\n+import io.cdap.cdap.common.ConflictException;\n+import io.cdap.cdap.common.app.RunIds;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.service.Retries;\n+import io.cdap.cdap.common.service.RetryStrategies;\n+import io.cdap.cdap.common.service.RetryStrategy;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import net.jcip.annotations.ThreadSafe;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Optional;\n+import java.util.concurrent.BlockingDeque;\n+import java.util.concurrent.LinkedBlockingDeque;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Thread-safe implementation of {@link PreviewRequestQueue} backed by {@link PreviewStore}.\n+ */\n+@ThreadSafe\n+public class DefaultPreviewRequestQueue implements PreviewRequestQueue {\n+  private static final Logger LOG = LoggerFactory.getLogger(DefaultPreviewRequestQueue.class);\n+  private final PreviewStore previewStore;\n+  private final BlockingDeque<PreviewRequest> requestQueue;\n+  private final int capacity;\n+  private final long waitTimeOut;\n+  private final RetryStrategy retryStrategy;\n+\n+  @Inject\n+  public DefaultPreviewRequestQueue(CConfiguration cConf, PreviewStore previewStore) {\n+    this.previewStore = previewStore;\n+    this.capacity = cConf.getInt(Constants.Preview.WAITING_QUEUE_CAPACITY, 50);\n+    this.waitTimeOut = cConf.getLong(Constants.Preview.WAITING_QUEUE_TIMEOUT_SECONDS, 60);\n+    this.retryStrategy = RetryStrategies.fromConfiguration(cConf, \"system.preview.store.update.\");\n+    this.requestQueue = previewStore.getAllInWaitingState().stream()\n+      .filter(r -> isValid(r, waitTimeOut))\n+      .collect(Collectors.toCollection(() -> new LinkedBlockingDeque<>(capacity)));\n+  }\n+\n+  @Override\n+  public Optional<PreviewRequest> poll(byte[] pollerInfo) {\n+    while (true) {\n+      PreviewRequest previewRequest = requestQueue.poll();\n+      if (previewRequest == null) {\n+        return Optional.empty();\n+      }\n+\n+      if (!isValid(previewRequest, waitTimeOut)) {\n+        LOG.warn(\"Preview request wth application id {} is timed out. Ignoring it.\",\n+                 previewRequest.getProgram().getParent());\n+        continue;\n+      }\n+\n+      try {\n+        Retries.callWithRetries((Retries.Callable<Void, Exception>) () -> {\n+          try {\n+            previewStore.setPreviewRequestPollerInfo(previewRequest.getProgram().getParent(), pollerInfo);\n+          } catch (ConflictException e) {\n+            LOG.debug(\"Preview application with id {} is not present in WAITING state. Ignoring the preview.\",", "originalCommit": "55e408a619db5a883d9936dc88f194edd1b7f866", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU3MjE3Nw==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r459572177", "bodyText": "Fixed.", "author": "sagarkapare", "createdAt": "2020-07-23T16:21:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxOTE5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzMTk5OA==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r459631998", "bodyText": "Use java.util.Objects instead.", "author": "chtyim", "createdAt": "2020-07-23T18:03:30Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/app/preview/PreviewRequestQueueState.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.app.preview;\n+\n+import com.google.common.base.Objects;", "originalCommit": "773dd37a1e41df816c2243c3223e3fb4d2d2d1dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0ODc5Ng==", "url": "https://github.com/cdapio/cdap/pull/12356#discussion_r459648796", "bodyText": "fixed.", "author": "sagarkapare", "createdAt": "2020-07-23T18:33:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzMTk5OA=="}], "type": "inlineReview"}, {"oid": "175b520f1a05069c42fa9c73ae3315dc1e17cf18", "url": "https://github.com/cdapio/cdap/commit/175b520f1a05069c42fa9c73ae3315dc1e17cf18", "message": "[CDAP-16931] Added methods to preview store to persist, remove, and list the preview requests that are in WAITING state.\nAlso added implementation of preview request job queue backed by preview store.", "committedDate": "2020-07-23T18:59:12Z", "type": "commit"}, {"oid": "175b520f1a05069c42fa9c73ae3315dc1e17cf18", "url": "https://github.com/cdapio/cdap/commit/175b520f1a05069c42fa9c73ae3315dc1e17cf18", "message": "[CDAP-16931] Added methods to preview store to persist, remove, and list the preview requests that are in WAITING state.\nAlso added implementation of preview request job queue backed by preview store.", "committedDate": "2020-07-23T18:59:12Z", "type": "forcePushed"}]}