{"pr_number": 12304, "pr_title": "[CDAP-16784] Add Kryo serializers for unmodifiable class types", "pr_createdAt": "2020-06-11T17:48:14Z", "pr_url": "https://github.com/cdapio/cdap/pull/12304", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MTQ5NA==", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r438971494", "bodyText": "Seems unnecessary?", "author": "chtyim", "createdAt": "2020-06-11T17:56:55Z", "path": "cdap-app-templates/cdap-etl/cdap-data-streams/src/main/java/io/cdap/cdap/datastreams/DataStreamsSparkLauncher.java", "diffHunk": "@@ -98,6 +98,7 @@ public void initialize() throws Exception {\n \n     SparkConf sparkConf = new SparkConf();\n     sparkConf.set(\"spark.streaming.backpressure.enabled\", \"true\");\n+", "originalCommit": "4436d764009ec37a459e3f75e774798f789fd237", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4MDA3Mw==", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r438980073", "bodyText": "removed", "author": "MEseifan", "createdAt": "2020-06-11T18:12:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MTQ5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MTYzNg==", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r438971636", "bodyText": "Unused import?", "author": "chtyim", "createdAt": "2020-06-11T17:57:04Z", "path": "cdap-app-templates/cdap-etl/hydrator-spark-core-base/src/main/java/io/cdap/cdap/etl/spark/batch/ETLSpark.java", "diffHunk": "@@ -39,6 +39,7 @@\n import io.cdap.cdap.etl.common.submit.Finisher;\n import io.cdap.cdap.internal.io.SchemaTypeAdapter;\n import org.apache.spark.SparkConf;\n+import org.apache.spark.storage.StorageLevel;", "originalCommit": "4436d764009ec37a459e3f75e774798f789fd237", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4MDE0Ng==", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r438980146", "bodyText": "removed", "author": "MEseifan", "createdAt": "2020-06-11T18:12:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MTYzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MjA0OA==", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r438972048", "bodyText": "Add this after all the Type constant. Make it easier for eyes", "author": "chtyim", "createdAt": "2020-06-11T17:57:44Z", "path": "cdap-spark-core-base/src/main/java/io/cdap/cdap/app/runtime/spark/classloader/SparkClassRewriter.java", "diffHunk": "@@ -104,6 +112,8 @@\n     Type.getObjectType(\"io/cdap/cdap/app/runtime/spark/serializer/SchemaSerializer\");\n   private static final Type STRUCTURED_RECORD_SERIALIZER_TYPE =\n     Type.getObjectType(\"io/cdap/cdap/app/runtime/spark/serializer/StructuredRecordSerializer\");\n+  private static final String UNMODIFIABLE_SERIALIZERS_TYPE_FORMAT =", "originalCommit": "4436d764009ec37a459e3f75e774798f789fd237", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4MDU1NQ==", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r438980555", "bodyText": "done", "author": "MEseifan", "createdAt": "2020-06-11T18:13:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MjA0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MjI4Mw==", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r438972283", "bodyText": "Unnecessary new line", "author": "chtyim", "createdAt": "2020-06-11T17:58:07Z", "path": "cdap-spark-core-base/src/main/java/io/cdap/cdap/app/runtime/spark/classloader/SparkClassRewriter.java", "diffHunk": "@@ -351,11 +361,12 @@ void onMethodExit(String name, String desc, GeneratorAdapter generatorAdapter) {\n     // Map from getResource* methods to the method signature\n     // (can be null, since only method that has generic has signature)\n     final Map<Method, String> resourceMethods = new HashMap<>();\n-    Method method = new Method(\"getResource\", Type.getType(URL.class), new Type[]{Type.getType(String.class)});\n+    Method method = new Method(\"getResource\", Type.getType(URL.class), new Type[] { Type.getType(String.class) });\n     resourceMethods.put(method, null);\n \n     method = new Method(\"getResources\", Type.getType(Enumeration.class), new Type[] { Type.getType(String.class) });\n-    resourceMethods.put(method, Signatures.getMethodSignature(method, new TypeToken<Enumeration<URL>>() { },\n+    resourceMethods.put(method, Signatures.getMethodSignature(method, new TypeToken<Enumeration<URL>>() {\n+                                                              },", "originalCommit": "4436d764009ec37a459e3f75e774798f789fd237", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4MDY5Mg==", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r438980692", "bodyText": "done", "author": "MEseifan", "createdAt": "2020-06-11T18:13:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MjI4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MjUzMw==", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r438972533", "bodyText": "Pull this out as a private static class.", "author": "chtyim", "createdAt": "2020-06-11T17:58:36Z", "path": "cdap-spark-core-base/src/main/java/io/cdap/cdap/app/runtime/spark/classloader/SparkClassRewriter.java", "diffHunk": "@@ -450,6 +461,24 @@ public void visitEnd() {\n    */\n   private byte[] rewriteKryo(InputStream byteCodeStream) throws IOException {\n     return rewriteConstructor(KRYO_TYPE, byteCodeStream, new ConstructorRewriter() {\n+      class UnmodifiableData {", "originalCommit": "4436d764009ec37a459e3f75e774798f789fd237", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4MTYzMg==", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r438981632", "bodyText": "done", "author": "MEseifan", "createdAt": "2020-06-11T18:15:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MjUzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MzIyMg==", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r438973222", "bodyText": "Suggest to use LinkedHashMap to maintain order", "author": "chtyim", "createdAt": "2020-06-11T17:59:54Z", "path": "cdap-spark-core-base/src/main/java/io/cdap/cdap/app/runtime/spark/classloader/SparkClassRewriter.java", "diffHunk": "@@ -468,17 +497,46 @@ public void onMethodExit(String name, String desc, GeneratorAdapter generatorAda\n         generatorAdapter.push(STRUCTURED_RECORD_SERIALIZER_TYPE);\n         generatorAdapter.invokeVirtual(KRYO_TYPE,\n                                        new Method(\"addDefaultSerializer\", Type.VOID_TYPE,\n-                                                  new Type[] { Type.getType(Class.class), Type.getType(Class.class)}));\n+                                                  new Type[] { Type.getType(Class.class), Type.getType(Class.class) }));\n+\n+        // Register serializer for all Unmodifiable classes within Collections. Ex:\n+        // addDefaultSerializer(Collections.unmodifiableMap(new HashMap<>()).getClass(),\n+        //                      UnmodifiableMapSerializer.class);\n+        List<UnmodifiableData> unmodifableTypesData = new ArrayList<>();\n+        unmodifableTypesData.add(new UnmodifiableData(\"Collection\", Collection.class, LinkedList.class));\n+        unmodifableTypesData.add(new UnmodifiableData(\"List\", List.class, LinkedList.class));\n+        unmodifableTypesData.add(new UnmodifiableData(\"Set\", Set.class, LinkedHashSet.class));\n+        unmodifableTypesData.add(new UnmodifiableData(\"SortedSet\", SortedSet.class, TreeSet.class));\n+        unmodifableTypesData.add(new UnmodifiableData(\"Map\", Map.class, HashMap.class));", "originalCommit": "4436d764009ec37a459e3f75e774798f789fd237", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4MjM4Nw==", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r438982387", "bodyText": "Done", "author": "MEseifan", "createdAt": "2020-06-11T18:16:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MzIyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MzU5Nw==", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r438973597", "bodyText": "Unnecessary indentation.", "author": "chtyim", "createdAt": "2020-06-11T18:00:33Z", "path": "cdap-spark-core-base/src/main/java/io/cdap/cdap/app/runtime/spark/classloader/SparkClassRewriter.java", "diffHunk": "@@ -507,9 +565,9 @@ public MethodVisitor visitMethod(int access, final String name,\n           public void visitMethodInsn(int opcode, String owner, String name, String desc, boolean itf) {\n             // See if in this constructor it is calling other constructor (this(..)).\n             calledThis = calledThis || (opcode == Opcodes.INVOKESPECIAL\n-              && Type.getObjectType(owner).equals(classType)\n-              && name.equals(\"<init>\")\n-              && Type.getReturnType(desc).equals(Type.VOID_TYPE));\n+                                        && Type.getObjectType(owner).equals(classType)", "originalCommit": "4436d764009ec37a459e3f75e774798f789fd237", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4MzU1OQ==", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r438983559", "bodyText": "done", "author": "MEseifan", "createdAt": "2020-06-11T18:18:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MzU5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4MzYzNg==", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r438983636", "bodyText": "done", "author": "MEseifan", "createdAt": "2020-06-11T18:19:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MzU5Nw=="}], "type": "inlineReview"}, {"oid": "08743441634c5f00a070494ffef0bae2a4aeb8c6", "url": "https://github.com/cdapio/cdap/commit/08743441634c5f00a070494ffef0bae2a4aeb8c6", "message": "Addressed comments", "committedDate": "2020-06-11T18:27:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE2MjExOQ==", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r439162119", "bodyText": "Move private class to the end of the file. Not to interrupt the code flow. Also, add a javadoc for the class.", "author": "chtyim", "createdAt": "2020-06-12T01:38:29Z", "path": "cdap-spark-core-base/src/main/java/io/cdap/cdap/app/runtime/spark/classloader/SparkClassRewriter.java", "diffHunk": "@@ -442,6 +453,24 @@ public void visitEnd() {\n     return cw.toByteArray();\n   }\n \n+  private static class UnmodifiableData {", "originalCommit": "08743441634c5f00a070494ffef0bae2a4aeb8c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzNTQ0MA==", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r439535440", "bodyText": "done", "author": "MEseifan", "createdAt": "2020-06-12T16:55:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE2MjExOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE2MjE3Mg==", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r439162172", "bodyText": "final all fields", "author": "chtyim", "createdAt": "2020-06-12T01:38:41Z", "path": "cdap-spark-core-base/src/main/java/io/cdap/cdap/app/runtime/spark/classloader/SparkClassRewriter.java", "diffHunk": "@@ -442,6 +453,24 @@ public void visitEnd() {\n     return cw.toByteArray();\n   }\n \n+  private static class UnmodifiableData {\n+    Class<?> unmodifiableClass;", "originalCommit": "08743441634c5f00a070494ffef0bae2a4aeb8c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzNTcwMw==", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r439535703", "bodyText": "done", "author": "MEseifan", "createdAt": "2020-06-12T16:55:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE2MjE3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE2MjkyMw==", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r439162923", "bodyText": "Use Arrays.asList to make the code simpler\nList<UnmodifiableData> unmodiableTypes = Arrays.asList(\n  new UnmodifiableData(\"Collection\", Collection.class, LinkedList.class),\n  new UnmodifiableData(\"List\", List.class, LinkedList.class),\n  ...\n);", "author": "chtyim", "createdAt": "2020-06-12T01:41:58Z", "path": "cdap-spark-core-base/src/main/java/io/cdap/cdap/app/runtime/spark/classloader/SparkClassRewriter.java", "diffHunk": "@@ -468,17 +497,46 @@ public void onMethodExit(String name, String desc, GeneratorAdapter generatorAda\n         generatorAdapter.push(STRUCTURED_RECORD_SERIALIZER_TYPE);\n         generatorAdapter.invokeVirtual(KRYO_TYPE,\n                                        new Method(\"addDefaultSerializer\", Type.VOID_TYPE,\n-                                                  new Type[] { Type.getType(Class.class), Type.getType(Class.class)}));\n+                                                  new Type[] { Type.getType(Class.class), Type.getType(Class.class) }));\n+\n+        // Register serializer for all Unmodifiable classes within Collections. Ex:\n+        // addDefaultSerializer(Collections.unmodifiableMap(new HashMap<>()).getClass(),\n+        //                      UnmodifiableMapSerializer.class);\n+        List<UnmodifiableData> unmodifableTypesData = new ArrayList<>();", "originalCommit": "08743441634c5f00a070494ffef0bae2a4aeb8c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzNjc0Mg==", "url": "https://github.com/cdapio/cdap/pull/12304#discussion_r439536742", "bodyText": "done", "author": "MEseifan", "createdAt": "2020-06-12T16:57:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE2MjkyMw=="}], "type": "inlineReview"}, {"oid": "e38a04de10534fc3d0bfbb427191b1527e6c69a5", "url": "https://github.com/cdapio/cdap/commit/e38a04de10534fc3d0bfbb427191b1527e6c69a5", "message": "Added kryo serializers for unmodifiable types", "committedDate": "2020-06-12T16:58:30Z", "type": "commit"}, {"oid": "e38a04de10534fc3d0bfbb427191b1527e6c69a5", "url": "https://github.com/cdapio/cdap/commit/e38a04de10534fc3d0bfbb427191b1527e6c69a5", "message": "Added kryo serializers for unmodifiable types", "committedDate": "2020-06-12T16:58:30Z", "type": "forcePushed"}]}