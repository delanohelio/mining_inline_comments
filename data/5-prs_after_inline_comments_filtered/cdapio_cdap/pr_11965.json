{"pr_number": 11965, "pr_title": "(CDAP-16369) Use twill to launch job on remote Hadoop cluster", "pr_createdAt": "2020-03-16T21:44:44Z", "pr_url": "https://github.com/cdapio/cdap/pull/11965", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMyODUwNw==", "url": "https://github.com/cdapio/cdap/pull/11965#discussion_r393328507", "bodyText": "why is this property need to be set now?", "author": "CuriousVini", "createdAt": "2020-03-16T21:48:33Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/distributed/DistributedProgramRunner.java", "diffHunk": "@@ -532,6 +528,11 @@ private ProgramOptions updateProgramOptions(ProgramOptions options,\n    */\n   @Nullable\n   private URI getLogBackURI(Program program, File tempDir) throws IOException, URISyntaxException {\n+    String configurationFile = System.getProperty(\"logback.configurationFile\");", "originalCommit": "05dbdc7790725437cbe3a406ba4a5f57f59da9c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0NzY4OQ==", "url": "https://github.com/cdapio/cdap/pull/11965#discussion_r393347689", "bodyText": "It is for setting to use logback properly for the YARN job. It used to be not setup when running using remote hadoop.", "author": "chtyim", "createdAt": "2020-03-16T22:35:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMyODUwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMyOTA3NQ==", "url": "https://github.com/cdapio/cdap/pull/11965#discussion_r393329075", "bodyText": "nit: static constant", "author": "CuriousVini", "createdAt": "2020-03-16T21:49:32Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/distributed/remote/RemoteExecutionJobMain.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.runtime.distributed.remote;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.inject.AbstractModule;\n+import com.google.inject.Guice;\n+import com.google.inject.Injector;\n+import com.google.inject.Scopes;\n+import io.cdap.cdap.api.security.store.SecureStore;\n+import io.cdap.cdap.api.security.store.SecureStoreData;\n+import io.cdap.cdap.api.security.store.SecureStoreMetadata;\n+import io.cdap.cdap.app.guice.TwillModule;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.app.RunIds;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.discovery.ResolvingDiscoverable;\n+import io.cdap.cdap.common.guice.ConfigModule;\n+import io.cdap.cdap.common.guice.DFSLocationModule;\n+import io.cdap.cdap.common.guice.InMemoryDiscoveryModule;\n+import io.cdap.cdap.internal.app.runtime.distributed.runtimejob.DefaultRuntimeJob;\n+import io.cdap.cdap.runtime.spi.runtimejob.RuntimeJobEnvironment;\n+import io.cdap.cdap.security.auth.context.AuthenticationContextModules;\n+import io.cdap.cdap.security.impersonation.CurrentUGIProvider;\n+import io.cdap.cdap.security.impersonation.UGIProvider;\n+import org.apache.twill.api.RunId;\n+import org.apache.twill.api.TwillRunner;\n+import org.apache.twill.api.TwillRunnerService;\n+import org.apache.twill.filesystem.Location;\n+import org.apache.twill.filesystem.LocationFactory;\n+import org.apache.twill.internal.zookeeper.InMemoryZKServer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * The main class to setup the {@link RuntimeJobEnvironment} for remote execution.\n+ */\n+public class RemoteExecutionJobMain {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(RemoteExecutionJobMain.class);\n+\n+  private final DefaultRuntimeJob runtimeJob = new DefaultRuntimeJob();\n+\n+  private InMemoryZKServer zkServer;\n+  private TwillRunnerService twillRunnerService;\n+  private LocationFactory locationFactory;\n+\n+  public static void main(String[] args) throws Exception {\n+    System.setProperty(\"twill.zk.server.localhost\", \"false\");", "originalCommit": "05dbdc7790725437cbe3a406ba4a5f57f59da9c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2MTQzMA==", "url": "https://github.com/cdapio/cdap/pull/11965#discussion_r393361430", "bodyText": "fixed", "author": "chtyim", "createdAt": "2020-03-16T23:10:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMyOTA3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMyOTI0Nw==", "url": "https://github.com/cdapio/cdap/pull/11965#discussion_r393329247", "bodyText": "nit: missing javadoc.", "author": "CuriousVini", "createdAt": "2020-03-16T21:49:52Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/distributed/remote/RemoteExecutionJobMain.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.runtime.distributed.remote;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.inject.AbstractModule;\n+import com.google.inject.Guice;\n+import com.google.inject.Injector;\n+import com.google.inject.Scopes;\n+import io.cdap.cdap.api.security.store.SecureStore;\n+import io.cdap.cdap.api.security.store.SecureStoreData;\n+import io.cdap.cdap.api.security.store.SecureStoreMetadata;\n+import io.cdap.cdap.app.guice.TwillModule;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.app.RunIds;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.discovery.ResolvingDiscoverable;\n+import io.cdap.cdap.common.guice.ConfigModule;\n+import io.cdap.cdap.common.guice.DFSLocationModule;\n+import io.cdap.cdap.common.guice.InMemoryDiscoveryModule;\n+import io.cdap.cdap.internal.app.runtime.distributed.runtimejob.DefaultRuntimeJob;\n+import io.cdap.cdap.runtime.spi.runtimejob.RuntimeJobEnvironment;\n+import io.cdap.cdap.security.auth.context.AuthenticationContextModules;\n+import io.cdap.cdap.security.impersonation.CurrentUGIProvider;\n+import io.cdap.cdap.security.impersonation.UGIProvider;\n+import org.apache.twill.api.RunId;\n+import org.apache.twill.api.TwillRunner;\n+import org.apache.twill.api.TwillRunnerService;\n+import org.apache.twill.filesystem.Location;\n+import org.apache.twill.filesystem.LocationFactory;\n+import org.apache.twill.internal.zookeeper.InMemoryZKServer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * The main class to setup the {@link RuntimeJobEnvironment} for remote execution.\n+ */\n+public class RemoteExecutionJobMain {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(RemoteExecutionJobMain.class);\n+\n+  private final DefaultRuntimeJob runtimeJob = new DefaultRuntimeJob();\n+\n+  private InMemoryZKServer zkServer;\n+  private TwillRunnerService twillRunnerService;\n+  private LocationFactory locationFactory;\n+\n+  public static void main(String[] args) throws Exception {", "originalCommit": "05dbdc7790725437cbe3a406ba4a5f57f59da9c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2MjU3Nw==", "url": "https://github.com/cdapio/cdap/pull/11965#discussion_r393362577", "bodyText": "fixup", "author": "chtyim", "createdAt": "2020-03-16T23:14:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMyOTI0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMyOTUwMg==", "url": "https://github.com/cdapio/cdap/pull/11965#discussion_r393329502", "bodyText": "it would be good to check number of args and throw appropriate error in case some one modifies caller to not provide any args", "author": "CuriousVini", "createdAt": "2020-03-16T21:50:31Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/distributed/remote/RemoteExecutionJobMain.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.runtime.distributed.remote;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.inject.AbstractModule;\n+import com.google.inject.Guice;\n+import com.google.inject.Injector;\n+import com.google.inject.Scopes;\n+import io.cdap.cdap.api.security.store.SecureStore;\n+import io.cdap.cdap.api.security.store.SecureStoreData;\n+import io.cdap.cdap.api.security.store.SecureStoreMetadata;\n+import io.cdap.cdap.app.guice.TwillModule;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.app.RunIds;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.discovery.ResolvingDiscoverable;\n+import io.cdap.cdap.common.guice.ConfigModule;\n+import io.cdap.cdap.common.guice.DFSLocationModule;\n+import io.cdap.cdap.common.guice.InMemoryDiscoveryModule;\n+import io.cdap.cdap.internal.app.runtime.distributed.runtimejob.DefaultRuntimeJob;\n+import io.cdap.cdap.runtime.spi.runtimejob.RuntimeJobEnvironment;\n+import io.cdap.cdap.security.auth.context.AuthenticationContextModules;\n+import io.cdap.cdap.security.impersonation.CurrentUGIProvider;\n+import io.cdap.cdap.security.impersonation.UGIProvider;\n+import org.apache.twill.api.RunId;\n+import org.apache.twill.api.TwillRunner;\n+import org.apache.twill.api.TwillRunnerService;\n+import org.apache.twill.filesystem.Location;\n+import org.apache.twill.filesystem.LocationFactory;\n+import org.apache.twill.internal.zookeeper.InMemoryZKServer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * The main class to setup the {@link RuntimeJobEnvironment} for remote execution.\n+ */\n+public class RemoteExecutionJobMain {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(RemoteExecutionJobMain.class);\n+\n+  private final DefaultRuntimeJob runtimeJob = new DefaultRuntimeJob();\n+\n+  private InMemoryZKServer zkServer;\n+  private TwillRunnerService twillRunnerService;\n+  private LocationFactory locationFactory;\n+\n+  public static void main(String[] args) throws Exception {\n+    System.setProperty(\"twill.zk.server.localhost\", \"false\");\n+    RunId runId = RunIds.fromString(args[0]);", "originalCommit": "05dbdc7790725437cbe3a406ba4a5f57f59da9c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2MjYwNg==", "url": "https://github.com/cdapio/cdap/pull/11965#discussion_r393362606", "bodyText": "fixed", "author": "chtyim", "createdAt": "2020-03-16T23:14:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMyOTUwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMyOTcwOQ==", "url": "https://github.com/cdapio/cdap/pull/11965#discussion_r393329709", "bodyText": "please add comment on why this is needed", "author": "CuriousVini", "createdAt": "2020-03-16T21:50:57Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/distributed/remote/RemoteExecutionJobMain.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.runtime.distributed.remote;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.inject.AbstractModule;\n+import com.google.inject.Guice;\n+import com.google.inject.Injector;\n+import com.google.inject.Scopes;\n+import io.cdap.cdap.api.security.store.SecureStore;\n+import io.cdap.cdap.api.security.store.SecureStoreData;\n+import io.cdap.cdap.api.security.store.SecureStoreMetadata;\n+import io.cdap.cdap.app.guice.TwillModule;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.app.RunIds;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.discovery.ResolvingDiscoverable;\n+import io.cdap.cdap.common.guice.ConfigModule;\n+import io.cdap.cdap.common.guice.DFSLocationModule;\n+import io.cdap.cdap.common.guice.InMemoryDiscoveryModule;\n+import io.cdap.cdap.internal.app.runtime.distributed.runtimejob.DefaultRuntimeJob;\n+import io.cdap.cdap.runtime.spi.runtimejob.RuntimeJobEnvironment;\n+import io.cdap.cdap.security.auth.context.AuthenticationContextModules;\n+import io.cdap.cdap.security.impersonation.CurrentUGIProvider;\n+import io.cdap.cdap.security.impersonation.UGIProvider;\n+import org.apache.twill.api.RunId;\n+import org.apache.twill.api.TwillRunner;\n+import org.apache.twill.api.TwillRunnerService;\n+import org.apache.twill.filesystem.Location;\n+import org.apache.twill.filesystem.LocationFactory;\n+import org.apache.twill.internal.zookeeper.InMemoryZKServer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * The main class to setup the {@link RuntimeJobEnvironment} for remote execution.\n+ */\n+public class RemoteExecutionJobMain {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(RemoteExecutionJobMain.class);\n+\n+  private final DefaultRuntimeJob runtimeJob = new DefaultRuntimeJob();\n+\n+  private InMemoryZKServer zkServer;\n+  private TwillRunnerService twillRunnerService;\n+  private LocationFactory locationFactory;\n+\n+  public static void main(String[] args) throws Exception {\n+    System.setProperty(\"twill.zk.server.localhost\", \"false\");\n+    RunId runId = RunIds.fromString(args[0]);\n+    CConfiguration cConf = CConfiguration.create();\n+    cConf.set(Constants.CFG_HDFS_NAMESPACE, \"/twill-\" + runId);", "originalCommit": "05dbdc7790725437cbe3a406ba4a5f57f59da9c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2MzA5Nw==", "url": "https://github.com/cdapio/cdap/pull/11965#discussion_r393363097", "bodyText": "fixed", "author": "chtyim", "createdAt": "2020-03-16T23:16:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMyOTcwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMzMDYyOA==", "url": "https://github.com/cdapio/cdap/pull/11965#discussion_r393330628", "bodyText": "I dont think this in needed in dataproc environment now.", "author": "CuriousVini", "createdAt": "2020-03-16T21:53:08Z", "path": "cdap-runtime-ext-dataproc/src/main/java/io/cdap/cdap/runtime/spi/runtimejob/DataprocRuntimeEnvironment.java", "diffHunk": "@@ -117,16 +94,12 @@ public void destroy() {\n     if (yarnTwillRunnerService != null) {\n       yarnTwillRunnerService.stop();\n     }\n-    if (zkDiscoveryService != null) {\n-      zkDiscoveryService.close();\n-    }\n-    if (zkClientService != null) {\n+    if (locationFactory != null) {\n+      Location location = locationFactory.create(\"/\");\n       try {\n-        // Invoke method through reflection. This is needed because of conflict in guava versions during compilation\n-        Method stopAndWait = zkClientService.getClass().getMethod(\"stopAndWait\");\n-        stopAndWait.invoke(zkClientService);\n-      } catch (Exception e) {\n-        throw new RuntimeException(\"Error occurred while invoking stop on zk client service\", e);\n+        location.delete(true);\n+      } catch (IOException e) {\n+        LOG.warn(\"Failed to delete location {}\", location, e);\n       }\n     }\n     if (zkServer != null) {", "originalCommit": "05dbdc7790725437cbe3a406ba4a5f57f59da9c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0ODY1NQ==", "url": "https://github.com/cdapio/cdap/pull/11965#discussion_r393348655", "bodyText": "It is still needed for the YarnTwillRunnerService", "author": "chtyim", "createdAt": "2020-03-16T22:38:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMzMDYyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMzMjM4Mw==", "url": "https://github.com/cdapio/cdap/pull/11965#discussion_r393332383", "bodyText": "May be we should move this to another class rather than creating its own object just to call non static methods", "author": "CuriousVini", "createdAt": "2020-03-16T21:57:21Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/distributed/remote/RemoteExecutionJobMain.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.runtime.distributed.remote;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.inject.AbstractModule;\n+import com.google.inject.Guice;\n+import com.google.inject.Injector;\n+import com.google.inject.Scopes;\n+import io.cdap.cdap.api.security.store.SecureStore;\n+import io.cdap.cdap.api.security.store.SecureStoreData;\n+import io.cdap.cdap.api.security.store.SecureStoreMetadata;\n+import io.cdap.cdap.app.guice.TwillModule;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.app.RunIds;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.discovery.ResolvingDiscoverable;\n+import io.cdap.cdap.common.guice.ConfigModule;\n+import io.cdap.cdap.common.guice.DFSLocationModule;\n+import io.cdap.cdap.common.guice.InMemoryDiscoveryModule;\n+import io.cdap.cdap.internal.app.runtime.distributed.runtimejob.DefaultRuntimeJob;\n+import io.cdap.cdap.runtime.spi.runtimejob.RuntimeJobEnvironment;\n+import io.cdap.cdap.security.auth.context.AuthenticationContextModules;\n+import io.cdap.cdap.security.impersonation.CurrentUGIProvider;\n+import io.cdap.cdap.security.impersonation.UGIProvider;\n+import org.apache.twill.api.RunId;\n+import org.apache.twill.api.TwillRunner;\n+import org.apache.twill.api.TwillRunnerService;\n+import org.apache.twill.filesystem.Location;\n+import org.apache.twill.filesystem.LocationFactory;\n+import org.apache.twill.internal.zookeeper.InMemoryZKServer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * The main class to setup the {@link RuntimeJobEnvironment} for remote execution.\n+ */\n+public class RemoteExecutionJobMain {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(RemoteExecutionJobMain.class);\n+\n+  private final DefaultRuntimeJob runtimeJob = new DefaultRuntimeJob();\n+\n+  private InMemoryZKServer zkServer;\n+  private TwillRunnerService twillRunnerService;\n+  private LocationFactory locationFactory;\n+\n+  public static void main(String[] args) throws Exception {\n+    System.setProperty(\"twill.zk.server.localhost\", \"false\");\n+    RunId runId = RunIds.fromString(args[0]);\n+    CConfiguration cConf = CConfiguration.create();\n+    cConf.set(Constants.CFG_HDFS_NAMESPACE, \"/twill-\" + runId);\n+\n+    RemoteExecutionJobMain runner = new RemoteExecutionJobMain();", "originalCommit": "05dbdc7790725437cbe3a406ba4a5f57f59da9c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0ODE3Mg==", "url": "https://github.com/cdapio/cdap/pull/11965#discussion_r393348172", "bodyText": "The static main method is the entry point for Java application. The instance of this class is to do the actual work.", "author": "chtyim", "createdAt": "2020-03-16T22:36:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMzMjM4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMzMzA3MQ==", "url": "https://github.com/cdapio/cdap/pull/11965#discussion_r393333071", "bodyText": "initialize should also be called in try in case initialization fails, all the started services should be stopped. Otherwise JVM may not exit due to non demon thread hanging", "author": "CuriousVini", "createdAt": "2020-03-16T21:58:55Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/distributed/remote/RemoteExecutionJobMain.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.internal.app.runtime.distributed.remote;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.inject.AbstractModule;\n+import com.google.inject.Guice;\n+import com.google.inject.Injector;\n+import com.google.inject.Scopes;\n+import io.cdap.cdap.api.security.store.SecureStore;\n+import io.cdap.cdap.api.security.store.SecureStoreData;\n+import io.cdap.cdap.api.security.store.SecureStoreMetadata;\n+import io.cdap.cdap.app.guice.TwillModule;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.app.RunIds;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.discovery.ResolvingDiscoverable;\n+import io.cdap.cdap.common.guice.ConfigModule;\n+import io.cdap.cdap.common.guice.DFSLocationModule;\n+import io.cdap.cdap.common.guice.InMemoryDiscoveryModule;\n+import io.cdap.cdap.internal.app.runtime.distributed.runtimejob.DefaultRuntimeJob;\n+import io.cdap.cdap.runtime.spi.runtimejob.RuntimeJobEnvironment;\n+import io.cdap.cdap.security.auth.context.AuthenticationContextModules;\n+import io.cdap.cdap.security.impersonation.CurrentUGIProvider;\n+import io.cdap.cdap.security.impersonation.UGIProvider;\n+import org.apache.twill.api.RunId;\n+import org.apache.twill.api.TwillRunner;\n+import org.apache.twill.api.TwillRunnerService;\n+import org.apache.twill.filesystem.Location;\n+import org.apache.twill.filesystem.LocationFactory;\n+import org.apache.twill.internal.zookeeper.InMemoryZKServer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * The main class to setup the {@link RuntimeJobEnvironment} for remote execution.\n+ */\n+public class RemoteExecutionJobMain {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(RemoteExecutionJobMain.class);\n+\n+  private final DefaultRuntimeJob runtimeJob = new DefaultRuntimeJob();\n+\n+  private InMemoryZKServer zkServer;\n+  private TwillRunnerService twillRunnerService;\n+  private LocationFactory locationFactory;\n+\n+  public static void main(String[] args) throws Exception {\n+    System.setProperty(\"twill.zk.server.localhost\", \"false\");\n+    RunId runId = RunIds.fromString(args[0]);\n+    CConfiguration cConf = CConfiguration.create();\n+    cConf.set(Constants.CFG_HDFS_NAMESPACE, \"/twill-\" + runId);\n+\n+    RemoteExecutionJobMain runner = new RemoteExecutionJobMain();\n+    RemoteExecutionRuntimeJobEnvironment jobEnv = runner.initialize(cConf);", "originalCommit": "05dbdc7790725437cbe3a406ba4a5f57f59da9c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2MzEzOA==", "url": "https://github.com/cdapio/cdap/pull/11965#discussion_r393363138", "bodyText": "fixed", "author": "chtyim", "createdAt": "2020-03-16T23:16:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMzMzA3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMzMzIzNg==", "url": "https://github.com/cdapio/cdap/pull/11965#discussion_r393333236", "bodyText": "why is this commented?", "author": "CuriousVini", "createdAt": "2020-03-16T21:59:20Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/distributed/remote/RemoteExecutionTwillPreparer.java", "diffHunk": "@@ -921,11 +921,14 @@ private String generateLaunchScript(RuntimeSpecification runtimeSpec, String tar\n     scriptWriter.println(\"export HADOOP_CLASSPATH=`hadoop classpath`\");\n \n     scriptWriter.printf(\n-      \"nohup java -Djava.io.tmpdir=tmp -Dcdap.runid=%s -cp %s/%s -Xmx%dm %s %s '%s' true >%s/stdout 2>%s/stderr &\\n\",\n+      \"nohup java -Djava.io.tmpdir=tmp -Dcdap.runid=%s -cp %s/%s -Xmx%dm %s %s '%s' true %s >%s/stdout 2>%s/stderr &\\n\",\n       programRunId.getRun(), targetPath, Constants.Files.LAUNCHER_JAR, memory,\n-      getJvmOptions().getRunnableExtraOptions(runnableName),\n+//      getJvmOptions().getRunnableExtraOptions(runnableName),", "originalCommit": "05dbdc7790725437cbe3a406ba4a5f57f59da9c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0ODQ0Nw==", "url": "https://github.com/cdapio/cdap/pull/11965#discussion_r393348447", "bodyText": "Oh right, should remove it", "author": "chtyim", "createdAt": "2020-03-16T22:37:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMzMzIzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMzMzMwNA==", "url": "https://github.com/cdapio/cdap/pull/11965#discussion_r393333304", "bodyText": "remove?", "author": "CuriousVini", "createdAt": "2020-03-16T21:59:31Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/distributed/remote/RemoteExecutionTwillPreparer.java", "diffHunk": "@@ -921,11 +921,14 @@ private String generateLaunchScript(RuntimeSpecification runtimeSpec, String tar\n     scriptWriter.println(\"export HADOOP_CLASSPATH=`hadoop classpath`\");\n \n     scriptWriter.printf(\n-      \"nohup java -Djava.io.tmpdir=tmp -Dcdap.runid=%s -cp %s/%s -Xmx%dm %s %s '%s' true >%s/stdout 2>%s/stderr &\\n\",\n+      \"nohup java -Djava.io.tmpdir=tmp -Dcdap.runid=%s -cp %s/%s -Xmx%dm %s %s '%s' true %s >%s/stdout 2>%s/stderr &\\n\",\n       programRunId.getRun(), targetPath, Constants.Files.LAUNCHER_JAR, memory,\n-      getJvmOptions().getRunnableExtraOptions(runnableName),\n+//      getJvmOptions().getRunnableExtraOptions(runnableName),\n+      getJvmOptions().getAMExtraOptions(),\n       RemoteLauncher.class.getName(),\n-      runtimeSpec.getRunnableSpecification().getClassName(),\n+//      runtimeSpec.getRunnableSpecification().getClassName(),", "originalCommit": "05dbdc7790725437cbe3a406ba4a5f57f59da9c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0ODQ2Mw==", "url": "https://github.com/cdapio/cdap/pull/11965#discussion_r393348463", "bodyText": "Oh right, should remove it", "author": "chtyim", "createdAt": "2020-03-16T22:37:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMzMzMwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMzMzg4MQ==", "url": "https://github.com/cdapio/cdap/pull/11965#discussion_r393333881", "bodyText": "could you please add information on javadoc on why this is needed?", "author": "CuriousVini", "createdAt": "2020-03-16T22:00:59Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/internal/app/runtime/distributed/runtimejob/DefaultRuntimeJob.java", "diffHunk": "@@ -82,69 +110,109 @@\n  * {@link TwillRunner} provided by {@link RuntimeJobEnvironment}.\n  */\n public class DefaultRuntimeJob implements RuntimeJob {\n-  private static final String PROGRAM_OPTIONS_FILE_NAME = \"program.options.json\";\n-  private static final String CDAP_CONF_FILE_NAME = \"cConf.xml\";\n-  private static final String APP_SPEC_FILE_NAME = \"appSpec.json\";\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(DefaultRuntimeJob.class);\n+\n   private static final Gson GSON =\n     ApplicationSpecificationAdapter.addTypeAdapters(new GsonBuilder())\n       .registerTypeAdapter(Arguments.class, new ArgumentsCodec())\n       .registerTypeAdapter(ProgramOptions.class, new ProgramOptionsCodec()).create();\n \n+  private final CompletableFuture<ProgramController> controllerFuture = new CompletableFuture<>();\n+\n   @Override\n   public void run(RuntimeJobEnvironment runtimeJobEnv) throws Exception {\n     // Get Program Options\n-    ProgramOptions programOptions = readJsonFile(new File(PROGRAM_OPTIONS_FILE_NAME), ProgramOptions.class);\n-    ProgramId programId = programOptions.getProgramId();\n+    ProgramOptions programOptions = readJsonFile(new File(DistributedProgramRunner.PROGRAM_OPTIONS_FILE_NAME),\n+                                                 ProgramOptions.class);\n+    ProgramRunId programRunId = programOptions.getProgramId().run(ProgramRunners.getRunId(programOptions));\n+    ProgramId programId = programRunId.getParent();\n \n     // Get App spec\n-    ApplicationSpecification appSpec = readJsonFile(new File(APP_SPEC_FILE_NAME), ApplicationSpecification.class);\n+    ApplicationSpecification appSpec = readJsonFile(new File(DistributedProgramRunner.APP_SPEC_FILE_NAME),\n+                                                    ApplicationSpecification.class);\n     ProgramDescriptor programDescriptor = new ProgramDescriptor(programId, appSpec);\n \n-    // Create cConf with provided properties. These properties can be used to set configs for twill runner such as\n-    // connection string for discovery.\n-    CConfiguration cConf = createCConf(runtimeJobEnv);\n-\n     // Create injector and get program runner\n-    Injector injector = Guice.createInjector(createmodule(runtimeJobEnv, cConf));\n-    ProgramRunner programRunner = injector.getInstance(ProgramRunnerFactory.class).create(programId.getType());\n-\n-    // Create and run the program. The program files should be present in current working directory.\n-    try (Program program = createProgram(cConf, programRunner, programDescriptor, programOptions)) {\n-      CompletableFuture<ProgramController.State> programCompletion = new CompletableFuture<>();\n-      ProgramController controller = programRunner.run(program, programOptions);\n-      controller.addListener(new AbstractListener() {\n-        @Override\n-        public void completed() {\n-          programCompletion.complete(ProgramController.State.COMPLETED);\n-        }\n+    Injector injector = Guice.createInjector(createModules(runtimeJobEnv, createCConf(runtimeJobEnv)));\n+    LogAppenderInitializer logAppenderInitializer = injector.getInstance(LogAppenderInitializer.class);\n+    Deque<Service> coreServices = createCoreServices(injector);\n+    startCoreServices(coreServices, logAppenderInitializer);\n \n-        @Override\n-        public void killed() {\n-          programCompletion.complete(ProgramController.State.KILLED);\n-        }\n+    try {\n+      SystemArguments.setLogLevel(programOptions.getUserArguments(), logAppenderInitializer);\n+      CConfiguration cConf = injector.getInstance(CConfiguration.class);\n+      ProgramRunner programRunner = injector.getInstance(ProgramRunnerFactory.class).create(programId.getType());\n \n-        @Override\n-        public void error(Throwable cause) {\n-          programCompletion.completeExceptionally(cause);\n-        }\n-      }, Threads.SAME_THREAD_EXECUTOR);\n+      // Create and run the program. The program files should be present in current working directory.\n+      try (Program program = createProgram(cConf, programRunner, programDescriptor, programOptions)) {\n+        CompletableFuture<ProgramController.State> programCompletion = new CompletableFuture<>();\n+        ProgramController controller = programRunner.run(program, programOptions);\n+        controllerFuture.complete(controller);\n+\n+        controller.addListener(new AbstractListener() {\n+          @Override\n+          public void completed() {\n+            programCompletion.complete(ProgramController.State.COMPLETED);\n+          }\n \n-      // Block on the completion\n-      programCompletion.get();\n+          @Override\n+          public void killed() {\n+            programCompletion.complete(ProgramController.State.KILLED);\n+          }\n+\n+          @Override\n+          public void error(Throwable cause) {\n+            programCompletion.completeExceptionally(cause);\n+          }\n+        }, Threads.SAME_THREAD_EXECUTOR);\n+\n+        // Block on the completion\n+        programCompletion.get();\n+      } finally {\n+        if (programRunner instanceof Closeable) {\n+          Closeables.closeQuietly((Closeable) programRunner);\n+        }\n+      }\n+    } catch (Throwable t) {\n+      controllerFuture.completeExceptionally(t);\n+      throw t;\n     } finally {\n-      if (programRunner instanceof Closeable) {\n-        ((Closeable) programRunner).close();\n+      stopCoreServices(coreServices, logAppenderInitializer);\n+    }\n+  }\n+\n+  /**\n+   * Stops the running job.\n+   */\n+  private void stop() {", "originalCommit": "05dbdc7790725437cbe3a406ba4a5f57f59da9c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2Mzc1Nw==", "url": "https://github.com/cdapio/cdap/pull/11965#discussion_r393363757", "bodyText": "fixed", "author": "chtyim", "createdAt": "2020-03-16T23:18:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMzMzg4MQ=="}], "type": "inlineReview"}, {"oid": "5ddee9e380ef64c52d38dc3aac268d3ff2b04906", "url": "https://github.com/cdapio/cdap/commit/5ddee9e380ef64c52d38dc3aac268d3ff2b04906", "message": "(CDAP-16369) Use twill to launch job on remote Hadoop cluster\n\n- This change is to move services that are used to run in AbstractProgramTwillRunnable\n  into DefaultRuntimeJob. It provides a unified way of running job in any hadoop cluster,\n  regardless of how the DefaultRuntimeJob is being started.", "committedDate": "2020-03-17T00:35:44Z", "type": "commit"}, {"oid": "3585615390f886919c1195052252465eeab24843", "url": "https://github.com/cdapio/cdap/commit/3585615390f886919c1195052252465eeab24843", "message": "Disable chatty spark logs.", "committedDate": "2020-03-17T00:35:44Z", "type": "commit"}, {"oid": "3585615390f886919c1195052252465eeab24843", "url": "https://github.com/cdapio/cdap/commit/3585615390f886919c1195052252465eeab24843", "message": "Disable chatty spark logs.", "committedDate": "2020-03-17T00:35:44Z", "type": "forcePushed"}]}