{"pr_number": 1352, "pr_title": "Add sample JWT generator project", "pr_createdAt": "2020-07-24T05:29:07Z", "pr_url": "https://github.com/wso2/product-microgateway/pull/1352", "timeline": [{"oid": "dd8c6af2130f795d14940c95324d87006c738338", "url": "https://github.com/wso2/product-microgateway/commit/dd8c6af2130f795d14940c95324d87006c738338", "message": "Add sample jwt generator project", "committedDate": "2020-07-24T02:59:34Z", "type": "commit"}, {"oid": "6f16b80169881856eb1adcf6e372aec839e22417", "url": "https://github.com/wso2/product-microgateway/commit/6f16b80169881856eb1adcf6e372aec839e22417", "message": "Update samples/sample-jwt-generator/pom.xml\n\nCo-authored-by: Praminda <pramindabj@gmail.com>", "committedDate": "2020-07-27T02:59:52Z", "type": "commit"}, {"oid": "b646739ebf5ed7a559b9f295fdacf2713e33900a", "url": "https://github.com/wso2/product-microgateway/commit/b646739ebf5ed7a559b9f295fdacf2713e33900a", "message": "Add license headers to files", "committedDate": "2020-07-27T04:31:09Z", "type": "commit"}, {"oid": "2b347de5c774edc556e069c88902055a7c1e7f03", "url": "https://github.com/wso2/product-microgateway/commit/2b347de5c774edc556e069c88902055a7c1e7f03", "message": "Merge branch 'backend-jwt' of https://github.com/HeshanSudarshana/product-microgateway into backend-jwt", "committedDate": "2020-07-27T04:33:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTMxNzQ4Mw==", "url": "https://github.com/wso2/product-microgateway/pull/1352#discussion_r569317483", "bodyText": "Please format the code", "author": "tgtshanika", "createdAt": "2021-02-03T10:55:00Z", "path": "samples/sample-jwt-generator/src/main/java/sample/jwt/generator/SampleJWTGenerator.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package sample.jwt.generator;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.wso2.micro.gateway.jwt.generator.AbstractMGWJWTGenerator;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+public class SampleJWTGenerator extends AbstractMGWJWTGenerator {\n+    public SampleJWTGenerator(String dialectURI,\n+                                String signatureAlgorithm,\n+                                String keyStorePath,\n+                                String keyStorePassword,\n+                                String certificateAlias,\n+                                String privateKeyAlias,\n+                                int jwtExpiryTime,\n+                                String[] restrictedClaims,\n+                                boolean cacheEnabled,\n+                                int cacheExpiry,\n+                                String tokenIssuer,\n+                                String[] tokenAudience) {\n+        super(dialectURI,\n+                signatureAlgorithm,\n+                keyStorePath,\n+                keyStorePassword,\n+                certificateAlias,\n+                privateKeyAlias,\n+                jwtExpiryTime,\n+                restrictedClaims,\n+                cacheEnabled,\n+                cacheExpiry,\n+                tokenIssuer,\n+                tokenAudience);\n+    }\n+\n+    @Override\n+    public Map<String, Object> populateStandardClaims(Map<String, Object> jwtInfo) {\n+        long currentTime = System.currentTimeMillis();\n+        long expireIn = currentTime + getTTL();\n+        String dialect = this.getDialectURI();\n+        Map<String, Object> claims = new HashMap();\n+        HashMap<String, Object> customClaims = (HashMap<String, Object>) jwtInfo.get(\"customClaims\");\n+        claims.put(\"iss\", getTokenIssuer());\n+        if (getTokenAudience().length == 1) {\n+            claims.put(\"aud\", getTokenAudience()[0]);\n+        } else if (getTokenAudience().length != 0) {\n+            claims.put(\"aud\", arrayToJSONArray(getTokenAudience()));\n+        }\n+        claims.put(\"jti\", UUID.randomUUID().toString());\n+        claims.put(\"iat\", (int) (currentTime / 1000));\n+        claims.put(\"exp\", (int) (expireIn / 1000));\n+        if (StringUtils.isNotEmpty((CharSequence) jwtInfo.get(\"sub\"))) {\n+            claims.put(\"sub\", jwtInfo.get(\"sub\"));\n+            claims.put(dialect + \"/endUser\", jwtInfo.get(\"sub\"));\n+        }\n+        if (StringUtils.isNotEmpty((CharSequence) customClaims.get(\"scopes\"))) {\n+            claims.put(\"scopes\", (customClaims.get(\"scopes\")));\n+        }\n+        return claims;\n+    }\n+\n+    @Override\n+    public Map<String, Object> populateCustomClaims(Map<String, Object> jwtInfo, ArrayList<String> restrictedClaims) {\n+        Map<String, Object> claims = new HashMap();\n+        for (String key: jwtInfo.keySet()) {\n+            if (key.equals(\"customClaims\")) {", "originalCommit": "2b347de5c774edc556e069c88902055a7c1e7f03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTc2MDY4OA==", "url": "https://github.com/wso2/product-microgateway/pull/1352#discussion_r571760688", "bodyText": "Fixed with 45bcd34", "author": "HeshanSudarshana", "createdAt": "2021-02-08T03:26:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTMxNzQ4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTMxNzYzNA==", "url": "https://github.com/wso2/product-microgateway/pull/1352#discussion_r569317634", "bodyText": "formatting issue", "author": "tgtshanika", "createdAt": "2021-02-03T10:55:14Z", "path": "samples/sample-jwt-generator/src/main/java/sample/jwt/generator/SampleJWTGenerator.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package sample.jwt.generator;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.wso2.micro.gateway.jwt.generator.AbstractMGWJWTGenerator;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+public class SampleJWTGenerator extends AbstractMGWJWTGenerator {\n+    public SampleJWTGenerator(String dialectURI,\n+                                String signatureAlgorithm,\n+                                String keyStorePath,\n+                                String keyStorePassword,\n+                                String certificateAlias,\n+                                String privateKeyAlias,\n+                                int jwtExpiryTime,\n+                                String[] restrictedClaims,\n+                                boolean cacheEnabled,\n+                                int cacheExpiry,\n+                                String tokenIssuer,\n+                                String[] tokenAudience) {\n+        super(dialectURI,\n+                signatureAlgorithm,\n+                keyStorePath,\n+                keyStorePassword,\n+                certificateAlias,\n+                privateKeyAlias,\n+                jwtExpiryTime,\n+                restrictedClaims,\n+                cacheEnabled,\n+                cacheExpiry,\n+                tokenIssuer,\n+                tokenAudience);\n+    }\n+\n+    @Override\n+    public Map<String, Object> populateStandardClaims(Map<String, Object> jwtInfo) {\n+        long currentTime = System.currentTimeMillis();\n+        long expireIn = currentTime + getTTL();\n+        String dialect = this.getDialectURI();\n+        Map<String, Object> claims = new HashMap();\n+        HashMap<String, Object> customClaims = (HashMap<String, Object>) jwtInfo.get(\"customClaims\");\n+        claims.put(\"iss\", getTokenIssuer());\n+        if (getTokenAudience().length == 1) {\n+            claims.put(\"aud\", getTokenAudience()[0]);\n+        } else if (getTokenAudience().length != 0) {\n+            claims.put(\"aud\", arrayToJSONArray(getTokenAudience()));\n+        }\n+        claims.put(\"jti\", UUID.randomUUID().toString());\n+        claims.put(\"iat\", (int) (currentTime / 1000));\n+        claims.put(\"exp\", (int) (expireIn / 1000));\n+        if (StringUtils.isNotEmpty((CharSequence) jwtInfo.get(\"sub\"))) {\n+            claims.put(\"sub\", jwtInfo.get(\"sub\"));\n+            claims.put(dialect + \"/endUser\", jwtInfo.get(\"sub\"));\n+        }\n+        if (StringUtils.isNotEmpty((CharSequence) customClaims.get(\"scopes\"))) {\n+            claims.put(\"scopes\", (customClaims.get(\"scopes\")));\n+        }\n+        return claims;\n+    }\n+\n+    @Override\n+    public Map<String, Object> populateCustomClaims(Map<String, Object> jwtInfo, ArrayList<String> restrictedClaims) {\n+        Map<String, Object> claims = new HashMap();\n+        for (String key: jwtInfo.keySet()) {\n+            if (key.equals(\"customClaims\")) {\n+                Map<String, Object> customClaims = (Map<String, Object>) jwtInfo.get(key);\n+                for (String subKey: customClaims.keySet()) {\n+                    if (!restrictedClaims.contains(subKey)) {", "originalCommit": "2b347de5c774edc556e069c88902055a7c1e7f03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTc2MDcxMw==", "url": "https://github.com/wso2/product-microgateway/pull/1352#discussion_r571760713", "bodyText": "Fixed with 45bcd34", "author": "HeshanSudarshana", "createdAt": "2021-02-08T03:26:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTMxNzYzNA=="}], "type": "inlineReview"}]}