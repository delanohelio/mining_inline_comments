{"pr_number": 975, "pr_title": "Fix #881 - Implement new fixed window throttling ", "pr_createdAt": "2020-02-07T09:39:49Z", "pr_url": "https://github.com/wso2/product-microgateway/pull/975", "timeline": [{"oid": "e75553fb58d8f4e1ae526f11c9fa8e8a6185acad", "url": "https://github.com/wso2/product-microgateway/commit/e75553fb58d8f4e1ae526f11c9fa8e8a6185acad", "message": "Fix #881 - Implement new fixed window throttling", "committedDate": "2020-02-03T04:30:19Z", "type": "commit"}, {"oid": "40ead00aed3cd145a3be8e3ae8e3dbea12f53ced", "url": "https://github.com/wso2/product-microgateway/commit/40ead00aed3cd145a3be8e3ae8e3dbea12f53ced", "message": "Merge branch 'master' of https://github.com/wso2/product-microgateway into throttle_new", "committedDate": "2020-02-07T09:37:53Z", "type": "commit"}, {"oid": "6953614d56b5ca2e409e2e569445d962b1cfc1d5", "url": "https://github.com/wso2/product-microgateway/commit/6953614d56b5ca2e409e2e569445d962b1cfc1d5", "message": "Fix #881 - Improvemnts to fixed window throttling", "committedDate": "2020-02-07T09:38:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMyMDQ0Mw==", "url": "https://github.com/wso2/product-microgateway/pull/975#discussion_r376320443", "bodyText": "Suggested change", "author": "praminda", "createdAt": "2020-02-07T10:29:58Z", "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/throttle/DataProcessAgent.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.wso2.micro.gateway.core.throttle;\n+\n+import org.ballerinalang.jvm.values.MapValue;\n+\n+/**\n+ * This class is responsible for executing data processing logic. This class implements runnable interface and\n+ * need to execute using thread pool executor.\n+ */\n+public class DataProcessAgent implements Runnable {\n+\n+    private ThrottleCounter throttleCounter;\n+", "originalCommit": "6953614d56b5ca2e409e2e569445d962b1cfc1d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMyMTE1NQ==", "url": "https://github.com/wso2/product-microgateway/pull/975#discussion_r376321155", "bodyText": "Dot at the end is a must for checkstyles\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Static holder single pattern implementation to hold the configurations related local throttle processing,\n          \n          \n            \n             * Static holder single pattern implementation to hold the configurations related local throttle processing.", "author": "praminda", "createdAt": "2020-02-07T10:31:38Z", "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/throttle/ThrottleConfigHolder.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.wso2.micro.gateway.core.throttle;\n+\n+/**\n+ * Static holder single pattern implementation to hold the configurations related local throttle processing,", "originalCommit": "6953614d56b5ca2e409e2e569445d962b1cfc1d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMyMTQ5Nw==", "url": "https://github.com/wso2/product-microgateway/pull/975#discussion_r376321497", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Class to hold throttle counter data against a specific key\n          \n          \n            \n             * Class to hold throttle counter data against a specific key.", "author": "praminda", "createdAt": "2020-02-07T10:32:33Z", "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/throttle/ThrottleData.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.wso2.micro.gateway.core.throttle;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Class to hold throttle counter data against a specific key", "originalCommit": "6953614d56b5ca2e409e2e569445d962b1cfc1d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMyMTczNA==", "url": "https://github.com/wso2/product-microgateway/pull/975#discussion_r376321734", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * which runs periodically\n          \n          \n            \n                 * which runs periodically.", "author": "praminda", "createdAt": "2020-02-07T10:33:01Z", "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/throttle/ThrottleDataCleanUpTask.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.wso2.micro.gateway.core.throttle;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * This task is responsible for cleanup ThrottleData objects which has expired.\n+ *\n+ */\n+public class ThrottleDataCleanUpTask {\n+\n+    private static final Logger log = LoggerFactory.getLogger(ThrottleDataCleanUpTask.class);\n+    private List<ThrottleData> throttleDataList = new ArrayList<>();\n+\n+    public ThrottleDataCleanUpTask() {\n+\n+        ScheduledExecutorService executor = Executors.newScheduledThreadPool(1, new ThreadFactory() {\n+\n+            public Thread newThread(Runnable r) {\n+                Thread t = new Thread(r);\n+                t.setName(\"Throttle Cleanup Task\");\n+                return t;\n+            }\n+        });\n+\n+        int throttleFrequency = ThrottleConfigHolder.getInstance().getThrottleFrequency();\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Throttling Cleanup Task Frequency set to \" + throttleFrequency);\n+        }\n+\n+        executor.scheduleAtFixedRate(new CleanupTask(), throttleFrequency, throttleFrequency, TimeUnit.SECONDS);\n+\n+    }\n+\n+    /**\n+     * Add the throttle data instances to be cleaned into the cleanup array list, which is iterated by the cleanup task\n+     * which runs periodically", "originalCommit": "6953614d56b5ca2e409e2e569445d962b1cfc1d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMyMjMwNQ==", "url": "https://github.com/wso2/product-microgateway/pull/975#discussion_r376322305", "bodyText": "Suggested change", "author": "praminda", "createdAt": "2020-02-07T10:34:11Z", "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/throttle/ThrottleDataReceiver.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.wso2.micro.gateway.core.throttle;\n+\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingDeque;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Throttle data receiver class accepts all the request events and submit the throttle data to a thread pool to\n+ * calculate throttle counters against each unique throttle key.\n+ */\n+public class ThrottleDataReceiver {\n+    private static ThrottleDataCleanUpTask throttleDataCleanUpTask;\n+\n+    private static final Logger log = LoggerFactory.getLogger(\"ballerina\");\n+\n+    public static ThrottleCounter getThrottleCounter() {\n+        return throttleCounter;\n+    }\n+\n+    private static volatile ThrottleCounter throttleCounter = null;\n+\n+    private static ExecutorService executor;\n+\n+    /**\n+     * This method will initialize throttle data counters. Inside this we will start executor and initialize data\n+     * counter which we used to maintain throttle count against each unique keys.\n+     */\n+    public static void initThrottleDataReceiver(int processPoolMaxIdle, int processPoolInitIdleCapacity,\n+            int processThreadPoolCoreSize, int processThreadPoolMaximumSize, int processThreadPoolKeepAliveTime,\n+            int throttleFrequency) {\n+        ThrottleConfigHolder.getInstance()\n+                .setData(processPoolMaxIdle, processPoolInitIdleCapacity, processThreadPoolCoreSize,\n+                        processThreadPoolMaximumSize, processThreadPoolKeepAliveTime, throttleFrequency);\n+        initThrottleExecutors();\n+        throttleDataCleanUpTask = new ThrottleDataCleanUpTask();\n+    }\n+\n+    private static void initThrottleExecutors() {\n+        ThrottleConfigHolder throttleConfigHolder = ThrottleConfigHolder.getInstance();\n+        executor = new ThreadPoolExecutor(throttleConfigHolder.getProcessThreadPoolCoreSize(),\n+                throttleConfigHolder.getProcessThreadPoolMaximumSize(),\n+                throttleConfigHolder.getProcessThreadPoolKeepAliveTime(), TimeUnit.SECONDS,\n+                new LinkedBlockingDeque<Runnable>() {\n+                });\n+        throttleCounter = new ThrottleCounter();\n+    }\n+\n+    /**\n+     * This method used to pass throttle data and let it run within separate thread.\n+     */\n+    public static void processNonThrottledEvent(MapValue throttleEvent) {\n+        //check for a dto\n+        try {\n+            DataProcessAgent agent = new DataProcessAgent();\n+            agent.setDataReference(throttleEvent);\n+            executor.execute(agent);\n+        } catch (Exception e) {\n+            log.error(\"Error while processing throttling event\", e);\n+        }\n+    }\n+", "originalCommit": "6953614d56b5ca2e409e2e569445d962b1cfc1d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMyMjM0NA==", "url": "https://github.com/wso2/product-microgateway/pull/975#discussion_r376322344", "bodyText": "Suggested change", "author": "praminda", "createdAt": "2020-02-07T10:34:16Z", "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/throttle/ThrottleDataReceiver.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.wso2.micro.gateway.core.throttle;\n+\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingDeque;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Throttle data receiver class accepts all the request events and submit the throttle data to a thread pool to\n+ * calculate throttle counters against each unique throttle key.\n+ */\n+public class ThrottleDataReceiver {\n+    private static ThrottleDataCleanUpTask throttleDataCleanUpTask;\n+\n+    private static final Logger log = LoggerFactory.getLogger(\"ballerina\");\n+\n+    public static ThrottleCounter getThrottleCounter() {\n+        return throttleCounter;\n+    }\n+\n+    private static volatile ThrottleCounter throttleCounter = null;\n+\n+    private static ExecutorService executor;\n+\n+    /**\n+     * This method will initialize throttle data counters. Inside this we will start executor and initialize data\n+     * counter which we used to maintain throttle count against each unique keys.\n+     */\n+    public static void initThrottleDataReceiver(int processPoolMaxIdle, int processPoolInitIdleCapacity,\n+            int processThreadPoolCoreSize, int processThreadPoolMaximumSize, int processThreadPoolKeepAliveTime,\n+            int throttleFrequency) {\n+        ThrottleConfigHolder.getInstance()\n+                .setData(processPoolMaxIdle, processPoolInitIdleCapacity, processThreadPoolCoreSize,\n+                        processThreadPoolMaximumSize, processThreadPoolKeepAliveTime, throttleFrequency);\n+        initThrottleExecutors();\n+        throttleDataCleanUpTask = new ThrottleDataCleanUpTask();\n+    }\n+\n+    private static void initThrottleExecutors() {\n+        ThrottleConfigHolder throttleConfigHolder = ThrottleConfigHolder.getInstance();\n+        executor = new ThreadPoolExecutor(throttleConfigHolder.getProcessThreadPoolCoreSize(),\n+                throttleConfigHolder.getProcessThreadPoolMaximumSize(),\n+                throttleConfigHolder.getProcessThreadPoolKeepAliveTime(), TimeUnit.SECONDS,\n+                new LinkedBlockingDeque<Runnable>() {\n+                });\n+        throttleCounter = new ThrottleCounter();\n+    }\n+\n+    /**\n+     * This method used to pass throttle data and let it run within separate thread.\n+     */\n+    public static void processNonThrottledEvent(MapValue throttleEvent) {\n+        //check for a dto\n+        try {\n+            DataProcessAgent agent = new DataProcessAgent();\n+            agent.setDataReference(throttleEvent);\n+            executor.execute(agent);\n+        } catch (Exception e) {\n+            log.error(\"Error while processing throttling event\", e);\n+        }\n+    }\n+\n+", "originalCommit": "6953614d56b5ca2e409e2e569445d962b1cfc1d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMzMzM5OA==", "url": "https://github.com/wso2/product-microgateway/pull/975#discussion_r376333398", "bodyText": "Suggested change", "author": "AmaliMatharaarachchi", "createdAt": "2020-02-07T10:59:08Z", "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/throttle/DataProcessAgent.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.wso2.micro.gateway.core.throttle;\n+\n+import org.ballerinalang.jvm.values.MapValue;\n+\n+/**\n+ * This class is responsible for executing data processing logic. This class implements runnable interface and\n+ * need to execute using thread pool executor.\n+ */\n+public class DataProcessAgent implements Runnable {\n+\n+    private ThrottleCounter throttleCounter;\n+\n+    private String apiKey;\n+    private String appKey;\n+    private boolean stopOnQuota;\n+    private String subscriptionKey;\n+    private long appTierCount;\n+    private long appTierUnitTime;\n+    private String appTierTimeUnit;\n+    private long apiTierCount;\n+    private long apiTierUnitTime;\n+    private long subscriptionTierCount;\n+    private long subscriptionTierUnitTime;\n+    private String subscriptionTierTimeUnit;\n+    private String resourceKey;\n+    private long resourceTierCount;\n+    private long resourceTierUnitTime;\n+    private String resourceTierTimeUnit;\n+    private long timestamp;\n+\n+", "originalCommit": "6953614d56b5ca2e409e2e569445d962b1cfc1d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0fef6b12cb7c150e912a926688ea3939dbc462db", "url": "https://github.com/wso2/product-microgateway/commit/0fef6b12cb7c150e912a926688ea3939dbc462db", "message": "review improvements and performance improvements", "committedDate": "2020-02-07T13:17:35Z", "type": "commit"}]}