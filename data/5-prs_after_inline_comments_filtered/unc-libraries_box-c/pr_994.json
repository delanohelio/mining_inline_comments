{"pr_number": 994, "pr_title": "BXC-2537/2638 - Deposit migrated timestamps and deposit links", "pr_createdAt": "2020-05-19T16:32:02Z", "pr_url": "https://github.com/UNC-Libraries/box-c/pull/994", "timeline": [{"oid": "175e6a21d0c869045a6c57e9303646bbbca894e0", "url": "https://github.com/UNC-Libraries/box-c/commit/175e6a21d0c869045a6c57e9303646bbbca894e0", "message": "Honor original deposit record link overrides during ingest of content objects. Resolves BXC-2537", "committedDate": "2020-05-18T18:48:54Z", "type": "commit"}, {"oid": "756772c6d309502e0c2f759cc7031dabe3e909e7", "url": "https://github.com/UNC-Libraries/box-c/commit/756772c6d309502e0c2f759cc7031dabe3e909e7", "message": "Support overriding of timestamps during ingest of content objects. Longleaf registration skip deposit record files if no deposit record generated", "committedDate": "2020-05-19T15:31:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU1NzE3MQ==", "url": "https://github.com/UNC-Libraries/box-c/pull/994#discussion_r427557171", "bodyText": "does .addLiteral() overwrite the previous value, or is the last modified on the deposit not set by default?", "author": "lfarrell", "createdAt": "2020-05-19T19:46:25Z", "path": "deposit/src/test/java/edu/unc/lib/deposit/fcrepo4/IngestContentObjectsJobIT.java", "diffHunk": "@@ -728,6 +734,135 @@ public void onlyIngestionEventAddedTest() throws Exception {\n         assertTrue(logModel.contains(null, RDF.type, Premis.Ingestion));\n     }\n \n+    @Test\n+    public void fromMultipleDepositsTest() throws Exception {\n+\n+        PID folderObj1Pid = pidMinter.mintContentPid();\n+        PID folderObj2Pid = pidMinter.mintContentPid();\n+        PID folderObj3Pid = pidMinter.mintContentPid();\n+\n+        PID deposit2Pid = pidMinter.mintDepositRecordPid();\n+        PID deposit3Pid = pidMinter.mintDepositRecordPid();\n+\n+        // Create the deposit records since the references must resolve\n+        repoObjFactory.createDepositRecord(deposit2Pid, null);\n+        repoObjFactory.createDepositRecord(deposit3Pid, null);\n+\n+        Model model = job.getWritableModel();\n+        Bag depBag = model.createBag(depositPid.getRepositoryPath());\n+\n+        // First folder from deposit 2\n+        Bag folder1Bag = model.createBag(folderObj1Pid.getRepositoryPath());\n+        folder1Bag.addProperty(RDF.type, Cdr.Folder);\n+        folder1Bag.addProperty(CdrDeposit.originalDeposit, createResource(deposit2Pid.getRepositoryPath()));\n+        depBag.add(folder1Bag);\n+\n+        // Second folder from default deposit\n+        Bag folder2Bag = model.createBag(folderObj2Pid.getRepositoryPath());\n+        folder2Bag.addProperty(RDF.type, Cdr.Folder);\n+        depBag.add(folder2Bag);\n+\n+        // Third folder from deposit 3\n+        Bag folder3Bag = model.createBag(folderObj3Pid.getRepositoryPath());\n+        folder3Bag.addProperty(RDF.type, Cdr.Folder);\n+        folder3Bag.addProperty(CdrDeposit.originalDeposit, createResource(deposit3Pid.getRepositoryPath()));\n+        depBag.add(folder3Bag);\n+\n+        job.closeModel();\n+\n+        job.run();\n+\n+        treeIndexer.indexAll(baseAddress);\n+\n+        // Verify that the correct original deposit ids are assigned to each folder\n+        FolderObject folder1 = repoObjLoader.getFolderObject(folderObj1Pid);\n+        Resource f1DepositResc = folder1.getResource().getProperty(Cdr.originalDeposit).getResource();\n+        assertEquals(deposit2Pid.getRepositoryPath(), f1DepositResc.getURI());\n+\n+        FolderObject folder2 = repoObjLoader.getFolderObject(folderObj2Pid);\n+        Resource f2DepositResc = folder2.getResource().getProperty(Cdr.originalDeposit).getResource();\n+        assertEquals(depositPid.getRepositoryPath(), f2DepositResc.getURI());\n+\n+        FolderObject folder3 = repoObjLoader.getFolderObject(folderObj3Pid);\n+        Resource f3DepositResc = folder3.getResource().getProperty(Cdr.originalDeposit).getResource();\n+        assertEquals(deposit3Pid.getRepositoryPath(), f3DepositResc.getURI());\n+    }\n+\n+    private final static String CREATED_STRING = \"2011-10-04T20:36:44.902Z\";\n+    private final static String LAST_MODIFIED_STRING = \"2013-10-06T10:16:44.111Z\";\n+    private final static Date CREATED_DATE = DateTimeUtil.parseUTCToDate(CREATED_STRING);\n+    private final static Date LAST_MODIFIED_DATE = DateTimeUtil.parseUTCToDate(LAST_MODIFIED_STRING);\n+\n+    @Test\n+    public void overrideTimestampsTest() throws Exception {\n+        Map<String, String> status = new HashMap<>();\n+        status.put(DepositField.containerId.name(), RepositoryPaths.getContentRootPid().getRepositoryPath());\n+        status.put(DepositField.permissionGroups.name(), \"adminGroup\");\n+        status.put(DepositField.overrideTimestamps.name(), \"true\");\n+        depositStatusFactory.save(depositUUID, status);\n+\n+        Model model = job.getWritableModel();\n+        Bag depBag = model.createBag(depositPid.getRepositoryPath());\n+\n+        PID unitPid = pidMinter.mintContentPid();\n+        Bag unitBag = model.createBag(unitPid.getRepositoryPath());\n+        unitBag.addProperty(RDF.type, Cdr.AdminUnit);\n+        unitBag.addLiteral(CdrDeposit.lastModifiedTime, LAST_MODIFIED_STRING);\n+        unitBag.addLiteral(CdrDeposit.createTime, CREATED_STRING);\n+        depBag.add(unitBag);\n+\n+        PID collPid = pidMinter.mintContentPid();\n+        Bag collBag = model.createBag(collPid.getRepositoryPath());\n+        collBag.addProperty(RDF.type, Cdr.Collection);\n+        collBag.addLiteral(CdrDeposit.lastModifiedTime, LAST_MODIFIED_STRING);\n+        collBag.addLiteral(CdrDeposit.createTime, CREATED_STRING);\n+        unitBag.add(collBag);\n+\n+        PID folderPid = pidMinter.mintContentPid();\n+        Bag folderBag = model.createBag(folderPid.getRepositoryPath());\n+        folderBag.addProperty(RDF.type, Cdr.Folder);\n+        folderBag.addLiteral(CdrDeposit.lastModifiedTime, LAST_MODIFIED_STRING);", "originalCommit": "756772c6d309502e0c2f759cc7031dabe3e909e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU1OTM2Mg==", "url": "https://github.com/UNC-Libraries/box-c/pull/994#discussion_r427559362", "bodyText": "it doesn't overwrite the previous value, unless its exactly the same value. The last modified is not normally set in the deposit pipeline because it is automatically generated by fedora. Fedora actually would normally throw an error if you make a PUT or a POST request with the created or lastModified timestamp, you have to put it into the special \"relaxed\" mode to allow this, which we will only have enabled when we need it (such as the migration). You can see me turning it on for this IT in this PR.", "author": "bbpennel", "createdAt": "2020-05-19T19:50:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU1NzE3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU2MDg5Mg==", "url": "https://github.com/UNC-Libraries/box-c/pull/994#discussion_r427560892", "bodyText": "ah, so it's something you generally don't need to worry about.", "author": "lfarrell", "createdAt": "2020-05-19T19:53:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU1NzE3MQ=="}], "type": "inlineReview"}]}