{"pr_number": 1002, "pr_title": "BXC-2622 - Register updates to longleaf ", "pr_createdAt": "2020-06-01T16:03:54Z", "pr_url": "https://github.com/UNC-Libraries/box-c/pull/1002", "timeline": [{"oid": "2ed49d395bf49bfbccd9d9c5d3e74137b0c5318c", "url": "https://github.com/UNC-Libraries/box-c/commit/2ed49d395bf49bfbccd9d9c5d3e74137b0c5318c", "message": "Add sjms dependency for batch support", "committedDate": "2020-06-01T15:55:18Z", "type": "commit"}, {"oid": "3319162d27d972ed711588ab186204145b82303a", "url": "https://github.com/UNC-Libraries/box-c/commit/3319162d27d972ed711588ab186204145b82303a", "message": "Add batched processing of longleaf registration jobs", "committedDate": "2020-06-01T16:01:24Z", "type": "commit"}, {"oid": "810b15210ea2ce06832543eff1aa46f34fe52367", "url": "https://github.com/UNC-Libraries/box-c/commit/810b15210ea2ce06832543eff1aa46f34fe52367", "message": "Remove deposit longleaf registration job in favor of camel based approach", "committedDate": "2020-06-01T16:01:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxNDcxMA==", "url": "https://github.com/UNC-Libraries/box-c/pull/1002#discussion_r435414710", "bodyText": "How is this getting to the next route, the only from() goes to sjms-batch?", "author": "lfarrell", "createdAt": "2020-06-04T17:07:51Z", "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/longleaf/LongleafRouter.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services.camel.longleaf;\n+\n+import org.apache.camel.BeanInject;\n+import org.apache.camel.LoggingLevel;\n+import org.apache.camel.builder.RouteBuilder;\n+\n+/**\n+ * Router for longleaf operations\n+ *\n+ * @author bbpennel\n+ */\n+public class LongleafRouter extends RouteBuilder {\n+\n+    @BeanInject(value = \"registerLongleafProcessor\")\n+    private RegisterToLongleafProcessor registerProcessor;\n+\n+    @Override\n+    public void configure() throws Exception {\n+        from(\"direct-vm:filter.longleaf\")\n+            .filter().method(RegisterToLongleafProcessor.class, \"registerableBinary\")\n+            .log(LoggingLevel.DEBUG, \"Queuing ${headers[CamelFcrepoUri]} for registration to longleaf\")\n+            .to(\"sjms:register.longleaf?transacted=true\");", "originalCommit": "810b15210ea2ce06832543eff1aa46f34fe52367", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ1OTg2OQ==", "url": "https://github.com/UNC-Libraries/box-c/pull/1002#discussion_r435459869", "bodyText": "its a quirk of how sjms-batch works, you have to set destinations as sjms:, but the route configuration has to be setup with sjms-batch. You can see it scattered around this document:\nhttps://camel.apache.org/components/latest/sjms-batch-component.html\nMy impression is that from the outside, it just looks like an sjms queue, while internally it is configured to do the batching (there might even be two routes behind the scenes)", "author": "bbpennel", "createdAt": "2020-06-04T18:23:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxNDcxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxNTQ4Mw==", "url": "https://github.com/UNC-Libraries/box-c/pull/1002#discussion_r435415483", "bodyText": "What is this \"one or more\" of?", "author": "lfarrell", "createdAt": "2020-06-04T17:09:15Z", "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/longleaf/RegisterToLongleafProcessor.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services.camel.longleaf;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Arrays.asList;\n+import static org.apache.commons.lang3.StringUtils.substringAfterLast;\n+import static org.fcrepo.camel.FcrepoHeaders.FCREPO_URI;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.camel.Processor;\n+import org.apache.commons.lang3.StringUtils;\n+import org.fcrepo.client.FcrepoClient;\n+import org.fcrepo.client.FcrepoOperationFailedException;\n+import org.fcrepo.client.FcrepoResponse;\n+import org.fcrepo.client.FedoraHeaderConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import edu.unc.lib.dl.fcrepo4.BinaryObject;\n+import edu.unc.lib.dl.fcrepo4.ClientFaultResolver;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.RepositoryPathConstants;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.fedora.ServiceException;\n+import edu.unc.lib.dl.model.DatastreamType;\n+\n+/**\n+ * Processor which registers binaries in longleaf\n+ *\n+ * @author bbpennel\n+ * @author smithjp\n+ */\n+public class RegisterToLongleafProcessor implements Processor {\n+    private static final Logger log = LoggerFactory.getLogger(RegisterToLongleafProcessor.class);\n+    private static final Logger longleafLog = LoggerFactory.getLogger(\"longleaf\");\n+\n+    public static final List<String> REGISTERABLE_IDS = asList(\n+            DatastreamType.MD_DESCRIPTIVE.getId(),\n+            DatastreamType.MD_DESCRIPTIVE_HISTORY.getId(),\n+            DatastreamType.MD_EVENTS.getId(),\n+            DatastreamType.ORIGINAL_FILE.getId(),\n+            DatastreamType.TECHNICAL_METADATA.getId()\n+        );\n+\n+    private String longleafBaseCommand;\n+\n+    private RepositoryObjectLoader repoObjLoader;\n+\n+    private FcrepoClient fcrepoClient;\n+\n+    /**\n+     * The exchange here is expected to be a batch message with one or more", "originalCommit": "810b15210ea2ce06832543eff1aa46f34fe52367", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ2MDQ0Nw==", "url": "https://github.com/UNC-Libraries/box-c/pull/1002#discussion_r435460447", "bodyText": "we may never know...\nI'll fix that", "author": "bbpennel", "createdAt": "2020-06-04T18:23:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxNTQ4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxODA3OA==", "url": "https://github.com/UNC-Libraries/box-c/pull/1002#discussion_r435418078", "bodyText": "Why isn't this just a regular int?", "author": "lfarrell", "createdAt": "2020-06-04T17:13:38Z", "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/longleaf/RegisterToLongleafProcessor.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services.camel.longleaf;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Arrays.asList;\n+import static org.apache.commons.lang3.StringUtils.substringAfterLast;\n+import static org.fcrepo.camel.FcrepoHeaders.FCREPO_URI;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.camel.Processor;\n+import org.apache.commons.lang3.StringUtils;\n+import org.fcrepo.client.FcrepoClient;\n+import org.fcrepo.client.FcrepoOperationFailedException;\n+import org.fcrepo.client.FcrepoResponse;\n+import org.fcrepo.client.FedoraHeaderConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import edu.unc.lib.dl.fcrepo4.BinaryObject;\n+import edu.unc.lib.dl.fcrepo4.ClientFaultResolver;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.RepositoryPathConstants;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.fedora.ServiceException;\n+import edu.unc.lib.dl.model.DatastreamType;\n+\n+/**\n+ * Processor which registers binaries in longleaf\n+ *\n+ * @author bbpennel\n+ * @author smithjp\n+ */\n+public class RegisterToLongleafProcessor implements Processor {\n+    private static final Logger log = LoggerFactory.getLogger(RegisterToLongleafProcessor.class);\n+    private static final Logger longleafLog = LoggerFactory.getLogger(\"longleaf\");\n+\n+    public static final List<String> REGISTERABLE_IDS = asList(\n+            DatastreamType.MD_DESCRIPTIVE.getId(),\n+            DatastreamType.MD_DESCRIPTIVE_HISTORY.getId(),\n+            DatastreamType.MD_EVENTS.getId(),\n+            DatastreamType.ORIGINAL_FILE.getId(),\n+            DatastreamType.TECHNICAL_METADATA.getId()\n+        );\n+\n+    private String longleafBaseCommand;\n+\n+    private RepositoryObjectLoader repoObjLoader;\n+\n+    private FcrepoClient fcrepoClient;\n+\n+    /**\n+     * The exchange here is expected to be a batch message with one or more\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void process(Exchange exchange) throws Exception {\n+        Message aggrMsg = exchange.getIn();\n+\n+        // Key is the digest key, value is a map of storage uri to digest value\n+        Map<String, Map<URI, String>> digestsMap = new HashMap<>();\n+        Map<URI, String> md5Map = new HashMap<>();\n+        Map<URI, String> sha1Map = new HashMap<>();\n+        digestsMap.put(\"md5\", md5Map);\n+        digestsMap.put(\"sha1\", sha1Map);\n+\n+        List<String> messages = aggrMsg.getBody(List.class);\n+        for (String fcrepoUri : messages) {\n+            try {\n+                PID pid = PIDs.get(fcrepoUri);\n+                BinaryObject binObj = repoObjLoader.getBinaryObject(pid);\n+\n+                String md5 = trimFedoraDigest(binObj.getMd5Checksum(), \":\");\n+                String sha1 = trimFedoraDigest(binObj.getSha1Checksum(), \":\");\n+                URI storageUri = binObj.getContentUri();\n+\n+                if (md5 != null) {\n+                    md5Map.put(storageUri, md5);\n+                }\n+                if (sha1 != null) {\n+                    sha1Map.put(storageUri, sha1);\n+                }\n+                if (md5 == null && sha1 == null) {\n+                    sha1Map.put(storageUri, calculateSha1(pid));\n+                }\n+            } catch (Exception e) {\n+                log.error(\"Failed to add {} to batch for regisration to longleaf\", fcrepoUri, e);\n+            }\n+        }\n+\n+        registerFiles(digestsMap);\n+    }\n+\n+    private String calculateSha1(PID pid) {\n+        try (FcrepoResponse response = fcrepoClient.head(pid.getRepositoryUri())\n+                .addHeader(FedoraHeaderConstants.WANT_DIGEST, \"sha\")\n+                .perform()) {\n+            String digestVal = response.getHeaderValue(FedoraHeaderConstants.DIGEST);\n+            if (digestVal == null) {\n+                throw new ServiceException(\"Failed to calculate sha1 for \" + pid.getRepositoryPath());\n+            } else {\n+                return trimFedoraDigest(digestVal, \"=\");\n+            }\n+        } catch (IOException e) {\n+            throw new ServiceException(e);\n+        } catch (FcrepoOperationFailedException e) {\n+            ClientFaultResolver.resolve(e);\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Executes longleaf register command for a batch of files with digests\n+     *\n+     * @param digestsMap mapping of digest algorithms to paths plus digest values\n+     */\n+    private void registerFiles(Map<String, Map<URI, String>> digestsMap) {\n+        long start = System.currentTimeMillis();\n+\n+        StringBuilder sb = new StringBuilder();\n+        final int[] cntArray = { 0 };", "originalCommit": "810b15210ea2ce06832543eff1aa46f34fe52367", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ2NDg1Mg==", "url": "https://github.com/UNC-Libraries/box-c/pull/1002#discussion_r435464852", "bodyText": "because its being incremented inside of nested forEach blocks. Variables used inside of these blocks must be final, but for primatives like ints you can't modify them if they are final. So instead its incrementing a value inside of a final array. Other methods would be to use an AtomicInteger or a MutableInt, perhaps one of those would be less confusing. I don't know if there is an performance difference.", "author": "bbpennel", "createdAt": "2020-06-04T18:29:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxODA3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyOTI4Mw==", "url": "https://github.com/UNC-Libraries/box-c/pull/1002#discussion_r435429283", "bodyText": "Should there still be a test for this endpoint somewhere?", "author": "lfarrell", "createdAt": "2020-06-04T17:32:31Z", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/routing/MetaServicesRouterTest.java", "diffHunk": "@@ -77,8 +80,7 @@ public void testRouteStartContainer() throws Exception {\n \n     @Test\n     public void testEventTypeFilter() throws Exception {\n-        getMockEndpoint(\"mock:{{cdr.enhancement.stream.camel}}\").expectedMessageCount(0);", "originalCommit": "810b15210ea2ce06832543eff1aa46f34fe52367", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3MjM4OA==", "url": "https://github.com/UNC-Libraries/box-c/pull/1002#discussion_r435472388", "bodyText": "The route being tested here doesn't go to that destination anymore. There is a test that checks for messages going to {{cdr.enhancement.stream.camel}} down in the test of the process.creation route though:\nhttps://github.com/UNC-Libraries/Carolina-Digital-Repository/pull/1002/files/810b15210ea2ce06832543eff1aa46f34fe52367#diff-490c86aa5ca6fd996958ce730fc402a0R132", "author": "bbpennel", "createdAt": "2020-06-04T18:40:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyOTI4Mw=="}], "type": "inlineReview"}, {"oid": "f8af387d9fa7f635ec28f34b4ec9af23ab565763", "url": "https://github.com/UNC-Libraries/box-c/commit/f8af387d9fa7f635ec28f34b4ec9af23ab565763", "message": "Switch counter over to a MutableInt, and finish comment", "committedDate": "2020-06-04T18:41:47Z", "type": "commit"}]}