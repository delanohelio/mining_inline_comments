{"pr_number": 435, "pr_title": "Code quality/increase coverage of device management service", "pr_createdAt": "2020-09-29T07:02:49Z", "pr_url": "https://github.com/OSGP/open-smart-grid-platform/pull/435", "timeline": [{"oid": "2ebef3c143a0aee8ac7f7831bbf2de22f01b6b4f", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/2ebef3c143a0aee8ac7f7831bbf2de22f01b6b4f", "message": "Added tests for the DeviceManagementService class\n\nIncreased coverage to 100%", "committedDate": "2020-09-22T07:55:06Z", "type": "commit"}, {"oid": "6370dfb388a411a4cca050e131eaa048d19bb432", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/6370dfb388a411a4cca050e131eaa048d19bb432", "message": "- Using AssertJ\n- Rewrote all tests to verify parameters better", "committedDate": "2020-09-24T13:52:47Z", "type": "commit"}, {"oid": "0ad2c7ec342bfc7c3ab13d9ff43d93c21a0cb1c0", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/0ad2c7ec342bfc7c3ab13d9ff43d93c21a0cb1c0", "message": "- verify(never()) -> verifyNoInteractions()", "committedDate": "2020-09-24T13:59:50Z", "type": "commit"}, {"oid": "c3900672f9c686e691bffcbe9a2e055044e2c22e", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/c3900672f9c686e691bffcbe9a2e055044e2c22e", "message": "- Added variables of expected Response- and RequestMessages instead of inline variables.", "committedDate": "2020-09-24T14:24:16Z", "type": "commit"}, {"oid": "042bc2f3426827e05795a38d7afd4c2be234dc35", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/042bc2f3426827e05795a38d7afd4c2be234dc35", "message": "- Fixed NullPointer Exceptions", "committedDate": "2020-10-08T08:35:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA2OTE1MA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/435#discussion_r503069150", "bodyText": "add licence header", "author": "robindenadel", "createdAt": "2020-10-12T06:41:29Z", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/DeviceManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,217 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;", "originalCommit": "042bc2f3426827e05795a38d7afd4c2be234dc35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyNTgyNA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/435#discussion_r503725824", "bodyText": "License header has been added", "author": "MithraicMagic", "createdAt": "2020-10-13T07:28:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA2OTE1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY3MTM1Nw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/435#discussion_r510671357", "bodyText": "Move the licence header to the top of the file", "author": "robindenadel", "createdAt": "2020-10-23T06:52:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA2OTE1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA2OTYxOQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/435#discussion_r503069619", "bodyText": "Remove this line", "author": "robindenadel", "createdAt": "2020-10-12T06:42:33Z", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/DeviceManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,217 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.CdmaSettings;\n+import org.opensmartgridplatform.domain.core.valueobjects.Certification;\n+import org.opensmartgridplatform.domain.core.valueobjects.DeviceLifecycleStatus;\n+import org.opensmartgridplatform.domain.core.valueobjects.EventNotificationType;\n+import org.opensmartgridplatform.dto.valueobjects.EventNotificationMessageDataContainerDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.LENIENT)", "originalCommit": "042bc2f3426827e05795a38d7afd4c2be234dc35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA2OTg2Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/435#discussion_r503069862", "bodyText": "rename the field to argumentRequestMessage", "author": "robindenadel", "createdAt": "2020-10-12T06:43:18Z", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/DeviceManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,217 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.CdmaSettings;\n+import org.opensmartgridplatform.domain.core.valueobjects.Certification;\n+import org.opensmartgridplatform.domain.core.valueobjects.DeviceLifecycleStatus;\n+import org.opensmartgridplatform.domain.core.valueobjects.EventNotificationType;\n+import org.opensmartgridplatform.dto.valueobjects.EventNotificationMessageDataContainerDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.LENIENT)\n+public class DeviceManagementServiceTest {\n+\t\n+\t@Mock\n+\tprivate TransactionalDeviceService transactionalDeviceService;\n+\t\n+\t@Mock\n+\tprivate DeviceDomainService deviceDomainService;\n+\t\n+\t@Mock\n+\tprivate DomainCoreMapper domainCoreMapper;\n+\t\n+\t@Mock\n+\tprivate OsgpCoreRequestMessageSender osgpCoreRequestManager;\n+\t\n+\t@Mock\n+\tprivate WebServiceResponseMessageSender webServiceResponseMessageSender;\n+\n+\t@Mock\n+\tprivate OrganisationDomainService organisationDomainService;\n+\t\n+\t@InjectMocks\n+\tprivate DeviceManagementService deviceManagementService;\n+\n+\t@Captor\n+\tprivate ArgumentCaptor<RequestMessage> argumentReqM;", "originalCommit": "042bc2f3426827e05795a38d7afd4c2be234dc35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA2OTk0Nw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/435#discussion_r503069947", "bodyText": "rename the field to argumentResponseMessage", "author": "robindenadel", "createdAt": "2020-10-12T06:43:31Z", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/DeviceManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,217 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.CdmaSettings;\n+import org.opensmartgridplatform.domain.core.valueobjects.Certification;\n+import org.opensmartgridplatform.domain.core.valueobjects.DeviceLifecycleStatus;\n+import org.opensmartgridplatform.domain.core.valueobjects.EventNotificationType;\n+import org.opensmartgridplatform.dto.valueobjects.EventNotificationMessageDataContainerDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.LENIENT)\n+public class DeviceManagementServiceTest {\n+\t\n+\t@Mock\n+\tprivate TransactionalDeviceService transactionalDeviceService;\n+\t\n+\t@Mock\n+\tprivate DeviceDomainService deviceDomainService;\n+\t\n+\t@Mock\n+\tprivate DomainCoreMapper domainCoreMapper;\n+\t\n+\t@Mock\n+\tprivate OsgpCoreRequestMessageSender osgpCoreRequestManager;\n+\t\n+\t@Mock\n+\tprivate WebServiceResponseMessageSender webServiceResponseMessageSender;\n+\n+\t@Mock\n+\tprivate OrganisationDomainService organisationDomainService;\n+\t\n+\t@InjectMocks\n+\tprivate DeviceManagementService deviceManagementService;\n+\n+\t@Captor\n+\tprivate ArgumentCaptor<RequestMessage> argumentReqM;\n+\n+\t@Captor\n+\tprivate ArgumentCaptor<ResponseMessage> argumentResM;", "originalCommit": "042bc2f3426827e05795a38d7afd4c2be234dc35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA3MDA1NA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/435#discussion_r503070054", "bodyText": "give this field a descriptive name like argumentMessageType", "author": "robindenadel", "createdAt": "2020-10-12T06:43:55Z", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/DeviceManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,217 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.CdmaSettings;\n+import org.opensmartgridplatform.domain.core.valueobjects.Certification;\n+import org.opensmartgridplatform.domain.core.valueobjects.DeviceLifecycleStatus;\n+import org.opensmartgridplatform.domain.core.valueobjects.EventNotificationType;\n+import org.opensmartgridplatform.dto.valueobjects.EventNotificationMessageDataContainerDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.LENIENT)\n+public class DeviceManagementServiceTest {\n+\t\n+\t@Mock\n+\tprivate TransactionalDeviceService transactionalDeviceService;\n+\t\n+\t@Mock\n+\tprivate DeviceDomainService deviceDomainService;\n+\t\n+\t@Mock\n+\tprivate DomainCoreMapper domainCoreMapper;\n+\t\n+\t@Mock\n+\tprivate OsgpCoreRequestMessageSender osgpCoreRequestManager;\n+\t\n+\t@Mock\n+\tprivate WebServiceResponseMessageSender webServiceResponseMessageSender;\n+\n+\t@Mock\n+\tprivate OrganisationDomainService organisationDomainService;\n+\t\n+\t@InjectMocks\n+\tprivate DeviceManagementService deviceManagementService;\n+\n+\t@Captor\n+\tprivate ArgumentCaptor<RequestMessage> argumentReqM;\n+\n+\t@Captor\n+\tprivate ArgumentCaptor<ResponseMessage> argumentResM;\n+\n+\t@Captor\n+\tprivate ArgumentCaptor<String> argumentStringOne;", "originalCommit": "042bc2f3426827e05795a38d7afd4c2be234dc35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc0MjM1Mw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/435#discussion_r503742353", "bodyText": "Renamed this field and added a new argumentDeviceIdentification field, since argumentStringOne was used for capturing both messageType and deviceIdentification.", "author": "MithraicMagic", "createdAt": "2020-10-13T07:55:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA3MDA1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA3MDQwOQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/435#discussion_r503070409", "bodyText": "give this field a descriptive name like argumentIpAddress", "author": "robindenadel", "createdAt": "2020-10-12T06:44:48Z", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/DeviceManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,217 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.CdmaSettings;\n+import org.opensmartgridplatform.domain.core.valueobjects.Certification;\n+import org.opensmartgridplatform.domain.core.valueobjects.DeviceLifecycleStatus;\n+import org.opensmartgridplatform.domain.core.valueobjects.EventNotificationType;\n+import org.opensmartgridplatform.dto.valueobjects.EventNotificationMessageDataContainerDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.LENIENT)\n+public class DeviceManagementServiceTest {\n+\t\n+\t@Mock\n+\tprivate TransactionalDeviceService transactionalDeviceService;\n+\t\n+\t@Mock\n+\tprivate DeviceDomainService deviceDomainService;\n+\t\n+\t@Mock\n+\tprivate DomainCoreMapper domainCoreMapper;\n+\t\n+\t@Mock\n+\tprivate OsgpCoreRequestMessageSender osgpCoreRequestManager;\n+\t\n+\t@Mock\n+\tprivate WebServiceResponseMessageSender webServiceResponseMessageSender;\n+\n+\t@Mock\n+\tprivate OrganisationDomainService organisationDomainService;\n+\t\n+\t@InjectMocks\n+\tprivate DeviceManagementService deviceManagementService;\n+\n+\t@Captor\n+\tprivate ArgumentCaptor<RequestMessage> argumentReqM;\n+\n+\t@Captor\n+\tprivate ArgumentCaptor<ResponseMessage> argumentResM;\n+\n+\t@Captor\n+\tprivate ArgumentCaptor<String> argumentStringOne;\n+\n+\t@Captor\n+\tprivate ArgumentCaptor<String> argumentStringTwo;", "originalCommit": "042bc2f3426827e05795a38d7afd4c2be234dc35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA3MDUwMw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/435#discussion_r503070503", "bodyText": "give this field a descriptive name like argumentPriority", "author": "robindenadel", "createdAt": "2020-10-12T06:45:00Z", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/DeviceManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,217 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.CdmaSettings;\n+import org.opensmartgridplatform.domain.core.valueobjects.Certification;\n+import org.opensmartgridplatform.domain.core.valueobjects.DeviceLifecycleStatus;\n+import org.opensmartgridplatform.domain.core.valueobjects.EventNotificationType;\n+import org.opensmartgridplatform.dto.valueobjects.EventNotificationMessageDataContainerDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.LENIENT)\n+public class DeviceManagementServiceTest {\n+\t\n+\t@Mock\n+\tprivate TransactionalDeviceService transactionalDeviceService;\n+\t\n+\t@Mock\n+\tprivate DeviceDomainService deviceDomainService;\n+\t\n+\t@Mock\n+\tprivate DomainCoreMapper domainCoreMapper;\n+\t\n+\t@Mock\n+\tprivate OsgpCoreRequestMessageSender osgpCoreRequestManager;\n+\t\n+\t@Mock\n+\tprivate WebServiceResponseMessageSender webServiceResponseMessageSender;\n+\n+\t@Mock\n+\tprivate OrganisationDomainService organisationDomainService;\n+\t\n+\t@InjectMocks\n+\tprivate DeviceManagementService deviceManagementService;\n+\n+\t@Captor\n+\tprivate ArgumentCaptor<RequestMessage> argumentReqM;\n+\n+\t@Captor\n+\tprivate ArgumentCaptor<ResponseMessage> argumentResM;\n+\n+\t@Captor\n+\tprivate ArgumentCaptor<String> argumentStringOne;\n+\n+\t@Captor\n+\tprivate ArgumentCaptor<String> argumentStringTwo;\n+\n+\t@Captor\n+\tprivate ArgumentCaptor<Integer> argumentInt;", "originalCommit": "042bc2f3426827e05795a38d7afd4c2be234dc35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA3MTQ2Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/435#discussion_r503071462", "bodyText": "rename expectedRM to expectedRequestMessage (also in other tests)\nrefactor the creation of a request message to a method, so it can be used in other tests as well", "author": "robindenadel", "createdAt": "2020-10-12T06:47:23Z", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/DeviceManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,217 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.CdmaSettings;\n+import org.opensmartgridplatform.domain.core.valueobjects.Certification;\n+import org.opensmartgridplatform.domain.core.valueobjects.DeviceLifecycleStatus;\n+import org.opensmartgridplatform.domain.core.valueobjects.EventNotificationType;\n+import org.opensmartgridplatform.dto.valueobjects.EventNotificationMessageDataContainerDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.LENIENT)\n+public class DeviceManagementServiceTest {\n+\t\n+\t@Mock\n+\tprivate TransactionalDeviceService transactionalDeviceService;\n+\t\n+\t@Mock\n+\tprivate DeviceDomainService deviceDomainService;\n+\t\n+\t@Mock\n+\tprivate DomainCoreMapper domainCoreMapper;\n+\t\n+\t@Mock\n+\tprivate OsgpCoreRequestMessageSender osgpCoreRequestManager;\n+\t\n+\t@Mock\n+\tprivate WebServiceResponseMessageSender webServiceResponseMessageSender;\n+\n+\t@Mock\n+\tprivate OrganisationDomainService organisationDomainService;\n+\t\n+\t@InjectMocks\n+\tprivate DeviceManagementService deviceManagementService;\n+\n+\t@Captor\n+\tprivate ArgumentCaptor<RequestMessage> argumentReqM;\n+\n+\t@Captor\n+\tprivate ArgumentCaptor<ResponseMessage> argumentResM;\n+\n+\t@Captor\n+\tprivate ArgumentCaptor<String> argumentStringOne;\n+\n+\t@Captor\n+\tprivate ArgumentCaptor<String> argumentStringTwo;\n+\n+\t@Captor\n+\tprivate ArgumentCaptor<Integer> argumentInt;\n+\n+\t@BeforeEach\n+\tpublic void init() throws UnknownEntityException {\n+\t\twhen(this.organisationDomainService.searchOrganisation(any())).thenReturn(new Organisation());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testSetEventNotifications() throws FunctionalException {\n+\t\tfinal List<EventNotificationType> eventNotifications = Arrays.asList(\n+\t\t\t\tEventNotificationType.COMM_EVENTS,\n+\t\t\t\tEventNotificationType.DIAG_EVENTS);\n+\t\tfinal Device device = mock(Device.class);\n+\t\twhen(device.getIpAddress()).thenReturn(\"testIp\");\n+\t\twhen(this.deviceDomainService.searchActiveDevice(\"testDevice\", ComponentType.DOMAIN_CORE)).thenReturn(device);\n+\t\t\n+\t\tthis.deviceManagementService.setEventNotifications(\"testOrganisation\", \"testDevice\", \"testUid\",\n+\t\t\t\teventNotifications, \"testMessageType\", 1);\n+\n+\t\tverify(this.osgpCoreRequestManager).send(this.argumentReqM.capture(), this.argumentStringOne.capture(),\n+\t\t\t\tthis.argumentInt.capture(), this.argumentStringTwo.capture());\n+\n+\t\tfinal RequestMessage expectedRM = new RequestMessage(\"testUid\", \"testOrganisation\", \"testDevice\",\n+\t\t\t\tnew EventNotificationMessageDataContainerDto(this.domainCoreMapper.mapAsList(eventNotifications,\n+\t\t\t\t\t\torg.opensmartgridplatform.dto.valueobjects.EventNotificationTypeDto.class)));", "originalCommit": "042bc2f3426827e05795a38d7afd4c2be234dc35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA3MjA0MQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/435#discussion_r503072041", "bodyText": "refactor values you are going to check on in the assert part of the tests to constants", "author": "robindenadel", "createdAt": "2020-10-12T06:49:00Z", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/DeviceManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,217 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.CdmaSettings;\n+import org.opensmartgridplatform.domain.core.valueobjects.Certification;\n+import org.opensmartgridplatform.domain.core.valueobjects.DeviceLifecycleStatus;\n+import org.opensmartgridplatform.domain.core.valueobjects.EventNotificationType;\n+import org.opensmartgridplatform.dto.valueobjects.EventNotificationMessageDataContainerDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.LENIENT)\n+public class DeviceManagementServiceTest {\n+\t\n+\t@Mock\n+\tprivate TransactionalDeviceService transactionalDeviceService;\n+\t\n+\t@Mock\n+\tprivate DeviceDomainService deviceDomainService;\n+\t\n+\t@Mock\n+\tprivate DomainCoreMapper domainCoreMapper;\n+\t\n+\t@Mock\n+\tprivate OsgpCoreRequestMessageSender osgpCoreRequestManager;\n+\t\n+\t@Mock\n+\tprivate WebServiceResponseMessageSender webServiceResponseMessageSender;\n+\n+\t@Mock\n+\tprivate OrganisationDomainService organisationDomainService;\n+\t\n+\t@InjectMocks\n+\tprivate DeviceManagementService deviceManagementService;\n+\n+\t@Captor\n+\tprivate ArgumentCaptor<RequestMessage> argumentReqM;\n+\n+\t@Captor\n+\tprivate ArgumentCaptor<ResponseMessage> argumentResM;\n+\n+\t@Captor\n+\tprivate ArgumentCaptor<String> argumentStringOne;\n+\n+\t@Captor\n+\tprivate ArgumentCaptor<String> argumentStringTwo;\n+\n+\t@Captor\n+\tprivate ArgumentCaptor<Integer> argumentInt;\n+\n+\t@BeforeEach\n+\tpublic void init() throws UnknownEntityException {\n+\t\twhen(this.organisationDomainService.searchOrganisation(any())).thenReturn(new Organisation());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testSetEventNotifications() throws FunctionalException {\n+\t\tfinal List<EventNotificationType> eventNotifications = Arrays.asList(\n+\t\t\t\tEventNotificationType.COMM_EVENTS,\n+\t\t\t\tEventNotificationType.DIAG_EVENTS);\n+\t\tfinal Device device = mock(Device.class);\n+\t\twhen(device.getIpAddress()).thenReturn(\"testIp\");\n+\t\twhen(this.deviceDomainService.searchActiveDevice(\"testDevice\", ComponentType.DOMAIN_CORE)).thenReturn(device);\n+\t\t\n+\t\tthis.deviceManagementService.setEventNotifications(\"testOrganisation\", \"testDevice\", \"testUid\",\n+\t\t\t\teventNotifications, \"testMessageType\", 1);", "originalCommit": "042bc2f3426827e05795a38d7afd4c2be234dc35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f55fc92905535fe980310db71a46bfe40f21259a", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/f55fc92905535fe980310db71a46bfe40f21259a", "message": "- Added License Header\n- Renamed some fields\n- Added request message creation method\n- Refactored some strings into constants", "committedDate": "2020-10-13T07:53:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY3MTEwMw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/435#discussion_r510671103", "bodyText": "Formatting is not ok, check your settings.", "author": "robindenadel", "createdAt": "2020-10-23T06:51:49Z", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/DeviceManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;", "originalCommit": "f55fc92905535fe980310db71a46bfe40f21259a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY3NTA0Nw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/435#discussion_r510675047", "bodyText": "import EventNotificationTypeDto so you don't need to give the package name here", "author": "robindenadel", "createdAt": "2020-10-23T07:01:00Z", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/DeviceManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.CdmaSettings;\n+import org.opensmartgridplatform.domain.core.valueobjects.Certification;\n+import org.opensmartgridplatform.domain.core.valueobjects.DeviceLifecycleStatus;\n+import org.opensmartgridplatform.domain.core.valueobjects.EventNotificationType;\n+import org.opensmartgridplatform.dto.valueobjects.EventNotificationMessageDataContainerDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+@ExtendWith(MockitoExtension.class)\n+public class DeviceManagementServiceTest {\n+\n+    private static final String TEST_ORGANISATION = \"testOrganisation\";\n+    private static final String TEST_DEVICE = \"testDevice\";\n+    private static final String TEST_IP = \"testIp\";\n+    private static final String TEST_UID = \"testUid\";\n+    private static final String TEST_MESSAGE_TYPE = \"testMessageType\";\n+\n+    @Mock\n+    private TransactionalDeviceService transactionalDeviceService;\n+\n+    @Mock\n+    private DeviceDomainService deviceDomainService;\n+\n+    @Mock\n+    private DomainCoreMapper domainCoreMapper;\n+\n+    @Mock\n+    private OsgpCoreRequestMessageSender osgpCoreRequestManager;\n+\n+    @Mock\n+    private WebServiceResponseMessageSender webServiceResponseMessageSender;\n+\n+    @Mock\n+    private OrganisationDomainService organisationDomainService;\n+\n+    @InjectMocks\n+    private DeviceManagementService deviceManagementService;\n+\n+    @Captor\n+    private ArgumentCaptor<RequestMessage> argumentRequestMessage;\n+\n+    @Captor\n+    private ArgumentCaptor<ResponseMessage> argumentResponseMessage;\n+\n+    @Captor\n+    private ArgumentCaptor<String> argumentMessageType;\n+\n+    @Captor\n+    private ArgumentCaptor<String> argumentIpAddress;\n+\n+    @Captor\n+    private ArgumentCaptor<String> argumentDeviceIdentification;\n+\n+    @Captor\n+    private ArgumentCaptor<Integer> argumentPriority;\n+\n+    @BeforeEach\n+    public void init() throws UnknownEntityException {\n+        when(this.organisationDomainService.searchOrganisation(any())).thenReturn(new Organisation());\n+    }\n+\n+    @Test\n+    public void testSetEventNotifications() throws FunctionalException {\n+        final List<EventNotificationType> eventNotifications = Arrays.asList(EventNotificationType.COMM_EVENTS,\n+                EventNotificationType.DIAG_EVENTS);\n+        final Device device = mock(Device.class);\n+        when(device.getIpAddress()).thenReturn(TEST_IP);\n+        when(this.deviceDomainService.searchActiveDevice(TEST_DEVICE, ComponentType.DOMAIN_CORE)).thenReturn(device);\n+\n+        this.deviceManagementService.setEventNotifications(TEST_ORGANISATION, TEST_DEVICE, TEST_UID,\n+                eventNotifications, TEST_MESSAGE_TYPE, 1);\n+\n+        verify(this.osgpCoreRequestManager).send(this.argumentRequestMessage.capture(),\n+                this.argumentMessageType.capture(), this.argumentPriority.capture(), this.argumentIpAddress.capture());\n+\n+        final RequestMessage expectedRequestMessage = this.createNewRequestMessage(\n+                new EventNotificationMessageDataContainerDto(this.domainCoreMapper.mapAsList(eventNotifications,\n+                        org.opensmartgridplatform.dto.valueobjects.EventNotificationTypeDto.class)));", "originalCommit": "f55fc92905535fe980310db71a46bfe40f21259a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY3NTQ2OA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/435#discussion_r510675468", "bodyText": "Refactor 1 to a constant TEST_PRIORITY", "author": "robindenadel", "createdAt": "2020-10-23T07:01:57Z", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/DeviceManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.CdmaSettings;\n+import org.opensmartgridplatform.domain.core.valueobjects.Certification;\n+import org.opensmartgridplatform.domain.core.valueobjects.DeviceLifecycleStatus;\n+import org.opensmartgridplatform.domain.core.valueobjects.EventNotificationType;\n+import org.opensmartgridplatform.dto.valueobjects.EventNotificationMessageDataContainerDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+@ExtendWith(MockitoExtension.class)\n+public class DeviceManagementServiceTest {\n+\n+    private static final String TEST_ORGANISATION = \"testOrganisation\";\n+    private static final String TEST_DEVICE = \"testDevice\";\n+    private static final String TEST_IP = \"testIp\";\n+    private static final String TEST_UID = \"testUid\";\n+    private static final String TEST_MESSAGE_TYPE = \"testMessageType\";\n+\n+    @Mock\n+    private TransactionalDeviceService transactionalDeviceService;\n+\n+    @Mock\n+    private DeviceDomainService deviceDomainService;\n+\n+    @Mock\n+    private DomainCoreMapper domainCoreMapper;\n+\n+    @Mock\n+    private OsgpCoreRequestMessageSender osgpCoreRequestManager;\n+\n+    @Mock\n+    private WebServiceResponseMessageSender webServiceResponseMessageSender;\n+\n+    @Mock\n+    private OrganisationDomainService organisationDomainService;\n+\n+    @InjectMocks\n+    private DeviceManagementService deviceManagementService;\n+\n+    @Captor\n+    private ArgumentCaptor<RequestMessage> argumentRequestMessage;\n+\n+    @Captor\n+    private ArgumentCaptor<ResponseMessage> argumentResponseMessage;\n+\n+    @Captor\n+    private ArgumentCaptor<String> argumentMessageType;\n+\n+    @Captor\n+    private ArgumentCaptor<String> argumentIpAddress;\n+\n+    @Captor\n+    private ArgumentCaptor<String> argumentDeviceIdentification;\n+\n+    @Captor\n+    private ArgumentCaptor<Integer> argumentPriority;\n+\n+    @BeforeEach\n+    public void init() throws UnknownEntityException {\n+        when(this.organisationDomainService.searchOrganisation(any())).thenReturn(new Organisation());\n+    }\n+\n+    @Test\n+    public void testSetEventNotifications() throws FunctionalException {\n+        final List<EventNotificationType> eventNotifications = Arrays.asList(EventNotificationType.COMM_EVENTS,\n+                EventNotificationType.DIAG_EVENTS);\n+        final Device device = mock(Device.class);\n+        when(device.getIpAddress()).thenReturn(TEST_IP);\n+        when(this.deviceDomainService.searchActiveDevice(TEST_DEVICE, ComponentType.DOMAIN_CORE)).thenReturn(device);\n+\n+        this.deviceManagementService.setEventNotifications(TEST_ORGANISATION, TEST_DEVICE, TEST_UID,\n+                eventNotifications, TEST_MESSAGE_TYPE, 1);", "originalCommit": "f55fc92905535fe980310db71a46bfe40f21259a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY3NTkwOA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/435#discussion_r510675908", "bodyText": "use TEST_PRIORITY here", "author": "robindenadel", "createdAt": "2020-10-23T07:03:04Z", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/DeviceManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.CdmaSettings;\n+import org.opensmartgridplatform.domain.core.valueobjects.Certification;\n+import org.opensmartgridplatform.domain.core.valueobjects.DeviceLifecycleStatus;\n+import org.opensmartgridplatform.domain.core.valueobjects.EventNotificationType;\n+import org.opensmartgridplatform.dto.valueobjects.EventNotificationMessageDataContainerDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+@ExtendWith(MockitoExtension.class)\n+public class DeviceManagementServiceTest {\n+\n+    private static final String TEST_ORGANISATION = \"testOrganisation\";\n+    private static final String TEST_DEVICE = \"testDevice\";\n+    private static final String TEST_IP = \"testIp\";\n+    private static final String TEST_UID = \"testUid\";\n+    private static final String TEST_MESSAGE_TYPE = \"testMessageType\";\n+\n+    @Mock\n+    private TransactionalDeviceService transactionalDeviceService;\n+\n+    @Mock\n+    private DeviceDomainService deviceDomainService;\n+\n+    @Mock\n+    private DomainCoreMapper domainCoreMapper;\n+\n+    @Mock\n+    private OsgpCoreRequestMessageSender osgpCoreRequestManager;\n+\n+    @Mock\n+    private WebServiceResponseMessageSender webServiceResponseMessageSender;\n+\n+    @Mock\n+    private OrganisationDomainService organisationDomainService;\n+\n+    @InjectMocks\n+    private DeviceManagementService deviceManagementService;\n+\n+    @Captor\n+    private ArgumentCaptor<RequestMessage> argumentRequestMessage;\n+\n+    @Captor\n+    private ArgumentCaptor<ResponseMessage> argumentResponseMessage;\n+\n+    @Captor\n+    private ArgumentCaptor<String> argumentMessageType;\n+\n+    @Captor\n+    private ArgumentCaptor<String> argumentIpAddress;\n+\n+    @Captor\n+    private ArgumentCaptor<String> argumentDeviceIdentification;\n+\n+    @Captor\n+    private ArgumentCaptor<Integer> argumentPriority;\n+\n+    @BeforeEach\n+    public void init() throws UnknownEntityException {\n+        when(this.organisationDomainService.searchOrganisation(any())).thenReturn(new Organisation());\n+    }\n+\n+    @Test\n+    public void testSetEventNotifications() throws FunctionalException {\n+        final List<EventNotificationType> eventNotifications = Arrays.asList(EventNotificationType.COMM_EVENTS,\n+                EventNotificationType.DIAG_EVENTS);\n+        final Device device = mock(Device.class);\n+        when(device.getIpAddress()).thenReturn(TEST_IP);\n+        when(this.deviceDomainService.searchActiveDevice(TEST_DEVICE, ComponentType.DOMAIN_CORE)).thenReturn(device);\n+\n+        this.deviceManagementService.setEventNotifications(TEST_ORGANISATION, TEST_DEVICE, TEST_UID,\n+                eventNotifications, TEST_MESSAGE_TYPE, 1);\n+\n+        verify(this.osgpCoreRequestManager).send(this.argumentRequestMessage.capture(),\n+                this.argumentMessageType.capture(), this.argumentPriority.capture(), this.argumentIpAddress.capture());\n+\n+        final RequestMessage expectedRequestMessage = this.createNewRequestMessage(\n+                new EventNotificationMessageDataContainerDto(this.domainCoreMapper.mapAsList(eventNotifications,\n+                        org.opensmartgridplatform.dto.valueobjects.EventNotificationTypeDto.class)));\n+\n+        assertThat(this.argumentRequestMessage.getValue()).usingRecursiveComparison().isEqualTo(expectedRequestMessage);\n+        assertThat(this.argumentMessageType.getValue()).isEqualTo(TEST_MESSAGE_TYPE);\n+        assertThat(this.argumentPriority.getValue()).isEqualTo(1);", "originalCommit": "f55fc92905535fe980310db71a46bfe40f21259a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY3NTk3NA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/435#discussion_r510675974", "bodyText": "use TEST_PRIORITY here", "author": "robindenadel", "createdAt": "2020-10-23T07:03:13Z", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/DeviceManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.CdmaSettings;\n+import org.opensmartgridplatform.domain.core.valueobjects.Certification;\n+import org.opensmartgridplatform.domain.core.valueobjects.DeviceLifecycleStatus;\n+import org.opensmartgridplatform.domain.core.valueobjects.EventNotificationType;\n+import org.opensmartgridplatform.dto.valueobjects.EventNotificationMessageDataContainerDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+@ExtendWith(MockitoExtension.class)\n+public class DeviceManagementServiceTest {\n+\n+    private static final String TEST_ORGANISATION = \"testOrganisation\";\n+    private static final String TEST_DEVICE = \"testDevice\";\n+    private static final String TEST_IP = \"testIp\";\n+    private static final String TEST_UID = \"testUid\";\n+    private static final String TEST_MESSAGE_TYPE = \"testMessageType\";\n+\n+    @Mock\n+    private TransactionalDeviceService transactionalDeviceService;\n+\n+    @Mock\n+    private DeviceDomainService deviceDomainService;\n+\n+    @Mock\n+    private DomainCoreMapper domainCoreMapper;\n+\n+    @Mock\n+    private OsgpCoreRequestMessageSender osgpCoreRequestManager;\n+\n+    @Mock\n+    private WebServiceResponseMessageSender webServiceResponseMessageSender;\n+\n+    @Mock\n+    private OrganisationDomainService organisationDomainService;\n+\n+    @InjectMocks\n+    private DeviceManagementService deviceManagementService;\n+\n+    @Captor\n+    private ArgumentCaptor<RequestMessage> argumentRequestMessage;\n+\n+    @Captor\n+    private ArgumentCaptor<ResponseMessage> argumentResponseMessage;\n+\n+    @Captor\n+    private ArgumentCaptor<String> argumentMessageType;\n+\n+    @Captor\n+    private ArgumentCaptor<String> argumentIpAddress;\n+\n+    @Captor\n+    private ArgumentCaptor<String> argumentDeviceIdentification;\n+\n+    @Captor\n+    private ArgumentCaptor<Integer> argumentPriority;\n+\n+    @BeforeEach\n+    public void init() throws UnknownEntityException {\n+        when(this.organisationDomainService.searchOrganisation(any())).thenReturn(new Organisation());\n+    }\n+\n+    @Test\n+    public void testSetEventNotifications() throws FunctionalException {\n+        final List<EventNotificationType> eventNotifications = Arrays.asList(EventNotificationType.COMM_EVENTS,\n+                EventNotificationType.DIAG_EVENTS);\n+        final Device device = mock(Device.class);\n+        when(device.getIpAddress()).thenReturn(TEST_IP);\n+        when(this.deviceDomainService.searchActiveDevice(TEST_DEVICE, ComponentType.DOMAIN_CORE)).thenReturn(device);\n+\n+        this.deviceManagementService.setEventNotifications(TEST_ORGANISATION, TEST_DEVICE, TEST_UID,\n+                eventNotifications, TEST_MESSAGE_TYPE, 1);\n+\n+        verify(this.osgpCoreRequestManager).send(this.argumentRequestMessage.capture(),\n+                this.argumentMessageType.capture(), this.argumentPriority.capture(), this.argumentIpAddress.capture());\n+\n+        final RequestMessage expectedRequestMessage = this.createNewRequestMessage(\n+                new EventNotificationMessageDataContainerDto(this.domainCoreMapper.mapAsList(eventNotifications,\n+                        org.opensmartgridplatform.dto.valueobjects.EventNotificationTypeDto.class)));\n+\n+        assertThat(this.argumentRequestMessage.getValue()).usingRecursiveComparison().isEqualTo(expectedRequestMessage);\n+        assertThat(this.argumentMessageType.getValue()).isEqualTo(TEST_MESSAGE_TYPE);\n+        assertThat(this.argumentPriority.getValue()).isEqualTo(1);\n+        assertThat(this.argumentIpAddress.getValue()).isEqualTo(TEST_IP);\n+    }\n+\n+    @Test\n+    public void testUpdateDeviceSslCertificationIsNull() throws FunctionalException {\n+        this.deviceManagementService.updateDeviceSslCertification(TEST_ORGANISATION, TEST_DEVICE, TEST_UID, null,\n+                TEST_MESSAGE_TYPE, 1);", "originalCommit": "f55fc92905535fe980310db71a46bfe40f21259a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY3NjA2Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/435#discussion_r510676062", "bodyText": "use TEST_PRIORITY here", "author": "robindenadel", "createdAt": "2020-10-23T07:03:26Z", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/DeviceManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.CdmaSettings;\n+import org.opensmartgridplatform.domain.core.valueobjects.Certification;\n+import org.opensmartgridplatform.domain.core.valueobjects.DeviceLifecycleStatus;\n+import org.opensmartgridplatform.domain.core.valueobjects.EventNotificationType;\n+import org.opensmartgridplatform.dto.valueobjects.EventNotificationMessageDataContainerDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+@ExtendWith(MockitoExtension.class)\n+public class DeviceManagementServiceTest {\n+\n+    private static final String TEST_ORGANISATION = \"testOrganisation\";\n+    private static final String TEST_DEVICE = \"testDevice\";\n+    private static final String TEST_IP = \"testIp\";\n+    private static final String TEST_UID = \"testUid\";\n+    private static final String TEST_MESSAGE_TYPE = \"testMessageType\";\n+\n+    @Mock\n+    private TransactionalDeviceService transactionalDeviceService;\n+\n+    @Mock\n+    private DeviceDomainService deviceDomainService;\n+\n+    @Mock\n+    private DomainCoreMapper domainCoreMapper;\n+\n+    @Mock\n+    private OsgpCoreRequestMessageSender osgpCoreRequestManager;\n+\n+    @Mock\n+    private WebServiceResponseMessageSender webServiceResponseMessageSender;\n+\n+    @Mock\n+    private OrganisationDomainService organisationDomainService;\n+\n+    @InjectMocks\n+    private DeviceManagementService deviceManagementService;\n+\n+    @Captor\n+    private ArgumentCaptor<RequestMessage> argumentRequestMessage;\n+\n+    @Captor\n+    private ArgumentCaptor<ResponseMessage> argumentResponseMessage;\n+\n+    @Captor\n+    private ArgumentCaptor<String> argumentMessageType;\n+\n+    @Captor\n+    private ArgumentCaptor<String> argumentIpAddress;\n+\n+    @Captor\n+    private ArgumentCaptor<String> argumentDeviceIdentification;\n+\n+    @Captor\n+    private ArgumentCaptor<Integer> argumentPriority;\n+\n+    @BeforeEach\n+    public void init() throws UnknownEntityException {\n+        when(this.organisationDomainService.searchOrganisation(any())).thenReturn(new Organisation());\n+    }\n+\n+    @Test\n+    public void testSetEventNotifications() throws FunctionalException {\n+        final List<EventNotificationType> eventNotifications = Arrays.asList(EventNotificationType.COMM_EVENTS,\n+                EventNotificationType.DIAG_EVENTS);\n+        final Device device = mock(Device.class);\n+        when(device.getIpAddress()).thenReturn(TEST_IP);\n+        when(this.deviceDomainService.searchActiveDevice(TEST_DEVICE, ComponentType.DOMAIN_CORE)).thenReturn(device);\n+\n+        this.deviceManagementService.setEventNotifications(TEST_ORGANISATION, TEST_DEVICE, TEST_UID,\n+                eventNotifications, TEST_MESSAGE_TYPE, 1);\n+\n+        verify(this.osgpCoreRequestManager).send(this.argumentRequestMessage.capture(),\n+                this.argumentMessageType.capture(), this.argumentPriority.capture(), this.argumentIpAddress.capture());\n+\n+        final RequestMessage expectedRequestMessage = this.createNewRequestMessage(\n+                new EventNotificationMessageDataContainerDto(this.domainCoreMapper.mapAsList(eventNotifications,\n+                        org.opensmartgridplatform.dto.valueobjects.EventNotificationTypeDto.class)));\n+\n+        assertThat(this.argumentRequestMessage.getValue()).usingRecursiveComparison().isEqualTo(expectedRequestMessage);\n+        assertThat(this.argumentMessageType.getValue()).isEqualTo(TEST_MESSAGE_TYPE);\n+        assertThat(this.argumentPriority.getValue()).isEqualTo(1);\n+        assertThat(this.argumentIpAddress.getValue()).isEqualTo(TEST_IP);\n+    }\n+\n+    @Test\n+    public void testUpdateDeviceSslCertificationIsNull() throws FunctionalException {\n+        this.deviceManagementService.updateDeviceSslCertification(TEST_ORGANISATION, TEST_DEVICE, TEST_UID, null,\n+                TEST_MESSAGE_TYPE, 1);\n+\n+        //This method is not called since it comes after the check of the certificate\n+        verifyNoInteractions(this.domainCoreMapper);\n+    }\n+\n+    @Test\n+    public void testUpdateDeviceSslCertification() throws FunctionalException {\n+        final Device device = mock(Device.class);\n+        when(device.getIpAddress()).thenReturn(TEST_IP);\n+        when(this.deviceDomainService.searchActiveDevice(TEST_DEVICE, ComponentType.DOMAIN_CORE)).thenReturn(device);\n+        final Certification certification = new Certification(\"testUrl\", \"testDomain\");\n+\n+        this.deviceManagementService.updateDeviceSslCertification(TEST_ORGANISATION, TEST_DEVICE, TEST_UID,\n+                certification, TEST_MESSAGE_TYPE, 1);", "originalCommit": "f55fc92905535fe980310db71a46bfe40f21259a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY3NjE0Mw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/435#discussion_r510676143", "bodyText": "use TEST_PRIORITY here", "author": "robindenadel", "createdAt": "2020-10-23T07:03:39Z", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/DeviceManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.CdmaSettings;\n+import org.opensmartgridplatform.domain.core.valueobjects.Certification;\n+import org.opensmartgridplatform.domain.core.valueobjects.DeviceLifecycleStatus;\n+import org.opensmartgridplatform.domain.core.valueobjects.EventNotificationType;\n+import org.opensmartgridplatform.dto.valueobjects.EventNotificationMessageDataContainerDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+@ExtendWith(MockitoExtension.class)\n+public class DeviceManagementServiceTest {\n+\n+    private static final String TEST_ORGANISATION = \"testOrganisation\";\n+    private static final String TEST_DEVICE = \"testDevice\";\n+    private static final String TEST_IP = \"testIp\";\n+    private static final String TEST_UID = \"testUid\";\n+    private static final String TEST_MESSAGE_TYPE = \"testMessageType\";\n+\n+    @Mock\n+    private TransactionalDeviceService transactionalDeviceService;\n+\n+    @Mock\n+    private DeviceDomainService deviceDomainService;\n+\n+    @Mock\n+    private DomainCoreMapper domainCoreMapper;\n+\n+    @Mock\n+    private OsgpCoreRequestMessageSender osgpCoreRequestManager;\n+\n+    @Mock\n+    private WebServiceResponseMessageSender webServiceResponseMessageSender;\n+\n+    @Mock\n+    private OrganisationDomainService organisationDomainService;\n+\n+    @InjectMocks\n+    private DeviceManagementService deviceManagementService;\n+\n+    @Captor\n+    private ArgumentCaptor<RequestMessage> argumentRequestMessage;\n+\n+    @Captor\n+    private ArgumentCaptor<ResponseMessage> argumentResponseMessage;\n+\n+    @Captor\n+    private ArgumentCaptor<String> argumentMessageType;\n+\n+    @Captor\n+    private ArgumentCaptor<String> argumentIpAddress;\n+\n+    @Captor\n+    private ArgumentCaptor<String> argumentDeviceIdentification;\n+\n+    @Captor\n+    private ArgumentCaptor<Integer> argumentPriority;\n+\n+    @BeforeEach\n+    public void init() throws UnknownEntityException {\n+        when(this.organisationDomainService.searchOrganisation(any())).thenReturn(new Organisation());\n+    }\n+\n+    @Test\n+    public void testSetEventNotifications() throws FunctionalException {\n+        final List<EventNotificationType> eventNotifications = Arrays.asList(EventNotificationType.COMM_EVENTS,\n+                EventNotificationType.DIAG_EVENTS);\n+        final Device device = mock(Device.class);\n+        when(device.getIpAddress()).thenReturn(TEST_IP);\n+        when(this.deviceDomainService.searchActiveDevice(TEST_DEVICE, ComponentType.DOMAIN_CORE)).thenReturn(device);\n+\n+        this.deviceManagementService.setEventNotifications(TEST_ORGANISATION, TEST_DEVICE, TEST_UID,\n+                eventNotifications, TEST_MESSAGE_TYPE, 1);\n+\n+        verify(this.osgpCoreRequestManager).send(this.argumentRequestMessage.capture(),\n+                this.argumentMessageType.capture(), this.argumentPriority.capture(), this.argumentIpAddress.capture());\n+\n+        final RequestMessage expectedRequestMessage = this.createNewRequestMessage(\n+                new EventNotificationMessageDataContainerDto(this.domainCoreMapper.mapAsList(eventNotifications,\n+                        org.opensmartgridplatform.dto.valueobjects.EventNotificationTypeDto.class)));\n+\n+        assertThat(this.argumentRequestMessage.getValue()).usingRecursiveComparison().isEqualTo(expectedRequestMessage);\n+        assertThat(this.argumentMessageType.getValue()).isEqualTo(TEST_MESSAGE_TYPE);\n+        assertThat(this.argumentPriority.getValue()).isEqualTo(1);\n+        assertThat(this.argumentIpAddress.getValue()).isEqualTo(TEST_IP);\n+    }\n+\n+    @Test\n+    public void testUpdateDeviceSslCertificationIsNull() throws FunctionalException {\n+        this.deviceManagementService.updateDeviceSslCertification(TEST_ORGANISATION, TEST_DEVICE, TEST_UID, null,\n+                TEST_MESSAGE_TYPE, 1);\n+\n+        //This method is not called since it comes after the check of the certificate\n+        verifyNoInteractions(this.domainCoreMapper);\n+    }\n+\n+    @Test\n+    public void testUpdateDeviceSslCertification() throws FunctionalException {\n+        final Device device = mock(Device.class);\n+        when(device.getIpAddress()).thenReturn(TEST_IP);\n+        when(this.deviceDomainService.searchActiveDevice(TEST_DEVICE, ComponentType.DOMAIN_CORE)).thenReturn(device);\n+        final Certification certification = new Certification(\"testUrl\", \"testDomain\");\n+\n+        this.deviceManagementService.updateDeviceSslCertification(TEST_ORGANISATION, TEST_DEVICE, TEST_UID,\n+                certification, TEST_MESSAGE_TYPE, 1);\n+\n+        verify(this.osgpCoreRequestManager).send(this.argumentRequestMessage.capture(),\n+                this.argumentMessageType.capture(), this.argumentPriority.capture(), this.argumentIpAddress.capture());\n+\n+        final RequestMessage expectedRequestMessage = this.createNewRequestMessage(this.domainCoreMapper.map(certification,\n+                org.opensmartgridplatform.dto.valueobjects.CertificationDto.class));\n+\n+        assertThat(this.argumentRequestMessage.getValue()).usingRecursiveComparison().isEqualTo(expectedRequestMessage);\n+        assertThat(this.argumentMessageType.getValue()).isEqualTo(TEST_MESSAGE_TYPE);\n+        assertThat(this.argumentPriority.getValue()).isEqualTo(1);", "originalCommit": "f55fc92905535fe980310db71a46bfe40f21259a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY3NjIxNw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/435#discussion_r510676217", "bodyText": "use TEST_PRIORITY here", "author": "robindenadel", "createdAt": "2020-10-23T07:03:48Z", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/DeviceManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.CdmaSettings;\n+import org.opensmartgridplatform.domain.core.valueobjects.Certification;\n+import org.opensmartgridplatform.domain.core.valueobjects.DeviceLifecycleStatus;\n+import org.opensmartgridplatform.domain.core.valueobjects.EventNotificationType;\n+import org.opensmartgridplatform.dto.valueobjects.EventNotificationMessageDataContainerDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+@ExtendWith(MockitoExtension.class)\n+public class DeviceManagementServiceTest {\n+\n+    private static final String TEST_ORGANISATION = \"testOrganisation\";\n+    private static final String TEST_DEVICE = \"testDevice\";\n+    private static final String TEST_IP = \"testIp\";\n+    private static final String TEST_UID = \"testUid\";\n+    private static final String TEST_MESSAGE_TYPE = \"testMessageType\";\n+\n+    @Mock\n+    private TransactionalDeviceService transactionalDeviceService;\n+\n+    @Mock\n+    private DeviceDomainService deviceDomainService;\n+\n+    @Mock\n+    private DomainCoreMapper domainCoreMapper;\n+\n+    @Mock\n+    private OsgpCoreRequestMessageSender osgpCoreRequestManager;\n+\n+    @Mock\n+    private WebServiceResponseMessageSender webServiceResponseMessageSender;\n+\n+    @Mock\n+    private OrganisationDomainService organisationDomainService;\n+\n+    @InjectMocks\n+    private DeviceManagementService deviceManagementService;\n+\n+    @Captor\n+    private ArgumentCaptor<RequestMessage> argumentRequestMessage;\n+\n+    @Captor\n+    private ArgumentCaptor<ResponseMessage> argumentResponseMessage;\n+\n+    @Captor\n+    private ArgumentCaptor<String> argumentMessageType;\n+\n+    @Captor\n+    private ArgumentCaptor<String> argumentIpAddress;\n+\n+    @Captor\n+    private ArgumentCaptor<String> argumentDeviceIdentification;\n+\n+    @Captor\n+    private ArgumentCaptor<Integer> argumentPriority;\n+\n+    @BeforeEach\n+    public void init() throws UnknownEntityException {\n+        when(this.organisationDomainService.searchOrganisation(any())).thenReturn(new Organisation());\n+    }\n+\n+    @Test\n+    public void testSetEventNotifications() throws FunctionalException {\n+        final List<EventNotificationType> eventNotifications = Arrays.asList(EventNotificationType.COMM_EVENTS,\n+                EventNotificationType.DIAG_EVENTS);\n+        final Device device = mock(Device.class);\n+        when(device.getIpAddress()).thenReturn(TEST_IP);\n+        when(this.deviceDomainService.searchActiveDevice(TEST_DEVICE, ComponentType.DOMAIN_CORE)).thenReturn(device);\n+\n+        this.deviceManagementService.setEventNotifications(TEST_ORGANISATION, TEST_DEVICE, TEST_UID,\n+                eventNotifications, TEST_MESSAGE_TYPE, 1);\n+\n+        verify(this.osgpCoreRequestManager).send(this.argumentRequestMessage.capture(),\n+                this.argumentMessageType.capture(), this.argumentPriority.capture(), this.argumentIpAddress.capture());\n+\n+        final RequestMessage expectedRequestMessage = this.createNewRequestMessage(\n+                new EventNotificationMessageDataContainerDto(this.domainCoreMapper.mapAsList(eventNotifications,\n+                        org.opensmartgridplatform.dto.valueobjects.EventNotificationTypeDto.class)));\n+\n+        assertThat(this.argumentRequestMessage.getValue()).usingRecursiveComparison().isEqualTo(expectedRequestMessage);\n+        assertThat(this.argumentMessageType.getValue()).isEqualTo(TEST_MESSAGE_TYPE);\n+        assertThat(this.argumentPriority.getValue()).isEqualTo(1);\n+        assertThat(this.argumentIpAddress.getValue()).isEqualTo(TEST_IP);\n+    }\n+\n+    @Test\n+    public void testUpdateDeviceSslCertificationIsNull() throws FunctionalException {\n+        this.deviceManagementService.updateDeviceSslCertification(TEST_ORGANISATION, TEST_DEVICE, TEST_UID, null,\n+                TEST_MESSAGE_TYPE, 1);\n+\n+        //This method is not called since it comes after the check of the certificate\n+        verifyNoInteractions(this.domainCoreMapper);\n+    }\n+\n+    @Test\n+    public void testUpdateDeviceSslCertification() throws FunctionalException {\n+        final Device device = mock(Device.class);\n+        when(device.getIpAddress()).thenReturn(TEST_IP);\n+        when(this.deviceDomainService.searchActiveDevice(TEST_DEVICE, ComponentType.DOMAIN_CORE)).thenReturn(device);\n+        final Certification certification = new Certification(\"testUrl\", \"testDomain\");\n+\n+        this.deviceManagementService.updateDeviceSslCertification(TEST_ORGANISATION, TEST_DEVICE, TEST_UID,\n+                certification, TEST_MESSAGE_TYPE, 1);\n+\n+        verify(this.osgpCoreRequestManager).send(this.argumentRequestMessage.capture(),\n+                this.argumentMessageType.capture(), this.argumentPriority.capture(), this.argumentIpAddress.capture());\n+\n+        final RequestMessage expectedRequestMessage = this.createNewRequestMessage(this.domainCoreMapper.map(certification,\n+                org.opensmartgridplatform.dto.valueobjects.CertificationDto.class));\n+\n+        assertThat(this.argumentRequestMessage.getValue()).usingRecursiveComparison().isEqualTo(expectedRequestMessage);\n+        assertThat(this.argumentMessageType.getValue()).isEqualTo(TEST_MESSAGE_TYPE);\n+        assertThat(this.argumentPriority.getValue()).isEqualTo(1);\n+        assertThat(this.argumentIpAddress.getValue()).isEqualTo(TEST_IP);\n+    }\n+\n+    @Test\n+    public void testSetDeviceVerificationKeyIsNull() throws FunctionalException {\n+        this.deviceManagementService.setDeviceVerificationKey(TEST_ORGANISATION, TEST_DEVICE, TEST_UID, null,\n+                TEST_MESSAGE_TYPE, 1);", "originalCommit": "f55fc92905535fe980310db71a46bfe40f21259a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY3NjI5Mw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/435#discussion_r510676293", "bodyText": "use TEST_PRIORITY here", "author": "robindenadel", "createdAt": "2020-10-23T07:03:59Z", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/DeviceManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.CdmaSettings;\n+import org.opensmartgridplatform.domain.core.valueobjects.Certification;\n+import org.opensmartgridplatform.domain.core.valueobjects.DeviceLifecycleStatus;\n+import org.opensmartgridplatform.domain.core.valueobjects.EventNotificationType;\n+import org.opensmartgridplatform.dto.valueobjects.EventNotificationMessageDataContainerDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+@ExtendWith(MockitoExtension.class)\n+public class DeviceManagementServiceTest {\n+\n+    private static final String TEST_ORGANISATION = \"testOrganisation\";\n+    private static final String TEST_DEVICE = \"testDevice\";\n+    private static final String TEST_IP = \"testIp\";\n+    private static final String TEST_UID = \"testUid\";\n+    private static final String TEST_MESSAGE_TYPE = \"testMessageType\";\n+\n+    @Mock\n+    private TransactionalDeviceService transactionalDeviceService;\n+\n+    @Mock\n+    private DeviceDomainService deviceDomainService;\n+\n+    @Mock\n+    private DomainCoreMapper domainCoreMapper;\n+\n+    @Mock\n+    private OsgpCoreRequestMessageSender osgpCoreRequestManager;\n+\n+    @Mock\n+    private WebServiceResponseMessageSender webServiceResponseMessageSender;\n+\n+    @Mock\n+    private OrganisationDomainService organisationDomainService;\n+\n+    @InjectMocks\n+    private DeviceManagementService deviceManagementService;\n+\n+    @Captor\n+    private ArgumentCaptor<RequestMessage> argumentRequestMessage;\n+\n+    @Captor\n+    private ArgumentCaptor<ResponseMessage> argumentResponseMessage;\n+\n+    @Captor\n+    private ArgumentCaptor<String> argumentMessageType;\n+\n+    @Captor\n+    private ArgumentCaptor<String> argumentIpAddress;\n+\n+    @Captor\n+    private ArgumentCaptor<String> argumentDeviceIdentification;\n+\n+    @Captor\n+    private ArgumentCaptor<Integer> argumentPriority;\n+\n+    @BeforeEach\n+    public void init() throws UnknownEntityException {\n+        when(this.organisationDomainService.searchOrganisation(any())).thenReturn(new Organisation());\n+    }\n+\n+    @Test\n+    public void testSetEventNotifications() throws FunctionalException {\n+        final List<EventNotificationType> eventNotifications = Arrays.asList(EventNotificationType.COMM_EVENTS,\n+                EventNotificationType.DIAG_EVENTS);\n+        final Device device = mock(Device.class);\n+        when(device.getIpAddress()).thenReturn(TEST_IP);\n+        when(this.deviceDomainService.searchActiveDevice(TEST_DEVICE, ComponentType.DOMAIN_CORE)).thenReturn(device);\n+\n+        this.deviceManagementService.setEventNotifications(TEST_ORGANISATION, TEST_DEVICE, TEST_UID,\n+                eventNotifications, TEST_MESSAGE_TYPE, 1);\n+\n+        verify(this.osgpCoreRequestManager).send(this.argumentRequestMessage.capture(),\n+                this.argumentMessageType.capture(), this.argumentPriority.capture(), this.argumentIpAddress.capture());\n+\n+        final RequestMessage expectedRequestMessage = this.createNewRequestMessage(\n+                new EventNotificationMessageDataContainerDto(this.domainCoreMapper.mapAsList(eventNotifications,\n+                        org.opensmartgridplatform.dto.valueobjects.EventNotificationTypeDto.class)));\n+\n+        assertThat(this.argumentRequestMessage.getValue()).usingRecursiveComparison().isEqualTo(expectedRequestMessage);\n+        assertThat(this.argumentMessageType.getValue()).isEqualTo(TEST_MESSAGE_TYPE);\n+        assertThat(this.argumentPriority.getValue()).isEqualTo(1);\n+        assertThat(this.argumentIpAddress.getValue()).isEqualTo(TEST_IP);\n+    }\n+\n+    @Test\n+    public void testUpdateDeviceSslCertificationIsNull() throws FunctionalException {\n+        this.deviceManagementService.updateDeviceSslCertification(TEST_ORGANISATION, TEST_DEVICE, TEST_UID, null,\n+                TEST_MESSAGE_TYPE, 1);\n+\n+        //This method is not called since it comes after the check of the certificate\n+        verifyNoInteractions(this.domainCoreMapper);\n+    }\n+\n+    @Test\n+    public void testUpdateDeviceSslCertification() throws FunctionalException {\n+        final Device device = mock(Device.class);\n+        when(device.getIpAddress()).thenReturn(TEST_IP);\n+        when(this.deviceDomainService.searchActiveDevice(TEST_DEVICE, ComponentType.DOMAIN_CORE)).thenReturn(device);\n+        final Certification certification = new Certification(\"testUrl\", \"testDomain\");\n+\n+        this.deviceManagementService.updateDeviceSslCertification(TEST_ORGANISATION, TEST_DEVICE, TEST_UID,\n+                certification, TEST_MESSAGE_TYPE, 1);\n+\n+        verify(this.osgpCoreRequestManager).send(this.argumentRequestMessage.capture(),\n+                this.argumentMessageType.capture(), this.argumentPriority.capture(), this.argumentIpAddress.capture());\n+\n+        final RequestMessage expectedRequestMessage = this.createNewRequestMessage(this.domainCoreMapper.map(certification,\n+                org.opensmartgridplatform.dto.valueobjects.CertificationDto.class));\n+\n+        assertThat(this.argumentRequestMessage.getValue()).usingRecursiveComparison().isEqualTo(expectedRequestMessage);\n+        assertThat(this.argumentMessageType.getValue()).isEqualTo(TEST_MESSAGE_TYPE);\n+        assertThat(this.argumentPriority.getValue()).isEqualTo(1);\n+        assertThat(this.argumentIpAddress.getValue()).isEqualTo(TEST_IP);\n+    }\n+\n+    @Test\n+    public void testSetDeviceVerificationKeyIsNull() throws FunctionalException {\n+        this.deviceManagementService.setDeviceVerificationKey(TEST_ORGANISATION, TEST_DEVICE, TEST_UID, null,\n+                TEST_MESSAGE_TYPE, 1);\n+\n+        //This method is not called since it comes after the check of the verification\n+        verifyNoInteractions(this.osgpCoreRequestManager);\n+    }\n+\n+    @Test\n+    public void testSetDeviceVerificationKey() throws FunctionalException {\n+        final Device device = mock(Device.class);\n+        when(device.getIpAddress()).thenReturn(TEST_IP);\n+        when(this.deviceDomainService.searchActiveDevice(TEST_DEVICE, ComponentType.DOMAIN_CORE)).thenReturn(device);\n+        this.deviceManagementService.setDeviceVerificationKey(TEST_ORGANISATION, TEST_DEVICE, TEST_UID, \"testKey\",\n+                TEST_MESSAGE_TYPE, 1);", "originalCommit": "f55fc92905535fe980310db71a46bfe40f21259a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY3NjM2Nw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/435#discussion_r510676367", "bodyText": "use TEST_PRIORITY here", "author": "robindenadel", "createdAt": "2020-10-23T07:04:08Z", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/DeviceManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.CdmaSettings;\n+import org.opensmartgridplatform.domain.core.valueobjects.Certification;\n+import org.opensmartgridplatform.domain.core.valueobjects.DeviceLifecycleStatus;\n+import org.opensmartgridplatform.domain.core.valueobjects.EventNotificationType;\n+import org.opensmartgridplatform.dto.valueobjects.EventNotificationMessageDataContainerDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+@ExtendWith(MockitoExtension.class)\n+public class DeviceManagementServiceTest {\n+\n+    private static final String TEST_ORGANISATION = \"testOrganisation\";\n+    private static final String TEST_DEVICE = \"testDevice\";\n+    private static final String TEST_IP = \"testIp\";\n+    private static final String TEST_UID = \"testUid\";\n+    private static final String TEST_MESSAGE_TYPE = \"testMessageType\";\n+\n+    @Mock\n+    private TransactionalDeviceService transactionalDeviceService;\n+\n+    @Mock\n+    private DeviceDomainService deviceDomainService;\n+\n+    @Mock\n+    private DomainCoreMapper domainCoreMapper;\n+\n+    @Mock\n+    private OsgpCoreRequestMessageSender osgpCoreRequestManager;\n+\n+    @Mock\n+    private WebServiceResponseMessageSender webServiceResponseMessageSender;\n+\n+    @Mock\n+    private OrganisationDomainService organisationDomainService;\n+\n+    @InjectMocks\n+    private DeviceManagementService deviceManagementService;\n+\n+    @Captor\n+    private ArgumentCaptor<RequestMessage> argumentRequestMessage;\n+\n+    @Captor\n+    private ArgumentCaptor<ResponseMessage> argumentResponseMessage;\n+\n+    @Captor\n+    private ArgumentCaptor<String> argumentMessageType;\n+\n+    @Captor\n+    private ArgumentCaptor<String> argumentIpAddress;\n+\n+    @Captor\n+    private ArgumentCaptor<String> argumentDeviceIdentification;\n+\n+    @Captor\n+    private ArgumentCaptor<Integer> argumentPriority;\n+\n+    @BeforeEach\n+    public void init() throws UnknownEntityException {\n+        when(this.organisationDomainService.searchOrganisation(any())).thenReturn(new Organisation());\n+    }\n+\n+    @Test\n+    public void testSetEventNotifications() throws FunctionalException {\n+        final List<EventNotificationType> eventNotifications = Arrays.asList(EventNotificationType.COMM_EVENTS,\n+                EventNotificationType.DIAG_EVENTS);\n+        final Device device = mock(Device.class);\n+        when(device.getIpAddress()).thenReturn(TEST_IP);\n+        when(this.deviceDomainService.searchActiveDevice(TEST_DEVICE, ComponentType.DOMAIN_CORE)).thenReturn(device);\n+\n+        this.deviceManagementService.setEventNotifications(TEST_ORGANISATION, TEST_DEVICE, TEST_UID,\n+                eventNotifications, TEST_MESSAGE_TYPE, 1);\n+\n+        verify(this.osgpCoreRequestManager).send(this.argumentRequestMessage.capture(),\n+                this.argumentMessageType.capture(), this.argumentPriority.capture(), this.argumentIpAddress.capture());\n+\n+        final RequestMessage expectedRequestMessage = this.createNewRequestMessage(\n+                new EventNotificationMessageDataContainerDto(this.domainCoreMapper.mapAsList(eventNotifications,\n+                        org.opensmartgridplatform.dto.valueobjects.EventNotificationTypeDto.class)));\n+\n+        assertThat(this.argumentRequestMessage.getValue()).usingRecursiveComparison().isEqualTo(expectedRequestMessage);\n+        assertThat(this.argumentMessageType.getValue()).isEqualTo(TEST_MESSAGE_TYPE);\n+        assertThat(this.argumentPriority.getValue()).isEqualTo(1);\n+        assertThat(this.argumentIpAddress.getValue()).isEqualTo(TEST_IP);\n+    }\n+\n+    @Test\n+    public void testUpdateDeviceSslCertificationIsNull() throws FunctionalException {\n+        this.deviceManagementService.updateDeviceSslCertification(TEST_ORGANISATION, TEST_DEVICE, TEST_UID, null,\n+                TEST_MESSAGE_TYPE, 1);\n+\n+        //This method is not called since it comes after the check of the certificate\n+        verifyNoInteractions(this.domainCoreMapper);\n+    }\n+\n+    @Test\n+    public void testUpdateDeviceSslCertification() throws FunctionalException {\n+        final Device device = mock(Device.class);\n+        when(device.getIpAddress()).thenReturn(TEST_IP);\n+        when(this.deviceDomainService.searchActiveDevice(TEST_DEVICE, ComponentType.DOMAIN_CORE)).thenReturn(device);\n+        final Certification certification = new Certification(\"testUrl\", \"testDomain\");\n+\n+        this.deviceManagementService.updateDeviceSslCertification(TEST_ORGANISATION, TEST_DEVICE, TEST_UID,\n+                certification, TEST_MESSAGE_TYPE, 1);\n+\n+        verify(this.osgpCoreRequestManager).send(this.argumentRequestMessage.capture(),\n+                this.argumentMessageType.capture(), this.argumentPriority.capture(), this.argumentIpAddress.capture());\n+\n+        final RequestMessage expectedRequestMessage = this.createNewRequestMessage(this.domainCoreMapper.map(certification,\n+                org.opensmartgridplatform.dto.valueobjects.CertificationDto.class));\n+\n+        assertThat(this.argumentRequestMessage.getValue()).usingRecursiveComparison().isEqualTo(expectedRequestMessage);\n+        assertThat(this.argumentMessageType.getValue()).isEqualTo(TEST_MESSAGE_TYPE);\n+        assertThat(this.argumentPriority.getValue()).isEqualTo(1);\n+        assertThat(this.argumentIpAddress.getValue()).isEqualTo(TEST_IP);\n+    }\n+\n+    @Test\n+    public void testSetDeviceVerificationKeyIsNull() throws FunctionalException {\n+        this.deviceManagementService.setDeviceVerificationKey(TEST_ORGANISATION, TEST_DEVICE, TEST_UID, null,\n+                TEST_MESSAGE_TYPE, 1);\n+\n+        //This method is not called since it comes after the check of the verification\n+        verifyNoInteractions(this.osgpCoreRequestManager);\n+    }\n+\n+    @Test\n+    public void testSetDeviceVerificationKey() throws FunctionalException {\n+        final Device device = mock(Device.class);\n+        when(device.getIpAddress()).thenReturn(TEST_IP);\n+        when(this.deviceDomainService.searchActiveDevice(TEST_DEVICE, ComponentType.DOMAIN_CORE)).thenReturn(device);\n+        this.deviceManagementService.setDeviceVerificationKey(TEST_ORGANISATION, TEST_DEVICE, TEST_UID, \"testKey\",\n+                TEST_MESSAGE_TYPE, 1);\n+\n+        verify(this.osgpCoreRequestManager).send(this.argumentRequestMessage.capture(),\n+                this.argumentMessageType.capture(), this.argumentPriority.capture(), this.argumentIpAddress.capture());\n+\n+        final RequestMessage expectedRequestMessage = this.createNewRequestMessage(\"testKey\");\n+\n+        assertThat(this.argumentRequestMessage.getValue()).usingRecursiveComparison().isEqualTo(expectedRequestMessage);\n+        assertThat(this.argumentMessageType.getValue()).isEqualTo(TEST_MESSAGE_TYPE);\n+        assertThat(this.argumentPriority.getValue()).isEqualTo(1);", "originalCommit": "f55fc92905535fe980310db71a46bfe40f21259a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY3NzAxMw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/435#discussion_r510677013", "bodyText": "import CertificationDto so you don't need to give the package name here", "author": "robindenadel", "createdAt": "2020-10-23T07:05:28Z", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/DeviceManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.CdmaSettings;\n+import org.opensmartgridplatform.domain.core.valueobjects.Certification;\n+import org.opensmartgridplatform.domain.core.valueobjects.DeviceLifecycleStatus;\n+import org.opensmartgridplatform.domain.core.valueobjects.EventNotificationType;\n+import org.opensmartgridplatform.dto.valueobjects.EventNotificationMessageDataContainerDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+@ExtendWith(MockitoExtension.class)\n+public class DeviceManagementServiceTest {\n+\n+    private static final String TEST_ORGANISATION = \"testOrganisation\";\n+    private static final String TEST_DEVICE = \"testDevice\";\n+    private static final String TEST_IP = \"testIp\";\n+    private static final String TEST_UID = \"testUid\";\n+    private static final String TEST_MESSAGE_TYPE = \"testMessageType\";\n+\n+    @Mock\n+    private TransactionalDeviceService transactionalDeviceService;\n+\n+    @Mock\n+    private DeviceDomainService deviceDomainService;\n+\n+    @Mock\n+    private DomainCoreMapper domainCoreMapper;\n+\n+    @Mock\n+    private OsgpCoreRequestMessageSender osgpCoreRequestManager;\n+\n+    @Mock\n+    private WebServiceResponseMessageSender webServiceResponseMessageSender;\n+\n+    @Mock\n+    private OrganisationDomainService organisationDomainService;\n+\n+    @InjectMocks\n+    private DeviceManagementService deviceManagementService;\n+\n+    @Captor\n+    private ArgumentCaptor<RequestMessage> argumentRequestMessage;\n+\n+    @Captor\n+    private ArgumentCaptor<ResponseMessage> argumentResponseMessage;\n+\n+    @Captor\n+    private ArgumentCaptor<String> argumentMessageType;\n+\n+    @Captor\n+    private ArgumentCaptor<String> argumentIpAddress;\n+\n+    @Captor\n+    private ArgumentCaptor<String> argumentDeviceIdentification;\n+\n+    @Captor\n+    private ArgumentCaptor<Integer> argumentPriority;\n+\n+    @BeforeEach\n+    public void init() throws UnknownEntityException {\n+        when(this.organisationDomainService.searchOrganisation(any())).thenReturn(new Organisation());\n+    }\n+\n+    @Test\n+    public void testSetEventNotifications() throws FunctionalException {\n+        final List<EventNotificationType> eventNotifications = Arrays.asList(EventNotificationType.COMM_EVENTS,\n+                EventNotificationType.DIAG_EVENTS);\n+        final Device device = mock(Device.class);\n+        when(device.getIpAddress()).thenReturn(TEST_IP);\n+        when(this.deviceDomainService.searchActiveDevice(TEST_DEVICE, ComponentType.DOMAIN_CORE)).thenReturn(device);\n+\n+        this.deviceManagementService.setEventNotifications(TEST_ORGANISATION, TEST_DEVICE, TEST_UID,\n+                eventNotifications, TEST_MESSAGE_TYPE, 1);\n+\n+        verify(this.osgpCoreRequestManager).send(this.argumentRequestMessage.capture(),\n+                this.argumentMessageType.capture(), this.argumentPriority.capture(), this.argumentIpAddress.capture());\n+\n+        final RequestMessage expectedRequestMessage = this.createNewRequestMessage(\n+                new EventNotificationMessageDataContainerDto(this.domainCoreMapper.mapAsList(eventNotifications,\n+                        org.opensmartgridplatform.dto.valueobjects.EventNotificationTypeDto.class)));\n+\n+        assertThat(this.argumentRequestMessage.getValue()).usingRecursiveComparison().isEqualTo(expectedRequestMessage);\n+        assertThat(this.argumentMessageType.getValue()).isEqualTo(TEST_MESSAGE_TYPE);\n+        assertThat(this.argumentPriority.getValue()).isEqualTo(1);\n+        assertThat(this.argumentIpAddress.getValue()).isEqualTo(TEST_IP);\n+    }\n+\n+    @Test\n+    public void testUpdateDeviceSslCertificationIsNull() throws FunctionalException {\n+        this.deviceManagementService.updateDeviceSslCertification(TEST_ORGANISATION, TEST_DEVICE, TEST_UID, null,\n+                TEST_MESSAGE_TYPE, 1);\n+\n+        //This method is not called since it comes after the check of the certificate\n+        verifyNoInteractions(this.domainCoreMapper);\n+    }\n+\n+    @Test\n+    public void testUpdateDeviceSslCertification() throws FunctionalException {\n+        final Device device = mock(Device.class);\n+        when(device.getIpAddress()).thenReturn(TEST_IP);\n+        when(this.deviceDomainService.searchActiveDevice(TEST_DEVICE, ComponentType.DOMAIN_CORE)).thenReturn(device);\n+        final Certification certification = new Certification(\"testUrl\", \"testDomain\");\n+\n+        this.deviceManagementService.updateDeviceSslCertification(TEST_ORGANISATION, TEST_DEVICE, TEST_UID,\n+                certification, TEST_MESSAGE_TYPE, 1);\n+\n+        verify(this.osgpCoreRequestManager).send(this.argumentRequestMessage.capture(),\n+                this.argumentMessageType.capture(), this.argumentPriority.capture(), this.argumentIpAddress.capture());\n+\n+        final RequestMessage expectedRequestMessage = this.createNewRequestMessage(this.domainCoreMapper.map(certification,\n+                org.opensmartgridplatform.dto.valueobjects.CertificationDto.class));", "originalCommit": "f55fc92905535fe980310db71a46bfe40f21259a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8fe7091a2d72025c19bcc7960b649aac7f7323ef", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/8fe7091a2d72025c19bcc7960b649aac7f7323ef", "message": "- Moving License Header to top\n- Adding imports\n- Adding a new constant to replace 1 as test priority", "committedDate": "2020-10-27T15:22:27Z", "type": "commit"}, {"oid": "e72c5fabbad2661d3125c03323447275ee8ae3a9", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/e72c5fabbad2661d3125c03323447275ee8ae3a9", "message": "- Formatting code using Eclipse config", "committedDate": "2020-11-17T14:25:54Z", "type": "commit"}]}