{"pr_number": 1071, "pr_title": "Add support for PostgreSQL", "pr_createdAt": "2020-09-18T08:08:04Z", "pr_url": "https://github.com/ibissource/iaf/pull/1071", "timeline": [{"oid": "0478db3aa46b1f67215c177596de19f32da03588", "url": "https://github.com/ibissource/iaf/commit/0478db3aa46b1f67215c177596de19f32da03588", "message": "Add support for PostgreSQL", "committedDate": "2020-09-18T08:06:55Z", "type": "commit"}, {"oid": "6f2f39045283c66ad289c623464de65583119a04", "url": "https://github.com/ibissource/iaf/commit/6f2f39045283c66ad289c623464de65583119a04", "message": "Added pom", "committedDate": "2020-09-18T08:33:33Z", "type": "commit"}, {"oid": "8e9777c5bf32aecc1c6205778817a16b9477b3a2", "url": "https://github.com/ibissource/iaf/commit/8e9777c5bf32aecc1c6205778817a16b9477b3a2", "message": "Fix Codacy issues", "committedDate": "2020-09-18T09:21:45Z", "type": "commit"}, {"oid": "7bac5ec2eed3037152e287d47c88bfbc950dbdcf", "url": "https://github.com/ibissource/iaf/commit/7bac5ec2eed3037152e287d47c88bfbc950dbdcf", "message": "Simplify interfaces", "committedDate": "2020-09-21T07:14:53Z", "type": "commit"}, {"oid": "76d5c40fce7b77b91284bc25d234c77a39566fa7", "url": "https://github.com/ibissource/iaf/commit/76d5c40fce7b77b91284bc25d234c77a39566fa7", "message": "Add XA support for MariaDB by using MySQL driver", "committedDate": "2020-09-21T08:24:21Z", "type": "commit"}, {"oid": "8ba86816b6151b6eb14af0a610e3e18128b09153", "url": "https://github.com/ibissource/iaf/commit/8ba86816b6151b6eb14af0a610e3e18128b09153", "message": "Add test for JdbcTableListener", "committedDate": "2020-09-21T10:30:19Z", "type": "commit"}, {"oid": "bc7e26689ffccd7b89c9473df20391a9680530ce", "url": "https://github.com/ibissource/iaf/commit/bc7e26689ffccd7b89c9473df20391a9680530ce", "message": "Make JdbcTestBase abstract, add JdbcTableListenerTest", "committedDate": "2020-09-21T12:06:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk5MTM3MQ==", "url": "https://github.com/ibissource/iaf/pull/1071#discussion_r491991371", "bodyText": "Als je overal var++ na de statement doet moet je het hier ook doen", "author": "nielsm5", "createdAt": "2020-09-21T12:05:53Z", "path": "core/src/main/java/nl/nn/adapterframework/jdbc/XmlQuerySender.java", "diffHunk": "@@ -579,14 +586,13 @@ private void applyParameters(PreparedStatement statement, Vector<Column> columns\n \t\t\t\t\tstatement.setTimestamp(var, (Timestamp) column.getParameter());\n \t\t\t\t\tvar++;\n \t\t\t\t} else if (column.getParameter() instanceof byte[]) {\n-\t\t\t\t\tlog.debug(\"parm [\" + var + \"] is a byte array with value [\" + column.getParameter().toString() + \"]\");\n+\t\t\t\t\tlog.debug(\"parm [\" + var + \"] is a byte array with value [\" + column.getParameter().toString() + \"] = [\" + new String((byte[]) column.getParameter()) + \"]\");\n \t\t\t\t\tstatement.setBytes(var, (byte[]) column.getParameter());\n \t\t\t\t\tvar++;\n \t\t\t\t} else {\n \t\t\t\t\t//if (column.getParameter() instanceof String) \n \t\t\t\t\tlog.debug(\"parm [\" + var + \"] is a String with value [\" + column.getParameter().toString() + \"]\");\n-\t\t\t\t\tstatement.setString(var, (String) column.getParameter());\n-\t\t\t\t\tvar++;\n+\t\t\t\t\tJdbcUtil.setParameter(statement, var++, (String) column.getParameter(), getDbmsSupport().isParameterTypeMatchRequired());", "originalCommit": "8ba86816b6151b6eb14af0a610e3e18128b09153", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk5MjIwNA==", "url": "https://github.com/ibissource/iaf/pull/1071#discussion_r491992204", "bodyText": "Kan dit niet mooier? we krijgen nu 6+ if statements... waarom dit zit niet in de enum?", "author": "nielsm5", "createdAt": "2020-09-21T12:07:32Z", "path": "core/src/main/java/nl/nn/adapterframework/jdbc/dbms/DbmsSupportFactory.java", "diffHunk": "@@ -77,13 +85,21 @@ public IDbmsSupport getDbmsSupport(Connection conn) {\n \t\t\t\treturn new MsSqlServerDbmsSupport();\n \t\t\t}\n \t\t\tif (Dbms.MYSQL.getProductName().equals(product)) {\n+\t\t\t\tif (productVersion.contains(\"MariaDB\")) {\n+\t\t\t\t\tlog.debug(\"Setting databasetype to MARIADB (using MySQL driver)\");\n+\t\t\t\t\treturn new MariaDbDbmsSupport();\n+\t\t\t\t}\n \t\t\t\tlog.debug(\"Setting databasetype to MYSQL\");\n \t\t\t\treturn new MySqlDbmsSupport();\n \t\t\t}\n \t\t\tif (Dbms.MARIADB.getProductName().equals(product)) {\n-\t\t\t\tlog.debug(\"Setting databasetype to MARIADB\");\n+\t\t\t\tlog.debug(\"Setting databasetype to MARIADB (using MariaDB driver)\");\n \t\t\t\treturn new MariaDbDbmsSupport();\n \t\t\t}\n+\t\t\tif (Dbms.POSTGRESQL.getProductName().equals(product)) {\n+\t\t\t\tlog.debug(\"Setting databasetype to POSTGRESQL\");\n+\t\t\t\treturn new PostgresqlDbmsSupport();\n+\t\t\t}", "originalCommit": "8ba86816b6151b6eb14af0a610e3e18128b09153", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk5NDEwOA==", "url": "https://github.com/ibissource/iaf/pull/1071#discussion_r491994108", "bodyText": "Deze moeten toch altijd gelijk zijn aan elkaar?", "author": "nielsm5", "createdAt": "2020-09-21T12:10:58Z", "path": "core/src/main/java/nl/nn/adapterframework/util/StreamUtil.java", "diffHunk": "@@ -39,7 +41,8 @@\n  */\n public class StreamUtil {\n \tpublic static final String DEFAULT_INPUT_STREAM_ENCODING=\"UTF-8\";\n-\n+\tpublic static final Charset DEFAULT_CHARSET = Charsets.UTF_8;", "originalCommit": "8ba86816b6151b6eb14af0a610e3e18128b09153", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA1MDI0MQ==", "url": "https://github.com/ibissource/iaf/pull/1071#discussion_r492050241", "bodyText": "Maar een Charset is een Charset, en een String een String. Op de String kan je nog steeds een UnsupportedEncodingException krijgen, die je dan telkens moet afvangen", "author": "gvanbrakel", "createdAt": "2020-09-21T13:36:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk5NDEwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAxMDYxNA==", "url": "https://github.com/ibissource/iaf/pull/1071#discussion_r492010614", "bodyText": "CalendarParserException ?", "author": "nielsm5", "createdAt": "2020-09-21T12:39:04Z", "path": "core/src/main/java/nl/nn/adapterframework/util/JdbcUtil.java", "diffHunk": "@@ -1276,7 +1188,48 @@ public static void applyParameter(PreparedStatement statement, ParameterValue pv\n \t\t} else if (\"bytes\".equals(paramType)) {\n \t\t\tstatement.setBytes(parameterIndex, (byte[]) value);\n \t\t} else {\n+\t\t\tsetParameter(statement, parameterIndex, (String)value, parameterTypeMatchRequired);\n+\t\t}\n+\t}\n+\n+\tpublic static void setParameter(PreparedStatement statement, int parameterIndex, String value, boolean parameterTypeMatchRequired) throws SQLException {\n+\t\tif (!parameterTypeMatchRequired) {\n \t\t\tstatement.setString(parameterIndex, (String) value);\n+\t\t\treturn;\n+\t\t}\n+\t\tint sqlTYpe=statement.getParameterMetaData().getParameterType(parameterIndex);\n+\t\ttry {\n+\t\t\tswitch(sqlTYpe) {\n+\t\t\tcase Types.INTEGER:\n+\t\t\t\tstatement.setInt(parameterIndex, Integer.parseInt((String)value));\n+\t\t\t\tbreak;\n+\t\t\tcase Types.NUMERIC:\n+\t\t\tcase Types.DOUBLE:\n+\t\t\t\tstatement.setDouble(parameterIndex, Double.parseDouble((String)value));\n+\t\t\t\tbreak;\n+\t\t\tcase Types.BIGINT:\n+\t\t\t\tstatement.setLong(parameterIndex, Long.parseLong((String)value));\n+\t\t\t\tbreak;\n+\t\t\tcase Types.BLOB:\n+\t\t\t\tstatement.setBytes(parameterIndex, ((String)value).getBytes(Charsets.UTF_8));\n+\t\t\t\tbreak;\n+\t\t\tcase Types.DATE:\n+\t\t\t\tstatement.setDate(parameterIndex, new java.sql.Date(DateUtils.parseAnyDate((String) value).getTime()));\n+\t\t\t\tbreak;\n+\t\t\tcase Types.TIMESTAMP:\n+\t\t\t\tstatement.setTimestamp(parameterIndex, new Timestamp(DateUtils.parseAnyDate((String) value).getTime()));\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tlog.warn(\"parameter type [\"+JDBCType.valueOf(sqlTYpe).getName()+\"] handled as String\");\n+\t\t\t\t//$FALL-THROUGH$\n+\t\t\tcase Types.CHAR:\n+\t\t\tcase Types.VARCHAR:\n+\t\t\t\tstatement.setString(parameterIndex, (String) value);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t} catch (CalendarParserException e) {", "originalCommit": "8ba86816b6151b6eb14af0a610e3e18128b09153", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e9a8fb2f46980676e534c9a4813e5481213854c4", "url": "https://github.com/ibissource/iaf/commit/e9a8fb2f46980676e534c9a4813e5481213854c4", "message": "Fix issues", "committedDate": "2020-09-21T14:54:42Z", "type": "commit"}, {"oid": "e61d4f9b7f1128fb55f1c62bceab3edaa2979c99", "url": "https://github.com/ibissource/iaf/commit/e61d4f9b7f1128fb55f1c62bceab3edaa2979c99", "message": "set PostgreSQL to test scope in pom", "committedDate": "2020-09-21T14:55:44Z", "type": "commit"}]}