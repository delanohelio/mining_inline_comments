{"pr_number": 1163, "pr_title": "Implement MTOM request and response wrappers", "pr_createdAt": "2020-10-19T15:31:17Z", "pr_url": "https://github.com/ibissource/iaf/pull/1163", "timeline": [{"oid": "5a9751933a1aa683cf54eb080d150fba4b4b9d13", "url": "https://github.com/ibissource/iaf/commit/5a9751933a1aa683cf54eb080d150fba4b4b9d13", "message": "initial commit", "committedDate": "2020-09-21T15:30:31Z", "type": "commit"}, {"oid": "64f9c893628b6c134f01b2aecd3ac78f6b994e26", "url": "https://github.com/ibissource/iaf/commit/64f9c893628b6c134f01b2aecd3ac78f6b994e26", "message": "Merge branch 'master' into cmisProxyRefactor", "committedDate": "2020-10-16T11:06:26Z", "type": "commit"}, {"oid": "ef559c12e33d5dda103f8048ececc241d2a6cf76", "url": "https://github.com/ibissource/iaf/commit/ef559c12e33d5dda103f8048ececc241d2a6cf76", "message": "Implement MTOM request and response wrappers", "committedDate": "2020-10-19T15:25:56Z", "type": "commit"}, {"oid": "50626a265aa194c25e912f0c0c79e1a00c31548c", "url": "https://github.com/ibissource/iaf/commit/50626a265aa194c25e912f0c0c79e1a00c31548c", "message": "Remove old test files", "committedDate": "2020-10-19T15:30:10Z", "type": "commit"}, {"oid": "fc6d16ebc7738ca7988cc23abc1932df193169bc", "url": "https://github.com/ibissource/iaf/commit/fc6d16ebc7738ca7988cc23abc1932df193169bc", "message": "Finalize proxy servlet", "committedDate": "2020-10-20T08:02:41Z", "type": "commit"}, {"oid": "60dd8b581538ee830cf27f93b75e80561016fe1b", "url": "https://github.com/ibissource/iaf/commit/60dd8b581538ee830cf27f93b75e80561016fe1b", "message": "Change pom profiles", "committedDate": "2020-10-20T09:20:11Z", "type": "commit"}, {"oid": "528fdb5e536c5f8315db3811133a839a8feb80f0", "url": "https://github.com/ibissource/iaf/commit/528fdb5e536c5f8315db3811133a839a8feb80f0", "message": "Forgot to add the Autowired annotation", "committedDate": "2020-10-20T11:30:24Z", "type": "commit"}, {"oid": "7b5258afbfb65b8405699c78eda22a8ed249df74", "url": "https://github.com/ibissource/iaf/commit/7b5258afbfb65b8405699c78eda22a8ed249df74", "message": "Change proxy address", "committedDate": "2020-10-20T11:47:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2MDc4OQ==", "url": "https://github.com/ibissource/iaf/pull/1163#discussion_r508460789", "bodyText": "Kan je niet in plaats van deze proxy te bouwen, het MtomFilter voor de cmisWebServiceServlet zetten?", "author": "gvanbrakel", "createdAt": "2020-10-20T12:32:42Z", "path": "cmis/src/main/java/nl/nn/adapterframework/extensions/cmis/mtom/MtomProxy.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package nl.nn.adapterframework.extensions.cmis.mtom;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.logging.log4j.Logger;\n+import org.springframework.beans.BeansException;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ApplicationContextAware;\n+import org.springframework.context.annotation.DependsOn;\n+\n+import nl.nn.adapterframework.http.HttpServletBase;\n+import nl.nn.adapterframework.lifecycle.DynamicRegistration;\n+import nl.nn.adapterframework.lifecycle.IbisInitializer;\n+import nl.nn.adapterframework.lifecycle.ServletManager;\n+import nl.nn.adapterframework.util.AppConstants;\n+import nl.nn.adapterframework.util.LogUtil;\n+\n+@IbisInitializer\n+@DependsOn({\"webServices10\", \"webServices11\"})\n+public class MtomProxy extends HttpServletBase implements InitializingBean, ApplicationContextAware {", "originalCommit": "7b5258afbfb65b8405699c78eda22a8ed249df74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEwMzM2OA==", "url": "https://github.com/ibissource/iaf/pull/1163#discussion_r509103368", "bodyText": "Ja ik vind het ook stom, hij is nu deprecated, helaas zit hij er nog wel in; legacy probleempjes..", "author": "nielsm5", "createdAt": "2020-10-21T08:50:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2MDc4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2MjE1MQ==", "url": "https://github.com/ibissource/iaf/pull/1163#discussion_r508462151", "bodyText": "Hier lees je denk ik het hele request in je geheugen in. Zou dat te vermijden zijn?", "author": "gvanbrakel", "createdAt": "2020-10-20T12:34:46Z", "path": "cmis/src/main/java/nl/nn/adapterframework/extensions/cmis/mtom/MtomRequestWrapper.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package nl.nn.adapterframework.extensions.cmis.mtom;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+\n+import javax.mail.BodyPart;\n+import javax.mail.internet.MimeMultipart;\n+import javax.servlet.ServletInputStream;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletRequestWrapper;\n+\n+import org.apache.http.HttpEntity;\n+import org.apache.http.entity.ContentType;\n+import org.apache.logging.log4j.Logger;\n+import org.springframework.mock.web.DelegatingServletInputStream;\n+\n+import nl.nn.adapterframework.http.InputStreamDataSource;\n+import nl.nn.adapterframework.http.mime.MultipartEntityBuilder;\n+import nl.nn.adapterframework.util.LogUtil;\n+\n+public class MtomRequestWrapper extends HttpServletRequestWrapper {\n+\tprotected Logger log = LogUtil.getLogger(this);\n+\n+\tprivate HttpEntity entity;\n+\tprivate static final ContentType MTOM_XOP = ContentType.parse(\"application/xop+xml; charset=UTF-8\");\n+\n+\tpublic MtomRequestWrapper(ServletRequest request) throws IOException {\n+\t\tthis((HttpServletRequest) request);\n+\t}\n+\n+\tpublic MtomRequestWrapper(HttpServletRequest request) throws IOException {\n+\t\tsuper(request);\n+\n+\t\tString contentType = super.getHeader(\"content-type\");\n+\t\tif(\"POST\".equalsIgnoreCase(request.getMethod())) {\n+\t\t\ttry {\n+\t\t\t\tif(log.isTraceEnabled()) log.trace(\"found message with ContentType [\"+contentType+\"]\");\n+\t\t\t\tboolean isMultipartRequest = contentType.contains(\"multipart\");\n+\t\t\t\tMultipartEntityBuilder multipart = MultipartEntityBuilder.create();\n+\t\t\t\tmultipart.setMtomMultipart();\n+\n+\t\t\t\tif(isMultipartRequest) { // Multiple parts we need to iterate over\n+\t\t\t\t\tInputStreamDataSource dataSource = new InputStreamDataSource(contentType, super.getInputStream());\n+\t\t\t\t\tMimeMultipart mp = new MimeMultipart(dataSource);", "originalCommit": "7b5258afbfb65b8405699c78eda22a8ed249df74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEwMzAyOQ==", "url": "https://github.com/ibissource/iaf/pull/1163#discussion_r509103029", "bodyText": "Misschien wel, misschien niet.", "author": "nielsm5", "createdAt": "2020-10-21T08:50:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2MjE1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2MzkxNg==", "url": "https://github.com/ibissource/iaf/pull/1163#discussion_r508463916", "bodyText": "Hier lees je de hele stream in een byte array in geheugen in, om hem daarna maar \u00e9\u00e9n keer als stream te lezen", "author": "gvanbrakel", "createdAt": "2020-10-20T12:37:24Z", "path": "cmis/src/main/java/nl/nn/adapterframework/extensions/cmis/mtom/MtomResponseWrapper.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package nl.nn.adapterframework.extensions.cmis.mtom;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.FilterOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.StringTokenizer;\n+\n+import javax.mail.BodyPart;\n+import javax.mail.internet.MimeMultipart;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpServletResponseWrapper;\n+\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.InputStreamEntity;\n+import org.apache.http.entity.mime.FormBodyPartBuilder;\n+import org.apache.http.entity.mime.content.InputStreamBody;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.logging.log4j.Logger;\n+import org.springframework.mock.web.DelegatingServletOutputStream;\n+\n+import nl.nn.adapterframework.http.InputStreamDataSource;\n+import nl.nn.adapterframework.http.mime.MultipartEntityBuilder;\n+import nl.nn.adapterframework.util.LogUtil;\n+\n+public class MtomResponseWrapper extends HttpServletResponseWrapper {\n+\tprotected Logger log = LogUtil.getLogger(this);\n+\n+\tprivate ContentType contentType;\n+\n+\tpublic MtomResponseWrapper(ServletResponse response) throws IOException {\n+\t\tthis((HttpServletResponse) response);\n+\t}\n+\n+\tpublic MtomResponseWrapper(HttpServletResponse response) throws IOException {\n+\t\tsuper(response);\n+\t}\n+\n+\t@Override\n+\tpublic ServletOutputStream getOutputStream() throws IOException {\n+\n+\t\tcontentType = ContentType.parse(getContentType());\n+\t\tif(log.isTraceEnabled()) log.trace(\"recieved response with ContentType [\"+contentType+\"]\");\n+\n+\t\t// Als mimeType == text/html dan geen multipart doen :)\n+\t\tif(!contentType.getMimeType().contains(\"multipart\")) {\n+\t\t\treturn super.getOutputStream();\n+\t\t} else {\n+\t\t\treturn new DelegatingServletOutputStream(new MtomOutputStream(super.getOutputStream()));\n+\t\t}\n+\t}\n+\n+\tprivate class MtomOutputStream extends FilterOutputStream {\n+\t\tprivate ByteArrayOutputStream bufferStream = new ByteArrayOutputStream();\n+\n+\t\tpublic MtomOutputStream(OutputStream out) {\n+\t\t\tsuper(out);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void write(int b) throws IOException {\n+\t\t\tbufferStream.write(b);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void write(byte[] b, int off, int len) throws IOException {\n+\t\t\tbufferStream.write(b, off, len);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic synchronized void flush() throws IOException {\n+\t\t\ttry {\n+\t\t\t\tByteArrayInputStream is = new ByteArrayInputStream(bufferStream.toByteArray());\n+\t\t\t\tInputStreamDataSource dataSource = new InputStreamDataSource(contentType.toString(), is);", "originalCommit": "7b5258afbfb65b8405699c78eda22a8ed249df74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEwMjkyNA==", "url": "https://github.com/ibissource/iaf/pull/1163#discussion_r509102924", "bodyText": "Ja klopt.", "author": "nielsm5", "createdAt": "2020-10-21T08:50:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2MzkxNg=="}], "type": "inlineReview"}, {"oid": "e82bb762fbd91477152beabf1b992da40df34b1d", "url": "https://github.com/ibissource/iaf/commit/e82bb762fbd91477152beabf1b992da40df34b1d", "message": "Add todo and deprecation warning", "committedDate": "2020-10-21T09:09:09Z", "type": "commit"}]}