{"pr_number": 600, "pr_title": "Pipe Test Classes", "pr_createdAt": "2020-04-10T13:27:35Z", "pr_url": "https://github.com/ibissource/iaf/pull/600", "timeline": [{"oid": "84511677e42dd9b55c1600f32d043c4f168db027", "url": "https://github.com/ibissource/iaf/commit/84511677e42dd9b55c1600f32d043c4f168db027", "message": "added test classes for some pipes", "committedDate": "2020-03-05T12:11:16Z", "type": "commit"}, {"oid": "c48ca4a5ea942bb81e4f0b1591de1452fed56131", "url": "https://github.com/ibissource/iaf/commit/c48ca4a5ea942bb81e4f0b1591de1452fed56131", "message": "added ReplacerPipe\n\nadded with full coverage, however I still need to add one case which does replace non xml characters and unicode supplementary characters", "committedDate": "2020-03-05T14:54:47Z", "type": "commit"}, {"oid": "0e47da865d46fdab0bdf7af05930f0357858aee4", "url": "https://github.com/ibissource/iaf/commit/0e47da865d46fdab0bdf7af05930f0357858aee4", "message": "created uploadFilePipe\n\ncreated a template of createFilePipe", "committedDate": "2020-03-05T15:48:51Z", "type": "commit"}, {"oid": "58dfe76044a5ad630333d60a4dbf2cbe6f0ce436", "url": "https://github.com/ibissource/iaf/commit/58dfe76044a5ad630333d60a4dbf2cbe6f0ce436", "message": "added Text2XMLPipeTest\n\n%90 coverage, one fix or improvement can be to find a way to throw an io exception. i couldnt think of a case where the program throws an io exception", "committedDate": "2020-03-06T09:51:32Z", "type": "commit"}, {"oid": "ccb78d47aafa2121fc9285637cbc3db3fa11a373", "url": "https://github.com/ibissource/iaf/commit/ccb78d47aafa2121fc9285637cbc3db3fa11a373", "message": "added UploadFilePipe\n\nWith full coverage. I think the class name should be changed to UploadZipFilePipe though, as it only supports zip files", "committedDate": "2020-03-06T13:15:00Z", "type": "commit"}, {"oid": "3ab68449d3f5d45dd9d194827900c5ec49269de4", "url": "https://github.com/ibissource/iaf/commit/3ab68449d3f5d45dd9d194827900c5ec49269de4", "message": "quick fix on replaceFilePipe", "committedDate": "2020-03-06T13:19:00Z", "type": "commit"}, {"oid": "ae9ddaf1ed238abbdf92d279380663b57b5f0433", "url": "https://github.com/ibissource/iaf/commit/ae9ddaf1ed238abbdf92d279380663b57b5f0433", "message": "ReplaceFilePipe back to original version\n\nI had to change the method access modifier to public to test out one method to understand how it works, now it is back to its normal version", "committedDate": "2020-03-06T13:20:27Z", "type": "commit"}, {"oid": "d8c48548dfe15dac4ca6732937760e1cea54fd05", "url": "https://github.com/ibissource/iaf/commit/d8c48548dfe15dac4ca6732937760e1cea54fd05", "message": "remove redundant tests", "committedDate": "2020-03-06T13:25:59Z", "type": "commit"}, {"oid": "9538cd22b2405d308b4e744f65c212e45a2030d4", "url": "https://github.com/ibissource/iaf/commit/9538cd22b2405d308b4e744f65c212e45a2030d4", "message": "Delete IsUserInRolePipeTest\n\ndeleted as I couldn't figure out a way yet to modify the roles, will look  further in this class after I finish the tests of other classes", "committedDate": "2020-03-06T15:04:22Z", "type": "commit"}, {"oid": "268252a731237942cca83ebcad1f6be8600f8748", "url": "https://github.com/ibissource/iaf/commit/268252a731237942cca83ebcad1f6be8600f8748", "message": "add 2 complete test classes\n\nadded 2 complete classes and several incomplete classes that I will try to finish up this afternoon", "committedDate": "2020-03-12T11:06:00Z", "type": "commit"}, {"oid": "e92d47a98de655edb213867df56752962bda5403", "url": "https://github.com/ibissource/iaf/commit/e92d47a98de655edb213867df56752962bda5403", "message": "Add test classes for pipes\n\nNearly all pipe classes are tested now with a few important exceptions like MessageSendingPipe.", "committedDate": "2020-04-10T13:23:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4MjgwNw==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r408682807", "bodyText": "Try to not modify any files which don't have any functional changes.", "author": "nielsm5", "createdAt": "2020-04-15T08:50:34Z", "path": "core/src/main/java/nl/nn/adapterframework/http/AuthSSLProtocolSocketFactoryForJsse10x.java", "diffHunk": "@@ -101,7 +101,7 @@ public AuthSSLProtocolSocketFactoryForJsse10x(\n         }\n         log.debug(\"Initializing key manager\");\n         if (StringUtils.isEmpty(algorithm)) {\n-        \talgorithm=KeyManagerFactory.getDefaultAlgorithm();\n+        \talgorithm= KeyManagerFactory.getDefaultAlgorithm();", "originalCommit": "e92d47a98de655edb213867df56752962bda5403", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMzMDE0MA==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r409330140", "bodyText": "This must be unintentional, I se that there are couple of files changed only with a space, I'm going to remove the changes.", "author": "sinasen2000", "createdAt": "2020-04-16T07:11:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4MjgwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4MjkyMw==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r408682923", "bodyText": "Try to not modify any files which don't have any functional changes.", "author": "nielsm5", "createdAt": "2020-04-15T08:50:46Z", "path": "core/src/main/java/nl/nn/adapterframework/pipes/FilePipe.java", "diffHunk": "@@ -54,7 +54,7 @@ public void configure() throws ConfigurationException {\n \t */\n \tpublic PipeRunResult doPipe(Object input, IPipeLineSession session) throws PipeRunException {\n \t\ttry {\n-\t\t\treturn new PipeRunResult(getForward(), fileHandler.handle(input, session, getParameterList()));\n+ \t\t\treturn new PipeRunResult(getForward(), fileHandler.handle(input, session, getParameterList()));", "originalCommit": "e92d47a98de655edb213867df56752962bda5403", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMzMDM1Ng==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r409330356", "bodyText": "Try to not modify any files which don't have any functional changes.\n\nThis must be unintentional, I see that there are couple of files changed only with a space, I'm going to remove the changes.", "author": "sinasen2000", "createdAt": "2020-04-16T07:12:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4MjkyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4MzAxNA==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r408683014", "bodyText": "Try to not modify any files which don't have any functional changes.", "author": "nielsm5", "createdAt": "2020-04-15T08:50:55Z", "path": "core/src/main/java/nl/nn/adapterframework/pipes/MessageSendingPipe.java", "diffHunk": "@@ -258,6 +258,7 @@ public void addParameter(Parameter p){\n \t\t}\n \t}\n \n+", "originalCommit": "e92d47a98de655edb213867df56752962bda5403", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMzMDQzNQ==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r409330435", "bodyText": "Same holds for this", "author": "sinasen2000", "createdAt": "2020-04-16T07:12:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4MzAxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4MzgyMQ==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r408683821", "bodyText": "Why did you removed these 2 tests?", "author": "nielsm5", "createdAt": "2020-04-15T08:52:15Z", "path": "core/src/test/java/nl/nn/adapterframework/pipes/CompareStringPipeTest.java", "diffHunk": "@@ -14,24 +15,12 @@ public CompareStringPipe createPipe() {\n \n     @Test(expected = ConfigurationException.class)\n     public void emptySessionKeys() throws ConfigurationException {\n+        PipeForward forw = new PipeForward(\"lessthan\", \"/Users/apollo11/Desktop/iaf2/core/src/test/resources/Pipes\");\n+        pipe.registerForward(forw);\n         pipe.setSessionKey1(\"\");\n         pipe.setSessionKey2(\"\");\n         pipe.configure();\n     }\n \n-    @Test", "originalCommit": "e92d47a98de655edb213867df56752962bda5403", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMzMzkyNg==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r409333926", "bodyText": "Why did you removed these 2 tests?\n\nThank you for pointing this out, I actually don't have a clue and cannot recall removing them, as this test does not belong to me. I'm going to readd these and I will try to be more careful to avoid errors like this and double check my pull requests", "author": "sinasen2000", "createdAt": "2020-04-16T07:19:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4MzgyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4NTQxMg==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r408685412", "bodyText": "We don't really use the since tag. When we do use these, we use the version number and not the date.\nFor all these tests you can remove them, as they don't add any additional value to the file(s).", "author": "nielsm5", "createdAt": "2020-04-15T08:54:51Z", "path": "core/src/test/java/nl/nn/adapterframework/pipes/ExceptionPipeTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.core.PipeRunException;\n+import org.junit.Test;\n+import org.junit.Before; \n+import org.junit.After;\n+\n+import java.nio.channels.Pipe;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * ExceptionPipe Tester.\n+ *\n+ * @author <Sina Sen>\n+ * @version 1.0\n+ * @since <pre>Mar 5, 2020</pre>", "originalCommit": "e92d47a98de655edb213867df56752962bda5403", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMzMDk0Ng==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r409330946", "bodyText": "We don't really use the since tag. When we do use these, we use the version number and not the date.\nFor all these tests you can remove them, as they don't add any additional value to the file(s).\n\nokay! I used them to index what  I did on which day, I'm going to remove them.", "author": "sinasen2000", "createdAt": "2020-04-16T07:13:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4NTQxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4NjEwMQ==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r408686101", "bodyText": "Try not to add any unused imports.\nYou can have a look at Codacy (after pushing your changes, it will be available on your PR).", "author": "nielsm5", "createdAt": "2020-04-15T08:55:59Z", "path": "core/src/test/java/nl/nn/adapterframework/pipes/ExceptionPipeTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.core.PipeRunException;\n+import org.junit.Test;\n+import org.junit.Before; \n+import org.junit.After;\n+\n+import java.nio.channels.Pipe;", "originalCommit": "e92d47a98de655edb213867df56752962bda5403", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMzNDUzOA==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r409334538", "bodyText": "Try not to add any unused imports.\nYou can have a look at Codacy (after pushing your changes, it will be available on your PR).\n\nYes! I looked at it and it indeed gives nice comments on the code quality. I'm going to adjust the code accordingly", "author": "sinasen2000", "createdAt": "2020-04-16T07:20:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4NjEwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4ODM0OA==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r408688348", "bodyText": "This is a recipe for getting NullPointerExceptions", "author": "nielsm5", "createdAt": "2020-04-15T08:59:34Z", "path": "core/src/test/java/nl/nn/adapterframework/pipes/IfMultipartTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.core.IPipeLineSession;\n+import nl.nn.adapterframework.core.PipeForward;\n+import nl.nn.adapterframework.core.PipeLineSessionBase;\n+import nl.nn.adapterframework.core.PipeRunException;\n+import nl.nn.adapterframework.core.PipeRunResult;\n+import org.junit.Test;\n+import org.junit.Before; \n+import org.junit.After;\n+import org.mockito.Mock;\n+\n+import static org.junit.Assert.*;\n+import org.mockito.MockitoAnnotations;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+/** \n+* IfMultipart Tester. \n+* \n+* @author <Sina Sen>\n+* @since <pre>Feb 28, 2020</pre> \n+* @version 1.0 \n+*/ \n+public class IfMultipartTest extends PipeTestBase<IfMultipart>{\n+    private final String thenForward = \"then\";\n+    private final String elseForward = \"else\";\n+\n+\n+    private MockHttpServletRequest request;\n+\n+    @Before\n+    public void before() throws Exception {\n+        request  = new MockHttpServletRequest();\n+\n+        MockitoAnnotations.initMocks(this);\n+    }\n+\n+    @Override\n+    public IfMultipart createPipe() {\n+        return new IfMultipart();\n+    }\n+\n+    @Test\n+    public void testInputNullElseForwardNull() throws Exception {\n+        exception.expect(PipeRunException.class);\n+        exception.expectMessage(\"Pipe [IfMultipart under test] cannot find forward or pipe named [null]\");\n+        pipe.setElseForwardName(null);\n+        pipe.doPipe(null, session);\n+    }\n+\n+    @Test\n+    public void testInputNotHTTPRequest() throws Exception {\n+        exception.expect(PipeRunException.class);\n+        exception.expectMessage(\"Pipe [IfMultipart under test] expected HttpServletRequest as input, got [String]\");\n+        pipe.doPipe(\"i am a string not a http req\", session);\n+    }\n+\n+    @Test\n+    public void testRequestUsesElseForward() throws Exception {\n+        PipeForward forw = new PipeForward(\"custom_else\", \"random/path\");\n+        pipe.registerForward(forw);\n+        pipe.setElseForwardName(\"custom_else\");\n+        assertEquals(pipe.doPipe(request, session).getPipeForward().getName().toString(), \"custom_else\");", "originalCommit": "e92d47a98de655edb213867df56752962bda5403", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMzNjU2Ng==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r409336566", "bodyText": "I couldn't understand what you meant to say\n\nThis is a recipe for getting NullPointerExceptions\n\nI could not understand what you meant to say. Can you explain a bit?", "author": "sinasen2000", "createdAt": "2020-04-16T07:24:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4ODM0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4ODc2Nw==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r408688767", "bodyText": "Please put all the setters underneath each other for better readability.", "author": "nielsm5", "createdAt": "2020-04-15T09:00:15Z", "path": "core/src/test/java/nl/nn/adapterframework/pipes/FilePipeTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.core.IPipeLineSession;\n+import nl.nn.adapterframework.core.PipeForward;\n+import nl.nn.adapterframework.core.PipeLineSessionBase;\n+import nl.nn.adapterframework.core.PipeRunException;\n+import nl.nn.adapterframework.core.PipeRunResult;\n+import nl.nn.adapterframework.parameters.Parameter;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.Before;\n+import org.junit.After;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mock;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UnsupportedEncodingException;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * FilePipe Tester.\n+ *\n+ * @author <Sina Sen>\n+ * @version 1.0\n+ * @since <pre>Feb 28, 2020</pre>\n+ */\n+public class FilePipeTest extends PipeTestBase<FilePipe> {\n+\n+    @ClassRule\n+    public static TemporaryFolder testFolderSource = new TemporaryFolder();\n+\n+    private static String sourceFolderPath;\n+\n+    @Mock\n+    private IPipeLineSession session1 = new PipeLineSessionBase();\n+\n+    private byte[] var = \"Some String you want\".getBytes();\n+    private ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(var);\n+\n+    @Override\n+    public FilePipe createPipe() {\n+        return new FilePipe();\n+    }\n+\n+\n+    @BeforeClass\n+    public static void before() throws Exception {\n+        testFolderSource.newFile(\"1.txt\");\n+        sourceFolderPath = testFolderSource.getRoot().getPath();\n+\n+    }\n+\n+\n+    @Test\n+    public void doTestSuccess() throws Exception {\n+        Parameter p = new Parameter();\n+        p.setSessionKey(\"key\"); p.setName(\"p1\"); p.setValue(\"15\"); p.setType(\"int\"); p.configure();\n+        session1.put(\"key\", p);\n+        PipeForward fw = new PipeForward();\n+        fw.setName(\"test\"); pipe.registerForward(fw); pipe.addParameter(p);\n+        pipe.setCharset(\"/\"); pipe.setDirectory(sourceFolderPath);\n+        pipe.setOutputType(\"stream\"); pipe.setActions(\"read\");\n+        pipe.setFileName(\"1.txt\"); pipe.setFileSource(\"filesystem\");\n+        pipe.setActions(\"create\");\n+        pipe.configure();\n+        PipeRunResult res = pipe.doPipe(var, session1);\n+        assertEquals(res.getPipeForward().getName(), \"success\");\n+    }\n+\n+    @Test\n+    public void doTestFailAsEncodingNotSupportedBase64() throws Exception {\n+        exception.expect(PipeRunException.class);\n+        exception.expectMessage(\"Pipe [FilePipe under test] msgId [null] Error while executing file action(s): (UnsupportedEncodingException) /\");\n+        Parameter p = new Parameter();\n+        p.setSessionKey(\"key\"); p.setName(\"p1\"); p.setValue(\"15\"); p.setType(\"int\"); p.configure();", "originalCommit": "e92d47a98de655edb213867df56752962bda5403", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMzNTAzOQ==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r409335039", "bodyText": "Thanks for the feedback, will do", "author": "sinasen2000", "createdAt": "2020-04-16T07:21:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4ODc2Nw=="}], "type": "inlineReview"}, {"oid": "d7365adaa0ae74b11b35eb3b789eaf2fab0e083b", "url": "https://github.com/ibissource/iaf/commit/d7365adaa0ae74b11b35eb3b789eaf2fab0e083b", "message": "Merge pull request #1 from ibissource/master\n\nsyncing the main and forked repository", "committedDate": "2020-04-16T14:21:07Z", "type": "commit"}, {"oid": "f0f7abc29f07b60a70107559f9be6678936bc704", "url": "https://github.com/ibissource/iaf/commit/f0f7abc29f07b60a70107559f9be6678936bc704", "message": "Merge branch 'PipeTest' into master", "committedDate": "2020-04-16T14:33:55Z", "type": "commit"}, {"oid": "c021e57eba2fdb46ec1920bc24df86c7b0df5f31", "url": "https://github.com/ibissource/iaf/commit/c021e57eba2fdb46ec1920bc24df86c7b0df5f31", "message": "Merge pull request #2 from sinasen2000/master\n\nmerge master into pipetest branch to sync the pipe test with the main master", "committedDate": "2020-04-16T14:34:12Z", "type": "commit"}, {"oid": "99e183c1f21ecabb868caf854178a8adfd12cf45", "url": "https://github.com/ibissource/iaf/commit/99e183c1f21ecabb868caf854178a8adfd12cf45", "message": "refactor test files for syncing\n\nRefactored the test files for pipes with to have them in sync with the master. \nRemoved some test classes whose classes are deprecated.", "committedDate": "2020-04-17T12:17:49Z", "type": "commit"}, {"oid": "4c042d8aac2209b129108ef6fd4b8ef1a109ba7d", "url": "https://github.com/ibissource/iaf/commit/4c042d8aac2209b129108ef6fd4b8ef1a109ba7d", "message": "refactor code for code quality\n\nrefactored the code for improving the code quality.\ndeleted classes which are vaguely tested, will have to retest those.", "committedDate": "2020-04-17T13:06:23Z", "type": "commit"}, {"oid": "ef437faad8857f5a797d3b2f8ba7b58256346ed4", "url": "https://github.com/ibissource/iaf/commit/ef437faad8857f5a797d3b2f8ba7b58256346ed4", "message": "resolve build error", "committedDate": "2020-04-17T13:25:26Z", "type": "commit"}, {"oid": "ceeee7d7db13df6657ea0b7f5a26a6eb814e749f", "url": "https://github.com/ibissource/iaf/commit/ceeee7d7db13df6657ea0b7f5a26a6eb814e749f", "message": "fix test that blocks the build", "committedDate": "2020-04-17T13:40:50Z", "type": "commit"}, {"oid": "3af2dc43c7d8aed9decf8931a269b8a0a05a513d", "url": "https://github.com/ibissource/iaf/commit/3af2dc43c7d8aed9decf8931a269b8a0a05a513d", "message": "fix build", "committedDate": "2020-04-17T13:44:41Z", "type": "commit"}, {"oid": "235c623fc614dd353c62b248983dc53454a09d62", "url": "https://github.com/ibissource/iaf/commit/235c623fc614dd353c62b248983dc53454a09d62", "message": "Merge branch 'master' into PipeTest", "committedDate": "2020-04-22T09:29:31Z", "type": "commit"}, {"oid": "96b95df81a9fa3870b9742b3619bae2e117dda94", "url": "https://github.com/ibissource/iaf/commit/96b95df81a9fa3870b9742b3619bae2e117dda94", "message": "uncomment class", "committedDate": "2020-04-22T09:53:07Z", "type": "commit"}, {"oid": "883a95484b9f4fc6fd41e77df9eb4cc36142b39b", "url": "https://github.com/ibissource/iaf/commit/883a95484b9f4fc6fd41e77df9eb4cc36142b39b", "message": "fix test errors", "committedDate": "2020-05-15T08:37:10Z", "type": "commit"}, {"oid": "2bfe18c49e6d23015341b05c85259da18a097e32", "url": "https://github.com/ibissource/iaf/commit/2bfe18c49e6d23015341b05c85259da18a097e32", "message": "Merge pull request #8 from ibissource/master\n\nsync pipe test branch", "committedDate": "2020-05-15T08:41:30Z", "type": "commit"}, {"oid": "97cbfdd5245b71d03957925393182d703953c5bd", "url": "https://github.com/ibissource/iaf/commit/97cbfdd5245b71d03957925393182d703953c5bd", "message": "fix test errors resulting from version difference", "committedDate": "2020-05-15T09:09:37Z", "type": "commit"}, {"oid": "e917a8434f8b64e05ded269bb446b738832334b7", "url": "https://github.com/ibissource/iaf/commit/e917a8434f8b64e05ded269bb446b738832334b7", "message": "remove space to prevent changing class file", "committedDate": "2020-05-15T09:13:19Z", "type": "commit"}, {"oid": "9797086d9b5c88c8a7c1b8b9a0261b7dae615433", "url": "https://github.com/ibissource/iaf/commit/9797086d9b5c88c8a7c1b8b9a0261b7dae615433", "message": "Revert \"fix test errors resulting from version difference\"\n\nThis reverts commit 97cbfdd5245b71d03957925393182d703953c5bd.", "committedDate": "2020-05-15T09:20:34Z", "type": "commit"}, {"oid": "862a826dab349956fbb7985342d1767db821e164", "url": "https://github.com/ibissource/iaf/commit/862a826dab349956fbb7985342d1767db821e164", "message": "Revert changes to commit to obey CI testing rules\n\nIn intelliJ, the expected output of an asserEquals with string is \"String: a\" while TravisCI expects only \"a\"", "committedDate": "2020-05-15T09:23:53Z", "type": "commit"}, {"oid": "d7d0f5e3b5092846cafdf0665ed77ff70094fd87", "url": "https://github.com/ibissource/iaf/commit/d7d0f5e3b5092846cafdf0665ed77ff70094fd87", "message": "Revert \"Revert \"fix test errors resulting from version difference\"\"\n\nThis reverts commit 9797086d9b5c88c8a7c1b8b9a0261b7dae615433.", "committedDate": "2020-05-15T09:30:00Z", "type": "commit"}, {"oid": "5c55a1c99d82196bff2ac8eaf38b3541807f07ca", "url": "https://github.com/ibissource/iaf/commit/5c55a1c99d82196bff2ac8eaf38b3541807f07ca", "message": "Remove non-functional changes from pr", "committedDate": "2020-05-15T09:36:17Z", "type": "commit"}, {"oid": "e4b98cfbee7cb47e81a0a44d2536fd9630d87f10", "url": "https://github.com/ibissource/iaf/commit/e4b98cfbee7cb47e81a0a44d2536fd9630d87f10", "message": "Remove non-functional changes from pr", "committedDate": "2020-05-15T09:39:09Z", "type": "commit"}, {"oid": "7c84c9640fb7201eff1b04c07a4a378ede44f76e", "url": "https://github.com/ibissource/iaf/commit/7c84c9640fb7201eff1b04c07a4a378ede44f76e", "message": "Remove redundant blank line", "committedDate": "2020-05-15T09:40:17Z", "type": "commit"}, {"oid": "c0693421e248eacdedb4fd430541967313529dd0", "url": "https://github.com/ibissource/iaf/commit/c0693421e248eacdedb4fd430541967313529dd0", "message": "Fix build error", "committedDate": "2020-05-15T09:47:21Z", "type": "commit"}, {"oid": "8930fc24c534c5c41c6945eacaeda7006b4e6e56", "url": "https://github.com/ibissource/iaf/commit/8930fc24c534c5c41c6945eacaeda7006b4e6e56", "message": "Fix build errors", "committedDate": "2020-05-15T10:00:04Z", "type": "commit"}, {"oid": "3d4d3f7ac0ca58223f63592cbb697e0981ea0e0d", "url": "https://github.com/ibissource/iaf/commit/3d4d3f7ac0ca58223f63592cbb697e0981ea0e0d", "message": "Fix build errors", "committedDate": "2020-05-15T10:15:11Z", "type": "commit"}, {"oid": "2c57b697c0219ec222ea12cda3da535198b6077b", "url": "https://github.com/ibissource/iaf/commit/2c57b697c0219ec222ea12cda3da535198b6077b", "message": "Improve code quality", "committedDate": "2020-05-15T12:11:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc1MzE2Ng==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r425753166", "bodyText": "toString appends the type of the object that's used. In this case a String. Hence the String: prefix.\nIf you use asString() it will convert whatever object may be in the getResult() to a string.", "author": "nielsm5", "createdAt": "2020-05-15T11:59:53Z", "path": "core/src/test/java/nl/nn/adapterframework/pipes/FixedResultTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.core.IPipeLineSession;\n+import nl.nn.adapterframework.core.PipeLineSessionBase;\n+import nl.nn.adapterframework.core.PipeRunException;\n+import nl.nn.adapterframework.core.PipeRunResult;\n+import nl.nn.adapterframework.parameters.Parameter;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mock;\n+\n+\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * FixedResult Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class FixedResultTest extends PipeTestBase<FixedResult> {\n+\n+    @ClassRule\n+    public static TemporaryFolder testFolderSource = new TemporaryFolder();\n+\n+    private static String sourceFolderPath;\n+    @Mock\n+    private IPipeLineSession session1 = new PipeLineSessionBase();\n+\n+    @Override\n+    public FixedResult createPipe() {\n+        return new FixedResult();\n+    }\n+\n+    @BeforeClass\n+    public static void before() throws Exception {\n+        sourceFolderPath = \"/Pipes/2.txt\";\n+        testFolderSource.newFile(\"2.txt\");\n+\n+    }\n+\n+\n+\n+    /**\n+     * Method: configure()\n+     */\n+    @Test\n+    public void testSuccess() throws Exception {\n+        Parameter param = new Parameter();\n+        param.setName(\"param1\");\n+        param.setValue(\"abs\");\n+        param.setSessionKey(\"*\");\n+        session1.put(\"param1\",\"yarr\");\n+        pipe.addParameter(param);\n+        pipe.setLookupAtRuntime(true);\n+        pipe.setFileName(sourceFolderPath);\n+        pipe.setReplaceFrom(\"param1\");\n+        pipe.setReplaceTo(\"kar\");\n+        pipe.setReturnString(\"${param1}andandandparam2\");\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"whatisthis\", session1);\n+        assertEquals(res.getResult().toString(), \"String: inside the file\");", "originalCommit": "3d4d3f7ac0ca58223f63592cbb697e0981ea0e0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc2MDk2OQ==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r425760969", "bodyText": "thanks for pointing out such a method exists. will replace all toString to asString where it's needed", "author": "sinasen2000", "createdAt": "2020-05-15T12:16:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc1MzE2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc1NTU2Mg==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r425755562", "bodyText": "This wont be triggered as you're expecting doPipe to throw an exception correct?", "author": "nielsm5", "createdAt": "2020-05-15T12:05:06Z", "path": "core/src/test/java/nl/nn/adapterframework/pipes/IncreaseIntegerPipeTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.configuration.ConfigurationException;\n+import nl.nn.adapterframework.core.IPipeLineSession;\n+import nl.nn.adapterframework.core.PipeLineSessionBase;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * IncreaseIntegerPipe Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class IncreaseIntegerPipeTest extends PipeTestBase<IncreaseIntegerPipe> {\n+\n+    @Mock\n+    private IPipeLineSession session = new PipeLineSessionBase();\n+\n+    @Override\n+    public IncreaseIntegerPipe createPipe() {\n+        return new IncreaseIntegerPipe();\n+    }\n+\n+\n+    /**\n+     * Method: doPipe(Object input, IPipeLineSession session)\n+     */\n+    @Test\n+    public void testIncreaseBy2() throws Exception {\n+\n+        session.put(\"a\", \"4\");\n+        pipe.setSessionKey(\"a\");\n+        pipe.setIncrement(2);\n+        pipe.configure();\n+        doPipe(pipe, \"doesnt matter\", session);\n+        assertEquals(session.get(\"a\"), \"6\");\n+    }\n+\n+    @Test\n+    public void testCannotIncreaseBy2AsNoSessionKey() throws Exception {\n+        exception.expect(ConfigurationException.class);\n+        exception.expectMessage(\"sessionKey must be filled\");\n+        session.put(\"a\", \"4\");\n+        pipe.setIncrement(2);\n+        pipe.configure();\n+        doPipe(pipe, \"doesnt matter\", session);\n+        assertEquals(session.get(\"a\"), \"6\");", "originalCommit": "3d4d3f7ac0ca58223f63592cbb697e0981ea0e0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc2NDg3Mg==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r425764872", "bodyText": "indeed, I will remove and replace it with a \"fail()\" assertion", "author": "sinasen2000", "createdAt": "2020-05-15T12:24:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc1NTU2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc1NTk3OQ==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r425755979", "bodyText": "Try to use asString instead", "author": "nielsm5", "createdAt": "2020-05-15T12:05:57Z", "path": "core/src/test/java/nl/nn/adapterframework/pipes/PasswordGeneratorPipeTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.core.PipeRunResult;\n+import org.junit.Test;\n+import org.junit.Before;\n+import org.junit.After;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * PasswordGeneratorPipe Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class PasswordGeneratorPipeTest extends PipeTestBase<PasswordGeneratorPipe> {\n+\n+\n+    @Override\n+    public PasswordGeneratorPipe createPipe() {\n+        return new PasswordGeneratorPipe();\n+    }\n+\n+    /**\n+     * Method: configure()\n+     */\n+    @Test\n+    public void testConfigure() throws Exception {\n+        pipe.setUseSecureRandom(true);\n+        pipe.configure();\n+\n+    }\n+    /**\n+     * Method: generate(int numOfLCharacters, int numOfUCharacters, int numOfSigns, int numOfNumbers)\n+     */\n+    @Test\n+    public void testGenerate() throws Exception {\n+        pipe.configure();\n+        String res = pipe.generate(3, 4, 2, 1);\n+        assertEquals(res.length(), 10);\n+        assertFalse(res.isEmpty());\n+    }\n+\n+    /**\n+     * Method: doPipe(Object input, IPipeLineSession session)\n+     */\n+    @Test\n+    public void testDoPipe() throws Exception {\n+        pipe.setLCharacters(\"abcd\");\n+        pipe.setNumbers(\"12342\");\n+        pipe.setUCharacters(\"ASDF\");\n+        pipe.setSigns(\"!@#@\");\n+        pipe.setNumOfDigits(3);\n+        pipe.setNumOfLCharacters(4);\n+        pipe.setNumOfUCharacters(2);\n+        pipe.setNumOfSigns(2);\n+        pipe.setUseSecureRandom(false);\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"pipey\", session);\n+        assertEquals(res.getResult().toString().length(), 19);", "originalCommit": "3d4d3f7ac0ca58223f63592cbb697e0981ea0e0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc1NzEzMg==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r425757132", "bodyText": "Maybe you can also convert the current PasswordHash tests (in the static main method of the class) to proper junit tests.", "author": "nielsm5", "createdAt": "2020-05-15T12:08:21Z", "path": "core/src/test/java/nl/nn/adapterframework/pipes/PasswordHashPipeTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.core.PipeLineSessionBase;\n+import nl.nn.adapterframework.core.PipeRunResult;\n+import nl.nn.adapterframework.util.PasswordHash;\n+import org.junit.Test;\n+import org.junit.Before;\n+import org.junit.After;\n+import org.mockito.Mock;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * PasswordHashPipe Tester.\n+ * @author <Sina>\n+ */\n+public class PasswordHashPipeTest extends PipeTestBase<PasswordHashPipe> {\n+\n+    @Mock\n+    private PipeLineSessionBase session = new PipeLineSessionBase();\n+\n+    @Override\n+    public PasswordHashPipe createPipe() {\n+        return new PasswordHashPipe();\n+    }\n+\n+\n+    /**\n+     * Method: doPipe(Object input, IPipeLineSession session)\n+     */\n+    @Test\n+    public void testHashPipe() throws Exception {\n+        session.put(\"key\", \"3:2342:2342\" );\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"password\", session);\n+        assertEquals(\"success\", res.getPipeForward().getName());\n+    }\n+\n+    @Test\n+    public void testValidatePipe() throws Exception {\n+\n+        String sc = PasswordHash.createHash(\"password\");", "originalCommit": "3d4d3f7ac0ca58223f63592cbb697e0981ea0e0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc3NDU4Ng==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r425774586", "bodyText": "I could not see any static main methods of the class PasswordHash, can you maybe clarify more?", "author": "sinasen2000", "createdAt": "2020-05-15T12:42:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc1NzEzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI0ODQwOA==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r430248408", "bodyText": "See: PasswordHash:204", "author": "nielsm5", "createdAt": "2020-05-26T08:38:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc1NzEzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ3MjExNw==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r434472117", "bodyText": "Okay, I thought you were talking about the PasswordHashPipe rather than PasswordHash class. Checking it out now.", "author": "sinasen2000", "createdAt": "2020-06-03T10:36:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc1NzEzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ4NzI5NA==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r434487294", "bodyText": "Converted the main method into a test case.", "author": "sinasen2000", "createdAt": "2020-06-03T11:07:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc1NzEzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc1NzkzMA==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r425757930", "bodyText": "You're expecting doPipe to throw an exception? then this assertion is not required :)", "author": "nielsm5", "createdAt": "2020-05-15T12:10:04Z", "path": "core/src/test/java/nl/nn/adapterframework/pipes/PutInSessionTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.configuration.ConfigurationException;\n+import nl.nn.adapterframework.core.PipeLineSessionBase;\n+import nl.nn.adapterframework.core.PipeRunResult;\n+import org.junit.Test;\n+\n+import org.mockito.Mock;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+\n+/**\n+ * PutInSession Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class PutInSessionTest extends PipeTestBase<PutInSession> {\n+\n+    @Mock\n+    PipeLineSessionBase session = new PipeLineSessionBase();\n+\n+    @Override\n+    public PutInSession createPipe() {\n+        return new PutInSession();\n+    }\n+\n+\n+\n+    /**\n+     * Method: configure()\n+     */\n+    /*\n+    @Test\n+    public void testConfigureWithoutSessionKey() throws Exception {\n+        pipe.setSessionKey(\"hola\");\n+        pipe.configure();\n+        doPipe(pipe, \"val\", session);\n+        Message m = new Message(\"val\");\n+        assertEquals(new Message(\"val\") , session.get(\"hola\"));\n+\n+    }\n+\n+    PutInSessionPipeTest:\n+java.lang.AssertionError: expected: nl.nn.adapterframework.stream.Message<String: val> but was: nl.nn.adapterframework.stream.Message<String: val>\n+Expected :nl.nn.adapterframework.stream.Message<String: val>\n+Actual   :nl.nn.adapterframework.stream.Message<String: val>\n+<Click to see difference>\n+No Difference??\n+\n+    */\n+\n+\n+    /**\n+     * Method: doPipe(Object input, IPipeLineSession session)\n+     */\n+    @Test\n+    public void testPutWithSessionKey() throws Exception {\n+        pipe.setSessionKey(\"hola\");\n+        pipe.setValue(\"val\");\n+        pipe.configure();\n+        doPipe(pipe, \"notimportant\", session);\n+        assertEquals(\"val\", session.get(\"hola\"));\n+    }\n+\n+    @Test\n+    public void testNoSessionKey() throws Exception {\n+        exception.expectMessage(\"attribute sessionKey must be specified\");\n+        exception.expect(ConfigurationException.class);\n+        pipe.setValue(\"val\");\n+        pipe.configure();\n+        PipeRunResult res = pipe.doPipe(null, session);\n+        assertFalse(res.getPipeForward().getName().isEmpty());", "originalCommit": "3d4d3f7ac0ca58223f63592cbb697e0981ea0e0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc2MTkyMA==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r425761920", "bodyText": "In some cases, I added assertions or fail()s to decrease the amount of code quality warnings given by codacy.", "author": "sinasen2000", "createdAt": "2020-05-15T12:18:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc1NzkzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc1ODEwNA==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r425758104", "bodyText": "Try to use asString instead of toString", "author": "nielsm5", "createdAt": "2020-05-15T12:10:25Z", "path": "core/src/test/java/nl/nn/adapterframework/pipes/RemoveFromSessionTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.core.IPipeLineSession;\n+import nl.nn.adapterframework.core.PipeLineSessionBase;\n+import nl.nn.adapterframework.core.PipeRunResult;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/** \n+* RemoveFromSession Tester. \n+* \n+* @author <Sina Sen>\n+*/ \n+public class RemoveFromSessionTest extends PipeTestBase<RemoveFromSession> {\n+\n+    @Mock\n+    private IPipeLineSession session = new PipeLineSessionBase();\n+    @Override\n+    public RemoveFromSession createPipe() {\n+        return new RemoveFromSession();\n+    }\n+\n+\n+/** \n+* \n+* Method: configure() \n+* \n+*/ \n+@Test\n+public void testEmptySessionKeyNonEmptyInput() throws Exception {\n+        pipe.setSessionKey(null);\n+        session.put(\"a\", \"123\");\n+        PipeRunResult res = doPipe(pipe, \"a\", session);\n+        assertEquals(res.getResult().toString(), \"String: 123\");\n+\n+}\n+\n+    @Test\n+    public void testNonEmptySessionKeyNonEmptyInput() throws Exception {\n+        pipe.setSessionKey(\"a\");\n+        session.put(\"a\", \"123\");\n+        PipeRunResult res = doPipe(pipe, \"a\", session);\n+        assertEquals(res.getResult().toString(), \"String: 123\");    }\n+\n+    @Test\n+    public void testNonEmptySessionKeyEmptyInput() throws Exception {\n+            pipe.setSessionKey(\"a\");\n+            session.put(\"a\", \"123\");\n+            PipeRunResult res = pipe.doPipe(null, session);\n+            assertEquals(res.getResult().toString(), \"String: 123\");\n+\n+    }\n+    @Test\n+    public void testEmptySessionKeyEmptyInput() throws Exception {\n+        exception.expect(NullPointerException.class);\n+        pipe.setSessionKey(null);\n+        session.put(\"a\", \"123\");\n+        PipeRunResult res = doPipe(pipe, null, session);\n+        assertEquals(res.getResult().toString(), \"[null]\");    }\n+\n+    @Test\n+    public void testFailAsKeyIsWrong() throws Exception {\n+        pipe.setSessionKey(\"ab\");\n+        session.put(\"a\", \"123\");\n+        PipeRunResult res = doPipe(pipe, \"ab\", session);\n+        assertEquals(res.getResult().toString(), \"String: [null]\");\n+\n+    }\n+\n+", "originalCommit": "3d4d3f7ac0ca58223f63592cbb697e0981ea0e0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc1ODU3Nw==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r425758577", "bodyText": "Try to use asString instead of toString", "author": "nielsm5", "createdAt": "2020-05-15T12:11:22Z", "path": "core/src/test/java/nl/nn/adapterframework/pipes/ReplacerPipeTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.configuration.ConfigurationException;\n+import nl.nn.adapterframework.core.PipeRunResult;\n+import org.junit.Test;\n+import org.junit.Before;\n+import org.junit.After;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+\n+/**\n+ * ReplacerPipe Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class ReplacerPipeTest extends PipeTestBase<ReplacerPipe>{\n+\n+    @Override\n+    public ReplacerPipe createPipe() {\n+        return new ReplacerPipe();\n+    }\n+\n+\n+    @Test\n+    public void everythingNull() throws Exception {\n+        exception.expect(ConfigurationException.class);\n+        exception.expectMessage(\"cannot have a null replace-attribute\");\n+        pipe.setFind(\"laa\");\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"\", session);\n+        assertFalse(res.getPipeForward().getName().isEmpty());\n+\n+    }\n+\n+    @Test\n+    public void getFindEmpty() throws Exception {\n+        pipe.setFind(\"\");\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"dsf\", session);\n+        assertFalse(res.getPipeForward().getName().isEmpty());\n+\n+    }\n+\n+    /**\n+     * Method: configure()\n+     */\n+    @Test\n+    public void testConfigureWithSeperator() throws Exception {\n+        pipe.setFind(\"sina/murat/niels\");\n+        pipe.setLineSeparatorSymbol(\"/\");\n+        pipe.setReplace(\"yo\");\n+        pipe.setAllowUnicodeSupplementaryCharacters(true);\n+        pipe.configure();\n+        doPipe(pipe, pipe.getFind(), session);\n+        assertFalse( pipe.getFind().isEmpty());\n+    }\n+\n+    @Test\n+    public void replaceNonXMLChar() throws Exception{\n+        pipe.setFind(\"test\");\n+        pipe.setReplace(\"head\");\n+        pipe.setReplaceNonXmlChar(\"k\");\n+        pipe.setReplaceNonXmlChars(true);\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"<test>lolo</test>/jacjac:)\", session);\n+        assertEquals(\"String: <head>lolo</head>/jacjac:)\", res.getResult().toString());\n+    }\n+\n+    @Test\n+    public void replaceStringSuccess() throws Exception{\n+        pipe.setFind(\"test\");\n+        pipe.setReplace(\"head\");\n+        pipe.setReplaceNonXmlChars(true);\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"<test>lolo</test>/jacjac:)\", session);\n+        assertEquals(\"String: <head>lolo</head>/jacjac:)\", res.getResult().toString());\n+    }\n+\n+    @Test\n+    public void replaceNonXMLCharLongerThanOne() throws Exception{\n+        exception.expect(ConfigurationException.class);\n+        exception.expectMessage(\"replaceNonXmlChar [klkl] has to be one character\");\n+        pipe.setFind(\"test\");\n+        pipe.setReplace(\"head\");\n+        pipe.setReplaceNonXmlChar(\"klkl\");\n+        pipe.setReplaceNonXmlChars(true);\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"<test>lolo</test>/jacjac:)\", session);\n+        assertEquals(\"<head>lolo</head>/jacjac:)\", res.getResult().toString());\n+    }\n+\n+", "originalCommit": "3d4d3f7ac0ca58223f63592cbb697e0981ea0e0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2c76bdce799eb07d045dd5fc05f7d4e3f7aacbd4", "url": "https://github.com/ibissource/iaf/commit/2c76bdce799eb07d045dd5fc05f7d4e3f7aacbd4", "message": "Refactor for code quality, better naming, replace toString with asString", "committedDate": "2020-05-15T12:55:08Z", "type": "commit"}, {"oid": "7f4d70ed4fd281968fbbbf8c1d6960c38da57ae9", "url": "https://github.com/ibissource/iaf/commit/7f4d70ed4fd281968fbbbf8c1d6960c38da57ae9", "message": "Refactor for code quality, better naming, replace toString with asString", "committedDate": "2020-05-15T12:55:23Z", "type": "commit"}, {"oid": "69c1b6dae58aa609e4ee11456c95cbb66c0be342", "url": "https://github.com/ibissource/iaf/commit/69c1b6dae58aa609e4ee11456c95cbb66c0be342", "message": "Refactor for code quality", "committedDate": "2020-05-15T13:11:40Z", "type": "commit"}, {"oid": "b0007e560af62f49ef0a7b456588d0deacad195d", "url": "https://github.com/ibissource/iaf/commit/b0007e560af62f49ef0a7b456588d0deacad195d", "message": "refactor for code quality", "committedDate": "2020-05-15T13:17:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI1MTA0MA==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r430251040", "bodyText": "Setters cannot be null (they would not be set).\nThey can however be empty \"\"", "author": "nielsm5", "createdAt": "2020-05-26T08:43:20Z", "path": "core/src/test/java/nl/nn/adapterframework/pipes/RemoveFromSessionTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.core.IPipeLineSession;\n+import nl.nn.adapterframework.core.PipeLineSessionBase;\n+import nl.nn.adapterframework.core.PipeRunResult;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/** \n+* RemoveFromSession Tester. \n+* \n+* @author <Sina Sen>\n+*/ \n+public class RemoveFromSessionTest extends PipeTestBase<RemoveFromSession> {\n+\n+    @Mock\n+    private IPipeLineSession session = new PipeLineSessionBase();\n+    @Override\n+    public RemoveFromSession createPipe() {\n+        return new RemoveFromSession();\n+    }\n+\n+\n+/** \n+* \n+* Method: configure() \n+* \n+*/ \n+@Test\n+public void testEmptySessionKeyNonEmptyInput() throws Exception {\n+        pipe.setSessionKey(null);\n+        session.put(\"a\", \"123\");\n+        PipeRunResult res = doPipe(pipe, \"a\", session);\n+        assertEquals(res.getResult().asString(), \"123\");\n+\n+}\n+\n+    @Test\n+    public void testNonEmptySessionKeyNonEmptyInput() throws Exception {\n+        pipe.setSessionKey(\"a\");\n+        session.put(\"a\", \"123\");\n+        PipeRunResult res = doPipe(pipe, \"a\", session);\n+        assertEquals(res.getResult().asString(), \"123\");    }\n+\n+    @Test\n+    public void testNonEmptySessionKeyEmptyInput() throws Exception {\n+            pipe.setSessionKey(\"a\");\n+            session.put(\"a\", \"123\");\n+            PipeRunResult res = pipe.doPipe(null, session);\n+            assertEquals(res.getResult().asString(), \"123\");\n+\n+    }\n+    @Test\n+    public void testEmptySessionKeyEmptyInput() throws Exception {\n+        exception.expect(NullPointerException.class);\n+        pipe.setSessionKey(null);", "originalCommit": "b0007e560af62f49ef0a7b456588d0deacad195d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ2NzIwNg==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r434467206", "bodyText": "Thanks for pointing out, everyday is a learning day! :)", "author": "sinasen2000", "createdAt": "2020-06-03T10:27:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI1MTA0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMxODE0NA==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r430318144", "bodyText": "You've only added tests with setReplaceNonXmlChars set to true?", "author": "nielsm5", "createdAt": "2020-05-26T10:39:46Z", "path": "core/src/test/java/nl/nn/adapterframework/pipes/ReplacerPipeTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.configuration.ConfigurationException;\n+import nl.nn.adapterframework.core.PipeRunResult;\n+import org.junit.Test;\n+\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * ReplacerPipe Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class ReplacerPipeTest extends PipeTestBase<ReplacerPipe>{\n+\n+    @Override\n+    public ReplacerPipe createPipe() {\n+        return new ReplacerPipe();\n+    }\n+\n+\n+    @Test\n+    public void everythingNull() throws Exception {\n+        exception.expect(ConfigurationException.class);\n+        exception.expectMessage(\"cannot have a null replace-attribute\");\n+        pipe.setFind(\"laa\");\n+        pipe.configure();\n+        doPipe(pipe, \"\", session);\n+        fail(\"this is expected to fail\");\n+\n+    }\n+\n+    @Test\n+    public void getFindEmpty() throws Exception {\n+        pipe.setFind(\"\");\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"dsf\", session);\n+        assertFalse(res.getPipeForward().getName().isEmpty());\n+\n+    }\n+\n+    /**\n+     * Method: configure()\n+     */\n+    @Test\n+    public void testConfigureWithSeperator() throws Exception {\n+        pipe.setFind(\"sina/murat/niels\");\n+        pipe.setLineSeparatorSymbol(\"/\");\n+        pipe.setReplace(\"yo\");\n+        pipe.setAllowUnicodeSupplementaryCharacters(true);\n+        pipe.configure();\n+        doPipe(pipe, pipe.getFind(), session);\n+        assertFalse( pipe.getFind().isEmpty());\n+    }\n+\n+    @Test\n+    public void replaceNonXMLChar() throws Exception{\n+        pipe.setFind(\"test\");\n+        pipe.setReplace(\"head\");\n+        pipe.setReplaceNonXmlChar(\"k\");\n+        pipe.setReplaceNonXmlChars(true);\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"<test>lolo</test>/jacjac:)\", session);\n+        assertEquals(\"<head>lolo</head>/jacjac:)\", res.getResult().asString());\n+    }\n+\n+    @Test\n+    public void replaceStringSuccess() throws Exception{\n+        pipe.setFind(\"test\");\n+        pipe.setReplace(\"head\");\n+        pipe.setReplaceNonXmlChars(true);\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"<test>lolo</test>/jacjac:)\", session);\n+        assertEquals(\"<head>lolo</head>/jacjac:)\", res.getResult().asString());\n+    }\n+\n+    @Test\n+    public void replaceNonXMLCharLongerThanOne() throws Exception{\n+        exception.expect(ConfigurationException.class);\n+        exception.expectMessage(\"replaceNonXmlChar [klkl] has to be one character\");\n+        pipe.setFind(\"test\");\n+        pipe.setReplace(\"head\");\n+        pipe.setReplaceNonXmlChar(\"klkl\");\n+        pipe.setReplaceNonXmlChars(true);\n+        pipe.configure();\n+        doPipe(pipe, \"<test>lolo</test>/jacjac:)\", session);\n+        fail(\"this is expected to fail\");\n+    }\n+\n+\n+", "originalCommit": "b0007e560af62f49ef0a7b456588d0deacad195d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ4ODMzMA==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r434488330", "bodyText": "yes indeed, adding a couple more cases with that method set to false. Thanks for pointing it out.", "author": "sinasen2000", "createdAt": "2020-06-03T11:09:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMxODE0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMxOTc0Ng==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r430319746", "bodyText": "Try to not test too many things in a single junittest\nIt will be harder to find issues if something might break in the future.\nTypically in a junit test you test the smallest possible bit of code, making sure that the entire code as a whole keeps performing well.", "author": "nielsm5", "createdAt": "2020-05-26T10:42:48Z", "path": "core/src/test/java/nl/nn/adapterframework/pipes/SkipPipeTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package nl.nn.adapterframework.pipes;\n+\n+\n+import nl.nn.adapterframework.core.PipeRunResult;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+\n+/**\n+ * SkipPipe Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class SkipPipeTest extends PipeTestBase<SkipPipe>{\n+\n+\n+\n+    @Override\n+    public SkipPipe createPipe() {\n+        return new SkipPipe();\n+    }\n+\n+    /**\n+     * Method: setSkip(int skip)\n+     */\n+    @Test\n+    public void testDoPipeSkip3Read2WithString() throws Exception {\n+        pipe.setSkip(3); pipe.setLength(2);\n+        PipeRunResult res = doPipe(pipe, \"0123456\", session);\n+        assertEquals(res.getResult().asString(), \"34\");", "originalCommit": "b0007e560af62f49ef0a7b456588d0deacad195d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUyNzAyMA==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r434527020", "bodyText": "disected the test into smaller tests", "author": "sinasen2000", "createdAt": "2020-06-03T12:25:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMxOTc0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMyMDY3Nw==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r430320677", "bodyText": "For a test that has no additional properties you set a lot of properties", "author": "nielsm5", "createdAt": "2020-05-26T10:44:37Z", "path": "core/src/test/java/nl/nn/adapterframework/pipes/Text2XmlPipeTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.configuration.ConfigurationException;\n+import nl.nn.adapterframework.core.PipeRunResult;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+\n+\n+/**\n+ * Text2XmlPipe Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class Text2XmlPipeTest extends PipeTestBase<Text2XmlPipe> {\n+\n+    @Override\n+    public Text2XmlPipe createPipe() {\n+        return new Text2XmlPipe();\n+    }\n+\n+    /**\n+     * Method: doPipe(Object input, IPipeLineSession session)\n+     */\n+    @Test\n+    public void testSuccessCDataAndReplaceNonXMLSplitLines() throws Exception {\n+        pipe.setXmlTag(\"address\");\n+        pipe.setSplitLines(true);\n+        pipe.setUseCdataSection(true);\n+        pipe.setIncludeXmlDeclaration(true);\n+        pipe.setReplaceNonXmlChars(true);\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"this is an example\\nim in cdata\", session);\n+        assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><address><line><![CDATA[this is an example]]></line><line><![CDATA[im in cdata]]></line></address>\", res.getResult().asString());\n+    }\n+\n+    @Test\n+    public void testSuccessCDataAndXMLDeclaration() throws Exception {\n+        pipe.setXmlTag(\"address\");\n+        pipe.setSplitLines(false);\n+        pipe.setUseCdataSection(false);\n+        pipe.setIncludeXmlDeclaration(true);\n+        pipe.setReplaceNonXmlChars(true);\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"this is an example\\nim in cdata\", session);\n+        assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><address>this is an example\\n\" +\n+                \"im in cdata</address>\", res.getResult().asString());\n+    }\n+\n+    @Test\n+    public void testSuccessWithoutAdditionalProperties() throws Exception {\n+        pipe.setXmlTag(\"address\");\n+        pipe.setSplitLines(false);\n+        pipe.setUseCdataSection(false);\n+        pipe.setIncludeXmlDeclaration(true);\n+        pipe.setReplaceNonXmlChars(false);\n+        pipe.configure();", "originalCommit": "b0007e560af62f49ef0a7b456588d0deacad195d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMyMTA4Mg==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r430321082", "bodyText": "this is not cdata. See wikipedia for more info", "author": "nielsm5", "createdAt": "2020-05-26T10:45:20Z", "path": "core/src/test/java/nl/nn/adapterframework/pipes/Text2XmlPipeTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.configuration.ConfigurationException;\n+import nl.nn.adapterframework.core.PipeRunResult;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+\n+\n+/**\n+ * Text2XmlPipe Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class Text2XmlPipeTest extends PipeTestBase<Text2XmlPipe> {\n+\n+    @Override\n+    public Text2XmlPipe createPipe() {\n+        return new Text2XmlPipe();\n+    }\n+\n+    /**\n+     * Method: doPipe(Object input, IPipeLineSession session)\n+     */\n+    @Test\n+    public void testSuccessCDataAndReplaceNonXMLSplitLines() throws Exception {\n+        pipe.setXmlTag(\"address\");\n+        pipe.setSplitLines(true);\n+        pipe.setUseCdataSection(true);\n+        pipe.setIncludeXmlDeclaration(true);\n+        pipe.setReplaceNonXmlChars(true);\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"this is an example\\nim in cdata\", session);\n+        assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><address><line><![CDATA[this is an example]]></line><line><![CDATA[im in cdata]]></line></address>\", res.getResult().asString());\n+    }\n+\n+    @Test\n+    public void testSuccessCDataAndXMLDeclaration() throws Exception {\n+        pipe.setXmlTag(\"address\");\n+        pipe.setSplitLines(false);\n+        pipe.setUseCdataSection(false);\n+        pipe.setIncludeXmlDeclaration(true);\n+        pipe.setReplaceNonXmlChars(true);\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"this is an example\\nim in cdata\", session);\n+        assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><address>this is an example\\n\" +\n+                \"im in cdata</address>\", res.getResult().asString());\n+    }\n+\n+    @Test\n+    public void testSuccessWithoutAdditionalProperties() throws Exception {\n+        pipe.setXmlTag(\"address\");\n+        pipe.setSplitLines(false);\n+        pipe.setUseCdataSection(false);\n+        pipe.setIncludeXmlDeclaration(true);\n+        pipe.setReplaceNonXmlChars(false);\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"this is an example\\nim in cdata\", session);\n+        assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><address>this is an example\\n\" +\n+                \"im in cdata</address>\", res.getResult().asString());", "originalCommit": "b0007e560af62f49ef0a7b456588d0deacad195d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUzMzMwOA==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r434533308", "bodyText": "yes, changed it accordingly.", "author": "sinasen2000", "createdAt": "2020-06-03T12:36:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMyMTA4Mg=="}], "type": "inlineReview"}, {"oid": "7152b2f6ba2b5b91e15751a34abaa4441d6c6b10", "url": "https://github.com/ibissource/iaf/commit/7152b2f6ba2b5b91e15751a34abaa4441d6c6b10", "message": "Merge pull request #10 from ibissource/master\n\nsync branch with base master", "committedDate": "2020-06-03T10:34:47Z", "type": "commit"}, {"oid": "7b6c3bc3cd9e4902b7e3a0787e82b71b7d44ca7f", "url": "https://github.com/ibissource/iaf/commit/7b6c3bc3cd9e4902b7e3a0787e82b71b7d44ca7f", "message": "Do the changes w.r.t Niels' feedback\n\n- Improved the quality of the test. \n- Deleted redundant tests and changed the content of tests that were written of misunderstood methods.", "committedDate": "2020-06-03T12:36:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM4NTg0Nw==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r437385847", "bodyText": "Can you order all the tests according to their @Order annotation?", "author": "nielsm5", "createdAt": "2020-06-09T12:49:25Z", "path": "core/src/test/java/nl/nn/adapterframework/pipes/MoveFilePipeTest.java", "diffHunk": "@@ -0,0 +1,366 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.configuration.ConfigurationException;\n+import nl.nn.adapterframework.core.IPipeLineSession;\n+import nl.nn.adapterframework.core.PipeLineSessionBase;\n+import nl.nn.adapterframework.core.PipeRunException;\n+import nl.nn.adapterframework.core.PipeRunResult;\n+import nl.nn.adapterframework.core.PipeStartException;\n+\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mock;\n+import org.springframework.core.annotation.Order;\n+\n+import java.io.IOException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+\n+/**\n+ * IfMultipart Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class MoveFilePipeTest extends PipeTestBase<MoveFilePipe>{\n+\n+    private String pipeForwardThen = \"success\";\n+\n+    @Mock\n+    private IPipeLineSession session = new PipeLineSessionBase();\n+\n+\n+\n+    @ClassRule\n+    public static TemporaryFolder testFolderSource = new TemporaryFolder();\n+\n+    private static String sourceFolderPath;\n+\n+    @ClassRule\n+    public static TemporaryFolder testFolderDest = new TemporaryFolder();;\n+\n+    private static String destFolderPath;\n+\n+    @ClassRule\n+    public static TemporaryFolder testFolderCantDelete = new TemporaryFolder();\n+\n+\n+    private static String cantdeleteFolderPath;\n+\n+    @ClassRule\n+    public static TemporaryFolder testFolderDelete = new TemporaryFolder();\n+\n+    private static String deleteFolderPath;\n+\n+    @Override\n+    public MoveFilePipe createPipe() { return new MoveFilePipe(); }\n+\n+    @BeforeClass\n+    public static void setUpTest() throws IOException {\n+            sourceFolderPath = testFolderSource.getRoot().getPath();\n+            destFolderPath = testFolderDest.getRoot().getPath();\n+            cantdeleteFolderPath = testFolderCantDelete.getRoot().getPath();\n+            deleteFolderPath = testFolderDelete.getRoot().getPath();\n+            testFolderSource.newFile(\"1.txt\"); testFolderSource.newFile(\"2.txt\"); testFolderSource.newFile(\"3.txt\"); testFolderSource.newFile(\"a.md\"); testFolderSource.newFile(\"b.md\"); testFolderSource.newFile(\"sad.lk\"); testFolderSource.newFile(\"notCompatible.txt\");\n+            testFolderSource.newFile(\"createDirectory.txt\"); testFolderSource.newFile(\"cantmove.sc\"); testFolderSource.newFile(\"prefixsuffix.txt\"); testFolderSource.newFile(\"toAppend1.txt\"); testFolderSource.newFile(\"toAppend2.txt\"); testFolderSource.newFile(\"xx.txt\"); testFolderSource.newFile(\"test.txt\");\n+            testFolderDest.newFile(\"cantmove.sc\"); testFolderDest.newFile(\"notcompatible.asd\"); testFolderDest.newFile(\"toBeAppended.txt\"); testFolderCantDelete.newFile(\"deletable.sd\"); testFolderCantDelete.newFile(\"deletionInterrupter.mz\");\n+            testFolderDelete.newFile(\"moveAndDeleteDirectory.txt\");\n+    }\n+\n+\n+\n+    @Test\n+    @Order(12)\n+    public void everythingNull() throws ConfigurationException, PipeStartException, PipeRunException {\n+        exception.expect(ConfigurationException.class);\n+        pipe.setFilename(null);\n+        pipe.configure();\n+        pipe.start();\n+\n+        pipe.doPipe(null, session);\n+\n+        fail(\"this is expected to fail\");\n+    }\n+\n+    @Test\n+    @Order(11)", "originalCommit": "7b6c3bc3cd9e4902b7e3a0787e82b71b7d44ca7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAxMjcxMg==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r438012712", "bodyText": "done!", "author": "sinasen2000", "createdAt": "2020-06-10T10:09:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM4NTg0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM4ODQzOA==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r437388438", "bodyText": "This session thing doesn't do anything am I correct?", "author": "nielsm5", "createdAt": "2020-06-09T12:53:26Z", "path": "core/src/test/java/nl/nn/adapterframework/pipes/PasswordHashPipeTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.core.PipeLineSessionBase;\n+import nl.nn.adapterframework.core.PipeRunResult;\n+import nl.nn.adapterframework.util.PasswordHash;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * PasswordHashPipe Tester.\n+ * @author <Sina>\n+ */\n+public class PasswordHashPipeTest extends PipeTestBase<PasswordHashPipe> {\n+\n+    @Mock\n+    private PipeLineSessionBase session = new PipeLineSessionBase();\n+\n+    @Override\n+    public PasswordHashPipe createPipe() {\n+        return new PasswordHashPipe();\n+    }\n+\n+\n+    /**\n+     * Method: doPipe(Object input, IPipeLineSession session)\n+     */\n+    @Test\n+    public void testHashPipe() throws Exception {\n+        session.put(\"key\", \"3:2342:2342\" );", "originalCommit": "7b6c3bc3cd9e4902b7e3a0787e82b71b7d44ca7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAxMjY2Mw==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r438012663", "bodyText": "I tested this class without knowing that I can use PasswordHash class. Now I am going to refactor this test class as a whole.", "author": "sinasen2000", "createdAt": "2020-06-10T10:09:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM4ODQzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEwODQwMg==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r438108402", "bodyText": "Done, what I was trying previously was to mimic the hashes, as I could not recreate the hashes, now that I could recreate them, all test cases are refactored.", "author": "sinasen2000", "createdAt": "2020-06-10T13:09:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM4ODQzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM4ODg2NA==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r437388864", "bodyText": "I don't understand why the pipeforward equals null, that should never be the case :S what is happening here?", "author": "nielsm5", "createdAt": "2020-06-09T12:54:08Z", "path": "core/src/test/java/nl/nn/adapterframework/pipes/PasswordHashPipeTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.core.PipeLineSessionBase;\n+import nl.nn.adapterframework.core.PipeRunResult;\n+import nl.nn.adapterframework.util.PasswordHash;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * PasswordHashPipe Tester.\n+ * @author <Sina>\n+ */\n+public class PasswordHashPipeTest extends PipeTestBase<PasswordHashPipe> {\n+\n+    @Mock\n+    private PipeLineSessionBase session = new PipeLineSessionBase();\n+\n+    @Override\n+    public PasswordHashPipe createPipe() {\n+        return new PasswordHashPipe();\n+    }\n+\n+\n+    /**\n+     * Method: doPipe(Object input, IPipeLineSession session)\n+     */\n+    @Test\n+    public void testHashPipe() throws Exception {\n+        session.put(\"key\", \"3:2342:2342\" );\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"password\", session);\n+        assertEquals(\"success\", res.getPipeForward().getName());\n+    }\n+\n+    @Test\n+    public void testValidatePipe() throws Exception {\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"password\", session);\n+        assertTrue(PasswordHash.validatePassword(\"password\", res.getResult().asString()));\n+        assertEquals(\"success\", res.getPipeForward().getName());\n+    }\n+    @Test\n+    public void testValidatePipeFailAsNotTheSame() throws Exception {\n+\n+        session.put(\"key\", \"2:22:22\");\n+        pipe.setHashSessionKey(\"key\");\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"password\", session);\n+        assertEquals(null, res.getPipeForward());", "originalCommit": "7b6c3bc3cd9e4902b7e3a0787e82b71b7d44ca7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAxMjU0OA==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r438012548", "bodyText": "I tested this class without knowing that I can use PasswordHash class. Now I am going to refactor this test class as a whole.", "author": "sinasen2000", "createdAt": "2020-06-10T10:09:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM4ODg2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEwMDY5OA==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r438100698", "bodyText": "Done.", "author": "sinasen2000", "createdAt": "2020-06-10T12:58:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM4ODg2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0MzQwMQ==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r437443401", "bodyText": "There are a lot of setters/parameters and for all 4 tests, and they are identical?\nThis class has grown out of proportions so I can understand it's difficult to test. Maybe you could create a separate PR for this or at least clean up the test a bit and maybe add some documentation/comments to see what's going on :)", "author": "nielsm5", "createdAt": "2020-06-09T13:57:55Z", "path": "core/src/test/java/nl/nn/adapterframework/pipes/FixedResultTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.core.IPipeLineSession;\n+import nl.nn.adapterframework.core.PipeLineSessionBase;\n+import nl.nn.adapterframework.core.PipeRunException;\n+import nl.nn.adapterframework.core.PipeRunResult;\n+import nl.nn.adapterframework.parameters.Parameter;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mock;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+\n+/**\n+ * FixedResult Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class FixedResultTest extends PipeTestBase<FixedResult> {\n+\n+    @ClassRule\n+    public static TemporaryFolder testFolderSource = new TemporaryFolder();\n+\n+    private static String sourceFolderPath;\n+    @Mock\n+    private IPipeLineSession session1 = new PipeLineSessionBase();\n+\n+    @Override\n+    public FixedResult createPipe() {\n+        return new FixedResult();\n+    }\n+\n+    @BeforeClass\n+    public static void before() throws Exception {\n+        sourceFolderPath = \"/Pipes/2.txt\";\n+        testFolderSource.newFile(\"2.txt\");\n+\n+    }\n+\n+\n+\n+    /**\n+     * Method: configure()\n+     */\n+    @Test\n+    public void testSuccess() throws Exception {\n+        Parameter param = new Parameter();\n+        param.setName(\"param1\");\n+        param.setValue(\"abs\");\n+        param.setSessionKey(\"*\");\n+        session1.put(\"param1\",\"yarr\");\n+        pipe.addParameter(param);\n+        pipe.setLookupAtRuntime(true);\n+        pipe.setFileName(sourceFolderPath);\n+        pipe.setReplaceFrom(\"param1\");\n+        pipe.setReplaceTo(\"kar\");\n+        pipe.setReturnString(\"${param1}andandandparam2\");\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"whatisthis\", session1);\n+        assertEquals(res.getResult().asString(), \"inside the file\");\n+    }", "originalCommit": "7b6c3bc3cd9e4902b7e3a0787e82b71b7d44ca7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAxOTEwMg==", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r438019102", "bodyText": "I copied the identical setters to another seperate method which is called by the other tests. I will  add some comments to the test as well. Do you want me to document the FixedResultPipe as well?", "author": "sinasen2000", "createdAt": "2020-06-10T10:21:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0MzQwMQ=="}], "type": "inlineReview"}, {"oid": "d087d061645d6a9d1037c2fb1e22e0dbbb5f3a02", "url": "https://github.com/ibissource/iaf/commit/d087d061645d6a9d1037c2fb1e22e0dbbb5f3a02", "message": "Add changes to pr according to the feedback.", "committedDate": "2020-06-10T11:19:22Z", "type": "commit"}, {"oid": "5f9014e8899905aba6bbcfff61a94a9fc4174c9f", "url": "https://github.com/ibissource/iaf/commit/5f9014e8899905aba6bbcfff61a94a9fc4174c9f", "message": "Add changes to PasswordHashTest for coherent testing", "committedDate": "2020-06-10T12:57:26Z", "type": "commit"}, {"oid": "0858e2de2e63df0fd35534b4b98cdfb467edd4ee", "url": "https://github.com/ibissource/iaf/commit/0858e2de2e63df0fd35534b4b98cdfb467edd4ee", "message": "Eliminate code quality warnings", "committedDate": "2020-06-10T13:05:12Z", "type": "commit"}]}