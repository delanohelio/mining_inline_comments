{"pr_number": 1314, "pr_title": "Fix exchange messageLog and errorStorage browsers", "pr_createdAt": "2020-12-03T17:12:12Z", "pr_url": "https://github.com/ibissource/iaf/pull/1314", "timeline": [{"oid": "aee83181114f11bf9714cb0f2e9034e8e4579203", "url": "https://github.com/ibissource/iaf/commit/aee83181114f11bf9714cb0f2e9034e8e4579203", "message": "Fix ExchangeMailListener messageLog and errorStorage browsers", "committedDate": "2020-12-02T17:06:40Z", "type": "commit"}, {"oid": "3b40d561ecb24453cdaf67ad6e022f76ab5df720", "url": "https://github.com/ibissource/iaf/commit/3b40d561ecb24453cdaf67ad6e022f76ab5df720", "message": "Fix #1305 Avoid reading message logs when ExchangeFileSystem closed", "committedDate": "2020-12-03T13:24:37Z", "type": "commit"}, {"oid": "f165b2cb0342266cdcf99364a567c2661fea8bf4", "url": "https://github.com/ibissource/iaf/commit/f165b2cb0342266cdcf99364a567c2661fea8bf4", "message": "Fix Codacy issues", "committedDate": "2020-12-03T17:31:53Z", "type": "commit"}, {"oid": "d6380ced570f29e67f4e02816ac72e49d503c4f2", "url": "https://github.com/ibissource/iaf/commit/d6380ced570f29e67f4e02816ac72e49d503c4f2", "message": "Add configuration for ImapListener to iaf-test", "committedDate": "2020-12-04T08:40:02Z", "type": "commit"}, {"oid": "925f4aee88c724fe4bfca255454cb20bf16e7724", "url": "https://github.com/ibissource/iaf/commit/925f4aee88c724fe4bfca255454cb20bf16e7724", "message": "Make use of threadLocal ExchangeService", "committedDate": "2020-12-07T16:02:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc1NDcwOQ==", "url": "https://github.com/ibissource/iaf/pull/1314#discussion_r537754709", "bodyText": "Waarom kan een openThread een Map teruggeven? wat zou hier in staan?", "author": "nielsm5", "createdAt": "2020-12-07T19:03:53Z", "path": "core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemListener.java", "diffHunk": "@@ -150,12 +151,21 @@ public void close() throws ListenerException {\n \n \t@Override\n \tpublic Map<String,Object> openThread() throws ListenerException {", "originalCommit": "925f4aee88c724fe4bfca255454cb20bf16e7724", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODEwMjYzNQ==", "url": "https://github.com/ibissource/iaf/pull/1314#discussion_r538102635", "bodyText": "in de javadoc van IPullingListener staat:\n/**\n* Prepares a thread for receiving messages.\n* Called once for each thread that will listen for messages.\n* @return the threadContext for this thread. The threadContext is a Map in which\n* thread-specific data can be stored.\n*/", "author": "gvanbrakel", "createdAt": "2020-12-08T07:39:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc1NDcwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc1OTA3MA==", "url": "https://github.com/ibissource/iaf/pull/1314#discussion_r537759070", "bodyText": "Eigenlijk is het dus messageIdKey ?", "author": "nielsm5", "createdAt": "2020-12-07T19:11:06Z", "path": "core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemMessageBrowsingIteratorItem.java", "diffHunk": "@@ -38,7 +43,11 @@ public String getId() throws ListenerException {\n \t@Override\n \tpublic String getOriginalId() throws ListenerException {\n \t\ttry {\n-\t\t\treturn fileSystem.getCanonicalName(item);\n+\t\t\tif (StringUtils.isNotEmpty(messageIdProperty)) {\n+\t\t\t\tMap<String,Object> properties = fileSystem.getAdditionalFileProperties(item);\n+\t\t\t\treturn (String)properties.get(messageIdProperty);", "originalCommit": "925f4aee88c724fe4bfca255454cb20bf16e7724", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc2NTIxMw==", "url": "https://github.com/ibissource/iaf/pull/1314#discussion_r537765213", "bodyText": "mag weg toch?", "author": "nielsm5", "createdAt": "2020-12-07T19:20:32Z", "path": "core/src/main/java/nl/nn/adapterframework/filesystem/Samba1FileSystem.java", "diffHunk": "@@ -81,12 +81,12 @@ public void open() throws FileSystemException {\n \t\t} catch (IOException e) {\n \t\t\tthrow new FileSystemException(e);\n \t\t}\n-\n+\t\tsuper.open();\n \t}\n \n \t@Override\n-\tpublic void close() {\n-\t\t// Automatically closes\n+\tpublic void close() throws FileSystemException {\n+\t\tsuper.close();\n \t}", "originalCommit": "925f4aee88c724fe4bfca255454cb20bf16e7724", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc2OTkzMA==", "url": "https://github.com/ibissource/iaf/pull/1314#discussion_r537769930", "bodyText": "kan/mag utf-8 een constante zijn?", "author": "nielsm5", "createdAt": "2020-12-07T19:27:54Z", "path": "core/src/main/java/nl/nn/adapterframework/webcontrol/api/TransactionalStorage.java", "diffHunk": "@@ -94,6 +95,13 @@ public Response browseReceiverMessage(\n \t\telse\n \t\t\tstorage = receiver.getErrorStorageBrowser();\n \n+\t\ttry {\n+\t\t\t// messageId is double URLEncoded, because it can contain '/' in ExchangeMailListener\n+\t\t\tmessageId = URLDecoder.decode(messageId,\"UTF-8\");", "originalCommit": "925f4aee88c724fe4bfca255454cb20bf16e7724", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc3MDQzMA==", "url": "https://github.com/ibissource/iaf/pull/1314#discussion_r537770430", "bodyText": "Ik zie dit nu 6x verschijnen..", "author": "nielsm5", "createdAt": "2020-12-07T19:28:44Z", "path": "core/src/main/java/nl/nn/adapterframework/webcontrol/api/TransactionalStorage.java", "diffHunk": "@@ -386,6 +422,13 @@ public Response downloadPipeMessage(\n \t\t\tthrow new ApiException(\"Pipe [\"+pipeName+\"] not found!\");\n \t\t}\n \n+\t\ttry {\n+\t\t\t// messageId is double URLEncoded, because it can contain '/' in ExchangeMailListener\n+\t\t\tmessageId = URLDecoder.decode(messageId,\"UTF-8\");\n+\t\t} catch (UnsupportedEncodingException e) {\n+\t\t\tlog.warn(e);\n+\t\t}\n+", "originalCommit": "925f4aee88c724fe4bfca255454cb20bf16e7724", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODEzNDI5NA==", "url": "https://github.com/ibissource/iaf/pull/1314#discussion_r538134294", "bodyText": "Dat komt ook omdat er 6 keer dezelfde method in deze class zit", "author": "gvanbrakel", "createdAt": "2020-12-08T08:29:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc3MDQzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc3ODIzMg==", "url": "https://github.com/ibissource/iaf/pull/1314#discussion_r537778232", "bodyText": "Ik snap hier niets van. Waarom geef je niet altijd terug wat in de threadlocal zit. Ik zie iig geen toegevoegde waarde om het naast een threadlocal ook in een global bij te houden...\nDe threadlocal moet/kan een initialValue hebben waar hij de ExchangeService aanmaakt. Dan hoef je geen return localExchangeService !=null ? localExchangeService : createService(); te doen...", "author": "nielsm5", "createdAt": "2020-12-07T19:37:42Z", "path": "core/src/main/java/nl/nn/adapterframework/filesystem/ExchangeFileSystem.java", "diffHunk": "@@ -253,19 +211,96 @@ public FolderId findFolder(FolderId baseFolderId, String folderName) throws Exce\n \t\treturn result;\n \t}\n \n+\tprivate ExchangeService createExchangeService() throws FileSystemException {\n+\t\tExchangeService exchangeService = new ExchangeService(ExchangeVersion.Exchange2010_SP2);\n+\t\t\n+\t\tString defaultUsername = StringUtils.isEmpty(getAccessToken())? getUsername() : null;\n+\t\tString defaultPassword = StringUtils.isEmpty(getAccessToken())? getPassword() : getAccessToken();\n+\n+\t\tCredentialFactory cf = new CredentialFactory(getAuthAlias(), defaultUsername, defaultPassword);\n+\t\tif (StringUtils.isEmpty(cf.getUsername())) {\n+\t\t\t// use OAuth Bearer token authentication\n+\t\t\texchangeService.getHttpHeaders().put(\"Authorization\", \"Bearer \"+cf.getPassword());\n+\t\t} else {\n+\t\t\t// use deprecated Basic Authentication. Support will end 2021-Q3!\n+\t\t\tlog.warn(\"Using deprecated Basic Authentication method for authentication to Exchange Web Services\");\n+\t\t\tExchangeCredentials credentials = new WebCredentials(cf.getUsername(), cf.getPassword());\n+\t\t\texchangeService.setCredentials(credentials);\n+\t\t}\n+\n+\t\t\n+\t\t\n+\t\tif (StringUtils.isNotEmpty(getProxyHost()) && (StringUtils.isNotEmpty(getProxyAuthAlias()) || StringUtils.isNotEmpty(getProxyUsername()) || StringUtils.isNotEmpty(getProxyPassword()))) {\n+\t\t\tCredentialFactory proxyCf = new CredentialFactory(getProxyAuthAlias(), getProxyUsername(), getProxyPassword());\n+\t\t\tWebProxyCredentials webProxyCredentials = new WebProxyCredentials(proxyCf.getUsername(), proxyCf.getPassword(), getProxyDomain());\n+\t\t\tWebProxy webProxy = new WebProxy(getProxyHost(), getProxyPort(), webProxyCredentials);\n+\t\t\texchangeService.setWebProxy(webProxy);\n+\t\t}\n+\n+\t\tRedirectionUrlCallback redirectionUrlCallback = new RedirectionUrlCallback() {\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean autodiscoverRedirectionUrlValidationCallback(String redirectionUrl) {\n+\t\t\t\tif (isValidateAllRedirectUrls()) {\n+\t\t\t\t\tlog.debug(\"validated redirection url [\"+redirectionUrl+\"]\");\n+\t\t\t\t\treturn true;\n+\t\t\t\t}\n+\t\t\t\tlog.debug(\"did not validate redirection url [\"+redirectionUrl+\"]\");\n+\t\t\t\treturn super.autodiscoverRedirectionUrlValidationCallback(redirectionUrl);\n+\t\t\t}\n+\t\t\t\n+\t\t};\n+\n+\t\tif (StringUtils.isEmpty(getUrl())) {\n+\t\t\tlog.debug(\"performing autodiscovery for [\"+getMailAddress()+\"]\");\n+\t\t\ttry {\n+\t\t\t\texchangeService.autodiscoverUrl(getMailAddress(),redirectionUrlCallback);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tthrow new FileSystemException(\"cannot autodiscover for [\"+getMailAddress()+\"]\", e);\n+\t\t\t}\n+\t\t} else {\n+\t\t\ttry {\n+\t\t\t\texchangeService.setUrl(new URI(getUrl()));\n+\t\t\t} catch (URISyntaxException e) {\n+\t\t\t\tthrow new FileSystemException(\"cannot set URL [\"+getUrl()+\"]\", e);\n+\t\t\t}\n+\t\t}\n+\t\tlog.debug(\"using url [\"+exchangeService.getUrl()+\"]\");\n+\t\treturn exchangeService;\n+\t}\n+\t\n+\tprivate ExchangeService getExchangeService() {\n+\t\tExchangeService localExchangeService = threadLocalExchangeService.get();\n+\t\treturn localExchangeService !=null ? localExchangeService : globalExchangeService;", "originalCommit": "925f4aee88c724fe4bfca255454cb20bf16e7724", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE1OTQyOQ==", "url": "https://github.com/ibissource/iaf/pull/1314#discussion_r538159429", "bodyText": "In openThread() en closeThread() worden de threadLocal variabelen gemanaged voor de FileSystemListener, die als PullingListener in een Receiver kan draaien. Dan krijgt elke thread z'n eigen ExchangeService.\nBij gebruik als ExchangeFolderSender is er geen openThread()/closeThread(), maar je/ik wil ook niet dat alle 100 WebSphere threads een eigen ExchangeService gaan hebben, en ook niet dat die voor elk verzoek een nieuwe connectie moet maken.\nMisschien moet er voor dat geval een 'releaseConnection()' komen.", "author": "gvanbrakel", "createdAt": "2020-12-08T09:07:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc3ODIzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc3OTEyNQ==", "url": "https://github.com/ibissource/iaf/pull/1314#discussion_r537779125", "bodyText": "Hier zou je dan naast de close ook een threadlocal.remove() moeten doen.", "author": "nielsm5", "createdAt": "2020-12-07T19:39:10Z", "path": "core/src/main/java/nl/nn/adapterframework/filesystem/ExchangeFileSystem.java", "diffHunk": "@@ -253,19 +211,96 @@ public FolderId findFolder(FolderId baseFolderId, String folderName) throws Exce\n \t\treturn result;\n \t}\n \n+\tprivate ExchangeService createExchangeService() throws FileSystemException {\n+\t\tExchangeService exchangeService = new ExchangeService(ExchangeVersion.Exchange2010_SP2);\n+\t\t\n+\t\tString defaultUsername = StringUtils.isEmpty(getAccessToken())? getUsername() : null;\n+\t\tString defaultPassword = StringUtils.isEmpty(getAccessToken())? getPassword() : getAccessToken();\n+\n+\t\tCredentialFactory cf = new CredentialFactory(getAuthAlias(), defaultUsername, defaultPassword);\n+\t\tif (StringUtils.isEmpty(cf.getUsername())) {\n+\t\t\t// use OAuth Bearer token authentication\n+\t\t\texchangeService.getHttpHeaders().put(\"Authorization\", \"Bearer \"+cf.getPassword());\n+\t\t} else {\n+\t\t\t// use deprecated Basic Authentication. Support will end 2021-Q3!\n+\t\t\tlog.warn(\"Using deprecated Basic Authentication method for authentication to Exchange Web Services\");\n+\t\t\tExchangeCredentials credentials = new WebCredentials(cf.getUsername(), cf.getPassword());\n+\t\t\texchangeService.setCredentials(credentials);\n+\t\t}\n+\n+\t\t\n+\t\t\n+\t\tif (StringUtils.isNotEmpty(getProxyHost()) && (StringUtils.isNotEmpty(getProxyAuthAlias()) || StringUtils.isNotEmpty(getProxyUsername()) || StringUtils.isNotEmpty(getProxyPassword()))) {\n+\t\t\tCredentialFactory proxyCf = new CredentialFactory(getProxyAuthAlias(), getProxyUsername(), getProxyPassword());\n+\t\t\tWebProxyCredentials webProxyCredentials = new WebProxyCredentials(proxyCf.getUsername(), proxyCf.getPassword(), getProxyDomain());\n+\t\t\tWebProxy webProxy = new WebProxy(getProxyHost(), getProxyPort(), webProxyCredentials);\n+\t\t\texchangeService.setWebProxy(webProxy);\n+\t\t}\n+\n+\t\tRedirectionUrlCallback redirectionUrlCallback = new RedirectionUrlCallback() {\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean autodiscoverRedirectionUrlValidationCallback(String redirectionUrl) {\n+\t\t\t\tif (isValidateAllRedirectUrls()) {\n+\t\t\t\t\tlog.debug(\"validated redirection url [\"+redirectionUrl+\"]\");\n+\t\t\t\t\treturn true;\n+\t\t\t\t}\n+\t\t\t\tlog.debug(\"did not validate redirection url [\"+redirectionUrl+\"]\");\n+\t\t\t\treturn super.autodiscoverRedirectionUrlValidationCallback(redirectionUrl);\n+\t\t\t}\n+\t\t\t\n+\t\t};\n+\n+\t\tif (StringUtils.isEmpty(getUrl())) {\n+\t\t\tlog.debug(\"performing autodiscovery for [\"+getMailAddress()+\"]\");\n+\t\t\ttry {\n+\t\t\t\texchangeService.autodiscoverUrl(getMailAddress(),redirectionUrlCallback);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tthrow new FileSystemException(\"cannot autodiscover for [\"+getMailAddress()+\"]\", e);\n+\t\t\t}\n+\t\t} else {\n+\t\t\ttry {\n+\t\t\t\texchangeService.setUrl(new URI(getUrl()));\n+\t\t\t} catch (URISyntaxException e) {\n+\t\t\t\tthrow new FileSystemException(\"cannot set URL [\"+getUrl()+\"]\", e);\n+\t\t\t}\n+\t\t}\n+\t\tlog.debug(\"using url [\"+exchangeService.getUrl()+\"]\");\n+\t\treturn exchangeService;\n+\t}\n+\t\n+\tprivate ExchangeService getExchangeService() {\n+\t\tExchangeService localExchangeService = threadLocalExchangeService.get();\n+\t\treturn localExchangeService !=null ? localExchangeService : globalExchangeService;\n+\t}\n+\n \t@Override\n \tpublic void close() throws FileSystemException {\n-\t\tif (exchangeService!=null) {\n-\t\t\texchangeService.close();\n+\t\tsuper.close();\n+\t\tif (globalExchangeService!=null) {\n+\t\t\tglobalExchangeService.close();", "originalCommit": "925f4aee88c724fe4bfca255454cb20bf16e7724", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc4MjM2Ng==", "url": "https://github.com/ibissource/iaf/pull/1314#discussion_r537782366", "bodyText": "Aangezien de PhysicalDestinationName redelijk vaak opgehaald wordt is het misschien handig de url alleen weer te geven als deze daadwerkelijk opgegeven is, en anders 'using autodiscovery' te gebruiken.", "author": "nielsm5", "createdAt": "2020-12-07T19:44:24Z", "path": "core/src/main/java/nl/nn/adapterframework/filesystem/ExchangeFileSystem.java", "diffHunk": "@@ -757,10 +796,11 @@ public void extractAttachment(Attachment attachment, SaxElementBuilder attachmen\n \n \t@Override\n \tpublic String getPhysicalDestinationName() {\n-\t\tif (exchangeService != null) {\n-\t\t\treturn \"url [\" + (exchangeService == null ? \"\" : exchangeService.getUrl()) + \"] mailAddress [\" + (getMailAddress() == null ? \"\" : getMailAddress()) + \"]\";\n+\t\tString result = super.getPhysicalDestinationName();\n+\t\tif (globalExchangeService != null) {\n+\t\t\tresult = Misc.concatStrings(\"url [\" + (globalExchangeService == null ? \"\" : globalExchangeService.getUrl()) + \"] mailAddress [\" + (getMailAddress() == null ? \"\" : getMailAddress()) + \"]\", \" \", result);", "originalCommit": "925f4aee88c724fe4bfca255454cb20bf16e7724", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE2MDkwNA==", "url": "https://github.com/ibissource/iaf/pull/1314#discussion_r538160904", "bodyText": "Ik denk dat als je autodiscovery gebruikt je ook de url wilt zien, zodat je die vervolgens kan opgeven. Autodiscovery is erg traag.", "author": "gvanbrakel", "createdAt": "2020-12-08T09:09:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc4MjM2Ng=="}], "type": "inlineReview"}, {"oid": "5b64a5a422aa8bd2d7095ef9ae5c2e773859fdac", "url": "https://github.com/ibissource/iaf/commit/5b64a5a422aa8bd2d7095ef9ae5c2e773859fdac", "message": "Rename messageIdProperty into messageIdPropertyKey", "committedDate": "2020-12-08T08:46:21Z", "type": "commit"}, {"oid": "6eb41a51e25d8ee0384d391647070844e17cf64c", "url": "https://github.com/ibissource/iaf/commit/6eb41a51e25d8ee0384d391647070844e17cf64c", "message": "use constant for 'UTF-8' and introduce Misc.urlDecode()", "committedDate": "2020-12-08T08:51:49Z", "type": "commit"}, {"oid": "2abbf6f7be6f64a46faec3bfecb9744be9880cc6", "url": "https://github.com/ibissource/iaf/commit/2abbf6f7be6f64a46faec3bfecb9744be9880cc6", "message": "Introduce ConnectedFileSystemBase", "committedDate": "2020-12-11T09:59:32Z", "type": "commit"}, {"oid": "0685c6262f02b7e519c31459c9797dfc39624693", "url": "https://github.com/ibissource/iaf/commit/0685c6262f02b7e519c31459c9797dfc39624693", "message": "Fix issues", "committedDate": "2020-12-11T10:21:00Z", "type": "commit"}, {"oid": "79f99067abe5d05a9455ceda02d0f08eddca1ec2", "url": "https://github.com/ibissource/iaf/commit/79f99067abe5d05a9455ceda02d0f08eddca1ec2", "message": "Use Connector instead of Proxy", "committedDate": "2020-12-11T12:01:29Z", "type": "commit"}, {"oid": "7bbd8a346816e69f5131de6801dd63abf660bbba", "url": "https://github.com/ibissource/iaf/commit/7bbd8a346816e69f5131de6801dd63abf660bbba", "message": "Merged branch 'master'", "committedDate": "2020-12-11T12:09:12Z", "type": "commit"}, {"oid": "0140dbfdb54fc9ef67fc548d7cbc358925dd3303", "url": "https://github.com/ibissource/iaf/commit/0140dbfdb54fc9ef67fc548d7cbc358925dd3303", "message": "Remove connection from pool after exception", "committedDate": "2020-12-14T08:19:13Z", "type": "commit"}, {"oid": "35234d7bec16899b4aa9d66eb82a74545812c079", "url": "https://github.com/ibissource/iaf/commit/35234d7bec16899b4aa9d66eb82a74545812c079", "message": "Only close IMAP folder if it is open", "committedDate": "2020-12-14T09:29:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI4OTU0MA==", "url": "https://github.com/ibissource/iaf/pull/1314#discussion_r542289540", "bodyText": "Ik denk dat het handig is als je dit bij de javadoc vermeld. Je kan dus ook niet-pooled connectors invalideren en deze worden dan automatisch opnieuw aangemaakt.", "author": "nielsm5", "createdAt": "2020-12-14T10:51:06Z", "path": "core/src/main/java/nl/nn/adapterframework/filesystem/ConnectedFileSystemBase.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+   Copyright 2020 WeAreFrank!\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+ */\n+package nl.nn.adapterframework.filesystem;\n+\n+import org.apache.commons.pool2.BasePooledObjectFactory;\n+import org.apache.commons.pool2.ObjectPool;\n+import org.apache.commons.pool2.PooledObject;\n+import org.apache.commons.pool2.impl.DefaultPooledObject;\n+import org.apache.commons.pool2.impl.GenericObjectPool;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+/**\n+ * Baseclass for {@link IBasicFileSystem FileSystems} that use a 'Connection' to connect to their storage.\n+ * \n+ * @author Gerrit van Brakel\n+ *\n+ */\n+public abstract class ConnectedFileSystemBase<F,C> extends FileSystemBase<F> {\n+\n+\t// implementations that have a thread-safe connector can set pooledConnection = false to use a shared connection.\n+\tprivate @Setter @Getter boolean pooledConnection=true;\n+\t\n+\tprivate Connector<C> globalConnector;\n+\tprivate ObjectPool<Connector<C>> connectorPool;\n+\n+\tprotected abstract C createConnection() throws FileSystemException;\n+\t\n+\tprotected void closeConnection(C connection) throws FileSystemException {\n+\t\tif (connection instanceof AutoCloseable) {\n+\t\t\ttry {\n+\t\t\t\t((AutoCloseable) connection).close();\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tthrow new FileSystemException(e);\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t\n+\t@Override\n+\tpublic void open() throws FileSystemException {\n+\t\tif (isPooledConnection()) {\n+\t\t\topenPool();\n+\t\t} else {\n+\t\t\tglobalConnector = new Connector<>(createConnection(), null);\n+\t\t}\n+\t\tsuper.open();\n+\t}\n+\t\n+\t@Override\n+\tpublic void close() throws FileSystemException {\n+\t\ttry {\n+\t\t\tsuper.close();\n+\t\t} finally {\n+\t\t\tif (isPooledConnection()) {\n+\t\t\t\tclosePool();\n+\t\t\t} else {\n+\t\t\t\tif (globalConnector!=null) {\n+\t\t\t\t\tcloseConnection(globalConnector.getConnection());\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\n+\t/**\n+\t * Get the Connector from the thread, or a fresh one from the pool.\n+\t * At close(), it is returned to the pool, if it came from the pool; \n+\t * If it was allocated, it is just left allocated.\n+\t */\n+\tprotected Connector<C> getConnector() throws FileSystemException {\n+\t\ttry {\n+\t\t\treturn isPooledConnection() ? connectorPool.borrowObject() : globalConnector;\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new FileSystemException(\"Cannot get connector from pool\", e);\n+\t\t}\n+\t}\n+\t\n+\t/**\n+\t * Remove the connector from the pool, e.g. after it has been part of trouble.\n+\t */\n+\tprotected void invalidateConnector(Connector<C> connector) {\n+\t\ttry {\n+\t\t\tif (isPooledConnection()) {\n+\t\t\t\tconnectorPool.invalidateObject(connector);\n+\t\t\t} else {\n+\t\t\t\ttry {\n+\t\t\t\t\tcloseConnection(globalConnector.getConnection());\n+\t\t\t\t} finally {\n+\t\t\t\t\tglobalConnector = new Connector(createConnection(), null);", "originalCommit": "35234d7bec16899b4aa9d66eb82a74545812c079", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI5MTA5MQ==", "url": "https://github.com/ibissource/iaf/pull/1314#discussion_r542291091", "bodyText": "Ik zie een aantal nuttige log statements maar misschien dat er iets meer informatie in kan staan? Welk FS betreft het?", "author": "nielsm5", "createdAt": "2020-12-14T10:53:25Z", "path": "core/src/main/java/nl/nn/adapterframework/filesystem/ConnectedFileSystemBase.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+   Copyright 2020 WeAreFrank!\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+ */\n+package nl.nn.adapterframework.filesystem;\n+\n+import org.apache.commons.pool2.BasePooledObjectFactory;\n+import org.apache.commons.pool2.ObjectPool;\n+import org.apache.commons.pool2.PooledObject;\n+import org.apache.commons.pool2.impl.DefaultPooledObject;\n+import org.apache.commons.pool2.impl.GenericObjectPool;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+/**\n+ * Baseclass for {@link IBasicFileSystem FileSystems} that use a 'Connection' to connect to their storage.\n+ * \n+ * @author Gerrit van Brakel\n+ *\n+ */\n+public abstract class ConnectedFileSystemBase<F,C> extends FileSystemBase<F> {\n+\n+\t// implementations that have a thread-safe connector can set pooledConnection = false to use a shared connection.\n+\tprivate @Setter @Getter boolean pooledConnection=true;\n+\t\n+\tprivate Connector<C> globalConnector;\n+\tprivate ObjectPool<Connector<C>> connectorPool;\n+\n+\tprotected abstract C createConnection() throws FileSystemException;\n+\t\n+\tprotected void closeConnection(C connection) throws FileSystemException {\n+\t\tif (connection instanceof AutoCloseable) {\n+\t\t\ttry {\n+\t\t\t\t((AutoCloseable) connection).close();\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tthrow new FileSystemException(e);\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t\n+\t@Override\n+\tpublic void open() throws FileSystemException {\n+\t\tif (isPooledConnection()) {\n+\t\t\topenPool();\n+\t\t} else {\n+\t\t\tglobalConnector = new Connector<>(createConnection(), null);\n+\t\t}\n+\t\tsuper.open();\n+\t}\n+\t\n+\t@Override\n+\tpublic void close() throws FileSystemException {\n+\t\ttry {\n+\t\t\tsuper.close();\n+\t\t} finally {\n+\t\t\tif (isPooledConnection()) {\n+\t\t\t\tclosePool();\n+\t\t\t} else {\n+\t\t\t\tif (globalConnector!=null) {\n+\t\t\t\t\tcloseConnection(globalConnector.getConnection());\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\n+\t/**\n+\t * Get the Connector from the thread, or a fresh one from the pool.\n+\t * At close(), it is returned to the pool, if it came from the pool; \n+\t * If it was allocated, it is just left allocated.\n+\t */\n+\tprotected Connector<C> getConnector() throws FileSystemException {\n+\t\ttry {\n+\t\t\treturn isPooledConnection() ? connectorPool.borrowObject() : globalConnector;\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new FileSystemException(\"Cannot get connector from pool\", e);\n+\t\t}\n+\t}\n+\t\n+\t/**\n+\t * Remove the connector from the pool, e.g. after it has been part of trouble.\n+\t */\n+\tprotected void invalidateConnector(Connector<C> connector) {\n+\t\ttry {\n+\t\t\tif (isPooledConnection()) {\n+\t\t\t\tconnectorPool.invalidateObject(connector);\n+\t\t\t} else {\n+\t\t\t\ttry {\n+\t\t\t\t\tcloseConnection(globalConnector.getConnection());\n+\t\t\t\t} finally {\n+\t\t\t\t\tglobalConnector = new Connector(createConnection(), null);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tlog.warn(\"Cannot invalidate connector\", e);\n+\t\t}\n+\t}\n+\n+\tprivate void openPool() {\n+\t\tif (connectorPool==null) {\n+\t\t\tconnectorPool=new GenericObjectPool<>(new BasePooledObjectFactory<Connector<C>>() {\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic Connector<C> create() throws Exception {\n+\t\t\t\t\treturn new Connector<C>(createConnection(), connectorPool);\n+\t\t\t\t}\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic PooledObject<Connector<C>> wrap(Connector<C> connector) {\n+\t\t\t\t\treturn new DefaultPooledObject<Connector<C>>(connector);\n+\t\t\t\t}\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic void destroyObject(PooledObject<Connector<C>> p) throws Exception {\n+\t\t\t\t\tcloseConnection(p.getObject().getConnection());\n+\t\t\t\t\tsuper.destroyObject(p);\n+\t\t\t\t}\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic void activateObject(PooledObject<Connector<C>> p) throws Exception {\n+\t\t\t\t\tsuper.activateObject(p);\n+\t\t\t\t\tp.getObject().setActive(true);\n+\t\t\t\t}\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic void passivateObject(PooledObject<Connector<C>> p) throws Exception {\n+\t\t\t\t\tsuper.passivateObject(p);\n+\t\t\t\t\tp.getObject().setActive(false);\n+\t\t\t\t}\n+\n+\t\t\t}); \n+\t\t}\n+\t}\n+\n+\tprivate void closePool() {\n+\t\ttry {\n+\t\t\tif (connectorPool!=null) {\n+\t\t\t\tconnectorPool.close();\n+\t\t\t\tconnectorPool=null;\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tlog.warn(\"exception clearing Pool\",e);", "originalCommit": "35234d7bec16899b4aa9d66eb82a74545812c079", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI5MjE1Nw==", "url": "https://github.com/ibissource/iaf/pull/1314#discussion_r542292157", "bodyText": "connectorPool refereert naar this toch?", "author": "nielsm5", "createdAt": "2020-12-14T10:55:09Z", "path": "core/src/main/java/nl/nn/adapterframework/filesystem/ConnectedFileSystemBase.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+   Copyright 2020 WeAreFrank!\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+ */\n+package nl.nn.adapterframework.filesystem;\n+\n+import org.apache.commons.pool2.BasePooledObjectFactory;\n+import org.apache.commons.pool2.ObjectPool;\n+import org.apache.commons.pool2.PooledObject;\n+import org.apache.commons.pool2.impl.DefaultPooledObject;\n+import org.apache.commons.pool2.impl.GenericObjectPool;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+/**\n+ * Baseclass for {@link IBasicFileSystem FileSystems} that use a 'Connection' to connect to their storage.\n+ * \n+ * @author Gerrit van Brakel\n+ *\n+ */\n+public abstract class ConnectedFileSystemBase<F,C> extends FileSystemBase<F> {\n+\n+\t// implementations that have a thread-safe connector can set pooledConnection = false to use a shared connection.\n+\tprivate @Setter @Getter boolean pooledConnection=true;\n+\t\n+\tprivate Connector<C> globalConnector;\n+\tprivate ObjectPool<Connector<C>> connectorPool;\n+\n+\tprotected abstract C createConnection() throws FileSystemException;\n+\t\n+\tprotected void closeConnection(C connection) throws FileSystemException {\n+\t\tif (connection instanceof AutoCloseable) {\n+\t\t\ttry {\n+\t\t\t\t((AutoCloseable) connection).close();\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tthrow new FileSystemException(e);\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t\n+\t@Override\n+\tpublic void open() throws FileSystemException {\n+\t\tif (isPooledConnection()) {\n+\t\t\topenPool();\n+\t\t} else {\n+\t\t\tglobalConnector = new Connector<>(createConnection(), null);\n+\t\t}\n+\t\tsuper.open();\n+\t}\n+\t\n+\t@Override\n+\tpublic void close() throws FileSystemException {\n+\t\ttry {\n+\t\t\tsuper.close();\n+\t\t} finally {\n+\t\t\tif (isPooledConnection()) {\n+\t\t\t\tclosePool();\n+\t\t\t} else {\n+\t\t\t\tif (globalConnector!=null) {\n+\t\t\t\t\tcloseConnection(globalConnector.getConnection());\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\n+\t/**\n+\t * Get the Connector from the thread, or a fresh one from the pool.\n+\t * At close(), it is returned to the pool, if it came from the pool; \n+\t * If it was allocated, it is just left allocated.\n+\t */\n+\tprotected Connector<C> getConnector() throws FileSystemException {\n+\t\ttry {\n+\t\t\treturn isPooledConnection() ? connectorPool.borrowObject() : globalConnector;\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new FileSystemException(\"Cannot get connector from pool\", e);\n+\t\t}\n+\t}\n+\t\n+\t/**\n+\t * Remove the connector from the pool, e.g. after it has been part of trouble.\n+\t */\n+\tprotected void invalidateConnector(Connector<C> connector) {\n+\t\ttry {\n+\t\t\tif (isPooledConnection()) {\n+\t\t\t\tconnectorPool.invalidateObject(connector);\n+\t\t\t} else {\n+\t\t\t\ttry {\n+\t\t\t\t\tcloseConnection(globalConnector.getConnection());\n+\t\t\t\t} finally {\n+\t\t\t\t\tglobalConnector = new Connector(createConnection(), null);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tlog.warn(\"Cannot invalidate connector\", e);\n+\t\t}\n+\t}\n+\n+\tprivate void openPool() {\n+\t\tif (connectorPool==null) {\n+\t\t\tconnectorPool=new GenericObjectPool<>(new BasePooledObjectFactory<Connector<C>>() {\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic Connector<C> create() throws Exception {\n+\t\t\t\t\treturn new Connector<C>(createConnection(), connectorPool);", "originalCommit": "35234d7bec16899b4aa9d66eb82a74545812c079", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI5MjcxMg==", "url": "https://github.com/ibissource/iaf/pull/1314#discussion_r542292712", "bodyText": "misschien is het handig om ook een constructor te hebben zonder ObjectPool, aangezien deze optioneel is..", "author": "nielsm5", "createdAt": "2020-12-14T10:56:00Z", "path": "core/src/main/java/nl/nn/adapterframework/filesystem/Connector.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+   Copyright 2020 WeAreFrank!\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+ */\n+package nl.nn.adapterframework.filesystem;\n+\n+import org.apache.commons.pool2.ObjectPool;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+/*\n+ * Wrapper around Connection, that returns it to pool at close().\n+ */\n+public class Connector<C> implements AutoCloseable {\n+\tprivate @Getter C connection;\n+\tprivate ObjectPool<Connector<C>> pool;\n+\tprivate @Getter @Setter boolean active;\n+\t\n+\tpublic Connector(C connection, ObjectPool<Connector<C>> pool) {", "originalCommit": "35234d7bec16899b4aa9d66eb82a74545812c079", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwMDc1Ng==", "url": "https://github.com/ibissource/iaf/pull/1314#discussion_r542300756", "bodyText": "Moet hij ook gesloten worden?", "author": "nielsm5", "createdAt": "2020-12-14T11:08:51Z", "path": "core/src/main/java/nl/nn/adapterframework/filesystem/ExchangeFileSystem.java", "diffHunk": "@@ -338,10 +361,15 @@ public EmailMessage next() {\n \t\t\t\t\t\treturn (EmailMessage)itemIterator.next();\n \t\t\t\t\t}\n \t\t\t\t\t\n-\t\t\t\t});\n+\t\t\t\t}, connector);\n \t\t\t}\n \t\t} catch (Exception e) {\n-\t\t\tthrow new FileSystemException(\"Cannot list messages in folder [\"+folder+\"]\", e);\n+\t\t\ttry {\n+\t\t\t\tinvalidateConnector(connector);\n+\t\t\t\tconnector.close();", "originalCommit": "35234d7bec16899b4aa9d66eb82a74545812c079", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMzNjU3MA==", "url": "https://github.com/ibissource/iaf/pull/1314#discussion_r542336570", "bodyText": "niet backwards compatible?", "author": "nielsm5", "createdAt": "2020-12-14T12:11:34Z", "path": "core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemListener.java", "diffHunk": "@@ -483,12 +484,12 @@ public long getMinStableTime() {\n \t\treturn minStableTime;\n \t}\n \n-\t@IbisDoc({\"14\", \"Property to use as messageId. If not set, the filename of the file as it was received in the inputFolder is used as the messageId\", \"for MailFileSystems: Message-ID\"})\n-\tpublic void setMessageIdProperty(String messageIdProperty) {\n-\t\tthis.messageIdProperty = messageIdProperty;\n+\t@IbisDoc({\"14\", \"Key of Property to use as messageId. If not set, the filename of the file as it was received in the inputFolder is used as the messageId\", \"for MailFileSystems: Message-ID\"})\n+\tpublic void setMessageIdPropertyKey(String messageIdPropertyKey) {", "originalCommit": "35234d7bec16899b4aa9d66eb82a74545812c079", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIyMTQ0MQ==", "url": "https://github.com/ibissource/iaf/pull/1314#discussion_r543221441", "bodyText": "Niet nodig, dit attribuut is nog niet zo oud", "author": "gvanbrakel", "createdAt": "2020-12-15T10:23:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMzNjU3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQyNDcwNw==", "url": "https://github.com/ibissource/iaf/pull/1314#discussion_r542424707", "bodyText": "Kan je dit niet beter CloseAfterRead noemen ofzo?", "author": "nielsm5", "createdAt": "2020-12-14T14:27:02Z", "path": "core/src/main/java/nl/nn/adapterframework/util/StreamUtil.java", "diffHunk": "@@ -218,4 +219,59 @@ public static ZipOutputStream openZipDownload(HttpServletResponse response, Stri\n \t\treturn zipOutputStream;\n \t}\n \n+\tpublic static InputStream closeOnClose(InputStream stream, AutoCloseable resource) {", "originalCommit": "35234d7bec16899b4aa9d66eb82a74545812c079", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d495a21963bec72c507647f22da2e1bf6ad38223", "url": "https://github.com/ibissource/iaf/commit/d495a21963bec72c507647f22da2e1bf6ad38223", "message": "Simplify connection handling", "committedDate": "2020-12-15T10:34:21Z", "type": "commit"}]}