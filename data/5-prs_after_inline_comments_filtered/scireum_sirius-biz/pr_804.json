{"pr_number": 804, "pr_title": "BREAKING CHANGE: Improves extending ImportHandlers and refactors the Metrics API", "pr_createdAt": "2020-07-02T10:21:10Z", "pr_url": "https://github.com/scireum/sirius-biz/pull/804", "timeline": [{"oid": "05c90bc09d0bef7a45d9b47eb35ce0a46de7f051", "url": "https://github.com/scireum/sirius-biz/commit/05c90bc09d0bef7a45d9b47eb35ce0a46de7f051", "message": "Improves the logging and documentation for troubleshooting.", "committedDate": "2020-07-02T09:48:43Z", "type": "commit"}, {"oid": "68090d4fe46bfa9f2dfbb980d5d3ac5de6ac5486", "url": "https://github.com/scireum/sirius-biz/commit/68090d4fe46bfa9f2dfbb980d5d3ac5de6ac5486", "message": "Fixes JavaDocs.", "committedDate": "2020-07-02T09:48:56Z", "type": "commit"}, {"oid": "3df967258e6f9ba7a44035d0af82d0945ebf1870", "url": "https://github.com/scireum/sirius-biz/commit/3df967258e6f9ba7a44035d0af82d0945ebf1870", "message": "Uses a more flexible method signature for extractors.\n\nThese callbacks are required to extract a value from an entity\nwhen performing an export. As some extractors not only operate\non the entity itself but on additional data structures, we need to\nrelax the type here a little.", "committedDate": "2020-07-02T09:51:59Z", "type": "commit"}, {"oid": "fcb89e44f1069ea38529b15b71d95484904fa5e1", "url": "https://github.com/scireum/sirius-biz/commit/fcb89e44f1069ea38529b15b71d95484904fa5e1", "message": "Delegates resolving custom / computed fields to EntityImportHandlerExtenders.\n\nAn EntityImportHandlerExtender can provide additional mappings to export.\nIn order to resolve these mappings into fields (for the docs and also to generate\ncolumn labels), we have to also resolve them into a FieldDefinition - therefore\nwe have to also delegate this task to the EntityImportHandlerExtender.", "committedDate": "2020-07-02T10:00:48Z", "type": "commit"}, {"oid": "16757e434d8513a4f50e9ff8b62bd786c276db32", "url": "https://github.com/scireum/sirius-biz/commit/16757e434d8513a4f50e9ff8b62bd786c276db32", "message": "Permits to attach multiple customFieldHandlers.\n\nAn BaseImportHandler will always register itself as\ncustom field provider (to invoke its EntityImportHandlerExtenders)\nand also the ExportJob will register itself to provide even more ways\nof extending the output. Therefore we need to support multiple\nhandlers.", "committedDate": "2020-07-02T10:02:26Z", "type": "commit"}, {"oid": "c96d6dc03694cb11bb823988b9558e13fc90ff7f", "url": "https://github.com/scireum/sirius-biz/commit/c96d6dc03694cb11bb823988b9558e13fc90ff7f", "message": "Improves the exports of performance flags.\n\nWe now use a custom mapping to completely hide the\ninternal implementation (previously the \"flags\" field was\nshown as numeric instead as string list).", "committedDate": "2020-07-02T10:06:42Z", "type": "commit"}, {"oid": "a041199022397f36c5d1f4cfbdeaf1be0e8f499e", "url": "https://github.com/scireum/sirius-biz/commit/a041199022397f36c5d1f4cfbdeaf1be0e8f499e", "message": "Code formatting.", "committedDate": "2020-07-02T10:07:04Z", "type": "commit"}, {"oid": "ee8931cb99b55cb971cae37dc0ca88e2059f1b66", "url": "https://github.com/scireum/sirius-biz/commit/ee8931cb99b55cb971cae37dc0ca88e2059f1b66", "message": "Sorts properties alphabetically - no other changes..", "committedDate": "2020-07-02T10:08:31Z", "type": "commit"}, {"oid": "41ba792908755682254f42b18489bfe5894f0cad", "url": "https://github.com/scireum/sirius-biz/commit/41ba792908755682254f42b18489bfe5894f0cad", "message": "BREAKING: Refactors the metrics framework to use a fluent query API.\n\nThe heavily reduces the amount of single methods required to build\nvarious common queries.\n\nAlso a fast lookup cache is now installed so further speed up the framework\nfor common queries.", "committedDate": "2020-07-02T10:11:10Z", "type": "commit"}, {"oid": "b4728af84ae75b60baaf9cfb7ab7fb8a70ff1142", "url": "https://github.com/scireum/sirius-biz/commit/b4728af84ae75b60baaf9cfb7ab7fb8a70ff1142", "message": "Makes tenants support performance flags.", "committedDate": "2020-07-02T10:12:10Z", "type": "commit"}, {"oid": "ba693b17403152ec0b7d6ae5b32ca0e4f1fe467e", "url": "https://github.com/scireum/sirius-biz/commit/ba693b17403152ec0b7d6ae5b32ca0e4f1fe467e", "message": "Fixes an IllegalStateException by providing a WebContext before building filters.", "committedDate": "2020-07-02T10:12:35Z", "type": "commit"}, {"oid": "186dd0f27b46b8d9d9abadc15c42b799b2c03e1c", "url": "https://github.com/scireum/sirius-biz/commit/186dd0f27b46b8d9d9abadc15c42b799b2c03e1c", "message": "Merge remote-tracking branch 'origin/master' into aha/yet-another-analytics-fix", "committedDate": "2020-07-02T10:20:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwNjY3Nw==", "url": "https://github.com/scireum/sirius-biz/pull/804#discussion_r448906677", "bodyText": "typo: collectExcactLookups", "author": "sabieber", "createdAt": "2020-07-02T10:31:01Z", "path": "src/main/java/sirius/biz/tenants/mongo/MongoUserAccountImportHandler.java", "diffHunk": "@@ -60,6 +62,11 @@ protected MongoUserAccountImportHandler(Class<?> clazz, ImporterContext context)\n         super(clazz, context);\n     }\n \n+    @Override\n+    protected void collectExcactLookups(Consumer<List<Mapping>> filterListConsumer) {\n+        super.collectExcactLookups(filterListConsumer);", "originalCommit": "c96d6dc03694cb11bb823988b9558e13fc90ff7f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwODAwMA==", "url": "https://github.com/scireum/sirius-biz/pull/804#discussion_r448908000", "bodyText": "sure?", "author": "sabieber", "createdAt": "2020-07-02T10:33:43Z", "path": "src/main/java/sirius/biz/analytics/metrics/MetricQuery.java", "diffHunk": "@@ -0,0 +1,350 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.analytics.metrics;\n+\n+import sirius.db.mixing.BaseEntity;\n+\n+import javax.annotation.CheckReturnValue;\n+import java.time.LocalDate;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Provides a fluent API to create and execute queries against the metrics database.\n+ */\n+public class MetricQuery {\n+\n+    /**\n+     * Specifies the maximal number of values returned for daily metrics.\n+     */\n+    public static final int MAX_DAILY_METRICS = 400;\n+\n+    /**\n+     * Specifies the maximal number of values returned for monthly metrics.\n+     */\n+    public static final int MAX_MONTHLY_METRICS = 100;\n+\n+    /**\n+     * Specifies the maximal number of values returned for yearly metrics.\n+     */\n+    public static final int MAX_YEARLY_METRICS = 100;\n+\n+    protected enum Interval {\n+        YEARLY, MONTHLY, DAILY, FACT\n+    }\n+\n+    private final BasicMetrics<?> metrics;\n+    private String metricName;\n+    private String targetType;\n+    private String targetId;\n+    private Interval interval;\n+\n+    protected MetricQuery(BasicMetrics<?> metrics) {\n+        this.metrics = metrics;\n+    }\n+\n+    /**\n+     * Queries the yearly metric with the given name.\n+     *\n+     * @param name the metric to query\n+     * @return the query itself for fluent method calls\n+     */\n+    @CheckReturnValue\n+    public MetricQuery yearly(String name) {\n+        this.metricName = name;\n+        this.interval = Interval.YEARLY;\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Queries the monthly metric with the given name.\n+     *\n+     * @param name the metric to query\n+     * @return the query itself for fluent method calls\n+     */\n+    @CheckReturnValue\n+    public MetricQuery monthly(String name) {\n+        this.metricName = name;\n+        this.interval = Interval.MONTHLY;\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Queries the daily metric with the given name.\n+     *\n+     * @param name the metric to query\n+     * @return the query itself for fluent method calls\n+     */\n+    @CheckReturnValue\n+    public MetricQuery daily(String name) {\n+        this.metricName = name;\n+        this.interval = Interval.DAILY;\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Queries the fact with the given name.\n+     *\n+     * @param name the metric to query\n+     * @return the query itself for fluent method calls\n+     */\n+    @CheckReturnValue\n+    public MetricQuery fact(String name) {\n+        this.metricName = name;\n+        this.interval = Interval.FACT;\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Speficies the object to query metrics for.\n+     *\n+     * @param targetType the type of the entity to query metrics for\n+     * @param targetId   the id of the entity to query metrics for\n+     * @return the query itself for fluent method calls\n+     */\n+    @CheckReturnValue\n+    public MetricQuery of(String targetType, String targetId) {\n+        this.targetType = targetType;\n+        this.targetId = targetId;\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Specifies the entity to query metrics for.\n+     *\n+     * @param entity the entity to query metrics for\n+     * @return the query itself for fluent method calls\n+     */\n+    @CheckReturnValue\n+    public MetricQuery of(BaseEntity<?> entity) {\n+        return of(entity.getTypeName(), entity.getIdAsString());\n+    }\n+\n+    /**\n+     * Specifies that global metrics (not associated to an entity but rather system wide values) should be queried.\n+     *\n+     * @return the query itself for fluent method calls\n+     */\n+    @CheckReturnValue\n+    public MetricQuery global() {\n+        return of(BasicMetrics.GLOBAL, BasicMetrics.GLOBAL);\n+    }\n+\n+    /**\n+     * Fetches all metrics starting from the <tt>startDate</tt> up until the <tt>untilDate</tt> is reached.\n+     *\n+     * @param startDate the first date to fetch metrics for\n+     * @param untilDate the last date to fetch metrics for\n+     * @return the list of metrics fetched for the given period. Note that there are internal circuit breakers in case\n+     * too many metrics would be requested. In this case a limited list is returned.\n+     */\n+    public List<Integer> values(LocalDate startDate, LocalDate untilDate) {\n+        assertParametersArePresent();\n+        List<Integer> result = new ArrayList<>();\n+        LocalDate date = startDate;\n+        LocalDate endDate = untilDate == null ? LocalDate.now() : untilDate;\n+        AtomicInteger limit = new AtomicInteger(determineLimit(interval));\n+        while (!date.isAfter(endDate) && limit.decrementAndGet() > 0) {\n+            result.add(metrics.executeQuery(interval,\n+                                            targetType,\n+                                            targetId,\n+                                            metricName,\n+                                            date.getYear(),\n+                                            date.getMonthValue(),\n+                                            date.getDayOfMonth()).orElse(0));\n+            date = increment(date, interval);\n+        }\n+\n+        return result;\n+    }\n+\n+    private void assertParametersArePresent() {\n+        if (interval == null) {\n+            throw new IllegalStateException(\"No interval has been chosen for the metric query: \" + this);\n+        }\n+        if (targetType == null) {\n+            throw new IllegalStateException(\"No targetType has been chosen for the metric query: \" + this);\n+        }\n+        if (targetId == null) {\n+            throw new IllegalStateException(\"No targetId has been chosen for the metric query: \" + this);\n+        }\n+    }\n+\n+    /**\n+     * Fetches the requested number of metrics starting from the <tt>startDate</tt>.\n+     *\n+     * @param startDate      the first date to fetch metrics for\n+     * @param numberOfValues the number of metrics to fetch\n+     * @return the list of metrics fetched for the given period. Note that there are internal circuit breakers in case\n+     * too many metrics would be requested. In this case a limited list is returned.\n+     */\n+    public List<Integer> valuesFrom(LocalDate startDate, int numberOfValues) {\n+        assertParametersArePresent();\n+        List<Integer> result = new ArrayList<>();\n+        LocalDate date = startDate;\n+        AtomicInteger limit = new AtomicInteger(Math.min(numberOfValues, determineLimit(interval)));\n+        while (limit.decrementAndGet() > 0) {\n+            result.add(metrics.executeQuery(interval,\n+                                            targetType,\n+                                            targetId,\n+                                            metricName,\n+                                            date.getYear(),\n+                                            date.getMonthValue(),\n+                                            date.getDayOfMonth()).orElse(0));\n+            date = increment(date, interval);\n+        }\n+\n+        return result;\n+    }\n+\n+    /**\n+     * Fetches the requested number of metrics up until the <tt>endDate</tt>.\n+     *\n+     * @param endDate        the last date to fetch metrics for\n+     * @param numberOfValues the number of metrics to fetch (before the given end date)\n+     * @return the list of metrics fetched for the given period (sorted by date ascending).\n+     * Note that there are internal circuit breakers in case too many metrics would be requested.\n+     * In this case a limited list is returned.\n+     */\n+    public List<Integer> valuesUntil(LocalDate endDate, int numberOfValues) {\n+        assertParametersArePresent();\n+        List<Integer> result = new ArrayList<>();\n+        LocalDate date = endDate;\n+        AtomicInteger limit = new AtomicInteger(Math.min(numberOfValues, determineLimit(interval)));\n+        while (limit.decrementAndGet() > 0) {\n+            result.add(0,\n+                       metrics.executeQuery(interval,\n+                                            targetType,\n+                                            targetId,\n+                                            metricName,\n+                                            date.getYear(),\n+                                            date.getMonthValue(),\n+                                            date.getDayOfMonth()).orElse(0));\n+            date = decrement(date, interval);\n+        }\n+\n+        return result;\n+    }\n+\n+    private LocalDate increment(LocalDate date, Interval interval) {\n+        switch (interval) {\n+            case DAILY:\n+                return date.plusDays(1);\n+            case MONTHLY:\n+                return date.plusMonths(1);\n+            case YEARLY:\n+                return date.plusYears(1);\n+            default:\n+                return date.plusYears(999);\n+        }\n+    }\n+\n+    private LocalDate decrement(LocalDate date, Interval interval) {\n+        switch (interval) {\n+            case DAILY:\n+                return LocalDate.now().minusDays(1);\n+            case MONTHLY:\n+                return LocalDate.now().minusMonths(1);\n+            case YEARLY:\n+                return LocalDate.now().minusYears(1);\n+            case FACT:\n+                return date.minusYears(999);\n+            default:\n+                return date.plusYears(999);", "originalCommit": "41ba792908755682254f42b18489bfe5894f0cad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "83eef4a654b927140235c625008af14102bef236", "url": "https://github.com/scireum/sirius-biz/commit/83eef4a654b927140235c625008af14102bef236", "message": "Removes an accidentally committed method.", "committedDate": "2020-07-02T10:42:04Z", "type": "commit"}, {"oid": "86d7d16c8e6546f07f23d726b6c6455aec09f38d", "url": "https://github.com/scireum/sirius-biz/commit/86d7d16c8e6546f07f23d726b6c6455aec09f38d", "message": "Apply suggestions from code review\n\nCo-authored-by: Sascha Bieberstein <sabieber@users.noreply.github.com>", "committedDate": "2020-07-02T10:46:39Z", "type": "commit"}, {"oid": "13f04d0c4d53a02f5014254df4e8cbce62ad186d", "url": "https://github.com/scireum/sirius-biz/commit/13f04d0c4d53a02f5014254df4e8cbce62ad186d", "message": "Fixes an arithemtic bug and adds some clarifying comments.", "committedDate": "2020-07-02T10:48:56Z", "type": "commit"}, {"oid": "ee83409db98512712ff11251cc89e43186ae2da2", "url": "https://github.com/scireum/sirius-biz/commit/ee83409db98512712ff11251cc89e43186ae2da2", "message": "Merge branch 'aha/yet-another-analytics-fix' of https://github.com/scireum/sirius-biz into aha/yet-another-analytics-fix", "committedDate": "2020-07-02T10:49:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwODE1NQ==", "url": "https://github.com/scireum/sirius-biz/pull/804#discussion_r448908155", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @param <Q> the query type used to retireve entities being processed by this emitter\n          \n          \n            \n             * @param <Q> the query type used to retrieve entities being processed by this emitter", "author": "mkeckmkeck", "createdAt": "2020-07-02T10:34:02Z", "path": "src/main/java/sirius/biz/analytics/scheduler/BaseEntityBatchEmitter.java", "diffHunk": "@@ -27,6 +27,11 @@\n  * <p>\n  * These batches are described using JSON and can be evaluated into an iterator of entities using\n  * {@link #evaluateBatch(JSONObject, Consumer, Consumer)}.\n+ *\n+ * @param <I> the id type of the entities being processed by this emitter\n+ * @param <C> the constraint type to be applied on entities processed by this emitter\n+ * @param <B> the entity type being processed by this emitter\n+ * @param <Q> the query type used to retireve entities being processed by this emitter", "originalCommit": "68090d4fe46bfa9f2dfbb980d5d3ac5de6ac5486", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkxMzA2Nw==", "url": "https://github.com/scireum/sirius-biz/pull/804#discussion_r448913067", "bodyText": "Rename to computedFieldLookups ?", "author": "mkeckmkeck", "createdAt": "2020-07-02T10:43:50Z", "path": "src/main/java/sirius/biz/importer/format/ImportDictionary.java", "diffHunk": "@@ -61,7 +60,7 @@\n     private Map<String, FieldDefinition> fields = new LinkedHashMap<>();\n     private Map<String, String> aliases = new LinkedHashMap<>();\n     private List<String> mappingFunction;\n-    private Function<String, FieldDefinition> computedFieldLookup;\n+    private List<Function<String, FieldDefinition>> computedFieldLookup = new ArrayList<>();", "originalCommit": "16757e434d8513a4f50e9ff8b62bd786c276db32", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkyNzQ4Nw==", "url": "https://github.com/scireum/sirius-biz/pull/804#discussion_r448927487", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Resolves an field into a <tt>FieldDefinition</tt>.\n          \n          \n            \n                 * Resolves a field into a <tt>FieldDefinition</tt>.", "author": "idlira", "createdAt": "2020-07-02T11:14:05Z", "path": "src/main/java/sirius/biz/importer/BaseImportHandler.java", "diffHunk": "@@ -369,18 +377,48 @@ protected FieldDefinition expandAliases(FieldDefinition field) {\n     @Override\n     public ImportDictionary getExportDictionary() {\n         ImportDictionary exportDictionary = new ImportDictionary();\n-        getExportableMappings().stream()\n-                               .map(descriptor::getProperty)\n-                               .map(property -> property.tryAs(FieldDefinitionSupplier.class)\n-                                                        .map(FieldDefinitionSupplier::get)\n-                                                        .orElse(null))\n-                               .filter(Objects::nonNull)\n-                               .map(this::expandAliases)\n-                               .forEach(exportDictionary::addField);\n+        exportDictionary.withCustomFieldLookup(this::findComputedField);\n+\n+        for (Mapping mapping : getExportableMappings()) {\n+            Property property = descriptor.findProperty(mapping.toString());\n+            if (property != null) {\n+                property.tryAs(FieldDefinitionSupplier.class)\n+                        .map(FieldDefinitionSupplier::get)\n+                        .map(this::expandAliases)\n+                        .ifPresent(exportDictionary::addField);\n+            } else {\n+                exportDictionary.findField(mapping.toString())\n+                                .map(this::expandAliases)\n+                                .ifPresent(exportDictionary::addField);\n+            }\n+        }\n \n         return exportDictionary;\n     }\n \n+    /**\n+     * Resolves an field into a <tt>FieldDefinition</tt>.", "originalCommit": "fcb89e44f1069ea38529b15b71d95484904fa5e1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "90ef1ecc4fd7bc881a0dd0f3d2cefaa309efd805", "url": "https://github.com/scireum/sirius-biz/commit/90ef1ecc4fd7bc881a0dd0f3d2cefaa309efd805", "message": "Apply suggestions from code review\n\nCo-authored-by: Matthias Keck <60612914+mkeckmkeck@users.noreply.github.com>\nCo-authored-by: Idevaldo De Lira <54799255+idlira@users.noreply.github.com>", "committedDate": "2020-07-02T11:29:17Z", "type": "commit"}, {"oid": "2d5648dd830532a126d4bf1ab65439b9a7917075", "url": "https://github.com/scireum/sirius-biz/commit/2d5648dd830532a126d4bf1ab65439b9a7917075", "message": "Uses a proper name for a field.", "committedDate": "2020-07-02T11:30:11Z", "type": "commit"}]}