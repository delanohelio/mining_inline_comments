{"pr_number": 926, "pr_title": "Handles creation, change and deletion of BlobSoftRef references", "pr_createdAt": "2020-11-26T13:39:49Z", "pr_url": "https://github.com/scireum/sirius-biz/pull/926", "timeline": [{"oid": "e3c9ec92bd4436fe4e23be45c5e4285cdd322bf0", "url": "https://github.com/scireum/sirius-biz/commit/e3c9ec92bd4436fe4e23be45c5e4285cdd322bf0", "message": "Changes the frequency to 15s for processing blobs to delete", "committedDate": "2020-11-26T13:33:02Z", "type": "commit"}, {"oid": "e3d9f468f1a6cd277c16674a3de69c422c502dff", "url": "https://github.com/scireum/sirius-biz/commit/e3d9f468f1a6cd277c16674a3de69c422c502dff", "message": "Includes a delete handler when creating a BlobSoftRef\n\nwhich indicates the action to perform on referenced entities\n\nFixes: OX-6076", "committedDate": "2020-11-26T13:33:24Z", "type": "commit"}, {"oid": "c8d5d7f59b867754ddbc50b5e4b9479cc4760ca3", "url": "https://github.com/scireum/sirius-biz/commit/c8d5d7f59b867754ddbc50b5e4b9479cc4760ca3", "message": "Register and execute delete handlers on referenced entities\n\nFixes: OX-6076", "committedDate": "2020-11-26T13:35:07Z", "type": "commit"}, {"oid": "796efb7f54c8ddd7b58dd9fe5da9d4b32503ba5d", "url": "https://github.com/scireum/sirius-biz/commit/796efb7f54c8ddd7b58dd9fe5da9d4b32503ba5d", "message": "Changes the frequency to 15s for processing blobs to delete\n\n(JDBC)", "committedDate": "2020-11-26T14:17:50Z", "type": "commit"}, {"oid": "2aa3eb999d50bc674fc302f45928250f2fa42201", "url": "https://github.com/scireum/sirius-biz/commit/2aa3eb999d50bc674fc302f45928250f2fa42201", "message": "Adds a flag indicating that the blob has been changed", "committedDate": "2020-11-26T15:32:28Z", "type": "commit"}, {"oid": "2acc70e14ca9f9411542b5b216d2fa6f09d3e0cb", "url": "https://github.com/scireum/sirius-biz/commit/2acc70e14ca9f9411542b5b216d2fa6f09d3e0cb", "message": "Defines an interface responsible to process changed blobs", "committedDate": "2020-11-26T15:33:16Z", "type": "commit"}, {"oid": "2cb7c4833628500eef6120bcd427f36c866d4498", "url": "https://github.com/scireum/sirius-biz/commit/2cb7c4833628500eef6120bcd427f36c866d4498", "message": "Adds a loop to process changed blobs using the registered handlers", "committedDate": "2020-11-26T15:33:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEwNzQ5Nw==", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531107497", "bodyText": "block delete handler of type Reject?", "author": "sabieber", "createdAt": "2020-11-26T15:37:51Z", "path": "src/main/java/sirius/biz/storage/layer2/BlobSoftRef.java", "diffHunk": "@@ -24,27 +25,31 @@\n public class BlobSoftRef extends BlobHardRef {\n \n     private final boolean supportsURL;\n+    private final BaseEntityRef.OnDelete deleteHandler;\n \n     private static final Pattern URL_PATTERN = Pattern.compile(\"^https?://\", Pattern.CASE_INSENSITIVE);\n \n     /**\n      * Creates a new reference for the given space.\n      *\n-     * @param space       the space to place referenced objects in\n-     * @param supportsURL if <tt>true</tt> a URL can also be used instead of an object key\n+     * @param space         the space to place referenced objects in\n+     * @param deleteHandler determines what happens if the referenced entity is deleted\n+     * @param supportsURL   if <tt>true</tt> a URL can also be used instead of an object key\n      */\n-    public BlobSoftRef(String space, boolean supportsURL) {\n+    public BlobSoftRef(String space, BaseEntityRef.OnDelete deleteHandler, boolean supportsURL) {\n         super(space);\n+        this.deleteHandler = deleteHandler;", "originalCommit": "e3d9f468f1a6cd277c16674a3de69c422c502dff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEwOTE0Mw==", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531109143", "bodyText": "I would actually throw the exception in the constructor of the ref so it gets thrown right as such a ref is introduced during development and not when a first deletion occurs (which might be during testing or in production)", "author": "sabieber", "createdAt": "2020-11-26T15:40:46Z", "path": "src/main/java/sirius/biz/storage/layer2/BlobSoftRefProperty.java", "diffHunk": "@@ -64,6 +87,122 @@ private BlobSoftRefProperty(@Nonnull EntityDescriptor descriptor,\n         super(descriptor, accessPath, field);\n     }\n \n+    /**\n+     * Returns the {@link EntityDescriptor} of the referenced entity.\n+     *\n+     * @return the referenced entity descriptor\n+     */\n+    public List<EntityDescriptor> getReferencedDescriptors() {\n+        if (referencedDescriptors == null) {\n+            if (blobSoftRef == null) {\n+                throw new IllegalStateException(\"Schema not linked!\");\n+            }\n+            referencedDescriptors.add(mixing.getDescriptor(MongoBlob.class));\n+            referencedDescriptors.add(mixing.getDescriptor(SQLBlob.class));\n+        }\n+\n+        return Collections.unmodifiableList(referencedDescriptors);\n+    }\n+\n+    private BlobSoftRef getBlobSoftRef() {\n+        if (blobSoftRef == null) {\n+            try {\n+                this.blobSoftRef = (BlobSoftRef) field.get(accessPath.apply(descriptor.getReferenceInstance()));\n+            } catch (Exception e) {\n+                throw Exceptions.handle()\n+                                .to(Mixing.LOG)\n+                                .error(e)\n+                                .withSystemErrorMessage(\n+                                        \"Unable to obtain a BlobSoftRef object from entity ref field ('%s' in '%s'): %s (%s)\",\n+                                        getName(),\n+                                        descriptor.getType().getName())\n+                                .handle();\n+            }\n+        }\n+\n+        return blobSoftRef;\n+    }\n+\n+    @Override\n+    protected void link() {\n+        super.link();\n+\n+        try {\n+            BaseEntityRef.OnDelete deleteHandler = getBlobSoftRef().getDeleteHandler();\n+\n+            if (deleteHandler == BaseEntityRef.OnDelete.CASCADE) {\n+                getReferencedDescriptors().forEach(entityDescriptor -> entityDescriptor.addCascadeDeleteHandler(this::onDeleteCascade));\n+            } else if (deleteHandler == BaseEntityRef.OnDelete.SET_NULL) {\n+                if (!isNullable()) {\n+                    Mixing.LOG.WARN(\"Error in property %s of %s: The field is not marked as NullAllowed,\"\n+                                    + \" therefore SET_NULL is not a valid delete handler!\", this, getDescriptor());\n+                }\n+\n+                getReferencedDescriptors().forEach(entityDescriptor -> entityDescriptor.addCascadeDeleteHandler(this::onDeleteSetNull));\n+            } else if (deleteHandler == BaseEntityRef.OnDelete.REJECT) {\n+                throw new IllegalArgumentException(\"BlobSoftRef references do not accept REJECT as deleteHandler.\");", "originalCommit": "c8d5d7f59b867754ddbc50b5e4b9479cc4760ca3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTExMDU1Mw==", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531110553", "bodyText": "FIFTHEEN -> FIFTEEN", "author": "sabieber", "createdAt": "2020-11-26T15:43:22Z", "path": "src/main/java/sirius/biz/storage/layer2/mongo/ProcessChangedEntitiesLoop.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer2.mongo;\n+\n+import sirius.biz.storage.util.StorageUtils;\n+import sirius.db.mongo.Mango;\n+import sirius.db.mongo.Mongo;\n+import sirius.kernel.async.BackgroundLoop;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.PriorityParts;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Processes {@link MongoBlob blobs} which have been marked as changed.\n+ * <p>\n+ * The actual processing is performed by the predefined {@link MongoBlobChangeHandler handlers}\n+ */\n+@Register(framework = MongoBlobStorage.FRAMEWORK_MONGO_BLOB_STORAGE)\n+public class ProcessChangedEntitiesLoop extends BackgroundLoop {\n+\n+    private static final double FREQUENCY_EVERY_FIFTHEEN_SECONDS = 1 / 15d;", "originalCommit": "2cb7c4833628500eef6120bcd427f36c866d4498", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTExMTE2Ng==", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531111166", "bodyText": "Maybe include the word Blob in the Class Name and the Loop getName?", "author": "sabieber", "createdAt": "2020-11-26T15:44:30Z", "path": "src/main/java/sirius/biz/storage/layer2/mongo/ProcessChangedEntitiesLoop.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer2.mongo;\n+\n+import sirius.biz.storage.util.StorageUtils;\n+import sirius.db.mongo.Mango;\n+import sirius.db.mongo.Mongo;\n+import sirius.kernel.async.BackgroundLoop;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.PriorityParts;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Processes {@link MongoBlob blobs} which have been marked as changed.\n+ * <p>\n+ * The actual processing is performed by the predefined {@link MongoBlobChangeHandler handlers}\n+ */\n+@Register(framework = MongoBlobStorage.FRAMEWORK_MONGO_BLOB_STORAGE)\n+public class ProcessChangedEntitiesLoop extends BackgroundLoop {", "originalCommit": "2cb7c4833628500eef6120bcd427f36c866d4498", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTExMzYzMQ==", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531113631", "bodyText": "Makes perfectly sense.\n@andyHa : OK to change the delete loop to match this naming?", "author": "idlira", "createdAt": "2020-11-26T15:48:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTExMTE2Ng=="}], "type": "inlineReview"}, {"oid": "27431ea8ee8116cacb8465e3353a8ff7a25ec899", "url": "https://github.com/scireum/sirius-biz/commit/27431ea8ee8116cacb8465e3353a8ff7a25ec899", "message": "Corrects typo", "committedDate": "2020-11-26T15:55:02Z", "type": "commit"}, {"oid": "96f80114f4c6cc3605311d4f1135b39fad06a8f4", "url": "https://github.com/scireum/sirius-biz/commit/96f80114f4c6cc3605311d4f1135b39fad06a8f4", "message": "Moves place where a valid handler is validated", "committedDate": "2020-11-26T16:00:10Z", "type": "commit"}, {"oid": "c882ffc711b5c49122cba631c0ea8cecc171e3ae", "url": "https://github.com/scireum/sirius-biz/commit/c882ffc711b5c49122cba631c0ea8cecc171e3ae", "message": "Renames the blob loops (Entities -> Blobs)", "committedDate": "2020-11-26T16:02:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEyMzE5OQ==", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531123199", "bodyText": "i think the config values for orchestration of the new loops is missing in the component-biz.conf", "author": "sabieber", "createdAt": "2020-11-26T16:05:51Z", "path": "src/main/java/sirius/biz/storage/layer2/jdbc/RemoveDeletedBlobsLoop.java", "diffHunk": "@@ -35,7 +35,7 @@\n     @Nonnull\n     @Override\n     public String getName() {\n-        return \"storage-layer2-delete\";\n+        return \"storage-layer2-blob-delete\";", "originalCommit": "c882ffc711b5c49122cba631c0ea8cecc171e3ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQzOTQ3NA==", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531439474", "bodyText": "why rename this - layer2 only operates on blobs", "author": "andyHa", "createdAt": "2020-11-27T08:10:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEyMzE5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ0MDYyMg==", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531440622", "bodyText": "maybe we should extract common parts of the Mongo and JDBC impl and put them into a common base class.", "author": "andyHa", "createdAt": "2020-11-27T08:12:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEyMzE5OQ=="}], "type": "inlineReview"}, {"oid": "f2a7951deec3c5b3a336083be06dd1d8f043d597", "url": "https://github.com/scireum/sirius-biz/commit/f2a7951deec3c5b3a336083be06dd1d8f043d597", "message": "Adjusts the new and renamed loop in the configuration", "committedDate": "2020-11-26T16:09:25Z", "type": "commit"}, {"oid": "e0eda483ed3cee82a70212aca6de7adcc6390d39", "url": "https://github.com/scireum/sirius-biz/commit/e0eda483ed3cee82a70212aca6de7adcc6390d39", "message": "Annotates the blob parameter as Nonnull", "committedDate": "2020-11-26T16:24:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQzNzM1Ng==", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531437356", "bodyText": "list accepted values", "author": "andyHa", "createdAt": "2020-11-27T08:05:21Z", "path": "src/main/java/sirius/biz/storage/layer2/BlobSoftRef.java", "diffHunk": "@@ -24,27 +25,34 @@\n public class BlobSoftRef extends BlobHardRef {\n \n     private final boolean supportsURL;\n+    private final BaseEntityRef.OnDelete deleteHandler;\n \n     private static final Pattern URL_PATTERN = Pattern.compile(\"^https?://\", Pattern.CASE_INSENSITIVE);\n \n     /**\n      * Creates a new reference for the given space.\n      *\n-     * @param space       the space to place referenced objects in\n-     * @param supportsURL if <tt>true</tt> a URL can also be used instead of an object key\n+     * @param space         the space to place referenced objects in\n+     * @param deleteHandler determines what happens if the referenced entity is deleted", "originalCommit": "e0eda483ed3cee82a70212aca6de7adcc6390d39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQzNzgzMw==", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531437833", "bodyText": "why?", "author": "andyHa", "createdAt": "2020-11-27T08:06:31Z", "path": "src/main/java/sirius/biz/storage/layer2/BlobSoftRefProperty.java", "diffHunk": "@@ -64,6 +87,120 @@ private BlobSoftRefProperty(@Nonnull EntityDescriptor descriptor,\n         super(descriptor, accessPath, field);\n     }\n \n+    /**\n+     * Returns the {@link EntityDescriptor} of the referenced entity.\n+     *\n+     * @return the referenced entity descriptor\n+     */\n+    public List<EntityDescriptor> getReferencedDescriptors() {\n+        if (referencedDescriptors == null) {\n+            if (blobSoftRef == null) {\n+                throw new IllegalStateException(\"Schema not linked!\");\n+            }\n+            referencedDescriptors.add(mixing.getDescriptor(MongoBlob.class));", "originalCommit": "e0eda483ed3cee82a70212aca6de7adcc6390d39", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ0ODkwOQ==", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531448909", "bodyText": "private void forEachBlobType(Consumer callback) {\nif (sql framework enabled) {\ncallback.accept(mixing.getDescriptor(SQLBlob.class));\n}\n.. mongo\n}", "author": "andyHa", "createdAt": "2020-11-27T08:29:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQzNzgzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQzOTAwNg==", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531439006", "bodyText": "no need to cast on the DB impl here - Blob.getBlobKey() is abstract", "author": "andyHa", "createdAt": "2020-11-27T08:09:08Z", "path": "src/main/java/sirius/biz/storage/layer2/BlobSoftRefProperty.java", "diffHunk": "@@ -64,6 +87,120 @@ private BlobSoftRefProperty(@Nonnull EntityDescriptor descriptor,\n         super(descriptor, accessPath, field);\n     }\n \n+    /**\n+     * Returns the {@link EntityDescriptor} of the referenced entity.\n+     *\n+     * @return the referenced entity descriptor\n+     */\n+    public List<EntityDescriptor> getReferencedDescriptors() {\n+        if (referencedDescriptors == null) {\n+            if (blobSoftRef == null) {\n+                throw new IllegalStateException(\"Schema not linked!\");\n+            }\n+            referencedDescriptors.add(mixing.getDescriptor(MongoBlob.class));\n+            referencedDescriptors.add(mixing.getDescriptor(SQLBlob.class));\n+        }\n+\n+        return Collections.unmodifiableList(referencedDescriptors);\n+    }\n+\n+    private BlobSoftRef getBlobSoftRef() {\n+        if (blobSoftRef == null) {\n+            try {\n+                this.blobSoftRef = (BlobSoftRef) field.get(accessPath.apply(descriptor.getReferenceInstance()));\n+            } catch (Exception e) {\n+                throw Exceptions.handle()\n+                                .to(Mixing.LOG)\n+                                .error(e)\n+                                .withSystemErrorMessage(\n+                                        \"Unable to obtain a BlobSoftRef object from entity ref field ('%s' in '%s'): %s (%s)\",\n+                                        getName(),\n+                                        descriptor.getType().getName())\n+                                .handle();\n+            }\n+        }\n+\n+        return blobSoftRef;\n+    }\n+\n+    @Override\n+    protected void link() {\n+        super.link();\n+\n+        try {\n+            BaseEntityRef.OnDelete deleteHandler = getBlobSoftRef().getDeleteHandler();\n+\n+            if (deleteHandler == BaseEntityRef.OnDelete.CASCADE) {\n+                getReferencedDescriptors().forEach(entityDescriptor -> entityDescriptor.addCascadeDeleteHandler(this::onDeleteCascade));\n+            } else if (deleteHandler == BaseEntityRef.OnDelete.SET_NULL) {\n+                if (!isNullable()) {\n+                    Mixing.LOG.WARN(\"Error in property %s of %s: The field is not marked as NullAllowed,\"\n+                                    + \" therefore SET_NULL is not a valid delete handler!\", this, getDescriptor());\n+                }\n+\n+                getReferencedDescriptors().forEach(entityDescriptor -> entityDescriptor.addCascadeDeleteHandler(this::onDeleteSetNull));\n+            }\n+        } catch (Exception e) {\n+            Mixing.LOG.WARN(\"Error when linking property %s of %s: %s (%s)\",\n+                            this,\n+                            getDescriptor(),\n+                            e.getMessage(),\n+                            e.getClass().getSimpleName());\n+        }\n+    }\n+\n+    protected void onDeleteCascade(Object entity) {\n+        TaskContext taskContext = TaskContext.get();\n+\n+        taskContext.smartLogLimited(() -> NLS.fmtr(\"BaseEntityRefProperty.cascadeDelete\")\n+                                             .set(PARAM_TYPE, getDescriptor().getPluralLabel())\n+                                             .set(PARAM_OWNER, Strings.limit(entity, 30))\n+                                             .set(PARAM_FIELD, getLabel())\n+                                             .format());\n+\n+        processReferenceInstances(entity, reference -> cascadeDelete(taskContext, reference));\n+    }\n+\n+    private void cascadeDelete(TaskContext taskContext, BaseEntity<?> other) {\n+        Watch watch = Watch.start();\n+        other.getMapper().delete(other);\n+        taskContext.addTiming(NLS.get(\"BaseEntityRefProperty.cascadedDelete\"), watch.elapsedMillis(), true);\n+    }\n+\n+    protected void onDeleteSetNull(Object entity) {\n+        TaskContext taskContext = TaskContext.get();\n+        taskContext.smartLogLimited(() -> NLS.fmtr(\"BaseEntityRefProperty.cascadeSetNull\")\n+                                             .set(PARAM_TYPE, getDescriptor().getPluralLabel())\n+                                             .set(PARAM_OWNER, Strings.limit(entity, 30))\n+                                             .set(PARAM_FIELD, getLabel())\n+                                             .format());\n+\n+        processReferenceInstances(entity, reference -> cascadeSetNull(taskContext, reference));\n+    }\n+\n+    private void processReferenceInstances(Object entity, Consumer<BaseEntity<?>> handler) {\n+        BaseEntity<?> referenceInstance = (BaseEntity<?>) getDescriptor().getReferenceInstance();\n+        if (entity instanceof MongoBlob) {", "originalCommit": "e0eda483ed3cee82a70212aca6de7adcc6390d39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQzOTc1Ng==", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531439756", "bodyText": "make abstract for Blob ? the actual database isn't important here", "author": "andyHa", "createdAt": "2020-11-27T08:10:40Z", "path": "src/main/java/sirius/biz/storage/layer2/mongo/MongoBlobChangeHandler.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer2.mongo;\n+\n+import sirius.kernel.di.std.Priorized;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Defines handlers to process created or modified {@link MongoBlob blobs}.\n+ *\n+ * @see ProcessChangedBlobsLoop\n+ */\n+public interface MongoBlobChangeHandler extends Priorized {", "originalCommit": "e0eda483ed3cee82a70212aca6de7adcc6390d39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ0MTEwMA==", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531441100", "bodyText": "The same changes also have to be applied to the SQL parts", "author": "andyHa", "createdAt": "2020-11-27T08:13:37Z", "path": "src/main/java/sirius/biz/storage/layer2/mongo/MongoBlob.java", "diffHunk": "@@ -190,6 +190,12 @@\n     public static final Mapping DELETED = Mapping.named(\"deleted\");\n     private boolean deleted;\n \n+    /**", "originalCommit": "e0eda483ed3cee82a70212aca6de7adcc6390d39", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ0MTkzNw==", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531441937", "bodyText": "It's in the pipeline. Was waiting for your review first to avoid double-fixing!", "author": "idlira", "createdAt": "2020-11-27T08:15:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ0MTEwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ0MTM2OQ==", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531441369", "bodyText": "maybe we call it createdOrRenamed instead of changed then?", "author": "andyHa", "createdAt": "2020-11-27T08:14:09Z", "path": "src/main/java/sirius/biz/storage/layer2/mongo/MongoBlob.java", "diffHunk": "@@ -209,6 +215,14 @@ protected void beforeSave() {\n         }\n \n         updateFilenameFields();\n+\n+        if (isNew() || isChanged(FILENAME, NORMALIZED_FILENAME, FILE_EXTENSION)) {\n+            changed = true;", "originalCommit": "e0eda483ed3cee82a70212aca6de7adcc6390d39", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ0MjEyMQ==", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531442121", "bodyText": "What if we extend changed to cover other fields in the future?", "author": "idlira", "createdAt": "2020-11-27T08:15:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ0MTM2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ0MTcyOQ==", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531441729", "bodyText": "extract common parts in base class and add JDBC impl", "author": "andyHa", "createdAt": "2020-11-27T08:14:56Z", "path": "src/main/java/sirius/biz/storage/layer2/mongo/ProcessChangedBlobsLoop.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer2.mongo;\n+\n+import sirius.biz.storage.util.StorageUtils;\n+import sirius.db.mongo.Mango;\n+import sirius.db.mongo.Mongo;\n+import sirius.kernel.async.BackgroundLoop;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.PriorityParts;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Processes {@link MongoBlob blobs} which have been marked as changed.\n+ * <p>\n+ * The actual processing is performed by the predefined {@link MongoBlobChangeHandler handlers}\n+ */\n+@Register(framework = MongoBlobStorage.FRAMEWORK_MONGO_BLOB_STORAGE)\n+public class ProcessChangedBlobsLoop extends BackgroundLoop {\n+\n+    private static final double FREQUENCY_EVERY_FIFTEEN_SECONDS = 1 / 15d;", "originalCommit": "e0eda483ed3cee82a70212aca6de7adcc6390d39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ0OTA3Mg==", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531449072", "bodyText": "forEachBlobType(entityDescriptor -> entityDescriptor.addCascadeDeleteHandler(this::onDeleteCascade));", "author": "andyHa", "createdAt": "2020-11-27T08:30:04Z", "path": "src/main/java/sirius/biz/storage/layer2/BlobSoftRefProperty.java", "diffHunk": "@@ -64,6 +87,120 @@ private BlobSoftRefProperty(@Nonnull EntityDescriptor descriptor,\n         super(descriptor, accessPath, field);\n     }\n \n+    /**\n+     * Returns the {@link EntityDescriptor} of the referenced entity.\n+     *\n+     * @return the referenced entity descriptor\n+     */\n+    public List<EntityDescriptor> getReferencedDescriptors() {\n+        if (referencedDescriptors == null) {\n+            if (blobSoftRef == null) {\n+                throw new IllegalStateException(\"Schema not linked!\");\n+            }\n+            referencedDescriptors.add(mixing.getDescriptor(MongoBlob.class));\n+            referencedDescriptors.add(mixing.getDescriptor(SQLBlob.class));\n+        }\n+\n+        return Collections.unmodifiableList(referencedDescriptors);\n+    }\n+\n+    private BlobSoftRef getBlobSoftRef() {\n+        if (blobSoftRef == null) {\n+            try {\n+                this.blobSoftRef = (BlobSoftRef) field.get(accessPath.apply(descriptor.getReferenceInstance()));\n+            } catch (Exception e) {\n+                throw Exceptions.handle()\n+                                .to(Mixing.LOG)\n+                                .error(e)\n+                                .withSystemErrorMessage(\n+                                        \"Unable to obtain a BlobSoftRef object from entity ref field ('%s' in '%s'): %s (%s)\",\n+                                        getName(),\n+                                        descriptor.getType().getName())\n+                                .handle();\n+            }\n+        }\n+\n+        return blobSoftRef;\n+    }\n+\n+    @Override\n+    protected void link() {\n+        super.link();\n+\n+        try {\n+            BaseEntityRef.OnDelete deleteHandler = getBlobSoftRef().getDeleteHandler();\n+\n+            if (deleteHandler == BaseEntityRef.OnDelete.CASCADE) {\n+                getReferencedDescriptors().forEach(entityDescriptor -> entityDescriptor.addCascadeDeleteHandler(this::onDeleteCascade));", "originalCommit": "e0eda483ed3cee82a70212aca6de7adcc6390d39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ0OTE0Ng==", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531449146", "bodyText": "s.a.", "author": "andyHa", "createdAt": "2020-11-27T08:30:11Z", "path": "src/main/java/sirius/biz/storage/layer2/BlobSoftRefProperty.java", "diffHunk": "@@ -64,6 +87,120 @@ private BlobSoftRefProperty(@Nonnull EntityDescriptor descriptor,\n         super(descriptor, accessPath, field);\n     }\n \n+    /**\n+     * Returns the {@link EntityDescriptor} of the referenced entity.\n+     *\n+     * @return the referenced entity descriptor\n+     */\n+    public List<EntityDescriptor> getReferencedDescriptors() {\n+        if (referencedDescriptors == null) {\n+            if (blobSoftRef == null) {\n+                throw new IllegalStateException(\"Schema not linked!\");\n+            }\n+            referencedDescriptors.add(mixing.getDescriptor(MongoBlob.class));\n+            referencedDescriptors.add(mixing.getDescriptor(SQLBlob.class));\n+        }\n+\n+        return Collections.unmodifiableList(referencedDescriptors);\n+    }\n+\n+    private BlobSoftRef getBlobSoftRef() {\n+        if (blobSoftRef == null) {\n+            try {\n+                this.blobSoftRef = (BlobSoftRef) field.get(accessPath.apply(descriptor.getReferenceInstance()));\n+            } catch (Exception e) {\n+                throw Exceptions.handle()\n+                                .to(Mixing.LOG)\n+                                .error(e)\n+                                .withSystemErrorMessage(\n+                                        \"Unable to obtain a BlobSoftRef object from entity ref field ('%s' in '%s'): %s (%s)\",\n+                                        getName(),\n+                                        descriptor.getType().getName())\n+                                .handle();\n+            }\n+        }\n+\n+        return blobSoftRef;\n+    }\n+\n+    @Override\n+    protected void link() {\n+        super.link();\n+\n+        try {\n+            BaseEntityRef.OnDelete deleteHandler = getBlobSoftRef().getDeleteHandler();\n+\n+            if (deleteHandler == BaseEntityRef.OnDelete.CASCADE) {\n+                getReferencedDescriptors().forEach(entityDescriptor -> entityDescriptor.addCascadeDeleteHandler(this::onDeleteCascade));\n+            } else if (deleteHandler == BaseEntityRef.OnDelete.SET_NULL) {\n+                if (!isNullable()) {\n+                    Mixing.LOG.WARN(\"Error in property %s of %s: The field is not marked as NullAllowed,\"\n+                                    + \" therefore SET_NULL is not a valid delete handler!\", this, getDescriptor());\n+                }\n+\n+                getReferencedDescriptors().forEach(entityDescriptor -> entityDescriptor.addCascadeDeleteHandler(this::onDeleteSetNull));", "originalCommit": "e0eda483ed3cee82a70212aca6de7adcc6390d39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2bd3e9bfe0779d7c304f94d8c8a68be8cdd2813a", "url": "https://github.com/scireum/sirius-biz/commit/2bd3e9bfe0779d7c304f94d8c8a68be8cdd2813a", "message": "Renames field: changed -> createdOrRenamed\n\nAlso adds an index for faster lookups", "committedDate": "2020-11-27T09:34:50Z", "type": "commit"}, {"oid": "fe75b9972516737b30186e9502715de7bb467ac7", "url": "https://github.com/scireum/sirius-biz/commit/fe75b9972516737b30186e9502715de7bb467ac7", "message": "Adds list of valid options", "committedDate": "2020-11-27T11:03:03Z", "type": "commit"}, {"oid": "e9e2797ccf2b04d4f62ebfa1df18325e811b9e15", "url": "https://github.com/scireum/sirius-biz/commit/e9e2797ccf2b04d4f62ebfa1df18325e811b9e15", "message": "Generalizes the usage of MongoBlob and SQLBlob\n\nRenames handler to better represent what it actually does", "committedDate": "2020-11-27T11:17:56Z", "type": "commit"}, {"oid": "9672bde2ba36d6ce0645de18ffc79d4efb4b1215", "url": "https://github.com/scireum/sirius-biz/commit/9672bde2ba36d6ce0645de18ffc79d4efb4b1215", "message": "Unifies the delete and changed loops into one\n\nAlso moves common code into an abstract class", "committedDate": "2020-11-27T11:18:37Z", "type": "commit"}, {"oid": "68442cc5e8e039df010af734f64a2f390d6bcf49", "url": "https://github.com/scireum/sirius-biz/commit/68442cc5e8e039df010af734f64a2f390d6bcf49", "message": "Small fixes and JavaDoc corrections", "committedDate": "2020-11-27T11:31:45Z", "type": "commit"}, {"oid": "4bb50e0989f3b4caf9f15c0f88f1665320d110c7", "url": "https://github.com/scireum/sirius-biz/commit/4bb50e0989f3b4caf9f15c0f88f1665320d110c7", "message": "Updates the index to improve loop speeds\n\nThe loop uses no space to query deleted or modified items", "committedDate": "2020-11-27T12:07:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU4MTgxOA==", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531581818", "bodyText": "SQLProcessBlobsLoop?", "author": "sabieber", "createdAt": "2020-11-27T12:45:16Z", "path": "src/main/java/sirius/biz/storage/layer2/jdbc/SQLDeletedBlobsLoop.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer2.jdbc;\n+\n+import sirius.biz.storage.layer2.Directory;\n+import sirius.biz.storage.layer2.ProcessBlobsLoop;\n+import sirius.biz.storage.util.StorageUtils;\n+import sirius.db.jdbc.OMA;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+\n+import java.sql.SQLException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Finally deletes {@link SQLDirectory directories} and {@link SQLBlob blobs} which have been marked as deleted.\n+ */\n+@Register(framework = SQLBlobStorage.FRAMEWORK_JDBC_BLOB_STORAGE)\n+public class SQLDeletedBlobsLoop extends ProcessBlobsLoop {", "originalCommit": "9672bde2ba36d6ce0645de18ffc79d4efb4b1215", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3a586958b601d269ecbe1ff851c7b7d4cefbe40e", "url": "https://github.com/scireum/sirius-biz/commit/3a586958b601d269ecbe1ff851c7b7d4cefbe40e", "message": "Refactors SQLDeleteBlobsLoop into SQLProcessBlobsLoop", "committedDate": "2020-11-27T12:54:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU5ODU5NQ==", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531598595", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected List<EntityDescriptor> referencedDescriptors = new ArrayList<>();", "author": "andyHa", "createdAt": "2020-11-27T13:21:28Z", "path": "src/main/java/sirius/biz/storage/layer2/BlobSoftRefProperty.java", "diffHunk": "@@ -8,30 +8,56 @@\n \n package sirius.biz.storage.layer2;\n \n+import sirius.biz.storage.layer2.jdbc.SQLBlob;\n+import sirius.biz.storage.layer2.jdbc.SQLBlobStorage;\n+import sirius.biz.storage.layer2.mongo.MongoBlob;\n+import sirius.biz.storage.layer2.mongo.MongoBlobStorage;\n import sirius.biz.storage.util.StorageUtils;\n import sirius.db.jdbc.OMA;\n import sirius.db.mixing.AccessPath;\n+import sirius.db.mixing.BaseEntity;\n import sirius.db.mixing.EntityDescriptor;\n+import sirius.db.mixing.Mixing;\n import sirius.db.mixing.Property;\n import sirius.db.mixing.PropertyFactory;\n+import sirius.db.mixing.types.BaseEntityRef;\n+import sirius.kernel.Sirius;\n+import sirius.kernel.async.TaskContext;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Watch;\n+import sirius.kernel.di.std.Part;\n import sirius.kernel.di.std.Register;\n import sirius.kernel.health.Exceptions;\n+import sirius.kernel.nls.NLS;\n \n import javax.annotation.Nonnull;\n import java.lang.reflect.Field;\n import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n import java.util.function.Consumer;\n \n /**\n  * Handles fields of the type {@link BlobSoftRef} within an {@link sirius.db.mixing.BaseEntity}.\n  */\n public class BlobSoftRefProperty extends BlobRefProperty {\n \n+    @Part\n+    protected static Mixing mixing;\n+\n     /**\n      * Contains the field length to use if URLs are also supported for this field.\n      */\n     protected static final int URL_COMPATIBLE_LENGTH = 512;\n \n+    private static final String PARAM_TYPE = \"type\";\n+    private static final String PARAM_OWNER = \"owner\";\n+    private static final String PARAM_FIELD = \"field\";\n+\n+    private BlobSoftRef blobSoftRef;\n+    protected List<EntityDescriptor> referencedDescriptors = new ArrayList<>();", "originalCommit": "3a586958b601d269ecbe1ff851c7b7d4cefbe40e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU5ODk5Mg==", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531598992", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /**\n          \n          \n            \n                 * Returns the {@link EntityDescriptor} of the referenced entity.\n          \n          \n            \n                 *\n          \n          \n            \n                 * @return the referenced entity descriptor\n          \n          \n            \n                 */\n          \n          \n            \n                public List<EntityDescriptor> getReferencedDescriptors() {\n          \n          \n            \n                    if (referencedDescriptors.isEmpty()) {\n          \n          \n            \n                        if (blobSoftRef == null) {\n          \n          \n            \n                            throw new IllegalStateException(\"Schema not linked!\");\n          \n          \n            \n                        }\n          \n          \n            \n                        forEachBlobType(referencedDescriptors::add);\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    return Collections.unmodifiableList(referencedDescriptors);\n          \n          \n            \n                }", "author": "andyHa", "createdAt": "2020-11-27T13:22:11Z", "path": "src/main/java/sirius/biz/storage/layer2/BlobSoftRefProperty.java", "diffHunk": "@@ -64,6 +90,120 @@ private BlobSoftRefProperty(@Nonnull EntityDescriptor descriptor,\n         super(descriptor, accessPath, field);\n     }\n \n+    /**\n+     * Returns the {@link EntityDescriptor} of the referenced entity.\n+     *\n+     * @return the referenced entity descriptor\n+     */\n+    public List<EntityDescriptor> getReferencedDescriptors() {\n+        if (referencedDescriptors.isEmpty()) {\n+            if (blobSoftRef == null) {\n+                throw new IllegalStateException(\"Schema not linked!\");\n+            }\n+            forEachBlobType(referencedDescriptors::add);\n+        }\n+\n+        return Collections.unmodifiableList(referencedDescriptors);\n+    }\n+", "originalCommit": "3a586958b601d269ecbe1ff851c7b7d4cefbe40e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU5OTIzMQ==", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531599231", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            getReferencedDescriptors().forEach(entityDescriptor -> entityDescriptor.addCascadeDeleteHandler(this::onDeleteCascade));\n          \n          \n            \n                            forEachBlobType(entityDescriptor -> entityDescriptor.addCascadeDeleteHandler(this::onDeleteCascade));", "author": "andyHa", "createdAt": "2020-11-27T13:22:40Z", "path": "src/main/java/sirius/biz/storage/layer2/BlobSoftRefProperty.java", "diffHunk": "@@ -64,6 +90,120 @@ private BlobSoftRefProperty(@Nonnull EntityDescriptor descriptor,\n         super(descriptor, accessPath, field);\n     }\n \n+    /**\n+     * Returns the {@link EntityDescriptor} of the referenced entity.\n+     *\n+     * @return the referenced entity descriptor\n+     */\n+    public List<EntityDescriptor> getReferencedDescriptors() {\n+        if (referencedDescriptors.isEmpty()) {\n+            if (blobSoftRef == null) {\n+                throw new IllegalStateException(\"Schema not linked!\");\n+            }\n+            forEachBlobType(referencedDescriptors::add);\n+        }\n+\n+        return Collections.unmodifiableList(referencedDescriptors);\n+    }\n+\n+    private void forEachBlobType(Consumer<EntityDescriptor> callback) {\n+        if (Sirius.isFrameworkEnabled(SQLBlobStorage.FRAMEWORK_JDBC_BLOB_STORAGE)) {\n+            callback.accept(mixing.getDescriptor(SQLBlob.class));\n+        }\n+        if (Sirius.isFrameworkEnabled(MongoBlobStorage.FRAMEWORK_MONGO_BLOB_STORAGE)) {\n+            callback.accept(mixing.getDescriptor(MongoBlob.class));\n+        }\n+    }\n+\n+    private BlobSoftRef getBlobSoftRef() {\n+        if (blobSoftRef == null) {\n+            try {\n+                this.blobSoftRef = (BlobSoftRef) field.get(accessPath.apply(descriptor.getReferenceInstance()));\n+            } catch (Exception e) {\n+                throw Exceptions.handle()\n+                                .to(Mixing.LOG)\n+                                .error(e)\n+                                .withSystemErrorMessage(\n+                                        \"Unable to obtain a BlobSoftRef object from entity ref field ('%s' in '%s'): %s (%s)\",\n+                                        getName(),\n+                                        descriptor.getType().getName())\n+                                .handle();\n+            }\n+        }\n+\n+        return blobSoftRef;\n+    }\n+\n+    @Override\n+    protected void link() {\n+        super.link();\n+\n+        try {\n+            BaseEntityRef.OnDelete deleteHandler = getBlobSoftRef().getDeleteHandler();\n+\n+            if (deleteHandler == BaseEntityRef.OnDelete.CASCADE) {\n+                getReferencedDescriptors().forEach(entityDescriptor -> entityDescriptor.addCascadeDeleteHandler(this::onDeleteCascade));", "originalCommit": "3a586958b601d269ecbe1ff851c7b7d4cefbe40e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU5OTMzMQ==", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531599331", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            getReferencedDescriptors().forEach(entityDescriptor -> entityDescriptor.addCascadeDeleteHandler(this::onDeleteSetNull));\n          \n          \n            \n                            forEachBlobType(entityDescriptor -> entityDescriptor.addCascadeDeleteHandler(this::onDeleteSetNull));", "author": "andyHa", "createdAt": "2020-11-27T13:22:53Z", "path": "src/main/java/sirius/biz/storage/layer2/BlobSoftRefProperty.java", "diffHunk": "@@ -64,6 +90,120 @@ private BlobSoftRefProperty(@Nonnull EntityDescriptor descriptor,\n         super(descriptor, accessPath, field);\n     }\n \n+    /**\n+     * Returns the {@link EntityDescriptor} of the referenced entity.\n+     *\n+     * @return the referenced entity descriptor\n+     */\n+    public List<EntityDescriptor> getReferencedDescriptors() {\n+        if (referencedDescriptors.isEmpty()) {\n+            if (blobSoftRef == null) {\n+                throw new IllegalStateException(\"Schema not linked!\");\n+            }\n+            forEachBlobType(referencedDescriptors::add);\n+        }\n+\n+        return Collections.unmodifiableList(referencedDescriptors);\n+    }\n+\n+    private void forEachBlobType(Consumer<EntityDescriptor> callback) {\n+        if (Sirius.isFrameworkEnabled(SQLBlobStorage.FRAMEWORK_JDBC_BLOB_STORAGE)) {\n+            callback.accept(mixing.getDescriptor(SQLBlob.class));\n+        }\n+        if (Sirius.isFrameworkEnabled(MongoBlobStorage.FRAMEWORK_MONGO_BLOB_STORAGE)) {\n+            callback.accept(mixing.getDescriptor(MongoBlob.class));\n+        }\n+    }\n+\n+    private BlobSoftRef getBlobSoftRef() {\n+        if (blobSoftRef == null) {\n+            try {\n+                this.blobSoftRef = (BlobSoftRef) field.get(accessPath.apply(descriptor.getReferenceInstance()));\n+            } catch (Exception e) {\n+                throw Exceptions.handle()\n+                                .to(Mixing.LOG)\n+                                .error(e)\n+                                .withSystemErrorMessage(\n+                                        \"Unable to obtain a BlobSoftRef object from entity ref field ('%s' in '%s'): %s (%s)\",\n+                                        getName(),\n+                                        descriptor.getType().getName())\n+                                .handle();\n+            }\n+        }\n+\n+        return blobSoftRef;\n+    }\n+\n+    @Override\n+    protected void link() {\n+        super.link();\n+\n+        try {\n+            BaseEntityRef.OnDelete deleteHandler = getBlobSoftRef().getDeleteHandler();\n+\n+            if (deleteHandler == BaseEntityRef.OnDelete.CASCADE) {\n+                getReferencedDescriptors().forEach(entityDescriptor -> entityDescriptor.addCascadeDeleteHandler(this::onDeleteCascade));\n+            } else if (deleteHandler == BaseEntityRef.OnDelete.SET_NULL) {\n+                if (!isNullable()) {\n+                    Mixing.LOG.WARN(\"Error in property %s of %s: The field is not marked as NullAllowed,\"\n+                                    + \" therefore SET_NULL is not a valid delete handler!\", this, getDescriptor());\n+                }\n+\n+                getReferencedDescriptors().forEach(entityDescriptor -> entityDescriptor.addCascadeDeleteHandler(this::onDeleteSetNull));", "originalCommit": "3a586958b601d269ecbe1ff851c7b7d4cefbe40e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU5OTY4Mg==", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531599682", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public abstract class ProcessBlobsLoop extends BackgroundLoop {\n          \n          \n            \n            public abstract class ProcessBlobChangesLoop extends BackgroundLoop {", "author": "andyHa", "createdAt": "2020-11-27T13:23:37Z", "path": "src/main/java/sirius/biz/storage/layer2/ProcessBlobsLoop.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer2;\n+\n+import sirius.kernel.async.BackgroundLoop;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.PriorityParts;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Defines a loop to process creation, renaming and deletion of {@link Blob blobs} and deletion of {@link Directory directories}.\n+ *\n+ * @see ProcessBlobsLoop\n+ **/\n+public abstract class ProcessBlobsLoop extends BackgroundLoop {", "originalCommit": "3a586958b601d269ecbe1ff851c7b7d4cefbe40e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU5OTgyOA==", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531599828", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *\n          \n          \n            \n             * @see ProcessBlobsLoop", "author": "andyHa", "createdAt": "2020-11-27T13:23:53Z", "path": "src/main/java/sirius/biz/storage/layer2/ProcessBlobsLoop.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer2;\n+\n+import sirius.kernel.async.BackgroundLoop;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.PriorityParts;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Defines a loop to process creation, renaming and deletion of {@link Blob blobs} and deletion of {@link Directory directories}.\n+ *\n+ * @see ProcessBlobsLoop", "originalCommit": "3a586958b601d269ecbe1ff851c7b7d4cefbe40e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwMDA1Nw==", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531600057", "bodyText": "Javadoc", "author": "andyHa", "createdAt": "2020-11-27T13:24:22Z", "path": "src/main/java/sirius/biz/storage/layer2/ProcessBlobsLoop.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer2;\n+\n+import sirius.kernel.async.BackgroundLoop;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.PriorityParts;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Defines a loop to process creation, renaming and deletion of {@link Blob blobs} and deletion of {@link Directory directories}.\n+ *\n+ * @see ProcessBlobsLoop\n+ **/\n+public abstract class ProcessBlobsLoop extends BackgroundLoop {\n+\n+    private static final double FREQUENCY_EVERY_FIFTEEN_SECONDS = 1 / 15d;\n+\n+    @PriorityParts(BlobCreatedRenamedHandler.class)\n+    protected List<BlobCreatedRenamedHandler> createdOrRenamedHandlers;\n+\n+    @Nonnull\n+    @Override\n+    public String getName() {\n+        return \"storage-layer2-process\";\n+    }\n+\n+    @Override\n+    public double maxCallFrequency() {\n+        return FREQUENCY_EVERY_FIFTEEN_SECONDS;\n+    }\n+\n+    @Nullable\n+    @Override\n+    protected String doWork() throws Exception {\n+        AtomicInteger deletedDirectories = deleteDirectories();\n+        AtomicInteger deletedBlobs = deleteBlobs();\n+        AtomicInteger createdRenamedBlobs = processCreatedOrRenamedBlobs();\n+\n+        if (deletedDirectories.get() == 0 && deletedBlobs.get() == 0 && createdRenamedBlobs.get() == 0) {\n+            return null;\n+        }\n+\n+        return Strings.apply(\"Deleted %s directories and %s blobs. Processed %s new or renamed blobs.\",\n+                             deletedDirectories.get(),\n+                             deletedBlobs.get(),\n+                             createdRenamedBlobs.get());\n+    }\n+\n+    protected abstract AtomicInteger deleteBlobs();", "originalCommit": "3a586958b601d269ecbe1ff851c7b7d4cefbe40e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwMDkxMA==", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531600910", "bodyText": "catch within the loop so that a faulty handler doesn't kill all others", "author": "andyHa", "createdAt": "2020-11-27T13:25:54Z", "path": "src/main/java/sirius/biz/storage/layer2/jdbc/SQLProcessBlobsLoop.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer2.jdbc;\n+\n+import sirius.biz.storage.layer2.Directory;\n+import sirius.biz.storage.layer2.ProcessBlobsLoop;\n+import sirius.biz.storage.util.StorageUtils;\n+import sirius.db.jdbc.OMA;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+\n+import java.sql.SQLException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Implements processing actions on {@link SQLDirectory directories} and {@link SQLBlob blobs}.\n+ */\n+@Register(framework = SQLBlobStorage.FRAMEWORK_JDBC_BLOB_STORAGE)\n+public class SQLProcessBlobsLoop extends ProcessBlobsLoop {\n+\n+    @Part\n+    private OMA oma;\n+\n+    @Override\n+    protected AtomicInteger deleteBlobs() {\n+        AtomicInteger numBlobs = new AtomicInteger();\n+        oma.select(SQLBlob.class).eq(SQLBlob.DELETED, true).limit(256).iterateAll(blob -> {\n+            try {\n+                if (Strings.isFilled(blob.getPhysicalObjectKey())) {\n+                    blob.getStorageSpace().getPhysicalSpace().delete(blob.getPhysicalObjectKey());\n+                }\n+\n+                oma.delete(blob);\n+                numBlobs.incrementAndGet();\n+            } catch (Exception e) {\n+                Exceptions.handle()\n+                          .to(StorageUtils.LOG)\n+                          .error(e)\n+                          .withSystemErrorMessage(\"Layer 2/SQL: Failed to finally delete the blob %s (%s) in %s: (%s)\",\n+                                                  blob.getBlobKey(),\n+                                                  blob.getFilename(),\n+                                                  blob.getSpaceName())\n+                          .handle();\n+            }\n+        });\n+\n+        return numBlobs;\n+    }\n+\n+    @Override\n+    protected AtomicInteger deleteDirectories() {\n+        AtomicInteger numDirectories = new AtomicInteger();\n+        oma.select(SQLDirectory.class).eq(SQLDirectory.DELETED, true).limit(256).iterateAll(dir -> {\n+            try {\n+                propagateDelete(dir);\n+                oma.delete(dir);\n+            } catch (Exception e) {\n+                Exceptions.handle()\n+                          .to(StorageUtils.LOG)\n+                          .error(e)\n+                          .withSystemErrorMessage(\n+                                  \"Layer 2/SQL: Failed to finally delete the directory %s (%s) in %s: (%s)\",\n+                                  dir.getId(),\n+                                  dir.getName(),\n+                                  dir.getSpaceName())\n+                          .handle();\n+            }\n+            numDirectories.incrementAndGet();\n+        });\n+\n+        return numDirectories;\n+    }\n+\n+    @Override\n+    protected AtomicInteger processCreatedOrRenamedBlobs() {\n+        AtomicInteger numBlobs = new AtomicInteger();\n+        oma.select(SQLBlob.class).eq(SQLBlob.CREATED_OR_RENAMED, true).limit(256).iterateAll(blob -> {\n+            try {\n+                createdOrRenamedHandlers.forEach(handler -> handler.execute(blob));", "originalCommit": "3a586958b601d269ecbe1ff851c7b7d4cefbe40e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwMTA4NA==", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531601084", "bodyText": "move the inside .forEach and add the class name of the handler to the message", "author": "andyHa", "createdAt": "2020-11-27T13:26:19Z", "path": "src/main/java/sirius/biz/storage/layer2/jdbc/SQLProcessBlobsLoop.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer2.jdbc;\n+\n+import sirius.biz.storage.layer2.Directory;\n+import sirius.biz.storage.layer2.ProcessBlobsLoop;\n+import sirius.biz.storage.util.StorageUtils;\n+import sirius.db.jdbc.OMA;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+\n+import java.sql.SQLException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Implements processing actions on {@link SQLDirectory directories} and {@link SQLBlob blobs}.\n+ */\n+@Register(framework = SQLBlobStorage.FRAMEWORK_JDBC_BLOB_STORAGE)\n+public class SQLProcessBlobsLoop extends ProcessBlobsLoop {\n+\n+    @Part\n+    private OMA oma;\n+\n+    @Override\n+    protected AtomicInteger deleteBlobs() {\n+        AtomicInteger numBlobs = new AtomicInteger();\n+        oma.select(SQLBlob.class).eq(SQLBlob.DELETED, true).limit(256).iterateAll(blob -> {\n+            try {\n+                if (Strings.isFilled(blob.getPhysicalObjectKey())) {\n+                    blob.getStorageSpace().getPhysicalSpace().delete(blob.getPhysicalObjectKey());\n+                }\n+\n+                oma.delete(blob);\n+                numBlobs.incrementAndGet();\n+            } catch (Exception e) {\n+                Exceptions.handle()\n+                          .to(StorageUtils.LOG)\n+                          .error(e)\n+                          .withSystemErrorMessage(\"Layer 2/SQL: Failed to finally delete the blob %s (%s) in %s: (%s)\",\n+                                                  blob.getBlobKey(),\n+                                                  blob.getFilename(),\n+                                                  blob.getSpaceName())\n+                          .handle();\n+            }\n+        });\n+\n+        return numBlobs;\n+    }\n+\n+    @Override\n+    protected AtomicInteger deleteDirectories() {\n+        AtomicInteger numDirectories = new AtomicInteger();\n+        oma.select(SQLDirectory.class).eq(SQLDirectory.DELETED, true).limit(256).iterateAll(dir -> {\n+            try {\n+                propagateDelete(dir);\n+                oma.delete(dir);\n+            } catch (Exception e) {\n+                Exceptions.handle()\n+                          .to(StorageUtils.LOG)\n+                          .error(e)\n+                          .withSystemErrorMessage(\n+                                  \"Layer 2/SQL: Failed to finally delete the directory %s (%s) in %s: (%s)\",\n+                                  dir.getId(),\n+                                  dir.getName(),\n+                                  dir.getSpaceName())\n+                          .handle();\n+            }\n+            numDirectories.incrementAndGet();\n+        });\n+\n+        return numDirectories;\n+    }\n+\n+    @Override\n+    protected AtomicInteger processCreatedOrRenamedBlobs() {\n+        AtomicInteger numBlobs = new AtomicInteger();\n+        oma.select(SQLBlob.class).eq(SQLBlob.CREATED_OR_RENAMED, true).limit(256).iterateAll(blob -> {\n+            try {\n+                createdOrRenamedHandlers.forEach(handler -> handler.execute(blob));\n+                numBlobs.incrementAndGet();\n+            } catch (Exception e) {\n+                Exceptions.handle()", "originalCommit": "3a586958b601d269ecbe1ff851c7b7d4cefbe40e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwMTc5OA==", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531601798", "bodyText": "also, this whole \"invoke all handlers\" could be a single method in the abstract base class as it is independent to the db", "author": "andyHa", "createdAt": "2020-11-27T13:27:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwMTA4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwMTMzOQ==", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531601339", "bodyText": "extract lambda into method - this is quite long and nested", "author": "andyHa", "createdAt": "2020-11-27T13:26:48Z", "path": "src/main/java/sirius/biz/storage/layer2/jdbc/SQLProcessBlobsLoop.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer2.jdbc;\n+\n+import sirius.biz.storage.layer2.Directory;\n+import sirius.biz.storage.layer2.ProcessBlobsLoop;\n+import sirius.biz.storage.util.StorageUtils;\n+import sirius.db.jdbc.OMA;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+\n+import java.sql.SQLException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Implements processing actions on {@link SQLDirectory directories} and {@link SQLBlob blobs}.\n+ */\n+@Register(framework = SQLBlobStorage.FRAMEWORK_JDBC_BLOB_STORAGE)\n+public class SQLProcessBlobsLoop extends ProcessBlobsLoop {\n+\n+    @Part\n+    private OMA oma;\n+\n+    @Override\n+    protected AtomicInteger deleteBlobs() {\n+        AtomicInteger numBlobs = new AtomicInteger();\n+        oma.select(SQLBlob.class).eq(SQLBlob.DELETED, true).limit(256).iterateAll(blob -> {\n+            try {\n+                if (Strings.isFilled(blob.getPhysicalObjectKey())) {\n+                    blob.getStorageSpace().getPhysicalSpace().delete(blob.getPhysicalObjectKey());\n+                }\n+\n+                oma.delete(blob);\n+                numBlobs.incrementAndGet();\n+            } catch (Exception e) {\n+                Exceptions.handle()\n+                          .to(StorageUtils.LOG)\n+                          .error(e)\n+                          .withSystemErrorMessage(\"Layer 2/SQL: Failed to finally delete the blob %s (%s) in %s: (%s)\",\n+                                                  blob.getBlobKey(),\n+                                                  blob.getFilename(),\n+                                                  blob.getSpaceName())\n+                          .handle();\n+            }\n+        });\n+\n+        return numBlobs;\n+    }\n+\n+    @Override\n+    protected AtomicInteger deleteDirectories() {\n+        AtomicInteger numDirectories = new AtomicInteger();\n+        oma.select(SQLDirectory.class).eq(SQLDirectory.DELETED, true).limit(256).iterateAll(dir -> {\n+            try {\n+                propagateDelete(dir);\n+                oma.delete(dir);\n+            } catch (Exception e) {\n+                Exceptions.handle()\n+                          .to(StorageUtils.LOG)\n+                          .error(e)\n+                          .withSystemErrorMessage(\n+                                  \"Layer 2/SQL: Failed to finally delete the directory %s (%s) in %s: (%s)\",\n+                                  dir.getId(),\n+                                  dir.getName(),\n+                                  dir.getSpaceName())\n+                          .handle();\n+            }\n+            numDirectories.incrementAndGet();\n+        });\n+\n+        return numDirectories;\n+    }\n+\n+    @Override\n+    protected AtomicInteger processCreatedOrRenamedBlobs() {\n+        AtomicInteger numBlobs = new AtomicInteger();\n+        oma.select(SQLBlob.class).eq(SQLBlob.CREATED_OR_RENAMED, true).limit(256).iterateAll(blob -> {\n+            try {", "originalCommit": "3a586958b601d269ecbe1ff851c7b7d4cefbe40e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwMTUxOQ==", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531601519", "bodyText": "s.a.", "author": "andyHa", "createdAt": "2020-11-27T13:27:10Z", "path": "src/main/java/sirius/biz/storage/layer2/mongo/MongoProcessBlobsLoop.java", "diffHunk": "@@ -108,11 +84,41 @@ private AtomicInteger deleteDirectories() {\n         return numDirectories;\n     }\n \n-    private void propagateDelete(MongoDirectory dir) {\n+    @Override\n+    protected AtomicInteger processCreatedOrRenamedBlobs() {\n+        AtomicInteger numBlobs = new AtomicInteger();\n+        mango.select(MongoBlob.class).eq(MongoBlob.CREATED_OR_RENAMED, true).limit(256).iterateAll(blob -> {\n+            try {", "originalCommit": "3a586958b601d269ecbe1ff851c7b7d4cefbe40e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwMjE0Mw==", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531602143", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String directoryId = ((MongoDirectory) dir).getId();\n          \n          \n            \n                    String directoryId = dir.getIdAsString();", "author": "andyHa", "createdAt": "2020-11-27T13:28:32Z", "path": "src/main/java/sirius/biz/storage/layer2/mongo/MongoProcessBlobsLoop.java", "diffHunk": "@@ -108,11 +84,41 @@ private AtomicInteger deleteDirectories() {\n         return numDirectories;\n     }\n \n-    private void propagateDelete(MongoDirectory dir) {\n+    @Override\n+    protected AtomicInteger processCreatedOrRenamedBlobs() {\n+        AtomicInteger numBlobs = new AtomicInteger();\n+        mango.select(MongoBlob.class).eq(MongoBlob.CREATED_OR_RENAMED, true).limit(256).iterateAll(blob -> {\n+            try {\n+                createdOrRenamedHandlers.forEach(handler -> handler.execute(blob));\n+                numBlobs.incrementAndGet();\n+            } catch (Exception e) {\n+                Exceptions.handle()\n+                          .to(StorageUtils.LOG)\n+                          .error(e)\n+                          .withSystemErrorMessage(\n+                                  \"Layer 2/Mongo: Failed to process the changed blob %s (%s) in %s: %s (%s)\",\n+                                  blob.getBlobKey(),\n+                                  blob.getFilename(),\n+                                  blob.getSpaceName())\n+                          .handle();\n+            } finally {\n+                mongo.update()\n+                     .set(MongoBlob.CREATED_OR_RENAMED, false)\n+                     .where(MongoBlob.ID, blob.getId())\n+                     .executeFor(MongoBlob.class);\n+            }\n+        });\n+\n+        return numBlobs;\n+    }\n+\n+    @Override\n+    protected void propagateDelete(Directory dir) {\n+        String directoryId = ((MongoDirectory) dir).getId();", "originalCommit": "3a586958b601d269ecbe1ff851c7b7d4cefbe40e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9f5339244802ef906a2dd5e4254b5cc117174fff", "url": "https://github.com/scireum/sirius-biz/commit/9f5339244802ef906a2dd5e4254b5cc117174fff", "message": "Removes useless method and list\n\nBuilding up the list each time is not really an overkill and happens only during initialization", "committedDate": "2020-11-27T13:47:53Z", "type": "commit"}, {"oid": "dbe9d1c65b5d7baac0d50ff423831bc923a232cd", "url": "https://github.com/scireum/sirius-biz/commit/dbe9d1c65b5d7baac0d50ff423831bc923a232cd", "message": "Refactors ProcessBlobsLoop -> ProcessBlobChangesLoop", "committedDate": "2020-11-27T13:50:36Z", "type": "commit"}, {"oid": "a115c9cb5b8db438abb7e221bef3a832f806e074", "url": "https://github.com/scireum/sirius-biz/commit/a115c9cb5b8db438abb7e221bef3a832f806e074", "message": "Adds JavaDoc to abstract methods", "committedDate": "2020-11-27T13:59:51Z", "type": "commit"}, {"oid": "423f4af33c548ee9cc31d1e950663777d44bbc78", "url": "https://github.com/scireum/sirius-biz/commit/423f4af33c548ee9cc31d1e950663777d44bbc78", "message": "Moves deletion of the physical file abstract", "committedDate": "2020-11-27T14:16:51Z", "type": "commit"}, {"oid": "a3504af95db135b952623af2d6b3c983127abdb5", "url": "https://github.com/scireum/sirius-biz/commit/a3504af95db135b952623af2d6b3c983127abdb5", "message": "Removes unnecessary cast", "committedDate": "2020-11-27T14:20:13Z", "type": "commit"}, {"oid": "fcd74d3789606be88c1fdcd8200bc71ceacbb3b7", "url": "https://github.com/scireum/sirius-biz/commit/fcd74d3789606be88c1fdcd8200bc71ceacbb3b7", "message": "Improves error handling\n\nalso moves more common functionality into the abstract class", "committedDate": "2020-11-27T15:08:31Z", "type": "commit"}, {"oid": "cbfee31e87277d23240dd81df8d14e06ab3e94a8", "url": "https://github.com/scireum/sirius-biz/commit/cbfee31e87277d23240dd81df8d14e06ab3e94a8", "message": "Improves how counters are used", "committedDate": "2020-11-27T15:23:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQwMTQ5Mg==", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r532401492", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            this.blobSoftRef = (BlobSoftRef) field.get(accessPath.apply(descriptor.getReferenceInstance()));\n          \n          \n            \n                            blobSoftRef = (BlobSoftRef) field.get(accessPath.apply(descriptor.getReferenceInstance()));", "author": "mkeckmkeck", "createdAt": "2020-11-30T07:53:58Z", "path": "src/main/java/sirius/biz/storage/layer2/BlobSoftRefProperty.java", "diffHunk": "@@ -64,6 +86,104 @@ private BlobSoftRefProperty(@Nonnull EntityDescriptor descriptor,\n         super(descriptor, accessPath, field);\n     }\n \n+    private void forEachBlobType(Consumer<EntityDescriptor> callback) {\n+        if (Sirius.isFrameworkEnabled(SQLBlobStorage.FRAMEWORK_JDBC_BLOB_STORAGE)) {\n+            callback.accept(mixing.getDescriptor(SQLBlob.class));\n+        }\n+        if (Sirius.isFrameworkEnabled(MongoBlobStorage.FRAMEWORK_MONGO_BLOB_STORAGE)) {\n+            callback.accept(mixing.getDescriptor(MongoBlob.class));\n+        }\n+    }\n+\n+    private BlobSoftRef getBlobSoftRef() {\n+        if (blobSoftRef == null) {\n+            try {\n+                this.blobSoftRef = (BlobSoftRef) field.get(accessPath.apply(descriptor.getReferenceInstance()));", "originalCommit": "cbfee31e87277d23240dd81df8d14e06ab3e94a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d8354f65b8ffc445ca324c0d10d9d946879c5d4e", "url": "https://github.com/scireum/sirius-biz/commit/d8354f65b8ffc445ca324c0d10d9d946879c5d4e", "message": "Update src/main/java/sirius/biz/storage/layer2/BlobSoftRefProperty.java\n\nCo-authored-by: Matthias Keck <60612914+mkeckmkeck@users.noreply.github.com>", "committedDate": "2020-11-30T08:23:40Z", "type": "commit"}]}