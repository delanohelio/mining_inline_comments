{"pr_number": 655, "pr_title": "Aha/checks", "pr_createdAt": "2020-01-03T08:30:49Z", "pr_url": "https://github.com/scireum/sirius-biz/pull/655", "timeline": [{"oid": "64573ac7a5cb3ce5d8f60c2a34a7eba19b762af6", "url": "https://github.com/scireum/sirius-biz/commit/64573ac7a5cb3ce5d8f60c2a34a7eba19b762af6", "message": "Updates to the latest sirius libraries.", "committedDate": "2020-01-02T13:56:02Z", "type": "commit"}, {"oid": "2c91a6fb847a7b85ff5ae3052cc3f48babe5b12f", "url": "https://github.com/scireum/sirius-biz/commit/2c91a6fb847a7b85ff5ae3052cc3f48babe5b12f", "message": "Drops all automatic data checks and provides boilerplate methods instead.\n\nThe automatic checks where sometime too strict, sometimes too lose. Also within a composite\none cannot access the \"isChanged\" detection of the underlying entity, which is a good way to\nprevent tons of unnecessary checks in the first place.\n\nEach entity can now itself implement a BeforeSave method and/or an OnValidate method which\ncalls the appropriate checks of the composites.", "committedDate": "2020-01-02T13:59:12Z", "type": "commit"}, {"oid": "cd172680a0befe68133c7fce40ff35ad50318059", "url": "https://github.com/scireum/sirius-biz/commit/cd172680a0befe68133c7fce40ff35ad50318059", "message": "Simplifies the checks performed on a UserAccount.", "committedDate": "2020-01-03T08:30:20Z", "type": "commit"}, {"oid": "e5d5c2bdd472dcdcc19f68731f9507d42544d497", "url": "https://github.com/scireum/sirius-biz/commit/e5d5c2bdd472dcdcc19f68731f9507d42544d497", "message": "Refactors InternationalAddressData to also make all checks optional.", "committedDate": "2020-01-03T09:27:44Z", "type": "commit"}, {"oid": "8f40d4a85c48069d8fdcad5242611830484d7183", "url": "https://github.com/scireum/sirius-biz/commit/8f40d4a85c48069d8fdcad5242611830484d7183", "message": "Adds a missing i18n key.", "committedDate": "2020-01-03T09:27:53Z", "type": "commit"}, {"oid": "282bf1d0f5c55bf3cd22c6da74441663f2bf1066", "url": "https://github.com/scireum/sirius-biz/commit/282bf1d0f5c55bf3cd22c6da74441663f2bf1066", "message": "Performs a refactoring required by changes in sirius-kernel.\n\nThe settings defined per user/tenant shouldn't be strict as we expect them to be\nonly partially present.", "committedDate": "2020-01-03T09:28:35Z", "type": "commit"}, {"oid": "9201152c11d7b568bab0a9f7f25a735b2022b7cb", "url": "https://github.com/scireum/sirius-biz/commit/9201152c11d7b568bab0a9f7f25a735b2022b7cb", "message": "Enforces some validation checks for tenants.", "committedDate": "2020-01-03T09:28:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc2ODA5Mg==", "url": "https://github.com/scireum/sirius-biz/pull/655#discussion_r362768092", "bodyText": "Requires a check if already saved data is lowercase (and a batch-convert) when not?", "author": "idlira", "createdAt": "2020-01-03T10:45:43Z", "path": "src/main/java/sirius/biz/tenants/UserAccountData.java", "diffHunk": "@@ -110,28 +109,35 @@ public UserAccountData(BaseEntity<?> userObject) {\n \n     @BeforeSave\n     protected void verifyData() {\n-        if (Strings.isFilled(email)) {\n-            if (ms.isValidMailAddress(email.trim(), null)) {\n-                email = email.toLowerCase();\n-            } else {\n-                throw Exceptions.createHandled().withNLSKey(\"Model.invalidEmail\").set(\"value\", email).handle();\n-            }\n-        }\n+        userObject.ifChangedAndFilled(UserAccount.USER_ACCOUNT_DATA.inner(UserAccountData.PERSON)\n+                                                                   .inner(PersonData.SALUTATION),\n+                                      getPerson()::verifySalutation);\n+\n+        userObject.ifChangedAndFilled(UserAccount.USER_ACCOUNT_DATA.inner(UserAccountData.EMAIL), () -> {\n+            email = email.trim().toLowerCase();\n+            ms.failForInvalidEmail(email, null);\n+        });\n+\n+        fillAndVerifyUsername();\n+    }\n \n+    private void fillAndVerifyUsername() {\n+        // Use email address if no explicit username is present\n         if (Strings.isEmpty(getLogin().getUsername())) {\n             getLogin().setUsername(getEmail());\n         }\n-        if (Strings.isFilled(getLogin().getUsername())) {\n-            getLogin().setUsername(getLogin().getUsername().toLowerCase());\n-        } else {\n-            throw Exceptions.createHandled()\n-                            .withNLSKey(\"Property.fieldNotNullable\")\n-                            .set(\"field\", NLS.get(\"LoginData.username\"))\n-                            .handle();\n-        }\n \n-        userObject.assertUnique(UserAccount.USER_ACCOUNT_DATA.inner(LOGIN).inner(LoginData.USERNAME),\n-                                getLogin().getUsername());\n+        // Ensure that the username is is filled and unique...\n+        userObject.verifyIfChangedFailIfEmpty(UserAccount.USER_ACCOUNT_DATA.inner(LOGIN).inner(LoginData.USERNAME),\n+                                              () -> {\n+                                                  // Make it lowercase...\n+                                                  getLogin().setUsername(getLogin().getUsername().toLowerCase());", "originalCommit": "cd172680a0befe68133c7fce40ff35ad50318059", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc3Mzg1Mw==", "url": "https://github.com/scireum/sirius-biz/pull/655#discussion_r362773853", "bodyText": "this code isn't new, it was just moved to another place...", "author": "andyHa", "createdAt": "2020-01-03T11:07:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc2ODA5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc2ODc0Nw==", "url": "https://github.com/scireum/sirius-biz/pull/655#discussion_r362768747", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Ensure that the username is is filled and unique...\n          \n          \n            \n                    // Ensure that the username is filled and unique...", "author": "idlira", "createdAt": "2020-01-03T10:48:10Z", "path": "src/main/java/sirius/biz/tenants/UserAccountData.java", "diffHunk": "@@ -110,28 +109,35 @@ public UserAccountData(BaseEntity<?> userObject) {\n \n     @BeforeSave\n     protected void verifyData() {\n-        if (Strings.isFilled(email)) {\n-            if (ms.isValidMailAddress(email.trim(), null)) {\n-                email = email.toLowerCase();\n-            } else {\n-                throw Exceptions.createHandled().withNLSKey(\"Model.invalidEmail\").set(\"value\", email).handle();\n-            }\n-        }\n+        userObject.ifChangedAndFilled(UserAccount.USER_ACCOUNT_DATA.inner(UserAccountData.PERSON)\n+                                                                   .inner(PersonData.SALUTATION),\n+                                      getPerson()::verifySalutation);\n+\n+        userObject.ifChangedAndFilled(UserAccount.USER_ACCOUNT_DATA.inner(UserAccountData.EMAIL), () -> {\n+            email = email.trim().toLowerCase();\n+            ms.failForInvalidEmail(email, null);\n+        });\n+\n+        fillAndVerifyUsername();\n+    }\n \n+    private void fillAndVerifyUsername() {\n+        // Use email address if no explicit username is present\n         if (Strings.isEmpty(getLogin().getUsername())) {\n             getLogin().setUsername(getEmail());\n         }\n-        if (Strings.isFilled(getLogin().getUsername())) {\n-            getLogin().setUsername(getLogin().getUsername().toLowerCase());\n-        } else {\n-            throw Exceptions.createHandled()\n-                            .withNLSKey(\"Property.fieldNotNullable\")\n-                            .set(\"field\", NLS.get(\"LoginData.username\"))\n-                            .handle();\n-        }\n \n-        userObject.assertUnique(UserAccount.USER_ACCOUNT_DATA.inner(LOGIN).inner(LoginData.USERNAME),\n-                                getLogin().getUsername());\n+        // Ensure that the username is is filled and unique...", "originalCommit": "9201152c11d7b568bab0a9f7f25a735b2022b7cb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc2ODk1Mg==", "url": "https://github.com/scireum/sirius-biz/pull/655#discussion_r362768952", "bodyText": "Is this format valid internationally?", "author": "idlira", "createdAt": "2020-01-03T10:48:55Z", "path": "src/main/java/sirius/biz/model/ContactData.java", "diffHunk": "@@ -24,21 +22,24 @@\n import sirius.kernel.nls.NLS;\n import sirius.web.mails.Mails;\n \n+import java.util.function.Consumer;\n import java.util.regex.Pattern;\n \n /**\n  * Provides various contact information for a person or company which can be embedded into other entities or mixins.\n+ * <p>\n+ * Note that this class doesn't perform any save checks or validations at all. Any entity which contains this composite\n+ * must decide which checks have to be performed and then either call the <tt>verifyXXX</tt> method within an\n+ * {@link sirius.db.mixing.annotations.BeforeSave} handler or invoke <tt>validateXXX</tt> in an\n+ * {@link sirius.db.mixing.annotations.OnValidate} method. Most probably these checks should be surrounded with\n+ * a {@link sirius.db.mixing.BaseEntity#isChanged(Mapping...)} check to only validate or verify new values.\n  */\n public class ContactData extends Composite {\n \n     /**\n-     * Validates a phone numner.\n+     * Validates a phone number.\n      */\n-    public static final Pattern VALID_PHONE_NUMBER =\n-            Pattern.compile(\"\\\\+?\\\\d+( \\\\d+)*( */( *\\\\d+)+)?( *\\\\-( *\\\\d+)+)?\");\n-\n-    @Transient\n-    private boolean validatePhoneNumbers;\n+    public static final Pattern VALID_PHONE_NUMBER = Pattern.compile(\"\\\\+?\\\\d+( \\\\d+)*( */( *\\\\d+)+)?( *-( *\\\\d+)+)?\");", "originalCommit": "9201152c11d7b568bab0a9f7f25a735b2022b7cb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc3NDIxNQ==", "url": "https://github.com/scireum/sirius-biz/pull/655#discussion_r362774215", "bodyText": "This regex isn't new / has not changed semantically. The \\- was a redundant escape which has been removed (as suggested by IntelliJ) - hopefully the regex was/is valid :)", "author": "andyHa", "createdAt": "2020-01-03T11:08:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc2ODk1Mg=="}], "type": "inlineReview"}, {"oid": "06a3ff1ba86fb46ebbb4c870085a6b9d3044aadb", "url": "https://github.com/scireum/sirius-biz/commit/06a3ff1ba86fb46ebbb4c870085a6b9d3044aadb", "message": "Updates to the latest sirius-web", "committedDate": "2020-01-03T11:04:43Z", "type": "commit"}, {"oid": "d052f0db3f4836f6d33b9a62e2f30dfd1c00782c", "url": "https://github.com/scireum/sirius-biz/commit/d052f0db3f4836f6d33b9a62e2f30dfd1c00782c", "message": "Updates to ES7", "committedDate": "2020-01-03T11:04:54Z", "type": "commit"}, {"oid": "9893b767a15a6585a590103e0aea7198845cd329", "url": "https://github.com/scireum/sirius-biz/commit/9893b767a15a6585a590103e0aea7198845cd329", "message": "Fixes a bug in a unit test.\n\nIf we reset the ID counter we also have to wipe out all existing entities as\notherwise the unique constraint on \"id\" will fail.", "committedDate": "2020-01-03T11:05:42Z", "type": "commit"}, {"oid": "2fada512436e4406dafe75bb4d6eee8619edb24b", "url": "https://github.com/scireum/sirius-biz/commit/2fada512436e4406dafe75bb4d6eee8619edb24b", "message": "Specifies an ID for the mongo sequences.\n\nAlthough unused, we have to provide a value as otherwise the\nunique constraint on the ID column will fail.", "committedDate": "2020-01-03T11:06:41Z", "type": "commit"}, {"oid": "b096b481116ea473e1546b600e4c519f9d02eff0", "url": "https://github.com/scireum/sirius-biz/commit/b096b481116ea473e1546b600e4c519f9d02eff0", "message": "Update src/main/java/sirius/biz/tenants/UserAccountData.java\n\nCo-Authored-By: Idevaldo De Lira <54799255+idlira@users.noreply.github.com>", "committedDate": "2020-01-03T11:07:30Z", "type": "commit"}]}