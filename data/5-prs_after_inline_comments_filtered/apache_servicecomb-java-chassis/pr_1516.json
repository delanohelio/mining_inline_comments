{"pr_number": 1516, "pr_title": "[SCB-1710] catch the throwable from the scheduled pulling task", "pr_createdAt": "2020-01-09T12:02:08Z", "pr_url": "https://github.com/apache/servicecomb-java-chassis/pull/1516", "timeline": [{"oid": "9bf17b11a169f41968d36e1f5ad70d525a15c4bc", "url": "https://github.com/apache/servicecomb-java-chassis/commit/9bf17b11a169f41968d36e1f5ad70d525a15c4bc", "message": "[SCB-1710] catch the throwable from the scheduled pulling task", "committedDate": "2020-01-09T11:53:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAyOTI3OA==", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1516#discussion_r365029278", "bodyText": "it's better to call scheduledThreadPoolExecutor.shutDownNow to terminate the thread pool", "author": "liubao68", "createdAt": "2020-01-10T00:48:50Z", "path": "foundations/foundation-common/src/test/java/org/apache/servicecomb/foundation/common/concurrency/RunnableWrapperTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.servicecomb.foundation.common.concurrency;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.junit.Test;\n+\n+public class RunnableWrapperTest {\n+  /**\n+   * {@link SuppressedRunnableWrapper} should ensure that any {@link Throwable} thrown from {@link Runnable}\n+   * should not interrupt the scheduled tasks.\n+   */\n+  @Test\n+  public void run() throws InterruptedException {\n+    ScheduledThreadPoolExecutor scheduledThreadPoolExecutor = new ScheduledThreadPoolExecutor(1);\n+    CountDownLatch countDownLatch = new CountDownLatch(3);\n+    scheduledThreadPoolExecutor.scheduleAtFixedRate(\n+        new SuppressedRunnableWrapper(\n+            () -> {\n+              countDownLatch.countDown();\n+              switch ((int) countDownLatch.getCount()) {\n+                case 2:\n+                  throw new Error(\"Normal case, this is a mocked error\");\n+                case 1:\n+                  throw new IllegalStateException(\"Normal case, this is a mocked exception\");\n+                default:\n+              }\n+            }\n+        ),\n+        1,\n+        1,\n+        TimeUnit.MILLISECONDS);\n+\n+    countDownLatch.await(1000, TimeUnit.MILLISECONDS);\n+    assertEquals(0, countDownLatch.getCount());", "originalCommit": "9bf17b11a169f41968d36e1f5ad70d525a15c4bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEwMTQyMg==", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1516#discussion_r365101422", "bodyText": "Done. the try catch block is added and the thread pool is shutdown in the finally block.", "author": "yhs0092", "createdAt": "2020-01-10T07:26:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAyOTI3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAyOTU5Nw==", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1516#discussion_r365029597", "bodyText": "It's better to assign a default value explicitly", "author": "liubao68", "createdAt": "2020-01-10T00:50:19Z", "path": "service-registry/src/main/java/org/apache/servicecomb/serviceregistry/registry/RemoteServiceRegistry.java", "diffHunk": "@@ -50,18 +52,16 @@ public RemoteServiceRegistry(EventBus eventBus, ServiceRegistryConfig serviceReg\n   public void init() {\n     super.init();\n     taskPool = new ScheduledThreadPoolExecutor(3,\n-        task -> {\n-          return new Thread(task) {\n-            @Override\n-            public void run() {\n-              try {\n-                setName(\"Service Center Task [\" + task.toString() + \"[\" + this.getId() + \"]]\");\n-                super.run();\n-              } catch (Throwable e) {\n-                LOGGER.error(\"task {} execute error.\", getName(), e);\n-              }\n-            }\n-          };\n+        new ThreadFactory() {\n+          private int taskId;", "originalCommit": "9bf17b11a169f41968d36e1f5ad70d525a15c4bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEwMTYwNw==", "url": "https://github.com/apache/servicecomb-java-chassis/pull/1516#discussion_r365101607", "bodyText": "Done. pls check it.", "author": "yhs0092", "createdAt": "2020-01-10T07:27:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAyOTU5Nw=="}], "type": "inlineReview"}, {"oid": "9b7132e7bedf9eb2c5c0b53ec8260ee558b37a8c", "url": "https://github.com/apache/servicecomb-java-chassis/commit/9b7132e7bedf9eb2c5c0b53ec8260ee558b37a8c", "message": "[SCB-1710] fix as review opinion\n\n- initialize taskId explicitly\n- shutdown Executor in finally block in the UT", "committedDate": "2020-01-10T06:55:18Z", "type": "commit"}]}