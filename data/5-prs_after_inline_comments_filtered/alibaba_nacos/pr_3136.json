{"pr_number": 3136, "pr_title": "[ISSUE #2856]Adjust the use of thread pools (naming module)", "pr_createdAt": "2020-06-21T05:46:46Z", "pr_url": "https://github.com/alibaba/nacos/pull/3136", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxMjUyNw==", "url": "https://github.com/alibaba/nacos/pull/3136#discussion_r443212527", "bodyText": "Would chain calls be better?\nfor example\nNamingExecutor.mysqlCheckExecutor().xxx", "author": "chuntaojun", "createdAt": "2020-06-21T12:00:27Z", "path": "naming/src/main/java/com/alibaba/nacos/naming/misc/NamingExecutor.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.naming.misc;\n+\n+import com.alibaba.nacos.common.executor.ExecutorFactory;\n+import com.alibaba.nacos.common.executor.NameThreadFactory;\n+import com.alibaba.nacos.core.utils.ClassUtils;\n+import com.alibaba.nacos.naming.NamingApp;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Global executor for naming\n+ *\n+ * <p>The classes provide the calling method of the thread pool, shielding the visibility of the thread pool itself, so\n+ * that the outside can not operate its life cycle.\n+ *\n+ * @author gagharv\n+ */\n+@SuppressWarnings({\"checkstyle:indentation\", \"PMD.ThreadPoolCreationRule\"})\n+public class NamingExecutor {", "originalCommit": "d15382c60cdf05c2c8f1eaaed35eb82c4cc8e9fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxNzk2Nw==", "url": "https://github.com/alibaba/nacos/pull/3136#discussion_r443217967", "bodyText": "This will cause the thread pool to be exposed to the outside but the user can call shutdown by himself.", "author": "wangweizZZ", "createdAt": "2020-06-21T13:07:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxMjUyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIzODkzMw==", "url": "https://github.com/alibaba/nacos/pull/3136#discussion_r443238933", "bodyText": "maybe this idea should implemented wrapped for ThreadPoolExecutor", "author": "chuntaojun", "createdAt": "2020-06-21T17:14:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxMjUyNw=="}], "type": "inlineReview"}, {"oid": "5b592013a7562a9b041fb74ed905afe9331b4c67", "url": "https://github.com/alibaba/nacos/commit/5b592013a7562a9b041fb74ed905afe9331b4c67", "message": "[ISSUE #2856]Adjust the use of thread pools (naming module)\n\nChange-Id: I626179bd9ee8e852d9d51787950ad80744ec71cd", "committedDate": "2020-06-24T08:42:25Z", "type": "commit"}, {"oid": "5b592013a7562a9b041fb74ed905afe9331b4c67", "url": "https://github.com/alibaba/nacos/commit/5b592013a7562a9b041fb74ed905afe9331b4c67", "message": "[ISSUE #2856]Adjust the use of thread pools (naming module)\n\nChange-Id: I626179bd9ee8e852d9d51787950ad80744ec71cd", "committedDate": "2020-06-24T08:42:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzMDc2Ng==", "url": "https://github.com/alibaba/nacos/pull/3136#discussion_r445930766", "bodyText": "New code style?", "author": "zongtanghu", "createdAt": "2020-06-26T02:06:09Z", "path": "istio/src/main/java/com/alibaba/nacos/istio/mcp/NacosMcpService.java", "diffHunk": "@@ -39,213 +43,202 @@\n import java.util.concurrent.atomic.AtomicInteger;\n \n /**\n+ * nacos mcp service.\n+ *\n  * @author nkorange\n  * @since 1.1.4\n  */\n @org.springframework.stereotype.Service\n public class NacosMcpService extends ResourceSourceGrpc.ResourceSourceImplBase {\n-\n+    \n     private AtomicInteger connectIdGenerator = new AtomicInteger(0);\n-\n+    \n     private Map<Integer, StreamObserver<Resources>> connnections = new ConcurrentHashMap<>(16);\n-\n+    \n     private Map<String, Resource> resourceMap = new ConcurrentHashMap<>(16);\n-\n+    \n     private Map<String, String> checksumMap = new ConcurrentHashMap<>(16);\n-\n+    \n     private static final String SERVICE_NAME_SPLITTER = \"nacos\";\n-\n+    \n     private static final String MESSAGE_TYPE_URL = \"type.googleapis.com/istio.networking.v1alpha3.ServiceEntry\";\n-\n+    \n     private static final long MCP_PUSH_PERIOD_MILLISECONDS = 10000L;\n-\n+    \n     @Autowired\n     private ServiceManager serviceManager;\n-\n+    \n     @Autowired\n     private IstioConfig istioConfig;\n-", "originalCommit": "5b592013a7562a9b041fb74ed905afe9331b4c67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1NzU3MA==", "url": "https://github.com/alibaba/nacos/pull/3136#discussion_r445957570", "bodyText": "yes, code format", "author": "wangweizZZ", "createdAt": "2020-06-26T04:12:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzMDc2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzOTQyNg==", "url": "https://github.com/alibaba/nacos/pull/3136#discussion_r445939426", "bodyText": "Use public final static String variable to represent the const value \"com.alibaba.nacos.naming.timer\" is better? The same is as below.", "author": "zongtanghu", "createdAt": "2020-06-26T02:43:41Z", "path": "naming/src/main/java/com/alibaba/nacos/naming/misc/GlobalExecutor.java", "diffHunk": "@@ -42,141 +50,195 @@\n     \n     private static final long SERVER_STATUS_UPDATE_PERIOD = TimeUnit.SECONDS.toMillis(5);\n     \n-    private static ScheduledExecutorService executorService = new ScheduledThreadPoolExecutor(\n-            Runtime.getRuntime().availableProcessors() * 2, registerMaster -> {\n-        Thread t = new Thread(registerMaster);\n-        \n-        t.setDaemon(true);\n-        t.setName(\"com.alibaba.nacos.naming.timer\");\n-        \n-        return t;\n-    });\n-    \n-    private static ScheduledExecutorService taskDispatchExecutor = new ScheduledThreadPoolExecutor(\n-            Runtime.getRuntime().availableProcessors(), taskDispatch -> {\n-        Thread t = new Thread(taskDispatch);\n-        \n-        t.setDaemon(true);\n-        t.setName(\"com.alibaba.nacos.naming.distro.task.dispatcher\");\n-        \n-        return t;\n-    });\n-    \n-    private static ScheduledExecutorService dataSyncExecutor = new ScheduledThreadPoolExecutor(\n-            Runtime.getRuntime().availableProcessors(), dataSync -> {\n-        Thread t = new Thread(dataSync);\n-        \n-        t.setDaemon(true);\n-        t.setName(\"com.alibaba.nacos.naming.distro.data.syncer\");\n-        \n-        return t;\n-    });\n-    \n-    private static ScheduledExecutorService notifyServerListExecutor = new ScheduledThreadPoolExecutor(1, notifyServer -> {\n-        Thread t = new Thread(notifyServer);\n-        \n-        t.setDaemon(true);\n-        t.setName(\"com.alibaba.nacos.naming.server.list.notifier\");\n-        \n-        return t;\n-    });\n-    \n-    private static final ScheduledExecutorService SERVER_STATUS_EXECUTOR = new ScheduledThreadPoolExecutor(1, serverStatus -> {\n-        Thread t = new Thread(serverStatus);\n-        t.setName(\"nacos.naming.status.worker\");\n-        t.setDaemon(true);\n-        return t;\n-    });\n+    public static final int DEFAULT_THREAD_COUNT =\n+            Runtime.getRuntime().availableProcessors() <= 1 ? 1 : Runtime.getRuntime().availableProcessors() / 2;\n+    \n+    private static final ScheduledExecutorService NAMING_TIMER_EXECUTOR = ExecutorFactory.Managed\n+            .newScheduledExecutorService(ClassUtils.getCanonicalName(NamingApp.class),\n+                    Runtime.getRuntime().availableProcessors() * 2,\n+                    new NameThreadFactory(\"com.alibaba.nacos.naming.timer\"));", "originalCommit": "5b592013a7562a9b041fb74ed905afe9331b4c67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1NzU0MQ==", "url": "https://github.com/alibaba/nacos/pull/3136#discussion_r445957541", "bodyText": "If set to public, there is no need to provide a method", "author": "wangweizZZ", "createdAt": "2020-06-26T04:12:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzOTQyNg=="}], "type": "inlineReview"}]}