{"pr_number": 9040, "pr_title": "Allow multiple tags for container-image", "pr_createdAt": "2020-05-04T07:36:15Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/9040", "timeline": [{"oid": "095d2ef88543fc933dd41253135b56750f0f9c1f", "url": "https://github.com/quarkusio/quarkus/commit/095d2ef88543fc933dd41253135b56750f0f9c1f", "message": "Allow multiple tags for container-image", "committedDate": "2020-05-04T09:17:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTMxNTA4NQ==", "url": "https://github.com/quarkusio/quarkus/pull/9040#discussion_r419315085", "bodyText": "Shouldn't this be containerImage.getAdditonalTags() considering we have most of the work done https://github.com/quarkusio/quarkus/pull/9040/files#diff-11cc649f490ec2882648b7efcf89760aR20-R22 and it seems like we are repeating ourselves?", "author": "machi1990", "createdAt": "2020-05-04T09:32:29Z", "path": "extensions/container-image/container-image-jib/deployment/src/main/java/io/quarkus/container/image/jib/deployment/JibProcessor.java", "diffHunk": "@@ -195,7 +198,10 @@ private ImageReference getImageReference(ContainerImageConfig containerImageConf\n             throw new IllegalArgumentException(\"The supplied container-image repository '\" + repository + \"' is invalid\");\n         }\n \n-        String tag = containerImageConfig.tag.orElse(applicationInfo.getVersion());\n+        List<String> tags = new ArrayList<>();\n+        containerImageConfig.tag.ifPresent(tags::add);\n+        tags.addAll(containerImageConfig.tags.orElse(Collections.singletonList(applicationInfo.getVersion())));", "originalCommit": "095d2ef88543fc933dd41253135b56750f0f9c1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM3ODQ2MA==", "url": "https://github.com/quarkusio/quarkus/pull/9040#discussion_r419378460", "bodyText": "Well, I wanted to, but at this point, additionalTags may be empty. While building ContainerImageInfoBuildItem, I use the first tag to build the image name which will be used by docker build command or jib build process.\nThe tag could be extracted from ContainerImageInfoBuildItem.getImage() by splitting on :but I'm not sure this is the cleanest way to do it. Maybe, I should keep the image name and the tags separated. WDYT?", "author": "glefloch", "createdAt": "2020-05-04T11:47:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTMxNTA4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ3NTkxMA==", "url": "https://github.com/quarkusio/quarkus/pull/9040#discussion_r419475910", "bodyText": "Well, I wanted to, but at this point, additionalTags may be empty. While building ContainerImageInfoBuildItem, I use the first tag to build the image name which will be used by docker build command or jib build process.\n\nThe way build steps works is that this method https://github.com/quarkusio/quarkus/pull/9040/files#diff-780e4883fba9afa8b58c67fe3f4d07fdR93 will not be called unless otherwise all the required build items are there.\nAnd from the looks of it (https://github.com/quarkusio/quarkus/pull/9040/files#diff-11cc649f490ec2882648b7efcf89760aR20-R22), additionalTags will at least contain something. Or I am missing something?", "author": "machi1990", "createdAt": "2020-05-04T14:24:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTMxNTA4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ5MjU1NQ==", "url": "https://github.com/quarkusio/quarkus/pull/9040#discussion_r419492555", "bodyText": "Yes it will contains something at this point. But when building ContainerImageInfoBuildItem (https://github.com/quarkusio/quarkus/pull/9040/files#diff-cb1fafe1b90298f02ae4cd91f4120c18R36-R41), I use the first tag as a default one and remove it from additionalTags. Thus, the injected ContainerImageInfoBuildItem.getAdditionalTag may be empty as the first tag has been removed. I don't know if I'm right or if I miss something but I agree about removing this duplicated code.", "author": "glefloch", "createdAt": "2020-05-04T14:47:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTMxNTA4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYzNDI1Nw==", "url": "https://github.com/quarkusio/quarkus/pull/9040#discussion_r420634257", "bodyText": "@machi1990, were you able to have a look?", "author": "glefloch", "createdAt": "2020-05-06T08:45:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTMxNTA4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk3MzcyMg==", "url": "https://github.com/quarkusio/quarkus/pull/9040#discussion_r420973722", "bodyText": "Hi @glefloch sorry I missed your ping.\n\nThus, the injected ContainerImageInfoBuildItem.getAdditionalTag may be empty as the first tag has been removed.\n\nI do not understand the need to add and remove a tag.\nI guess what I was really hoping to see is having the tag handling logic somewhere centralised hiding the bits needed to handle the deprecated quarkus.container-image.tag.  Which will also prove easier to remove the logic in the future once the said property is removed.\nProbably having the container info like name and tags in the ContainerImageInfoBuildItem would be easier and instead of building the image in constructor, you could have methods like:\n\n.getTags() and .getName() (if needed),\n.getBaseImage() that returns the image with first tag (zero indexed tag)\n.getAdditionalmages() - returning rest of images using tag with index > 0 which could be used in DockerProcessor\n.getAdditionalTags()  returning tags with index > 0  used in JibProcessor\netc\n\nProbably @geoand has better ideas, so let's wait for his call and focus on getting the tests to pass till then.", "author": "machi1990", "createdAt": "2020-05-06T17:41:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTMxNTA4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI3NDg4NA==", "url": "https://github.com/quarkusio/quarkus/pull/9040#discussion_r421274884", "bodyText": "Thanks @machi1990, I understood. At this point, all tags can be verify. I moved all tags related logic into ContainerImageInfoBuildItem. I also fixed tests. There is still something weird when quarkus.container-image.tag is missing. I will push once everything is ok", "author": "glefloch", "createdAt": "2020-05-07T06:47:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTMxNTA4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI3NTM4MQ==", "url": "https://github.com/quarkusio/quarkus/pull/9040#discussion_r421275381", "bodyText": "@glefloch Please ping me when you are done.", "author": "geoand", "createdAt": "2020-05-07T06:48:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTMxNTA4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUwMzA1MQ==", "url": "https://github.com/quarkusio/quarkus/pull/9040#discussion_r419503051", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    additionalImageTags.stream().forEach(tag -> {\n          \n          \n            \n                    additionalImageTags.forEach(tag -> {", "author": "geoand", "createdAt": "2020-05-04T15:01:13Z", "path": "extensions/container-image/container-image-docker/deployment/src/main/java/io/quarkus/container/image/docker/deployment/DockerProcessor.java", "diffHunk": "@@ -140,13 +152,30 @@ private void createContainerImage(ContainerImageConfig containerImageConfig, Doc\n                     throw dockerException(new String[] { \"-u\", containerImageConfig.username.get(), \"-p\", \"********\" });\n                 }\n             }\n-            String[] pushArgs = { \"push\", image };\n-            boolean pushSuccessful = ExecUtil.exec(\"docker\", pushArgs);\n-            if (!pushSuccessful) {\n-                throw dockerException(pushArgs);\n+\n+            List<String> imageToPush = new ArrayList<>(additionalImageTags);\n+            imageToPush.add(image);\n+            imageToPush.forEach(this::pushImage);\n+        }\n+    }\n+\n+    private void createAdditionalTags(String image, Set<String> additionalImageTags) {\n+        additionalImageTags.stream().forEach(tag -> {", "originalCommit": "095d2ef88543fc933dd41253135b56750f0f9c1f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUwMzQzOQ==", "url": "https://github.com/quarkusio/quarkus/pull/9040#discussion_r419503439", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    containerImage.getAdditionalTags().stream().forEach(containerizer::withAdditionalTag);\n          \n          \n            \n                    containerImage.getAdditionalTags().forEach(containerizer::withAdditionalTag);", "author": "geoand", "createdAt": "2020-05-04T15:01:46Z", "path": "extensions/container-image/container-image-jib/deployment/src/main/java/io/quarkus/container/image/jib/deployment/JibProcessor.java", "diffHunk": "@@ -108,16 +111,16 @@ public void buildFromNative(ContainerImageConfig containerImageConfig, JibConfig\n \n         JibContainerBuilder jibContainerBuilder = createContainerBuilderFromNative(containerImageConfig, jibConfig,\n                 nativeImage, containerImageLabels);\n-        JibContainer container = containerize(applicationInfo, containerImageConfig, jibContainerBuilder,\n+        containerize(applicationInfo, containerImageConfig, containerImage, jibContainerBuilder,\n                 pushRequest.isPresent());\n \n-        ImageReference targetImage = container.getTargetImage();\n         artifactResultProducer.produce(new ArtifactResultBuildItem(null, \"native-container\", Collections.emptyMap()));\n     }\n \n     private JibContainer containerize(ApplicationInfoBuildItem applicationInfo, ContainerImageConfig containerImageConfig,\n-            JibContainerBuilder jibContainerBuilder, boolean pushRequested) {\n+            ContainerImageInfoBuildItem containerImage, JibContainerBuilder jibContainerBuilder, boolean pushRequested) {\n         Containerizer containerizer = createContainerizer(containerImageConfig, applicationInfo, pushRequested);\n+        containerImage.getAdditionalTags().stream().forEach(containerizer::withAdditionalTag);", "originalCommit": "095d2ef88543fc933dd41253135b56750f0f9c1f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8b363d44bd79fa51e36132433bd77f0060a4fb7b", "url": "https://github.com/quarkusio/quarkus/commit/8b363d44bd79fa51e36132433bd77f0060a4fb7b", "message": "Allow multiple tags for container-image", "committedDate": "2020-05-05T06:55:26Z", "type": "forcePushed"}, {"oid": "fa3634078563a6f430e181fa6bd3a0a2ccf49e71", "url": "https://github.com/quarkusio/quarkus/commit/fa3634078563a6f430e181fa6bd3a0a2ccf49e71", "message": "Allow multiple tags for container-image", "committedDate": "2020-05-08T19:25:22Z", "type": "forcePushed"}, {"oid": "d4d52c7f9c6a799b71d835563c4f2607d62ffa0c", "url": "https://github.com/quarkusio/quarkus/commit/d4d52c7f9c6a799b71d835563c4f2607d62ffa0c", "message": "Allow multiple tags for container-image", "committedDate": "2020-05-09T09:18:20Z", "type": "forcePushed"}, {"oid": "7aa601b0004b52f8d83540fb489358e8fa54c05c", "url": "https://github.com/quarkusio/quarkus/commit/7aa601b0004b52f8d83540fb489358e8fa54c05c", "message": "Allow multiple tags for container-image", "committedDate": "2020-05-09T09:25:32Z", "type": "forcePushed"}, {"oid": "3993b5a298f4145823ddaa4df7c5a55100510c11", "url": "https://github.com/quarkusio/quarkus/commit/3993b5a298f4145823ddaa4df7c5a55100510c11", "message": "Allow multiple tags for container-image", "committedDate": "2020-05-10T13:45:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgxMjc3MQ==", "url": "https://github.com/quarkusio/quarkus/pull/9040#discussion_r422812771", "bodyText": "I would prefer if we used List instead of Set here. That would make it consistent with the rest of the codebase", "author": "geoand", "createdAt": "2020-05-11T06:37:01Z", "path": "extensions/container-image/deployment/src/main/java/io/quarkus/container/image/deployment/ContainerImageConfig.java", "diffHunk": "@@ -26,6 +27,12 @@\n     @ConfigItem(defaultValue = \"${quarkus.application.version:latest}\")\n     public Optional<String> tag;\n \n+    /**\n+     * Additional tags of the container image.\n+     */\n+    @ConfigItem\n+    public Optional<Set<String>> additionalTags;", "originalCommit": "3993b5a298f4145823ddaa4df7c5a55100510c11", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgxMzkzMA==", "url": "https://github.com/quarkusio/quarkus/pull/9040#discussion_r422813930", "bodyText": "This check it's really necessary.", "author": "geoand", "createdAt": "2020-05-11T06:39:51Z", "path": "extensions/container-image/container-image-jib/deployment/src/main/java/io/quarkus/container/image/jib/deployment/JibProcessor.java", "diffHunk": "@@ -131,9 +136,19 @@ private JibContainer containerize(ApplicationInfoBuildItem applicationInfo, Cont\n     }\n \n     private Containerizer createContainerizer(ContainerImageConfig containerImageConfig,\n+            ContainerImageInfoBuildItem containerImage,\n             ApplicationInfoBuildItem applicationInfo, boolean pushRequested) {\n         Containerizer containerizer;\n-        ImageReference imageReference = getImageReference(containerImageConfig, applicationInfo);\n+        ImageReference imageReference = getImageReference(containerImageConfig, containerImage, applicationInfo);\n+\n+        if (!containerImage.getAdditionalTags().isEmpty()) {", "originalCommit": "3993b5a298f4145823ddaa4df7c5a55100510c11", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgxNDc3OQ==", "url": "https://github.com/quarkusio/quarkus/pull/9040#discussion_r422814779", "bodyText": "Can we get rid of the these lambdas please? We really try to avoid them in cases where they bring no real benefit (as they do have a small runtime cost), like here. A simple for loop would be just fine.", "author": "geoand", "createdAt": "2020-05-11T06:41:45Z", "path": "extensions/container-image/container-image-jib/deployment/src/main/java/io/quarkus/container/image/jib/deployment/JibProcessor.java", "diffHunk": "@@ -131,9 +136,19 @@ private JibContainer containerize(ApplicationInfoBuildItem applicationInfo, Cont\n     }\n \n     private Containerizer createContainerizer(ContainerImageConfig containerImageConfig,\n+            ContainerImageInfoBuildItem containerImage,\n             ApplicationInfoBuildItem applicationInfo, boolean pushRequested) {\n         Containerizer containerizer;\n-        ImageReference imageReference = getImageReference(containerImageConfig, applicationInfo);\n+        ImageReference imageReference = getImageReference(containerImageConfig, containerImage, applicationInfo);\n+\n+        if (!containerImage.getAdditionalTags().isEmpty()) {\n+            containerImage.getAdditionalTags().forEach(additionalTag -> {", "originalCommit": "3993b5a298f4145823ddaa4df7c5a55100510c11", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgxNDk0NQ==", "url": "https://github.com/quarkusio/quarkus/pull/9040#discussion_r422814945", "bodyText": "See my other comment about lambdas.", "author": "geoand", "createdAt": "2020-05-11T06:42:11Z", "path": "extensions/container-image/container-image-jib/deployment/src/main/java/io/quarkus/container/image/jib/deployment/JibProcessor.java", "diffHunk": "@@ -109,14 +112,16 @@ public void buildFromNative(ContainerImageConfig containerImageConfig, JibConfig\n         JibContainerBuilder jibContainerBuilder = createContainerBuilderFromNative(containerImageConfig, jibConfig,\n                 nativeImage, containerImageLabels);\n \n-        containerize(applicationInfo, containerImageConfig, jibContainerBuilder, pushRequest.isPresent());\n+        containerize(applicationInfo, containerImageConfig, containerImage, jibContainerBuilder,\n+                pushRequest.isPresent());\n \n         artifactResultProducer.produce(new ArtifactResultBuildItem(null, \"native-container\", Collections.emptyMap()));\n     }\n \n     private JibContainer containerize(ApplicationInfoBuildItem applicationInfo, ContainerImageConfig containerImageConfig,\n-            JibContainerBuilder jibContainerBuilder, boolean pushRequested) {\n-        Containerizer containerizer = createContainerizer(containerImageConfig, applicationInfo, pushRequested);\n+            ContainerImageInfoBuildItem containerImage, JibContainerBuilder jibContainerBuilder, boolean pushRequested) {\n+        Containerizer containerizer = createContainerizer(containerImageConfig, containerImage, applicationInfo, pushRequested);\n+        containerImage.getAdditionalTags().forEach(containerizer::withAdditionalTag);", "originalCommit": "3993b5a298f4145823ddaa4df7c5a55100510c11", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgxNTE0NQ==", "url": "https://github.com/quarkusio/quarkus/pull/9040#discussion_r422815145", "bodyText": "See my other comment about lambdas.", "author": "geoand", "createdAt": "2020-05-11T06:42:39Z", "path": "extensions/container-image/container-image-docker/deployment/src/main/java/io/quarkus/container/image/docker/deployment/DockerProcessor.java", "diffHunk": "@@ -140,13 +151,30 @@ private void createContainerImage(ContainerImageConfig containerImageConfig, Doc\n                     throw dockerException(new String[] { \"-u\", containerImageConfig.username.get(), \"-p\", \"********\" });\n                 }\n             }\n-            String[] pushArgs = { \"push\", image };\n-            boolean pushSuccessful = ExecUtil.exec(\"docker\", pushArgs);\n-            if (!pushSuccessful) {\n-                throw dockerException(pushArgs);\n+\n+            List<String> imageToPush = new ArrayList<>(additionalImageTags);\n+            imageToPush.add(image);\n+            imageToPush.forEach(this::pushImage);\n+        }\n+    }\n+\n+    private void createAdditionalTags(String image, List<String> additionalImageTags) {\n+        additionalImageTags.forEach(tag -> {", "originalCommit": "3993b5a298f4145823ddaa4df7c5a55100510c11", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgxNTU2MA==", "url": "https://github.com/quarkusio/quarkus/pull/9040#discussion_r422815560", "bodyText": "See my other comment about lambdas.", "author": "geoand", "createdAt": "2020-05-11T06:43:39Z", "path": "extensions/container-image/container-image-docker/deployment/src/main/java/io/quarkus/container/image/docker/deployment/DockerProcessor.java", "diffHunk": "@@ -140,13 +151,30 @@ private void createContainerImage(ContainerImageConfig containerImageConfig, Doc\n                     throw dockerException(new String[] { \"-u\", containerImageConfig.username.get(), \"-p\", \"********\" });\n                 }\n             }\n-            String[] pushArgs = { \"push\", image };\n-            boolean pushSuccessful = ExecUtil.exec(\"docker\", pushArgs);\n-            if (!pushSuccessful) {\n-                throw dockerException(pushArgs);\n+\n+            List<String> imageToPush = new ArrayList<>(additionalImageTags);\n+            imageToPush.add(image);\n+            imageToPush.forEach(this::pushImage);", "originalCommit": "3993b5a298f4145823ddaa4df7c5a55100510c11", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b5ccb8da249bf5ac6aa8db024debf6b284a50db4", "url": "https://github.com/quarkusio/quarkus/commit/b5ccb8da249bf5ac6aa8db024debf6b284a50db4", "message": "Allow multiple tags for container-image", "committedDate": "2020-05-11T07:34:14Z", "type": "commit"}, {"oid": "b5ccb8da249bf5ac6aa8db024debf6b284a50db4", "url": "https://github.com/quarkusio/quarkus/commit/b5ccb8da249bf5ac6aa8db024debf6b284a50db4", "message": "Allow multiple tags for container-image", "committedDate": "2020-05-11T07:34:14Z", "type": "forcePushed"}]}