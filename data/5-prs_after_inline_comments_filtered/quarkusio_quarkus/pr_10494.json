{"pr_number": 10494, "pr_title": "Created uber-jar test for multi-module projects", "pr_createdAt": "2020-07-06T11:28:53Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/10494", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE2MDM1MQ==", "url": "https://github.com/quarkusio/quarkus/pull/10494#discussion_r450160351", "bodyText": "If this is the actual response, then something is wrong...\n    @GET\n    @Produces(MediaType.TEXT_PLAIN)\n    public String hello() {\n        return \"hello \" + common.getName();\n    }\n\nso the response should be hello common", "author": "geoand", "createdAt": "2020-07-06T11:34:16Z", "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/MultiModuleUberJarTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package io.quarkus.gradle;\n+\n+import org.junit.jupiter.api.Test;\n+import org.apache.commons.io.FileUtils;\n+import static org.awaitility.Awaitility.await;\n+import static io.quarkus.gradle.LaunchUtils.launch;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+import org.awaitility.core.ConditionTimeoutException;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static io.quarkus.gradle.LaunchUtils.dumpFileContentOnFailure;\n+\n+public class MultiModuleUberJarTest extends QuarkusGradleWrapperTestBase {\n+    private static Future<?> jarRun;\n+\n+    @Test\n+    public void testUberJarForMultiModule() throws Exception {\n+\n+        final File projectDir = getProjectDir(\"uber-jar-for-multi-module-project\");\n+        runGradleWrapper(projectDir, \":application:quarkusBuild\");\n+\n+        final Path applicationJar = projectDir.toPath().resolve(\"application\").resolve(\"build\");\n+        assertThat(applicationJar).exists();\n+        Path jar =applicationJar.resolve(\"application-unspecified-runner.jar\");\n+        assertThat(jar).exists();\n+\n+        File output = new File(projectDir, \"application/build/output.log\");\n+        output.createNewFile();\n+        Process process = launch(jar, output);\n+        try {\n+            // Wait until server up\n+            dumpFileContentOnFailure(() -> {\n+                await()\n+                        .pollDelay(1, TimeUnit.SECONDS)\n+                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/hello\", 200));\n+                return null;\n+            }, output, ConditionTimeoutException.class);\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+\n+            // test that the http response is correct \n+            assertThat(DevModeTestUtils.getHttpResponse(\"/hello\", () -> {\n+                return jarRun == null ? null : jarRun.isDone() ? \"jar run mode has terminated\" : null;\n+            }).equals(\"hello\"));", "originalCommit": "2bde50d3904bef689bae608fd4958bb2fb14fa56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE2MTE0Mg==", "url": "https://github.com/quarkusio/quarkus/pull/10494#discussion_r450161142", "bodyText": "Oh the response was hello common only on localhost/8080 , I'll check this again", "author": "Garima829", "createdAt": "2020-07-06T11:35:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE2MDM1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE2NzMxNA==", "url": "https://github.com/quarkusio/quarkus/pull/10494#discussion_r450167314", "bodyText": "Did you now run the test and make sure it passes?", "author": "geoand", "createdAt": "2020-07-06T11:49:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE2MDM1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE2ODg1OQ==", "url": "https://github.com/quarkusio/quarkus/pull/10494#discussion_r450168859", "bodyText": "Yes I did, and weird thing is I checked this earlier too, and it was passing then as well, even though the response on http://0.0.0.0:8080/hello was hello common both the times", "author": "Garima829", "createdAt": "2020-07-06T11:52:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE2MDM1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE3NTQ2NA==", "url": "https://github.com/quarkusio/quarkus/pull/10494#discussion_r450175464", "bodyText": "OK, I'll run it later on and make sure everything is OK", "author": "geoand", "createdAt": "2020-07-06T12:06:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE2MDM1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE3NzU0NA==", "url": "https://github.com/quarkusio/quarkus/pull/10494#discussion_r450177544", "bodyText": "Should I mark it ready for review ?", "author": "Garima829", "createdAt": "2020-07-06T12:11:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE2MDM1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE3OTc3Mg==", "url": "https://github.com/quarkusio/quarkus/pull/10494#discussion_r450179772", "bodyText": "Sure", "author": "geoand", "createdAt": "2020-07-06T12:15:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE2MDM1MQ=="}], "type": "inlineReview"}, {"oid": "954e63b2d39cb275162268471208cb91cde77215", "url": "https://github.com/quarkusio/quarkus/commit/954e63b2d39cb275162268471208cb91cde77215", "message": "Created uber-jar test for multi-module projects", "committedDate": "2020-07-06T11:44:04Z", "type": "forcePushed"}, {"oid": "ab08cc722f113932942d5a0eebccc7d101e78787", "url": "https://github.com/quarkusio/quarkus/commit/ab08cc722f113932942d5a0eebccc7d101e78787", "message": "Created uber-jar test for multi-module projects", "committedDate": "2020-07-06T12:17:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMzODcxMw==", "url": "https://github.com/quarkusio/quarkus/pull/10494#discussion_r450338713", "bodyText": "This seems like it's not used", "author": "geoand", "createdAt": "2020-07-06T16:25:55Z", "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/MultiModuleUberJarTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.quarkus.gradle;\n+\n+import static io.quarkus.gradle.LaunchUtils.dumpFileContentOnFailure;\n+import static io.quarkus.gradle.LaunchUtils.launch;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.await;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+\n+public class MultiModuleUberJarTest extends QuarkusGradleWrapperTestBase {\n+    private static Future<?> jarRun;", "originalCommit": "ab08cc722f113932942d5a0eebccc7d101e78787", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM0NTk5Nw==", "url": "https://github.com/quarkusio/quarkus/pull/10494#discussion_r450345997", "bodyText": "Nevermind, my mistake", "author": "geoand", "createdAt": "2020-07-06T16:37:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMzODcxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM0NjMzMw==", "url": "https://github.com/quarkusio/quarkus/pull/10494#discussion_r450346333", "bodyText": "No need to have a variable for this", "author": "geoand", "createdAt": "2020-07-06T16:38:30Z", "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/MultiModuleUberJarTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.quarkus.gradle;\n+\n+import static io.quarkus.gradle.LaunchUtils.dumpFileContentOnFailure;\n+import static io.quarkus.gradle.LaunchUtils.launch;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.await;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+\n+public class MultiModuleUberJarTest extends QuarkusGradleWrapperTestBase {\n+    private static Future<?> jarRun;\n+\n+    @Test\n+    public void testUberJarForMultiModule() throws Exception {\n+\n+        final File projectDir = getProjectDir(\"uber-jar-for-multi-module-project\");\n+        runGradleWrapper(projectDir, \":application:quarkusBuild\");\n+\n+        final Path applicationJar = projectDir.toPath().resolve(\"application\").resolve(\"build\");\n+        assertThat(applicationJar).exists();\n+        Path jar = applicationJar.resolve(\"application-unspecified-runner.jar\");\n+        assertThat(jar).exists();\n+\n+        File output = new File(projectDir, \"application/build/output.log\");\n+        output.createNewFile();\n+        Process process = launch(jar, output);\n+        try {\n+            // Wait until server up\n+            dumpFileContentOnFailure(() -> {\n+                await()\n+                        .pollDelay(1, TimeUnit.SECONDS)\n+                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/hello\", 200));\n+                return null;\n+            }, output, ConditionTimeoutException.class);\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+\n+            // test that the http response is correct\n+            assertThat(DevModeTestUtils.getHttpResponse(\"/hello\", () -> {\n+                return jarRun == null ? null : jarRun.isDone() ? \"jar run mode has terminated\" : null;\n+            }).equals(\"hello common\"));\n+        } finally {\n+            process.destroy();\n+        }\n+    }\n+\n+    private void assertThatOutputWorksCorrectly(String logs) {\n+        assertThat(logs.isEmpty()).isFalse();\n+        String infoLogLevel = \"INFO\";", "originalCommit": "ab08cc722f113932942d5a0eebccc7d101e78787", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM2MTg4OA==", "url": "https://github.com/quarkusio/quarkus/pull/10494#discussion_r450361888", "bodyText": "Okayy", "author": "Garima829", "createdAt": "2020-07-06T17:05:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM0NjMzMw=="}], "type": "inlineReview"}, {"oid": "79f7104cec300a0d74ee0084e1f1864c87a13b88", "url": "https://github.com/quarkusio/quarkus/commit/79f7104cec300a0d74ee0084e1f1864c87a13b88", "message": "Created uber-jar test for multi-module projects", "committedDate": "2020-07-06T17:18:34Z", "type": "commit"}, {"oid": "79f7104cec300a0d74ee0084e1f1864c87a13b88", "url": "https://github.com/quarkusio/quarkus/commit/79f7104cec300a0d74ee0084e1f1864c87a13b88", "message": "Created uber-jar test for multi-module projects", "committedDate": "2020-07-06T17:18:34Z", "type": "forcePushed"}]}