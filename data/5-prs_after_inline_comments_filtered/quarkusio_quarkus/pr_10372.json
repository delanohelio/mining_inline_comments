{"pr_number": 10372, "pr_title": "Codestarts phase 1: Allow extensions to influence newly generated apps", "pr_createdAt": "2020-06-30T13:49:59Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/10372", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwMzgxMg==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r447703812", "bodyText": "@aloubyansky \u2b06\ufe0f this is my dirty hack until we find a nicer solution", "author": "ia3andy", "createdAt": "2020-06-30T13:57:54Z", "path": "independent-projects/tools/platform-descriptor-resolver-json/src/main/java/io/quarkus/platform/descriptor/resolver/json/QuarkusJsonPlatformDescriptorResolver.java", "diffHunk": "@@ -451,10 +451,11 @@ private QuarkusPlatformDescriptor loadPlatformDescriptor(ArtifactResolver mvn, f\n         // check whether the quarkus-platform-descriptor-json used in the platform is already on the classpath\n         final String pomPropsPath = \"META-INF/maven/\" + ToolsConstants.IO_QUARKUS + \"/\" + QUARKUS_PLATFORM_DESCRIPTOR_JSON\n                 + \"/pom.properties\";\n-        final InputStream is = getCpResourceAsStream(pomPropsPath);\n-        if (is != null) {\n+        final URL url = Thread.currentThread().getContextClassLoader().getResource(pomPropsPath);\n+        // FIXME ia3andy temporary hack to work with jars\n+        if (url != null && !url.toString().startsWith(\"jar:\")) {\n             final Properties props = new Properties();", "originalCommit": "0dd36fa6b934ecf76ce28416f17029d073ce90ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NDg5Ng==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r447974896", "bodyText": "Why do you care where it is coming from?", "author": "aloubyansky", "createdAt": "2020-06-30T20:58:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwMzgxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODExNjQwMA==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r448116400", "bodyText": "@aloubyansky TBH, I was just trying to make it work to continue coding the codestarts.\nBefore, it was using a ClassPathResourceLoader as soon as it was able to resolve the properties (as a stream), but this loader doesn't work with jars when getting Path.\nMaybe we should just improve the ClassPathResourceLoader to make it a little smarter and support jars? Is this what you meant when pointing me to ClassPathUtils?", "author": "ia3andy", "createdAt": "2020-07-01T05:01:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwMzgxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODExODk2NQ==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r448118965", "bodyText": "I don't understand what this change is about, tbh. It will load the props whether they are in a JAR or a dir.", "author": "aloubyansky", "createdAt": "2020-07-01T05:12:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwMzgxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyNTk3Ng==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r448125976", "bodyText": "@aloubyansky look bellow, when the properties is read successfully, it sets the classloader and, it then uses the ClassPathResourceLoader, only when the classloader is null that it will use the ZipResourceLoader.\nWe can just ignore my change here, this is just a temporary hack (it was failing without it).", "author": "ia3andy", "createdAt": "2020-07-01T05:38:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwMzgxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwNDA2MA==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r447704060", "bodyText": "What's the difference between them? I thought codestarts were example code?", "author": "gastaldi", "createdAt": "2020-06-30T13:58:12Z", "path": "devtools/maven/src/main/java/io/quarkus/maven/CreateProjectMojo.java", "diffHunk": "@@ -74,6 +74,12 @@\n     @Parameter(property = \"projectVersion\")\n     private String projectVersion;\n \n+    @Parameter(property = \"codestartsEnabled\")\n+    private Boolean codestartsEnabled;\n+\n+    @Parameter(property = \"withExampleCode\")\n+    private Boolean withExampleCode;", "originalCommit": "0dd36fa6b934ecf76ce28416f17029d073ce90ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwNjY3NQ==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r447706675", "bodyText": "@gastaldi one is temporary, codestartsEnabled  is a hack to activate the codestarts codegen until this replace the existing one once and for all.\nwithExampleCode is letting you decide if you want example code or not, example if you want reasteasy, but an empty project (without the ExampleResource)..", "author": "ia3andy", "createdAt": "2020-06-30T14:01:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwNDA2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwNDgyMg==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r447704822", "bodyText": "I am not sure why I renamed it, I will rename it back to the original name later", "author": "ia3andy", "createdAt": "2020-06-30T13:59:07Z", "path": "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/codegen/buildtool/GradleGenerator.java", "diffHunk": "@@ -20,7 +20,7 @@\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.function.Consumer;\n \n-public final class GradleBuildFilesCreator {\n+public final class GradleGenerator {", "originalCommit": "0dd36fa6b934ecf76ce28416f17029d073ce90ae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwODU3Mg==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r447708572", "bodyText": "url may be null", "author": "gastaldi", "createdAt": "2020-06-30T14:04:02Z", "path": "independent-projects/tools/devtools-common/src/main/java/io/quarkus/platform/descriptor/loader/json/ClassPathResourceLoader.java", "diffHunk": "@@ -16,6 +19,13 @@ public ClassPathResourceLoader(ClassLoader cl) {\n         this.cl = cl;\n     }\n \n+    @Override\n+    public <T> T loadResourcePath(String name, ResourcePathConsumer<T> consumer) throws IOException {\n+        final URL url = cl.getResource(name);\n+        final File file = ResourceLoaders.getResourceFile(url, name);", "originalCommit": "0dd36fa6b934ecf76ce28416f17029d073ce90ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwOTYyNQ==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r447709625", "bodyText": "Ah, ResourceLoaders.getResourceFile throws an exception if that happens, nvm", "author": "gastaldi", "createdAt": "2020-06-30T14:05:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwODU3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwODc5MQ==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r447708791", "bodyText": "This is strange. name should never be null or empty IMHO", "author": "gastaldi", "createdAt": "2020-06-30T14:04:20Z", "path": "independent-projects/tools/devtools-common/src/main/java/io/quarkus/platform/descriptor/loader/json/DirectoryResourceLoader.java", "diffHunk": "@@ -18,16 +17,16 @@ public DirectoryResourceLoader(Path dir) {\n     }\n \n     @Override\n-    public <T> T loadResource(String name, ResourceInputStreamConsumer<T> consumer) throws IOException {\n-        Path resource = dir.resolve(name);\n-        if (!Files.exists(resource)) {\n-            throw new IOException(\"Failed to locate \" + resource);\n+    public <T> T loadResourcePath(String name, ResourcePathConsumer<T> consumer) throws IOException {\n+        Path path;\n+        if (name == null || name.isEmpty()) {\n+            path = dir;", "originalCommit": "0dd36fa6b934ecf76ce28416f17029d073ce90ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODExMjM4MQ==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r448112381", "bodyText": "I think I did that to be able to load the root directory (for file listing). I don't really remember why I added it, and since the codestart directory is never the root, we should be fine removing it..", "author": "ia3andy", "createdAt": "2020-07-01T04:45:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwODc5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcyMjI0NA==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r447722244", "bodyText": "This part is pretty \"raw\" for now and could be improved later for sure", "author": "ia3andy", "createdAt": "2020-06-30T14:21:49Z", "path": "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/codegen/codestarts/CodestartProcessor.java", "diffHunk": "@@ -0,0 +1,148 @@\n+package io.quarkus.devtools.project.codegen.codestarts;\n+\n+import static io.quarkus.devtools.project.codegen.codestarts.Codestart.BASE_LANGUAGE;\n+\n+import io.fabric8.maven.Maven;\n+import io.fabric8.maven.merge.SmartModelMerger;\n+import io.quarkus.platform.descriptor.QuarkusPlatformDescriptor;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+import org.apache.maven.model.Model;\n+\n+final class CodestartProcessor {\n+\n+    private CodestartProcessor() {\n+    }\n+\n+    static void processCodestart(final QuarkusPlatformDescriptor descriptor, final Codestart codestart,\n+            final String languageName, final Path targetDirectory, final Map<String, Object> data) {\n+        try {\n+            descriptor.loadResourcePath(codestart.getResourceName(), p -> {\n+                resolveDirectoriesToProcessAsStream(p, languageName)\n+                        .forEach(dirPath -> processCodestartDir(languageName, dirPath, targetDirectory,\n+                                CodestartData.mergeData(codestart, languageName, data)));\n+                return null;\n+            });\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+\n+    }\n+\n+    static Stream<Path> resolveDirectoriesToProcessAsStream(final Path sourceDirectory, final String languageName)\n+            throws IOException {\n+        if (!Files.isDirectory(sourceDirectory)) {\n+            throw new IllegalStateException(\"Codestart sourceDirectory is not a directory: \" + sourceDirectory);\n+        }\n+        return Stream.of(BASE_LANGUAGE, languageName)\n+                .map(sourceDirectory::resolve)\n+                .filter(Files::isDirectory);\n+    }\n+\n+    static void processCodestartDir(final String languageName,\n+            final Path sourceDirectory,\n+            final Path targetProjectDirectory,\n+            final Map<String, Object> data) {\n+        try {\n+            Files.walk(sourceDirectory)\n+                    .filter(path -> !path.equals(sourceDirectory))\n+                    .forEach(path -> {\n+                        try {\n+                            final Path relativePath = sourceDirectory.relativize(path);\n+                            if (Files.isDirectory(path)) {\n+                                return;\n+                            } else {\n+                                final String fileName = relativePath.getFileName().toString();", "originalCommit": "0dd36fa6b934ecf76ce28416f17029d073ce90ae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NzAyOQ==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r447977029", "bodyText": "Is the test actually resolving the 1.5.2.Final platform descriptor?", "author": "aloubyansky", "createdAt": "2020-06-30T21:02:30Z", "path": "integration-tests/devtools/src/test/java/io/quarkus/devtools/project/codegen/codestarts/CodestartProjectTest.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package io.quarkus.devtools.project.codegen.codestarts;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.bootstrap.model.AppArtifactKey;\n+import io.quarkus.devtools.PlatformAwareTestBase;\n+import io.quarkus.devtools.ProjectTestUtil;\n+\n+class CodestartProjectTest extends PlatformAwareTestBase {\n+\n+    private static final Path projectPath = Paths.get(\"target/codestarts-test\");\n+\n+    @BeforeAll\n+    static void setUp() throws IOException {\n+        ProjectTestUtil.delete(projectPath.toFile());\n+    }\n+\n+    private Map<String, Object> getTestInputData() {\n+        return getTestInputData(null);\n+    }\n+\n+    private Map<String, Object> getTestInputData(final Map<String, Object> override) {\n+        final HashMap<String, Object> data = new HashMap<>();\n+        data.put(\"project.version\", \"1.0.0-codestart\");\n+        data.put(\"quarkus.platform.group-id\", getPlatformDescriptor().getBomGroupId());\n+        data.put(\"quarkus.platform.artifact-id\", getPlatformDescriptor().getBomArtifactId());\n+        data.put(\"quarkus.platform.version\", \"1.5.2.Final\");\n+        data.put(\"quarkus.plugin.group-id\", \"io.quarkus\");\n+        data.put(\"quarkus.plugin.artifact-id\", \"quarkus-maven-plugin\");\n+        data.put(\"quarkus.plugin.version\", \"1.5.2.Final\");", "originalCommit": "0dd36fa6b934ecf76ce28416f17029d073ce90ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODExNzAxOA==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r448117018", "bodyText": "@aloubyansky nop, it's just using those as data in the buildfile. The codestarts code is not resolving anything, it just gets an already resolved platformDescriptor as input.", "author": "ia3andy", "createdAt": "2020-07-01T05:04:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NzAyOQ=="}], "type": "inlineReview"}, {"oid": "a752c4d930cec8af58a368935678989c1f7902f4", "url": "https://github.com/quarkusio/quarkus/commit/a752c4d930cec8af58a368935678989c1f7902f4", "message": "Solve ClassPathResourceLoader issue with jar\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`", "committedDate": "2020-07-01T14:36:17Z", "type": "forcePushed"}, {"oid": "fcb8f616eb6dfd78c5289ffe19c7817122588994", "url": "https://github.com/quarkusio/quarkus/commit/fcb8f616eb6dfd78c5289ffe19c7817122588994", "message": "Solve ClassPathResourceLoader issue with jar\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`", "committedDate": "2020-07-07T10:31:27Z", "type": "forcePushed"}, {"oid": "84ac8d8adb7255c32493076da7c9b2970f64526d", "url": "https://github.com/quarkusio/quarkus/commit/84ac8d8adb7255c32493076da7c9b2970f64526d", "message": "Solve ClassPathResourceLoader issue with jar\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`", "committedDate": "2020-07-07T10:34:13Z", "type": "forcePushed"}, {"oid": "a1bc06e7af310fa5b95a1dac9f4e7568b4713195", "url": "https://github.com/quarkusio/quarkus/commit/a1bc06e7af310fa5b95a1dac9f4e7568b4713195", "message": "Solve ClassPathResourceLoader issue with jar\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`", "committedDate": "2020-07-07T10:50:09Z", "type": "forcePushed"}, {"oid": "bc973131fe41db98f2c5f8d7ddb5874fd97947e2", "url": "https://github.com/quarkusio/quarkus/commit/bc973131fe41db98f2c5f8d7ddb5874fd97947e2", "message": "Solve ClassPathResourceLoader issue with jar\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`", "committedDate": "2020-07-07T11:44:07Z", "type": "forcePushed"}, {"oid": "2110687fbe29fc66303721629eefdf2bbb5fa5d8", "url": "https://github.com/quarkusio/quarkus/commit/2110687fbe29fc66303721629eefdf2bbb5fa5d8", "message": "Solve ClassPathResourceLoader issue with jar\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`", "committedDate": "2020-07-07T11:48:34Z", "type": "forcePushed"}, {"oid": "ba9039d9aafa0f73445f1c7e0294663fc28c4b45", "url": "https://github.com/quarkusio/quarkus/commit/ba9039d9aafa0f73445f1c7e0294663fc28c4b45", "message": "Solve ClassPathResourceLoader issue with jar\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`", "committedDate": "2020-07-07T12:24:18Z", "type": "forcePushed"}, {"oid": "3ce4e803f3509b1095dffbfb2bc8ea270df9dd8c", "url": "https://github.com/quarkusio/quarkus/commit/3ce4e803f3509b1095dffbfb2bc8ea270df9dd8c", "message": "Solve ClassPathResourceLoader issue with jar\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`", "committedDate": "2020-07-07T12:28:29Z", "type": "forcePushed"}, {"oid": "b5b0e7a02e93e00facb0cef751135fcbe443e43c", "url": "https://github.com/quarkusio/quarkus/commit/b5b0e7a02e93e00facb0cef751135fcbe443e43c", "message": "Solve ClassPathResourceLoader issue with jar\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`", "committedDate": "2020-07-07T13:31:47Z", "type": "forcePushed"}, {"oid": "67cf27a0ea34c5fa0d879ee42415121bb7398f3f", "url": "https://github.com/quarkusio/quarkus/commit/67cf27a0ea34c5fa0d879ee42415121bb7398f3f", "message": "Solve ClassPathResourceLoader issue with jar\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`", "committedDate": "2020-07-07T14:22:59Z", "type": "forcePushed"}, {"oid": "c09c6e1d61b5119164da96a7d4da89f4d7973dcf", "url": "https://github.com/quarkusio/quarkus/commit/c09c6e1d61b5119164da96a7d4da89f4d7973dcf", "message": "Solve ClassPathResourceLoader issue with jar\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`", "committedDate": "2020-07-07T14:39:22Z", "type": "forcePushed"}, {"oid": "6846309c87f1499762a1165be2aff0e1c6235ca2", "url": "https://github.com/quarkusio/quarkus/commit/6846309c87f1499762a1165be2aff0e1c6235ca2", "message": "Solve ClassPathResourceLoader issue with jar\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`", "committedDate": "2020-07-07T14:40:45Z", "type": "forcePushed"}, {"oid": "58b87282b74ffda79a46758f0e3b46b222476ad6", "url": "https://github.com/quarkusio/quarkus/commit/58b87282b74ffda79a46758f0e3b46b222476ad6", "message": "Handle YAML/Properties config and add optaplanner-example", "committedDate": "2020-07-09T09:45:27Z", "type": "forcePushed"}, {"oid": "4a3265268139e58ae90f01ee5d9ca51c4092876a", "url": "https://github.com/quarkusio/quarkus/commit/4a3265268139e58ae90f01ee5d9ca51c4092876a", "message": "Handle YAML/Properties config and add optaplanner-example", "committedDate": "2020-07-09T09:52:56Z", "type": "forcePushed"}, {"oid": "de79dfa591ace663bc02708f0dd822e843d5c17f", "url": "https://github.com/quarkusio/quarkus/commit/de79dfa591ace663bc02708f0dd822e843d5c17f", "message": "Handle YAML/Properties config and add optaplanner-example", "committedDate": "2020-07-09T09:55:40Z", "type": "forcePushed"}, {"oid": "02de3f5385717305e3f5c300a126ba83c870297c", "url": "https://github.com/quarkusio/quarkus/commit/02de3f5385717305e3f5c300a126ba83c870297c", "message": "Handle YAML/Properties config and add optaplanner-example", "committedDate": "2020-07-09T15:23:53Z", "type": "forcePushed"}, {"oid": "4ca940b353f04456b408096fce0ab4c86c1cb10f", "url": "https://github.com/quarkusio/quarkus/commit/4ca940b353f04456b408096fce0ab4c86c1cb10f", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`", "committedDate": "2020-07-09T15:33:39Z", "type": "forcePushed"}, {"oid": "de02d88276908c4c20c6a3467d06e3086c07696e", "url": "https://github.com/quarkusio/quarkus/commit/de02d88276908c4c20c6a3467d06e3086c07696e", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`", "committedDate": "2020-07-10T10:50:36Z", "type": "forcePushed"}, {"oid": "6d6e76a36ab94c90db49ef793919cba6e202a8d7", "url": "https://github.com/quarkusio/quarkus/commit/6d6e76a36ab94c90db49ef793919cba6e202a8d7", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`", "committedDate": "2020-07-10T10:59:51Z", "type": "forcePushed"}, {"oid": "175f4461664d15b5758f5a5f45a1a62cb6e399f3", "url": "https://github.com/quarkusio/quarkus/commit/175f4461664d15b5758f5a5f45a1a62cb6e399f3", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`", "committedDate": "2020-07-10T11:01:06Z", "type": "forcePushed"}, {"oid": "bceb563b0a1fae8d56435aa2c27a1572382902ba", "url": "https://github.com/quarkusio/quarkus/commit/bceb563b0a1fae8d56435aa2c27a1572382902ba", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests", "committedDate": "2020-07-10T14:43:01Z", "type": "forcePushed"}, {"oid": "8779eecdd20ee8775e5559a44314636f09cd35bd", "url": "https://github.com/quarkusio/quarkus/commit/8779eecdd20ee8775e5559a44314636f09cd35bd", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests", "committedDate": "2020-07-20T08:10:15Z", "type": "forcePushed"}, {"oid": "159a4ed38e7aaad4048cc5cfdba942b44f0c2662", "url": "https://github.com/quarkusio/quarkus/commit/159a4ed38e7aaad4048cc5cfdba942b44f0c2662", "message": "Use descriptive processors for codestarts", "committedDate": "2020-07-21T15:32:52Z", "type": "forcePushed"}, {"oid": "b9075aef8ca49612fe2b022844fcdc3cc9e76f11", "url": "https://github.com/quarkusio/quarkus/commit/b9075aef8ca49612fe2b022844fcdc3cc9e76f11", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts", "committedDate": "2020-07-22T12:39:00Z", "type": "forcePushed"}, {"oid": "ba5bbd61e9159fb45dd09f33119fec3c433bba3f", "url": "https://github.com/quarkusio/quarkus/commit/ba5bbd61e9159fb45dd09f33119fec3c433bba3f", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts", "committedDate": "2020-07-22T14:11:01Z", "type": "forcePushed"}, {"oid": "75078e95780201356ccf19f7d4dce7dde0b72817", "url": "https://github.com/quarkusio/quarkus/commit/75078e95780201356ccf19f7d4dce7dde0b72817", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts", "committedDate": "2020-07-24T16:04:36Z", "type": "forcePushed"}, {"oid": "72a5351c3a26a066a81d0ce3bea5624707f40b2a", "url": "https://github.com/quarkusio/quarkus/commit/72a5351c3a26a066a81d0ce3bea5624707f40b2a", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts", "committedDate": "2020-07-28T14:43:29Z", "type": "forcePushed"}, {"oid": "9a6a30f3e4b8d8bc7fabe3a1cab997557125f703", "url": "https://github.com/quarkusio/quarkus/commit/9a6a30f3e4b8d8bc7fabe3a1cab997557125f703", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts", "committedDate": "2020-07-28T15:12:04Z", "type": "forcePushed"}, {"oid": "795089f7423d690120576b2333f38a9e20fa30dd", "url": "https://github.com/quarkusio/quarkus/commit/795089f7423d690120576b2333f38a9e20fa30dd", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts", "committedDate": "2020-07-28T15:14:26Z", "type": "forcePushed"}, {"oid": "0c4fa42540357982f8ca3c863f72347add249524", "url": "https://github.com/quarkusio/quarkus/commit/0c4fa42540357982f8ca3c863f72347add249524", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts", "committedDate": "2020-07-28T15:25:47Z", "type": "forcePushed"}, {"oid": "abf7fd83c8cd746924757e480a1bb33900c9f2b9", "url": "https://github.com/quarkusio/quarkus/commit/abf7fd83c8cd746924757e480a1bb33900c9f2b9", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts", "committedDate": "2020-07-28T15:27:29Z", "type": "forcePushed"}, {"oid": "1bc20d90a3537ee029b9e3419de5e276718a08eb", "url": "https://github.com/quarkusio/quarkus/commit/1bc20d90a3537ee029b9e3419de5e276718a08eb", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts", "committedDate": "2020-07-28T15:34:29Z", "type": "forcePushed"}, {"oid": "f70b7516ae11fc44363225d506637cd25d6f6862", "url": "https://github.com/quarkusio/quarkus/commit/f70b7516ae11fc44363225d506637cd25d6f6862", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts", "committedDate": "2020-07-28T15:44:55Z", "type": "forcePushed"}, {"oid": "88efcc09a2a93208fb603565c5030273727f20cc", "url": "https://github.com/quarkusio/quarkus/commit/88efcc09a2a93208fb603565c5030273727f20cc", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts", "committedDate": "2020-07-29T07:16:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjExODQ1Mw==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462118453", "bodyText": "shouldn't this file and whole optaplanner example be pushed into optaplanner extension rather than in the bunlded/platform level  descriptors ?", "author": "maxandersen", "createdAt": "2020-07-29T08:11:45Z", "path": "devtools/platform-descriptor-json/src/main/resources/codestarts/optaplanner-example/java/src/main/java/org/acme/optaplanner/bootstrap/DemoDataGenerator.java", "diffHunk": "@@ -0,0 +1,194 @@\n+package org.acme.optaplanner.bootstrap;", "originalCommit": "88efcc09a2a93208fb603565c5030273727f20cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEyMDcxMQ==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462120711", "bodyText": "Of course, same for Qute and RestEasy but \"During phase 1 (and until the api is more stable), all the codestarts are embeded in quarkus (and not yet part of extensions)\".\nI chose to implement this extension because I knew it was a bit complex therefore good to catch problems..", "author": "ia3andy", "createdAt": "2020-07-29T08:15:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjExODQ1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0NDA4Mw==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462144083", "bodyText": "what happens if example has both yaml and yml ? :)", "author": "maxandersen", "createdAt": "2020-07-29T08:53:50Z", "path": "independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/CodestartLoader.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package io.quarkus.devtools.codestarts;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.commons.io.FilenameUtils;\n+\n+final class CodestartLoader {\n+    private static final ObjectMapper YAML_MAPPER = new ObjectMapper(new YAMLFactory())\n+            .enable(DeserializationFeature.READ_ENUMS_USING_TO_STRING)\n+            .enable(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS);\n+\n+    private static final String CODESTARTS_DIR_BUNDLED = \"bundled-codestarts\";\n+    private static final String CODESTARTS_DIR_FROM_EXTENSIONS = \"codestarts\";\n+\n+    private CodestartLoader() {\n+    }\n+\n+    public static List<Codestart> loadAllCodestarts(CodestartInput input) throws IOException {\n+        return Stream.concat(loadBundledCodestarts(input).stream(),\n+                loadCodestartsFromExtensions(input).stream()).collect(Collectors.toList());\n+    }\n+\n+    public static Collection<Codestart> loadBundledCodestarts(CodestartInput input) throws IOException {\n+        return loadCodestarts(input.getResourceLoader(), CODESTARTS_DIR_BUNDLED);\n+    }\n+\n+    public static Collection<Codestart> loadCodestartsFromExtensions(CodestartInput input)\n+            throws IOException {\n+        // TODO resolve codestarts which live inside extensions. Using a directory is just a temporary workaround.\n+        return loadCodestarts(input.getResourceLoader(), CODESTARTS_DIR_FROM_EXTENSIONS);\n+    }\n+\n+    // Visible for testing\n+    static Collection<Codestart> loadCodestarts(final CodestartResourceLoader resourceLoader, final String directoryName)\n+            throws IOException {\n+        return resourceLoader.loadResourceAsPath(directoryName,\n+                path -> Files.walk(path)\n+                        .filter(p -> p.getFileName().toString().matches(\"codestart\\\\.ya?ml$\"))", "originalCommit": "88efcc09a2a93208fb603565c5030273727f20cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0MzIzNg==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462343236", "bodyText": "I will remove the support for yaml", "author": "ia3andy", "createdAt": "2020-07-29T14:28:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0NDA4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0NzEwMg==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462147102", "bodyText": "that todo seems important to fix?", "author": "maxandersen", "createdAt": "2020-07-29T08:58:26Z", "path": "independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/CodestartProcessor.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package io.quarkus.devtools.codestarts;\n+\n+import static io.quarkus.devtools.codestarts.Codestart.BASE_LANGUAGE;\n+\n+import io.quarkus.devtools.codestarts.reader.CodestartFile;\n+import io.quarkus.devtools.codestarts.reader.CodestartFileReader;\n+import io.quarkus.devtools.codestarts.strategy.CodestartFileStrategy;\n+import io.quarkus.devtools.codestarts.strategy.CodestartFileStrategyHandler;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+final class CodestartProcessor {\n+\n+    private final CodestartResourceLoader resourceLoader;\n+    private final String languageName;\n+    private final Path targetDirectory;\n+    private final List<CodestartFileStrategy> strategies;\n+    private final Map<String, Object> data;\n+    private final Map<String, List<CodestartFile>> files = new LinkedHashMap<>();\n+\n+    CodestartProcessor(final CodestartResourceLoader resourceLoader,\n+            final String languageName,\n+            final Path targetDirectory,\n+            List<CodestartFileStrategy> strategies,\n+            final Map<String, Object> data) {\n+        this.resourceLoader = resourceLoader;\n+        this.languageName = languageName;\n+        this.targetDirectory = targetDirectory;\n+        this.strategies = strategies;\n+        this.data = data;\n+    }\n+\n+    void process(final Codestart codestart) throws IOException {\n+        resourceLoader.loadResourceAsPath(codestart.getResourceDir(), p -> {\n+            final Path baseDir = p.resolve(BASE_LANGUAGE);\n+            final Path languageDir = p.resolve(languageName);\n+            if (!codestart.getSpec().getMissingLanguages().isEmpty()\n+                    && codestart.getSpec().getMissingLanguages().contains(languageName)) {\n+                // TODO print a warning to inform that this codestart miss this language", "originalCommit": "88efcc09a2a93208fb603565c5030273727f20cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE3NjEwNQ==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462176105", "bodyText": "yes, I am not sure yet how I will deal with those. Recently we found out that tooling could prefer a Result more than some \"random\" printed messages.", "author": "ia3andy", "createdAt": "2020-07-29T09:47:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0NzEwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0NDA1NA==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462344054", "bodyText": "not sure I follow what you mean it prefer a Result ?", "author": "maxandersen", "createdAt": "2020-07-29T14:29:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0NzEwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0NzQ5Mg==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462347492", "bodyText": "Well, when implementing the raw CLI, we discussed with @stalep that it was hard to produce an interactive experience because the common tooling was producing logs, but the consumer, didn't know about it beside the fact that it failed.", "author": "ia3andy", "createdAt": "2020-07-29T14:34:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0NzEwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc5NTI1NA==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462795254", "bodyText": "I'll do that in another PR", "author": "ia3andy", "createdAt": "2020-07-30T07:14:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0NzEwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc5NzgyMA==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462797820", "bodyText": "#11084", "author": "ia3andy", "createdAt": "2020-07-30T07:19:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0NzEwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1NDc5OQ==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462154799", "bodyText": "this code feels like should at least have some debug logging to help to trace/debug issues.", "author": "maxandersen", "createdAt": "2020-07-29T09:11:11Z", "path": "independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/CodestartProcessor.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package io.quarkus.devtools.codestarts;\n+\n+import static io.quarkus.devtools.codestarts.Codestart.BASE_LANGUAGE;\n+\n+import io.quarkus.devtools.codestarts.reader.CodestartFile;\n+import io.quarkus.devtools.codestarts.reader.CodestartFileReader;\n+import io.quarkus.devtools.codestarts.strategy.CodestartFileStrategy;\n+import io.quarkus.devtools.codestarts.strategy.CodestartFileStrategyHandler;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+final class CodestartProcessor {\n+\n+    private final CodestartResourceLoader resourceLoader;\n+    private final String languageName;\n+    private final Path targetDirectory;\n+    private final List<CodestartFileStrategy> strategies;\n+    private final Map<String, Object> data;\n+    private final Map<String, List<CodestartFile>> files = new LinkedHashMap<>();\n+\n+    CodestartProcessor(final CodestartResourceLoader resourceLoader,\n+            final String languageName,\n+            final Path targetDirectory,\n+            List<CodestartFileStrategy> strategies,\n+            final Map<String, Object> data) {\n+        this.resourceLoader = resourceLoader;\n+        this.languageName = languageName;\n+        this.targetDirectory = targetDirectory;\n+        this.strategies = strategies;\n+        this.data = data;\n+    }\n+\n+    void process(final Codestart codestart) throws IOException {\n+        resourceLoader.loadResourceAsPath(codestart.getResourceDir(), p -> {\n+            final Path baseDir = p.resolve(BASE_LANGUAGE);\n+            final Path languageDir = p.resolve(languageName);\n+            if (!codestart.getSpec().getMissingLanguages().isEmpty()\n+                    && codestart.getSpec().getMissingLanguages().contains(languageName)) {\n+                // TODO print a warning to inform that this codestart miss this language\n+                return null; // We ignore that codestart as it doesn't implement the specified language\n+            }\n+            Stream.of(baseDir, languageDir)\n+                    .filter(Files::isDirectory)\n+                    .forEach(dirPath -> processCodestartDir(dirPath,\n+                            CodestartData.buildCodestartData(codestart, languageName, data)));\n+            return null;\n+        });\n+    }\n+\n+    void processCodestartDir(final Path sourceDirectory, final Map<String, Object> finalData) {\n+        try {\n+            final Collection<Path> sources = Files.walk(sourceDirectory)\n+                    .filter(path -> !path.equals(sourceDirectory))\n+                    .collect(Collectors.toList());\n+            for (Path sourcePath : sources) {\n+                final Path relativeSourcePath = sourceDirectory.relativize(sourcePath);", "originalCommit": "88efcc09a2a93208fb603565c5030273727f20cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE3NjI0Nw==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462176247", "bodyText": "yeah that makes sense, I'll add some", "author": "ia3andy", "createdAt": "2020-07-29T09:47:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1NDc5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1NTE3MA==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462155170", "bodyText": "add/move this try/catch inside the for loop so you can give some context to this exception (like which path is failing on)", "author": "maxandersen", "createdAt": "2020-07-29T09:11:51Z", "path": "independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/CodestartProcessor.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package io.quarkus.devtools.codestarts;\n+\n+import static io.quarkus.devtools.codestarts.Codestart.BASE_LANGUAGE;\n+\n+import io.quarkus.devtools.codestarts.reader.CodestartFile;\n+import io.quarkus.devtools.codestarts.reader.CodestartFileReader;\n+import io.quarkus.devtools.codestarts.strategy.CodestartFileStrategy;\n+import io.quarkus.devtools.codestarts.strategy.CodestartFileStrategyHandler;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+final class CodestartProcessor {\n+\n+    private final CodestartResourceLoader resourceLoader;\n+    private final String languageName;\n+    private final Path targetDirectory;\n+    private final List<CodestartFileStrategy> strategies;\n+    private final Map<String, Object> data;\n+    private final Map<String, List<CodestartFile>> files = new LinkedHashMap<>();\n+\n+    CodestartProcessor(final CodestartResourceLoader resourceLoader,\n+            final String languageName,\n+            final Path targetDirectory,\n+            List<CodestartFileStrategy> strategies,\n+            final Map<String, Object> data) {\n+        this.resourceLoader = resourceLoader;\n+        this.languageName = languageName;\n+        this.targetDirectory = targetDirectory;\n+        this.strategies = strategies;\n+        this.data = data;\n+    }\n+\n+    void process(final Codestart codestart) throws IOException {\n+        resourceLoader.loadResourceAsPath(codestart.getResourceDir(), p -> {\n+            final Path baseDir = p.resolve(BASE_LANGUAGE);\n+            final Path languageDir = p.resolve(languageName);\n+            if (!codestart.getSpec().getMissingLanguages().isEmpty()\n+                    && codestart.getSpec().getMissingLanguages().contains(languageName)) {\n+                // TODO print a warning to inform that this codestart miss this language\n+                return null; // We ignore that codestart as it doesn't implement the specified language\n+            }\n+            Stream.of(baseDir, languageDir)\n+                    .filter(Files::isDirectory)\n+                    .forEach(dirPath -> processCodestartDir(dirPath,\n+                            CodestartData.buildCodestartData(codestart, languageName, data)));\n+            return null;\n+        });\n+    }\n+\n+    void processCodestartDir(final Path sourceDirectory, final Map<String, Object> finalData) {\n+        try {\n+            final Collection<Path> sources = Files.walk(sourceDirectory)\n+                    .filter(path -> !path.equals(sourceDirectory))\n+                    .collect(Collectors.toList());\n+            for (Path sourcePath : sources) {\n+                final Path relativeSourcePath = sourceDirectory.relativize(sourcePath);\n+                if (!Files.isDirectory(sourcePath)) {\n+                    final String sourceFileName = sourcePath.getFileName().toString();\n+\n+                    // Read files to process\n+                    final Optional<CodestartFileReader> possibleReader = CodestartFileReader.ALL.stream()\n+                            .filter(r -> r.matches(sourceFileName))\n+                            .findFirst();\n+                    final CodestartFileReader reader = possibleReader.orElse(CodestartFileReader.DEFAULT);\n+\n+                    final String targetFileName = reader.cleanFileName(sourceFileName);\n+                    final Path relativeTargetPath = relativeSourcePath.getNameCount() > 1\n+                            ? relativeSourcePath.getParent().resolve(targetFileName)\n+                            : Paths.get(targetFileName);\n+\n+                    final boolean hasConflictStrategyHandler = getStrategy(relativeTargetPath.toString()).isPresent();\n+\n+                    if (!possibleReader.isPresent() && !hasConflictStrategyHandler) {\n+                        // Copy static files\n+                        // TODO support static files from codestart.yml\n+                        final Path targetPath = targetDirectory.resolve(relativeTargetPath.toString());\n+                        processStaticFile(sourcePath, targetPath);\n+                    }\n+\n+                    final Optional<String> content = reader.read(sourcePath,\n+                            languageName, finalData);\n+                    if (content.isPresent()) {\n+                        final String key = relativeTargetPath.toString();\n+                        this.files.putIfAbsent(key, new ArrayList<>());\n+                        this.files.get(key).add(new CodestartFile(relativeSourcePath.toString(), content.get()));\n+                    }\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);", "originalCommit": "88efcc09a2a93208fb603565c5030273727f20cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE3NjQ5Mg==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462176492", "bodyText": "good catch.. very smart!", "author": "ia3andy", "createdAt": "2020-07-29T09:48:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1NTE3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1NjA0OQ==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462156049", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new CodestartDefinitionException(\"ConflictStrategyHandler not found named '\" + entry.getValue()\n          \n          \n            \n                                    + \"' used for with filter '\" + entry.getKey() + \"'\");\n          \n          \n            \n                            throw new CodestartDefinitionException(\"ConflictStrategyHandler named '\" + entry.getValue()\n          \n          \n            \n                                    + \"' not found. Used with filter '\" + entry.getKey() + \"'\");", "author": "maxandersen", "createdAt": "2020-07-29T09:13:22Z", "path": "independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/CodestartProcessor.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package io.quarkus.devtools.codestarts;\n+\n+import static io.quarkus.devtools.codestarts.Codestart.BASE_LANGUAGE;\n+\n+import io.quarkus.devtools.codestarts.reader.CodestartFile;\n+import io.quarkus.devtools.codestarts.reader.CodestartFileReader;\n+import io.quarkus.devtools.codestarts.strategy.CodestartFileStrategy;\n+import io.quarkus.devtools.codestarts.strategy.CodestartFileStrategyHandler;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+final class CodestartProcessor {\n+\n+    private final CodestartResourceLoader resourceLoader;\n+    private final String languageName;\n+    private final Path targetDirectory;\n+    private final List<CodestartFileStrategy> strategies;\n+    private final Map<String, Object> data;\n+    private final Map<String, List<CodestartFile>> files = new LinkedHashMap<>();\n+\n+    CodestartProcessor(final CodestartResourceLoader resourceLoader,\n+            final String languageName,\n+            final Path targetDirectory,\n+            List<CodestartFileStrategy> strategies,\n+            final Map<String, Object> data) {\n+        this.resourceLoader = resourceLoader;\n+        this.languageName = languageName;\n+        this.targetDirectory = targetDirectory;\n+        this.strategies = strategies;\n+        this.data = data;\n+    }\n+\n+    void process(final Codestart codestart) throws IOException {\n+        resourceLoader.loadResourceAsPath(codestart.getResourceDir(), p -> {\n+            final Path baseDir = p.resolve(BASE_LANGUAGE);\n+            final Path languageDir = p.resolve(languageName);\n+            if (!codestart.getSpec().getMissingLanguages().isEmpty()\n+                    && codestart.getSpec().getMissingLanguages().contains(languageName)) {\n+                // TODO print a warning to inform that this codestart miss this language\n+                return null; // We ignore that codestart as it doesn't implement the specified language\n+            }\n+            Stream.of(baseDir, languageDir)\n+                    .filter(Files::isDirectory)\n+                    .forEach(dirPath -> processCodestartDir(dirPath,\n+                            CodestartData.buildCodestartData(codestart, languageName, data)));\n+            return null;\n+        });\n+    }\n+\n+    void processCodestartDir(final Path sourceDirectory, final Map<String, Object> finalData) {\n+        try {\n+            final Collection<Path> sources = Files.walk(sourceDirectory)\n+                    .filter(path -> !path.equals(sourceDirectory))\n+                    .collect(Collectors.toList());\n+            for (Path sourcePath : sources) {\n+                final Path relativeSourcePath = sourceDirectory.relativize(sourcePath);\n+                if (!Files.isDirectory(sourcePath)) {\n+                    final String sourceFileName = sourcePath.getFileName().toString();\n+\n+                    // Read files to process\n+                    final Optional<CodestartFileReader> possibleReader = CodestartFileReader.ALL.stream()\n+                            .filter(r -> r.matches(sourceFileName))\n+                            .findFirst();\n+                    final CodestartFileReader reader = possibleReader.orElse(CodestartFileReader.DEFAULT);\n+\n+                    final String targetFileName = reader.cleanFileName(sourceFileName);\n+                    final Path relativeTargetPath = relativeSourcePath.getNameCount() > 1\n+                            ? relativeSourcePath.getParent().resolve(targetFileName)\n+                            : Paths.get(targetFileName);\n+\n+                    final boolean hasConflictStrategyHandler = getStrategy(relativeTargetPath.toString()).isPresent();\n+\n+                    if (!possibleReader.isPresent() && !hasConflictStrategyHandler) {\n+                        // Copy static files\n+                        // TODO support static files from codestart.yml\n+                        final Path targetPath = targetDirectory.resolve(relativeTargetPath.toString());\n+                        processStaticFile(sourcePath, targetPath);\n+                    }\n+\n+                    final Optional<String> content = reader.read(sourcePath,\n+                            languageName, finalData);\n+                    if (content.isPresent()) {\n+                        final String key = relativeTargetPath.toString();\n+                        this.files.putIfAbsent(key, new ArrayList<>());\n+                        this.files.get(key).add(new CodestartFile(relativeSourcePath.toString(), content.get()));\n+                    }\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    private static void processStaticFile(Path path, Path targetPath) throws IOException {\n+        Files.createDirectories(targetPath.getParent());\n+        Files.copy(path, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+    }\n+\n+    void checkTargetDir() throws IOException {\n+        if (!Files.exists(targetDirectory)) {\n+            boolean mkdirStatus = targetDirectory.toFile().mkdirs();\n+            if (!mkdirStatus) {\n+                throw new IOException(\"Failed to create the project directory: \" + targetDirectory);\n+            }\n+            return;\n+        }\n+        if (!Files.isDirectory(targetDirectory)) {\n+            throw new IOException(\"Project path needs to point to a directory: \" + targetDirectory);\n+        }\n+        final String[] files = targetDirectory.toFile().list();\n+        if (files != null && files.length > 0) {\n+            throw new IOException(\"You can't create a project when the directory is not empty: \" + targetDirectory);\n+        }\n+    }\n+\n+    public void writeFiles() throws IOException {\n+        for (Map.Entry<String, List<CodestartFile>> e : files.entrySet()) {\n+            final String relativePath = e.getKey();\n+            Files.createDirectories(targetDirectory.resolve(relativePath).getParent());\n+            getStrategy(relativePath).orElse(CodestartFileStrategyHandler.FAIL_ON_DUPLICATE)\n+                    .process(targetDirectory, relativePath, e.getValue(), data);\n+        }\n+    }\n+\n+    private Optional<CodestartFileStrategyHandler> getStrategy(final String key) {\n+        for (CodestartFileStrategy codestartFileStrategy : strategies) {\n+            if (codestartFileStrategy.test(key)) {\n+                return Optional.of(codestartFileStrategy.getHandler());\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    static List<CodestartFileStrategy> buildStrategies(Map<String, String> spec) {\n+        final List<CodestartFileStrategy> codestartFileStrategyHandlers = new ArrayList<>(spec.size());\n+\n+        for (Map.Entry<String, String> entry : spec.entrySet()) {\n+            final CodestartFileStrategyHandler handler = CodestartFileStrategyHandler.BY_NAME.get(entry.getValue());\n+            if (handler == null) {\n+                throw new CodestartDefinitionException(\"ConflictStrategyHandler not found named '\" + entry.getValue()\n+                        + \"' used for with filter '\" + entry.getKey() + \"'\");", "originalCommit": "88efcc09a2a93208fb603565c5030273727f20cc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1NjcxNQ==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462156715", "bodyText": "when that fails - will users get some context of which codestart spec that is failing ?", "author": "maxandersen", "createdAt": "2020-07-29T09:14:26Z", "path": "independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/CodestartSpec.java", "diffHunk": "@@ -0,0 +1,172 @@\n+package io.quarkus.devtools.codestarts;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public final class CodestartSpec {\n+\n+    enum Type {\n+        PROJECT(true),\n+        LANGUAGE(true),\n+        BUILDTOOL(true),\n+        CONFIG(true),\n+        EXAMPLE(false),\n+        TOOLING(false);\n+\n+        private final boolean base;\n+\n+        Type(boolean base) {\n+            this.base = base;\n+        }\n+\n+        public boolean isBase() {\n+            return base;\n+        }\n+    }\n+\n+    private final String name;\n+    private final boolean isPreselected;\n+    private final String ref;\n+    private final Type type;\n+    private final boolean isFallback;\n+    private final List<String> missingLanguages;\n+    private final Map<String, String> outputStrategy;\n+    private final Map<String, LanguageSpec> languagesSpec;\n+\n+    @JsonCreator\n+    public CodestartSpec(@JsonProperty(value = \"name\", required = true) String name,\n+            @JsonProperty(value = \"ref\") String ref,\n+            @JsonProperty(value = \"type\") Type type,\n+            @JsonProperty(\"fallback\") boolean isFallback,\n+            @JsonProperty(\"preselected\") boolean isPreselected,\n+            @JsonProperty(value = \"missing-languages\") List<String> missingLanguages,\n+            @JsonProperty(\"output-strategy\") Map<String, String> outputStrategy,\n+            @JsonProperty(\"language\") Map<String, LanguageSpec> languagesSpec) {\n+        this.name = requireNonNull(name, \"name is required\");", "originalCommit": "88efcc09a2a93208fb603565c5030273727f20cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE3ODEyMg==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462178122", "bodyText": "I will make sure of that", "author": "ia3andy", "createdAt": "2020-07-29T09:50:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1NjcxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1ODQyMQ==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462158421", "bodyText": "why do you consider that random ?", "author": "maxandersen", "createdAt": "2020-07-29T09:17:14Z", "path": "independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/reader/QuteCodestartFileReader.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package io.quarkus.devtools.codestarts.reader;\n+\n+import io.quarkus.devtools.codestarts.CodestartException;\n+import io.quarkus.qute.Engine;\n+import io.quarkus.qute.Expression;\n+import io.quarkus.qute.ResultMapper;\n+import io.quarkus.qute.Results;\n+import io.quarkus.qute.TemplateException;\n+import io.quarkus.qute.TemplateLocator;\n+import io.quarkus.qute.TemplateNode;\n+import io.quarkus.qute.Variant;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+final class QuteCodestartFileReader implements CodestartFileReader {\n+\n+    private static final String FLAG = \".tpl.qute\";\n+    public static final String INCLUDE_QUTE_FLAG = \".include.qute\";\n+\n+    @Override\n+    public boolean matches(String fileName) {\n+        return fileName.contains(FLAG) || fileName.contains(INCLUDE_QUTE_FLAG);\n+    }\n+\n+    @Override\n+    public String cleanFileName(String fileName) {\n+        return fileName.replace(FLAG, \"\");\n+    }\n+\n+    public Optional<String> read(Path sourcePath, String languageName, Map<String, Object> data) throws IOException {\n+        if (sourcePath.getFileName().toString().contains(INCLUDE_QUTE_FLAG)) {\n+            return Optional.empty();\n+        }\n+        return Optional.of(readQuteFile(sourcePath, languageName, data));\n+    }\n+\n+    public static Engine newEngine() {\n+        return Engine.builder().addDefaults()\n+                .addResultMapper(new MissingValueMapper())\n+                .build();\n+    }\n+\n+    public static String readQuteFile(Path path, String languageName, Map<String, Object> data) throws IOException {\n+        final String content = new String(Files.readAllBytes(path), StandardCharsets.UTF_8);\n+        final Engine engine = Engine.builder().addDefaults()\n+                .addResultMapper(new MissingValueMapper())\n+                .removeStandaloneLines(true)\n+                .addLocator(id -> findIncludeTemplate(path, languageName, id).map(IncludeTemplateLocation::new))\n+                .build();\n+        try {\n+            return engine.parse(content).render(data);\n+        } catch (TemplateException e) {\n+            throw new IOException(\"Error while rendering template: \" + path.toString(), e);\n+        }\n+    }\n+\n+    private static Optional<Path> findIncludeTemplate(Path path, String languageName, String name) {\n+        // FIXME looking at the parent dir is a bit random\n+        final Path codestartPath = path.getParent().getParent();", "originalCommit": "88efcc09a2a93208fb603565c5030273727f20cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE3OTE0NQ==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462179145", "bodyText": "because, the calling template may be in a sub-directory making this fail, I need to pass the codestart directory to make it consistant.", "author": "ia3andy", "createdAt": "2020-07-29T09:52:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1ODQyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc5NTAxMw==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462795013", "bodyText": "This is now fixed", "author": "ia3andy", "createdAt": "2020-07-30T07:13:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1ODQyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1OTExOQ==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462159119", "bodyText": "what is this used for ?", "author": "maxandersen", "createdAt": "2020-07-29T09:18:23Z", "path": "independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/strategy/CodestartFileStrategy.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package io.quarkus.devtools.codestarts.strategy;\n+\n+import java.util.Objects;\n+import java.util.function.Predicate;\n+\n+public class CodestartFileStrategy implements Predicate<String> {", "originalCommit": "88efcc09a2a93208fb603565c5030273727f20cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE4MTAxNw==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462181017", "bodyText": "the strategy defined in the codestart.yml is transformed to a list of CodestartFileStrategy, then we use it to test processed files and find the matching handler.", "author": "ia3andy", "createdAt": "2020-07-29T09:55:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1OTExOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2MDQzMQ==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462160431", "bodyText": "do we have a usecase for this strategy ? I'm sure there is one i just can't figure one out atm ;)", "author": "maxandersen", "createdAt": "2020-07-29T09:20:38Z", "path": "independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/strategy/SmartPomMergeCodestartFileStrategyHandler.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package io.quarkus.devtools.codestarts.strategy;\n+\n+import io.fabric8.maven.Maven;\n+import io.fabric8.maven.merge.SmartModelMerger;\n+import io.quarkus.devtools.codestarts.reader.CodestartFile;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.Map;\n+import org.apache.maven.model.Model;\n+\n+final class SmartPomMergeCodestartFileStrategyHandler implements CodestartFileStrategyHandler {", "originalCommit": "88efcc09a2a93208fb603565c5030273727f20cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE5MzE0NA==", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462193144", "bodyText": "Yes, thanks to this we could have a Red Hat tooling codestart adding <repositories> for example.", "author": "ia3andy", "createdAt": "2020-07-29T10:17:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2MDQzMQ=="}], "type": "inlineReview"}, {"oid": "b03c746cebcacb2b08c0260f7eea848ebd843c9e", "url": "https://github.com/quarkusio/quarkus/commit/b03c746cebcacb2b08c0260f7eea848ebd843c9e", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts", "committedDate": "2020-07-29T15:52:10Z", "type": "forcePushed"}, {"oid": "02f18e18d8d816c270500e77b39bc2855ab8daad", "url": "https://github.com/quarkusio/quarkus/commit/02f18e18d8d816c270500e77b39bc2855ab8daad", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts", "committedDate": "2020-07-30T07:00:15Z", "type": "forcePushed"}, {"oid": "b6f3846c28bd9243f340fc6cf10982bbc35f81b9", "url": "https://github.com/quarkusio/quarkus/commit/b6f3846c28bd9243f340fc6cf10982bbc35f81b9", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts", "committedDate": "2020-07-30T07:05:07Z", "type": "forcePushed"}, {"oid": "33ef9b54bf2ce6dd4ada59c8f841863feeb7ee79", "url": "https://github.com/quarkusio/quarkus/commit/33ef9b54bf2ce6dd4ada59c8f841863feeb7ee79", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts", "committedDate": "2020-07-30T07:11:44Z", "type": "forcePushed"}, {"oid": "b910dd3b10c2a4ce2e0e1b33fc2f849234ee0f48", "url": "https://github.com/quarkusio/quarkus/commit/b910dd3b10c2a4ce2e0e1b33fc2f849234ee0f48", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts", "committedDate": "2020-07-30T07:23:58Z", "type": "forcePushed"}, {"oid": "8fe89325413a2c323eea12349f43dafd651c151c", "url": "https://github.com/quarkusio/quarkus/commit/8fe89325413a2c323eea12349f43dafd651c151c", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts", "committedDate": "2020-07-30T10:05:41Z", "type": "forcePushed"}, {"oid": "c05d6180cbf62ae571c56beceedd8971663cafb0", "url": "https://github.com/quarkusio/quarkus/commit/c05d6180cbf62ae571c56beceedd8971663cafb0", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts", "committedDate": "2020-07-30T10:19:23Z", "type": "forcePushed"}, {"oid": "90cee50ee0e446d706a1e09337b26fbe329c9fab", "url": "https://github.com/quarkusio/quarkus/commit/90cee50ee0e446d706a1e09337b26fbe329c9fab", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts", "committedDate": "2020-07-30T11:58:35Z", "type": "forcePushed"}, {"oid": "dc539353b31bff57570a188875a229b9527dad32", "url": "https://github.com/quarkusio/quarkus/commit/dc539353b31bff57570a188875a229b9527dad32", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts", "committedDate": "2020-07-30T14:46:19Z", "type": "forcePushed"}, {"oid": "6ae47f2dedef4bb7800eb8165b82eaba5cc78dce", "url": "https://github.com/quarkusio/quarkus/commit/6ae47f2dedef4bb7800eb8165b82eaba5cc78dce", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts", "committedDate": "2020-07-30T15:39:03Z", "type": "forcePushed"}, {"oid": "f9bcdd8aa5d4c22599900d3c15ef2ec35d07826d", "url": "https://github.com/quarkusio/quarkus/commit/f9bcdd8aa5d4c22599900d3c15ef2ec35d07826d", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts", "committedDate": "2020-07-30T15:45:47Z", "type": "forcePushed"}, {"oid": "51650ad526ad7075d04fc3df02a9dec19e2f3730", "url": "https://github.com/quarkusio/quarkus/commit/51650ad526ad7075d04fc3df02a9dec19e2f3730", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts", "committedDate": "2020-07-30T19:15:15Z", "type": "forcePushed"}, {"oid": "1582b2c81fc9de4dacdc210a08716023f71ce183", "url": "https://github.com/quarkusio/quarkus/commit/1582b2c81fc9de4dacdc210a08716023f71ce183", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts", "committedDate": "2020-07-31T05:23:17Z", "type": "forcePushed"}, {"oid": "196f994d811570f7b02ff2f34e8e2b72b73dd6ae", "url": "https://github.com/quarkusio/quarkus/commit/196f994d811570f7b02ff2f34e8e2b72b73dd6ae", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts", "committedDate": "2020-07-31T05:26:18Z", "type": "forcePushed"}, {"oid": "05771647ec8ebdbd752be412c1bc22d8bb2709a5", "url": "https://github.com/quarkusio/quarkus/commit/05771647ec8ebdbd752be412c1bc22d8bb2709a5", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts", "committedDate": "2020-07-31T05:39:18Z", "type": "commit"}, {"oid": "05771647ec8ebdbd752be412c1bc22d8bb2709a5", "url": "https://github.com/quarkusio/quarkus/commit/05771647ec8ebdbd752be412c1bc22d8bb2709a5", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts", "committedDate": "2020-07-31T05:39:18Z", "type": "forcePushed"}]}