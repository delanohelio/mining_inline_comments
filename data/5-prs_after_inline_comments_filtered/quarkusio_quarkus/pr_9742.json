{"pr_number": 9742, "pr_title": "REST Data with Panache pagination", "pr_createdAt": "2020-06-03T11:26:33Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/9742", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUzMjg2OA==", "url": "https://github.com/quarkusio/quarkus/pull/9742#discussion_r434532868", "bodyText": "Are you sure those are good headers? I though user headers had to start with X-?", "author": "FroMage", "createdAt": "2020-06-03T12:35:50Z", "path": "extensions/panache/hibernate-orm-rest-data-panache/deployment/src/test/java/io/quarkus/hibernate/orm/rest/data/panache/deployment/AbstractGetMethodTest.java", "diffHunk": "@@ -127,4 +128,96 @@ void shouldListComplexHalObjects() {\n                 .and().body(\"_links.add.href\", endsWith(\"/collections\"))\n                 .and().body(\"_links.list.href\", endsWith(\"/collections\"));\n     }\n+\n+    @Test\n+    void shouldNotGetNonExistentPage() {\n+        given().accept(\"application/json\")\n+                .and().queryParam(\"page\", 100)\n+                .when().get(\"/items\")\n+                .then().statusCode(200)\n+                .and().body(\"id\", is(empty()));\n+    }\n+\n+    @Test\n+    void shouldNotGetNegativePageOrSize() {\n+        given().accept(\"application/json\")\n+                .and().queryParam(\"page\", -1)\n+                .and().queryParam(\"size\", -1)\n+                .when().get(\"/items\")\n+                .then().statusCode(200)\n+                // Invalid page and size parameters are replaced with defaults\n+                .and().body(\"id\", contains(1, 2));\n+    }\n+\n+    @Test\n+    void shouldGetFirstPage() {\n+        given().accept(\"application/json\")\n+                .and().queryParam(\"page\", 0)\n+                .and().queryParam(\"size\", 1)\n+                .when().get(\"/items\")\n+                .then().statusCode(200)\n+                .and().body(\"id\", contains(1))\n+                .and().body(\"name\", contains(\"first\"))\n+                .and().header(\"first\", endsWith(\"/items?page=0&size=1\"))", "originalCommit": "486489ed5b3b90bea56c5da17dd5b9cd7bff6aa1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU0NjQ5MA==", "url": "https://github.com/quarkusio/quarkus/pull/9742#discussion_r434546490", "bodyText": "Actually TIL X- prefixes are deprecated now: https://tools.ietf.org/html/rfc6648\nStill, shouldn't this rather use the Link header? https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Link", "author": "FroMage", "createdAt": "2020-06-03T12:58:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUzMjg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4ODg1Mw==", "url": "https://github.com/quarkusio/quarkus/pull/9742#discussion_r434588853", "bodyText": "I wasn't sure about the header name and was hoping that somebody would give a suggestion in the PR. Link header makes sense of course. What about first, last, prev, next as rel?", "author": "gytis", "createdAt": "2020-06-03T13:59:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUzMjg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwNjcxNw==", "url": "https://github.com/quarkusio/quarkus/pull/9742#discussion_r434606717", "bodyText": "That's what https://tools.ietf.org/html/rfc5005#section-3 used, so there's precedence. Unless you find something standardish more modern?", "author": "FroMage", "createdAt": "2020-06-03T14:23:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUzMjg2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU0MDE5MA==", "url": "https://github.com/quarkusio/quarkus/pull/9742#discussion_r434540190", "bodyText": "Why not via query params?", "author": "FroMage", "createdAt": "2020-06-03T12:48:13Z", "path": "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/ListMethodImplementor.java", "diffHunk": "@@ -29,8 +42,19 @@\n      *         rel = \"list\",\n      *         entityClassName = \"com.example.Entity\"\n      *     )\n-     *     public List list() {\n-     *         return Entity.listAll();\n+     *     public Response list() {\n+     *         if (this.isPaged()) {\n+     *            Page page = ...; // Extract page index and size from a UriInfo field and create a page instance.", "originalCommit": "486489ed5b3b90bea56c5da17dd5b9cd7bff6aa1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU5MTk3MA==", "url": "https://github.com/quarkusio/quarkus/pull/9742#discussion_r434591970", "bodyText": "It takes the values out of the query parameters but through UriInfo. I didn't want to add them as method attributes for two reasons. Firstly, pagination could be disabled and the method attributes defined in the interface would not make much sense. Secondly, having a shorter method definition will make it easier for the user to override it when modifying its properties with @MethodProperties annotation.", "author": "gytis", "createdAt": "2020-06-03T14:03:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU0MDE5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYxMDE5NA==", "url": "https://github.com/quarkusio/quarkus/pull/9742#discussion_r434610194", "bodyText": "Good points, however if the user is overriding it with a custom implementation (in the future when we support this) he will have a hard time getting to those paging parameters if he needs to. Because the UriInfo is not a @Context parameter, so field injection will be required.\nTBH it's not entirely clear which approach is better long-term. I'll note however that you've switched to the less-useful Reponse return type rather than set response headers via something that doesn't leak to the signature, contrary to what you did with query parameters ;)\nI don't have a strong answer here, so perhaps it's one of those situations where we could either ask for more opinions, such as @geoand or @loicmathieu or just flip a coin and wait for user feedback.", "author": "FroMage", "createdAt": "2020-06-03T14:27:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU0MDE5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4ODYwMA==", "url": "https://github.com/quarkusio/quarkus/pull/9742#discussion_r434688600", "bodyText": "Each time someone return a JAX-RS Response a puppy dies ...\nAs typical use case is to not override any methods so it will not be too much visible. But I like my method to return meaningful objects ... And JAX-RS response is not even a generic type :(\n\nif the user is overriding it with a custom implementation (in the future when we support this) he will have a hard time getting to those paging parameters if he needs to. Because the UriInfo is not a @context parameter, so field injection will be required.\n\n+1", "author": "loicmathieu", "createdAt": "2020-06-03T16:12:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU0MDE5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcwNzUwOQ==", "url": "https://github.com/quarkusio/quarkus/pull/9742#discussion_r434707509", "bodyText": "Is there a way to add the response headers without returning a Response instance? Or do you suggest to implement an interceptor?", "author": "gytis", "createdAt": "2020-06-03T16:41:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU0MDE5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk5ODcyNg==", "url": "https://github.com/quarkusio/quarkus/pull/9742#discussion_r434998726", "bodyText": "Good points, however if the user is overriding it with a custom implementation (in the future when we support this) he will have a hard time getting to those paging parameters if he needs to. Because the UriInfo is not a @Context parameter, so field injection will be required.\nTBH it's not entirely clear which approach is better long-term. I'll note however that you've switched to the less-useful Reponse return type rather than set response headers via something that doesn't leak to the signature, contrary to what you did with query parameters ;)\nI don't have a strong answer here, so perhaps it's one of those situations where we could either ask for more opinions, such as @geoand or @loicmathieu or just flip a coin and wait for user feedback.\n\nI am personally in favor of what @gytis did here with UriInfo as a field instead of adding the parameters to the method signature. When we have the override capability, then we'll certainly have to document the way for the user to retrieve the headers.\nAs for the use of Response, I agree it should be avoided if possible.", "author": "geoand", "createdAt": "2020-06-04T05:22:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU0MDE5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc4Nzk4NA==", "url": "https://github.com/quarkusio/quarkus/pull/9742#discussion_r435787984", "bodyText": "Is there a way to add the response headers without returning a Response instance? Or do you suggest to implement an interceptor?\n\nThere is only the RESTEasy HttpResponse context object, I'm afraid.", "author": "FroMage", "createdAt": "2020-06-05T09:02:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU0MDE5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgzMzI0NQ==", "url": "https://github.com/quarkusio/quarkus/pull/9742#discussion_r435833245", "bodyText": "So in that case JAX-RS Response instance is better, no? At least it's from a spec.", "author": "gytis", "createdAt": "2020-06-05T10:28:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU0MDE5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU0MTY1OQ==", "url": "https://github.com/quarkusio/quarkus/pull/9742#discussion_r434541659", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    MethodDescriptor idPagedMethod = ofMethod(methodCreator.getMethodDescriptor().getDeclaringClass(), IS_PAGED.getName(),\n          \n          \n            \n                    MethodDescriptor isPagedMethod = ofMethod(methodCreator.getMethodDescriptor().getDeclaringClass(), IS_PAGED.getName(),", "author": "FroMage", "createdAt": "2020-06-03T12:50:33Z", "path": "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/hal/ListHalMethodImplementor.java", "diffHunk": "@@ -26,29 +41,84 @@\n      *     &#64;GET\n      *     &#64;Path(\"\")\n      *     &#64;Produces({\"application/hal+json\"})\n-     *     public HalCollectionWrapper listHal() {\n-     *         List entities = BookEntity.listAll();\n-     *         return new HalCollectionWrapper(entities, Entity.class, \"entities\");\n+     *     public Response listHal() {\n+     *         if (this.isPaged()) {\n+     *            Page page = ...; // Extract page index and size from a UriInfo field and create a page instance.\n+     *            PanacheQuery query = Entity.findAll();\n+     *            query.page(page);\n+     *            List entities = query.list();\n+     *            // Get the page count, and build first, last, next, previous page instances\n+     *            HalCollectionWrapper wrapper = new HalCollectionWrapper(entities, Entity.class, \"entities\");\n+     *            // Add first, last, next and previous page URIs to the wrapper if they exist\n+     *            Response.ResponseBuilder responseBuilder = Response.status(200);\n+     *            responseBuilder.entity(wrapper);\n+     *            // Add headers with first, last, next and previous page URIs if they exist\n+     *            return responseBuilder.build();\n+     *         } else {\n+     *             List entities = Entity.listAll();\n+     *             return Response.ok(new HalCollectionWrapper(entities, Entity.class, \"entities\")).build();\n+     *         }\n      *     }\n      * }\n      * </pre>\n      */\n     @Override\n     protected void implementInternal(ClassCreator classCreator, IndexView index, MethodPropertiesAccessor propertiesAccessor,\n             RestDataResourceInfo resourceInfo) {\n-        MethodCreator methodCreator = classCreator.getMethodCreator(NAME, HalCollectionWrapper.class);\n+        MethodCreator methodCreator = classCreator.getMethodCreator(NAME, Response.class);\n         addGetAnnotation(methodCreator);\n         addPathAnnotation(methodCreator,\n                 propertiesAccessor.getPath(resourceInfo.getClassInfo(), getStandardMethodMetadata(resourceInfo)));\n         addProducesAnnotation(methodCreator, MethodImplementor.APPLICATION_HAL_JSON);\n \n-        ResultHandle entities = resourceInfo.getDataAccessImplementor().listAll(methodCreator);\n-        methodCreator.returnValue(wrapEntities(methodCreator, entities, resourceInfo));\n+        FieldDescriptor uriInfoField = of(methodCreator.getMethodDescriptor().getDeclaringClass(), URI_INFO.getName(),\n+                URI_INFO.getType());\n+        MethodDescriptor idPagedMethod = ofMethod(methodCreator.getMethodDescriptor().getDeclaringClass(), IS_PAGED.getName(),", "originalCommit": "486489ed5b3b90bea56c5da17dd5b9cd7bff6aa1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2a553944cac0aef1eee2f1138bdfea1144d566a7", "url": "https://github.com/quarkusio/quarkus/commit/2a553944cac0aef1eee2f1138bdfea1144d566a7", "message": "REST Data with Panache pagination", "committedDate": "2020-06-08T17:40:54Z", "type": "forcePushed"}, {"oid": "82a4d0ce800e1375cc1fd07b9748364c23a3bf78", "url": "https://github.com/quarkusio/quarkus/commit/82a4d0ce800e1375cc1fd07b9748364c23a3bf78", "message": "REST Data with Panache pagination", "committedDate": "2020-06-09T07:10:27Z", "type": "forcePushed"}, {"oid": "50c32406c08002a4b1d79dc72df45baa3fd4219d", "url": "https://github.com/quarkusio/quarkus/commit/50c32406c08002a4b1d79dc72df45baa3fd4219d", "message": "REST Data with Panache pagination", "committedDate": "2020-06-09T07:21:33Z", "type": "forcePushed"}, {"oid": "bfd03b31cd3d2dfb3633c8e9b23fdca80b09cc80", "url": "https://github.com/quarkusio/quarkus/commit/bfd03b31cd3d2dfb3633c8e9b23fdca80b09cc80", "message": "REST Data with Panache pagination", "committedDate": "2020-06-09T07:26:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwMDY0Nw==", "url": "https://github.com/quarkusio/quarkus/pull/9742#discussion_r440300647", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    MethodDescriptor idPagedMethod = ofMethod(methodCreator.getMethodDescriptor().getDeclaringClass(), IS_PAGED.getName(),\n          \n          \n            \n                    MethodDescriptor isPagedMethod = ofMethod(methodCreator.getMethodDescriptor().getDeclaringClass(), IS_PAGED.getName(),", "author": "FroMage", "createdAt": "2020-06-15T16:30:30Z", "path": "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/ListMethodImplementor.java", "diffHunk": "@@ -39,18 +63,40 @@\n     protected void implementInternal(ClassCreator classCreator, IndexView index, MethodPropertiesAccessor propertiesAccessor,\n             RestDataResourceInfo resourceInfo) {\n         MethodMetadata methodMetadata = getMethodMetadata(resourceInfo);\n-        MethodCreator methodCreator = classCreator.getMethodCreator(methodMetadata.getName(), List.class);\n+        MethodCreator methodCreator = classCreator.getMethodCreator(methodMetadata.getName(), Response.class);\n         addGetAnnotation(methodCreator);\n         addPathAnnotation(methodCreator, propertiesAccessor.getPath(resourceInfo.getClassInfo(), methodMetadata));\n         addProducesAnnotation(methodCreator, APPLICATION_JSON);\n         addLinksAnnotation(methodCreator, resourceInfo.getEntityClassName(), REL);\n \n-        methodCreator.returnValue(resourceInfo.getDataAccessImplementor().listAll(methodCreator));\n+        FieldDescriptor uriInfoField = of(methodCreator.getMethodDescriptor().getDeclaringClass(), URI_INFO.getName(),\n+                URI_INFO.getType());\n+        MethodDescriptor idPagedMethod = ofMethod(methodCreator.getMethodDescriptor().getDeclaringClass(), IS_PAGED.getName(),", "originalCommit": "bfd03b31cd3d2dfb3633c8e9b23fdca80b09cc80", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwMDgzMw==", "url": "https://github.com/quarkusio/quarkus/pull/9742#discussion_r440300833", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    BranchResult isPaged = methodCreator.ifTrue(methodCreator.invokeVirtualMethod(idPagedMethod, methodCreator.getThis()));\n          \n          \n            \n                    BranchResult isPaged = methodCreator.ifTrue(methodCreator.invokeVirtualMethod(isPagedMethod, methodCreator.getThis()));", "author": "FroMage", "createdAt": "2020-06-15T16:30:48Z", "path": "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/ListMethodImplementor.java", "diffHunk": "@@ -39,18 +63,40 @@\n     protected void implementInternal(ClassCreator classCreator, IndexView index, MethodPropertiesAccessor propertiesAccessor,\n             RestDataResourceInfo resourceInfo) {\n         MethodMetadata methodMetadata = getMethodMetadata(resourceInfo);\n-        MethodCreator methodCreator = classCreator.getMethodCreator(methodMetadata.getName(), List.class);\n+        MethodCreator methodCreator = classCreator.getMethodCreator(methodMetadata.getName(), Response.class);\n         addGetAnnotation(methodCreator);\n         addPathAnnotation(methodCreator, propertiesAccessor.getPath(resourceInfo.getClassInfo(), methodMetadata));\n         addProducesAnnotation(methodCreator, APPLICATION_JSON);\n         addLinksAnnotation(methodCreator, resourceInfo.getEntityClassName(), REL);\n \n-        methodCreator.returnValue(resourceInfo.getDataAccessImplementor().listAll(methodCreator));\n+        FieldDescriptor uriInfoField = of(methodCreator.getMethodDescriptor().getDeclaringClass(), URI_INFO.getName(),\n+                URI_INFO.getType());\n+        MethodDescriptor idPagedMethod = ofMethod(methodCreator.getMethodDescriptor().getDeclaringClass(), IS_PAGED.getName(),\n+                IS_PAGED.getType(), IS_PAGED.getParams());\n+\n+        BranchResult isPaged = methodCreator.ifTrue(methodCreator.invokeVirtualMethod(idPagedMethod, methodCreator.getThis()));", "originalCommit": "bfd03b31cd3d2dfb3633c8e9b23fdca80b09cc80", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwMDk4NA==", "url": "https://github.com/quarkusio/quarkus/pull/9742#discussion_r440300984", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    MethodDescriptor idPagedMethod = ofMethod(methodCreator.getMethodDescriptor().getDeclaringClass(), IS_PAGED.getName(),\n          \n          \n            \n                    MethodDescriptor isPagedMethod = ofMethod(methodCreator.getMethodDescriptor().getDeclaringClass(), IS_PAGED.getName(),", "author": "FroMage", "createdAt": "2020-06-15T16:31:03Z", "path": "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/hal/ListHalMethodImplementor.java", "diffHunk": "@@ -26,29 +40,66 @@\n      *     &#64;GET\n      *     &#64;Path(\"\")\n      *     &#64;Produces({\"application/hal+json\"})\n-     *     public HalCollectionWrapper listHal() {\n-     *         List entities = BookEntity.listAll();\n-     *         return new HalCollectionWrapper(entities, Entity.class, \"entities\");\n+     *     public Response listHal() {\n+     *         if (this.isPaged()) {\n+     *            Page page = ...; // Extract page index and size from a UriInfo field and create a page instance.\n+     *            PanacheQuery query = Entity.findAll();\n+     *            query.page(page);\n+     *            List entities = query.list();\n+     *            // Get the page count, and build first, last, next, previous page instances\n+     *            HalCollectionWrapper wrapper = new HalCollectionWrapper(entities, Entity.class, \"entities\");\n+     *            // Add first, last, next and previous page URIs to the wrapper if they exist\n+     *            Response.ResponseBuilder responseBuilder = Response.status(200);\n+     *            responseBuilder.entity(wrapper);\n+     *            // Add headers with first, last, next and previous page URIs if they exist\n+     *            return responseBuilder.build();\n+     *         } else {\n+     *             List entities = Entity.listAll();\n+     *             return Response.ok(new HalCollectionWrapper(entities, Entity.class, \"entities\")).build();\n+     *         }\n      *     }\n      * }\n      * </pre>\n      */\n     @Override\n     protected void implementInternal(ClassCreator classCreator, IndexView index, MethodPropertiesAccessor propertiesAccessor,\n             RestDataResourceInfo resourceInfo) {\n-        MethodCreator methodCreator = classCreator.getMethodCreator(NAME, HalCollectionWrapper.class);\n+        MethodCreator methodCreator = classCreator.getMethodCreator(NAME, Response.class);\n         addGetAnnotation(methodCreator);\n         addPathAnnotation(methodCreator,\n                 propertiesAccessor.getPath(resourceInfo.getClassInfo(), getStandardMethodMetadata(resourceInfo)));\n         addProducesAnnotation(methodCreator, MethodImplementor.APPLICATION_HAL_JSON);\n \n-        ResultHandle entities = resourceInfo.getDataAccessImplementor().listAll(methodCreator);\n-        methodCreator.returnValue(wrapEntities(methodCreator, entities, resourceInfo));\n+        FieldDescriptor uriInfoField = of(methodCreator.getMethodDescriptor().getDeclaringClass(), URI_INFO.getName(),\n+                URI_INFO.getType());\n+        MethodDescriptor idPagedMethod = ofMethod(methodCreator.getMethodDescriptor().getDeclaringClass(), IS_PAGED.getName(),", "originalCommit": "bfd03b31cd3d2dfb3633c8e9b23fdca80b09cc80", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwMTA5OA==", "url": "https://github.com/quarkusio/quarkus/pull/9742#discussion_r440301098", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    BranchResult isPaged = methodCreator.ifTrue(methodCreator.invokeVirtualMethod(idPagedMethod, methodCreator.getThis()));\n          \n          \n            \n                    BranchResult isPaged = methodCreator.ifTrue(methodCreator.invokeVirtualMethod(isPagedMethod, methodCreator.getThis()));", "author": "FroMage", "createdAt": "2020-06-15T16:31:14Z", "path": "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/hal/ListHalMethodImplementor.java", "diffHunk": "@@ -26,29 +40,66 @@\n      *     &#64;GET\n      *     &#64;Path(\"\")\n      *     &#64;Produces({\"application/hal+json\"})\n-     *     public HalCollectionWrapper listHal() {\n-     *         List entities = BookEntity.listAll();\n-     *         return new HalCollectionWrapper(entities, Entity.class, \"entities\");\n+     *     public Response listHal() {\n+     *         if (this.isPaged()) {\n+     *            Page page = ...; // Extract page index and size from a UriInfo field and create a page instance.\n+     *            PanacheQuery query = Entity.findAll();\n+     *            query.page(page);\n+     *            List entities = query.list();\n+     *            // Get the page count, and build first, last, next, previous page instances\n+     *            HalCollectionWrapper wrapper = new HalCollectionWrapper(entities, Entity.class, \"entities\");\n+     *            // Add first, last, next and previous page URIs to the wrapper if they exist\n+     *            Response.ResponseBuilder responseBuilder = Response.status(200);\n+     *            responseBuilder.entity(wrapper);\n+     *            // Add headers with first, last, next and previous page URIs if they exist\n+     *            return responseBuilder.build();\n+     *         } else {\n+     *             List entities = Entity.listAll();\n+     *             return Response.ok(new HalCollectionWrapper(entities, Entity.class, \"entities\")).build();\n+     *         }\n      *     }\n      * }\n      * </pre>\n      */\n     @Override\n     protected void implementInternal(ClassCreator classCreator, IndexView index, MethodPropertiesAccessor propertiesAccessor,\n             RestDataResourceInfo resourceInfo) {\n-        MethodCreator methodCreator = classCreator.getMethodCreator(NAME, HalCollectionWrapper.class);\n+        MethodCreator methodCreator = classCreator.getMethodCreator(NAME, Response.class);\n         addGetAnnotation(methodCreator);\n         addPathAnnotation(methodCreator,\n                 propertiesAccessor.getPath(resourceInfo.getClassInfo(), getStandardMethodMetadata(resourceInfo)));\n         addProducesAnnotation(methodCreator, MethodImplementor.APPLICATION_HAL_JSON);\n \n-        ResultHandle entities = resourceInfo.getDataAccessImplementor().listAll(methodCreator);\n-        methodCreator.returnValue(wrapEntities(methodCreator, entities, resourceInfo));\n+        FieldDescriptor uriInfoField = of(methodCreator.getMethodDescriptor().getDeclaringClass(), URI_INFO.getName(),\n+                URI_INFO.getType());\n+        MethodDescriptor idPagedMethod = ofMethod(methodCreator.getMethodDescriptor().getDeclaringClass(), IS_PAGED.getName(),\n+                IS_PAGED.getType(), IS_PAGED.getParams());\n+\n+        BranchResult isPaged = methodCreator.ifTrue(methodCreator.invokeVirtualMethod(idPagedMethod, methodCreator.getThis()));", "originalCommit": "bfd03b31cd3d2dfb3633c8e9b23fdca80b09cc80", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "485878a7fe2c6303b53e377a27eb9371f984aa80", "url": "https://github.com/quarkusio/quarkus/commit/485878a7fe2c6303b53e377a27eb9371f984aa80", "message": "REST Data with Panache pagination", "committedDate": "2020-06-15T17:52:13Z", "type": "forcePushed"}, {"oid": "d4f6628ac235d726be7b5a9ac28002c68d318aec", "url": "https://github.com/quarkusio/quarkus/commit/d4f6628ac235d726be7b5a9ac28002c68d318aec", "message": "REST Data with Panache pagination", "committedDate": "2020-06-16T10:50:07Z", "type": "commit"}, {"oid": "d4f6628ac235d726be7b5a9ac28002c68d318aec", "url": "https://github.com/quarkusio/quarkus/commit/d4f6628ac235d726be7b5a9ac28002c68d318aec", "message": "REST Data with Panache pagination", "committedDate": "2020-06-16T10:50:07Z", "type": "forcePushed"}]}