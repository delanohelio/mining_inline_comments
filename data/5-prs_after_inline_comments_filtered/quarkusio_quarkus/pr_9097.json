{"pr_number": 9097, "pr_title": "Simplify data source configuration", "pr_createdAt": "2020-05-05T19:40:32Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/9097", "timeline": [{"oid": "b9f513b9eee82ecc459273b58cf02fd88b9df3a1", "url": "https://github.com/quarkusio/quarkus/commit/b9f513b9eee82ecc459273b58cf02fd88b9df3a1", "message": "Simplify data source configuration\n\nDone by removing all traces of manually generated bytecode\nand instead relying on synthetic beans", "committedDate": "2020-05-06T06:00:11Z", "type": "forcePushed"}, {"oid": "b533e7aa874798e56efbb436d0643af7640a78b8", "url": "https://github.com/quarkusio/quarkus/commit/b533e7aa874798e56efbb436d0643af7640a78b8", "message": "Simplify data source configuration\n\nDone by removing all traces of manually generated bytecode\nand instead relying on synthetic beans", "committedDate": "2020-05-06T08:17:02Z", "type": "forcePushed"}, {"oid": "179065544b4a9bc8ca3d6c29e13132de9273413c", "url": "https://github.com/quarkusio/quarkus/commit/179065544b4a9bc8ca3d6c29e13132de9273413c", "message": "Simplify data source configuration\n\nDone by removing all traces of manually generated bytecode\nand instead relying on synthetic beans", "committedDate": "2020-05-06T08:24:01Z", "type": "forcePushed"}, {"oid": "3f07970ccb2f407f59f61964f4d3859181aacebd", "url": "https://github.com/quarkusio/quarkus/commit/3f07970ccb2f407f59f61964f4d3859181aacebd", "message": "Simplify data source configuration\n\nDone by removing all traces of manually generated bytecode\nand instead relying on synthetic beans", "committedDate": "2020-05-06T09:50:44Z", "type": "forcePushed"}, {"oid": "c30a471b64f97690d5782c2105fd4979091c4496", "url": "https://github.com/quarkusio/quarkus/commit/c30a471b64f97690d5782c2105fd4979091c4496", "message": "Simplify data source configuration\n\nDone by removing all traces of manually generated bytecode\nand instead relying on synthetic beans", "committedDate": "2020-05-06T11:13:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgxNTk0NA==", "url": "https://github.com/quarkusio/quarkus/pull/9097#discussion_r420815944", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // add the @DataSource class otherwise it won't registered as a qualifier\n          \n          \n            \n                    // add the @DataSource class otherwise it won't be registered as a qualifier", "author": "gsmet", "createdAt": "2020-05-06T14:02:01Z", "path": "extensions/agroal/deployment/src/main/java/io/quarkus/agroal/deployment/AgroalProcessor.java", "diffHunk": "@@ -197,28 +163,111 @@ private static void validateBuildTimeConfig(AggregatedDataSourceBuildTimeConfigB\n         }\n     }\n \n-    @Record(ExecutionTime.RUNTIME_INIT)\n+    private DataSourceSupport getDataSourceSupport(\n+            List<AggregatedDataSourceBuildTimeConfigBuildItem> aggregatedBuildTimeConfigBuildItems,\n+            SslNativeConfigBuildItem sslNativeConfig, Capabilities capabilities) {\n+        Map<String, DataSourceSupport.Entry> dataSourceSupportEntries = new HashMap<>();\n+        for (AggregatedDataSourceBuildTimeConfigBuildItem aggregatedDataSourceBuildTimeConfig : aggregatedBuildTimeConfigBuildItems) {\n+            String dataSourceName = aggregatedDataSourceBuildTimeConfig.getName();\n+            dataSourceSupportEntries.put(dataSourceName,\n+                    new DataSourceSupport.Entry(dataSourceName, aggregatedDataSourceBuildTimeConfig.getResolvedDbKind(),\n+                            aggregatedDataSourceBuildTimeConfig.getResolvedDriverClass(),\n+                            aggregatedDataSourceBuildTimeConfig.isLegacy(), aggregatedDataSourceBuildTimeConfig.isDefault()));\n+        }\n+\n+        return new DataSourceSupport(sslNativeConfig.isExplicitlyDisabled(),\n+                capabilities.isCapabilityPresent(Capabilities.METRICS), dataSourceSupportEntries);\n+    }\n+\n+    @Record(ExecutionTime.STATIC_INIT)\n     @BuildStep\n-    void configureDataSources(AgroalRecorder recorder,\n-            BuildProducer<JdbcDataSourceBuildItem> jdbcDataSource,\n+    void generateDataSourceSupportBean(AgroalRecorder recorder,\n             List<AggregatedDataSourceBuildTimeConfigBuildItem> aggregatedBuildTimeConfigBuildItems,\n-            DataSourcesBuildTimeConfig dataSourcesBuildTimeConfig,\n-            DataSourcesJdbcBuildTimeConfig dataSourcesJdbcBuildTimeConfig,\n+            SslNativeConfigBuildItem sslNativeConfig,\n+            Capabilities capabilities,\n+            BuildProducer<AdditionalBeanBuildItem> additionalBeans,\n+            BuildProducer<SyntheticBeanBuildItem> syntheticBeanBuildItemBuildProducer) {\n+        if (aggregatedBuildTimeConfigBuildItems.isEmpty()) {\n+            // No datasource has been configured so bail out\n+            return;\n+        }\n+\n+        // make a DataSourceProducer bean\n+        additionalBeans.produce(AdditionalBeanBuildItem.builder().addBeanClasses(DataSourceProducer.class).setUnremovable()\n+                .setDefaultScope(DotNames.SINGLETON).build());\n+        // add the @DataSource class otherwise it won't registered as a qualifier", "originalCommit": "c30a471b64f97690d5782c2105fd4979091c4496", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgxNjI0Mg==", "url": "https://github.com/quarkusio/quarkus/pull/9097#discussion_r420816242", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // create the DataSourceSupport bean that DataSourceProducer uses a dependency\n          \n          \n            \n                    // create the DataSourceSupport bean that DataSourceProducer uses as a dependency", "author": "gsmet", "createdAt": "2020-05-06T14:02:25Z", "path": "extensions/agroal/deployment/src/main/java/io/quarkus/agroal/deployment/AgroalProcessor.java", "diffHunk": "@@ -197,28 +163,111 @@ private static void validateBuildTimeConfig(AggregatedDataSourceBuildTimeConfigB\n         }\n     }\n \n-    @Record(ExecutionTime.RUNTIME_INIT)\n+    private DataSourceSupport getDataSourceSupport(\n+            List<AggregatedDataSourceBuildTimeConfigBuildItem> aggregatedBuildTimeConfigBuildItems,\n+            SslNativeConfigBuildItem sslNativeConfig, Capabilities capabilities) {\n+        Map<String, DataSourceSupport.Entry> dataSourceSupportEntries = new HashMap<>();\n+        for (AggregatedDataSourceBuildTimeConfigBuildItem aggregatedDataSourceBuildTimeConfig : aggregatedBuildTimeConfigBuildItems) {\n+            String dataSourceName = aggregatedDataSourceBuildTimeConfig.getName();\n+            dataSourceSupportEntries.put(dataSourceName,\n+                    new DataSourceSupport.Entry(dataSourceName, aggregatedDataSourceBuildTimeConfig.getResolvedDbKind(),\n+                            aggregatedDataSourceBuildTimeConfig.getResolvedDriverClass(),\n+                            aggregatedDataSourceBuildTimeConfig.isLegacy(), aggregatedDataSourceBuildTimeConfig.isDefault()));\n+        }\n+\n+        return new DataSourceSupport(sslNativeConfig.isExplicitlyDisabled(),\n+                capabilities.isCapabilityPresent(Capabilities.METRICS), dataSourceSupportEntries);\n+    }\n+\n+    @Record(ExecutionTime.STATIC_INIT)\n     @BuildStep\n-    void configureDataSources(AgroalRecorder recorder,\n-            BuildProducer<JdbcDataSourceBuildItem> jdbcDataSource,\n+    void generateDataSourceSupportBean(AgroalRecorder recorder,\n             List<AggregatedDataSourceBuildTimeConfigBuildItem> aggregatedBuildTimeConfigBuildItems,\n-            DataSourcesBuildTimeConfig dataSourcesBuildTimeConfig,\n-            DataSourcesJdbcBuildTimeConfig dataSourcesJdbcBuildTimeConfig,\n+            SslNativeConfigBuildItem sslNativeConfig,\n+            Capabilities capabilities,\n+            BuildProducer<AdditionalBeanBuildItem> additionalBeans,\n+            BuildProducer<SyntheticBeanBuildItem> syntheticBeanBuildItemBuildProducer) {\n+        if (aggregatedBuildTimeConfigBuildItems.isEmpty()) {\n+            // No datasource has been configured so bail out\n+            return;\n+        }\n+\n+        // make a DataSourceProducer bean\n+        additionalBeans.produce(AdditionalBeanBuildItem.builder().addBeanClasses(DataSourceProducer.class).setUnremovable()\n+                .setDefaultScope(DotNames.SINGLETON).build());\n+        // add the @DataSource class otherwise it won't registered as a qualifier\n+        additionalBeans.produce(AdditionalBeanBuildItem.builder().addBeanClass(DataSource.class).build());\n+\n+        // create the DataSourceSupport bean that DataSourceProducer uses a dependency", "originalCommit": "c30a471b64f97690d5782c2105fd4979091c4496", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgxOTI4Nw==", "url": "https://github.com/quarkusio/quarkus/pull/9097#discussion_r420819287", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * and it's {@code  createDataSource} method is called at runtime in order to produce\n          \n          \n            \n             * and its {@code  createDataSource} method is called at runtime in order to produce", "author": "gsmet", "createdAt": "2020-05-06T14:06:33Z", "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceProducer.java", "diffHunk": "@@ -41,64 +40,72 @@\n import io.quarkus.runtime.configuration.ConfigurationException;\n import io.quarkus.vault.CredentialsProvider;\n \n+/**\n+ * This class is sort of a producer for {@link AgroalDataSource}.\n+ *\n+ * It isn't a CDI producer in the literal sense, but it is marked as a bean\n+ * and it's {@code  createDataSource} method is called at runtime in order to produce", "originalCommit": "c30a471b64f97690d5782c2105fd4979091c4496", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyMTA5OA==", "url": "https://github.com/quarkusio/quarkus/pull/9097#discussion_r420821098", "bodyText": "Should we fix it?", "author": "gsmet", "createdAt": "2020-05-06T14:08:59Z", "path": "extensions/elytron-security-jdbc/runtime/src/main/java/io/quarkus/elytron/security/jdbc/JdbcRecorder.java", "diffHunk": "@@ -64,6 +64,7 @@ private void registerPrincipalQuery(PrincipalQueryConfig principalQuery, JdbcSec\n \n     private DataSource getDataSource(PrincipalQueryConfig principalQuery) {\n         return (DataSource) principalQuery.datasource\n+                // this is not correct, it should be something like 'Arc.container().instance(javax.sql.DataSource.class, new DataSource.DataSourceLiteral(name))'", "originalCommit": "c30a471b64f97690d5782c2105fd4979091c4496", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgzODE2MA==", "url": "https://github.com/quarkusio/quarkus/pull/9097#discussion_r420838160", "bodyText": "I wanted to make sure the tests run without the fix, because the way it's currently being used is good for uncovering bugs.\nI agree it should be fixed, in a second commit I guess?", "author": "geoand", "createdAt": "2020-05-06T14:31:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyMTA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg0Mjc3MA==", "url": "https://github.com/quarkusio/quarkus/pull/9097#discussion_r420842770", "bodyText": "Yeah, I would say just add another commit. Better have it right!", "author": "gsmet", "createdAt": "2020-05-06T14:37:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyMTA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg0MzkxMg==", "url": "https://github.com/quarkusio/quarkus/pull/9097#discussion_r420843912", "bodyText": "I added a second commit", "author": "geoand", "createdAt": "2020-05-06T14:38:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyMTA5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgzMDQwNg==", "url": "https://github.com/quarkusio/quarkus/pull/9097#discussion_r420830406", "bodyText": "Can't we inject all that now if this is a CDI bean? I thought we could and tbh that was one of the reasons I pushed for this change :).", "author": "gsmet", "createdAt": "2020-05-06T14:21:10Z", "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceProducer.java", "diffHunk": "@@ -41,64 +40,72 @@\n import io.quarkus.runtime.configuration.ConfigurationException;\n import io.quarkus.vault.CredentialsProvider;\n \n+/**\n+ * This class is sort of a producer for {@link AgroalDataSource}.\n+ *\n+ * It isn't a CDI producer in the literal sense, but it is marked as a bean\n+ * and it's {@code  createDataSource} method is called at runtime in order to produce\n+ * the actual {@code AgroalDataSource} objects.\n+ *\n+ * CDI scopes and qualifiers are setup at build-time, which is why this class is devoid of\n+ * any CDI annotations\n+ *\n+ */\n @SuppressWarnings(\"deprecation\")\n-public abstract class AbstractDataSourceProducer {\n+public class DataSourceProducer {\n \n-    private static final Logger log = Logger.getLogger(AbstractDataSourceProducer.class.getName());\n+    private static final Logger log = Logger.getLogger(DataSourceProducer.class.getName());\n \n-    private DataSourcesBuildTimeConfig dataSourcesBuildTimeConfig;\n-    private DataSourcesRuntimeConfig dataSourcesRuntimeConfig;\n-    private DataSourcesJdbcBuildTimeConfig dataSourcesJdbcBuildTimeConfig;\n-    private DataSourcesJdbcRuntimeConfig dataSourcesJdbcRuntimeConfig;\n+    private final DataSourcesBuildTimeConfig dataSourcesBuildTimeConfig;\n+    private final DataSourcesRuntimeConfig dataSourcesRuntimeConfig;\n+    private final DataSourcesJdbcBuildTimeConfig dataSourcesJdbcBuildTimeConfig;\n+    private final DataSourcesJdbcRuntimeConfig dataSourcesJdbcRuntimeConfig;\n+    private final LegacyDataSourcesJdbcBuildTimeConfig legacyDataSourcesJdbcBuildTimeConfig;\n+    private final LegacyDataSourcesRuntimeConfig legacyDataSourcesRuntimeConfig;\n+    private final LegacyDataSourcesJdbcRuntimeConfig legacyDataSourcesJdbcRuntimeConfig;", "originalCommit": "c30a471b64f97690d5782c2105fd4979091c4496", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgzODM4NQ==", "url": "https://github.com/quarkusio/quarkus/pull/9097#discussion_r420838385", "bodyText": "We are injecting them, constructor injection \ud83d\ude09", "author": "geoand", "createdAt": "2020-05-06T14:31:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgzMDQwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg0MjM0Mw==", "url": "https://github.com/quarkusio/quarkus/pull/9097#discussion_r420842343", "bodyText": "Ah yeah, what misled me was I was expecting getters to be removed but we were not relying on getters anyway before.\nMaybe we could drop checkConfigInjection then? Because we are sure things have been properly injected?", "author": "gsmet", "createdAt": "2020-05-06T14:36:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgzMDQwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg0NzEwMQ==", "url": "https://github.com/quarkusio/quarkus/pull/9097#discussion_r420847101", "bodyText": "Good idea, I fixed it", "author": "geoand", "createdAt": "2020-05-06T14:42:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgzMDQwNg=="}], "type": "inlineReview"}, {"oid": "c956c89b5d3eb82a7ecf59f840819da3c752fee4", "url": "https://github.com/quarkusio/quarkus/commit/c956c89b5d3eb82a7ecf59f840819da3c752fee4", "message": "Use better style CDI when obtaining the DataSource", "committedDate": "2020-05-06T14:38:15Z", "type": "forcePushed"}, {"oid": "4e25e6a33f6655c2bb4e644f294eb1f9d2cc8c7a", "url": "https://github.com/quarkusio/quarkus/commit/4e25e6a33f6655c2bb4e644f294eb1f9d2cc8c7a", "message": "Use better style CDI when obtaining the DataSource", "committedDate": "2020-05-06T14:42:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg0OTMzNQ==", "url": "https://github.com/quarkusio/quarkus/pull/9097#discussion_r420849335", "bodyText": "Sorry a bit late for that comment but I'm wondering if we should get rid of this lambda while we're at it. It really doesn't bring anything useful. I can do it later on if you're tired of my nitpicking :).", "author": "gsmet", "createdAt": "2020-05-06T14:45:13Z", "path": "extensions/elytron-security-jdbc/runtime/src/main/java/io/quarkus/elytron/security/jdbc/JdbcRecorder.java", "diffHunk": "@@ -63,8 +61,9 @@ private void registerPrincipalQuery(PrincipalQueryConfig principalQuery, JdbcSec\n     }\n \n     private DataSource getDataSource(PrincipalQueryConfig principalQuery) {\n-        return (DataSource) principalQuery.datasource\n-                .map(name -> Arc.container().instance(name).get())\n+        return principalQuery.datasource\n+                .map(name -> Arc.container()\n+                        .instance(DataSource.class, new io.quarkus.agroal.DataSource.DataSourceLiteral(name)).get())", "originalCommit": "4e25e6a33f6655c2bb4e644f294eb1f9d2cc8c7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg1MDM1MQ==", "url": "https://github.com/quarkusio/quarkus/pull/9097#discussion_r420850351", "bodyText": "Oh boy, you are right! I didn't see this was runtime code, let's fix it.", "author": "geoand", "createdAt": "2020-05-06T14:46:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg0OTMzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg1Mjc4OA==", "url": "https://github.com/quarkusio/quarkus/pull/9097#discussion_r420852788", "bodyText": "Fixed", "author": "geoand", "createdAt": "2020-05-06T14:49:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg0OTMzNQ=="}], "type": "inlineReview"}, {"oid": "2b45df4df3196ef01810daa4ba16b7d6102c0b98", "url": "https://github.com/quarkusio/quarkus/commit/2b45df4df3196ef01810daa4ba16b7d6102c0b98", "message": "Use better style CDI when obtaining the DataSource", "committedDate": "2020-05-06T14:49:05Z", "type": "forcePushed"}, {"oid": "d03fbbfc7c91d9f1741c83b3227394c360a9660f", "url": "https://github.com/quarkusio/quarkus/commit/d03fbbfc7c91d9f1741c83b3227394c360a9660f", "message": "Simplify data source configuration\n\nDone by removing all traces of manually generated bytecode\nand instead relying on synthetic beans\n\nCo-authored-by: Guillaume Smet <guillaume.smet@gmail.com>", "committedDate": "2020-05-06T15:03:31Z", "type": "commit"}, {"oid": "5af1577ffb741a22c8df705b7e70ab925881d9cc", "url": "https://github.com/quarkusio/quarkus/commit/5af1577ffb741a22c8df705b7e70ab925881d9cc", "message": "Use better style CDI when obtaining the DataSource", "committedDate": "2020-05-06T15:03:59Z", "type": "forcePushed"}, {"oid": "19001dfc340cf6c31ad01b98b7732f73877c4e05", "url": "https://github.com/quarkusio/quarkus/commit/19001dfc340cf6c31ad01b98b7732f73877c4e05", "message": "Use better style CDI when obtaining the DataSource", "committedDate": "2020-05-06T15:09:46Z", "type": "commit"}, {"oid": "19001dfc340cf6c31ad01b98b7732f73877c4e05", "url": "https://github.com/quarkusio/quarkus/commit/19001dfc340cf6c31ad01b98b7732f73877c4e05", "message": "Use better style CDI when obtaining the DataSource", "committedDate": "2020-05-06T15:09:46Z", "type": "forcePushed"}]}