{"pr_number": 11678, "pr_title": "Upgrade to Hibernate ORM 5.4.21.Final", "pr_createdAt": "2020-08-27T16:37:53Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/11678", "timeline": [{"oid": "6fd4b542a83949a72e8bdcb6240d50620e11f33a", "url": "https://github.com/quarkusio/quarkus/commit/6fd4b542a83949a72e8bdcb6240d50620e11f33a", "message": "Upgrade to latest Hibernate Reactive 1.0.0.Alpha9", "committedDate": "2020-08-28T16:10:09Z", "type": "forcePushed"}, {"oid": "0e90635b14cbda92bcff017610789c1d8e843f4f", "url": "https://github.com/quarkusio/quarkus/commit/0e90635b14cbda92bcff017610789c1d8e843f4f", "message": "Upgrade to Hibernate ORM 5.4.21.Final", "committedDate": "2020-08-28T16:15:02Z", "type": "commit"}, {"oid": "9c06a6f624075fd890a9bdc3dcedcc28a326015e", "url": "https://github.com/quarkusio/quarkus/commit/9c06a6f624075fd890a9bdc3dcedcc28a326015e", "message": "Upgrade to latest Hibernate Reactive 1.0.0.Alpha9", "committedDate": "2020-08-28T16:15:02Z", "type": "commit"}, {"oid": "9c06a6f624075fd890a9bdc3dcedcc28a326015e", "url": "https://github.com/quarkusio/quarkus/commit/9c06a6f624075fd890a9bdc3dcedcc28a326015e", "message": "Upgrade to latest Hibernate Reactive 1.0.0.Alpha9", "committedDate": "2020-08-28T16:15:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQxNjQzOQ==", "url": "https://github.com/quarkusio/quarkus/pull/11678#discussion_r479416439", "bodyText": "@cescoffier , @gavinking this line threw me off a bit; is there a better / shorter way of expressing this?\nAll I want is to ensure both tables are empty; I could have used a simple \"then\", but wanted to be fancy and take advantge of the fact that order of execution of these is not important.\nI noticed the \"and()\" operator is deprecated, couldn't find a better way than this.", "author": "Sanne", "createdAt": "2020-08-28T16:38:37Z", "path": "integration-tests/hibernate-reactive-postgresql/src/main/java/io/quarkus/it/hibernate/reactive/postgresql/HibernateReactiveTestEndpoint.java", "diffHunk": "@@ -129,25 +116,23 @@\n     @Produces(MediaType.APPLICATION_JSON)\n     public Uni<String> reactiveUpdate() {\n         final String NEW_NAME = \"Tina\";\n-        return mutinySession\n-                .flatMap(mutinySession -> {\n-                    return populateDB()\n-                            .flatMap(junk -> mutinySession.find(GuineaPig.class, 5))\n-                            .map(pig -> {\n-                                if (NEW_NAME.equals(pig.getName()))\n-                                    throw new AssertionError(\"Pig already had name \" + NEW_NAME);\n-                                pig.setName(NEW_NAME);\n-                                return pig;\n-                            })\n-                            .flatMap(junk -> mutinySession.flush())\n-                            .flatMap(junk -> selectNameFromId(5));\n-                });\n+        return populateDB()\n+                .then(() -> mutinySession.find(GuineaPig.class, 5))\n+                .invoke(pig -> {\n+                    if (NEW_NAME.equals(pig.getName()))\n+                        throw new AssertionError(\"Pig already had name \" + NEW_NAME);\n+                    pig.setName(NEW_NAME);\n+                })\n+                .then(() -> mutinySession.flush())\n+                .then(() -> selectNameFromId(5));\n     }\n \n     private Uni<RowSet<Row>> populateDB() {\n-        return pgPool.query(\"DELETE FROM Pig\").execute()\n-                .and(pgPool.query(\"DELETE FROM Cow\").execute())\n-                .flatMap(junk -> pgPool.preparedQuery(\"INSERT INTO Pig (id, name) VALUES (5, 'Aloi')\").execute());\n+        return Uni.combine().all().unis(", "originalCommit": "9c06a6f624075fd890a9bdc3dcedcc28a326015e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}