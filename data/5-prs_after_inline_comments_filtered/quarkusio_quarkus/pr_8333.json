{"pr_number": 8333, "pr_title": "support for using panache with kotlin", "pr_createdAt": "2020-04-01T15:09:44Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/8333", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMjk3Mg==", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r401712972", "bodyText": "This is not a correct default for all implementations.", "author": "FroMage", "createdAt": "2020-04-01T15:39:26Z", "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/PanacheEntityEnhancer.java", "diffHunk": "@@ -189,13 +190,15 @@ private void generateMethod(MethodInfo method, AnnotationValue targetReturnTypeE\n             mv.visitEnd();\n         }\n \n-        protected abstract String getModelDescriptor();\n+        protected String getModelDescriptor() {", "originalCommit": "36ae36db3ec94b41b45588706ae2a5bc8a6cdcbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyNTgwMw==", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r401725803", "bodyText": "when I looked at the 3ish current implementations they all returned the same value.  I can change it back but it just seemed redundant.", "author": "evanchooly", "createdAt": "2020-04-01T15:56:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMjk3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTczMTA3Ng==", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r401731076", "bodyText": "The panache-rx impl (in a branch ATM) doesn't, that's why.", "author": "FroMage", "createdAt": "2020-04-01T16:04:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMjk3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc2MjIzOA==", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r401762238", "bodyText": "ah.  does it hurt having that as the default that can be optionally overridden, though?  Seems like pointless work to push downstream if most are always going to be the same.  I'm happy to revert that if you'd like but it seems cleaner this way.", "author": "evanchooly", "createdAt": "2020-04-01T16:50:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMjk3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5NTU3Ng==", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r402895576", "bodyText": "No, I suppose it won't hurt. Fine.", "author": "FroMage", "createdAt": "2020-04-03T10:00:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMjk3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMzOTYxMg==", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r402339612", "bodyText": "I think this is exactly the same as KotlinPanacheEntityEnhancer#collectFields", "author": "geoand", "createdAt": "2020-04-02T14:05:24Z", "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheCompanionEnhancer.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package io.quarkus.hibernate.orm.panache.kotlin.deployment;\n+\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.DOTNAME_PANACHE_COMPANION;\n+\n+import java.lang.reflect.Modifier;\n+\n+import javax.persistence.Transient;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.FieldInfo;\n+import org.jboss.jandex.IndexView;\n+import org.objectweb.asm.ClassVisitor;\n+\n+import io.quarkus.gizmo.DescriptorUtils;\n+import io.quarkus.panache.common.deployment.EntityField;\n+import io.quarkus.panache.common.deployment.EntityModel;\n+import io.quarkus.panache.common.deployment.MetamodelInfo;\n+import io.quarkus.panache.common.deployment.PanacheEntityEnhancer;\n+\n+public class KotlinPanacheCompanionEnhancer extends PanacheEntityEnhancer<MetamodelInfo<EntityModel<EntityField>>> {\n+\n+    private static final DotName DOTNAME_TRANSIENT = DotName.createSimple(Transient.class.getName());\n+    private final ClassInfo panacheCompanionClassInfo;\n+\n+    public KotlinPanacheCompanionEnhancer(IndexView index) {\n+        super(index, KotlinPanacheResourceProcessor.DOTNAME_PANACHE_ENTITY_BASE);\n+        modelInfo = new MetamodelInfo<>();\n+        panacheCompanionClassInfo = index.getClassByName(DOTNAME_PANACHE_COMPANION);\n+    }\n+\n+    @Override\n+    public ClassVisitor apply(String className, ClassVisitor outputClassVisitor) {\n+        return new KotlinPanacheCompanionClassVisitor(className, outputClassVisitor, modelInfo, panacheEntityBaseClassInfo,\n+                panacheCompanionClassInfo, indexView.getClassByName(DotName.createSimple(className)));\n+    }\n+\n+    @Override\n+    public void collectFields(ClassInfo classInfo) {", "originalCommit": "63742c92dca9ebc56d833717894669903c2a16f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1Njg2Mg==", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r402356862", "bodyText": "It is, actually, i and I was thinking of removing it.  it's vestigial here, tbh, as kotlinc takes care of the field access for us.", "author": "evanchooly", "createdAt": "2020-04-02T14:28:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMzOTYxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1NzU1OQ==", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r402357559", "bodyText": "\ud83d\udc4d", "author": "geoand", "createdAt": "2020-04-02T14:29:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMzOTYxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3MzE2MA==", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r407873160", "bodyText": "This is odd. Why does the bean need to be unremovable? I mean what special thing does Kotlin Panache do that needs to make the bean unremovable when it previously wasn't required?", "author": "geoand", "createdAt": "2020-04-14T05:20:27Z", "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheResourceProcessor.java", "diffHunk": "@@ -0,0 +1,153 @@\n+package io.quarkus.hibernate.orm.panache.kotlin.deployment;\n+\n+import static org.jboss.jandex.DotName.createSimple;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.Type;\n+import org.jetbrains.annotations.NotNull;\n+\n+import io.quarkus.arc.deployment.UnremovableBeanBuildItem;\n+import io.quarkus.arc.processor.BeanInfo;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.ApplicationIndexBuildItem;\n+import io.quarkus.deployment.builditem.BytecodeTransformerBuildItem;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.hibernate.orm.deployment.AdditionalJpaModelBuildItem;\n+import io.quarkus.hibernate.orm.deployment.HibernateEnhancersRegisteredBuildItem;\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheCompanion;\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheEntity;\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheEntityBase;\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheRepository;\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheRepositoryBase;\n+import io.quarkus.hibernate.orm.panache.kotlin.runtime.JpaOperations;\n+import io.quarkus.panache.common.deployment.EntityField;\n+import io.quarkus.panache.common.deployment.EntityModel;\n+import io.quarkus.panache.common.deployment.MetamodelInfo;\n+import io.quarkus.panache.common.deployment.PanacheFieldAccessEnhancer;\n+import io.quarkus.panache.common.deployment.PanacheRepositoryEnhancer;\n+\n+public final class KotlinPanacheResourceProcessor {\n+\n+    private static final Set<DotName> UNREMOVABLE_BEANS = Collections.singleton(", "originalCommit": "3d983cf17d53e85e89b2323ab4d6f5d6cd10b1ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE0ODU0MA==", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r408148540", "bodyText": "That was copied from the java side.  I honestly don't know what it's there for but assumed @FroMage knew what he was doing when that went in.", "author": "evanchooly", "createdAt": "2020-04-14T13:46:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3MzE2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE1MjI2Nw==", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r408152267", "bodyText": "If it's in the Java side, then OK, let's keep it :)", "author": "geoand", "createdAt": "2020-04-14T13:51:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3MzE2MA=="}], "type": "inlineReview"}, {"oid": "9ddcd295879cbeba58c2db683174582fce9bbfed", "url": "https://github.com/quarkusio/quarkus/commit/9ddcd295879cbeba58c2db683174582fce9bbfed", "message": "reenable test", "committedDate": "2020-04-14T13:21:11Z", "type": "forcePushed"}, {"oid": "25fe74185e27088d01e28a0c5e1b8fbfc8a31ad0", "url": "https://github.com/quarkusio/quarkus/commit/25fe74185e27088d01e28a0c5e1b8fbfc8a31ad0", "message": "rebase and tidy up", "committedDate": "2020-04-17T19:02:06Z", "type": "forcePushed"}, {"oid": "e7e1ff469b743c25476ecea2729807ee3bbab52a", "url": "https://github.com/quarkusio/quarkus/commit/e7e1ff469b743c25476ecea2729807ee3bbab52a", "message": "support for using panache with kotlin", "committedDate": "2020-04-17T19:02:46Z", "type": "forcePushed"}, {"oid": "78f89f787cff2400e6e689d22a29fcff0fcb9475", "url": "https://github.com/quarkusio/quarkus/commit/78f89f787cff2400e6e689d22a29fcff0fcb9475", "message": "support for using panache with kotlin", "committedDate": "2020-04-20T13:51:06Z", "type": "forcePushed"}, {"oid": "24bd042f774536364ea0dd480ae083bace194dbb", "url": "https://github.com/quarkusio/quarkus/commit/24bd042f774536364ea0dd480ae083bace194dbb", "message": "support for using panache with kotlin", "committedDate": "2020-04-20T15:55:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzMTYxMQ==", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r412131611", "bodyText": "Don't repositories have an Id type parameter too?", "author": "FroMage", "createdAt": "2020-04-21T12:15:39Z", "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheRepositoryClassVisitor.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package io.quarkus.hibernate.orm.panache.kotlin.deployment;\n+\n+import static io.quarkus.gizmo.Gizmo.ASM_API_VERSION;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.CLASS_SIGNATURE;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.ID_TYPE_SIGNATURE;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.JPA_OPERATIONS;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.OBJECT_SIGNATURE;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.PANACHE_ENTITY_SIGNATURE;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.PANACHE_REPOSITORY_BASE_DOTNAME;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.PANACHE_REPOSITORY_BASE_SIGNATURE;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.PANACHE_REPOSITORY_SIGNATURE;\n+import static io.quarkus.panache.common.deployment.PanacheRepositoryEnhancer.PanacheRepositoryClassVisitor.findEntityTypeArgumentsForPanacheRepository;\n+import static org.jboss.jandex.DotName.createSimple;\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.INVOKESTATIC;\n+\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.regex.Pattern;\n+\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.MethodInfo;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Type;\n+\n+import io.quarkus.gizmo.Gizmo;\n+import io.quarkus.panache.common.deployment.JandexUtil;\n+\n+class KotlinPanacheRepositoryClassVisitor extends ClassVisitor {\n+\n+    public static final Pattern DEFAULT_IMPLS = Pattern.compile(\".*PanacheRepository.*\\\\$DefaultImpls\");\n+    private final Map<String, MethodInfo> bridgeMethods = new TreeMap<>();\n+    private final IndexView indexView;\n+    private org.objectweb.asm.Type entityType;\n+    private String entitySignature;\n+\n+    public KotlinPanacheRepositoryClassVisitor(String className, ClassVisitor outputClassVisitor, IndexView indexView) {\n+        super(Gizmo.ASM_API_VERSION, outputClassVisitor);\n+        this.indexView = indexView;\n+        indexView.getClassByName(createSimple(className))\n+                .methods()\n+                .forEach(method -> {\n+                    if (method.hasAnnotation(JandexUtil.DOTNAME_GENERATE_BRIDGE)) {\n+                        bridgeMethods.put(method.name() + JandexUtil.getDescriptor(method,\n+                                m -> m.equals(\"Entity\") ? entitySignature : null), method);", "originalCommit": "24bd042f774536364ea0dd480ae083bace194dbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwODE1Ng==", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r419408156", "bodyText": "Up.", "author": "FroMage", "createdAt": "2020-05-04T12:45:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzMTYxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzNzcwMA==", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r412137700", "bodyText": "This can't work, as it ignores type arguments. I've already removed this method two times because it's incorrect and lures people into thinking it will work when it does not. In both cases I didn't need that method.", "author": "FroMage", "createdAt": "2020-04-21T12:24:46Z", "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/JandexUtil.java", "diffHunk": "@@ -346,6 +347,23 @@ private static void unbox(MethodVisitor mv, String owner, String methodName, Str\n         mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, owner, methodName, \"()\" + returnTypeSignature, false);\n     }\n \n+    public static MethodInfo findMethod(ClassInfo classInfo, MethodInfo methodInfo) {", "originalCommit": "24bd042f774536364ea0dd480ae083bace194dbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUxNjU0MQ==", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r417516541", "bodyText": "No longer used.  removed.", "author": "evanchooly", "createdAt": "2020-04-29T18:16:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzNzcwMA=="}], "type": "inlineReview"}, {"oid": "115352609d61cd7c1ed6e1e3a80cffe4f8bf98f2", "url": "https://github.com/quarkusio/quarkus/commit/115352609d61cd7c1ed6e1e3a80cffe4f8bf98f2", "message": "support for using panache with kotlin", "committedDate": "2020-04-29T18:11:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE4MzY2MA==", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r418183660", "bodyText": "I think this needs to be have some comments on what it does", "author": "geoand", "createdAt": "2020-04-30T17:47:34Z", "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheCompanionClassVisitor.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package io.quarkus.hibernate.orm.panache.kotlin.deployment;\n+\n+import static io.quarkus.gizmo.Gizmo.ASM_API_VERSION;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.CLASS_SIGNATURE;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.JPA_OPERATIONS;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.OBJECT_SIGNATURE;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.PANACHE_COMPANION_SIGNATURE;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.PANACHE_ENTITY_SIGNATURE;\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.INVOKESTATIC;\n+\n+import java.util.Map;\n+import java.util.StringJoiner;\n+import java.util.TreeMap;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.MethodInfo;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+\n+import io.quarkus.panache.common.deployment.JandexUtil;\n+\n+class KotlinPanacheCompanionClassVisitor extends ClassVisitor {", "originalCommit": "115352609d61cd7c1ed6e1e3a80cffe4f8bf98f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU4NzI2NQ==", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r418587265", "bodyText": "Great, thanks!", "author": "geoand", "createdAt": "2020-05-01T15:17:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE4MzY2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE4NDI2NA==", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r418184264", "bodyText": "Looks like this removes the final modifier among other things, but it would good to have some comments", "author": "geoand", "createdAt": "2020-04-30T17:48:40Z", "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheEntityClassVisitor.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package io.quarkus.hibernate.orm.panache.kotlin.deployment;\n+\n+import java.util.List;\n+import java.util.StringJoiner;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+\n+import io.quarkus.panache.common.deployment.EntityField;\n+import io.quarkus.panache.common.deployment.EntityModel;\n+import io.quarkus.panache.common.deployment.MetamodelInfo;\n+import io.quarkus.panache.common.deployment.PanacheEntityEnhancer;\n+import io.quarkus.panache.common.deployment.PanacheMethodCustomizer;\n+\n+class KotlinPanacheEntityClassVisitor extends PanacheEntityEnhancer.PanacheEntityClassVisitor<EntityField> {", "originalCommit": "115352609d61cd7c1ed6e1e3a80cffe4f8bf98f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwNTQyMA==", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r419405420", "bodyText": "WTF happened here? ;)", "author": "FroMage", "createdAt": "2020-05-04T12:41:16Z", "path": "core/runtime/src/main/java/io/quarkus/runtime/ApplicationLifecycleManager.java", "diffHunk": "@@ -27,7 +27,7 @@\n  * The {@link Application} class is responsible for starting and stopping the application,\n  * but nothing else. This class can be used to run both persistent applications that will run\n  * till they receive a signal, and command mode applications that will run until the main method\n- * returns. This class registers a shutdown hook to properly shut down the application, and handles\n+ * returns. This class registers a shut\u00aadown hook to properly shut down the application, and handles", "originalCommit": "7223c581d64871fdde2a241609a23593500c0f45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2NDk4NQ==", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r419464985", "bodyText": "oops.  i switch between windows and mac regularly and the muscle sometimes lags.  :)", "author": "evanchooly", "createdAt": "2020-05-04T14:09:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwNTQyMA=="}], "type": "inlineReview"}, {"oid": "7e70ceedcb2c907c8cc6caedee8b21ddaca25298", "url": "https://github.com/quarkusio/quarkus/commit/7e70ceedcb2c907c8cc6caedee8b21ddaca25298", "message": "support for using panache with kotlin", "committedDate": "2020-05-05T16:23:42Z", "type": "forcePushed"}, {"oid": "8fe965a8b8210d53f21de473276791c2ab5b5b9c", "url": "https://github.com/quarkusio/quarkus/commit/8fe965a8b8210d53f21de473276791c2ab5b5b9c", "message": "support for using panache with kotlin", "committedDate": "2020-05-07T16:03:41Z", "type": "commit"}, {"oid": "6eb1a8946d48ed492b7acb8777e4a4698b4c78e7", "url": "https://github.com/quarkusio/quarkus/commit/6eb1a8946d48ed492b7acb8777e4a4698b4c78e7", "message": "Forgot to add hibernate-orm-panache-kotlin to runtime bom", "committedDate": "2020-05-07T16:06:59Z", "type": "forcePushed"}, {"oid": "85e32cc85d08e1559c178f7ce6a0f3c217e3c4aa", "url": "https://github.com/quarkusio/quarkus/commit/85e32cc85d08e1559c178f7ce6a0f3c217e3c4aa", "message": "Shared JpaOperations and PanacheQueryImpl between Java/Kotlin modules\n\nIntroduced quarkus-hibernate-orm-panache-common[-deployment] modules\nJpaOperations and PanacheQueryImpl moved there\nThe processor which registers and checks named queries too\n\nMade the Java and Kotlin modules use this", "committedDate": "2020-05-07T16:31:38Z", "type": "commit"}, {"oid": "f01206d4a18b1a4fdc4210bfe40b193666fc1ff3", "url": "https://github.com/quarkusio/quarkus/commit/f01206d4a18b1a4fdc4210bfe40b193666fc1ff3", "message": "Forgot to add hibernate-orm-panache-kotlin to runtime bom", "committedDate": "2020-05-07T16:31:38Z", "type": "commit"}, {"oid": "f01206d4a18b1a4fdc4210bfe40b193666fc1ff3", "url": "https://github.com/quarkusio/quarkus/commit/f01206d4a18b1a4fdc4210bfe40b193666fc1ff3", "message": "Forgot to add hibernate-orm-panache-kotlin to runtime bom", "committedDate": "2020-05-07T16:31:38Z", "type": "forcePushed"}, {"oid": "90327511de2616583c60d20cdee73f59372d39d3", "url": "https://github.com/quarkusio/quarkus/commit/90327511de2616583c60d20cdee73f59372d39d3", "message": "Added unlisted extension descriptor", "committedDate": "2020-05-11T09:42:45Z", "type": "commit"}]}