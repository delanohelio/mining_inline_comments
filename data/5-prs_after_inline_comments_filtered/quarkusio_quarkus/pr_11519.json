{"pr_number": 11519, "pr_title": "Multiple persistence units follow up", "pr_createdAt": "2020-08-21T11:19:47Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/11519", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1MzQ0OQ==", "url": "https://github.com/quarkusio/quarkus/pull/11519#discussion_r474653449", "bodyText": "\ud83d\udc4d", "author": "Sanne", "createdAt": "2020-08-21T12:02:45Z", "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "diffHunk": "@@ -136,7 +136,9 @@ CapabilityBuildItem capability() {\n \n     @BuildStep\n     void checkTransactionsSupport(Capabilities capabilities) {\n-        if (capabilities.isMissing(Capability.TRANSACTIONS)) {\n+        // JTA is necessary for blocking Hibernate ORM but not necessarily for Hibernate Reactive\n+        if (capabilities.isMissing(Capability.TRANSACTIONS)\n+                && capabilities.isMissing(Capability.HIBERNATE_REACTIVE)) {", "originalCommit": "cad4973606c695cf8ef26d2d009fdef5b9bdd11d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1NjQ0MQ==", "url": "https://github.com/quarkusio/quarkus/pull/11519#discussion_r474656441", "bodyText": "there's a corner case which might have a surprise effect to users:\n\nDB-1 using MySQL (or MariaDB) and sets a weird engine like BLACKHOLE\nDB-2 using MySQL (or MariaDB) and doesn't set anything\nall data written on DB-2 disappears as well without warning ?\n\nIMO we need to require full consistency among the MySQL/MariaDB configured PUs", "author": "Sanne", "createdAt": "2020-08-21T12:09:27Z", "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "diffHunk": "@@ -575,7 +577,9 @@ private void handleHibernateORMWithNoPersistenceXml(\n                     jdbcDataSources, applicationArchivesBuildItem, launchMode,\n                     systemProperties, nativeImageResources, hotDeploymentWatchedFiles, persistenceUnitDescriptors);\n \n-            storageEngines.add(persistenceUnitEntry.getValue().dialect.storageEngine);\n+            if (persistenceUnitEntry.getValue().dialect.storageEngine.isPresent()) {", "originalCommit": "d9d715d51c74fd417545f408bbe0c2525a957d5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1NzYzMA==", "url": "https://github.com/quarkusio/quarkus/pull/11519#discussion_r474657630", "bodyText": "Yeah, the issue is that we have no way to detect this properly. We could assert the db-kind but people can do whatever they want with that.\nWe could catch 99% of the mistakes though, probably better than what I did.", "author": "gsmet", "createdAt": "2020-08-21T12:12:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1NjQ0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY2MTczNA==", "url": "https://github.com/quarkusio/quarkus/pull/11519#discussion_r474661734", "bodyText": "Ultimately the engine variable is read by the MySQL Dialect. So we know it's going to affect people either if they choose any of the extensions ofthe MySQLDialect (explicitly), or if we'll be chosing such a dialect based on the db-kind .. isn't that 100% ?", "author": "Sanne", "createdAt": "2020-08-21T12:21:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1NjQ0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY3MTkzNw==", "url": "https://github.com/quarkusio/quarkus/pull/11519#discussion_r474671937", "bodyText": "I don't know. Frankly, I think that's a lot of work for something that is half baked in ORM :/. This should never has been included in ORM that way. I'll see what I can do.", "author": "gsmet", "createdAt": "2020-08-21T12:42:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1NjQ0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY4MDA5OQ==", "url": "https://github.com/quarkusio/quarkus/pull/11519#discussion_r474680099", "bodyText": "Sure, it's half baked and I suppose there's better use of your time. Feel free to postpone it into a different issue?", "author": "Sanne", "createdAt": "2020-08-21T12:58:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1NjQ0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1NzIzOQ==", "url": "https://github.com/quarkusio/quarkus/pull/11519#discussion_r474657239", "bodyText": "\ud83d\udc4d", "author": "Sanne", "createdAt": "2020-08-21T12:11:16Z", "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "diffHunk": "@@ -773,6 +777,12 @@ private static void producePersistenceUnitDescriptorFromConfig(\n             p.put(JPA_SHARED_CACHE_MODE, SharedCacheMode.NONE);\n         }\n \n+        // Hibernate Validator integration: we force the callback mode to have bootstrap errors reported rather than validation ignored\n+        // if there is any issue when bootstrapping Hibernate Validator.\n+        if (capabilities.isPresent(Capability.HIBERNATE_VALIDATOR)) {\n+            descriptor.getProperties().setProperty(AvailableSettings.JPA_VALIDATION_MODE, ValidationMode.CALLBACK.name());\n+        }", "originalCommit": "fd072bf739c7a52a1cf53ddca2cf7691de16928a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1NzM4MA==", "url": "https://github.com/quarkusio/quarkus/pull/11519#discussion_r474657380", "bodyText": "\ud83d\udc4d", "author": "Sanne", "createdAt": "2020-08-21T12:11:39Z", "path": "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsUndefinedPackagesTest.java", "diffHunk": "@@ -17,7 +17,8 @@\n             .setExpectedException(ConfigurationException.class)\n             .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n                     .addClass(User.class)\n-                    .addAsResource(\"application-multiple-persistence-units-invalid.properties\", \"application.properties\"));\n+                    .addAsResource(\"application-multiple-persistence-units-undefined-packages.properties\",\n+                            \"application.properties\"));", "originalCommit": "3e9a8a816c8f0b590b412e3373cab0c04a435f0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "50ee306fab35a62f256572c5a28d2436a70ae2b6", "url": "https://github.com/quarkusio/quarkus/commit/50ee306fab35a62f256572c5a28d2436a70ae2b6", "message": "Only throw a storage engine exception for MySQL and MariaDB", "committedDate": "2020-08-26T09:40:23Z", "type": "forcePushed"}, {"oid": "d6faf7b3a4d51f90123b31de33d715b39a1f55cc", "url": "https://github.com/quarkusio/quarkus/commit/d6faf7b3a4d51f90123b31de33d715b39a1f55cc", "message": "Only throw an error if no JTA if Hibernate Reactive is not around", "committedDate": "2020-08-26T15:03:50Z", "type": "commit"}, {"oid": "ddde44af225122442f56344e36ddc027365d641b", "url": "https://github.com/quarkusio/quarkus/commit/ddde44af225122442f56344e36ddc027365d641b", "message": "Only throw an error if two different storage engines are defined\n\nThe storage engine is only used by MySQL/MariaDB so a setup with a MySQL\nPU using a storage engine and a PostgreSQL PU not using any is perfectly\nvalid.", "committedDate": "2020-08-26T15:03:50Z", "type": "commit"}, {"oid": "54b956535ace253485c08176d7fc5eeefbfc2364", "url": "https://github.com/quarkusio/quarkus/commit/54b956535ace253485c08176d7fc5eeefbfc2364", "message": "Force callback mode in Hibernate ORM when Hibernate Validator is present\n\nWith auto, if we have an error when bootstrapping the Bean Validation\nintegration, the error will be swallowed and all validation will be\nignored. It's far better to report an error in this case.", "committedDate": "2020-08-26T15:03:50Z", "type": "commit"}, {"oid": "aeab9bd2a3579b47349a821b8cc8b352faf67770", "url": "https://github.com/quarkusio/quarkus/commit/aeab9bd2a3579b47349a821b8cc8b352faf67770", "message": "Rename test configuration file to avoid confusion", "committedDate": "2020-08-26T15:03:50Z", "type": "commit"}, {"oid": "140dfcf241ec5888d5c24bd0654b2114d960e7fd", "url": "https://github.com/quarkusio/quarkus/commit/140dfcf241ec5888d5c24bd0654b2114d960e7fd", "message": "Only throw a storage engine exception for MySQL and MariaDB", "committedDate": "2020-08-26T15:03:50Z", "type": "commit"}, {"oid": "140dfcf241ec5888d5c24bd0654b2114d960e7fd", "url": "https://github.com/quarkusio/quarkus/commit/140dfcf241ec5888d5c24bd0654b2114d960e7fd", "message": "Only throw a storage engine exception for MySQL and MariaDB", "committedDate": "2020-08-26T15:03:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ1NzU2Nw==", "url": "https://github.com/quarkusio/quarkus/pull/11519#discussion_r477457567", "bodyText": "funny :)", "author": "Sanne", "createdAt": "2020-08-26T17:10:43Z", "path": "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsInconsistentStorageEnginesTest.java", "diffHunk": "@@ -30,4 +31,10 @@ public void testInvalidConfiguration() {\n         // deployment exception should happen first\n         Assertions.fail();\n     }\n+\n+    /**\n+     * This is just to have the dialect matching MySQL and trigger the MySQL + storage engines check.\n+     */\n+    public static class H2DialectWithMySQLInTheName extends H2Dialect {", "originalCommit": "140dfcf241ec5888d5c24bd0654b2114d960e7fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2MDMwMQ==", "url": "https://github.com/quarkusio/quarkus/pull/11519#discussion_r477460301", "bodyText": "Yeah, I didn't want to end up with MySQL there :).", "author": "gsmet", "createdAt": "2020-08-26T17:15:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ1NzU2Nw=="}], "type": "inlineReview"}]}