{"pr_number": 9127, "pr_title": "Remove manually generated Flyway beans", "pr_createdAt": "2020-05-06T16:10:27Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/9127", "timeline": [{"oid": "56f5be0c272dc8057a45609b91670b0110d89174", "url": "https://github.com/quarkusio/quarkus/commit/56f5be0c272dc8057a45609b91670b0110d89174", "message": "Remove manually generated Flyway beans", "committedDate": "2020-05-06T16:48:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0MjEyNw==", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421442127", "bodyText": "I think that this map needs to be synchronized as it could be accessed from multiple threads concurrently. We should probably use ConcurrentHashMap and computeIfAbsent() in the getDataSource() method.", "author": "mkouba", "createdAt": "2020-05-07T11:46:41Z", "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceProducer.java", "diffHunk": "@@ -67,7 +67,7 @@\n     private final TransactionSynchronizationRegistry transactionSynchronizationRegistry;\n     private final DataSourceSupport dataSourceSupport;\n \n-    private final List<AgroalDataSource> dataSources = new ArrayList<>();\n+    private final Map<String, AgroalDataSource> dataSources = new HashMap<>();", "originalCommit": "56f5be0c272dc8057a45609b91670b0110d89174", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ1MDgwNw==", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421450807", "bodyText": "This is one thing I was pondering as well... Under which circumstances could multiple threads access this?", "author": "geoand", "createdAt": "2020-05-07T12:03:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0MjEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ1MzUyOA==", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421453528", "bodyText": "Well, the bean is @Singleton, right? And so the bean instance is shared. I don't know enough about how the DS instances are accessed in quarkus but in theory it's possible. We should also ensure the correct visibility from JMM point of view.", "author": "mkouba", "createdAt": "2020-05-07T12:08:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0MjEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ2Nzc2OA==", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421467768", "bodyText": "DataSource is a synthetic bean whose supplier ends up calling this method. The calls to this method theoretically would only be done from recorders which are not concurrent.\nBut I do understand that we should be on the safe side here and make it a ConcurrentHashMap.\nBut I remember @gsmet saying that computeIfAbsent is very slow in that case, do we have a better alternative?", "author": "geoand", "createdAt": "2020-05-07T12:34:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0MjEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ3NjMxMA==", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421476310", "bodyText": "I think that computeIfAbsent is absolutely OK unless called very often in a critical path (which is not the case here).", "author": "mkouba", "createdAt": "2020-05-07T12:47:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0MjEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4NjMwOQ==", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421486309", "bodyText": "Yeah we're definitely not a on a hot path here. Just wondering if @gsmet had some equally easy better performing alternative to offer.", "author": "geoand", "createdAt": "2020-05-07T13:03:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0MjEyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0NDE1NQ==", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421444155", "bodyText": "The name of this class is somehow confusing. If possible, I'd rename it to DataSources or something like that and the javadoc should be clear that it's registered as a bean. In fact, I see no reason to set the scope in the AgroalProcessor. Just annotate this class with @Singleton.", "author": "mkouba", "createdAt": "2020-05-07T11:50:32Z", "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceProducer.java", "diffHunk": "@@ -67,7 +67,7 @@\n     private final TransactionSynchronizationRegistry transactionSynchronizationRegistry;\n     private final DataSourceSupport dataSourceSupport;\n \n-    private final List<AgroalDataSource> dataSources = new ArrayList<>();\n+    private final Map<String, AgroalDataSource> dataSources = new HashMap<>();\n \n     public DataSourceProducer(DataSourcesBuildTimeConfig dataSourcesBuildTimeConfig,", "originalCommit": "56f5be0c272dc8057a45609b91670b0110d89174", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4NTU0MQ==", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421485541", "bodyText": "Done", "author": "geoand", "createdAt": "2020-05-07T13:02:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0NDE1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0NTI2OQ==", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421445269", "bodyText": "I find this class useless. If needer, I'd add a static util method to DataSources:\nstatic AgroalDataSource getDataSource(String dataSourceName) {\n   return Arc.container().instance(DataSources.class).get().getDataSource(dataSourceName);\n}", "author": "mkouba", "createdAt": "2020-05-07T11:52:46Z", "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceRetriever.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package io.quarkus.agroal.runtime;\n+\n+import io.agroal.api.AgroalDataSource;\n+import io.quarkus.arc.Arc;\n+\n+/**\n+ * Meant to be used from recorders that create synthetic beans that need access to {@code Datasource}.\n+ * In such using {@code Arc.container.instance(DataSource.class)} is not possible because\n+ * {@code Datasource} is itself a synthetic bean.\n+ *\n+ * This class class relies on the fact that DataSourceProducer should given the same input\n+ * always return the same {@code AgroalDataSource} no matter how many times it is invoked\n+ * (which makes since because {@code DataSource} is a {@code Singleton} bean).\n+ *\n+ * This is not thread-safe and relies on the fact that the recorders are called in order\n+ * (the order being worked out by the Quarkus build system)\n+ */\n+public final class DataSourceRetriever {", "originalCommit": "56f5be0c272dc8057a45609b91670b0110d89174", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ1MTY0MQ==", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421451641", "bodyText": "I think it makes sense, I'll take a look.", "author": "geoand", "createdAt": "2020-05-07T12:04:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0NTI2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4NTQ0Nw==", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421485447", "bodyText": "I moved it to DataSources", "author": "geoand", "createdAt": "2020-05-07T13:02:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0NTI2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0OTA4NA==", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421449084", "bodyText": "You could make use of io.quarkus.arc.processor.QualifierConfigurator, i.e. something like:\nconfigurator\n   .addQualifier().annotation(DotNames.NAMED).addValue(\"value\", beanName).done()  \n   .addQualifier().annotation(FlywayDataSource.class).addValue(\"value\", dataSourceName).done()\n   .done();\nThat looks much nicer, doesn't it? ;-)", "author": "mkouba", "createdAt": "2020-05-07T11:59:52Z", "path": "extensions/flyway/deployment/src/main/java/io/quarkus/flyway/FlywayProcessor.java", "diffHunk": "@@ -86,21 +87,62 @@ void build(BuildProducer<AdditionalBeanBuildItem> additionalBeanProducer,\n \n     @BuildStep\n     @Record(ExecutionTime.RUNTIME_INIT)\n-    ServiceStartBuildItem configureRuntimeProperties(FlywayRecorder recorder,\n-            FlywayRuntimeConfig flywayRuntimeConfig,\n-            BeanContainerBuildItem beanContainer,\n+    ServiceStartBuildItem createBeansAndStartActions(FlywayRecorder recorder,\n             List<JdbcDataSourceBuildItem> jdbcDataSourceBuildItems,\n+            BuildProducer<AdditionalBeanBuildItem> additionalBeans,\n+            BuildProducer<SyntheticBeanBuildItem> syntheticBeanBuildItemBuildProducer,\n             BuildProducer<JdbcDataSourceSchemaReadyBuildItem> schemaReadyBuildItem) {\n-        recorder.doStartActions(flywayRuntimeConfig, beanContainer.getValue());\n+\n+        // make a FlywayContainerProducer bean\n+        additionalBeans.produce(AdditionalBeanBuildItem.builder().addBeanClasses(FlywayContainerProducer.class).setUnremovable()\n+                .setDefaultScope(DotNames.SINGLETON).build());\n+        // add the @FlywayDataSource class otherwise it won't registered as a qualifier\n+        additionalBeans.produce(AdditionalBeanBuildItem.builder().addBeanClass(FlywayDataSource.class).build());\n+\n+        Collection<String> dataSourceNames = getDataSourceNames(jdbcDataSourceBuildItems);\n+\n+        for (String dataSourceName : dataSourceNames) {\n+            SyntheticBeanBuildItem.ExtendedBeanConfigurator configurator = SyntheticBeanBuildItem\n+                    .configure(Flyway.class)\n+                    .scope(Dependent.class) // this is what the existing code does, but it doesn't seem reasonable\n+                    .setRuntimeInit()\n+                    .unremovable()\n+                    .supplier(recorder.flywaySupplier(dataSourceName));\n+\n+            if (DataSourceUtil.isDefault(dataSourceName)) {\n+                configurator.addQualifier(Default.class);\n+            } else {\n+                String beanName = FLYWAY_BEAN_NAME_PREFIX + dataSourceName;\n+                configurator.name(beanName);\n+                configurator\n+                        .qualifiers(\n+                                AnnotationInstance.create(DotNames.NAMED, null,", "originalCommit": "56f5be0c272dc8057a45609b91670b0110d89174", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ1MTc3Nw==", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421451777", "bodyText": "Indeed it does :)", "author": "geoand", "createdAt": "2020-05-07T12:05:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0OTA4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5MDM5NQ==", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421490395", "bodyText": "Still creating AnnotationInstance directly?", "author": "mkouba", "createdAt": "2020-05-07T13:09:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0OTA4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5MTM4NA==", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421491384", "bodyText": "Oh man... I only applied the change to AgroalProcessor.", "author": "geoand", "createdAt": "2020-05-07T13:11:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0OTA4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5MzY0Ng==", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421493646", "bodyText": "Fixed", "author": "geoand", "createdAt": "2020-05-07T13:14:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0OTA4NA=="}], "type": "inlineReview"}, {"oid": "ed859dc87868990547d59788e295968efaa2f2ca", "url": "https://github.com/quarkusio/quarkus/commit/ed859dc87868990547d59788e295968efaa2f2ca", "message": "Remove manually generated Flyway beans", "committedDate": "2020-05-07T13:01:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4OTcwMQ==", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421489701", "bodyText": "Now you could use DataSources.fromName() here, or?", "author": "mkouba", "createdAt": "2020-05-07T13:08:56Z", "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/AgroalRecorder.java", "diffHunk": "@@ -22,8 +21,8 @@ public DataSourceSupport get() {\n \n     public Supplier<AgroalDataSource> agroalDataSourceSupplier(String dataSourceName,\n             @SuppressWarnings(\"unused\") DataSourcesRuntimeConfig dataSourcesRuntimeConfig) {\n-        final AgroalDataSource agroalDataSource = Arc.container().instance(DataSourceProducer.class).get()\n-                .createDataSource(dataSourceName);\n+        final AgroalDataSource agroalDataSource = Arc.container().instance(DataSources.class).get()", "originalCommit": "ed859dc87868990547d59788e295968efaa2f2ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5MDg0MA==", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421490840", "bodyText": "Oops, I forgot to add that :)", "author": "geoand", "createdAt": "2020-05-07T13:10:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4OTcwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5MzcxNg==", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421493716", "bodyText": "Fixed", "author": "geoand", "createdAt": "2020-05-07T13:14:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4OTcwMQ=="}], "type": "inlineReview"}, {"oid": "3f8e3d7394d40b8156119ec44c4d0121ded122f2", "url": "https://github.com/quarkusio/quarkus/commit/3f8e3d7394d40b8156119ec44c4d0121ded122f2", "message": "Remove manually generated Flyway beans", "committedDate": "2020-05-07T13:14:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE1MDYxOQ==", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r423150619", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * (which makes since because {@code DataSource} is a {@code Singleton} bean).\n          \n          \n            \n                 * (which makes sense because {@code DataSource} is a {@code Singleton} bean).", "author": "gsmet", "createdAt": "2020-05-11T16:06:47Z", "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSources.java", "diffHunk": "@@ -88,7 +90,32 @@ public DataSourceProducer(DataSourcesBuildTimeConfig dataSourcesBuildTimeConfig,\n         this.dataSourceSupport = dataSourceSupport;\n     }\n \n-    public AgroalDataSource createDataSource(String dataSourceName) {\n+    /**\n+     * Meant to be used from recorders that create synthetic beans that need access to {@code Datasource}.\n+     * In such using {@code Arc.container.instance(DataSource.class)} is not possible because\n+     * {@code Datasource} is itself a synthetic bean.\n+     *\n+     * This method relies on the fact that {@code DataSources} should - given the same input -\n+     * always return the same {@code AgroalDataSource} no matter how many times it is invoked\n+     * (which makes since because {@code DataSource} is a {@code Singleton} bean).", "originalCommit": "3f8e3d7394d40b8156119ec44c4d0121ded122f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc0MzI2OA==", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r423743268", "bodyText": "A classic mistake I always make :)", "author": "geoand", "createdAt": "2020-05-12T13:42:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE1MDYxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzczOTUwMQ==", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r423739501", "bodyText": "I tend to agree we should change that. In a separate PR probably so that we have it in the changelog.", "author": "gsmet", "createdAt": "2020-05-12T13:38:07Z", "path": "extensions/flyway/deployment/src/main/java/io/quarkus/flyway/FlywayProcessor.java", "diffHunk": "@@ -86,21 +84,59 @@ void build(BuildProducer<AdditionalBeanBuildItem> additionalBeanProducer,\n \n     @BuildStep\n     @Record(ExecutionTime.RUNTIME_INIT)\n-    ServiceStartBuildItem configureRuntimeProperties(FlywayRecorder recorder,\n-            FlywayRuntimeConfig flywayRuntimeConfig,\n-            BeanContainerBuildItem beanContainer,\n+    ServiceStartBuildItem createBeansAndStartActions(FlywayRecorder recorder,\n             List<JdbcDataSourceBuildItem> jdbcDataSourceBuildItems,\n+            BuildProducer<AdditionalBeanBuildItem> additionalBeans,\n+            BuildProducer<SyntheticBeanBuildItem> syntheticBeanBuildItemBuildProducer,\n             BuildProducer<JdbcDataSourceSchemaReadyBuildItem> schemaReadyBuildItem) {\n-        recorder.doStartActions(flywayRuntimeConfig, beanContainer.getValue());\n+\n+        // make a FlywayContainerProducer bean\n+        additionalBeans.produce(AdditionalBeanBuildItem.builder().addBeanClasses(FlywayContainerProducer.class).setUnremovable()\n+                .setDefaultScope(DotNames.SINGLETON).build());\n+        // add the @FlywayDataSource class otherwise it won't registered as a qualifier\n+        additionalBeans.produce(AdditionalBeanBuildItem.builder().addBeanClass(FlywayDataSource.class).build());\n+\n+        Collection<String> dataSourceNames = getDataSourceNames(jdbcDataSourceBuildItems);\n+\n+        for (String dataSourceName : dataSourceNames) {\n+            SyntheticBeanBuildItem.ExtendedBeanConfigurator configurator = SyntheticBeanBuildItem\n+                    .configure(Flyway.class)\n+                    .scope(Dependent.class) // this is what the existing code does, but it doesn't seem reasonable", "originalCommit": "3f8e3d7394d40b8156119ec44c4d0121ded122f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc0MDExNQ==", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r423740115", "bodyText": "I agree", "author": "geoand", "createdAt": "2020-05-12T13:39:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzczOTUwMQ=="}], "type": "inlineReview"}, {"oid": "20c6370f0d9c2d85eafe8568cd81d1d9dda8b19c", "url": "https://github.com/quarkusio/quarkus/commit/20c6370f0d9c2d85eafe8568cd81d1d9dda8b19c", "message": "Apply minor cleanup to Datasource handling", "committedDate": "2020-05-12T13:41:42Z", "type": "commit"}, {"oid": "8eb31a309f80e751da21e41b82961cfde5722f3e", "url": "https://github.com/quarkusio/quarkus/commit/8eb31a309f80e751da21e41b82961cfde5722f3e", "message": "Remove manually generated Flyway beans\n\nCo-authored-by: Guillaume Smet <guillaume.smet@gmail.com>", "committedDate": "2020-05-12T13:41:42Z", "type": "commit"}, {"oid": "8eb31a309f80e751da21e41b82961cfde5722f3e", "url": "https://github.com/quarkusio/quarkus/commit/8eb31a309f80e751da21e41b82961cfde5722f3e", "message": "Remove manually generated Flyway beans\n\nCo-authored-by: Guillaume Smet <guillaume.smet@gmail.com>", "committedDate": "2020-05-12T13:41:42Z", "type": "forcePushed"}]}