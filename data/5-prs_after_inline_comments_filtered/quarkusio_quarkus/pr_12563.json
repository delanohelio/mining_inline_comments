{"pr_number": 12563, "pr_title": "Hot Reload Performance Improvements", "pr_createdAt": "2020-10-06T21:30:49Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/12563", "timeline": [{"oid": "c2e4f405a36703ce091d2bc409b5731afa880b38", "url": "https://github.com/quarkusio/quarkus/commit/c2e4f405a36703ce091d2bc409b5731afa880b38", "message": "Cache hibernate proxies between runs", "committedDate": "2020-10-07T00:22:54Z", "type": "forcePushed"}, {"oid": "10038d7dbd3e06ce5bd81f956849c3d271243b07", "url": "https://github.com/quarkusio/quarkus/commit/10038d7dbd3e06ce5bd81f956849c3d271243b07", "message": "Cache hibernate proxies between runs", "committedDate": "2020-10-07T00:27:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk4MjQwNg==", "url": "https://github.com/quarkusio/quarkus/pull/12563#discussion_r500982406", "bodyText": "This looks very neat, but I believe you're not taking into account a change in related classes that would affect the output, such as @Proxy(proxyClass -> changedInterface ) ?", "author": "Sanne", "createdAt": "2020-10-07T12:46:15Z", "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "diffHunk": "@@ -1194,37 +1211,44 @@ private PreGeneratedProxies generatedProxies(Set<String> entityClassNames, Index\n         }\n         try (ProxyBuildingHelper proxyHelper = new ProxyBuildingHelper(Thread.currentThread().getContextClassLoader())) {\n             for (String entity : entityClassNames) {\n-                Set<Class<?>> proxyInterfaces = new HashSet<>();\n-                proxyInterfaces.add(HibernateProxy.class); //always added\n-                Class<?> mappedClass = proxyHelper.uninitializedClass(entity);\n-                String proxy = proxyAnnotations.get(entity);\n-                if (proxy != null) {\n-                    proxyInterfaces.add(proxyHelper.uninitializedClass(proxy));\n-                } else if (!proxyHelper.isProxiable(mappedClass)) {\n-                    //if there is no @Proxy we need to make sure the actual class is proxiable\n-                    continue;\n-                }\n-                for (ClassInfo subclass : combinedIndex.getAllKnownSubclasses(DotName.createSimple(entity))) {\n-                    String subclassName = subclass.name().toString();\n-                    if (!entityClassNames.contains(subclassName)) {\n-                        //not an entity\n-                        continue;\n-                    }\n-                    proxy = proxyAnnotations.get(subclassName);\n+                CachedProxy result;\n+                if (proxyCache.cache.containsKey(entity) && !changedClasses.contains(entity)) {\n+                    result = proxyCache.cache.get(entity);", "originalCommit": "10038d7dbd3e06ce5bd81f956849c3d271243b07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk4NTQ3Mg==", "url": "https://github.com/quarkusio/quarkus/pull/12563#discussion_r500985472", "bodyText": "And what about the current class inheriting further from other changed classes?", "author": "Sanne", "createdAt": "2020-10-07T12:51:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk4MjQwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM3Njk4Mg==", "url": "https://github.com/quarkusio/quarkus/pull/12563#discussion_r501376982", "bodyText": "I now check the all classes and interfaces. If I check all interfaces then is that sufficient, or can @Proxy specify an interface the entity does not implement?", "author": "stuartwdouglas", "createdAt": "2020-10-08T00:03:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk4MjQwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTAwMTY0Mg==", "url": "https://github.com/quarkusio/quarkus/pull/12563#discussion_r501001642", "bodyText": "If old.handle was defined like this, it will still set its TCCL to the old TCCL it captured as the first thing it does right after you've just set the new TCCL, no?", "author": "FroMage", "createdAt": "2020-10-07T13:14:54Z", "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/VertxHttpRecorder.java", "diffHunk": "@@ -409,6 +409,19 @@ public void handle(RoutingContext event) {\n                 && hotReplacementContext.getDevModeType() == DevModeType.REMOTE_SERVER_SIDE) {\n             root = remoteSyncHandler = new RemoteSyncHandler(liveReloadConfig.password.get(), root, hotReplacementContext);\n         }\n+\n+        if (launchMode == LaunchMode.DEVELOPMENT) {\n+            //vert.x threads can still reference the old TCCL\n+            ClassLoader newCl = Thread.currentThread().getContextClassLoader();\n+            Handler<HttpServerRequest> old = root;\n+            root = new Handler<HttpServerRequest>() {\n+                @Override\n+                public void handle(HttpServerRequest event) {\n+                    Thread.currentThread().setContextClassLoader(newCl);\n+                    old.handle(event);", "originalCommit": "10038d7dbd3e06ce5bd81f956849c3d271243b07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM3NDA4MA==", "url": "https://github.com/quarkusio/quarkus/pull/12563#discussion_r501374080", "bodyText": "Good point.\nThis is not actually supposed to be part of this PR, I have been working on this on and off for a while and I must have accidentally included an unrelated change. This has actually already been fixes as part of 6b6db29", "author": "stuartwdouglas", "createdAt": "2020-10-07T23:52:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTAwMTY0Mg=="}], "type": "inlineReview"}, {"oid": "7d6878c4d0c67cc9d8f4adadf1f232924a210ba5", "url": "https://github.com/quarkusio/quarkus/commit/7d6878c4d0c67cc9d8f4adadf1f232924a210ba5", "message": "Add the option to perform hot reload via instrumentation\n\nThis does not require an app restart, so is much faster\nfor larger applications, but is limited to circumstances\nwhere no structural changes have taken place.\n\nThis also adds the ability to check which classes have\nbeen changed and what these changes actually are, which\nallow frameworks to potentially cache metadata between\nruns.\n\nIt also includes initial support for caching hibernate\nproxies and transformations, as generating these are quite\nexpensive.", "committedDate": "2020-10-08T00:01:50Z", "type": "forcePushed"}, {"oid": "b45cbc705a4a39c077a19c14ae0debd04ac755a9", "url": "https://github.com/quarkusio/quarkus/commit/b45cbc705a4a39c077a19c14ae0debd04ac755a9", "message": "Add the option to perform hot reload via instrumentation\n\nThis does not require an app restart, so is much faster\nfor larger applications, but is limited to circumstances\nwhere no structural changes have taken place.\n\nThis also adds the ability to check which classes have\nbeen changed and what these changes actually are, which\nallow frameworks to potentially cache metadata between\nruns.\n\nIt also includes initial support for caching hibernate\nproxies and transformations, as generating these are quite\nexpensive.", "committedDate": "2020-10-19T04:40:18Z", "type": "forcePushed"}, {"oid": "e115ca9213aa9225cf7a0a034a4c0778e861f111", "url": "https://github.com/quarkusio/quarkus/commit/e115ca9213aa9225cf7a0a034a4c0778e861f111", "message": "Add the option to perform hot reload via instrumentation\n\nThis does not require an app restart, so is much faster\nfor larger applications, but is limited to circumstances\nwhere no structural changes have taken place.\n\nThis also adds the ability to check which classes have\nbeen changed and what these changes actually are, which\nallow frameworks to potentially cache metadata between\nruns.\n\nIt also includes initial support for caching hibernate\nproxies and transformations, as generating these are quite\nexpensive.", "committedDate": "2020-10-22T03:49:55Z", "type": "forcePushed"}, {"oid": "b5965b9dd579a61e6a2145d9889145ed5ee51ebf", "url": "https://github.com/quarkusio/quarkus/commit/b5965b9dd579a61e6a2145d9889145ed5ee51ebf", "message": "Add the option to perform hot reload via instrumentation\n\nThis does not require an app restart, so is much faster\nfor larger applications, but is limited to circumstances\nwhere no structural changes have taken place.\n\nThis also adds the ability to check which classes have\nbeen changed and what these changes actually are, which\nallow frameworks to potentially cache metadata between\nruns.\n\nIt also includes initial support for caching hibernate\nproxies and transformations, as generating these are quite\nexpensive.", "committedDate": "2020-10-28T22:33:37Z", "type": "forcePushed"}, {"oid": "2078f725f5b265b02412cb8b9bee1dd5d5e4ee21", "url": "https://github.com/quarkusio/quarkus/commit/2078f725f5b265b02412cb8b9bee1dd5d5e4ee21", "message": "Add the option to perform hot reload via instrumentation\n\nThis does not require an app restart, so is much faster\nfor larger applications, but is limited to circumstances\nwhere no structural changes have taken place.\n\nThis also adds the ability to check which classes have\nbeen changed and what these changes actually are, which\nallow frameworks to potentially cache metadata between\nruns.\n\nIt also includes initial support for caching hibernate\nproxies and transformations, as generating these are quite\nexpensive.", "committedDate": "2020-11-10T20:55:38Z", "type": "forcePushed"}, {"oid": "93c6d000d2d93e4d7a3fa50ba9063b11ae3309b8", "url": "https://github.com/quarkusio/quarkus/commit/93c6d000d2d93e4d7a3fa50ba9063b11ae3309b8", "message": "Add the option to perform hot reload via instrumentation\n\nThis does not require an app restart, so is much faster\nfor larger applications, but is limited to circumstances\nwhere no structural changes have taken place.\n\nThis also adds the ability to check which classes have\nbeen changed and what these changes actually are, which\nallow frameworks to potentially cache metadata between\nruns.\n\nIt also includes initial support for caching hibernate\nproxies and transformations, as generating these are quite\nexpensive.", "committedDate": "2020-11-17T23:30:48Z", "type": "forcePushed"}, {"oid": "7adadc602c1e0adc61d17c2eee63db244b5b84b1", "url": "https://github.com/quarkusio/quarkus/commit/7adadc602c1e0adc61d17c2eee63db244b5b84b1", "message": "Add the option to perform hot reload via instrumentation\n\nThis does not require an app restart, so is much faster\nfor larger applications, but is limited to circumstances\nwhere no structural changes have taken place.\n\nThis also adds the ability to check which classes have\nbeen changed and what these changes actually are, which\nallow frameworks to potentially cache metadata between\nruns.\n\nIt also includes initial support for caching hibernate\nproxies and transformations, as generating these are quite\nexpensive.", "committedDate": "2020-11-27T15:10:38Z", "type": "commit"}, {"oid": "7adadc602c1e0adc61d17c2eee63db244b5b84b1", "url": "https://github.com/quarkusio/quarkus/commit/7adadc602c1e0adc61d17c2eee63db244b5b84b1", "message": "Add the option to perform hot reload via instrumentation\n\nThis does not require an app restart, so is much faster\nfor larger applications, but is limited to circumstances\nwhere no structural changes have taken place.\n\nThis also adds the ability to check which classes have\nbeen changed and what these changes actually are, which\nallow frameworks to potentially cache metadata between\nruns.\n\nIt also includes initial support for caching hibernate\nproxies and transformations, as generating these are quite\nexpensive.", "committedDate": "2020-11-27T15:10:38Z", "type": "forcePushed"}]}