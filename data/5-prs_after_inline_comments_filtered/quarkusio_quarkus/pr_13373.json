{"pr_number": 13373, "pr_title": "Spring Data REST", "pr_createdAt": "2020-11-19T10:36:29Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/13373", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk3MjA5Nw==", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r526972097", "bodyText": "I am wondering how this worked before...", "author": "geoand", "createdAt": "2020-11-19T15:22:40Z", "path": "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/properties/ResourcePropertiesBuildItem.java", "diffHunk": "@@ -2,7 +2,7 @@\n \n import io.quarkus.builder.item.MultiBuildItem;\n \n-public class ResourcePropertiesBuildItem extends MultiBuildItem {\n+public final class ResourcePropertiesBuildItem extends MultiBuildItem {", "originalCommit": "ae590b3d105a12b23b83f265bf112f1b492bd15f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUxMjY2Mg==", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r527512662", "bodyText": "No idea :/", "author": "gytis", "createdAt": "2020-11-20T08:13:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk3MjA5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk3OTQ3NQ==", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r526979475", "bodyText": "I'd like to have a comment on this method describing what steps it performs and why they are needed", "author": "geoand", "createdAt": "2020-11-19T15:31:50Z", "path": "extensions/spring-data-rest/deployment/src/main/java/io/quarkus/spring/data/rest/deployment/SpringDataRestProcessor.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package io.quarkus.spring.data.rest.deployment;\n+\n+import static io.quarkus.deployment.Feature.SPRING_DATA_REST;\n+\n+import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.Type;\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.repository.CrudRepository;\n+import org.springframework.data.repository.PagingAndSortingRepository;\n+\n+import io.quarkus.arc.deployment.GeneratedBeanBuildItem;\n+import io.quarkus.arc.deployment.GeneratedBeanGizmoAdaptor;\n+import io.quarkus.arc.deployment.UnremovableBeanBuildItem;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.gizmo.ClassOutput;\n+import io.quarkus.rest.data.panache.deployment.ResourceMetadata;\n+import io.quarkus.rest.data.panache.deployment.RestDataResourceBuildItem;\n+import io.quarkus.rest.data.panache.deployment.properties.ResourcePropertiesBuildItem;\n+import io.quarkus.spring.data.rest.deployment.crud.CrudMethodsImplementor;\n+import io.quarkus.spring.data.rest.deployment.crud.CrudPropertiesProvider;\n+import io.quarkus.spring.data.rest.deployment.paging.PagingAndSortingMethodsImplementor;\n+import io.quarkus.spring.data.rest.deployment.paging.PagingAndSortingPropertiesProvider;\n+\n+class SpringDataRestProcessor {\n+\n+    private static final DotName CRUD_REPOSITORY_INTERFACE = DotName.createSimple(CrudRepository.class.getName());\n+\n+    private static final DotName PAGING_AND_SORTING_REPOSITORY_INTERFACE = DotName\n+            .createSimple(PagingAndSortingRepository.class.getName());\n+\n+    private static final DotName JPA_REPOSITORY_INTERFACE = DotName.createSimple(JpaRepository.class.getName());\n+\n+    private static final List<DotName> EXCLUDED_INTERFACES = Arrays.asList(\n+            CRUD_REPOSITORY_INTERFACE,\n+            PAGING_AND_SORTING_REPOSITORY_INTERFACE,\n+            JPA_REPOSITORY_INTERFACE);\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(SPRING_DATA_REST);\n+    }\n+\n+    @BuildStep\n+    void registerCrudRepositories(CombinedIndexBuildItem indexBuildItem,\n+            BuildProducer<GeneratedBeanBuildItem> implementationsProducer,\n+            BuildProducer<RestDataResourceBuildItem> restDataResourceProducer,\n+            BuildProducer<ResourcePropertiesBuildItem> resourcePropertiesProducer,\n+            BuildProducer<UnremovableBeanBuildItem> unremovableBeansProducer) {\n+        IndexView index = indexBuildItem.getIndex();\n+\n+        implementResources(implementationsProducer, restDataResourceProducer, resourcePropertiesProducer,\n+                unremovableBeansProducer, new CrudMethodsImplementor(index), new CrudPropertiesProvider(index),\n+                getRepositoriesToImplement(index, CRUD_REPOSITORY_INTERFACE));\n+    }\n+\n+    @BuildStep\n+    void registerPagingAndSortingRepositories(CombinedIndexBuildItem indexBuildItem,\n+            BuildProducer<GeneratedBeanBuildItem> implementationsProducer,\n+            BuildProducer<RestDataResourceBuildItem> restDataResourceProducer,\n+            BuildProducer<ResourcePropertiesBuildItem> resourcePropertiesProducer,\n+            BuildProducer<UnremovableBeanBuildItem> unremovableBeansProducer) {\n+        IndexView index = indexBuildItem.getIndex();\n+\n+        implementResources(implementationsProducer, restDataResourceProducer, resourcePropertiesProducer,\n+                unremovableBeansProducer, new PagingAndSortingMethodsImplementor(index),\n+                new PagingAndSortingPropertiesProvider(index),\n+                getRepositoriesToImplement(index, PAGING_AND_SORTING_REPOSITORY_INTERFACE, JPA_REPOSITORY_INTERFACE));\n+    }\n+\n+    private void implementResources(BuildProducer<GeneratedBeanBuildItem> implementationsProducer,", "originalCommit": "ae590b3d105a12b23b83f265bf112f1b492bd15f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6b8eed65557cae0b876622cce32f9181ac3f4302", "url": "https://github.com/quarkusio/quarkus/commit/6b8eed65557cae0b876622cce32f9181ac3f4302", "message": "Spring Data REST", "committedDate": "2020-11-20T08:48:14Z", "type": "forcePushed"}, {"oid": "fe0fc4d17ef7bc18890f38bd7ca604c7a875f062", "url": "https://github.com/quarkusio/quarkus/commit/fe0fc4d17ef7bc18890f38bd7ca604c7a875f062", "message": "Spring Data REST", "committedDate": "2020-11-20T09:13:34Z", "type": "forcePushed"}, {"oid": "889f9d30fe3ec32b3bee32439e0d866d4981e45f", "url": "https://github.com/quarkusio/quarkus/commit/889f9d30fe3ec32b3bee32439e0d866d4981e45f", "message": "Spring Data REST", "committedDate": "2020-11-20T13:24:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyNjIzOQ==", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r528626239", "bodyText": "Given we are taking the sort parameter from the REST URL, can we check it's not sensitive to SQL injections?", "author": "gsmet", "createdAt": "2020-11-23T11:10:24Z", "path": "extensions/spring-data-rest/deployment/src/main/java/io/quarkus/spring/data/rest/deployment/paging/PagingAndSortingMethodsImplementor.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package io.quarkus.spring.data.rest.deployment.paging;\n+\n+import static io.quarkus.gizmo.FieldDescriptor.of;\n+import static io.quarkus.gizmo.MethodDescriptor.ofMethod;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.jboss.jandex.IndexView;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.data.repository.PagingAndSortingRepository;\n+\n+import io.quarkus.gizmo.AssignableResultHandle;\n+import io.quarkus.gizmo.BranchResult;\n+import io.quarkus.gizmo.BytecodeCreator;\n+import io.quarkus.gizmo.ClassCreator;\n+import io.quarkus.gizmo.MethodCreator;\n+import io.quarkus.gizmo.MethodDescriptor;\n+import io.quarkus.gizmo.ResultHandle;\n+import io.quarkus.panache.common.Page;\n+import io.quarkus.rest.data.panache.deployment.Constants;\n+import io.quarkus.spring.data.rest.deployment.crud.CrudMethodsImplementor;\n+\n+public class PagingAndSortingMethodsImplementor extends CrudMethodsImplementor {\n+\n+    public static final MethodDescriptor LIST_PAGED = ofMethod(PagingAndSortingRepository.class, \"findAll\",\n+            org.springframework.data.domain.Page.class, Pageable.class);\n+\n+    private static final Class<?> PANACHE_PAGE = io.quarkus.panache.common.Page.class;\n+\n+    private static final Class<?> PANACHE_SORT = io.quarkus.panache.common.Sort.class;\n+\n+    private static final Class<?> PANACHE_COLUMN = io.quarkus.panache.common.Sort.Column.class;\n+\n+    private static final Class<?> PANACHE_DIRECTION = io.quarkus.panache.common.Sort.Direction.class;\n+\n+    public PagingAndSortingMethodsImplementor(IndexView index) {\n+        super(index);\n+    }\n+\n+    public void implementList(ClassCreator classCreator, String repositoryInterface) {\n+        MethodCreator methodCreator = classCreator.getMethodCreator(\"list\", List.class, Page.class,\n+                io.quarkus.panache.common.Sort.class);\n+\n+        ResultHandle page = methodCreator.getMethodParam(0);\n+        ResultHandle sort = methodCreator.getMethodParam(1);\n+        ResultHandle pageable = toPageable(methodCreator, page, sort);", "originalCommit": "889f9d30fe3ec32b3bee32439e0d866d4981e45f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYzNTgwOQ==", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r528635809", "bodyText": "Here page and sort are already io.quarkus.panache.common.Page and io.quarkus.panache.common.Sort. They're instantiated from the query parameters by rest-data-panache extension.\nThis extension (same as Hibernate and MongoDB Data REST alternatives) handle only data access logic. JAX-RS resource is handled in the same way for all of them by the rest-data-panache.", "author": "gytis", "createdAt": "2020-11-23T11:28:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyNjIzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYzNzcyOQ==", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r528637729", "bodyText": "I disagree with that.\nYour extension makes it visible and applies absolutely no checks on the content coming from the URL. It's different when it's just Panache API, people can do their own checks.\nSo we need to check it's not sensitive to SQL injections otherwise you have a big security risk.", "author": "gsmet", "createdAt": "2020-11-23T11:31:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyNjIzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY0MzE3OQ==", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r528643179", "bodyText": "I'm not saying that it shouldn't be checked. I'm saying that this is not the place to do it. This extension does not handle the JAX-RS logic. It only implements user defined interface that extends https://github.com/quarkusio/quarkus/blob/master/extensions/panache/rest-data-panache/runtime/src/main/java/io/quarkus/rest/data/panache/RestDataResource.java.\nrest-data-panache generates the JAX-RS resource and then calls spring-data-rest generated method for data access. So these two page and sort parameters are already instances of io.quarkus.panache.common.Page and io.quarkus.panache.common.Sort.\nIf we need to add query parameter validation we need to add it here https://github.com/quarkusio/quarkus/blob/master/extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/ListMethodImplementor.java#L104. However, wouldn't Panache Query builder escape all the query parameters automatically?", "author": "gytis", "createdAt": "2020-11-23T11:42:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyNjIzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ4MjQ2Mw==", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r529482463", "bodyText": "I'm not saying that it shouldn't be checked. I'm saying that this is not the place to do it.\n\nWell, I haven't really reviewed the other extension so I see it now for this one. I still think this should carefully be addressed.\n\nHowever, wouldn't Panache Query builder escape all the query parameters automatically?\n\nIt didn't a while ago. That's why I think we should check if it's safe or not.", "author": "gsmet", "createdAt": "2020-11-24T11:42:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyNjIzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk3NTk3MA==", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r530975970", "bodyText": "@FroMage maybe you know how unsafe it is to pass arbitrary parameters to the Panache Sort object? Are they somehow parsed down the line by Panache or Hibernate/Mongo? If this is unsafe, do you have a recommendation on what type of validation is needed?\nIn any case, I don't think that this issue should holdup this PR. If the validation has to be added, it will be added to the rest-data-panache extension.", "author": "gytis", "createdAt": "2020-11-26T11:51:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyNjIzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA0MzA1Mw==", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r531043053", "bodyText": "It's indeed unsafe because we end up generating an HQL query in PanacheJpaUtil.toOrderBy (not sure about Mongo but probably it is too).\nIndeed the check really belongs in the REST layer as you say, especially wrt error handling. As to what you can check, here's what HQL allows:\norderByClause\n// todo (6.0) : null precedence\n\t: ORDER BY sortSpecification (COMMA sortSpecification)*\n\t;\n\nsortSpecification\n\t: expression collationSpecification? orderingSpecification?\n\t;\n\ncollationSpecification\n\t:\tCOLLATE collateName\n\t;\n\ncollateName\n\t:\tdotIdentifierSequence\n\t;\n\norderingSpecification\n\t:\tASC\n\t|\tDESC\n\t;\n\nexpression is particularly nasty because it's pretty much a free for all.\nOTOH if your REST API specifies that the supported set of sort options is limited, then you can probably limit it to:\nIDENTIFIER\n\t:\t('a'..'z'|'A'..'Z'|'_'|'$'|'\\u0080'..'\\ufffe')('a'..'z'|'A'..'Z'|'_'|'$'|'0'..'9'|'\\u0080'..'\\ufffe')*\n\nHTH :)", "author": "FroMage", "createdAt": "2020-11-26T13:52:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyNjIzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA0MzUyOA==", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r531043528", "bodyText": "BTW, all this is from the panacheql extension, you have the lexer and parser files there with all the info you need ;)", "author": "FroMage", "createdAt": "2020-11-26T13:52:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyNjIzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA0OTc2OA==", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r531049768", "bodyText": "Thanks @FroMage, this is very helpful. I'll add a query parameter validator to the rest-data-extension and will raise a new PR with it.", "author": "gytis", "createdAt": "2020-11-26T14:03:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyNjIzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU3MzU5Ng==", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r531573596", "bodyText": "I've created a separate pull request to add a sort parameter validation #13514", "author": "gytis", "createdAt": "2020-11-27T12:27:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyNjIzOQ=="}], "type": "inlineReview"}, {"oid": "9be3e429cfc243a8dedf75e7b4893274c85bfb91", "url": "https://github.com/quarkusio/quarkus/commit/9be3e429cfc243a8dedf75e7b4893274c85bfb91", "message": "Spring Data REST", "committedDate": "2020-11-23T11:16:23Z", "type": "forcePushed"}, {"oid": "1e017ceded29572b48e81f6f8017432f34bb32bc", "url": "https://github.com/quarkusio/quarkus/commit/1e017ceded29572b48e81f6f8017432f34bb32bc", "message": "Spring Data REST", "committedDate": "2020-11-23T11:30:23Z", "type": "forcePushed"}, {"oid": "16a005d4d71bceb5c278dfb2e7bb56a5b2a0786e", "url": "https://github.com/quarkusio/quarkus/commit/16a005d4d71bceb5c278dfb2e7bb56a5b2a0786e", "message": "Spring Data REST", "committedDate": "2020-11-23T11:48:19Z", "type": "forcePushed"}, {"oid": "7579a10a241377f6272c3dbacd19947c58706d3c", "url": "https://github.com/quarkusio/quarkus/commit/7579a10a241377f6272c3dbacd19947c58706d3c", "message": "Spring Data REST", "committedDate": "2020-11-24T08:27:58Z", "type": "forcePushed"}, {"oid": "ed784d14eeec22e66429e543f60bcd50bc67dde4", "url": "https://github.com/quarkusio/quarkus/commit/ed784d14eeec22e66429e543f60bcd50bc67dde4", "message": "Spring Data REST", "committedDate": "2020-11-25T11:14:45Z", "type": "forcePushed"}, {"oid": "e29b9178b71951f0111915966ad9cdb89bbc0d39", "url": "https://github.com/quarkusio/quarkus/commit/e29b9178b71951f0111915966ad9cdb89bbc0d39", "message": "Spring Data REST", "committedDate": "2020-12-09T11:06:14Z", "type": "forcePushed"}, {"oid": "d6d52008f8dfef26017652d7237987763035ef9e", "url": "https://github.com/quarkusio/quarkus/commit/d6d52008f8dfef26017652d7237987763035ef9e", "message": "Spring Data REST", "committedDate": "2020-12-10T12:36:12Z", "type": "commit"}, {"oid": "d6d52008f8dfef26017652d7237987763035ef9e", "url": "https://github.com/quarkusio/quarkus/commit/d6d52008f8dfef26017652d7237987763035ef9e", "message": "Spring Data REST", "committedDate": "2020-12-10T12:36:12Z", "type": "forcePushed"}]}