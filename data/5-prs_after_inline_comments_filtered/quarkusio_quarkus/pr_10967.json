{"pr_number": 10967, "pr_title": "Added support to Quartz Plugins And Listeners", "pr_createdAt": "2020-07-25T19:35:18Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/10967", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc1NzgxMQ==", "url": "https://github.com/quarkusio/quarkus/pull/10967#discussion_r460757811", "bodyText": "That's not a good plugin to test. We do shutdown the quartz scheduler when a quarkus app/test stops ;-).", "author": "mkouba", "createdAt": "2020-07-27T09:19:14Z", "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/RegisterShutdownHookPluginTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package io.quarkus.quartz.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.scheduler.Scheduler;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class RegisterShutdownHookPluginTest {\n+\n+    @Inject\n+    Scheduler quartzScheduler;\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest test = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(Jobs.class)\n+                    .addAsResource(new StringAsset(\n+                                    \"quarkus.quartz.plugin.shutdownhook.class=org.quartz.plugins.management.ShutdownHookPlugin\\n\"", "originalCommit": "c382a9bfcdb10eefcbf952c9a97bd91ce82e5444", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc2OTgxOQ==", "url": "https://github.com/quarkusio/quarkus/pull/10967#discussion_r460769819", "bodyText": "This test is because if I register an invalid plugin, the Quartz won't start. The test can check if parsing the config to Quartz properties is working fine.", "author": "marcelorubim", "createdAt": "2020-07-27T09:40:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc1NzgxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4MzYwMg==", "url": "https://github.com/quarkusio/quarkus/pull/10967#discussion_r461183602", "bodyText": "I think we should also add validation here that the class is a class implementing a org.quartz.JobListener interface. This way, we would throw the error earlier in build time. Let me know if you'd need help in doing it.\n/cc @mkouba", "author": "machi1990", "createdAt": "2020-07-27T21:34:13Z", "path": "extensions/quartz/deployment/src/main/java/io/quarkus/quartz/deployment/QuartzProcessor.java", "diffHunk": "@@ -136,6 +136,18 @@ private String guessDriver(Optional<JdbcDataSourceBuildItem> jdbcDataSource) {\n                     .add(new ReflectiveClassBuildItem(true, false, QuarkusQuartzConnectionPoolProvider.class.getName()));\n         }\n \n+        config.triggerListeners.values().forEach((value) -> {\n+            reflectiveClasses.add(new ReflectiveClassBuildItem(true, false, value.clazz));\n+        });\n+\n+        config.jobListeners.values().forEach((value) -> {\n+            reflectiveClasses.add(new ReflectiveClassBuildItem(true, false, value.clazz));\n+        });\n+\n+        config.plugins.values().forEach((value) -> {\n+            reflectiveClasses.add(new ReflectiveClassBuildItem(true, false, value.clazz));\n+        });", "originalCommit": "932ea063cbbd237e7337ab660607162196e0de1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4ODQ3OA==", "url": "https://github.com/quarkusio/quarkus/pull/10967#discussion_r461188478", "bodyText": "See #10962 (comment)", "author": "machi1990", "createdAt": "2020-07-27T21:44:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4MzYwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQyMDMxMw==", "url": "https://github.com/quarkusio/quarkus/pull/10967#discussion_r461420313", "bodyText": "Thanks for the feedback! I did the changes you asked.\nFor the validation, the only thing I was not sure of which the exception I should throw. I decided on the IllegalArgumentException. Is it ok?", "author": "marcelorubim", "createdAt": "2020-07-28T08:47:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4MzYwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc1MjY1Ng==", "url": "https://github.com/quarkusio/quarkus/pull/10967#discussion_r461752656", "bodyText": "This is fine for me.\nI am thinking maybe we can have a unit tests for validation. The UnsupportedClusteredJobConfigurationTest.java can be of inspiration.\nWhat do you think?", "author": "machi1990", "createdAt": "2020-07-28T17:31:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4MzYwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc5OTcyMw==", "url": "https://github.com/quarkusio/quarkus/pull/10967#discussion_r461799723", "bodyText": "Nice idea! And done!", "author": "marcelorubim", "createdAt": "2020-07-28T18:52:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4MzYwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4NTY4MQ==", "url": "https://github.com/quarkusio/quarkus/pull/10967#discussion_r461185681", "bodyText": "We tend to avoid usage of lambdas in runtime modules. Can we go for classic for loops here? Probably extracting this logic into a method addListenerProperty(String prefix, QuartzAdditionalPropsConfig config) {...}, where the prefix is one of\n\nStdSchedulerFactory.PROP_PLUGIN_PREFIX ,\nStdSchedulerFactory.PROP_JOB_LISTENER_PREFIX and\nStdSchedulerFactory.PROP_JOB_LISTENER_PREFIX\n\nwould remove some of the duplication.", "author": "machi1990", "createdAt": "2020-07-27T21:38:25Z", "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "diffHunk": "@@ -323,6 +323,28 @@ private Properties getSchedulerConfigurationProperties(QuartzSupport quartzSuppo\n             }\n         }\n \n+        buildTimeConfig.triggerListeners.forEach((key, value) -> {\n+            props.put(StdSchedulerFactory.PROP_TRIGGER_LISTENER_PREFIX + \".\" + key + \".class\", value.clazz);\n+            value.propsValue\n+                    .forEach((s, s2) -> props\n+                            .put(String.format(\"%s.%s.%s\", StdSchedulerFactory.PROP_TRIGGER_LISTENER_PREFIX, key, s), s2));\n+        });\n+\n+        buildTimeConfig.jobListeners.forEach((key, value) -> {\n+            props.put(StdSchedulerFactory.PROP_JOB_LISTENER_PREFIX + \".\" + key + \".class\", value.clazz);\n+            value.propsValue\n+                    .forEach((s, s2) -> props\n+                            .put(String.format(\"%s.%s.%s\", StdSchedulerFactory.PROP_JOB_LISTENER_PREFIX, key, s), s2));\n+        });\n+\n+        buildTimeConfig.plugins.forEach((key, value) -> {\n+            props.put(StdSchedulerFactory.PROP_PLUGIN_PREFIX + \".\" + key + \".class\", value.clazz);\n+            value.propsValue\n+                    .forEach(\n+                            (s, s2) -> props.put(String.format(\"%s.%s.%s\", StdSchedulerFactory.PROP_PLUGIN_PREFIX, key, s),\n+                                    s2));\n+        });", "originalCommit": "932ea063cbbd237e7337ab660607162196e0de1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQyMTUwNw==", "url": "https://github.com/quarkusio/quarkus/pull/10967#discussion_r461421507", "bodyText": "I did the refactoring. It's much better this way, without the duplication\n        props.putAll(getAdditionalConfigurationProperties(StdSchedulerFactory.PROP_PLUGIN_PREFIX, buildTimeConfig.plugins));\n        props.putAll(getAdditionalConfigurationProperties(StdSchedulerFactory.PROP_JOB_LISTENER_PREFIX,\n                buildTimeConfig.jobListeners));\n        props.putAll(getAdditionalConfigurationProperties(StdSchedulerFactory.PROP_TRIGGER_LISTENER_PREFIX,\n                buildTimeConfig.triggerListeners));\n\n        return props;\n    }\n\n    private Properties getAdditionalConfigurationProperties(String prefix, Map<String, QuartzAdditionalPropsConfig> config) {\n        Properties props = new Properties();\n        for (String key : config.keySet()) {\n            props.put(String.format(\"%s.%s.class\", prefix, key), config.get(key).clazz);\n            for (String propsName : config.get(key).propsValue.keySet()) {\n                props.put(String.format(\"%s.%s.%s\", prefix, key, propsName),\n                        config.get(key).propsValue.get(propsName));\n            }\n        }\n        return props;\n    }", "author": "marcelorubim", "createdAt": "2020-07-28T08:49:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4NTY4MQ=="}], "type": "inlineReview"}, {"oid": "d647c1a8567f97a76a4e6280492aefb29c841237", "url": "https://github.com/quarkusio/quarkus/commit/d647c1a8567f97a76a4e6280492aefb29c841237", "message": "Added support to configure plugins and listeners on Quartz extension.", "committedDate": "2020-07-29T13:36:23Z", "type": "commit"}]}