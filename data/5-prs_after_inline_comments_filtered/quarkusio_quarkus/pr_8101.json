{"pr_number": 8101, "pr_title": "Add support for multiple extension overrides", "pr_createdAt": "2020-03-24T08:13:38Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/8101", "timeline": [{"oid": "7530442d1cd40ea350a75c962d88f37418c32397", "url": "https://github.com/quarkusio/quarkus/commit/7530442d1cd40ea350a75c962d88f37418c32397", "message": "Add support for multiple overrides\n\nWhy:\n\n * would like to add additional overrides without having to\n   duplicating or editing the original overrides.\n\nThis change addreses the need by:\n\n * overridesfile can now be a comma separated list of files.\n * overrides are processed from all files thus if multiple override the same\n   keys then the last one wins.", "committedDate": "2020-03-24T15:21:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2NjA2Nw==", "url": "https://github.com/quarkusio/quarkus/pull/8101#discussion_r397366067", "bodyText": "We don't use star imports, can you use the appropriate code formatter?", "author": "gastaldi", "createdAt": "2020-03-24T18:17:26Z", "path": "devtools/platform-descriptor-json-plugin/src/main/java/io/quarkus/maven/GenerateExtensionsJsonMojo.java", "diffHunk": "@@ -9,20 +9,10 @@\n import java.nio.file.FileSystem;\n import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-import javax.json.Json;\n-import javax.json.JsonArray;\n-import javax.json.JsonArrayBuilder;\n-import javax.json.JsonObject;\n-import javax.json.JsonObjectBuilder;\n-import javax.json.JsonReader;\n-import javax.json.JsonValue;\n-import javax.json.JsonWriter;\n-import javax.json.JsonWriterFactory;\n+import java.util.*;", "originalCommit": "7530442d1cd40ea350a75c962d88f37418c32397", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4MzU0MQ==", "url": "https://github.com/quarkusio/quarkus/pull/8101#discussion_r398183541", "bodyText": "the build passes so I assume I am already using the appropriate code formatter.", "author": "maxandersen", "createdAt": "2020-03-25T21:33:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2NjA2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4Mzg1OQ==", "url": "https://github.com/quarkusio/quarkus/pull/8101#discussion_r398183859", "bodyText": "oh damn - is the PR's i made on having devtools share the formatting still not in master. ? gddmmit", "author": "maxandersen", "createdAt": "2020-03-25T21:33:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2NjA2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE5ODkzNw==", "url": "https://github.com/quarkusio/quarkus/pull/8101#discussion_r398198937", "bodyText": "fixed manually", "author": "maxandersen", "createdAt": "2020-03-25T22:05:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2NjA2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2NjMzMg==", "url": "https://github.com/quarkusio/quarkus/pull/8101#discussion_r397366332", "bodyText": "Remove commented out code", "author": "gastaldi", "createdAt": "2020-03-24T18:17:50Z", "path": "devtools/platform-descriptor-json-plugin/src/main/java/io/quarkus/maven/GenerateExtensionsJsonMojo.java", "diffHunk": "@@ -121,29 +112,25 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n             return;\n         }\n \n-        // Read the overrides file for the extensions (if it exists)\n-        Map<String, JsonObject> extOverrides = new HashMap<>();\n-        JsonObject theRest = null;\n-        if (overridesFile.isFile()) {\n-            info(\"Found overrides file %s\", overridesFile);\n-            try (JsonReader jsonReader = Json.createReader(new FileInputStream(overridesFile))) {\n-                JsonObject overridesObject = jsonReader.readObject();\n-                JsonArray extOverrideObjects = overridesObject.getJsonArray(\"extensions\");\n-                if (extOverrideObjects != null) {\n-                    // Put the extension overrides into a map keyed to their GAV\n-                    for (JsonValue val : extOverrideObjects) {\n-                        JsonObject extOverrideObject = val.asJsonObject();\n-                        String key = extensionId(extOverrideObject);\n-                        extOverrides.put(key, extOverrideObject);\n-                    }\n-                }\n+        List<File> overrides = new ArrayList<>();\n \n-                theRest = overridesObject;\n-            } catch (IOException e) {\n-                throw new MojoExecutionException(\"Failed to read \" + overridesFile, e);\n+        overrides.addAll(Arrays.stream(overridesFile.split(\",\"))\n+                .map(s -> {\n+                    return new File(s.trim());\n+                })\n+                .collect(Collectors.toList()));\n+\n+        List<OverrideInfo> allOverrides = new ArrayList();\n+        for (File file : overrides) {\n+            OverrideInfo overrideInfo = getOverrideInfo(file);\n+            if (overrideInfo != null) {\n+                allOverrides.add(overrideInfo);\n             }\n         }\n \n+        //Map<String, JsonObject> extOverrides = overrideInfo.getExtOverrides();\n+        //JsonObject theRest = overrideInfo.getTheRest();\n+", "originalCommit": "7530442d1cd40ea350a75c962d88f37418c32397", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2NzYzNQ==", "url": "https://github.com/quarkusio/quarkus/pull/8101#discussion_r397367635", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    overrides.addAll(Arrays.stream(overridesFile.split(\",\"))\n          \n          \n            \n                            .map(s -> {\n          \n          \n            \n                                return new File(s.trim());\n          \n          \n            \n                            })\n          \n          \n            \n                            .collect(Collectors.toList()));\n          \n          \n            \n                    for (String file: overridesFile.split(\",\")) {\n          \n          \n            \n                       overrides.add(new File(file.trim()));\n          \n          \n            \n                    }", "author": "gastaldi", "createdAt": "2020-03-24T18:19:56Z", "path": "devtools/platform-descriptor-json-plugin/src/main/java/io/quarkus/maven/GenerateExtensionsJsonMojo.java", "diffHunk": "@@ -121,29 +112,25 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n             return;\n         }\n \n-        // Read the overrides file for the extensions (if it exists)\n-        Map<String, JsonObject> extOverrides = new HashMap<>();\n-        JsonObject theRest = null;\n-        if (overridesFile.isFile()) {\n-            info(\"Found overrides file %s\", overridesFile);\n-            try (JsonReader jsonReader = Json.createReader(new FileInputStream(overridesFile))) {\n-                JsonObject overridesObject = jsonReader.readObject();\n-                JsonArray extOverrideObjects = overridesObject.getJsonArray(\"extensions\");\n-                if (extOverrideObjects != null) {\n-                    // Put the extension overrides into a map keyed to their GAV\n-                    for (JsonValue val : extOverrideObjects) {\n-                        JsonObject extOverrideObject = val.asJsonObject();\n-                        String key = extensionId(extOverrideObject);\n-                        extOverrides.put(key, extOverrideObject);\n-                    }\n-                }\n+        List<File> overrides = new ArrayList<>();\n \n-                theRest = overridesObject;\n-            } catch (IOException e) {\n-                throw new MojoExecutionException(\"Failed to read \" + overridesFile, e);\n+        overrides.addAll(Arrays.stream(overridesFile.split(\",\"))\n+                .map(s -> {\n+                    return new File(s.trim());\n+                })\n+                .collect(Collectors.toList()));", "originalCommit": "7530442d1cd40ea350a75c962d88f37418c32397", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2ODYwMg==", "url": "https://github.com/quarkusio/quarkus/pull/8101#discussion_r397368602", "bodyText": "You can iterate overridesFile.split(\",\") and delete the List<File> overrides above :)", "author": "gastaldi", "createdAt": "2020-03-24T18:21:32Z", "path": "devtools/platform-descriptor-json-plugin/src/main/java/io/quarkus/maven/GenerateExtensionsJsonMojo.java", "diffHunk": "@@ -121,29 +112,25 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n             return;\n         }\n \n-        // Read the overrides file for the extensions (if it exists)\n-        Map<String, JsonObject> extOverrides = new HashMap<>();\n-        JsonObject theRest = null;\n-        if (overridesFile.isFile()) {\n-            info(\"Found overrides file %s\", overridesFile);\n-            try (JsonReader jsonReader = Json.createReader(new FileInputStream(overridesFile))) {\n-                JsonObject overridesObject = jsonReader.readObject();\n-                JsonArray extOverrideObjects = overridesObject.getJsonArray(\"extensions\");\n-                if (extOverrideObjects != null) {\n-                    // Put the extension overrides into a map keyed to their GAV\n-                    for (JsonValue val : extOverrideObjects) {\n-                        JsonObject extOverrideObject = val.asJsonObject();\n-                        String key = extensionId(extOverrideObject);\n-                        extOverrides.put(key, extOverrideObject);\n-                    }\n-                }\n+        List<File> overrides = new ArrayList<>();\n \n-                theRest = overridesObject;\n-            } catch (IOException e) {\n-                throw new MojoExecutionException(\"Failed to read \" + overridesFile, e);\n+        overrides.addAll(Arrays.stream(overridesFile.split(\",\"))\n+                .map(s -> {\n+                    return new File(s.trim());\n+                })\n+                .collect(Collectors.toList()));\n+\n+        List<OverrideInfo> allOverrides = new ArrayList();\n+        for (File file : overrides) {", "originalCommit": "7530442d1cd40ea350a75c962d88f37418c32397", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4NTkzMg==", "url": "https://github.com/quarkusio/quarkus/pull/8101#discussion_r398185932", "bodyText": "true - good catch. it became this way as I was originally merging two lists but that\u2019s not relevant anymore fixing.", "author": "maxandersen", "createdAt": "2020-03-25T21:37:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2ODYwMg=="}], "type": "inlineReview"}, {"oid": "912a8a9c2a299e8daa873e7801557da9461f531d", "url": "https://github.com/quarkusio/quarkus/commit/912a8a9c2a299e8daa873e7801557da9461f531d", "message": "Add support for multiple overrides\n\nWhy:\n\n * would like to add additional overrides without having to\n   duplicating or editing the original overrides.\n\nThis change addreses the need by:\n\n * overridesfile can now be a comma separated list of files.\n * overrides are processed from all files thus if multiple override the same\n   keys then the last one wins.", "committedDate": "2020-03-25T22:04:39Z", "type": "forcePushed"}, {"oid": "2edc7342c6bdc3de893ee1ca1ced9ebf65d4c7bf", "url": "https://github.com/quarkusio/quarkus/commit/2edc7342c6bdc3de893ee1ca1ced9ebf65d4c7bf", "message": "Add support for multiple overrides\n\nWhy:\n\n * would like to add additional overrides without having to\n   duplicating or editing the original overrides.\n\nThis change addreses the need by:\n\n * overridesfile can now be a comma separated list of files.\n * overrides are processed from all files thus if multiple override the same\n   keys then the last one wins.", "committedDate": "2020-03-25T22:44:18Z", "type": "commit"}, {"oid": "2edc7342c6bdc3de893ee1ca1ced9ebf65d4c7bf", "url": "https://github.com/quarkusio/quarkus/commit/2edc7342c6bdc3de893ee1ca1ced9ebf65d4c7bf", "message": "Add support for multiple overrides\n\nWhy:\n\n * would like to add additional overrides without having to\n   duplicating or editing the original overrides.\n\nThis change addreses the need by:\n\n * overridesfile can now be a comma separated list of files.\n * overrides are processed from all files thus if multiple override the same\n   keys then the last one wins.", "committedDate": "2020-03-25T22:44:18Z", "type": "forcePushed"}]}