{"pr_number": 10382, "pr_title": "Hibernate Reactive services initiator fix", "pr_createdAt": "2020-06-30T17:04:58Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/10382", "timeline": [{"oid": "46e984b9a6b4864c6e80b008d1f1035f72576c18", "url": "https://github.com/quarkusio/quarkus/commit/46e984b9a6b4864c6e80b008d1f1035f72576c18", "message": "Remove some more dead fields", "committedDate": "2020-06-29T11:02:09Z", "type": "commit"}, {"oid": "28b3c69464acb743b13e43543af5226435eb2b25", "url": "https://github.com/quarkusio/quarkus/commit/28b3c69464acb743b13e43543af5226435eb2b25", "message": "Remove redundant configuration check", "committedDate": "2020-06-29T12:10:58Z", "type": "commit"}, {"oid": "2e4bf8ee834e338f60b2f0a289f9c8d92201ad1f", "url": "https://github.com/quarkusio/quarkus/commit/2e4bf8ee834e338f60b2f0a289f9c8d92201ad1f", "message": "Refactor how we discover all entities that need proxy generation", "committedDate": "2020-06-29T13:41:44Z", "type": "commit"}, {"oid": "54388870c7ede5f1842be09002eb606db49bd19e", "url": "https://github.com/quarkusio/quarkus/commit/54388870c7ede5f1842be09002eb606db49bd19e", "message": "Helper to retrieve an explicitly defined resource name containing initialization SQL script statements", "committedDate": "2020-06-29T13:41:44Z", "type": "commit"}, {"oid": "770f5265cb449e9094057713a2532f1066ed8f38", "url": "https://github.com/quarkusio/quarkus/commit/770f5265cb449e9094057713a2532f1066ed8f38", "message": "Finish encapsulating of ParsedPersistenceXmlDescriptor type", "committedDate": "2020-06-29T13:50:56Z", "type": "commit"}, {"oid": "eb365c1460746a1dc422a3ce627e0409251439c1", "url": "https://github.com/quarkusio/quarkus/commit/eb365c1460746a1dc422a3ce627e0409251439c1", "message": "Extract MP Metrics deployment steps into their own class", "committedDate": "2020-06-29T20:22:19Z", "type": "commit"}, {"oid": "2011d08fdd72400add1fa3e0c9fae54e6c76c74e", "url": "https://github.com/quarkusio/quarkus/commit/2011d08fdd72400add1fa3e0c9fae54e6c76c74e", "message": "Extract the standard list of ServiceInitiators", "committedDate": "2020-06-30T13:00:18Z", "type": "commit"}, {"oid": "f4292cb57329399cf36db214c4141a598ddc0322", "url": "https://github.com/quarkusio/quarkus/commit/f4292cb57329399cf36db214c4141a598ddc0322", "message": "Introduce Hibernate Reactive integration test using autogenerated IDs", "committedDate": "2020-06-30T16:46:40Z", "type": "commit"}, {"oid": "5e5ace998dcd1629181a7bfa0560a99fb1f5b7ff", "url": "https://github.com/quarkusio/quarkus/commit/5e5ace998dcd1629181a7bfa0560a99fb1f5b7ff", "message": "Allow extension points to watch for an implied PU definition being generated (ImpliedBlockingPersistenceUnitTypeBuildItem)", "committedDate": "2020-06-30T16:46:40Z", "type": "commit"}, {"oid": "c5acb6b995a4305594dc9d549b45141a6d2e155e", "url": "https://github.com/quarkusio/quarkus/commit/c5acb6b995a4305594dc9d549b45141a6d2e155e", "message": "Group metadata which belongs to the same PU into a new QuarkusPersistenceUnitDefinition", "committedDate": "2020-06-30T16:46:40Z", "type": "commit"}, {"oid": "21ad212a5d2014050a2d292d11cb269872541dbe", "url": "https://github.com/quarkusio/quarkus/commit/21ad212a5d2014050a2d292d11cb269872541dbe", "message": "Tighten visibility of the LightPersistenceXmlDescriptor constructor meant for bytecode serialization", "committedDate": "2020-06-30T16:46:40Z", "type": "commit"}, {"oid": "af46aa3d733f49edf334760981f893b6c6bbae73", "url": "https://github.com/quarkusio/quarkus/commit/af46aa3d733f49edf334760981f893b6c6bbae73", "message": "Propagate the 'isReactive' flag into the RecordedState instance of each PU", "committedDate": "2020-06-30T16:46:41Z", "type": "commit"}, {"oid": "10764b249146a80d92fafc38a04170fff35dae7e", "url": "https://github.com/quarkusio/quarkus/commit/10764b249146a80d92fafc38a04170fff35dae7e", "message": "Introduce checks and assertions for booting the right type of ORM in each case", "committedDate": "2020-06-30T16:46:41Z", "type": "commit"}, {"oid": "5a0af9b34fb2c74fe97e0ae14b416f774aa5de82", "url": "https://github.com/quarkusio/quarkus/commit/5a0af9b34fb2c74fe97e0ae14b416f774aa5de82", "message": "Extract construction of RecordableBootstrap into a separate helper", "committedDate": "2020-06-30T16:46:41Z", "type": "commit"}, {"oid": "95ed5f61aae02339ded0b56eacd8e34a552f5959", "url": "https://github.com/quarkusio/quarkus/commit/95ed5f61aae02339ded0b56eacd8e34a552f5959", "message": "Further extract an InitialInitiatorListProvider interface contract", "committedDate": "2020-06-30T16:46:41Z", "type": "commit"}, {"oid": "833571c26b99ccc62da34619e8d5f1fd69f47890", "url": "https://github.com/quarkusio/quarkus/commit/833571c26b99ccc62da34619e8d5f1fd69f47890", "message": "Lookup the ReactiveHibernateInitiatorListProvider reflectively and use it for Reactive PUs", "committedDate": "2020-06-30T16:46:41Z", "type": "commit"}, {"oid": "ff83c40afd743846b1c0bd1190be1d9c92b5fbf2", "url": "https://github.com/quarkusio/quarkus/commit/ff83c40afd743846b1c0bd1190be1d9c92b5fbf2", "message": "Make QuarkusJtaPlatformInitiator much simpler again", "committedDate": "2020-06-30T16:46:41Z", "type": "commit"}, {"oid": "f4b16f0dcf41984adb9961ff9d0490069efc484a", "url": "https://github.com/quarkusio/quarkus/commit/f4b16f0dcf41984adb9961ff9d0490069efc484a", "message": "Remove the no longer needed DCO optimisation via @Substitutions", "committedDate": "2020-06-30T16:46:41Z", "type": "commit"}, {"oid": "e132d42c0b15c52286dbcf217ff450397493bf2d", "url": "https://github.com/quarkusio/quarkus/commit/e132d42c0b15c52286dbcf217ff450397493bf2d", "message": "Actually fix the initial service Initiators list for Hibernate Reactive", "committedDate": "2020-06-30T16:46:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg2MTAyNQ==", "url": "https://github.com/quarkusio/quarkus/pull/10382#discussion_r447861025", "bodyText": "the same check is repeated below", "author": "Sanne", "createdAt": "2020-06-30T17:32:56Z", "path": "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/boot/LightPersistenceXmlDescriptor.java", "diffHunk": "@@ -36,9 +36,6 @@ public LightPersistenceXmlDescriptor(final PersistenceUnitDescriptor toClone) {\n     }\n \n     private static void verifyIgnoredFields(final PersistenceUnitDescriptor toClone) {\n-        if (toClone.getNonJtaDataSource() != null) {\n-            throw new UnsupportedOperationException(\"Value found for #getNonJtaDataSource : not supported yet\");\n-        }", "originalCommit": "28b3c69464acb743b13e43543af5226435eb2b25", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0NzI3MQ==", "url": "https://github.com/quarkusio/quarkus/pull/10382#discussion_r448347271", "bodyText": "In ORM Panache I have used a list of BuildItem to register optional stuff like these. Otherwise a service loader would work too. I guess both would be better than reflection, no?", "author": "FroMage", "createdAt": "2020-07-01T13:02:50Z", "path": "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/boot/RecordableBootstrapFactory.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package io.quarkus.hibernate.orm.runtime.boot;\n+\n+import org.hibernate.boot.registry.BootstrapServiceRegistry;\n+import org.hibernate.boot.registry.classloading.spi.ClassLoaderService;\n+import org.hibernate.boot.registry.internal.BootstrapServiceRegistryImpl;\n+import org.hibernate.boot.registry.selector.spi.StrategySelector;\n+\n+import io.quarkus.hibernate.orm.runtime.customized.QuarkusIntegratorServiceImpl;\n+import io.quarkus.hibernate.orm.runtime.customized.QuarkusStrategySelectorBuilder;\n+import io.quarkus.hibernate.orm.runtime.recording.RecordableBootstrap;\n+import io.quarkus.hibernate.orm.runtime.service.FlatClassLoaderService;\n+import io.quarkus.hibernate.orm.runtime.service.InitialInitiatorListProvider;\n+import io.quarkus.hibernate.orm.runtime.service.StandardHibernateORMInitiatorListProvider;\n+\n+final class RecordableBootstrapFactory {\n+\n+    private static final InitialInitiatorListProvider reactiveInitiatorListProvider = initReactiveListProviderMaybe();\n+    private static final InitialInitiatorListProvider classicInitiatorListProvider = new StandardHibernateORMInitiatorListProvider();\n+\n+    public static RecordableBootstrap createRecordableBootstrapBuilder(QuarkusPersistenceUnitDefinition puDefinition) {\n+        final BootstrapServiceRegistry bsr = buildBootstrapServiceRegistry();\n+        final RecordableBootstrap ssrBuilder = new RecordableBootstrap(bsr, getInitiatorListProvider(puDefinition));\n+        return ssrBuilder;\n+    }\n+\n+    private static InitialInitiatorListProvider getInitiatorListProvider(QuarkusPersistenceUnitDefinition puDefinition) {\n+        if (puDefinition.isReactive()) {\n+            if (reactiveInitiatorListProvider == null) {\n+                throw new IllegalStateException(\n+                        \"InitiatorList requires for Hibernate Reactive but Hibernate Reactive extension is not around?\");\n+            }\n+            return reactiveInitiatorListProvider;\n+        } else {\n+            return classicInitiatorListProvider;\n+        }\n+    }\n+\n+    private static BootstrapServiceRegistry buildBootstrapServiceRegistry() {\n+        final ClassLoaderService providedClassLoaderService = FlatClassLoaderService.INSTANCE;\n+        // N.B. support for custom IntegratorProvider injected via Properties (as\n+        // instance) removed\n+\n+        final QuarkusIntegratorServiceImpl integratorService = new QuarkusIntegratorServiceImpl(providedClassLoaderService);\n+        final QuarkusStrategySelectorBuilder strategySelectorBuilder = new QuarkusStrategySelectorBuilder();\n+        final StrategySelector strategySelector = strategySelectorBuilder.buildSelector(providedClassLoaderService);\n+        return new BootstrapServiceRegistryImpl(true, providedClassLoaderService, strategySelector, integratorService);\n+    }\n+\n+    private static InitialInitiatorListProvider initReactiveListProviderMaybe() {", "originalCommit": "e132d42c0b15c52286dbcf217ff450397493bf2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1NzU3NA==", "url": "https://github.com/quarkusio/quarkus/pull/10382#discussion_r448357574", "bodyText": "I considered that, but this code is invoked from within a Bytecode Recorder.\nThis implies that if I were to pass the full list of Initiators to the recorder from the layer in which I have BuildItems, I'd need to load and proxy many more classes - which then get loaded by reflection anyway.\nIf I were to \"just\" pass the InitialInitiatorListProvider it would also need to be recorded, proxied and loaded again.. with the added complexity of having a BuildItem needed for this, and need some way to enforce it to be one class at most?\nHappy to revisit, but I don't feel like it would be much better.", "author": "Sanne", "createdAt": "2020-07-01T13:20:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0NzI3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1ODIzNw==", "url": "https://github.com/quarkusio/quarkus/pull/10382#discussion_r448358237", "bodyText": "P.S. I considered the ServiceLoader at first, but I really want \"only one\" - if there's a list of such providers it's a problem, it's not meant as an SPI. Single-named constant seems more fitting.", "author": "Sanne", "createdAt": "2020-07-01T13:21:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0NzI3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM2MTQ2MA==", "url": "https://github.com/quarkusio/quarkus/pull/10382#discussion_r448361460", "bodyText": "Fair enough :)", "author": "FroMage", "createdAt": "2020-07-01T13:26:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0NzI3MQ=="}], "type": "inlineReview"}]}