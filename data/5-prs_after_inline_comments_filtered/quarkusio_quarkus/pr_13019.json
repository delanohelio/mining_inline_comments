{"pr_number": 13019, "pr_title": "Avoid retaining empty instances of HashSet", "pr_createdAt": "2020-10-29T17:23:10Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/13019", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQzNzgyNw==", "url": "https://github.com/quarkusio/quarkus/pull/13019#discussion_r514437827", "bodyText": "Stupid question: is it a case where we often have 1 element? I know for HV, it was a very common case and we decided to optimize it properly: https://github.com/hibernate/hibernate-validator/blob/master/engine/src/main/java/org/hibernate/validator/internal/util/CollectionHelper.java#L106 .\nIt might not be the case here so put it in the crazy idea box if it doesn't make sense :).", "author": "gsmet", "createdAt": "2020-10-29T17:26:29Z", "path": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/CurrentInjectionPointProvider.java", "diffHunk": "@@ -177,14 +177,20 @@ public int getPosition() {\n \n     }\n \n+    private static <V> Set<V> trimImmutableSet(final Set<V> input) {\n+        if (input == null)\n+            return null;\n+        return input.isEmpty() ? Collections.EMPTY_SET : input;\n+    }\n+\n     static abstract class AnnotatedBase implements Annotated {\n \n         private final Type baseType;\n         private final Set<Annotation> annotations;\n \n         AnnotatedBase(Type baseType, Set<Annotation> annotations) {\n             this.baseType = baseType;\n-            this.annotations = annotations;\n+            this.annotations = trimImmutableSet(annotations); //Don't retain memory for empty sets: HashSet is relatively large.", "originalCommit": "b95460001d3c26ac876af558f400ffe100b3e06e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5OTY5MA==", "url": "https://github.com/quarkusio/quarkus/pull/13019#discussion_r514599690", "bodyText": "that's a great idea :)\nI just queried my heap dump - found many such cases within ORM, and some in Vert.x. I have no doubt it would help in Arc as well, I just don't have mny annotations in my benchmark...\nSELECT OBJECTS inbounds(l) FROM \"java.util.HashSet\" l WHERE (l.map.size = 1)", "author": "Sanne", "createdAt": "2020-10-29T22:17:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQzNzgyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5OTg5OQ==", "url": "https://github.com/quarkusio/quarkus/pull/13019#discussion_r514599899", "bodyText": "damn, now I have another round of patching to do in Hibernate ORM...", "author": "Sanne", "createdAt": "2020-10-29T22:18:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQzNzgyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwNTA4Nw==", "url": "https://github.com/quarkusio/quarkus/pull/13019#discussion_r514605087", "bodyText": "actually in ORM the extra wrapping is detrimental. I'd need a \"maybeimmutable\" version...", "author": "Sanne", "createdAt": "2020-10-29T22:32:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQzNzgyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk3Njg2OQ==", "url": "https://github.com/quarkusio/quarkus/pull/13019#discussion_r514976869", "bodyText": "Yeah, sorry I should have been more clear: I was specifically talking about the singleton part. I agree that wrapping in an immutable collection might be detrimental.", "author": "gsmet", "createdAt": "2020-10-30T09:44:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQzNzgyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA0Mzk0Nw==", "url": "https://github.com/quarkusio/quarkus/pull/13019#discussion_r515043947", "bodyText": "thanks - applied the suggestion from Validator and a couple more improvements.\nThere's likely several more similar optimisations to do here, but I need to move on.", "author": "Sanne", "createdAt": "2020-10-30T11:51:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQzNzgyNw=="}], "type": "inlineReview"}, {"oid": "ef4df33defa1f3894c2a9ad63c38d89febf859d6", "url": "https://github.com/quarkusio/quarkus/commit/ef4df33defa1f3894c2a9ad63c38d89febf859d6", "message": "More memory savings opportunities in RemovedBeanImpl", "committedDate": "2020-10-30T11:32:39Z", "type": "forcePushed"}, {"oid": "2e8e41eaf56275112cc1bf00af7e48106db08b64", "url": "https://github.com/quarkusio/quarkus/commit/2e8e41eaf56275112cc1bf00af7e48106db08b64", "message": "Static constant DEFAULT_QUALIFIERS should be immutable", "committedDate": "2020-11-02T09:31:32Z", "type": "commit"}, {"oid": "902b132aee7f4778596cc472a9a6492ece96ceea", "url": "https://github.com/quarkusio/quarkus/commit/902b132aee7f4778596cc472a9a6492ece96ceea", "message": "Avoid retaining a large HashSet for immutable sets of zero/1 elements", "committedDate": "2020-11-02T09:34:35Z", "type": "commit"}, {"oid": "b07f20a6ffedf03d3e5ea3bf8d97bc2c2757e204", "url": "https://github.com/quarkusio/quarkus/commit/b07f20a6ffedf03d3e5ea3bf8d97bc2c2757e204", "message": "Remove unnecessary wrapping: this set is already unmodifiable", "committedDate": "2020-11-02T09:34:35Z", "type": "commit"}, {"oid": "ca3785575f16c53d3027a2c484e4d21139ad52dd", "url": "https://github.com/quarkusio/quarkus/commit/ca3785575f16c53d3027a2c484e4d21139ad52dd", "message": "More memory savings opportunities in RemovedBeanImpl", "committedDate": "2020-11-02T09:34:35Z", "type": "commit"}, {"oid": "ca3785575f16c53d3027a2c484e4d21139ad52dd", "url": "https://github.com/quarkusio/quarkus/commit/ca3785575f16c53d3027a2c484e4d21139ad52dd", "message": "More memory savings opportunities in RemovedBeanImpl", "committedDate": "2020-11-02T09:34:35Z", "type": "forcePushed"}]}