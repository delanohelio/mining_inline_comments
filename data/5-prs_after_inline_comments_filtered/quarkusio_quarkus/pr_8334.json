{"pr_number": 8334, "pr_title": "New panache-mock module for mocking Panache static methods", "pr_createdAt": "2020-04-01T15:15:23Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/8334", "timeline": [{"oid": "bebf746e804899437c71533727cb4531284e3574", "url": "https://github.com/quarkusio/quarkus/commit/bebf746e804899437c71533727cb4531284e3574", "message": "New panache-mock module for mocking Panache static methods", "committedDate": "2020-04-03T09:25:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg4MzIwMA==", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r402883200", "bodyText": "Maybe use a ConcurentHashMap in case tests are run in parallel ?", "author": "loicmathieu", "createdAt": "2020-04-03T09:38:37Z", "path": "extensions/panache/panache-mock/runtime/src/main/java/io/quarkus/panache/mock/PanacheMock.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package io.quarkus.panache.mock;\n+\n+import java.lang.reflect.Method;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.mockito.Mockito;\n+import org.mockito.internal.invocation.DefaultInvocationFactory;\n+import org.mockito.internal.invocation.InterceptedInvocation;\n+import org.mockito.internal.invocation.RealMethod;\n+import org.mockito.internal.util.MockUtil;\n+import org.mockito.invocation.MockHandler;\n+import org.mockito.mock.MockCreationSettings;\n+\n+public class PanacheMock {\n+\n+    public static boolean IsMockEnabled = false;\n+\n+    private final static Map<Class<?>, Object> mocks = new HashMap<>();", "originalCommit": "bebf746e804899437c71533727cb4531284e3574", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg4NDUzOA==", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r402884538", "bodyText": "That would not help: tests can't run in parallel with that setup, because the set of classes to mock and the methods mocked is test-specific. So we'd have to make this a thread-local, which would mean that reactive code would likely fail or require context propagation.", "author": "FroMage", "createdAt": "2020-04-03T09:40:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg4MzIwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg4OTc0OA==", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r402889748", "bodyText": "I think it's OK for a first implementation as soon as it is clearly documented that test with panache mock should not be run in parallel.", "author": "loicmathieu", "createdAt": "2020-04-03T09:50:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg4MzIwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4OTI1MA==", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r405989250", "bodyText": "Is it possible that running user code will access this? e.g. If I mock a request then send a HTTP request will the HTTP request handler code access this map? If so it should be a CHM anyway to make sure that any modifications are visible to the other thread.", "author": "stuartwdouglas", "createdAt": "2020-04-09T06:46:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg4MzIwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNzEzMw==", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r408927133", "bodyText": "Fixed", "author": "FroMage", "createdAt": "2020-04-15T15:21:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg4MzIwMA=="}], "type": "inlineReview"}, {"oid": "e67615a2c2dd57cc35e8342e1c14eb02a0411053", "url": "https://github.com/quarkusio/quarkus/commit/e67615a2c2dd57cc35e8342e1c14eb02a0411053", "message": "New panache-mock module for mocking Panache static methods", "committedDate": "2020-04-06T14:19:29Z", "type": "forcePushed"}, {"oid": "674e73cb43f013567b66deac99e5a0d2a6935101", "url": "https://github.com/quarkusio/quarkus/commit/674e73cb43f013567b66deac99e5a0d2a6935101", "message": "New panache-mock module for mocking Panache static methods", "committedDate": "2020-04-06T14:40:47Z", "type": "forcePushed"}, {"oid": "e1aafb5941699b0caf6693808df32259f6fadb28", "url": "https://github.com/quarkusio/quarkus/commit/e1aafb5941699b0caf6693808df32259f6fadb28", "message": "New panache-mock module for mocking Panache static methods", "committedDate": "2020-04-07T13:18:26Z", "type": "forcePushed"}, {"oid": "f9f8e7fd477abccabb87ff0cbb237acf90a538b3", "url": "https://github.com/quarkusio/quarkus/commit/f9f8e7fd477abccabb87ff0cbb237acf90a538b3", "message": "New panache-mock module for mocking Panache static methods", "committedDate": "2020-04-08T09:40:00Z", "type": "forcePushed"}, {"oid": "c35571bf41b03c9fa328171c1207cd1a5f4f6f67", "url": "https://github.com/quarkusio/quarkus/commit/c35571bf41b03c9fa328171c1207cd1a5f4f6f67", "message": "Added panche-mock module and docs", "committedDate": "2020-04-08T14:46:33Z", "type": "forcePushed"}, {"oid": "0685cfdc28f88f5721bfe3ab5f01397277baa9a4", "url": "https://github.com/quarkusio/quarkus/commit/0685cfdc28f88f5721bfe3ab5f01397277baa9a4", "message": "Added panche-mock module and docs", "committedDate": "2020-04-08T15:09:14Z", "type": "forcePushed"}, {"oid": "bee47cb641aea00966c64861ef201857747e5eda", "url": "https://github.com/quarkusio/quarkus/commit/bee47cb641aea00966c64861ef201857747e5eda", "message": "Added panche-mock module and docs", "committedDate": "2020-04-08T15:45:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4NzM2MA==", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r405987360", "bodyText": "Double and long take up two local variable slots. Have you tested this methods methods that take double and long as params? Whenever you are doing anything with bytecode that involves primitives it is always a good idea to write explicit checks for long and double as they are a pain.", "author": "stuartwdouglas", "createdAt": "2020-04-09T06:41:45Z", "path": "extensions/panache/panache-mock/deployment/src/main/java/io/quarkus/panache/mock/deployment/PanacheMockMethodCustomizer.java", "diffHunk": "@@ -0,0 +1,123 @@\n+package io.quarkus.panache.mock.deployment;\n+\n+import org.jboss.jandex.MethodInfo;\n+import org.jboss.jandex.Type.Kind;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n+\n+import io.quarkus.panache.common.deployment.JandexUtil;\n+import io.quarkus.panache.common.deployment.PanacheMethodCustomizer;\n+import io.quarkus.panache.mock.PanacheMock;\n+\n+public class PanacheMockMethodCustomizer implements PanacheMethodCustomizer {\n+\n+    private final static String PANACHE_MOCK_BINARY_NAME = PanacheMock.class.getName().replace('.', '/');\n+    private final static String PANACHE_MOCK_INVOKE_REAL_METHOD_EXCEPTION_BINARY_NAME = PanacheMock.InvokeRealMethodException.class\n+            .getName().replace('.', '/');\n+\n+    @Override\n+    public void customize(Type entityClassSignature, MethodInfo method, MethodVisitor mv) {\n+        /*\n+         * Generated code:\n+         * \n+         * if(PanacheMock.IsMockEnabled && PanacheMock.isMocked(TestClass.class)) {\n+         * try {\n+         * return (int)PanacheMock.mockMethod(TestClass.class, \"foo\", new Class<?>[] {int.class}, new Object[] {arg});\n+         * } catch (PanacheMock.InvokeRealMethodException e) {\n+         * // fall-through\n+         * }\n+         * }\n+         * \n+         * Bytecode approx:\n+         * \n+         * 0: getstatic #16 // Field PanacheMock.IsMockEnabled:Z\n+         * 3: ifeq 50\n+         * 6: ldc #1 // class MyTestMockito$TestClass\n+         * 8: invokestatic #22 // Method PanacheMock.isMocked:(Ljava/lang/Class;)Z\n+         * 11: ifeq 50\n+         * 14: ldc #1 // class MyTestMockito$TestClass\n+         * 16: ldc #26 // String foo\n+         * \n+         * 18: iconst_1\n+         * 19: anewarray #27 // class java/lang/Class\n+         * 22: dup\n+         * 23: iconst_0\n+         * 24: getstatic #29 // Field java/lang/Integer.TYPE:Ljava/lang/Class;\n+         * 27: aastore\n+         *\n+         * 28: iconst_1\n+         * 29: anewarray #3 // class java/lang/Object\n+         * 32: dup\n+         * 33: iconst_0\n+         * 34: iload_0\n+         * 35: invokestatic #35 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+         * 38: aastore\n+         * \n+         * 39: invokestatic #39 // Method\n+         * PanacheMock.mockMethod:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;[Ljava/lang/Object;)Ljava/lang/Object;\n+         * 42: checkcast #30 // class java/lang/Integer\n+         * 45: invokevirtual #43 // Method java/lang/Integer.intValue:()I\n+         * 48: ireturn\n+         * 49: astore_1\n+         */\n+        Label realMethodLabel = new Label();\n+\n+        mv.visitFieldInsn(Opcodes.GETSTATIC, PANACHE_MOCK_BINARY_NAME, \"IsMockEnabled\", \"Z\");\n+        mv.visitJumpInsn(Opcodes.IFEQ, realMethodLabel);\n+\n+        mv.visitLdcInsn(entityClassSignature);\n+        mv.visitMethodInsn(Opcodes.INVOKESTATIC, PANACHE_MOCK_BINARY_NAME, \"isMocked\", \"(Ljava/lang/Class;)Z\", false);\n+        mv.visitJumpInsn(Opcodes.IFEQ, realMethodLabel);\n+\n+        Label tryStart = new Label();\n+        Label tryEnd = new Label();\n+        Label tryHandler = new Label();\n+        mv.visitTryCatchBlock(tryStart, tryEnd, tryHandler, PANACHE_MOCK_INVOKE_REAL_METHOD_EXCEPTION_BINARY_NAME);\n+        mv.visitLabel(tryStart);\n+\n+        mv.visitLdcInsn(entityClassSignature);\n+        mv.visitLdcInsn(method.name());\n+\n+        mv.visitLdcInsn(method.parameters().size());\n+        mv.visitTypeInsn(Opcodes.ANEWARRAY, \"java/lang/Class\");\n+\n+        int i = 0;\n+        for (org.jboss.jandex.Type paramType : method.parameters()) {\n+            mv.visitInsn(Opcodes.DUP);\n+            mv.visitLdcInsn(i);\n+            JandexUtil.visitLdc(mv, paramType);\n+            mv.visitInsn(Opcodes.AASTORE);\n+            i++;\n+        }\n+\n+        mv.visitLdcInsn(method.parameters().size());\n+        mv.visitTypeInsn(Opcodes.ANEWARRAY, \"java/lang/Object\");\n+\n+        i = 0;\n+        for (org.jboss.jandex.Type paramType : method.parameters()) {\n+            mv.visitInsn(Opcodes.DUP);\n+            mv.visitLdcInsn(i);", "originalCommit": "bee47cb641aea00966c64861ef201857747e5eda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczMzQ2OQ==", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r406733469", "bodyText": "So, we don't have any method in the superclasses in question that we generate bridges for (PanacheEntityBase and PanacheRepositoryBase) so it doesn't happen. And I can't test this by adding a method to these classes, and no other classes have bridge methods generated.\nSo in general, sure, but I couldn't test this if I supported it. I could add a guard to make sure we never add such methods.", "author": "FroMage", "createdAt": "2020-04-10T12:21:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4NzM2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3OTAwMw==", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r406779003", "bodyText": "You were right, I've implemented and tested it.", "author": "FroMage", "createdAt": "2020-04-10T14:20:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4NzM2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk5MDMzNg==", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r405990336", "bodyText": "Can you add some tests with multiple long/double method parameters? It should show up the issue I brought up above. These tests don't show it because there is only a single parameter.", "author": "stuartwdouglas", "createdAt": "2020-04-09T06:49:21Z", "path": "integration-tests/hibernate-orm-panache/src/test/java/io/quarkus/it/panache/PanacheMockingTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package io.quarkus.it.panache;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+import javax.persistence.LockModeType;\n+import javax.ws.rs.WebApplicationException;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import io.quarkus.hibernate.orm.panache.PanacheRepositoryBase;\n+import io.quarkus.panache.mock.PanacheMock;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.mockito.InjectMock;\n+\n+@QuarkusTest\n+public class PanacheMockingTest {\n+\n+    @Test\n+    @Order(1)\n+    public void testPanacheMocking() {\n+        PanacheMock.mock(Person.class);\n+\n+        Assertions.assertEquals(0, Person.count());\n+\n+        Mockito.when(Person.count()).thenReturn(23l);\n+        Assertions.assertEquals(23, Person.count());\n+\n+        Mockito.when(Person.count()).thenReturn(42l);\n+        Assertions.assertEquals(42, Person.count());\n+\n+        Mockito.when(Person.count()).thenCallRealMethod();\n+        Assertions.assertEquals(0, Person.count());\n+\n+        PanacheMock.verify(Person.class, Mockito.times(4)).count();\n+\n+        Person p = new Person();\n+        Mockito.when(Person.findById(12l)).thenReturn(p);", "originalCommit": "bee47cb641aea00966c64861ef201857747e5eda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNDU5OA==", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r406734598", "bodyText": "I can't, see above.", "author": "FroMage", "createdAt": "2020-04-10T12:24:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk5MDMzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNTY0Ng==", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r406735646", "bodyText": "Actually I can make user methods do this. Sorry.", "author": "FroMage", "createdAt": "2020-04-10T12:27:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk5MDMzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk5MzAwMA==", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r405993000", "bodyText": "I don't really understand the context here, but are you sure there will never be primitive params?", "author": "stuartwdouglas", "createdAt": "2020-04-09T06:55:34Z", "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/PanacheRepositoryEnhancer.java", "diffHunk": "@@ -101,26 +117,102 @@ private String recursivelyFindEntityTypeFromClass(DotName clazz, DotName reposit\n                 throw new IllegalStateException(\n                         \"Failed to find supertype \" + repositoryDotName + \" from entity class \" + clazz);\n             org.jboss.jandex.Type entityType = typeParameters.get(0);\n-            return entityType.name().toString().replace('.', '/');\n+            org.jboss.jandex.Type idType = typeParameters.get(1);\n+            return new String[] {\n+                    entityType.name().toString().replace('.', '/'),\n+                    idType.name().toString().replace('.', '/')\n+            };\n         }\n \n         @Override\n         public void visitEnd() {\n             for (MethodInfo method : panacheRepositoryBaseClassInfo.methods()) {\n                 // Do not generate a method that already exists\n-                if (!JandexUtil.containsMethod(daoClassInfo, method)) {\n+                String descriptor = JandexUtil.getDescriptor(method, name -> typeArguments.get(name));\n+                if (!userMethods.contains(method.name() + \"/\" + descriptor)) {\n                     AnnotationInstance bridge = method.annotation(JandexUtil.DOTNAME_GENERATE_BRIDGE);\n                     if (bridge != null) {\n-                        generateMethod(method, bridge.value(\"targetReturnTypeErased\"));\n+                        generateModelBridge(method, bridge.value(\"targetReturnTypeErased\"));\n+                        if (needsJvmBridge(method)) {\n+                            generateJvmBridge(method);\n+                        }\n                     }\n                 }\n             }\n             super.visitEnd();\n         }\n \n-        private void generateMethod(MethodInfo method, AnnotationValue targetReturnTypeErased) {\n-            String descriptor = JandexUtil.getDescriptor(method, name -> name.equals(\"Entity\") ? entitySignature : null);\n-            String signature = JandexUtil.getSignature(method, name -> name.equals(\"Entity\") ? entitySignature : null);\n+        private boolean needsJvmBridge(MethodInfo method) {\n+            if (needsJvmBridge(method.returnType()))\n+                return true;\n+            for (org.jboss.jandex.Type paramType : method.parameters()) {\n+                if (needsJvmBridge(paramType))\n+                    return true;\n+            }\n+            return false;\n+        }\n+\n+        private boolean needsJvmBridge(org.jboss.jandex.Type type) {\n+            if (type.kind() == Kind.TYPE_VARIABLE) {\n+                String typeParamName = type.asTypeVariable().identifier();\n+                return typeArguments.containsKey(typeParamName);\n+            }\n+            return false;\n+        }\n+\n+        private void generateJvmBridge(MethodInfo method) {\n+            // get a bounds-erased descriptor\n+            String descriptor = JandexUtil.getDescriptor(method, name -> null);\n+            // make sure we need a bridge\n+            if (!userMethods.contains(method.name() + \"/\" + descriptor)) {\n+                MethodVisitor mv = super.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_SYNTHETIC | Opcodes.ACC_BRIDGE,\n+                        method.name(),\n+                        descriptor,\n+                        null,\n+                        null);\n+                List<org.jboss.jandex.Type> parameters = method.parameters();\n+                for (int i = 0; i < parameters.size(); i++) {\n+                    mv.visitParameter(method.parameterName(i), 0 /* modifiers */);\n+                }\n+                mv.visitCode();\n+                // this\n+                mv.visitIntInsn(Opcodes.ALOAD, 0);\n+                // each param\n+                for (int i = 0; i < parameters.size(); i++) {\n+                    org.jboss.jandex.Type paramType = parameters.get(i);\n+                    mv.visitIntInsn(Opcodes.ALOAD, i + 1);", "originalCommit": "bee47cb641aea00966c64861ef201857747e5eda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3ODY3Mw==", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r406778673", "bodyText": "ATM there are none. I've added a check if it ever happens.", "author": "FroMage", "createdAt": "2020-04-10T14:20:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk5MzAwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk5NTg4Nw==", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r405995887", "bodyText": "I wonder if we could / should ditch the full blown extension approach here, and just introduce a test module that utilizes the TestBuildChainCustomizerProducer we are introducing in #8491", "author": "geoand", "createdAt": "2020-04-09T07:02:13Z", "path": "extensions/panache/panache-mock/deployment/src/main/java/io/quarkus/panache/mock/deployment/PanacheMockResourceProcessor.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package io.quarkus.panache.mock.deployment;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.LaunchModeBuildItem;\n+import io.quarkus.panache.common.deployment.PanacheMethodCustomizerBuildItem;\n+import io.quarkus.runtime.LaunchMode;\n+\n+public final class PanacheMockResourceProcessor {", "originalCommit": "bee47cb641aea00966c64861ef201857747e5eda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3ODUwMA==", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r406778500", "bodyText": "Good idea, done.", "author": "FroMage", "createdAt": "2020-04-10T14:19:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk5NTg4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkzMTc4NA==", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r408931784", "bodyText": "Excellent", "author": "geoand", "createdAt": "2020-04-15T15:27:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk5NTg4Nw=="}], "type": "inlineReview"}, {"oid": "3e1a9b4cc44c2bd010fcce20aa8faa2e653f6eb6", "url": "https://github.com/quarkusio/quarkus/commit/3e1a9b4cc44c2bd010fcce20aa8faa2e653f6eb6", "message": "Added panche-mock module and docs", "committedDate": "2020-04-10T14:18:34Z", "type": "forcePushed"}, {"oid": "ccbb69eab1b1822b76c4e399c839fdbdda23a860", "url": "https://github.com/quarkusio/quarkus/commit/ccbb69eab1b1822b76c4e399c839fdbdda23a860", "message": "Added panche-mock module and docs", "committedDate": "2020-04-10T14:40:32Z", "type": "forcePushed"}, {"oid": "7c66ef94703c3b8d203997404dd0b2ca6fbd14b7", "url": "https://github.com/quarkusio/quarkus/commit/7c66ef94703c3b8d203997404dd0b2ca6fbd14b7", "message": "Added panche-mock module and docs", "committedDate": "2020-04-15T15:22:07Z", "type": "forcePushed"}, {"oid": "01e64dad7aa87f02a46b0f57ce08c3f5af4cd9fb", "url": "https://github.com/quarkusio/quarkus/commit/01e64dad7aa87f02a46b0f57ce08c3f5af4cd9fb", "message": "Added panche-mock module and docs", "committedDate": "2020-04-16T12:31:04Z", "type": "forcePushed"}, {"oid": "ff96dbf502562c024c1e8d741efa32bc1588fe2d", "url": "https://github.com/quarkusio/quarkus/commit/ff96dbf502562c024c1e8d741efa32bc1588fe2d", "message": "Added panche-mock module and docs", "committedDate": "2020-04-17T13:19:08Z", "type": "forcePushed"}, {"oid": "5cd37f67c2e3fa5e1094a6d0c22194bfff1dc084", "url": "https://github.com/quarkusio/quarkus/commit/5cd37f67c2e3fa5e1094a6d0c22194bfff1dc084", "message": "Panache ORM/Mongo: fixed bridge generation\n\nNow it's all automated, no more forgetting methods to bridge", "committedDate": "2020-04-20T08:47:06Z", "type": "commit"}, {"oid": "3a5680ea367c5dad60655dcef0ca9765f14d5efe", "url": "https://github.com/quarkusio/quarkus/commit/3a5680ea367c5dad60655dcef0ca9765f14d5efe", "message": "Added panche-mock module and docs", "committedDate": "2020-04-20T08:47:06Z", "type": "commit"}, {"oid": "3a5680ea367c5dad60655dcef0ca9765f14d5efe", "url": "https://github.com/quarkusio/quarkus/commit/3a5680ea367c5dad60655dcef0ca9765f14d5efe", "message": "Added panche-mock module and docs", "committedDate": "2020-04-20T08:47:06Z", "type": "forcePushed"}]}