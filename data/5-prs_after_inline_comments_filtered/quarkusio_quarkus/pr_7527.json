{"pr_number": 7527, "pr_title": "Panache : deleteById()", "pr_createdAt": "2020-03-03T08:49:46Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/7527", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAzMzQ4Nw==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r387033487", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return false if the entity is not delete (not found).\n          \n          \n            \n                 * @return false if the entity was not deleted (not found).", "author": "gastaldi", "createdAt": "2020-03-03T13:55:25Z", "path": "extensions/panache/hibernate-orm-panache/runtime/src/main/java/io/quarkus/hibernate/orm/panache/PanacheEntityBase.java", "diffHunk": "@@ -638,6 +638,17 @@ public static long deleteAll() {\n         throw JpaOperations.implementationInjectionMissing();\n     }\n \n+    /**\n+     * Delete an entity of this type by ID.\n+     *\n+     * @param id the ID of the entity to delete.\n+     * @return false if the entity is not delete (not found).", "originalCommit": "737f33277554ef329587b78fd694e5c2290525d3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAzMzg1NA==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r387033854", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return false if the entity is not deleted (not found).\n          \n          \n            \n                 * @return false if the entity was not deleted (not found).", "author": "gastaldi", "createdAt": "2020-03-03T13:55:56Z", "path": "extensions/panache/hibernate-orm-panache/runtime/src/main/java/io/quarkus/hibernate/orm/panache/PanacheRepositoryBase.java", "diffHunk": "@@ -634,6 +634,17 @@ public default long deleteAll() {\n         throw JpaOperations.implementationInjectionMissing();\n     }\n \n+    /**\n+     * Delete an entity of this type by ID.\n+     *\n+     * @param id the ID of the entity to delete.\n+     * @return false if the entity is not deleted (not found).", "originalCommit": "737f33277554ef329587b78fd694e5c2290525d3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAzNDAwNQ==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r387034005", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return false if the entity is not delete (not found).\n          \n          \n            \n                 * @return false if the entity was not deleted (not found).", "author": "gastaldi", "createdAt": "2020-03-03T13:56:12Z", "path": "extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/PanacheMongoEntityBase.java", "diffHunk": "@@ -697,6 +697,17 @@ public static long deleteAll() {\n         throw MongoOperations.implementationInjectionMissing();\n     }\n \n+    /**\n+     * Delete an entity of this type by ID.\n+     *\n+     * @param id the ID of the entity to delete.\n+     * @return false if the entity is not delete (not found).", "originalCommit": "737f33277554ef329587b78fd694e5c2290525d3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAzNDEyNg==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r387034126", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return false if the entity is not deleted (not found).\n          \n          \n            \n                 * @return false if the entity was not deleted (not found).", "author": "gastaldi", "createdAt": "2020-03-03T13:56:24Z", "path": "extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/PanacheMongoRepositoryBase.java", "diffHunk": "@@ -702,6 +702,17 @@ public default long deleteAll() {\n         throw MongoOperations.implementationInjectionMissing();\n     }\n \n+    /**\n+     * Delete an entity of this type by ID.\n+     *\n+     * @param id the ID of the entity to delete.\n+     * @return false if the entity is not deleted (not found).", "originalCommit": "737f33277554ef329587b78fd694e5c2290525d3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAzNDI3Mg==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r387034272", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return false if the entity is not delete (not found).\n          \n          \n            \n                 * @return false if the entity was not deleted (not found).", "author": "gastaldi", "createdAt": "2020-03-03T13:56:36Z", "path": "extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/reactive/ReactivePanacheMongoEntityBase.java", "diffHunk": "@@ -707,6 +708,17 @@\n         throw ReactiveMongoOperations.implementationInjectionMissing();\n     }\n \n+    /**\n+     * Delete an entity of this type by ID.\n+     *\n+     * @param id the ID of the entity to delete.\n+     * @return false if the entity is not delete (not found).", "originalCommit": "737f33277554ef329587b78fd694e5c2290525d3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAzNDQwNg==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r387034406", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return false if the entity is not deleted (not found).\n          \n          \n            \n                 * @return false if the entity was not deleted (not found).", "author": "gastaldi", "createdAt": "2020-03-03T13:56:48Z", "path": "extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/reactive/ReactivePanacheMongoRepositoryBase.java", "diffHunk": "@@ -703,6 +704,17 @@\n         throw ReactiveMongoOperations.implementationInjectionMissing();\n     }\n \n+    /**\n+     * Delete an entity of this type by ID.\n+     *\n+     * @param id the ID of the entity to delete.\n+     * @return false if the entity is not deleted (not found).", "originalCommit": "737f33277554ef329587b78fd694e5c2290525d3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "16b01d980975849083086b4e9d365a43490db09f", "url": "https://github.com/quarkusio/quarkus/commit/16b01d980975849083086b4e9d365a43490db09f", "message": "Simplify Spring Data JPA deleteById implementation\n\nUse the newly added JpaOperations#deleteById", "committedDate": "2020-03-03T14:24:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNDIwMg==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r388814202", "bodyText": "Shouldn't this be of type Id for coherence with findById(Id) ?", "author": "FroMage", "createdAt": "2020-03-06T10:04:07Z", "path": "extensions/panache/hibernate-orm-panache/runtime/src/main/java/io/quarkus/hibernate/orm/panache/PanacheRepositoryBase.java", "diffHunk": "@@ -634,6 +634,17 @@ public default long deleteAll() {\n         throw JpaOperations.implementationInjectionMissing();\n     }\n \n+    /**\n+     * Delete an entity of this type by ID.\n+     *\n+     * @param id the ID of the entity to delete.\n+     * @return false if the entity was not deleted (not found).\n+     */\n+    @GenerateBridge\n+    public default boolean deleteById(Object id) {", "originalCommit": "16b01d980975849083086b4e9d365a43490db09f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk3NjA0NA==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r388976044", "bodyText": "done", "author": "loicmathieu", "createdAt": "2020-03-06T15:40:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNDIwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNDU0MQ==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r388814541", "bodyText": "I think we should start with the improved version ;)", "author": "FroMage", "createdAt": "2020-03-06T10:04:49Z", "path": "extensions/panache/hibernate-orm-panache/runtime/src/main/java/io/quarkus/hibernate/orm/panache/runtime/JpaOperations.java", "diffHunk": "@@ -393,6 +393,16 @@ public static long deleteAll(Class<?> entityClass) {\n         return (long) getEntityManager().createQuery(\"DELETE FROM \" + getEntityName(entityClass)).executeUpdate();\n     }\n \n+    public static boolean deleteById(Class<?> entityClass, Object id) {", "originalCommit": "16b01d980975849083086b4e9d365a43490db09f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg5OTA2Mg==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r388899062", "bodyText": "It's not as easy as it looks, for PanacheEntity and for the repository pattern we don't know the name of the ID field so we need to retrieve it somehow ...", "author": "loicmathieu", "createdAt": "2020-03-06T13:23:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNDU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk2OTYzOQ==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r388969639", "bodyText": "I find a way to retrieve from Hiberate the name of the identifier field:\n        EntityManager entityManager = getEntityManager();\n        Session session = entityManager.unwrap(Session.class);\n        SessionFactory sessionFactory = session.getSessionFactory();\n        ClassMetadata metadata = sessionFactory.getClassMetadata(entityClass);\n        String idField = metadata.getIdentifierPropertyName();\n\nWDYT ?", "author": "loicmathieu", "createdAt": "2020-03-06T15:29:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNDU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk3Njk4NQ==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r388976985", "bodyText": "@FroMage I sucessfully create a query with the trick I described above. This couple Panache directly with Hibernate and not just JPA but I think it's OK. After all it's Hibernate with Panache not JPA with Panache :)\nIf the new impl is OK for you I'll squash it and we could merge it", "author": "loicmathieu", "createdAt": "2020-03-06T15:42:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNDU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUzMjE3Nw==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r389532177", "bodyText": "This looks good. Can you just check what happens with composite IDs? This should work with @CompositeId but not @IdClass, I assume.\nBut this should already be a limitation of findById() which only takes a single argument, so perhaps it's acceptable.", "author": "FroMage", "createdAt": "2020-03-09T09:05:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNDU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUzMjM2MA==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r389532360", "bodyText": "https://www.baeldung.com/jpa-composite-primary-keys", "author": "FroMage", "createdAt": "2020-03-09T09:05:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNDU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgxNzgxMA==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r389817810", "bodyText": "@FroMage there us no @CompositeId annotation ... You are talking about composite ID via @IdClass or @Embeddable right ?\nNone of them are tested inside the integration test of Hibernate with Panache, I can have a look to see what's goinig one with findById() and deleteById() with these annotations.", "author": "loicmathieu", "createdAt": "2020-03-09T16:45:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNDU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5ODU0OQ==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r390198549", "bodyText": "@FroMage I added tests with @IdClass and @Embeddable composite id and it works fine for @Embeddable (it generates a delete query with all the fields of the embeddable composite ID) but didn't works for @IdClass.\nFor @IdClass Hibernate didn't succeed in generating the query with the following error:\nCaused by: java.lang.IllegalArgumentException: Could not locate ordinal parameter [1], expecting one of []\n\tat org.hibernate.query.internal.ParameterMetadataImpl.getOrdinalParameterDescriptor(ParameterMetadataImpl.java:154)\n\tat org.hibernate.query.internal.ParameterMetadataImpl.getQueryParameter(ParameterMetadataImpl.java:204)\n\tat org.hibernate.query.internal.QueryParameterBindingsImpl.getBinding(QueryParameterBindingsImpl.java:182)\n\tat org.hibernate.query.internal.AbstractProducedQuery.setParameter(AbstractProducedQuery.java:507)\n\tat org.hibernate.query.internal.AbstractProducedQuery.setParameter(AbstractProducedQuery.java:110)\n\tat io.quarkus.hibernate.orm.panache.runtime.JpaOperations.bindParameters(JpaOperations.java:95)\n\nMultiple solutions here:\n\nIt should works and I should log a bug on Hibernate side\nWe go back to using entityManager.find(id).remove()\nWe check if the object have the annotation @IdClass by reflection and switch back to entityManager.find(id).remove() only for this case (reflection lookup is fast so it should not be an issue)\nWe add a varargs to deleteById so when using @IdClass based composite id the user can write entity.deleteById(key.part1, key.part2) instead of entity.deleteById(key) (not tested)\n\nWDYT ?", "author": "loicmathieu", "createdAt": "2020-03-10T09:50:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNDU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMwODk2Nw==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r390308967", "bodyText": "This stack trace is not for findById but for the new deleteById right?", "author": "FroMage", "createdAt": "2020-03-10T13:24:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNDU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMyNTk3OQ==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r390325979", "bodyText": "Yes, findById works with composite id for both @IdClassand@Embeddable. Only deleteByIdwith@IdClass` didn't works", "author": "loicmathieu", "createdAt": "2020-03-10T13:50:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNDU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM1NTUwMg==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r390355502", "bodyText": "I bet this is because we didn't find how to write a query for that.\nPerhaps @Sanne knows of a way to do a delete by id in Hibernate that works without loading the entity, when using an @IdClass?", "author": "FroMage", "createdAt": "2020-03-10T14:30:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNDU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ0MTExNQ==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r390441115", "bodyText": "\"id\" is a special attribute in HQL, you should be able to refer to it even if the field name is different.", "author": "Sanne", "createdAt": "2020-03-10T16:22:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNDU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ0MTk1Mg==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r390441952", "bodyText": "But give me some more context please; writing HQL queries for us to parse is typically not the most efficient approach.", "author": "Sanne", "createdAt": "2020-03-10T16:23:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNDU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ0NDQ3MA==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r390444470", "bodyText": "SERIOUSLY? I never knew that :(\nThe context is we're trying to implement deleteById without doing findById(id).delete().", "author": "FroMage", "createdAt": "2020-03-10T16:26:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNDU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ2Mzg3OQ==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r390463879", "bodyText": "@Sanne the purpose of the deleteById method is to ease the developement of classical REST endpoint where you want to delete an entity that are not yet loaded inside the persistence context.\nI first implement it via findById(class, id).delete() that basically maps to entityManager.find(id, class); entityManager.remove(entity).\nAs this generates two queries, one SELECT and one DELETE we try to achieve a better implementation with only a DELETE query, something like : entityManager.createQuery(\"delete from entity where id = ?1).setParameter(1, key).executeUpdate().\nKeep in mind that it's inside Panache so the code is not exactly this one ...\nIt works, except for composite key with @IdClass (composite key with @Embeddable works fine) where it generates the exception above.", "author": "loicmathieu", "createdAt": "2020-03-10T16:54:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNDU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ2NzU4OA==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r390467588", "bodyText": "you could do:\nObject toBeDeleted = session.byId( entityClass ).getReference( id );\nsession.delete( toBeDeleted );\n\nHowever this will not check for the object to actually exist, it will just do the delete statement.", "author": "Sanne", "createdAt": "2020-03-10T17:00:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNDU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ2OTE1NQ==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r390469155", "bodyText": "to clarify: the first line returns the representation of the object to be deleted in the form of a managed entity.\nSo if that same object was already loaded in some way, you'll get that one instance returned with the state it currently has. If there was no such object of that type and Id in the current Session, it's NOT loading it from the database but returning you a managed instance which only has the Id initialized.", "author": "Sanne", "createdAt": "2020-03-10T17:02:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNDU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3MTY0MA==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r390471640", "bodyText": "thanks @loicmathieu , for some reason I only received your comment after posting my suggestion.\nThe suggestion doesn't change, just please think if the fact that you might be deleting an entity which actually no longer exists is something that you'd want an error for... I'd say probably not but I'm not 100% sure.", "author": "Sanne", "createdAt": "2020-03-10T17:06:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNDU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU2MzM4Ng==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r390563386", "bodyText": "@Sanne thanks a lot this seems exactly what we need ;)\nWe return a boolean at true if the entity was removed, I'll test it tomorrow.", "author": "loicmathieu", "createdAt": "2020-03-10T19:36:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNDU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU5Mzc2Mw==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r390593763", "bodyText": "We return a boolean at true if the entity was removed, I'll test it tomorrow.\n\nI agree that returning this information to the user is kinda nice, but it might be very complicated to implement: Hibernate ORM won't tell you: if you have a reference to a persistent object then it will exist in the DB, since we assume transactionality.\nTo be clear, it's not as simple as checking for the expected number of rows affected by a write statement: it's an object so you're likely deleting what is actually a graph of entries from related tables, and this is most likely done via a combination of cascading via foreign constraints and/or batching of multiple statements into a single roundtrip.\nIt's very likely that it's actually cheaper to load the object first, if you need to know of its existence.\nI would suggest to return void; if someone really needs to know, they'll always have the option to load /check explicitly. Sorry, I know it's not ideal...", "author": "Sanne", "createdAt": "2020-03-10T20:33:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNDU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg3NjA1Mw==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r390876053", "bodyText": "@Sanne getReference() performs a select in case the entity is not yet inside the persistence context and throws EntityNotFoundException if it didn't exist.\nSo we are back with a select and a delete if we use it (it didn't perform the select if the entity is already loaded inside the persistence context, but in the context of a DELETE Rest endpoint it should not be the case).\nFor the records, the code I tested is :\nObject entity = getEntityManager().getReference(entityClass, id);\ngetEntityManager().remove(entity);", "author": "loicmathieu", "createdAt": "2020-03-11T10:30:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNDU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjExNzk3OA==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r392117978", "bodyText": "@Sanne @FroMage here is what I propose:\n\nImplement a direct deleteByIf with HQL as previously if the identifier entity is not annotated with @IdClass\nImplements a deleteById via getReference + remove for entity annotated by @IdClass\nDocument clearly the method: it should be used when the entity is not yet loaded inside the persistence context (like for stateless DELETE rest endoint), if the entity is already loaded calling delete() on the entity performs better.", "author": "loicmathieu", "createdAt": "2020-03-13T09:33:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNDU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzODQyMA==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r392338420", "bodyText": "@Sanne getReference() performs a select in case the entity is not yet inside the persistence context and throws EntityNotFoundException if it didn't exist.\n\nHi @loicmathieu , no that's not accurate. getReference() will not hit the database at all.\nBut like I warned, it will assume that you know for sure that the entity exists: it's not correct to use this method if you're in doubt.\nI guess what you observe is that some subsequent operation later on is forcing the reference to be loaded - most likely the delete action itself.\nTBH as I suggested previous I don't think you can implement this feature to be all three of:\n\ngeneric enough for any model\ncorrect in all such cases\nskipping the load\n\nIt's one of those situations in which you have to pick 2.", "author": "Sanne", "createdAt": "2020-03-13T16:32:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNDU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM0NTMwNg==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r392345306", "bodyText": "it will assume that you know for sure that the entity exists: it's not correct to use this method if you're in doubt.\n\nYes, in fact this is my assumption also, I write my comment too quickly.\nOK, so you advise to stick to find(id) + remove(), as it's @FroMage that ask for a JPQL implementation I would like to see if he is on the same page (I'm pretty sure yes but there is no hurry)", "author": "loicmathieu", "createdAt": "2020-03-13T16:43:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNDU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU4OTEzNw==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r393589137", "bodyText": "If the Hibernate experts tell us to use one strategy, I won't object. Just make sure to add a comment to the impl explaining why we use what appears to be a supoptimal strategy, so that no-one wants to \"improve\" it later.", "author": "FroMage", "createdAt": "2020-03-17T10:46:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNDU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYyMzk0OQ==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r393623949", "bodyText": "yeah. We could explore some optimisations in Hibernate ORM; for example I was chatting with the team about this yesterday as I wondered why we don't do just the update statement at least for the simple cases in which we can proof there is no cascading requirements.\nTurns out the team sentiment is that while that would be possible, it's actually highly unlikely for an entity to satisfy such requirements in more realistic models than our simple demos, and  possibly not trivial to do.. so that explains why it doesn't do it but there certainly is the option to eventually improve on that.", "author": "Sanne", "createdAt": "2020-03-17T11:53:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNDU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYyNDU4Ng==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r393624586", "bodyText": "BTW another angle to this is that even if we did (hypotethically speaking) implement such an optimisation in ORM, you'd have no way to return true/false about knowing if the specific entity was actually existing before... so probably really not worth it.", "author": "Sanne", "createdAt": "2020-03-17T11:54:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNDU0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNDY4Mg==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r388814682", "bodyText": "Same comment for Id", "author": "FroMage", "createdAt": "2020-03-06T10:05:06Z", "path": "extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/PanacheMongoRepositoryBase.java", "diffHunk": "@@ -702,6 +702,17 @@ public default long deleteAll() {\n         throw MongoOperations.implementationInjectionMissing();\n     }\n \n+    /**\n+     * Delete an entity of this type by ID.\n+     *\n+     * @param id the ID of the entity to delete.\n+     * @return false if the entity was not deleted (not found).\n+     */\n+    @GenerateBridge\n+    public default boolean deleteById(Object id) {", "originalCommit": "16b01d980975849083086b4e9d365a43490db09f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk3NTgxOA==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r388975818", "bodyText": "done", "author": "loicmathieu", "createdAt": "2020-03-06T15:40:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNDY4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNDg2NA==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r388814864", "bodyText": "Same comment for the Id type.", "author": "FroMage", "createdAt": "2020-03-06T10:05:25Z", "path": "extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/reactive/ReactivePanacheMongoRepositoryBase.java", "diffHunk": "@@ -703,6 +704,17 @@\n         throw ReactiveMongoOperations.implementationInjectionMissing();\n     }\n \n+    /**\n+     * Delete an entity of this type by ID.\n+     *\n+     * @param id the ID of the entity to delete.\n+     * @return false if the entity was not deleted (not found).\n+     */\n+    @GenerateBridge\n+    public default Uni<Boolean> deleteById(Object id) {", "originalCommit": "16b01d980975849083086b4e9d365a43490db09f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk3NTg4OA==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r388975888", "bodyText": "done", "author": "loicmathieu", "createdAt": "2020-03-06T15:40:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNDg2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNTE1Ng==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r388815156", "bodyText": "See? This one seems optimal, so let's not be unfavourable to ORM ;)", "author": "FroMage", "createdAt": "2020-03-06T10:05:57Z", "path": "extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/reactive/runtime/ReactiveMongoOperations.java", "diffHunk": "@@ -551,6 +551,12 @@ private static Document sortToDocument(Sort sort) {\n         return collection.deleteMany(new Document()).map(deleteResult -> deleteResult.getDeletedCount());\n     }\n \n+    public static Uni<Boolean> deleteById(Class<?> entityClass, Object id) {\n+        ReactiveMongoCollection<?> collection = mongoCollection(entityClass);\n+        Document query = new Document().append(ID, id);\n+        return collection.deleteOne(query).map(results -> results.getDeletedCount() == 1);", "originalCommit": "16b01d980975849083086b4e9d365a43490db09f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkwMTk0Ng==", "url": "https://github.com/quarkusio/quarkus/pull/7527#discussion_r388901946", "bodyText": "Yes because the ID field name is always _id in MongoDB so it's easy to implement ;)", "author": "loicmathieu", "createdAt": "2020-03-06T13:29:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNTE1Ng=="}], "type": "inlineReview"}, {"oid": "cde8244eda9e0490faa49549b1e71dad1f9671cd", "url": "https://github.com/quarkusio/quarkus/commit/cde8244eda9e0490faa49549b1e71dad1f9671cd", "message": "fix: deleteById using a Query", "committedDate": "2020-03-06T15:38:23Z", "type": "forcePushed"}, {"oid": "dccc88bfb1249efd8e6100008880fea9f7a7f804", "url": "https://github.com/quarkusio/quarkus/commit/dccc88bfb1249efd8e6100008880fea9f7a7f804", "message": "fix: deleteById", "committedDate": "2020-03-13T10:21:26Z", "type": "forcePushed"}, {"oid": "060da5ccdb86ff620613fcb0935e9ac428db2e22", "url": "https://github.com/quarkusio/quarkus/commit/060da5ccdb86ff620613fcb0935e9ac428db2e22", "message": "Simplify Spring Data JPA deleteById implementation\n\nUse the newly added JpaOperations#deleteById", "committedDate": "2020-03-17T12:33:52Z", "type": "forcePushed"}, {"oid": "f415210e6568f384d6a6627867fe525e959d3102", "url": "https://github.com/quarkusio/quarkus/commit/f415210e6568f384d6a6627867fe525e959d3102", "message": "Hibernate with Panache deleteById()", "committedDate": "2020-03-17T14:25:52Z", "type": "commit"}, {"oid": "0e65e4131e135093905beafd6101d126636d268a", "url": "https://github.com/quarkusio/quarkus/commit/0e65e4131e135093905beafd6101d126636d268a", "message": "MongoDB with Panache deleteById()", "committedDate": "2020-03-17T14:25:52Z", "type": "commit"}, {"oid": "65ca54c2810db1ac72100db4a235554dc4faa6f3", "url": "https://github.com/quarkusio/quarkus/commit/65ca54c2810db1ac72100db4a235554dc4faa6f3", "message": "Simplify Spring Data JPA deleteById implementation\n\nUse the newly added JpaOperations#deleteById", "committedDate": "2020-03-17T14:25:52Z", "type": "commit"}, {"oid": "65ca54c2810db1ac72100db4a235554dc4faa6f3", "url": "https://github.com/quarkusio/quarkus/commit/65ca54c2810db1ac72100db4a235554dc4faa6f3", "message": "Simplify Spring Data JPA deleteById implementation\n\nUse the newly added JpaOperations#deleteById", "committedDate": "2020-03-17T14:25:52Z", "type": "forcePushed"}]}