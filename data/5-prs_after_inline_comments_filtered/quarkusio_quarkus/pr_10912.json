{"pr_number": 10912, "pr_title": "Handle static resources in vertx-http", "pr_createdAt": "2020-07-22T16:04:38Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/10912", "timeline": [{"oid": "73d39594b469d31240bcc2dc1fca2121f5bcdf9e", "url": "https://github.com/quarkusio/quarkus/commit/73d39594b469d31240bcc2dc1fca2121f5bcdf9e", "message": "Handle static resources in vertx-http\n\n- the logic was moved from RESTEasy standalone\n- thanks to that static resources are served even for vertx-web", "committedDate": "2020-07-22T16:03:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyNzQ1NQ==", "url": "https://github.com/quarkusio/quarkus/pull/10912#discussion_r459227455", "bodyText": "@stuartwdouglas @cescoffier I'm not quite sure the ThreadLocalHandler wrapper is still needed. It seems that the original thread-safety issue was fixed in vertx. The problem is that I have no idea how to test it properly...", "author": "mkouba", "createdAt": "2020-07-23T05:53:27Z", "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/StaticResourcesRecorder.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package io.quarkus.vertx.http.runtime;\n+\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import io.quarkus.runtime.annotations.Recorder;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.Route;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.StaticHandler;\n+\n+@Recorder\n+public class StaticResourcesRecorder {\n+\n+    public static final String META_INF_RESOURCES = \"META-INF/resources\";\n+\n+    private static volatile Set<String> knownPaths;\n+    private static volatile List<Path> hotDeploymentResourcePaths;\n+\n+    public static void setHotDeploymentResources(List<Path> resources) {\n+        hotDeploymentResourcePaths = resources;\n+    }\n+\n+    public void staticInit(Set<String> knownPaths) {\n+        StaticResourcesRecorder.knownPaths = knownPaths;\n+    }\n+\n+    public Consumer<Route> start() {\n+\n+        List<Handler<RoutingContext>> handlers = new ArrayList<>();\n+\n+        if (hotDeploymentResourcePaths != null && !hotDeploymentResourcePaths.isEmpty()) {\n+            for (Path resourcePath : hotDeploymentResourcePaths) {\n+                String root = resourcePath.toAbsolutePath().toString();\n+                ThreadLocalHandler staticHandler = new ThreadLocalHandler(new Supplier<Handler<RoutingContext>>() {", "originalCommit": "73d39594b469d31240bcc2dc1fca2121f5bcdf9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI2MjA2Mw==", "url": "https://github.com/quarkusio/quarkus/pull/10912#discussion_r459262063", "bodyText": "I can't remember why this was done. @stuartwdouglas any idea?", "author": "cescoffier", "createdAt": "2020-07-23T07:29:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyNzQ1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI2Mjk1Ng==", "url": "https://github.com/quarkusio/quarkus/pull/10912#discussion_r459262956", "bodyText": "If the underlying issue was fixed in Vert.x then it should be fine to remove.", "author": "stuartwdouglas", "createdAt": "2020-07-23T07:31:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyNzQ1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMwMTU0Nw==", "url": "https://github.com/quarkusio/quarkus/pull/10912#discussion_r459301547", "bodyText": "I believe that it was this one: vert-x3/vertx-web#1429, fixed in vertx 3.8.4.", "author": "mkouba", "createdAt": "2020-07-23T08:47:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyNzQ1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMwMTg0OQ==", "url": "https://github.com/quarkusio/quarkus/pull/10912#discussion_r459301849", "bodyText": "I will remove the wrapper and let the CI run...", "author": "mkouba", "createdAt": "2020-07-23T08:47:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyNzQ1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI2MjI5OA==", "url": "https://github.com/quarkusio/quarkus/pull/10912#discussion_r459262298", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // We don not use Integer.MAX on purpose to allow advanced users to register a route AFTER the default route\n          \n          \n            \n                // We do not use Integer.MAX on purpose to allow advanced users to register a route AFTER the default route", "author": "cescoffier", "createdAt": "2020-07-23T07:30:00Z", "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/VertxHttpRecorder.java", "diffHunk": "@@ -105,6 +105,9 @@\n \n     public static final String MAX_REQUEST_SIZE_KEY = \"io.quarkus.max-request-size\";\n \n+    // We don not use Integer.MAX on purpose to allow advanced users to register a route AFTER the default route", "originalCommit": "73d39594b469d31240bcc2dc1fca2121f5bcdf9e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9d408d892d1ecc95fad98952c7012dd4ee12cbb5", "url": "https://github.com/quarkusio/quarkus/commit/9d408d892d1ecc95fad98952c7012dd4ee12cbb5", "message": "Get rid of ThreadLocalHandler\n\n- used to workaround https://github.com/vert-x3/vertx-web/issues/1429", "committedDate": "2020-07-23T14:00:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzMzA4NQ==", "url": "https://github.com/quarkusio/quarkus/pull/10912#discussion_r459933085", "bodyText": "The order value of VertxHttpRecorder.DEFAULT_ROUTE_ORDER + 1 means that resteasy route (resource methods) are called after the default route. Unlike custom routes and @Route methods which are called before the default route. The problem with resteasy route is that it returns 404 for unknown resource and does not call RoutingContext.next(). And since we handle the static resources in the default route it would always return 404 for a request to a static route. @cescoffier @stuartwdouglas Do you think this approach is OK? If yes, I'm going to merge this PR...", "author": "mkouba", "createdAt": "2020-07-24T08:59:14Z", "path": "extensions/resteasy/deployment/src/main/java/io/quarkus/resteasy/deployment/ResteasyStandaloneBuildStep.java", "diffHunk": "@@ -170,31 +98,23 @@ public void boot(ShutdownContextBuildItem shutdown,\n         }\n         feature.produce(new FeatureBuildItem(Feature.RESTEASY));\n \n-        boolean isDefaultOrNullDeploymentPath = standalone.deploymentRootPath == null\n-                || standalone.deploymentRootPath.equals(\"/\");\n-        if (!isDefaultOrNullDeploymentPath) {\n-            // We need to register a special handler for non-default deployment path (specified as application path or resteasyConfig.path)\n-            Handler<RoutingContext> handler = recorder.vertxRequestHandler(vertx.getVertx(), beanContainer.getValue(),\n-                    executorBuildItem.getExecutorProxy(), httpConfiguration);\n-            // Exact match for resources matched to the root path\n-            routes.produce(new RouteBuildItem(standalone.deploymentRootPath, handler, false));\n-            String matchPath = standalone.deploymentRootPath;\n-            if (matchPath.endsWith(\"/\")) {\n-                matchPath += \"*\";\n-            } else {\n-                matchPath += \"/*\";\n-            }\n-            // Match paths that begin with the deployment path\n-            routes.produce(new RouteBuildItem(matchPath, handler, false));\n+        // Handler used for both the default and non-default deployment path (specified as application path or resteasyConfig.path)\n+        // Routes use the order VertxHttpRecorder.DEFAULT_ROUTE_ORDER + 1 to ensure the default route is called before the resteasy one\n+        Handler<RoutingContext> handler = recorder.vertxRequestHandler(vertx.getVertx(), beanContainer.getValue(),\n+                executorBuildItem.getExecutorProxy(), httpConfiguration);\n+        // Exact match for resources matched to the root path\n+        routes.produce(new RouteBuildItem(\n+                new BasicRoute(standalone.deploymentRootPath, VertxHttpRecorder.DEFAULT_ROUTE_ORDER + 1), handler));", "originalCommit": "9d408d892d1ecc95fad98952c7012dd4ee12cbb5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}