{"pr_number": 7902, "pr_title": "Make use of ExtendedMetadataBuilder in the Metrics extension", "pr_createdAt": "2020-03-17T08:03:38Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/7902", "timeline": [{"oid": "e4e0d6e293ecc6f51bce36fbd7cff73162f92ea3", "url": "https://github.com/quarkusio/quarkus/commit/e4e0d6e293ecc6f51bce36fbd7cff73162f92ea3", "message": "Make use of ExtendedMetadataBuilder", "committedDate": "2020-03-16T12:44:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUyMzMzNw==", "url": "https://github.com/quarkusio/quarkus/pull/7902#discussion_r393523337", "bodyText": "While we are at it, can we remove the use of lambdas in runtime code please?", "author": "geoand", "createdAt": "2020-03-17T08:50:40Z", "path": "extensions/smallrye-metrics/runtime/src/main/java/io/quarkus/smallrye/metrics/runtime/SmallRyeMetricsRecorder.java", "diffHunk": "@@ -558,28 +559,38 @@ private void micrometerJvmGcMetrics(MetricRegistry registry, ShutdownContext shu\n         if (!ImageInfo.inImageCode()) {\n             MicrometerGCMetrics gcMetrics = new MicrometerGCMetrics();\n \n-            registry.register(new ExtendedMetadata(\"jvm.gc.max.data.size\",\n-                    MetricType.GAUGE,\n-                    MetricUnits.BYTES,\n-                    \"Max size of old generation memory pool\",\n-                    true), new LambdaGauge(gcMetrics::getMaxDataSize));\n-            registry.register(new ExtendedMetadata(\"jvm.gc.live.data.size\",\n-                    MetricType.GAUGE,\n-                    MetricUnits.BYTES,\n-                    \"Size of old generation memory pool after a full GC\",\n-                    true), new LambdaGauge(gcMetrics::getLiveDataSize));\n-            registry.register(new ExtendedMetadata(\"jvm.gc.memory.promoted\",\n-                    MetricType.COUNTER,\n-                    MetricUnits.BYTES,\n-                    \"Count of positive increases in the size of the old generation memory pool before GC to after GC\",\n-                    true,\n-                    \"jvm_gc_memory_promoted_bytes_total\"), new LambdaCounter(gcMetrics::getPromotedBytes));\n-            registry.register(new ExtendedMetadata(\"jvm.gc.memory.allocated\",\n-                    MetricType.COUNTER,\n-                    MetricUnits.BYTES,\n-                    \"Incremented for an increase in the size of the young generation memory pool after one GC to before the next\",\n-                    true,\n-                    \"jvm_gc_memory_allocated_bytes_total\"), new LambdaCounter(gcMetrics::getAllocatedBytes));\n+            registry.register(new ExtendedMetadataBuilder()\n+                    .withName(\"jvm.gc.max.data.size\")\n+                    .withType(MetricType.GAUGE)\n+                    .withUnit(MetricUnits.BYTES)\n+                    .withDescription(\"Max size of old generation memory pool\")\n+                    .skipsScopeInOpenMetricsExportCompletely(true)\n+                    .build(), new LambdaGauge(gcMetrics::getMaxDataSize));", "originalCommit": "e4e0d6e293ecc6f51bce36fbd7cff73162f92ea3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUzMzgzNg==", "url": "https://github.com/quarkusio/quarkus/pull/7902#discussion_r393533836", "bodyText": "Do we really have to do that?\nsee #3732 (comment)\nI'm not an expert on this topic but it seems the memory penalty is negligible", "author": "jmartisk", "createdAt": "2020-03-17T09:09:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUyMzMzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUzNTQzMg==", "url": "https://github.com/quarkusio/quarkus/pull/7902#discussion_r393535432", "bodyText": "We don't have to do it, but it's been a general guideline for the runtime code of the project that we generally do try to follow.\nAFAIR, it's not only small memory penalty, it's also a small startup penalty. Of course one extension won't make a difference, but it's a case of death by a thousand cuts", "author": "geoand", "createdAt": "2020-03-17T09:12:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUyMzMzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY0Nzc3MA==", "url": "https://github.com/quarkusio/quarkus/pull/7902#discussion_r393647770", "bodyText": "Ok I'll do that then, but give me some time, hopefully will get round to it tomorrow :)", "author": "jmartisk", "createdAt": "2020-03-17T12:38:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUyMzMzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY1MTc2NA==", "url": "https://github.com/quarkusio/quarkus/pull/7902#discussion_r393651764", "bodyText": "Sure thing, no rush :)", "author": "geoand", "createdAt": "2020-03-17T12:45:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUyMzMzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM0OTYyNA==", "url": "https://github.com/quarkusio/quarkus/pull/7902#discussion_r394349624", "bodyText": "Is it normal that both the descriptions of this one and the one above are identical?", "author": "gsmet", "createdAt": "2020-03-18T13:35:34Z", "path": "extensions/smallrye-metrics/runtime/src/main/java/io/quarkus/smallrye/metrics/runtime/MicrometerGCMetrics.java", "diffHunk": "@@ -147,28 +148,34 @@ public void startWatchingNotifications() {\n                     gcPauseMaxValue.set(duration); // update the maximum GC length if needed\n                 }\n                 if (!registry.getGauges().containsKey(pauseSecondsMaxMetricID)) {\n-                    registry.register(new ExtendedMetadata(metricName + \".seconds.max\",\n-                            MetricType.GAUGE,\n-                            MetricUnits.NONE,\n-                            \"Time spent in GC pause\",\n-                            true),\n+                    registry.register(new ExtendedMetadataBuilder()\n+                            .withName(metricName + \".seconds.max\")\n+                            .withType(MetricType.GAUGE)\n+                            .withUnit(MetricUnits.NONE)\n+                            .withDescription(\"Time spent in GC pause\")\n+                            .skipsScopeInOpenMetricsExportCompletely(true)\n+                            .build(),\n                             new LambdaGauge(() -> mapForStoringMax.get(causeAndAction).doubleValue() / 1000.0), tags);\n                 }\n \n-                ExtendedMetadata countMetadata = new ExtendedMetadata(metricName + \".seconds.count\",\n-                        MetricType.COUNTER,\n-                        MetricUnits.NONE,\n-                        \"Time spent in GC pause\",\n-                        true,\n-                        metricName.replace(\".\", \"_\") + \"_seconds_count\");\n+                ExtendedMetadata countMetadata = new ExtendedMetadataBuilder()\n+                        .withName(metricName + \".seconds.count\")\n+                        .withType(MetricType.COUNTER)\n+                        .withUnit(MetricUnits.NONE)\n+                        .withDescription(\"Time spent in GC pause\")", "originalCommit": "e4e0d6e293ecc6f51bce36fbd7cff73162f92ea3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM4MDgzMg==", "url": "https://github.com/quarkusio/quarkus/pull/7902#discussion_r394380832", "bodyText": "I too find it a bit odd, but that's how Micrometer (in the latest version) does it, and we try to mimic it as closely as possible", "author": "jmartisk", "createdAt": "2020-03-18T14:19:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM0OTYyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM0OTg2Nw==", "url": "https://github.com/quarkusio/quarkus/pull/7902#discussion_r394349867", "bodyText": "And same here?", "author": "gsmet", "createdAt": "2020-03-18T13:35:57Z", "path": "extensions/smallrye-metrics/runtime/src/main/java/io/quarkus/smallrye/metrics/runtime/MicrometerGCMetrics.java", "diffHunk": "@@ -147,28 +148,34 @@ public void startWatchingNotifications() {\n                     gcPauseMaxValue.set(duration); // update the maximum GC length if needed\n                 }\n                 if (!registry.getGauges().containsKey(pauseSecondsMaxMetricID)) {\n-                    registry.register(new ExtendedMetadata(metricName + \".seconds.max\",\n-                            MetricType.GAUGE,\n-                            MetricUnits.NONE,\n-                            \"Time spent in GC pause\",\n-                            true),\n+                    registry.register(new ExtendedMetadataBuilder()\n+                            .withName(metricName + \".seconds.max\")\n+                            .withType(MetricType.GAUGE)\n+                            .withUnit(MetricUnits.NONE)\n+                            .withDescription(\"Time spent in GC pause\")\n+                            .skipsScopeInOpenMetricsExportCompletely(true)\n+                            .build(),\n                             new LambdaGauge(() -> mapForStoringMax.get(causeAndAction).doubleValue() / 1000.0), tags);\n                 }\n \n-                ExtendedMetadata countMetadata = new ExtendedMetadata(metricName + \".seconds.count\",\n-                        MetricType.COUNTER,\n-                        MetricUnits.NONE,\n-                        \"Time spent in GC pause\",\n-                        true,\n-                        metricName.replace(\".\", \"_\") + \"_seconds_count\");\n+                ExtendedMetadata countMetadata = new ExtendedMetadataBuilder()\n+                        .withName(metricName + \".seconds.count\")\n+                        .withType(MetricType.COUNTER)\n+                        .withUnit(MetricUnits.NONE)\n+                        .withDescription(\"Time spent in GC pause\")\n+                        .skipsScopeInOpenMetricsExportCompletely(true)\n+                        .withOpenMetricsKeyOverride(metricName.replace(\".\", \"_\") + \"_seconds_count\")\n+                        .build();\n                 registry.counter(countMetadata, tags).inc();\n \n-                registry.counter(new ExtendedMetadata(metricName + \".seconds.sum\",\n-                        MetricType.COUNTER,\n-                        MetricUnits.MILLISECONDS,\n-                        \"Time spent in GC pause\",\n-                        true,\n-                        metricName.replace(\".\", \"_\") + \"_seconds_sum\"), tags).inc(duration);\n+                registry.counter(new ExtendedMetadataBuilder()\n+                        .withName(metricName + \".seconds.sum\")\n+                        .withType(MetricType.COUNTER)\n+                        .withUnit(MetricUnits.MILLISECONDS)\n+                        .withDescription(\"Time spent in GC pause\")", "originalCommit": "e4e0d6e293ecc6f51bce36fbd7cff73162f92ea3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}