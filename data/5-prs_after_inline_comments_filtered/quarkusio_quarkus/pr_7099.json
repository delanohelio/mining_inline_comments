{"pr_number": 7099, "pr_title": "Add Mongo Connection Pool Metrics", "pr_createdAt": "2020-02-09T12:49:38Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/7099", "timeline": [{"oid": "e67bc06eadfe71b717042fb3f95e707c40dd7f1d", "url": "https://github.com/quarkusio/quarkus/commit/e67bc06eadfe71b717042fb3f95e707c40dd7f1d", "message": "Add Mongo Connection Pool Metrics\nAdd metrics for every opened connection pool regarding size and currently used connections", "committedDate": "2020-02-09T13:17:14Z", "type": "forcePushed"}, {"oid": "536d5838b2eb50ebc3773d7d77bb21c509e73797", "url": "https://github.com/quarkusio/quarkus/commit/536d5838b2eb50ebc3773d7d77bb21c509e73797", "message": "Add Mongo Connection Pool Metrics\nAdd metrics for every opened connection pool regarding size and currently used connections", "committedDate": "2020-02-09T16:19:58Z", "type": "forcePushed"}, {"oid": "bc0843988cdf7444cdadeddb74c1f57fa341d204", "url": "https://github.com/quarkusio/quarkus/commit/bc0843988cdf7444cdadeddb74c1f57fa341d204", "message": "Add Mongo Connection Pool Metrics\nAdd metrics for every opened connection pool regarding size and currently used connections", "committedDate": "2020-02-09T17:15:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgwMTU1MA==", "url": "https://github.com/quarkusio/quarkus/pull/7099#discussion_r376801550", "bodyText": "can we explicit the imports in use and not use start imports here?", "author": "machi1990", "createdAt": "2020-02-09T17:46:33Z", "path": "extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/MongoClientProcessor.java", "diffHunk": "@@ -24,20 +24,13 @@\n import com.mongodb.client.MongoClient;\n \n import io.quarkus.arc.Unremovable;\n-import io.quarkus.arc.deployment.BeanContainerListenerBuildItem;\n-import io.quarkus.arc.deployment.BeanDefiningAnnotationBuildItem;\n-import io.quarkus.arc.deployment.GeneratedBeanBuildItem;\n-import io.quarkus.arc.deployment.GeneratedBeanGizmoAdaptor;\n-import io.quarkus.arc.deployment.UnremovableBeanBuildItem;\n+import io.quarkus.arc.deployment.*;", "originalCommit": "bc0843988cdf7444cdadeddb74c1f57fa341d204", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgwMjkxNw==", "url": "https://github.com/quarkusio/quarkus/pull/7099#discussion_r376802917", "bodyText": "done", "author": "Postremus", "createdAt": "2020-02-09T18:06:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgwMTU1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgwMTU3OQ==", "url": "https://github.com/quarkusio/quarkus/pull/7099#discussion_r376801579", "bodyText": "same here about the usage of star imports..", "author": "machi1990", "createdAt": "2020-02-09T17:46:53Z", "path": "extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/MongoClientProcessor.java", "diffHunk": "@@ -24,20 +24,13 @@\n import com.mongodb.client.MongoClient;\n \n import io.quarkus.arc.Unremovable;\n-import io.quarkus.arc.deployment.BeanContainerListenerBuildItem;\n-import io.quarkus.arc.deployment.BeanDefiningAnnotationBuildItem;\n-import io.quarkus.arc.deployment.GeneratedBeanBuildItem;\n-import io.quarkus.arc.deployment.GeneratedBeanGizmoAdaptor;\n-import io.quarkus.arc.deployment.UnremovableBeanBuildItem;\n+import io.quarkus.arc.deployment.*;\n import io.quarkus.arc.processor.DotNames;\n+import io.quarkus.deployment.Capabilities;\n import io.quarkus.deployment.annotations.BuildProducer;\n import io.quarkus.deployment.annotations.BuildStep;\n import io.quarkus.deployment.annotations.Record;\n-import io.quarkus.deployment.builditem.ApplicationArchivesBuildItem;\n-import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n-import io.quarkus.deployment.builditem.ExtensionSslNativeSupportBuildItem;\n-import io.quarkus.deployment.builditem.FeatureBuildItem;\n-import io.quarkus.deployment.builditem.SslNativeConfigBuildItem;\n+import io.quarkus.deployment.builditem.*;", "originalCommit": "bc0843988cdf7444cdadeddb74c1f57fa341d204", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgwMTY1MA==", "url": "https://github.com/quarkusio/quarkus/pull/7099#discussion_r376801650", "bodyText": "let's get rid of wildcard imports..", "author": "machi1990", "createdAt": "2020-02-09T17:48:04Z", "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/metrics/MongoMetricsConnectionPoolListener.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package io.quarkus.mongodb.metrics;\n+\n+import org.eclipse.microprofile.metrics.*;\n+\n+import com.mongodb.connection.ServerId;\n+import com.mongodb.event.*;\n+", "originalCommit": "bc0843988cdf7444cdadeddb74c1f57fa341d204", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e80a4f32b29feb99acbdcb0ed496fc67222e7e52", "url": "https://github.com/quarkusio/quarkus/commit/e80a4f32b29feb99acbdcb0ed496fc67222e7e52", "message": "Add Mongo Connection Pool Metrics\nAdd metrics for every opened connection pool regarding size and currently used connections", "committedDate": "2020-02-09T18:06:04Z", "type": "forcePushed"}, {"oid": "80e67d1ff88ab884c78b72d10c2ece8d6f930471", "url": "https://github.com/quarkusio/quarkus/commit/80e67d1ff88ab884c78b72d10c2ece8d6f930471", "message": "Add Mongo Connection Pool Metrics\nAdd metrics for every opened connection pool regarding size and currently used connections", "committedDate": "2020-02-09T18:12:26Z", "type": "forcePushed"}, {"oid": "6008d96afde336e03b3d1ebd24e96b6c80b332aa", "url": "https://github.com/quarkusio/quarkus/commit/6008d96afde336e03b3d1ebd24e96b6c80b332aa", "message": "Add Mongo Connection Pool Metrics\nAdd metrics for every opened connection pool regarding size and currently used connections", "committedDate": "2020-02-09T18:46:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkwMTM4MA==", "url": "https://github.com/quarkusio/quarkus/pull/7099#discussion_r376901380", "bodyText": "Counters are only supposed to go up. If you need a metric that goes down as well, it should be a Gauge. This would confuse Prometheus, which only expects counters to go up.\nI suppose you could change ConnectionPoolCounter to ConnectionPoolGauge that implements Gauge instead of Counter, and to be able to call the inc and dec methods here, you can cast the retrieved metric to ConnectionPoolGauge", "author": "jmartisk", "createdAt": "2020-02-10T07:34:23Z", "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/metrics/MongoMetricsConnectionPoolListener.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package io.quarkus.mongodb.metrics;\n+\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.MetricType;\n+import org.eclipse.microprofile.metrics.Tag;\n+\n+import com.mongodb.connection.ServerId;\n+import com.mongodb.event.ConnectionAddedEvent;\n+import com.mongodb.event.ConnectionCheckedInEvent;\n+import com.mongodb.event.ConnectionCheckedOutEvent;\n+import com.mongodb.event.ConnectionPoolClosedEvent;\n+import com.mongodb.event.ConnectionPoolListener;\n+import com.mongodb.event.ConnectionPoolOpenedEvent;\n+import com.mongodb.event.ConnectionPoolWaitQueueEnteredEvent;\n+import com.mongodb.event.ConnectionPoolWaitQueueExitedEvent;\n+import com.mongodb.event.ConnectionRemovedEvent;\n+\n+import io.smallrye.metrics.MetricRegistries;\n+\n+public class MongoMetricsConnectionPoolListener implements ConnectionPoolListener {\n+    private final static String sizeName = \"mongodb.connection-pool.size\";\n+    private final static String checkedOutCountName = \"mongodb.connection-pool.checked-out-count\";\n+\n+    @Override\n+    public void connectionPoolOpened(ConnectionPoolOpenedEvent event) {\n+        Tag[] tags = createTags(event.getServerId());\n+\n+        Metadata sizeMetadata = Metadata.builder().withName(sizeName).withType(MetricType.COUNTER)\n+                .withDescription(\"the current size of the pool, including idle and and in-use members\").build();\n+        Metadata checkedOutCountMetadata = Metadata.builder().withName(checkedOutCountName).withType(MetricType.COUNTER)\n+                .withDescription(\" the current count of connections that are currently in use\").build();\n+\n+        getMetricRegistry().register(sizeMetadata, new ConnectionPoolCounter(), tags);\n+        getMetricRegistry().register(checkedOutCountMetadata, new ConnectionPoolCounter(), tags);\n+    }\n+\n+    @Override\n+    public void connectionPoolClosed(ConnectionPoolClosedEvent event) {\n+    }\n+\n+    @Override\n+    public void connectionCheckedOut(ConnectionCheckedOutEvent event) {\n+        Tag[] tags = createTags(event.getConnectionId().getServerId());\n+\n+        Counter checkedOutCount = getMetricRegistry().counter(checkedOutCountName, tags);\n+        checkedOutCount.inc();\n+    }\n+\n+    @Override\n+    public void connectionCheckedIn(ConnectionCheckedInEvent event) {\n+        Tag[] tags = createTags(event.getConnectionId().getServerId());\n+\n+        Counter checkedOutCount = getMetricRegistry().counter(checkedOutCountName, tags);\n+        checkedOutCount.inc(-1);\n+    }\n+\n+    @Override\n+    public void waitQueueEntered(ConnectionPoolWaitQueueEnteredEvent connectionPoolWaitQueueEnteredEvent) {\n+        // Not supported, since the event is deprecated and will be removed anyway\n+    }\n+\n+    @Override\n+    public void waitQueueExited(ConnectionPoolWaitQueueExitedEvent connectionPoolWaitQueueExitedEvent) {\n+        // Not supported, since the event is deprecated and will be removed anyway\n+    }\n+\n+    @Override\n+    public void connectionAdded(ConnectionAddedEvent event) {\n+        Tag[] tags = createTags(event.getConnectionId().getServerId());\n+\n+        Counter sizeCount = getMetricRegistry().counter(sizeName, tags);\n+        sizeCount.inc();\n+    }\n+\n+    @Override\n+    public void connectionRemoved(ConnectionRemovedEvent event) {\n+        Tag[] tags = createTags(event.getConnectionId().getServerId());\n+\n+        Counter sizeCount = getMetricRegistry().counter(sizeName, tags);\n+        sizeCount.inc(-1);", "originalCommit": "6008d96afde336e03b3d1ebd24e96b6c80b332aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkwMjg5NQ==", "url": "https://github.com/quarkusio/quarkus/pull/7099#discussion_r376902895", "bodyText": "IIUC this connection pool listener is needed for updating the metrics, but here you only explictly add it in a test, but how will it be added in production code? I suppose that when quarkus.mongodb.metrics.enabled is true, then we need to do this automatically. So something like this needs to be in the place in Quarkus codebase that produces Mongo clients (AbstractMongoClientProducer I think?) To be able to do that, AbstractMongoClientProducer will need to be able to see the value of quarkus.mongodb.metrics.enabled property, so I think it might need to be turned into a runtime property.\nThe test should just do the regular\n@Inject\nMongoClient mongoClient;\n\nand shouldn't customize the client by itself", "author": "jmartisk", "createdAt": "2020-02-10T07:39:45Z", "path": "extensions/mongodb-client/deployment/src/test/java/io/quarkus/mongodb/MongoMetricsTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package io.quarkus.mongodb;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.MetricID;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import com.mongodb.ConnectionString;\n+import com.mongodb.MongoClientSettings;\n+import com.mongodb.client.MongoClient;\n+\n+import io.quarkus.mongodb.metrics.MongoMetricsConnectionPoolListener;\n+import io.smallrye.metrics.MetricRegistries;\n+\n+public class MongoMetricsTest extends MongoTestBase {\n+\n+    private MongoClient client;\n+    private MetricRegistry metricRegistry;\n+\n+    @BeforeEach\n+    void init() {\n+        client = com.mongodb.client.MongoClients\n+                .create(MongoClientSettings.builder().applyConnectionString(new ConnectionString(getConnectionString()))\n+                        .applyToConnectionPoolSettings(\n+                                builder -> builder.addConnectionPoolListener(new MongoMetricsConnectionPoolListener()))", "originalCommit": "6008d96afde336e03b3d1ebd24e96b6c80b332aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkwNDk2NQ==", "url": "https://github.com/quarkusio/quarkus/pull/7099#discussion_r376904965", "bodyText": "What is this for? Is it something that the Mongo client library recognizes? I haven't been able to find what it is used for at runtime.", "author": "jmartisk", "createdAt": "2020-02-10T07:46:42Z", "path": "extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/MongoClientProcessor.java", "diffHunk": "@@ -313,4 +315,13 @@ HealthBuildItem addHealthCheck(MongoClientBuildTimeConfig buildTimeConfig) {\n         return new HealthBuildItem(\"io.quarkus.mongodb.health.MongoHealthCheck\",\n                 buildTimeConfig.healthEnabled, \"mongodb\");\n     }\n+\n+    @BuildStep\n+    void produceMetricsEnabledProperty(BuildProducer<SystemPropertyBuildItem> producer,\n+            MongoClientBuildTimeConfig buildTimeConfig, Capabilities capabilities) {\n+\n+        if (buildTimeConfig.metricsEnabled && capabilities.isCapabilityPresent(Capabilities.METRICS)) {\n+            producer.produce(new SystemPropertyBuildItem(\"mongodb.metrics.enabled\", \"true\"));", "originalCommit": "6008d96afde336e03b3d1ebd24e96b6c80b332aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkwNzkxOA==", "url": "https://github.com/quarkusio/quarkus/pull/7099#discussion_r376907918", "bodyText": "AFAIK the full list of metrics is known at build time? If so, we should register them here (including their tags). See https://github.com/quarkusio/quarkus/blob/master/extensions/agroal/deployment/src/main/java/io/quarkus/agroal/deployment/AgroalProcessor.java#L427 for example. The MongoMetricsConnectionPoolListener will then just update their values and won't have to take care of registering them at runtime", "author": "jmartisk", "createdAt": "2020-02-10T07:55:57Z", "path": "extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/MongoClientProcessor.java", "diffHunk": "@@ -313,4 +315,13 @@ HealthBuildItem addHealthCheck(MongoClientBuildTimeConfig buildTimeConfig) {\n         return new HealthBuildItem(\"io.quarkus.mongodb.health.MongoHealthCheck\",\n                 buildTimeConfig.healthEnabled, \"mongodb\");\n     }\n+\n+    @BuildStep\n+    void produceMetricsEnabledProperty(BuildProducer<SystemPropertyBuildItem> producer,\n+            MongoClientBuildTimeConfig buildTimeConfig, Capabilities capabilities) {", "originalCommit": "6008d96afde336e03b3d1ebd24e96b6c80b332aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkxMDY3Nw==", "url": "https://github.com/quarkusio/quarkus/pull/7099#discussion_r376910677", "bodyText": "AFAIK the full list of metrics is known at build time?\n\nWe do not necessarily know all tags.\nWe use the tags host and port here.\nIn case of the mongo+srv protocoll, the servers are resolved through dns entries.\nhttps://docs.mongodb.com/manual/reference/connection-string/#dns-seedlist-connection-format\nWe therefore would not know them during build time.", "author": "Postremus", "createdAt": "2020-02-10T08:05:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkwNzkxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkxNjIxNg==", "url": "https://github.com/quarkusio/quarkus/pull/7099#discussion_r376916216", "bodyText": "Ok, that's unfortunate. In that case, the metrics won't currently get automatically deregistered during reload in dev mode (until we include a commit for #7018), therefore MongoMetricsConnectionPoolListener will at least temporarily need to take into account the fact that after a reload, the metrics from previous run can still exist, and instead of just registering them, it should delete and re-register them if they exist, so that they can start again from zero", "author": "jmartisk", "createdAt": "2020-02-10T08:20:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkwNzkxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk3MDAxNQ==", "url": "https://github.com/quarkusio/quarkus/pull/7099#discussion_r376970015", "bodyText": "false is the default value for boolean so it could be omitted", "author": "loicmathieu", "createdAt": "2020-02-10T10:12:19Z", "path": "extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/MongoClientBuildTimeConfig.java", "diffHunk": "@@ -11,4 +11,10 @@\n      */\n     @ConfigItem(name = \"health.enabled\", defaultValue = \"true\")\n     public boolean healthEnabled;\n+\n+    /**\n+     * Whether or not metrics are published in case the smallrye-metrics extension is present.\n+     */\n+    @ConfigItem(name = \"metrics.enabled\", defaultValue = \"false\")", "originalCommit": "6008d96afde336e03b3d1ebd24e96b6c80b332aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7765f535dd13e409da367b55775c5165a009a260", "url": "https://github.com/quarkusio/quarkus/commit/7765f535dd13e409da367b55775c5165a009a260", "message": "Add Mongo Connection Pool Metrics\nAdd metrics for every opened connection pool regarding size and currently used connections", "committedDate": "2020-02-11T17:47:37Z", "type": "forcePushed"}, {"oid": "22c4ff36a962b51e08583f63be3cd9114b45c66d", "url": "https://github.com/quarkusio/quarkus/commit/22c4ff36a962b51e08583f63be3cd9114b45c66d", "message": "Add Mongo Connection Pool Metrics\nAdd metrics for every opened connection pool regarding size and currently used connections", "committedDate": "2020-02-11T17:49:03Z", "type": "forcePushed"}, {"oid": "20bab219614ec6e3692f2b7c54add3fe8ba7d5eb", "url": "https://github.com/quarkusio/quarkus/commit/20bab219614ec6e3692f2b7c54add3fe8ba7d5eb", "message": "Add Mongo Connection Pool Metrics\nAdd metrics for every opened connection pool regarding size and currently used connections", "committedDate": "2020-02-11T18:00:26Z", "type": "forcePushed"}, {"oid": "ece8ede97d8b3dfc5350c7ff7ef2bfc3c337a837", "url": "https://github.com/quarkusio/quarkus/commit/ece8ede97d8b3dfc5350c7ff7ef2bfc3c337a837", "message": "Add Mongo Connection Pool Metrics\nAdd metrics for every opened connection pool regarding size and currently used connections", "committedDate": "2020-02-11T18:15:36Z", "type": "forcePushed"}, {"oid": "ac5ab570215b64a08ff4e6d26c0d2d67d90bd167", "url": "https://github.com/quarkusio/quarkus/commit/ac5ab570215b64a08ff4e6d26c0d2d67d90bd167", "message": "Add Mongo Connection Pool Metrics\nAdd metrics for every opened connection pool regarding size and currently used connections", "committedDate": "2020-02-11T18:27:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3NjAwMQ==", "url": "https://github.com/quarkusio/quarkus/pull/7099#discussion_r378076001", "bodyText": "Yeah, I just noticed that I deactivated this test.", "author": "Postremus", "createdAt": "2020-02-12T07:23:20Z", "path": "extensions/mongodb-client/deployment/src/test/java/io/quarkus/mongodb/MongoMetricsTest.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package io.quarkus.mongodb;\n+\n+import javax.inject.Inject;\n+\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.mongodb.client.MongoClient;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class MongoMetricsTest extends MongoTestBase {\n+\n+    @Inject\n+    MongoClient client;\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class).addClasses(MongoTestBase.class))\n+            .withConfigurationResource(\"application-metrics-mongo.properties\");\n+\n+    @AfterEach\n+    void cleanup() {\n+        if (client != null) {\n+            client.close();\n+        }\n+    }\n+\n+    @Test\n+    void testMetricsInitialization() {\n+        // Metrics get registered once the driver opens the connection pool\n+        // The connection pool has a size of 0 by default\n+        //assertNull(getCounterValueOrNull(\"mongodb.connection-pool.size\", getTags()));\n+        //assertNull(getCounterValueOrNull(\"mongodb.connection-pool.checked-out-count\", getTags()));\n+\n+        // Just need to execute something so that an connection is opened\n+        //String name = client.listDatabaseNames().first();\n+\n+        //assertEquals(1L, getCounterValueOrNull(\"mongodb.connection-pool.size\", getTags()));\n+        //assertEquals(0L, getCounterValueOrNull(\"mongodb.connection-pool.checked-out-count\", getTags()));", "originalCommit": "ac5ab570215b64a08ff4e6d26c0d2d67d90bd167", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEwMTUxMA==", "url": "https://github.com/quarkusio/quarkus/pull/7099#discussion_r378101510", "bodyText": "Can you move the connectionPoolListenerProvider on a new line, this will be easier to read", "author": "loicmathieu", "createdAt": "2020-02-12T08:31:53Z", "path": "extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/MongoClientProcessor.java", "diffHunk": "@@ -75,9 +78,14 @@ UnremovableBeanBuildItem markBeansAsUnremovable() {\n     void configureRuntimeProperties(MongoClientRecorder recorder,\n             CodecProviderBuildItem codecProvider,\n             BsonDiscriminatorBuildItem bsonDiscriminator,\n-            MongodbConfig config) {\n+            MongodbConfig config, List<MongoConnectionPoolListenerBuildItem> connectionPoolListenerProvider) {", "originalCommit": "ac5ab570215b64a08ff4e6d26c0d2d67d90bd167", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEwMjgyMA==", "url": "https://github.com/quarkusio/quarkus/pull/7099#discussion_r378102820", "bodyText": "We usually name a build step method by what it does. Here you setup metrics or you add the listener so maybe setupMetrics or addConnectionPoolListener are better names.", "author": "loicmathieu", "createdAt": "2020-02-12T08:34:56Z", "path": "extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/MongoClientProcessor.java", "diffHunk": "@@ -332,4 +340,14 @@ HealthBuildItem addHealthCheck(MongoClientBuildTimeConfig buildTimeConfig) {\n         return new HealthBuildItem(\"io.quarkus.mongodb.health.MongoHealthCheck\",\n                 buildTimeConfig.healthEnabled, \"mongodb\");\n     }\n+\n+    @BuildStep\n+    void produceMongoClientSettings(", "originalCommit": "ac5ab570215b64a08ff4e6d26c0d2d67d90bd167", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEwMzczMA==", "url": "https://github.com/quarkusio/quarkus/pull/7099#discussion_r378103730", "bodyText": "constants are usally defined as private static final and are uppercase.\nprivate static final String SIZE_PROPERTY = \"mongodb.connection-pool.size\";\nSame for checkedOutCountName.", "author": "loicmathieu", "createdAt": "2020-02-12T08:36:52Z", "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/metrics/MongoMetricsConnectionPoolListener.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package io.quarkus.mongodb.metrics;\n+\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.Metric;\n+import org.eclipse.microprofile.metrics.MetricID;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.MetricType;\n+import org.eclipse.microprofile.metrics.Tag;\n+\n+import com.mongodb.connection.ServerId;\n+import com.mongodb.event.ConnectionAddedEvent;\n+import com.mongodb.event.ConnectionCheckedInEvent;\n+import com.mongodb.event.ConnectionCheckedOutEvent;\n+import com.mongodb.event.ConnectionPoolClosedEvent;\n+import com.mongodb.event.ConnectionPoolListener;\n+import com.mongodb.event.ConnectionPoolOpenedEvent;\n+import com.mongodb.event.ConnectionPoolWaitQueueEnteredEvent;\n+import com.mongodb.event.ConnectionPoolWaitQueueExitedEvent;\n+import com.mongodb.event.ConnectionRemovedEvent;\n+\n+import io.smallrye.metrics.MetricRegistries;\n+\n+public class MongoMetricsConnectionPoolListener implements ConnectionPoolListener {\n+    private final static String sizeName = \"mongodb.connection-pool.size\";", "originalCommit": "ac5ab570215b64a08ff4e6d26c0d2d67d90bd167", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bb0b60c573ab12adb4f2b7e03a28ba9d3dbcb554", "url": "https://github.com/quarkusio/quarkus/commit/bb0b60c573ab12adb4f2b7e03a28ba9d3dbcb554", "message": "Add Mongo Connection Pool Metrics\nAdd metrics for every opened connection pool regarding size and currently used connections", "committedDate": "2020-02-12T17:23:53Z", "type": "forcePushed"}, {"oid": "e9dc43a9513740e2bfcc40f90cfa657aaceb261a", "url": "https://github.com/quarkusio/quarkus/commit/e9dc43a9513740e2bfcc40f90cfa657aaceb261a", "message": "Add Mongo Connection Pool Metrics\nAdd metrics for every opened connection pool regarding size and currently used connections", "committedDate": "2020-02-12T17:44:26Z", "type": "forcePushed"}, {"oid": "fd6483773299c0aa3c138cbdd8cd1e4f318c46af", "url": "https://github.com/quarkusio/quarkus/commit/fd6483773299c0aa3c138cbdd8cd1e4f318c46af", "message": "Add Mongo Connection Pool Metrics\nAdd metrics for every opened connection pool regarding size and currently used connections", "committedDate": "2020-02-13T16:16:33Z", "type": "forcePushed"}, {"oid": "cd6ea078e2b7b295a0d16578d3885ff1f73a98d1", "url": "https://github.com/quarkusio/quarkus/commit/cd6ea078e2b7b295a0d16578d3885ff1f73a98d1", "message": "Add Mongo Connection Pool Metrics\nAdd metrics for every opened connection pool regarding size and currently used connections", "committedDate": "2020-02-20T20:17:39Z", "type": "forcePushed"}, {"oid": "be1c551cd833232212b40a8cb44449895d58d964", "url": "https://github.com/quarkusio/quarkus/commit/be1c551cd833232212b40a8cb44449895d58d964", "message": "Add Mongo Connection Pool Metrics\nAdd metrics for every opened connection pool regarding size and currently used connections", "committedDate": "2020-02-22T20:17:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyMzQ5NQ==", "url": "https://github.com/quarkusio/quarkus/pull/7099#discussion_r383323495", "bodyText": "Any reason this change was made or what it simply done by the formatter? Dittor for the similar changes below", "author": "geoand", "createdAt": "2020-02-24T15:14:24Z", "path": "extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/MongoClientProcessor.java", "diffHunk": "@@ -114,7 +124,7 @@ BsonDiscriminatorBuildItem collectBsonDiscriminators(CombinedIndexBuildItem inde\n      * Create a producer bean managing the lifecycle of the MongoClient.\n      * <p>\n      * The generated class will look like\n-     * ", "originalCommit": "be1c551cd833232212b40a8cb44449895d58d964", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyNjIyNQ==", "url": "https://github.com/quarkusio/quarkus/pull/7099#discussion_r383326225", "bodyText": "I think this might just have been to formatter, I will check.", "author": "Postremus", "createdAt": "2020-02-24T15:18:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyMzQ5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyNDQxMg==", "url": "https://github.com/quarkusio/quarkus/pull/7099#discussion_r383324412", "bodyText": "Please change this to not use lambdas. We try very hard to not use lambdas in runtime code because a small startup time and have a small memory footprint", "author": "geoand", "createdAt": "2020-02-24T15:15:50Z", "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/AbstractMongoClientProducer.java", "diffHunk": "@@ -295,6 +297,13 @@ private MongoClientSettings createMongoConfiguration(MongoClientConfig config) {\n         if (config.readPreference.isPresent()) {\n             settings.readPreference(ReadPreference.valueOf(config.readPreference.get()));\n         }\n+\n+        if (!connectionPoolListeners.isEmpty()) {\n+            settings.applyToConnectionPoolSettings(builder -> {", "originalCommit": "be1c551cd833232212b40a8cb44449895d58d964", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyNDUzMA==", "url": "https://github.com/quarkusio/quarkus/pull/7099#discussion_r383324530", "bodyText": "Same for method references :)", "author": "geoand", "createdAt": "2020-02-24T15:16:02Z", "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/AbstractMongoClientProducer.java", "diffHunk": "@@ -295,6 +297,13 @@ private MongoClientSettings createMongoConfiguration(MongoClientConfig config) {\n         if (config.readPreference.isPresent()) {\n             settings.readPreference(ReadPreference.valueOf(config.readPreference.get()));\n         }\n+\n+        if (!connectionPoolListeners.isEmpty()) {\n+            settings.applyToConnectionPoolSettings(builder -> {\n+                connectionPoolListeners.forEach(builder::addConnectionPoolListener);", "originalCommit": "be1c551cd833232212b40a8cb44449895d58d964", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f6d1871f4d0da8eb020d7aaf8e7d5ce0c27df43a", "url": "https://github.com/quarkusio/quarkus/commit/f6d1871f4d0da8eb020d7aaf8e7d5ce0c27df43a", "message": "Add Mongo Connection Pool Metrics\nAdd metrics for every opened connection pool regarding size and currently used connections", "committedDate": "2020-02-24T16:04:17Z", "type": "forcePushed"}, {"oid": "7770f681954a1fe3524e728becf1372bcaf36be3", "url": "https://github.com/quarkusio/quarkus/commit/7770f681954a1fe3524e728becf1372bcaf36be3", "message": "Add Mongo Connection Pool Metrics\nAdd metrics for every opened connection pool regarding size and currently used connections", "committedDate": "2020-02-24T19:19:42Z", "type": "commit"}, {"oid": "7770f681954a1fe3524e728becf1372bcaf36be3", "url": "https://github.com/quarkusio/quarkus/commit/7770f681954a1fe3524e728becf1372bcaf36be3", "message": "Add Mongo Connection Pool Metrics\nAdd metrics for every opened connection pool regarding size and currently used connections", "committedDate": "2020-02-24T19:19:42Z", "type": "forcePushed"}]}