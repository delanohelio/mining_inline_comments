{"pr_number": 11224, "pr_title": "Add a counter of log events per log level", "pr_createdAt": "2020-08-05T10:44:29Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/11224", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY1Nzk1Mw==", "url": "https://github.com/quarkusio/quarkus/pull/11224#discussion_r465657953", "bodyText": "I just noticed the logic is wrong, should be renamed totalLogCounter and always incremented.\ni.e. it should always be: vendor_log_total >= sum(vendor_log_total{level=\"*\"})", "author": "rquinio", "createdAt": "2020-08-05T11:25:06Z", "path": "core/runtime/src/main/java/io/quarkus/runtime/logging/LogMetricsHandler.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.runtime.logging;\n+\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.logging.Handler;\n+import java.util.logging.LogRecord;\n+\n+import org.jboss.logmanager.Level;\n+\n+public class LogMetricsHandler extends Handler {\n+\n+    AtomicLong defaultLogCounter;\n+    Map<Level, AtomicLong> logCounters;\n+\n+    public LogMetricsHandler(Map<Level, AtomicLong> logCounters, AtomicLong defaultLogCounter) {\n+        this.logCounters = logCounters;\n+        this.defaultLogCounter = defaultLogCounter;\n+    }\n+\n+    @Override\n+    public void publish(LogRecord record) {\n+        AtomicLong counter = logCounters.get(record.getLevel());\n+        if (counter != null) {\n+            counter.incrementAndGet();\n+        } else {\n+            defaultLogCounter.incrementAndGet();", "originalCommit": "796ad2ab9c3168e95d4df2bc1579322f2ce7161c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcyNTgyOA==", "url": "https://github.com/quarkusio/quarkus/pull/11224#discussion_r465725828", "bodyText": "Do we really need a separate metric for the total when it is possible to compute that by adding together all other metrics?", "author": "jmartisk", "createdAt": "2020-08-05T13:27:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY1Nzk1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgxMTE3NA==", "url": "https://github.com/quarkusio/quarkus/pull/11224#discussion_r465811174", "bodyText": "Indeed Grafana can take care of the sum, it's best no duplicate data.\nBut should we ignore events with non-standard levels (that's what Prometheus client is doing), or use a level=\"other\" ?", "author": "rquinio", "createdAt": "2020-08-05T15:27:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY1Nzk1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg1OTA4Mg==", "url": "https://github.com/quarkusio/quarkus/pull/11224#discussion_r465859082", "bodyText": "I've ignored the non-standard levels", "author": "rquinio", "createdAt": "2020-08-05T16:39:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY1Nzk1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgwMjk1Mw==", "url": "https://github.com/quarkusio/quarkus/pull/11224#discussion_r465802953", "bodyText": "These definitely ought to be final.", "author": "dmlloyd", "createdAt": "2020-08-05T15:15:33Z", "path": "core/runtime/src/main/java/io/quarkus/runtime/logging/LogMetricsHandler.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.runtime.logging;\n+\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.logging.Handler;\n+import java.util.logging.LogRecord;\n+\n+import org.jboss.logmanager.Level;\n+\n+public class LogMetricsHandler extends Handler {\n+\n+    AtomicLong defaultLogCounter;\n+    Map<Level, AtomicLong> logCounters;", "originalCommit": "796ad2ab9c3168e95d4df2bc1579322f2ce7161c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgwNzAzMw==", "url": "https://github.com/quarkusio/quarkus/pull/11224#discussion_r465807033", "bodyText": "Why make this optional when the memory usage is negligible and the CPU overhead would be only a small fraction of the cost of logging the message to any handler?  And why make it a build-time property?\nIMO it would be simpler and more expedient to leave it on all the time.", "author": "dmlloyd", "createdAt": "2020-08-05T15:21:09Z", "path": "core/runtime/src/main/java/io/quarkus/runtime/logging/LogBuildTimeConfig.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package io.quarkus.runtime.logging;\n+\n+import io.quarkus.runtime.annotations.ConfigItem;\n+import io.quarkus.runtime.annotations.ConfigPhase;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n+\n+@ConfigRoot(name = \"log\", phase = ConfigPhase.BUILD_AND_RUN_TIME_FIXED)\n+public class LogBuildTimeConfig {\n+\n+    /**\n+     * Whether or not logging metrics are published in case a metrics extension is present.\n+     */\n+    @ConfigItem(name = \"metrics.enabled\", defaultValue = \"false\")\n+    public boolean metricsEnabled;", "originalCommit": "796ad2ab9c3168e95d4df2bc1579322f2ce7161c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgzMjQ4OA==", "url": "https://github.com/quarkusio/quarkus/pull/11224#discussion_r465832488", "bodyText": "I tried to mimic the other extensions. Could there be some other logging-related metrics in the future ? Maybe the async queue size for syslog or gelf, etc. ?", "author": "rquinio", "createdAt": "2020-08-05T15:58:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgwNzAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3MDc3MA==", "url": "https://github.com/quarkusio/quarkus/pull/11224#discussion_r465870770", "bodyText": "Btw the activation may not only be about resource cost of computing them, but also a way for users to skip metrics they don't care about (since the time series will consume disk space in Prometheus DB).", "author": "rquinio", "createdAt": "2020-08-05T16:58:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgwNzAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE4MTM4Mw==", "url": "https://github.com/quarkusio/quarkus/pull/11224#discussion_r466181383", "bodyText": "With other extensions offering metrics, we decided to default to false too, so +1 from me to staying consistent", "author": "jmartisk", "createdAt": "2020-08-06T06:48:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgwNzAzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgxMjk3MA==", "url": "https://github.com/quarkusio/quarkus/pull/11224#discussion_r465812970", "bodyText": "This should be final.", "author": "dmlloyd", "createdAt": "2020-08-05T15:29:38Z", "path": "core/runtime/src/main/java/io/quarkus/runtime/logging/LogMetricsHandlerRecorder.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package io.quarkus.runtime.logging;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Consumer;\n+import java.util.logging.Handler;\n+\n+import org.jboss.logmanager.Level;\n+\n+import io.quarkus.runtime.RuntimeValue;\n+import io.quarkus.runtime.annotations.Recorder;\n+import io.quarkus.runtime.metrics.MetricsFactory;\n+\n+@Recorder\n+public class LogMetricsHandlerRecorder {\n+\n+    static final String METRIC_NAME = \"log.total\";\n+\n+    static final String METRIC_DESCRIPTION = \"Number of log events\";\n+\n+    static final List<Level> STANDARD_LEVELS = Arrays.asList(Level.FATAL, Level.ERROR, Level.WARN, Level.INFO, Level.DEBUG,\n+            Level.TRACE);\n+\n+    Map<Level, AtomicLong> logCounters = new HashMap<>();", "originalCommit": "796ad2ab9c3168e95d4df2bc1579322f2ce7161c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgxNDYzMA==", "url": "https://github.com/quarkusio/quarkus/pull/11224#discussion_r465814630", "bodyText": "In addition, I would map as many non-standard levels as possible to these counters, for example:\n    logCounters.put(java.util.logging.Level.WARNING, logCounters.get(Level.WARN));\nThis will increase the accuracy of the counts.  Note that level equivalency should be determined by the level's integer value.", "author": "dmlloyd", "createdAt": "2020-08-05T15:32:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgxMjk3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg1ODU1OA==", "url": "https://github.com/quarkusio/quarkus/pull/11224#discussion_r465858558", "bodyText": "Hmm I can't seem to put it final, it's always generating a setter which fails to compile (/LogMetricsHandlerRecorder$$accessor.java:[10,48] cannot assign a value to final variable logCounters", "author": "rquinio", "createdAt": "2020-08-05T16:38:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgxMjk3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg2MzgzMw==", "url": "https://github.com/quarkusio/quarkus/pull/11224#discussion_r465863833", "bodyText": "Ok had to also be static.\nI've used level integer as key to also catch any equivalent levels.", "author": "rquinio", "createdAt": "2020-08-05T16:47:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgxMjk3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgxMzA1OQ==", "url": "https://github.com/quarkusio/quarkus/pull/11224#discussion_r465813059", "bodyText": "This should be final.", "author": "dmlloyd", "createdAt": "2020-08-05T15:29:45Z", "path": "core/runtime/src/main/java/io/quarkus/runtime/logging/LogMetricsHandlerRecorder.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package io.quarkus.runtime.logging;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Consumer;\n+import java.util.logging.Handler;\n+\n+import org.jboss.logmanager.Level;\n+\n+import io.quarkus.runtime.RuntimeValue;\n+import io.quarkus.runtime.annotations.Recorder;\n+import io.quarkus.runtime.metrics.MetricsFactory;\n+\n+@Recorder\n+public class LogMetricsHandlerRecorder {\n+\n+    static final String METRIC_NAME = \"log.total\";\n+\n+    static final String METRIC_DESCRIPTION = \"Number of log events\";\n+\n+    static final List<Level> STANDARD_LEVELS = Arrays.asList(Level.FATAL, Level.ERROR, Level.WARN, Level.INFO, Level.DEBUG,\n+            Level.TRACE);\n+\n+    Map<Level, AtomicLong> logCounters = new HashMap<>();\n+\n+    /**\n+     * Counter for non-standard log levels\n+     */\n+    AtomicLong defaultLogCounter = new AtomicLong(0);", "originalCommit": "796ad2ab9c3168e95d4df2bc1579322f2ce7161c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgxOTI1Ng==", "url": "https://github.com/quarkusio/quarkus/pull/11224#discussion_r465819256", "bodyText": "I noticed a race condition in bootstrap: the log handler gets called with few INFO/DEBUG events (~15 with MetricsTestCase) before the metrics are themselves registered.\n=> I'll pre-fill the Map in the handler itself to solve this.", "author": "rquinio", "createdAt": "2020-08-05T15:38:55Z", "path": "core/runtime/src/main/java/io/quarkus/runtime/logging/LogMetricsHandlerRecorder.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package io.quarkus.runtime.logging;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Consumer;\n+import java.util.logging.Handler;\n+\n+import org.jboss.logmanager.Level;\n+\n+import io.quarkus.runtime.RuntimeValue;\n+import io.quarkus.runtime.annotations.Recorder;\n+import io.quarkus.runtime.metrics.MetricsFactory;\n+\n+@Recorder\n+public class LogMetricsHandlerRecorder {\n+\n+    static final String METRIC_NAME = \"log.total\";\n+\n+    static final String METRIC_DESCRIPTION = \"Number of log events\";\n+\n+    static final List<Level> STANDARD_LEVELS = Arrays.asList(Level.FATAL, Level.ERROR, Level.WARN, Level.INFO, Level.DEBUG,\n+            Level.TRACE);\n+\n+    Map<Level, AtomicLong> logCounters = new HashMap<>();\n+\n+    /**\n+     * Counter for non-standard log levels\n+     */\n+    AtomicLong defaultLogCounter = new AtomicLong(0);\n+\n+    public Consumer<MetricsFactory> registerMetrics() {\n+        return new Consumer<MetricsFactory>() {\n+            @Override\n+            public void accept(MetricsFactory metricsFactory) {\n+                metricsFactory.builder(METRIC_NAME).description(METRIC_DESCRIPTION)\n+                        .buildCounter(defaultLogCounter::get);\n+\n+                for (Level level : STANDARD_LEVELS) {\n+                    AtomicLong counter = new AtomicLong(0);\n+                    metricsFactory.builder(METRIC_NAME).description(METRIC_DESCRIPTION).tag(\"level\", level.getName())\n+                            .buildCounter(counter::get);\n+                    logCounters.put(level, counter);", "originalCommit": "796ad2ab9c3168e95d4df2bc1579322f2ce7161c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c0c416ecc778219d5653f8d1656107fbd4baa69c", "url": "https://github.com/quarkusio/quarkus/commit/c0c416ecc778219d5653f8d1656107fbd4baa69c", "message": "Add a counter of log events per log level\n\n- Register a logging handler that counts log events\n- Add a tag/label for each standard jboss-logging levels\n- Add a build-time activation config quarkus.log.metrics.enabled=true", "committedDate": "2020-08-05T16:37:45Z", "type": "forcePushed"}, {"oid": "7548757ccb510032bf99165ef68ec2f53a406e1d", "url": "https://github.com/quarkusio/quarkus/commit/7548757ccb510032bf99165ef68ec2f53a406e1d", "message": "Add a counter of log events per log level\n\n- Register a logging handler that counts log events\n- Add a tag/label for each standard jboss-logging levels\n- Add a build-time activation config quarkus.log.metrics.enabled=true", "committedDate": "2020-08-05T16:46:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY0Mjc4Mg==", "url": "https://github.com/quarkusio/quarkus/pull/11224#discussion_r466642782", "bodyText": "I was just having a peek, not an expert of this area but I'm wondering:\nshouldn't such code prefer using a LongAdder over and AtomicLong ?", "author": "Sanne", "createdAt": "2020-08-06T19:38:28Z", "path": "core/runtime/src/main/java/io/quarkus/runtime/logging/LogMetricsHandler.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.quarkus.runtime.logging;\n+\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.logging.Handler;\n+import java.util.logging.LogRecord;\n+\n+/**\n+ * Measures the number of log messages based on logger configurations quarkus.log.level and quarkus.log.category.*.level\n+ * <p>\n+ * It should reflect the values of the handler that logs the most, since best practice is to align its level with the root\n+ * level.\n+ */\n+public class LogMetricsHandler extends Handler {\n+\n+    final Map<Integer, AtomicLong> logCounters;", "originalCommit": "7548757ccb510032bf99165ef68ec2f53a406e1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY4MzgyNg==", "url": "https://github.com/quarkusio/quarkus/pull/11224#discussion_r466683826", "bodyText": "Good point !", "author": "rquinio", "createdAt": "2020-08-06T21:01:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY0Mjc4Mg=="}], "type": "inlineReview"}, {"oid": "c57e57a96bb234cc09cc60444a9b2e5444f8b645", "url": "https://github.com/quarkusio/quarkus/commit/c57e57a96bb234cc09cc60444a9b2e5444f8b645", "message": "Add a counter of log events per log level\n\n- Register a logging handler that counts log events\n- Add a tag/label for each standard jboss-logging levels\n- Add a build-time activation config quarkus.log.metrics.enabled=true", "committedDate": "2020-08-06T20:59:51Z", "type": "forcePushed"}, {"oid": "ffbe14e4c28b8048dd7a64e20011a9c40211707b", "url": "https://github.com/quarkusio/quarkus/commit/ffbe14e4c28b8048dd7a64e20011a9c40211707b", "message": "Add a counter of log events per log level\n\n- Register a logging handler that counts log events\n- Add a tag/label for each standard jboss-logging levels\n- Add a build-time activation config quarkus.log.metrics.enabled=true", "committedDate": "2020-08-08T21:58:29Z", "type": "commit"}, {"oid": "ffbe14e4c28b8048dd7a64e20011a9c40211707b", "url": "https://github.com/quarkusio/quarkus/commit/ffbe14e4c28b8048dd7a64e20011a9c40211707b", "message": "Add a counter of log events per log level\n\n- Register a logging handler that counts log events\n- Add a tag/label for each standard jboss-logging levels\n- Add a build-time activation config quarkus.log.metrics.enabled=true", "committedDate": "2020-08-08T21:58:29Z", "type": "forcePushed"}]}