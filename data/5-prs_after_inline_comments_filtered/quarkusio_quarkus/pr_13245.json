{"pr_number": 13245, "pr_title": "Reorder codec registry configuration so that custom codecs are registered first", "pr_createdAt": "2020-11-11T21:17:24Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/13245", "timeline": [{"oid": "4806a55a8a1f873a6abf7ca68d20e972e9f2dac8", "url": "https://github.com/quarkusio/quarkus/commit/4806a55a8a1f873a6abf7ca68d20e972e9f2dac8", "message": "reorder codec registry configuration so that custom codecs are registered first\n\nfixes #13236", "committedDate": "2020-11-11T21:16:07Z", "type": "commit"}, {"oid": "566aae929c7ceb309f2f67f6b11c2cc2f8243ea3", "url": "https://github.com/quarkusio/quarkus/commit/566aae929c7ceb309f2f67f6b11c2cc2f8243ea3", "message": "run the formatter", "committedDate": "2020-11-11T21:33:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkwMTE2MA==", "url": "https://github.com/quarkusio/quarkus/pull/13245#discussion_r521901160", "bodyText": "is it correct? providers provided by pojoCodecProviderBuilder will be registered  after defaultCodecRegistry- this will be the same situation as it was with custom providers :(", "author": "oxelad", "createdAt": "2020-11-12T07:57:04Z", "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClients.java", "diffHunk": "@@ -299,6 +269,39 @@ private MongoClientSettings createMongoConfiguration(MongoClientConfig config) {\n         return settings.build();\n     }\n \n+    private void configureCodecRegistry(CodecRegistry defaultCodecRegistry, MongoClientSettings.Builder settings) {\n+        List<CodecProvider> providers = new ArrayList<>();\n+        if (!mongoClientSupport.getCodecProviders().isEmpty()) {\n+            providers.addAll(getCodecProviders(mongoClientSupport.getCodecProviders()));\n+        }\n+        // add pojo codec provider with automatic capabilities\n+        // it always needs to be the last codec provided\n+        PojoCodecProvider.Builder pojoCodecProviderBuilder = PojoCodecProvider.builder()\n+                .automatic(true)\n+                .conventions(Conventions.DEFAULT_CONVENTIONS);\n+        // register bson discriminators\n+        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+        for (String bsonDiscriminator : mongoClientSupport.getBsonDiscriminators()) {\n+            try {\n+                pojoCodecProviderBuilder\n+                        .register(ClassModel.builder(Class.forName(bsonDiscriminator, true, classLoader))\n+                                .enableDiscriminator(true).build());\n+            } catch (ClassNotFoundException e) {\n+                // Ignore\n+            }\n+        }\n+        // register property codec provider\n+        if (!mongoClientSupport.getPropertyCodecProviders().isEmpty()) {\n+            pojoCodecProviderBuilder.register(getPropertyCodecProviders(mongoClientSupport.getPropertyCodecProviders())\n+                    .toArray(new PropertyCodecProvider[0]));\n+        }\n+        CodecRegistry registry = !providers.isEmpty() ?\n+                fromRegistries(fromProviders(providers), defaultCodecRegistry,\n+                        fromProviders(pojoCodecProviderBuilder.build())) :\n+                fromRegistries(defaultCodecRegistry, fromProviders(pojoCodecProviderBuilder.build()));", "originalCommit": "4806a55a8a1f873a6abf7ca68d20e972e9f2dac8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE1NDc1Mg==", "url": "https://github.com/quarkusio/quarkus/pull/13245#discussion_r522154752", "bodyText": "In theory, no.  Custom defined codecs, as I understand how this is all formulated, are in the providers list where POJO codecs are registered with pojoCodecProviderBuilder.  So the codecs for entities will be resolved last, yes, but in practice this will only be a problem if the defaultCodecRegistry somehow has a codec for your entity types which seems a bit of a stretch.  But should you wish to provide your own codec for a non-entity type, this should be sufficient.", "author": "evanchooly", "createdAt": "2020-11-12T14:39:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkwMTE2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkwNzM1MA==", "url": "https://github.com/quarkusio/quarkus/pull/13245#discussion_r521907350", "bodyText": "it doesn't relate to the issue of the codec ordering, but ... suppressing of exception is not good- developers will spend a lot of time to understand why some logic doesn't work when it should be, it will be not so easy to find that something was broken because of class-load-issue... better will be to log it...\nsorry for this my 2 cents", "author": "oxelad", "createdAt": "2020-11-12T08:07:16Z", "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClients.java", "diffHunk": "@@ -299,6 +269,39 @@ private MongoClientSettings createMongoConfiguration(MongoClientConfig config) {\n         return settings.build();\n     }\n \n+    private void configureCodecRegistry(CodecRegistry defaultCodecRegistry, MongoClientSettings.Builder settings) {\n+        List<CodecProvider> providers = new ArrayList<>();\n+        if (!mongoClientSupport.getCodecProviders().isEmpty()) {\n+            providers.addAll(getCodecProviders(mongoClientSupport.getCodecProviders()));\n+        }\n+        // add pojo codec provider with automatic capabilities\n+        // it always needs to be the last codec provided\n+        PojoCodecProvider.Builder pojoCodecProviderBuilder = PojoCodecProvider.builder()\n+                .automatic(true)\n+                .conventions(Conventions.DEFAULT_CONVENTIONS);\n+        // register bson discriminators\n+        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+        for (String bsonDiscriminator : mongoClientSupport.getBsonDiscriminators()) {\n+            try {\n+                pojoCodecProviderBuilder\n+                        .register(ClassModel.builder(Class.forName(bsonDiscriminator, true, classLoader))\n+                                .enableDiscriminator(true).build());\n+            } catch (ClassNotFoundException e) {\n+                // Ignore", "originalCommit": "4806a55a8a1f873a6abf7ca68d20e972e9f2dac8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkzMTIxNg==", "url": "https://github.com/quarkusio/quarkus/pull/13245#discussion_r521931216", "bodyText": "@oxelad this error should never occurs as the class has been discover in a previous build step so it should be safe to ignore the error", "author": "loicmathieu", "createdAt": "2020-11-12T08:43:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkwNzM1MA=="}], "type": "inlineReview"}]}