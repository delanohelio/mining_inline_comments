{"pr_number": 7510, "pr_title": "feat: Hibernate with Panache ranged query", "pr_createdAt": "2020-03-02T10:39:03Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/7510", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUyOTM0NQ==", "url": "https://github.com/quarkusio/quarkus/pull/7510#discussion_r389529345", "bodyText": "Let's be thorough and test the rest of the methods that should throw.", "author": "FroMage", "createdAt": "2020-03-09T08:58:40Z", "path": "integration-tests/hibernate-orm-panache/src/main/java/io/quarkus/it/panache/TestEndpoint.java", "diffHunk": "@@ -851,6 +859,47 @@ private void testPaging(PanacheQuery<Person> query) {\n \n         Assertions.assertEquals(7, query.count());\n         Assertions.assertEquals(3, query.pageCount());\n+\n+        // mix page with range\n+        persons = query.page(0, 3).range(0, 1).list();\n+        Assertions.assertEquals(2, persons.size());\n+        Assertions.assertEquals(\"stef0\", persons.get(0).name);\n+        Assertions.assertEquals(\"stef1\", persons.get(1).name);\n+    }\n+\n+    private void testRange(PanacheQuery<Person> query) {\n+        List<Person> persons = query.range(0, 2).list();\n+        Assertions.assertEquals(3, persons.size());\n+        Assertions.assertEquals(\"stef0\", persons.get(0).name);\n+        Assertions.assertEquals(\"stef1\", persons.get(1).name);\n+        Assertions.assertEquals(\"stef2\", persons.get(2).name);\n+\n+        persons = query.range(3, 5).list();\n+        Assertions.assertEquals(3, persons.size());\n+        Assertions.assertEquals(\"stef3\", persons.get(0).name);\n+        Assertions.assertEquals(\"stef4\", persons.get(1).name);\n+        Assertions.assertEquals(\"stef5\", persons.get(2).name);\n+\n+        persons = query.range(6, 8).list();\n+        Assertions.assertEquals(1, persons.size());\n+        Assertions.assertEquals(\"stef6\", persons.get(0).name);\n+\n+        persons = query.range(8, 12).list();\n+        Assertions.assertEquals(0, persons.size());\n+\n+        // mix range with page\n+        try {\n+            // invalid\n+            query.range(0, 2).nextPage();", "originalCommit": "397387847299b79dd9b88b606845e5bb62d6c1ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY4NTE2NA==", "url": "https://github.com/quarkusio/quarkus/pull/7510#discussion_r389685164", "bodyText": "I added more test, and discover a missing check so worth it ;)", "author": "loicmathieu", "createdAt": "2020-03-09T13:47:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUyOTM0NQ=="}], "type": "inlineReview"}, {"oid": "611dcd5601d7a09a246e331acb13a3328a8fdcc8", "url": "https://github.com/quarkusio/quarkus/commit/611dcd5601d7a09a246e331acb13a3328a8fdcc8", "message": "feat: MongoDB with Panache ranged query", "committedDate": "2020-03-09T13:40:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwNjIxMw==", "url": "https://github.com/quarkusio/quarkus/pull/7510#discussion_r389706213", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public <T extends Entity> PanacheQuery<T> range(int startIdx, int lastIdx);\n          \n          \n            \n                public <T extends Entity> PanacheQuery<T> range(int startIndex, int lastIndex);", "author": "FroMage", "createdAt": "2020-03-09T14:05:55Z", "path": "extensions/panache/hibernate-orm-panache/runtime/src/main/java/io/quarkus/hibernate/orm/panache/PanacheQuery.java", "diffHunk": "@@ -116,6 +116,16 @@\n      */\n     public Page page();\n \n+    /**\n+     * Switch the query to use a fixed range (start index - last index) instead of a page.\n+     * As the range is fixed, subsequent pagination of the query is not possible.\n+     *\n+     * @param startIdx the index of the first element, starting at 0\n+     * @param lastIdx the index of the last element\n+     * @return this query, modified\n+     */\n+    public <T extends Entity> PanacheQuery<T> range(int startIdx, int lastIdx);", "originalCommit": "611dcd5601d7a09a246e331acb13a3328a8fdcc8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwNzAyMg==", "url": "https://github.com/quarkusio/quarkus/pull/7510#discussion_r389707022", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public <T extends Entity> PanacheQuery<T> range(int startIdx, int lastIdx);\n          \n          \n            \n                public <T extends Entity> PanacheQuery<T> range(int startIndex, int lastIndex);", "author": "FroMage", "createdAt": "2020-03-09T14:06:35Z", "path": "extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/PanacheQuery.java", "diffHunk": "@@ -116,6 +116,16 @@\n      */\n     public Page page();\n \n+    /**\n+     * Switch the query to use a fixed range (start index - last index) instead of a page.\n+     * As the range is fixed, subsequent pagination of the query is not possible.\n+     *\n+     * @param startIdx the index of the first element, starting at 0\n+     * @param lastIdx the index of the last element\n+     * @return this query, modified\n+     */\n+    public <T extends Entity> PanacheQuery<T> range(int startIdx, int lastIdx);", "originalCommit": "611dcd5601d7a09a246e331acb13a3328a8fdcc8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwNzI4Ng==", "url": "https://github.com/quarkusio/quarkus/pull/7510#discussion_r389707286", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public <T extends Entity> ReactivePanacheQuery<T> range(int startIdx, int lastIdx);\n          \n          \n            \n                public <T extends Entity> ReactivePanacheQuery<T> range(int startIndex, int lastIndex);", "author": "FroMage", "createdAt": "2020-03-09T14:06:49Z", "path": "extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/reactive/ReactivePanacheQuery.java", "diffHunk": "@@ -110,6 +110,16 @@\n      */\n     public Page page();\n \n+    /**\n+     * Switch the query to use a fixed range (start index - last index) instead of a page.\n+     * As the range is fixed, subsequent pagination of the query is not possible.\n+     *\n+     * @param startIdx the index of the first element, starting at 0\n+     * @param lastIdx the index of the last element\n+     * @return this query, modified\n+     */\n+    public <T extends Entity> ReactivePanacheQuery<T> range(int startIdx, int lastIdx);", "originalCommit": "611dcd5601d7a09a246e331acb13a3328a8fdcc8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwODAyNA==", "url": "https://github.com/quarkusio/quarkus/pull/7510#discussion_r389708024", "bodyText": "Please index everywhere here :)", "author": "FroMage", "createdAt": "2020-03-09T14:07:28Z", "path": "extensions/panache/panache-common/runtime/src/main/java/io/quarkus/panache/common/Range.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package io.quarkus.panache.common;\n+\n+/**\n+ * <p>\n+ * Utility class to represent ranging information. Range instances are immutable.\n+ * </p>\n+ *\n+ * <p>\n+ * Usage:\n+ * </p>\n+ *\n+ * <code><pre>\n+ * Range range = Range.of(0, 5);\n+ * </pre></code>\n+ */\n+public class Range {\n+    private final int startIdx;\n+    private final int lastIdx;\n+\n+    public Range(int startIdx, int lastIdx) {", "originalCommit": "611dcd5601d7a09a246e331acb13a3328a8fdcc8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f99b8536e42808ae2b5b8b6490068a2b42ca5144", "url": "https://github.com/quarkusio/quarkus/commit/f99b8536e42808ae2b5b8b6490068a2b42ca5144", "message": "feat: MongoDB with Panache ranged query", "committedDate": "2020-03-09T14:47:25Z", "type": "forcePushed"}, {"oid": "c0e4a19932dee2dfb47d5a2f73a97081d3beefab", "url": "https://github.com/quarkusio/quarkus/commit/c0e4a19932dee2dfb47d5a2f73a97081d3beefab", "message": "feat: Hibernate with Panache ranged query", "committedDate": "2020-03-19T13:32:49Z", "type": "commit"}, {"oid": "52251c8ce47452e7e67bebd3d7cfb1e87ea72bf2", "url": "https://github.com/quarkusio/quarkus/commit/52251c8ce47452e7e67bebd3d7cfb1e87ea72bf2", "message": "feat: MongoDB with Panache ranged query", "committedDate": "2020-03-19T13:32:49Z", "type": "commit"}, {"oid": "52251c8ce47452e7e67bebd3d7cfb1e87ea72bf2", "url": "https://github.com/quarkusio/quarkus/commit/52251c8ce47452e7e67bebd3d7cfb1e87ea72bf2", "message": "feat: MongoDB with Panache ranged query", "committedDate": "2020-03-19T13:32:49Z", "type": "forcePushed"}]}