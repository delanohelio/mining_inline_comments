{"pr_number": 13410, "pr_title": "Fix cache exception handling", "pr_createdAt": "2020-11-21T01:33:38Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/13410", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA1MDI1MA==", "url": "https://github.com/quarkusio/quarkus/pull/13410#discussion_r528050250", "bodyText": "@ben-manes I need your help with this line. When it is executed, Caffeine is logging a warning about an Exception thrown during asynchronous load (the old warning I already got rid of before). Why is this happening while the future was removed from the cache with the previous line?", "author": "gwenneg", "createdAt": "2020-11-21T01:40:01Z", "path": "extensions/cache/runtime/src/main/java/io/quarkus/cache/runtime/caffeine/CaffeineCache.java", "diffHunk": "@@ -68,9 +68,15 @@ public CaffeineCache(CaffeineCacheInfo cacheInfo) {\n         CompletableFuture<Object> newCacheValue = new CompletableFuture<Object>();\n         CompletableFuture<Object> existingCacheValue = cache.asMap().putIfAbsent(key, newCacheValue);\n         if (existingCacheValue == null) {\n-            Object value = valueLoader.apply(key);\n-            newCacheValue.complete(NullValueConverter.toCacheValue(value));\n-            return unwrapCacheValue(newCacheValue);\n+            try {\n+                Object value = valueLoader.apply(key);\n+                newCacheValue.complete(NullValueConverter.toCacheValue(value));\n+                return unwrapCacheValue(newCacheValue);\n+            } catch (Throwable t) {\n+                cache.asMap().remove(key, newCacheValue);\n+                newCacheValue.completeExceptionally(t);", "originalCommit": "81ca429c79d40b87ca8c9c56361203f30d02d980", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA1MDc2OA==", "url": "https://github.com/quarkusio/quarkus/pull/13410#discussion_r528050768", "bodyText": "I suppose because there is no way to remove a whenComplete callback. I didn\u2019t think the put added the handler but would need to review the asMap code", "author": "ben-manes", "createdAt": "2020-11-21T01:43:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA1MDI1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA3NzY0MA==", "url": "https://github.com/quarkusio/quarkus/pull/13410#discussion_r528077640", "bodyText": "Yes, this is due to the callback and that cannot be removed by the CompletableFuture api. There is no mechanism for the callback to be aware of the situation for how a removal occurred and to no-op. At best it can safeguard against multiple invocations. The code in question.\nThe logic in this callback is to try to update the entry's metadata (weight, expiration) on success, try to remove it on failure, and record the statistics. If the entry was replaced or removed prior to completion then the conditional writes fail, but the statistics are still valid so they are recorded. For example an in-progress load that is removed still counts towards the load time and having started due to a cache miss. Similarly, LoadingCache.refresh(key) might load but fail to replace the entry if it was explicit removed, such as after when the system of record was updated and the cache invalidated.\nTrying to special case the logger to sometimes log and other times not based on guessing the likely user interaction is error prone. If the use-case is to warn because users forget to handle errors, an ignoring to log when an in-flight future was explicitly inserted doesn't somehow negate error handling. I would agree the cache isn't responsible for a user's error handling, but unfortunately real world code means we have to be mindful that most will forget and silently ignore production errors.\nI suspect the cleanest solution is simply to disable the logger. That is a simple configuration or api call and matches how loggers are intended to be used. Otherwise, you will have to restore the workaround to suppress the error from the cache's perspective in order to silence this message.", "author": "ben-manes", "createdAt": "2020-11-21T05:52:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA1MDI1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIzMDI5Nw==", "url": "https://github.com/quarkusio/quarkus/pull/13410#discussion_r528230297", "bodyText": "Thanks for your very detailed answer @ben-manes!\nI don't really like the idea of this extension changing the behavior of Caffeine application-wide, so I restored the workaround to suppress the warning.", "author": "gwenneg", "createdAt": "2020-11-21T18:56:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA1MDI1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIzMDQyNw==", "url": "https://github.com/quarkusio/quarkus/pull/13410#discussion_r528230427", "bodyText": "That is true, except I thought (maybe incorrectly) that Quarkus shades Caffeine so it would only apply to your extension if you disable the logger at the shaded path? I might be completely wrong, in which case you're very much right.", "author": "ben-manes", "createdAt": "2020-11-21T18:58:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA1MDI1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIzMjI2OA==", "url": "https://github.com/quarkusio/quarkus/pull/13410#discussion_r528232268", "bodyText": "You're probably right, I don't know everything about Quarkus and this specific feature is unknown to me. I'll see if I can find some information about it.", "author": "gwenneg", "createdAt": "2020-11-21T19:16:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA1MDI1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIzMjkwOQ==", "url": "https://github.com/quarkusio/quarkus/pull/13410#discussion_r528232909", "bodyText": "We don't shade Caffeine.", "author": "gsmet", "createdAt": "2020-11-21T19:23:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA1MDI1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIzMzIxNg==", "url": "https://github.com/quarkusio/quarkus/pull/13410#discussion_r528233216", "bodyText": "Thanks @gsmet! Then the current fix is the good one.", "author": "gwenneg", "createdAt": "2020-11-21T19:26:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA1MDI1MA=="}], "type": "inlineReview"}, {"oid": "f6cf8414a3bfd7c96599abdd6d6e22c601e10669", "url": "https://github.com/quarkusio/quarkus/commit/f6cf8414a3bfd7c96599abdd6d6e22c601e10669", "message": "Fix cache exception handling", "committedDate": "2020-11-21T18:51:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODM2OTU0Ng==", "url": "https://github.com/quarkusio/quarkus/pull/13410#discussion_r528369546", "bodyText": "Not sure I understand this particular one?\nIt looks a bit like dark magic, we should at least add comments about what we're doing here.", "author": "gsmet", "createdAt": "2020-11-22T17:50:21Z", "path": "extensions/cache/runtime/src/main/java/io/quarkus/cache/runtime/CacheResultInterceptor.java", "diffHunk": "@@ -59,8 +60,15 @@ public Object apply(Object k) {\n                 }\n             }\n \n-        } catch (CacheException e) {\n-            if (e.getCause() instanceof Exception) {\n+        } catch (ExecutionException e) {\n+            if (e.getCause() instanceof CacheException) {\n+                CacheException cacheException = (CacheException) e.getCause();\n+                if (cacheException.getCause() instanceof Exception) {", "originalCommit": "f6cf8414a3bfd7c96599abdd6d6e22c601e10669", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODM4NzkxOQ==", "url": "https://github.com/quarkusio/quarkus/pull/13410#discussion_r528387919", "bodyText": "It's not as dark as it seems :)\nExceptions happening during a cache computation are thrown from a CompletableFuture execution and are therefore encapsulated into an ExecutionException automatically. Since we use the functional interface Function<Object, Object> to pass the value loader to the cache, we also need to encapsulate any exception thrown during a cache computation into a CacheException extends RuntimeException because Exception cannot be thrown from a functional interface.\nSo if an IOException is thrown during a cache computation, it is encapsulated into a CacheException because of the functional interface used for the computation and again the CacheException is encapsulated into an ExecutionException because of the CompletableFuture.\nThis is the most likely scenario, but there are other possibilities as well (like the JVM throwing an Error) which are taken care of with a bunch of else blocks.", "author": "gwenneg", "createdAt": "2020-11-22T18:48:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODM2OTU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODM4ODExNw==", "url": "https://github.com/quarkusio/quarkus/pull/13410#discussion_r528388117", "bodyText": "I will add comments btw.", "author": "gwenneg", "createdAt": "2020-11-22T18:49:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODM2OTU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODM5ODg5Ng==", "url": "https://github.com/quarkusio/quarkus/pull/13410#discussion_r528398896", "bodyText": "@gsmet The exception handling code is now commented.", "author": "gwenneg", "createdAt": "2020-11-22T20:20:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODM2OTU0Ng=="}], "type": "inlineReview"}, {"oid": "9e3dd92a9e1b7f19ad045c4b7bbe4df01e2d15a6", "url": "https://github.com/quarkusio/quarkus/commit/9e3dd92a9e1b7f19ad045c4b7bbe4df01e2d15a6", "message": "Fix cache exception handling", "committedDate": "2020-11-22T20:19:12Z", "type": "commit"}, {"oid": "9e3dd92a9e1b7f19ad045c4b7bbe4df01e2d15a6", "url": "https://github.com/quarkusio/quarkus/commit/9e3dd92a9e1b7f19ad045c4b7bbe4df01e2d15a6", "message": "Fix cache exception handling", "committedDate": "2020-11-22T20:19:12Z", "type": "forcePushed"}]}