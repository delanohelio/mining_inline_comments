{"pr_number": 11450, "pr_title": "Quarkus CLI 2.0", "pr_createdAt": "2020-08-18T15:13:56Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/11450", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4OTcwMA==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r472289700", "bodyText": "Looks like brackets are no longer a thing in 2020 :)", "author": "gastaldi", "createdAt": "2020-08-18T15:34:59Z", "path": "devtools/cli/src/main/java/io/quarkus/cli/Create.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package io.quarkus.cli;\n+\n+import java.io.File;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+\n+import io.quarkus.cli.core.ExitCodes;\n+import io.quarkus.devtools.commands.CreateProject;\n+import io.quarkus.devtools.project.BuildTool;\n+import io.quarkus.devtools.project.codegen.SourceType;\n+import io.quarkus.platform.tools.config.QuarkusPlatformConfig;\n+import picocli.CommandLine;\n+\n+@CommandLine.Command(name = \"create\", sortOptions = false, mixinStandardHelpOptions = true, description = \"Create a new quarkus project.\")\n+public class Create implements Callable<Integer> {\n+\n+    @CommandLine.Option(names = { \"-g\", \"--groupId\" }, order = 1, paramLabel = \"GID\", description = \"The groupId for project\")\n+    String groupId = \"org.acme\";\n+\n+    @CommandLine.Option(names = { \"-a\",\n+            \"--artifactId\" }, order = 2, paramLabel = \"AID\", description = \"The artifactId for project\")\n+    String artifactId = \"my-project\";\n+\n+    @CommandLine.Option(names = { \"-v\",\n+            \"--proj-version\" }, order = 3, paramLabel = \"TAG\", description = \"The version for project\")\n+    String version = \"1.0-SNAPSHOT\";\n+\n+    @CommandLine.Option(names = { \"-0\",\n+            \"--skipExample\" }, order = 4, description = \"Generate without example code.\")\n+    boolean skipExample = false;\n+\n+    @CommandLine.ArgGroup()\n+    TargetBuildTool targetBuildTool = new TargetBuildTool();\n+\n+    static class TargetBuildTool {\n+        @CommandLine.Option(names = { \"--maven\" }, order = 5, description = \"Create a Maven project. (default)\")\n+        boolean maven = false;\n+\n+        @CommandLine.Option(names = { \"--gradle\" }, order = 6, description = \"Create a Gradle project.\")\n+        boolean gradle = false;\n+\n+        @CommandLine.Option(names = {\n+                \"--grade-kotlin-dsl\" }, order = 7, description = \"Create a Gradle Kotlin DSL project.\")\n+        boolean gradleKotlinDsl = false;\n+    }\n+\n+    @CommandLine.ArgGroup()\n+    TargetLanguage language = new TargetLanguage();\n+\n+    static class TargetLanguage {\n+        @CommandLine.Option(names = {\n+                \"--java\" }, order = 8, description = \"Generate Java examples. (default)\")\n+        boolean java = false;\n+\n+        @CommandLine.Option(names = {\n+                \"--kotlin\" }, order = 9, description = \"Generate Kotlin examples.\")\n+        boolean kotlin = false;\n+\n+        @CommandLine.Option(names = {\n+                \"--scala\" }, order = 10, description = \"Generate Scala examples.\")\n+        boolean scala = false;\n+    }\n+\n+    @CommandLine.Parameters(arity = \"0..1\", paramLabel = \"EXTENSION\", description = \"extension to add to project\")\n+    Set<String> extensions;\n+\n+    @CommandLine.ParentCommand\n+    QuarkusCli parent;\n+\n+    @CommandLine.Spec\n+    CommandLine.Model.CommandSpec spec;\n+\n+    @Override\n+    public Integer call() throws Exception {\n+        try {\n+            File projectDirectory = new File(System.getProperty(\"user.dir\"));\n+\n+            File projectRoot = new File(projectDirectory, artifactId);\n+            if (projectRoot.exists()) {\n+                spec.commandLine().getErr().println(\"Unable to create the project, \" +\n+                        \"the directory \" + projectRoot.getAbsolutePath() + \" already exists\");\n+                return ExitCodes.FAILURE;\n+            }\n+\n+            SourceType sourceType = SourceType.JAVA;\n+            if (targetBuildTool.gradleKotlinDsl)\n+                sourceType = SourceType.KOTLIN;\n+            else if (language.scala)\n+                sourceType = SourceType.SCALA;\n+            else if (language.kotlin)\n+                sourceType = SourceType.KOTLIN;\n+            else if (extensions != null && !extensions.isEmpty())\n+                sourceType = CreateProject.determineSourceType(extensions);\n+\n+            BuildTool buildTool = BuildTool.MAVEN;\n+            if (targetBuildTool.gradle)\n+                buildTool = BuildTool.GRADLE;\n+            else if (targetBuildTool.gradleKotlinDsl)\n+                buildTool = BuildTool.GRADLE_KOTLIN_DSL;", "originalCommit": "97b103628d2c368027fdacf03d4487a1a5dfc720", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI5MDU1Mw==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r472290553", "bodyText": "Seriously?", "author": "patriot1burke", "createdAt": "2020-08-18T15:36:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4OTcwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI5MTc3NQ==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r472291775", "bodyText": "Well, yeah :) IMHO it looks better with brackets :)", "author": "gastaldi", "createdAt": "2020-08-18T15:38:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4OTcwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI5MjQ0NQ==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r472292445", "bodyText": "It's all fun and games until someone adds a new line and wonders why it doesn't work as it should \ud83d\ude09", "author": "gastaldi", "createdAt": "2020-08-18T15:38:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4OTcwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxMjYxNg==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r472312616", "bodyText": "I just don't agree. :) We're not coding in 'vi' or 'ed' anymore.", "author": "patriot1burke", "createdAt": "2020-08-18T16:08:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4OTcwMA=="}], "type": "inlineReview"}, {"oid": "ff26046b839d0845653e4ef750597977fd7eb60b", "url": "https://github.com/quarkusio/quarkus/commit/ff26046b839d0845653e4ef750597977fd7eb60b", "message": "quarkus cli 2.0\n\ncli 2.0 list and rename flags\n\ncli 2.0 version and list usage\n\ncli 2.0 sort = false list options\n\ncli 2.0 PATTERN\n\ncli 2.0 remove aesh from bom\n\nfinish cli 2.0 tests", "committedDate": "2020-08-20T00:22:00Z", "type": "forcePushed"}, {"oid": "b65a79b9245df5c4782ce73073b1b5bd931fcb88", "url": "https://github.com/quarkusio/quarkus/commit/b65a79b9245df5c4782ce73073b1b5bd931fcb88", "message": "quarkus cli 2.0\n\ncli 2.0 list and rename flags\n\ncli 2.0 version and list usage\n\ncli 2.0 sort = false list options\n\ncli 2.0 PATTERN\n\ncli 2.0 remove aesh from bom\n\nfinish cli 2.0 tests\n\nfix compilation error", "committedDate": "2020-08-20T01:19:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY4ODc4Mg==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r473688782", "bodyText": "@aloubyansky @maxandersen @patriot1burke , this command is not going to be compatible with gradle. This is why for the add/remove/list extension, I would delegate the call to the wrapper plugin to make this command compatible on both mvn and gradle. If there is no wrapper, then you could fallback to this and if it target a gradle project fail with instruction.", "author": "ia3andy", "createdAt": "2020-08-20T07:23:37Z", "path": "devtools/cli/src/main/java/io/quarkus/cli/Add.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package io.quarkus.cli;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+\n+import io.quarkus.devtools.commands.AddExtensions;\n+import io.quarkus.devtools.commands.data.QuarkusCommandOutcome;\n+import io.quarkus.devtools.project.QuarkusProject;\n+import io.quarkus.platform.tools.config.QuarkusPlatformConfig;\n+import picocli.CommandLine;\n+\n+@CommandLine.Command(name = \"add\", mixinStandardHelpOptions = false, description = \"Add extension(s) to current project.\")\n+public class Add implements Callable<Integer> {\n+\n+    @CommandLine.Option(names = { \"-h\", \"--help\" }, usageHelp = true, description = \"display this help message\")\n+    boolean usageHelpRequested;\n+\n+    @CommandLine.Parameters(arity = \"1\", paramLabel = \"EXTENSION\", description = \"extension to add to project\")\n+    Set<String> extensions;\n+\n+    @CommandLine.ParentCommand\n+    QuarkusCli parent;\n+\n+    @CommandLine.Spec\n+    CommandLine.Model.CommandSpec spec;\n+\n+    @Override\n+    public Integer call() {\n+        Path projectDirectory = Paths.get(System.getProperty(\"user.dir\"));\n+        try {\n+            QuarkusProject quarkusProject = QuarkusProject.resolveExistingProject(projectDirectory,", "originalCommit": "b65a79b9245df5c4782ce73073b1b5bd931fcb88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY5NTQwMg==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r473695402", "bodyText": "And even more now that I see you already implemented an ExecuteUtil :)", "author": "ia3andy", "createdAt": "2020-08-20T07:31:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY4ODc4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk1ODI4Mw==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r473958283", "bodyText": "Can you explain why it won't work?", "author": "patriot1burke", "createdAt": "2020-08-20T13:13:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY4ODc4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDAyMzcyNw==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r474023727", "bodyText": "sure @patriot1burke, because Gradle API is not available outside of a gradle plugin, without it, we are not able to properly list extensions (neither add and remove which rely on the list): https://github.com/quarkusio/quarkus/blob/master/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/buildfile/GenericGradleBuildFile.java", "author": "ia3andy", "createdAt": "2020-08-20T14:25:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY4ODc4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUxMzI5MA==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r474513290", "bodyText": "can confirm it doesn't work:\n quarkus add hibernate-orm-panache\nUnable to add extension: This feature is not yet implemented outside of the Gradle Plugin.", "author": "maxandersen", "createdAt": "2020-08-21T08:21:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY4ODc4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY5MTc3Ng==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r473691776", "bodyText": "@patriot1burke fyi sourceType is not used by codestarts, you could remove it. What you will need to do though, is to add the language extension when --kotlin or --scala is selected.", "author": "ia3andy", "createdAt": "2020-08-20T07:27:14Z", "path": "devtools/cli/src/main/java/io/quarkus/cli/Create.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package io.quarkus.cli;\n+\n+import java.io.File;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+\n+import io.quarkus.devtools.commands.CreateProject;\n+import io.quarkus.devtools.project.BuildTool;\n+import io.quarkus.devtools.project.codegen.SourceType;\n+import io.quarkus.platform.tools.config.QuarkusPlatformConfig;\n+import picocli.CommandLine;\n+\n+@CommandLine.Command(name = \"create\", sortOptions = false, mixinStandardHelpOptions = false, description = \"Create a new quarkus project.\")\n+public class Create implements Callable<Integer> {\n+\n+    @CommandLine.Option(names = { \"-h\", \"--help\" }, usageHelp = true, order = 0, description = \"display this help message\")\n+    boolean usageHelpRequested;\n+\n+    @CommandLine.Option(names = { \"-g\", \"--group-id\" }, order = 1, paramLabel = \"GID\", description = \"The groupId for project\")\n+    String groupId = \"org.acme\";\n+\n+    @CommandLine.Option(names = { \"-a\",\n+            \"--artifact-id\" }, order = 2, paramLabel = \"AID\", description = \"The artifactId for project\")\n+    String artifactId = \"my-project\";\n+\n+    @CommandLine.Option(names = { \"-v\",\n+            \"--version\" }, order = 3, paramLabel = \"TAG\", description = \"The version for project\")\n+    String version = \"1.0-SNAPSHOT\";\n+\n+    @CommandLine.Option(names = { \"-0\",\n+            \"--empty\" }, order = 4, description = \"Generate without example code.\")\n+    boolean empty = false;\n+\n+    @CommandLine.ArgGroup()\n+    TargetBuildTool targetBuildTool = new TargetBuildTool();\n+\n+    static class TargetBuildTool {\n+        @CommandLine.Option(names = { \"--maven\" }, order = 5, description = \"Create a Maven project. (default)\")\n+        boolean maven = false;\n+\n+        @CommandLine.Option(names = { \"--gradle\" }, order = 6, description = \"Create a Gradle project.\")\n+        boolean gradle = false;\n+\n+        @CommandLine.Option(names = {\n+                \"--grade-kotlin-dsl\" }, order = 7, description = \"Create a Gradle Kotlin DSL project.\")\n+        boolean gradleKotlinDsl = false;\n+    }\n+\n+    @CommandLine.ArgGroup()\n+    TargetLanguage language = new TargetLanguage();\n+\n+    static class TargetLanguage {\n+        @CommandLine.Option(names = {\n+                \"--java\" }, order = 8, description = \"Generate Java examples. (default)\")\n+        boolean java = false;\n+\n+        @CommandLine.Option(names = {\n+                \"--kotlin\" }, order = 9, description = \"Generate Kotlin examples.\")\n+        boolean kotlin = false;\n+\n+        @CommandLine.Option(names = {\n+                \"--scala\" }, order = 10, description = \"Generate Scala examples.\")\n+        boolean scala = false;\n+    }\n+\n+    @CommandLine.Parameters(arity = \"0..1\", paramLabel = \"EXTENSION\", description = \"extension to add to project\")\n+    Set<String> extensions;\n+\n+    @CommandLine.ParentCommand\n+    QuarkusCli parent;\n+\n+    @CommandLine.Spec\n+    CommandLine.Model.CommandSpec spec;\n+\n+    @Override\n+    public Integer call() throws Exception {\n+        try {\n+            File projectDirectory = new File(System.getProperty(\"user.dir\"));\n+\n+            File projectRoot = new File(projectDirectory, artifactId);\n+            if (projectRoot.exists()) {\n+                spec.commandLine().getErr().println(\"Unable to create the project, \" +\n+                        \"the directory \" + projectRoot.getAbsolutePath() + \" already exists\");\n+                return CommandLine.ExitCode.SOFTWARE;\n+            }\n+\n+            SourceType sourceType = SourceType.JAVA;\n+            if (targetBuildTool.gradleKotlinDsl)\n+                sourceType = SourceType.KOTLIN;\n+            else if (language.scala)\n+                sourceType = SourceType.SCALA;\n+            else if (language.kotlin)\n+                sourceType = SourceType.KOTLIN;\n+            else if (extensions != null && !extensions.isEmpty())\n+                sourceType = CreateProject.determineSourceType(extensions);\n+\n+            BuildTool buildTool = BuildTool.MAVEN;\n+            if (targetBuildTool.gradle)\n+                buildTool = BuildTool.GRADLE;\n+            else if (targetBuildTool.gradleKotlinDsl)\n+                buildTool = BuildTool.GRADLE_KOTLIN_DSL;\n+\n+            boolean status = new CreateProject(projectRoot.toPath(),\n+                    QuarkusPlatformConfig.getGlobalDefault().getPlatformDescriptor())\n+                            .buildTool(buildTool)\n+                            .groupId(groupId)\n+                            .artifactId(artifactId)\n+                            .version(version)\n+                            .sourceType(sourceType)", "originalCommit": "b65a79b9245df5c4782ce73073b1b5bd931fcb88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk1ODc1Nw==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r473958757", "bodyText": "Don't know what \"add the language extension\" means...", "author": "patriot1burke", "createdAt": "2020-08-20T13:14:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY5MTc3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDAyMTAzOQ==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r474021039", "bodyText": "@patriot1burke:\n\njava -> default\nkotlin -> extension quarkus-kotlin\nscala -> extension quarkus-scala\n\nin the end the --kotlin or --scala are just shortcuts.", "author": "ia3andy", "createdAt": "2020-08-20T14:21:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY5MTc3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEwMDAwNw==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r475100007", "bodyText": "@ia3andy Just add quarkus-kotlin/scala extension to create command?  That will trigger appropriate codestart?", "author": "patriot1burke", "createdAt": "2020-08-22T15:11:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY5MTc3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0MDQ4OA==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r476240488", "bodyText": "yes!", "author": "ia3andy", "createdAt": "2020-08-25T07:39:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY5MTc3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ2MDAzMw==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r474460033", "bodyText": "Why not \"VERSION\" ? Tag is different.\nSame with AID and GID wouldn't it be more intuitive to list as ARTIFACT and GROUP ?", "author": "maxandersen", "createdAt": "2020-08-21T07:17:51Z", "path": "devtools/cli/src/main/java/io/quarkus/cli/Create.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package io.quarkus.cli;\n+\n+import java.io.File;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+\n+import io.quarkus.devtools.commands.CreateProject;\n+import io.quarkus.devtools.project.BuildTool;\n+import io.quarkus.devtools.project.codegen.SourceType;\n+import io.quarkus.platform.tools.config.QuarkusPlatformConfig;\n+import picocli.CommandLine;\n+\n+@CommandLine.Command(name = \"create\", sortOptions = false, mixinStandardHelpOptions = false, description = \"Create a new quarkus project.\")\n+public class Create implements Callable<Integer> {\n+\n+    @CommandLine.Option(names = { \"-h\", \"--help\" }, usageHelp = true, order = 0, description = \"display this help message\")\n+    boolean usageHelpRequested;\n+\n+    @CommandLine.Option(names = { \"-g\", \"--group-id\" }, order = 1, paramLabel = \"GID\", description = \"The groupId for project\")\n+    String groupId = \"org.acme\";\n+\n+    @CommandLine.Option(names = { \"-a\",\n+            \"--artifact-id\" }, order = 2, paramLabel = \"AID\", description = \"The artifactId for project\")\n+    String artifactId = \"my-project\";\n+\n+    @CommandLine.Option(names = { \"-v\",\n+            \"--version\" }, order = 3, paramLabel = \"TAG\", description = \"The version for project\")", "originalCommit": "b65a79b9245df5c4782ce73073b1b5bd931fcb88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYzMTM1Mg==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r474631352", "bodyText": "Formatting of usage.  If you want to keep 80 char width, then things have to shortened.  Otherwise it looks like total crap.", "author": "patriot1burke", "createdAt": "2020-08-21T11:10:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ2MDAzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ4MTg3OQ==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r474481879", "bodyText": "mvn quarkus:dev have nice colors quarkus dev got none.\nSomething gets stripped.", "author": "maxandersen", "createdAt": "2020-08-21T07:44:22Z", "path": "devtools/cli/src/main/java/io/quarkus/cli/Dev.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package io.quarkus.cli;\n+\n+import java.util.concurrent.Callable;\n+\n+import io.quarkus.cli.core.ExecuteUtil;\n+import picocli.CommandLine;\n+\n+@CommandLine.Command(name = \"dev\", mixinStandardHelpOptions = false, description = \"Execute project in live coding dev mode\")\n+public class Dev implements Callable<Integer> {\n+    @CommandLine.Option(names = { \"-h\", \"--help\" }, usageHelp = true, description = \"display this help message\")\n+    boolean usageHelpRequested;\n+\n+    @CommandLine.ParentCommand\n+    QuarkusCli parent;\n+\n+    @CommandLine.Spec\n+    CommandLine.Model.CommandSpec spec;\n+\n+    @Override\n+    public Integer call() throws Exception {\n+        try {\n+            return ExecuteUtil.executeBuildsystem(null, \"quarkus:dev\", \"quarkusDev\", spec.commandLine());", "originalCommit": "b65a79b9245df5c4782ce73073b1b5bd931fcb88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYzMTAxNQ==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r474631015", "bodyText": "Not sure how to fix that yet.  Its just a Process call to maven.  I don't know if maven detects that and doesn't put out colors.", "author": "patriot1burke", "createdAt": "2020-08-21T11:09:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ4MTg3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ5Njc0OA==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r474496748", "bodyText": "quarkus rm hibernate in a project with just quarkus-hibernate-orm-panache still complains about having to be precise:\n\u274c Multiple extensions matching 'hibernate'\n     * io.quarkus:quarkus-hibernate-orm\n     * io.quarkus:quarkus-hibernate-reactive\n     * io.quarkus:quarkus-hibernate-envers\n     * io.quarkus:quarkus-hibernate-orm-panache\n     * io.quarkus:quarkus-hibernate-orm-rest-data-panache\n     * io.quarkus:quarkus-hibernate-orm-panache-kotlin\n     * io.quarkus:quarkus-hibernate-search-elasticsearch\n     * io.quarkus:quarkus-hibernate-validator\n     Be more specific e.g using the exact name or the full GAV.", "author": "maxandersen", "createdAt": "2020-08-21T08:01:43Z", "path": "devtools/cli/src/main/java/io/quarkus/cli/Remove.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package io.quarkus.cli;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+\n+import io.quarkus.devtools.commands.RemoveExtensions;\n+import io.quarkus.devtools.commands.data.QuarkusCommandOutcome;\n+import io.quarkus.devtools.project.QuarkusProject;\n+import io.quarkus.platform.descriptor.QuarkusPlatformDescriptor;\n+import io.quarkus.platform.tools.config.QuarkusPlatformConfig;\n+import picocli.CommandLine;\n+\n+@CommandLine.Command(name = \"remove\", aliases = \"rm\", mixinStandardHelpOptions = false, description = \"Remove an extension from this project.\")\n+public class Remove implements Callable<Integer> {\n+\n+    @CommandLine.Option(names = { \"-h\", \"--help\" }, usageHelp = true, description = \"display this help message\")\n+    boolean usageHelpRequested;\n+\n+    @CommandLine.Parameters(arity = \"1\", paramLabel = \"EXTENSION\", description = \"extension to remove\")\n+    Set<String> extensions;\n+\n+    @CommandLine.ParentCommand\n+    QuarkusCli parent;\n+\n+    @CommandLine.Spec\n+    CommandLine.Model.CommandSpec spec;\n+\n+    @Override\n+    public Integer call() {\n+        final QuarkusPlatformDescriptor platformDescr = QuarkusPlatformConfig.getGlobalDefault().getPlatformDescriptor();\n+        try {\n+            Path projectDirectory = Paths.get(System.getProperty(\"user.dir\"));\n+            RemoveExtensions project = new RemoveExtensions(QuarkusProject.resolveExistingProject(projectDirectory,\n+                    platformDescr)).extensions(extensions);\n+            QuarkusCommandOutcome result = project.execute();\n+            return result.isSuccess() ? CommandLine.ExitCode.OK : CommandLine.ExitCode.SOFTWARE;\n+        } catch (Exception e) {\n+            if (parent.showErrors)\n+                e.printStackTrace(spec.commandLine().getErr());\n+            spec.commandLine().getErr().println(\"Unable to remove extension matching:\" + e.getMessage());", "originalCommit": "b65a79b9245df5c4782ce73073b1b5bd931fcb88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjgyNTg4Nw==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r476825887", "bodyText": "This should be logged as a separate issue.  Not a CLI thing.", "author": "patriot1burke", "createdAt": "2020-08-25T23:00:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ5Njc0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwMDUyMA==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r474500520", "bodyText": "when no no mvnw nor mvn in path this seem to just fail silently. no error output, no nothing.", "author": "maxandersen", "createdAt": "2020-08-21T08:06:19Z", "path": "devtools/cli/src/main/java/io/quarkus/cli/core/ExecuteUtil.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package io.quarkus.cli.core;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.InputStreamReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+import java.util.stream.Stream;\n+\n+import org.apache.maven.shared.invoker.DefaultInvocationRequest;\n+import org.apache.maven.shared.invoker.DefaultInvoker;\n+import org.apache.maven.shared.invoker.InvocationRequest;\n+import org.apache.maven.shared.invoker.InvocationResult;\n+import org.apache.maven.shared.invoker.Invoker;\n+\n+import io.quarkus.devtools.project.BuildTool;\n+import io.quarkus.devtools.project.QuarkusProject;\n+import picocli.CommandLine;\n+\n+public class ExecuteUtil {\n+\n+    public static void executeGradle(File projectDirectory, String buildTarget, CommandLine cl)\n+            throws Exception {\n+        String gradleExecutable = findExecutable(\"gradle\");\n+        if (gradleExecutable == null) {\n+            cl.getErr().println(\"Unable to find the gradle executable, is it in your path?\");\n+        } else {\n+            gradleExecutable += File.separator + \"bin\" + File.separator + \"gradle\";\n+\n+            Process process = new ProcessBuilder()\n+                    .command(gradleExecutable, buildTarget)\n+                    .directory(projectDirectory)\n+                    .start();\n+\n+            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n+\n+            String line;\n+            while ((line = reader.readLine()) != null) {\n+                cl.getOut().println(line);\n+            }\n+\n+            int exit = process.waitFor();\n+            if (exit != 0)\n+                cl.getErr().println(\"Build failed.\");\n+        }\n+    }\n+\n+    public static void executeMaven(File projectDirectory, String buildTarget, CommandLine cl) throws Exception {\n+        String mvnPath = findExecutable(\"mvn\");\n+        System.setProperty(\"maven.home\", mvnPath);\n+\n+        InvocationRequest request = new DefaultInvocationRequest();\n+        request.setPomFile(new File(projectDirectory.getAbsolutePath() + File.separatorChar + \"pom.xml\"));\n+        request.setGoals(Collections.singletonList(buildTarget));\n+\n+        Invoker invoker = new DefaultInvoker();\n+\n+        InvocationResult result = invoker.execute(request);\n+\n+        if (result.getExitCode() != 0) {", "originalCommit": "b65a79b9245df5c4782ce73073b1b5bd931fcb88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjgyMzA2Mw==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r476823063", "bodyText": "stderr wasn't being outputted.  All this code has changed and this is fixed.", "author": "patriot1burke", "createdAt": "2020-08-25T22:57:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwMDUyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUxNTAwMA==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r474515000", "bodyText": "all this parent/spec code and possibly also the error handling we could move to a base class and simplify these commands quite a bit.", "author": "maxandersen", "createdAt": "2020-08-21T08:23:00Z", "path": "devtools/cli/src/main/java/io/quarkus/cli/Build.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package io.quarkus.cli;\n+\n+import java.util.concurrent.Callable;\n+\n+import io.quarkus.cli.core.ExecuteUtil;\n+import picocli.CommandLine;\n+\n+@CommandLine.Command(name = \"build\", mixinStandardHelpOptions = false, description = \"Build your quarkus project\")\n+public class Build implements Callable<Integer> {\n+    @CommandLine.Option(names = { \"-h\", \"--help\" }, usageHelp = true, description = \"display this help message\")\n+    boolean usageHelpRequested;\n+\n+    @CommandLine.ParentCommand\n+    QuarkusCli parent;", "originalCommit": "b65a79b9245df5c4782ce73073b1b5bd931fcb88", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUxNTc0OQ==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r474515749", "bodyText": "should we have a --verbose that would print out the commands actually executed ?", "author": "maxandersen", "createdAt": "2020-08-21T08:23:51Z", "path": "devtools/cli/src/main/java/io/quarkus/cli/Build.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package io.quarkus.cli;\n+\n+import java.util.concurrent.Callable;\n+\n+import io.quarkus.cli.core.ExecuteUtil;\n+import picocli.CommandLine;\n+\n+@CommandLine.Command(name = \"build\", mixinStandardHelpOptions = false, description = \"Build your quarkus project\")\n+public class Build implements Callable<Integer> {\n+    @CommandLine.Option(names = { \"-h\", \"--help\" }, usageHelp = true, description = \"display this help message\")", "originalCommit": "b65a79b9245df5c4782ce73073b1b5bd931fcb88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYyOTY0Ng==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r474629646", "bodyText": "Not sure what you mean.  create executes directly, it doesn't call out to maven or gradle.", "author": "patriot1burke", "createdAt": "2020-08-21T11:06:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUxNTc0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA2MzcxMA==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r475063710", "bodyText": "I'm suggesting quarkus build --verbose (or even quarkus --verbose build) would print out the command that is executed; i.e.\nRunning './mvnw.cmd package'\n<mvn output>", "author": "maxandersen", "createdAt": "2020-08-22T08:33:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUxNTc0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUyMDIxNQ==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r474520215", "bodyText": "looks like I can do quarkus clean build and that gets execute as multiple commands. That makes it slower than corresponding mvn clean build or gradle clean build\nWondering if we could \"group\" these rather than be done separately ?", "author": "maxandersen", "createdAt": "2020-08-21T08:28:58Z", "path": "devtools/cli/src/main/java/io/quarkus/cli/Build.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package io.quarkus.cli;\n+\n+import java.util.concurrent.Callable;\n+\n+import io.quarkus.cli.core.ExecuteUtil;\n+import picocli.CommandLine;\n+\n+@CommandLine.Command(name = \"build\", mixinStandardHelpOptions = false, description = \"Build your quarkus project\")", "originalCommit": "b65a79b9245df5c4782ce73073b1b5bd931fcb88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYyODkxNA==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r474628914", "bodyText": "Ugh...didn't even think of that.  Not sure its possible to do that with picocli without a hack.  I should be able to have \"clean\" be a subcommand of \"build\"", "author": "patriot1burke", "createdAt": "2020-08-21T11:04:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUyMDIxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI1MTE1NQ==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r476251155", "bodyText": "haven't played with it but picocli lets you customize the execution strategy. https://picocli.info/#_executing_commands_with_subcommands\nmaybe that could work ?", "author": "maxandersen", "createdAt": "2020-08-25T07:57:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUyMDIxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjgyNTAyNg==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r476825026", "bodyText": "creating a strategy was the trick.", "author": "patriot1burke", "createdAt": "2020-08-25T22:59:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUyMDIxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjkyMjg4MA==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r476922880", "bodyText": "I used a strategy.  That worked.", "author": "patriot1burke", "createdAt": "2020-08-26T00:45:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUyMDIxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU2NzMwOQ==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r474567309", "bodyText": "i'm wondering if we should have some short cuts like:\ncreate-jaxrs\ncreate-cli\ncreate-knative ...etc. which would lockin/predefine which codestart and extension set gets run ?", "author": "maxandersen", "createdAt": "2020-08-21T09:20:44Z", "path": "devtools/cli/src/main/java/io/quarkus/cli/Create.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package io.quarkus.cli;", "originalCommit": "b65a79b9245df5c4782ce73073b1b5bd931fcb88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjkyMzUxMA==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r476923510", "bodyText": "How is that simpler than:\n$ quarkus create resteasy\n???", "author": "patriot1burke", "createdAt": "2020-08-26T00:46:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU2NzMwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI5NjUzNw==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r477296537", "bodyText": "Create a separate issue if you want this please.", "author": "patriot1burke", "createdAt": "2020-08-26T13:23:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU2NzMwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk4Njg3Mw==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r479986873", "bodyText": "create takes extensions as arguments not a codestart thus you can end up with a mix of things in your project. Which is good when exploring; less great when trying to write docs or follow a guide that just want \"take this starting point, add these extensions and we'll walk you through the rest\".\ni'll open seperate issue.", "author": "maxandersen", "createdAt": "2020-08-31T08:48:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU2NzMwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk0NzA0OQ==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r474947049", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String param = \"--extensions=\";\n          \n          \n            \n                    boolean first = true;\n          \n          \n            \n                    for (String ext : extensions) {\n          \n          \n            \n                        if (first)\n          \n          \n            \n                            first = false;\n          \n          \n            \n                        else\n          \n          \n            \n                            param += \",\";\n          \n          \n            \n            \n          \n          \n            \n                        param += ext;\n          \n          \n            \n                    }\n          \n          \n            \n                    String param = \"--extensions=\" + String.join(\",\",extensions);", "author": "gastaldi", "createdAt": "2020-08-21T20:36:08Z", "path": "devtools/cli/src/main/java/io/quarkus/cli/Add.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package io.quarkus.cli;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Set;\n+\n+import io.quarkus.cli.core.BaseSubCommand;\n+import io.quarkus.cli.core.ExecuteUtil;\n+import io.quarkus.devtools.commands.AddExtensions;\n+import io.quarkus.devtools.commands.data.QuarkusCommandOutcome;\n+import io.quarkus.devtools.project.BuildTool;\n+import io.quarkus.devtools.project.QuarkusProject;\n+import io.quarkus.platform.tools.config.QuarkusPlatformConfig;\n+import picocli.CommandLine;\n+\n+@CommandLine.Command(name = \"add\", mixinStandardHelpOptions = false, description = \"Add extension(s) to current project.\")\n+public class Add extends BaseSubCommand {\n+\n+    @CommandLine.Parameters(arity = \"1\", paramLabel = \"EXTENSION\", description = \"extension to add to project\")\n+    Set<String> extensions;\n+\n+    @Override\n+    public Integer call() {\n+        Path projectDirectory = Paths.get(System.getProperty(\"user.dir\"));\n+\n+        BuildTool buildTool = QuarkusProject.resolveExistingProjectBuildTool(projectDirectory);\n+        if (buildTool == BuildTool.MAVEN) {\n+            return addMaven(projectDirectory);\n+        } else {\n+            return addGradle(projectDirectory);\n+\n+        }\n+\n+    }\n+\n+    private Integer addMaven(Path projectDirectory) {\n+        try {\n+            QuarkusProject quarkusProject = QuarkusProject.resolveExistingProject(projectDirectory,\n+                    QuarkusPlatformConfig.getGlobalDefault().getPlatformDescriptor());\n+\n+            AddExtensions project = new AddExtensions(quarkusProject);\n+            project.extensions(extensions);\n+\n+            QuarkusCommandOutcome result = project.execute();\n+            return result.isSuccess() ? CommandLine.ExitCode.OK : CommandLine.ExitCode.SOFTWARE;\n+        } catch (Exception e) {\n+            if (parent.showErrors)\n+                e.printStackTrace(spec.commandLine().getErr());\n+            spec.commandLine().getErr()\n+                    .println(\"Unable to add extension\" + (extensions.size() > 1 ? \"s\" : \"\") + \": \" + e.getMessage());\n+            return CommandLine.ExitCode.SOFTWARE;\n+        }\n+    }\n+\n+    private Integer addGradle(Path projectDirectory) {\n+        ArrayList<String> args = new ArrayList<>();\n+        args.add(\"addExtension\");\n+        String param = \"--extensions=\";\n+        boolean first = true;\n+        for (String ext : extensions) {\n+            if (first)\n+                first = false;\n+            else\n+                param += \",\";\n+\n+            param += ext;\n+        }", "originalCommit": "ba19af162259437d72852ed27ebcc71b173a33b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0MDEwNw==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r476240107", "bodyText": ":-)", "author": "ia3andy", "createdAt": "2020-08-25T07:38:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk0NzA0OQ=="}], "type": "inlineReview"}, {"oid": "0640c9e0b720715e5dc9431afc7895090cd91e6f", "url": "https://github.com/quarkusio/quarkus/commit/0640c9e0b720715e5dc9431afc7895090cd91e6f", "message": "quarkus cli 2.0\n\ncli 2.0 list and rename flags\n\ncli 2.0 version and list usage\n\ncli 2.0 sort = false list options\n\ncli 2.0 PATTERN\n\ncli 2.0 remove aesh from bom\n\nfinish cli 2.0 tests\n\nfix compilation error\n\ncli 2.0 fix colors and gradle\n\ncli 2.0 formatting\n\nwhy is cli test failing in CI\n\ncli try this to get testsuite to pass\n\ncli try yet again to get testsuite to pass\n\ncli maybe this will fix build\n\ncli add some gradle tests", "committedDate": "2020-08-24T17:25:55Z", "type": "forcePushed"}, {"oid": "c7769d37b855fb5650ced02a1b98c4adce350e51", "url": "https://github.com/quarkusio/quarkus/commit/c7769d37b855fb5650ced02a1b98c4adce350e51", "message": "quarkus cli 2.0\n\ncli 2.0 list and rename flags\n\ncli 2.0 version and list usage\n\ncli 2.0 sort = false list options\n\ncli 2.0 PATTERN\n\ncli 2.0 remove aesh from bom\n\nfinish cli 2.0 tests\n\nfix compilation error\n\ncli 2.0 fix colors and gradle\n\ncli 2.0 formatting\n\nwhy is cli test failing in CI\n\ncli try this to get testsuite to pass\n\ncli try yet again to get testsuite to pass\n\ncli maybe this will fix build\n\ncli add some gradle tests", "committedDate": "2020-08-24T23:42:13Z", "type": "forcePushed"}, {"oid": "f4dcd1d89e01846dd079230b386fa50f7bd3d9f3", "url": "https://github.com/quarkusio/quarkus/commit/f4dcd1d89e01846dd079230b386fa50f7bd3d9f3", "message": "quarkus cli 2.0\n\ncli 2.0 list and rename flags\n\ncli 2.0 version and list usage\n\ncli 2.0 sort = false list options\n\ncli 2.0 PATTERN\n\ncli 2.0 remove aesh from bom\n\nfinish cli 2.0 tests\n\nfix compilation error\n\ncli 2.0 fix colors and gradle\n\ncli 2.0 formatting\n\nwhy is cli test failing in CI\n\ncli try this to get testsuite to pass\n\ncli try yet again to get testsuite to pass\n\ncli maybe this will fix build\n\ncli add some gradle tests\n\ncli revisions", "committedDate": "2020-08-26T00:43:46Z", "type": "forcePushed"}, {"oid": "5c67414ff92fb65ce0d3b228a8e1cf6ed9fb0a3d", "url": "https://github.com/quarkusio/quarkus/commit/5c67414ff92fb65ce0d3b228a8e1cf6ed9fb0a3d", "message": "quarkus cli 2.0\n\ncli 2.0 list and rename flags\n\ncli 2.0 version and list usage\n\ncli 2.0 sort = false list options\n\ncli 2.0 PATTERN\n\ncli 2.0 remove aesh from bom\n\nfinish cli 2.0 tests\n\nfix compilation error\n\ncli 2.0 fix colors and gradle\n\ncli 2.0 formatting\n\nwhy is cli test failing in CI\n\ncli try this to get testsuite to pass\n\ncli try yet again to get testsuite to pass\n\ncli maybe this will fix build\n\ncli add some gradle tests\n\ncli revisions\n\ncli width and build refactor", "committedDate": "2020-08-26T13:38:26Z", "type": "forcePushed"}, {"oid": "68c26b8db372d44408daaaaad50444cd42e4b194", "url": "https://github.com/quarkusio/quarkus/commit/68c26b8db372d44408daaaaad50444cd42e4b194", "message": "quarkus cli 2.0\n\ncli 2.0 list and rename flags\n\ncli 2.0 version and list usage\n\ncli 2.0 sort = false list options\n\ncli 2.0 PATTERN\n\ncli 2.0 remove aesh from bom\n\nfinish cli 2.0 tests\n\nfix compilation error\n\ncli 2.0 fix colors and gradle\n\ncli 2.0 formatting\n\nwhy is cli test failing in CI\n\ncli try this to get testsuite to pass\n\ncli try yet again to get testsuite to pass\n\ncli maybe this will fix build\n\ncli add some gradle tests\n\ncli revisions\n\ncli width and build refactor\n\ncli fix versoin", "committedDate": "2020-08-26T14:05:48Z", "type": "forcePushed"}, {"oid": "330580c672915a8bf47956405895292f95c12658", "url": "https://github.com/quarkusio/quarkus/commit/330580c672915a8bf47956405895292f95c12658", "message": "quarkus cli 2.0\n\ncli 2.0 list and rename flags\n\ncli 2.0 version and list usage\n\ncli 2.0 sort = false list options\n\ncli 2.0 PATTERN\n\ncli 2.0 remove aesh from bom\n\nfinish cli 2.0 tests\n\nfix compilation error\n\ncli 2.0 fix colors and gradle\n\ncli 2.0 formatting\n\nwhy is cli test failing in CI\n\ncli try this to get testsuite to pass\n\ncli try yet again to get testsuite to pass\n\ncli maybe this will fix build\n\ncli add some gradle tests\n\ncli revisions\n\ncli width and build refactor\n\ncli fix versoin\n\ncli native build", "committedDate": "2020-08-27T19:40:11Z", "type": "forcePushed"}, {"oid": "1091d9e4d79830716f7cb691090680cbac7ca4be", "url": "https://github.com/quarkusio/quarkus/commit/1091d9e4d79830716f7cb691090680cbac7ca4be", "message": "quarkus cli 2.0\n\ncli 2.0 list and rename flags\n\ncli 2.0 version and list usage\n\ncli 2.0 sort = false list options\n\ncli 2.0 PATTERN\n\ncli 2.0 remove aesh from bom\n\nfinish cli 2.0 tests\n\nfix compilation error\n\ncli 2.0 fix colors and gradle\n\ncli 2.0 formatting\n\nwhy is cli test failing in CI\n\ncli try this to get testsuite to pass\n\ncli try yet again to get testsuite to pass\n\ncli maybe this will fix build\n\ncli add some gradle tests\n\ncli revisions\n\ncli width and build refactor\n\ncli fix versoin\n\ncli native build\n\ncli fix", "committedDate": "2020-08-28T17:46:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA2MDMzNA==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r480060334", "bodyText": "you could do it only once I guess", "author": "ia3andy", "createdAt": "2020-08-31T11:12:33Z", "path": "devtools/cli/src/main/java/io/quarkus/cli/Create.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package io.quarkus.cli;\n+\n+import java.io.File;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+\n+import io.quarkus.cli.core.BaseSubCommand;\n+import io.quarkus.devtools.commands.CreateProject;\n+import io.quarkus.devtools.project.BuildTool;\n+import io.quarkus.devtools.project.codegen.SourceType;\n+import io.quarkus.platform.tools.config.QuarkusPlatformConfig;\n+import picocli.CommandLine;\n+\n+@CommandLine.Command(name = \"create\", sortOptions = false, usageHelpAutoWidth = true, mixinStandardHelpOptions = false, description = \"Create a new quarkus project.\")\n+public class Create extends BaseSubCommand implements Callable<Integer> {\n+\n+    @CommandLine.Option(names = { \"-g\",\n+            \"--group-id\" }, order = 1, paramLabel = \"GROUP-ID\", description = \"The groupId for project\")\n+    String groupId = \"org.acme\";\n+\n+    @CommandLine.Option(names = { \"-a\",\n+            \"--artifact-id\" }, order = 2, paramLabel = \"ARTIFACT-ID\", description = \"The artifactId for project\")\n+    String artifactId = \"my-project\";\n+\n+    @CommandLine.Option(names = { \"-v\",\n+            \"--version\" }, order = 3, paramLabel = \"VERSION\", description = \"The version for project\")\n+    String version = \"1.0-SNAPSHOT\";\n+\n+    @CommandLine.Option(names = { \"-0\",\n+            \"--empty\" }, order = 4, description = \"Generate without example code.\")\n+    boolean empty = false;\n+\n+    @CommandLine.ArgGroup()\n+    TargetBuildTool targetBuildTool = new TargetBuildTool();\n+\n+    static class TargetBuildTool {\n+        @CommandLine.Option(names = { \"--maven\" }, order = 5, description = \"Create a Maven project. (default)\")\n+        boolean maven = false;\n+\n+        @CommandLine.Option(names = { \"--gradle\" }, order = 6, description = \"Create a Gradle project.\")\n+        boolean gradle = false;\n+\n+        @CommandLine.Option(names = {\n+                \"--grade-kotlin-dsl\" }, order = 7, description = \"Create a Gradle Kotlin DSL project.\")\n+        boolean gradleKotlinDsl = false;\n+    }\n+\n+    @CommandLine.ArgGroup()\n+    TargetLanguage language = new TargetLanguage();\n+\n+    static class TargetLanguage {\n+        @CommandLine.Option(names = {\n+                \"--java\" }, order = 8, description = \"Generate Java examples. (default)\")\n+        boolean java = false;\n+\n+        @CommandLine.Option(names = {\n+                \"--kotlin\" }, order = 9, description = \"Generate Kotlin examples.\")\n+        boolean kotlin = false;\n+\n+        @CommandLine.Option(names = {\n+                \"--scala\" }, order = 10, description = \"Generate Scala examples.\")\n+        boolean scala = false;\n+    }\n+\n+    @CommandLine.Parameters(arity = \"0..1\", paramLabel = \"EXTENSION\", description = \"extension to add to project\")\n+    Set<String> extensions;\n+\n+    @Override\n+    public Integer call() throws Exception {\n+        try {\n+            File projectDirectory = new File(System.getProperty(\"user.dir\"));\n+\n+            File projectRoot = new File(projectDirectory.getAbsoluteFile(), artifactId);\n+            if (projectRoot.exists()) {\n+                err().println(\"Unable to create the project, \" +\n+                        \"the directory \" + projectRoot.getAbsolutePath() + \" already exists\");\n+                return CommandLine.ExitCode.SOFTWARE;\n+            }\n+\n+            SourceType sourceType = SourceType.JAVA;\n+            if (targetBuildTool.gradleKotlinDsl) {\n+                sourceType = SourceType.KOTLIN;\n+                if (extensions == null)\n+                    extensions = new HashSet<>();", "originalCommit": "1091d9e4d79830716f7cb691090680cbac7ca4be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE3MjU1NQ==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r480172555", "bodyText": "it saves an object creation when its --java and no extensions.", "author": "patriot1burke", "createdAt": "2020-08-31T14:34:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA2MDMzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA2MTMzNg==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r480061336", "bodyText": "@maxandersen didn't we say we should use no-examples in the end?", "author": "ia3andy", "createdAt": "2020-08-31T11:13:54Z", "path": "devtools/cli/src/main/java/io/quarkus/cli/Create.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package io.quarkus.cli;\n+\n+import java.io.File;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+\n+import io.quarkus.cli.core.BaseSubCommand;\n+import io.quarkus.devtools.commands.CreateProject;\n+import io.quarkus.devtools.project.BuildTool;\n+import io.quarkus.devtools.project.codegen.SourceType;\n+import io.quarkus.platform.tools.config.QuarkusPlatformConfig;\n+import picocli.CommandLine;\n+\n+@CommandLine.Command(name = \"create\", sortOptions = false, usageHelpAutoWidth = true, mixinStandardHelpOptions = false, description = \"Create a new quarkus project.\")\n+public class Create extends BaseSubCommand implements Callable<Integer> {\n+\n+    @CommandLine.Option(names = { \"-g\",\n+            \"--group-id\" }, order = 1, paramLabel = \"GROUP-ID\", description = \"The groupId for project\")\n+    String groupId = \"org.acme\";\n+\n+    @CommandLine.Option(names = { \"-a\",\n+            \"--artifact-id\" }, order = 2, paramLabel = \"ARTIFACT-ID\", description = \"The artifactId for project\")\n+    String artifactId = \"my-project\";\n+\n+    @CommandLine.Option(names = { \"-v\",\n+            \"--version\" }, order = 3, paramLabel = \"VERSION\", description = \"The version for project\")\n+    String version = \"1.0-SNAPSHOT\";\n+\n+    @CommandLine.Option(names = { \"-0\",\n+            \"--empty\" }, order = 4, description = \"Generate without example code.\")\n+    boolean empty = false;", "originalCommit": "1091d9e4d79830716f7cb691090680cbac7ca4be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDExMDUyOA==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r480110528", "bodyText": "Fine to change this, but I'm gonna kill somebody if I have to spend another week trying to get CI to pass over such a small change.", "author": "patriot1burke", "createdAt": "2020-08-31T12:55:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA2MTMzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDEyNzg1OA==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r480127858", "bodyText": "@patriot1burke I can understand this \ud83d\ude02, it shouldn't break CI though :) let's wait for @maxandersen confirmation first..\nThis is not \"that\" small because it actually changes the spec of the CLI.. ex: if you give an example in a blog post and it changes in the next release, it's not great \ud83d\ude05", "author": "ia3andy", "createdAt": "2020-08-31T13:23:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA2MTMzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE2OTc4MA==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r480169780", "bodyText": "Well, you guys have already changed this flag 3 times in the last two weeks and , well, i don't like any of your changes :)  So, if you change your mind yet again in the next two weeks, feel free to do the change yourself.", "author": "patriot1burke", "createdAt": "2020-08-31T14:30:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA2MTMzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ2OTMzNg==", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r482469336", "bodyText": "i wasn't aware we were changing them here as those things were stil fluid.\nlets just get this in and we can clean up / align these rather than do another round.", "author": "maxandersen", "createdAt": "2020-09-02T21:05:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA2MTMzNg=="}], "type": "inlineReview"}, {"oid": "d4bb531f92d2fab734607b103987c0b14d06470f", "url": "https://github.com/quarkusio/quarkus/commit/d4bb531f92d2fab734607b103987c0b14d06470f", "message": "quarkus cli 2.0\n\ncli 2.0 list and rename flags\n\ncli 2.0 version and list usage\n\ncli 2.0 sort = false list options\n\ncli 2.0 PATTERN\n\ncli 2.0 remove aesh from bom\n\nfinish cli 2.0 tests\n\nfix compilation error\n\ncli 2.0 fix colors and gradle\n\ncli 2.0 formatting\n\nwhy is cli test failing in CI\n\ncli try this to get testsuite to pass\n\ncli try yet again to get testsuite to pass\n\ncli maybe this will fix build\n\ncli add some gradle tests\n\ncli revisions\n\ncli width and build refactor\n\ncli fix versoin\n\ncli native build\n\ncli fix\n\ncli --empty to --no-examples", "committedDate": "2020-08-31T15:04:08Z", "type": "commit"}, {"oid": "d4bb531f92d2fab734607b103987c0b14d06470f", "url": "https://github.com/quarkusio/quarkus/commit/d4bb531f92d2fab734607b103987c0b14d06470f", "message": "quarkus cli 2.0\n\ncli 2.0 list and rename flags\n\ncli 2.0 version and list usage\n\ncli 2.0 sort = false list options\n\ncli 2.0 PATTERN\n\ncli 2.0 remove aesh from bom\n\nfinish cli 2.0 tests\n\nfix compilation error\n\ncli 2.0 fix colors and gradle\n\ncli 2.0 formatting\n\nwhy is cli test failing in CI\n\ncli try this to get testsuite to pass\n\ncli try yet again to get testsuite to pass\n\ncli maybe this will fix build\n\ncli add some gradle tests\n\ncli revisions\n\ncli width and build refactor\n\ncli fix versoin\n\ncli native build\n\ncli fix\n\ncli --empty to --no-examples", "committedDate": "2020-08-31T15:04:08Z", "type": "forcePushed"}]}