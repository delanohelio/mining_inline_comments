{"pr_number": 9180, "pr_title": "Create picocli extension", "pr_createdAt": "2020-05-08T13:51:32Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/9180", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIxNjc3Mg==", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r422216772", "bodyText": "Please move that one to the FeatureBuildItem with the other. They are sorted in alphabetical order.", "author": "gsmet", "createdAt": "2020-05-08T15:42:41Z", "path": "extensions/picocli/deployment/src/main/java/io/quarkus/picocli/deployment/PicocliProcessor.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package io.quarkus.picocli.deployment;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+\n+import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n+import io.quarkus.arc.deployment.AnnotationsTransformerBuildItem;\n+import io.quarkus.arc.deployment.BeanDefiningAnnotationBuildItem;\n+import io.quarkus.arc.processor.AnnotationsTransformer;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.ApplicationIndexBuildItem;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.IndexDependencyBuildItem;\n+import io.quarkus.deployment.builditem.QuarkusApplicationClassBuildItem;\n+import io.quarkus.picocli.runtime.PicocliRunner;\n+import io.quarkus.picocli.runtime.annotations.TopCommand;\n+import io.quarkus.runtime.annotations.QuarkusMain;\n+import picocli.CommandLine;\n+\n+class PicocliProcessor {\n+\n+    private static final String FEATURE = \"picocli\";", "originalCommit": "dadaf1cc3c87456d0e7029ba85f0ebe88d3fd82d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIxNzEwOA==", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r422217108", "bodyText": "Maybe an IllegalStateException would be better?", "author": "gsmet", "createdAt": "2020-05-08T15:43:18Z", "path": "extensions/picocli/deployment/src/main/java/io/quarkus/picocli/deployment/PicocliProcessor.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package io.quarkus.picocli.deployment;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+\n+import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n+import io.quarkus.arc.deployment.AnnotationsTransformerBuildItem;\n+import io.quarkus.arc.deployment.BeanDefiningAnnotationBuildItem;\n+import io.quarkus.arc.processor.AnnotationsTransformer;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.ApplicationIndexBuildItem;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.IndexDependencyBuildItem;\n+import io.quarkus.deployment.builditem.QuarkusApplicationClassBuildItem;\n+import io.quarkus.picocli.runtime.PicocliRunner;\n+import io.quarkus.picocli.runtime.annotations.TopCommand;\n+import io.quarkus.runtime.annotations.QuarkusMain;\n+import picocli.CommandLine;\n+\n+class PicocliProcessor {\n+\n+    private static final String FEATURE = \"picocli\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    BeanDefiningAnnotationBuildItem commandBeanDefiningAnnotation() {\n+        return new BeanDefiningAnnotationBuildItem(DotName.createSimple(CommandLine.Command.class.getName()));\n+    }\n+\n+    @BuildStep\n+    IndexDependencyBuildItem picocliIndexDependency() {\n+        return new IndexDependencyBuildItem(\"info.picocli\", \"picocli\");\n+    }\n+\n+    @BuildStep\n+    void picocliRunner(ApplicationIndexBuildItem applicationIndex,\n+            CombinedIndexBuildItem combinedIndex,\n+            BuildProducer<AdditionalBeanBuildItem> additionalBean,\n+            BuildProducer<QuarkusApplicationClassBuildItem> quarkusApplicationClass,\n+            BuildProducer<AnnotationsTransformerBuildItem> annotationsTransformer) {\n+        IndexView index = combinedIndex.getIndex();\n+        Collection<DotName> topCommands = classesAnnotatedWith(index, TopCommand.class.getName());\n+        if (topCommands.size() > 1) {\n+            throw new RuntimeException(\"Multiple classes annotated with TopCommand: \" +", "originalCommit": "dadaf1cc3c87456d0e7029ba85f0ebe88d3fd82d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIxNzc5NA==", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r422217794", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * This class need to be annotated with {@link picocli.CommandLine.Command}.\n          \n          \n            \n                 * This class needs to be annotated with {@link picocli.CommandLine.Command}.", "author": "gsmet", "createdAt": "2020-05-08T15:44:34Z", "path": "extensions/picocli/runtime/src/main/java/io/quarkus/picocli/runtime/PicocliConfiguration.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package io.quarkus.picocli.runtime;\n+\n+import java.util.Optional;\n+\n+import io.quarkus.runtime.annotations.ConfigItem;\n+import io.quarkus.runtime.annotations.ConfigPhase;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n+\n+@ConfigRoot(phase = ConfigPhase.RUN_TIME)\n+public class PicocliConfiguration {\n+    /**\n+     * Name of class which will be used as entry point for Picocli CommandLine instance.\n+     * This class need to be annotated with {@link picocli.CommandLine.Command}.", "originalCommit": "dadaf1cc3c87456d0e7029ba85f0ebe88d3fd82d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQwODk0NQ==", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r422408945", "bodyText": "It is important that the factory falls back to the picocli default factory: the default factory has logic to instantiate collections (Lists, Sets, Maps) that picocli relies on. How about something like this:\nclass PicocliBeansFactory implements CommandLine.IFactory {\n\n    private final IFactory defaultFactory = CommandLine.defaultFactory();\n\n    @Override\n    public <K> K create(Class<K> aClass) throws Exception {\n        Instance<K> instance = CDI.current().select(aClass);\n        if (instance.isResolvable()) {\n            // question: does Quarkus provide some internal logging facility?\n            //System.out.println(\"Got instance \" + instance + \" via \" + CDI.current());\n            return instance.get();\n        }\n        //System.out.println(\"Instantiating \" + aClass + \" via default picocli factory\");\n        return defaultFactory.create(aClass);\n    }\n}", "author": "remkop", "createdAt": "2020-05-08T22:46:25Z", "path": "extensions/picocli/runtime/src/main/java/io/quarkus/picocli/runtime/PicocliBeansFactory.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package io.quarkus.picocli.runtime;\n+\n+import javax.enterprise.inject.spi.CDI;\n+\n+import picocli.CommandLine;\n+\n+class PicocliBeansFactory implements CommandLine.IFactory {\n+    @Override\n+    public <K> K create(Class<K> aClass) {\n+        return CDI.current().select(aClass).get();", "originalCommit": "dadaf1cc3c87456d0e7029ba85f0ebe88d3fd82d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1ODc4OQ==", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r422458789", "bodyText": "what is this fixing ? (I assume its unrelated to picocli support ?)", "author": "maxandersen", "createdAt": "2020-05-09T06:24:01Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/MainClassBuildStep.java", "diffHunk": "@@ -300,17 +302,22 @@ public MainClassBuildItem mainClassBuildStep(BuildProducer<GeneratedClassBuildIt\n             mainClassName = quarkusMainAnnotations.get(\"\");\n         }\n         if (mainClassName.equals(MAIN_CLASS)) {\n-            //generate a main that just runs the app, the user has not supplied a main class\n-            ClassCreator file = new ClassCreator(new GeneratedClassGizmoAdaptor(generatedClass, true), MAIN_CLASS, null,\n-                    Object.class.getName());\n+            if (quarkusApplicationClass.isPresent()) {", "originalCommit": "dadaf1cc3c87456d0e7029ba85f0ebe88d3fd82d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2ODY3MA==", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r422468670", "bodyText": "We need this because MainClassBuildItem looks for QuarkusMain annotated classes in CombinedIndexBuildItem. Since PicocliRunner is part of picocli extension it won't be visible in index.", "author": "mgorniew", "createdAt": "2020-05-09T08:21:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1ODc4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc2Mzg3NQ==", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r422763875", "bodyText": "This makes sense to me", "author": "stuartwdouglas", "createdAt": "2020-05-11T03:47:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1ODc4OQ=="}], "type": "inlineReview"}, {"oid": "75a7d3d5e309c60a79c1e3131f0c2c8a36262389", "url": "https://github.com/quarkusio/quarkus/commit/75a7d3d5e309c60a79c1e3131f0c2c8a36262389", "message": "Create picocli extension", "committedDate": "2020-05-10T00:45:49Z", "type": "forcePushed"}, {"oid": "0d4a33585dfe15668f9c97091d306da73f21cdd1", "url": "https://github.com/quarkusio/quarkus/commit/0d4a33585dfe15668f9c97091d306da73f21cdd1", "message": "Create picocli extension", "committedDate": "2020-05-10T01:04:47Z", "type": "forcePushed"}, {"oid": "578ca88d95c0b860861c8ba6559149645de60935", "url": "https://github.com/quarkusio/quarkus/commit/578ca88d95c0b860861c8ba6559149645de60935", "message": "Create picocli extension", "committedDate": "2020-05-10T12:49:44Z", "type": "forcePushed"}, {"oid": "cab293bbd3d890e199092c2257ac9927c774158a", "url": "https://github.com/quarkusio/quarkus/commit/cab293bbd3d890e199092c2257ac9927c774158a", "message": "Create picocli extension", "committedDate": "2020-05-11T09:39:53Z", "type": "forcePushed"}, {"oid": "0478762e8da217a908db1ad84765f9d1e6acfb94", "url": "https://github.com/quarkusio/quarkus/commit/0478762e8da217a908db1ad84765f9d1e6acfb94", "message": "Create picocli extension", "committedDate": "2020-05-12T11:57:26Z", "type": "forcePushed"}, {"oid": "e1f797215bfe713a9f39dd46d0d96fdcd95765d5", "url": "https://github.com/quarkusio/quarkus/commit/e1f797215bfe713a9f39dd46d0d96fdcd95765d5", "message": "Create picocli extension", "committedDate": "2020-05-13T12:11:58Z", "type": "forcePushed"}, {"oid": "73690f666c561037fea584223dcf226e518f1737", "url": "https://github.com/quarkusio/quarkus/commit/73690f666c561037fea584223dcf226e518f1737", "message": "Create picocli extension", "committedDate": "2020-05-15T09:13:53Z", "type": "forcePushed"}, {"oid": "f3946e8f8caa164c851f566645265fcc65d40ab2", "url": "https://github.com/quarkusio/quarkus/commit/f3946e8f8caa164c851f566645265fcc65d40ab2", "message": "Create picocli extension", "committedDate": "2020-05-15T09:56:17Z", "type": "forcePushed"}, {"oid": "7e70cd111caf44e959fb2836a0bcc323e8ea8e88", "url": "https://github.com/quarkusio/quarkus/commit/7e70cd111caf44e959fb2836a0bcc323e8ea8e88", "message": "Create picocli extension", "committedDate": "2020-05-15T17:35:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MTM4Nw==", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r426151387", "bodyText": "As mentioned in my comment above, I am very reluctant about this...", "author": "geoand", "createdAt": "2020-05-16T12:56:49Z", "path": "extensions/picocli/deployment/src/main/java/io/quarkus/picocli/deployment/PicocliDeploymentConfiguration.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package io.quarkus.picocli.deployment;\n+\n+import io.quarkus.runtime.annotations.ConfigItem;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n+\n+@ConfigRoot(name = \"picocli\")\n+class PicocliDeploymentConfiguration {\n+\n+    /**\n+     * Whether or not a native image processing build steps should be enabled.\n+     * This should be set to false if `picocli-codegen` annotation processor is used.\n+     */\n+    @ConfigItem(name = \"native-image.processing.enable\", defaultValue = \"true\")\n+    boolean nativeImageProcessingEnabled;", "originalCommit": "7e70cd111caf44e959fb2836a0bcc323e8ea8e88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE5NzcyMw==", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r426197723", "bodyText": "As per my previous comment, the existence of this property is important to me. Please revert this change. \ud83d\ude4f", "author": "remkop", "createdAt": "2020-05-16T22:45:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MTM4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNjg2MA==", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r426216860", "bodyText": "I think it's the wrong thing to do, but I won't fight it :). Feel free to add it again", "author": "geoand", "createdAt": "2020-05-17T04:45:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MTM4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIyNzYxNg==", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r426227616", "bodyText": "Thank you!", "author": "remkop", "createdAt": "2020-05-17T07:23:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MTM4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIyNzg2OA==", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r426227868", "bodyText": "No need to thank me \ud83d\ude0a. We are just trying to figure out what's best for users \ud83d\ude0e", "author": "geoand", "createdAt": "2020-05-17T07:26:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MTM4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MTUxMQ==", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r426151511", "bodyText": "I would urge to use Arc.container() here instead of CDI.current()", "author": "geoand", "createdAt": "2020-05-16T12:58:38Z", "path": "extensions/picocli/runtime/src/main/java/io/quarkus/picocli/runtime/PicocliBeansFactory.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package io.quarkus.picocli.runtime;\n+\n+import javax.enterprise.inject.Instance;\n+import javax.enterprise.inject.spi.CDI;\n+\n+import picocli.CommandLine;\n+\n+class PicocliBeansFactory implements CommandLine.IFactory {\n+    private final CommandLine.IFactory defaultFactory = CommandLine.defaultFactory();\n+\n+    @Override\n+    public <K> K create(Class<K> aClass) throws Exception {\n+        Instance<K> instance = CDI.current().select(aClass);", "originalCommit": "7e70cd111caf44e959fb2836a0bcc323e8ea8e88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE5NTU2MQ==", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r426195561", "bodyText": "Why use Arc.container() instead of CDI.current()? Isn't CDI the standard?", "author": "remkop", "createdAt": "2020-05-16T22:09:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MTUxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE5NjA2MQ==", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r426196061", "bodyText": "Yes, CDI.current() is the standard, but this is a Quarkus piece of code so let's go with the slightly more performant option that is also used heavily throughout the codebase", "author": "geoand", "createdAt": "2020-05-16T22:17:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MTUxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE5ODI5NQ==", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r426198295", "bodyText": "I see, thanks for the clarification!", "author": "remkop", "createdAt": "2020-05-16T22:55:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MTUxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNjgyMA==", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r426216820", "bodyText": "You are welcome!", "author": "geoand", "createdAt": "2020-05-17T04:45:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MTUxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MTU3MA==", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r426151570", "bodyText": "This is redundant since Arc knows to use the constructor even without the annotations", "author": "geoand", "createdAt": "2020-05-16T12:59:39Z", "path": "extensions/picocli/runtime/src/main/java/io/quarkus/picocli/runtime/PicocliCommandLineProducer.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package io.quarkus.picocli.runtime;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Instance;\n+import javax.enterprise.inject.Produces;\n+import javax.enterprise.inject.literal.NamedLiteral;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import io.quarkus.arc.DefaultBean;\n+import io.quarkus.picocli.runtime.annotations.TopCommand;\n+import picocli.CommandLine;\n+\n+@ApplicationScoped\n+public class PicocliCommandLineProducer {\n+\n+    private final Instance<Object> topCommand;\n+    private final PicocliConfiguration picocliConfiguration;\n+\n+    @Inject", "originalCommit": "7e70cd111caf44e959fb2836a0bcc323e8ea8e88", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MTY0OQ==", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r426151649", "bodyText": "Are users expected to be able to provide their own CommandLine.IFactory? If not, then there is no need to have this annotation.", "author": "geoand", "createdAt": "2020-05-16T13:00:39Z", "path": "extensions/picocli/runtime/src/main/java/io/quarkus/picocli/runtime/PicocliCommandLineProducer.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package io.quarkus.picocli.runtime;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Instance;\n+import javax.enterprise.inject.Produces;\n+import javax.enterprise.inject.literal.NamedLiteral;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import io.quarkus.arc.DefaultBean;\n+import io.quarkus.picocli.runtime.annotations.TopCommand;\n+import picocli.CommandLine;\n+\n+@ApplicationScoped\n+public class PicocliCommandLineProducer {\n+\n+    private final Instance<Object> topCommand;\n+    private final PicocliConfiguration picocliConfiguration;\n+\n+    @Inject\n+    public PicocliCommandLineProducer(@TopCommand Instance<Object> topCommand, PicocliConfiguration picocliConfiguration) {\n+        this.topCommand = topCommand;\n+        this.picocliConfiguration = picocliConfiguration;\n+    }\n+\n+    private Class<?> classForName(String name) {\n+        try {\n+            return Class.forName(name);\n+        } catch (ClassNotFoundException ex) {\n+            throw new IllegalArgumentException(ex);\n+        }\n+    }\n+\n+    @Produces\n+    @DefaultBean", "originalCommit": "7e70cd111caf44e959fb2836a0bcc323e8ea8e88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE5NTUxNQ==", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r426195515", "bodyText": "I would say that normally, no, users would not provide their own factory. Also,  I can see no issue with the factory implementation in this extension.\nHowever, why take away the possibility for users to provide their own factory?\nThere may be some use case that we haven't thought of and then we will be happy if the @DefaultBean annotation is there so it is easy for users to provide their own.", "author": "remkop", "createdAt": "2020-05-16T22:08:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MTY0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE5NTk0OA==", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r426195948", "bodyText": "I'm not opposed to it, just asking \ud83d\ude09", "author": "geoand", "createdAt": "2020-05-16T22:15:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MTY0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE5NjE0OQ==", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r426196149", "bodyText": "Won't users be able to overwrite this anyway with Alternative + Priority(1)?", "author": "mgorniew", "createdAt": "2020-05-16T22:19:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MTY0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE5NjMzMQ==", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r426196331", "bodyText": "Yes they can do that if needed.", "author": "geoand", "createdAt": "2020-05-16T22:22:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MTY0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE5ODYxNg==", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r426198616", "bodyText": "Won't users be able to overwrite this anyway with Alternative + Priority(1)?\n\nI see, that is good to know. In that case the difference is a bit academic and I am fine either way. \ud83d\ude09", "author": "remkop", "createdAt": "2020-05-16T23:01:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MTY0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MTY3Ng==", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r426151676", "bodyText": "Same here", "author": "geoand", "createdAt": "2020-05-16T13:00:48Z", "path": "extensions/picocli/runtime/src/main/java/io/quarkus/picocli/runtime/PicocliCommandLineProducer.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package io.quarkus.picocli.runtime;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Instance;\n+import javax.enterprise.inject.Produces;\n+import javax.enterprise.inject.literal.NamedLiteral;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import io.quarkus.arc.DefaultBean;\n+import io.quarkus.picocli.runtime.annotations.TopCommand;\n+import picocli.CommandLine;\n+\n+@ApplicationScoped\n+public class PicocliCommandLineProducer {\n+\n+    private final Instance<Object> topCommand;\n+    private final PicocliConfiguration picocliConfiguration;\n+\n+    @Inject\n+    public PicocliCommandLineProducer(@TopCommand Instance<Object> topCommand, PicocliConfiguration picocliConfiguration) {\n+        this.topCommand = topCommand;\n+        this.picocliConfiguration = picocliConfiguration;\n+    }\n+\n+    private Class<?> classForName(String name) {\n+        try {\n+            return Class.forName(name);\n+        } catch (ClassNotFoundException ex) {\n+            throw new IllegalArgumentException(ex);\n+        }\n+    }\n+\n+    @Produces\n+    @DefaultBean\n+    @Singleton\n+    public CommandLine.IFactory picocliFactory() {\n+        return new PicocliBeansFactory();\n+    }\n+\n+    @Produces\n+    @DefaultBean", "originalCommit": "7e70cd111caf44e959fb2836a0bcc323e8ea8e88", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MTcyNw==", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r426151727", "bodyText": "We generally try to avoid using lamdbas in runtime code as much as possible, due to their non-zero (albeit very small) runtime overhead.", "author": "geoand", "createdAt": "2020-05-16T13:01:34Z", "path": "extensions/picocli/runtime/src/main/java/io/quarkus/picocli/runtime/PicocliCommandLineProducer.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package io.quarkus.picocli.runtime;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Instance;\n+import javax.enterprise.inject.Produces;\n+import javax.enterprise.inject.literal.NamedLiteral;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import io.quarkus.arc.DefaultBean;\n+import io.quarkus.picocli.runtime.annotations.TopCommand;\n+import picocli.CommandLine;\n+\n+@ApplicationScoped\n+public class PicocliCommandLineProducer {\n+\n+    private final Instance<Object> topCommand;\n+    private final PicocliConfiguration picocliConfiguration;\n+\n+    @Inject\n+    public PicocliCommandLineProducer(@TopCommand Instance<Object> topCommand, PicocliConfiguration picocliConfiguration) {\n+        this.topCommand = topCommand;\n+        this.picocliConfiguration = picocliConfiguration;\n+    }\n+\n+    private Class<?> classForName(String name) {\n+        try {\n+            return Class.forName(name);\n+        } catch (ClassNotFoundException ex) {\n+            throw new IllegalArgumentException(ex);\n+        }\n+    }\n+\n+    @Produces\n+    @DefaultBean\n+    @Singleton\n+    public CommandLine.IFactory picocliFactory() {\n+        return new PicocliBeansFactory();\n+    }\n+\n+    @Produces\n+    @DefaultBean\n+    public PicocliCommandLineFactory picocliCommandLineFactory(CommandLine.IFactory picocliFactory) {\n+        return () -> picocliConfiguration.topCommand", "originalCommit": "7e70cd111caf44e959fb2836a0bcc323e8ea8e88", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "deb179c8a03ec3174257513c253fcdc3927b3792", "url": "https://github.com/quarkusio/quarkus/commit/deb179c8a03ec3174257513c253fcdc3927b3792", "message": "Create picocli extension", "committedDate": "2020-05-16T21:10:19Z", "type": "forcePushed"}, {"oid": "36b7a325e64dcc6c7e5167a29583880eb20e1370", "url": "https://github.com/quarkusio/quarkus/commit/36b7a325e64dcc6c7e5167a29583880eb20e1370", "message": "Create picocli extension", "committedDate": "2020-05-16T21:21:54Z", "type": "forcePushed"}, {"oid": "e510cf42edffd1d6243f2d2c3079f4be0ce832d8", "url": "https://github.com/quarkusio/quarkus/commit/e510cf42edffd1d6243f2d2c3079f4be0ce832d8", "message": "Create picocli extension", "committedDate": "2020-05-17T11:49:22Z", "type": "commit"}, {"oid": "e510cf42edffd1d6243f2d2c3079f4be0ce832d8", "url": "https://github.com/quarkusio/quarkus/commit/e510cf42edffd1d6243f2d2c3079f4be0ce832d8", "message": "Create picocli extension", "committedDate": "2020-05-17T11:49:22Z", "type": "forcePushed"}]}