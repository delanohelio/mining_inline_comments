{"pr_number": 10992, "pr_title": "Reactive routes - register return/body types for reflection if needed", "pr_createdAt": "2020-07-27T13:28:12Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/10992", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg5ODAyNQ==", "url": "https://github.com/quarkusio/quarkus/pull/10992#discussion_r460898025", "bodyText": "Could these types be wrapped somehow in some other type? If so, it would be better to use a custom predicate (which delegates to the default one once these are checked).", "author": "gsmet", "createdAt": "2020-07-27T13:42:07Z", "path": "extensions/vertx-web/deployment/src/main/java/io/quarkus/vertx/web/deployment/VertxWebProcessor.java", "diffHunk": "@@ -599,6 +611,17 @@ void implementInvoke(HandlerDescriptor descriptor, BeanInfo bean, MethodInfo met\n         invoke.returnValue(null);\n     }\n \n+    private static void registerForReflection(Type contentType,\n+            BuildProducer<ReflectiveHierarchyBuildItem> reflectiveHierarchy) {\n+        if (io.quarkus.arc.processor.DotNames.STRING.equals(contentType.name())\n+                || DotNames.BUFFER.equals(contentType.name())\n+                || DotNames.JSON_ARRAY.equals(contentType.name())\n+                || DotNames.JSON_OBJECT.equals(contentType.name())) {", "originalCommit": "d80360dd9d899e25733c76e7283758f01f548e6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkwNTE3MA==", "url": "https://github.com/quarkusio/quarkus/pull/10992#discussion_r460905170", "bodyText": "I'm not sure I understand the question...", "author": "mkouba", "createdAt": "2020-07-27T13:52:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg5ODAyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkxOTI2MA==", "url": "https://github.com/quarkusio/quarkus/pull/10992#discussion_r460919260", "bodyText": "So if you have a return type that is:\nclass Wrapper {\n   private JsonArray array;\n}\n\nWhat you do won't work. While using the ignore predicate will properly ignore the inner JsonArray.\nAgain not sure it can happen in your case.", "author": "gsmet", "createdAt": "2020-07-27T14:12:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg5ODAyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkyOTkwNQ==", "url": "https://github.com/quarkusio/quarkus/pull/10992#discussion_r460929905", "bodyText": "@mkouba see where ReflectiveHierarchyIgnoreWarningBuildItem is being used, or the ctor of ReflectiveHierarchyBuildItem that takes a preducate.\nBasically the ensure that whenever those types are encountered (no matter what the nesting or reason they \"should\" be registered, thet won't be)", "author": "geoand", "createdAt": "2020-07-27T14:26:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg5ODAyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk0MDMzOA==", "url": "https://github.com/quarkusio/quarkus/pull/10992#discussion_r460940338", "bodyText": "Ok, I think I understand now! So I don't expect nested values like this and even if they are used like this it shouldn't be a problem to register those types for reflection. That said, a predicate would be definitely a cleaner solution ;-).", "author": "mkouba", "createdAt": "2020-07-27T14:40:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg5ODAyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk0MDc1Mg==", "url": "https://github.com/quarkusio/quarkus/pull/10992#discussion_r460940752", "bodyText": "Is it better now?", "author": "mkouba", "createdAt": "2020-07-27T14:40:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg5ODAyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk1MzU5NA==", "url": "https://github.com/quarkusio/quarkus/pull/10992#discussion_r460953594", "bodyText": "\ud83d\udc4d", "author": "geoand", "createdAt": "2020-07-27T14:57:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg5ODAyNQ=="}], "type": "inlineReview"}, {"oid": "bb609ecf34809469ed3003eb06fa57accbf87adc", "url": "https://github.com/quarkusio/quarkus/commit/bb609ecf34809469ed3003eb06fa57accbf87adc", "message": "Reactive routes - register return/body types for reflection if needed\n\n- resolves #10893", "committedDate": "2020-07-27T13:50:34Z", "type": "forcePushed"}, {"oid": "d23ca45cd8f93f38492695c55649c55580113b87", "url": "https://github.com/quarkusio/quarkus/commit/d23ca45cd8f93f38492695c55649c55580113b87", "message": "Reactive routes - register return/body types for reflection if needed\n\n- resolves #10893", "committedDate": "2020-07-27T14:39:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk1ODc1OA==", "url": "https://github.com/quarkusio/quarkus/pull/10992#discussion_r460958758", "bodyText": "As mentioned in my comment, I would use that + the default predicate.", "author": "gsmet", "createdAt": "2020-07-27T15:04:50Z", "path": "extensions/vertx-web/deployment/src/main/java/io/quarkus/vertx/web/deployment/VertxWebProcessor.java", "diffHunk": "@@ -599,6 +611,17 @@ void implementInvoke(HandlerDescriptor descriptor, BeanInfo bean, MethodInfo met\n         invoke.returnValue(null);\n     }\n \n+    private static final List<DotName> TYPES_IGNORED_FOR_REFLECTION = Arrays.asList(io.quarkus.arc.processor.DotNames.STRING,\n+            DotNames.BUFFER, DotNames.JSON_ARRAY, DotNames.JSON_OBJECT);\n+\n+    private static void registerForReflection(Type contentType,\n+            BuildProducer<ReflectiveHierarchyBuildItem> reflectiveHierarchy) {\n+        if (TYPES_IGNORED_FOR_REFLECTION.contains(contentType.name())) {\n+            return;\n+        }\n+        reflectiveHierarchy.produce(new ReflectiveHierarchyBuildItem(contentType, TYPES_IGNORED_FOR_REFLECTION::contains));", "originalCommit": "d23ca45cd8f93f38492695c55649c55580113b87", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM3OTg2OQ==", "url": "https://github.com/quarkusio/quarkus/pull/10992#discussion_r461379869", "bodyText": "Fixed.", "author": "mkouba", "createdAt": "2020-07-28T07:38:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk1ODc1OA=="}], "type": "inlineReview"}, {"oid": "ce5272ec6c5f00bbca6cb9d67c0d8ab308713a40", "url": "https://github.com/quarkusio/quarkus/commit/ce5272ec6c5f00bbca6cb9d67c0d8ab308713a40", "message": "Reactive routes - register return/body types for reflection if needed\n\n- resolves #10893", "committedDate": "2020-07-28T07:37:58Z", "type": "commit"}, {"oid": "ce5272ec6c5f00bbca6cb9d67c0d8ab308713a40", "url": "https://github.com/quarkusio/quarkus/commit/ce5272ec6c5f00bbca6cb9d67c0d8ab308713a40", "message": "Reactive routes - register return/body types for reflection if needed\n\n- resolves #10893", "committedDate": "2020-07-28T07:37:58Z", "type": "forcePushed"}]}