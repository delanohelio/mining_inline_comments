{"pr_number": 8563, "pr_title": "Hibernate projection inside Hibernate with Panache", "pr_createdAt": "2020-04-14T11:34:33Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/8563", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkwMTQ1Mw==", "url": "https://github.com/quarkusio/quarkus/pull/8563#discussion_r408901453", "bodyText": "Huh, this is a sneaky mutation that changes the type of this query. I'm not sure this is a great idea. Why not return a new query object?", "author": "FroMage", "createdAt": "2020-04-15T14:48:06Z", "path": "extensions/panache/hibernate-orm-panache/runtime/src/main/java/io/quarkus/hibernate/orm/panache/runtime/PanacheQueryImpl.java", "diffHunk": "@@ -36,16 +41,66 @@\n \n     private Range range;\n \n-    PanacheQueryImpl(EntityManager em, javax.persistence.Query jpaQuery, String query, Object paramsArrayOrMap) {\n+    PanacheQueryImpl(EntityManager em, String query, String sort, Object paramsArrayOrMap) {\n         this.em = em;\n-        this.jpaQuery = jpaQuery;\n         this.query = query;\n+        this.sort = sort;\n         this.paramsArrayOrMap = paramsArrayOrMap;\n+\n+        if (JpaOperations.isNamedQuery(query)) {\n+            String namedQuery = query.substring(1);\n+            this.jpaQuery = em.createNamedQuery(namedQuery);\n+        } else {\n+            this.jpaQuery = em.createQuery(sort != null ? query + sort : query);\n+        }\n+\n+        if (paramsArrayOrMap instanceof Map)\n+            JpaOperations.bindParameters(jpaQuery, (Map<String, Object>) paramsArrayOrMap);\n+        else\n+            JpaOperations.bindParameters(jpaQuery, (Object[]) paramsArrayOrMap);\n+\n         page = new Page(0, Integer.MAX_VALUE);\n     }\n \n     // Builder\n \n+    @Override\n+    public <T> PanacheQuery<T> project(Class<T> type) {\n+        if (JpaOperations.isNamedQuery(query)) {\n+            throw new PanacheQueryException(\"Unable to perform a projection on a named query\");\n+        }\n+\n+        // We use the first constructor that we found and use the parameter names,\n+        // so the projection class must have only one constructor,\n+        // and the application must be built with parameter names.\n+        // Maybe this should be improved some days ...\n+        Constructor<?> constructor = type.getDeclaredConstructors()[0];\n+\n+        // build select clause with a constructor expression\n+        StringBuilder select = new StringBuilder(\"SELECT new \").append(type.getName()).append(\" (\");\n+        int selectInitialLength = select.length();\n+        for (Parameter parameter : constructor.getParameters()) {\n+            if (!parameter.isNamePresent()) {\n+                throw new PanacheQueryException(\n+                        \"Your application must be built with parameter names, this should be the default if\" +\n+                                \" using Quarkus artifacts. Check the maven or gradle compiler configuration to include '-parameters'.\");\n+            }\n+\n+            if (select.length() > selectInitialLength) {\n+                select.append(\", \");\n+            }\n+            select.append(parameter.getName());\n+        }\n+        select.append(\") \");\n+\n+        this.jpaQuery = em.createQuery(sort != null ? select.toString() + query + sort : select.toString() + query);\n+        if (paramsArrayOrMap instanceof Map)\n+            JpaOperations.bindParameters(jpaQuery, (Map<String, Object>) paramsArrayOrMap);\n+        else\n+            JpaOperations.bindParameters(jpaQuery, (Object[]) paramsArrayOrMap);\n+        return (PanacheQuery<T>) this;", "originalCommit": "7541fd10219fec97939b4f35ffae3c6dc558e18f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM0NTgxOQ==", "url": "https://github.com/quarkusio/quarkus/pull/8563#discussion_r409345819", "bodyText": "PanacheQuery is a statefull object where you can mutate the underlying JPA query object via multiple operations (lock, hint, pagination, ...).\nSo I stick to the same principle here, projection is just another way to mutate the query before firing it to the database by adding a SELECT clause.\nI start thinking that a refactoring should be needed to implements something closer to a builder, each operation on PanacheQuery prior to retrieving the list of result should just update PanacheQuery internal state then when we get the resultList we build the JPA query.\nWith this, the order of the operation done on the query (see your previous comment) has no importance.", "author": "loicmathieu", "createdAt": "2020-04-16T07:40:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkwMTQ1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM0ODU1Mg==", "url": "https://github.com/quarkusio/quarkus/pull/8563#discussion_r409348552", "bodyText": "And this is what we did for MongoDB with Panache: we create a projection document and change the type of the query. So it's consistent!\nhttps://github.com/quarkusio/quarkus/blob/master/extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/runtime/PanacheQueryImpl.java#L45", "author": "loicmathieu", "createdAt": "2020-04-16T07:45:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkwMTQ1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUyMzU2OA==", "url": "https://github.com/quarkusio/quarkus/pull/8563#discussion_r409523568", "bodyText": "Well let me show you the problem with changing the runtime type of an object:\nPanacheQuery<Order> query = Order.find(\"name\", \"Stef\");\nPanacheQuery<OrderName> otherQuery = query.project(OrderName.class);\nOrder order = query.firstResult(); // ClassCastException\nIt's fine to mutate the state of an object, but mutating its type is generally not done.", "author": "FroMage", "createdAt": "2020-04-16T12:41:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkwMTQ1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA5MzA0NA==", "url": "https://github.com/quarkusio/quarkus/pull/8563#discussion_r410093044", "bodyText": "I agree this is not convenient but if we create a new PanacheQuery for projection it will complexify the implementation and adds maintenance burden in case we want to copy the state of the previous query to the next. Each time we update PanacheQuery state management we will need to take care of updating the project method ...\nThe parameter type of PanacheQuery is the return type of the query, this is a component of it's state but I agree this is not very elegant.\nI'll take some time to think about this ;)", "author": "loicmathieu", "createdAt": "2020-04-17T09:07:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkwMTQ1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIyNjA0MA==", "url": "https://github.com/quarkusio/quarkus/pull/8563#discussion_r410226040", "bodyText": "Just make a constructor of PanacheQueryImpl(PanacheQueryImpl) which copies the setup and it's all in one place when we add new state. Don't do that in the project method.", "author": "FroMage", "createdAt": "2020-04-17T13:35:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkwMTQ1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIxMTcxNw==", "url": "https://github.com/quarkusio/quarkus/pull/8563#discussion_r411211717", "bodyText": "Good idea, I implemented it", "author": "loicmathieu", "createdAt": "2020-04-20T09:00:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkwMTQ1Mw=="}], "type": "inlineReview"}, {"oid": "807c7b843c916d79e89137677483aa28147e5eea", "url": "https://github.com/quarkusio/quarkus/commit/807c7b843c916d79e89137677483aa28147e5eea", "message": "Create a new query for a projection query", "committedDate": "2020-04-20T11:18:42Z", "type": "forcePushed"}, {"oid": "ab2b351280bff217e72959cc3a5d865f37c7989b", "url": "https://github.com/quarkusio/quarkus/commit/ab2b351280bff217e72959cc3a5d865f37c7989b", "message": "Create a new query for a projection query", "committedDate": "2020-04-20T11:23:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM3MTE1MA==", "url": "https://github.com/quarkusio/quarkus/pull/8563#discussion_r411371150", "bodyText": "I think this method should be called createQueryNoPaging or something like that.", "author": "FroMage", "createdAt": "2020-04-20T13:20:46Z", "path": "extensions/panache/hibernate-orm-panache/runtime/src/main/java/io/quarkus/hibernate/orm/panache/runtime/PanacheQueryImpl.java", "diffHunk": "@@ -243,5 +311,33 @@ private void manageOffsets(int maxResults) {\n             options.setFirstRow(null);\n         }\n         jpaQuery.setMaxResults(maxResults);\n+\n+        return jpaQuery;\n+    }\n+\n+    private Query innerCreateQuery() {", "originalCommit": "ab2b351280bff217e72959cc3a5d865f37c7989b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNjQ1Mg==", "url": "https://github.com/quarkusio/quarkus/pull/8563#discussion_r411436452", "bodyText": "createBaseQuery reads better no ?", "author": "loicmathieu", "createdAt": "2020-04-20T14:44:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM3MTE1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM3MTk2Mw==", "url": "https://github.com/quarkusio/quarkus/pull/8563#discussion_r411371963", "bodyText": "this name feels wrong, isn't it an order-by clause? How about orderByPart?", "author": "FroMage", "createdAt": "2020-04-20T13:21:49Z", "path": "extensions/panache/hibernate-orm-panache/runtime/src/main/java/io/quarkus/hibernate/orm/panache/runtime/PanacheQueryImpl.java", "diffHunk": "@@ -24,25 +27,74 @@\n     private static final Pattern SELECT_PATTERN = Pattern.compile(\"^\\\\s*SELECT\\\\s+((?:DISTINCT\\\\s+)?[^\\\\s]+)\\\\s+([^\\\\s]+.*)$\",\n             Pattern.CASE_INSENSITIVE);\n \n-    private Query jpaQuery;\n     private Object paramsArrayOrMap;\n     private String query;\n+    private String countQuery;\n+    private String sort;", "originalCommit": "ab2b351280bff217e72959cc3a5d865f37c7989b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNjA5NQ==", "url": "https://github.com/quarkusio/quarkus/pull/8563#discussion_r411436095", "bodyText": "Yes simply orderBy feels better", "author": "loicmathieu", "createdAt": "2020-04-20T14:43:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM3MTk2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM3MzE0MA==", "url": "https://github.com/quarkusio/quarkus/pull/8563#discussion_r411373140", "bodyText": "Can we add some tests with queries and parameters too please?", "author": "FroMage", "createdAt": "2020-04-20T13:23:31Z", "path": "integration-tests/hibernate-orm-panache/src/main/java/io/quarkus/it/panache/TestEndpoint.java", "diffHunk": "@@ -1077,6 +1077,20 @@ public String testModel2() {\n         return \"OK\";\n     }\n \n+    @GET\n+    @Path(\"projection\")\n+    @Transactional\n+    public String testProjection() {\n+        Assertions.assertEquals(1, Person.count());\n+\n+        PersonName person = Person.findAll().project(PersonName.class).firstResult();\n+        Assertions.assertEquals(\"2\", person.name);\n+\n+        Assertions.assertEquals(1, Person.findAll().project(PersonName.class).count());", "originalCommit": "ab2b351280bff217e72959cc3a5d865f37c7989b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNzE0MQ==", "url": "https://github.com/quarkusio/quarkus/pull/8563#discussion_r411437141", "bodyText": "I agree it misses some tests :)", "author": "loicmathieu", "createdAt": "2020-04-20T14:45:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM3MzE0MA=="}], "type": "inlineReview"}, {"oid": "eccd1cbf7f1712a8a5521ca02c03b6948e0b99d5", "url": "https://github.com/quarkusio/quarkus/commit/eccd1cbf7f1712a8a5521ca02c03b6948e0b99d5", "message": "Implements projection inside Hibernate with Panache\n\nFixes #6261", "committedDate": "2020-04-20T14:55:24Z", "type": "forcePushed"}, {"oid": "d8009bac7bb034718690f35ab6191f1dd5b0bc20", "url": "https://github.com/quarkusio/quarkus/commit/d8009bac7bb034718690f35ab6191f1dd5b0bc20", "message": "Implements projection inside Hibernate with Panache\n\nFixes #6261", "committedDate": "2020-04-21T07:20:17Z", "type": "commit"}, {"oid": "d8009bac7bb034718690f35ab6191f1dd5b0bc20", "url": "https://github.com/quarkusio/quarkus/commit/d8009bac7bb034718690f35ab6191f1dd5b0bc20", "message": "Implements projection inside Hibernate with Panache\n\nFixes #6261", "committedDate": "2020-04-21T07:20:17Z", "type": "forcePushed"}]}