{"pr_number": 8549, "pr_title": "Panache check", "pr_createdAt": "2020-04-13T11:23:17Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/8549", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ4MDQ5Ng==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r407480496", "bodyText": "Hmm, I think we do not need to specify the configuration file since it is application.properties so it'll be picked by default.", "author": "machi1990", "createdAt": "2020-04-13T13:34:31Z", "path": "extensions/panache/mongodb-panache/deployment/src/test/java/io/quarkus/mongodb/panache/DuplicateIdReactiveMongoEntityTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package io.quarkus.mongodb.panache;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.junit.platform.launcher.Launcher;\n+import org.junit.platform.launcher.LauncherDiscoveryRequest;\n+import org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;\n+import org.junit.platform.launcher.core.LauncherFactory;\n+import org.junit.platform.launcher.listeners.SummaryGeneratingListener;\n+import org.junit.platform.launcher.listeners.TestExecutionSummary;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DuplicateIdReactiveMongoEntityTest {\n+    public static class DuplicateIdReactiveMongoEntityTestTest {\n+        @RegisterExtension\n+        static QuarkusUnitTest runner = new QuarkusUnitTest()\n+                .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                        .addClasses(DuplicateIdReactiveMongoEntity.class))\n+                .withConfigurationResource(\"application.properties\");", "originalCommit": "d3cab3ecaa189266224a763f32327cec2109c6fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzMDIxNw==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r407930217", "bodyText": "True: this was copied from an existing test but not needed.\nRemoved.", "author": "loicmathieu", "createdAt": "2020-04-14T07:42:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ4MDQ5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ4MTU2Mg==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r407481562", "bodyText": "I wonder if in this test case we could have used this pattern instead https://github.com/quarkusio/quarkus/blob/master/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/sql_load_script/InvalidMultilineSqlLoadScriptTestCase.java#L17 ?", "author": "machi1990", "createdAt": "2020-04-13T13:37:04Z", "path": "extensions/panache/mongodb-panache/deployment/src/test/java/io/quarkus/mongodb/panache/DuplicateIdReactiveMongoEntityTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package io.quarkus.mongodb.panache;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.junit.platform.launcher.Launcher;\n+import org.junit.platform.launcher.LauncherDiscoveryRequest;\n+import org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;\n+import org.junit.platform.launcher.core.LauncherFactory;\n+import org.junit.platform.launcher.listeners.SummaryGeneratingListener;\n+import org.junit.platform.launcher.listeners.TestExecutionSummary;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DuplicateIdReactiveMongoEntityTest {\n+    public static class DuplicateIdReactiveMongoEntityTestTest {\n+        @RegisterExtension\n+        static QuarkusUnitTest runner = new QuarkusUnitTest()\n+                .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                        .addClasses(DuplicateIdReactiveMongoEntity.class))\n+                .withConfigurationResource(\"application.properties\");\n+\n+        @Test\n+        void shouldThrow() {\n+            DuplicateIdMongoEntity.findAll();\n+        }\n+    }\n+\n+    @Test\n+    void verifyIdTest() {\n+        // as the test will fail to be created, we need a way to launch it manually to assert\n+        // that there was a build issue (the BuildException will be thrown at test instanciation time).\n+        SummaryGeneratingListener listener = new SummaryGeneratingListener();\n+        LauncherDiscoveryRequest request = LauncherDiscoveryRequestBuilder.request()\n+                .selectors(selectClass(DuplicateIdReactiveMongoEntityTestTest.class))\n+                .build();\n+        Launcher launcher = LauncherFactory.create();\n+        launcher.registerTestExecutionListeners(listener);\n+        launcher.execute(request);\n+\n+        // we check that the test failed\n+        TestExecutionSummary summary = listener.getSummary();\n+        assertEquals(1, summary.getFailures().size());\n+        String exceptionMsg = summary.getFailures().get(0).getException().getMessage();\n+        assertTrue(exceptionMsg.contains(\"io.quarkus.builder.BuildException\"));\n+        assertTrue(exceptionMsg.contains(\"You provide a MongoDB identifier via @BsonId inside\"));\n+    }", "originalCommit": "d3cab3ecaa189266224a763f32327cec2109c6fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkyNTgxNA==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r407925814", "bodyText": "Yes, this was even documented in the extionsion guide, I need to re-read it carefully ;)\n\nIf you want to test that an extension properly fails at build time, use the setExpectedException method:", "author": "loicmathieu", "createdAt": "2020-04-14T07:35:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ4MTU2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkyOTkwMw==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r407929903", "bodyText": "I updated the test with .setExpectedException(BuildException.class) instead of using the Launcher", "author": "loicmathieu", "createdAt": "2020-04-14T07:42:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ4MTU2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ4MTg0NQ==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r407481845", "bodyText": "see this comment https://github.com/quarkusio/quarkus/pull/8549/files#r407481562 and let me know what you think", "author": "machi1990", "createdAt": "2020-04-13T13:37:46Z", "path": "extensions/panache/mongodb-panache/deployment/src/test/java/io/quarkus/mongodb/panache/DuplicateIdMongoEntityTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package io.quarkus.mongodb.panache;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.junit.platform.launcher.Launcher;\n+import org.junit.platform.launcher.LauncherDiscoveryRequest;\n+import org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;\n+import org.junit.platform.launcher.core.LauncherFactory;\n+import org.junit.platform.launcher.listeners.SummaryGeneratingListener;\n+import org.junit.platform.launcher.listeners.TestExecutionSummary;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DuplicateIdMongoEntityTest {\n+    public static class DuplicateIdMongoEntityTestTest {\n+        @RegisterExtension\n+        static QuarkusUnitTest runner = new QuarkusUnitTest()\n+                .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                        .addClasses(DuplicateIdMongoEntity.class))\n+                .withConfigurationResource(\"application.properties\");\n+\n+        @Test\n+        void shouldThrow() {\n+            DuplicateIdMongoEntity.findAll();\n+        }\n+    }\n+\n+    @Test\n+    void verifyIdTest() {", "originalCommit": "d3cab3ecaa189266224a763f32327cec2109c6fb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "408d8faba5c6f0dcb998de6e9a5916ef238b450f", "url": "https://github.com/quarkusio/quarkus/commit/408d8faba5c6f0dcb998de6e9a5916ef238b450f", "message": "Check @Id usage inside Hibernate with Panache", "committedDate": "2020-04-14T07:40:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxNzMyNA==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r408917324", "bodyText": "This should be recursive: it is possible that we have superclasses between the entity class and PanacheEntity.", "author": "FroMage", "createdAt": "2020-04-15T15:08:23Z", "path": "extensions/panache/hibernate-orm-panache/deployment/src/main/java/io/quarkus/hibernate/orm/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -78,6 +81,16 @@ void build(CombinedIndexBuildItem index,\n             BuildProducer<PanacheEntityClassesBuildItem> entityClasses,\n             BuildProducer<NamedQueryEntityClassBuildStep> namedQueries) throws Exception {\n \n+        // we verify that no ID fields are defined (via @BsonId) when extending PanacheMongoEntity\n+        for (AnnotationInstance annotationInstance : index.getIndex().getAnnotations(DOTNAME_ID)) {\n+            ClassInfo info = io.quarkus.panache.common.deployment.JandexUtil.getEnclosingClass(annotationInstance);\n+            if (info.superName().equals(DOTNAME_PANACHE_ENTITY)) {", "originalCommit": "408d8faba5c6f0dcb998de6e9a5916ef238b450f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5MTkyMw==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r409391923", "bodyText": "Done, I climb up the hierarchy of classes.", "author": "loicmathieu", "createdAt": "2020-04-16T08:54:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxNzMyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxNzc4Ng==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r408917786", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    \"your class should extend PanacheEntityBase instead\", Collections.emptyList());\n          \n          \n            \n                                    \"your class should extend PanacheEntityBase instead, or use the id provided by PanacheEntity\", Collections.emptyList());", "author": "FroMage", "createdAt": "2020-04-15T15:08:55Z", "path": "extensions/panache/hibernate-orm-panache/deployment/src/main/java/io/quarkus/hibernate/orm/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -78,6 +81,16 @@ void build(CombinedIndexBuildItem index,\n             BuildProducer<PanacheEntityClassesBuildItem> entityClasses,\n             BuildProducer<NamedQueryEntityClassBuildStep> namedQueries) throws Exception {\n \n+        // we verify that no ID fields are defined (via @BsonId) when extending PanacheMongoEntity\n+        for (AnnotationInstance annotationInstance : index.getIndex().getAnnotations(DOTNAME_ID)) {\n+            ClassInfo info = io.quarkus.panache.common.deployment.JandexUtil.getEnclosingClass(annotationInstance);\n+            if (info.superName().equals(DOTNAME_PANACHE_ENTITY)) {\n+                throw new BuildException(\"You provide a JPA identifier via @Id inside '\" + info.name() +\n+                        \"' but one is already provided by PanacheEntity, \" +\n+                        \"your class should extend PanacheEntityBase instead\", Collections.emptyList());", "originalCommit": "408d8faba5c6f0dcb998de6e9a5916ef238b450f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMDQ2NA==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r408920464", "bodyText": "Same remark about inheritance.", "author": "FroMage", "createdAt": "2020-04-15T15:12:25Z", "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -133,7 +136,17 @@ void buildImperative(CombinedIndexBuildItem index,\n             BuildProducer<BytecodeTransformerBuildItem> transformers,\n             BuildProducer<ReflectiveClassBuildItem> reflectiveClass,\n             BuildProducer<PropertyMappingClassBuildStep> propertyMappingClass,\n-            BuildProducer<PanacheEntityClassesBuildItem> entityClasses) {\n+            BuildProducer<PanacheEntityClassesBuildItem> entityClasses) throws BuildException {\n+\n+        // we verify that no ID fields are defined (via @BsonId) when extending PanacheMongoEntity\n+        for (AnnotationInstance annotationInstance : index.getIndex().getAnnotations(DOTNAME_BSON_ID)) {\n+            ClassInfo info = io.quarkus.panache.common.deployment.JandexUtil.getEnclosingClass(annotationInstance);\n+            if (info.superName().equals(DOTNAME_PANACHE_ENTITY)) {", "originalCommit": "408d8faba5c6f0dcb998de6e9a5916ef238b450f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5MTk2OQ==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r409391969", "bodyText": "Done, I climb up the hierarchy of classes.", "author": "loicmathieu", "createdAt": "2020-04-16T08:54:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMDQ2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMDc3Ng==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r408920776", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    \"your class should extend PanacheMongoEntityBase instead\", Collections.emptyList());\n          \n          \n            \n                                    \"your class should extend PanacheMongoEntityBase instead, or use the id provided by PanageMongoEntity\", Collections.emptyList());", "author": "FroMage", "createdAt": "2020-04-15T15:12:48Z", "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -133,7 +136,17 @@ void buildImperative(CombinedIndexBuildItem index,\n             BuildProducer<BytecodeTransformerBuildItem> transformers,\n             BuildProducer<ReflectiveClassBuildItem> reflectiveClass,\n             BuildProducer<PropertyMappingClassBuildStep> propertyMappingClass,\n-            BuildProducer<PanacheEntityClassesBuildItem> entityClasses) {\n+            BuildProducer<PanacheEntityClassesBuildItem> entityClasses) throws BuildException {\n+\n+        // we verify that no ID fields are defined (via @BsonId) when extending PanacheMongoEntity\n+        for (AnnotationInstance annotationInstance : index.getIndex().getAnnotations(DOTNAME_BSON_ID)) {\n+            ClassInfo info = io.quarkus.panache.common.deployment.JandexUtil.getEnclosingClass(annotationInstance);\n+            if (info.superName().equals(DOTNAME_PANACHE_ENTITY)) {\n+                throw new BuildException(\"You provide a MongoDB identifier via @BsonId inside '\" + info.name() +\n+                        \"' but one is already provided by PanacheMongoEntity, \" +\n+                        \"your class should extend PanacheMongoEntityBase instead\", Collections.emptyList());", "originalCommit": "408d8faba5c6f0dcb998de6e9a5916ef238b450f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMTAyNA==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r408921024", "bodyText": "Same remark about inheritance.", "author": "FroMage", "createdAt": "2020-04-15T15:13:05Z", "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -214,7 +227,17 @@ void buildMutiny(CombinedIndexBuildItem index,\n             ApplicationIndexBuildItem applicationIndex,\n             BuildProducer<ReflectiveClassBuildItem> reflectiveClass,\n             BuildProducer<PropertyMappingClassBuildStep> propertyMappingClass,\n-            BuildProducer<BytecodeTransformerBuildItem> transformers) {\n+            BuildProducer<BytecodeTransformerBuildItem> transformers) throws BuildException {\n+\n+        // we verify that no ID fields are defined (via @BsonId) when extending ReactivePanacheMongoEntity\n+        for (AnnotationInstance annotationInstance : index.getIndex().getAnnotations(DOTNAME_BSON_ID)) {\n+            ClassInfo info = io.quarkus.panache.common.deployment.JandexUtil.getEnclosingClass(annotationInstance);\n+            if (info.superName().equals(DOTNAME_MUTINY_PANACHE_ENTITY)) {", "originalCommit": "408d8faba5c6f0dcb998de6e9a5916ef238b450f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5MjA0NA==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r409392044", "bodyText": "Done, I climb up the hierarchy of classes.", "author": "loicmathieu", "createdAt": "2020-04-16T08:54:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMTAyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMTI1Nw==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r408921257", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    \"your class should extend ReactivePanacheMongoEntityBase instead\", Collections.emptyList());\n          \n          \n            \n                                    \"your class should extend ReactivePanacheMongoEntityBase instead, or use the id provided by ReactivePanacheMongoEntity\", Collections.emptyList());", "author": "FroMage", "createdAt": "2020-04-15T15:13:24Z", "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -214,7 +227,17 @@ void buildMutiny(CombinedIndexBuildItem index,\n             ApplicationIndexBuildItem applicationIndex,\n             BuildProducer<ReflectiveClassBuildItem> reflectiveClass,\n             BuildProducer<PropertyMappingClassBuildStep> propertyMappingClass,\n-            BuildProducer<BytecodeTransformerBuildItem> transformers) {\n+            BuildProducer<BytecodeTransformerBuildItem> transformers) throws BuildException {\n+\n+        // we verify that no ID fields are defined (via @BsonId) when extending ReactivePanacheMongoEntity\n+        for (AnnotationInstance annotationInstance : index.getIndex().getAnnotations(DOTNAME_BSON_ID)) {\n+            ClassInfo info = io.quarkus.panache.common.deployment.JandexUtil.getEnclosingClass(annotationInstance);\n+            if (info.superName().equals(DOTNAME_MUTINY_PANACHE_ENTITY)) {\n+                throw new BuildException(\"You provide a MongoDB identifier via @BsonId inside '\" + info.name() +\n+                        \"' but one is already provided by ReactivePanacheMongoEntity, \" +\n+                        \"your class should extend ReactivePanacheMongoEntityBase instead\", Collections.emptyList());", "originalCommit": "408d8faba5c6f0dcb998de6e9a5916ef238b450f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f9a3443053d0e561a6cce87924c35fe59e71eb37", "url": "https://github.com/quarkusio/quarkus/commit/f9a3443053d0e561a6cce87924c35fe59e71eb37", "message": "Check @Id usage inside Hibernate with Panache", "committedDate": "2020-04-16T08:52:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUxOTY3NQ==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r409519675", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static boolean isChildOf(IndexView index, ClassInfo info, DotName parentName) throws BuildException {\n          \n          \n            \n                public static boolean isSubclassOf(IndexView index, ClassInfo info, DotName parentName) throws BuildException {\n          \n      \n    \n    \n  \n\nGiven that this is only for superclasses (not interfaces) the name should make it clear.", "author": "FroMage", "createdAt": "2020-04-16T12:35:01Z", "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/JandexUtil.java", "diffHunk": "@@ -201,4 +206,40 @@ public static boolean containsMethod(ClassInfo classInfo, MethodInfo methodInfo)\n         }\n         return false;\n     }\n+\n+    public static ClassInfo getEnclosingClass(AnnotationInstance annotationInstance) {\n+        switch (annotationInstance.target().kind()) {\n+            case FIELD:\n+                return annotationInstance.target().asField().declaringClass();\n+            case METHOD:\n+                return annotationInstance.target().asMethod().declaringClass();\n+            case METHOD_PARAMETER:\n+                return annotationInstance.target().asMethodParameter().method().declaringClass();\n+            case CLASS:\n+                return annotationInstance.target().asClass();\n+            case TYPE:\n+                return annotationInstance.target().asType().asClass(); // TODO is it legal here or should I throw ?\n+            default:\n+                throw new RuntimeException(); // this should not occurs\n+        }\n+    }\n+\n+    public static boolean isChildOf(IndexView index, ClassInfo info, DotName parentName) throws BuildException {", "originalCommit": "f9a3443053d0e561a6cce87924c35fe59e71eb37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0ce1a822e2b2218b7c911c04b8e550113a1cac3f", "url": "https://github.com/quarkusio/quarkus/commit/0ce1a822e2b2218b7c911c04b8e550113a1cac3f", "message": "Check @Id usage inside Hibernate with Panache", "committedDate": "2020-04-17T08:11:56Z", "type": "forcePushed"}, {"oid": "eb5da3488e68f7bf8f437480ce81aa68a13d79d4", "url": "https://github.com/quarkusio/quarkus/commit/eb5da3488e68f7bf8f437480ce81aa68a13d79d4", "message": "Move check to the validation phase", "committedDate": "2020-04-17T08:36:20Z", "type": "forcePushed"}, {"oid": "f10ee649ed60f01d65bc430935f1fde15e46b68b", "url": "https://github.com/quarkusio/quarkus/commit/f10ee649ed60f01d65bc430935f1fde15e46b68b", "message": "Move check to the validation phase", "committedDate": "2020-04-17T08:38:47Z", "type": "forcePushed"}, {"oid": "bb82b9667fa07eb50621eeb1385d2380403e38d5", "url": "https://github.com/quarkusio/quarkus/commit/bb82b9667fa07eb50621eeb1385d2380403e38d5", "message": "Move check to the validation phase", "committedDate": "2020-04-20T14:26:47Z", "type": "forcePushed"}, {"oid": "2f410c14c572c24a9dca08bd2f39ea0fbda605e9", "url": "https://github.com/quarkusio/quarkus/commit/2f410c14c572c24a9dca08bd2f39ea0fbda605e9", "message": "Check @BsonId usage inside MongoDB with Panache", "committedDate": "2020-04-22T08:16:58Z", "type": "commit"}, {"oid": "32dc77c5746c53bd734894477591de4335a96a83", "url": "https://github.com/quarkusio/quarkus/commit/32dc77c5746c53bd734894477591de4335a96a83", "message": "Check @Id usage inside Hibernate with Panache", "committedDate": "2020-04-22T08:17:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxNzA0MA==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414017040", "bodyText": "Seems like the exception is not thrown anymore..", "author": "machi1990", "createdAt": "2020-04-23T18:13:24Z", "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -137,7 +139,7 @@ void buildImperative(CombinedIndexBuildItem index,\n             BuildProducer<ReflectiveClassBuildItem> reflectiveClass,\n             BuildProducer<PropertyMappingClassBuildStep> propertyMappingClass,\n             BuildProducer<PanacheEntityClassesBuildItem> entityClasses,\n-            List<PanacheMethodCustomizerBuildItem> methodCustomizersBuildItems) {\n+            List<PanacheMethodCustomizerBuildItem> methodCustomizersBuildItems) throws BuildException {", "originalCommit": "32dc77c5746c53bd734894477591de4335a96a83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM2MzM0MA==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414363340", "bodyText": "Removed", "author": "loicmathieu", "createdAt": "2020-04-24T07:39:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxNzA0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxNzIyMw==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414017223", "bodyText": "Same here the exception is not thrown anymore", "author": "machi1990", "createdAt": "2020-04-23T18:13:42Z", "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -222,11 +224,10 @@ void buildMutiny(CombinedIndexBuildItem index,\n             BuildProducer<ReflectiveClassBuildItem> reflectiveClass,\n             BuildProducer<PropertyMappingClassBuildStep> propertyMappingClass,\n             BuildProducer<BytecodeTransformerBuildItem> transformers,\n-            List<PanacheMethodCustomizerBuildItem> methodCustomizersBuildItems) {\n+            List<PanacheMethodCustomizerBuildItem> methodCustomizersBuildItems) throws BuildException {", "originalCommit": "32dc77c5746c53bd734894477591de4335a96a83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM2MzQ3Mg==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414363472", "bodyText": "Remove", "author": "loicmathieu", "createdAt": "2020-04-24T07:40:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxNzIyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxODEwOQ==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414018109", "bodyText": "nitpick: We could maybe have an import of DOTNAME_OBJECT  and avoid this long line", "author": "machi1990", "createdAt": "2020-04-23T18:15:05Z", "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -344,7 +370,7 @@ private void extractMappings(Map<String, String> classPropertyMapping, ClassInfo\n         }\n \n         // climb up the hierarchy of types\n-        if (!target.superClassType().name().equals(DOTNAME_OBJECT)) {\n+        if (!target.superClassType().name().equals(io.quarkus.panache.common.deployment.JandexUtil.DOTNAME_OBJECT)) {", "originalCommit": "32dc77c5746c53bd734894477591de4335a96a83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAyMzIzMQ==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414023231", "bodyText": "Or we could just import JandexUtil since it seems to be used everywhere", "author": "machi1990", "createdAt": "2020-04-23T18:22:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxODEwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM1OTMyOQ==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414359329", "bodyText": "There is two JandexUtil, one from core deployment and one from Panache.\nI think we need to rename the panache one PanacheJandexUtil to be able to import it.\nI'll need @FroMage blessing on this rename as he is the original author ;)", "author": "loicmathieu", "createdAt": "2020-04-24T07:33:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxODEwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM2NDIxOA==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414364218", "bodyText": "Okay. Can be done in another PR I suppose. Not a biggie.", "author": "machi1990", "createdAt": "2020-04-24T07:41:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxODEwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQxMjk1NQ==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414412955", "bodyText": "If I get @stuartwdouglas 's blessing I would move most of our JandexUtil's methods into the deployment one, because it has so many useful methods for everyone, dealing with producing ASM from jandex-using code, that I'm sure other extensions had to reimplement a lot of it.", "author": "FroMage", "createdAt": "2020-04-24T08:59:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxODEwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI3ODY3Mw==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r416278673", "bodyText": "Sounds reasonable.", "author": "stuartwdouglas", "createdAt": "2020-04-28T02:22:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxODEwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1MDc4NA==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r417150784", "bodyText": "OK thanks. I'll open a mail discussion before doing that PR, to make sure other JandeUtil classes don't already exist.", "author": "FroMage", "createdAt": "2020-04-29T08:32:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxODEwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxOTEzOQ==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414019139", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // this can happens if the parent is not inside the Yandex index\n          \n          \n            \n                        // this can happens if the parent is not inside the Jandex index", "author": "machi1990", "createdAt": "2020-04-23T18:16:40Z", "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/JandexUtil.java", "diffHunk": "@@ -308,6 +314,42 @@ public static int getLoadOpcode(Type jandexType) {\n         return Opcodes.ALOAD;\n     }\n \n+    public static ClassInfo getEnclosingClass(AnnotationInstance annotationInstance) {\n+        switch (annotationInstance.target().kind()) {\n+            case FIELD:\n+                return annotationInstance.target().asField().declaringClass();\n+            case METHOD:\n+                return annotationInstance.target().asMethod().declaringClass();\n+            case METHOD_PARAMETER:\n+                return annotationInstance.target().asMethodParameter().method().declaringClass();\n+            case CLASS:\n+                return annotationInstance.target().asClass();\n+            case TYPE:\n+                return annotationInstance.target().asType().asClass(); // TODO is it legal here or should I throw ?\n+            default:\n+                throw new RuntimeException(); // this should not occurs\n+        }\n+    }\n+\n+    public static boolean isSubclassOf(IndexView index, ClassInfo info, DotName parentName) throws BuildException {\n+        if (info.superName().equals(DOTNAME_OBJECT)) {\n+            return false;\n+        }\n+        if (info.superName().equals(parentName)) {\n+            return true;\n+        }\n+\n+        // climb up the hierarchy of classes\n+        Type superType = info.superClassType();\n+        ClassInfo superClass = index.getClassByName(superType.name());\n+        if (superClass == null) {\n+            // this can happens if the parent is not inside the Yandex index", "originalCommit": "32dc77c5746c53bd734894477591de4335a96a83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM2MTI4MA==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414361280", "bodyText": "Ah funny, I always pronounce Jandex Yandex and this time I wrote it ;)\nYandex is the equivalent of Google in Russia ... integrated once in a website for Russia Maps ...", "author": "loicmathieu", "createdAt": "2020-04-24T07:36:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxOTEzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM2MzYzNw==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414363637", "bodyText": "Fixed", "author": "loicmathieu", "createdAt": "2020-04-24T07:40:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxOTEzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxOTM3MQ==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414019371", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new RuntimeException(); // this should not occurs\n          \n          \n            \n                            throw new RuntimeException(); // this should not occur", "author": "machi1990", "createdAt": "2020-04-23T18:16:59Z", "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/JandexUtil.java", "diffHunk": "@@ -308,6 +314,42 @@ public static int getLoadOpcode(Type jandexType) {\n         return Opcodes.ALOAD;\n     }\n \n+    public static ClassInfo getEnclosingClass(AnnotationInstance annotationInstance) {\n+        switch (annotationInstance.target().kind()) {\n+            case FIELD:\n+                return annotationInstance.target().asField().declaringClass();\n+            case METHOD:\n+                return annotationInstance.target().asMethod().declaringClass();\n+            case METHOD_PARAMETER:\n+                return annotationInstance.target().asMethodParameter().method().declaringClass();\n+            case CLASS:\n+                return annotationInstance.target().asClass();\n+            case TYPE:\n+                return annotationInstance.target().asType().asClass(); // TODO is it legal here or should I throw ?\n+            default:\n+                throw new RuntimeException(); // this should not occurs", "originalCommit": "32dc77c5746c53bd734894477591de4335a96a83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM2MzcyNw==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414363727", "bodyText": "Fixed", "author": "loicmathieu", "createdAt": "2020-04-24T07:40:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxOTM3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAyMDQ3Mw==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414020473", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        CombinedIndexBuildItem index) throws BuildException {\n          \n          \n            \n                        CombinedIndexBuildItem index)  {\n          \n      \n    \n    \n  \n\nNo exception is thrown", "author": "machi1990", "createdAt": "2020-04-23T18:18:42Z", "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -300,6 +301,31 @@ void buildMutiny(CombinedIndexBuildItem index,\n         }\n     }\n \n+    @BuildStep\n+    ValidationPhaseBuildItem.ValidationErrorBuildItem validate(ValidationPhaseBuildItem validationPhase,\n+            CombinedIndexBuildItem index) throws BuildException {", "originalCommit": "32dc77c5746c53bd734894477591de4335a96a83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM2MjUxMg==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414362512", "bodyText": "It can be thrown by io.quarkus.panache.common.deployment.JandexUtil.isSubclassOf that delcares it as a checked exception.", "author": "loicmathieu", "createdAt": "2020-04-24T07:38:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAyMDQ3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAyMTI1Mg==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414021252", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        CombinedIndexBuildItem index) throws BuildException {\n          \n          \n            \n                        CombinedIndexBuildItem index)  {\n          \n      \n    \n    \n  \n\nWe do not throw any exception", "author": "machi1990", "createdAt": "2020-04-23T18:19:58Z", "path": "extensions/panache/hibernate-orm-panache/deployment/src/main/java/io/quarkus/hibernate/orm/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -154,6 +157,23 @@ void build(CombinedIndexBuildItem index,\n         }\n     }\n \n+    @BuildStep\n+    ValidationPhaseBuildItem.ValidationErrorBuildItem validate(ValidationPhaseBuildItem validationPhase,\n+            CombinedIndexBuildItem index) throws BuildException {", "originalCommit": "32dc77c5746c53bd734894477591de4335a96a83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM2MjYxNQ==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414362615", "bodyText": "It can be thrown by io.quarkus.panache.common.deployment.JandexUtil.isSubclassOf that delcares it as a checked exception.", "author": "loicmathieu", "createdAt": "2020-04-24T07:38:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAyMTI1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM2MzY2NQ==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414363665", "bodyText": "Ah I might have missed it, sorry.", "author": "machi1990", "createdAt": "2020-04-24T07:40:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAyMTI1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAyMTc4Ng==", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414021786", "bodyText": "static import of DOTNAME_OBJECT  would be better instead of this very long line.\nor we could import JandexUtil at the very least since it seems to be used everywhere.", "author": "machi1990", "createdAt": "2020-04-23T18:20:50Z", "path": "extensions/panache/hibernate-orm-panache/deployment/src/main/java/io/quarkus/hibernate/orm/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -191,7 +211,7 @@ private void lookupNamedQueries(CombinedIndexBuildItem index, DotName name, Set<\n         }\n \n         // climb up the hierarchy of types\n-        if (!classInfo.superClassType().name().equals(DOTNAME_OBJECT)) {\n+        if (!classInfo.superClassType().name().equals(io.quarkus.panache.common.deployment.JandexUtil.DOTNAME_OBJECT)) {", "originalCommit": "32dc77c5746c53bd734894477591de4335a96a83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "be19569747d2a3d313adab5225d69494721ef45b", "url": "https://github.com/quarkusio/quarkus/commit/be19569747d2a3d313adab5225d69494721ef45b", "message": "Check @Id usage inside Hibernate with Panache", "committedDate": "2020-04-24T07:39:11Z", "type": "commit"}, {"oid": "be19569747d2a3d313adab5225d69494721ef45b", "url": "https://github.com/quarkusio/quarkus/commit/be19569747d2a3d313adab5225d69494721ef45b", "message": "Check @Id usage inside Hibernate with Panache", "committedDate": "2020-04-24T07:39:11Z", "type": "forcePushed"}]}