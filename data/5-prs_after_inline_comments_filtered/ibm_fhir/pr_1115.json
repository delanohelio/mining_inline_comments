{"pr_number": 1115, "pr_title": "Issue #1107 - add support for Identifier pattern value constraints", "pr_createdAt": "2020-05-18T19:58:13Z", "pr_url": "https://github.com/IBM/FHIR/pull/1115", "timeline": [{"oid": "9db0f74c539b04d9dbcac0d1d3694786da21d26b", "url": "https://github.com/IBM/FHIR/commit/9db0f74c539b04d9dbcac0d1d3694786da21d26b", "message": "Issue #1107 - add support for Identifier pattern value constraints\n\nSigned-off-by: John T.E. Timm <johntimm@us.ibm.com>", "committedDate": "2020-05-18T19:57:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2MzIzMA==", "url": "https://github.com/IBM/FHIR/pull/1115#discussion_r426863230", "bodyText": "is this change related?", "author": "lmsurpre", "createdAt": "2020-05-18T20:01:48Z", "path": "fhir-path/src/main/java/com/ibm/fhir/path/function/MemberOfFunction.java", "diffHunk": "@@ -150,7 +148,7 @@ public int getMaxArity() {\n \n     private boolean contains(Map<String, Set<String>> codeSetMap, Coding coding) {\n         String system = (coding.getSystem() != null) ? coding.getSystem().getValue() : null;\n-        String version = (coding.getVersion() != null) ? coding.getVersion().getValue() : FHIRRegistry.getInstance().getLatestVersion(system, CodeSystem.class);\n+        String version = (coding.getVersion() != null) ? coding.getVersion().getValue() : null;", "originalCommit": "9db0f74c539b04d9dbcac0d1d3694786da21d26b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2NTQwNg==", "url": "https://github.com/IBM/FHIR/pull/1115#discussion_r426865406", "bodyText": "Only tangentially related. There were warnings associated with a bug in the CARIN BB IG because we were defaulting an unknown version to Latest Version was causing superfluous warnings to be generated. This change makes the code a bit more tolerant.", "author": "JohnTimm", "createdAt": "2020-05-18T20:06:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2MzIzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2NDA1OQ==", "url": "https://github.com/IBM/FHIR/pull/1115#discussion_r426864059", "bodyText": "any way to format this to make it a little simpler to see whats going on?", "author": "lmsurpre", "createdAt": "2020-05-18T20:03:36Z", "path": "fhir-profile/src/main/java/com/ibm/fhir/profile/ConstraintGenerator.java", "diffHunk": "@@ -304,13 +313,38 @@ private String generatePatternValueConstraint(ElementDefinition elementDefinitio\n             CodeableConcept codeableConcept = pattern.as(CodeableConcept.class);\n             Coding coding = codeableConcept.getCoding().get(0);\n             String system = (coding.getSystem() != null) ? coding.getSystem().getValue() : null;\n+\n             sb.append(\".where(coding.where(\");\n+\n             if (system != null) {\n                 sb.append(\"system = '\").append(system).append(\"' and \");\n             }\n-            sb.append(\"code = '\")\n-                .append(coding.getCode().getValue())\n-                .append(\"').exists()).exists()\");\n+\n+            sb.append(\"code = '\").append(coding.getCode().getValue()).append(\"').exists()).exists()\");\n+        } else if (pattern.is(Identifier.class)) {\n+            Identifier _identifier = pattern.as(Identifier.class);\n+            String system = _identifier.getSystem().getValue();\n+\n+            sb.append(\".where(system = '\").append(system).append(\"').count()\");\n+\n+            Integer min = elementDefinition.getMin().getValue();\n+            String max = elementDefinition.getMax().getValue();\n+\n+            if (\"*\".equals(max)) {\n+                sb.append(\" >= \").append(min);\n+            } else if (\"1\".equals(max)) {\n+                if (min == 0) {\n+                    sb.append(\" <= 1\");\n+                } else {\n+                    sb.append(\" = 1\");\n+                }\n+            } else {\n+                sb.append(\" >= \").append(min).append(\" and \").append(identifier).append(\".where(system = '\").append(system).append(\"').count() <= \").append(max);\n+            }\n+\n+            if (!node.children.isEmpty()) {\n+                sb.append(\" and (\").append(identifier).append(\".where(system = '\").append(system).append(\"').exists()\").append(\" implies (\").append(identifier).append(\".where(system = '\").append(system).append(\"' and \").append(generate(node.children)).append(\")))\");", "originalCommit": "9db0f74c539b04d9dbcac0d1d3694786da21d26b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2NDY3Ng==", "url": "https://github.com/IBM/FHIR/pull/1115#discussion_r426864676", "bodyText": "or maybe just a comment to indicate what this and clause is doing (at a high level)?", "author": "lmsurpre", "createdAt": "2020-05-18T20:04:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2NDA1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2NDg2Mg==", "url": "https://github.com/IBM/FHIR/pull/1115#discussion_r426864862", "bodyText": "The way the constraint is generated, there isn't much in the way of indentation that will do it justice. Looking at the actual generated constraint is more helpful.", "author": "JohnTimm", "createdAt": "2020-05-18T20:05:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2NDA1OQ=="}], "type": "inlineReview"}]}