{"pr_number": 735, "pr_title": "issue #726 reuse input stream of data source between chunks", "pr_createdAt": "2020-02-27T13:18:33Z", "pr_url": "https://github.com/IBM/FHIR/pull/735", "timeline": [{"oid": "5cd00a17977818897ae23b96f54c45e926c863cf", "url": "https://github.com/IBM/FHIR/commit/5cd00a17977818897ae23b96f54c45e926c863cf", "message": "issue #726 reuse input stream of data source between chunks\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-02-27T13:18:02Z", "type": "commit"}, {"oid": "e3f331f9694e43dc8084607253c6eae626e18413", "url": "https://github.com/IBM/FHIR/commit/e3f331f9694e43dc8084607253c6eae626e18413", "message": "Merge pull request #736 from IBM/issue-726\n\nIssue 726", "committedDate": "2020-02-27T13:51:53Z", "type": "commit"}, {"oid": "7f357ce0bd144f834d0c080cfdd169de7b40d800", "url": "https://github.com/IBM/FHIR/commit/7f357ce0bd144f834d0c080cfdd169de7b40d800", "message": "workaround the test coverage error\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-02-27T14:41:33Z", "type": "commit"}, {"oid": "30570c396e47ac23c25dbfbd8685f4ecc38eeb0a", "url": "https://github.com/IBM/FHIR/commit/30570c396e47ac23c25dbfbd8685f4ecc38eeb0a", "message": "issue #726 enable input stream reuse by default\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-02-27T14:45:46Z", "type": "commit"}, {"oid": "b4c0531e76db724bea5d1b88e871794d32b6d644", "url": "https://github.com/IBM/FHIR/commit/b4c0531e76db724bea5d1b88e871794d32b6d644", "message": "rollback testcoverage workaround\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-02-27T16:50:08Z", "type": "commit"}, {"oid": "d35aec846c3b9b33685c086b47c9f1bcae4ae658", "url": "https://github.com/IBM/FHIR/commit/d35aec846c3b9b33685c086b47c9f1bcae4ae658", "message": "Merge pull request #739 from IBM/issue-726\n\nIssue 726", "committedDate": "2020-02-27T16:53:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MDEwNA==", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385380104", "bodyText": "reading through the code in the else statement (below), shouldn't there be an abort after line 170?", "author": "prb112", "createdAt": "2020-02-27T21:25:24Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -155,41 +156,89 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n     }\n \n     public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-        try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-             BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-            // Notify s3 client to abort and prevent the server from keeping on sending data.\n-            s3InStream.abort();\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-            exported = 0;\n+           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            if (transientUserData.getBufferReader() == null) {\n+                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+                S3ObjectInputStream s3InStream = item.getObjectContent();\n+                transientUserData.setInputStream(s3InStream);\n+                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n+                transientUserData.setBufferReader(resReader);\n+            }\n+            try {\n+                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+            } catch (Exception ioe) {", "originalCommit": "d35aec846c3b9b33685c086b47c9f1bcae4ae658", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4OTg5NQ==", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385389895", "bodyText": "for reusing of the inputstream, we can not abort it.", "author": "albertwang-ibm", "createdAt": "2020-02-27T21:46:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MDEwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY3Njc1OQ==", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385676759", "bodyText": "If the job aborts, are these inputstreams aborted or invalidated?", "author": "prb112", "createdAt": "2020-02-28T12:47:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MDEwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY4MjgzNQ==", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385682835", "bodyText": "hehe, good question, I thought about this also. but have not found a good spot to close the inputstream and reader if the job is canceled. and I have been thinking to add a listener to achieve this.", "author": "albertwang-ibm", "createdAt": "2020-02-28T13:02:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MDEwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY5MDU4Mg==", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385690582", "bodyText": "discussed Albert offline, there may be an opportunity to use a listener to close in the future.", "author": "prb112", "createdAt": "2020-02-28T13:20:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MDEwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MDg4Mw==", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385380883", "bodyText": "there seems like a high degree of repetition in the if(if)/else blocks, is there some opportunity to reduce the duplicated code (not the catch blocks are near identical)", "author": "prb112", "createdAt": "2020-02-27T21:26:56Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -155,41 +156,89 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n     }\n \n     public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-        try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-             BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-            // Notify s3 client to abort and prevent the server from keeping on sending data.\n-            s3InStream.abort();\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-            exported = 0;\n+           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            if (transientUserData.getBufferReader() == null) {\n+                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+                S3ObjectInputStream s3InStream = item.getObjectContent();\n+                transientUserData.setInputStream(s3InStream);\n+                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n+                transientUserData.setBufferReader(resReader);\n+            }\n+            try {\n+                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n+\n+        } else {\n+            S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));", "originalCommit": "d35aec846c3b9b33685c086b47c9f1bcae4ae658", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5MDY2Nw==", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385390667", "bodyText": "one are inside try() in which try take care of the close of the resources automatically, the one will only be closed after the job is finished.", "author": "albertwang-ibm", "createdAt": "2020-02-27T21:48:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MDg4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MTk5Nw==", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385381997", "bodyText": "I think there should be some defensive programming here to validate the path is acceptable.  This may be best at the REST layer.", "author": "prb112", "createdAt": "2020-02-27T21:29:16Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -155,41 +156,89 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n     }\n \n     public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-        try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-             BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-            // Notify s3 client to abort and prevent the server from keeping on sending data.\n-            s3InStream.abort();\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-            exported = 0;\n+           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            if (transientUserData.getBufferReader() == null) {\n+                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+                S3ObjectInputStream s3InStream = item.getObjectContent();\n+                transientUserData.setInputStream(s3InStream);\n+                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n+                transientUserData.setBufferReader(resReader);\n+            }\n+            try {\n+                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n+\n+        } else {\n+            S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n+                 BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n+                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n+                // Notify s3 client to abort and prevent the server from keeping on sending data.\n+                s3InStream.abort();\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n         }\n+\n         return exported;\n     }\n \n \n-    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        try (BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n-            exported = 0;\n+    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources,\n+            boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            try {\n+                if (transientUserData.getBufferReader() == null) {\n+                    BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath));", "originalCommit": "d35aec846c3b9b33685c086b47c9f1bcae4ae658", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5MjcyNQ==", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385392725", "bodyText": "yes, make sense for me. in the job side, if got a non-exising file, the job will still succeeded but with 0 imported.  throwing exception can cause the whole job fails even if only one non-existing file there.", "author": "albertwang-ibm", "createdAt": "2020-02-27T21:52:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MTk5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MjA5Ng==", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385382096", "bodyText": "I think there should be some defensive programming here to validate the url is acceptable.  This may be best at the REST layer.", "author": "prb112", "createdAt": "2020-02-27T21:29:29Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -155,41 +156,89 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n     }\n \n     public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-        try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-             BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-            // Notify s3 client to abort and prevent the server from keeping on sending data.\n-            s3InStream.abort();\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-            exported = 0;\n+           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            if (transientUserData.getBufferReader() == null) {\n+                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+                S3ObjectInputStream s3InStream = item.getObjectContent();\n+                transientUserData.setInputStream(s3InStream);\n+                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n+                transientUserData.setBufferReader(resReader);\n+            }\n+            try {\n+                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n+\n+        } else {\n+            S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n+                 BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n+                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n+                // Notify s3 client to abort and prevent the server from keeping on sending data.\n+                s3InStream.abort();\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n         }\n+\n         return exported;\n     }\n \n \n-    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        try (BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n-            exported = 0;\n+    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources,\n+            boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            try {\n+                if (transientUserData.getBufferReader() == null) {\n+                    BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath));\n+                    transientUserData.setBufferReader(resReader);\n+                }\n+                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n+        } else {\n+            try (BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath))) {\n+                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n         }\n         return exported;\n     }\n \n \n-    public static int readFhirResourceFromHttps(String dataUrl, int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        try (BufferedReader resReader = new BufferedReader(new InputStreamReader(new URL(dataUrl).openConnection().getInputStream()))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromHttps: \" + \"Error proccesing file \" + dataUrl + \" - \" + ioe.getMessage());\n-            exported = 0;\n+    public static int readFhirResourceFromHttps(String dataUrl, int numOfLinesToSkip, List<Resource> fhirResources,", "originalCommit": "d35aec846c3b9b33685c086b47c9f1bcae4ae658", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5Mjg3OQ==", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385392879", "bodyText": "agreed, make sense for me.", "author": "albertwang-ibm", "createdAt": "2020-02-27T21:52:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MjA5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MzcxNw==", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385383717", "bodyText": "226 uses a non autocloseable. here we use an autocloseable --- worth doublechecking", "author": "prb112", "createdAt": "2020-02-27T21:32:49Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -155,41 +156,89 @@ private static int getFhirResourceFromBufferReader(BufferedReader resReader, int\n     }\n \n     public static int readFhirResourceFromObjectStore(AmazonS3 cosClient, String bucketName, String itemName,\n-           int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n-        try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-             BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-            // Notify s3 client to abort and prevent the server from keeping on sending data.\n-            s3InStream.abort();\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n-            exported = 0;\n+           int numOfLinesToSkip, List<Resource> fhirResources, boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            if (transientUserData.getBufferReader() == null) {\n+                S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+                S3ObjectInputStream s3InStream = item.getObjectContent();\n+                transientUserData.setInputStream(s3InStream);\n+                BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream));\n+                transientUserData.setBufferReader(resReader);\n+            }\n+            try {\n+                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n+\n+        } else {\n+            S3Object item = cosClient.getObject(new GetObjectRequest(bucketName, itemName));\n+            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n+                 BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n+                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n+                // Notify s3 client to abort and prevent the server from keeping on sending data.\n+                s3InStream.abort();\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromObjectStore: \" + \"Error proccesing file \" + itemName + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n         }\n+\n         return exported;\n     }\n \n \n-    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        try (BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n-            exported = 0;\n+    public static int readFhirResourceFromLocalFile(String filePath, int numOfLinesToSkip, List<Resource> fhirResources,\n+            boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            try {\n+                if (transientUserData.getBufferReader() == null) {\n+                    BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath));\n+                    transientUserData.setBufferReader(resReader);\n+                }\n+                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n+        } else {\n+            try (BufferedReader resReader = Files.newBufferedReader(Paths.get(filePath))) {\n+                exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromLocalFile: \" + \"Error proccesing file \" + filePath + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n         }\n         return exported;\n     }\n \n \n-    public static int readFhirResourceFromHttps(String dataUrl, int numOfLinesToSkip, List<Resource> fhirResources) {\n-        int exported;\n-        try (BufferedReader resReader = new BufferedReader(new InputStreamReader(new URL(dataUrl).openConnection().getInputStream()))) {\n-            exported = getFhirResourceFromBufferReader(resReader, numOfLinesToSkip, fhirResources);\n-        } catch (Exception ioe) {\n-            logger.warning(\"readFhirResourceFromHttps: \" + \"Error proccesing file \" + dataUrl + \" - \" + ioe.getMessage());\n-            exported = 0;\n+    public static int readFhirResourceFromHttps(String dataUrl, int numOfLinesToSkip, List<Resource> fhirResources,\n+            boolean isReuseInput, ImportTransientUserData transientUserData) {\n+        int exported = 0;\n+        if (isReuseInput) {\n+            try {\n+                if (transientUserData.getBufferReader() == null) {\n+                    InputStream inputStream = new URL(dataUrl).openConnection().getInputStream();\n+                    transientUserData.setInputStream(inputStream);\n+                    BufferedReader resReader = new BufferedReader(new InputStreamReader(inputStream));\n+                    transientUserData.setBufferReader(resReader);\n+                }\n+                exported = getFhirResourceFromBufferReader(transientUserData.getBufferReader(), 0, fhirResources);\n+            } catch (Exception ioe) {\n+                logger.warning(\"readFhirResourceFromHttps: \" + \"Error proccesing file \" + dataUrl + \" - \" + ioe.getMessage());\n+                exported = 0;\n+            }\n+        } else {\n+            try (BufferedReader resReader = new BufferedReader(new InputStreamReader(new URL(dataUrl).openConnection().getInputStream()))) {", "originalCommit": "d35aec846c3b9b33685c086b47c9f1bcae4ae658", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5NDQzMg==", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385394432", "bodyText": "yeah,  I did this on purpose. if the stream/reader is reused across all the chunks, then they will only be closed at the end of the processing of this data source.", "author": "albertwang-ibm", "createdAt": "2020-02-27T21:56:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MzcxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4NDU4Nw==", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385384587", "bodyText": "looking at these package names, should we have a single parent package for bulkdata, and call out each feature underneath? establishing it as a hierarchy? just a thought... no action needed, just a design question", "author": "prb112", "createdAt": "2020-02-27T21:34:44Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportTransientUserData.java", "diffHunk": "@@ -6,7 +6,9 @@\n \n package com.ibm.fhir.bulkimport;", "originalCommit": "d35aec846c3b9b33685c086b47c9f1bcae4ae658", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5NjQ2NA==", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385396464", "bodyText": "good question,  I thought this project is for bulkdata webapp, so I didn't add a bulkdata as part of the package name. and we can change it whenever we want in the future.", "author": "albertwang-ibm", "createdAt": "2020-02-27T22:00:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4NDU4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY3MTExOQ==", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385671119", "bodyText": "yeah - no change necessary - as I see these Java classes again, I see new things :)", "author": "prb112", "createdAt": "2020-02-28T12:34:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4NDU4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4NTA1Nw==", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385385057", "bodyText": "On line 14, add a space between ImportCheckPointData{   so it is ImportCheckPointData {", "author": "prb112", "createdAt": "2020-02-27T21:35:48Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportTransientUserData.java", "diffHunk": "@@ -18,6 +20,9 @@\n     private ByteArrayOutputStream bufferStream4ImportError = new ByteArrayOutputStream();", "originalCommit": "d35aec846c3b9b33685c086b47c9f1bcae4ae658", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4NTQ2Mg==", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385385462", "bodyText": "Also, I'd suggest generating the serialVersionUID in this case.  1L may have unintended consequences", "author": "prb112", "createdAt": "2020-02-27T21:36:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4NTA1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5Njk2OA==", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385396968", "bodyText": "yeah, good catch. somehow I always failed/fails to generate the it for this one. :(", "author": "albertwang-ibm", "createdAt": "2020-02-27T22:01:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4NTA1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQwODg2Mw==", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385408863", "bodyText": "fixed via using command line instead of using eclipse.", "author": "albertwang-ibm", "createdAt": "2020-02-27T22:29:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4NTA1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2OTQ2Ng==", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385469466", "bodyText": "done", "author": "albertwang-ibm", "createdAt": "2020-02-28T01:49:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4NTA1Nw=="}], "type": "inlineReview"}, {"oid": "f18a6e9d33cc95639b4499ffc067daec28fd5f85", "url": "https://github.com/IBM/FHIR/commit/f18a6e9d33cc95639b4499ffc067daec28fd5f85", "message": "issue #726 minor changes per review commands\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-02-27T22:28:40Z", "type": "commit"}, {"oid": "ae3d7770ad9db62949e0fad613d16073423c53e8", "url": "https://github.com/IBM/FHIR/commit/ae3d7770ad9db62949e0fad613d16073423c53e8", "message": "issue #726 replace deprecated COS function call\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-02-28T02:25:04Z", "type": "commit"}, {"oid": "88a87e4935a6351d6ed65d3a8b3306d45f11a47d", "url": "https://github.com/IBM/FHIR/commit/88a87e4935a6351d6ed65d3a8b3306d45f11a47d", "message": "issue #726 add cleanup if the job is stopped/cancelled.\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-02-28T17:02:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzI2Mw==", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385813263", "bodyText": "add an if logger, that way no creation of string to pass to fine logger", "author": "prb112", "createdAt": "2020-02-28T17:05:31Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkReader.java", "diffHunk": "@@ -102,8 +103,12 @@ public ChunkReader() {\n \n     @Override\n     public Object readItem() throws Exception {\n+        // If the job is being stopped or in other status except for \"started\", then stop the read.\n+        if (!stepCtx.getBatchStatus().equals(BatchStatus.STARTED)) {\n+            return null;\n+        }\n         List<Resource> loadedFhirResources = new ArrayList<Resource>();\n-        logger.info(\"readItem: get work item:\" + importPartitionWorkitem + \" resource type: \" + importPartitionResourceType);\n+        logger.fine(\"readItem: get work item:\" + importPartitionWorkitem + \" resource type: \" + importPartitionResourceType);", "originalCommit": "88a87e4935a6351d6ed65d3a8b3306d45f11a47d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNTczMA==", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385825730", "bodyText": "done", "author": "albertwang-ibm", "createdAt": "2020-02-28T17:27:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzI2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzM2OQ==", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385813369", "bodyText": "same comment on logger if log level", "author": "prb112", "createdAt": "2020-02-28T17:05:45Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -162,7 +162,7 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n         chunkData.setNumOfProcessedResources(chunkData.getNumOfProcessedResources() + processedNum);\n         chunkData.setNumOfImportedResources(chunkData.getNumOfImportedResources() + succeededNum);\n         chunkData.setNumOfImportFailures(chunkData.getNumOfImportFailures() + failedNum);\n-        logger.info(\"writeItems: processed \" + processedNum + \" \" + importPartitionResourceType + \" from \" +  chunkData.getImportPartitionWorkitem());\n+        logger.fine(\"writeItems: processed \" + processedNum + \" \" + importPartitionResourceType + \" from \" +  chunkData.getImportPartitionWorkitem());", "originalCommit": "88a87e4935a6351d6ed65d3a8b3306d45f11a47d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNTc5Mg==", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385825792", "bodyText": "done", "author": "albertwang-ibm", "createdAt": "2020-02-28T17:27:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzM2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzM5Nw==", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385813397", "bodyText": "same comment on logger if log level", "author": "prb112", "createdAt": "2020-02-28T17:05:49Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -192,7 +192,7 @@ private void pushImportOperationOutcomes2COS(ImportTransientUserData chunkData)\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(),\n                     chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4Import().toByteArray()),\n                     chunkData.getBufferStream4Import().size(), chunkData.getPartNum4OperationOutcomes()));\n-            logger.info(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4Import().size()\n+            logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4Import().size()", "originalCommit": "88a87e4935a6351d6ed65d3a8b3306d45f11a47d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNTg0MA==", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385825840", "bodyText": "done", "author": "albertwang-ibm", "createdAt": "2020-02-28T17:27:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzM5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzQzMw==", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385813433", "bodyText": "same comment on logger if log level", "author": "prb112", "createdAt": "2020-02-28T17:05:53Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -209,7 +209,7 @@ private void pushImportOperationOutcomes2COS(ImportTransientUserData chunkData)\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportFailureOperationOutcomes(),\n                     chunkData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4ImportError().toByteArray()),\n                     chunkData.getBufferStream4ImportError().size(), chunkData.getPartNum4FailureOperationOutcomes()));\n-            logger.info(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4ImportError().size()\n+            logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4ImportError().size()", "originalCommit": "88a87e4935a6351d6ed65d3a8b3306d45f11a47d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNTg3Nw==", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385825877", "bodyText": "done", "author": "albertwang-ibm", "createdAt": "2020-02-28T17:28:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzQzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzUyMQ==", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385813521", "bodyText": "same comment on logger if log level", "author": "prb112", "createdAt": "2020-02-28T17:06:05Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -94,7 +113,7 @@ public Serializable collectPartitionData() throws Exception{\n                             cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportOperationOutcomes(),\n                             partitionSummaryData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStream4Import().toByteArray()),\n                             partitionSummaryData.getBufferStream4Import().size(), partitionSummaryData.getPartNum4OperationOutcomes()));\n-                    logger.info(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStream4Import().size()\n+                    logger.fine(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStream4Import().size()", "originalCommit": "88a87e4935a6351d6ed65d3a8b3306d45f11a47d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNTkzNA==", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385825934", "bodyText": "done", "author": "albertwang-ibm", "createdAt": "2020-02-28T17:28:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzUyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzU1OQ==", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385813559", "bodyText": "same comment on logger if log level", "author": "prb112", "createdAt": "2020-02-28T17:06:10Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -116,7 +135,7 @@ public Serializable collectPartitionData() throws Exception{\n                             cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(),\n                             partitionSummaryData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStream4ImportError().toByteArray()),\n                             partitionSummaryData.getBufferStream4ImportError().size(), partitionSummaryData.getPartNum4FailureOperationOutcomes()));\n-                    logger.info(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStream4ImportError().size()\n+                    logger.fine(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStream4ImportError().size()", "originalCommit": "88a87e4935a6351d6ed65d3a8b3306d45f11a47d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNTk4Ng==", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385825986", "bodyText": "done", "author": "albertwang-ibm", "createdAt": "2020-02-28T17:28:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzU1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzY0NA==", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385813644", "bodyText": "same comment on logger if log level", "author": "prb112", "createdAt": "2020-02-28T17:06:22Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkReader.java", "diffHunk": "@@ -132,12 +139,13 @@ public Object readItem() throws Exception {\n             } else {\n                 logger.finer(\"readItem: Got CosClient successfully!\");\n             }\n-            imported = BulkDataUtils.readFhirResourceFromObjectStore(cosClient, cosBucketName, importPartitionWorkitem, numOfLinesToSkip, loadedFhirResources);\n+            imported = BulkDataUtils.readFhirResourceFromObjectStore(cosClient, cosBucketName, importPartitionWorkitem,\n+                    numOfLinesToSkip, loadedFhirResources, Constants.IMPORT_IS_REUSE_INPUTSTREAM, chunkData);\n             break;\n         default:\n             break;\n         }\n-        logger.info(\"readItem: loaded \" + imported + \" \" + importPartitionResourceType + \" from \" + importPartitionWorkitem);\n+        logger.fine(\"readItem: loaded \" + imported + \" \" + importPartitionResourceType + \" from \" + importPartitionWorkitem);", "originalCommit": "88a87e4935a6351d6ed65d3a8b3306d45f11a47d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNjAyNQ==", "url": "https://github.com/IBM/FHIR/pull/735#discussion_r385826025", "bodyText": "done", "author": "albertwang-ibm", "createdAt": "2020-02-28T17:28:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzY0NA=="}], "type": "inlineReview"}, {"oid": "f45937207b738436a5f959eba69a9b91b9106c7f", "url": "https://github.com/IBM/FHIR/commit/f45937207b738436a5f959eba69a9b91b9106c7f", "message": "issue #726 minor change for logging\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-02-28T17:23:13Z", "type": "commit"}]}