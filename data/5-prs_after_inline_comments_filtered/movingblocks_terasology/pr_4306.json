{"pr_number": 4306, "pr_title": "feat(JOML): Chunks Standardization ", "pr_createdAt": "2020-12-09T05:32:16Z", "pr_url": "https://github.com/MovingBlocks/Terasology/pull/4306", "timeline": [{"oid": "bc9e10356b86d93315257dff4ac98ac59f9349ad", "url": "https://github.com/MovingBlocks/Terasology/commit/bc9e10356b86d93315257dff4ac98ac59f9349ad", "message": "feature/joml-chunk-standardization", "committedDate": "2020-12-09T05:14:12Z", "type": "commit"}, {"oid": "912204ada366600a3f0ac7f16c5d20cc505a11a9", "url": "https://github.com/MovingBlocks/Terasology/commit/912204ada366600a3f0ac7f16c5d20cc505a11a9", "message": "update test cases", "committedDate": "2020-12-10T05:16:12Z", "type": "commit"}, {"oid": "5dde332c4765d9db21de9836d29c4fae260bd75f", "url": "https://github.com/MovingBlocks/Terasology/commit/5dde332c4765d9db21de9836d29c4fae260bd75f", "message": "update docs", "committedDate": "2020-12-10T05:28:05Z", "type": "commit"}, {"oid": "9e97bdced8298af309fd2ba87abe4068ddbb95be", "url": "https://github.com/MovingBlocks/Terasology/commit/9e97bdced8298af309fd2ba87abe4068ddbb95be", "message": "add test edge logic", "committedDate": "2020-12-11T05:29:01Z", "type": "commit"}, {"oid": "9f5e88d2c1401db970c264092ba5ae10b4e213c8", "url": "https://github.com/MovingBlocks/Terasology/commit/9f5e88d2c1401db970c264092ba5ae10b4e213c8", "message": "Merge branch 'develop' into feature/chunk-standardization", "committedDate": "2020-12-12T20:37:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTc3NjU5Mg==", "url": "https://github.com/MovingBlocks/Terasology/pull/4306#discussion_r541776592", "bodyText": "\"This method\"? \ud83e\udd14", "author": "jdrueckert", "createdAt": "2020-12-12T20:39:49Z", "path": "engine/src/main/java/org/terasology/math/ChunkMath.java", "diffHunk": "@@ -28,8 +28,10 @@\n \n /**\n  * Collection of math functions.\n- *\n+ * @deprecated This method is scheduled for removal in an upcoming version.", "originalCommit": "9f5e88d2c1401db970c264092ba5ae10b4e213c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTc3Njg0MA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4306#discussion_r541776840", "bodyText": "Is there a replacement yet? If so, please link it here.", "author": "jdrueckert", "createdAt": "2020-12-12T20:41:36Z", "path": "engine/src/main/java/org/terasology/math/ChunkMath.java", "diffHunk": "@@ -486,7 +488,9 @@ public static Region3i getChunkRegionAroundWorldPos(Vector3i pos, int extent) {\n      * @param pos the world position\n      * @param extent the extent\n      * @return chunk region\n+     *\n      */\n+    @Deprecated", "originalCommit": "9f5e88d2c1401db970c264092ba5ae10b4e213c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkxNzE3OA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4306#discussion_r541917178", "bodyText": "It is mentioned in the docstring. Probably the hidden part is that we don't offer a replacement for the exact signature but ask the caller to create a block region from center and extents:\nChunks.toChunkRegion(BlockRegions.createFromCenterAndExtents(pos, extent))\n(Writing this makes me thing whether we should rename createFrom... to just from... on BlockRegions \ud83e\udd14 )", "author": "skaldarnar", "createdAt": "2020-12-13T12:38:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTc3Njg0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTc3Njk3Ng==", "url": "https://github.com/MovingBlocks/Terasology/pull/4306#discussion_r541776976", "bodyText": "maybe:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public BlockRegion edge(Side side, BlockRegion dest) {\n          \n          \n            \n                public BlockRegion calculateEdge(Side side, BlockRegion dest) {\n          \n      \n    \n    \n  \n\nor\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public BlockRegion edge(Side side, BlockRegion dest) {\n          \n          \n            \n                public BlockRegion getEdge(Side side, BlockRegion dest) {", "author": "jdrueckert", "createdAt": "2020-12-12T20:42:19Z", "path": "engine/src/main/java/org/terasology/world/block/BlockRegion.java", "diffHunk": "@@ -802,6 +803,38 @@ public BlockRegion addExtents(float extentX, float extentY, float extentZ, Block\n         return dest;\n     }\n \n+    /**\n+     * calculates a 1 width region that borders the provided {@link Side} of a region\n+     *\n+     * @param side the side of the region\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public BlockRegion edge(Side side, BlockRegion dest) {", "originalCommit": "9f5e88d2c1401db970c264092ba5ae10b4e213c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTc4MDA4MQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4306#discussion_r541780081", "bodyText": "why calculate? when isn't it not doing calculation :?", "author": "pollend", "createdAt": "2020-12-12T21:03:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTc3Njk3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTc4MDQyNA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4306#discussion_r541780424", "bodyText": "getEdge is fine too, only edge seems a bit blank though", "author": "jdrueckert", "createdAt": "2020-12-12T21:05:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTc3Njk3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTc4NzQ4Ng==", "url": "https://github.com/MovingBlocks/Terasology/pull/4306#discussion_r541787486", "bodyText": "that sounds better.", "author": "pollend", "createdAt": "2020-12-12T21:51:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTc3Njk3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTc4ODQ0NQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4306#discussion_r541788445", "bodyText": "getBlockFace, getFace,", "author": "pollend", "createdAt": "2020-12-12T21:57:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTc3Njk3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTc3OTQxMA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4306#discussion_r541779410", "bodyText": "\"This method\"? \ud83e\udd14", "author": "jdrueckert", "createdAt": "2020-12-12T20:58:52Z", "path": "engine/src/main/java/org/terasology/world/chunks/ChunkConstants.java", "diffHunk": "@@ -22,9 +22,13 @@\n import org.terasology.math.geom.Vector3i;\n import org.terasology.module.sandbox.API;\n \n+\n /**\n+ * @deprecated This method is scheduled for removal in an upcoming version.", "originalCommit": "9f5e88d2c1401db970c264092ba5ae10b4e213c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkyMDUxOA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4306#discussion_r541920518", "bodyText": "I'm not sure this pure constants class should be deprecated. It is exactly that, a pure static class holding some constants, which are decoupled from Chunk or Chunks in general.\nOnly argument for merging this with ChunkMath into Chunks is that there is one file less to look at. Probably doesn't matter in the end \ud83e\udd37", "author": "skaldarnar", "createdAt": "2020-12-13T12:57:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTc3OTQxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1Njc2Mg==", "url": "https://github.com/MovingBlocks/Terasology/pull/4306#discussion_r546256762", "bodyText": "ChunkaMath and ChunkConstants are coupled together so I thought it was simpler to just combine them.", "author": "pollend", "createdAt": "2020-12-19T16:31:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTc3OTQxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA0MzU2Nw==", "url": "https://github.com/MovingBlocks/Terasology/pull/4306#discussion_r549043567", "bodyText": "They are coupled, but fortunately only in one direction - ChunkMath, as well as other classes, depends on ChunkConstants...\nI don't have a strong opinion here. @4Denthusiast, what do you think?", "author": "skaldarnar", "createdAt": "2020-12-26T23:47:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTc3OTQxMA=="}], "type": "inlineReview"}, {"oid": "bcf1cde42c33101ba2e3f5bfafd9c450deb63858", "url": "https://github.com/MovingBlocks/Terasology/commit/bcf1cde42c33101ba2e3f5bfafd9c450deb63858", "message": "update naming and updated javadocs", "committedDate": "2020-12-13T00:04:35Z", "type": "commit"}, {"oid": "f18fe748926d91de85b40615ff2d573ca1a5d01e", "url": "https://github.com/MovingBlocks/Terasology/commit/f18fe748926d91de85b40615ff2d573ca1a5d01e", "message": "Merge branch 'feature/chunk-standardization' of github.com:pollend/Terasology into feature/chunk-standardization", "committedDate": "2020-12-13T00:05:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkxNTc2MQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4306#discussion_r541915761", "bodyText": "I think assertEquals takes the expected value as first argument, and the actual value as second argument. So I think these assertion arguments should be the other way around.", "author": "skaldarnar", "createdAt": "2020-12-13T12:29:32Z", "path": "engine-tests/src/test/java/org/terasology/math/BlockRegionTest.java", "diffHunk": "@@ -189,6 +189,23 @@ public void testCorrectBoundsFlip() {\n         assertEquals(max, region.getMax(new Vector3i()));\n     }\n \n+    @Test\n+    public void testEdge() {\n+        BlockRegion region = BlockRegions.createFromMinAndMax(new Vector3i(), new Vector3i(32, 32, 32));\n+        assertEquals(region.blockFace(Side.LEFT, new BlockRegion()), BlockRegions.createFromMinAndMax(new Vector3i(),\n+            new Vector3i(0, 32, 32)));\n+        assertEquals(region.blockFace(Side.RIGHT, new BlockRegion()), BlockRegions.createFromMinAndMax(new Vector3i(32, 0,\n+            0), new Vector3i(32, 32, 32)));\n+        assertEquals(region.blockFace(Side.FRONT, new BlockRegion()), BlockRegions.createFromMinAndMax(new Vector3i(0, 0,\n+            0), new Vector3i(32, 32, 0)));\n+        assertEquals(region.blockFace(Side.BACK, new BlockRegion()), BlockRegions.createFromMinAndMax(new Vector3i(0, 0,\n+            32), new Vector3i(32, 32, 32)));\n+        assertEquals(region.blockFace(Side.BOTTOM, new BlockRegion()), BlockRegions.createFromMinAndMax(new Vector3i(),\n+            new Vector3i(32, 0, 32)));\n+        assertEquals(region.blockFace(Side.TOP, new BlockRegion()), BlockRegions.createFromMinAndMax(new Vector3i(0, 32,\n+            0), new Vector3i(32, 32, 32)));", "originalCommit": "f18fe748926d91de85b40615ff2d573ca1a5d01e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkxNjE5Mw==", "url": "https://github.com/MovingBlocks/Terasology/pull/4306#discussion_r541916193", "bodyText": "I think these tests should use the chunk constants instead of hard-coded numbers.", "author": "skaldarnar", "createdAt": "2020-12-13T12:32:07Z", "path": "engine-tests/src/test/java/org/terasology/math/ChunkMathTest.java", "diffHunk": "@@ -15,105 +15,70 @@\n  */\n package org.terasology.math;\n \n+import org.joml.Vector3f;\n+import org.joml.Vector3i;\n import org.junit.jupiter.api.Test;\n import org.terasology.config.Config;\n import org.terasology.context.internal.ContextImpl;\n import org.terasology.context.internal.MockContext;\n-import org.terasology.math.geom.Vector3i;\n import org.terasology.registry.CoreRegistry;\n import org.terasology.world.block.BlockRegion;\n+import org.terasology.world.block.BlockRegions;\n+import org.terasology.world.chunks.Chunks;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n \n public class ChunkMathTest {\n \n-    @Test\n-    public void testGetEdgeRegion() {\n-        Region3i region = Region3i.createFromMinAndSize(new Vector3i(16, 0, 16), new Vector3i(16, 128, 16));\n-        assertEquals(Region3i.createFromMinMax(new Vector3i(16, 0, 16), new Vector3i(16, 127, 31)), ChunkMath.getEdgeRegion(region, Side.LEFT));\n-    }\n \n     @Test\n     public void testRegionPositions() {\n         CoreRegistry.setContext(new ContextImpl());\n         CoreRegistry.put(Config.class, new Config(new MockContext()));\n \n-        assertEquals(1, ChunkMath.calcChunkPos(Region3i.createFromMinMax(new Vector3i(0, 0, 0), new Vector3i(0, 0, 0))).length);\n-        assertEquals(1, ChunkMath.calcChunkPos(Region3i.createFromMinMax(new Vector3i(0, 0, 0), new Vector3i(31, 63, 31))).length);\n-        assertEquals(2, ChunkMath.calcChunkPos(Region3i.createFromMinMax(new Vector3i(0, 0, 0), new Vector3i(32, 63, 31))).length);\n-        assertEquals(4, ChunkMath.calcChunkPos(Region3i.createFromMinMax(new Vector3i(0, 0, 0), new Vector3i(32, 63, 32))).length);\n-        assertEquals(8, ChunkMath.calcChunkPos(Region3i.createFromMinMax(new Vector3i(0, 0, 0), new Vector3i(32, 64, 32))).length);\n-        assertEquals(12, ChunkMath.calcChunkPos(Region3i.createFromMinMax(new Vector3i(-1, 0, 0), new Vector3i(32, 64, 32))).length);\n+        assertEquals(BlockRegions.createFromMinAndMax(0,0,0,0,0,0), Chunks.toChunkRegion(BlockRegions.createFromMinAndMax(new Vector3i(0, 0, 0), new Vector3i(0, 0, 0)), new BlockRegion()));\n+        assertEquals(BlockRegions.createFromMinAndMax(0,0,0,0,0,0), Chunks.toChunkRegion(BlockRegions.createFromMinAndMax(new Vector3i(0, 0, 0), new Vector3i(31, 63, 31)), new BlockRegion()));\n+        assertEquals(BlockRegions.createFromMinAndMax(0,0,0,1,0,0), Chunks.toChunkRegion(BlockRegions.createFromMinAndMax(new Vector3i(0, 0, 0), new Vector3i(32, 63, 31)), new BlockRegion()));\n+        assertEquals(BlockRegions.createFromMinAndMax(0,0,0,1,0,1), Chunks.toChunkRegion(BlockRegions.createFromMinAndMax(new Vector3i(0, 0, 0), new Vector3i(32, 63, 32)), new BlockRegion()));\n+        assertEquals(BlockRegions.createFromMinAndMax(0,0,0,1,1,1), Chunks.toChunkRegion(BlockRegions.createFromMinAndMax(new Vector3i(0, 0, 0), new Vector3i(32, 64, 32)), new BlockRegion()));\n+        assertEquals(BlockRegions.createFromMinAndMax(-1,0,0,1,1,1), Chunks.toChunkRegion(BlockRegions.createFromMinAndMax(new Vector3i(-1, 0, 0), new Vector3i(32, 64, 32)), new BlockRegion()));", "originalCommit": "f18fe748926d91de85b40615ff2d573ca1a5d01e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkxNjQwMg==", "url": "https://github.com/MovingBlocks/Terasology/pull/4306#discussion_r541916402", "bodyText": "Swap the arguments (actual vs expected) around.", "author": "skaldarnar", "createdAt": "2020-12-13T12:33:20Z", "path": "engine-tests/src/test/java/org/terasology/math/ChunkMathTest.java", "diffHunk": "@@ -15,105 +15,70 @@\n  */\n package org.terasology.math;\n \n+import org.joml.Vector3f;\n+import org.joml.Vector3i;\n import org.junit.jupiter.api.Test;\n import org.terasology.config.Config;\n import org.terasology.context.internal.ContextImpl;\n import org.terasology.context.internal.MockContext;\n-import org.terasology.math.geom.Vector3i;\n import org.terasology.registry.CoreRegistry;\n import org.terasology.world.block.BlockRegion;\n+import org.terasology.world.block.BlockRegions;\n+import org.terasology.world.chunks.Chunks;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n \n public class ChunkMathTest {\n \n-    @Test\n-    public void testGetEdgeRegion() {\n-        Region3i region = Region3i.createFromMinAndSize(new Vector3i(16, 0, 16), new Vector3i(16, 128, 16));\n-        assertEquals(Region3i.createFromMinMax(new Vector3i(16, 0, 16), new Vector3i(16, 127, 31)), ChunkMath.getEdgeRegion(region, Side.LEFT));\n-    }\n \n     @Test\n     public void testRegionPositions() {\n         CoreRegistry.setContext(new ContextImpl());\n         CoreRegistry.put(Config.class, new Config(new MockContext()));\n \n-        assertEquals(1, ChunkMath.calcChunkPos(Region3i.createFromMinMax(new Vector3i(0, 0, 0), new Vector3i(0, 0, 0))).length);\n-        assertEquals(1, ChunkMath.calcChunkPos(Region3i.createFromMinMax(new Vector3i(0, 0, 0), new Vector3i(31, 63, 31))).length);\n-        assertEquals(2, ChunkMath.calcChunkPos(Region3i.createFromMinMax(new Vector3i(0, 0, 0), new Vector3i(32, 63, 31))).length);\n-        assertEquals(4, ChunkMath.calcChunkPos(Region3i.createFromMinMax(new Vector3i(0, 0, 0), new Vector3i(32, 63, 32))).length);\n-        assertEquals(8, ChunkMath.calcChunkPos(Region3i.createFromMinMax(new Vector3i(0, 0, 0), new Vector3i(32, 64, 32))).length);\n-        assertEquals(12, ChunkMath.calcChunkPos(Region3i.createFromMinMax(new Vector3i(-1, 0, 0), new Vector3i(32, 64, 32))).length);\n+        assertEquals(BlockRegions.createFromMinAndMax(0,0,0,0,0,0), Chunks.toChunkRegion(BlockRegions.createFromMinAndMax(new Vector3i(0, 0, 0), new Vector3i(0, 0, 0)), new BlockRegion()));\n+        assertEquals(BlockRegions.createFromMinAndMax(0,0,0,0,0,0), Chunks.toChunkRegion(BlockRegions.createFromMinAndMax(new Vector3i(0, 0, 0), new Vector3i(31, 63, 31)), new BlockRegion()));\n+        assertEquals(BlockRegions.createFromMinAndMax(0,0,0,1,0,0), Chunks.toChunkRegion(BlockRegions.createFromMinAndMax(new Vector3i(0, 0, 0), new Vector3i(32, 63, 31)), new BlockRegion()));\n+        assertEquals(BlockRegions.createFromMinAndMax(0,0,0,1,0,1), Chunks.toChunkRegion(BlockRegions.createFromMinAndMax(new Vector3i(0, 0, 0), new Vector3i(32, 63, 32)), new BlockRegion()));\n+        assertEquals(BlockRegions.createFromMinAndMax(0,0,0,1,1,1), Chunks.toChunkRegion(BlockRegions.createFromMinAndMax(new Vector3i(0, 0, 0), new Vector3i(32, 64, 32)), new BlockRegion()));\n+        assertEquals(BlockRegions.createFromMinAndMax(-1,0,0,1,1,1), Chunks.toChunkRegion(BlockRegions.createFromMinAndMax(new Vector3i(-1, 0, 0), new Vector3i(32, 64, 32)), new BlockRegion()));\n \n-        Vector3i[] chunks = ChunkMath.calcChunkPos(Region3i.createFromMinMax(new Vector3i(0, 0, 0), new Vector3i(32, 63, 31)));\n-        assertEquals(new Vector3i(0, 0, 0), chunks[0]);\n-        assertEquals(new Vector3i(1, 0, 0), chunks[1]);\n     }\n \n     @Test\n     public void testCalcChunk() {\n-        assertEquals(0, ChunkMath.calcChunkPos(10, 6));\n-        assertEquals(-1, ChunkMath.calcChunkPos(-1, 6));\n-        assertEquals(1, ChunkMath.calcChunkPos(100, 6));\n-        assertEquals(3, ChunkMath.calcChunkPos(200, 6));\n-    }\n-\n-    @Test\n-    public void testCalcChunkPosX() {\n-        assertEquals(0, ChunkMath.calcChunkPosX(10));\n-        assertEquals(-1, ChunkMath.calcChunkPosX(-1));\n-        assertEquals(3, ChunkMath.calcChunkPosX(100));\n-        assertEquals(6, ChunkMath.calcChunkPosX(200));\n-        assertEquals(21, ChunkMath.calcChunkPosX(700));\n-    }\n-\n-    @Test\n-    public void testCalcChunkPosY() {\n-        assertEquals(0, ChunkMath.calcChunkPosY(10));\n-        assertEquals(-1, ChunkMath.calcChunkPosY(-1));\n-        assertEquals(1, ChunkMath.calcChunkPosY(100));\n-        assertEquals(3, ChunkMath.calcChunkPosY(200));\n-        assertEquals(10, ChunkMath.calcChunkPosY(700));\n-    }\n-\n-    @Test\n-    public void testCalcChunkPosZ() {\n-        assertEquals(0, ChunkMath.calcChunkPosZ(10));\n-        assertEquals(-1, ChunkMath.calcChunkPosZ(-1));\n-        assertEquals(6, ChunkMath.calcChunkPosZ(200));\n-        assertEquals(21, ChunkMath.calcChunkPosZ(700));\n+        assertEquals(0, Chunks.toChunkPos(10, 6));\n+        assertEquals(-1, Chunks.toChunkPos(-1, 6));\n+        assertEquals(1, Chunks.toChunkPos(100, 6));\n+        assertEquals(3, Chunks.toChunkPos(200, 6));\n     }\n \n     @Test\n     public void testCalcChunkPos() {\n         org.joml.Vector3i temp = new org.joml.Vector3i();\n-        assertTrue(ChunkMath.calcChunkPos(700, 700, 700, temp).equals(21, 10, 21));\n-        assertTrue(ChunkMath.calcChunkPos(200, 700, -1, temp).equals(6, 10, -1));\n-        assertTrue(ChunkMath.calcChunkPos(200, 200, 200, temp).equals(6, 3, 6));\n-        assertTrue(ChunkMath.calcChunkPos(10, 10, 10, temp).equals(0, 0, 0));\n-    }\n-\n-    @Test\n-    public void testChunkRegionAroundWorldPos() {\n-        assertEquals(ChunkMath.getChunkRegionAroundWorldPos(new org.joml.Vector3i(0, 0, 0), 100),\n-            new BlockRegion(-4, -2, -4, 3, 1, 3));\n-        assertEquals(ChunkMath.getChunkRegionAroundWorldPos(new org.joml.Vector3i(-30, -30, -30), 100),\n-            new BlockRegion(-5, -3, -5, 2, 1, 2));\n-        assertEquals(ChunkMath.getChunkRegionAroundWorldPos(new org.joml.Vector3i(0, 0, 0), 10),\n-            new BlockRegion(-1, -1, -1, 0, 0, 0));\n+        assertEquals(Chunks.toChunkPos(700, 700, 700, temp), new Vector3i(21, 10, 21));\n+        assertEquals(Chunks.toChunkPos(200, 700, -1, temp), new Vector3i(6, 10, -1));\n+        assertEquals(Chunks.toChunkPos(200, 200, 200, temp), new Vector3i(6, 3, 6));\n+        assertEquals(Chunks.toChunkPos(10, 10, 10, temp), new Vector3i(0, 0, 0));", "originalCommit": "f18fe748926d91de85b40615ff2d573ca1a5d01e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkxNjQ5MA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4306#discussion_r541916490", "bodyText": "We may also turn this into parameterized tests...", "author": "skaldarnar", "createdAt": "2020-12-13T12:33:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkxNjQwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkxNzI1Ng==", "url": "https://github.com/MovingBlocks/Terasology/pull/4306#discussion_r541917256", "bodyText": "Should this be on BlockRegion or BlockRegions (utility class)?", "author": "skaldarnar", "createdAt": "2020-12-13T12:38:39Z", "path": "engine/src/main/java/org/terasology/math/ChunkMath.java", "diffHunk": "@@ -569,7 +575,9 @@ public static Region3i getEdgeRegion(Region3i region, Side side) {\n      * @param side the side to border\n      * @param dest will hold the result\n      * @return dest\n+     * @deprecated use {@link BlockRegion#blockFace(Side, BlockRegion)}", "originalCommit": "f18fe748926d91de85b40615ff2d573ca1a5d01e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI2MDM5OA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4306#discussion_r546260398", "bodyText": "I guess you could move it to the utility class but it seems more complicated. (source, Face) or (source, Face, Dest) if we want to be able to write it somewhere.", "author": "pollend", "createdAt": "2020-12-19T17:07:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkxNzI1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkxNzM5Ng==", "url": "https://github.com/MovingBlocks/Terasology/pull/4306#discussion_r541917396", "bodyText": "Should this be implemented on BlockRegion or BlockRegions (utility class)?", "author": "skaldarnar", "createdAt": "2020-12-13T12:39:26Z", "path": "engine/src/main/java/org/terasology/world/block/BlockRegion.java", "diffHunk": "@@ -802,6 +803,38 @@ public BlockRegion addExtents(float extentX, float extentY, float extentZ, Block\n         return dest;\n     }\n \n+    /**\n+     * calculates a 1 width region that borders the provided {@link Side} of a region\n+     *\n+     * @param side the side of the region\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public BlockRegion blockFace(Side side, BlockRegion dest) {", "originalCommit": "f18fe748926d91de85b40615ff2d573ca1a5d01e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk0MzMyNQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4306#discussion_r541943325", "bodyText": "I think it should be fine as a base method. Any particular reason it needs be in the utility class.", "author": "pollend", "createdAt": "2020-12-13T15:07:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkxNzM5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA0MzQwMQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4306#discussion_r549043401", "bodyText": "This method with dest should be moved to BlockRegionc as default method.\nThe in-place variant BlockRegion::blockFace(Side side) should be added to BlockRegion itself.\n\nQuestion: is blockFace a good/the best name for it? Would getSide be better (but then it would not be clear that this would modify the region if we implement (2) from above \ud83e\udd14 )", "author": "skaldarnar", "createdAt": "2020-12-26T23:45:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkxNzM5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkxNzc2MA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4306#discussion_r541917760", "bodyText": "The docstring needs to be adjusted to the different method semantics.", "author": "skaldarnar", "createdAt": "2020-12-13T12:41:39Z", "path": "engine/src/main/java/org/terasology/world/block/BlockRegions.java", "diffHunk": "@@ -16,6 +16,25 @@\n     private BlockRegions() {\n     }\n \n+    /**\n+     * Creates a new region spanning the smallest axis-aligned bounding box (AABB) containing both, min and max.\n+     * <p>\n+     * Note that each component of {@code min} should be smaller or equal to the respective component in {@code max}. If\n+     * a dimension of {@code min} is greater than the respective dimension of {@code max} the resulting block region\n+     * will have a size of 0 along that dimension.\n+     * <p>\n+     * Consider using {@link #encompassing(Vector3ic...)} as an alternative.\n+     *\n+     * @return new block region\n+     */", "originalCommit": "f18fe748926d91de85b40615ff2d573ca1a5d01e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkyMzkwMQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4306#discussion_r541923901", "bodyText": "We already have that method added by another PR.\nSo let's drop this here and fix the docstring for the one that's already there below.", "author": "jdrueckert", "createdAt": "2020-12-13T13:17:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkxNzc2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxOTAxNw==", "url": "https://github.com/MovingBlocks/Terasology/pull/4306#discussion_r546219017", "bodyText": "I removed the duplicate method, but the docstring of the existing one still needs adjusting.", "author": "jdrueckert", "createdAt": "2020-12-19T09:56:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkxNzc2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkyMjI4OQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4306#discussion_r541922289", "bodyText": "The chunk position is a single integer - what does this position mean?", "author": "skaldarnar", "createdAt": "2020-12-13T13:08:31Z", "path": "engine/src/main/java/org/terasology/world/chunks/Chunks.java", "diffHunk": "@@ -0,0 +1,306 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.world.chunks;\n+\n+import org.joml.Math;\n+import org.joml.RoundingMode;\n+import org.joml.Vector3fc;\n+import org.joml.Vector3i;\n+import org.joml.Vector3ic;\n+import org.terasology.module.sandbox.API;\n+import org.terasology.world.block.BlockRegion;\n+import org.terasology.world.block.BlockRegions;\n+\n+@API\n+public final class Chunks {\n+    public static final int SIZE_X = 32;\n+    public static final int SIZE_Y = 64;\n+    public static final int SIZE_Z = 32;\n+\n+    public static final int INNER_CHUNK_POS_FILTER_X = Integer.highestOneBit(SIZE_X) - 1;\n+    public static final int INNER_CHUNK_POS_FILTER_Y = Integer.highestOneBit(SIZE_Y) - 1;\n+    public static final int INNER_CHUNK_POS_FILTER_Z = Integer.highestOneBit(SIZE_Z) - 1;\n+\n+    public static final int POWER_X = Integer.numberOfTrailingZeros(SIZE_X);\n+    public static final int POWER_Y = Integer.numberOfTrailingZeros(SIZE_Y);\n+    public static final int POWER_Z = Integer.numberOfTrailingZeros(SIZE_Z);\n+\n+    public static final byte MAX_LIGHT = 0x0f; // max light for a light source 0-15\n+    public static final byte MAX_SUNLIGHT = 0x0f; // max sunlight for sunlight bounded 0-15\n+    public static final byte MAX_SUNLIGHT_REGEN = 63;\n+    public static final byte SUNLIGHT_REGEN_THRESHOLD = 48;\n+\n+    public static final Vector3ic CHUNK_POWER = new Vector3i(POWER_X, POWER_Y, POWER_Z);\n+    public static final Vector3ic CHUNK_SIZE = new Vector3i(SIZE_X, SIZE_Y, SIZE_Z);\n+    public static final Vector3ic INNER_CHUNK_POS_FILTER = new org.joml.Vector3i(INNER_CHUNK_POS_FILTER_X, INNER_CHUNK_POS_FILTER_Y, INNER_CHUNK_POS_FILTER_Z);\n+    public static final BlockRegion CHUNK_REGION = BlockRegions.createFromMinAndSize(new Vector3i(), CHUNK_SIZE);\n+\n+    public static final Vector3ic LOCAL_REGION_EXTENTS = new Vector3i(1, 1, 1);\n+\n+    private Chunks() {\n+    }\n+\n+    /**\n+     * Returns the chunk position of a given coordinate.", "originalCommit": "f18fe748926d91de85b40615ff2d573ca1a5d01e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkyMjc4MQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4306#discussion_r541922781", "bodyText": "And should this method ever be used directly (with a different chunkPower than the one from the constants)?", "author": "skaldarnar", "createdAt": "2020-12-13T13:11:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkyMjI4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkyMzEyMg==", "url": "https://github.com/MovingBlocks/Terasology/pull/4306#discussion_r541923122", "bodyText": "This method does not take any arguments to set the size of a chunk... Does this method actually do the following:\n\nreturns the position of the chunk that encompasses the given world position", "author": "skaldarnar", "createdAt": "2020-12-13T13:13:05Z", "path": "engine/src/main/java/org/terasology/world/chunks/Chunks.java", "diffHunk": "@@ -0,0 +1,306 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.world.chunks;\n+\n+import org.joml.Math;\n+import org.joml.RoundingMode;\n+import org.joml.Vector3fc;\n+import org.joml.Vector3i;\n+import org.joml.Vector3ic;\n+import org.terasology.module.sandbox.API;\n+import org.terasology.world.block.BlockRegion;\n+import org.terasology.world.block.BlockRegions;\n+\n+@API\n+public final class Chunks {\n+    public static final int SIZE_X = 32;\n+    public static final int SIZE_Y = 64;\n+    public static final int SIZE_Z = 32;\n+\n+    public static final int INNER_CHUNK_POS_FILTER_X = Integer.highestOneBit(SIZE_X) - 1;\n+    public static final int INNER_CHUNK_POS_FILTER_Y = Integer.highestOneBit(SIZE_Y) - 1;\n+    public static final int INNER_CHUNK_POS_FILTER_Z = Integer.highestOneBit(SIZE_Z) - 1;\n+\n+    public static final int POWER_X = Integer.numberOfTrailingZeros(SIZE_X);\n+    public static final int POWER_Y = Integer.numberOfTrailingZeros(SIZE_Y);\n+    public static final int POWER_Z = Integer.numberOfTrailingZeros(SIZE_Z);\n+\n+    public static final byte MAX_LIGHT = 0x0f; // max light for a light source 0-15\n+    public static final byte MAX_SUNLIGHT = 0x0f; // max sunlight for sunlight bounded 0-15\n+    public static final byte MAX_SUNLIGHT_REGEN = 63;\n+    public static final byte SUNLIGHT_REGEN_THRESHOLD = 48;\n+\n+    public static final Vector3ic CHUNK_POWER = new Vector3i(POWER_X, POWER_Y, POWER_Z);\n+    public static final Vector3ic CHUNK_SIZE = new Vector3i(SIZE_X, SIZE_Y, SIZE_Z);\n+    public static final Vector3ic INNER_CHUNK_POS_FILTER = new org.joml.Vector3i(INNER_CHUNK_POS_FILTER_X, INNER_CHUNK_POS_FILTER_Y, INNER_CHUNK_POS_FILTER_Z);\n+    public static final BlockRegion CHUNK_REGION = BlockRegions.createFromMinAndSize(new Vector3i(), CHUNK_SIZE);\n+\n+    public static final Vector3ic LOCAL_REGION_EXTENTS = new Vector3i(1, 1, 1);\n+\n+    private Chunks() {\n+    }\n+\n+    /**\n+     * Returns the chunk position of a given coordinate.\n+     *\n+     * @param val The coordinate of the block\n+     * @param chunkPower the size of the chunk in powers of 2\n+     * @return The coordinate of the chunk\n+     */\n+    public static int toChunkPos(int val, int chunkPower) {\n+        return (val >> chunkPower);\n+    }\n+\n+    /**\n+     * The position of the chunk given the coordinate and size of chunk in powers of 2.\n+     * This uses the default power {@link #POWER_X}.\n+     *\n+     * @param x the x component\n+     * @return The coordinate of the chunk\n+     */\n+    public static int toChunkPosX(int x) {\n+        return toChunkPos(x, CHUNK_POWER.x());\n+    }\n+\n+    /**\n+     * The position of the chunk given the coordinate and size of chunk in powers of 2.\n+     * This uses the default power {@link #POWER_Y}\n+     *\n+     * @param y the y component\n+     * @return The coordinate of the chunk\n+     */\n+    public static int toChunkPosY(int y) {\n+        return toChunkPos(y, CHUNK_POWER.y());\n+    }\n+\n+    /**\n+     * The position of the chunk given the coordinate and size of chunk in powers of 2.\n+     * This uses the default power {@link #POWER_Z}\n+     *\n+     * @param z the z component\n+     * @return The coordinate of the chunk\n+     */\n+    public static int toChunkPosZ(int z) {\n+        return toChunkPos(z, CHUNK_POWER.z());\n+    }\n+\n+\n+    /**\n+     * The position of the chunk given the coordinate and size of chunk in powers of 2.", "originalCommit": "f18fe748926d91de85b40615ff2d573ca1a5d01e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4151ca2558ae255ac8ffbdc83cedd8b321c63380", "url": "https://github.com/MovingBlocks/Terasology/commit/4151ca2558ae255ac8ffbdc83cedd8b321c63380", "message": "Merge branch 'develop' into feature/chunk-standardization", "committedDate": "2020-12-13T13:14:34Z", "type": "commit"}, {"oid": "1186eadd4ff7aa733d258eb5b7dad1c1f14b95ed", "url": "https://github.com/MovingBlocks/Terasology/commit/1186eadd4ff7aa733d258eb5b7dad1c1f14b95ed", "message": "correct test and fix formatting", "committedDate": "2020-12-14T03:17:15Z", "type": "commit"}, {"oid": "013d7b8e1f4225db39b9b51c9b2acce0f199400b", "url": "https://github.com/MovingBlocks/Terasology/commit/013d7b8e1f4225db39b9b51c9b2acce0f199400b", "message": "Merge branch 'feature/chunk-standardization' of github.com:pollend/Terasology into feature/chunk-standardization", "committedDate": "2020-12-14T03:17:48Z", "type": "commit"}, {"oid": "7576b3e602ac1abfc3bcbeb705e32c130529a042", "url": "https://github.com/MovingBlocks/Terasology/commit/7576b3e602ac1abfc3bcbeb705e32c130529a042", "message": "Merge branch 'develop' into feature/chunk-standardization", "committedDate": "2020-12-19T09:32:46Z", "type": "commit"}, {"oid": "cb8f168975fec55625b17257d173ce24d07d1137", "url": "https://github.com/MovingBlocks/Terasology/commit/cb8f168975fec55625b17257d173ce24d07d1137", "message": "chore: remove duplicate method", "committedDate": "2020-12-19T09:52:19Z", "type": "commit"}, {"oid": "0082e0d68163ec852624660434bc5dfa5d812f93", "url": "https://github.com/MovingBlocks/Terasology/commit/0082e0d68163ec852624660434bc5dfa5d812f93", "message": "correct assertions in BlockRegionTest for face", "committedDate": "2020-12-19T16:58:03Z", "type": "commit"}, {"oid": "bbc0efe90e02d01aa16324136dbbb7fa2dd35104", "url": "https://github.com/MovingBlocks/Terasology/commit/bbc0efe90e02d01aa16324136dbbb7fa2dd35104", "message": "Merge branch 'feature/chunk-standardization' of github.com:pollend/Terasology into feature/chunk-standardization", "committedDate": "2020-12-19T16:58:50Z", "type": "commit"}, {"oid": "78df35848f7d3aec540172fa775cb0537b716e33", "url": "https://github.com/MovingBlocks/Terasology/commit/78df35848f7d3aec540172fa775cb0537b716e33", "message": "update description for toChunkPos", "committedDate": "2020-12-19T17:32:46Z", "type": "commit"}, {"oid": "21317aa8e5c6c68724b62ddf9996a09a3d3a5b8c", "url": "https://github.com/MovingBlocks/Terasology/commit/21317aa8e5c6c68724b62ddf9996a09a3d3a5b8c", "message": "Merge remote-tracking branch 'upstream/develop' into feature/chunk-standardization", "committedDate": "2020-12-26T19:20:57Z", "type": "commit"}, {"oid": "fecd302cabf14edcacc726489c3de8b24e440e4c", "url": "https://github.com/MovingBlocks/Terasology/commit/fecd302cabf14edcacc726489c3de8b24e440e4c", "message": "add test and restore misc", "committedDate": "2020-12-26T19:35:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA0MzY2Mg==", "url": "https://github.com/MovingBlocks/Terasology/pull/4306#discussion_r549043662", "bodyText": "This should expose the constant region:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final BlockRegion CHUNK_REGION = new BlockRegion(new Vector3i()).setSize(CHUNK_SIZE);\n          \n          \n            \n                public static final BlockRegionc CHUNK_REGION = new BlockRegion(0, 0, 0).setSize(CHUNK_SIZE);", "author": "skaldarnar", "createdAt": "2020-12-26T23:48:19Z", "path": "engine/src/main/java/org/terasology/world/chunks/Chunks.java", "diffHunk": "@@ -0,0 +1,305 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.world.chunks;\n+\n+import org.joml.Math;\n+import org.joml.RoundingMode;\n+import org.joml.Vector3fc;\n+import org.joml.Vector3i;\n+import org.joml.Vector3ic;\n+import org.terasology.module.sandbox.API;\n+import org.terasology.world.block.BlockRegion;\n+\n+@API\n+public final class Chunks {\n+    public static final int SIZE_X = 32;\n+    public static final int SIZE_Y = 64;\n+    public static final int SIZE_Z = 32;\n+\n+    public static final int INNER_CHUNK_POS_FILTER_X = Integer.highestOneBit(SIZE_X) - 1;\n+    public static final int INNER_CHUNK_POS_FILTER_Y = Integer.highestOneBit(SIZE_Y) - 1;\n+    public static final int INNER_CHUNK_POS_FILTER_Z = Integer.highestOneBit(SIZE_Z) - 1;\n+\n+    public static final int POWER_X = Integer.numberOfTrailingZeros(SIZE_X);\n+    public static final int POWER_Y = Integer.numberOfTrailingZeros(SIZE_Y);\n+    public static final int POWER_Z = Integer.numberOfTrailingZeros(SIZE_Z);\n+\n+    public static final byte MAX_LIGHT = 0x0f; // max light for a light source 0-15\n+    public static final byte MAX_SUNLIGHT = 0x0f; // max sunlight for sunlight bounded 0-15\n+    public static final byte MAX_SUNLIGHT_REGEN = 63;\n+    public static final byte SUNLIGHT_REGEN_THRESHOLD = 48;\n+\n+    public static final Vector3ic CHUNK_POWER = new Vector3i(POWER_X, POWER_Y, POWER_Z);\n+    public static final Vector3ic CHUNK_SIZE = new Vector3i(SIZE_X, SIZE_Y, SIZE_Z);\n+    public static final Vector3ic INNER_CHUNK_POS_FILTER = new org.joml.Vector3i(INNER_CHUNK_POS_FILTER_X, INNER_CHUNK_POS_FILTER_Y, INNER_CHUNK_POS_FILTER_Z);\n+    public static final BlockRegion CHUNK_REGION = new BlockRegion(new Vector3i()).setSize(CHUNK_SIZE);", "originalCommit": "fecd302cabf14edcacc726489c3de8b24e440e4c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b9dbf88fab1ab6a04fb0e5f3040c0e6ed68746dc", "url": "https://github.com/MovingBlocks/Terasology/commit/b9dbf88fab1ab6a04fb0e5f3040c0e6ed68746dc", "message": "Update engine/src/main/java/org/terasology/world/chunks/Chunks.java\n\nCo-authored-by: Tobias Nett <skaldarnar@googlemail.com>", "committedDate": "2020-12-27T00:16:04Z", "type": "commit"}, {"oid": "e0d99e396711ac46db8b68b3108ecb9e5a9e41b5", "url": "https://github.com/MovingBlocks/Terasology/commit/e0d99e396711ac46db8b68b3108ecb9e5a9e41b5", "message": "migrate logic", "committedDate": "2020-12-27T00:23:57Z", "type": "commit"}, {"oid": "f0c68ae95f4e074c7e60d75116b489cb95aed3b2", "url": "https://github.com/MovingBlocks/Terasology/commit/f0c68ae95f4e074c7e60d75116b489cb95aed3b2", "message": "Merge branch 'feature/chunk-standardization' of github.com:pollend/Terasology into feature/chunk-standardization", "committedDate": "2020-12-27T00:24:46Z", "type": "commit"}, {"oid": "85c3f368c12b5e12548a87810fe2d5731d96d21b", "url": "https://github.com/MovingBlocks/Terasology/commit/85c3f368c12b5e12548a87810fe2d5731d96d21b", "message": "Merge branch 'develop' into feature/chunk-standardization", "committedDate": "2020-12-27T00:25:11Z", "type": "commit"}, {"oid": "9cb084b67f920e1c315855609020c13ee1e9fb23", "url": "https://github.com/MovingBlocks/Terasology/commit/9cb084b67f920e1c315855609020c13ee1e9fb23", "message": "add import", "committedDate": "2020-12-27T19:22:45Z", "type": "commit"}, {"oid": "60023d3dd57b6677c8c8150865901be150bd7536", "url": "https://github.com/MovingBlocks/Terasology/commit/60023d3dd57b6677c8c8150865901be150bd7536", "message": "Merge branch 'feature/chunk-standardization' of github.com:pollend/Terasology into feature/chunk-standardization", "committedDate": "2020-12-27T19:23:19Z", "type": "commit"}, {"oid": "43c6bf62424e8efe6e81c4a895f2556c69aad40f", "url": "https://github.com/MovingBlocks/Terasology/commit/43c6bf62424e8efe6e81c4a895f2556c69aad40f", "message": "Merge branch 'develop' into feature/chunk-standardization", "committedDate": "2020-12-30T17:48:20Z", "type": "commit"}, {"oid": "9d0c7d786221b353a1bede2fae60c61efd00377b", "url": "https://github.com/MovingBlocks/Terasology/commit/9d0c7d786221b353a1bede2fae60c61efd00377b", "message": "Merge branch 'develop' into feature/chunk-standardization", "committedDate": "2020-12-30T19:04:49Z", "type": "commit"}, {"oid": "7a6ab01c028923e42addce8b201890b31b9ed5e6", "url": "https://github.com/MovingBlocks/Terasology/commit/7a6ab01c028923e42addce8b201890b31b9ed5e6", "message": "refactor(BlockRegion): rename `blockFace` >>> `face`", "committedDate": "2020-12-30T19:20:10Z", "type": "commit"}]}