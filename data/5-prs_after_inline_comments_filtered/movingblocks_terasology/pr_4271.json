{"pr_number": 4271, "pr_title": "feat(discord-rpc): improve the system", "pr_createdAt": "2020-11-24T13:55:03Z", "pr_url": "https://github.com/MovingBlocks/Terasology/pull/4271", "timeline": [{"oid": "4214950a252f2a2170737d0f687e5a6aacd08e93", "url": "https://github.com/MovingBlocks/Terasology/commit/4214950a252f2a2170737d0f687e5a6aacd08e93", "message": "feat(discord): change main menu state\n\nChange main menu state from \"In Lobby\" to \"In Main Menu\"", "committedDate": "2020-11-25T11:59:22Z", "type": "forcePushed"}, {"oid": "df87bc76478cbf9fbaa7b19d8d1ea5c5b90eef62", "url": "https://github.com/MovingBlocks/Terasology/commit/df87bc76478cbf9fbaa7b19d8d1ea5c5b90eef62", "message": "feat(discord): change main menu state\n\nChange main menu state from \"In Lobby\" to \"In Main Menu\"", "committedDate": "2020-11-26T16:18:25Z", "type": "forcePushed"}, {"oid": "acb8b98789a2baeab99440d828c3417b3ecb8d10", "url": "https://github.com/MovingBlocks/Terasology/commit/acb8b98789a2baeab99440d828c3417b3ecb8d10", "message": "feat(discord): rewrite + make it thread-safe\n\nThe rewrite was necessary to be able to achieve the system to be thread-safe.\nIt gave the opportunity to organise how the subsystem works.\n\nThis also ensures the subsystem is easy to:\n- Implement new features!\n- Fix bugs without breaking stuff\n\n- Separated the thread into its own class\n- Subsystem manages the communication with the thread\n- Re-organized the system\n- Fix: disable discord-ipc library logger", "committedDate": "2020-12-01T16:30:58Z", "type": "forcePushed"}, {"oid": "84a4b5d2103a66bf4e127f8656c263af7de47757", "url": "https://github.com/MovingBlocks/Terasology/commit/84a4b5d2103a66bf4e127f8656c263af7de47757", "message": "feat(discord): rewrite + make it thread-safe\n\nThe rewrite was necessary to be able to achieve the system to be thread-safe.\nIt gave the opportunity to organise how the subsystem works.\n\nThis also ensures the subsystem is easy to:\n- Implement new features!\n- Fix bugs without breaking stuff\n\n- Separated the thread into its own class\n- Subsystem manages the communication with the thread\n- Re-organized the system\n- Fix: disable discord-ipc library logger", "committedDate": "2020-12-01T16:32:12Z", "type": "forcePushed"}, {"oid": "dbd33242bfdcc02b08be15bd3b9a44fd0065dae4", "url": "https://github.com/MovingBlocks/Terasology/commit/dbd33242bfdcc02b08be15bd3b9a44fd0065dae4", "message": "feat(discord): rewrite + make it thread-safe\n\nThe rewrite was necessary to be able to achieve the system to be thread-safe.\nIt gave the opportunity to organise how the subsystem works.\n\nThis also ensures the subsystem is easy to:\n- Implement new features!\n- Fix bugs without breaking stuff\n\n- Separated the thread into its own class\n- Subsystem manages the communication with the thread\n- Re-organized the system\n- Fix: disable discord-ipc library logger", "committedDate": "2020-12-01T16:51:13Z", "type": "forcePushed"}, {"oid": "47bae742f7fdb5466bd0bfc66ee01d7275efa3d6", "url": "https://github.com/MovingBlocks/Terasology/commit/47bae742f7fdb5466bd0bfc66ee01d7275efa3d6", "message": "feat(discord): rewrite + make it thread-safe\n\nThe rewrite was necessary to be able to achieve the system to be thread-safe.\nIt gave the opportunity to organise how the subsystem works.\n\nThis also ensures the subsystem is easy to:\n- Implement new features!\n- Fix bugs without breaking stuff\n\n- Separated the thread into its own class\n- Subsystem manages the communication with the thread\n- Re-organized the system\n- Fix: disable discord-ipc library logger", "committedDate": "2020-12-01T16:54:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYwNDY2MA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4271#discussion_r533604660", "bodyText": "Maybe better to use java.util.Timer?\nIt can run task every fixed rate (i saw Thread.sleep(5000) in code below)", "author": "DarkWeird", "createdAt": "2020-12-01T17:47:15Z", "path": "subsystems/DiscordRPC/src/main/java/org/terasology/engine/subsystem/discordrpc/DiscordRPCThread.java", "diffHunk": "@@ -0,0 +1,250 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.engine.subsystem.discordrpc;\n+\n+import com.jagrosh.discordipc.IPCClient;\n+import com.jagrosh.discordipc.IPCListener;\n+import com.jagrosh.discordipc.entities.RichPresence;\n+import com.jagrosh.discordipc.exceptions.NoDiscordClientException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class DiscordRPCThread implements IPCListener, Runnable {\n+    private static final Logger logger = LoggerFactory.getLogger(DiscordRPCThread.class);\n+    private static final long DISCORD_APP_CLIENT_ID = 515274721080639504L;\n+    private static final String DISCORD_APP_DEFAULT_IMAGE = \"ss_6\";\n+    private static final int MAX_RECONNECT_TRIES = 5;\n+\n+    private final Thread thread;\n+    private final IPCClient ipcClient;\n+    private final DiscordRPCBuffer buffer;\n+    private RichPresence lastRichPresence;\n+\n+    private int tries;\n+\n+    private boolean enabled;\n+    private boolean waiting;\n+    private boolean connectedBefore;\n+    private boolean connected;\n+    private boolean autoReconnect;\n+\n+    public DiscordRPCThread() {\n+        thread = new Thread(this);", "originalCommit": "47bae742f7fdb5466bd0bfc66ee01d7275efa3d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk0NTg1Mw==", "url": "https://github.com/MovingBlocks/Terasology/pull/4271#discussion_r539945853", "bodyText": "I thought of using the java.util.Timer. But, that would make handling connection to Discord client harder to do.\nBecause there are special cases like:\n\nIf the player doesn't have the Discord client we need to try to reconnect then gave up on trying.\nIf the player has the Discord client then we connect to it and keep the connection alive. Even if the player disabled the RPC option in the player settings.\nWhen the player toggles the RPC option in the player settings we just have to send null to the Discord client. Instead of closing the connection. And re-connecting again when enabled.", "author": "iHDeveloper", "createdAt": "2020-12-10T07:48:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYwNDY2MA=="}], "type": "inlineReview"}, {"oid": "b36ecafc6a8e7f4eb9f7fc350b2ebad6ada45a44", "url": "https://github.com/MovingBlocks/Terasology/commit/b36ecafc6a8e7f4eb9f7fc350b2ebad6ada45a44", "message": "- feat(discord): Implement party size\n\n- fix: can't hide start timestamp", "committedDate": "2021-01-07T00:53:01Z", "type": "forcePushed"}, {"oid": "e02c616222aaf69c5f52c51774e9732a4d6ed85e", "url": "https://github.com/MovingBlocks/Terasology/commit/e02c616222aaf69c5f52c51774e9732a4d6ed85e", "message": "feat(discord): Implement party size\n\n- fix: can't hide start timestamp", "committedDate": "2021-01-07T00:56:11Z", "type": "forcePushed"}, {"oid": "e3b8063267dd0eb608e1f447e8fd18100e4fb5f2", "url": "https://github.com/MovingBlocks/Terasology/commit/e3b8063267dd0eb608e1f447e8fd18100e4fb5f2", "message": "feat(discord): Implement party size\n\n- fix: can't hide start timestamp", "committedDate": "2021-01-07T00:59:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYwNDc0MQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4271#discussion_r554604741", "bodyText": "Since we log the start of initializing as INFO, should we also load the success when the thread was started (analog to the case where the integration is disabled).", "author": "skaldarnar", "createdAt": "2021-01-10T18:27:04Z", "path": "subsystems/DiscordRPC/src/main/java/org/terasology/engine/subsystem/discordrpc/DiscordRPCSubSystem.java", "diffHunk": "@@ -38,281 +31,136 @@\n  * Subsystem that manages Discord RPC in the game client, such as status or connection.\n  * This subsystem can be enhanced further to improve game presentation in rich presence.\n  *\n+ * It communicates with the thread safely using thread-safe shared buffer.\n+ *\n  * @see EngineSubsystem\n  */\n-public class DiscordRPCSubSystem implements EngineSubsystem, IPCListener, Runnable, PropertyChangeListener {\n-\n+public final class DiscordRPCSubSystem implements EngineSubsystem, PropertyChangeListener {\n     private static final Logger logger = LoggerFactory.getLogger(DiscordRPCSubSystem.class);\n-    private static final long DISCORD_APP_CLIENT_ID = 515274721080639504L;\n-    private static final String DISCORD_APP_LARGE_IMAGE = \"ss_6\";\n-    private static final int RECONNECT_TRIES = 5;\n     private static DiscordRPCSubSystem instance;\n \n-    private IPCClient ipcClient;\n-    private boolean ready;\n-    private boolean autoReconnect;\n-    private Thread reconnectThread;\n-    private RichPresence lastRichPresence;\n-    private boolean reconnecting;\n-    private int reconnectTries = 1;\n-    private boolean connectedBefore;\n     private Config config;\n-    private String lastState;\n-    private boolean dontTryAgain;\n-    private boolean enabled;\n+    private DiscordRPCThread thread;\n \n     public DiscordRPCSubSystem() throws IllegalStateException {\n         if (instance != null) {\n             throw new IllegalStateException(\"More then one instance in the DiscordRPC\");\n         }\n-        lastRichPresence = null;\n-        ipcClient = new IPCClient(DISCORD_APP_CLIENT_ID);\n-        ipcClient.setListener(this);\n-        autoReconnect = true;\n-        reconnectThread = new Thread(this);\n-        reconnectThread.setName(\"DISCORD-RPC-RECONNECT\");\n-        reconnectThread.start();\n-        instance = this;\n-        enabled = false;\n-        dontTryAgain = true;\n-    }\n \n-    public void sendRichPresence(RichPresence richPresence) {\n-        this.lastRichPresence = richPresence;\n-        if (!ready || lastRichPresence == null || !enabled) {\n-            return;\n-        }\n-        ipcClient.sendRichPresence(lastRichPresence);\n+        instance = this;\n     }\n \n     @Override\n-    public void onReady(IPCClient client) {\n-        if (reconnecting) {\n-            logger.info(\"Discord RPC >> Reconnected!\");\n-            reconnectTries = 1;\n-        } else {\n-            logger.info(\"Discord RPC >> Connected!\");\n-            connectedBefore = true;\n-        }\n-        this.ipcClient = client;\n-        if (!ready) {\n-            ready = true;\n-        }\n-        if (lastRichPresence == null) {\n-            RichPresence.Builder builder = new RichPresence.Builder();\n-            builder.setLargeImage(DISCORD_APP_LARGE_IMAGE);\n-            lastRichPresence = builder.build();\n-        }\n-        client.sendRichPresence(lastRichPresence);\n-    }\n+    public void initialise(GameEngine engine, Context rootContext) {\n+        logger.info(\"Initializing...\");\n \n-    @Override\n-    public void onDisconnect(IPCClient client, Throwable t) {\n-        if (ready) {\n-            ready = false;\n+        thread = new DiscordRPCThread();\n+        thread.getBuffer().setState(\"In Main Menu\");\n+\n+        config = rootContext.get(Config.class);\n+\n+        if (config.getPlayer().isDiscordPresence()) {\n+            thread.enable();\n+        } else {\n+            logger.info(\"Discord RPC is disabled! No connection is being made during initialization.\");\n+            thread.disable();\n         }\n-        logger.info(\"Discord RPC >> Disconnected!\");\n+        thread.start();", "originalCommit": "e3b8063267dd0eb608e1f447e8fd18100e4fb5f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTYxMDI0MQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4271#discussion_r565610241", "bodyText": "The purpose of the thread is to be alive all the time until the game shuts down. But if the user disabled the RPC the thread will be in the sleeping mode until something changes and notifies it. When the thread gets notified it tries to connect to the IPC server. If it fails to connect 5 times at maximum then the thread will go sleep again.", "author": "iHDeveloper", "createdAt": "2021-01-27T20:25:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYwNDc0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYwNTAwMQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4271#discussion_r554605001", "bodyText": "Is this a random number or something assigned to us in some way?", "author": "skaldarnar", "createdAt": "2021-01-10T18:29:18Z", "path": "subsystems/DiscordRPC/src/main/java/org/terasology/engine/subsystem/discordrpc/DiscordRPCThread.java", "diffHunk": "@@ -0,0 +1,284 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.engine.subsystem.discordrpc;\n+\n+import com.jagrosh.discordipc.IPCClient;\n+import com.jagrosh.discordipc.IPCListener;\n+import com.jagrosh.discordipc.entities.RichPresence;\n+import com.jagrosh.discordipc.exceptions.NoDiscordClientException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class DiscordRPCThread implements IPCListener, Runnable {\n+    private static final Logger logger = LoggerFactory.getLogger(DiscordRPCThread.class);\n+    private static final long DISCORD_APP_CLIENT_ID = 515274721080639504L;", "originalCommit": "e3b8063267dd0eb608e1f447e8fd18100e4fb5f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTA3ODc3OA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4271#discussion_r559078778", "bodyText": "This random represents the client ID of the Discord application. Discord client needs this ID to fetch information and assets about the application to display it to the rich presence.", "author": "iHDeveloper", "createdAt": "2021-01-17T05:01:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYwNTAwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTIwNzkwMg==", "url": "https://github.com/MovingBlocks/Terasology/pull/4271#discussion_r559207902", "bodyText": "Yeah I think that might be associated with our registered app on Discord, which I originally set up. Nowadays the app is owned by a team with several of us having access \ud83d\udc4d", "author": "Cervator", "createdAt": "2021-01-17T16:55:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYwNTAwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDUxMzY3Nw==", "url": "https://github.com/MovingBlocks/Terasology/pull/4271#discussion_r560513677", "bodyText": "Is that sensitive information (like an access token) or more of a global identifier?", "author": "skaldarnar", "createdAt": "2021-01-19T21:38:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYwNTAwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDY1OTkzNQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4271#discussion_r560659935", "bodyText": "Just an identifier \ud83d\udc4d There's also a secret but I don't think it is needed for anything in this case.\nIncidentally you should have access to it via https://discord.com/developers/teams/781638052501520417 although it looks like you might have gotten an invite and not accepted it yet (Nira is in)", "author": "Cervator", "createdAt": "2021-01-20T04:02:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYwNTAwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTYwNDI4Mg==", "url": "https://github.com/MovingBlocks/Terasology/pull/4271#discussion_r565604282", "bodyText": "Yep as Cervator said it's an identifier so it's not sensitive information. And, about the secret, it's mostly used in OAuth2 applications which I think we don't need soon.\nI agree with what Cervator said. And about the secret, it's mostly used in OAuth2 applications which I don't think we will need soon.", "author": "iHDeveloper", "createdAt": "2021-01-27T20:15:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYwNTAwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYwNTIxNg==", "url": "https://github.com/MovingBlocks/Terasology/pull/4271#discussion_r554605216", "bodyText": "How much will this actually log on the INFO level? I'm cautious when I see logger.info in combination with loops or frequently called methods as this might spam the log.", "author": "skaldarnar", "createdAt": "2021-01-10T18:31:23Z", "path": "subsystems/DiscordRPC/src/main/java/org/terasology/engine/subsystem/discordrpc/DiscordRPCThread.java", "diffHunk": "@@ -0,0 +1,284 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.engine.subsystem.discordrpc;\n+\n+import com.jagrosh.discordipc.IPCClient;\n+import com.jagrosh.discordipc.IPCListener;\n+import com.jagrosh.discordipc.entities.RichPresence;\n+import com.jagrosh.discordipc.exceptions.NoDiscordClientException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class DiscordRPCThread implements IPCListener, Runnable {\n+    private static final Logger logger = LoggerFactory.getLogger(DiscordRPCThread.class);\n+    private static final long DISCORD_APP_CLIENT_ID = 515274721080639504L;\n+    private static final String DISCORD_APP_DEFAULT_IMAGE = \"ss_6\";\n+    private static final int MAX_RECONNECT_TRIES = 5;\n+\n+    private final Thread thread;\n+    private final IPCClient ipcClient;\n+    private final DiscordRPCBuffer buffer;\n+    private RichPresence lastRichPresence;\n+\n+    private int tries;\n+\n+    private boolean enabled;\n+    private boolean waiting;\n+    private boolean connectedBefore;\n+    private boolean connected;\n+    private boolean autoReconnect;\n+\n+    public DiscordRPCThread() {\n+        thread = new Thread(this);\n+        thread.setName(\"DISCORD-RPC-THREAD\");\n+\n+        ipcClient = new IPCClient(DISCORD_APP_CLIENT_ID);\n+        ipcClient.setListener(this);\n+\n+        buffer = new DiscordRPCBuffer();\n+\n+        lastRichPresence = null;\n+\n+        tries = 0;\n+\n+        enabled = false;\n+        waiting = false;\n+        connectedBefore = false;\n+        connected = false;\n+        autoReconnect = false;\n+    }\n+\n+    public void start() {\n+        thread.start();\n+    }\n+\n+    public synchronized void stop() {\n+        synchronized (thread) {\n+            thread.interrupt();\n+        }\n+    }\n+\n+    public synchronized void discover() {\n+        if (enabled && connected) {\n+            return;\n+        }\n+\n+        reset(true);\n+\n+        connectedBefore = true;\n+    }\n+\n+    public synchronized void enable() {\n+        if (enabled) {\n+            return;\n+        }\n+\n+        enabled = true;\n+        autoReconnect = true;\n+\n+        if (waiting && thread.isAlive()) {\n+            synchronized (thread) {\n+                thread.notify();\n+            }\n+        }\n+    }\n+\n+    public synchronized void disable() {\n+        disable(false);\n+    }\n+\n+    public synchronized void disable(boolean keepConnectionAlive) {\n+        if (!enabled) {\n+            return;\n+        }\n+\n+        enabled = false;\n+\n+        reset(!keepConnectionAlive);\n+        if (!keepConnectionAlive) {\n+            autoReconnect = false;\n+        }\n+\n+        if (waiting && thread.isAlive()) {\n+            synchronized (thread) {\n+                thread.notify();\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void onReady(IPCClient ignored) {\n+        if (connectedBefore) {\n+            logger.info(\"Re-connected to Discord RPC!\");\n+        } else {\n+            logger.info(\"Connected to Discord RPC!\");\n+        }\n+\n+        connectedBefore = true;\n+        connected = true;\n+    }\n+\n+    @Override\n+    public void onDisconnect(IPCClient client, Throwable t) {\n+        connected = false;\n+        logger.info(\"Discord RPC lost connection: Disconnected!\");\n+    }\n+\n+    @Override\n+    public void run() {\n+        while (true) {\n+            logger.info(\"Waiting for auto-connecting...\");", "originalCommit": "e3b8063267dd0eb608e1f447e8fd18100e4fb5f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTA3OTUxOQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4271#discussion_r559079519", "bodyText": "The purpose of the loop is to keep the thread alive. It's rare for this auto-connect log to appear.\nIt will appear by one of these conditions below:\n\nOnce on the start\nEvery time the player disables the rich presence from the player settings (if the player doesn't have the Discord client)\nWhen the thread tries to find the Discord client but still couldn't connect to it.", "author": "iHDeveloper", "createdAt": "2021-01-17T05:12:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYwNTIxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTIwODQwMA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4271#discussion_r559208400", "bodyText": "Likewise a bit concerned here, it doesn't seem overly far fetched that a connectivity issue could appear then suddenly the log is being filled by junk due to a decidedly optional extra that you could play without perfectly fine otherwise :-)\nIn other words: if the Discord integration breaks or is in a bad state it shouldn't be too loud about it - ideally just log once per \"incident\" however we define that", "author": "Cervator", "createdAt": "2021-01-17T16:58:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYwNTIxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDUxNDMxNQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4271#discussion_r560514315", "bodyText": "So what happens if the discord servers are down, or the player just does not have an active internet connection?", "author": "skaldarnar", "createdAt": "2021-01-19T21:40:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYwNTIxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTYwODYwNg==", "url": "https://github.com/MovingBlocks/Terasology/pull/4271#discussion_r565608606", "bodyText": "The Discord client hosts a local IPC server for the applications to connect it.\nWhen the application connects it exchanges information with the server to identify the application.\nAnd then the application can send RPC information every x amount of time to update it.\nThe Discord client decides which application RPC will be shown depends on different factors.\nIf something happens in the Discord servers the only affected side is going to be the Discord client.\nThe Discord Client runs the IPC server when the client starts. And it doesn't stop until the client is being shutdown.\nAnd until that happens it's going to stay listening to application RPCs whether the Discord server is down or not.", "author": "iHDeveloper", "createdAt": "2021-01-27T20:23:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYwNTIxNg=="}], "type": "inlineReview"}, {"oid": "d8e959d674722f460da07629cd10f9b8f7c539b9", "url": "https://github.com/MovingBlocks/Terasology/commit/d8e959d674722f460da07629cd10f9b8f7c539b9", "message": "chore(idea): ignore discord plugin settings\n\nIt's user-specific file. It shouldn't be shared since each user has its own settings.", "committedDate": "2021-02-18T16:10:13Z", "type": "commit"}, {"oid": "f8077d800d780c02803d9c0db06d043cd69ab054", "url": "https://github.com/MovingBlocks/Terasology/commit/f8077d800d780c02803d9c0db06d043cd69ab054", "message": "feat(discord): change main menu state\n\nChange main menu state from \"In Lobby\" to \"In Main Menu\"", "committedDate": "2021-02-18T16:10:21Z", "type": "commit"}, {"oid": "4dc6ec621b5a8cb3f6d26020474578d4374a1e49", "url": "https://github.com/MovingBlocks/Terasology/commit/4dc6ec621b5a8cb3f6d26020474578d4374a1e49", "message": "feat(discord): rewrite + make it thread-safe\n\nThe rewrite was necessary to be able to achieve the system to be thread-safe.\nIt gave the opportunity to organise how the subsystem works.\n\nThis also ensures the subsystem is easy to:\n- Implement new features!\n- Fix bugs without breaking stuff\n\n- Separated the thread into its own class\n- Subsystem manages the communication with the thread\n- Re-organized the system\n- Fix: disable discord-ipc library logger", "committedDate": "2021-02-18T16:10:21Z", "type": "commit"}, {"oid": "129e8993eaa7b930b6bd29de411b7d4123630d84", "url": "https://github.com/MovingBlocks/Terasology/commit/129e8993eaa7b930b6bd29de411b7d4123630d84", "message": "feat(discord): Ability to change details of the game\n\nUsed to set the gameplay name (e.g. Josharias Survival, Metal Renegades, etc...)\nIt will show on discord in this format \"Game: <name>\"\n\n- Improve the buffer change trigger and handler\n- Ability to change details in the buffer\n- Apply the new format for the rich presence\n-- Details -> \"Game: <name>\"\n-- Party State -> \"Playing Solo\" / \"Playing Online\" / \"Hosting\"\n\n- Fix: Triggering `Thread#setEnabled` with keeping the connection alive\n- Fix: No safe shutdown to the RPC thread", "committedDate": "2021-02-18T16:10:21Z", "type": "commit"}, {"oid": "dc1c1587ad9787a61bc0b336524ea164a43127f3", "url": "https://github.com/MovingBlocks/Terasology/commit/dc1c1587ad9787a61bc0b336524ea164a43127f3", "message": "feat(discord): Implement party size\n\n- fix: can't hide start timestamp", "committedDate": "2021-02-18T16:10:21Z", "type": "commit"}, {"oid": "dc1c1587ad9787a61bc0b336524ea164a43127f3", "url": "https://github.com/MovingBlocks/Terasology/commit/dc1c1587ad9787a61bc0b336524ea164a43127f3", "message": "feat(discord): Implement party size\n\n- fix: can't hide start timestamp", "committedDate": "2021-02-18T16:10:21Z", "type": "forcePushed"}, {"oid": "54784a089efc595116241c9662bd216e1266ef37", "url": "https://github.com/MovingBlocks/Terasology/commit/54784a089efc595116241c9662bd216e1266ef37", "message": "Merge branch 'develop' into discord-rpc/improvement", "committedDate": "2021-03-05T21:42:32Z", "type": "commit"}, {"oid": "7fd8605420a4abb535e9da858d720793287abf2d", "url": "https://github.com/MovingBlocks/Terasology/commit/7fd8605420a4abb535e9da858d720793287abf2d", "message": "Merge branch 'develop' into discord-rpc/improvement", "committedDate": "2021-03-05T22:23:44Z", "type": "commit"}]}