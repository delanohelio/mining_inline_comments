{"pr_number": 4157, "pr_title": "chore[facade]: use picocli for processing command line options", "pr_createdAt": "2020-09-22T20:35:46Z", "pr_url": "https://github.com/MovingBlocks/Terasology/pull/4157", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ2OTQyNQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4157#discussion_r495469425", "bodyText": "\ud83d\udc4d I like ^^", "author": "skaldarnar", "createdAt": "2020-09-26T15:51:50Z", "path": "facades/PC/src/main/java/org/terasology/engine/Terasology.java", "diffHunk": "@@ -91,390 +30,20 @@\n  * <tr><td>-serverPort=xxxxx</td><td>Change the server port.</td></tr>\n  * </tbody>\n  * </table>\n- * <br><br>\n+ * <p>\n  * When used via command line an usage help and some examples can be obtained via:\n  * <br><br>\n  * terasology -help    or    terasology /?\n- * <br><br>\n+ *\n  */\n \n public final class Terasology {\n \n-    private static final String[] PRINT_USAGE_FLAGS = {\"--help\", \"-help\", \"/help\", \"-h\", \"/h\", \"-?\", \"/?\"};\n-    private static final String USE_CURRENT_DIR_AS_HOME = \"-homedir\";\n-    private static final String USE_SPECIFIED_DIR_AS_HOME = \"-homedir=\";\n-    private static final String START_HEADLESS = \"-headless\";\n-    private static final String LOAD_LAST_GAME = \"-loadlastgame\";\n-    private static final String CREATE_LAST_GAME = \"-createlastgame\";\n-    private static final String NO_CRASH_REPORT = \"-noCrashReport\";\n-    private static final String NO_SAVE_GAMES = \"-noSaveGames\";\n-    private static final String PERMISSIVE_SECURITY = \"-permissiveSecurity\";\n-    private static final String NO_SOUND = \"-noSound\";\n-    private static final String NO_SPLASH = \"-noSplash\";\n-    private static final String SERVER_PORT = \"-serverPort=\";\n-    private static final String OVERRIDE_DEFAULT_CONFIG = \"-overrideDefaultConfig=\";\n-    private static final Logger logger = LoggerFactory.getLogger(Terasology.class);\n-\n-\n-    private static boolean isHeadless;\n-    private static boolean crashReportEnabled = true;\n-    private static boolean soundEnabled = true;\n-    private static boolean splashEnabled = true;\n-    private static boolean loadLastGame;\n-    private static boolean createLastGame;\n-\n-\n     private Terasology() {\n     }\n \n     public static void main(String[] args) {\n-\n-        handlePrintUsageRequest(args);\n-        handleLaunchArguments(args);\n-\n-        SplashScreen splashScreen = splashEnabled ? configureSplashScreen() : SplashScreenBuilder.createStub();\n-\n-        splashScreen.post(\"Java Runtime \" + System.getProperty(\"java.version\") + \" loaded\");\n-\n-        setupLogging();\n-\n-        try {\n-            TerasologyEngineBuilder builder = new TerasologyEngineBuilder();\n-            populateSubsystems(builder);\n-            TerasologyEngine engine = builder.build();\n-            engine.subscribe(newStatus -> {\n-                if (newStatus == StandardGameStatus.RUNNING) {\n-                    splashScreen.close();\n-                } else {\n-                    splashScreen.post(newStatus.getDescription());\n-                }\n-            });\n-\n-            if (isHeadless) {\n-                engine.subscribeToStateChange(new HeadlessStateChangeListener(engine));\n-                engine.run(new StateHeadlessSetup());\n-            } else if (loadLastGame) {\n-                engine.initialize(); //initialize the managers first\n-                engine.getFromEngineContext(ThreadManager.class).submitTask(\"loadGame\", () -> {\n-                    GameManifest gameManifest = getLatestGameManifest();\n-                    if (gameManifest != null) {\n-                        engine.changeState(new StateLoading(gameManifest, NetworkMode.NONE));\n-                    }\n-                });\n-            } else {\n-                if (createLastGame) {\n-                    engine.initialize();\n-                    engine.getFromEngineContext(ThreadManager.class).submitTask(\"createLastGame\", () -> {\n-                        GameManifest gameManifest = getLatestGameManifest();\n-                        if (gameManifest != null) {\n-                            String title = gameManifest.getTitle();\n-                            GameManifest newlyCreatedGM = gameManifest;\n-                            if (!title.startsWith(\"New Created\")) { //if first time run\n-                                newlyCreatedGM.setTitle(\"New Created \" + title + \" 1\");\n-                            } else { //if not first time run\n-                                newlyCreatedGM.setTitle(getNewTitle(title));\n-                            }\n-                            engine.changeState(new StateLoading(newlyCreatedGM, NetworkMode.NONE));\n-                        }\n-                    });\n-                }\n-\n-                engine.run(new StateMainMenu());\n-            }\n-        } catch (Throwable e) {\n-            // also catch Errors such as UnsatisfiedLink, NoSuchMethodError, etc.\n-            splashScreen.close();\n-            reportException(e);\n-        }\n-    }\n-\n-    private static String getNewTitle(String title) {\n-        String newTitle = title.substring(0, getPositionOfLastDigit(title));\n-        int fileNumber = getLastNumber(title);\n-        fileNumber++;\n-        return (newTitle + \" \" + fileNumber);\n-    }\n-\n-    private static SplashScreen configureSplashScreen() {\n-        int imageHeight = 283;\n-        int maxTextWidth = 450;\n-        int width = 600;\n-        int height = 30;\n-        int left = 20;\n-        int top = imageHeight - height - 20;\n-\n-        Rectangle rectRc = new Rectangle(left, top, width, height);\n-        Rectangle textRc = new Rectangle(left + 10, top + 5, maxTextWidth, height);\n-        Rectangle boxRc = new Rectangle(left + maxTextWidth + 10, top, width - maxTextWidth - 20, height);\n-\n-        SplashScreenBuilder builder = new SplashScreenBuilder();\n-\n-        String[] imgFiles = new String[] {\n-                \"splash_1.png\",\n-                \"splash_2.png\",\n-                \"splash_3.png\",\n-                \"splash_4.png\",\n-                \"splash_5.png\"\n-        };\n-\n-        Point[] imgOffsets = new Point[] {\n-                new Point(0, 0),\n-                new Point(150, 0),\n-                new Point(300, 0),\n-                new Point(450, 0),\n-                new Point(630, 0)\n-        };\n-\n-        EngineStatus[] trigger = new EngineStatus[] {\n-                TerasologyEngineStatus.PREPARING_SUBSYSTEMS,\n-                TerasologyEngineStatus.INITIALIZING_MODULE_MANAGER,\n-                TerasologyEngineStatus.INITIALIZING_ASSET_TYPES,\n-                TerasologyEngineStatus.INITIALIZING_SUBSYSTEMS,\n-                TerasologyEngineStatus.INITIALIZING_ASSET_MANAGEMENT,\n-        };\n-\n-        try {\n-            for (int index = 0; index < 5; index++) {\n-                URL resource = Terasology.class.getResource(\"/splash/\" + imgFiles[index]);\n-                builder.add(new TriggerImageOverlay(verifyNotNull(resource, \"resource /splash/%s\", imgFiles[index]))\n-                        .setTrigger(trigger[index].getDescription())\n-                        .setPosition(imgOffsets[index].x, imgOffsets[index].y));\n-            }\n-\n-            builder.add(new ImageOverlay(Terasology.class.getResource(\"/splash/splash_text.png\")));\n-\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        }\n-\n-        SplashScreen instance = builder\n-                .add(new RectOverlay(rectRc))\n-                .add(new TextOverlay(textRc))\n-                .add(new AnimatedBoxRowOverlay(boxRc))\n-                .build();\n-\n-        return instance;\n-    }\n-\n-    private static void setupLogging() {\n-        Path path = PathManager.getInstance().getLogPath();\n-        if (path == null) {\n-            path = Paths.get(\"logs\");\n-        }\n-\n-        LoggingContext.initialize(path);\n-    }\n-\n-    private static void handlePrintUsageRequest(String[] args) {\n-        for (String arg : args) {\n-            for (String usageArg : PRINT_USAGE_FLAGS) {\n-                if (usageArg.equals(arg.toLowerCase())) {\n-                    printUsageAndExit();\n-                }\n-            }\n-        }\n-    }\n-\n-    private static void printUsageAndExit() {\n-\n-        String printUsageFlags = Joiner.on(\"|\").join(PRINT_USAGE_FLAGS);\n-\n-        List<String> opts = ImmutableList.of(\n-                printUsageFlags,\n-                USE_CURRENT_DIR_AS_HOME + \"|\" + USE_SPECIFIED_DIR_AS_HOME + \"<path>\",\n-                START_HEADLESS,\n-                LOAD_LAST_GAME,\n-                CREATE_LAST_GAME,\n-                NO_CRASH_REPORT,\n-                NO_SAVE_GAMES,\n-                PERMISSIVE_SECURITY,\n-                NO_SOUND,\n-                NO_SPLASH,\n-                OVERRIDE_DEFAULT_CONFIG + \"<path>\",\n-                SERVER_PORT + \"<port>\");\n-\n-        StringBuilder optText = new StringBuilder();\n-\n-        for (String opt : opts) {\n-            optText.append(\" [\").append(opt).append(\"]\");\n-        }\n-\n-        System.out.println(\"Usage:\");\n-        System.out.println();\n-        System.out.println(\"    terasology\" + optText.toString());\n-        System.out.println();\n-        System.out.println(\"By default Terasology saves data such as game saves and logs into subfolders of a platform-specific \\\"home directory\\\".\");\n-        System.out.println(\"Saving can be explicitly disabled using the \\\"\" + NO_SAVE_GAMES + \"\\\" flag.\");\n-        System.out.println(\"Optionally, the user can override the default by using one of the following launch arguments:\");\n-        System.out.println();\n-        System.out.println(\"    \" + USE_CURRENT_DIR_AS_HOME + \"        Use the current directory as the home directory.\");\n-        System.out.println(\"    \" + USE_SPECIFIED_DIR_AS_HOME + \"<path> Use the specified directory as the home directory.\");\n-        System.out.println();\n-        System.out.println(\"It is also possible to start Terasology in headless mode (no graphics), i.e. to act as a server.\");\n-        System.out.println(\"For this purpose use the \" + START_HEADLESS + \" launch argument.\");\n-        System.out.println();\n-        System.out.println(\"To automatically load the latest game on startup,\");\n-        System.out.println(\"use the \" + LOAD_LAST_GAME + \" launch argument.\");\n-        System.out.println();\n-        System.out.println(\"To automatically recreate the last game played with a new save file,\");\n-        System.out.println(\"use the \" + CREATE_LAST_GAME + \"launch argument\");\n-        System.out.println();\n-        System.out.println(\"By default Crash Reporting is enabled.\");\n-        System.out.println(\"To disable this feature use the \" + NO_CRASH_REPORT + \" launch argument.\");\n-        System.out.println();\n-        System.out.println(\"To disable sound use the \" + NO_SOUND + \" launch argument (default in headless mode).\");\n-        System.out.println();\n-        System.out.println(\"To disable the splash screen use the \" + NO_SPLASH + \" launch argument.\");\n-        System.out.println();\n-        System.out.println(\"To change the port the server is hosted on use the \" + SERVER_PORT + \" launch argument.\");\n-        System.out.println();\n-        System.out.println(\"To override the default generated config (useful for headless server) use the \" + OVERRIDE_DEFAULT_CONFIG + \" launch argument\");\n-        System.out.println();\n-        System.out.println(\"Examples:\");\n-        System.out.println();\n-        System.out.println(\"    Use the current directory as the home directory:\");\n-        System.out.println(\"    terasology \" + USE_CURRENT_DIR_AS_HOME);\n-        System.out.println();\n-        System.out.println(\"    Use \\\"myPath\\\" as the home directory:\");\n-        System.out.println(\"    terasology \" + USE_SPECIFIED_DIR_AS_HOME + \"myPath\");\n-        System.out.println();\n-        System.out.println(\"    Start terasology in headless mode (no graphics) and enforce using the default port:\");\n-        System.out.println(\"    terasology \" + START_HEADLESS + \" \" + SERVER_PORT + TerasologyConstants.DEFAULT_PORT);\n-        System.out.println();\n-        System.out.println(\"    Load the latest game on startup and disable crash reporting\");\n-        System.out.println(\"    terasology \" + LOAD_LAST_GAME + \" \" + NO_CRASH_REPORT);\n-        System.out.println();\n-        System.out.println(\"    Don't start Terasology, just print this help:\");\n-        System.out.println(\"    terasology \" + PRINT_USAGE_FLAGS[1]);\n-        System.out.println();\n-        System.out.println(\"Alternatively use our standalone Launcher from: https://github.com/MovingBlocks/TerasologyLauncher/releases\");\n-        System.out.println();\n-\n-        System.exit(0);\n-    }\n-\n-    private static void handleLaunchArguments(String[] args) {\n-\n-        Path homePath = null;\n-\n-        for (String arg : args) {\n-            boolean recognized = true;\n-\n-            if (arg.startsWith(USE_SPECIFIED_DIR_AS_HOME)) {\n-                homePath = Paths.get(arg.substring(USE_SPECIFIED_DIR_AS_HOME.length()));\n-            } else if (arg.equals(USE_CURRENT_DIR_AS_HOME)) {\n-                homePath = Paths.get(\"\");\n-            } else if (arg.equals(START_HEADLESS)) {\n-                isHeadless = true;\n-                crashReportEnabled = false;\n-                splashEnabled = false;\n-            } else if (arg.equals(NO_SAVE_GAMES)) {\n-                System.setProperty(SystemConfig.SAVED_GAMES_ENABLED_PROPERTY, \"false\");\n-            } else if (arg.equals(PERMISSIVE_SECURITY)) {\n-                System.setProperty(SystemConfig.PERMISSIVE_SECURITY_ENABLED_PROPERTY, \"true\");\n-            } else if (arg.equals(NO_CRASH_REPORT)) {\n-                crashReportEnabled = false;\n-            } else if (arg.equals(NO_SOUND)) {\n-                soundEnabled = false;\n-            } else if (arg.equals(NO_SPLASH)) {\n-                splashEnabled = false;\n-            } else if (arg.equals(LOAD_LAST_GAME)) {\n-                loadLastGame = true;\n-            } else if (arg.equals(CREATE_LAST_GAME)) {\n-                createLastGame = true;\n-            } else if (arg.startsWith(SERVER_PORT)) {\n-                System.setProperty(ConfigurationSubsystem.SERVER_PORT_PROPERTY, arg.substring(SERVER_PORT.length()));\n-            } else if (arg.startsWith(OVERRIDE_DEFAULT_CONFIG)) {\n-                System.setProperty(Config.PROPERTY_OVERRIDE_DEFAULT_CONFIG, arg.substring(OVERRIDE_DEFAULT_CONFIG.length()));\n-            } else {\n-                recognized = false;\n-            }\n-\n-            System.out.println((recognized ? \"Recognized\" : \"Invalid\") + \" argument: \" + arg);\n-        }\n-\n-        try {\n-            if (homePath != null) {\n-                PathManager.getInstance().useOverrideHomePath(homePath);\n-            } else {\n-                PathManager.getInstance().useDefaultHomePath();\n-            }\n-\n-        } catch (IOException e) {\n-            logger.warn(\"The game cannot detect default home directory\");\n-            try {\n-                PathManager.getInstance().chooseHomePathManually();\n-            } catch (IOException ex) {\n-                reportException(ex);\n-                System.exit(0);\n-            }\n-        }\n-    }\n-\n-    private static void populateSubsystems(TerasologyEngineBuilder builder) {\n-        if (isHeadless) {\n-            builder.add(new HeadlessGraphics())\n-                    .add(new HeadlessTimer())\n-                    .add(new HeadlessAudio())\n-                    .add(new HeadlessInput());\n-        } else {\n-            EngineSubsystem audio = soundEnabled ? new LwjglAudio() : new HeadlessAudio();\n-            builder.add(audio)\n-                    .add(new LwjglGraphics())\n-                    .add(new LwjglTimer())\n-                    .add(new LwjglInput())\n-                    .add(new BindsSubsystem())\n-                    .add(new OpenVRInput());\n-            builder.add(new DiscordRPCSubSystem());\n-        }\n-        builder.add(new HibernationSubsystem());\n-    }\n-\n-    private static void reportException(Throwable throwable) {\n-        Path logPath = LoggingContext.getLoggingPath();\n-\n-        if (!GraphicsEnvironment.isHeadless() && crashReportEnabled) {\n-            CrashReporter.report(throwable, logPath);\n-        } else {\n-            throwable.printStackTrace();\n-            System.err.println(\"For more details, see the log files in \" + logPath.toAbsolutePath().normalize());\n-        }\n-    }\n-\n-    private static GameManifest getLatestGameManifest() {\n-        GameInfo latestGame = null;\n-        List<GameInfo> savedGames = GameProvider.getSavedGames();\n-        for (GameInfo savedGame : savedGames) {\n-            if (latestGame == null || savedGame.getTimestamp().after(latestGame.getTimestamp())) {\n-                latestGame = savedGame;\n-            }\n-        }\n-\n-        if (latestGame == null) {\n-            return null;\n-        }\n-\n-        return latestGame.getManifest();\n-    }\n-\n-    private static int getPositionOfLastDigit(String str) {\n-        int position;\n-        for (position = str.length() - 1; position >= 0; --position) {\n-            char c = str.charAt(position);\n-            if (!Character.isDigit(c)) {\n-                break;\n-            }\n-        }\n-        return position + 1;\n-    }\n-\n-    private static int getLastNumber(String str) {\n-        int positionOfLastDigit = getPositionOfLastDigit(str);\n-        if (positionOfLastDigit == str.length()) {\n-            // string does not end in digits\n-            return -1;\n-        }\n-        return Integer.parseInt(str.substring(positionOfLastDigit));\n+        new CommandLine(new TerasologyCommand()).execute(args);", "originalCommit": "4eace4a4e1a485543ac520a7ec11ca549b143d26", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ2OTc0MA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4157#discussion_r495469740", "bodyText": "This is then added via the picocli library, isn't it? I don't think we need to copy word-by-word, but just make sure that users can figure out what options/flags are available.", "author": "skaldarnar", "createdAt": "2020-09-26T15:55:25Z", "path": "facades/PC/src/main/java/org/terasology/engine/TerasologyCommand.java", "diffHunk": "@@ -0,0 +1,417 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+package org.terasology.engine;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.terasology.config.Config;\n+import org.terasology.config.SystemConfig;\n+import org.terasology.crashreporter.CrashReporter;\n+import org.terasology.engine.modes.StateLoading;\n+import org.terasology.engine.modes.StateMainMenu;\n+import org.terasology.engine.paths.PathManager;\n+import org.terasology.engine.subsystem.EngineSubsystem;\n+import org.terasology.engine.subsystem.common.ConfigurationSubsystem;\n+import org.terasology.engine.subsystem.common.ThreadManager;\n+import org.terasology.engine.subsystem.common.hibernation.HibernationSubsystem;\n+import org.terasology.engine.subsystem.config.BindsSubsystem;\n+import org.terasology.engine.subsystem.headless.HeadlessAudio;\n+import org.terasology.engine.subsystem.headless.HeadlessGraphics;\n+import org.terasology.engine.subsystem.headless.HeadlessInput;\n+import org.terasology.engine.subsystem.headless.HeadlessTimer;\n+import org.terasology.engine.subsystem.headless.mode.HeadlessStateChangeListener;\n+import org.terasology.engine.subsystem.headless.mode.StateHeadlessSetup;\n+import org.terasology.engine.subsystem.lwjgl.LwjglAudio;\n+import org.terasology.engine.subsystem.lwjgl.LwjglGraphics;\n+import org.terasology.engine.subsystem.lwjgl.LwjglInput;\n+import org.terasology.engine.subsystem.lwjgl.LwjglTimer;\n+import org.terasology.engine.subsystem.openvr.OpenVRInput;\n+import org.terasology.engine.subsystem.rpc.DiscordRPCSubSystem;\n+import org.terasology.game.GameManifest;\n+import org.terasology.network.NetworkMode;\n+import org.terasology.rendering.nui.layers.mainMenu.savedGames.GameInfo;\n+import org.terasology.rendering.nui.layers.mainMenu.savedGames.GameProvider;\n+import org.terasology.splash.SplashScreen;\n+import org.terasology.splash.SplashScreenBuilder;\n+import org.terasology.splash.overlay.AnimatedBoxRowOverlay;\n+import org.terasology.splash.overlay.ImageOverlay;\n+import org.terasology.splash.overlay.RectOverlay;\n+import org.terasology.splash.overlay.TextOverlay;\n+import org.terasology.splash.overlay.TriggerImageOverlay;\n+import picocli.CommandLine;\n+import picocli.CommandLine.Option;\n+\n+import java.awt.GraphicsEnvironment;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+\n+import static com.google.common.base.Verify.verifyNotNull;\n+\n+/**\n+ * Class providing the main() method for launching Terasology as a PC app.\n+ * <br><br>\n+ * Through the following launch arguments default locations to store logs and\n+ * game saves can be overridden, by using the current directory or a specified\n+ * one as the home directory. Furthermore, Terasology can be launched headless,\n+ * to save resources while acting as a server or to run in an environment with\n+ * no graphics, audio or input support. Additional arguments are available to\n+ * reload the latest game on startup and to disable crash reporting.\n+ * <br><br>\n+ * Available launch arguments:\n+ * <br><br>\n+ * <table summary=\"Launch arguments\">\n+ * <tbody>\n+ * <tr><td>-homedir</td><td>Use the current directory as the home directory.</td></tr>\n+ * <tr><td>-homedir=path</td><td>Use the specified path as the home directory.</td></tr>\n+ * <tr><td>-headless</td><td>Start headless.</td></tr>\n+ * <tr><td>-loadlastgame</td><td>Load the latest game on startup.</td></tr>\n+ * <tr><td>-createlastgame</td><td>Recreates the world of the latest game with a new save file on startup.</td></tr>\n+ * <tr><td>-noSaveGames</td><td>Disable writing of save games.</td></tr>\n+ * <tr><td>-noCrashReport</td><td>Disable crash reporting.</td></tr>\n+ * <tr><td>-noSound</td><td>Disable sound.</td></tr>\n+ * <tr><td>-noSplash</td><td>Disable splash screen.</td></tr>\n+ * <tr><td>-serverPort=xxxxx</td><td>Change the server port.</td></tr>\n+ * </tbody>\n+ * </table>\n+ * <br><br>\n+ * When used via command line an usage help and some examples can be obtained via:\n+ * <br><br>\n+ * terasology -help    or    terasology /?\n+ * <br><br>\n+ */\n+\n+@CommandLine.Command(name = \"terasology\")\n+public class TerasologyCommand implements Callable<Integer> {\n+    private static final Logger logger = LoggerFactory.getLogger(TerasologyCommand.class);\n+\n+    @Option(names = {\"--help\", \"-help\", \"/help\", \"-h\", \"/h\", \"-?\", \"/?\"}, usageHelp = true, description = \"show help\")\n+    private boolean helpRequested;\n+\n+    @Option(names = \"--headless\", description = \"Start headless\")\n+    private boolean isHeadless;\n+\n+    @Option(names = \"--crash-report\", defaultValue = \"true\", negatable = true, description = \"Enable crash reporting\")\n+    private boolean crashReportEnabled;\n+\n+    @Option(names = \"--sound\", defaultValue = \"true\", negatable = true, description = \"Enable sound\")\n+    private boolean soundEnabled;\n+\n+    @Option(names = \"--splash\", defaultValue = \"true\", negatable = true, description = \"Enable splash screen\")\n+    private boolean splashEnabled;\n+\n+    @Option(names = \"--load-last-game\", description = \"Load the latest game on startup\")\n+    private boolean loadLastGame;\n+\n+    @Option(names = \"--create-last-game\", description = \"Recreates the world of the latest game with a new save file on startup\")\n+    private boolean createLastGame;\n+\n+    @Option(names = \"--permissive-security\")\n+    private boolean permissiveSecurity;\n+\n+    @Option(names = \"--save-games\", defaultValue = \"true\", negatable = true, description = \"Enable new save games\")\n+    private boolean saveGamesEnabled;\n+\n+    @Option(names = \"--server-port\", description = \"Change the server port\")\n+    private Integer serverPort;\n+\n+    @Option(names = \"--config\", description = \"Override default config\")\n+    private Path configPath;\n+\n+    @Option(names = \"--homedir\", arity = \"0..1\", fallbackValue = \"${env:PWD}\", description = \"Path to home directory\")\n+    private Path homeDir;\n+\n+    TerasologyCommand() {\n+    }\n+\n+    @Override\n+    public Integer call() throws IOException {\n+        handleLaunchArguments();\n+        setupLogging();\n+\n+        SplashScreen splashScreen = splashEnabled ? configureSplashScreen() : SplashScreenBuilder.createStub();\n+\n+        splashScreen.post(\"Java Runtime \" + System.getProperty(\"java.version\") + \" loaded\");\n+\n+        try {\n+            TerasologyEngineBuilder builder = new TerasologyEngineBuilder();\n+            populateSubsystems(builder);\n+            TerasologyEngine engine = builder.build();\n+            engine.subscribe(newStatus -> {\n+                if (newStatus == StandardGameStatus.RUNNING) {\n+                    splashScreen.close();\n+                } else {\n+                    splashScreen.post(newStatus.getDescription());\n+                }\n+            });\n+\n+            if (isHeadless) {\n+                engine.subscribeToStateChange(new HeadlessStateChangeListener(engine));\n+                engine.run(new StateHeadlessSetup());\n+            } else if (loadLastGame) {\n+                engine.initialize(); //initialize the managers first\n+                engine.getFromEngineContext(ThreadManager.class).submitTask(\"loadGame\", () -> {\n+                    GameManifest gameManifest = getLatestGameManifest();\n+                    if (gameManifest != null) {\n+                        engine.changeState(new StateLoading(gameManifest, NetworkMode.NONE));\n+                    }\n+                });\n+            } else {\n+                if (createLastGame) {\n+                    engine.initialize();\n+                    engine.getFromEngineContext(ThreadManager.class).submitTask(\"createLastGame\", () -> {\n+                        GameManifest gameManifest = getLatestGameManifest();\n+                        if (gameManifest != null) {\n+                            String title = gameManifest.getTitle();\n+                            GameManifest newlyCreatedGM = gameManifest;\n+                            if (!title.startsWith(\"New Created\")) { //if first time run\n+                                newlyCreatedGM.setTitle(\"New Created \" + title + \" 1\");\n+                            } else { //if not first time run\n+                                newlyCreatedGM.setTitle(getNewTitle(title));\n+                            }\n+                            engine.changeState(new StateLoading(newlyCreatedGM, NetworkMode.NONE));\n+                        }\n+                    });\n+                }\n+\n+                engine.run(new StateMainMenu());\n+            }\n+        } catch (Throwable e) {\n+            // also catch Errors such as UnsatisfiedLink, NoSuchMethodError, etc.\n+            splashScreen.close();\n+            reportException(e);\n+        }\n+\n+        return 0;\n+    }\n+\n+    private static String getNewTitle(String title) {\n+        String newTitle = title.substring(0, getPositionOfLastDigit(title));\n+        int fileNumber = getLastNumber(title);\n+        fileNumber++;\n+        return (newTitle + \" \" + fileNumber);\n+    }\n+\n+    private static SplashScreen configureSplashScreen() {\n+        int imageHeight = 283;\n+        int maxTextWidth = 450;\n+        int width = 600;\n+        int height = 30;\n+        int left = 20;\n+        int top = imageHeight - height - 20;\n+\n+        Rectangle rectRc = new Rectangle(left, top, width, height);\n+        Rectangle textRc = new Rectangle(left + 10, top + 5, maxTextWidth, height);\n+        Rectangle boxRc = new Rectangle(left + maxTextWidth + 10, top, width - maxTextWidth - 20, height);\n+\n+        SplashScreenBuilder builder = new SplashScreenBuilder();\n+\n+        String[] imgFiles = new String[] {\n+                \"splash_1.png\",\n+                \"splash_2.png\",\n+                \"splash_3.png\",\n+                \"splash_4.png\",\n+                \"splash_5.png\"\n+        };\n+\n+        Point[] imgOffsets = new Point[] {\n+                new Point(0, 0),\n+                new Point(150, 0),\n+                new Point(300, 0),\n+                new Point(450, 0),\n+                new Point(630, 0)\n+        };\n+\n+        EngineStatus[] trigger = new EngineStatus[] {\n+                TerasologyEngineStatus.PREPARING_SUBSYSTEMS,\n+                TerasologyEngineStatus.INITIALIZING_MODULE_MANAGER,\n+                TerasologyEngineStatus.INITIALIZING_ASSET_TYPES,\n+                TerasologyEngineStatus.INITIALIZING_SUBSYSTEMS,\n+                TerasologyEngineStatus.INITIALIZING_ASSET_MANAGEMENT,\n+        };\n+\n+        try {\n+            for (int index = 0; index < 5; index++) {\n+                URL resource = TerasologyCommand.class.getResource(\"/splash/\" + imgFiles[index]);\n+                builder.add(new TriggerImageOverlay(verifyNotNull(resource, \"resource /splash/%s\", imgFiles[index]))\n+                        .setTrigger(trigger[index].getDescription())\n+                        .setPosition(imgOffsets[index].x, imgOffsets[index].y));\n+            }\n+\n+            builder.add(new ImageOverlay(TerasologyCommand.class.getResource(\"/splash/splash_text.png\")));\n+\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+        SplashScreen instance = builder\n+                .add(new RectOverlay(rectRc))\n+                .add(new TextOverlay(textRc))\n+                .add(new AnimatedBoxRowOverlay(boxRc))\n+                .build();\n+\n+        return instance;\n+    }\n+\n+    private static void setupLogging() {\n+        Path path = PathManager.getInstance().getLogPath();\n+        if (path == null) {\n+            path = Paths.get(\"logs\");\n+        }\n+\n+        LoggingContext.initialize(path);\n+    }\n+\n+\n+    private static void printUsageAndExit() {\n+        // TODO: Add all this stuff back in to the help text.", "originalCommit": "4eace4a4e1a485543ac520a7ec11ca549b143d26", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ2OTg5OQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4157#discussion_r495469899", "bodyText": "Does the Callabale move this to a different thread? Will this cause even more issues with porting to LWJGL 3 and MacOS (see #3969 )?", "author": "skaldarnar", "createdAt": "2020-09-26T15:56:59Z", "path": "facades/PC/src/main/java/org/terasology/engine/TerasologyCommand.java", "diffHunk": "@@ -0,0 +1,417 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+package org.terasology.engine;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.terasology.config.Config;\n+import org.terasology.config.SystemConfig;\n+import org.terasology.crashreporter.CrashReporter;\n+import org.terasology.engine.modes.StateLoading;\n+import org.terasology.engine.modes.StateMainMenu;\n+import org.terasology.engine.paths.PathManager;\n+import org.terasology.engine.subsystem.EngineSubsystem;\n+import org.terasology.engine.subsystem.common.ConfigurationSubsystem;\n+import org.terasology.engine.subsystem.common.ThreadManager;\n+import org.terasology.engine.subsystem.common.hibernation.HibernationSubsystem;\n+import org.terasology.engine.subsystem.config.BindsSubsystem;\n+import org.terasology.engine.subsystem.headless.HeadlessAudio;\n+import org.terasology.engine.subsystem.headless.HeadlessGraphics;\n+import org.terasology.engine.subsystem.headless.HeadlessInput;\n+import org.terasology.engine.subsystem.headless.HeadlessTimer;\n+import org.terasology.engine.subsystem.headless.mode.HeadlessStateChangeListener;\n+import org.terasology.engine.subsystem.headless.mode.StateHeadlessSetup;\n+import org.terasology.engine.subsystem.lwjgl.LwjglAudio;\n+import org.terasology.engine.subsystem.lwjgl.LwjglGraphics;\n+import org.terasology.engine.subsystem.lwjgl.LwjglInput;\n+import org.terasology.engine.subsystem.lwjgl.LwjglTimer;\n+import org.terasology.engine.subsystem.openvr.OpenVRInput;\n+import org.terasology.engine.subsystem.rpc.DiscordRPCSubSystem;\n+import org.terasology.game.GameManifest;\n+import org.terasology.network.NetworkMode;\n+import org.terasology.rendering.nui.layers.mainMenu.savedGames.GameInfo;\n+import org.terasology.rendering.nui.layers.mainMenu.savedGames.GameProvider;\n+import org.terasology.splash.SplashScreen;\n+import org.terasology.splash.SplashScreenBuilder;\n+import org.terasology.splash.overlay.AnimatedBoxRowOverlay;\n+import org.terasology.splash.overlay.ImageOverlay;\n+import org.terasology.splash.overlay.RectOverlay;\n+import org.terasology.splash.overlay.TextOverlay;\n+import org.terasology.splash.overlay.TriggerImageOverlay;\n+import picocli.CommandLine;\n+import picocli.CommandLine.Option;\n+\n+import java.awt.GraphicsEnvironment;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+\n+import static com.google.common.base.Verify.verifyNotNull;\n+\n+/**\n+ * Class providing the main() method for launching Terasology as a PC app.\n+ * <br><br>\n+ * Through the following launch arguments default locations to store logs and\n+ * game saves can be overridden, by using the current directory or a specified\n+ * one as the home directory. Furthermore, Terasology can be launched headless,\n+ * to save resources while acting as a server or to run in an environment with\n+ * no graphics, audio or input support. Additional arguments are available to\n+ * reload the latest game on startup and to disable crash reporting.\n+ * <br><br>\n+ * Available launch arguments:\n+ * <br><br>\n+ * <table summary=\"Launch arguments\">\n+ * <tbody>\n+ * <tr><td>-homedir</td><td>Use the current directory as the home directory.</td></tr>\n+ * <tr><td>-homedir=path</td><td>Use the specified path as the home directory.</td></tr>\n+ * <tr><td>-headless</td><td>Start headless.</td></tr>\n+ * <tr><td>-loadlastgame</td><td>Load the latest game on startup.</td></tr>\n+ * <tr><td>-createlastgame</td><td>Recreates the world of the latest game with a new save file on startup.</td></tr>\n+ * <tr><td>-noSaveGames</td><td>Disable writing of save games.</td></tr>\n+ * <tr><td>-noCrashReport</td><td>Disable crash reporting.</td></tr>\n+ * <tr><td>-noSound</td><td>Disable sound.</td></tr>\n+ * <tr><td>-noSplash</td><td>Disable splash screen.</td></tr>\n+ * <tr><td>-serverPort=xxxxx</td><td>Change the server port.</td></tr>\n+ * </tbody>\n+ * </table>\n+ * <br><br>\n+ * When used via command line an usage help and some examples can be obtained via:\n+ * <br><br>\n+ * terasology -help    or    terasology /?\n+ * <br><br>\n+ */\n+\n+@CommandLine.Command(name = \"terasology\")\n+public class TerasologyCommand implements Callable<Integer> {", "originalCommit": "4eace4a4e1a485543ac520a7ec11ca549b143d26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ5MjU0MQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4157#discussion_r495492541", "bodyText": "I don't think it runs it in another thread. I think picocli just uses Callable as an interface that's easy to define for use with its .execute(it) method, so it can run it, handle exceptions, and get a process return code at the end. But it'll be a good thing to double-check.", "author": "keturn", "createdAt": "2020-09-26T20:29:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ2OTg5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ3NzQ3Mw==", "url": "https://github.com/MovingBlocks/Terasology/pull/4157#discussion_r498477473", "bodyText": "I confirmed this. currentThread() returns the same value inside the call method as it does in the static main.", "author": "keturn", "createdAt": "2020-10-01T19:48:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ2OTg5OQ=="}], "type": "inlineReview"}, {"oid": "a096796554e5bc9f3c2f842aecaaf9eed27cec18", "url": "https://github.com/MovingBlocks/Terasology/commit/a096796554e5bc9f3c2f842aecaaf9eed27cec18", "message": "chore[facade]: use picocli for processing command line options\n\nchore[facade]: remove extraneous TerasologyCommand class", "committedDate": "2020-09-30T22:53:03Z", "type": "commit"}, {"oid": "a096796554e5bc9f3c2f842aecaaf9eed27cec18", "url": "https://github.com/MovingBlocks/Terasology/commit/a096796554e5bc9f3c2f842aecaaf9eed27cec18", "message": "chore[facade]: use picocli for processing command line options\n\nchore[facade]: remove extraneous TerasologyCommand class", "committedDate": "2020-09-30T22:53:03Z", "type": "forcePushed"}, {"oid": "ab816f5218da759df5c5225d3b948d690dacfa45", "url": "https://github.com/MovingBlocks/Terasology/commit/ab816f5218da759df5c5225d3b948d690dacfa45", "message": "chore[facade]: update run configs to match new spellings", "committedDate": "2020-09-30T23:02:27Z", "type": "commit"}, {"oid": "fe770d8a2ab2dad531a71cd22e96c02362def8ef", "url": "https://github.com/MovingBlocks/Terasology/commit/fe770d8a2ab2dad531a71cd22e96c02362def8ef", "message": "Merge remote-tracking branch 'origin/develop' into feat/picocli", "committedDate": "2020-09-30T23:12:14Z", "type": "commit"}, {"oid": "bbd29344f94cb7b65a488b3ab7ba2fcb8701d64e", "url": "https://github.com/MovingBlocks/Terasology/commit/bbd29344f94cb7b65a488b3ab7ba2fcb8701d64e", "message": "chore[facade]: set project path for annotation output as recommended by picocli", "committedDate": "2020-09-30T23:30:37Z", "type": "commit"}, {"oid": "43eb770e2c2f3b95fad98926c07a2fc0f4ac352d", "url": "https://github.com/MovingBlocks/Terasology/commit/43eb770e2c2f3b95fad98926c07a2fc0f4ac352d", "message": "chore[facade]: update .idea for annotation project value\n\nI think we are going to have to gitignore this file though \ud83d\ude1e", "committedDate": "2020-10-01T18:32:21Z", "type": "commit"}, {"oid": "fd781dd7e24240ebdb4111be1bcd845dfb544bbe", "url": "https://github.com/MovingBlocks/Terasology/commit/fd781dd7e24240ebdb4111be1bcd845dfb544bbe", "message": "chore[facade]: use `implementation` configuration instead of deprecated `compile`", "committedDate": "2020-10-01T18:33:34Z", "type": "commit"}, {"oid": "c1d63f5914c8bf3425db924961ceec7f6e49db12", "url": "https://github.com/MovingBlocks/Terasology/commit/c1d63f5914c8bf3425db924961ceec7f6e49db12", "message": "chore[IntelliJ]: exclude compiler.xml from version control\n\nIts values are obtained from the gradle configuration.\n\nSee https://youtrack.jetbrains.com/issue/IDEA-251986", "committedDate": "2020-10-01T19:18:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg0Nzc4OA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4157#discussion_r502847788", "bodyText": "I changed this from overrideDefaultConfig to simply config because I believed it was overriding the location of the default configuration file, and I thought that a config pointing to a file was clear enough for that.\nbut now I think this maybe specifies an additional config file that contains overrides. Not something used instead of the default config. If that's true, it should get its \"override\" name back.", "author": "keturn", "createdAt": "2020-10-11T00:27:43Z", "path": "facades/PC/src/main/java/org/terasology/engine/Terasology.java", "diffHunk": "@@ -91,53 +79,72 @@\n  * <tr><td>-serverPort=xxxxx</td><td>Change the server port.</td></tr>\n  * </tbody>\n  * </table>\n- * <br><br>\n+ * <p>\n  * When used via command line an usage help and some examples can be obtained via:\n  * <br><br>\n  * terasology -help    or    terasology /?\n- * <br><br>\n+ *\n  */\n \n-public final class Terasology {\n-\n-    private static final String[] PRINT_USAGE_FLAGS = {\"--help\", \"-help\", \"/help\", \"-h\", \"/h\", \"-?\", \"/?\"};\n-    private static final String USE_CURRENT_DIR_AS_HOME = \"-homedir\";\n-    private static final String USE_SPECIFIED_DIR_AS_HOME = \"-homedir=\";\n-    private static final String START_HEADLESS = \"-headless\";\n-    private static final String LOAD_LAST_GAME = \"-loadlastgame\";\n-    private static final String CREATE_LAST_GAME = \"-createlastgame\";\n-    private static final String NO_CRASH_REPORT = \"-noCrashReport\";\n-    private static final String NO_SAVE_GAMES = \"-noSaveGames\";\n-    private static final String PERMISSIVE_SECURITY = \"-permissiveSecurity\";\n-    private static final String NO_SOUND = \"-noSound\";\n-    private static final String NO_SPLASH = \"-noSplash\";\n-    private static final String SERVER_PORT = \"-serverPort=\";\n-    private static final String OVERRIDE_DEFAULT_CONFIG = \"-overrideDefaultConfig=\";\n-    private static final Logger logger = LoggerFactory.getLogger(Terasology.class);\n+@CommandLine.Command(name = \"terasology\")\n+public final class Terasology implements Callable<Integer> {\n+\n+    @Option(names = {\"--help\", \"-help\", \"/help\", \"-h\", \"/h\", \"-?\", \"/?\"}, usageHelp = true, description = \"show help\")\n+    private boolean helpRequested;\n+\n+    @Option(names = \"--headless\", description = \"Start headless\")\n+    private boolean isHeadless;\n \n+    @Option(names = \"--crash-report\", defaultValue = \"true\", negatable = true, description = \"Enable crash reporting\")\n+    private boolean crashReportEnabled;\n \n-    private static boolean isHeadless;\n-    private static boolean crashReportEnabled = true;\n-    private static boolean soundEnabled = true;\n-    private static boolean splashEnabled = true;\n-    private static boolean loadLastGame;\n-    private static boolean createLastGame;\n+    @Option(names = \"--sound\", defaultValue = \"true\", negatable = true, description = \"Enable sound\")\n+    private boolean soundEnabled;\n \n+    @Option(names = \"--splash\", defaultValue = \"true\", negatable = true, description = \"Enable splash screen\")\n+    private boolean splashEnabled;\n+\n+    @Option(names = \"--load-last-game\", description = \"Load the latest game on startup\")\n+    private boolean loadLastGame;\n+\n+    @Option(names = \"--create-last-game\", description = \"Recreates the world of the latest game with a new save file on startup\")\n+    private boolean createLastGame;\n+\n+    @Option(names = \"--permissive-security\")\n+    private boolean permissiveSecurity;\n+\n+    @Option(names = \"--save-games\", defaultValue = \"true\", negatable = true, description = \"Enable new save games\")\n+    private boolean saveGamesEnabled;\n+\n+    @Option(names = \"--server-port\", description = \"Change the server port\")\n+    private Integer serverPort;\n+\n+    @Option(names = \"--config\", description = \"Override default config\")", "originalCommit": "c1d63f5914c8bf3425db924961ceec7f6e49db12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "425470b1bf791a33e84e3ff4f47c499b157908b8", "url": "https://github.com/MovingBlocks/Terasology/commit/425470b1bf791a33e84e3ff4f47c499b157908b8", "message": "Merge remote-tracking branch 'origin/develop' into feat/picocli\n\n# Conflicts:\n#\t.idea/runConfigurations/TerasologyPC.xml\n#\tfacades/PC/build.gradle\n#\tfacades/PC/src/main/java/org/terasology/engine/Terasology.java", "committedDate": "2020-11-14T23:59:31Z", "type": "commit"}, {"oid": "c0f114b31ac61e0f6d4413d9023c5a36bd750441", "url": "https://github.com/MovingBlocks/Terasology/commit/c0f114b31ac61e0f6d4413d9023c5a36bd750441", "message": "chore (build): add picocli dependency to facade\n\nthis is re-applying some earlier changes in build.gradle to the converted build.gradle.kts.", "committedDate": "2020-11-15T00:31:38Z", "type": "commit"}, {"oid": "3c5845ec103c15454d441a60bfe155c59335bfc5", "url": "https://github.com/MovingBlocks/Terasology/commit/3c5845ec103c15454d441a60bfe155c59335bfc5", "message": "fix (build): use posix-style args in game tasks", "committedDate": "2020-11-15T00:32:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUzODMyNA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4157#discussion_r531538324", "bodyText": "This has been fixed and is available in picocli v4.5.2 - do we still need this workaround?", "author": "skaldarnar", "createdAt": "2020-11-27T11:13:28Z", "path": "facades/PC/src/main/java/org/terasology/engine/Terasology.java", "diffHunk": "@@ -196,153 +219,121 @@ private static void setupLogging() {\n         LoggingContext.initialize(path);\n     }\n \n-    private static void handlePrintUsageRequest(String[] args) {\n-        for (String arg : args) {\n-            for (String usageArg : PRINT_USAGE_FLAGS) {\n-                if (usageArg.equalsIgnoreCase(arg)) {\n-                    printUsageAndExit();\n-                }\n-            }\n-        }\n-    }\n-\n     private static void printUsageAndExit() {\n-\n-        String printUsageFlags = Joiner.on(\"|\").join(PRINT_USAGE_FLAGS);\n-\n-        List<String> opts = ImmutableList.of(\n-                printUsageFlags,\n-                USE_CURRENT_DIR_AS_HOME + \"|\" + USE_SPECIFIED_DIR_AS_HOME + \"<path>\",\n-                START_HEADLESS,\n-                LOAD_LAST_GAME,\n-                CREATE_LAST_GAME,\n-                NO_CRASH_REPORT,\n-                NO_SAVE_GAMES,\n-                PERMISSIVE_SECURITY,\n-                NO_SOUND,\n-                NO_SPLASH,\n-                OVERRIDE_DEFAULT_CONFIG + \"<path>\",\n-                SERVER_PORT + \"<port>\");\n-\n-        StringBuilder optText = new StringBuilder();\n-\n-        for (String opt : opts) {\n-            optText.append(\" [\").append(opt).append(\"]\");\n-        }\n-\n-        System.out.println(\"Usage:\");\n-        System.out.println();\n-        System.out.println(\"    terasology\" + optText.toString());\n-        System.out.println();\n-        System.out.println(\"By default Terasology saves data such as game saves and logs into subfolders of a platform-specific \\\"home directory\\\".\");\n-        System.out.println(\"Saving can be explicitly disabled using the \\\"\" + NO_SAVE_GAMES + \"\\\" flag.\");\n-        System.out.println(\"Optionally, the user can override the default by using one of the following launch arguments:\");\n-        System.out.println();\n-        System.out.println(\"    \" + USE_CURRENT_DIR_AS_HOME + \"        Use the current directory as the home directory.\");\n-        System.out.println(\"    \" + USE_SPECIFIED_DIR_AS_HOME + \"<path> Use the specified directory as the home directory.\");\n-        System.out.println();\n-        System.out.println(\"It is also possible to start Terasology in headless mode (no graphics), i.e. to act as a server.\");\n-        System.out.println(\"For this purpose use the \" + START_HEADLESS + \" launch argument.\");\n-        System.out.println();\n-        System.out.println(\"To automatically load the latest game on startup,\");\n-        System.out.println(\"use the \" + LOAD_LAST_GAME + \" launch argument.\");\n-        System.out.println();\n-        System.out.println(\"To automatically recreate the last game played with a new save file,\");\n-        System.out.println(\"use the \" + CREATE_LAST_GAME + \"launch argument\");\n-        System.out.println();\n-        System.out.println(\"By default Crash Reporting is enabled.\");\n-        System.out.println(\"To disable this feature use the \" + NO_CRASH_REPORT + \" launch argument.\");\n-        System.out.println();\n-        System.out.println(\"To disable sound use the \" + NO_SOUND + \" launch argument (default in headless mode).\");\n-        System.out.println();\n-        System.out.println(\"To disable the splash screen use the \" + NO_SPLASH + \" launch argument.\");\n-        System.out.println();\n-        System.out.println(\"To change the port the server is hosted on use the \" + SERVER_PORT + \" launch argument.\");\n-        System.out.println();\n-        System.out.println(\"To override the default generated config (useful for headless server) use the \" + OVERRIDE_DEFAULT_CONFIG + \" launch argument\");\n-        System.out.println();\n-        System.out.println(\"Examples:\");\n-        System.out.println();\n-        System.out.println(\"    Use the current directory as the home directory:\");\n-        System.out.println(\"    terasology \" + USE_CURRENT_DIR_AS_HOME);\n-        System.out.println();\n-        System.out.println(\"    Use \\\"myPath\\\" as the home directory:\");\n-        System.out.println(\"    terasology \" + USE_SPECIFIED_DIR_AS_HOME + \"myPath\");\n-        System.out.println();\n-        System.out.println(\"    Start terasology in headless mode (no graphics) and enforce using the default port:\");\n-        System.out.println(\"    terasology \" + START_HEADLESS + \" \" + SERVER_PORT + TerasologyConstants.DEFAULT_PORT);\n-        System.out.println();\n-        System.out.println(\"    Load the latest game on startup and disable crash reporting\");\n-        System.out.println(\"    terasology \" + LOAD_LAST_GAME + \" \" + NO_CRASH_REPORT);\n-        System.out.println();\n-        System.out.println(\"    Don't start Terasology, just print this help:\");\n-        System.out.println(\"    terasology \" + PRINT_USAGE_FLAGS[1]);\n-        System.out.println();\n-        System.out.println(\"Alternatively use our standalone Launcher from: https://github.com/MovingBlocks/TerasologyLauncher/releases\");\n-        System.out.println();\n-\n+        // TODO: Add all this stuff back in to the help text.\n+//\n+//        String printUsageFlags = Joiner.on(\"|\").join(PRINT_USAGE_FLAGS);\n+//\n+//        List<String> opts = ImmutableList.of(\n+//                printUsageFlags,\n+//                USE_CURRENT_DIR_AS_HOME + \"|\" + USE_SPECIFIED_DIR_AS_HOME + \"<path>\",\n+//                START_HEADLESS,\n+//                LOAD_LAST_GAME,\n+//                CREATE_LAST_GAME,\n+//                NO_CRASH_REPORT,\n+//                NO_SAVE_GAMES,\n+//                PERMISSIVE_SECURITY,\n+//                NO_SOUND,\n+//                NO_SPLASH,\n+//                OVERRIDE_DEFAULT_CONFIG + \"<path>\",\n+//                SERVER_PORT + \"<port>\");\n+//\n+//        StringBuilder optText = new StringBuilder();\n+//\n+//        for (String opt : opts) {\n+//            optText.append(\" [\").append(opt).append(\"]\");\n+//        }\n+//\n+//        System.out.println(\"Usage:\");\n+//        System.out.println();\n+//        System.out.println(\"    terasology\" + optText.toString());\n+//        System.out.println();\n+//        System.out.println(\"By default Terasology saves data such as game saves and logs into subfolders of a platform-specific \\\"home directory\\\".\");\n+//        System.out.println(\"Saving can be explicitly disabled using the \\\"\" + NO_SAVE_GAMES + \"\\\" flag.\");\n+//        System.out.println(\"Optionally, the user can override the default by using one of the following launch arguments:\");\n+//        System.out.println();\n+//        System.out.println(\"    \" + USE_CURRENT_DIR_AS_HOME + \"        Use the current directory as the home directory.\");\n+//        System.out.println(\"    \" + USE_SPECIFIED_DIR_AS_HOME + \"<path> Use the specified directory as the home directory.\");\n+//        System.out.println();\n+//        System.out.println(\"It is also possible to start Terasology in headless mode (no graphics), i.e. to act as a server.\");\n+//        System.out.println(\"For this purpose use the \" + START_HEADLESS + \" launch argument.\");\n+//        System.out.println();\n+//        System.out.println(\"To automatically load the latest game on startup,\");\n+//        System.out.println(\"use the \" + LOAD_LAST_GAME + \" launch argument.\");\n+//        System.out.println();\n+//        System.out.println(\"To automatically recreate the last game played with a new save file,\");\n+//        System.out.println(\"use the \" + CREATE_LAST_GAME + \"launch argument\");\n+//        System.out.println();\n+//        System.out.println(\"By default Crash Reporting is enabled.\");\n+//        System.out.println(\"To disable this feature use the \" + NO_CRASH_REPORT + \" launch argument.\");\n+//        System.out.println();\n+//        System.out.println(\"To disable sound use the \" + NO_SOUND + \" launch argument (default in headless mode).\");\n+//        System.out.println();\n+//        System.out.println(\"To disable the splash screen use the \" + NO_SPLASH + \" launch argument.\");\n+//        System.out.println();\n+//        System.out.println(\"To change the port the server is hosted on use the \" + SERVER_PORT + \" launch argument.\");\n+//        System.out.println();\n+//        System.out.println(\"To override the default generated config (useful for headless server) use the \" + OVERRIDE_DEFAULT_CONFIG + \" launch argument\");\n+//        System.out.println();\n+//        System.out.println(\"Examples:\");\n+//        System.out.println();\n+//        System.out.println(\"    Use the current directory as the home directory:\");\n+//        System.out.println(\"    terasology \" + USE_CURRENT_DIR_AS_HOME);\n+//        System.out.println();\n+//        System.out.println(\"    Use \\\"myPath\\\" as the home directory:\");\n+//        System.out.println(\"    terasology \" + USE_SPECIFIED_DIR_AS_HOME + \"myPath\");\n+//        System.out.println();\n+//        System.out.println(\"    Start terasology in headless mode (no graphics) and enforce using the default port:\");\n+//        System.out.println(\"    terasology \" + START_HEADLESS + \" \" + SERVER_PORT + TerasologyConstants.DEFAULT_PORT);\n+//        System.out.println();\n+//        System.out.println(\"    Load the latest game on startup and disable crash reporting\");\n+//        System.out.println(\"    terasology \" + LOAD_LAST_GAME + \" \" + NO_CRASH_REPORT);\n+//        System.out.println();\n+//        System.out.println(\"    Don't start Terasology, just print this help:\");\n+//        System.out.println(\"    terasology \" + PRINT_USAGE_FLAGS[1]);\n+//        System.out.println();\n+//        System.out.println(\"Alternatively use our standalone Launcher from: https://github.com/MovingBlocks/TerasologyLauncher/releases\");\n+//        System.out.println();\n+//\n         System.exit(0);\n     }\n \n-    private static void handleLaunchArguments(String[] args) {\n-\n-        Path homePath = null;\n-\n-        for (String arg : args) {\n-            boolean recognized = true;\n-\n-            if (arg.startsWith(USE_SPECIFIED_DIR_AS_HOME)) {\n-                homePath = Paths.get(arg.substring(USE_SPECIFIED_DIR_AS_HOME.length()));\n-            } else if (arg.equals(USE_CURRENT_DIR_AS_HOME)) {\n-                homePath = Paths.get(\"\");\n-            } else if (arg.equals(START_HEADLESS)) {\n-                isHeadless = true;\n-                crashReportEnabled = false;\n-                splashEnabled = false;\n-            } else if (arg.equals(NO_SAVE_GAMES)) {\n-                System.setProperty(SystemConfig.SAVED_GAMES_ENABLED_PROPERTY, \"false\");\n-            } else if (arg.equals(PERMISSIVE_SECURITY)) {\n-                System.setProperty(SystemConfig.PERMISSIVE_SECURITY_ENABLED_PROPERTY, \"true\");\n-            } else if (arg.equals(NO_CRASH_REPORT)) {\n-                crashReportEnabled = false;\n-            } else if (arg.equals(NO_SOUND)) {\n-                soundEnabled = false;\n-            } else if (arg.equals(NO_SPLASH)) {\n-                splashEnabled = false;\n-            } else if (arg.equals(LOAD_LAST_GAME)) {\n-                loadLastGame = true;\n-            } else if (arg.equals(CREATE_LAST_GAME)) {\n-                createLastGame = true;\n-            } else if (arg.startsWith(SERVER_PORT)) {\n-                System.setProperty(ConfigurationSubsystem.SERVER_PORT_PROPERTY, arg.substring(SERVER_PORT.length()));\n-            } else if (arg.startsWith(OVERRIDE_DEFAULT_CONFIG)) {\n-                System.setProperty(Config.PROPERTY_OVERRIDE_DEFAULT_CONFIG, arg.substring(OVERRIDE_DEFAULT_CONFIG.length()));\n-            } else {\n-                recognized = false;\n+    private void handleLaunchArguments() throws IOException {\n+        if (homeDir != null) {\n+            logger.info(\"homeDir is {}\", homeDir);\n+            if (homeDir.toString().startsWith(\"-\")) {\n+                // picocli shouldn't let this happen, but see\n+                // https://github.com/remkop/picocli/issues/1197", "originalCommit": "3c5845ec103c15454d441a60bfe155c59335bfc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcwODk2OA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4157#discussion_r531708968", "bodyText": "Correct, we can probably do without it now.\nThere are some edge cases involving what happens when you spell flags wrong, but going with the default behavior for that is a reasonable choice.", "author": "keturn", "createdAt": "2020-11-27T17:26:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUzODMyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcyMzAxMA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4157#discussion_r531723010", "bodyText": "this has been removed.", "author": "keturn", "createdAt": "2020-11-27T18:15:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUzODMyNA=="}], "type": "inlineReview"}, {"oid": "0ce3dfbea80418b64ec789c538fe7d6266513d33", "url": "https://github.com/MovingBlocks/Terasology/commit/0ce3dfbea80418b64ec789c538fe7d6266513d33", "message": "Merge remote-tracking branch 'origin/develop' into feat/picocli", "committedDate": "2020-11-27T17:52:21Z", "type": "commit"}, {"oid": "34422650854143946d83fe06368ce567b60707ff", "url": "https://github.com/MovingBlocks/Terasology/commit/34422650854143946d83fe06368ce567b60707ff", "message": "chore (git): ignore .idea/caches", "committedDate": "2020-11-27T18:08:38Z", "type": "commit"}, {"oid": "96ac14b940e36149e8be8831e7bd34e881d4e4b4", "url": "https://github.com/MovingBlocks/Terasology/commit/96ac14b940e36149e8be8831e7bd34e881d4e4b4", "message": "fix (facade): remove extra validation on homedir\n\nas picocli fixed the issue in 4.5.2.", "committedDate": "2020-11-27T18:14:30Z", "type": "commit"}, {"oid": "2a752861a8f183a024924e9a4ccea66cab0e12fa", "url": "https://github.com/MovingBlocks/Terasology/commit/2a752861a8f183a024924e9a4ccea66cab0e12fa", "message": "fix (facade): revert removal of \"override default\" from name of option", "committedDate": "2020-11-27T18:30:04Z", "type": "commit"}, {"oid": "7797484509639cb17d9f31364013259c4c91ee28", "url": "https://github.com/MovingBlocks/Terasology/commit/7797484509639cb17d9f31364013259c4c91ee28", "message": "fix (facade): `--help` is handled by `usageHelp=true`, not unused.", "committedDate": "2020-11-27T18:31:24Z", "type": "commit"}, {"oid": "3c38a35898f83bdc445898caad1aaf0721d29888", "url": "https://github.com/MovingBlocks/Terasology/commit/3c38a35898f83bdc445898caad1aaf0721d29888", "message": "fix (idea): revert accidental insertion of platform-specific path", "committedDate": "2020-11-27T18:42:47Z", "type": "commit"}, {"oid": "14238c8fa4424810111789d2dbf20414a21b45e5", "url": "https://github.com/MovingBlocks/Terasology/commit/14238c8fa4424810111789d2dbf20414a21b45e5", "message": "Merge remote-tracking branch 'origin/develop' into feat/picocli", "committedDate": "2020-12-12T19:06:52Z", "type": "commit"}, {"oid": "dcae3a3032d0d4533c00b78e723bb2bc41ebc9d0", "url": "https://github.com/MovingBlocks/Terasology/commit/dcae3a3032d0d4533c00b78e723bb2bc41ebc9d0", "message": "Merge remote-tracking branch 'origin/develop' into feat/picocli", "committedDate": "2020-12-12T20:03:58Z", "type": "commit"}, {"oid": "59f8ef54af8f5e3031e7e48c04c179494cc904a7", "url": "https://github.com/MovingBlocks/Terasology/commit/59f8ef54af8f5e3031e7e48c04c179494cc904a7", "message": "Merge remote-tracking branch 'origin/develop' into feat/picocli", "committedDate": "2020-12-20T01:09:33Z", "type": "commit"}, {"oid": "5942300de2954338e74527758ba6e2d89ec6fd76", "url": "https://github.com/MovingBlocks/Terasology/commit/5942300de2954338e74527758ba6e2d89ec6fd76", "message": "fix (docs): update command-line options used in documentation examples", "committedDate": "2020-12-20T01:18:20Z", "type": "commit"}, {"oid": "4b0053d884e7e529548e6eddc864f5b48d727800", "url": "https://github.com/MovingBlocks/Terasology/commit/4b0053d884e7e529548e6eddc864f5b48d727800", "message": "chore: checkstyle tidying", "committedDate": "2020-12-20T02:41:37Z", "type": "commit"}, {"oid": "10c248cdfa8507b7bfdea58028f77cd87cafd450", "url": "https://github.com/MovingBlocks/Terasology/commit/10c248cdfa8507b7bfdea58028f77cd87cafd450", "message": "chore (facade): remove individual options from class docstring\n\nThe options have their own documentation.", "committedDate": "2020-12-20T03:21:29Z", "type": "commit"}, {"oid": "bdd524c489724404cc61a66c46f2aae2c444d86a", "url": "https://github.com/MovingBlocks/Terasology/commit/bdd524c489724404cc61a66c46f2aae2c444d86a", "message": "chore (facade): add link to launcher in help footer\n\nWith that, we can remove the old printUsageAndExit text. Its contents is covered by `--help` and docs/Playing.md.", "committedDate": "2020-12-20T03:23:31Z", "type": "commit"}, {"oid": "245534a4bd48cd32ebb885fa2f563699c026f5fb", "url": "https://github.com/MovingBlocks/Terasology/commit/245534a4bd48cd32ebb885fa2f563699c026f5fb", "message": "Merge remote-tracking branch 'origin/develop' into feat/picocli\n\n# Conflicts:\n#\tfacades/PC/build.gradle.kts", "committedDate": "2021-01-30T07:04:32Z", "type": "commit"}, {"oid": "7afa54f1ae039cd924647f46cc9c4eb3bf306794", "url": "https://github.com/MovingBlocks/Terasology/commit/7afa54f1ae039cd924647f46cc9c4eb3bf306794", "message": "Merge remote-tracking branch 'origin/develop' into feat/picocli", "committedDate": "2021-02-06T02:25:18Z", "type": "commit"}, {"oid": "d27f72d4a00652ecad6baa2685add8ffca44cdb1", "url": "https://github.com/MovingBlocks/Terasology/commit/d27f72d4a00652ecad6baa2685add8ffca44cdb1", "message": "Merge remote-tracking branch 'origin/develop' into feat/picocli\n\n# Conflicts:\n#\tbuild-logic/src/main/kotlin/org/terasology/gradology/exec.kt\n#\tfacades/PC/build.gradle.kts\n#\tfacades/PC/src/main/java/org/terasology/engine/Terasology.java", "committedDate": "2021-03-10T19:43:39Z", "type": "commit"}, {"oid": "ac19044c0150920b45e4d33c134d16510dfce807", "url": "https://github.com/MovingBlocks/Terasology/commit/ac19044c0150920b45e4d33c134d16510dfce807", "message": "Merge remote-tracking branch 'origin/develop' into feat/picocli\n\n# Conflicts:\n#\t.idea/misc.xml\n#\tfacades/PC/src/main/java/org/terasology/engine/Terasology.java", "committedDate": "2021-07-27T22:58:14Z", "type": "commit"}, {"oid": "95378285b6011fb2c85db09dd4f96314a49efbab", "url": "https://github.com/MovingBlocks/Terasology/commit/95378285b6011fb2c85db09dd4f96314a49efbab", "message": "Merge branch 'develop' into feat/picocli", "committedDate": "2021-08-07T21:35:07Z", "type": "commit"}, {"oid": "ad546a1551b3e7bf99c2e0e6545118e232c7b195", "url": "https://github.com/MovingBlocks/Terasology/commit/ad546a1551b3e7bf99c2e0e6545118e232c7b195", "message": "Merge remote-tracking branch 'origin/develop' into feat/picocli", "committedDate": "2021-08-14T18:07:03Z", "type": "commit"}, {"oid": "d4c11dcb58c5d8e039a0412c38d38f3676330d84", "url": "https://github.com/MovingBlocks/Terasology/commit/d4c11dcb58c5d8e039a0412c38d38f3676330d84", "message": "fix(PathManager): remove redundant elements from home path\n\nCleans up the path for the common `--homedir=.` case.", "committedDate": "2021-08-14T18:19:32Z", "type": "commit"}]}