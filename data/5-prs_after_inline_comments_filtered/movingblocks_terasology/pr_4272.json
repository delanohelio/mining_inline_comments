{"pr_number": 4272, "pr_title": "feat(BlockRegion): add BlockRegion helpers", "pr_createdAt": "2020-11-24T21:01:26Z", "pr_url": "https://github.com/MovingBlocks/Terasology/pull/4272", "timeline": [{"oid": "d3f39d7cc0408bb1c75f3d7a338147f810c15b54", "url": "https://github.com/MovingBlocks/Terasology/commit/d3f39d7cc0408bb1c75f3d7a338147f810c15b54", "message": "feat(BlockRegion): add BlockRegion helpers\n\n- adds `createFromMinAndMax` and `createFromCenterAndExtents` helpers\n- deprecate BlockRegion constructors from min and max in favor of new helpers", "committedDate": "2020-11-24T20:58:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg4MjAzNw==", "url": "https://github.com/MovingBlocks/Terasology/pull/4272#discussion_r529882037", "bodyText": "This changes the semantics of new BlockRegion() from being some invalid infinite something (the empty region, so to say) to the non-empty BlockRegion containing exactly (0,0,0).\nThis allows to express createFromCenterAndExtents conveniently via\nnew BlockRegion().translate(center).addExtents(extents)\nNot sure whether the previous semantics was used somewhere, or whether we need the empty region to be a thing. We could add that to BlockRegions:\npublic static BlockRegion empty() {\n  return new BlockRegion(new AABBi());\n}", "author": "skaldarnar", "createdAt": "2020-11-24T21:15:00Z", "path": "engine/src/main/java/org/terasology/world/block/BlockRegion.java", "diffHunk": "@@ -44,6 +44,7 @@\n     public final AABBi aabb = new AABBi();\n \n     public BlockRegion() {\n+        this.setMin(0, 0, 0).setMax(0, 0, 0);", "originalCommit": "d3f39d7cc0408bb1c75f3d7a338147f810c15b54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA5MzM5OA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4272#discussion_r530093398", "bodyText": "a static method to define an empty blockregion seems kind of strange. It makes more sense to me to have the initial state as undefined. setMin(0, 0, 0).setMax(0, 0, 0) would yield a region that is 1x1x1 units in size. min is 0,0,0 and max is 1,1,1", "author": "pollend", "createdAt": "2020-11-25T04:00:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg4MjAzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU2NDUxNQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4272#discussion_r530564515", "bodyText": "hm, I probably don't get how these AABBs and regions work exactly \ud83e\uddd0\nI thought that setMin(0, 0, 0).setMax(0, 0, 0) would create a region of size 0x0x0, containing a single point (0,0,0). This is basically a point (a single block).\nWith setMin(0, 0, 0).setMax(0, 0, 1) you'd create a region of size 0x0x1 containing 2 points. This is a line (a line of blocks).\nWith setMin(0, 0, 0).setMax(0, 1, 1) you'd create a region of size 0x1x1 containing 4 points. This is a plane (a planar surface of blocks).\nWith setMin(0, 0, 0).setMax(1, 1, 1) you'd create a unit cube of size 1x1x1 containing 8 points. This is a volume (a box of blocks).\nIs this understanding wrong?", "author": "skaldarnar", "createdAt": "2020-11-25T18:15:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg4MjAzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU2NzA5MQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4272#discussion_r530567091", "bodyText": "Another interpretation/visualization of setMin(0, 0, 0).setMax(0, 0, 0) would be to think of the region that contains exactly the block at position (0,0,0), i.e., the region going from min (-.5, -.5, -.5) to max (.5, .5, .5) and being of size 1x1x1.", "author": "skaldarnar", "createdAt": "2020-11-25T18:20:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg4MjAzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTMyNzExNQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4272#discussion_r531327115", "bodyText": "I imagine it like the min position of a block and the max position of another block. Blockregion is anything between the two blocks including themselves. I think we should keep it undefined rather then defining it as a 1x1x1 cube. If you do a union it would include the (0,0,0) block set from the initial state.", "author": "pollend", "createdAt": "2020-11-27T01:51:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg4MjAzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2NDU3NQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4272#discussion_r531464575", "bodyText": "That explanation helps - I'll make sure to add that in the JavaDoc of BlockRegion for further reference.", "author": "skaldarnar", "createdAt": "2020-11-27T09:00:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg4MjAzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg4MzA5OA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4272#discussion_r529883098", "bodyText": "(copying from Discord for the record)\nI think it is somewhat confusing to have some variants as constructor new BlockRegion(min, max) and some as constructor method BlockRegions.createFromCenterAndExtents(center, extents). Especially if another variant like BlockRegions.createFromMinAndSize(min, size) has the same argument types...\nMost of the implementations are pretty neat one-liners which may be inlined instead. For consistency I'd also inline the two constructor variants that were deprecated.\nOnly culprit we found is create a BlockRegion from center and extents when given floating point coordinates. One needs to be careful with rounding in that case...\n    public static BlockRegion createFromCenterAndExtents(Vector3fc center, Vector3fc extents) {\n        Vector3f min = center.sub(extents, new Vector3f());\n        Vector3f max = center.add(extents, new Vector3f());\n\n        return new BlockRegion().setMin(new Vector3i(min, RoundingMode.CEILING)).setMax(new Vector3i(max,\n                RoundingMode.FLOOR));\n    }", "author": "skaldarnar", "createdAt": "2020-11-24T21:16:52Z", "path": "engine/src/main/java/org/terasology/world/block/BlockRegion.java", "diffHunk": "@@ -54,10 +55,18 @@ public BlockRegion(AABBi source) {\n         aabb.set(source);\n     }\n \n+    /**\n+     * Deprecated in favor of {@link org.terasology.world.block.BlockRegions#createFromMinAndMax(Vector3ic, Vector3ic)}\n+     */\n+    @Deprecated", "originalCommit": "d3f39d7cc0408bb1c75f3d7a338147f810c15b54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA5NDkzMg==", "url": "https://github.com/MovingBlocks/Terasology/pull/4272#discussion_r530094932", "bodyText": "Its a little confusing to move the actual declaration to a separate static class. might be better to move the static implementations into BlockRegion so they are easily found in one place and leave the default constructor for min and max since that directly describes how a region is defined.", "author": "pollend", "createdAt": "2020-11-25T04:06:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg4MzA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU0OTI5Ng==", "url": "https://github.com/MovingBlocks/Terasology/pull/4272#discussion_r530549296", "bodyText": "@pollend From what I read in #4200 you agreed to what we implemented \ud83e\udd14\nWhy the change of heart?\nOn what grounds should creation from min and max be the default constructor?", "author": "jdrueckert", "createdAt": "2020-11-25T17:46:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg4MzA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU1ODQzNw==", "url": "https://github.com/MovingBlocks/Terasology/pull/4272#discussion_r530558437", "bodyText": "I was thinking about it a bit, but maybe it's not as confusing as I thought it would be.", "author": "pollend", "createdAt": "2020-11-25T18:03:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg4MzA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU2MTA5NQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4272#discussion_r530561095", "bodyText": "One more thing is discoverability from user's perspective. Following up to @jdrueckert's question on why initialization from min and max is the default, I'd argue that from center and extents or from min and size are equally valid ways to create a BlockRegion.\nThe pattern with the plural form BlockRegions is also used in other places in the Java world (like Lists or Streams from guava), but there are also cases like Stream.of from plain Java...\nI would go for the following line-up (I'd prefer BlockRegions but I could also live with BlockRegion):\nBlockRegion r = new BlockRegion(); // empty region\nBlockRegion r = otherRegion.copy()\n\nBlockRegion r = BlockRegions.createFromMinAndMax(min, max)\nBlockRegion r = BlockRegions.createFromCenterAndExtents(center, extents)\nBlockRegion r = BlockRegions.createFromMinAndSize(min, size)\nBlockRegion r = BlockRegions.createFromPoint(point)", "author": "skaldarnar", "createdAt": "2020-11-25T18:08:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg4MzA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTMyODA3OQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4272#discussion_r531328079", "bodyText": "we can keep the default constructor and leave the region undefined. min and max constructor can be removed. that seems to already be the case. this seems good to me.", "author": "pollend", "createdAt": "2020-11-27T01:53:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg4MzA5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA5MTczOA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4272#discussion_r530091738", "bodyText": "for the min you also want to floor the value.\nif your min is (.001,.001,.001) ceiling would be (1,1,1) which would be one block extra. .001 would be within (0,0,0)", "author": "pollend", "createdAt": "2020-11-25T03:55:00Z", "path": "engine/src/main/java/org/terasology/world/block/BlockRegions.java", "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.world.block;\n+\n+import org.joml.RoundingMode;\n+import org.joml.Vector3f;\n+import org.joml.Vector3fc;\n+import org.joml.Vector3i;\n+import org.joml.Vector3ic;\n+\n+public class BlockRegions {\n+    private BlockRegions() {\n+    }\n+\n+    /**\n+     * Creates a new region spanning the smallest axis-aligned bounding box (AABB) containing both, min and max\n+     *\n+     * @return new block region\n+     */\n+    public static BlockRegion createFromMinAndMax(Vector3ic min, Vector3ic max) {\n+        return new BlockRegion().setMin(min).setMax(max);\n+    }\n+\n+    /**\n+     * Creates a new region spanning the smallest axis-aligned bounding box (AABB) containing both, min and max\n+     *\n+     * @return new block region\n+     */\n+    public static BlockRegion createFromMinAndMax(int minX, int minY, int minZ, int maxX, int maxY, int maxZ) {\n+        return new BlockRegion().setMin(minX, minY, minZ).setMax(maxX, maxY, maxZ);\n+    }\n+\n+    /**\n+     * Creates a new region centered around {@code center} extending each side by {@code extents}. The resulting\n+     * axis-aligned bounding box (AABB) will have a size of {@code 2 * extents}\n+     *\n+     * @return new block region\n+     */\n+    public static BlockRegion createFromCenterAndExtents(Vector3ic center, Vector3ic extents) {\n+        return new BlockRegion().translate(center).addExtents(extents);\n+    }\n+\n+    /**\n+     * Creates a new region centered around {@code center} extending each side by {@code extents}. The computed min is\n+     * rounded up (ceil), the computed max is rounded down (floor). Thus, the resulting axis-aligned bounding box (AABB)\n+     * will only include integer points that are within the floating point area and have a size of {@code <= 2 *\n+     * extents}\n+     *\n+     * @return new block region\n+     */\n+    public static BlockRegion createFromCenterAndExtents(Vector3fc center, Vector3fc extents) {\n+        Vector3f min = center.sub(extents, new Vector3f());\n+        Vector3f max = center.add(extents, new Vector3f());\n+\n+        return new BlockRegion().setMin(new Vector3i(min, RoundingMode.CEILING)).setMax(new Vector3i(max,\n+                RoundingMode.FLOOR));", "originalCommit": "d3f39d7cc0408bb1c75f3d7a338147f810c15b54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU0NTk4OQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4272#discussion_r530545989", "bodyText": "Hm, but doing a floor on the min value would cause the region to grow because of rounding. Consider the region R where R_min = (-0.5, -0.5, -0.5) and R_max = (0.5, 0.5, 0.5). I'd think that R.containsPoint(0, 0, 0) is true, but false for all other points (with integer coordinates).\nIf we would floor the min values the region R' would span the AABB from (-1, -1, -1) to (0, 0, 0) and R'.contains(-1, -1, -1) would now hold. I think the caller should make sure that the rounded values are \"correct\", possibly by adding a (small) margin.", "author": "skaldarnar", "createdAt": "2020-11-25T17:40:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA5MTczOA=="}], "type": "inlineReview"}, {"oid": "f0dac074cc6810b22d54f0b0c916e40650a3856d", "url": "https://github.com/MovingBlocks/Terasology/commit/f0dac074cc6810b22d54f0b0c916e40650a3856d", "message": "Merge branch 'develop' into feat/blockregion-helpers", "committedDate": "2020-11-25T18:13:20Z", "type": "commit"}, {"oid": "4a98ecb944452ac9300870177e994dd1c2e362c7", "url": "https://github.com/MovingBlocks/Terasology/commit/4a98ecb944452ac9300870177e994dd1c2e362c7", "message": "test: Add tests for BlockRegionIterable (+ update copyright)", "committedDate": "2020-11-28T16:42:53Z", "type": "commit"}, {"oid": "df3613860c86fdaea2f05eea0c22b933ceb5e5d5", "url": "https://github.com/MovingBlocks/Terasology/commit/df3613860c86fdaea2f05eea0c22b933ceb5e5d5", "message": "Merge remote-tracking branch 'origin/develop' into feat/blockregion-helpers", "committedDate": "2020-11-28T17:06:56Z", "type": "commit"}, {"oid": "533ca85e1a781192577a634ad3ecedeb5ff9627a", "url": "https://github.com/MovingBlocks/Terasology/commit/533ca85e1a781192577a634ad3ecedeb5ff9627a", "message": "fix: fix condition in BlockRegionIterable#hasNext()", "committedDate": "2020-11-28T17:13:27Z", "type": "commit"}, {"oid": "ab7676aed9ebe8f14cb798215cb10901d06c406c", "url": "https://github.com/MovingBlocks/Terasology/commit/ab7676aed9ebe8f14cb798215cb10901d06c406c", "message": "test: more tests for actual content of positions", "committedDate": "2020-11-28T17:31:31Z", "type": "commit"}, {"oid": "7b930dd6fd61a99e3dd000d7688d75050b7c822d", "url": "https://github.com/MovingBlocks/Terasology/commit/7b930dd6fd61a99e3dd000d7688d75050b7c822d", "message": "test: adjust for \"correct\" usage of iterator...", "committedDate": "2020-11-28T17:37:34Z", "type": "commit"}, {"oid": "6b8cce3195c20d73d766a13ce4dedfcbbcfdf660", "url": "https://github.com/MovingBlocks/Terasology/commit/6b8cce3195c20d73d766a13ce4dedfcbbcfdf660", "message": "update type handler and iterator", "committedDate": "2020-11-28T18:09:08Z", "type": "commit"}, {"oid": "9c3b0b375ea87d3a254f141cf8ff75f05c257ec9", "url": "https://github.com/MovingBlocks/Terasology/commit/9c3b0b375ea87d3a254f141cf8ff75f05c257ec9", "message": "tweak iterable", "committedDate": "2020-11-28T18:41:56Z", "type": "commit"}, {"oid": "718590cc666c9af447c60dcd6cac492c1ef43ebf", "url": "https://github.com/MovingBlocks/Terasology/commit/718590cc666c9af447c60dcd6cac492c1ef43ebf", "message": "delete discord.xml", "committedDate": "2020-11-28T18:49:12Z", "type": "commit"}, {"oid": "c4fca2cf82520f0fb9f5524ed59bf28cadb90e9c", "url": "https://github.com/MovingBlocks/Terasology/commit/c4fca2cf82520f0fb9f5524ed59bf28cadb90e9c", "message": "refactor: move iterable and iterableInPlace construction to BlockRegions", "committedDate": "2020-11-28T22:01:27Z", "type": "commit"}, {"oid": "1a850395f6f0d444d7c222b44e29d664e62f18d1", "url": "https://github.com/MovingBlocks/Terasology/commit/1a850395f6f0d444d7c222b44e29d664e62f18d1", "message": "test: add tests for BlockRegion#correctBounds", "committedDate": "2020-11-28T22:31:01Z", "type": "commit"}, {"oid": "c507eaff5d8502f9c4f6322aef5337e803b75c56", "url": "https://github.com/MovingBlocks/Terasology/commit/c507eaff5d8502f9c4f6322aef5337e803b75c56", "message": "fix: compute BlockRegion#correctBounds correctly", "committedDate": "2020-11-28T22:31:19Z", "type": "commit"}, {"oid": "0a0b88e511c53079d5b089227d478851e21c8332", "url": "https://github.com/MovingBlocks/Terasology/commit/0a0b88e511c53079d5b089227d478851e21c8332", "message": "chore: small improvements", "committedDate": "2020-11-28T23:27:11Z", "type": "commit"}, {"oid": "cb0f9573eddcb53f99545672d0b794afb76ec547", "url": "https://github.com/MovingBlocks/Terasology/commit/cb0f9573eddcb53f99545672d0b794afb76ec547", "message": "Merge branch 'develop' into feat/blockregion-helpers", "committedDate": "2020-11-29T00:08:10Z", "type": "commit"}]}