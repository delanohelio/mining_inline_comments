{"pr_number": 4172, "pr_title": "feat(JOML): migrate action event", "pr_createdAt": "2020-10-01T22:10:23Z", "pr_url": "https://github.com/MovingBlocks/Terasology/pull/4172", "timeline": [{"oid": "2e3a6c18e6a2199b6fec4d9f66ba289e70ac7eb9", "url": "https://github.com/MovingBlocks/Terasology/commit/2e3a6c18e6a2199b6fec4d9f66ba289e70ac7eb9", "message": "feat(JOML): migrate action event", "committedDate": "2020-10-01T22:08:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgzNDM4OQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4172#discussion_r498834389", "bodyText": "Do we know why this originally only checked x for being finite?", "author": "jdrueckert", "createdAt": "2020-10-02T13:50:56Z", "path": "engine/src/main/java/org/terasology/logic/common/ActivateEvent.java", "diffHunk": "@@ -84,16 +84,24 @@ public int getActivationId() {\n \n     public Vector3f getTargetLocation() {\n         LocationComponent loc = target.getComponent(LocationComponent.class);\n-        if (loc != null&& !Float.isNaN(loc.getWorldPosition().x)) {", "originalCommit": "2e3a6c18e6a2199b6fec4d9f66ba289e70ac7eb9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0MDkzNA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4172#discussion_r498840934", "bodyText": "An assumption that if x is nan then the whole vector is nan. Method from joml does not use this assumption.", "author": "pollend", "createdAt": "2020-10-02T14:01:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgzNDM4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgzNDQ2NQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4172#discussion_r498834465", "bodyText": "see above", "author": "jdrueckert", "createdAt": "2020-10-02T13:51:02Z", "path": "engine/src/main/java/org/terasology/logic/common/ActivateEvent.java", "diffHunk": "@@ -84,16 +84,24 @@ public int getActivationId() {\n \n     public Vector3f getTargetLocation() {\n         LocationComponent loc = target.getComponent(LocationComponent.class);\n-        if (loc != null&& !Float.isNaN(loc.getWorldPosition().x)) {\n-            return loc.getWorldPosition();\n+        if (loc != null) {\n+            Vector3f result = loc.getWorldPosition(new Vector3f());\n+            if (result.isFinite()) {\n+                return result;\n+            }\n         }\n         return null;\n     }\n \n     public Vector3f getInstigatorLocation() {\n         LocationComponent loc = instigator.getComponent(LocationComponent.class);\n-        if (loc != null&& !Float.isNaN(loc.getWorldPosition().x)) {", "originalCommit": "2e3a6c18e6a2199b6fec4d9f66ba289e70ac7eb9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgzNTA2MQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4172#discussion_r498835061", "bodyText": "Why do we return [0,0,0] vector here but null above in getTargetLocation()?", "author": "jdrueckert", "createdAt": "2020-10-02T13:52:03Z", "path": "engine/src/main/java/org/terasology/logic/common/ActivateEvent.java", "diffHunk": "@@ -84,16 +84,24 @@ public int getActivationId() {\n \n     public Vector3f getTargetLocation() {\n         LocationComponent loc = target.getComponent(LocationComponent.class);\n-        if (loc != null&& !Float.isNaN(loc.getWorldPosition().x)) {\n-            return loc.getWorldPosition();\n+        if (loc != null) {\n+            Vector3f result = loc.getWorldPosition(new Vector3f());\n+            if (result.isFinite()) {\n+                return result;\n+            }\n         }\n         return null;\n     }\n \n     public Vector3f getInstigatorLocation() {\n         LocationComponent loc = instigator.getComponent(LocationComponent.class);\n-        if (loc != null&& !Float.isNaN(loc.getWorldPosition().x)) {\n-            return loc.getWorldPosition();\n+        if (loc != null) {\n+            Vector3f result = loc.getWorldPosition(new Vector3f());\n+            if (result.isFinite()) {\n+                return result;\n+            }\n+            result.set(0, 0, 0);\n+            return result;", "originalCommit": "2e3a6c18e6a2199b6fec4d9f66ba289e70ac7eb9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0MTUzOQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4172#discussion_r498841539", "bodyText": "I have no idea why we do this. It's kind of strange. Don't want to think about it too much. We can look at it in another pass.", "author": "pollend", "createdAt": "2020-10-02T14:02:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgzNTA2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0MzA2OA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4172#discussion_r498843068", "bodyText": "Okay, different question: Do we need this at all if we have the return new Vector3f() at the end?\n            result.set(0, 0, 0);\n            return result;", "author": "jdrueckert", "createdAt": "2020-10-02T14:05:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgzNTA2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0NDQ3MQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4172#discussion_r498844471", "bodyText": "The old method returns an empty vector. So I clear it if it's nan.", "author": "pollend", "createdAt": "2020-10-02T14:07:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgzNTA2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0NjgyMg==", "url": "https://github.com/MovingBlocks/Terasology/pull/4172#discussion_r498846822", "bodyText": "Yeah I see that, but isn't a cleared vector equal to an empty vector?\nSo the code path leads to the return of the empty vector (return new Vector3f() in l.106) anyway, so there's no need to explicitly clear and return at that point, is there?", "author": "jdrueckert", "createdAt": "2020-10-02T14:11:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgzNTA2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0OTg3Nw==", "url": "https://github.com/MovingBlocks/Terasology/pull/4172#discussion_r498849877", "bodyText": "I'm assuming there is some math that will add it or something and a nan vector will throw a wrench into things. Better to clear it. Basically the same as passing out a new vector.", "author": "pollend", "createdAt": "2020-10-02T14:17:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgzNTA2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1MjU0OA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4172#discussion_r498852548", "bodyText": "I see okay. Fair point.", "author": "jdrueckert", "createdAt": "2020-10-02T14:21:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgzNTA2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgzNjUwMQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4172#discussion_r498836501", "bodyText": "Do we know why this originally only checked x for being finite?", "author": "jdrueckert", "createdAt": "2020-10-02T13:54:31Z", "path": "engine/src/main/java/org/terasology/logic/characters/events/ActivationPredicted.java", "diffHunk": "@@ -76,16 +76,24 @@ public int getActivationId() {\n \n     public Vector3f getTargetLocation() {\n         LocationComponent loc = target.getComponent(LocationComponent.class);\n-        if (loc != null&& !Float.isNaN(loc.getWorldPosition().x)) {", "originalCommit": "2e3a6c18e6a2199b6fec4d9f66ba289e70ac7eb9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgzNjU3Mg==", "url": "https://github.com/MovingBlocks/Terasology/pull/4172#discussion_r498836572", "bodyText": "see above", "author": "jdrueckert", "createdAt": "2020-10-02T13:54:39Z", "path": "engine/src/main/java/org/terasology/logic/characters/events/ActivationPredicted.java", "diffHunk": "@@ -76,16 +76,24 @@ public int getActivationId() {\n \n     public Vector3f getTargetLocation() {\n         LocationComponent loc = target.getComponent(LocationComponent.class);\n-        if (loc != null&& !Float.isNaN(loc.getWorldPosition().x)) {\n-            return loc.getWorldPosition();\n+        if (loc != null) {\n+            Vector3f result = loc.getWorldPosition(new Vector3f());\n+            if (result.isFinite()) {\n+                return result;\n+            }\n         }\n         return null;\n     }\n \n     public Vector3f getInstigatorLocation() {\n         LocationComponent loc = instigator.getComponent(LocationComponent.class);\n-        if (loc != null&& !Float.isNaN(loc.getWorldPosition().x)) {", "originalCommit": "2e3a6c18e6a2199b6fec4d9f66ba289e70ac7eb9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgzNjcyMw==", "url": "https://github.com/MovingBlocks/Terasology/pull/4172#discussion_r498836723", "bodyText": "Why do we return [0,0,0] vector here but null above in getTargetLocation()?", "author": "jdrueckert", "createdAt": "2020-10-02T13:54:54Z", "path": "engine/src/main/java/org/terasology/logic/characters/events/ActivationPredicted.java", "diffHunk": "@@ -76,16 +76,24 @@ public int getActivationId() {\n \n     public Vector3f getTargetLocation() {\n         LocationComponent loc = target.getComponent(LocationComponent.class);\n-        if (loc != null&& !Float.isNaN(loc.getWorldPosition().x)) {\n-            return loc.getWorldPosition();\n+        if (loc != null) {\n+            Vector3f result = loc.getWorldPosition(new Vector3f());\n+            if (result.isFinite()) {\n+                return result;\n+            }\n         }\n         return null;\n     }\n \n     public Vector3f getInstigatorLocation() {\n         LocationComponent loc = instigator.getComponent(LocationComponent.class);\n-        if (loc != null&& !Float.isNaN(loc.getWorldPosition().x)) {\n-            return loc.getWorldPosition();\n+        if (loc != null) {\n+            Vector3f result = loc.getWorldPosition(new Vector3f());\n+            if (result.isFinite()) {\n+                return result;\n+            }\n+            result.set(0, 0, 0);", "originalCommit": "2e3a6c18e6a2199b6fec4d9f66ba289e70ac7eb9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}