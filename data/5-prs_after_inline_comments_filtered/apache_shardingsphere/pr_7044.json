{"pr_number": 7044, "pr_title": "Add test case of pg binary value", "pr_createdAt": "2020-08-25T01:29:04Z", "pr_url": "https://github.com/apache/shardingsphere/pull/7044", "timeline": [{"oid": "4dde0da672490f42247eccdd5cbb25931e09cf4a", "url": "https://github.com/apache/shardingsphere/commit/4dde0da672490f42247eccdd5cbb25931e09cf4a", "message": "add test case for pg codesc and constants", "committedDate": "2020-08-24T06:25:29Z", "type": "commit"}, {"oid": "88d5cfd6a8fb23788739eb91a508f52f67cce5a5", "url": "https://github.com/apache/shardingsphere/commit/88d5cfd6a8fb23788739eb91a508f52f67cce5a5", "message": "fix check style error check", "committedDate": "2020-08-24T06:45:21Z", "type": "commit"}, {"oid": "eee547a8e94eff35bf398487801450978e931474", "url": "https://github.com/apache/shardingsphere/commit/eee547a8e94eff35bf398487801450978e931474", "message": "fix mockito strict check", "committedDate": "2020-08-24T07:02:55Z", "type": "commit"}, {"oid": "c8343cd0dcdb72260b69ed92844098720d127133", "url": "https://github.com/apache/shardingsphere/commit/c8343cd0dcdb72260b69ed92844098720d127133", "message": "remove un finish test case", "committedDate": "2020-08-24T07:07:08Z", "type": "commit"}, {"oid": "e96cdec81254b821a44f3725e2372b2772484555", "url": "https://github.com/apache/shardingsphere/commit/e96cdec81254b821a44f3725e2372b2772484555", "message": "add protocol binary value factory test", "committedDate": "2020-08-25T01:27:13Z", "type": "commit"}, {"oid": "2399730d4c0446767dba4091423cfa26aca9b805", "url": "https://github.com/apache/shardingsphere/commit/2399730d4c0446767dba4091423cfa26aca9b805", "message": "fix merge confilct", "committedDate": "2020-08-25T01:31:39Z", "type": "commit"}, {"oid": "41c6d66b25ed133a6d26455dedbf020071b883d4", "url": "https://github.com/apache/shardingsphere/commit/41c6d66b25ed133a6d26455dedbf020071b883d4", "message": "Merge branch 'master' into Test-pg-binary-value", "committedDate": "2020-08-25T01:32:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjEwNzUwMg==", "url": "https://github.com/apache/shardingsphere/pull/7044#discussion_r476107502", "bodyText": "It is suggested to remove this redundant blank line.", "author": "tristaZero", "createdAt": "2020-08-25T03:17:27Z", "path": "shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/test/java/org/apache/shardingsphere/db/protocol/postgresql/packet/command/query/binary/bind/protocol/PostgreSQLDateBinaryProtocolValueTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.db.protocol.postgresql.packet.command.query.binary.bind.protocol;\n+\n+import org.apache.shardingsphere.db.protocol.postgresql.payload.PostgreSQLPacketPayload;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import java.sql.Timestamp;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class PostgreSQLDateBinaryProtocolValueTest {\n+    \n+    @Mock\n+    private PostgreSQLPacketPayload payload;\n+    \n+    @Test\n+    public void assertGetColumnLength() {\n+        assertThat(new PostgreSQLDateBinaryProtocolValue().getColumnLength(\"\"), is(8));\n+    }\n+    \n+    @Test\n+    public void assertRead() {\n+        when(payload.readInt8()).thenReturn(1L);\n+        assertThat(new PostgreSQLDateBinaryProtocolValue().read(payload), is(1L));\n+    }\n+    \n+    @Test\n+    public void assertWrite() {\n+        Timestamp data = new Timestamp(System.currentTimeMillis());\n+        new PostgreSQLDateBinaryProtocolValue().write(payload, data);\n+        verify(payload).writeInt8(data.getTime());\n+    }\n+    ", "originalCommit": "41c6d66b25ed133a6d26455dedbf020071b883d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE5MjQzMA==", "url": "https://github.com/apache/shardingsphere/pull/7044#discussion_r476192430", "bodyText": "done", "author": "xbkaishui", "createdAt": "2020-08-25T05:48:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjEwNzUwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjEwNzU1MA==", "url": "https://github.com/apache/shardingsphere/pull/7044#discussion_r476107550", "bodyText": "It is suggested to remove this redundant blank line.", "author": "tristaZero", "createdAt": "2020-08-25T03:17:33Z", "path": "shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/test/java/org/apache/shardingsphere/db/protocol/postgresql/packet/command/query/binary/bind/protocol/PostgreSQLDoubleBinaryProtocolValueTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.db.protocol.postgresql.packet.command.query.binary.bind.protocol;\n+\n+import io.netty.buffer.ByteBuf;\n+import org.apache.shardingsphere.db.protocol.postgresql.payload.PostgreSQLPacketPayload;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class PostgreSQLDoubleBinaryProtocolValueTest {\n+    \n+    @Mock\n+    private ByteBuf byteBuf;\n+    \n+    @Test\n+    public void assertGetColumnLength() {\n+        assertThat(new PostgreSQLDoubleBinaryProtocolValue().getColumnLength(\"\"), is(8));\n+    }\n+    \n+    @Test\n+    public void assertRead() {\n+        when(byteBuf.readDouble()).thenReturn(1D);\n+        assertThat(new PostgreSQLDoubleBinaryProtocolValue().read(new PostgreSQLPacketPayload(byteBuf)), is(1D));\n+    }\n+    \n+    @Test\n+    public void assertWrite() {\n+        new PostgreSQLDoubleBinaryProtocolValue().write(new PostgreSQLPacketPayload(byteBuf), 1D);\n+        verify(byteBuf).writeDouble(1.0d);\n+    }\n+    ", "originalCommit": "41c6d66b25ed133a6d26455dedbf020071b883d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE5MzAzNQ==", "url": "https://github.com/apache/shardingsphere/pull/7044#discussion_r476193035", "bodyText": "done", "author": "xbkaishui", "createdAt": "2020-08-25T05:50:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjEwNzU1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjEyODkxOQ==", "url": "https://github.com/apache/shardingsphere/pull/7044#discussion_r476128919", "bodyText": "Is it a duplicated line?", "author": "tuohai666", "createdAt": "2020-08-25T03:48:45Z", "path": "shardingsphere-db-protocol/shardingsphere-db-protocol-postgresql/src/test/java/org/apache/shardingsphere/db/protocol/postgresql/codec/PostgreSQLPacketCodecEngineTest.java", "diffHunk": "@@ -65,6 +65,7 @@ public void assertDecode() {\n         List<Object> out = new LinkedList<>();\n         new PostgreSQLPacketCodecEngine().decode(context, byteBuf, out, 54);\n         assertThat(out.size(), is(1));\n+        assertThat(out.size(), is(1));", "originalCommit": "41c6d66b25ed133a6d26455dedbf020071b883d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE5MTc0MA==", "url": "https://github.com/apache/shardingsphere/pull/7044#discussion_r476191740", "bodyText": "fixed", "author": "xbkaishui", "createdAt": "2020-08-25T05:46:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjEyODkxOQ=="}], "type": "inlineReview"}, {"oid": "00b8a89815f432418e19d7babdb3c9224100ce21", "url": "https://github.com/apache/shardingsphere/commit/00b8a89815f432418e19d7babdb3c9224100ce21", "message": "change as review", "committedDate": "2020-08-25T05:48:14Z", "type": "commit"}, {"oid": "5e162afe754b16f6c0a86ffb6a4b1437c716ef2e", "url": "https://github.com/apache/shardingsphere/commit/5e162afe754b16f6c0a86ffb6a4b1437c716ef2e", "message": "remove blank line", "committedDate": "2020-08-25T05:49:23Z", "type": "commit"}, {"oid": "86d5f4af573b728105070b9fd1b33e16755ce499", "url": "https://github.com/apache/shardingsphere/commit/86d5f4af573b728105070b9fd1b33e16755ce499", "message": "remove blank line", "committedDate": "2020-08-25T05:50:14Z", "type": "commit"}]}