{"pr_number": 7740, "pr_title": "support create, alter, drop, select view statement", "pr_createdAt": "2020-10-11T04:05:07Z", "pr_url": "https://github.com/apache/shardingsphere/pull/7740", "timeline": [{"oid": "512837b304f1d39c847bddcec00224319d41dbdf", "url": "https://github.com/apache/shardingsphere/commit/512837b304f1d39c847bddcec00224319d41dbdf", "message": "support create, alter, drop, select view statement", "committedDate": "2020-10-11T04:01:14Z", "type": "commit"}, {"oid": "d40f65bfc98f7ac94f2ed4388e9b525fbe7f7910", "url": "https://github.com/apache/shardingsphere/commit/d40f65bfc98f7ac94f2ed4388e9b525fbe7f7910", "message": "fix unit test error", "committedDate": "2020-10-11T05:12:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkwMDAyNQ==", "url": "https://github.com/apache/shardingsphere/pull/7740#discussion_r502900025", "bodyText": "Is this class just for some of the unsupported DDLSQLStataments?  In that case, do you think an abstract class to carry these functions will be better?\nStatementValidatorUtil gives me a  feeling that it is born for all the statements.", "author": "tristaZero", "createdAt": "2020-10-11T11:02:22Z", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/util/StatementValidatorUtil.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sharding.route.engine.validator.util;\n+\n+import lombok.AccessLevel;\n+import lombok.NoArgsConstructor;\n+import org.apache.shardingsphere.infra.exception.ShardingSphereException;\n+import org.apache.shardingsphere.infra.metadata.ShardingSphereMetaData;\n+import org.apache.shardingsphere.sharding.route.engine.exception.NoSuchTableException;\n+import org.apache.shardingsphere.sharding.route.engine.exception.TableExistsException;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.generic.table.SimpleTableSegment;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+\n+/**\n+ * Statement validator utility class.\n+ */\n+@NoArgsConstructor(access = AccessLevel.PRIVATE)\n+public final class StatementValidatorUtil {", "originalCommit": "d40f65bfc98f7ac94f2ed4388e9b525fbe7f7910", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkxNjU2OQ==", "url": "https://github.com/apache/shardingsphere/pull/7740#discussion_r502916569", "bodyText": "Is this class just for some of the unsupported DDLSQLStataments? In that case, do you think an abstract class to carry these functions will be better?\nStatementValidatorUtil gives me a feeling that it is born for all the statements.\n\n@tristaZero I agree with your point, how about adding a new abstract class ShardingDDLStatementValidator to carry these functions\uff1f", "author": "strongduanmu", "createdAt": "2020-10-11T13:35:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkwMDAyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkwMTA2Mg==", "url": "https://github.com/apache/shardingsphere/pull/7740#discussion_r502901062", "bodyText": "If Create view SQL can work well for single table currently, do you think ShardingUnconfiguredTablesRoutingEngine will be a better match?", "author": "tristaZero", "createdAt": "2020-10-11T11:11:50Z", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/ShardingStatementValidatorFactory.java", "diffHunk": "@@ -66,6 +73,25 @@\n         if (sqlStatement instanceof CreateProcedureStatement) {\n             return Optional.of(new ShardingCreateProcedureStatementValidator());\n         }\n+        if (sqlStatement instanceof CreateViewStatement) {\n+            return Optional.of(new ShardingCreateViewStatementValidator());\n+        }\n+        if (sqlStatement instanceof AlterViewStatement) {", "originalCommit": "d40f65bfc98f7ac94f2ed4388e9b525fbe7f7910", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkxNzU4OA==", "url": "https://github.com/apache/shardingsphere/pull/7740#discussion_r502917588", "bodyText": "If Create view SQL can work well for single table currently, do you think ShardingUnconfiguredTablesRoutingEngine will be a better match?\n\n@tristaZero ShardingUnconfiguredTablesRoutingEngine can meet the needs of creating views on a single data source. I think it is a better choice. \ud83d\udc4d", "author": "strongduanmu", "createdAt": "2020-10-11T13:44:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkwMTA2Mg=="}], "type": "inlineReview"}, {"oid": "87a889a26c45c69a2fa9479127331635e3618dd3", "url": "https://github.com/apache/shardingsphere/commit/87a889a26c45c69a2fa9479127331635e3618dd3", "message": "resolve code conflict", "committedDate": "2020-10-11T14:00:08Z", "type": "commit"}, {"oid": "102f78601455b438093363fabc8b23c64b985c82", "url": "https://github.com/apache/shardingsphere/commit/102f78601455b438093363fabc8b23c64b985c82", "message": "extract ShardingDDLStatementValidator and ShardingDMLStatementValidator to carry common functions", "committedDate": "2020-10-12T12:09:09Z", "type": "commit"}, {"oid": "77d3d83e2c18cc5f7e72ec97b6954563438282c8", "url": "https://github.com/apache/shardingsphere/commit/77d3d83e2c18cc5f7e72ec97b6954563438282c8", "message": "modify route engine to ShardingUnconfiguredTablesRoutingEngine", "committedDate": "2020-10-12T16:33:20Z", "type": "commit"}, {"oid": "05cffa61e4f9b4c8b6844d0caa2e388c1a07455b", "url": "https://github.com/apache/shardingsphere/commit/05cffa61e4f9b4c8b6844d0caa2e388c1a07455b", "message": "resolve code conflict", "committedDate": "2020-10-12T17:06:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY0MzIyNg==", "url": "https://github.com/apache/shardingsphere/pull/7740#discussion_r503643226", "bodyText": "Oh, you did it!", "author": "tristaZero", "createdAt": "2020-10-13T03:17:18Z", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingDMLStatementValidator.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sharding.route.engine.validator.dml;\n+\n+import org.apache.shardingsphere.infra.binder.statement.SQLStatementContext;\n+import org.apache.shardingsphere.infra.binder.type.TableAvailable;\n+import org.apache.shardingsphere.infra.exception.ShardingSphereException;\n+import org.apache.shardingsphere.sharding.route.engine.validator.ShardingStatementValidator;\n+import org.apache.shardingsphere.sql.parser.sql.common.statement.SQLStatement;\n+\n+/**\n+ * Sharding dml statement validator.\n+ */\n+public abstract class ShardingDMLStatementValidator<T extends SQLStatement> implements ShardingStatementValidator<T> {", "originalCommit": "05cffa61e4f9b4c8b6844d0caa2e388c1a07455b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY0MzQ3NQ==", "url": "https://github.com/apache/shardingsphere/pull/7740#discussion_r503643475", "bodyText": "Why do we need VIEW_TYPE?", "author": "tristaZero", "createdAt": "2020-10-13T03:18:31Z", "path": "shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/model/schema/model/schema/SchemaMetaDataLoader.java", "diffHunk": "@@ -42,6 +42,8 @@\n     \n     private static final String TABLE_TYPE = \"TABLE\";\n     \n+    private static final String VIEW_TYPE = \"VIEW\";", "originalCommit": "05cffa61e4f9b4c8b6844d0caa2e388c1a07455b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY0NjU2MQ==", "url": "https://github.com/apache/shardingsphere/pull/7740#discussion_r503646561", "bodyText": "Why do we need VIEW_TYPE?\n\n@tristaZero In order to support select view statement.", "author": "strongduanmu", "createdAt": "2020-10-13T03:30:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY0MzQ3NQ=="}], "type": "inlineReview"}]}