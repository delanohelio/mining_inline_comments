{"pr_number": 7388, "pr_title": "Add test case for ResourceLock", "pr_createdAt": "2020-09-10T10:00:58Z", "pr_url": "https://github.com/apache/shardingsphere/pull/7388", "timeline": [{"oid": "00d6e240ea0ad928fdaa9548c91dd05ad5728c36", "url": "https://github.com/apache/shardingsphere/commit/00d6e240ea0ad928fdaa9548c91dd05ad5728c36", "message": "Add test case for ResourceLock", "committedDate": "2020-09-10T09:59:44Z", "type": "commit"}, {"oid": "ed1e33d48bb780e0ff628b02a4c378de2b0fe3a0", "url": "https://github.com/apache/shardingsphere/commit/ed1e33d48bb780e0ff628b02a4c378de2b0fe3a0", "message": "add mock real lock", "committedDate": "2020-09-11T03:23:34Z", "type": "commit"}, {"oid": "a2960fc30428a51d04e95306b8640827e8ddc65a", "url": "https://github.com/apache/shardingsphere/commit/a2960fc30428a51d04e95306b8640827e8ddc65a", "message": "Merge branch 'master' into Test-Resource-Lock", "committedDate": "2020-09-11T04:03:19Z", "type": "commit"}, {"oid": "d29e732e7b90bf2e2127a03a9d2b86068e285d6c", "url": "https://github.com/apache/shardingsphere/commit/d29e732e7b90bf2e2127a03a9d2b86068e285d6c", "message": "adjust method name", "committedDate": "2020-09-11T04:05:46Z", "type": "commit"}, {"oid": "9deb813edfba0b35feb58f421f7966e7815b929d", "url": "https://github.com/apache/shardingsphere/commit/9deb813edfba0b35feb58f421f7966e7815b929d", "message": "change to normal multi thread", "committedDate": "2020-09-16T09:51:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MDQ0NQ==", "url": "https://github.com/apache/shardingsphere/pull/7388#discussion_r489580445", "bodyText": "Please add final if class is not design for extension", "author": "terrymanu", "createdAt": "2020-09-16T16:48:03Z", "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/connection/ResourceLockTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.communication.jdbc.connection;\n+\n+import lombok.SneakyThrows;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+public class ResourceLockTest {", "originalCommit": "9deb813edfba0b35feb58f421f7966e7815b929d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTkyMzIwMQ==", "url": "https://github.com/apache/shardingsphere/pull/7388#discussion_r489923201", "bodyText": "done", "author": "xbkaishui", "createdAt": "2020-09-17T03:17:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MDQ0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTkyNzE5Mg==", "url": "https://github.com/apache/shardingsphere/pull/7388#discussion_r489927192", "bodyText": "done", "author": "xbkaishui", "createdAt": "2020-09-17T03:23:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MDQ0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MDU5Mw==", "url": "https://github.com/apache/shardingsphere/pull/7388#discussion_r489580593", "bodyText": "Please use assertThat instead of assertEquals", "author": "terrymanu", "createdAt": "2020-09-16T16:48:19Z", "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/connection/ResourceLockTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.communication.jdbc.connection;\n+\n+import lombok.SneakyThrows;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+public class ResourceLockTest {\n+    \n+    @SneakyThrows(value = InterruptedException.class)\n+    @Test\n+    public void assertDoAwait() {\n+        int numberOfThreads = 10;\n+        ResourceLock resourceLock = new ResourceLock();\n+        ExecutorService service = Executors.newFixedThreadPool(numberOfThreads);\n+        CountDownLatch latch = new CountDownLatch(numberOfThreads);\n+        AtomicInteger counter = new AtomicInteger();\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            service.submit(() -> {\n+                resourceLock.doAwait();\n+                counter.incrementAndGet();\n+                latch.countDown();\n+            });\n+        }\n+        latch.await();\n+        assertEquals(numberOfThreads, counter.get());\n+    }\n+    \n+    @SneakyThrows(value = InterruptedException.class)\n+    @Test\n+    public void assertDoAwaitThrowsException() {\n+        int numberOfThreads = 10;\n+        ResourceLock resourceLock = new ResourceLock();\n+        ExecutorService service = Executors.newFixedThreadPool(numberOfThreads);\n+        CountDownLatch latch = new CountDownLatch(numberOfThreads);\n+        AtomicInteger counter = new AtomicInteger();\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            service.submit(() -> {\n+                resourceLock.doAwait();\n+                counter.incrementAndGet();\n+                latch.countDown();\n+            });\n+        }\n+        latch.await(100, TimeUnit.MILLISECONDS);\n+        service.shutdownNow();\n+        assertNotEquals(numberOfThreads, counter.get());\n+    }\n+    \n+    @SneakyThrows(value = InterruptedException.class)\n+    @Test\n+    public void assertDoNotify() {\n+        int numberOfThreads = 10;\n+        ResourceLock resourceLock = new ResourceLock();\n+        ExecutorService service = Executors.newFixedThreadPool(numberOfThreads);\n+        CountDownLatch latch = new CountDownLatch(numberOfThreads);\n+        AtomicInteger counter = new AtomicInteger();\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            service.submit(() -> {\n+                resourceLock.doAwait();\n+                counter.incrementAndGet();\n+                latch.countDown();\n+                resourceLock.doNotify();\n+            });\n+        }\n+        latch.await();\n+        assertEquals(numberOfThreads, counter.get());", "originalCommit": "9deb813edfba0b35feb58f421f7966e7815b929d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTkyMzI0MQ==", "url": "https://github.com/apache/shardingsphere/pull/7388#discussion_r489923241", "bodyText": "done", "author": "xbkaishui", "createdAt": "2020-09-17T03:17:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MDU5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTkyNzEyNw==", "url": "https://github.com/apache/shardingsphere/pull/7388#discussion_r489927127", "bodyText": "done", "author": "xbkaishui", "createdAt": "2020-09-17T03:23:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MDU5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MDg3MQ==", "url": "https://github.com/apache/shardingsphere/pull/7388#discussion_r489580871", "bodyText": "Please do not use SneakyThrows, just throw from method signature", "author": "terrymanu", "createdAt": "2020-09-16T16:48:47Z", "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/connection/ResourceLockTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.communication.jdbc.connection;\n+\n+import lombok.SneakyThrows;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+public class ResourceLockTest {\n+    \n+    @SneakyThrows(value = InterruptedException.class)\n+    @Test\n+    public void assertDoAwait() {\n+        int numberOfThreads = 10;\n+        ResourceLock resourceLock = new ResourceLock();\n+        ExecutorService service = Executors.newFixedThreadPool(numberOfThreads);\n+        CountDownLatch latch = new CountDownLatch(numberOfThreads);\n+        AtomicInteger counter = new AtomicInteger();\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            service.submit(() -> {\n+                resourceLock.doAwait();\n+                counter.incrementAndGet();\n+                latch.countDown();\n+            });\n+        }\n+        latch.await();\n+        assertEquals(numberOfThreads, counter.get());\n+    }\n+    \n+    @SneakyThrows(value = InterruptedException.class)\n+    @Test\n+    public void assertDoAwaitThrowsException() {\n+        int numberOfThreads = 10;\n+        ResourceLock resourceLock = new ResourceLock();\n+        ExecutorService service = Executors.newFixedThreadPool(numberOfThreads);\n+        CountDownLatch latch = new CountDownLatch(numberOfThreads);\n+        AtomicInteger counter = new AtomicInteger();\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            service.submit(() -> {\n+                resourceLock.doAwait();\n+                counter.incrementAndGet();\n+                latch.countDown();\n+            });\n+        }\n+        latch.await(100, TimeUnit.MILLISECONDS);\n+        service.shutdownNow();\n+        assertNotEquals(numberOfThreads, counter.get());\n+    }\n+    \n+    @SneakyThrows(value = InterruptedException.class)", "originalCommit": "9deb813edfba0b35feb58f421f7966e7815b929d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTkyNzA5NQ==", "url": "https://github.com/apache/shardingsphere/pull/7388#discussion_r489927095", "bodyText": "done", "author": "xbkaishui", "createdAt": "2020-09-17T03:23:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MDg3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MTI0MQ==", "url": "https://github.com/apache/shardingsphere/pull/7388#discussion_r489581241", "bodyText": "Please use assertThat instead of assertNotEquals", "author": "terrymanu", "createdAt": "2020-09-16T16:49:25Z", "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/connection/ResourceLockTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.communication.jdbc.connection;\n+\n+import lombok.SneakyThrows;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+public class ResourceLockTest {\n+    \n+    @SneakyThrows(value = InterruptedException.class)\n+    @Test\n+    public void assertDoAwait() {\n+        int numberOfThreads = 10;\n+        ResourceLock resourceLock = new ResourceLock();\n+        ExecutorService service = Executors.newFixedThreadPool(numberOfThreads);\n+        CountDownLatch latch = new CountDownLatch(numberOfThreads);\n+        AtomicInteger counter = new AtomicInteger();\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            service.submit(() -> {\n+                resourceLock.doAwait();\n+                counter.incrementAndGet();\n+                latch.countDown();\n+            });\n+        }\n+        latch.await();\n+        assertEquals(numberOfThreads, counter.get());\n+    }\n+    \n+    @SneakyThrows(value = InterruptedException.class)\n+    @Test\n+    public void assertDoAwaitThrowsException() {\n+        int numberOfThreads = 10;\n+        ResourceLock resourceLock = new ResourceLock();\n+        ExecutorService service = Executors.newFixedThreadPool(numberOfThreads);\n+        CountDownLatch latch = new CountDownLatch(numberOfThreads);\n+        AtomicInteger counter = new AtomicInteger();\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            service.submit(() -> {\n+                resourceLock.doAwait();\n+                counter.incrementAndGet();\n+                latch.countDown();\n+            });\n+        }\n+        latch.await(100, TimeUnit.MILLISECONDS);\n+        service.shutdownNow();\n+        assertNotEquals(numberOfThreads, counter.get());", "originalCommit": "9deb813edfba0b35feb58f421f7966e7815b929d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTkyNzA3MQ==", "url": "https://github.com/apache/shardingsphere/pull/7388#discussion_r489927071", "bodyText": "done", "author": "xbkaishui", "createdAt": "2020-09-17T03:23:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MTI0MQ=="}], "type": "inlineReview"}, {"oid": "12519942b13f1fb14f49bb8168d91d2448bcd7f5", "url": "https://github.com/apache/shardingsphere/commit/12519942b13f1fb14f49bb8168d91d2448bcd7f5", "message": "change as suggestions", "committedDate": "2020-09-17T03:01:39Z", "type": "commit"}, {"oid": "47ec166672b5a834e891ee0b02face1017d0800a", "url": "https://github.com/apache/shardingsphere/commit/47ec166672b5a834e891ee0b02face1017d0800a", "message": "remote SneakyThrows", "committedDate": "2020-09-17T03:20:33Z", "type": "commit"}]}