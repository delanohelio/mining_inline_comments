{"pr_number": 4825, "pr_title": "orchestration mode code optimization .", "pr_createdAt": "2020-03-18T09:21:42Z", "pr_url": "https://github.com/apache/shardingsphere/pull/4825", "timeline": [{"oid": "8d30673bde6c2905da5722b2b391268e5561b6fc", "url": "https://github.com/apache/shardingsphere/commit/8d30673bde6c2905da5722b2b391268e5561b6fc", "message": "orchestration mode code optimization .", "committedDate": "2020-03-18T09:18:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxMjgzOA==", "url": "https://github.com/apache/shardingsphere/pull/4825#discussion_r394212838", "bodyText": "why?", "author": "kimmking", "createdAt": "2020-03-18T09:35:40Z", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-configuration/src/main/java/org/apache/shardingsphere/orchestration/center/yaml/swapper/OrchestrationConfigurationYamlSwapper.java", "diffHunk": "@@ -40,7 +40,7 @@\n      */\n     @Override\n     public YamlOrchestrationConfiguration swap(final OrchestrationConfiguration configuration) {\n-        Map<String, YamlCenterRepositoryConfiguration> yamlInstanceConfigurationMap = new HashMap();\n+        Map<String, YamlCenterRepositoryConfiguration> yamlInstanceConfigurationMap = new HashMap<>();", "originalCommit": "8d30673bde6c2905da5722b2b391268e5561b6fc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxMzQwMg==", "url": "https://github.com/apache/shardingsphere/pull/4825#discussion_r394213402", "bodyText": "unnecessary.\na local static field is better.", "author": "kimmking", "createdAt": "2020-03-18T09:36:38Z", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-zookeeper-curator/src/main/java/org/apache/shardingsphere/orchestration/center/instance/CuratorZookeeperCenterRepository.java", "diffHunk": "@@ -228,7 +229,7 @@ public void watch(final String key, final DataChangedEventListener dataChangedEv\n             }\n             DataChangedEvent.ChangedType changedType = getChangedType(event);\n             if (DataChangedEvent.ChangedType.IGNORED != changedType) {\n-                dataChangedEventListener.onChange(new DataChangedEvent(data.getPath(), null == data.getData() ? null : new String(data.getData(), \"UTF-8\"), changedType));\n+                dataChangedEventListener.onChange(new DataChangedEvent(data.getPath(), null == data.getData() ? null : new String(data.getData(), StandardCharsets.UTF_8), changedType));", "originalCommit": "8d30673bde6c2905da5722b2b391268e5561b6fc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxNDU0NQ==", "url": "https://github.com/apache/shardingsphere/pull/4825#discussion_r394214545", "bodyText": "good.\nbut static field referred better than literal string.", "author": "kimmking", "createdAt": "2020-03-18T09:38:36Z", "path": "sharding-orchestration/sharding-orchestration-core/sharding-orchestration-core-common/src/main/java/org/apache/shardingsphere/orchestration/core/common/CenterType.java", "diffHunk": "@@ -41,6 +42,8 @@\n      * @return OrchestrationType enum, return {@code null} if not found\n      */\n     public static CenterType findByValue(final String value) {\n-        return Arrays.stream(CenterType.values()).filter(each -> each.getValue().equals(value)).findFirst().get();\n+        return Arrays.stream(CenterType.values())\n+                .filter(each -> each.getValue().equals(value)).findFirst()\n+                .orElseThrow(() -> new OrchestrationException(\"now only support :{},{}\", \"registry_center\", \"config_center\"));", "originalCommit": "8d30673bde6c2905da5722b2b391268e5561b6fc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxNDk4Ng==", "url": "https://github.com/apache/shardingsphere/pull/4825#discussion_r394214986", "bodyText": "why?", "author": "kimmking", "createdAt": "2020-03-18T09:39:23Z", "path": "sharding-orchestration/sharding-orchestration-core/sharding-orchestration-core-configcenter/src/main/java/org/apache/shardingsphere/orchestration/core/configcenter/ConfigCenter.java", "diffHunk": "@@ -180,13 +180,12 @@ private void persistShardingSchemaName(final String shardingSchemaName) {\n             repository.persist(node.getSchemaPath(), shardingSchemaName);\n             return;\n         }\n-        List<String> schemaNameList = Splitter.on(\",\").splitToList(shardingSchemaNames);\n+        List<String> schemaNameList = Lists.newArrayList(Splitter.on(\",\").split(shardingSchemaNames));", "originalCommit": "8d30673bde6c2905da5722b2b391268e5561b6fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIzMTc0NQ==", "url": "https://github.com/apache/shardingsphere/pull/4825#discussion_r394231745", "bodyText": "splitToList return readOnly List,and Then the list will add,", "author": "yu199195", "createdAt": "2020-03-18T10:06:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxNDk4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxNTk1Ng==", "url": "https://github.com/apache/shardingsphere/pull/4825#discussion_r394215956", "bodyText": "unnecessary.", "author": "kimmking", "createdAt": "2020-03-18T09:41:05Z", "path": "sharding-orchestration/sharding-orchestration-core/sharding-orchestration-core-configcenter/src/main/java/org/apache/shardingsphere/orchestration/core/configcenter/ConfigCenter.java", "diffHunk": "@@ -237,9 +236,9 @@ public boolean isShadowRule(final String shardingSchemaName) {\n      */\n     @SuppressWarnings(\"unchecked\")\n     public Map<String, DataSourceConfiguration> loadDataSourceConfigurations(final String shardingSchemaName) {\n-        Map<String, YamlDataSourceConfiguration> result = (Map) YamlEngine.unmarshal(repository.get(node.getDataSourcePath(shardingSchemaName)));\n+        Map<String, YamlDataSourceConfiguration> result = (Map<String, YamlDataSourceConfiguration>) YamlEngine.unmarshal(repository.get(node.getDataSourcePath(shardingSchemaName)));", "originalCommit": "8d30673bde6c2905da5722b2b391268e5561b6fc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "912a74e9a29be4a88ee3cc07593f3e4b504aeecf", "url": "https://github.com/apache/shardingsphere/commit/912a74e9a29be4a88ee3cc07593f3e4b504aeecf", "message": "orchestration mode code optimization .", "committedDate": "2020-03-18T10:12:31Z", "type": "commit"}, {"oid": "cc8ffde509d862f1910a87e7d4dccaed9735c4cb", "url": "https://github.com/apache/shardingsphere/commit/cc8ffde509d862f1910a87e7d4dccaed9735c4cb", "message": "orchestration mode code optimization .", "committedDate": "2020-03-18T10:29:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMxNDM4OQ==", "url": "https://github.com/apache/shardingsphere/pull/4825#discussion_r394314389", "bodyText": "blank line should be with four space", "author": "kimmking", "createdAt": "2020-03-18T12:38:05Z", "path": "sharding-orchestration/sharding-orchestration-core/sharding-orchestration-core-common/src/main/java/org/apache/shardingsphere/orchestration/core/common/CenterType.java", "diffHunk": "@@ -31,7 +32,7 @@\n     \n     REGISTRY_CENTER(\"registry_center\"),\n     CONFIG_CENTER(\"config_center\");\n-    \n+", "originalCommit": "cc8ffde509d862f1910a87e7d4dccaed9735c4cb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMxNTI0NA==", "url": "https://github.com/apache/shardingsphere/pull/4825#discussion_r394315244", "bodyText": "don't refer guava", "author": "kimmking", "createdAt": "2020-03-18T12:39:32Z", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-zookeeper-curator/src/main/java/org/apache/shardingsphere/orchestration/center/instance/CuratorZookeeperCenterRepository.java", "diffHunk": "@@ -228,7 +228,7 @@ public void watch(final String key, final DataChangedEventListener dataChangedEv\n             }\n             DataChangedEvent.ChangedType changedType = getChangedType(event);\n             if (DataChangedEvent.ChangedType.IGNORED != changedType) {\n-                dataChangedEventListener.onChange(new DataChangedEvent(data.getPath(), null == data.getData() ? null : new String(data.getData(), \"UTF-8\"), changedType));\n+                dataChangedEventListener.onChange(new DataChangedEvent(data.getPath(), null == data.getData() ? null : new String(data.getData(), Charsets.UTF_8), changedType));", "originalCommit": "cc8ffde509d862f1910a87e7d4dccaed9735c4cb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b2cf016e16b92a3b8e522f719497402babe64d4f", "url": "https://github.com/apache/shardingsphere/commit/b2cf016e16b92a3b8e522f719497402babe64d4f", "message": "orchestration mode code optimization .", "committedDate": "2020-03-18T13:12:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM5NTk2Ng==", "url": "https://github.com/apache/shardingsphere/pull/4825#discussion_r394395966", "bodyText": "remove nio static, use local static field.", "author": "kimmking", "createdAt": "2020-03-18T14:38:39Z", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-zookeeper-curator/src/main/java/org/apache/shardingsphere/orchestration/center/instance/CuratorZookeeperCenterRepository.java", "diffHunk": "@@ -86,7 +86,7 @@ private CuratorFramework buildCuratorClient(final CenterConfiguration config, fi\n             builder.connectionTimeoutMs(operationTimeoutMilliseconds);\n         }\n         if (!Strings.isNullOrEmpty(digest)) {\n-            builder.authorization(\"digest\", digest.getBytes(Charsets.UTF_8))\n+            builder.authorization(\"digest\", digest.getBytes(StandardCharsets.UTF_8))", "originalCommit": "b2cf016e16b92a3b8e522f719497402babe64d4f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM5NjIwOQ==", "url": "https://github.com/apache/shardingsphere/pull/4825#discussion_r394396209", "bodyText": "blank line should be with four space", "author": "kimmking", "createdAt": "2020-03-18T14:38:59Z", "path": "sharding-orchestration/sharding-orchestration-core/sharding-orchestration-core-common/src/main/java/org/apache/shardingsphere/orchestration/core/common/CenterType.java", "diffHunk": "@@ -31,16 +32,18 @@\n     \n     REGISTRY_CENTER(\"registry_center\"),\n     CONFIG_CENTER(\"config_center\");\n-    \n+\n     private final String value;\n-    \n+", "originalCommit": "b2cf016e16b92a3b8e522f719497402babe64d4f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "715a4560dc64d3e481860e30721105aa63d3a243", "url": "https://github.com/apache/shardingsphere/commit/715a4560dc64d3e481860e30721105aa63d3a243", "message": "charset ues guava .", "committedDate": "2020-03-19T00:41:05Z", "type": "commit"}, {"oid": "2dcb059f3e8ba2ea680174e2ffa473ea1367c84b", "url": "https://github.com/apache/shardingsphere/commit/2dcb059f3e8ba2ea680174e2ffa473ea1367c84b", "message": "four blank line", "committedDate": "2020-03-19T02:18:06Z", "type": "commit"}, {"oid": "a0944f93f7ea19c1701e51e0d1c4116dbae06810", "url": "https://github.com/apache/shardingsphere/commit/a0944f93f7ea19c1701e51e0d1c4116dbae06810", "message": "four blank line", "committedDate": "2020-03-19T02:21:49Z", "type": "commit"}, {"oid": "7e0f327308b58285e957309e23bb458b746e4535", "url": "https://github.com/apache/shardingsphere/commit/7e0f327308b58285e957309e23bb458b746e4535", "message": "four blank line.", "committedDate": "2020-03-19T02:27:04Z", "type": "commit"}, {"oid": "c79ac54398802d6049a2143c5d63a293a8d0e825", "url": "https://github.com/apache/shardingsphere/commit/c79ac54398802d6049a2143c5d63a293a8d0e825", "message": "four blank line.", "committedDate": "2020-03-19T02:30:01Z", "type": "commit"}, {"oid": "a67179258ecc7d69e685418a83f6312469b887e7", "url": "https://github.com/apache/shardingsphere/commit/a67179258ecc7d69e685418a83f6312469b887e7", "message": "orchestration mode code optimization .", "committedDate": "2020-03-19T02:48:44Z", "type": "commit"}]}