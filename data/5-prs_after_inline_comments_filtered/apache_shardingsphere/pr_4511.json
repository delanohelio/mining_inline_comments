{"pr_number": 4511, "pr_title": "T0 add ut for sharding-orchestration-core module", "pr_createdAt": "2020-02-28T06:59:10Z", "pr_url": "https://github.com/apache/shardingsphere/pull/4511", "timeline": [{"oid": "e685e32b66f563da19908b3b6154958a272f7567", "url": "https://github.com/apache/shardingsphere/commit/e685e32b66f563da19908b3b6154958a272f7567", "message": "T0 add ut", "committedDate": "2020-02-28T06:56:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU0NjcxMA==", "url": "https://github.com/apache/shardingsphere/pull/4511#discussion_r385546710", "bodyText": "encrypt_db is exist schema, the dataChangedEvent will not be created for new schema.", "author": "menghaoranss", "createdAt": "2020-02-28T07:38:47Z", "path": "sharding-orchestration/sharding-orchestration-core/src/test/java/org/apache/shardingsphere/orchestration/internal/registry/config/listener/SchemaChangedListenerTest.java", "diffHunk": "@@ -170,4 +170,42 @@ public void assertCreateSchemaDeletedEventForNewSchema() {\n         assertThat(actual, instanceOf(SchemaDeletedEvent.class));\n         assertThat(((SchemaDeletedEvent) actual).getShardingSchemaName(), is(\"logic_db\"));\n     }\n+    \n+    @Test\n+    public void assertCreateWithInvalidNodeChangedEvent() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/logic_db\", DATA_SOURCE_YAML, ChangedType.DELETED);\n+        ShardingOrchestrationEvent actual = schemaChangedListener.createShardingOrchestrationEvent(dataChangedEvent);\n+        assertThat(actual, instanceOf(IgnoredShardingOrchestrationEvent.class));\n+    }\n+    \n+    @Test\n+    public void assertCreateWithNullShardingSchemaName() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/datasource\", DATA_SOURCE_YAML, ChangedType.DELETED);\n+        ShardingOrchestrationEvent actual = schemaChangedListener.createShardingOrchestrationEvent(dataChangedEvent);\n+        assertThat(actual, instanceOf(IgnoredShardingOrchestrationEvent.class));\n+    }\n+    \n+    @Test\n+    public void assertCreateAddedEventWithEncryptRuleConfigurationForNewSchema() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/encrypt_db/rule\", ENCRYPT_RULE_YAML, ChangedType.UPDATED);", "originalCommit": "e685e32b66f563da19908b3b6154958a272f7567", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1MTY4Nw==", "url": "https://github.com/apache/shardingsphere/pull/4511#discussion_r385551687", "bodyText": "ok,I'll fix it later", "author": "zjcnb", "createdAt": "2020-02-28T07:54:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU0NjcxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU0NzAzOQ==", "url": "https://github.com/apache/shardingsphere/pull/4511#discussion_r385547039", "bodyText": "same problem as above", "author": "menghaoranss", "createdAt": "2020-02-28T07:39:50Z", "path": "sharding-orchestration/sharding-orchestration-core/src/test/java/org/apache/shardingsphere/orchestration/internal/registry/config/listener/SchemaChangedListenerTest.java", "diffHunk": "@@ -170,4 +170,42 @@ public void assertCreateSchemaDeletedEventForNewSchema() {\n         assertThat(actual, instanceOf(SchemaDeletedEvent.class));\n         assertThat(((SchemaDeletedEvent) actual).getShardingSchemaName(), is(\"logic_db\"));\n     }\n+    \n+    @Test\n+    public void assertCreateWithInvalidNodeChangedEvent() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/logic_db\", DATA_SOURCE_YAML, ChangedType.DELETED);\n+        ShardingOrchestrationEvent actual = schemaChangedListener.createShardingOrchestrationEvent(dataChangedEvent);\n+        assertThat(actual, instanceOf(IgnoredShardingOrchestrationEvent.class));\n+    }\n+    \n+    @Test\n+    public void assertCreateWithNullShardingSchemaName() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/datasource\", DATA_SOURCE_YAML, ChangedType.DELETED);\n+        ShardingOrchestrationEvent actual = schemaChangedListener.createShardingOrchestrationEvent(dataChangedEvent);\n+        assertThat(actual, instanceOf(IgnoredShardingOrchestrationEvent.class));\n+    }\n+    \n+    @Test\n+    public void assertCreateAddedEventWithEncryptRuleConfigurationForNewSchema() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/encrypt_db/rule\", ENCRYPT_RULE_YAML, ChangedType.UPDATED);\n+        ShardingOrchestrationEvent actual = schemaChangedListener.createShardingOrchestrationEvent(dataChangedEvent);\n+        assertThat(actual, instanceOf(EncryptRuleChangedEvent.class));\n+        assertThat(((EncryptRuleChangedEvent) actual).getEncryptRuleConfiguration(), instanceOf(EncryptRuleConfiguration.class));\n+    }\n+    \n+    @Test\n+    public void assertCreateAddedEventWithShardingRuleConfigurationForNewSchema() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/sharding_db/rule\", SHARDING_RULE_YAML, ChangedType.UPDATED);\n+        ShardingOrchestrationEvent actual = schemaChangedListener.createShardingOrchestrationEvent(dataChangedEvent);", "originalCommit": "e685e32b66f563da19908b3b6154958a272f7567", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU0NzEzOQ==", "url": "https://github.com/apache/shardingsphere/pull/4511#discussion_r385547139", "bodyText": "same problem as above", "author": "menghaoranss", "createdAt": "2020-02-28T07:40:16Z", "path": "sharding-orchestration/sharding-orchestration-core/src/test/java/org/apache/shardingsphere/orchestration/internal/registry/config/listener/SchemaChangedListenerTest.java", "diffHunk": "@@ -170,4 +170,42 @@ public void assertCreateSchemaDeletedEventForNewSchema() {\n         assertThat(actual, instanceOf(SchemaDeletedEvent.class));\n         assertThat(((SchemaDeletedEvent) actual).getShardingSchemaName(), is(\"logic_db\"));\n     }\n+    \n+    @Test\n+    public void assertCreateWithInvalidNodeChangedEvent() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/logic_db\", DATA_SOURCE_YAML, ChangedType.DELETED);\n+        ShardingOrchestrationEvent actual = schemaChangedListener.createShardingOrchestrationEvent(dataChangedEvent);\n+        assertThat(actual, instanceOf(IgnoredShardingOrchestrationEvent.class));\n+    }\n+    \n+    @Test\n+    public void assertCreateWithNullShardingSchemaName() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/datasource\", DATA_SOURCE_YAML, ChangedType.DELETED);\n+        ShardingOrchestrationEvent actual = schemaChangedListener.createShardingOrchestrationEvent(dataChangedEvent);\n+        assertThat(actual, instanceOf(IgnoredShardingOrchestrationEvent.class));\n+    }\n+    \n+    @Test\n+    public void assertCreateAddedEventWithEncryptRuleConfigurationForNewSchema() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/encrypt_db/rule\", ENCRYPT_RULE_YAML, ChangedType.UPDATED);\n+        ShardingOrchestrationEvent actual = schemaChangedListener.createShardingOrchestrationEvent(dataChangedEvent);\n+        assertThat(actual, instanceOf(EncryptRuleChangedEvent.class));\n+        assertThat(((EncryptRuleChangedEvent) actual).getEncryptRuleConfiguration(), instanceOf(EncryptRuleConfiguration.class));\n+    }\n+    \n+    @Test\n+    public void assertCreateAddedEventWithShardingRuleConfigurationForNewSchema() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/sharding_db/rule\", SHARDING_RULE_YAML, ChangedType.UPDATED);\n+        ShardingOrchestrationEvent actual = schemaChangedListener.createShardingOrchestrationEvent(dataChangedEvent);\n+        assertThat(actual, instanceOf(ShardingRuleChangedEvent.class));\n+        assertThat(((ShardingRuleChangedEvent) actual).getShardingRuleConfiguration(), instanceOf(ShardingRuleConfiguration.class));\n+    }\n+    \n+    @Test\n+    public void assertCreateAddedEventWithMasterSlaveRuleConfigurationForNewSchema() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/masterslave_db/rule\", MASTER_SLAVE_RULE_YAML, ChangedType.UPDATED);\n+        ShardingOrchestrationEvent actual = schemaChangedListener.createShardingOrchestrationEvent(dataChangedEvent);", "originalCommit": "e685e32b66f563da19908b3b6154958a272f7567", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "46a15b2b26b9b348c0fa926492b14f30a75c91b8", "url": "https://github.com/apache/shardingsphere/commit/46a15b2b26b9b348c0fa926492b14f30a75c91b8", "message": "fixed ut", "committedDate": "2020-02-29T05:12:39Z", "type": "commit"}, {"oid": "fe37948e0666cabd56ea12f74b7c132c3487f523", "url": "https://github.com/apache/shardingsphere/commit/fe37948e0666cabd56ea12f74b7c132c3487f523", "message": "Merge https://github.com/apache/incubator-shardingsphere into amster", "committedDate": "2020-02-29T05:15:26Z", "type": "commit"}]}