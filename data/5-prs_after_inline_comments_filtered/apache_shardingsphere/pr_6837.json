{"pr_number": 6837, "pr_title": "fix rewrite for subquery", "pr_createdAt": "2020-08-14T07:28:21Z", "pr_url": "https://github.com/apache/shardingsphere/pull/6837", "timeline": [{"oid": "1471c57d33df6f518990188847c7425748d85271", "url": "https://github.com/apache/shardingsphere/commit/1471c57d33df6f518990188847c7425748d85271", "message": "fix rewrite for subquery", "committedDate": "2020-08-14T07:15:22Z", "type": "commit"}, {"oid": "746299ceffe4e81a60efcbb1d910a9634ef12d47", "url": "https://github.com/apache/shardingsphere/commit/746299ceffe4e81a60efcbb1d910a9634ef12d47", "message": "fix", "committedDate": "2020-08-14T09:09:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzMzM3Mg==", "url": "https://github.com/apache/shardingsphere/pull/6837#discussion_r470933372", "bodyText": "What's the difference between TableExtractUtils.getRealTableFromSelect(getSqlStatement()); and TableExtractUtils.getTableFromSelect(getSqlStatement());?\nBesides, can we consider another function name full of description  for getRealTableFromSelect ?", "author": "tristaZero", "createdAt": "2020-08-15T03:50:47Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/statement/dml/SelectStatementContext.java", "diffHunk": "@@ -194,68 +178,7 @@ public boolean isSameGroupByAndOrderByItems() {\n     \n     @Override\n     public Collection<SimpleTableSegment> getAllTables() {\n-        return getTableFromSelect(getSqlStatement());\n-    }\n-    \n-    private Collection<SimpleTableSegment> getAllTablesFromWhere(final WhereSegment where, final Collection<TableSegment> tableSegments) {\n-        Collection<SimpleTableSegment> result = new LinkedList<>();\n-        for (AndPredicate each : where.getAndPredicates()) {\n-            for (PredicateSegment predicate : each.getPredicates()) {\n-                result.addAll(new PredicateExtractor(tableSegments, predicate).extractTables());\n-            }\n-        }\n-        return result;\n-    }\n-    \n-    private Collection<SimpleTableSegment> getAllTablesFromProjections(final ProjectionsSegment projections, final Collection<TableSegment> tableSegments) {\n-        Collection<SimpleTableSegment> result = new LinkedList<>();\n-        for (ProjectionSegment each : projections.getProjections()) {\n-            Optional<SimpleTableSegment> table = getTableSegment(each, tableSegments);\n-            table.ifPresent(result::add);\n-        }\n-        return result;\n-    }\n-    \n-    private Optional<SimpleTableSegment> getTableSegment(final ProjectionSegment each, final Collection<TableSegment> tableSegments) {\n-        Optional<OwnerSegment> owner = getTableOwner(each);\n-        if (owner.isPresent() && isTable(owner.get(), tableSegments)) {\n-            return Optional .of(new SimpleTableSegment(owner.get().getStartIndex(), owner.get().getStopIndex(), owner.get().getIdentifier()));\n-        }\n-        return Optional.empty();\n-    }\n-    \n-    private Optional<OwnerSegment> getTableOwner(final ProjectionSegment each) {\n-        if (each instanceof OwnerAvailable) {\n-            return ((OwnerAvailable) each).getOwner();\n-        }\n-        if (each instanceof ColumnProjectionSegment) {\n-            return ((ColumnProjectionSegment) each).getColumn().getOwner();\n-        }\n-        return Optional.empty();\n-    }\n-    \n-    private Collection<SimpleTableSegment> getAllTablesFromOrderByItems(final Collection<OrderByItemSegment> orderByItems, final Collection<TableSegment> tableSegments) {\n-        Collection<SimpleTableSegment> result = new LinkedList<>();\n-        for (OrderByItemSegment each : orderByItems) {\n-            if (each instanceof ColumnOrderByItemSegment) {\n-                Optional<OwnerSegment> owner = ((ColumnOrderByItemSegment) each).getColumn().getOwner();\n-                if (owner.isPresent() && isTable(owner.get(), tableSegments)) {\n-                    Preconditions.checkState(((ColumnOrderByItemSegment) each).getColumn().getOwner().isPresent());\n-                    OwnerSegment segment = ((ColumnOrderByItemSegment) each).getColumn().getOwner().get();\n-                    result.add(new SimpleTableSegment(segment.getStartIndex(), segment.getStopIndex(), segment.getIdentifier()));\n-                }\n-            }\n-        }\n-        return result;\n-    }\n-    \n-    private boolean isTable(final OwnerSegment owner, final Collection<TableSegment> tables) {\n-        for (TableSegment each : tables) {\n-            if (owner.getIdentifier().getValue().equals(each.getAlias().orElse(null))) {\n-                return false;\n-            }\n-        }\n-        return true;\n+        return TableExtractUtils.getTableFromSelect(getSqlStatement());", "originalCommit": "746299ceffe4e81a60efcbb1d910a9634ef12d47", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "74c3d367631e030578e8587464ab873c8dea959c", "url": "https://github.com/apache/shardingsphere/commit/74c3d367631e030578e8587464ab873c8dea959c", "message": "check function name", "committedDate": "2020-08-18T02:36:20Z", "type": "commit"}, {"oid": "dd5c293216a70f6b372cee425828a028b3ca269d", "url": "https://github.com/apache/shardingsphere/commit/dd5c293216a70f6b372cee425828a028b3ca269d", "message": "fix", "committedDate": "2020-08-18T10:27:57Z", "type": "commit"}, {"oid": "95cfa790df3a893f10fcc2300fa2eda5ee58cfe3", "url": "https://github.com/apache/shardingsphere/commit/95cfa790df3a893f10fcc2300fa2eda5ee58cfe3", "message": "rename func name", "committedDate": "2020-08-19T06:40:10Z", "type": "commit"}]}