{"pr_number": 5020, "pr_title": "add support for test of Join Table", "pr_createdAt": "2020-03-31T08:38:07Z", "pr_url": "https://github.com/apache/shardingsphere/pull/5020", "timeline": [{"oid": "1b0fed82ae7c0ae5c8e7ca4a3c8800d624d2a694", "url": "https://github.com/apache/shardingsphere/commit/1b0fed82ae7c0ae5c8e7ca4a3c8800d624d2a694", "message": "add support for test of Join Table", "committedDate": "2020-03-31T08:21:34Z", "type": "commit"}, {"oid": "05fee8c2c6f8d6c68834421c631116fc9d474d57", "url": "https://github.com/apache/shardingsphere/commit/05fee8c2c6f8d6c68834421c631116fc9d474d57", "message": "fix comment", "committedDate": "2020-03-31T08:32:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc3NjUxMg==", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r400776512", "bodyText": "Please check with other javadoc and make the format consist", "author": "terrymanu", "createdAt": "2020-03-31T09:39:42Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/segment/TableReferencesAssert.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.integrate.asserts.segment;\n+\n+import lombok.AccessLevel;\n+import lombok.NoArgsConstructor;\n+import org.apache.shardingsphere.sql.parser.integrate.asserts.SQLCaseAssertContext;\n+import org.apache.shardingsphere.sql.parser.integrate.asserts.segment.table.JoinTableAssert;\n+import org.apache.shardingsphere.sql.parser.integrate.asserts.segment.table.TableFactorAssert;\n+import org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.impl.ExpectedTableReference;\n+import org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.impl.table.ExpectedJoinTable;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.JoinedTableSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.TableReferenceSegment;\n+\n+import java.util.List;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+/**\n+ * TableReferences assert.\n+ */\n+@NoArgsConstructor(access = AccessLevel.PRIVATE)\n+public final class TableReferencesAssert {\n+    \n+    /**\n+     * Assert actual TableReferences segments is correct with expected TableReferences.\n+     *\n+     * @param assertContext assert context\n+     * @param actual        actual TableReferences", "originalCommit": "05fee8c2c6f8d6c68834421c631116fc9d474d57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc4Nzg3NA==", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r400787874", "bodyText": "ok", "author": "jingshanglu", "createdAt": "2020-03-31T09:57:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc3NjUxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc3Njc1OA==", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r400776758", "bodyText": "Please remove useless empty line", "author": "terrymanu", "createdAt": "2020-03-31T09:40:07Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/segment/TableReferencesAssert.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.integrate.asserts.segment;\n+\n+import lombok.AccessLevel;\n+import lombok.NoArgsConstructor;\n+import org.apache.shardingsphere.sql.parser.integrate.asserts.SQLCaseAssertContext;\n+import org.apache.shardingsphere.sql.parser.integrate.asserts.segment.table.JoinTableAssert;\n+import org.apache.shardingsphere.sql.parser.integrate.asserts.segment.table.TableFactorAssert;\n+import org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.impl.ExpectedTableReference;\n+import org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.impl.table.ExpectedJoinTable;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.JoinedTableSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.TableReferenceSegment;\n+\n+import java.util.List;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+/**\n+ * TableReferences assert.\n+ */\n+@NoArgsConstructor(access = AccessLevel.PRIVATE)\n+public final class TableReferencesAssert {\n+    \n+    /**\n+     * Assert actual TableReferences segments is correct with expected TableReferences.\n+     *\n+     * @param assertContext assert context\n+     * @param actual        actual TableReferences\n+     * @param expected      expected TableReferences\n+     */\n+    public static void assertIs(final SQLCaseAssertContext assertContext, final List<TableReferenceSegment> actual, final List<ExpectedTableReference> expected) {\n+        assertThat(assertContext.getText(\"TableReferences assert error\"), actual.size(), is(expected.size()));\n+        ", "originalCommit": "05fee8c2c6f8d6c68834421c631116fc9d474d57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9034be67c34603815ddc1017a557202600d7009e", "url": "https://github.com/apache/shardingsphere/commit/9034be67c34603815ddc1017a557202600d7009e", "message": "format code", "committedDate": "2020-03-31T09:57:07Z", "type": "commit"}, {"oid": "ebbe2c928eb2a93640a8a70549a0b7831915db03", "url": "https://github.com/apache/shardingsphere/commit/ebbe2c928eb2a93640a8a70549a0b7831915db03", "message": "fix", "committedDate": "2020-03-31T12:03:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMyNjcxOA==", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r401326718", "bodyText": "It seems you forgot this one.", "author": "tristaZero", "createdAt": "2020-04-01T02:51:38Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/segment/table/TableFactorAssert.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.integrate.asserts.segment.table;\n+\n+import lombok.AccessLevel;\n+import lombok.NoArgsConstructor;\n+import org.apache.shardingsphere.sql.parser.integrate.asserts.SQLCaseAssertContext;\n+import org.apache.shardingsphere.sql.parser.integrate.asserts.segment.TableReferencesAssert;\n+import org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.impl.ExpectedTableReference;\n+import org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.impl.table.ExpectedTableFactor;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.TableFactorSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.TableReferenceSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.generic.table.SimpleTableSegment;\n+\n+import java.util.List;\n+\n+/**\n+ * TableFactor assert.\n+ */\n+@NoArgsConstructor(access = AccessLevel.PRIVATE)\n+public final class TableFactorAssert {\n+    \n+    /**\n+     * Assert actual TableFactor segments is correct with expected TableFactor.\n+     *\n+     * @param assertContext assert context\n+     * @param actual actual TableFactor", "originalCommit": "ebbe2c928eb2a93640a8a70549a0b7831915db03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMzMjExNw==", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r401332117", "bodyText": "The same to other javadoc,the empty line?", "author": "jingshanglu", "createdAt": "2020-04-01T03:13:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMyNjcxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM3OTUzOQ==", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r401379539", "bodyText": "Sorry, my mistake", "author": "tristaZero", "createdAt": "2020-04-01T06:19:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMyNjcxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4MzQ3MA==", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r401383470", "bodyText": "Why are they not ExpectedPredicate and ExpectedColumn?", "author": "tristaZero", "createdAt": "2020-04-01T06:30:25Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/jaxb/domain/segment/impl/ExpectedJoinSpecification.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.impl;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.AbstractExpectedDelimiterSQLSegment;\n+\n+import javax.xml.bind.annotation.XmlAttribute;\n+\n+/**\n+ * Expected JoinSpecification.\n+ */\n+@Getter\n+@Setter\n+public final class ExpectedJoinSpecification extends AbstractExpectedDelimiterSQLSegment {\n+    \n+    @XmlAttribute\n+    private String expr;", "originalCommit": "ebbe2c928eb2a93640a8a70549a0b7831915db03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE0NDU3OA==", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r402144578", "bodyText": "Fix them later?", "author": "tristaZero", "createdAt": "2020-04-02T08:38:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4MzQ3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4NDMwMQ==", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r401384301", "bodyText": "It will be filled with content later, right?", "author": "tristaZero", "createdAt": "2020-04-01T06:32:40Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/segment/JoinSpecificationAssert.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.integrate.asserts.segment;\n+\n+import lombok.AccessLevel;\n+import lombok.NoArgsConstructor;\n+import org.apache.shardingsphere.sql.parser.integrate.asserts.SQLCaseAssertContext;\n+import org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.impl.ExpectedJoinSpecification;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.JoinSpecificationSegment;\n+\n+/**\n+ * JoinSpecification assert.\n+ */\n+@NoArgsConstructor(access = AccessLevel.PRIVATE)\n+public final class JoinSpecificationAssert {\n+    \n+    /**\n+     * Assert actual JoinSpecification segments is correct with expected JoinSpecification.\n+     *\n+     * @param assertContext assert context\n+     * @param actual actual JoinSpecification\n+     * @param expected expected JoinSpecification\n+     */\n+    public static void assertIs(final SQLCaseAssertContext assertContext, final JoinSpecificationSegment actual, final ExpectedJoinSpecification expected) {\n+    }", "originalCommit": "ebbe2c928eb2a93640a8a70549a0b7831915db03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMzYwMQ==", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r401523601", "bodyText": "yes", "author": "jingshanglu", "createdAt": "2020-04-01T10:46:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4NDMwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4NjEyOQ==", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r401386129", "bodyText": "Do you think a collection of expectedColumn is needed?", "author": "tristaZero", "createdAt": "2020-04-01T06:37:26Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/jaxb/domain/segment/impl/table/ExpectedTableFactor.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.impl.table;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.AbstractExpectedDelimiterSQLSegment;\n+import org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.impl.ExpectedTableReference;\n+import org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.impl.expr.simple.ExpectedSubquery;\n+\n+import javax.xml.bind.annotation.XmlElement;\n+import java.util.Collection;\n+\n+/**\n+ * Expected TableFactor.\n+ */\n+@Getter\n+@Setter\n+public final class ExpectedTableFactor extends AbstractExpectedDelimiterSQLSegment {\n+    \n+    @XmlElement\n+    private ExpectedSimpleTable table;\n+    \n+    @XmlElement\n+    private ExpectedSubquery subquery;\n+    ", "originalCommit": "ebbe2c928eb2a93640a8a70549a0b7831915db03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyODIxNw==", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r401528217", "bodyText": "Add it later.", "author": "jingshanglu", "createdAt": "2020-04-01T10:55:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4NjEyOQ=="}], "type": "inlineReview"}, {"oid": "25e508b3c0675f8c08746e279d7af7e3121dbea0", "url": "https://github.com/apache/shardingsphere/commit/25e508b3c0675f8c08746e279d7af7e3121dbea0", "message": "fix", "committedDate": "2020-04-01T10:43:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUzNjQxNQ==", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r401536415", "bodyText": "Please remove them", "author": "tristaZero", "createdAt": "2020-04-01T11:11:49Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/engine/SQLParserParameterizedTest.java", "diffHunk": "@@ -133,6 +133,9 @@ private static boolean isPlaceholderWithoutParameter(final Object[] sqlTestParam\n     \n     @Test\n     public void assertSupportedSQL() {\n+        if (\"select_sharding_route_with_broadcast_table\".equals(sqlCaseId) && \"MySQL\".equals(databaseType)) {", "originalCommit": "25e508b3c0675f8c08746e279d7af7e3121dbea0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0MDYxMQ==", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r401540611", "bodyText": "What's the difference?", "author": "tristaZero", "createdAt": "2020-04-01T11:19:55Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/segment/dml/JoinedTableSegment.java", "diffHunk": "@@ -39,12 +41,26 @@\n      * get table.\n      * @return tableSegment.\n      */\n-    public TableSegment getTable() {\n-        if (null != tableFactor.getTable()) {\n-            if (tableFactor.getTable() instanceof SimpleTableSegment) {\n-                return tableFactor.getTable();\n-            }\n+    public Collection<SimpleTableSegment> getSimpleTableSegments() {\n+        Collection<SimpleTableSegment> tables = new LinkedList<>();\n+        if (null != tableFactor) {\n+            tables.addAll(tableFactor.getSimpleTableSegments());\n+        }\n+        if (null != joinSpecification) {\n+            tables.addAll(joinSpecification.getSimpleTableSegments());\n+        }\n+        return tables;\n+    }\n+    \n+    /**\n+     * get tables.\n+     * @return tables.\n+     */\n+    public Collection<SimpleTableSegment> getTables() {\n+        Collection<SimpleTableSegment> tables = new LinkedList<>();\n+        if (null != tableFactor) {\n+            tables.addAll(tableFactor.getTables());\n         }\n-        return null;\n+        return tables;", "originalCommit": "25e508b3c0675f8c08746e279d7af7e3121dbea0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0NDg4NA==", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r401544884", "bodyText": "getTables has no duplicate table.", "author": "jingshanglu", "createdAt": "2020-04-01T11:28:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0MDYxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0MTA4Mw==", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r401541083", "bodyText": "What is the difference?", "author": "tristaZero", "createdAt": "2020-04-01T11:20:50Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/segment/dml/TableFactorSegment.java", "diffHunk": "@@ -39,4 +40,38 @@\n     private final Collection<ColumnSegment> columns = new LinkedList<>();\n     \n     private Collection<TableReferenceSegment> tableReferences = new LinkedList<>();\n+    \n+    /**\n+     * get tables.\n+     * @return tables.\n+     */\n+    public Collection<SimpleTableSegment> getSimpleTableSegments() {\n+        Collection<SimpleTableSegment> tables = new LinkedList<>();\n+        if (null != table && table instanceof SimpleTableSegment) {\n+            tables.add((SimpleTableSegment) table);\n+        }\n+        if (null != tableReferences && !tableReferences.isEmpty()) {\n+            for (TableReferenceSegment each: tableReferences) {\n+                tables.addAll(each.getSimpleTableSegments());\n+            }\n+        }\n+        return tables;\n+    }\n+    \n+    /**\n+     * get tables.\n+     * @return tables.\n+     */\n+    public Collection<SimpleTableSegment> getTables() {\n+        Collection<SimpleTableSegment> tables = new LinkedList<>();\n+        if (null != table && table instanceof SimpleTableSegment) {\n+            tables.add((SimpleTableSegment) table);", "originalCommit": "25e508b3c0675f8c08746e279d7af7e3121dbea0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0NTI1MQ==", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r401545251", "bodyText": "getTables has no duplicate table.", "author": "jingshanglu", "createdAt": "2020-04-01T11:28:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0MTA4Mw=="}], "type": "inlineReview"}, {"oid": "a378a320e98b45b1471c3d421b63ea352dc1f311", "url": "https://github.com/apache/shardingsphere/commit/a378a320e98b45b1471c3d421b63ea352dc1f311", "message": "fix", "committedDate": "2020-04-01T11:26:30Z", "type": "commit"}, {"oid": "f3825a898f0cd680ff13950bfd2bccb8bb563bf4", "url": "https://github.com/apache/shardingsphere/commit/f3825a898f0cd680ff13950bfd2bccb8bb563bf4", "message": "replace table assert with tableReference assert", "committedDate": "2020-04-02T06:00:26Z", "type": "commit"}, {"oid": "c244e2aad42877fcb8d7e6346adfd0149cb7b1c4", "url": "https://github.com/apache/shardingsphere/commit/c244e2aad42877fcb8d7e6346adfd0149cb7b1c4", "message": "delete getSimpleTables", "committedDate": "2020-04-02T06:14:56Z", "type": "commit"}, {"oid": "d493338c6093a04161f14a502e107640c69b43fb", "url": "https://github.com/apache/shardingsphere/commit/d493338c6093a04161f14a502e107640c69b43fb", "message": "fix", "committedDate": "2020-04-02T06:20:37Z", "type": "commit"}, {"oid": "823345cda23eecdaee36671e8c24a8000d19a803", "url": "https://github.com/apache/shardingsphere/commit/823345cda23eecdaee36671e8c24a8000d19a803", "message": "fix", "committedDate": "2020-04-02T06:29:02Z", "type": "commit"}, {"oid": "04b2d347735abd1d094a7d278936fcf6d9f9748f", "url": "https://github.com/apache/shardingsphere/commit/04b2d347735abd1d094a7d278936fcf6d9f9748f", "message": "fix", "committedDate": "2020-04-02T06:43:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzNjQ4MQ==", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r402136481", "bodyText": "I suggest you rename it as getSimpleTableSegment();", "author": "tristaZero", "createdAt": "2020-04-02T08:25:08Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/segment/dml/JoinedTableSegment.java", "diffHunk": "@@ -39,12 +41,14 @@\n      * get table.\n      * @return tableSegment.\n      */\n-    public TableSegment getTable() {\n-        if (null != tableFactor.getTable()) {\n-            if (tableFactor.getTable() instanceof SimpleTableSegment) {\n-                return tableFactor.getTable();\n-            }\n+    public Collection<SimpleTableSegment> getTables() {", "originalCommit": "04b2d347735abd1d094a7d278936fcf6d9f9748f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzNzU1OA==", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r402137558", "bodyText": "Why do not you remove this one?", "author": "tristaZero", "createdAt": "2020-04-02T08:27:00Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/statement/dml/impl/SelectStatementAssert.java", "diffHunk": "@@ -52,11 +55,16 @@\n      */\n     public static void assertIs(final SQLCaseAssertContext assertContext, final SelectStatement actual, final SelectStatementTestCase expected) {\n         assertProjection(assertContext, actual, expected);\n-        assertTable(assertContext, actual, expected);\n+//        assertTable(assertContext, actual, expected);", "originalCommit": "04b2d347735abd1d094a7d278936fcf6d9f9748f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE0NzI1NQ==", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r402147255", "bodyText": "I suggest you rename it as getSimpleTableSegment();", "author": "tristaZero", "createdAt": "2020-04-02T08:42:42Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/segment/dml/TableFactorSegment.java", "diffHunk": "@@ -39,4 +40,21 @@\n     private final Collection<ColumnSegment> columns = new LinkedList<>();\n     \n     private Collection<TableReferenceSegment> tableReferences = new LinkedList<>();\n+    \n+    /**\n+     * get tables.\n+     * @return tables.\n+     */\n+    public Collection<SimpleTableSegment> getTables() {", "originalCommit": "04b2d347735abd1d094a7d278936fcf6d9f9748f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3386620b054b5c12d23272fdcbf78854839f15b3", "url": "https://github.com/apache/shardingsphere/commit/3386620b054b5c12d23272fdcbf78854839f15b3", "message": "rename getTables to getSimpleTableSegments", "committedDate": "2020-04-02T08:59:20Z", "type": "commit"}, {"oid": "207562503a039cecad112425a122ece89ef6c42e", "url": "https://github.com/apache/shardingsphere/commit/207562503a039cecad112425a122ece89ef6c42e", "message": "fix for fun name", "committedDate": "2020-04-02T09:30:10Z", "type": "commit"}, {"oid": "2eb083be83ff4e1091b61489a4a41b0becc1ab8e", "url": "https://github.com/apache/shardingsphere/commit/2eb083be83ff4e1091b61489a4a41b0becc1ab8e", "message": "delete <tables>", "committedDate": "2020-04-02T09:35:37Z", "type": "commit"}, {"oid": "6b0d361ac4e944837d59c4573410c32fb25669b1", "url": "https://github.com/apache/shardingsphere/commit/6b0d361ac4e944837d59c4573410c32fb25669b1", "message": "delete some comment", "committedDate": "2020-04-02T09:40:46Z", "type": "commit"}]}