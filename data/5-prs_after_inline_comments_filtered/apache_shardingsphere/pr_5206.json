{"pr_number": 5206, "pr_title": "Simplify the SelectStatement", "pr_createdAt": "2020-04-16T06:19:59Z", "pr_url": "https://github.com/apache/shardingsphere/pull/5206", "timeline": [{"oid": "9cd748e13299d9b717412d79ed405e2e484f96c3", "url": "https://github.com/apache/shardingsphere/commit/9cd748e13299d9b717412d79ed405e2e484f96c3", "message": "Simplify the SelectStatement", "committedDate": "2020-04-16T06:15:13Z", "type": "commit"}, {"oid": "9f25b9c683f7453d34714194efc94981b977f8cf", "url": "https://github.com/apache/shardingsphere/commit/9f25b9c683f7453d34714194efc94981b977f8cf", "message": "delete useless import", "committedDate": "2020-04-16T06:50:59Z", "type": "commit"}, {"oid": "554ed20352ad512da0ed023fca7753a14fd20d59", "url": "https://github.com/apache/shardingsphere/commit/554ed20352ad512da0ed023fca7753a14fd20d59", "message": "fix", "committedDate": "2020-04-16T08:28:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA0OTI1Ng==", "url": "https://github.com/apache/shardingsphere/pull/5206#discussion_r410049256", "bodyText": "getSimpleTableSegments((SelectStatement) sqlStatement)", "author": "tristaZero", "createdAt": "2020-04-17T07:44:53Z", "path": "encrypt-core/encrypt-core-rewrite/src/main/java/org/apache/shardingsphere/encrypt/rewrite/token/generator/impl/EncryptProjectionTokenGenerator.java", "diffHunk": "@@ -51,14 +53,15 @@\n     \n     @Override\n     protected boolean isGenerateSQLTokenForEncrypt(final SQLStatementContext sqlStatementContext) {\n-        return sqlStatementContext instanceof SelectStatementContext && !((SelectStatementContext) sqlStatementContext).getSqlStatement().getSimpleTableSegments().isEmpty();\n+        SQLStatement sqlStatement = sqlStatementContext.getSqlStatement();\n+        return sqlStatementContext instanceof SelectStatementContext && !((SelectStatementContext) sqlStatementContext).getSimpleTableSegments((SelectStatement) sqlStatement).isEmpty();", "originalCommit": "554ed20352ad512da0ed023fca7753a14fd20d59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA1ODk2OQ==", "url": "https://github.com/apache/shardingsphere/pull/5206#discussion_r410058969", "bodyText": "What do you mean? @tristaZero", "author": "jingshanglu", "createdAt": "2020-04-17T08:04:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA0OTI1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA0OTcwMg==", "url": "https://github.com/apache/shardingsphere/pull/5206#discussion_r410049702", "bodyText": "getTables(final ASTNode astNode)", "author": "tristaZero", "createdAt": "2020-04-17T07:45:44Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/statement/dml/SelectStatementContext.java", "diffHunk": "@@ -262,8 +268,86 @@ private boolean isTable(final OwnerSegment owner, final Collection<SimpleTableSe\n         return true;\n     }\n     \n+    private boolean isTable(final SimpleTableSegment owner, final Collection<SimpleTableSegment> tableSegments) {\n+        for (SimpleTableSegment each : tableSegments) {\n+            String tableName = owner.getTableName().getIdentifier().getValue();\n+            if (tableName.equals(each.getAlias().orElse(null)) && !tableName.equals(each.getTableName().getIdentifier().getValue())) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+    \n     @Override\n     public Optional<WhereSegment> getWhere() {\n         return getSqlStatement().getWhere();\n     }\n+    \n+    /**\n+     * get tables.\n+     *\n+     * @param selectStatement SelectStatement.\n+     *\n+     * @return tables.\n+     */\n+    public Collection<SimpleTableSegment> getSimpleTableSegments(final SelectStatement selectStatement) {\n+        Collection<SimpleTableSegment> result = getTables(selectStatement);\n+        Collection<SimpleTableSegment> tables = new LinkedList<>();\n+        for (SimpleTableSegment each : result) {\n+            if (isTable(each, result)) {\n+                tables.add(each);\n+            }\n+        }\n+        return tables;\n+    }\n+    \n+    private Collection<SimpleTableSegment> getTables(final ASTNode astNode) {", "originalCommit": "554ed20352ad512da0ed023fca7753a14fd20d59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA1OTE1OQ==", "url": "https://github.com/apache/shardingsphere/pull/5206#discussion_r410059159", "bodyText": "What do you mean? @tristaZero", "author": "jingshanglu", "createdAt": "2020-04-17T08:04:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA0OTcwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA3MDI3MQ==", "url": "https://github.com/apache/shardingsphere/pull/5206#discussion_r410070271", "bodyText": "createProjectionsContext(sql, this, groupByContext, orderByContext);", "author": "tristaZero", "createdAt": "2020-04-17T08:25:43Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/statement/dml/SelectStatementContext.java", "diffHunk": "@@ -93,10 +99,10 @@ public SelectStatementContext(final SelectStatement sqlStatement, final GroupByC\n     \n     public SelectStatementContext(final SchemaMetaData schemaMetaData, final String sql, final List<Object> parameters, final SelectStatement sqlStatement) {\n         super(sqlStatement);\n-        tablesContext = new TablesContext(sqlStatement.getSimpleTableSegments());\n+        tablesContext = new TablesContext(getSimpleTableSegments(sqlStatement));\n         groupByContext = new GroupByContextEngine().createGroupByContext(sqlStatement);\n         orderByContext = new OrderByContextEngine().createOrderBy(sqlStatement, groupByContext);\n-        projectionsContext = new ProjectionsContextEngine(schemaMetaData).createProjectionsContext(sql, sqlStatement, groupByContext, orderByContext);\n+        projectionsContext = new ProjectionsContextEngine(schemaMetaData).createProjectionsContext(sql, this, groupByContext, orderByContext);", "originalCommit": "554ed20352ad512da0ed023fca7753a14fd20d59", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "eabf06461ac4e2001602be6a352dfcdfe613a5f1", "url": "https://github.com/apache/shardingsphere/commit/eabf06461ac4e2001602be6a352dfcdfe613a5f1", "message": "organize the code", "committedDate": "2020-04-17T10:27:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE1MzU3Ng==", "url": "https://github.com/apache/shardingsphere/pull/5206#discussion_r410153576", "bodyText": "Not used?", "author": "tristaZero", "createdAt": "2020-04-17T11:08:07Z", "path": "encrypt-core/encrypt-core-rewrite/src/main/java/org/apache/shardingsphere/encrypt/rewrite/token/generator/impl/EncryptProjectionTokenGenerator.java", "diffHunk": "@@ -51,14 +52,15 @@\n     \n     @Override\n     protected boolean isGenerateSQLTokenForEncrypt(final SQLStatementContext sqlStatementContext) {\n-        return sqlStatementContext instanceof SelectStatementContext && !((SelectStatementContext) sqlStatementContext).getSqlStatement().getSimpleTableSegments().isEmpty();\n+        SQLStatement sqlStatement = sqlStatementContext.getSqlStatement();", "originalCommit": "eabf06461ac4e2001602be6a352dfcdfe613a5f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE1Mzc4NA==", "url": "https://github.com/apache/shardingsphere/pull/5206#discussion_r410153784", "bodyText": "Please remove them.", "author": "tristaZero", "createdAt": "2020-04-17T11:08:37Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/segment/select/projection/engine/ProjectionsContextEngine.java", "diffHunk": "@@ -58,17 +57,20 @@ public ProjectionsContextEngine(final SchemaMetaData schemaMetaData) {\n      * Create projections context.\n      *\n      * @param sql SQL\n-     * @param selectStatement SQL statement\n+     * @param tables tables\n+     * @param projectionsSegment projection Segments\n      * @param groupByContext group by context\n      * @param orderByContext order by context\n      * @return projections context\n      */\n-    public ProjectionsContext createProjectionsContext(final String sql, final SelectStatement selectStatement, final GroupByContext groupByContext, final OrderByContext orderByContext) {\n-        ProjectionsSegment projectionsSegment = selectStatement.getProjections();\n-        Collection<Projection> projections = getProjections(sql, selectStatement.getSimpleTableSegments(), projectionsSegment);\n+    public ProjectionsContext createProjectionsContext(final String sql, final Collection<SimpleTableSegment> tables, final ProjectionsSegment projectionsSegment,\n+                                                       final GroupByContext groupByContext, final OrderByContext orderByContext) {\n+//        SelectStatement selectStatement = context.getSqlStatement();", "originalCommit": "eabf06461ac4e2001602be6a352dfcdfe613a5f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE1NDgzMA==", "url": "https://github.com/apache/shardingsphere/pull/5206#discussion_r410154830", "bodyText": "Please exchange two of these names, since result is expected to return.", "author": "tristaZero", "createdAt": "2020-04-17T11:11:12Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/statement/dml/SelectStatementContext.java", "diffHunk": "@@ -262,8 +267,97 @@ private boolean isTable(final OwnerSegment owner, final Collection<SimpleTableSe\n         return true;\n     }\n     \n+    private boolean isTable(final SimpleTableSegment owner, final Collection<SimpleTableSegment> tableSegments) {\n+        for (SimpleTableSegment each : tableSegments) {\n+            String tableName = owner.getTableName().getIdentifier().getValue();\n+            if (tableName.equals(each.getAlias().orElse(null)) && !tableName.equals(each.getTableName().getIdentifier().getValue())) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+    \n     @Override\n     public Optional<WhereSegment> getWhere() {\n         return getSqlStatement().getWhere();\n     }\n+    \n+    /**\n+     * get tables.\n+     * @return tables.\n+     */\n+    public Collection<SimpleTableSegment> getSimpleTableSegments() {\n+        Collection<SimpleTableSegment> result = getTables();\n+        Collection<SimpleTableSegment> tables = new LinkedList<>();", "originalCommit": "eabf06461ac4e2001602be6a352dfcdfe613a5f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e194b4f15ff174d57f9900f61d4a51fa52389b4a", "url": "https://github.com/apache/shardingsphere/commit/e194b4f15ff174d57f9900f61d4a51fa52389b4a", "message": "organize the code", "committedDate": "2020-04-17T11:48:54Z", "type": "commit"}, {"oid": "28c00e2878122f0f568276d9d76deb90218a9deb", "url": "https://github.com/apache/shardingsphere/commit/28c00e2878122f0f568276d9d76deb90218a9deb", "message": "delete unused import", "committedDate": "2020-04-17T12:31:41Z", "type": "commit"}]}