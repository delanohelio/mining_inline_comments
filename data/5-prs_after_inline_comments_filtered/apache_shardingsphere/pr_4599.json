{"pr_number": 4599, "pr_title": "add unit tests for zookeeper orchestration center", "pr_createdAt": "2020-03-04T11:57:48Z", "pr_url": "https://github.com/apache/shardingsphere/pull/4599", "timeline": [{"oid": "76a62a4217663cbfac43d5d5094a1792b4084305", "url": "https://github.com/apache/shardingsphere/commit/76a62a4217663cbfac43d5d5094a1792b4084305", "message": "add unit tests for zk", "committedDate": "2020-03-04T11:25:26Z", "type": "commit"}, {"oid": "9b5bd4db783c649e5a397b50a61b2136fa5a4fa2", "url": "https://github.com/apache/shardingsphere/commit/9b5bd4db783c649e5a397b50a61b2136fa5a4fa2", "message": "Merge remote-tracking branch 'origin/master' into zookeeper-ut", "committedDate": "2020-03-04T11:26:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc2Njg2Mg==", "url": "https://github.com/apache/shardingsphere/pull/4599#discussion_r387766862", "bodyText": "Please add final if the class is not for extend", "author": "terrymanu", "createdAt": "2020-03-04T16:04:28Z", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-zookeeper-curator/src/test/java/org/apache/shardingsphere/orchestration/center/instance/CuratorZookeeperInstanceTest.java", "diffHunk": "@@ -17,28 +17,44 @@\n \n package org.apache.shardingsphere.orchestration.center.instance;\n \n+import com.google.common.util.concurrent.SettableFuture;\n+import lombok.SneakyThrows;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n import org.apache.shardingsphere.orchestration.center.configuration.InstanceConfiguration;\n \n+import org.apache.shardingsphere.orchestration.center.listener.DataChangedEvent;\n import org.apache.shardingsphere.orchestration.center.util.EmbedTestingServer;\n import org.junit.BeforeClass;\n import org.junit.Test;\n \n import java.util.List;\n import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n \n import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertThat;\n \n public class CuratorZookeeperInstanceTest {", "originalCommit": "9b5bd4db783c649e5a397b50a61b2136fa5a4fa2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc2ODAxNQ==", "url": "https://github.com/apache/shardingsphere/pull/4599#discussion_r387768015", "bodyText": "Just throw exception from method signature, @SneakyThrows should use only in the situation for exception never occur", "author": "terrymanu", "createdAt": "2020-03-04T16:06:11Z", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-zookeeper-curator/src/test/java/org/apache/shardingsphere/orchestration/center/instance/CuratorZookeeperInstanceTest.java", "diffHunk": "@@ -67,4 +83,114 @@ public void assertGetChildrenKeys() {\n         List<String> childrenKeys = curatorZookeeperInstance.getChildrenKeys(\"/test/children\");\n         assertThat(childrenKeys.size(), is(3));\n     }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertWatchUpdatedChangedType() {\n+        curatorZookeeperInstance.persist(\"/test/children/1\", \"value1\");\n+        final SettableFuture<DataChangedEvent> future = SettableFuture.create();\n+        curatorZookeeperInstance.watch(\"/test/children\", dataChangedEvent -> future.set(dataChangedEvent));\n+        curatorZookeeperInstance.persist(\"/test/children/1\", \"value2\");\n+        DataChangedEvent dataChangedEvent = future.get(5, TimeUnit.SECONDS);\n+        assertNotNull(dataChangedEvent);\n+        assertThat(dataChangedEvent.getChangedType(), is(DataChangedEvent.ChangedType.UPDATED));\n+        assertThat(dataChangedEvent.getKey(), is(\"/test/children/1\"));\n+        assertThat(dataChangedEvent.getValue(), is(\"value2\"));\n+        assertThat(curatorZookeeperInstance.get(\"/test/children/1\"), is(\"value2\"));\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertWatchDeletedChangedType() {\n+        curatorZookeeperInstance.persist(\"/test/children/5\", \"value5\");\n+        final SettableFuture<DataChangedEvent> future = SettableFuture.create();\n+        curatorZookeeperInstance.watch(\"/test/children/5\", dataChangedEvent -> future.set(dataChangedEvent));\n+        client.delete().forPath(\"/test/children/5\");\n+        DataChangedEvent dataChangedEvent = future.get(5, TimeUnit.SECONDS);\n+        assertNotNull(dataChangedEvent);\n+        assertThat(dataChangedEvent.getChangedType(), is(DataChangedEvent.ChangedType.DELETED));\n+        assertThat(dataChangedEvent.getKey(), is(\"/test/children/5\"));\n+        assertThat(dataChangedEvent.getValue(), is(\"value5\"));\n+    }\n+    \n+    @Test\n+    @SneakyThrows", "originalCommit": "9b5bd4db783c649e5a397b50a61b2136fa5a4fa2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc2ODUxMA==", "url": "https://github.com/apache/shardingsphere/pull/4599#discussion_r387768510", "bodyText": "Please add L is the number is long type", "author": "terrymanu", "createdAt": "2020-03-04T16:06:54Z", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-zookeeper-curator/src/test/java/org/apache/shardingsphere/orchestration/center/instance/CuratorZookeeperInstanceTest.java", "diffHunk": "@@ -67,4 +83,114 @@ public void assertGetChildrenKeys() {\n         List<String> childrenKeys = curatorZookeeperInstance.getChildrenKeys(\"/test/children\");\n         assertThat(childrenKeys.size(), is(3));\n     }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertWatchUpdatedChangedType() {\n+        curatorZookeeperInstance.persist(\"/test/children/1\", \"value1\");\n+        final SettableFuture<DataChangedEvent> future = SettableFuture.create();\n+        curatorZookeeperInstance.watch(\"/test/children\", dataChangedEvent -> future.set(dataChangedEvent));\n+        curatorZookeeperInstance.persist(\"/test/children/1\", \"value2\");\n+        DataChangedEvent dataChangedEvent = future.get(5, TimeUnit.SECONDS);\n+        assertNotNull(dataChangedEvent);\n+        assertThat(dataChangedEvent.getChangedType(), is(DataChangedEvent.ChangedType.UPDATED));\n+        assertThat(dataChangedEvent.getKey(), is(\"/test/children/1\"));\n+        assertThat(dataChangedEvent.getValue(), is(\"value2\"));\n+        assertThat(curatorZookeeperInstance.get(\"/test/children/1\"), is(\"value2\"));\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertWatchDeletedChangedType() {\n+        curatorZookeeperInstance.persist(\"/test/children/5\", \"value5\");\n+        final SettableFuture<DataChangedEvent> future = SettableFuture.create();\n+        curatorZookeeperInstance.watch(\"/test/children/5\", dataChangedEvent -> future.set(dataChangedEvent));\n+        client.delete().forPath(\"/test/children/5\");\n+        DataChangedEvent dataChangedEvent = future.get(5, TimeUnit.SECONDS);\n+        assertNotNull(dataChangedEvent);\n+        assertThat(dataChangedEvent.getChangedType(), is(DataChangedEvent.ChangedType.DELETED));\n+        assertThat(dataChangedEvent.getKey(), is(\"/test/children/5\"));\n+        assertThat(dataChangedEvent.getValue(), is(\"value5\"));\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertWatchAddedChangedType() {\n+        curatorZookeeperInstance.persist(\"/test/children/4\", \"value4\");\n+        final AtomicReference<DataChangedEvent> actualDataChangedEvent = new AtomicReference<>();\n+        curatorZookeeperInstance.watch(\"/test/children\", dataChangedEvent -> actualDataChangedEvent.set(dataChangedEvent));\n+        Thread.sleep(2000);", "originalCommit": "9b5bd4db783c649e5a397b50a61b2136fa5a4fa2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA0ODIxNg==", "url": "https://github.com/apache/shardingsphere/pull/4599#discussion_r388048216", "bodyText": "I will pay more attention next time.", "author": "menghaoranss", "createdAt": "2020-03-05T02:32:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc2ODUxMA=="}], "type": "inlineReview"}, {"oid": "1cfa8ea8423ea9ac7162e0c162726ea5880cbd2a", "url": "https://github.com/apache/shardingsphere/commit/1cfa8ea8423ea9ac7162e0c162726ea5880cbd2a", "message": "resolve review problem", "committedDate": "2020-03-05T02:35:23Z", "type": "commit"}, {"oid": "1f26a6931982c9ff6abb54ba337b86913f22cf6f", "url": "https://github.com/apache/shardingsphere/commit/1f26a6931982c9ff6abb54ba337b86913f22cf6f", "message": "resolve review problem", "committedDate": "2020-03-05T05:34:15Z", "type": "commit"}, {"oid": "49d1e3f0e60ff7bc6b61d398410db661910e1ddb", "url": "https://github.com/apache/shardingsphere/commit/49d1e3f0e60ff7bc6b61d398410db661910e1ddb", "message": "Merge remote-tracking branch 'origin/master' into zookeeper-ut", "committedDate": "2020-03-05T07:31:28Z", "type": "commit"}]}