{"pr_number": 5590, "pr_title": "Issue5423 and issue5465", "pr_createdAt": "2020-05-13T18:36:36Z", "pr_url": "https://github.com/apache/shardingsphere/pull/5590", "timeline": [{"oid": "d6270aff74f926810ae665134d00d5c4d939958c", "url": "https://github.com/apache/shardingsphere/commit/d6270aff74f926810ae665134d00d5c4d939958c", "message": "BugFix\uff1a1.ON DUPLICATE KEY UPDATE Sub-Clause paramter dropped   https://github.com/apache/shardingsphere/issues/5210\n\nBugFix: 2.ON DUPLICATE KEY UPDATE Sub-Clause encrypt logic: missing assistedQueryColumn.", "committedDate": "2020-05-05T04:33:40Z", "type": "commit"}, {"oid": "41943c43a5f0d4343ddb8528807c611d7bbc9bf5", "url": "https://github.com/apache/shardingsphere/commit/41943c43a5f0d4343ddb8528807c611d7bbc9bf5", "message": "Add Apache License to org.apache.shardingsphere.sql.parser.binder.segment.insert.values.OnDuplicateUpdateContext", "committedDate": "2020-05-05T04:48:21Z", "type": "commit"}, {"oid": "abc37b2ae72f1789c8ef8eb77c8bd027de21b343", "url": "https://github.com/apache/shardingsphere/commit/abc37b2ae72f1789c8ef8eb77c8bd027de21b343", "message": "1.Add Tests for org.apache.shardingsphere.sql.parser.binder.segment.insert.values.OnDuplicateUpdateContext\n\n2.Improve Tests for GroupedParameterBuilder", "committedDate": "2020-05-05T05:36:04Z", "type": "commit"}, {"oid": "9bcebb1b5754442425027faaebfb772d11aefbf9", "url": "https://github.com/apache/shardingsphere/commit/9bcebb1b5754442425027faaebfb772d11aefbf9", "message": "1.Improve Tests coverage of InsertStatementContextTest", "committedDate": "2020-05-05T05:55:39Z", "type": "commit"}, {"oid": "395305356b0e675c99722fcfd21dd4623a4af22d", "url": "https://github.com/apache/shardingsphere/commit/395305356b0e675c99722fcfd21dd4623a4af22d", "message": "1.Remove EncryptInsertOnDuplicateKeyUpdateValueParameterRewriter implement of QueryWithCipherColumnAware", "committedDate": "2020-05-05T06:36:37Z", "type": "commit"}, {"oid": "5f4ecc4f2ba6efff7bc532ca674e1d267331da21", "url": "https://github.com/apache/shardingsphere/commit/5f4ecc4f2ba6efff7bc532ca674e1d267331da21", "message": "1.Improve Tests coverage of GroupedParameterBuilder ,OnDuplicateUpdateContext", "committedDate": "2020-05-05T09:29:04Z", "type": "commit"}, {"oid": "d65e30c67811a01df5a362ad2b1d349429996cb4", "url": "https://github.com/apache/shardingsphere/commit/d65e30c67811a01df5a362ad2b1d349429996cb4", "message": "1.Improve Tests coverage of GroupedParameterBuilder", "committedDate": "2020-05-05T10:53:48Z", "type": "commit"}, {"oid": "fcc615d57bafe222d093321d2595f84ac3b7948a", "url": "https://github.com/apache/shardingsphere/commit/fcc615d57bafe222d093321d2595f84ac3b7948a", "message": "Add testcase ,   sharding test case will fail.", "committedDate": "2020-05-08T02:40:38Z", "type": "commit"}, {"oid": "05a900be48b3deda4fd3f195d3789ddb664bce3d", "url": "https://github.com/apache/shardingsphere/commit/05a900be48b3deda4fd3f195d3789ddb664bce3d", "message": "Add testcase ,   sharding test case will fail.", "committedDate": "2020-05-08T03:32:40Z", "type": "commit"}, {"oid": "1b4e0712574918f7c9c90f7a1399c4c90ed0e904", "url": "https://github.com/apache/shardingsphere/commit/1b4e0712574918f7c9c90f7a1399c4c90ed0e904", "message": "Merge branch 'master' of https://github.com/apache/shardingsphere\n\n\u0001 Conflicts:\n\u0001\tshardingsphere-underlying/shardingsphere-rewrite/shardingsphere-rewrite-engine/src/main/java/org/apache/shardingsphere/underlying/rewrite/parameter/builder/impl/GroupedParameterBuilder.java", "committedDate": "2020-05-08T03:40:41Z", "type": "commit"}, {"oid": "3ecf0c679bec39d8e81b1ca5898d87fe8fbc2a85", "url": "https://github.com/apache/shardingsphere/commit/3ecf0c679bec39d8e81b1ca5898d87fe8fbc2a85", "message": "BugFix\uff1a\n1.https://github.com/apache/shardingsphere/issues/5210\nON DUPLICATE KEY UPDATE Sub-Clause paramter dropped\n\nBugFix:\n2.https://github.com/apache/shardingsphere/issues/5465\n1)ON DUPLICATE KEY UPDATE Sub-Clause encrypt logic: missing assistedQueryColumn.\n2)REMOVE wrong implements of QueryWithCipherColumnAware in  org.apache.shardingsphere.encrypt.rewrite.parameter.impl.EncryptInsertOnDuplicateKeyUpdateValueParameterRewriter", "committedDate": "2020-05-13T17:51:34Z", "type": "commit"}, {"oid": "35efe7f6f40ef809c258b9b0f8798bff238ab37d", "url": "https://github.com/apache/shardingsphere/commit/35efe7f6f40ef809c258b9b0f8798bff238ab37d", "message": "Merge branch 'master' of https://github.com/apache/shardingsphere into issue5423-and-issue5465\n\n\u0001 Conflicts:\n\u0001\tsharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/common/base/AbstractShardingJDBCDatabaseAndTableTest.java", "committedDate": "2020-05-13T18:10:18Z", "type": "commit"}, {"oid": "a399a922becd34eed573e2bbd04c7ee692761c5a", "url": "https://github.com/apache/shardingsphere/commit/a399a922becd34eed573e2bbd04c7ee692761c5a", "message": "merge upstream", "committedDate": "2020-05-13T18:34:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk3NDE2NA==", "url": "https://github.com/apache/shardingsphere/pull/5590#discussion_r424974164", "bodyText": "Please remove this redundant blank line.", "author": "tristaZero", "createdAt": "2020-05-14T08:50:57Z", "path": "shardingsphere-underlying/shardingsphere-rewrite/shardingsphere-rewrite-engine/src/main/java/org/apache/shardingsphere/underlying/rewrite/parameter/builder/impl/GroupedParameterBuilder.java", "diffHunk": "@@ -35,16 +35,18 @@\n     private final List<StandardParameterBuilder> parameterBuilders;\n     \n     @Getter\n-    private final List<Object> onDuplicateKeyUpdateAddedParameters = new LinkedList<>();\n+    private final StandardParameterBuilder onDuplicateKeyUpdateParametersBuilder;\n     \n     @Setter\n     private String derivedColumnName;\n     \n-    public GroupedParameterBuilder(final List<List<Object>> groupedParameters) {\n+    public GroupedParameterBuilder(final List<List<Object>> groupedParameters, final List<Object> onDuplicateKeyUpdateParameters) {\n         parameterBuilders = new ArrayList<>(groupedParameters.size());\n         for (List<Object> each : groupedParameters) {\n             parameterBuilders.add(new StandardParameterBuilder(each));\n         }\n+    ", "originalCommit": "a399a922becd34eed573e2bbd04c7ee692761c5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk3NDM3NA==", "url": "https://github.com/apache/shardingsphere/pull/5590#discussion_r424974374", "bodyText": "Please remove this redundant blank line.", "author": "tristaZero", "createdAt": "2020-05-14T08:51:15Z", "path": "shardingsphere-underlying/shardingsphere-rewrite/shardingsphere-rewrite-engine/src/main/java/org/apache/shardingsphere/underlying/rewrite/parameter/builder/impl/GroupedParameterBuilder.java", "diffHunk": "@@ -53,9 +55,7 @@ public GroupedParameterBuilder(final List<List<Object>> groupedParameters) {\n         for (int i = 0; i < parameterBuilders.size(); i++) {\n             result.addAll(getParameters(i));\n         }\n-        if (!onDuplicateKeyUpdateAddedParameters.isEmpty()) {\n-            result.addAll(onDuplicateKeyUpdateAddedParameters);\n-        }\n+", "originalCommit": "a399a922becd34eed573e2bbd04c7ee692761c5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk3NDgwNg==", "url": "https://github.com/apache/shardingsphere/pull/5590#discussion_r424974806", "bodyText": "Please remove this redundant blank line.", "author": "tristaZero", "createdAt": "2020-05-14T08:51:57Z", "path": "shardingsphere-underlying/shardingsphere-rewrite/shardingsphere-rewrite-engine/src/main/java/org/apache/shardingsphere/underlying/rewrite/engine/RouteSQLRewriteEngine.java", "diffHunk": "@@ -66,6 +77,8 @@ public RouteSQLRewriteResult rewrite(final SQLRewriteContext sqlRewriteContext,\n             }\n             count++;\n         }\n+        result.addAll(((GroupedParameterBuilder) parameterBuilder).getOnDuplicateKeyUpdateParametersBuilder().getParameters());\n+    ", "originalCommit": "a399a922becd34eed573e2bbd04c7ee692761c5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk3ODk2NQ==", "url": "https://github.com/apache/shardingsphere/pull/5590#discussion_r424978965", "bodyText": "I prefer if to else if.", "author": "tristaZero", "createdAt": "2020-05-14T08:57:51Z", "path": "shardingsphere-underlying/shardingsphere-rewrite/shardingsphere-rewrite-engine/src/main/java/org/apache/shardingsphere/underlying/rewrite/engine/RouteSQLRewriteEngine.java", "diffHunk": "@@ -55,9 +55,20 @@ public RouteSQLRewriteResult rewrite(final SQLRewriteContext sqlRewriteContext,\n     }\n     \n     private List<Object> getParameters(final ParameterBuilder parameterBuilder, final RouteResult routeResult, final RouteUnit routeUnit) {\n-        if (parameterBuilder instanceof StandardParameterBuilder || routeResult.getOriginalDataNodes().isEmpty() || parameterBuilder.getParameters().isEmpty()) {\n+        if (parameterBuilder instanceof StandardParameterBuilder) {\n             return parameterBuilder.getParameters();\n+        } else if (routeResult.getOriginalDataNodes().isEmpty()) {", "originalCommit": "a399a922becd34eed573e2bbd04c7ee692761c5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk4MTc0NQ==", "url": "https://github.com/apache/shardingsphere/pull/5590#discussion_r424981745", "bodyText": "It is preferable to move the content in else {} to the parent level.", "author": "tristaZero", "createdAt": "2020-05-14T09:02:05Z", "path": "shardingsphere-underlying/shardingsphere-rewrite/shardingsphere-rewrite-engine/src/main/java/org/apache/shardingsphere/underlying/rewrite/engine/GenericSQLRewriteEngine.java", "diffHunk": "@@ -34,6 +40,22 @@\n      * @return SQL rewrite result\n      */\n     public GenericSQLRewriteResult rewrite(final SQLRewriteContext sqlRewriteContext) {\n-        return new GenericSQLRewriteResult(new SQLRewriteUnit(new DefaultSQLBuilder(sqlRewriteContext).toSQL(), sqlRewriteContext.getParameterBuilder().getParameters()));\n+        return new GenericSQLRewriteResult(new SQLRewriteUnit(new DefaultSQLBuilder(sqlRewriteContext).toSQL(), getParameters(sqlRewriteContext.getParameterBuilder())));\n+    }\n+    \n+    private List<Object> getParameters(final ParameterBuilder parameterBuilder) {\n+        if (parameterBuilder instanceof StandardParameterBuilder) {\n+            return parameterBuilder.getParameters();\n+        } else {", "originalCommit": "a399a922becd34eed573e2bbd04c7ee692761c5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk4MzY1NA==", "url": "https://github.com/apache/shardingsphere/pull/5590#discussion_r424983654", "bodyText": "Please remove this redundant blank line.", "author": "tristaZero", "createdAt": "2020-05-14T09:05:06Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/test/java/org/apache/shardingsphere/sql/parser/binder/statement/impl/InsertStatementContextTest.java", "diffHunk": "@@ -79,6 +98,22 @@ private void setUpInsertValues(final InsertStatement insertStatement) {\n                 new ParameterMarkerExpressionSegment(0, 0, 3), new ParameterMarkerExpressionSegment(0, 0, 4), new LiteralExpressionSegment(0, 0, \"init\"))));\n     }\n     \n+    private void setUpOnDuplicateValues(final InsertStatement insertStatement) {\n+        AssignmentSegment parameterMarkerExpressionAssignment = new AssignmentSegment(0, 0,\n+                new ColumnSegment(0, 0, new IdentifierValue(\"on_duplicate_key_update_column_1\")),\n+                new ParameterMarkerExpressionSegment(0, 0, 4)\n+        );\n+        AssignmentSegment literalExpressionAssignment = new AssignmentSegment(0, 0,\n+                new ColumnSegment(0, 0, new IdentifierValue(\"on_duplicate_key_update_column_2\")),\n+                new LiteralExpressionSegment(0, 0, 5)\n+        );\n+", "originalCommit": "a399a922becd34eed573e2bbd04c7ee692761c5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk4Mzk4Mw==", "url": "https://github.com/apache/shardingsphere/pull/5590#discussion_r424983983", "bodyText": "Please remove this redundant blank line.", "author": "tristaZero", "createdAt": "2020-05-14T09:05:36Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/test/java/org/apache/shardingsphere/sql/parser/binder/segment/insert/values/OnDuplicateUpdateContextTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.binder.segment.insert.values;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.assignment.AssignmentSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.column.ColumnSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.ExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.simple.LiteralExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.simple.ParameterMarkerExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.simple.SimpleExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.value.identifier.IdentifierValue;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+\n+public final class OnDuplicateUpdateContextTest {\n+    \n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    public void assertInstanceConstructedOk() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n+        Collection<AssignmentSegment> assignments = Lists.newArrayList();\n+        List<Object> parameters = Collections.emptyList();\n+        int parametersOffset = 0;\n+\n+        OnDuplicateUpdateContext onDuplicateUpdateContext = new OnDuplicateUpdateContext(assignments, parameters, parametersOffset);\n+\n+        Method calculateParametersCountMethod = OnDuplicateUpdateContext.class.getDeclaredMethod(\"calculateParametersCount\", Collection.class);\n+        calculateParametersCountMethod.setAccessible(true);\n+        int calculateParametersCountResult = (int) calculateParametersCountMethod.invoke(onDuplicateUpdateContext, new Object[]{assignments});\n+        assertThat(onDuplicateUpdateContext.getParametersCount(), is(calculateParametersCountResult));\n+\n+        Method getValueExpressionsMethod = OnDuplicateUpdateContext.class.getDeclaredMethod(\"getValueExpressions\", Collection.class);\n+        getValueExpressionsMethod.setAccessible(true);\n+        List<ExpressionSegment> getValueExpressionsResult = (List<ExpressionSegment>) getValueExpressionsMethod.invoke(onDuplicateUpdateContext, new Object[]{assignments});\n+        assertThat(onDuplicateUpdateContext.getValueExpressions(), is(getValueExpressionsResult));\n+\n+        Method getParametersMethod = OnDuplicateUpdateContext.class.getDeclaredMethod(\"getParameters\", List.class, int.class);\n+        getParametersMethod.setAccessible(true);\n+        List<Object> getParametersResult = (List<Object>) getParametersMethod.invoke(onDuplicateUpdateContext, new Object[]{parameters, parametersOffset});\n+        assertThat(onDuplicateUpdateContext.getParameters(), is(getParametersResult));\n+    }\n+    \n+    @Test\n+    public void assertGetValueWhenParameterMarker() {\n+        Collection<AssignmentSegment> assignments = makeParameterMarkerExpressionAssignmentSegment();\n+        String parameterValue1 = \"test1\";\n+        String parameterValue2 = \"test2\";\n+        List<Object> parameters = Lists.newArrayList(parameterValue1, parameterValue2);\n+        int parametersOffset = 0;\n+        OnDuplicateUpdateContext onDuplicateUpdateContext = new OnDuplicateUpdateContext(assignments, parameters, parametersOffset);\n+        Object valueFromInsertValueContext1 = onDuplicateUpdateContext.getValue(0);\n+        assertThat(valueFromInsertValueContext1, is(parameterValue1));\n+\n+        Object valueFromInsertValueContext2 = onDuplicateUpdateContext.getValue(1);\n+        assertThat(valueFromInsertValueContext2, is(parameterValue2));\n+    }\n+    \n+    private Collection<AssignmentSegment> makeParameterMarkerExpressionAssignmentSegment() {\n+        ParameterMarkerExpressionSegment parameterMarkerExpressionSegment = new ParameterMarkerExpressionSegment(0, 10, 5);\n+        AssignmentSegment assignmentSegment1 = makeAssignmentSegment(parameterMarkerExpressionSegment);\n+\n+        ParameterMarkerExpressionSegment parameterMarkerExpressionSegment2 = new ParameterMarkerExpressionSegment(0, 10, 6);\n+        AssignmentSegment assignmentSegment2 = makeAssignmentSegment(parameterMarkerExpressionSegment2);\n+        return Lists.newArrayList(assignmentSegment1, assignmentSegment2);\n+    }\n+    \n+    @Test\n+    public void assertGetValueWhenLiteralExpressionSegment() {\n+        Object literalObject = new Object();\n+        Collection<AssignmentSegment> assignments = makeLiteralExpressionSegment(literalObject);\n+        List<Object> parameters = Collections.emptyList();\n+        OnDuplicateUpdateContext onDuplicateUpdateContext = new OnDuplicateUpdateContext(assignments, parameters, 0);\n+        Object valueFromInsertValueContext = onDuplicateUpdateContext.getValue(0);\n+        assertThat(valueFromInsertValueContext, is(literalObject));\n+    }\n+    \n+    private Collection<AssignmentSegment> makeLiteralExpressionSegment(final Object literalObject) {\n+        LiteralExpressionSegment parameterLiteralExpression = new LiteralExpressionSegment(0, 10, literalObject);\n+        AssignmentSegment assignmentSegment = makeAssignmentSegment(parameterLiteralExpression);\n+        return Collections.singleton(assignmentSegment);\n+    }\n+    \n+    private AssignmentSegment makeAssignmentSegment(final SimpleExpressionSegment expressionSegment) {\n+        int doesNotMatterLexicalIndex = 0;\n+        String doesNotMatterColumnName = \"columnNameStr\";\n+\n+        ColumnSegment column = new ColumnSegment(doesNotMatterLexicalIndex, doesNotMatterLexicalIndex, new IdentifierValue(doesNotMatterColumnName));\n+        return new AssignmentSegment(doesNotMatterLexicalIndex, doesNotMatterLexicalIndex, column, expressionSegment);\n+    }\n+    \n+    @Test\n+    public void assertGetParameterIndex() throws NoSuchMethodException, IllegalAccessException {\n+        Collection<AssignmentSegment> assignments = Lists.newArrayList();\n+        List<Object> parameters = Collections.emptyList();\n+        int parametersOffset = 0;\n+\n+        OnDuplicateUpdateContext onDuplicateUpdateContext = new OnDuplicateUpdateContext(assignments, parameters, parametersOffset);\n+\n+        Method getParameterIndexMethod = OnDuplicateUpdateContext.class.getDeclaredMethod(\"getParameterIndex\", ExpressionSegment.class);\n+        getParameterIndexMethod.setAccessible(true);\n+        ParameterMarkerExpressionSegment notExistsExpressionSegment = new ParameterMarkerExpressionSegment(0, 0, 0);\n+", "originalCommit": "a399a922becd34eed573e2bbd04c7ee692761c5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk4NDA2Ng==", "url": "https://github.com/apache/shardingsphere/pull/5590#discussion_r424984066", "bodyText": "Please remove this redundant blank line.", "author": "tristaZero", "createdAt": "2020-05-14T09:05:43Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/test/java/org/apache/shardingsphere/sql/parser/binder/segment/insert/values/OnDuplicateUpdateContextTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.binder.segment.insert.values;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.assignment.AssignmentSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.column.ColumnSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.ExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.simple.LiteralExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.simple.ParameterMarkerExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.simple.SimpleExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.value.identifier.IdentifierValue;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+\n+public final class OnDuplicateUpdateContextTest {\n+    \n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    public void assertInstanceConstructedOk() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n+        Collection<AssignmentSegment> assignments = Lists.newArrayList();\n+        List<Object> parameters = Collections.emptyList();\n+        int parametersOffset = 0;\n+\n+        OnDuplicateUpdateContext onDuplicateUpdateContext = new OnDuplicateUpdateContext(assignments, parameters, parametersOffset);\n+\n+        Method calculateParametersCountMethod = OnDuplicateUpdateContext.class.getDeclaredMethod(\"calculateParametersCount\", Collection.class);\n+        calculateParametersCountMethod.setAccessible(true);\n+        int calculateParametersCountResult = (int) calculateParametersCountMethod.invoke(onDuplicateUpdateContext, new Object[]{assignments});\n+        assertThat(onDuplicateUpdateContext.getParametersCount(), is(calculateParametersCountResult));\n+\n+        Method getValueExpressionsMethod = OnDuplicateUpdateContext.class.getDeclaredMethod(\"getValueExpressions\", Collection.class);\n+        getValueExpressionsMethod.setAccessible(true);\n+        List<ExpressionSegment> getValueExpressionsResult = (List<ExpressionSegment>) getValueExpressionsMethod.invoke(onDuplicateUpdateContext, new Object[]{assignments});\n+        assertThat(onDuplicateUpdateContext.getValueExpressions(), is(getValueExpressionsResult));\n+\n+        Method getParametersMethod = OnDuplicateUpdateContext.class.getDeclaredMethod(\"getParameters\", List.class, int.class);\n+        getParametersMethod.setAccessible(true);\n+        List<Object> getParametersResult = (List<Object>) getParametersMethod.invoke(onDuplicateUpdateContext, new Object[]{parameters, parametersOffset});\n+        assertThat(onDuplicateUpdateContext.getParameters(), is(getParametersResult));\n+    }\n+    \n+    @Test\n+    public void assertGetValueWhenParameterMarker() {\n+        Collection<AssignmentSegment> assignments = makeParameterMarkerExpressionAssignmentSegment();\n+        String parameterValue1 = \"test1\";\n+        String parameterValue2 = \"test2\";\n+        List<Object> parameters = Lists.newArrayList(parameterValue1, parameterValue2);\n+        int parametersOffset = 0;\n+        OnDuplicateUpdateContext onDuplicateUpdateContext = new OnDuplicateUpdateContext(assignments, parameters, parametersOffset);\n+        Object valueFromInsertValueContext1 = onDuplicateUpdateContext.getValue(0);\n+        assertThat(valueFromInsertValueContext1, is(parameterValue1));\n+\n+        Object valueFromInsertValueContext2 = onDuplicateUpdateContext.getValue(1);\n+        assertThat(valueFromInsertValueContext2, is(parameterValue2));\n+    }\n+    \n+    private Collection<AssignmentSegment> makeParameterMarkerExpressionAssignmentSegment() {\n+        ParameterMarkerExpressionSegment parameterMarkerExpressionSegment = new ParameterMarkerExpressionSegment(0, 10, 5);\n+        AssignmentSegment assignmentSegment1 = makeAssignmentSegment(parameterMarkerExpressionSegment);\n+\n+        ParameterMarkerExpressionSegment parameterMarkerExpressionSegment2 = new ParameterMarkerExpressionSegment(0, 10, 6);\n+        AssignmentSegment assignmentSegment2 = makeAssignmentSegment(parameterMarkerExpressionSegment2);\n+        return Lists.newArrayList(assignmentSegment1, assignmentSegment2);\n+    }\n+    \n+    @Test\n+    public void assertGetValueWhenLiteralExpressionSegment() {\n+        Object literalObject = new Object();\n+        Collection<AssignmentSegment> assignments = makeLiteralExpressionSegment(literalObject);\n+        List<Object> parameters = Collections.emptyList();\n+        OnDuplicateUpdateContext onDuplicateUpdateContext = new OnDuplicateUpdateContext(assignments, parameters, 0);\n+        Object valueFromInsertValueContext = onDuplicateUpdateContext.getValue(0);\n+        assertThat(valueFromInsertValueContext, is(literalObject));\n+    }\n+    \n+    private Collection<AssignmentSegment> makeLiteralExpressionSegment(final Object literalObject) {\n+        LiteralExpressionSegment parameterLiteralExpression = new LiteralExpressionSegment(0, 10, literalObject);\n+        AssignmentSegment assignmentSegment = makeAssignmentSegment(parameterLiteralExpression);\n+        return Collections.singleton(assignmentSegment);\n+    }\n+    \n+    private AssignmentSegment makeAssignmentSegment(final SimpleExpressionSegment expressionSegment) {\n+        int doesNotMatterLexicalIndex = 0;\n+        String doesNotMatterColumnName = \"columnNameStr\";\n+\n+        ColumnSegment column = new ColumnSegment(doesNotMatterLexicalIndex, doesNotMatterLexicalIndex, new IdentifierValue(doesNotMatterColumnName));\n+        return new AssignmentSegment(doesNotMatterLexicalIndex, doesNotMatterLexicalIndex, column, expressionSegment);\n+    }\n+    \n+    @Test\n+    public void assertGetParameterIndex() throws NoSuchMethodException, IllegalAccessException {\n+        Collection<AssignmentSegment> assignments = Lists.newArrayList();\n+        List<Object> parameters = Collections.emptyList();\n+        int parametersOffset = 0;\n+\n+        OnDuplicateUpdateContext onDuplicateUpdateContext = new OnDuplicateUpdateContext(assignments, parameters, parametersOffset);\n+", "originalCommit": "a399a922becd34eed573e2bbd04c7ee692761c5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk4NDE5MQ==", "url": "https://github.com/apache/shardingsphere/pull/5590#discussion_r424984191", "bodyText": "Please remove this redundant blank line.", "author": "tristaZero", "createdAt": "2020-05-14T09:05:54Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/test/java/org/apache/shardingsphere/sql/parser/binder/segment/insert/values/OnDuplicateUpdateContextTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.binder.segment.insert.values;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.assignment.AssignmentSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.column.ColumnSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.ExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.simple.LiteralExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.simple.ParameterMarkerExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.simple.SimpleExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.value.identifier.IdentifierValue;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+\n+public final class OnDuplicateUpdateContextTest {\n+    \n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    public void assertInstanceConstructedOk() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n+        Collection<AssignmentSegment> assignments = Lists.newArrayList();\n+        List<Object> parameters = Collections.emptyList();\n+        int parametersOffset = 0;\n+\n+        OnDuplicateUpdateContext onDuplicateUpdateContext = new OnDuplicateUpdateContext(assignments, parameters, parametersOffset);\n+\n+        Method calculateParametersCountMethod = OnDuplicateUpdateContext.class.getDeclaredMethod(\"calculateParametersCount\", Collection.class);\n+        calculateParametersCountMethod.setAccessible(true);\n+        int calculateParametersCountResult = (int) calculateParametersCountMethod.invoke(onDuplicateUpdateContext, new Object[]{assignments});\n+        assertThat(onDuplicateUpdateContext.getParametersCount(), is(calculateParametersCountResult));\n+\n+        Method getValueExpressionsMethod = OnDuplicateUpdateContext.class.getDeclaredMethod(\"getValueExpressions\", Collection.class);\n+        getValueExpressionsMethod.setAccessible(true);\n+        List<ExpressionSegment> getValueExpressionsResult = (List<ExpressionSegment>) getValueExpressionsMethod.invoke(onDuplicateUpdateContext, new Object[]{assignments});\n+        assertThat(onDuplicateUpdateContext.getValueExpressions(), is(getValueExpressionsResult));\n+\n+        Method getParametersMethod = OnDuplicateUpdateContext.class.getDeclaredMethod(\"getParameters\", List.class, int.class);\n+        getParametersMethod.setAccessible(true);\n+        List<Object> getParametersResult = (List<Object>) getParametersMethod.invoke(onDuplicateUpdateContext, new Object[]{parameters, parametersOffset});\n+        assertThat(onDuplicateUpdateContext.getParameters(), is(getParametersResult));\n+    }\n+    \n+    @Test\n+    public void assertGetValueWhenParameterMarker() {\n+        Collection<AssignmentSegment> assignments = makeParameterMarkerExpressionAssignmentSegment();\n+        String parameterValue1 = \"test1\";\n+        String parameterValue2 = \"test2\";\n+        List<Object> parameters = Lists.newArrayList(parameterValue1, parameterValue2);\n+        int parametersOffset = 0;\n+        OnDuplicateUpdateContext onDuplicateUpdateContext = new OnDuplicateUpdateContext(assignments, parameters, parametersOffset);\n+        Object valueFromInsertValueContext1 = onDuplicateUpdateContext.getValue(0);\n+        assertThat(valueFromInsertValueContext1, is(parameterValue1));\n+\n+        Object valueFromInsertValueContext2 = onDuplicateUpdateContext.getValue(1);\n+        assertThat(valueFromInsertValueContext2, is(parameterValue2));\n+    }\n+    \n+    private Collection<AssignmentSegment> makeParameterMarkerExpressionAssignmentSegment() {\n+        ParameterMarkerExpressionSegment parameterMarkerExpressionSegment = new ParameterMarkerExpressionSegment(0, 10, 5);\n+        AssignmentSegment assignmentSegment1 = makeAssignmentSegment(parameterMarkerExpressionSegment);\n+\n+        ParameterMarkerExpressionSegment parameterMarkerExpressionSegment2 = new ParameterMarkerExpressionSegment(0, 10, 6);\n+        AssignmentSegment assignmentSegment2 = makeAssignmentSegment(parameterMarkerExpressionSegment2);\n+        return Lists.newArrayList(assignmentSegment1, assignmentSegment2);\n+    }\n+    \n+    @Test\n+    public void assertGetValueWhenLiteralExpressionSegment() {\n+        Object literalObject = new Object();\n+        Collection<AssignmentSegment> assignments = makeLiteralExpressionSegment(literalObject);\n+        List<Object> parameters = Collections.emptyList();\n+        OnDuplicateUpdateContext onDuplicateUpdateContext = new OnDuplicateUpdateContext(assignments, parameters, 0);\n+        Object valueFromInsertValueContext = onDuplicateUpdateContext.getValue(0);\n+        assertThat(valueFromInsertValueContext, is(literalObject));\n+    }\n+    \n+    private Collection<AssignmentSegment> makeLiteralExpressionSegment(final Object literalObject) {\n+        LiteralExpressionSegment parameterLiteralExpression = new LiteralExpressionSegment(0, 10, literalObject);\n+        AssignmentSegment assignmentSegment = makeAssignmentSegment(parameterLiteralExpression);\n+        return Collections.singleton(assignmentSegment);\n+    }\n+    \n+    private AssignmentSegment makeAssignmentSegment(final SimpleExpressionSegment expressionSegment) {\n+        int doesNotMatterLexicalIndex = 0;\n+        String doesNotMatterColumnName = \"columnNameStr\";\n+\n+        ColumnSegment column = new ColumnSegment(doesNotMatterLexicalIndex, doesNotMatterLexicalIndex, new IdentifierValue(doesNotMatterColumnName));\n+        return new AssignmentSegment(doesNotMatterLexicalIndex, doesNotMatterLexicalIndex, column, expressionSegment);\n+    }\n+    \n+    @Test\n+    public void assertGetParameterIndex() throws NoSuchMethodException, IllegalAccessException {\n+        Collection<AssignmentSegment> assignments = Lists.newArrayList();\n+        List<Object> parameters = Collections.emptyList();\n+        int parametersOffset = 0;\n+", "originalCommit": "a399a922becd34eed573e2bbd04c7ee692761c5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk4NDI2NA==", "url": "https://github.com/apache/shardingsphere/pull/5590#discussion_r424984264", "bodyText": "Please remove this redundant blank line.", "author": "tristaZero", "createdAt": "2020-05-14T09:06:02Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/test/java/org/apache/shardingsphere/sql/parser/binder/segment/insert/values/OnDuplicateUpdateContextTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.binder.segment.insert.values;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.assignment.AssignmentSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.column.ColumnSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.ExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.simple.LiteralExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.simple.ParameterMarkerExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.simple.SimpleExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.value.identifier.IdentifierValue;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+\n+public final class OnDuplicateUpdateContextTest {\n+    \n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    public void assertInstanceConstructedOk() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n+        Collection<AssignmentSegment> assignments = Lists.newArrayList();\n+        List<Object> parameters = Collections.emptyList();\n+        int parametersOffset = 0;\n+\n+        OnDuplicateUpdateContext onDuplicateUpdateContext = new OnDuplicateUpdateContext(assignments, parameters, parametersOffset);\n+\n+        Method calculateParametersCountMethod = OnDuplicateUpdateContext.class.getDeclaredMethod(\"calculateParametersCount\", Collection.class);\n+        calculateParametersCountMethod.setAccessible(true);\n+        int calculateParametersCountResult = (int) calculateParametersCountMethod.invoke(onDuplicateUpdateContext, new Object[]{assignments});\n+        assertThat(onDuplicateUpdateContext.getParametersCount(), is(calculateParametersCountResult));\n+\n+        Method getValueExpressionsMethod = OnDuplicateUpdateContext.class.getDeclaredMethod(\"getValueExpressions\", Collection.class);\n+        getValueExpressionsMethod.setAccessible(true);\n+        List<ExpressionSegment> getValueExpressionsResult = (List<ExpressionSegment>) getValueExpressionsMethod.invoke(onDuplicateUpdateContext, new Object[]{assignments});\n+        assertThat(onDuplicateUpdateContext.getValueExpressions(), is(getValueExpressionsResult));\n+\n+        Method getParametersMethod = OnDuplicateUpdateContext.class.getDeclaredMethod(\"getParameters\", List.class, int.class);\n+        getParametersMethod.setAccessible(true);\n+        List<Object> getParametersResult = (List<Object>) getParametersMethod.invoke(onDuplicateUpdateContext, new Object[]{parameters, parametersOffset});\n+        assertThat(onDuplicateUpdateContext.getParameters(), is(getParametersResult));\n+    }\n+    \n+    @Test\n+    public void assertGetValueWhenParameterMarker() {\n+        Collection<AssignmentSegment> assignments = makeParameterMarkerExpressionAssignmentSegment();\n+        String parameterValue1 = \"test1\";\n+        String parameterValue2 = \"test2\";\n+        List<Object> parameters = Lists.newArrayList(parameterValue1, parameterValue2);\n+        int parametersOffset = 0;\n+        OnDuplicateUpdateContext onDuplicateUpdateContext = new OnDuplicateUpdateContext(assignments, parameters, parametersOffset);\n+        Object valueFromInsertValueContext1 = onDuplicateUpdateContext.getValue(0);\n+        assertThat(valueFromInsertValueContext1, is(parameterValue1));\n+\n+        Object valueFromInsertValueContext2 = onDuplicateUpdateContext.getValue(1);\n+        assertThat(valueFromInsertValueContext2, is(parameterValue2));\n+    }\n+    \n+    private Collection<AssignmentSegment> makeParameterMarkerExpressionAssignmentSegment() {\n+        ParameterMarkerExpressionSegment parameterMarkerExpressionSegment = new ParameterMarkerExpressionSegment(0, 10, 5);\n+        AssignmentSegment assignmentSegment1 = makeAssignmentSegment(parameterMarkerExpressionSegment);\n+\n+        ParameterMarkerExpressionSegment parameterMarkerExpressionSegment2 = new ParameterMarkerExpressionSegment(0, 10, 6);\n+        AssignmentSegment assignmentSegment2 = makeAssignmentSegment(parameterMarkerExpressionSegment2);\n+        return Lists.newArrayList(assignmentSegment1, assignmentSegment2);\n+    }\n+    \n+    @Test\n+    public void assertGetValueWhenLiteralExpressionSegment() {\n+        Object literalObject = new Object();\n+        Collection<AssignmentSegment> assignments = makeLiteralExpressionSegment(literalObject);\n+        List<Object> parameters = Collections.emptyList();\n+        OnDuplicateUpdateContext onDuplicateUpdateContext = new OnDuplicateUpdateContext(assignments, parameters, 0);\n+        Object valueFromInsertValueContext = onDuplicateUpdateContext.getValue(0);\n+        assertThat(valueFromInsertValueContext, is(literalObject));\n+    }\n+    \n+    private Collection<AssignmentSegment> makeLiteralExpressionSegment(final Object literalObject) {\n+        LiteralExpressionSegment parameterLiteralExpression = new LiteralExpressionSegment(0, 10, literalObject);\n+        AssignmentSegment assignmentSegment = makeAssignmentSegment(parameterLiteralExpression);\n+        return Collections.singleton(assignmentSegment);\n+    }\n+    \n+    private AssignmentSegment makeAssignmentSegment(final SimpleExpressionSegment expressionSegment) {\n+        int doesNotMatterLexicalIndex = 0;\n+        String doesNotMatterColumnName = \"columnNameStr\";\n+", "originalCommit": "a399a922becd34eed573e2bbd04c7ee692761c5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk4NDM0NQ==", "url": "https://github.com/apache/shardingsphere/pull/5590#discussion_r424984345", "bodyText": "Please remove this redundant blank line.", "author": "tristaZero", "createdAt": "2020-05-14T09:06:09Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/test/java/org/apache/shardingsphere/sql/parser/binder/segment/insert/values/OnDuplicateUpdateContextTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.binder.segment.insert.values;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.assignment.AssignmentSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.column.ColumnSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.ExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.simple.LiteralExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.simple.ParameterMarkerExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.simple.SimpleExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.value.identifier.IdentifierValue;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+\n+public final class OnDuplicateUpdateContextTest {\n+    \n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    public void assertInstanceConstructedOk() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n+        Collection<AssignmentSegment> assignments = Lists.newArrayList();\n+        List<Object> parameters = Collections.emptyList();\n+        int parametersOffset = 0;\n+\n+        OnDuplicateUpdateContext onDuplicateUpdateContext = new OnDuplicateUpdateContext(assignments, parameters, parametersOffset);\n+\n+        Method calculateParametersCountMethod = OnDuplicateUpdateContext.class.getDeclaredMethod(\"calculateParametersCount\", Collection.class);\n+        calculateParametersCountMethod.setAccessible(true);\n+        int calculateParametersCountResult = (int) calculateParametersCountMethod.invoke(onDuplicateUpdateContext, new Object[]{assignments});\n+        assertThat(onDuplicateUpdateContext.getParametersCount(), is(calculateParametersCountResult));\n+\n+        Method getValueExpressionsMethod = OnDuplicateUpdateContext.class.getDeclaredMethod(\"getValueExpressions\", Collection.class);\n+        getValueExpressionsMethod.setAccessible(true);\n+        List<ExpressionSegment> getValueExpressionsResult = (List<ExpressionSegment>) getValueExpressionsMethod.invoke(onDuplicateUpdateContext, new Object[]{assignments});\n+        assertThat(onDuplicateUpdateContext.getValueExpressions(), is(getValueExpressionsResult));\n+\n+        Method getParametersMethod = OnDuplicateUpdateContext.class.getDeclaredMethod(\"getParameters\", List.class, int.class);\n+        getParametersMethod.setAccessible(true);\n+        List<Object> getParametersResult = (List<Object>) getParametersMethod.invoke(onDuplicateUpdateContext, new Object[]{parameters, parametersOffset});\n+        assertThat(onDuplicateUpdateContext.getParameters(), is(getParametersResult));\n+    }\n+    \n+    @Test\n+    public void assertGetValueWhenParameterMarker() {\n+        Collection<AssignmentSegment> assignments = makeParameterMarkerExpressionAssignmentSegment();\n+        String parameterValue1 = \"test1\";\n+        String parameterValue2 = \"test2\";\n+        List<Object> parameters = Lists.newArrayList(parameterValue1, parameterValue2);\n+        int parametersOffset = 0;\n+        OnDuplicateUpdateContext onDuplicateUpdateContext = new OnDuplicateUpdateContext(assignments, parameters, parametersOffset);\n+        Object valueFromInsertValueContext1 = onDuplicateUpdateContext.getValue(0);\n+        assertThat(valueFromInsertValueContext1, is(parameterValue1));\n+\n+        Object valueFromInsertValueContext2 = onDuplicateUpdateContext.getValue(1);\n+        assertThat(valueFromInsertValueContext2, is(parameterValue2));\n+    }\n+    \n+    private Collection<AssignmentSegment> makeParameterMarkerExpressionAssignmentSegment() {\n+        ParameterMarkerExpressionSegment parameterMarkerExpressionSegment = new ParameterMarkerExpressionSegment(0, 10, 5);\n+        AssignmentSegment assignmentSegment1 = makeAssignmentSegment(parameterMarkerExpressionSegment);\n+", "originalCommit": "a399a922becd34eed573e2bbd04c7ee692761c5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk4NDU2Nw==", "url": "https://github.com/apache/shardingsphere/pull/5590#discussion_r424984567", "bodyText": "Please remove this redundant blank line.", "author": "tristaZero", "createdAt": "2020-05-14T09:06:27Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/test/java/org/apache/shardingsphere/sql/parser/binder/segment/insert/values/OnDuplicateUpdateContextTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.binder.segment.insert.values;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.assignment.AssignmentSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.column.ColumnSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.ExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.simple.LiteralExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.simple.ParameterMarkerExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.simple.SimpleExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.value.identifier.IdentifierValue;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+\n+public final class OnDuplicateUpdateContextTest {\n+    \n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    public void assertInstanceConstructedOk() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n+        Collection<AssignmentSegment> assignments = Lists.newArrayList();\n+        List<Object> parameters = Collections.emptyList();\n+        int parametersOffset = 0;\n+\n+        OnDuplicateUpdateContext onDuplicateUpdateContext = new OnDuplicateUpdateContext(assignments, parameters, parametersOffset);\n+\n+        Method calculateParametersCountMethod = OnDuplicateUpdateContext.class.getDeclaredMethod(\"calculateParametersCount\", Collection.class);\n+        calculateParametersCountMethod.setAccessible(true);\n+        int calculateParametersCountResult = (int) calculateParametersCountMethod.invoke(onDuplicateUpdateContext, new Object[]{assignments});\n+        assertThat(onDuplicateUpdateContext.getParametersCount(), is(calculateParametersCountResult));\n+\n+        Method getValueExpressionsMethod = OnDuplicateUpdateContext.class.getDeclaredMethod(\"getValueExpressions\", Collection.class);\n+        getValueExpressionsMethod.setAccessible(true);\n+        List<ExpressionSegment> getValueExpressionsResult = (List<ExpressionSegment>) getValueExpressionsMethod.invoke(onDuplicateUpdateContext, new Object[]{assignments});\n+        assertThat(onDuplicateUpdateContext.getValueExpressions(), is(getValueExpressionsResult));\n+", "originalCommit": "a399a922becd34eed573e2bbd04c7ee692761c5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIzOTE3OQ==", "url": "https://github.com/apache/shardingsphere/pull/5590#discussion_r425239179", "bodyText": "IMO,it's better to keep the different method call with assertion separately.", "author": "neil4dong", "createdAt": "2020-05-14T15:45:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk4NDU2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk4NDU4Nw==", "url": "https://github.com/apache/shardingsphere/pull/5590#discussion_r424984587", "bodyText": "Please remove this redundant blank line.", "author": "tristaZero", "createdAt": "2020-05-14T09:06:29Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/test/java/org/apache/shardingsphere/sql/parser/binder/segment/insert/values/OnDuplicateUpdateContextTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.binder.segment.insert.values;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.assignment.AssignmentSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.column.ColumnSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.ExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.simple.LiteralExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.simple.ParameterMarkerExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.simple.SimpleExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.value.identifier.IdentifierValue;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+\n+public final class OnDuplicateUpdateContextTest {\n+    \n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    public void assertInstanceConstructedOk() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n+        Collection<AssignmentSegment> assignments = Lists.newArrayList();\n+        List<Object> parameters = Collections.emptyList();\n+        int parametersOffset = 0;\n+\n+        OnDuplicateUpdateContext onDuplicateUpdateContext = new OnDuplicateUpdateContext(assignments, parameters, parametersOffset);\n+\n+        Method calculateParametersCountMethod = OnDuplicateUpdateContext.class.getDeclaredMethod(\"calculateParametersCount\", Collection.class);\n+        calculateParametersCountMethod.setAccessible(true);\n+        int calculateParametersCountResult = (int) calculateParametersCountMethod.invoke(onDuplicateUpdateContext, new Object[]{assignments});\n+        assertThat(onDuplicateUpdateContext.getParametersCount(), is(calculateParametersCountResult));\n+", "originalCommit": "a399a922becd34eed573e2bbd04c7ee692761c5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIzOTA1OQ==", "url": "https://github.com/apache/shardingsphere/pull/5590#discussion_r425239059", "bodyText": "IMO,it's better to keep the different method call with assertion separately.", "author": "neil4dong", "createdAt": "2020-05-14T15:44:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk4NDU4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk4NDg2Ng==", "url": "https://github.com/apache/shardingsphere/pull/5590#discussion_r424984866", "bodyText": "Please remove this redundant blank line.", "author": "tristaZero", "createdAt": "2020-05-14T09:06:59Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/statement/dml/InsertStatementContext.java", "diffHunk": "@@ -93,9 +114,21 @@ public InsertStatementContext(final SchemaMetaData schemaMetaData, final List<Ob\n         return result;\n     }\n     \n+    /**\n+     * Get OnDuplicateKeyUpdateParameters.\n+     * @return OnDuplicateKeyUpdateParameters\n+     */\n+    public List<Object> getOnDuplicateKeyUpdateParameters() {\n+        if (null == onDuplicateKeyUpdateValueContext) {\n+            return new ArrayList<>(0);\n+        }\n+", "originalCommit": "a399a922becd34eed573e2bbd04c7ee692761c5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk4NTA4OA==", "url": "https://github.com/apache/shardingsphere/pull/5590#discussion_r424985088", "bodyText": "Please remove this redundant blank line.", "author": "tristaZero", "createdAt": "2020-05-14T09:07:20Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/statement/dml/InsertStatementContext.java", "diffHunk": "@@ -50,30 +54,47 @@\n     \n     private final List<InsertValueContext> insertValueContexts;\n     \n+    private final OnDuplicateUpdateContext onDuplicateKeyUpdateValueContext;\n+    \n     private final GeneratedKeyContext generatedKeyContext;\n     \n     public InsertStatementContext(final SchemaMetaData schemaMetaData, final List<Object> parameters, final InsertStatement sqlStatement) {\n         super(sqlStatement);\n         tablesContext = new TablesContext(sqlStatement.getTable());\n         columnNames = sqlStatement.useDefaultColumns() ? schemaMetaData.getAllColumnNames(sqlStatement.getTable().getTableName().getIdentifier().getValue()) : sqlStatement.getColumnNames();\n-        insertValueContexts = getInsertValueContexts(parameters);\n+\n+        AtomicInteger parametersOffset = new AtomicInteger(0);\n+        insertValueContexts = getInsertValueContexts(parameters, parametersOffset);\n+        onDuplicateKeyUpdateValueContext = getOnDuplicateKeyUpdateValueContext(parameters, parametersOffset).orElse(null);\n+\n         generatedKeyContext = new GeneratedKeyContextEngine(schemaMetaData).createGenerateKeyContext(parameters, sqlStatement).orElse(null);\n     }\n     \n-    private List<InsertValueContext> getInsertValueContexts(final List<Object> parameters) {\n+    private List<InsertValueContext> getInsertValueContexts(final List<Object> parameters, final AtomicInteger parametersOffset) {\n         List<InsertValueContext> result = new LinkedList<>();\n-        int parametersOffset = 0;\n         for (Collection<ExpressionSegment> each : getSqlStatement().getAllValueExpressions()) {\n-            InsertValueContext insertValueContext = new InsertValueContext(each, parameters, parametersOffset);\n+            InsertValueContext insertValueContext = new InsertValueContext(each, parameters, parametersOffset.get());\n             result.add(insertValueContext);\n-            parametersOffset += insertValueContext.getParametersCount();\n+            parametersOffset.addAndGet(insertValueContext.getParametersCount());\n         }\n         return result;\n     }\n     \n+    private Optional<OnDuplicateUpdateContext> getOnDuplicateKeyUpdateValueContext(final List<Object> parameters, final AtomicInteger parametersOffset) {\n+\n+        if (!getSqlStatement().getOnDuplicateKeyColumns().isPresent()) {\n+            return Optional.empty();\n+        }\n+        Collection<AssignmentSegment> onDuplicateKeyColumns = getSqlStatement().getOnDuplicateKeyColumns().get().getColumns();\n+        OnDuplicateUpdateContext onDuplicateUpdateContext = new OnDuplicateUpdateContext(onDuplicateKeyColumns, parameters, parametersOffset.get());\n+        parametersOffset.addAndGet(onDuplicateUpdateContext.getParametersCount());\n+        return Optional.of(onDuplicateUpdateContext);\n+", "originalCommit": "a399a922becd34eed573e2bbd04c7ee692761c5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk4Nzc3Nw==", "url": "https://github.com/apache/shardingsphere/pull/5590#discussion_r424987777", "bodyText": "Please remove this redundant blank line.", "author": "tristaZero", "createdAt": "2020-05-14T09:11:36Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/statement/dml/InsertStatementContext.java", "diffHunk": "@@ -50,30 +54,47 @@\n     \n     private final List<InsertValueContext> insertValueContexts;\n     \n+    private final OnDuplicateUpdateContext onDuplicateKeyUpdateValueContext;\n+    \n     private final GeneratedKeyContext generatedKeyContext;\n     \n     public InsertStatementContext(final SchemaMetaData schemaMetaData, final List<Object> parameters, final InsertStatement sqlStatement) {\n         super(sqlStatement);\n         tablesContext = new TablesContext(sqlStatement.getTable());\n         columnNames = sqlStatement.useDefaultColumns() ? schemaMetaData.getAllColumnNames(sqlStatement.getTable().getTableName().getIdentifier().getValue()) : sqlStatement.getColumnNames();\n-        insertValueContexts = getInsertValueContexts(parameters);\n+\n+        AtomicInteger parametersOffset = new AtomicInteger(0);\n+        insertValueContexts = getInsertValueContexts(parameters, parametersOffset);\n+        onDuplicateKeyUpdateValueContext = getOnDuplicateKeyUpdateValueContext(parameters, parametersOffset).orElse(null);\n+\n         generatedKeyContext = new GeneratedKeyContextEngine(schemaMetaData).createGenerateKeyContext(parameters, sqlStatement).orElse(null);", "originalCommit": "a399a922becd34eed573e2bbd04c7ee692761c5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk4ODM4Ng==", "url": "https://github.com/apache/shardingsphere/pull/5590#discussion_r424988386", "bodyText": "Please remove this redundant blank line.", "author": "tristaZero", "createdAt": "2020-05-14T09:12:33Z", "path": "sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/statement/ShardingSpherePreparedStatementTest.java", "diffHunk": "@@ -316,6 +320,79 @@ public void assertAddBatchWithGenerateKeyColumn() throws SQLException {\n         }\n     }\n     \n+    @Test\n+    public void assertAddOnDuplicateKey() throws SQLException {\n+        int itemId = 1;\n+        int userId1 = 101;\n+        int userId2 = 102;\n+        int orderId = 200;\n+        String status = \"init\";\n+        \n+        String updatedStatus = \"updated on duplicate key\";\n+        ", "originalCommit": "a399a922becd34eed573e2bbd04c7ee692761c5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk5MDkyMg==", "url": "https://github.com/apache/shardingsphere/pull/5590#discussion_r424990922", "bodyText": "Please remove this redundant blank line.", "author": "tristaZero", "createdAt": "2020-05-14T09:16:35Z", "path": "encrypt-core/encrypt-core-rewrite/src/main/java/org/apache/shardingsphere/encrypt/rewrite/parameter/impl/EncryptInsertOnDuplicateKeyUpdateValueParameterRewriter.java", "diffHunk": "@@ -51,30 +47,36 @@ protected boolean isNeedRewriteForEncrypt(final SQLStatementContext sqlStatement\n     @Override\n     public void rewrite(final ParameterBuilder parameterBuilder, final InsertStatementContext insertStatementContext, final List<Object> parameters) {\n         String tableName = insertStatementContext.getSqlStatement().getTable().getTableName().getIdentifier().getValue();\n-        Preconditions.checkState(insertStatementContext.getSqlStatement().getOnDuplicateKeyColumns().isPresent());\n-        OnDuplicateKeyColumnsSegment onDuplicateKeyColumnsSegment = insertStatementContext.getSqlStatement().getOnDuplicateKeyColumns().get();\n-        Collection<AssignmentSegment> onDuplicateKeyColumnsSegments = onDuplicateKeyColumnsSegment.getColumns();\n-        if (onDuplicateKeyColumnsSegments.isEmpty()) {\n-            return;\n-        }\n+\n         GroupedParameterBuilder groupedParameterBuilder = (GroupedParameterBuilder) parameterBuilder;\n-        for (AssignmentSegment each : onDuplicateKeyColumnsSegments) {\n-            ExpressionSegment expressionSegment = each.getValue();\n-            Object cipherColumnValue;\n-            Object plainColumnValue = null;\n-            if (expressionSegment instanceof ParameterMarkerExpressionSegment) {\n-                plainColumnValue = parameters.get(((ParameterMarkerExpressionSegment) expressionSegment).getParameterMarkerIndex());\n-            }\n-            if (queryWithCipherColumn) {\n-                Optional<Encryptor> encryptor = getEncryptRule().findEncryptor(tableName, each.getColumn().getIdentifier().getValue());\n-                if (encryptor.isPresent()) {\n-                    cipherColumnValue = encryptor.get().encrypt(plainColumnValue);\n-                    groupedParameterBuilder.getOnDuplicateKeyUpdateAddedParameters().add(cipherColumnValue);\n+        OnDuplicateUpdateContext onDuplicateKeyUpdateValueContext = insertStatementContext.getOnDuplicateKeyUpdateValueContext();\n+        for (int index = 0; index < onDuplicateKeyUpdateValueContext.getValueExpressions().size(); index++) {\n+            final int columnIndex = index;\n+            String encryptLogicColumnName = onDuplicateKeyUpdateValueContext.getColumn(columnIndex).getIdentifier().getValue();\n+            Optional<Encryptor> encryptorOptional = getEncryptRule().findEncryptor(tableName, encryptLogicColumnName);\n+            encryptorOptional.ifPresent(encryptor -> {\n+                Object plainColumnValue = onDuplicateKeyUpdateValueContext.getValue(columnIndex);\n+                Object cipherColumnValue = encryptorOptional.get().encrypt(plainColumnValue);\n+                groupedParameterBuilder.getOnDuplicateKeyUpdateParametersBuilder().addReplacedParameters(columnIndex, cipherColumnValue);\n+                Collection<Object> addedParameters = new LinkedList<>();\n+                if (encryptor instanceof QueryAssistedEncryptor) {\n+                    Optional<String> assistedColumnName = getEncryptRule().findAssistedQueryColumn(tableName, encryptLogicColumnName);\n+                    Preconditions.checkArgument(assistedColumnName.isPresent(), \"Can not find assisted query Column Name\");\n+                    addedParameters.add(((QueryAssistedEncryptor) encryptor).queryAssistedEncrypt(plainColumnValue.toString()));\n+                }\n+\n+                if (getEncryptRule().findPlainColumn(tableName, encryptLogicColumnName).isPresent()) {\n+                    addedParameters.add(plainColumnValue);\n+                }\n+\n+                if (!addedParameters.isEmpty()) {\n+                    if (!groupedParameterBuilder.getOnDuplicateKeyUpdateParametersBuilder().getAddedIndexAndParameters().containsKey(columnIndex + 1)) {\n+                        groupedParameterBuilder.getOnDuplicateKeyUpdateParametersBuilder().getAddedIndexAndParameters().put(columnIndex + 1, new LinkedList<>());\n+                    }\n+                    groupedParameterBuilder.getOnDuplicateKeyUpdateParametersBuilder().getAddedIndexAndParameters().get(columnIndex + 1).addAll(addedParameters);\n                 }\n-            }\n-            if (null != plainColumnValue) {\n-                groupedParameterBuilder.getOnDuplicateKeyUpdateAddedParameters().add(plainColumnValue);\n-            }\n+            });\n+", "originalCommit": "a399a922becd34eed573e2bbd04c7ee692761c5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk5MTAyNA==", "url": "https://github.com/apache/shardingsphere/pull/5590#discussion_r424991024", "bodyText": "Please remove this redundant blank line.", "author": "tristaZero", "createdAt": "2020-05-14T09:16:44Z", "path": "encrypt-core/encrypt-core-rewrite/src/main/java/org/apache/shardingsphere/encrypt/rewrite/parameter/impl/EncryptInsertOnDuplicateKeyUpdateValueParameterRewriter.java", "diffHunk": "@@ -51,30 +47,36 @@ protected boolean isNeedRewriteForEncrypt(final SQLStatementContext sqlStatement\n     @Override\n     public void rewrite(final ParameterBuilder parameterBuilder, final InsertStatementContext insertStatementContext, final List<Object> parameters) {\n         String tableName = insertStatementContext.getSqlStatement().getTable().getTableName().getIdentifier().getValue();\n-        Preconditions.checkState(insertStatementContext.getSqlStatement().getOnDuplicateKeyColumns().isPresent());\n-        OnDuplicateKeyColumnsSegment onDuplicateKeyColumnsSegment = insertStatementContext.getSqlStatement().getOnDuplicateKeyColumns().get();\n-        Collection<AssignmentSegment> onDuplicateKeyColumnsSegments = onDuplicateKeyColumnsSegment.getColumns();\n-        if (onDuplicateKeyColumnsSegments.isEmpty()) {\n-            return;\n-        }\n+", "originalCommit": "a399a922becd34eed573e2bbd04c7ee692761c5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8b52c56983bc5529957acfbc4cad5f203802c97a", "url": "https://github.com/apache/shardingsphere/commit/8b52c56983bc5529957acfbc4cad5f203802c97a", "message": "improve code style.", "committedDate": "2020-05-14T15:11:45Z", "type": "commit"}, {"oid": "9ed6e73aafa27ab271e108a9896c8da2466ce3d0", "url": "https://github.com/apache/shardingsphere/commit/9ed6e73aafa27ab271e108a9896c8da2466ce3d0", "message": "improve code style.", "committedDate": "2020-05-14T15:13:53Z", "type": "commit"}, {"oid": "7f09cb56a8b1ee2d86377fc34a0065c59ad4ff7d", "url": "https://github.com/apache/shardingsphere/commit/7f09cb56a8b1ee2d86377fc34a0065c59ad4ff7d", "message": "Merge remote-tracking branch 'origin/issue5423-and-issue5465' into issue5423-and-issue5465\n\n# Conflicts:\n#\tshardingsphere-underlying/shardingsphere-rewrite/shardingsphere-rewrite-engine/src/main/java/org/apache/shardingsphere/underlying/rewrite/engine/GenericSQLRewriteEngine.java", "committedDate": "2020-05-14T15:14:23Z", "type": "commit"}, {"oid": "1071f829be12cf3cf19e45276aae0fa4905a4992", "url": "https://github.com/apache/shardingsphere/commit/1071f829be12cf3cf19e45276aae0fa4905a4992", "message": "improve code style.", "committedDate": "2020-05-14T15:16:03Z", "type": "commit"}, {"oid": "b6aa9742a68ea58df62adc96f7a9035de52a6c23", "url": "https://github.com/apache/shardingsphere/commit/b6aa9742a68ea58df62adc96f7a9035de52a6c23", "message": "improve code style.", "committedDate": "2020-05-14T15:22:43Z", "type": "commit"}, {"oid": "c65557ad9b404f7ccca60cd6f6ca9f16d674f7f0", "url": "https://github.com/apache/shardingsphere/commit/c65557ad9b404f7ccca60cd6f6ca9f16d674f7f0", "message": "improve code style.", "committedDate": "2020-05-14T15:37:50Z", "type": "commit"}, {"oid": "13062b4ab12ab24687b1f88830c3b7e54c08d4af", "url": "https://github.com/apache/shardingsphere/commit/13062b4ab12ab24687b1f88830c3b7e54c08d4af", "message": "improve code style.", "committedDate": "2020-05-14T15:41:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU0Mzk0OA==", "url": "https://github.com/apache/shardingsphere/pull/5590#discussion_r425543948", "bodyText": "Please keep original indent", "author": "terrymanu", "createdAt": "2020-05-15T03:19:32Z", "path": "sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/statement/ShardingSpherePreparedStatementTest.java", "diffHunk": "@@ -126,7 +130,7 @@ public void assertMultiValuesWithGenerateShardingKeyColumn() throws SQLException\n             }\n         }\n     }\n-\n+    ", "originalCommit": "13062b4ab12ab24687b1f88830c3b7e54c08d4af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU1MjEyMg==", "url": "https://github.com/apache/shardingsphere/pull/5590#discussion_r425552122", "bodyText": "It's wired , there is two kinds of ident, some files no indent ,some files has ident .  which one should I use?", "author": "neil4dong", "createdAt": "2020-05-15T03:54:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU0Mzk0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY2NzU0NA==", "url": "https://github.com/apache/shardingsphere/pull/5590#discussion_r425667544", "bodyText": "we prefer just keep 4 spaces", "author": "terrymanu", "createdAt": "2020-05-15T09:06:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU0Mzk0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY4NzIwOA==", "url": "https://github.com/apache/shardingsphere/pull/5590#discussion_r425687208", "bodyText": "use 4 spaces.", "author": "neil4dong", "createdAt": "2020-05-15T09:41:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU0Mzk0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU0Mzk1OQ==", "url": "https://github.com/apache/shardingsphere/pull/5590#discussion_r425543959", "bodyText": "Please keep original indent", "author": "terrymanu", "createdAt": "2020-05-15T03:19:35Z", "path": "sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/statement/ShardingSpherePreparedStatementTest.java", "diffHunk": "@@ -83,7 +87,7 @@ public void assertAddBatch() throws SQLException {\n             }\n         }\n     }\n-\n+    ", "originalCommit": "13062b4ab12ab24687b1f88830c3b7e54c08d4af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY4NzE5OQ==", "url": "https://github.com/apache/shardingsphere/pull/5590#discussion_r425687199", "bodyText": "use 4 spaces.", "author": "neil4dong", "createdAt": "2020-05-15T09:41:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU0Mzk1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU0NDIxNg==", "url": "https://github.com/apache/shardingsphere/pull/5590#discussion_r425544216", "bodyText": "Please remove useless blank lines.\nIf we think use blank line to separate diff logic block, it is better extract them as a new private method.", "author": "terrymanu", "createdAt": "2020-05-15T03:20:35Z", "path": "sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/statement/ShardingSpherePreparedStatementTest.java", "diffHunk": "@@ -316,6 +320,77 @@ public void assertAddBatchWithGenerateKeyColumn() throws SQLException {\n         }\n     }\n     \n+    @Test\n+    public void assertAddOnDuplicateKey() throws SQLException {\n+        int itemId = 1;\n+        int userId1 = 101;\n+        int userId2 = 102;\n+        int orderId = 200;\n+        String status = \"init\";\n+        String updatedStatus = \"updated on duplicate key\";\n+        try (Connection connection = getShardingSphereDataSource().getConnection();\n+             PreparedStatement preparedStatement = connection.prepareStatement(INSERT_ON_DUPLICATE_KEY_SQL);\n+             PreparedStatement queryStatement = connection.prepareStatement(SELECT_SQL_WITH_PARAMETER_MARKER_RETURN_STATUS)) {\n+            preparedStatement.setInt(1, itemId);\n+            preparedStatement.setInt(2, orderId);\n+            preparedStatement.setInt(3, userId1);\n+            preparedStatement.setString(4, status);\n+            preparedStatement.setInt(5, itemId);\n+            preparedStatement.setInt(6, orderId);\n+            preparedStatement.setInt(7, userId2);\n+            preparedStatement.setString(8, status);\n+            preparedStatement.setString(9, updatedStatus);\n+            int result = preparedStatement.executeUpdate();\n+            assertThat(result, is(2));\n+            ", "originalCommit": "13062b4ab12ab24687b1f88830c3b7e54c08d4af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU0NDQ3MA==", "url": "https://github.com/apache/shardingsphere/pull/5590#discussion_r425544470", "bodyText": "Please fix javadoc, use words or {@code } to label class name", "author": "terrymanu", "createdAt": "2020-05-15T03:21:39Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/statement/dml/InsertStatementContext.java", "diffHunk": "@@ -93,9 +110,20 @@ public InsertStatementContext(final SchemaMetaData schemaMetaData, final List<Ob\n         return result;\n     }\n     \n+    /**\n+     * Get OnDuplicateKeyUpdateParameters.", "originalCommit": "13062b4ab12ab24687b1f88830c3b7e54c08d4af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "baf64d603bcb914432a8863d5da4f09032953e69", "url": "https://github.com/apache/shardingsphere/commit/baf64d603bcb914432a8863d5da4f09032953e69", "message": "Remove redundant blank lines", "committedDate": "2020-05-15T04:00:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY2ODYzNA==", "url": "https://github.com/apache/shardingsphere/pull/5590#discussion_r425668634", "bodyText": "Please use upper case for the first letter of java doc.", "author": "terrymanu", "createdAt": "2020-05-15T09:08:29Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/segment/insert/values/OnDuplicateUpdateContext.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.binder.segment.insert.values;\n+\n+import lombok.Getter;\n+import lombok.ToString;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.assignment.AssignmentSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.column.ColumnSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.ExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.simple.LiteralExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.simple.ParameterMarkerExpressionSegment;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Getter\n+@ToString\n+public class OnDuplicateUpdateContext {\n+    private final int parametersCount;\n+    \n+    private final List<ExpressionSegment> valueExpressions;\n+    \n+    private final List<Object> parameters;\n+    \n+    private final List<ColumnSegment> columns;\n+    \n+    public OnDuplicateUpdateContext(final Collection<AssignmentSegment> assignments, final List<Object> parameters, final int parametersOffset) {\n+        List<ExpressionSegment> expressionSegments = assignments.stream().map(AssignmentSegment::getValue).collect(Collectors.toList());\n+        parametersCount = calculateParametersCount(expressionSegments);\n+        valueExpressions = getValueExpressions(expressionSegments);\n+        this.parameters = getParameters(parameters, parametersOffset);\n+        columns = assignments.stream().map(AssignmentSegment::getColumn).collect(Collectors.toList());\n+    }\n+    \n+    private int calculateParametersCount(final Collection<ExpressionSegment> assignments) {\n+        int result = 0;\n+        for (ExpressionSegment each : assignments) {\n+            if (each instanceof ParameterMarkerExpressionSegment) {\n+                result++;\n+            }\n+        }\n+        return result;\n+    }\n+    \n+    private List<ExpressionSegment> getValueExpressions(final Collection<ExpressionSegment> assignments) {\n+        List<ExpressionSegment> result = new ArrayList<>(assignments.size());\n+        result.addAll(assignments);\n+        return result;\n+    }\n+    \n+    private List<Object> getParameters(final List<Object> parameters, final int parametersOffset) {\n+        if (0 == parametersCount) {\n+            return Collections.emptyList();\n+        }\n+        List<Object> result = new ArrayList<>(parametersCount);\n+        result.addAll(parameters.subList(parametersOffset, parametersOffset + parametersCount));\n+        return result;\n+    }\n+    \n+    /**\n+     * Get value.\n+     *\n+     * @param index index\n+     * @return value\n+     */\n+    public Object getValue(final int index) {\n+        ExpressionSegment valueExpression = valueExpressions.get(index);\n+        return valueExpression instanceof ParameterMarkerExpressionSegment ? parameters.get(getParameterIndex(valueExpression)) : ((LiteralExpressionSegment) valueExpression).getLiterals();\n+    }\n+    \n+    private int getParameterIndex(final ExpressionSegment valueExpression) {\n+        int result = 0;\n+        for (ExpressionSegment each : valueExpressions) {\n+            if (valueExpression == each) {\n+                return result;\n+            }\n+            if (each instanceof ParameterMarkerExpressionSegment) {\n+                result++;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"Can not get parameter index.\");\n+    }\n+    \n+    /**\n+     * get on duplicate key update column by index of this clause.", "originalCommit": "baf64d603bcb914432a8863d5da4f09032953e69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY2ODc4Mg==", "url": "https://github.com/apache/shardingsphere/pull/5590#discussion_r425668782", "bodyText": "please remove . in @param", "author": "terrymanu", "createdAt": "2020-05-15T09:08:47Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/segment/insert/values/OnDuplicateUpdateContext.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.binder.segment.insert.values;\n+\n+import lombok.Getter;\n+import lombok.ToString;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.assignment.AssignmentSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.column.ColumnSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.ExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.simple.LiteralExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.simple.ParameterMarkerExpressionSegment;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Getter\n+@ToString\n+public class OnDuplicateUpdateContext {\n+    private final int parametersCount;\n+    \n+    private final List<ExpressionSegment> valueExpressions;\n+    \n+    private final List<Object> parameters;\n+    \n+    private final List<ColumnSegment> columns;\n+    \n+    public OnDuplicateUpdateContext(final Collection<AssignmentSegment> assignments, final List<Object> parameters, final int parametersOffset) {\n+        List<ExpressionSegment> expressionSegments = assignments.stream().map(AssignmentSegment::getValue).collect(Collectors.toList());\n+        parametersCount = calculateParametersCount(expressionSegments);\n+        valueExpressions = getValueExpressions(expressionSegments);\n+        this.parameters = getParameters(parameters, parametersOffset);\n+        columns = assignments.stream().map(AssignmentSegment::getColumn).collect(Collectors.toList());\n+    }\n+    \n+    private int calculateParametersCount(final Collection<ExpressionSegment> assignments) {\n+        int result = 0;\n+        for (ExpressionSegment each : assignments) {\n+            if (each instanceof ParameterMarkerExpressionSegment) {\n+                result++;\n+            }\n+        }\n+        return result;\n+    }\n+    \n+    private List<ExpressionSegment> getValueExpressions(final Collection<ExpressionSegment> assignments) {\n+        List<ExpressionSegment> result = new ArrayList<>(assignments.size());\n+        result.addAll(assignments);\n+        return result;\n+    }\n+    \n+    private List<Object> getParameters(final List<Object> parameters, final int parametersOffset) {\n+        if (0 == parametersCount) {\n+            return Collections.emptyList();\n+        }\n+        List<Object> result = new ArrayList<>(parametersCount);\n+        result.addAll(parameters.subList(parametersOffset, parametersOffset + parametersCount));\n+        return result;\n+    }\n+    \n+    /**\n+     * Get value.\n+     *\n+     * @param index index\n+     * @return value\n+     */\n+    public Object getValue(final int index) {\n+        ExpressionSegment valueExpression = valueExpressions.get(index);\n+        return valueExpression instanceof ParameterMarkerExpressionSegment ? parameters.get(getParameterIndex(valueExpression)) : ((LiteralExpressionSegment) valueExpression).getLiterals();\n+    }\n+    \n+    private int getParameterIndex(final ExpressionSegment valueExpression) {\n+        int result = 0;\n+        for (ExpressionSegment each : valueExpressions) {\n+            if (valueExpression == each) {\n+                return result;\n+            }\n+            if (each instanceof ParameterMarkerExpressionSegment) {\n+                result++;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"Can not get parameter index.\");\n+    }\n+    \n+    /**\n+     * get on duplicate key update column by index of this clause.\n+     * @param index index.", "originalCommit": "baf64d603bcb914432a8863d5da4f09032953e69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY2OTY0MA==", "url": "https://github.com/apache/shardingsphere/pull/5590#discussion_r425669640", "bodyText": "please keep one line between with java doc and @param", "author": "terrymanu", "createdAt": "2020-05-15T09:10:16Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/segment/insert/values/OnDuplicateUpdateContext.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.binder.segment.insert.values;\n+\n+import lombok.Getter;\n+import lombok.ToString;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.assignment.AssignmentSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.column.ColumnSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.ExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.simple.LiteralExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.simple.ParameterMarkerExpressionSegment;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Getter\n+@ToString\n+public class OnDuplicateUpdateContext {\n+    private final int parametersCount;\n+    \n+    private final List<ExpressionSegment> valueExpressions;\n+    \n+    private final List<Object> parameters;\n+    \n+    private final List<ColumnSegment> columns;\n+    \n+    public OnDuplicateUpdateContext(final Collection<AssignmentSegment> assignments, final List<Object> parameters, final int parametersOffset) {\n+        List<ExpressionSegment> expressionSegments = assignments.stream().map(AssignmentSegment::getValue).collect(Collectors.toList());\n+        parametersCount = calculateParametersCount(expressionSegments);\n+        valueExpressions = getValueExpressions(expressionSegments);\n+        this.parameters = getParameters(parameters, parametersOffset);\n+        columns = assignments.stream().map(AssignmentSegment::getColumn).collect(Collectors.toList());\n+    }\n+    \n+    private int calculateParametersCount(final Collection<ExpressionSegment> assignments) {\n+        int result = 0;\n+        for (ExpressionSegment each : assignments) {\n+            if (each instanceof ParameterMarkerExpressionSegment) {\n+                result++;\n+            }\n+        }\n+        return result;\n+    }\n+    \n+    private List<ExpressionSegment> getValueExpressions(final Collection<ExpressionSegment> assignments) {\n+        List<ExpressionSegment> result = new ArrayList<>(assignments.size());\n+        result.addAll(assignments);\n+        return result;\n+    }\n+    \n+    private List<Object> getParameters(final List<Object> parameters, final int parametersOffset) {\n+        if (0 == parametersCount) {\n+            return Collections.emptyList();\n+        }\n+        List<Object> result = new ArrayList<>(parametersCount);\n+        result.addAll(parameters.subList(parametersOffset, parametersOffset + parametersCount));\n+        return result;\n+    }\n+    \n+    /**\n+     * Get value.\n+     *\n+     * @param index index\n+     * @return value\n+     */\n+    public Object getValue(final int index) {\n+        ExpressionSegment valueExpression = valueExpressions.get(index);\n+        return valueExpression instanceof ParameterMarkerExpressionSegment ? parameters.get(getParameterIndex(valueExpression)) : ((LiteralExpressionSegment) valueExpression).getLiterals();\n+    }\n+    \n+    private int getParameterIndex(final ExpressionSegment valueExpression) {\n+        int result = 0;\n+        for (ExpressionSegment each : valueExpressions) {\n+            if (valueExpression == each) {\n+                return result;\n+            }\n+            if (each instanceof ParameterMarkerExpressionSegment) {\n+                result++;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"Can not get parameter index.\");\n+    }\n+    \n+    /**\n+     * get on duplicate key update column by index of this clause.\n+     * @param index index.", "originalCommit": "baf64d603bcb914432a8863d5da4f09032953e69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1721184aa9b632d5b0dde4feeb88a82c4bbc03d8", "url": "https://github.com/apache/shardingsphere/commit/1721184aa9b632d5b0dde4feeb88a82c4bbc03d8", "message": "Update OnDuplicateUpdateContext.java\n\ndocument format adjusted.", "committedDate": "2020-05-15T09:38:45Z", "type": "commit"}, {"oid": "bfdd6116c1f854a76eecf9738bd79e01aeb8ff82", "url": "https://github.com/apache/shardingsphere/commit/bfdd6116c1f854a76eecf9738bd79e01aeb8ff82", "message": "Update OnDuplicateUpdateContextTest.java\n\najust code style", "committedDate": "2020-05-15T10:02:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY5NTc4OA==", "url": "https://github.com/apache/shardingsphere/pull/5590#discussion_r425695788", "bodyText": "remove this empty line", "author": "neil4dong", "createdAt": "2020-05-15T09:58:10Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/test/java/org/apache/shardingsphere/sql/parser/binder/segment/insert/values/OnDuplicateUpdateContextTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.binder.segment.insert.values;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.assignment.AssignmentSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.column.ColumnSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.ExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.simple.LiteralExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.simple.ParameterMarkerExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.simple.SimpleExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.value.identifier.IdentifierValue;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+\n+public final class OnDuplicateUpdateContextTest {\n+    \n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    public void assertInstanceConstructedOk() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n+        Collection<AssignmentSegment> assignments = Lists.newArrayList();\n+        List<Object> parameters = Collections.emptyList();\n+        int parametersOffset = 0;\n+        OnDuplicateUpdateContext onDuplicateUpdateContext = new OnDuplicateUpdateContext(assignments, parameters, parametersOffset);\n+\n+        Method calculateParametersCountMethod = OnDuplicateUpdateContext.class.getDeclaredMethod(\"calculateParametersCount\", Collection.class);\n+        calculateParametersCountMethod.setAccessible(true);\n+        int calculateParametersCountResult = (int) calculateParametersCountMethod.invoke(onDuplicateUpdateContext, new Object[]{assignments});\n+        assertThat(onDuplicateUpdateContext.getParametersCount(), is(calculateParametersCountResult));\n+\n+        Method getValueExpressionsMethod = OnDuplicateUpdateContext.class.getDeclaredMethod(\"getValueExpressions\", Collection.class);\n+        getValueExpressionsMethod.setAccessible(true);\n+        List<ExpressionSegment> getValueExpressionsResult = (List<ExpressionSegment>) getValueExpressionsMethod.invoke(onDuplicateUpdateContext, new Object[]{assignments});\n+        assertThat(onDuplicateUpdateContext.getValueExpressions(), is(getValueExpressionsResult));\n+\n+        Method getParametersMethod = OnDuplicateUpdateContext.class.getDeclaredMethod(\"getParameters\", List.class, int.class);\n+        getParametersMethod.setAccessible(true);\n+        List<Object> getParametersResult = (List<Object>) getParametersMethod.invoke(onDuplicateUpdateContext, new Object[]{parameters, parametersOffset});\n+        assertThat(onDuplicateUpdateContext.getParameters(), is(getParametersResult));\n+    }\n+    \n+    @Test\n+    public void assertGetValueWhenParameterMarker() {\n+        Collection<AssignmentSegment> assignments = makeParameterMarkerExpressionAssignmentSegment();\n+        String parameterValue1 = \"test1\";\n+        String parameterValue2 = \"test2\";\n+        List<Object> parameters = Lists.newArrayList(parameterValue1, parameterValue2);\n+        int parametersOffset = 0;\n+        OnDuplicateUpdateContext onDuplicateUpdateContext = new OnDuplicateUpdateContext(assignments, parameters, parametersOffset);\n+        Object valueFromInsertValueContext1 = onDuplicateUpdateContext.getValue(0);\n+        assertThat(valueFromInsertValueContext1, is(parameterValue1));\n+", "originalCommit": "1721184aa9b632d5b0dde4feeb88a82c4bbc03d8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY5NjM4Mg==", "url": "https://github.com/apache/shardingsphere/pull/5590#discussion_r425696382", "bodyText": "remove this empty line", "author": "neil4dong", "createdAt": "2020-05-15T09:59:23Z", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/test/java/org/apache/shardingsphere/sql/parser/binder/segment/insert/values/OnDuplicateUpdateContextTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.binder.segment.insert.values;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.assignment.AssignmentSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.column.ColumnSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.ExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.simple.LiteralExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.simple.ParameterMarkerExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.simple.SimpleExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.value.identifier.IdentifierValue;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+\n+public final class OnDuplicateUpdateContextTest {\n+    \n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    public void assertInstanceConstructedOk() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n+        Collection<AssignmentSegment> assignments = Lists.newArrayList();\n+        List<Object> parameters = Collections.emptyList();\n+        int parametersOffset = 0;\n+        OnDuplicateUpdateContext onDuplicateUpdateContext = new OnDuplicateUpdateContext(assignments, parameters, parametersOffset);\n+", "originalCommit": "1721184aa9b632d5b0dde4feeb88a82c4bbc03d8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}