{"pr_number": 4531, "pr_title": "Add unit test case for sharding-orchestration-center-apollo module #4451", "pr_createdAt": "2020-02-29T10:01:00Z", "pr_url": "https://github.com/apache/shardingsphere/pull/4531", "timeline": [{"oid": "556dc52978a9b0ebfef722244119ecf71e5f7591", "url": "https://github.com/apache/shardingsphere/commit/556dc52978a9b0ebfef722244119ecf71e5f7591", "message": "Add unit test case for sharding-orchestration-center-apollo module #4451", "committedDate": "2020-02-29T09:56:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3Njk2Mw==", "url": "https://github.com/apache/shardingsphere/pull/4531#discussion_r386076963", "bodyText": "Please keep the blank character.", "author": "dongzl", "createdAt": "2020-03-01T04:51:59Z", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-apollo/src/test/java/org/apache/shardingsphere/orchestration/center/instance/ApolloInstanceTest.java", "diffHunk": "@@ -46,18 +51,22 @@\n     \n     @ClassRule\n     public static EmbeddedApollo embeddedApollo = new EmbeddedApollo();\n-    ", "originalCommit": "556dc52978a9b0ebfef722244119ecf71e5f7591", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NzA0OQ==", "url": "https://github.com/apache/shardingsphere/pull/4531#discussion_r386077049", "bodyText": "If assert null, we can assert directly, no need when ... thenReturn.", "author": "dongzl", "createdAt": "2020-03-01T04:53:58Z", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-apollo/src/test/java/org/apache/shardingsphere/orchestration/center/instance/ApolloInstanceTest.java", "diffHunk": "@@ -82,4 +91,65 @@ public void onChange(final DataChangedEvent dataChangedEvent) {\n         assertThat(changeEvent.getValue(), is(\"value3\"));\n         assertThat(changeEvent.getChangedType(), is(DataChangedEvent.ChangedType.UPDATED));\n     }\n+\n+    @Test\n+    @SneakyThrows\n+    public void assertGetWithNonExistentKey() {\n+        when(openApiWrapper.getValue(eq(\"test.nonExistentKey\"))).thenReturn(null);", "originalCommit": "556dc52978a9b0ebfef722244119ecf71e5f7591", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NzI2NQ==", "url": "https://github.com/apache/shardingsphere/pull/4531#discussion_r386077265", "bodyText": "Keep four blank characters.", "author": "dongzl", "createdAt": "2020-03-01T05:00:01Z", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-apollo/src/test/java/org/apache/shardingsphere/orchestration/center/instance/ApolloInstanceTest.java", "diffHunk": "@@ -82,4 +91,65 @@ public void onChange(final DataChangedEvent dataChangedEvent) {\n         assertThat(changeEvent.getValue(), is(\"value3\"));\n         assertThat(changeEvent.getChangedType(), is(DataChangedEvent.ChangedType.UPDATED));\n     }\n+\n+    @Test\n+    @SneakyThrows\n+    public void assertGetWithNonExistentKey() {\n+        when(openApiWrapper.getValue(eq(\"test.nonExistentKey\"))).thenReturn(null);\n+        assertNull(configCenterRepository.get(\"/test/nonExistentKey\"));\n+    }\n+", "originalCommit": "556dc52978a9b0ebfef722244119ecf71e5f7591", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NzQxMA==", "url": "https://github.com/apache/shardingsphere/pull/4531#discussion_r386077410", "bodyText": "Keep four blank characters. Please check every method.", "author": "dongzl", "createdAt": "2020-03-01T05:02:31Z", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-apollo/src/test/java/org/apache/shardingsphere/orchestration/center/instance/ApolloInstanceTest.java", "diffHunk": "@@ -82,4 +91,65 @@ public void onChange(final DataChangedEvent dataChangedEvent) {\n         assertThat(changeEvent.getValue(), is(\"value3\"));\n         assertThat(changeEvent.getChangedType(), is(DataChangedEvent.ChangedType.UPDATED));\n     }\n+\n+    @Test\n+    @SneakyThrows\n+    public void assertGetWithNonExistentKey() {\n+        when(openApiWrapper.getValue(eq(\"test.nonExistentKey\"))).thenReturn(null);\n+        assertNull(configCenterRepository.get(\"/test/nonExistentKey\"));\n+    }\n+\n+    @Test\n+    @SneakyThrows\n+    public void assertUpdate() {\n+        final SettableFuture<DataChangedEvent> future = SettableFuture.create();\n+        configCenterRepository.watch(\"/test/children/1\", new DataChangedEventListener() {\n+\n+            @Override\n+            public void onChange(final DataChangedEvent dataChangedEvent) {\n+                future.set(dataChangedEvent);\n+            }\n+        });\n+        embeddedApollo.addOrModifyProperty(\"orchestration\", \"test.children.1\", \"newValue1\");\n+        DataChangedEvent changeEvent = future.get(5, TimeUnit.SECONDS);\n+        assertThat(changeEvent.getKey(), is(\"/test/children/1\"));\n+        assertThat(changeEvent.getValue(), is(\"newValue1\"));\n+        assertThat(changeEvent.getChangedType(), is(DataChangedEvent.ChangedType.UPDATED));\n+    }\n+", "originalCommit": "556dc52978a9b0ebfef722244119ecf71e5f7591", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA4MDgxMA==", "url": "https://github.com/apache/shardingsphere/pull/4531#discussion_r386080810", "bodyText": "now we support delete?", "author": "kimmking", "createdAt": "2020-03-01T06:19:41Z", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-apollo/src/test/java/org/apache/shardingsphere/orchestration/center/instance/ApolloInstanceTest.java", "diffHunk": "@@ -82,4 +91,65 @@ public void onChange(final DataChangedEvent dataChangedEvent) {\n         assertThat(changeEvent.getValue(), is(\"value3\"));\n         assertThat(changeEvent.getChangedType(), is(DataChangedEvent.ChangedType.UPDATED));\n     }\n+\n+    @Test\n+    @SneakyThrows\n+    public void assertGetWithNonExistentKey() {\n+        when(openApiWrapper.getValue(eq(\"test.nonExistentKey\"))).thenReturn(null);\n+        assertNull(configCenterRepository.get(\"/test/nonExistentKey\"));\n+    }\n+\n+    @Test\n+    @SneakyThrows\n+    public void assertUpdate() {\n+        final SettableFuture<DataChangedEvent> future = SettableFuture.create();\n+        configCenterRepository.watch(\"/test/children/1\", new DataChangedEventListener() {\n+\n+            @Override\n+            public void onChange(final DataChangedEvent dataChangedEvent) {\n+                future.set(dataChangedEvent);\n+            }\n+        });\n+        embeddedApollo.addOrModifyProperty(\"orchestration\", \"test.children.1\", \"newValue1\");\n+        DataChangedEvent changeEvent = future.get(5, TimeUnit.SECONDS);\n+        assertThat(changeEvent.getKey(), is(\"/test/children/1\"));\n+        assertThat(changeEvent.getValue(), is(\"newValue1\"));\n+        assertThat(changeEvent.getChangedType(), is(DataChangedEvent.ChangedType.UPDATED));\n+    }\n+\n+    @Test\n+    @SneakyThrows\n+    public void assertWatchDeletedChangedType() {\n+        final SettableFuture<DataChangedEvent> future = SettableFuture.create();\n+        configCenterRepository.watch(\"/test/children/1\", new DataChangedEventListener() {\n+\n+            @Override\n+            public void onChange(final DataChangedEvent dataChangedEvent) {\n+                future.set(dataChangedEvent);\n+            }\n+        });\n+        embeddedApollo.deleteProperty(\"orchestration\", \"test.children.1\");\n+        DataChangedEvent changeEvent = future.get(5, TimeUnit.SECONDS);\n+        assertThat(changeEvent.getKey(), is(\"/test/children/1\"));\n+        assertNull(changeEvent.getValue());\n+        assertThat(changeEvent.getChangedType(), is(DataChangedEvent.ChangedType.DELETED));", "originalCommit": "556dc52978a9b0ebfef722244119ecf71e5f7591", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA4NzQyMw==", "url": "https://github.com/apache/shardingsphere/pull/4531#discussion_r386087423", "bodyText": "we not support   delete \uff0cbut can  add dataChangedEventListener", "author": "gongsiran", "createdAt": "2020-03-01T08:22:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA4MDgxMA=="}], "type": "inlineReview"}, {"oid": "20e20ce17ef7084d17c760a86f8a27ad2fed2a59", "url": "https://github.com/apache/shardingsphere/commit/20e20ce17ef7084d17c760a86f8a27ad2fed2a59", "message": "Add unit test case for sharding-orchestration-center-apollo module #4451", "committedDate": "2020-03-01T07:55:11Z", "type": "commit"}, {"oid": "bf927ada7a2783d1026bf12a0a7c88dc359a5c62", "url": "https://github.com/apache/shardingsphere/commit/bf927ada7a2783d1026bf12a0a7c88dc359a5c62", "message": "Merge branch 'temp' into issues4451", "committedDate": "2020-03-01T08:03:27Z", "type": "commit"}, {"oid": "546adcbcf0df45e5e1b0793f83bc55a9e7bb0ecf", "url": "https://github.com/apache/shardingsphere/commit/546adcbcf0df45e5e1b0793f83bc55a9e7bb0ecf", "message": "issues4451", "committedDate": "2020-03-01T08:11:02Z", "type": "commit"}, {"oid": "b4a186a535710e792b7bd77038f86a3b8c4c607f", "url": "https://github.com/apache/shardingsphere/commit/b4a186a535710e792b7bd77038f86a3b8c4c607f", "message": "issues4451", "committedDate": "2020-03-01T08:14:04Z", "type": "commit"}, {"oid": "fd3061731e073f75d6febe3619bd6cf61c2a50b0", "url": "https://github.com/apache/shardingsphere/commit/fd3061731e073f75d6febe3619bd6cf61c2a50b0", "message": "issues4451", "committedDate": "2020-03-01T08:15:17Z", "type": "commit"}, {"oid": "577c3cec6041bdab5a73aeeb3886fbb7657d7dd1", "url": "https://github.com/apache/shardingsphere/commit/577c3cec6041bdab5a73aeeb3886fbb7657d7dd1", "message": "Merge branch 'temp' into issues4451", "committedDate": "2020-03-02T03:31:26Z", "type": "commit"}, {"oid": "174355b237cb30ac55d58d8ab41ea2de2d477f9b", "url": "https://github.com/apache/shardingsphere/commit/174355b237cb30ac55d58d8ab41ea2de2d477f9b", "message": "Merge branch 'temp' into issues4451", "committedDate": "2020-03-02T04:41:42Z", "type": "commit"}, {"oid": "73659a2aa89bd8de1ce62040f89bac54f860aa47", "url": "https://github.com/apache/shardingsphere/commit/73659a2aa89bd8de1ce62040f89bac54f860aa47", "message": "Fixes_issues4451", "committedDate": "2020-03-02T04:43:27Z", "type": "commit"}, {"oid": "44039c73b912554191d2627427075f2302e8ec05", "url": "https://github.com/apache/shardingsphere/commit/44039c73b912554191d2627427075f2302e8ec05", "message": "Merge branch 'issues4451' of github.com:gongsiran/incubator-shardingsphere into issues4451", "committedDate": "2020-03-02T04:44:34Z", "type": "commit"}, {"oid": "f317f3d54897263557778acd85d2b603a6ec8e6d", "url": "https://github.com/apache/shardingsphere/commit/f317f3d54897263557778acd85d2b603a6ec8e6d", "message": "Fixes_issues4451", "committedDate": "2020-03-02T06:04:00Z", "type": "commit"}, {"oid": "bf8af9457be6ea30e01349254127a34cb57ca4a7", "url": "https://github.com/apache/shardingsphere/commit/bf8af9457be6ea30e01349254127a34cb57ca4a7", "message": "Merge branch 'temp' into issues4451", "committedDate": "2020-03-03T11:04:49Z", "type": "commit"}, {"oid": "32ac1395a3a7332ff28dc557433c3f7da8d469cb", "url": "https://github.com/apache/shardingsphere/commit/32ac1395a3a7332ff28dc557433c3f7da8d469cb", "message": "issues4451", "committedDate": "2020-03-03T11:05:11Z", "type": "commit"}, {"oid": "462b33d28a9a600a59bcfecc2d0e108e334f8357", "url": "https://github.com/apache/shardingsphere/commit/462b33d28a9a600a59bcfecc2d0e108e334f8357", "message": "issues4451", "committedDate": "2020-03-03T11:43:34Z", "type": "commit"}, {"oid": "46e713a69ed7b94589a6b6b3988c6d60689b3e8c", "url": "https://github.com/apache/shardingsphere/commit/46e713a69ed7b94589a6b6b3988c6d60689b3e8c", "message": "issues4451", "committedDate": "2020-03-03T12:29:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzMjU2NQ==", "url": "https://github.com/apache/shardingsphere/pull/4531#discussion_r387432565", "bodyText": "Why delete the property and then add it right now?", "author": "dongzl", "createdAt": "2020-03-04T03:35:02Z", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-apollo/src/test/java/org/apache/shardingsphere/orchestration/center/instance/ApolloInstanceTest.java", "diffHunk": "@@ -67,12 +78,62 @@ public void assertGet() {\n     @Test\n     @SneakyThrows\n     public void assertWatch() {\n+        assertWatchUpdateChangedType(\"/test/children/1\", \"value3\");\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertGetWithNonExistentKey() {\n+        assertNull(configCenterRepository.get(\"/test/nonExistentKey\"));\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertUpdate() {\n+        assertWatchUpdateChangedType(\"/test/children/1\", \"newValue1\");\n+        assertThat(configCenterRepository.get(\"/test/children/1\"), is(\"newValue1\"));\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertWatchDeletedChangedType() {\n         final SettableFuture<DataChangedEvent> future = SettableFuture.create();\n-        configCenterRepository.watch(\"/test/children/1\", future::set);\n+        configCenterRepository.watch(\"/test/children/1\", new DataChangedEventListener() {\n+    \n+            @Override\n+            public void onChange(final DataChangedEvent dataChangedEvent) {\n+                future.set(dataChangedEvent);\n+            }\n+        });\n+        embeddedApollo.deleteProperty(\"orchestration\", \"test.children.1\");\n         embeddedApollo.addOrModifyProperty(\"orchestration\", \"test.children.1\", \"value3\");", "originalCommit": "46e713a69ed7b94589a6b6b3988c6d60689b3e8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzMzM1Mw==", "url": "https://github.com/apache/shardingsphere/pull/4531#discussion_r387433353", "bodyText": "It's not a good idea for using assertWatchUpdateChangedType  method  at assertWatchAddChangedType  method, maybe we should rename these methods and make them more meaningful.\nI suggest this method rename assertWatchUpdateChangedTypeWithNotExistedKey", "author": "dongzl", "createdAt": "2020-03-04T03:38:50Z", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-apollo/src/test/java/org/apache/shardingsphere/orchestration/center/instance/ApolloInstanceTest.java", "diffHunk": "@@ -67,12 +78,62 @@ public void assertGet() {\n     @Test\n     @SneakyThrows\n     public void assertWatch() {\n+        assertWatchUpdateChangedType(\"/test/children/1\", \"value3\");\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertGetWithNonExistentKey() {\n+        assertNull(configCenterRepository.get(\"/test/nonExistentKey\"));\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertUpdate() {\n+        assertWatchUpdateChangedType(\"/test/children/1\", \"newValue1\");\n+        assertThat(configCenterRepository.get(\"/test/children/1\"), is(\"newValue1\"));\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertWatchDeletedChangedType() {\n         final SettableFuture<DataChangedEvent> future = SettableFuture.create();\n-        configCenterRepository.watch(\"/test/children/1\", future::set);\n+        configCenterRepository.watch(\"/test/children/1\", new DataChangedEventListener() {\n+    \n+            @Override\n+            public void onChange(final DataChangedEvent dataChangedEvent) {\n+                future.set(dataChangedEvent);\n+            }\n+        });\n+        embeddedApollo.deleteProperty(\"orchestration\", \"test.children.1\");\n         embeddedApollo.addOrModifyProperty(\"orchestration\", \"test.children.1\", \"value3\");\n         DataChangedEvent changeEvent = future.get(5, TimeUnit.SECONDS);\n         assertThat(changeEvent.getKey(), is(\"/test/children/1\"));\n-        assertThat(changeEvent.getValue(), is(\"value3\"));\n+        assertNull(changeEvent.getValue());\n+        assertThat(changeEvent.getChangedType(), is(DataChangedEvent.ChangedType.DELETED));\n+        assertNull(configCenterRepository.get(\"/test/children/1\"));\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertWatchAddChangedType() {\n+        assertWatchUpdateChangedType(\"/test/children/newKey\", \"newVaule\");", "originalCommit": "46e713a69ed7b94589a6b6b3988c6d60689b3e8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzMzc3MQ==", "url": "https://github.com/apache/shardingsphere/pull/4531#discussion_r387433771", "bodyText": "Keep this line's blank character with @Override.", "author": "dongzl", "createdAt": "2020-03-04T03:41:00Z", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-apollo/src/test/java/org/apache/shardingsphere/orchestration/center/instance/ApolloInstanceTest.java", "diffHunk": "@@ -67,12 +78,62 @@ public void assertGet() {\n     @Test\n     @SneakyThrows\n     public void assertWatch() {\n+        assertWatchUpdateChangedType(\"/test/children/1\", \"value3\");\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertGetWithNonExistentKey() {\n+        assertNull(configCenterRepository.get(\"/test/nonExistentKey\"));\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertUpdate() {\n+        assertWatchUpdateChangedType(\"/test/children/1\", \"newValue1\");\n+        assertThat(configCenterRepository.get(\"/test/children/1\"), is(\"newValue1\"));\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertWatchDeletedChangedType() {\n         final SettableFuture<DataChangedEvent> future = SettableFuture.create();\n-        configCenterRepository.watch(\"/test/children/1\", future::set);\n+        configCenterRepository.watch(\"/test/children/1\", new DataChangedEventListener() {\n+    ", "originalCommit": "46e713a69ed7b94589a6b6b3988c6d60689b3e8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzMzgxMg==", "url": "https://github.com/apache/shardingsphere/pull/4531#discussion_r387433812", "bodyText": "Keep this line's blank character with @Override.", "author": "dongzl", "createdAt": "2020-03-04T03:41:14Z", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-apollo/src/test/java/org/apache/shardingsphere/orchestration/center/instance/ApolloInstanceTest.java", "diffHunk": "@@ -67,12 +78,62 @@ public void assertGet() {\n     @Test\n     @SneakyThrows\n     public void assertWatch() {\n+        assertWatchUpdateChangedType(\"/test/children/1\", \"value3\");\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertGetWithNonExistentKey() {\n+        assertNull(configCenterRepository.get(\"/test/nonExistentKey\"));\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertUpdate() {\n+        assertWatchUpdateChangedType(\"/test/children/1\", \"newValue1\");\n+        assertThat(configCenterRepository.get(\"/test/children/1\"), is(\"newValue1\"));\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertWatchDeletedChangedType() {\n         final SettableFuture<DataChangedEvent> future = SettableFuture.create();\n-        configCenterRepository.watch(\"/test/children/1\", future::set);\n+        configCenterRepository.watch(\"/test/children/1\", new DataChangedEventListener() {\n+    \n+            @Override\n+            public void onChange(final DataChangedEvent dataChangedEvent) {\n+                future.set(dataChangedEvent);\n+            }\n+        });\n+        embeddedApollo.deleteProperty(\"orchestration\", \"test.children.1\");\n         embeddedApollo.addOrModifyProperty(\"orchestration\", \"test.children.1\", \"value3\");\n         DataChangedEvent changeEvent = future.get(5, TimeUnit.SECONDS);\n         assertThat(changeEvent.getKey(), is(\"/test/children/1\"));\n-        assertThat(changeEvent.getValue(), is(\"value3\"));\n+        assertNull(changeEvent.getValue());\n+        assertThat(changeEvent.getChangedType(), is(DataChangedEvent.ChangedType.DELETED));\n+        assertNull(configCenterRepository.get(\"/test/children/1\"));\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertWatchAddChangedType() {\n+        assertWatchUpdateChangedType(\"/test/children/newKey\", \"newVaule\");\n+    }\n+    \n+    @SneakyThrows\n+    private void assertWatchUpdateChangedType(final String key, final String newVaule) {\n+        final SettableFuture<DataChangedEvent> future = SettableFuture.create();\n+        configCenterRepository.watch(key, new DataChangedEventListener() {\n+        ", "originalCommit": "46e713a69ed7b94589a6b6b3988c6d60689b3e8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b5b7646034708ed1f2e8f4d4469eba74bd370f07", "url": "https://github.com/apache/shardingsphere/commit/b5b7646034708ed1f2e8f4d4469eba74bd370f07", "message": "Merge branch 'temp' into issues4451", "committedDate": "2020-03-04T08:01:11Z", "type": "commit"}, {"oid": "af499752942fd5367267ba9cc5677a3e541a47ee", "url": "https://github.com/apache/shardingsphere/commit/af499752942fd5367267ba9cc5677a3e541a47ee", "message": "issues4451", "committedDate": "2020-03-04T08:01:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2NDc3OQ==", "url": "https://github.com/apache/shardingsphere/pull/4531#discussion_r387464779", "bodyText": "I suggest this method rename assertWatchUpdateChangedTypeWithExistedKey.", "author": "dongzl", "createdAt": "2020-03-04T06:07:25Z", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-apollo/src/test/java/org/apache/shardingsphere/orchestration/center/instance/ApolloInstanceTest.java", "diffHunk": "@@ -67,12 +78,62 @@ public void assertGet() {\n     @Test\n     @SneakyThrows\n     public void assertWatch() {\n+        assertWatchUpdateChangedType(\"/test/children/1\", \"value3\");\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertGetWithNonExistentKey() {\n+        assertNull(configCenterRepository.get(\"/test/nonExistentKey\"));\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertUpdate() {", "originalCommit": "46e713a69ed7b94589a6b6b3988c6d60689b3e8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}