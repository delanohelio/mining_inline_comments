{"pr_number": 1853, "pr_title": "Add a test to change WebLogic credentials", "pr_createdAt": "2020-08-06T14:57:39Z", "pr_url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853", "timeline": [{"oid": "5cfa057c16106d6d519e597e359ee22a586b1bc6", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5cfa057c16106d6d519e597e359ee22a586b1bc6", "message": "Adding test to change the admin credentials for domain running in PV", "committedDate": "2020-08-04T22:05:53Z", "type": "commit"}, {"oid": "c9ab68aadd505ca30dcee2aa89bf9418e1a83c79", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c9ab68aadd505ca30dcee2aa89bf9418e1a83c79", "message": "Fx the test name", "committedDate": "2020-08-04T22:44:35Z", "type": "commit"}, {"oid": "b644cfe75bce29d6079ce6a5cd7db499012f6cc2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b644cfe75bce29d6079ce6a5cd7db499012f6cc2", "message": "fix secret name", "committedDate": "2020-08-05T00:50:06Z", "type": "commit"}, {"oid": "1050c6e0d48c11563ac3966569c52c035f3fea3f", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1050c6e0d48c11563ac3966569c52c035f3fea3f", "message": "add restartVersion instead of replace", "committedDate": "2020-08-05T01:05:58Z", "type": "commit"}, {"oid": "469996e3c58c2c00980e799f48a5b981046778b4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/469996e3c58c2c00980e799f48a5b981046778b4", "message": "fix json", "committedDate": "2020-08-05T04:57:34Z", "type": "commit"}, {"oid": "ac4d4c04f0d02141dfb10a6647c593be508f9f55", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ac4d4c04f0d02141dfb10a6647c593be508f9f55", "message": "change the method order", "committedDate": "2020-08-05T05:27:02Z", "type": "commit"}, {"oid": "bf29335177bc724f36d8021aa454bde1f7ecb144", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/bf29335177bc724f36d8021aa454bde1f7ecb144", "message": "fix managed server names", "committedDate": "2020-08-05T14:25:23Z", "type": "commit"}, {"oid": "994208d392c41c62507574d7c70c76f5c110614b", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/994208d392c41c62507574d7c70c76f5c110614b", "message": "Fix assertionerror class for invalid login", "committedDate": "2020-08-05T14:55:30Z", "type": "commit"}, {"oid": "c467dbedf2231165c7154641d8f995cdbe71ee90", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c467dbedf2231165c7154641d8f995cdbe71ee90", "message": "Fix comments", "committedDate": "2020-08-05T15:56:21Z", "type": "commit"}, {"oid": "66640b254e66995588ca34d57d3a9f9b3f5e6b65", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/66640b254e66995588ca34d57d3a9f9b3f5e6b65", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into credential-change-pv-domain", "committedDate": "2020-08-06T14:52:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUzMzY2NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r466533664", "bodyText": "getting t3channel port here, fix the log message", "author": "vanajamukkara", "createdAt": "2020-08-06T16:25:01Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIntrospectVersion.java", "diffHunk": "@@ -731,6 +737,162 @@ public void testCreateNewCluster() {\n \n   }\n \n+  /**\n+   * Test changes the WebLogic credentials and verifies the servers can startup and function with changed credentials.\n+   * a. Creates new WebLogic credentials using WLST.\n+   * b. Creates new Kubernetes secret for WebLogic credentials.\n+   * c. Patch the Domain Resource with new credentials, restartVerion and introspectVersion.\n+   * d. Verifies the servers in the domain restarted and accessing the admin server console with new password works.\n+   * e. Verifies the the admin server console access with old credentials fail.\n+   */\n+  @Order(3)\n+  @Test\n+  @DisplayName(\"Test change WebLogic admin credentials for domain running in persistent volume\")\n+  public void testCredentialChange() {\n+\n+    final String domainUid = \"mydomain\";\n+\n+    final String adminServerName = \"admin-server\";\n+    final String adminServerPodName = domainUid + \"-\" + adminServerName;\n+\n+    final String managedServerNameBase = \"ms-\";\n+    String managedServerPodNamePrefix = domainUid + \"-\" + managedServerNameBase;\n+\n+    int replicaCount = 3;\n+\n+    logger.info(\"Getting node port for default channel\");", "originalCommit": "66640b254e66995588ca34d57d3a9f9b3f5e6b65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA2Mjg1Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r468062853", "bodyText": "fixed", "author": "sankarpn", "createdAt": "2020-08-10T17:26:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUzMzY2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUzMzg5Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r466533892", "bodyText": "add assert, port should not be -1", "author": "vanajamukkara", "createdAt": "2020-08-06T16:25:21Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIntrospectVersion.java", "diffHunk": "@@ -731,6 +737,162 @@ public void testCreateNewCluster() {\n \n   }\n \n+  /**\n+   * Test changes the WebLogic credentials and verifies the servers can startup and function with changed credentials.\n+   * a. Creates new WebLogic credentials using WLST.\n+   * b. Creates new Kubernetes secret for WebLogic credentials.\n+   * c. Patch the Domain Resource with new credentials, restartVerion and introspectVersion.\n+   * d. Verifies the servers in the domain restarted and accessing the admin server console with new password works.\n+   * e. Verifies the the admin server console access with old credentials fail.\n+   */\n+  @Order(3)\n+  @Test\n+  @DisplayName(\"Test change WebLogic admin credentials for domain running in persistent volume\")\n+  public void testCredentialChange() {\n+\n+    final String domainUid = \"mydomain\";\n+\n+    final String adminServerName = \"admin-server\";\n+    final String adminServerPodName = domainUid + \"-\" + adminServerName;\n+\n+    final String managedServerNameBase = \"ms-\";\n+    String managedServerPodNamePrefix = domainUid + \"-\" + managedServerNameBase;\n+\n+    int replicaCount = 3;\n+\n+    logger.info(\"Getting node port for default channel\");\n+    int adminServerT3Port = getServiceNodePort(introDomainNamespace, adminServerPodName + \"-external\", \"t3channel\");", "originalCommit": "66640b254e66995588ca34d57d3a9f9b3f5e6b65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1OTAwMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r468059003", "bodyText": "fixed", "author": "sankarpn", "createdAt": "2020-08-10T17:20:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUzMzg5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUzNDIwOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r466534209", "bodyText": "typo - change, does the comment apply to the use case?", "author": "vanajamukkara", "createdAt": "2020-08-06T16:25:56Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIntrospectVersion.java", "diffHunk": "@@ -731,6 +737,162 @@ public void testCreateNewCluster() {\n \n   }\n \n+  /**\n+   * Test changes the WebLogic credentials and verifies the servers can startup and function with changed credentials.\n+   * a. Creates new WebLogic credentials using WLST.\n+   * b. Creates new Kubernetes secret for WebLogic credentials.\n+   * c. Patch the Domain Resource with new credentials, restartVerion and introspectVersion.\n+   * d. Verifies the servers in the domain restarted and accessing the admin server console with new password works.\n+   * e. Verifies the the admin server console access with old credentials fail.\n+   */\n+  @Order(3)\n+  @Test\n+  @DisplayName(\"Test change WebLogic admin credentials for domain running in persistent volume\")\n+  public void testCredentialChange() {\n+\n+    final String domainUid = \"mydomain\";\n+\n+    final String adminServerName = \"admin-server\";\n+    final String adminServerPodName = domainUid + \"-\" + adminServerName;\n+\n+    final String managedServerNameBase = \"ms-\";\n+    String managedServerPodNamePrefix = domainUid + \"-\" + managedServerNameBase;\n+\n+    int replicaCount = 3;\n+\n+    logger.info(\"Getting node port for default channel\");\n+    int adminServerT3Port = getServiceNodePort(introDomainNamespace, adminServerPodName + \"-external\", \"t3channel\");\n+\n+    // get the pod creation time stamps\n+    LinkedHashMap<String, DateTime> pods = new LinkedHashMap<>();\n+    // get the creation time of the admin server pod before patching\n+    DateTime adminPodCreationTime = getPodCreationTime(introDomainNamespace, adminServerPodName);\n+    pods.put(adminServerPodName, adminPodCreationTime);\n+    // get the creation time of the managed server pods before patching\n+    for (int i = 1; i <= replicaCount; i++) {\n+      pods.put(managedServerPodNamePrefix + i,\n+          getPodCreationTime(introDomainNamespace, managedServerPodNamePrefix + i));\n+    }\n+\n+    // create a temporary WebLogic WLST property file\n+    File wlstPropertiesFile = assertDoesNotThrow(() -> File.createTempFile(\"wlst\", \"properties\"),\n+        \"Creating WLST properties file failed\");\n+    Properties p = new Properties();\n+    p.setProperty(\"admin_host\", K8S_NODEPORT_HOST);\n+    p.setProperty(\"admin_port\", Integer.toString(adminServerT3Port));\n+    p.setProperty(\"admin_username\", ADMIN_USERNAME_DEFAULT);\n+    p.setProperty(\"admin_password\", ADMIN_PASSWORD_DEFAULT);\n+    p.setProperty(\"new_admin_user\", ADMIN_USERNAME_PATCH);\n+    p.setProperty(\"new_admin_password\", ADMIN_PASSWORD_PATCH);\n+    p.setProperty(\"test_name\", \"replace_admin_user\");\n+    assertDoesNotThrow(() -> p.store(new FileOutputStream(wlstPropertiesFile), \"wlst properties file\"),\n+        \"Failed to write the WLST properties to file\");\n+\n+    // changet the admin server port to a different value to force pod restart", "originalCommit": "66640b254e66995588ca34d57d3a9f9b3f5e6b65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA2Mjk2NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r468062965", "bodyText": "fixed", "author": "sankarpn", "createdAt": "2020-08-10T17:27:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUzNDIwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU0MjM2Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r466542366", "bodyText": "getServiceNodePort() doesn't throw Exception, check port returned is not -1.", "author": "vanajamukkara", "createdAt": "2020-08-06T16:39:56Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIntrospectVersion.java", "diffHunk": "@@ -731,6 +737,162 @@ public void testCreateNewCluster() {\n \n   }\n \n+  /**\n+   * Test changes the WebLogic credentials and verifies the servers can startup and function with changed credentials.\n+   * a. Creates new WebLogic credentials using WLST.\n+   * b. Creates new Kubernetes secret for WebLogic credentials.\n+   * c. Patch the Domain Resource with new credentials, restartVerion and introspectVersion.\n+   * d. Verifies the servers in the domain restarted and accessing the admin server console with new password works.\n+   * e. Verifies the the admin server console access with old credentials fail.\n+   */\n+  @Order(3)\n+  @Test\n+  @DisplayName(\"Test change WebLogic admin credentials for domain running in persistent volume\")\n+  public void testCredentialChange() {\n+\n+    final String domainUid = \"mydomain\";\n+\n+    final String adminServerName = \"admin-server\";\n+    final String adminServerPodName = domainUid + \"-\" + adminServerName;\n+\n+    final String managedServerNameBase = \"ms-\";\n+    String managedServerPodNamePrefix = domainUid + \"-\" + managedServerNameBase;\n+\n+    int replicaCount = 3;\n+\n+    logger.info(\"Getting node port for default channel\");\n+    int adminServerT3Port = getServiceNodePort(introDomainNamespace, adminServerPodName + \"-external\", \"t3channel\");\n+\n+    // get the pod creation time stamps\n+    LinkedHashMap<String, DateTime> pods = new LinkedHashMap<>();\n+    // get the creation time of the admin server pod before patching\n+    DateTime adminPodCreationTime = getPodCreationTime(introDomainNamespace, adminServerPodName);\n+    pods.put(adminServerPodName, adminPodCreationTime);\n+    // get the creation time of the managed server pods before patching\n+    for (int i = 1; i <= replicaCount; i++) {\n+      pods.put(managedServerPodNamePrefix + i,\n+          getPodCreationTime(introDomainNamespace, managedServerPodNamePrefix + i));\n+    }\n+\n+    // create a temporary WebLogic WLST property file\n+    File wlstPropertiesFile = assertDoesNotThrow(() -> File.createTempFile(\"wlst\", \"properties\"),\n+        \"Creating WLST properties file failed\");\n+    Properties p = new Properties();\n+    p.setProperty(\"admin_host\", K8S_NODEPORT_HOST);\n+    p.setProperty(\"admin_port\", Integer.toString(adminServerT3Port));\n+    p.setProperty(\"admin_username\", ADMIN_USERNAME_DEFAULT);\n+    p.setProperty(\"admin_password\", ADMIN_PASSWORD_DEFAULT);\n+    p.setProperty(\"new_admin_user\", ADMIN_USERNAME_PATCH);\n+    p.setProperty(\"new_admin_password\", ADMIN_PASSWORD_PATCH);\n+    p.setProperty(\"test_name\", \"replace_admin_user\");\n+    assertDoesNotThrow(() -> p.store(new FileOutputStream(wlstPropertiesFile), \"wlst properties file\"),\n+        \"Failed to write the WLST properties to file\");\n+\n+    // changet the admin server port to a different value to force pod restart\n+    logger.info(\"Creating a new WebLogic user/password {0}/{1} in default security realm\",\n+        ADMIN_USERNAME_PATCH, ADMIN_PASSWORD_PATCH);\n+    Path configScript = Paths.get(RESOURCE_DIR, \"python-scripts\", \"introspect_version_script.py\");\n+    executeWLSTScript(configScript, wlstPropertiesFile.toPath(), introDomainNamespace);\n+\n+    // create a new secret for admin credentials\n+    logger.info(\"Create a new secret that contains new WebLogic admin credentials\");\n+    String newWlSecretName = \"weblogic-credentials-new\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        newWlSecretName,\n+        introDomainNamespace,\n+        ADMIN_USERNAME_PATCH,\n+        ADMIN_PASSWORD_PATCH),\n+        String.format(\"createSecret failed for %s\", newWlSecretName));\n+\n+    // delete the old secret\n+    logger.info(\"Deleting the old secret\");\n+    deleteSecret(wlSecretName, introDomainNamespace);\n+\n+    String introspectVersion = assertDoesNotThrow(() -> getNextIntrospectVersion(domainUid, introDomainNamespace));\n+    String oldVersion = assertDoesNotThrow(()\n+        -> getDomainCustomResource(domainUid, introDomainNamespace).getSpec().getRestartVersion());\n+    int newVersion = oldVersion == null ? 1 : Integer.valueOf(oldVersion) + 1;\n+\n+    logger.info(\"patch the domain resource with new WebLogic secret, restartVersion and introspectVersion\");\n+    String patchStr\n+        = \"[\"\n+        + \"{\\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/spec/webLogicCredentialsSecret/name\\\", \"\n+        + \"\\\"value\\\": \\\"\" + newWlSecretName + \"\\\"},\"\n+        + \"{\\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/spec/introspectVersion\\\", \"\n+        + \"\\\"value\\\": \\\"\" + introspectVersion + \"\\\"},\"\n+        + \"{\\\"op\\\": \\\"add\\\", \\\"path\\\": \\\"/spec/restartVersion\\\", \"\n+        + \"\\\"value\\\": \\\"\" + newVersion + \"\\\"}\"\n+        + \"]\";\n+    logger.info(\"Updating domain configuration using patch string: {0}\\n\", patchStr);\n+    V1Patch patch = new V1Patch(patchStr);\n+    assertTrue(patchDomainCustomResource(domainUid, introDomainNamespace, patch, V1Patch.PATCH_FORMAT_JSON_PATCH),\n+        \"Failed to patch domain\");\n+\n+    //verify the introspector pod is created and runs\n+    String introspectPodName = domainUid + \"-\" + \"introspect-domain-job\";\n+\n+    checkPodExists(introspectPodName, domainUid, introDomainNamespace);\n+    checkPodDoesNotExist(introspectPodName, domainUid, introDomainNamespace);\n+\n+    //verify the pods are restarted\n+    verifyRollingRestartOccurred(pods, 1, introDomainNamespace);\n+\n+    // verify the admin server service created\n+    checkServiceExists(adminServerPodName, introDomainNamespace);\n+\n+    // verify admin server pod is ready\n+    checkPodReady(adminServerPodName, domainUid, introDomainNamespace);\n+\n+    // verify new cluster managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Checking managed server service {0} is created in namespace {1}\",\n+          managedServerPodNamePrefix + i, introDomainNamespace);\n+      checkServiceExists(managedServerPodNamePrefix + i, introDomainNamespace);\n+    }\n+\n+    // verify new cluster managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Waiting for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPodNamePrefix + i, introDomainNamespace);\n+      checkPodReady(managedServerPodNamePrefix + i, domainUid, introDomainNamespace);\n+    }\n+\n+    logger.info(\"Getting the list of servers using the listServers\");\n+    String baseUri = \"http://\" + K8S_NODEPORT_HOST + \":\" + adminServerT3Port + \"/clusterview/\";\n+    String serverListUri = \"ClusterViewServlet?listServers=true\";\n+    HttpResponse<String> response = null;\n+    for (int i = 0; i < 5; i++) {\n+      assertDoesNotThrow(() -> TimeUnit.SECONDS.sleep(10));\n+      response = assertDoesNotThrow(() -> OracleHttpClient.get(baseUri + serverListUri, true));\n+      assertEquals(200, response.statusCode(), \"Status code not equals to 200\");\n+    }\n+\n+    // verify managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Checking {0} health\", managedServerNameBase + i);\n+      assertTrue(response.body().contains(managedServerNameBase + i + \":HEALTH_OK\"),\n+          \"Didn't get \" + managedServerNameBase + i + \":HEALTH_OK\");\n+    }\n+\n+    logger.info(\"Getting node port for default channel\");\n+    int serviceNodePort = assertDoesNotThrow(() -> getServiceNodePort(", "originalCommit": "66640b254e66995588ca34d57d3a9f9b3f5e6b65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA2MjU2MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r468062561", "bodyText": "fixed", "author": "sankarpn", "createdAt": "2020-08-10T17:26:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU0MjM2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU0NjE4Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r466546182", "bodyText": "succeeded", "author": "vanajamukkara", "createdAt": "2020-08-06T16:46:13Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIntrospectVersion.java", "diffHunk": "@@ -731,6 +737,162 @@ public void testCreateNewCluster() {\n \n   }\n \n+  /**\n+   * Test changes the WebLogic credentials and verifies the servers can startup and function with changed credentials.\n+   * a. Creates new WebLogic credentials using WLST.\n+   * b. Creates new Kubernetes secret for WebLogic credentials.\n+   * c. Patch the Domain Resource with new credentials, restartVerion and introspectVersion.\n+   * d. Verifies the servers in the domain restarted and accessing the admin server console with new password works.\n+   * e. Verifies the the admin server console access with old credentials fail.\n+   */\n+  @Order(3)\n+  @Test\n+  @DisplayName(\"Test change WebLogic admin credentials for domain running in persistent volume\")\n+  public void testCredentialChange() {\n+\n+    final String domainUid = \"mydomain\";\n+\n+    final String adminServerName = \"admin-server\";\n+    final String adminServerPodName = domainUid + \"-\" + adminServerName;\n+\n+    final String managedServerNameBase = \"ms-\";\n+    String managedServerPodNamePrefix = domainUid + \"-\" + managedServerNameBase;\n+\n+    int replicaCount = 3;\n+\n+    logger.info(\"Getting node port for default channel\");\n+    int adminServerT3Port = getServiceNodePort(introDomainNamespace, adminServerPodName + \"-external\", \"t3channel\");\n+\n+    // get the pod creation time stamps\n+    LinkedHashMap<String, DateTime> pods = new LinkedHashMap<>();\n+    // get the creation time of the admin server pod before patching\n+    DateTime adminPodCreationTime = getPodCreationTime(introDomainNamespace, adminServerPodName);\n+    pods.put(adminServerPodName, adminPodCreationTime);\n+    // get the creation time of the managed server pods before patching\n+    for (int i = 1; i <= replicaCount; i++) {\n+      pods.put(managedServerPodNamePrefix + i,\n+          getPodCreationTime(introDomainNamespace, managedServerPodNamePrefix + i));\n+    }\n+\n+    // create a temporary WebLogic WLST property file\n+    File wlstPropertiesFile = assertDoesNotThrow(() -> File.createTempFile(\"wlst\", \"properties\"),\n+        \"Creating WLST properties file failed\");\n+    Properties p = new Properties();\n+    p.setProperty(\"admin_host\", K8S_NODEPORT_HOST);\n+    p.setProperty(\"admin_port\", Integer.toString(adminServerT3Port));\n+    p.setProperty(\"admin_username\", ADMIN_USERNAME_DEFAULT);\n+    p.setProperty(\"admin_password\", ADMIN_PASSWORD_DEFAULT);\n+    p.setProperty(\"new_admin_user\", ADMIN_USERNAME_PATCH);\n+    p.setProperty(\"new_admin_password\", ADMIN_PASSWORD_PATCH);\n+    p.setProperty(\"test_name\", \"replace_admin_user\");\n+    assertDoesNotThrow(() -> p.store(new FileOutputStream(wlstPropertiesFile), \"wlst properties file\"),\n+        \"Failed to write the WLST properties to file\");\n+\n+    // changet the admin server port to a different value to force pod restart\n+    logger.info(\"Creating a new WebLogic user/password {0}/{1} in default security realm\",\n+        ADMIN_USERNAME_PATCH, ADMIN_PASSWORD_PATCH);\n+    Path configScript = Paths.get(RESOURCE_DIR, \"python-scripts\", \"introspect_version_script.py\");\n+    executeWLSTScript(configScript, wlstPropertiesFile.toPath(), introDomainNamespace);\n+\n+    // create a new secret for admin credentials\n+    logger.info(\"Create a new secret that contains new WebLogic admin credentials\");\n+    String newWlSecretName = \"weblogic-credentials-new\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        newWlSecretName,\n+        introDomainNamespace,\n+        ADMIN_USERNAME_PATCH,\n+        ADMIN_PASSWORD_PATCH),\n+        String.format(\"createSecret failed for %s\", newWlSecretName));\n+\n+    // delete the old secret\n+    logger.info(\"Deleting the old secret\");\n+    deleteSecret(wlSecretName, introDomainNamespace);\n+\n+    String introspectVersion = assertDoesNotThrow(() -> getNextIntrospectVersion(domainUid, introDomainNamespace));\n+    String oldVersion = assertDoesNotThrow(()\n+        -> getDomainCustomResource(domainUid, introDomainNamespace).getSpec().getRestartVersion());\n+    int newVersion = oldVersion == null ? 1 : Integer.valueOf(oldVersion) + 1;\n+\n+    logger.info(\"patch the domain resource with new WebLogic secret, restartVersion and introspectVersion\");\n+    String patchStr\n+        = \"[\"\n+        + \"{\\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/spec/webLogicCredentialsSecret/name\\\", \"\n+        + \"\\\"value\\\": \\\"\" + newWlSecretName + \"\\\"},\"\n+        + \"{\\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/spec/introspectVersion\\\", \"\n+        + \"\\\"value\\\": \\\"\" + introspectVersion + \"\\\"},\"\n+        + \"{\\\"op\\\": \\\"add\\\", \\\"path\\\": \\\"/spec/restartVersion\\\", \"\n+        + \"\\\"value\\\": \\\"\" + newVersion + \"\\\"}\"\n+        + \"]\";\n+    logger.info(\"Updating domain configuration using patch string: {0}\\n\", patchStr);\n+    V1Patch patch = new V1Patch(patchStr);\n+    assertTrue(patchDomainCustomResource(domainUid, introDomainNamespace, patch, V1Patch.PATCH_FORMAT_JSON_PATCH),\n+        \"Failed to patch domain\");\n+\n+    //verify the introspector pod is created and runs\n+    String introspectPodName = domainUid + \"-\" + \"introspect-domain-job\";\n+\n+    checkPodExists(introspectPodName, domainUid, introDomainNamespace);\n+    checkPodDoesNotExist(introspectPodName, domainUid, introDomainNamespace);\n+\n+    //verify the pods are restarted\n+    verifyRollingRestartOccurred(pods, 1, introDomainNamespace);\n+\n+    // verify the admin server service created\n+    checkServiceExists(adminServerPodName, introDomainNamespace);\n+\n+    // verify admin server pod is ready\n+    checkPodReady(adminServerPodName, domainUid, introDomainNamespace);\n+\n+    // verify new cluster managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Checking managed server service {0} is created in namespace {1}\",\n+          managedServerPodNamePrefix + i, introDomainNamespace);\n+      checkServiceExists(managedServerPodNamePrefix + i, introDomainNamespace);\n+    }\n+\n+    // verify new cluster managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Waiting for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPodNamePrefix + i, introDomainNamespace);\n+      checkPodReady(managedServerPodNamePrefix + i, domainUid, introDomainNamespace);\n+    }\n+\n+    logger.info(\"Getting the list of servers using the listServers\");\n+    String baseUri = \"http://\" + K8S_NODEPORT_HOST + \":\" + adminServerT3Port + \"/clusterview/\";\n+    String serverListUri = \"ClusterViewServlet?listServers=true\";\n+    HttpResponse<String> response = null;\n+    for (int i = 0; i < 5; i++) {\n+      assertDoesNotThrow(() -> TimeUnit.SECONDS.sleep(10));\n+      response = assertDoesNotThrow(() -> OracleHttpClient.get(baseUri + serverListUri, true));\n+      assertEquals(200, response.statusCode(), \"Status code not equals to 200\");\n+    }\n+\n+    // verify managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Checking {0} health\", managedServerNameBase + i);\n+      assertTrue(response.body().contains(managedServerNameBase + i + \":HEALTH_OK\"),\n+          \"Didn't get \" + managedServerNameBase + i + \":HEALTH_OK\");\n+    }\n+\n+    logger.info(\"Getting node port for default channel\");\n+    int serviceNodePort = assertDoesNotThrow(() -> getServiceNodePort(\n+        introDomainNamespace, adminServerPodName + \"-external\", \"default\"),\n+        \"Getting admin server node port failed\");\n+\n+    logger.info(\"Validating WebLogic admin server access by login to console\");\n+    boolean loginSuccessful = assertDoesNotThrow(()\n+        -> adminNodePortAccessible(serviceNodePort, ADMIN_USERNAME_PATCH, ADMIN_PASSWORD_PATCH),\n+        \"Access to admin server node port failed\");\n+    assertTrue(loginSuccessful, \"Console login validation failed\");\n+\n+    logger.info(\"Validating WebLogic admin server access by login to console using old credentials\");\n+    assertThrows(AssertionFailedError.class, ()\n+        -> adminNodePortAccessible(serviceNodePort, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT),\n+        \"Accessing using old user/password succedded, supposed to fail\");", "originalCommit": "66640b254e66995588ca34d57d3a9f9b3f5e6b65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA2MzA1OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r468063058", "bodyText": "corrected", "author": "sankarpn", "createdAt": "2020-08-10T17:27:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU0NjE4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU0NjgxOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r466546818", "bodyText": "fix the assert and loginSuccessful is not captured", "author": "vanajamukkara", "createdAt": "2020-08-06T16:47:23Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIntrospectVersion.java", "diffHunk": "@@ -731,6 +737,162 @@ public void testCreateNewCluster() {\n \n   }\n \n+  /**\n+   * Test changes the WebLogic credentials and verifies the servers can startup and function with changed credentials.\n+   * a. Creates new WebLogic credentials using WLST.\n+   * b. Creates new Kubernetes secret for WebLogic credentials.\n+   * c. Patch the Domain Resource with new credentials, restartVerion and introspectVersion.\n+   * d. Verifies the servers in the domain restarted and accessing the admin server console with new password works.\n+   * e. Verifies the the admin server console access with old credentials fail.\n+   */\n+  @Order(3)\n+  @Test\n+  @DisplayName(\"Test change WebLogic admin credentials for domain running in persistent volume\")\n+  public void testCredentialChange() {\n+\n+    final String domainUid = \"mydomain\";\n+\n+    final String adminServerName = \"admin-server\";\n+    final String adminServerPodName = domainUid + \"-\" + adminServerName;\n+\n+    final String managedServerNameBase = \"ms-\";\n+    String managedServerPodNamePrefix = domainUid + \"-\" + managedServerNameBase;\n+\n+    int replicaCount = 3;\n+\n+    logger.info(\"Getting node port for default channel\");\n+    int adminServerT3Port = getServiceNodePort(introDomainNamespace, adminServerPodName + \"-external\", \"t3channel\");\n+\n+    // get the pod creation time stamps\n+    LinkedHashMap<String, DateTime> pods = new LinkedHashMap<>();\n+    // get the creation time of the admin server pod before patching\n+    DateTime adminPodCreationTime = getPodCreationTime(introDomainNamespace, adminServerPodName);\n+    pods.put(adminServerPodName, adminPodCreationTime);\n+    // get the creation time of the managed server pods before patching\n+    for (int i = 1; i <= replicaCount; i++) {\n+      pods.put(managedServerPodNamePrefix + i,\n+          getPodCreationTime(introDomainNamespace, managedServerPodNamePrefix + i));\n+    }\n+\n+    // create a temporary WebLogic WLST property file\n+    File wlstPropertiesFile = assertDoesNotThrow(() -> File.createTempFile(\"wlst\", \"properties\"),\n+        \"Creating WLST properties file failed\");\n+    Properties p = new Properties();\n+    p.setProperty(\"admin_host\", K8S_NODEPORT_HOST);\n+    p.setProperty(\"admin_port\", Integer.toString(adminServerT3Port));\n+    p.setProperty(\"admin_username\", ADMIN_USERNAME_DEFAULT);\n+    p.setProperty(\"admin_password\", ADMIN_PASSWORD_DEFAULT);\n+    p.setProperty(\"new_admin_user\", ADMIN_USERNAME_PATCH);\n+    p.setProperty(\"new_admin_password\", ADMIN_PASSWORD_PATCH);\n+    p.setProperty(\"test_name\", \"replace_admin_user\");\n+    assertDoesNotThrow(() -> p.store(new FileOutputStream(wlstPropertiesFile), \"wlst properties file\"),\n+        \"Failed to write the WLST properties to file\");\n+\n+    // changet the admin server port to a different value to force pod restart\n+    logger.info(\"Creating a new WebLogic user/password {0}/{1} in default security realm\",\n+        ADMIN_USERNAME_PATCH, ADMIN_PASSWORD_PATCH);\n+    Path configScript = Paths.get(RESOURCE_DIR, \"python-scripts\", \"introspect_version_script.py\");\n+    executeWLSTScript(configScript, wlstPropertiesFile.toPath(), introDomainNamespace);\n+\n+    // create a new secret for admin credentials\n+    logger.info(\"Create a new secret that contains new WebLogic admin credentials\");\n+    String newWlSecretName = \"weblogic-credentials-new\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        newWlSecretName,\n+        introDomainNamespace,\n+        ADMIN_USERNAME_PATCH,\n+        ADMIN_PASSWORD_PATCH),\n+        String.format(\"createSecret failed for %s\", newWlSecretName));\n+\n+    // delete the old secret\n+    logger.info(\"Deleting the old secret\");\n+    deleteSecret(wlSecretName, introDomainNamespace);\n+\n+    String introspectVersion = assertDoesNotThrow(() -> getNextIntrospectVersion(domainUid, introDomainNamespace));\n+    String oldVersion = assertDoesNotThrow(()\n+        -> getDomainCustomResource(domainUid, introDomainNamespace).getSpec().getRestartVersion());\n+    int newVersion = oldVersion == null ? 1 : Integer.valueOf(oldVersion) + 1;\n+\n+    logger.info(\"patch the domain resource with new WebLogic secret, restartVersion and introspectVersion\");\n+    String patchStr\n+        = \"[\"\n+        + \"{\\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/spec/webLogicCredentialsSecret/name\\\", \"\n+        + \"\\\"value\\\": \\\"\" + newWlSecretName + \"\\\"},\"\n+        + \"{\\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/spec/introspectVersion\\\", \"\n+        + \"\\\"value\\\": \\\"\" + introspectVersion + \"\\\"},\"\n+        + \"{\\\"op\\\": \\\"add\\\", \\\"path\\\": \\\"/spec/restartVersion\\\", \"\n+        + \"\\\"value\\\": \\\"\" + newVersion + \"\\\"}\"\n+        + \"]\";\n+    logger.info(\"Updating domain configuration using patch string: {0}\\n\", patchStr);\n+    V1Patch patch = new V1Patch(patchStr);\n+    assertTrue(patchDomainCustomResource(domainUid, introDomainNamespace, patch, V1Patch.PATCH_FORMAT_JSON_PATCH),\n+        \"Failed to patch domain\");\n+\n+    //verify the introspector pod is created and runs\n+    String introspectPodName = domainUid + \"-\" + \"introspect-domain-job\";\n+\n+    checkPodExists(introspectPodName, domainUid, introDomainNamespace);\n+    checkPodDoesNotExist(introspectPodName, domainUid, introDomainNamespace);\n+\n+    //verify the pods are restarted\n+    verifyRollingRestartOccurred(pods, 1, introDomainNamespace);\n+\n+    // verify the admin server service created\n+    checkServiceExists(adminServerPodName, introDomainNamespace);\n+\n+    // verify admin server pod is ready\n+    checkPodReady(adminServerPodName, domainUid, introDomainNamespace);\n+\n+    // verify new cluster managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Checking managed server service {0} is created in namespace {1}\",\n+          managedServerPodNamePrefix + i, introDomainNamespace);\n+      checkServiceExists(managedServerPodNamePrefix + i, introDomainNamespace);\n+    }\n+\n+    // verify new cluster managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Waiting for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPodNamePrefix + i, introDomainNamespace);\n+      checkPodReady(managedServerPodNamePrefix + i, domainUid, introDomainNamespace);\n+    }\n+\n+    logger.info(\"Getting the list of servers using the listServers\");\n+    String baseUri = \"http://\" + K8S_NODEPORT_HOST + \":\" + adminServerT3Port + \"/clusterview/\";\n+    String serverListUri = \"ClusterViewServlet?listServers=true\";\n+    HttpResponse<String> response = null;\n+    for (int i = 0; i < 5; i++) {\n+      assertDoesNotThrow(() -> TimeUnit.SECONDS.sleep(10));\n+      response = assertDoesNotThrow(() -> OracleHttpClient.get(baseUri + serverListUri, true));\n+      assertEquals(200, response.statusCode(), \"Status code not equals to 200\");\n+    }\n+\n+    // verify managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Checking {0} health\", managedServerNameBase + i);\n+      assertTrue(response.body().contains(managedServerNameBase + i + \":HEALTH_OK\"),\n+          \"Didn't get \" + managedServerNameBase + i + \":HEALTH_OK\");\n+    }\n+\n+    logger.info(\"Getting node port for default channel\");\n+    int serviceNodePort = assertDoesNotThrow(() -> getServiceNodePort(\n+        introDomainNamespace, adminServerPodName + \"-external\", \"default\"),\n+        \"Getting admin server node port failed\");\n+\n+    logger.info(\"Validating WebLogic admin server access by login to console\");\n+    boolean loginSuccessful = assertDoesNotThrow(()\n+        -> adminNodePortAccessible(serviceNodePort, ADMIN_USERNAME_PATCH, ADMIN_PASSWORD_PATCH),\n+        \"Access to admin server node port failed\");\n+    assertTrue(loginSuccessful, \"Console login validation failed\");\n+\n+    logger.info(\"Validating WebLogic admin server access by login to console using old credentials\");\n+    assertThrows(AssertionFailedError.class, ()\n+        -> adminNodePortAccessible(serviceNodePort, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT),\n+        \"Accessing using old user/password succedded, supposed to fail\");\n+    assertTrue(loginSuccessful, \"Console login validation failed\");", "originalCommit": "66640b254e66995588ca34d57d3a9f9b3f5e6b65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA2MzUxOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r468063519", "bodyText": "the assert only to verify that the assert is thrown. removed the assertTrue(loginSuccessful, \"Console login validation failed\") line", "author": "sankarpn", "createdAt": "2020-08-10T17:28:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU0NjgxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1MDkxMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r466550911", "bodyText": "are the services(t3channel external service) also recreated? can the t3channel node port be changed to something else after restart?", "author": "vanajamukkara", "createdAt": "2020-08-06T16:54:22Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIntrospectVersion.java", "diffHunk": "@@ -731,6 +737,162 @@ public void testCreateNewCluster() {\n \n   }\n \n+  /**\n+   * Test changes the WebLogic credentials and verifies the servers can startup and function with changed credentials.\n+   * a. Creates new WebLogic credentials using WLST.\n+   * b. Creates new Kubernetes secret for WebLogic credentials.\n+   * c. Patch the Domain Resource with new credentials, restartVerion and introspectVersion.\n+   * d. Verifies the servers in the domain restarted and accessing the admin server console with new password works.\n+   * e. Verifies the the admin server console access with old credentials fail.\n+   */\n+  @Order(3)\n+  @Test\n+  @DisplayName(\"Test change WebLogic admin credentials for domain running in persistent volume\")\n+  public void testCredentialChange() {\n+\n+    final String domainUid = \"mydomain\";\n+\n+    final String adminServerName = \"admin-server\";\n+    final String adminServerPodName = domainUid + \"-\" + adminServerName;\n+\n+    final String managedServerNameBase = \"ms-\";\n+    String managedServerPodNamePrefix = domainUid + \"-\" + managedServerNameBase;\n+\n+    int replicaCount = 3;\n+\n+    logger.info(\"Getting node port for default channel\");\n+    int adminServerT3Port = getServiceNodePort(introDomainNamespace, adminServerPodName + \"-external\", \"t3channel\");\n+\n+    // get the pod creation time stamps\n+    LinkedHashMap<String, DateTime> pods = new LinkedHashMap<>();\n+    // get the creation time of the admin server pod before patching\n+    DateTime adminPodCreationTime = getPodCreationTime(introDomainNamespace, adminServerPodName);\n+    pods.put(adminServerPodName, adminPodCreationTime);\n+    // get the creation time of the managed server pods before patching\n+    for (int i = 1; i <= replicaCount; i++) {\n+      pods.put(managedServerPodNamePrefix + i,\n+          getPodCreationTime(introDomainNamespace, managedServerPodNamePrefix + i));\n+    }\n+\n+    // create a temporary WebLogic WLST property file\n+    File wlstPropertiesFile = assertDoesNotThrow(() -> File.createTempFile(\"wlst\", \"properties\"),\n+        \"Creating WLST properties file failed\");\n+    Properties p = new Properties();\n+    p.setProperty(\"admin_host\", K8S_NODEPORT_HOST);\n+    p.setProperty(\"admin_port\", Integer.toString(adminServerT3Port));\n+    p.setProperty(\"admin_username\", ADMIN_USERNAME_DEFAULT);\n+    p.setProperty(\"admin_password\", ADMIN_PASSWORD_DEFAULT);\n+    p.setProperty(\"new_admin_user\", ADMIN_USERNAME_PATCH);\n+    p.setProperty(\"new_admin_password\", ADMIN_PASSWORD_PATCH);\n+    p.setProperty(\"test_name\", \"replace_admin_user\");\n+    assertDoesNotThrow(() -> p.store(new FileOutputStream(wlstPropertiesFile), \"wlst properties file\"),\n+        \"Failed to write the WLST properties to file\");\n+\n+    // changet the admin server port to a different value to force pod restart\n+    logger.info(\"Creating a new WebLogic user/password {0}/{1} in default security realm\",\n+        ADMIN_USERNAME_PATCH, ADMIN_PASSWORD_PATCH);\n+    Path configScript = Paths.get(RESOURCE_DIR, \"python-scripts\", \"introspect_version_script.py\");\n+    executeWLSTScript(configScript, wlstPropertiesFile.toPath(), introDomainNamespace);\n+\n+    // create a new secret for admin credentials\n+    logger.info(\"Create a new secret that contains new WebLogic admin credentials\");\n+    String newWlSecretName = \"weblogic-credentials-new\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        newWlSecretName,\n+        introDomainNamespace,\n+        ADMIN_USERNAME_PATCH,\n+        ADMIN_PASSWORD_PATCH),\n+        String.format(\"createSecret failed for %s\", newWlSecretName));\n+\n+    // delete the old secret\n+    logger.info(\"Deleting the old secret\");\n+    deleteSecret(wlSecretName, introDomainNamespace);\n+\n+    String introspectVersion = assertDoesNotThrow(() -> getNextIntrospectVersion(domainUid, introDomainNamespace));\n+    String oldVersion = assertDoesNotThrow(()\n+        -> getDomainCustomResource(domainUid, introDomainNamespace).getSpec().getRestartVersion());\n+    int newVersion = oldVersion == null ? 1 : Integer.valueOf(oldVersion) + 1;\n+\n+    logger.info(\"patch the domain resource with new WebLogic secret, restartVersion and introspectVersion\");\n+    String patchStr\n+        = \"[\"\n+        + \"{\\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/spec/webLogicCredentialsSecret/name\\\", \"\n+        + \"\\\"value\\\": \\\"\" + newWlSecretName + \"\\\"},\"\n+        + \"{\\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/spec/introspectVersion\\\", \"\n+        + \"\\\"value\\\": \\\"\" + introspectVersion + \"\\\"},\"\n+        + \"{\\\"op\\\": \\\"add\\\", \\\"path\\\": \\\"/spec/restartVersion\\\", \"\n+        + \"\\\"value\\\": \\\"\" + newVersion + \"\\\"}\"\n+        + \"]\";\n+    logger.info(\"Updating domain configuration using patch string: {0}\\n\", patchStr);\n+    V1Patch patch = new V1Patch(patchStr);\n+    assertTrue(patchDomainCustomResource(domainUid, introDomainNamespace, patch, V1Patch.PATCH_FORMAT_JSON_PATCH),\n+        \"Failed to patch domain\");\n+\n+    //verify the introspector pod is created and runs\n+    String introspectPodName = domainUid + \"-\" + \"introspect-domain-job\";\n+\n+    checkPodExists(introspectPodName, domainUid, introDomainNamespace);\n+    checkPodDoesNotExist(introspectPodName, domainUid, introDomainNamespace);\n+\n+    //verify the pods are restarted\n+    verifyRollingRestartOccurred(pods, 1, introDomainNamespace);\n+\n+    // verify the admin server service created\n+    checkServiceExists(adminServerPodName, introDomainNamespace);\n+\n+    // verify admin server pod is ready\n+    checkPodReady(adminServerPodName, domainUid, introDomainNamespace);\n+\n+    // verify new cluster managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Checking managed server service {0} is created in namespace {1}\",\n+          managedServerPodNamePrefix + i, introDomainNamespace);\n+      checkServiceExists(managedServerPodNamePrefix + i, introDomainNamespace);\n+    }\n+\n+    // verify new cluster managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Waiting for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPodNamePrefix + i, introDomainNamespace);\n+      checkPodReady(managedServerPodNamePrefix + i, domainUid, introDomainNamespace);\n+    }\n+\n+    logger.info(\"Getting the list of servers using the listServers\");\n+    String baseUri = \"http://\" + K8S_NODEPORT_HOST + \":\" + adminServerT3Port + \"/clusterview/\";", "originalCommit": "66640b254e66995588ca34d57d3a9f9b3f5e6b65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA2MjQ1OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r468062459", "bodyText": "no t3 channel service is not recreated. But I should be using default channel to access the app. I fixed it to use default channel node port.", "author": "sankarpn", "createdAt": "2020-08-10T17:26:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1MDkxMQ=="}], "type": "inlineReview"}, {"oid": "82e05c37010d23b50c50f7d2b0cd640dba458886", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/82e05c37010d23b50c50f7d2b0cd640dba458886", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into credential-change-pv-domain", "committedDate": "2020-08-10T16:53:13Z", "type": "commit"}, {"oid": "b23a82487fba6fa071cb524bfe05b4d2f9267a27", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b23a82487fba6fa071cb524bfe05b4d2f9267a27", "message": "Address review comments", "committedDate": "2020-08-10T17:19:02Z", "type": "commit"}, {"oid": "c59d1892d24c550237628d96d2be40cc1646c4ac", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c59d1892d24c550237628d96d2be40cc1646c4ac", "message": "use default channel port for accessing application", "committedDate": "2020-08-10T17:25:16Z", "type": "commit"}, {"oid": "b5fe59ea8340c3c301b5a1a9371166e25d93aece", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b5fe59ea8340c3c301b5a1a9371166e25d93aece", "message": "Lookup domain runtime only if it is admin server", "committedDate": "2020-08-10T21:33:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwMjc5NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r468202795", "bodyText": "are you forcing pod restart by changing the port here?", "author": "vanajamukkara", "createdAt": "2020-08-10T21:43:18Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIntrospectVersion.java", "diffHunk": "@@ -731,6 +737,163 @@ public void testCreateNewCluster() {\n \n   }\n \n+  /**\n+   * Test changes the WebLogic credentials and verifies the servers can startup and function with changed credentials.\n+   * a. Creates new WebLogic credentials using WLST.\n+   * b. Creates new Kubernetes secret for WebLogic credentials.\n+   * c. Patch the Domain Resource with new credentials, restartVerion and introspectVersion.\n+   * d. Verifies the servers in the domain restarted and accessing the admin server console with new password works.\n+   * e. Verifies the the admin server console access with old credentials fail.\n+   */\n+  @Order(3)\n+  @Test\n+  @DisplayName(\"Test change WebLogic admin credentials for domain running in persistent volume\")\n+  public void testCredentialChange() {\n+\n+    final String domainUid = \"mydomain\";\n+\n+    final String adminServerName = \"admin-server\";\n+    final String adminServerPodName = domainUid + \"-\" + adminServerName;\n+\n+    final String managedServerNameBase = \"ms-\";\n+    String managedServerPodNamePrefix = domainUid + \"-\" + managedServerNameBase;\n+\n+    int replicaCount = 3;\n+\n+    logger.info(\"Getting node port for T3 channel\");\n+    int adminServerT3Port = getServiceNodePort(introDomainNamespace, adminServerPodName + \"-external\", \"t3channel\");\n+    assertNotEquals(-1, adminServerT3Port, \"Couldn't get valid port for T3 channel\");\n+\n+    // get the pod creation time stamps\n+    LinkedHashMap<String, DateTime> pods = new LinkedHashMap<>();\n+    // get the creation time of the admin server pod before patching\n+    DateTime adminPodCreationTime = getPodCreationTime(introDomainNamespace, adminServerPodName);\n+    pods.put(adminServerPodName, adminPodCreationTime);\n+    // get the creation time of the managed server pods before patching\n+    for (int i = 1; i <= replicaCount; i++) {\n+      pods.put(managedServerPodNamePrefix + i,\n+          getPodCreationTime(introDomainNamespace, managedServerPodNamePrefix + i));\n+    }\n+\n+    // create a temporary WebLogic WLST property file\n+    File wlstPropertiesFile = assertDoesNotThrow(() -> File.createTempFile(\"wlst\", \"properties\"),\n+        \"Creating WLST properties file failed\");\n+    Properties p = new Properties();\n+    p.setProperty(\"admin_host\", K8S_NODEPORT_HOST);\n+    p.setProperty(\"admin_port\", Integer.toString(adminServerT3Port));\n+    p.setProperty(\"admin_username\", ADMIN_USERNAME_DEFAULT);\n+    p.setProperty(\"admin_password\", ADMIN_PASSWORD_DEFAULT);\n+    p.setProperty(\"new_admin_user\", ADMIN_USERNAME_PATCH);\n+    p.setProperty(\"new_admin_password\", ADMIN_PASSWORD_PATCH);\n+    p.setProperty(\"test_name\", \"replace_admin_user\");\n+    assertDoesNotThrow(() -> p.store(new FileOutputStream(wlstPropertiesFile), \"wlst properties file\"),\n+        \"Failed to write the WLST properties to file\");\n+\n+    // change the admin server port to a different value to force pod restart", "originalCommit": "b5fe59ea8340c3c301b5a1a9371166e25d93aece", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0MTY1MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r470241650", "bodyText": "yes.", "author": "sankarpn", "createdAt": "2020-08-13T20:52:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwMjc5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwNzM0OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r468207349", "bodyText": "move the code up to maintain the order", "author": "vanajamukkara", "createdAt": "2020-08-10T21:53:41Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIntrospectVersion.java", "diffHunk": "@@ -731,6 +737,163 @@ public void testCreateNewCluster() {\n \n   }\n \n+  /**\n+   * Test changes the WebLogic credentials and verifies the servers can startup and function with changed credentials.\n+   * a. Creates new WebLogic credentials using WLST.\n+   * b. Creates new Kubernetes secret for WebLogic credentials.\n+   * c. Patch the Domain Resource with new credentials, restartVerion and introspectVersion.\n+   * d. Verifies the servers in the domain restarted and accessing the admin server console with new password works.\n+   * e. Verifies the the admin server console access with old credentials fail.\n+   */\n+  @Order(3)", "originalCommit": "b5fe59ea8340c3c301b5a1a9371166e25d93aece", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0MTM3Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r470241377", "bodyText": "Fixed", "author": "sankarpn", "createdAt": "2020-08-13T20:52:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwNzM0OQ=="}], "type": "inlineReview"}, {"oid": "dcdb3980bdf8682e6ce2ebc912551ebfb2898641", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/dcdb3980bdf8682e6ce2ebc912551ebfb2898641", "message": "change max-message-size to a large value\nchange the t3channel port to some arbitrary number", "committedDate": "2020-08-11T16:58:58Z", "type": "commit"}, {"oid": "a6e7ee30c39f3aff302aaab02c5acef00fe0995e", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a6e7ee30c39f3aff302aaab02c5acef00fe0995e", "message": "fix the max-message-size", "committedDate": "2020-08-11T19:05:12Z", "type": "commit"}, {"oid": "09174776681387330c32fe0de3f33402a323a146", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/09174776681387330c32fe0de3f33402a323a146", "message": "log response from managed servers", "committedDate": "2020-08-11T19:29:45Z", "type": "commit"}, {"oid": "916fe48f457da69c827a940bac61434ebe87c66f", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/916fe48f457da69c827a940bac61434ebe87c66f", "message": "increasing the max iterations", "committedDate": "2020-08-11T19:31:00Z", "type": "commit"}, {"oid": "3af2393ea45daa10c639b78b169324a00fb7dd98", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3af2393ea45daa10c639b78b169324a00fb7dd98", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into credential-change-pv-domain", "committedDate": "2020-08-11T19:39:20Z", "type": "commit"}, {"oid": "cf898be0a176f545c609f6c302f5028616b558f3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/cf898be0a176f545c609f6c302f5028616b558f3", "message": "Fix the JAVA_OPTIONS", "committedDate": "2020-08-11T21:16:35Z", "type": "commit"}, {"oid": "cea198d231304aa74e5aa1ad3ee875f3a365a59e", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/cea198d231304aa74e5aa1ad3ee875f3a365a59e", "message": "Fix the java options", "committedDate": "2020-08-11T23:26:51Z", "type": "commit"}, {"oid": "07b8f89a8c4f28566b4c66f2b5d48e19aa500089", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/07b8f89a8c4f28566b4c66f2b5d48e19aa500089", "message": "Add debug flags to servers", "committedDate": "2020-08-12T02:11:14Z", "type": "commit"}, {"oid": "5d0f0f249e494bde9d65f77aa6fd146572c4e6be", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5d0f0f249e494bde9d65f77aa6fd146572c4e6be", "message": "remove the system property maxmessagesize", "committedDate": "2020-08-12T03:08:12Z", "type": "commit"}, {"oid": "c610280272e6697b6543d0235549d99cfce71357", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c610280272e6697b6543d0235549d99cfce71357", "message": "Change the implmentation of cluster communication check", "committedDate": "2020-08-12T17:35:23Z", "type": "commit"}, {"oid": "73ed653fc0eee7194446c1517f57cde439f6f4c2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/73ed653fc0eee7194446c1517f57cde439f6f4c2", "message": "fix iterations", "committedDate": "2020-08-12T19:35:05Z", "type": "commit"}, {"oid": "9664357758828094fd2cffa9298dddde7d904ff6", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9664357758828094fd2cffa9298dddde7d904ff6", "message": "Merge branch 'develop' into credential-change-pv-domain", "committedDate": "2020-08-13T01:44:02Z", "type": "commit"}, {"oid": "4fa676dd8008e30d24aecf0d27342e9c77bae4f9", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/4fa676dd8008e30d24aecf0d27342e9c77bae4f9", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into credential-change-pv-domain", "committedDate": "2020-08-13T15:42:00Z", "type": "commit"}, {"oid": "6735f901219f7191d6a7ef11408da30d5f7276fa", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6735f901219f7191d6a7ef11408da30d5f7276fa", "message": "fix replicaCount", "committedDate": "2020-08-13T18:14:02Z", "type": "commit"}, {"oid": "9607e015d68354a65737c917d6fe411fcb6d47da", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9607e015d68354a65737c917d6fe411fcb6d47da", "message": "Adding more debug messages", "committedDate": "2020-08-13T18:18:40Z", "type": "commit"}, {"oid": "1188d28313db1a3e87dfcb6a9be89815d81da321", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1188d28313db1a3e87dfcb6a9be89815d81da321", "message": "Fix server names", "committedDate": "2020-08-13T19:45:24Z", "type": "commit"}, {"oid": "832a5a8471ec2ec8ea01007291f3a88345a4ed9f", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/832a5a8471ec2ec8ea01007291f3a88345a4ed9f", "message": "Refactor the server health checks", "committedDate": "2020-08-13T20:48:27Z", "type": "commit"}, {"oid": "7e0479b801c3ee7710aecda9230951335df4460e", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7e0479b801c3ee7710aecda9230951335df4460e", "message": "fix comment", "committedDate": "2020-08-13T20:54:14Z", "type": "commit"}, {"oid": "f85973fde7a3ef821317bb9c6fb00fab1900fea0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f85973fde7a3ef821317bb9c6fb00fab1900fea0", "message": "Fix the server count", "committedDate": "2020-08-13T22:01:11Z", "type": "commit"}, {"oid": "3e23df101ba44bf37ae2bbfc1c80ea52b28d17a3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3e23df101ba44bf37ae2bbfc1c80ea52b28d17a3", "message": "Enable cmo.setResolveDNSName(true) for custom nap", "committedDate": "2020-08-14T00:07:46Z", "type": "commit"}, {"oid": "09db971405341a004a8aa2bcf8988760319d493b", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/09db971405341a004a8aa2bcf8988760319d493b", "message": "log dns resolv.conf file as well", "committedDate": "2020-08-14T00:37:35Z", "type": "commit"}, {"oid": "8307f9c5e0c916c9e66f4117c65fd2cae1296bb3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8307f9c5e0c916c9e66f4117c65fd2cae1296bb3", "message": "Add more debug flags", "committedDate": "2020-08-14T02:42:59Z", "type": "commit"}, {"oid": "4b83d2cc43a073de42565b3c9297e18e12b73309", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/4b83d2cc43a073de42565b3c9297e18e12b73309", "message": "Add a random objects to JNDI tree", "committedDate": "2020-08-14T02:54:49Z", "type": "commit"}, {"oid": "e7d0880932d67eb0003afe9f99c5a6b2a1cac1c2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e7d0880932d67eb0003afe9f99c5a6b2a1cac1c2", "message": "Fix dns logging", "committedDate": "2020-08-14T05:24:05Z", "type": "commit"}, {"oid": "5a19f6b7b8abe3b325c57b973c8e6e5ad59d128e", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5a19f6b7b8abe3b325c57b973c8e6e5ad59d128e", "message": "Use MBean server connection instead of heartbeats to detect server health", "committedDate": "2020-08-15T21:52:36Z", "type": "commit"}, {"oid": "a67bfce1664f94e062d154abeeedb4627fb4c40f", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a67bfce1664f94e062d154abeeedb4627fb4c40f", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into credential-change-pv-domain", "committedDate": "2020-08-15T23:34:42Z", "type": "commit"}, {"oid": "140adf8e31072eb70cfeab6b92b165500f5c203c", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/140adf8e31072eb70cfeab6b92b165500f5c203c", "message": "Fix the curl request url", "committedDate": "2020-08-15T23:43:29Z", "type": "commit"}, {"oid": "ede28635873ea3c34c4d2b476dded496605f9d7c", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ede28635873ea3c34c4d2b476dded496605f9d7c", "message": "Refactored the server communication verification by MBeanServerConnection\nto the individual servers instead of relying on cluster heartbeats", "committedDate": "2020-08-17T21:56:34Z", "type": "commit"}, {"oid": "e8f93c5d80a6700a547a913a6fbd655f9157cee2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e8f93c5d80a6700a547a913a6fbd655f9157cee2", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into credential-change-pv-domain", "committedDate": "2020-08-17T21:57:34Z", "type": "commit"}, {"oid": "b2cf0f227692e53f561cb2b03c19c5884c641a41", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b2cf0f227692e53f561cb2b03c19c5884c641a41", "message": "Fix the URL", "committedDate": "2020-08-17T23:02:16Z", "type": "commit"}, {"oid": "60a909a0e681b538ecf8c04ded4e0f49a185628e", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/60a909a0e681b538ecf8c04ded4e0f49a185628e", "message": "Remove DNS entries logging", "committedDate": "2020-08-17T23:27:40Z", "type": "commit"}, {"oid": "a9f5c3a784b41a110290425f908f1397c56e27a3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a9f5c3a784b41a110290425f908f1397c56e27a3", "message": "Fix url", "committedDate": "2020-08-17T23:49:19Z", "type": "commit"}, {"oid": "fb922e899b725e176d16f31c1a55b2f8aae3fd1d", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/fb922e899b725e176d16f31c1a55b2f8aae3fd1d", "message": "Fix null urls", "committedDate": "2020-08-18T00:06:18Z", "type": "commit"}, {"oid": "035bd5802513a8acf7e11b134a7f111c9863d563", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/035bd5802513a8acf7e11b134a7f111c9863d563", "message": "Fix url", "committedDate": "2020-08-18T00:26:50Z", "type": "commit"}, {"oid": "e2784c88f05768d67b8c11d486640fceebffe825", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e2784c88f05768d67b8c11d486640fceebffe825", "message": "Fix comments", "committedDate": "2020-08-18T03:49:50Z", "type": "commit"}, {"oid": "192d5d03d82988abb703edd073e7e3728d4d593e", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/192d5d03d82988abb703edd073e7e3728d4d593e", "message": "fix typo", "committedDate": "2020-08-18T04:47:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU0MTUzNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r472541536", "bodyText": "do we need all of these debug flags?", "author": "marinakog", "createdAt": "2020-08-18T23:06:40Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItConfigDistributionStrategy.java", "diffHunk": "@@ -856,10 +856,12 @@ private void createDomain() {\n             .serverPod(new ServerPod() //serverpod\n                 .addEnvItem(new V1EnvVar()\n                     .name(\"JAVA_OPTIONS\")\n-                    .value(\"-Dweblogic.debug.DebugSituationalConfig=true\"))\n-                .addEnvItem(new V1EnvVar()\n-                    .name(\"JAVA_OPTIONS\")\n-                    .value(\"-Dweblogic.debug.DebugSituationalConfigDumpXml=true\"))\n+                    .value(\"-Dweblogic.debug.DebugSituationalConfig=true \"\n+                        + \"-Dweblogic.debug.DebugSituationalConfigDumpXml=true \"\n+                        + \"-Dweblogic.kernel.debug=true \"\n+                        + \"-Dweblogic.debug.DebugMessaging=true \"\n+                        + \"-Dweblogic.debug.DebugConnection=true \"\n+                        + \"-Dweblogic.ResolveDNSName=true\"))", "originalCommit": "192d5d03d82988abb703edd073e7e3728d4d593e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyNzczMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r473127733", "bodyText": "At least for now we need these flags. These are tests with intermittent failures. In case test fails we will have the logs ready to debug.", "author": "sankarpn", "createdAt": "2020-08-19T15:43:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU0MTUzNg=="}], "type": "inlineReview"}, {"oid": "cbe0947d4912698c4672d0f8e802f2654817215d", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/cbe0947d4912698c4672d0f8e802f2654817215d", "message": "Undoing the changes for ItLoadbalancer.java", "committedDate": "2020-08-19T16:02:03Z", "type": "commit"}, {"oid": "0691f37926d1298f0660b2f4b2f6bf69c5014aca", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0691f37926d1298f0660b2f4b2f6bf69c5014aca", "message": "Checking if the server is running", "committedDate": "2020-08-19T17:16:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEzNDQzNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r473134434", "bodyText": "0 can be used to pick the free port at run time, this change can be made in next PR", "author": "vanajamukkara", "createdAt": "2020-08-19T15:53:18Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIntrospectVersion.java", "diffHunk": "@@ -162,8 +166,8 @@ public static void initAll(@Namespaces(3) List<String> namespaces) {\n     installAndVerifyOperator(opNamespace, introDomainNamespace);\n \n     // get a free node port for NGINX\n-    nodeportshttp = getNextFreePort(30305, 30405);\n-    int nodeportshttps = getNextFreePort(30443, 30543);\n+    nodeportshttp = getNextFreePort(30109, 30405);", "originalCommit": "192d5d03d82988abb703edd073e7e3728d4d593e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE1MTc4Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r473151786", "bodyText": "print ClusterViewServlet instead of ITTESTS in the entire class", "author": "vanajamukkara", "createdAt": "2020-08-19T16:19:52Z", "path": "new-integration-tests/src/test/resources/apps/clusterview/src/java/oracle/weblogic/kubernetes/applications/clusterview/ClusterViewServlet.java", "diffHunk": "@@ -58,42 +64,27 @@ public void init(ServletConfig config) throws ServletException {\n           .newProxyInstance(localMBeanServer, runtimeserviceObjectName);\n       serverRuntime = runtimeService.getServerRuntime();\n       System.out.println(\"ITTESTS:>>>>Found server runtime mbean server for server: \" + serverRuntime.getName());\n+    } catch (MalformedObjectNameException | NamingException ex) {\n+      System.out.println(\"ITTESTS:>>>>ClusterViewServlet.init() threw exception\");", "originalCommit": "cbe0947d4912698c4672d0f8e802f2654817215d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI0MDUzMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r473240532", "bodyText": "changed", "author": "sankarpn", "createdAt": "2020-08-19T18:34:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE1MTc4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE2MTgwNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r473161805", "bodyText": "log message 'Getting the list of servers using the listServers' needs to be modified. Also add more details in log and/or comment what is being checked when the call is made to the servlet here.", "author": "vanajamukkara", "createdAt": "2020-08-19T16:29:00Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItConfigDistributionStrategy.java", "diffHunk": "@@ -256,7 +256,7 @@ public void afterEach() {\n \n     logger.info(\"Getting the list of servers using the listServers\");\n     String baseUri = \"http://\" + K8S_NODEPORT_HOST + \":\" + serviceNodePort + \"/clusterview/\";\n-    String serverListUri = \"ClusterViewServlet?listServers=true\";\n+    String serverListUri = \"ClusterViewServlet?user=\" + ADMIN_USERNAME_DEFAULT + \"&password=\" + ADMIN_PASSWORD_DEFAULT;", "originalCommit": "cbe0947d4912698c4672d0f8e802f2654817215d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI0NDQ5Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r473244497", "bodyText": "updated the comment.", "author": "sankarpn", "createdAt": "2020-08-19T18:42:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE2MTgwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE5OTMzMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r473199332", "bodyText": "call verifyMemberHealth method instead of iterating 5 times?", "author": "vanajamukkara", "createdAt": "2020-08-19T17:20:20Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItConfigDistributionStrategy.java", "diffHunk": "@@ -256,7 +256,7 @@ public void afterEach() {\n \n     logger.info(\"Getting the list of servers using the listServers\");\n     String baseUri = \"http://\" + K8S_NODEPORT_HOST + \":\" + serviceNodePort + \"/clusterview/\";\n-    String serverListUri = \"ClusterViewServlet?listServers=true\";\n+    String serverListUri = \"ClusterViewServlet?user=\" + ADMIN_USERNAME_DEFAULT + \"&password=\" + ADMIN_PASSWORD_DEFAULT;\n     for (int i = 0; i < 5; i++) {", "originalCommit": "0691f37926d1298f0660b2f4b2f6bf69c5014aca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI0Njk3MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r473246970", "bodyText": "The call is made to the Servlet just to see if the app is accessible after restart.\nswitched to dynamic wait instead of fixed iteration.", "author": "sankarpn", "createdAt": "2020-08-19T18:46:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE5OTMzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwMjYyMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r473202620", "bodyText": "how about calling verifyMemberHealth before making any config changes are made to make sure the cluster health is good, servers can communicate with each other? This comment applies to initAll method at the end, but I can't add it there, so posting here.", "author": "vanajamukkara", "createdAt": "2020-08-19T17:26:12Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIntrospectVersion.java", "diffHunk": "@@ -594,40 +584,171 @@ public void testDomainIntrospectVersionRolling() {\n         \"Getting admin server port failed\"),\n         \"Updated admin server port is not equal to expected value\");\n \n-    logger.info(\"Getting node port for default channel\");\n-    int adminServerNodePort = assertDoesNotThrow(()\n-        -> getServiceNodePort(introDomainNamespace, adminServerPodName + \"-external\", \"default\"),\n-        \"Getting admin server node port failed\");\n-\n-    //access application from admin server to validate the new port\n-    String url = \"http://\" + K8S_NODEPORT_HOST + \":\" + adminServerNodePort + \"/testwebapp/index.jsp\";\n-    assertEquals(200,\n-        assertDoesNotThrow(() -> OracleHttpClient.get(url, true),\n-            \"Accessing sample application on admin server failed\")\n-            .statusCode(), \"Status code not equals to 200\");\n-\n-    logger.info(\"Getting the list of servers using the listServers\");\n-    String baseUri = \"http://\" + K8S_NODEPORT_HOST + \":\" + adminServerNodePort + \"/clusterview/\";\n-    String serverListUri = \"ClusterViewServlet?listServers=true\";\n-    for (int i = 0; i < 5; i++) {\n-      assertDoesNotThrow(() -> TimeUnit.SECONDS.sleep(30));\n-      HttpResponse<String> response = assertDoesNotThrow(() -> OracleHttpClient.get(baseUri + serverListUri, true));\n-      assertEquals(200, response.statusCode(), \"Status code not equals to 200\");\n+    List<String> managedServerNames = new ArrayList<String>();\n+    for (int i = 1; i <= replicaCount; i++) {\n+      managedServerNames.add(managedServerNameBase + i);\n     }\n \n+    //verify admin server accessibility and the health of cluster members\n+    verifyMemberHealth(adminServerPodName, managedServerNames, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n+\n     //access application in managed servers through NGINX load balancer\n     logger.info(\"Accessing the clusterview app through NGINX load balancer\");\n     String curlRequest = String.format(\"curl --silent --show-error --noproxy '*' \"\n-            + \"-H 'host: %s' http://%s:%s/clusterview/ClusterViewServlet\",\n+        + \"-H 'host: %s' http://%s:%s/clusterview/ClusterViewServlet\"\n+        + \"\\\"?user=\" + ADMIN_USERNAME_DEFAULT\n+        + \"&password=\" + ADMIN_PASSWORD_DEFAULT + \"\\\"\",\n         domainUid + \".\" + introDomainNamespace + \".\" + clusterName + \".test\", K8S_NODEPORT_HOST, nodeportshttp);\n-    List<String> managedServers = new ArrayList<>();\n+\n+    // verify each managed server can see other member in the cluster\n+    verifyServerCommunication(curlRequest, managedServerNames);\n+  }\n+\n+  /**\n+   * Test changes the WebLogic credentials and verifies the servers can startup and function with changed credentials.\n+   * a. Creates new WebLogic credentials using WLST.\n+   * b. Creates new Kubernetes secret for WebLogic credentials.\n+   * c. Patch the Domain Resource with new credentials, restartVerion and introspectVersion.\n+   * d. Verifies the servers in the domain restarted and accessing the admin server console with new password works.\n+   * e. Verifies the the admin server console access with old credentials fail.\n+   */\n+  @Order(3)\n+  @Test\n+  @DisplayName(\"Test change WebLogic admin credentials for domain running in persistent volume\")\n+  public void testCredentialChange() {\n+\n+    final String domainUid = \"mydomain\";\n+\n+    final String adminServerName = \"admin-server\";\n+    final String adminServerPodName = domainUid + \"-\" + adminServerName;\n+\n+    final String managedServerNameBase = \"ms-\";\n+    String managedServerPodNamePrefix = domainUid + \"-\" + managedServerNameBase;\n+\n+    int replicaCount = 3;\n+\n+    logger.info(\"Getting node port for T3 channel\");\n+    int adminServerT3Port = getServiceNodePort(introDomainNamespace, adminServerPodName + \"-external\", \"t3channel\");\n+    assertNotEquals(-1, adminServerT3Port, \"Couldn't get valid port for T3 channel\");\n+\n+    // get the pod creation time stamps\n+    LinkedHashMap<String, DateTime> pods = new LinkedHashMap<>();\n+    // get the creation time of the admin server pod before patching\n+    DateTime adminPodCreationTime = getPodCreationTime(introDomainNamespace, adminServerPodName);\n+    pods.put(adminServerPodName, adminPodCreationTime);\n+    // get the creation time of the managed server pods before patching\n     for (int i = 1; i <= replicaCount; i++) {\n-      managedServers.add(managedServerNameBase + i);\n+      pods.put(managedServerPodNamePrefix + i,\n+          getPodCreationTime(introDomainNamespace, managedServerPodNamePrefix + i));\n     }\n-    assertThat(verifyClusterMemberCommunication(curlRequest, managedServers, 20))\n-        .as(\"Verify all managed servers can see each other\")\n-        .withFailMessage(\"managed servers cannot see other\")\n-        .isTrue();\n+\n+    // create a temporary WebLogic WLST property file\n+    File wlstPropertiesFile = assertDoesNotThrow(() -> File.createTempFile(\"wlst\", \"properties\"),\n+        \"Creating WLST properties file failed\");\n+    Properties p = new Properties();\n+    p.setProperty(\"admin_host\", K8S_NODEPORT_HOST);\n+    p.setProperty(\"admin_port\", Integer.toString(adminServerT3Port));\n+    p.setProperty(\"admin_username\", ADMIN_USERNAME_DEFAULT);\n+    p.setProperty(\"admin_password\", ADMIN_PASSWORD_DEFAULT);\n+    p.setProperty(\"new_admin_user\", ADMIN_USERNAME_PATCH);\n+    p.setProperty(\"new_admin_password\", ADMIN_PASSWORD_PATCH);\n+    p.setProperty(\"test_name\", \"replace_admin_user\");\n+    assertDoesNotThrow(() -> p.store(new FileOutputStream(wlstPropertiesFile), \"wlst properties file\"),\n+        \"Failed to write the WLST properties to file\");\n+\n+    // change the admin server port to a different value to force pod restart\n+    logger.info(\"Creating a new WebLogic user/password {0}/{1} in default security realm\",\n+        ADMIN_USERNAME_PATCH, ADMIN_PASSWORD_PATCH);\n+    Path configScript = Paths.get(RESOURCE_DIR, \"python-scripts\", \"introspect_version_script.py\");\n+    executeWLSTScript(configScript, wlstPropertiesFile.toPath(), introDomainNamespace);\n+\n+    // create a new secret for admin credentials\n+    logger.info(\"Create a new secret that contains new WebLogic admin credentials\");\n+    String newWlSecretName = \"weblogic-credentials-new\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        newWlSecretName,\n+        introDomainNamespace,\n+        ADMIN_USERNAME_PATCH,\n+        ADMIN_PASSWORD_PATCH),\n+        String.format(\"createSecret failed for %s\", newWlSecretName));\n+\n+    // delete the old secret\n+    logger.info(\"Deleting the old secret\");\n+    deleteSecret(wlSecretName, introDomainNamespace);\n+\n+    String introspectVersion = assertDoesNotThrow(() -> getNextIntrospectVersion(domainUid, introDomainNamespace));\n+    String oldVersion = assertDoesNotThrow(()\n+        -> getDomainCustomResource(domainUid, introDomainNamespace).getSpec().getRestartVersion());\n+    int newVersion = oldVersion == null ? 1 : Integer.valueOf(oldVersion) + 1;\n+\n+    logger.info(\"patch the domain resource with new WebLogic secret, restartVersion and introspectVersion\");\n+    String patchStr\n+        = \"[\"\n+        + \"{\\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/spec/webLogicCredentialsSecret/name\\\", \"\n+        + \"\\\"value\\\": \\\"\" + newWlSecretName + \"\\\"},\"\n+        + \"{\\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/spec/introspectVersion\\\", \"\n+        + \"\\\"value\\\": \\\"\" + introspectVersion + \"\\\"},\"\n+        + \"{\\\"op\\\": \\\"add\\\", \\\"path\\\": \\\"/spec/restartVersion\\\", \"\n+        + \"\\\"value\\\": \\\"\" + newVersion + \"\\\"}\"\n+        + \"]\";\n+    logger.info(\"Updating domain configuration using patch string: {0}\\n\", patchStr);\n+    V1Patch patch = new V1Patch(patchStr);\n+    assertTrue(patchDomainCustomResource(domainUid, introDomainNamespace, patch, V1Patch.PATCH_FORMAT_JSON_PATCH),\n+        \"Failed to patch domain\");\n+\n+    //verify the introspector pod is created and runs\n+    String introspectPodName = domainUid + \"-\" + \"introspect-domain-job\";\n+\n+    checkPodExists(introspectPodName, domainUid, introDomainNamespace);\n+    checkPodDoesNotExist(introspectPodName, domainUid, introDomainNamespace);\n+\n+    //verify the pods are restarted\n+    verifyRollingRestartOccurred(pods, 1, introDomainNamespace);\n+\n+    // verify the admin server service created\n+    checkServiceExists(adminServerPodName, introDomainNamespace);\n+\n+    // verify admin server pod is ready\n+    checkPodReady(adminServerPodName, domainUid, introDomainNamespace);\n+\n+    // verify new cluster managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Checking managed server service {0} is created in namespace {1}\",\n+          managedServerPodNamePrefix + i, introDomainNamespace);\n+      checkServiceExists(managedServerPodNamePrefix + i, introDomainNamespace);\n+    }\n+\n+    // verify new cluster managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Waiting for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPodNamePrefix + i, introDomainNamespace);\n+      checkPodReady(managedServerPodNamePrefix + i, domainUid, introDomainNamespace);\n+    }\n+\n+    logger.info(\"Getting node port for default channel\");\n+    int serviceNodePort = assertDoesNotThrow(() -> getServiceNodePort(\n+        introDomainNamespace, adminServerPodName + \"-external\", \"default\"),\n+        \"Getting admin server node port failed\");\n+    assertNotEquals(-1, serviceNodePort, \"Couldn't get valid node port for default channel\");\n+\n+    logger.info(\"Validating WebLogic admin server access by login to console\");\n+    boolean loginSuccessful = assertDoesNotThrow(()\n+        -> adminNodePortAccessible(serviceNodePort, ADMIN_USERNAME_PATCH, ADMIN_PASSWORD_PATCH),\n+        \"Access to admin server node port failed\");\n+    assertTrue(loginSuccessful, \"Console login validation failed\");\n+\n+    logger.info(\"Validating WebLogic admin server access by login to console using old credentials\");\n+    assertThrows(AssertionFailedError.class, ()\n+        -> adminNodePortAccessible(serviceNodePort, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT),\n+        \"Accessing using old user/password succeeded, supposed to fail\");\n+\n+    List<String> managedServerNames = new ArrayList<String>();\n+    for (int i = 1; i <= replicaCount; i++) {\n+      managedServerNames.add(managedServerNameBase + i);\n+    }\n+\n+    //verify admin server accessibility and the health of cluster members\n+    verifyMemberHealth(adminServerPodName, managedServerNames, ADMIN_USERNAME_PATCH, ADMIN_PASSWORD_PATCH);", "originalCommit": "0691f37926d1298f0660b2f4b2f6bf69c5014aca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI0ODkzNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r473248936", "bodyText": "The domain is not created in initAll. Its is created in the first test method, added this check right before config changes are made.", "author": "sankarpn", "createdAt": "2020-08-19T18:50:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwMjYyMA=="}], "type": "inlineReview"}, {"oid": "47b3ebe41b9825a972e0fbaf1a938d957f803d0b", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/47b3ebe41b9825a972e0fbaf1a938d957f803d0b", "message": "Deleted ItLoadbalancer.java", "committedDate": "2020-08-19T17:31:12Z", "type": "commit"}, {"oid": "2d6c2199bce7bfc5d8290e1b09716a808221fe8f", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/2d6c2199bce7bfc5d8290e1b09716a808221fe8f", "message": "Fix comments", "committedDate": "2020-08-19T18:53:22Z", "type": "commit"}, {"oid": "c7d576f76d754281bb19a147d3c386ad097e4bc6", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c7d576f76d754281bb19a147d3c386ad097e4bc6", "message": "Deploy application before accessing it", "committedDate": "2020-08-19T21:35:10Z", "type": "commit"}, {"oid": "e2128c735f417c60525284ed9e47cf7f9e491520", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e2128c735f417c60525284ed9e47cf7f9e491520", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into credential-change-pv-domain", "committedDate": "2020-08-20T16:10:19Z", "type": "commit"}]}