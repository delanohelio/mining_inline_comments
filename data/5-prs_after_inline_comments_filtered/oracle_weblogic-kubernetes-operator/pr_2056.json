{"pr_number": 2056, "pr_title": "owls85464 - add MII dynamic update tests for changing work manager config", "pr_createdAt": "2020-11-17T18:29:54Z", "pr_url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2056", "timeline": [{"oid": "6032847add5ecb2dfa22e21b513dee48b14e4845", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6032847add5ecb2dfa22e21b513dee48b14e4845", "message": "add ItMiiDynamicUpdate", "committedDate": "2020-11-17T00:28:16Z", "type": "commit"}, {"oid": "f678fa3a7939a1f4c70379010a7d2ecdeb815fc4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f678fa3a7939a1f4c70379010a7d2ecdeb815fc4", "message": "minor cleanup", "committedDate": "2020-11-17T18:21:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQxNzYwMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2056#discussion_r525417601", "bodyText": "we don't need this, the test framework will cleanup all pvs", "author": "sankarpn", "createdAt": "2020-11-17T19:10:39Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDynamicUpdate.java", "diffHunk": "@@ -0,0 +1,384 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.CommonMiiTestUtils;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCIR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deletePersistentVolume;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainResourceWithNewIntrospectVersion;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.checkLogsOnPV;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.checkWorkManagerRuntime;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.createDatabaseSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.createDomainResourceWithLogHome;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.createDomainSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.createJobToChangePermissionsOnPvHostPath;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.readJdbcRuntime;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.readMaxThreadsConstraintRuntimeForWorkManager;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.readMinThreadsConstraintRuntimeForWorkManager;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.replaceConfigMapWithModelFiles;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOcirRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createPV;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createPVC;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretForBaseImages;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getIntrospectJobName;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the following scenarios\n+ *\n+ * <p>testServerLogsAreOnPV\n+ * domain logHome is on PV, check server logs are on PV\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the System Resources in a pre-configured ConfigMap\n+ *\n+ * <p>testAddWorkManager\n+ *  Add a new work manager to a running WebLogic domain\n+ *\n+ * <p>testUpdateWorkManager\n+ *  Update dynamic work manager configurations in a running WebLogic domain.\n+ *\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test dynamic updates to a model in image domain\")\n+@IntegrationTest\n+class ItMiiDynamicUpdate {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-dynamic-update\";\n+  private static String pvName = domainUid + \"-pv\"; // name of the persistent volume\n+  private static String pvcName = domainUid + \"-pvc\"; // name of the persistent volume claim\n+  private static final String initialModelYamlFileName = \"model.sysresources.yaml\";\n+  private static final String configMapName = \"dynamicupdate-test-configmap\";//\"wmconfigmap\";\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private final String adminServerName = \"admin-server\";\n+  private final String workManagerName = \"newWM\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource defintion.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    // this secret is used only for non-kind cluster\n+    createOcirRepoSecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    logger.info(\"Create database secret\");\n+    final String dbSecretName = domainUid  + \"-db-secret\";\n+    assertDoesNotThrow(() -> createDatabaseSecret(dbSecretName, \"scott\",\n+            \"tiger\", \"jdbc:oracle:thin:localhost:/ORCLCDB\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", dbSecretName));\n+\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(initialModelYamlFileName));\n+\n+\n+    // create pull secrets for WebLogic image when running in non Kind Kubernetes cluster\n+    // this secret is used only for non-kind cluster\n+    createSecretForBaseImages(domainNamespace);\n+\n+    // create PV, PVC for logs\n+    createPV(pvName, domainUid, ItMiiDynamicUpdate.class.getSimpleName());\n+    createPVC(pvName, pvcName, domainUid, domainNamespace);\n+\n+    // create job to change permissions on PV hostPath\n+    createJobToChangePermissionsOnPvHostPath(pvName, pvcName, domainNamespace);\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResourceWithLogHome(domainUid, domainNamespace,\n+        MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG,\n+        adminSecretName, OCIR_SECRET_NAME, encryptionSecretName,\n+        replicaCount, pvName, pvcName, \"cluster-1\", configMapName, dbSecretName, true);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    deletePersistentVolume(pvName);", "originalCommit": "f678fa3a7939a1f4c70379010a7d2ecdeb815fc4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQzNjU5Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2056#discussion_r525436596", "bodyText": "Thanks. I have removed it.", "author": "alai8", "createdAt": "2020-11-17T19:36:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQxNzYwMQ=="}], "type": "inlineReview"}, {"oid": "57e9fda3a3b7d8df6d7d93304bfb709f42e42fc9", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/57e9fda3a3b7d8df6d7d93304bfb709f42e42fc9", "message": "no need to cleanup pv within test", "committedDate": "2020-11-17T19:35:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMwMTI3MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2056#discussion_r526301271", "bodyText": "do you need the system resources defined in the yaml for your use case? If not, you can just create a config map without any files here and use it in the test methods.", "author": "vanajamukkara", "createdAt": "2020-11-18T17:53:07Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDynamicUpdate.java", "diffHunk": "@@ -0,0 +1,377 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.CommonMiiTestUtils;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCIR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainResourceWithNewIntrospectVersion;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.checkLogsOnPV;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.checkWorkManagerRuntime;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.createDatabaseSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.createDomainResourceWithLogHome;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.createDomainSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.createJobToChangePermissionsOnPvHostPath;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.readJdbcRuntime;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.readMaxThreadsConstraintRuntimeForWorkManager;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.readMinThreadsConstraintRuntimeForWorkManager;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.replaceConfigMapWithModelFiles;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOcirRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createPV;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createPVC;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretForBaseImages;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getIntrospectJobName;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the following scenarios\n+ *\n+ * <p>testServerLogsAreOnPV\n+ * domain logHome is on PV, check server logs are on PV\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the System Resources in a pre-configured ConfigMap\n+ *\n+ * <p>testAddWorkManager\n+ *  Add a new work manager to a running WebLogic domain\n+ *\n+ * <p>testUpdateWorkManager\n+ *  Update dynamic work manager configurations in a running WebLogic domain.\n+ *\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test dynamic updates to a model in image domain\")\n+@IntegrationTest\n+class ItMiiDynamicUpdate {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-dynamic-update\";\n+  private static String pvName = domainUid + \"-pv\"; // name of the persistent volume\n+  private static String pvcName = domainUid + \"-pvc\"; // name of the persistent volume claim\n+  private static final String initialModelYamlFileName = \"model.sysresources.yaml\";\n+  private static final String configMapName = \"dynamicupdate-test-configmap\";//\"wmconfigmap\";\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private final String adminServerName = \"admin-server\";\n+  private final String workManagerName = \"newWM\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource defintion.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    // this secret is used only for non-kind cluster\n+    createOcirRepoSecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    logger.info(\"Create database secret\");\n+    final String dbSecretName = domainUid  + \"-db-secret\";\n+    assertDoesNotThrow(() -> createDatabaseSecret(dbSecretName, \"scott\",\n+            \"tiger\", \"jdbc:oracle:thin:localhost:/ORCLCDB\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", dbSecretName));\n+\n+    createConfigMapAndVerify(", "originalCommit": "57e9fda3a3b7d8df6d7d93304bfb709f42e42fc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM4NDExMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2056#discussion_r526384110", "bodyText": "I have update the test to create a config map without any files.", "author": "alai8", "createdAt": "2020-11-18T20:04:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMwMTI3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMwMjgzMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2056#discussion_r526302832", "bodyText": "you can remove this test as its not needed for your use case. pod logs contains server logs which are dumped into a file at the end of the test.", "author": "vanajamukkara", "createdAt": "2020-11-18T17:54:30Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDynamicUpdate.java", "diffHunk": "@@ -0,0 +1,377 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.CommonMiiTestUtils;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCIR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainResourceWithNewIntrospectVersion;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.checkLogsOnPV;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.checkWorkManagerRuntime;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.createDatabaseSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.createDomainResourceWithLogHome;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.createDomainSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.createJobToChangePermissionsOnPvHostPath;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.readJdbcRuntime;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.readMaxThreadsConstraintRuntimeForWorkManager;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.readMinThreadsConstraintRuntimeForWorkManager;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.replaceConfigMapWithModelFiles;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOcirRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createPV;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createPVC;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretForBaseImages;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getIntrospectJobName;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the following scenarios\n+ *\n+ * <p>testServerLogsAreOnPV\n+ * domain logHome is on PV, check server logs are on PV\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the System Resources in a pre-configured ConfigMap\n+ *\n+ * <p>testAddWorkManager\n+ *  Add a new work manager to a running WebLogic domain\n+ *\n+ * <p>testUpdateWorkManager\n+ *  Update dynamic work manager configurations in a running WebLogic domain.\n+ *\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test dynamic updates to a model in image domain\")\n+@IntegrationTest\n+class ItMiiDynamicUpdate {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-dynamic-update\";\n+  private static String pvName = domainUid + \"-pv\"; // name of the persistent volume\n+  private static String pvcName = domainUid + \"-pvc\"; // name of the persistent volume claim\n+  private static final String initialModelYamlFileName = \"model.sysresources.yaml\";\n+  private static final String configMapName = \"dynamicupdate-test-configmap\";//\"wmconfigmap\";\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private final String adminServerName = \"admin-server\";\n+  private final String workManagerName = \"newWM\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource defintion.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    // this secret is used only for non-kind cluster\n+    createOcirRepoSecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    logger.info(\"Create database secret\");\n+    final String dbSecretName = domainUid  + \"-db-secret\";\n+    assertDoesNotThrow(() -> createDatabaseSecret(dbSecretName, \"scott\",\n+            \"tiger\", \"jdbc:oracle:thin:localhost:/ORCLCDB\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", dbSecretName));\n+\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(initialModelYamlFileName));\n+\n+\n+    // create pull secrets for WebLogic image when running in non Kind Kubernetes cluster\n+    // this secret is used only for non-kind cluster\n+    createSecretForBaseImages(domainNamespace);\n+\n+    // create PV, PVC for logs\n+    createPV(pvName, domainUid, ItMiiDynamicUpdate.class.getSimpleName());\n+    createPVC(pvName, pvcName, domainUid, domainNamespace);\n+\n+    // create job to change permissions on PV hostPath\n+    createJobToChangePermissionsOnPvHostPath(pvName, pvcName, domainNamespace);\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResourceWithLogHome(domainUid, domainNamespace,\n+        MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG,\n+        adminSecretName, OCIR_SECRET_NAME, encryptionSecretName,\n+        replicaCount, pvName, pvcName, \"cluster-1\", configMapName, dbSecretName, true);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify all k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    logger.info(\"Check admin service and pod {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReadyAndServiceExists(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check managed server services and pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server services and pods are created in namespace {0}\",\n+          domainNamespace);\n+      checkPodReadyAndServiceExists(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+  }\n+\n+  /**\n+   * Check server logs are written on PV.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"Check the server logs are written on PV, look for string RUNNING in server log\")\n+  public void testServerLogsAreOnPV() {", "originalCommit": "57e9fda3a3b7d8df6d7d93304bfb709f42e42fc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM4NDMxOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2056#discussion_r526384318", "bodyText": "Removed testServerLogsAreOnPV(). Thanks", "author": "alai8", "createdAt": "2020-11-18T20:04:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMwMjgzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMwMzEzOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2056#discussion_r526303139", "bodyText": "you can remove this test also", "author": "vanajamukkara", "createdAt": "2020-11-18T17:54:42Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDynamicUpdate.java", "diffHunk": "@@ -0,0 +1,377 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.CommonMiiTestUtils;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCIR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainResourceWithNewIntrospectVersion;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.checkLogsOnPV;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.checkWorkManagerRuntime;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.createDatabaseSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.createDomainResourceWithLogHome;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.createDomainSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.createJobToChangePermissionsOnPvHostPath;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.readJdbcRuntime;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.readMaxThreadsConstraintRuntimeForWorkManager;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.readMinThreadsConstraintRuntimeForWorkManager;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.replaceConfigMapWithModelFiles;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOcirRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createPV;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createPVC;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretForBaseImages;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getIntrospectJobName;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the following scenarios\n+ *\n+ * <p>testServerLogsAreOnPV\n+ * domain logHome is on PV, check server logs are on PV\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the System Resources in a pre-configured ConfigMap\n+ *\n+ * <p>testAddWorkManager\n+ *  Add a new work manager to a running WebLogic domain\n+ *\n+ * <p>testUpdateWorkManager\n+ *  Update dynamic work manager configurations in a running WebLogic domain.\n+ *\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test dynamic updates to a model in image domain\")\n+@IntegrationTest\n+class ItMiiDynamicUpdate {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-dynamic-update\";\n+  private static String pvName = domainUid + \"-pv\"; // name of the persistent volume\n+  private static String pvcName = domainUid + \"-pvc\"; // name of the persistent volume claim\n+  private static final String initialModelYamlFileName = \"model.sysresources.yaml\";\n+  private static final String configMapName = \"dynamicupdate-test-configmap\";//\"wmconfigmap\";\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private final String adminServerName = \"admin-server\";\n+  private final String workManagerName = \"newWM\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource defintion.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    // this secret is used only for non-kind cluster\n+    createOcirRepoSecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    logger.info(\"Create database secret\");\n+    final String dbSecretName = domainUid  + \"-db-secret\";\n+    assertDoesNotThrow(() -> createDatabaseSecret(dbSecretName, \"scott\",\n+            \"tiger\", \"jdbc:oracle:thin:localhost:/ORCLCDB\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", dbSecretName));\n+\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(initialModelYamlFileName));\n+\n+\n+    // create pull secrets for WebLogic image when running in non Kind Kubernetes cluster\n+    // this secret is used only for non-kind cluster\n+    createSecretForBaseImages(domainNamespace);\n+\n+    // create PV, PVC for logs\n+    createPV(pvName, domainUid, ItMiiDynamicUpdate.class.getSimpleName());\n+    createPVC(pvName, pvcName, domainUid, domainNamespace);\n+\n+    // create job to change permissions on PV hostPath\n+    createJobToChangePermissionsOnPvHostPath(pvName, pvcName, domainNamespace);\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResourceWithLogHome(domainUid, domainNamespace,\n+        MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG,\n+        adminSecretName, OCIR_SECRET_NAME, encryptionSecretName,\n+        replicaCount, pvName, pvcName, \"cluster-1\", configMapName, dbSecretName, true);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify all k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    logger.info(\"Check admin service and pod {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReadyAndServiceExists(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check managed server services and pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server services and pods are created in namespace {0}\",\n+          domainNamespace);\n+      checkPodReadyAndServiceExists(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+  }\n+\n+  /**\n+   * Check server logs are written on PV.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"Check the server logs are written on PV, look for string RUNNING in server log\")\n+  public void testServerLogsAreOnPV() {\n+\n+    // check server logs are written on PV and look for string RUNNING in log\n+    checkLogsOnPV(domainNamespace, \"grep RUNNING /shared/logs/\" + adminServerName + \".log\", adminServerPodName);\n+  }\n+\n+  /**\n+   * Create a WebLogic domain with a defined configmap in configuration/model \n+   * section of the domain resource.\n+   * The configmap has multiple sparse WDT model files that define \n+   * a JDBCSystemResource, a JMSSystemResource and a WLDFSystemResource.\n+   * Verify all the SystemResource configurations using the rest API call \n+   * using the public nodeport of the administration server.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"Verify the pre-configured SystemResources in a model-in-image domain\")\n+  public void testMiiCheckSystemResources() {", "originalCommit": "57e9fda3a3b7d8df6d7d93304bfb709f42e42fc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM4NDQ3Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2056#discussion_r526384476", "bodyText": "Removed testMiiCheckSystemResources()", "author": "alai8", "createdAt": "2020-11-18T20:04:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMwMzEzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMwODk3OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2056#discussion_r526308979", "bodyText": "can you add a method in Domain.java and call that method from this method, no implementation in TestActions class.", "author": "vanajamukkara", "createdAt": "2020-11-18T18:02:44Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -1510,6 +1510,30 @@ public static String patchDomainResourceWithNewRestartVersion(\n     return String.valueOf(newVersion);\n   }\n \n+  /**\n+   * Patch the domain resource with a new model configMap.\n+   *\n+   * @param domainResourceName name of the domain resource\n+   * @param namespace Kubernetes namespace that the domain is hosted\n+   * @param configMapName name of the configMap to be set in spec.configuration.model.configMap\n+   */\n+  public static void patchDomainResourceWithModelConfigMap(", "originalCommit": "57e9fda3a3b7d8df6d7d93304bfb709f42e42fc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM4NTQ1NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2056#discussion_r526385454", "bodyText": "Sure. I have also move logic for patchDomainResourceWithModelConfigMap to Domain and call the methods from TestActions. Also did the same to patchDomainResourceWithNewRestartVersion.", "author": "alai8", "createdAt": "2020-11-18T20:06:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMwODk3OQ=="}], "type": "inlineReview"}, {"oid": "e02ccc4bfee3e3306435aa80b05fc187b2c1e9ca", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e02ccc4bfee3e3306435aa80b05fc187b2c1e9ca", "message": "remove system resources from initial config map, remove testServerLogsAreOnPV and testMiiCheckSystemResources", "committedDate": "2020-11-18T19:36:23Z", "type": "commit"}, {"oid": "8dd4f60236b23378cf57f5240217e2300dda5bfa", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8dd4f60236b23378cf57f5240217e2300dda5bfa", "message": "move implementations from TestActions to Domain", "committedDate": "2020-11-18T19:36:52Z", "type": "commit"}]}