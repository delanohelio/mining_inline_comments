{"pr_number": 1643, "pr_title": "Async http client change", "pr_createdAt": "2020-05-12T21:40:38Z", "pr_url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643", "timeline": [{"oid": "5ae5895a3add0c9e147b75e3de01f599a2bb5c93", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5ae5895a3add0c9e147b75e3de01f599a2bb5c93", "message": "changes for using JDK11 http client and async invocation", "committedDate": "2020-05-11T16:01:17Z", "type": "commit"}, {"oid": "3b64c011b70e23b30bce6c8d9873d2b5a147c4fc", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3b64c011b70e23b30bce6c8d9873d2b5a147c4fc", "message": "Add constant for timeout seconds", "committedDate": "2020-05-11T20:29:17Z", "type": "commit"}, {"oid": "f946f7ed845d48269b098e19f05c21460842b113", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f946f7ed845d48269b098e19f05c21460842b113", "message": "minor change", "committedDate": "2020-05-12T12:37:58Z", "type": "commit"}, {"oid": "a83c6f7efb636c941861a91663bc74111546607b", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a83c6f7efb636c941861a91663bc74111546607b", "message": "added new files", "committedDate": "2020-05-12T15:29:14Z", "type": "commit"}, {"oid": "b3b8d8da9229bee6434d93b2817fc9142f66d6e3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b3b8d8da9229bee6434d93b2817fc9142f66d6e3", "message": "added initial tests", "committedDate": "2020-05-12T15:53:39Z", "type": "commit"}, {"oid": "eb78c0195f4f554bb78d59bf1f6114984263bf60", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/eb78c0195f4f554bb78d59bf1f6114984263bf60", "message": "Merge branch 'async-http-client-change' of https://github.com/oracle/weblogic-kubernetes-operator into async-http-client-change", "committedDate": "2020-05-12T21:09:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2MDY4OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r424060688", "bodyText": "Very small thing ;)... This constant must be many places.  Do we need another? I bet it's available on the HTTP client classes.", "author": "rjeberhard", "createdAt": "2020-05-12T22:04:29Z", "path": "operator/src/main/java/oracle/kubernetes/operator/ProcessingConstants.java", "diffHunk": "@@ -34,4 +34,8 @@\n   public static final String DOMAIN_INTROSPECT_VERSION = \"weblogic.domainIntrospectVersion\";\n   public static final String DOMAIN_INPUTS_HASH = \"weblogic.domainInputsHash\";\n   public static final String REMAINING_SERVERS_HEALTH_TO_READ = \"serverHealthRead\";\n+  \n+  public static final String KEY = \"encodedCredentials\";\n+  public static final String RESULT = \"httpResult\";\n+  public static final int HTTP_OK = 200;  ", "originalCommit": "f946f7ed845d48269b098e19f05c21460842b113", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgwMjg3Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r424802873", "bodyText": "Fixed, Using HTTP_OK constant from HttpURLConnection class. Thanks.", "author": "ankedia", "createdAt": "2020-05-14T00:20:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2MDY4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2MDk2Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r424060963", "bodyText": "New file... \"2018, 2020,\" -> \"2020,\"", "author": "rjeberhard", "createdAt": "2020-05-12T22:05:05Z", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/HttpClientFactory.java", "diffHunk": "@@ -0,0 +1,9 @@\n+// Copyright (c) 2018, 2020, Oracle Corporation and/or its affiliates.", "originalCommit": "f946f7ed845d48269b098e19f05c21460842b113", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5NTc3OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r424095779", "bodyText": "Fixed", "author": "ankedia", "createdAt": "2020-05-12T23:45:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2MDk2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2Mjk5OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r424062998", "bodyText": "Same... new file.", "author": "rjeberhard", "createdAt": "2020-05-12T22:10:09Z", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/HttpClientPool.java", "diffHunk": "@@ -0,0 +1,118 @@\n+// Copyright (c) 2017, 2020, Oracle Corporation and/or its affiliates.", "originalCommit": "f946f7ed845d48269b098e19f05c21460842b113", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5NTg3Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r424095876", "bodyText": "Fixed", "author": "ankedia", "createdAt": "2020-05-12T23:45:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2Mjk5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2MzQzOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r424063439", "bodyText": "This is copy/paste from K8s master logic... Not needed here.", "author": "rjeberhard", "createdAt": "2020-05-12T22:11:06Z", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/HttpClientPool.java", "diffHunk": "@@ -0,0 +1,118 @@\n+// Copyright (c) 2017, 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator.helpers;\n+\n+import java.net.http.HttpClient;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.SynchronousQueue;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import oracle.kubernetes.operator.logging.LoggingFacade;\n+import oracle.kubernetes.operator.logging.LoggingFactory;\n+import oracle.kubernetes.operator.logging.MessageKeys;\n+import oracle.kubernetes.operator.work.Container;\n+import oracle.kubernetes.operator.work.ContainerResolver;\n+\n+public class HttpClientPool extends Pool<HttpClient> {\n+  private static final LoggingFacade LOGGER = LoggingFactory.getLogger(\"Operator\", \"Operator\");\n+  private static final HttpClientFactory FACTORY = new DefaultClientFactory();\n+  private static HttpClientPool SINGLETON = new HttpClientPool();\n+  private static ThreadFactory threadFactory;\n+  private final AtomicBoolean isFirst = new AtomicBoolean(true);\n+\n+  // HttpClient instance that will be shared\n+  private final AtomicReference<HttpClient> instance = new AtomicReference<>();\n+\n+  public static void initialize(ThreadFactory threadFactory) {\n+    HttpClientPool.threadFactory = threadFactory;\n+  }\n+\n+  private static Runnable wrapRunnable(Runnable r) {\n+    return new Runnable() {\n+      @Override\n+      public void run() {\n+        try {\n+          r.run();\n+        } catch (Throwable t) {\n+          // These will almost always be spurious exceptions\n+          LOGGER.finer(MessageKeys.EXCEPTION, t);\n+        }\n+      }\n+    };\n+  }\n+\n+  public static HttpClientPool getInstance() {\n+    return SINGLETON;\n+  }\n+\n+  @Override\n+  protected HttpClient create() {\n+    return instance.updateAndGet(\n+        prev -> {\n+          return prev != null ? prev : getHttpClient();\n+        });\n+  }\n+\n+  private HttpClient getHttpClient() {\n+    LOGGER.entering();\n+\n+    HttpClient httpClient = null;\n+    try {\n+      HttpClientFactory factory = null;\n+      Container c = ContainerResolver.getInstance().getContainer();\n+      if (c != null) {\n+        factory = c.getSpi(HttpClientFactory.class);\n+      }\n+      if (factory == null) {\n+        factory = FACTORY;\n+      }\n+\n+      httpClient = factory.get();\n+    } catch (Throwable e) {\n+      LOGGER.warning(MessageKeys.EXCEPTION, e);\n+    }\n+\n+    if (isFirst.compareAndSet(true, false)) {", "originalCommit": "f946f7ed845d48269b098e19f05c21460842b113", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5NTk2Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r424095962", "bodyText": "Fixed. Thanks.", "author": "ankedia", "createdAt": "2020-05-12T23:45:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2MzQzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2NTEzNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r424065135", "bodyText": "Trying to figure out what you're doing here.  I thought you wanted to pool HttpClient instances, but you are creating a single instance and returning it every time.", "author": "rjeberhard", "createdAt": "2020-05-12T22:15:18Z", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/HttpClientPool.java", "diffHunk": "@@ -0,0 +1,118 @@\n+// Copyright (c) 2017, 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator.helpers;\n+\n+import java.net.http.HttpClient;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.SynchronousQueue;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import oracle.kubernetes.operator.logging.LoggingFacade;\n+import oracle.kubernetes.operator.logging.LoggingFactory;\n+import oracle.kubernetes.operator.logging.MessageKeys;\n+import oracle.kubernetes.operator.work.Container;\n+import oracle.kubernetes.operator.work.ContainerResolver;\n+\n+public class HttpClientPool extends Pool<HttpClient> {\n+  private static final LoggingFacade LOGGER = LoggingFactory.getLogger(\"Operator\", \"Operator\");\n+  private static final HttpClientFactory FACTORY = new DefaultClientFactory();\n+  private static HttpClientPool SINGLETON = new HttpClientPool();\n+  private static ThreadFactory threadFactory;\n+  private final AtomicBoolean isFirst = new AtomicBoolean(true);\n+\n+  // HttpClient instance that will be shared\n+  private final AtomicReference<HttpClient> instance = new AtomicReference<>();\n+\n+  public static void initialize(ThreadFactory threadFactory) {\n+    HttpClientPool.threadFactory = threadFactory;\n+  }\n+\n+  private static Runnable wrapRunnable(Runnable r) {\n+    return new Runnable() {\n+      @Override\n+      public void run() {\n+        try {\n+          r.run();\n+        } catch (Throwable t) {\n+          // These will almost always be spurious exceptions\n+          LOGGER.finer(MessageKeys.EXCEPTION, t);\n+        }\n+      }\n+    };\n+  }\n+\n+  public static HttpClientPool getInstance() {\n+    return SINGLETON;\n+  }\n+\n+  @Override\n+  protected HttpClient create() {\n+    return instance.updateAndGet(", "originalCommit": "f946f7ed845d48269b098e19f05c21460842b113", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMDAyOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r424100028", "bodyText": "I was modeling this based on the existing ClientPool class implementation in helper package.  JDK11 http client and request objects are thread-safe and can be safely shared. So I thought creating a single instance and sharing it every time should be fine. In my testing, it seem to work fine. Please let me know if you see any issues with this or if any changes are needed. Thanks.", "author": "ankedia", "createdAt": "2020-05-12T23:59:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2NTEzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3MjE3OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r426772178", "bodyText": "As above, let's rid of this class.", "author": "rjeberhard", "createdAt": "2020-05-18T17:04:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2NTEzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0MDk4OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r426940988", "bodyText": "Removed in commit ba303f0. Thanks.", "author": "ankedia", "createdAt": "2020-05-18T23:11:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2NTEzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2Njg4Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r424066887", "bodyText": "probably want Throwable here", "author": "rjeberhard", "createdAt": "2020-05-12T22:20:02Z", "path": "operator/src/main/java/oracle/kubernetes/operator/steps/ReadHealthStep.java", "diffHunk": "@@ -128,47 +242,62 @@ public NextAction apply(Packet packet) {\n           serverConfig = findServerConfig(cluster, serverName);\n         }\n \n-        if (httpClient == null) {\n+        if (encodedCredentials == null) {\n           LOGGER.info(\n               (LoggingFilter) packet.get(LoggingFilter.LOGGING_FILTER_PACKET_KEY),\n               MessageKeys.WLS_HEALTH_READ_FAILED_NO_HTTPCLIENT,\n               packet.get(ProcessingConstants.SERVER_NAME));\n         } else {\n \n           String serviceUrl =\n-              HttpClient.getServiceUrl(\n+              getServiceUrl(\n                   service,\n                   pod,\n                   serverConfig.getAdminProtocolChannelName(),\n                   serverConfig.getListenPort());\n           if (serviceUrl != null) {\n-            Result result =\n-                httpClient.executePostUrlOnServiceClusterIP(\n-                    getRetrieveHealthSearchUrl(),\n-                    serviceUrl,\n-                    getRetrieveHealthSearchPayload(),\n-                    false);\n-\n-            Pair<String, ServerHealth> pair = createServerHealthFromResult(result);\n-\n-            String state = pair.getLeft();\n-            if (state != null && !state.isEmpty()) {\n-              ConcurrentMap<String, String> serverStateMap =\n-                  (ConcurrentMap<String, String>) packet.get(SERVER_STATE_MAP);\n-              info.updateLastKnownServerStatus(serverName, state);\n-              serverStateMap.put(serverName, state);\n-            }\n-\n-            @SuppressWarnings(\"unchecked\")\n-            ConcurrentMap<String, ServerHealth> serverHealthMap =\n-                (ConcurrentMap<String, ServerHealth>)\n-                    packet.get(ProcessingConstants.SERVER_HEALTH_MAP);\n-\n-            serverHealthMap.put(\n-                (String) packet.get(ProcessingConstants.SERVER_NAME), pair.getRight());\n-            AtomicInteger remainingServersHealthToRead =\n-                packet.getValue(ProcessingConstants.REMAINING_SERVERS_HEALTH_TO_READ);\n-            remainingServersHealthToRead.getAndDecrement();\n+            return doSuspend(\n+                (fiber) -> {\n+                  try {\n+                    String url = serviceUrl + getRetrieveHealthSearchUrl();\n+                    HttpRequest request =\n+                        HttpRequest.newBuilder()\n+                            .uri(URI.create(url))\n+                            .timeout(Duration.ofSeconds(HTTP_TIMEOUT_SECONDS))\n+                            .header(\"Authorization\", \"Basic \" + encodedCredentials)\n+                            .header(\"Accept\", \"application/json\")\n+                            .header(\"Content-Type\", \"application/json\")\n+                            .header(\"X-Requested-By\", \"WebLogic Operator\")\n+                            .POST(\n+                                HttpRequest.BodyPublishers.ofString(\n+                                    getRetrieveHealthSearchPayload()))\n+                            .build();\n+                    httpClient\n+                        .sendAsync(request, HttpResponse.BodyHandlers.ofString())\n+                        .thenApply(\n+                            response ->\n+                                new Result(\n+                                    response.body(),\n+                                    response.statusCode(),\n+                                    response.statusCode() == ProcessingConstants.HTTP_OK))\n+                        .whenComplete(\n+                            (input, exception) -> {\n+                              if (exception != null) {\n+                                LOGGER.severe(\n+                                    MessageKeys.HTTP_METHOD_FAILED,\n+                                    \"POST\",\n+                                    url,\n+                                    input.getResponse());\n+                              } else {\n+                                packet.put(ProcessingConstants.RESULT, input);\n+                              }\n+                              fiber.resume(packet);\n+                            });\n+                  } catch (Exception e) {", "originalCommit": "f946f7ed845d48269b098e19f05c21460842b113", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMDkzMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r424100933", "bodyText": "yes, changed to throwable. Thanks.", "author": "ankedia", "createdAt": "2020-05-13T00:03:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2Njg4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2NzIwMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r424067202", "bodyText": "Is there any support for a timeout?  What if the response never comes back?", "author": "rjeberhard", "createdAt": "2020-05-12T22:20:52Z", "path": "operator/src/main/java/oracle/kubernetes/operator/steps/ReadHealthStep.java", "diffHunk": "@@ -128,47 +242,62 @@ public NextAction apply(Packet packet) {\n           serverConfig = findServerConfig(cluster, serverName);\n         }\n \n-        if (httpClient == null) {\n+        if (encodedCredentials == null) {\n           LOGGER.info(\n               (LoggingFilter) packet.get(LoggingFilter.LOGGING_FILTER_PACKET_KEY),\n               MessageKeys.WLS_HEALTH_READ_FAILED_NO_HTTPCLIENT,\n               packet.get(ProcessingConstants.SERVER_NAME));\n         } else {\n \n           String serviceUrl =\n-              HttpClient.getServiceUrl(\n+              getServiceUrl(\n                   service,\n                   pod,\n                   serverConfig.getAdminProtocolChannelName(),\n                   serverConfig.getListenPort());\n           if (serviceUrl != null) {\n-            Result result =\n-                httpClient.executePostUrlOnServiceClusterIP(\n-                    getRetrieveHealthSearchUrl(),\n-                    serviceUrl,\n-                    getRetrieveHealthSearchPayload(),\n-                    false);\n-\n-            Pair<String, ServerHealth> pair = createServerHealthFromResult(result);\n-\n-            String state = pair.getLeft();\n-            if (state != null && !state.isEmpty()) {\n-              ConcurrentMap<String, String> serverStateMap =\n-                  (ConcurrentMap<String, String>) packet.get(SERVER_STATE_MAP);\n-              info.updateLastKnownServerStatus(serverName, state);\n-              serverStateMap.put(serverName, state);\n-            }\n-\n-            @SuppressWarnings(\"unchecked\")\n-            ConcurrentMap<String, ServerHealth> serverHealthMap =\n-                (ConcurrentMap<String, ServerHealth>)\n-                    packet.get(ProcessingConstants.SERVER_HEALTH_MAP);\n-\n-            serverHealthMap.put(\n-                (String) packet.get(ProcessingConstants.SERVER_NAME), pair.getRight());\n-            AtomicInteger remainingServersHealthToRead =\n-                packet.getValue(ProcessingConstants.REMAINING_SERVERS_HEALTH_TO_READ);\n-            remainingServersHealthToRead.getAndDecrement();\n+            return doSuspend(\n+                (fiber) -> {\n+                  try {\n+                    String url = serviceUrl + getRetrieveHealthSearchUrl();\n+                    HttpRequest request =\n+                        HttpRequest.newBuilder()\n+                            .uri(URI.create(url))\n+                            .timeout(Duration.ofSeconds(HTTP_TIMEOUT_SECONDS))\n+                            .header(\"Authorization\", \"Basic \" + encodedCredentials)\n+                            .header(\"Accept\", \"application/json\")\n+                            .header(\"Content-Type\", \"application/json\")\n+                            .header(\"X-Requested-By\", \"WebLogic Operator\")\n+                            .POST(\n+                                HttpRequest.BodyPublishers.ofString(\n+                                    getRetrieveHealthSearchPayload()))\n+                            .build();\n+                    httpClient\n+                        .sendAsync(request, HttpResponse.BodyHandlers.ofString())\n+                        .thenApply(\n+                            response ->\n+                                new Result(\n+                                    response.body(),\n+                                    response.statusCode(),\n+                                    response.statusCode() == ProcessingConstants.HTTP_OK))\n+                        .whenComplete(", "originalCommit": "f946f7ed845d48269b098e19f05c21460842b113", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2NzQxNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r424067416", "bodyText": "Also, I don't yet understand the flow if the result is not HTTP_OK.", "author": "rjeberhard", "createdAt": "2020-05-12T22:21:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2NzIwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMjEwNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r424102105", "bodyText": "Is there any support for a timeout? What if the response never comes back?\nTimeout is set on request object and it's currently set to 1 min. I'll test the negative case to make sure request times out after specified duration and doesn't hang forever. Please let me know if current timeout value needs to be changed.\n\n                    HttpRequest.newBuilder()\n                        .uri(URI.create(url))\n                        .timeout(Duration.ofSeconds(HTTP_TIMEOUT_SECONDS))", "author": "ankedia", "createdAt": "2020-05-13T00:07:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2NzIwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyOTU5MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r424629590", "bodyText": "I have tested the negative cases where request times out due to HttpConnectTimeoutException and result is not HTTP_OK. I have also made some other changes for flow where result is not HTTP_OK. Hope this make flow more readable. Please let me know if you want to discuss this on a call. Thanks.", "author": "ankedia", "createdAt": "2020-05-13T18:02:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2NzIwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2Nzk4Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r424067986", "bodyText": "I know you probably copied this method, but this text doesn't describe what the method is doing. It looks like it's figuring out the URL of where the server can receive admin traffic.", "author": "rjeberhard", "createdAt": "2020-05-12T22:22:51Z", "path": "operator/src/main/java/oracle/kubernetes/operator/steps/ReadHealthStep.java", "diffHunk": "@@ -183,15 +312,114 @@ public NextAction apply(Packet packet) {\n       }\n     }\n \n+    /**\n+     * Returns the URL to access the Service; using the Service clusterIP and port. If the service", "originalCommit": "f946f7ed845d48269b098e19f05c21460842b113", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgwNDYxMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r424804611", "bodyText": "This method was originally in HttpClient class and I just moved it to ReadHealthStep class (since HttpClient class was removed). I discussed the Java doc text with Anthony and have changed it based on that discussion. Please let me know if this is not clear enough.", "author": "ankedia", "createdAt": "2020-05-14T00:26:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2Nzk4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3Mjg0NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r424072845", "bodyText": "The EncodeCredentialsForServerStep is just creating a readSecret step and then call doNext(). Can it be removed and instead we call SecretHelper.getSecretData() here?", "author": "alai8", "createdAt": "2020-05-12T22:36:22Z", "path": "operator/src/main/java/oracle/kubernetes/operator/steps/ReadHealthStep.java", "diffHunk": "@@ -89,13 +103,110 @@ public NextAction apply(Packet packet) {\n     V1Pod pod = info.getServerPod(serverName);\n     if (service != null) {\n       Step getClient =\n-          HttpClient.createAuthenticatedClientForServer(\n-              namespace, secretName, new ReadHealthWithHttpClientStep(service, pod, getNext()));\n+          getEncodedCredentialsForServer(", "originalCommit": "f946f7ed845d48269b098e19f05c21460842b113", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgwMjU1NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r424802554", "bodyText": "Fixed. Thanks.", "author": "ankedia", "createdAt": "2020-05-14T00:18:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3Mjg0NQ=="}], "type": "inlineReview"}, {"oid": "c527e827dc7d08ce31bec5f8959cfdd04f0f1182", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c527e827dc7d08ce31bec5f8959cfdd04f0f1182", "message": "Review changes", "committedDate": "2020-05-12T23:43:51Z", "type": "commit"}, {"oid": "8e5a979059dd1d5e015ad2bb427fadc3faeb1d4b", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8e5a979059dd1d5e015ad2bb427fadc3faeb1d4b", "message": "delete unit testing related WIP files", "committedDate": "2020-05-13T04:39:08Z", "type": "commit"}, {"oid": "7d387c1b124fd7d662b493c7f02d29d860f28ca7", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7d387c1b124fd7d662b493c7f02d29d860f28ca7", "message": "changes based on PR review comments", "committedDate": "2020-05-14T00:13:22Z", "type": "commit"}, {"oid": "2d89a9516ac2edf6fd03acd9e3e0e64d66d10964", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/2d89a9516ac2edf6fd03acd9e3e0e64d66d10964", "message": "Create steps for async http calls", "committedDate": "2020-05-14T19:18:18Z", "type": "commit"}, {"oid": "027ef27b06a9d7037a15f5b9ccd1b915d0e1ca80", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/027ef27b06a9d7037a15f5b9ccd1b915d0e1ca80", "message": "Use steps to execute asynchronous http request", "committedDate": "2020-05-15T18:05:37Z", "type": "commit"}, {"oid": "dca3bbd002a4aa7c3cf6eb459bb55e75788388b7", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/dca3bbd002a4aa7c3cf6eb459bb55e75788388b7", "message": "remove obsolete Result classes", "committedDate": "2020-05-15T18:12:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc2OTcyOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r426769729", "bodyText": "You need a better constant name.  Why not ENCODED_CREDENTIALS?", "author": "rjeberhard", "createdAt": "2020-05-18T17:00:13Z", "path": "operator/src/main/java/oracle/kubernetes/operator/ProcessingConstants.java", "diffHunk": "@@ -34,4 +34,6 @@\n   public static final String DOMAIN_INTROSPECT_VERSION = \"weblogic.domainIntrospectVersion\";\n   public static final String DOMAIN_INPUTS_HASH = \"weblogic.domainInputsHash\";\n   public static final String REMAINING_SERVERS_HEALTH_TO_READ = \"serverHealthRead\";\n+\n+  public static final String KEY = \"encodedCredentials\";", "originalCommit": "dca3bbd002a4aa7c3cf6eb459bb55e75788388b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1MTA3MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r426851070", "bodyText": "You need a better constant name. Why not ENCODED_CREDENTIALS?\n\nYes, I'll change it to ENCODED_CREDENTIALS. The constant name was previously used to store httpClient instance in packet and I was lazy to use same name for encoded credentials", "author": "ankedia", "createdAt": "2020-05-18T19:36:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc2OTcyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0MTE5OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r426941198", "bodyText": "Fixed in commit ba303f0.", "author": "ankedia", "createdAt": "2020-05-18T23:12:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc2OTcyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3MDA5OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r426770099", "bodyText": "JavaDoc.  What is the \"cont\" parameter?", "author": "rjeberhard", "createdAt": "2020-05-18T17:00:54Z", "path": "operator/src/main/java/oracle/kubernetes/operator/calls/AsyncRequestStep.java", "diffHunk": "@@ -123,6 +126,90 @@ public void listenTimeoutDoubled() {\n     timeoutSeconds *= 2;\n   }\n \n+  class AsyncRequestStepProcessing {\n+\n+    final Packet packet;\n+    final RetryStrategy retryStrategy;\n+    final String cont;\n+    final AtomicBoolean didResume = new AtomicBoolean(false);\n+    final ApiClient client;\n+\n+    public AsyncRequestStepProcessing(Packet packet, RetryStrategy retry, String cont) {", "originalCommit": "dca3bbd002a4aa7c3cf6eb459bb55e75788388b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg0NDEzNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r426844136", "bodyText": "It's the same one the K8s APIs use, apparently having to do with continuing requests. Do you have a recommendation on a better name? Should I put the underscore before it, as some k8s code seems to?", "author": "russgold", "createdAt": "2020-05-18T19:22:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3MDA5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2NjI0Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r426866242", "bodyText": "I'm okay with \"cont\" if I know what it is.  This is a cursor so that you can iterate over a long list.  Say, you had a namespace with 10,000 domains.  You could do a list and say give me the first 200, and then use the cont parameter to ask for the next 200 and so on. I can't understand why it's on this method though.", "author": "rjeberhard", "createdAt": "2020-05-18T20:08:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3MDA5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkyMTA2Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r426921067", "bodyText": "It's needed for this call:\n    // Create a call to Kubernetes that we can cancel if it doesn't succeed in time.\n    private CancellableCall createCall(AsyncFiber fiber) throws ApiException {\n      return factory.generate(requestParams, client, cont, new ApiCallbackImpl(this, fiber));\n    }\n\nThat was in the original version of the class, and I don't see an easy way to get rid of it.", "author": "russgold", "createdAt": "2020-05-18T22:13:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3MDA5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzMTA3Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r426931073", "bodyText": "Okay, resolving this issue.", "author": "rjeberhard", "createdAt": "2020-05-18T22:42:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3MDA5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3MTgxOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r426771818", "bodyText": "I think this class is unnecessary because you don't actually pool HttpClient.  Instead, you can share a single instance.", "author": "rjeberhard", "createdAt": "2020-05-18T17:04:13Z", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/HttpClientPool.java", "diffHunk": "@@ -0,0 +1,114 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.", "originalCommit": "dca3bbd002a4aa7c3cf6eb459bb55e75788388b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxMDE0Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r426910142", "bodyText": "ok, I'll remove HttpClientPool and HttpClientFactory classes. I will introduce a static final variable in HttpAsyncRequestStep.java (below) and use that to invoke async send in \"createFuture\" method. Wanted to confirm if this is the right approach before committing the changes. Thanks.\nprivate static final HttpClient httpClient = HttpClient.newBuilder().build();\nprivate static CompletableFuture<HttpResponse> createFuture(HttpRequest request) {\nreturn httpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString());\n}", "author": "ankedia", "createdAt": "2020-05-18T21:45:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3MTgxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzMTYyOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r426931628", "bodyText": "Yes, looks good.\nThe pool you copied this from is also no longer needed, but removing that is technical debt. When the underlying HTTP client implementation was OkHttp 2.x, the pooling was needed, but OkHttp 3.x has its own internal pooling.", "author": "rjeberhard", "createdAt": "2020-05-18T22:44:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3MTgxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0MTQ0OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r426941448", "bodyText": "ok, got it. I merged change based on above comments in ba303f0.", "author": "ankedia", "createdAt": "2020-05-18T23:13:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3MTgxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3NDc2Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r426774763", "bodyText": "What is the full set of tasks in the steps for this fiber? This says that if the HTTP request times-out, then the full fiber stops.  If this fiber is only reading the status for one server than this is fine. If the fiber is running through a set of servers then none of them will have status updated. If might make more sense to resume the fiber and have the next step (that processes the result) handle that there is no data.", "author": "rjeberhard", "createdAt": "2020-05-18T17:09:37Z", "path": "operator/src/main/java/oracle/kubernetes/operator/http/HttpAsyncRequestStep.java", "diffHunk": "@@ -0,0 +1,122 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator.http;\n+\n+import java.net.HttpURLConnection;\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import oracle.kubernetes.operator.helpers.HttpClientPool;\n+import oracle.kubernetes.operator.logging.LoggingFacade;\n+import oracle.kubernetes.operator.logging.LoggingFactory;\n+import oracle.kubernetes.operator.logging.MessageKeys;\n+import oracle.kubernetes.operator.work.AsyncFiber;\n+import oracle.kubernetes.operator.work.NextAction;\n+import oracle.kubernetes.operator.work.Packet;\n+import oracle.kubernetes.operator.work.Step;\n+\n+/**\n+ * An asynchronous step to handle http requests.\n+ */\n+public class HttpAsyncRequestStep extends Step {\n+\n+  interface FutureFactory {\n+    CompletableFuture<HttpResponse<String>> createFuture(HttpRequest request);\n+  }\n+\n+  private static final LoggingFacade LOGGER = LoggingFactory.getLogger(\"Operator\", \"Operator\");\n+  private static FutureFactory DEFAULT_FACTORY = HttpAsyncRequestStep::createFuture;\n+\n+  private static final long DEFAULT_TIMEOUT_SECONDS = 5;\n+\n+  private static FutureFactory factory = DEFAULT_FACTORY;\n+  private final HttpRequest request;\n+  private long timeoutSeconds = DEFAULT_TIMEOUT_SECONDS;\n+\n+  private HttpAsyncRequestStep(HttpRequest request, HttpResponseStep responseStep) {\n+    super(responseStep);\n+    this.request = request;\n+  }\n+\n+  /**\n+   * Creates a step to send a GET request to a server. If a response is received, processing\n+   * continues with the response step. If none is received within the timeout, the fiber is terminated.\n+   * @param url the URL of the targeted server\n+   * @param responseStep the step to handle the response\n+   * @return a new step to run as part of a fiber, linked to the response step\n+   */\n+  public static HttpAsyncRequestStep createGetRequest(String url, HttpResponseStep responseStep) {\n+    HttpRequest request = HttpRequest.newBuilder(URI.create(url)).GET().build();\n+    return create(request, responseStep);\n+  }\n+\n+  /**\n+   * Creates a step to send a request to a server. If a response is received, processing\n+   * continues with the response step. If none is received within the timeout, the fiber is terminated.\n+   * @param request the http request to send\n+   * @param responseStep the step to handle the response\n+   * @return a new step to run as part of a fiber, linked to the response step\n+   */\n+  public static HttpAsyncRequestStep create(HttpRequest request, HttpResponseStep responseStep) {\n+    return new HttpAsyncRequestStep(request, responseStep);\n+  }\n+\n+  /**\n+   * Overrides the default timeout for this request.\n+   * @param timeoutSeconds the new timeout, in seconds\n+   * @return this step\n+   */\n+  public HttpAsyncRequestStep withTimeoutSeconds(long timeoutSeconds) {\n+    this.timeoutSeconds = timeoutSeconds;\n+    return this;\n+  }\n+\n+  @Override\n+  public NextAction apply(Packet packet) {\n+    AsyncProcessing processing = new AsyncProcessing(packet);\n+    return doSuspend(processing::process);\n+  }\n+\n+  class AsyncProcessing {\n+    private Packet packet;\n+    private CompletableFuture<HttpResponse<String>> future;\n+\n+    AsyncProcessing(Packet packet) {\n+      this.packet = packet;\n+    }\n+\n+    void process(AsyncFiber fiber) {\n+      future = factory.createFuture(request);\n+      future.whenComplete((response, throwable) -> resume(fiber, response, throwable));\n+      fiber.scheduleOnce(timeoutSeconds, TimeUnit.SECONDS, () -> checkTimeout(fiber));\n+    }\n+\n+    private void checkTimeout(AsyncFiber fiber) {\n+      if (!future.isDone()) {\n+        fiber.terminate(new RuntimeException(\"timeout\"), packet);", "originalCommit": "dca3bbd002a4aa7c3cf6eb459bb55e75788388b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg0NDMwNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r426844305", "bodyText": "Agreed. I will add a commit that changes this behavior.", "author": "russgold", "createdAt": "2020-05-18T19:22:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3NDc2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3NTYxNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r426775614", "bodyText": "Looks like this code already handles no response.", "author": "rjeberhard", "createdAt": "2020-05-18T17:11:11Z", "path": "operator/src/main/java/oracle/kubernetes/operator/http/HttpResponseStep.java", "diffHunk": "@@ -0,0 +1,65 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator.http;\n+\n+import java.net.HttpURLConnection;\n+import java.net.http.HttpResponse;\n+import java.util.Optional;\n+\n+import oracle.kubernetes.operator.work.Component;\n+import oracle.kubernetes.operator.work.NextAction;\n+import oracle.kubernetes.operator.work.Packet;\n+import oracle.kubernetes.operator.work.Step;\n+\n+public abstract class HttpResponseStep extends Step {\n+  static final String RESPONSE = \"httpResponse\";\n+\n+  public HttpResponseStep(Step next) {\n+    super(next);\n+  }\n+\n+  @Override\n+  public NextAction apply(Packet packet) {\n+    return Optional.ofNullable(getResponse(packet)).map(r -> doApply(packet, r)).orElse(null);", "originalCommit": "dca3bbd002a4aa7c3cf6eb459bb55e75788388b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg0NDk3Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r426844976", "bodyText": "Agreed, although it returns null, which doesn't work. Fixing that as well.", "author": "russgold", "createdAt": "2020-05-18T19:24:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3NTYxNA=="}], "type": "inlineReview"}, {"oid": "4521b7a3409374478ec4312c1906b63ac45bf8a6", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/4521b7a3409374478ec4312c1906b63ac45bf8a6", "message": "Skip response processing on timeout and continue the fiber.", "committedDate": "2020-05-18T19:25:15Z", "type": "commit"}, {"oid": "3486e3a3a9d085c8af79dcfd4aa313b43456a602", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3486e3a3a9d085c8af79dcfd4aa313b43456a602", "message": "revert to starting values of generated files", "committedDate": "2020-05-18T22:09:18Z", "type": "commit"}, {"oid": "ba303f07be1311d54db3b4b775919af3d2eb4e29", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ba303f07be1311d54db3b4b775919af3d2eb4e29", "message": "Changes based on PR review comments.", "committedDate": "2020-05-18T22:58:39Z", "type": "commit"}, {"oid": "8da758660512f8ad59449a428b3decfd547c5f03", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8da758660512f8ad59449a428b3decfd547c5f03", "message": "Merge branch 'async-http-client-change' of https://github.com/oracle/weblogic-kubernetes-operator into async-http-client-change", "committedDate": "2020-05-18T23:00:05Z", "type": "commit"}, {"oid": "fdbcccd4473100fec4b102eb37e430f87a903a2a", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/fdbcccd4473100fec4b102eb37e430f87a903a2a", "message": "Reduce log serverity level from warning to fine", "committedDate": "2020-05-20T16:04:05Z", "type": "commit"}, {"oid": "84594656cc4514d9790086b4dbfdc902cd597c04", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/84594656cc4514d9790086b4dbfdc902cd597c04", "message": "changed statusUpdateInitialShortDelay from 3 to 5", "committedDate": "2020-05-20T16:24:49Z", "type": "commit"}]}