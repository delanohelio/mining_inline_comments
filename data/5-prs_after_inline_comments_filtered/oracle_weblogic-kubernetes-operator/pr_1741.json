{"pr_number": 1741, "pr_title": "OWLS-79995 - Introduce maxConcurrentStartup cluster configuration", "pr_createdAt": "2020-06-16T20:03:33Z", "pr_url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741", "timeline": [{"oid": "b9b6eaf52e1a540551eb3f9073a00491e30fb61d", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b9b6eaf52e1a540551eb3f9073a00491e30fb61d", "message": "shorten DELAY_IN_SECONDS from 10s to 1s", "committedDate": "2020-05-26T17:18:19Z", "type": "commit"}, {"oid": "39c20192439bd1d60cd63e506c3d9df783dcda67", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/39c20192439bd1d60cd63e506c3d9df783dcda67", "message": "add allowConcurrentScaleUp Cluster configuration, and allowConcurrentScaleUp and allowReplicasBelowDynClusterSize Domain configuration", "committedDate": "2020-05-26T22:50:02Z", "type": "commit"}, {"oid": "69434e04941093d591c05268f3111b42b564c8f6", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/69434e04941093d591c05268f3111b42b564c8f6", "message": "Merge branch 'develop' into owls-79995", "committedDate": "2020-05-27T15:34:32Z", "type": "commit"}, {"oid": "e27588d2103837d5ea59b6f6932e421bed43ade6", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e27588d2103837d5ea59b6f6932e421bed43ade6", "message": "update description for allowConcurrentScaleUp", "committedDate": "2020-05-27T15:38:21Z", "type": "commit"}, {"oid": "61229a48e7df01b87685ed87809278e99a596791", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/61229a48e7df01b87685ed87809278e99a596791", "message": "Merge branch 'develop' into owls-79995", "committedDate": "2020-05-27T15:54:30Z", "type": "commit"}, {"oid": "927a0ba8a453018f811cd567010ee82fb2ce4b90", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/927a0ba8a453018f811cd567010ee82fb2ce4b90", "message": "replace allowConcurrentScaleUp with maxClusterServerConcurrentStartup", "committedDate": "2020-05-27T22:27:26Z", "type": "commit"}, {"oid": "ac7bd9e026ff998865bb834677be2e1647104af3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ac7bd9e026ff998865bb834677be2e1647104af3", "message": "code cleanup", "committedDate": "2020-05-28T00:11:08Z", "type": "commit"}, {"oid": "d8ef627cce2139be7fc36106ebb1d4b4aef214c5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d8ef627cce2139be7fc36106ebb1d4b4aef214c5", "message": "Merge branch 'develop' into owls-79995", "committedDate": "2020-05-28T17:26:13Z", "type": "commit"}, {"oid": "6c93cf2fae3dd732cb06fab7685cb3e8afde85fe", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6c93cf2fae3dd732cb06fab7685cb3e8afde85fe", "message": "add unit tests for ManagedServerUpIteratorStep", "committedDate": "2020-05-28T22:28:03Z", "type": "commit"}, {"oid": "bd2ebe09fb08bcc19e71b8216582ae48bb925752", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/bd2ebe09fb08bcc19e71b8216582ae48bb925752", "message": "more unit tests", "committedDate": "2020-05-28T23:14:40Z", "type": "commit"}, {"oid": "d4ed7252e3a64c67da9c7b5632fdc090b42b413b", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d4ed7252e3a64c67da9c7b5632fdc090b42b413b", "message": "update equals with new fields", "committedDate": "2020-05-29T17:01:20Z", "type": "commit"}, {"oid": "5b34ccfd8affd52171ffd9387137272e6886f796", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5b34ccfd8affd52171ffd9387137272e6886f796", "message": "Merge branch 'develop' into owls-79995", "committedDate": "2020-05-29T22:16:24Z", "type": "commit"}, {"oid": "eee80d4054f0792581155c2b50af0b9ea10abb0a", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/eee80d4054f0792581155c2b50af0b9ea10abb0a", "message": "Merge branch 'develop' into owls-79995", "committedDate": "2020-06-01T16:28:31Z", "type": "commit"}, {"oid": "7a2a879b3b5bff6139b3cf351bb77fa3bd09e01e", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7a2a879b3b5bff6139b3cf351bb77fa3bd09e01e", "message": "Merge branch 'develop' into owls-79995", "committedDate": "2020-06-02T15:35:42Z", "type": "commit"}, {"oid": "09b67cc9dba20520db328e6e2e91ba5406a1c7e5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/09b67cc9dba20520db328e6e2e91ba5406a1c7e5", "message": "Merge branch 'develop' into owls-79995", "committedDate": "2020-06-03T20:39:00Z", "type": "commit"}, {"oid": "08c3b03c98ca3077c3de1bbac2bc09b89b2b9e65", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/08c3b03c98ca3077c3de1bbac2bc09b89b2b9e65", "message": "Merge branch 'develop' into owls-79995", "committedDate": "2020-06-05T17:11:05Z", "type": "commit"}, {"oid": "cb4b22d4a83f555f7a7a7e931eb9680a8a6a6203", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/cb4b22d4a83f555f7a7a7e931eb9680a8a6a6203", "message": "Merge branch 'develop' into owls-79995", "committedDate": "2020-06-05T23:40:06Z", "type": "commit"}, {"oid": "eac17e619a896e8367f54fcee346ecc53829a8b8", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/eac17e619a896e8367f54fcee346ecc53829a8b8", "message": "Merge branch 'develop' into owls-79995", "committedDate": "2020-06-09T16:54:52Z", "type": "commit"}, {"oid": "8087b75326feb293731baa578133ee083937c6d8", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8087b75326feb293731baa578133ee083937c6d8", "message": "Merge branch 'develop' into owls-79995", "committedDate": "2020-06-09T20:50:24Z", "type": "commit"}, {"oid": "f905a51765d76c54ce81d21df46351840490035b", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f905a51765d76c54ce81d21df46351840490035b", "message": "Merge branch 'owls-79995' of https://github.com/oracle/weblogic-kubernetes-operator into owls-79995", "committedDate": "2020-06-09T21:11:01Z", "type": "commit"}, {"oid": "f68034ed639c48445ae52f5cbf94e79fdc6aff2d", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f68034ed639c48445ae52f5cbf94e79fdc6aff2d", "message": "Merge branch 'develop' into owls-79995", "committedDate": "2020-06-11T21:12:17Z", "type": "commit"}, {"oid": "f1b67118619dc77158649880ebfc0df8f5785a86", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f1b67118619dc77158649880ebfc0df8f5785a86", "message": "Merge branch 'develop' into owls-79995", "committedDate": "2020-06-12T17:25:02Z", "type": "commit"}, {"oid": "97a2dbbecc0f5fd03667ad88b0bde749a14314bf", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/97a2dbbecc0f5fd03667ad88b0bde749a14314bf", "message": "Merge branch 'owls-79995' of github.com:oracle/weblogic-kubernetes-operator into owls-79995", "committedDate": "2020-06-12T17:40:22Z", "type": "commit"}, {"oid": "61e5fd8ed9ce9b60da75f1482f88a9f84a770841", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/61e5fd8ed9ce9b60da75f1482f88a9f84a770841", "message": "Merge branch 'develop' into owls-79995", "committedDate": "2020-06-15T18:49:36Z", "type": "commit"}, {"oid": "985519cfe22c522ad67c22b6c98f6476f1888214", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/985519cfe22c522ad67c22b6c98f6476f1888214", "message": "Merge branch 'develop' into owls-79995", "committedDate": "2020-06-16T16:54:08Z", "type": "commit"}, {"oid": "7b32a38235e79fda8b2f0a7b615fdd55ecc59c71", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7b32a38235e79fda8b2f0a7b615fdd55ecc59c71", "message": "rename maxClusterServerConcurrentStartup to maxConcurrentStartup in cluster and maxClusterConcurrentStartup in domain", "committedDate": "2020-06-16T17:26:33Z", "type": "commit"}, {"oid": "664e1838148a5494e0104dd4b758bb4eee45294d", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/664e1838148a5494e0104dd4b758bb4eee45294d", "message": "code cleanup", "committedDate": "2020-06-16T18:48:54Z", "type": "commit"}, {"oid": "14cb39edd9d660b77f81c3df76529740020fc370", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/14cb39edd9d660b77f81c3df76529740020fc370", "message": "update description", "committedDate": "2020-06-16T19:20:05Z", "type": "commit"}, {"oid": "a6259266563355809305891489111e1a47aa0422", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a6259266563355809305891489111e1a47aa0422", "message": "description update", "committedDate": "2020-06-16T19:30:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1NTc2Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#discussion_r441155762", "bodyText": "General questions (not directly related to this unit test):\nWill the managed server startup ordering fix from #1727 continue to apply (start 'lowest' servers first)?  I assume so?\nIf the answer is yes, do these unit tests verify this?", "author": "tbarnes-us", "createdAt": "2020-06-16T21:35:08Z", "path": "operator/src/test/java/oracle/kubernetes/operator/steps/ManagedServerUpIteratorStepTest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator.steps;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.meterware.simplestub.Memento;\n+import com.meterware.simplestub.StaticStubSupport;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import oracle.kubernetes.operator.ProcessingConstants;\n+import oracle.kubernetes.operator.helpers.DomainPresenceInfo;\n+import oracle.kubernetes.operator.helpers.DomainPresenceInfo.ServerStartupInfo;\n+import oracle.kubernetes.operator.steps.ManagedServerUpIteratorStep.StartClusteredServersStep;\n+import oracle.kubernetes.operator.steps.ManagedServerUpIteratorStep.StartManagedServersStep;\n+import oracle.kubernetes.operator.utils.WlsDomainConfigSupport;\n+import oracle.kubernetes.operator.work.FiberTestSupport;\n+import oracle.kubernetes.operator.work.Step;\n+import oracle.kubernetes.operator.work.Step.StepAndPacket;\n+import oracle.kubernetes.operator.work.TerminalStep;\n+import oracle.kubernetes.utils.TestUtils;\n+import oracle.kubernetes.weblogic.domain.ClusterConfigurator;\n+import oracle.kubernetes.weblogic.domain.DomainConfigurator;\n+import oracle.kubernetes.weblogic.domain.DomainConfiguratorFactory;\n+import oracle.kubernetes.weblogic.domain.model.Domain;\n+import oracle.kubernetes.weblogic.domain.model.DomainSpec;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static oracle.kubernetes.operator.steps.ManagedServerUpIteratorStepTest.TestStepFactory.getServers;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.junit.MatcherAssert.assertThat;\n+\n+public class ManagedServerUpIteratorStepTest {\n+\n+  private static final String DOMAIN = \"domain\";\n+  private static final String NS = \"namespace\";\n+  private static final String UID = \"uid1\";\n+  private static final String ADMIN = \"asName\";\n+  private static final String CLUSTER = \"cluster1\";\n+  private final Domain domain = createDomain();\n+  private final DomainConfigurator configurator = DomainConfiguratorFactory.forDomain(domain);\n+  private WlsDomainConfigSupport configSupport = new WlsDomainConfigSupport(DOMAIN);\n+\n+  private Step nextStep = new TerminalStep();\n+  private FiberTestSupport testSupport = new FiberTestSupport();\n+  private List<Memento> mementos = new ArrayList<>();\n+  private DomainPresenceInfo domainPresenceInfo = createDomainPresenceInfo();\n+  private TestUtils.ConsoleHandlerMemento consoleHandlerMemento;\n+\n+  private DomainPresenceInfo createDomainPresenceInfo() {\n+    return new DomainPresenceInfo(domain);\n+  }\n+\n+  private Domain createDomain() {\n+    return new Domain().withMetadata(createMetaData()).withSpec(createDomainSpec());\n+  }\n+\n+  private V1ObjectMeta createMetaData() {\n+    return new V1ObjectMeta().namespace(NS);\n+  }\n+\n+  private DomainSpec createDomainSpec() {\n+    return new DomainSpec().withDomainUid(UID).withReplicas(1);\n+  }\n+\n+  /**\n+   * Setup env for tests.\n+   * @throws NoSuchFieldException if TestStepFactory fails to install\n+   */\n+  @Before\n+  public void setUp() throws NoSuchFieldException {\n+    mementos.add(consoleHandlerMemento = TestUtils.silenceOperatorLogger());\n+    mementos.add(TestStepFactory.install());\n+    testSupport.addDomainPresenceInfo(domainPresenceInfo);\n+  }\n+\n+  /**\n+   * Cleanup env after tests.\n+   * @throws Exception if test support failed\n+   */\n+  @After\n+  public void tearDown() throws Exception {\n+    for (Memento memento : mementos) {\n+      memento.revert();\n+    }\n+\n+    testSupport.throwOnCompletionFailure();\n+  }\n+\n+  @Test\n+  public void verifyThat_withConcurrencyOf1_bothClusteredServersShouldStartSequentially() {\n+    configureCluster(CLUSTER).withMaxConcurrentStartup(1);\n+    addWlsCluster(CLUSTER, \"ms1\", \"ms2\");\n+\n+    invokeStepWithServerStartupInfos(createServerStartupInfosForCluster(CLUSTER,\"ms1\", \"ms2\"));\n+\n+    assertThat(getServers(), hasItem(Arrays.asList(\"ms1\", \"ms2\")));\n+    assertThat(getServers().size(), equalTo(1));\n+  }\n+\n+  @Test\n+  public void verifyThat_withConcurrencyOf0_bothClusteredServersShouldStartConcurrently() {\n+    configureCluster(CLUSTER).withMaxConcurrentStartup(0);\n+    addWlsCluster(CLUSTER, \"ms1\", \"ms2\");\n+\n+    invokeStepWithServerStartupInfos(createServerStartupInfosForCluster(CLUSTER,\"ms1\", \"ms2\"));\n+\n+    assertThat(getServers(), allOf(hasItem(\"ms1\"), hasItem(\"ms2\")));\n+  }\n+\n+  @Test\n+  public void verifyThat_withConcurrencyOf2_bothClusteredServersShouldStartConcurrently() {\n+    configureCluster(CLUSTER).withMaxConcurrentStartup(2);\n+    addWlsCluster(CLUSTER, \"ms1\", \"ms2\");\n+\n+    invokeStepWithServerStartupInfos(createServerStartupInfosForCluster(CLUSTER, \"ms1\", \"ms2\"));\n+\n+    assertThat(getServers(), allOf(hasItem(\"ms1\"), hasItem(\"ms2\")));\n+  }\n+\n+  @Test\n+  public void verifyThat_withConcurrencyOf2_4clusteredServersShouldStartIn2Threads() {\n+    configureCluster(CLUSTER).withMaxConcurrentStartup(2);\n+    addWlsCluster(CLUSTER, \"ms1\", \"ms2\", \"ms3\", \"ms4\");\n+\n+    invokeStepWithServerStartupInfos(createServerStartupInfosForCluster(CLUSTER, \"ms1\", \"ms2\", \"ms3\", \"ms4\"));\n+\n+    assertThat(getServers(), hasItem(Arrays.asList(\"ms1\", \"ms2\", \"ms3\", \"ms4\")));\n+    assertThat(getServers().size(), equalTo(2));\n+  }", "originalCommit": "a6259266563355809305891489111e1a47aa0422", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2NDcxOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#discussion_r441164719", "bodyText": "yes, fix from #1727 should continue to apply.\nThese unit tests won't verify it. #1727 updates WlsClusterConfig.getServerConfigs() to return a sorted list of server configs, which helps to create a sorted list of ServerStartupInfos.  But ManagedServerUpIteratorStepTest here create its own  ServerStartupInfos arrays in the tests.", "author": "alai8", "createdAt": "2020-06-16T21:55:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1NTc2Mg=="}], "type": "inlineReview"}, {"oid": "415bfdad0c84b3ad78fdbd1157a3975131e3767b", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/415bfdad0c84b3ad78fdbd1157a3975131e3767b", "message": "doc edits from review comments", "committedDate": "2020-06-16T21:35:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2ODEwMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#discussion_r441168103", "bodyText": "If you're using Intellij, it should have suggested that you change this to\n.filter(this::isServerInCluster)\nsince there is no need to repeat the variable ssi here", "author": "russgold", "createdAt": "2020-06-16T22:03:59Z", "path": "operator/src/main/java/oracle/kubernetes/operator/steps/ManagedServerUpIteratorStep.java", "diffHunk": "@@ -102,6 +119,27 @@ private Packet createPacketForServer(Packet packet, ServerStartupInfo ssi) {\n     return p;\n   }\n \n+  private Map<String, StartClusteredServersStepFactory> getStartClusteredServersStepFactories(\n+      Collection<ServerStartupInfo> startupInfos,\n+      Packet packet) {\n+    DomainPresenceInfo info = packet.getSpi(DomainPresenceInfo.class);\n+    Domain domain = info.getDomain();\n+\n+    Map<String, StartClusteredServersStepFactory> factories = new HashMap<>();\n+    startupInfos.stream()\n+        .filter(ssi -> isServerInCluster(ssi))", "originalCommit": "415bfdad0c84b3ad78fdbd1157a3975131e3767b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4NDMzNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#discussion_r441184336", "bodyText": "done", "author": "alai8", "createdAt": "2020-06-16T22:48:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2ODEwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE3MDMzNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#discussion_r441170335", "bodyText": "You don't need to prefix your test names with \"verifyThat_\" since all tests do verification. Just make it an assertion on the behaviors, such as:\nwithConcurrencyOf1_clusteredServersStartSequentially", "author": "russgold", "createdAt": "2020-06-16T22:09:51Z", "path": "operator/src/test/java/oracle/kubernetes/operator/steps/ManagedServerUpIteratorStepTest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator.steps;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.meterware.simplestub.Memento;\n+import com.meterware.simplestub.StaticStubSupport;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import oracle.kubernetes.operator.ProcessingConstants;\n+import oracle.kubernetes.operator.helpers.DomainPresenceInfo;\n+import oracle.kubernetes.operator.helpers.DomainPresenceInfo.ServerStartupInfo;\n+import oracle.kubernetes.operator.steps.ManagedServerUpIteratorStep.StartClusteredServersStep;\n+import oracle.kubernetes.operator.steps.ManagedServerUpIteratorStep.StartManagedServersStep;\n+import oracle.kubernetes.operator.utils.WlsDomainConfigSupport;\n+import oracle.kubernetes.operator.work.FiberTestSupport;\n+import oracle.kubernetes.operator.work.Step;\n+import oracle.kubernetes.operator.work.Step.StepAndPacket;\n+import oracle.kubernetes.operator.work.TerminalStep;\n+import oracle.kubernetes.utils.TestUtils;\n+import oracle.kubernetes.weblogic.domain.ClusterConfigurator;\n+import oracle.kubernetes.weblogic.domain.DomainConfigurator;\n+import oracle.kubernetes.weblogic.domain.DomainConfiguratorFactory;\n+import oracle.kubernetes.weblogic.domain.model.Domain;\n+import oracle.kubernetes.weblogic.domain.model.DomainSpec;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static oracle.kubernetes.operator.steps.ManagedServerUpIteratorStepTest.TestStepFactory.getServers;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.junit.MatcherAssert.assertThat;\n+\n+public class ManagedServerUpIteratorStepTest {\n+\n+  private static final String DOMAIN = \"domain\";\n+  private static final String NS = \"namespace\";\n+  private static final String UID = \"uid1\";\n+  private static final String ADMIN = \"asName\";\n+  private static final String CLUSTER = \"cluster1\";\n+  private final Domain domain = createDomain();\n+  private final DomainConfigurator configurator = DomainConfiguratorFactory.forDomain(domain);\n+  private WlsDomainConfigSupport configSupport = new WlsDomainConfigSupport(DOMAIN);\n+\n+  private Step nextStep = new TerminalStep();\n+  private FiberTestSupport testSupport = new FiberTestSupport();\n+  private List<Memento> mementos = new ArrayList<>();\n+  private DomainPresenceInfo domainPresenceInfo = createDomainPresenceInfo();\n+  private TestUtils.ConsoleHandlerMemento consoleHandlerMemento;\n+\n+  private DomainPresenceInfo createDomainPresenceInfo() {\n+    return new DomainPresenceInfo(domain);\n+  }\n+\n+  private Domain createDomain() {\n+    return new Domain().withMetadata(createMetaData()).withSpec(createDomainSpec());\n+  }\n+\n+  private V1ObjectMeta createMetaData() {\n+    return new V1ObjectMeta().namespace(NS);\n+  }\n+\n+  private DomainSpec createDomainSpec() {\n+    return new DomainSpec().withDomainUid(UID).withReplicas(1);\n+  }\n+\n+  /**\n+   * Setup env for tests.\n+   * @throws NoSuchFieldException if TestStepFactory fails to install\n+   */\n+  @Before\n+  public void setUp() throws NoSuchFieldException {\n+    mementos.add(consoleHandlerMemento = TestUtils.silenceOperatorLogger());\n+    mementos.add(TestStepFactory.install());\n+    testSupport.addDomainPresenceInfo(domainPresenceInfo);\n+  }\n+\n+  /**\n+   * Cleanup env after tests.\n+   * @throws Exception if test support failed\n+   */\n+  @After\n+  public void tearDown() throws Exception {\n+    for (Memento memento : mementos) {\n+      memento.revert();\n+    }\n+\n+    testSupport.throwOnCompletionFailure();\n+  }\n+\n+  @Test\n+  public void verifyThat_withConcurrencyOf1_bothClusteredServersShouldStartSequentially() {", "originalCommit": "415bfdad0c84b3ad78fdbd1157a3975131e3767b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4NDUwOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#discussion_r441184508", "bodyText": "thanks. updated test names.", "author": "alai8", "createdAt": "2020-06-16T22:48:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE3MDMzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE3MDkwOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#discussion_r441170909", "bodyText": "missing 'e' in \"Clusterd\"", "author": "russgold", "createdAt": "2020-06-16T22:11:16Z", "path": "operator/src/test/java/oracle/kubernetes/operator/steps/ManagedServerUpIteratorStepTest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator.steps;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.meterware.simplestub.Memento;\n+import com.meterware.simplestub.StaticStubSupport;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import oracle.kubernetes.operator.ProcessingConstants;\n+import oracle.kubernetes.operator.helpers.DomainPresenceInfo;\n+import oracle.kubernetes.operator.helpers.DomainPresenceInfo.ServerStartupInfo;\n+import oracle.kubernetes.operator.steps.ManagedServerUpIteratorStep.StartClusteredServersStep;\n+import oracle.kubernetes.operator.steps.ManagedServerUpIteratorStep.StartManagedServersStep;\n+import oracle.kubernetes.operator.utils.WlsDomainConfigSupport;\n+import oracle.kubernetes.operator.work.FiberTestSupport;\n+import oracle.kubernetes.operator.work.Step;\n+import oracle.kubernetes.operator.work.Step.StepAndPacket;\n+import oracle.kubernetes.operator.work.TerminalStep;\n+import oracle.kubernetes.utils.TestUtils;\n+import oracle.kubernetes.weblogic.domain.ClusterConfigurator;\n+import oracle.kubernetes.weblogic.domain.DomainConfigurator;\n+import oracle.kubernetes.weblogic.domain.DomainConfiguratorFactory;\n+import oracle.kubernetes.weblogic.domain.model.Domain;\n+import oracle.kubernetes.weblogic.domain.model.DomainSpec;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static oracle.kubernetes.operator.steps.ManagedServerUpIteratorStepTest.TestStepFactory.getServers;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.junit.MatcherAssert.assertThat;\n+\n+public class ManagedServerUpIteratorStepTest {\n+\n+  private static final String DOMAIN = \"domain\";\n+  private static final String NS = \"namespace\";\n+  private static final String UID = \"uid1\";\n+  private static final String ADMIN = \"asName\";\n+  private static final String CLUSTER = \"cluster1\";\n+  private final Domain domain = createDomain();\n+  private final DomainConfigurator configurator = DomainConfiguratorFactory.forDomain(domain);\n+  private WlsDomainConfigSupport configSupport = new WlsDomainConfigSupport(DOMAIN);\n+\n+  private Step nextStep = new TerminalStep();\n+  private FiberTestSupport testSupport = new FiberTestSupport();\n+  private List<Memento> mementos = new ArrayList<>();\n+  private DomainPresenceInfo domainPresenceInfo = createDomainPresenceInfo();\n+  private TestUtils.ConsoleHandlerMemento consoleHandlerMemento;\n+\n+  private DomainPresenceInfo createDomainPresenceInfo() {\n+    return new DomainPresenceInfo(domain);\n+  }\n+\n+  private Domain createDomain() {\n+    return new Domain().withMetadata(createMetaData()).withSpec(createDomainSpec());\n+  }\n+\n+  private V1ObjectMeta createMetaData() {\n+    return new V1ObjectMeta().namespace(NS);\n+  }\n+\n+  private DomainSpec createDomainSpec() {\n+    return new DomainSpec().withDomainUid(UID).withReplicas(1);\n+  }\n+\n+  /**\n+   * Setup env for tests.\n+   * @throws NoSuchFieldException if TestStepFactory fails to install\n+   */\n+  @Before\n+  public void setUp() throws NoSuchFieldException {\n+    mementos.add(consoleHandlerMemento = TestUtils.silenceOperatorLogger());\n+    mementos.add(TestStepFactory.install());\n+    testSupport.addDomainPresenceInfo(domainPresenceInfo);\n+  }\n+\n+  /**\n+   * Cleanup env after tests.\n+   * @throws Exception if test support failed\n+   */\n+  @After\n+  public void tearDown() throws Exception {\n+    for (Memento memento : mementos) {\n+      memento.revert();\n+    }\n+\n+    testSupport.throwOnCompletionFailure();\n+  }\n+\n+  @Test\n+  public void verifyThat_withConcurrencyOf1_bothClusteredServersShouldStartSequentially() {\n+    configureCluster(CLUSTER).withMaxConcurrentStartup(1);\n+    addWlsCluster(CLUSTER, \"ms1\", \"ms2\");\n+\n+    invokeStepWithServerStartupInfos(createServerStartupInfosForCluster(CLUSTER,\"ms1\", \"ms2\"));\n+\n+    assertThat(getServers(), hasItem(Arrays.asList(\"ms1\", \"ms2\")));\n+    assertThat(getServers().size(), equalTo(1));\n+  }\n+\n+  @Test\n+  public void verifyThat_withConcurrencyOf0_bothClusteredServersShouldStartConcurrently() {\n+    configureCluster(CLUSTER).withMaxConcurrentStartup(0);\n+    addWlsCluster(CLUSTER, \"ms1\", \"ms2\");\n+\n+    invokeStepWithServerStartupInfos(createServerStartupInfosForCluster(CLUSTER,\"ms1\", \"ms2\"));\n+\n+    assertThat(getServers(), allOf(hasItem(\"ms1\"), hasItem(\"ms2\")));\n+  }\n+\n+  @Test\n+  public void verifyThat_withConcurrencyOf2_bothClusteredServersShouldStartConcurrently() {\n+    configureCluster(CLUSTER).withMaxConcurrentStartup(2);\n+    addWlsCluster(CLUSTER, \"ms1\", \"ms2\");\n+\n+    invokeStepWithServerStartupInfos(createServerStartupInfosForCluster(CLUSTER, \"ms1\", \"ms2\"));\n+\n+    assertThat(getServers(), allOf(hasItem(\"ms1\"), hasItem(\"ms2\")));\n+  }\n+\n+  @Test\n+  public void verifyThat_withConcurrencyOf2_4clusteredServersShouldStartIn2Threads() {\n+    configureCluster(CLUSTER).withMaxConcurrentStartup(2);\n+    addWlsCluster(CLUSTER, \"ms1\", \"ms2\", \"ms3\", \"ms4\");\n+\n+    invokeStepWithServerStartupInfos(createServerStartupInfosForCluster(CLUSTER, \"ms1\", \"ms2\", \"ms3\", \"ms4\"));\n+\n+    assertThat(getServers(), hasItem(Arrays.asList(\"ms1\", \"ms2\", \"ms3\", \"ms4\")));\n+    assertThat(getServers().size(), equalTo(2));\n+  }\n+\n+  @Test\n+  public void verifyThat_withMultipleClusters_differentClusterShouldStartDifferently() {\n+    final String CLUSTER2 = \"cluster2\";\n+    configureCluster(CLUSTER).withMaxConcurrentStartup(1);\n+    configureCluster(CLUSTER2).withMaxConcurrentStartup(0);\n+\n+    addWlsCluster(CLUSTER, \"ms1\", \"ms2\");\n+    addWlsCluster(CLUSTER2, \"ms3\", \"ms4\");\n+\n+    Collection<ServerStartupInfo> serverStartupInfos = createServerStartupInfosForCluster(CLUSTER, \"ms1\", \"ms2\");\n+    serverStartupInfos.addAll(createServerStartupInfosForCluster(CLUSTER2, \"ms3\", \"ms4\"));\n+    invokeStepWithServerStartupInfos(serverStartupInfos);\n+\n+    assertThat(getServers(), hasItem(Arrays.asList(\"ms1\", \"ms2\")));\n+    assertThat(getServers(), allOf(hasItem(\"ms3\"), hasItem(\"ms4\")));\n+  }\n+\n+  @Test\n+  public void verifyThat_maxClusterConcurrentStartup_doesNotApplyToNonClusterdServers() {", "originalCommit": "415bfdad0c84b3ad78fdbd1157a3975131e3767b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4NDU1NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#discussion_r441184555", "bodyText": "thanks", "author": "alai8", "createdAt": "2020-06-16T22:48:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE3MDkwOQ=="}], "type": "inlineReview"}, {"oid": "dd05dace062734eea464d2948e72ca8c603bb56e", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/dd05dace062734eea464d2948e72ca8c603bb56e", "message": "minor fix to address review comment", "committedDate": "2020-06-16T22:46:50Z", "type": "commit"}, {"oid": "4581c58d1bd8ff64c16dee7f9e77e83651f0b3b8", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/4581c58d1bd8ff64c16dee7f9e77e83651f0b3b8", "message": "test names", "committedDate": "2020-06-16T22:47:15Z", "type": "commit"}, {"oid": "ce26e66b652939aec77de922659c7915961a2728", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ce26e66b652939aec77de922659c7915961a2728", "message": "Merge remote-tracking branch 'origin/develop' into owls-79995", "committedDate": "2020-06-19T18:25:28Z", "type": "commit"}]}