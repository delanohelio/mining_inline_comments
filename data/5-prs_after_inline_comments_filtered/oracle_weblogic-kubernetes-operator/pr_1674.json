{"pr_number": 1674, "pr_title": "Test multiple model files in domain's configmap", "pr_createdAt": "2020-05-22T18:02:26Z", "pr_url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1674", "timeline": [{"oid": "f500061404b0291a0cc9bdb6ac0b534e25bdc6a3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f500061404b0291a0cc9bdb6ac0b534e25bdc6a3", "message": "Add first test case for multiple model file use case", "committedDate": "2020-05-22T16:38:05Z", "type": "commit"}, {"oid": "38cebb40ffb51f024fe327ca975d75cac122ca70", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/38cebb40ffb51f024fe327ca975d75cac122ca70", "message": "Minor javadoc change", "committedDate": "2020-05-22T17:57:16Z", "type": "commit"}, {"oid": "286f9ac5d081f44160ef26b3bd74f330ea533b7f", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/286f9ac5d081f44160ef26b3bd74f330ea533b7f", "message": "Fix a log message", "committedDate": "2020-05-22T18:12:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU1OTY2OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1674#discussion_r430559669", "bodyText": "can you add a little bit more description on what is expected here? Is it the configuration applied by model file 1 is overwritten, in which order the model files are applied?", "author": "sankarpn", "createdAt": "2020-05-26T16:46:38Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiMultiModel.java", "diffHunk": "@@ -0,0 +1,332 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.annotations.tags.MustNotRunInParallel;\n+import oracle.weblogic.kubernetes.annotations.tags.Slow;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DEFAULT_CHANNEL_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test to create model-in-image domain with a ConfigMap that contains multiple WDT models\")\n+@IntegrationTest\n+class ItMiiMultiModel implements LoggedTest {\n+\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  \n+  private static String domainUid = \"mii-multimodel-cm-domain\";\n+\n+  private static String adminServerPodName = String.format(\"%s-%s\", domainUid, ADMIN_SERVER_NAME_BASE);\n+  private static String managedServerPrefix = String.format(\"%s-%s\", domainUid, MANAGED_SERVER_NAME_BASE);\n+  private static int replicaCount = 2;\n+\n+  /**\n+   * Perform initialization for all the tests in this class.\n+   * Set up the necessary namespaces and install the operator in the first namespace.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install the operator\n+    logger.info(\"Install an operator in namespace {0}, managing namespace {1}\",\n+        opNamespace, domainNamespace);\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+  }\n+\n+  /**\n+   * Test that two WDT model files in a domain resource's ConfigMap are applied in the expected order.\n+   * Create a WebLogic domain with a Kubernetes ConfigMap that contains two WDT model files.\n+   * Verify that the effective configuration of the domain is as expected.", "originalCommit": "286f9ac5d081f44160ef26b3bd74f330ea533b7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYzNjc4Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1674#discussion_r430636783", "bodyText": "There are some explanations in the beginning of the test code where we specify the variables for the two model files. I just added more explanations. Can you check and see if it is clearer to you?", "author": "doxiao", "createdAt": "2020-05-26T18:56:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU1OTY2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0MzExOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1674#discussion_r430843119", "bodyText": "Is it the files sorted by name and used?", "author": "sankarpn", "createdAt": "2020-05-27T03:55:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU1OTY2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEzMDMxMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1674#discussion_r431130310", "bodyText": "Yes, the introspection sorts the files by their names and passes them to WDT in that order.  I added a link to the operator doc.", "author": "doxiao", "createdAt": "2020-05-27T13:28:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU1OTY2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU2MzMwOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1674#discussion_r430563309", "bodyText": "This check has to be done right after the checkPodReady(adminServerPodName, domainUid, domainNamespace);\nI have seen that when admin services are  not created because of any errors like in T3ChannelPort not matching with nodePort, the managed servers pods are not created. But it throws off us to the debugging as to why the managed servers are not created than concentrating on the admin server services creation failures.", "author": "sankarpn", "createdAt": "2020-05-26T16:52:49Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiMultiModel.java", "diffHunk": "@@ -0,0 +1,332 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.annotations.tags.MustNotRunInParallel;\n+import oracle.weblogic.kubernetes.annotations.tags.Slow;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DEFAULT_CHANNEL_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test to create model-in-image domain with a ConfigMap that contains multiple WDT models\")\n+@IntegrationTest\n+class ItMiiMultiModel implements LoggedTest {\n+\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  \n+  private static String domainUid = \"mii-multimodel-cm-domain\";\n+\n+  private static String adminServerPodName = String.format(\"%s-%s\", domainUid, ADMIN_SERVER_NAME_BASE);\n+  private static String managedServerPrefix = String.format(\"%s-%s\", domainUid, MANAGED_SERVER_NAME_BASE);\n+  private static int replicaCount = 2;\n+\n+  /**\n+   * Perform initialization for all the tests in this class.\n+   * Set up the necessary namespaces and install the operator in the first namespace.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install the operator\n+    logger.info(\"Install an operator in namespace {0}, managing namespace {1}\",\n+        opNamespace, domainNamespace);\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+  }\n+\n+  /**\n+   * Test that two WDT model files in a domain resource's ConfigMap are applied in the expected order.\n+   * Create a WebLogic domain with a Kubernetes ConfigMap that contains two WDT model files.\n+   * Verify that the effective configuration of the domain is as expected.\n+   */\n+  @Test\n+  @DisplayName(\"Create model-in-image domain with a ConfigMap that contains multiple model files\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testCreateMiiDomainWithMultiModeCM() {\n+\n+    // These two model files define the same DatatSource \"TestDataSource\". The only\n+    // difference is the connection pool's MaxCapacity setting, which are 30 and 40 respectively.\n+    // According to the ordering rules, the effective value of MaxCapacity should be 40 when both\n+    // model files are in the domain configuration model's ConfigMap.\n+    // In addition, the first model defines a second DataSource \"TestDataSource3\", which should\n+    // also be in the resultant configuration.\n+    final String modelFileName1 = \"multi-model-two-ds.10.yaml\";\n+    final String modelFileName2 = \"multi-model-one-ds.20.yaml\";\n+\n+    final String dsName = \"TestDataSource\";\n+    final String dsName3 = \"TestDataSource3\";\n+\n+    final String configMapName = \"ds-multi-model-cm\";\n+\n+    logger.info(\"Create the repo secret {0} to pull the image\", REPO_SECRET_NAME);\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+            String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        adminSecretName,\n+        domainNamespace,\n+        ADMIN_USERNAME_DEFAULT,\n+        ADMIN_PASSWORD_DEFAULT),\n+        String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        encryptionSecretName,\n+        domainNamespace,\n+        \"weblogicenc\",\n+        \"weblogicenc\"),\n+        String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    logger.info(\"Create ConfigMap {0} that contains model files {1} and {2}\",\n+        configMapName, modelFileName1, modelFileName2);\n+\n+    Map<String, String> data = new HashMap<>();\n+    addModelFile(data, modelFileName1);\n+    addModelFile(data, modelFileName2);\n+\n+    createConfigMapAndVerify(configMapName, domainUid, domainNamespace, data);\n+\n+    logger.info(\"Create the domain resource {0} in namespace {1} with ConfigMap {2}\",\n+        domainUid, domainNamespace, configMapName);\n+    Domain domain = createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName, replicaCount, configMapName);\n+    \n+    createDomainAndVerify(domain, domainNamespace);\n+\n+    // check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);", "originalCommit": "286f9ac5d081f44160ef26b3bd74f330ea533b7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYzNjkyNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1674#discussion_r430636926", "bodyText": "changed the order.", "author": "doxiao", "createdAt": "2020-05-26T18:56:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU2MzMwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU2NzgwMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1674#discussion_r430567801", "bodyText": "There is only one test in the class, do we still need the method order?", "author": "sankarpn", "createdAt": "2020-05-26T16:59:47Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiMultiModel.java", "diffHunk": "@@ -0,0 +1,332 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.annotations.tags.MustNotRunInParallel;\n+import oracle.weblogic.kubernetes.annotations.tags.Slow;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DEFAULT_CHANNEL_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)", "originalCommit": "286f9ac5d081f44160ef26b3bd74f330ea533b7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYzNTI5MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1674#discussion_r430635291", "bodyText": "good eyes! removed.", "author": "doxiao", "createdAt": "2020-05-26T18:54:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU2NzgwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU2ODA0MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1674#discussion_r430568041", "bodyText": "Why this test shouldn't be run in parallel?", "author": "sankarpn", "createdAt": "2020-05-26T17:00:08Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiMultiModel.java", "diffHunk": "@@ -0,0 +1,332 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.annotations.tags.MustNotRunInParallel;\n+import oracle.weblogic.kubernetes.annotations.tags.Slow;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DEFAULT_CHANNEL_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test to create model-in-image domain with a ConfigMap that contains multiple WDT models\")\n+@IntegrationTest\n+class ItMiiMultiModel implements LoggedTest {\n+\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  \n+  private static String domainUid = \"mii-multimodel-cm-domain\";\n+\n+  private static String adminServerPodName = String.format(\"%s-%s\", domainUid, ADMIN_SERVER_NAME_BASE);\n+  private static String managedServerPrefix = String.format(\"%s-%s\", domainUid, MANAGED_SERVER_NAME_BASE);\n+  private static int replicaCount = 2;\n+\n+  /**\n+   * Perform initialization for all the tests in this class.\n+   * Set up the necessary namespaces and install the operator in the first namespace.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install the operator\n+    logger.info(\"Install an operator in namespace {0}, managing namespace {1}\",\n+        opNamespace, domainNamespace);\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+  }\n+\n+  /**\n+   * Test that two WDT model files in a domain resource's ConfigMap are applied in the expected order.\n+   * Create a WebLogic domain with a Kubernetes ConfigMap that contains two WDT model files.\n+   * Verify that the effective configuration of the domain is as expected.\n+   */\n+  @Test\n+  @DisplayName(\"Create model-in-image domain with a ConfigMap that contains multiple model files\")\n+  @Slow\n+  @MustNotRunInParallel", "originalCommit": "286f9ac5d081f44160ef26b3bd74f330ea533b7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYzNTA0OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1674#discussion_r430635048", "bodyText": "removed.", "author": "doxiao", "createdAt": "2020-05-26T18:53:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU2ODA0MQ=="}], "type": "inlineReview"}, {"oid": "a730d92d23d54886bbb81c9a364e424b07965ea7", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a730d92d23d54886bbb81c9a364e424b07965ea7", "message": "Address review comments", "committedDate": "2020-05-26T18:51:58Z", "type": "commit"}, {"oid": "f1e403d66eb73e4110b64f27209bfac25c2bfdde", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f1e403d66eb73e4110b64f27209bfac25c2bfdde", "message": "Add doc link to the comments", "committedDate": "2020-05-27T13:24:45Z", "type": "commit"}]}