{"pr_number": 1668, "pr_title": "Adding parameterized test for mii end-to-end use case in JUnit 5", "pr_createdAt": "2020-05-20T19:18:09Z", "pr_url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1668", "timeline": [{"oid": "d14180853ed7d51c55071c4b3710e92a09ee2989", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d14180853ed7d51c55071c4b3710e92a09ee2989", "message": "adding dependency for param tests", "committedDate": "2020-05-19T03:27:58Z", "type": "commit"}, {"oid": "061270b0eb5eaa49493cdb7577a8559561814f14", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/061270b0eb5eaa49493cdb7577a8559561814f14", "message": "adding parameterized test", "committedDate": "2020-05-20T05:41:48Z", "type": "commit"}, {"oid": "a5a6b73333cbb0ba20b82dcc6f234222fdb8c161", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a5a6b73333cbb0ba20b82dcc6f234222fdb8c161", "message": "use utils class and remove duplicated code", "committedDate": "2020-05-20T23:35:30Z", "type": "commit"}, {"oid": "be6c373ed4f0d3dbef32d69c0b722fd174d800c3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/be6c373ed4f0d3dbef32d69c0b722fd174d800c3", "message": "adding operator upgrade util method", "committedDate": "2020-05-21T01:38:07Z", "type": "commit"}, {"oid": "929d3fa95d472190c8c8bcc1bb3b2090689712b0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/929d3fa95d472190c8c8bcc1bb3b2090689712b0", "message": "assert for operator upgrade", "committedDate": "2020-05-21T02:51:01Z", "type": "commit"}, {"oid": "a6829cdcd380fdfc922fa2d0c651286381e49090", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a6829cdcd380fdfc922fa2d0c651286381e49090", "message": "changing parameter value", "committedDate": "2020-05-21T03:02:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ0MTU0OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1668#discussion_r428441548", "bodyText": "You don't really need this check, the podReady actually validates the existence of the pod and ready status", "author": "sankarpn", "createdAt": "2020-05-21T04:42:57Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -259,60 +171,60 @@ public void testCreateMiiDomain() {\n     final int replicaCount = 2;\n \n     // Create the repo secret to pull the image\n-    assertDoesNotThrow(() -> createRepoSecret(domainNamespace),\n-            String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+        String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n \n     // create secret for admin credentials\n     logger.info(\"Create secret for admin credentials\");\n     String adminSecretName = \"weblogic-credentials\";\n-    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n-            \"welcome1\", domainNamespace),\n-            String.format(\"createSecret failed for %s\", adminSecretName));\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+                                    adminSecretName,\n+                                    domainNamespace,\n+                                    \"weblogic\",\n+                                    \"welcome1\"),\n+        String.format(\"createSecret failed for %s\", adminSecretName));\n \n     // create encryption secret\n     logger.info(\"Create encryption secret\");\n     String encryptionSecretName = \"encryptionsecret\";\n-    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n-            \"weblogicenc\", domainNamespace),\n-             String.format(\"createSecret failed for %s\", encryptionSecretName));\n-\n-    // create the domain CR\n-    createDomainResource(domainUid, domainNamespace, adminSecretName, REPO_SECRET_NAME,\n-              encryptionSecretName, replicaCount);\n-\n-    // wait for the domain to exist\n-    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n-    withStandardRetryPolicy\n-        .conditionEvaluationListener(\n-            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n-                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n-                domainUid,\n-                domainNamespace,\n-                condition.getElapsedTimeInMS(),\n-                condition.getRemainingTimeInMS()))\n-        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n-\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+                                      encryptionSecretName,\n+                                      domainNamespace,\n+                            \"weblogicenc\",\n+                            \"weblogicenc\"),\n+                    String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    // create the domain object\n+    Domain domain = createDomainResource(domainUid,\n+                                      domainNamespace,\n+                                      adminSecretName,\n+                                      REPO_SECRET_NAME,\n+                                      encryptionSecretName,\n+                                      replicaCount,\n+                              MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG);\n+\n+    // create model in image domain\n+    logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+        domainUid, domainNamespace, MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG);\n+    createDomainAndVerify(domain, domainNamespace);\n \n     // check admin server pod exists\n     logger.info(\"Check for admin server pod {0} existence in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkPodCreated(adminServerPodName, domainUid, domainNamespace);\n+    checkPodExists(adminServerPodName, domainUid, domainNamespace);\n \n     // check managed server pods exist\n     for (int i = 1; i <= replicaCount; i++) {\n       logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n           managedServerPrefix + i, domainNamespace);\n-      checkPodCreated(managedServerPrefix + i, domainUid, domainNamespace);\n+      checkPodExists(managedServerPrefix + i, domainUid, domainNamespace);", "originalCommit": "a91bfa10114bb648a3883aecaa15f7749353cea9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgwODE1NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1668#discussion_r428808154", "bodyText": "done", "author": "vanajamukkara", "createdAt": "2020-05-21T17:40:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ0MTU0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ0NDAzNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1668#discussion_r428444034", "bodyText": "add javadoc", "author": "sankarpn", "createdAt": "2020-05-21T04:54:22Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -748,6 +573,117 @@ public void tearDownAll() {\n     }\n   }\n \n+  @ParameterizedTest\n+  @DisplayName(\"Create model in image domain using different WebLogic version images as parameters\")\n+  @MethodSource(\"oracle.weblogic.kubernetes.utils.Params#webLogicImageTags\")\n+  public void testParamsCreateMiiDomain(String imageTag, @Namespaces(1) List<String> namespaces) {", "originalCommit": "a91bfa10114bb648a3883aecaa15f7749353cea9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgwODI0Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1668#discussion_r428808247", "bodyText": "done", "author": "vanajamukkara", "createdAt": "2020-05-21T17:40:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ0NDAzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ0NDE5Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1668#discussion_r428444197", "bodyText": "we don't need the podExists assertions", "author": "sankarpn", "createdAt": "2020-05-21T04:55:03Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -748,6 +573,117 @@ public void tearDownAll() {\n     }\n   }\n \n+  @ParameterizedTest\n+  @DisplayName(\"Create model in image domain using different WebLogic version images as parameters\")\n+  @MethodSource(\"oracle.weblogic.kubernetes.utils.Params#webLogicImageTags\")\n+  public void testParamsCreateMiiDomain(String imageTag, @Namespaces(1) List<String> namespaces) {\n+    imageTag = imageTag.trim();\n+    assertTrue(!imageTag.isEmpty(), \"imageTag can not be empty string\");\n+    logger.info(\"Using imageTag {0}\", imageTag);\n+\n+    logger.info(\"Getting unique namespace for Domain\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(0);\n+\n+    // upgrade Operator for the new domain namespace\n+    assertTrue(upgradeAndVerifyOperator(opNamespace, domainNamespace),\n+        String.format(\"Failed to upgrade operator in namespace %s\", opNamespace));\n+\n+    // admin/managed server name here should match with model yaml in MII_BASIC_WDT_MODEL_FILE\n+    final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+    final String managedServerPrefix = domainUid + \"-managed-server\";\n+    final int replicaCount = 2;\n+\n+    // create image with model files\n+    logger.info(\"Creating image with model file and verify\");\n+    miiImage = createMiiImageAndVerify(\n+          \"mii-image\",\n+                          MII_BASIC_WDT_MODEL_FILE,\n+                          MII_BASIC_APP_NAME,\n+                          WLS_BASE_IMAGE_NAME,\n+                          imageTag,\n+                          WLS);\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+        String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\",\n+        \"welcome1\"),\n+        String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\",\n+        \"weblogicenc\"),\n+        String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    // create the domain object\n+    Domain domain = createDomainResource(domainUid, domainNamespace, adminSecretName, REPO_SECRET_NAME,\n+        encryptionSecretName, replicaCount, miiImage);\n+\n+    // create model in image domain\n+    logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+        domainUid, domainNamespace, miiImage);\n+    createDomainAndVerify(domain, domainNamespace);\n+\n+    // check admin server pod exists\n+    logger.info(\"Check for admin server pod {0} existence in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodExists(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check managed server pods exist\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodExists(managedServerPrefix + i, domainUid, domainNamespace);\n+    }", "originalCommit": "a91bfa10114bb648a3883aecaa15f7749353cea9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgwODMxNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1668#discussion_r428808317", "bodyText": "done", "author": "vanajamukkara", "createdAt": "2020-05-21T17:40:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ0NDE5Nw=="}], "type": "inlineReview"}, {"oid": "dd8b518839c2d88b5cf4a48da33ad80e9d99f995", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/dd8b518839c2d88b5cf4a48da33ad80e9d99f995", "message": "adding methodsource and taking values from env var", "committedDate": "2020-05-21T05:04:24Z", "type": "commit"}, {"oid": "98387458bcfb7db7f2d298e111f1021c063047bb", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/98387458bcfb7db7f2d298e111f1021c063047bb", "message": "typo", "committedDate": "2020-05-21T05:06:57Z", "type": "commit"}, {"oid": "a91bfa10114bb648a3883aecaa15f7749353cea9", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a91bfa10114bb648a3883aecaa15f7749353cea9", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into junit5-param-test", "committedDate": "2020-05-21T05:33:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY4Nzc3Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1668#discussion_r428687776", "bodyText": "Not 14.1.1.0? I think we should add that version.", "author": "rjeberhard", "createdAt": "2020-05-21T14:29:57Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/TestConstants.java", "diffHunk": "@@ -18,6 +18,7 @@\n   public static final String ADMIN_SERVER_NAME_BASE = \"admin-server\";\n   public static final String MANAGED_SERVER_NAME_BASE = \"managed-server\";\n   public static final String WLS_DOMAIN_TYPE = \"WLS\";\n+  public static final String DEFAULT_WLS_IMAGE_TAGS = \"12.2.1.3, 12.2.1.4\";", "originalCommit": "a91bfa10114bb648a3883aecaa15f7749353cea9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgwODQ2Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1668#discussion_r428808467", "bodyText": "modified", "author": "vanajamukkara", "createdAt": "2020-05-21T17:40:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY4Nzc3Ng=="}], "type": "inlineReview"}, {"oid": "800f771408d2426e4e52bdd22cff17a2222da8ca", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/800f771408d2426e4e52bdd22cff17a2222da8ca", "message": "addressing review comments", "committedDate": "2020-05-21T23:26:25Z", "type": "commit"}, {"oid": "0ad0dc1c5ea7e57bb15016f6c4a5d7f95d3b4999", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0ad0dc1c5ea7e57bb15016f6c4a5d7f95d3b4999", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into junit5-param-test", "committedDate": "2020-05-22T01:17:49Z", "type": "commit"}, {"oid": "d5f7b91f610416585961bb0b81b8bb0eb525b723", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d5f7b91f610416585961bb0b81b8bb0eb525b723", "message": "moving parameterized test before @after methods", "committedDate": "2020-05-22T02:39:28Z", "type": "commit"}, {"oid": "0986bb7a3e09cb208b99935d2562d24a2833591b", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0986bb7a3e09cb208b99935d2562d24a2833591b", "message": "fixing order", "committedDate": "2020-05-22T02:43:13Z", "type": "commit"}, {"oid": "0f3849b7c6b1c0fda72448ff1689df69f4291fa2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0f3849b7c6b1c0fda72448ff1689df69f4291fa2", "message": "Merge branch 'develop' into junit5-param-test", "committedDate": "2020-05-21T18:50:12Z", "type": "commit"}]}