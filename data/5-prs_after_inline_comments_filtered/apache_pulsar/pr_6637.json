{"pr_number": 6637, "pr_title": "[pulsar-broker] Implement AutoSubscriptionCreation by namespace override", "pr_createdAt": "2020-03-30T11:46:43Z", "pr_url": "https://github.com/apache/pulsar/pull/6637", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAyMjk4MA==", "url": "https://github.com/apache/pulsar/pull/6637#discussion_r404022980", "bodyText": "It's better to call setData() asynchronously.", "author": "codelipenghui", "createdAt": "2020-04-06T11:36:43Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java", "diffHunk": "@@ -653,6 +654,101 @@ protected void internalRemoveAutoTopicCreation(AsyncResponse asyncResponse) {\n         });\n     }\n \n+    protected void internalSetAutoSubscriptionCreation(AsyncResponse asyncResponse, AutoSubscriptionCreationOverride autoSubscriptionCreationOverride) {\n+        validateAdminAccessForTenant(namespaceName.getTenant());\n+        validatePoliciesReadOnlyAccess();\n+\n+        // Force to read the data s.t. the watch to the cache content is setup.\n+        policiesCache().getWithStatAsync(path(POLICIES, namespaceName.toString())).thenApply(\n+                policies -> {\n+                    if (policies.isPresent()) {\n+                        Entry<Policies, Stat> policiesNode = policies.get();\n+                        policiesNode.getKey().autoSubscriptionCreationOverride = autoSubscriptionCreationOverride;\n+                        try {\n+                            // Write back the new policies into zookeeper\n+                            globalZk().setData(path(POLICIES, namespaceName.toString()),\n+                                    jsonMapper().writeValueAsBytes(policiesNode.getKey()), policiesNode.getValue().getVersion());", "originalCommit": "4df8bad700f34961395c740142464b639a1f886a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUxMDQ4MQ==", "url": "https://github.com/apache/pulsar/pull/6637#discussion_r404510481", "bodyText": "Done.", "author": "murong00", "createdAt": "2020-04-07T03:12:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAyMjk4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAyMzI3Nw==", "url": "https://github.com/apache/pulsar/pull/6637#discussion_r404023277", "bodyText": "Same as the above comment.", "author": "codelipenghui", "createdAt": "2020-04-06T11:37:23Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java", "diffHunk": "@@ -653,6 +654,101 @@ protected void internalRemoveAutoTopicCreation(AsyncResponse asyncResponse) {\n         });\n     }\n \n+    protected void internalSetAutoSubscriptionCreation(AsyncResponse asyncResponse, AutoSubscriptionCreationOverride autoSubscriptionCreationOverride) {\n+        validateAdminAccessForTenant(namespaceName.getTenant());\n+        validatePoliciesReadOnlyAccess();\n+\n+        // Force to read the data s.t. the watch to the cache content is setup.\n+        policiesCache().getWithStatAsync(path(POLICIES, namespaceName.toString())).thenApply(\n+                policies -> {\n+                    if (policies.isPresent()) {\n+                        Entry<Policies, Stat> policiesNode = policies.get();\n+                        policiesNode.getKey().autoSubscriptionCreationOverride = autoSubscriptionCreationOverride;\n+                        try {\n+                            // Write back the new policies into zookeeper\n+                            globalZk().setData(path(POLICIES, namespaceName.toString()),\n+                                    jsonMapper().writeValueAsBytes(policiesNode.getKey()), policiesNode.getValue().getVersion());\n+                            policiesCache().invalidate(path(POLICIES, namespaceName.toString()));\n+                            asyncResponse.resume(Response.noContent().build());\n+                            String autoOverride = autoSubscriptionCreationOverride.allowAutoSubscriptionCreation ? \"enabled\" : \"disabled\";\n+                            log.info(\"[{}] Successfully {} autoSubscriptionCreation on namespace {}\", clientAppId(), autoOverride, namespaceName);\n+                            return null;\n+                        } catch (KeeperException.NoNodeException e) {\n+                            log.error(\"[{}] Failed to modify autoSubscriptionCreation status for namespace {}: does not exist\", clientAppId(),\n+                                    namespaceName);\n+                            asyncResponse.resume(new RestException(Status.NOT_FOUND, \"Namespace does not exist\"));\n+                            return null;\n+                        } catch (KeeperException.BadVersionException e) {\n+                            log.error(\n+                                    \"[{}] Failed to modify autoSubscriptionCreation status on namespace {} expected policy node version={} : concurrent modification\",\n+                                    clientAppId(), namespaceName, policiesNode.getValue().getVersion());\n+\n+                            asyncResponse.resume(new RestException(Status.CONFLICT, \"Concurrent modification\"));\n+                            return null;\n+                        } catch (Exception e) {\n+                            log.error(\"[{}] Failed to modify autoSubscriptionCreation status on namespace {}\", clientAppId(), namespaceName, e);\n+                            asyncResponse.resume(new RestException(e));\n+                            return null;\n+                        }\n+                    } else {\n+                        asyncResponse.resume(new RestException(Status.NOT_FOUND, \"Namespace \" + namespaceName + \" does not exist\"));\n+                        return null;\n+                    }\n+                }\n+        ).exceptionally(e -> {\n+            log.error(\"[{}] Failed to modify autoSubscriptionCreation status on namespace {}\", clientAppId(), namespaceName, e);\n+            asyncResponse.resume(new RestException(e));\n+            return null;\n+        });\n+    }\n+\n+    protected void internalRemoveAutoSubscriptionCreation(AsyncResponse asyncResponse) {\n+        validateAdminAccessForTenant(namespaceName.getTenant());\n+        validatePoliciesReadOnlyAccess();\n+\n+        // Force to read the data s.t. the watch to the cache content is setup.\n+        policiesCache().getWithStatAsync(path(POLICIES, namespaceName.toString())).thenApply(\n+                policies -> {\n+                    if (policies.isPresent()) {\n+                        Entry<Policies, Stat> policiesNode = policies.get();\n+                        policiesNode.getKey().autoSubscriptionCreationOverride = null;\n+                        try {\n+                            // Write back the new policies into zookeeper\n+                            globalZk().setData(path(POLICIES, namespaceName.toString()),\n+                                    jsonMapper().writeValueAsBytes(policiesNode.getKey()), policiesNode.getValue().getVersion());", "originalCommit": "4df8bad700f34961395c740142464b639a1f886a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUxMDUyNg==", "url": "https://github.com/apache/pulsar/pull/6637#discussion_r404510526", "bodyText": "Done.", "author": "murong00", "createdAt": "2020-04-07T03:12:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAyMzI3Nw=="}], "type": "inlineReview"}, {"oid": "be660fbf52bb61ed6776b31fd3a1287fe479384f", "url": "https://github.com/apache/pulsar/commit/be660fbf52bb61ed6776b31fd3a1287fe479384f", "message": "Call setData asynchronously", "committedDate": "2020-04-07T03:09:11Z", "type": "forcePushed"}, {"oid": "79a3a5df63278cd28421d2ff4cf65067d334ed8e", "url": "https://github.com/apache/pulsar/commit/79a3a5df63278cd28421d2ff4cf65067d334ed8e", "message": "Call setData asynchronously", "committedDate": "2020-04-07T09:25:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQzNDI5OA==", "url": "https://github.com/apache/pulsar/pull/6637#discussion_r405434298", "bodyText": "The response should complete in the zookeeper callback. Otherwise, the broker always returns success.", "author": "codelipenghui", "createdAt": "2020-04-08T10:50:39Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java", "diffHunk": "@@ -571,23 +572,80 @@ protected void internalSetAutoTopicCreation(AsyncResponse asyncResponse, AutoTop\n                         try {\n                             // Write back the new policies into zookeeper\n                             globalZk().setData(path(POLICIES, namespaceName.toString()),\n-                                    jsonMapper().writeValueAsBytes(policiesNode.getKey()), policiesNode.getValue().getVersion());\n-                            policiesCache().invalidate(path(POLICIES, namespaceName.toString()));\n+                                    jsonMapper().writeValueAsBytes(policiesNode.getKey()), policiesNode.getValue().getVersion(),\n+                                    (rc, path1, ctx, stat) -> {\n+                                        if (rc == KeeperException.Code.OK.intValue()) {\n+                                            policiesCache().invalidate(path(POLICIES, namespaceName.toString()));\n+                                        } else {\n+                                            String errorMsg = String.format(\n+                                                    \"[%s] Failed to modify autoTopicCreation status for namespace %s\",\n+                                                    clientAppId(), namespaceName);\n+                                            if (rc == KeeperException.Code.NONODE.intValue()) {\n+                                                log.warn(\"{} : does not exist\", errorMsg);\n+                                                asyncResponse.resume(new RestException(Status.NOT_FOUND, \"Namespace does not exist\"));\n+                                            } else if (rc == KeeperException.Code.BADVERSION.intValue()) {\n+                                                log.warn(\"{} : concurrent modification\", errorMsg);\n+                                                asyncResponse.resume(new RestException(Status.CONFLICT, \"Concurrent modification\"));\n+                                            } else {\n+                                                asyncResponse.resume(KeeperException.create(KeeperException.Code.get(rc), errorMsg));\n+                                            }\n+                                        }\n+                                    }, null);\n+                            String autoOverride = autoTopicCreationOverride.allowAutoTopicCreation ? \"enabled\" : \"disabled\";\n+                            log.info(\"[{}] Successfully {} autoTopicCreation on namespace {}\", clientAppId(), autoOverride, namespaceName);\n                             asyncResponse.resume(Response.noContent().build());\n-                            log.info(\"[{}] Successfully {} on namespace {}\", clientAppId(),\n-                                    autoTopicCreationOverride.allowAutoTopicCreation ? \"enabled\" : \"disabled\", namespaceName);\n                             return null;\n-                        } catch (KeeperException.NoNodeException e) {\n-                            log.error(\"[{}] Failed to modify autoTopicCreation status for namespace {}: does not exist\", clientAppId(),\n-                                    namespaceName);\n-                            asyncResponse.resume(new RestException(Status.NOT_FOUND, \"Namespace does not exist\"));\n+                        } catch (Exception e) {\n+                            log.error(\"[{}] Failed to modify autoTopicCreation status on namespace {}\", clientAppId(), namespaceName, e);\n+                            asyncResponse.resume(new RestException(e));\n                             return null;\n-                        } catch (KeeperException.BadVersionException e) {\n-                            log.error(\n-                                    \"[{}] Failed to modify autoTopicCreation status on namespace {} expected policy node version={} : concurrent modification\",\n-                                    clientAppId(), namespaceName, policiesNode.getValue().getVersion());\n+                        }\n+                    } else {\n+                        asyncResponse.resume(new RestException(Status.NOT_FOUND, \"Namespace \" + namespaceName + \" does not exist\"));\n+                        return null;\n+                    }\n+                }\n+        ).exceptionally(e -> {\n+            log.error(\"[{}] Failed to modify autoTopicCreation status on namespace {}\", clientAppId(), namespaceName, e);\n+            asyncResponse.resume(new RestException(e));\n+            return null;\n+        });\n+    }\n+\n+    protected void internalRemoveAutoTopicCreation(AsyncResponse asyncResponse) {\n+        validateAdminAccessForTenant(namespaceName.getTenant());\n+        validatePoliciesReadOnlyAccess();\n \n-                            asyncResponse.resume(new RestException(Status.CONFLICT, \"Concurrent modification\"));\n+        // Force to read the data s.t. the watch to the cache content is setup.\n+        policiesCache().getWithStatAsync(path(POLICIES, namespaceName.toString())).thenApply(\n+                policies -> {\n+                    if (policies.isPresent()) {\n+                        Entry<Policies, Stat> policiesNode = policies.get();\n+                        policiesNode.getKey().autoTopicCreationOverride = null;\n+                        try {\n+                            // Write back the new policies into zookeeper\n+                            globalZk().setData(path(POLICIES, namespaceName.toString()),\n+                                    jsonMapper().writeValueAsBytes(policiesNode.getKey()), policiesNode.getValue().getVersion(),\n+                                    (rc, path1, ctx, stat) -> {\n+                                        if (rc == KeeperException.Code.OK.intValue()) {\n+                                            policiesCache().invalidate(path(POLICIES, namespaceName.toString()));\n+                                        } else {\n+                                            String errorMsg = String.format(\n+                                                    \"[%s] Failed to modify autoTopicCreation status for namespace %s\",\n+                                                    clientAppId(), namespaceName);\n+                                            if (rc == KeeperException.Code.NONODE.intValue()) {\n+                                                log.warn(\"{} : does not exist\", errorMsg);\n+                                                asyncResponse.resume(new RestException(Status.NOT_FOUND, \"Namespace does not exist\"));\n+                                            } else if (rc == KeeperException.Code.BADVERSION.intValue()) {\n+                                                log.warn(\"{} : concurrent modification\", errorMsg);\n+                                                asyncResponse.resume(new RestException(Status.CONFLICT, \"Concurrent modification\"));\n+                                            } else {\n+                                                asyncResponse.resume(KeeperException.create(KeeperException.Code.get(rc), errorMsg));\n+                                            }\n+                                        }\n+                                    }, null);\n+                            log.info(\"[{}] Successfully removed autoTopicCreation override on namespace {}\", clientAppId(), namespaceName);\n+                            asyncResponse.resume(Response.noContent().build());", "originalCommit": "79a3a5df63278cd28421d2ff4cf65067d334ed8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxMjY0Mg==", "url": "https://github.com/apache/pulsar/pull/6637#discussion_r405912642", "bodyText": "@codelipenghui Thanks for pointing out this, have fixed.", "author": "murong00", "createdAt": "2020-04-09T01:55:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQzNDI5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQzNTM5Ng==", "url": "https://github.com/apache/pulsar/pull/6637#discussion_r405435396", "bodyText": "Looks should complete the asyncResponse here.", "author": "codelipenghui", "createdAt": "2020-04-08T10:52:49Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java", "diffHunk": "@@ -571,23 +572,80 @@ protected void internalSetAutoTopicCreation(AsyncResponse asyncResponse, AutoTop\n                         try {\n                             // Write back the new policies into zookeeper\n                             globalZk().setData(path(POLICIES, namespaceName.toString()),\n-                                    jsonMapper().writeValueAsBytes(policiesNode.getKey()), policiesNode.getValue().getVersion());\n-                            policiesCache().invalidate(path(POLICIES, namespaceName.toString()));\n+                                    jsonMapper().writeValueAsBytes(policiesNode.getKey()), policiesNode.getValue().getVersion(),\n+                                    (rc, path1, ctx, stat) -> {\n+                                        if (rc == KeeperException.Code.OK.intValue()) {\n+                                            policiesCache().invalidate(path(POLICIES, namespaceName.toString()));", "originalCommit": "79a3a5df63278cd28421d2ff4cf65067d334ed8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxMjcxNQ==", "url": "https://github.com/apache/pulsar/pull/6637#discussion_r405912715", "bodyText": "Done.", "author": "murong00", "createdAt": "2020-04-09T01:56:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQzNTM5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQzNTk2MQ==", "url": "https://github.com/apache/pulsar/pull/6637#discussion_r405435961", "bodyText": "Should move to the zookeeper callback.", "author": "codelipenghui", "createdAt": "2020-04-08T10:53:54Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java", "diffHunk": "@@ -571,23 +572,80 @@ protected void internalSetAutoTopicCreation(AsyncResponse asyncResponse, AutoTop\n                         try {\n                             // Write back the new policies into zookeeper\n                             globalZk().setData(path(POLICIES, namespaceName.toString()),\n-                                    jsonMapper().writeValueAsBytes(policiesNode.getKey()), policiesNode.getValue().getVersion());\n-                            policiesCache().invalidate(path(POLICIES, namespaceName.toString()));\n+                                    jsonMapper().writeValueAsBytes(policiesNode.getKey()), policiesNode.getValue().getVersion(),\n+                                    (rc, path1, ctx, stat) -> {\n+                                        if (rc == KeeperException.Code.OK.intValue()) {\n+                                            policiesCache().invalidate(path(POLICIES, namespaceName.toString()));\n+                                        } else {\n+                                            String errorMsg = String.format(\n+                                                    \"[%s] Failed to modify autoTopicCreation status for namespace %s\",\n+                                                    clientAppId(), namespaceName);\n+                                            if (rc == KeeperException.Code.NONODE.intValue()) {\n+                                                log.warn(\"{} : does not exist\", errorMsg);\n+                                                asyncResponse.resume(new RestException(Status.NOT_FOUND, \"Namespace does not exist\"));\n+                                            } else if (rc == KeeperException.Code.BADVERSION.intValue()) {\n+                                                log.warn(\"{} : concurrent modification\", errorMsg);\n+                                                asyncResponse.resume(new RestException(Status.CONFLICT, \"Concurrent modification\"));\n+                                            } else {\n+                                                asyncResponse.resume(KeeperException.create(KeeperException.Code.get(rc), errorMsg));\n+                                            }\n+                                        }\n+                                    }, null);\n+                            String autoOverride = autoTopicCreationOverride.allowAutoTopicCreation ? \"enabled\" : \"disabled\";\n+                            log.info(\"[{}] Successfully {} autoTopicCreation on namespace {}\", clientAppId(), autoOverride, namespaceName);", "originalCommit": "79a3a5df63278cd28421d2ff4cf65067d334ed8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxMjczNw==", "url": "https://github.com/apache/pulsar/pull/6637#discussion_r405912737", "bodyText": "Done.", "author": "murong00", "createdAt": "2020-04-09T01:56:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQzNTk2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQzNjY4Nw==", "url": "https://github.com/apache/pulsar/pull/6637#discussion_r405436687", "bodyText": "Should move to the zookeeper callback.", "author": "codelipenghui", "createdAt": "2020-04-08T10:55:17Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java", "diffHunk": "@@ -615,29 +673,87 @@ protected void internalRemoveAutoTopicCreation(AsyncResponse asyncResponse) {\n                 policies -> {\n                     if (policies.isPresent()) {\n                         Entry<Policies, Stat> policiesNode = policies.get();\n-                        policiesNode.getKey().autoTopicCreationOverride = null;\n+                        policiesNode.getKey().autoSubscriptionCreationOverride = autoSubscriptionCreationOverride;\n                         try {\n                             // Write back the new policies into zookeeper\n                             globalZk().setData(path(POLICIES, namespaceName.toString()),\n-                                    jsonMapper().writeValueAsBytes(policiesNode.getKey()), policiesNode.getValue().getVersion());\n-                            policiesCache().invalidate(path(POLICIES, namespaceName.toString()));\n+                                    jsonMapper().writeValueAsBytes(policiesNode.getKey()), policiesNode.getValue().getVersion(),\n+                                    (rc, path1, ctx, stat) -> {\n+                                        if (rc == KeeperException.Code.OK.intValue()) {\n+                                            policiesCache().invalidate(path(POLICIES, namespaceName.toString()));\n+                                        } else {\n+                                            String errorMsg = String.format(\n+                                                    \"[%s] Failed to modify autoSubscriptionCreation status for namespace %s\",\n+                                                    clientAppId(), namespaceName);\n+                                            if (rc == KeeperException.Code.NONODE.intValue()) {\n+                                                log.warn(\"{} : does not exist\", errorMsg);\n+                                                asyncResponse.resume(new RestException(Status.NOT_FOUND, \"Namespace does not exist\"));\n+                                            } else if (rc == KeeperException.Code.BADVERSION.intValue()) {\n+                                                log.warn(\"{} : concurrent modification\", errorMsg);\n+                                                asyncResponse.resume(new RestException(Status.CONFLICT, \"Concurrent modification\"));\n+                                            } else {\n+                                                asyncResponse.resume(KeeperException.create(KeeperException.Code.get(rc), errorMsg));\n+                                            }\n+                                        }\n+                                    }, null);\n+                            String autoOverride = autoSubscriptionCreationOverride.allowAutoSubscriptionCreation ? \"enabled\" : \"disabled\";\n+                            log.info(\"[{}] Successfully {} autoSubscriptionCreation on namespace {}\", clientAppId(), autoOverride, namespaceName);\n                             asyncResponse.resume(Response.noContent().build());", "originalCommit": "79a3a5df63278cd28421d2ff4cf65067d334ed8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxMjc3NA==", "url": "https://github.com/apache/pulsar/pull/6637#discussion_r405912774", "bodyText": "Done.", "author": "murong00", "createdAt": "2020-04-09T01:56:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQzNjY4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQzNjg2OQ==", "url": "https://github.com/apache/pulsar/pull/6637#discussion_r405436869", "bodyText": "Should move to the zookeeper callback.", "author": "codelipenghui", "createdAt": "2020-04-08T10:55:44Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java", "diffHunk": "@@ -615,29 +673,87 @@ protected void internalRemoveAutoTopicCreation(AsyncResponse asyncResponse) {\n                 policies -> {\n                     if (policies.isPresent()) {\n                         Entry<Policies, Stat> policiesNode = policies.get();\n-                        policiesNode.getKey().autoTopicCreationOverride = null;\n+                        policiesNode.getKey().autoSubscriptionCreationOverride = autoSubscriptionCreationOverride;\n                         try {\n                             // Write back the new policies into zookeeper\n                             globalZk().setData(path(POLICIES, namespaceName.toString()),\n-                                    jsonMapper().writeValueAsBytes(policiesNode.getKey()), policiesNode.getValue().getVersion());\n-                            policiesCache().invalidate(path(POLICIES, namespaceName.toString()));\n+                                    jsonMapper().writeValueAsBytes(policiesNode.getKey()), policiesNode.getValue().getVersion(),\n+                                    (rc, path1, ctx, stat) -> {\n+                                        if (rc == KeeperException.Code.OK.intValue()) {\n+                                            policiesCache().invalidate(path(POLICIES, namespaceName.toString()));\n+                                        } else {\n+                                            String errorMsg = String.format(\n+                                                    \"[%s] Failed to modify autoSubscriptionCreation status for namespace %s\",\n+                                                    clientAppId(), namespaceName);\n+                                            if (rc == KeeperException.Code.NONODE.intValue()) {\n+                                                log.warn(\"{} : does not exist\", errorMsg);\n+                                                asyncResponse.resume(new RestException(Status.NOT_FOUND, \"Namespace does not exist\"));\n+                                            } else if (rc == KeeperException.Code.BADVERSION.intValue()) {\n+                                                log.warn(\"{} : concurrent modification\", errorMsg);\n+                                                asyncResponse.resume(new RestException(Status.CONFLICT, \"Concurrent modification\"));\n+                                            } else {\n+                                                asyncResponse.resume(KeeperException.create(KeeperException.Code.get(rc), errorMsg));\n+                                            }\n+                                        }\n+                                    }, null);\n+                            String autoOverride = autoSubscriptionCreationOverride.allowAutoSubscriptionCreation ? \"enabled\" : \"disabled\";\n+                            log.info(\"[{}] Successfully {} autoSubscriptionCreation on namespace {}\", clientAppId(), autoOverride, namespaceName);\n                             asyncResponse.resume(Response.noContent().build());\n-                            log.info(\"[{}] Successfully removed override on namespace {}\", clientAppId(), namespaceName);\n                             return null;\n-                        } catch (KeeperException.NoNodeException e) {\n-                            log.error(\"[{}] Failed to modify autoTopicCreation status for namespace {}: does not exist\", clientAppId(),\n-                                    namespaceName);\n-                            asyncResponse.resume(new RestException(Status.NOT_FOUND, \"Namespace does not exist\"));\n+                        } catch (Exception e) {\n+                            log.error(\"[{}] Failed to modify autoSubscriptionCreation status on namespace {}\", clientAppId(), namespaceName, e);\n+                            asyncResponse.resume(new RestException(e));\n                             return null;\n-                        } catch (KeeperException.BadVersionException e) {\n-                            log.error(\n-                                    \"[{}] Failed to modify autoTopicCreation status on namespace {} expected policy node version={} : concurrent modification\",\n-                                    clientAppId(), namespaceName, policiesNode.getValue().getVersion());\n+                        }\n+                    } else {\n+                        asyncResponse.resume(new RestException(Status.NOT_FOUND, \"Namespace \" + namespaceName + \" does not exist\"));\n+                        return null;\n+                    }\n+                }\n+        ).exceptionally(e -> {\n+            log.error(\"[{}] Failed to modify autoSubscriptionCreation status on namespace {}\", clientAppId(), namespaceName, e);\n+            asyncResponse.resume(new RestException(e));\n+            return null;\n+        });\n+    }\n+\n+    protected void internalRemoveAutoSubscriptionCreation(AsyncResponse asyncResponse) {\n+        validateAdminAccessForTenant(namespaceName.getTenant());\n+        validatePoliciesReadOnlyAccess();\n \n-                            asyncResponse.resume(new RestException(Status.CONFLICT, \"Concurrent modification\"));\n+        // Force to read the data s.t. the watch to the cache content is setup.\n+        policiesCache().getWithStatAsync(path(POLICIES, namespaceName.toString())).thenApply(\n+                policies -> {\n+                    if (policies.isPresent()) {\n+                        Entry<Policies, Stat> policiesNode = policies.get();\n+                        policiesNode.getKey().autoSubscriptionCreationOverride = null;\n+                        try {\n+                            // Write back the new policies into zookeeper\n+                            globalZk().setData(path(POLICIES, namespaceName.toString()),\n+                                    jsonMapper().writeValueAsBytes(policiesNode.getKey()), policiesNode.getValue().getVersion(),\n+                                    (rc, path1, ctx, stat) -> {\n+                                        if (rc == KeeperException.Code.OK.intValue()) {\n+                                            policiesCache().invalidate(path(POLICIES, namespaceName.toString()));\n+                                        } else {\n+                                            String errorMsg = String.format(\n+                                                    \"[%s] Failed to modify autoSubscriptionCreation status for namespace %s\",\n+                                                    clientAppId(), namespaceName);\n+                                            if (rc == KeeperException.Code.NONODE.intValue()) {\n+                                                log.warn(\"{} : does not exist\", errorMsg);\n+                                                asyncResponse.resume(new RestException(Status.NOT_FOUND, \"Namespace does not exist\"));\n+                                            } else if (rc == KeeperException.Code.BADVERSION.intValue()) {\n+                                                log.warn(\"{} : concurrent modification\", errorMsg);\n+                                                asyncResponse.resume(new RestException(Status.CONFLICT, \"Concurrent modification\"));\n+                                            } else {\n+                                                asyncResponse.resume(KeeperException.create(KeeperException.Code.get(rc), errorMsg));\n+                                            }\n+                                        }\n+                                    }, null);\n+                            log.info(\"[{}] Successfully removed autoSubscriptionCreation override on namespace {}\", clientAppId(), namespaceName);\n+                            asyncResponse.resume(Response.noContent().build());", "originalCommit": "79a3a5df63278cd28421d2ff4cf65067d334ed8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxMjkzMQ==", "url": "https://github.com/apache/pulsar/pull/6637#discussion_r405912931", "bodyText": "Done.", "author": "murong00", "createdAt": "2020-04-09T01:56:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQzNjg2OQ=="}], "type": "inlineReview"}, {"oid": "c096fb0edd8ab7860057265cf7f7c3c6af090b63", "url": "https://github.com/apache/pulsar/commit/c096fb0edd8ab7860057265cf7f7c3c6af090b63", "message": "Implement AutoSubscriptionCreation by namespace override.\n\nFix checkstyle.", "committedDate": "2020-04-13T11:20:46Z", "type": "commit"}, {"oid": "c0bfa24cbe28d7a42427c2a5bbfdbc0fb840c4ca", "url": "https://github.com/apache/pulsar/commit/c0bfa24cbe28d7a42427c2a5bbfdbc0fb840c4ca", "message": "Call setData asynchronously", "committedDate": "2020-04-13T11:20:46Z", "type": "commit"}, {"oid": "9c6e7db2cfd846e8c27f25c91645c9558348777b", "url": "https://github.com/apache/pulsar/commit/9c6e7db2cfd846e8c27f25c91645c9558348777b", "message": "Complete the asyncResponse correctly.", "committedDate": "2020-04-13T11:20:46Z", "type": "commit"}, {"oid": "9c6e7db2cfd846e8c27f25c91645c9558348777b", "url": "https://github.com/apache/pulsar/commit/9c6e7db2cfd846e8c27f25c91645c9558348777b", "message": "Complete the asyncResponse correctly.", "committedDate": "2020-04-13T11:20:46Z", "type": "forcePushed"}]}