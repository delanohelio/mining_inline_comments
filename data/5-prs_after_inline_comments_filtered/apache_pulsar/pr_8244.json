{"pr_number": 8244, "pr_title": "Delete associated ledgers before deleting cluster metadata", "pr_createdAt": "2020-10-13T04:55:29Z", "pr_url": "https://github.com/apache/pulsar/pull/8244", "timeline": [{"oid": "da4749e3e743023a5deb0ea24e0633bf08afb894", "url": "https://github.com/apache/pulsar/commit/da4749e3e743023a5deb0ea24e0633bf08afb894", "message": "Support retrieve ledgers from ZK metadata and delete them", "committedDate": "2020-10-13T03:52:57Z", "type": "commit"}, {"oid": "519d053ec6424679b3da375aeaf1dce6bb46642b", "url": "https://github.com/apache/pulsar/commit/519d053ec6424679b3da375aeaf1dce6bb46642b", "message": "Refine code", "committedDate": "2020-10-13T04:30:50Z", "type": "commit"}, {"oid": "fd0513829070cfe1fb707f24a3dc3a4a6219f8a7", "url": "https://github.com/apache/pulsar/commit/fd0513829070cfe1fb707f24a3dc3a4a6219f8a7", "message": "Make bookkeeper-metadata-service-url optional for backward compatibility", "committedDate": "2020-10-13T04:51:02Z", "type": "commit"}, {"oid": "37e7ff573055e3264c0879cc0bbddb9990f68584", "url": "https://github.com/apache/pulsar/commit/37e7ff573055e3264c0879cc0bbddb9990f68584", "message": "Use iterator instead of List to delete ledgers", "committedDate": "2020-10-14T02:46:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU2OTc0Nw==", "url": "https://github.com/apache/pulsar/pull/8244#discussion_r506569747", "bodyText": "we wrap log.debug in if (log.isDebugEnabled())", "author": "sijie", "createdAt": "2020-10-16T15:57:52Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/PulsarClusterMetadataTeardown.java", "diffHunk": "@@ -107,5 +128,86 @@ public static void deleteZkNodeRecursively(ZooKeeper zooKeeper, String path) thr\n         }\n     }\n \n+    private static List<String> getChildren(ZooKeeper zooKeeper, String path) {\n+        try {\n+            return zooKeeper.getChildren(path, null);\n+        } catch (InterruptedException | KeeperException e) {\n+            log.error(\"Failed to get children of {}: {}\", path, e);\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static byte[] getData(ZooKeeper zooKeeper, String path) {\n+        try {\n+            return zooKeeper.getData(path, null, null);\n+        } catch (KeeperException | InterruptedException e) {\n+            log.error(\"Failed to get data from {}: {}\", path, e);\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static void deleteLedger(BookKeeper bookKeeper, long ledgerId) {\n+        try {\n+            bookKeeper.deleteLedger(ledgerId);\n+            log.debug(\"Delete ledger id: {}\", ledgerId);", "originalCommit": "37e7ff573055e3264c0879cc0bbddb9990f68584", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc4OTQ1Mg==", "url": "https://github.com/apache/pulsar/pull/8244#discussion_r506789452", "bodyText": "Ok", "author": "BewareMyPower", "createdAt": "2020-10-17T03:47:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU2OTc0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU3MTQ4Ng==", "url": "https://github.com/apache/pulsar/pull/8244#discussion_r506571486", "bodyText": "I don't think you should return -1L here. This will trigger deleteLedger(bookkeeper, -1L) in line 183. This is not a good implementation. You should return null and skip deletion if it is null.", "author": "sijie", "createdAt": "2020-10-16T16:00:46Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/PulsarClusterMetadataTeardown.java", "diffHunk": "@@ -107,5 +128,86 @@ public static void deleteZkNodeRecursively(ZooKeeper zooKeeper, String path) thr\n         }\n     }\n \n+    private static List<String> getChildren(ZooKeeper zooKeeper, String path) {\n+        try {\n+            return zooKeeper.getChildren(path, null);\n+        } catch (InterruptedException | KeeperException e) {\n+            log.error(\"Failed to get children of {}: {}\", path, e);\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static byte[] getData(ZooKeeper zooKeeper, String path) {\n+        try {\n+            return zooKeeper.getData(path, null, null);\n+        } catch (KeeperException | InterruptedException e) {\n+            log.error(\"Failed to get data from {}: {}\", path, e);\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static void deleteLedger(BookKeeper bookKeeper, long ledgerId) {\n+        try {\n+            bookKeeper.deleteLedger(ledgerId);\n+            log.debug(\"Delete ledger id: {}\", ledgerId);\n+        } catch (InterruptedException e) {\n+            throw new RuntimeException(e);\n+        } catch (BKException e) {\n+            log.warn(\"Failed to delete ledger {}: {}\", ledgerId, e);\n+        }\n+    }\n+\n+    private static void deleteManagedLedgers(ZooKeeper zooKeeper, BookKeeper bookKeeper) {\n+        final String managedLedgersRoot = \"/managed-ledgers\";\n+        getChildren(zooKeeper, managedLedgersRoot).forEach(tenant -> {\n+            final String tenantRoot = managedLedgersRoot + \"/\" + tenant;\n+            getChildren(zooKeeper, tenantRoot).forEach(namespace -> {\n+                final String namespaceRoot = String.join(\"/\", tenantRoot, namespace, \"persistent\");\n+                getChildren(zooKeeper, namespaceRoot).forEach(topic -> {\n+                    final String topicRoot = namespaceRoot + \"/\" + topic;\n+                    byte[] topicData = getData(zooKeeper, topicRoot);\n+                    try {\n+                        ManagedLedgerInfo.parseFrom(topicData).getLedgerInfoList().stream()\n+                                .map(ManagedLedgerInfo.LedgerInfo::getLedgerId)\n+                                .forEach(ledgerId -> deleteLedger(bookKeeper, ledgerId));\n+\n+                        getChildren(zooKeeper, topicRoot).stream().map(subscription -> {\n+                            final String subscriptionRoot = topicRoot + \"/\" + subscription;\n+                            try {\n+                                return ManagedCursorInfo.parseFrom(getData(zooKeeper, subscriptionRoot)).getCursorsLedgerId();\n+                            } catch (InvalidProtocolBufferException e) {\n+                                log.warn(\"Invalid data format from {}: {}\", subscriptionRoot, e);\n+                                return -1L;", "originalCommit": "37e7ff573055e3264c0879cc0bbddb9990f68584", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc4OTk0MA==", "url": "https://github.com/apache/pulsar/pull/8244#discussion_r506789940", "bodyText": "From the comment after this try-catch block, I noted that some valid cursor ledger id could also be -1, so I return -1L here to simplify the filter logic from filter(ledgerId -> (ledgerId != null && ledgerId >= 0)) to filter(ledgerId -> ledgerId >= 0). But somehow I deleted the filter sentence, maybe it's during one refactor. it's my fault, I'll add filter here and still returns -1L in catch block. Or should still return null?", "author": "BewareMyPower", "createdAt": "2020-10-17T03:54:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU3MTQ4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU3Mjk5NA==", "url": "https://github.com/apache/pulsar/pull/8244#discussion_r506572994", "bodyText": "I think the logic here can be replaced by using ManagedLedgerFactory#delete to delete the ledger, no?", "author": "sijie", "createdAt": "2020-10-16T16:03:27Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/PulsarClusterMetadataTeardown.java", "diffHunk": "@@ -107,5 +128,86 @@ public static void deleteZkNodeRecursively(ZooKeeper zooKeeper, String path) thr\n         }\n     }\n \n+    private static List<String> getChildren(ZooKeeper zooKeeper, String path) {\n+        try {\n+            return zooKeeper.getChildren(path, null);\n+        } catch (InterruptedException | KeeperException e) {\n+            log.error(\"Failed to get children of {}: {}\", path, e);\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static byte[] getData(ZooKeeper zooKeeper, String path) {\n+        try {\n+            return zooKeeper.getData(path, null, null);\n+        } catch (KeeperException | InterruptedException e) {\n+            log.error(\"Failed to get data from {}: {}\", path, e);\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static void deleteLedger(BookKeeper bookKeeper, long ledgerId) {\n+        try {\n+            bookKeeper.deleteLedger(ledgerId);\n+            log.debug(\"Delete ledger id: {}\", ledgerId);\n+        } catch (InterruptedException e) {\n+            throw new RuntimeException(e);\n+        } catch (BKException e) {\n+            log.warn(\"Failed to delete ledger {}: {}\", ledgerId, e);\n+        }\n+    }\n+\n+    private static void deleteManagedLedgers(ZooKeeper zooKeeper, BookKeeper bookKeeper) {\n+        final String managedLedgersRoot = \"/managed-ledgers\";\n+        getChildren(zooKeeper, managedLedgersRoot).forEach(tenant -> {\n+            final String tenantRoot = managedLedgersRoot + \"/\" + tenant;\n+            getChildren(zooKeeper, tenantRoot).forEach(namespace -> {\n+                final String namespaceRoot = String.join(\"/\", tenantRoot, namespace, \"persistent\");\n+                getChildren(zooKeeper, namespaceRoot).forEach(topic -> {", "originalCommit": "37e7ff573055e3264c0879cc0bbddb9990f68584", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc5MjQ2OQ==", "url": "https://github.com/apache/pulsar/pull/8244#discussion_r506792469", "bodyText": "Yes, seems that it's better than reading from ZK manually. I'll fix it soon.", "author": "BewareMyPower", "createdAt": "2020-10-17T04:28:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU3Mjk5NA=="}], "type": "inlineReview"}, {"oid": "5d7bca832a8918bd69c523b155c45de564ae600b", "url": "https://github.com/apache/pulsar/commit/5d7bca832a8918bd69c523b155c45de564ae600b", "message": "Add check for ledger id", "committedDate": "2020-10-17T04:21:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjgzOTk1Mw==", "url": "https://github.com/apache/pulsar/pull/8244#discussion_r506839953", "bodyText": "Can we use the org.apache.bookkeeper.client.api.Bookkeeper interface?\nYou are using the old, soon deprecated, API", "author": "eolivelli", "createdAt": "2020-10-17T06:55:20Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/PulsarClusterMetadataTeardown.java", "diffHunk": "@@ -72,6 +84,13 @@ public static void main(String[] args) throws InterruptedException {\n \n         ZooKeeper localZk = initZk(arguments.zookeeper, arguments.zkSessionTimeoutMillis);\n \n+        if (arguments.bkMetadataServiceUri != null) {\n+            BookKeeper bookKeeper = new BookKeeper(new ClientConfiguration().setMetadataServiceUri(arguments.bkMetadataServiceUri));", "originalCommit": "37e7ff573055e3264c0879cc0bbddb9990f68584", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkxNDI4OQ==", "url": "https://github.com/apache/pulsar/pull/8244#discussion_r506914289", "bodyText": "IMO, it's better to be consistent with the project. The Pulsar project uses the old API currently which can be verified by running\nfind . -name \"*.java\" | xargs grep -n \"import .*\\.BookKeeper\"\nin the project directory.", "author": "BewareMyPower", "createdAt": "2020-10-17T09:45:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjgzOTk1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkyNDM2OQ==", "url": "https://github.com/apache/pulsar/pull/8244#discussion_r506924369", "bodyText": "Makes sense.\nWe should create a ticket to movie to the new API.\nI will take care of it.", "author": "eolivelli", "createdAt": "2020-10-17T10:10:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjgzOTk1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkyNTIzMw==", "url": "https://github.com/apache/pulsar/pull/8244#discussion_r506925233", "bodyText": "Isn't there any Pulsar internal API to get this list of ledgers?", "author": "eolivelli", "createdAt": "2020-10-17T10:11:58Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/PulsarClusterMetadataTeardown.java", "diffHunk": "@@ -107,5 +128,86 @@ public static void deleteZkNodeRecursively(ZooKeeper zooKeeper, String path) thr\n         }\n     }\n \n+    private static List<String> getChildren(ZooKeeper zooKeeper, String path) {\n+        try {\n+            return zooKeeper.getChildren(path, null);\n+        } catch (InterruptedException | KeeperException e) {\n+            log.error(\"Failed to get children of {}: {}\", path, e);\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static byte[] getData(ZooKeeper zooKeeper, String path) {\n+        try {\n+            return zooKeeper.getData(path, null, null);\n+        } catch (KeeperException | InterruptedException e) {\n+            log.error(\"Failed to get data from {}: {}\", path, e);\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static void deleteLedger(BookKeeper bookKeeper, long ledgerId) {\n+        try {\n+            bookKeeper.deleteLedger(ledgerId);\n+            log.debug(\"Delete ledger id: {}\", ledgerId);\n+        } catch (InterruptedException e) {\n+            throw new RuntimeException(e);\n+        } catch (BKException e) {\n+            log.warn(\"Failed to delete ledger {}: {}\", ledgerId, e);\n+        }\n+    }\n+\n+    private static void deleteManagedLedgers(ZooKeeper zooKeeper, BookKeeper bookKeeper) {\n+        final String managedLedgersRoot = \"/managed-ledgers\";", "originalCommit": "37e7ff573055e3264c0879cc0bbddb9990f68584", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkyODEyNA==", "url": "https://github.com/apache/pulsar/pull/8244#discussion_r506928124", "bodyText": "Yes, as @sijie says, the ManagedLedgerFactory#delete method could delete these ledgers simply. I'm testing it now, the only problem is after create the factory to delete ledgers, the program cannot terminate normally. After I solved the problem, new commits would be pushed.", "author": "BewareMyPower", "createdAt": "2020-10-17T10:25:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkyNTIzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk1MjUxNQ==", "url": "https://github.com/apache/pulsar/pull/8244#discussion_r506952515", "bodyText": "ok. looking forward for news", "author": "eolivelli", "createdAt": "2020-10-17T15:11:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkyNTIzMw=="}], "type": "inlineReview"}, {"oid": "34be51bc4452f374f6200503bd03aa290884bf26", "url": "https://github.com/apache/pulsar/commit/34be51bc4452f374f6200503bd03aa290884bf26", "message": "Ignore NoNodeException when a z-node has no children", "committedDate": "2020-10-17T10:42:34Z", "type": "commit"}, {"oid": "a2fd68a4f946d2f6c2cd25b59f94bab8a862825c", "url": "https://github.com/apache/pulsar/commit/a2fd68a4f946d2f6c2cd25b59f94bab8a862825c", "message": "Use ManagedLedgerFactory to delete ledgers of topics and cursors", "committedDate": "2020-10-17T11:42:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk1ODYwOA==", "url": "https://github.com/apache/pulsar/pull/8244#discussion_r506958608", "bodyText": "Probably all of this direct access to Zookeeper is to be moved inside ManagedLedgerFactory.\nWdyt @sijie?", "author": "eolivelli", "createdAt": "2020-10-17T16:17:23Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/PulsarClusterMetadataTeardown.java", "diffHunk": "@@ -107,5 +135,77 @@ public static void deleteZkNodeRecursively(ZooKeeper zooKeeper, String path) thr\n         }\n     }\n \n+    private static List<String> getChildren(ZooKeeper zooKeeper, String path) {\n+        try {\n+            return zooKeeper.getChildren(path, null);\n+        } catch (InterruptedException | KeeperException e) {\n+            if (e instanceof KeeperException.NoNodeException) {\n+                return new ArrayList<>();\n+            }\n+            log.error(\"Failed to get children of {}: {}\", path, e);\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static byte[] getData(ZooKeeper zooKeeper, String path) {\n+        try {\n+            return zooKeeper.getData(path, null, null);\n+        } catch (KeeperException | InterruptedException e) {\n+            log.error(\"Failed to get data from {}: {}\", path, e);\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static void deleteLedger(BookKeeper bookKeeper, long ledgerId) {\n+        try {\n+            bookKeeper.deleteLedger(ledgerId);\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Delete ledger id: {}\", ledgerId);\n+            }\n+        } catch (InterruptedException | BKException e) {\n+            log.error(\"Failed to delete ledger {}: {}\", ledgerId, e);\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static void deleteManagedLedgers(ZooKeeper zooKeeper, ManagedLedgerFactory managedLedgerFactory) {\n+        final String managedLedgersRoot = \"/managed-ledgers\";\n+        getChildren(zooKeeper, managedLedgersRoot).forEach(tenant -> {\n+            final String tenantRoot = managedLedgersRoot + \"/\" + tenant;\n+            getChildren(zooKeeper, tenantRoot).forEach(namespace -> {\n+                final String namespaceRoot = String.join(\"/\", tenantRoot, namespace, \"persistent\");\n+                getChildren(zooKeeper, namespaceRoot).forEach(topic -> {\n+                    final TopicName topicName = TopicName.get(String.join(\"/\", tenant, namespace, topic));\n+                    try {\n+                        managedLedgerFactory.delete(topicName.getPersistenceNamingEncoding());\n+                    } catch (InterruptedException | ManagedLedgerException e) {\n+                        log.error(\"Failed to delete ledgers of {}: {}\", topicName, e);\n+                        throw new RuntimeException(e);\n+                    }\n+                });\n+            });\n+        });\n+    }\n+\n+    private static void deleteSchemaLedgers(ZooKeeper zooKeeper, BookKeeper bookKeeper) {\n+        final String schemaLedgersRoot = \"/schemas\";", "originalCommit": "a2fd68a4f946d2f6c2cd25b59f94bab8a862825c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk1OTYyMw==", "url": "https://github.com/apache/pulsar/pull/8244#discussion_r506959623", "bodyText": "Schema's ledgers are managed by BookkeeperSchemaStorage, but it's coupled with PulsarService currently because it's a part of pulsar-broker, not an independent module like managed-ledger. So it uses PulsarService's BK client now. The change needs some refactor of schema storage.", "author": "BewareMyPower", "createdAt": "2020-10-17T16:29:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk1ODYwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk2MDAxOA==", "url": "https://github.com/apache/pulsar/pull/8244#discussion_r506960018", "bodyText": "However, since BookkeeperSchemaStorage only uses PulsarService for creating a BookKeeper interface, the refactor may not need too much changes. I'll try to refactor it later.", "author": "BewareMyPower", "createdAt": "2020-10-17T16:33:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk1ODYwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAxODEzNA==", "url": "https://github.com/apache/pulsar/pull/8244#discussion_r507018134", "bodyText": "After looking into code again, I think it's not proper to use BookkeeperSchemaStorage here. Because BookKeeper will be initialized until start() method is invoked. If a constructor which accepts a BookKeeper instance was added, the BookkeeperSchemaStorage shouldn't invoke start() and some other methods. On the other hand, the current implementation of BookkeeperSchemaStorage#delete doesn't access ZooKeeper. So at this moment, we need to access to ZooKeeper directly.", "author": "BewareMyPower", "createdAt": "2020-10-18T05:12:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk1ODYwOA=="}], "type": "inlineReview"}, {"oid": "ce6f99205b491064ece6254dc72a9c67e6db16e5", "url": "https://github.com/apache/pulsar/commit/ce6f99205b491064ece6254dc72a9c67e6db16e5", "message": "Add integration test for PulsarClusterMetadataTeardown", "committedDate": "2020-10-21T08:27:23Z", "type": "commit"}, {"oid": "2d318dc2a234744f4938fe576dcea4fa102ebc15", "url": "https://github.com/apache/pulsar/commit/2d318dc2a234744f4938fe576dcea4fa102ebc15", "message": "Fix CI test error", "committedDate": "2020-10-21T13:12:26Z", "type": "commit"}, {"oid": "676319b91f6009d22f206e06705855faf84c256a", "url": "https://github.com/apache/pulsar/commit/676319b91f6009d22f206e06705855faf84c256a", "message": "Change tests suites order", "committedDate": "2020-10-21T16:37:04Z", "type": "commit"}, {"oid": "48655ede35a23716fcdd0aefa1af6096bf4514cf", "url": "https://github.com/apache/pulsar/commit/48655ede35a23716fcdd0aefa1af6096bf4514cf", "message": "Use dependent PulsarCluster to avoid NullPointerException in CI", "committedDate": "2020-10-22T02:45:49Z", "type": "commit"}]}