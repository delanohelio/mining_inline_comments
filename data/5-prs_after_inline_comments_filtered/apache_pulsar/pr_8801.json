{"pr_number": 8801, "pr_title": "Add setter for the reader subscription name", "pr_createdAt": "2020-12-03T04:54:21Z", "pr_url": "https://github.com/apache/pulsar/pull/8801", "timeline": [{"oid": "9b63a59e997fb4a672913419428d68866dffcd5e", "url": "https://github.com/apache/pulsar/commit/9b63a59e997fb4a672913419428d68866dffcd5e", "message": "support reader name", "committedDate": "2020-12-03T04:48:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2OTY3MA==", "url": "https://github.com/apache/pulsar/pull/8801#discussion_r534769670", "bodyText": "Overall looks good. I found if both the subscriptionRolePrefix and subscriptionName are specified, it will take the subscriptionName. Could you please also add a test case for this?", "author": "zymap", "createdAt": "2020-12-03T07:03:27Z", "path": "pulsar-broker/src/test/java/org/apache/pulsar/client/impl/ReaderTest.java", "diffHunk": "@@ -397,4 +396,32 @@ public void testKeyHashRangeReader() throws IOException {\n         }\n \n     }\n+\n+    @Test\n+    public void testReaderSubName() throws Exception {\n+        final String topic = \"persistent://my-property/my-ns/testReaderSubName\";\n+        final String subName = \"my-sub-name\";\n+\n+        Reader<String> reader = pulsarClient.newReader(Schema.STRING)\n+                .subscriptionName(subName)\n+                .topic(topic)\n+                .startMessageId(MessageId.earliest)\n+                .create();\n+        ReaderImpl<String> readerImpl = (ReaderImpl<String>) reader;\n+        assertEquals(readerImpl.getConsumer().getSubscription(), subName);\n+        reader.close();\n+\n+        final String topic2 = \"persistent://my-property/my-ns/testReaderSubName2\";\n+        admin.topics().createPartitionedTopic(topic2, 3);\n+\n+        reader = pulsarClient.newReader(Schema.STRING)\n+                .subscriptionName(subName)\n+                .topic(topic2)\n+                .startMessageId(MessageId.earliest)\n+                .create();\n+        MultiTopicsReaderImpl<String> multiTopicsReader = (MultiTopicsReaderImpl<String>) reader;\n+        multiTopicsReader.getMultiTopicsConsumer().getConsumers()\n+                .forEach(consumerImpl -> assertEquals(consumerImpl.getSubscription(), subName));\n+        multiTopicsReader.close();", "originalCommit": "9b63a59e997fb4a672913419428d68866dffcd5e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg0MTQyMw==", "url": "https://github.com/apache/pulsar/pull/8801#discussion_r534841423", "bodyText": "It would be better if we could add this test case: when creating two readers with the same subscriptionName at the same time, the second one should fail.", "author": "RobertIndie", "createdAt": "2020-12-03T07:49:30Z", "path": "pulsar-broker/src/test/java/org/apache/pulsar/client/impl/ReaderTest.java", "diffHunk": "@@ -397,4 +396,32 @@ public void testKeyHashRangeReader() throws IOException {\n         }\n \n     }\n+\n+    @Test\n+    public void testReaderSubName() throws Exception {\n+        final String topic = \"persistent://my-property/my-ns/testReaderSubName\";\n+        final String subName = \"my-sub-name\";\n+\n+        Reader<String> reader = pulsarClient.newReader(Schema.STRING)\n+                .subscriptionName(subName)\n+                .topic(topic)\n+                .startMessageId(MessageId.earliest)\n+                .create();\n+        ReaderImpl<String> readerImpl = (ReaderImpl<String>) reader;\n+        assertEquals(readerImpl.getConsumer().getSubscription(), subName);\n+        reader.close();\n+\n+        final String topic2 = \"persistent://my-property/my-ns/testReaderSubName2\";\n+        admin.topics().createPartitionedTopic(topic2, 3);\n+\n+        reader = pulsarClient.newReader(Schema.STRING)\n+                .subscriptionName(subName)\n+                .topic(topic2)\n+                .startMessageId(MessageId.earliest)\n+                .create();\n+        MultiTopicsReaderImpl<String> multiTopicsReader = (MultiTopicsReaderImpl<String>) reader;\n+        multiTopicsReader.getMultiTopicsConsumer().getConsumers()\n+                .forEach(consumerImpl -> assertEquals(consumerImpl.getSubscription(), subName));\n+        multiTopicsReader.close();\n+    }", "originalCommit": "9b63a59e997fb4a672913419428d68866dffcd5e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3f2e05bba304bf9c403e2a8c1decb1ec83b05ab8", "url": "https://github.com/apache/pulsar/commit/3f2e05bba304bf9c403e2a8c1decb1ec83b05ab8", "message": "add unit test", "committedDate": "2020-12-04T02:44:46Z", "type": "commit"}, {"oid": "9453610595641a7b457e2d4bb6f76fff79302835", "url": "https://github.com/apache/pulsar/commit/9453610595641a7b457e2d4bb6f76fff79302835", "message": "change unit test", "committedDate": "2020-12-04T05:53:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg2NzkzMg==", "url": "https://github.com/apache/pulsar/pull/8801#discussion_r535867932", "bodyText": "Nit:  try-with-resources", "author": "eolivelli", "createdAt": "2020-12-04T06:32:59Z", "path": "pulsar-broker/src/test/java/org/apache/pulsar/client/impl/ReaderTest.java", "diffHunk": "@@ -397,4 +398,70 @@ public void testKeyHashRangeReader() throws IOException {\n         }\n \n     }\n+\n+    @Test\n+    public void testReaderSubName() throws Exception {\n+        doTestReaderSubName(true);\n+        doTestReaderSubName(false);\n+    }\n+\n+    public void doTestReaderSubName(boolean setPrefix) throws Exception {\n+        final String topic = \"persistent://my-property/my-ns/testReaderSubName\" + System.currentTimeMillis();\n+        final String subName = \"my-sub-name\";\n+\n+        ReaderBuilder<String> builder = pulsarClient.newReader(Schema.STRING)\n+                .subscriptionName(subName)\n+                .topic(topic)\n+                .startMessageId(MessageId.earliest);\n+        if (setPrefix) {\n+            builder = builder.subscriptionRolePrefix(subName + System.currentTimeMillis());\n+        }\n+        Reader<String> reader = builder.create();\n+        ReaderImpl<String> readerImpl = (ReaderImpl<String>) reader;\n+        assertEquals(readerImpl.getConsumer().getSubscription(), subName);\n+        reader.close();\n+\n+        final String topic2 = \"persistent://my-property/my-ns/testReaderSubName2\" + System.currentTimeMillis();\n+        admin.topics().createPartitionedTopic(topic2, 3);\n+        builder = pulsarClient.newReader(Schema.STRING)\n+                .subscriptionName(subName)\n+                .topic(topic2)\n+                .startMessageId(MessageId.earliest);\n+        if (setPrefix) {\n+            builder = builder.subscriptionRolePrefix(subName + System.currentTimeMillis());\n+        }\n+        reader = builder.create();\n+        MultiTopicsReaderImpl<String> multiTopicsReader = (MultiTopicsReaderImpl<String>) reader;\n+        multiTopicsReader.getMultiTopicsConsumer().getConsumers()\n+                .forEach(consumerImpl -> assertEquals(consumerImpl.getSubscription(), subName));\n+        multiTopicsReader.close();\n+    }\n+\n+    @Test\n+    public void testSameSubName() throws Exception {\n+        final String topic = \"persistent://my-property/my-ns/testSameSubName\";\n+        final String subName = \"my-sub-name\";\n+\n+        Reader<String> reader = pulsarClient.newReader(Schema.STRING)\n+                .subscriptionName(subName)\n+                .topic(topic)\n+                .startMessageId(MessageId.earliest).create();\n+        Reader<String> reader2 = null;\n+        try {", "originalCommit": "9453610595641a7b457e2d4bb6f76fff79302835", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg2ODIzOQ==", "url": "https://github.com/apache/pulsar/pull/8801#discussion_r535868239", "bodyText": "Can we assert that after closing the first reader it is possible to create a new reader with the same subscription name?", "author": "eolivelli", "createdAt": "2020-12-04T06:33:50Z", "path": "pulsar-broker/src/test/java/org/apache/pulsar/client/impl/ReaderTest.java", "diffHunk": "@@ -397,4 +398,70 @@ public void testKeyHashRangeReader() throws IOException {\n         }\n \n     }\n+\n+    @Test\n+    public void testReaderSubName() throws Exception {\n+        doTestReaderSubName(true);\n+        doTestReaderSubName(false);\n+    }\n+\n+    public void doTestReaderSubName(boolean setPrefix) throws Exception {\n+        final String topic = \"persistent://my-property/my-ns/testReaderSubName\" + System.currentTimeMillis();\n+        final String subName = \"my-sub-name\";\n+\n+        ReaderBuilder<String> builder = pulsarClient.newReader(Schema.STRING)\n+                .subscriptionName(subName)\n+                .topic(topic)\n+                .startMessageId(MessageId.earliest);\n+        if (setPrefix) {\n+            builder = builder.subscriptionRolePrefix(subName + System.currentTimeMillis());\n+        }\n+        Reader<String> reader = builder.create();\n+        ReaderImpl<String> readerImpl = (ReaderImpl<String>) reader;\n+        assertEquals(readerImpl.getConsumer().getSubscription(), subName);\n+        reader.close();\n+\n+        final String topic2 = \"persistent://my-property/my-ns/testReaderSubName2\" + System.currentTimeMillis();\n+        admin.topics().createPartitionedTopic(topic2, 3);\n+        builder = pulsarClient.newReader(Schema.STRING)\n+                .subscriptionName(subName)\n+                .topic(topic2)\n+                .startMessageId(MessageId.earliest);\n+        if (setPrefix) {\n+            builder = builder.subscriptionRolePrefix(subName + System.currentTimeMillis());\n+        }\n+        reader = builder.create();\n+        MultiTopicsReaderImpl<String> multiTopicsReader = (MultiTopicsReaderImpl<String>) reader;\n+        multiTopicsReader.getMultiTopicsConsumer().getConsumers()\n+                .forEach(consumerImpl -> assertEquals(consumerImpl.getSubscription(), subName));\n+        multiTopicsReader.close();\n+    }\n+\n+    @Test\n+    public void testSameSubName() throws Exception {\n+        final String topic = \"persistent://my-property/my-ns/testSameSubName\";\n+        final String subName = \"my-sub-name\";\n+\n+        Reader<String> reader = pulsarClient.newReader(Schema.STRING)\n+                .subscriptionName(subName)\n+                .topic(topic)\n+                .startMessageId(MessageId.earliest).create();\n+        Reader<String> reader2 = null;\n+        try {\n+            reader2 = pulsarClient.newReader(Schema.STRING)\n+                    .subscriptionName(subName)\n+                    .topic(topic)\n+                    .startMessageId(MessageId.earliest).create();\n+            fail(\"should fail\");\n+        } catch (PulsarClientException e) {\n+            assertTrue(e instanceof PulsarClientException.ConsumerBusyException);\n+            assertTrue(e.getMessage().contains(\"Exclusive consumer is already connected\"));\n+        }\n+\n+        reader.close();\n+        if (reader2 != null) {\n+            reader2.close();\n+        }\n+    }", "originalCommit": "9453610595641a7b457e2d4bb6f76fff79302835", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5b03e4b604cce70fb1a3b001536d260ed6581bc4", "url": "https://github.com/apache/pulsar/commit/5b03e4b604cce70fb1a3b001536d260ed6581bc4", "message": "change unit test", "committedDate": "2020-12-04T06:46:56Z", "type": "commit"}]}