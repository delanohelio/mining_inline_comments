{"pr_number": 8285, "pr_title": "[Issue 8260] Support reset cursor to a batch index of the batching message", "pr_createdAt": "2020-10-17T10:24:13Z", "pr_url": "https://github.com/apache/pulsar/pull/8285", "timeline": [{"oid": "f8c7c97536cef15acb4949085e1922d1c0d617e0", "url": "https://github.com/apache/pulsar/commit/f8c7c97536cef15acb4949085e1922d1c0d617e0", "message": "store ackSet when reset cursor in batch indexes\n\nSigned-off-by: Renkai <gaelookair@gmail.com>", "committedDate": "2020-10-17T10:15:03Z", "type": "commit"}, {"oid": "f7233179e6d4b57f00d32c6fad484ee000cc65d0", "url": "https://github.com/apache/pulsar/commit/f7233179e6d4b57f00d32c6fad484ee000cc65d0", "message": "carry ack info in command seek\n\nSigned-off-by: Renkai <gaelookair@gmail.com>", "committedDate": "2020-10-17T10:34:30Z", "type": "commit"}, {"oid": "77aa4f2926bee2e87d2f6371c38fe895299f448f", "url": "https://github.com/apache/pulsar/commit/77aa4f2926bee2e87d2f6371c38fe895299f448f", "message": "make ackSet by batch index from client\n\nSigned-off-by: Renkai <gaelookair@gmail.com>", "committedDate": "2020-10-17T10:52:53Z", "type": "commit"}, {"oid": "6c2867645f6647891062f9da7f8527d11e850032", "url": "https://github.com/apache/pulsar/commit/6c2867645f6647891062f9da7f8527d11e850032", "message": "fix timeout bug\n\nSigned-off-by: Renkai <gaelookair@gmail.com>", "committedDate": "2020-10-17T15:31:24Z", "type": "commit"}, {"oid": "76101ff88c3d5d024629f7c8dd494cf717e71b2a", "url": "https://github.com/apache/pulsar/commit/76101ff88c3d5d024629f7c8dd494cf717e71b2a", "message": "use different parameter for different message impl\n\nSigned-off-by: Renkai <gaelookair@gmail.com>", "committedDate": "2020-10-18T06:49:00Z", "type": "commit"}, {"oid": "0a84bd823e8bfb33bd19237841f34ce31006ace2", "url": "https://github.com/apache/pulsar/commit/0a84bd823e8bfb33bd19237841f34ce31006ace2", "message": "use different parameter for different message impl\n\nSigned-off-by: Renkai <gaelookair@gmail.com>", "committedDate": "2020-10-18T09:12:30Z", "type": "commit"}, {"oid": "2c4ce629da2f2ac898d2cf346adb137c63339f93", "url": "https://github.com/apache/pulsar/commit/2c4ce629da2f2ac898d2cf346adb137c63339f93", "message": "polish ackSet\n\nSigned-off-by: Renkai <gaelookair@gmail.com>", "committedDate": "2020-10-18T09:44:18Z", "type": "commit"}, {"oid": "18c8acc1ac1e5b09f46e132176f688cd2beb2f0d", "url": "https://github.com/apache/pulsar/commit/18c8acc1ac1e5b09f46e132176f688cd2beb2f0d", "message": "polish\n\nSigned-off-by: Renkai <gaelookair@gmail.com>", "committedDate": "2020-10-18T09:47:17Z", "type": "commit"}, {"oid": "d3652436ab072bfbf46e8f844dbbc09007386fbc", "url": "https://github.com/apache/pulsar/commit/d3652436ab072bfbf46e8f844dbbc09007386fbc", "message": "polish code\n\nSigned-off-by: Renkai <gaelookair@gmail.com>", "committedDate": "2020-10-18T09:54:57Z", "type": "commit"}, {"oid": "0076999088cd176e85584b655daeda2478883c6b", "url": "https://github.com/apache/pulsar/commit/0076999088cd176e85584b655daeda2478883c6b", "message": "pass test\n\nSigned-off-by: Renkai <gaelookair@gmail.com>", "committedDate": "2020-10-19T08:11:06Z", "type": "commit"}, {"oid": "23234919341737b59d2bf08c6dd13dc72ef46e50", "url": "https://github.com/apache/pulsar/commit/23234919341737b59d2bf08c6dd13dc72ef46e50", "message": "add some comment\n\nSigned-off-by: Renkai <gaelookair@gmail.com>", "committedDate": "2020-10-19T08:24:02Z", "type": "commit"}, {"oid": "2f0cad6d01347c687ad81769749b3588444239a3", "url": "https://github.com/apache/pulsar/commit/2f0cad6d01347c687ad81769749b3588444239a3", "message": "fix ci error\n\nSigned-off-by: Renkai <gaelookair@gmail.com>", "committedDate": "2020-10-19T09:01:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEzODIwMw==", "url": "https://github.com/apache/pulsar/pull/8285#discussion_r508138203", "bodyText": "Avoid use import .* here.", "author": "codelipenghui", "createdAt": "2020-10-20T00:30:08Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java", "diffHunk": "@@ -36,10 +36,7 @@\n import io.netty.handler.ssl.SslHandler;\n \n import java.net.SocketAddress;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.NoSuchElementException;\n-import java.util.Set;\n+import java.util.*;", "originalCommit": "2f0cad6d01347c687ad81769749b3588444239a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEzODM3Mw==", "url": "https://github.com/apache/pulsar/pull/8285#discussion_r508138373", "bodyText": "Avoid use import .* here.", "author": "codelipenghui", "createdAt": "2020-10-20T00:30:45Z", "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/service/SubscriptionSeekTest.java", "diffHunk": "@@ -25,20 +25,21 @@\n import static org.testng.Assert.fail;\n \n import com.google.common.collect.Lists;\n+\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n import java.util.concurrent.TimeUnit;\n \n import lombok.extern.slf4j.Slf4j;\n import org.apache.pulsar.broker.service.persistent.PersistentSubscription;\n import org.apache.pulsar.broker.service.persistent.PersistentTopic;\n import org.apache.pulsar.client.admin.PulsarAdminException;\n-import org.apache.pulsar.client.api.MessageId;\n+import org.apache.pulsar.client.api.*;", "originalCommit": "2f0cad6d01347c687ad81769749b3588444239a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0MDIwNg==", "url": "https://github.com/apache/pulsar/pull/8285#discussion_r508140206", "bodyText": "The batchIndex of the MessageIdData is an optional field, we shouldn't always use '0' here. It better to change the params type of the batchIndex to Integer. If the the batchIndex no a null value, set the value for the MessageIdBuilder", "author": "codelipenghui", "createdAt": "2020-10-20T00:37:37Z", "path": "pulsar-common/src/main/java/org/apache/pulsar/common/protocol/Commands.java", "diffHunk": "@@ -770,14 +770,15 @@ public static ByteBuf newActiveConsumerChange(long consumerId, boolean isActive)\n         return res;\n     }\n \n-    public static ByteBuf newSeek(long consumerId, long requestId, long ledgerId, long entryId) {\n+    public static ByteBuf newSeek(long consumerId, long requestId, long ledgerId, long entryId, int batchIndex) {\n         CommandSeek.Builder seekBuilder = CommandSeek.newBuilder();\n         seekBuilder.setConsumerId(consumerId);\n         seekBuilder.setRequestId(requestId);\n \n         MessageIdData.Builder messageIdBuilder = MessageIdData.newBuilder();\n         messageIdBuilder.setLedgerId(ledgerId);\n         messageIdBuilder.setEntryId(entryId);\n+        messageIdBuilder.setBatchIndex(batchIndex);", "originalCommit": "2f0cad6d01347c687ad81769749b3588444239a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0MDg1NA==", "url": "https://github.com/apache/pulsar/pull/8285#discussion_r508140854", "bodyText": "It's better tot check msgIdData.hasBatchIndex() first, If the conditions are not met, we don't need to create the BitSet instance.", "author": "codelipenghui", "createdAt": "2020-10-20T00:39:50Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java", "diffHunk": "@@ -1349,8 +1347,14 @@ protected void handleSeek(CommandSeek seek) {\n             Consumer consumer = consumerFuture.getNow(null);\n             Subscription subscription = consumer.getSubscription();\n             MessageIdData msgIdData = seek.getMessageId();\n+            BitSetRecyclable ackSet = BitSetRecyclable.create();\n+            if (msgIdData.hasBatchIndex()) {\n+                ackSet.set(0, Math.max(msgIdData.getBatchIndex(), 0));\n+            }\n \n-            Position position = new PositionImpl(msgIdData.getLedgerId(), msgIdData.getEntryId());\n+            Position position = new PositionImpl(msgIdData.getLedgerId(),\n+                    msgIdData.getEntryId(), ackSet.toLongArray());\n+            ackSet.recycle();", "originalCommit": "2f0cad6d01347c687ad81769749b3588444239a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f2134ec5b5bd135bdb534a12bec9cebb6cc2b8f3", "url": "https://github.com/apache/pulsar/commit/f2134ec5b5bd135bdb534a12bec9cebb6cc2b8f3", "message": "replace * with specific imports\n\nSigned-off-by: Renkai <gaelookair@gmail.com>", "committedDate": "2020-10-20T01:59:24Z", "type": "commit"}, {"oid": "deb57723c0ad254d5d577c96bda845d319aed9b6", "url": "https://github.com/apache/pulsar/commit/deb57723c0ad254d5d577c96bda845d319aed9b6", "message": "use MessageIdData carried ack set instead of generated by batchIndex\n\nSigned-off-by: Renkai <gaelookair@gmail.com>", "committedDate": "2020-10-20T02:30:22Z", "type": "commit"}, {"oid": "7af4e324c58646973d6c1fb63e7a834d8c67cd07", "url": "https://github.com/apache/pulsar/commit/7af4e324c58646973d6c1fb63e7a834d8c67cd07", "message": "use MessageIdData carried ack set instead of generated by batchIndex\n\nSigned-off-by: Renkai <gaelookair@gmail.com>", "committedDate": "2020-10-20T03:12:31Z", "type": "commit"}, {"oid": "f989ac393aa1626ec69cb0c91c7d5e456a52574e", "url": "https://github.com/apache/pulsar/commit/f989ac393aa1626ec69cb0c91c7d5e456a52574e", "message": "use MessageIdData carried ack set instead of generated by batchIndex\n\nSigned-off-by: Renkai <gaelookair@gmail.com>", "committedDate": "2020-10-20T03:26:25Z", "type": "commit"}, {"oid": "be2c79d55b945dcd876c5f865e88f55ef1897d4f", "url": "https://github.com/apache/pulsar/commit/be2c79d55b945dcd876c5f865e88f55ef1897d4f", "message": "use MessageIdData carried ack set instead of generated by batchIndex\n\nSigned-off-by: Renkai <gaelookair@gmail.com>", "committedDate": "2020-10-20T03:32:03Z", "type": "commit"}, {"oid": "3befed3ab843278511e12dbb0253b9b6a9f0de80", "url": "https://github.com/apache/pulsar/commit/3befed3ab843278511e12dbb0253b9b6a9f0de80", "message": "use MessageIdData carried ack set instead of generated by batchIndex\n\nSigned-off-by: Renkai <gaelookair@gmail.com>", "committedDate": "2020-10-20T03:53:32Z", "type": "commit"}, {"oid": "e7d08f29b8b7dd5964ee3f93929337db6cd850d6", "url": "https://github.com/apache/pulsar/commit/e7d08f29b8b7dd5964ee3f93929337db6cd850d6", "message": "remove redundant map put\n\nSigned-off-by: Renkai <gaelookair@gmail.com>", "committedDate": "2020-10-20T07:31:00Z", "type": "commit"}, {"oid": "b1c90f1e99d85d75692399b62c673cb0ed10f3e7", "url": "https://github.com/apache/pulsar/commit/b1c90f1e99d85d75692399b62c673cb0ed10f3e7", "message": "use recycleable bit set\n\nSigned-off-by: Renkai <gaelookair@gmail.com>", "committedDate": "2020-10-20T07:43:50Z", "type": "commit"}, {"oid": "68b621561995111f27917c7aaa9c4ca19c3dfb1f", "url": "https://github.com/apache/pulsar/commit/68b621561995111f27917c7aaa9c4ca19c3dfb1f", "message": "use recycleable bit set\n\nSigned-off-by: Renkai <gaelookair@gmail.com>", "committedDate": "2020-10-20T07:53:51Z", "type": "commit"}, {"oid": "200d3f98c932ee12f457469e9c24e97424134e39", "url": "https://github.com/apache/pulsar/commit/200d3f98c932ee12f457469e9c24e97424134e39", "message": "remove unnecessary client parameter\n\nSigned-off-by: Renkai <gaelookair@gmail.com>", "committedDate": "2020-10-20T08:48:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQzNzYyMA==", "url": "https://github.com/apache/pulsar/pull/8285#discussion_r508437620", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (long l : ackSet) {\n          \n          \n            \n                        messageIdBuilder.addAckSet(l);\n          \n          \n            \n                    }\n          \n          \n            \n                 messageIdBuilder.addAllAckSet(SafeCollectionUtils.longArrayToList(ackSet);", "author": "codelipenghui", "createdAt": "2020-10-20T11:54:19Z", "path": "pulsar-common/src/main/java/org/apache/pulsar/common/protocol/Commands.java", "diffHunk": "@@ -760,24 +760,30 @@ public static ByteBuf newUnsubscribe(long consumerId, long requestId) {\n     public static ByteBuf newActiveConsumerChange(long consumerId, boolean isActive) {\n         CommandActiveConsumerChange.Builder changeBuilder = CommandActiveConsumerChange.newBuilder()\n             .setConsumerId(consumerId)\n-            .setIsActive(isActive);\n+                .setIsActive(isActive);\n \n         CommandActiveConsumerChange change = changeBuilder.build();\n         ByteBuf res = serializeWithSize(\n-            BaseCommand.newBuilder().setType(Type.ACTIVE_CONSUMER_CHANGE).setActiveConsumerChange(change));\n+                BaseCommand.newBuilder().setType(Type.ACTIVE_CONSUMER_CHANGE).setActiveConsumerChange(change));\n         changeBuilder.recycle();\n         change.recycle();\n         return res;\n     }\n \n-    public static ByteBuf newSeek(long consumerId, long requestId, long ledgerId, long entryId) {\n+    public static ByteBuf newSeek(long consumerId, long requestId,\n+                                  long ledgerId, long entryId, long[] ackSet) {\n         CommandSeek.Builder seekBuilder = CommandSeek.newBuilder();\n         seekBuilder.setConsumerId(consumerId);\n         seekBuilder.setRequestId(requestId);\n \n         MessageIdData.Builder messageIdBuilder = MessageIdData.newBuilder();\n         messageIdBuilder.setLedgerId(ledgerId);\n         messageIdBuilder.setEntryId(entryId);\n+\n+        for (long l : ackSet) {\n+            messageIdBuilder.addAckSet(l);\n+        }", "originalCommit": "200d3f98c932ee12f457469e9c24e97424134e39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQzODc4OA==", "url": "https://github.com/apache/pulsar/pull/8285#discussion_r508438788", "bodyText": "It's better to check the msgIdData.hasAckSetList() first rather than create a long[] first", "author": "codelipenghui", "createdAt": "2020-10-20T11:56:25Z", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java", "diffHunk": "@@ -1350,7 +1351,11 @@ protected void handleSeek(CommandSeek seek) {\n             Subscription subscription = consumer.getSubscription();\n             MessageIdData msgIdData = seek.getMessageId();\n \n-            Position position = new PositionImpl(msgIdData.getLedgerId(), msgIdData.getEntryId());\n+            long[] ackSet = msgIdData.getAckSetList().stream().mapToLong(x -> x).toArray();\n+            if (ackSet == null) ackSet = new long[0];\n+\n+            Position position = new PositionImpl(msgIdData.getLedgerId(),\n+                    msgIdData.getEntryId(), ackSet);", "originalCommit": "200d3f98c932ee12f457469e9c24e97424134e39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ0MDM5MA==", "url": "https://github.com/apache/pulsar/pull/8285#discussion_r508440390", "bodyText": "The consumer uses a durable cursor no a non-durable cursor.", "author": "codelipenghui", "createdAt": "2020-10-20T11:59:19Z", "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/service/SubscriptionSeekTest.java", "diffHunk": "@@ -116,6 +122,93 @@ public void testSeek() throws Exception {\n         assertEquals(sub.getNumberOfEntriesInBacklog(false), 0);\n     }\n \n+    @Test\n+    public void testSeekForBatch() throws Exception {\n+        final String topicName = \"persistent://prop/use/ns-abcd/testSeekForBatch\";\n+        String subscriptionName = \"my-subscription-batch\";\n+\n+        Producer<String> producer = pulsarClient.newProducer(Schema.STRING)\n+                .enableBatching(true)\n+                .batchingMaxMessages(3)\n+                .topic(topicName).create();\n+\n+\n+        List<MessageId> messageIds = new ArrayList<>();\n+        List<CompletableFuture<MessageId>> futureMessageIds = new ArrayList<>();\n+\n+        List<String> messages = new ArrayList<>();\n+        for (int i = 0; i < 10; i++) {\n+            String message = \"my-message-\" + i;\n+            messages.add(message);\n+            CompletableFuture<MessageId> messageIdCompletableFuture = producer.sendAsync(message);\n+            futureMessageIds.add(messageIdCompletableFuture);\n+        }\n+\n+        futureMessageIds.forEach(future -> {\n+            MessageId messageId = null;\n+            try {\n+                messageId = future.get();\n+                messageIds.add(messageId);\n+            } catch (InterruptedException | ExecutionException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        producer.flush();\n+        producer.close();\n+\n+\n+        org.apache.pulsar.client.api.Consumer<String> consumer = pulsarClient.newConsumer(Schema.STRING)\n+                .topic(topicName)\n+                .subscriptionName(subscriptionName)\n+                .subscribe();\n+\n+        PersistentTopic topicRef = (PersistentTopic) pulsar.getBrokerService().getTopicReference(topicName).get();\n+        assertNotNull(topicRef);\n+\n+        assertEquals(topicRef.getSubscriptions().size(), 1);\n+\n+        MessageId resetId = messageIds.get(4);\n+        consumer.seek(resetId);\n+        // Wait for consumer to reconnect\n+        Thread.sleep(500);\n+\n+        Message<String> nextMessage = consumer.receive();\n+        MessageId nextId = nextMessage.getMessageId();\n+        consumer.acknowledge(nextId);\n+        // For non-durable we are going to restart from the next entry", "originalCommit": "200d3f98c932ee12f457469e9c24e97424134e39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0c2e6e47b908a8b9f2477bc6629ce947671a7ce2", "url": "https://github.com/apache/pulsar/commit/0c2e6e47b908a8b9f2477bc6629ce947671a7ce2", "message": "polish code\n\nSigned-off-by: Renkai <gaelookair@gmail.com>", "committedDate": "2020-10-20T15:00:59Z", "type": "commit"}, {"oid": "519ebb9d22cea38b9f34d35b13627d9b9a13c03a", "url": "https://github.com/apache/pulsar/commit/519ebb9d22cea38b9f34d35b13627d9b9a13c03a", "message": "start message id inclusive\n\nSigned-off-by: Renkai <gaelookair@gmail.com>", "committedDate": "2020-10-21T07:03:39Z", "type": "commit"}, {"oid": "8d356ac8e5627eef1451ce84698de89d50b37aee", "url": "https://github.com/apache/pulsar/commit/8d356ac8e5627eef1451ce84698de89d50b37aee", "message": "start message id inclusive\n\nSigned-off-by: Renkai <gaelookair@gmail.com>", "committedDate": "2020-10-21T07:04:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA1NzU4OQ==", "url": "https://github.com/apache/pulsar/pull/8285#discussion_r509057589", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    futureMessageIds.forEach(future -> {\n          \n          \n            \n                        MessageId messageId = null;\n          \n          \n            \n                        try {\n          \n          \n            \n                            messageId = future.get();\n          \n          \n            \n                            messageIds.add(messageId);\n          \n          \n            \n                        } catch (InterruptedException | ExecutionException e) {\n          \n          \n            \n                            e.printStackTrace();\n          \n          \n            \n                        }\n          \n          \n            \n                    });\n          \n          \n            \n                    FutureUtil.waitForAll(futureMessageIds).get()", "author": "codelipenghui", "createdAt": "2020-10-21T07:42:42Z", "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/service/SubscriptionSeekTest.java", "diffHunk": "@@ -116,6 +122,91 @@ public void testSeek() throws Exception {\n         assertEquals(sub.getNumberOfEntriesInBacklog(false), 0);\n     }\n \n+    @Test\n+    public void testSeekForBatch() throws Exception {\n+        final String topicName = \"persistent://prop/use/ns-abcd/testSeekForBatch\";\n+        String subscriptionName = \"my-subscription-batch\";\n+\n+        Producer<String> producer = pulsarClient.newProducer(Schema.STRING)\n+                .enableBatching(true)\n+                .batchingMaxMessages(3)\n+                .topic(topicName).create();\n+\n+\n+        List<MessageId> messageIds = new ArrayList<>();\n+        List<CompletableFuture<MessageId>> futureMessageIds = new ArrayList<>();\n+\n+        List<String> messages = new ArrayList<>();\n+        for (int i = 0; i < 10; i++) {\n+            String message = \"my-message-\" + i;\n+            messages.add(message);\n+            CompletableFuture<MessageId> messageIdCompletableFuture = producer.sendAsync(message);\n+            futureMessageIds.add(messageIdCompletableFuture);\n+        }\n+\n+        futureMessageIds.forEach(future -> {\n+            MessageId messageId = null;\n+            try {\n+                messageId = future.get();\n+                messageIds.add(messageId);\n+            } catch (InterruptedException | ExecutionException e) {\n+                e.printStackTrace();\n+            }\n+        });", "originalCommit": "8d356ac8e5627eef1451ce84698de89d50b37aee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA1Nzg1Mw==", "url": "https://github.com/apache/pulsar/pull/8285#discussion_r509057853", "bodyText": "Since the messageId is returned, we don't need to flush here.", "author": "codelipenghui", "createdAt": "2020-10-21T07:43:08Z", "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/service/SubscriptionSeekTest.java", "diffHunk": "@@ -116,6 +122,91 @@ public void testSeek() throws Exception {\n         assertEquals(sub.getNumberOfEntriesInBacklog(false), 0);\n     }\n \n+    @Test\n+    public void testSeekForBatch() throws Exception {\n+        final String topicName = \"persistent://prop/use/ns-abcd/testSeekForBatch\";\n+        String subscriptionName = \"my-subscription-batch\";\n+\n+        Producer<String> producer = pulsarClient.newProducer(Schema.STRING)\n+                .enableBatching(true)\n+                .batchingMaxMessages(3)\n+                .topic(topicName).create();\n+\n+\n+        List<MessageId> messageIds = new ArrayList<>();\n+        List<CompletableFuture<MessageId>> futureMessageIds = new ArrayList<>();\n+\n+        List<String> messages = new ArrayList<>();\n+        for (int i = 0; i < 10; i++) {\n+            String message = \"my-message-\" + i;\n+            messages.add(message);\n+            CompletableFuture<MessageId> messageIdCompletableFuture = producer.sendAsync(message);\n+            futureMessageIds.add(messageIdCompletableFuture);\n+        }\n+\n+        futureMessageIds.forEach(future -> {\n+            MessageId messageId = null;\n+            try {\n+                messageId = future.get();\n+                messageIds.add(messageId);\n+            } catch (InterruptedException | ExecutionException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        producer.flush();", "originalCommit": "8d356ac8e5627eef1451ce84698de89d50b37aee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA2MDU3Mw==", "url": "https://github.com/apache/pulsar/pull/8285#discussion_r509060573", "bodyText": "Could you please also add some corner case test? such as reset to the last message to check the consumer can't receive any message?", "author": "codelipenghui", "createdAt": "2020-10-21T07:47:23Z", "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/service/SubscriptionSeekTest.java", "diffHunk": "@@ -116,6 +122,91 @@ public void testSeek() throws Exception {\n         assertEquals(sub.getNumberOfEntriesInBacklog(false), 0);\n     }\n \n+    @Test\n+    public void testSeekForBatch() throws Exception {\n+        final String topicName = \"persistent://prop/use/ns-abcd/testSeekForBatch\";\n+        String subscriptionName = \"my-subscription-batch\";\n+\n+        Producer<String> producer = pulsarClient.newProducer(Schema.STRING)\n+                .enableBatching(true)\n+                .batchingMaxMessages(3)\n+                .topic(topicName).create();\n+\n+\n+        List<MessageId> messageIds = new ArrayList<>();\n+        List<CompletableFuture<MessageId>> futureMessageIds = new ArrayList<>();\n+\n+        List<String> messages = new ArrayList<>();\n+        for (int i = 0; i < 10; i++) {\n+            String message = \"my-message-\" + i;\n+            messages.add(message);\n+            CompletableFuture<MessageId> messageIdCompletableFuture = producer.sendAsync(message);\n+            futureMessageIds.add(messageIdCompletableFuture);\n+        }\n+\n+        futureMessageIds.forEach(future -> {\n+            MessageId messageId = null;\n+            try {\n+                messageId = future.get();\n+                messageIds.add(messageId);\n+            } catch (InterruptedException | ExecutionException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        producer.flush();\n+        producer.close();\n+\n+\n+        org.apache.pulsar.client.api.Consumer<String> consumer = pulsarClient.newConsumer(Schema.STRING)\n+                .topic(topicName)\n+                .subscriptionName(subscriptionName)\n+                .startMessageIdInclusive()\n+                .subscribe();\n+\n+        PersistentTopic topicRef = (PersistentTopic) pulsar.getBrokerService().getTopicReference(topicName).get();\n+        assertNotNull(topicRef);\n+\n+        assertEquals(topicRef.getSubscriptions().size(), 1);\n+\n+        MessageId resetId = messageIds.get(4);\n+        consumer.seek(resetId);\n+        // Wait for consumer to reconnect\n+        Thread.sleep(500);\n+\n+        Message<String> nextMessage = consumer.receive();\n+        MessageId nextId = nextMessage.getMessageId();\n+        consumer.acknowledge(nextId);\n+        String expectedMessage = messages.get(4);\n+        log.info(\"\\nexpected next message: {}, next message {}\", expectedMessage, nextMessage.getValue());\n+        assertEquals(nextMessage.getValue(), expectedMessage);\n+\n+        resetId = messageIds.get(3);\n+        consumer.seek(resetId);\n+        // Wait for consumer to reconnect\n+        Thread.sleep(500);\n+\n+        nextMessage = consumer.receive();\n+        nextId = nextMessage.getMessageId();\n+        consumer.acknowledge(nextId);\n+        expectedMessage = messages.get(3);\n+        log.info(\"expected next message2: {}, next message2 {}\", expectedMessage, nextMessage.getValue());\n+\n+        assertEquals(nextMessage.getValue(), expectedMessage);\n+\n+        resetId = messageIds.get(2);\n+        consumer.seek(resetId);\n+        // Wait for consumer to reconnect\n+        Thread.sleep(500);\n+\n+        nextMessage = consumer.receive();\n+        nextId = nextMessage.getMessageId();\n+        consumer.acknowledge(nextId);\n+        expectedMessage = messages.get(2);\n+        log.info(\"expected next message3: {}, next message3 {}\", expectedMessage, nextMessage.getValue());\n+        assertEquals(nextMessage.getValue(), expectedMessage);", "originalCommit": "8d356ac8e5627eef1451ce84698de89d50b37aee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "32645c8fc4715349cc454d18e2b9a7d965b936f2", "url": "https://github.com/apache/pulsar/commit/32645c8fc4715349cc454d18e2b9a7d965b936f2", "message": "leave ack set null when command not include a ack set\n\nSigned-off-by: Renkai <gaelookair@gmail.com>", "committedDate": "2020-10-21T08:00:41Z", "type": "commit"}, {"oid": "33399a4e93f33aa0a32b14d088966e47cadea30f", "url": "https://github.com/apache/pulsar/commit/33399a4e93f33aa0a32b14d088966e47cadea30f", "message": "remove unnecessary try catch\n\nSigned-off-by: Renkai <gaelookair@gmail.com>", "committedDate": "2020-10-21T08:19:59Z", "type": "commit"}, {"oid": "9b4241d9d6561924871f38d157ec0970e14dfcea", "url": "https://github.com/apache/pulsar/commit/9b4241d9d6561924871f38d157ec0970e14dfcea", "message": "drop unnecessary sleep\n\nSigned-off-by: Renkai <gaelookair@gmail.com>", "committedDate": "2020-10-21T08:25:18Z", "type": "commit"}, {"oid": "5aaa20633d0d3522db211dc3e5a8525bbf72c857", "url": "https://github.com/apache/pulsar/commit/5aaa20633d0d3522db211dc3e5a8525bbf72c857", "message": "enhance test\n\nSigned-off-by: Renkai <gaelookair@gmail.com>", "committedDate": "2020-10-21T08:35:32Z", "type": "commit"}, {"oid": "c55e8bf13a5e8e4587468c5fc49e4e1de39531ee", "url": "https://github.com/apache/pulsar/commit/c55e8bf13a5e8e4587468c5fc49e4e1de39531ee", "message": "remove unnecessary import\n\nSigned-off-by: Renkai <gaelookair@gmail.com>", "committedDate": "2020-10-21T08:42:28Z", "type": "commit"}]}