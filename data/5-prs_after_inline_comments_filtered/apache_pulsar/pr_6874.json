{"pr_number": 6874, "pr_title": "Add dynamodb streams source", "pr_createdAt": "2020-05-04T22:11:11Z", "pr_url": "https://github.com/apache/pulsar/pull/6874", "timeline": [{"oid": "6af92a5edb7152707bfbbf09796af19ad636daf8", "url": "https://github.com/apache/pulsar/commit/6af92a5edb7152707bfbbf09796af19ad636daf8", "message": "Add dynamodb streams source", "committedDate": "2020-05-04T22:04:29Z", "type": "commit"}, {"oid": "e1a9d05b727e5b1f90128c96e3919156a1e1a5e9", "url": "https://github.com/apache/pulsar/commit/e1a9d05b727e5b1f90128c96e3919156a1e1a5e9", "message": "Fix duplicated file", "committedDate": "2020-05-04T22:18:56Z", "type": "commit"}, {"oid": "21704e14e0334242f8bb26fce31037bf32c1aee5", "url": "https://github.com/apache/pulsar/commit/21704e14e0334242f8bb26fce31037bf32c1aee5", "message": "Clean up dependencies", "committedDate": "2020-05-05T00:33:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk4MDc4MQ==", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r419980781", "bodyText": "@Data already contains @EqualsAndHashCode", "author": "vzhikserg", "createdAt": "2020-05-05T09:34:18Z", "path": "pulsar-io/dynamodb/src/main/java/org/apache/pulsar/io/dynamodb/DynamoDBSourceConfig.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.io.dynamodb;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.net.URI;\n+import java.util.Date;\n+import java.util.Map;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.cloudwatch.AmazonCloudWatch;\n+import com.amazonaws.services.cloudwatch.AmazonCloudWatchClientBuilder;\n+import com.amazonaws.services.dynamodbv2.*;\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream;\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStreamExtended;\n+import org.apache.pulsar.io.aws.AwsCredentialProviderPlugin;\n+import org.apache.pulsar.io.core.annotations.FieldDoc;\n+\n+import software.amazon.awssdk.regions.Region;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+\n+@Data\n+@EqualsAndHashCode", "originalCommit": "e1a9d05b727e5b1f90128c96e3919156a1e1a5e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk4MzE3OA==", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r419983178", "bodyText": "Please use template strings in logs:\nlog.info(\"Processing {} records from {}\", processRecordsInput.getRecords().size(), kinesisShardId);", "author": "vzhikserg", "createdAt": "2020-05-05T09:38:33Z", "path": "pulsar-io/dynamodb/src/main/java/org/apache/pulsar/io/dynamodb/StreamsRecordProcessor.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.io.dynamodb;\n+\n+import com.amazonaws.services.kinesis.clientlibrary.exceptions.InvalidStateException;\n+import com.amazonaws.services.kinesis.clientlibrary.exceptions.KinesisClientLibDependencyException;\n+import com.amazonaws.services.kinesis.clientlibrary.exceptions.ShutdownException;\n+import com.amazonaws.services.kinesis.clientlibrary.exceptions.ThrottlingException;\n+import com.amazonaws.services.kinesis.clientlibrary.interfaces.IRecordProcessorCheckpointer;\n+import com.amazonaws.services.kinesis.clientlibrary.interfaces.v2.IRecordProcessor;\n+import com.amazonaws.services.kinesis.clientlibrary.types.InitializationInput;\n+import com.amazonaws.services.kinesis.clientlibrary.types.ProcessRecordsInput;\n+import com.amazonaws.services.kinesis.clientlibrary.types.ShutdownInput;\n+import com.amazonaws.services.kinesis.model.Record;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.concurrent.LinkedBlockingQueue;\n+\n+@Slf4j\n+// This is a direct adaptation of the kinesis record processor for kcl v1; no dynamo-specific logic\n+public class StreamsRecordProcessor implements IRecordProcessor {\n+\n+    private final int numRetries;\n+    private final long checkpointInterval;\n+    private final long backoffTime;\n+\n+    private final LinkedBlockingQueue<StreamsRecord> queue;\n+    private long nextCheckpointTimeInNanos;\n+    private String kinesisShardId;\n+    \n+    public StreamsRecordProcessor(LinkedBlockingQueue<StreamsRecord> queue, DynamoDBSourceConfig config) {\n+        this.queue = queue;\n+        this.checkpointInterval = config.getCheckpointInterval();\n+        this.numRetries = config.getNumRetries();\n+        this.backoffTime = config.getBackoffTime();\n+    }\n+\n+    private void checkpoint(IRecordProcessorCheckpointer checkpointer) {\n+        log.info(\"Checkpointing shard \" + kinesisShardId);\n+        \n+        for (int i = 0; i < numRetries; i++) {\n+            try {\n+                checkpointer.checkpoint();\n+                break;\n+            } catch (ShutdownException se) {\n+                // Ignore checkpoint if the processor instance has been shutdown.\n+                log.info(\"Caught shutdown exception, skipping checkpoint.\", se);\n+                break;\n+            } catch (InvalidStateException e) {\n+                log.error(\"Cannot save checkpoint to the DynamoDB table.\", e);\n+                break;\n+            } catch (ThrottlingException | KinesisClientLibDependencyException e) {\n+                // Back off and re-attempt checkpoint upon transient failures\n+                if (i >= (numRetries - 1)) {\n+                    log.error(\"Checkpoint failed after \" + (i + 1) + \"attempts.\", e);\n+                    break;\n+                }\n+            }\n+\n+            try {\n+                Thread.sleep(backoffTime);\n+            } catch (InterruptedException e) {\n+                log.debug(\"Interrupted sleep\", e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void initialize(InitializationInput initializationInput) {\n+        kinesisShardId = initializationInput.getShardId();\n+    }\n+\n+    @Override\n+    public void processRecords(ProcessRecordsInput processRecordsInput) {\n+\n+        log.info(\"Processing \" + processRecordsInput.getRecords().size() + \" records from \" + kinesisShardId);", "originalCommit": "e1a9d05b727e5b1f90128c96e3919156a1e1a5e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1b4818b828ec430d900b7c10c619543fb459c13b", "url": "https://github.com/apache/pulsar/commit/1b4818b828ec430d900b7c10c619543fb459c13b", "message": "Address PR feedback", "committedDate": "2020-05-05T14:32:30Z", "type": "commit"}, {"oid": "39af5386c46606c2a7831c761a0412b832a8b292", "url": "https://github.com/apache/pulsar/commit/39af5386c46606c2a7831c761a0412b832a8b292", "message": "Update docs + distribution", "committedDate": "2020-05-05T15:01:03Z", "type": "commit"}, {"oid": "39af5386c46606c2a7831c761a0412b832a8b292", "url": "https://github.com/apache/pulsar/commit/39af5386c46606c2a7831c761a0412b832a8b292", "message": "Update docs + distribution", "committedDate": "2020-05-05T15:01:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY3NTM0MQ==", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r422675341", "bodyText": "This java comment can be removed or a meaningful description should be added.", "author": "vzhikserg", "createdAt": "2020-05-10T17:34:28Z", "path": "pulsar-io/dynamodb/src/main/java/org/apache/pulsar/io/dynamodb/DynamoDBSource.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.io.dynamodb;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static org.apache.commons.lang3.StringUtils.isNotBlank;\n+\n+import java.net.InetAddress;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.stream.Stream;\n+\n+import com.amazonaws.ClientConfiguration;\n+import com.amazonaws.services.dynamodbv2.AmazonDynamoDBStreams;\n+import com.amazonaws.services.dynamodbv2.streamsadapter.AmazonDynamoDBStreamsAdapterClient;\n+import com.amazonaws.services.dynamodbv2.streamsadapter.StreamsWorkerFactory;\n+import com.amazonaws.services.kinesis.clientlibrary.interfaces.v2.IRecordProcessorFactory;\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream;\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.KinesisClientLibConfiguration;\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.Worker;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.pulsar.io.aws.AbstractAwsConnector;\n+import org.apache.pulsar.io.aws.AwsCredentialProviderPlugin;\n+import org.apache.pulsar.io.core.Source;\n+import org.apache.pulsar.io.core.SourceContext;\n+import org.apache.pulsar.io.core.annotations.Connector;\n+import org.apache.pulsar.io.core.annotations.IOType;\n+\n+/**\n+ * ", "originalCommit": "39af5386c46606c2a7831c761a0412b832a8b292", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY3NzA2MA==", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r422677060", "bodyText": "These boilerplate getters can be generated by the Lombok annotation \u2014 @Getter", "author": "vzhikserg", "createdAt": "2020-05-10T17:48:41Z", "path": "pulsar-io/dynamodb/src/main/java/org/apache/pulsar/io/dynamodb/StreamsRecord.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.io.dynamodb;\n+\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.CharsetDecoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import com.amazonaws.services.dynamodbv2.streamsadapter.model.RecordAdapter;\n+import org.apache.pulsar.functions.api.Record;\n+import software.amazon.awssdk.utils.StringUtils;\n+\n+// This is a direct adaptation of the kinesis record for kcl v1; no dynamo-specific logic\n+public class StreamsRecord implements Record<byte[]> {\n+    \n+    public static final String ARRIVAL_TIMESTAMP = \"ARRIVAL_TIMESTAMP\";\n+    public static final String ENCRYPTION_TYPE = \"ENCRYPTION_TYPE\";\n+    public static final String PARTITION_KEY = \"PARTITION_KEY\";\n+    public static final String SEQUENCE_NUMBER = \"SEQUENCE_NUMBER\";\n+    public static final String EVENT_NAME = \"EVENT_NAME\";\n+\n+    private static final CharsetDecoder decoder = StandardCharsets.UTF_8.newDecoder();\n+    private final Optional<String> key;\n+    private final byte[] value;\n+    private final HashMap<String, String> userProperties = new HashMap<String, String> ();\n+    \n+    public StreamsRecord(com.amazonaws.services.kinesis.model.Record record) {\n+//        special-case the handling of dynamo records\n+        if (record instanceof RecordAdapter) {\n+            com.amazonaws.services.dynamodbv2.model.Record dynamoRecord = ((RecordAdapter) record).getInternalObject();\n+            this.key = Optional.of(dynamoRecord.getEventID());\n+            setProperty(EVENT_NAME, dynamoRecord.getEventName());\n+            setProperty(SEQUENCE_NUMBER, dynamoRecord.getDynamodb().getSequenceNumber());\n+        } else {\n+            this.key = Optional.of(record.getPartitionKey());\n+            setProperty(ARRIVAL_TIMESTAMP, record.getApproximateArrivalTimestamp().toString());\n+            setProperty(ENCRYPTION_TYPE, record.getEncryptionType());\n+            setProperty(PARTITION_KEY, record.getPartitionKey());\n+            setProperty(SEQUENCE_NUMBER, record.getSequenceNumber());\n+\n+        }\n+\n+        if (StringUtils.isBlank(record.getEncryptionType())) {\n+            String s = null;\n+            try {\n+                s = decoder.decode(record.getData()).toString();\n+            } catch (CharacterCodingException e) {\n+               // Ignore\n+            }\n+            this.value = (s != null) ? s.getBytes() : null;\n+        } else {\n+            // Who knows?\n+            this.value = null;\n+        }\n+    }\n+\n+    @Override\n+    public Optional<String> getKey() {", "originalCommit": "39af5386c46606c2a7831c761a0412b832a8b292", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY3NzIyNw==", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r422677227", "bodyText": "It can be converted to JavaDoc", "author": "vzhikserg", "createdAt": "2020-05-10T17:50:28Z", "path": "pulsar-io/dynamodb/src/main/java/org/apache/pulsar/io/dynamodb/StreamsRecord.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.io.dynamodb;\n+\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.CharsetDecoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import com.amazonaws.services.dynamodbv2.streamsadapter.model.RecordAdapter;\n+import org.apache.pulsar.functions.api.Record;\n+import software.amazon.awssdk.utils.StringUtils;\n+\n+// This is a direct adaptation of the kinesis record for kcl v1; no dynamo-specific logic", "originalCommit": "39af5386c46606c2a7831c761a0412b832a8b292", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY3NzYyNg==", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r422677626", "bodyText": "The recommendation for this project is to use separate import statements instead of *", "author": "vzhikserg", "createdAt": "2020-05-10T17:53:24Z", "path": "pulsar-io/dynamodb/src/main/java/org/apache/pulsar/io/dynamodb/DynamoDBSourceConfig.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.io.dynamodb;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.net.URI;\n+import java.util.Date;\n+import java.util.Map;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.cloudwatch.AmazonCloudWatch;\n+import com.amazonaws.services.cloudwatch.AmazonCloudWatchClientBuilder;\n+import com.amazonaws.services.dynamodbv2.*;", "originalCommit": "39af5386c46606c2a7831c761a0412b832a8b292", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY3ODA5Mg==", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r422678092", "bodyText": "I'm wondering how much logs it will produce \ud83e\udd14", "author": "vzhikserg", "createdAt": "2020-05-10T17:57:18Z", "path": "pulsar-io/dynamodb/src/main/java/org/apache/pulsar/io/dynamodb/StreamsRecordProcessor.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.io.dynamodb;\n+\n+import com.amazonaws.services.kinesis.clientlibrary.exceptions.InvalidStateException;\n+import com.amazonaws.services.kinesis.clientlibrary.exceptions.KinesisClientLibDependencyException;\n+import com.amazonaws.services.kinesis.clientlibrary.exceptions.ShutdownException;\n+import com.amazonaws.services.kinesis.clientlibrary.exceptions.ThrottlingException;\n+import com.amazonaws.services.kinesis.clientlibrary.interfaces.IRecordProcessorCheckpointer;\n+import com.amazonaws.services.kinesis.clientlibrary.interfaces.v2.IRecordProcessor;\n+import com.amazonaws.services.kinesis.clientlibrary.types.InitializationInput;\n+import com.amazonaws.services.kinesis.clientlibrary.types.ProcessRecordsInput;\n+import com.amazonaws.services.kinesis.clientlibrary.types.ShutdownInput;\n+import com.amazonaws.services.kinesis.model.Record;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.concurrent.LinkedBlockingQueue;\n+\n+@Slf4j\n+// This is a direct adaptation of the kinesis record processor for kcl v1; no dynamo-specific logic\n+public class StreamsRecordProcessor implements IRecordProcessor {\n+\n+    private final int numRetries;\n+    private final long checkpointInterval;\n+    private final long backoffTime;\n+\n+    private final LinkedBlockingQueue<StreamsRecord> queue;\n+    private long nextCheckpointTimeInNanos;\n+    private String kinesisShardId;\n+    \n+    public StreamsRecordProcessor(LinkedBlockingQueue<StreamsRecord> queue, DynamoDBSourceConfig config) {\n+        this.queue = queue;\n+        this.checkpointInterval = config.getCheckpointInterval();\n+        this.numRetries = config.getNumRetries();\n+        this.backoffTime = config.getBackoffTime();\n+    }\n+\n+    private void checkpoint(IRecordProcessorCheckpointer checkpointer) {\n+        log.info(\"Checkpointing shard \" + kinesisShardId);\n+        \n+        for (int i = 0; i < numRetries; i++) {\n+            try {\n+                checkpointer.checkpoint();\n+                break;\n+            } catch (ShutdownException se) {\n+                // Ignore checkpoint if the processor instance has been shutdown.\n+                log.info(\"Caught shutdown exception, skipping checkpoint.\", se);\n+                break;\n+            } catch (InvalidStateException e) {\n+                log.error(\"Cannot save checkpoint to the DynamoDB table.\", e);\n+                break;\n+            } catch (ThrottlingException | KinesisClientLibDependencyException e) {\n+                // Back off and re-attempt checkpoint upon transient failures\n+                if (i >= (numRetries - 1)) {\n+                    log.error(\"Checkpoint failed after \" + (i + 1) + \"attempts.\", e);\n+                    break;\n+                }\n+            }\n+\n+            try {\n+                Thread.sleep(backoffTime);\n+            } catch (InterruptedException e) {\n+                log.debug(\"Interrupted sleep\", e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void initialize(InitializationInput initializationInput) {\n+        kinesisShardId = initializationInput.getShardId();\n+    }\n+\n+    @Override\n+    public void processRecords(ProcessRecordsInput processRecordsInput) {\n+\n+        log.info(\"Processing {} records from {}\", processRecordsInput.getRecords().size(), kinesisShardId);", "originalCommit": "39af5386c46606c2a7831c761a0412b832a8b292", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE0MTAzNA==", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r423141034", "bodyText": "This is an info-level log in the kinesis source, but I've dropped it down to debug, since that probably makes more sense", "author": "maths22", "createdAt": "2020-05-11T15:52:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY3ODA5Mg=="}], "type": "inlineReview"}, {"oid": "f8fc5f42e3ccbb3d89cbc734ce6f05c6aaeb1859", "url": "https://github.com/apache/pulsar/commit/f8fc5f42e3ccbb3d89cbc734ce6f05c6aaeb1859", "message": "Respond to PR feedback", "committedDate": "2020-05-11T15:53:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNzA0Mw==", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r425407043", "bodyText": "This variable should be renamed to properties if they should be attached to the record. And the type can be changed to Map<String, String>", "author": "vzhikserg", "createdAt": "2020-05-14T20:21:10Z", "path": "pulsar-io/dynamodb/src/main/java/org/apache/pulsar/io/dynamodb/StreamsRecord.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.io.dynamodb;\n+\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.CharsetDecoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import com.amazonaws.services.dynamodbv2.streamsadapter.model.RecordAdapter;\n+import lombok.Getter;\n+import org.apache.pulsar.functions.api.Record;\n+import software.amazon.awssdk.utils.StringUtils;\n+\n+/**\n+ *  This is a direct adaptation of the kinesis record for kcl v1,\n+ *  with a little branching added for dynamo-specific logic.\n+ */\n+\n+public class StreamsRecord implements Record<byte[]> {\n+    \n+    public static final String ARRIVAL_TIMESTAMP = \"ARRIVAL_TIMESTAMP\";\n+    public static final String ENCRYPTION_TYPE = \"ENCRYPTION_TYPE\";\n+    public static final String PARTITION_KEY = \"PARTITION_KEY\";\n+    public static final String SEQUENCE_NUMBER = \"SEQUENCE_NUMBER\";\n+    public static final String EVENT_NAME = \"EVENT_NAME\";\n+\n+    private static final CharsetDecoder decoder = StandardCharsets.UTF_8.newDecoder();\n+    @Getter\n+    private final Optional<String> key;\n+    @Getter\n+    private final byte[] value;\n+    @Getter\n+    private final HashMap<String, String> userProperties = new HashMap<String, String> ();", "originalCommit": "f8fc5f42e3ccbb3d89cbc734ce6f05c6aaeb1859", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNzUyNw==", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r425407527", "bodyText": "It should be fine to put only one @Getter for the class instead of adding them to every field", "author": "vzhikserg", "createdAt": "2020-05-14T20:22:11Z", "path": "pulsar-io/dynamodb/src/main/java/org/apache/pulsar/io/dynamodb/StreamsRecord.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.io.dynamodb;\n+\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.CharsetDecoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import com.amazonaws.services.dynamodbv2.streamsadapter.model.RecordAdapter;\n+import lombok.Getter;\n+import org.apache.pulsar.functions.api.Record;\n+import software.amazon.awssdk.utils.StringUtils;\n+\n+/**\n+ *  This is a direct adaptation of the kinesis record for kcl v1,\n+ *  with a little branching added for dynamo-specific logic.\n+ */\n+\n+public class StreamsRecord implements Record<byte[]> {\n+    \n+    public static final String ARRIVAL_TIMESTAMP = \"ARRIVAL_TIMESTAMP\";\n+    public static final String ENCRYPTION_TYPE = \"ENCRYPTION_TYPE\";\n+    public static final String PARTITION_KEY = \"PARTITION_KEY\";\n+    public static final String SEQUENCE_NUMBER = \"SEQUENCE_NUMBER\";\n+    public static final String EVENT_NAME = \"EVENT_NAME\";\n+\n+    private static final CharsetDecoder decoder = StandardCharsets.UTF_8.newDecoder();\n+    @Getter", "originalCommit": "f8fc5f42e3ccbb3d89cbc734ce6f05c6aaeb1859", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2d81f57374b90512e0060d180af2fe2a324d2a8e", "url": "https://github.com/apache/pulsar/commit/2d81f57374b90512e0060d180af2fe2a324d2a8e", "message": "Restore kinesis cred plugins for BC", "committedDate": "2020-05-18T14:51:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzMjUxMg==", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r426932512", "bodyText": "Just out of curiosity, what was changed here?", "author": "sijie", "createdAt": "2020-05-18T22:46:49Z", "path": "pulsar-io/aws/src/main/java/org/apache/pulsar/io/aws/AbstractAwsConnector.java", "diffHunk": "@@ -79,16 +77,19 @@ public static AwsCredentialProviderPlugin createCredentialProviderWithPlugin(Str\n      * @param awsCredentialPluginParam\n      * @return\n      */\n-    protected AwsCredentialProviderPlugin defaultCredentialProvider(String awsCredentialPluginParam) {\n+    public AwsCredentialProviderPlugin defaultCredentialProvider(String awsCredentialPluginParam) {\n         Map<String, String> credentialMap = new Gson().fromJson(awsCredentialPluginParam,\n                 new TypeToken<Map<String, String>>() {\n                 }.getType());\n         String accessKey = credentialMap.get(ACCESS_KEY_NAME);\n         String secretKey = credentialMap.get(SECRET_KEY_NAME);\n-        checkArgument(isNotBlank(accessKey) && isNotBlank(secretKey),\n-                String.format(\n-                        \"Default %s and %s must be present into json-map if AwsCredentialProviderPlugin not provided\",\n-                        ACCESS_KEY_NAME, SECRET_KEY_NAME));\n+        if (!(StringUtils.isNotBlank(accessKey) && StringUtils.isNotBlank(secretKey))) {", "originalCommit": "2d81f57374b90512e0060d180af2fe2a324d2a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}