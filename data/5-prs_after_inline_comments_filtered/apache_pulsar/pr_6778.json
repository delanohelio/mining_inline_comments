{"pr_number": 6778, "pr_title": "Ensure that all dangling consumers are cleaned up during failures", "pr_createdAt": "2020-04-20T16:00:27Z", "pr_url": "https://github.com/apache/pulsar/pull/6778", "timeline": [{"oid": "c454d6287e631b446da85c3ad8629b06a3a555c6", "url": "https://github.com/apache/pulsar/commit/c454d6287e631b446da85c3ad8629b06a3a555c6", "message": "Ensure that all dangling consumers are cleaned up during failures", "committedDate": "2020-04-20T15:58:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwNjE3MA==", "url": "https://github.com/apache/pulsar/pull/6778#discussion_r411506170", "bodyText": "The assignment is not needed, the builder would update in-place", "author": "merlimat", "createdAt": "2020-04-20T16:11:31Z", "path": "pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/source/PulsarSource.java", "diffHunk": "@@ -80,17 +80,17 @@ public void open(Map<String, Object> config, SourceContext sourceContext) throws\n                     .messageListener(this);\n \n             if (conf.isRegexPattern) {\n-                cb.topicsPattern(topic);\n+                cb = cb.topicsPattern(topic);", "originalCommit": "c454d6287e631b446da85c3ad8629b06a3a555c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwMjk2Mw==", "url": "https://github.com/apache/pulsar/pull/6778#discussion_r411602963", "bodyText": "This is needed for test, since otherwise the mock would return null", "author": "srkukarni", "createdAt": "2020-04-20T18:37:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwNjE3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwNzIzOQ==", "url": "https://github.com/apache/pulsar/pull/6778#discussion_r411507239", "bodyText": "This could be simplified into:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Consumer<T> consumer = cb.subscribeAsync().join();\n          \n          \n            \n                        Consumer<T> consumer = cb.subscribe();\n          \n      \n    \n    \n  \n\nIn any case, I think we should be catching any exception thrown over the loop and close down all the consumers that were already created and added to the list.", "author": "merlimat", "createdAt": "2020-04-20T16:12:58Z", "path": "pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/source/PulsarSource.java", "diffHunk": "@@ -99,11 +99,12 @@ public void open(Map<String, Object> config, SourceContext sourceContext) throws\n                 if (pulsarSourceConfig.getDeadLetterTopic() != null && !pulsarSourceConfig.getDeadLetterTopic().isEmpty()) {\n                     deadLetterPolicyBuilder.deadLetterTopic(pulsarSourceConfig.getDeadLetterTopic());\n                 }\n-                cb.deadLetterPolicy(deadLetterPolicyBuilder.build());\n+                cb = cb.deadLetterPolicy(deadLetterPolicyBuilder.build());\n             }\n \n-            return cb.subscribeAsync();\n-        }).collect(Collectors.toList()).stream().map(CompletableFuture::join).collect(Collectors.toList());\n+            Consumer<T> consumer = cb.subscribeAsync().join();", "originalCommit": "c454d6287e631b446da85c3ad8629b06a3a555c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwMzczMQ==", "url": "https://github.com/apache/pulsar/pull/6778#discussion_r411603731", "bodyText": "The current philosophy is that all cleaning up logic is inside the close which will get called as soon as there is an error. Shouldn't that suffice?", "author": "srkukarni", "createdAt": "2020-04-20T18:38:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwNzIzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU5OTgzOA==", "url": "https://github.com/apache/pulsar/pull/6778#discussion_r412599838", "bodyText": "The client close? What wouldn't work when running in the thread mode, since the PulsarClient is shared.", "author": "merlimat", "createdAt": "2020-04-22T01:21:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwNzIzOQ=="}], "type": "inlineReview"}]}