{"pr_number": 7180, "pr_title": "FunctionAssignmentTailer should use its own thread", "pr_createdAt": "2020-06-05T06:54:17Z", "pr_url": "https://github.com/apache/pulsar/pull/7180", "timeline": [{"oid": "12e009a17e34e62eee65ff93ad952aeace8ad262", "url": "https://github.com/apache/pulsar/commit/12e009a17e34e62eee65ff93ad952aeace8ad262", "message": "FunctionAssignmentTailer should use its own thread", "committedDate": "2020-06-05T06:50:08Z", "type": "commit"}, {"oid": "a1e3c78a0c63c6cc3a0ae564a503a237b7d87c54", "url": "https://github.com/apache/pulsar/commit/a1e3c78a0c63c6cc3a0ae564a503a237b7d87c54", "message": "cleaning up", "committedDate": "2020-06-05T06:53:40Z", "type": "commit"}, {"oid": "dccf0f8773c203a0c7624ad670e327aacae1cf1b", "url": "https://github.com/apache/pulsar/commit/dccf0f8773c203a0c7624ad670e327aacae1cf1b", "message": "renaming varible", "committedDate": "2020-06-05T06:55:30Z", "type": "commit"}, {"oid": "58a424a7aaae09b5481e05e3bcf2b76332ba244b", "url": "https://github.com/apache/pulsar/commit/58a424a7aaae09b5481e05e3bcf2b76332ba244b", "message": "cleaning up", "committedDate": "2020-06-05T06:56:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTczOTgzOA==", "url": "https://github.com/apache/pulsar/pull/7180#discussion_r435739838", "bodyText": "reader is still not closed here", "author": "srkukarni", "createdAt": "2020-06-05T07:31:57Z", "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionAssignmentTailer.java", "diffHunk": "@@ -18,56 +18,90 @@\n  */\n package org.apache.pulsar.functions.worker;\n \n-import java.io.IOException;\n-import java.util.function.Function;\n-\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n import org.apache.pulsar.client.api.Message;\n-import org.apache.pulsar.client.api.PulsarClientException.AlreadyClosedException;\n+import org.apache.pulsar.client.api.MessageId;\n+import org.apache.pulsar.client.api.PulsarClientException;\n import org.apache.pulsar.client.api.Reader;\n-import org.apache.pulsar.common.util.FutureUtil;\n+import org.apache.pulsar.client.api.ReaderBuilder;\n import org.apache.pulsar.functions.proto.Function.Assignment;\n \n-import lombok.extern.slf4j.Slf4j;\n+import java.io.IOException;\n \n @Slf4j\n-public class FunctionAssignmentTailer\n-    implements java.util.function.Consumer<Message<byte[]>>, Function<Throwable, Void>, AutoCloseable {\n+public class FunctionAssignmentTailer implements AutoCloseable {\n \n     private final FunctionRuntimeManager functionRuntimeManager;\n+    @Getter\n     private final Reader<byte[]> reader;\n-    private boolean closed = false;\n+    private volatile boolean isRunning = false;\n \n-    public FunctionAssignmentTailer(FunctionRuntimeManager functionRuntimeManager, Reader<byte[]> reader) {\n+    private final Thread tailerThread;\n+    \n+    public FunctionAssignmentTailer(FunctionRuntimeManager functionRuntimeManager, ReaderBuilder readerBuilder, WorkerConfig workerConfig) throws PulsarClientException {\n         this.functionRuntimeManager = functionRuntimeManager;\n-        this.reader = reader;\n-    }\n+        \n+        this.reader = readerBuilder\n+          .subscriptionRolePrefix(workerConfig.getWorkerId() + \"-function-runtime-manager\")\n+          .readerName(workerConfig.getWorkerId() + \"-function-runtime-manager\")\n+          .topic(workerConfig.getFunctionAssignmentTopic())\n+          .readCompacted(true)\n+          .startMessageId(MessageId.earliest)\n+          .create();\n \n-    public void start() {\n-        receiveOne();\n+        this.tailerThread = new Thread(() -> {\n+            while(true) {\n+                try {\n+                    while(isRunning) {\n+                        Message<byte[]> msg = reader.readNext();\n+                        processAssignment(msg);\n+                    }\n+                } catch (Exception e) {\n+                    if (isRunning) {\n+                        log.error(\"Encountered error in assignment tailer\", e);\n+\n+                        // trigger fatal error\n+                        // TODO add mechanism to notify main thread\n+                    } else {\n+                        if (!(e instanceof InterruptedException)) {\n+                            log.warn(\"Encountered error when assignment tailer is not running\", e);\n+                        }\n+                    }\n+\n+                }\n+            }\n+        });\n+        this.tailerThread.setName(\"assignment-tailer-thread\");\n     }\n \n-    private void receiveOne() {\n-        reader.readNextAsync()\n-                .thenAccept(this)\n-                .exceptionally(this);\n+    public void start() {\n+        isRunning = true;\n+        tailerThread.start();\n     }\n \n     @Override\n     public void close() {\n-        if (closed) {\n+        if (!isRunning) {", "originalCommit": "58a424a7aaae09b5481e05e3bcf2b76332ba244b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc0MDUxNQ==", "url": "https://github.com/apache/pulsar/pull/7180#discussion_r435740515", "bodyText": "probably should wait as well?", "author": "srkukarni", "createdAt": "2020-06-05T07:33:19Z", "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionAssignmentTailer.java", "diffHunk": "@@ -18,56 +18,90 @@\n  */\n package org.apache.pulsar.functions.worker;\n \n-import java.io.IOException;\n-import java.util.function.Function;\n-\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n import org.apache.pulsar.client.api.Message;\n-import org.apache.pulsar.client.api.PulsarClientException.AlreadyClosedException;\n+import org.apache.pulsar.client.api.MessageId;\n+import org.apache.pulsar.client.api.PulsarClientException;\n import org.apache.pulsar.client.api.Reader;\n-import org.apache.pulsar.common.util.FutureUtil;\n+import org.apache.pulsar.client.api.ReaderBuilder;\n import org.apache.pulsar.functions.proto.Function.Assignment;\n \n-import lombok.extern.slf4j.Slf4j;\n+import java.io.IOException;\n \n @Slf4j\n-public class FunctionAssignmentTailer\n-    implements java.util.function.Consumer<Message<byte[]>>, Function<Throwable, Void>, AutoCloseable {\n+public class FunctionAssignmentTailer implements AutoCloseable {\n \n     private final FunctionRuntimeManager functionRuntimeManager;\n+    @Getter\n     private final Reader<byte[]> reader;\n-    private boolean closed = false;\n+    private volatile boolean isRunning = false;\n \n-    public FunctionAssignmentTailer(FunctionRuntimeManager functionRuntimeManager, Reader<byte[]> reader) {\n+    private final Thread tailerThread;\n+    \n+    public FunctionAssignmentTailer(FunctionRuntimeManager functionRuntimeManager, ReaderBuilder readerBuilder, WorkerConfig workerConfig) throws PulsarClientException {\n         this.functionRuntimeManager = functionRuntimeManager;\n-        this.reader = reader;\n-    }\n+        \n+        this.reader = readerBuilder\n+          .subscriptionRolePrefix(workerConfig.getWorkerId() + \"-function-runtime-manager\")\n+          .readerName(workerConfig.getWorkerId() + \"-function-runtime-manager\")\n+          .topic(workerConfig.getFunctionAssignmentTopic())\n+          .readCompacted(true)\n+          .startMessageId(MessageId.earliest)\n+          .create();\n \n-    public void start() {\n-        receiveOne();\n+        this.tailerThread = new Thread(() -> {\n+            while(true) {\n+                try {\n+                    while(isRunning) {\n+                        Message<byte[]> msg = reader.readNext();\n+                        processAssignment(msg);\n+                    }\n+                } catch (Exception e) {\n+                    if (isRunning) {\n+                        log.error(\"Encountered error in assignment tailer\", e);\n+\n+                        // trigger fatal error\n+                        // TODO add mechanism to notify main thread\n+                    } else {\n+                        if (!(e instanceof InterruptedException)) {\n+                            log.warn(\"Encountered error when assignment tailer is not running\", e);\n+                        }\n+                    }\n+\n+                }\n+            }\n+        });\n+        this.tailerThread.setName(\"assignment-tailer-thread\");\n     }\n \n-    private void receiveOne() {\n-        reader.readNextAsync()\n-                .thenAccept(this)\n-                .exceptionally(this);\n+    public void start() {\n+        isRunning = true;\n+        tailerThread.start();\n     }\n \n     @Override\n     public void close() {\n-        if (closed) {\n+        if (!isRunning) {\n             return;\n         }\n-        log.info(\"Stopping function state consumer\");\n+        log.info(\"Stopping function assignment tailer\");\n         try {\n-            closed = true;\n-            reader.close();\n+            isRunning = false;\n+            if (tailerThread != null && tailerThread.isAlive()) {\n+                tailerThread.interrupt();", "originalCommit": "58a424a7aaae09b5481e05e3bcf2b76332ba244b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA0OTg4Ng==", "url": "https://github.com/apache/pulsar/pull/7180#discussion_r436049886", "bodyText": "we shouldn't need to", "author": "jerrypeng", "createdAt": "2020-06-05T17:05:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc0MDUxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA1MjA4Mw==", "url": "https://github.com/apache/pulsar/pull/7180#discussion_r436052083", "bodyText": "Should we just do\nisRunning = false;\nif (thread is alive) { interrupt(); }\nreader.close();\nmuch simpler", "author": "srkukarni", "createdAt": "2020-06-05T17:09:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc0MDUxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3MTYzOQ==", "url": "https://github.com/apache/pulsar/pull/7180#discussion_r436071639", "bodyText": "sure", "author": "jerrypeng", "createdAt": "2020-06-05T17:47:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc0MDUxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc0MTk5Mg==", "url": "https://github.com/apache/pulsar/pull/7180#discussion_r435741992", "bodyText": "instead of two while loop, maybe you can do\nwhile(isRunning) {\ntry { readNext(); processAssignment(); } catch (Exeepton e) { see what kind of exception", "author": "srkukarni", "createdAt": "2020-06-05T07:36:32Z", "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionAssignmentTailer.java", "diffHunk": "@@ -18,56 +18,90 @@\n  */\n package org.apache.pulsar.functions.worker;\n \n-import java.io.IOException;\n-import java.util.function.Function;\n-\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n import org.apache.pulsar.client.api.Message;\n-import org.apache.pulsar.client.api.PulsarClientException.AlreadyClosedException;\n+import org.apache.pulsar.client.api.MessageId;\n+import org.apache.pulsar.client.api.PulsarClientException;\n import org.apache.pulsar.client.api.Reader;\n-import org.apache.pulsar.common.util.FutureUtil;\n+import org.apache.pulsar.client.api.ReaderBuilder;\n import org.apache.pulsar.functions.proto.Function.Assignment;\n \n-import lombok.extern.slf4j.Slf4j;\n+import java.io.IOException;\n \n @Slf4j\n-public class FunctionAssignmentTailer\n-    implements java.util.function.Consumer<Message<byte[]>>, Function<Throwable, Void>, AutoCloseable {\n+public class FunctionAssignmentTailer implements AutoCloseable {\n \n     private final FunctionRuntimeManager functionRuntimeManager;\n+    @Getter\n     private final Reader<byte[]> reader;\n-    private boolean closed = false;\n+    private volatile boolean isRunning = false;\n \n-    public FunctionAssignmentTailer(FunctionRuntimeManager functionRuntimeManager, Reader<byte[]> reader) {\n+    private final Thread tailerThread;\n+    \n+    public FunctionAssignmentTailer(FunctionRuntimeManager functionRuntimeManager, ReaderBuilder readerBuilder, WorkerConfig workerConfig) throws PulsarClientException {\n         this.functionRuntimeManager = functionRuntimeManager;\n-        this.reader = reader;\n-    }\n+        \n+        this.reader = readerBuilder\n+          .subscriptionRolePrefix(workerConfig.getWorkerId() + \"-function-runtime-manager\")\n+          .readerName(workerConfig.getWorkerId() + \"-function-runtime-manager\")\n+          .topic(workerConfig.getFunctionAssignmentTopic())\n+          .readCompacted(true)\n+          .startMessageId(MessageId.earliest)\n+          .create();\n \n-    public void start() {\n-        receiveOne();\n+        this.tailerThread = new Thread(() -> {\n+            while(true) {", "originalCommit": "58a424a7aaae09b5481e05e3bcf2b76332ba244b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA0ODU2OQ==", "url": "https://github.com/apache/pulsar/pull/7180#discussion_r436048569", "bodyText": "ya there shouldn't be two while loops", "author": "jerrypeng", "createdAt": "2020-06-05T17:02:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc0MTk5Mg=="}], "type": "inlineReview"}, {"oid": "7fc6eec2a5e1258bf4e91c1525f41425c18dca8c", "url": "https://github.com/apache/pulsar/commit/7fc6eec2a5e1258bf4e91c1525f41425c18dca8c", "message": "addressing comments", "committedDate": "2020-06-05T17:05:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA1MjMxNw==", "url": "https://github.com/apache/pulsar/pull/7180#discussion_r436052317", "bodyText": "instead of isRunning, better to word it as stopRunning", "author": "srkukarni", "createdAt": "2020-06-05T17:10:10Z", "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionAssignmentTailer.java", "diffHunk": "@@ -18,56 +18,91 @@\n  */\n package org.apache.pulsar.functions.worker;\n \n-import java.io.IOException;\n-import java.util.function.Function;\n-\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n import org.apache.pulsar.client.api.Message;\n-import org.apache.pulsar.client.api.PulsarClientException.AlreadyClosedException;\n+import org.apache.pulsar.client.api.MessageId;\n+import org.apache.pulsar.client.api.PulsarClientException;\n import org.apache.pulsar.client.api.Reader;\n-import org.apache.pulsar.common.util.FutureUtil;\n+import org.apache.pulsar.client.api.ReaderBuilder;\n import org.apache.pulsar.functions.proto.Function.Assignment;\n \n-import lombok.extern.slf4j.Slf4j;\n+import java.io.IOException;\n \n @Slf4j\n-public class FunctionAssignmentTailer\n-    implements java.util.function.Consumer<Message<byte[]>>, Function<Throwable, Void>, AutoCloseable {\n+public class FunctionAssignmentTailer implements AutoCloseable {\n \n     private final FunctionRuntimeManager functionRuntimeManager;\n+    @Getter\n     private final Reader<byte[]> reader;\n-    private boolean closed = false;\n+    private volatile boolean isRunning = false;", "originalCommit": "7fc6eec2a5e1258bf4e91c1525f41425c18dca8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3MDM0NQ==", "url": "https://github.com/apache/pulsar/pull/7180#discussion_r436070345", "bodyText": "why do we need to change it?  We would also need to reverse the boolean logic checks to be semantically correct?", "author": "jerrypeng", "createdAt": "2020-06-05T17:45:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA1MjMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3NzQxNQ==", "url": "https://github.com/apache/pulsar/pull/7180#discussion_r436077415", "bodyText": "Yes. isRunning implies that its a state. stopRunning implies its a command.\nWhat we really have here is that the thread should keep running until its commanded by the main thread to stop. Hence the stopRunning instead of isRunning", "author": "srkukarni", "createdAt": "2020-06-05T17:58:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA1MjMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjExODE2MQ==", "url": "https://github.com/apache/pulsar/pull/7180#discussion_r436118161", "bodyText": "But we also have a method called \"start\"?", "author": "jerrypeng", "createdAt": "2020-06-05T19:20:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA1MjMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE1NjYwNQ==", "url": "https://github.com/apache/pulsar/pull/7180#discussion_r436156605", "bodyText": "At start() {\nshouldStop = false;\ncreate the thread and start\n}\nAt close() {\nset shoutStop = true, interrupt thread, join and then set it to null;\nclose reader and set it to null\n}\nThis way I can do start() /close() multiple times", "author": "srkukarni", "createdAt": "2020-06-05T20:46:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA1MjMxNw=="}], "type": "inlineReview"}, {"oid": "48c401c26ab8051f92f70c8e4df4ae48b9e36612", "url": "https://github.com/apache/pulsar/commit/48c401c26ab8051f92f70c8e4df4ae48b9e36612", "message": "addressing comments", "committedDate": "2020-06-05T17:47:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3ODA0Ng==", "url": "https://github.com/apache/pulsar/pull/7180#discussion_r436078046", "bodyText": "should make it null here.", "author": "srkukarni", "createdAt": "2020-06-05T17:59:57Z", "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionAssignmentTailer.java", "diffHunk": "@@ -18,56 +18,85 @@\n  */\n package org.apache.pulsar.functions.worker;\n \n-import java.io.IOException;\n-import java.util.function.Function;\n-\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n import org.apache.pulsar.client.api.Message;\n-import org.apache.pulsar.client.api.PulsarClientException.AlreadyClosedException;\n+import org.apache.pulsar.client.api.MessageId;\n+import org.apache.pulsar.client.api.PulsarClientException;\n import org.apache.pulsar.client.api.Reader;\n-import org.apache.pulsar.common.util.FutureUtil;\n+import org.apache.pulsar.client.api.ReaderBuilder;\n import org.apache.pulsar.functions.proto.Function.Assignment;\n \n-import lombok.extern.slf4j.Slf4j;\n+import java.io.IOException;\n \n @Slf4j\n-public class FunctionAssignmentTailer\n-    implements java.util.function.Consumer<Message<byte[]>>, Function<Throwable, Void>, AutoCloseable {\n+public class FunctionAssignmentTailer implements AutoCloseable {\n \n     private final FunctionRuntimeManager functionRuntimeManager;\n+    @Getter\n     private final Reader<byte[]> reader;\n-    private boolean closed = false;\n+    private volatile boolean isRunning = false;\n \n-    public FunctionAssignmentTailer(FunctionRuntimeManager functionRuntimeManager, Reader<byte[]> reader) {\n+    private final Thread tailerThread;\n+    \n+    public FunctionAssignmentTailer(FunctionRuntimeManager functionRuntimeManager, ReaderBuilder readerBuilder, WorkerConfig workerConfig) throws PulsarClientException {\n         this.functionRuntimeManager = functionRuntimeManager;\n-        this.reader = reader;\n-    }\n+        \n+        this.reader = readerBuilder\n+          .subscriptionRolePrefix(workerConfig.getWorkerId() + \"-function-runtime-manager\")\n+          .readerName(workerConfig.getWorkerId() + \"-function-runtime-manager\")\n+          .topic(workerConfig.getFunctionAssignmentTopic())\n+          .readCompacted(true)\n+          .startMessageId(MessageId.earliest)\n+          .create();\n \n-    public void start() {\n-        receiveOne();\n+        this.tailerThread = new Thread(() -> {\n+            while(isRunning) {\n+                try {\n+                    Message<byte[]> msg = reader.readNext();\n+                    processAssignment(msg);\n+                } catch (Exception e) {\n+                    if (isRunning) {\n+                        log.error(\"Encountered error in assignment tailer\", e);\n+\n+                        // trigger fatal error\n+                        // TODO add mechanism to notify main thread\n+                    } else {\n+                        if (!(e instanceof InterruptedException)) {\n+                            log.warn(\"Encountered error when assignment tailer is not running\", e);\n+                        }\n+                    }\n+\n+                }\n+            }\n+        });\n+        this.tailerThread.setName(\"assignment-tailer-thread\");\n     }\n \n-    private void receiveOne() {\n-        reader.readNextAsync()\n-                .thenAccept(this)\n-                .exceptionally(this);\n+    public void start() {\n+        isRunning = true;\n+        tailerThread.start();\n     }\n \n     @Override\n     public void close() {\n-        if (closed) {\n-            return;\n-        }\n-        log.info(\"Stopping function state consumer\");\n+        log.info(\"Stopping function assignment tailer\");\n         try {\n-            closed = true;\n-            reader.close();\n+            isRunning = false;\n+            if (tailerThread != null && tailerThread.isAlive()) {\n+                tailerThread.interrupt();\n+            }\n+            if (reader != null) {\n+                reader.close();", "originalCommit": "48c401c26ab8051f92f70c8e4df4ae48b9e36612", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3ODUyMA==", "url": "https://github.com/apache/pulsar/pull/7180#discussion_r436078520", "bodyText": "also one benefit of doing a join here would be that once the thread is done, we can make it null again.\nThis way we could actually do a start/close multiple times.", "author": "srkukarni", "createdAt": "2020-06-05T18:00:55Z", "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionAssignmentTailer.java", "diffHunk": "@@ -18,56 +18,85 @@\n  */\n package org.apache.pulsar.functions.worker;\n \n-import java.io.IOException;\n-import java.util.function.Function;\n-\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n import org.apache.pulsar.client.api.Message;\n-import org.apache.pulsar.client.api.PulsarClientException.AlreadyClosedException;\n+import org.apache.pulsar.client.api.MessageId;\n+import org.apache.pulsar.client.api.PulsarClientException;\n import org.apache.pulsar.client.api.Reader;\n-import org.apache.pulsar.common.util.FutureUtil;\n+import org.apache.pulsar.client.api.ReaderBuilder;\n import org.apache.pulsar.functions.proto.Function.Assignment;\n \n-import lombok.extern.slf4j.Slf4j;\n+import java.io.IOException;\n \n @Slf4j\n-public class FunctionAssignmentTailer\n-    implements java.util.function.Consumer<Message<byte[]>>, Function<Throwable, Void>, AutoCloseable {\n+public class FunctionAssignmentTailer implements AutoCloseable {\n \n     private final FunctionRuntimeManager functionRuntimeManager;\n+    @Getter\n     private final Reader<byte[]> reader;\n-    private boolean closed = false;\n+    private volatile boolean isRunning = false;\n \n-    public FunctionAssignmentTailer(FunctionRuntimeManager functionRuntimeManager, Reader<byte[]> reader) {\n+    private final Thread tailerThread;\n+    \n+    public FunctionAssignmentTailer(FunctionRuntimeManager functionRuntimeManager, ReaderBuilder readerBuilder, WorkerConfig workerConfig) throws PulsarClientException {\n         this.functionRuntimeManager = functionRuntimeManager;\n-        this.reader = reader;\n-    }\n+        \n+        this.reader = readerBuilder\n+          .subscriptionRolePrefix(workerConfig.getWorkerId() + \"-function-runtime-manager\")\n+          .readerName(workerConfig.getWorkerId() + \"-function-runtime-manager\")\n+          .topic(workerConfig.getFunctionAssignmentTopic())\n+          .readCompacted(true)\n+          .startMessageId(MessageId.earliest)\n+          .create();\n \n-    public void start() {\n-        receiveOne();\n+        this.tailerThread = new Thread(() -> {\n+            while(isRunning) {\n+                try {\n+                    Message<byte[]> msg = reader.readNext();\n+                    processAssignment(msg);\n+                } catch (Exception e) {\n+                    if (isRunning) {\n+                        log.error(\"Encountered error in assignment tailer\", e);\n+\n+                        // trigger fatal error\n+                        // TODO add mechanism to notify main thread\n+                    } else {\n+                        if (!(e instanceof InterruptedException)) {\n+                            log.warn(\"Encountered error when assignment tailer is not running\", e);\n+                        }\n+                    }\n+\n+                }\n+            }\n+        });\n+        this.tailerThread.setName(\"assignment-tailer-thread\");\n     }\n \n-    private void receiveOne() {\n-        reader.readNextAsync()\n-                .thenAccept(this)\n-                .exceptionally(this);\n+    public void start() {\n+        isRunning = true;\n+        tailerThread.start();\n     }\n \n     @Override\n     public void close() {\n-        if (closed) {\n-            return;\n-        }\n-        log.info(\"Stopping function state consumer\");\n+        log.info(\"Stopping function assignment tailer\");\n         try {\n-            closed = true;\n-            reader.close();\n+            isRunning = false;\n+            if (tailerThread != null && tailerThread.isAlive()) {\n+                tailerThread.interrupt();\n+            }\n+            if (reader != null) {\n+                reader.close();\n+            }", "originalCommit": "48c401c26ab8051f92f70c8e4df4ae48b9e36612", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEyMTE4Mw==", "url": "https://github.com/apache/pulsar/pull/7180#discussion_r436121183", "bodyText": "Is there a use case for that right now?", "author": "jerrypeng", "createdAt": "2020-06-05T19:27:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3ODUyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEyNDczMw==", "url": "https://github.com/apache/pulsar/pull/7180#discussion_r436124733", "bodyText": "Doing this right now makes the code more complicated since the reader needs to be used in FuntcionRuntimeManager", "author": "jerrypeng", "createdAt": "2020-06-05T19:36:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3ODUyMA=="}], "type": "inlineReview"}, {"oid": "42fcd93be434f937445f398a1463e5d0891bb45c", "url": "https://github.com/apache/pulsar/commit/42fcd93be434f937445f398a1463e5d0891bb45c", "message": "fix unit test", "committedDate": "2020-06-05T21:57:22Z", "type": "commit"}]}