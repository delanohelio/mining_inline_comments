{"pr_number": 12036, "pr_title": "[FLINK-17537][connectors / jdbc] Refactor flink-jdbc connector structure", "pr_createdAt": "2020-05-08T10:12:51Z", "pr_url": "https://github.com/apache/flink/pull/12036", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA5MDk2NA==", "url": "https://github.com/apache/flink/pull/12036#discussion_r422090964", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class GenericParameterValuesProvider extends JdbcGenericParameterValuesProvider implements ParameterValuesProvider{\n          \n          \n            \n            public class GenericParameterValuesProvider extends JdbcGenericParameterValuesProvider implements ParameterValuesProvider {", "author": "wuchong", "createdAt": "2020-05-08T11:27:28Z", "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/api/java/io/jdbc/split/GenericParameterValuesProvider.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.api.java.io.jdbc.split;\n+\n+import org.apache.flink.api.java.io.jdbc.JDBCInputFormat;\n+import org.apache.flink.connector.jdbc.split.JdbcGenericParameterValuesProvider;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * This splits generator actually does nothing but wrapping the query parameters\n+ * computed by the user before creating the {@link JDBCInputFormat} instance.\n+ *\n+ * @deprecated Please use {@link JdbcGenericParameterValuesProvider}.\n+ */\n+@Deprecated\n+public class GenericParameterValuesProvider extends JdbcGenericParameterValuesProvider implements ParameterValuesProvider{", "originalCommit": "173ded87a6bbdc639582e62245de653ce562e0ef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA5MTQwMA==", "url": "https://github.com/apache/flink/pull/12036#discussion_r422091400", "bodyText": "remove this line.", "author": "wuchong", "createdAt": "2020-05-08T11:28:42Z", "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/api/java/io/jdbc/split/ParameterValuesProvider.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.api.java.io.jdbc.split;\n+\n+import org.apache.flink.api.java.io.jdbc.JDBCInputFormat;\n+import org.apache.flink.connector.jdbc.split.JdbcParameterValuesProvider;\n+\n+/**\n+ * This interface is used by the {@link JDBCInputFormat} to compute the list of parallel query to run (i.e. splits).\n+ * Each query will be parameterized using a row of the matrix provided by each {@link ParameterValuesProvider}\n+ * implementation.\n+ *\n+ * @deprecated Please use {@link JdbcParameterValuesProvider}.\n+ * Flink proposes class name start with \"Jdbc\" rather than \"JDBC\".", "originalCommit": "173ded87a6bbdc639582e62245de653ce562e0ef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA5MTgyNQ==", "url": "https://github.com/apache/flink/pull/12036#discussion_r422091825", "bodyText": "You can keep the original class Javadoc here.", "author": "wuchong", "createdAt": "2020-05-08T11:29:47Z", "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/api/java/io/jdbc/JDBCInputFormat.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.api.java.io.jdbc;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.api.java.typeutils.RowTypeInfo;\n+import org.apache.flink.connector.jdbc.JdbcInputFormat;\n+import org.apache.flink.connector.jdbc.source.row.converter.JdbcRowConverter;\n+import org.apache.flink.connector.jdbc.split.JdbcParameterValuesProvider;\n+import org.apache.flink.util.Preconditions;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+\n+/**\n+ * InputFormat to read data from a database and generate Rows.\n+ * The InputFormat has to be configured using the supplied InputFormatBuilder.", "originalCommit": "173ded87a6bbdc639582e62245de653ce562e0ef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA5NTI4Mw==", "url": "https://github.com/apache/flink/pull/12036#discussion_r422095283", "bodyText": "indent", "author": "wuchong", "createdAt": "2020-05-08T11:38:23Z", "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/dialect/JdbcDialect.java", "diffHunk": "@@ -80,7 +80,7 @@ default String quoteIdentifier(String identifier) {\n \t * the use of select + update/insert, this performance is poor.\n \t */\n \tdefault Optional<String> getUpsertStatement(\n-\t\t\tString tableName, String[] fieldNames, String[] uniqueKeyFields) {\n+\t\tString tableName, String[] fieldNames, String[] uniqueKeyFields) {", "originalCommit": "173ded87a6bbdc639582e62245de653ce562e0ef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA5NTc4MQ==", "url": "https://github.com/apache/flink/pull/12036#discussion_r422095781", "bodyText": "Why removes the final?", "author": "wuchong", "createdAt": "2020-05-08T11:39:43Z", "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/dialect/JdbcDialects.java", "diffHunk": "@@ -39,27 +39,27 @@\n /**\n  * Default JDBC dialects.\n  */\n-public final class JDBCDialects {\n+public class JdbcDialects {", "originalCommit": "173ded87a6bbdc639582e62245de653ce562e0ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEyNDE3OQ==", "url": "https://github.com/apache/flink/pull/12036#discussion_r422124179", "bodyText": "And what about moving each dialect in its own class (instead of having all the implementation insidide this class)? Or better: why don't load them via SPI (so we could support more dialects just adding external jars to Flink lib directory without requiring to have them in the official jdbc connector code)?", "author": "fpompermaier", "createdAt": "2020-05-08T12:50:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA5NTc4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA5NzE2OQ==", "url": "https://github.com/apache/flink/pull/12036#discussion_r422097169", "bodyText": "The package-visible is on purpose, so that users can't extend this class.", "author": "wuchong", "createdAt": "2020-05-08T11:43:23Z", "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/JdbcBatchingOutputFormat.java", "diffHunk": "@@ -40,10 +39,13 @@\n import java.util.concurrent.TimeUnit;\n import java.util.function.Function;\n \n-import static org.apache.flink.api.java.io.jdbc.JDBCUtils.setRecordToStatement;\n+import static org.apache.flink.connector.jdbc.JdbcUtils.setRecordToStatement;\n import static org.apache.flink.util.Preconditions.checkNotNull;\n \n-class JdbcBatchingOutputFormat<In, JdbcIn, JdbcExec extends JdbcBatchStatementExecutor<JdbcIn>> extends AbstractJdbcOutputFormat<In> {\n+/**\n+ * A JDBC outputFormat support batching records before writing records to database.\n+ */\n+public class JdbcBatchingOutputFormat<In, JdbcIn, JdbcExec extends JdbcBatchStatementExecutor<JdbcIn>> extends AbstractJdbcOutputFormat<In> {", "originalCommit": "173ded87a6bbdc639582e62245de653ce562e0ef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA5OTI4Ng==", "url": "https://github.com/apache/flink/pull/12036#discussion_r422099286", "bodyText": "Please remove this class.", "author": "wuchong", "createdAt": "2020-05-08T11:49:14Z", "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/JdbcOutputFormat.java", "diffHunk": "@@ -37,15 +36,16 @@\n  * @see Row\n  * @see DriverManager\n  */\n+\n /**\n  * @deprecated use {@link JdbcBatchingOutputFormat}\n  */\n @Deprecated\n-public class JDBCOutputFormat extends AbstractJdbcOutputFormat<Row> {\n+public class JdbcOutputFormat extends AbstractJdbcOutputFormat<Row> {", "originalCommit": "173ded87a6bbdc639582e62245de653ce562e0ef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEwMTQ5NA==", "url": "https://github.com/apache/flink/pull/12036#discussion_r422101494", "bodyText": "I think keeping this static imports can make code more concise.", "author": "wuchong", "createdAt": "2020-05-08T11:54:45Z", "path": "flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/JdbcITCase.java", "diffHunk": "@@ -35,26 +33,22 @@\n import java.util.Arrays;\n import java.util.List;\n \n-import static org.apache.flink.api.java.io.jdbc.JdbcTestFixture.INPUT_TABLE;\n-import static org.apache.flink.api.java.io.jdbc.JdbcTestFixture.INSERT_TEMPLATE;\n-import static org.apache.flink.api.java.io.jdbc.JdbcTestFixture.TEST_DATA;", "originalCommit": "173ded87a6bbdc639582e62245de653ce562e0ef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEwNDM1Nw==", "url": "https://github.com/apache/flink/pull/12036#discussion_r422104357", "bodyText": "remove this file? I think nobody is using it, and GenericJdbcSinkFunction is not accessible for users.", "author": "wuchong", "createdAt": "2020-05-08T12:02:15Z", "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/JdbcSinkFunction.java", "diffHunk": "@@ -31,9 +31,9 @@\n  */\n @Deprecated\n class JdbcSinkFunction extends RichSinkFunction<Row> implements CheckpointedFunction {", "originalCommit": "173ded87a6bbdc639582e62245de653ce562e0ef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEwNDkwNA==", "url": "https://github.com/apache/flink/pull/12036#discussion_r422104904", "bodyText": "Move to org.apache.flink.connector.jdbc.source.converter package? I think converter is always used for Row (or RowData in the future).", "author": "wuchong", "createdAt": "2020-05-08T12:03:47Z", "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/source/row/converter/JdbcRowConverter.java", "diffHunk": "@@ -16,7 +16,7 @@\n  * limitations under the License.\n  */\n \n-package org.apache.flink.api.java.io.jdbc.source.row.converter;\n+package org.apache.flink.connector.jdbc.source.row.converter;", "originalCommit": "173ded87a6bbdc639582e62245de653ce562e0ef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEwNTIwMw==", "url": "https://github.com/apache/flink/pull/12036#discussion_r422105203", "bodyText": "How about to add an @Internal annotation on this to tell this is not ready to be exposed to users.", "author": "wuchong", "createdAt": "2020-05-08T12:04:31Z", "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/dialect/JdbcDialect.java", "diffHunk": "@@ -31,7 +31,7 @@\n /**\n  * Handle the SQL dialect of jdbc driver.\n  */\n-public interface JDBCDialect extends Serializable {\n+public interface JdbcDialect extends Serializable {", "originalCommit": "173ded87a6bbdc639582e62245de653ce562e0ef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cb0d57d5d8792936e83463f5399bc5f15c5c69e9", "url": "https://github.com/apache/flink/commit/cb0d57d5d8792936e83463f5399bc5f15c5c69e9", "message": "address comments and recognize packages", "committedDate": "2020-05-12T03:13:58Z", "type": "forcePushed"}, {"oid": "adc67315f721dcedd256e938c642a18878829d0e", "url": "https://github.com/apache/flink/commit/adc67315f721dcedd256e938c642a18878829d0e", "message": "address comments and recognize packages", "committedDate": "2020-05-12T06:14:32Z", "type": "forcePushed"}, {"oid": "83806c39c17f56e280bc8cad215839a902742b9e", "url": "https://github.com/apache/flink/commit/83806c39c17f56e280bc8cad215839a902742b9e", "message": "address comments and recognize packages", "committedDate": "2020-05-12T06:22:47Z", "type": "forcePushed"}, {"oid": "b31fe9e8bb6095647e4267ad31e31908c9ca6063", "url": "https://github.com/apache/flink/commit/b31fe9e8bb6095647e4267ad31e31908c9ca6063", "message": "[FLINK-17537][connectors / jdbc] Refactor flink-jdbc connector structure\n(1) Use Jdbc instead of JDBC;\n(2) Move interfaces and classes to org.apache.flink.connector.jdbc;\n(3) Keep ancient JDBCOutputFormat, JDBCInputFormat and ParameterValuesProvider in old package;\n(4) Add tests/ITCase for ancient Classes and new classes;\n(5) rename flink-jdbc module to flink-connector-jdbc;\n(6) update docs.", "committedDate": "2020-05-12T08:40:33Z", "type": "forcePushed"}, {"oid": "72118ce7dff777ff8cc2f6889c9e8f9a097e4b79", "url": "https://github.com/apache/flink/commit/72118ce7dff777ff8cc2f6889c9e8f9a097e4b79", "message": "[FLINK-17537][connectors / jdbc] Refactor flink-jdbc connector structure\n(1) Use Jdbc instead of JDBC.\n(2) Move interfaces and classes to org.apache.flink.connector.jdbc.\n(3) Keep ancient JDBCOutputFormat, JDBCInputFormat and ParameterValuesProvider in old package.\n(4) Add tests/ITCase for ancient Classes and new classes.\n(5) rename flink-jdbc module to flink-connector-jdbc.\n(6) update docs.", "committedDate": "2020-05-12T14:33:42Z", "type": "forcePushed"}, {"oid": "1cd42176068c2a618b21be8700ca578c2f1b09a3", "url": "https://github.com/apache/flink/commit/1cd42176068c2a618b21be8700ca578c2f1b09a3", "message": "[FLINK-17537][connectors / jdbc] Refactor flink-jdbc connector structure\n(1) Use Jdbc instead of JDBC.\n(2) Move interfaces and classes to org.apache.flink.connector.jdbc.\n(3) Keep ancient JDBCOutputFormat, JDBCInputFormat and ParameterValuesProvider in old package.\n(4) Add tests/ITCase for ancient Classes and new classes.\n(5) rename flink-jdbc module to flink-connector-jdbc.\n(6) update docs.", "committedDate": "2020-05-13T03:26:24Z", "type": "commit"}, {"oid": "1cd42176068c2a618b21be8700ca578c2f1b09a3", "url": "https://github.com/apache/flink/commit/1cd42176068c2a618b21be8700ca578c2f1b09a3", "message": "[FLINK-17537][connectors / jdbc] Refactor flink-jdbc connector structure\n(1) Use Jdbc instead of JDBC.\n(2) Move interfaces and classes to org.apache.flink.connector.jdbc.\n(3) Keep ancient JDBCOutputFormat, JDBCInputFormat and ParameterValuesProvider in old package.\n(4) Add tests/ITCase for ancient Classes and new classes.\n(5) rename flink-jdbc module to flink-connector-jdbc.\n(6) update docs.", "committedDate": "2020-05-13T03:26:24Z", "type": "forcePushed"}]}