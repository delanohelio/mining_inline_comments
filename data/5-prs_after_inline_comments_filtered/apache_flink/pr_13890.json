{"pr_number": 13890, "pr_title": "[FLINK-19931] Do not emit intermediate results for reduce operation BATCH execution mode", "pr_createdAt": "2020-11-02T14:38:10Z", "pr_url": "https://github.com/apache/flink/pull/13890", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAyMTM0NA==", "url": "https://github.com/apache/flink/pull/13890#discussion_r516021344", "bodyText": "So far we have mostly (or always? \ud83e\udd14) kept Operator in the name somehow for newer operators. For example: BatchGroupedReduceOperator.", "author": "aljoscha", "createdAt": "2020-11-02T14:47:13Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/BatchGroupedReduce.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.operators;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.api.common.RuntimeExecutionMode;\n+import org.apache.flink.api.common.functions.ReduceFunction;\n+import org.apache.flink.api.common.state.ValueState;\n+import org.apache.flink.api.common.state.ValueStateDescriptor;\n+import org.apache.flink.api.common.typeutils.TypeSerializer;\n+import org.apache.flink.runtime.state.VoidNamespace;\n+import org.apache.flink.runtime.state.VoidNamespaceSerializer;\n+import org.apache.flink.streaming.runtime.streamrecord.StreamRecord;\n+\n+/**\n+ * A {@link StreamOperator} for executing a {@link ReduceFunction} on a\n+ * {@link org.apache.flink.streaming.api.datastream.KeyedStream} in a\n+ * {@link RuntimeExecutionMode#BATCH} mode.\n+ */\n+@Internal\n+public class BatchGroupedReduce<IN, KEY> extends AbstractUdfStreamOperator<IN, ReduceFunction<IN>>", "originalCommit": "4b3958fe94e9f6a9d0f2e1be302d20e0cfe3958e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAyNzUwMQ==", "url": "https://github.com/apache/flink/pull/13890#discussion_r516027501", "bodyText": "It's good to keep the same name! Just in case we ever want to do some batch/streaming/savepoint interop business.", "author": "aljoscha", "createdAt": "2020-11-02T14:55:36Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/BatchGroupedReduce.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.operators;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.api.common.RuntimeExecutionMode;\n+import org.apache.flink.api.common.functions.ReduceFunction;\n+import org.apache.flink.api.common.state.ValueState;\n+import org.apache.flink.api.common.state.ValueStateDescriptor;\n+import org.apache.flink.api.common.typeutils.TypeSerializer;\n+import org.apache.flink.runtime.state.VoidNamespace;\n+import org.apache.flink.runtime.state.VoidNamespaceSerializer;\n+import org.apache.flink.streaming.runtime.streamrecord.StreamRecord;\n+\n+/**\n+ * A {@link StreamOperator} for executing a {@link ReduceFunction} on a\n+ * {@link org.apache.flink.streaming.api.datastream.KeyedStream} in a\n+ * {@link RuntimeExecutionMode#BATCH} mode.\n+ */\n+@Internal\n+public class BatchGroupedReduce<IN, KEY> extends AbstractUdfStreamOperator<IN, ReduceFunction<IN>>\n+\t\timplements OneInputStreamOperator<IN, IN>, Triggerable<KEY, VoidNamespace> {\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\tprivate static final String STATE_NAME = \"_op_state\";", "originalCommit": "4b3958fe94e9f6a9d0f2e1be302d20e0cfe3958e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAyNzU1MQ==", "url": "https://github.com/apache/flink/pull/13890#discussion_r516027551", "bodyText": "Maybe we should add this to the DataStreamBatchExecutionITCase that I'm introducing in #13891. But we should at least not choose ReduceITCase because there's already too many classes with that name... \ud83d\ude05", "author": "aljoscha", "createdAt": "2020-11-02T14:55:41Z", "path": "flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/ReduceITCase.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.test.streaming.runtime;\n+\n+import org.apache.flink.api.common.RuntimeExecutionMode;\n+import org.apache.flink.api.common.functions.ReduceFunction;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.configuration.ExecutionOptions;\n+import org.apache.flink.streaming.api.datastream.DataStream;\n+import org.apache.flink.streaming.api.datastream.DataStreamSource;\n+import org.apache.flink.streaming.api.datastream.KeyedStream;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.test.util.AbstractTestBase;\n+import org.apache.flink.util.CloseableIterator;\n+import org.apache.flink.util.CollectionUtil;\n+\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.junit.Assert.assertThat;\n+\n+/**\n+ * Tests for {@link KeyedStream#reduce(ReduceFunction)}.\n+ */\n+public class ReduceITCase extends AbstractTestBase {\n+\t@Test\n+\tpublic void testStreamReduce() throws Exception {\n+\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+\t\tenv.setParallelism(1);\n+\t\tConfiguration conf = new Configuration();\n+\t\tconf.set(ExecutionOptions.RUNTIME_MODE, RuntimeExecutionMode.STREAMING);\n+\t\tenv.configure(conf, this.getClass().getClassLoader());\n+\t\tDataStreamSource<Long> numbers = env\n+\t\t\t.fromSequence(0, 10);\n+\n+\t\t// send all records into a single reducer\n+\t\tKeyedStream<Long, Long> stream = numbers.keyBy(i -> i % 2);\n+\t\tDataStream<Long> sums = stream.reduce(\n+\t\t\tLong::sum\n+\t\t);\n+\n+\t\ttry (CloseableIterator<Long> sumsIterator = sums.executeAndCollect()) {\n+\t\t\tList<Long> results = CollectionUtil.iteratorToList(sumsIterator);\n+\t\t\tassertThat(results, equalTo(Arrays.asList(\n+\t\t\t\t0L, 1L, 2L, 4L, 6L, 9L, 12L, 16L, 20L, 25L, 30L\n+\t\t\t)));\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testBatchReduce() throws Exception {", "originalCommit": "4b3958fe94e9f6a9d0f2e1be302d20e0cfe3958e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAzOTIxNQ==", "url": "https://github.com/apache/flink/pull/13890#discussion_r516039215", "bodyText": "Sure, will move the tests into the DataStreamBatchExecutionITCase, once we get it in.", "author": "dawidwys", "createdAt": "2020-11-02T15:12:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAyNzU1MQ=="}], "type": "inlineReview"}, {"oid": "b0b8d31a839300a723bf7354181e73c10a852dc0", "url": "https://github.com/apache/flink/commit/b0b8d31a839300a723bf7354181e73c10a852dc0", "message": "[FLINK-19931] Do not emit intermediate results for reduce operation BATCH execution mode\n\nThis PR introduces ReduceTransformation and a corresponding translator\nthat produces runtime execution mode dependent operator.\n\nThe operator for the BATCH execution instead of emitting intermediate results after each incoming event it registers a callback for max watermark and then emits the result for a given key when the timer fires.", "committedDate": "2020-11-03T08:52:36Z", "type": "forcePushed"}, {"oid": "d5363e3ee3dd7c67e1545f3074463eb1a0d99d51", "url": "https://github.com/apache/flink/commit/d5363e3ee3dd7c67e1545f3074463eb1a0d99d51", "message": "[hotfix] Add Operator suffix to StreamGroupedReduce", "committedDate": "2020-11-03T08:56:48Z", "type": "commit"}, {"oid": "f511d32437ee9d98e412e9c3353fdd485079d9e2", "url": "https://github.com/apache/flink/commit/f511d32437ee9d98e412e9c3353fdd485079d9e2", "message": "[FLINK-19931] Do not emit intermediate results for reduce operation BATCH execution mode\n\nThis PR introduces ReduceTransformation and a corresponding translator\nthat produces runtime execution mode dependent operator.\n\nThe operator for the BATCH execution instead of emitting intermediate results after each incoming event it registers a callback for max watermark and then emits the result for a given key when the timer fires.", "committedDate": "2020-11-03T08:58:26Z", "type": "forcePushed"}, {"oid": "6d984c5095919540ca224b411d4cc797705e5f5f", "url": "https://github.com/apache/flink/commit/6d984c5095919540ca224b411d4cc797705e5f5f", "message": "[FLINK-19931] Do not emit intermediate results for reduce operation BATCH execution mode\n\nThis PR introduces ReduceTransformation and a corresponding translator\nthat produces runtime execution mode dependent operator.\n\nThe operator for the BATCH execution instead of emitting intermediate results after each incoming event it registers a callback for max watermark and then emits the result for a given key when the timer fires.", "committedDate": "2020-11-03T12:05:32Z", "type": "forcePushed"}, {"oid": "cf76ddad9a5a3eda957155b7b3cdc624240813ed", "url": "https://github.com/apache/flink/commit/cf76ddad9a5a3eda957155b7b3cdc624240813ed", "message": "[FLINK-19931] Do not emit intermediate results for reduce operation BATCH execution mode\n\nThis PR introduces ReduceTransformation and a corresponding translator\nthat produces runtime execution mode dependent operator.\n\nThe operator for the BATCH execution instead of emitting intermediate results after each incoming event it registers a callback for max watermark and then emits the result for a given key when the timer fires.", "committedDate": "2020-11-03T13:15:14Z", "type": "commit"}, {"oid": "cf76ddad9a5a3eda957155b7b3cdc624240813ed", "url": "https://github.com/apache/flink/commit/cf76ddad9a5a3eda957155b7b3cdc624240813ed", "message": "[FLINK-19931] Do not emit intermediate results for reduce operation BATCH execution mode\n\nThis PR introduces ReduceTransformation and a corresponding translator\nthat produces runtime execution mode dependent operator.\n\nThe operator for the BATCH execution instead of emitting intermediate results after each incoming event it registers a callback for max watermark and then emits the result for a given key when the timer fires.", "committedDate": "2020-11-03T13:15:14Z", "type": "forcePushed"}]}