{"pr_number": 12278, "pr_title": "[FLINK-17019][runtime] Fulfill slot requests in request order", "pr_createdAt": "2020-05-21T12:24:41Z", "pr_url": "https://github.com/apache/flink/pull/12278", "timeline": [{"oid": "a3a4256ccc6300fcac27d7625461c078a1510604", "url": "https://github.com/apache/flink/commit/a3a4256ccc6300fcac27d7625461c078a1510604", "message": "[FLINK-17019][runtime] Remap orphaned slot allocation to pending slot request which lost its allocation", "committedDate": "2020-05-25T06:43:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ0MTEzMQ==", "url": "https://github.com/apache/flink/pull/12278#discussion_r430441131", "bodyText": "Looking into the implementation of DualKeyLinkedMap for pendingRequests, it seems we can just remove the first matching SlotRequestId and then remap the orphaned SlotRequestId to its AllocationID. The original insertion ordering should not suffer in DualKeyLinkedMap.aMap. If so, we could remove  requestedAllocations.\nEDIT: waitingForResourceManager -> pendingRequests", "author": "azagrebin", "createdAt": "2020-05-26T14:09:01Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImpl.java", "diffHunk": "@@ -112,6 +114,9 @@\n \t/** The requests that are waiting for the resource manager to be connected. */\n \tprivate final LinkedHashMap<SlotRequestId, PendingRequest> waitingForResourceManager;\n \n+\t/** Maps a request to its allocation. */\n+\tprivate final BiMap<SlotRequestId, AllocationID> requestedAllocations;", "originalCommit": "a3a4256ccc6300fcac27d7625461c078a1510604", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYyODI4Mg==", "url": "https://github.com/apache/flink/pull/12278#discussion_r436628282", "bodyText": "Yes we can improve DualKeyLinkedMap and drop the requestedAllocations.\nThe needed improvement would be:\n\nre-insert a record does not affect its order\nget keyA from keyB, and vice versa", "author": "zhuzhurk", "createdAt": "2020-06-08T11:30:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ0MTEzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE4MjgxOQ==", "url": "https://github.com/apache/flink/pull/12278#discussion_r437182819", "bodyText": "done.", "author": "zhuzhurk", "createdAt": "2020-06-09T07:08:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ0MTEzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ0NDY5MA==", "url": "https://github.com/apache/flink/pull/12278#discussion_r430444690", "bodyText": "I am not sure about all consequences of this change for the existing scheduling. I mean that we do not respect SlotRequestId->AllocationID by accepting the slot offer. Would it make sense to keep this behaviour configurable for now depending on scheduling strategy? Or this complication is not needed?", "author": "azagrebin", "createdAt": "2020-05-26T14:13:39Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImpl.java", "diffHunk": "@@ -648,26 +648,8 @@ boolean offerSlot(\n \t\t\tslotOffer.getResourceProfile(),\n \t\t\ttaskManagerGateway);\n \n-\t\t// check whether we have request waiting for this slot\n-\t\tPendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID);", "originalCommit": "7065a71c2911aa3938c827bdb9029dee9268950c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwNzI2OQ==", "url": "https://github.com/apache/flink/pull/12278#discussion_r433607269", "bodyText": "I think it's a good idea to make it configurable.\nBesides the benefit to reduce risk for streaming and DataSet jobs, another benefit is that we can also drop the change to remap orphaned allocations. This is because the remapping is for fail-fast of pending requests in failAllocation(...) which makes difference only if it is a streaming job.\nActually I'm thinking whether we need to keep the fail-fast mechanism in failAllocation(...) in the future. It requires the slot pool to differentiate streaming requests and batch requests. And in the future if a slotpool contains both batch slots(occupied temporarily) and streaming slots(occupied indefinitely), a failed allocation for streaming request does not need to fail immediately if it is still fulfillable, just like how we currently deal with batch requests.\nWhat do you think of dropping the commit to remap orphaned allocations?", "author": "zhuzhurk", "createdAt": "2020-06-02T04:01:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ0NDY5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM2MjA4NA==", "url": "https://github.com/apache/flink/pull/12278#discussion_r435362084", "bodyText": "There is this UnfulfillableSlotRequestException which is still a fail fast route if RM finds that a certain request profile cannot be fulfilled at all with any existing slot and cannot be allocated. It is relevant for both batch and streaming and bulk as I see. I do not know the whole background of this. At first glance, this looks to me as an optimisation that complicates things a bit at the moment. It is probably necessary to avoid timeout waiting to cancel everything if it is already clear that allocation can never succeed.", "author": "azagrebin", "createdAt": "2020-06-04T15:45:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ0NDY5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUzMzE0OA==", "url": "https://github.com/apache/flink/pull/12278#discussion_r436533148", "bodyText": "Yes still need the remapping to allow fail-fast on UnfulfillableSlotRequestException.", "author": "zhuzhurk", "createdAt": "2020-06-08T08:28:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ0NDY5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU0MDU2NQ==", "url": "https://github.com/apache/flink/pull/12278#discussion_r436540565", "bodyText": "I had another thought and prefer to not make it configurable to fulfill request in request order.\nThe FIFO order works for any scheduling strategy and is even a improvement for lazy from source scheduling. It is not just for pipelined region scheduling.\nThere once was a ticket/PR for the same purpose \"[FLINK-13165] Complete slot requests in request order\" although it did not fully make it at last. LinkedHashMap was introduced by it and eases this PR. SlotPoolRequestCompletionTest was also introduced by it and can be reused.\nThe orphaned allocation remapping also ensures that the fail-fast route will not break with this change.\nWhat do you think?", "author": "zhuzhurk", "createdAt": "2020-06-08T08:42:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ0NDY5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgyNDExOQ==", "url": "https://github.com/apache/flink/pull/12278#discussion_r438824119", "bodyText": "Ok, the FLINK-13165 makes slot requests to be completed in order only if the offers come with unknown AllocationIds, right? Generally we expect that RM keeps the AllocationId to match SlotRequestID. I am fine to break the tie SlotRequestId->AllocationID if there is no known consequences. Eventually, I hope it might even help to simplify the SlotPoolImpl.", "author": "azagrebin", "createdAt": "2020-06-11T14:22:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ0NDY5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg0Mzg5OA==", "url": "https://github.com/apache/flink/pull/12278#discussion_r438843898", "bodyText": "I think it should be fine to remap SlotRequestIds and AllocationIds. In the end it is an implementation detail of the SlotPoolImpl how a SlotRequestId is mapped to an AllocationId and no user of the SlotPool should rely on/use it. The only important bit is to assign the orphaned AllocationId so that we can react to signals from the ResourceManager.", "author": "tillrohrmann", "createdAt": "2020-06-11T14:50:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ0NDY5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI0MzIyNQ==", "url": "https://github.com/apache/flink/pull/12278#discussion_r439243225", "bodyText": "Thanks for confirming it.", "author": "zhuzhurk", "createdAt": "2020-06-12T07:02:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ0NDY5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxOTE0OA==", "url": "https://github.com/apache/flink/pull/12278#discussion_r430919148", "bodyText": "is(not(nullValue)) reads nicer", "author": "GJL", "createdAt": "2020-05-27T07:43:54Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolRequestCompletionTest.java", "diffHunk": "@@ -103,7 +123,7 @@ private void runSlotRequestCompletionTest(\n \t\t\t// check that the slot requests get completed in sequential order\n \t\t\tfor (int i = 0; i < slotRequestIds.size(); i++) {\n \t\t\t\tfinal CompletableFuture<PhysicalSlot> slotRequestFuture = slotRequests.get(i);\n-\t\t\t\tslotRequestFuture.get();\n+\t\t\t\tassertThat(slotRequestFuture.getNow(null), not(is(nullValue())));", "originalCommit": "a3a4256ccc6300fcac27d7625461c078a1510604", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzExMzY2Mw==", "url": "https://github.com/apache/flink/pull/12278#discussion_r433113663", "bodyText": "OK.", "author": "zhuzhurk", "createdAt": "2020-06-01T08:45:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxOTE0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk0NjU5Nw==", "url": "https://github.com/apache/flink/pull/12278#discussion_r430946597", "bodyText": "It looks like that this should have been in a separate commit.", "author": "GJL", "createdAt": "2020-05-27T08:30:52Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImpl.java", "diffHunk": "@@ -698,13 +680,13 @@ boolean offerSlot(\n \n \t\tcomponentMainThreadExecutor.assertRunningInMainThread();\n \n-\t\tfinal PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID);\n+\t\tfinal PendingRequest pendingRequest = pendingRequests.getKeyB(allocationID);", "originalCommit": "7065a71c2911aa3938c827bdb9029dee9268950c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzExNDE3OQ==", "url": "https://github.com/apache/flink/pull/12278#discussion_r433114179", "bodyText": "Sure we can have a separate PR to centralize pending requests removal.", "author": "zhuzhurk", "createdAt": "2020-06-01T08:46:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk0NjU5Nw=="}], "type": "inlineReview"}, {"oid": "9a0102b7e3b412027bb84b16cf79f85e930ceb81", "url": "https://github.com/apache/flink/commit/9a0102b7e3b412027bb84b16cf79f85e930ceb81", "message": "[FLINK-17019][runtime] Remap orphaned slot allocation to pending slot request which just lost its allocation", "committedDate": "2020-06-09T07:06:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE4NDAwMQ==", "url": "https://github.com/apache/flink/pull/12278#discussion_r437184001", "bodyText": "@azagrebin what do you think of making this class package private?\nIt looks like a common util class but no one other than SlotPoolImpl uses it.", "author": "zhuzhurk", "createdAt": "2020-06-09T07:10:33Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobmaster/slotpool/DualKeyLinkedMap.java", "diffHunk": "@@ -37,20 +44,20 @@\n \n \tprivate final LinkedHashMap<A, Tuple2<B, V>> aMap;\n \n-\tprivate final LinkedHashMap<B, A> bMap;\n+\tprivate final HashMap<B, A> bMap;\n \n \tprivate transient Collection<V> values;\n \n \tpublic DualKeyLinkedMap(int initialCapacity) {", "originalCommit": "9a0102b7e3b412027bb84b16cf79f85e930ceb81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzNTQ0MQ==", "url": "https://github.com/apache/flink/pull/12278#discussion_r438835441", "bodyText": "Makes sense to me", "author": "azagrebin", "createdAt": "2020-06-11T14:38:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE4NDAwMQ=="}], "type": "inlineReview"}, {"oid": "e193166a23d99c7c43c123472a1b23534c383ec8", "url": "https://github.com/apache/flink/commit/e193166a23d99c7c43c123472a1b23534c383ec8", "message": "[FLINK-17019][runtime] Remap orphaned slot allocation to pending slot request which just lost its allocation", "committedDate": "2020-06-11T05:40:51Z", "type": "forcePushed"}, {"oid": "7a3940a82c063f6bf74cbc72715e77034afe2492", "url": "https://github.com/apache/flink/commit/7a3940a82c063f6bf74cbc72715e77034afe2492", "message": "[FLINK-17019][runtime] Remap orphaned slot allocation to pending slot request which just lost its allocation", "committedDate": "2020-06-11T15:15:33Z", "type": "forcePushed"}, {"oid": "9f69cd18655a8256d5bc91720a4a88f54b9a6ef9", "url": "https://github.com/apache/flink/commit/9f69cd18655a8256d5bc91720a4a88f54b9a6ef9", "message": "Fixup! [FLINK-17019][runtime] Remap orphaned slot allocation to pending slot request which just lost its allocation\n\nDo not cancel slot request if it has been completed with another allocated slot", "committedDate": "2020-06-12T09:42:22Z", "type": "forcePushed"}, {"oid": "13ae7d728e12b1f349d1cbb1d555882e5d29b298", "url": "https://github.com/apache/flink/commit/13ae7d728e12b1f349d1cbb1d555882e5d29b298", "message": "Fixup! [FLINK-17019][runtime] Remap orphaned slot allocation to pending slot request which just lost its allocation\n\nDo not cancel slot request if it has been completed with another allocated slot", "committedDate": "2020-06-16T09:16:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY5MzczOQ==", "url": "https://github.com/apache/flink/pull/12278#discussion_r440693739", "bodyText": "I would also explicitly document that @param <A> is the primary key.", "author": "azagrebin", "createdAt": "2020-06-16T08:54:57Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobmaster/slotpool/DualKeyLinkedMap.java", "diffHunk": "@@ -22,12 +22,16 @@\n \n import java.util.AbstractCollection;\n import java.util.Collection;\n+import java.util.HashMap;\n import java.util.Iterator;\n import java.util.LinkedHashMap;\n import java.util.Set;\n \n /**\n- * Map which stores values under two different indices.\n+ * Map which stores values under two different indices. The mapping of the primary key to the\n+ * value is backed by {@link LinkedHashMap} so that the iteration order over the values and\n+ * the primary key set is the insertion order. Note that there is no contract of the iteration\n+ * order over the secondary key set.", "originalCommit": "0414b71dafa2cf6e5668e1ff6e9def53baf2a850", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc2Nzk2MQ==", "url": "https://github.com/apache/flink/pull/12278#discussion_r440767961", "bodyText": "Good suggestion.", "author": "zhuzhurk", "createdAt": "2020-06-16T11:04:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY5MzczOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0NzgwNQ==", "url": "https://github.com/apache/flink/pull/12278#discussion_r441347805", "bodyText": "done.", "author": "zhuzhurk", "createdAt": "2020-06-17T07:46:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY5MzczOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY5NDAzNQ==", "url": "https://github.com/apache/flink/pull/12278#discussion_r440694035", "bodyText": "Does it matter for this PR which type bMap has?", "author": "azagrebin", "createdAt": "2020-06-16T08:55:22Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobmaster/slotpool/DualKeyLinkedMap.java", "diffHunk": "@@ -37,13 +41,13 @@\n \n \tprivate final LinkedHashMap<A, Tuple2<B, V>> aMap;\n \n-\tprivate final LinkedHashMap<B, A> bMap;\n+\tprivate final HashMap<B, A> bMap;", "originalCommit": "0414b71dafa2cf6e5668e1ff6e9def53baf2a850", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc2ODY3OA==", "url": "https://github.com/apache/flink/pull/12278#discussion_r440768678", "bodyText": "It might cause confusion so I think it would be better to not make it a LinkedHashMap.", "author": "zhuzhurk", "createdAt": "2020-06-16T11:06:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY5NDAzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0Njg4NA==", "url": "https://github.com/apache/flink/pull/12278#discussion_r441346884", "bodyText": "Hmm, for me, the order would be not obvious anyways w/o either looking into the implementation or the jdoc comment. I am not strictly opposed to the change but I would avoid it if it is not strictly needed.", "author": "azagrebin", "createdAt": "2020-06-17T07:44:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY5NDAzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1MTEzNg==", "url": "https://github.com/apache/flink/pull/12278#discussion_r441351136", "bodyText": "I means confusion to developers. A LinkedHashMap for bMap indicates it makes some differences than Map but actually not.", "author": "zhuzhurk", "createdAt": "2020-06-17T07:52:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY5NDAzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2NDM3NA==", "url": "https://github.com/apache/flink/pull/12278#discussion_r441364374", "bodyText": "Alright", "author": "azagrebin", "createdAt": "2020-06-17T08:14:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY5NDAzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY5NDk1OQ==", "url": "https://github.com/apache/flink/pull/12278#discussion_r440694959", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic V getByKeyA(A aKey) {\n          \n          \n            \n            \tpublic V getValueByKeyA(A aKey) {", "author": "azagrebin", "createdAt": "2020-06-16T08:56:51Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobmaster/slotpool/DualKeyLinkedMap.java", "diffHunk": "@@ -54,7 +54,7 @@ public int size() {\n \t\treturn aMap.size();\n \t}\n \n-\tpublic V getKeyA(A aKey) {\n+\tpublic V getByKeyA(A aKey) {", "originalCommit": "ff26b1df329b9ed8b1138b4c75bbf07d5199ac98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0NzczNA==", "url": "https://github.com/apache/flink/pull/12278#discussion_r441347734", "bodyText": "done.", "author": "zhuzhurk", "createdAt": "2020-06-17T07:46:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY5NDk1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY5NTA1Ng==", "url": "https://github.com/apache/flink/pull/12278#discussion_r440695056", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic V getByKeyB(B bKey) {\n          \n          \n            \n            \tpublic V getValueByKeyB(B bKey) {", "author": "azagrebin", "createdAt": "2020-06-16T08:56:59Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobmaster/slotpool/DualKeyLinkedMap.java", "diffHunk": "@@ -64,7 +64,7 @@ public V getKeyA(A aKey) {\n \t\t}\n \t}\n \n-\tpublic V getKeyB(B bKey) {\n+\tpublic V getByKeyB(B bKey) {", "originalCommit": "ff26b1df329b9ed8b1138b4c75bbf07d5199ac98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0NzY5Mg==", "url": "https://github.com/apache/flink/pull/12278#discussion_r441347692", "bodyText": "done.", "author": "zhuzhurk", "createdAt": "2020-06-17T07:46:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY5NTA1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY5NTQ4NA==", "url": "https://github.com/apache/flink/pull/12278#discussion_r440695484", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic A getKeyA(B bKey) {\n          \n          \n            \n            \tpublic A getKeyAByKeyB(B bKey) {", "author": "azagrebin", "createdAt": "2020-06-16T08:57:35Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobmaster/slotpool/DualKeyLinkedMap.java", "diffHunk": "@@ -74,6 +74,20 @@ public V getKeyB(B bKey) {\n \t\t}\n \t}\n \n+\tpublic A getKeyA(B bKey) {", "originalCommit": "ff26b1df329b9ed8b1138b4c75bbf07d5199ac98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0NzYyNw==", "url": "https://github.com/apache/flink/pull/12278#discussion_r441347627", "bodyText": "done.", "author": "zhuzhurk", "createdAt": "2020-06-17T07:46:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY5NTQ4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY5NTU3Mg==", "url": "https://github.com/apache/flink/pull/12278#discussion_r440695572", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic B getKeyB(A aKey) {\n          \n          \n            \n            \tpublic B getKeyBByKeyA(A aKey) {", "author": "azagrebin", "createdAt": "2020-06-16T08:57:44Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobmaster/slotpool/DualKeyLinkedMap.java", "diffHunk": "@@ -74,6 +74,20 @@ public V getKeyB(B bKey) {\n \t\t}\n \t}\n \n+\tpublic A getKeyA(B bKey) {\n+\t\treturn bMap.get(bKey);\n+\t}\n+\n+\tpublic B getKeyB(A aKey) {", "originalCommit": "ff26b1df329b9ed8b1138b4c75bbf07d5199ac98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0NzU2Ng==", "url": "https://github.com/apache/flink/pull/12278#discussion_r441347566", "bodyText": "done.", "author": "zhuzhurk", "createdAt": "2020-06-17T07:45:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY5NTU3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY5ODUwMQ==", "url": "https://github.com/apache/flink/pull/12278#discussion_r440698501", "bodyText": "I think values() are also interesting to check for both added tests.", "author": "azagrebin", "createdAt": "2020-06-16T09:02:19Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/DualKeyLinkedMapTest.java", "diffHunk": "@@ -85,4 +85,28 @@ public void ensuresOneToOneMappingBetweenKeysSameSecondaryKey() {\n \t\tassertThat(map.getByKeyB(1), is(secondValue));\n \t\tassertThat(map.getByKeyA(2), is(secondValue));\n \t}\n+\n+\t@Test\n+\tpublic void testPrimaryKeyOrderIsNotAffectedIfReInsertedWithSameSecondaryKey() {\n+\t\tfinal DualKeyLinkedMap<Integer, Integer, String> map = new DualKeyLinkedMap<>(2);\n+\n+\t\tfinal String value = \"foobar\";\n+\t\tmap.put(1, 1, value);\n+\t\tmap.put(2, 2, value);\n+\n+\t\tmap.put(1, 1, value);\n+\t\tassertThat(map.keySetA().iterator().next(), is(1));", "originalCommit": "bf5a5d0fd65dc6cfdf81e59d7cd041cf5d288338", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0NzUyMQ==", "url": "https://github.com/apache/flink/pull/12278#discussion_r441347521", "bodyText": "True. Added verifications for values.", "author": "zhuzhurk", "createdAt": "2020-06-17T07:45:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY5ODUwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY5OTEzMA==", "url": "https://github.com/apache/flink/pull/12278#discussion_r440699130", "bodyText": "do we also want to check cleanup of key B 3 if it were in the map?", "author": "azagrebin", "createdAt": "2020-06-16T09:03:26Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/DualKeyLinkedMapTest.java", "diffHunk": "@@ -85,4 +85,28 @@ public void ensuresOneToOneMappingBetweenKeysSameSecondaryKey() {\n \t\tassertThat(map.getByKeyB(1), is(secondValue));\n \t\tassertThat(map.getByKeyA(2), is(secondValue));\n \t}\n+\n+\t@Test\n+\tpublic void testPrimaryKeyOrderIsNotAffectedIfReInsertedWithSameSecondaryKey() {\n+\t\tfinal DualKeyLinkedMap<Integer, Integer, String> map = new DualKeyLinkedMap<>(2);\n+\n+\t\tfinal String value = \"foobar\";\n+\t\tmap.put(1, 1, value);\n+\t\tmap.put(2, 2, value);\n+\n+\t\tmap.put(1, 1, value);\n+\t\tassertThat(map.keySetA().iterator().next(), is(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testPrimaryKeyOrderIsNotAffectedIfReInsertedWithDifferentSecondaryKey() {\n+\t\tfinal DualKeyLinkedMap<Integer, Integer, String> map = new DualKeyLinkedMap<>(2);\n+\n+\t\tfinal String value = \"foobar\";\n+\t\tmap.put(1, 1, value);\n+\t\tmap.put(2, 2, value);\n+\n+\t\tmap.put(1, 3, value);", "originalCommit": "bf5a5d0fd65dc6cfdf81e59d7cd041cf5d288338", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMxNjI2MQ==", "url": "https://github.com/apache/flink/pull/12278#discussion_r441316261", "bodyText": "This is tested in ensuresOneToOneMappingBetweenKeysSameSecondaryKey.", "author": "zhuzhurk", "createdAt": "2020-06-17T06:46:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY5OTEzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcwODI2MA==", "url": "https://github.com/apache/flink/pull/12278#discussion_r440708260", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tfinal AllocationID orphanedAllocationId = allocationIdOfRequest.equals(allocationIdOfSlot)\n          \n          \n            \n            \t\t\t? null : allocationIdOfRequest;\n          \n          \n            \n            \n          \n          \n            \n            \t\t// if the request that initiated the allocation is still pending, it should take over the orphaned allocation\n          \n          \n            \n            \t\t// of the fulfilled request so that it can fail fast if the remapped allocation fails\n          \n          \n            \n            \t\tif (orphanedAllocationId != null) {\n          \n          \n            \n            \t\t// if the request that initiated the allocation is still pending, it should take over the orphaned allocation\n          \n          \n            \n            \t\t// of the fulfilled request so that it can fail fast if the remapped allocation fails\n          \n          \n            \n            \t\tif (!allocationIdOfRequest.equals(allocationIdOfSlot)) {\n          \n          \n            \n            \t\t    final AllocationID orphanedAllocationId = allocationIdOfRequest;", "author": "azagrebin", "createdAt": "2020-06-16T09:18:10Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImpl.java", "diffHunk": "@@ -592,6 +589,31 @@ private PendingRequest findMatchingPendingRequest(final AllocatedSlot slot) {\n \t\treturn null;\n \t}\n \n+\tprivate void maybeRemapOrphanedAllocation(\n+\t\t\tfinal AllocationID allocationIdOfRequest,\n+\t\t\tfinal AllocationID allocationIdOfSlot) {\n+\n+\t\tfinal AllocationID orphanedAllocationId = allocationIdOfRequest.equals(allocationIdOfSlot)\n+\t\t\t? null : allocationIdOfRequest;\n+\n+\t\t// if the request that initiated the allocation is still pending, it should take over the orphaned allocation\n+\t\t// of the fulfilled request so that it can fail fast if the remapped allocation fails\n+\t\tif (orphanedAllocationId != null) {", "originalCommit": "13ae7d728e12b1f349d1cbb1d555882e5d29b298", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0NzE2MA==", "url": "https://github.com/apache/flink/pull/12278#discussion_r441347160", "bodyText": "done.", "author": "zhuzhurk", "createdAt": "2020-06-17T07:45:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcwODI2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxMjUyNA==", "url": "https://github.com/apache/flink/pull/12278#discussion_r440712524", "bodyText": "is it about previously allocated slots returned by scheduler after e.g. finishing tasks?\ndo they also have to be cancelled in the RM?", "author": "azagrebin", "createdAt": "2020-06-16T09:25:25Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImpl.java", "diffHunk": "@@ -592,6 +589,31 @@ private PendingRequest findMatchingPendingRequest(final AllocatedSlot slot) {\n \t\treturn null;\n \t}\n \n+\tprivate void maybeRemapOrphanedAllocation(\n+\t\t\tfinal AllocationID allocationIdOfRequest,\n+\t\t\tfinal AllocationID allocationIdOfSlot) {\n+\n+\t\tfinal AllocationID orphanedAllocationId = allocationIdOfRequest.equals(allocationIdOfSlot)\n+\t\t\t? null : allocationIdOfRequest;\n+\n+\t\t// if the request that initiated the allocation is still pending, it should take over the orphaned allocation\n+\t\t// of the fulfilled request so that it can fail fast if the remapped allocation fails\n+\t\tif (orphanedAllocationId != null) {\n+\t\t\tfinal SlotRequestId requestIdOfAllocatedSlot = pendingRequests.getKeyA(allocationIdOfSlot);\n+\t\t\tif (requestIdOfAllocatedSlot != null) {\n+\t\t\t\tfinal PendingRequest requestOfAllocatedSlot = pendingRequests.getByKeyA(requestIdOfAllocatedSlot);\n+\t\t\t\trequestOfAllocatedSlot.setAllocationId(orphanedAllocationId);\n+\n+\t\t\t\t// this re-insertion of initiatedRequestId will not affect its original insertion order\n+\t\t\t\tpendingRequests.put(requestIdOfAllocatedSlot, orphanedAllocationId, requestOfAllocatedSlot);\n+\t\t\t} else {\n+\t\t\t\t// cancel the slot request if the orphaned allocation is not remapped to a pending request.\n+\t\t\t\t// the request id can be null if the slot is returned by scheduler\n+\t\t\t\tresourceManagerGateway.cancelSlotRequest(orphanedAllocationId);", "originalCommit": "13ae7d728e12b1f349d1cbb1d555882e5d29b298", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMzNjAwNA==", "url": "https://github.com/apache/flink/pull/12278#discussion_r441336004", "bodyText": "yes. If such returned slot fulfills a pending request, the orphaned allocation would not be needed by any other pending requests which still have their own allocations.\nSo we can safely cancel them to avoid allocating slots more than needed.", "author": "zhuzhurk", "createdAt": "2020-06-17T07:26:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxMjUyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0MzU4Mg==", "url": "https://github.com/apache/flink/pull/12278#discussion_r441343582", "bodyText": "Alright, so this is something like release the slot at the RM at the same time.", "author": "azagrebin", "createdAt": "2020-06-17T07:39:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxMjUyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0NzQ0OQ==", "url": "https://github.com/apache/flink/pull/12278#discussion_r441347449", "bodyText": "updated the comments to make it easier to understand", "author": "zhuzhurk", "createdAt": "2020-06-17T07:45:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxMjUyNA=="}], "type": "inlineReview"}, {"oid": "4f5b21017451ccae3811069e6534f3fa8aeaf1ad", "url": "https://github.com/apache/flink/commit/4f5b21017451ccae3811069e6534f3fa8aeaf1ad", "message": "[FLINK-17019][runtime] Remap orphaned slot allocation to pending slot request which just lost its allocation", "committedDate": "2020-06-17T07:43:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1NjE3Ng==", "url": "https://github.com/apache/flink/pull/12278#discussion_r441356176", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tscheduler.allocateSlot(\n          \n          \n            \n            \t\t\t\tslotRequestId1,\n          \n          \n            \n            \t\t\t\tnew DummyScheduledUnit(),\n          \n          \n            \n            \t\t\t\tSlotProfile.noRequirements(),\n          \n          \n            \n            \t\t\t\ttimeout);\n          \n          \n            \n            \t\t\tallocateSlot(scheduler, slotRequestId1);", "author": "azagrebin", "createdAt": "2020-06-17T08:00:37Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -738,6 +740,95 @@ public void testCalculationOfTaskExecutorUtilization() throws Exception {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testOrphanedAllocationCanBeRemapped() throws Exception {\n+\t\ttry (SlotPoolImpl slotPool = createSlotPoolImpl()) {\n+\t\t\tfinal List<AllocationID> allocationIds = new ArrayList<>();\n+\t\t\tresourceManagerGateway.setRequestSlotConsumer(\n+\t\t\t\tslotRequest -> allocationIds.add(slotRequest.getAllocationId()));\n+\n+\t\t\tfinal List<AllocationID> canceledAllocations = new ArrayList<>();\n+\t\t\tresourceManagerGateway.setCancelSlotConsumer(canceledAllocations::add);\n+\n+\t\t\tsetupSlotPool(slotPool, resourceManagerGateway, mainThreadExecutor);\n+\t\t\tfinal Scheduler scheduler = setupScheduler(slotPool, mainThreadExecutor);\n+\n+\t\t\tfinal SlotRequestId slotRequestId1 = new SlotRequestId();\n+\t\t\tscheduler.allocateSlot(\n+\t\t\t\tslotRequestId1,\n+\t\t\t\tnew DummyScheduledUnit(),\n+\t\t\t\tSlotProfile.noRequirements(),\n+\t\t\t\ttimeout);", "originalCommit": "4f5b21017451ccae3811069e6534f3fa8aeaf1ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1NzI5MA==", "url": "https://github.com/apache/flink/pull/12278#discussion_r441357290", "bodyText": "There is already a private method SlotPoolImplTest#allocateSlot for this.\nI would also extend this private method to submit multiple allocations at once in order:\nallocateSlot(Scheduler scheduler, SlotRequestId ... slotRequestIds)", "author": "azagrebin", "createdAt": "2020-06-17T08:02:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1NjE3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQzMjQzNQ==", "url": "https://github.com/apache/flink/pull/12278#discussion_r441432435", "bodyText": "Done via introducing a requestNewAllocatedSlots(SlotPool, SlotRequestId...).", "author": "zhuzhurk", "createdAt": "2020-06-17T10:03:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1NjE3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1ODMzOA==", "url": "https://github.com/apache/flink/pull/12278#discussion_r441358338", "bodyText": "nit: maybe, not now but if it can be reused also in other tests, it would be nice to have something like an RM harness:\nclass RmHarness {\nfinal List<AllocationID> allocationIds = new ArrayList<>();\nfinal List<AllocationID> canceledAllocations = new ArrayList<>();\nRmHarness(resourceManagerGateway)\ngetAllocations\ngetCanceled\n}", "author": "azagrebin", "createdAt": "2020-06-17T08:04:25Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -738,6 +740,95 @@ public void testCalculationOfTaskExecutorUtilization() throws Exception {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testOrphanedAllocationCanBeRemapped() throws Exception {\n+\t\ttry (SlotPoolImpl slotPool = createSlotPoolImpl()) {\n+\t\t\tfinal List<AllocationID> allocationIds = new ArrayList<>();\n+\t\t\tresourceManagerGateway.setRequestSlotConsumer(\n+\t\t\t\tslotRequest -> allocationIds.add(slotRequest.getAllocationId()));\n+\n+\t\t\tfinal List<AllocationID> canceledAllocations = new ArrayList<>();\n+\t\t\tresourceManagerGateway.setCancelSlotConsumer(canceledAllocations::add);", "originalCommit": "4f5b21017451ccae3811069e6534f3fa8aeaf1ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2MDgxMA==", "url": "https://github.com/apache/flink/pull/12278#discussion_r441360810", "bodyText": "it can be partially reused in testFailingAllocationFailsRemappedPendingSlotRequests", "author": "azagrebin", "createdAt": "2020-06-17T08:08:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1ODMzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQzMDYyMA==", "url": "https://github.com/apache/flink/pull/12278#discussion_r441430620", "bodyText": "Maybe later along with the rework of all SlotPool tests? Because resourceManagerGateway is shared between all cases and it's better to have an overview of the usages.", "author": "zhuzhurk", "createdAt": "2020-06-17T10:00:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1ODMzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1OTk1Mw==", "url": "https://github.com/apache/flink/pull/12278#discussion_r441359953", "bodyText": "why do we use Scheduler to unit test SlotPoolImpl?\nwhy not to call SlotPoolImpl directly, like in testFailingAllocationFailsRemappedPendingSlotRequests?", "author": "azagrebin", "createdAt": "2020-06-17T08:07:18Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -738,6 +740,95 @@ public void testCalculationOfTaskExecutorUtilization() throws Exception {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testOrphanedAllocationCanBeRemapped() throws Exception {\n+\t\ttry (SlotPoolImpl slotPool = createSlotPoolImpl()) {\n+\t\t\tfinal List<AllocationID> allocationIds = new ArrayList<>();\n+\t\t\tresourceManagerGateway.setRequestSlotConsumer(\n+\t\t\t\tslotRequest -> allocationIds.add(slotRequest.getAllocationId()));\n+\n+\t\t\tfinal List<AllocationID> canceledAllocations = new ArrayList<>();\n+\t\t\tresourceManagerGateway.setCancelSlotConsumer(canceledAllocations::add);\n+\n+\t\t\tsetupSlotPool(slotPool, resourceManagerGateway, mainThreadExecutor);\n+\t\t\tfinal Scheduler scheduler = setupScheduler(slotPool, mainThreadExecutor);", "originalCommit": "4f5b21017451ccae3811069e6534f3fa8aeaf1ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQzMTkzOQ==", "url": "https://github.com/apache/flink/pull/12278#discussion_r441431939", "bodyText": "You are right. I have dropped scheduler in the newly added cases.\nHowever, this unnecessary complication is a common problem of most of the SlotPool tests. I think we can simplify them in a separate task as well.", "author": "zhuzhurk", "createdAt": "2020-06-17T10:03:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1OTk1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2MjE1OQ==", "url": "https://github.com/apache/flink/pull/12278#discussion_r441362159", "bodyText": "Could we reuse/deduplicate setUpSlotPool also in SlotPoolImplTest?", "author": "azagrebin", "createdAt": "2020-06-17T08:10:56Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolPendingRequestFailureTest.java", "diffHunk": "@@ -99,6 +105,40 @@ public void testFailingAllocationFailsPendingSlotRequests() throws Exception {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testFailingAllocationFailsRemappedPendingSlotRequests() throws Exception {\n+\t\tfinal List<AllocationID> allocations = new ArrayList<>();\n+\t\tresourceManagerGateway.setRequestSlotConsumer(slotRequest -> allocations.add(slotRequest.getAllocationId()));\n+\n+\t\ttry (SlotPoolImpl slotPool = setUpSlotPool()) {", "originalCommit": "4f5b21017451ccae3811069e6534f3fa8aeaf1ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQwMDIzNQ==", "url": "https://github.com/apache/flink/pull/12278#discussion_r441400235", "bodyText": "It's possible but unrelated. I do not feel like we should cleanup the tests here.\nLike you said, the scheduler might also be not needed. I think it can be a larger task and would be better to be a separate task to fully rework the SlotPoolImpl tests, including those in SlotPoolImplTest, SlotPoolInteractionsTest, SlotPoolSlotSharingTest.", "author": "zhuzhurk", "createdAt": "2020-06-17T09:11:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2MjE1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQxMjQ5Mg==", "url": "https://github.com/apache/flink/pull/12278#discussion_r441412492", "bodyText": "Possibly these test classes can share the same test base. So that the util methods and fields can be reused.", "author": "zhuzhurk", "createdAt": "2020-06-17T09:31:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2MjE1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQxMjc0NA==", "url": "https://github.com/apache/flink/pull/12278#discussion_r441412744", "bodyText": "I can open a task for it if you feel it is Ok.", "author": "zhuzhurk", "createdAt": "2020-06-17T09:31:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2MjE1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU3NzY5NQ==", "url": "https://github.com/apache/flink/pull/12278#discussion_r441577695", "bodyText": "sure, I agree that  we can do the overall test cleanup as a separate issue if it is too much for this PR.", "author": "azagrebin", "createdAt": "2020-06-17T14:13:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2MjE1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk1MjAzOQ==", "url": "https://github.com/apache/flink/pull/12278#discussion_r441952039", "bodyText": "FLINK-18355 is opened to simplify the tests.", "author": "zhuzhurk", "createdAt": "2020-06-18T03:46:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2MjE1OQ=="}], "type": "inlineReview"}, {"oid": "75931f83b3ecedad521c77164fb12d9371637fbf", "url": "https://github.com/apache/flink/commit/75931f83b3ecedad521c77164fb12d9371637fbf", "message": "[FLINK-17019][runtime] All pending requests removal goes to SlotPool#removePendingRequest() for centrally management", "committedDate": "2020-06-17T09:58:41Z", "type": "commit"}, {"oid": "7a3ca89b9968e0b62d17b09d9e7fae8bc8ef0de8", "url": "https://github.com/apache/flink/commit/7a3ca89b9968e0b62d17b09d9e7fae8bc8ef0de8", "message": "[FLINK-17019][runtime] Fulfill slot requests in request order\n\nThis is to avoid slot competitions between slot allocation bulks which can lead to resource deadlocks.", "committedDate": "2020-06-17T09:58:42Z", "type": "commit"}, {"oid": "c85ea1512446d82265e9ea92a59da90affeb0b7d", "url": "https://github.com/apache/flink/commit/c85ea1512446d82265e9ea92a59da90affeb0b7d", "message": "[hotfix][runtime] Make DualKeyLinkedMap package private", "committedDate": "2020-06-17T09:58:42Z", "type": "commit"}, {"oid": "214d4a7199277b2c4ed3e976a0e065578fdaff94", "url": "https://github.com/apache/flink/commit/214d4a7199277b2c4ed3e976a0e065578fdaff94", "message": "[FLINK-17019][runtime] Make clear the iteration order contract of DualKeyLinkedMap", "committedDate": "2020-06-17T09:58:42Z", "type": "commit"}, {"oid": "3a1aae38af697c0a77e6d7986b250954a3d551b4", "url": "https://github.com/apache/flink/commit/3a1aae38af697c0a77e6d7986b250954a3d551b4", "message": "[FLINK-17019][runtime] Enable DualKeyLinkedMap for querying primary/secondary key with a given secondary/primary key", "committedDate": "2020-06-17T09:58:42Z", "type": "commit"}, {"oid": "1cb106e2af56fda6821e92271225437549d70769", "url": "https://github.com/apache/flink/commit/1cb106e2af56fda6821e92271225437549d70769", "message": "[FLINK-17019][runtime] Change primary key re-insertion in DualKeyLinkedMap to not affect the insertion order", "committedDate": "2020-06-17T09:58:42Z", "type": "commit"}, {"oid": "ab11f37b0a46e1cf35434b55eb08bda539f16258", "url": "https://github.com/apache/flink/commit/ab11f37b0a46e1cf35434b55eb08bda539f16258", "message": "[FLINK-17019][runtime] Remap orphaned slot allocation to pending slot request which just lost its allocation", "committedDate": "2020-06-17T09:58:42Z", "type": "commit"}, {"oid": "ab11f37b0a46e1cf35434b55eb08bda539f16258", "url": "https://github.com/apache/flink/commit/ab11f37b0a46e1cf35434b55eb08bda539f16258", "message": "[FLINK-17019][runtime] Remap orphaned slot allocation to pending slot request which just lost its allocation", "committedDate": "2020-06-17T09:58:42Z", "type": "forcePushed"}]}