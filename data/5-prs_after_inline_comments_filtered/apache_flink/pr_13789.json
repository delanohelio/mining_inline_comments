{"pr_number": 13789, "pr_title": "[FLINK-19727][table-runtime] Implement ParallelismProvider for sink i\u2026", "pr_createdAt": "2020-10-26T04:22:27Z", "pr_url": "https://github.com/apache/flink/pull/13789", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE1MTcxMQ==", "url": "https://github.com/apache/flink/pull/13789#discussion_r513151711", "bodyText": "I think we don't need provide method.\nhttps://flink.apache.org/contributing/code-style-and-quality-java.html#java-optional\nIn Flink code style, it is recommended to use the Optional only in method return values.", "author": "JingsongLi", "createdAt": "2020-10-28T03:03:40Z", "path": "flink-table/flink-table-api-java-bridge/src/main/java/org/apache/flink/table/connector/sink/SinkFunctionProvider.java", "diffHunk": "@@ -20,19 +20,39 @@\n \n import org.apache.flink.annotation.PublicEvolving;\n import org.apache.flink.streaming.api.functions.sink.SinkFunction;\n+import org.apache.flink.table.connector.ParallelismProvider;\n import org.apache.flink.table.data.RowData;\n \n+import java.util.Optional;\n+\n /**\n  * Provider of a {@link SinkFunction} instance as a runtime implementation for {@link DynamicTableSink}.\n  */\n @PublicEvolving\n-public interface SinkFunctionProvider extends DynamicTableSink.SinkRuntimeProvider {\n+public interface SinkFunctionProvider extends DynamicTableSink.SinkRuntimeProvider, ParallelismProvider {\n \n \t/**\n \t * Helper method for creating a static provider.\n \t */\n \tstatic SinkFunctionProvider of(SinkFunction<RowData> sinkFunction) {\n-\t\treturn () -> sinkFunction;\n+\t\treturn of(sinkFunction, Optional.empty());\n+\t}\n+\n+\t/**\n+\t * Helper method for creating a static provider, sink parallelism will be configured if non-empty parallelism is passed in.\n+\t */\n+\tstatic SinkFunctionProvider of(SinkFunction<RowData> sinkFunction, Optional<Integer> parallelism) {", "originalCommit": "6329930d7acc5d2d4d84e777561e79bd25ac9367", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NzIxMg==", "url": "https://github.com/apache/flink/pull/13789#discussion_r513167212", "bodyText": "@JingsongLi\nit is recommended to use the Optional only in method return values\ncopy that.\nI think we don't need provide method.\nWell, since SinkFunctionProvider  implements ParallelismProvider as default, as far as I\u2019m concerned, there should be a method passing the parallelism in. Or Is there an better alternative? It\u2018s kind of u to tell me that~", "author": "shouweikun", "createdAt": "2020-10-28T04:02:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE1MTcxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2OTIwNg==", "url": "https://github.com/apache/flink/pull/13789#discussion_r513169206", "bodyText": "For the user which want to set parallelism, I think it is OK to let them create an implementation class.", "author": "JingsongLi", "createdAt": "2020-10-28T04:10:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE1MTcxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE1MTc0MQ==", "url": "https://github.com/apache/flink/pull/13789#discussion_r513151741", "bodyText": "ditto", "author": "JingsongLi", "createdAt": "2020-10-28T03:03:48Z", "path": "flink-table/flink-table-common/src/main/java/org/apache/flink/table/connector/sink/OutputFormatProvider.java", "diffHunk": "@@ -20,19 +20,39 @@\n \n import org.apache.flink.annotation.PublicEvolving;\n import org.apache.flink.api.common.io.OutputFormat;\n+import org.apache.flink.table.connector.ParallelismProvider;\n import org.apache.flink.table.data.RowData;\n \n+import java.util.Optional;\n+\n /**\n  * Provider of an {@link OutputFormat} instance as a runtime implementation for {@link DynamicTableSink}.\n  */\n @PublicEvolving\n-public interface OutputFormatProvider extends DynamicTableSink.SinkRuntimeProvider {\n+public interface OutputFormatProvider extends DynamicTableSink.SinkRuntimeProvider, ParallelismProvider{\n \n \t/**\n \t * Helper method for creating a static provider.\n \t */\n \tstatic OutputFormatProvider of(OutputFormat<RowData> outputFormat) {\n-\t\treturn () -> outputFormat;\n+\t\treturn of(outputFormat, Optional.empty());\n+\t}\n+\n+\t/**\n+\t * Helper method for creating a static provider, sink parallelism will be configured if non-empty parallelism is passed in.\n+\t */\n+\tstatic OutputFormatProvider of(OutputFormat<RowData> outputFormat, Optional<Integer> parallelism) {", "originalCommit": "6329930d7acc5d2d4d84e777561e79bd25ac9367", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk1NDEzOQ==", "url": "https://github.com/apache/flink/pull/13789#discussion_r513954139", "bodyText": "Code format: It is ok to include in one line", "author": "JingsongLi", "createdAt": "2020-10-29T04:23:11Z", "path": "flink-table/flink-table-common/src/main/java/org/apache/flink/table/connector/sink/OutputFormatProvider.java", "diffHunk": "@@ -20,13 +20,15 @@\n \n import org.apache.flink.annotation.PublicEvolving;\n import org.apache.flink.api.common.io.OutputFormat;\n+import org.apache.flink.table.connector.ParallelismProvider;\n import org.apache.flink.table.data.RowData;\n \n /**\n  * Provider of an {@link OutputFormat} instance as a runtime implementation for {@link DynamicTableSink}.\n  */\n @PublicEvolving\n-public interface OutputFormatProvider extends DynamicTableSink.SinkRuntimeProvider {\n+public interface OutputFormatProvider", "originalCommit": "a42eba2756d3ebfe1a6a73b58b31c12ff98435fb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk1NDI0Ng==", "url": "https://github.com/apache/flink/pull/13789#discussion_r513954246", "bodyText": "Code format: It is ok to include in one line", "author": "JingsongLi", "createdAt": "2020-10-29T04:23:20Z", "path": "flink-table/flink-table-api-java-bridge/src/main/java/org/apache/flink/table/connector/sink/SinkFunctionProvider.java", "diffHunk": "@@ -20,13 +20,15 @@\n \n import org.apache.flink.annotation.PublicEvolving;\n import org.apache.flink.streaming.api.functions.sink.SinkFunction;\n+import org.apache.flink.table.connector.ParallelismProvider;\n import org.apache.flink.table.data.RowData;\n \n /**\n  * Provider of a {@link SinkFunction} instance as a runtime implementation for {@link DynamicTableSink}.\n  */\n @PublicEvolving\n-public interface SinkFunctionProvider extends DynamicTableSink.SinkRuntimeProvider {\n+public interface SinkFunctionProvider", "originalCommit": "a42eba2756d3ebfe1a6a73b58b31c12ff98435fb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA3Nzg2Mw==", "url": "https://github.com/apache/flink/pull/13789#discussion_r514077863", "bodyText": "This line is too long, you can break it.", "author": "JingsongLi", "createdAt": "2020-10-29T08:22:58Z", "path": "flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/factories/TestValuesTableFactory.java", "diffHunk": "@@ -386,9 +394,11 @@ public DynamicTableSink createDynamicTableSink(Context context) {\n \t\tboolean isInsertOnly = helper.getOptions().get(SINK_INSERT_ONLY);\n \t\tString runtimeSink = helper.getOptions().get(RUNTIME_SINK);\n \t\tint expectedNum = helper.getOptions().get(SINK_EXPECTED_MESSAGES_NUM);\n+\t\tInteger parallelism = helper.getOptions().get(SINK_PARALLELISM);\n \t\tfinal Map<String, DataType> writableMetadata = convertToMetadataMap(\n \t\t\thelper.getOptions().get(WRITABLE_METADATA),\n \t\t\tcontext.getClassLoader());\n+\t\tChangelogMode changelogMode = Optional.ofNullable(helper.getOptions().get(SINK_CHANGELOG_MODE_ENFORCED)).map(m -> parseChangelogMode(m)).orElse(null);", "originalCommit": "8cca8ea8baa8f718138404c4a605f85f9c323723", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA3Nzk3OA==", "url": "https://github.com/apache/flink/pull/13789#discussion_r514077978", "bodyText": "Don't break line", "author": "JingsongLi", "createdAt": "2020-10-29T08:23:08Z", "path": "flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/factories/TestValuesTableFactory.java", "diffHunk": "@@ -929,10 +943,13 @@ public String asSummaryString() {\n \t\tprivate DataType consumedDataType;\n \t\tprivate int[] primaryKeyIndices;\n \t\tprivate final String tableName;\n-\t\tprivate final boolean isInsertOnly;\n+\t\tprivate final boolean\n+\t\t\tisInsertOnly;", "originalCommit": "8cca8ea8baa8f718138404c4a605f85f9c323723", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0bfd51270d53b57c1449f560854b2c1d4951a411", "url": "https://github.com/apache/flink/commit/0bfd51270d53b57c1449f560854b2c1d4951a411", "message": "[FLINK-19727][table-runtime] Implement ParallelismProvider for sink in blink planner", "committedDate": "2020-11-02T06:45:26Z", "type": "commit"}, {"oid": "a97796b4cf8d0228ef6b0552c5be81ad75121a6d", "url": "https://github.com/apache/flink/commit/a97796b4cf8d0228ef6b0552c5be81ad75121a6d", "message": "addressing review comments", "committedDate": "2020-11-02T06:45:26Z", "type": "commit"}, {"oid": "7724b91de5d51cbd70b41c4edde0a1f0021bd7e0", "url": "https://github.com/apache/flink/commit/7724b91de5d51cbd70b41c4edde0a1f0021bd7e0", "message": " remove of factory method", "committedDate": "2020-11-02T06:45:26Z", "type": "commit"}, {"oid": "c8b90e46b9982fff464370afb3adf1dad411c37c", "url": "https://github.com/apache/flink/commit/c8b90e46b9982fff464370afb3adf1dad411c37c", "message": "fix checkstyle", "committedDate": "2020-11-02T06:45:26Z", "type": "commit"}, {"oid": "64560c4b5b90cb16b26177b3c71e9064febe9250", "url": "https://github.com/apache/flink/commit/64560c4b5b90cb16b26177b3c71e9064febe9250", "message": "fix checkstyle", "committedDate": "2020-11-02T06:45:26Z", "type": "commit"}, {"oid": "e7cb3eb4668985672c5b41ca734e2029b741f949", "url": "https://github.com/apache/flink/commit/e7cb3eb4668985672c5b41ca734e2029b741f949", "message": "address review comments", "committedDate": "2020-11-02T06:45:27Z", "type": "commit"}, {"oid": "4c11c88ecaea058b37fcbaf13007306c4c4860d5", "url": "https://github.com/apache/flink/commit/4c11c88ecaea058b37fcbaf13007306c4c4860d5", "message": "address comments", "committedDate": "2020-11-02T06:45:27Z", "type": "commit"}, {"oid": "3e5737980ff49e901d90416b7c162a5ee5d2c048", "url": "https://github.com/apache/flink/commit/3e5737980ff49e901d90416b7c162a5ee5d2c048", "message": "address comments", "committedDate": "2020-11-02T06:45:27Z", "type": "commit"}, {"oid": "c5bdf9f9a370250e02e7c21492c15e5547777165", "url": "https://github.com/apache/flink/commit/c5bdf9f9a370250e02e7c21492c15e5547777165", "message": "Minor code style", "committedDate": "2020-11-02T06:47:35Z", "type": "commit"}, {"oid": "c5bdf9f9a370250e02e7c21492c15e5547777165", "url": "https://github.com/apache/flink/commit/c5bdf9f9a370250e02e7c21492c15e5547777165", "message": "Minor code style", "committedDate": "2020-11-02T06:47:35Z", "type": "forcePushed"}]}