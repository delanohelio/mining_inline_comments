{"pr_number": 11213, "pr_title": "[FLINK-16276][tests] Introduce a builder and factory methods to create DefaultScheduler for testing", "pr_createdAt": "2020-02-25T12:35:22Z", "pr_url": "https://github.com/apache/flink/pull/11213", "timeline": [{"oid": "dd6d5731a27212ea07f547e5653c07c7295d057d", "url": "https://github.com/apache/flink/commit/dd6d5731a27212ea07f547e5653c07c7295d057d", "message": "[FLINK-16276][tests] Introduce a builder and factory methods to create DefaultScheduler for testing", "committedDate": "2020-02-25T12:50:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM5ODA2OA==", "url": "https://github.com/apache/flink/pull/11213#discussion_r384398068", "bodyText": "It is not obvious to me why the visibility increase from protected to public is needed. If this is needed for a later change, then it should not be in this PR.", "author": "GJL", "createdAt": "2020-02-26T10:18:55Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/SchedulerBase.java", "diffHunk": "@@ -280,23 +281,8 @@ private ExecutionGraph createExecutionGraph(\n \t\t\tfailoverStrategy);\n \t}\n \n-\t/**\n-\t * @deprecated Direct access to the execution graph by scheduler implementations is discouraged\n-\t * because currently the execution graph has various features and responsibilities that a\n-\t * scheduler should not be concerned about. The following specialized abstractions to the\n-\t * execution graph and accessors should be preferred over direct access:\n-\t * <ul>\n-\t *     <li>{@link #getSchedulingTopology()}\n-\t *     <li>{@link #getFailoverTopology()}\n-\t *     <li>{@link #getInputsLocationsRetriever()}\n-\t *     <li>{@link #getExecutionVertex(ExecutionVertexID)}\n-\t *     <li>{@link #getExecutionVertexId(ExecutionAttemptID)}\n-\t *     <li>{@link #getExecutionVertexIdOrThrow(ExecutionAttemptID)}\n-\t * </ul>\n-\t * Currently, only {@link LegacyScheduler} requires direct access to the execution graph.\n-\t */\n-\t@Deprecated\n-\tprotected ExecutionGraph getExecutionGraph() {\n+\t@VisibleForTesting\n+\tpublic ExecutionGraph getExecutionGraph() {", "originalCommit": "dd6d5731a27212ea07f547e5653c07c7295d057d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ1NTQxNQ==", "url": "https://github.com/apache/flink/pull/11213#discussion_r384455415", "bodyText": "It will be needed by many tests to query the execution status when they are reworked to based on the new scheduler.\nIt's a prerequisite change for a set of following PRs so I think we can avoid adding one more hotfix to make it public then.", "author": "zhuzhurk", "createdAt": "2020-02-26T12:16:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM5ODA2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEyODgxNA==", "url": "https://github.com/apache/flink/pull/11213#discussion_r385128814", "bodyText": "Can you tell me which test(s) you are planning to port to use the new scheduler next?", "author": "GJL", "createdAt": "2020-02-27T13:35:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM5ODA2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEzMjMwNw==", "url": "https://github.com/apache/flink/pull/11213#discussion_r385132307", "bodyText": "Regardless, I don't think we should remove the comment entirely. There is  a reason why helper methods such as getExecutionVertex() were introduced. There is business logic inside the ExecutionGraph and I would not want anyone to call it directly from the scheduler. We can add @VisibleForTesting but for me it does not necessarily mean that calling the method from production code is discouraged.", "author": "GJL", "createdAt": "2020-02-27T13:42:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM5ODA2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEzNTk4Mw==", "url": "https://github.com/apache/flink/pull/11213#discussion_r385135983", "bodyText": "It's a prerequisite change for a set of following PRs so I think we can avoid adding one more hotfix to make it public then.\n\nIf you think it makes your life easier, then we can leave this commit. However, I would prefer to change the visibility in non-hotfix commit when we rewrite the first test to use the new scheduler. In the git history it will be easier to see the justification. Moreover, if we delay rewritig the tests, the visibility will not be unnecessarily increased.", "author": "GJL", "createdAt": "2020-02-27T13:48:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM5ODA2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUzMjE2Ng==", "url": "https://github.com/apache/flink/pull/11213#discussion_r385532166", "bodyText": "There would be quite a few tests to be reworked.\n\nExecutionGraphDeploymentTest\nExecutionGraphPartitionReleaseTest\nExecutionGraphVariousFailuesTest\nExecutionTest\nExecutionVertexCancelTest\nExecutionVertexInputConstraintTest\nExecutionVertexTest\nExecutionGraphNotEnoughResourceTest\nExecutionGraphCheckpointCoordinatorTest\nExecutionGraphColocationRestartTest\nExecutionGraphSuspendTest\nFinalizeOnMasterTest\n\nMost of them does not need much effort to be based on the new scheduler if we exposes ExecutionGraph. It would make the work much easier since we only need to force scheduling related actions to be conducted via the scheduler.", "author": "zhuzhurk", "createdAt": "2020-02-28T06:48:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM5ODA2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUzNDY3Ng==", "url": "https://github.com/apache/flink/pull/11213#discussion_r385534676", "bodyText": "I will think again about whether we must expose getExecutionGraph() to the tests.\nWill drop this commit and may do it when reworking the tests. And as you mentioned, it should be a non-hotfix commit then if we would have it.", "author": "zhuzhurk", "createdAt": "2020-02-28T06:57:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM5ODA2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQwNzA5Ng==", "url": "https://github.com/apache/flink/pull/11213#discussion_r384407096", "bodyText": "I don't think the comment // this is not used any more in the new scheduler is needed. It would not be consistent to comment here because there is another invocation of this constructor where we do not comment. I would remove the parameters slotProvider and slotRequestTimeout from the DefaultScheduler, and if possible pass a \"throwing\" implementation/invalid value to SchedulerBase.", "author": "GJL", "createdAt": "2020-02-26T10:35:07Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/scheduler/SchedulerTestingUtils.java", "diffHunk": "@@ -213,4 +267,161 @@ public static CheckpointCoordinator getCheckpointCoordinator(SchedulerBase sched\n \t\t\treturn operatorGateway.sendOperatorEventToTask(task, operator, evt);\n \t\t}\n \t}\n+\n+\n+\t/**\n+\t * Builder for {@link DefaultScheduler}.\n+\t */\n+\tpublic static class DefaultSchedulerBuilder {\n+\t\tprivate final JobGraph jobGraph;\n+\n+\t\tprivate SchedulingStrategyFactory schedulingStrategyFactory;\n+\n+\t\tprivate Logger log = LOG;\n+\t\tprivate BackPressureStatsTracker backPressureStatsTracker = VoidBackPressureStatsTracker.INSTANCE;\n+\t\tprivate Executor ioExecutor = java.util.concurrent.Executors.newSingleThreadExecutor();\n+\t\tprivate Configuration jobMasterConfiguration = new Configuration();\n+\t\tprivate ScheduledExecutorService futureExecutor = new DirectScheduledExecutorService();\n+\t\tprivate ScheduledExecutor delayExecutor = new ScheduledExecutorServiceAdapter(futureExecutor);\n+\t\tprivate ClassLoader userCodeLoader = getClass().getClassLoader();\n+\t\tprivate CheckpointRecoveryFactory checkpointRecoveryFactory = new StandaloneCheckpointRecoveryFactory();\n+\t\tprivate Time rpcTimeout = DEFAULT_TIMEOUT;\n+\t\tprivate BlobWriter blobWriter = VoidBlobWriter.getInstance();\n+\t\tprivate JobManagerJobMetricGroup jobManagerJobMetricGroup = UnregisteredMetricGroups.createUnregisteredJobManagerJobMetricGroup();\n+\t\tprivate ShuffleMaster<?> shuffleMaster = NettyShuffleMaster.INSTANCE;\n+\t\tprivate JobMasterPartitionTracker partitionTracker = NoOpJobMasterPartitionTracker.INSTANCE;\n+\t\tprivate FailoverStrategy.Factory failoverStrategyFactory = new RestartPipelinedRegionFailoverStrategy.Factory();\n+\t\tprivate RestartBackoffTimeStrategy restartBackoffTimeStrategy = NoRestartBackoffTimeStrategy.INSTANCE;\n+\t\tprivate ExecutionVertexOperations executionVertexOperations = new DefaultExecutionVertexOperations();\n+\t\tprivate ExecutionVertexVersioner executionVertexVersioner = new ExecutionVertexVersioner();\n+\t\tprivate ExecutionSlotAllocatorFactory executionSlotAllocatorFactory = new TestExecutionSlotAllocatorFactory();\n+\n+\t\tprivate DefaultSchedulerBuilder(final JobGraph jobGraph) {\n+\t\t\tthis.jobGraph = jobGraph;\n+\n+\t\t\t// scheduling strategy is by default set according to the scheduleMode. It can be re-assigned later.\n+\t\t\tthis.schedulingStrategyFactory = DefaultSchedulerFactory.createSchedulingStrategyFactory(jobGraph.getScheduleMode());\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setLogger(final Logger log) {\n+\t\t\tthis.log = log;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setBackPressureStatsTracker(final BackPressureStatsTracker backPressureStatsTracker) {\n+\t\t\tthis.backPressureStatsTracker = backPressureStatsTracker;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setIoExecutor(final Executor ioExecutor) {\n+\t\t\tthis.ioExecutor = ioExecutor;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setJobMasterConfiguration(final Configuration jobMasterConfiguration) {\n+\t\t\tthis.jobMasterConfiguration = jobMasterConfiguration;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setFutureExecutor(final ScheduledExecutorService futureExecutor) {\n+\t\t\tthis.futureExecutor = futureExecutor;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setDelayExecutor(final ScheduledExecutor delayExecutor) {\n+\t\t\tthis.delayExecutor = delayExecutor;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setUserCodeLoader(final ClassLoader userCodeLoader) {\n+\t\t\tthis.userCodeLoader = userCodeLoader;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setCheckpointRecoveryFactory(final CheckpointRecoveryFactory checkpointRecoveryFactory) {\n+\t\t\tthis.checkpointRecoveryFactory = checkpointRecoveryFactory;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setRpcTimeout(final Time rpcTimeout) {\n+\t\t\tthis.rpcTimeout = rpcTimeout;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setBlobWriter(final BlobWriter blobWriter) {\n+\t\t\tthis.blobWriter = blobWriter;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setJobManagerJobMetricGroup(final JobManagerJobMetricGroup jobManagerJobMetricGroup) {\n+\t\t\tthis.jobManagerJobMetricGroup = jobManagerJobMetricGroup;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setShuffleMaster(final ShuffleMaster<?> shuffleMaster) {\n+\t\t\tthis.shuffleMaster = shuffleMaster;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setPartitionTracker(final JobMasterPartitionTracker partitionTracker) {\n+\t\t\tthis.partitionTracker = partitionTracker;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setSchedulingStrategyFactory(final SchedulingStrategyFactory schedulingStrategyFactory) {\n+\t\t\tthis.schedulingStrategyFactory = schedulingStrategyFactory;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setFailoverStrategyFactory(final FailoverStrategy.Factory failoverStrategyFactory) {\n+\t\t\tthis.failoverStrategyFactory = failoverStrategyFactory;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setRestartBackoffTimeStrategy(final RestartBackoffTimeStrategy restartBackoffTimeStrategy) {\n+\t\t\tthis.restartBackoffTimeStrategy = restartBackoffTimeStrategy;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setExecutionVertexOperations(final ExecutionVertexOperations executionVertexOperations) {\n+\t\t\tthis.executionVertexOperations = executionVertexOperations;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setExecutionVertexVersioner(final ExecutionVertexVersioner executionVertexVersioner) {\n+\t\t\tthis.executionVertexVersioner = executionVertexVersioner;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setExecutionSlotAllocatorFactory(final ExecutionSlotAllocatorFactory executionSlotAllocatorFactory) {\n+\t\t\tthis.executionSlotAllocatorFactory = executionSlotAllocatorFactory;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultScheduler build() throws Exception {\n+\t\t\treturn new DefaultScheduler(\n+\t\t\t\tlog,\n+\t\t\t\tjobGraph,\n+\t\t\t\tbackPressureStatsTracker,\n+\t\t\t\tioExecutor,\n+\t\t\t\tjobMasterConfiguration,\n+\t\t\t\tnew SimpleSlotProvider(jobGraph.getJobID(), 0), // this is not used any more in the new scheduler", "originalCommit": "dd6d5731a27212ea07f547e5653c07c7295d057d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNTk3MQ==", "url": "https://github.com/apache/flink/pull/11213#discussion_r384935971", "bodyText": "Good suggestion. 1b292e3 is added to remove the these two params of DefaultScheduler.", "author": "zhuzhurk", "createdAt": "2020-02-27T06:34:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQwNzA5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyMTU1Mw==", "url": "https://github.com/apache/flink/pull/11213#discussion_r384421553", "bodyText": "There are more than two empty lines. Since this is forbidden by checkstyle in production code, I also wouldn't do it in test code.", "author": "GJL", "createdAt": "2020-02-26T11:01:33Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/scheduler/SchedulerTestingUtils.java", "diffHunk": "@@ -213,4 +267,161 @@ public static CheckpointCoordinator getCheckpointCoordinator(SchedulerBase sched\n \t\t\treturn operatorGateway.sendOperatorEventToTask(task, operator, evt);\n \t\t}\n \t}\n+", "originalCommit": "dd6d5731a27212ea07f547e5653c07c7295d057d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ1NjcyMQ==", "url": "https://github.com/apache/flink/pull/11213#discussion_r384456721", "bodyText": "Agreed. Just did it by mistake.", "author": "zhuzhurk", "createdAt": "2020-02-26T12:19:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyMTU1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNTU3NQ==", "url": "https://github.com/apache/flink/pull/11213#discussion_r384935575", "bodyText": "fixed", "author": "zhuzhurk", "createdAt": "2020-02-27T06:33:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyMTU1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyMjA3OQ==", "url": "https://github.com/apache/flink/pull/11213#discussion_r384422079", "bodyText": "I cannot find real usages of these newSchedulerBuilderWithDefaultSlotAllocator() and createScheduler(). Can you explain why they are needed?", "author": "GJL", "createdAt": "2020-02-26T11:02:42Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/scheduler/SchedulerTestingUtils.java", "diffHunk": "@@ -77,6 +94,47 @@\n \n \tprivate static final long DEFAULT_CHECKPOINT_TIMEOUT_MS = 10 * 60 * 1000;\n \n+\tprivate static final Time DEFAULT_TIMEOUT = Time.seconds(300);\n+\n+\tprivate SchedulerTestingUtils() {}\n+\n+\tpublic static DefaultSchedulerBuilder newSchedulerBuilder(final JobGraph jobGraph) {\n+\t\treturn new DefaultSchedulerBuilder(jobGraph);\n+\t}\n+\n+\tpublic static DefaultSchedulerBuilder newSchedulerBuilderWithDefaultSlotAllocator(", "originalCommit": "dd6d5731a27212ea07f547e5653c07c7295d057d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ1OTgwMw==", "url": "https://github.com/apache/flink/pull/11213#discussion_r384459803", "bodyText": "It will be used when we change some tests to create DefaultScheduler, one example can be found in DefaultSchedulerBatchSchedulingTest#createScheduler() in #10858 .\nAnother example is ExecutionGraphSuspendTest which currently create ExecutionGraph and with a given slotProvider.", "author": "zhuzhurk", "createdAt": "2020-02-26T12:26:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyMjA3OQ=="}], "type": "inlineReview"}, {"oid": "cade94bacbaa7fa76c0a0d013eb069406d01b6ad", "url": "https://github.com/apache/flink/commit/cade94bacbaa7fa76c0a0d013eb069406d01b6ad", "message": "[FLINK-16276][tests] Introduce a builder and factory methods to create DefaultScheduler for testing", "committedDate": "2020-02-27T06:32:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNjUxMg==", "url": "https://github.com/apache/flink/pull/11213#discussion_r384936512", "bodyText": "We can also remove these 2 params from the constructor of SchedulerBase once we have removed the legacy scheduler.", "author": "zhuzhurk", "createdAt": "2020-02-27T06:36:13Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/DefaultScheduler.java", "diffHunk": "@@ -123,15 +121,15 @@ public DefaultScheduler(\n \t\t\tbackPressureStatsTracker,\n \t\t\tioExecutor,\n \t\t\tjobMasterConfiguration,\n-\t\t\tslotProvider,\n+\t\t\tnew ThrowingSlotProvider(), // this is not used any more in the new scheduler\n \t\t\tfutureExecutor,\n \t\t\tuserCodeLoader,\n \t\t\tcheckpointRecoveryFactory,\n \t\t\trpcTimeout,\n \t\t\tnew ThrowingRestartStrategy.ThrowingRestartStrategyFactory(),\n \t\t\tblobWriter,\n \t\t\tjobManagerJobMetricGroup,\n-\t\t\tslotRequestTimeout,\n+\t\t\tTime.seconds(0), // this is not used any more in the new scheduler", "originalCommit": "cade94bacbaa7fa76c0a0d013eb069406d01b6ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d557df5126a0a4f2404ac08ccea25000e8495e25", "url": "https://github.com/apache/flink/commit/d557df5126a0a4f2404ac08ccea25000e8495e25", "message": "[FLINK-16276][tests] Introduce a builder and factory methods to create DefaultScheduler for testing", "committedDate": "2020-02-28T07:02:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY2MTkyNQ==", "url": "https://github.com/apache/flink/pull/11213#discussion_r385661925", "bodyText": ".getClassLoader() can return null. I don't think this will happen in this code path but I would feel better if we used ClassLoader.getSystemClassLoader()", "author": "GJL", "createdAt": "2020-02-28T12:10:29Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/scheduler/SchedulerTestingUtils.java", "diffHunk": "@@ -213,4 +267,158 @@ public static CheckpointCoordinator getCheckpointCoordinator(SchedulerBase sched\n \t\t\treturn operatorGateway.sendOperatorEventToTask(task, operator, evt);\n \t\t}\n \t}\n+\n+\t/**\n+\t * Builder for {@link DefaultScheduler}.\n+\t */\n+\tpublic static class DefaultSchedulerBuilder {\n+\t\tprivate final JobGraph jobGraph;\n+\n+\t\tprivate SchedulingStrategyFactory schedulingStrategyFactory;\n+\n+\t\tprivate Logger log = LOG;\n+\t\tprivate BackPressureStatsTracker backPressureStatsTracker = VoidBackPressureStatsTracker.INSTANCE;\n+\t\tprivate Executor ioExecutor = java.util.concurrent.Executors.newSingleThreadExecutor();\n+\t\tprivate Configuration jobMasterConfiguration = new Configuration();\n+\t\tprivate ScheduledExecutorService futureExecutor = new DirectScheduledExecutorService();\n+\t\tprivate ScheduledExecutor delayExecutor = new ScheduledExecutorServiceAdapter(futureExecutor);\n+\t\tprivate ClassLoader userCodeLoader = getClass().getClassLoader();", "originalCommit": "d557df5126a0a4f2404ac08ccea25000e8495e25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0ODk3Mg==", "url": "https://github.com/apache/flink/pull/11213#discussion_r385748972", "bodyText": "Ok.", "author": "zhuzhurk", "createdAt": "2020-02-28T15:12:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY2MTkyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY2NzQwNQ==", "url": "https://github.com/apache/flink/pull/11213#discussion_r385667405", "bodyText": "By merely creating a builder, we are instantiating several thread pools (ioExecutor, futureExecutor, delayExecutor) but from a user perspective there is no way to shut them down. I don't see a good solution to this.", "author": "GJL", "createdAt": "2020-02-28T12:24:53Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/scheduler/SchedulerTestingUtils.java", "diffHunk": "@@ -213,4 +267,158 @@ public static CheckpointCoordinator getCheckpointCoordinator(SchedulerBase sched\n \t\t\treturn operatorGateway.sendOperatorEventToTask(task, operator, evt);\n \t\t}\n \t}\n+\n+\t/**\n+\t * Builder for {@link DefaultScheduler}.\n+\t */\n+\tpublic static class DefaultSchedulerBuilder {\n+\t\tprivate final JobGraph jobGraph;\n+\n+\t\tprivate SchedulingStrategyFactory schedulingStrategyFactory;\n+\n+\t\tprivate Logger log = LOG;\n+\t\tprivate BackPressureStatsTracker backPressureStatsTracker = VoidBackPressureStatsTracker.INSTANCE;\n+\t\tprivate Executor ioExecutor = java.util.concurrent.Executors.newSingleThreadExecutor();", "originalCommit": "d557df5126a0a4f2404ac08ccea25000e8495e25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0OTQ5MQ==", "url": "https://github.com/apache/flink/pull/11213#discussion_r385749491", "bodyText": "Good catch!\nI think we can borrow the idea of ExecutionGraphTestUtils#createSimpleTestGraph() which uses TestingUtils.defaultExecutor() for the ioExecutor and futureExecutor. delayedExecutor could still be a ScheduledExecutorServiceAdapter which wraps the futureExecutor by default.", "author": "zhuzhurk", "createdAt": "2020-02-28T15:12:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY2NzQwNQ=="}], "type": "inlineReview"}, {"oid": "1f13449126632a72f4aec4c0ae4f0f0537a58cc9", "url": "https://github.com/apache/flink/commit/1f13449126632a72f4aec4c0ae4f0f0537a58cc9", "message": "[hotfix][tests] Make SchedulerTestingUtils constructor private", "committedDate": "2020-02-28T15:14:13Z", "type": "commit"}, {"oid": "1c1d4af3ecafd90b4290982709bd7c7e1fdc528a", "url": "https://github.com/apache/flink/commit/1c1d4af3ecafd90b4290982709bd7c7e1fdc528a", "message": "[hotfix][runtime] Remove slotProvider and slotRequestTimeout param from DefaultScheduler constructor\n\nThis makes it easier to understand that the slot allocation is conducted via ExecutionSlotAllocatorFactory but not those two legacy params.", "committedDate": "2020-02-28T15:14:13Z", "type": "commit"}, {"oid": "8a7a5756f90a5bcdc8295ce7f4a24201af4230fb", "url": "https://github.com/apache/flink/commit/8a7a5756f90a5bcdc8295ce7f4a24201af4230fb", "message": "[FLINK-16276][tests] Introduce a builder and factory methods to create DefaultScheduler for testing", "committedDate": "2020-02-28T15:14:13Z", "type": "commit"}, {"oid": "3f9c1cdbb606073177669d281562ae2bdcd484e0", "url": "https://github.com/apache/flink/commit/3f9c1cdbb606073177669d281562ae2bdcd484e0", "message": "Fixup! [FLINK-16276][tests] Introduce a builder and factory methods to create DefaultScheduler for testing", "committedDate": "2020-02-28T15:17:15Z", "type": "commit"}, {"oid": "3f9c1cdbb606073177669d281562ae2bdcd484e0", "url": "https://github.com/apache/flink/commit/3f9c1cdbb606073177669d281562ae2bdcd484e0", "message": "Fixup! [FLINK-16276][tests] Introduce a builder and factory methods to create DefaultScheduler for testing", "committedDate": "2020-02-28T15:17:15Z", "type": "forcePushed"}]}