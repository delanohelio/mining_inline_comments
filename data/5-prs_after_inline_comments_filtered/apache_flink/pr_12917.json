{"pr_number": 12917, "pr_title": "[FLINK-18355][tests] Simplify tests of SlotPoolImpl", "pr_createdAt": "2020-07-17T03:44:37Z", "pr_url": "https://github.com/apache/flink/pull/12917", "timeline": [{"oid": "deb6fa0daa0aac4afe17a969fb4e111496412884", "url": "https://github.com/apache/flink/commit/deb6fa0daa0aac4afe17a969fb4e111496412884", "message": "[FLINK-18355][TEST] Try to remove the SchedulerImpl in testAllocateSimpleSlot", "committedDate": "2020-07-20T03:51:56Z", "type": "forcePushed"}, {"oid": "dcc6cc227872e65886c46c8958e20db854d083a0", "url": "https://github.com/apache/flink/commit/dcc6cc227872e65886c46c8958e20db854d083a0", "message": "[FLINK-18355][tests] Try to remove the SchedulerImpl in SlotPoolImplTest", "committedDate": "2020-07-20T03:56:09Z", "type": "forcePushed"}, {"oid": "3a528934242821e9233575a843673e020c060dda", "url": "https://github.com/apache/flink/commit/3a528934242821e9233575a843673e020c060dda", "message": "Refactor the test cases with SlotPoolTestBase", "committedDate": "2020-07-22T09:49:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyNTQzMw==", "url": "https://github.com/apache/flink/pull/12917#discussion_r459625433", "bodyText": "can be final", "author": "zhuzhurk", "createdAt": "2020-07-23T17:52:05Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -123,17 +119,11 @@ public void testAllocateSimpleSlot() throws Exception {\n \t\tCompletableFuture<SlotRequest> slotRequestFuture = new CompletableFuture<>();\n \t\tresourceManagerGateway.setRequestSlotConsumer(slotRequestFuture::complete);\n \n-\t\ttry (SlotPoolImpl slotPool = createSlotPoolImpl()) {\n-\t\t\tsetupSlotPool(slotPool, resourceManagerGateway, mainThreadExecutor);\n-\t\t\tScheduler scheduler = setupScheduler(slotPool, mainThreadExecutor);\n+\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool()) {\n \t\t\tslotPool.registerTaskManager(taskManagerLocation.getResourceID());\n \n \t\t\tSlotRequestId requestId = new SlotRequestId();\n-\t\t\tCompletableFuture<LogicalSlot> future = scheduler.allocateSlot(\n-\t\t\t\trequestId,\n-\t\t\t\tnew DummyScheduledUnit(),\n-\t\t\t\tSlotProfile.noLocality(DEFAULT_TESTING_PROFILE),\n-\t\t\t\ttimeout);\n+\t\t\tCompletableFuture<PhysicalSlot> future = requestNewAllocatedSlot(slotPool, requestId);", "originalCommit": "dcc6cc227872e65886c46c8958e20db854d083a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyNTUyNw==", "url": "https://github.com/apache/flink/pull/12917#discussion_r459625527", "bodyText": "can be final", "author": "zhuzhurk", "createdAt": "2020-07-23T17:52:14Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -145,10 +135,10 @@ public void testAllocateSimpleSlot() throws Exception {\n \n \t\t\tassertTrue(slotPool.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer));\n \n-\t\t\tLogicalSlot slot = future.get(1, TimeUnit.SECONDS);\n+\t\t\tPhysicalSlot physicalSlot = future.get(1, TimeUnit.SECONDS);", "originalCommit": "dcc6cc227872e65886c46c8958e20db854d083a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzMzg1OA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r459633858", "bodyText": "name it as physicalSlot/allocatedSlot would be better", "author": "zhuzhurk", "createdAt": "2020-07-23T18:06:46Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -245,27 +226,25 @@ public void testAllocateWithFreeSlot() throws Exception {\n \n \t\t\tassertTrue(slotPool.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer));\n \n-\t\t\tLogicalSlot slot1 = future1.get(1, TimeUnit.SECONDS);\n+\t\t\tPhysicalSlot slot1 = future1.get(1, TimeUnit.SECONDS);\n \t\t\tassertTrue(future1.isDone());\n \n \t\t\t// return this slot to pool\n-\t\t\tslot1.releaseSlot();\n+\t\t\tslotPool.releaseSlot(requestId1, null);\n \n-\t\t\tCompletableFuture<LogicalSlot> future2 = scheduler.allocateSlot(\n+\t\t\tassertEquals(1, slotPool.getAvailableSlots().size());\n+\t\t\tassertEquals(0, slotPool.getAllocatedSlots().size());\n+\n+\t\t\tOptional<PhysicalSlot> optional = slotPool.allocateAvailableSlot(", "originalCommit": "dcc6cc227872e65886c46c8958e20db854d083a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzNTkyMw==", "url": "https://github.com/apache/flink/pull/12917#discussion_r459635923", "bodyText": "Looks to me there is not need to have the process to allocate slot1, offer slot and release it.\nThe slot offering only would be enough to add a free slot.\nI think we can simplify it, maybe in a separate commit.", "author": "zhuzhurk", "createdAt": "2020-07-23T18:10:24Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -245,27 +226,25 @@ public void testAllocateWithFreeSlot() throws Exception {\n \n \t\t\tassertTrue(slotPool.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer));\n \n-\t\t\tLogicalSlot slot1 = future1.get(1, TimeUnit.SECONDS);\n+\t\t\tPhysicalSlot slot1 = future1.get(1, TimeUnit.SECONDS);\n \t\t\tassertTrue(future1.isDone());\n \n \t\t\t// return this slot to pool\n-\t\t\tslot1.releaseSlot();\n+\t\t\tslotPool.releaseSlot(requestId1, null);", "originalCommit": "dcc6cc227872e65886c46c8958e20db854d083a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0MzM3Mg==", "url": "https://github.com/apache/flink/pull/12917#discussion_r459643372", "bodyText": "these lines, except for \"assertEquals(1, slotPool.getAvailableSlots().size());\",  should be in the section of \"// we'll also accept non requested slots\".", "author": "zhuzhurk", "createdAt": "2020-07-23T18:23:44Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -309,12 +286,16 @@ public void testOfferSlot() throws Exception {\n \n \t\t\t// accepted slot\n \t\t\tassertTrue(slotPool.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer));\n-\t\t\tLogicalSlot slot = future.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS);\n-\t\t\tassertTrue(slot.isAlive());\n+\t\t\tPhysicalSlot slot = future.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS);\n+\t\t\tassertEquals(1, slotPool.getAvailableSlots().size());\n+\t\t\tassertEquals(1, slotPool.getAllocatedSlots().size());\n+\t\t\tassertEquals(taskManagerLocation, slot.getTaskManagerLocation());\n+\t\t\tassertEquals(nonRequestedSlotOffer.getAllocationId(), slot.getAllocationId());", "originalCommit": "dcc6cc227872e65886c46c8958e20db854d083a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NDg0OA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r459644848", "bodyText": "This line is not needed because the allocation id of an AllocatedSlot is immutable.", "author": "zhuzhurk", "createdAt": "2020-07-23T18:26:20Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -309,12 +286,16 @@ public void testOfferSlot() throws Exception {\n \n \t\t\t// accepted slot\n \t\t\tassertTrue(slotPool.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer));\n-\t\t\tLogicalSlot slot = future.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS);\n-\t\t\tassertTrue(slot.isAlive());\n+\t\t\tPhysicalSlot slot = future.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS);\n+\t\t\tassertEquals(1, slotPool.getAvailableSlots().size());\n+\t\t\tassertEquals(1, slotPool.getAllocatedSlots().size());\n+\t\t\tassertEquals(taskManagerLocation, slot.getTaskManagerLocation());\n+\t\t\tassertEquals(nonRequestedSlotOffer.getAllocationId(), slot.getAllocationId());\n \n \t\t\t// duplicated offer with using slot\n \t\t\tassertTrue(slotPool.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer));\n-\t\t\tassertTrue(slot.isAlive());\n+\t\t\tassertEquals(1, slotPool.getAllocatedSlots().size());\n+\t\t\tassertEquals(nonRequestedSlotOffer.getAllocationId(), slot.getAllocationId());", "originalCommit": "dcc6cc227872e65886c46c8958e20db854d083a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NTE1NQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r459645155", "bodyText": "Better to verify the availableSlots as well.", "author": "zhuzhurk", "createdAt": "2020-07-23T18:26:55Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -309,12 +286,16 @@ public void testOfferSlot() throws Exception {\n \n \t\t\t// accepted slot\n \t\t\tassertTrue(slotPool.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer));\n-\t\t\tLogicalSlot slot = future.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS);\n-\t\t\tassertTrue(slot.isAlive());\n+\t\t\tPhysicalSlot slot = future.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS);\n+\t\t\tassertEquals(1, slotPool.getAvailableSlots().size());\n+\t\t\tassertEquals(1, slotPool.getAllocatedSlots().size());\n+\t\t\tassertEquals(taskManagerLocation, slot.getTaskManagerLocation());\n+\t\t\tassertEquals(nonRequestedSlotOffer.getAllocationId(), slot.getAllocationId());\n \n \t\t\t// duplicated offer with using slot\n \t\t\tassertTrue(slotPool.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer));\n-\t\t\tassertTrue(slot.isAlive());\n+\t\t\tassertEquals(1, slotPool.getAllocatedSlots().size());", "originalCommit": "dcc6cc227872e65886c46c8958e20db854d083a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NzE2Mw==", "url": "https://github.com/apache/flink/pull/12917#discussion_r459647163", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tSlotRequestId requestId = new SlotRequestId();\n          \n          \n            \n            \t\t\tCompletableFuture<PhysicalSlot> future = requestNewAllocatedSlot(\n          \n          \n            \n            \t\t\t\tslotPool,\n          \n          \n            \n            \t\t\t\trequestId\n          \n          \n            \n            \t\t\t);\n          \n          \n            \n            \t\t\tCompletableFuture<PhysicalSlot> future = requestNewAllocatedSlot(\n          \n          \n            \n            \t\t\t\tslotPool,\n          \n          \n            \n            \t\t\t\tSlotRequestId()\n          \n          \n            \n            \t\t\t);\n          \n      \n    \n    \n  \n\nrequestId is not reused", "author": "zhuzhurk", "createdAt": "2020-07-23T18:30:25Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -275,16 +254,14 @@ public void testOfferSlot() throws Exception {\n \n \t\tresourceManagerGateway.setRequestSlotConsumer(slotRequestFuture::complete);\n \n-\t\ttry (SlotPoolImpl slotPool = createSlotPoolImpl()) {\n-\t\t\tsetupSlotPool(slotPool, resourceManagerGateway, mainThreadExecutor);\n-\t\t\tScheduler scheduler = setupScheduler(slotPool, mainThreadExecutor);\n+\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool()) {\n \t\t\tslotPool.registerTaskManager(taskManagerLocation.getResourceID());\n \n-\t\t\tCompletableFuture<LogicalSlot> future = scheduler.allocateSlot(\n-\t\t\t\tnew SlotRequestId(),\n-\t\t\t\tnew DummyScheduledUnit(),\n-\t\t\t\tSlotProfile.noLocality(DEFAULT_TESTING_PROFILE),\n-\t\t\t\ttimeout);\n+\t\t\tSlotRequestId requestId = new SlotRequestId();\n+\t\t\tCompletableFuture<PhysicalSlot> future = requestNewAllocatedSlot(\n+\t\t\t\tslotPool,\n+\t\t\t\trequestId\n+\t\t\t);", "originalCommit": "dcc6cc227872e65886c46c8958e20db854d083a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgxOTk2NA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r459819964", "bodyText": "It would be reused in slotPool.releaseSlot(requestId, null) in the line below.", "author": "Thesharing", "createdAt": "2020-07-24T02:04:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NzE2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkwNTc2MQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r459905761", "bodyText": "I see", "author": "zhuzhurk", "createdAt": "2020-07-24T07:59:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NzE2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1NTk3MA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r459655970", "bodyText": "does releaseFuture.get(); not work?", "author": "zhuzhurk", "createdAt": "2020-07-23T18:46:09Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -365,19 +343,26 @@ public void testReleaseResource() throws Exception {\n \n \t\t\tassertTrue(slotPool.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer));\n \n-\t\t\tLogicalSlot slot1 = future1.get(1, TimeUnit.SECONDS);\n+\t\t\tPhysicalSlot slot1 = future1.get(1, TimeUnit.SECONDS);\n \t\t\tassertTrue(future1.isDone());\n \t\t\tassertFalse(future2.isDone());\n \n \t\t\tfinal CompletableFuture<?> releaseFuture = new CompletableFuture<>();\n-\t\t\tfinal DummyPayload dummyPayload = new DummyPayload(releaseFuture);\n \n-\t\t\tslot1.tryAssignPayload(dummyPayload);\n+\t\t\tSingleLogicalSlot logicalSlot = SingleLogicalSlot.allocateFromPhysicalSlot(\n+\t\t\t\trequestId1,\n+\t\t\t\tslot1,\n+\t\t\t\tLocality.UNKNOWN,\n+\t\t\t\tnew DummySlotOwner(),\n+\t\t\t\ttrue\n+\t\t\t);\n+\n+\t\t\tlogicalSlot.tryAssignPayload(new DummyPayload(releaseFuture));\n \n \t\t\tslotPool.releaseTaskManager(taskManagerLocation.getResourceID(), null);\n \n-\t\t\treleaseFuture.get();\n-\t\t\tassertFalse(slot1.isAlive());\n+\t\t\treleaseFuture.get(1, TimeUnit.SECONDS);", "originalCommit": "dcc6cc227872e65886c46c8958e20db854d083a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgyMTEyMA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r459821120", "bodyText": "I'm considering that adding a timeout in relaseFuture.get() will make sure this line won't block the test running indefinitely.", "author": "Thesharing", "createdAt": "2020-07-24T02:10:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1NTk3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgzMzE5Ng==", "url": "https://github.com/apache/flink/pull/12917#discussion_r459833196", "bodyText": "I'll remove them.", "author": "Thesharing", "createdAt": "2020-07-24T03:13:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1NTk3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MTEzNA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r459661134", "bodyText": "According to Flink code style, the right bracket should be placed in the line of the last parameter.", "author": "zhuzhurk", "createdAt": "2020-07-23T18:55:35Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -224,16 +207,14 @@ public void testAllocateWithFreeSlot() throws Exception {\n \t\tfinal CompletableFuture<SlotRequest> slotRequestFuture = new CompletableFuture<>();\n \t\tresourceManagerGateway.setRequestSlotConsumer(slotRequestFuture::complete);\n \n-\t\ttry (SlotPoolImpl slotPool = createSlotPoolImpl()) {\n-\t\t\tsetupSlotPool(slotPool, resourceManagerGateway, mainThreadExecutor);\n-\t\t\tScheduler scheduler = setupScheduler(slotPool, mainThreadExecutor);\n+\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool()) {\n \t\t\tslotPool.registerTaskManager(taskManagerLocation.getResourceID());\n \n-\t\t\tCompletableFuture<LogicalSlot> future1 = scheduler.allocateSlot(\n-\t\t\t\tnew SlotRequestId(),\n-\t\t\t\tnew DummyScheduledUnit(),\n-\t\t\t\tSlotProfile.noLocality(DEFAULT_TESTING_PROFILE),\n-\t\t\t\ttimeout);\n+\t\t\tSlotRequestId requestId1 = new SlotRequestId();\n+\t\t\tCompletableFuture<PhysicalSlot> future1 = requestNewAllocatedSlot(\n+\t\t\t\tslotPool,\n+\t\t\t\trequestId1\n+\t\t\t);", "originalCommit": "dcc6cc227872e65886c46c8958e20db854d083a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2Mzk1NQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r459663955", "bodyText": "Why not replace it with createAndSetUpSlotPool ?\nAlso for the test case testCheckIdleSlot.", "author": "zhuzhurk", "createdAt": "2020-07-23T19:00:46Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -576,7 +550,6 @@ public void testDiscardIdleSlotIfReleasingFailed() throws Exception {\n \t\ttry (TestingSlotPoolImpl slotPool = createSlotPoolImpl(clock)) {\n \n \t\t\tsetupSlotPool(slotPool, resourceManagerGateway, mainThreadExecutor);", "originalCommit": "dcc6cc227872e65886c46c8958e20db854d083a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgyMTcxMg==", "url": "https://github.com/apache/flink/pull/12917#discussion_r459821712", "bodyText": "Because in this commit there is no createAndSetUpSlotPool(Clock clock) method in SlotPoolImpl related test cases. In future commits, I replace all the createAndSetUpSlotPool with SlotPoolBuilder.", "author": "Thesharing", "createdAt": "2020-07-24T02:13:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2Mzk1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkwNzIxOQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r459907219", "bodyText": "I see.", "author": "zhuzhurk", "createdAt": "2020-07-24T08:02:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2Mzk1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2NjgzNA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r459666834", "bodyText": "this change is unrelated and not necessary.\nLet's exclude it from this commit.", "author": "zhuzhurk", "createdAt": "2020-07-23T19:06:07Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -666,6 +639,8 @@ public void testFreeFailedSlots() throws Exception {\n \t\t\tfinal Optional<ResourceID> emptyTaskExecutorFuture = slotPool.failAllocation(\n \t\t\t\tslotOffer.getAllocationId(),\n \t\t\t\tfailException);\n+\n+\t\t\tassertTrue(emptyTaskExecutorFuture.isPresent());", "originalCommit": "dcc6cc227872e65886c46c8958e20db854d083a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2NzMzMQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r459667331", "bodyText": "why making this change?", "author": "zhuzhurk", "createdAt": "2020-07-23T19:06:56Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -704,7 +679,7 @@ public void testCreateAllocatedSlotReport() throws Exception {\n \t\t\tslotPool.offerSlots(taskManagerLocation, taskManagerGateway, slotOffers);\n \n \t\t\t// wait for the completion of slot future\n-\t\t\tslotRequestFuture.get();\n+\t\t\tslotRequestFuture.get(1, TimeUnit.SECONDS);", "originalCommit": "dcc6cc227872e65886c46c8958e20db854d083a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2OTYyOA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r459669628", "bodyText": "Let's move createSlotPoolImpl() to be below this method because it is first (and only) used here.\nAlso let's remove the @Nonnull tag of it because it is against current code style.", "author": "zhuzhurk", "createdAt": "2020-07-23T19:11:38Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -893,14 +866,6 @@ protected boolean matchesSafely(AllocatedSlotInfo item, Description mismatchDesc\n \t\t};\n \t}\n \n-\tprivate CompletableFuture<LogicalSlot> allocateSlot(Scheduler scheduler, SlotRequestId slotRequestId) {\n-\t\treturn scheduler.allocateSlot(\n-\t\t\tslotRequestId,\n-\t\t\tnew DummyScheduledUnit(),\n-\t\t\tSlotProfile.noRequirements(),\n-\t\t\ttimeout);\n-\t}\n-\n \tprivate SlotPoolImpl createAndSetUpSlotPool() throws Exception {", "originalCommit": "dcc6cc227872e65886c46c8958e20db854d083a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1c5870c57b64436014900d67be2005395e007a52", "url": "https://github.com/apache/flink/commit/1c5870c57b64436014900d67be2005395e007a52", "message": "[hotfix][tests] Remove redundant codes in SlotPoolImplTest#testAllocateWithFreeSlot", "committedDate": "2020-07-24T05:00:46Z", "type": "forcePushed"}, {"oid": "664fa0ad0056da67af2a8580cf6ebfc82dad9ecc", "url": "https://github.com/apache/flink/commit/664fa0ad0056da67af2a8580cf6ebfc82dad9ecc", "message": "[FLINK-18355][tests] Remove redundant codes in SlotPoolImplTest#testAllocateWithFreeSlot", "committedDate": "2020-07-27T03:38:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0MjMzNw==", "url": "https://github.com/apache/flink/pull/12917#discussion_r461042337", "bodyText": "I'd prefer to move this method to be below createAndSetUpSlotPool() because it is first and only invoked there.", "author": "zhuzhurk", "createdAt": "2020-07-27T17:12:06Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -145,14 +133,13 @@ public void testAllocateSimpleSlot() throws Exception {\n \n \t\t\tassertTrue(slotPool.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer));\n \n-\t\t\tLogicalSlot slot = future.get(1, TimeUnit.SECONDS);\n+\t\t\tfinal PhysicalSlot physicalSlot = future.get(1, TimeUnit.SECONDS);\n \t\t\tassertTrue(future.isDone());\n-\t\t\tassertTrue(slot.isAlive());\n-\t\t\tassertEquals(taskManagerLocation, slot.getTaskManagerLocation());\n+\t\t\tassertEquals(taskManagerLocation, physicalSlot.getTaskManagerLocation());\n+\t\t\tassertEquals(slotRequest.getAllocationId(), physicalSlot.getAllocationId());\n \t\t}\n \t}\n \n-\t@Nonnull\n \tprivate SlotPoolImpl createSlotPoolImpl() {", "originalCommit": "3b95accecb1606d14867c2804a1cd54ffd11beb3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2MTkyMw==", "url": "https://github.com/apache/flink/pull/12917#discussion_r461061923", "bodyText": "It's fine to not do this because in a later commit you will remove it.\nBut then I think you also do not need to remove @Nonnull in this commit.", "author": "zhuzhurk", "createdAt": "2020-07-27T17:45:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0MjMzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAxNjg4Nw==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462016887", "bodyText": "Okay, when I rearrange the commits I'll take care of this.", "author": "Thesharing", "createdAt": "2020-07-29T03:30:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0MjMzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0Mjc1NA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r461042754", "bodyText": "Boolean -> boolean", "author": "zhuzhurk", "createdAt": "2020-07-27T17:12:51Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBuilder.java", "diffHunk": "@@ -54,23 +56,47 @@ public SlotPoolBuilder setBatchSlotTimeout(Time batchSlotTimeout) {\n \t\treturn this;\n \t}\n \n+\tpublic SlotPoolBuilder setIdleSlotTimeout(Time idleSlotTimeout) {\n+\t\tthis.idleSlotTimeout = idleSlotTimeout;\n+\t\treturn this;\n+\t}\n+\n \tpublic SlotPoolBuilder setClock(Clock clock) {\n \t\tthis.clock = clock;\n \t\treturn this;\n \t}\n \n-\tpublic TestingSlotPoolImpl build() throws Exception {\n+\tpublic TestingSlotPoolImpl build(JobID jobID, Boolean connectToResourceManager) throws Exception {", "originalCommit": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2MTA1OA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r461061058", "bodyText": "Can we add setters for jobID and connectToResourceManager, and not make them params of build()?\nUsually build() params are necessary ones without default values.", "author": "zhuzhurk", "createdAt": "2020-07-27T17:44:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0Mjc1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAyMDc3MA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462020770", "bodyText": "The param connectToResourceManager has been removed in the fix-up commit.", "author": "Thesharing", "createdAt": "2020-07-29T03:47:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0Mjc1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NDc0MQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r461044741", "bodyText": "why changing the default value of batchSlotTimeout?", "author": "zhuzhurk", "createdAt": "2020-07-27T17:16:10Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBuilder.java", "diffHunk": "@@ -35,9 +36,10 @@\n  */\n public class SlotPoolBuilder {\n \n-\tprivate ComponentMainThreadExecutor componentMainThreadExecutor;\n-\tprivate ResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway();\n-\tprivate Time batchSlotTimeout = Time.milliseconds(2L);\n+\tprivate final ComponentMainThreadExecutor componentMainThreadExecutor;\n+\tprivate ResourceManagerGateway resourceManagerGateway;\n+\tprivate Time batchSlotTimeout = Time.milliseconds(JobManagerOptions.SLOT_IDLE_TIMEOUT.defaultValue());", "originalCommit": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAxNzkzMg==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462017932", "bodyText": "Because in most slot pool related test cases the batchSlotTimeout is set to be this value, and only in some test cases, the batchSlotTimeout is set to be 2 milliseconds. I set the default value to be this value, and explicitly set other timeout values in their own cases.", "author": "Thesharing", "createdAt": "2020-07-29T03:35:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NDc0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxNjI2NQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462716265", "bodyText": "I see. Thanks for the explanation.", "author": "zhuzhurk", "createdAt": "2020-07-30T03:42:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NDc0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NjA0NA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r461046044", "bodyText": "A same TIMEOUT is already defined in the test base", "author": "zhuzhurk", "createdAt": "2020-07-27T17:18:27Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -88,28 +84,21 @@\n /**\n  * Tests for the {@link SlotPoolImpl}.\n  */\n-public class SlotPoolImplTest extends TestLogger {\n+public class SlotPoolImplTest extends SlotPoolTestBase {\n \n-\tprivate final Time timeout = Time.seconds(10L);\n-\n-\tprivate JobID jobId;\n+\tprivate static final Time TIMEOUT = Time.seconds(10L);", "originalCommit": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAyMjg1MA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462022850", "bodyText": "Removed.", "author": "Thesharing", "createdAt": "2020-07-29T03:55:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NjA0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NzkwOA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r461047908", "bodyText": "It's better have one more indentation for the params to differentiate them from the method body.\nAnother option is to add an empty line between the params and the method body.", "author": "zhuzhurk", "createdAt": "2020-07-27T17:21:33Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolTestBase.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.clusterframework.types.ResourceProfile;\n+import org.apache.flink.runtime.concurrent.ComponentMainThreadExecutor;\n+import org.apache.flink.runtime.concurrent.ComponentMainThreadExecutorServiceAdapter;\n+import org.apache.flink.runtime.jobmaster.SlotRequestId;\n+import org.apache.flink.runtime.resourcemanager.utils.TestingResourceManagerGateway;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Before;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Test base for {@link SlotPool} related test cases.\n+ */\n+public abstract class SlotPoolTestBase extends TestLogger {\n+\tprotected static final Time TIMEOUT = Time.seconds(10L);\n+\n+\tprotected final ComponentMainThreadExecutor mainThreadExecutor =\n+\t\tComponentMainThreadExecutorServiceAdapter.forMainThread();\n+\n+\tprotected TestingResourceManagerGateway resourceManagerGateway;\n+\tprotected SlotPoolBuilder slotPoolBuilder;\n+\n+\t@Before\n+\tpublic void setup() throws Exception {\n+\t\tresourceManagerGateway = new TestingResourceManagerGateway();\n+\t\tslotPoolBuilder = new SlotPoolBuilder(mainThreadExecutor).setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tprotected TestingSlotPoolImpl createAndSetUpSlotPool() throws Exception {\n+\t\treturn slotPoolBuilder.build();\n+\t}\n+\n+\tprotected void requestNewAllocatedSlots(final SlotPool slotPool, final SlotRequestId... slotRequestIds) {\n+\t\tfor (SlotRequestId slotRequestId : slotRequestIds) {\n+\t\t\trequestNewAllocatedSlot(slotPool, slotRequestId);\n+\t\t}\n+\t}\n+\n+\tprotected CompletableFuture<PhysicalSlot> requestNewAllocatedSlot(\n+\t\tfinal SlotPool slotPool,\n+\t\tfinal SlotRequestId slotRequestId) {", "originalCommit": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA5Nzg3Mg==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462097872", "bodyText": "Done.", "author": "Thesharing", "createdAt": "2020-07-29T07:34:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NzkwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0ODg1MQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r461048851", "bodyText": "can be static and package private", "author": "zhuzhurk", "createdAt": "2020-07-27T17:23:09Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolTestBase.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.clusterframework.types.ResourceProfile;\n+import org.apache.flink.runtime.concurrent.ComponentMainThreadExecutor;\n+import org.apache.flink.runtime.concurrent.ComponentMainThreadExecutorServiceAdapter;\n+import org.apache.flink.runtime.jobmaster.SlotRequestId;\n+import org.apache.flink.runtime.resourcemanager.utils.TestingResourceManagerGateway;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Before;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Test base for {@link SlotPool} related test cases.\n+ */\n+public abstract class SlotPoolTestBase extends TestLogger {\n+\tprotected static final Time TIMEOUT = Time.seconds(10L);\n+\n+\tprotected final ComponentMainThreadExecutor mainThreadExecutor =\n+\t\tComponentMainThreadExecutorServiceAdapter.forMainThread();\n+\n+\tprotected TestingResourceManagerGateway resourceManagerGateway;\n+\tprotected SlotPoolBuilder slotPoolBuilder;\n+\n+\t@Before\n+\tpublic void setup() throws Exception {\n+\t\tresourceManagerGateway = new TestingResourceManagerGateway();\n+\t\tslotPoolBuilder = new SlotPoolBuilder(mainThreadExecutor).setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tprotected TestingSlotPoolImpl createAndSetUpSlotPool() throws Exception {\n+\t\treturn slotPoolBuilder.build();\n+\t}\n+\n+\tprotected void requestNewAllocatedSlots(final SlotPool slotPool, final SlotRequestId... slotRequestIds) {\n+\t\tfor (SlotRequestId slotRequestId : slotRequestIds) {\n+\t\t\trequestNewAllocatedSlot(slotPool, slotRequestId);\n+\t\t}\n+\t}\n+\n+\tprotected CompletableFuture<PhysicalSlot> requestNewAllocatedSlot(\n+\t\tfinal SlotPool slotPool,\n+\t\tfinal SlotRequestId slotRequestId) {\n+\t\treturn requestNewAllocatedSlot(slotPool, slotRequestId, TIMEOUT);\n+\t}\n+\n+\tprotected CompletableFuture<PhysicalSlot> requestNewAllocatedSlot(", "originalCommit": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA5Nzk3Mg==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462097972", "bodyText": "Done.", "author": "Thesharing", "createdAt": "2020-07-29T07:34:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0ODg1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0ODk2Ng==", "url": "https://github.com/apache/flink/pull/12917#discussion_r461048966", "bodyText": "can be static and package private", "author": "zhuzhurk", "createdAt": "2020-07-27T17:23:21Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolTestBase.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.clusterframework.types.ResourceProfile;\n+import org.apache.flink.runtime.concurrent.ComponentMainThreadExecutor;\n+import org.apache.flink.runtime.concurrent.ComponentMainThreadExecutorServiceAdapter;\n+import org.apache.flink.runtime.jobmaster.SlotRequestId;\n+import org.apache.flink.runtime.resourcemanager.utils.TestingResourceManagerGateway;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Before;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Test base for {@link SlotPool} related test cases.\n+ */\n+public abstract class SlotPoolTestBase extends TestLogger {\n+\tprotected static final Time TIMEOUT = Time.seconds(10L);\n+\n+\tprotected final ComponentMainThreadExecutor mainThreadExecutor =\n+\t\tComponentMainThreadExecutorServiceAdapter.forMainThread();\n+\n+\tprotected TestingResourceManagerGateway resourceManagerGateway;\n+\tprotected SlotPoolBuilder slotPoolBuilder;\n+\n+\t@Before\n+\tpublic void setup() throws Exception {\n+\t\tresourceManagerGateway = new TestingResourceManagerGateway();\n+\t\tslotPoolBuilder = new SlotPoolBuilder(mainThreadExecutor).setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tprotected TestingSlotPoolImpl createAndSetUpSlotPool() throws Exception {\n+\t\treturn slotPoolBuilder.build();\n+\t}\n+\n+\tprotected void requestNewAllocatedSlots(final SlotPool slotPool, final SlotRequestId... slotRequestIds) {\n+\t\tfor (SlotRequestId slotRequestId : slotRequestIds) {\n+\t\t\trequestNewAllocatedSlot(slotPool, slotRequestId);\n+\t\t}\n+\t}\n+\n+\tprotected CompletableFuture<PhysicalSlot> requestNewAllocatedSlot(", "originalCommit": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA5NzkyMw==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462097923", "bodyText": "Done.", "author": "Thesharing", "createdAt": "2020-07-29T07:34:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0ODk2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1MDYzNQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r461050635", "bodyText": "a same mainThreadExecutor is already defined in the test base", "author": "zhuzhurk", "createdAt": "2020-07-27T17:26:06Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -88,28 +84,21 @@\n /**\n  * Tests for the {@link SlotPoolImpl}.\n  */\n-public class SlotPoolImplTest extends TestLogger {\n+public class SlotPoolImplTest extends SlotPoolTestBase {\n \n-\tprivate final Time timeout = Time.seconds(10L);\n-\n-\tprivate JobID jobId;\n+\tprivate static final Time TIMEOUT = Time.seconds(10L);\n+\tprivate static final ComponentMainThreadExecutor mainThreadExecutor =", "originalCommit": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAyMjg4Nw==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462022887", "bodyText": "Removed.", "author": "Thesharing", "createdAt": "2020-07-29T03:55:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1MDYzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1MjUxMw==", "url": "https://github.com/apache/flink/pull/12917#discussion_r461052513", "bodyText": "why removing registerTaskManager()?", "author": "zhuzhurk", "createdAt": "2020-07-27T17:29:09Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -777,26 +764,15 @@ public void testSlotsOfferedWithoutResourceManagerConnected() throws Exception {\n \t\t}\n \t}\n \n-\tprivate void requestNewAllocatedSlots(final SlotPool slotPool, final SlotRequestId... slotRequestIds) {\n-\t\tfor (SlotRequestId slotRequestId : slotRequestIds) {\n-\t\t\trequestNewAllocatedSlot(slotPool, slotRequestId);\n-\t\t}\n-\t}\n-\n-\tprivate CompletableFuture<PhysicalSlot> requestNewAllocatedSlot(\n-\t\t\tfinal SlotPool slotPool,\n-\t\t\tfinal SlotRequestId slotRequestId) {\n-\t\treturn slotPool.requestNewAllocatedSlot(slotRequestId, ResourceProfile.UNKNOWN, timeout);\n-\t}\n-\n \tprivate void offerSlot(final SlotPoolImpl slotPool, final AllocationID allocationId) {\n \t\tfinal SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.ANY);\n-\t\tslotPool.registerTaskManager(taskManagerLocation.getResourceID());", "originalCommit": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA1NTc0MQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462055741", "bodyText": "I've already brought it back in the fix-up commit.", "author": "Thesharing", "createdAt": "2020-07-29T05:57:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1MjUxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1Mzg5Mw==", "url": "https://github.com/apache/flink/pull/12917#discussion_r461053893", "bodyText": "why changing registerAndOfferSlots to offerSlots? IIRC, a location must be registered before offering slots from it?", "author": "zhuzhurk", "createdAt": "2020-07-27T17:31:22Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -665,19 +643,21 @@ public void testCreateAllocatedSlotReport() throws Exception {\n \t\t\tslotRequestFuture.get();\n \n \t\t\tfinal AllocatedSlotReport slotReport = slotPool.createAllocatedSlotReport(taskManagerLocation.getResourceID());\n-\t\t\tassertThat(jobId, is(slotReport.getJobId()));\n+\t\t\tassertThat(jobID, is(slotReport.getJobId()));\n \t\t\tassertThat(slotReport.getAllocatedSlotInfos(), containsInAnyOrder(isEachEqual(allocatedSlotInfos)));\n \t\t}\n \t}\n \n \t@Test\n \tpublic void testCalculationOfTaskExecutorUtilization() throws Exception {\n \t\ttry (final SlotPoolImpl slotPool = createAndSetUpSlotPool()) {\n+\t\t\tslotPool.registerTaskManager(taskManagerLocation.getResourceID());\n+\n \t\t\tfinal TaskManagerLocation firstTaskManagerLocation = new LocalTaskManagerLocation();\n \t\t\tfinal TaskManagerLocation secondTaskManagerLocation = new LocalTaskManagerLocation();\n \n-\t\t\tfinal List<AllocationID> firstTaskManagersSlots = registerAndOfferSlots(firstTaskManagerLocation, slotPool, 4);\n-\t\t\tfinal List<AllocationID> secondTaskManagersSlots = registerAndOfferSlots(secondTaskManagerLocation, slotPool, 4);\n+\t\t\tfinal List<AllocationID> firstTaskManagersSlots = offerSlots(firstTaskManagerLocation, slotPool, 4);", "originalCommit": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2MTQzOQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462161439", "bodyText": "I've undone this modification.", "author": "Thesharing", "createdAt": "2020-07-29T09:22:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1Mzg5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1NTA4OQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r461055089", "bodyText": "This change should not be part of this commit.", "author": "zhuzhurk", "createdAt": "2020-07-27T17:33:25Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -275,14 +260,14 @@ public void testOfferSlot() throws Exception {\n \n \t\t\t// we'll also accept non requested slots\n \t\t\tassertTrue(slotPool.offerSlot(taskManagerLocation, taskManagerGateway, nonRequestedSlotOffer));\n+\t\t\tassertEquals(1, slotPool.getAllocatedSlots().size());\n+\t\t\tfinal PhysicalSlot slot = future.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS);\n+\t\t\tassertEquals(taskManagerLocation, slot.getTaskManagerLocation());\n+\t\t\tassertEquals(nonRequestedSlotOffer.getAllocationId(), slot.getAllocationId());", "originalCommit": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAyMzEyNQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462023125", "bodyText": "I'll put it into the first commit when I rearrange the commits.", "author": "Thesharing", "createdAt": "2020-07-29T03:56:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1NTA4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1NjEzMQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r461056131", "bodyText": "can we have a createAndSetUpSlotPool(JobID)?", "author": "zhuzhurk", "createdAt": "2020-07-27T17:35:11Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -635,8 +612,9 @@ public void testFreeFailedSlots() throws Exception {\n \t */\n \t@Test\n \tpublic void testCreateAllocatedSlotReport() throws Exception {\n+\t\tfinal JobID jobID = new JobID();\n \n-\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool()) {\n+\t\ttry (SlotPoolImpl slotPool = slotPoolBuilder.build(jobID)) {", "originalCommit": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA1MzIyMg==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462053222", "bodyText": "Done.", "author": "Thesharing", "createdAt": "2020-07-29T05:49:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1NjEzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1NzA1MA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r461057050", "bodyText": "Let's name it as jobId which is more common in Flink code.", "author": "zhuzhurk", "createdAt": "2020-07-27T17:36:54Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -635,8 +612,9 @@ public void testFreeFailedSlots() throws Exception {\n \t */\n \t@Test\n \tpublic void testCreateAllocatedSlotReport() throws Exception {\n+\t\tfinal JobID jobID = new JobID();", "originalCommit": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA1Mjg2Nw==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462052867", "bodyText": "Done. I'll pay attention to this in the future.", "author": "Thesharing", "createdAt": "2020-07-29T05:48:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1NzA1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1ODU1MQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r461058551", "bodyText": "why removing the default value?", "author": "zhuzhurk", "createdAt": "2020-07-27T17:39:42Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBuilder.java", "diffHunk": "@@ -35,9 +36,10 @@\n  */\n public class SlotPoolBuilder {\n \n-\tprivate ComponentMainThreadExecutor componentMainThreadExecutor;\n-\tprivate ResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway();", "originalCommit": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAxNzI3NQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462017275", "bodyText": "I've already added the default value back in the fix-up commit.", "author": "Thesharing", "createdAt": "2020-07-29T03:32:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1ODU1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1OTA4MA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r461059080", "bodyText": "can we invoke connectToResourceManager only when connectToResourceManager==true and resourceManagerGateway != null?", "author": "zhuzhurk", "createdAt": "2020-07-27T17:40:40Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBuilder.java", "diffHunk": "@@ -54,23 +56,47 @@ public SlotPoolBuilder setBatchSlotTimeout(Time batchSlotTimeout) {\n \t\treturn this;\n \t}\n \n+\tpublic SlotPoolBuilder setIdleSlotTimeout(Time idleSlotTimeout) {\n+\t\tthis.idleSlotTimeout = idleSlotTimeout;\n+\t\treturn this;\n+\t}\n+\n \tpublic SlotPoolBuilder setClock(Clock clock) {\n \t\tthis.clock = clock;\n \t\treturn this;\n \t}\n \n-\tpublic TestingSlotPoolImpl build() throws Exception {\n+\tpublic TestingSlotPoolImpl build(JobID jobID, Boolean connectToResourceManager) throws Exception {\n \t\tfinal TestingSlotPoolImpl slotPool = new TestingSlotPoolImpl(\n-\t\t\tnew JobID(),\n+\t\t\tjobID,\n \t\t\tclock,\n \t\t\tTestingUtils.infiniteTime(),\n-\t\t\tTestingUtils.infiniteTime(),\n+\t\t\tidleSlotTimeout,\n \t\t\tbatchSlotTimeout);\n \n \t\tslotPool.start(JobMasterId.generate(), \"foobar\", componentMainThreadExecutor);\n \n-\t\tCompletableFuture.runAsync(() -> slotPool.connectToResourceManager(resourceManagerGateway), componentMainThreadExecutor).join();\n+\t\tif (connectToResourceManager) {", "originalCommit": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAyMDg3OA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462020878", "bodyText": "Done.", "author": "Thesharing", "createdAt": "2020-07-29T03:47:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1OTA4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI1OTMzMw==", "url": "https://github.com/apache/flink/pull/12917#discussion_r461259333", "bodyText": "Can we have a createAndSetupSlotPool(clock, idleSlotTimeout)?", "author": "zhuzhurk", "createdAt": "2020-07-28T01:13:37Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -510,33 +496,24 @@ public void testCheckIdleSlot() throws Exception {\n \n \t\t\tslotPool.triggerCheckIdleSlot();\n \n-\t\t\tfinal AllocationID freedSlot = freedSlots.poll(timeout.toMilliseconds(), TimeUnit.MILLISECONDS);\n+\t\t\tfinal AllocationID freedSlot = freedSlots.poll(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS);\n \n \t\t\tassertThat(freedSlot, Matchers.is(expiredSlotID));\n \t\t\tassertThat(freedSlots.isEmpty(), Matchers.is(true));\n \t\t}\n \t}\n \n-\tprivate TestingSlotPoolImpl createSlotPoolImpl(ManualClock clock) {\n-\t\treturn new TestingSlotPoolImpl(\n-\t\t\tjobId,\n-\t\t\tclock,\n-\t\t\tTestingUtils.infiniteTime(),\n-\t\t\ttimeout,\n-\t\t\tTestingUtils.infiniteTime());\n-\t}\n-\n \t/**\n \t * Tests that idle slots which cannot be released will be discarded. See FLINK-11059.\n \t */\n \t@Test\n \tpublic void testDiscardIdleSlotIfReleasingFailed() throws Exception {\n \t\tfinal ManualClock clock = new ManualClock();\n \n-\t\ttry (TestingSlotPoolImpl slotPool = createSlotPoolImpl(clock)) {\n-\n-\t\t\tsetupSlotPool(slotPool, resourceManagerGateway, mainThreadExecutor);\n-\n+\t\ttry (TestingSlotPoolImpl slotPool = slotPoolBuilder", "originalCommit": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAyMzE2OQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462023169", "bodyText": "Done.", "author": "Thesharing", "createdAt": "2020-07-29T03:56:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI1OTMzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxMjgwOA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462712808", "bodyText": "looks to me all the createAndSetUpSlotPool(..) methods can be package private?", "author": "zhuzhurk", "createdAt": "2020-07-30T03:28:31Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolTestBase.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.clusterframework.types.ResourceProfile;\n+import org.apache.flink.runtime.concurrent.ComponentMainThreadExecutor;\n+import org.apache.flink.runtime.concurrent.ComponentMainThreadExecutorServiceAdapter;\n+import org.apache.flink.runtime.jobmaster.SlotRequestId;\n+import org.apache.flink.runtime.resourcemanager.ResourceManagerGateway;\n+import org.apache.flink.runtime.resourcemanager.utils.TestingResourceManagerGateway;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Before;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Test base for {@link SlotPool} related test cases.\n+ */\n+public abstract class SlotPoolTestBase extends TestLogger {\n+\tprotected static final Time TIMEOUT = Time.seconds(10L);\n+\n+\tprotected final ComponentMainThreadExecutor mainThreadExecutor =\n+\t\tComponentMainThreadExecutorServiceAdapter.forMainThread();\n+\n+\tprotected TestingResourceManagerGateway resourceManagerGateway;\n+\tprotected SlotPoolBuilder slotPoolBuilder;\n+\n+\t@Before\n+\tpublic void setup() throws Exception {\n+\t\tresourceManagerGateway = new TestingResourceManagerGateway();\n+\t\tslotPoolBuilder = new SlotPoolBuilder(mainThreadExecutor).setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tprotected TestingSlotPoolImpl createAndSetUpSlotPool() throws Exception {", "originalCommit": "084c389fe20a234deb417d41a8600fa687b47570", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc4ODU3Nw==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462788577", "bodyText": "Got it. Done.", "author": "Thesharing", "createdAt": "2020-07-30T07:06:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxMjgwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxMzk2OA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462713968", "bodyText": "It's better to invoke super.setup(); first in case it overrides any actions in the sub-class.", "author": "zhuzhurk", "createdAt": "2020-07-30T03:33:10Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -87,56 +77,38 @@\n import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n /**\n  * Tests for the {@link SlotPoolImpl}.\n  */\n-public class SlotPoolImplTest extends TestLogger {\n-\n-\tprivate final Time timeout = Time.seconds(10L);\n-\n-\tprivate JobID jobId;\n+public class SlotPoolImplTest extends SlotPoolTestBase {\n \n \tprivate TaskManagerLocation taskManagerLocation;\n-\n \tprivate SimpleAckingTaskManagerGateway taskManagerGateway;\n \n-\tprivate TestingResourceManagerGateway resourceManagerGateway;\n-\n-\tprivate ComponentMainThreadExecutor mainThreadExecutor =\n-\t\tComponentMainThreadExecutorServiceAdapter.forMainThread();\n-\n \t@Before\n-\tpublic void setUp() throws Exception {\n-\t\tthis.jobId = new JobID();\n-\n+\t@Override\n+\tpublic void setup() throws Exception {\n \t\ttaskManagerLocation = new LocalTaskManagerLocation();\n \t\ttaskManagerGateway = new SimpleAckingTaskManagerGateway();\n-\t\tresourceManagerGateway = new TestingResourceManagerGateway();\n+\t\tsuper.setup();", "originalCommit": "084c389fe20a234deb417d41a8600fa687b47570", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjczODIzMg==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462738232", "bodyText": "Agreed. Done.", "author": "Thesharing", "createdAt": "2020-07-30T05:07:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxMzk2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxNDQzMw==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462714433", "bodyText": "nit: allocationId", "author": "zhuzhurk", "createdAt": "2020-07-30T03:35:04Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -224,48 +182,27 @@ public void testAllocateWithFreeSlot() throws Exception {\n \t\tfinal CompletableFuture<SlotRequest> slotRequestFuture = new CompletableFuture<>();\n \t\tresourceManagerGateway.setRequestSlotConsumer(slotRequestFuture::complete);\n \n-\t\ttry (SlotPoolImpl slotPool = createSlotPoolImpl()) {\n-\t\t\tsetupSlotPool(slotPool, resourceManagerGateway, mainThreadExecutor);\n-\t\t\tScheduler scheduler = setupScheduler(slotPool, mainThreadExecutor);\n+\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool()) {\n \t\t\tslotPool.registerTaskManager(taskManagerLocation.getResourceID());\n \n-\t\t\tCompletableFuture<LogicalSlot> future1 = scheduler.allocateSlot(\n-\t\t\t\tnew SlotRequestId(),\n-\t\t\t\tnew DummyScheduledUnit(),\n-\t\t\t\tSlotProfile.noLocality(DEFAULT_TESTING_PROFILE),\n-\t\t\t\ttimeout);\n-\t\t\tassertFalse(future1.isDone());\n-\n-\t\t\tfinal SlotRequest slotRequest = slotRequestFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS);\n-\n+\t\t\tAllocationID allocationID = new AllocationID();", "originalCommit": "084c389fe20a234deb417d41a8600fa687b47570", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc5NDk3NA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462794974", "bodyText": "Done.", "author": "Thesharing", "createdAt": "2020-07-30T07:13:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxNDQzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxNDkxMA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462714910", "bodyText": "nit: allocatedSlotFuture", "author": "zhuzhurk", "createdAt": "2020-07-30T03:37:03Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -591,17 +501,19 @@ public void testDiscardIdleSlotIfReleasingFailed() throws Exception {\n \n \t\t\tassertThat(slotPool.offerSlot(taskManagerLocation, taskManagerGateway, slotToExpire), Matchers.is(true));\n \n-\t\t\tclock.advanceTime(timeout.toMilliseconds() + 1, TimeUnit.MILLISECONDS);\n+\t\t\tclock.advanceTime(TIMEOUT.toMilliseconds() + 1, TimeUnit.MILLISECONDS);\n \n \t\t\tslotPool.triggerCheckIdleSlot();\n \n \t\t\tfreeSlotLatch.await();\n \n-\t\t\tCompletableFuture<LogicalSlot> allocatedSlotFuture = allocateSlot(scheduler, new SlotRequestId());\n+\t\t\tfinal CompletableFuture<PhysicalSlot> future = requestNewAllocatedSlot(", "originalCommit": "084c389fe20a234deb417d41a8600fa687b47570", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc5NTg1MQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462795851", "bodyText": "Done.", "author": "Thesharing", "createdAt": "2020-07-30T07:14:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxNDkxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxNTEzMg==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462715132", "bodyText": "this right bracket should be at the end of the previous line.", "author": "zhuzhurk", "createdAt": "2020-07-30T03:38:07Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -676,18 +586,18 @@ public void testFreeFailedSlots() throws Exception {\n \t */\n \t@Test\n \tpublic void testCreateAllocatedSlotReport() throws Exception {\n+\t\tfinal JobID jobId = new JobID();\n \n-\t\ttry (SlotPoolImpl slotPool = createSlotPoolImpl()) {\n+\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool(jobId)) {\n \n \t\t\tfinal ArrayBlockingQueue<AllocationID> allocationIds = new ArrayBlockingQueue<>(1);\n \t\t\tresourceManagerGateway.setRequestSlotConsumer(\n-\t\t\t\t\tslotRequest -> allocationIds.offer(slotRequest.getAllocationId()));\n-\n-\t\t\tsetupSlotPool(slotPool, resourceManagerGateway, mainThreadExecutor);\n-\t\t\tScheduler scheduler = setupScheduler(slotPool, mainThreadExecutor);\n+\t\t\t\tslotRequest -> allocationIds.offer(slotRequest.getAllocationId()));\n \n-\t\t\tfinal SlotRequestId slotRequestId = new SlotRequestId();\n-\t\t\tfinal CompletableFuture<LogicalSlot> slotRequestFuture = allocateSlot(scheduler, slotRequestId);\n+\t\t\tfinal CompletableFuture<PhysicalSlot> slotRequestFuture = requestNewAllocatedSlot(\n+\t\t\t\tslotPool,\n+\t\t\t\tnew SlotRequestId()\n+\t\t\t);", "originalCommit": "084c389fe20a234deb417d41a8600fa687b47570", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc5NjIwOQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462796209", "bodyText": "Done.", "author": "Thesharing", "createdAt": "2020-07-30T07:15:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxNTEzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxNTUxMQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462715511", "bodyText": "registerTaskManager is not need because the following registerAndOfferSlot will do it.", "author": "zhuzhurk", "createdAt": "2020-07-30T03:39:39Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -776,7 +686,9 @@ public void testOrphanedAllocationIsCanceledIfNotRemapped() throws Exception {\n \t\tfinal List<AllocationID> canceledAllocations = new ArrayList<>();\n \t\tresourceManagerGateway.setCancelSlotConsumer(canceledAllocations::add);\n \n-\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool()) {\n+\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool(resourceManagerGateway)) {\n+\t\t\tslotPool.registerTaskManager(taskManagerLocation.getResourceID());", "originalCommit": "084c389fe20a234deb417d41a8600fa687b47570", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3Njk0MQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462776941", "bodyText": "Done.", "author": "Thesharing", "createdAt": "2020-07-30T06:51:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxNTUxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxODcwNQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462718705", "bodyText": "I guess this change is unintentional?", "author": "zhuzhurk", "createdAt": "2020-07-30T03:52:42Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/TestingSlotPoolImpl.java", "diffHunk": "@@ -71,9 +81,9 @@ boolean isBatchSlotRequestTimeoutCheckEnabled() {\n \n \t@Override\n \tpublic CompletableFuture<PhysicalSlot> requestNewAllocatedSlot(\n-\t\t\tfinal SlotRequestId slotRequestId,\n-\t\t\tfinal ResourceProfile resourceProfile,\n-\t\t\t@Nullable final Time timeout) {\n+\t\tfinal SlotRequestId slotRequestId,\n+\t\tfinal ResourceProfile resourceProfile,\n+\t\t@Nullable final Time timeout) {\n ", "originalCommit": "084c389fe20a234deb417d41a8600fa687b47570", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyNDk2Mg==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462824962", "bodyText": "Yes. Undone this change in a new commit.", "author": "Thesharing", "createdAt": "2020-07-30T08:10:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxODcwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxOTYzNQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462719635", "bodyText": "Could we have a separate commit to merge SlotPoolInteractionsTest#TestingSlotPool with TestingSlotPoolImpl?\nIt can be easier to reasoning which methods are ported instead of being newly added.", "author": "zhuzhurk", "createdAt": "2020-07-30T03:56:13Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/TestingSlotPoolImpl.java", "diffHunk": "@@ -39,6 +43,10 @@\n \n \tprivate ResourceProfile lastRequestedSlotResourceProfile;\n \n+\tprivate volatile Consumer<SlotRequestId> releaseSlotConsumer;", "originalCommit": "2ccf8d8d2d7e3e7ccddbb921914dad0bd831a70a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM3MTAwNA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r463371004", "bodyText": "I get it. I'll do it when I rearrange the commits.", "author": "Thesharing", "createdAt": "2020-07-31T02:20:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxOTYzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcyMDE2NA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462720164", "bodyText": "Could we add this test in a separate commit and elaborate in the commit message for the purpose of it?", "author": "zhuzhurk", "createdAt": "2020-07-30T03:58:37Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SchedulerImplTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.clusterframework.types.SlotProfile;\n+import org.apache.flink.runtime.executiongraph.TestingComponentMainThreadExecutor;\n+import org.apache.flink.runtime.executiongraph.utils.SimpleAckingTaskManagerGateway;\n+import org.apache.flink.runtime.jobmanager.scheduler.DummyScheduledUnit;\n+import org.apache.flink.runtime.jobmaster.LogicalSlot;\n+import org.apache.flink.runtime.jobmaster.SlotRequestId;\n+import org.apache.flink.runtime.resourcemanager.SlotRequest;\n+import org.apache.flink.runtime.resourcemanager.utils.TestingResourceManagerGateway;\n+import org.apache.flink.runtime.taskexecutor.slot.SlotOffer;\n+import org.apache.flink.runtime.taskmanager.LocalTaskManagerLocation;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n+import org.apache.flink.util.ExceptionUtils;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import static org.apache.flink.runtime.jobmaster.slotpool.AvailableSlotsTest.DEFAULT_TESTING_PROFILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Tests for the {@link SchedulerImpl}.\n+ */\n+public class SchedulerImplTest extends TestLogger {\n+\n+\tprivate static final Time timeout = Time.seconds(1L);\n+\n+\t@ClassRule\n+\tpublic static final TestingComponentMainThreadExecutor.Resource EXECUTOR_RESOURCE =\n+\t\tnew TestingComponentMainThreadExecutor.Resource(10L);\n+\n+\tprivate final TestingComponentMainThreadExecutor testMainThreadExecutor =\n+\t\tEXECUTOR_RESOURCE.getComponentMainThreadTestExecutor();\n+\n+\tprivate TaskManagerLocation taskManagerLocation;\n+\tprivate SimpleAckingTaskManagerGateway taskManagerGateway;\n+\tprivate TestingResourceManagerGateway resourceManagerGateway;\n+\tprivate SlotPoolBuilder slotPoolBuilder;\n+\n+\t@Before\n+\tpublic void setUp() throws Exception {\n+\t\ttaskManagerLocation = new LocalTaskManagerLocation();\n+\t\ttaskManagerGateway = new SimpleAckingTaskManagerGateway();\n+\t\tresourceManagerGateway = new TestingResourceManagerGateway();\n+\t\tslotPoolBuilder = new SlotPoolBuilder(testMainThreadExecutor.getMainThreadExecutor())\n+\t\t\t.setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\t@Test\n+\tpublic void testAllocateSlot() throws Exception {", "originalCommit": "2ccf8d8d2d7e3e7ccddbb921914dad0bd831a70a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg4NjE0MQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462886141", "bodyText": "Agreed. I'll do it when arranging the commit.", "author": "Thesharing", "createdAt": "2020-07-30T09:56:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcyMDE2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc1NTE4Ng==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462755186", "bodyText": "the method slotPoolBuilder.build(connectToResourceManager) no longer exists", "author": "zhuzhurk", "createdAt": "2020-07-30T06:06:29Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolInteractionsTest.java", "diffHunk": "@@ -253,118 +191,7 @@ public void testExtraSlotsAreKept() throws Exception {\n \t\t}\n \t}\n \n-\t/**\n-\t * This case make sure when allocateSlot in ProviderAndOwner timeout,\n-\t * it will automatically call cancelSlotAllocation as will inject future.whenComplete in ProviderAndOwner.\n-\t */\n-\t@Test\n-\tpublic void testProviderAndOwnerSlotAllocationTimeout() throws Exception {\n-\t\tfinal JobID jid = new JobID();\n-\n-\t\ttry (TestingSlotPool pool = createTestingSlotPool(jid)) {\n-\n-\t\t\tfinal CompletableFuture<SlotRequestId> releaseSlotFuture = new CompletableFuture<>();\n-\n-\t\t\tpool.setReleaseSlotConsumer(releaseSlotFuture::complete);\n-\n-\t\t\tpool.start(JobMasterId.generate(), \"foobar\", testMainThreadExecutor.getMainThreadExecutor());\n-\t\t\tResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway();\n-\t\t\tpool.connectToResourceManager(resourceManagerGateway);\n-\n-\t\t\tScheduler scheduler = new SchedulerImpl(LocationPreferenceSlotSelectionStrategy.createDefault(), pool);\n-\t\t\tscheduler.start(testMainThreadExecutor.getMainThreadExecutor());\n-\n-\t\t\t// test the pending request is clear when timed out\n-\t\t\tCompletableFuture<LogicalSlot> future = testMainThreadExecutor.execute(() -> scheduler.allocateSlot(\n-\t\t\t\tnew DummyScheduledUnit(),\n-\t\t\t\tSlotProfile.noRequirements(),\n-\t\t\t\tfastTimeout));\n-\t\t\ttry {\n-\t\t\t\tfuture.get();\n-\t\t\t\tfail(\"We expected a TimeoutException.\");\n-\t\t\t} catch (ExecutionException e) {\n-\t\t\t\tassertTrue(ExceptionUtils.stripExecutionException(e) instanceof TimeoutException);\n-\t\t\t}\n-\n-\t\t\t// wait for the cancel call on the SlotPoolImpl\n-\t\t\treleaseSlotFuture.get();\n-\n-\t\t\tassertEquals(0L, pool.getNumberOfPendingRequests());\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Testing SlotPoolImpl which exposes internal state via some testing methods.\n-\t */\n-\tprivate static final class TestingSlotPool extends SlotPoolImpl {\n-\n-\t\tprivate volatile Consumer<SlotRequestId> releaseSlotConsumer;\n-\n-\t\tprivate volatile Consumer<SlotRequestId> timeoutPendingSlotRequestConsumer;\n-\n-\t\tpublic TestingSlotPool(\n-\t\t\t\tJobID jobId,\n-\t\t\t\tClock clock,\n-\t\t\t\tTime rpcTimeout,\n-\t\t\t\tTime idleSlotTimeout,\n-\t\t\t\tTime batchSlotTimeout) {\n-\t\t\tsuper(\n-\t\t\t\tjobId,\n-\t\t\t\tclock,\n-\t\t\t\trpcTimeout,\n-\t\t\t\tidleSlotTimeout,\n-\t\t\t\tbatchSlotTimeout);\n-\n-\t\t\treleaseSlotConsumer = null;\n-\t\t\ttimeoutPendingSlotRequestConsumer = null;\n-\t\t}\n-\n-\t\tpublic void setReleaseSlotConsumer(Consumer<SlotRequestId> releaseSlotConsumer) {\n-\t\t\tthis.releaseSlotConsumer = Preconditions.checkNotNull(releaseSlotConsumer);\n-\t\t}\n-\n-\t\tpublic void setTimeoutPendingSlotRequestConsumer(Consumer<SlotRequestId> timeoutPendingSlotRequestConsumer) {\n-\t\t\tthis.timeoutPendingSlotRequestConsumer = Preconditions.checkNotNull(timeoutPendingSlotRequestConsumer);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void releaseSlot(\n-\t\t\t@Nonnull SlotRequestId slotRequestId,\n-\t\t\t@Nullable Throwable cause) {\n-\t\t\tfinal Consumer<SlotRequestId> currentReleaseSlotConsumer = releaseSlotConsumer;\n-\n-\t\t\tsuper.releaseSlot(slotRequestId, cause);\n-\n-\t\t\tif (currentReleaseSlotConsumer != null) {\n-\t\t\t\tcurrentReleaseSlotConsumer.accept(slotRequestId);\n-\t\t\t}\n-\t\t}\n-\n-\t\t@Override\n-\t\tprotected void timeoutPendingSlotRequest(SlotRequestId slotRequestId) {\n-\t\t\tfinal Consumer<SlotRequestId> currentTimeoutPendingSlotRequestConsumer = timeoutPendingSlotRequestConsumer;\n-\n-\t\t\tif (currentTimeoutPendingSlotRequestConsumer != null) {\n-\t\t\t\tcurrentTimeoutPendingSlotRequestConsumer.accept(slotRequestId);\n-\t\t\t}\n-\n-\t\t\tsuper.timeoutPendingSlotRequest(slotRequestId);\n-\t\t}\n-\n-\t\tboolean containsAllocatedSlot(AllocationID allocationId) {\n-\t\t\treturn getAllocatedSlots().contains(allocationId);\n-\t\t}\n-\n-\t\tboolean containsAvailableSlot(AllocationID allocationId) {\n-\t\t\treturn getAvailableSlots().contains(allocationId);\n-\t\t}\n-\n-\t\tint getNumberOfPendingRequests() {\n-\t\t\treturn getPendingRequests().size();\n-\t\t}\n-\n-\t\tint getNumberOfWaitingForResourceRequests() {\n-\t\t\treturn getWaitingForResourceManager().size();\n-\t\t}\n+\tprivate TestingSlotPoolImpl createAndSetUpSlotPool(Boolean connectToResourceManager) throws Exception {\n+\t\treturn slotPoolBuilder.build(connectToResourceManager);", "originalCommit": "084c389fe20a234deb417d41a8600fa687b47570", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgwOTMzNg==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462809336", "bodyText": "Yes. I fix this up in a new commit.", "author": "Thesharing", "createdAt": "2020-07-30T07:41:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc1NTE4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc1NzU4Mw==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462757583", "bodyText": "can we use SlotPoolBuilder to do this by setting resourceManagerGateway to null?", "author": "zhuzhurk", "createdAt": "2020-07-30T06:13:29Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolRequestCompletionTest.java", "diffHunk": "@@ -129,22 +115,13 @@ private void runSlotRequestCompletionTest(\n \t\t}\n \t}\n \n-\tprivate SlotPoolImpl setUpSlotPoolAndConnectToResourceManager() throws Exception {\n-\t\tfinal SlotPoolImpl slotPool = setUpSlotPool();\n-\t\tconnectToResourceManager(slotPool);\n-\n-\t\treturn slotPool;\n-\t}\n-\n \tprivate void connectToResourceManager(SlotPoolImpl slotPool) {\n \t\tslotPool.connectToResourceManager(resourceManagerGateway);\n \t}\n \n-\tprivate SlotPoolImpl setUpSlotPool() throws Exception {\n-\t\tfinal SlotPoolImpl slotPool = new TestingSlotPoolImpl(new JobID());\n-\n-\t\tslotPool.start(JobMasterId.generate(), \"foobar\", ComponentMainThreadExecutorServiceAdapter.forMainThread());\n-\n+\tprivate TestingSlotPoolImpl createAndSetUpSlotPoolWithoutResourceManager() throws Exception {\n+\t\tfinal TestingSlotPoolImpl slotPool = new TestingSlotPoolImpl(new JobID());", "originalCommit": "084c389fe20a234deb417d41a8600fa687b47570", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgzNzc1NA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462837754", "bodyText": "Agreed and done.", "author": "Thesharing", "createdAt": "2020-07-30T08:32:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc1NzU4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc1ODg4Ng==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462758886", "bodyText": "can be final. also applies some other variables below.", "author": "zhuzhurk", "createdAt": "2020-07-30T06:17:02Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SchedulerImplTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.clusterframework.types.SlotProfile;\n+import org.apache.flink.runtime.executiongraph.TestingComponentMainThreadExecutor;\n+import org.apache.flink.runtime.executiongraph.utils.SimpleAckingTaskManagerGateway;\n+import org.apache.flink.runtime.jobmanager.scheduler.DummyScheduledUnit;\n+import org.apache.flink.runtime.jobmaster.LogicalSlot;\n+import org.apache.flink.runtime.jobmaster.SlotRequestId;\n+import org.apache.flink.runtime.resourcemanager.SlotRequest;\n+import org.apache.flink.runtime.resourcemanager.utils.TestingResourceManagerGateway;\n+import org.apache.flink.runtime.taskexecutor.slot.SlotOffer;\n+import org.apache.flink.runtime.taskmanager.LocalTaskManagerLocation;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n+import org.apache.flink.util.ExceptionUtils;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import static org.apache.flink.runtime.jobmaster.slotpool.AvailableSlotsTest.DEFAULT_TESTING_PROFILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Tests for the {@link SchedulerImpl}.\n+ */\n+public class SchedulerImplTest extends TestLogger {\n+\n+\tprivate static final Time timeout = Time.seconds(1L);\n+\n+\t@ClassRule\n+\tpublic static final TestingComponentMainThreadExecutor.Resource EXECUTOR_RESOURCE =\n+\t\tnew TestingComponentMainThreadExecutor.Resource(10L);\n+\n+\tprivate final TestingComponentMainThreadExecutor testMainThreadExecutor =\n+\t\tEXECUTOR_RESOURCE.getComponentMainThreadTestExecutor();\n+\n+\tprivate TaskManagerLocation taskManagerLocation;\n+\tprivate SimpleAckingTaskManagerGateway taskManagerGateway;\n+\tprivate TestingResourceManagerGateway resourceManagerGateway;\n+\tprivate SlotPoolBuilder slotPoolBuilder;\n+\n+\t@Before\n+\tpublic void setUp() throws Exception {\n+\t\ttaskManagerLocation = new LocalTaskManagerLocation();\n+\t\ttaskManagerGateway = new SimpleAckingTaskManagerGateway();\n+\t\tresourceManagerGateway = new TestingResourceManagerGateway();\n+\t\tslotPoolBuilder = new SlotPoolBuilder(testMainThreadExecutor.getMainThreadExecutor())\n+\t\t\t.setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\t@Test\n+\tpublic void testAllocateSlot() throws Exception {\n+\t\tCompletableFuture<SlotRequest> slotRequestFuture = new CompletableFuture<>();\n+\t\tresourceManagerGateway.setRequestSlotConsumer(slotRequestFuture::complete);\n+\n+\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool()) {\n+\t\t\ttestMainThreadExecutor.execute(() -> slotPool.registerTaskManager(taskManagerLocation.getResourceID()));\n+\n+\t\t\tScheduler scheduler = new SchedulerImpl(LocationPreferenceSlotSelectionStrategy.createDefault(), slotPool);", "originalCommit": "084c389fe20a234deb417d41a8600fa687b47570", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg4NzQ2MA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462887460", "bodyText": "Done. I also add final to other variables.", "author": "Thesharing", "createdAt": "2020-07-30T09:58:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc1ODg4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc1OTg5OA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462759898", "bodyText": "I'd prefer to do it right before offerSlot", "author": "zhuzhurk", "createdAt": "2020-07-30T06:19:55Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SchedulerImplTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.clusterframework.types.SlotProfile;\n+import org.apache.flink.runtime.executiongraph.TestingComponentMainThreadExecutor;\n+import org.apache.flink.runtime.executiongraph.utils.SimpleAckingTaskManagerGateway;\n+import org.apache.flink.runtime.jobmanager.scheduler.DummyScheduledUnit;\n+import org.apache.flink.runtime.jobmaster.LogicalSlot;\n+import org.apache.flink.runtime.jobmaster.SlotRequestId;\n+import org.apache.flink.runtime.resourcemanager.SlotRequest;\n+import org.apache.flink.runtime.resourcemanager.utils.TestingResourceManagerGateway;\n+import org.apache.flink.runtime.taskexecutor.slot.SlotOffer;\n+import org.apache.flink.runtime.taskmanager.LocalTaskManagerLocation;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n+import org.apache.flink.util.ExceptionUtils;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import static org.apache.flink.runtime.jobmaster.slotpool.AvailableSlotsTest.DEFAULT_TESTING_PROFILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Tests for the {@link SchedulerImpl}.\n+ */\n+public class SchedulerImplTest extends TestLogger {\n+\n+\tprivate static final Time timeout = Time.seconds(1L);\n+\n+\t@ClassRule\n+\tpublic static final TestingComponentMainThreadExecutor.Resource EXECUTOR_RESOURCE =\n+\t\tnew TestingComponentMainThreadExecutor.Resource(10L);\n+\n+\tprivate final TestingComponentMainThreadExecutor testMainThreadExecutor =\n+\t\tEXECUTOR_RESOURCE.getComponentMainThreadTestExecutor();\n+\n+\tprivate TaskManagerLocation taskManagerLocation;\n+\tprivate SimpleAckingTaskManagerGateway taskManagerGateway;\n+\tprivate TestingResourceManagerGateway resourceManagerGateway;\n+\tprivate SlotPoolBuilder slotPoolBuilder;\n+\n+\t@Before\n+\tpublic void setUp() throws Exception {\n+\t\ttaskManagerLocation = new LocalTaskManagerLocation();\n+\t\ttaskManagerGateway = new SimpleAckingTaskManagerGateway();\n+\t\tresourceManagerGateway = new TestingResourceManagerGateway();\n+\t\tslotPoolBuilder = new SlotPoolBuilder(testMainThreadExecutor.getMainThreadExecutor())\n+\t\t\t.setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\t@Test\n+\tpublic void testAllocateSlot() throws Exception {\n+\t\tCompletableFuture<SlotRequest> slotRequestFuture = new CompletableFuture<>();\n+\t\tresourceManagerGateway.setRequestSlotConsumer(slotRequestFuture::complete);\n+\n+\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool()) {\n+\t\t\ttestMainThreadExecutor.execute(() -> slotPool.registerTaskManager(taskManagerLocation.getResourceID()));", "originalCommit": "084c389fe20a234deb417d41a8600fa687b47570", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg4NjY2OQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462886669", "bodyText": "Done.", "author": "Thesharing", "createdAt": "2020-07-30T09:57:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc1OTg5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc2MDE3MQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462760171", "bodyText": "could we have a createAndSetupScheduler() to deduplicate code?", "author": "zhuzhurk", "createdAt": "2020-07-30T06:20:37Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SchedulerImplTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.clusterframework.types.SlotProfile;\n+import org.apache.flink.runtime.executiongraph.TestingComponentMainThreadExecutor;\n+import org.apache.flink.runtime.executiongraph.utils.SimpleAckingTaskManagerGateway;\n+import org.apache.flink.runtime.jobmanager.scheduler.DummyScheduledUnit;\n+import org.apache.flink.runtime.jobmaster.LogicalSlot;\n+import org.apache.flink.runtime.jobmaster.SlotRequestId;\n+import org.apache.flink.runtime.resourcemanager.SlotRequest;\n+import org.apache.flink.runtime.resourcemanager.utils.TestingResourceManagerGateway;\n+import org.apache.flink.runtime.taskexecutor.slot.SlotOffer;\n+import org.apache.flink.runtime.taskmanager.LocalTaskManagerLocation;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n+import org.apache.flink.util.ExceptionUtils;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import static org.apache.flink.runtime.jobmaster.slotpool.AvailableSlotsTest.DEFAULT_TESTING_PROFILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Tests for the {@link SchedulerImpl}.\n+ */\n+public class SchedulerImplTest extends TestLogger {\n+\n+\tprivate static final Time timeout = Time.seconds(1L);\n+\n+\t@ClassRule\n+\tpublic static final TestingComponentMainThreadExecutor.Resource EXECUTOR_RESOURCE =\n+\t\tnew TestingComponentMainThreadExecutor.Resource(10L);\n+\n+\tprivate final TestingComponentMainThreadExecutor testMainThreadExecutor =\n+\t\tEXECUTOR_RESOURCE.getComponentMainThreadTestExecutor();\n+\n+\tprivate TaskManagerLocation taskManagerLocation;\n+\tprivate SimpleAckingTaskManagerGateway taskManagerGateway;\n+\tprivate TestingResourceManagerGateway resourceManagerGateway;\n+\tprivate SlotPoolBuilder slotPoolBuilder;\n+\n+\t@Before\n+\tpublic void setUp() throws Exception {\n+\t\ttaskManagerLocation = new LocalTaskManagerLocation();\n+\t\ttaskManagerGateway = new SimpleAckingTaskManagerGateway();\n+\t\tresourceManagerGateway = new TestingResourceManagerGateway();\n+\t\tslotPoolBuilder = new SlotPoolBuilder(testMainThreadExecutor.getMainThreadExecutor())\n+\t\t\t.setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\t@Test\n+\tpublic void testAllocateSlot() throws Exception {\n+\t\tCompletableFuture<SlotRequest> slotRequestFuture = new CompletableFuture<>();\n+\t\tresourceManagerGateway.setRequestSlotConsumer(slotRequestFuture::complete);\n+\n+\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool()) {\n+\t\t\ttestMainThreadExecutor.execute(() -> slotPool.registerTaskManager(taskManagerLocation.getResourceID()));\n+\n+\t\t\tScheduler scheduler = new SchedulerImpl(LocationPreferenceSlotSelectionStrategy.createDefault(), slotPool);\n+\t\t\tscheduler.start(testMainThreadExecutor.getMainThreadExecutor());", "originalCommit": "084c389fe20a234deb417d41a8600fa687b47570", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5MDgzMQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462890831", "bodyText": "Good idea. Done.", "author": "Thesharing", "createdAt": "2020-07-30T10:05:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc2MDE3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc2MTc5NQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462761795", "bodyText": "looks to me requestId is not further used.\nThis allocation code is used in both test cases. Could we have an allocateSlot() method?", "author": "zhuzhurk", "createdAt": "2020-07-30T06:24:53Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SchedulerImplTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.clusterframework.types.SlotProfile;\n+import org.apache.flink.runtime.executiongraph.TestingComponentMainThreadExecutor;\n+import org.apache.flink.runtime.executiongraph.utils.SimpleAckingTaskManagerGateway;\n+import org.apache.flink.runtime.jobmanager.scheduler.DummyScheduledUnit;\n+import org.apache.flink.runtime.jobmaster.LogicalSlot;\n+import org.apache.flink.runtime.jobmaster.SlotRequestId;\n+import org.apache.flink.runtime.resourcemanager.SlotRequest;\n+import org.apache.flink.runtime.resourcemanager.utils.TestingResourceManagerGateway;\n+import org.apache.flink.runtime.taskexecutor.slot.SlotOffer;\n+import org.apache.flink.runtime.taskmanager.LocalTaskManagerLocation;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n+import org.apache.flink.util.ExceptionUtils;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import static org.apache.flink.runtime.jobmaster.slotpool.AvailableSlotsTest.DEFAULT_TESTING_PROFILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Tests for the {@link SchedulerImpl}.\n+ */\n+public class SchedulerImplTest extends TestLogger {\n+\n+\tprivate static final Time timeout = Time.seconds(1L);\n+\n+\t@ClassRule\n+\tpublic static final TestingComponentMainThreadExecutor.Resource EXECUTOR_RESOURCE =\n+\t\tnew TestingComponentMainThreadExecutor.Resource(10L);\n+\n+\tprivate final TestingComponentMainThreadExecutor testMainThreadExecutor =\n+\t\tEXECUTOR_RESOURCE.getComponentMainThreadTestExecutor();\n+\n+\tprivate TaskManagerLocation taskManagerLocation;\n+\tprivate SimpleAckingTaskManagerGateway taskManagerGateway;\n+\tprivate TestingResourceManagerGateway resourceManagerGateway;\n+\tprivate SlotPoolBuilder slotPoolBuilder;\n+\n+\t@Before\n+\tpublic void setUp() throws Exception {\n+\t\ttaskManagerLocation = new LocalTaskManagerLocation();\n+\t\ttaskManagerGateway = new SimpleAckingTaskManagerGateway();\n+\t\tresourceManagerGateway = new TestingResourceManagerGateway();\n+\t\tslotPoolBuilder = new SlotPoolBuilder(testMainThreadExecutor.getMainThreadExecutor())\n+\t\t\t.setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\t@Test\n+\tpublic void testAllocateSlot() throws Exception {\n+\t\tCompletableFuture<SlotRequest> slotRequestFuture = new CompletableFuture<>();\n+\t\tresourceManagerGateway.setRequestSlotConsumer(slotRequestFuture::complete);\n+\n+\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool()) {\n+\t\t\ttestMainThreadExecutor.execute(() -> slotPool.registerTaskManager(taskManagerLocation.getResourceID()));\n+\n+\t\t\tScheduler scheduler = new SchedulerImpl(LocationPreferenceSlotSelectionStrategy.createDefault(), slotPool);\n+\t\t\tscheduler.start(testMainThreadExecutor.getMainThreadExecutor());\n+\n+\t\t\tSlotRequestId requestId = new SlotRequestId();\n+\t\t\tCompletableFuture<LogicalSlot> future = testMainThreadExecutor.execute(() -> scheduler.allocateSlot(\n+\t\t\t\trequestId,", "originalCommit": "084c389fe20a234deb417d41a8600fa687b47570", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5NTc0Ng==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462895746", "bodyText": "Agreed. Done.", "author": "Thesharing", "createdAt": "2020-07-30T10:14:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc2MTc5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc2Mjc4NA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462762784", "bodyText": "There is no need to verify this offer. IIRC, it is already covered in SlotPoolImplTest.", "author": "zhuzhurk", "createdAt": "2020-07-30T06:27:12Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SchedulerImplTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.clusterframework.types.SlotProfile;\n+import org.apache.flink.runtime.executiongraph.TestingComponentMainThreadExecutor;\n+import org.apache.flink.runtime.executiongraph.utils.SimpleAckingTaskManagerGateway;\n+import org.apache.flink.runtime.jobmanager.scheduler.DummyScheduledUnit;\n+import org.apache.flink.runtime.jobmaster.LogicalSlot;\n+import org.apache.flink.runtime.jobmaster.SlotRequestId;\n+import org.apache.flink.runtime.resourcemanager.SlotRequest;\n+import org.apache.flink.runtime.resourcemanager.utils.TestingResourceManagerGateway;\n+import org.apache.flink.runtime.taskexecutor.slot.SlotOffer;\n+import org.apache.flink.runtime.taskmanager.LocalTaskManagerLocation;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n+import org.apache.flink.util.ExceptionUtils;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import static org.apache.flink.runtime.jobmaster.slotpool.AvailableSlotsTest.DEFAULT_TESTING_PROFILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Tests for the {@link SchedulerImpl}.\n+ */\n+public class SchedulerImplTest extends TestLogger {\n+\n+\tprivate static final Time timeout = Time.seconds(1L);\n+\n+\t@ClassRule\n+\tpublic static final TestingComponentMainThreadExecutor.Resource EXECUTOR_RESOURCE =\n+\t\tnew TestingComponentMainThreadExecutor.Resource(10L);\n+\n+\tprivate final TestingComponentMainThreadExecutor testMainThreadExecutor =\n+\t\tEXECUTOR_RESOURCE.getComponentMainThreadTestExecutor();\n+\n+\tprivate TaskManagerLocation taskManagerLocation;\n+\tprivate SimpleAckingTaskManagerGateway taskManagerGateway;\n+\tprivate TestingResourceManagerGateway resourceManagerGateway;\n+\tprivate SlotPoolBuilder slotPoolBuilder;\n+\n+\t@Before\n+\tpublic void setUp() throws Exception {\n+\t\ttaskManagerLocation = new LocalTaskManagerLocation();\n+\t\ttaskManagerGateway = new SimpleAckingTaskManagerGateway();\n+\t\tresourceManagerGateway = new TestingResourceManagerGateway();\n+\t\tslotPoolBuilder = new SlotPoolBuilder(testMainThreadExecutor.getMainThreadExecutor())\n+\t\t\t.setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\t@Test\n+\tpublic void testAllocateSlot() throws Exception {\n+\t\tCompletableFuture<SlotRequest> slotRequestFuture = new CompletableFuture<>();\n+\t\tresourceManagerGateway.setRequestSlotConsumer(slotRequestFuture::complete);\n+\n+\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool()) {\n+\t\t\ttestMainThreadExecutor.execute(() -> slotPool.registerTaskManager(taskManagerLocation.getResourceID()));\n+\n+\t\t\tScheduler scheduler = new SchedulerImpl(LocationPreferenceSlotSelectionStrategy.createDefault(), slotPool);\n+\t\t\tscheduler.start(testMainThreadExecutor.getMainThreadExecutor());\n+\n+\t\t\tSlotRequestId requestId = new SlotRequestId();\n+\t\t\tCompletableFuture<LogicalSlot> future = testMainThreadExecutor.execute(() -> scheduler.allocateSlot(\n+\t\t\t\trequestId,\n+\t\t\t\tnew DummyScheduledUnit(),\n+\t\t\t\tSlotProfile.noRequirements(),\n+\t\t\t\ttimeout));\n+\t\t\tassertFalse(future.isDone());\n+\n+\t\t\tfinal SlotRequest slotRequest = slotRequestFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS);\n+\n+\t\t\tfinal SlotOffer slotOffer = new SlotOffer(\n+\t\t\t\tslotRequest.getAllocationId(),\n+\t\t\t\t0,\n+\t\t\t\tDEFAULT_TESTING_PROFILE);\n+\n+\t\t\tassertTrue(testMainThreadExecutor.execute(() -> slotPool.offerSlot(", "originalCommit": "084c389fe20a234deb417d41a8600fa687b47570", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5NjI4NQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462896285", "bodyText": "Okay, removed assertTrue.", "author": "Thesharing", "createdAt": "2020-07-30T10:15:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc2Mjc4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc2MjkxNA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462762914", "bodyText": "timeout -> TIMEOUT", "author": "zhuzhurk", "createdAt": "2020-07-30T06:27:33Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SchedulerImplTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.clusterframework.types.SlotProfile;\n+import org.apache.flink.runtime.executiongraph.TestingComponentMainThreadExecutor;\n+import org.apache.flink.runtime.executiongraph.utils.SimpleAckingTaskManagerGateway;\n+import org.apache.flink.runtime.jobmanager.scheduler.DummyScheduledUnit;\n+import org.apache.flink.runtime.jobmaster.LogicalSlot;\n+import org.apache.flink.runtime.jobmaster.SlotRequestId;\n+import org.apache.flink.runtime.resourcemanager.SlotRequest;\n+import org.apache.flink.runtime.resourcemanager.utils.TestingResourceManagerGateway;\n+import org.apache.flink.runtime.taskexecutor.slot.SlotOffer;\n+import org.apache.flink.runtime.taskmanager.LocalTaskManagerLocation;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n+import org.apache.flink.util.ExceptionUtils;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import static org.apache.flink.runtime.jobmaster.slotpool.AvailableSlotsTest.DEFAULT_TESTING_PROFILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Tests for the {@link SchedulerImpl}.\n+ */\n+public class SchedulerImplTest extends TestLogger {\n+\n+\tprivate static final Time timeout = Time.seconds(1L);", "originalCommit": "084c389fe20a234deb417d41a8600fa687b47570", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyNzc1OQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462827759", "bodyText": "Done.", "author": "Thesharing", "createdAt": "2020-07-30T08:15:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc2MjkxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc2NTA0OA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462765048", "bodyText": "indentation or an empty line is needed", "author": "zhuzhurk", "createdAt": "2020-07-30T06:33:09Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBatchSlotRequestTest.java", "diffHunk": "@@ -266,7 +269,10 @@ public void testPendingBatchSlotRequestTimeoutAfterSlotRelease() throws Exceptio\n \t\t}\n \t}\n \n-\tprivate void advanceTimeAndTriggerCheckBatchSlotTimeout(TestingSlotPoolImpl slotPool, ManualClock clock, Time batchSlotTimeout) {\n+\tprivate void advanceTimeAndTriggerCheckBatchSlotTimeout(\n+\t\tTestingSlotPoolImpl slotPool,\n+\t\tManualClock clock,\n+\t\tTime batchSlotTimeout) {", "originalCommit": "084c389fe20a234deb417d41a8600fa687b47570", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgzNDc5NA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462834794", "bodyText": "Done.", "author": "Thesharing", "createdAt": "2020-07-30T08:27:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc2NTA0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc2NTk5Mg==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462765992", "bodyText": "indentation or an empty line is needed.", "author": "zhuzhurk", "createdAt": "2020-07-30T06:35:34Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolUtils.java", "diffHunk": "@@ -58,6 +58,16 @@ private SlotPoolUtils() {\n \t\t\t.thenCompose(Function.identity());\n \t}\n \n+\tpublic static List<CompletableFuture<PhysicalSlot>> requestNewAllocatedBatchSlots(\n+\t\tSlotPool slotPool,\n+\t\tComponentMainThreadExecutor mainThreadExecutor,\n+\t\tList<ResourceProfile> resourceProfiles) {", "originalCommit": "084c389fe20a234deb417d41a8600fa687b47570", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgzMTc2NA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462831764", "bodyText": "Done.", "author": "Thesharing", "createdAt": "2020-07-30T08:22:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc2NTk5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgwNzE0NA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462807144", "bodyText": "@Nonnull is not needed since it is the default assumption.\nOnly @Nullable params need to be explicitly tagged.", "author": "zhuzhurk", "createdAt": "2020-07-30T07:37:42Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/TestingSlotPoolImpl.java", "diffHunk": "@@ -83,4 +93,52 @@ boolean isBatchSlotRequestTimeoutCheckEnabled() {\n \tpublic ResourceProfile getLastRequestedSlotResourceProfile() {\n \t\treturn lastRequestedSlotResourceProfile;\n \t}\n+\n+\tpublic void setReleaseSlotConsumer(Consumer<SlotRequestId> releaseSlotConsumer) {\n+\t\tthis.releaseSlotConsumer = Preconditions.checkNotNull(releaseSlotConsumer);\n+\t}\n+\n+\tpublic void setTimeoutPendingSlotRequestConsumer(Consumer<SlotRequestId> timeoutPendingSlotRequestConsumer) {\n+\t\tthis.timeoutPendingSlotRequestConsumer = Preconditions.checkNotNull(timeoutPendingSlotRequestConsumer);\n+\t}\n+\n+\t@Override\n+\tpublic void releaseSlot(\n+\t\t@Nonnull SlotRequestId slotRequestId,", "originalCommit": "4c7e79256616e62e216b5c87f0cfff6896b32287", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyNTM1NQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462825355", "bodyText": "I forget this. I have removed it.", "author": "Thesharing", "createdAt": "2020-07-30T08:11:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgwNzE0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxMzE3Nw==", "url": "https://github.com/apache/flink/pull/12917#discussion_r462813177", "bodyText": "I think direct main thread executor cannot work here?\nWould you give it a check?", "author": "zhuzhurk", "createdAt": "2020-07-30T07:48:55Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBatchSlotRequestTest.java", "diffHunk": "@@ -81,8 +67,10 @@ public static void teardownClass() {\n \t */\n \t@Test\n \tpublic void testPendingBatchSlotRequestTimeout() throws Exception {\n-\t\ttry (final SlotPoolImpl slotPool = new SlotPoolBuilder(mainThreadExecutor)\n-\t\t\t\t.build()) {\n+\t\ttry (final SlotPoolImpl slotPool = slotPoolBuilder\n+\t\t\t.setBatchSlotTimeout(Time.milliseconds(2L))\n+\t\t\t.build()) {\n+\n \t\t\tfinal CompletableFuture<PhysicalSlot> slotFuture = SlotPoolUtils.requestNewAllocatedBatchSlot(\n \t\t\t\tslotPool,\n \t\t\t\tmainThreadExecutor,", "originalCommit": "4c7e79256616e62e216b5c87f0cfff6896b32287", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM3MDQ3NQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r463370475", "bodyText": "Thanks for your consideration. I'm still working on this.", "author": "Thesharing", "createdAt": "2020-07-31T02:18:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxMzE3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1MzU2Mw==", "url": "https://github.com/apache/flink/pull/12917#discussion_r463553563", "bodyText": "I've undone this modification in the fix-up commit.", "author": "Thesharing", "createdAt": "2020-07-31T11:20:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxMzE3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE4Mzg5Mw==", "url": "https://github.com/apache/flink/pull/12917#discussion_r464183893", "bodyText": "To avoid thread leak, it's better to use try-finally. A ref can be SlotPoolPendingRequestFailureTest#testPendingSlotRequestTimeout.", "author": "zhuzhurk", "createdAt": "2020-08-03T04:06:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxMzE3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIxMDMzOQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r464210339", "bodyText": "To avoid thread leak, it's better to use try-finally. A ref can be SlotPoolPendingRequestFailureTest#testPendingSlotRequestTimeout.\n\nDone.", "author": "Thesharing", "createdAt": "2020-08-03T06:06:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxMzE3Nw=="}], "type": "inlineReview"}, {"oid": "bb5c83509b0716e8e13339ce86a18f3783bee31c", "url": "https://github.com/apache/flink/commit/bb5c83509b0716e8e13339ce86a18f3783bee31c", "message": "[hotfix][tests] Add SchedulerImplTest#testAllocateSlot to test the basic slot allocation function of SchedulerImpl", "committedDate": "2020-08-02T13:59:47Z", "type": "forcePushed"}, {"oid": "91fc99b656a1b2c0f99737dd026500d41fec0250", "url": "https://github.com/apache/flink/commit/91fc99b656a1b2c0f99737dd026500d41fec0250", "message": "[hotfix][tests] Add SchedulerImplTest#testAllocateSlot to test the basic slot allocation function of SchedulerImpl", "committedDate": "2020-08-03T06:04:26Z", "type": "forcePushed"}, {"oid": "ae4c6182cbbf1441b85df2d82dfd36c3daf7db33", "url": "https://github.com/apache/flink/commit/ae4c6182cbbf1441b85df2d82dfd36c3daf7db33", "message": "[hotfix][tests] Add SchedulerImplTest#testAllocateSlot to test the basic slot allocation function of SchedulerImpl", "committedDate": "2020-08-03T09:21:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM1NzYyMw==", "url": "https://github.com/apache/flink/pull/12917#discussion_r464357623", "bodyText": "why not using resourceManagerGateway in SlotPoolTestBase?", "author": "zhuzhurk", "createdAt": "2020-08-03T11:35:58Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBatchSlotRequestTest.java", "diffHunk": "@@ -54,25 +52,17 @@\n /**\n  * Tests for batch slot requests.\n  */\n-public class SlotPoolBatchSlotRequestTest extends TestLogger {\n+public class SlotPoolBatchSlotRequestTest extends SlotPoolTestBase {\n \n \tprivate static final ResourceProfile resourceProfile = ResourceProfile.fromResources(1.0, 1024);\n \tprivate static final ResourceProfile smallerResourceProfile = ResourceProfile.fromResources(0.5, 512);\n \tpublic static final CompletableFuture[] COMPLETABLE_FUTURES_EMPTY_ARRAY = new CompletableFuture[0];\n-\tprivate static ScheduledExecutorService singleThreadScheduledExecutorService;\n-\tprivate static ComponentMainThreadExecutor mainThreadExecutor;\n-\n-\t@BeforeClass\n-\tpublic static void setupClass() {\n-\t\tsingleThreadScheduledExecutorService = Executors.newSingleThreadScheduledExecutor();\n-\t\tmainThreadExecutor = ComponentMainThreadExecutorServiceAdapter.forSingleThreadExecutor(singleThreadScheduledExecutorService);\n-\t}\n \n-\t@AfterClass\n-\tpublic static void teardownClass() {\n-\t\tif (singleThreadScheduledExecutorService != null) {\n-\t\t\tsingleThreadScheduledExecutorService.shutdownNow();\n-\t\t}\n+\t@Before\n+\t@Override\n+\tpublic void setup() throws Exception {\n+\t\tresourceManagerGateway = new TestingResourceManagerGateway();", "originalCommit": "ae4c6182cbbf1441b85df2d82dfd36c3daf7db33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM2NDgyNw==", "url": "https://github.com/apache/flink/pull/12917#discussion_r464364827", "bodyText": "The license is missing and flink will not compile. https://dev.azure.com/apache-flink/apache-flink/_build/results?buildId=5111&view=logs&j=52b61abe-a3cc-5bde-cc35-1bbe89bb7df5&t=54421a62-0c80-5aad-3319-094ff69180bb.", "author": "zhuzhurk", "createdAt": "2020-08-03T11:52:17Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolTestBase.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.apache.flink.runtime.jobmaster.slotpool;", "originalCommit": "ae4c6182cbbf1441b85df2d82dfd36c3daf7db33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "da90885d695cf70c147481bbaa8c8be005a13a4c", "url": "https://github.com/apache/flink/commit/da90885d695cf70c147481bbaa8c8be005a13a4c", "message": "[hotfix][tests] Add SchedulerImplTest#testAllocateSlot to test the basic slot allocation function of SchedulerImpl", "committedDate": "2020-08-03T15:50:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxMDgzNQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r464710835", "bodyText": "We very much want to avoid introducing inheritance into test classes; there is rarely a need for it.\nThis instance here could be trivially implemented as a junit resource.", "author": "zentol", "createdAt": "2020-08-03T23:18:19Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolTestBase.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.clusterframework.types.ResourceProfile;\n+import org.apache.flink.runtime.concurrent.ComponentMainThreadExecutor;\n+import org.apache.flink.runtime.concurrent.ComponentMainThreadExecutorServiceAdapter;\n+import org.apache.flink.runtime.jobmaster.SlotRequestId;\n+import org.apache.flink.runtime.resourcemanager.ResourceManagerGateway;\n+import org.apache.flink.runtime.resourcemanager.utils.TestingResourceManagerGateway;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Before;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Test base for {@link SlotPool} related test cases.\n+ */\n+public abstract class SlotPoolTestBase extends TestLogger {", "originalCommit": "da90885d695cf70c147481bbaa8c8be005a13a4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY2NjA5MA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r465666090", "bodyText": "Thanks for your review. I've already removed SlotPoolTestBase and replaced it with SlotPoolUtils.", "author": "Thesharing", "createdAt": "2020-08-05T11:42:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxMDgzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc5NTgwMQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r466795801", "bodyText": "@zentol would you take another look?", "author": "zhuzhurk", "createdAt": "2020-08-07T03:08:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxMDgzNQ=="}], "type": "inlineReview"}, {"oid": "7dbccb83541bc3f440383665442b0f940e3d65e6", "url": "https://github.com/apache/flink/commit/7dbccb83541bc3f440383665442b0f940e3d65e6", "message": "[FLINK-18355][tests] Refactor tests of SlotPoolImpl with SlotPoolUtils and SlotPoolBuilder", "committedDate": "2020-08-05T06:12:26Z", "type": "forcePushed"}, {"oid": "bce6761325c406591dac1f9ba2d755f5d76a3f78", "url": "https://github.com/apache/flink/commit/bce6761325c406591dac1f9ba2d755f5d76a3f78", "message": "[FLINK-18355][tests] Refactor tests of SlotPoolImpl with SlotPoolUtils and SlotPoolBuilder", "committedDate": "2020-08-05T06:24:38Z", "type": "forcePushed"}, {"oid": "77640441a03432137e3e431af15927d51ad56c4b", "url": "https://github.com/apache/flink/commit/77640441a03432137e3e431af15927d51ad56c4b", "message": "[FLINK-18355][tests] Refactor tests of SlotPoolImpl with SlotPoolUtils and SlotPoolBuilder", "committedDate": "2020-08-05T06:36:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwNTk1OA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r465505958", "bodyText": "This change is unrelated to \"Refactor tests of SlotPoolImpl with SlotPoolUtils and SlotPoolBuilder\".", "author": "zhuzhurk", "createdAt": "2020-08-05T06:40:20Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBatchSlotRequestTest.java", "diffHunk": "@@ -233,16 +239,23 @@ public void testPendingBatchSlotRequestTimeoutAfterSlotRelease() throws Exceptio\n \t\tfinal ManualClock clock = new ManualClock();\n \t\tfinal Time batchSlotTimeout = Time.milliseconds(1000L);\n \n-\t\ttry (final TestingSlotPoolImpl slotPool = new SlotPoolBuilder(directMainThreadExecutor)\n-\t\t\t\t.setClock(clock)\n-\t\t\t\t.setBatchSlotTimeout(batchSlotTimeout)\n-\t\t\t\t.build()) {\n+\t\ttry (final TestingSlotPoolImpl slotPool = createAndSetUpSlotPool(\n+\t\t\t\tdirectMainThreadExecutor,\n+\t\t\t\tnull,\n+\t\t\t\tbatchSlotTimeout,\n+\t\t\t\tclock)) {\n+\n \t\t\tfinal ResourceID taskManagerResourceId = SlotPoolUtils.offerSlots(slotPool, directMainThreadExecutor, Collections.singletonList(resourceProfile));\n-\t\t\tfinal CompletableFuture<PhysicalSlot> firstSlotFuture = SlotPoolUtils.requestNewAllocatedBatchSlot(slotPool, directMainThreadExecutor, resourceProfile);", "originalCommit": "77640441a03432137e3e431af15927d51ad56c4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyMzQxNw==", "url": "https://github.com/apache/flink/pull/12917#discussion_r465523417", "bodyText": "Removed.", "author": "Thesharing", "createdAt": "2020-08-05T07:18:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwNTk1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwNzg1OQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r465507859", "bodyText": "can be based on the following createAndSetUpSlotPool \uff08\uff09", "author": "zhuzhurk", "createdAt": "2020-08-05T06:44:56Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBatchSlotRequestTest.java", "diffHunk": "@@ -276,4 +289,28 @@ private void advanceTimeAndTriggerCheckBatchSlotTimeout(TestingSlotPoolImpl slot\n \t\t// timeout all as unfulfillable marked slots\n \t\tslotPool.triggerCheckBatchSlotTimeout();\n \t}\n+\n+\tprivate TestingSlotPoolImpl createAndSetUpSlotPool(\n+\t\t\tfinal ComponentMainThreadExecutor componentMainThreadExecutor,\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway,\n+\t\t\tfinal Time batchSlotTimeout) throws Exception {\n+\n+\t\treturn SlotPoolUtils", "originalCommit": "77640441a03432137e3e431af15927d51ad56c4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyNTY0MA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r465525640", "bodyText": "I don't agree on this. If we rebase this createAndSetUpSlotPool with the one below, we have to introduce a default value of Clock, which is unnecessary.", "author": "Thesharing", "createdAt": "2020-08-05T07:23:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwNzg1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU1OTQ5OQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r465559499", "bodyText": "I see. Makes sense.", "author": "zhuzhurk", "createdAt": "2020-08-05T08:25:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwNzg1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwODg0Ng==", "url": "https://github.com/apache/flink/pull/12917#discussion_r465508846", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\treturn SlotPoolUtils.createSlotPoolBuilder().setResourceManagerGateway(null).build();\n          \n          \n            \n            \t\treturn SlotPoolUtils.createAndSetUpSlotPool(null).build();", "author": "zhuzhurk", "createdAt": "2020-08-05T06:47:12Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolRequestCompletionTest.java", "diffHunk": "@@ -129,22 +126,15 @@ private void runSlotRequestCompletionTest(\n \t\t}\n \t}\n \n-\tprivate SlotPoolImpl setUpSlotPoolAndConnectToResourceManager() throws Exception {\n-\t\tfinal SlotPoolImpl slotPool = setUpSlotPool();\n-\t\tconnectToResourceManager(slotPool);\n-\n-\t\treturn slotPool;\n+\tprivate TestingSlotPoolImpl createAndSetUpSlotPool() throws Exception {\n+\t\treturn SlotPoolUtils.createAndSetUpSlotPool(resourceManagerGateway);\n \t}\n \n \tprivate void connectToResourceManager(SlotPoolImpl slotPool) {\n \t\tslotPool.connectToResourceManager(resourceManagerGateway);\n \t}\n \n-\tprivate SlotPoolImpl setUpSlotPool() throws Exception {\n-\t\tfinal SlotPoolImpl slotPool = new TestingSlotPoolImpl(new JobID());\n-\n-\t\tslotPool.start(JobMasterId.generate(), \"foobar\", ComponentMainThreadExecutorServiceAdapter.forMainThread());\n-\n-\t\treturn slotPool;\n+\tprivate TestingSlotPoolImpl createAndSetUpSlotPoolWithoutResourceManager() throws Exception {\n+\t\treturn SlotPoolUtils.createSlotPoolBuilder().setResourceManagerGateway(null).build();", "originalCommit": "77640441a03432137e3e431af15927d51ad56c4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxOTgzMQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r465519831", "bodyText": "Done.", "author": "Thesharing", "createdAt": "2020-08-05T07:11:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwODg0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwOTY2Mg==", "url": "https://github.com/apache/flink/pull/12917#discussion_r465509662", "bodyText": "These createSlotPoolBuilder(...) does not show much benefit to me, given that in those tests there are already reusable methods to create and setup slot pool.", "author": "zhuzhurk", "createdAt": "2020-08-05T06:49:05Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolUtils.java", "diffHunk": "@@ -45,19 +50,108 @@\n  */\n public class SlotPoolUtils {\n \n+\tpublic static final Time TIMEOUT = Time.seconds(10L);\n+\n \tprivate SlotPoolUtils() {\n \t\tthrow new UnsupportedOperationException(\"Cannot instantiate this class.\");\n \t}\n \n+\tpublic static SlotPoolBuilder createSlotPoolBuilder() {", "originalCommit": "77640441a03432137e3e431af15927d51ad56c4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyMzA0NQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r465523045", "bodyText": "I've removed these createSlotPoolBuilder functions.", "author": "Thesharing", "createdAt": "2020-08-05T07:18:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwOTY2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxMjQ5Mw==", "url": "https://github.com/apache/flink/pull/12917#discussion_r465512493", "bodyText": "Can these newly added methods be package private?", "author": "zhuzhurk", "createdAt": "2020-08-05T06:55:23Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolUtils.java", "diffHunk": "@@ -45,19 +50,108 @@\n  */\n public class SlotPoolUtils {\n \n+\tpublic static final Time TIMEOUT = Time.seconds(10L);\n+\n \tprivate SlotPoolUtils() {\n \t\tthrow new UnsupportedOperationException(\"Cannot instantiate this class.\");\n \t}\n \n+\tpublic static SlotPoolBuilder createSlotPoolBuilder() {\n+\t\treturn createSlotPoolBuilder(ComponentMainThreadExecutorServiceAdapter.forMainThread());\n+\t}\n+\n+\tpublic static SlotPoolBuilder createSlotPoolBuilder(final ComponentMainThreadExecutor mainThreadExecutor) {\n+\t\treturn new SlotPoolBuilder(mainThreadExecutor);\n+\t}\n+\n+\tpublic static SlotPoolBuilder createSlotPoolBuilder(final ResourceManagerGateway resourceManagerGateway) {\n+\t\treturn createSlotPoolBuilder().setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tpublic static SlotPoolBuilder createSlotPoolBuilder(\n+\t\t\tfinal ComponentMainThreadExecutor mainThreadExecutor,\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway) {\n+\n+\t\treturn createSlotPoolBuilder(mainThreadExecutor).setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tpublic static TestingSlotPoolImpl createAndSetUpSlotPool(", "originalCommit": "77640441a03432137e3e431af15927d51ad56c4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxODk1NA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r465518954", "bodyText": "Agree. Done.", "author": "Thesharing", "createdAt": "2020-08-05T07:09:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxMjQ5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyODE2MQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r465528161", "bodyText": "looks to me this method is never used.", "author": "zhuzhurk", "createdAt": "2020-08-05T07:28:27Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolUtils.java", "diffHunk": "@@ -45,19 +50,108 @@\n  */\n public class SlotPoolUtils {\n \n+\tpublic static final Time TIMEOUT = Time.seconds(10L);\n+\n \tprivate SlotPoolUtils() {\n \t\tthrow new UnsupportedOperationException(\"Cannot instantiate this class.\");\n \t}\n \n+\tpublic static SlotPoolBuilder createSlotPoolBuilder() {\n+\t\treturn createSlotPoolBuilder(ComponentMainThreadExecutorServiceAdapter.forMainThread());\n+\t}\n+\n+\tpublic static SlotPoolBuilder createSlotPoolBuilder(final ComponentMainThreadExecutor mainThreadExecutor) {\n+\t\treturn new SlotPoolBuilder(mainThreadExecutor);\n+\t}\n+\n+\tpublic static SlotPoolBuilder createSlotPoolBuilder(final ResourceManagerGateway resourceManagerGateway) {\n+\t\treturn createSlotPoolBuilder().setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tpublic static SlotPoolBuilder createSlotPoolBuilder(\n+\t\t\tfinal ComponentMainThreadExecutor mainThreadExecutor,\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway) {\n+\n+\t\treturn createSlotPoolBuilder(mainThreadExecutor).setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tpublic static TestingSlotPoolImpl createAndSetUpSlotPool(\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway) throws Exception {\n+\n+\t\treturn createSlotPoolBuilder(resourceManagerGateway).build();\n+\t}\n+\n+\tpublic static TestingSlotPoolImpl createAndSetUpSlotPool(\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway,\n+\t\t\tfinal JobID jobId) throws Exception {\n+\n+\t\treturn createSlotPoolBuilder(resourceManagerGateway).setJobId(jobId).build();\n+\t}\n+\n+\tpublic static TestingSlotPoolImpl createAndSetUpSlotPool(\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway,\n+\t\t\tfinal Clock clock,\n+\t\t\tfinal Time idleSlotTimeout) throws Exception {\n+\n+\t\treturn SlotPoolUtils\n+\t\t\t.createSlotPoolBuilder(resourceManagerGateway)\n+\t\t\t.setClock(clock)\n+\t\t\t.setIdleSlotTimeout(idleSlotTimeout)\n+\t\t\t.build();\n+\t}\n+\n+\tpublic static TestingSlotPoolImpl createAndSetUpSlotPool(", "originalCommit": "77640441a03432137e3e431af15927d51ad56c4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUzNTQ3OQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r465535479", "bodyText": "Removed.", "author": "Thesharing", "createdAt": "2020-08-05T07:42:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyODE2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyODYyOQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r465528629", "bodyText": "This method is used only in SlotPoolImplTest. I'd prefer to put it there at the moment.", "author": "zhuzhurk", "createdAt": "2020-08-05T07:29:20Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolUtils.java", "diffHunk": "@@ -45,19 +50,108 @@\n  */\n public class SlotPoolUtils {\n \n+\tpublic static final Time TIMEOUT = Time.seconds(10L);\n+\n \tprivate SlotPoolUtils() {\n \t\tthrow new UnsupportedOperationException(\"Cannot instantiate this class.\");\n \t}\n \n+\tpublic static SlotPoolBuilder createSlotPoolBuilder() {\n+\t\treturn createSlotPoolBuilder(ComponentMainThreadExecutorServiceAdapter.forMainThread());\n+\t}\n+\n+\tpublic static SlotPoolBuilder createSlotPoolBuilder(final ComponentMainThreadExecutor mainThreadExecutor) {\n+\t\treturn new SlotPoolBuilder(mainThreadExecutor);\n+\t}\n+\n+\tpublic static SlotPoolBuilder createSlotPoolBuilder(final ResourceManagerGateway resourceManagerGateway) {\n+\t\treturn createSlotPoolBuilder().setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tpublic static SlotPoolBuilder createSlotPoolBuilder(\n+\t\t\tfinal ComponentMainThreadExecutor mainThreadExecutor,\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway) {\n+\n+\t\treturn createSlotPoolBuilder(mainThreadExecutor).setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tpublic static TestingSlotPoolImpl createAndSetUpSlotPool(\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway) throws Exception {\n+\n+\t\treturn createSlotPoolBuilder(resourceManagerGateway).build();\n+\t}\n+\n+\tpublic static TestingSlotPoolImpl createAndSetUpSlotPool(\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway,\n+\t\t\tfinal JobID jobId) throws Exception {\n+\n+\t\treturn createSlotPoolBuilder(resourceManagerGateway).setJobId(jobId).build();\n+\t}\n+\n+\tpublic static TestingSlotPoolImpl createAndSetUpSlotPool(", "originalCommit": "77640441a03432137e3e431af15927d51ad56c4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUzNTUzOA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r465535538", "bodyText": "Moved.", "author": "Thesharing", "createdAt": "2020-08-05T07:43:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyODYyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyODY3NA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r465528674", "bodyText": "This method is used only in SlotPoolImplTest. I'd prefer to put it there at the moment.", "author": "zhuzhurk", "createdAt": "2020-08-05T07:29:24Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolUtils.java", "diffHunk": "@@ -45,19 +50,108 @@\n  */\n public class SlotPoolUtils {\n \n+\tpublic static final Time TIMEOUT = Time.seconds(10L);\n+\n \tprivate SlotPoolUtils() {\n \t\tthrow new UnsupportedOperationException(\"Cannot instantiate this class.\");\n \t}\n \n+\tpublic static SlotPoolBuilder createSlotPoolBuilder() {\n+\t\treturn createSlotPoolBuilder(ComponentMainThreadExecutorServiceAdapter.forMainThread());\n+\t}\n+\n+\tpublic static SlotPoolBuilder createSlotPoolBuilder(final ComponentMainThreadExecutor mainThreadExecutor) {\n+\t\treturn new SlotPoolBuilder(mainThreadExecutor);\n+\t}\n+\n+\tpublic static SlotPoolBuilder createSlotPoolBuilder(final ResourceManagerGateway resourceManagerGateway) {\n+\t\treturn createSlotPoolBuilder().setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tpublic static SlotPoolBuilder createSlotPoolBuilder(\n+\t\t\tfinal ComponentMainThreadExecutor mainThreadExecutor,\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway) {\n+\n+\t\treturn createSlotPoolBuilder(mainThreadExecutor).setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tpublic static TestingSlotPoolImpl createAndSetUpSlotPool(\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway) throws Exception {\n+\n+\t\treturn createSlotPoolBuilder(resourceManagerGateway).build();\n+\t}\n+\n+\tpublic static TestingSlotPoolImpl createAndSetUpSlotPool(", "originalCommit": "77640441a03432137e3e431af15927d51ad56c4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUzNTU4MA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r465535580", "bodyText": "Moved.", "author": "Thesharing", "createdAt": "2020-08-05T07:43:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyODY3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUzMDY2NQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r465530665", "bodyText": "I'd prefer to have a createAndSetUpSlotPoolWithoutResourceManager() to replace createAndSetUpSlotPool(false).", "author": "zhuzhurk", "createdAt": "2020-08-05T07:33:20Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolInteractionsTest.java", "diffHunk": "@@ -80,24 +65,12 @@\n \n \t@Test\n \tpublic void testSlotAllocationNoResourceManager() throws Exception {\n-\t\tfinal JobID jid = new JobID();\n-\n-\t\ttry (SlotPool pool = new SlotPoolImpl(\n-\t\t\tjid,\n-\t\t\tSystemClock.getInstance(),\n-\t\t\tTestingUtils.infiniteTime(),\n-\t\t\tTestingUtils.infiniteTime(),\n-\t\t\tTestingUtils.infiniteTime()\n-\t\t)) {\n \n-\t\t\tpool.start(JobMasterId.generate(), \"foobar\", testMainThreadExecutor.getMainThreadExecutor());\n-\t\t\tScheduler scheduler = new SchedulerImpl(LocationPreferenceSlotSelectionStrategy.createDefault(), pool);\n-\t\t\tscheduler.start(testMainThreadExecutor.getMainThreadExecutor());\n+\t\ttry (SlotPool pool = createAndSetUpSlotPool(false)) {", "originalCommit": "77640441a03432137e3e431af15927d51ad56c4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0MDczOA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r465540738", "bodyText": "Done.", "author": "Thesharing", "createdAt": "2020-08-05T07:52:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUzMDY2NQ=="}], "type": "inlineReview"}, {"oid": "cb4298bf796daf7c9e3ac2842459ea9221f7ac9e", "url": "https://github.com/apache/flink/commit/cb4298bf796daf7c9e3ac2842459ea9221f7ac9e", "message": "[FLINK-18355][tests] Refactor tests of SlotPoolImpl with SlotPoolUtils and SlotPoolBuilder", "committedDate": "2020-08-05T07:54:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU1Nzk0NA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r465557944", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tfinal ResourceManagerGateway resourceManagerGateway,\n          \n          \n            \n            \t\t\t@Nullable final ResourceManagerGateway resourceManagerGateway,", "author": "zhuzhurk", "createdAt": "2020-08-05T08:23:05Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBatchSlotRequestTest.java", "diffHunk": "@@ -276,4 +280,28 @@ private void advanceTimeAndTriggerCheckBatchSlotTimeout(TestingSlotPoolImpl slot\n \t\t// timeout all as unfulfillable marked slots\n \t\tslotPool.triggerCheckBatchSlotTimeout();\n \t}\n+\n+\tprivate TestingSlotPoolImpl createAndSetUpSlotPool(\n+\t\t\tfinal ComponentMainThreadExecutor componentMainThreadExecutor,\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway,", "originalCommit": "cb4298bf796daf7c9e3ac2842459ea9221f7ac9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2NDAzNg==", "url": "https://github.com/apache/flink/pull/12917#discussion_r465564036", "bodyText": "Done.", "author": "Thesharing", "createdAt": "2020-08-05T08:33:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU1Nzk0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU1ODAyMQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r465558021", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tfinal ResourceManagerGateway resourceManagerGateway,\n          \n          \n            \n            \t\t\t@Nullable final ResourceManagerGateway resourceManagerGateway,", "author": "zhuzhurk", "createdAt": "2020-08-05T08:23:12Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBatchSlotRequestTest.java", "diffHunk": "@@ -276,4 +280,28 @@ private void advanceTimeAndTriggerCheckBatchSlotTimeout(TestingSlotPoolImpl slot\n \t\t// timeout all as unfulfillable marked slots\n \t\tslotPool.triggerCheckBatchSlotTimeout();\n \t}\n+\n+\tprivate TestingSlotPoolImpl createAndSetUpSlotPool(\n+\t\t\tfinal ComponentMainThreadExecutor componentMainThreadExecutor,\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway,\n+\t\t\tfinal Time batchSlotTimeout) throws Exception {\n+\n+\t\treturn new SlotPoolBuilder(componentMainThreadExecutor)\n+\t\t\t.setResourceManagerGateway(resourceManagerGateway)\n+\t\t\t.setBatchSlotTimeout(batchSlotTimeout)\n+\t\t\t.build();\n+\t}\n+\n+\tprivate TestingSlotPoolImpl createAndSetUpSlotPool(\n+\t\t\tfinal ComponentMainThreadExecutor componentMainThreadExecutor,\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway,", "originalCommit": "cb4298bf796daf7c9e3ac2842459ea9221f7ac9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2NTQ3OQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r465565479", "bodyText": "Done.", "author": "Thesharing", "createdAt": "2020-08-05T08:35:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU1ODAyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2MTU4Nw==", "url": "https://github.com/apache/flink/pull/12917#discussion_r465561587", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tstatic SlotPoolBuilder createSlotPoolBuilder(final ResourceManagerGateway resourceManagerGateway) {\n          \n          \n            \n            \tstatic SlotPoolBuilder createSlotPoolBuilder(@Nullable final ResourceManagerGateway resourceManagerGateway) {", "author": "zhuzhurk", "createdAt": "2020-08-05T08:29:04Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolUtils.java", "diffHunk": "@@ -45,14 +48,49 @@\n  */\n public class SlotPoolUtils {\n \n+\tpublic static final Time TIMEOUT = Time.seconds(10L);\n+\n \tprivate SlotPoolUtils() {\n \t\tthrow new UnsupportedOperationException(\"Cannot instantiate this class.\");\n \t}\n \n+\tstatic SlotPoolBuilder createSlotPoolBuilder(final ResourceManagerGateway resourceManagerGateway) {", "originalCommit": "cb4298bf796daf7c9e3ac2842459ea9221f7ac9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2NDg2MQ==", "url": "https://github.com/apache/flink/pull/12917#discussion_r465564861", "bodyText": "Done.", "author": "Thesharing", "createdAt": "2020-08-05T08:34:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2MTU4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2MTY5Mw==", "url": "https://github.com/apache/flink/pull/12917#discussion_r465561693", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tfinal ResourceManagerGateway resourceManagerGateway) throws Exception {\n          \n          \n            \n            \t\t\t@Nullable final ResourceManagerGateway resourceManagerGateway) throws Exception {", "author": "zhuzhurk", "createdAt": "2020-08-05T08:29:15Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolUtils.java", "diffHunk": "@@ -45,14 +48,49 @@\n  */\n public class SlotPoolUtils {\n \n+\tpublic static final Time TIMEOUT = Time.seconds(10L);\n+\n \tprivate SlotPoolUtils() {\n \t\tthrow new UnsupportedOperationException(\"Cannot instantiate this class.\");\n \t}\n \n+\tstatic SlotPoolBuilder createSlotPoolBuilder(final ResourceManagerGateway resourceManagerGateway) {\n+\t\treturn new SlotPoolBuilder(ComponentMainThreadExecutorServiceAdapter.forMainThread())\n+\t\t\t.setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tstatic TestingSlotPoolImpl createAndSetUpSlotPool(\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway) throws Exception {", "originalCommit": "cb4298bf796daf7c9e3ac2842459ea9221f7ac9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2NTI0Ng==", "url": "https://github.com/apache/flink/pull/12917#discussion_r465565246", "bodyText": "Done.", "author": "Thesharing", "createdAt": "2020-08-05T08:35:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2MTY5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2MjMzNw==", "url": "https://github.com/apache/flink/pull/12917#discussion_r465562337", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tstatic TestingSlotPoolImpl createAndSetUpSlotPool(\n          \n          \n            \n            \tprivate static TestingSlotPoolImpl createAndSetUpSlotPool(", "author": "zhuzhurk", "createdAt": "2020-08-05T08:30:22Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -821,22 +714,40 @@ public void testSlotsOfferedWithoutResourceManagerConnected() throws Exception {\n \t\t}\n \t}\n \n-\tprivate void requestNewAllocatedSlots(final SlotPool slotPool, final SlotRequestId... slotRequestIds) {\n-\t\tfor (SlotRequestId slotRequestId : slotRequestIds) {\n-\t\t\trequestNewAllocatedSlot(slotPool, slotRequestId);\n-\t\t}\n+\tstatic TestingSlotPoolImpl createAndSetUpSlotPool(", "originalCommit": "cb4298bf796daf7c9e3ac2842459ea9221f7ac9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2NjI3Nw==", "url": "https://github.com/apache/flink/pull/12917#discussion_r465566277", "bodyText": "Done.", "author": "Thesharing", "createdAt": "2020-08-05T08:37:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2MjMzNw=="}], "type": "inlineReview"}, {"oid": "d489b53b960def9c1beb30f0b605e0debc528120", "url": "https://github.com/apache/flink/commit/d489b53b960def9c1beb30f0b605e0debc528120", "message": "[FLINK-18355][tests] Refactor tests of SlotPoolImpl with SlotPoolUtils and SlotPoolBuilder", "committedDate": "2020-08-05T08:39:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2OTE5NA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r465569194", "bodyText": "This is not needed I think. It is used only in SlotPoolImplTest but that test class already has a directMainThreadExecutor defined.", "author": "zhuzhurk", "createdAt": "2020-08-05T08:42:17Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolUtils.java", "diffHunk": "@@ -45,14 +50,49 @@\n  */\n public class SlotPoolUtils {\n \n+\tpublic static final Time TIMEOUT = Time.seconds(10L);\n+\n \tprivate SlotPoolUtils() {\n \t\tthrow new UnsupportedOperationException(\"Cannot instantiate this class.\");\n \t}\n \n+\tstatic SlotPoolBuilder createSlotPoolBuilder(@Nullable final ResourceManagerGateway resourceManagerGateway) {", "originalCommit": "d489b53b960def9c1beb30f0b605e0debc528120", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU3NDM5Mg==", "url": "https://github.com/apache/flink/pull/12917#discussion_r465574392", "bodyText": "Removed.", "author": "Thesharing", "createdAt": "2020-08-05T08:51:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2OTE5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2OTU0OA==", "url": "https://github.com/apache/flink/pull/12917#discussion_r465569548", "bodyText": "Unused import", "author": "zhuzhurk", "createdAt": "2020-08-05T08:42:59Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -77,7 +72,9 @@\n import java.util.stream.Collectors;\n import java.util.stream.IntStream;\n \n-import static org.apache.flink.runtime.jobmaster.slotpool.AvailableSlotsTest.DEFAULT_TESTING_PROFILE;\n+import static org.apache.flink.runtime.jobmaster.slotpool.SlotPoolUtils.createAndSetUpSlotPool;", "originalCommit": "d489b53b960def9c1beb30f0b605e0debc528120", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU3NDQ3Nw==", "url": "https://github.com/apache/flink/pull/12917#discussion_r465574477", "bodyText": "Removed.", "author": "Thesharing", "createdAt": "2020-08-05T08:51:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2OTU0OA=="}], "type": "inlineReview"}, {"oid": "8449e779e9d551934fde6300b13c9fbcd3b870b3", "url": "https://github.com/apache/flink/commit/8449e779e9d551934fde6300b13c9fbcd3b870b3", "message": "[FLINK-18355][tests] Refactor tests of SlotPoolImpl with SlotPoolUtils and SlotPoolBuilder", "committedDate": "2020-08-05T08:48:18Z", "type": "forcePushed"}, {"oid": "c35d0787214b9fb9a4a02a76a1450d2f7e04a52f", "url": "https://github.com/apache/flink/commit/c35d0787214b9fb9a4a02a76a1450d2f7e04a52f", "message": "[FLINK-18355][tests] Remove SchedulerImpl in SlotPoolImplTest", "committedDate": "2020-08-12T16:12:05Z", "type": "commit"}, {"oid": "ea36b458fc3e8bed1be491b3f173f3f4d6f2f198", "url": "https://github.com/apache/flink/commit/ea36b458fc3e8bed1be491b3f173f3f4d6f2f198", "message": "[hotfix][tests] Merge SlotPoolInteractionsTest#TestingSlotPool with TestingSlotPoolImpl", "committedDate": "2020-08-12T16:12:06Z", "type": "commit"}, {"oid": "b4fb52ea497a4cf6ef672ff894dd4c0d5365ce0d", "url": "https://github.com/apache/flink/commit/b4fb52ea497a4cf6ef672ff894dd4c0d5365ce0d", "message": "[hotfix][tests] Move testProviderAndOwnerSlotAllocationTimeout from SlotPoolInteractionsTest to SchedulerImplTest", "committedDate": "2020-08-12T16:12:07Z", "type": "commit"}, {"oid": "898701df431d3894a3dbbfd7c97f18c0b2fb5f78", "url": "https://github.com/apache/flink/commit/898701df431d3894a3dbbfd7c97f18c0b2fb5f78", "message": "[hotfix][tests] Add SchedulerImplTest#testAllocateSlot to test the basic slot allocation function of SchedulerImpl", "committedDate": "2020-08-12T16:12:08Z", "type": "commit"}, {"oid": "ef5cf7c62254a8b51ccff1492b1ca3afc9c67d34", "url": "https://github.com/apache/flink/commit/ef5cf7c62254a8b51ccff1492b1ca3afc9c67d34", "message": "[FLINK-18355][tests] Remove SchedulerImpl in SlotPoolInteractionsTest", "committedDate": "2020-08-12T16:12:08Z", "type": "commit"}, {"oid": "10fe0eb4926c04b19213783686bad20643f59b3c", "url": "https://github.com/apache/flink/commit/10fe0eb4926c04b19213783686bad20643f59b3c", "message": "[FLINK-18355][tests] Remove redundant codes in SlotPoolImplTest#testAllocateWithFreeSlot", "committedDate": "2020-08-12T16:12:09Z", "type": "commit"}, {"oid": "0ff06bb0d9da85b3328b299f93a7496247f9aad5", "url": "https://github.com/apache/flink/commit/0ff06bb0d9da85b3328b299f93a7496247f9aad5", "message": "[FLINK-18355][tests] Refactor tests of SlotPoolImpl with SlotPoolUtils and SlotPoolBuilder", "committedDate": "2020-08-12T16:12:09Z", "type": "commit"}, {"oid": "0ff06bb0d9da85b3328b299f93a7496247f9aad5", "url": "https://github.com/apache/flink/commit/0ff06bb0d9da85b3328b299f93a7496247f9aad5", "message": "[FLINK-18355][tests] Refactor tests of SlotPoolImpl with SlotPoolUtils and SlotPoolBuilder", "committedDate": "2020-08-12T16:12:09Z", "type": "forcePushed"}]}