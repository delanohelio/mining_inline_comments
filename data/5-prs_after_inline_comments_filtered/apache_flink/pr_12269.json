{"pr_number": 12269, "pr_title": "[FLINK-17351] [runtime] Increase `continuousFailureCounter` in `CheckpointFailureManager` for CHECKPOINT_EXPIRED", "pr_createdAt": "2020-05-20T14:47:47Z", "pr_url": "https://github.com/apache/flink/pull/12269", "timeline": [{"oid": "24c44fd00652a6b5859075b3afea1e4e9ca98445", "url": "https://github.com/apache/flink/commit/24c44fd00652a6b5859075b3afea1e4e9ca98445", "message": "[FLINK-17351] Increase `continuousFailureCounter` in `CheckpointFailureManager` for CHECKPOINT_EXPIRED\n\nBefore this PR, `CHECKPOINT_EXPIRED` is not counted in `continuousFailureCounter`. Hence,\nif the failure of checkpointing is detected after checkpoint times out, the failure gets ignored since\nthe `PendingCheckpoint` has already been discarded, leading the job unable to restart automatically in theory\nunless something else fails.\n\nThis PR counts `CHECKPOINT_EXPIRED` in `continuousFailureCounter`.", "committedDate": "2020-05-20T14:51:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzMDIyNA==", "url": "https://github.com/apache/flink/pull/12269#discussion_r428630224", "bodyText": "I think using org.junit.Test#expected (and a specific exception class) would be more expressive and less verbose here.", "author": "rkhachatryan", "createdAt": "2020-05-21T12:48:17Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/checkpoint/CheckpointCoordinatorTest.java", "diffHunk": "@@ -262,6 +251,40 @@ public void failJobDueToTaskFailure(Throwable cause, ExecutionAttemptID failingT\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testExpiredCheckpointExceedsTolerableFailureNumber() {\n+\t\t// create some mock Execution vertices that receive the checkpoint trigger messages\n+\t\tExecutionVertex vertex1 = mockExecutionVertex(new ExecutionAttemptID());\n+\t\tExecutionVertex vertex2 = mockExecutionVertex(new ExecutionAttemptID());\n+\n+\t\tfinal String errorMsg = \"Exceeded checkpoint failure tolerance number!\";\n+\t\tCheckpointFailureManager checkpointFailureManager = getCheckpointFailureManager(errorMsg);\n+\t\tCheckpointCoordinator coord = getCheckpointCoordinator(new JobID(), vertex1, vertex2, checkpointFailureManager);\n+\n+\t\ttry {\n+\t\t\t// trigger the checkpoint. this should succeed\n+\t\t\tfinal CompletableFuture<CompletedCheckpoint> checkPointFuture = coord.triggerCheckpoint(false);\n+\t\t\tmanuallyTriggeredScheduledExecutor.triggerAll();\n+\t\t\tassertFalse(checkPointFuture.isCompletedExceptionally());\n+\n+\t\t\tcoord.abortPendingCheckpoints(new CheckpointException(CHECKPOINT_EXPIRED));\n+\n+\t\t\tfail(\"Test failed.\");\n+\t\t}\n+\t\tcatch (Exception e) {\n+\t\t\t//expected\n+\t\t\tassertTrue(e instanceof RuntimeException);\n+\t\t\tassertEquals(errorMsg, e.getMessage());", "originalCommit": "24c44fd00652a6b5859075b3afea1e4e9ca98445", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxNjE4NQ==", "url": "https://github.com/apache/flink/pull/12269#discussion_r429016185", "bodyText": "Hmm, I think different people have quite different tastes :-)\nI am doing it so because the rest of the tests are using the try-catch-fail style. But I am fine with either way.\nDo you insist on this? I can make the change if you do :-)", "author": "curcur", "createdAt": "2020-05-22T02:50:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzMDIyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzMzgwMA==", "url": "https://github.com/apache/flink/pull/12269#discussion_r429233800", "bodyText": "No, I don't insist :)", "author": "rkhachatryan", "createdAt": "2020-05-22T13:04:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzMDIyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEzMTI2Mw==", "url": "https://github.com/apache/flink/pull/12269#discussion_r430131263", "bodyText": "Ha, then I will mark this as resolved.", "author": "curcur", "createdAt": "2020-05-26T02:53:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzMDIyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzMDkxMA==", "url": "https://github.com/apache/flink/pull/12269#discussion_r428630910", "bodyText": "Why do we need to handle this error? Won't it's stacktrace be printed and test fail anyways?", "author": "rkhachatryan", "createdAt": "2020-05-21T12:49:51Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/checkpoint/CheckpointCoordinatorTest.java", "diffHunk": "@@ -262,6 +251,40 @@ public void failJobDueToTaskFailure(Throwable cause, ExecutionAttemptID failingT\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testExpiredCheckpointExceedsTolerableFailureNumber() {\n+\t\t// create some mock Execution vertices that receive the checkpoint trigger messages\n+\t\tExecutionVertex vertex1 = mockExecutionVertex(new ExecutionAttemptID());\n+\t\tExecutionVertex vertex2 = mockExecutionVertex(new ExecutionAttemptID());\n+\n+\t\tfinal String errorMsg = \"Exceeded checkpoint failure tolerance number!\";\n+\t\tCheckpointFailureManager checkpointFailureManager = getCheckpointFailureManager(errorMsg);\n+\t\tCheckpointCoordinator coord = getCheckpointCoordinator(new JobID(), vertex1, vertex2, checkpointFailureManager);\n+\n+\t\ttry {\n+\t\t\t// trigger the checkpoint. this should succeed\n+\t\t\tfinal CompletableFuture<CompletedCheckpoint> checkPointFuture = coord.triggerCheckpoint(false);\n+\t\t\tmanuallyTriggeredScheduledExecutor.triggerAll();\n+\t\t\tassertFalse(checkPointFuture.isCompletedExceptionally());\n+\n+\t\t\tcoord.abortPendingCheckpoints(new CheckpointException(CHECKPOINT_EXPIRED));\n+\n+\t\t\tfail(\"Test failed.\");\n+\t\t}\n+\t\tcatch (Exception e) {\n+\t\t\t//expected\n+\t\t\tassertTrue(e instanceof RuntimeException);\n+\t\t\tassertEquals(errorMsg, e.getMessage());\n+\t\t} finally {\n+\t\t\ttry {\n+\t\t\t\tcoord.shutdown(JobStatus.FINISHED);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\te.printStackTrace();\n+\t\t\t\tfail(e.getMessage());", "originalCommit": "24c44fd00652a6b5859075b3afea1e4e9ca98445", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxODYyMQ==", "url": "https://github.com/apache/flink/pull/12269#discussion_r429018621", "bodyText": "Ha, I think you mean to throw the exception directly from the test function.\nYep, that should also work. It is indeed a bit verbose here.", "author": "curcur", "createdAt": "2020-05-22T03:02:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzMDkxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzMjMyMQ==", "url": "https://github.com/apache/flink/pull/12269#discussion_r428632321", "bodyText": "I think this check is not necessary here because triggering should be tested separately\n(and the next check should fail anyways if trigger failed)", "author": "rkhachatryan", "createdAt": "2020-05-21T12:52:48Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/checkpoint/CheckpointCoordinatorTest.java", "diffHunk": "@@ -262,6 +251,40 @@ public void failJobDueToTaskFailure(Throwable cause, ExecutionAttemptID failingT\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testExpiredCheckpointExceedsTolerableFailureNumber() {\n+\t\t// create some mock Execution vertices that receive the checkpoint trigger messages\n+\t\tExecutionVertex vertex1 = mockExecutionVertex(new ExecutionAttemptID());\n+\t\tExecutionVertex vertex2 = mockExecutionVertex(new ExecutionAttemptID());\n+\n+\t\tfinal String errorMsg = \"Exceeded checkpoint failure tolerance number!\";\n+\t\tCheckpointFailureManager checkpointFailureManager = getCheckpointFailureManager(errorMsg);\n+\t\tCheckpointCoordinator coord = getCheckpointCoordinator(new JobID(), vertex1, vertex2, checkpointFailureManager);\n+\n+\t\ttry {\n+\t\t\t// trigger the checkpoint. this should succeed\n+\t\t\tfinal CompletableFuture<CompletedCheckpoint> checkPointFuture = coord.triggerCheckpoint(false);\n+\t\t\tmanuallyTriggeredScheduledExecutor.triggerAll();\n+\t\t\tassertFalse(checkPointFuture.isCompletedExceptionally());", "originalCommit": "24c44fd00652a6b5859075b3afea1e4e9ca98445", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyNDAzNw==", "url": "https://github.com/apache/flink/pull/12269#discussion_r429024037", "bodyText": "Hmm, I do not think it is used to test triggering. I guess it is to make sure the exception is from coord.abortPendingCheckpoints, not from other places like triggering.\nMaybe it is an overkill?", "author": "curcur", "createdAt": "2020-05-22T03:27:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzMjMyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzNTkyMg==", "url": "https://github.com/apache/flink/pull/12269#discussion_r429235922", "bodyText": "to make sure the exception is from coord.abortPendingCheckpoints, not from other places like triggering\n\nException from other places should fail other tests.\nAlso, you could specify explicitly which exception is expected from this test, so any other exception will fail it.", "author": "rkhachatryan", "createdAt": "2020-05-22T13:09:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzMjMyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyODM2NA==", "url": "https://github.com/apache/flink/pull/12269#discussion_r430128364", "bodyText": "to make sure the exception is from coord.abortPendingCheckpoints, not from other places like triggering\n\nException from other places should fail other tests.\nAlso, you could specify explicitly which exception is expected from this test, so any other exception will fail it.\n\nyeah, that's right. I will remove it.", "author": "curcur", "createdAt": "2020-05-26T02:39:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzMjMyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzMzMzOA==", "url": "https://github.com/apache/flink/pull/12269#discussion_r428633338", "bodyText": "nit: this comment basically repeats what the code does, I think it's unnecessary", "author": "rkhachatryan", "createdAt": "2020-05-21T12:54:59Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/checkpoint/CheckpointCoordinatorTest.java", "diffHunk": "@@ -262,6 +251,40 @@ public void failJobDueToTaskFailure(Throwable cause, ExecutionAttemptID failingT\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testExpiredCheckpointExceedsTolerableFailureNumber() {\n+\t\t// create some mock Execution vertices that receive the checkpoint trigger messages\n+\t\tExecutionVertex vertex1 = mockExecutionVertex(new ExecutionAttemptID());\n+\t\tExecutionVertex vertex2 = mockExecutionVertex(new ExecutionAttemptID());\n+\n+\t\tfinal String errorMsg = \"Exceeded checkpoint failure tolerance number!\";\n+\t\tCheckpointFailureManager checkpointFailureManager = getCheckpointFailureManager(errorMsg);\n+\t\tCheckpointCoordinator coord = getCheckpointCoordinator(new JobID(), vertex1, vertex2, checkpointFailureManager);\n+\n+\t\ttry {\n+\t\t\t// trigger the checkpoint. this should succeed", "originalCommit": "24c44fd00652a6b5859075b3afea1e4e9ca98445", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzOTgwNw==", "url": "https://github.com/apache/flink/pull/12269#discussion_r428639807", "bodyText": "\ud83d\udc4d for extracting shared code", "author": "rkhachatryan", "createdAt": "2020-05-21T13:08:10Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/checkpoint/CheckpointCoordinatorTest.java", "diffHunk": "@@ -2292,6 +2315,22 @@ private CheckpointCoordinator getCheckpointCoordinator() {\n \t\t\t.build();\n \t}\n \n+\tprivate CheckpointFailureManager getCheckpointFailureManager(String errorMsg) {", "originalCommit": "24c44fd00652a6b5859075b3afea1e4e9ca98445", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f415b350558bea9b17e12638e70efc701f06c14d", "url": "https://github.com/apache/flink/commit/f415b350558bea9b17e12638e70efc701f06c14d", "message": "[FLINK-17351] Increase `continuousFailureCounter` in `CheckpointFailureManager` for CHECKPOINT_EXPIRED\n\nBefore this PR, `CHECKPOINT_EXPIRED` is not counted in `continuousFailureCounter`. Hence,\nif the failure of checkpointing is detected after checkpoint times out, the failure gets ignored since\nthe `PendingCheckpoint` has already been discarded, leading the job unable to restart automatically in theory\nunless something else fails.\n\nThis PR counts `CHECKPOINT_EXPIRED` in `continuousFailureCounter`.", "committedDate": "2020-05-22T03:30:49Z", "type": "forcePushed"}, {"oid": "dce852dcb934f4b8e301b3b242decd2704d99cc8", "url": "https://github.com/apache/flink/commit/dce852dcb934f4b8e301b3b242decd2704d99cc8", "message": "[FLINK-17351] Increase `continuousFailureCounter` in `CheckpointFailureManager` for CHECKPOINT_EXPIRED\n\nBefore this PR, `CHECKPOINT_EXPIRED` is not counted in `continuousFailureCounter`. Hence,\nif the failure of checkpointing is detected after checkpoint times out, the failure gets ignored since\nthe `PendingCheckpoint` has already been discarded, leading the job unable to restart automatically in theory\nunless something else fails.\n\nThis PR counts `CHECKPOINT_EXPIRED` in `continuousFailureCounter`.", "committedDate": "2020-05-26T03:25:43Z", "type": "commit"}, {"oid": "dce852dcb934f4b8e301b3b242decd2704d99cc8", "url": "https://github.com/apache/flink/commit/dce852dcb934f4b8e301b3b242decd2704d99cc8", "message": "[FLINK-17351] Increase `continuousFailureCounter` in `CheckpointFailureManager` for CHECKPOINT_EXPIRED\n\nBefore this PR, `CHECKPOINT_EXPIRED` is not counted in `continuousFailureCounter`. Hence,\nif the failure of checkpointing is detected after checkpoint times out, the failure gets ignored since\nthe `PendingCheckpoint` has already been discarded, leading the job unable to restart automatically in theory\nunless something else fails.\n\nThis PR counts `CHECKPOINT_EXPIRED` in `continuousFailureCounter`.", "committedDate": "2020-05-26T03:25:43Z", "type": "forcePushed"}]}