{"pr_number": 11674, "pr_title": "[FLINK-16887][table-planner-blink] Refactor retraction rules to support inferring ChangelogMode", "pr_createdAt": "2020-04-08T17:11:31Z", "pr_url": "https://github.com/apache/flink/pull/11674", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3NzY1NQ==", "url": "https://github.com/apache/flink/pull/11674#discussion_r407077655", "bodyText": "nit: happens -> happen", "author": "libenchao", "createdAt": "2020-04-11T15:37:36Z", "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/trait/ModifyKind.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.plan.trait;\n+\n+/**\n+ * Lists all kinds of modify operations that happens in a changelog.", "originalCommit": "27728b10f3e719b3f53fe199cf02e5b820ddfcd1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3OTUxOQ==", "url": "https://github.com/apache/flink/pull/11674#discussion_r407079519", "bodyText": "we can make this constructor private, since we already have a public newBuilder method for creating a Builder", "author": "libenchao", "createdAt": "2020-04-11T15:55:36Z", "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/trait/ModifyKindSet.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.plan.trait;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * The set of modify operations contained in a changelog.\n+ *\n+ * @see ModifyKind\n+ */\n+public class ModifyKindSet {\n+\n+\t/**\n+\t * Insert-only modify kind set.\n+\t */\n+\tpublic static final ModifyKindSet INSERT_ONLY = ModifyKindSet.newBuilder()\n+\t\t.addContainedKind(ModifyKind.INSERT)\n+\t\t.build();\n+\n+\t/**\n+\t * A modify kind set contains all change operations.\n+\t */\n+\tpublic static final ModifyKindSet ALL_CHANGES = ModifyKindSet.newBuilder()\n+\t\t.addContainedKind(ModifyKind.INSERT)\n+\t\t.addContainedKind(ModifyKind.UPDATE)\n+\t\t.addContainedKind(ModifyKind.DELETE)\n+\t\t.build();\n+\n+\tprivate final Set<ModifyKind> kinds;\n+\n+\tprivate ModifyKindSet(Set<ModifyKind> kinds) {\n+\t\tthis.kinds = Collections.unmodifiableSet(kinds);\n+\t}\n+\n+\tpublic Set<ModifyKind> getContainedKinds() {\n+\t\treturn kinds;\n+\t}\n+\n+\tpublic boolean contains(ModifyKind kind) {\n+\t\treturn kinds.contains(kind);\n+\t}\n+\n+\tpublic boolean containsOnly(ModifyKind kind) {\n+\t\treturn kinds.size() == 1 && kinds.contains(kind);\n+\t}\n+\n+\tpublic boolean isInsertOnly() {\n+\t\treturn containsOnly(ModifyKind.INSERT);\n+\t}\n+\n+\tpublic int size() {\n+\t\treturn kinds.size();\n+\t}\n+\n+\tpublic boolean isEmpty() {\n+\t\treturn kinds.isEmpty();\n+\t}\n+\n+\t/**\n+\t * Returns a new set of ModifyKind which is the difference between two sets.\n+\t * It is also equal to {@code this.kinds - that.kinds}. For example:\n+\t * [I,U,D] diff [I] = [U,D]\n+\t * [I,U] diff [U,D] = [I]\n+\t * [I,U,D] diff [I,U,D] = []\n+\t */\n+\tpublic ModifyKindSet diff(ModifyKindSet other) {\n+\t\tSet<ModifyKind> result = EnumSet.noneOf(ModifyKind.class);\n+\t\tresult.addAll(this.kinds);\n+\t\tresult.removeAll(other.kinds);\n+\t\treturn new ModifyKindSet(result);\n+\t}\n+\n+\t/**\n+\t * Returns a new ModifyKindSet with all kinds set in both this set and in another set.\n+\t */\n+\tpublic ModifyKindSet intersect(ModifyKindSet other) {\n+\t\tBuilder builder = new Builder();\n+\t\tfor (ModifyKind kind : other.getContainedKinds()) {\n+\t\t\tif (this.contains(kind)) {\n+\t\t\t\tbuilder.addContainedKind(kind);\n+\t\t\t}\n+\t\t}\n+\t\treturn builder.build();\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object o) {\n+\t\tif (this == o) {\n+\t\t\treturn true;\n+\t\t}\n+\t\tif (o == null || getClass() != o.getClass()) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tModifyKindSet that = (ModifyKindSet) o;\n+\t\treturn Objects.equals(kinds, that.kinds);\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\treturn Objects.hash(kinds);\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\tif (kinds.isEmpty()) {\n+\t\t\treturn \"NONE\";\n+\t\t}\n+\t\tList<String> modifyKinds = new ArrayList<>();\n+\t\tif (contains(ModifyKind.INSERT)) {\n+\t\t\tmodifyKinds.add(\"I\");\n+\t\t}\n+\t\tif (contains(ModifyKind.UPDATE)) {\n+\t\t\tmodifyKinds.add(\"U\");\n+\t\t}\n+\t\tif (contains(ModifyKind.DELETE)) {\n+\t\t\tmodifyKinds.add(\"D\");\n+\t\t}\n+\t\treturn String.join(\",\", modifyKinds);\n+\t}\n+\n+\t// --------------------------------------------------------------------------------------------\n+\n+\t/**\n+\t * Returns the union of a number of ModifyKindSets.\n+\t */\n+\tpublic static ModifyKindSet union(ModifyKindSet... modifyKindSets) {\n+\t\tBuilder builder = newBuilder();\n+\t\tfor (ModifyKindSet set : modifyKindSets) {\n+\t\t\tfor (ModifyKind kind : set.getContainedKinds()) {\n+\t\t\t\tbuilder.addContainedKind(kind);\n+\t\t\t}\n+\t\t}\n+\t\treturn builder.build();\n+\t}\n+\n+\t/**\n+\t * Builder for configuring and creating instances of {@link ModifyKindSet}.\n+\t */\n+\tpublic static Builder newBuilder() {\n+\t\treturn new Builder();\n+\t}\n+\n+\t/**\n+\t * Builder for configuring and creating instances of {@link ModifyKindSet}.\n+\t */\n+\tpublic static class Builder {\n+\n+\t\tprivate final Set<ModifyKind> kinds = EnumSet.noneOf(ModifyKind.class);\n+\n+\t\tpublic Builder() {", "originalCommit": "27728b10f3e719b3f53fe199cf02e5b820ddfcd1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM0ODUxOQ==", "url": "https://github.com/apache/flink/pull/11674#discussion_r407348519", "bodyText": "use minus? diff sounds like another meaning", "author": "KurtYoung", "createdAt": "2020-04-13T07:01:38Z", "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/trait/ModifyKindSet.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.plan.trait;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * The set of modify operations contained in a changelog.\n+ *\n+ * @see ModifyKind\n+ */\n+public class ModifyKindSet {\n+\n+\t/**\n+\t * Insert-only modify kind set.\n+\t */\n+\tpublic static final ModifyKindSet INSERT_ONLY = ModifyKindSet.newBuilder()\n+\t\t.addContainedKind(ModifyKind.INSERT)\n+\t\t.build();\n+\n+\t/**\n+\t * A modify kind set contains all change operations.\n+\t */\n+\tpublic static final ModifyKindSet ALL_CHANGES = ModifyKindSet.newBuilder()\n+\t\t.addContainedKind(ModifyKind.INSERT)\n+\t\t.addContainedKind(ModifyKind.UPDATE)\n+\t\t.addContainedKind(ModifyKind.DELETE)\n+\t\t.build();\n+\n+\tprivate final Set<ModifyKind> kinds;\n+\n+\tprivate ModifyKindSet(Set<ModifyKind> kinds) {\n+\t\tthis.kinds = Collections.unmodifiableSet(kinds);\n+\t}\n+\n+\tpublic Set<ModifyKind> getContainedKinds() {\n+\t\treturn kinds;\n+\t}\n+\n+\tpublic boolean contains(ModifyKind kind) {\n+\t\treturn kinds.contains(kind);\n+\t}\n+\n+\tpublic boolean containsOnly(ModifyKind kind) {\n+\t\treturn kinds.size() == 1 && kinds.contains(kind);\n+\t}\n+\n+\tpublic boolean isInsertOnly() {\n+\t\treturn containsOnly(ModifyKind.INSERT);\n+\t}\n+\n+\tpublic int size() {\n+\t\treturn kinds.size();\n+\t}\n+\n+\tpublic boolean isEmpty() {\n+\t\treturn kinds.isEmpty();\n+\t}\n+\n+\t/**\n+\t * Returns a new set of ModifyKind which is the difference between two sets.\n+\t * It is also equal to {@code this.kinds - that.kinds}. For example:\n+\t * [I,U,D] diff [I] = [U,D]\n+\t * [I,U] diff [U,D] = [I]\n+\t * [I,U,D] diff [I,U,D] = []\n+\t */\n+\tpublic ModifyKindSet diff(ModifyKindSet other) {", "originalCommit": "6d34187c1dde98f1fc8573063e298bd481224688", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM0ODk1Nw==", "url": "https://github.com/apache/flink/pull/11674#discussion_r407348957", "bodyText": "I think we should protect this class to let it be always non-empty.\nDoes an empty ModifyKindSet make any sense?", "author": "KurtYoung", "createdAt": "2020-04-13T07:03:08Z", "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/trait/ModifyKindSet.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.plan.trait;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * The set of modify operations contained in a changelog.\n+ *\n+ * @see ModifyKind\n+ */\n+public class ModifyKindSet {\n+\n+\t/**\n+\t * Insert-only modify kind set.\n+\t */\n+\tpublic static final ModifyKindSet INSERT_ONLY = ModifyKindSet.newBuilder()\n+\t\t.addContainedKind(ModifyKind.INSERT)\n+\t\t.build();\n+\n+\t/**\n+\t * A modify kind set contains all change operations.\n+\t */\n+\tpublic static final ModifyKindSet ALL_CHANGES = ModifyKindSet.newBuilder()\n+\t\t.addContainedKind(ModifyKind.INSERT)\n+\t\t.addContainedKind(ModifyKind.UPDATE)\n+\t\t.addContainedKind(ModifyKind.DELETE)\n+\t\t.build();\n+\n+\tprivate final Set<ModifyKind> kinds;\n+\n+\tprivate ModifyKindSet(Set<ModifyKind> kinds) {\n+\t\tthis.kinds = Collections.unmodifiableSet(kinds);\n+\t}\n+\n+\tpublic Set<ModifyKind> getContainedKinds() {\n+\t\treturn kinds;\n+\t}\n+\n+\tpublic boolean contains(ModifyKind kind) {\n+\t\treturn kinds.contains(kind);\n+\t}\n+\n+\tpublic boolean containsOnly(ModifyKind kind) {\n+\t\treturn kinds.size() == 1 && kinds.contains(kind);\n+\t}\n+\n+\tpublic boolean isInsertOnly() {\n+\t\treturn containsOnly(ModifyKind.INSERT);\n+\t}\n+\n+\tpublic int size() {\n+\t\treturn kinds.size();\n+\t}\n+\n+\tpublic boolean isEmpty() {\n+\t\treturn kinds.isEmpty();\n+\t}\n+\n+\t/**\n+\t * Returns a new set of ModifyKind which is the difference between two sets.\n+\t * It is also equal to {@code this.kinds - that.kinds}. For example:\n+\t * [I,U,D] diff [I] = [U,D]\n+\t * [I,U] diff [U,D] = [I]\n+\t * [I,U,D] diff [I,U,D] = []\n+\t */\n+\tpublic ModifyKindSet diff(ModifyKindSet other) {\n+\t\tSet<ModifyKind> result = EnumSet.noneOf(ModifyKind.class);\n+\t\tresult.addAll(this.kinds);\n+\t\tresult.removeAll(other.kinds);\n+\t\treturn new ModifyKindSet(result);\n+\t}\n+\n+\t/**\n+\t * Returns a new ModifyKindSet with all kinds set in both this set and in another set.\n+\t */\n+\tpublic ModifyKindSet intersect(ModifyKindSet other) {\n+\t\tBuilder builder = new Builder();\n+\t\tfor (ModifyKind kind : other.getContainedKinds()) {\n+\t\t\tif (this.contains(kind)) {\n+\t\t\t\tbuilder.addContainedKind(kind);\n+\t\t\t}\n+\t\t}\n+\t\treturn builder.build();\n+\t}\n+\n+\t/**\n+\t * Returns a new ModifyKindSet with the union of the other ModifyKindSet.\n+\t */\n+\tpublic ModifyKindSet union(ModifyKindSet other) {\n+\t\treturn union(this, other);\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object o) {\n+\t\tif (this == o) {\n+\t\t\treturn true;\n+\t\t}\n+\t\tif (o == null || getClass() != o.getClass()) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tModifyKindSet that = (ModifyKindSet) o;\n+\t\treturn Objects.equals(kinds, that.kinds);\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\treturn Objects.hash(kinds);\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\tif (kinds.isEmpty()) {", "originalCommit": "6d34187c1dde98f1fc8573063e298bd481224688", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQzODQxOQ==", "url": "https://github.com/apache/flink/pull/11674#discussion_r407438419", "bodyText": "This is on purpose. Sink will produce emtpy ModifyKindSet, because it output nothing.", "author": "wuchong", "createdAt": "2020-04-13T11:35:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM0ODk1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM0OTY3Mg==", "url": "https://github.com/apache/flink/pull/11674#discussion_r407349672", "bodyText": "It's hard to imagine & understand why this class support merge, what should be the expected behavior?", "author": "KurtYoung", "createdAt": "2020-04-13T07:05:57Z", "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/trait/UpdateKind.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.plan.trait;\n+\n+/**\n+ * Lists all kinds of {@link ModifyKind#UPDATE} operation.\n+ */\n+public enum UpdateKind {\n+\n+\t/**\n+\t * No update operation.\n+\t */\n+\tNO_UPDATE,\n+\n+\t/**\n+\t * This kind indicates that operators should emit update changes just as a row of\n+\t * {@code RowKind#UPDATE_AFTER}.\n+\t */\n+\tONLY_UPDATE_AFTER,\n+\n+\t/**\n+\t * This kind indicates that operators should emit update changes in the way that\n+\t * a row of {@code RowKind#UPDATE_BEFORE} and a row of {@code RowKind#UPDATE_AFTER} together.\n+\t */\n+\tBEFORE_AND_AFTER;\n+\n+\t/**\n+\t * Return a new UpdateKind which merges this UpdateKind and the other UpdateKind.\n+\t */\n+\tpublic UpdateKind merge(UpdateKind that) {", "originalCommit": "6d34187c1dde98f1fc8573063e298bd481224688", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQzODQxMA==", "url": "https://github.com/apache/flink/pull/11674#discussion_r407438410", "bodyText": "Children of Union may have different UpdateKind. This is used to \"union\" children's UpdateKind. I was thinking \"union\" is not fit for this enum class, because it is not a bitset.\nI moved this logic into FlinkChangelogModeInferenceProgram as it is only used by StreamExecUnion.", "author": "wuchong", "createdAt": "2020-04-13T11:35:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM0OTY3Mg=="}], "type": "inlineReview"}, {"oid": "ce56fcd7c4168f70b239f3d62962e5b0146ad5d0", "url": "https://github.com/apache/flink/commit/ce56fcd7c4168f70b239f3d62962e5b0146ad5d0", "message": "[FLINK-16887][table-planner-blink] Refactor retraction rules to support inferring ChangelogMode\n\nThis closes #11674", "committedDate": "2020-04-15T08:57:31Z", "type": "commit"}, {"oid": "ce56fcd7c4168f70b239f3d62962e5b0146ad5d0", "url": "https://github.com/apache/flink/commit/ce56fcd7c4168f70b239f3d62962e5b0146ad5d0", "message": "[FLINK-16887][table-planner-blink] Refactor retraction rules to support inferring ChangelogMode\n\nThis closes #11674", "committedDate": "2020-04-15T08:57:31Z", "type": "forcePushed"}]}