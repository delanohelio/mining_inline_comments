{"pr_number": 13008, "pr_title": "[FLINK-18656][task] Provide checkpointStartDelayNanos for SourceStreamTask", "pr_createdAt": "2020-07-28T14:40:58Z", "pr_url": "https://github.com/apache/flink/pull/13008", "timeline": [{"oid": "e26ba3c3ca1494388070ea0d3c2c46a7d77f5eb8", "url": "https://github.com/apache/flink/commit/e26ba3c3ca1494388070ea0d3c2c46a7d77f5eb8", "message": "[FLINK-18656][tests] Rename MultipleInputStreamTaskTestHarnessBuilder to StreamTaskMailboxTestHarnessBuilder\n\nThe orignal concept MultipleInputStreamTaskTestHarnessBuilder proved much more\nversatile then initially expected and it can easily handle all of the uses cases:\n- MultipleInputStreamTask\n- OneInputStreamTask\n- SourceStreamTask\n\nHence there is no need for the abstraction and no need to provide specialized versions of\nMultipleInputStreamTaskTestHarnessBuilder for the other types of tasks.", "committedDate": "2020-07-28T14:42:01Z", "type": "forcePushed"}, {"oid": "69c59d4d84e2e22969b6537fbcc6b924d8051655", "url": "https://github.com/apache/flink/commit/69c59d4d84e2e22969b6537fbcc6b924d8051655", "message": "[FLINK-18656][task] Provide checkpointStartDelayNanos for SourceStreamTask\n\ncheckpointStartDelayNanos for SourceStreamTask is meassured how long did it take\nfor the checkpoint triggering RPC call to finally start executing inside the mailbox\nthread. If the mailbox is busy, for example SourceFunction is backpressured, this\ntime can be quite significant.", "committedDate": "2020-07-28T15:57:46Z", "type": "commit"}, {"oid": "d04f71e6b7deb2b3b0757a213bdaa9c1e0834974", "url": "https://github.com/apache/flink/commit/d04f71e6b7deb2b3b0757a213bdaa9c1e0834974", "message": "[FLINK-18656][tests] Rename MultipleInputStreamTaskTestHarnessBuilder to StreamTaskMailboxTestHarnessBuilder\n\nThe orignal concept MultipleInputStreamTaskTestHarnessBuilder proved much more\nversatile then initially expected and it can easily handle all of the uses cases:\n- MultipleInputStreamTask\n- OneInputStreamTask\n- SourceStreamTask\n\nHence there is no need for the abstraction and no need to provide specialized versions of\nMultipleInputStreamTaskTestHarnessBuilder for the other types of tasks.", "committedDate": "2020-07-28T15:57:46Z", "type": "commit"}, {"oid": "d04f71e6b7deb2b3b0757a213bdaa9c1e0834974", "url": "https://github.com/apache/flink/commit/d04f71e6b7deb2b3b0757a213bdaa9c1e0834974", "message": "[FLINK-18656][tests] Rename MultipleInputStreamTaskTestHarnessBuilder to StreamTaskMailboxTestHarnessBuilder\n\nThe orignal concept MultipleInputStreamTaskTestHarnessBuilder proved much more\nversatile then initially expected and it can easily handle all of the uses cases:\n- MultipleInputStreamTask\n- OneInputStreamTask\n- SourceStreamTask\n\nHence there is no need for the abstraction and no need to provide specialized versions of\nMultipleInputStreamTaskTestHarnessBuilder for the other types of tasks.", "committedDate": "2020-07-28T15:57:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc2Nzg3Mg==", "url": "https://github.com/apache/flink/pull/13008#discussion_r461767872", "bodyText": "Shouldn't this field be volatile?", "author": "rkhachatryan", "createdAt": "2020-07-28T17:56:42Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "diffHunk": "@@ -217,6 +217,8 @@\n \n \tprivate Long syncSavepointId = null;\n \n+\tprivate long latestAsyncCheckpointStartDelayNanos;", "originalCommit": "69c59d4d84e2e22969b6537fbcc6b924d8051655", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEwMjA2Nw==", "url": "https://github.com/apache/flink/pull/13008#discussion_r462102067", "bodyText": "For the full correctness yes, but:\n\nwe long decided that we don't want to sacrifice performance for metrics (there are other examples of that - here it's not that important, but take a look for example at RecordWriter#numBytesOut or RecordWriter#numBuffersOut, which are on more performance sensitive path)\nmetrics reading is not critical, even if gets older/incorrect value\nI haven't seen problems caused by this so far\nthe proper solution that wouldn't impact performance as much would be to read the metrics from the mailbox thread (via mailbox action). It would be a zero overhead on the metric collecting path, small and very rare overhead for the task thread during measurement and some extra overhead for the thread asking for metric values (but that's not important)\n\nSo I would keep ignoring the problem, until it becomes real, and then go on with the mailbox solution.", "author": "pnowojski", "createdAt": "2020-07-29T07:42:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc2Nzg3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc3NjQzMw==", "url": "https://github.com/apache/flink/pull/13008#discussion_r461776433", "bodyText": "During the offline discussion, it seemed the right thing to update the metric here.\nBut now I'm wondering,  isn't it too late to update it here?\nIf the 1st checkpoint is delayed for 1 hour, then the metric will report zero-delay for this one hour, right? Is it an issue?\nI see the following way to solve this:\n\nintroduce pendingCheckpointTimestamp\nupon receiving RPC call, update pendingCheckpointTimestamp it from cp metadata and reset latestDelay\nupon starting checkpoint, do the opposite: reset pendingCheckpointTimestamp and update latestDelay\nin getAsyncCheckpointStartDelayNanos report  now() - pendingCheckpointTimestamp or latestDelay depending on what is set\n\n(probably need to adjust for multiple concurrent checkpoints)", "author": "rkhachatryan", "createdAt": "2020-07-28T18:11:34Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "diffHunk": "@@ -791,6 +793,9 @@ public StreamStatusMaintainer getStreamStatusMaintainer() {\n \t\tCompletableFuture<Boolean> result = new CompletableFuture<>();\n \t\tmainMailboxExecutor.execute(\n \t\t\t\t() -> {\n+\t\t\t\t\tlatestAsyncCheckpointStartDelayNanos = 1_000_000 * Math.max(", "originalCommit": "69c59d4d84e2e22969b6537fbcc6b924d8051655", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEwNDUwNw==", "url": "https://github.com/apache/flink/pull/13008#discussion_r462104507", "bodyText": "If the 1st checkpoint is delayed for 1 hour, then the metric will report zero-delay for this one hour, right? Is it an issue?\n\nYes you are right, there will be \"blind spot\" period while the first checkpoint is still on-going. I think this is fine:\n\nit's the same behaviour as for the network tasks\nI think the prime use cases is to look at the statistics of finished/completed checkpoints.\n\nSo I wouldn't complicate the code because of that.", "author": "pnowojski", "createdAt": "2020-07-29T07:46:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc3NjQzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjExMTMxOA==", "url": "https://github.com/apache/flink/pull/13008#discussion_r462111318", "bodyText": "Makes sense.", "author": "rkhachatryan", "createdAt": "2020-07-29T07:59:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc3NjQzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4MDUyNg==", "url": "https://github.com/apache/flink/pull/13008#discussion_r461780526", "bodyText": "\ud83d\udc4d \ud83d\udc4d \ud83d\udc4d \ud83d\ude04", "author": "rkhachatryan", "createdAt": "2020-07-28T18:18:45Z", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTaskTestHarnessBuilder.java", "diffHunk": "@@ -1,108 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.flink.streaming.runtime.tasks;\n-\n-import org.apache.flink.api.common.typeinfo.TypeInformation;\n-import org.apache.flink.api.common.typeutils.TypeSerializer;\n-import org.apache.flink.api.java.functions.KeySelector;\n-import org.apache.flink.runtime.execution.Environment;\n-import org.apache.flink.runtime.io.network.partition.consumer.StreamTestSingleInputGate;\n-import org.apache.flink.streaming.api.graph.StreamEdge;\n-import org.apache.flink.streaming.api.graph.StreamNode;\n-import org.apache.flink.streaming.api.operators.AbstractStreamOperator;\n-import org.apache.flink.streaming.api.operators.StreamOperator;\n-import org.apache.flink.streaming.runtime.partitioner.BroadcastPartitioner;\n-import org.apache.flink.util.function.FunctionWithException;\n-\n-import javax.annotation.Nullable;\n-\n-import java.util.ArrayList;\n-import java.util.LinkedList;\n-import java.util.List;\n-\n-/**\n- * Builder to create a {@link StreamTaskMailboxTestHarness} to test {@link MultipleInputStreamTask}.\n- */\n-public class MultipleInputStreamTaskTestHarnessBuilder<OUT> extends StreamTaskMailboxTestHarnessBuilder<OUT> {", "originalCommit": "d04f71e6b7deb2b3b0757a213bdaa9c1e0834974", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}