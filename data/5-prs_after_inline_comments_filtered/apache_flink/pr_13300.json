{"pr_number": 13300, "pr_title": "[FLINK-19077][table-runtime] Import process time temporal join operator.", "pr_createdAt": "2020-09-01T15:45:45Z", "pr_url": "https://github.com/apache/flink/pull/13300", "timeline": [{"oid": "4f62c8cfc30654a7236e45b48a5846267897ba3a", "url": "https://github.com/apache/flink/commit/4f62c8cfc30654a7236e45b48a5846267897ba3a", "message": "[FLINK-19077][table-runtime] Import process time temporal join operator.", "committedDate": "2020-09-02T04:20:52Z", "type": "forcePushed"}, {"oid": "67048f0564671bfb89f9f1d88a3a717502a9cda8", "url": "https://github.com/apache/flink/commit/67048f0564671bfb89f9f1d88a3a717502a9cda8", "message": "[FLINK-19077][table-runtime] Import process time temporal join operator.", "committedDate": "2020-09-02T07:10:30Z", "type": "forcePushed"}, {"oid": "2ffa66b25a23f76cd7f930b0ca4ddc7ff904f748", "url": "https://github.com/apache/flink/commit/2ffa66b25a23f76cd7f930b0ca4ddc7ff904f748", "message": "[FLINK-19077][table-runtime] Import process time temporal join operator.", "committedDate": "2020-09-02T13:32:11Z", "type": "forcePushed"}, {"oid": "47e4cd9eca1c2772d67e484cfe3f732b4008b188", "url": "https://github.com/apache/flink/commit/47e4cd9eca1c2772d67e484cfe3f732b4008b188", "message": "[FLINK-19077][table-runtime] Import process time temporal join operator.", "committedDate": "2020-09-02T13:33:10Z", "type": "forcePushed"}, {"oid": "b32accb0c729ab361a8becf74808427f103bdeb0", "url": "https://github.com/apache/flink/commit/b32accb0c729ab361a8becf74808427f103bdeb0", "message": "[FLINK-19077][table-runtime] Import process time temporal join operator.", "committedDate": "2020-10-18T04:07:49Z", "type": "forcePushed"}, {"oid": "ef62f94dc62ef90adbba35e3fc13119c2c0464b6", "url": "https://github.com/apache/flink/commit/ef62f94dc62ef90adbba35e3fc13119c2c0464b6", "message": "[FLINK-19077][table-runtime] Import process time temporal join operator", "committedDate": "2020-10-18T07:13:43Z", "type": "forcePushed"}, {"oid": "831c8b47f5ac23fabf85fc6e1e868a39e057e540", "url": "https://github.com/apache/flink/commit/831c8b47f5ac23fabf85fc6e1e868a39e057e540", "message": "[FLINK-19077][table-runtime] Import process time temporal join operator", "committedDate": "2020-10-18T14:25:44Z", "type": "forcePushed"}, {"oid": "26d7664c3772665425813a493ae546208dfae2bb", "url": "https://github.com/apache/flink/commit/26d7664c3772665425813a493ae546208dfae2bb", "message": "[FLINK-19077][table-runtime] Import process time temporal join operator", "committedDate": "2020-10-22T08:36:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc1MTA1Mg==", "url": "https://github.com/apache/flink/pull/13300#discussion_r511751052", "bodyText": "Do not in a separate line.", "author": "wuchong", "createdAt": "2020-10-26T07:03:39Z", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/join/temporal/TemporalProcessTimeJoinOperator.java", "diffHunk": "@@ -36,29 +37,42 @@\n \n /**\n  * The operator to temporal join a stream on processing time.\n+ *\n+ * <p>For temporal TableFunction join (LATERAL TemporalTableFunction(o.proctime)) and\n+ * temporal table join (FOR SYSTEM_TIME AS OF), they can reuse same processing-time operator\n+ * implementation, the differences between them are:\n+ * (1) The temporal TableFunction join only supports single column in primary key but\n+ * temporal table join supports arbitrary columns in primary key.\n+ * (2) The temporal TableFunction join only supports inner join, temporal table join\n+ * supports both inner join and left outer join.\n  */\n-public class LegacyTemporalProcessTimeJoinOperator\n+public class TemporalProcessTimeJoinOperator\n \textends BaseTwoInputStreamOperatorWithStateRetention {\n \n \tprivate static final long serialVersionUID = -5182289624027523612L;\n \n+\tprivate final boolean isLeftOuterJoin;\n \tprivate final InternalTypeInfo<RowData> rightType;\n \tprivate final GeneratedJoinCondition generatedJoinCondition;\n \n \tprivate transient ValueState<RowData> rightState;\n \tprivate transient JoinCondition joinCondition;\n \n \tprivate transient JoinedRowData outRow;\n+\tprivate transient GenericRowData rightNullRow;\n \tprivate transient TimestampedCollector<RowData> collector;\n \n-\tpublic LegacyTemporalProcessTimeJoinOperator(\n+\tpublic TemporalProcessTimeJoinOperator(\n \t\t\tInternalTypeInfo<RowData> rightType,\n \t\t\tGeneratedJoinCondition generatedJoinCondition,\n \t\t\tlong minRetentionTime,\n-\t\t\tlong maxRetentionTime) {\n+\t\t\tlong maxRetentionTime,\n+\t\t\tboolean isLeftOuterJoin\n+\t\t\t) {", "originalCommit": "93048dd26aef5150440f66db3c3a408564ab61fc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc1MjQ0NQ==", "url": "https://github.com/apache/flink/pull/13300#discussion_r511752445", "bodyText": "Would it be better to refactor this into collectJoinedRow(RowData leftRow, RowData rightRow)? Then we can reuse this method for non-left-join result. E.g.\ncollectJoinedRow(leftSideRow, rightNullRow); // left x null\ncollectJoinedRow(leftSideRow, rightSideRow); // left x right", "author": "wuchong", "createdAt": "2020-10-26T07:08:05Z", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/join/temporal/TemporalProcessTimeJoinOperator.java", "diffHunk": "@@ -72,24 +86,40 @@ public void open() throws Exception {\n \t\tthis.rightState = getRuntimeContext().getState(rightStateDesc);\n \t\tthis.collector = new TimestampedCollector<>(output);\n \t\tthis.outRow = new JoinedRowData();\n+\t\tthis.rightNullRow = new GenericRowData(rightType.toRowSize());\n \t\t// consider watermark from left stream only.\n \t\tsuper.processWatermark2(Watermark.MAX_WATERMARK);\n \t}\n \n \t@Override\n \tpublic void processElement1(StreamRecord<RowData> element) throws Exception {\n+\t\tRowData leftSideRow = element.getValue();\n \t\tRowData rightSideRow = rightState.value();\n+\n \t\tif (rightSideRow == null) {\n-\t\t\treturn;\n+\t\t\tif (isLeftOuterJoin) {\n+\t\t\t\tpadNullForLeftOuterJoin(leftSideRow);\n+\t\t\t} else {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t} else {\n+\t\t\tif (joinCondition.apply(leftSideRow, rightSideRow)) {\n+\t\t\t\toutRow.setRowKind(leftSideRow.getRowKind());\n+\t\t\t\toutRow.replace(leftSideRow, rightSideRow);\n+\t\t\t\tcollector.collect(outRow);\n+\t\t\t} else {\n+\t\t\t\tif (isLeftOuterJoin) {\n+\t\t\t\t\tpadNullForLeftOuterJoin(leftSideRow);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tregisterProcessingCleanupTimer();\n \t\t}\n+\t}\n \n-\t\tRowData leftSideRow = element.getValue();\n-\t\tif (joinCondition.apply(leftSideRow, rightSideRow)) {\n-\t\t\toutRow.setRowKind(leftSideRow.getRowKind());\n-\t\t\toutRow.replace(leftSideRow, rightSideRow);\n-\t\t\tcollector.collect(outRow);\n-\t\t}\n-\t\tregisterProcessingCleanupTimer();\n+\tprivate void padNullForLeftOuterJoin(RowData leftSideRow) {", "originalCommit": "93048dd26aef5150440f66db3c3a408564ab61fc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc1MzgxOQ==", "url": "https://github.com/apache/flink/pull/13300#discussion_r511753819", "bodyText": "Add a comment why we don't need to register cleanup timer when rightSideRow == null", "author": "wuchong", "createdAt": "2020-10-26T07:12:15Z", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/join/temporal/TemporalProcessTimeJoinOperator.java", "diffHunk": "@@ -72,24 +86,40 @@ public void open() throws Exception {\n \t\tthis.rightState = getRuntimeContext().getState(rightStateDesc);\n \t\tthis.collector = new TimestampedCollector<>(output);\n \t\tthis.outRow = new JoinedRowData();\n+\t\tthis.rightNullRow = new GenericRowData(rightType.toRowSize());\n \t\t// consider watermark from left stream only.\n \t\tsuper.processWatermark2(Watermark.MAX_WATERMARK);\n \t}\n \n \t@Override\n \tpublic void processElement1(StreamRecord<RowData> element) throws Exception {\n+\t\tRowData leftSideRow = element.getValue();\n \t\tRowData rightSideRow = rightState.value();\n+\n \t\tif (rightSideRow == null) {\n-\t\t\treturn;\n+\t\t\tif (isLeftOuterJoin) {\n+\t\t\t\tpadNullForLeftOuterJoin(leftSideRow);\n+\t\t\t} else {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t} else {\n+\t\t\tif (joinCondition.apply(leftSideRow, rightSideRow)) {\n+\t\t\t\toutRow.setRowKind(leftSideRow.getRowKind());\n+\t\t\t\toutRow.replace(leftSideRow, rightSideRow);\n+\t\t\t\tcollector.collect(outRow);\n+\t\t\t} else {\n+\t\t\t\tif (isLeftOuterJoin) {\n+\t\t\t\t\tpadNullForLeftOuterJoin(leftSideRow);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tregisterProcessingCleanupTimer();", "originalCommit": "93048dd26aef5150440f66db3c3a408564ab61fc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc1NDU0OQ==", "url": "https://github.com/apache/flink/pull/13300#discussion_r511754549", "bodyText": "LegacyTemporalProcessTimeJoinOperatorTest -> TemporalProcessTimeJoinOperatorTest?", "author": "wuchong", "createdAt": "2020-10-26T07:14:35Z", "path": "flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/join/temporal/LegacyTemporalProcessTimeJoinOperatorTest.java", "diffHunk": "@@ -26,46 +26,49 @@\n import org.apache.flink.table.runtime.util.RowDataHarnessAssertor;\n import org.apache.flink.table.types.logical.BigIntType;\n import org.apache.flink.table.types.logical.VarCharType;\n+import org.apache.flink.types.RowKind;\n \n import org.junit.Test;\n \n import java.util.ArrayList;\n import java.util.List;\n \n import static org.apache.flink.table.runtime.util.StreamRecordUtils.insertRecord;\n+import static org.apache.flink.table.runtime.util.StreamRecordUtils.record;\n \n /**\n- * Harness tests for {@link LegacyTemporalProcessTimeJoinOperator}.\n+ * Harness tests for {@link TemporalProcessTimeJoinOperator}.\n  */\n public class LegacyTemporalProcessTimeJoinOperatorTest extends LegacyTemporalTimeJoinOperatorTestBase {", "originalCommit": "93048dd26aef5150440f66db3c3a408564ab61fc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc1NzI3Mw==", "url": "https://github.com/apache/flink/pull/13300#discussion_r511757273", "bodyText": "It would be better to not mix using insertRecord and record, we can use updateBeforeRecord, deleteRecord instead.", "author": "wuchong", "createdAt": "2020-10-26T07:22:13Z", "path": "flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/join/temporal/LegacyTemporalProcessTimeJoinOperatorTest.java", "diffHunk": "@@ -123,13 +127,93 @@ public void testProcTimeTemporalJoinWithStateRetention() throws Exception {\n \t\ttestHarness.close();\n \t}\n \n+\t/**\n+\t * Test proctime left temporal join when set idle state retention.\n+\t */\n+\t@Test\n+\tpublic void testLeftProcTimeTemporalJoinWithStateRetention() throws Exception {\n+\t\tfinal int minRetentionTime = 10;\n+\t\tfinal int maxRetentionTime = minRetentionTime * 3 / 2;\n+\t\tTemporalProcessTimeJoinOperator joinOperator = new TemporalProcessTimeJoinOperator(\n+\t\t\t\trowType,\n+\t\t\t\tjoinCondition,\n+\t\t\t\tminRetentionTime,\n+\t\t\t\tmaxRetentionTime,\n+\t\t\t\ttrue);\n+\t\tKeyedTwoInputStreamOperatorTestHarness<RowData, RowData, RowData, RowData> testHarness = createTestHarness(\n+\t\t\t\tjoinOperator);\n+\t\ttestHarness.open();\n+\t\ttestHarness.setProcessingTime(1);\n+\t\ttestHarness.processElement1(insertRecord(1L, \"1a1\"));\n+\n+\t\ttestHarness.setProcessingTime(2);\n+\t\ttestHarness.processElement2(insertRecord(2L, \"2a2\"));\n+\n+\t\ttestHarness.setProcessingTime(3);\n+\t\ttestHarness.processElement1(insertRecord(2L, \"2a3\"));\n+\n+\t\ttestHarness.setProcessingTime(3 + maxRetentionTime);\n+\t\ttestHarness.processElement1(insertRecord(2L, \"1a5\"));\n+\n+\t\tList<Object> expectedOutput = new ArrayList<>();\n+\t\texpectedOutput.add(insertRecord(1L, \"1a1\", null, null));\n+\t\texpectedOutput.add(insertRecord(2L, \"2a3\", 2L, \"2a2\"));\n+\t\texpectedOutput.add(insertRecord(2L, \"1a5\", null, null));\n+\n+\t\tassertor.assertOutputEquals(\"output wrong.\", expectedOutput, testHarness.getOutput());\n+\t\ttestHarness.close();\n+\t}\n+\n+\t/**\n+\t * Test proctime temporal join changelog stream.\n+\t */\n+\t@Test\n+\tpublic void testProcTimeTemporalJoinOnChangelog() throws Exception {\n+\t\tTemporalProcessTimeJoinOperator joinOperator = new TemporalProcessTimeJoinOperator(\n+\t\t\t\trowType,\n+\t\t\t\tjoinCondition,\n+\t\t\t\t0,\n+\t\t\t\t0,\n+\t\t\t\tfalse);\n+\t\tKeyedTwoInputStreamOperatorTestHarness<RowData, RowData, RowData, RowData> testHarness = createTestHarness(\n+\t\t\t\tjoinOperator);\n+\t\ttestHarness.open();\n+\t\ttestHarness.setProcessingTime(1);\n+\t\ttestHarness.processElement1(insertRecord(1L, \"1a1\"));\n+\n+\t\ttestHarness.setProcessingTime(2);\n+\t\ttestHarness.processElement2(record(RowKind.INSERT, 2L, \"2a2\"));\n+\n+\t\ttestHarness.setProcessingTime(3);\n+\t\ttestHarness.processElement1(insertRecord(2L, \"2a3\"));\n+\n+\t\ttestHarness.setProcessingTime(4);\n+\t\ttestHarness.processElement2(record(RowKind.INSERT, 1L, \"1a4\"));\n+\t\ttestHarness.processElement2(record(RowKind.UPDATE_BEFORE, 1L, \"1a4\"));\n+\t\ttestHarness.processElement2(record(RowKind.UPDATE_AFTER, 1L, \"1a7\"));\n+\n+\t\ttestHarness.setProcessingTime(5);\n+\t\ttestHarness.processElement1(insertRecord(1L, \"1a5\"));\n+\t\ttestHarness.processElement2(record(RowKind.DELETE, 1L, \"1a7\"));", "originalCommit": "93048dd26aef5150440f66db3c3a408564ab61fc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc1NzY4Ng==", "url": "https://github.com/apache/flink/pull/13300#discussion_r511757686", "bodyText": "Revert changes on this file? I think one indent is correct.", "author": "wuchong", "createdAt": "2020-10-26T07:23:21Z", "path": "flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/join/temporal/LegacyTemporalRowTimeJoinOperatorTest.java", "diffHunk": "@@ -40,22 +40,22 @@\n  */\n public class LegacyTemporalRowTimeJoinOperatorTest extends LegacyTemporalTimeJoinOperatorTestBase {", "originalCommit": "93048dd26aef5150440f66db3c3a408564ab61fc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc1Nzc3Mw==", "url": "https://github.com/apache/flink/pull/13300#discussion_r511757773", "bodyText": "Revert changes on this file? I think one indent is correct.", "author": "wuchong", "createdAt": "2020-10-26T07:23:31Z", "path": "flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/join/temporal/LegacyTemporalTimeJoinOperatorTestBase.java", "diffHunk": "@@ -25,19 +25,19 @@\n  */\n public class LegacyTemporalTimeJoinOperatorTestBase {\n \tprotected String funcCode =\n-\t\t\"public class TimeTemporalJoinCondition extends org.apache.flink.api.common.functions.AbstractRichFunction \" +\n-\t\t\t\"implements org.apache.flink.table.runtime.generated.JoinCondition {\\n\"\n-\t\t\t+ \"\\n\"\n-\t\t\t+ \"    public TimeTemporalJoinCondition(Object[] reference) {\\n\"\n-\t\t\t+ \"    }\\n\"\n-\t\t\t+ \"\\n\"\n-\t\t\t+ \"    @Override\\n\"\n-\t\t\t+ \"    public boolean apply(org.apache.flink.table.data.RowData in1, org.apache.flink.table.data.RowData in2) {\\n\"\n-\t\t\t+ \"        return true;\\n\"\n-\t\t\t+ \"    }\\n\"\n-\t\t\t+ \"}\\n\";\n+\t\t\t\"public class TimeTemporalJoinCondition extends org.apache.flink.api.common.functions.AbstractRichFunction \" +", "originalCommit": "93048dd26aef5150440f66db3c3a408564ab61fc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a5237811699733a394ef805fb1e2ab3f769f7500", "url": "https://github.com/apache/flink/commit/a5237811699733a394ef805fb1e2ab3f769f7500", "message": "address comments", "committedDate": "2020-10-27T15:42:21Z", "type": "forcePushed"}, {"oid": "6bf5dc2e71b14086d5f908cc300060595adc46ea", "url": "https://github.com/apache/flink/commit/6bf5dc2e71b14086d5f908cc300060595adc46ea", "message": "[FLINK-19077][table-runtime] Introduce process time temporal join operator", "committedDate": "2020-10-28T03:29:24Z", "type": "commit"}, {"oid": "6bf5dc2e71b14086d5f908cc300060595adc46ea", "url": "https://github.com/apache/flink/commit/6bf5dc2e71b14086d5f908cc300060595adc46ea", "message": "[FLINK-19077][table-runtime] Introduce process time temporal join operator", "committedDate": "2020-10-28T03:29:24Z", "type": "forcePushed"}]}