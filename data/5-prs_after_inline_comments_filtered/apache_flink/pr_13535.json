{"pr_number": 13535, "pr_title": "[FLINK-19496][table] DataGen source DECIMAL always returns null", "pr_createdAt": "2020-10-02T18:29:13Z", "pr_url": "https://github.com/apache/flink/pull/13535", "timeline": [{"oid": "bd5834786fbff909ae1a20c5045c0750f63adc4e", "url": "https://github.com/apache/flink/commit/bd5834786fbff909ae1a20c5045c0750f63adc4e", "message": "[FLINK-19496][table] DataGen source DECIMAL always returns null", "committedDate": "2020-10-02T20:45:37Z", "type": "forcePushed"}, {"oid": "97e855d306d15d90259b65d3db38b7a19c62c6e9", "url": "https://github.com/apache/flink/commit/97e855d306d15d90259b65d3db38b7a19c62c6e9", "message": "[FLINK-19496][table] DataGen source DECIMAL always returns null", "committedDate": "2020-10-07T15:03:01Z", "type": "forcePushed"}, {"oid": "4ed984adbb753d9287a4d5d71d8f2d149f86bba0", "url": "https://github.com/apache/flink/commit/4ed984adbb753d9287a4d5d71d8f2d149f86bba0", "message": "[FLINK-19496][table] DataGen source DECIMAL always returns null", "committedDate": "2020-10-07T16:02:02Z", "type": "forcePushed"}, {"oid": "505ec8554bfb64d4f53a9f619ffc0729e3e645f3", "url": "https://github.com/apache/flink/commit/505ec8554bfb64d4f53a9f619ffc0729e3e645f3", "message": "[FLINK-19496][table] DataGen source DECIMAL always returns null", "committedDate": "2020-10-07T16:11:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0MjQ0MQ==", "url": "https://github.com/apache/flink/pull/13535#discussion_r501142441", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tdouble largest = largestValue(precision, scale);\n          \n          \n            \n            \t\tdouble largest = Math.pow(10,precision-scale) - Math.pow(10,-scale);", "author": "knaufk", "createdAt": "2020-10-07T16:18:51Z", "path": "flink-table/flink-table-api-java-bridge/src/main/java/org/apache/flink/table/factories/datagen/types/DecimalDataRandomGenerator.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.factories.datagen.types;\n+\n+import org.apache.flink.api.common.functions.RuntimeContext;\n+import org.apache.flink.runtime.state.FunctionInitializationContext;\n+import org.apache.flink.streaming.api.functions.source.datagen.DataGenerator;\n+import org.apache.flink.table.data.DecimalData;\n+\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.math.RoundingMode;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * Generates random {@link DecimalData} values.\n+ */\n+public class DecimalDataRandomGenerator implements DataGenerator<DecimalData> {\n+\n+\tprivate final int precision;\n+\n+\tprivate final int scale;\n+\n+\tprivate final double min;\n+\n+\tprivate final double max;\n+\n+\tprivate final String fmt;\n+\n+\tpublic DecimalDataRandomGenerator(int precision, int scale, double min, double max) {\n+\t\tdouble largest = largestValue(precision, scale);", "originalCommit": "505ec8554bfb64d4f53a9f619ffc0729e3e645f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0MjczMQ==", "url": "https://github.com/apache/flink/pull/13535#discussion_r501142731", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t/**\n          \n          \n            \n            \t * Finds the largest valid number of the given precision and range.\n          \n          \n            \n            \t */\n          \n          \n            \n            \tprivate static double largestValue(int precision, int scale) {\n          \n          \n            \n            \t\tStringBuilder builder = new StringBuilder();\n          \n          \n            \n            \t\tif (precision == scale) {\n          \n          \n            \n            \t\t\tbuilder.append(\"0.\");\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \n          \n          \n            \n            \t\tfor (int i = 0; i < precision; i++) {\n          \n          \n            \n            \t\t\tif (scale != 0 && precision != scale && i + scale == precision) {\n          \n          \n            \n            \t\t\t\tbuilder.append(\".\");\n          \n          \n            \n            \t\t\t}\n          \n          \n            \n            \n          \n          \n            \n            \t\t\tbuilder.append(9);\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \n          \n          \n            \n            \t\treturn Double.parseDouble(builder.toString());\n          \n          \n            \n            \t}", "author": "knaufk", "createdAt": "2020-10-07T16:19:18Z", "path": "flink-table/flink-table-api-java-bridge/src/main/java/org/apache/flink/table/factories/datagen/types/DecimalDataRandomGenerator.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.factories.datagen.types;\n+\n+import org.apache.flink.api.common.functions.RuntimeContext;\n+import org.apache.flink.runtime.state.FunctionInitializationContext;\n+import org.apache.flink.streaming.api.functions.source.datagen.DataGenerator;\n+import org.apache.flink.table.data.DecimalData;\n+\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.math.RoundingMode;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * Generates random {@link DecimalData} values.\n+ */\n+public class DecimalDataRandomGenerator implements DataGenerator<DecimalData> {\n+\n+\tprivate final int precision;\n+\n+\tprivate final int scale;\n+\n+\tprivate final double min;\n+\n+\tprivate final double max;\n+\n+\tprivate final String fmt;\n+\n+\tpublic DecimalDataRandomGenerator(int precision, int scale, double min, double max) {\n+\t\tdouble largest = largestValue(precision, scale);\n+\t\tthis.precision = precision;\n+\t\tthis.scale = scale;\n+\t\tthis.min = Math.min(-1 * largest, min);\n+\t\tthis.max = Math.min(largest, max);\n+\t\tthis.fmt = \"%\" + precision + \".\" + scale + \"f\";\n+\t}\n+\n+\t@Override\n+\tpublic void open(String name, FunctionInitializationContext context, RuntimeContext runtimeContext) throws Exception {\n+\t}\n+\n+\t@Override\n+\tpublic boolean hasNext() {\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic DecimalData next() {\n+\t\tString value = String.format(fmt, ThreadLocalRandom.current().nextDouble(min, max));\n+\n+\t\tBigDecimal decimal = new BigDecimal(value.trim(), new MathContext(precision, RoundingMode.DOWN));\n+\t\treturn DecimalData.fromBigDecimal(decimal, precision, scale);\n+\t}\n+\n+\t/**\n+\t * Finds the largest valid number of the given precision and range.\n+\t */\n+\tprivate static double largestValue(int precision, int scale) {\n+\t\tStringBuilder builder = new StringBuilder();\n+\t\tif (precision == scale) {\n+\t\t\tbuilder.append(\"0.\");\n+\t\t}\n+\n+\t\tfor (int i = 0; i < precision; i++) {\n+\t\t\tif (scale != 0 && precision != scale && i + scale == precision) {\n+\t\t\t\tbuilder.append(\".\");\n+\t\t\t}\n+\n+\t\t\tbuilder.append(9);\n+\t\t}\n+\n+\t\treturn Double.parseDouble(builder.toString());\n+\t}", "originalCommit": "505ec8554bfb64d4f53a9f619ffc0729e3e645f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0NjgxNg==", "url": "https://github.com/apache/flink/pull/13535#discussion_r501146816", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tString value = String.format(fmt, ThreadLocalRandom.current().nextDouble(min, max));\n          \n          \n            \n            \n          \n          \n            \n            \t\tBigDecimal decimal = new BigDecimal(value.trim(), new MathContext(precision, RoundingMode.DOWN));\n          \n          \n            \n            \t\tBigDecimal decimal = new BigDecimal(ThreadLocalRandom.current().nextDouble(min, max), new MathContext(precision, RoundingMode.DOWN));", "author": "knaufk", "createdAt": "2020-10-07T16:25:10Z", "path": "flink-table/flink-table-api-java-bridge/src/main/java/org/apache/flink/table/factories/datagen/types/DecimalDataRandomGenerator.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.factories.datagen.types;\n+\n+import org.apache.flink.api.common.functions.RuntimeContext;\n+import org.apache.flink.runtime.state.FunctionInitializationContext;\n+import org.apache.flink.streaming.api.functions.source.datagen.DataGenerator;\n+import org.apache.flink.table.data.DecimalData;\n+\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.math.RoundingMode;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * Generates random {@link DecimalData} values.\n+ */\n+public class DecimalDataRandomGenerator implements DataGenerator<DecimalData> {\n+\n+\tprivate final int precision;\n+\n+\tprivate final int scale;\n+\n+\tprivate final double min;\n+\n+\tprivate final double max;\n+\n+\tprivate final String fmt;\n+\n+\tpublic DecimalDataRandomGenerator(int precision, int scale, double min, double max) {\n+\t\tdouble largest = largestValue(precision, scale);\n+\t\tthis.precision = precision;\n+\t\tthis.scale = scale;\n+\t\tthis.min = Math.min(-1 * largest, min);\n+\t\tthis.max = Math.min(largest, max);\n+\t\tthis.fmt = \"%\" + precision + \".\" + scale + \"f\";\n+\t}\n+\n+\t@Override\n+\tpublic void open(String name, FunctionInitializationContext context, RuntimeContext runtimeContext) throws Exception {\n+\t}\n+\n+\t@Override\n+\tpublic boolean hasNext() {\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic DecimalData next() {\n+\t\tString value = String.format(fmt, ThreadLocalRandom.current().nextDouble(min, max));\n+\n+\t\tBigDecimal decimal = new BigDecimal(value.trim(), new MathContext(precision, RoundingMode.DOWN));", "originalCommit": "505ec8554bfb64d4f53a9f619ffc0729e3e645f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0NzA0Ng==", "url": "https://github.com/apache/flink/pull/13535#discussion_r501147046", "bodyText": "Doesn't this also work like that?", "author": "knaufk", "createdAt": "2020-10-07T16:25:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0NjgxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE1ODQxNg==", "url": "https://github.com/apache/flink/pull/13535#discussion_r501158416", "bodyText": "yes", "author": "sjwiesman", "createdAt": "2020-10-07T16:42:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0NjgxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0NzI3MA==", "url": "https://github.com/apache/flink/pull/13535#discussion_r501147270", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tfor (int scale = 1; scale <= precision; scale++) {\n          \n          \n            \n            \t\t\tfor (int scale = 0; scale <= precision; scale++) {", "author": "knaufk", "createdAt": "2020-10-07T16:25:49Z", "path": "flink-table/flink-table-api-java-bridge/src/test/java/org/apache/flink/table/factories/datagen/types/DecimalDataRandomGeneratorTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.factories.datagen.types;\n+\n+import org.apache.flink.table.data.DecimalData;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.lessThanOrEqualTo;\n+\n+/**\n+ * Tests that the data generator is valid for every combination of precision and scale.\n+ */\n+public class DecimalDataRandomGeneratorTest {\n+\n+\t@Test\n+\tpublic void testGeneratesNonNullValues() {\n+\t\tfor (int precision = 1; precision <= 38; precision++) {\n+\t\t\tfor (int scale = 1; scale <= precision; scale++) {", "originalCommit": "505ec8554bfb64d4f53a9f619ffc0729e3e645f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0NzQyMA==", "url": "https://github.com/apache/flink/pull/13535#discussion_r501147420", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tthis.fmt = \"%\" + precision + \".\" + scale + \"f\";", "author": "knaufk", "createdAt": "2020-10-07T16:26:03Z", "path": "flink-table/flink-table-api-java-bridge/src/main/java/org/apache/flink/table/factories/datagen/types/DecimalDataRandomGenerator.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.factories.datagen.types;\n+\n+import org.apache.flink.api.common.functions.RuntimeContext;\n+import org.apache.flink.runtime.state.FunctionInitializationContext;\n+import org.apache.flink.streaming.api.functions.source.datagen.DataGenerator;\n+import org.apache.flink.table.data.DecimalData;\n+\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.math.RoundingMode;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * Generates random {@link DecimalData} values.\n+ */\n+public class DecimalDataRandomGenerator implements DataGenerator<DecimalData> {\n+\n+\tprivate final int precision;\n+\n+\tprivate final int scale;\n+\n+\tprivate final double min;\n+\n+\tprivate final double max;\n+\n+\tprivate final String fmt;\n+\n+\tpublic DecimalDataRandomGenerator(int precision, int scale, double min, double max) {\n+\t\tdouble largest = largestValue(precision, scale);\n+\t\tthis.precision = precision;\n+\t\tthis.scale = scale;\n+\t\tthis.min = Math.min(-1 * largest, min);\n+\t\tthis.max = Math.min(largest, max);\n+\t\tthis.fmt = \"%\" + precision + \".\" + scale + \"f\";", "originalCommit": "505ec8554bfb64d4f53a9f619ffc0729e3e645f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE1Mjc4Nw==", "url": "https://github.com/apache/flink/pull/13535#discussion_r501152787", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate final String fmt;", "author": "knaufk", "createdAt": "2020-10-07T16:34:06Z", "path": "flink-table/flink-table-api-java-bridge/src/main/java/org/apache/flink/table/factories/datagen/types/DecimalDataRandomGenerator.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.factories.datagen.types;\n+\n+import org.apache.flink.api.common.functions.RuntimeContext;\n+import org.apache.flink.runtime.state.FunctionInitializationContext;\n+import org.apache.flink.streaming.api.functions.source.datagen.DataGenerator;\n+import org.apache.flink.table.data.DecimalData;\n+\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.math.RoundingMode;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * Generates random {@link DecimalData} values.\n+ */\n+public class DecimalDataRandomGenerator implements DataGenerator<DecimalData> {\n+\n+\tprivate final int precision;\n+\n+\tprivate final int scale;\n+\n+\tprivate final double min;\n+\n+\tprivate final double max;\n+\n+\tprivate final String fmt;", "originalCommit": "505ec8554bfb64d4f53a9f619ffc0729e3e645f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b79adda4c4eae4533e7d521b0c52b94f25db4075", "url": "https://github.com/apache/flink/commit/b79adda4c4eae4533e7d521b0c52b94f25db4075", "message": "[FLINK-19496][table] DataGen source DECIMAL always returns null", "committedDate": "2020-10-07T20:08:47Z", "type": "forcePushed"}, {"oid": "20d49a0147e2cf2ff859d9e9c4f138976288df1e", "url": "https://github.com/apache/flink/commit/20d49a0147e2cf2ff859d9e9c4f138976288df1e", "message": "[FLINK-19496][table] DataGen source DECIMAL always returns null", "committedDate": "2020-10-08T13:48:36Z", "type": "commit"}, {"oid": "20d49a0147e2cf2ff859d9e9c4f138976288df1e", "url": "https://github.com/apache/flink/commit/20d49a0147e2cf2ff859d9e9c4f138976288df1e", "message": "[FLINK-19496][table] DataGen source DECIMAL always returns null", "committedDate": "2020-10-08T13:48:36Z", "type": "forcePushed"}]}