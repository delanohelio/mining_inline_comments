{"pr_number": 13066, "pr_title": "[FLINK-18765][python] Support map() and flat_map() for Python DataStream API.", "pr_createdAt": "2020-08-05T09:25:30Z", "pr_url": "https://github.com/apache/flink/pull/13066", "timeline": [{"oid": "1379a882e8dd7bcfea2a855847ba672f9fc4047d", "url": "https://github.com/apache/flink/commit/1379a882e8dd7bcfea2a855847ba672f9fc4047d", "message": "[FLINK-18765][python] Add Beam operation and coders for running python DataStream functions.", "committedDate": "2020-08-05T09:18:34Z", "type": "commit"}, {"oid": "4a3cd4a62873723424a9c9de0e40944b8fc48784", "url": "https://github.com/apache/flink/commit/4a3cd4a62873723424a9c9de0e40944b8fc48784", "message": "[FLINK-18765][python] Add Java Operators to run python DataStream functions.", "committedDate": "2020-08-05T09:19:18Z", "type": "commit"}, {"oid": "91483a7603a0685ecb1351691ca68e75ade50a87", "url": "https://github.com/apache/flink/commit/91483a7603a0685ecb1351691ca68e75ade50a87", "message": "[FLINK-18765][python] Add map/flat_map() interfaces for DataStream.", "committedDate": "2020-08-05T09:20:16Z", "type": "commit"}, {"oid": "0bc8a1c9388336bf5eecb6b0e53372c7da00f4f7", "url": "https://github.com/apache/flink/commit/0bc8a1c9388336bf5eecb6b0e53372c7da00f4f7", "message": "- add conversion for tuple type from proto to coder.", "committedDate": "2020-08-05T09:30:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwMDI1OA==", "url": "https://github.com/apache/flink/pull/13066#discussion_r466100258", "bodyText": "maintains", "author": "hequn8128", "createdAt": "2020-08-06T01:57:02Z", "path": "flink-python/src/main/java/org/apache/flink/datastream/runtime/functions/python/DataStreamPythonFunction.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.datastream.runtime.functions.python;\n+\n+import org.apache.flink.table.functions.python.PythonEnv;\n+import org.apache.flink.table.functions.python.PythonFunction;\n+\n+/**\n+ * DataStreamPythonFunction maintain the serialized python function and its function type, which will be used in", "originalCommit": "0bc8a1c9388336bf5eecb6b0e53372c7da00f4f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwMDYyMg==", "url": "https://github.com/apache/flink/pull/13066#discussion_r466100622", "bodyText": "DataStreamPythonFunction => {@link DataStreamPythonFunction}. Same for other places.", "author": "hequn8128", "createdAt": "2020-08-06T01:58:33Z", "path": "flink-python/src/main/java/org/apache/flink/datastream/runtime/functions/python/DataStreamPythonFunction.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.datastream.runtime.functions.python;\n+\n+import org.apache.flink.table.functions.python.PythonEnv;\n+import org.apache.flink.table.functions.python.PythonFunction;\n+\n+/**\n+ * DataStreamPythonFunction maintain the serialized python function and its function type, which will be used in", "originalCommit": "0bc8a1c9388336bf5eecb6b0e53372c7da00f4f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwMDk1NA==", "url": "https://github.com/apache/flink/pull/13066#discussion_r466100954", "bodyText": "DataStreamPythonFunctionInfo => {@link DataStreamPythonFunctionInfo}", "author": "hequn8128", "createdAt": "2020-08-06T01:59:53Z", "path": "flink-python/src/main/java/org/apache/flink/datastream/runtime/functions/python/DataStreamPythonFunctionInfo.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.datastream.runtime.functions.python;\n+\n+import org.apache.flink.table.functions.python.PythonFunction;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * DataStreamPythonFunctionInfo holds a PythonFunction and its function type.", "originalCommit": "0bc8a1c9388336bf5eecb6b0e53372c7da00f4f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwMjE1OQ==", "url": "https://github.com/apache/flink/pull/13066#discussion_r466102159", "bodyText": "private static final long serialVersionUID = 1L;", "author": "hequn8128", "createdAt": "2020-08-06T02:04:18Z", "path": "flink-python/src/main/java/org/apache/flink/datastream/runtime/functions/python/DataStreamPythonFunction.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.datastream.runtime.functions.python;\n+\n+import org.apache.flink.table.functions.python.PythonEnv;\n+import org.apache.flink.table.functions.python.PythonFunction;\n+\n+/**\n+ * DataStreamPythonFunction maintain the serialized python function and its function type, which will be used in\n+ * DataStreamPythonFunctionRunner.\n+ */\n+public class DataStreamPythonFunction implements PythonFunction {", "originalCommit": "0bc8a1c9388336bf5eecb6b0e53372c7da00f4f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwMjU3MA==", "url": "https://github.com/apache/flink/pull/13066#discussion_r466102570", "bodyText": "We don't need to separate lines here.", "author": "hequn8128", "createdAt": "2020-08-06T02:05:35Z", "path": "flink-python/src/main/java/org/apache/flink/datastream/runtime/functions/python/DataStreamPythonFunctionInfo.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.datastream.runtime.functions.python;\n+\n+import org.apache.flink.table.functions.python.PythonFunction;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * DataStreamPythonFunctionInfo holds a PythonFunction and its function type.\n+ * */\n+public class DataStreamPythonFunctionInfo implements Serializable {\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\tprivate final PythonFunction pythonFunction;\n+\tprivate final int functionType;\n+\n+\tpublic DataStreamPythonFunctionInfo(PythonFunction pythonFunction,\n+\t\t\t\t\t\t\t\t\t\tint functionType) {", "originalCommit": "0bc8a1c9388336bf5eecb6b0e53372c7da00f4f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwMjc3NQ==", "url": "https://github.com/apache/flink/pull/13066#discussion_r466102775", "bodyText": "DataStreamPythonFunctionOperator => {@link DataStreamPythonFunctionOperator}", "author": "hequn8128", "createdAt": "2020-08-06T02:06:23Z", "path": "flink-python/src/main/java/org/apache/flink/datastream/runtime/operators/python/DataStreamPythonStatelessFunctionOperator.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package org.apache.flink.datastream.runtime.operators.python;\n+\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.api.common.typeutils.TypeSerializer;\n+import org.apache.flink.api.java.tuple.Tuple2;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.core.memory.ByteArrayInputStreamWithPos;\n+import org.apache.flink.core.memory.ByteArrayOutputStreamWithPos;\n+import org.apache.flink.core.memory.DataInputViewStreamWrapper;\n+import org.apache.flink.core.memory.DataOutputViewStreamWrapper;\n+import org.apache.flink.datastream.runtime.functions.python.DataStreamPythonFunctionInfo;\n+import org.apache.flink.datastream.runtime.runners.python.beam.BeamDataStreamPythonStatelessFunctionRunner;\n+import org.apache.flink.datastream.runtime.typeutils.python.PythonTypeUtils;\n+import org.apache.flink.fnexecution.v1.FlinkFnApi;\n+import org.apache.flink.python.PythonFunctionRunner;\n+import org.apache.flink.streaming.api.operators.python.AbstractPythonFunctionOperator;\n+import org.apache.flink.streaming.runtime.streamrecord.StreamRecord;\n+import org.apache.flink.table.functions.python.PythonEnv;\n+import org.apache.flink.table.runtime.util.StreamRecordCollector;\n+\n+import com.google.protobuf.ByteString;\n+\n+import java.util.Map;\n+import java.util.concurrent.LinkedBlockingQueue;\n+\n+/**\n+ * DataStreamPythonFunctionOperator is responsible for launching beam runner which will start a python harness to", "originalCommit": "0bc8a1c9388336bf5eecb6b0e53372c7da00f4f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwMzA4Nw==", "url": "https://github.com/apache/flink/pull/13066#discussion_r466103087", "bodyText": "Please remove these unnecessary variables.", "author": "hequn8128", "createdAt": "2020-08-06T02:07:35Z", "path": "flink-python/src/main/java/org/apache/flink/datastream/runtime/operators/python/DataStreamPythonStatelessFunctionOperator.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package org.apache.flink.datastream.runtime.operators.python;\n+\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.api.common.typeutils.TypeSerializer;\n+import org.apache.flink.api.java.tuple.Tuple2;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.core.memory.ByteArrayInputStreamWithPos;\n+import org.apache.flink.core.memory.ByteArrayOutputStreamWithPos;\n+import org.apache.flink.core.memory.DataInputViewStreamWrapper;\n+import org.apache.flink.core.memory.DataOutputViewStreamWrapper;\n+import org.apache.flink.datastream.runtime.functions.python.DataStreamPythonFunctionInfo;\n+import org.apache.flink.datastream.runtime.runners.python.beam.BeamDataStreamPythonStatelessFunctionRunner;\n+import org.apache.flink.datastream.runtime.typeutils.python.PythonTypeUtils;\n+import org.apache.flink.fnexecution.v1.FlinkFnApi;\n+import org.apache.flink.python.PythonFunctionRunner;\n+import org.apache.flink.streaming.api.operators.python.AbstractPythonFunctionOperator;\n+import org.apache.flink.streaming.runtime.streamrecord.StreamRecord;\n+import org.apache.flink.table.functions.python.PythonEnv;\n+import org.apache.flink.table.runtime.util.StreamRecordCollector;\n+\n+import com.google.protobuf.ByteString;\n+\n+import java.util.Map;\n+import java.util.concurrent.LinkedBlockingQueue;\n+\n+/**\n+ * DataStreamPythonFunctionOperator is responsible for launching beam runner which will start a python harness to\n+ * execute user defined python function.\n+ */\n+public class DataStreamPythonStatelessFunctionOperator<IN, OUT> extends AbstractPythonFunctionOperator<IN, OUT> {\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\tprivate static final String DATA_STREAM_STATELESS_PYTHON_FUNCTION_URN = \"flink:transform:datastream_stateless_function:v1\";\n+\tprivate static final String DATA_STREAM_MAP_FUNCTION_CODER_URN = \"flink:coder:datastream:map_function:v1\";\n+\tprivate static final String DATA_STREAM_FLAT_MAP_FUNCTION_CODER_URN = \"flink:coder:datastream:flatmap_function:v1\";\n+\n+\n+\tprotected final DataStreamPythonFunctionInfo pythonFunctionInfo;\n+\n+\tprivate final TypeInformation<IN> inputTypeInfo;\n+\n+\tprivate final TypeInformation<OUT> outputTypeInfo;\n+\n+\tprivate final Map<String, String> jobOptions;\n+\n+\tprivate transient TypeSerializer<IN> inputTypeSerializer;\n+\n+\tprivate transient TypeSerializer<OUT> outputTypeSerializer;\n+\n+\tprotected transient LinkedBlockingQueue<byte[]> userDefinedFunctionResultQueue;", "originalCommit": "0bc8a1c9388336bf5eecb6b0e53372c7da00f4f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwMzQ2MA==", "url": "https://github.com/apache/flink/pull/13066#discussion_r466103460", "bodyText": "Add license text for this class. Please check the test failures.", "author": "hequn8128", "createdAt": "2020-08-06T02:08:57Z", "path": "flink-python/src/main/java/org/apache/flink/datastream/runtime/operators/python/DataStreamPythonStatelessFunctionOperator.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package org.apache.flink.datastream.runtime.operators.python;", "originalCommit": "0bc8a1c9388336bf5eecb6b0e53372c7da00f4f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwMzkxNw==", "url": "https://github.com/apache/flink/pull/13066#discussion_r466103917", "bodyText": "private static final long serialVersionUID = 1L;", "author": "hequn8128", "createdAt": "2020-08-06T02:10:37Z", "path": "flink-python/src/main/java/org/apache/flink/datastream/runtime/runners/python/beam/BeamDataStreamPythonStatelessFunctionRunner.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.datastream.runtime.runners.python.beam;\n+\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.datastream.runtime.typeutils.python.PythonTypeUtils;\n+import org.apache.flink.fnexecution.v1.FlinkFnApi;\n+import org.apache.flink.python.env.PythonEnvironmentManager;\n+import org.apache.flink.python.metric.FlinkMetricContainer;\n+import org.apache.flink.streaming.api.runners.python.beam.BeamPythonStatelessFunctionRunner;\n+\n+import org.apache.beam.model.pipeline.v1.RunnerApi;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.Map;\n+\n+/**\n+ * DataStreamPythonFunctionRunner is responsible for starting a beam python harness to execute user defined python\n+ * function.\n+ */\n+public class BeamDataStreamPythonStatelessFunctionRunner extends BeamPythonStatelessFunctionRunner {", "originalCommit": "0bc8a1c9388336bf5eecb6b0e53372c7da00f4f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwNDE0Ng==", "url": "https://github.com/apache/flink/pull/13066#discussion_r466104146", "bodyText": "DataStreamPythonFunctionRunner => {@link DataStreamPythonFunctionRunner}", "author": "hequn8128", "createdAt": "2020-08-06T02:11:33Z", "path": "flink-python/src/main/java/org/apache/flink/datastream/runtime/runners/python/beam/BeamDataStreamPythonStatelessFunctionRunner.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.datastream.runtime.runners.python.beam;\n+\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.datastream.runtime.typeutils.python.PythonTypeUtils;\n+import org.apache.flink.fnexecution.v1.FlinkFnApi;\n+import org.apache.flink.python.env.PythonEnvironmentManager;\n+import org.apache.flink.python.metric.FlinkMetricContainer;\n+import org.apache.flink.streaming.api.runners.python.beam.BeamPythonStatelessFunctionRunner;\n+\n+import org.apache.beam.model.pipeline.v1.RunnerApi;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.Map;\n+\n+/**\n+ * DataStreamPythonFunctionRunner is responsible for starting a beam python harness to execute user defined python", "originalCommit": "0bc8a1c9388336bf5eecb6b0e53372c7da00f4f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwNDY3OQ==", "url": "https://github.com/apache/flink/pull/13066#discussion_r466104679", "bodyText": "We don't have VOID type.", "author": "hequn8128", "createdAt": "2020-08-06T02:13:42Z", "path": "flink-python/src/main/java/org/apache/flink/datastream/runtime/typeutils/python/PythonTypeUtils.java", "diffHunk": "@@ -0,0 +1,310 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.datastream.runtime.typeutils.python;\n+\n+import org.apache.flink.api.common.typeinfo.BasicTypeInfo;\n+import org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo;\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.api.common.typeutils.TypeSerializer;\n+import org.apache.flink.api.common.typeutils.base.BigIntSerializer;\n+import org.apache.flink.api.common.typeutils.base.BooleanSerializer;\n+import org.apache.flink.api.common.typeutils.base.CharSerializer;\n+import org.apache.flink.api.common.typeutils.base.DoubleSerializer;\n+import org.apache.flink.api.common.typeutils.base.FloatSerializer;\n+import org.apache.flink.api.common.typeutils.base.InstantSerializer;\n+import org.apache.flink.api.common.typeutils.base.IntSerializer;\n+import org.apache.flink.api.common.typeutils.base.LongSerializer;\n+import org.apache.flink.api.common.typeutils.base.ShortSerializer;\n+import org.apache.flink.api.common.typeutils.base.VoidSerializer;\n+import org.apache.flink.api.common.typeutils.base.array.BytePrimitiveArraySerializer;\n+import org.apache.flink.api.java.tuple.Tuple;\n+import org.apache.flink.api.java.typeutils.RowTypeInfo;\n+import org.apache.flink.api.java.typeutils.TupleTypeInfo;\n+import org.apache.flink.api.java.typeutils.runtime.RowSerializer;\n+import org.apache.flink.api.java.typeutils.runtime.TupleSerializer;\n+import org.apache.flink.datastream.typeinfo.python.PickledByteArrayTypeInfo;\n+import org.apache.flink.fnexecution.v1.FlinkFnApi;\n+import org.apache.flink.table.runtime.typeutils.serializers.python.BigDecSerializer;\n+import org.apache.flink.table.runtime.typeutils.serializers.python.DateSerializer;\n+import org.apache.flink.table.runtime.typeutils.serializers.python.StringSerializer;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * A util class for converting the given TypeInformation to other objects.\n+ */\n+public class PythonTypeUtils {\n+\n+\t/**\n+\t * Get coder proto according to the given type information.\n+\t */\n+\tpublic static class TypeInfoToProtoConverter {\n+\n+\t\tpublic static FlinkFnApi.TypeInfo.FieldType getFieldType(TypeInformation typeInformation) {\n+\n+\t\t\tif (typeInformation instanceof BasicTypeInfo) {\n+\t\t\t\treturn buildBasicTypeProto((BasicTypeInfo) typeInformation);\n+\t\t\t}\n+\n+\t\t\tif (typeInformation instanceof PrimitiveArrayTypeInfo) {\n+\t\t\t\treturn buildPrimitiveArrayTypeProto((PrimitiveArrayTypeInfo) typeInformation);\n+\t\t\t}\n+\n+\t\t\tif (typeInformation instanceof RowTypeInfo) {\n+\t\t\t\treturn buildRowTypeProto((RowTypeInfo) typeInformation);\n+\t\t\t}\n+\n+\t\t\tif (typeInformation instanceof PickledByteArrayTypeInfo) {\n+\t\t\t\treturn buildPickledBytesTypeProto((PickledByteArrayTypeInfo) typeInformation);\n+\t\t\t}\n+\n+\t\t\tif (typeInformation instanceof TupleTypeInfo) {\n+\t\t\t\treturn buildTupleTypeProto((TupleTypeInfo) typeInformation);\n+\t\t\t}\n+\n+\t\t\tthrow new UnsupportedOperationException(\n+\t\t\t\tString.format(\"The type information: %s is not supported in PyFlink currently.\",\n+\t\t\t\t\ttypeInformation.toString()));\n+\t\t}\n+\n+\t\tpublic static FlinkFnApi.TypeInfo toTypeInfoProto(FlinkFnApi.TypeInfo.FieldType fieldType) {\n+\t\t\treturn FlinkFnApi.TypeInfo.newBuilder().addField(FlinkFnApi.TypeInfo.Field.newBuilder().setType(fieldType).build()).build();\n+\t\t}\n+\n+\t\tprivate static FlinkFnApi.TypeInfo.FieldType buildBasicTypeProto(BasicTypeInfo basicTypeInfo) {\n+\n+\t\t\tFlinkFnApi.TypeInfo.TypeName typeName = null;\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.BOOLEAN_TYPE_INFO)) {\n+\t\t\t\ttypeName = FlinkFnApi.TypeInfo.TypeName.BOOLEAN;\n+\t\t\t}\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.BYTE_TYPE_INFO)) {\n+\t\t\t\ttypeName = FlinkFnApi.TypeInfo.TypeName.BYTE;\n+\t\t\t}\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.STRING_TYPE_INFO)) {\n+\t\t\t\ttypeName = FlinkFnApi.TypeInfo.TypeName.STRING;\n+\t\t\t}\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.SHORT_TYPE_INFO)) {\n+\t\t\t\ttypeName = FlinkFnApi.TypeInfo.TypeName.SHORT;\n+\t\t\t}\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.INT_TYPE_INFO)) {\n+\t\t\t\ttypeName = FlinkFnApi.TypeInfo.TypeName.INT;\n+\t\t\t}\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.LONG_TYPE_INFO)) {\n+\t\t\t\ttypeName = FlinkFnApi.TypeInfo.TypeName.LONG;\n+\t\t\t}\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.FLOAT_TYPE_INFO)) {\n+\t\t\t\ttypeName = FlinkFnApi.TypeInfo.TypeName.FLOAT;\n+\t\t\t}\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.DOUBLE_TYPE_INFO)) {\n+\t\t\t\ttypeName = FlinkFnApi.TypeInfo.TypeName.DOUBLE;\n+\t\t\t}\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.CHAR_TYPE_INFO)) {\n+\t\t\t\ttypeName = FlinkFnApi.TypeInfo.TypeName.CHAR;\n+\t\t\t}\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.DATE_TYPE_INFO)) {\n+\t\t\t\ttypeName = FlinkFnApi.TypeInfo.TypeName.LOCAL_DATE;\n+\t\t\t}\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.VOID_TYPE_INFO)) {", "originalCommit": "0bc8a1c9388336bf5eecb6b0e53372c7da00f4f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwNDc2Ng==", "url": "https://github.com/apache/flink/pull/13066#discussion_r466104766", "bodyText": "Don't have INSTANCE type in datastream", "author": "hequn8128", "createdAt": "2020-08-06T02:14:06Z", "path": "flink-python/src/main/java/org/apache/flink/datastream/runtime/typeutils/python/PythonTypeUtils.java", "diffHunk": "@@ -0,0 +1,310 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.datastream.runtime.typeutils.python;\n+\n+import org.apache.flink.api.common.typeinfo.BasicTypeInfo;\n+import org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo;\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.api.common.typeutils.TypeSerializer;\n+import org.apache.flink.api.common.typeutils.base.BigIntSerializer;\n+import org.apache.flink.api.common.typeutils.base.BooleanSerializer;\n+import org.apache.flink.api.common.typeutils.base.CharSerializer;\n+import org.apache.flink.api.common.typeutils.base.DoubleSerializer;\n+import org.apache.flink.api.common.typeutils.base.FloatSerializer;\n+import org.apache.flink.api.common.typeutils.base.InstantSerializer;\n+import org.apache.flink.api.common.typeutils.base.IntSerializer;\n+import org.apache.flink.api.common.typeutils.base.LongSerializer;\n+import org.apache.flink.api.common.typeutils.base.ShortSerializer;\n+import org.apache.flink.api.common.typeutils.base.VoidSerializer;\n+import org.apache.flink.api.common.typeutils.base.array.BytePrimitiveArraySerializer;\n+import org.apache.flink.api.java.tuple.Tuple;\n+import org.apache.flink.api.java.typeutils.RowTypeInfo;\n+import org.apache.flink.api.java.typeutils.TupleTypeInfo;\n+import org.apache.flink.api.java.typeutils.runtime.RowSerializer;\n+import org.apache.flink.api.java.typeutils.runtime.TupleSerializer;\n+import org.apache.flink.datastream.typeinfo.python.PickledByteArrayTypeInfo;\n+import org.apache.flink.fnexecution.v1.FlinkFnApi;\n+import org.apache.flink.table.runtime.typeutils.serializers.python.BigDecSerializer;\n+import org.apache.flink.table.runtime.typeutils.serializers.python.DateSerializer;\n+import org.apache.flink.table.runtime.typeutils.serializers.python.StringSerializer;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * A util class for converting the given TypeInformation to other objects.\n+ */\n+public class PythonTypeUtils {\n+\n+\t/**\n+\t * Get coder proto according to the given type information.\n+\t */\n+\tpublic static class TypeInfoToProtoConverter {\n+\n+\t\tpublic static FlinkFnApi.TypeInfo.FieldType getFieldType(TypeInformation typeInformation) {\n+\n+\t\t\tif (typeInformation instanceof BasicTypeInfo) {\n+\t\t\t\treturn buildBasicTypeProto((BasicTypeInfo) typeInformation);\n+\t\t\t}\n+\n+\t\t\tif (typeInformation instanceof PrimitiveArrayTypeInfo) {\n+\t\t\t\treturn buildPrimitiveArrayTypeProto((PrimitiveArrayTypeInfo) typeInformation);\n+\t\t\t}\n+\n+\t\t\tif (typeInformation instanceof RowTypeInfo) {\n+\t\t\t\treturn buildRowTypeProto((RowTypeInfo) typeInformation);\n+\t\t\t}\n+\n+\t\t\tif (typeInformation instanceof PickledByteArrayTypeInfo) {\n+\t\t\t\treturn buildPickledBytesTypeProto((PickledByteArrayTypeInfo) typeInformation);\n+\t\t\t}\n+\n+\t\t\tif (typeInformation instanceof TupleTypeInfo) {\n+\t\t\t\treturn buildTupleTypeProto((TupleTypeInfo) typeInformation);\n+\t\t\t}\n+\n+\t\t\tthrow new UnsupportedOperationException(\n+\t\t\t\tString.format(\"The type information: %s is not supported in PyFlink currently.\",\n+\t\t\t\t\ttypeInformation.toString()));\n+\t\t}\n+\n+\t\tpublic static FlinkFnApi.TypeInfo toTypeInfoProto(FlinkFnApi.TypeInfo.FieldType fieldType) {\n+\t\t\treturn FlinkFnApi.TypeInfo.newBuilder().addField(FlinkFnApi.TypeInfo.Field.newBuilder().setType(fieldType).build()).build();\n+\t\t}\n+\n+\t\tprivate static FlinkFnApi.TypeInfo.FieldType buildBasicTypeProto(BasicTypeInfo basicTypeInfo) {\n+\n+\t\t\tFlinkFnApi.TypeInfo.TypeName typeName = null;\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.BOOLEAN_TYPE_INFO)) {\n+\t\t\t\ttypeName = FlinkFnApi.TypeInfo.TypeName.BOOLEAN;\n+\t\t\t}\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.BYTE_TYPE_INFO)) {\n+\t\t\t\ttypeName = FlinkFnApi.TypeInfo.TypeName.BYTE;\n+\t\t\t}\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.STRING_TYPE_INFO)) {\n+\t\t\t\ttypeName = FlinkFnApi.TypeInfo.TypeName.STRING;\n+\t\t\t}\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.SHORT_TYPE_INFO)) {\n+\t\t\t\ttypeName = FlinkFnApi.TypeInfo.TypeName.SHORT;\n+\t\t\t}\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.INT_TYPE_INFO)) {\n+\t\t\t\ttypeName = FlinkFnApi.TypeInfo.TypeName.INT;\n+\t\t\t}\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.LONG_TYPE_INFO)) {\n+\t\t\t\ttypeName = FlinkFnApi.TypeInfo.TypeName.LONG;\n+\t\t\t}\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.FLOAT_TYPE_INFO)) {\n+\t\t\t\ttypeName = FlinkFnApi.TypeInfo.TypeName.FLOAT;\n+\t\t\t}\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.DOUBLE_TYPE_INFO)) {\n+\t\t\t\ttypeName = FlinkFnApi.TypeInfo.TypeName.DOUBLE;\n+\t\t\t}\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.CHAR_TYPE_INFO)) {\n+\t\t\t\ttypeName = FlinkFnApi.TypeInfo.TypeName.CHAR;\n+\t\t\t}\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.DATE_TYPE_INFO)) {\n+\t\t\t\ttypeName = FlinkFnApi.TypeInfo.TypeName.LOCAL_DATE;\n+\t\t\t}\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.VOID_TYPE_INFO)) {\n+\t\t\t\ttypeName = FlinkFnApi.TypeInfo.TypeName.VOID;\n+\t\t\t}\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.BIG_INT_TYPE_INFO)) {\n+\t\t\t\ttypeName = FlinkFnApi.TypeInfo.TypeName.BIG_INT;\n+\t\t\t}\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.BIG_DEC_TYPE_INFO)) {\n+\t\t\t\ttypeName = FlinkFnApi.TypeInfo.TypeName.BIG_DEC;\n+\t\t\t}\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.INSTANT_TYPE_INFO)) {", "originalCommit": "0bc8a1c9388336bf5eecb6b0e53372c7da00f4f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwNDkwMA==", "url": "https://github.com/apache/flink/pull/13066#discussion_r466104900", "bodyText": "Remove void and instance.", "author": "hequn8128", "createdAt": "2020-08-06T02:14:34Z", "path": "flink-python/src/main/java/org/apache/flink/datastream/runtime/typeutils/python/PythonTypeUtils.java", "diffHunk": "@@ -0,0 +1,310 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.datastream.runtime.typeutils.python;\n+\n+import org.apache.flink.api.common.typeinfo.BasicTypeInfo;\n+import org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo;\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.api.common.typeutils.TypeSerializer;\n+import org.apache.flink.api.common.typeutils.base.BigIntSerializer;\n+import org.apache.flink.api.common.typeutils.base.BooleanSerializer;\n+import org.apache.flink.api.common.typeutils.base.CharSerializer;\n+import org.apache.flink.api.common.typeutils.base.DoubleSerializer;\n+import org.apache.flink.api.common.typeutils.base.FloatSerializer;\n+import org.apache.flink.api.common.typeutils.base.InstantSerializer;\n+import org.apache.flink.api.common.typeutils.base.IntSerializer;\n+import org.apache.flink.api.common.typeutils.base.LongSerializer;\n+import org.apache.flink.api.common.typeutils.base.ShortSerializer;\n+import org.apache.flink.api.common.typeutils.base.VoidSerializer;\n+import org.apache.flink.api.common.typeutils.base.array.BytePrimitiveArraySerializer;\n+import org.apache.flink.api.java.tuple.Tuple;\n+import org.apache.flink.api.java.typeutils.RowTypeInfo;\n+import org.apache.flink.api.java.typeutils.TupleTypeInfo;\n+import org.apache.flink.api.java.typeutils.runtime.RowSerializer;\n+import org.apache.flink.api.java.typeutils.runtime.TupleSerializer;\n+import org.apache.flink.datastream.typeinfo.python.PickledByteArrayTypeInfo;\n+import org.apache.flink.fnexecution.v1.FlinkFnApi;\n+import org.apache.flink.table.runtime.typeutils.serializers.python.BigDecSerializer;\n+import org.apache.flink.table.runtime.typeutils.serializers.python.DateSerializer;\n+import org.apache.flink.table.runtime.typeutils.serializers.python.StringSerializer;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * A util class for converting the given TypeInformation to other objects.\n+ */\n+public class PythonTypeUtils {\n+\n+\t/**\n+\t * Get coder proto according to the given type information.\n+\t */\n+\tpublic static class TypeInfoToProtoConverter {\n+\n+\t\tpublic static FlinkFnApi.TypeInfo.FieldType getFieldType(TypeInformation typeInformation) {\n+\n+\t\t\tif (typeInformation instanceof BasicTypeInfo) {\n+\t\t\t\treturn buildBasicTypeProto((BasicTypeInfo) typeInformation);\n+\t\t\t}\n+\n+\t\t\tif (typeInformation instanceof PrimitiveArrayTypeInfo) {\n+\t\t\t\treturn buildPrimitiveArrayTypeProto((PrimitiveArrayTypeInfo) typeInformation);\n+\t\t\t}\n+\n+\t\t\tif (typeInformation instanceof RowTypeInfo) {\n+\t\t\t\treturn buildRowTypeProto((RowTypeInfo) typeInformation);\n+\t\t\t}\n+\n+\t\t\tif (typeInformation instanceof PickledByteArrayTypeInfo) {\n+\t\t\t\treturn buildPickledBytesTypeProto((PickledByteArrayTypeInfo) typeInformation);\n+\t\t\t}\n+\n+\t\t\tif (typeInformation instanceof TupleTypeInfo) {\n+\t\t\t\treturn buildTupleTypeProto((TupleTypeInfo) typeInformation);\n+\t\t\t}\n+\n+\t\t\tthrow new UnsupportedOperationException(\n+\t\t\t\tString.format(\"The type information: %s is not supported in PyFlink currently.\",\n+\t\t\t\t\ttypeInformation.toString()));\n+\t\t}\n+\n+\t\tpublic static FlinkFnApi.TypeInfo toTypeInfoProto(FlinkFnApi.TypeInfo.FieldType fieldType) {\n+\t\t\treturn FlinkFnApi.TypeInfo.newBuilder().addField(FlinkFnApi.TypeInfo.Field.newBuilder().setType(fieldType).build()).build();\n+\t\t}\n+\n+\t\tprivate static FlinkFnApi.TypeInfo.FieldType buildBasicTypeProto(BasicTypeInfo basicTypeInfo) {\n+\n+\t\t\tFlinkFnApi.TypeInfo.TypeName typeName = null;\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.BOOLEAN_TYPE_INFO)) {\n+\t\t\t\ttypeName = FlinkFnApi.TypeInfo.TypeName.BOOLEAN;\n+\t\t\t}\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.BYTE_TYPE_INFO)) {\n+\t\t\t\ttypeName = FlinkFnApi.TypeInfo.TypeName.BYTE;\n+\t\t\t}\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.STRING_TYPE_INFO)) {\n+\t\t\t\ttypeName = FlinkFnApi.TypeInfo.TypeName.STRING;\n+\t\t\t}\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.SHORT_TYPE_INFO)) {\n+\t\t\t\ttypeName = FlinkFnApi.TypeInfo.TypeName.SHORT;\n+\t\t\t}\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.INT_TYPE_INFO)) {\n+\t\t\t\ttypeName = FlinkFnApi.TypeInfo.TypeName.INT;\n+\t\t\t}\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.LONG_TYPE_INFO)) {\n+\t\t\t\ttypeName = FlinkFnApi.TypeInfo.TypeName.LONG;\n+\t\t\t}\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.FLOAT_TYPE_INFO)) {\n+\t\t\t\ttypeName = FlinkFnApi.TypeInfo.TypeName.FLOAT;\n+\t\t\t}\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.DOUBLE_TYPE_INFO)) {\n+\t\t\t\ttypeName = FlinkFnApi.TypeInfo.TypeName.DOUBLE;\n+\t\t\t}\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.CHAR_TYPE_INFO)) {\n+\t\t\t\ttypeName = FlinkFnApi.TypeInfo.TypeName.CHAR;\n+\t\t\t}\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.DATE_TYPE_INFO)) {\n+\t\t\t\ttypeName = FlinkFnApi.TypeInfo.TypeName.LOCAL_DATE;\n+\t\t\t}\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.VOID_TYPE_INFO)) {\n+\t\t\t\ttypeName = FlinkFnApi.TypeInfo.TypeName.VOID;\n+\t\t\t}\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.BIG_INT_TYPE_INFO)) {\n+\t\t\t\ttypeName = FlinkFnApi.TypeInfo.TypeName.BIG_INT;\n+\t\t\t}\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.BIG_DEC_TYPE_INFO)) {\n+\t\t\t\ttypeName = FlinkFnApi.TypeInfo.TypeName.BIG_DEC;\n+\t\t\t}\n+\n+\t\t\tif (basicTypeInfo.equals(BasicTypeInfo.INSTANT_TYPE_INFO)) {\n+\t\t\t\ttypeName = FlinkFnApi.TypeInfo.TypeName.INSTANT;\n+\t\t\t}\n+\n+\t\t\tif (typeName == null) {\n+\t\t\t\tthrow new UnsupportedOperationException(\n+\t\t\t\t\tString.format(\"The BasicTypeInfo: %s is not supported in PyFlink currently.\",\n+\t\t\t\t\t\tbasicTypeInfo.toString()));\n+\t\t\t}\n+\n+\t\t\treturn FlinkFnApi.TypeInfo.FieldType.newBuilder()\n+\t\t\t\t.setTypeName(typeName).build();\n+\t\t}\n+\n+\t\tprivate static FlinkFnApi.TypeInfo.FieldType buildPrimitiveArrayTypeProto(\n+\t\t\tPrimitiveArrayTypeInfo primitiveArrayTypeInfo) {\n+\t\t\tFlinkFnApi.TypeInfo.FieldType elementFieldType = null;\n+\t\t\tif (primitiveArrayTypeInfo.equals(PrimitiveArrayTypeInfo.BOOLEAN_PRIMITIVE_ARRAY_TYPE_INFO)) {\n+\t\t\t\telementFieldType = buildBasicTypeProto(BasicTypeInfo.BOOLEAN_TYPE_INFO);\n+\t\t\t}\n+\n+\t\t\tif (primitiveArrayTypeInfo.equals(PrimitiveArrayTypeInfo.BYTE_PRIMITIVE_ARRAY_TYPE_INFO)) {\n+\t\t\t\telementFieldType = buildBasicTypeProto(BasicTypeInfo.BYTE_TYPE_INFO);\n+\t\t\t}\n+\n+\t\t\tif (primitiveArrayTypeInfo.equals(PrimitiveArrayTypeInfo.SHORT_PRIMITIVE_ARRAY_TYPE_INFO)) {\n+\t\t\t\telementFieldType = buildBasicTypeProto(BasicTypeInfo.SHORT_TYPE_INFO);\n+\t\t\t}\n+\n+\t\t\tif (primitiveArrayTypeInfo.equals(PrimitiveArrayTypeInfo.INT_PRIMITIVE_ARRAY_TYPE_INFO)) {\n+\t\t\t\telementFieldType = buildBasicTypeProto(BasicTypeInfo.INT_TYPE_INFO);\n+\t\t\t}\n+\n+\t\t\tif (primitiveArrayTypeInfo.equals(PrimitiveArrayTypeInfo.LONG_PRIMITIVE_ARRAY_TYPE_INFO)) {\n+\t\t\t\telementFieldType = buildBasicTypeProto(BasicTypeInfo.LONG_TYPE_INFO);\n+\t\t\t}\n+\n+\t\t\tif (primitiveArrayTypeInfo.equals(PrimitiveArrayTypeInfo.FLOAT_PRIMITIVE_ARRAY_TYPE_INFO)) {\n+\t\t\t\telementFieldType = buildBasicTypeProto(BasicTypeInfo.FLOAT_TYPE_INFO);\n+\t\t\t}\n+\n+\t\t\tif (primitiveArrayTypeInfo.equals(PrimitiveArrayTypeInfo.DOUBLE_PRIMITIVE_ARRAY_TYPE_INFO)) {\n+\t\t\t\telementFieldType = buildBasicTypeProto(BasicTypeInfo.DOUBLE_TYPE_INFO);\n+\t\t\t}\n+\n+\t\t\tif (primitiveArrayTypeInfo.equals(PrimitiveArrayTypeInfo.CHAR_PRIMITIVE_ARRAY_TYPE_INFO)) {\n+\t\t\t\telementFieldType = buildBasicTypeProto(BasicTypeInfo.CHAR_TYPE_INFO);\n+\t\t\t}\n+\n+\t\t\tif (elementFieldType == null) {\n+\t\t\t\tthrow new UnsupportedOperationException(\n+\t\t\t\t\tString.format(\"The element type of PrimitiveArrayTypeInfo: %s is not supported in PyFlink currently.\"\n+\t\t\t\t\t\t, primitiveArrayTypeInfo.toString()));\n+\t\t\t}\n+\n+\t\t\tFlinkFnApi.TypeInfo.FieldType.Builder builder = FlinkFnApi.TypeInfo.FieldType.newBuilder()\n+\t\t\t\t.setTypeName(FlinkFnApi.TypeInfo.TypeName.ARRAY);\n+\t\t\tbuilder.setCollectionElementType(elementFieldType);\n+\t\t\treturn builder.build();\n+\t\t}\n+\n+\t\tprivate static FlinkFnApi.TypeInfo.FieldType buildRowTypeProto(RowTypeInfo rowTypeInfo) {\n+\t\t\tFlinkFnApi.TypeInfo.FieldType.Builder builder =\n+\t\t\t\tFlinkFnApi.TypeInfo.FieldType.newBuilder()\n+\t\t\t\t\t.setTypeName(FlinkFnApi.TypeInfo.TypeName.ROW);\n+\n+\t\t\tFlinkFnApi.TypeInfo.Builder rowTypeInfoBuilder = FlinkFnApi.TypeInfo.newBuilder();\n+\n+\t\t\tint arity = rowTypeInfo.getArity();\n+\t\t\tfor (int index = 0; index < arity; index++) {\n+\t\t\t\trowTypeInfoBuilder.addField(\n+\t\t\t\t\tFlinkFnApi.TypeInfo.Field.newBuilder()\n+\t\t\t\t\t\t.setName(rowTypeInfo.getFieldNames()[index])\n+\t\t\t\t\t\t.setType(TypeInfoToProtoConverter.getFieldType(rowTypeInfo.getTypeAt(index)))\n+\t\t\t\t\t\t.build());\n+\t\t\t}\n+\t\t\tbuilder.setRowTypeInfo(rowTypeInfoBuilder.build());\n+\t\t\treturn builder.build();\n+\t\t}\n+\n+\t\tprivate static FlinkFnApi.TypeInfo.FieldType buildPickledBytesTypeProto(PickledByteArrayTypeInfo pickledByteArrayTypeInfo) {\n+\t\t\treturn FlinkFnApi.TypeInfo.FieldType.newBuilder()\n+\t\t\t\t.setTypeName(FlinkFnApi.TypeInfo.TypeName.PICKLED_BYTES).build();\n+\t\t}\n+\n+\t\tprivate static FlinkFnApi.TypeInfo.FieldType buildTupleTypeProto(TupleTypeInfo tupleTypeInfo) {\n+\t\t\tFlinkFnApi.TypeInfo.FieldType.Builder builder =\n+\t\t\t\tFlinkFnApi.TypeInfo.FieldType.newBuilder()\n+\t\t\t\t\t.setTypeName(FlinkFnApi.TypeInfo.TypeName.TUPLE);\n+\n+\t\t\tFlinkFnApi.TypeInfo.Builder tupleTypeInfoBuilder = FlinkFnApi.TypeInfo.newBuilder();\n+\n+\t\t\tint arity = tupleTypeInfo.getArity();\n+\t\t\tfor (int index = 0; index < arity; index++) {\n+\t\t\t\ttupleTypeInfoBuilder.addField(\n+\t\t\t\t\tFlinkFnApi.TypeInfo.Field.newBuilder()\n+\t\t\t\t\t\t.setName(tupleTypeInfo.getFieldNames()[index])\n+\t\t\t\t\t\t.setType(TypeInfoToProtoConverter.getFieldType(tupleTypeInfo.getTypeAt(index)))\n+\t\t\t\t\t\t.build());\n+\t\t\t}\n+\t\t\tbuilder.setTupleTypeInfo(tupleTypeInfoBuilder.build());\n+\t\t\treturn builder.build();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Get serializers according to the given typeInformation.\n+\t */\n+\tpublic static class TypeInfoToSerializerConverter {\n+\t\tprivate static final Map<Class, TypeSerializer> typeInfoToSerialzerMap = new HashMap<>();\n+\n+\t\tstatic {\n+\t\t\ttypeInfoToSerialzerMap.put(BasicTypeInfo.BOOLEAN_TYPE_INFO.getTypeClass(), BooleanSerializer.INSTANCE);\n+\t\t\ttypeInfoToSerialzerMap.put(BasicTypeInfo.INT_TYPE_INFO.getTypeClass(), IntSerializer.INSTANCE);\n+\t\t\ttypeInfoToSerialzerMap.put(BasicTypeInfo.STRING_TYPE_INFO.getTypeClass(), StringSerializer.INSTANCE);\n+\t\t\ttypeInfoToSerialzerMap.put(BasicTypeInfo.SHORT_TYPE_INFO.getTypeClass(), ShortSerializer.INSTANCE);\n+\t\t\ttypeInfoToSerialzerMap.put(BasicTypeInfo.LONG_TYPE_INFO.getTypeClass(), LongSerializer.INSTANCE);\n+\t\t\ttypeInfoToSerialzerMap.put(BasicTypeInfo.FLOAT_TYPE_INFO.getTypeClass(), FloatSerializer.INSTANCE);\n+\t\t\ttypeInfoToSerialzerMap.put(BasicTypeInfo.DOUBLE_TYPE_INFO.getTypeClass(), DoubleSerializer.INSTANCE);\n+\t\t\ttypeInfoToSerialzerMap.put(BasicTypeInfo.CHAR_TYPE_INFO.getTypeClass(), CharSerializer.INSTANCE);\n+\t\t\ttypeInfoToSerialzerMap.put(BasicTypeInfo.DATE_TYPE_INFO.getTypeClass(), DateSerializer.INSTANCE);", "originalCommit": "0bc8a1c9388336bf5eecb6b0e53372c7da00f4f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwNTAxMg==", "url": "https://github.com/apache/flink/pull/13066#discussion_r466105012", "bodyText": "Add tests for this class.", "author": "hequn8128", "createdAt": "2020-08-06T02:14:55Z", "path": "flink-python/src/main/java/org/apache/flink/datastream/runtime/typeutils/python/PythonTypeUtils.java", "diffHunk": "@@ -0,0 +1,310 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.datastream.runtime.typeutils.python;\n+\n+import org.apache.flink.api.common.typeinfo.BasicTypeInfo;\n+import org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo;\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.api.common.typeutils.TypeSerializer;\n+import org.apache.flink.api.common.typeutils.base.BigIntSerializer;\n+import org.apache.flink.api.common.typeutils.base.BooleanSerializer;\n+import org.apache.flink.api.common.typeutils.base.CharSerializer;\n+import org.apache.flink.api.common.typeutils.base.DoubleSerializer;\n+import org.apache.flink.api.common.typeutils.base.FloatSerializer;\n+import org.apache.flink.api.common.typeutils.base.InstantSerializer;\n+import org.apache.flink.api.common.typeutils.base.IntSerializer;\n+import org.apache.flink.api.common.typeutils.base.LongSerializer;\n+import org.apache.flink.api.common.typeutils.base.ShortSerializer;\n+import org.apache.flink.api.common.typeutils.base.VoidSerializer;\n+import org.apache.flink.api.common.typeutils.base.array.BytePrimitiveArraySerializer;\n+import org.apache.flink.api.java.tuple.Tuple;\n+import org.apache.flink.api.java.typeutils.RowTypeInfo;\n+import org.apache.flink.api.java.typeutils.TupleTypeInfo;\n+import org.apache.flink.api.java.typeutils.runtime.RowSerializer;\n+import org.apache.flink.api.java.typeutils.runtime.TupleSerializer;\n+import org.apache.flink.datastream.typeinfo.python.PickledByteArrayTypeInfo;\n+import org.apache.flink.fnexecution.v1.FlinkFnApi;\n+import org.apache.flink.table.runtime.typeutils.serializers.python.BigDecSerializer;\n+import org.apache.flink.table.runtime.typeutils.serializers.python.DateSerializer;\n+import org.apache.flink.table.runtime.typeutils.serializers.python.StringSerializer;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * A util class for converting the given TypeInformation to other objects.\n+ */\n+public class PythonTypeUtils {", "originalCommit": "0bc8a1c9388336bf5eecb6b0e53372c7da00f4f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwNTU0NA==", "url": "https://github.com/apache/flink/pull/13066#discussion_r466105544", "bodyText": "StreamExecutionEnvironment => {@link StreamExecutionEnvironment}", "author": "hequn8128", "createdAt": "2020-08-06T02:16:56Z", "path": "flink-python/src/main/java/org/apache/flink/python/util/PythonConfigUtil.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.python.util;\n+\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+\n+/**\n+ * A Util class to get the StreamExecutionEnvironment configuration and merged configuration with environment settings.", "originalCommit": "0bc8a1c9388336bf5eecb6b0e53372c7da00f4f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwNTY2Ng==", "url": "https://github.com/apache/flink/pull/13066#discussion_r466105666", "bodyText": "{@link StreamExecutionEnvironment#getConfiguration()}", "author": "hequn8128", "createdAt": "2020-08-06T02:17:30Z", "path": "flink-python/src/main/java/org/apache/flink/python/util/PythonConfigUtil.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.python.util;\n+\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+\n+/**\n+ * A Util class to get the StreamExecutionEnvironment configuration and merged configuration with environment settings.\n+ */\n+public class PythonConfigUtil {\n+\n+\t/**\n+\t * A static method to get the StreamExecutionEnvironment configuration merged with python dependency management\n+\t * configurations.\n+\t */\n+\tpublic static Configuration getMergedConfig(StreamExecutionEnvironment env) throws InvocationTargetException,\n+\t\tIllegalAccessException, NoSuchMethodException {\n+\t\tConfiguration envConfiguration = getEnvironmentConfig(env);\n+\t\tConfiguration config = PythonDependencyUtils.configurePythonDependencies(env.getCachedFiles(), envConfiguration);\n+\t\treturn config;\n+\t}\n+\n+\t/**\n+\t * Get the private method StreamExecutionEnvironment.getConfiguration() by reflection recursively. Then access the", "originalCommit": "0bc8a1c9388336bf5eecb6b0e53372c7da00f4f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwNTcxMw==", "url": "https://github.com/apache/flink/pull/13066#discussion_r466105713", "bodyText": "Add tests for this class.", "author": "hequn8128", "createdAt": "2020-08-06T02:17:46Z", "path": "flink-python/src/main/java/org/apache/flink/python/util/PythonConfigUtil.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.python.util;\n+\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+\n+/**\n+ * A Util class to get the StreamExecutionEnvironment configuration and merged configuration with environment settings.\n+ */\n+public class PythonConfigUtil {", "originalCommit": "0bc8a1c9388336bf5eecb6b0e53372c7da00f4f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwNjMwMQ==", "url": "https://github.com/apache/flink/pull/13066#discussion_r466106301", "bodyText": "Recovery the change.", "author": "hequn8128", "createdAt": "2020-08-06T02:19:58Z", "path": "flink-python/src/main/java/org/apache/flink/streaming/api/runners/python/beam/BeamPythonStatelessFunctionRunner.java", "diffHunk": "@@ -53,8 +48,7 @@\n /**\n  * A {@link BeamPythonFunctionRunner} used to execute Python stateless functions.\n  */\n-@Internal", "originalCommit": "0bc8a1c9388336bf5eecb6b0e53372c7da00f4f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwNzA0Nw==", "url": "https://github.com/apache/flink/pull/13066#discussion_r466107047", "bodyText": "Keep one blank between protected and abstract.", "author": "hequn8128", "createdAt": "2020-08-06T02:22:41Z", "path": "flink-python/src/main/java/org/apache/flink/streaming/api/runners/python/beam/BeamPythonStatelessFunctionRunner.java", "diffHunk": "@@ -170,34 +150,11 @@ public ExecutableStage createExecutableStage() throws Exception {\n \t\t\t.build();\n \t}\n \n-\t/**\n-\t * Gets the proto representation of the input coder.\n-\t */\n-\tprivate RunnerApi.Coder getInputCoderProto() {\n-\t\treturn getRowCoderProto(inputType);\n-\t}\n-\n-\t/**\n-\t * Gets the proto representation of the output coder.\n-\t */\n-\tprivate RunnerApi.Coder getOutputCoderProto() {\n-\t\treturn getRowCoderProto(outputType);\n-\t}\n+\tprotected  abstract byte[] getUserDefinedFunctionsProtoBytes();", "originalCommit": "0bc8a1c9388336bf5eecb6b0e53372c7da00f4f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwNzIzOQ==", "url": "https://github.com/apache/flink/pull/13066#discussion_r466107239", "bodyText": "private static final long serialVersionUID = 1L;", "author": "hequn8128", "createdAt": "2020-08-06T02:23:32Z", "path": "flink-python/src/main/java/org/apache/flink/table/runtime/runners/python/beam/BeamTablePythonStatelessFunctionRunner.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.runners.python.beam;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.fnexecution.v1.FlinkFnApi;\n+import org.apache.flink.python.env.PythonEnvironmentManager;\n+import org.apache.flink.python.metric.FlinkMetricContainer;\n+import org.apache.flink.streaming.api.runners.python.beam.BeamPythonFunctionRunner;\n+import org.apache.flink.streaming.api.runners.python.beam.BeamPythonStatelessFunctionRunner;\n+import org.apache.flink.table.runtime.typeutils.PythonTypeUtils;\n+import org.apache.flink.table.types.logical.LogicalType;\n+import org.apache.flink.table.types.logical.RowType;\n+import org.apache.flink.util.Preconditions;\n+\n+import org.apache.beam.model.pipeline.v1.RunnerApi;\n+\n+import java.util.Map;\n+\n+/**\n+ * A {@link BeamPythonFunctionRunner} used to execute Python stateless functions.\n+ */\n+@Internal\n+public class BeamTablePythonStatelessFunctionRunner extends BeamPythonStatelessFunctionRunner {\n+\n+", "originalCommit": "0bc8a1c9388336bf5eecb6b0e53372c7da00f4f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwNzM2Mg==", "url": "https://github.com/apache/flink/pull/13066#discussion_r466107362", "bodyText": "BeamTablePythonStatelessFunctionRunner", "author": "hequn8128", "createdAt": "2020-08-06T02:23:57Z", "path": "flink-python/src/main/java/org/apache/flink/table/runtime/runners/python/beam/BeamTablePythonStatelessFunctionRunner.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.runners.python.beam;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.fnexecution.v1.FlinkFnApi;\n+import org.apache.flink.python.env.PythonEnvironmentManager;\n+import org.apache.flink.python.metric.FlinkMetricContainer;\n+import org.apache.flink.streaming.api.runners.python.beam.BeamPythonFunctionRunner;\n+import org.apache.flink.streaming.api.runners.python.beam.BeamPythonStatelessFunctionRunner;\n+import org.apache.flink.table.runtime.typeutils.PythonTypeUtils;\n+import org.apache.flink.table.types.logical.LogicalType;\n+import org.apache.flink.table.types.logical.RowType;\n+import org.apache.flink.util.Preconditions;\n+\n+import org.apache.beam.model.pipeline.v1.RunnerApi;\n+\n+import java.util.Map;\n+\n+/**\n+ * A {@link BeamPythonFunctionRunner} used to execute Python stateless functions.", "originalCommit": "0bc8a1c9388336bf5eecb6b0e53372c7da00f4f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwNzY3OQ==", "url": "https://github.com/apache/flink/pull/13066#discussion_r466107679", "bodyText": "PassThroughPythonScalarFunctionRunner", "author": "hequn8128", "createdAt": "2020-08-06T02:24:58Z", "path": "flink-python/src/test/java/org/apache/flink/table/runtime/utils/PassThroughPythonScalarFunctionRunner.java", "diffHunk": "@@ -32,9 +32,9 @@\n import java.util.Map;\n \n /**\n- * A BeamPythonStatelessFunctionRunner runner that just return the input elements as the execution results.\n+ * A BeamTablePythonStatelessFunctionRunner runner that just return the input elements as the execution results.", "originalCommit": "0bc8a1c9388336bf5eecb6b0e53372c7da00f4f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwNzcxNA==", "url": "https://github.com/apache/flink/pull/13066#discussion_r466107714", "bodyText": "PassThroughPythonTableFunctionRunner", "author": "hequn8128", "createdAt": "2020-08-06T02:25:06Z", "path": "flink-python/src/test/java/org/apache/flink/table/runtime/utils/PassThroughPythonTableFunctionRunner.java", "diffHunk": "@@ -32,10 +32,10 @@\n import java.util.Map;\n \n /**\n- * A BeamPythonStatelessFunctionRunner that emit each input element in inner join and emit null in\n+ * A BeamTablePythonStatelessFunctionRunner that emit each input element in inner join and emit null in", "originalCommit": "0bc8a1c9388336bf5eecb6b0e53372c7da00f4f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4ea614633c68f672acca22af3d912c12cde8974c", "url": "https://github.com/apache/flink/commit/4ea614633c68f672acca22af3d912c12cde8974c", "message": "- add fast coders for DataStream stateless functions, resolve part of the review issues.", "committedDate": "2020-08-07T02:28:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc5ODc2MQ==", "url": "https://github.com/apache/flink/pull/13066#discussion_r466798761", "bodyText": "The comment has not been addressed!\nAdd license text for this class. Please check the test failures", "author": "hequn8128", "createdAt": "2020-08-07T03:20:48Z", "path": "flink-python/src/main/java/org/apache/flink/datastream/runtime/operators/python/DataStreamPythonStatelessFunctionOperator.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package org.apache.flink.datastream.runtime.operators.python;", "originalCommit": "4ea614633c68f672acca22af3d912c12cde8974c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc5OTU1NA==", "url": "https://github.com/apache/flink/pull/13066#discussion_r466799554", "bodyText": "The comment has not been addressed!\nKeep one blank between protected and abstract.", "author": "hequn8128", "createdAt": "2020-08-07T03:24:26Z", "path": "flink-python/src/main/java/org/apache/flink/streaming/api/runners/python/beam/BeamPythonStatelessFunctionRunner.java", "diffHunk": "@@ -170,34 +152,11 @@ public ExecutableStage createExecutableStage() throws Exception {\n \t\t\t.build();\n \t}\n \n-\t/**\n-\t * Gets the proto representation of the input coder.\n-\t */\n-\tprivate RunnerApi.Coder getInputCoderProto() {\n-\t\treturn getRowCoderProto(inputType);\n-\t}\n+\tprotected  abstract byte[] getUserDefinedFunctionsProtoBytes();", "originalCommit": "4ea614633c68f672acca22af3d912c12cde8974c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc5OTg1OA==", "url": "https://github.com/apache/flink/pull/13066#discussion_r466799858", "bodyText": "The comment has not been addressed!\nprivate static final long serialVersionUID = 1L;", "author": "hequn8128", "createdAt": "2020-08-07T03:25:30Z", "path": "flink-python/src/main/java/org/apache/flink/table/runtime/runners/python/beam/BeamTablePythonStatelessFunctionRunner.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.runners.python.beam;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.fnexecution.v1.FlinkFnApi;\n+import org.apache.flink.python.env.PythonEnvironmentManager;\n+import org.apache.flink.python.metric.FlinkMetricContainer;\n+import org.apache.flink.streaming.api.runners.python.beam.BeamPythonStatelessFunctionRunner;\n+import org.apache.flink.table.runtime.typeutils.PythonTypeUtils;\n+import org.apache.flink.table.types.logical.LogicalType;\n+import org.apache.flink.table.types.logical.RowType;\n+import org.apache.flink.util.Preconditions;\n+\n+import org.apache.beam.model.pipeline.v1.RunnerApi;\n+\n+import java.util.Map;\n+\n+/**\n+ * A {@link BeamTablePythonStatelessFunctionRunner} used to execute Python stateless functions.\n+ */\n+@Internal\n+public class BeamTablePythonStatelessFunctionRunner extends BeamPythonStatelessFunctionRunner {\n+\n+", "originalCommit": "4ea614633c68f672acca22af3d912c12cde8974c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5450ead81ef4af74a4f0aa2a25e76a95c39763a1", "url": "https://github.com/apache/flink/commit/5450ead81ef4af74a4f0aa2a25e76a95c39763a1", "message": "- resolve review issues.", "committedDate": "2020-08-07T08:34:02Z", "type": "commit"}, {"oid": "33e5e101da72c7752adc0d8c95cbaf4527312d49", "url": "https://github.com/apache/flink/commit/33e5e101da72c7752adc0d8c95cbaf4527312d49", "message": "- add return type hints for map() and flat_map().", "committedDate": "2020-08-07T08:46:24Z", "type": "commit"}, {"oid": "1744a16bc7b0d5d86df35fae078b68f71bfda1a0", "url": "https://github.com/apache/flink/commit/1744a16bc7b0d5d86df35fae078b68f71bfda1a0", "message": "- resole build error that import google in datastream module.", "committedDate": "2020-08-07T10:37:17Z", "type": "commit"}, {"oid": "e412f8bec1d8dfa0ef317d8b9048b61935f1dfc1", "url": "https://github.com/apache/flink/commit/e412f8bec1d8dfa0ef317d8b9048b61935f1dfc1", "message": "- resolved review issues.", "committedDate": "2020-08-07T11:29:13Z", "type": "commit"}]}