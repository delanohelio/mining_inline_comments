{"pr_number": 13321, "pr_title": "[FLINK-14870] Remove nullable assumption of task slot sharing group", "pr_createdAt": "2020-09-03T15:01:03Z", "pr_url": "https://github.com/apache/flink/pull/13321", "timeline": [{"oid": "4e21b1f0db7493be16bcae0565beafa14e913cc9", "url": "https://github.com/apache/flink/commit/4e21b1f0db7493be16bcae0565beafa14e913cc9", "message": "[FLINK-14870][runtime] Drop the nullable assumption of slot sharing group in ScheduledUnit and remove the consequently unused methods in SchedulerImpl", "committedDate": "2020-09-05T13:52:23Z", "type": "forcePushed"}, {"oid": "96e983d10c7095847b404461abd01b4d1ebb0aac", "url": "https://github.com/apache/flink/commit/96e983d10c7095847b404461abd01b4d1ebb0aac", "message": "[FLINK-14870][runtime] Drop the nullable assumption of slot sharing group in ScheduledUnit and remove the consequently unused methods in SchedulerImpl", "committedDate": "2020-09-07T10:01:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4NDY4Nw==", "url": "https://github.com/apache/flink/pull/13321#discussion_r484984687", "bodyText": "Maybe Releasing TaskManager in SlotPool for tests?", "author": "azagrebin", "createdAt": "2020-09-08T14:54:37Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmanager/scheduler/SchedulerTestBase.java", "diffHunk": "@@ -161,7 +161,7 @@ public TaskManagerLocation addTaskManager(int numberSlots) {\n \n \t\tpublic void releaseTaskManager(ResourceID resourceId) {\n \t\t\ttry {\n-\t\t\t\tsupplyInMainThreadExecutor(() -> slotPool.releaseTaskManager(resourceId, null));\n+\t\t\t\tsupplyInMainThreadExecutor(() -> slotPool.releaseTaskManager(resourceId, new Exception(\"Test Exception\")));", "originalCommit": "d25691da795ac975151e7021120f7f7a734bc902", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2MDc3OA==", "url": "https://github.com/apache/flink/pull/13321#discussion_r485060778", "bodyText": "done.", "author": "zhuzhurk", "createdAt": "2020-09-08T16:48:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4NDY4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4NzgyNQ==", "url": "https://github.com/apache/flink/pull/13321#discussion_r484987825", "bodyText": "is it a lot of effort to fix this in tests so that we can remove this check?", "author": "azagrebin", "createdAt": "2020-09-08T14:57:37Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/JobVertex.java", "diffHunk": "@@ -364,25 +365,29 @@ public void addOperatorCoordinator(SerializedValue<OperatorCoordinator.Provider>\n \t * @param grp The slot sharing group to associate the vertex with.\n \t */\n \tpublic void setSlotSharingGroup(SlotSharingGroup grp) {\n+\t\tcheckNotNull(grp);\n+\n \t\tif (this.slotSharingGroup != null) {\n \t\t\tthis.slotSharingGroup.removeVertexFromGroup(this.getID(), this.getMinResources());\n \t\t}\n \n+\t\tgrp.addVertexToGroup(this.getID(), this.getMinResources());\n \t\tthis.slotSharingGroup = grp;\n-\t\tif (grp != null) {\n-\t\t\tgrp.addVertexToGroup(this.getID(), this.getMinResources());\n-\t\t}\n \t}\n \n \t/**\n \t * Gets the slot sharing group that this vertex is associated with. Different vertices in the same\n-\t * slot sharing group can run one subtask each in the same slot. If the vertex is not associated with\n-\t * a slot sharing group, this method returns {@code null}.\n+\t * slot sharing group can run one subtask each in the same slot.\n \t *\n-\t * @return The slot sharing group to associate the vertex with, or {@code null}, if not associated with one.\n+\t * @return The slot sharing group to associate the vertex with\n \t */\n-\t@Nullable\n \tpublic SlotSharingGroup getSlotSharingGroup() {\n+\t\tif (slotSharingGroup == null) {\n+\t\t\t// create a new slot sharing group for this vertex if it was in no other slot sharing group.\n+\t\t\t// this should only happen in testing cases at the moment because production code path will\n+\t\t\t// always set a value to it before used", "originalCommit": "bdf61a096142909d16c02adea86b0f6b3dac76e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1MjEwMg==", "url": "https://github.com/apache/flink/pull/13321#discussion_r485052102", "bodyText": "I think so, there are 200+ usages of JobVertex constructors, distributed in 40+ test classes.", "author": "zhuzhurk", "createdAt": "2020-09-08T16:33:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4NzgyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ0MTQ1MQ==", "url": "https://github.com/apache/flink/pull/13321#discussion_r485441451", "bodyText": "ok, it is a pity that JobVertex is mutable and we do not have a separate builder for JobVertex.\nis this if basically not the same as just initialising slotSharingGroup = new SlotSharingGroup() in the constructor?\nthis should be also inline with the previous behaviour where all vertexes with null-group get into a separate group", "author": "azagrebin", "createdAt": "2020-09-09T08:42:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4NzgyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ0OTE4Nw==", "url": "https://github.com/apache/flink/pull/13321#discussion_r485449187", "bodyText": "It's not the same because we need to invoke setSlotSharingGroup() which relies on getMinResources of the vertex.\nThe getMinResources, however, is set after the vertex is constructed.", "author": "zhuzhurk", "createdAt": "2020-09-09T08:53:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4NzgyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE2NTM0MQ==", "url": "https://github.com/apache/flink/pull/13321#discussion_r486165341", "bodyText": "Alright, I agree to consider it as a follow-up cleanup. We can introduce later a non-null SSG check in the getter to see how many tests fail.", "author": "azagrebin", "createdAt": "2020-09-10T08:37:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4NzgyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk5NDI2NA==", "url": "https://github.com/apache/flink/pull/13321#discussion_r484994264", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate ExecutionVertexSchedulingRequirements createSchedulingRequirement(\n          \n          \n            \n            \t\t\tfinal ExecutionVertexID executionVertexId) {\n          \n          \n            \n            \t\treturn createSchedulingRequirement(executionVertexId, null);\n          \n          \n            \n            \t}\n          \n          \n            \n            \tprivate ExecutionVertexSchedulingRequirements createSchedulingRequirement(\n          \n          \n            \n            \t\t\tfinal int subtaskIndex) {\n          \n          \n            \n            \t\treturn createSchedulingRequirement(new ExecutionVertexID(new JobVertexID(), subtaskIndex), null);\n          \n          \n            \n            \t}", "author": "azagrebin", "createdAt": "2020-09-08T15:05:46Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/scheduler/AbstractExecutionSlotAllocatorTest.java", "diffHunk": "@@ -114,38 +118,30 @@ public void testCompletedExecutionVertexAssignmentWillBeUnregistered() {\n \tpublic void testComputeAllPriorAllocationIds() {\n \t\tfinal List<AllocationID> expectAllocationIds = Arrays.asList(new AllocationID(), new AllocationID());\n \t\tfinal List<ExecutionVertexSchedulingRequirements> testSchedulingRequirements = Arrays.asList(\n-\t\t\tnew ExecutionVertexSchedulingRequirements.Builder().\n-\t\t\t\twithExecutionVertexId(new ExecutionVertexID(new JobVertexID(), 0)).\n-\t\t\t\twithPreviousAllocationId(expectAllocationIds.get(0)).\n-\t\t\t\tbuild(),\n-\t\t\tnew ExecutionVertexSchedulingRequirements.Builder().\n-\t\t\t\twithExecutionVertexId(new ExecutionVertexID(new JobVertexID(), 1)).\n-\t\t\t\twithPreviousAllocationId(expectAllocationIds.get(0)).\n-\t\t\t\tbuild(),\n-\t\t\tnew ExecutionVertexSchedulingRequirements.Builder().\n-\t\t\t\twithExecutionVertexId(new ExecutionVertexID(new JobVertexID(), 2)).\n-\t\t\t\twithPreviousAllocationId(expectAllocationIds.get(1)).\n-\t\t\t\tbuild(),\n-\t\t\tnew ExecutionVertexSchedulingRequirements.Builder().\n-\t\t\t\twithExecutionVertexId(new ExecutionVertexID(new JobVertexID(), 3)).\n-\t\t\t\tbuild()\n+\t\t\tcreateSchedulingRequirement(new ExecutionVertexID(new JobVertexID(), 0), expectAllocationIds.get(0)),\n+\t\t\tcreateSchedulingRequirement(new ExecutionVertexID(new JobVertexID(), 1), expectAllocationIds.get(0)),\n+\t\t\tcreateSchedulingRequirement(new ExecutionVertexID(new JobVertexID(), 2), expectAllocationIds.get(1)),\n+\t\t\tcreateSchedulingRequirement(new ExecutionVertexID(new JobVertexID(), 3))\n \t\t);\n \n \t\tfinal Set<AllocationID> allPriorAllocationIds =\n \t\t\tAbstractExecutionSlotAllocator.computeAllPriorAllocationIds(testSchedulingRequirements);\n \t\tassertThat(allPriorAllocationIds, containsInAnyOrder(expectAllocationIds.toArray()));\n \t}\n \n-\tprivate List<ExecutionVertexSchedulingRequirements> createSchedulingRequirements(\n-\t\t\tfinal ExecutionVertexID... executionVertexIds) {\n-\n-\t\tfinal List<ExecutionVertexSchedulingRequirements> schedulingRequirements = new ArrayList<>(executionVertexIds.length);\n+\tprivate ExecutionVertexSchedulingRequirements createSchedulingRequirement(\n+\t\t\tfinal ExecutionVertexID executionVertexId) {\n+\t\treturn createSchedulingRequirement(executionVertexId, null);\n+\t}", "originalCommit": "f4d7c975180ec4cf13537d67ebcd8fe63ed41525", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2MDcwMw==", "url": "https://github.com/apache/flink/pull/13321#discussion_r485060703", "bodyText": "done.", "author": "zhuzhurk", "createdAt": "2020-09-08T16:47:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk5NDI2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk5NTI5OA==", "url": "https://github.com/apache/flink/pull/13321#discussion_r484995298", "bodyText": "why not to add new SlotSharingGroupId() as a default value of slotSharingGroupId in ExecutionVertexSchedulingRequirements.Builder?", "author": "azagrebin", "createdAt": "2020-09-08T15:07:20Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/scheduler/OneSlotPerExecutionSlotAllocatorTest.java", "diffHunk": "@@ -224,6 +224,7 @@ public void testCoLocationConstraintThrowsException() {\n \t\tfinal List<ExecutionVertexSchedulingRequirements> schedulingRequirements = Collections.singletonList(\n \t\t\tnew ExecutionVertexSchedulingRequirements.Builder()\n \t\t\t\t.withExecutionVertexId(new ExecutionVertexID(new JobVertexID(), 0))\n+\t\t\t\t.withSlotSharingGroupId(new SlotSharingGroupId())", "originalCommit": "f4d7c975180ec4cf13537d67ebcd8fe63ed41525", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1ODg4Ng==", "url": "https://github.com/apache/flink/pull/13321#discussion_r485058886", "bodyText": "In production code path, a non-null SlotSharingGroupId should always be obtainable from the vertex.\nA random SlotSharingGroupId is only needed in tests so I'd like to avoid to create it here. This is similar to how we deal with ExecutionVertexID.", "author": "zhuzhurk", "createdAt": "2020-09-08T16:44:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk5NTI5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQzNTEyNg==", "url": "https://github.com/apache/flink/pull/13321#discussion_r485435126", "bodyText": "ok, a bit strange to have the builder in production code where it is used only once and the builder does not have default values for all fields.", "author": "azagrebin", "createdAt": "2020-09-09T08:33:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk5NTI5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ1MTIyOA==", "url": "https://github.com/apache/flink/pull/13321#discussion_r485451228", "bodyText": "Agreed. But I think we will be able to drop this builder along with ExecutionVertexSchedulingRequirements when we drops all other ExecutionSlotAllocator except for SlotSharingExecutionSlotAllocator.", "author": "zhuzhurk", "createdAt": "2020-09-09T08:56:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk5NTI5OA=="}], "type": "inlineReview"}, {"oid": "181e73983ad41f287d91792136d13c59b2ea037d", "url": "https://github.com/apache/flink/commit/181e73983ad41f287d91792136d13c59b2ea037d", "message": "[FLINK-14870][runtime] Drop the nullable assumption of slot sharing group in ScheduledUnit and remove the consequently unused methods in SchedulerImpl", "committedDate": "2020-09-08T16:46:58Z", "type": "forcePushed"}, {"oid": "d9403799a039e2852d8c4395b648c8d7ee9b2038", "url": "https://github.com/apache/flink/commit/d9403799a039e2852d8c4395b648c8d7ee9b2038", "message": "[hotfix][runtime] Add missing Nullable annotations to vertex colocation group", "committedDate": "2020-09-09T08:10:42Z", "type": "commit"}, {"oid": "405cc6eabf58596d9e5f3911505584d74b58e2d3", "url": "https://github.com/apache/flink/commit/405cc6eabf58596d9e5f3911505584d74b58e2d3", "message": "[FLINK-14870][runtime] Ensure JobVertex slot sharing group to be non-null when created from a StreamNode", "committedDate": "2020-09-09T08:10:43Z", "type": "commit"}, {"oid": "e15ce0f14f62be17d6f0ec713809f84168f1ad66", "url": "https://github.com/apache/flink/commit/e15ce0f14f62be17d6f0ec713809f84168f1ad66", "message": "[hotfix][runtime] Close SlotPool in main thread\n\nOtherwise main thread check violation can happen if the SlotPool#close() triggers SlotPool#releaseSlot().", "committedDate": "2020-09-09T08:10:43Z", "type": "commit"}, {"oid": "cce99904e9eeb759ac34f3cdb21d33cf28de94f9", "url": "https://github.com/apache/flink/commit/cce99904e9eeb759ac34f3cdb21d33cf28de94f9", "message": "[hotfix][runtime] Always invoke SlotPool#releaseTaskManager() with a non-null error\n\nThe error will be used to complete futures exceptionally. A null error can cause unexpected NullPointerException.", "committedDate": "2020-09-09T08:10:43Z", "type": "commit"}, {"oid": "f9ae2af7bf59a37c592b3dcdb246f0825129074c", "url": "https://github.com/apache/flink/commit/f9ae2af7bf59a37c592b3dcdb246f0825129074c", "message": "[FLINK-14870][runtime] Drop the nullable assumption of JobVertex slot sharing group", "committedDate": "2020-09-09T08:10:43Z", "type": "commit"}, {"oid": "1cba7e88c3f7cb390b82d6ad264575f951397ab6", "url": "https://github.com/apache/flink/commit/1cba7e88c3f7cb390b82d6ad264575f951397ab6", "message": "[FLINK-14870][runtime] Drop the nullable assumption of slot sharing group in scheduler components", "committedDate": "2020-09-09T08:14:52Z", "type": "commit"}, {"oid": "b49791a2ae6a03e80105f12cd6d49fd6fdbe2b64", "url": "https://github.com/apache/flink/commit/b49791a2ae6a03e80105f12cd6d49fd6fdbe2b64", "message": "[FLINK-14870][runtime] Drop the nullable assumption of slot sharing group in ScheduledUnit and remove the consequently unused methods in SchedulerImpl", "committedDate": "2020-09-09T08:14:53Z", "type": "commit"}, {"oid": "b49791a2ae6a03e80105f12cd6d49fd6fdbe2b64", "url": "https://github.com/apache/flink/commit/b49791a2ae6a03e80105f12cd6d49fd6fdbe2b64", "message": "[FLINK-14870][runtime] Drop the nullable assumption of slot sharing group in ScheduledUnit and remove the consequently unused methods in SchedulerImpl", "committedDate": "2020-09-09T08:14:53Z", "type": "forcePushed"}]}