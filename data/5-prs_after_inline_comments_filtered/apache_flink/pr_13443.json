{"pr_number": 13443, "pr_title": "[FLINK-19288] Make the InternalTimeServiceManager an interface", "pr_createdAt": "2020-09-21T15:38:51Z", "pr_url": "https://github.com/apache/flink/pull/13443", "timeline": [{"oid": "882a4ab1be83705fe26eaf907fd92faa4011d483", "url": "https://github.com/apache/flink/commit/882a4ab1be83705fe26eaf907fd92faa4011d483", "message": "[FLINK-19288] Make the InternalTimeServiceManager an interface\n\nThis refactoring allows to replace the InternalTimerService with a\ndifferent implementation.\n\nMoreover it removes methods for retrieving the number of registered\ntimers from AbstractStreamOperator(s) which were introduced for tests.", "committedDate": "2020-09-22T16:11:17Z", "type": "forcePushed"}, {"oid": "f296a95b73f36126203e2cbe9e6ee288227ffed2", "url": "https://github.com/apache/flink/commit/f296a95b73f36126203e2cbe9e6ee288227ffed2", "message": "[FLINK-19288] Make the InternalTimeServiceManager an interface\n\nThis refactoring allows to replace the InternalTimerService with a\ndifferent implementation.\n\nMoreover it removes methods for retrieving the number of registered\ntimers from AbstractStreamOperator(s) which were introduced for tests.", "committedDate": "2020-09-23T11:03:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1Mjk4NQ==", "url": "https://github.com/apache/flink/pull/13443#discussion_r493652985", "bodyText": "I think this should be a checkState(). An IllegalStateException sounds more appropriate than a NPE.", "author": "kl0u", "createdAt": "2020-09-23T14:45:48Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/AbstractStreamOperator.java", "diffHunk": "@@ -556,11 +558,13 @@ protected void reportOrForwardLatencyMarker(LatencyMarker marker) {\n \t\t}\n \t\t@SuppressWarnings(\"unchecked\")\n \t\tInternalTimeServiceManager<K> keyedTimeServiceHandler = (InternalTimeServiceManager<K>) timeServiceManager;\n+\t\tKeyedStateBackend<K> keyedStateBackend = getKeyedStateBackend();\n+\t\tcheckNotNull(keyedStateBackend, \"Timers can only be used on keyed operators.\");", "originalCommit": "f296a95b73f36126203e2cbe9e6ee288227ffed2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1MzM3NA==", "url": "https://github.com/apache/flink/pull/13443#discussion_r493653374", "bodyText": "Same as in previous comment.", "author": "kl0u", "createdAt": "2020-09-23T14:46:20Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/AbstractStreamOperatorV2.java", "diffHunk": "@@ -455,12 +457,16 @@ protected void reportOrForwardLatencyMarker(LatencyMarker marker) {\n \t\tif (timeServiceManager == null) {\n \t\t\tthrow new RuntimeException(\"The timer service has not been initialized.\");\n \t\t}\n+\n+\t\t@SuppressWarnings(\"unchecked\")\n \t\tInternalTimeServiceManager<K> keyedTimeServiceHandler = (InternalTimeServiceManager<K>) timeServiceManager;\n+\t\tKeyedStateBackend<K> keyedStateBackend = getKeyedStateBackend();\n+\t\tcheckNotNull(keyedStateBackend, \"Timers can only be used on keyed operators.\");", "originalCommit": "f296a95b73f36126203e2cbe9e6ee288227ffed2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1ODE0Nw==", "url": "https://github.com/apache/flink/pull/13443#discussion_r493658147", "bodyText": "It would be nice if here we could use the interface rather than the concrete implementation. Maybe by adding a new interface that include the missing methods and let the implementation implement both the InternalTimeServiceManager and the \"new\" interface?\nAlthough I have not tried it and it may look even uglier the solution I propose.", "author": "kl0u", "createdAt": "2020-09-23T14:52:01Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/InternalTimerServiceSerializationProxy.java", "diffHunk": "@@ -38,7 +38,7 @@\n \tpublic static final int VERSION = 2;\n \n \t/** The key-group timer services to write / read. */\n-\tprivate final InternalTimeServiceManager<K> timerServicesManager;\n+\tprivate final InternalTimeServiceManagerImpl<K> timerServicesManager;", "originalCommit": "f296a95b73f36126203e2cbe9e6ee288227ffed2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc1NzIwNg==", "url": "https://github.com/apache/flink/pull/13443#discussion_r493757206", "bodyText": "The thing though is, this \"proxy\" is used exclusively in the a private method of the InternalTimerServiceManagerImpl and is specific for that particular implementation. Therefore I think it is fine to use the *impl calss directly.", "author": "dawidwys", "createdAt": "2020-09-23T17:14:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1ODE0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1ODk0MQ==", "url": "https://github.com/apache/flink/pull/13443#discussion_r493658941", "bodyText": "Is this comment correct ?", "author": "kl0u", "createdAt": "2020-09-23T14:53:02Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/InternalTimeServiceManager.java", "diffHunk": "@@ -19,214 +19,62 @@\n package org.apache.flink.streaming.api.operators;\n \n import org.apache.flink.annotation.Internal;\n-import org.apache.flink.annotation.VisibleForTesting;\n import org.apache.flink.api.common.typeutils.TypeSerializer;\n-import org.apache.flink.core.memory.DataOutputView;\n-import org.apache.flink.core.memory.DataOutputViewStreamWrapper;\n-import org.apache.flink.runtime.state.KeyGroupRange;\n-import org.apache.flink.runtime.state.KeyGroupedInternalPriorityQueue;\n-import org.apache.flink.runtime.state.KeyGroupsList;\n-import org.apache.flink.runtime.state.KeyedStateBackend;\n-import org.apache.flink.runtime.state.KeyedStateCheckpointOutputStream;\n-import org.apache.flink.runtime.state.PriorityQueueSetFactory;\n+import org.apache.flink.runtime.state.CheckpointableKeyedStateBackend;\n+import org.apache.flink.runtime.state.KeyGroupStatePartitionStreamProvider;\n import org.apache.flink.runtime.state.StateSnapshotContext;\n import org.apache.flink.streaming.api.watermark.Watermark;\n import org.apache.flink.streaming.runtime.tasks.ProcessingTimeService;\n-import org.apache.flink.util.Preconditions;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import static org.apache.flink.util.Preconditions.checkNotNull;\n \n /**\n  * An entity keeping all the time-related services available to all operators extending the\n- * {@link AbstractStreamOperator}. Right now, this is only a\n- * {@link InternalTimerServiceImpl timer services}.\n+ * {@link AbstractStreamOperator} or {@link AbstractStreamOperatorV2}.\n  *\n  * <b>NOTE:</b> These services are only available to keyed operators.\n  *\n  * @param <K> The type of keys used for the timers and the registry.\n  */\n @Internal\n-public class InternalTimeServiceManager<K> {\n-\tprotected static final Logger LOG = LoggerFactory.getLogger(InternalTimeServiceManager.class);\n-\n-\t@VisibleForTesting\n-\tstatic final String TIMER_STATE_PREFIX = \"_timer_state\";\n-\t@VisibleForTesting\n-\tstatic final String PROCESSING_TIMER_PREFIX = TIMER_STATE_PREFIX + \"/processing_\";\n-\t@VisibleForTesting\n-\tstatic final String EVENT_TIMER_PREFIX = TIMER_STATE_PREFIX + \"/event_\";\n-\n-\tprivate final KeyGroupRange localKeyGroupRange;\n-\tprivate final KeyContext keyContext;\n-\n-\tprivate final PriorityQueueSetFactory priorityQueueSetFactory;\n-\tprivate final ProcessingTimeService processingTimeService;\n-\n-\tprivate final Map<String, InternalTimerServiceImpl<K, ?>> timerServices;\n-\n-\tprivate final boolean useLegacySynchronousSnapshots;\n-\n-\tInternalTimeServiceManager(\n-\t\t\tKeyGroupRange localKeyGroupRange,\n-\t\t\tKeyContext keyContext,\n-\t\t\tPriorityQueueSetFactory priorityQueueSetFactory,\n-\t\t\tProcessingTimeService processingTimeService,\n-\t\t\tboolean useLegacySynchronousSnapshots) {\n-\n-\t\tthis.localKeyGroupRange = Preconditions.checkNotNull(localKeyGroupRange);\n-\t\tthis.priorityQueueSetFactory = Preconditions.checkNotNull(priorityQueueSetFactory);\n-\t\tthis.keyContext = Preconditions.checkNotNull(keyContext);\n-\t\tthis.processingTimeService = Preconditions.checkNotNull(processingTimeService);\n-\t\tthis.useLegacySynchronousSnapshots = useLegacySynchronousSnapshots;\n-\n-\t\tthis.timerServices = new HashMap<>();\n-\t}\n-\n-\tpublic <N> InternalTimerService<N> getInternalTimerService(\n-\t\t\tString name,\n-\t\t\tTypeSerializer<N> namespaceSerializer,\n-\t\t\tTriggerable<K, N> triggerable,\n-\t\t\tKeyedStateBackend<K> keyedStateBackend) {\n-\t\tcheckNotNull(keyedStateBackend, \"Timers can only be used on keyed operators.\");\n-\n-\t\tTypeSerializer<K> keySerializer = keyedStateBackend.getKeySerializer();\n-\t\t// the following casting is to overcome type restrictions.\n-\t\tTimerSerializer<K, N> timerSerializer = new TimerSerializer<>(keySerializer, namespaceSerializer);\n-\t\treturn getInternalTimerService(name, timerSerializer, triggerable);\n-\t}\n-\n-\tpublic <N> InternalTimerService<N> getInternalTimerService(\n+public interface InternalTimeServiceManager<K> {\n+\t/**\n+\t * Creates an {@link InternalTimerService} for handling a group of timers identified by\n+\t * the given {@code name}. The timers are scoped to a key and namespace.\n+\t *\n+\t * <p>When the timer is due it will call the given {@link Triggerable}.\n+\t */\n+\t<N> InternalTimerService<N> getInternalTimerService(\n \t\tString name,\n-\t\tTimerSerializer<K, N> timerSerializer,\n-\t\tTriggerable<K, N> triggerable) {\n-\n-\t\tInternalTimerServiceImpl<K, N> timerService = registerOrGetTimerService(name, timerSerializer);\n-\n-\t\ttimerService.startTimerService(\n-\t\t\ttimerSerializer.getKeySerializer(),\n-\t\t\ttimerSerializer.getNamespaceSerializer(),\n-\t\t\ttriggerable);\n-\n-\t\treturn timerService;\n-\t}\n-\n-\t@SuppressWarnings(\"unchecked\")\n-\t<N> InternalTimerServiceImpl<K, N> registerOrGetTimerService(String name, TimerSerializer<K, N> timerSerializer) {\n-\t\tInternalTimerServiceImpl<K, N> timerService = (InternalTimerServiceImpl<K, N>) timerServices.get(name);\n-\t\tif (timerService == null) {\n-\n-\t\t\ttimerService = new InternalTimerServiceImpl<>(\n-\t\t\t\tlocalKeyGroupRange,\n-\t\t\t\tkeyContext,\n-\t\t\t\tprocessingTimeService,\n-\t\t\t\tcreateTimerPriorityQueue(PROCESSING_TIMER_PREFIX + name, timerSerializer),\n-\t\t\t\tcreateTimerPriorityQueue(EVENT_TIMER_PREFIX + name, timerSerializer));\n-\n-\t\t\ttimerServices.put(name, timerService);\n-\t\t}\n-\t\treturn timerService;\n-\t}\n-\n-\tMap<String, InternalTimerServiceImpl<K, ?>> getRegisteredTimerServices() {\n-\t\treturn Collections.unmodifiableMap(timerServices);\n-\t}\n-\n-\tprivate <N> KeyGroupedInternalPriorityQueue<TimerHeapInternalTimer<K, N>> createTimerPriorityQueue(\n-\t\tString name,\n-\t\tTimerSerializer<K, N> timerSerializer) {\n-\t\treturn priorityQueueSetFactory.create(\n-\t\t\tname,\n-\t\t\ttimerSerializer);\n-\t}\n-\n-\tpublic void advanceWatermark(Watermark watermark) throws Exception {\n-\t\tfor (InternalTimerServiceImpl<?, ?> service : timerServices.values()) {\n-\t\t\tservice.advanceWatermark(watermark.getTimestamp());\n-\t\t}\n-\t}\n-\n-\t//////////////////\t\t\t\tFault Tolerance Methods\t\t\t\t///////////////////\n-\n-\tpublic void snapshotState(StateSnapshotContext context, String operatorName) throws Exception {\n-\t\t//TODO all of this can be removed once heap-based timers are integrated with RocksDB incremental snapshots\n-\t\tif (useLegacySynchronousSnapshots) {\n-\t\t\tKeyedStateCheckpointOutputStream out;\n-\t\t\ttry {\n-\t\t\t\tout = context.getRawKeyedOperatorStateOutput();\n-\t\t\t} catch (Exception exception) {\n-\t\t\t\tthrow new Exception(\"Could not open raw keyed operator state stream for \" +\n-\t\t\t\t\toperatorName + '.', exception);\n-\t\t\t}\n-\n-\t\t\ttry {\n-\t\t\t\tKeyGroupsList allKeyGroups = out.getKeyGroupList();\n-\t\t\t\tfor (int keyGroupIdx : allKeyGroups) {\n-\t\t\t\t\tout.startNewKeyGroup(keyGroupIdx);\n-\n-\t\t\t\t\tsnapshotStateForKeyGroup(\n-\t\t\t\t\t\tnew DataOutputViewStreamWrapper(out), keyGroupIdx);\n-\t\t\t\t}\n-\t\t\t} catch (Exception exception) {\n-\t\t\t\tthrow new Exception(\"Could not write timer service of \" + operatorName +\n-\t\t\t\t\t\" to checkpoint state stream.\", exception);\n-\t\t\t} finally {\n-\t\t\t\ttry {\n-\t\t\t\t\tout.close();\n-\t\t\t\t} catch (Exception closeException) {\n-\t\t\t\t\tLOG.warn(\"Could not close raw keyed operator state stream for {}. This \" +\n-\t\t\t\t\t\t\"might have prevented deleting some state data.\", operatorName, closeException);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate void snapshotStateForKeyGroup(DataOutputView stream, int keyGroupIdx) throws IOException {\n-\t\tInternalTimerServiceSerializationProxy<K> serializationProxy =\n-\t\t\tnew InternalTimerServiceSerializationProxy<>(this, keyGroupIdx);\n-\n-\t\tserializationProxy.write(stream);\n-\t}\n-\n-\tpublic void restoreStateForKeyGroup(\n-\t\t\tInputStream stream,\n-\t\t\tint keyGroupIdx,\n-\t\t\tClassLoader userCodeClassLoader) throws IOException {\n-\n-\t\tInternalTimerServiceSerializationProxy<K> serializationProxy =\n-\t\t\tnew InternalTimerServiceSerializationProxy<>(\n-\t\t\t\tthis,\n-\t\t\t\tuserCodeClassLoader,\n-\t\t\t\tkeyGroupIdx);\n-\n-\t\tserializationProxy.read(stream);\n-\t}\n-\n-\t////////////////////\t\t\tMethods used ONLY IN TESTS\t\t\t\t////////////////////\n-\n-\t@VisibleForTesting\n-\tpublic int numProcessingTimeTimers() {\n-\t\tint count = 0;\n-\t\tfor (InternalTimerServiceImpl<?, ?> timerService : timerServices.values()) {\n-\t\t\tcount += timerService.numProcessingTimeTimers();\n-\t\t}\n-\t\treturn count;\n-\t}\n-\n-\t@VisibleForTesting\n-\tpublic int numEventTimeTimers() {\n-\t\tint count = 0;\n-\t\tfor (InternalTimerServiceImpl<?, ?> timerService : timerServices.values()) {\n-\t\t\tcount += timerService.numEventTimeTimers();\n-\t\t}\n-\t\treturn count;\n+\t\tTypeSerializer<K> keySerializer,\n+\t\tTypeSerializer<N> namespaceSerializer,\n+\t\tTriggerable<K, N> triggerable);\n+\n+\t/**\n+\t * It advances the Watermark of all managed {@link InternalTimerService timer services},\n+\t * potentially firing the event time timers.\n+\t */\n+\tvoid advanceWatermark(Watermark watermark) throws Exception;\n+\n+\t/**\n+\t * Snapshots the timers in the keyed state.\n+\t *\n+\t * <p><b>TODO:</b> This can be removed once heap-based timers are integrated with RocksDB\n+\t * incremental snapshots.\n+\t */\n+\tvoid snapshotState(\n+\t\tStateSnapshotContext context,\n+\t\tString operatorName) throws Exception;\n+\n+\t/**\n+\t * A provider pattern for creating an instance of a {@link InternalTimeServiceManager}.\n+\t * Allows substituting the manager that will be used in the runtime.\n+\t */\n+\t@FunctionalInterface\n+\tinterface Provider {\n+\t\t<K> InternalTimeServiceManager<K> create(\n+\t\t\tCheckpointableKeyedStateBackend<K> keyedStatedBackend,\n+\t\t\tClassLoader userClassloader,\n+\t\t\tKeyContext keyContext, //the operator", "originalCommit": "f296a95b73f36126203e2cbe9e6ee288227ffed2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc1NDE5Mw==", "url": "https://github.com/apache/flink/pull/13443#discussion_r493754193", "bodyText": "actually it is (in the implementation) ;), but true it is misleading in the interface", "author": "dawidwys", "createdAt": "2020-09-23T17:09:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1ODk0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1OTQxMw==", "url": "https://github.com/apache/flink/pull/13443#discussion_r493659413", "bodyText": "Is this comment correct?", "author": "kl0u", "createdAt": "2020-09-23T14:53:35Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/InternalTimeServiceManagerImpl.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.operators;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.api.common.typeutils.TypeSerializer;\n+import org.apache.flink.core.memory.DataOutputView;\n+import org.apache.flink.core.memory.DataOutputViewStreamWrapper;\n+import org.apache.flink.runtime.state.AbstractKeyedStateBackend;\n+import org.apache.flink.runtime.state.CheckpointableKeyedStateBackend;\n+import org.apache.flink.runtime.state.KeyGroupRange;\n+import org.apache.flink.runtime.state.KeyGroupStatePartitionStreamProvider;\n+import org.apache.flink.runtime.state.KeyGroupedInternalPriorityQueue;\n+import org.apache.flink.runtime.state.KeyGroupsList;\n+import org.apache.flink.runtime.state.KeyedStateCheckpointOutputStream;\n+import org.apache.flink.runtime.state.PriorityQueueSetFactory;\n+import org.apache.flink.runtime.state.StateSnapshotContext;\n+import org.apache.flink.streaming.api.watermark.Watermark;\n+import org.apache.flink.streaming.runtime.tasks.ProcessingTimeService;\n+import org.apache.flink.util.Preconditions;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+\n+/**\n+ * An entity keeping all the time-related services available to all operators extending the\n+ * {@link AbstractStreamOperator}. Right now, this is only a\n+ * {@link InternalTimerServiceImpl timer services}.\n+ *\n+ * <b>NOTE:</b> These services are only available to keyed operators.\n+ *\n+ * @param <K> The type of keys used for the timers and the registry.\n+ */\n+@Internal\n+public class InternalTimeServiceManagerImpl<K> implements InternalTimeServiceManager<K> {\n+\tprotected static final Logger LOG = LoggerFactory.getLogger(InternalTimeServiceManagerImpl.class);\n+\n+\t@VisibleForTesting\n+\tstatic final String TIMER_STATE_PREFIX = \"_timer_state\";\n+\t@VisibleForTesting\n+\tstatic final String PROCESSING_TIMER_PREFIX = TIMER_STATE_PREFIX + \"/processing_\";\n+\t@VisibleForTesting\n+\tstatic final String EVENT_TIMER_PREFIX = TIMER_STATE_PREFIX + \"/event_\";\n+\n+\tprivate final KeyGroupRange localKeyGroupRange;\n+\tprivate final KeyContext keyContext;\n+\n+\tprivate final PriorityQueueSetFactory priorityQueueSetFactory;\n+\tprivate final ProcessingTimeService processingTimeService;\n+\n+\tprivate final Map<String, InternalTimerServiceImpl<K, ?>> timerServices;\n+\n+\tprivate final boolean useLegacySynchronousSnapshots;\n+\n+\tprivate InternalTimeServiceManagerImpl(\n+\t\tKeyGroupRange localKeyGroupRange,\n+\t\tKeyContext keyContext,\n+\t\tPriorityQueueSetFactory priorityQueueSetFactory,\n+\t\tProcessingTimeService processingTimeService, boolean useLegacySynchronousSnapshots) {\n+\n+\t\tthis.localKeyGroupRange = Preconditions.checkNotNull(localKeyGroupRange);\n+\t\tthis.priorityQueueSetFactory = Preconditions.checkNotNull(priorityQueueSetFactory);\n+\t\tthis.keyContext = Preconditions.checkNotNull(keyContext);\n+\t\tthis.processingTimeService = Preconditions.checkNotNull(processingTimeService);\n+\t\tthis.useLegacySynchronousSnapshots = useLegacySynchronousSnapshots;\n+\n+\t\tthis.timerServices = new HashMap<>();\n+\t}\n+\n+\t/**\n+\t * A factory method for creating the {@link InternalTimeServiceManagerImpl}.\n+\t *\n+\t * <p><b>IMPORTANT:</b> Keep in sync with {@link InternalTimeServiceManager.Provider}.\n+\t */\n+\tpublic static <K> InternalTimeServiceManagerImpl<K> create(\n+\t\t\tCheckpointableKeyedStateBackend<K> keyedStatedBackend,\n+\t\t\tClassLoader userClassloader,\n+\t\t\tKeyContext keyContext, //the operator", "originalCommit": "f296a95b73f36126203e2cbe9e6ee288227ffed2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1OTcyOA==", "url": "https://github.com/apache/flink/pull/13443#discussion_r493659728", "bodyText": "All the args can fit in the same line here.", "author": "kl0u", "createdAt": "2020-09-23T14:54:00Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/InternalTimeServiceManagerImpl.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.operators;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.api.common.typeutils.TypeSerializer;\n+import org.apache.flink.core.memory.DataOutputView;\n+import org.apache.flink.core.memory.DataOutputViewStreamWrapper;\n+import org.apache.flink.runtime.state.AbstractKeyedStateBackend;\n+import org.apache.flink.runtime.state.CheckpointableKeyedStateBackend;\n+import org.apache.flink.runtime.state.KeyGroupRange;\n+import org.apache.flink.runtime.state.KeyGroupStatePartitionStreamProvider;\n+import org.apache.flink.runtime.state.KeyGroupedInternalPriorityQueue;\n+import org.apache.flink.runtime.state.KeyGroupsList;\n+import org.apache.flink.runtime.state.KeyedStateCheckpointOutputStream;\n+import org.apache.flink.runtime.state.PriorityQueueSetFactory;\n+import org.apache.flink.runtime.state.StateSnapshotContext;\n+import org.apache.flink.streaming.api.watermark.Watermark;\n+import org.apache.flink.streaming.runtime.tasks.ProcessingTimeService;\n+import org.apache.flink.util.Preconditions;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+\n+/**\n+ * An entity keeping all the time-related services available to all operators extending the\n+ * {@link AbstractStreamOperator}. Right now, this is only a\n+ * {@link InternalTimerServiceImpl timer services}.\n+ *\n+ * <b>NOTE:</b> These services are only available to keyed operators.\n+ *\n+ * @param <K> The type of keys used for the timers and the registry.\n+ */\n+@Internal\n+public class InternalTimeServiceManagerImpl<K> implements InternalTimeServiceManager<K> {\n+\tprotected static final Logger LOG = LoggerFactory.getLogger(InternalTimeServiceManagerImpl.class);\n+\n+\t@VisibleForTesting\n+\tstatic final String TIMER_STATE_PREFIX = \"_timer_state\";\n+\t@VisibleForTesting\n+\tstatic final String PROCESSING_TIMER_PREFIX = TIMER_STATE_PREFIX + \"/processing_\";\n+\t@VisibleForTesting\n+\tstatic final String EVENT_TIMER_PREFIX = TIMER_STATE_PREFIX + \"/event_\";\n+\n+\tprivate final KeyGroupRange localKeyGroupRange;\n+\tprivate final KeyContext keyContext;\n+\n+\tprivate final PriorityQueueSetFactory priorityQueueSetFactory;\n+\tprivate final ProcessingTimeService processingTimeService;\n+\n+\tprivate final Map<String, InternalTimerServiceImpl<K, ?>> timerServices;\n+\n+\tprivate final boolean useLegacySynchronousSnapshots;\n+\n+\tprivate InternalTimeServiceManagerImpl(\n+\t\tKeyGroupRange localKeyGroupRange,\n+\t\tKeyContext keyContext,\n+\t\tPriorityQueueSetFactory priorityQueueSetFactory,\n+\t\tProcessingTimeService processingTimeService, boolean useLegacySynchronousSnapshots) {\n+\n+\t\tthis.localKeyGroupRange = Preconditions.checkNotNull(localKeyGroupRange);\n+\t\tthis.priorityQueueSetFactory = Preconditions.checkNotNull(priorityQueueSetFactory);\n+\t\tthis.keyContext = Preconditions.checkNotNull(keyContext);\n+\t\tthis.processingTimeService = Preconditions.checkNotNull(processingTimeService);\n+\t\tthis.useLegacySynchronousSnapshots = useLegacySynchronousSnapshots;\n+\n+\t\tthis.timerServices = new HashMap<>();\n+\t}\n+\n+\t/**\n+\t * A factory method for creating the {@link InternalTimeServiceManagerImpl}.\n+\t *\n+\t * <p><b>IMPORTANT:</b> Keep in sync with {@link InternalTimeServiceManager.Provider}.\n+\t */\n+\tpublic static <K> InternalTimeServiceManagerImpl<K> create(\n+\t\t\tCheckpointableKeyedStateBackend<K> keyedStatedBackend,\n+\t\t\tClassLoader userClassloader,\n+\t\t\tKeyContext keyContext, //the operator\n+\t\t\tProcessingTimeService processingTimeService,\n+\t\t\tIterable<KeyGroupStatePartitionStreamProvider> rawKeyedStates) throws Exception {\n+\n+\t\tif (keyedStatedBackend == null) {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tfinal KeyGroupRange keyGroupRange = keyedStatedBackend.getKeyGroupRange();\n+\t\tfinal boolean requiresSnapshotLegacyTimers = keyedStatedBackend instanceof AbstractKeyedStateBackend &&\n+\t\t\t((AbstractKeyedStateBackend<K>) keyedStatedBackend).requiresLegacySynchronousTimerSnapshots();\n+\n+\t\tfinal InternalTimeServiceManagerImpl<K> timeServiceManager = new InternalTimeServiceManagerImpl<>(\n+\t\t\tkeyGroupRange,\n+\t\t\tkeyContext,\n+\t\t\tkeyedStatedBackend,\n+\t\t\tprocessingTimeService,\n+\t\t\trequiresSnapshotLegacyTimers);\n+\n+\t\t// and then initialize the timer services\n+\t\tfor (KeyGroupStatePartitionStreamProvider streamProvider : rawKeyedStates) {\n+\t\t\tint keyGroupIdx = streamProvider.getKeyGroupId();\n+\n+\t\t\tPreconditions.checkArgument(keyGroupRange.contains(keyGroupIdx),\n+\t\t\t\t\"Key Group \" + keyGroupIdx + \" does not belong to the local range.\");\n+\n+\t\t\ttimeServiceManager.restoreStateForKeyGroup(\n+\t\t\t\tstreamProvider.getStream(),\n+\t\t\t\tkeyGroupIdx,\n+\t\t\t\tuserClassloader);\n+\t\t}\n+\n+\t\treturn timeServiceManager;\n+\t}\n+\n+\t@Override\n+\tpublic <N> InternalTimerService<N> getInternalTimerService(\n+\t\t\tString name,\n+\t\t\tTypeSerializer<K> keySerializer,\n+\t\t\tTypeSerializer<N> namespaceSerializer,\n+\t\t\tTriggerable<K, N> triggerable) {\n+\t\tcheckNotNull(keySerializer, \"Timers can only be used on keyed operators.\");\n+\n+\t\t// the following casting is to overcome type restrictions.\n+\t\tTimerSerializer<K, N> timerSerializer = new TimerSerializer<>(keySerializer, namespaceSerializer);\n+\n+\t\tInternalTimerServiceImpl<K, N> timerService = registerOrGetTimerService(name, timerSerializer);\n+\n+\t\ttimerService.startTimerService(\n+\t\t\ttimerSerializer.getKeySerializer(),\n+\t\t\ttimerSerializer.getNamespaceSerializer(),\n+\t\t\ttriggerable);\n+\n+\t\treturn timerService;\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\t<N> InternalTimerServiceImpl<K, N> registerOrGetTimerService(String name, TimerSerializer<K, N> timerSerializer) {\n+\t\tInternalTimerServiceImpl<K, N> timerService = (InternalTimerServiceImpl<K, N>) timerServices.get(name);\n+\t\tif (timerService == null) {\n+\n+\t\t\ttimerService = new InternalTimerServiceImpl<>(\n+\t\t\t\tlocalKeyGroupRange,\n+\t\t\t\tkeyContext,\n+\t\t\t\tprocessingTimeService,\n+\t\t\t\tcreateTimerPriorityQueue(PROCESSING_TIMER_PREFIX + name, timerSerializer),\n+\t\t\t\tcreateTimerPriorityQueue(EVENT_TIMER_PREFIX + name, timerSerializer));\n+\n+\t\t\ttimerServices.put(name, timerService);\n+\t\t}\n+\t\treturn timerService;\n+\t}\n+\n+\tMap<String, InternalTimerServiceImpl<K, ?>> getRegisteredTimerServices() {\n+\t\treturn Collections.unmodifiableMap(timerServices);\n+\t}\n+\n+\tprivate <N> KeyGroupedInternalPriorityQueue<TimerHeapInternalTimer<K, N>> createTimerPriorityQueue(\n+\t\tString name,", "originalCommit": "f296a95b73f36126203e2cbe9e6ee288227ffed2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc1ODc0OQ==", "url": "https://github.com/apache/flink/pull/13443#discussion_r493758749", "bodyText": "Personally I prefer:\n\nEither all arguments fit in a single line with the function name (whole signature in a single line)\nIf not 1. -> chop down all parameters.\n\nI will add an identation though.", "author": "dawidwys", "createdAt": "2020-09-23T17:16:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1OTcyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgwNDkxOQ==", "url": "https://github.com/apache/flink/pull/13443#discussion_r494804919", "bodyText": "Yes, I was proposing you option 1.", "author": "kl0u", "createdAt": "2020-09-25T07:39:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1OTcyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgwNjYxNQ==", "url": "https://github.com/apache/flink/pull/13443#discussion_r494806615", "bodyText": "The thing is it does not fit in one line. ;)\nIt does in the line above which I fixed.", "author": "dawidwys", "createdAt": "2020-09-25T07:43:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1OTcyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1OTg2MA==", "url": "https://github.com/apache/flink/pull/13443#discussion_r493659860", "bodyText": "Same here.", "author": "kl0u", "createdAt": "2020-09-23T14:54:09Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/InternalTimeServiceManagerImpl.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.operators;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.api.common.typeutils.TypeSerializer;\n+import org.apache.flink.core.memory.DataOutputView;\n+import org.apache.flink.core.memory.DataOutputViewStreamWrapper;\n+import org.apache.flink.runtime.state.AbstractKeyedStateBackend;\n+import org.apache.flink.runtime.state.CheckpointableKeyedStateBackend;\n+import org.apache.flink.runtime.state.KeyGroupRange;\n+import org.apache.flink.runtime.state.KeyGroupStatePartitionStreamProvider;\n+import org.apache.flink.runtime.state.KeyGroupedInternalPriorityQueue;\n+import org.apache.flink.runtime.state.KeyGroupsList;\n+import org.apache.flink.runtime.state.KeyedStateCheckpointOutputStream;\n+import org.apache.flink.runtime.state.PriorityQueueSetFactory;\n+import org.apache.flink.runtime.state.StateSnapshotContext;\n+import org.apache.flink.streaming.api.watermark.Watermark;\n+import org.apache.flink.streaming.runtime.tasks.ProcessingTimeService;\n+import org.apache.flink.util.Preconditions;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+\n+/**\n+ * An entity keeping all the time-related services available to all operators extending the\n+ * {@link AbstractStreamOperator}. Right now, this is only a\n+ * {@link InternalTimerServiceImpl timer services}.\n+ *\n+ * <b>NOTE:</b> These services are only available to keyed operators.\n+ *\n+ * @param <K> The type of keys used for the timers and the registry.\n+ */\n+@Internal\n+public class InternalTimeServiceManagerImpl<K> implements InternalTimeServiceManager<K> {\n+\tprotected static final Logger LOG = LoggerFactory.getLogger(InternalTimeServiceManagerImpl.class);\n+\n+\t@VisibleForTesting\n+\tstatic final String TIMER_STATE_PREFIX = \"_timer_state\";\n+\t@VisibleForTesting\n+\tstatic final String PROCESSING_TIMER_PREFIX = TIMER_STATE_PREFIX + \"/processing_\";\n+\t@VisibleForTesting\n+\tstatic final String EVENT_TIMER_PREFIX = TIMER_STATE_PREFIX + \"/event_\";\n+\n+\tprivate final KeyGroupRange localKeyGroupRange;\n+\tprivate final KeyContext keyContext;\n+\n+\tprivate final PriorityQueueSetFactory priorityQueueSetFactory;\n+\tprivate final ProcessingTimeService processingTimeService;\n+\n+\tprivate final Map<String, InternalTimerServiceImpl<K, ?>> timerServices;\n+\n+\tprivate final boolean useLegacySynchronousSnapshots;\n+\n+\tprivate InternalTimeServiceManagerImpl(\n+\t\tKeyGroupRange localKeyGroupRange,\n+\t\tKeyContext keyContext,\n+\t\tPriorityQueueSetFactory priorityQueueSetFactory,\n+\t\tProcessingTimeService processingTimeService, boolean useLegacySynchronousSnapshots) {\n+\n+\t\tthis.localKeyGroupRange = Preconditions.checkNotNull(localKeyGroupRange);\n+\t\tthis.priorityQueueSetFactory = Preconditions.checkNotNull(priorityQueueSetFactory);\n+\t\tthis.keyContext = Preconditions.checkNotNull(keyContext);\n+\t\tthis.processingTimeService = Preconditions.checkNotNull(processingTimeService);\n+\t\tthis.useLegacySynchronousSnapshots = useLegacySynchronousSnapshots;\n+\n+\t\tthis.timerServices = new HashMap<>();\n+\t}\n+\n+\t/**\n+\t * A factory method for creating the {@link InternalTimeServiceManagerImpl}.\n+\t *\n+\t * <p><b>IMPORTANT:</b> Keep in sync with {@link InternalTimeServiceManager.Provider}.\n+\t */\n+\tpublic static <K> InternalTimeServiceManagerImpl<K> create(\n+\t\t\tCheckpointableKeyedStateBackend<K> keyedStatedBackend,\n+\t\t\tClassLoader userClassloader,\n+\t\t\tKeyContext keyContext, //the operator\n+\t\t\tProcessingTimeService processingTimeService,\n+\t\t\tIterable<KeyGroupStatePartitionStreamProvider> rawKeyedStates) throws Exception {\n+\n+\t\tif (keyedStatedBackend == null) {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tfinal KeyGroupRange keyGroupRange = keyedStatedBackend.getKeyGroupRange();\n+\t\tfinal boolean requiresSnapshotLegacyTimers = keyedStatedBackend instanceof AbstractKeyedStateBackend &&\n+\t\t\t((AbstractKeyedStateBackend<K>) keyedStatedBackend).requiresLegacySynchronousTimerSnapshots();\n+\n+\t\tfinal InternalTimeServiceManagerImpl<K> timeServiceManager = new InternalTimeServiceManagerImpl<>(\n+\t\t\tkeyGroupRange,\n+\t\t\tkeyContext,\n+\t\t\tkeyedStatedBackend,\n+\t\t\tprocessingTimeService,\n+\t\t\trequiresSnapshotLegacyTimers);\n+\n+\t\t// and then initialize the timer services\n+\t\tfor (KeyGroupStatePartitionStreamProvider streamProvider : rawKeyedStates) {\n+\t\t\tint keyGroupIdx = streamProvider.getKeyGroupId();\n+\n+\t\t\tPreconditions.checkArgument(keyGroupRange.contains(keyGroupIdx),\n+\t\t\t\t\"Key Group \" + keyGroupIdx + \" does not belong to the local range.\");\n+\n+\t\t\ttimeServiceManager.restoreStateForKeyGroup(\n+\t\t\t\tstreamProvider.getStream(),\n+\t\t\t\tkeyGroupIdx,\n+\t\t\t\tuserClassloader);\n+\t\t}\n+\n+\t\treturn timeServiceManager;\n+\t}\n+\n+\t@Override\n+\tpublic <N> InternalTimerService<N> getInternalTimerService(\n+\t\t\tString name,\n+\t\t\tTypeSerializer<K> keySerializer,\n+\t\t\tTypeSerializer<N> namespaceSerializer,\n+\t\t\tTriggerable<K, N> triggerable) {\n+\t\tcheckNotNull(keySerializer, \"Timers can only be used on keyed operators.\");\n+\n+\t\t// the following casting is to overcome type restrictions.\n+\t\tTimerSerializer<K, N> timerSerializer = new TimerSerializer<>(keySerializer, namespaceSerializer);\n+\n+\t\tInternalTimerServiceImpl<K, N> timerService = registerOrGetTimerService(name, timerSerializer);\n+\n+\t\ttimerService.startTimerService(\n+\t\t\ttimerSerializer.getKeySerializer(),\n+\t\t\ttimerSerializer.getNamespaceSerializer(),\n+\t\t\ttriggerable);\n+\n+\t\treturn timerService;\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\t<N> InternalTimerServiceImpl<K, N> registerOrGetTimerService(String name, TimerSerializer<K, N> timerSerializer) {\n+\t\tInternalTimerServiceImpl<K, N> timerService = (InternalTimerServiceImpl<K, N>) timerServices.get(name);\n+\t\tif (timerService == null) {\n+\n+\t\t\ttimerService = new InternalTimerServiceImpl<>(\n+\t\t\t\tlocalKeyGroupRange,\n+\t\t\t\tkeyContext,\n+\t\t\t\tprocessingTimeService,\n+\t\t\t\tcreateTimerPriorityQueue(PROCESSING_TIMER_PREFIX + name, timerSerializer),\n+\t\t\t\tcreateTimerPriorityQueue(EVENT_TIMER_PREFIX + name, timerSerializer));\n+\n+\t\t\ttimerServices.put(name, timerService);\n+\t\t}\n+\t\treturn timerService;\n+\t}\n+\n+\tMap<String, InternalTimerServiceImpl<K, ?>> getRegisteredTimerServices() {\n+\t\treturn Collections.unmodifiableMap(timerServices);\n+\t}\n+\n+\tprivate <N> KeyGroupedInternalPriorityQueue<TimerHeapInternalTimer<K, N>> createTimerPriorityQueue(\n+\t\tString name,\n+\t\tTimerSerializer<K, N> timerSerializer) {\n+\t\treturn priorityQueueSetFactory.create(\n+\t\t\tname,", "originalCommit": "f296a95b73f36126203e2cbe9e6ee288227ffed2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgwNjY1MA==", "url": "https://github.com/apache/flink/pull/13443#discussion_r494806650", "bodyText": "updated.", "author": "dawidwys", "createdAt": "2020-09-25T07:43:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1OTg2MA=="}], "type": "inlineReview"}, {"oid": "6838ec5826fd80786bcf3577c71b8e5ed66034a6", "url": "https://github.com/apache/flink/commit/6838ec5826fd80786bcf3577c71b8e5ed66034a6", "message": "Comments addressed", "committedDate": "2020-09-23T17:17:51Z", "type": "forcePushed"}, {"oid": "4542d771f6e20366b3937386707e2774c5a316d1", "url": "https://github.com/apache/flink/commit/4542d771f6e20366b3937386707e2774c5a316d1", "message": "Comments addressed", "committedDate": "2020-09-24T06:41:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE0MjAyMw==", "url": "https://github.com/apache/flink/pull/13443#discussion_r494142023", "bodyText": "Maybe When a timer fires the given {@link Triggerable} will be invoked..", "author": "aljoscha", "createdAt": "2020-09-24T08:42:07Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/InternalTimeServiceManager.java", "diffHunk": "@@ -19,214 +19,62 @@\n package org.apache.flink.streaming.api.operators;\n \n import org.apache.flink.annotation.Internal;\n-import org.apache.flink.annotation.VisibleForTesting;\n import org.apache.flink.api.common.typeutils.TypeSerializer;\n-import org.apache.flink.core.memory.DataOutputView;\n-import org.apache.flink.core.memory.DataOutputViewStreamWrapper;\n-import org.apache.flink.runtime.state.KeyGroupRange;\n-import org.apache.flink.runtime.state.KeyGroupedInternalPriorityQueue;\n-import org.apache.flink.runtime.state.KeyGroupsList;\n-import org.apache.flink.runtime.state.KeyedStateBackend;\n-import org.apache.flink.runtime.state.KeyedStateCheckpointOutputStream;\n-import org.apache.flink.runtime.state.PriorityQueueSetFactory;\n+import org.apache.flink.runtime.state.CheckpointableKeyedStateBackend;\n+import org.apache.flink.runtime.state.KeyGroupStatePartitionStreamProvider;\n import org.apache.flink.runtime.state.StateSnapshotContext;\n import org.apache.flink.streaming.api.watermark.Watermark;\n import org.apache.flink.streaming.runtime.tasks.ProcessingTimeService;\n-import org.apache.flink.util.Preconditions;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import static org.apache.flink.util.Preconditions.checkNotNull;\n \n /**\n  * An entity keeping all the time-related services available to all operators extending the\n- * {@link AbstractStreamOperator}. Right now, this is only a\n- * {@link InternalTimerServiceImpl timer services}.\n+ * {@link AbstractStreamOperator} or {@link AbstractStreamOperatorV2}.\n  *\n  * <b>NOTE:</b> These services are only available to keyed operators.\n  *\n  * @param <K> The type of keys used for the timers and the registry.\n  */\n @Internal\n-public class InternalTimeServiceManager<K> {\n-\tprotected static final Logger LOG = LoggerFactory.getLogger(InternalTimeServiceManager.class);\n-\n-\t@VisibleForTesting\n-\tstatic final String TIMER_STATE_PREFIX = \"_timer_state\";\n-\t@VisibleForTesting\n-\tstatic final String PROCESSING_TIMER_PREFIX = TIMER_STATE_PREFIX + \"/processing_\";\n-\t@VisibleForTesting\n-\tstatic final String EVENT_TIMER_PREFIX = TIMER_STATE_PREFIX + \"/event_\";\n-\n-\tprivate final KeyGroupRange localKeyGroupRange;\n-\tprivate final KeyContext keyContext;\n-\n-\tprivate final PriorityQueueSetFactory priorityQueueSetFactory;\n-\tprivate final ProcessingTimeService processingTimeService;\n-\n-\tprivate final Map<String, InternalTimerServiceImpl<K, ?>> timerServices;\n-\n-\tprivate final boolean useLegacySynchronousSnapshots;\n-\n-\tInternalTimeServiceManager(\n-\t\t\tKeyGroupRange localKeyGroupRange,\n+public interface InternalTimeServiceManager<K> {\n+\t/**\n+\t * Creates an {@link InternalTimerService} for handling a group of timers identified by\n+\t * the given {@code name}. The timers are scoped to a key and namespace.\n+\t *\n+\t * <p>When the timer is due it will call the given {@link Triggerable}.\n+\t */", "originalCommit": "4542d771f6e20366b3937386707e2774c5a316d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE0MjQ2OA==", "url": "https://github.com/apache/flink/pull/13443#discussion_r494142468", "bodyText": "I think we don't even need to mention the relation to the operators here.", "author": "aljoscha", "createdAt": "2020-09-24T08:42:48Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/InternalTimeServiceManager.java", "diffHunk": "@@ -19,214 +19,62 @@\n package org.apache.flink.streaming.api.operators;\n \n import org.apache.flink.annotation.Internal;\n-import org.apache.flink.annotation.VisibleForTesting;\n import org.apache.flink.api.common.typeutils.TypeSerializer;\n-import org.apache.flink.core.memory.DataOutputView;\n-import org.apache.flink.core.memory.DataOutputViewStreamWrapper;\n-import org.apache.flink.runtime.state.KeyGroupRange;\n-import org.apache.flink.runtime.state.KeyGroupedInternalPriorityQueue;\n-import org.apache.flink.runtime.state.KeyGroupsList;\n-import org.apache.flink.runtime.state.KeyedStateBackend;\n-import org.apache.flink.runtime.state.KeyedStateCheckpointOutputStream;\n-import org.apache.flink.runtime.state.PriorityQueueSetFactory;\n+import org.apache.flink.runtime.state.CheckpointableKeyedStateBackend;\n+import org.apache.flink.runtime.state.KeyGroupStatePartitionStreamProvider;\n import org.apache.flink.runtime.state.StateSnapshotContext;\n import org.apache.flink.streaming.api.watermark.Watermark;\n import org.apache.flink.streaming.runtime.tasks.ProcessingTimeService;\n-import org.apache.flink.util.Preconditions;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import static org.apache.flink.util.Preconditions.checkNotNull;\n \n /**\n  * An entity keeping all the time-related services available to all operators extending the\n- * {@link AbstractStreamOperator}. Right now, this is only a\n- * {@link InternalTimerServiceImpl timer services}.\n+ * {@link AbstractStreamOperator} or {@link AbstractStreamOperatorV2}.", "originalCommit": "4542d771f6e20366b3937386707e2774c5a316d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE0MjgzMA==", "url": "https://github.com/apache/flink/pull/13443#discussion_r494142830", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * It advances the Watermark of all managed {@link InternalTimerService timer services},\n          \n          \n            \n            \t * potentially firing the event time timers.\n          \n          \n            \n            \t * Advances the Watermark of all managed {@link InternalTimerService timer services},\n          \n          \n            \n            \t * potentially firing event time timers.", "author": "aljoscha", "createdAt": "2020-09-24T08:43:24Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/InternalTimeServiceManager.java", "diffHunk": "@@ -19,214 +19,62 @@\n package org.apache.flink.streaming.api.operators;\n \n import org.apache.flink.annotation.Internal;\n-import org.apache.flink.annotation.VisibleForTesting;\n import org.apache.flink.api.common.typeutils.TypeSerializer;\n-import org.apache.flink.core.memory.DataOutputView;\n-import org.apache.flink.core.memory.DataOutputViewStreamWrapper;\n-import org.apache.flink.runtime.state.KeyGroupRange;\n-import org.apache.flink.runtime.state.KeyGroupedInternalPriorityQueue;\n-import org.apache.flink.runtime.state.KeyGroupsList;\n-import org.apache.flink.runtime.state.KeyedStateBackend;\n-import org.apache.flink.runtime.state.KeyedStateCheckpointOutputStream;\n-import org.apache.flink.runtime.state.PriorityQueueSetFactory;\n+import org.apache.flink.runtime.state.CheckpointableKeyedStateBackend;\n+import org.apache.flink.runtime.state.KeyGroupStatePartitionStreamProvider;\n import org.apache.flink.runtime.state.StateSnapshotContext;\n import org.apache.flink.streaming.api.watermark.Watermark;\n import org.apache.flink.streaming.runtime.tasks.ProcessingTimeService;\n-import org.apache.flink.util.Preconditions;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import static org.apache.flink.util.Preconditions.checkNotNull;\n \n /**\n  * An entity keeping all the time-related services available to all operators extending the\n- * {@link AbstractStreamOperator}. Right now, this is only a\n- * {@link InternalTimerServiceImpl timer services}.\n+ * {@link AbstractStreamOperator} or {@link AbstractStreamOperatorV2}.\n  *\n  * <b>NOTE:</b> These services are only available to keyed operators.\n  *\n  * @param <K> The type of keys used for the timers and the registry.\n  */\n @Internal\n-public class InternalTimeServiceManager<K> {\n-\tprotected static final Logger LOG = LoggerFactory.getLogger(InternalTimeServiceManager.class);\n-\n-\t@VisibleForTesting\n-\tstatic final String TIMER_STATE_PREFIX = \"_timer_state\";\n-\t@VisibleForTesting\n-\tstatic final String PROCESSING_TIMER_PREFIX = TIMER_STATE_PREFIX + \"/processing_\";\n-\t@VisibleForTesting\n-\tstatic final String EVENT_TIMER_PREFIX = TIMER_STATE_PREFIX + \"/event_\";\n-\n-\tprivate final KeyGroupRange localKeyGroupRange;\n-\tprivate final KeyContext keyContext;\n-\n-\tprivate final PriorityQueueSetFactory priorityQueueSetFactory;\n-\tprivate final ProcessingTimeService processingTimeService;\n-\n-\tprivate final Map<String, InternalTimerServiceImpl<K, ?>> timerServices;\n-\n-\tprivate final boolean useLegacySynchronousSnapshots;\n-\n-\tInternalTimeServiceManager(\n-\t\t\tKeyGroupRange localKeyGroupRange,\n+public interface InternalTimeServiceManager<K> {\n+\t/**\n+\t * Creates an {@link InternalTimerService} for handling a group of timers identified by\n+\t * the given {@code name}. The timers are scoped to a key and namespace.\n+\t *\n+\t * <p>When the timer is due it will call the given {@link Triggerable}.\n+\t */\n+\t<N> InternalTimerService<N> getInternalTimerService(\n+\t\tString name,\n+\t\tTypeSerializer<K> keySerializer,\n+\t\tTypeSerializer<N> namespaceSerializer,\n+\t\tTriggerable<K, N> triggerable);\n+\n+\t/**\n+\t * It advances the Watermark of all managed {@link InternalTimerService timer services},\n+\t * potentially firing the event time timers.", "originalCommit": "4542d771f6e20366b3937386707e2774c5a316d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE0MzMxMA==", "url": "https://github.com/apache/flink/pull/13443#discussion_r494143310", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Snapshots the timers in the keyed state.\n          \n          \n            \n            \t * Snapshots the timers to keyed state.", "author": "aljoscha", "createdAt": "2020-09-24T08:44:15Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/InternalTimeServiceManager.java", "diffHunk": "@@ -19,214 +19,62 @@\n package org.apache.flink.streaming.api.operators;\n \n import org.apache.flink.annotation.Internal;\n-import org.apache.flink.annotation.VisibleForTesting;\n import org.apache.flink.api.common.typeutils.TypeSerializer;\n-import org.apache.flink.core.memory.DataOutputView;\n-import org.apache.flink.core.memory.DataOutputViewStreamWrapper;\n-import org.apache.flink.runtime.state.KeyGroupRange;\n-import org.apache.flink.runtime.state.KeyGroupedInternalPriorityQueue;\n-import org.apache.flink.runtime.state.KeyGroupsList;\n-import org.apache.flink.runtime.state.KeyedStateBackend;\n-import org.apache.flink.runtime.state.KeyedStateCheckpointOutputStream;\n-import org.apache.flink.runtime.state.PriorityQueueSetFactory;\n+import org.apache.flink.runtime.state.CheckpointableKeyedStateBackend;\n+import org.apache.flink.runtime.state.KeyGroupStatePartitionStreamProvider;\n import org.apache.flink.runtime.state.StateSnapshotContext;\n import org.apache.flink.streaming.api.watermark.Watermark;\n import org.apache.flink.streaming.runtime.tasks.ProcessingTimeService;\n-import org.apache.flink.util.Preconditions;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import static org.apache.flink.util.Preconditions.checkNotNull;\n \n /**\n  * An entity keeping all the time-related services available to all operators extending the\n- * {@link AbstractStreamOperator}. Right now, this is only a\n- * {@link InternalTimerServiceImpl timer services}.\n+ * {@link AbstractStreamOperator} or {@link AbstractStreamOperatorV2}.\n  *\n  * <b>NOTE:</b> These services are only available to keyed operators.\n  *\n  * @param <K> The type of keys used for the timers and the registry.\n  */\n @Internal\n-public class InternalTimeServiceManager<K> {\n-\tprotected static final Logger LOG = LoggerFactory.getLogger(InternalTimeServiceManager.class);\n-\n-\t@VisibleForTesting\n-\tstatic final String TIMER_STATE_PREFIX = \"_timer_state\";\n-\t@VisibleForTesting\n-\tstatic final String PROCESSING_TIMER_PREFIX = TIMER_STATE_PREFIX + \"/processing_\";\n-\t@VisibleForTesting\n-\tstatic final String EVENT_TIMER_PREFIX = TIMER_STATE_PREFIX + \"/event_\";\n-\n-\tprivate final KeyGroupRange localKeyGroupRange;\n-\tprivate final KeyContext keyContext;\n-\n-\tprivate final PriorityQueueSetFactory priorityQueueSetFactory;\n-\tprivate final ProcessingTimeService processingTimeService;\n-\n-\tprivate final Map<String, InternalTimerServiceImpl<K, ?>> timerServices;\n-\n-\tprivate final boolean useLegacySynchronousSnapshots;\n-\n-\tInternalTimeServiceManager(\n-\t\t\tKeyGroupRange localKeyGroupRange,\n+public interface InternalTimeServiceManager<K> {\n+\t/**\n+\t * Creates an {@link InternalTimerService} for handling a group of timers identified by\n+\t * the given {@code name}. The timers are scoped to a key and namespace.\n+\t *\n+\t * <p>When the timer is due it will call the given {@link Triggerable}.\n+\t */\n+\t<N> InternalTimerService<N> getInternalTimerService(\n+\t\tString name,\n+\t\tTypeSerializer<K> keySerializer,\n+\t\tTypeSerializer<N> namespaceSerializer,\n+\t\tTriggerable<K, N> triggerable);\n+\n+\t/**\n+\t * It advances the Watermark of all managed {@link InternalTimerService timer services},\n+\t * potentially firing the event time timers.\n+\t */\n+\tvoid advanceWatermark(Watermark watermark) throws Exception;\n+\n+\t/**\n+\t * Snapshots the timers in the keyed state.", "originalCommit": "4542d771f6e20366b3937386707e2774c5a316d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE0MzQ5OA==", "url": "https://github.com/apache/flink/pull/13443#discussion_r494143498", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t/**\n          \n          \n            \n            \t * A provider pattern for creating an instance of a {@link InternalTimeServiceManager}.\n          \n          \n            \n            \t * Allows substituting the manager that will be used in the runtime.\n          \n          \n            \n            \t */\n          \n          \n            \n            \t/**\n          \n          \n            \n            \t * A provider pattern for creating an instance of a {@link InternalTimeServiceManager}.\n          \n          \n            \n            \t * Allows substituting the manager that will be used at runtime.\n          \n          \n            \n            \t */", "author": "aljoscha", "createdAt": "2020-09-24T08:44:35Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/InternalTimeServiceManager.java", "diffHunk": "@@ -19,214 +19,62 @@\n package org.apache.flink.streaming.api.operators;\n \n import org.apache.flink.annotation.Internal;\n-import org.apache.flink.annotation.VisibleForTesting;\n import org.apache.flink.api.common.typeutils.TypeSerializer;\n-import org.apache.flink.core.memory.DataOutputView;\n-import org.apache.flink.core.memory.DataOutputViewStreamWrapper;\n-import org.apache.flink.runtime.state.KeyGroupRange;\n-import org.apache.flink.runtime.state.KeyGroupedInternalPriorityQueue;\n-import org.apache.flink.runtime.state.KeyGroupsList;\n-import org.apache.flink.runtime.state.KeyedStateBackend;\n-import org.apache.flink.runtime.state.KeyedStateCheckpointOutputStream;\n-import org.apache.flink.runtime.state.PriorityQueueSetFactory;\n+import org.apache.flink.runtime.state.CheckpointableKeyedStateBackend;\n+import org.apache.flink.runtime.state.KeyGroupStatePartitionStreamProvider;\n import org.apache.flink.runtime.state.StateSnapshotContext;\n import org.apache.flink.streaming.api.watermark.Watermark;\n import org.apache.flink.streaming.runtime.tasks.ProcessingTimeService;\n-import org.apache.flink.util.Preconditions;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import static org.apache.flink.util.Preconditions.checkNotNull;\n \n /**\n  * An entity keeping all the time-related services available to all operators extending the\n- * {@link AbstractStreamOperator}. Right now, this is only a\n- * {@link InternalTimerServiceImpl timer services}.\n+ * {@link AbstractStreamOperator} or {@link AbstractStreamOperatorV2}.\n  *\n  * <b>NOTE:</b> These services are only available to keyed operators.\n  *\n  * @param <K> The type of keys used for the timers and the registry.\n  */\n @Internal\n-public class InternalTimeServiceManager<K> {\n-\tprotected static final Logger LOG = LoggerFactory.getLogger(InternalTimeServiceManager.class);\n-\n-\t@VisibleForTesting\n-\tstatic final String TIMER_STATE_PREFIX = \"_timer_state\";\n-\t@VisibleForTesting\n-\tstatic final String PROCESSING_TIMER_PREFIX = TIMER_STATE_PREFIX + \"/processing_\";\n-\t@VisibleForTesting\n-\tstatic final String EVENT_TIMER_PREFIX = TIMER_STATE_PREFIX + \"/event_\";\n-\n-\tprivate final KeyGroupRange localKeyGroupRange;\n-\tprivate final KeyContext keyContext;\n-\n-\tprivate final PriorityQueueSetFactory priorityQueueSetFactory;\n-\tprivate final ProcessingTimeService processingTimeService;\n-\n-\tprivate final Map<String, InternalTimerServiceImpl<K, ?>> timerServices;\n-\n-\tprivate final boolean useLegacySynchronousSnapshots;\n-\n-\tInternalTimeServiceManager(\n-\t\t\tKeyGroupRange localKeyGroupRange,\n+public interface InternalTimeServiceManager<K> {\n+\t/**\n+\t * Creates an {@link InternalTimerService} for handling a group of timers identified by\n+\t * the given {@code name}. The timers are scoped to a key and namespace.\n+\t *\n+\t * <p>When the timer is due it will call the given {@link Triggerable}.\n+\t */\n+\t<N> InternalTimerService<N> getInternalTimerService(\n+\t\tString name,\n+\t\tTypeSerializer<K> keySerializer,\n+\t\tTypeSerializer<N> namespaceSerializer,\n+\t\tTriggerable<K, N> triggerable);\n+\n+\t/**\n+\t * It advances the Watermark of all managed {@link InternalTimerService timer services},\n+\t * potentially firing the event time timers.\n+\t */\n+\tvoid advanceWatermark(Watermark watermark) throws Exception;\n+\n+\t/**\n+\t * Snapshots the timers in the keyed state.\n+\t *\n+\t * <p><b>TODO:</b> This can be removed once heap-based timers are integrated with RocksDB\n+\t * incremental snapshots.\n+\t */\n+\tvoid snapshotState(\n+\t\tStateSnapshotContext context,\n+\t\tString operatorName) throws Exception;\n+\n+\t/**\n+\t * A provider pattern for creating an instance of a {@link InternalTimeServiceManager}.\n+\t * Allows substituting the manager that will be used in the runtime.\n+\t */", "originalCommit": "4542d771f6e20366b3937386707e2774c5a316d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE0NDQ2MA==", "url": "https://github.com/apache/flink/pull/13443#discussion_r494144460", "bodyText": "Here I also think we don't need to mention the operators.", "author": "aljoscha", "createdAt": "2020-09-24T08:45:59Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/InternalTimeServiceManagerImpl.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.operators;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.api.common.typeutils.TypeSerializer;\n+import org.apache.flink.core.memory.DataOutputView;\n+import org.apache.flink.core.memory.DataOutputViewStreamWrapper;\n+import org.apache.flink.runtime.state.AbstractKeyedStateBackend;\n+import org.apache.flink.runtime.state.CheckpointableKeyedStateBackend;\n+import org.apache.flink.runtime.state.KeyGroupRange;\n+import org.apache.flink.runtime.state.KeyGroupStatePartitionStreamProvider;\n+import org.apache.flink.runtime.state.KeyGroupedInternalPriorityQueue;\n+import org.apache.flink.runtime.state.KeyGroupsList;\n+import org.apache.flink.runtime.state.KeyedStateCheckpointOutputStream;\n+import org.apache.flink.runtime.state.PriorityQueueSetFactory;\n+import org.apache.flink.runtime.state.StateSnapshotContext;\n+import org.apache.flink.streaming.api.watermark.Watermark;\n+import org.apache.flink.streaming.runtime.tasks.ProcessingTimeService;\n+import org.apache.flink.util.Preconditions;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+\n+/**\n+ * An entity keeping all the time-related services available to all operators extending the", "originalCommit": "4542d771f6e20366b3937386707e2774c5a316d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "476e5afa594e9eb446ea6f78fa181e9433124137", "url": "https://github.com/apache/flink/commit/476e5afa594e9eb446ea6f78fa181e9433124137", "message": "[FLINK-19288] Make the InternalTimeServiceManager an interface\n\nThis refactoring allows to replace the InternalTimerService with a\ndifferent implementation.\n\nMoreover it removes methods for retrieving the number of registered\ntimers from AbstractStreamOperator(s) which were introduced for tests.\n\nThis closes #13443", "committedDate": "2020-09-25T07:47:04Z", "type": "commit"}, {"oid": "476e5afa594e9eb446ea6f78fa181e9433124137", "url": "https://github.com/apache/flink/commit/476e5afa594e9eb446ea6f78fa181e9433124137", "message": "[FLINK-19288] Make the InternalTimeServiceManager an interface\n\nThis refactoring allows to replace the InternalTimerService with a\ndifferent implementation.\n\nMoreover it removes methods for retrieving the number of registered\ntimers from AbstractStreamOperator(s) which were introduced for tests.\n\nThis closes #13443", "committedDate": "2020-09-25T07:47:04Z", "type": "forcePushed"}]}