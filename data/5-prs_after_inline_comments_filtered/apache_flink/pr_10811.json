{"pr_number": 10811, "pr_title": "[FLINK-15504] Allow output to stdout/stderr during execution of PackagedProgram", "pr_createdAt": "2020-01-09T12:11:21Z", "pr_url": "https://github.com/apache/flink/pull/10811", "timeline": [{"oid": "4ded7a2610974acbc983c9ca33965354ce2a1fa2", "url": "https://github.com/apache/flink/commit/4ded7a2610974acbc983c9ca33965354ce2a1fa2", "message": "[FLINK-15504] Allow output to stdout/stderr during execution of PackagedProgram\n\nWe suppress the output to stdout/stderr during plan extraction via\nPackagedProgram. This has unintended consequences for users who are looking into\ndebugging their Flink programs during JobGraph creation.\n\nThis change removes the suppression of output when we run the JARs. The plan\npreview still suppresses the output to avoid spaming the logs during plan\npreview.", "committedDate": "2020-01-09T12:12:52Z", "type": "forcePushed"}, {"oid": "1a2e22c93965b36d65fcdd8e8add514861a3ae7e", "url": "https://github.com/apache/flink/commit/1a2e22c93965b36d65fcdd8e8add514861a3ae7e", "message": "[FLINK-15504] Allow output to stdout/stderr during execution of PackagedProgram\n\nWe suppress the output to stdout/stderr during plan extraction via\nPackagedProgram. This has unintended consequences for users who are looking into\ndebugging their Flink programs during JobGraph creation.\n\nThis change removes the suppression of output when we run the JARs. The plan\npreview still suppresses the output to avoid spaming the logs during plan\npreview.", "committedDate": "2020-01-09T12:44:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc4MjgyMg==", "url": "https://github.com/apache/flink/pull/10811#discussion_r364782822", "bodyText": "Could you add the actual code as a comment in order to be able to regenerate this byte array?", "author": "dawidwys", "createdAt": "2020-01-09T14:55:51Z", "path": "flink-runtime-web/src/test/java/org/apache/flink/runtime/webmonitor/handlers/JarHandlerTest.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.webmonitor.handlers;\n+\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.configuration.RestOptions;\n+import org.apache.flink.configuration.WebOptions;\n+import org.apache.flink.runtime.rest.RestClient;\n+import org.apache.flink.runtime.rest.RestClientConfiguration;\n+import org.apache.flink.runtime.rest.messages.MessageHeaders;\n+import org.apache.flink.runtime.rest.util.RestClientException;\n+import org.apache.flink.runtime.testingUtils.TestingUtils;\n+import org.apache.flink.runtime.testutils.MiniClusterResource;\n+import org.apache.flink.runtime.testutils.MiniClusterResourceConfiguration;\n+import org.apache.flink.testutils.junit.category.AlsoRunWithLegacyScheduler;\n+import org.apache.flink.util.ExceptionUtils;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.rules.TemporaryFolder;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.Optional;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+/**\n+ * Tests for the {@link JarRunHandler} and  {@link JarPlanHandler}.\n+ */\n+@Category(AlsoRunWithLegacyScheduler.class)\n+public class JarHandlerTest extends TestLogger {\n+\n+\t@ClassRule\n+\tpublic static final TemporaryFolder TMP = new TemporaryFolder();\n+\n+\tenum Type {\n+\t\tPLAN,\n+\t\tRUN\n+\t}\n+\n+\t@Test\n+\tpublic void testPlanJar() throws Exception {\n+\t\trunTest(Type.PLAN, \"hello out!\", \"hello err!\");\n+\t}\n+\n+\t@Test\n+\tpublic void testRunJar() throws Exception {\n+\t\trunTest(Type.RUN, \"(none)\", \"(none)\");\n+\t}\n+\n+\tprivate static void runTest(Type type, String expectedCapturedStdOut, String expectedCapturedStdErr) throws Exception {\n+\t\tPath uploadDir = TMP.newFolder().toPath();\n+\n+\t\tPath actualUploadDir = uploadDir.resolve(\"flink-web-upload\");\n+\t\tFiles.createDirectory(actualUploadDir);\n+\n+\t\tPath emptyJar = actualUploadDir.resolve(\"empty.jar\");\n+\t\tcreateJarFile(emptyJar);\n+\n+\t\tConfiguration config = new Configuration();\n+\t\tconfig.setString(WebOptions.UPLOAD_DIR, uploadDir.toString());\n+\n+\t\tMiniClusterResource clusterResource = new MiniClusterResource(\n+\t\t\tnew MiniClusterResourceConfiguration.Builder()\n+\t\t\t\t.setConfiguration(config)\n+\t\t\t\t.setNumberTaskManagers(1)\n+\t\t\t\t.setNumberSlotsPerTaskManager(1)\n+\t\t\t\t.build());\n+\t\tclusterResource.before();\n+\n+\t\ttry {\n+\t\t\tConfiguration clientConfig = clusterResource.getClientConfiguration();\n+\t\t\tRestClient client = new RestClient(RestClientConfiguration.fromConfiguration(clientConfig), TestingUtils.defaultExecutor());\n+\n+\t\t\ttry {\n+\t\t\t\tfinal MessageHeaders headers;\n+\t\t\t\tfinal JarMessageParameters parameters;\n+\t\t\t\tif (type == Type.RUN) {\n+\t\t\t\t\theaders = JarRunHeaders.getInstance();\n+\t\t\t\t\tparameters = ((JarRunHeaders) headers).getUnresolvedMessageParameters();\n+\t\t\t\t} else if (type == Type.PLAN) {\n+\t\t\t\t\theaders = JarPlanGetHeaders.getInstance();\n+\t\t\t\t\tparameters = ((JarPlanGetHeaders) headers).getUnresolvedMessageParameters();\n+\t\t\t\t} else {\n+\t\t\t\t\tthrow new RuntimeException(\"Invalid type: \" + type);\n+\t\t\t\t}\n+\t\t\t\tparameters.jarIdPathParameter.resolve(emptyJar.getFileName().toString());\n+\n+\t\t\t\tString host = clientConfig.getString(RestOptions.ADDRESS);\n+\t\t\t\tint port = clientConfig.getInteger(RestOptions.PORT);\n+\n+\t\t\t\ttry {\n+\t\t\t\t\tclient.sendRequest(host, port, headers, parameters, new JarPlanRequestBody())\n+\t\t\t\t\t\t.get();\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\tOptional<RestClientException> expected = ExceptionUtils.findThrowable(e, RestClientException.class);\n+\t\t\t\t\tif (expected.isPresent()) {\n+\t\t\t\t\t\t// implies the job was actually submitted\n+\t\t\t\t\t\tassertThat(expected.get().getMessage(), containsString(\"ProgramInvocationException\"));\n+\t\t\t\t\t\t// original cause is preserved in stack trace\n+\t\t\t\t\t\tassertThat(expected.get().getMessage(), containsString(\"The program plan could not be fetched - the program aborted pre-maturely\"));\n+\t\t\t\t\t\t// implies the jar was registered for the job graph (otherwise the jar name would not occur in the exception)\n+\t\t\t\t\t\t// implies the jar was uploaded (otherwise the file would not be found at all)\n+\t\t\t\t\t\tassertThat(expected.get().getMessage(), containsString(\"empty.jar\"));\n+\t\t\t\t\t\t// ensure that no stdout/stderr has been captured\n+\t\t\t\t\t\tassertThat(expected.get().getMessage(), containsString(\"System.out: \" + expectedCapturedStdOut));\n+\t\t\t\t\t\tassertThat(expected.get().getMessage(), containsString(\"System.err: \" + expectedCapturedStdErr));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tthrow e;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t} finally {\n+\t\t\t\tclient.shutdown(Time.milliseconds(10));\n+\t\t\t}\n+\t\t} finally {\n+\t\t\tclusterResource.after();\n+\t\t}\n+\t}\n+\n+\tprivate static void createJarFile(Path zipFile) throws IOException {\n+\t\tURI uri = URI.create(\"jar:file:\" + zipFile.toString());\n+\t\tHashMap<String, Object> env = new HashMap<>();\n+\t\t// We need this to ensure the file will be created if it does not exist\n+\t\tenv.put(\"create\", \"true\");\n+\t\ttry (FileSystem zipfs = FileSystems.newFileSystem(uri, env)) {\n+\t\t\tFiles.createDirectory(zipfs.getPath(\"META-INF\"));\n+\t\t\tPath manifest = zipfs.getPath(\"META-INF/MANIFEST.MF\");\n+\t\t\tFiles.write(manifest, \"Manifest-Version: 1.0\\nCreated-By: Apache Flink\\nMain-Class: HelloWorld\\n\".getBytes());\n+\n+\t\t\tPath content = zipfs.getPath(\"HelloWorld.class\");\n+\t\t\tFiles.write(content, new byte[] {\n+\t\t\t\t// A program that prints 'hello out!' to stdout and 'hello err!' to stderr", "originalCommit": "1a2e22c93965b36d65fcdd8e8add514861a3ae7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgyNTM4Mw==", "url": "https://github.com/apache/flink/pull/10811#discussion_r364825383", "bodyText": "That makes sense. I will add this code as a comment:\npublic class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println(\"hello out!\");\n    System.err.println(\"hello err!\");\n  }\n}", "author": "mxm", "createdAt": "2020-01-09T16:07:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc4MjgyMg=="}], "type": "inlineReview"}, {"oid": "38d73b1c1ce2e263405d0e2036cf66117419346f", "url": "https://github.com/apache/flink/commit/38d73b1c1ce2e263405d0e2036cf66117419346f", "message": "[FLINK-15504] Allow output to stdout/stderr during execution of PackagedProgram\n\nWe suppress the output to stdout/stderr during plan extraction via\nPackagedProgram. This has unintended consequences for users who are looking into\ndebugging their Flink programs during JobGraph creation.\n\nThis change removes the suppression of output when we run the JARs. The plan\npreview still suppresses the output to avoid spaming the logs during plan\npreview.", "committedDate": "2020-01-09T16:15:09Z", "type": "commit"}, {"oid": "38d73b1c1ce2e263405d0e2036cf66117419346f", "url": "https://github.com/apache/flink/commit/38d73b1c1ce2e263405d0e2036cf66117419346f", "message": "[FLINK-15504] Allow output to stdout/stderr during execution of PackagedProgram\n\nWe suppress the output to stdout/stderr during plan extraction via\nPackagedProgram. This has unintended consequences for users who are looking into\ndebugging their Flink programs during JobGraph creation.\n\nThis change removes the suppression of output when we run the JARs. The plan\npreview still suppresses the output to avoid spaming the logs during plan\npreview.", "committedDate": "2020-01-09T16:15:09Z", "type": "forcePushed"}]}