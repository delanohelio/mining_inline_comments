{"pr_number": 13897, "pr_title": "[FLINK-19939][table-planner-blink] Remove redundant union from multiple input node", "pr_createdAt": "2020-11-03T06:29:40Z", "pr_url": "https://github.com/apache/flink/pull/13897", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0OTcwOA==", "url": "https://github.com/apache/flink/pull/13897#discussion_r517849708", "bodyText": "a wrapper is the output node if the wrapper is the root of its group ?", "author": "godfreyhe", "createdAt": "2020-11-05T07:51:28Z", "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/processors/MultipleInputNodeCreationProcessor.java", "diffHunk": "@@ -283,6 +283,102 @@ private void optimizeMultipleInputGroups(List<ExecNodeWrapper> orderedWrappers)\n \t\t\t\twrapper.removeFromGroup();\n \t\t\t}\n \t\t}\n+\n+\t\t// wrappers are checked in topological order from sinks to sources\n+\t\tfor (ExecNodeWrapper wrapper : orderedWrappers) {\n+\t\t\tMultipleInputGroup group = wrapper.group;\n+\t\t\tif (group == null) {\n+\t\t\t\t// we only consider nodes currently in a multiple input group\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\n+\t\t\tif (isOutputOfMultipleInputGroup(wrapper) && wrapper.execNode instanceof Union) {\n+\t\t\t\t// optimization 5. this optimization remove redundant union at the output of a\n+\t\t\t\t// multiple input, consider the following graph:\n+\t\t\t\t//\n+\t\t\t\t// source -> exchange -> agg ---\\\n+\t\t\t\t// source -> exchange -> agg --> union ->\n+\t\t\t\t// source -> exchange -> join --/\n+\t\t\t\t// source -> exchange --/\n+\t\t\t\t//\n+\t\t\t\t// we'll initially put aggs, the join and the union into a multiple input, while\n+\t\t\t\t// the union here is actually redundant.\n+\t\t\t\tint numberOfUsefulInputs = 0;\n+\t\t\t\tList<Integer> uselessBranches = new ArrayList<>();\n+\t\t\t\tList<List<ExecNodeWrapper>> sameGroupWrappersList = new ArrayList<>();\n+\n+\t\t\t\t// an input branch is useful if it contains a node with two or more inputs other\n+\t\t\t\t// than union. we shall keep the union if it has two or more useful input branches,\n+\t\t\t\t// as this may benefit source chaining. consider the following example:\n+\t\t\t\t//\n+\t\t\t\t// chainable source -> join -\\\n+\t\t\t\t//                     /      \\\n+\t\t\t\t// chainable source --<        union\n+\t\t\t\t//                     \\      /\n+\t\t\t\t// chainable source -> join -/\n+\t\t\t\tfor (int i = 0; i < wrapper.inputs.size(); i++) {\n+\t\t\t\t\tExecNodeWrapper inputWrapper = wrapper.inputs.get(i);\n+\t\t\t\t\tList<ExecNodeWrapper> sameGroupWrappers = getInputWrappersInSameGroup(inputWrapper, wrapper.group);\n+\t\t\t\t\tsameGroupWrappersList.add(sameGroupWrappers);\n+\t\t\t\t\tlong numberOfValuableNodes = sameGroupWrappers.stream()\n+\t\t\t\t\t\t.filter(w -> w.inputs.size() >= 2 && !(w.execNode instanceof Union))\n+\t\t\t\t\t\t.count();\n+\t\t\t\t\tif (numberOfValuableNodes > 0) {\n+\t\t\t\t\t\tnumberOfUsefulInputs++;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tuselessBranches.add(i);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\tif (numberOfUsefulInputs < 2) {\n+\t\t\t\t\t// remove this union and its useless branches from multiple input\n+\t\t\t\t\tfor (int branch : uselessBranches) {\n+\t\t\t\t\t\tList<ExecNodeWrapper> sameGroupWrappers = sameGroupWrappersList.get(branch);\n+\t\t\t\t\t\tfor (ExecNodeWrapper w : sameGroupWrappers) {\n+\t\t\t\t\t\t\tif (w.group != null) {\n+\t\t\t\t\t\t\t\tw.removeFromGroup();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\twrapper.removeFromGroup();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate List<ExecNodeWrapper> getInputWrappersInSameGroup(ExecNodeWrapper wrapper, MultipleInputGroup group) {\n+\t\tList<ExecNodeWrapper> ret = new ArrayList<>();\n+\t\tQueue<ExecNodeWrapper> queue = new LinkedList<>();\n+\t\tSet<ExecNodeWrapper> visited = new HashSet<>();\n+\t\tqueue.add(wrapper);\n+\t\tvisited.add(wrapper);\n+\n+\t\twhile (!queue.isEmpty()) {\n+\t\t\tExecNodeWrapper w = queue.poll();\n+\t\t\tif (w.group != group) {\n+\t\t\t\t// if a wrapper is not in the required group than its inputs will\n+\t\t\t\t// also not be in the group, so we can just skip it\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tret.add(w);\n+\n+\t\t\tfor (ExecNodeWrapper inputWrapper : w.inputs) {\n+\t\t\t\tif (visited.contains(inputWrapper)) {\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\tqueue.add(inputWrapper);\n+\t\t\t\tvisited.add(inputWrapper);\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn ret;\n+\t}\n+\n+\tprivate boolean isOutputOfMultipleInputGroup(ExecNodeWrapper wrapper) {\n+\t\tPreconditions.checkNotNull(", "originalCommit": "458abd54a7cfa9a7a71bdf2f304db0ab65ca2e1f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f7e980618fb2fc2efa4f098b90c50b2530849843", "url": "https://github.com/apache/flink/commit/f7e980618fb2fc2efa4f098b90c50b2530849843", "message": "[FLINK-19939][table-planner-blink] Remove redundant union from multiple input node", "committedDate": "2020-11-06T05:15:55Z", "type": "commit"}, {"oid": "35c3c55c0dc376027cc9a4a89001d13e0620a8ed", "url": "https://github.com/apache/flink/commit/35c3c55c0dc376027cc9a4a89001d13e0620a8ed", "message": "[fix] Rebase and remove one input operators from the output of multiple input node", "committedDate": "2020-11-06T05:58:13Z", "type": "commit"}]}