{"pr_number": 11855, "pr_title": "[FLINK-13639] Refactor the IntermediateResultPartitionID to consist o\u2026", "pr_createdAt": "2020-04-22T06:55:55Z", "pr_url": "https://github.com/apache/flink/pull/11855", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc2OTIwMQ==", "url": "https://github.com/apache/flink/pull/11855#discussion_r412769201", "bodyText": "Consider make ResultID Serializable?", "author": "zhuzhurk", "createdAt": "2020-04-22T08:13:58Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/IntermediateResultPartitionID.java", "diffHunk": "@@ -27,29 +28,76 @@\n /**\n  * Id identifying {@link IntermediateResultPartition}.\n  */\n-public class IntermediateResultPartitionID extends AbstractID implements ResultID {\n+public class IntermediateResultPartitionID implements Comparable<IntermediateResultPartitionID>, ResultID, java.io.Serializable {", "originalCommit": "023e49457714f991f4213803372d5e3e2ba844f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc4NDgzNQ==", "url": "https://github.com/apache/flink/pull/11855#discussion_r412784835", "bodyText": "Sounds good.", "author": "KarmaGYZ", "createdAt": "2020-04-22T08:35:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc2OTIwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc2OTk4Nw==", "url": "https://github.com/apache/flink/pull/11855#discussion_r412769987", "bodyText": "I think it's better to let intermediateDataSetID implement writeTo() and fromByteBuf (...) and just invokes them in IntermediateResultPartitionID.", "author": "zhuzhurk", "createdAt": "2020-04-22T08:15:08Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/IntermediateResultPartitionID.java", "diffHunk": "@@ -27,29 +28,76 @@\n /**\n  * Id identifying {@link IntermediateResultPartition}.\n  */\n-public class IntermediateResultPartitionID extends AbstractID implements ResultID {\n+public class IntermediateResultPartitionID implements Comparable<IntermediateResultPartitionID>, ResultID, java.io.Serializable {\n \n \tprivate static final long serialVersionUID = 1L;\n \n+\tprivate final IntermediateDataSetID intermediateDataSetID;\n+\tprivate final int partitionNum;\n+\n \t/**\n-\t * Creates an new random intermediate result partition ID.\n+\t * Creates an new random intermediate result partition ID for testing.\n \t */\n+\t@VisibleForTesting\n \tpublic IntermediateResultPartitionID() {\n-\t\tsuper();\n+\t\tthis.partitionNum = -1;\n+\t\tthis.intermediateDataSetID = new IntermediateDataSetID(new AbstractID());\n \t}\n \n-\tpublic IntermediateResultPartitionID(long lowerPart, long upperPart) {\n-\t\tsuper(lowerPart, upperPart);\n+\t/**\n+\t * Creates an new intermediate result partition ID with {@link IntermediateDataSetID} and the partitionNum.\n+\t */\n+\tpublic IntermediateResultPartitionID(IntermediateDataSetID intermediateDataSetID, int partitionNum) {\n+\t\tthis.intermediateDataSetID = intermediateDataSetID;\n+\t\tthis.partitionNum = partitionNum;\n \t}\n \n \tpublic void writeTo(ByteBuf buf) {\n-\t\tbuf.writeLong(this.lowerPart);\n-\t\tbuf.writeLong(this.upperPart);\n+\t\tbuf.writeLong(intermediateDataSetID.getLowerPart());", "originalCommit": "023e49457714f991f4213803372d5e3e2ba844f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc3MDMwOA==", "url": "https://github.com/apache/flink/pull/11855#discussion_r412770308", "bodyText": "consider implement IntermediateResultPartitionID#equals(...)", "author": "zhuzhurk", "createdAt": "2020-04-22T08:15:37Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/IntermediateResultPartitionID.java", "diffHunk": "@@ -27,29 +28,76 @@\n /**\n  * Id identifying {@link IntermediateResultPartition}.\n  */\n-public class IntermediateResultPartitionID extends AbstractID implements ResultID {\n+public class IntermediateResultPartitionID implements Comparable<IntermediateResultPartitionID>, ResultID, java.io.Serializable {\n \n \tprivate static final long serialVersionUID = 1L;\n \n+\tprivate final IntermediateDataSetID intermediateDataSetID;\n+\tprivate final int partitionNum;\n+\n \t/**\n-\t * Creates an new random intermediate result partition ID.\n+\t * Creates an new random intermediate result partition ID for testing.\n \t */\n+\t@VisibleForTesting\n \tpublic IntermediateResultPartitionID() {\n-\t\tsuper();\n+\t\tthis.partitionNum = -1;\n+\t\tthis.intermediateDataSetID = new IntermediateDataSetID(new AbstractID());\n \t}\n \n-\tpublic IntermediateResultPartitionID(long lowerPart, long upperPart) {\n-\t\tsuper(lowerPart, upperPart);\n+\t/**\n+\t * Creates an new intermediate result partition ID with {@link IntermediateDataSetID} and the partitionNum.\n+\t */\n+\tpublic IntermediateResultPartitionID(IntermediateDataSetID intermediateDataSetID, int partitionNum) {\n+\t\tthis.intermediateDataSetID = intermediateDataSetID;\n+\t\tthis.partitionNum = partitionNum;\n \t}\n \n \tpublic void writeTo(ByteBuf buf) {\n-\t\tbuf.writeLong(this.lowerPart);\n-\t\tbuf.writeLong(this.upperPart);\n+\t\tbuf.writeLong(intermediateDataSetID.getLowerPart());\n+\t\tbuf.writeLong(intermediateDataSetID.getUpperPart());\n+\t\tbuf.writeInt(partitionNum);\n \t}\n \n \tpublic static IntermediateResultPartitionID fromByteBuf(ByteBuf buf) {\n-\t\tlong lower = buf.readLong();\n-\t\tlong upper = buf.readLong();\n-\t\treturn new IntermediateResultPartitionID(lower, upper);\n+\t\tfinal long lower = buf.readLong();\n+\t\tfinal long upper = buf.readLong();\n+\t\tfinal int partitionNum = buf.readInt();\n+\t\tfinal IntermediateDataSetID intermediateDataSetID = new IntermediateDataSetID(new AbstractID(lower, upper));\n+\t\treturn new IntermediateResultPartitionID(intermediateDataSetID, partitionNum);\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object obj) {\n+\t\tif (obj == this) {\n+\t\t\treturn true;\n+\t\t} else if (obj != null && obj.getClass() == getClass()) {\n+\t\t\tIntermediateResultPartitionID that = (IntermediateResultPartitionID) obj;\n+\t\t\treturn that.intermediateDataSetID.getLowerPart() == this.intermediateDataSetID.getLowerPart()", "originalCommit": "023e49457714f991f4213803372d5e3e2ba844f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc4OTg3OA==", "url": "https://github.com/apache/flink/pull/11855#discussion_r412789878", "bodyText": "I think you mean intermediateDataSetID#equals.", "author": "KarmaGYZ", "createdAt": "2020-04-22T08:42:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc3MDMwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgxNTE4Mw==", "url": "https://github.com/apache/flink/pull/11855#discussion_r412815183", "bodyText": "yes, I mean intermediateDataSetID", "author": "zhuzhurk", "createdAt": "2020-04-22T09:17:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc3MDMwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc3MDU0Ng==", "url": "https://github.com/apache/flink/pull/11855#discussion_r412770546", "bodyText": "consider implement IntermediateResultPartitionID#hashCode(...)", "author": "zhuzhurk", "createdAt": "2020-04-22T08:15:55Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/IntermediateResultPartitionID.java", "diffHunk": "@@ -27,29 +28,76 @@\n /**\n  * Id identifying {@link IntermediateResultPartition}.\n  */\n-public class IntermediateResultPartitionID extends AbstractID implements ResultID {\n+public class IntermediateResultPartitionID implements Comparable<IntermediateResultPartitionID>, ResultID, java.io.Serializable {\n \n \tprivate static final long serialVersionUID = 1L;\n \n+\tprivate final IntermediateDataSetID intermediateDataSetID;\n+\tprivate final int partitionNum;\n+\n \t/**\n-\t * Creates an new random intermediate result partition ID.\n+\t * Creates an new random intermediate result partition ID for testing.\n \t */\n+\t@VisibleForTesting\n \tpublic IntermediateResultPartitionID() {\n-\t\tsuper();\n+\t\tthis.partitionNum = -1;\n+\t\tthis.intermediateDataSetID = new IntermediateDataSetID(new AbstractID());\n \t}\n \n-\tpublic IntermediateResultPartitionID(long lowerPart, long upperPart) {\n-\t\tsuper(lowerPart, upperPart);\n+\t/**\n+\t * Creates an new intermediate result partition ID with {@link IntermediateDataSetID} and the partitionNum.\n+\t */\n+\tpublic IntermediateResultPartitionID(IntermediateDataSetID intermediateDataSetID, int partitionNum) {\n+\t\tthis.intermediateDataSetID = intermediateDataSetID;\n+\t\tthis.partitionNum = partitionNum;\n \t}\n \n \tpublic void writeTo(ByteBuf buf) {\n-\t\tbuf.writeLong(this.lowerPart);\n-\t\tbuf.writeLong(this.upperPart);\n+\t\tbuf.writeLong(intermediateDataSetID.getLowerPart());\n+\t\tbuf.writeLong(intermediateDataSetID.getUpperPart());\n+\t\tbuf.writeInt(partitionNum);\n \t}\n \n \tpublic static IntermediateResultPartitionID fromByteBuf(ByteBuf buf) {\n-\t\tlong lower = buf.readLong();\n-\t\tlong upper = buf.readLong();\n-\t\treturn new IntermediateResultPartitionID(lower, upper);\n+\t\tfinal long lower = buf.readLong();\n+\t\tfinal long upper = buf.readLong();\n+\t\tfinal int partitionNum = buf.readInt();\n+\t\tfinal IntermediateDataSetID intermediateDataSetID = new IntermediateDataSetID(new AbstractID(lower, upper));\n+\t\treturn new IntermediateResultPartitionID(intermediateDataSetID, partitionNum);\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object obj) {\n+\t\tif (obj == this) {\n+\t\t\treturn true;\n+\t\t} else if (obj != null && obj.getClass() == getClass()) {\n+\t\t\tIntermediateResultPartitionID that = (IntermediateResultPartitionID) obj;\n+\t\t\treturn that.intermediateDataSetID.getLowerPart() == this.intermediateDataSetID.getLowerPart()\n+\t\t\t\t&& that.intermediateDataSetID.getUpperPart() == this.intermediateDataSetID.getUpperPart()\n+\t\t\t\t&& that.partitionNum == this.partitionNum;\n+\t\t} else {\n+\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\treturn ((int)  this.intermediateDataSetID.getLowerPart()) ^", "originalCommit": "023e49457714f991f4213803372d5e3e2ba844f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc4OTk3Mw==", "url": "https://github.com/apache/flink/pull/11855#discussion_r412789973", "bodyText": "ditto", "author": "KarmaGYZ", "createdAt": "2020-04-22T08:42:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc3MDU0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc3MTkyOA==", "url": "https://github.com/apache/flink/pull/11855#discussion_r412771928", "bodyText": "Why is Comparable needed?", "author": "zhuzhurk", "createdAt": "2020-04-22T08:17:48Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/IntermediateResultPartitionID.java", "diffHunk": "@@ -27,29 +28,76 @@\n /**\n  * Id identifying {@link IntermediateResultPartition}.\n  */\n-public class IntermediateResultPartitionID extends AbstractID implements ResultID {\n+public class IntermediateResultPartitionID implements Comparable<IntermediateResultPartitionID>, ResultID, java.io.Serializable {", "originalCommit": "023e49457714f991f4213803372d5e3e2ba844f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc5MjU4Mg==", "url": "https://github.com/apache/flink/pull/11855#discussion_r412792582", "bodyText": "I'll remove this and see if the Travis gives us green light.", "author": "KarmaGYZ", "createdAt": "2020-04-22T08:46:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc3MTkyOA=="}], "type": "inlineReview"}, {"oid": "77720a95c9fb8163487dbec5bc82681f1e7f9fde", "url": "https://github.com/apache/flink/commit/77720a95c9fb8163487dbec5bc82681f1e7f9fde", "message": "[FLINK-13639] Refactor the IntermediateResultPartitionID to consist of IntermediateDataSetID and partitionIndex", "committedDate": "2020-04-22T08:49:53Z", "type": "forcePushed"}, {"oid": "d093e3078fb4456fd866e6d63dd36b3da1a4f776", "url": "https://github.com/apache/flink/commit/d093e3078fb4456fd866e6d63dd36b3da1a4f776", "message": "[FLINK-13639] Refactor the IntermediateResultPartitionID to consist of IntermediateDataSetID and partitionIndex", "committedDate": "2020-04-22T09:13:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgxNjE2Ng==", "url": "https://github.com/apache/flink/pull/11855#discussion_r412816166", "bodyText": "IntermediateDataSetID has a param-less ctor I think.", "author": "zhuzhurk", "createdAt": "2020-04-22T09:18:39Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/IntermediateResultPartitionID.java", "diffHunk": "@@ -27,29 +28,61 @@\n /**\n  * Id identifying {@link IntermediateResultPartition}.\n  */\n-public class IntermediateResultPartitionID extends AbstractID implements ResultID {\n+public class IntermediateResultPartitionID implements ResultID {\n \n \tprivate static final long serialVersionUID = 1L;\n \n+\tprivate final IntermediateDataSetID intermediateDataSetID;\n+\tprivate final int partitionNum;\n+\n \t/**\n-\t * Creates an new random intermediate result partition ID.\n+\t * Creates an new random intermediate result partition ID for testing.\n \t */\n+\t@VisibleForTesting\n \tpublic IntermediateResultPartitionID() {\n-\t\tsuper();\n+\t\tthis.partitionNum = -1;\n+\t\tthis.intermediateDataSetID = new IntermediateDataSetID(new AbstractID());", "originalCommit": "d093e3078fb4456fd866e6d63dd36b3da1a4f776", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "32d5ffa4730232c0ae2d978c4a9537604e5510db", "url": "https://github.com/apache/flink/commit/32d5ffa4730232c0ae2d978c4a9537604e5510db", "message": "[FLINK-13639] Refactor the IntermediateResultPartitionID to consist of IntermediateDataSetID and partitionIndex", "committedDate": "2020-04-22T09:20:39Z", "type": "forcePushed"}, {"oid": "206279cb7c4bbb95605ce57a71d5f43568a2649b", "url": "https://github.com/apache/flink/commit/206279cb7c4bbb95605ce57a71d5f43568a2649b", "message": "[FLINK-13639] Refactor the IntermediateResultPartitionID to consist of IntermediateDataSetID and partitionIndex", "committedDate": "2020-04-24T08:05:47Z", "type": "commit"}, {"oid": "206279cb7c4bbb95605ce57a71d5f43568a2649b", "url": "https://github.com/apache/flink/commit/206279cb7c4bbb95605ce57a71d5f43568a2649b", "message": "[FLINK-13639] Refactor the IntermediateResultPartitionID to consist of IntermediateDataSetID and partitionIndex", "committedDate": "2020-04-24T08:05:47Z", "type": "forcePushed"}]}