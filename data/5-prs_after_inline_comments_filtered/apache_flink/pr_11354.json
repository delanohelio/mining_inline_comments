{"pr_number": 11354, "pr_title": "[FLINK-16512][task] Unaligned checkpoints: API for persistence", "pr_createdAt": "2020-03-09T13:35:23Z", "pr_url": "https://github.com/apache/flink/pull/11354", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcxMTgxOA==", "url": "https://github.com/apache/flink/pull/11354#discussion_r389711818", "bodyText": "nit: add spaces before and after values", "author": "AHeise", "createdAt": "2020-03-09T14:10:46Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ChannelStateReader.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.apache.flink.runtime.checkpoint.channel;\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+\n+/**\n+ * Reads channel state saved during checkpoint/savepoint.\n+ */\n+@Internal\n+public interface ChannelStateReader extends AutoCloseable {\n+\n+\t/**\n+\t * ReadResult.\n+\t */\n+\tenum ReadResult {HAS_MORE_DATA, NO_MORE_DATA}", "originalCommit": "6de2741bb0be1909327e78e95bcd4f954ff32e23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcxMzM3OQ==", "url": "https://github.com/apache/flink/pull/11354#discussion_r389713379", "bodyText": "Do we need an enum (vs. a boolean)? Are you planning to expand the values?", "author": "AHeise", "createdAt": "2020-03-09T14:12:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcxMTgxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc1MDM4Ng==", "url": "https://github.com/apache/flink/pull/11354#discussion_r389750386", "bodyText": "Currently, I'm not planning to extend it.\nIt's just more readable than a boolean.", "author": "rkhachatryan", "createdAt": "2020-03-09T15:04:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcxMTgxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcxNDYyOQ==", "url": "https://github.com/apache/flink/pull/11354#discussion_r389714629", "bodyText": "How many implementation with no-op close do you expect? I'd assume it's only one and then I'd avoid having it as default implementation.", "author": "AHeise", "createdAt": "2020-03-09T14:13:19Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ChannelStateReader.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.apache.flink.runtime.checkpoint.channel;\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+\n+/**\n+ * Reads channel state saved during checkpoint/savepoint.\n+ */\n+@Internal\n+public interface ChannelStateReader extends AutoCloseable {\n+\n+\t/**\n+\t * ReadResult.\n+\t */\n+\tenum ReadResult {HAS_MORE_DATA, NO_MORE_DATA}\n+\n+\t/**\n+\t * Put data into the supplied buffer to be injected into {@link org.apache.flink.runtime.io.network.partition.consumer.InputChannel InputChannel}.\n+\t */\n+\tReadResult readInputData(InputChannelInfo info, Buffer buffer);\n+\n+\t/**\n+\t * Put data into the supplied buffer to be injected into {@link org.apache.flink.runtime.io.network.partition.ResultSubpartition ResultSubpartition}.\n+\t */\n+\tReadResult readOutputData(ResultSubpartitionInfo info, Buffer buffer);\n+\n+\t@Override\n+\tdefault void close() throws Exception {", "originalCommit": "6de2741bb0be1909327e78e95bcd4f954ff32e23", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcxODgwOQ==", "url": "https://github.com/apache/flink/pull/11354#discussion_r389718809", "bodyText": "I'd don't get the idea of having -1 here. Doesn't it make usage more complicated?\nI thought adding the real sequence number would make incremental checkpointing easier (you just need to remember the highest number of the previous checkpoint).", "author": "AHeise", "createdAt": "2020-03-09T14:19:15Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ChannelStateWriter.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.checkpoint.channel;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.state.StateObject;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * Writes channel state during checkpoint/savepoint.\n+ */\n+@Internal\n+public interface ChannelStateWriter extends AutoCloseable {\n+\n+\t/**\n+\t * Initiate write of channel state for the given checkpoint id.\n+\t */\n+\tvoid start(long checkpointId);\n+\n+\t/**\n+\t * Add in-flight buffers from the {@link org.apache.flink.runtime.io.network.partition.consumer.InputChannel InputChannel}.\n+\t * <p>Must be called after {@link #start} and before {@link #finish(long)}.</p>\n+\t * @param startSeqNum is the sequence number of the 1st passed buffer\n+\t *                    It\u2019s intended use is incremental snapshots\n+\t *                    For the restored buffers it should be -1", "originalCommit": "6de2741bb0be1909327e78e95bcd4f954ff32e23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg5OTU2MA==", "url": "https://github.com/apache/flink/pull/11354#discussion_r389899560", "bodyText": "For incremental checkpointing, we need to distinguish somehow restored buffers from new buffers. Given that:\n\nsequence numbers currently start from 0 after the restart\nbuffers don't carry any sequence numbers themselves\nwe can't compare the given argument with something from the previous run.\n\nCan you please explain what are \"real sequence numbers\"?", "author": "rkhachatryan", "createdAt": "2020-03-09T19:03:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcxODgwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI2NTk2MA==", "url": "https://github.com/apache/flink/pull/11354#discussion_r390265960", "bodyText": "I thought about storing the sequence numbers alongside the data. But I haven't thought about sequence numbers being reset.\nI'm simply not sure how incremental checkpoints should work if we don't have that information.\nLet's assume there is a checkpoint where for one specific channel buffer 0..9 are stored. Now, there is a recovery where only 0..5 are completely unspilled before a new checkpoint is taken, in which 6..15 are stored. For incremental snapshot, we would simply skip storing 6..9 because at the current API, they'd get a -1. However, how would the recovery know where to resume?", "author": "AHeise", "createdAt": "2020-03-10T12:02:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcxODgwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI5NzM1NA==", "url": "https://github.com/apache/flink/pull/11354#discussion_r390297354", "bodyText": "I assume that by unspilling you mean sending the buffers out (to the operator or to downstream); and that we have 6 new buffers.\nThe other one is to count how many buffers or bytes actually are in-flight and store this offset.\nOne option would be to do a full snapshot if there any negative sequence numbers.\nOf course, having SNs inside the buffers would simplify a lot, but I guess it would require more effort and discussion.", "author": "rkhachatryan", "createdAt": "2020-03-10T13:05:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcxODgwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcxOTg2Ng==", "url": "https://github.com/apache/flink/pull/11354#discussion_r389719866", "bodyText": "I'd probably not refer to MVP in the code. Noone from outside will know what it means.\nHow about Can be -2 if unknown, which will fail on incremental checkpoint.", "author": "AHeise", "createdAt": "2020-03-09T14:20:46Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ChannelStateWriter.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.checkpoint.channel;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.state.StateObject;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * Writes channel state during checkpoint/savepoint.\n+ */\n+@Internal\n+public interface ChannelStateWriter extends AutoCloseable {\n+\n+\t/**\n+\t * Initiate write of channel state for the given checkpoint id.\n+\t */\n+\tvoid start(long checkpointId);\n+\n+\t/**\n+\t * Add in-flight buffers from the {@link org.apache.flink.runtime.io.network.partition.consumer.InputChannel InputChannel}.\n+\t * <p>Must be called after {@link #start} and before {@link #finish(long)}.</p>\n+\t * @param startSeqNum is the sequence number of the 1st passed buffer\n+\t *                    It\u2019s intended use is incremental snapshots\n+\t *                    For the restored buffers it should be -1\n+\t *                    For MVP it can always be -2", "originalCommit": "6de2741bb0be1909327e78e95bcd4f954ff32e23", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyMDE4MQ==", "url": "https://github.com/apache/flink/pull/11354#discussion_r389720181", "bodyText": "start(long)", "author": "AHeise", "createdAt": "2020-03-09T14:21:12Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ChannelStateWriter.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.checkpoint.channel;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.state.StateObject;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * Writes channel state during checkpoint/savepoint.\n+ */\n+@Internal\n+public interface ChannelStateWriter extends AutoCloseable {\n+\n+\t/**\n+\t * Initiate write of channel state for the given checkpoint id.\n+\t */\n+\tvoid start(long checkpointId);\n+\n+\t/**\n+\t * Add in-flight buffers from the {@link org.apache.flink.runtime.io.network.partition.consumer.InputChannel InputChannel}.\n+\t * <p>Must be called after {@link #start} and before {@link #finish(long)}.</p>", "originalCommit": "6de2741bb0be1909327e78e95bcd4f954ff32e23", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyNDE2MA==", "url": "https://github.com/apache/flink/pull/11354#discussion_r389724160", "bodyText": "See comments about addInputData.", "author": "AHeise", "createdAt": "2020-03-09T14:26:55Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ChannelStateWriter.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.checkpoint.channel;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.state.StateObject;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * Writes channel state during checkpoint/savepoint.\n+ */\n+@Internal\n+public interface ChannelStateWriter extends AutoCloseable {\n+\n+\t/**\n+\t * Initiate write of channel state for the given checkpoint id.\n+\t */\n+\tvoid start(long checkpointId);\n+\n+\t/**\n+\t * Add in-flight buffers from the {@link org.apache.flink.runtime.io.network.partition.consumer.InputChannel InputChannel}.\n+\t * <p>Must be called after {@link #start} and before {@link #finish(long)}.</p>\n+\t * @param startSeqNum is the sequence number of the 1st passed buffer\n+\t *                    It\u2019s intended use is incremental snapshots\n+\t *                    For the restored buffers it should be -1\n+\t *                    For MVP it can always be -2\n+\t *                    If no data is passed it is ignored\n+\t */\n+\tvoid addInputData(long checkpointId, InputChannelInfo info, int startSeqNum, Buffer... data);\n+\n+\t/**\n+\t * Add in-flight buffers from the {@link org.apache.flink.runtime.io.network.partition.ResultSubpartition ResultSubpartition}.", "originalCommit": "6de2741bb0be1909327e78e95bcd4f954ff32e23", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyNDk4OA==", "url": "https://github.com/apache/flink/pull/11354#discussion_r389724988", "bodyText": "Could we merge that with finish?\nDo you really want to use Future instead of CompletableFuture?", "author": "AHeise", "createdAt": "2020-03-09T14:28:08Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ChannelStateWriter.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.checkpoint.channel;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.state.StateObject;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * Writes channel state during checkpoint/savepoint.\n+ */\n+@Internal\n+public interface ChannelStateWriter extends AutoCloseable {\n+\n+\t/**\n+\t * Initiate write of channel state for the given checkpoint id.\n+\t */\n+\tvoid start(long checkpointId);\n+\n+\t/**\n+\t * Add in-flight buffers from the {@link org.apache.flink.runtime.io.network.partition.consumer.InputChannel InputChannel}.\n+\t * <p>Must be called after {@link #start} and before {@link #finish(long)}.</p>\n+\t * @param startSeqNum is the sequence number of the 1st passed buffer\n+\t *                    It\u2019s intended use is incremental snapshots\n+\t *                    For the restored buffers it should be -1\n+\t *                    For MVP it can always be -2\n+\t *                    If no data is passed it is ignored\n+\t */\n+\tvoid addInputData(long checkpointId, InputChannelInfo info, int startSeqNum, Buffer... data);\n+\n+\t/**\n+\t * Add in-flight buffers from the {@link org.apache.flink.runtime.io.network.partition.ResultSubpartition ResultSubpartition}.\n+\t * <p>Must be called after {@link #start} and before {@link #finish(long)}.</p>\n+\t * @param startSeqNum is the sequence number of the 1st passed buffer\n+\t *                    It\u2019s intended use is incremental snapshots\n+\t *                    For the restored buffers it should be -1\n+\t *                    For MVP it can always be -2\n+\t *                    If no data is passed it is ignored\n+\t */\n+\tvoid addOutputData(long checkpointId, ResultSubpartitionInfo info, int startSeqNum, Buffer... data);\n+\n+\t/**\n+\t * Finalize write of channel state for the given checkpoint id.\n+\t * <p>Must be called after {@link #start}.</p>\n+\t */\n+\tvoid finish(long checkpointId);\n+\n+\t/**\n+\t * <p>Must be called after {@link #finish}.</p>\n+\t */\n+\tFuture<Collection<StateObject>> getWriteCompletionFuture(long checkpointId);", "originalCommit": "6de2741bb0be1909327e78e95bcd4f954ff32e23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc3MzY3MA==", "url": "https://github.com/apache/flink/pull/11354#discussion_r389773670", "bodyText": "I'm not sure if these calls will come from the same place.\nI think this can be refined once we get closer to state injection implementation.", "author": "rkhachatryan", "createdAt": "2020-03-09T15:38:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyNDk4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2Nzk0Ng==", "url": "https://github.com/apache/flink/pull/11354#discussion_r390167946", "bodyText": "I guess it probably happens in different places. Anyway, it might be no harm to separate the different semantics.", "author": "zhijiangW", "createdAt": "2020-03-10T08:55:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyNDk4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI2MjU5Mg==", "url": "https://github.com/apache/flink/pull/11354#discussion_r390262592", "bodyText": "Agree.\nI will also change the contract slightly so this method should be called after start().", "author": "rkhachatryan", "createdAt": "2020-03-10T11:55:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyNDk4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI2NjgyOA==", "url": "https://github.com/apache/flink/pull/11354#discussion_r390266828", "bodyText": "Ah yes, if it does not need to be called after finish, it will be much more usable and I agree it should be separate.", "author": "AHeise", "createdAt": "2020-03-10T12:04:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyNDk4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyNTM0OQ==", "url": "https://github.com/apache/flink/pull/11354#discussion_r389725349", "bodyText": "as before: How many implementation with no-op close do you expect? I'd assume it's only one and then I'd avoid having it as default implementation.", "author": "AHeise", "createdAt": "2020-03-09T14:28:39Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ChannelStateWriter.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.checkpoint.channel;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.state.StateObject;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * Writes channel state during checkpoint/savepoint.\n+ */\n+@Internal\n+public interface ChannelStateWriter extends AutoCloseable {\n+\n+\t/**\n+\t * Initiate write of channel state for the given checkpoint id.\n+\t */\n+\tvoid start(long checkpointId);\n+\n+\t/**\n+\t * Add in-flight buffers from the {@link org.apache.flink.runtime.io.network.partition.consumer.InputChannel InputChannel}.\n+\t * <p>Must be called after {@link #start} and before {@link #finish(long)}.</p>\n+\t * @param startSeqNum is the sequence number of the 1st passed buffer\n+\t *                    It\u2019s intended use is incremental snapshots\n+\t *                    For the restored buffers it should be -1\n+\t *                    For MVP it can always be -2\n+\t *                    If no data is passed it is ignored\n+\t */\n+\tvoid addInputData(long checkpointId, InputChannelInfo info, int startSeqNum, Buffer... data);\n+\n+\t/**\n+\t * Add in-flight buffers from the {@link org.apache.flink.runtime.io.network.partition.ResultSubpartition ResultSubpartition}.\n+\t * <p>Must be called after {@link #start} and before {@link #finish(long)}.</p>\n+\t * @param startSeqNum is the sequence number of the 1st passed buffer\n+\t *                    It\u2019s intended use is incremental snapshots\n+\t *                    For the restored buffers it should be -1\n+\t *                    For MVP it can always be -2\n+\t *                    If no data is passed it is ignored\n+\t */\n+\tvoid addOutputData(long checkpointId, ResultSubpartitionInfo info, int startSeqNum, Buffer... data);\n+\n+\t/**\n+\t * Finalize write of channel state for the given checkpoint id.\n+\t * <p>Must be called after {@link #start}.</p>\n+\t */\n+\tvoid finish(long checkpointId);\n+\n+\t/**\n+\t * <p>Must be called after {@link #finish}.</p>\n+\t */\n+\tFuture<Collection<StateObject>> getWriteCompletionFuture(long checkpointId);\n+\n+\t@Override\n+\tdefault void close() throws Exception {", "originalCommit": "6de2741bb0be1909327e78e95bcd4f954ff32e23", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyODQ5MA==", "url": "https://github.com/apache/flink/pull/11354#discussion_r389728490", "bodyText": "It's confusing that we now have InputChannelID and InputChannelInfo. I don't see a good solution though. Similarly, it's a bit of a pity that we cannot reuse this class for ResultSubpartitionInfo (virtually it's the same thing). Maybe @zhijiangW has an idea.", "author": "AHeise", "createdAt": "2020-03-09T14:33:14Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/InputChannelInfo.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.checkpoint.channel;\n+\n+import org.apache.flink.annotation.Internal;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Identifies {@link org.apache.flink.runtime.io.network.partition.consumer.InputChannel} in a given subtask.\n+ */\n+@Internal\n+public class InputChannelInfo implements Serializable {", "originalCommit": "6de2741bb0be1909327e78e95bcd4f954ff32e23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc4NDAzMw==", "url": "https://github.com/apache/flink/pull/11354#discussion_r389784033", "bodyText": "Unfortunately, we can't use IDs as they are currently assigned at random. I'll put it into the javadoc.\nTo identify state, we logically need: source task id, target task id, isUpstream. Instead of isUpstream, I thought it's better to have an explicit entity for both InputChannel and ResultSubpartition.\nRegarding names, it was actually @zhijiangW (good) idea:)", "author": "rkhachatryan", "createdAt": "2020-03-09T15:53:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyODQ5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2NzgzOQ==", "url": "https://github.com/apache/flink/pull/11354#discussion_r390167839", "bodyText": "It indeed brings confusing for having both InputChannelID and InputChannelInfo now.\nInputChannelID is the unique id for identifying while requesting partitions from different tasks on upstream side.\nInputChannelInfo is a wrapper structure which would be easily extended to cover more infos (e.g. task index) future if necessary. And currently the strong requirement is to identify it for different InputGate instances.\nThe \"inspiration\" is form existing TaskInfo structure coincides with executionId. I also do not see a better solution yet.", "author": "zhijiangW", "createdAt": "2020-03-10T08:55:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyODQ5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI2NDA0MQ==", "url": "https://github.com/apache/flink/pull/11354#discussion_r390264041", "bodyText": "Let's stick with this structure then.", "author": "rkhachatryan", "createdAt": "2020-03-10T11:58:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyODQ5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI2NzUzNA==", "url": "https://github.com/apache/flink/pull/11354#discussion_r390267534", "bodyText": "Ideally, we could replace InputChannelID with Roman's InputChannelInfo, but that's probably too much of an effort. It would certainly make programs easier to debug.", "author": "AHeise", "createdAt": "2020-03-10T12:06:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyODQ5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM2MTkyMA==", "url": "https://github.com/apache/flink/pull/11354#discussion_r390361920", "bodyText": "InputChannelID can not be replaced directly by InputChannelInfo` as I described the function above.\nFor every upstream task, it can receive the partition requests from the InputChannel of different task instances. And now it uses the global unique InputChannelID for distinguishing with different tasks.\nBut InputChannelInfo can only guarantee the uniqueness within one task scope,  and still has the same id among different tasks, unless we introduce InputChannelID into the InputChannelInfo.", "author": "zhijiangW", "createdAt": "2020-03-10T14:38:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyODQ5MA=="}], "type": "inlineReview"}, {"oid": "d4b2376373e740abd59dfe2d18ef31c62857d432", "url": "https://github.com/apache/flink/commit/d4b2376373e740abd59dfe2d18ef31c62857d432", "message": "[FLINK-14551][task] Unaligned checkpoints: API for persistence", "committedDate": "2020-03-09T19:23:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2ODAwNw==", "url": "https://github.com/apache/flink/pull/11354#discussion_r390168007", "bodyText": "nit: intended to use in", "author": "zhijiangW", "createdAt": "2020-03-10T08:55:24Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ChannelStateWriter.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.checkpoint.channel;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.state.StateObject;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * Writes channel state during checkpoint/savepoint.\n+ */\n+@Internal\n+public interface ChannelStateWriter extends AutoCloseable {\n+\n+\t/**\n+\t * Initiate write of channel state for the given checkpoint id.\n+\t */\n+\tvoid start(long checkpointId);\n+\n+\t/**\n+\t * Add in-flight buffers from the {@link org.apache.flink.runtime.io.network.partition.consumer.InputChannel InputChannel}.\n+\t * <p>Must be called after {@link #start(long)} and before {@link #finish(long)}.</p>\n+\t * @param startSeqNum is the sequence number of the 1st passed buffer.\n+\t *                    It\u2019s intended use is incremental snapshots.", "originalCommit": "d4b2376373e740abd59dfe2d18ef31c62857d432", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2ODA2MQ==", "url": "https://github.com/apache/flink/pull/11354#discussion_r390168061", "bodyText": "nit: remove </p>?", "author": "zhijiangW", "createdAt": "2020-03-10T08:55:32Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ChannelStateWriter.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.checkpoint.channel;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.state.StateObject;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * Writes channel state during checkpoint/savepoint.\n+ */\n+@Internal\n+public interface ChannelStateWriter extends AutoCloseable {\n+\n+\t/**\n+\t * Initiate write of channel state for the given checkpoint id.\n+\t */\n+\tvoid start(long checkpointId);\n+\n+\t/**\n+\t * Add in-flight buffers from the {@link org.apache.flink.runtime.io.network.partition.consumer.InputChannel InputChannel}.\n+\t * <p>Must be called after {@link #start(long)} and before {@link #finish(long)}.</p>", "originalCommit": "d4b2376373e740abd59dfe2d18ef31c62857d432", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2ODIzMA==", "url": "https://github.com/apache/flink/pull/11354#discussion_r390168230", "bodyText": "ditto", "author": "zhijiangW", "createdAt": "2020-03-10T08:55:48Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ChannelStateReader.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package org.apache.flink.runtime.checkpoint.channel;\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+\n+/**\n+ * Reads channel state saved during checkpoint/savepoint.\n+ */\n+@Internal\n+public interface ChannelStateReader extends AutoCloseable {\n+\n+\t/**\n+\t * ReadResult.\n+\t */\n+\tenum ReadResult { HAS_MORE_DATA, NO_MORE_DATA }\n+\n+\t/**\n+\t * Put data into the supplied buffer to be injected into {@link org.apache.flink.runtime.io.network.partition.consumer.InputChannel InputChannel}.\n+\t */\n+\tReadResult readInputData(InputChannelInfo info, Buffer buffer);\n+\n+\t/**\n+\t * Put data into the supplied buffer to be injected into {@link org.apache.flink.runtime.io.network.partition.ResultSubpartition ResultSubpartition}.", "originalCommit": "d4b2376373e740abd59dfe2d18ef31c62857d432", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2ODI3OA==", "url": "https://github.com/apache/flink/pull/11354#discussion_r390168278", "bodyText": "nit: seems too long line. Import the package before class or split the lines.", "author": "zhijiangW", "createdAt": "2020-03-10T08:55:52Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ChannelStateReader.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package org.apache.flink.runtime.checkpoint.channel;\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+\n+/**\n+ * Reads channel state saved during checkpoint/savepoint.\n+ */\n+@Internal\n+public interface ChannelStateReader extends AutoCloseable {\n+\n+\t/**\n+\t * ReadResult.\n+\t */\n+\tenum ReadResult { HAS_MORE_DATA, NO_MORE_DATA }\n+\n+\t/**\n+\t * Put data into the supplied buffer to be injected into {@link org.apache.flink.runtime.io.network.partition.consumer.InputChannel InputChannel}.", "originalCommit": "d4b2376373e740abd59dfe2d18ef31c62857d432", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE3MTI4OQ==", "url": "https://github.com/apache/flink/pull/11354#discussion_r390171289", "bodyText": "Clarify: Not only for random issue. IntermediateResultPartitionID is for identifying the whole ResultPartition, but we also need to identify the specific ResultSubpartition inside `ResultPartition.", "author": "zhijiangW", "createdAt": "2020-03-10T09:01:46Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ResultSubpartitionInfo.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.checkpoint.channel;\n+\n+import org.apache.flink.annotation.Internal;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Identifies {@link org.apache.flink.runtime.io.network.partition.ResultSubpartition ResultSubpartition} in a given subtask.\n+ * Note that {@link org.apache.flink.runtime.jobgraph.IntermediateResultPartitionID IntermediateResultPartitionID}", "originalCommit": "d4b2376373e740abd59dfe2d18ef31c62857d432", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI3MTUwNQ==", "url": "https://github.com/apache/flink/pull/11354#discussion_r390271505", "bodyText": "Yes, you're right.\nI'll update the javadoc.", "author": "rkhachatryan", "createdAt": "2020-03-10T12:14:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE3MTI4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI2NzkxNg==", "url": "https://github.com/apache/flink/pull/11354#discussion_r390267916", "bodyText": "Btw, could we extract -1 and -2 as constants?", "author": "AHeise", "createdAt": "2020-03-10T12:07:05Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ChannelStateWriter.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.checkpoint.channel;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.state.StateObject;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * Writes channel state during checkpoint/savepoint.\n+ */\n+@Internal\n+public interface ChannelStateWriter extends AutoCloseable {\n+\n+\t/**\n+\t * Initiate write of channel state for the given checkpoint id.\n+\t */\n+\tvoid start(long checkpointId);\n+\n+\t/**\n+\t * Add in-flight buffers from the {@link org.apache.flink.runtime.io.network.partition.consumer.InputChannel InputChannel}.\n+\t * <p>Must be called after {@link #start(long)} and before {@link #finish(long)}.</p>\n+\t * @param startSeqNum is the sequence number of the 1st passed buffer.\n+\t *                    It\u2019s intended use is incremental snapshots.\n+\t *                    For the restored buffers it should be -1.", "originalCommit": "d4b2376373e740abd59dfe2d18ef31c62857d432", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI3MjcwMQ==", "url": "https://github.com/apache/flink/pull/11354#discussion_r390272701", "bodyText": "Good idea!", "author": "rkhachatryan", "createdAt": "2020-03-10T12:16:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI2NzkxNg=="}], "type": "inlineReview"}, {"oid": "28b3738bd1b66d39ba7899caa98cb3a3dc1cba93", "url": "https://github.com/apache/flink/commit/28b3738bd1b66d39ba7899caa98cb3a3dc1cba93", "message": "[FLINK-16512][task] Unaligned checkpoints: API for persistence", "committedDate": "2020-03-10T12:48:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM5MjU5Nw==", "url": "https://github.com/apache/flink/pull/11354#discussion_r390392597", "bodyText": "I am a bit confused of the description rather than received from the upstream or from the operator. I may guess your meaning, but I wonder it might confuse other guys. E.g. for previously spilled input buffers the sequence number should also be -1 during recovery.", "author": "zhijiangW", "createdAt": "2020-03-10T15:17:15Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ChannelStateWriter.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.checkpoint.channel;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.state.StateObject;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * Writes channel state during checkpoint/savepoint.\n+ */\n+@Internal\n+public interface ChannelStateWriter extends AutoCloseable {\n+\n+\t/**\n+\t * Sequence number for restored buffers (rather than received from the upstream or from the operator).", "originalCommit": "28b3738bd1b66d39ba7899caa98cb3a3dc1cba93", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM5MjY0Mg==", "url": "https://github.com/apache/flink/pull/11354#discussion_r390392642", "bodyText": "TBH I am not very clear of the scenarios of unknown, can you explain a bit if possible in the javadoc?", "author": "zhijiangW", "createdAt": "2020-03-10T15:17:18Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ChannelStateWriter.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.checkpoint.channel;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.state.StateObject;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * Writes channel state during checkpoint/savepoint.\n+ */\n+@Internal\n+public interface ChannelStateWriter extends AutoCloseable {\n+\n+\t/**\n+\t * Sequence number for restored buffers (rather than received from the upstream or from the operator).\n+\t */\n+\tint SEQUENCE_NUMBER_RESTORED = -1;\n+\n+\t/**\n+\t * Signifies that buffer sequence number is unknown.", "originalCommit": "28b3738bd1b66d39ba7899caa98cb3a3dc1cba93", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyMjIyMA==", "url": "https://github.com/apache/flink/pull/11354#discussion_r390422220", "bodyText": "I meant this constant for the not implemented case (MVP).\nI'll clarify it in the javadocs.", "author": "rkhachatryan", "createdAt": "2020-03-10T15:56:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM5MjY0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM5Mjc3Mw==", "url": "https://github.com/apache/flink/pull/11354#discussion_r390392773", "bodyText": "nit: ReadResult seems informal. Status of reading result", "author": "zhijiangW", "createdAt": "2020-03-10T15:17:27Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ChannelStateReader.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package org.apache.flink.runtime.checkpoint.channel;\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+\n+/**\n+ * Reads channel state saved during checkpoint/savepoint.\n+ */\n+@Internal\n+public interface ChannelStateReader extends AutoCloseable {\n+\n+\t/**\n+\t * ReadResult.", "originalCommit": "28b3738bd1b66d39ba7899caa98cb3a3dc1cba93", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3eaf3193bff523861f2b386276ea805d243761f3", "url": "https://github.com/apache/flink/commit/3eaf3193bff523861f2b386276ea805d243761f3", "message": "[FLINK-16512][task] Unaligned checkpoints: API for persistence", "committedDate": "2020-03-10T16:02:37Z", "type": "commit"}, {"oid": "3eaf3193bff523861f2b386276ea805d243761f3", "url": "https://github.com/apache/flink/commit/3eaf3193bff523861f2b386276ea805d243761f3", "message": "[FLINK-16512][task] Unaligned checkpoints: API for persistence", "committedDate": "2020-03-10T16:02:37Z", "type": "forcePushed"}]}