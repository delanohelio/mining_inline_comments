{"pr_number": 3055, "pr_title": "Use Range Raptor Iteration instead of departure time as result path criteria", "pr_createdAt": "2020-04-29T14:03:11Z", "pr_url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3055", "timeline": [{"oid": "7e67ebb8cbb295a29583f7abe90dfe068112232a", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/7e67ebb8cbb295a29583f7abe90dfe068112232a", "message": "Clean code - Make 'TimeUtils.timeStrCompact(..)' skip seconds[if 0] not hours. This method was historically used to print durations, but a dedicated method for printing duration now exist. Hence the 'timeStrCompact' could be converted to print times in a compact format like hh:mm (13:45) when the second part is 0. It the second part is not zero, the long format hh:mm:ss is used.", "committedDate": "2020-04-29T14:04:10Z", "type": "commit"}, {"oid": "49903e089fde6931e0a8c6f9146b89356b7cb387", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/49903e089fde6931e0a8c6f9146b89356b7cb387", "message": "Clean code - Improve SpeedTest:\n - by adding modes, agencies and routes to result file.\n - removing SpeedTestItinerary.\n - fixing time and duration to string converting.\n - Reuse the PathStringBuilder.\n - Cleanup api/model delete unused code.\n - Make the SpeedTest result compare more robust.", "committedDate": "2020-04-29T14:04:10Z", "type": "commit"}, {"oid": "b9980aca3645f4f544dd47cbd82ee287f1f0bdbb", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/b9980aca3645f4f544dd47cbd82ee287f1f0bdbb", "message": "Clean code - Add mode to PathStringBuilder.", "committedDate": "2020-04-29T14:04:10Z", "type": "commit"}, {"oid": "8141c27b87c0acfbe4f137aa323eafc1ddcd58d9", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/8141c27b87c0acfbe4f137aa323eafc1ddcd58d9", "message": "Fix undesired routing results when using timetable view buy using the Range Raptor iteration instead of departure time in the path pareto-set comparator. This fixes issue #3053.", "committedDate": "2020-04-29T14:04:10Z", "type": "commit"}, {"oid": "8141c27b87c0acfbe4f137aa323eafc1ddcd58d9", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/8141c27b87c0acfbe4f137aa323eafc1ddcd58d9", "message": "Fix undesired routing results when using timetable view buy using the Range Raptor iteration instead of departure time in the path pareto-set comparator. This fixes issue #3053.", "committedDate": "2020-04-29T14:04:10Z", "type": "forcePushed"}, {"oid": "497437d06af96a4db794e105dab3f767c37e96cd", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/497437d06af96a4db794e105dab3f767c37e96cd", "message": "Clean code - In the SpeedTest prevent IndexOutOfBoundException when there is just one test case. Also, remove origin from the details section in the test comparison.", "committedDate": "2020-04-29T14:34:07Z", "type": "commit"}, {"oid": "b7059a44fa3a20544c75ed8dddca634607667ea0", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/b7059a44fa3a20544c75ed8dddca634607667ea0", "message": "Rename field/parameter `iteration` to `iterationDepartureTime`.", "committedDate": "2020-05-04T10:13:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk3ODA2MA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3055#discussion_r419978060", "bodyText": "Clarify Javadoc: \"all results found in previous iterations are kept\" at the egress stations, but not in the main search itself, where the range raptor optimization depends on kicking out states from previous (later departure) iterations.", "author": "abyrd", "createdAt": "2020-05-05T09:29:35Z", "path": "src/main/java/org/opentripplanner/transit/raptor/api/path/Path.java", "diffHunk": "@@ -43,13 +45,23 @@ private Path(int startTime, int endTime, int numberOfTransfers, int generalizedC\n         this.egressPathLeg = null;\n     }\n \n-    public Path(AccessPathLeg<T> accessLeg, int generalizedCost) {\n-        this.accessLeg = accessLeg;\n-        this.egressPathLeg = findEgressLeg(accessLeg);\n+    public Path(int iteration, AccessPathLeg<T> accessLeg, int generalizedCost) {\n+        this.iteration = iteration;\n         this.startTime = accessLeg.fromTime();\n-        this.endTime = egressPathLeg.toTime();\n         this.numberOfTransfers = countNumberOfTransfers(accessLeg);\n         this.generalizedCost = generalizedCost;\n+        this.accessLeg = accessLeg;\n+        this.egressPathLeg = findEgressLeg(accessLeg);\n+        this.endTime = egressPathLeg.toTime();\n+    }\n+\n+    /**\n+     * The Range Raptor iteration. This can be used in the path-pareto-function to make sure\n+     * all results found in previous iterations are kept, and not dominated by new results.", "originalCommit": "8141c27b87c0acfbe4f137aa323eafc1ddcd58d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk4NjM4MA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3055#discussion_r419986380", "bodyText": "We discussed the fact that this optimization cuts about 50% of the run time. It is the most effective optimization, and a paper came out in January explaining why it is so effective. Javadoc should be updated to include that reference.", "author": "abyrd", "createdAt": "2020-05-05T09:44:11Z", "path": "src/main/java/org/opentripplanner/transit/raptor/rangeraptor/path/DestinationArrivalPaths.java", "diffHunk": "@@ -72,12 +74,16 @@ public boolean isReachedCurrentRound() {\n         return reachedCurrentRound;\n     }\n \n+    public void setRangeRaptorIteration(int iteration) {\n+        this.iteration = iteration;\n+    }\n+\n     public boolean isEmpty() {\n         return paths.isEmpty();\n     }\n \n     public boolean qualify(int departureTime, int arrivalTime, int numberOfTransfers, int cost) {\n-        return paths.qualify(Path.dummyPath(departureTime, arrivalTime, numberOfTransfers, cost));\n+        return paths.qualify(Path.dummyPath(iteration, departureTime, arrivalTime, numberOfTransfers, cost));", "originalCommit": "8141c27b87c0acfbe4f137aa323eafc1ddcd58d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQwNDk4MA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3055#discussion_r420404980", "bodyText": "I have added some documentation and a reference to the paper.", "author": "t2gran", "createdAt": "2020-05-05T21:03:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk4NjM4MA=="}], "type": "inlineReview"}, {"oid": "d2af9607e97b051d69066f5e7a0477bbabf1eff9", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/d2af9607e97b051d69066f5e7a0477bbabf1eff9", "message": "Remove the 'allowWaitingBetweenAccessAndTransit'search parameter. This optimization is not valid with the raptor algorithm and we need to implement it in another way. What we want is that the first iteration should provide some good results for the next search-window and let these results be part of the pareto-filtering to exclude none optimal results in the current search-window.", "committedDate": "2020-05-05T20:38:12Z", "type": "commit"}, {"oid": "358d45986740e9cf9fb59f347b907f67e2592d93", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/358d45986740e9cf9fb59f347b907f67e2592d93", "message": "Merge remote-tracking branch 'otp/dev-2.x' into otp2_timeshidt_paths", "committedDate": "2020-05-05T21:00:35Z", "type": "commit"}, {"oid": "358d45986740e9cf9fb59f347b907f67e2592d93", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/358d45986740e9cf9fb59f347b907f67e2592d93", "message": "Merge remote-tracking branch 'otp/dev-2.x' into otp2_timeshidt_paths", "committedDate": "2020-05-05T21:00:35Z", "type": "forcePushed"}, {"oid": "a09de85fd62155c4c4bd57ae259d10b965bc456e", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/a09de85fd62155c4c4bd57ae259d10b965bc456e", "message": "Merge branch 'dev-2.x' into otp2_timeshidt_paths", "committedDate": "2020-05-05T21:14:48Z", "type": "commit"}]}