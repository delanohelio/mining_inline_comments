{"pr_number": 3122, "pr_title": "Add legacy GraphQL endpoint as a sandbox feature", "pr_createdAt": "2020-06-25T08:19:19Z", "pr_url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3122", "timeline": [{"oid": "21c45997e582daeae9e16fc08e4ca3491d8ade04", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/21c45997e582daeae9e16fc08e4ca3491d8ade04", "message": "Upgrade graphql-java", "committedDate": "2020-06-10T11:20:09Z", "type": "commit"}, {"oid": "3b9233df5ead6c0e2c484320d2ed519e2780ecb3", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/3b9233df5ead6c0e2c484320d2ed519e2780ecb3", "message": "Add initial implementation of LegacyGraphQLAPI", "committedDate": "2020-06-10T11:20:09Z", "type": "commit"}, {"oid": "dd11083d42a30302d30ce0bc4a36579f935595ef", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/dd11083d42a30302d30ce0bc4a36579f935595ef", "message": "Add first data fetchers", "committedDate": "2020-06-10T11:20:09Z", "type": "commit"}, {"oid": "e733bb845a344bf94f5f1aeebfd1f222f50536eb", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/e733bb845a344bf94f5f1aeebfd1f222f50536eb", "message": "refactor", "committedDate": "2020-06-10T11:20:09Z", "type": "commit"}, {"oid": "acfff374ddf0bead505be1b608c1f697b6dc62a7", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/acfff374ddf0bead505be1b608c1f697b6dc62a7", "message": "Update", "committedDate": "2020-06-12T09:33:03Z", "type": "commit"}, {"oid": "19e7c1df673abc246b8b93ccade44b611f49edf8", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/19e7c1df673abc246b8b93ccade44b611f49edf8", "message": "Merge branch 'dev-2.x' of github.com:opentripplanner/OpenTripPlanner into legacygraphql", "committedDate": "2020-06-22T10:28:45Z", "type": "commit"}, {"oid": "eb713af310daa1e77c2b11c0bf565ae4d69c08eb", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/eb713af310daa1e77c2b11c0bf565ae4d69c08eb", "message": "Make Stop either a Stop or Station", "committedDate": "2020-06-22T10:56:05Z", "type": "commit"}, {"oid": "58dad0f2c2a08adf9a3cab8f6bfe0b4f3ec0b6cc", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/58dad0f2c2a08adf9a3cab8f6bfe0b4f3ec0b6cc", "message": "Add BikePark and BikeRentalStation types", "committedDate": "2020-06-22T10:56:22Z", "type": "commit"}, {"oid": "f1bf72d2e1efa3e12ddc65a64703230593a3c20d", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/f1bf72d2e1efa3e12ddc65a64703230593a3c20d", "message": "Update imports", "committedDate": "2020-06-22T10:59:28Z", "type": "commit"}, {"oid": "69b765274d649809560b613ddeee11324655d5d3", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/69b765274d649809560b613ddeee11324655d5d3", "message": "Remove deprecations", "committedDate": "2020-06-22T12:03:52Z", "type": "commit"}, {"oid": "e00322fbe3fb08ed40517c9ead24acc0255522f5", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/e00322fbe3fb08ed40517c9ead24acc0255522f5", "message": "Add data fetchers", "committedDate": "2020-06-22T12:04:07Z", "type": "commit"}, {"oid": "88fdbb57491b509e34f9cacbf2fbc6b5496e9241", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/88fdbb57491b509e34f9cacbf2fbc6b5496e9241", "message": "Fix compile issues + invalid data fetchers", "committedDate": "2020-06-22T13:05:50Z", "type": "commit"}, {"oid": "2dd57dae32a49cf926f60e30f225d9e1006a572f", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/2dd57dae32a49cf926f60e30f225d9e1006a572f", "message": "Add types to api", "committedDate": "2020-06-22T13:05:57Z", "type": "commit"}, {"oid": "204bdee969c5181ec86c64aac65c9d146c579c9e", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/204bdee969c5181ec86c64aac65c9d146c579c9e", "message": "Add ID scalar", "committedDate": "2020-06-22T13:06:06Z", "type": "commit"}, {"oid": "f1264e636d0de4c29aa50491d1f392f7644abef9", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/f1264e636d0de4c29aa50491d1f392f7644abef9", "message": "Add data fetchers", "committedDate": "2020-06-24T08:09:55Z", "type": "commit"}, {"oid": "6632af841f449e22adc83ae96c9fd636e7ecdc43", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/6632af841f449e22adc83ae96c9fd636e7ecdc43", "message": "Fix types", "committedDate": "2020-06-24T10:06:27Z", "type": "commit"}, {"oid": "5fb57d3c3634330b98ba506de50b494173141882", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/5fb57d3c3634330b98ba506de50b494173141882", "message": "Add data fetchers", "committedDate": "2020-06-24T11:46:05Z", "type": "commit"}, {"oid": "e7d3172fa9b7f2bfc321c09492c0c61fc93cd0f1", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/e7d3172fa9b7f2bfc321c09492c0c61fc93cd0f1", "message": "Add data fetchers", "committedDate": "2020-06-24T13:05:29Z", "type": "commit"}, {"oid": "1cf9108d5571a4d57b54a5c4eba4ea11ac8df585", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/1cf9108d5571a4d57b54a5c4eba4ea11ac8df585", "message": "Add data fetchers", "committedDate": "2020-06-24T14:06:33Z", "type": "commit"}, {"oid": "32eccc6b1679a2f6b3a6e7f0fd42ea5ba69f123d", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/32eccc6b1679a2f6b3a6e7f0fd42ea5ba69f123d", "message": "Add TypeResolvers", "committedDate": "2020-06-24T18:14:48Z", "type": "commit"}, {"oid": "58a1604737d63214b94819242a024db386a5fb64", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/58a1604737d63214b94819242a024db386a5fb64", "message": "Fix null data fetchers", "committedDate": "2020-06-29T06:39:19Z", "type": "commit"}, {"oid": "a3cc4f21c194b5a7206c5e2de97ff8ee9a1b5a1f", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/a3cc4f21c194b5a7206c5e2de97ff8ee9a1b5a1f", "message": "Add nearest in query", "committedDate": "2020-07-01T13:48:38Z", "type": "commit"}, {"oid": "58c887c0627ef1a5c781686e28b07b1983d8c9a8", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/58c887c0627ef1a5c781686e28b07b1983d8c9a8", "message": "Fetch locale from headers", "committedDate": "2020-07-03T07:33:54Z", "type": "commit"}, {"oid": "1a4cb556d8f8072b96fff8b6869848fe4b37bc9f", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/1a4cb556d8f8072b96fff8b6869848fe4b37bc9f", "message": "Revert timeout", "committedDate": "2020-07-03T07:34:43Z", "type": "commit"}, {"oid": "9c10dbfca8136e595ca4bf522ca48e18b7e2dc94", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/9c10dbfca8136e595ca4bf522ca48e18b7e2dc94", "message": "Rename DepartureRow to PatternAtStop", "committedDate": "2020-07-03T07:41:10Z", "type": "commit"}, {"oid": "5369150e027551af6a41f251d35b5989bb39d300", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/5369150e027551af6a41f251d35b5989bb39d300", "message": "Add stopTimesForPatternAtStop", "committedDate": "2020-07-03T08:13:35Z", "type": "commit"}, {"oid": "5c1e758ecc4457135733d51408ea97be88132830", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/5c1e758ecc4457135733d51408ea97be88132830", "message": "Add stopTimesForPattern in Stop", "committedDate": "2020-07-03T08:21:15Z", "type": "commit"}, {"oid": "208c615759a1d33a342e4e7e7f5b857b4b8245a8", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/208c615759a1d33a342e4e7e7f5b857b4b8245a8", "message": "add stopsByRadius", "committedDate": "2020-07-03T08:25:52Z", "type": "commit"}, {"oid": "13e0df0515e9bc0465e4fec6fc42a997b768b8b3", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/13e0df0515e9bc0465e4fec6fc42a997b768b8b3", "message": "Add more fields to stop types", "committedDate": "2020-07-03T09:35:20Z", "type": "commit"}, {"oid": "dbab5c8338ad55dbbcb84080a16a85002009f97a", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/dbab5c8338ad55dbbcb84080a16a85002009f97a", "message": "Disable by default", "committedDate": "2020-07-03T09:37:28Z", "type": "commit"}, {"oid": "74273f09dcd9d3c7ea0f69132435e1862d98181a", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/74273f09dcd9d3c7ea0f69132435e1862d98181a", "message": "Fix netex mapping", "committedDate": "2020-07-03T10:25:26Z", "type": "commit"}, {"oid": "2fb8a0953909fa69a196acab9ab74e15ab9ff935", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/2fb8a0953909fa69a196acab9ab74e15ab9ff935", "message": "Fix bikerentalStationService when no updaters present", "committedDate": "2020-07-10T12:25:58Z", "type": "commit"}, {"oid": "e35b2a85e87a5342010d681d5536cabad76d188e", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/e35b2a85e87a5342010d681d5536cabad76d188e", "message": "Fix returning null in GraphQL results", "committedDate": "2020-07-10T12:26:10Z", "type": "commit"}, {"oid": "557ea50e8b14a8ddd70729a8de08a7b6b61dde8c", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/557ea50e8b14a8ddd70729a8de08a7b6b61dde8c", "message": "Fix returning null in GraphQL results", "committedDate": "2020-07-10T12:32:43Z", "type": "commit"}, {"oid": "557ea50e8b14a8ddd70729a8de08a7b6b61dde8c", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/557ea50e8b14a8ddd70729a8de08a7b6b61dde8c", "message": "Fix returning null in GraphQL results", "committedDate": "2020-07-10T12:32:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAyOTU2Mw==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3122#discussion_r463029563", "bodyText": "I think this check was simplified, because we do not allow one-to-many search any more, just in the access/egress search - but this code should not be part of that?", "author": "t2gran", "createdAt": "2020-07-30T14:17:20Z", "path": "src/main/java/org/opentripplanner/routing/core/RoutingContext.java", "diffHunk": "@@ -237,14 +237,14 @@ public void checkIfVerticesFound() {\n         List<RoutingError> routingErrors = new ArrayList<>();\n \n         // check origin present when not doing an arrive-by batch search\n-        if (fromVertices == null) {\n+        if (fromVertices == null && !(opt.oneToMany == true && opt.arriveBy == true)) {", "originalCommit": "557ea50e8b14a8ddd70729a8de08a7b6b61dde8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAyOTg4Mg==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3122#discussion_r465029882", "bodyText": "This code is needed for the AStar search in StopFinder", "author": "hannesj", "createdAt": "2020-08-04T12:57:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAyOTU2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAyOTczMQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3122#discussion_r463029731", "bodyText": "See above.", "author": "t2gran", "createdAt": "2020-07-30T14:17:37Z", "path": "src/main/java/org/opentripplanner/routing/core/RoutingContext.java", "diffHunk": "@@ -237,14 +237,14 @@ public void checkIfVerticesFound() {\n         List<RoutingError> routingErrors = new ArrayList<>();\n \n         // check origin present when not doing an arrive-by batch search\n-        if (fromVertices == null) {\n+        if (fromVertices == null && !(opt.oneToMany == true && opt.arriveBy == true)) {\n             routingErrors.add(\n                 new RoutingError(RoutingErrorCode.LOCATION_NOT_FOUND, InputField.FROM_PLACE)\n             );\n         }\n \n         // check destination present when not doing a depart-after batch search\n-        if (toVertices == null) {\n+        if (toVertices == null && !(opt.oneToMany == true && opt.arriveBy == false)) {", "originalCommit": "557ea50e8b14a8ddd70729a8de08a7b6b61dde8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAzMzM1NA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3122#discussion_r463033354", "bodyText": "These 2 methods seems to be extremely inefficient, but I guess if they are not called very often it should be ok.", "author": "t2gran", "createdAt": "2020-07-30T14:22:41Z", "path": "src/main/java/org/opentripplanner/model/TripPattern.java", "diffHunk": "@@ -236,6 +236,11 @@ public Stop getStop(int stopIndex) {\n         return stopPattern.stops[stopIndex];\n     }\n \n+\n+    public int getStopIndex(Stop stop) {\n+        return Arrays.asList(stopPattern.stops).indexOf(stop);\n+    }\n+\n     public List<Stop> getStops() {\n         return Arrays.asList(stopPattern.stops);\n     }", "originalCommit": "557ea50e8b14a8ddd70729a8de08a7b6b61dde8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUyMDY1MA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3122#discussion_r463520650", "bodyText": "OTPTimeout header param missing from this regular endpoint", "author": "optionsome", "createdAt": "2020-07-31T10:00:02Z", "path": "src/ext/java/org/opentripplanner/ext/legacygraphqlapi/LegacyGraphQLAPI.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.opentripplanner.ext.legacygraphqlapi;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.opentripplanner.standalone.server.OTPServer;\n+import org.opentripplanner.standalone.server.Router;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.HeaderParam;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.ext.ContextResolver;\n+import javax.ws.rs.ext.Providers;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+\n+// TODO move to org.opentripplanner.api.resource, this is a Jersey resource class\n+\n+@Path(\"/routers/{routerId}/index/graphql\")\n+@Produces(MediaType.APPLICATION_JSON) // One @Produces annotation for all endpoints.\n+public class LegacyGraphQLAPI {\n+\n+  @SuppressWarnings(\"unused\")\n+  private static final Logger LOG = LoggerFactory.getLogger(org.opentripplanner.ext.transmodelapi.TransmodelIndexAPI.class);\n+\n+  private final Router router;\n+  private final ObjectMapper deserializer = new ObjectMapper();\n+\n+  public LegacyGraphQLAPI(\n+      @Context OTPServer otpServer,\n+      @Context Providers providers,\n+      @PathParam(\"routerId\") String routerId\n+  ) {\n+    this.router = otpServer.getRouter();\n+\n+    ContextResolver<ObjectMapper> resolver =\n+        providers.getContextResolver(ObjectMapper.class, MediaType.APPLICATION_JSON_TYPE);\n+    ObjectMapper mapper = resolver.getContext(ObjectMapper.class);\n+    mapper.setDefaultPropertyInclusion(JsonInclude.Include.ALWAYS);\n+  }\n+\n+  @POST\n+  @Path(\"/\")\n+  @Consumes(MediaType.APPLICATION_JSON)\n+  public Response getGraphQL(\n+      HashMap<String, Object> queryParameters,\n+      @HeaderParam(\"OTPMaxResolves\") @DefaultValue(\"1000000\") int maxResolves,\n+      @Context HttpHeaders headers\n+  ) {\n+    if (queryParameters == null || !queryParameters.containsKey(\"query\")) {\n+      LOG.debug(\"No query found in body\");\n+      return Response\n+          .status(Response.Status.BAD_REQUEST)\n+          .type(MediaType.TEXT_PLAIN_TYPE)\n+          .entity(\"No query found in body\")\n+          .build();\n+    }\n+\n+    Locale locale = headers.getAcceptableLanguages().size() > 0\n+        ? headers.getAcceptableLanguages().get(0)\n+        : router.defaultRoutingRequest.locale;\n+\n+    String query = (String) queryParameters.get(\"query\");\n+    Object queryVariables = queryParameters.getOrDefault(\"variables\", null);\n+    String operationName = (String) queryParameters.getOrDefault(\"operationName\", null);\n+    Map<String, Object> variables;\n+    if (queryVariables instanceof Map) {\n+      variables = (Map) queryVariables;\n+    }\n+    else if (queryVariables instanceof String && !((String) queryVariables).isEmpty()) {\n+      try {\n+        variables = deserializer.readValue((String) queryVariables, Map.class);\n+      }\n+      catch (IOException e) {\n+        return Response\n+            .status(Response.Status.BAD_REQUEST)\n+            .type(MediaType.TEXT_PLAIN_TYPE)\n+            .entity(\"Variables must be a valid json object\")\n+            .build();\n+      }\n+    }\n+    else {\n+      variables = new HashMap<>();\n+    }\n+    return LegacyGraphQLIndex.getGraphQLResponse(\n+        query,\n+        router,\n+        variables,\n+        operationName,\n+        maxResolves,\n+        locale\n+    );\n+  }\n+\n+  @POST\n+  @Path(\"/\")\n+  @Consumes(\"application/graphql\")\n+  public Response getGraphQL(\n+      String query,\n+      @HeaderParam(\"OTPMaxResolves\") @DefaultValue(\"1000000\") int maxResolves,", "originalCommit": "557ea50e8b14a8ddd70729a8de08a7b6b61dde8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQyNTM2Mw==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3122#discussion_r466425363", "bodyText": "done", "author": "hannesj", "createdAt": "2020-08-06T13:48:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUyMDY1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUyMTQzNA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3122#discussion_r463521434", "bodyText": "In the current hsldevcom version the default value is 30000", "author": "optionsome", "createdAt": "2020-07-31T10:01:39Z", "path": "src/ext/java/org/opentripplanner/ext/legacygraphqlapi/LegacyGraphQLAPI.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.opentripplanner.ext.legacygraphqlapi;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.opentripplanner.standalone.server.OTPServer;\n+import org.opentripplanner.standalone.server.Router;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.HeaderParam;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.ext.ContextResolver;\n+import javax.ws.rs.ext.Providers;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+\n+// TODO move to org.opentripplanner.api.resource, this is a Jersey resource class\n+\n+@Path(\"/routers/{routerId}/index/graphql\")\n+@Produces(MediaType.APPLICATION_JSON) // One @Produces annotation for all endpoints.\n+public class LegacyGraphQLAPI {\n+\n+  @SuppressWarnings(\"unused\")\n+  private static final Logger LOG = LoggerFactory.getLogger(org.opentripplanner.ext.transmodelapi.TransmodelIndexAPI.class);\n+\n+  private final Router router;\n+  private final ObjectMapper deserializer = new ObjectMapper();\n+\n+  public LegacyGraphQLAPI(\n+      @Context OTPServer otpServer,\n+      @Context Providers providers,\n+      @PathParam(\"routerId\") String routerId\n+  ) {\n+    this.router = otpServer.getRouter();\n+\n+    ContextResolver<ObjectMapper> resolver =\n+        providers.getContextResolver(ObjectMapper.class, MediaType.APPLICATION_JSON_TYPE);\n+    ObjectMapper mapper = resolver.getContext(ObjectMapper.class);\n+    mapper.setDefaultPropertyInclusion(JsonInclude.Include.ALWAYS);\n+  }\n+\n+  @POST\n+  @Path(\"/\")\n+  @Consumes(MediaType.APPLICATION_JSON)\n+  public Response getGraphQL(\n+      HashMap<String, Object> queryParameters,\n+      @HeaderParam(\"OTPMaxResolves\") @DefaultValue(\"1000000\") int maxResolves,\n+      @Context HttpHeaders headers\n+  ) {\n+    if (queryParameters == null || !queryParameters.containsKey(\"query\")) {\n+      LOG.debug(\"No query found in body\");\n+      return Response\n+          .status(Response.Status.BAD_REQUEST)\n+          .type(MediaType.TEXT_PLAIN_TYPE)\n+          .entity(\"No query found in body\")\n+          .build();\n+    }\n+\n+    Locale locale = headers.getAcceptableLanguages().size() > 0\n+        ? headers.getAcceptableLanguages().get(0)\n+        : router.defaultRoutingRequest.locale;\n+\n+    String query = (String) queryParameters.get(\"query\");\n+    Object queryVariables = queryParameters.getOrDefault(\"variables\", null);\n+    String operationName = (String) queryParameters.getOrDefault(\"operationName\", null);\n+    Map<String, Object> variables;\n+    if (queryVariables instanceof Map) {\n+      variables = (Map) queryVariables;\n+    }\n+    else if (queryVariables instanceof String && !((String) queryVariables).isEmpty()) {\n+      try {\n+        variables = deserializer.readValue((String) queryVariables, Map.class);\n+      }\n+      catch (IOException e) {\n+        return Response\n+            .status(Response.Status.BAD_REQUEST)\n+            .type(MediaType.TEXT_PLAIN_TYPE)\n+            .entity(\"Variables must be a valid json object\")\n+            .build();\n+      }\n+    }\n+    else {\n+      variables = new HashMap<>();\n+    }\n+    return LegacyGraphQLIndex.getGraphQLResponse(\n+        query,\n+        router,\n+        variables,\n+        operationName,\n+        maxResolves,\n+        locale\n+    );\n+  }\n+\n+  @POST\n+  @Path(\"/\")\n+  @Consumes(\"application/graphql\")\n+  public Response getGraphQL(\n+      String query,\n+      @HeaderParam(\"OTPMaxResolves\") @DefaultValue(\"1000000\") int maxResolves,\n+      @Context HttpHeaders headers\n+  ) {\n+    Locale locale = headers.getAcceptableLanguages().size() > 0\n+        ? headers.getAcceptableLanguages().get(0)\n+        : router.defaultRoutingRequest.locale;\n+    return LegacyGraphQLIndex.getGraphQLResponse(query, router, null, null, maxResolves, locale);\n+  }\n+\n+  @POST\n+  @Path(\"/batch\")\n+  @Consumes(MediaType.APPLICATION_JSON)\n+  public Response getGraphQLBatch(\n+      List<HashMap<String, Object>> queries,\n+      @HeaderParam(\"OTPTimeout\") @DefaultValue(\"10000\") int timeout,", "originalCommit": "557ea50e8b14a8ddd70729a8de08a7b6b61dde8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQyNTQ0MA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3122#discussion_r466425440", "bodyText": "done", "author": "hannesj", "createdAt": "2020-08-06T13:48:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUyMTQzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkwMzgxNg==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3122#discussion_r464903816", "bodyText": "Add JAvaDoc here", "author": "t2gran", "createdAt": "2020-08-04T08:57:02Z", "path": "src/main/java/org/opentripplanner/model/Stop.java", "diffHunk": "@@ -81,6 +101,14 @@ public String getUrl() {\n     return url;\n   }\n \n+  public TimeZone getTimeZone() {\n+    return timeZone;\n+  }\n+\n+  public TransitMode getVehicleType() {", "originalCommit": "557ea50e8b14a8ddd70729a8de08a7b6b61dde8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkwNDM5Nw==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3122#discussion_r464904397", "bodyText": "JavaDoc", "author": "t2gran", "createdAt": "2020-08-04T08:58:03Z", "path": "src/main/java/org/opentripplanner/model/Stop.java", "diffHunk": "@@ -73,6 +89,10 @@ public String toString() {\n     return \"<Stop \" + this.id + \">\";\n   }\n \n+  public String getPlatformCode() {", "originalCommit": "557ea50e8b14a8ddd70729a8de08a7b6b61dde8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkwNDUwMg==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3122#discussion_r464904502", "bodyText": "Add documentation about how this should be used", "author": "hannesj", "createdAt": "2020-08-04T08:58:13Z", "path": "src/main/java/org/opentripplanner/model/Stop.java", "diffHunk": "@@ -24,6 +27,10 @@\n    */\n   private final String url;\n \n+  private final TimeZone timeZone;\n+\n+  private final TransitMode vehicleType;", "originalCommit": "557ea50e8b14a8ddd70729a8de08a7b6b61dde8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkwOTEwNw==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3122#discussion_r464909107", "bodyText": "The mapper should handle null.", "author": "t2gran", "createdAt": "2020-08-04T09:06:21Z", "path": "src/main/java/org/opentripplanner/netex/loader/mapping/StopMapper.java", "diffHunk": "@@ -38,7 +39,12 @@ Stop mapQuayToStop(Quay quay, Station parentStation) {\n         null,\n         null,\n         null,\n-        null\n+        null,\n+        null,\n+        null,\n+        quay.getTransportMode() == null\n+            ? null\n+            : TransitModeMapper.mapMode(TransportModeMapper.mapVehicleMode(quay.getTransportMode()))", "originalCommit": "557ea50e8b14a8ddd70729a8de08a7b6b61dde8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkxMjUxNA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3122#discussion_r464912514", "bodyText": "JavaDoc", "author": "t2gran", "createdAt": "2020-08-04T09:12:12Z", "path": "src/main/java/org/opentripplanner/routing/RoutingService.java", "diffHunk": "@@ -52,7 +57,32 @@ public RoutingResponse route(RoutingRequest request, Router router) {\n     public List<StopFinder.StopAndDistance> findClosestStopsByWalking(", "originalCommit": "557ea50e8b14a8ddd70729a8de08a7b6b61dde8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkxNTgxOQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3122#discussion_r464915819", "bodyText": "Rename to something like \"StreetGraphFinder\"...", "author": "t2gran", "createdAt": "2020-08-04T09:17:43Z", "path": "src/main/java/org/opentripplanner/routing/StopFinder.java", "diffHunk": "@@ -1,49 +1,59 @@\n package org.opentripplanner.routing;\n \n+import org.opentripplanner.model.FeedScopedId;\n import org.opentripplanner.model.GenericLocation;\n import org.opentripplanner.model.Stop;\n+import org.opentripplanner.model.TransitMode;\n+import org.opentripplanner.model.TripPattern;\n+import org.opentripplanner.model.TripTimeShort;\n import org.opentripplanner.routing.algorithm.astar.AStar;\n import org.opentripplanner.routing.algorithm.astar.TraverseVisitor;\n+import org.opentripplanner.routing.algorithm.astar.strategies.SearchTerminationStrategy;\n+import org.opentripplanner.routing.algorithm.astar.strategies.TrivialRemainingWeightHeuristic;\n import org.opentripplanner.routing.api.request.RoutingRequest;\n+import org.opentripplanner.routing.bike_rental.BikeRentalStation;\n import org.opentripplanner.routing.core.State;\n import org.opentripplanner.routing.core.TraverseMode;\n import org.opentripplanner.routing.graph.Edge;\n import org.opentripplanner.routing.graph.Graph;\n import org.opentripplanner.routing.graph.Vertex;\n import org.opentripplanner.routing.spt.DominanceFunction;\n+import org.opentripplanner.routing.spt.ShortestPathTree;\n+import org.opentripplanner.routing.vertextype.BikeRentalStationVertex;\n import org.opentripplanner.routing.vertextype.TransitStopVertex;\n \n import java.util.ArrayList;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n+\n+import static java.util.stream.Collectors.toList;\n \n public class StopFinder {", "originalCommit": "557ea50e8b14a8ddd70729a8de08a7b6b61dde8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkyMDQ5Mw==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3122#discussion_r464920493", "bodyText": "Doc: Move this and consolidate with the code in the NerbyStopFinder.", "author": "t2gran", "createdAt": "2020-08-04T09:25:45Z", "path": "src/main/java/org/opentripplanner/routing/StopFinder.java", "diffHunk": "@@ -1,49 +1,59 @@\n package org.opentripplanner.routing;\n \n+import org.opentripplanner.model.FeedScopedId;\n import org.opentripplanner.model.GenericLocation;\n import org.opentripplanner.model.Stop;\n+import org.opentripplanner.model.TransitMode;\n+import org.opentripplanner.model.TripPattern;\n+import org.opentripplanner.model.TripTimeShort;\n import org.opentripplanner.routing.algorithm.astar.AStar;\n import org.opentripplanner.routing.algorithm.astar.TraverseVisitor;\n+import org.opentripplanner.routing.algorithm.astar.strategies.SearchTerminationStrategy;\n+import org.opentripplanner.routing.algorithm.astar.strategies.TrivialRemainingWeightHeuristic;\n import org.opentripplanner.routing.api.request.RoutingRequest;\n+import org.opentripplanner.routing.bike_rental.BikeRentalStation;\n import org.opentripplanner.routing.core.State;\n import org.opentripplanner.routing.core.TraverseMode;\n import org.opentripplanner.routing.graph.Edge;\n import org.opentripplanner.routing.graph.Graph;\n import org.opentripplanner.routing.graph.Vertex;\n import org.opentripplanner.routing.spt.DominanceFunction;\n+import org.opentripplanner.routing.spt.ShortestPathTree;\n+import org.opentripplanner.routing.vertextype.BikeRentalStationVertex;\n import org.opentripplanner.routing.vertextype.TransitStopVertex;\n \n import java.util.ArrayList;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n+\n+import static java.util.stream.Collectors.toList;\n \n public class StopFinder {\n \n   /* TODO: an almost similar function exists in ProfileRouter, combine these.\n    *  Should these live in a separate class? */", "originalCommit": "557ea50e8b14a8ddd70729a8de08a7b6b61dde8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkyMTM5Ng==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3122#discussion_r464921396", "bodyText": "All public classes and enums should be in their own file.", "author": "t2gran", "createdAt": "2020-08-04T09:27:20Z", "path": "src/main/java/org/opentripplanner/routing/StopFinder.java", "diffHunk": "@@ -78,4 +88,199 @@ public void visitVertex(State state) {\n       }\n     }\n   }\n+\n+  public enum PlaceType {\n+    STOP, DEPARTURE_ROW, BICYCLE_RENT, BIKE_PARK, CAR_PARK;\n+  }\n+\n+  public static class PlaceAndDistance {\n+    public Object place;\n+    public int distance;\n+\n+    public PlaceAndDistance(Object place, int distance) {\n+      this.place = place;\n+      this.distance = distance;\n+    }\n+  }", "originalCommit": "557ea50e8b14a8ddd70729a8de08a7b6b61dde8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bd4c68252063299f28f9d97433ad59df32ce93c3", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/bd4c68252063299f28f9d97433ad59df32ce93c3", "message": "Merge branch 'legacygraphql' of github.com:kyyticom/OpenTripPlanner into legacygraphql", "committedDate": "2020-08-04T12:42:44Z", "type": "commit"}, {"oid": "8f1994201bf52e7312a7f12ef5a5b64799750eab", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/8f1994201bf52e7312a7f12ef5a5b64799750eab", "message": "Merge branch 'dev-2.x' of github.com:opentripplanner/OpenTripPlanner into legacygraphql", "committedDate": "2020-08-04T12:42:56Z", "type": "commit"}, {"oid": "adb7c3004e6e8aac0ed08787a0b2eee261b24294", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/adb7c3004e6e8aac0ed08787a0b2eee261b24294", "message": "Add javadoc", "committedDate": "2020-08-04T12:54:55Z", "type": "commit"}, {"oid": "a19b600ecd80994b6711f233621b5fd8bde1c9bf", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/a19b600ecd80994b6711f233621b5fd8bde1c9bf", "message": "Make TransitModeMapper handle empty default value", "committedDate": "2020-08-04T12:56:30Z", "type": "commit"}, {"oid": "421c8d10527f999db3fc0ba4a38018c4d70f09b4", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/421c8d10527f999db3fc0ba4a38018c4d70f09b4", "message": "Merge branch 'dev-2.x' of github.com:opentripplanner/OpenTripPlanner into legacygraphql", "committedDate": "2020-08-04T20:01:34Z", "type": "commit"}, {"oid": "43c71bc39969e15ac6382b1686f9a04c604ee717", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/43c71bc39969e15ac6382b1686f9a04c604ee717", "message": "Fix issues after merge", "committedDate": "2020-08-04T20:10:59Z", "type": "commit"}, {"oid": "34dc22b10ecc809a7084aaa4d17231ea632793c5", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/34dc22b10ecc809a7084aaa4d17231ea632793c5", "message": "Split StopFinder into its own package", "committedDate": "2020-08-05T09:45:35Z", "type": "commit"}, {"oid": "c4d9ee3afeab6aeb2dae2db587db0583b745f370", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/c4d9ee3afeab6aeb2dae2db587db0583b745f370", "message": "Fold in part of NearbyStopFinder to graph_Finder package", "committedDate": "2020-08-05T14:47:55Z", "type": "commit"}, {"oid": "7a995a52779defe7e78ecde21a5b040220742de7", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/7a995a52779defe7e78ecde21a5b040220742de7", "message": "Add Javadoc for graph_finder", "committedDate": "2020-08-06T12:04:20Z", "type": "commit"}, {"oid": "9590a0c7898469304014946f98c3d47f8a73c1d2", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/9590a0c7898469304014946f98c3d47f8a73c1d2", "message": "Return empty lists for alerts", "committedDate": "2020-08-06T12:08:04Z", "type": "commit"}, {"oid": "97af284c5aa522cd4f7f552c37482b4e11c2b827", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/97af284c5aa522cd4f7f552c37482b4e11c2b827", "message": "Add timeout to getGraphQLExecutionResult", "committedDate": "2020-08-06T13:34:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQzNDA0MA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3122#discussion_r466434040", "bodyText": "in the .... ?", "author": "t2gran", "createdAt": "2020-08-06T14:00:21Z", "path": "src/main/java/org/opentripplanner/model/SimpleTransfer.java", "diffHunk": "@@ -9,6 +9,7 @@\n  * Represents a transfer between stops that does not take the street network into account.\n  *\n  * TODO these should really have a set of valid modes in case bike vs. walk transfers are different\n+ * TODO Should we just store the StopAtDistance in the", "originalCommit": "97af284c5aa522cd4f7f552c37482b4e11c2b827", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ4ODE3Ng==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3122#discussion_r466488176", "bodyText": "Fixed", "author": "hannesj", "createdAt": "2020-08-06T15:16:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQzNDA0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ0MDg2Mw==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3122#discussion_r466440863", "bodyText": "FYI: In the feature I would like us to use the java.time types, not a long (epoch). There is a separate issue on this, and I think it is best to change this all over in a separate PR.", "author": "t2gran", "createdAt": "2020-08-06T14:10:19Z", "path": "src/main/java/org/opentripplanner/routing/RoutingService.java", "diffHunk": "@@ -96,6 +95,36 @@ public RoutingResponse route(RoutingRequest request, Router router) {\n         return StopTimesHelper.getStopTimesForStop(this, stop, serviceDate, omitNonPickups);\n     }\n \n+\n+    /**\n+     * Fetch upcoming vehicle departures from a stop for a specific pattern, passing the stop\n+     * for the previous, current and next service date. It uses a priority queue to keep track of\n+     * the next departures. The queue is shared between all dates, as services from the previous\n+     * service date can visit the stop later than the current service date's services.\n+     * <p>\n+     * TODO: Add frequency based trips\n+     *\n+     * @param stop               Stop object to perform the search for\n+     * @param pattern            Pattern object to perform the search for\n+     * @param startTime          Start time for the search. Seconds from UNIX epoch\n+     * @param timeRange          Searches forward for timeRange seconds from startTime\n+     * @param numberOfDepartures Number of departures to fetch per pattern\n+     * @param omitNonPickups     If true, do not include vehicles that will not pick up passengers.\n+     */\n+    public List<TripTimeShort> stopTimesForPatternAtStop(\n+            Stop stop, TripPattern pattern, long startTime, int timeRange, int numberOfDepartures, boolean omitNonPickups\n+    ) {\n+        return StopTimesHelper.stopTimesForPatternAtStop(this,\n+                lazyGetTimeTableSnapShot(),\n+                stop,\n+                pattern,\n+                startTime,\n+                timeRange,\n+                numberOfDepartures,\n+                omitNonPickups\n+        );\n+    }\n+", "originalCommit": "97af284c5aa522cd4f7f552c37482b4e11c2b827", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ3NTY0Mw==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3122#discussion_r466475643", "bodyText": "\ud83d\udc4d", "author": "hannesj", "createdAt": "2020-08-06T14:58:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ0MDg2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ1MTgyMg==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3122#discussion_r466451822", "bodyText": "FYI: We have a few of these package names with _ in them, but strictly they are not recommended by the original Java Style guide. I might refactor it at some point to be compliant. The standard recommend using just graphfinder. I guess the reason is quite old; some filesystems having problems with special characters.", "author": "t2gran", "createdAt": "2020-08-06T14:25:38Z", "path": "src/main/java/org/opentripplanner/routing/graph_finder/DirectGraphFinder.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package org.opentripplanner.routing.graph_finder;", "originalCommit": "97af284c5aa522cd4f7f552c37482b4e11c2b827", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ3NDMzOA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3122#discussion_r466474338", "bodyText": "Renamed, easier to do now.", "author": "hannesj", "createdAt": "2020-08-06T14:57:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ1MTgyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ1NTQ3MA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3122#discussion_r466455470", "bodyText": "For the inner most loop iterator variable, the defacto standard I am used to, is to use it, which is also used in lambdas. What is the rationale behind the number in the variable names here?", "author": "t2gran", "createdAt": "2020-08-06T14:30:27Z", "path": "src/main/java/org/opentripplanner/routing/graph_finder/DirectGraphFinder.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package org.opentripplanner.routing.graph_finder;\n+\n+import com.beust.jcommander.internal.Lists;\n+import org.locationtech.jts.geom.Coordinate;\n+import org.locationtech.jts.geom.GeometryFactory;\n+import org.opentripplanner.common.geometry.GeometryUtils;\n+import org.opentripplanner.common.geometry.SphericalDistanceLibrary;\n+import org.opentripplanner.model.FeedScopedId;\n+import org.opentripplanner.model.TransitMode;\n+import org.opentripplanner.routing.RoutingService;\n+import org.opentripplanner.routing.graph.Graph;\n+import org.opentripplanner.routing.impl.StreetVertexIndex;\n+import org.opentripplanner.routing.vertextype.TransitStopVertex;\n+\n+import java.util.List;\n+\n+/**\n+ * A Graph finder used in conjunction with a graph, which does not have a street network included.\n+ * Also usable if performance is more important or if the \"as the crow flies\" distance id required.\n+ */\n+public class DirectGraphFinder implements GraphFinder {\n+\n+  private static GeometryFactory geometryFactory = GeometryUtils.getGeometryFactory();\n+\n+  private StreetVertexIndex streetIndex;\n+\n+  public DirectGraphFinder(Graph graph) {\n+    this.streetIndex = graph.streetIndex != null ? graph.streetIndex : new StreetVertexIndex(graph);\n+  }\n+\n+  /**\n+   * Return all stops within a certain radius of the given vertex, using straight-line distance independent of streets.\n+   * If the origin vertex is a StopVertex, the result will include it.\n+   */\n+  @Override\n+  public List<StopAtDistance> findClosestStops(double lat, double lon, double radiusMeters) {\n+    List<StopAtDistance> stopsFound = Lists.newArrayList();\n+    Coordinate c0 = new Coordinate(lon, lat);\n+    for (TransitStopVertex ts1 : streetIndex.getNearbyTransitStops(c0, radiusMeters)) {", "originalCommit": "97af284c5aa522cd4f7f552c37482b4e11c2b827", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ3Mjk0OA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3122#discussion_r466472948", "bodyText": "This was just lifted off from here https://github.com/opentripplanner/OpenTripPlanner/pull/3122/files#diff-7aa5baeb59c0d0b53802ce6ec0efe627L216-L233. I'll update it.", "author": "hannesj", "createdAt": "2020-08-06T14:55:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ1NTQ3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ3MjczOA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3122#discussion_r466472738", "bodyText": "Tip: Set.copyOf(list) is preferable since there is no modifications to the set afterwards.", "author": "t2gran", "createdAt": "2020-08-06T14:54:45Z", "path": "src/main/java/org/opentripplanner/routing/graph_finder/PlaceFinderTraverseVisitor.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.opentripplanner.routing.graph_finder;\n+\n+import org.opentripplanner.model.FeedScopedId;\n+import org.opentripplanner.model.Stop;\n+import org.opentripplanner.model.TransitMode;\n+import org.opentripplanner.model.TripPattern;\n+import org.opentripplanner.routing.RoutingService;\n+import org.opentripplanner.routing.algorithm.astar.TraverseVisitor;\n+import org.opentripplanner.routing.algorithm.astar.strategies.SearchTerminationStrategy;\n+import org.opentripplanner.routing.bike_rental.BikeRentalStation;\n+import org.opentripplanner.routing.core.State;\n+import org.opentripplanner.routing.graph.Edge;\n+import org.opentripplanner.routing.graph.Vertex;\n+import org.opentripplanner.routing.vertextype.BikeRentalStationVertex;\n+import org.opentripplanner.routing.vertextype.TransitStopVertex;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+/**\n+ * A TraverseVisitor used in finding various types of places while walking the street graph.\n+ *\n+ * TODO Add car and bike parks\n+ */\n+public class PlaceFinderTraverseVisitor implements TraverseVisitor {\n+\n+  public final List<PlaceAtDistance> placesFound = new ArrayList<>();\n+  private final RoutingService routingService;\n+  private final Set<TransitMode> filterByModes;\n+  private final Set<FeedScopedId> filterByStops;\n+  private final Set<FeedScopedId> filterByRoutes;\n+  private final Set<String> filterByBikeRentalStation;\n+  private final Set<String> seenPatternAtStops = new HashSet<>();\n+  private final Set<FeedScopedId> seenStops = new HashSet<>();\n+  private final Set<String> seenBicycleRentalStations = new HashSet<>();\n+  private final boolean includeStops;\n+  private final boolean includePatternAtStops;\n+  private final boolean includeBikeShares;\n+  private final int maxResults;\n+\n+  /**\n+   *\n+   * @param routingService A RoutingService used in finding information about the various places.\n+   * @param filterByModes A list of TransitModes for which to find Stops and PatternAtStops. Use null to disable the filtering.\n+   * @param filterByPlaceTypes A list of PlaceTypes to search for. Use null to disable the filtering, and search for all types.\n+   * @param filterByStops A list of Stop ids for which to find Stops and PatternAtStops. Use null to disable the filtering.\n+   * @param filterByRoutes A list of Route ids used for filtering Stops. Only the stops which are served by the route are returned. Use null to disable the filtering.\n+   * @param filterByBikeRentalStations A list of BikeRentalStation ids to use in filtering.  Use null to disable the filtering.\n+   * @param maxResults Maximum number of results to return.\n+   */\n+  public PlaceFinderTraverseVisitor(\n+      RoutingService routingService, List<TransitMode> filterByModes,\n+      List<PlaceType> filterByPlaceTypes, List<FeedScopedId> filterByStops,\n+      List<FeedScopedId> filterByRoutes, List<String> filterByBikeRentalStations, int maxResults\n+  ) {\n+    this.routingService = routingService;\n+    this.filterByModes = toSet(filterByModes);\n+    this.filterByStops = toSet(filterByStops);\n+    this.filterByRoutes = toSet(filterByRoutes);\n+    this.filterByBikeRentalStation = toSet(filterByBikeRentalStations);\n+\n+    includeStops = filterByPlaceTypes == null || filterByPlaceTypes.contains(PlaceType.STOP);\n+    includePatternAtStops = filterByPlaceTypes == null\n+        || filterByPlaceTypes.contains(PlaceType.PATTERN_AT_STOP);\n+    includeBikeShares = filterByPlaceTypes == null\n+        || filterByPlaceTypes.contains(PlaceType.BICYCLE_RENT);\n+    this.maxResults = maxResults;\n+  }\n+\n+  private static <T> Set<T> toSet(List<T> list) {\n+    if (list == null) { return null; }\n+    return new HashSet<T>(list);", "originalCommit": "97af284c5aa522cd4f7f552c37482b4e11c2b827", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ4ODAxMA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3122#discussion_r466488010", "bodyText": "Changed", "author": "hannesj", "createdAt": "2020-08-06T15:16:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ3MjczOA=="}], "type": "inlineReview"}, {"oid": "f2baa49e03270baa80bed36808703bff7b9d60ce", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/f2baa49e03270baa80bed36808703bff7b9d60ce", "message": "rename graph_finder graphfinder", "committedDate": "2020-08-06T14:56:29Z", "type": "commit"}, {"oid": "e7e415e602a34299010d5163b021cca4b579338c", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/e7e415e602a34299010d5163b021cca4b579338c", "message": "Rename variables", "committedDate": "2020-08-06T14:58:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ4MDg0NQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3122#discussion_r466480845", "bodyText": "FYI: Nice, we do this in at least one other place - so at some point we can extract the (de-)serialization of the 2 ids and reuse it.", "author": "t2gran", "createdAt": "2020-08-06T15:06:11Z", "path": "src/main/java/org/opentripplanner/routing/graph_finder/PatternAtStop.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.opentripplanner.routing.graph_finder;\n+\n+import org.opentripplanner.model.FeedScopedId;\n+import org.opentripplanner.model.Stop;\n+import org.opentripplanner.model.TripPattern;\n+import org.opentripplanner.model.TripTimeShort;\n+import org.opentripplanner.routing.RoutingService;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.List;\n+\n+/**\n+ * A reference to a pattern at a specific stop.\n+ *\n+ * TODO Is this the right package for this?\n+ */\n+public class PatternAtStop {\n+\n+  public String id;\n+  public Stop stop;\n+  public TripPattern pattern;\n+\n+  public PatternAtStop(Stop stop, TripPattern pattern) {\n+    this.id = toId(stop, pattern);\n+    this.stop = stop;\n+    this.pattern = pattern;\n+  }\n+\n+  /**\n+   * Converts the ids of the pattern and stop to an opaque id, which can be supplied to the users\n+   * to be used for refetching the combination.\n+   */\n+  private static String toId(Stop stop, TripPattern pattern) {\n+    Base64.Encoder encoder = Base64.getEncoder();\n+    return encoder.encodeToString(stop.getId().toString().getBytes(StandardCharsets.UTF_8)) + \";\" +\n+        encoder.encodeToString(pattern.getId().toString().getBytes(StandardCharsets.UTF_8));\n+  }\n+\n+  /**\n+   * Convert an id generated by the toId method to an instance of PatternAtStop. Uses the supplied\n+   * routingService to fetch the TripPattern and Stop instances.\n+   *\n+   * @see PatternAtStop#toId(Stop, TripPattern)\n+   */\n+  public static PatternAtStop fromId(RoutingService routingService, String id) {\n+    String[] parts = id.split(\";\", 2);\n+    Base64.Decoder decoder = Base64.getDecoder();\n+    FeedScopedId stopId = FeedScopedId.parseId(new String(decoder.decode(parts[0]), StandardCharsets.UTF_8));\n+    FeedScopedId patternId = FeedScopedId.parseId(new String(decoder.decode(parts[1]), StandardCharsets.UTF_8));\n+    return new PatternAtStop(routingService.getStopForId(stopId),\n+        routingService.getTripPatternForId(patternId)\n+    );\n+  }", "originalCommit": "97af284c5aa522cd4f7f552c37482b4e11c2b827", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "77e7f8f32d9f9007cc12b3050fda7bd5e0472af5", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/77e7f8f32d9f9007cc12b3050fda7bd5e0472af5", "message": "Minor fixes based on comments.", "committedDate": "2020-08-06T15:16:27Z", "type": "commit"}]}