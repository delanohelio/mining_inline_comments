{"pr_number": 3211, "pr_title": "Cleanup transit entity", "pr_createdAt": "2020-10-08T23:27:43Z", "pr_url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3211", "timeline": [{"oid": "916e75be16f356da5cfac2f6f5b835b0f64c6951", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/916e75be16f356da5cfac2f6f5b835b0f64c6951", "message": "Clean code: Make FeedInfo immutable and a NONE TransitEntity. This commit also remove the GenerateMissingIds, used to generate FeedInfo ids, but GTFS library we use do this already and NeTEx do not have FeedInfo, it just have a static shared configurable feedId.", "committedDate": "2020-10-08T23:28:55Z", "type": "commit"}, {"oid": "879c69549eadd14f67e94882ac4cb8b2f5b7674a", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/879c69549eadd14f67e94882ac4cb8b2f5b7674a", "message": "Clean code: Make StopTimeKey a TransitEntity with a FeedScopeId, this prepare for inlining the generic type on TransitEntity, all entities are now FeedScopedIds.", "committedDate": "2020-10-08T23:28:55Z", "type": "commit"}, {"oid": "d57c16470beca49f137f0c7b8f7097482e4a9137", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/d57c16470beca49f137f0c7b8f7097482e4a9137", "message": "Clean code: Remove generic type argument from TransitEntity, the 'id' is now a FeedScopedId.", "committedDate": "2020-10-08T23:28:55Z", "type": "commit"}, {"oid": "236c05560fabc07658d98c2b68345c83ade4446f", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/236c05560fabc07658d98c2b68345c83ade4446f", "message": "Clean code: Encapsulate id as \"read-only\" in TransitEntity. This require some refactorings, like generating the TripPattern id at the time it is created, not as a post processing step. It also require all sub-classes of transit entity to have a constructor with the id as a parameter. THIS COMMIT COMPILES, BUT TESTS FAILS BECAUSE GENERATING TRIP PATTERN IDS IS LEFT TO THE NEXT COMMIT.", "committedDate": "2020-10-08T23:28:55Z", "type": "commit"}, {"oid": "945184168355309126bbeb74919f6d3df1d37fa6", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/945184168355309126bbeb74919f6d3df1d37fa6", "message": "Clean code: Generate TripPattern id BEFORE creating new pattern to be able to make the `TripPattern.id` read-only.", "committedDate": "2020-10-08T23:28:55Z", "type": "commit"}, {"oid": "945184168355309126bbeb74919f6d3df1d37fa6", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/945184168355309126bbeb74919f6d3df1d37fa6", "message": "Clean code: Generate TripPattern id BEFORE creating new pattern to be able to make the `TripPattern.id` read-only.", "committedDate": "2020-10-08T23:28:55Z", "type": "forcePushed"}, {"oid": "58ae629e67912dd4f984dd6300e3e1397806e09c", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/58ae629e67912dd4f984dd6300e3e1397806e09c", "message": "Merge branch 'dev-2.x' into otp2_cleanup_TransitEntity", "committedDate": "2020-10-12T09:10:18Z", "type": "commit"}, {"oid": "1d423d4ca017576d59bc10bc58da6b7c53405961", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/1d423d4ca017576d59bc10bc58da6b7c53405961", "message": "Merge remote-tracking branch 'otp/dev-2.x' into otp2_cleanup_TransitEntity", "committedDate": "2020-10-15T09:18:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU1OTQ3Nw==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3211#discussion_r508559477", "bodyText": "It would be good to have a comment explaining why unsynchronized increment-and-read is not problematic here. I see that this is called from one synchronized method, but also from one other unsynchronized method and it's not immediately obvious whether they can both run concurrently on different threads.\nOr to avoid placing lots of special conditions on use of this method it could just be synchronized (which has very low cost when there's no contention).", "author": "abyrd", "createdAt": "2020-10-20T14:30:51Z", "path": "src/ext/java/org/opentripplanner/ext/siri/SiriTripPatternIdGenerator.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.opentripplanner.ext.siri;\n+\n+import org.opentripplanner.gtfs.GenerateTripPatternsOperation;\n+import org.opentripplanner.model.FeedScopedId;\n+import org.opentripplanner.model.Route;\n+import org.opentripplanner.model.Trip;\n+\n+class SiriTripPatternIdGenerator {\n+  private int counter = 0;\n+\n+  /**\n+   * Generate unique trip pattern code for real-time added trip pattern. This function roughly\n+   * follows the format of {@link GenerateTripPatternsOperation#generateUniqueIdForTripPattern(Route, int)}.\n+   * <p>\n+   * The generator add a postfix 'RT' to indicate that this trip pattern is generated at REAL-TIME.\n+   */\n+  FeedScopedId generateUniqueTripPatternId(Trip trip) {\n+    Route route = trip.getRoute();\n+    FeedScopedId routeId = route.getId();\n+    String directionId = trip.getDirectionId();\n+    if( directionId == null) { directionId = \"\"; }\n+\n+    // OBA library uses underscore as separator, we're moving toward colon.\n+    String id = String.format(\"%s:%s:%03d:RT\", routeId.getId(), directionId, ++counter);", "originalCommit": "945184168355309126bbeb74919f6d3df1d37fa6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "be0094a8295b634213b5b64f8143629ce0cf527d", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/be0094a8295b634213b5b64f8143629ce0cf527d", "message": "Made the SiriTripPatternIdGenerator thread safe, by using a AtomicInteger for the index.", "committedDate": "2020-10-20T15:05:40Z", "type": "commit"}, {"oid": "be0094a8295b634213b5b64f8143629ce0cf527d", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/be0094a8295b634213b5b64f8143629ce0cf527d", "message": "Made the SiriTripPatternIdGenerator thread safe, by using a AtomicInteger for the index.", "committedDate": "2020-10-20T15:05:40Z", "type": "forcePushed"}]}