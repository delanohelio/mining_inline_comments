{"pr_number": 3178, "pr_title": "Add changes in RAPTOR algorithm required for access/egress containing public service legs", "pr_createdAt": "2020-09-10T07:08:27Z", "pr_url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3178", "timeline": [{"oid": "33390952d9ccbe76b19f3debc6e96f7bfda383fb", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/33390952d9ccbe76b19f3debc6e96f7bfda383fb", "message": "Fix bug, where the index was comapred, not the stop index", "committedDate": "2020-09-10T06:17:37Z", "type": "commit"}, {"oid": "6b71d17fd988c3c0fb7c96b834354211894c629b", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/6b71d17fd988c3c0fb7c96b834354211894c629b", "message": "Add new methods in RaptorTransfer to support adding pre-existing legs into raptor", "committedDate": "2020-09-10T06:21:35Z", "type": "commit"}, {"oid": "42f5ecedd75266f2a484fc55325544a187fbbe7b", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/42f5ecedd75266f2a484fc55325544a187fbbe7b", "message": "Use more relaxed types for PathLeg", "committedDate": "2020-09-10T06:33:02Z", "type": "commit"}, {"oid": "134ef832c815c1592014a7050dff42800a93ff12", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/134ef832c815c1592014a7050dff42800a93ff12", "message": "Calculate paretoRound in AccessStopArrival", "committedDate": "2020-09-10T06:39:18Z", "type": "commit"}, {"oid": "d3cafb04a42c83f9b5f249f463603eae2a0f5f0b", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/d3cafb04a42c83f9b5f249f463603eae2a0f5f0b", "message": "Add arrivals via transfers, if the egress leg is connectedByPublicService", "committedDate": "2020-09-10T06:48:09Z", "type": "commit"}, {"oid": "15d52e0c6e28855bf92b440a86cc53ae7118e65d", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/15d52e0c6e28855bf92b440a86cc53ae7118e65d", "message": "Add transfer between access and transit in path mapper", "committedDate": "2020-09-10T06:49:09Z", "type": "commit"}, {"oid": "b1c61f53a050966bdc2fc83951db4a27950dab0d", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/b1c61f53a050966bdc2fc83951db4a27950dab0d", "message": "Update transit times if access is connectedByPublicService", "committedDate": "2020-09-10T06:52:50Z", "type": "commit"}, {"oid": "fd76160e90888baa632466515ee1e290526c9194", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/fd76160e90888baa632466515ee1e290526c9194", "message": "Add access legs in multiple rounds", "committedDate": "2020-09-10T07:02:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2MDExOQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3178#discussion_r486860119", "bodyText": "services not part of the RAPTOR algorithm, such as flex or micromobility services, used as part of this RaptorTransfer", "author": "hannesj", "createdAt": "2020-09-11T08:32:53Z", "path": "src/main/java/org/opentripplanner/transit/raptor/api/transit/RaptorTransfer.java", "diffHunk": "@@ -47,4 +47,23 @@\n      */\n     int durationInSeconds();\n \n+    /**\n+     * Return the number publicly available services for this {@link RaptorTransfer}. This is used by Raptor to get the", "originalCommit": "fd76160e90888baa632466515ee1e290526c9194", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2Mjc4MQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3178#discussion_r486862781", "bodyText": "Some services involving transfers are not handled by the RAPTOR algorithm and need to be inserted into the algorithm at a specific place of the algorithm.", "author": "hannesj", "createdAt": "2020-09-11T08:37:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2MDExOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2MzQzMA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3178#discussion_r486863430", "bodyText": "This method should only be overridden if an access or egress has services, such as flex, where the calculation happens outside the RAPTOR algorithm", "author": "hannesj", "createdAt": "2020-09-11T08:39:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2MDExOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2NDM0Ng==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3178#discussion_r486864346", "bodyText": "Add a header comment above that these methods should be used only for special cases, such as flex or micromobility", "author": "hannesj", "createdAt": "2020-09-11T08:40:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2MDExOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg3OTI4OA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3178#discussion_r486879288", "bodyText": "during the RAPTOR algorithm", "author": "hannesj", "createdAt": "2020-09-11T09:00:34Z", "path": "src/main/java/org/opentripplanner/transit/raptor/rangeraptor/multicriteria/arrivals/AbstractStopArrival.java", "diffHunk": "@@ -60,9 +60,9 @@\n     /**\n      * Initial state - first stop visited.", "originalCommit": "134ef832c815c1592014a7050dff42800a93ff12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg4MDY0Mw==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3178#discussion_r486880643", "bodyText": "move calculation of the round to a separate method", "author": "hannesj", "createdAt": "2020-09-11T09:01:58Z", "path": "src/main/java/org/opentripplanner/transit/raptor/rangeraptor/multicriteria/arrivals/AccessStopArrival.java", "diffHunk": "@@ -15,7 +15,7 @@\n     private final RaptorTransfer access;\n \n     public AccessStopArrival(int departureTime, int cost, RaptorTransfer access) {\n-        super(access.stop(), departureTime, access.durationInSeconds(), cost);\n+        super(access.stop(), departureTime, access.durationInSeconds(), cost, access.numberOfPublicServiceLegs() * 2 - (access.connectedByPublicService() ? 1 : 0));", "originalCommit": "134ef832c815c1592014a7050dff42800a93ff12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg4NDcyNQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3178#discussion_r486884725", "bodyText": "Do this in a loop, checking the tyoes in an if-elseif-construct", "author": "hannesj", "createdAt": "2020-09-11T09:06:09Z", "path": "src/main/java/org/opentripplanner/transit/raptor/rangeraptor/path/ForwardPathMapper.java", "diffHunk": "@@ -39,6 +39,11 @@ private void setRangeRaptorIterationDepartureTime(int iterationDepartureTime) {\n         arrival = destinationArrival.previous();\n         lastLeg = createEgressPathLeg(destinationArrival);\n \n+        if (arrival.arrivedByTransfer()) {", "originalCommit": "15d52e0c6e28855bf92b440a86cc53ae7118e65d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg4NzQwMg==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3178#discussion_r486887402", "bodyText": "Move this into findAllTransitForRound", "author": "hannesj", "createdAt": "2020-09-11T09:08:50Z", "path": "src/main/java/org/opentripplanner/transit/raptor/rangeraptor/RangeRaptorWorker.java", "diffHunk": "@@ -156,8 +156,15 @@ private void runRaptorForMinute(int iterationDepartureTime) {\n             // as that will be rare and complicates the code\n             timerByMinuteScheduleSearch().time(this::findAllTransitForRound);\n \n+            // TODO this needs to be below transitsForRoundComplete to not clear touched stops\n+            doTransfersForAccessLegs(iterationDepartureTime, true);", "originalCommit": "fd76160e90888baa632466515ee1e290526c9194", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg4NzYxNg==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3178#discussion_r486887616", "bodyText": "Move this into transfersForRound", "author": "hannesj", "createdAt": "2020-09-11T09:09:00Z", "path": "src/main/java/org/opentripplanner/transit/raptor/rangeraptor/RangeRaptorWorker.java", "diffHunk": "@@ -156,8 +156,15 @@ private void runRaptorForMinute(int iterationDepartureTime) {\n             // as that will be rare and complicates the code\n             timerByMinuteScheduleSearch().time(this::findAllTransitForRound);\n \n+            // TODO this needs to be below transitsForRoundComplete to not clear touched stops\n+            doTransfersForAccessLegs(iterationDepartureTime, true);\n+\n             timerByMinuteTransfers().time(this::transfersForRound);\n \n+            doTransfersForAccessLegs(iterationDepartureTime, false);", "originalCommit": "fd76160e90888baa632466515ee1e290526c9194", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "45f52e43e0aa20ed9f46ee4d74ff133ed0146c6d", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/45f52e43e0aa20ed9f46ee4d74ff133ed0146c6d", "message": "Make path mapping more robust", "committedDate": "2020-09-15T07:34:56Z", "type": "commit"}, {"oid": "108d4c20d958e7604e76c0be0a366cc6dbb96d8a", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/108d4c20d958e7604e76c0be0a366cc6dbb96d8a", "message": "Review fixes", "committedDate": "2020-09-15T08:00:41Z", "type": "commit"}, {"oid": "d4429245465fd09e3feb8ef62fd4252adafef277", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/d4429245465fd09e3feb8ef62fd4252adafef277", "message": "Merge remote-tracking branch 'origin/dev-2.x' into flex-upstream-raptor", "committedDate": "2020-09-15T08:03:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ5NzU3MA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3178#discussion_r488497570", "bodyText": "Move default implementation here", "author": "hannesj", "createdAt": "2020-09-15T08:50:50Z", "path": "src/main/java/org/opentripplanner/transit/raptor/api/transit/RaptorTransfer.java", "diffHunk": "@@ -19,6 +19,22 @@\n      */\n     int stop();\n \n+    /**\n+     * The time duration to walk or travel the leg in seconds. This is not the entire duration from the journey origin,\n+     * but just:\n+     * <ul>\n+     *     <li>Access: journey origin to first stop.\n+     *     <li>Transit: stop to stop.\n+     *     <li>Egress: last stop to journey destination.\n+     * </ul>\n+     */\n+    int durationInSeconds();\n+\n+    /* TIME-DEPENDENT ACCESS/TRANSFER/EGRESS */", "originalCommit": "108d4c20d958e7604e76c0be0a366cc6dbb96d8a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ5OTM1Nw==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3178#discussion_r488499357", "bodyText": "arrives/departs", "author": "hannesj", "createdAt": "2020-09-15T08:53:34Z", "path": "src/main/java/org/opentripplanner/transit/raptor/api/transit/RaptorTransfer.java", "diffHunk": "@@ -36,32 +52,34 @@\n      */\n     int latestArrivalTime(int requestedArrivalTime);\n \n-    /**\n-     * The time duration to walk or travel the leg in seconds. This is not the entire duration from the journey origin,\n-     * but just:\n-     * <ul>\n-     *     <li>Access: journey origin to first stop.\n-     *     <li>Transit: stop to stop.\n-     *     <li>Egress: last stop to journey destination.\n-     * </ul>\n-     */\n-    int durationInSeconds();\n+    /* ACCESS/TRANSFER/EGRESS CONTAINING MULTIPLE LEGS */\n+    // The methods below should be only overridden when a RaptorTransfer contains information about\n+    // public services, which were generated outside the RAPTOR algorithm. Examples of such schemes\n+    // include flexible transit service and TNC. They should not be used for regular\n+    // access/transfer/egress.\n \n     /**\n-     * Return the number publicly available services for this {@link RaptorTransfer}. This is used by Raptor to get the\n-     * number of transfers correct witch is part of the criteria used to keep optimal result. This method apply to both\n-     * access and egress, but is not used for public-transit-transfers.\n+     * Some services involving transfers are not handled by the RAPTOR algorithm and need to be\n+     * inserted into the algorithm at a specific place of the algorithm, and to be accounted for,\n+     * in order to get the number of transfers correct, witch is part of the criteria used to keep\n+     * optimal result.\n+     *\n+     * @return the number legs generated by publicly available services, generated outside the\n+     * RAPTOR algorithm for this {@link RaptorTransfer}.\n      */\n     default int numberOfPublicServiceLegs() {\n         return 0;\n     }\n \n     /**\n-     * Is this {@link RaptorTransfer} is connected to the given {@code stop} by <b>transit</b>? For access and egress\n-     * paths we allow plugging in flex and other means of transport, witch might include one or more legs onboard a\n-     * vehicle. This method should return {@code true} if the leg connecting to the given stop is `onBoard` a public\n-     * transport or riding another kind of service like a taxi. This method apply to both access and egress, but is not\n-     * used for public-transit-transfers.\n+     * Is this {@link RaptorTransfer} is connected to the given {@code stop} directly by\n+     * <b>transit</b>? For access and egress paths we allow plugging in flexible transit and other\n+     * means of transport, witch might include one or more legs onboard a vehicle. This method\n+     * should return {@code true} if the leg connecting to the given stop arrives `onBoard` a public", "originalCommit": "108d4c20d958e7604e76c0be0a366cc6dbb96d8a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUwMzM2OQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3178#discussion_r488503369", "bodyText": "remove public service and replace with numberOfLegs with default one", "author": "hannesj", "createdAt": "2020-09-15T08:59:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ5OTM1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUwNzIxOQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3178#discussion_r488507219", "bodyText": "Move iterationDepartureTime  to be a field on RangeRaptorWorker", "author": "hannesj", "createdAt": "2020-09-15T09:05:28Z", "path": "src/main/java/org/opentripplanner/transit/raptor/rangeraptor/RangeRaptorWorker.java", "diffHunk": "@@ -154,16 +154,9 @@ private void runRaptorForMinute(int iterationDepartureTime) {\n \n             // NB since we have transfer limiting not bothering to cut off search when there are no more transfers\n             // as that will be rare and complicates the code\n-            timerByMinuteScheduleSearch().time(this::findAllTransitForRound);\n+            timerByMinuteScheduleSearch().time(() -> findAllTransitForRound(iterationDepartureTime));", "originalCommit": "108d4c20d958e7604e76c0be0a366cc6dbb96d8a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUxMDAwMw==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3178#discussion_r488510003", "bodyText": "Move to RoundTracker", "author": "hannesj", "createdAt": "2020-09-15T09:10:11Z", "path": "src/main/java/org/opentripplanner/transit/raptor/rangeraptor/multicriteria/arrivals/AbstractStopArrival.java", "diffHunk": "@@ -22,6 +23,15 @@\n         return (l, r) -> l.arrivalTime < r.arrivalTime || l.paretoRound < r.paretoRound;\n     }\n \n+    /**\n+     * Return the number of paretoRounds a RaptorTransfer should take. This is used for computing\n+     * the correct paretoRound for accesses and egresses, which contain public service legs, which\n+     * originate outside the RAPTOR algorithm.\n+     */\n+    public static int getParetoRounds(RaptorTransfer access) {", "originalCommit": "108d4c20d958e7604e76c0be0a366cc6dbb96d8a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ec2bc54ccec7cffb18ddea95d5424a028b8e6aa8", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/ec2bc54ccec7cffb18ddea95d5424a028b8e6aa8", "message": "Inline default earliestDepartureTime and latestArrivalTime", "committedDate": "2020-09-15T09:36:50Z", "type": "commit"}, {"oid": "431e117d4218278be632f0c250b27fd1899de02b", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/431e117d4218278be632f0c250b27fd1899de02b", "message": "Pull iterationDepartureTime to a field", "committedDate": "2020-09-15T09:56:43Z", "type": "commit"}, {"oid": "b7d80baa261ae90e5a3a8129c0e2b0eb5827df66", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/b7d80baa261ae90e5a3a8129c0e2b0eb5827df66", "message": "Change numberOfPublicServiceLegs to numberOfLegs", "committedDate": "2020-09-15T10:21:50Z", "type": "commit"}, {"oid": "126cd0ea3f596b0a81c9b6382eb2d16ff9864ddb", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/126cd0ea3f596b0a81c9b6382eb2d16ff9864ddb", "message": "Rename connectedByPublicService to stopReachedOnBoard", "committedDate": "2020-09-15T10:56:45Z", "type": "commit"}]}