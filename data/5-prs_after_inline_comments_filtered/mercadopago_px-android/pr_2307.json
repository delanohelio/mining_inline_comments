{"pr_number": 2307, "pr_title": "[Enhancement] Se agregan test unitarios", "pr_createdAt": "2020-08-28T13:34:09Z", "pr_url": "https://github.com/mercadopago/px-android/pull/2307", "timeline": [{"oid": "e7316bb344e799389575b62b3eefb207cf04cdbd", "url": "https://github.com/mercadopago/px-android/commit/e7316bb344e799389575b62b3eefb207cf04cdbd", "message": "refactor test", "committedDate": "2020-08-20T11:23:12Z", "type": "commit"}, {"oid": "2710ea0486d76d036805c61d8324c567586b97fc", "url": "https://github.com/mercadopago/px-android/commit/2710ea0486d76d036805c61d8324c567586b97fc", "message": "payment service unit test init", "committedDate": "2020-08-25T18:42:20Z", "type": "commit"}, {"oid": "e1cd6e18688859b785a6c34a6a38e27f8eb6cc0c", "url": "https://github.com/mercadopago/px-android/commit/e1cd6e18688859b785a6c34a6a38e27f8eb6cc0c", "message": "refactor test", "committedDate": "2020-08-26T14:34:19Z", "type": "commit"}, {"oid": "739dce39591a581ec029855c87cb437c82e4b2da", "url": "https://github.com/mercadopago/px-android/commit/739dce39591a581ec029855c87cb437c82e4b2da", "message": "test for payment service added", "committedDate": "2020-08-27T20:43:10Z", "type": "commit"}, {"oid": "218a9a709b28d9bb03c020ee1edfd498adfbbd1f", "url": "https://github.com/mercadopago/px-android/commit/218a9a709b28d9bb03c020ee1edfd498adfbbd1f", "message": "merge master", "committedDate": "2020-08-27T21:08:10Z", "type": "commit"}, {"oid": "ee1e6926849eda9c411e133c0e5b5fbb2a86e703", "url": "https://github.com/mercadopago/px-android/commit/ee1e6926849eda9c411e133c0e5b5fbb2a86e703", "message": "refactor", "committedDate": "2020-08-28T13:31:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMyMzI5Mg==", "url": "https://github.com/mercadopago/px-android/pull/2307#discussion_r479323292", "bodyText": "por qu\u00e9 cambio el nivel de acceso ac\u00e1?", "author": "cgaggino", "createdAt": "2020-08-28T14:04:37Z", "path": "px-checkout/src/main/java/com/mercadopago/android/px/internal/features/explode/ExplodeDecorator.java", "diffHunk": "@@ -20,7 +20,7 @@ public static ExplodeDecorator from(@NonNull final PaymentResultType type) {\n     private final int primaryColor;\n     private final int statusIcon;\n \n-    /* default */ ExplodeDecorator(@ColorRes final int primaryColor, @DrawableRes final int statusIcon) {\n+    public ExplodeDecorator(@ColorRes final int primaryColor, @DrawableRes final int statusIcon) {", "originalCommit": "ee1e6926849eda9c411e133c0e5b5fbb2a86e703", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMyNTk3MQ==", "url": "https://github.com/mercadopago/px-android/pull/2307#discussion_r479325971", "bodyText": "Para poder llamarlo en estos test:\nhttps://github.com/mercadopago/px-android/pull/2307/files#diff-809feebbbc1c4d4a24f33cbc7991ba44R273", "author": "jorGonzalez291292", "createdAt": "2020-08-28T14:07:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMyMzI5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM3MjkxNw==", "url": "https://github.com/mercadopago/px-android/pull/2307#discussion_r479372917", "bodyText": "no es mejor usar el from que ya existe pasandole un result mockeado o crear otro from o usar whitebox si es que se puede? para no abrir la accesibilidad solo por un test", "author": "cgaggino", "createdAt": "2020-08-28T15:18:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMyMzI5Mg=="}], "type": "inlineReview"}, {"oid": "ad73d2ebf23b1054d34464ff050bd206fa636d23", "url": "https://github.com/mercadopago/px-android/commit/ad73d2ebf23b1054d34464ff050bd206fa636d23", "message": "review code in KFunctionsTest", "committedDate": "2020-08-28T14:45:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM1MzI4OQ==", "url": "https://github.com/mercadopago/px-android/pull/2307#discussion_r479353289", "bodyText": "Me gustaria que hagamos check de con que estamos llamando a la procesadora,\nla idea ser\u00eda: yo inicio un pago en payment service con X medio, espero que se llame a paymentProcessor con tal medio", "author": "cgaggino", "createdAt": "2020-08-28T14:46:11Z", "path": "px-checkout/src/test/java/com/mercadopago/android/px/internal/datasource/PaymentServiceTest.java", "diffHunk": "@@ -236,15 +255,55 @@ public void whenOneTapPaymentWhenCapNotExceededAndNotApproved() {\n         when(escPaymentManager.hasEsc(card)).thenReturn(true);\n         when(escManagerBehaviour.isESCEnabled()).thenReturn(true);\n \n-        paymentService.attach(handler);\n         paymentService.startExpressPayment(mockPaymentConfiguration(node, payerCost));\n-\n         verify(escPaymentManager).hasEsc(card);\n         verifyNoMoreInteractions(escPaymentManager);\n         verify(tokenRepository).createToken(card);\n         verifyNoMoreInteractions(tokenRepository);\n     }\n \n+    @Test\n+    public void whenOneTapStartPaymentAndPaymentError() {\n+        final Observer<Event<MercadoPagoError>> errorObserver = mock(Observer.class);\n+        when(userSelectionRepository.getPaymentMethod().getPaymentTypeId()).thenReturn(PaymentTypes.CREDIT_CARD);\n+        when(userSelectionRepository.getPayerCost()).thenReturn(null);\n+        when(amountConfigurationRepository.getCurrentConfiguration()).thenReturn(mock(AmountConfiguration.class));\n+\n+        paymentService.handlerWrapper.createTransactionLiveData();\n+        paymentService.getObservableEvents().getPaymentErrorLiveData().observeForever(errorObserver);\n+        paymentService.startPayment();\n+\n+        verify(errorObserver).onChanged(any());\n+    }\n+\n+    @Test\n+    public void whenOneTapStartPaymentAndShouldShowVisualPayment() {\n+        final Observer<Event<Unit>> visualPaymentObserver = mock(Observer.class);\n+        when(userSelectionRepository.hasCardSelected()).thenReturn(true);\n+        when(userSelectionRepository.getPayerCost()).thenReturn(mock(PayerCost.class));\n+        when(paymentSettingRepository.hasToken()).thenReturn(true);\n+        when(paymentSettingRepository.getSecurityType()).thenReturn(SecurityType.SECOND_FACTOR);\n+        when(paymentProcessor.shouldShowFragmentOnPayment(any(CheckoutPreference.class))).thenReturn(true);\n+\n+        paymentService.handlerWrapper.createTransactionLiveData();\n+        paymentService.getObservableEvents().getVisualPaymentLiveData().observeForever(visualPaymentObserver);\n+        paymentService.startPayment();\n+\n+        verify(visualPaymentObserver).onChanged(any());\n+    }\n+\n+    @Test\n+    public void whenOneTapPaymentWhenHasTokenAndPaymentSuccess() {\n+        savedCreditCardOneTapPresent(CARD_ID_ESC_NOT_AVAILABLE);\n+        when(paymentSettingRepository.hasToken()).thenReturn(true);\n+        when(paymentSettingRepository.getSecurityType()).thenReturn(SecurityType.SECOND_FACTOR);\n+        when(paymentProcessor.shouldShowFragmentOnPayment(any(CheckoutPreference.class))).thenReturn(false);\n+        when(amountConfigurationRepository.getCurrentConfiguration()).thenReturn(mock(AmountConfiguration.class));\n+\n+        paymentService.startExpressPayment(mockPaymentConfiguration(node, payerCost));\n+        verify(paymentProcessor).startPayment(any(), any(), any());", "originalCommit": "ee1e6926849eda9c411e133c0e5b5fbb2a86e703", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2df932659fffd911247288615c8d48050cc4dfbb", "url": "https://github.com/mercadopago/px-android/commit/2df932659fffd911247288615c8d48050cc4dfbb", "message": "enhancement test", "committedDate": "2020-08-28T15:23:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM5Mjc5Ng==", "url": "https://github.com/mercadopago/px-android/pull/2307#discussion_r479392796", "bodyText": "el expected tiene que ser lo que le estas pasando a service, en la linea 313", "author": "cgaggino", "createdAt": "2020-08-28T15:54:59Z", "path": "px-checkout/src/test/java/com/mercadopago/android/px/internal/datasource/PaymentServiceTest.java", "diffHunk": "@@ -236,15 +262,66 @@ public void whenOneTapPaymentWhenCapNotExceededAndNotApproved() {\n         when(escPaymentManager.hasEsc(card)).thenReturn(true);\n         when(escManagerBehaviour.isESCEnabled()).thenReturn(true);\n \n-        paymentService.attach(handler);\n         paymentService.startExpressPayment(mockPaymentConfiguration(node, payerCost));\n-\n         verify(escPaymentManager).hasEsc(card);\n         verifyNoMoreInteractions(escPaymentManager);\n         verify(tokenRepository).createToken(card);\n         verifyNoMoreInteractions(tokenRepository);\n     }\n \n+    @Test\n+    public void whenOneTapStartPaymentAndPaymentError() {\n+        final Observer<Event<MercadoPagoError>> errorObserver = mock(Observer.class);\n+        when(userSelectionRepository.getPaymentMethod().getPaymentTypeId()).thenReturn(PaymentTypes.CREDIT_CARD);\n+        when(userSelectionRepository.getPayerCost()).thenReturn(null);\n+        when(amountConfigurationRepository.getCurrentConfiguration()).thenReturn(mock(AmountConfiguration.class));\n+\n+        paymentService.handlerWrapper.createTransactionLiveData();\n+        paymentService.getObservableEvents().getPaymentErrorLiveData().observeForever(errorObserver);\n+        paymentService.startPayment();\n+\n+        verify(errorObserver).onChanged(any());\n+    }\n+\n+    @Test\n+    public void whenOneTapStartPaymentAndShouldShowVisualPayment() {\n+        final Observer<Event<Unit>> visualPaymentObserver = mock(Observer.class);\n+        when(userSelectionRepository.hasCardSelected()).thenReturn(true);\n+        when(userSelectionRepository.getPayerCost()).thenReturn(mock(PayerCost.class));\n+        when(paymentSettingRepository.hasToken()).thenReturn(true);\n+        when(paymentSettingRepository.getSecurityType()).thenReturn(SecurityType.SECOND_FACTOR);\n+        when(paymentProcessor.shouldShowFragmentOnPayment(any(CheckoutPreference.class))).thenReturn(true);\n+\n+        paymentService.handlerWrapper.createTransactionLiveData();\n+        paymentService.getObservableEvents().getVisualPaymentLiveData().observeForever(visualPaymentObserver);\n+        paymentService.startPayment();\n+\n+        verify(visualPaymentObserver).onChanged(any());\n+    }\n+\n+    @Test\n+    public void whenOneTapPaymentWhenHasTokenAndPaymentSuccess() {\n+        final KArgumentCaptor<SplitPaymentProcessor.CheckoutData> captor = argumentCaptor(SplitPaymentProcessor.CheckoutData.class);\n+\n+        savedCreditCardOneTapPresent(CARD_ID_ESC_NOT_AVAILABLE);\n+        when(paymentSettingRepository.hasToken()).thenReturn(true);\n+        when(paymentSettingRepository.getSecurityType()).thenReturn(SecurityType.SECOND_FACTOR);\n+        when(paymentProcessor.shouldShowFragmentOnPayment(any(CheckoutPreference.class))).thenReturn(false);\n+        when(amountConfigurationRepository.getCurrentConfiguration()).thenReturn(mock(AmountConfiguration.class));\n+\n+\n+        paymentService.startExpressPayment(mockPaymentConfiguration(node, payerCost));\n+        verify(paymentProcessor).startPayment(any(), captor.capture() , any());\n+\n+        final PaymentMethod actualPm = captor.getValue().paymentDataList.get(0).getPaymentMethod();\n+        final PaymentMethod expectedPm = paymentService.getPaymentDataList().get(0).getPaymentMethod();", "originalCommit": "2df932659fffd911247288615c8d48050cc4dfbb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "01067e319ea578a998785e3f5239822398ae7a5c", "url": "https://github.com/mercadopago/px-android/commit/01067e319ea578a998785e3f5239822398ae7a5c", "message": "payment method mapper test added", "committedDate": "2020-08-28T21:29:33Z", "type": "commit"}, {"oid": "3a79289f24845b579619ee9b34f2de8a2f4d921e", "url": "https://github.com/mercadopago/px-android/commit/3a79289f24845b579619ee9b34f2de8a2f4d921e", "message": "review changes", "committedDate": "2020-09-01T15:08:16Z", "type": "commit"}]}