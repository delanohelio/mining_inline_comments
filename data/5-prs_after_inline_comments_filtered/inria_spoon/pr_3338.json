{"pr_number": 3338, "pr_title": "fix: correct package assumption when there is a star import", "pr_createdAt": "2020-04-19T16:07:44Z", "pr_url": "https://github.com/INRIA/spoon/pull/3338", "timeline": [{"oid": "59afc6208b8b9329ebb78a0d562eeddee8d4fba9", "url": "https://github.com/INRIA/spoon/commit/59afc6208b8b9329ebb78a0d562eeddee8d4fba9", "message": "Add failing test case for type access+star import with no classpath", "committedDate": "2020-04-19T15:58:22Z", "type": "commit"}, {"oid": "2a0cdcf444821a1593dbe8927c9a399f6979bd8d", "url": "https://github.com/INRIA/spoon/commit/2a0cdcf444821a1593dbe8927c9a399f6979bd8d", "message": "Avoid guessing type's package if there is any star import\n\nThis is too restrictive, and counts e.g. java.util.* as an offending import, even though it's fine", "committedDate": "2020-04-19T16:00:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkzNzQ1NA==", "url": "https://github.com/INRIA/spoon/pull/3338#discussion_r410937454", "bodyText": "I'm not sure we need to check if it's noclasspath mode, we shouldn't get here in classpath mode? Perhaps assert isNoClasspath instead?", "author": "slarse", "createdAt": "2020-04-19T16:09:25Z", "path": "src/main/java/spoon/support/compiler/jdt/ReferenceBuilder.java", "diffHunk": "@@ -1059,14 +1060,28 @@ void setPackageOrDeclaringType(CtTypeReference<?> ref, CtReference declaring) {\n \t\t\t\tjavaLangPackageReference.setSimpleName(\"java.lang\");\n \t\t\t\tref.setPackage(javaLangPackageReference);\n \t\t\t} catch (NoClassDefFoundError | ClassNotFoundException e) {\n-\t\t\t\t// in that case we consider the package should be the same as the current one. Fix #1293\n-\t\t\t\tref.setPackage(jdtTreeBuilder.getContextBuilder().compilationUnitSpoon.getDeclaredPackage().getReference());\n+\t\t\t\tContextBuilder ctx = jdtTreeBuilder.getContextBuilder();\n+\t\t\t\tboolean isNoClasspath = jdtTreeBuilder.getFactory().getEnvironment().getNoClasspath();\n+\t\t\t\tif (isNoClasspath && containsStarImport(ctx.compilationunitdeclaration.imports)) {", "originalCommit": "2a0cdcf444821a1593dbe8927c9a399f6979bd8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg2NjQyOA==", "url": "https://github.com/INRIA/spoon/pull/3338#discussion_r411866428", "bodyText": "Perhaps assert isNoClasspath instead?\n\ngood idea.", "author": "monperrus", "createdAt": "2020-04-21T04:49:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkzNzQ1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkzNzkwOQ==", "url": "https://github.com/INRIA/spoon/pull/3338#discussion_r410937909", "bodyText": "This will return true if there's any star import, which is too restrictive. For example, if there's an import java.util.*, then this will return true and we won't assign the CU's package to the type. But if the star import is actually available, which should be the case for stdlib packages, depending on JDK version, then it should be fine to guess assign the CU's package to the type.\nIs there any way to check which imported packages are actually available at this stage?", "author": "slarse", "createdAt": "2020-04-19T16:12:08Z", "path": "src/main/java/spoon/support/compiler/jdt/ReferenceBuilder.java", "diffHunk": "@@ -1059,14 +1060,28 @@ void setPackageOrDeclaringType(CtTypeReference<?> ref, CtReference declaring) {\n \t\t\t\tjavaLangPackageReference.setSimpleName(\"java.lang\");\n \t\t\t\tref.setPackage(javaLangPackageReference);\n \t\t\t} catch (NoClassDefFoundError | ClassNotFoundException e) {\n-\t\t\t\t// in that case we consider the package should be the same as the current one. Fix #1293\n-\t\t\t\tref.setPackage(jdtTreeBuilder.getContextBuilder().compilationUnitSpoon.getDeclaredPackage().getReference());\n+\t\t\t\tContextBuilder ctx = jdtTreeBuilder.getContextBuilder();\n+\t\t\t\tboolean isNoClasspath = jdtTreeBuilder.getFactory().getEnvironment().getNoClasspath();\n+\t\t\t\tif (isNoClasspath && containsStarImport(ctx.compilationunitdeclaration.imports)) {\n+\t\t\t\t\t// If there is an unresolved star import in noclasspath,\n+\t\t\t\t\t// we can't tell which package the type belongs to (#3337)\n+\t\t\t\t\tCtPackageReference pkgRef = jdtTreeBuilder.getFactory().Core().createPackageReference();\n+\t\t\t\t\tpkgRef.setImplicit(true);\n+\t\t\t\t\tref.setPackage(pkgRef);\n+\t\t\t\t} else {\n+\t\t\t\t\t// otherwise the type must belong to the CU's package (#1293)\n+\t\t\t\t\tref.setPackage(ctx.compilationUnitSpoon.getDeclaredPackage().getReference());\n+\t\t\t\t}\n \t\t\t}\n \t\t} else {\n \t\t\tthrow new AssertionError(\"unexpected declaring type: \" + declaring.getClass() + \" of \" + declaring);\n \t\t}\n \t}\n \n+\tprivate static boolean containsStarImport(ImportReference[] imports) {\n+\t    return imports != null && Arrays.stream(imports).anyMatch(imp -> imp.toString().endsWith(\"*\"));", "originalCommit": "2a0cdcf444821a1593dbe8927c9a399f6979bd8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg2Njc4MA==", "url": "https://github.com/INRIA/spoon/pull/3338#discussion_r411866780", "bodyText": "Is there any way to check which imported packages are actually available at this stage?\n\nDo you mean which subpackages under .**are available in the classpath?", "author": "monperrus", "createdAt": "2020-04-21T04:50:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkzNzkwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk3MDkyNw==", "url": "https://github.com/INRIA/spoon/pull/3338#discussion_r411970927", "bodyText": "No, I was rather thinking of just checking if the containing package is available. For example, if any type from java.util is available on the classpath, then we conclude that all types from java.util.* are available on the classpath. If that is the case, we assume that had SomeClass actually belonged to java.util, it would too have been on the classpath too, and since it is not we assign it to the compilation unit's package.\nBut as I typed the above paragraph I realized a few things. First, third party packages are often split across projects leading to packages possibly being partially available, so the assumption \"all types from the x.y.* import are available if any type from package x.y is available\" is not necessarily true (think e.g. org.apache). Second, differing versions of the standard library may cause issues. Third, accounting for what I just pointed out makes this incredibly complex.\nI think the simple and probably sufficient solution is to simply not guess the package if the type is not on the classpath, and there is any * import.", "author": "slarse", "createdAt": "2020-04-21T08:13:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkzNzkwOQ=="}], "type": "inlineReview"}, {"oid": "76f25924fc445ff05206ab9b44118d6f942ce434", "url": "https://github.com/INRIA/spoon/commit/76f25924fc445ff05206ab9b44118d6f942ce434", "message": "Fix incorrect indentation", "committedDate": "2020-04-19T17:38:05Z", "type": "commit"}, {"oid": "157fdd16b6cc71b0c1b953683fb13010053a5909", "url": "https://github.com/INRIA/spoon/commit/157fdd16b6cc71b0c1b953683fb13010053a5909", "message": "Assert noclasspath mode instead of checking it\n\nWe should never get here in classpath mode", "committedDate": "2020-05-04T06:54:08Z", "type": "commit"}, {"oid": "4351bde2b296b3e8cf3c3c045ab55b215a201779", "url": "https://github.com/INRIA/spoon/commit/4351bde2b296b3e8cf3c3c045ab55b215a201779", "message": "Move assertion to start of block", "committedDate": "2020-05-05T08:55:45Z", "type": "commit"}]}