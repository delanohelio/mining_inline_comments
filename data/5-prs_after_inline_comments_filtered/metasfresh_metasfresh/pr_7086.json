{"pr_number": 7086, "pr_title": "#7058 Automatic DD Order Movement ", "pr_createdAt": "2020-07-30T10:37:22Z", "pr_url": "https://github.com/metasfresh/metasfresh/pull/7086", "timeline": [{"oid": "b55019e99a29bc78454b509e319b1b941c3d7120", "url": "https://github.com/metasfresh/metasfresh/commit/b55019e99a29bc78454b509e319b1b941c3d7120", "message": "#7058 Implement creating movenment - WIP", "committedDate": "2020-07-30T10:19:42Z", "type": "commit"}, {"oid": "0bb7158d91b3c9af19d8275ec0ebed0bc420e065", "url": "https://github.com/metasfresh/metasfresh/commit/0bb7158d91b3c9af19d8275ec0ebed0bc420e065", "message": "#7058 Format code", "committedDate": "2020-07-30T10:20:08Z", "type": "commit"}, {"oid": "7614a363b153d9a3a4e526b42e55d3f131ca9072", "url": "https://github.com/metasfresh/metasfresh/commit/7614a363b153d9a3a4e526b42e55d3f131ca9072", "message": "#7058 Implement creating movements when completing DD Order", "committedDate": "2020-07-30T10:20:33Z", "type": "commit"}, {"oid": "9e1565a16339134cec6cb15db538c54e47bd3b16", "url": "https://github.com/metasfresh/metasfresh/commit/9e1565a16339134cec6cb15db538c54e47bd3b16", "message": "#7058 Add sys config for controlling when to create movements", "committedDate": "2020-07-30T10:20:50Z", "type": "commit"}, {"oid": "5c1beb87ee50171ac7b9e22ec715b27c9db8cb23", "url": "https://github.com/metasfresh/metasfresh/commit/5c1beb87ee50171ac7b9e22ec715b27c9db8cb23", "message": "#7058 Add messages", "committedDate": "2020-07-30T10:21:11Z", "type": "commit"}, {"oid": "332343f305e4387cee9b742d273a1e06c9ab8557", "url": "https://github.com/metasfresh/metasfresh/commit/332343f305e4387cee9b742d273a1e06c9ab8557", "message": "#7058 Void movements if needed", "committedDate": "2020-07-30T10:21:21Z", "type": "commit"}, {"oid": "af32d52add4863cb9165432bd9c980f9d00853de", "url": "https://github.com/metasfresh/metasfresh/commit/af32d52add4863cb9165432bd9c980f9d00853de", "message": "#7058 Reverse movement when voiding or reactivating DD Order", "committedDate": "2020-07-30T10:21:34Z", "type": "commit"}, {"oid": "fdf5f22670c646d7fc1bcc6a9892560a856d1d68", "url": "https://github.com/metasfresh/metasfresh/commit/fdf5f22670c646d7fc1bcc6a9892560a856d1d68", "message": "#7058 Code improvements", "committedDate": "2020-07-30T10:22:11Z", "type": "commit"}, {"oid": "3f9b5f2933c2278b449c3b4ca5f2c298b2e91856", "url": "https://github.com/metasfresh/metasfresh/commit/3f9b5f2933c2278b449c3b4ca5f2c298b2e91856", "message": "#7058 Use repor for retrieving warehouse", "committedDate": "2020-07-30T10:22:28Z", "type": "commit"}, {"oid": "5d04ac0cdf5a9f58a47b03724e27314aa9afab95", "url": "https://github.com/metasfresh/metasfresh/commit/5d04ac0cdf5a9f58a47b03724e27314aa9afab95", "message": "#7058 Allo creating movements in the current ttransaction", "committedDate": "2020-07-30T10:22:38Z", "type": "commit"}, {"oid": "bbbade1e6c0d2dc68a5de4b89b482c4bffc07240", "url": "https://github.com/metasfresh/metasfresh/commit/bbbade1e6c0d2dc68a5de4b89b482c4bffc07240", "message": "#7058 Pimp the code", "committedDate": "2020-07-30T10:22:47Z", "type": "commit"}, {"oid": "c80550783113656d7be832bfe9df61f8169773cb", "url": "https://github.com/metasfresh/metasfresh/commit/c80550783113656d7be832bfe9df61f8169773cb", "message": "Gh7075 (#7076)\n\nrefs: https://github.com/metasfresh/metasfresh/issues/7075", "committedDate": "2020-07-30T10:23:01Z", "type": "commit"}, {"oid": "bd6ddc39dff13057306fd9b9cdbc5d3379791472", "url": "https://github.com/metasfresh/metasfresh/commit/bd6ddc39dff13057306fd9b9cdbc5d3379791472", "message": "#7058 Refactoring", "committedDate": "2020-07-30T10:30:17Z", "type": "commit"}, {"oid": "faff53d8b53c01f647b0c515d2d4b0aea727e493", "url": "https://github.com/metasfresh/metasfresh/commit/faff53d8b53c01f647b0c515d2d4b0aea727e493", "message": "#7058 Implement transforming Hus", "committedDate": "2020-07-30T10:30:31Z", "type": "commit"}, {"oid": "6bbf18173b5f4f9164e8fb6164f83da0cda12e3a", "url": "https://github.com/metasfresh/metasfresh/commit/6bbf18173b5f4f9164e8fb6164f83da0cda12e3a", "message": "#7058 Take out comment", "committedDate": "2020-07-30T10:30:42Z", "type": "commit"}, {"oid": "a35dd53cdf8a7be170eb773810ca59626cd0fb86", "url": "https://github.com/metasfresh/metasfresh/commit/a35dd53cdf8a7be170eb773810ca59626cd0fb86", "message": "#7058 Minor refactoring", "committedDate": "2020-07-30T10:30:53Z", "type": "commit"}, {"oid": "cbff83ddfffe0dde6d34bd56aa85011b2782e4f5", "url": "https://github.com/metasfresh/metasfresh/commit/cbff83ddfffe0dde6d34bd56aa85011b2782e4f5", "message": "#7058 Minor improvements", "committedDate": "2020-07-30T10:31:01Z", "type": "commit"}, {"oid": "b01bf10b70edcdcc57a538179745d90bcfbbb5bc", "url": "https://github.com/metasfresh/metasfresh/commit/b01bf10b70edcdcc57a538179745d90bcfbbb5bc", "message": "#7058 Move all services to the top", "committedDate": "2020-07-30T10:34:34Z", "type": "commit"}, {"oid": "3534b4554bb42509de7c39dddf9058ef5eccf78f", "url": "https://github.com/metasfresh/metasfresh/commit/3534b4554bb42509de7c39dddf9058ef5eccf78f", "message": "#7058 Improvments", "committedDate": "2020-07-30T10:36:14Z", "type": "commit"}, {"oid": "5c81c89c5615a87042d572b134ed2bd257db167b", "url": "https://github.com/metasfresh/metasfresh/commit/5c81c89c5615a87042d572b134ed2bd257db167b", "message": "#7058 Minor comment", "committedDate": "2020-07-30T11:48:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk0NzUxOA==", "url": "https://github.com/metasfresh/metasfresh/pull/7086#discussion_r462947518", "bodyText": "makes no sense to have @NonNull on primitive types", "author": "teosarca", "createdAt": "2020-07-30T12:03:43Z", "path": "backend/de.metas.business/src/main/java/org/adempiere/mmovement/api/IMovementDAO.java", "diffHunk": "@@ -59,4 +60,6 @@\n \tvoid save(final I_M_Movement movement);\n \n \tvoid save(final I_M_MovementLine movementLine);\n+\n+\tList<I_M_Movement> retrieveMovementsForDDOrder(@NonNull int ddOrderId);", "originalCommit": "5c81c89c5615a87042d572b134ed2bd257db167b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2fffe0d2a244312a5d57d3b1f75ed0c9a86db49a", "url": "https://github.com/metasfresh/metasfresh/commit/2fffe0d2a244312a5d57d3b1f75ed0c9a86db49a", "message": "#7058 Remove pointeles non null check", "committedDate": "2020-07-30T12:06:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk0OTg3MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/7086#discussion_r462949871", "bodyText": "avoid model getter", "author": "teosarca", "createdAt": "2020-07-30T12:08:52Z", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/ddorder/api/impl/HUDDOrderBL.java", "diffHunk": "@@ -209,4 +233,119 @@ private BPartnerAndLocationId extractBPartnerAndLocationId(final HUToDistribute\n \t\tint bpartnerId;\n \t\tint bpartnerLocationId;\n \t}\n+\n+\t@Override\n+\tpublic void processDDOrderLines(@NonNull final I_DD_Order ddOrder)\n+\t{\n+\t\tfinal List<I_DD_OrderLine> ddOrderLines = ddOrderDAO.retrieveLines(ddOrder);\n+\n+\t\tfor (final I_DD_OrderLine ddOrderLine : ddOrderLines)\n+\t\t{\n+\t\t\tfinal List<I_M_HU> hus = retrieveNeededHusToMove(ddOrderLine);\n+\t\t\tif (hus.isEmpty())\n+\t\t\t{\n+\t\t\t\tfinal WarehouseId warehouseId = warehouseDAO.getWarehouseIdByLocatorRepoId(ddOrderLine.getM_Locator_ID());\n+\t\t\t\tfinal LocatorId locatorId = LocatorId.ofRepoId(warehouseId, ddOrderLine.getM_Locator_ID());\n+\n+\t\t\t\tthrow new HUException(MSG_HU_for_product)\n+\t\t\t\t\t\t.appendParametersToMessage()\n+\t\t\t\t\t\t.setParameter(\"Product\", ddOrderLine.getM_Product())", "originalCommit": "2fffe0d2a244312a5d57d3b1f75ed0c9a86db49a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk1MDg5Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/7086#discussion_r462950897", "bodyText": "why not using Quantity instead of BigDecimal?", "author": "teosarca", "createdAt": "2020-07-30T12:10:45Z", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/ddorder/api/impl/HUDDOrderBL.java", "diffHunk": "@@ -209,4 +233,119 @@ private BPartnerAndLocationId extractBPartnerAndLocationId(final HUToDistribute\n \t\tint bpartnerId;\n \t\tint bpartnerLocationId;\n \t}\n+\n+\t@Override\n+\tpublic void processDDOrderLines(@NonNull final I_DD_Order ddOrder)\n+\t{\n+\t\tfinal List<I_DD_OrderLine> ddOrderLines = ddOrderDAO.retrieveLines(ddOrder);\n+\n+\t\tfor (final I_DD_OrderLine ddOrderLine : ddOrderLines)\n+\t\t{\n+\t\t\tfinal List<I_M_HU> hus = retrieveNeededHusToMove(ddOrderLine);\n+\t\t\tif (hus.isEmpty())\n+\t\t\t{\n+\t\t\t\tfinal WarehouseId warehouseId = warehouseDAO.getWarehouseIdByLocatorRepoId(ddOrderLine.getM_Locator_ID());\n+\t\t\t\tfinal LocatorId locatorId = LocatorId.ofRepoId(warehouseId, ddOrderLine.getM_Locator_ID());\n+\n+\t\t\t\tthrow new HUException(MSG_HU_for_product)\n+\t\t\t\t\t\t.appendParametersToMessage()\n+\t\t\t\t\t\t.setParameter(\"Product\", ddOrderLine.getM_Product())\n+\t\t\t\t\t\t.setParameter(\"Warehouse\", warehouseId)\n+\t\t\t\t\t\t.setParameter(\"Locator\", locatorId);\n+\t\t\t}\n+\t\t\t\n+\t\t\tprocessDDOrderLine(ddOrderLine, hus);\n+\t\t}\n+\n+\t}\n+\n+\tprivate void processDDOrderLine(@NonNull final I_DD_OrderLine ddOrderLine, @NonNull final List<I_M_HU> hus)\n+\t{\n+\t\tcreateMovements()\n+\t\t\t\t.setDDOrderLine(ddOrderLine)\n+\t\t\t\t.allocateHUs(hus)\n+\t\t\t\t.setSkipCompletingDDOrder(true)\n+\t\t\t\t.process();\n+\t}\n+\t\n+\t@Override\n+\tpublic List<I_M_HU> retrieveAvailableHusToMove(@NonNull final I_DD_OrderLine ddOrderLine, @NonNull final IQueryOrderBy queryOrderBy)\n+\t{\n+\t\tfinal IHUQueryBuilder huQueryBuilder = handlingUnitsDAO.createHUQueryBuilder().setOnlyTopLevelHUs();\n+\n+\t\t\n+\t\tfinal WarehouseId warehouseId = warehouseDAO.getWarehouseIdByLocatorRepoId(ddOrderLine.getM_Locator_ID());\n+\t\tfinal LocatorId locatorId = LocatorId.ofRepoId(warehouseId, ddOrderLine.getM_Locator_ID());\n+\t\tfinal ProductId productId = ProductId.ofRepoId(ddOrderLine.getM_Product_ID());\n+\t\t\n+\t\thuQueryBuilder.addOnlyInWarehouseId(warehouseId);\n+\t\thuQueryBuilder.addOnlyInLocatorId(locatorId.getRepoId());\n+\t\thuQueryBuilder.addOnlyWithProductId(productId);\n+\t\thuQueryBuilder.addHUStatusesToInclude(huStatusBL.getQtyOnHandStatuses());\n+\n+\t\treturn huQueryBuilder.createQuery()\n+\t\t\t\t.setOrderBy(queryOrderBy)\n+\t\t\t\t.list();\n+\t}\n+\t\n+\t/**\n+\t * retrieve the Hus needed to move in order to be able to move the dd orderline qty\n+\t * if the qty needed is less then one from storage, will split the HU\n+\t * @param ddOrderLine\n+\t */\n+\tprivate List<I_M_HU> retrieveNeededHusToMove(@NonNull final I_DD_OrderLine ddOrderLine)\n+\t{\n+\t\t// Order by\n+\t\tfinal IQueryOrderBy queryOrderBy = queryBL.createQueryOrderByBuilder(I_M_HU.class)\n+\t\t\t\t.addColumn(I_M_HU.COLUMNNAME_M_Locator_ID)\n+\t\t\t\t.addColumn(I_M_HU.COLUMN_Created)\n+\t\t\t\t.createQueryOrderBy();\n+\t\t\n+\t\tfinal List<I_M_HU> hus = retrieveAvailableHusToMove(ddOrderLine, queryOrderBy);\n+\t\tfinal I_C_UOM uom = uomDAO.getById(ddOrderLine.getC_UOM_ID());\n+\t\tBigDecimal qtyFromHus = BigDecimal.ZERO;", "originalCommit": "2fffe0d2a244312a5d57d3b1f75ed0c9a86db49a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk1MTEyMA==", "url": "https://github.com/metasfresh/metasfresh/pull/7086#discussion_r462951120", "bodyText": "the same question the qtys bellow too", "author": "teosarca", "createdAt": "2020-07-30T12:11:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk1MDg5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk1MTgwOA==", "url": "https://github.com/metasfresh/metasfresh/pull/7086#discussion_r462951808", "bodyText": "IMHO this shall be part of the BL/Service and not HUDDOrderDAO", "author": "teosarca", "createdAt": "2020-07-30T12:12:36Z", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/ddorder/api/impl/HUDDOrderDAO.java", "diffHunk": "@@ -184,11 +184,19 @@ private final void removeFromHUsScheduledToMoveList(final IQueryBuilder<I_DD_Ord\n \t@Override\n \tpublic boolean existsDDOrderLineCandidateForHUId(final int huId)\n \t{\n-\t\tfinal IQueryBL queryBL = Services.get(IQueryBL.class);\n \n \t\treturn queryBL.createQueryBuilder(I_DD_OrderLine_HU_Candidate.class)\n \t\t\t\t.addEqualsFilter(I_DD_OrderLine_HU_Candidate.COLUMN_M_HU_ID, huId)\n \t\t\t\t.create()\n \t\t\t\t.anyMatch();\n \t}\n+\t\n+\t@Override\n+\tpublic boolean isCreateMovementOnComplete()", "originalCommit": "2fffe0d2a244312a5d57d3b1f75ed0c9a86db49a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "45585cd98c760f04c07ca0b449840fb5f3927ce5", "url": "https://github.com/metasfresh/metasfresh/commit/45585cd98c760f04c07ca0b449840fb5f3927ce5", "message": "#7058 Use Quantity instead of BigDecimal", "committedDate": "2020-07-30T12:26:17Z", "type": "commit"}, {"oid": "db6cf136d20fec5be56b1e01e02e60953d5f8e21", "url": "https://github.com/metasfresh/metasfresh/commit/db6cf136d20fec5be56b1e01e02e60953d5f8e21", "message": "#7058 Remove unneeded changes", "committedDate": "2020-07-30T12:51:45Z", "type": "commit"}, {"oid": "b6ac0b3b488d8bb392a2a92fa5c974bf13efbb8b", "url": "https://github.com/metasfresh/metasfresh/commit/b6ac0b3b488d8bb392a2a92fa5c974bf13efbb8b", "message": "#7058 Movem services to the top", "committedDate": "2020-07-30T12:54:44Z", "type": "commit"}, {"oid": "bcce76c4a32e975480be57d710d9a60186c7b745", "url": "https://github.com/metasfresh/metasfresh/commit/bcce76c4a32e975480be57d710d9a60186c7b745", "message": "#7058 minor comment", "committedDate": "2020-07-30T13:00:49Z", "type": "commit"}, {"oid": "ff4759ac2281f55c3b12757e3473d1efb8ee0f71", "url": "https://github.com/metasfresh/metasfresh/commit/ff4759ac2281f55c3b12757e3473d1efb8ee0f71", "message": "#7058 old versions", "committedDate": "2020-07-30T13:01:02Z", "type": "commit"}, {"oid": "ea0babbb434342853764e1d31f48b7d75ea376d4", "url": "https://github.com/metasfresh/metasfresh/commit/ea0babbb434342853764e1d31f48b7d75ea376d4", "message": "#7058 reverting commit c80550783113656d7be832bfe9df61f8169773cb", "committedDate": "2020-07-30T13:07:16Z", "type": "commit"}, {"oid": "c43635ad224e2285ad457e2a02f6d3941337c5d0", "url": "https://github.com/metasfresh/metasfresh/commit/c43635ad224e2285ad457e2a02f6d3941337c5d0", "message": "#7058 minor", "committedDate": "2020-07-30T13:08:59Z", "type": "commit"}, {"oid": "d1235956c9f542aae813d9c14b5f9b6da466b07e", "url": "https://github.com/metasfresh/metasfresh/commit/d1235956c9f542aae813d9c14b5f9b6da466b07e", "message": "#7058 Move the newlly created Hus", "committedDate": "2020-07-30T13:56:46Z", "type": "commit"}, {"oid": "dd8ae7a412f9bb7a0490bc0d8828cb71e152a973", "url": "https://github.com/metasfresh/metasfresh/commit/dd8ae7a412f9bb7a0490bc0d8828cb71e152a973", "message": "#7058 Fix tests", "committedDate": "2020-07-30T14:17:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAzNDU1MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/7086#discussion_r463034551", "bodyText": "don't make it static", "author": "teosarca", "createdAt": "2020-07-30T14:24:21Z", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/ddorder/api/impl/HUDDOrderBL.java", "diffHunk": "@@ -1,54 +1,90 @@\n package de.metas.handlingunits.ddorder.api.impl;\n \n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.ad.dao.IQueryOrderBy;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.adempiere.service.ISysConfigBL;\n+import org.adempiere.warehouse.LocatorId;\n+import org.adempiere.warehouse.WarehouseId;\n+import org.adempiere.warehouse.api.IWarehouseBL;\n+import org.adempiere.warehouse.api.IWarehouseDAO;\n+import org.adempiere.warehouse.api.impl.WarehouseDAO;\n+import org.compiere.model.I_C_UOM;\n+import org.compiere.model.I_M_Locator;\n+import org.compiere.model.I_M_Warehouse;\n+import org.compiere.util.Env;\n+import org.eevolution.api.DDOrderLineId;\n+import org.eevolution.api.IDDOrderDAO;\n+import org.eevolution.model.I_DD_Order;\n+import org.eevolution.model.I_DD_OrderLine;\n+import org.eevolution.model.X_DD_OrderLine;\n+\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableListMultimap;\n import com.google.common.collect.ImmutableSet;\n+\n import de.metas.adempiere.gui.search.IHUPackingAware;\n import de.metas.adempiere.gui.search.IHUPackingAwareBL;\n import de.metas.adempiere.gui.search.impl.DDOrderLineHUPackingAware;\n import de.metas.handlingunits.HUPIItemProductId;\n import de.metas.handlingunits.IHUAssignmentBL;\n+import de.metas.handlingunits.IHUQueryBuilder;\n+import de.metas.handlingunits.IHUStatusBL;\n+import de.metas.handlingunits.IHandlingUnitsBL;\n+import de.metas.handlingunits.IHandlingUnitsDAO;\n+import de.metas.handlingunits.allocation.transfer.HUTransformService;\n import de.metas.handlingunits.ddorder.api.DDOrderLineCreateRequest;\n import de.metas.handlingunits.ddorder.api.IHUDDOrderBL;\n import de.metas.handlingunits.ddorder.api.IHUDDOrderDAO;\n import de.metas.handlingunits.ddorder.api.QuarantineInOutLine;\n import de.metas.handlingunits.ddorder.api.impl.HUs2DDOrderProducer.HUToDistribute;\n+import de.metas.handlingunits.exceptions.HUException;\n import de.metas.handlingunits.inout.IHUInOutDAO;\n import de.metas.handlingunits.model.I_M_HU;\n+import de.metas.handlingunits.storage.IHUStorage;\n+import de.metas.handlingunits.storage.IHUStorageFactory;\n+import de.metas.i18n.AdMessageKey;\n import de.metas.product.IProductBL;\n import de.metas.product.ProductId;\n+import de.metas.quantity.Quantity;\n+import de.metas.uom.IUOMDAO;\n import de.metas.util.Services;\n import lombok.Builder;\n import lombok.NonNull;\n import lombok.Value;\n-import org.adempiere.exceptions.AdempiereException;\n-import org.adempiere.model.InterfaceWrapperHelper;\n-import org.adempiere.warehouse.LocatorId;\n-import org.adempiere.warehouse.WarehouseId;\n-import org.adempiere.warehouse.api.IWarehouseBL;\n-import org.adempiere.warehouse.api.IWarehouseDAO;\n-import org.adempiere.warehouse.api.impl.WarehouseDAO;\n-import org.compiere.model.I_M_Locator;\n-import org.compiere.model.I_M_Warehouse;\n-import org.compiere.util.Env;\n-import org.eevolution.api.DDOrderLineId;\n-import org.eevolution.model.I_DD_Order;\n-import org.eevolution.model.I_DD_OrderLine;\n-import org.eevolution.model.X_DD_OrderLine;\n-\n-import java.math.BigDecimal;\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.Map.Entry;\n-import java.util.Optional;\n-import java.util.function.Function;\n \n public class HUDDOrderBL implements IHUDDOrderBL\n {\n \n+\t\n+\tprivate static final String SYS_Config_DDOrder_isCreateMovementOnComplete = \"DDOrder_isCreateMovementOnComplete\";\n+\tprivate static final AdMessageKey MSG_HU_for_product = AdMessageKey.of(\"de.metas.handlingunits.ddorder.api.impl.HUDDOrderBL.NoHu_For_Product\");\n+\t\n+\tprivate static final ISysConfigBL sysConfigBL = Services.get(ISysConfigBL.class);", "originalCommit": "dd8ae7a412f9bb7a0490bc0d8828cb71e152a973", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAzNTk4MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/7086#discussion_r463035981", "bodyText": "pls avoid it", "author": "teosarca", "createdAt": "2020-07-30T14:26:16Z", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/model/validator/DD_Order.java", "diffHunk": "@@ -43,9 +48,17 @@\n @Interceptor(I_DD_Order.class)\n public class DD_Order\n {\n-\n-\tprivate final IDDOrderDAO ddOrderDAO = Services.get(IDDOrderDAO.class);\n-\n+\tpublic static final DD_Order INSTANCE = new DD_Order();", "originalCommit": "dd8ae7a412f9bb7a0490bc0d8828cb71e152a973", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1904c378229625e0c4a3f71967896d80aa7247b4", "url": "https://github.com/metasfresh/metasfresh/commit/1904c378229625e0c4a3f71967896d80aa7247b4", "message": "#7058 MInor fixes", "committedDate": "2020-07-30T14:31:49Z", "type": "commit"}, {"oid": "990d5ca1fd288e0673f6b82ebd5346badd1bcfe4", "url": "https://github.com/metasfresh/metasfresh/commit/990d5ca1fd288e0673f6b82ebd5346badd1bcfe4", "message": "Update MovementBL.java\n\n#7058 Fix org.adempiere.mmovement.api.impl.MovementBLTest", "committedDate": "2020-07-30T15:10:02Z", "type": "commit"}]}