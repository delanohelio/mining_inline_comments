{"pr_number": 7122, "pr_title": "Gh7117", "pr_createdAt": "2020-08-11T07:06:58Z", "pr_url": "https://github.com/metasfresh/metasfresh/pull/7122", "timeline": [{"oid": "a5b0818ad65210e45dce60a660127dc4cb9d197d", "url": "https://github.com/metasfresh/metasfresh/commit/a5b0818ad65210e45dce60a660127dc4cb9d197d", "message": "added internal status, internal processed & processed\nrefs: https://github.com/metasfresh/metasfresh/issues/7117", "committedDate": "2020-08-10T12:13:55Z", "type": "commit"}, {"oid": "8493b8eabffbef715196d7ce411c658b657dd557", "url": "https://github.com/metasfresh/metasfresh/commit/8493b8eabffbef715196d7ce411c658b657dd557", "message": "toggle process flag + always update rough estimation\nrefs: https://github.com/metasfresh/metasfresh/issues/7117", "committedDate": "2020-08-11T07:04:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQzOTA1Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/7122#discussion_r468439057", "bodyText": "There might be a lot of records to process, so i think it's better to go with\n\nIQueryBL#createCompositeQueryUpdater (=> see e.g. BPBankAccountDAO#deactivateIBANAccountsByBPartnerExcept)\nthen do IQuery#updateDirectly (=> see e.g. AbstractSubscriptionDAO#increaseSeqNosOfSuccessors)\nthen do IModelCacheInvalidationService#invalidate  (=> imho should be OK to invalidate all, with CacheInvalidateMultiRequest#allRecordsForTable)", "author": "metas-ts", "createdAt": "2020-08-11T09:12:13Z", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/issues/WEBUI_ServicesCompanies_Toggle_Processed.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.issues;\n+\n+import de.metas.process.IProcessPrecondition;\n+import de.metas.process.IProcessPreconditionsContext;\n+import de.metas.process.JavaProcess;\n+import de.metas.process.Param;\n+import de.metas.process.ProcessPreconditionsResolution;\n+import de.metas.serviceprovider.issue.IssueId;\n+import de.metas.serviceprovider.issue.IssueRepository;\n+import de.metas.serviceprovider.model.I_S_Issue;\n+import de.metas.util.Check;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.ad.dao.IQueryBuilder;\n+import org.adempiere.ad.dao.IQueryFilter;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.compiere.SpringContextHolder;\n+\n+import java.util.List;\n+\n+public class WEBUI_ServicesCompanies_Toggle_Processed extends JavaProcess implements IProcessPrecondition\n+{\n+\tprivate final IssueRepository issueRepository = SpringContextHolder.instance.getBean(IssueRepository.class);\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\n+\n+\tprivate static final String PARAM_PROCESSED = \"Processed\";\n+\t@Param(parameterName = PARAM_PROCESSED, mandatory = true)\n+\tprivate boolean processed;\n+\n+\t@Override\n+\tprotected String doIt() throws Exception\n+\t{\n+\t\tfinal IQueryBuilder<I_S_Issue> selectionQuery = queryBL.createQueryBuilder(I_S_Issue.class);\n+\n+\t\tfinal IQueryFilter<I_S_Issue> selectionFilter = getProcessInfo().getQueryFilterOrElse(null);\n+\t\tif (selectionFilter == null)\n+\t\t{\n+\t\t\tthrow new AdempiereException(\"@NoSelection@\");\n+\t\t}\n+\t\tselectionQuery.filter(selectionFilter);\n+\n+\t\tfinal List<Integer> selectedIssueIds = selectionQuery.create().listIds();\n+\n+\t\tif (Check.isEmpty(selectedIssueIds))\n+\t\t{\n+\t\t\tthrow new AdempiereException(\"@NoSelection@\");\n+\t\t}\n+\n+\t\tselectedIssueIds\n+\t\t\t\t.stream()\n+\t\t\t\t.map(IssueId::ofRepoId)\n+\t\t\t\t.map(issueRepository::getById)\n+\t\t\t\t.peek(issueEntity -> issueEntity.setProcessed(processed))\n+\t\t\t\t.forEach(issueRepository::save);", "originalCommit": "8493b8eabffbef715196d7ce411c658b657dd557", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQzOTU1NA==", "url": "https://github.com/metasfresh/metasfresh/pull/7122#discussion_r468439554", "bodyText": "also filter out thise records that already have the target processed value set", "author": "metas-ts", "createdAt": "2020-08-11T09:13:04Z", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/issues/WEBUI_ServicesCompanies_Toggle_Processed.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.issues;\n+\n+import de.metas.process.IProcessPrecondition;\n+import de.metas.process.IProcessPreconditionsContext;\n+import de.metas.process.JavaProcess;\n+import de.metas.process.Param;\n+import de.metas.process.ProcessPreconditionsResolution;\n+import de.metas.serviceprovider.issue.IssueId;\n+import de.metas.serviceprovider.issue.IssueRepository;\n+import de.metas.serviceprovider.model.I_S_Issue;\n+import de.metas.util.Check;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.ad.dao.IQueryBuilder;\n+import org.adempiere.ad.dao.IQueryFilter;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.compiere.SpringContextHolder;\n+\n+import java.util.List;\n+\n+public class WEBUI_ServicesCompanies_Toggle_Processed extends JavaProcess implements IProcessPrecondition\n+{\n+\tprivate final IssueRepository issueRepository = SpringContextHolder.instance.getBean(IssueRepository.class);\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\n+\n+\tprivate static final String PARAM_PROCESSED = \"Processed\";\n+\t@Param(parameterName = PARAM_PROCESSED, mandatory = true)\n+\tprivate boolean processed;\n+\n+\t@Override\n+\tprotected String doIt() throws Exception\n+\t{\n+\t\tfinal IQueryBuilder<I_S_Issue> selectionQuery = queryBL.createQueryBuilder(I_S_Issue.class);\n+\n+\t\tfinal IQueryFilter<I_S_Issue> selectionFilter = getProcessInfo().getQueryFilterOrElse(null);\n+\t\tif (selectionFilter == null)\n+\t\t{\n+\t\t\tthrow new AdempiereException(\"@NoSelection@\");\n+\t\t}\n+\t\tselectionQuery.filter(selectionFilter);", "originalCommit": "8493b8eabffbef715196d7ce411c658b657dd557", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "31798e0886925f3c5b615ba2ccd868e047f1170e", "url": "https://github.com/metasfresh/metasfresh/commit/31798e0886925f3c5b615ba2ccd868e047f1170e", "message": "update directly\nrefs: https://github.com/metasfresh/metasfresh/issues/7117", "committedDate": "2020-08-11T11:50:17Z", "type": "commit"}]}