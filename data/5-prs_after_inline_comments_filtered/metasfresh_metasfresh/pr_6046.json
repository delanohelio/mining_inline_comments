{"pr_number": 6046, "pr_title": "Price Calculation as % of Margin", "pr_createdAt": "2020-01-15T12:47:21Z", "pr_url": "https://github.com/metasfresh/metasfresh/pull/6046", "timeline": [{"oid": "3539ca43e5430b9897938f1bcbcb7ca84a5f7b56", "url": "https://github.com/metasfresh/metasfresh/commit/3539ca43e5430b9897938f1bcbcb7ca84a5f7b56", "message": "Price Calculation as % of Margin\nrefs: https://github.com/metasfresh/metasfresh/issues/6045", "committedDate": "2020-01-15T12:45:03Z", "type": "commit"}, {"oid": "facb87c0dd084c2ccebc135eb693fb557787783e", "url": "https://github.com/metasfresh/metasfresh/commit/facb87c0dd084c2ccebc135eb693fb557787783e", "message": "Price Calculation as % of Margin\nrefs: https://github.com/metasfresh/metasfresh/issues/6045", "committedDate": "2020-01-15T16:31:53Z", "type": "commit"}, {"oid": "ffa944a5e59631ed2a8f052a6dea42481f858256", "url": "https://github.com/metasfresh/metasfresh/commit/ffa944a5e59631ed2a8f052a6dea42481f858256", "message": "Price Calculation as % of Margin\nrefs: https://github.com/metasfresh/metasfresh/issues/6045", "committedDate": "2020-01-16T08:23:35Z", "type": "commit"}, {"oid": "3700900654f1f84f056a1b4844a9b1358ab4f277", "url": "https://github.com/metasfresh/metasfresh/commit/3700900654f1f84f056a1b4844a9b1358ab4f277", "message": "Price Calculation as % of Margin - fixed spelling for base commission points column\nrefs: https://github.com/metasfresh/metasfresh/issues/6045", "committedDate": "2020-01-16T09:26:53Z", "type": "commit"}, {"oid": "523540b69f421156a2255a95215c48033d929484", "url": "https://github.com/metasfresh/metasfresh/commit/523540b69f421156a2255a95215c48033d929484", "message": "Merge branch 'master' into gh6045", "committedDate": "2020-01-16T13:01:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI2MDM1MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6046#discussion_r367260351", "bodyText": "codacy sais there is an unused import now; pls check", "author": "metas-ts", "createdAt": "2020-01-16T07:09:01Z", "path": "de.metas.contracts/src/test/java/de/metas/contracts/commission/commissioninstance/services/repos/CommissionInstanceRepositoryTest.java", "diffHunk": "@@ -96,7 +96,7 @@ void beforeEach()\n \t\tAdempiereTestHelper.get().init();\n \n \t\tfinal CommissionConfigStagingDataService commissionConfigStagingDataService = new CommissionConfigStagingDataService();\n-\t\tfinal CommissionConfigFactory commissionConfigFactory = new CommissionConfigFactory(new CommissionHierarchyFactory(), commissionConfigStagingDataService);\n+\t\tfinal CommissionConfigFactory commissionConfigFactory = new CommissionConfigFactory(commissionConfigStagingDataService);", "originalCommit": "facb87c0dd084c2ccebc135eb693fb557787783e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI2MTE3Ng==", "url": "https://github.com/metasfresh/metasfresh/pull/6046#discussion_r367261176", "bodyText": "pls fix the typo in the DB-column name..then either recreate the model or (also fine, maybe quicker, manually fix it in here)", "author": "metas-ts", "createdAt": "2020-01-16T07:12:16Z", "path": "de.metas.adempiere.adempiere/base/src/main/java-gen/org/compiere/model/I_C_OrderLine.java", "diffHunk": "@@ -104,6 +104,29 @@\n     /** Column name AD_User_ID */\n     public static final String COLUMNNAME_AD_User_ID = \"AD_User_ID\";\n \n+\t/**\n+\t * Set Base Commission Points Per Price UOM.\n+\t *\n+\t * <br>Type: Number\n+\t * <br>Mandatory: false\n+\t * <br>Virtual Column: false\n+\t */\n+\tpublic void setBase_Commission_Ponits_Per_Price_UOM (java.math.BigDecimal Base_Commission_Ponits_Per_Price_UOM);", "originalCommit": "facb87c0dd084c2ccebc135eb693fb557787783e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ1ODY3Mg==", "url": "https://github.com/metasfresh/metasfresh/pull/6046#discussion_r367458672", "bodyText": "pls use de.metas.util.lang.Percent", "author": "metas-ts", "createdAt": "2020-01-16T14:48:22Z", "path": "de.metas.business/src/main/java/de/metas/pricing/IPricingResult.java", "diffHunk": "@@ -173,4 +173,12 @@ default int getCurrencyRepoId()\n \tIPricingResult setLoggableMessages(ImmutableList<String> singleMessages);\n \n \tImmutableList<String> getLoggableMessages();\n+\n+\tvoid setBaseCommissionPointsPerPriceUOM(BigDecimal commissionPointsPerPriceUOM);\n+\n+\tBigDecimal getBaseCommissionPointsPerPriceUOM();\n+\n+\tvoid setTradedCommissionPercent(BigDecimal tradedCommissionPercent);", "originalCommit": "3700900654f1f84f056a1b4844a9b1358ab4f277", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ2MjUyNA==", "url": "https://github.com/metasfresh/metasfresh/pull/6046#discussion_r367462524", "bodyText": "javadoc isn't that smart :-), it needs # instead of .", "author": "metas-ts", "createdAt": "2020-01-16T14:54:48Z", "path": "de.metas.contracts/src/main/java/de/metas/contracts/commission/commissioninstance/interceptor/C_Invoice_Candidate.java", "diffHunk": "@@ -89,4 +89,20 @@ public void deleteCommissionInstance(@NonNull final I_C_Invoice_Candidate icReco\n \t\t\tinvoiceCandidateService.syncSalesICToCommissionInstance(invoiceCandidateId, true/*candidateDeleted*/);\n \t\t}\n \t}\n+\n+\t/**\n+\t *  Reset {@link I_C_Invoice_Candidate.COLUMNNAME_Base_Commission_Points_Per_Price_UOM} and {@link I_C_Invoice_Candidate.COLUMNNAME_Traded_Commission_Percent}", "originalCommit": "3700900654f1f84f056a1b4844a9b1358ab4f277", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ2NDM4NQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6046#discussion_r367464385", "bodyText": "What if the user made mistake and then unsets PriceEntered_Override, or changes it to be == PriceEntered?\nSuggestion/Idea: keep the two values in IC, but don't use them in InvoiceCandidateRecordHelper, if !icRecord.getPriceEntered().equals( icRecord.getPriceEntered_Override() )", "author": "metas-ts", "createdAt": "2020-01-16T14:57:49Z", "path": "de.metas.contracts/src/main/java/de/metas/contracts/commission/commissioninstance/interceptor/C_Invoice_Candidate.java", "diffHunk": "@@ -89,4 +89,20 @@ public void deleteCommissionInstance(@NonNull final I_C_Invoice_Candidate icReco\n \t\t\tinvoiceCandidateService.syncSalesICToCommissionInstance(invoiceCandidateId, true/*candidateDeleted*/);\n \t\t}\n \t}\n+\n+\t/**\n+\t *  Reset {@link I_C_Invoice_Candidate.COLUMNNAME_Base_Commission_Points_Per_Price_UOM} and {@link I_C_Invoice_Candidate.COLUMNNAME_Traded_Commission_Percent}\n+\t *  in case the price entered was overridden so the commission points will be calculated based on the {@link I_C_Invoice_Candidate.COLUMNNAME_PriceActual_Override}.\n+\t *\n+\t * @param icRecord Invoice Candidate record\n+\t */\n+\t@ModelChange( timings = ModelValidator.TYPE_BEFORE_CHANGE, ifColumnsChanged = { I_C_Invoice_Candidate.COLUMNNAME_PriceEntered_Override } )\n+\tpublic void resetComputedCommissionPoints(@NonNull final I_C_Invoice_Candidate icRecord)\n+\t{\n+\t\tif ( !icRecord.getPriceEntered().equals( icRecord.getPriceEntered_Override() ) )", "originalCommit": "3700900654f1f84f056a1b4844a9b1358ab4f277", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ2NTI5MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6046#discussion_r367465291", "bodyText": "i'm temped to also copy&paste my remark&suggestion from C_Invoice_Candidate.java ;-)", "author": "metas-ts", "createdAt": "2020-01-16T14:59:20Z", "path": "de.metas.contracts/src/main/java/de/metas/contracts/commission/commissioninstance/interceptor/C_OrderLine.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * #%L\n+ * de.metas.contracts\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.contracts.commission.commissioninstance.interceptor;\n+\n+import lombok.NonNull;\n+import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n+import org.adempiere.ad.modelvalidator.annotations.ModelChange;\n+import org.compiere.model.I_C_OrderLine;\n+import org.compiere.model.ModelValidator;\n+import org.springframework.stereotype.Component;\n+\n+@Interceptor(I_C_OrderLine.class)\n+@Component\n+public class C_OrderLine\n+{\n+\t/**\n+\t *  Reset {@link I_C_OrderLine.COLUMNNAME_Base_Commission_Points_Per_Price_UOM} and {@link I_C_OrderLine.COLUMNNAME_Traded_Commission_Percent}\n+\t *  in case the price computed by the price engine was overridden by the user in UI, so the commission points will be calculated based on the\n+\t *  {@link I_C_OrderLine.COLUMNNAME_PriceActual}.\n+\t *\n+\t * @param icRecord Invoice Candidate record\n+\t */\n+\t@ModelChange(timings = { ModelValidator.TYPE_BEFORE_NEW, ModelValidator.TYPE_BEFORE_CHANGE },\n+\t\t\t\t ifColumnsChanged = {I_C_OrderLine.COLUMNNAME_PriceEntered, I_C_OrderLine.COLUMNNAME_PriceStd})\n+\tpublic void resetComputedCommissionPoints(@NonNull final I_C_OrderLine icRecord)", "originalCommit": "3700900654f1f84f056a1b4844a9b1358ab4f277", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ3MTg2Ng==", "url": "https://github.com/metasfresh/metasfresh/pull/6046#discussion_r367471866", "bodyText": "making it explicit like this is good, but please add more info, so the errormessage is as actionable as possilbe.\nsuggestion:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tCheck.assume(configs.size() <= 1, \"There is only one active commission contract for a sales rep at a certain time!\");\n          \n          \n            \n            \t\tif (configs.size() > 0)\n          \n          \n            \n            \t\t{\n          \n          \n            \n            \t\t\tthrow new AdempiereException(\"Expecting only one active commissionConfig for a sales rep at a certain time!\")\n          \n          \n            \n            \t\t\t\t\t.appendParametersToMessage()\n          \n          \n            \n            \t\t\t\t\t.setParameter(\"salesRepBPartnerId\", contractRequest.getSalesRepBPartnerId())\n          \n          \n            \n            \t\t\t\t\t.setParameter(\"contractRequest\", contractRequest)\n          \n          \n            \n            \t\t\t\t\t.setParameter(\"hierarchy\", hierarchy)\n          \n          \n            \n            \t\t\t\t\t.setParameter(\"commissionConfigs\", configs);\n          \n          \n            \n            \t\t}", "author": "metas-ts", "createdAt": "2020-01-16T15:10:21Z", "path": "de.metas.contracts/src/main/java/de/metas/contracts/commission/commissioninstance/services/CommissionInstanceRequestFactory.java", "diffHunk": "@@ -114,4 +117,38 @@ private CreateInstanceRequest createRequest(\n \t\t\t\t.build();\n \t\treturn request;\n \t}\n+\n+\tpublic Optional<CreateInstanceRequest> createRequestFor(final CreateForecastCommissionInstanceRequest retrieveForecastCommissionPointsRequest)\n+\t{\n+\t\tfinal Hierarchy hierarchy = commissionHierarchyFactory.createFor(retrieveForecastCommissionPointsRequest.getSalesRepId());\n+\n+\t\tfinal ConfigRequestForNewInstance contractRequest = ConfigRequestForNewInstance.builder()\n+\t\t\t\t.customerBPartnerId( retrieveForecastCommissionPointsRequest.getCustomerId() )\n+\t\t\t\t.salesRepBPartnerId( retrieveForecastCommissionPointsRequest.getSalesRepId() )\n+\t\t\t\t.date( retrieveForecastCommissionPointsRequest.getDateOrdered() )\n+\t\t\t\t.salesProductId( retrieveForecastCommissionPointsRequest.getProductId() )\n+\t\t\t\t.commissionHierarchy(hierarchy)\n+\t\t\t\t.build();\n+\n+\t\tfinal ImmutableList<CommissionConfig> configs =\n+\t\t\t\tcommissionContractFactory.createForNewCommissionInstances(contractRequest)\n+\t\t\t\t\t.stream()\n+\t\t\t\t    .filter(config -> config.getContractFor( Beneficiary.of( contractRequest.getSalesRepBPartnerId() ) ) != null)\n+\t\t\t\t    .collect( ImmutableList.toImmutableList() );\n+\n+\t\tCheck.assume(configs.size() <= 1, \"There is only one active commission contract for a sales rep at a certain time!\");", "originalCommit": "3700900654f1f84f056a1b4844a9b1358ab4f277", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ3NTQyOA==", "url": "https://github.com/metasfresh/metasfresh/pull/6046#discussion_r367475428", "bodyText": "AFAIS you can make this one private.", "author": "metas-ts", "createdAt": "2020-01-16T15:16:14Z", "path": "de.metas.contracts/src/main/java/de/metas/contracts/commission/commissioninstance/services/CommissionPointsService.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * #%L\n+ * de.metas.contracts\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.contracts.commission.commissioninstance.services;\n+\n+import de.metas.bpartner.BPartnerId;\n+import de.metas.bpartner.BPartnerLocationId;\n+import de.metas.bpartner.service.IBPartnerDAO;\n+import de.metas.contracts.FlatrateTermId;\n+import de.metas.contracts.IFlatrateDAO;\n+import de.metas.contracts.commission.CommissionConstants;\n+import de.metas.contracts.commission.commissioninstance.businesslogic.CommissionPoints;\n+import de.metas.contracts.model.I_C_Flatrate_Term;\n+import de.metas.lang.SOTrx;\n+import de.metas.money.Money;\n+import de.metas.organization.OrgId;\n+import de.metas.pricing.IEditablePricingContext;\n+import de.metas.pricing.IPricingResult;\n+import de.metas.pricing.PriceListId;\n+import de.metas.pricing.PricingSystemId;\n+import de.metas.pricing.service.IPriceListDAO;\n+import de.metas.pricing.service.IPricingBL;\n+import de.metas.quantity.Quantitys;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.springframework.stereotype.Service;\n+\n+import java.time.LocalDate;\n+import java.util.Optional;\n+\n+import static java.math.BigDecimal.ONE;\n+\n+@Service\n+public class CommissionPointsService\n+{\n+\tpublic Optional<Money> getCommissionPointsValue( @NonNull final CommissionPoints commissionPoints,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t @NonNull final FlatrateTermId flatrateTermId,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t @NonNull final LocalDate priceDate )\n+\t{\n+\t\tfinal IPricingResult pricingResult = calculateCommissionPointPriceFor(flatrateTermId, priceDate);\n+\n+\t\tif (!pricingResult.isCalculated())\n+\t\t{\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\n+\t\tfinal Money customerTradeMarginAmount = Money.of(\n+\t\t\t\tpricingResult.getPriceStd().multiply( commissionPoints.getPoints() ),\n+\t\t\t\tpricingResult.getCurrencyId() );\n+\n+\t\treturn Optional.of(customerTradeMarginAmount);\n+\t}\n+\n+\tpublic IPricingResult calculateCommissionPointPriceFor(final FlatrateTermId flatrateTermId, final LocalDate requestedDate)", "originalCommit": "3700900654f1f84f056a1b4844a9b1358ab4f277", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ3NzM4Mw==", "url": "https://github.com/metasfresh/metasfresh/pull/6046#discussion_r367477383", "bodyText": "since you don't use the setters, i suggest that you use lombok's @Value instead\n(if it made sense to use @Data, then you should make the classe's fields private. but with  @Value, that's already done for you)", "author": "metas-ts", "createdAt": "2020-01-16T15:19:32Z", "path": "de.metas.contracts/src/main/java/de/metas/contracts/commission/commissioninstance/services/CommissionTriggerRequest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * #%L\n+ * de.metas.contracts\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.contracts.commission.commissioninstance.services;\n+\n+import de.metas.contracts.commission.commissioninstance.businesslogic.CommissionPoints;\n+import de.metas.invoicecandidate.InvoiceCandidateId;\n+import de.metas.util.lang.Percent;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NonNull;\n+\n+import java.time.Instant;\n+\n+@Data", "originalCommit": "3700900654f1f84f056a1b4844a9b1358ab4f277", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ3NzgxOA==", "url": "https://github.com/metasfresh/metasfresh/pull/6046#discussion_r367477818", "bodyText": "same as CommissionTriggerRequest.java", "author": "metas-ts", "createdAt": "2020-01-16T15:20:20Z", "path": "de.metas.contracts/src/main/java/de/metas/contracts/commission/commissioninstance/services/CreateForecastCommissionInstanceRequest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * #%L\n+ * de.metas.contracts\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.contracts.commission.commissioninstance.services;\n+\n+import de.metas.bpartner.BPartnerId;\n+import de.metas.product.ProductId;\n+import de.metas.product.ProductPrice;\n+import de.metas.quantity.Quantity;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NonNull;\n+\n+import java.time.LocalDate;\n+\n+@Data\n+@Builder\n+public class CreateForecastCommissionInstanceRequest", "originalCommit": "3700900654f1f84f056a1b4844a9b1358ab4f277", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ4MjA4Mw==", "url": "https://github.com/metasfresh/metasfresh/pull/6046#discussion_r367482083", "bodyText": "As of very recently we register a dedicated loggable while the pricing engine runs.\nSo there is something to gain by\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tlogger.debug(\"Not applying due to missing calculated price!\");\n          \n          \n            \n            \t\t\tLoggables.withLogger(logger, Level.DEBUG).addLog(\"Not applying due to missing calculated price!\");", "author": "metas-ts", "createdAt": "2020-01-16T15:27:40Z", "path": "de.metas.contracts/src/main/java/de/metas/contracts/pricing/trade_margin/CustomerTradeMarginPricingRule.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * #%L\n+ * de.metas.contracts\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.contracts.pricing.trade_margin;\n+\n+import de.metas.bpartner.BPartnerId;\n+import de.metas.bpartner.service.IBPartnerBL;\n+import de.metas.contracts.commission.Beneficiary;\n+import de.metas.contracts.commission.commissioninstance.businesslogic.CommissionContract;\n+import de.metas.contracts.commission.commissioninstance.businesslogic.CommissionInstance;\n+import de.metas.contracts.commission.commissioninstance.businesslogic.CommissionPoints;\n+import de.metas.contracts.commission.commissioninstance.services.CommissionInstanceService;\n+import de.metas.contracts.commission.commissioninstance.services.CommissionPointsService;\n+import de.metas.contracts.commission.commissioninstance.services.CreateForecastCommissionInstanceRequest;\n+import de.metas.logging.LogManager;\n+import de.metas.money.Money;\n+import de.metas.money.MoneyService;\n+import de.metas.pricing.IPricingContext;\n+import de.metas.pricing.IPricingResult;\n+import de.metas.pricing.rules.IPricingRule;\n+import de.metas.product.ProductPrice;\n+import de.metas.quantity.Quantitys;\n+import de.metas.util.Services;\n+import org.compiere.SpringContextHolder;\n+import org.slf4j.Logger;\n+\n+import java.math.BigDecimal;\n+import java.util.Optional;\n+\n+public class CustomerTradeMarginPricingRule implements IPricingRule\n+{\n+\tprivate static final Logger logger = LogManager.getLogger(CustomerTradeMarginPricingRule.class);\n+\n+\tprivate final CustomerTradeMarginService customerTradeMarginService = SpringContextHolder.instance.getBean(CustomerTradeMarginService.class);\n+\n+\tprivate final CommissionInstanceService commissionInstanceService = SpringContextHolder.instance.getBean(CommissionInstanceService.class);\n+\n+\n+\t@Override public boolean applies(IPricingContext pricingCtx, IPricingResult result)\n+\t{\n+\t\tif ( !result.isCalculated() )\n+\t\t{\n+\t\t\tlogger.debug(\"Not applying due to missing calculated price!\");", "originalCommit": "3700900654f1f84f056a1b4844a9b1358ab4f277", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ4MzgzOA==", "url": "https://github.com/metasfresh/metasfresh/pull/6046#discussion_r367483838", "bodyText": "when rewriting the price, please do a\nLoggables.withLogger(logger, Level.DEBUG).addLog(...);\nI think it makes sense to allso do this when returning without having done anything (further up in htis method).\nMight spare us a lot of head-scratching later, when a customer asks us why a particular price was not the way she expected.", "author": "metas-ts", "createdAt": "2020-01-16T15:30:38Z", "path": "de.metas.contracts/src/main/java/de/metas/contracts/pricing/trade_margin/CustomerTradeMarginPricingRule.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * #%L\n+ * de.metas.contracts\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.contracts.pricing.trade_margin;\n+\n+import de.metas.bpartner.BPartnerId;\n+import de.metas.bpartner.service.IBPartnerBL;\n+import de.metas.contracts.commission.Beneficiary;\n+import de.metas.contracts.commission.commissioninstance.businesslogic.CommissionContract;\n+import de.metas.contracts.commission.commissioninstance.businesslogic.CommissionInstance;\n+import de.metas.contracts.commission.commissioninstance.businesslogic.CommissionPoints;\n+import de.metas.contracts.commission.commissioninstance.services.CommissionInstanceService;\n+import de.metas.contracts.commission.commissioninstance.services.CommissionPointsService;\n+import de.metas.contracts.commission.commissioninstance.services.CreateForecastCommissionInstanceRequest;\n+import de.metas.logging.LogManager;\n+import de.metas.money.Money;\n+import de.metas.money.MoneyService;\n+import de.metas.pricing.IPricingContext;\n+import de.metas.pricing.IPricingResult;\n+import de.metas.pricing.rules.IPricingRule;\n+import de.metas.product.ProductPrice;\n+import de.metas.quantity.Quantitys;\n+import de.metas.util.Services;\n+import org.compiere.SpringContextHolder;\n+import org.slf4j.Logger;\n+\n+import java.math.BigDecimal;\n+import java.util.Optional;\n+\n+public class CustomerTradeMarginPricingRule implements IPricingRule\n+{\n+\tprivate static final Logger logger = LogManager.getLogger(CustomerTradeMarginPricingRule.class);\n+\n+\tprivate final CustomerTradeMarginService customerTradeMarginService = SpringContextHolder.instance.getBean(CustomerTradeMarginService.class);\n+\n+\tprivate final CommissionInstanceService commissionInstanceService = SpringContextHolder.instance.getBean(CommissionInstanceService.class);\n+\n+\n+\t@Override public boolean applies(IPricingContext pricingCtx, IPricingResult result)\n+\t{\n+\t\tif ( !result.isCalculated() )\n+\t\t{\n+\t\t\tlogger.debug(\"Not applying due to missing calculated price!\");\n+\t\t\treturn false;\n+\t\t}\n+\t\tfinal BPartnerId customerId = pricingCtx.getBPartnerId();\n+\n+\t\tfinal BPartnerId salesRepId = Services.get(IBPartnerBL.class).getBPartnerSalesRepId(customerId);\n+\n+\t\tif (salesRepId == null) {\n+\t\t\tlogger.debug(\"Not applying due to missing sales rep!\");\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tfinal CustomerTradeMarginSearchCriteria customerTradeMarginSearchCriteria =\n+\t\t\t\tCustomerTradeMarginSearchCriteria.builder()\n+\t\t\t\t.customerId(customerId)\n+\t\t\t\t.salesRepId(salesRepId)\n+\t\t\t\t.requestedDate( pricingCtx.getPriceDate() )\n+\t\t\t\t.build();\n+\n+\t\tif ( !customerTradeMarginService.getCustomerTradeMarginForCriteria(customerTradeMarginSearchCriteria).isPresent() )\n+\t\t{\n+\t\t\tlogger.debug(\"Not applying due to missing customer trade margin settings!\");\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\treturn true;\n+\t}\n+\n+\t@Override public void calculate(IPricingContext pricingCtx, IPricingResult result)\n+\t{\n+\t\tfinal BPartnerId customerId = pricingCtx.getBPartnerId();\n+\n+\t\tfinal BPartnerId salesRepId = Services.get(IBPartnerBL.class).getBPartnerSalesRepId(customerId);\n+\n+\t\tfinal CustomerTradeMarginSearchCriteria customerTradeMarginSearchCriteria =\n+\t\t\t\tCustomerTradeMarginSearchCriteria.builder()\n+\t\t\t\t\t\t.customerId(customerId)\n+\t\t\t\t\t\t.salesRepId(salesRepId)\n+\t\t\t\t\t\t.requestedDate( pricingCtx.getPriceDate() )\n+\t\t\t\t\t\t.build();\n+\n+\t\tfinal Optional<CustomerTradeMarginSettings> customerTradeMarginSettings =\n+\t\t\t\tcustomerTradeMarginService.getCustomerTradeMarginForCriteria(customerTradeMarginSearchCriteria);\n+\n+\t\tif ( !customerTradeMarginSettings.isPresent() ) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfinal ProductPrice priceBeforeApplyingRule = ProductPrice\n+\t\t\t\t.builder()\n+\t\t\t\t.productId( pricingCtx.getProductId() )\n+\t\t\t\t.money( Money.of( result.getPriceStd(), result.getCurrencyId() ) )\n+\t\t\t\t.uomId( result.getPriceUomId() )\n+\t\t\t\t.build();\n+\n+\t\tfinal Optional<CommissionInstance> forecastCommissionInstance =\n+\t\t\t\tcreateForecastCommissionInstanceForOneQtyInPriceUOM(pricingCtx, priceBeforeApplyingRule, salesRepId, customerId);\n+\n+\t\tif ( !forecastCommissionInstance.isPresent() )\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\t\tfinal CommissionContract salesRepCommissionContract = forecastCommissionInstance.get().getConfig().getContractFor( Beneficiary.of(salesRepId) );\n+\n+\t\tfinal Optional<CommissionPoints> tradedCommissionPointsPerPriceUOM = customerTradeMarginService\n+\t\t\t\t.getTradedCommissionPointsFor( customerTradeMarginSettings.get(),\n+\t\t\t\t\t\t                       forecastCommissionInstance.get().getShares(),\n+\t\t\t\t\t\t                       salesRepCommissionContract );\n+\n+\t\tif ( !tradedCommissionPointsPerPriceUOM.isPresent() )\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfinal Optional<Money> tradedCommissionPointsValue = SpringContextHolder.instance.getBean(CommissionPointsService.class)\n+\t\t\t\t.getCommissionPointsValue(\n+\t\t\t\t\ttradedCommissionPointsPerPriceUOM.get(),\n+\t\t\t\t\tsalesRepCommissionContract.getId(),\n+\t\t\t\t\tpricingCtx.getPriceDate() );\n+\n+\t\tif ( tradedCommissionPointsValue.isPresent() )\n+\t\t{\n+\t\t\tfinal Money customerTradeMarginPerPriceUOM = SpringContextHolder.instance.getBean(MoneyService.class)\n+\t\t\t\t\t.convertMoneyToCurrency( tradedCommissionPointsValue.get(), result.getCurrencyId() );\n+\n+\t\t\tresult.setBaseCommissionPointsPerPriceUOM( forecastCommissionInstance.get().getCurrentTriggerData().getForecastedPoints().toBigDecimal() );\n+\t\t\tresult.setTradedCommissionPercent( customerTradeMarginSettings.get().getMarginPercent() );\n+\n+\t\t\tresult.setPriceStd( priceBeforeApplyingRule.toBigDecimal().subtract( customerTradeMarginPerPriceUOM.toBigDecimal() ) );", "originalCommit": "3700900654f1f84f056a1b4844a9b1358ab4f277", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ4ODU1Mw==", "url": "https://github.com/metasfresh/metasfresh/pull/6046#discussion_r367488553", "bodyText": "i checked de.metas.cache.CCache.CCache(String, String, Set<String>, Integer, Integer, CacheMapType, CachingKeysMapper<K>, CacheRemovalListener<K, V>, CacheAdditionListener<K, V>)..\nI think this will work, but to reduce FUD, please do\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t.additionalTableNameToResetFor(I_C_Customer_Trade_Margin.Table_Name)\n          \n          \n            \n            \t\t\t.tableName(I_C_Customer_Trade_Margin.Table_Name)\n          \n      \n    \n    \n  \n\n..and use additionalTableNameToResetFor only if there are further names", "author": "metas-ts", "createdAt": "2020-01-16T15:38:37Z", "path": "de.metas.contracts/src/main/java/de/metas/contracts/pricing/trade_margin/CustomerTradeMarginRepository.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * #%L\n+ * de.metas.contracts\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.contracts.pricing.trade_margin;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.bpartner.BPartnerId;\n+import de.metas.cache.CCache;\n+import de.metas.contracts.model.I_C_Customer_Trade_Margin;\n+import de.metas.util.Services;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.ad.dao.impl.CompareQueryFilter;\n+import org.springframework.stereotype.Repository;\n+\n+import java.time.LocalDate;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+@Repository\n+public class CustomerTradeMarginRepository\n+{\n+\n+\tprivate final CCache<CacheKey, ImmutableList<CustomerTradeMarginSettings>> cache = CCache.<CacheKey, ImmutableList<CustomerTradeMarginSettings>> builder()\n+\t\t\t.cacheName(\"customerTradeMarginBySalesRepAndDate\")\n+\t\t\t.cacheMapType(CCache.CacheMapType.LRU)\n+\t\t\t.initialCapacity(100)\n+\t\t\t.additionalTableNameToResetFor(I_C_Customer_Trade_Margin.Table_Name)", "originalCommit": "3700900654f1f84f056a1b4844a9b1358ab4f277", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "60651cfade2dc47be31d4541b2f1aee2d76a25b9", "url": "https://github.com/metasfresh/metasfresh/commit/60651cfade2dc47be31d4541b2f1aee2d76a25b9", "message": "Merge branch 'master' into gh6045", "committedDate": "2020-01-17T11:39:47Z", "type": "commit"}, {"oid": "720cc413444f6a0613399d7b0974307fafe03a81", "url": "https://github.com/metasfresh/metasfresh/commit/720cc413444f6a0613399d7b0974307fafe03a81", "message": "Price Calculation as % of Margin - applied suggested changes\nrefs: https://github.com/metasfresh/metasfresh/issues/6045", "committedDate": "2020-01-17T14:21:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQxMTk1Mg==", "url": "https://github.com/metasfresh/metasfresh/pull/6046#discussion_r368411952", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tif ( orderLine.getPriceEntered().equals( orderLine.getPriceStd() ) )\n          \n          \n            \n            \t\tif ( orderLine.getPriceEntered().compareTo( orderLine.getPriceStd() ) == 0)\n          \n      \n    \n    \n  \n\n..we don't want things to happen, just because 1.equals(1.0) is false", "author": "metas-ts", "createdAt": "2020-01-20T08:12:31Z", "path": "de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/invoicecandidate/C_OrderLine_Handler.java", "diffHunk": "@@ -175,8 +175,11 @@ private I_C_Invoice_Candidate createCandidateForOrderLine(final I_C_OrderLine or\n \n \t\ticRecord.setDescription(orderLine.getDescription()); // 03439\n \n-\t\ticRecord.setBase_Commission_Points_Per_Price_UOM( orderLine.getBase_Commission_Points_Per_Price_UOM() );\n-\t\ticRecord.setTraded_Commission_Percent( orderLine.getTraded_Commission_Percent() );\n+\t\tif ( orderLine.getPriceEntered().equals( orderLine.getPriceStd() ) )", "originalCommit": "720cc413444f6a0613399d7b0974307fafe03a81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ed84cac15736590e6a26fd560e01cd8d6b16bb1e", "url": "https://github.com/metasfresh/metasfresh/commit/ed84cac15736590e6a26fd560e01cd8d6b16bb1e", "message": "Update de.metas.swat/de.metas.swat.base/src/main/java/de/metas/order/invoicecandidate/C_OrderLine_Handler.java\r\n\r\n#6045", "committedDate": "2020-01-20T08:13:28Z", "type": "commit"}, {"oid": "81ca5c8c1419f61e84aa92e93768417fa23d72aa", "url": "https://github.com/metasfresh/metasfresh/commit/81ca5c8c1419f61e84aa92e93768417fa23d72aa", "message": "Merge branch 'master' into gh6045", "committedDate": "2020-01-20T10:05:59Z", "type": "commit"}, {"oid": "83e5a424c362b2c0b000ac3c40b52f57fd740ec6", "url": "https://github.com/metasfresh/metasfresh/commit/83e5a424c362b2c0b000ac3c40b52f57fd740ec6", "message": "Merge branch 'gh6045' of https://github.com/metasfresh/metasfresh into gh6045", "committedDate": "2020-01-20T10:06:42Z", "type": "commit"}]}