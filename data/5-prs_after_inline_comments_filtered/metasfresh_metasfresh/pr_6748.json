{"pr_number": 6748, "pr_title": "moved to callout", "pr_createdAt": "2020-05-28T11:15:15Z", "pr_url": "https://github.com/metasfresh/metasfresh/pull/6748", "timeline": [{"oid": "e6a7a83d61bcd5ab6864ed8e136de4fd910af929", "url": "https://github.com/metasfresh/metasfresh/commit/e6a7a83d61bcd5ab6864ed8e136de4fd910af929", "message": "moved to callout\nhttps://github.com/metasfresh/metasfresh/issues/6745", "committedDate": "2020-05-28T11:13:58Z", "type": "commit"}, {"oid": "1b5c307fda7d38e739131eccdd5a848476cdca8d", "url": "https://github.com/metasfresh/metasfresh/commit/1b5c307fda7d38e739131eccdd5a848476cdca8d", "message": "recompute qtyBooked before complete\nhttps://github.com/metasfresh/metasfresh/issues/6745", "committedDate": "2020-05-29T15:03:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY3MzA3NA==", "url": "https://github.com/metasfresh/metasfresh/pull/6748#discussion_r432673074", "bodyText": "AFAIS  it doesn't work like this; the method doesn't cover the case of multiple HUs for one line.\nRough sketch of how to do it instead:\n\nchange the method to work with de.metas.handlingunits.inventory.InventoryLine instead of I_M_InventoryLine\n\nmaybe when it's not a dirty record we work with, the whole code can be moved out of this dirty service\n\n\nuse inventoryLine.getInventoryLineHUs() to get the n HUs a line can have\nyou probably need IHandlingUnitDAO to load the respective I_M_HUs; (maybe there is an easy way to load them all at once)\nuse IHandlingUnitsBL.getStorageFactory() and IHUStorageFactory.getHUProductStorages() to get the quantities.\nmaybe you don't need uomConversionBL to convert them to the inventory line's UOM..might be that's done by the repository (need to check)\n\u2757 By the way: check out how the processes from today's book-club do it. maybe you can simply extract and/or reuse that code.\nfun fact: your change of InventoryRepository.retrieveLineRecords to public triggered all these thoughts..opening a nice API like that to server raw database records was kind of a smell :-D\n\u2757\n\nAFAIU InventoryLine is not really the aggregate root; Inventory is..\nin the M_InventoryLine MI you need to update a single line though..not sure that to do\n..maybe let InventoryRepository load an inventory with just the line in question?\nthe good news is that AFAIK @teosarca will be around tomorrow for consultation\n...did i mention that there might be some code already doing all this?", "author": "metas-ts", "createdAt": "2020-05-29T18:48:59Z", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/inventory/InventoryLineRecordService.java", "diffHunk": "@@ -405,6 +423,64 @@ public HUAggregationType computeHUAggregationType(\n \t\treturn computeHUAggregationType(inventoryLine, docBaseAndSubType);\n \t}\n \n+\tpublic void setQtyBookedFromStorage(@NonNull final I_M_InventoryLine inventoryLine)\n+\t{\n+\t\tfinal Optional<Quantity> bookedQty = getBookedQtyFromStorage(inventoryLine);\n+\n+\t\tif (bookedQty.isPresent())\n+\t\t{\n+\t\t\tif (bookedQty.get().getUomId().getRepoId() != inventoryLine.getC_UOM_ID())\n+\t\t\t{\n+\t\t\t\t//this should never happen as inventoryLineRecordService.getBookedQtyFromStorage() returns the qty in the inventory line's uom.\n+\t\t\t\tthrow new QuantitiesUOMNotMatchingExpection(\"Booked and counted quantities don't have the same UOM!\")\n+\t\t\t\t\t\t.appendParametersToMessage()\n+\t\t\t\t\t\t.setParameter(\"InventoryLineUOMID\", inventoryLine.getC_UOM_ID())\n+\t\t\t\t\t\t.setParameter(\"BookedQtyUOMID\", bookedQty.get().getUomId());\n+\t\t\t}\n+\n+\t\t\tinventoryLine.setQtyBook(bookedQty.get().toBigDecimal());\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\tinventoryLine.setQtyBook(BigDecimal.ZERO);\n+\t\t}\n+\t}\n+\n+\n+\t@NonNull\n+\tprivate Optional<Quantity> getBookedQtyFromStorage(@NonNull final I_M_InventoryLine inventoryLineRecord)", "originalCommit": "1b5c307fda7d38e739131eccdd5a848476cdca8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgzMDYwOA==", "url": "https://github.com/metasfresh/metasfresh/pull/6748#discussion_r432830608", "bodyText": "\ud83e\udd26 yep, you're right, I didn't put much thought into it as it was more like a quick fix \ud83d\ude43, thx for raising the issue I'll check that process and will try to find a way to reuse the code.", "author": "pvpurcarcosmin", "createdAt": "2020-05-30T10:35:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY3MzA3NA=="}], "type": "inlineReview"}, {"oid": "4bae3a9f4b8ab97166a2c9505aeb658caa579972", "url": "https://github.com/metasfresh/metasfresh/commit/4bae3a9f4b8ab97166a2c9505aeb658caa579972", "message": "consider aggregated HU\nhttps://github.com/metasfresh/metasfresh/issues/6745", "committedDate": "2020-06-02T07:21:57Z", "type": "commit"}, {"oid": "d02de9b148037ac6e6a0747c27ddc8e8ddc1a137", "url": "https://github.com/metasfresh/metasfresh/commit/d02de9b148037ac6e6a0747c27ddc8e8ddc1a137", "message": "consider aggregated HU\nhttps://github.com/metasfresh/metasfresh/issues/6745", "committedDate": "2020-06-02T08:02:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcwNDUwNA==", "url": "https://github.com/metasfresh/metasfresh/pull/6748#discussion_r433704504", "bodyText": "wouldn't we need to update the booked qtys from storage here as well?", "author": "metas-ts", "createdAt": "2020-06-02T08:23:47Z", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/inventory/InventoryRepository.java", "diffHunk": "@@ -250,7 +255,22 @@ private InventoryLineHU toInventoryLineHU(@NonNull final I_M_InventoryLine inven\n \t\telse\n \t\t{\n \t\t\tqtyInternalUse = null;\n-\t\t\tqtyBook = Quantity.of(inventoryLineRecord.getQtyBook(), uom);\n+\n+\t\t\tif (inventoryLineRecord.getM_HU_ID() > 0)\n+\t\t\t{\n+\t\t\t\t//refresh bookedQty from HU\n+\t\t\t\tfinal ProductId productId = ProductId.ofRepoId(inventoryLineRecord.getM_Product_ID());\n+\t\t\t\tfinal HuId huId = HuId.ofRepoId(inventoryLineRecord.getM_HU_ID());\n+\t\t\t\tfinal UomId uomId = UomId.ofRepoId(uom.getC_UOM_ID());\n+\n+\t\t\t\tqtyBook = getFreshBookedQtyFromStorage(productId, uomId, huId).orElse(Quantity.zero(uom));\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\n+\t\t\t\tqtyBook = Quantity.of(inventoryLineRecord.getQtyBook(), uom);", "originalCommit": "d02de9b148037ac6e6a0747c27ddc8e8ddc1a137", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc2NTExMw==", "url": "https://github.com/metasfresh/metasfresh/pull/6748#discussion_r433765113", "bodyText": "why use IHUStorageDAO?", "author": "metas-ts", "createdAt": "2020-06-02T10:06:05Z", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/inventory/InventoryRepository.java", "diffHunk": "@@ -84,6 +87,8 @@\n \tprivate final IUOMConversionBL convBL = Services.get(IUOMConversionBL.class);\n \tprivate final IWarehouseDAO warehousesRepo = Services.get(IWarehouseDAO.class);\n \tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\tprivate final IHUStorageDAO huStorageDAO = Services.get(IHandlingUnitsBL.class).getStorageFactory().getHUStorageDAO();", "originalCommit": "d02de9b148037ac6e6a0747c27ddc8e8ddc1a137", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc2NjIwOQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6748#discussion_r433766209", "bodyText": "i think at this point we would be be better off using not the DB records, but hustorage, as sketched out in my last review", "author": "metas-ts", "createdAt": "2020-06-02T10:08:12Z", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/inventory/InventoryRepository.java", "diffHunk": "@@ -465,6 +498,30 @@ public void saveInventoryLineHURecords(@NonNull final InventoryLine inventoryLin\n \t\t}\n \t}\n \n+\tpublic Optional<Quantity> getFreshBookedQtyFromStorage(@NonNull ProductId productId, @NonNull UomId inventoryLineUOMId, @NonNull HuId huId)\n+\t{\n+\t\tOptional<Quantity> bookedQty = Optional.empty();\n+\n+\t\tI_M_HU hu = huDAO.getById(huId);\n+\n+\t\tfinal I_M_HU_Storage huStorage = huStorageDAO.retrieveStorage(hu, productId);", "originalCommit": "d02de9b148037ac6e6a0747c27ddc8e8ddc1a137", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "aa0301c5d64b174319077b5e7350c90042f34e00", "url": "https://github.com/metasfresh/metasfresh/commit/aa0301c5d64b174319077b5e7350c90042f34e00", "message": "unit tests + minor refactor\nhttps://github.com/metasfresh/metasfresh/issues/6745", "committedDate": "2020-06-02T15:12:00Z", "type": "commit"}, {"oid": "232bc07a2d996f7464f2e117994973a7f30768c2", "url": "https://github.com/metasfresh/metasfresh/commit/232bc07a2d996f7464f2e117994973a7f30768c2", "message": "unit tests fix\nhttps://github.com/metasfresh/metasfresh/issues/6745", "committedDate": "2020-06-02T18:09:02Z", "type": "commit"}]}