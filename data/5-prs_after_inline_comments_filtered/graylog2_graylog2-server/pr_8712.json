{"pr_number": 8712, "pr_title": "Add missing routes to AuthzRolesResource", "pr_createdAt": "2020-08-06T11:34:37Z", "pr_url": "https://github.com/Graylog2/graylog2-server/pull/8712", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM5OTQwOQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/8712#discussion_r466399409", "bodyText": "I think we can use PUT <role-id>/assignee/<username> here:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Path(\"{roleId}/assignee/add/{username}\")\n          \n          \n            \n                @Path(\"{roleId}/assignee/{username}\")", "author": "bernd", "createdAt": "2020-08-06T13:09:43Z", "path": "graylog2-server/src/main/java/org/graylog/security/authzroles/AuthzRolesResource.java", "diffHunk": "@@ -126,7 +180,53 @@ public AuthzRoleDTO get(@ApiParam(name = \"roleId\") @PathParam(\"roleId\") @NotBlan\n             throw new BadRequestException(\"Invalid argument in search query: \" + e.getMessage());\n         }\n \n-        final PaginatedList<AuthzRoleDTO> result = authzRolesService.findPaginatedForUser(searchQuery, page, perPage,sort, order, username);\n+        final PaginatedList<AuthzRoleDTO> result = authzRolesService.findPaginatedForUser(\n+                searchQuery, page, perPage,sort, order, username);\n         return PaginatedResponse.create(\"roles\", result, query);\n     }\n+\n+    @PUT\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @ApiOperation(\"Add a user to a role\")\n+    @AuditEvent(type = AuditEventTypes.USER_UPDATE)\n+    @Path(\"{roleId}/assignee/add/{username}\")", "originalCommit": "60170571ae8690a6d0eccd07e098dd0e3ac07123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQwMDQxMQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/8712#discussion_r466400411", "bodyText": "And DELETE <role-id>/assignee/<username> here:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @PUT\n          \n          \n            \n                @ApiOperation(\"Remove a member to a team\")\n          \n          \n            \n                @Path(\"{roleId}/assignee/remove/{username}\")\n          \n          \n            \n                @DELETE\n          \n          \n            \n                @ApiOperation(\"Remove a member to a team\")\n          \n          \n            \n                @Path(\"{roleId}/assignee/{username}\")", "author": "bernd", "createdAt": "2020-08-06T13:11:15Z", "path": "graylog2-server/src/main/java/org/graylog/security/authzroles/AuthzRolesResource.java", "diffHunk": "@@ -126,7 +180,53 @@ public AuthzRoleDTO get(@ApiParam(name = \"roleId\") @PathParam(\"roleId\") @NotBlan\n             throw new BadRequestException(\"Invalid argument in search query: \" + e.getMessage());\n         }\n \n-        final PaginatedList<AuthzRoleDTO> result = authzRolesService.findPaginatedForUser(searchQuery, page, perPage,sort, order, username);\n+        final PaginatedList<AuthzRoleDTO> result = authzRolesService.findPaginatedForUser(\n+                searchQuery, page, perPage,sort, order, username);\n         return PaginatedResponse.create(\"roles\", result, query);\n     }\n+\n+    @PUT\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @ApiOperation(\"Add a user to a role\")\n+    @AuditEvent(type = AuditEventTypes.USER_UPDATE)\n+    @Path(\"{roleId}/assignee/add/{username}\")\n+    public Response addUser(\n+            @ApiParam(name = \"roleId\") @PathParam(\"roleId\") @NotBlank String roleId,\n+            @ApiParam(name = \"username\") @PathParam(\"username\") @NotBlank String username) throws ValidationException {\n+        checkPermission(USERS_EDIT, username);\n+\n+        final User user = userService.load(username);\n+        if (user == null) {\n+            throw new NotFoundException(\"Cannot find user with name: \" + username);\n+        }\n+        authzRolesService.get(roleId).orElseThrow(() -> new NotFoundException(\"Cannot find role with id: \" + roleId));\n+        Set<String> roles = user.getRoleIds();\n+        roles.add(roleId);\n+        user.setRoleIds(roles);\n+        userService.save(user);\n+\n+        return Response.ok().build();\n+    }\n+\n+    @PUT\n+    @ApiOperation(\"Remove a member to a team\")\n+    @Path(\"{roleId}/assignee/remove/{username}\")", "originalCommit": "60170571ae8690a6d0eccd07e098dd0e3ac07123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQwMjU1Ng==", "url": "https://github.com/Graylog2/graylog2-server/pull/8712#discussion_r466402556", "bodyText": "I think we should return a 204 if we don't want to return anything. (or make the method void instead of returning Response, that's the same)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Response.ok().build();\n          \n          \n            \n                    return Response.noContent().build();", "author": "bernd", "createdAt": "2020-08-06T13:14:40Z", "path": "graylog2-server/src/main/java/org/graylog/security/authzroles/AuthzRolesResource.java", "diffHunk": "@@ -126,7 +180,53 @@ public AuthzRoleDTO get(@ApiParam(name = \"roleId\") @PathParam(\"roleId\") @NotBlan\n             throw new BadRequestException(\"Invalid argument in search query: \" + e.getMessage());\n         }\n \n-        final PaginatedList<AuthzRoleDTO> result = authzRolesService.findPaginatedForUser(searchQuery, page, perPage,sort, order, username);\n+        final PaginatedList<AuthzRoleDTO> result = authzRolesService.findPaginatedForUser(\n+                searchQuery, page, perPage,sort, order, username);\n         return PaginatedResponse.create(\"roles\", result, query);\n     }\n+\n+    @PUT\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @ApiOperation(\"Add a user to a role\")\n+    @AuditEvent(type = AuditEventTypes.USER_UPDATE)\n+    @Path(\"{roleId}/assignee/add/{username}\")\n+    public Response addUser(\n+            @ApiParam(name = \"roleId\") @PathParam(\"roleId\") @NotBlank String roleId,\n+            @ApiParam(name = \"username\") @PathParam(\"username\") @NotBlank String username) throws ValidationException {\n+        checkPermission(USERS_EDIT, username);\n+\n+        final User user = userService.load(username);\n+        if (user == null) {\n+            throw new NotFoundException(\"Cannot find user with name: \" + username);\n+        }\n+        authzRolesService.get(roleId).orElseThrow(() -> new NotFoundException(\"Cannot find role with id: \" + roleId));\n+        Set<String> roles = user.getRoleIds();\n+        roles.add(roleId);\n+        user.setRoleIds(roles);\n+        userService.save(user);\n+\n+        return Response.ok().build();", "originalCommit": "60170571ae8690a6d0eccd07e098dd0e3ac07123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQwMjc5OA==", "url": "https://github.com/Graylog2/graylog2-server/pull/8712#discussion_r466402798", "bodyText": "See comment above.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Response.ok().build();\n          \n          \n            \n                    return Response.noContent().build();", "author": "bernd", "createdAt": "2020-08-06T13:15:01Z", "path": "graylog2-server/src/main/java/org/graylog/security/authzroles/AuthzRolesResource.java", "diffHunk": "@@ -126,7 +180,53 @@ public AuthzRoleDTO get(@ApiParam(name = \"roleId\") @PathParam(\"roleId\") @NotBlan\n             throw new BadRequestException(\"Invalid argument in search query: \" + e.getMessage());\n         }\n \n-        final PaginatedList<AuthzRoleDTO> result = authzRolesService.findPaginatedForUser(searchQuery, page, perPage,sort, order, username);\n+        final PaginatedList<AuthzRoleDTO> result = authzRolesService.findPaginatedForUser(\n+                searchQuery, page, perPage,sort, order, username);\n         return PaginatedResponse.create(\"roles\", result, query);\n     }\n+\n+    @PUT\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @ApiOperation(\"Add a user to a role\")\n+    @AuditEvent(type = AuditEventTypes.USER_UPDATE)\n+    @Path(\"{roleId}/assignee/add/{username}\")\n+    public Response addUser(\n+            @ApiParam(name = \"roleId\") @PathParam(\"roleId\") @NotBlank String roleId,\n+            @ApiParam(name = \"username\") @PathParam(\"username\") @NotBlank String username) throws ValidationException {\n+        checkPermission(USERS_EDIT, username);\n+\n+        final User user = userService.load(username);\n+        if (user == null) {\n+            throw new NotFoundException(\"Cannot find user with name: \" + username);\n+        }\n+        authzRolesService.get(roleId).orElseThrow(() -> new NotFoundException(\"Cannot find role with id: \" + roleId));\n+        Set<String> roles = user.getRoleIds();\n+        roles.add(roleId);\n+        user.setRoleIds(roles);\n+        userService.save(user);\n+\n+        return Response.ok().build();\n+    }\n+\n+    @PUT\n+    @ApiOperation(\"Remove a member to a team\")\n+    @Path(\"{roleId}/assignee/remove/{username}\")\n+    @AuditEvent(type = AuditEventTypes.USER_UPDATE)\n+    public Response removeUser(\n+            @ApiParam(name = \"roleId\") @PathParam(\"roleId\") @NotBlank String roleId,\n+            @ApiParam(name = \"username\") @PathParam(\"username\") @NotBlank String username) throws ValidationException {\n+        checkPermission(USERS_EDIT, username);\n+\n+        final User user = userService.load(username);\n+        if (user == null) {\n+            throw new NotFoundException(\"Cannot find user with name: \" + username);\n+        }\n+        authzRolesService.get(roleId).orElseThrow(() -> new NotFoundException(\"Cannot find role with id: \" + roleId));\n+        Set<String> roles = user.getRoleIds();\n+        roles.remove(roleId);\n+        user.setRoleIds(roles);\n+        userService.save(user);\n+\n+        return Response.ok().build();", "originalCommit": "60170571ae8690a6d0eccd07e098dd0e3ac07123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQwNzUwNA==", "url": "https://github.com/Graylog2/graylog2-server/pull/8712#discussion_r466407504", "bodyText": "We have quite some duplication in #addUser and #removeUser. How about creating a private method to avoid the duplication? \ud83d\ude42 (e.g. updateUserRoles(username, roles -> roles.remove(roleId)) or something similar)", "author": "bernd", "createdAt": "2020-08-06T13:22:22Z", "path": "graylog2-server/src/main/java/org/graylog/security/authzroles/AuthzRolesResource.java", "diffHunk": "@@ -126,7 +180,53 @@ public AuthzRoleDTO get(@ApiParam(name = \"roleId\") @PathParam(\"roleId\") @NotBlan\n             throw new BadRequestException(\"Invalid argument in search query: \" + e.getMessage());\n         }\n \n-        final PaginatedList<AuthzRoleDTO> result = authzRolesService.findPaginatedForUser(searchQuery, page, perPage,sort, order, username);\n+        final PaginatedList<AuthzRoleDTO> result = authzRolesService.findPaginatedForUser(\n+                searchQuery, page, perPage,sort, order, username);\n         return PaginatedResponse.create(\"roles\", result, query);\n     }\n+\n+    @PUT\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @ApiOperation(\"Add a user to a role\")\n+    @AuditEvent(type = AuditEventTypes.USER_UPDATE)\n+    @Path(\"{roleId}/assignee/add/{username}\")\n+    public Response addUser(\n+            @ApiParam(name = \"roleId\") @PathParam(\"roleId\") @NotBlank String roleId,\n+            @ApiParam(name = \"username\") @PathParam(\"username\") @NotBlank String username) throws ValidationException {\n+        checkPermission(USERS_EDIT, username);\n+\n+        final User user = userService.load(username);\n+        if (user == null) {\n+            throw new NotFoundException(\"Cannot find user with name: \" + username);\n+        }\n+        authzRolesService.get(roleId).orElseThrow(() -> new NotFoundException(\"Cannot find role with id: \" + roleId));\n+        Set<String> roles = user.getRoleIds();\n+        roles.add(roleId);\n+        user.setRoleIds(roles);\n+        userService.save(user);\n+\n+        return Response.ok().build();\n+    }\n+\n+    @PUT\n+    @ApiOperation(\"Remove a member to a team\")\n+    @Path(\"{roleId}/assignee/remove/{username}\")\n+    @AuditEvent(type = AuditEventTypes.USER_UPDATE)\n+    public Response removeUser(\n+            @ApiParam(name = \"roleId\") @PathParam(\"roleId\") @NotBlank String roleId,\n+            @ApiParam(name = \"username\") @PathParam(\"username\") @NotBlank String username) throws ValidationException {\n+        checkPermission(USERS_EDIT, username);\n+\n+        final User user = userService.load(username);\n+        if (user == null) {\n+            throw new NotFoundException(\"Cannot find user with name: \" + username);\n+        }\n+        authzRolesService.get(roleId).orElseThrow(() -> new NotFoundException(\"Cannot find role with id: \" + roleId));\n+        Set<String> roles = user.getRoleIds();\n+        roles.remove(roleId);\n+        user.setRoleIds(roles);\n+        userService.save(user);", "originalCommit": "60170571ae8690a6d0eccd07e098dd0e3ac07123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fcbd4d197a3049f437e6b9f2fb481f6b0ea2365a", "url": "https://github.com/Graylog2/graylog2-server/commit/fcbd4d197a3049f437e6b9f2fb481f6b0ea2365a", "message": "Fix annotations from @bernd", "committedDate": "2020-08-07T08:27:48Z", "type": "forcePushed"}, {"oid": "37ecf3642aabfd70f27814ab4fbdf15ff649ba17", "url": "https://github.com/Graylog2/graylog2-server/commit/37ecf3642aabfd70f27814ab4fbdf15ff649ba17", "message": "Add missing routes to AuthzRolesResource\n\nPrior this change, there was no way to get all users which had a certain\nrole assigned. Also the user wanted to add and remove users from the\nrole.\n\nWith this change three new routes were introduced:\n   - get all users for a role\n   - add a role to a user\n   - remove a role from a user", "committedDate": "2020-08-07T11:58:04Z", "type": "commit"}, {"oid": "a9c0bb8e7fc9b2b58711f401289a47bcd8ef43df", "url": "https://github.com/Graylog2/graylog2-server/commit/a9c0bb8e7fc9b2b58711f401289a47bcd8ef43df", "message": "Fix annotations from @bernd", "committedDate": "2020-08-07T11:58:04Z", "type": "commit"}, {"oid": "3c67789c35152bcbfa15b695978bf0ef1503c0fd", "url": "https://github.com/Graylog2/graylog2-server/commit/3c67789c35152bcbfa15b695978bf0ef1503c0fd", "message": "Add missing delete route", "committedDate": "2020-08-07T12:15:05Z", "type": "commit"}, {"oid": "3c67789c35152bcbfa15b695978bf0ef1503c0fd", "url": "https://github.com/Graylog2/graylog2-server/commit/3c67789c35152bcbfa15b695978bf0ef1503c0fd", "message": "Add missing delete route", "committedDate": "2020-08-07T12:15:05Z", "type": "forcePushed"}]}