{"pr_number": 1356, "pr_title": "UI component registries initial implementation", "pr_createdAt": "2020-02-05T19:09:39Z", "pr_url": "https://github.com/openhab/openhab-core/pull/1356", "timeline": [{"oid": "c0b6fa027a54eb2b452222cb8569acc6ef3fe3b5", "url": "https://github.com/openhab/openhab-core/commit/c0b6fa027a54eb2b452222cb8569acc6ef3fe3b5", "message": "UI component registries initial implementation\n\nThis is an initial implementation of #1355.\nIt was simple enough to make to be proposed as\na PR already without waiting for remarks on the RFC.\n\nThe SitemapProvider for the `system:sitemap`\nnamespace as described in #1355 is not part of\nthis PR.\n\nSigned-off-by: Yannick Schaus <github@schaus.net>", "committedDate": "2020-02-05T19:08:16Z", "type": "commit"}, {"oid": "3749850ba12b1753657bd2248a47e0af6a336005", "url": "https://github.com/openhab/openhab-core/commit/3749850ba12b1753657bd2248a47e0af6a336005", "message": "Null check\n\nSigned-off-by: Yannick Schaus <github@schaus.net>", "committedDate": "2020-02-05T19:23:28Z", "type": "commit"}, {"oid": "d0ea4e162c6f27f52cd804cd824890353f4ae8a3", "url": "https://github.com/openhab/openhab-core/commit/d0ea4e162c6f27f52cd804cd824890353f4ae8a3", "message": "Extract interfaces, move implementations, add sitemap provider\n\nSigned-off-by: Yannick Schaus <github@schaus.net>", "committedDate": "2020-02-07T10:36:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3OTkyNQ==", "url": "https://github.com/openhab/openhab-core/pull/1356#discussion_r378479925", "bodyText": "add the reference directly on the field and remove setter and getter", "author": "kaikreuzer", "createdAt": "2020-02-12T19:56:41Z", "path": "bundles/org.openhab.core.ui/src/main/java/org/openhab/core/ui/internal/components/UIComponentRegistryFactoryImpl.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.ui.internal.components;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.openhab.core.storage.StorageService;\n+import org.openhab.core.ui.components.UIComponentRegistryFactory;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+\n+/**\n+ * Implementation for a {@link UIComponentRegistryFactory} using a {@link StorageService} and a\n+ * {@link UIComponentProvider}.\n+ *\n+ * @author Yannick Schaus - Initial contribution\n+ */\n+@Component(service = UIComponentRegistryFactory.class, immediate = true)\n+public class UIComponentRegistryFactoryImpl implements UIComponentRegistryFactory {\n+    StorageService storageService;\n+    Map<String, UIComponentRegistryImpl> registries = new HashMap<>();\n+\n+    @Reference", "originalCommit": "d0ea4e162c6f27f52cd804cd824890353f4ae8a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ5NDY0OA==", "url": "https://github.com/openhab/openhab-core/pull/1356#discussion_r378494648", "bodyText": "If you do a ConfigUtil.normalizeTypes() on the config, you won't have to deal with Double values and other exceptions.", "author": "kaikreuzer", "createdAt": "2020-02-12T20:28:14Z", "path": "bundles/org.openhab.core.ui/src/main/java/org/openhab/core/ui/internal/components/UIComponentSitemapProvider.java", "diffHunk": "@@ -0,0 +1,306 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.ui.internal.components;\n+\n+import java.math.BigDecimal;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.emf.common.util.EList;\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.model.core.ModelRepositoryChangeListener;\n+import org.openhab.core.model.sitemap.SitemapProvider;\n+import org.openhab.core.model.sitemap.sitemap.LinkableWidget;\n+import org.openhab.core.model.sitemap.sitemap.Mapping;\n+import org.openhab.core.model.sitemap.sitemap.Sitemap;\n+import org.openhab.core.model.sitemap.sitemap.SitemapFactory;\n+import org.openhab.core.model.sitemap.sitemap.SitemapPackage;\n+import org.openhab.core.model.sitemap.sitemap.Widget;\n+import org.openhab.core.model.sitemap.sitemap.impl.ChartImpl;\n+import org.openhab.core.model.sitemap.sitemap.impl.ColorpickerImpl;\n+import org.openhab.core.model.sitemap.sitemap.impl.DefaultImpl;\n+import org.openhab.core.model.sitemap.sitemap.impl.FrameImpl;\n+import org.openhab.core.model.sitemap.sitemap.impl.GroupImpl;\n+import org.openhab.core.model.sitemap.sitemap.impl.ImageImpl;\n+import org.openhab.core.model.sitemap.sitemap.impl.ListImpl;\n+import org.openhab.core.model.sitemap.sitemap.impl.MappingImpl;\n+import org.openhab.core.model.sitemap.sitemap.impl.MapviewImpl;\n+import org.openhab.core.model.sitemap.sitemap.impl.SelectionImpl;\n+import org.openhab.core.model.sitemap.sitemap.impl.SetpointImpl;\n+import org.openhab.core.model.sitemap.sitemap.impl.SitemapImpl;\n+import org.openhab.core.model.sitemap.sitemap.impl.SliderImpl;\n+import org.openhab.core.model.sitemap.sitemap.impl.SwitchImpl;\n+import org.openhab.core.model.sitemap.sitemap.impl.TextImpl;\n+import org.openhab.core.model.sitemap.sitemap.impl.VideoImpl;\n+import org.openhab.core.model.sitemap.sitemap.impl.WebviewImpl;\n+import org.openhab.core.model.sitemap.sitemap.impl.WidgetImpl;\n+import org.openhab.core.ui.components.RootUIComponent;\n+import org.openhab.core.ui.components.UIComponent;\n+import org.openhab.core.ui.components.UIComponentRegistry;\n+import org.openhab.core.ui.components.UIComponentRegistryFactory;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ReferenceCardinality;\n+import org.osgi.service.component.annotations.ReferencePolicy;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This {@link SitemapProvider} provides sitemaps from all well-formed {@link RootUIComponent} found in a specific\n+ * \"system:sitemap\" namespace.\n+ *\n+ * @author Yannick Schaus - Initial contribution\n+ */\n+@Component(service = SitemapProvider.class)\n+public class UIComponentSitemapProvider implements SitemapProvider {\n+    private final Logger logger = LoggerFactory.getLogger(UIComponentSitemapProvider.class);\n+\n+    public static final String SITEMAP_NAMESPACE = \"system:sitemap\";\n+\n+    private Map<String, Sitemap> sitemaps = new HashMap<>();\n+    private UIComponentRegistryFactory componentRegistryFactory;\n+\n+    @Override\n+    public @Nullable Sitemap getSitemap(@NonNull String sitemapName) {\n+        buildSitemap(sitemapName);\n+        return sitemaps.get(sitemapName);\n+    }\n+\n+    @Override\n+    public @NonNull Set<@NonNull String> getSitemapNames() {\n+        sitemaps.clear();\n+        UIComponentRegistry registry = componentRegistryFactory.getRegistry(SITEMAP_NAMESPACE);\n+        Collection<RootUIComponent> rootComponents = registry.getAll();\n+        // try building all sitemaps to leave the invalid ones out\n+        for (RootUIComponent rootComponent : rootComponents) {\n+            try {\n+                Sitemap sitemap = buildSitemap(rootComponent);\n+                sitemaps.put(sitemap.getName(), sitemap);\n+            } catch (Exception e) {\n+                logger.error(\"Cannot build sitemap {}\", rootComponent.getUID(), e);\n+            }\n+        }\n+\n+        return sitemaps.keySet();\n+    }\n+\n+    protected Sitemap buildSitemap(String sitemapName) {\n+        UIComponentRegistry registry = componentRegistryFactory.getRegistry(SITEMAP_NAMESPACE);\n+        RootUIComponent rootComponent = registry.get(sitemapName);\n+        if (rootComponent != null) {\n+            try {\n+                Sitemap sitemap = buildSitemap(rootComponent);\n+                sitemaps.put(sitemap.getName(), sitemap);\n+                return null;\n+            } catch (Exception e) {\n+                logger.error(\"Cannot build sitemap {}\", rootComponent.getUID(), e);\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    protected Sitemap buildSitemap(RootUIComponent rootComponent) {\n+        if (!\"Sitemap\".equals(rootComponent.getType())) {\n+            throw new IllegalArgumentException(\"Root component type is not Sitemap\");\n+        }\n+\n+        SitemapImpl sitemap = (SitemapImpl) SitemapFactory.eINSTANCE.createSitemap();\n+        sitemap.setName(rootComponent.getUID());\n+        sitemap.setLabel(rootComponent.getConfig().get(\"label\").toString());\n+\n+        if (rootComponent.getSlots() != null && rootComponent.getSlots().containsKey(\"widgets\")) {\n+            for (UIComponent component : rootComponent.getSlot(\"widgets\")) {\n+                Widget widget = buildWidget(component);\n+                if (widget != null) {\n+                    sitemap.getChildren().add(widget);\n+                }\n+            }\n+        }\n+\n+        return sitemap;\n+    }\n+\n+    protected Widget buildWidget(UIComponent component) {\n+        Widget widget = null;\n+\n+        switch (component.getType()) {\n+            case \"Frame\":\n+                FrameImpl frameWidget = (FrameImpl) SitemapFactory.eINSTANCE.createFrame();\n+                widget = frameWidget;\n+                break;\n+            case \"Text\":\n+                TextImpl textWidget = (TextImpl) SitemapFactory.eINSTANCE.createText();\n+                widget = textWidget;\n+                break;\n+            case \"Group\":\n+                GroupImpl groupWidget = (GroupImpl) SitemapFactory.eINSTANCE.createGroup();\n+                widget = groupWidget;\n+                break;\n+            case \"Image\":\n+                ImageImpl imageWidget = (ImageImpl) SitemapFactory.eINSTANCE.createImage();\n+                widget = imageWidget;\n+                setWidgetPropertyFromComponentConfig(widget, component, \"url\", SitemapPackage.IMAGE__URL);\n+                setWidgetPropertyFromComponentConfig(widget, component, \"refresh\", SitemapPackage.IMAGE__REFRESH);\n+                break;\n+            case \"Video\":\n+                VideoImpl videoWidget = (VideoImpl) SitemapFactory.eINSTANCE.createVideo();\n+                widget = videoWidget;\n+                setWidgetPropertyFromComponentConfig(widget, component, \"url\", SitemapPackage.IMAGE__URL);\n+                setWidgetPropertyFromComponentConfig(widget, component, \"encoding\", SitemapPackage.VIDEO__ENCODING);\n+                break;\n+            case \"Chart\":\n+                ChartImpl chartWidget = (ChartImpl) SitemapFactory.eINSTANCE.createChart();\n+                widget = chartWidget;\n+                setWidgetPropertyFromComponentConfig(widget, component, \"service\", SitemapPackage.CHART__SERVICE);\n+                setWidgetPropertyFromComponentConfig(widget, component, \"refresh\", SitemapPackage.CHART__REFRESH);\n+                setWidgetPropertyFromComponentConfig(widget, component, \"period\", SitemapPackage.CHART__PERIOD);\n+                setWidgetPropertyFromComponentConfig(widget, component, \"legend\", SitemapPackage.CHART__LEGEND);\n+                break;\n+            case \"Webview\":\n+                WebviewImpl webviewWidget = (WebviewImpl) SitemapFactory.eINSTANCE.createWebview();\n+                widget = webviewWidget;\n+                setWidgetPropertyFromComponentConfig(widget, component, \"height\", SitemapPackage.WEBVIEW__HEIGHT);\n+                setWidgetPropertyFromComponentConfig(widget, component, \"url\", SitemapPackage.WEBVIEW__URL);\n+                break;\n+            case \"Switch\":\n+                SwitchImpl switchWidget = (SwitchImpl) SitemapFactory.eINSTANCE.createSwitch();\n+                addWidgetMappings(switchWidget.getMappings(), component);\n+                widget = switchWidget;\n+                break;\n+            case \"Mapview\":\n+                MapviewImpl mapviewWidget = (MapviewImpl) SitemapFactory.eINSTANCE.createMapview();\n+                widget = mapviewWidget;\n+                setWidgetPropertyFromComponentConfig(widget, component, \"height\", SitemapPackage.WEBVIEW__HEIGHT);\n+                break;\n+            case \"Slider\":\n+                SliderImpl sliderWidget = (SliderImpl) SitemapFactory.eINSTANCE.createSlider();\n+                widget = sliderWidget;\n+                setWidgetPropertyFromComponentConfig(widget, component, \"minValue\", SitemapPackage.SLIDER__MIN_VALUE);\n+                setWidgetPropertyFromComponentConfig(widget, component, \"maxValue\", SitemapPackage.SLIDER__MAX_VALUE);\n+                setWidgetPropertyFromComponentConfig(widget, component, \"step\", SitemapPackage.SLIDER__STEP);\n+                setWidgetPropertyFromComponentConfig(widget, component, \"switchEnabled\",\n+                        SitemapPackage.SLIDER__SWITCH_ENABLED);\n+                setWidgetPropertyFromComponentConfig(widget, component, \"sendFrequency\",\n+                        SitemapPackage.SLIDER__FREQUENCY);\n+                break;\n+            case \"Selection\":\n+                SelectionImpl selectionWidget = (SelectionImpl) SitemapFactory.eINSTANCE.createSelection();\n+                addWidgetMappings(selectionWidget.getMappings(), component);\n+                widget = selectionWidget;\n+                setWidgetPropertyFromComponentConfig(widget, component, \"height\", SitemapPackage.WEBVIEW__HEIGHT);\n+                break;\n+            case \"List\":\n+                ListImpl listWidget = (ListImpl) SitemapFactory.eINSTANCE.createList();\n+                widget = listWidget;\n+                setWidgetPropertyFromComponentConfig(widget, component, \"separator\", SitemapPackage.LIST__SEPARATOR);\n+                break;\n+            case \"Setpoint\":\n+                SetpointImpl setpointWidget = (SetpointImpl) SitemapFactory.eINSTANCE.createSetpoint();\n+                widget = setpointWidget;\n+                setWidgetPropertyFromComponentConfig(widget, component, \"minValue\", SitemapPackage.SETPOINT__MIN_VALUE);\n+                setWidgetPropertyFromComponentConfig(widget, component, \"maxValue\", SitemapPackage.SETPOINT__MAX_VALUE);\n+                setWidgetPropertyFromComponentConfig(widget, component, \"step\", SitemapPackage.SETPOINT__STEP);\n+                break;\n+            case \"Colorpicker\":\n+                ColorpickerImpl colorpickerWidget = (ColorpickerImpl) SitemapFactory.eINSTANCE.createColorpicker();\n+                widget = colorpickerWidget;\n+                setWidgetPropertyFromComponentConfig(widget, component, \"frequency\",\n+                        SitemapPackage.COLORPICKER__FREQUENCY);\n+                break;\n+            case \"Default\":\n+                DefaultImpl defaultWidget = (DefaultImpl) SitemapFactory.eINSTANCE.createDefault();\n+                widget = defaultWidget;\n+                setWidgetPropertyFromComponentConfig(widget, component, \"height\", SitemapPackage.DEFAULT__HEIGHT);\n+                break;\n+            default:\n+                logger.warn(\"Unknown sitemap component type {}\", component.getType());\n+                break;\n+        }\n+\n+        if (widget != null) {\n+            setWidgetPropertyFromComponentConfig(widget, component, \"label\", SitemapPackage.WIDGET__LABEL);\n+            setWidgetPropertyFromComponentConfig(widget, component, \"icon\", SitemapPackage.WIDGET__ICON);\n+            setWidgetPropertyFromComponentConfig(widget, component, \"item\", SitemapPackage.WIDGET__ITEM);\n+\n+            if (widget instanceof LinkableWidget) {\n+                LinkableWidget linkableWidget = (LinkableWidget) widget;\n+                if (component.getSlots() != null && component.getSlots().containsKey(\"widgets\")) {\n+                    for (UIComponent childComponent : component.getSlot(\"widgets\")) {\n+                        Widget childWidget = buildWidget(childComponent);\n+                        if (childWidget != null) {\n+                            linkableWidget.getChildren().add(childWidget);\n+                        }\n+                    }\n+                }\n+            }\n+\n+            // TODO: process visibility & color rules\n+        }\n+\n+        return widget;\n+    }\n+\n+    private void setWidgetPropertyFromComponentConfig(Widget widget, UIComponent component, String configParamName,\n+            int feature) {\n+        if (component == null || component.getConfig() == null) {\n+            return;\n+        }\n+        Object value = component.getConfig().get(configParamName);\n+        if (value == null) {\n+            return;\n+        }\n+        if (value instanceof Double) {", "originalCommit": "d0ea4e162c6f27f52cd804cd824890353f4ae8a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ5NjA0Mw==", "url": "https://github.com/openhab/openhab-core/pull/1356#discussion_r378496043", "bodyText": "This class here should registered as a listener on UIComponentRegistry, then it could also inform any ModelRepositoryChangeListener that is passed in here about changes in the sitemap.", "author": "kaikreuzer", "createdAt": "2020-02-12T20:31:21Z", "path": "bundles/org.openhab.core.ui/src/main/java/org/openhab/core/ui/internal/components/UIComponentSitemapProvider.java", "diffHunk": "@@ -0,0 +1,306 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.ui.internal.components;\n+\n+import java.math.BigDecimal;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.emf.common.util.EList;\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.model.core.ModelRepositoryChangeListener;\n+import org.openhab.core.model.sitemap.SitemapProvider;\n+import org.openhab.core.model.sitemap.sitemap.LinkableWidget;\n+import org.openhab.core.model.sitemap.sitemap.Mapping;\n+import org.openhab.core.model.sitemap.sitemap.Sitemap;\n+import org.openhab.core.model.sitemap.sitemap.SitemapFactory;\n+import org.openhab.core.model.sitemap.sitemap.SitemapPackage;\n+import org.openhab.core.model.sitemap.sitemap.Widget;\n+import org.openhab.core.model.sitemap.sitemap.impl.ChartImpl;\n+import org.openhab.core.model.sitemap.sitemap.impl.ColorpickerImpl;\n+import org.openhab.core.model.sitemap.sitemap.impl.DefaultImpl;\n+import org.openhab.core.model.sitemap.sitemap.impl.FrameImpl;\n+import org.openhab.core.model.sitemap.sitemap.impl.GroupImpl;\n+import org.openhab.core.model.sitemap.sitemap.impl.ImageImpl;\n+import org.openhab.core.model.sitemap.sitemap.impl.ListImpl;\n+import org.openhab.core.model.sitemap.sitemap.impl.MappingImpl;\n+import org.openhab.core.model.sitemap.sitemap.impl.MapviewImpl;\n+import org.openhab.core.model.sitemap.sitemap.impl.SelectionImpl;\n+import org.openhab.core.model.sitemap.sitemap.impl.SetpointImpl;\n+import org.openhab.core.model.sitemap.sitemap.impl.SitemapImpl;\n+import org.openhab.core.model.sitemap.sitemap.impl.SliderImpl;\n+import org.openhab.core.model.sitemap.sitemap.impl.SwitchImpl;\n+import org.openhab.core.model.sitemap.sitemap.impl.TextImpl;\n+import org.openhab.core.model.sitemap.sitemap.impl.VideoImpl;\n+import org.openhab.core.model.sitemap.sitemap.impl.WebviewImpl;\n+import org.openhab.core.model.sitemap.sitemap.impl.WidgetImpl;\n+import org.openhab.core.ui.components.RootUIComponent;\n+import org.openhab.core.ui.components.UIComponent;\n+import org.openhab.core.ui.components.UIComponentRegistry;\n+import org.openhab.core.ui.components.UIComponentRegistryFactory;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ReferenceCardinality;\n+import org.osgi.service.component.annotations.ReferencePolicy;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This {@link SitemapProvider} provides sitemaps from all well-formed {@link RootUIComponent} found in a specific\n+ * \"system:sitemap\" namespace.\n+ *\n+ * @author Yannick Schaus - Initial contribution\n+ */\n+@Component(service = SitemapProvider.class)\n+public class UIComponentSitemapProvider implements SitemapProvider {\n+    private final Logger logger = LoggerFactory.getLogger(UIComponentSitemapProvider.class);\n+\n+    public static final String SITEMAP_NAMESPACE = \"system:sitemap\";\n+\n+    private Map<String, Sitemap> sitemaps = new HashMap<>();\n+    private UIComponentRegistryFactory componentRegistryFactory;\n+\n+    @Override\n+    public @Nullable Sitemap getSitemap(@NonNull String sitemapName) {\n+        buildSitemap(sitemapName);\n+        return sitemaps.get(sitemapName);\n+    }\n+\n+    @Override\n+    public @NonNull Set<@NonNull String> getSitemapNames() {\n+        sitemaps.clear();\n+        UIComponentRegistry registry = componentRegistryFactory.getRegistry(SITEMAP_NAMESPACE);\n+        Collection<RootUIComponent> rootComponents = registry.getAll();\n+        // try building all sitemaps to leave the invalid ones out\n+        for (RootUIComponent rootComponent : rootComponents) {\n+            try {\n+                Sitemap sitemap = buildSitemap(rootComponent);\n+                sitemaps.put(sitemap.getName(), sitemap);\n+            } catch (Exception e) {\n+                logger.error(\"Cannot build sitemap {}\", rootComponent.getUID(), e);\n+            }\n+        }\n+\n+        return sitemaps.keySet();\n+    }\n+\n+    protected Sitemap buildSitemap(String sitemapName) {\n+        UIComponentRegistry registry = componentRegistryFactory.getRegistry(SITEMAP_NAMESPACE);\n+        RootUIComponent rootComponent = registry.get(sitemapName);\n+        if (rootComponent != null) {\n+            try {\n+                Sitemap sitemap = buildSitemap(rootComponent);\n+                sitemaps.put(sitemap.getName(), sitemap);\n+                return null;\n+            } catch (Exception e) {\n+                logger.error(\"Cannot build sitemap {}\", rootComponent.getUID(), e);\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    protected Sitemap buildSitemap(RootUIComponent rootComponent) {\n+        if (!\"Sitemap\".equals(rootComponent.getType())) {\n+            throw new IllegalArgumentException(\"Root component type is not Sitemap\");\n+        }\n+\n+        SitemapImpl sitemap = (SitemapImpl) SitemapFactory.eINSTANCE.createSitemap();\n+        sitemap.setName(rootComponent.getUID());\n+        sitemap.setLabel(rootComponent.getConfig().get(\"label\").toString());\n+\n+        if (rootComponent.getSlots() != null && rootComponent.getSlots().containsKey(\"widgets\")) {\n+            for (UIComponent component : rootComponent.getSlot(\"widgets\")) {\n+                Widget widget = buildWidget(component);\n+                if (widget != null) {\n+                    sitemap.getChildren().add(widget);\n+                }\n+            }\n+        }\n+\n+        return sitemap;\n+    }\n+\n+    protected Widget buildWidget(UIComponent component) {\n+        Widget widget = null;\n+\n+        switch (component.getType()) {\n+            case \"Frame\":\n+                FrameImpl frameWidget = (FrameImpl) SitemapFactory.eINSTANCE.createFrame();\n+                widget = frameWidget;\n+                break;\n+            case \"Text\":\n+                TextImpl textWidget = (TextImpl) SitemapFactory.eINSTANCE.createText();\n+                widget = textWidget;\n+                break;\n+            case \"Group\":\n+                GroupImpl groupWidget = (GroupImpl) SitemapFactory.eINSTANCE.createGroup();\n+                widget = groupWidget;\n+                break;\n+            case \"Image\":\n+                ImageImpl imageWidget = (ImageImpl) SitemapFactory.eINSTANCE.createImage();\n+                widget = imageWidget;\n+                setWidgetPropertyFromComponentConfig(widget, component, \"url\", SitemapPackage.IMAGE__URL);\n+                setWidgetPropertyFromComponentConfig(widget, component, \"refresh\", SitemapPackage.IMAGE__REFRESH);\n+                break;\n+            case \"Video\":\n+                VideoImpl videoWidget = (VideoImpl) SitemapFactory.eINSTANCE.createVideo();\n+                widget = videoWidget;\n+                setWidgetPropertyFromComponentConfig(widget, component, \"url\", SitemapPackage.IMAGE__URL);\n+                setWidgetPropertyFromComponentConfig(widget, component, \"encoding\", SitemapPackage.VIDEO__ENCODING);\n+                break;\n+            case \"Chart\":\n+                ChartImpl chartWidget = (ChartImpl) SitemapFactory.eINSTANCE.createChart();\n+                widget = chartWidget;\n+                setWidgetPropertyFromComponentConfig(widget, component, \"service\", SitemapPackage.CHART__SERVICE);\n+                setWidgetPropertyFromComponentConfig(widget, component, \"refresh\", SitemapPackage.CHART__REFRESH);\n+                setWidgetPropertyFromComponentConfig(widget, component, \"period\", SitemapPackage.CHART__PERIOD);\n+                setWidgetPropertyFromComponentConfig(widget, component, \"legend\", SitemapPackage.CHART__LEGEND);\n+                break;\n+            case \"Webview\":\n+                WebviewImpl webviewWidget = (WebviewImpl) SitemapFactory.eINSTANCE.createWebview();\n+                widget = webviewWidget;\n+                setWidgetPropertyFromComponentConfig(widget, component, \"height\", SitemapPackage.WEBVIEW__HEIGHT);\n+                setWidgetPropertyFromComponentConfig(widget, component, \"url\", SitemapPackage.WEBVIEW__URL);\n+                break;\n+            case \"Switch\":\n+                SwitchImpl switchWidget = (SwitchImpl) SitemapFactory.eINSTANCE.createSwitch();\n+                addWidgetMappings(switchWidget.getMappings(), component);\n+                widget = switchWidget;\n+                break;\n+            case \"Mapview\":\n+                MapviewImpl mapviewWidget = (MapviewImpl) SitemapFactory.eINSTANCE.createMapview();\n+                widget = mapviewWidget;\n+                setWidgetPropertyFromComponentConfig(widget, component, \"height\", SitemapPackage.WEBVIEW__HEIGHT);\n+                break;\n+            case \"Slider\":\n+                SliderImpl sliderWidget = (SliderImpl) SitemapFactory.eINSTANCE.createSlider();\n+                widget = sliderWidget;\n+                setWidgetPropertyFromComponentConfig(widget, component, \"minValue\", SitemapPackage.SLIDER__MIN_VALUE);\n+                setWidgetPropertyFromComponentConfig(widget, component, \"maxValue\", SitemapPackage.SLIDER__MAX_VALUE);\n+                setWidgetPropertyFromComponentConfig(widget, component, \"step\", SitemapPackage.SLIDER__STEP);\n+                setWidgetPropertyFromComponentConfig(widget, component, \"switchEnabled\",\n+                        SitemapPackage.SLIDER__SWITCH_ENABLED);\n+                setWidgetPropertyFromComponentConfig(widget, component, \"sendFrequency\",\n+                        SitemapPackage.SLIDER__FREQUENCY);\n+                break;\n+            case \"Selection\":\n+                SelectionImpl selectionWidget = (SelectionImpl) SitemapFactory.eINSTANCE.createSelection();\n+                addWidgetMappings(selectionWidget.getMappings(), component);\n+                widget = selectionWidget;\n+                setWidgetPropertyFromComponentConfig(widget, component, \"height\", SitemapPackage.WEBVIEW__HEIGHT);\n+                break;\n+            case \"List\":\n+                ListImpl listWidget = (ListImpl) SitemapFactory.eINSTANCE.createList();\n+                widget = listWidget;\n+                setWidgetPropertyFromComponentConfig(widget, component, \"separator\", SitemapPackage.LIST__SEPARATOR);\n+                break;\n+            case \"Setpoint\":\n+                SetpointImpl setpointWidget = (SetpointImpl) SitemapFactory.eINSTANCE.createSetpoint();\n+                widget = setpointWidget;\n+                setWidgetPropertyFromComponentConfig(widget, component, \"minValue\", SitemapPackage.SETPOINT__MIN_VALUE);\n+                setWidgetPropertyFromComponentConfig(widget, component, \"maxValue\", SitemapPackage.SETPOINT__MAX_VALUE);\n+                setWidgetPropertyFromComponentConfig(widget, component, \"step\", SitemapPackage.SETPOINT__STEP);\n+                break;\n+            case \"Colorpicker\":\n+                ColorpickerImpl colorpickerWidget = (ColorpickerImpl) SitemapFactory.eINSTANCE.createColorpicker();\n+                widget = colorpickerWidget;\n+                setWidgetPropertyFromComponentConfig(widget, component, \"frequency\",\n+                        SitemapPackage.COLORPICKER__FREQUENCY);\n+                break;\n+            case \"Default\":\n+                DefaultImpl defaultWidget = (DefaultImpl) SitemapFactory.eINSTANCE.createDefault();\n+                widget = defaultWidget;\n+                setWidgetPropertyFromComponentConfig(widget, component, \"height\", SitemapPackage.DEFAULT__HEIGHT);\n+                break;\n+            default:\n+                logger.warn(\"Unknown sitemap component type {}\", component.getType());\n+                break;\n+        }\n+\n+        if (widget != null) {\n+            setWidgetPropertyFromComponentConfig(widget, component, \"label\", SitemapPackage.WIDGET__LABEL);\n+            setWidgetPropertyFromComponentConfig(widget, component, \"icon\", SitemapPackage.WIDGET__ICON);\n+            setWidgetPropertyFromComponentConfig(widget, component, \"item\", SitemapPackage.WIDGET__ITEM);\n+\n+            if (widget instanceof LinkableWidget) {\n+                LinkableWidget linkableWidget = (LinkableWidget) widget;\n+                if (component.getSlots() != null && component.getSlots().containsKey(\"widgets\")) {\n+                    for (UIComponent childComponent : component.getSlot(\"widgets\")) {\n+                        Widget childWidget = buildWidget(childComponent);\n+                        if (childWidget != null) {\n+                            linkableWidget.getChildren().add(childWidget);\n+                        }\n+                    }\n+                }\n+            }\n+\n+            // TODO: process visibility & color rules\n+        }\n+\n+        return widget;\n+    }\n+\n+    private void setWidgetPropertyFromComponentConfig(Widget widget, UIComponent component, String configParamName,\n+            int feature) {\n+        if (component == null || component.getConfig() == null) {\n+            return;\n+        }\n+        Object value = component.getConfig().get(configParamName);\n+        if (value == null) {\n+            return;\n+        }\n+        if (value instanceof Double) {\n+            value = new BigDecimal((Double) value);\n+        }\n+        WidgetImpl widgetImpl = (WidgetImpl) widget;\n+        widgetImpl.eSet(feature, value);\n+    }\n+\n+    private void addWidgetMappings(EList<Mapping> mappings, UIComponent component) {\n+        if (component.getConfig() != null && component.getConfig().containsKey(\"mappings\")) {\n+            if (component.getConfig().get(\"mappings\") instanceof Collection<?>) {\n+                for (Object sourceMapping : (Collection<?>) component.getConfig().get(\"mappings\")) {\n+                    if (sourceMapping instanceof String) {\n+                        String cmd = sourceMapping.toString().split(\"=\")[0].trim();\n+                        String label = sourceMapping.toString().split(\"=\")[1].trim();\n+                        MappingImpl mapping = (MappingImpl) SitemapFactory.eINSTANCE.createMapping();\n+                        mapping.setCmd(cmd);\n+                        mapping.setLabel(label);\n+                        mappings.add(mapping);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void addModelChangeListener(@NonNull ModelRepositoryChangeListener listener) {", "originalCommit": "d0ea4e162c6f27f52cd804cd824890353f4ae8a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "36b7dcca918b27b727f5fa43b9f690725a4c3897", "url": "https://github.com/openhab/openhab-core/commit/36b7dcca918b27b727f5fa43b9f690725a4c3897", "message": "Address review comments\n\nSigned-off-by: Yannick Schaus <github@schaus.net>", "committedDate": "2020-02-13T00:10:16Z", "type": "commit"}]}