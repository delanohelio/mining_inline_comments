{"pr_number": 1387, "pr_title": "Allow persistence services to define default strategies", "pr_createdAt": "2020-03-06T22:57:56Z", "pr_url": "https://github.com/openhab/openhab-core/pull/1387", "timeline": [{"oid": "4b99a226200771c82c1e4edddea7687e5d950098", "url": "https://github.com/openhab/openhab-core/commit/4b99a226200771c82c1e4edddea7687e5d950098", "message": "Allow persistence services to define default strategies\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>", "committedDate": "2020-03-06T22:56:41Z", "type": "commit"}, {"oid": "da4f3b99f2c858a62dfe54442bd92b4a0183a044", "url": "https://github.com/openhab/openhab-core/commit/da4f3b99f2c858a62dfe54442bd92b4a0183a044", "message": "fixed test\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>", "committedDate": "2020-03-06T23:26:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1ODI3Mw==", "url": "https://github.com/openhab/openhab-core/pull/1387#discussion_r389358273", "bodyText": "I know that this PR is APIBreaking anyways but you also can add the default method implementation here:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                List<PersistenceStrategy> getDefaultStrategies();\n          \n          \n            \n                default List<PersistenceStrategy> getDefaultStrategies() {\n          \n          \n            \n                    return Collections.emptyList();\n          \n          \n            \n                }\n          \n      \n    \n    \n  \n\nBe aware of an eventually missing import.", "author": "cweitkamp", "createdAt": "2020-03-08T11:04:02Z", "path": "bundles/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/PersistenceService.java", "diffHunk": "@@ -70,4 +72,11 @@\n      * @param alias the alias under which the item should be persisted.\n      */\n     void store(Item item, String alias);\n+\n+    /**\n+     * Provides default persistence strategies that are used for all items if no user defined configuration is found.\n+     *\n+     * @return The default persistence strategies\n+     */\n+    List<PersistenceStrategy> getDefaultStrategies();", "originalCommit": "da4f3b99f2c858a62dfe54442bd92b4a0183a044", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQwMTc4Mw==", "url": "https://github.com/openhab/openhab-core/pull/1387#discussion_r389401783", "bodyText": "I thought about this, but I decided against it. Problem with the default methods is that no method skeleton is created in implementing classes, so that developers are not aware that they should actually think about implementing the method.", "author": "kaikreuzer", "createdAt": "2020-03-08T20:19:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1ODI3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1ODMwNA==", "url": "https://github.com/openhab/openhab-core/pull/1387#discussion_r389358304", "bodyText": "Should we add nullness annotations and other touched interfaces / classes?", "author": "cweitkamp", "createdAt": "2020-03-08T11:04:50Z", "path": "bundles/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/PersistenceFilter.java", "diffHunk": "@@ -17,6 +17,6 @@\n  *\n  * @author Markus Rathgeb - Initial contribution\n  */\n-public class SimpleFilter {\n+public class PersistenceFilter {", "originalCommit": "da4f3b99f2c858a62dfe54442bd92b4a0183a044", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQwMjk0OQ==", "url": "https://github.com/openhab/openhab-core/pull/1387#discussion_r389402949", "bodyText": "Added.", "author": "kaikreuzer", "createdAt": "2020-03-08T20:35:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1ODMwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1OTEzOA==", "url": "https://github.com/openhab/openhab-core/pull/1387#discussion_r389359138", "bodyText": "Minor spelling improvement:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                        \"Failed to restore item states as persistence service '{}' can not be queried.\",\n          \n          \n            \n                                                        \"Failed to restore item states as persistence service '{}' cannot be queried.\",", "author": "cweitkamp", "createdAt": "2020-03-08T11:16:55Z", "path": "bundles/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/internal/PersistenceManagerImpl.java", "diffHunk": "@@ -256,46 +261,50 @@ private boolean appliesToItem(SimpleItemConfiguration config, Item item) {\n     private void initialize(Item item) {\n         // get the last persisted state from the persistence service if no state is yet set\n         if (item.getState().equals(UnDefType.NULL) && item instanceof GenericItem) {\n-            for (Entry<String, PersistenceServiceConfiguration> entry : persistenceServiceConfigs.entrySet()) {\n+            for (Entry<String, @Nullable PersistenceServiceConfiguration> entry : persistenceServiceConfigs\n+                    .entrySet()) {\n                 final String serviceName = entry.getKey();\n                 final PersistenceServiceConfiguration config = entry.getValue();\n-                for (SimpleItemConfiguration itemConfig : config.getConfigs()) {\n-                    if (hasStrategy(config, itemConfig, SimpleStrategy.Globals.RESTORE)) {\n-                        if (appliesToItem(itemConfig, item)) {\n-                            PersistenceService service = persistenceServices.get(serviceName);\n-                            if (service instanceof QueryablePersistenceService) {\n-                                QueryablePersistenceService queryService = (QueryablePersistenceService) service;\n-                                FilterCriteria filter = new FilterCriteria().setItemName(item.getName()).setPageSize(1);\n-                                Iterable<HistoricItem> result = safeCaller\n-                                        .create(queryService, QueryablePersistenceService.class).onTimeout(() -> {\n-                                            logger.warn(\"Querying persistence service '{}' takes more than {}ms.\",\n-                                                    queryService.getId(), SafeCaller.DEFAULT_TIMEOUT);\n-                                        }).onException(e -> {\n-                                            logger.error(\n-                                                    \"Exception occurred while querying persistence service '{}': {}\",\n-                                                    queryService.getId(), e.getMessage(), e);\n-                                        }).build().query(filter);\n-                                if (result != null) {\n-                                    Iterator<HistoricItem> it = result.iterator();\n-                                    if (it.hasNext()) {\n-                                        HistoricItem historicItem = it.next();\n-                                        GenericItem genericItem = (GenericItem) item;\n-                                        genericItem.removeStateChangeListener(this);\n-                                        genericItem.setState(historicItem.getState());\n-                                        genericItem.addStateChangeListener(this);\n-                                        if (logger.isDebugEnabled()) {\n-                                            logger.debug(\"Restored item state from '{}' for item '{}' -> '{}'\",\n-                                                    DateFormat.getDateTimeInstance()\n-                                                            .format(historicItem.getTimestamp()),\n-                                                    item.getName(), historicItem.getState());\n+                if (config != null) {\n+                    for (PersistenceItemConfiguration itemConfig : config.getConfigs()) {\n+                        if (hasStrategy(config, itemConfig, PersistenceStrategy.Globals.RESTORE)) {\n+                            if (appliesToItem(itemConfig, item)) {\n+                                PersistenceService service = persistenceServices.get(serviceName);\n+                                if (service instanceof QueryablePersistenceService) {\n+                                    QueryablePersistenceService queryService = (QueryablePersistenceService) service;\n+                                    FilterCriteria filter = new FilterCriteria().setItemName(item.getName())\n+                                            .setPageSize(1);\n+                                    Iterable<HistoricItem> result = safeCaller\n+                                            .create(queryService, QueryablePersistenceService.class).onTimeout(() -> {\n+                                                logger.warn(\"Querying persistence service '{}' takes more than {}ms.\",\n+                                                        queryService.getId(), SafeCaller.DEFAULT_TIMEOUT);\n+                                            }).onException(e -> {\n+                                                logger.error(\n+                                                        \"Exception occurred while querying persistence service '{}': {}\",\n+                                                        queryService.getId(), e.getMessage(), e);\n+                                            }).build().query(filter);\n+                                    if (result != null) {\n+                                        Iterator<HistoricItem> it = result.iterator();\n+                                        if (it.hasNext()) {\n+                                            HistoricItem historicItem = it.next();\n+                                            GenericItem genericItem = (GenericItem) item;\n+                                            genericItem.removeStateChangeListener(this);\n+                                            genericItem.setState(historicItem.getState());\n+                                            genericItem.addStateChangeListener(this);\n+                                            if (logger.isDebugEnabled()) {\n+                                                logger.debug(\"Restored item state from '{}' for item '{}' -> '{}'\",\n+                                                        DateFormat.getDateTimeInstance()\n+                                                                .format(historicItem.getTimestamp()),\n+                                                        item.getName(), historicItem.getState());\n+                                            }\n+                                            return;\n                                         }\n-                                        return;\n                                     }\n+                                } else if (service != null) {\n+                                    logger.warn(\n+                                            \"Failed to restore item states as persistence service '{}' can not be queried.\",", "originalCommit": "da4f3b99f2c858a62dfe54442bd92b4a0183a044", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1OTUxNg==", "url": "https://github.com/openhab/openhab-core/pull/1387#discussion_r389359516", "bodyText": "One liner?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!persistenceServiceConfigs.containsKey(persistenceService.getId())) {\n          \n          \n            \n                        persistenceServiceConfigs.put(persistenceService.getId(), getDefaultConfig(persistenceService));\n          \n          \n            \n                    }\n          \n          \n            \n                    persistenceServiceConfigs.putIfAbsent(persistenceService.getId(), getDefaultConfig(persistenceService));", "author": "cweitkamp", "createdAt": "2020-03-08T11:22:40Z", "path": "bundles/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/internal/PersistenceManagerImpl.java", "diffHunk": "@@ -107,6 +108,9 @@ protected void deactivate() {\n     protected void addPersistenceService(PersistenceService persistenceService) {\n         logger.debug(\"Initializing {} persistence service.\", persistenceService.getId());\n         persistenceServices.put(persistenceService.getId(), persistenceService);\n+        if (!persistenceServiceConfigs.containsKey(persistenceService.getId())) {\n+            persistenceServiceConfigs.put(persistenceService.getId(), getDefaultConfig(persistenceService));\n+        }", "originalCommit": "da4f3b99f2c858a62dfe54442bd92b4a0183a044", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "de6555b9cd606fd335ab9a55489a39709eb94e5d", "url": "https://github.com/openhab/openhab-core/commit/de6555b9cd606fd335ab9a55489a39709eb94e5d", "message": "Update bundles/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/internal/PersistenceManagerImpl.java\n\nCo-Authored-By: Christoph Weitkamp <github@christophweitkamp.de>", "committedDate": "2020-03-08T20:20:08Z", "type": "commit"}, {"oid": "4518d9d618bc31732b73fb94ac66fd97f319a9b0", "url": "https://github.com/openhab/openhab-core/commit/4518d9d618bc31732b73fb94ac66fd97f319a9b0", "message": "Update bundles/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/internal/PersistenceManagerImpl.java\n\nCo-Authored-By: Christoph Weitkamp <github@christophweitkamp.de>", "committedDate": "2020-03-08T20:21:43Z", "type": "commit"}, {"oid": "6d496a7ba0065480679ac20da5259addfd8b7599", "url": "https://github.com/openhab/openhab-core/commit/6d496a7ba0065480679ac20da5259addfd8b7599", "message": "added null annotations\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>", "committedDate": "2020-03-08T20:34:28Z", "type": "commit"}]}