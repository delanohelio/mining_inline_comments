{"pr_number": 1481, "pr_title": "[discovery] Added validation for relation between ThingUID and BridgeUID", "pr_createdAt": "2020-05-17T21:00:54Z", "pr_url": "https://github.com/openhab/openhab-core/pull/1481", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY3OTU2OQ==", "url": "https://github.com/openhab/openhab-core/pull/1481#discussion_r429679569", "bodyText": "I would be careful here since it changes behavior of the builder. I know that 3.0.x addons must be recompiled to new packages, however such small changes remain undocumented and can blow up only when running a discovery with (most often) real things.", "author": "splatch", "createdAt": "2020-05-24T22:05:30Z", "path": "bundles/org.openhab.core.config.discovery/src/main/java/org/openhab/core/config/discovery/DiscoveryResultBuilder.java", "diffHunk": "@@ -36,7 +36,7 @@\n     private final ThingUID thingUID;\n \n     private @Nullable ThingUID bridgeUID;\n-    private final Map<String, Object> properties = new HashMap<>();\n+    private @Nullable Map<String, Object> properties;", "originalCommit": "0ed1f2aa1b5f5468872c86547976a36a7413226f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk3NzM1Mg==", "url": "https://github.com/openhab/openhab-core/pull/1481#discussion_r429977352", "bodyText": "You are right. I reverted it for the moment. Even if my change streamlined this builder with other OHC builders.", "author": "cweitkamp", "createdAt": "2020-05-25T14:56:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY3OTU2OQ=="}], "type": "inlineReview"}, {"oid": "db4ffecb26788f32fc89c71d8a761762a9538920", "url": "https://github.com/openhab/openhab-core/commit/db4ffecb26788f32fc89c71d8a761762a9538920", "message": "Added validation for relation between ThingUID and BridgeUID\n\nSigned-off-by: Christoph Weitkamp <github@christophweitkamp.de>", "committedDate": "2020-05-25T09:32:48Z", "type": "commit"}, {"oid": "7864ba38ee2377bb845aeb47ec33cbebef89aa78", "url": "https://github.com/openhab/openhab-core/commit/7864ba38ee2377bb845aeb47ec33cbebef89aa78", "message": "Fixed itests\n\nSigned-off-by: Christoph Weitkamp <github@christophweitkamp.de>", "committedDate": "2020-05-25T14:55:31Z", "type": "commit"}, {"oid": "7864ba38ee2377bb845aeb47ec33cbebef89aa78", "url": "https://github.com/openhab/openhab-core/commit/7864ba38ee2377bb845aeb47ec33cbebef89aa78", "message": "Fixed itests\n\nSigned-off-by: Christoph Weitkamp <github@christophweitkamp.de>", "committedDate": "2020-05-25T14:55:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5NTgxNQ==", "url": "https://github.com/openhab/openhab-core/pull/1481#discussion_r459995815", "bodyText": "Why is this test ignored?", "author": "wborn", "createdAt": "2020-07-24T11:25:25Z", "path": "bundles/org.openhab.core.config.discovery/src/test/java/org/openhab/core/config/discovery/DiscoveryResultBuilderTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.config.discovery;\n+\n+import static org.hamcrest.CoreMatchers.*;\n+import static org.hamcrest.collection.IsMapContaining.hasEntry;\n+import static org.junit.Assert.assertThat;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+\n+/**\n+ * Tests the {@link DiscoveryResultBuilder}.\n+ *\n+ * @author Christoph Weitkamp - Initial contribution\n+ */\n+public class DiscoveryResultBuilderTest {\n+\n+    private static final String BINDING_ID = \"bindingId\";\n+    private static final ThingUID BRIDGE_UID = new ThingUID(new ThingTypeUID(BINDING_ID, \"bridgeTypeId\"), \"bridgeId\");\n+    private static final ThingTypeUID THING_TYPE_UID = new ThingTypeUID(BINDING_ID, \"thingTypeId\");\n+    private static final ThingUID THING_UID = new ThingUID(THING_TYPE_UID, BRIDGE_UID, \"thingId\");\n+    private static final String KEY1 = \"key1\";\n+    private static final String KEY2 = \"key2\";\n+    private static final String VALUE1 = \"value1\";\n+    private static final String VALUE2 = \"value2\";\n+    private final Map<String, Object> properties = new HashMap<String, Object>() {\n+        private static final long serialVersionUID = 1L;\n+        {\n+            put(KEY1, VALUE1);\n+            put(KEY2, VALUE2);\n+        }\n+    };\n+    private DiscoveryResultBuilder builder;\n+    private DiscoveryResult discoveryResult;\n+\n+    @Before\n+    public void setup() {\n+        builder = DiscoveryResultBuilder.create(THING_UID).withThingType(THING_TYPE_UID).withProperties(properties)\n+                .withRepresentationProperty(KEY1).withLabel(\"Test\");\n+        discoveryResult = builder.build();\n+    }\n+\n+    @Test\n+    public void testDiscoveryResultBuilder() {\n+        assertThat(discoveryResult.getThingUID(), is(THING_UID));\n+        assertThat(discoveryResult.getThingTypeUID(), is(THING_TYPE_UID));\n+        assertThat(discoveryResult.getBindingId(), is(BINDING_ID));\n+        assertThat(discoveryResult.getLabel(), is(\"Test\"));\n+        assertThat(discoveryResult.getProperties().size(), is(2));\n+        assertThat(discoveryResult.getProperties(), hasEntry(KEY1, VALUE1));\n+        assertThat(discoveryResult.getProperties(), hasEntry(KEY2, VALUE2));\n+        assertThat(discoveryResult.getRepresentationProperty(), is(KEY1));\n+        assertThat(discoveryResult.getTimeToLive(), is(DiscoveryResult.TTL_UNLIMITED));\n+    }\n+\n+    @Test\n+    public void testDiscoveryResultBuilderWithTTL() {\n+        DiscoveryResult otherDiscoveryResult = builder.withTTL(100L).build();\n+\n+        assertThat(otherDiscoveryResult.getTimeToLive(), is(100L));\n+    }\n+\n+    @Test\n+    public void testDiscoveryResultBuilderWithMatchingBridge() {\n+        DiscoveryResult otherDiscoveryResult = builder.withBridge(BRIDGE_UID).build();\n+\n+        assertThat(otherDiscoveryResult.getBridgeUID(), is(BRIDGE_UID));\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testDiscoveryResultBuilderWithBridge() {\n+        @SuppressWarnings(\"unused\")\n+        DiscoveryResult otherDiscoveryResult = DiscoveryResultBuilder\n+                .create(new ThingUID(THING_TYPE_UID, \"otherThingId\")).withBridge(BRIDGE_UID).build();\n+    }\n+\n+    @Test\n+    @Ignore", "originalCommit": "7864ba38ee2377bb845aeb47ec33cbebef89aa78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ5MzM0Mg==", "url": "https://github.com/openhab/openhab-core/pull/1481#discussion_r460493342", "bodyText": "To streamline our builders (following eclipse-archived/smarthome#5929) I first changed the behavior of the withProperties(Map<String, Object>) method to replace existing properties map by the one set. This has been reverted after #1481 (comment) and thus the test is failing now. Will come up with a follow-up PR if the change should be applied at all to separate it from this feature.", "author": "cweitkamp", "createdAt": "2020-07-26T07:47:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5NTgxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ2NjU5MA==", "url": "https://github.com/openhab/openhab-core/pull/1481#discussion_r461466590", "bodyText": "Have a look here for the changes I am talking about.", "author": "cweitkamp", "createdAt": "2020-07-28T10:02:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5NTgxNQ=="}], "type": "inlineReview"}]}