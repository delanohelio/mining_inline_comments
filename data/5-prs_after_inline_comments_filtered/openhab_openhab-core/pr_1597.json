{"pr_number": 1597, "pr_title": "[audio] ported audio sinks from addons to core", "pr_createdAt": "2020-08-16T14:19:03Z", "pr_url": "https://github.com/openhab/openhab-core/pull/1597", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0MzQ1MA==", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r471143450", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Set<Class<? extends AudioStream>> SUPPORTED_AUDIO_STREAMS = Collections\n          \n          \n            \n                        .singleton(AudioStream.class);\n          \n          \n            \n                private static final Set<Class<? extends AudioStream>> SUPPORTED_AUDIO_STREAMS = Set.of(AudioStream.class);", "author": "wborn", "createdAt": "2020-08-16T18:27:06Z", "path": "bundles/org.openhab.core.io.javasound/src/main/java/org/openhab/io/javasound/internal/JavaSoundAudioSink.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.javasound.internal;\n+\n+import static java.util.stream.Collectors.toSet;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+import javazoom.jl.decoder.JavaLayerException;\n+import javazoom.jl.player.Player;\n+\n+import javax.sound.sampled.AudioSystem;\n+import javax.sound.sampled.FloatControl;\n+import javax.sound.sampled.LineUnavailableException;\n+import javax.sound.sampled.Mixer;\n+import javax.sound.sampled.Port;\n+\n+import org.apache.commons.collections.Closure;\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.smarthome.core.audio.AudioFormat;\n+import org.eclipse.smarthome.core.audio.AudioSink;\n+import org.eclipse.smarthome.core.audio.AudioStream;\n+import org.eclipse.smarthome.core.audio.URLAudioStream;\n+import org.eclipse.smarthome.core.audio.UnsupportedAudioFormatException;\n+import org.eclipse.smarthome.core.audio.UnsupportedAudioStreamException;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is an audio sink that is registered as a service, which can play wave files to the hosts outputs (e.g. speaker,\n+ * line-out).\n+ *\n+ * @author Kai Kreuzer - Initial contribution and API\n+ * @author Christoph Weitkamp - Added getSupportedStreams() and UnsupportedAudioStreamException\n+ *\n+ */\n+@Component(service = AudioSink.class, immediate = true)\n+public class JavaSoundAudioSink implements AudioSink {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(JavaSoundAudioSink.class);\n+\n+    private boolean isMac = false;\n+    private PercentType macVolumeValue = null;\n+    private static Player streamPlayer = null;\n+\n+    private static final Set<AudioFormat> SUPPORTED_AUDIO_FORMATS = Collections\n+            .unmodifiableSet(Stream.of(AudioFormat.MP3, AudioFormat.WAV).collect(toSet()));\n+\n+    // we accept any stream\n+    private static final Set<Class<? extends AudioStream>> SUPPORTED_AUDIO_STREAMS = Collections\n+            .singleton(AudioStream.class);", "originalCommit": "b37ab13f6cdfc77bd780bb1859f72292e98b5191", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0MzQ2NQ==", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r471143465", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Collections.singleton(audioFormat);\n          \n          \n            \n                    return Set.of(audioFormat);", "author": "wborn", "createdAt": "2020-08-16T18:27:18Z", "path": "bundles/org.openhab.core.io.javasound/src/main/java/org/openhab/io/javasound/internal/JavaSoundAudioSource.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.javasound.internal;\n+\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Set;\n+\n+import javax.sound.sampled.AudioSystem;\n+import javax.sound.sampled.DataLine;\n+import javax.sound.sampled.TargetDataLine;\n+\n+import org.eclipse.smarthome.core.audio.AudioException;\n+import org.eclipse.smarthome.core.audio.AudioFormat;\n+import org.eclipse.smarthome.core.audio.AudioSource;\n+import org.eclipse.smarthome.core.audio.AudioStream;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * This is an AudioSource from an input channel of the host.\n+ *\n+ * @author Kelly Davis - Initial contribution and API\n+ * @author Kai Kreuzer - Refactored and stabilized\n+ *\n+ */\n+@Component(service = AudioSource.class, immediate = true)\n+public class JavaSoundAudioSource implements AudioSource {\n+\n+    /**\n+     * Java Sound audio format\n+     */\n+    private final javax.sound.sampled.AudioFormat format = new javax.sound.sampled.AudioFormat(16000.0f, 16, 1, true,\n+            false);\n+\n+    /**\n+     * AudioFormat of the JavaSoundAudioSource\n+     */\n+    private final AudioFormat audioFormat = convertAudioFormat(format);\n+\n+    /**\n+     * TargetDataLine for the mic\n+     */\n+    private TargetDataLine microphone;\n+\n+    /**\n+     * Constructs a JavaSoundAudioSource\n+     */\n+    public JavaSoundAudioSource() {\n+    }\n+\n+    private void initMicrophone(javax.sound.sampled.AudioFormat format) throws AudioException {\n+        try {\n+            TargetDataLine microphone;\n+            microphone = AudioSystem.getTargetDataLine(format);\n+\n+            DataLine.Info info = new DataLine.Info(TargetDataLine.class, format);\n+            microphone = (TargetDataLine) AudioSystem.getLine(info);\n+\n+            microphone.open(format);\n+\n+            this.microphone = microphone;\n+        } catch (Exception e) {\n+            throw new AudioException(\"Error creating the audio input stream.\", e);\n+        }\n+    }\n+\n+    @Override\n+    public synchronized AudioStream getInputStream(AudioFormat expectedFormat) throws AudioException {\n+        if (!expectedFormat.isCompatible(audioFormat)) {\n+            throw new AudioException(\"Cannot produce streams in format \" + expectedFormat);\n+        }\n+        if (microphone == null) {\n+            initMicrophone(format);\n+        }\n+        return new JavaSoundInputStream(this.microphone, audioFormat);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"javasound\";\n+    }\n+\n+    /**\n+     * Converts a javax.sound.sampled.AudioFormat to a org.eclipse.smarthome.core.audio.AudioFormat\n+     *\n+     * @param audioFormat the AudioFormat to convert\n+     * @return The converted AudioFormat\n+     */\n+    private static AudioFormat convertAudioFormat(javax.sound.sampled.AudioFormat audioFormat) {\n+        String container = AudioFormat.CONTAINER_WAVE;\n+\n+        String codec = audioFormat.getEncoding().toString();\n+\n+        Boolean bigEndian = new Boolean(audioFormat.isBigEndian());\n+\n+        int frameSize = audioFormat.getFrameSize(); // In bytes\n+        int bitsPerFrame = frameSize * 8;\n+        Integer bitDepth = ((AudioSystem.NOT_SPECIFIED == frameSize) ? null : new Integer(bitsPerFrame));\n+\n+        float frameRate = audioFormat.getFrameRate();\n+        Integer bitRate = ((AudioSystem.NOT_SPECIFIED == frameRate) ? null\n+                : new Integer((int) (frameRate * bitsPerFrame)));\n+\n+        float sampleRate = audioFormat.getSampleRate();\n+        Long frequency = ((AudioSystem.NOT_SPECIFIED == sampleRate) ? null : new Long((long) sampleRate));\n+\n+        return new AudioFormat(container, codec, bigEndian, bitDepth, bitRate, frequency);\n+    }\n+\n+    @Override\n+    public String getId() {\n+        return \"javasound\";\n+    }\n+\n+    @Override\n+    public String getLabel(Locale locale) {\n+        return \"System Microphone\";\n+    }\n+\n+    @Override\n+    public Set<AudioFormat> getSupportedFormats() {\n+        return Collections.singleton(audioFormat);", "originalCommit": "b37ab13f6cdfc77bd780bb1859f72292e98b5191", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0MzUwMQ==", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r471143501", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Set<Class<? extends AudioStream>> SUPPORTED_AUDIO_STREAMS = Collections\n          \n          \n            \n                        .singleton(AudioStream.class);\n          \n          \n            \n                private static final Set<Class<? extends AudioStream>> SUPPORTED_AUDIO_STREAMS = Set.of(AudioStream.class);", "author": "wborn", "createdAt": "2020-08-16T18:27:35Z", "path": "bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/javasound/JavaSoundAudioSink.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.audio.internal.javasound;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Scanner;\n+import java.util.Set;\n+import java.util.function.Function;\n+import javazoom.jl.decoder.JavaLayerException;\n+import javazoom.jl.player.Player;\n+\n+import javax.sound.sampled.AudioSystem;\n+import javax.sound.sampled.FloatControl;\n+import javax.sound.sampled.LineUnavailableException;\n+import javax.sound.sampled.Mixer;\n+import javax.sound.sampled.Port;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.audio.AudioFormat;\n+import org.openhab.core.audio.AudioSink;\n+import org.openhab.core.audio.AudioStream;\n+import org.openhab.core.audio.URLAudioStream;\n+import org.openhab.core.audio.UnsupportedAudioFormatException;\n+import org.openhab.core.audio.UnsupportedAudioStreamException;\n+import org.openhab.core.common.NamedThreadFactory;\n+import org.openhab.core.library.types.PercentType;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is an audio sink that is registered as a service, which can play wave files to the hosts outputs (e.g. speaker,\n+ * line-out).\n+ *\n+ * @author Kai Kreuzer - Initial contribution and API\n+ * @author Christoph Weitkamp - Added getSupportedStreams() and UnsupportedAudioStreamException\n+ *\n+ */\n+@NonNullByDefault\n+@Component(service = AudioSink.class, immediate = true)\n+public class JavaSoundAudioSink implements AudioSink {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(JavaSoundAudioSink.class);\n+\n+    private boolean isMac = false;\n+    private @Nullable PercentType macVolumeValue = null;\n+    private @Nullable static Player streamPlayer = null;\n+\n+    private NamedThreadFactory threadFactory = new NamedThreadFactory(\"audio\");\n+\n+    private static final Set<AudioFormat> SUPPORTED_AUDIO_FORMATS = Set.of(AudioFormat.MP3, AudioFormat.WAV);\n+\n+    // we accept any stream\n+    private static final Set<Class<? extends AudioStream>> SUPPORTED_AUDIO_STREAMS = Collections\n+            .singleton(AudioStream.class);", "originalCommit": "b37ab13f6cdfc77bd780bb1859f72292e98b5191", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0MzUyMw==", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r471143523", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Collections.singleton(audioFormat);\n          \n          \n            \n                    return Set.of(audioFormat);", "author": "wborn", "createdAt": "2020-08-16T18:27:50Z", "path": "bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/javasound/JavaSoundAudioSource.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.audio.internal.javasound;\n+\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Set;\n+\n+import javax.sound.sampled.AudioSystem;\n+import javax.sound.sampled.DataLine;\n+import javax.sound.sampled.TargetDataLine;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.audio.AudioException;\n+import org.openhab.core.audio.AudioFormat;\n+import org.openhab.core.audio.AudioSource;\n+import org.openhab.core.audio.AudioStream;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * This is an AudioSource from an input channel of the host.\n+ *\n+ * @author Kelly Davis - Initial contribution and API\n+ * @author Kai Kreuzer - Refactored and stabilized\n+ *\n+ */\n+@NonNullByDefault\n+@Component(service = AudioSource.class, immediate = true)\n+public class JavaSoundAudioSource implements AudioSource {\n+\n+    /**\n+     * Java Sound audio format\n+     */\n+    private final javax.sound.sampled.AudioFormat format = new javax.sound.sampled.AudioFormat(16000.0f, 16, 1, true,\n+            false);\n+\n+    /**\n+     * AudioFormat of the JavaSoundAudioSource\n+     */\n+    private final AudioFormat audioFormat = convertAudioFormat(format);\n+\n+    /**\n+     * TargetDataLine for the mic\n+     */\n+    private @Nullable TargetDataLine microphone;\n+\n+    /**\n+     * Constructs a JavaSoundAudioSource\n+     */\n+    public JavaSoundAudioSource() {\n+    }\n+\n+    private TargetDataLine initMicrophone(javax.sound.sampled.AudioFormat format) throws AudioException {\n+        try {\n+            TargetDataLine microphone;\n+            microphone = AudioSystem.getTargetDataLine(format);\n+\n+            DataLine.Info info = new DataLine.Info(TargetDataLine.class, format);\n+            microphone = (TargetDataLine) AudioSystem.getLine(info);\n+\n+            microphone.open(format);\n+\n+            this.microphone = microphone;\n+            return microphone;\n+        } catch (Exception e) {\n+            throw new AudioException(\"Error creating the audio input stream.\", e);\n+        }\n+    }\n+\n+    @Override\n+    public synchronized AudioStream getInputStream(AudioFormat expectedFormat) throws AudioException {\n+        if (!expectedFormat.isCompatible(audioFormat)) {\n+            throw new AudioException(\"Cannot produce streams in format \" + expectedFormat);\n+        }\n+        TargetDataLine mic = this.microphone;\n+        if (mic == null) {\n+            mic = initMicrophone(format);\n+        }\n+        return new JavaSoundInputStream(mic, audioFormat);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"javasound\";\n+    }\n+\n+    /**\n+     * Converts a javax.sound.sampled.AudioFormat to a org.openhab.core.audio.AudioFormat\n+     *\n+     * @param audioFormat the AudioFormat to convert\n+     * @return The converted AudioFormat\n+     */\n+    private static AudioFormat convertAudioFormat(javax.sound.sampled.AudioFormat audioFormat) {\n+        String container = AudioFormat.CONTAINER_WAVE;\n+\n+        String codec = audioFormat.getEncoding().toString();\n+\n+        Boolean bigEndian = Boolean.valueOf(audioFormat.isBigEndian());\n+\n+        int frameSize = audioFormat.getFrameSize(); // In bytes\n+        int bitsPerFrame = frameSize * 8;\n+        Integer bitDepth = ((AudioSystem.NOT_SPECIFIED == frameSize) ? null : Integer.valueOf(bitsPerFrame));\n+\n+        float frameRate = audioFormat.getFrameRate();\n+        Integer bitRate = ((AudioSystem.NOT_SPECIFIED == frameRate) ? null\n+                : Integer.valueOf((int) (frameRate * bitsPerFrame)));\n+\n+        float sampleRate = audioFormat.getSampleRate();\n+        Long frequency = ((AudioSystem.NOT_SPECIFIED == sampleRate) ? null : Long.valueOf((long) sampleRate));\n+\n+        return new AudioFormat(container, codec, bigEndian, bitDepth, bitRate, frequency);\n+    }\n+\n+    @Override\n+    public String getId() {\n+        return \"javasound\";\n+    }\n+\n+    @Override\n+    public String getLabel(@Nullable Locale locale) {\n+        return \"System Microphone\";\n+    }\n+\n+    @Override\n+    public Set<AudioFormat> getSupportedFormats() {\n+        return Collections.singleton(audioFormat);", "originalCommit": "b37ab13f6cdfc77bd780bb1859f72292e98b5191", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0MzUzNQ==", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r471143535", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    super(Collections.singleton(PlayURLEvent.TYPE));\n          \n          \n            \n                    super(Set.of(PlayURLEvent.TYPE));", "author": "wborn", "createdAt": "2020-08-16T18:28:06Z", "path": "bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/webaudio/WebAudioEventFactory.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.audio.internal.webaudio;\n+\n+import java.util.Collections;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.events.AbstractEventFactory;\n+import org.openhab.core.events.Event;\n+import org.openhab.core.events.EventFactory;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * This is an {@link EventFactory} for creating web audio events.\n+ * The only currently supported event type is {@link PlayURLEvent}.\n+ *\n+ * @author Kai Kreuzer - Initial contribution and API\n+ */\n+@NonNullByDefault\n+@Component(service = EventFactory.class, immediate = true)\n+public class WebAudioEventFactory extends AbstractEventFactory {\n+\n+    private static final String PLAY_URL_TOPIC = \"smarthome/webaudio/playurl\";\n+\n+    /**\n+     * Constructs a new WebAudioEventFactory.\n+     */\n+    public WebAudioEventFactory() {\n+        super(Collections.singleton(PlayURLEvent.TYPE));", "originalCommit": "b37ab13f6cdfc77bd780bb1859f72292e98b5191", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0MzU3NA==", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r471143574", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Set<AudioFormat> SUPPORTED_AUDIO_FORMATS = Collections\n          \n          \n            \n                        .unmodifiableSet(Stream.of(AudioFormat.MP3, AudioFormat.WAV).collect(Collectors.toSet()));\n          \n          \n            \n                private static final Set<AudioFormat> SUPPORTED_AUDIO_FORMATS = Set.of(AudioFormat.MP3, AudioFormat.WAV);", "author": "wborn", "createdAt": "2020-08-16T18:28:34Z", "path": "bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/webaudio/WebAudioAudioSink.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.audio.internal.webaudio;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.audio.AudioFormat;\n+import org.openhab.core.audio.AudioHTTPServer;\n+import org.openhab.core.audio.AudioSink;\n+import org.openhab.core.audio.AudioStream;\n+import org.openhab.core.audio.FixedLengthAudioStream;\n+import org.openhab.core.audio.URLAudioStream;\n+import org.openhab.core.audio.UnsupportedAudioFormatException;\n+import org.openhab.core.audio.UnsupportedAudioStreamException;\n+import org.openhab.core.events.EventPublisher;\n+import org.openhab.core.library.types.PercentType;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is an audio sink that publishes an event through SSE and temporarily serves the stream via HTTP for web players\n+ * to pick it up.\n+ *\n+ * @author Kai Kreuzer - Initial contribution and API\n+ * @author Christoph Weitkamp - Added getSupportedStreams() and UnsupportedAudioStreamException\n+ *\n+ */\n+@NonNullByDefault\n+@Component(service = AudioSink.class, immediate = true)\n+public class WebAudioAudioSink implements AudioSink {\n+\n+    private final Logger logger = LoggerFactory.getLogger(WebAudioAudioSink.class);\n+\n+    private static final Set<AudioFormat> SUPPORTED_AUDIO_FORMATS = Collections\n+            .unmodifiableSet(Stream.of(AudioFormat.MP3, AudioFormat.WAV).collect(Collectors.toSet()));", "originalCommit": "b37ab13f6cdfc77bd780bb1859f72292e98b5191", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0MzYwMw==", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r471143603", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Set<Class<? extends AudioStream>> SUPPORTED_AUDIO_STREAMS = Collections\n          \n          \n            \n                        .unmodifiableSet(Stream.of(FixedLengthAudioStream.class, URLAudioStream.class).collect(Collectors.toSet()));\n          \n          \n            \n                private static final Set<Class<? extends AudioStream>> SUPPORTED_AUDIO_STREAMS = Set.of(FixedLengthAudioStream.class, URLAudioStream.class);", "author": "wborn", "createdAt": "2020-08-16T18:28:55Z", "path": "bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/webaudio/WebAudioAudioSink.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.audio.internal.webaudio;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.audio.AudioFormat;\n+import org.openhab.core.audio.AudioHTTPServer;\n+import org.openhab.core.audio.AudioSink;\n+import org.openhab.core.audio.AudioStream;\n+import org.openhab.core.audio.FixedLengthAudioStream;\n+import org.openhab.core.audio.URLAudioStream;\n+import org.openhab.core.audio.UnsupportedAudioFormatException;\n+import org.openhab.core.audio.UnsupportedAudioStreamException;\n+import org.openhab.core.events.EventPublisher;\n+import org.openhab.core.library.types.PercentType;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is an audio sink that publishes an event through SSE and temporarily serves the stream via HTTP for web players\n+ * to pick it up.\n+ *\n+ * @author Kai Kreuzer - Initial contribution and API\n+ * @author Christoph Weitkamp - Added getSupportedStreams() and UnsupportedAudioStreamException\n+ *\n+ */\n+@NonNullByDefault\n+@Component(service = AudioSink.class, immediate = true)\n+public class WebAudioAudioSink implements AudioSink {\n+\n+    private final Logger logger = LoggerFactory.getLogger(WebAudioAudioSink.class);\n+\n+    private static final Set<AudioFormat> SUPPORTED_AUDIO_FORMATS = Collections\n+            .unmodifiableSet(Stream.of(AudioFormat.MP3, AudioFormat.WAV).collect(Collectors.toSet()));\n+    private static final Set<Class<? extends AudioStream>> SUPPORTED_AUDIO_STREAMS = Collections\n+            .unmodifiableSet(Stream.of(FixedLengthAudioStream.class, URLAudioStream.class).collect(Collectors.toSet()));", "originalCommit": "b37ab13f6cdfc77bd780bb1859f72292e98b5191", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0MzYzMQ==", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r471143631", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Set<AudioFormat> SUPPORTED_AUDIO_FORMATS = Collections\n          \n          \n            \n                        .unmodifiableSet(Stream.of(AudioFormat.MP3, AudioFormat.WAV).collect(toSet()));\n          \n          \n            \n                private static final Set<AudioFormat> SUPPORTED_AUDIO_FORMATS = Set.of(AudioFormat.MP3, AudioFormat.WAV);", "author": "wborn", "createdAt": "2020-08-16T18:29:17Z", "path": "bundles/org.openhab.core.io.javasound/src/main/java/org/openhab/io/javasound/internal/JavaSoundAudioSink.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.javasound.internal;\n+\n+import static java.util.stream.Collectors.toSet;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+import javazoom.jl.decoder.JavaLayerException;\n+import javazoom.jl.player.Player;\n+\n+import javax.sound.sampled.AudioSystem;\n+import javax.sound.sampled.FloatControl;\n+import javax.sound.sampled.LineUnavailableException;\n+import javax.sound.sampled.Mixer;\n+import javax.sound.sampled.Port;\n+\n+import org.apache.commons.collections.Closure;\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.smarthome.core.audio.AudioFormat;\n+import org.eclipse.smarthome.core.audio.AudioSink;\n+import org.eclipse.smarthome.core.audio.AudioStream;\n+import org.eclipse.smarthome.core.audio.URLAudioStream;\n+import org.eclipse.smarthome.core.audio.UnsupportedAudioFormatException;\n+import org.eclipse.smarthome.core.audio.UnsupportedAudioStreamException;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is an audio sink that is registered as a service, which can play wave files to the hosts outputs (e.g. speaker,\n+ * line-out).\n+ *\n+ * @author Kai Kreuzer - Initial contribution and API\n+ * @author Christoph Weitkamp - Added getSupportedStreams() and UnsupportedAudioStreamException\n+ *\n+ */\n+@Component(service = AudioSink.class, immediate = true)\n+public class JavaSoundAudioSink implements AudioSink {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(JavaSoundAudioSink.class);\n+\n+    private boolean isMac = false;\n+    private PercentType macVolumeValue = null;\n+    private static Player streamPlayer = null;\n+\n+    private static final Set<AudioFormat> SUPPORTED_AUDIO_FORMATS = Collections\n+            .unmodifiableSet(Stream.of(AudioFormat.MP3, AudioFormat.WAV).collect(toSet()));", "originalCommit": "b37ab13f6cdfc77bd780bb1859f72292e98b5191", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a39b059bca9019a9fc5b2b58dd21c356ee9a9c34", "url": "https://github.com/openhab/openhab-core/commit/a39b059bca9019a9fc5b2b58dd21c356ee9a9c34", "message": "ported audio sinks from addons to core\n\nAlso-by: Wouter Born <github@maindrain.net>\nSigned-off-by: Kai Kreuzer <kai@openhab.org>", "committedDate": "2020-08-17T20:48:10Z", "type": "forcePushed"}, {"oid": "bd80813db106152a8624c6b091fc54d36e48a4ed", "url": "https://github.com/openhab/openhab-core/commit/bd80813db106152a8624c6b091fc54d36e48a4ed", "message": "ported audio sinks from addons to core\n\nAlso-by: Wouter Born <github@maindrain.net>\nSigned-off-by: Kai Kreuzer <kai@openhab.org>", "committedDate": "2020-08-17T21:27:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzODkwOA==", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r472138908", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        TargetDataLine microphone;\n          \n          \n            \n                        microphone = AudioSystem.getTargetDataLine(format);\n          \n          \n            \n                        TargetDataLine microphone = AudioSystem.getTargetDataLine(format);", "author": "wborn", "createdAt": "2020-08-18T12:27:34Z", "path": "bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/javasound/JavaSoundAudioSource.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.audio.internal.javasound;\n+\n+import java.util.Locale;\n+import java.util.Set;\n+\n+import javax.sound.sampled.AudioSystem;\n+import javax.sound.sampled.DataLine;\n+import javax.sound.sampled.TargetDataLine;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.audio.AudioException;\n+import org.openhab.core.audio.AudioFormat;\n+import org.openhab.core.audio.AudioSource;\n+import org.openhab.core.audio.AudioStream;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * This is an AudioSource from an input channel of the host.\n+ *\n+ * @author Kelly Davis - Initial contribution and API\n+ * @author Kai Kreuzer - Refactored and stabilized\n+ *\n+ */\n+@NonNullByDefault\n+@Component(service = AudioSource.class, immediate = true)\n+public class JavaSoundAudioSource implements AudioSource {\n+\n+    /**\n+     * Java Sound audio format\n+     */\n+    private final javax.sound.sampled.AudioFormat format = new javax.sound.sampled.AudioFormat(16000.0f, 16, 1, true,\n+            false);\n+\n+    /**\n+     * AudioFormat of the JavaSoundAudioSource\n+     */\n+    private final AudioFormat audioFormat = convertAudioFormat(format);\n+\n+    /**\n+     * TargetDataLine for the mic\n+     */\n+    private @Nullable TargetDataLine microphone;\n+\n+    /**\n+     * Constructs a JavaSoundAudioSource\n+     */\n+    public JavaSoundAudioSource() {\n+    }\n+\n+    private TargetDataLine initMicrophone(javax.sound.sampled.AudioFormat format) throws AudioException {\n+        try {\n+            TargetDataLine microphone;\n+            microphone = AudioSystem.getTargetDataLine(format);", "originalCommit": "bd80813db106152a8624c6b091fc54d36e48a4ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzOTI2OQ==", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r472139269", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String PLAY_URL_TOPIC = \"smarthome/webaudio/playurl\";\n          \n          \n            \n                private static final String PLAY_URL_TOPIC = \"openhab/webaudio/playurl\";", "author": "wborn", "createdAt": "2020-08-18T12:28:16Z", "path": "bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/webaudio/WebAudioEventFactory.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.audio.internal.webaudio;\n+\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.events.AbstractEventFactory;\n+import org.openhab.core.events.Event;\n+import org.openhab.core.events.EventFactory;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * This is an {@link EventFactory} for creating web audio events.\n+ * The only currently supported event type is {@link PlayURLEvent}.\n+ *\n+ * @author Kai Kreuzer - Initial contribution and API\n+ */\n+@NonNullByDefault\n+@Component(service = EventFactory.class, immediate = true)\n+public class WebAudioEventFactory extends AbstractEventFactory {\n+\n+    private static final String PLAY_URL_TOPIC = \"smarthome/webaudio/playurl\";", "originalCommit": "bd80813db106152a8624c6b091fc54d36e48a4ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE0MjE5MQ==", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r472142191", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Dictionary<String, Object> audioConfig = new Hashtable<>();\n          \n          \n            \n                    audioConfig.put(\"defaultSink\", sink.getId());\n          \n          \n            \n                    Dictionary<String, Object> audioConfig = Hashtable.of(\"defaultSink\", sink.getId());", "author": "wborn", "createdAt": "2020-08-18T12:33:31Z", "path": "itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/internal/VoiceManagerImplTest.java", "diffHunk": "@@ -73,14 +67,19 @@ public void setUp() throws IOException {\n         registerService(sink);\n         registerService(voice);\n \n+        ConfigurationAdmin configAdmin = super.getService(ConfigurationAdmin.class);\n+        Dictionary<String, Object> audioConfig = new Hashtable<>();\n+        audioConfig.put(\"defaultSink\", sink.getId());", "originalCommit": "bd80813db106152a8624c6b091fc54d36e48a4ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE0MjM5Mw==", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r472142393", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Dictionary<String, Object> voiceConfig = new Hashtable<>();\n          \n          \n            \n                    voiceConfig.put(CONFIG_DEFAULT_TTS, ttsService.getId());\n          \n          \n            \n                    Dictionary<String, Object> voiceConfig = Hashtable.of(CONFIG_DEFAULT_TTS, ttsService.getId());", "author": "wborn", "createdAt": "2020-08-18T12:33:51Z", "path": "itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/internal/VoiceManagerImplTest.java", "diffHunk": "@@ -73,14 +67,19 @@ public void setUp() throws IOException {\n         registerService(sink);\n         registerService(voice);\n \n+        ConfigurationAdmin configAdmin = super.getService(ConfigurationAdmin.class);\n+        Dictionary<String, Object> audioConfig = new Hashtable<>();\n+        audioConfig.put(\"defaultSink\", sink.getId());\n+        Configuration configuration = configAdmin.getConfiguration(\"org.openhab.audio\");\n+        configuration.update(audioConfig);\n+\n+        voiceManager = getService(VoiceManager.class, VoiceManagerImpl.class);\n+        assertNotNull(voiceManager);\n+\n         Dictionary<String, Object> voiceConfig = new Hashtable<>();\n         voiceConfig.put(CONFIG_DEFAULT_TTS, ttsService.getId());", "originalCommit": "bd80813db106152a8624c6b091fc54d36e48a4ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUyMzM1MQ==", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r472523351", "bodyText": "Sorry, the previous suggestion wasn't good since the IDE suggested Map.of  which is an interface implemented by Hashtable, so let's revert these:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Dictionary<String, Object> audioConfig = Hashtable.of(\"defaultSink\", sink.getId());\n          \n          \n            \n                    Dictionary<String, Object> audioConfig = new Hashtable<>();\n          \n          \n            \n                    audioConfig.put(\"defaultSink\", sink.getId());", "author": "wborn", "createdAt": "2020-08-18T22:14:24Z", "path": "itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/internal/VoiceManagerImplTest.java", "diffHunk": "@@ -73,14 +67,17 @@ public void setUp() throws IOException {\n         registerService(sink);\n         registerService(voice);\n \n-        Dictionary<String, Object> voiceConfig = new Hashtable<>();\n-        voiceConfig.put(CONFIG_DEFAULT_TTS, ttsService.getId());\n         ConfigurationAdmin configAdmin = super.getService(ConfigurationAdmin.class);\n-        Configuration configuration = configAdmin.getConfiguration(VoiceManagerImpl.CONFIGURATION_PID);\n-        configuration.update(voiceConfig);\n+        Dictionary<String, Object> audioConfig = Hashtable.of(\"defaultSink\", sink.getId());", "originalCommit": "eee0aa6485143d2c61195f1bbb219d77c72c23ef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUyMzUxNg==", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r472523516", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Dictionary<String, Object> voiceConfig = Hashtable.of(CONFIG_DEFAULT_TTS, ttsService.getId());\n          \n          \n            \n                    Dictionary<String, Object> voiceConfig = new Hashtable<>();\n          \n          \n            \n                    voiceConfig.put(CONFIG_DEFAULT_TTS, ttsService.getId());", "author": "wborn", "createdAt": "2020-08-18T22:14:49Z", "path": "itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/internal/VoiceManagerImplTest.java", "diffHunk": "@@ -73,14 +67,17 @@ public void setUp() throws IOException {\n         registerService(sink);\n         registerService(voice);\n \n-        Dictionary<String, Object> voiceConfig = new Hashtable<>();\n-        voiceConfig.put(CONFIG_DEFAULT_TTS, ttsService.getId());\n         ConfigurationAdmin configAdmin = super.getService(ConfigurationAdmin.class);\n-        Configuration configuration = configAdmin.getConfiguration(VoiceManagerImpl.CONFIGURATION_PID);\n-        configuration.update(voiceConfig);\n+        Dictionary<String, Object> audioConfig = Hashtable.of(\"defaultSink\", sink.getId());\n+        Configuration configuration = configAdmin.getConfiguration(\"org.openhab.audio\");\n+        configuration.update(audioConfig);\n \n-        audioManager = new AudioManagerStub();\n-        registerService(audioManager);\n+        voiceManager = getService(VoiceManager.class, VoiceManagerImpl.class);\n+        assertNotNull(voiceManager);\n+\n+        Dictionary<String, Object> voiceConfig = Hashtable.of(CONFIG_DEFAULT_TTS, ttsService.getId());", "originalCommit": "eee0aa6485143d2c61195f1bbb219d77c72c23ef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU0MTA3Ng==", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r472541076", "bodyText": "It seems the resolution issues can be resolved by removing this internal import. After that the tests run again but still fail.", "author": "wborn", "createdAt": "2020-08-18T23:05:14Z", "path": "itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/voiceconsolecommandextension/VoiceConsoleCommandExtensionTest.java", "diffHunk": "@@ -16,10 +16,10 @@\n \n import org.junit.jupiter.api.BeforeEach;\n import org.openhab.core.audio.AudioManager;\n+import org.openhab.core.audio.internal.AudioManagerImpl;", "originalCommit": "eee0aa6485143d2c61195f1bbb219d77c72c23ef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bd80813db106152a8624c6b091fc54d36e48a4ed", "url": "https://github.com/openhab/openhab-core/commit/bd80813db106152a8624c6b091fc54d36e48a4ed", "message": "ported audio sinks from addons to core\n\nAlso-by: Wouter Born <github@maindrain.net>\nSigned-off-by: Kai Kreuzer <kai@openhab.org>", "committedDate": "2020-08-17T21:27:54Z", "type": "forcePushed"}, {"oid": "dc0ecaef6645ae747ce13c036b2e6a98967e98c4", "url": "https://github.com/openhab/openhab-core/commit/dc0ecaef6645ae747ce13c036b2e6a98967e98c4", "message": "ported audio sinks from addons to core\n\nAlso-by: Wouter Born <github@maindrain.net>\nSigned-off-by: Kai Kreuzer <kai@openhab.org>", "committedDate": "2020-08-21T08:41:19Z", "type": "forcePushed"}, {"oid": "2905c58d9fb710ea31cf6b30364a9c8bd569ad55", "url": "https://github.com/openhab/openhab-core/commit/2905c58d9fb710ea31cf6b30364a9c8bd569ad55", "message": "ported audio sinks from addons to core\n\nAlso-by: Wouter Born <github@maindrain.net>\nSigned-off-by: Kai Kreuzer <kai@openhab.org>", "committedDate": "2020-08-21T15:09:42Z", "type": "commit"}, {"oid": "2905c58d9fb710ea31cf6b30364a9c8bd569ad55", "url": "https://github.com/openhab/openhab-core/commit/2905c58d9fb710ea31cf6b30364a9c8bd569ad55", "message": "ported audio sinks from addons to core\n\nAlso-by: Wouter Born <github@maindrain.net>\nSigned-off-by: Kai Kreuzer <kai@openhab.org>", "committedDate": "2020-08-21T15:09:42Z", "type": "forcePushed"}, {"oid": "fd841f228dc1da8ed7db8a0d89e177b5e579a914", "url": "https://github.com/openhab/openhab-core/commit/fd841f228dc1da8ed7db8a0d89e177b5e579a914", "message": "removed unnecessary bnd property again\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>", "committedDate": "2020-08-21T20:08:31Z", "type": "commit"}]}