{"pr_number": 2148, "pr_title": "Fix #2147: graph is created again during the drop process", "pr_createdAt": "2020-06-25T19:32:41Z", "pr_url": "https://github.com/JanusGraph/janusgraph/pull/2148", "timeline": [{"oid": "6877996bf2fbc8ac30513478a944e76827669c82", "url": "https://github.com/JanusGraph/janusgraph/commit/6877996bf2fbc8ac30513478a944e76827669c82", "message": "Fix #2147: graph is created again during the drop process\n\nSigned-off-by: Bruno Berisso <bruno.berisso@experoinc.com>", "committedDate": "2020-06-26T10:35:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI2MDg3NA==", "url": "https://github.com/JanusGraph/janusgraph/pull/2148#discussion_r447260874", "bodyText": "I just added test in it pass without changes which i expected not to happen.", "author": "farodin91", "createdAt": "2020-06-29T21:20:34Z", "path": "janusgraph-test/src/test/java/org/janusgraph/core/ConfiguredGraphFactoryTest.java", "diffHunk": "@@ -222,6 +223,25 @@ public void removeConfigurationShouldRemoveGraphFromCache() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void dropGraphShouldRemoveGraphFromCache() throws Exception {", "originalCommit": "6877996bf2fbc8ac30513478a944e76827669c82", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYxMjgzNQ==", "url": "https://github.com/JanusGraph/janusgraph/pull/2148#discussion_r447612835", "bodyText": "Yeah, I add a test for drop() because I didn't found one and wanted to check that my changes don't introduce any regressions.\nI'm not sure how I can test this particular case using the inmemory backend, I still can reproduce the bug but there are no measurable effects. We probably could use BerkeleyDB to check this case but that involves adding a dependency to janusgraph-test target.", "author": "BrunoBerisso", "createdAt": "2020-06-30T11:31:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI2MDg3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxMTgxNQ==", "url": "https://github.com/JanusGraph/janusgraph/pull/2148#discussion_r447911815", "bodyText": "Valid point", "author": "farodin91", "createdAt": "2020-06-30T18:58:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI2MDg3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxNzI5OQ==", "url": "https://github.com/JanusGraph/janusgraph/pull/2148#discussion_r447917299", "bodyText": "It would be okay to add BerkeleyDB to this project. I think a CQL we better so we could also test distributed database in future.", "author": "farodin91", "createdAt": "2020-06-30T19:08:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI2MDg3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc5MzM5MQ==", "url": "https://github.com/JanusGraph/janusgraph/pull/2148#discussion_r535793391", "bodyText": "So from my understanding, this test case is to avoid any regression, which is nice. Is there any reason you cannot test your changes in this PR? Am I missing something?", "author": "li-boxuan", "createdAt": "2020-12-04T02:40:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI2MDg3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwMzQ2OQ==", "url": "https://github.com/JanusGraph/janusgraph/pull/2148#discussion_r540403469", "bodyText": "This was the original intention before adding CassandraContainer to the test. Now the actual fix is checked with the assertNull(graph_keyspace); in this same method.", "author": "BrunoBerisso", "createdAt": "2020-12-10T18:33:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI2MDg3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI2MjAzMg==", "url": "https://github.com/JanusGraph/janusgraph/pull/2148#discussion_r447262032", "bodyText": "The bug was in the call to removeGraphFromCache(String graphName) which internally tries to open the graph. Because of the order of the calls, the graph was already dropped by a call to JanusGraphFactory.drop(graph) which then result in the storage to be recreated.\n\nThis sentence confuses me a bit, due the fact you didn't change the functionality of it.\nCan you clarify it for me?", "author": "farodin91", "createdAt": "2020-06-29T21:22:59Z", "path": "janusgraph-core/src/main/java/org/janusgraph/core/ConfiguredGraphFactory.java", "diffHunk": "@@ -155,10 +155,16 @@ public static JanusGraph close(String graphName) throws Exception {\n      * @throws BackendException If an error occurs during deletion\n      * @throws ConfigurationManagementGraphNotEnabledException If ConfigurationManagementGraph not\n      */\n-    public static void drop(String graphName) throws Exception {\n-        final StandardJanusGraph graph = (StandardJanusGraph) ConfiguredGraphFactory.close(graphName);\n+    public static void drop(String graphName) throws BackendException, ConfigurationManagementGraphNotEnabledException, Exception {\n+        final ConfigurationManagementGraph configManagementGraph = getConfigGraphManagementInstance();\n+        configManagementGraph.removeConfiguration(graphName);\n+\n+        final JanusGraphManager jgm = JanusGraphManagerUtility.getInstance();\n+        Preconditions.checkNotNull(jgm, JANUS_GRAPH_MANAGER_EXPECTED_STATE_MSG);\n+\n+        final StandardJanusGraph graph = (StandardJanusGraph) jgm.getGraph(graphName);\n+        removeGraphFromCache(graph);", "originalCommit": "6877996bf2fbc8ac30513478a944e76827669c82", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYwNTU1OQ==", "url": "https://github.com/JanusGraph/janusgraph/pull/2148#discussion_r447605559", "bodyText": "There are two versions of removeGraphFromCache() one expects a String graphName and the other expects a JausGraph graph.\nThe previous version of this method used the version that expects a String graphName which open the graph and call the other version that expect a JanusGraph instance.\nThe problem with that approach is that the open() call will create the graph if it doesn't exist, with the previous implementation the graph was dropped before calling removeGraphFromCache() which caused the graph to be created again.\nWhat I did was use the version of removeGraphFromCache() that expect a JanusGraph instance which doesn't need to open the graph.", "author": "BrunoBerisso", "createdAt": "2020-06-30T11:17:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI2MjAzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxMjE5Ng==", "url": "https://github.com/JanusGraph/janusgraph/pull/2148#discussion_r447912196", "bodyText": "Thanks for explanation", "author": "farodin91", "createdAt": "2020-06-30T18:59:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI2MjAzMg=="}], "type": "inlineReview"}, {"oid": "bb433c31c430e2bdf666a5dc763809001c23ba7b", "url": "https://github.com/JanusGraph/janusgraph/commit/bb433c31c430e2bdf666a5dc763809001c23ba7b", "message": "Fix #2147: graph is created again during the drop process\n\nSigned-off-by: Bruno Berisso <bruno.berisso@experoinc.com>", "committedDate": "2020-07-02T13:50:12Z", "type": "forcePushed"}, {"oid": "dd71d66affd1ad4eb8f60e9b66aec499af1e2311", "url": "https://github.com/JanusGraph/janusgraph/commit/dd71d66affd1ad4eb8f60e9b66aec499af1e2311", "message": "Fix #2147: graph is created again during the drop process\n\nSigned-off-by: Bruno Berisso <bruno.berisso@experoinc.com>", "committedDate": "2020-07-02T19:41:14Z", "type": "forcePushed"}, {"oid": "5c73d87345ac4ec23549428878ef9009651d59c6", "url": "https://github.com/JanusGraph/janusgraph/commit/5c73d87345ac4ec23549428878ef9009651d59c6", "message": "Fix #2147: graph is created again during the drop process\n\nSigned-off-by: Bruno Berisso <bruno.berisso@experoinc.com>", "committedDate": "2020-07-03T12:41:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwNjQyNg==", "url": "https://github.com/JanusGraph/janusgraph/pull/2148#discussion_r449606426", "bodyText": "This long delay was needed because the Cassandra docker image takes around 5 min to get ready (measured in my machine) when running the verify command so I choose to set a safe default. I believe it's because the tests are running in parallel.", "author": "BrunoBerisso", "createdAt": "2020-07-03T14:18:47Z", "path": "janusgraph-test/src/test/java/org/janusgraph/core/ConfiguredGraphFactoryTest.java", "diffHunk": "@@ -26,16 +27,35 @@\n import org.apache.tinkerpop.gremlin.server.Settings;\n import org.apache.commons.configuration.MapConfiguration;\n \n+import java.time.Duration;\n import java.util.Map;\n import java.util.HashMap;\n \n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.AfterEach;\n+import org.testcontainers.containers.CassandraContainer;\n+import org.testcontainers.junit.jupiter.Container;\n+import org.testcontainers.junit.jupiter.Testcontainers;\n+\n+import static org.janusgraph.graphdb.configuration.GraphDatabaseConfiguration.STORAGE_HOSTS;\n+import static org.janusgraph.graphdb.configuration.GraphDatabaseConfiguration.STORAGE_PORT;\n import static org.junit.jupiter.api.Assertions.*;\n \n+@Testcontainers\n public class ConfiguredGraphFactoryTest {\n+\n+    private static final String CASSANDRA_VERSION = \"3.11.6\";\n+    private static final String CASSANDRA_IMAGE = \"cassandra\";\n+\n+    @Container\n+    public static final CassandraContainer cqlContainer;\n     private static final JanusGraphManager gm;\n+\n     static {\n+        cqlContainer = new CassandraContainer<>(CASSANDRA_IMAGE + \":\" + CASSANDRA_VERSION)\n+            .withExposedPorts(9042)\n+            .withStartupAttempts(1)\n+            .withStartupTimeout(Duration.ofMinutes(10));", "originalCommit": "5c73d87345ac4ec23549428878ef9009651d59c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg3MDM2NQ==", "url": "https://github.com/JanusGraph/janusgraph/pull/2148#discussion_r449870365", "bodyText": "I think it would be better use the JanusGraphCassandraContainer.", "author": "farodin91", "createdAt": "2020-07-05T12:10:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwNjQyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEyMjUzMw==", "url": "https://github.com/JanusGraph/janusgraph/pull/2148#discussion_r450122533", "bodyText": "I did try to use JanusGraphCassandraContainer but I had issues with the tests that use \"inmemory\" storage. As far as I understand JanusGraphCassandraContainer replace all values on StandarStorageManager for some reason here. If I comment the call to setWrapperStorageManager all tests cases works. I might be missing something \ud83e\udd14", "author": "BrunoBerisso", "createdAt": "2020-07-06T10:12:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwNjQyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDExODY2Ng==", "url": "https://github.com/JanusGraph/janusgraph/pull/2148#discussion_r454118666", "bodyText": "Your assumption is correct.", "author": "farodin91", "createdAt": "2020-07-14T05:54:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwNjQyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc5NjgxOA==", "url": "https://github.com/JanusGraph/janusgraph/pull/2148#discussion_r535796818", "bodyText": "What about making this ConfiguredGraphFactoryTest a base class and let different backends extend this base test? Like what we have in JanusGraphTest & JanusGraphIndexTest.", "author": "li-boxuan", "createdAt": "2020-12-04T02:50:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwNjQyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc2NjY1NA==", "url": "https://github.com/JanusGraph/janusgraph/pull/2148#discussion_r549766654", "bodyText": "I just pushed this change. ConfiguredGraphFactoryTest is now an abstract class extended by CQLConfiguredGraphFactoryTest and InmemoryConfiguredGraphFactoryTest.", "author": "BrunoBerisso", "createdAt": "2020-12-29T16:26:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwNjQyNg=="}], "type": "inlineReview"}, {"oid": "6fc675386f129e26c162cb9e76dd48456d38b38a", "url": "https://github.com/JanusGraph/janusgraph/commit/6fc675386f129e26c162cb9e76dd48456d38b38a", "message": "Fix #2147: graph is created again during the drop process\n\nSigned-off-by: Bruno Berisso <bruno.berisso@experoinc.com>", "committedDate": "2020-11-27T16:44:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ5MDY1Mg==", "url": "https://github.com/JanusGraph/janusgraph/pull/2148#discussion_r536490652", "bodyText": "The blocking mechanism you implemented looks correct to me, but I recommend using CountDownLatch which is simpler and less error-prone.", "author": "li-boxuan", "createdAt": "2020-12-05T03:01:55Z", "path": "janusgraph-core/src/main/java/org/janusgraph/core/ConfiguredGraphFactory.java", "diffHunk": "@@ -152,13 +153,62 @@ public static JanusGraph close(String graphName) throws Exception {\n      *\n      * <p><b>WARNING: This is an irreversible operation that will delete all graph and index data.</b></p>\n      * @param graphName String graphName. Corresponding graph can be open or closed.\n-     * @throws BackendException If an error occurs during deletion\n-     * @throws ConfigurationManagementGraphNotEnabledException If ConfigurationManagementGraph not\n      */\n-    public static void drop(String graphName) throws Exception {\n-        final StandardJanusGraph graph = (StandardJanusGraph) ConfiguredGraphFactory.close(graphName);\n-        JanusGraphFactory.drop(graph);\n-        removeConfiguration(graphName);\n+    public static void drop(String graphName) {\n+        final JanusGraphManager jgm = JanusGraphManagerUtility.getInstance();\n+        Preconditions.checkNotNull(jgm, JANUS_GRAPH_MANAGER_EXPECTED_STATE_MSG);\n+\n+        final StandardJanusGraph graph = (StandardJanusGraph) jgm.getGraph(graphName);\n+        // Evict the graph from the cache in all nodes in the cluster\n+        DropGraphOnEvictionTrigger dropTrigger = new DropGraphOnEvictionTrigger(graphName, graph, getConfigGraphManagementInstance());\n+        removeGraphFromCache(graph, dropTrigger);\n+        // Block the current thread until the drop operation finish\n+        dropTrigger.waitUntilDropFinish();\n+    }\n+\n+    /**\n+     * This trigger will fire when the give graph was evicted from all the nodes in the cluster.\n+     */\n+    private static class DropGraphOnEvictionTrigger implements Callable<Boolean> {\n+        private static final Logger log = LoggerFactory.getLogger(DropGraphOnEvictionTrigger.class);\n+        private final String graphName;\n+        private final JanusGraph graph;\n+        private final ConfigurationManagementGraph configManagementGraph;\n+        private boolean dropFinished;\n+\n+        private DropGraphOnEvictionTrigger(String graphName, JanusGraph graph, ConfigurationManagementGraph configManagementGraph) {\n+            this.graphName = graphName;\n+            this.graph = graph;\n+            this.configManagementGraph = configManagementGraph;\n+            this.dropFinished = false;\n+        }\n+\n+        @Override\n+        public synchronized Boolean call() throws BackendException {\n+            try {\n+                log.info(\"Graph {} has been removed from the graph cache on every JanusGraph node in the cluster.\", graphName);\n+                log.warn(\"Attempting to drop the graph {}.\", graphName);\n+                configManagementGraph.removeConfiguration(graphName);\n+                JanusGraphFactory.drop(graph);\n+                log.warn(\"Graph {} has been dropped.\", graphName);\n+                return true;\n+            } finally {\n+                dropFinished = true;\n+                notifyAll();\n+            }\n+        }\n+\n+        public synchronized void waitUntilDropFinish() {\n+            log.debug(\"Waiting for graph {} to be evicted from the cache in all JanusGraph nodes...\", graphName);\n+            while (!dropFinished) {\n+                try {\n+                    wait();", "originalCommit": "6fc675386f129e26c162cb9e76dd48456d38b38a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQzNDMwNA==", "url": "https://github.com/JanusGraph/janusgraph/pull/2148#discussion_r540434304", "bodyText": "Thanks for the recommendation, I wasn't familiar with the CountDownLatch. Now that I'm learning about it I'm not seeing how this would be simpler for this case, given that we are waiting for only one operation to complete.\nCould you please elaborate a little on it? Or just point me to the right place so I can dig some more.\nThanks", "author": "BrunoBerisso", "createdAt": "2020-12-10T19:22:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ5MDY1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ4NTY0OA==", "url": "https://github.com/JanusGraph/janusgraph/pull/2148#discussion_r541485648", "bodyText": "I guess when I say 'simpler' I mean It's simpler for programmers & reviewers to reason about its correctness. For example, I had to check carefully you had \"synchronized\" keywords in-place and you used a while loop to wait. In terms of lines of code, there might not be much of a difference.\nI recommend reading Item 81: Prefer concurrency utilities to wait and notify from Effective Java, Third Edition. Here is a resource online. As it suggests,\n\nGiven the difficulty of using wait and notify correctly, you should use the higher-level concurrency utilities instead.\n\nThere are some discussions around this on StackOverflow as well, like this and this.\nRegarding the usage of CountDownLatch, I am sure you could find tons of examples online. There are also a few usages of it in the JanusGraph codebase.", "author": "li-boxuan", "createdAt": "2020-12-12T03:04:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ5MDY1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2ODgxNQ==", "url": "https://github.com/JanusGraph/janusgraph/pull/2148#discussion_r546668815", "bodyText": "Thanks for the detailed answer, I appreciate your time investment in it and in this review.\nI will update this PR during the holidays to include your suggestions.", "author": "BrunoBerisso", "createdAt": "2020-12-21T12:03:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ5MDY1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc2OTQ4Nw==", "url": "https://github.com/JanusGraph/janusgraph/pull/2148#discussion_r549769487", "bodyText": "I update this to use CountDownLatch instead of wait/notifyAll.\nI also removed the while (!dropFinished) check because it was causing the Gremlin script engine to lock forever if the script times out before the eviction completes.", "author": "BrunoBerisso", "createdAt": "2020-12-29T16:34:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ5MDY1Mg=="}], "type": "inlineReview"}, {"oid": "cfe82516ef3d38540a5027f264cdb84ce1e9b976", "url": "https://github.com/JanusGraph/janusgraph/commit/cfe82516ef3d38540a5027f264cdb84ce1e9b976", "message": "Fix #2147: graph is created again during the drop process\n\nSigned-off-by: Bruno Berisso <bruno.berisso@experoinc.com>", "committedDate": "2020-12-29T16:24:19Z", "type": "forcePushed"}, {"oid": "37d2cad23a8138286732ed73cb16b5e2c41d6fce", "url": "https://github.com/JanusGraph/janusgraph/commit/37d2cad23a8138286732ed73cb16b5e2c41d6fce", "message": "Fix #2147: graph is created again during the drop process\n\nSigned-off-by: Bruno Berisso <bruno.berisso@experoinc.com>", "committedDate": "2020-12-29T17:17:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxNzcyMg==", "url": "https://github.com/JanusGraph/janusgraph/pull/2148#discussion_r549917722", "bodyText": "Can you use JanusGraphCassandraContainer if possible?", "author": "li-boxuan", "createdAt": "2020-12-30T02:50:23Z", "path": "janusgraph-test/src/test/java/org/janusgraph/core/CQLConfiguredGraphFactoryTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright 2017 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.core;\n+\n+import com.datastax.driver.core.Session;\n+import org.apache.commons.configuration.MapConfiguration;\n+import org.janusgraph.graphdb.database.StandardJanusGraph;\n+import org.junit.jupiter.api.Test;\n+import org.testcontainers.containers.CassandraContainer;\n+import org.testcontainers.junit.jupiter.Container;\n+import org.testcontainers.junit.jupiter.Testcontainers;\n+\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.janusgraph.graphdb.configuration.GraphDatabaseConfiguration.GRAPH_NAME;\n+import static org.janusgraph.graphdb.configuration.GraphDatabaseConfiguration.STORAGE_BACKEND;\n+import static org.janusgraph.graphdb.configuration.GraphDatabaseConfiguration.STORAGE_HOSTS;\n+import static org.janusgraph.graphdb.configuration.GraphDatabaseConfiguration.STORAGE_PORT;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+@Testcontainers\n+public class CQLConfiguredGraphFactoryTest extends ConfiguredGraphFactoryTest {\n+\n+    private static final String CASSANDRA_VERSION = \"3.11.6\";\n+    private static final String CASSANDRA_IMAGE = \"cassandra\";\n+\n+    @Container\n+    public static final CassandraContainer cqlContainer;", "originalCommit": "37d2cad23a8138286732ed73cb16b5e2c41d6fce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE1MzUzMQ==", "url": "https://github.com/JanusGraph/janusgraph/pull/2148#discussion_r550153531", "bodyText": "I try to use it when I first added the tests but it seems to not allow multiple storage backends. I added some details about this before in this conversation", "author": "BrunoBerisso", "createdAt": "2020-12-30T11:12:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxNzcyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI1MTgyNg==", "url": "https://github.com/JanusGraph/janusgraph/pull/2148#discussion_r550251826", "bodyText": "Is it possible not to use in-memory backend in CQL test? Not familiar with this, so not sure if this is the reason you are unable to use JanusGraphCassandraContainer.\n@farodin91 Any idea here?", "author": "li-boxuan", "createdAt": "2020-12-30T16:27:43Z", "path": "janusgraph-test/src/test/java/org/janusgraph/core/ConfiguredGraphFactoryTest.java", "diffHunk": "@@ -14,37 +14,65 @@\n \n package org.janusgraph.core;\n \n+import org.apache.commons.configuration.MapConfiguration;\n+import org.apache.tinkerpop.gremlin.server.Settings;\n+import org.janusgraph.diskstorage.configuration.backend.CommonsConfiguration;\n import org.janusgraph.graphdb.configuration.builder.GraphDatabaseConfigurationBuilder;\n-import org.janusgraph.graphdb.management.JanusGraphManager;\n+import org.janusgraph.graphdb.database.StandardJanusGraph;\n import org.janusgraph.graphdb.management.ConfigurationManagementGraph;\n+import org.janusgraph.graphdb.management.JanusGraphManager;\n import org.janusgraph.graphdb.management.utils.ConfigurationManagementGraphNotEnabledException;\n-import org.janusgraph.diskstorage.configuration.backend.CommonsConfiguration;\n-import org.janusgraph.graphdb.database.StandardJanusGraph;\n-import static org.janusgraph.graphdb.configuration.GraphDatabaseConfiguration.GRAPH_NAME;\n-import static org.janusgraph.graphdb.configuration.GraphDatabaseConfiguration.STORAGE_BACKEND;\n-\n-import org.apache.tinkerpop.gremlin.server.Settings;\n-import org.apache.commons.configuration.MapConfiguration;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n \n-import java.util.Map;\n import java.util.HashMap;\n+import java.util.Map;\n \n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.AfterEach;\n-import static org.junit.jupiter.api.Assertions.*;\n+import static org.janusgraph.graphdb.configuration.GraphDatabaseConfiguration.GRAPH_NAME;\n+import static org.janusgraph.graphdb.configuration.GraphDatabaseConfiguration.STORAGE_BACKEND;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public abstract class ConfiguredGraphFactoryTest {\n \n-public class ConfiguredGraphFactoryTest {\n     private static final JanusGraphManager gm;\n+\n     static {\n         gm = new JanusGraphManager(new Settings());\n-        final Map<String, Object> map = new HashMap<>();\n-        map.put(STORAGE_BACKEND.toStringWithoutRoot(), \"inmemory\");\n-        final MapConfiguration config = new MapConfiguration(map);\n+        final MapConfiguration config = getManagementConfig();\n         final StandardJanusGraph graph = new StandardJanusGraph(new GraphDatabaseConfigurationBuilder().build(new CommonsConfiguration(config)));\n         // Instantiate the ConfigurationManagementGraph Singleton\n         new ConfigurationManagementGraph(graph);\n     }\n \n+    /**\n+     * Getter for the settings to use to instantiate the graph supporting the\n+     * ConfigurationManagementGraph instance.\n+     * @return a MapConfiguration instance\n+     */\n+    protected static MapConfiguration getManagementConfig() {\n+        final Map<String, Object> map = new HashMap<>();\n+        map.put(STORAGE_BACKEND.toStringWithoutRoot(), \"inmemory\");", "originalCommit": "37d2cad23a8138286732ed73cb16b5e2c41d6fce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3NjkxMA==", "url": "https://github.com/JanusGraph/janusgraph/pull/2148#discussion_r551276910", "bodyText": "This is a good idea, thanks.\nI try it locally but JanusGraphCassandraContainer seems unreliable for me, I'm having a consistent java.lang.IllegalStateException: Could not send request, session is closed in the first call to ConfiguredGraphFactory.removeConfiguration(graphName);. I don't have this behavior with the Cassandra container.\nI think this could be an issue with my local machine (I also had to restart docker sometimes for the container to start running) so I pushed this change to see if it works on the CI pipeline.", "author": "BrunoBerisso", "createdAt": "2021-01-04T12:02:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI1MTgyNg=="}], "type": "inlineReview"}, {"oid": "a0568582b0ee958840d6210e79a4fef7a58c53b7", "url": "https://github.com/JanusGraph/janusgraph/commit/a0568582b0ee958840d6210e79a4fef7a58c53b7", "message": "Fix #2147: graph is created again during the drop process\n\nSigned-off-by: Bruno Berisso <bruno.berisso@experoinc.com>", "committedDate": "2021-01-04T11:56:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDI4MTAwMw==", "url": "https://github.com/JanusGraph/janusgraph/pull/2148#discussion_r554281003", "bodyText": "Not 100% sure but I think this is not needed.", "author": "li-boxuan", "createdAt": "2021-01-09T02:59:35Z", "path": "janusgraph-test/src/test/java/org/janusgraph/core/CQLConfiguredGraphFactoryTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+// Copyright 2017 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.core;\n+\n+import com.datastax.driver.core.Session;\n+import org.apache.commons.configuration.MapConfiguration;\n+import org.janusgraph.JanusGraphCassandraContainer;\n+import org.janusgraph.graphdb.database.StandardJanusGraph;\n+import org.junit.jupiter.api.Test;\n+import org.testcontainers.junit.jupiter.Container;\n+import org.testcontainers.junit.jupiter.Testcontainers;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.janusgraph.graphdb.configuration.GraphDatabaseConfiguration.GRAPH_NAME;\n+import static org.janusgraph.graphdb.configuration.GraphDatabaseConfiguration.STORAGE_BACKEND;\n+import static org.janusgraph.graphdb.configuration.GraphDatabaseConfiguration.STORAGE_HOSTS;\n+import static org.janusgraph.graphdb.configuration.GraphDatabaseConfiguration.STORAGE_PORT;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+@Testcontainers\n+public class CQLConfiguredGraphFactoryTest extends ConfiguredGraphFactoryTest {\n+\n+    @Container\n+    public static final JanusGraphCassandraContainer cqlContainer = new JanusGraphCassandraContainer();\n+\n+    static {\n+        cqlContainer.start();", "originalCommit": "a0568582b0ee958840d6210e79a4fef7a58c53b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTE3NDI4MQ==", "url": "https://github.com/JanusGraph/janusgraph/pull/2148#discussion_r571174281", "bodyText": "I also thought it was not needed, but without it, the container won't start when running locally.", "author": "BrunoBerisso", "createdAt": "2021-02-05T18:42:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDI4MTAwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDI4MTYyMg==", "url": "https://github.com/JanusGraph/janusgraph/pull/2148#discussion_r554281622", "bodyText": "Can you move CQLConfiguredGraphFactoryTest to janusgraph-cql module,\nConfiguredGraphFactoryTest to janusgraph-backend-testutils module (you might need to introduce additional dependency),\nand InmemoryConfiguredGraphFactoryTest to janusgraph-inmemory module?\nThis is a common practice for tests involving different backends. We have workflows like ci-backend-cql.yml which picks up tests only under certain folders.", "author": "li-boxuan", "createdAt": "2021-01-09T03:05:48Z", "path": "janusgraph-test/src/test/java/org/janusgraph/core/CQLConfiguredGraphFactoryTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+// Copyright 2017 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.core;\n+\n+import com.datastax.driver.core.Session;\n+import org.apache.commons.configuration.MapConfiguration;\n+import org.janusgraph.JanusGraphCassandraContainer;\n+import org.janusgraph.graphdb.database.StandardJanusGraph;\n+import org.junit.jupiter.api.Test;\n+import org.testcontainers.junit.jupiter.Container;\n+import org.testcontainers.junit.jupiter.Testcontainers;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.janusgraph.graphdb.configuration.GraphDatabaseConfiguration.GRAPH_NAME;\n+import static org.janusgraph.graphdb.configuration.GraphDatabaseConfiguration.STORAGE_BACKEND;\n+import static org.janusgraph.graphdb.configuration.GraphDatabaseConfiguration.STORAGE_HOSTS;\n+import static org.janusgraph.graphdb.configuration.GraphDatabaseConfiguration.STORAGE_PORT;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+@Testcontainers\n+public class CQLConfiguredGraphFactoryTest extends ConfiguredGraphFactoryTest {", "originalCommit": "a0568582b0ee958840d6210e79a4fef7a58c53b7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5dc618af15a1dd9267434d1db7c44c6aa47055dc", "url": "https://github.com/JanusGraph/janusgraph/commit/5dc618af15a1dd9267434d1db7c44c6aa47055dc", "message": "Fix #2147: graph is created again during the drop process\n\nSigned-off-by: Bruno Berisso <bruno.berisso@experoinc.com>", "committedDate": "2021-02-05T16:20:34Z", "type": "forcePushed"}, {"oid": "8cdc0ea4480520cb80b24815e22964c33f320d5a", "url": "https://github.com/JanusGraph/janusgraph/commit/8cdc0ea4480520cb80b24815e22964c33f320d5a", "message": "Fix #2147: graph is created again during the drop process\n\nSigned-off-by: Bruno Berisso <bruno.berisso@experoinc.com>", "committedDate": "2021-02-05T17:19:41Z", "type": "forcePushed"}, {"oid": "5533d507d3d4321270279719b19c9798c9eb1289", "url": "https://github.com/JanusGraph/janusgraph/commit/5533d507d3d4321270279719b19c9798c9eb1289", "message": "Fix #2147: graph is created again during the drop process\n\nSigned-off-by: Bruno Berisso <bruno.berisso@experoinc.com>", "committedDate": "2021-02-05T17:43:44Z", "type": "forcePushed"}, {"oid": "2bf56ccd51686bb0605de148578f9951a6231eb3", "url": "https://github.com/JanusGraph/janusgraph/commit/2bf56ccd51686bb0605de148578f9951a6231eb3", "message": "Fix #2147: graph is created again during the drop process\n\nSigned-off-by: Bruno Berisso <bruno.berisso@experoinc.com>", "committedDate": "2021-02-05T19:14:04Z", "type": "forcePushed"}, {"oid": "bf3dde8803cc43da1218c1f340a9cbab663ed45e", "url": "https://github.com/JanusGraph/janusgraph/commit/bf3dde8803cc43da1218c1f340a9cbab663ed45e", "message": "Fix #2147: graph is created again during the drop process\n\nSigned-off-by: Bruno Berisso <bruno.berisso@experoinc.com>", "committedDate": "2021-02-08T16:56:04Z", "type": "forcePushed"}, {"oid": "e32d30f1cadbb06e9f53fdcf726d00f806735ff1", "url": "https://github.com/JanusGraph/janusgraph/commit/e32d30f1cadbb06e9f53fdcf726d00f806735ff1", "message": "Fix #2147: graph is created again during the drop process\n\nSigned-off-by: Bruno Berisso <bruno.berisso@experoinc.com>", "committedDate": "2021-02-11T13:07:03Z", "type": "forcePushed"}, {"oid": "f7171441abcfa84c8b3457d910b215850b96c0df", "url": "https://github.com/JanusGraph/janusgraph/commit/f7171441abcfa84c8b3457d910b215850b96c0df", "message": "Fix #2147: graph is created again during the drop process\n\nSigned-off-by: Bruno Berisso <bruno.berisso@experoinc.com>", "committedDate": "2021-02-12T15:42:08Z", "type": "commit"}, {"oid": "f7171441abcfa84c8b3457d910b215850b96c0df", "url": "https://github.com/JanusGraph/janusgraph/commit/f7171441abcfa84c8b3457d910b215850b96c0df", "message": "Fix #2147: graph is created again during the drop process\n\nSigned-off-by: Bruno Berisso <bruno.berisso@experoinc.com>", "committedDate": "2021-02-12T15:42:08Z", "type": "forcePushed"}]}