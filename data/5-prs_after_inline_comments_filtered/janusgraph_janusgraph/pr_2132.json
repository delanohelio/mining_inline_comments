{"pr_number": 2132, "pr_title": "Add JanusGraphServer and JanusGraphSettings", "pr_createdAt": "2020-06-13T14:00:12Z", "pr_url": "https://github.com/JanusGraph/janusgraph/pull/2132", "timeline": [{"oid": "497562cbd2646c25d7e62084666801d1b9dcb002", "url": "https://github.com/JanusGraph/janusgraph/commit/497562cbd2646c25d7e62084666801d1b9dcb002", "message": "Add JanusGraphServer and JanusGraphSettings\n\nPartial fixes #2119\n\n* Add custom JanusGraph header on startup\n* Print JanusGraph version on startup\n* Auto configure serializers for gremlin\n\nSigned-off-by: Jan Jansen <jan.jansen@gdata.de>", "committedDate": "2020-06-14T07:30:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2MTM0Nw==", "url": "https://github.com/JanusGraph/janusgraph/pull/2132#discussion_r440161347", "bodyText": "(nitpick) unused import", "author": "FlorianHockmann", "createdAt": "2020-06-15T13:06:28Z", "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphServer.java", "diffHunk": "@@ -0,0 +1,71 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.server;\n+\n+import com.jcabi.manifests.Manifests;\n+import org.apache.tinkerpop.gremlin.server.GremlinServer;\n+import org.apache.tinkerpop.gremlin.server.Settings;\n+import org.apache.tinkerpop.gremlin.util.Gremlin;", "originalCommit": "497562cbd2646c25d7e62084666801d1b9dcb002", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2MjU0OA==", "url": "https://github.com/JanusGraph/janusgraph/pull/2132#discussion_r440162548", "bodyText": "Was this a TODO or what is its purpose?", "author": "FlorianHockmann", "createdAt": "2020-06-15T13:08:35Z", "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphServer.java", "diffHunk": "@@ -0,0 +1,71 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.server;\n+\n+import com.jcabi.manifests.Manifests;\n+import org.apache.tinkerpop.gremlin.server.GremlinServer;\n+import org.apache.tinkerpop.gremlin.server.Settings;\n+import org.apache.tinkerpop.gremlin.util.Gremlin;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class JanusGraphServer {\n+    private static final Logger logger = LoggerFactory.getLogger(JanusGraphServer.class);\n+\n+    public static void main(final String[] args) throws Exception {\n+        // add to vm options: -Dlog4j.configuration=file:conf/log4j.properties", "originalCommit": "497562cbd2646c25d7e62084666801d1b9dcb002", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2NjYzNg==", "url": "https://github.com/JanusGraph/janusgraph/pull/2132#discussion_r440166636", "bodyText": "The read(final String file) is just an overload of read(final InputStream stream) but it has a different behaviour as it also performs autoImport (if preventAutoConfiguration is not set)\nI think that's confusing and would prefer if both overloads would have the same behavior except for the fact that one takes a String while the other takes a Stream. So read(final InputStream stream) should already call autoImport in my opinion.", "author": "FlorianHockmann", "createdAt": "2020-06-15T13:15:20Z", "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphSettings.java", "diffHunk": "@@ -0,0 +1,150 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.server;\n+\n+import org.apache.tinkerpop.gremlin.server.Settings;\n+import org.yaml.snakeyaml.TypeDescription;\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.constructor.Constructor;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+public class JanusGraphSettings extends Settings {\n+\n+    /**\n+     * If set to {@code true} the JanusGraph won't automatically configure serializers.\n+     */\n+    public boolean preventAutoConfiguration = false;\n+\n+    public static JanusGraphSettings read(final String file) throws Exception {\n+        InputStream input = new FileInputStream(new File(file));\n+        JanusGraphSettings read = JanusGraphSettings.read(input);", "originalCommit": "497562cbd2646c25d7e62084666801d1b9dcb002", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2Njg0OA==", "url": "https://github.com/JanusGraph/janusgraph/pull/2132#discussion_r440166848", "bodyText": "from a file This method isn't taking a file but a Stream.", "author": "FlorianHockmann", "createdAt": "2020-06-15T13:15:39Z", "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphSettings.java", "diffHunk": "@@ -0,0 +1,150 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.server;\n+\n+import org.apache.tinkerpop.gremlin.server.Settings;\n+import org.yaml.snakeyaml.TypeDescription;\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.constructor.Constructor;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+public class JanusGraphSettings extends Settings {\n+\n+    /**\n+     * If set to {@code true} the JanusGraph won't automatically configure serializers.\n+     */\n+    public boolean preventAutoConfiguration = false;\n+\n+    public static JanusGraphSettings read(final String file) throws Exception {\n+        InputStream input = new FileInputStream(new File(file));\n+        JanusGraphSettings read = JanusGraphSettings.read(input);\n+        if (read.preventAutoConfiguration) {\n+            return read;\n+        }\n+        return autoImport(read);\n+    }\n+\n+    /**\n+     * Read configuration from a file into a new {@link JanusGraphSettings} object.", "originalCommit": "497562cbd2646c25d7e62084666801d1b9dcb002", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2NzIyOQ==", "url": "https://github.com/JanusGraph/janusgraph/pull/2132#discussion_r440167229", "bodyText": "Shouldn't Optional be JanusGraphSettings?", "author": "FlorianHockmann", "createdAt": "2020-06-15T13:16:14Z", "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphSettings.java", "diffHunk": "@@ -0,0 +1,150 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.server;\n+\n+import org.apache.tinkerpop.gremlin.server.Settings;\n+import org.yaml.snakeyaml.TypeDescription;\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.constructor.Constructor;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+public class JanusGraphSettings extends Settings {\n+\n+    /**\n+     * If set to {@code true} the JanusGraph won't automatically configure serializers.\n+     */\n+    public boolean preventAutoConfiguration = false;\n+\n+    public static JanusGraphSettings read(final String file) throws Exception {\n+        InputStream input = new FileInputStream(new File(file));\n+        JanusGraphSettings read = JanusGraphSettings.read(input);\n+        if (read.preventAutoConfiguration) {\n+            return read;\n+        }\n+        return autoImport(read);\n+    }\n+\n+    /**\n+     * Read configuration from a file into a new {@link JanusGraphSettings} object.\n+     *\n+     * @param stream an input stream containing a Gremlin Server YAML configuration\n+     * @return a new {@link Optional} object wrapping the created {@link Settings}", "originalCommit": "497562cbd2646c25d7e62084666801d1b9dcb002", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2NzgyNw==", "url": "https://github.com/JanusGraph/janusgraph/pull/2132#discussion_r440167827", "bodyText": "(nitpick) How about moving this copying from one settings to another into a dedicated method for that to not clutter this method?", "author": "FlorianHockmann", "createdAt": "2020-06-15T13:17:16Z", "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphSettings.java", "diffHunk": "@@ -0,0 +1,150 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.server;\n+\n+import org.apache.tinkerpop.gremlin.server.Settings;\n+import org.yaml.snakeyaml.TypeDescription;\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.constructor.Constructor;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+public class JanusGraphSettings extends Settings {\n+\n+    /**\n+     * If set to {@code true} the JanusGraph won't automatically configure serializers.\n+     */\n+    public boolean preventAutoConfiguration = false;\n+\n+    public static JanusGraphSettings read(final String file) throws Exception {\n+        InputStream input = new FileInputStream(new File(file));\n+        JanusGraphSettings read = JanusGraphSettings.read(input);\n+        if (read.preventAutoConfiguration) {\n+            return read;\n+        }\n+        return autoImport(read);\n+    }\n+\n+    /**\n+     * Read configuration from a file into a new {@link JanusGraphSettings} object.\n+     *\n+     * @param stream an input stream containing a Gremlin Server YAML configuration\n+     * @return a new {@link Optional} object wrapping the created {@link Settings}\n+     */\n+    public static JanusGraphSettings read(final InputStream stream) {\n+        Objects.requireNonNull(stream);\n+\n+        final Constructor constructor = new Constructor(JanusGraphSettings.class);", "originalCommit": "497562cbd2646c25d7e62084666801d1b9dcb002", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE3MDkxMg==", "url": "https://github.com/JanusGraph/janusgraph/pull/2132#discussion_r440170912", "bodyText": "Is there really no other way to use an existing config file and something to it than to copy every element explicitly? This means that we have to change this every time something changes in the GremlinServer settings :/", "author": "FlorianHockmann", "createdAt": "2020-06-15T13:22:12Z", "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphSettings.java", "diffHunk": "@@ -0,0 +1,150 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.server;\n+\n+import org.apache.tinkerpop.gremlin.server.Settings;\n+import org.yaml.snakeyaml.TypeDescription;\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.constructor.Constructor;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+public class JanusGraphSettings extends Settings {\n+\n+    /**\n+     * If set to {@code true} the JanusGraph won't automatically configure serializers.\n+     */\n+    public boolean preventAutoConfiguration = false;\n+\n+    public static JanusGraphSettings read(final String file) throws Exception {\n+        InputStream input = new FileInputStream(new File(file));\n+        JanusGraphSettings read = JanusGraphSettings.read(input);\n+        if (read.preventAutoConfiguration) {\n+            return read;\n+        }\n+        return autoImport(read);\n+    }\n+\n+    /**\n+     * Read configuration from a file into a new {@link JanusGraphSettings} object.\n+     *\n+     * @param stream an input stream containing a Gremlin Server YAML configuration\n+     * @return a new {@link Optional} object wrapping the created {@link Settings}\n+     */\n+    public static JanusGraphSettings read(final InputStream stream) {\n+        Objects.requireNonNull(stream);\n+\n+        final Constructor constructor = new Constructor(JanusGraphSettings.class);\n+        final TypeDescription settingsDescription = new TypeDescription(Settings.class);\n+        settingsDescription.putMapPropertyType(\"graphs\", String.class, String.class);", "originalCommit": "497562cbd2646c25d7e62084666801d1b9dcb002", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "74612f3530a80fa3da7d6d222ac4c71507428c85", "url": "https://github.com/JanusGraph/janusgraph/commit/74612f3530a80fa3da7d6d222ac4c71507428c85", "message": "Add JanusGraphServer and Default serializers\n\nPartial fixes #2119\n\n* Add custom JanusGraph header on startup\n* Print JanusGraph version on startup\n* Default set of TinkerPop serializers\n\nSigned-off-by: Jan Jansen <jan.jansen@gdata.de>", "committedDate": "2020-06-16T08:47:35Z", "type": "forcePushed"}, {"oid": "545f804dba6c66515ad4d3fc076ec11c05e3532c", "url": "https://github.com/JanusGraph/janusgraph/commit/545f804dba6c66515ad4d3fc076ec11c05e3532c", "message": "Some review comment resolvings\n\nSigned-off-by: Jan Jansen <jan.jansen@gdata.de>", "committedDate": "2020-06-17T06:17:55Z", "type": "forcePushed"}, {"oid": "914b710f924d826fe4896652339c401e7e8a8ccb", "url": "https://github.com/JanusGraph/janusgraph/commit/914b710f924d826fe4896652339c401e7e8a8ccb", "message": "Add JanusGraphServer and Default serializers\n\nPartial fixes #2119\n\n* Add custom JanusGraph header on startup\n* Print JanusGraph version on startup\n* Default set of TinkerPop serializers\n\nSigned-off-by: Jan Jansen <jan.jansen@gdata.de>", "committedDate": "2020-06-22T12:22:31Z", "type": "commit"}, {"oid": "914b710f924d826fe4896652339c401e7e8a8ccb", "url": "https://github.com/JanusGraph/janusgraph/commit/914b710f924d826fe4896652339c401e7e8a8ccb", "message": "Add JanusGraphServer and Default serializers\n\nPartial fixes #2119\n\n* Add custom JanusGraph header on startup\n* Print JanusGraph version on startup\n* Default set of TinkerPop serializers\n\nSigned-off-by: Jan Jansen <jan.jansen@gdata.de>", "committedDate": "2020-06-22T12:22:31Z", "type": "forcePushed"}]}