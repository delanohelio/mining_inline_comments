{"pr_number": 2061, "pr_title": "Add support for graph binary", "pr_createdAt": "2020-03-26T21:33:35Z", "pr_url": "https://github.com/JanusGraph/janusgraph/pull/2061", "timeline": [{"oid": "9df0e5eb8ab11d52e192ae3896862f2063d50e6a", "url": "https://github.com/JanusGraph/janusgraph/commit/9df0e5eb8ab11d52e192ae3896862f2063d50e6a", "message": "Add support for graph binary\n\nFixes #1564\n\nSigned-off-by: Jan Jansen <jan.jansen@gdata.de>", "committedDate": "2020-03-26T22:06:58Z", "type": "forcePushed"}, {"oid": "fdcc61232f9527d743c849b473e1d9266a52f1df", "url": "https://github.com/JanusGraph/janusgraph/commit/fdcc61232f9527d743c849b473e1d9266a52f1df", "message": "Add support for graph binary\n\nFixes #1564\n\nSigned-off-by: Jan Jansen <jan.jansen@gdata.de>", "committedDate": "2020-03-26T22:24:00Z", "type": "forcePushed"}, {"oid": "8fbab2a9b94b31994d8a10f48bf96f14d672a63f", "url": "https://github.com/JanusGraph/janusgraph/commit/8fbab2a9b94b31994d8a10f48bf96f14d672a63f", "message": "Add support for graph binary\n\nFixes #1564\n\nSigned-off-by: Jan Jansen <jan.jansen@gdata.de>", "committedDate": "2020-03-26T22:26:52Z", "type": "forcePushed"}, {"oid": "dfb96894b77bc80d04f610c6bf91e23b79bfc92d", "url": "https://github.com/JanusGraph/janusgraph/commit/dfb96894b77bc80d04f610c6bf91e23b79bfc92d", "message": "Add support for graph binary\n\nFixes #1564\n\nSigned-off-by: Jan Jansen <jan.jansen@gdata.de>", "committedDate": "2020-04-09T11:41:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjExNzI3OA==", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#discussion_r406117278", "bodyText": "Please stay consistent here with the casing of janusgraph. I would use only lower case letters here as we also do it like that in the package name.", "author": "FlorianHockmann", "createdAt": "2020-04-09T10:43:27Z", "path": "janusgraph-driver/src/main/java/org/janusgraph/graphdb/tinkerpop/io/binary/GraphBinaryType.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.tinkerpop.io.binary;\n+\n+public enum GraphBinaryType {\n+    Geoshape(0x1000, \"janusgraph.Geoshape\"),\n+    RelationIdentifier(0x1001, \"janusGraph.RelationIdentifier\"),", "originalCommit": "8fbab2a9b94b31994d8a10f48bf96f14d672a63f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjExOTAwMQ==", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#discussion_r406119001", "bodyText": "You copied this 1:1 from the TinkerPop sample, right?\nThis exception message however doesn't make much sense as you actually expect a custom_type_info, but one that is supported by the current type serializer.", "author": "FlorianHockmann", "createdAt": "2020-04-09T10:46:56Z", "path": "janusgraph-driver/src/main/java/org/janusgraph/graphdb/tinkerpop/io/binary/JanusGraphTypeSerializer.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package org.janusgraph.graphdb.tinkerpop.io.binary;\n+\n+import org.apache.commons.lang.SerializationException;\n+import org.apache.tinkerpop.gremlin.structure.io.Buffer;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.DataType;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.GraphBinaryReader;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.GraphBinaryWriter;\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+import org.apache.tinkerpop.gremlin.structure.io.binary.types.CustomTypeSerializer;\n+\n+import java.io.IOException;\n+\n+public abstract class JanusGraphTypeSerializer<T> implements CustomTypeSerializer<T> {\n+\n+    private GraphBinaryType type;\n+\n+    protected JanusGraphTypeSerializer(GraphBinaryType type){\n+        this.type = type;\n+    }\n+\n+    @Override\n+    public String getTypeName() {\n+        return type.getTypeName();\n+    }\n+\n+    @Override\n+    public DataType getDataType() {\n+        return DataType.CUSTOM;\n+    }\n+\n+    @Override\n+    public T read(Buffer buffer, GraphBinaryReader context) throws IOException {\n+        // {custom type info}, {value_flag} and {value}\n+        // No custom_type_info\n+        if (buffer.readInt() != type.getTypeId()) {\n+            throw new SerializationException(\"{custom_type_info} should not be provided for this custom type\");", "originalCommit": "8fbab2a9b94b31994d8a10f48bf96f14d672a63f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEyMzE0NQ==", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#discussion_r406123145", "bodyText": "The header should come before the imports.", "author": "FlorianHockmann", "createdAt": "2020-04-09T10:55:36Z", "path": "janusgraph-driver/src/main/java/org/janusgraph/graphdb/tinkerpop/io/binary/JanusGraphTypeSerializer.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package org.janusgraph.graphdb.tinkerpop.io.binary;\n+\n+import org.apache.commons.lang.SerializationException;\n+import org.apache.tinkerpop.gremlin.structure.io.Buffer;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.DataType;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.GraphBinaryReader;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.GraphBinaryWriter;\n+// Copyright 2020 JanusGraph Authors", "originalCommit": "8fbab2a9b94b31994d8a10f48bf96f14d672a63f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEzNTY3Mg==", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#discussion_r406135672", "bodyText": "(nitpick) I would prefer not to use random data in unit tests as it makes it slightly harder to debug in my opinion as I cannot see the expected values directly in the code. However, this is just my personal opinion. So, feel free to ignore it if you disagree.", "author": "FlorianHockmann", "createdAt": "2020-04-09T11:22:15Z", "path": "janusgraph-driver/src/test/java/org/janusgraph/graphdb/tinkerpop/io/binary/RelationIdentifierGraphBinarySerializerTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.tinkerpop.io.binary;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import org.apache.tinkerpop.gremlin.driver.message.ResponseMessage;\n+import org.apache.tinkerpop.gremlin.driver.ser.GraphBinaryMessageSerializerV1;\n+import org.apache.tinkerpop.gremlin.driver.ser.NettyBufferFactory;\n+import org.apache.tinkerpop.gremlin.structure.io.Buffer;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.GraphBinaryReader;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.GraphBinaryWriter;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.TypeSerializerRegistry;\n+import org.janusgraph.graphdb.relations.RelationIdentifier;\n+import org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.util.*;\n+\n+import static org.apache.tinkerpop.gremlin.driver.ser.AbstractMessageSerializer.TOKEN_IO_REGISTRIES;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class RelationIdentifierGraphBinarySerializerTest {\n+\n+    private static final ByteBufAllocator allocator = ByteBufAllocator.DEFAULT;\n+    private static final NettyBufferFactory bufferFactory = new NettyBufferFactory();\n+\n+    @Test\n+    public void shouldCustomSerialization() throws IOException {\n+        final GraphBinaryMessageSerializerV1 serializer = new GraphBinaryMessageSerializerV1(\n+            TypeSerializerRegistry.build().addCustomType(RelationIdentifier.class, new RelationIdentifierGraphBinarySerializer()).create());\n+        assertRelationIdentifier(serializer);\n+    }\n+\n+    @Test\n+    public void shouldSerializeViaIoRegistry() throws IOException {\n+        final GraphBinaryMessageSerializerV1 serializer = new GraphBinaryMessageSerializerV1();\n+        final Map<String,Object> config = new HashMap<>();\n+        config.put(TOKEN_IO_REGISTRIES, Collections.singletonList(JanusGraphIoRegistry.class.getName()));\n+        serializer.configure(config, Collections.emptyMap());\n+\n+        assertRelationIdentifier(serializer);\n+    }\n+\n+    @Test\n+    public void readValueAndWriteValueShouldBeSymmetric() throws IOException {\n+        final TypeSerializerRegistry registry = TypeSerializerRegistry.build()\n+            .addCustomType(RelationIdentifier.class, new RelationIdentifierGraphBinarySerializer()).create();\n+        final GraphBinaryReader reader = new GraphBinaryReader(registry);\n+        final GraphBinaryWriter writer = new GraphBinaryWriter(registry);\n+\n+        final RelationIdentifier relationIdentifier = createRelationIdentifier();\n+\n+        for (boolean nullable: new boolean[] { true, false }) {\n+            final Buffer buffer = bufferFactory.create(allocator.buffer());\n+            writer.writeValue(relationIdentifier, buffer, nullable);\n+            final RelationIdentifier actual = reader.readValue(buffer, RelationIdentifier.class, nullable);\n+\n+            assertEquals(actual.toString(), relationIdentifier.toString());\n+            buffer.release();\n+        }\n+    }\n+\n+    @NotNull\n+    private RelationIdentifier createRelationIdentifier() {\n+        Random random = new Random();\n+        return new RelationIdentifier(random.nextInt(1000), random.nextInt(1000), random.nextInt(1000), random.nextInt(1000));", "originalCommit": "8fbab2a9b94b31994d8a10f48bf96f14d672a63f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE3NjcxMQ==", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#discussion_r406176711", "bodyText": "Don't you think that it would be a good idea to test all geoshapes like this? I know that you didn't add any specific logic for the individual shapes, but I think we should make sure that everyone of them actually works.", "author": "FlorianHockmann", "createdAt": "2020-04-09T12:43:52Z", "path": "janusgraph-driver/src/test/java/org/janusgraph/graphdb/tinkerpop/io/binary/GeoshapeGraphBinarySerializerTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.tinkerpop.io.binary;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import org.apache.tinkerpop.gremlin.driver.message.ResponseMessage;\n+import org.apache.tinkerpop.gremlin.driver.ser.GraphBinaryMessageSerializerV1;\n+import org.apache.tinkerpop.gremlin.driver.ser.NettyBufferFactory;\n+import org.apache.tinkerpop.gremlin.structure.io.Buffer;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.GraphBinaryReader;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.GraphBinaryWriter;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.TypeSerializerRegistry;\n+import org.janusgraph.core.attribute.Geoshape;\n+import org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.util.*;\n+\n+import static org.apache.tinkerpop.gremlin.driver.ser.AbstractMessageSerializer.TOKEN_IO_REGISTRIES;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class GeoshapeGraphBinarySerializerTest {\n+    private static final ByteBufAllocator allocator = ByteBufAllocator.DEFAULT;\n+    private static final NettyBufferFactory bufferFactory = new NettyBufferFactory();\n+\n+    @Test\n+    public void shouldCustomSerialization() throws IOException {\n+        final GraphBinaryMessageSerializerV1 serializer = new GraphBinaryMessageSerializerV1(\n+            TypeSerializerRegistry.build().addCustomType(Geoshape.class, new GeoshapeGraphBinarySerializer()).create());\n+\n+        assertPoint(serializer);", "originalCommit": "dfb96894b77bc80d04f610c6bf91e23b79bfc92d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE3NzY2OA==", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#discussion_r406177668", "bodyText": "(nitpick) I would use one test per shape as each test should only test one thing in my opinion. That makes it easier to spot directly what is not working if a test fails. If this test fails in assertPoint, we won't know whether geoshape serialization is broken completely or only for points.", "author": "FlorianHockmann", "createdAt": "2020-04-09T12:45:37Z", "path": "janusgraph-driver/src/test/java/org/janusgraph/graphdb/tinkerpop/io/binary/GeoshapeGraphBinarySerializerTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.tinkerpop.io.binary;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import org.apache.tinkerpop.gremlin.driver.message.ResponseMessage;\n+import org.apache.tinkerpop.gremlin.driver.ser.GraphBinaryMessageSerializerV1;\n+import org.apache.tinkerpop.gremlin.driver.ser.NettyBufferFactory;\n+import org.apache.tinkerpop.gremlin.structure.io.Buffer;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.GraphBinaryReader;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.GraphBinaryWriter;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.TypeSerializerRegistry;\n+import org.janusgraph.core.attribute.Geoshape;\n+import org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.util.*;\n+\n+import static org.apache.tinkerpop.gremlin.driver.ser.AbstractMessageSerializer.TOKEN_IO_REGISTRIES;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class GeoshapeGraphBinarySerializerTest {\n+    private static final ByteBufAllocator allocator = ByteBufAllocator.DEFAULT;\n+    private static final NettyBufferFactory bufferFactory = new NettyBufferFactory();\n+\n+    @Test\n+    public void shouldCustomSerialization() throws IOException {\n+        final GraphBinaryMessageSerializerV1 serializer = new GraphBinaryMessageSerializerV1(\n+            TypeSerializerRegistry.build().addCustomType(Geoshape.class, new GeoshapeGraphBinarySerializer()).create());\n+\n+        assertPoint(serializer);\n+        assertCircle(serializer);", "originalCommit": "dfb96894b77bc80d04f610c6bf91e23b79bfc92d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMDg2MA==", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#discussion_r406210860", "bodyText": "I think it would be good to have some exception message explaining that an unsupported predicate name was used and that also includes that predicate name.", "author": "FlorianHockmann", "createdAt": "2020-04-09T13:39:04Z", "path": "janusgraph-driver/src/main/java/org/janusgraph/graphdb/tinkerpop/JanusGraphPSerializer.java", "diffHunk": "@@ -129,9 +74,7 @@ public static P createPredicateWithValue(String predicate, Object value) throws\n             case \"textRegex\":\n                 return Text.textRegex(value);\n             default:\n-                return (P) P.class.getMethod(predicate, Object.class).invoke(null, value);\n-            }\n+                throw new UnsupportedOperationException();", "originalCommit": "dfb96894b77bc80d04f610c6bf91e23b79bfc92d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxODYzNw==", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#discussion_r406218637", "bodyText": "Is the problem here that the serialization is not compatible with the current janusgraph/janusgraph:latest image from Docker Hub? Do you mean that with this note in the release notes?\n\nGraphSON and Gryo Serialization has changed so both version need to be aligned\n\nIf this breaks serialization completely with all versions <0.6.0, then we definitely need a bigger warning in the release notes.\nApart from that, can't we fix this here by building the image directly during the build for these tests?", "author": "FlorianHockmann", "createdAt": "2020-04-09T13:50:33Z", "path": "janusgraph-driver/src/test/java/org/janusgraph/graphdb/tinkerpop/JanusGraphSerializerBaseIT.java", "diffHunk": "@@ -91,6 +92,7 @@ public void testRelationIdentifier(TestInfo testInfo) {\n     }\n \n     @Test\n+    @Disabled(\"JanusGraphPredicate serialization won't work an older version of JanusGraph.\")", "originalCommit": "dfb96894b77bc80d04f610c6bf91e23b79bfc92d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwNTYxMQ==", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#discussion_r406705611", "bodyText": "If this breaks serialization completely with all versions <0.6.0, then we definitely need a bigger warning in the release notes.\n\nyes\n\nApart from that, can't we fix this here by building the image directly during the build for these tests?\n\nWould be a good idea. I don't want to add this in the current PR.", "author": "farodin91", "createdAt": "2020-04-10T10:44:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxODYzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE1NjY3NA==", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#discussion_r408156674", "bodyText": "Would be a good idea. I don't want to add this in the current PR.\n\nMakes sense. We should then only remember to activate this test again after the release of 0.6.0. Maybe we simply create a GitHub issue and tag it for 0.6.1 (which we can then resolve with a CTR commit as it only removes this line)?", "author": "FlorianHockmann", "createdAt": "2020-04-14T13:57:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxODYzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIyMTM2Mg==", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#discussion_r406221362", "bodyText": "geoshape should have a more generic name, like predicate for example, as you also use this to test text predicates.", "author": "FlorianHockmann", "createdAt": "2020-04-09T13:54:22Z", "path": "janusgraph-driver/src/test/java/org/janusgraph/graphdb/tinkerpop/io/binary/JanusGraphPGraphBinarySerializerTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.tinkerpop.io.binary;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import org.apache.tinkerpop.gremlin.driver.message.ResponseMessage;\n+import org.apache.tinkerpop.gremlin.driver.ser.GraphBinaryMessageSerializerV1;\n+import org.apache.tinkerpop.gremlin.driver.ser.NettyBufferFactory;\n+import org.apache.tinkerpop.gremlin.structure.io.Buffer;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.GraphBinaryReader;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.GraphBinaryWriter;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.TypeSerializerRegistry;\n+import org.janusgraph.core.attribute.Geo;\n+import org.janusgraph.core.attribute.Geoshape;\n+import org.janusgraph.graphdb.tinkerpop.io.JanusGraphP;\n+import org.janusgraph.core.attribute.Text;\n+import org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.apache.tinkerpop.gremlin.driver.ser.AbstractMessageSerializer.TOKEN_IO_REGISTRIES;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class JanusGraphPGraphBinarySerializerTest {\n+\n+    private static final ByteBufAllocator allocator = ByteBufAllocator.DEFAULT;\n+    private static final NettyBufferFactory bufferFactory = new NettyBufferFactory();\n+\n+    @Test\n+    public void shouldCustomSerialization() throws IOException {\n+        final GraphBinaryMessageSerializerV1 serializer = new GraphBinaryMessageSerializerV1(\n+            TypeSerializerRegistry.build()\n+                .addCustomType(JanusGraphP.class, new JanusGraphPBinarySerializer())\n+                .addCustomType(Geoshape.class, new GeoshapeGraphBinarySerializer())\n+                .create());\n+\n+        assertTextContains(serializer);\n+        assertGeoIntersect(serializer);\n+    }\n+\n+    @Test\n+    public void shouldSerializePersonViaIoRegistry() throws IOException {\n+        final GraphBinaryMessageSerializerV1 serializer = new GraphBinaryMessageSerializerV1();\n+        final Map<String, Object> config = new HashMap<>();\n+        config.put(TOKEN_IO_REGISTRIES, Collections.singletonList(JanusGraphIoRegistry.class.getName()));\n+        serializer.configure(config, Collections.emptyMap());\n+\n+        assertTextContains(serializer);\n+        assertGeoIntersect(serializer);\n+    }\n+\n+    @Test\n+    public void readValueAndWriteValueShouldBeSymmetric() throws IOException {\n+        final TypeSerializerRegistry registry = TypeSerializerRegistry.build()\n+            .addCustomType(JanusGraphP.class, new JanusGraphPBinarySerializer()).create();\n+        final GraphBinaryReader reader = new GraphBinaryReader(registry);\n+        final GraphBinaryWriter writer = new GraphBinaryWriter(registry);\n+\n+        final JanusGraphP relationIdentifier = Text.textContains(\"test\");\n+\n+        for (boolean nullable : new boolean[]{true, false}) {\n+            final Buffer buffer = bufferFactory.create(allocator.buffer());\n+            writer.writeValue(relationIdentifier, buffer, nullable);\n+            final JanusGraphP actual = reader.readValue(buffer, JanusGraphP.class, nullable);\n+\n+            assertEquals(actual.toString(), relationIdentifier.toString());\n+            buffer.release();\n+        }\n+    }\n+\n+    private void assertTextContains(final GraphBinaryMessageSerializerV1 serializer) throws IOException {\n+        final JanusGraphP janusGraphP = Text.textContains(\"test\");\n+        assertJanusGraphP(serializer, janusGraphP);\n+    }\n+\n+    private void assertGeoIntersect(final GraphBinaryMessageSerializerV1 serializer) throws IOException {\n+        final JanusGraphP janusGraphP = Geo.geoIntersect(Geoshape.circle(37.97, 23.72, 50));\n+        assertJanusGraphP(serializer, janusGraphP);\n+    }\n+\n+    private void assertJanusGraphP(final GraphBinaryMessageSerializerV1 serializer, final JanusGraphP geoshape) throws IOException {", "originalCommit": "dfb96894b77bc80d04f610c6bf91e23b79bfc92d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIyMjIyNw==", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#discussion_r406222227", "bodyText": "(nitpick) Please also change the variable name here.", "author": "FlorianHockmann", "createdAt": "2020-04-09T13:55:30Z", "path": "janusgraph-driver/src/test/java/org/janusgraph/graphdb/tinkerpop/io/binary/JanusGraphPGraphBinarySerializerTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.tinkerpop.io.binary;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import org.apache.tinkerpop.gremlin.driver.message.ResponseMessage;\n+import org.apache.tinkerpop.gremlin.driver.ser.GraphBinaryMessageSerializerV1;\n+import org.apache.tinkerpop.gremlin.driver.ser.NettyBufferFactory;\n+import org.apache.tinkerpop.gremlin.structure.io.Buffer;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.GraphBinaryReader;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.GraphBinaryWriter;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.TypeSerializerRegistry;\n+import org.janusgraph.core.attribute.Geo;\n+import org.janusgraph.core.attribute.Geoshape;\n+import org.janusgraph.graphdb.tinkerpop.io.JanusGraphP;\n+import org.janusgraph.core.attribute.Text;\n+import org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.apache.tinkerpop.gremlin.driver.ser.AbstractMessageSerializer.TOKEN_IO_REGISTRIES;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class JanusGraphPGraphBinarySerializerTest {\n+\n+    private static final ByteBufAllocator allocator = ByteBufAllocator.DEFAULT;\n+    private static final NettyBufferFactory bufferFactory = new NettyBufferFactory();\n+\n+    @Test\n+    public void shouldCustomSerialization() throws IOException {\n+        final GraphBinaryMessageSerializerV1 serializer = new GraphBinaryMessageSerializerV1(\n+            TypeSerializerRegistry.build()\n+                .addCustomType(JanusGraphP.class, new JanusGraphPBinarySerializer())\n+                .addCustomType(Geoshape.class, new GeoshapeGraphBinarySerializer())\n+                .create());\n+\n+        assertTextContains(serializer);\n+        assertGeoIntersect(serializer);\n+    }\n+\n+    @Test\n+    public void shouldSerializePersonViaIoRegistry() throws IOException {\n+        final GraphBinaryMessageSerializerV1 serializer = new GraphBinaryMessageSerializerV1();\n+        final Map<String, Object> config = new HashMap<>();\n+        config.put(TOKEN_IO_REGISTRIES, Collections.singletonList(JanusGraphIoRegistry.class.getName()));\n+        serializer.configure(config, Collections.emptyMap());\n+\n+        assertTextContains(serializer);\n+        assertGeoIntersect(serializer);\n+    }\n+\n+    @Test\n+    public void readValueAndWriteValueShouldBeSymmetric() throws IOException {\n+        final TypeSerializerRegistry registry = TypeSerializerRegistry.build()\n+            .addCustomType(JanusGraphP.class, new JanusGraphPBinarySerializer()).create();\n+        final GraphBinaryReader reader = new GraphBinaryReader(registry);\n+        final GraphBinaryWriter writer = new GraphBinaryWriter(registry);\n+\n+        final JanusGraphP relationIdentifier = Text.textContains(\"test\");", "originalCommit": "dfb96894b77bc80d04f610c6bf91e23b79bfc92d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIyNzAzNA==", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#discussion_r406227034", "bodyText": "(nitpick) Again, please change the name of relationIdentifier.", "author": "FlorianHockmann", "createdAt": "2020-04-09T14:02:35Z", "path": "janusgraph-driver/src/main/java/org/janusgraph/graphdb/tinkerpop/io/graphson/JanusGraphSONModule.java", "diffHunk": "@@ -144,32 +145,46 @@ public RelationIdentifier createObject(Map data) {\n         }\n     }\n \n-    public static class JanusGraphPDeserializerV2d0 extends StdDeserializer<P> {\n+    public static class JanusGraphPSerializerV2d0 extends StdSerializer<JanusGraphP> {\n+        public JanusGraphPSerializerV2d0() {\n+            super(JanusGraphP.class);\n+        }\n \n-        public JanusGraphPDeserializerV2d0() {\n-            super(P.class);\n+        @Override\n+        public void serialize(final JanusGraphP relationIdentifier, final JsonGenerator jsonGenerator,", "originalCommit": "dfb96894b77bc80d04f610c6bf91e23b79bfc92d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8530f8812b1651abf4f98d5aa27a433819b35e9c", "url": "https://github.com/JanusGraph/janusgraph/commit/8530f8812b1651abf4f98d5aa27a433819b35e9c", "message": "review updates\n\nSigned-off-by: Jan Jansen <jan.jansen@gdata.de>", "committedDate": "2020-04-10T12:41:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE1NzU4NA==", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#discussion_r408157584", "bodyText": "That's really a nice way to test all these predicates :)", "author": "FlorianHockmann", "createdAt": "2020-04-14T13:58:21Z", "path": "janusgraph-driver/src/test/java/org/janusgraph/graphdb/tinkerpop/io/binary/JanusGraphPGraphBinarySerializerTest.java", "diffHunk": "@@ -44,65 +46,72 @@\n     private static final ByteBufAllocator allocator = ByteBufAllocator.DEFAULT;\n     private static final NettyBufferFactory bufferFactory = new NettyBufferFactory();\n \n-    @Test\n-    public void shouldCustomSerialization() throws IOException {\n+    private static Stream<JanusGraphP> janusGraphPProvider() {\n+        return Stream.of(", "originalCommit": "8530f8812b1651abf4f98d5aa27a433819b35e9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8332e8311f0e819cd6bb2856ef0c018158ee5c5c", "url": "https://github.com/JanusGraph/janusgraph/commit/8332e8311f0e819cd6bb2856ef0c018158ee5c5c", "message": "Add support for graph binary\n\nFixes #1564\n\nSigned-off-by: Jan Jansen <jan.jansen@gdata.de>", "committedDate": "2020-04-15T17:24:59Z", "type": "forcePushed"}, {"oid": "38d43f55331d3f110b821d873b447202f047398b", "url": "https://github.com/JanusGraph/janusgraph/commit/38d43f55331d3f110b821d873b447202f047398b", "message": "Add support for graph binary\n\nFixes #1564\n\nSigned-off-by: Jan Jansen <jan.jansen@gdata.de>", "committedDate": "2020-04-15T17:25:29Z", "type": "commit"}, {"oid": "38d43f55331d3f110b821d873b447202f047398b", "url": "https://github.com/JanusGraph/janusgraph/commit/38d43f55331d3f110b821d873b447202f047398b", "message": "Add support for graph binary\n\nFixes #1564\n\nSigned-off-by: Jan Jansen <jan.jansen@gdata.de>", "committedDate": "2020-04-15T17:25:29Z", "type": "forcePushed"}]}