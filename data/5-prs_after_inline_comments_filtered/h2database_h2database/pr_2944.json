{"pr_number": 2944, "pr_title": "Unicode identifiers and literals and fixes for comparison operations and long literals", "pr_createdAt": "2020-11-01T06:24:25Z", "pr_url": "https://github.com/h2database/h2database/pull/2944", "timeline": [{"oid": "b80ab4e21c50db33d9782cacfa7e60f8636d6442", "url": "https://github.com/h2database/h2database/commit/b80ab4e21c50db33d9782cacfa7e60f8636d6442", "message": "Refactor string literals parsing code", "committedDate": "2020-10-31T14:51:49Z", "type": "commit"}, {"oid": "eed9456644a1ee6d772e8e23d8a852671708dedc", "url": "https://github.com/h2database/h2database/commit/eed9456644a1ee6d772e8e23d8a852671708dedc", "message": "Add standard Unicode character string literals and identifiers", "committedDate": "2020-11-01T04:00:52Z", "type": "commit"}, {"oid": "47c328859efee5f7714b51f6b006646c96178b79", "url": "https://github.com/h2database/h2database/commit/47c328859efee5f7714b51f6b006646c96178b79", "message": "Prevent incorrect index conditions with incompatible ordering rules", "committedDate": "2020-11-01T05:50:14Z", "type": "commit"}, {"oid": "4e6fdc84acc60ded2d035bc790d3c3fb3f9b62e7", "url": "https://github.com/h2database/h2database/commit/4e6fdc84acc60ded2d035bc790d3c3fb3f9b62e7", "message": "Optimize Parser.readRawString() for common case", "committedDate": "2020-11-01T07:21:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYxMTc0Mg==", "url": "https://github.com/h2database/h2database/pull/2944#discussion_r515611742", "bodyText": "What about if col has type\nROW(VARCHAR, VARCHAR, INT)\nand query has type\nROW(VARCHAR, VARCHAR)\nthen the index would still be usable because the col ordering requirements are strictly a superset of the query ordering requirements\n?", "author": "grandinj", "createdAt": "2020-11-01T11:47:50Z", "path": "h2/src/main/org/h2/value/TypeInfo.java", "diffHunk": "@@ -824,6 +824,87 @@ private static boolean areComparable(TypeInfo t1, TypeInfo t2) {\n         return false;\n     }\n \n+    /**\n+     * Determines whether two specified types have the same ordering rules.\n+     *\n+     * @param t1\n+     *            first data type\n+     * @param t2\n+     *            second data type\n+     * @return whether types are comparable\n+     */\n+    public static boolean haveSameOrdering(TypeInfo t1, TypeInfo t2) {\n+        int vt1 = (t1 = t1.unwrapRow()).getValueType(), vt2 = (t2 = t2.unwrapRow()).getValueType();\n+        if (vt1 > vt2) {\n+            int vt = vt1;\n+            vt1 = vt2;\n+            vt2 = vt;\n+            TypeInfo t = t1;\n+            t1 = t2;\n+            t2 = t;\n+        }\n+        if (vt1 <= Value.NULL) {\n+            return true;\n+        }\n+        if (vt1 == vt2) {\n+            switch (vt1) {\n+            case Value.ARRAY:\n+                return haveSameOrdering((TypeInfo) t1.getExtTypeInfo(), (TypeInfo) t2.getExtTypeInfo());\n+            case Value.ROW: {\n+                Set<Entry<String, TypeInfo>> f1 = ((ExtTypeInfoRow) t1.getExtTypeInfo()).getFields();\n+                Set<Entry<String, TypeInfo>> f2 = ((ExtTypeInfoRow) t2.getExtTypeInfo()).getFields();\n+                int degree = f1.size();\n+                if (f2.size() != degree) {\n+                    return false;\n+                }", "originalCommit": "47c328859efee5f7714b51f6b006646c96178b79", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYxMjU4Mw==", "url": "https://github.com/h2database/h2database/pull/2944#discussion_r515612583", "bodyText": "Row values of different degree can't be compared with each other. This condition exists here only for safety, such comparisons are normally rejected earlier.", "author": "katzyn", "createdAt": "2020-11-01T11:55:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYxMTc0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYxMzMzOQ==", "url": "https://github.com/h2database/h2database/pull/2944#discussion_r515613339", "bodyText": "Only arrays with different cardinality are comparable (if types of elements are comparable).", "author": "katzyn", "createdAt": "2020-11-01T12:03:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYxMTc0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYxMTkyMg==", "url": "https://github.com/h2database/h2database/pull/2944#discussion_r515611922", "bodyText": "might possibly be more efficient here to construct the StringBuilder with size\n   result.size() + sqlCommand.size()\n\nto avoid some re-allocations", "author": "grandinj", "createdAt": "2020-11-01T11:49:46Z", "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -6360,15 +6360,23 @@ private void readString(int i, char[] chars, int[] types) {\n     }\n \n     private String readRawString(int i, char[] chars, int[] types) {\n-        StringBuilder result = new StringBuilder();\n+        String result = null;\n+        StringBuilder builder = null;\n         for (;; i++) {\n             boolean next = false;\n             for (;; i++) {\n                 int begin = i;\n                 while (chars[i] != '\\'') {\n                     i++;\n                 }\n-                result.append(sqlCommand, next ? begin - 1 : begin, i);\n+                if (result == null) {\n+                    result = sqlCommand.substring(begin, i);\n+                } else {\n+                    if (builder == null) {\n+                        builder = new StringBuilder(result);", "originalCommit": "4e6fdc84acc60ded2d035bc790d3c3fb3f9b62e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYxMzIxOQ==", "url": "https://github.com/h2database/h2database/pull/2944#discussion_r515613219", "bodyText": "That's too much. new StringBuilder(String) allocates space for 16 additional characters, so the next addition in many cases doesn't create a reallocation.\nActually these lines of core aren't executed for the most of character string literals. Literals with many parts ('something ' 'something ' 'something') are rarely used, many programmers and DBAs don't even know that they exists, and only few literals have ' character in them (' '' ').", "author": "katzyn", "createdAt": "2020-11-01T12:01:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYxMTkyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYxMzc3MA==", "url": "https://github.com/h2database/h2database/pull/2944#discussion_r515613770", "bodyText": "I thought about result.size() + i - begin + 1 or something like it, but if string has one ', it can have more, and we also can find a multi-part literal. So such optimization also doesn't look good, that's why I decided to use the default behavior of StringBuilder.", "author": "katzyn", "createdAt": "2020-11-01T12:07:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYxMTkyMg=="}], "type": "inlineReview"}]}