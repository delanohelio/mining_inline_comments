{"pr_number": 308, "pr_title": "ApproximateWayCheck", "pr_createdAt": "2020-06-08T19:19:19Z", "pr_url": "https://github.com/osmlab/atlas-checks/pull/308", "timeline": [{"oid": "7f16d0d9bee3ad5f38eb173cdf378830cbabdcde", "url": "https://github.com/osmlab/atlas-checks/commit/7f16d0d9bee3ad5f38eb173cdf378830cbabdcde", "message": "Added check", "committedDate": "2020-04-23T17:53:20Z", "type": "commit"}, {"oid": "0fefac1674d8d52bb08173410bc25ce3375e8dfa", "url": "https://github.com/osmlab/atlas-checks/commit/0fefac1674d8d52bb08173410bc25ce3375e8dfa", "message": "cleanup", "committedDate": "2020-04-23T19:40:01Z", "type": "commit"}, {"oid": "2b8ffcde537e2ec63975280921c38de13089cffa", "url": "https://github.com/osmlab/atlas-checks/commit/2b8ffcde537e2ec63975280921c38de13089cffa", "message": "add to config", "committedDate": "2020-04-23T19:40:15Z", "type": "commit"}, {"oid": "a9bcce17c59610d5755d2681517b668ec6488c11", "url": "https://github.com/osmlab/atlas-checks/commit/a9bcce17c59610d5755d2681517b668ec6488c11", "message": "Testing config through git", "committedDate": "2020-05-04T19:45:32Z", "type": "commit"}, {"oid": "f8385c79abd5cb3d7c1a7fed49840b6e8cf42c0f", "url": "https://github.com/osmlab/atlas-checks/commit/f8385c79abd5cb3d7c1a7fed49840b6e8cf42c0f", "message": "enable all by default", "committedDate": "2020-06-08T18:58:49Z", "type": "commit"}, {"oid": "17f685f7c895042cf65681b23441c937c1e8159e", "url": "https://github.com/osmlab/atlas-checks/commit/17f685f7c895042cf65681b23441c937c1e8159e", "message": "adding missing config", "committedDate": "2020-06-08T19:18:08Z", "type": "commit"}, {"oid": "c86cd9d4b48e124f133be5312e20c699fdb219db", "url": "https://github.com/osmlab/atlas-checks/commit/c86cd9d4b48e124f133be5312e20c699fdb219db", "message": "fixing for pr checks", "committedDate": "2020-06-09T16:29:06Z", "type": "commit"}, {"oid": "11b8131a93bb32c9e3866d05925b37895b892e74", "url": "https://github.com/osmlab/atlas-checks/commit/11b8131a93bb32c9e3866d05925b37895b892e74", "message": "auto fixes", "committedDate": "2020-06-09T16:38:05Z", "type": "commit"}, {"oid": "d7de8103333b91712299eacc713751c6d5765b6d", "url": "https://github.com/osmlab/atlas-checks/commit/d7de8103333b91712299eacc713751c6d5765b6d", "message": "Added tests", "committedDate": "2020-06-11T21:32:45Z", "type": "commit"}, {"oid": "871f806236f1201bfd9c650e107b2e3a077562c6", "url": "https://github.com/osmlab/atlas-checks/commit/871f806236f1201bfd9c650e107b2e3a077562c6", "message": "added to docs", "committedDate": "2020-06-24T16:55:55Z", "type": "commit"}, {"oid": "f39d7b6539aa1ccc03b0d91a7c848ed5ae118a02", "url": "https://github.com/osmlab/atlas-checks/commit/f39d7b6539aa1ccc03b0d91a7c848ed5ae118a02", "message": "added challenge object", "committedDate": "2020-06-24T17:14:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA1NDE5Mg==", "url": "https://github.com/osmlab/atlas-checks/pull/308#discussion_r445054192", "bodyText": "nit: Please avoid one letter variables.", "author": "sayas01", "createdAt": "2020-06-24T17:25:16Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/edges/ApproximateWayCheck.java", "diffHunk": "@@ -0,0 +1,198 @@\n+package org.openstreetmap.atlas.checks.validation.linear.edges;\n+\n+import static java.lang.Math.pow;\n+import static java.lang.Math.sqrt;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.OptionalDouble;\n+import java.util.stream.IntStream;\n+\n+import org.openstreetmap.atlas.checks.atlas.predicates.TypePredicates;\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.Segment;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.tags.HighwayTag;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * This check flags edges that deviate from the assumed curve of a road by at least\n+ * {@value DEVIATION_MINIMUM_METERS_DEFAULT} meters.\n+ *\n+ * @author v-brjor\n+ */\n+public class ApproximateWayCheck extends BaseCheck<Long>\n+{\n+\n+    private static final long serialVersionUID = 1L;\n+    private static final String EDGE_DEVIATION_INSTRUCTION = \"Way {0,number,#} deviates by {1,number,#} meters\";\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Collections\n+            .singletonList(EDGE_DEVIATION_INSTRUCTION);\n+    public static final double DEVIATION_MINIMUM_METERS_DEFAULT = 35.0;\n+    private static final String HIGHWAY_MINIMUM_DEFAULT = HighwayTag.SERVICE.toString();\n+    public static final double MINIMUM_ANGLE_DEFAULT = 100.0;\n+    public static final double BEZIER_STEP_DEFAULT = 0.01;\n+\n+    private final Distance minimumDeviation;\n+    private final HighwayTag highwayMinimum;\n+    private final double minimumAngle;\n+    private final double bezierStep;\n+\n+    /**\n+     * The default constructor that must be supplied. The Atlas Checks framework will generate the\n+     * checks with this constructor, supplying a configuration that can be used to adjust any\n+     * parameters that the check uses during operation.\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public ApproximateWayCheck(final Configuration configuration)\n+    {\n+        super(configuration);\n+        this.minimumDeviation = configurationValue(configuration, \"deviation.minimum.meters\",\n+                DEVIATION_MINIMUM_METERS_DEFAULT, Distance::meters);\n+        final String highwayType = this.configurationValue(configuration, \"highway.minimum\",\n+                HIGHWAY_MINIMUM_DEFAULT);\n+        this.highwayMinimum = Enum.valueOf(HighwayTag.class, highwayType.toUpperCase());\n+        this.minimumAngle = configurationValue(configuration, \"angle.minimum\",\n+                MINIMUM_ANGLE_DEFAULT);\n+        this.bezierStep = configurationValue(configuration, \"bezierStep\", BEZIER_STEP_DEFAULT);\n+    }\n+\n+    /**\n+     * This function will validate if the supplied atlas object is valid for the check.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return {@code true} if this object should be checked\n+     */\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        return TypePredicates.IS_EDGE.test(object) && ((Edge) object).isMasterEdge()\n+                && HighwayTag.isCarNavigableHighway(object) && isMinimumHighwayType(object);\n+    }\n+\n+    /**\n+     * This is the actual function that will check to see whether the object needs to be flagged. A\n+     * majority of flagged edges were those that contained correctly mapped ~90 degree angles, we\n+     * also don't want to worry about sharp angles as those are flagged in {@link SharpAngleCheck}\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return an optional {@link CheckFlag} object that\n+     */\n+    @Override\n+    protected Optional<CheckFlag> flag(final AtlasObject object)\n+    {\n+        final List<Segment> segments = ((Edge) object).asPolyLine().segments();\n+\n+        if (segments.size() < 2)\n+        {\n+            return Optional.empty();\n+        }\n+\n+        final OptionalDouble max = IntStream.range(0, segments.size() - 1).mapToDouble(index ->\n+        {\n+            final Segment seg1 = segments.get(index);\n+            final Segment seg2 = segments.get(index + 1);\n+            if (findAngle(seg1, seg2) < minimumAngle)\n+            {\n+                return 0;\n+            }\n+            return quadraticBezier(seg1.first(), seg2.first(), seg2.end());\n+        }).reduce(Math::max);\n+\n+        if (max.isPresent() && max.getAsDouble() > this.minimumDeviation.asMeters())\n+        {\n+            return Optional.of(createFlag(object,\n+                    this.getLocalizedInstruction(0, object.getOsmIdentifier(), max.getAsDouble())));\n+        }\n+\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    protected List<String> getFallbackInstructions()\n+    {\n+        return FALLBACK_INSTRUCTIONS;\n+    }\n+\n+    private double distance(final double startX, final double startY, final double endX,\n+            final double endY)\n+    {\n+        return sqrt(pow(endX - startX, 2) + pow(endY - startY, 2));\n+    }\n+\n+    /**\n+     * Calculates the angle between the two segments.\n+     */\n+    private double findAngle(final Segment seg1, final Segment seg2)\n+    {\n+        final double aLength = seg1.length().asMeters();\n+        final double bLength = seg2.length().asMeters();\n+        final double cLength = new Segment(seg1.start(), seg2.end()).length().asMeters();\n+        return Math.toDegrees(Math.acos(\n+                (pow(aLength, 2) + pow(bLength, 2) - pow(cLength, 2)) / (2 * aLength * bLength)));\n+    }\n+\n+    /**\n+     * Checks if highway tag of given {@link AtlasObject} is of greater or equal priority than the\n+     * minimum highway type given in the configurable. If no value is given in configurable, the\n+     * default highway type of \"SERVICE\" will be set as minimum.\n+     *\n+     * @param object\n+     *            an {@link AtlasObject}\n+     * @return {@code true} if the highway tag of this object is greater than or equal to the\n+     *         minimum type\n+     */\n+    private boolean isMinimumHighwayType(final AtlasObject object)\n+    {\n+        final Optional<HighwayTag> highwayTagOfObject = HighwayTag.highwayTag(object);\n+        return highwayTagOfObject.isPresent()\n+                && highwayTagOfObject.get().isMoreImportantThanOrEqualTo(this.highwayMinimum);\n+    }\n+\n+    /**\n+     * Constructs a quadratic bezier curve and finds the closest distance of the curve to the\n+     * anchor.\n+     * \n+     * @param start\n+     *            start point of bezier curve\n+     * @param anchor\n+     *            anchor for the curve\n+     * @param end\n+     *            end point of bezier curve\n+     * @return distance in meters from closest point on bezier curve\n+     */\n+    private double quadraticBezier(final Location start, final Location anchor, final Location end)\n+    {\n+        final double startX = start.getLongitude().onEarth().asMeters();\n+        final double startY = start.getLatitude().onEarth().asMeters();\n+        final double anchorX = anchor.getLongitude().onEarth().asMeters();\n+        final double anchorY = anchor.getLatitude().onEarth().asMeters();\n+        final double endX = end.getLongitude().onEarth().asMeters();\n+        final double endY = end.getLatitude().onEarth().asMeters();\n+\n+        double min = Double.POSITIVE_INFINITY;\n+        for (double i = 0; i <= 1; i += bezierStep)", "originalCommit": "d7de8103333b91712299eacc713751c6d5765b6d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "128e8295641156e2c0fda3ba4d99ac4fa7213283", "url": "https://github.com/osmlab/atlas-checks/commit/128e8295641156e2c0fda3ba4d99ac4fa7213283", "message": "single letter variable", "committedDate": "2020-06-24T17:35:00Z", "type": "commit"}, {"oid": "d93f88da752c158f9060a8f403b929f9ae87bb01", "url": "https://github.com/osmlab/atlas-checks/commit/d93f88da752c158f9060a8f403b929f9ae87bb01", "message": "Improved False Positive rate", "committedDate": "2020-06-30T22:07:55Z", "type": "commit"}, {"oid": "2c952e10a816a7300412f4113f8ff3b2dd070ef4", "url": "https://github.com/osmlab/atlas-checks/commit/2c952e10a816a7300412f4113f8ff3b2dd070ef4", "message": "Improved doc", "committedDate": "2020-07-06T21:27:11Z", "type": "commit"}, {"oid": "2ca85e8112e81df733f3960fa2e19676690b96db", "url": "https://github.com/osmlab/atlas-checks/commit/2ca85e8112e81df733f3960fa2e19676690b96db", "message": "Added singleSegmentTest. Removed rightAngleTest", "committedDate": "2020-07-06T21:35:48Z", "type": "commit"}, {"oid": "7ef47efed208a1b3967e853697d8f80e4786f5a9", "url": "https://github.com/osmlab/atlas-checks/commit/7ef47efed208a1b3967e853697d8f80e4786f5a9", "message": "fixing for intergrationTest", "committedDate": "2020-07-06T21:55:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwNjUwMw==", "url": "https://github.com/osmlab/atlas-checks/pull/308#discussion_r450506503", "bodyText": "Please regenerate the UID.", "author": "sayas01", "createdAt": "2020-07-06T22:12:29Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/edges/ApproximateWayCheck.java", "diffHunk": "@@ -0,0 +1,216 @@\n+package org.openstreetmap.atlas.checks.validation.linear.edges;\n+\n+import static java.lang.Math.pow;\n+import static java.lang.Math.sqrt;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.IntStream;\n+\n+import org.openstreetmap.atlas.checks.atlas.predicates.TypePredicates;\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.Segment;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.tags.HighwayTag;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * This check flags edges that deviate from the assumed curve of a road by at least\n+ * {@value DEVIATION_MINIMUM_LENGTH_DEFAULT} meters.\n+ *\n+ * @author v-brjor\n+ */\n+public class ApproximateWayCheck extends BaseCheck<Long>\n+{\n+\n+    private static final long serialVersionUID = 1L;", "originalCommit": "7ef47efed208a1b3967e853697d8f80e4786f5a9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwNzc4OA==", "url": "https://github.com/osmlab/atlas-checks/pull/308#discussion_r450507788", "bodyText": "The instruction could be more descriptive like \"Way {0,number,#} is crude.  Add more nodes/rearrange current nodes\".", "author": "sayas01", "createdAt": "2020-07-06T22:16:04Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/edges/ApproximateWayCheck.java", "diffHunk": "@@ -0,0 +1,216 @@\n+package org.openstreetmap.atlas.checks.validation.linear.edges;\n+\n+import static java.lang.Math.pow;\n+import static java.lang.Math.sqrt;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.IntStream;\n+\n+import org.openstreetmap.atlas.checks.atlas.predicates.TypePredicates;\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.Segment;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.tags.HighwayTag;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * This check flags edges that deviate from the assumed curve of a road by at least\n+ * {@value DEVIATION_MINIMUM_LENGTH_DEFAULT} meters.\n+ *\n+ * @author v-brjor\n+ */\n+public class ApproximateWayCheck extends BaseCheck<Long>\n+{\n+\n+    private static final long serialVersionUID = 1L;\n+    private static final String EDGE_DEVIATION_INSTRUCTION = \"Way {0,number,#} is crude\";", "originalCommit": "7ef47efed208a1b3967e853697d8f80e4786f5a9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7522bcdc704c155a7cf4e4d7ea47b1bb239ef3e7", "url": "https://github.com/osmlab/atlas-checks/commit/7522bcdc704c155a7cf4e4d7ea47b1bb239ef3e7", "message": "generated serialVersionUID with Intellij", "committedDate": "2020-07-06T22:23:53Z", "type": "commit"}, {"oid": "12315ed98f0a5e6b536845ef8d34e262f7f9520b", "url": "https://github.com/osmlab/atlas-checks/commit/12315ed98f0a5e6b536845ef8d34e262f7f9520b", "message": "more descriptive instructions", "committedDate": "2020-07-07T15:26:39Z", "type": "commit"}, {"oid": "a1e69e9c146bff1f3a127ed1c28730bb101ce575", "url": "https://github.com/osmlab/atlas-checks/commit/a1e69e9c146bff1f3a127ed1c28730bb101ce575", "message": "Updated doc, removed source code", "committedDate": "2020-07-08T19:20:19Z", "type": "commit"}, {"oid": "c50e8285217a37d101826d6c965a6eb5ff8ee0c7", "url": "https://github.com/osmlab/atlas-checks/commit/c50e8285217a37d101826d6c965a6eb5ff8ee0c7", "message": "typo", "committedDate": "2020-07-08T19:23:18Z", "type": "commit"}]}