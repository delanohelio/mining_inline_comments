{"pr_number": 8898, "pr_title": "Agent server comms over json", "pr_createdAt": "2020-12-17T04:23:04Z", "pr_url": "https://github.com/gocd/gocd/pull/8898", "timeline": [{"oid": "04689df606fbc3c3d2b3283f53a8235c93f318af", "url": "https://github.com/gocd/gocd/commit/04689df606fbc3c3d2b3283f53a8235c93f318af", "message": "Introduced internal remoting API for agent-server comms #000\n\n* These are JSON based endpoints, this is in direction of moving\n  agent-server away from RMI", "committedDate": "2020-12-17T04:36:07Z", "type": "forcePushed"}, {"oid": "633d8941edf48c8541a5354c30c0979faf78b991", "url": "https://github.com/gocd/gocd/commit/633d8941edf48c8541a5354c30c0979faf78b991", "message": "Introduced internal remoting API for agent-server comms #000\n\n* These are JSON based endpoints, this is in direction of moving\n  agent-server away from RMI", "committedDate": "2020-12-17T07:22:58Z", "type": "forcePushed"}, {"oid": "9b74314a09f067f0ff050916772939120b95c408", "url": "https://github.com/gocd/gocd/commit/9b74314a09f067f0ff050916772939120b95c408", "message": "Introduced internal remoting API for agent-server comms #000\n\n* These are JSON based endpoints, this is in direction of moving\n  agent-server away from RMI", "committedDate": "2020-12-17T08:03:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM0MDY3OA==", "url": "https://github.com/gocd/gocd/pull/8898#discussion_r545340678", "bodyText": "@maheshp If I\u2019m not mistaken, this returns raw text? For consistency, do you think we should quote it to be valid JSON?", "author": "marques-work", "createdAt": "2020-12-17T19:17:51Z", "path": "api/api-internal-agent-v1/src/main/java/com/thoughtworks/go/apiv1/internalagent/InternalAgentControllerV1.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 ThoughtWorks, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.thoughtworks.go.apiv1.internalagent;\n+\n+import com.thoughtworks.go.api.ApiController;\n+import com.thoughtworks.go.api.ApiVersion;\n+import com.thoughtworks.go.apiv1.internalagent.representers.*;\n+import com.thoughtworks.go.remote.AgentInstruction;\n+import com.thoughtworks.go.remote.request.*;\n+import com.thoughtworks.go.remote.work.Work;\n+import com.thoughtworks.go.server.messaging.BuildRepositoryMessageProducer;\n+import com.thoughtworks.go.spark.Routes;\n+import com.thoughtworks.go.spark.spring.SparkSpringController;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import spark.Request;\n+import spark.Response;\n+\n+import static com.thoughtworks.go.api.util.HaltApiResponses.haltBecauseForbidden;\n+import static java.lang.String.valueOf;\n+import static spark.Spark.*;\n+\n+@Component\n+public class InternalAgentControllerV1 extends ApiController implements SparkSpringController {\n+    private final BuildRepositoryMessageProducer buildRepositoryMessageProducer;\n+\n+    @Autowired\n+    public InternalAgentControllerV1(BuildRepositoryMessageProducer buildRepositoryMessageProducer) {\n+        super(ApiVersion.v1);\n+        this.buildRepositoryMessageProducer = buildRepositoryMessageProducer;\n+    }\n+\n+    @Override\n+    public String controllerBasePath() {\n+        return Routes.InternalAgent.BASE;\n+    }\n+\n+    @Override\n+    public void setupRoutes() {\n+        path(controllerBasePath(), () -> {\n+            before(\"\", mimeType, this::setContentType);\n+            before(\"/*\", mimeType, this::setContentType);\n+\n+            before(\"\", mimeType, this::verifyContentType);\n+            before(\"/*\", mimeType, this::verifyContentType);\n+\n+            post(Routes.InternalAgent.PING, mimeType, this::ping);\n+            post(Routes.InternalAgent.REPORT_CURRENT_STATUS, mimeType, this::reportCurrentStatus);\n+            post(Routes.InternalAgent.REPORT_COMPLETING, mimeType, this::reportCompleting);\n+            post(Routes.InternalAgent.REPORT_COMPLETED, mimeType, this::reportCompleted);\n+            post(Routes.InternalAgent.IS_IGNORED, mimeType, this::isIgnored);\n+            post(Routes.InternalAgent.GET_COOKIE, mimeType, this::getCookie);\n+            post(Routes.InternalAgent.GET_WORK, mimeType, this::getWork);\n+        });\n+    }\n+\n+    public String ping(Request request, Response response) {\n+        PingRequest pingRequest = PingRequestRepresenter.fromJSON(request.body());\n+        ensureAgentIsMakingARequestForItself(pingRequest, request);\n+\n+        AgentInstruction agentInstruction = buildRepositoryMessageProducer.ping(pingRequest.getAgentRuntimeInfo());\n+\n+        return AgentInstructionRepresenter.toJSON(agentInstruction);\n+    }\n+\n+    public String reportCurrentStatus(Request request, Response response) {\n+        ReportCurrentStatusRequest req = ReportCurrentStatusRequestRepresenter.fromJSON(request.body());\n+        ensureAgentIsMakingARequestForItself(req, request);\n+\n+        buildRepositoryMessageProducer.reportCurrentStatus(req.getAgentRuntimeInfo(), req.getJobIdentifier(),\n+                req.getJobState());\n+\n+        return NOTHING;\n+    }\n+\n+    public String reportCompleting(Request request, Response response) {\n+        ReportCompleteStatusRequest req = ReportCompleteStatusRequestRepresenter.fromJSON(request.body());\n+        ensureAgentIsMakingARequestForItself(req, request);\n+\n+        buildRepositoryMessageProducer.reportCompleting(req.getAgentRuntimeInfo(), req.getJobIdentifier(),\n+                req.getJobResult());\n+\n+        return NOTHING;\n+    }\n+\n+    public String reportCompleted(Request request, Response response) {\n+        ReportCompleteStatusRequest req = ReportCompleteStatusRequestRepresenter.fromJSON(request.body());\n+        ensureAgentIsMakingARequestForItself(req, request);\n+\n+        buildRepositoryMessageProducer.reportCompleted(req.getAgentRuntimeInfo(), req.getJobIdentifier(),\n+                req.getJobResult());\n+\n+        return NOTHING;\n+    }\n+\n+    public String isIgnored(Request request, Response response) {\n+        IsIgnoredRequest isIgnoredRequest = IsIgnoredRequestRepresenter.fromJSON(request.body());\n+        ensureAgentIsMakingARequestForItself(isIgnoredRequest, request);\n+\n+        boolean isIgnored = buildRepositoryMessageProducer.isIgnored(isIgnoredRequest.getAgentRuntimeInfo(), isIgnoredRequest.getJobIdentifier());\n+\n+        return valueOf(isIgnored);\n+    }\n+\n+    public String getCookie(Request request, Response response) {\n+        GetCookieRequest getCookieRequest = GetCookieRequestRepresenter.fromJSON(request.body());\n+        ensureAgentIsMakingARequestForItself(getCookieRequest, request);\n+\n+        return buildRepositoryMessageProducer.getCookie(getCookieRequest.getAgentRuntimeInfo());", "originalCommit": "9b74314a09f067f0ff050916772939120b95c408", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU0NDY3Mw==", "url": "https://github.com/gocd/gocd/pull/8898#discussion_r545544673", "bodyText": "You are right, I will change it.", "author": "maheshp", "createdAt": "2020-12-18T03:08:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM0MDY3OA=="}], "type": "inlineReview"}, {"oid": "b3838a58f9e2142160770de7507e5053416a75a8", "url": "https://github.com/gocd/gocd/commit/b3838a58f9e2142160770de7507e5053416a75a8", "message": "Renamed 'type' attribute on materials #000\n\n* Since we are moving towards using JSON for agent-server comms,\n  the material objects are serialized using gson. Since Materials\n  are polymorphic we will be using an Type adapter to handle different\n  materials. Serializing materials using the adapter failed since\n  materials have a filed with name `type`, hence renaming it.", "committedDate": "2020-12-18T10:38:17Z", "type": "commit"}, {"oid": "0c6da2ecfa5dc39cd38183c4e01e42f4619466a6", "url": "https://github.com/gocd/gocd/commit/0c6da2ecfa5dc39cd38183c4e01e42f4619466a6", "message": "Log which remoting client is in use on startup", "committedDate": "2020-12-18T10:43:15Z", "type": "forcePushed"}, {"oid": "31b379ff4ef54fc7c2ec0589e14d73dc605d1ada", "url": "https://github.com/gocd/gocd/commit/31b379ff4ef54fc7c2ec0589e14d73dc605d1ada", "message": "Introduced internal remoting API for agent-server comms #000\n\n* These are JSON based endpoints, this is in direction of moving\n  agent-server away from RMI", "committedDate": "2020-12-21T06:18:54Z", "type": "commit"}, {"oid": "fc728a85c580be2331141ccfe4fb7e9ead81509c", "url": "https://github.com/gocd/gocd/commit/fc728a85c580be2331141ccfe4fb7e9ead81509c", "message": "Agent remoting client\n\n- uses new JSON API\n- supports toggling back to the legacy RMI client", "committedDate": "2020-12-21T06:19:23Z", "type": "commit"}, {"oid": "a350d8b398cfbf3e3991a22646a458c8bf425385", "url": "https://github.com/gocd/gocd/commit/a350d8b398cfbf3e3991a22646a458c8bf425385", "message": "Mark RMI bits with @Deprecated", "committedDate": "2020-12-21T06:19:23Z", "type": "commit"}, {"oid": "96c7b50e75cff5c890793be71d26a380c9ebb15a", "url": "https://github.com/gocd/gocd/commit/96c7b50e75cff5c890793be71d26a380c9ebb15a", "message": "RemotingClient should treat all responses as JSON. Also add version Accept header.", "committedDate": "2020-12-21T06:19:23Z", "type": "commit"}, {"oid": "e55480eab7810493e8422a5b198e1bb33a31baab", "url": "https://github.com/gocd/gocd/commit/e55480eab7810493e8422a5b198e1bb33a31baab", "message": "Log which remoting client is in use on startup", "committedDate": "2020-12-21T06:19:23Z", "type": "commit"}, {"oid": "4d286e7d59c92e7eed5d30f78284facc8f9383be", "url": "https://github.com/gocd/gocd/commit/4d286e7d59c92e7eed5d30f78284facc8f9383be", "message": "ConfigurationProperty with secretParams should serialize resolved values", "committedDate": "2020-12-21T06:19:23Z", "type": "commit"}, {"oid": "de26f733c80a6047dd64fed4418a64cccb2592df", "url": "https://github.com/gocd/gocd/commit/de26f733c80a6047dd64fed4418a64cccb2592df", "message": "Log the remote client used on the agent", "committedDate": "2020-12-21T06:19:23Z", "type": "commit"}, {"oid": "5275dc9846cee21868f42921635b97b579be6018", "url": "https://github.com/gocd/gocd/commit/5275dc9846cee21868f42921635b97b579be6018", "message": "Register TFSMaterialInstance type for serialization", "committedDate": "2020-12-21T06:19:23Z", "type": "commit"}, {"oid": "080151e9345dcd44656d1055f2988dfb152b7d1e", "url": "https://github.com/gocd/gocd/commit/080151e9345dcd44656d1055f2988dfb152b7d1e", "message": "Register AgentRequest type adapater\n\n* Be explicit about the AgentRequest type while serializing the payload\n  on agent and similarly deserialize to a specific object.", "committedDate": "2020-12-21T06:35:28Z", "type": "commit"}, {"oid": "080151e9345dcd44656d1055f2988dfb152b7d1e", "url": "https://github.com/gocd/gocd/commit/080151e9345dcd44656d1055f2988dfb152b7d1e", "message": "Register AgentRequest type adapater\n\n* Be explicit about the AgentRequest type while serializing the payload\n  on agent and similarly deserialize to a specific object.", "committedDate": "2020-12-21T06:35:28Z", "type": "forcePushed"}]}