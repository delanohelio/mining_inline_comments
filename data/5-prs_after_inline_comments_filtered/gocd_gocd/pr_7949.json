{"pr_number": 7949, "pr_title": "ConfigRepo branching and PR support", "pr_createdAt": "2020-04-01T09:46:14Z", "pr_url": "https://github.com/gocd/gocd/pull/7949", "timeline": [{"oid": "e469396e17cbc947ef929c39aa75933a25da014f", "url": "https://github.com/gocd/gocd/commit/e469396e17cbc947ef929c39aa75933a25da014f", "message": "wip", "committedDate": "2020-04-03T05:59:23Z", "type": "forcePushed"}, {"oid": "5b788697616a4790d921f79238291971704dbb67", "url": "https://github.com/gocd/gocd/commit/5b788697616a4790d921f79238291971704dbb67", "message": "wip", "committedDate": "2020-04-03T06:12:49Z", "type": "forcePushed"}, {"oid": "3532b5ccdb9b6e18727758d4b6c7f4895bf12593", "url": "https://github.com/gocd/gocd/commit/3532b5ccdb9b6e18727758d4b6c7f4895bf12593", "message": "wip", "committedDate": "2020-04-03T06:17:55Z", "type": "forcePushed"}, {"oid": "fe27a14e0863363d4edf2664402638fd2e4961cf", "url": "https://github.com/gocd/gocd/commit/fe27a14e0863363d4edf2664402638fd2e4961cf", "message": "wip", "committedDate": "2020-04-03T06:34:10Z", "type": "forcePushed"}, {"oid": "bf7fcf71e1e013ce38feb16d4ea6554744ad310d", "url": "https://github.com/gocd/gocd/commit/bf7fcf71e1e013ce38feb16d4ea6554744ad310d", "message": "moar.", "committedDate": "2020-04-03T20:05:34Z", "type": "forcePushed"}, {"oid": "8372bf71bb9ed54eec1cfc9974513a85df404c33", "url": "https://github.com/gocd/gocd/commit/8372bf71bb9ed54eec1cfc9974513a85df404c33", "message": "moar.", "committedDate": "2020-04-03T22:34:55Z", "type": "forcePushed"}, {"oid": "70b80e7183dca69d8fc0d3c6a282029f9c3caf95", "url": "https://github.com/gocd/gocd/commit/70b80e7183dca69d8fc0d3c6a282029f9c3caf95", "message": "ConfigRepo modals annotate the existing repo model with errors rather than replacing the repo model\n\n  - `consumeErrorResponse()` knows how to automatically assign errors to respective fields.\n  - Replacing the repo model can have unwanted side effects in that the replaced repo model\n    instance may no longer be in sync with the UI.\n    - This is particularly problematic when a view model for a complex interaction needs to\n      bind to data in the backing model, as will be the case with user-defined config properties.\n      Unless the view model knows to rebind to a replaced model, the user will no longer be\n      able to correct any problems reported by the server since the data binding would be stale.\n    - Moreover, with such user-defined properties, the answer back from the server may have\n      transformed the data (e.g., encrypting secret properties), in which case changing the\n      shape of the data would result in strange/confusing UI behaviors on error even if the\n      new data was rebinded.\n    - In short, keeping the original model rather than replacing avoids all these pitfalls.", "committedDate": "2020-04-03T23:00:11Z", "type": "forcePushed"}, {"oid": "b10506d716297aa03cd33ae4ed6e370bbf0defff", "url": "https://github.com/gocd/gocd/commit/b10506d716297aa03cd33ae4ed6e370bbf0defff", "message": "working, now with error binding", "committedDate": "2020-04-04T05:19:49Z", "type": "forcePushed"}, {"oid": "ac5e58785c4bc3ce3c3a5b56a4a7e84bb01bddf5", "url": "https://github.com/gocd/gocd/commit/ac5e58785c4bc3ce3c3a5b56a4a7e84bb01bddf5", "message": "working, now with error binding", "committedDate": "2020-04-04T08:38:27Z", "type": "forcePushed"}, {"oid": "750ed22e6140b7096d2d02298878948a72155ee9", "url": "https://github.com/gocd/gocd/commit/750ed22e6140b7096d2d02298878948a72155ee9", "message": "error handling and such", "committedDate": "2020-04-04T10:04:43Z", "type": "forcePushed"}, {"oid": "7cfe1aa8cb61bbd1bf79a59d77a9056a9ee810e0", "url": "https://github.com/gocd/gocd/commit/7cfe1aa8cb61bbd1bf79a59d77a9056a9ee810e0", "message": "error handling and such", "committedDate": "2020-04-07T08:35:23Z", "type": "forcePushed"}, {"oid": "21274c0e08fc2db886da04ffa22b42434d6cbf11", "url": "https://github.com/gocd/gocd/commit/21274c0e08fc2db886da04ffa22b42434d6cbf11", "message": "error handling and such", "committedDate": "2020-04-07T09:16:46Z", "type": "forcePushed"}, {"oid": "7b9570c3a38d873cf9526b2f93c375ec9869c5cf", "url": "https://github.com/gocd/gocd/commit/7b9570c3a38d873cf9526b2f93c375ec9869c5cf", "message": "error handling and such", "committedDate": "2020-04-07T22:37:05Z", "type": "forcePushed"}, {"oid": "596404d4c68c52d7b7262f61264ef2cee8feb693", "url": "https://github.com/gocd/gocd/commit/596404d4c68c52d7b7262f61264ef2cee8feb693", "message": "wip", "committedDate": "2020-04-08T02:42:34Z", "type": "forcePushed"}, {"oid": "2841370d962cfca9577b4e8f64eb3453509a02f4", "url": "https://github.com/gocd/gocd/commit/2841370d962cfca9577b4e8f64eb3453509a02f4", "message": "writeback", "committedDate": "2020-04-09T07:03:57Z", "type": "forcePushed"}, {"oid": "81b49f94a2d7ab30c4ae51d4999f1e23a6f69fb1", "url": "https://github.com/gocd/gocd/commit/81b49f94a2d7ab30c4ae51d4999f1e23a6f69fb1", "message": "writeback", "committedDate": "2020-04-13T06:58:46Z", "type": "forcePushed"}, {"oid": "355fd2870aa86344c72ffef1eeb604b4e535a518", "url": "https://github.com/gocd/gocd/commit/355fd2870aa86344c72ffef1eeb604b4e535a518", "message": "writeback", "committedDate": "2020-04-13T08:10:00Z", "type": "forcePushed"}, {"oid": "653171479c87c872cffc5b7f186fd84c1c41a53c", "url": "https://github.com/gocd/gocd/commit/653171479c87c872cffc5b7f186fd84c1c41a53c", "message": "writeback", "committedDate": "2020-04-13T10:11:35Z", "type": "forcePushed"}, {"oid": "5f6b4dc846e168154ba2ca253d8348c597c0de39", "url": "https://github.com/gocd/gocd/commit/5f6b4dc846e168154ba2ca253d8348c597c0de39", "message": "writeback", "committedDate": "2020-04-15T22:06:15Z", "type": "forcePushed"}, {"oid": "035e814666d4076480167add0a8cbf67c634c7f6", "url": "https://github.com/gocd/gocd/commit/035e814666d4076480167add0a8cbf67c634c7f6", "message": "writeback", "committedDate": "2020-04-15T22:07:42Z", "type": "forcePushed"}, {"oid": "82a5403519163a5b651c60bb3c84ef52436dee4c", "url": "https://github.com/gocd/gocd/commit/82a5403519163a5b651c60bb3c84ef52436dee4c", "message": "error consumer uses accessor", "committedDate": "2020-04-16T11:14:12Z", "type": "forcePushed"}, {"oid": "79fc799a843471d63c3dc3b6e1d08cbe0f882095", "url": "https://github.com/gocd/gocd/commit/79fc799a843471d63c3dc3b6e1d08cbe0f882095", "message": "error consumer uses accessor", "committedDate": "2020-04-17T01:29:51Z", "type": "forcePushed"}, {"oid": "7b7e5a40b70305c740b226aa1b395283dd0e690a", "url": "https://github.com/gocd/gocd/commit/7b7e5a40b70305c740b226aa1b395283dd0e690a", "message": "Basic styling for the `<KeyValueEditor/>`", "committedDate": "2020-04-17T01:28:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk1NTEzOQ==", "url": "https://github.com/gocd/gocd/pull/7949#discussion_r409955139", "bodyText": "This should be inexpensive for repos that do not take advantage of branch support.\nFor repos that do use branch support, it is up to the plugin to provide some caching of references so as not to pommel the remote repo or API.", "author": "marques-work", "createdAt": "2020-04-17T02:24:37Z", "path": "server/src/main/java/com/thoughtworks/go/server/materials/ConfigMaterialUpdateListener.java", "diffHunk": "@@ -73,18 +69,19 @@ public void onMessage(MaterialUpdateCompletedMessage message) {\n                 MaterialRevisions latestModification = materialRepository.findLatestModification(material);\n                 Modification modification = latestModification.firstModifiedMaterialRevision().getLatestModification();\n \n-                MaterialRevision lastParseRevision = getMaterialRevisionAtLastParseAttempt(message);\n-                if (lastParseRevision == null) {\n-                    //never parsed\n-                    updateConfigurationFromCheckout(folder, modification, material);\n-                } else if (latestModification.findRevisionFor(material.config()).hasChangedSince(lastParseRevision) ||\n-                        this.repoConfigDataSource.hasConfigRepoConfigChangedSinceLastUpdate(material.config())) {\n-                    // revision has changed. the config files might have been updated\n-                    updateConfigurationFromCheckout(folder, modification, material);\n-                } else {\n-                    // revision is the same as last time, no need to parse again\n-                    LOGGER.debug(\"[Config Material Update] Skipping parsing of Config material {} since material has no change since last parse.\", material);\n-                }\n+                // Previously, we only forced a parse when the repo had never been parsed before and if a new revision\n+                // was pushed to the material; if no new revisions existed, we did a no-op.\n+                //\n+                // Now, we need to reparse every time to support ref/branch scanning; even if there are no changes to\n+                // the current material, new branches/refs could have been created that might change the output of\n+                // templated config repo definitions that use this feature.\n+                //\n+                // In theory, this should be inexpensive, as the working copies of materials are cached on disk. This\n+                // will cause more frequent `parse-directory` messages, however. Generally (crosses fingers), evaluating\n+                // this is fast, but we may need to consider only merging into the main config if different?\n+                //\n+                // Open to any better ideas :).\n+                updateConfigurationFromCheckout(folder, modification, material);", "originalCommit": "7b7e5a40b70305c740b226aa1b395283dd0e690a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f6114db56785f961dd8c08a4b345d53aaa1de16f", "url": "https://github.com/gocd/gocd/commit/f6114db56785f961dd8c08a4b345d53aaa1de16f", "message": "Basic styling for the `<KeyValueEditor/>`", "committedDate": "2020-04-17T02:50:30Z", "type": "forcePushed"}, {"oid": "26e7ac39b4465a79ad509bb8617975b4841045e3", "url": "https://github.com/gocd/gocd/commit/26e7ac39b4465a79ad509bb8617975b4841045e3", "message": "Add section for user-defined properties in the config repo details collapsible panel", "committedDate": "2020-04-17T04:38:06Z", "type": "forcePushed"}, {"oid": "9ab928fdf71f26ecc4d50bc0e5d7b724e2b62de4", "url": "https://github.com/gocd/gocd/commit/9ab928fdf71f26ecc4d50bc0e5d7b724e2b62de4", "message": "Add section for user-defined properties in the config repo details collapsible panel", "committedDate": "2020-04-20T03:08:05Z", "type": "forcePushed"}, {"oid": "f3c165b050f5c22e7461b7aac738ad34f0b736a0", "url": "https://github.com/gocd/gocd/commit/f3c165b050f5c22e7461b7aac738ad34f0b736a0", "message": "Add section for user-defined properties in the config repo details collapsible panel", "committedDate": "2020-04-20T04:33:12Z", "type": "forcePushed"}, {"oid": "89a9000989f7af8faf9867cecda8d05c9ecb81ea", "url": "https://github.com/gocd/gocd/commit/89a9000989f7af8faf9867cecda8d05c9ecb81ea", "message": "Add section for user-defined properties in the config repo details collapsible panel", "committedDate": "2020-04-20T19:03:48Z", "type": "forcePushed"}, {"oid": "5178ba69ab051f59006a3327b3d61dea2c1e5c6a", "url": "https://github.com/gocd/gocd/commit/5178ba69ab051f59006a3327b3d61dea2c1e5c6a", "message": "Add section for user-defined properties in the config repo details collapsible panel", "committedDate": "2020-04-22T06:11:43Z", "type": "forcePushed"}, {"oid": "045c593884e81ee87c16b720bcedffe8ef3dc11c", "url": "https://github.com/gocd/gocd/commit/045c593884e81ee87c16b720bcedffe8ef3dc11c", "message": "Add section for user-defined properties in the config repo details collapsible panel", "committedDate": "2020-04-29T23:39:37Z", "type": "forcePushed"}, {"oid": "6558ff8922076a6dd9eb2973be911db70bc72f99", "url": "https://github.com/gocd/gocd/commit/6558ff8922076a6dd9eb2973be911db70bc72f99", "message": "Add section for user-defined properties in the config repo details collapsible panel", "committedDate": "2020-05-13T07:19:15Z", "type": "forcePushed"}, {"oid": "c6167d264d82b0d063de0cf41dc9a4ddd3347db7", "url": "https://github.com/gocd/gocd/commit/c6167d264d82b0d063de0cf41dc9a4ddd3347db7", "message": "Remove route toggle to enable ConfigRepo REST API v4 as the latest", "committedDate": "2020-05-14T08:25:02Z", "type": "forcePushed"}, {"oid": "9a67ee396becfdfb4e51edef6d17f57a3b45f224", "url": "https://github.com/gocd/gocd/commit/9a67ee396becfdfb4e51edef6d17f57a3b45f224", "message": "Allow `ConfigMaterialUpdateListener` to always parse-directory as it may output a different config because of new or removed refs/branches/PRs even if no code changes.", "committedDate": "2020-05-14T09:14:12Z", "type": "commit"}, {"oid": "7b210153cee2b2e6117fb2cc3a576b5944c6a8da", "url": "https://github.com/gocd/gocd/commit/7b210153cee2b2e6117fb2cc3a576b5944c6a8da", "message": "<KeyValEditor/> component exposes a UI to modify a set of encryptable key-value entries.\n\nThe typical model to back this component is a set of configuration properties.\n\nThis editor supports the new serialization option to represent plain-text values that\na client wishes to encrypt:\n\n```json\n{\n  \"key\": \"some.property\",\n  \"value\": \"I will be encrypted by the server upon completion\",\n  \"secure\": true\n}\n```\n\nThe intent is to use this in the config_repo modal so users can define variables to be\nused in pipeline definition files.", "committedDate": "2020-05-14T09:14:12Z", "type": "commit"}, {"oid": "1ee43b28b3bdceff42fdb8a4a4134df1195b753a", "url": "https://github.com/gocd/gocd/commit/1ee43b28b3bdceff42fdb8a4a4134df1195b753a", "message": "<KeyValEditor/> now knows how to transparently namespace (i.e., prefix) property keys", "committedDate": "2020-05-14T09:14:12Z", "type": "commit"}, {"oid": "0395c7d3eedf48099debb99b00b88a3186529ba6", "url": "https://github.com/gocd/gocd/commit/0395c7d3eedf48099debb99b00b88a3186529ba6", "message": "Test the <KeyValEditor/> view models as it contains the vast majority of the logic", "committedDate": "2020-05-14T09:14:12Z", "type": "commit"}, {"oid": "a9e557537578216c2c6bdcda60f5c2a289cc1836", "url": "https://github.com/gocd/gocd/commit/a9e557537578216c2c6bdcda60f5c2a289cc1836", "message": "Tests for <KevValEditor/> component itself", "committedDate": "2020-05-14T09:14:12Z", "type": "commit"}, {"oid": "8e82f45cc57a608bd4872b4283113bb4df31a267", "url": "https://github.com/gocd/gocd/commit/8e82f45cc57a608bd4872b4283113bb4df31a267", "message": "ConfigReposCRUD now uses the `latest` API verison", "committedDate": "2020-05-14T09:14:12Z", "type": "commit"}, {"oid": "da7ab00f95c616098eecf383e3fb9fe4c5c01ee1", "url": "https://github.com/gocd/gocd/commit/da7ab00f95c616098eecf383e3fb9fe4c5c01ee1", "message": "Extract configuration properties and related functions into a separate mixin\n\n  - Refactors how the various file pattern properties are managed (simplifies serialization, interface)\n  - Allows models to optionally support user-defined properties (separate namespace)\n  - Adds helper utilities for creating stream-like accessors", "committedDate": "2020-05-14T09:14:12Z", "type": "commit"}, {"oid": "be7e181a40c76788626b476507609aa04565bb73", "url": "https://github.com/gocd/gocd/commit/be7e181a40c76788626b476507609aa04565bb73", "message": "ConfigRepo modals annotate the existing repo model with errors rather than replacing the repo model\n\n  - `consumeErrorResponse()` knows how to automatically assign errors to respective fields.\n  - Replacing the repo model can have unwanted side effects in that the replaced repo model\n    instance may no longer be in sync with the UI.\n    - This is particularly problematic when a view model for a complex interaction needs to\n      bind to data in the backing model, as will be the case with user-defined config properties.\n      Unless the view model knows to rebind to a replaced model, the user will no longer be\n      able to correct any problems reported by the server since the data binding would be stale.\n    - Moreover, with such user-defined properties, the answer back from the server may have\n      transformed the data (e.g., encrypting secret properties), in which case changing the\n      shape of the data would result in strange/confusing UI behaviors on error even if the\n      new data was rebinded.\n    - In short, keeping the original model rather than replacing avoids all these pitfalls.", "committedDate": "2020-05-14T09:14:12Z", "type": "commit"}, {"oid": "c4e50a830e1e12fa5637fb86a3a7baf267f050cc", "url": "https://github.com/gocd/gocd/commit/c4e50a830e1e12fa5637fb86a3a7baf267f050cc", "message": "Add validation and error handling to config repo configuration properties\n\n  - Extract common bits of `ConfigRepoModal#performSave()` into `ConfigRepoModal#save()`\n  - Write back to the ConfigRepo model on field value change in the properties section and also right before validation\n  - Client-side validation in the form of a custom validator asserts name uniqueness and presence among properties\n  - Errors returned by the server are bound back to the respective fields on properties, with a best-effort to handle\n    namespace", "committedDate": "2020-05-14T09:14:12Z", "type": "commit"}, {"oid": "a5c61b152726a86fd5ccab143fe04259dd047ad3", "url": "https://github.com/gocd/gocd/commit/a5c61b152726a86fd5ccab143fe04259dd047ad3", "message": "Basic styling for the `<KeyValueEditor/>`", "committedDate": "2020-05-14T09:14:12Z", "type": "commit"}, {"oid": "9cd1e82bce7a20bb3d3d0c5dc701170465ab8962", "url": "https://github.com/gocd/gocd/commit/9cd1e82bce7a20bb3d3d0c5dc701170465ab8962", "message": "Add section for user-defined properties in the config repo details collapsible panel", "committedDate": "2020-05-14T09:14:13Z", "type": "commit"}, {"oid": "ec5f1c9775aa004e308dbde9a5d0bae4e56b891d", "url": "https://github.com/gocd/gocd/commit/ec5f1c9775aa004e308dbde9a5d0bae4e56b891d", "message": "Remove route toggle to enable ConfigRepo REST API v4 as the latest", "committedDate": "2020-05-14T09:14:13Z", "type": "forcePushed"}, {"oid": "3d03e995e2bd9ed84ab80ab44942248218f664d6", "url": "https://github.com/gocd/gocd/commit/3d03e995e2bd9ed84ab80ab44942248218f664d6", "message": "Finish ConfigRepo v3.0 extension API and add capabilities\n\nv3.0 was never published/documented because it was born from the\nnow-defunct test drive enhancements. It was waiting on the release\nof the new PaC page (which has been since merged).\n\nAs luck would have it, I could then freely add the correct capabilities\nfor this version, specifically flags to indicate support for:\n\n  - enumerating config files stored in a given repo (i.e., get-config-files\n    request)\n  - allowing user properties to be referenced from a config file\n\nAs part of branch support, the latter flag is used to conditionally\ndisplay the user-defined property entry widget in the configrepo\ncreate/update modal.", "committedDate": "2020-05-14T09:32:03Z", "type": "commit"}, {"oid": "570a7aa0ca71696e36b8b4bbd6a18deb72974641", "url": "https://github.com/gocd/gocd/commit/570a7aa0ca71696e36b8b4bbd6a18deb72974641", "message": "Remove route toggle to enable ConfigRepo REST API v4 as the latest", "committedDate": "2020-05-14T09:32:03Z", "type": "commit"}, {"oid": "570a7aa0ca71696e36b8b4bbd6a18deb72974641", "url": "https://github.com/gocd/gocd/commit/570a7aa0ca71696e36b8b4bbd6a18deb72974641", "message": "Remove route toggle to enable ConfigRepo REST API v4 as the latest", "committedDate": "2020-05-14T09:32:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYxMTQ3OQ==", "url": "https://github.com/gocd/gocd/pull/7949#discussion_r425611479", "bodyText": "@marques-work - here we're modifying the existing Plugin Infos API v6.\nShould we consider adding Plugin Infos API v7?", "author": "GaneshSPatil", "createdAt": "2020-05-15T07:17:34Z", "path": "api/api-plugin-infos-v6/src/main/java/com/thoughtworks/go/apiv6/plugininfos/representers/extensions/ConfigRepoExtensionRepresenter.java", "diffHunk": "@@ -28,7 +28,10 @@ public void toJSON(OutputWriter extensionWriter, PluginInfo extension) {\n \n         extensionWriter.addChild(\"capabilities\", capabilitiesWriter ->\n                 capabilitiesWriter.add(\"supports_pipeline_export\", configRepoPluginInfo.getCapabilities().isSupportsPipelineExport())\n-                        .add(\"supports_parse_content\", configRepoPluginInfo.getCapabilities().isSupportsParseContent()));\n+                        .add(\"supports_parse_content\", configRepoPluginInfo.getCapabilities().isSupportsParseContent())\n+                        .add(\"supports_list_config_files\", configRepoPluginInfo.getCapabilities().isSupportsListConfigFiles())\n+                        .add(\"supports_user_defined_properties\", configRepoPluginInfo.getCapabilities().isSupportsUserDefinedProperties())", "originalCommit": "570a7aa0ca71696e36b8b4bbd6a18deb72974641", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcyMzY3MQ==", "url": "https://github.com/gocd/gocd/pull/7949#discussion_r425723671", "bodyText": "Yes, you're right. I probably should have moved this to a new v7. Curious though, does anyone actually use this API? It feels very, very specialized/niche. I suppose that's a larger discussion though.", "author": "marques-work", "createdAt": "2020-05-15T10:55:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYxMTQ3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYxNTA3NA==", "url": "https://github.com/gocd/gocd/pull/7949#discussion_r425615074", "bodyText": "should we consider using Lombok?\n@Getter\n@Setter\n@EqualsAndHashCode\n@Accessors(chain = true)\n@NoArgsConstructor(access = AccessLevel.PUBLIC)\n@AllArgsConstructor(access = AccessLevel.NONE)\npublic class Capabilities2 {\n    private boolean supportsPipelineExport;\n    private boolean supportsParseContent;\n    private boolean supportsListConfigFiles;\n    private boolean supportsUserDefinedProperties;\n}", "author": "GaneshSPatil", "createdAt": "2020-05-15T07:25:27Z", "path": "plugin-infra/go-plugin-domain/src/main/java/com/thoughtworks/go/plugin/domain/configrepo/Capabilities.java", "diffHunk": "@@ -46,17 +50,35 @@ public void setSupportsParseContent(boolean supportsParseContent) {\n         this.supportsParseContent = supportsParseContent;\n     }\n \n+    public boolean isSupportsListConfigFiles() {\n+        return supportsListConfigFiles;\n+    }\n+\n+    public void setSupportsListConfigFiles(boolean supportsListConfigFiles) {\n+        this.supportsListConfigFiles = supportsListConfigFiles;\n+    }\n+\n+    public boolean isSupportsUserDefinedProperties() {\n+        return supportsUserDefinedProperties;\n+    }\n+\n+    public void setSupportsUserDefinedProperties(boolean supportsUserDefinedProperties) {\n+        this.supportsUserDefinedProperties = supportsUserDefinedProperties;\n+    }\n+", "originalCommit": "570a7aa0ca71696e36b8b4bbd6a18deb72974641", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcyMTg2MA==", "url": "https://github.com/gocd/gocd/pull/7949#discussion_r425721860", "bodyText": "@GaneshSPatil I thought about that too. Hesitated to mess with the gradle deps at the time. But, yes, we probably should. All these objects are just @Data essentially.", "author": "marques-work", "createdAt": "2020-05-15T10:50:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYxNTA3NA=="}], "type": "inlineReview"}]}