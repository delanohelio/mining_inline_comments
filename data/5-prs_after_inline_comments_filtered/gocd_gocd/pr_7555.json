{"pr_number": 7555, "pr_title": "Feeds api", "pr_createdAt": "2020-01-08T10:18:46Z", "pr_url": "https://github.com/gocd/gocd/pull/7555", "timeline": [{"oid": "32b11c8e5859c78e31979adc97892e8cd412ac08", "url": "https://github.com/gocd/gocd/commit/32b11c8e5859c78e31979adc97892e8cd412ac08", "message": "Adding author name as cdata instead of text as it may contain some special chars", "committedDate": "2020-01-08T12:14:01Z", "type": "forcePushed"}, {"oid": "9a7a0378ab184359a5fa81b058ce8eedd86a7dce", "url": "https://github.com/gocd/gocd/commit/9a7a0378ab184359a5fa81b058ce8eedd86a7dce", "message": "Adding author name as cdata instead of text as it may contain some special chars", "committedDate": "2020-01-09T04:07:18Z", "type": "forcePushed"}, {"oid": "f0ec879f6e4831510269b0c344af2c63c1710f4d", "url": "https://github.com/gocd/gocd/commit/f0ec879f6e4831510269b0c344af2c63c1710f4d", "message": "Adding author name as cdata instead of text as it may contain some special chars", "committedDate": "2020-01-09T05:50:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU3MDAwMQ==", "url": "https://github.com/gocd/gocd/pull/7555#discussion_r364570001", "bodyText": "Feeds APIs do not need Accept header.\nShould FeedsApiControllerV1 implement implements SparkController, ControllerMethods, SparkSpringController instead of extends ApiController implements SparkSpringController?\nRefer: ApiSupportController", "author": "GaneshSPatil", "createdAt": "2020-01-09T05:58:24Z", "path": "api/api-feeds-api-v1/src/main/java/com/thoughtworks/go/apiv1/feedsapi/FeedsApiControllerV1.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 ThoughtWorks, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.thoughtworks.go.apiv1.feedsapi;\n+\n+import com.thoughtworks.go.api.ApiController;\n+import com.thoughtworks.go.api.ApiVersion;\n+import com.thoughtworks.go.api.spring.ApiAuthenticationHelper;\n+import com.thoughtworks.go.config.exceptions.BadRequestException;\n+import com.thoughtworks.go.server.service.FeedService;\n+import com.thoughtworks.go.spark.RequestContext;\n+import com.thoughtworks.go.spark.Routes;\n+import com.thoughtworks.go.spark.spring.SparkSpringController;\n+import org.dom4j.Document;\n+import org.dom4j.io.OutputFormat;\n+import org.dom4j.io.XMLWriter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import spark.Request;\n+import spark.Response;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+\n+import static java.lang.String.format;\n+import static org.apache.commons.io.FilenameUtils.removeExtension;\n+import static org.apache.commons.lang3.StringUtils.isBlank;\n+import static org.springframework.http.MediaType.APPLICATION_XML_VALUE;\n+import static spark.Spark.*;\n+\n+@Component\n+public class FeedsApiControllerV1 extends ApiController implements SparkSpringController {\n+    private final ApiAuthenticationHelper apiAuthenticationHelper;\n+    private final FeedService feedService;\n+\n+    @Autowired\n+    public FeedsApiControllerV1(ApiAuthenticationHelper apiAuthenticationHelper,\n+                                FeedService feedService) {\n+        super(ApiVersion.v1);", "originalCommit": "175304df230bc03b8c43810bf2b2cc7eb5832c1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU3MDU3Nw==", "url": "https://github.com/gocd/gocd/pull/7555#discussion_r364570577", "bodyText": "IMO, Since it is an API I should implement and ApiController", "author": "bdpiprava", "createdAt": "2020-01-09T06:01:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU3MDAwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU3MDcxMg==", "url": "https://github.com/gocd/gocd/pull/7555#discussion_r364570712", "bodyText": "ControllerMethods is not there as I am not making use of the methods from it.", "author": "bdpiprava", "createdAt": "2020-01-09T06:02:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU3MDAwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU3MDk5NQ==", "url": "https://github.com/gocd/gocd/pull/7555#discussion_r364570995", "bodyText": "NormalUserSecurity? Should this be based on some permissions (pipeline, pipeline group level view permissions)?\nNot sure if keeping it public for all has any security implications.\n\\cc: @arvindsv @bdpiparva", "author": "GaneshSPatil", "createdAt": "2020-01-09T06:03:36Z", "path": "api/api-feeds-api-v1/src/main/java/com/thoughtworks/go/apiv1/feedsapi/FeedsApiControllerV1.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 ThoughtWorks, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.thoughtworks.go.apiv1.feedsapi;\n+\n+import com.thoughtworks.go.api.ApiController;\n+import com.thoughtworks.go.api.ApiVersion;\n+import com.thoughtworks.go.api.spring.ApiAuthenticationHelper;\n+import com.thoughtworks.go.config.exceptions.BadRequestException;\n+import com.thoughtworks.go.server.service.FeedService;\n+import com.thoughtworks.go.spark.RequestContext;\n+import com.thoughtworks.go.spark.Routes;\n+import com.thoughtworks.go.spark.spring.SparkSpringController;\n+import org.dom4j.Document;\n+import org.dom4j.io.OutputFormat;\n+import org.dom4j.io.XMLWriter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import spark.Request;\n+import spark.Response;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+\n+import static java.lang.String.format;\n+import static org.apache.commons.io.FilenameUtils.removeExtension;\n+import static org.apache.commons.lang3.StringUtils.isBlank;\n+import static org.springframework.http.MediaType.APPLICATION_XML_VALUE;\n+import static spark.Spark.*;\n+\n+@Component\n+public class FeedsApiControllerV1 extends ApiController implements SparkSpringController {\n+    private final ApiAuthenticationHelper apiAuthenticationHelper;\n+    private final FeedService feedService;\n+\n+    @Autowired\n+    public FeedsApiControllerV1(ApiAuthenticationHelper apiAuthenticationHelper,\n+                                FeedService feedService) {\n+        super(ApiVersion.v1);\n+        this.mimeType = APPLICATION_XML_VALUE;\n+        this.apiAuthenticationHelper = apiAuthenticationHelper;\n+        this.feedService = feedService;\n+    }\n+\n+    @Override\n+    public String controllerBasePath() {\n+        return Routes.FeedsAPI.BASE;\n+    }\n+\n+    @Override\n+    public void setupRoutes() {\n+        path(controllerBasePath(), () -> {\n+            before(\"/*\", mimeType, this::setContentType);\n+            before(\"/*\", mimeType, this.apiAuthenticationHelper::checkUserAnd403);", "originalCommit": "175304df230bc03b8c43810bf2b2cc7eb5832c1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU3MTU1OQ==", "url": "https://github.com/gocd/gocd/pull/7555#discussion_r364571559", "bodyText": "@GaneshSPatil - That is verified at the service level so I skipped that check from the controller.", "author": "bdpiprava", "createdAt": "2020-01-09T06:06:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU3MDk5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU3MzE5MQ==", "url": "https://github.com/gocd/gocd/pull/7555#discussion_r364573191", "bodyText": "Hmm, thanks.\nIdeally, the checks should have been moved from the service to the controller. But the services would have used as part of the rails controller too!", "author": "GaneshSPatil", "createdAt": "2020-01-09T06:14:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU3MDk5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU3ODgyNA==", "url": "https://github.com/gocd/gocd/pull/7555#discussion_r364578824", "bodyText": "I think we have a check at the controller level to early return based on the user's permission. This makes authorization logic scattered between controller and services. Ideally, I prefer to have it at the service level. Controllers are something that can change based on libraries like sparks or languages but in most of the applications, services will remain in the same(changing services mean rewriting entire application).", "author": "bdpiprava", "createdAt": "2020-01-09T06:41:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU3MDk5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU3MTE4Ng==", "url": "https://github.com/gocd/gocd/pull/7555#discussion_r364571186", "bodyText": "should we extract request param strings into class field constants?", "author": "GaneshSPatil", "createdAt": "2020-01-09T06:04:32Z", "path": "api/api-feeds-api-v1/src/main/java/com/thoughtworks/go/apiv1/feedsapi/FeedsApiControllerV1.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 ThoughtWorks, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.thoughtworks.go.apiv1.feedsapi;\n+\n+import com.thoughtworks.go.api.ApiController;\n+import com.thoughtworks.go.api.ApiVersion;\n+import com.thoughtworks.go.api.spring.ApiAuthenticationHelper;\n+import com.thoughtworks.go.config.exceptions.BadRequestException;\n+import com.thoughtworks.go.server.service.FeedService;\n+import com.thoughtworks.go.spark.RequestContext;\n+import com.thoughtworks.go.spark.Routes;\n+import com.thoughtworks.go.spark.spring.SparkSpringController;\n+import org.dom4j.Document;\n+import org.dom4j.io.OutputFormat;\n+import org.dom4j.io.XMLWriter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import spark.Request;\n+import spark.Response;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+\n+import static java.lang.String.format;\n+import static org.apache.commons.io.FilenameUtils.removeExtension;\n+import static org.apache.commons.lang3.StringUtils.isBlank;\n+import static org.springframework.http.MediaType.APPLICATION_XML_VALUE;\n+import static spark.Spark.*;\n+\n+@Component\n+public class FeedsApiControllerV1 extends ApiController implements SparkSpringController {\n+    private final ApiAuthenticationHelper apiAuthenticationHelper;\n+    private final FeedService feedService;\n+\n+    @Autowired\n+    public FeedsApiControllerV1(ApiAuthenticationHelper apiAuthenticationHelper,\n+                                FeedService feedService) {\n+        super(ApiVersion.v1);\n+        this.mimeType = APPLICATION_XML_VALUE;\n+        this.apiAuthenticationHelper = apiAuthenticationHelper;\n+        this.feedService = feedService;\n+    }\n+\n+    @Override\n+    public String controllerBasePath() {\n+        return Routes.FeedsAPI.BASE;\n+    }\n+\n+    @Override\n+    public void setupRoutes() {\n+        path(controllerBasePath(), () -> {\n+            before(\"/*\", mimeType, this::setContentType);\n+            before(\"/*\", mimeType, this.apiAuthenticationHelper::checkUserAnd403);\n+\n+            get(Routes.FeedsAPI.PIPELINES_XML, this.mimeType, this::pipelinesXML);\n+            get(Routes.FeedsAPI.STAGES_XML, this.mimeType, this::stagesXML);\n+            get(Routes.FeedsAPI.PIPELINE_XML, this.mimeType, this::pipelineXML);\n+            get(Routes.FeedsAPI.STAGE_XML, this.mimeType, this::stageXML);\n+            get(Routes.FeedsAPI.JOB_XML, this.mimeType, this::jobXML);\n+            get(Routes.FeedsAPI.SCHEDULED_JOB_XML, this.mimeType, this::scheduledJobs);\n+            get(Routes.FeedsAPI.MATERIAL_URL, this.mimeType, this::materialXML);\n+        });\n+    }\n+\n+    public String pipelinesXML(Request request, Response response) throws IOException {\n+        return prettyPrint(feedService.pipelinesXml(currentUsername(), baseUrl(request)));\n+    }\n+\n+    public String pipelineXML(Request request, Response response) throws IOException {\n+        String pipelineName = request.params(\"pipeline_name\");\n+        Integer pipelineCounter = parseInt(removeExtension(request.params(\"pipeline_counter\")), \"pipeline counter\");\n+        return prettyPrint(feedService.pipelineXml(currentUsername(), pipelineName, pipelineCounter, baseUrl(request)));\n+    }\n+\n+    public String stagesXML(Request request, Response response) throws IOException {\n+        String pipelineName = request.params(\"pipeline_name\");\n+        String beforeFromRequest = request.queryParams(\"before\");\n+        Integer before = isBlank(beforeFromRequest) ? null : parseInt(beforeFromRequest, \"before\");\n+        return prettyPrint(feedService.stagesXml(currentUsername(), pipelineName, before, baseUrl(request)));\n+    }\n+\n+    public String stageXML(Request request, Response response) throws IOException {\n+        String pipelineName = request.params(\"pipeline_name\");\n+        Integer pipelineCounter = parseInt(request.params(\"pipeline_counter\"), \"pipeline counter\");\n+        String stageName = request.params(\"stage_name\");\n+        Integer stageCounter = parseInt(removeExtension(request.params(\"stage_counter\")), \"stage counter\");\n+        return prettyPrint(feedService.stageXml(currentUsername(), pipelineName, pipelineCounter, stageName, stageCounter, baseUrl(request)));\n+    }\n+\n+    public String jobXML(Request request, Response response) throws IOException {\n+        String pipelineName = request.params(\"pipeline_name\");\n+        Integer pipelineCounter = parseInt(request.params(\"pipeline_counter\"), \"pipeline counter\");\n+        String stageName = request.params(\"stage_name\");\n+        Integer stageCounter = parseInt(request.params(\"stage_counter\"), \"stage counter\");\n+        String jobName = removeExtension(request.params(\"job_name\"));\n+\n+        return prettyPrint(feedService.jobXml(currentUsername(), pipelineName, pipelineCounter, stageName, stageCounter, jobName, baseUrl(request)));\n+    }\n+\n+    public String scheduledJobs(Request request, Response response) throws IOException {\n+        return prettyPrint(feedService.waitingJobPlansXml(baseUrl(request)));\n+    }\n+\n+    public String materialXML(Request request, Response response) throws IOException {\n+        String pipelineName = request.params(\"pipeline_name\");\n+        Integer pipelineCounter = parseInt(request.params(\"pipeline_counter\"), \"pipeline counter\");\n+        String fingerprint = removeExtension(request.params(\"fingerprint\"));\n+\n+        return prettyPrint(feedService.materialXml(currentUsername(), pipelineName, pipelineCounter, fingerprint, baseUrl(request)));\n+    }", "originalCommit": "175304df230bc03b8c43810bf2b2cc7eb5832c1b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3ceb79cbb19e7c9230c4cbd3e83341721d194f6b", "url": "https://github.com/gocd/gocd/commit/3ceb79cbb19e7c9230c4cbd3e83341721d194f6b", "message": "Set content type based on status and accept header\n\nIn case of faulire, send error message based on the requested accept\nheader type. This will allow client interpret the error message as\nper requested types.\n\nIn case of success, Feed APIs always sends response as xml. Hence\nexpected content types can be one from application/xml, text/xml,\napplication/rss+xml or application/atom+xml. Content type will be\nset based on the Accept header. Defaults to application/xml if accept\n header contains non xml content type", "committedDate": "2020-01-09T08:51:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYzMjQyMg==", "url": "https://github.com/gocd/gocd/pull/7555#discussion_r364632422", "bodyText": "this.mimeType?? may be after(\"/*\", this.mimeType, this::setContentType);", "author": "GaneshSPatil", "createdAt": "2020-01-09T09:24:37Z", "path": "api/api-feeds-api-v1/src/main/java/com/thoughtworks/go/apiv1/feedsapi/FeedsApiControllerV1.java", "diffHunk": "@@ -76,6 +79,8 @@ public void setupRoutes() {\n             get(Routes.FeedsAPI.JOB_XML, this.mimeType, this::jobXML);\n             get(Routes.FeedsAPI.SCHEDULED_JOB_XML, this.mimeType, this::scheduledJobs);\n             get(Routes.FeedsAPI.MATERIAL_URL, this.mimeType, this::materialXML);\n+\n+            after(\"/*\", this::setContentType);", "originalCommit": "3ceb79cbb19e7c9230c4cbd3e83341721d194f6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYzNTQxNA==", "url": "https://github.com/gocd/gocd/pull/7555#discussion_r364635414", "bodyText": "Failure: send error message based on the requested accept header type. This will allow the client to interpret the error message as per the requested types.\n\n\nSuccess: Feed APIs always sends a response as XML. Hence expected content types can be one from application/xml, text/xml, application/rss+xml or application/atom+xml. Content-type will be set based on the Accept header. Defaults to application/xml if accept header contains non XML content type", "author": "bdpiprava", "createdAt": "2020-01-09T09:30:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYzMjQyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYzNjI4NA==", "url": "https://github.com/gocd/gocd/pull/7555#discussion_r364636284", "bodyText": "this.mimeType?? may be after(\"/*\", this.mimeType, this::setContentType);\n\nNot sure if that will make any difference", "author": "bdpiprava", "createdAt": "2020-01-09T09:32:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYzMjQyMg=="}], "type": "inlineReview"}, {"oid": "2843ae5d859f06bf203d90516294f0cdc8a252a2", "url": "https://github.com/gocd/gocd/commit/2843ae5d859f06bf203d90516294f0cdc8a252a2", "message": "Adding job xml representer to generate xml document", "committedDate": "2020-01-09T11:39:54Z", "type": "commit"}, {"oid": "b5d4f77ebefb04baf6759dc930702d8938acc335", "url": "https://github.com/gocd/gocd/commit/b5d4f77ebefb04baf6759dc930702d8938acc335", "message": "Adding job plan xml representer to generate xml document", "committedDate": "2020-01-09T11:39:55Z", "type": "commit"}, {"oid": "37bf8c37e6b2ac78316e68917e9136aa7de9fcd5", "url": "https://github.com/gocd/gocd/commit/37bf8c37e6b2ac78316e68917e9136aa7de9fcd5", "message": "Adding stage xml representer to generate xml document", "committedDate": "2020-01-09T11:39:55Z", "type": "commit"}, {"oid": "1ac2b07cb4e692caf28276ebc936e454a39f9ba6", "url": "https://github.com/gocd/gocd/commit/1ac2b07cb4e692caf28276ebc936e454a39f9ba6", "message": "Adding feed entries xml representer to  generate xml document", "committedDate": "2020-01-09T11:39:55Z", "type": "commit"}, {"oid": "cdfbf21c714c3599b78d31c155543f552c4d0320", "url": "https://github.com/gocd/gocd/commit/cdfbf21c714c3599b78d31c155543f552c4d0320", "message": "Adding pipelines xml representer to generate xml document", "committedDate": "2020-01-09T11:39:55Z", "type": "commit"}, {"oid": "991f918e23b42ae0b1a52584cc77d7e4b95927a5", "url": "https://github.com/gocd/gocd/commit/991f918e23b42ae0b1a52584cc77d7e4b95927a5", "message": "Adding pipeline xml representer to generate xml document", "committedDate": "2020-01-09T11:39:55Z", "type": "commit"}, {"oid": "fa8d73e4c4fa169d64b5cfb60624e78ad51b886c", "url": "https://github.com/gocd/gocd/commit/fa8d73e4c4fa169d64b5cfb60624e78ad51b886c", "message": "Adding pipeline load method without http result argument", "committedDate": "2020-01-09T11:39:56Z", "type": "commit"}, {"oid": "b559f94455b859a14a0002217389e903308fc586", "url": "https://github.com/gocd/gocd/commit/b559f94455b859a14a0002217389e903308fc586", "message": "Adding feed service to get xml of various entities", "committedDate": "2020-01-09T11:39:56Z", "type": "commit"}, {"oid": "e02d51594ebf58628a3200175ed663b4638f4817", "url": "https://github.com/gocd/gocd/commit/e02d51594ebf58628a3200175ed663b4638f4817", "message": "Adding feed api controller", "committedDate": "2020-01-09T11:39:56Z", "type": "commit"}, {"oid": "f9932aadf9c6d6e5e8eb737583eb434f4f07ef1a", "url": "https://github.com/gocd/gocd/commit/f9932aadf9c6d6e5e8eb737583eb434f4f07ef1a", "message": "Use pipeline and stage counter instead of id to get xml", "committedDate": "2020-01-09T11:44:03Z", "type": "commit"}, {"oid": "4a787432c93250f4cd33641f6b85b92f30c52714", "url": "https://github.com/gocd/gocd/commit/4a787432c93250f4cd33641f6b85b92f30c52714", "message": "Get material xml by pipeline name, counter and pipeline unique fingerprint", "committedDate": "2020-01-09T11:44:03Z", "type": "commit"}, {"oid": "22ba60a27bea6b1ee0828609b59e507946062c9b", "url": "https://github.com/gocd/gocd/commit/22ba60a27bea6b1ee0828609b59e507946062c9b", "message": "Move feed entries based on pipeline counter", "committedDate": "2020-01-09T11:46:23Z", "type": "commit"}, {"oid": "c75add076ab26822049e0f6735cc37fae057fe19", "url": "https://github.com/gocd/gocd/commit/c75add076ab26822049e0f6735cc37fae057fe19", "message": "Removing change set url from scm and package material", "committedDate": "2020-01-09T11:46:23Z", "type": "commit"}, {"oid": "6e225293cc2476fe81a322c0d70901d5213f02d7", "url": "https://github.com/gocd/gocd/commit/6e225293cc2476fe81a322c0d70901d5213f02d7", "message": "Adding toggle for feed api on stage details page", "committedDate": "2020-01-09T11:46:24Z", "type": "commit"}, {"oid": "ea69525cd6b82b18d7a58b6de29c4a964b02735c", "url": "https://github.com/gocd/gocd/commit/ea69525cd6b82b18d7a58b6de29c4a964b02735c", "message": "Adding author name as cdata instead of text as it may contain some special chars", "committedDate": "2020-01-09T11:46:24Z", "type": "commit"}, {"oid": "18f9510e00eb5a752e428fb30076fbaa69081f52", "url": "https://github.com/gocd/gocd/commit/18f9510e00eb5a752e428fb30076fbaa69081f52", "message": "Updated year in copyright headers", "committedDate": "2020-01-09T11:46:24Z", "type": "commit"}, {"oid": "63511e8f3c2163ae4adbf814434c8fb04bab64fe", "url": "https://github.com/gocd/gocd/commit/63511e8f3c2163ae4adbf814434c8fb04bab64fe", "message": "Moved common params as constants", "committedDate": "2020-01-09T11:46:24Z", "type": "commit"}, {"oid": "3c4c161e62aa1f0eb389117831ae148dc08977b2", "url": "https://github.com/gocd/gocd/commit/3c4c161e62aa1f0eb389117831ae148dc08977b2", "message": "Print dates in UTC timezone", "committedDate": "2020-01-09T11:46:25Z", "type": "commit"}, {"oid": "189223ef27e4046bd5207436d1705b5d578e685c", "url": "https://github.com/gocd/gocd/commit/189223ef27e4046bd5207436d1705b5d578e685c", "message": "Set content type based on status and accept header\n\nIn case of faulire, send error message based on the requested accept\nheader type. This will allow client interpret the error message as\nper requested types.\n\nIn case of success, Feed APIs always sends response as xml. Hence\nexpected content types can be one from application/xml, text/xml,\napplication/rss+xml or application/atom+xml. Content type will be\nset based on the Accept header. Defaults to application/xml if accept\n header contains non xml content type", "committedDate": "2020-01-09T11:46:25Z", "type": "commit"}, {"oid": "189223ef27e4046bd5207436d1705b5d578e685c", "url": "https://github.com/gocd/gocd/commit/189223ef27e4046bd5207436d1705b5d578e685c", "message": "Set content type based on status and accept header\n\nIn case of faulire, send error message based on the requested accept\nheader type. This will allow client interpret the error message as\nper requested types.\n\nIn case of success, Feed APIs always sends response as xml. Hence\nexpected content types can be one from application/xml, text/xml,\napplication/rss+xml or application/atom+xml. Content type will be\nset based on the Accept header. Defaults to application/xml if accept\n header contains non xml content type", "committedDate": "2020-01-09T11:46:25Z", "type": "forcePushed"}]}