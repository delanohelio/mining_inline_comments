{"pr_number": 787, "pr_title": "ValidPatternVisitor now checks #INCLUDE and #EXCLUDE functions.", "pr_createdAt": "2020-03-20T16:10:48Z", "pr_url": "https://github.com/NationalSecurityAgency/datawave/pull/787", "timeline": [{"oid": "727cb7d0be73169ed77f68e0c7cd4988c23b2409", "url": "https://github.com/NationalSecurityAgency/datawave/commit/727cb7d0be73169ed77f68e0c7cd4988c23b2409", "message": "ValidPatternVisitor now checks #INCLUDE and #EXCLUDE functions.", "committedDate": "2020-03-20T16:07:01Z", "type": "commit"}, {"oid": "17fd3e77ce8a8e1592b9af1a60374375dc405a8f", "url": "https://github.com/NationalSecurityAgency/datawave/commit/17fd3e77ce8a8e1592b9af1a60374375dc405a8f", "message": "Merge branch 'master' into task/ValidPatternVisitor_checkFunctions", "committedDate": "2020-03-30T16:43:44Z", "type": "commit"}, {"oid": "ecaea0e1d6bb95e534310194b0dc51f1f0135bfe", "url": "https://github.com/NationalSecurityAgency/datawave/commit/ecaea0e1d6bb95e534310194b0dc51f1f0135bfe", "message": "Merge branch 'master' into task/ValidPatternVisitor_checkFunctions", "committedDate": "2020-04-02T13:48:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwMDU3Mg==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r402500572", "bodyText": "I will have to say that a more robust solution here is to push this functionality into the function descriptor mechanism.  That way we can catch any function that might have a regex......", "author": "ivakegg", "createdAt": "2020-04-02T17:47:51Z", "path": "warehouse/query-core/src/main/java/datawave/query/jexl/visitors/ValidPatternVisitor.java", "diffHunk": "@@ -69,22 +56,73 @@ public Object visit(ASTERNode node, Object data) {\n      */\n     @Override\n     public Object visit(ASTNRNode node, Object data) {\n+        parseAndPutLiteral(node);\n+        return data;\n+    }\n+    \n+    @Override\n+    public Object visit(ASTFunctionNode node, Object data) {\n+        \n+        if (node.jjtGetNumChildren() >= 4) {", "originalCommit": "ecaea0e1d6bb95e534310194b0dc51f1f0135bfe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwMzY3MA==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r402503670", "bodyText": "The JexlArgumentDescriptor already has a regexArguments() method to determine if the literal arguments are to be treated as regexes.  We should use that along with fieldsForNormalization to determine which arguments to test.", "author": "ivakegg", "createdAt": "2020-04-02T17:53:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwMDU3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxOTU2NQ==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r402519565", "bodyText": "And then we can apply this to all functions that return true for regexArguments().....", "author": "ivakegg", "createdAt": "2020-04-02T18:19:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwMDU3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUyMzQ3Mg==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r402523472", "bodyText": "I took a look at some of the existing descriptors and see where you're going with this. Should have an update for this pr tomorow sometime", "author": "apmoriarty", "createdAt": "2020-04-02T18:26:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwMDU3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzODYzMw==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r402538633", "bodyText": "An example of how to do this can be found in the datawave.query.jexl.visitors.FunctionNormalizationRebuildingVisitor.", "author": "ivakegg", "createdAt": "2020-04-02T18:52:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwMDU3Mg=="}], "type": "inlineReview"}, {"oid": "a1a452d9207831004d03a274647efa87888c0959", "url": "https://github.com/NationalSecurityAgency/datawave/commit/a1a452d9207831004d03a274647efa87888c0959", "message": "Address PR comments.", "committedDate": "2020-04-03T12:34:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4MTIzOQ==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r402981239", "bodyText": "Pretty sure this is the right place to put these constants, let me know if that needs to change.", "author": "apmoriarty", "createdAt": "2020-04-03T12:49:36Z", "path": "warehouse/query-core/src/main/java/datawave/query/jexl/functions/QueryFunctions.java", "diffHunk": "@@ -22,6 +22,8 @@\n     public static final String OPTIONS_FUNCTION = \"options\";\n     public static final String UNIQUE_FUNCTION = \"unique\";\n     public static final String GROUPBY_FUNCTION = \"groupby\";\n+    public static final String INCLUDE_FUNCTION = \"include\";\n+    public static final String EXCLUDE_FUNCTION = \"exclude\";\n     ", "originalCommit": "a1a452d9207831004d03a274647efa87888c0959", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwNTYxMg==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r411605612", "bodyText": "These are EvaluationPhaseFilterFunctions, not QueryFunctions", "author": "ivakegg", "createdAt": "2020-04-20T18:41:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4MTIzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwNTk5OA==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r411605998", "bodyText": "and the functions are called includeRegex and excludeRegex", "author": "ivakegg", "createdAt": "2020-04-20T18:42:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4MTIzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4MTg4MQ==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r402981881", "bodyText": "Tried to scope down the number of patterns that get parsed. Might not be necessary.", "author": "apmoriarty", "createdAt": "2020-04-03T12:50:46Z", "path": "warehouse/query-core/src/main/java/datawave/query/jexl/visitors/ValidPatternVisitor.java", "diffHunk": "@@ -69,22 +59,65 @@ public Object visit(ASTERNode node, Object data) {\n      */\n     @Override\n     public Object visit(ASTNRNode node, Object data) {\n-        Object literalValue;\n+        parseAndPutPattern(node);\n+        return data;\n+    }\n+    \n+    /**\n+     * Visit an ASTFunctionNode to catch cases like #INCLUDE or #EXCLUDE that accept a regex as an argument\n+     * \n+     * @param node\n+     * @param data\n+     * @return\n+     */\n+    @Override\n+    public Object visit(ASTFunctionNode node, Object data) {\n         \n-        // Catch the situation where a user might enter FIELD1 !~ VALUE1\n-        try {\n-            literalValue = JexlASTHelper.getLiteralValue(node);\n-        } catch (NoSuchElementException e) {\n-            return data;\n+        // Should pull back an EvaluationPhaseFilterFunctionsDescriptor\n+        JexlArgumentDescriptor descriptor = JexlFunctionArgumentDescriptorFactory.F.getArgumentDescriptor(node);\n+        if (descriptor == null) {\n+            throw new IllegalStateException(\"Could not get descriptor for ASTFunctionNode\");\n         }\n         \n+        if (descriptor.regexArguments()) {\n+            // Extract the args for this function\n+            FunctionJexlNodeVisitor functionVisitor = new FunctionJexlNodeVisitor();\n+            functionVisitor.visit(node, null);\n+            List<JexlNode> args = functionVisitor.args();\n+            for (JexlNode arg : args) {\n+                // Only take the literals\n+                if (arg instanceof ASTStringLiteral) {\n+                    parseAndPutPattern(arg);\n+                }\n+            }\n+        }\n+        // Do not descend to children, the ValidPatternVisitor views a function node as a leaf node.\n+        return data;\n+    }\n+    \n+    /**\n+     * Parse a literal value and put into the pattern cache if it does not exist.\n+     *\n+     * @param node\n+     */\n+    public void parseAndPutPattern(JexlNode node) {\n+        // Catch the situation where a user might enter FIELD1 !~ VALUE1\n+        Object literalValue = JexlASTHelper.getLiteralValue(node);\n         if (literalValue != null && String.class.equals(literalValue.getClass())) {\n             String literalString = (String) literalValue;\n-            if (patternCache.containsKey(literalString)) {\n-                return data;\n+            // Only parse literals that contain a regex char\n+            if (StringUtils.containsAny(literalString, \"?.*^+-_[](){}\")) {", "originalCommit": "a1a452d9207831004d03a274647efa87888c0959", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwOTk2Mw==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r411609963", "bodyText": "I don't think this is necessary, and in fact could be problematic.  A Regex is not guaranteed to contain one of those characters.  Perhaps a better way to go is if the literal contains only alphanumeric characters.", "author": "ivakegg", "createdAt": "2020-04-20T18:48:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4MTg4MQ=="}], "type": "inlineReview"}, {"oid": "7fab0fec7738b6d183dd14d5912617525ebc8f69", "url": "https://github.com/NationalSecurityAgency/datawave/commit/7fab0fec7738b6d183dd14d5912617525ebc8f69", "message": "Merge branch 'master' into task/ValidPatternVisitor_checkFunctions", "committedDate": "2020-04-03T14:16:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwNjE0MQ==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r411606141", "bodyText": "Wrong functions descriptor.", "author": "ivakegg", "createdAt": "2020-04-20T18:42:24Z", "path": "warehouse/query-core/src/main/java/datawave/query/jexl/functions/QueryFunctionsDescriptor.java", "diffHunk": "@@ -138,6 +138,10 @@ private static void verify(String name, int numArgs) {\n             if (numArgs == 0) {\n                 throw new IllegalArgumentException(\"Expected at least one argument to the \" + name + \" function\");\n             }\n+        } else if (name.equals(QueryFunctions.INCLUDE_FUNCTION) || name.equals(QueryFunctions.EXCLUDE_FUNCTION)) {", "originalCommit": "7fab0fec7738b6d183dd14d5912617525ebc8f69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxOTA0NA==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r415719044", "bodyText": "Got it.", "author": "apmoriarty", "createdAt": "2020-04-27T11:05:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwNjE0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwNzgwMg==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r411607802", "bodyText": "I would leave this the way it was.", "author": "ivakegg", "createdAt": "2020-04-20T18:45:03Z", "path": "warehouse/query-core/src/main/java/datawave/query/language/functions/jexl/Exclude.java", "diffHunk": "@@ -1,11 +1,12 @@\n package datawave.query.language.functions.jexl;\n \n+import datawave.query.jexl.functions.QueryFunctions;\n import datawave.query.language.functions.QueryFunction;\n import datawave.query.search.WildcardFieldedFilter;\n \n public class Exclude extends AbstractEvaluationPhaseFunction {\n     public Exclude() {\n-        super(\"exclude\");\n+        super(QueryFunctions.EXCLUDE_FUNCTION);", "originalCommit": "7fab0fec7738b6d183dd14d5912617525ebc8f69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwNzk1MQ==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r411607951", "bodyText": "and ditto for the other language function classes", "author": "ivakegg", "createdAt": "2020-04-20T18:45:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwNzgwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxODc2Mg==", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r415718762", "bodyText": "I'll revert that to the way it was", "author": "apmoriarty", "createdAt": "2020-04-27T11:05:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwNzgwMg=="}], "type": "inlineReview"}, {"oid": "e974537d9a65a0b3b852c3c26a093e9fab4f31d2", "url": "https://github.com/NationalSecurityAgency/datawave/commit/e974537d9a65a0b3b852c3c26a093e9fab4f31d2", "message": "Address PR comments.", "committedDate": "2020-04-27T11:04:31Z", "type": "commit"}, {"oid": "21b7ef85ca58edac4f2d11788be9b38922426c25", "url": "https://github.com/NationalSecurityAgency/datawave/commit/21b7ef85ca58edac4f2d11788be9b38922426c25", "message": "Merge branch 'master' into task/ValidPatternVisitor_checkFunctions", "committedDate": "2020-04-27T15:07:07Z", "type": "commit"}, {"oid": "c84bdf03c16dda41edaed20157881452bf6088d8", "url": "https://github.com/NationalSecurityAgency/datawave/commit/c84bdf03c16dda41edaed20157881452bf6088d8", "message": "Merge branch 'master' into task/ValidPatternVisitor_checkFunctions", "committedDate": "2020-05-06T16:29:22Z", "type": "commit"}, {"oid": "33ac86ef0fcad99399341805218b523a6368e1c2", "url": "https://github.com/NationalSecurityAgency/datawave/commit/33ac86ef0fcad99399341805218b523a6368e1c2", "message": "Merge branch 'master' into task/ValidPatternVisitor_checkFunctions", "committedDate": "2020-05-06T17:23:28Z", "type": "commit"}, {"oid": "c4dde231be16d1d7a3d5d3e00ccfb2f72056f888", "url": "https://github.com/NationalSecurityAgency/datawave/commit/c4dde231be16d1d7a3d5d3e00ccfb2f72056f888", "message": "Merge branch 'master' into task/ValidPatternVisitor_checkFunctions", "committedDate": "2020-05-14T10:45:39Z", "type": "commit"}]}