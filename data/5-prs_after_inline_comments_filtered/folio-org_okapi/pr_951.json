{"pr_number": 951, "pr_title": "OKAPI-871 FolioLoggingContext", "pr_createdAt": "2020-07-08T14:57:57Z", "pr_url": "https://github.com/folio-org/okapi/pull/951", "timeline": [{"oid": "6050ab365d20ee2ff79693bef6add5555ed6d204", "url": "https://github.com/folio-org/okapi/commit/6050ab365d20ee2ff79693bef6add5555ed6d204", "message": "OKAPI-871 FolioLoggingContext", "committedDate": "2020-07-08T13:00:21Z", "type": "commit"}, {"oid": "a254aa2e3881e691350a344a3f65599664b00aaa", "url": "https://github.com/folio-org/okapi/commit/a254aa2e3881e691350a344a3f65599664b00aaa", "message": "OKAPI-871 FolioLoggingContext", "committedDate": "2020-07-09T08:24:33Z", "type": "commit"}, {"oid": "3497c2f142fffce4205c105622d2d083ab7d4a9b", "url": "https://github.com/folio-org/okapi/commit/3497c2f142fffce4205c105622d2d083ab7d4a9b", "message": "OKAPI-871 FolioLoggingContext userId added", "committedDate": "2020-07-09T10:06:26Z", "type": "commit"}, {"oid": "dd3a943cff715588d67d796c12d19bb1d94b3544", "url": "https://github.com/folio-org/okapi/commit/dd3a943cff715588d67d796c12d19bb1d94b3544", "message": "OKAPI-871 FolioLoggingContext userId added", "committedDate": "2020-07-09T10:39:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1OTM4NA==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r452159384", "bodyText": "I don't think that we need to create yet another context map.\nVert.x already has a map we can easily access with getLocal and putLocal:\nhttps://github.com/eclipse-vertx/vert.x/blob/4.0.0-milestone5/src/main/java/io/vertx/core/impl/ContextImpl.java#L218-L220\nhttps://github.com/eclipse-vertx/vert.x/blob/4.0.0-milestone5/src/main/java/io/vertx/core/impl/AbstractContext.java#L303-L312", "author": "julianladisch", "createdAt": "2020-07-09T11:48:58Z", "path": "okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package org.folio.okapi.logging;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.core.impl.ContextInternal;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  public static final String EMPTY_VALUE = \"\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable (e.g. requestId)\n+   * @return value for key or *empty string* if there is no such key\n+   */\n+  public String lookup(String key) {\n+    return lookup(null, key);\n+  }\n+\n+  /**\n+  * Lookup value by key. LogEvent isn't used.\n+  *\n+  * @param key the name of logging variable (e.g. requestId)\n+  * @return value for key or *empty string* if there is no such key\n+  */\n+  public String lookup(LogEvent event, String key) {\n+    ContextInternal ctx = (ContextInternal) Vertx.currentContext();\n+    if (ctx != null) {\n+      return getContextMap(ctx).getOrDefault(key, EMPTY_VALUE);\n+    }\n+    return EMPTY_VALUE;\n+  }\n+\n+  /**\n+  * Put value by key to the logging context.   *\n+  * @param key the name of logging variable (e.g. requestId)\n+  */\n+  public static void put(String key, String value) {\n+    ContextInternal ctx = (ContextInternal) Vertx.currentContext();\n+    if (ctx != null) {\n+      getContextMap(ctx).put(key, value);\n+    }\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  private static ConcurrentMap<String, String> getContextMap(ContextInternal ctx) {", "originalCommit": "dd3a943cff715588d67d796c12d19bb1d94b3544", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc2MDY5NQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r452760695", "bodyText": "done", "author": "MikhailFokanov", "createdAt": "2020-07-10T10:27:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1OTM4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2MDc2OQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r452160769", "bodyText": "If we have traditional (non-JSON) log lines we may need EMPTY_VALUE as placeholder.\nFor JSON log lines this is not needed. The key should be completely omitted: https://softwareengineering.stackexchange.com/questions/343710/use-empty-string-null-or-remove-empty-property-in-api-request-response", "author": "julianladisch", "createdAt": "2020-07-09T11:51:52Z", "path": "okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package org.folio.okapi.logging;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.core.impl.ContextInternal;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  public static final String EMPTY_VALUE = \"\";", "originalCommit": "dd3a943cff715588d67d796c12d19bb1d94b3544", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI3NTM3Ng==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r452275376", "bodyText": "There is no easy way to omit empty or null values.\nReturning \"\" or adding a default value like property.requestId = to the log4j2.properties have the same result.", "author": "julianladisch", "createdAt": "2020-07-09T14:49:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2MDc2OQ=="}], "type": "inlineReview"}, {"oid": "21ef7503f84e93b2e6acc321bf42b0c2c6242d87", "url": "https://github.com/folio-org/okapi/commit/21ef7503f84e93b2e6acc321bf42b0c2c6242d87", "message": "OKAPI-871 FolioLoggingContext userId added", "committedDate": "2020-07-10T10:03:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc4MjQ1OA==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r452782458", "bodyText": "No casting is needed because getLocal is in Context.", "author": "julianladisch", "createdAt": "2020-07-10T11:18:17Z", "path": "okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package org.folio.okapi.logging;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.core.impl.ContextInternal;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  public static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable (e.g. requestId)\n+   * @return value for key or *empty string* if there is no such key\n+   */\n+  public String lookup(String key) {\n+    return lookup(null, key);\n+  }\n+\n+  /**\n+  * Lookup value by key. LogEvent isn't used.\n+  *\n+  * @param key the name of logging variable (e.g. requestId)\n+  * @return value for key or *empty string* if there is no such key\n+  */\n+  public String lookup(LogEvent event, String key) {\n+    ContextInternal ctx = (ContextInternal) Vertx.currentContext();", "originalCommit": "21ef7503f84e93b2e6acc321bf42b0c2c6242d87", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc4MjY3OA==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r452782678", "bodyText": "No casting is needed because putLocal is in Context.", "author": "julianladisch", "createdAt": "2020-07-10T11:18:50Z", "path": "okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package org.folio.okapi.logging;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.core.impl.ContextInternal;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  public static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable (e.g. requestId)\n+   * @return value for key or *empty string* if there is no such key\n+   */\n+  public String lookup(String key) {\n+    return lookup(null, key);\n+  }\n+\n+  /**\n+  * Lookup value by key. LogEvent isn't used.\n+  *\n+  * @param key the name of logging variable (e.g. requestId)\n+  * @return value for key or *empty string* if there is no such key\n+  */\n+  public String lookup(LogEvent event, String key) {\n+    ContextInternal ctx = (ContextInternal) Vertx.currentContext();\n+    if (ctx != null) {\n+      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n+      if (val != null) {\n+        return val;\n+      }\n+    }\n+    return EMPTY_VALUE;\n+  }\n+\n+  /**\n+  * Put value by key to the logging context.   *\n+  * @param key the name of logging variable (e.g. requestId)\n+  */\n+  public static void put(String key, String value) {\n+    ContextInternal ctx = (ContextInternal) Vertx.currentContext();", "originalCommit": "21ef7503f84e93b2e6acc321bf42b0c2c6242d87", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc4NTcwNA==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r452785704", "bodyText": "Do we need to add LOGGING_VAR_PREFIX here or should ProxyService prepend it?", "author": "julianladisch", "createdAt": "2020-07-10T11:26:28Z", "path": "okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package org.folio.okapi.logging;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.core.impl.ContextInternal;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  public static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable (e.g. requestId)\n+   * @return value for key or *empty string* if there is no such key\n+   */\n+  public String lookup(String key) {\n+    return lookup(null, key);\n+  }\n+\n+  /**\n+  * Lookup value by key. LogEvent isn't used.\n+  *\n+  * @param key the name of logging variable (e.g. requestId)\n+  * @return value for key or *empty string* if there is no such key\n+  */\n+  public String lookup(LogEvent event, String key) {\n+    ContextInternal ctx = (ContextInternal) Vertx.currentContext();\n+    if (ctx != null) {\n+      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n+      if (val != null) {\n+        return val;\n+      }\n+    }\n+    return EMPTY_VALUE;\n+  }\n+\n+  /**\n+  * Put value by key to the logging context.   *\n+  * @param key the name of logging variable (e.g. requestId)\n+  */\n+  public static void put(String key, String value) {\n+    ContextInternal ctx = (ContextInternal) Vertx.currentContext();\n+    if (ctx != null) {\n+      ctx.putLocal(key, value);", "originalCommit": "21ef7503f84e93b2e6acc321bf42b0c2c6242d87", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5NDQ3MQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r452794471", "bodyText": "I want to make the usage of the approach as simple, as it can be. If for putting and getting every value there was a need to add a prefix, someone would forget to put it on get or put. So I'd like to stick with the approach of putting it internally.", "author": "MikhailFokanov", "createdAt": "2020-07-10T11:48:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc4NTcwNA=="}], "type": "inlineReview"}, {"oid": "7571208a39cfac565a61288662ada60a132be040", "url": "https://github.com/folio-org/okapi/commit/7571208a39cfac565a61288662ada60a132be040", "message": "OKAPI-871 Fixes for comments", "committedDate": "2020-07-10T11:51:03Z", "type": "commit"}, {"oid": "06618ef2b8b97825b2e903a8cb9f8ebce9dbadc6", "url": "https://github.com/folio-org/okapi/commit/06618ef2b8b97825b2e903a8cb9f8ebce9dbadc6", "message": "OKAPI-871 Fixes for comments", "committedDate": "2020-07-10T11:59:33Z", "type": "commit"}, {"oid": "96f318785a198ef39bfa3c50fd10868b11005893", "url": "https://github.com/folio-org/okapi/commit/96f318785a198ef39bfa3c50fd10868b11005893", "message": "OKAPI-871 Fixes for null values", "committedDate": "2020-07-10T12:16:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyMDkzOA==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r452820938", "bodyText": "Redundant checks here.. headers are always present.  Move your stuff below the headers local and have it more readable, please.", "author": "adamdickmeiss", "createdAt": "2020-07-10T12:47:26Z", "path": "okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java", "diffHunk": "@@ -514,6 +515,18 @@ public void proxy(RoutingContext ctx) {\n       return; // Error code already set in ctx\n     }\n \n+    FolioLoggingContext.put(\"tenantId\", tenantId);\n+\n+    if (ctx.request() != null && ctx.request().headers() != null) {\n+\n+      FolioLoggingContext.put(\"requestId\", ctx.request().headers().get(XOkapiHeaders.REQUEST_ID));\n+\n+      FolioLoggingContext.put(\"moduleId\", ctx.request().headers().get(XOkapiHeaders.MODULE_ID));\n+\n+      FolioLoggingContext.put(\"userId\", ctx.request().headers().get(XOkapiHeaders.USER_ID));\n+\n+    }\n+\n     final MultiMap headers = ctx.request().headers();\n     sanitizeAuthHeaders(headers);\n     tenantManager.get(tenantId, gres -> {", "originalCommit": "96f318785a198ef39bfa3c50fd10868b11005893", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0NDgwNg==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454344806", "bodyText": "done", "author": "MikhailFokanov", "createdAt": "2020-07-14T13:11:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyMDkzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1ODQ1MQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r452958451", "bodyText": "The class should be moved from okapi-core to okapi-common that already is a dependency of RMB: https://github.com/folio-org/raml-module-builder/blob/v30.2.4/pom.xml#L162", "author": "julianladisch", "createdAt": "2020-07-10T16:50:05Z", "path": "okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package org.folio.okapi.logging;", "originalCommit": "96f318785a198ef39bfa3c50fd10868b11005893", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0NTQwOQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454345409", "bodyText": "done", "author": "MikhailFokanov", "createdAt": "2020-07-14T13:12:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1ODQ1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2MDA0NQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r452960045", "bodyText": "\"Folio\" can be removed from the class name because \"folio\" is already in the package name: \"org.folio.okapi.logging\" or \"org.folio.okapi.common\"", "author": "julianladisch", "createdAt": "2020-07-10T16:53:26Z", "path": "okapi-core/src/main/java/org/folio/okapi/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package org.folio.okapi.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {", "originalCommit": "96f318785a198ef39bfa3c50fd10868b11005893", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM2Mzc0Nw==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454363747", "bodyText": "In log4j2.properties the name \"FolioLoggingContext\" used as: $${FolioLoggingContext:userid}. If it is just $${LoggingContext:userid}, the name is not self-explaining and there can be some collisions with some other LoggingContext", "author": "MikhailFokanov", "createdAt": "2020-07-14T13:40:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2MDA0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM2NDQ0Mg==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454364442", "bodyText": "Having\n@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\npublic class LoggingContext implements StrLookup {\n\nfor me also looks not so good.", "author": "MikhailFokanov", "createdAt": "2020-07-14T13:41:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2MDA0NQ=="}], "type": "inlineReview"}, {"oid": "a5268dac92ba8d22df969242c6645add40584bdc", "url": "https://github.com/folio-org/okapi/commit/a5268dac92ba8d22df969242c6645add40584bdc", "message": "OKAPI-871 Move to common", "committedDate": "2020-07-14T13:05:29Z", "type": "commit"}, {"oid": "d7f27962e97e166334f526f6802b833206fea5e2", "url": "https://github.com/folio-org/okapi/commit/d7f27962e97e166334f526f6802b833206fea5e2", "message": "OKAPI-871 Dev log4j configuration", "committedDate": "2020-07-14T13:11:20Z", "type": "commit"}, {"oid": "f3f4593e6f4ceb7bfa3ae7c397ae17a7d6082a77", "url": "https://github.com/folio-org/okapi/commit/f3f4593e6f4ceb7bfa3ae7c397ae17a7d6082a77", "message": "OKAPI-871 Dev log4j configuration", "committedDate": "2020-07-14T13:19:41Z", "type": "commit"}, {"oid": "ff2fe11c0f195f26cfc0ee17f257491c42004166", "url": "https://github.com/folio-org/okapi/commit/ff2fe11c0f195f26cfc0ee17f257491c42004166", "message": "OKAPI-871 Unit tests", "committedDate": "2020-07-14T14:10:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ5NjIxNA==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454496214", "bodyText": "Can you be more specific about the usage of this class? It should mention log4j, Vertx context, Vertx vertx local data.", "author": "julianladisch", "createdAt": "2020-07-14T16:46:35Z", "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.", "originalCommit": "ff2fe11c0f195f26cfc0ee17f257491c42004166", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ5NzcwMQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454497701", "bodyText": "Can you add javadoc for value and explain that null is accepted and will remove the entry?", "author": "julianladisch", "createdAt": "2020-07-14T16:48:40Z", "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n+\n+  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n+\n+  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n+\n+  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable (e.g. requestId)\n+   * @return value for key or *empty string* if there is no such key\n+   */\n+  public String lookup(String key) {\n+    return lookup(null, key);\n+  }\n+\n+  /**\n+  * Lookup value by key. LogEvent isn't used.\n+  *\n+  * @param key the name of logging variable (e.g. requestId)\n+  * @return value for key or *empty string* if there is no such key\n+  */\n+  public String lookup(LogEvent event, String key) {\n+    Context ctx = Vertx.currentContext();\n+    if (ctx != null) {\n+      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n+      if (val != null) {\n+        return val;\n+      }\n+    }\n+    return EMPTY_VALUE;\n+  }\n+\n+  /**\n+  * Put value by key to the logging context.   *\n+  * @param key the name of logging variable (e.g. requestId)\n+  */", "originalCommit": "ff2fe11c0f195f26cfc0ee17f257491c42004166", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ5ODI4OQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454498289", "bodyText": "VertxLoggingContext might be a better name.", "author": "julianladisch", "createdAt": "2020-07-14T16:49:35Z", "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {", "originalCommit": "ff2fe11c0f195f26cfc0ee17f257491c42004166", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMzOTkzNA==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r457339934", "bodyText": "I think, that there is a lot of stuff related to Vertx and VertxLoggingContext can be jumble with other Vertx classes. Does that make sense?", "author": "MikhailFokanov", "createdAt": "2020-07-20T12:32:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ5ODI4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUwMjMwNw==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454502307", "bodyText": "The return value should be asserted.", "author": "julianladisch", "createdAt": "2020-07-14T16:55:36Z", "path": "okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.folio.okapi.common;\n+\n+import org.folio.okapi.common.logging.FolioLoggingContext;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class FolioLoggingContextTest {\n+\n+\n+  private static String KEY = \"KEY\";\n+  private static String VALUE = \"VALUE\";\n+\n+  private Vertx vertx;\n+\n+  @Before\n+  public void setup() {\n+    vertx = Vertx.vertx();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    vertx.close();\n+  }\n+\n+  @Test\n+  public void lookupWithoutContextTest() {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    loggingContext.lookup(null);", "originalCommit": "ff2fe11c0f195f26cfc0ee17f257491c42004166", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUwMzE1MA==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454503150", "bodyText": "This line should be wrapped in yet another vertx.runOnContext to make sure that the entry really is passed on.", "author": "julianladisch", "createdAt": "2020-07-14T16:56:58Z", "path": "okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.folio.okapi.common;\n+\n+import org.folio.okapi.common.logging.FolioLoggingContext;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class FolioLoggingContextTest {\n+\n+\n+  private static String KEY = \"KEY\";\n+  private static String VALUE = \"VALUE\";\n+\n+  private Vertx vertx;\n+\n+  @Before\n+  public void setup() {\n+    vertx = Vertx.vertx();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    vertx.close();\n+  }\n+\n+  @Test\n+  public void lookupWithoutContextTest() {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    loggingContext.lookup(null);\n+  }\n+\n+\n+  @Test\n+  public void lookupPutTest(TestContext context) {\n+    vertx.runOnContext(e -> {\n+      FolioLoggingContext loggingContext = new FolioLoggingContext();\n+      FolioLoggingContext.put(KEY, VALUE);\n+      context.assertEquals(loggingContext.lookup(KEY), VALUE);", "originalCommit": "ff2fe11c0f195f26cfc0ee17f257491c42004166", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUwMzk3OQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454503979", "bodyText": "Async is required, otherwise the code inside the runOnContext is executed after test completion and therefore cannot report any failures.", "author": "julianladisch", "createdAt": "2020-07-14T16:58:21Z", "path": "okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.folio.okapi.common;\n+\n+import org.folio.okapi.common.logging.FolioLoggingContext;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class FolioLoggingContextTest {\n+\n+\n+  private static String KEY = \"KEY\";\n+  private static String VALUE = \"VALUE\";\n+\n+  private Vertx vertx;\n+\n+  @Before\n+  public void setup() {\n+    vertx = Vertx.vertx();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    vertx.close();\n+  }\n+\n+  @Test\n+  public void lookupWithoutContextTest() {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    loggingContext.lookup(null);\n+  }\n+\n+\n+  @Test\n+  public void lookupPutTest(TestContext context) {\n+    vertx.runOnContext(e -> {", "originalCommit": "ff2fe11c0f195f26cfc0ee17f257491c42004166", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUwNDM3Mg==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454504372", "bodyText": "Async is missing", "author": "julianladisch", "createdAt": "2020-07-14T16:58:58Z", "path": "okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.folio.okapi.common;\n+\n+import org.folio.okapi.common.logging.FolioLoggingContext;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class FolioLoggingContextTest {\n+\n+\n+  private static String KEY = \"KEY\";\n+  private static String VALUE = \"VALUE\";\n+\n+  private Vertx vertx;\n+\n+  @Before\n+  public void setup() {\n+    vertx = Vertx.vertx();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    vertx.close();\n+  }\n+\n+  @Test\n+  public void lookupWithoutContextTest() {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    loggingContext.lookup(null);\n+  }\n+\n+\n+  @Test\n+  public void lookupPutTest(TestContext context) {\n+    vertx.runOnContext(e -> {\n+      FolioLoggingContext loggingContext = new FolioLoggingContext();\n+      FolioLoggingContext.put(KEY, VALUE);\n+      context.assertEquals(loggingContext.lookup(KEY), VALUE);\n+    });\n+  }\n+\n+  @Test\n+  public void lookupNullTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();", "originalCommit": "ff2fe11c0f195f26cfc0ee17f257491c42004166", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUwODcyNA==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454508724", "bodyText": "These should be moved to okapi-core ProxyService, because this logging context is a general purpose library class.", "author": "julianladisch", "createdAt": "2020-07-14T17:06:11Z", "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n+\n+  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n+\n+  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n+\n+  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";", "originalCommit": "ff2fe11c0f195f26cfc0ee17f257491c42004166", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc3NTYzOQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r455775639", "bodyText": "These are general platform wide constants, which make sense for every module.", "author": "MikhailFokanov", "createdAt": "2020-07-16T13:14:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUwODcyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxMDI1Nw==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454510257", "bodyText": "Can you add @Override?", "author": "julianladisch", "createdAt": "2020-07-14T17:08:47Z", "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n+\n+  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n+\n+  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n+\n+  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable (e.g. requestId)\n+   * @return value for key or *empty string* if there is no such key\n+   */\n+  public String lookup(String key) {", "originalCommit": "ff2fe11c0f195f26cfc0ee17f257491c42004166", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxMDM5OA==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454510398", "bodyText": "Can you add @Override?", "author": "julianladisch", "createdAt": "2020-07-14T17:09:04Z", "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n+\n+  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n+\n+  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n+\n+  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable (e.g. requestId)\n+   * @return value for key or *empty string* if there is no such key\n+   */\n+  public String lookup(String key) {\n+    return lookup(null, key);\n+  }\n+\n+  /**\n+  * Lookup value by key. LogEvent isn't used.\n+  *\n+  * @param key the name of logging variable (e.g. requestId)\n+  * @return value for key or *empty string* if there is no such key\n+  */\n+  public String lookup(LogEvent event, String key) {", "originalCommit": "ff2fe11c0f195f26cfc0ee17f257491c42004166", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxMDg5OQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454510899", "bodyText": "The return value should be asserted.", "author": "julianladisch", "createdAt": "2020-07-14T17:09:55Z", "path": "okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.folio.okapi.common;\n+\n+import org.folio.okapi.common.logging.FolioLoggingContext;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class FolioLoggingContextTest {\n+\n+\n+  private static String KEY = \"KEY\";\n+  private static String VALUE = \"VALUE\";\n+\n+  private Vertx vertx;\n+\n+  @Before\n+  public void setup() {\n+    vertx = Vertx.vertx();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    vertx.close();\n+  }\n+\n+  @Test\n+  public void lookupWithoutContextTest() {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    loggingContext.lookup(null);\n+  }\n+\n+\n+  @Test\n+  public void lookupPutTest(TestContext context) {\n+    vertx.runOnContext(e -> {\n+      FolioLoggingContext loggingContext = new FolioLoggingContext();\n+      FolioLoggingContext.put(KEY, VALUE);\n+      context.assertEquals(loggingContext.lookup(KEY), VALUE);\n+    });\n+  }\n+\n+  @Test\n+  public void lookupNullTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    vertx.runOnContext(e -> {\n+      loggingContext.lookup(null);", "originalCommit": "ff2fe11c0f195f26cfc0ee17f257491c42004166", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxNTI1OA==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454515258", "bodyText": "null as a key may cause an exception, can you use a proper key?", "author": "julianladisch", "createdAt": "2020-07-14T17:17:05Z", "path": "okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.folio.okapi.common;\n+\n+import org.folio.okapi.common.logging.FolioLoggingContext;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class FolioLoggingContextTest {\n+\n+\n+  private static String KEY = \"KEY\";\n+  private static String VALUE = \"VALUE\";\n+\n+  private Vertx vertx;\n+\n+  @Before\n+  public void setup() {\n+    vertx = Vertx.vertx();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    vertx.close();\n+  }\n+\n+  @Test\n+  public void lookupWithoutContextTest() {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    loggingContext.lookup(null);", "originalCommit": "ff2fe11c0f195f26cfc0ee17f257491c42004166", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxNjA0MQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454516041", "bodyText": "Can you add whether null key is allowed?\nThe same for lookup(LogEvent, String)?", "author": "julianladisch", "createdAt": "2020-07-14T17:18:25Z", "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n+\n+  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n+\n+  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n+\n+  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable (e.g. requestId)", "originalCommit": "ff2fe11c0f195f26cfc0ee17f257491c42004166", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxODM1MA==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454518350", "bodyText": "You need to swap the order for context.assertEquals(expected, actual).", "author": "julianladisch", "createdAt": "2020-07-14T17:22:10Z", "path": "okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.folio.okapi.common;\n+\n+import org.folio.okapi.common.logging.FolioLoggingContext;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class FolioLoggingContextTest {\n+\n+\n+  private static String KEY = \"KEY\";\n+  private static String VALUE = \"VALUE\";\n+\n+  private Vertx vertx;\n+\n+  @Before\n+  public void setup() {\n+    vertx = Vertx.vertx();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    vertx.close();\n+  }\n+\n+  @Test\n+  public void lookupWithoutContextTest() {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    loggingContext.lookup(null);\n+  }\n+\n+\n+  @Test\n+  public void lookupPutTest(TestContext context) {\n+    vertx.runOnContext(e -> {\n+      FolioLoggingContext loggingContext = new FolioLoggingContext();\n+      FolioLoggingContext.put(KEY, VALUE);\n+      context.assertEquals(loggingContext.lookup(KEY), VALUE);\n+    });\n+  }\n+\n+  @Test\n+  public void lookupNullTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    vertx.runOnContext(e -> {\n+      loggingContext.lookup(null);\n+    });\n+  }\n+\n+  @Test\n+  public void putNullTest(TestContext context) {\n+    Async async = context.async();\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    vertx.runOnContext(e -> {\n+          FolioLoggingContext.put(KEY, null);\n+          context.assertEquals(loggingContext.lookup(KEY), \"\");", "originalCommit": "ff2fe11c0f195f26cfc0ee17f257491c42004166", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxODU2Nw==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r454518567", "bodyText": "You need to swap the order for context.assertEquals(expected, actual).", "author": "julianladisch", "createdAt": "2020-07-14T17:22:33Z", "path": "okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.folio.okapi.common;\n+\n+import org.folio.okapi.common.logging.FolioLoggingContext;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class FolioLoggingContextTest {\n+\n+\n+  private static String KEY = \"KEY\";\n+  private static String VALUE = \"VALUE\";\n+\n+  private Vertx vertx;\n+\n+  @Before\n+  public void setup() {\n+    vertx = Vertx.vertx();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    vertx.close();\n+  }\n+\n+  @Test\n+  public void lookupWithoutContextTest() {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    loggingContext.lookup(null);\n+  }\n+\n+\n+  @Test\n+  public void lookupPutTest(TestContext context) {\n+    vertx.runOnContext(e -> {\n+      FolioLoggingContext loggingContext = new FolioLoggingContext();\n+      FolioLoggingContext.put(KEY, VALUE);\n+      context.assertEquals(loggingContext.lookup(KEY), VALUE);", "originalCommit": "ff2fe11c0f195f26cfc0ee17f257491c42004166", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a0ca1de29e993454d22074bd463117a7c315bd02", "url": "https://github.com/folio-org/okapi/commit/a0ca1de29e993454d22074bd463117a7c315bd02", "message": "OKAPI-871 Unit tests", "committedDate": "2020-07-20T13:25:36Z", "type": "commit"}, {"oid": "5e3ee1867a8b13ea78349e20874bb70bc39750ae", "url": "https://github.com/folio-org/okapi/commit/5e3ee1867a8b13ea78349e20874bb70bc39750ae", "message": "OKAPI-871 Unit tests", "committedDate": "2020-07-20T13:48:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ0NDQ5MQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r457444491", "bodyText": "Can you fix the javadoc? The build fails with a Checkstyle violation.", "author": "julianladisch", "createdAt": "2020-07-20T14:35:19Z", "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ * The variables are stored in the local vert.x\n+ * {@link io.vertx.core.Context#putLocal Context}\n+ * and can be used in log4j log lines by using\n+ * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n+ *\n+ * , Vertx vertx local data\n+ */", "originalCommit": "5e3ee1867a8b13ea78349e20874bb70bc39750ae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ0NTU1Mg==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r457445552", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              * @param value the value of  logging variable.\n          \n          \n            \n              * @param value the value of logging variable.", "author": "julianladisch", "createdAt": "2020-07-20T14:36:18Z", "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ * The variables are stored in the local vert.x\n+ * {@link io.vertx.core.Context#putLocal Context}\n+ * and can be used in log4j log lines by using\n+ * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}\n+ *\n+ * , Vertx vertx local data\n+ */\n+@Plugin(name = \"FolioLoggingContext\", category = StrLookup.CATEGORY)\n+public class FolioLoggingContext implements StrLookup {\n+\n+  private static final String EMPTY_VALUE = \"\";\n+\n+  private static final String LOGGING_VAR_PREFIX = \"folio_\";\n+\n+  public static final String TENANT_ID_LOGGING_VAR_NAME = \"tenantid\";\n+\n+  public static final String REQUEST_ID_LOGGING_VAR_NAME = \"requestid\";\n+\n+  public static final String MODULE_ID_LOGGING_VAR_NAME = \"moduleid\";\n+\n+  public static final String USER_ID_LOGGING_VAR_NAME = \"userid\";\n+\n+  /**\n+   * Lookup value by key.\n+   *\n+   * @param key the name of logging variable, {@code null} key isn't allowed\n+   * @return value for key or *empty string* if there is no such key\n+   */\n+  @Override\n+  public String lookup(String key) {\n+    return lookup(null, key);\n+  }\n+\n+  /**\n+  * Lookup value by key. LogEvent isn't used.\n+  *\n+  * @param key the name of logging variable, {@code null} key isn't allowed\n+  * @return value for key or *empty string* if there is no such key\n+  */\n+  @Override\n+  public String lookup(LogEvent event, String key) {\n+    if (key == null) {\n+      throw new IllegalArgumentException(\"Key cannot be null\");\n+    }\n+    Context ctx = Vertx.currentContext();\n+    if (ctx != null) {\n+      String val = ctx.getLocal(LOGGING_VAR_PREFIX + key);\n+      if (val != null) {\n+        return val;\n+      }\n+    }\n+    return EMPTY_VALUE;\n+  }\n+\n+  /**\n+  * Put value by key to the logging context.\n+  * @param key the name of logging variable, {@code null} key isn't allowed.\n+  * @param value the value of  logging variable.", "originalCommit": "5e3ee1867a8b13ea78349e20874bb70bc39750ae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "41a043d50cea7b1ee45f1f9fb757071a7ca57484", "url": "https://github.com/folio-org/okapi/commit/41a043d50cea7b1ee45f1f9fb757071a7ca57484", "message": "Update okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java\n\nCo-authored-by: julianladisch <julianladisch@users.noreply.github.com>", "committedDate": "2020-07-20T14:36:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2OTM4OQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r457469389", "bodyText": "When running mvn clean install there isn't a single unit test that logs a user id. Can you extend an existing test by adding XOkapiHeaders.USER_ID? You don't need to assert that it is logged, I can look at the output.", "author": "julianladisch", "createdAt": "2020-07-20T15:01:47Z", "path": "okapi-core/src/main/java/org/folio/okapi/managers/ProxyService.java", "diffHunk": "@@ -515,6 +516,16 @@ public void proxy(RoutingContext ctx) {\n     }\n \n     final MultiMap headers = ctx.request().headers();\n+\n+    FolioLoggingContext.put(FolioLoggingContext.TENANT_ID_LOGGING_VAR_NAME,\n+        tenantId);\n+    FolioLoggingContext.put(FolioLoggingContext.REQUEST_ID_LOGGING_VAR_NAME,\n+        headers.get(XOkapiHeaders.REQUEST_ID));\n+    FolioLoggingContext.put(FolioLoggingContext.MODULE_ID_LOGGING_VAR_NAME,\n+        headers.get(XOkapiHeaders.MODULE_ID));\n+    FolioLoggingContext.put(FolioLoggingContext.USER_ID_LOGGING_VAR_NAME,\n+        headers.get(XOkapiHeaders.USER_ID));", "originalCommit": "41a043d50cea7b1ee45f1f9fb757071a7ca57484", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg0MTQ2OA==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r460841468", "bodyText": "done", "author": "MikhailFokanov", "createdAt": "2020-07-27T12:04:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2OTM4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkxNjYzOQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r460916639", "bodyText": "done", "author": "MikhailFokanov", "createdAt": "2020-07-27T14:08:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2OTM4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU1OTY4NQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r461559685", "bodyText": "This works if the user id is passed in as X-Okapi-User-Id header.\nHowever, the front-end passes in the user id in the token. Okapi sends the token to mod-authtoken for validation. When Okapi gets the reply from mod-authtoken that the validation was successful we know the user id and can set the user id in the FolioLoggingContext. Details: https://github.com/folio-org/okapi/blob/master/doc/security.md\nCan you find the code where Okapi gets the validation result and add code for setting the user id?", "author": "julianladisch", "createdAt": "2020-07-28T13:00:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2OTM4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIxODQyNQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r462218425", "bodyText": "Are we interested in userId, username (login) or both? I searched Okapi code and looks like currently it does not have a central place to extract those info from the token. I am thinking that we can add those methods to https://github.com/folio-org/okapi/blob/master/okapi-common/src/main/java/org/folio/okapi/common/OkapiToken.java. For example like this https://github.com/folio-org/okapi/compare/username-userid?expand=1", "author": "hjiebsco", "createdAt": "2020-07-29T11:07:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2OTM4OQ=="}], "type": "inlineReview"}, {"oid": "e8a634bd1fdf79569544676507bd7cc79c640c58", "url": "https://github.com/folio-org/okapi/commit/e8a634bd1fdf79569544676507bd7cc79c640c58", "message": "OKAPI-871 Fixes", "committedDate": "2020-07-23T15:53:53Z", "type": "commit"}, {"oid": "125eefe1c3fa42ac92684dd5f0a85381e4286713", "url": "https://github.com/folio-org/okapi/commit/125eefe1c3fa42ac92684dd5f0a85381e4286713", "message": "OKAPI-871 Fixes", "committedDate": "2020-07-23T15:54:16Z", "type": "commit"}, {"oid": "b67f6e621f5d2fecf03610da69878abf42cd70de", "url": "https://github.com/folio-org/okapi/commit/b67f6e621f5d2fecf03610da69878abf42cd70de", "message": "Merge remote-tracking branch 'origin/OKAPI-871' into OKAPI-871", "committedDate": "2020-07-23T15:54:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4NzY3OQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r459587679", "bodyText": "I don't see StrLookup in log4j2.properties. I only see references like $${FolioLoggingContext:requestid}. Can you make the usage explanation more instructive?", "author": "julianladisch", "createdAt": "2020-07-23T16:47:27Z", "path": "okapi-common/src/main/java/org/folio/okapi/common/logging/FolioLoggingContext.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.folio.okapi.common.logging;\n+\n+import io.vertx.core.Context;\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.lookup.StrLookup;\n+\n+/**\n+ * This class should be used for storing context variables\n+ * and use them in logging events.\n+ * The variables are stored in the local vert.x\n+ * {@link io.vertx.core.Context#putLocal Context}\n+ * and can be used in log4j log lines by using\n+ * {@link org.apache.logging.log4j.core.lookup.StrLookup StrLookup}", "originalCommit": "b67f6e621f5d2fecf03610da69878abf42cd70de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg0MTUwNw==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r460841507", "bodyText": "done", "author": "MikhailFokanov", "createdAt": "2020-07-27T12:04:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4NzY3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkxNjczNg==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r460916736", "bodyText": "done", "author": "MikhailFokanov", "createdAt": "2020-07-27T14:08:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4NzY3OQ=="}], "type": "inlineReview"}, {"oid": "e14ddcb0b44ccb1b0d1c9c5f5927c239159321f9", "url": "https://github.com/folio-org/okapi/commit/e14ddcb0b44ccb1b0d1c9c5f5927c239159321f9", "message": "Merge branch 'master' into OKAPI-871", "committedDate": "2020-07-23T17:04:16Z", "type": "commit"}, {"oid": "a4c75e868db3be0a12fc188897dedcf1c9050a49", "url": "https://github.com/folio-org/okapi/commit/a4c75e868db3be0a12fc188897dedcf1c9050a49", "message": "OKAPI-871 Review fixes", "committedDate": "2020-07-27T12:02:51Z", "type": "commit"}, {"oid": "bbcb10b0cd9c736df93cddb4e8197dabe062aa57", "url": "https://github.com/folio-org/okapi/commit/bbcb10b0cd9c736df93cddb4e8197dabe062aa57", "message": "Merge remote-tracking branch 'origin/OKAPI-871' into OKAPI-871", "committedDate": "2020-07-27T12:03:52Z", "type": "commit"}, {"oid": "fe2ae252812765ac8a1af3c4775556298581d839", "url": "https://github.com/folio-org/okapi/commit/fe2ae252812765ac8a1af3c4775556298581d839", "message": "OKAPI-871 Review fixes", "committedDate": "2020-07-27T12:33:37Z", "type": "commit"}, {"oid": "3ddb504fc362abfe011a6051abb0f08f2af262fc", "url": "https://github.com/folio-org/okapi/commit/3ddb504fc362abfe011a6051abb0f08f2af262fc", "message": "Add methods to extract username and userId", "committedDate": "2020-07-29T11:00:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIyMzU0OQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r462223549", "bodyText": "Maybe also add following lines?\n    FolioLoggingContext.put(KEY, VALUE);\n    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));", "author": "hjiebsco", "createdAt": "2020-07-29T11:17:37Z", "path": "okapi-common/src/test/java/org/folio/okapi/common/FolioLoggingContextTest.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.folio.okapi.common;\n+\n+import org.folio.okapi.common.logging.FolioLoggingContext;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.unit.Async;\n+import io.vertx.ext.unit.TestContext;\n+import io.vertx.ext.unit.junit.VertxUnitRunner;\n+\n+@RunWith(VertxUnitRunner.class)\n+public class FolioLoggingContextTest {\n+\n+\n+  private static final String KEY = \"KEY\";\n+  private static final String VALUE = \"VALUE\";\n+  private static final String EMPTY_STRING = \"\";\n+\n+  private Vertx vertx;\n+\n+  @Before\n+  public void setup() {\n+    vertx = Vertx.vertx();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    vertx.close();\n+  }\n+\n+  @Test\n+  public void lookupWithoutContextTest(TestContext context) {\n+    FolioLoggingContext loggingContext = new FolioLoggingContext();\n+    context.assertEquals(EMPTY_STRING, loggingContext.lookup(KEY));\n+  }", "originalCommit": "fe2ae252812765ac8a1af3c4775556298581d839", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk1NTcwNQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r462955705", "bodyText": "done", "author": "MikhailFokanov", "createdAt": "2020-07-30T12:20:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIyMzU0OQ=="}], "type": "inlineReview"}, {"oid": "5c361848fdaa858cf9af23d74c7750d42a71e33b", "url": "https://github.com/folio-org/okapi/commit/5c361848fdaa858cf9af23d74c7750d42a71e33b", "message": "Test null token", "committedDate": "2020-07-29T11:26:28Z", "type": "commit"}, {"oid": "5010edb6c691488d479e6b086736b91483500729", "url": "https://github.com/folio-org/okapi/commit/5010edb6c691488d479e6b086736b91483500729", "message": "OKAPI-871 Additional test", "committedDate": "2020-07-30T12:15:51Z", "type": "commit"}, {"oid": "08efadd3db3f7ba349775199b9986ab7809d9e57", "url": "https://github.com/folio-org/okapi/commit/08efadd3db3f7ba349775199b9986ab7809d9e57", "message": "OKAPI-871 Add userId in Auth", "committedDate": "2020-07-30T12:18:48Z", "type": "commit"}, {"oid": "978c3c7e40fcc0e2784eecb86939d5bc436e3109", "url": "https://github.com/folio-org/okapi/commit/978c3c7e40fcc0e2784eecb86939d5bc436e3109", "message": "Merge remote-tracking branch 'origin/username-userid' into OKAPI-871", "committedDate": "2020-07-30T13:34:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAwMzYxNA==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r463003614", "bodyText": "As chatted, we do not need to change okapi-test-auth-module/src/main/java/org/folio/okapi/auth/Auth.java", "author": "hjiebsco", "createdAt": "2020-07-30T13:40:30Z", "path": "okapi-test-auth-module/src/main/java/org/folio/okapi/auth/Auth.java", "diffHunk": "@@ -222,6 +223,8 @@ public void check(RoutingContext ctx) {\n     }\n     // Fake some module tokens\n     String modTok = moduleTokens(ctx);\n+    FolioLoggingContext.put(FolioLoggingContext.USER_ID_LOGGING_VAR_NAME,\n+        userId);", "originalCommit": "08efadd3db3f7ba349775199b9986ab7809d9e57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "72f8410820987d085c7ae4022421c4a903bbcdd3", "url": "https://github.com/folio-org/okapi/commit/72f8410820987d085c7ae4022421c4a903bbcdd3", "message": "OKAPI-871 Add userId in Auth", "committedDate": "2020-07-30T13:47:06Z", "type": "commit"}, {"oid": "de4092d38f0e6913cb7e251f80b2537c21f27466", "url": "https://github.com/folio-org/okapi/commit/de4092d38f0e6913cb7e251f80b2537c21f27466", "message": "Fix broken build", "committedDate": "2020-08-01T11:14:17Z", "type": "commit"}, {"oid": "3a5d7a4e5ba7fb951a2e7aa15ee009680e5fdf04", "url": "https://github.com/folio-org/okapi/commit/3a5d7a4e5ba7fb951a2e7aa15ee009680e5fdf04", "message": "Add bin to gitignore", "committedDate": "2020-08-01T11:15:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYyODIyMg==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r468628222", "bodyText": "Taking a value out of a JWT token without validating the token can cause a security issue because anyone can spoof it.\nSuch a value must be handled with caution and care.\nI suggest to rename the methods to draw developer attention to the missing validation:\n\nrename getTenant() to getTenantWithoutValidation()\nrename getUsername() to getUsernameWithoutValidation()\nrename getUserId() to getUserIdWithoutValidation()\nrename getFieldFromToken(String) to getFieldFromTokenWithoutValidation(String)", "author": "julianladisch", "createdAt": "2020-08-11T14:32:33Z", "path": "okapi-common/src/main/java/org/folio/okapi/common/OkapiToken.java", "diffHunk": "@@ -41,16 +46,37 @@ private JsonObject getPayloadWithoutValidation() {\n     }\n   }\n \n+  private String getFieldFromToken(String field) {\n+    if (payloadWithoutValidation == null) {\n+      return null;\n+    }\n+    return payloadWithoutValidation.getString(field);\n+  }\n+\n   /**\n    * Get the tenant out from the token.\n    * Note there is no JWT validation taking place.\n    * @return null if no token, or no tenant there\n    */\n   public String getTenant() {", "originalCommit": "3a5d7a4e5ba7fb951a2e7aa15ee009680e5fdf04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMyMzc3OQ==", "url": "https://github.com/folio-org/okapi/pull/951#discussion_r473323779", "bodyText": "fixed", "author": "MikhailFokanov", "createdAt": "2020-08-19T21:10:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYyODIyMg=="}], "type": "inlineReview"}, {"oid": "95a46cbbf506c7b8b5a86c1f61cd81a9c3d86e54", "url": "https://github.com/folio-org/okapi/commit/95a46cbbf506c7b8b5a86c1f61cd81a9c3d86e54", "message": "OKAPI-871 Fix review comments", "committedDate": "2020-08-19T12:08:32Z", "type": "commit"}, {"oid": "d8134de1a2c3d32da8d902db36604dfd0a271812", "url": "https://github.com/folio-org/okapi/commit/d8134de1a2c3d32da8d902db36604dfd0a271812", "message": "Merge remote-tracking branch 'origin/master' into OKAPI-871\n\n# Conflicts:\n#\t.gitignore\n#\tokapi-core/src/main/java/org/folio/okapi/util/ProxyContext.java", "committedDate": "2020-08-19T12:15:26Z", "type": "commit"}, {"oid": "d6683bff1742773173f0bd22b101c27920850fb4", "url": "https://github.com/folio-org/okapi/commit/d6683bff1742773173f0bd22b101c27920850fb4", "message": "OKAPI-871 Fix review comments", "committedDate": "2020-08-19T20:03:42Z", "type": "commit"}, {"oid": "9bb223ac68c9f9d817876be5024c70ba4b0ca28a", "url": "https://github.com/folio-org/okapi/commit/9bb223ac68c9f9d817876be5024c70ba4b0ca28a", "message": "OKAPI-871 Fix review comments", "committedDate": "2020-08-19T20:11:58Z", "type": "commit"}]}