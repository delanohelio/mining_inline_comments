{"pr_number": 3889, "pr_title": "Refactor option handling", "pr_createdAt": "2020-01-10T21:11:32Z", "pr_url": "https://github.com/bisq-network/bisq/pull/3889", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY4MDk3NA==", "url": "https://github.com/bisq-network/bisq/pull/3889#discussion_r368680974", "bodyText": "This goes against our style of not using exceptions as a part of the expected execution flow.", "author": "sqrrm", "createdAt": "2020-01-20T18:29:16Z", "path": "common/src/main/java/bisq/common/config/Config.java", "diffHunk": "@@ -0,0 +1,344 @@\n+package bisq.common.config;\n+\n+import bisq.common.util.Utilities;\n+\n+import joptsimple.AbstractOptionSpec;\n+import joptsimple.ArgumentAcceptingOptionSpec;\n+import joptsimple.OptionException;\n+import joptsimple.OptionParser;\n+import joptsimple.OptionSet;\n+import joptsimple.OptionSpec;\n+import joptsimple.util.PathConverter;\n+import joptsimple.util.PathProperties;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import java.io.File;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import ch.qos.logback.classic.Level;\n+\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.toList;\n+\n+public class Config {\n+\n+    static final String DEFAULT_CONFIG_FILE_NAME = \"bisq.properties\";\n+    static final int DEFAULT_NODE_PORT = 9999;\n+\n+    public static File CURRENT_APP_DATA_DIR;\n+\n+    private final String defaultAppName;\n+    private final File defaultUserDataDir;\n+    private final File defaultAppDataDir;\n+    private final File defaultConfigFile;\n+\n+    private final File configFile;\n+    private final String appName;\n+    private final File userDataDir;\n+    private final File appDataDir;\n+    private final int nodePort;\n+    private final List<String> bannedBtcNodes;\n+    private final List<String> bannedPriceRelayNodes;\n+    private final List<String> bannedSeedNodes;\n+    private final BaseCurrencyNetwork baseCurrencyNetwork;\n+    private final boolean ignoreLocalBtcNode;\n+    private final String bitcoinRegtestHost;\n+    private final boolean daoActivated;\n+    private final boolean fullDaoNode;\n+    private final String logLevel;\n+    private final Path torrcFile;\n+\n+    // FIXME: Carryover from legacy BisqEnvironment; there should be no mutable state here\n+    private boolean localBitcoinNodeIsRunning = false;\n+\n+    public Config(String defaultAppName) throws HelpRequested {\n+        this(defaultAppName, new String[]{});\n+    }\n+\n+    public Config(String defaultAppName, String[] args) throws HelpRequested {\n+        this.defaultAppName = defaultAppName;\n+        this.defaultUserDataDir = getDefaultUserDataDir();\n+        this.defaultAppDataDir = new File(defaultUserDataDir, this.defaultAppName);\n+        this.defaultConfigFile = new File(defaultAppDataDir, DEFAULT_CONFIG_FILE_NAME);\n+\n+        OptionParser parser = new OptionParser();\n+        parser.allowsUnrecognizedOptions();\n+\n+        AbstractOptionSpec<Void> helpOpt =\n+                parser.accepts(\"help\", \"Print this help text\")\n+                        .forHelp();\n+\n+        ArgumentAcceptingOptionSpec<String> configFileOpt =\n+                parser.accepts(\"configFile\", \"Specify configuration file. \" +\n+                        \"Relative paths will be prefixed by appDataDir location.\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .defaultsTo(DEFAULT_CONFIG_FILE_NAME);\n+\n+        ArgumentAcceptingOptionSpec<File> userDataDirOpt =\n+                parser.accepts(\"userDataDir\", \"User data directory\")\n+                        .withRequiredArg()\n+                        .ofType(File.class)\n+                        .defaultsTo(defaultUserDataDir);\n+\n+        ArgumentAcceptingOptionSpec<String> appNameOpt =\n+                parser.accepts(\"appName\", \"Application name\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .defaultsTo(this.defaultAppName);\n+\n+        ArgumentAcceptingOptionSpec<File> appDataDirOpt =\n+                parser.accepts(\"appDataDir\", \"Application data directory\")\n+                        .withRequiredArg()\n+                        .ofType(File.class)\n+                        .defaultsTo(defaultAppDataDir);\n+\n+        ArgumentAcceptingOptionSpec<Integer> nodePortOpt =\n+                parser.accepts(\"nodePort\", \"Port to listen on\")\n+                        .withRequiredArg()\n+                        .ofType(Integer.class)\n+                        .defaultsTo(DEFAULT_NODE_PORT);\n+\n+        ArgumentAcceptingOptionSpec<String> bannedBtcNodesOpt =\n+                parser.accepts(\"bannedBtcNodes\", \"List Bitcoin nodes to ban\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .withValuesSeparatedBy(',')\n+                        .describedAs(\"host:port[,...]\");\n+\n+        ArgumentAcceptingOptionSpec<String> bannedPriceRelayNodesOpt =\n+                parser.accepts(\"bannedPriceRelayNodes\", \"List Bisq price nodes to ban\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .withValuesSeparatedBy(',')\n+                        .describedAs(\"host:port[,...]\");\n+\n+        ArgumentAcceptingOptionSpec<String> bannedSeedNodesOpt =\n+                parser.accepts(\"bannedSeedNodes\", \"List Bisq seed nodes to ban\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .withValuesSeparatedBy(',')\n+                        .describedAs(\"host:port[,...]\");\n+\n+        ArgumentAcceptingOptionSpec<Enum> baseCurrencyNetworkOpt =\n+                parser.accepts(\"baseCurrencyNetwork\", \"Base currency network\")\n+                        .withRequiredArg()\n+                        .ofType(BaseCurrencyNetwork.class)\n+                        .withValuesConvertedBy(new EnumValueConverter(BaseCurrencyNetwork.class))\n+                        .defaultsTo(BaseCurrencyNetwork.BTC_MAINNET);\n+\n+        ArgumentAcceptingOptionSpec<Boolean> ignoreLocalBtcNodeOpt =\n+                parser.accepts(\"ignoreLocalBtcNode\", \"If set to true a Bitcoin Core node running locally will be ignored\")\n+                        .withRequiredArg()\n+                        .ofType(Boolean.class)\n+                        .defaultsTo(false);\n+\n+        ArgumentAcceptingOptionSpec<String> bitcoinRegtestHostOpt =\n+                parser.accepts(\"bitcoinRegtestHost\", \"Bitcoin Core node when using BTC_REGTEST network\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .describedAs(\"host[:port]\")\n+                        .defaultsTo(\"localhost\");\n+\n+        ArgumentAcceptingOptionSpec<Boolean> daoActivatedOpt =\n+                parser.accepts(\"daoActivated\", \"Developer flag. If true it enables dao phase 2 features.\")\n+                        .withRequiredArg()\n+                        .ofType(Boolean.class)\n+                        .defaultsTo(true);\n+\n+        ArgumentAcceptingOptionSpec<Boolean> fullDaoNodeOpt =\n+                parser.accepts(\"fullDaoNode\", \"If set to true the node requests the blockchain data via RPC requests \" +\n+                        \"from Bitcoin Core and provide the validated BSQ txs to the network. It requires that the \" +\n+                        \"other RPC properties are set as well.\")\n+                        .withRequiredArg()\n+                        .ofType(Boolean.class)\n+                        .defaultsTo(false);\n+\n+        ArgumentAcceptingOptionSpec<String> logLevelOpt =\n+                parser.accepts(\"logLevel\", \"Set logging level\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .describedAs(\"OFF|ALL|ERROR|WARN|INFO|DEBUG|TRACE\")\n+                        .defaultsTo(Level.INFO.levelStr);\n+\n+        ArgumentAcceptingOptionSpec<Path> torrcFileOpt =\n+                parser.accepts(\"torrcFile\", \"An existing torrc-file to be sourced for Tor. Note that torrc-entries, \" +\n+                        \"which are critical to Bisq's correct operation, cannot be overwritten.\")\n+                        .withRequiredArg()\n+                        .withValuesConvertedBy(new PathConverter(PathProperties.FILE_EXISTING, PathProperties.READABLE));\n+\n+        try {\n+            OptionSet cliOpts = parser.parse(args);\n+\n+            if (cliOpts.has(helpOpt))\n+                throw new HelpRequested(parser);", "originalCommit": "b34d59c0a930e436b0b542114c48005ff857d4c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk2Nzg4OQ==", "url": "https://github.com/bisq-network/bisq/pull/3889#discussion_r368967889", "bodyText": "Looks like this was removed at some point and I missed that.", "author": "sqrrm", "createdAt": "2020-01-21T12:18:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY4MDk3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzMDA4NQ==", "url": "https://github.com/bisq-network/bisq/pull/3889#discussion_r368930085", "bodyText": "Prefer braces...", "author": "sqrrm", "createdAt": "2020-01-21T10:48:36Z", "path": "common/src/main/java/bisq/common/config/Config.java", "diffHunk": "@@ -0,0 +1,344 @@\n+package bisq.common.config;\n+\n+import bisq.common.util.Utilities;\n+\n+import joptsimple.AbstractOptionSpec;\n+import joptsimple.ArgumentAcceptingOptionSpec;\n+import joptsimple.OptionException;\n+import joptsimple.OptionParser;\n+import joptsimple.OptionSet;\n+import joptsimple.OptionSpec;\n+import joptsimple.util.PathConverter;\n+import joptsimple.util.PathProperties;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import java.io.File;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import ch.qos.logback.classic.Level;\n+\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.toList;\n+\n+public class Config {\n+\n+    static final String DEFAULT_CONFIG_FILE_NAME = \"bisq.properties\";\n+    static final int DEFAULT_NODE_PORT = 9999;\n+\n+    public static File CURRENT_APP_DATA_DIR;\n+\n+    private final String defaultAppName;\n+    private final File defaultUserDataDir;\n+    private final File defaultAppDataDir;\n+    private final File defaultConfigFile;\n+\n+    private final File configFile;\n+    private final String appName;\n+    private final File userDataDir;\n+    private final File appDataDir;\n+    private final int nodePort;\n+    private final List<String> bannedBtcNodes;\n+    private final List<String> bannedPriceRelayNodes;\n+    private final List<String> bannedSeedNodes;\n+    private final BaseCurrencyNetwork baseCurrencyNetwork;\n+    private final boolean ignoreLocalBtcNode;\n+    private final String bitcoinRegtestHost;\n+    private final boolean daoActivated;\n+    private final boolean fullDaoNode;\n+    private final String logLevel;\n+    private final Path torrcFile;\n+\n+    // FIXME: Carryover from legacy BisqEnvironment; there should be no mutable state here\n+    private boolean localBitcoinNodeIsRunning = false;\n+\n+    public Config(String defaultAppName) throws HelpRequested {\n+        this(defaultAppName, new String[]{});\n+    }\n+\n+    public Config(String defaultAppName, String[] args) throws HelpRequested {\n+        this.defaultAppName = defaultAppName;\n+        this.defaultUserDataDir = getDefaultUserDataDir();\n+        this.defaultAppDataDir = new File(defaultUserDataDir, this.defaultAppName);\n+        this.defaultConfigFile = new File(defaultAppDataDir, DEFAULT_CONFIG_FILE_NAME);\n+\n+        OptionParser parser = new OptionParser();\n+        parser.allowsUnrecognizedOptions();\n+\n+        AbstractOptionSpec<Void> helpOpt =\n+                parser.accepts(\"help\", \"Print this help text\")\n+                        .forHelp();\n+\n+        ArgumentAcceptingOptionSpec<String> configFileOpt =\n+                parser.accepts(\"configFile\", \"Specify configuration file. \" +\n+                        \"Relative paths will be prefixed by appDataDir location.\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .defaultsTo(DEFAULT_CONFIG_FILE_NAME);\n+\n+        ArgumentAcceptingOptionSpec<File> userDataDirOpt =\n+                parser.accepts(\"userDataDir\", \"User data directory\")\n+                        .withRequiredArg()\n+                        .ofType(File.class)\n+                        .defaultsTo(defaultUserDataDir);\n+\n+        ArgumentAcceptingOptionSpec<String> appNameOpt =\n+                parser.accepts(\"appName\", \"Application name\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .defaultsTo(this.defaultAppName);\n+\n+        ArgumentAcceptingOptionSpec<File> appDataDirOpt =\n+                parser.accepts(\"appDataDir\", \"Application data directory\")\n+                        .withRequiredArg()\n+                        .ofType(File.class)\n+                        .defaultsTo(defaultAppDataDir);\n+\n+        ArgumentAcceptingOptionSpec<Integer> nodePortOpt =\n+                parser.accepts(\"nodePort\", \"Port to listen on\")\n+                        .withRequiredArg()\n+                        .ofType(Integer.class)\n+                        .defaultsTo(DEFAULT_NODE_PORT);\n+\n+        ArgumentAcceptingOptionSpec<String> bannedBtcNodesOpt =\n+                parser.accepts(\"bannedBtcNodes\", \"List Bitcoin nodes to ban\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .withValuesSeparatedBy(',')\n+                        .describedAs(\"host:port[,...]\");\n+\n+        ArgumentAcceptingOptionSpec<String> bannedPriceRelayNodesOpt =\n+                parser.accepts(\"bannedPriceRelayNodes\", \"List Bisq price nodes to ban\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .withValuesSeparatedBy(',')\n+                        .describedAs(\"host:port[,...]\");\n+\n+        ArgumentAcceptingOptionSpec<String> bannedSeedNodesOpt =\n+                parser.accepts(\"bannedSeedNodes\", \"List Bisq seed nodes to ban\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .withValuesSeparatedBy(',')\n+                        .describedAs(\"host:port[,...]\");\n+\n+        ArgumentAcceptingOptionSpec<Enum> baseCurrencyNetworkOpt =\n+                parser.accepts(\"baseCurrencyNetwork\", \"Base currency network\")\n+                        .withRequiredArg()\n+                        .ofType(BaseCurrencyNetwork.class)\n+                        .withValuesConvertedBy(new EnumValueConverter(BaseCurrencyNetwork.class))\n+                        .defaultsTo(BaseCurrencyNetwork.BTC_MAINNET);\n+\n+        ArgumentAcceptingOptionSpec<Boolean> ignoreLocalBtcNodeOpt =\n+                parser.accepts(\"ignoreLocalBtcNode\", \"If set to true a Bitcoin Core node running locally will be ignored\")\n+                        .withRequiredArg()\n+                        .ofType(Boolean.class)\n+                        .defaultsTo(false);\n+\n+        ArgumentAcceptingOptionSpec<String> bitcoinRegtestHostOpt =\n+                parser.accepts(\"bitcoinRegtestHost\", \"Bitcoin Core node when using BTC_REGTEST network\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .describedAs(\"host[:port]\")\n+                        .defaultsTo(\"localhost\");\n+\n+        ArgumentAcceptingOptionSpec<Boolean> daoActivatedOpt =\n+                parser.accepts(\"daoActivated\", \"Developer flag. If true it enables dao phase 2 features.\")\n+                        .withRequiredArg()\n+                        .ofType(Boolean.class)\n+                        .defaultsTo(true);\n+\n+        ArgumentAcceptingOptionSpec<Boolean> fullDaoNodeOpt =\n+                parser.accepts(\"fullDaoNode\", \"If set to true the node requests the blockchain data via RPC requests \" +\n+                        \"from Bitcoin Core and provide the validated BSQ txs to the network. It requires that the \" +\n+                        \"other RPC properties are set as well.\")\n+                        .withRequiredArg()\n+                        .ofType(Boolean.class)\n+                        .defaultsTo(false);\n+\n+        ArgumentAcceptingOptionSpec<String> logLevelOpt =\n+                parser.accepts(\"logLevel\", \"Set logging level\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .describedAs(\"OFF|ALL|ERROR|WARN|INFO|DEBUG|TRACE\")\n+                        .defaultsTo(Level.INFO.levelStr);\n+\n+        ArgumentAcceptingOptionSpec<Path> torrcFileOpt =\n+                parser.accepts(\"torrcFile\", \"An existing torrc-file to be sourced for Tor. Note that torrc-entries, \" +\n+                        \"which are critical to Bisq's correct operation, cannot be overwritten.\")\n+                        .withRequiredArg()\n+                        .withValuesConvertedBy(new PathConverter(PathProperties.FILE_EXISTING, PathProperties.READABLE));\n+\n+        try {\n+            OptionSet cliOpts = parser.parse(args);\n+\n+            if (cliOpts.has(helpOpt))\n+                throw new HelpRequested(parser);\n+\n+            CompositeOptionSet options = new CompositeOptionSet();\n+            options.addOptionSet(cliOpts);\n+\n+            File configFile = null;\n+            final boolean cliHasConfigFileOpt = cliOpts.has(configFileOpt);\n+            boolean configFileHasBeenProcessed = false;\n+            if (cliHasConfigFileOpt) {\n+                configFile = new File(cliOpts.valueOf(configFileOpt));\n+                Optional<OptionSet> configFileOpts = parseOptionsFrom(configFile, parser, helpOpt, configFileOpt);\n+                if (configFileOpts.isPresent()) {\n+                    options.addOptionSet(configFileOpts.get());\n+                    configFileHasBeenProcessed = true;\n+                }\n+            }\n+\n+            this.appName = options.valueOf(appNameOpt);\n+            this.userDataDir = options.valueOf(userDataDirOpt);\n+            this.appDataDir = options.has(appDataDirOpt) ?\n+                    options.valueOf(appDataDirOpt) :\n+                    new File(this.userDataDir, this.appName);\n+\n+            CURRENT_APP_DATA_DIR = appDataDir;\n+\n+            if (!configFileHasBeenProcessed) {\n+                configFile = cliHasConfigFileOpt && !configFile.isAbsolute() ?\n+                        new File(this.appDataDir, configFile.getPath()) : // TODO: test\n+                        new File(this.appDataDir, DEFAULT_CONFIG_FILE_NAME);\n+                Optional<OptionSet> configFileOpts = parseOptionsFrom(configFile, parser, helpOpt, configFileOpt);\n+                configFileOpts.ifPresent(options::addOptionSet);\n+            }\n+\n+            this.configFile = configFile;\n+            this.nodePort = options.valueOf(nodePortOpt);\n+            this.bannedBtcNodes = options.valuesOf(bannedBtcNodesOpt);\n+            this.bannedPriceRelayNodes = options.valuesOf(bannedPriceRelayNodesOpt);\n+            this.bannedSeedNodes = options.valuesOf(bannedSeedNodesOpt);\n+            this.baseCurrencyNetwork = (BaseCurrencyNetwork) options.valueOf(baseCurrencyNetworkOpt);\n+            BaseCurrencyNetwork.CURRENT_NETWORK = baseCurrencyNetwork;\n+            BaseCurrencyNetwork.CURRENT_PARAMETERS = baseCurrencyNetwork.getParameters();\n+            this.ignoreLocalBtcNode = options.valueOf(ignoreLocalBtcNodeOpt);\n+            this.bitcoinRegtestHost = options.valueOf(bitcoinRegtestHostOpt);\n+            this.daoActivated = options.valueOf(daoActivatedOpt) || !baseCurrencyNetwork.isMainnet();\n+            this.fullDaoNode = options.valueOf(fullDaoNodeOpt);\n+            this.logLevel = options.valueOf(logLevelOpt);\n+            this.torrcFile = options.valueOf(torrcFileOpt);\n+\n+        } catch (OptionException ex) {\n+            throw new ConfigException(format(\"problem parsing option '%s': %s\",\n+                    ex.options().get(0),\n+                    ex.getCause() != null ?\n+                            ex.getCause().getMessage() :\n+                            ex.getMessage()));\n+        }\n+    }\n+\n+    private Optional<OptionSet> parseOptionsFrom(File file, OptionParser parser, OptionSpec<?>... disallowedOpts) {\n+        if (!file.isAbsolute() || !file.exists())\n+            return Optional.empty();\n+\n+        ConfigFileReader configFileReader = new ConfigFileReader(file);\n+        String[] optionLines = configFileReader.getOptionLines().stream()\n+                .map(o -> \"--\" + o) // prepend dashes expected by jopt parser below\n+                .collect(toList())\n+                .toArray(new String[]{});\n+\n+        OptionSet configFileOpts = parser.parse(optionLines);\n+        for (OptionSpec<?> disallowedOpt : disallowedOpts)", "originalCommit": "b34d59c0a930e436b0b542114c48005ff857d4c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzMDIyNA==", "url": "https://github.com/bisq-network/bisq/pull/3889#discussion_r368930224", "bodyText": "...for all blocks.", "author": "sqrrm", "createdAt": "2020-01-21T10:48:49Z", "path": "common/src/main/java/bisq/common/config/Config.java", "diffHunk": "@@ -0,0 +1,344 @@\n+package bisq.common.config;\n+\n+import bisq.common.util.Utilities;\n+\n+import joptsimple.AbstractOptionSpec;\n+import joptsimple.ArgumentAcceptingOptionSpec;\n+import joptsimple.OptionException;\n+import joptsimple.OptionParser;\n+import joptsimple.OptionSet;\n+import joptsimple.OptionSpec;\n+import joptsimple.util.PathConverter;\n+import joptsimple.util.PathProperties;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import java.io.File;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import ch.qos.logback.classic.Level;\n+\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.toList;\n+\n+public class Config {\n+\n+    static final String DEFAULT_CONFIG_FILE_NAME = \"bisq.properties\";\n+    static final int DEFAULT_NODE_PORT = 9999;\n+\n+    public static File CURRENT_APP_DATA_DIR;\n+\n+    private final String defaultAppName;\n+    private final File defaultUserDataDir;\n+    private final File defaultAppDataDir;\n+    private final File defaultConfigFile;\n+\n+    private final File configFile;\n+    private final String appName;\n+    private final File userDataDir;\n+    private final File appDataDir;\n+    private final int nodePort;\n+    private final List<String> bannedBtcNodes;\n+    private final List<String> bannedPriceRelayNodes;\n+    private final List<String> bannedSeedNodes;\n+    private final BaseCurrencyNetwork baseCurrencyNetwork;\n+    private final boolean ignoreLocalBtcNode;\n+    private final String bitcoinRegtestHost;\n+    private final boolean daoActivated;\n+    private final boolean fullDaoNode;\n+    private final String logLevel;\n+    private final Path torrcFile;\n+\n+    // FIXME: Carryover from legacy BisqEnvironment; there should be no mutable state here\n+    private boolean localBitcoinNodeIsRunning = false;\n+\n+    public Config(String defaultAppName) throws HelpRequested {\n+        this(defaultAppName, new String[]{});\n+    }\n+\n+    public Config(String defaultAppName, String[] args) throws HelpRequested {\n+        this.defaultAppName = defaultAppName;\n+        this.defaultUserDataDir = getDefaultUserDataDir();\n+        this.defaultAppDataDir = new File(defaultUserDataDir, this.defaultAppName);\n+        this.defaultConfigFile = new File(defaultAppDataDir, DEFAULT_CONFIG_FILE_NAME);\n+\n+        OptionParser parser = new OptionParser();\n+        parser.allowsUnrecognizedOptions();\n+\n+        AbstractOptionSpec<Void> helpOpt =\n+                parser.accepts(\"help\", \"Print this help text\")\n+                        .forHelp();\n+\n+        ArgumentAcceptingOptionSpec<String> configFileOpt =\n+                parser.accepts(\"configFile\", \"Specify configuration file. \" +\n+                        \"Relative paths will be prefixed by appDataDir location.\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .defaultsTo(DEFAULT_CONFIG_FILE_NAME);\n+\n+        ArgumentAcceptingOptionSpec<File> userDataDirOpt =\n+                parser.accepts(\"userDataDir\", \"User data directory\")\n+                        .withRequiredArg()\n+                        .ofType(File.class)\n+                        .defaultsTo(defaultUserDataDir);\n+\n+        ArgumentAcceptingOptionSpec<String> appNameOpt =\n+                parser.accepts(\"appName\", \"Application name\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .defaultsTo(this.defaultAppName);\n+\n+        ArgumentAcceptingOptionSpec<File> appDataDirOpt =\n+                parser.accepts(\"appDataDir\", \"Application data directory\")\n+                        .withRequiredArg()\n+                        .ofType(File.class)\n+                        .defaultsTo(defaultAppDataDir);\n+\n+        ArgumentAcceptingOptionSpec<Integer> nodePortOpt =\n+                parser.accepts(\"nodePort\", \"Port to listen on\")\n+                        .withRequiredArg()\n+                        .ofType(Integer.class)\n+                        .defaultsTo(DEFAULT_NODE_PORT);\n+\n+        ArgumentAcceptingOptionSpec<String> bannedBtcNodesOpt =\n+                parser.accepts(\"bannedBtcNodes\", \"List Bitcoin nodes to ban\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .withValuesSeparatedBy(',')\n+                        .describedAs(\"host:port[,...]\");\n+\n+        ArgumentAcceptingOptionSpec<String> bannedPriceRelayNodesOpt =\n+                parser.accepts(\"bannedPriceRelayNodes\", \"List Bisq price nodes to ban\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .withValuesSeparatedBy(',')\n+                        .describedAs(\"host:port[,...]\");\n+\n+        ArgumentAcceptingOptionSpec<String> bannedSeedNodesOpt =\n+                parser.accepts(\"bannedSeedNodes\", \"List Bisq seed nodes to ban\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .withValuesSeparatedBy(',')\n+                        .describedAs(\"host:port[,...]\");\n+\n+        ArgumentAcceptingOptionSpec<Enum> baseCurrencyNetworkOpt =\n+                parser.accepts(\"baseCurrencyNetwork\", \"Base currency network\")\n+                        .withRequiredArg()\n+                        .ofType(BaseCurrencyNetwork.class)\n+                        .withValuesConvertedBy(new EnumValueConverter(BaseCurrencyNetwork.class))\n+                        .defaultsTo(BaseCurrencyNetwork.BTC_MAINNET);\n+\n+        ArgumentAcceptingOptionSpec<Boolean> ignoreLocalBtcNodeOpt =\n+                parser.accepts(\"ignoreLocalBtcNode\", \"If set to true a Bitcoin Core node running locally will be ignored\")\n+                        .withRequiredArg()\n+                        .ofType(Boolean.class)\n+                        .defaultsTo(false);\n+\n+        ArgumentAcceptingOptionSpec<String> bitcoinRegtestHostOpt =\n+                parser.accepts(\"bitcoinRegtestHost\", \"Bitcoin Core node when using BTC_REGTEST network\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .describedAs(\"host[:port]\")\n+                        .defaultsTo(\"localhost\");\n+\n+        ArgumentAcceptingOptionSpec<Boolean> daoActivatedOpt =\n+                parser.accepts(\"daoActivated\", \"Developer flag. If true it enables dao phase 2 features.\")\n+                        .withRequiredArg()\n+                        .ofType(Boolean.class)\n+                        .defaultsTo(true);\n+\n+        ArgumentAcceptingOptionSpec<Boolean> fullDaoNodeOpt =\n+                parser.accepts(\"fullDaoNode\", \"If set to true the node requests the blockchain data via RPC requests \" +\n+                        \"from Bitcoin Core and provide the validated BSQ txs to the network. It requires that the \" +\n+                        \"other RPC properties are set as well.\")\n+                        .withRequiredArg()\n+                        .ofType(Boolean.class)\n+                        .defaultsTo(false);\n+\n+        ArgumentAcceptingOptionSpec<String> logLevelOpt =\n+                parser.accepts(\"logLevel\", \"Set logging level\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .describedAs(\"OFF|ALL|ERROR|WARN|INFO|DEBUG|TRACE\")\n+                        .defaultsTo(Level.INFO.levelStr);\n+\n+        ArgumentAcceptingOptionSpec<Path> torrcFileOpt =\n+                parser.accepts(\"torrcFile\", \"An existing torrc-file to be sourced for Tor. Note that torrc-entries, \" +\n+                        \"which are critical to Bisq's correct operation, cannot be overwritten.\")\n+                        .withRequiredArg()\n+                        .withValuesConvertedBy(new PathConverter(PathProperties.FILE_EXISTING, PathProperties.READABLE));\n+\n+        try {\n+            OptionSet cliOpts = parser.parse(args);\n+\n+            if (cliOpts.has(helpOpt))\n+                throw new HelpRequested(parser);\n+\n+            CompositeOptionSet options = new CompositeOptionSet();\n+            options.addOptionSet(cliOpts);\n+\n+            File configFile = null;\n+            final boolean cliHasConfigFileOpt = cliOpts.has(configFileOpt);\n+            boolean configFileHasBeenProcessed = false;\n+            if (cliHasConfigFileOpt) {\n+                configFile = new File(cliOpts.valueOf(configFileOpt));\n+                Optional<OptionSet> configFileOpts = parseOptionsFrom(configFile, parser, helpOpt, configFileOpt);\n+                if (configFileOpts.isPresent()) {\n+                    options.addOptionSet(configFileOpts.get());\n+                    configFileHasBeenProcessed = true;\n+                }\n+            }\n+\n+            this.appName = options.valueOf(appNameOpt);\n+            this.userDataDir = options.valueOf(userDataDirOpt);\n+            this.appDataDir = options.has(appDataDirOpt) ?\n+                    options.valueOf(appDataDirOpt) :\n+                    new File(this.userDataDir, this.appName);\n+\n+            CURRENT_APP_DATA_DIR = appDataDir;\n+\n+            if (!configFileHasBeenProcessed) {\n+                configFile = cliHasConfigFileOpt && !configFile.isAbsolute() ?\n+                        new File(this.appDataDir, configFile.getPath()) : // TODO: test\n+                        new File(this.appDataDir, DEFAULT_CONFIG_FILE_NAME);\n+                Optional<OptionSet> configFileOpts = parseOptionsFrom(configFile, parser, helpOpt, configFileOpt);\n+                configFileOpts.ifPresent(options::addOptionSet);\n+            }\n+\n+            this.configFile = configFile;\n+            this.nodePort = options.valueOf(nodePortOpt);\n+            this.bannedBtcNodes = options.valuesOf(bannedBtcNodesOpt);\n+            this.bannedPriceRelayNodes = options.valuesOf(bannedPriceRelayNodesOpt);\n+            this.bannedSeedNodes = options.valuesOf(bannedSeedNodesOpt);\n+            this.baseCurrencyNetwork = (BaseCurrencyNetwork) options.valueOf(baseCurrencyNetworkOpt);\n+            BaseCurrencyNetwork.CURRENT_NETWORK = baseCurrencyNetwork;\n+            BaseCurrencyNetwork.CURRENT_PARAMETERS = baseCurrencyNetwork.getParameters();\n+            this.ignoreLocalBtcNode = options.valueOf(ignoreLocalBtcNodeOpt);\n+            this.bitcoinRegtestHost = options.valueOf(bitcoinRegtestHostOpt);\n+            this.daoActivated = options.valueOf(daoActivatedOpt) || !baseCurrencyNetwork.isMainnet();\n+            this.fullDaoNode = options.valueOf(fullDaoNodeOpt);\n+            this.logLevel = options.valueOf(logLevelOpt);\n+            this.torrcFile = options.valueOf(torrcFileOpt);\n+\n+        } catch (OptionException ex) {\n+            throw new ConfigException(format(\"problem parsing option '%s': %s\",\n+                    ex.options().get(0),\n+                    ex.getCause() != null ?\n+                            ex.getCause().getMessage() :\n+                            ex.getMessage()));\n+        }\n+    }\n+\n+    private Optional<OptionSet> parseOptionsFrom(File file, OptionParser parser, OptionSpec<?>... disallowedOpts) {\n+        if (!file.isAbsolute() || !file.exists())\n+            return Optional.empty();\n+\n+        ConfigFileReader configFileReader = new ConfigFileReader(file);\n+        String[] optionLines = configFileReader.getOptionLines().stream()\n+                .map(o -> \"--\" + o) // prepend dashes expected by jopt parser below\n+                .collect(toList())\n+                .toArray(new String[]{});\n+\n+        OptionSet configFileOpts = parser.parse(optionLines);\n+        for (OptionSpec<?> disallowedOpt : disallowedOpts)\n+            if (configFileOpts.has(disallowedOpt))", "originalCommit": "b34d59c0a930e436b0b542114c48005ff857d4c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzMTAyMA==", "url": "https://github.com/bisq-network/bisq/pull/3889#discussion_r368931020", "bodyText": "Prefer braces even for single, unbroken line blocks, but I don't think we have completely agreed on that one.", "author": "sqrrm", "createdAt": "2020-01-21T10:50:25Z", "path": "common/src/main/java/bisq/common/config/Config.java", "diffHunk": "@@ -0,0 +1,344 @@\n+package bisq.common.config;\n+\n+import bisq.common.util.Utilities;\n+\n+import joptsimple.AbstractOptionSpec;\n+import joptsimple.ArgumentAcceptingOptionSpec;\n+import joptsimple.OptionException;\n+import joptsimple.OptionParser;\n+import joptsimple.OptionSet;\n+import joptsimple.OptionSpec;\n+import joptsimple.util.PathConverter;\n+import joptsimple.util.PathProperties;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import java.io.File;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import ch.qos.logback.classic.Level;\n+\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.toList;\n+\n+public class Config {\n+\n+    static final String DEFAULT_CONFIG_FILE_NAME = \"bisq.properties\";\n+    static final int DEFAULT_NODE_PORT = 9999;\n+\n+    public static File CURRENT_APP_DATA_DIR;\n+\n+    private final String defaultAppName;\n+    private final File defaultUserDataDir;\n+    private final File defaultAppDataDir;\n+    private final File defaultConfigFile;\n+\n+    private final File configFile;\n+    private final String appName;\n+    private final File userDataDir;\n+    private final File appDataDir;\n+    private final int nodePort;\n+    private final List<String> bannedBtcNodes;\n+    private final List<String> bannedPriceRelayNodes;\n+    private final List<String> bannedSeedNodes;\n+    private final BaseCurrencyNetwork baseCurrencyNetwork;\n+    private final boolean ignoreLocalBtcNode;\n+    private final String bitcoinRegtestHost;\n+    private final boolean daoActivated;\n+    private final boolean fullDaoNode;\n+    private final String logLevel;\n+    private final Path torrcFile;\n+\n+    // FIXME: Carryover from legacy BisqEnvironment; there should be no mutable state here\n+    private boolean localBitcoinNodeIsRunning = false;\n+\n+    public Config(String defaultAppName) throws HelpRequested {\n+        this(defaultAppName, new String[]{});\n+    }\n+\n+    public Config(String defaultAppName, String[] args) throws HelpRequested {\n+        this.defaultAppName = defaultAppName;\n+        this.defaultUserDataDir = getDefaultUserDataDir();\n+        this.defaultAppDataDir = new File(defaultUserDataDir, this.defaultAppName);\n+        this.defaultConfigFile = new File(defaultAppDataDir, DEFAULT_CONFIG_FILE_NAME);\n+\n+        OptionParser parser = new OptionParser();\n+        parser.allowsUnrecognizedOptions();\n+\n+        AbstractOptionSpec<Void> helpOpt =\n+                parser.accepts(\"help\", \"Print this help text\")\n+                        .forHelp();\n+\n+        ArgumentAcceptingOptionSpec<String> configFileOpt =\n+                parser.accepts(\"configFile\", \"Specify configuration file. \" +\n+                        \"Relative paths will be prefixed by appDataDir location.\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .defaultsTo(DEFAULT_CONFIG_FILE_NAME);\n+\n+        ArgumentAcceptingOptionSpec<File> userDataDirOpt =\n+                parser.accepts(\"userDataDir\", \"User data directory\")\n+                        .withRequiredArg()\n+                        .ofType(File.class)\n+                        .defaultsTo(defaultUserDataDir);\n+\n+        ArgumentAcceptingOptionSpec<String> appNameOpt =\n+                parser.accepts(\"appName\", \"Application name\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .defaultsTo(this.defaultAppName);\n+\n+        ArgumentAcceptingOptionSpec<File> appDataDirOpt =\n+                parser.accepts(\"appDataDir\", \"Application data directory\")\n+                        .withRequiredArg()\n+                        .ofType(File.class)\n+                        .defaultsTo(defaultAppDataDir);\n+\n+        ArgumentAcceptingOptionSpec<Integer> nodePortOpt =\n+                parser.accepts(\"nodePort\", \"Port to listen on\")\n+                        .withRequiredArg()\n+                        .ofType(Integer.class)\n+                        .defaultsTo(DEFAULT_NODE_PORT);\n+\n+        ArgumentAcceptingOptionSpec<String> bannedBtcNodesOpt =\n+                parser.accepts(\"bannedBtcNodes\", \"List Bitcoin nodes to ban\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .withValuesSeparatedBy(',')\n+                        .describedAs(\"host:port[,...]\");\n+\n+        ArgumentAcceptingOptionSpec<String> bannedPriceRelayNodesOpt =\n+                parser.accepts(\"bannedPriceRelayNodes\", \"List Bisq price nodes to ban\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .withValuesSeparatedBy(',')\n+                        .describedAs(\"host:port[,...]\");\n+\n+        ArgumentAcceptingOptionSpec<String> bannedSeedNodesOpt =\n+                parser.accepts(\"bannedSeedNodes\", \"List Bisq seed nodes to ban\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .withValuesSeparatedBy(',')\n+                        .describedAs(\"host:port[,...]\");\n+\n+        ArgumentAcceptingOptionSpec<Enum> baseCurrencyNetworkOpt =\n+                parser.accepts(\"baseCurrencyNetwork\", \"Base currency network\")\n+                        .withRequiredArg()\n+                        .ofType(BaseCurrencyNetwork.class)\n+                        .withValuesConvertedBy(new EnumValueConverter(BaseCurrencyNetwork.class))\n+                        .defaultsTo(BaseCurrencyNetwork.BTC_MAINNET);\n+\n+        ArgumentAcceptingOptionSpec<Boolean> ignoreLocalBtcNodeOpt =\n+                parser.accepts(\"ignoreLocalBtcNode\", \"If set to true a Bitcoin Core node running locally will be ignored\")\n+                        .withRequiredArg()\n+                        .ofType(Boolean.class)\n+                        .defaultsTo(false);\n+\n+        ArgumentAcceptingOptionSpec<String> bitcoinRegtestHostOpt =\n+                parser.accepts(\"bitcoinRegtestHost\", \"Bitcoin Core node when using BTC_REGTEST network\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .describedAs(\"host[:port]\")\n+                        .defaultsTo(\"localhost\");\n+\n+        ArgumentAcceptingOptionSpec<Boolean> daoActivatedOpt =\n+                parser.accepts(\"daoActivated\", \"Developer flag. If true it enables dao phase 2 features.\")\n+                        .withRequiredArg()\n+                        .ofType(Boolean.class)\n+                        .defaultsTo(true);\n+\n+        ArgumentAcceptingOptionSpec<Boolean> fullDaoNodeOpt =\n+                parser.accepts(\"fullDaoNode\", \"If set to true the node requests the blockchain data via RPC requests \" +\n+                        \"from Bitcoin Core and provide the validated BSQ txs to the network. It requires that the \" +\n+                        \"other RPC properties are set as well.\")\n+                        .withRequiredArg()\n+                        .ofType(Boolean.class)\n+                        .defaultsTo(false);\n+\n+        ArgumentAcceptingOptionSpec<String> logLevelOpt =\n+                parser.accepts(\"logLevel\", \"Set logging level\")\n+                        .withRequiredArg()\n+                        .ofType(String.class)\n+                        .describedAs(\"OFF|ALL|ERROR|WARN|INFO|DEBUG|TRACE\")\n+                        .defaultsTo(Level.INFO.levelStr);\n+\n+        ArgumentAcceptingOptionSpec<Path> torrcFileOpt =\n+                parser.accepts(\"torrcFile\", \"An existing torrc-file to be sourced for Tor. Note that torrc-entries, \" +\n+                        \"which are critical to Bisq's correct operation, cannot be overwritten.\")\n+                        .withRequiredArg()\n+                        .withValuesConvertedBy(new PathConverter(PathProperties.FILE_EXISTING, PathProperties.READABLE));\n+\n+        try {\n+            OptionSet cliOpts = parser.parse(args);\n+\n+            if (cliOpts.has(helpOpt))\n+                throw new HelpRequested(parser);\n+\n+            CompositeOptionSet options = new CompositeOptionSet();\n+            options.addOptionSet(cliOpts);\n+\n+            File configFile = null;\n+            final boolean cliHasConfigFileOpt = cliOpts.has(configFileOpt);\n+            boolean configFileHasBeenProcessed = false;\n+            if (cliHasConfigFileOpt) {\n+                configFile = new File(cliOpts.valueOf(configFileOpt));\n+                Optional<OptionSet> configFileOpts = parseOptionsFrom(configFile, parser, helpOpt, configFileOpt);\n+                if (configFileOpts.isPresent()) {\n+                    options.addOptionSet(configFileOpts.get());\n+                    configFileHasBeenProcessed = true;\n+                }\n+            }\n+\n+            this.appName = options.valueOf(appNameOpt);\n+            this.userDataDir = options.valueOf(userDataDirOpt);\n+            this.appDataDir = options.has(appDataDirOpt) ?\n+                    options.valueOf(appDataDirOpt) :\n+                    new File(this.userDataDir, this.appName);\n+\n+            CURRENT_APP_DATA_DIR = appDataDir;\n+\n+            if (!configFileHasBeenProcessed) {\n+                configFile = cliHasConfigFileOpt && !configFile.isAbsolute() ?\n+                        new File(this.appDataDir, configFile.getPath()) : // TODO: test\n+                        new File(this.appDataDir, DEFAULT_CONFIG_FILE_NAME);\n+                Optional<OptionSet> configFileOpts = parseOptionsFrom(configFile, parser, helpOpt, configFileOpt);\n+                configFileOpts.ifPresent(options::addOptionSet);\n+            }\n+\n+            this.configFile = configFile;\n+            this.nodePort = options.valueOf(nodePortOpt);\n+            this.bannedBtcNodes = options.valuesOf(bannedBtcNodesOpt);\n+            this.bannedPriceRelayNodes = options.valuesOf(bannedPriceRelayNodesOpt);\n+            this.bannedSeedNodes = options.valuesOf(bannedSeedNodesOpt);\n+            this.baseCurrencyNetwork = (BaseCurrencyNetwork) options.valueOf(baseCurrencyNetworkOpt);\n+            BaseCurrencyNetwork.CURRENT_NETWORK = baseCurrencyNetwork;\n+            BaseCurrencyNetwork.CURRENT_PARAMETERS = baseCurrencyNetwork.getParameters();\n+            this.ignoreLocalBtcNode = options.valueOf(ignoreLocalBtcNodeOpt);\n+            this.bitcoinRegtestHost = options.valueOf(bitcoinRegtestHostOpt);\n+            this.daoActivated = options.valueOf(daoActivatedOpt) || !baseCurrencyNetwork.isMainnet();\n+            this.fullDaoNode = options.valueOf(fullDaoNodeOpt);\n+            this.logLevel = options.valueOf(logLevelOpt);\n+            this.torrcFile = options.valueOf(torrcFileOpt);\n+\n+        } catch (OptionException ex) {\n+            throw new ConfigException(format(\"problem parsing option '%s': %s\",\n+                    ex.options().get(0),\n+                    ex.getCause() != null ?\n+                            ex.getCause().getMessage() :\n+                            ex.getMessage()));\n+        }\n+    }\n+\n+    private Optional<OptionSet> parseOptionsFrom(File file, OptionParser parser, OptionSpec<?>... disallowedOpts) {\n+        if (!file.isAbsolute() || !file.exists())\n+            return Optional.empty();\n+\n+        ConfigFileReader configFileReader = new ConfigFileReader(file);\n+        String[] optionLines = configFileReader.getOptionLines().stream()\n+                .map(o -> \"--\" + o) // prepend dashes expected by jopt parser below\n+                .collect(toList())\n+                .toArray(new String[]{});\n+\n+        OptionSet configFileOpts = parser.parse(optionLines);\n+        for (OptionSpec<?> disallowedOpt : disallowedOpts)\n+            if (configFileOpts.has(disallowedOpt))\n+                throw new IllegalArgumentException(\n+                        format(\"The '%s' option is disallowed in config files\", disallowedOpt.options().get(0)));\n+\n+        return Optional.of(configFileOpts);\n+    }\n+\n+    public String getDefaultAppName() {\n+        return defaultAppName;\n+    }\n+\n+    public File getDefaultUserDataDir() {\n+        if (Utilities.isWindows())", "originalCommit": "b34d59c0a930e436b0b542114c48005ff857d4c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ3NDA2OQ==", "url": "https://github.com/bisq-network/bisq/pull/3889#discussion_r368474069", "bodyText": "NIT: 0.12 should be at least 0.15 otherwise the security deposit is too low for our current setup", "author": "ripcurlx", "createdAt": "2020-01-20T10:30:25Z", "path": "grpc/src/main/java/bisq/grpc/BisqGrpcClient.java", "diffHunk": "@@ -0,0 +1,297 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.grpc;\n+\n+import bisq.core.payment.PaymentAccount;\n+import bisq.core.proto.network.CoreNetworkProtoResolver;\n+import bisq.core.proto.persistable.CorePersistenceProtoResolver;\n+\n+import org.bitcoinj.core.Coin;\n+\n+import java.time.Clock;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Scanner;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+\n+\n+import bisq.grpc.protobuf.GetBalanceGrpc;\n+import bisq.grpc.protobuf.GetBalanceRequest;\n+import bisq.grpc.protobuf.GetOffersGrpc;\n+import bisq.grpc.protobuf.GetOffersRequest;\n+import bisq.grpc.protobuf.GetPaymentAccountsGrpc;\n+import bisq.grpc.protobuf.GetPaymentAccountsRequest;\n+import bisq.grpc.protobuf.GetTradeStatisticsGrpc;\n+import bisq.grpc.protobuf.GetTradeStatisticsRequest;\n+import bisq.grpc.protobuf.GetVersionGrpc;\n+import bisq.grpc.protobuf.GetVersionRequest;\n+import bisq.grpc.protobuf.PlaceOfferGrpc;\n+import bisq.grpc.protobuf.PlaceOfferRequest;\n+import bisq.grpc.protobuf.StopServerGrpc;\n+import bisq.grpc.protobuf.StopServerRequest;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.StatusRuntimeException;\n+\n+/**\n+ * gRPC client.\n+ *\n+ * FIXME We get warning 'DEBUG io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0 - direct buffer constructor: unavailable\n+ * java.lang.UnsupportedOperationException: Reflective setAccessible(true) disabled' which is\n+ * related to Java 10 changes. Requests are working but we should find out why we get that warning\n+ */\n+@Slf4j\n+public class BisqGrpcClient {\n+    private static BisqGrpcClient instance;\n+\n+    private final ManagedChannel channel;\n+    private final GetVersionGrpc.GetVersionBlockingStub getVersionStub;\n+    private final GetBalanceGrpc.GetBalanceBlockingStub getBalanceStub;\n+    private final StopServerGrpc.StopServerBlockingStub stopServerStub;\n+    private final GetTradeStatisticsGrpc.GetTradeStatisticsBlockingStub getTradeStatisticsStub;\n+    private final GetOffersGrpc.GetOffersBlockingStub getOffersStub;\n+    private final GetPaymentAccountsGrpc.GetPaymentAccountsBlockingStub getPaymentAccountsStub;\n+    private final PlaceOfferGrpc.PlaceOfferBlockingStub placeOfferBlockingStub;\n+    private final CorePersistenceProtoResolver corePersistenceProtoResolver;\n+    private final CoreNetworkProtoResolver coreNetworkProtoResolver;\n+\n+    public static void main(String[] args) throws Exception {\n+        instance = new BisqGrpcClient(\"localhost\", 8888);\n+    }\n+\n+    private BisqGrpcClient(String host, int port) {\n+        this(ManagedChannelBuilder.forAddress(host, port)\n+                // Channels are secure by default (via SSL/TLS). For the example we disable TLS to avoid\n+                // needing certificates.\n+                .usePlaintext(true).build());\n+\n+        // Simple input scanner\n+        // TODO use some more sophisticated input processing with validation....\n+        try (Scanner scanner = new Scanner(System.in);) {\n+            while (true) {\n+                long startTs = System.currentTimeMillis();\n+\n+                String[] tokens = scanner.nextLine().split(\" \");\n+                if (tokens.length == 0) {\n+                    return;\n+                }\n+                String command = tokens[0];\n+                List<String> params = new ArrayList<>();\n+                if (tokens.length > 1) {\n+                    params.addAll(Arrays.asList(tokens));\n+                    params.remove(0);\n+                }\n+                String result = \"\";\n+\n+                switch (command) {\n+                    case \"getVersion\":\n+                        result = getVersion();\n+                        break;\n+                    case \"getBalance\":\n+                        result = Coin.valueOf(getBalance()).toFriendlyString();\n+                        break;\n+                    case \"getTradeStatistics\":\n+                        List<bisq.core.trade.statistics.TradeStatistics2> tradeStatistics = getTradeStatistics().stream()\n+                                .map(bisq.core.trade.statistics.TradeStatistics2::fromProto)\n+                                .collect(Collectors.toList());\n+\n+                        result = tradeStatistics.toString();\n+                        break;\n+                    case \"getOffers\":\n+                        List<bisq.core.offer.Offer> offers = getOffers().stream()\n+                                .map(bisq.core.offer.Offer::fromProto)\n+                                .collect(Collectors.toList());\n+                        result = offers.toString();\n+                        break;\n+                    case \"getPaymentAccounts\":\n+                        List<PaymentAccount> paymentAccounts = getPaymentAccounts().stream()\n+                                .map(proto -> PaymentAccount.fromProto(proto, corePersistenceProtoResolver))\n+                                .collect(Collectors.toList());\n+                        result = paymentAccounts.toString();\n+                        break;\n+                    case \"placeOffer\":\n+                        // test input: placeOffer CNY BUY 750000000 true -0.2251 1000000 500000 0.12 5a972121-c30a-4b0e-b519-b17b63795d16", "originalCommit": "918c6c1289243c4b35dcd98dfeb5796cd9fda7b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ3NTQ5MA==", "url": "https://github.com/bisq-network/bisq/pull/3889#discussion_r368475490", "bodyText": "Please add this comment to #3888.", "author": "cbeams", "createdAt": "2020-01-20T10:33:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ3NDA2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ3NDMwMw==", "url": "https://github.com/bisq-network/bisq/pull/3889#discussion_r368474303", "bodyText": "Somehow this command didn't work for me.", "author": "ripcurlx", "createdAt": "2020-01-20T10:30:58Z", "path": "grpc/src/main/java/bisq/grpc/BisqGrpcClient.java", "diffHunk": "@@ -0,0 +1,297 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.grpc;\n+\n+import bisq.core.payment.PaymentAccount;\n+import bisq.core.proto.network.CoreNetworkProtoResolver;\n+import bisq.core.proto.persistable.CorePersistenceProtoResolver;\n+\n+import org.bitcoinj.core.Coin;\n+\n+import java.time.Clock;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Scanner;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+\n+\n+import bisq.grpc.protobuf.GetBalanceGrpc;\n+import bisq.grpc.protobuf.GetBalanceRequest;\n+import bisq.grpc.protobuf.GetOffersGrpc;\n+import bisq.grpc.protobuf.GetOffersRequest;\n+import bisq.grpc.protobuf.GetPaymentAccountsGrpc;\n+import bisq.grpc.protobuf.GetPaymentAccountsRequest;\n+import bisq.grpc.protobuf.GetTradeStatisticsGrpc;\n+import bisq.grpc.protobuf.GetTradeStatisticsRequest;\n+import bisq.grpc.protobuf.GetVersionGrpc;\n+import bisq.grpc.protobuf.GetVersionRequest;\n+import bisq.grpc.protobuf.PlaceOfferGrpc;\n+import bisq.grpc.protobuf.PlaceOfferRequest;\n+import bisq.grpc.protobuf.StopServerGrpc;\n+import bisq.grpc.protobuf.StopServerRequest;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.StatusRuntimeException;\n+\n+/**\n+ * gRPC client.\n+ *\n+ * FIXME We get warning 'DEBUG io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0 - direct buffer constructor: unavailable\n+ * java.lang.UnsupportedOperationException: Reflective setAccessible(true) disabled' which is\n+ * related to Java 10 changes. Requests are working but we should find out why we get that warning\n+ */\n+@Slf4j\n+public class BisqGrpcClient {\n+    private static BisqGrpcClient instance;\n+\n+    private final ManagedChannel channel;\n+    private final GetVersionGrpc.GetVersionBlockingStub getVersionStub;\n+    private final GetBalanceGrpc.GetBalanceBlockingStub getBalanceStub;\n+    private final StopServerGrpc.StopServerBlockingStub stopServerStub;\n+    private final GetTradeStatisticsGrpc.GetTradeStatisticsBlockingStub getTradeStatisticsStub;\n+    private final GetOffersGrpc.GetOffersBlockingStub getOffersStub;\n+    private final GetPaymentAccountsGrpc.GetPaymentAccountsBlockingStub getPaymentAccountsStub;\n+    private final PlaceOfferGrpc.PlaceOfferBlockingStub placeOfferBlockingStub;\n+    private final CorePersistenceProtoResolver corePersistenceProtoResolver;\n+    private final CoreNetworkProtoResolver coreNetworkProtoResolver;\n+\n+    public static void main(String[] args) throws Exception {\n+        instance = new BisqGrpcClient(\"localhost\", 8888);\n+    }\n+\n+    private BisqGrpcClient(String host, int port) {\n+        this(ManagedChannelBuilder.forAddress(host, port)\n+                // Channels are secure by default (via SSL/TLS). For the example we disable TLS to avoid\n+                // needing certificates.\n+                .usePlaintext(true).build());\n+\n+        // Simple input scanner\n+        // TODO use some more sophisticated input processing with validation....\n+        try (Scanner scanner = new Scanner(System.in);) {\n+            while (true) {\n+                long startTs = System.currentTimeMillis();\n+\n+                String[] tokens = scanner.nextLine().split(\" \");\n+                if (tokens.length == 0) {\n+                    return;\n+                }\n+                String command = tokens[0];\n+                List<String> params = new ArrayList<>();\n+                if (tokens.length > 1) {\n+                    params.addAll(Arrays.asList(tokens));\n+                    params.remove(0);\n+                }\n+                String result = \"\";\n+\n+                switch (command) {\n+                    case \"getVersion\":\n+                        result = getVersion();\n+                        break;\n+                    case \"getBalance\":\n+                        result = Coin.valueOf(getBalance()).toFriendlyString();\n+                        break;\n+                    case \"getTradeStatistics\":\n+                        List<bisq.core.trade.statistics.TradeStatistics2> tradeStatistics = getTradeStatistics().stream()\n+                                .map(bisq.core.trade.statistics.TradeStatistics2::fromProto)\n+                                .collect(Collectors.toList());\n+\n+                        result = tradeStatistics.toString();\n+                        break;\n+                    case \"getOffers\":\n+                        List<bisq.core.offer.Offer> offers = getOffers().stream()\n+                                .map(bisq.core.offer.Offer::fromProto)\n+                                .collect(Collectors.toList());\n+                        result = offers.toString();\n+                        break;\n+                    case \"getPaymentAccounts\":\n+                        List<PaymentAccount> paymentAccounts = getPaymentAccounts().stream()\n+                                .map(proto -> PaymentAccount.fromProto(proto, corePersistenceProtoResolver))\n+                                .collect(Collectors.toList());\n+                        result = paymentAccounts.toString();\n+                        break;\n+                    case \"placeOffer\":\n+                        // test input: placeOffer CNY BUY 750000000 true -0.2251 1000000 500000 0.12 5a972121-c30a-4b0e-b519-b17b63795d16\n+                        // payment accountId and currency need to be adopted\n+\n+                        // We expect 9 params\n+                        // TODO add basic input validation\n+                        try {\n+                            checkArgument(params.size() == 9);\n+                            String currencyCode = params.get(0);\n+                            String directionAsString = params.get(1);\n+                            long priceAsLong = Long.parseLong(params.get(2));\n+                            boolean useMarketBasedPrice = Boolean.parseBoolean(params.get(3));\n+                            double marketPriceMargin = Double.parseDouble(params.get(4));\n+                            long amountAsLong = Long.parseLong(params.get(5));\n+                            long minAmountAsLong = Long.parseLong(params.get(6));\n+                            double buyerSecurityDeposit = Double.parseDouble(params.get(7));\n+                            String paymentAccountId = params.get(8);\n+                            boolean success = placeOffer(currencyCode,\n+                                    directionAsString,\n+                                    priceAsLong,\n+                                    useMarketBasedPrice,\n+                                    marketPriceMargin,\n+                                    amountAsLong,\n+                                    minAmountAsLong,\n+                                    buyerSecurityDeposit,\n+                                    paymentAccountId);\n+                            result = String.valueOf(success);\n+                            break;\n+                        } catch (Throwable t) {\n+                            log.error(t.toString(), t);\n+                            break;\n+                        }\n+                    case \"stop\":\n+                        result = \"Shut down client\";\n+                        try {\n+                            shutdown();\n+                        } catch (InterruptedException e) {\n+                            log.error(e.toString(), e);\n+                        }\n+                        break;\n+                    case \"stopServer\":", "originalCommit": "918c6c1289243c4b35dcd98dfeb5796cd9fda7b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ3NDc3NQ==", "url": "https://github.com/bisq-network/bisq/pull/3889#discussion_r368474775", "bodyText": "Please add this comment to #3888.", "author": "cbeams", "createdAt": "2020-01-20T10:31:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ3NDMwMw=="}], "type": "inlineReview"}, {"oid": "b34d59c0a930e436b0b542114c48005ff857d4c8", "url": "https://github.com/bisq-network/bisq/commit/b34d59c0a930e436b0b542114c48005ff857d4c8", "message": "Introduce Config as replacement for BisqEnvironment\n\nPrior to this commit, BisqExecutable has been responsible for parsing\ncommand line and config file options and BisqEnvironment has been\nresponsible for assigning default values to those options and providing\naccess to option values to callers throughout the codebase.\n\nThis approach has worked, but at considerable costs in complexity,\nverbosity, and lack of any type-safety in option values. BisqEnvironment\nis based on the Spring Framework's Environment abstraction, which\nprovides a great deal of flexibility in handling command line options,\nenvironment variables, and more, but also operates on the assumption\nthat such inputs have String-based values.\n\nAfter having this infrastructure in place for years now, it has become\nevident that using Spring's Environment abstraction was both overkill\nfor what we needed and limited us from getting the kind of concision and\ntype saftey that we want. The Environment abstraction is by default\nactually too flexible. For example, Bisq does not want or need to have\nenvironment variables potentially overriding configuration file values,\nas this increases our attack surface and makes our threat model more\ncomplex. This is why we explicitly removed support for handling\nenvironment variables quite some time ago.\n\nThe BisqEnvironment class has also organically evolved toward becoming a\nkind of \"God object\", responsible for more than just option handling. It\nis also, for example, responsible for tracking the status of the user's\nlocal Bitcoin node, if any. It is also responsible for writing values to\nthe bisq.properties config file when certain ban filters arrive via the\np2p network. In the commits that follow, these unrelated functions will\nbe factored out appropriately in order to separate concerns.\n\nAs a solution to these problems, this commit begins the process of\neliminating BisqEnvironment in favor of a new, bespoke Config class\ncustom-tailored to Bisq's needs. Config removes the responsibility for\noption parsing from BisqExecutable, and in the end provides \"one-stop\nshopping\" for all option parsing and access needs.\n\nThe changes included in this commit represent a proof of concept for the\nConfig class, where handling of a number of options has been moved from\nBisqEnvironment and BisqExecutable over to Config. Because the migration\nis only partial, both Config and BisqEnvironment are injected\nside-by-side into calling code that needs access to options. As the\nmigration is completed, BisqEnvironment will be removed entirely, and\nonly the Config object will remain.\n\nAn additional benefit of the elimination of BisqEnvironment is that it\nwill allow us to remove our dependency on the Spring Framework (with the\nexception of the standalone pricenode application, which is Spring-based\nby design).\n\nNote that while this change and those that follow it are principally a\nrefactoring effort, certain functional changes have been introduced. For\nexample, Bisq now supports a `--configFile` argument at the command line\nthat functions very similarly to Bitcoin Core's `-conf` option.", "committedDate": "2020-01-20T15:37:54Z", "type": "commit"}, {"oid": "cdaa901a298841c5613fc60fb0d1d981565578d3", "url": "https://github.com/bisq-network/bisq/commit/cdaa901a298841c5613fc60fb0d1d981565578d3", "message": "Move 'referralId' option handling from BisqEnvironment to Config", "committedDate": "2020-01-20T15:37:55Z", "type": "commit"}, {"oid": "70bdccb258546611332d50871f9dd12084a1d59c", "url": "https://github.com/bisq-network/bisq/commit/70bdccb258546611332d50871f9dd12084a1d59c", "message": "Move 'useDevMode' option handling from BisqEnvironment to Config", "committedDate": "2020-01-20T15:37:55Z", "type": "commit"}, {"oid": "f3e0b853db2f0d3dc39a3cf0201a2af27706415f", "url": "https://github.com/bisq-network/bisq/commit/f3e0b853db2f0d3dc39a3cf0201a2af27706415f", "message": "Move 'btcNetworkDir' and co from BisqEnvironment to Config", "committedDate": "2020-01-20T15:37:56Z", "type": "commit"}, {"oid": "f029fea3866b4f6e2338077108615ab427abaa4f", "url": "https://github.com/bisq-network/bisq/commit/f029fea3866b4f6e2338077108615ab427abaa4f", "message": "Move 'useDevPrivilegeKeys' option handling from BisqEnvironment to Config", "committedDate": "2020-01-20T15:39:29Z", "type": "commit"}, {"oid": "6c1ef5921c415967f9c5211f05681aff84aadea2", "url": "https://github.com/bisq-network/bisq/commit/6c1ef5921c415967f9c5211f05681aff84aadea2", "message": "Remove BisqException parser calls for options already moved to Config\n\nSet OptionParser.allowsUnrecognizedOptions(true) to make sure\nBisqEnvironment doesn't fail while options are still being transferred\none-by-one to Config.", "committedDate": "2020-01-20T15:39:29Z", "type": "commit"}, {"oid": "e2781c16c5e29dc3b87f47fc2945ec81281306e0", "url": "https://github.com/bisq-network/bisq/commit/e2781c16c5e29dc3b87f47fc2945ec81281306e0", "message": "Move 'dumpStatistics' option handling from BisqEnvironment to Config", "committedDate": "2020-01-20T15:39:29Z", "type": "commit"}, {"oid": "ceac8bb9e22351077d5a75bc9cbc68678b2dc816", "url": "https://github.com/bisq-network/bisq/commit/ceac8bb9e22351077d5a75bc9cbc68678b2dc816", "message": "Finish moving baseCurrencyNetwork option handling to Config", "committedDate": "2020-01-20T15:39:29Z", "type": "commit"}, {"oid": "a19410764689a6a59a283e6a8b8b50c805c8687f", "url": "https://github.com/bisq-network/bisq/commit/a19410764689a6a59a283e6a8b8b50c805c8687f", "message": "Finish moving 'appDataDir' option handling to Config\n\nNOTE: This removes entirely the old BisqExecutable.appDataDir method\nimplemented for the v0.5.3 hotfix that renames the data dir from 'bisq'\nto 'Bisq'. See a7f3d68cb for details.", "committedDate": "2020-01-20T15:39:30Z", "type": "commit"}, {"oid": "e0766af5d05772347cb5700243ad74651d15ab2b", "url": "https://github.com/bisq-network/bisq/commit/e0766af5d05772347cb5700243ad74651d15ab2b", "message": "Finish moving 'userDataDir' option handling to Config", "committedDate": "2020-01-20T15:39:30Z", "type": "commit"}, {"oid": "1842c47b2bf9934e288aa8ab74e3b6f1c728b630", "url": "https://github.com/bisq-network/bisq/commit/1842c47b2bf9934e288aa8ab74e3b6f1c728b630", "message": "Remove long-unused core.btc.UserAgent class\n\nThis was added way back in 8f8866da and has since fallen out of use\nentirely.\n\nRemoving it now because it depends on BisqEnvironment.appName, which\nwill be moved to Config in the next commit.", "committedDate": "2020-01-20T15:39:30Z", "type": "commit"}, {"oid": "6a20013c77de7dbe4fc5233d3c95cc45f6409574", "url": "https://github.com/bisq-network/bisq/commit/6a20013c77de7dbe4fc5233d3c95cc45f6409574", "message": "Finish moving 'appName' option handling to Config", "committedDate": "2020-01-20T15:39:30Z", "type": "commit"}, {"oid": "849bd7c286fe2f6e2aadc5835340dca19b50f9e3", "url": "https://github.com/bisq-network/bisq/commit/849bd7c286fe2f6e2aadc5835340dca19b50f9e3", "message": "Move 'maxMemory' option handling to Config\n\nNote that the default value of 600 advertised in BisqExecutable's option\nhandling was incorrect. The actual value had since become 1200 MB. This\ncorrect default is now reflected in Config's option handling.", "committedDate": "2020-01-20T15:39:30Z", "type": "commit"}, {"oid": "13db7672a6e1c674c90d51f288de765273d620d0", "url": "https://github.com/bisq-network/bisq/commit/13db7672a6e1c674c90d51f288de765273d620d0", "message": "Remove unused 'desktopWithHttpApi' option handling", "committedDate": "2020-01-20T15:39:30Z", "type": "commit"}, {"oid": "051c53278e79e5f7ac0d73b975eed9ad5255e27b", "url": "https://github.com/bisq-network/bisq/commit/051c53278e79e5f7ac0d73b975eed9ad5255e27b", "message": "Move 'ignoreDevMsg' option handling to Config", "committedDate": "2020-01-20T15:39:31Z", "type": "commit"}, {"oid": "a720475871fbc5c3daefbaecde8cfbc70fdf4bc3", "url": "https://github.com/bisq-network/bisq/commit/a720475871fbc5c3daefbaecde8cfbc70fdf4bc3", "message": "Move 'providers' option handling to Config\n\nThis option should be renamed to 'priceNodes' or similar, but is out of\nscope here.", "committedDate": "2020-01-20T15:39:31Z", "type": "commit"}, {"oid": "a2f5d5a77a8a2245ebd002eb0e6b3b28af89a3dc", "url": "https://github.com/bisq-network/bisq/commit/a2f5d5a77a8a2245ebd002eb0e6b3b28af89a3dc", "message": "Remove now unused AppOptionKeys class", "committedDate": "2020-01-20T15:39:31Z", "type": "commit"}, {"oid": "f6319fe66f279dd72eac377072398fc8ae25997e", "url": "https://github.com/bisq-network/bisq/commit/f6319fe66f279dd72eac377072398fc8ae25997e", "message": "Finish moving 'logLevel' option handling to Config", "committedDate": "2020-01-20T15:39:31Z", "type": "commit"}, {"oid": "7be2ff19f844d8ae00684eaa5c25deb5acede8bb", "url": "https://github.com/bisq-network/bisq/commit/7be2ff19f844d8ae00684eaa5c25deb5acede8bb", "message": "Remove now unused CommonOptionKeys class", "committedDate": "2020-01-20T15:39:31Z", "type": "commit"}, {"oid": "e118165e9a05aaed99fdb023edd1d2fd799def6c", "url": "https://github.com/bisq-network/bisq/commit/e118165e9a05aaed99fdb023edd1d2fd799def6c", "message": "Move 'seedNode' option handling to Config\n\nAnd eliminate @Named injection in favor of calling config.getSeedNodes()", "committedDate": "2020-01-20T15:39:31Z", "type": "commit"}, {"oid": "c56c06d939a21d8cbdb475a32ac55b9be0e27703", "url": "https://github.com/bisq-network/bisq/commit/c56c06d939a21d8cbdb475a32ac55b9be0e27703", "message": "Move 'banList' option handling to Config", "committedDate": "2020-01-20T15:39:32Z", "type": "commit"}, {"oid": "ef7196ef8aca2a75561560fb9450d9baff8fee75", "url": "https://github.com/bisq-network/bisq/commit/ef7196ef8aca2a75561560fb9450d9baff8fee75", "message": "Finish moving 'nodePort' option handling to Config", "committedDate": "2020-01-20T15:39:32Z", "type": "commit"}, {"oid": "0e48a3ef2c773540db5844b454bac5580e9e97ed", "url": "https://github.com/bisq-network/bisq/commit/0e48a3ef2c773540db5844b454bac5580e9e97ed", "message": "Move 'useLocalhostForP2P' option handling to Config", "committedDate": "2020-01-20T15:39:32Z", "type": "commit"}, {"oid": "8d6dbad484499c296d65e413864bb7b8e53cea07", "url": "https://github.com/bisq-network/bisq/commit/8d6dbad484499c296d65e413864bb7b8e53cea07", "message": "Move 'maxConnections' option handling to Config", "committedDate": "2020-01-20T15:39:32Z", "type": "commit"}, {"oid": "5c02b120438341cc8b110445abb3a34b886b4698", "url": "https://github.com/bisq-network/bisq/commit/5c02b120438341cc8b110445abb3a34b886b4698", "message": "Move 'socks5ProxyBtcAddress' option handling to Config", "committedDate": "2020-01-20T15:39:32Z", "type": "commit"}, {"oid": "5a0683e9849b34e4dcd3c8835e7426f59be362ff", "url": "https://github.com/bisq-network/bisq/commit/5a0683e9849b34e4dcd3c8835e7426f59be362ff", "message": "Move 'socks5ProxyHttpAddress' option handling to Config", "committedDate": "2020-01-20T15:39:32Z", "type": "commit"}, {"oid": "fea3a641c0cfbb4731d9a1d41e8784b5bf54fa45", "url": "https://github.com/bisq-network/bisq/commit/fea3a641c0cfbb4731d9a1d41e8784b5bf54fa45", "message": "Move 'torrcFile' option handling to Config", "committedDate": "2020-01-20T15:39:33Z", "type": "commit"}, {"oid": "923ec69966f8d6d1c83b6f6befff0b8cdf47bfe2", "url": "https://github.com/bisq-network/bisq/commit/923ec69966f8d6d1c83b6f6befff0b8cdf47bfe2", "message": "Move 'torrcOptions' option handling to Config", "committedDate": "2020-01-20T15:39:33Z", "type": "commit"}, {"oid": "d25ad0d266bb197eb53770b7a007893428d1c048", "url": "https://github.com/bisq-network/bisq/commit/d25ad0d266bb197eb53770b7a007893428d1c048", "message": "Move 'torControlPort' option handling to Config\n\nNote the introduction of Config.NULL_INT to avoid needing to inject\nnullable boxed Integers in cases like this.", "committedDate": "2020-01-20T15:39:33Z", "type": "commit"}, {"oid": "5966d0ddcbc3e825252b2e325b34d8c3dcf9d7fd", "url": "https://github.com/bisq-network/bisq/commit/5966d0ddcbc3e825252b2e325b34d8c3dcf9d7fd", "message": "Move 'torControlPassword' option handling to Config", "committedDate": "2020-01-20T15:39:33Z", "type": "commit"}, {"oid": "e90b2566a94a7739c8b5e8e8391ac050bc0c871b", "url": "https://github.com/bisq-network/bisq/commit/e90b2566a94a7739c8b5e8e8391ac050bc0c871b", "message": "Move 'torControlCookieFile' option handling to Config", "committedDate": "2020-01-20T15:39:33Z", "type": "commit"}, {"oid": "25604c1b296fd9090f93599d5ed8794e7ba6411b", "url": "https://github.com/bisq-network/bisq/commit/25604c1b296fd9090f93599d5ed8794e7ba6411b", "message": "Move 'torControlUseSafeCookieAuth' option handling to Config", "committedDate": "2020-01-20T15:39:33Z", "type": "commit"}, {"oid": "ca3719a13963049d85620ed7132251188ef16108", "url": "https://github.com/bisq-network/bisq/commit/ca3719a13963049d85620ed7132251188ef16108", "message": "Move 'torStreamIsolation' option handling to Config", "committedDate": "2020-01-20T15:39:33Z", "type": "commit"}, {"oid": "2dbd72b358e1f600d8bdfbf7486414bc3673f447", "url": "https://github.com/bisq-network/bisq/commit/2dbd72b358e1f600d8bdfbf7486414bc3673f447", "message": "Move message throttle option handling to Config", "committedDate": "2020-01-20T15:39:34Z", "type": "commit"}, {"oid": "3002b16776aaa29aa58ce18ab5070b242e98808e", "url": "https://github.com/bisq-network/bisq/commit/3002b16776aaa29aa58ce18ab5070b242e98808e", "message": "Make defaultUserDataDir field a local variable", "committedDate": "2020-01-20T15:39:34Z", "type": "commit"}, {"oid": "8e4107d80ad535facd9f3f9705852d839f56a19d", "url": "https://github.com/bisq-network/bisq/commit/8e4107d80ad535facd9f3f9705852d839f56a19d", "message": "Remove obsolete NETWORK_ID option key\n\nNETWORK_ID has not been in use since commit de93a6fa1, except by\nthe DummySeedNode test class, where its use has been preserved as string\nliterals.", "committedDate": "2020-01-20T15:39:34Z", "type": "commit"}, {"oid": "326375e4e4bef5b8ff3dd6e346d9de8783ab8102", "url": "https://github.com/bisq-network/bisq/commit/326375e4e4bef5b8ff3dd6e346d9de8783ab8102", "message": "Remove now unused NetworkOptionKeys class", "committedDate": "2020-01-20T15:39:34Z", "type": "commit"}, {"oid": "be971904158afbaf0224196b39d2b0226a08bee3", "url": "https://github.com/bisq-network/bisq/commit/be971904158afbaf0224196b39d2b0226a08bee3", "message": "Rename Config.{NULL_INT=>DEFAULT_INT} for clarity", "committedDate": "2020-01-20T15:39:34Z", "type": "commit"}, {"oid": "769c62b7b341354fe2e27e3d0f86026922ffb5dc", "url": "https://github.com/bisq-network/bisq/commit/769c62b7b341354fe2e27e3d0f86026922ffb5dc", "message": "Finish moving 'bitcoinRegtestHost' option handling to Config", "committedDate": "2020-01-20T15:39:34Z", "type": "commit"}, {"oid": "85285890d193f29b1f0a764bc1a06a25a906706c", "url": "https://github.com/bisq-network/bisq/commit/85285890d193f29b1f0a764bc1a06a25a906706c", "message": "Move Config.log declaration", "committedDate": "2020-01-20T15:39:35Z", "type": "commit"}, {"oid": "4fb60a33ac7b6d46b197201fd7c614b6d9eaaa2a", "url": "https://github.com/bisq-network/bisq/commit/4fb60a33ac7b6d46b197201fd7c614b6d9eaaa2a", "message": "Finish moving 'ignoreLocalBtcNode' option handling to Config", "committedDate": "2020-01-20T15:39:35Z", "type": "commit"}, {"oid": "5271d4d574a199117925586e71611632c77b5c37", "url": "https://github.com/bisq-network/bisq/commit/5271d4d574a199117925586e71611632c77b5c37", "message": "Move 'btcNodes' option handling to Config", "committedDate": "2020-01-20T15:39:35Z", "type": "commit"}, {"oid": "90031543b9b9cdbf378dad55c8f0ebfa81a0843b", "url": "https://github.com/bisq-network/bisq/commit/90031543b9b9cdbf378dad55c8f0ebfa81a0843b", "message": "Move 'useTorForBtc' option handling to Config", "committedDate": "2020-01-20T15:39:35Z", "type": "commit"}, {"oid": "b7889dd994d86f18711950fdd532bf890ad7fb0d", "url": "https://github.com/bisq-network/bisq/commit/b7889dd994d86f18711950fdd532bf890ad7fb0d", "message": "Move 'socks5DiscoverMode' option handling to Config", "committedDate": "2020-01-20T15:39:35Z", "type": "commit"}, {"oid": "97cafaf61e9c2f47955d9ba7cef16698e8d72a1a", "url": "https://github.com/bisq-network/bisq/commit/97cafaf61e9c2f47955d9ba7cef16698e8d72a1a", "message": "Move 'useAllProvidedNodes' option handling to Config", "committedDate": "2020-01-20T15:39:35Z", "type": "commit"}, {"oid": "c8d739ded5d3b5e72baec9f5ca74749a56bab8c1", "url": "https://github.com/bisq-network/bisq/commit/c8d739ded5d3b5e72baec9f5ca74749a56bab8c1", "message": "Move 'userAgent' option handling to Config", "committedDate": "2020-01-20T15:39:36Z", "type": "commit"}, {"oid": "99cf8c9596946fb19840fc0e66615c3d6d3ad037", "url": "https://github.com/bisq-network/bisq/commit/99cf8c9596946fb19840fc0e66615c3d6d3ad037", "message": "Move 'numConnectionsForBtc' option handling to Config\n\nNote that this change makes the user-facing change of renaming\nthe 'numConnectionForBtc' (singular 'Connection') to\n'numConnectionsForBtc' (plural 'Connections'). It is presumed that not\nmany users are relying on this option for day-to-day operations, and the\nsingular version was pretty clearly a typo / oversight.", "committedDate": "2020-01-20T15:40:29Z", "type": "commit"}, {"oid": "919c58eefe2aeaa9aa369c217f54ec827bd1bcb4", "url": "https://github.com/bisq-network/bisq/commit/919c58eefe2aeaa9aa369c217f54ec827bd1bcb4", "message": "Remove now unused BtcOptionKeys class\n\nIncludes cleaning up a couple unrelated unused imports in\nP2PNetworkLoad.", "committedDate": "2020-01-20T15:40:29Z", "type": "commit"}, {"oid": "80754ed3d52bd8fb639a2740cd395c9405e08ba4", "url": "https://github.com/bisq-network/bisq/commit/80754ed3d52bd8fb639a2740cd395c9405e08ba4", "message": "Move 'rpcUser' option handling to Config", "committedDate": "2020-01-20T15:40:30Z", "type": "commit"}, {"oid": "b4d4ca4fbe1d19a5763584a933c463aeb6b6e48b", "url": "https://github.com/bisq-network/bisq/commit/b4d4ca4fbe1d19a5763584a933c463aeb6b6e48b", "message": "Move 'rpcPassword' option handling to Config", "committedDate": "2020-01-20T15:40:30Z", "type": "commit"}, {"oid": "182f47239488420786953a7e819a76424f4ea964", "url": "https://github.com/bisq-network/bisq/commit/182f47239488420786953a7e819a76424f4ea964", "message": "Move 'rpcHost' option handling to Config", "committedDate": "2020-01-20T15:40:30Z", "type": "commit"}, {"oid": "86e1ae1008e07c130f0d3c81cd508ef22ab2d699", "url": "https://github.com/bisq-network/bisq/commit/86e1ae1008e07c130f0d3c81cd508ef22ab2d699", "message": "Move 'rpcPort' option handling to Config", "committedDate": "2020-01-20T15:40:30Z", "type": "commit"}, {"oid": "3841e6b1ddaefdeb9628dafe1697d51c6fdba0ee", "url": "https://github.com/bisq-network/bisq/commit/3841e6b1ddaefdeb9628dafe1697d51c6fdba0ee", "message": "Move 'rpcBlockNotificationPort' option handling to Config", "committedDate": "2020-01-20T15:40:30Z", "type": "commit"}, {"oid": "9a7eedb250cdde636f4cb8e91568b91c2ce6daf5", "url": "https://github.com/bisq-network/bisq/commit/9a7eedb250cdde636f4cb8e91568b91c2ce6daf5", "message": "Move 'rpcBlockNotificationHost' option handling to Config", "committedDate": "2020-01-20T15:40:30Z", "type": "commit"}, {"oid": "2995bc27bd1c6ab2726dd00ea4dacd2b1e0f5f75", "url": "https://github.com/bisq-network/bisq/commit/2995bc27bd1c6ab2726dd00ea4dacd2b1e0f5f75", "message": "Move 'dumpBlockchainData' option handling to Config", "committedDate": "2020-01-20T15:40:31Z", "type": "commit"}, {"oid": "519259b752999eb5cd3b4334499fe9b8cb90f6df", "url": "https://github.com/bisq-network/bisq/commit/519259b752999eb5cd3b4334499fe9b8cb90f6df", "message": "Move 'fullDaoNode' option handling to Config", "committedDate": "2020-01-20T15:40:31Z", "type": "commit"}, {"oid": "6ea146444f9e9cb02d8cc55960ca7b96667b8235", "url": "https://github.com/bisq-network/bisq/commit/6ea146444f9e9cb02d8cc55960ca7b96667b8235", "message": "Move 'genesisTxId' option handling to Config", "committedDate": "2020-01-20T15:40:31Z", "type": "commit"}, {"oid": "ca5b260806480ac5821cb04df2c0ff11da7048e2", "url": "https://github.com/bisq-network/bisq/commit/ca5b260806480ac5821cb04df2c0ff11da7048e2", "message": "Move 'genesisBlockHeight' option handling to Config", "committedDate": "2020-01-20T15:40:31Z", "type": "commit"}, {"oid": "aadf7c76aa48c4050a280458784b298e6b78ed7b", "url": "https://github.com/bisq-network/bisq/commit/aadf7c76aa48c4050a280458784b298e6b78ed7b", "message": "Move 'genesisTotalSupply' option handling to Config", "committedDate": "2020-01-20T15:40:31Z", "type": "commit"}, {"oid": "15c492b5b4c044d3c6a768d9764987681075f724", "url": "https://github.com/bisq-network/bisq/commit/15c492b5b4c044d3c6a768d9764987681075f724", "message": "Finish moving 'daoActivated' option handling to Config", "committedDate": "2020-01-20T15:40:31Z", "type": "commit"}, {"oid": "43fb85151444c1e2b5ac2dfc013f5bf7ef13ffd8", "url": "https://github.com/bisq-network/bisq/commit/43fb85151444c1e2b5ac2dfc013f5bf7ef13ffd8", "message": "Remove now unused DaoOptionKeys class", "committedDate": "2020-01-20T15:40:32Z", "type": "commit"}, {"oid": "9ff6dd2c828b153d74333701d615ee9a3e0b89b2", "url": "https://github.com/bisq-network/bisq/commit/9ff6dd2c828b153d74333701d615ee9a3e0b89b2", "message": "Finish moving 'useDevPrivilegeKeys' option handling to Config", "committedDate": "2020-01-20T15:40:32Z", "type": "commit"}, {"oid": "c6d042568a26dad2d3cde8ff685f65f77d9486f2", "url": "https://github.com/bisq-network/bisq/commit/c6d042568a26dad2d3cde8ff685f65f77d9486f2", "message": "Finish moving 'useDevMode' option handling to Config", "committedDate": "2020-01-20T15:40:32Z", "type": "commit"}, {"oid": "1216ba2e2cf33bbb3f5d5ea087e696c66e7a188e", "url": "https://github.com/bisq-network/bisq/commit/1216ba2e2cf33bbb3f5d5ea087e696c66e7a188e", "message": "Finish moving 'referralId' option handling to Config", "committedDate": "2020-01-20T15:40:32Z", "type": "commit"}, {"oid": "f5a18547626170f5d88363ab01a151c83522c860", "url": "https://github.com/bisq-network/bisq/commit/f5a18547626170f5d88363ab01a151c83522c860", "message": "Remove now unused BisqEnvironment class\n\nIn previous commits, BisqEnvironment functionality has been fully ported\nto the new, simpler and more type-safe Config class. This change removes\nBisqEnvironment and all dependencies on the Spring Framework Environment\ninterface that it implements.\n\nThe one exception is the pricenode module, which is separate and apart\nfrom the rest of the codebase in that it is a standalone, Spring-based\nHTTP service.", "committedDate": "2020-01-20T15:41:19Z", "type": "commit"}, {"oid": "2c7829948ba4812dc2b6cade68e181c098890b20", "url": "https://github.com/bisq-network/bisq/commit/2c7829948ba4812dc2b6cade68e181c098890b20", "message": "Replace uses of Spring CollectionUtils\n\nSee Javadoc in new bisq.common.util.CollectionUtils class.", "committedDate": "2020-01-20T15:41:19Z", "type": "commit"}, {"oid": "51a0e66ab63195256821f013ae35224a231dc57f", "url": "https://github.com/bisq-network/bisq/commit/51a0e66ab63195256821f013ae35224a231dc57f", "message": "Replace use of Spring's AnnotationUtils", "committedDate": "2020-01-20T15:41:19Z", "type": "commit"}, {"oid": "658df7968ed7bd0c2596544baeb7cfff7845f6f4", "url": "https://github.com/bisq-network/bisq/commit/658df7968ed7bd0c2596544baeb7cfff7845f6f4", "message": "Replace use of Spring's ClassUtils", "committedDate": "2020-01-20T15:41:20Z", "type": "commit"}, {"oid": "75ab51de1af3913e92467fdf5276659d0a6e42c9", "url": "https://github.com/bisq-network/bisq/commit/75ab51de1af3913e92467fdf5276659d0a6e42c9", "message": "Replace use of Spring's StringUtils", "committedDate": "2020-01-20T15:41:20Z", "type": "commit"}, {"oid": "c968ddf034e85ce8df367a99e7e1e002447c8106", "url": "https://github.com/bisq-network/bisq/commit/c968ddf034e85ce8df367a99e7e1e002447c8106", "message": "Eliminate dependency on Spring Framework\n\nIn conjuction with the previous commits, this change removes entirely\nBisq's dependency on the Spring Framework, with the exception of the\npricenode module, which is not a Bisq node per se, but a standalone\nSpring-based HTTP service.\n\nNote that the removal of the Gradle `exclude` directive for\ncommons-logging is because Apache HttpClient still depends on it and\nSpring had previously been providing it transitively. If this `exclude`\ndirective is not removed, NoClassDefFound errors get thrown at runtime\nfrom HttpClient code unable to load the commons-logging Logger class.", "committedDate": "2020-01-20T15:46:56Z", "type": "commit"}, {"oid": "6d6d41b32908f4c176d1e00b031c77eb88d9fad9", "url": "https://github.com/bisq-network/bisq/commit/6d6d41b32908f4c176d1e00b031c77eb88d9fad9", "message": "Broaden BisqExcutable exception handling\n\nPreviously, certain exceptions e.g. IllegalArgumentException would\nresult in the Bisq process exiting with an stack trace. This change\nbroadens exception handling during argument parsing such that all\nThrowable subclasses are caught and the Bisq process exits gracefully\nwith a simple error message.", "committedDate": "2020-01-20T15:46:56Z", "type": "commit"}, {"oid": "022b5f190860240944a0ff98c4f052b361224167", "url": "https://github.com/bisq-network/bisq/commit/022b5f190860240944a0ff98c4f052b361224167", "message": "Make ConfigException extend BisqException\n\nTo avoid the need to manually use String.format during construction.", "committedDate": "2020-01-20T15:46:56Z", "type": "commit"}, {"oid": "73823446182163e3fa53e650e4fa2b8cd7e747c1", "url": "https://github.com/bisq-network/bisq/commit/73823446182163e3fa53e650e4fa2b8cd7e747c1", "message": "Catch ConfigException as contingency, Throwble as fault\n\nPreviously the code under bisq.common.config threw a mix of\nConfigException and IllegalArgumentException. It now throws\nConfigException consistently such that it may be caught and dealt with\nas an anticipated contingency, and such that any other Throwable may be\ncaught and dealt with as a fault, i.e. an unexpected error that probably\nrepresents a bug in the code.\n\nThe https://bisq.network/issues link presented to the user when a fault\noccurs is a redirect added to the website by PR\nhttps://github.com/bisq-network/bisq-website/pull/316.\n\nFor background on contingency vs. fault nomenclature, see:\nhttps://www.oracle.com/technical-resources/articles/enterprise-architecture/effective-exceptions-part3.html", "committedDate": "2020-01-20T15:46:56Z", "type": "commit"}, {"oid": "3f605f873ff656b22108a9dc10aea5b265cfff3f", "url": "https://github.com/bisq-network/bisq/commit/3f605f873ff656b22108a9dc10aea5b265cfff3f", "message": "Remove now unused BisqExecutable option handling\n\nOption handling is now the responsibility of the Config class. JOpt's\nOptionParser is no longer passed down to BisqExecutable subclasses'\ndoExecute method, as they can now rely on the Config abstraction.", "committedDate": "2020-01-20T15:46:56Z", "type": "commit"}, {"oid": "b5503a5aa412deb108eeb4bf0a473f786a435ef8", "url": "https://github.com/bisq-network/bisq/commit/b5503a5aa412deb108eeb4bf0a473f786a435ef8", "message": "Replace HelpRequested exception with Config.isHelpRequested()", "committedDate": "2020-01-20T15:46:57Z", "type": "commit"}, {"oid": "47794174a19dddd6a6e67b0622412cf7055b6148", "url": "https://github.com/bisq-network/bisq/commit/47794174a19dddd6a6e67b0622412cf7055b6148", "message": "Remove ConnectionConfig console output", "committedDate": "2020-01-20T15:46:57Z", "type": "commit"}, {"oid": "e67746b0a4b04dd72f35732065a29398caf39e11", "url": "https://github.com/bisq-network/bisq/commit/e67746b0a4b04dd72f35732065a29398caf39e11", "message": "Remove TestConfig in favor of reworked Config ctors", "committedDate": "2020-01-20T15:46:57Z", "type": "commit"}, {"oid": "a02eea9410ddeb2cb0a58131d72ca06636a60644", "url": "https://github.com/bisq-network/bisq/commit/a02eea9410ddeb2cb0a58131d72ca06636a60644", "message": "Extract Config.APP_DATA_DIR constant", "committedDate": "2020-01-20T15:46:57Z", "type": "commit"}, {"oid": "174d2a98e6697dd8b17e74726c41518e57a50a15", "url": "https://github.com/bisq-network/bisq/commit/174d2a98e6697dd8b17e74726c41518e57a50a15", "message": "Add comments to Config and reorder a few things\n\nThis adds a few basic comments to help understand the structure of the\nConfig class and also reorders several assignments and statements for\nclarity.", "committedDate": "2020-01-20T15:46:57Z", "type": "commit"}, {"oid": "3a6b0ce9d886c3347b1182e7971d2075a1599c5a", "url": "https://github.com/bisq-network/bisq/commit/3a6b0ce9d886c3347b1182e7971d2075a1599c5a", "message": "Normalize creation of appDataDir and subdirs\n\nPrior to this commit, the way that the appDataDir and its subdirectories\nwere created was a haphazard process that worked but in a fragile and\nnon-obvious way. When Config was instantiated, an attempt to call\nbtcNetworkDir.mkdir() was made, but if appDataDir did not already exist,\nthis call would always fail because mkdir() does not create parent\ndirectories. This problem was never detected, though, because the\nKeyStorage class happened to call mkdirs() on its 'keys' subdirectory,\nwhich, because of the plural mkdirs() call ended up creating the whole\n${appDataDir}/${btcNetworkDir}/keys hierarchy. Other btcNetworkDir\nsubdirectories such as tor/ and db/ then benefited from the hierarchy\nalready existing when they attempted to call mkdir() for their own dirs.\nSo the whole arrangement worked only because KeyStorage happened to make\na mkdirs() call and because that code in KeyStorage happened to get\ninvoked before the code that managed the other subdirectories.\n\nThis change ensures that appDataDir and all its subdirectories are\ncreated up front, such that they are guaranteed to exist by the time\nthey are injected into Storage, KeyStorage, WalletsSetup and TorSetup.\nThe hierarchy is unchanged, structured as it always has been:\n\n    ${appDataDir}\n    \u2514\u2500\u2500 btc_mainnet\n        \u251c\u2500\u2500 db\n        \u251c\u2500\u2500 keys\n        \u251c\u2500\u2500 wallet\n        \u2514\u2500\u2500 tor\n\nNote that the tor/ subdirectory actually gets deleted and re-created\nwithin the TorSetup infrastructure regardless of whether the directory\nexists beforehand.", "committedDate": "2020-01-20T15:46:57Z", "type": "commit"}, {"oid": "42a037e19f6f568cfb62cb2a8a44e1e439500a80", "url": "https://github.com/bisq-network/bisq/commit/42a037e19f6f568cfb62cb2a8a44e1e439500a80", "message": "Introduce and document static Config.baseCurrencyNetwork()\n\nPreviously this static property had been managed within\nBaseCurrencyNetwork itself and was accessed directly by callers. Now it\nis managed within Config, made private and accessed only via the\nnew and well-documented baseCurrencyNetwork() method. The same goes for\nbaseCurrencyNetworkParameters().\n\nIt is unfortunate that we must retain these mutable static fields and\naccessors, but after trying to eliminate them entirely, this approach is\nthe lesser of two evils; attempting to use a Config instance and\ninstance methods only ends up being quite cumbersome to implement,\nrequiring Config to be injected into many more classes than it currently\nis. Getting access to the BaseCurrencyNetwork is basically a special\ncase, and treating it specially as a static field is in the end the most\npragmatic approach.", "committedDate": "2020-01-20T15:46:58Z", "type": "commit"}, {"oid": "4ea329060840c0c51833042af32232fdb23703b3", "url": "https://github.com/bisq-network/bisq/commit/4ea329060840c0c51833042af32232fdb23703b3", "message": "Introduce and document static Config.appDataDir()\n\nSee Javadoc added in this change and the previous commit message for\nfurther detail and context.", "committedDate": "2020-01-20T15:46:58Z", "type": "commit"}, {"oid": "876b91e1be0002d2e214da294741d7d3d2baf20a", "url": "https://github.com/bisq-network/bisq/commit/876b91e1be0002d2e214da294741d7d3d2baf20a", "message": "Introduce LocalBitcoinNode and tests\n\nThis new class encapsulates all functionality related to detecting a\nlocal Bitcoin node and reporting whether or not it was detected.\nPreviously this functionality was spread across the Config class\n(formerly BisqEnvironment) with its mutable static\nisLocalBitcoinNodeRunning property and the BisqSetup class with its\ncheckIfLocalHostNodeIsRunning method. All of this functionality now\nlives within the LocalBitcoinNode class, an instance of which is wired\nup via Guice and injected wherever necessary.\n\nNote that the code for detecting whether the node is running has been\nsimplified, in that it is no longer wrapped in its own dedicated Thread.\nThere appears to be no performance benefit from doing so, and leaving it\nin place would have made testing more difficult than necessary.\n\nSeveral methods in BisqSetup have also been refactored to accept\ncallbacks indicating which step should be run next. This has the effect\nof clarifying when the step2()-step5() methods will be called.", "committedDate": "2020-01-20T15:47:52Z", "type": "commit"}, {"oid": "94603768cb10c786cd8e0ddad5f736f9eddb751b", "url": "https://github.com/bisq-network/bisq/commit/94603768cb10c786cd8e0ddad5f736f9eddb751b", "message": "Move Config.getOsUserDataDir to BisqExecutable.osUserDataDir\n\nThis method is used only by BisqExecutable and so has been moved there,\nmade private and documented accordingly.", "committedDate": "2020-01-20T15:47:52Z", "type": "commit"}, {"oid": "e1f54e95b12a9502002c136b202612b5e77c2465", "url": "https://github.com/bisq-network/bisq/commit/e1f54e95b12a9502002c136b202612b5e77c2465", "message": "Rename and reorder test for nonexistent --configFile\n\nThis test is now named consintently and sorted next to other config file\ntests.", "committedDate": "2020-01-20T15:47:52Z", "type": "commit"}, {"oid": "3d991e009a46765999c50baed0b04997d7f0e7ad", "url": "https://github.com/bisq-network/bisq/commit/3d991e009a46765999c50baed0b04997d7f0e7ad", "message": "Qualify relative --configFile value with appDataDir\n\nThis behavior had already been implemented prior to this commit, but has\nnow been tested and improved with refactoring and logging messages.\n\nNote that this approach emulates Bitcoin Core's own behavior. When\nrunning, for example, `bitcoind -conf=rel/path/to/bitcoin.conf`, the\nrelative path is prefixed / fully qualified by the value of the\n`datadir` option. So if `datadir` equals `~/Library/Application\nSupport/Bitcoin`, then the `conf` option value above would be fully\nqualified as\n\n    ~/Library/Application Support/Bitcoin/rel/path/to/bitcoin.conf\n\nIf the argument to `-conf` is an absolute path, e.g.\n`/tmp/bitcoin.conf`, then that absolute path is used without further\nmodification or qualification. It is assumed that the rationale for this\nbehavior is to avoid accidentally running against the wrong conf file\nbecause `bitcoind` was invoked in a different directory than usual or\nbecause a malicious actor replaced the relative conf file with their own\nversion.\n\nBisq's new `--configFile` option works (and is now tested to work) in\nthe same way: relative paths get prefixed by the value of\nConfig.getAppDataDir(), and absolute paths are processed unmodified.", "committedDate": "2020-01-20T15:47:52Z", "type": "commit"}, {"oid": "63489c13f25c48c6ad7110762d13349001d0c39f", "url": "https://github.com/bisq-network/bisq/commit/63489c13f25c48c6ad7110762d13349001d0c39f", "message": "Throw if --configFile value does not exist\n\nPreviously (as of the prior commit), a warning was issued if a\nnon-default config file path was specified at the command line, and then\nthe default config file path was used as a fallback. On review, however,\nit would be better to halt execution immediately if the config file does\nnot exist. There is no risk of breaking backward compatibility by doing\nthis as Bisq never had a --configFile option before the recent commits\nthat introduce it. Furthermore, there is no clear benefit to the\nfallback approach. If the user specifies a given config file and it does\nnot exist, they may not see the warning message in the log, and they may\nbe left with the impression that they are running against their custom\nconfig file when in fact they are running against the default (which may\nbe empty or non-existent itself). Thus throwing an exception as is now\ndone in this commit should make everything more explicit and clear.", "committedDate": "2020-01-20T15:47:53Z", "type": "commit"}, {"oid": "fe506098af055aa05596a552772afab17be89419", "url": "https://github.com/bisq-network/bisq/commit/fe506098af055aa05596a552772afab17be89419", "message": "Introduce Config testing facilities\n\nPreviously ConfigTests constructed Config instances with string-based\noptions, e.g.:\n\n    Config config = new Config(\"--appName=My-Bisq\");\n\nThe advantage here is clarity, but the downside is repetition of the\noption names without any reference to their corresponding Config.*\nconstants.\n\nOne solution to the problem would be to format the option strings using\nconstants declared in the Config class, e.g.:\n\n    Config config = new Config(format(\"--%s=My-Bisq\", APP_NAME));\n\nbut this is verbose, cumbersome to read and write and requires repeating\nhe '--' and '=' option syntax.\n\nThis commit introduces the Opt class and the opt() and configWithOpts()\nmethods to ConfigTests to make testing easier while using constant\nreferences and preserving readability. e.g.:\n\n    Config config = configWithOpts(opt(APP_NAME, \"My-Bisq\"));\n\nIn the process of making these changes a bug was discovered in the\nmonitor submodule's P2PNetworkLoad class and that has been fixed here as\nwell.\n\nThis change also required introducing several option name constants that\nhad not previously been extracted in order to be referenced within\nConfigTests. For consistency and completeness, all additional option\nnames that did not previously have a contstant now have one.", "committedDate": "2020-01-20T15:47:53Z", "type": "commit"}, {"oid": "d5abc97b049b854a62dd5e957f80350b40569dab", "url": "https://github.com/bisq-network/bisq/commit/d5abc97b049b854a62dd5e957f80350b40569dab", "message": "Document Config and related types", "committedDate": "2020-01-20T15:47:53Z", "type": "commit"}, {"oid": "4ac46e47178607c27405941c1eca7231441ff90f", "url": "https://github.com/bisq-network/bisq/commit/4ac46e47178607c27405941c1eca7231441ff90f", "message": "Reorder a few of the most important options\n\nThere is currently no explicit rule for how option-related elements are\nordered in the code, but it is important to understand that the order in\nwhich options are registered via parser.accept() calls is the order in\nwhich they appear in --help output.\n\nIt would be nice to group options together into sections and separate\nthem in the --help output with section headers similar to the way that\nBitcoin Core's help output does it, but this is not a built-in option\nwith the JOpt Simple library, and not worth trying to hack into place at\nthe moment.", "committedDate": "2020-01-20T15:47:53Z", "type": "commit"}, {"oid": "37b669c710888497c6b884d7bd747858131ef858", "url": "https://github.com/bisq-network/bisq/commit/37b669c710888497c6b884d7bd747858131ef858", "message": "Make Config option fields public and inline accessors\n\nSee updated Config Javadoc for rationale.", "committedDate": "2020-01-20T15:47:54Z", "type": "commit"}, {"oid": "efba97581359eba485d074b4b7a715d7851f1f82", "url": "https://github.com/bisq-network/bisq/commit/efba97581359eba485d074b4b7a715d7851f1f82", "message": "Avoid race condition in LocalBitcoinNodeTests\n\nPreviously, Travis CI was failing non-deterministically due to a race\ncondition in which a thread was started in order to call the blocking\nServerSocket.accept() method, and sometimes the subsequent attempt by\nLocalBitcoinNode.detectAndRun() to connect to that socket's port would\noccur before the thread had actually called the accept() method.\n\nThis commit simplifies the approach by removing the thread entirely. As\nit turns out, calling accept() is not necessary; simply constructing a\nnew ServerSocket() binds to and listens on the given port, such that a\nsubsequent attempt to connect() will succeed.", "committedDate": "2020-01-20T15:47:54Z", "type": "commit"}, {"oid": "dd5690fe2ad24b1d5d2ddd80652fa3c2d35d3248", "url": "https://github.com/bisq-network/bisq/commit/dd5690fe2ad24b1d5d2ddd80652fa3c2d35d3248", "message": "Fix code quality issues\n\nPer Codacy report at\nhttps://app.codacy.com/gh/bisq-network/bisq/pullRequest?prid=4835062\n\nNote that the items claiming that bisq.common.config.Config.* is an\nunused import are false positives. These imports are in fact used in\nevery case.", "committedDate": "2020-01-20T15:47:54Z", "type": "commit"}, {"oid": "dd5690fe2ad24b1d5d2ddd80652fa3c2d35d3248", "url": "https://github.com/bisq-network/bisq/commit/dd5690fe2ad24b1d5d2ddd80652fa3c2d35d3248", "message": "Fix code quality issues\n\nPer Codacy report at\nhttps://app.codacy.com/gh/bisq-network/bisq/pullRequest?prid=4835062\n\nNote that the items claiming that bisq.common.config.Config.* is an\nunused import are false positives. These imports are in fact used in\nevery case.", "committedDate": "2020-01-20T15:47:54Z", "type": "forcePushed"}]}