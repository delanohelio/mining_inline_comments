{"pr_number": 4315, "pr_title": "PriceNode: Add support for multiple ExchangeRateProviders", "pr_createdAt": "2020-06-16T19:46:47Z", "pr_url": "https://github.com/bisq-network/bisq/pull/4315", "timeline": [{"oid": "09845a97f1a9734927cc6cb763cf077646a330e3", "url": "https://github.com/bisq-network/bisq/commit/09845a97f1a9734927cc6cb763cf077646a330e3", "message": "Integrate initial set of ExchangeRateProviders\n\nAdd support for a few exchanges to demonstrate and test the pricenode\naggregate rates.\n\nThe chose exchanges were selected because they each provide a varied\nlist of fiat and altcoins, with a substantial overlap between them. This\n provides a robust initial set of datapoints and scenarios for aggregate\n  rates.", "committedDate": "2020-06-16T19:57:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0MTU2NA==", "url": "https://github.com/bisq-network/bisq/pull/4315#discussion_r441341564", "bodyText": "Please wrap comments at 90 characters per bisq-network/style#5.", "author": "cbeams", "createdAt": "2020-06-17T07:35:30Z", "path": "pricenode/src/main/java/bisq/price/spot/ExchangeRateProvider.java", "diffHunk": "@@ -60,4 +75,82 @@ protected void onRefresh() {\n             .filter(e -> \"USD\".equals(e.getCurrency()) || \"LTC\".equals(e.getCurrency()))\n             .forEach(e -> log.info(\"BTC/{}: {}\", e.getCurrency(), e.getPrice()));\n     }\n+\n+    /**\n+     * @param exchangeClass Class of the {@link Exchange} for which the rates should be polled\n+     * @return Exchange rates for Bisq-supported fiat currencies and altcoins in the specified {@link Exchange}", "originalCommit": "fcf713d8ae56b5836e079f8fd0208ca2a0a84787", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0MTk2MQ==", "url": "https://github.com/bisq-network/bisq/pull/4315#discussion_r441341961", "bodyText": "Use ex for exception variable names. (e is also used widely throughout the codebase; ex is preferred).", "author": "cbeams", "createdAt": "2020-06-17T07:36:11Z", "path": "pricenode/src/main/java/bisq/price/spot/ExchangeRateProvider.java", "diffHunk": "@@ -60,4 +75,82 @@ protected void onRefresh() {\n             .filter(e -> \"USD\".equals(e.getCurrency()) || \"LTC\".equals(e.getCurrency()))\n             .forEach(e -> log.info(\"BTC/{}: {}\", e.getCurrency(), e.getPrice()));\n     }\n+\n+    /**\n+     * @param exchangeClass Class of the {@link Exchange} for which the rates should be polled\n+     * @return Exchange rates for Bisq-supported fiat currencies and altcoins in the specified {@link Exchange}\n+     *\n+     * @see CurrencyUtil#getAllSortedFiatCurrencies()\n+     * @see CurrencyUtil#getAllSortedCryptoCurrencies()\n+     */\n+    protected Set<ExchangeRate> doGet(Class<? extends Exchange> exchangeClass) {\n+        Set<ExchangeRate> result = new HashSet<ExchangeRate>();\n+\n+        // Initialize XChange objects\n+        Exchange exchange = ExchangeFactory.INSTANCE.createExchange(exchangeClass.getName());\n+        MarketDataService marketDataService = exchange.getMarketDataService();\n+\n+        // Retrieve all currency pairs supported by the exchange\n+        List<CurrencyPair> currencyPairs = exchange.getExchangeSymbols();\n+\n+        Set<String> supportedCryptoCurrencies = CurrencyUtil.getAllSortedCryptoCurrencies().stream()\n+                .map(TradeCurrency::getCode)\n+                .collect(Collectors.toSet());\n+\n+        Set<String> supportedFiatCurrencies = CurrencyUtil.getAllSortedFiatCurrencies().stream()\n+                .map(TradeCurrency::getCode)\n+                .collect(Collectors.toSet());\n+\n+        // Filter the supported fiat currencies (currency pair format is BTC-FIAT)\n+        currencyPairs.stream()\n+                .filter(cp -> cp.base.equals(Currency.BTC))\n+                .filter(cp -> supportedFiatCurrencies.contains(cp.counter.getCurrencyCode()))\n+                .forEach(cp -> {\n+                    try {\n+                        Ticker t = marketDataService.getTicker(new CurrencyPair(cp.base, cp.counter));\n+\n+                        result.add(new ExchangeRate(\n+                                cp.counter.getCurrencyCode(),\n+                                t.getLast(),\n+                                // Some exchanges do not provide timestamps\n+                                t.getTimestamp() == null ? new Date() : t.getTimestamp(),\n+                                this.getName()\n+                        ));\n+                    } catch (CurrencyPairNotValidException cpnve) {\n+                        // Some exchanges support certain currency pairs for other services but not for spot markets\n+                        // In that case, trying to retrieve the market ticker for that pair may fail with this specific type of exception\n+                        log.info(\"Currency pair \" + cp + \" not supported in Spot Markets: \" + cpnve.getMessage());\n+                    } catch (Exception e) {\n+                        // Catch any other type of generic exception (IO, network level, rate limit reached, etc)\n+                        log.info(\"Exception encountered while retrieving rate for currency pair \" + cp + \": \" + e.getMessage());\n+                    }\n+                });\n+\n+        // Filter the supported altcoins (currency pair format is ALT-BTC)\n+        currencyPairs.stream()\n+                .filter(cp -> cp.counter.equals(Currency.BTC))\n+                .filter(cp -> supportedCryptoCurrencies.contains(cp.base.getCurrencyCode()))\n+                .forEach(cp -> {\n+                    try {\n+                        Ticker t = marketDataService.getTicker(new CurrencyPair(cp.base, cp.counter));\n+\n+                        result.add(new ExchangeRate(\n+                                cp.base.getCurrencyCode(),\n+                                t.getLast(),\n+                                // Some exchanges do not provide timestamps\n+                                t.getTimestamp() == null ? new Date() : t.getTimestamp(),\n+                                this.getName()\n+                        ));\n+                    } catch (CurrencyPairNotValidException cpnve) {", "originalCommit": "fcf713d8ae56b5836e079f8fd0208ca2a0a84787", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0MjU5Mw==", "url": "https://github.com/bisq-network/bisq/pull/4315#discussion_r441342593", "bodyText": "Please wrap code at 120 chars per bisq-network/style#3.", "author": "cbeams", "createdAt": "2020-06-17T07:37:13Z", "path": "pricenode/src/main/java/bisq/price/spot/ExchangeRateProvider.java", "diffHunk": "@@ -60,4 +75,82 @@ protected void onRefresh() {\n             .filter(e -> \"USD\".equals(e.getCurrency()) || \"LTC\".equals(e.getCurrency()))\n             .forEach(e -> log.info(\"BTC/{}: {}\", e.getCurrency(), e.getPrice()));\n     }\n+\n+    /**\n+     * @param exchangeClass Class of the {@link Exchange} for which the rates should be polled\n+     * @return Exchange rates for Bisq-supported fiat currencies and altcoins in the specified {@link Exchange}\n+     *\n+     * @see CurrencyUtil#getAllSortedFiatCurrencies()\n+     * @see CurrencyUtil#getAllSortedCryptoCurrencies()\n+     */\n+    protected Set<ExchangeRate> doGet(Class<? extends Exchange> exchangeClass) {\n+        Set<ExchangeRate> result = new HashSet<ExchangeRate>();\n+\n+        // Initialize XChange objects\n+        Exchange exchange = ExchangeFactory.INSTANCE.createExchange(exchangeClass.getName());\n+        MarketDataService marketDataService = exchange.getMarketDataService();\n+\n+        // Retrieve all currency pairs supported by the exchange\n+        List<CurrencyPair> currencyPairs = exchange.getExchangeSymbols();\n+\n+        Set<String> supportedCryptoCurrencies = CurrencyUtil.getAllSortedCryptoCurrencies().stream()\n+                .map(TradeCurrency::getCode)\n+                .collect(Collectors.toSet());\n+\n+        Set<String> supportedFiatCurrencies = CurrencyUtil.getAllSortedFiatCurrencies().stream()\n+                .map(TradeCurrency::getCode)\n+                .collect(Collectors.toSet());\n+\n+        // Filter the supported fiat currencies (currency pair format is BTC-FIAT)\n+        currencyPairs.stream()\n+                .filter(cp -> cp.base.equals(Currency.BTC))\n+                .filter(cp -> supportedFiatCurrencies.contains(cp.counter.getCurrencyCode()))\n+                .forEach(cp -> {\n+                    try {\n+                        Ticker t = marketDataService.getTicker(new CurrencyPair(cp.base, cp.counter));\n+\n+                        result.add(new ExchangeRate(\n+                                cp.counter.getCurrencyCode(),\n+                                t.getLast(),\n+                                // Some exchanges do not provide timestamps\n+                                t.getTimestamp() == null ? new Date() : t.getTimestamp(),\n+                                this.getName()\n+                        ));\n+                    } catch (CurrencyPairNotValidException cpnve) {\n+                        // Some exchanges support certain currency pairs for other services but not for spot markets\n+                        // In that case, trying to retrieve the market ticker for that pair may fail with this specific type of exception\n+                        log.info(\"Currency pair \" + cp + \" not supported in Spot Markets: \" + cpnve.getMessage());\n+                    } catch (Exception e) {\n+                        // Catch any other type of generic exception (IO, network level, rate limit reached, etc)\n+                        log.info(\"Exception encountered while retrieving rate for currency pair \" + cp + \": \" + e.getMessage());", "originalCommit": "fcf713d8ae56b5836e079f8fd0208ca2a0a84787", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0NDc0MQ==", "url": "https://github.com/bisq-network/bisq/pull/4315#discussion_r441344741", "bodyText": "Prefer modelling this as guard logic, e.g.:\nif (exchangeRateList.isEmpty())\n    // If the map was built incorrectly and this currency points to an empty list of rates, skip it\n    return;\n\nif (exchangeRateList.size() == 1) {\n    // If a single provider has rates for this currency, then aggregate = rate from that provider\n    aggregateExchangeRate = exchangeRateList.get(0);\n}\nelse {\n    // If multiple providers have rates for this currency, then aggregate = average of the rates\n    // ...\n}\naggregateExchangeRates.put(aggregateExchangeRate.getCurrency(), aggregateExchangeRate);\nSee also bisq-network/style#12", "author": "cbeams", "createdAt": "2020-06-17T07:41:02Z", "path": "pricenode/src/main/java/bisq/price/spot/ExchangeRateService.java", "diffHunk": "@@ -53,26 +60,88 @@ public ExchangeRateService(List<ExchangeRateProvider> providers) {\n \n     public Map<String, Object> getAllMarketPrices() {\n         Map<String, Object> metadata = new LinkedHashMap<>();\n-        Map<String, ExchangeRate> allExchangeRates = new LinkedHashMap<>();\n+        Map<String, ExchangeRate> aggregateExchangeRates = getAggregateExchangeRates();\n \n         providers.forEach(p -> {\n             Set<ExchangeRate> exchangeRates = p.get();\n+\n+            // Specific metadata fields for specific providers are expected by the client, mostly for historical reasons\n+            // Therefore, add metadata fields for all known providers\n+            // Rates are encapsulated in the \"data\" map below\n             metadata.putAll(getMetadata(p, exchangeRates));\n-            exchangeRates.forEach(e ->\n-                allExchangeRates.put(e.getCurrency(), e)\n-            );\n         });\n \n         return new LinkedHashMap<String, Object>() {{\n             putAll(metadata);\n             // Use a sorted list by currency code to make comparision of json data between different\n             // price nodes easier\n-            List<ExchangeRate> values = new ArrayList<>(allExchangeRates.values());\n+            List<ExchangeRate> values = new ArrayList<>(aggregateExchangeRates.values());\n             values.sort(Comparator.comparing(ExchangeRate::getCurrency));\n             put(\"data\", values);\n         }};\n     }\n \n+    /**\n+     * For each currency, create an aggregate {@link ExchangeRate} based on the currency's rates from all providers.\n+     * If multiple providers have rates for the currency, then aggregate price = average of retrieved prices.\n+     * If a single provider has rates for the currency, then aggregate price = the rate from that provider.\n+     *\n+     * @return Aggregate {@link ExchangeRate}s based on info from all providers, indexed by currency code\n+     */\n+    private Map<String, ExchangeRate> getAggregateExchangeRates() {\n+        Map<String, ExchangeRate> aggregateExchangeRates = new HashMap<>();\n+\n+        // Query all known providers and collect all exchange rates, grouped by currency code\n+        Map<String, List<ExchangeRate>> currencyCodeToExchangeRates = getCurrencyCodeToExchangeRates();\n+\n+        // For each currency code, calculate aggregate rate\n+        currencyCodeToExchangeRates.forEach((currencyCode, exchangeRateList) -> {\n+            ExchangeRate aggregateExchangeRate;\n+            if (exchangeRateList.size() == 1) {\n+                // If a single provider has rates for this currency, then aggregate = rate from that provider\n+                aggregateExchangeRate = exchangeRateList.get(0);\n+            }\n+            else if (exchangeRateList.size() > 1) {\n+                // If multiple providers have rates for this currency, then aggregate = average of the rates\n+                OptionalDouble opt = exchangeRateList.stream().mapToDouble(ExchangeRate::getPrice).average();\n+                double priceAvg = opt.orElseThrow(IllegalStateException::new); // List size > 1, so opt is always set\n+\n+                aggregateExchangeRate = new ExchangeRate(\n+                        currencyCode,\n+                        BigDecimal.valueOf(priceAvg),\n+                        new Date(), // timestamp = time when avg is calculated\n+                        \"Bisq-Aggregate\");\n+            }\n+            else {\n+                // If the map was built incorrectly and this currency points to an empty list of rates, skip it\n+               return;\n+            }", "originalCommit": "fcf713d8ae56b5836e079f8fd0208ca2a0a84787", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0NjYyOQ==", "url": "https://github.com/bisq-network/bisq/pull/4315#discussion_r441346629", "bodyText": "Now that we are always querying all ExchangeRateProviders and averaging the results, the @Order annotation is no longer needed. As per the Javadoc in ExchangeRateProvider, this annotation was used to ensure precedence, but that becomes moot now. I'd recommend removing it, and updating the aforementioned Javadoc to avoid confusion.", "author": "cbeams", "createdAt": "2020-06-17T07:44:22Z", "path": "pricenode/src/main/java/bisq/price/spot/providers/Binance.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.price.spot.providers;\n+\n+import bisq.price.spot.ExchangeRate;\n+import bisq.price.spot.ExchangeRateProvider;\n+\n+import org.knowm.xchange.binance.BinanceExchange;\n+\n+import org.springframework.core.annotation.Order;\n+import org.springframework.stereotype.Component;\n+\n+import java.time.Duration;\n+\n+import java.util.Set;\n+\n+@Component\n+@Order(5)", "originalCommit": "fcf713d8ae56b5836e079f8fd0208ca2a0a84787", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0ODkwOQ==", "url": "https://github.com/bisq-network/bisq/pull/4315#discussion_r441348909", "bodyText": "Prefer package-private visibility whenever possible, i.e. please remove the public modifier here and in all other ExchangeRateProvider implementations. The bisq.spot.providers package is expressly designed such that all member classes are package-private; they need not and should not be referenced from any other package.", "author": "cbeams", "createdAt": "2020-06-17T07:48:16Z", "path": "pricenode/src/main/java/bisq/price/spot/providers/Poloniex.java", "diffHunk": "@@ -19,76 +19,28 @@\n \n import bisq.price.spot.ExchangeRate;\n import bisq.price.spot.ExchangeRateProvider;\n-import bisq.price.util.Altcoins;\n \n-import org.knowm.xchange.currency.Currency;\n-import org.knowm.xchange.currency.CurrencyPair;\n-import org.knowm.xchange.poloniex.dto.marketdata.PoloniexMarketData;\n-import org.knowm.xchange.poloniex.dto.marketdata.PoloniexTicker;\n+import org.knowm.xchange.poloniex.PoloniexExchange;\n \n-import org.springframework.core.ParameterizedTypeReference;\n import org.springframework.core.annotation.Order;\n-import org.springframework.http.RequestEntity;\n import org.springframework.stereotype.Component;\n-import org.springframework.web.client.RestTemplate;\n-import org.springframework.web.util.UriComponentsBuilder;\n \n import java.time.Duration;\n \n-import java.util.Date;\n-import java.util.Map;\n import java.util.Set;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n \n @Component\n @Order(4)\n-class Poloniex extends ExchangeRateProvider {\n-\n-    private final RestTemplate restTemplate = new RestTemplate();\n+public class Poloniex extends ExchangeRateProvider {", "originalCommit": "fcf713d8ae56b5836e079f8fd0208ca2a0a84787", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0OTkzOQ==", "url": "https://github.com/bisq-network/bisq/pull/4315#discussion_r441349939", "bodyText": "Prefer AbstractExchangeTest for naming consistency and please mark the class as abstract to better signal that it is not in fact a concrete / executable test.", "author": "cbeams", "createdAt": "2020-06-17T07:50:00Z", "path": "pricenode/src/test/java/bisq/price/ExchangeTestBase.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package bisq.price;\n+\n+import bisq.price.spot.ExchangeRate;\n+import bisq.price.spot.ExchangeRateProvider;\n+\n+import bisq.core.locale.CurrencyUtil;\n+import bisq.core.locale.TradeCurrency;\n+\n+import com.google.common.collect.Sets;\n+\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+@Slf4j\n+public class ExchangeTestBase {", "originalCommit": "fcf713d8ae56b5836e079f8fd0208ca2a0a84787", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1MTAxNw==", "url": "https://github.com/bisq-network/bisq/pull/4315#discussion_r441351017", "bodyText": "Actually, prefer AbstractExchangeRateProviderTest for clarity, as what is being tested are indeed ExchangeRateProvider implementations.", "author": "cbeams", "createdAt": "2020-06-17T07:51:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0OTkzOQ=="}], "type": "inlineReview"}, {"oid": "38680ca1b2c354b82b4a782c5fdf7c733e885bb9", "url": "https://github.com/bisq-network/bisq/commit/38680ca1b2c354b82b4a782c5fdf7c733e885bb9", "message": "Reuse sets of supported currencies\n\nReuse sets of supported currencies between pricenode classes and tests.", "committedDate": "2020-07-20T15:50:26Z", "type": "forcePushed"}, {"oid": "f2085b4bf0b22f13e74314551a716c618f946bad", "url": "https://github.com/bisq-network/bisq/commit/f2085b4bf0b22f13e74314551a716c618f946bad", "message": "Simplify validation in ExchangeRateServiceTest\n\nUpdate sanity check methods to allow for deeper and more comprehensive\nvalidations of the input data. Accept full ExchangeRateProviders in the\nmethod signatures, instead of just the provider prefix, to allow for\nmore complex sanity checks within those validation methods.", "committedDate": "2020-07-20T16:14:37Z", "type": "commit"}, {"oid": "f6501155805b2524d1b0a88fb167e01615df2885", "url": "https://github.com/bisq-network/bisq/commit/f6501155805b2524d1b0a88fb167e01615df2885", "message": "ExchangeRateService: Support aggregate rates\n\nAdd support for aggregate rates in the ExchangeRateService. If multiple\nExchangeRateProviders contain rates for the same currency, then these\nrates will be automatically aggregated (averaged) into one.\n\nThis allows the service to transparently scale to multiple providers for\n any specific currency.\n\nThe clients index the rates received from the pricenode by currency\ncode, which means they expect at most a single rate per currency. By\naggregating rates from multiple providers into one per currency, the\nExchangeRateService provides more accurate price data. At the same time,\nthe service API data structure remains intact, thus preserving backward\ncompatibility with all clients.", "committedDate": "2020-07-20T16:14:37Z", "type": "commit"}, {"oid": "671e80929ade3c6036daba548fef2cb6a323f98a", "url": "https://github.com/bisq-network/bisq/commit/671e80929ade3c6036daba548fef2cb6a323f98a", "message": "Integrate initial set of ExchangeRateProviders\n\nAdd support for a few exchanges to demonstrate and test the pricenode\naggregate rates.\n\nThe chose exchanges were selected because they each provide a varied\nlist of fiat and altcoins, with a substantial overlap between them. This\n provides a robust initial set of datapoints and scenarios for aggregate\n  rates.", "committedDate": "2020-07-20T16:14:37Z", "type": "commit"}, {"oid": "c6ef40e5e42a12b8f88e8b1713002ce927c87429", "url": "https://github.com/bisq-network/bisq/commit/c6ef40e5e42a12b8f88e8b1713002ce927c87429", "message": "Revert XChange version to keep jdk10 compatibility\n\nRevert from latest v5.0.0 to v4.2.2, since the newer version libraries\nare compiled with Java 11, so they cannot be used as part of the Bisq\nbuild process which still partially relies on Java 10.", "committedDate": "2020-07-20T16:14:37Z", "type": "commit"}, {"oid": "141ead0b2fc06af91e8484ad9407062f6b9f0fb3", "url": "https://github.com/bisq-network/bisq/commit/141ead0b2fc06af91e8484ad9407062f6b9f0fb3", "message": "Wrap comments at 90 characters\n\nUpdate comments to reflect bisq-network/style#5 guideline", "committedDate": "2020-07-20T16:14:37Z", "type": "commit"}, {"oid": "3e314a9d24131e2985d52eb531589327807b0126", "url": "https://github.com/bisq-network/bisq/commit/3e314a9d24131e2985d52eb531589327807b0126", "message": "Rename exception variables to ex\n\nUpdate the name of exception variables to ex for\nconsistency and better readability.", "committedDate": "2020-07-20T16:14:37Z", "type": "commit"}, {"oid": "5cffddc9aecdf461ecd51573066582d5ea75c621", "url": "https://github.com/bisq-network/bisq/commit/5cffddc9aecdf461ecd51573066582d5ea75c621", "message": "Rewrite else-if clause\n\nSimplify if-else block to avoid redundant use of else-if\nin combination with an empty check and a return statement.", "committedDate": "2020-07-20T16:14:37Z", "type": "commit"}, {"oid": "020547e19bfc25938d4225c3552b166fe792f00f", "url": "https://github.com/bisq-network/bisq/commit/020547e19bfc25938d4225c3552b166fe792f00f", "message": "Remove Order annotation from ExchangeRateProviders\n\nRemove Order annotation from rate providers, which was\nused in the case that multiple providers would retrieve\nrates for the same currency.\n\nThe ExchangeRateService now handles such scenarios, thus\neliminating the need for deciding provider precedence via\nthe Order annotation.", "committedDate": "2020-07-20T16:14:37Z", "type": "commit"}, {"oid": "75a0a47a1e4113f0a569597293c9032243c56e42", "url": "https://github.com/bisq-network/bisq/commit/75a0a47a1e4113f0a569597293c9032243c56e42", "message": "Mark new ExchangeRateProviders as package-private\n\nRemove public modifier in their class definitions to\npreserve their package-private scope.", "committedDate": "2020-07-20T16:14:37Z", "type": "commit"}, {"oid": "aceb7eef1513769d10acb304162ad339b418c372", "url": "https://github.com/bisq-network/bisq/commit/aceb7eef1513769d10acb304162ad339b418c372", "message": "Renamed ExchangeRateProvider test class\n\nGive a more accurate name to the abstract test class\nwhich contains common methods used by all\nExchangeRateProvider tests, like BinanceTest or KrakenTest.\n\nMark this test class as abstract, to indicate that it\nshould not be run as a standalone test.", "committedDate": "2020-07-20T16:14:37Z", "type": "commit"}, {"oid": "329188db1d2e8f66efc575baf69b429cbe483a73", "url": "https://github.com/bisq-network/bisq/commit/329188db1d2e8f66efc575baf69b429cbe483a73", "message": "Reduce number of exchange API calls when polling\n\nRetrieve the exchange rates in bulk, when possible. This reduces\nthe number of calls the pricenode makes to the exchange API from N =\n\"number of exchange rates to retrieve\" to N = 1.\n\nThe replaced approach, which made a separate call to the exchange API\nfor each exchange rate, was sometimes failing due to reaching API rate\nlimits.", "committedDate": "2020-07-20T16:14:38Z", "type": "commit"}, {"oid": "7fc519179875d9458d26bf3bfa9b866758bc543d", "url": "https://github.com/bisq-network/bisq/commit/7fc519179875d9458d26bf3bfa9b866758bc543d", "message": "Reuse sets of supported currencies\n\nReuse sets of supported currencies between pricenode classes and tests.", "committedDate": "2020-07-20T16:14:38Z", "type": "commit"}, {"oid": "7fc519179875d9458d26bf3bfa9b866758bc543d", "url": "https://github.com/bisq-network/bisq/commit/7fc519179875d9458d26bf3bfa9b866758bc543d", "message": "Reuse sets of supported currencies\n\nReuse sets of supported currencies between pricenode classes and tests.", "committedDate": "2020-07-20T16:14:38Z", "type": "forcePushed"}, {"oid": "5d964b87e9422a229546427c5f94911d7cbba428", "url": "https://github.com/bisq-network/bisq/commit/5d964b87e9422a229546427c5f94911d7cbba428", "message": "Integrate more exchanges using knowm xchange\n\nAdd more exchange providers supported by the knowm xchange library.\n\nThis extends support for a few new currencies.", "committedDate": "2020-07-27T10:22:45Z", "type": "forcePushed"}, {"oid": "637378b58a09d53feb85f3a765eef2ac5bb73111", "url": "https://github.com/bisq-network/bisq/commit/637378b58a09d53feb85f3a765eef2ac5bb73111", "message": "Integrate more exchanges using knowm xchange\n\nAdd more exchange providers supported by the knowm xchange library.\n\nThis extends support for a few new currencies.", "committedDate": "2020-07-27T11:02:25Z", "type": "commit"}, {"oid": "637378b58a09d53feb85f3a765eef2ac5bb73111", "url": "https://github.com/bisq-network/bisq/commit/637378b58a09d53feb85f3a765eef2ac5bb73111", "message": "Integrate more exchanges using knowm xchange\n\nAdd more exchange providers supported by the knowm xchange library.\n\nThis extends support for a few new currencies.", "committedDate": "2020-07-27T11:02:25Z", "type": "forcePushed"}, {"oid": "9be2a5bbb4be8c1ee81824e62039443b18814c52", "url": "https://github.com/bisq-network/bisq/commit/9be2a5bbb4be8c1ee81824e62039443b18814c52", "message": "Integrate Bitpay exchange rate API\n\nAdd a Bitpay exchange rate provider and corresponding unit test.", "committedDate": "2020-07-27T12:52:36Z", "type": "commit"}, {"oid": "399f65d404b44cbaff069817efb7fc9cfdc17d11", "url": "https://github.com/bisq-network/bisq/commit/399f65d404b44cbaff069817efb7fc9cfdc17d11", "message": "Integrate CoinGecko API\n\nAdd CoinGecko ExchangeRateProvider and corresponding unit test.", "committedDate": "2020-07-27T12:53:03Z", "type": "commit"}, {"oid": "399f65d404b44cbaff069817efb7fc9cfdc17d11", "url": "https://github.com/bisq-network/bisq/commit/399f65d404b44cbaff069817efb7fc9cfdc17d11", "message": "Integrate CoinGecko API\n\nAdd CoinGecko ExchangeRateProvider and corresponding unit test.", "committedDate": "2020-07-27T12:53:03Z", "type": "forcePushed"}, {"oid": "5a194420eddb1c44fa440e94589ca0c3b5992f47", "url": "https://github.com/bisq-network/bisq/commit/5a194420eddb1c44fa440e94589ca0c3b5992f47", "message": "Integrate Coinpaprika API\n\nAdd Coinpaprika ExchangeRateProvider and corresponding unit test.", "committedDate": "2020-07-27T14:17:38Z", "type": "commit"}, {"oid": "b362b4c8d28659ddcfde77a384cdbdf3924dbc58", "url": "https://github.com/bisq-network/bisq/commit/b362b4c8d28659ddcfde77a384cdbdf3924dbc58", "message": "Integrate Huobi exchange API\n\nAdd Huobi ExchangeRateProvider and corresponding unit test.", "committedDate": "2020-07-27T16:53:13Z", "type": "commit"}, {"oid": "efda45fa78a8d7bdb64c1d4459ba0dc75c060799", "url": "https://github.com/bisq-network/bisq/commit/efda45fa78a8d7bdb64c1d4459ba0dc75c060799", "message": "Integrate Hitbtc exchange API\n\nAdd Hitbtc ExchangeRateProvider and corresponding unit test.", "committedDate": "2020-07-27T16:55:11Z", "type": "commit"}, {"oid": "efda45fa78a8d7bdb64c1d4459ba0dc75c060799", "url": "https://github.com/bisq-network/bisq/commit/efda45fa78a8d7bdb64c1d4459ba0dc75c060799", "message": "Integrate Hitbtc exchange API\n\nAdd Hitbtc ExchangeRateProvider and corresponding unit test.", "committedDate": "2020-07-27T16:55:11Z", "type": "forcePushed"}, {"oid": "8d335441c337400b32a226cfae94053a5ce66fbb", "url": "https://github.com/bisq-network/bisq/commit/8d335441c337400b32a226cfae94053a5ce66fbb", "message": "Fix Bitpay and CoinGecko altcoin rates\n\nCorrectly interpret the alt conversion rate reported by the API. For\nalts, Bisq needs the Alt/BTC rate, whereas the API returns the BTC/Alt\none. Calculate the inverse of the reported values before storing them as\n Bisq internal datastructures (ExchangeRates).", "committedDate": "2020-07-28T19:10:25Z", "type": "commit"}, {"oid": "8d335441c337400b32a226cfae94053a5ce66fbb", "url": "https://github.com/bisq-network/bisq/commit/8d335441c337400b32a226cfae94053a5ce66fbb", "message": "Fix Bitpay and CoinGecko altcoin rates\n\nCorrectly interpret the alt conversion rate reported by the API. For\nalts, Bisq needs the Alt/BTC rate, whereas the API returns the BTC/Alt\none. Calculate the inverse of the reported values before storing them as\n Bisq internal datastructures (ExchangeRates).", "committedDate": "2020-07-28T19:10:25Z", "type": "forcePushed"}, {"oid": "4dc24e5606b4ccfd71af0be2266b87f227196457", "url": "https://github.com/bisq-network/bisq/commit/4dc24e5606b4ccfd71af0be2266b87f227196457", "message": "Disable BitcoinAverage\n\nDisable BitcoinAverage provider. Keep it registered as a provider to\nensure that the data structure returned by the pricenode to the Bisq\nclients contain the hardcoded \"btcAverageTs\" key.", "committedDate": "2020-08-05T21:17:18Z", "type": "commit"}, {"oid": "82bbb2dafacc761d836f9b9496743647895261be", "url": "https://github.com/bisq-network/bisq/commit/82bbb2dafacc761d836f9b9496743647895261be", "message": "Upgrade Tor to v3\n\nUse tor v3 addresses during a new pricenode setup.", "committedDate": "2020-08-05T21:20:14Z", "type": "commit"}, {"oid": "36dbb2e943b47216c7a520c145404878f65a68cf", "url": "https://github.com/bisq-network/bisq/commit/36dbb2e943b47216c7a520c145404878f65a68cf", "message": "Upgrade Java to v11\n\nUse Java 11 to run the pricenode service, since v11 includes by\ndefault some root certificates needed when establishing SSH connections\nto some of the new API endpoints.", "committedDate": "2020-08-05T21:26:03Z", "type": "commit"}, {"oid": "36dbb2e943b47216c7a520c145404878f65a68cf", "url": "https://github.com/bisq-network/bisq/commit/36dbb2e943b47216c7a520c145404878f65a68cf", "message": "Upgrade Java to v11\n\nUse Java 11 to run the pricenode service, since v11 includes by\ndefault some root certificates needed when establishing SSH connections\nto some of the new API endpoints.", "committedDate": "2020-08-05T21:26:03Z", "type": "forcePushed"}, {"oid": "11076e773dccb95f39a08d4ae5e218a677ae91bc", "url": "https://github.com/bisq-network/bisq/commit/11076e773dccb95f39a08d4ae5e218a677ae91bc", "message": "Set quiet flag for java install command\r\n\r\nReduce verbosity of install command to only errors\n\nCo-authored-by: wiz <j@wiz.biz>", "committedDate": "2020-08-06T08:26:13Z", "type": "commit"}, {"oid": "9fb5c0bb5350d13d0550b98471a1d0b7da506b05", "url": "https://github.com/bisq-network/bisq/commit/9fb5c0bb5350d13d0550b98471a1d0b7da506b05", "message": "Remove unused imports\n\nRemoved unused imports from pricenode classes.", "committedDate": "2020-08-08T13:24:08Z", "type": "commit"}, {"oid": "0c2703848c2f36bb3448c4ba8fc6d6ad00e66cc6", "url": "https://github.com/bisq-network/bisq/commit/0c2703848c2f36bb3448c4ba8fc6d6ad00e66cc6", "message": "Apply Codacy style changes\n\nApply various changes in coding style, required by the Codacy check.", "committedDate": "2020-08-08T14:05:15Z", "type": "commit"}, {"oid": "d972a7571a9a8fa3de7fa5c1f516f44ba47ba3a8", "url": "https://github.com/bisq-network/bisq/commit/d972a7571a9a8fa3de7fa5c1f516f44ba47ba3a8", "message": "Improve exception handling to match Codacy rules\n\nRewrite a few generic parts of the code to be more specific in what they\n handle, or how they handle the resulting data structure.", "committedDate": "2020-08-08T15:12:39Z", "type": "commit"}, {"oid": "d972a7571a9a8fa3de7fa5c1f516f44ba47ba3a8", "url": "https://github.com/bisq-network/bisq/commit/d972a7571a9a8fa3de7fa5c1f516f44ba47ba3a8", "message": "Improve exception handling to match Codacy rules\n\nRewrite a few generic parts of the code to be more specific in what they\n handle, or how they handle the resulting data structure.", "committedDate": "2020-08-08T15:12:39Z", "type": "forcePushed"}]}