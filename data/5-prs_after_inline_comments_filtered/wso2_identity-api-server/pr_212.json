{"pr_number": 212, "pr_title": "Remote Fetch implementation", "pr_createdAt": "2020-10-18T09:04:51Z", "pr_url": "https://github.com/wso2/identity-api-server/pull/212", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA1NDMxMw==", "url": "https://github.com/wso2/identity-api-server/pull/212#discussion_r507054313", "bodyText": "Remove this line", "author": "darshanasbg", "createdAt": "2020-10-18T09:10:24Z", "path": "components/org.wso2.carbon.identity.api.server.fetch.remote/org.wso2.carbon.identity.api.server.fetch.remote.common/src/main/java/org/wso2/carbon/identity/api/server/fetch/remote/common/RemoteFetchConfigurationConstants.java", "diffHunk": "@@ -0,0 +1,123 @@\n+", "originalCommit": "c1fb2dd934e5919e7461ee1a9845960ab21188a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA1NDM5NQ==", "url": "https://github.com/wso2/identity-api-server/pull/212#discussion_r507054395", "bodyText": "Remove this line", "author": "darshanasbg", "createdAt": "2020-10-18T09:10:43Z", "path": "components/org.wso2.carbon.identity.api.server.fetch.remote/org.wso2.carbon.identity.api.server.fetch.remote.common/src/main/java/org/wso2/carbon/identity/api/server/fetch/remote/common/RemoteFetchConfigurationConstants.java", "diffHunk": "@@ -0,0 +1,123 @@\n+\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.api.server.fetch.remote.common;\n+\n+", "originalCommit": "c1fb2dd934e5919e7461ee1a9845960ab21188a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ed36f59846ea90f74ef01dd6d690d6b4c3d73902", "url": "https://github.com/wso2/identity-api-server/commit/ed36f59846ea90f74ef01dd6d690d6b4c3d73902", "message": "remote fetch impl\n\nadd copyright\n\nfix version issues\n\nmoving dependencies\n\nchange parent version\n\nUpdate versions and fix formatting\n\nFix typo\n\nremove unwanted lines", "committedDate": "2020-10-18T09:21:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA1NDUwMw==", "url": "https://github.com/wso2/identity-api-server/pull/212#discussion_r507054503", "bodyText": "Remove this line", "author": "darshanasbg", "createdAt": "2020-10-18T09:11:09Z", "path": "components/org.wso2.carbon.identity.api.server.fetch.remote/org.wso2.carbon.identity.api.server.fetch.remote.common/src/main/java/org/wso2/carbon/identity/api/server/fetch/remote/common/RemoteFetchConfigurationConstants.java", "diffHunk": "@@ -0,0 +1,123 @@\n+\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.api.server.fetch.remote.common;\n+\n+\n+/**\n+ * Remote Fetch Configuration constant class.\n+ */\n+public class RemoteFetchConfigurationConstants {\n+\n+    public static final String REMOTE_FETCH_CONFIGURATION_MANAGEMENT_PREFIX = \"RFE-\";\n+    public static final String ERROR_CODE_DELIMITER = \"-\";\n+    public static final String FREQUENCY = \"frequency\";\n+    public static final String URI = \"uri\";\n+    public static final String BRANCH = \"branch\";\n+    public static final String DIRECTORY = \"directory\";\n+    public static final String ACCESS_TOKEN = \"accessToken\";\n+    public static final String USER_NAME = \"userName\";\n+    public static final String IS_ENABLED = \"isEnabled\";\n+    public static final String REMOTE_FETCH_NAME = \"remoteFetchName\";\n+    public static final String ACTION_LISTENER = \"actionListener\";\n+    public static final String ACTION_LISTENER_ATTRIBUTES = \"actionListenerAttributes\";\n+    public static final String REPOSITORY_MANAGER = \"repositoryManger\";\n+    public static final String REPOSITORY_MANAGER_ATTRIBUTES = \"repositoryMangerAttributes\";\n+    public static final String CONFIGURATION_DEPLOYER = \"configDeployer\";\n+    public static final String CONFIGURATION_DEPLOYER_ATTRIBUTES = \"configDeployerAttributes\";\n+    public static final String WEBHOOK_REQUEST = \"webHookRequest\";\n+\n+    public static final String SUCCESS = \"SUCCESS\";\n+    public static final String FAIL = \"FAIL\";\n+\n+", "originalCommit": "c1fb2dd934e5919e7461ee1a9845960ab21188a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA1NDU1Mw==", "url": "https://github.com/wso2/identity-api-server/pull/212#discussion_r507054553", "bodyText": "Remove this line", "author": "darshanasbg", "createdAt": "2020-10-18T09:11:15Z", "path": "components/org.wso2.carbon.identity.api.server.fetch.remote/org.wso2.carbon.identity.api.server.fetch.remote.common/src/main/java/org/wso2/carbon/identity/api/server/fetch/remote/common/RemoteFetchConfigurationConstants.java", "diffHunk": "@@ -0,0 +1,123 @@\n+\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.api.server.fetch.remote.common;\n+\n+\n+/**\n+ * Remote Fetch Configuration constant class.\n+ */\n+public class RemoteFetchConfigurationConstants {\n+\n+    public static final String REMOTE_FETCH_CONFIGURATION_MANAGEMENT_PREFIX = \"RFE-\";\n+    public static final String ERROR_CODE_DELIMITER = \"-\";\n+    public static final String FREQUENCY = \"frequency\";\n+    public static final String URI = \"uri\";\n+    public static final String BRANCH = \"branch\";\n+    public static final String DIRECTORY = \"directory\";\n+    public static final String ACCESS_TOKEN = \"accessToken\";\n+    public static final String USER_NAME = \"userName\";\n+    public static final String IS_ENABLED = \"isEnabled\";\n+    public static final String REMOTE_FETCH_NAME = \"remoteFetchName\";\n+    public static final String ACTION_LISTENER = \"actionListener\";\n+    public static final String ACTION_LISTENER_ATTRIBUTES = \"actionListenerAttributes\";\n+    public static final String REPOSITORY_MANAGER = \"repositoryManger\";\n+    public static final String REPOSITORY_MANAGER_ATTRIBUTES = \"repositoryMangerAttributes\";\n+    public static final String CONFIGURATION_DEPLOYER = \"configDeployer\";\n+    public static final String CONFIGURATION_DEPLOYER_ATTRIBUTES = \"configDeployerAttributes\";\n+    public static final String WEBHOOK_REQUEST = \"webHookRequest\";\n+\n+    public static final String SUCCESS = \"SUCCESS\";\n+    public static final String FAIL = \"FAIL\";\n+\n+\n+    public static final String REMOTE_FETCH_CONFIGURATION_PATH_COMPONENT = \"/remote-fetch\";\n+\n+", "originalCommit": "c1fb2dd934e5919e7461ee1a9845960ab21188a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA1NTQyNw==", "url": "https://github.com/wso2/identity-api-server/pull/212#discussion_r507055427", "bodyText": "Incorrect formatting", "author": "darshanasbg", "createdAt": "2020-10-18T09:13:59Z", "path": "components/org.wso2.carbon.identity.api.server.fetch.remote/org.wso2.carbon.identity.api.server.fetch.remote.v1/src/gen/java/org/wso2/carbon/identity/api/server/fetch/remote/v1/factories/RemoteFetchApiServiceFactory.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+* Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+*\n+* http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.wso2.carbon.identity.api.server.fetch.remote.v1.factories;\n+\n+import org.wso2.carbon.identity.api.server.fetch.remote.v1.RemoteFetchApiService;\n+import org.wso2.carbon.identity.api.server.fetch.remote.v1.impl.RemoteFetchApiServiceImpl;\n+\n+public class RemoteFetchApiServiceFactory {\n+\n+   private final static RemoteFetchApiService service = new RemoteFetchApiServiceImpl();\n+\n+   public static RemoteFetchApiService getRemoteFetchApi()\n+   {", "originalCommit": "c1fb2dd934e5919e7461ee1a9845960ab21188a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA2NzQwMQ==", "url": "https://github.com/wso2/identity-api-server/pull/212#discussion_r507067401", "bodyText": "This shouldn't be changed as this is a generated class..", "author": "darshanasbg", "createdAt": "2020-10-18T09:51:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA1NTQyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA2OTYyMw==", "url": "https://github.com/wso2/identity-api-server/pull/212#discussion_r507069623", "bodyText": "Reverted", "author": "Thumimku", "createdAt": "2020-10-18T09:56:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA1NTQyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA1NTUwMA==", "url": "https://github.com/wso2/identity-api-server/pull/212#discussion_r507055500", "bodyText": "Remove this line.", "author": "darshanasbg", "createdAt": "2020-10-18T09:14:14Z", "path": "components/org.wso2.carbon.identity.api.server.fetch.remote/org.wso2.carbon.identity.api.server.fetch.remote.common/src/main/java/org/wso2/carbon/identity/api/server/fetch/remote/common/factory/RemoteFetchConfigurationServiceFactory.java", "diffHunk": "@@ -0,0 +1,56 @@\n+", "originalCommit": "c1fb2dd934e5919e7461ee1a9845960ab21188a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA1NTUzMw==", "url": "https://github.com/wso2/identity-api-server/pull/212#discussion_r507055533", "bodyText": "Remove this line.", "author": "darshanasbg", "createdAt": "2020-10-18T09:14:18Z", "path": "components/org.wso2.carbon.identity.api.server.fetch.remote/org.wso2.carbon.identity.api.server.fetch.remote.common/src/main/java/org/wso2/carbon/identity/api/server/fetch/remote/common/RemoteFetchServiceHolder.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.api.server.fetch.remote.common;\n+\n+import org.wso2.carbon.identity.remotefetch.common.RemoteFetchConfigurationService;\n+\n+", "originalCommit": "c1fb2dd934e5919e7461ee1a9845960ab21188a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA1Nzg2Ng==", "url": "https://github.com/wso2/identity-api-server/pull/212#discussion_r507057866", "bodyText": "This can fit into one line.", "author": "darshanasbg", "createdAt": "2020-10-18T09:21:47Z", "path": "components/org.wso2.carbon.identity.api.server.fetch.remote/org.wso2.carbon.identity.api.server.fetch.remote.v1/src/main/java/org/wso2/carbon/identity/api/server/fetch/remote/v1/core/ServerRemoteFetchConfigManagementService.java", "diffHunk": "@@ -0,0 +1,814 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.api.server.fetch.remote.v1.core;\n+\n+import org.apache.commons.beanutils.BeanUtils;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.api.server.common.ContextLoader;\n+import org.wso2.carbon.identity.api.server.common.error.APIError;\n+import org.wso2.carbon.identity.api.server.common.error.ErrorResponse;\n+import org.wso2.carbon.identity.api.server.fetch.remote.common.RemoteFetchConfigurationConstants;\n+import org.wso2.carbon.identity.api.server.fetch.remote.common.RemoteFetchServiceHolder;\n+import org.wso2.carbon.identity.api.server.fetch.remote.v1.model.ActionListenerAttributes;\n+import org.wso2.carbon.identity.api.server.fetch.remote.v1.model.PushEventWebHookPOSTRequest;\n+import org.wso2.carbon.identity.api.server.fetch.remote.v1.model.PushEventWebHookPOSTRequestCommits;\n+import org.wso2.carbon.identity.api.server.fetch.remote.v1.model.RemoteFetchConfigurationGetResponse;\n+import org.wso2.carbon.identity.api.server.fetch.remote.v1.model.RemoteFetchConfigurationListItem;\n+import org.wso2.carbon.identity.api.server.fetch.remote.v1.model.RemoteFetchConfigurationListResponse;\n+import org.wso2.carbon.identity.api.server.fetch.remote.v1.model.RemoteFetchConfigurationPOSTRequest;\n+import org.wso2.carbon.identity.api.server.fetch.remote.v1.model.RemoteFetchConfigurationPatchRequest;\n+import org.wso2.carbon.identity.api.server.fetch.remote.v1.model.RepositoryManagerAttributes;\n+import org.wso2.carbon.identity.api.server.fetch.remote.v1.model.StatusListItem;\n+import org.wso2.carbon.identity.api.server.fetch.remote.v1.model.StatusListResponse;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.remotefetch.common.BasicRemoteFetchConfiguration;\n+import org.wso2.carbon.identity.remotefetch.common.DeploymentRevision;\n+import org.wso2.carbon.identity.remotefetch.common.RemoteFetchConfiguration;\n+import org.wso2.carbon.identity.remotefetch.common.exceptions.RemoteFetchClientException;\n+import org.wso2.carbon.identity.remotefetch.common.exceptions.RemoteFetchCoreException;\n+import org.wso2.carbon.identity.remotefetch.common.exceptions.RemoteFetchServerException;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.OptionalInt;\n+\n+import javax.ws.rs.core.Response;\n+\n+import static org.wso2.carbon.identity.api.server.fetch.remote.common.RemoteFetchConfigurationConstants.ACTION_LISTENER;\n+import static org.wso2.carbon.identity.api.server.fetch.remote.common.RemoteFetchConfigurationConstants.ACTION_LISTENER_ATTRIBUTES;\n+import static org.wso2.carbon.identity.api.server.fetch.remote.common.RemoteFetchConfigurationConstants.BRANCH;\n+import static org.wso2.carbon.identity.api.server.fetch.remote.common.RemoteFetchConfigurationConstants.CONFIGURATION_DEPLOYER;\n+import static org.wso2.carbon.identity.api.server.fetch.remote.common.RemoteFetchConfigurationConstants.CONFIGURATION_DEPLOYER_ATTRIBUTES;\n+import static org.wso2.carbon.identity.api.server.fetch.remote.common.RemoteFetchConfigurationConstants.DIRECTORY;\n+import static org.wso2.carbon.identity.api.server.fetch.remote.common.RemoteFetchConfigurationConstants.FREQUENCY;\n+import static org.wso2.carbon.identity.api.server.fetch.remote.common.RemoteFetchConfigurationConstants.IS_ENABLED;\n+import static org.wso2.carbon.identity.api.server.fetch.remote.common.RemoteFetchConfigurationConstants.REMOTE_FETCH_NAME;\n+import static org.wso2.carbon.identity.api.server.fetch.remote.common.RemoteFetchConfigurationConstants.REPOSITORY_MANAGER;\n+import static org.wso2.carbon.identity.api.server.fetch.remote.common.RemoteFetchConfigurationConstants.REPOSITORY_MANAGER_ATTRIBUTES;\n+import static org.wso2.carbon.identity.api.server.fetch.remote.common.RemoteFetchConfigurationConstants.URI;\n+import static org.wso2.carbon.identity.api.server.fetch.remote.common.RemoteFetchConfigurationConstants.WEBHOOK_REQUEST;\n+import static org.wso2.carbon.identity.api.server.fetch.remote.v1.core.RemoteFetchUtils.convertDateToStringIfNotNull;\n+import static org.wso2.carbon.identity.api.server.fetch.remote.v1.core.RemoteFetchUtils.setIfNotNull;\n+\n+/**\n+ * Call internal osgi services to perform server remote fetch configuration related operations.\n+ */\n+public class ServerRemoteFetchConfigManagementService {\n+\n+    private static final Log log = LogFactory.getLog(ServerRemoteFetchConfigManagementService.class);\n+\n+    /**\n+     * Get list of remote fetch configurations.\n+     *\n+     * @return RemoteFetchConfigurationListResponse.\n+     */\n+    public RemoteFetchConfigurationListResponse getRemoteFetchConfigs() {\n+\n+        OptionalInt optionalIntLimit = OptionalInt.empty();\n+        OptionalInt optionalIntOffset = OptionalInt.empty();\n+\n+        try {\n+            return createRemoteFetchConfigurationListResponse(RemoteFetchServiceHolder.\n+                    getRemoteFetchConfigurationService()\n+                    .getBasicRemoteFetchConfigurationList(optionalIntLimit, optionalIntOffset));\n+        } catch (RemoteFetchCoreException e) {\n+            throw handleRemoteFetchConfigurationException(e, RemoteFetchConfigurationConstants.\n+                    ErrorMessage.ERROR_CODE_ERROR_LISTING_RF_CONFIGS, null);\n+        }\n+    }\n+\n+    /**\n+     * Delete an Remote fetch configuration.\n+     *\n+     * @param remoteFetchConfigurationId Identity Provider resource ID.\n+     */\n+    public void deleteRemoteFetchConfig(String remoteFetchConfigurationId) {\n+\n+        try {\n+            RemoteFetchServiceHolder.getRemoteFetchConfigurationService()\n+                    .deleteRemoteFetchConfiguration(remoteFetchConfigurationId);\n+\n+        } catch (RemoteFetchCoreException e) {\n+            throw handleRemoteFetchConfigurationException(e, RemoteFetchConfigurationConstants.\n+                    ErrorMessage.ERROR_CODE_ERROR_DELETING_RF_CONFIGS, remoteFetchConfigurationId);\n+        }\n+    }\n+\n+    /**\n+     * Get remote fetch configuration by resource Id.\n+     *\n+     * @param remoteFetchConfigurationId resource Id.\n+     * @return RemoteFetchConfigurationListResponse.\n+     */\n+    public RemoteFetchConfigurationGetResponse getRemoteFetchConfig(String remoteFetchConfigurationId) {\n+\n+        try {\n+            RemoteFetchConfiguration remoteFetchConfiguration =\n+                    RemoteFetchServiceHolder.getRemoteFetchConfigurationService()\n+                            .getRemoteFetchConfiguration(remoteFetchConfigurationId);\n+\n+            if (remoteFetchConfiguration == null) {\n+                throw handleException(Response.Status.NOT_FOUND, RemoteFetchConfigurationConstants.\n+                                ErrorMessage.ERROR_CODE_RE_CONFIG_NOT_FOUND,\n+                        remoteFetchConfigurationId);\n+            }\n+            return createRemoteFetchConfigurationResponse(remoteFetchConfiguration);\n+\n+        } catch (RemoteFetchCoreException e) {\n+            throw handleRemoteFetchConfigurationException(e, RemoteFetchConfigurationConstants.\n+                    ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_RF_CONFIG, null);\n+        }\n+    }\n+\n+    /**\n+     * Update remote fetch configuration by resource id.\n+     *\n+     * @param id                                   Id.\n+     * @param remoteFetchConfigurationPatchRequest RemoteFetchConfigurationPatchRequest.\n+     */\n+    public void updateRemoteFetchConfig(String id,\n+                                        RemoteFetchConfigurationPatchRequest remoteFetchConfigurationPatchRequest) {\n+\n+        try {\n+            RemoteFetchConfiguration remoteFetchConfiguration =\n+                    RemoteFetchServiceHolder.getRemoteFetchConfigurationService()\n+                            .getRemoteFetchConfiguration(id);\n+\n+            if (remoteFetchConfiguration == null) {\n+                throw handleException(Response.Status.NOT_FOUND, RemoteFetchConfigurationConstants.\n+                        ErrorMessage.ERROR_CODE_RE_CONFIG_NOT_FOUND, id);\n+            }\n+\n+            RemoteFetchConfiguration remoteFetchConfigurationToUpdate = deepCopyRemoteFetchConfiguration\n+                    (id, remoteFetchConfiguration);\n+\n+            setIfNotNull(remoteFetchConfigurationPatchRequest.getIsEnabled(),\n+                    remoteFetchConfigurationToUpdate::setEnabled);\n+\n+            setIfNotNull(remoteFetchConfigurationPatchRequest.getRemoteFetchName(),\n+                    remoteFetchConfigurationToUpdate::setRemoteFetchName);\n+\n+            RemoteFetchServiceHolder.getRemoteFetchConfigurationService()\n+                    .updateRemoteFetchConfiguration(remoteFetchConfigurationToUpdate);\n+\n+        } catch (RemoteFetchCoreException e) {\n+            throw handleRemoteFetchConfigurationException(e, RemoteFetchConfigurationConstants.ErrorMessage.\n+                    ERROR_CODE_ERROR_UPDATING_RF_CONFIG, null);\n+        }\n+    }\n+\n+    /**\n+     * Trigger remote fetch.\n+     *\n+     * @param remoteFetchConfigurationId remoteFetchConfigurationId.\n+     */\n+    public void triggerRemoteFetch(String remoteFetchConfigurationId) {\n+\n+        try {\n+            RemoteFetchConfiguration remoteFetchConfiguration =\n+                    RemoteFetchServiceHolder.getRemoteFetchConfigurationService()\n+                            .getRemoteFetchConfiguration(remoteFetchConfigurationId);\n+\n+            if (remoteFetchConfiguration != null) {\n+                RemoteFetchServiceHolder.getRemoteFetchConfigurationService()\n+                        .triggerRemoteFetch(remoteFetchConfiguration);\n+            } else {\n+                throw handleException(Response.Status.NOT_FOUND, RemoteFetchConfigurationConstants.\n+                        ErrorMessage.ERROR_CODE_RE_CONFIG_NOT_FOUND, remoteFetchConfigurationId);\n+            }\n+        } catch (RemoteFetchCoreException e) {\n+            throw handleException(Response.Status.INTERNAL_SERVER_ERROR, RemoteFetchConfigurationConstants.ErrorMessage\n+                    .ERROR_CODE_ERROR_TRIGGER_REMOTE_FETCH, remoteFetchConfigurationId);\n+        }\n+\n+    }\n+\n+    /**\n+     * Add remote fetch configuration.\n+     *\n+     * @param remoteFetchConfigurationPOSTRequest remoteFetchConfigurationPOSTRequest\n+     * @return resource id.\n+     */\n+    public String addRemoteFetchConfiguration(RemoteFetchConfigurationPOSTRequest remoteFetchConfigurationPOSTRequest) {\n+\n+        try {\n+            validatePOSTRequest(remoteFetchConfigurationPOSTRequest);\n+            return RemoteFetchServiceHolder.getRemoteFetchConfigurationService()\n+                    .addRemoteFetchConfiguration(createRemoteFetchConfiguration(remoteFetchConfigurationPOSTRequest))\n+                    .getId();\n+\n+        } catch (RemoteFetchCoreException e) {\n+            throw handleRemoteFetchConfigurationException(e, RemoteFetchConfigurationConstants.ErrorMessage.\n+                    ERROR_CODE_ERROR_ADDING_RF_CONFIG, null);\n+        }\n+    }\n+\n+    private void validatePOSTRequest(RemoteFetchConfigurationPOSTRequest remoteFetchConfigurationPOSTRequest) {\n+\n+        if (remoteFetchConfigurationPOSTRequest.getIsEnabled() == null) {\n+            throw handleException(Response.Status.BAD_REQUEST, RemoteFetchConfigurationConstants.\n+                    ErrorMessage.ERROR_CODE_INVALID_RE_CONFIG_INPUT, IS_ENABLED);\n+        }\n+        if (StringUtils.isBlank(remoteFetchConfigurationPOSTRequest.getRemoteFetchName())) {\n+            throw handleException(Response.Status.BAD_REQUEST, RemoteFetchConfigurationConstants.\n+                    ErrorMessage.ERROR_CODE_INVALID_RE_CONFIG_INPUT, REMOTE_FETCH_NAME);\n+        }\n+        if (remoteFetchConfigurationPOSTRequest.getActionListener() == null) {\n+            throw handleException(Response.Status.BAD_REQUEST, RemoteFetchConfigurationConstants.\n+                    ErrorMessage.ERROR_CODE_INVALID_RE_CONFIG_INPUT, ACTION_LISTENER);\n+        }\n+        if (remoteFetchConfigurationPOSTRequest.getActionListener().getType() == null) {\n+            throw handleException(Response.Status.BAD_REQUEST, RemoteFetchConfigurationConstants.\n+                    ErrorMessage.ERROR_CODE_INVALID_RE_CONFIG_INPUT, ACTION_LISTENER);\n+        }\n+        if (remoteFetchConfigurationPOSTRequest.getActionListener().getAttributes() == null) {\n+            throw handleException(Response.Status.BAD_REQUEST, RemoteFetchConfigurationConstants.\n+                    ErrorMessage.ERROR_CODE_INVALID_RE_CONFIG_INPUT, ACTION_LISTENER_ATTRIBUTES);\n+        }\n+        if (StringUtils.isBlank(remoteFetchConfigurationPOSTRequest.getActionListener()\n+                .getAttributes().getFrequency())) {\n+            throw handleException(Response.Status.BAD_REQUEST, RemoteFetchConfigurationConstants.\n+                    ErrorMessage.ERROR_CODE_INVALID_RE_CONFIG_INPUT, FREQUENCY);\n+        }\n+        if (remoteFetchConfigurationPOSTRequest.getRepositoryManager() == null) {\n+            throw handleException(Response.Status.BAD_REQUEST, RemoteFetchConfigurationConstants.\n+                    ErrorMessage.ERROR_CODE_INVALID_RE_CONFIG_INPUT, REPOSITORY_MANAGER);\n+        }\n+        if (remoteFetchConfigurationPOSTRequest.getRepositoryManager().getType() == null) {\n+            throw handleException(Response.Status.BAD_REQUEST, RemoteFetchConfigurationConstants.\n+                    ErrorMessage.ERROR_CODE_INVALID_RE_CONFIG_INPUT, REPOSITORY_MANAGER);\n+        }\n+        if (remoteFetchConfigurationPOSTRequest.getRepositoryManager().getAttributes() == null) {\n+            throw handleException(Response.Status.BAD_REQUEST, RemoteFetchConfigurationConstants.\n+                    ErrorMessage.ERROR_CODE_INVALID_RE_CONFIG_INPUT, REPOSITORY_MANAGER_ATTRIBUTES);\n+        }\n+        if (StringUtils.isBlank(remoteFetchConfigurationPOSTRequest.getRepositoryManager()\n+                .getAttributes().getUri())) {\n+            throw handleException(Response.Status.BAD_REQUEST, RemoteFetchConfigurationConstants.\n+                    ErrorMessage.ERROR_CODE_INVALID_RE_CONFIG_INPUT, URI);\n+        }\n+\n+        if (StringUtils.isBlank(remoteFetchConfigurationPOSTRequest.getRepositoryManager()\n+                .getAttributes().getBranch())) {\n+            throw handleException(Response.Status.BAD_REQUEST, RemoteFetchConfigurationConstants.\n+                    ErrorMessage.ERROR_CODE_INVALID_RE_CONFIG_INPUT, BRANCH);\n+        }\n+\n+        if (StringUtils.isBlank(remoteFetchConfigurationPOSTRequest.getRepositoryManager()\n+                .getAttributes().getDirectory())) {\n+            throw handleException(Response.Status.BAD_REQUEST, RemoteFetchConfigurationConstants.\n+                    ErrorMessage.ERROR_CODE_INVALID_RE_CONFIG_INPUT, DIRECTORY);\n+        }\n+        if (remoteFetchConfigurationPOSTRequest.getConfigurationDeployer() == null) {\n+            throw handleException(Response.Status.BAD_REQUEST, RemoteFetchConfigurationConstants.\n+                    ErrorMessage.ERROR_CODE_INVALID_RE_CONFIG_INPUT, CONFIGURATION_DEPLOYER);\n+        }\n+        if (remoteFetchConfigurationPOSTRequest.getConfigurationDeployer().getType() == null) {\n+            throw handleException(Response.Status.BAD_REQUEST, RemoteFetchConfigurationConstants.\n+                    ErrorMessage.ERROR_CODE_INVALID_RE_CONFIG_INPUT, CONFIGURATION_DEPLOYER);\n+        }\n+        if (remoteFetchConfigurationPOSTRequest.getConfigurationDeployer().getAttributes() == null) {\n+            throw handleException(Response.Status.BAD_REQUEST, RemoteFetchConfigurationConstants.\n+                    ErrorMessage.ERROR_CODE_INVALID_RE_CONFIG_INPUT, CONFIGURATION_DEPLOYER_ATTRIBUTES);\n+        }\n+    }\n+\n+    /**\n+     * Get status of remote fetch.\n+     *\n+     * @param remoteFetchConfigurationId RemoteFetchConfigurationId.\n+     */\n+    public StatusListResponse getStatus(String remoteFetchConfigurationId) {\n+\n+        try {\n+            RemoteFetchConfiguration remoteFetchConfiguration =\n+                    RemoteFetchServiceHolder.getRemoteFetchConfigurationService()\n+                            .getRemoteFetchConfiguration(remoteFetchConfigurationId);\n+\n+            if (remoteFetchConfiguration != null) {\n+\n+                return createStatusListResponse(RemoteFetchServiceHolder.getRemoteFetchConfigurationService()\n+                        .getDeploymentRevisions(remoteFetchConfigurationId));\n+            } else {\n+                throw handleException(Response.Status.NOT_FOUND, RemoteFetchConfigurationConstants.\n+                        ErrorMessage.ERROR_CODE_RE_CONFIG_NOT_FOUND, remoteFetchConfigurationId);\n+            }\n+        } catch (RemoteFetchCoreException e) {\n+            throw handleException(Response.Status.INTERNAL_SERVER_ERROR, RemoteFetchConfigurationConstants.ErrorMessage\n+                    .ERROR_CODE_ERROR_STATUS_REMOTE_FETCH, remoteFetchConfigurationId);\n+        }\n+\n+    }\n+\n+    /**\n+     * This method is used to create status list from list of deployment revisions.\n+     * This method uses java stream api to count successful deployments and failed deployments.\n+     *\n+     * @param deploymentRevisions List of deployment revisions.\n+     * @return StatusListResponse.\n+     */\n+    private StatusListResponse createStatusListResponse(List<DeploymentRevision> deploymentRevisions) {\n+\n+        StatusListResponse statusListResponse = new StatusListResponse();\n+        if (CollectionUtils.isNotEmpty(deploymentRevisions)) {\n+            List<StatusListItem> statusListItemList = new ArrayList<>();\n+            for (DeploymentRevision deploymentRevision : deploymentRevisions) {\n+                StatusListItem statusListItem = populateDeploymentRevision(deploymentRevision);\n+                statusListItemList.add(statusListItem);\n+            }\n+            statusListResponse.setRemoteFetchRevisionStatuses(statusListItemList);\n+            statusListResponse.setSuccessfulDeployments(\n+                    (int) deploymentRevisions.stream()\n+                            .filter(Objects::nonNull)\n+                            .filter(deploymentRevision ->\n+                                    deploymentRevision.getDeploymentStatus().name()\n+                                            .equals(RemoteFetchConfigurationConstants.SUCCESS)).count());\n+\n+            statusListResponse.setFailedDeployments(\n+                    (int) deploymentRevisions.stream()\n+                            .filter(Objects::nonNull)\n+                            .filter(deploymentRevision ->\n+                                    deploymentRevision.getDeploymentStatus().name()\n+                                            .equals(RemoteFetchConfigurationConstants.FAIL)).count());\n+\n+            Date date = deploymentRevisions.stream()\n+                    .map(DeploymentRevision::getLastSynchronizedDate)\n+                    .max(Date::compareTo)\n+                    .orElse(null);\n+\n+            convertDateToStringIfNotNull(date, statusListResponse::setLastSynchronizedTime);\n+            return statusListResponse;\n+        } else {\n+            statusListResponse.setCount(0);\n+        }\n+        return statusListResponse;\n+    }\n+\n+    /**\n+     * Populate deployment revision to get status list item.\n+     *\n+     * @param deploymentRevision DeploymentRevision.\n+     * @return StatusListItem.\n+     */\n+    private StatusListItem populateDeploymentRevision(DeploymentRevision deploymentRevision) {\n+\n+        StatusListItem statusListItem = new StatusListItem();\n+        statusListItem.setDeployedStatus(deploymentRevision.getDeploymentStatus().name());\n+        convertDateToStringIfNotNull(deploymentRevision.getDeployedDate(), statusListItem::setDeployedTime);\n+        statusListItem.setItemName(deploymentRevision.getItemName());\n+        statusListItem.setDeploymentErrorReport(deploymentRevision.getErrorMessage());\n+        return statusListItem;\n+    }\n+\n+    /**\n+     * This method is used to create remote fetch configuration object from POST request.\n+     * First it creates three hash map from post request.\n+     * Then it set primitive attributes from post request remote fetch configuration.\n+     *\n+     * @param remoteFetchConfigurationPOSTRequest POST request.\n+     * @return RemoteFetchConfiguration.\n+     */\n+    private RemoteFetchConfiguration createRemoteFetchConfiguration\n+    (RemoteFetchConfigurationPOSTRequest remoteFetchConfigurationPOSTRequest) {\n+\n+        RemoteFetchConfiguration remoteFetchConfiguration = new RemoteFetchConfiguration();\n+        Map<String, String> repositoryManagerAttributes =\n+                createRepositoryManagerProperties(remoteFetchConfigurationPOSTRequest);\n+        Map<String, String> actionListenerAttributes =\n+                createActionListenerProperties(remoteFetchConfigurationPOSTRequest);\n+        Map<String, String> configurationDeployerAttributes = Collections.emptyMap();\n+\n+        setIfNotNull(remoteFetchConfigurationPOSTRequest.getIsEnabled(), remoteFetchConfiguration::setEnabled);\n+        setIfNotNull(remoteFetchConfigurationPOSTRequest.getRemoteFetchName(),\n+                remoteFetchConfiguration::setRemoteFetchName);\n+\n+        remoteFetchConfiguration.setTenantId(IdentityTenantUtil\n+                .getTenantId(ContextLoader.getTenantDomainFromContext()));\n+\n+        remoteFetchConfiguration.setConfigurationDeployerType(remoteFetchConfigurationPOSTRequest\n+                .getConfigurationDeployer().getType().name());\n+        remoteFetchConfiguration.setActionListenerType(remoteFetchConfigurationPOSTRequest\n+                .getActionListener().getType().name());\n+        remoteFetchConfiguration.setRepositoryManagerType(remoteFetchConfigurationPOSTRequest\n+                .getRepositoryManager().getType().name());\n+\n+        remoteFetchConfiguration.setActionListenerAttributes(actionListenerAttributes);\n+        remoteFetchConfiguration.setRepositoryManagerAttributes(repositoryManagerAttributes);\n+        remoteFetchConfiguration.setConfigurationDeployerAttributes(configurationDeployerAttributes);\n+        return remoteFetchConfiguration;\n+\n+    }\n+\n+    /**\n+     * This method is used to create action listener hash map from POST request.\n+     *\n+     * @param remoteFetchConfigurationPOSTRequest RemoteFetchConfigurationPOSTRequest/\n+     * @return Properties.\n+     */\n+    private Map<String, String> createActionListenerProperties\n+    (RemoteFetchConfigurationPOSTRequest remoteFetchConfigurationPOSTRequest) {\n+\n+        Map<String, String> properties = new HashMap<>();\n+        if (remoteFetchConfigurationPOSTRequest.getActionListener() != null) {\n+            ActionListenerAttributes actionListenerAttributes =\n+                    remoteFetchConfigurationPOSTRequest.getActionListener().getAttributes();\n+            if (!StringUtils.isEmpty(actionListenerAttributes.getFrequency())) {\n+                properties.put(FREQUENCY, actionListenerAttributes.getFrequency());\n+            }\n+        }\n+        return properties;\n+\n+    }\n+\n+    /**\n+     * This method is used to create Repository manager hash map from post request.\n+     *\n+     * @param remoteFetchConfigurationPOSTRequest POST request.\n+     * @return Properties.\n+     */\n+    private Map<String, String> createRepositoryManagerProperties\n+    (RemoteFetchConfigurationPOSTRequest remoteFetchConfigurationPOSTRequest) {\n+\n+        Map<String, String> properties = new HashMap<>();\n+\n+        if (remoteFetchConfigurationPOSTRequest.getRepositoryManager() != null) {\n+\n+            RepositoryManagerAttributes repositoryManagerAttributes =\n+                    remoteFetchConfigurationPOSTRequest.getRepositoryManager().getAttributes();\n+            if (!StringUtils.isEmpty(repositoryManagerAttributes.getAccessToken())) {\n+                properties.put(RemoteFetchConfigurationConstants.ACCESS_TOKEN,\n+                        repositoryManagerAttributes.getAccessToken());\n+            }\n+            if (!StringUtils.isEmpty(repositoryManagerAttributes.getBranch())) {\n+                properties.put(BRANCH, repositoryManagerAttributes.getBranch());\n+            }\n+            if (!StringUtils.isEmpty(repositoryManagerAttributes.getDirectory())) {\n+                properties.put(RemoteFetchConfigurationConstants.DIRECTORY, repositoryManagerAttributes.getDirectory());\n+            }\n+            if (!StringUtils.isEmpty(repositoryManagerAttributes.getUri())) {\n+                properties.put(URI, repositoryManagerAttributes.getUri());\n+            }\n+            if (!StringUtils.isEmpty(repositoryManagerAttributes.getUsername())) {\n+                properties.put(RemoteFetchConfigurationConstants.USER_NAME, repositoryManagerAttributes.getUsername());\n+            }\n+        }\n+\n+        return properties;\n+    }\n+\n+    /**\n+     * This method is used to create GET response from remote fetch configuration id.\n+     *\n+     * @param remoteFetchConfiguration remote fetch configuration domain object.\n+     * @return RemoteFetchConfigurationGetResponse.\n+     * @throws RemoteFetchCoreException RemoteFetchCoreException\n+     */\n+    private RemoteFetchConfigurationGetResponse createRemoteFetchConfigurationResponse\n+    (RemoteFetchConfiguration remoteFetchConfiguration) throws RemoteFetchCoreException {\n+\n+        RemoteFetchConfigurationGetResponse remoteFetchConfigurationGetResponse\n+                = new RemoteFetchConfigurationGetResponse();\n+        ActionListenerAttributes actionListenerAttributes = createActionListenerAttributeProperties\n+                (remoteFetchConfiguration);\n+\n+        RepositoryManagerAttributes repositoryManagerAttributes = createRepositoryManagerAttributeProperties\n+                (remoteFetchConfiguration);\n+\n+        remoteFetchConfigurationGetResponse.setActionListenerAttributes(actionListenerAttributes);\n+        remoteFetchConfigurationGetResponse.setRepositoryManagerAttributes(repositoryManagerAttributes);\n+        remoteFetchConfigurationGetResponse.setConfigurationDeployerAttributes(null);\n+\n+        setIfNotNull(remoteFetchConfiguration.getRemoteFetchConfigurationId(),\n+                remoteFetchConfigurationGetResponse::setId);\n+        setIfNotNull(remoteFetchConfiguration.isEnabled(),\n+                remoteFetchConfigurationGetResponse::setIsEnabled);\n+        setIfNotNull(remoteFetchConfiguration.getRemoteFetchName(),\n+                remoteFetchConfigurationGetResponse::setRemoteFetchName);\n+        setIfNotNull(remoteFetchConfiguration.getRepositoryManagerType(),\n+                remoteFetchConfigurationGetResponse::setRepositoryManagerType);\n+        setIfNotNull(remoteFetchConfiguration.getConfigurationDeployerType(),\n+                remoteFetchConfigurationGetResponse::setConfigurationDeployerType);\n+        setIfNotNull(remoteFetchConfiguration.getRepositoryManagerType(),\n+                remoteFetchConfigurationGetResponse::setRepositoryManagerType);\n+\n+        StatusListResponse statusListResponse = this.createStatusListResponse(RemoteFetchServiceHolder\n+                .getRemoteFetchConfigurationService()\n+                .getDeploymentRevisions(remoteFetchConfiguration.getRemoteFetchConfigurationId()));\n+        remoteFetchConfigurationGetResponse.setStatus(statusListResponse);\n+\n+        return remoteFetchConfigurationGetResponse;\n+    }\n+\n+    /**\n+     * This method used to create Action Listener attributes from domain object.\n+     *\n+     * @param remoteFetchConfiguration RemoteFetchConfiguration.\n+     * @return ActionListenerAttributes.\n+     */\n+    private ActionListenerAttributes createActionListenerAttributeProperties\n+    (RemoteFetchConfiguration remoteFetchConfiguration) {\n+\n+        ActionListenerAttributes actionListenerAttributes = new ActionListenerAttributes();\n+        setIfNotNull(remoteFetchConfiguration\n+                        .getActionListenerAttributes().get(FREQUENCY),\n+                actionListenerAttributes::setFrequency);\n+        return actionListenerAttributes;\n+\n+    }\n+\n+    /**\n+     * This method is used to create Repository Manager Attributes from domain object.\n+     *\n+     * @param remoteFetchConfiguration RemoteFetchConfiguration.\n+     * @return RepositoryManagerAttributes\n+     */\n+    private RepositoryManagerAttributes createRepositoryManagerAttributeProperties\n+    (RemoteFetchConfiguration remoteFetchConfiguration) {\n+\n+        RepositoryManagerAttributes repositoryManagerAttributes = new RepositoryManagerAttributes();\n+\n+        setIfNotNull((remoteFetchConfiguration\n+                        .getRepositoryManagerAttributes().get(RemoteFetchConfigurationConstants.ACCESS_TOKEN)),\n+                repositoryManagerAttributes::setAccessToken);\n+\n+        setIfNotNull(remoteFetchConfiguration\n+                        .getRepositoryManagerAttributes().get(BRANCH),\n+                repositoryManagerAttributes::setBranch);\n+\n+        setIfNotNull(remoteFetchConfiguration\n+                        .getRepositoryManagerAttributes().get(RemoteFetchConfigurationConstants.DIRECTORY),\n+                repositoryManagerAttributes::setDirectory);\n+\n+        setIfNotNull(remoteFetchConfiguration\n+                        .getRepositoryManagerAttributes().get(URI),\n+                repositoryManagerAttributes::setUri);\n+\n+        setIfNotNull(remoteFetchConfiguration\n+                        .getRepositoryManagerAttributes().get(RemoteFetchConfigurationConstants.USER_NAME),\n+                repositoryManagerAttributes::setUsername);\n+        return repositoryManagerAttributes;\n+\n+    }\n+\n+    /**\n+     * This method is used to create list response from basic remote fetch configuration.\n+     * This method is create list item from basic remote fetch configuration list items.\n+     *\n+     * @param basicRemoteFetchConfigurationList List response.\n+     * @return RemoteFetchConfigurationListResponse.\n+     */\n+    private RemoteFetchConfigurationListResponse createRemoteFetchConfigurationListResponse\n+    (List<BasicRemoteFetchConfiguration> basicRemoteFetchConfigurationList) {\n+\n+        RemoteFetchConfigurationListResponse remoteFetchConfigurationListResponse =\n+                new RemoteFetchConfigurationListResponse();\n+        if (CollectionUtils.isNotEmpty(basicRemoteFetchConfigurationList)) {\n+            List<RemoteFetchConfigurationListItem> remoteFetchConfigurations = new ArrayList<>();\n+            for (BasicRemoteFetchConfiguration basicRemoteFetchConfiguration : basicRemoteFetchConfigurationList) {\n+                RemoteFetchConfigurationListItem remoteFetchConfigurationListItem =\n+                        populateRemoteFetchConfigurationListResponse(basicRemoteFetchConfiguration);\n+                remoteFetchConfigurations.add(remoteFetchConfigurationListItem);\n+            }\n+            remoteFetchConfigurationListResponse.setRemotefetchConfigurations(remoteFetchConfigurations);\n+            remoteFetchConfigurationListResponse.setCount(remoteFetchConfigurations.size());\n+        } else {\n+            remoteFetchConfigurationListResponse.setCount(0);\n+        }\n+        return remoteFetchConfigurationListResponse;\n+    }\n+\n+    /**\n+     * This method is used to populate remote fetch configuration list item from basic remote fetch configuration.\n+     *\n+     * @param basicRemoteFetchConfiguration basic remote fetch configuration.\n+     * @return RemoteFetchConfigurationListItem.\n+     */\n+    private RemoteFetchConfigurationListItem populateRemoteFetchConfigurationListResponse\n+    (BasicRemoteFetchConfiguration basicRemoteFetchConfiguration) {\n+\n+        RemoteFetchConfigurationListItem remoteFetchConfigurationListItem = new RemoteFetchConfigurationListItem();\n+\n+        setIfNotNull(basicRemoteFetchConfiguration.getId(), remoteFetchConfigurationListItem::setId);\n+        setIfNotNull(basicRemoteFetchConfiguration.isEnabled(), remoteFetchConfigurationListItem::setIsEnabled);\n+        setIfNotNull(basicRemoteFetchConfiguration.getActionListenerType(),\n+                remoteFetchConfigurationListItem::setActionListenerType);\n+        setIfNotNull(basicRemoteFetchConfiguration.getConfigurationDeployerType(),\n+                remoteFetchConfigurationListItem::setConfigurationDeployerType);\n+        setIfNotNull(basicRemoteFetchConfiguration.getRepositoryManagerType(),\n+                remoteFetchConfigurationListItem::setRepositoryManagerType);\n+        setIfNotNull(basicRemoteFetchConfiguration.getRemoteFetchName(),\n+                remoteFetchConfigurationListItem::setName);\n+        if (basicRemoteFetchConfiguration.getLastDeployed() == null) {\n+            remoteFetchConfigurationListItem.setLastDeployed(null);\n+        } else {\n+            convertDateToStringIfNotNull(basicRemoteFetchConfiguration.getLastDeployed(),\n+                    remoteFetchConfigurationListItem::setLastDeployed);\n+        }\n+        remoteFetchConfigurationListItem.setFailedDeployments(basicRemoteFetchConfiguration.getFailedDeployments());\n+        remoteFetchConfigurationListItem.setSuccessfulDeployments(basicRemoteFetchConfiguration.\n+                getSuccessfulDeployments());\n+\n+        return remoteFetchConfigurationListItem;\n+    }\n+\n+    /**\n+     * This method is used to handle web hook.\n+     *\n+     * @param pushEventWebHookPOSTRequest WebHook Post request\n+     */\n+    public void handleWebHook(PushEventWebHookPOSTRequest pushEventWebHookPOSTRequest) {\n+\n+        try {\n+            validateWebHookRequest(pushEventWebHookPOSTRequest);\n+            String cloneURL = pushEventWebHookPOSTRequest.getRepository().getCloneUrl();\n+            String branch = populateBranch(pushEventWebHookPOSTRequest.getRef());\n+            List<String> modifiedFiles = extractAddedAndModifiedFiles(pushEventWebHookPOSTRequest.getCommits());\n+            RemoteFetchServiceHolder\n+                    .getRemoteFetchConfigurationService().handleWebHook(cloneURL, branch, modifiedFiles);\n+        } catch (RemoteFetchCoreException e) {\n+            throw handleException(Response.Status.INTERNAL_SERVER_ERROR, RemoteFetchConfigurationConstants.ErrorMessage\n+                    .ERROR_CODE_ERROR_WEB_HOOK_REMOTE_FETCH, null);\n+        }\n+\n+    }\n+\n+    /**\n+     * Method used to validate GitHub Web hook request.\n+     *\n+     * @param pushEventWebHookPOSTRequest pushEventWebHookPOSTRequest.\n+     */\n+    private void validateWebHookRequest(PushEventWebHookPOSTRequest pushEventWebHookPOSTRequest) {\n+\n+        if ((pushEventWebHookPOSTRequest.getRef() == null) || (pushEventWebHookPOSTRequest.getRepository() == null) ||\n+                (pushEventWebHookPOSTRequest.getCommits() == null)) {\n+            throw handleException(Response.Status.BAD_REQUEST, RemoteFetchConfigurationConstants.\n+                    ErrorMessage.ERROR_CODE_INVALID_RE_CONFIG_INPUT, WEBHOOK_REQUEST);\n+        }\n+        if (StringUtils.isBlank(pushEventWebHookPOSTRequest.getRepository().getCloneUrl())) {\n+            throw handleException(Response.Status.BAD_REQUEST, RemoteFetchConfigurationConstants.\n+                    ErrorMessage.ERROR_CODE_INVALID_RE_CONFIG_INPUT, WEBHOOK_REQUEST);\n+        }\n+    }\n+\n+    private String populateBranch(String ref) {\n+\n+        String[] splitCredentials = ref.split(\"/\", 3);\n+        return splitCredentials[2];\n+    }\n+\n+    /**\n+     * This method is used to extract added or modified file names from the commit objects.\n+     *\n+     * @param commits List of commits\n+     * @return List of FIle names\n+     */\n+    private List<String> extractAddedAndModifiedFiles(List<PushEventWebHookPOSTRequestCommits> commits) {\n+\n+        List<String> fileNames = new ArrayList<>();\n+        if (CollectionUtils.isNotEmpty(commits)) {\n+            for (PushEventWebHookPOSTRequestCommits commit : commits) {\n+                fileNames.addAll(commit.getAdded());\n+                fileNames.addAll(commit.getModified());\n+            }\n+            return fileNames;\n+        } else {\n+            throw handleException(Response.Status.BAD_REQUEST, RemoteFetchConfigurationConstants.\n+                    ErrorMessage.ERROR_CODE_COMMIT_NOT_FOUND, null);\n+        }\n+    }\n+\n+    /**\n+     * This method is used to handle remote fetch core exception and create API error wit suitable response code and\n+     * status by checking its instance type.\n+     *\n+     * @param e         RemoteFetchCoreException.\n+     * @param errorEnum RemoteFetchConfigurationConstants.ErrorMessage\n+     * @param data      data\n+     * @return APIError\n+     */\n+    private APIError handleRemoteFetchConfigurationException(RemoteFetchCoreException e,\n+                                                             RemoteFetchConfigurationConstants.ErrorMessage errorEnum,\n+                                                             String data) {\n+\n+        ErrorResponse errorResponse = getErrorBuilder(errorEnum, data).build(log, e, errorEnum.getDescription());\n+\n+        Response.Status status;\n+\n+        if (e instanceof RemoteFetchClientException) {\n+            if (e.getErrorCode() != null) {\n+                String errorCode = e.getErrorCode();\n+                errorCode =\n+                        errorCode.contains(RemoteFetchConfigurationConstants.ERROR_CODE_DELIMITER) ?\n+                                errorCode : RemoteFetchConfigurationConstants.\n+                                REMOTE_FETCH_CONFIGURATION_MANAGEMENT_PREFIX + errorCode;\n+                errorResponse.setCode(errorCode);\n+            }\n+            errorResponse.setDescription(e.getMessage());\n+            status = Response.Status.BAD_REQUEST;\n+        } else if (e instanceof RemoteFetchServerException) {\n+            if (e.getErrorCode() != null) {\n+                String errorCode = e.getErrorCode();\n+                errorCode =\n+                        errorCode.contains(RemoteFetchConfigurationConstants.ERROR_CODE_DELIMITER) ?\n+                                errorCode : RemoteFetchConfigurationConstants.\n+                                REMOTE_FETCH_CONFIGURATION_MANAGEMENT_PREFIX + errorCode;\n+                errorResponse.setCode(errorCode);\n+            }\n+            errorResponse.setDescription(e.getMessage());\n+            status = Response.Status.INTERNAL_SERVER_ERROR;\n+        } else {\n+            status = Response.Status.INTERNAL_SERVER_ERROR;\n+        }\n+        return new APIError(status, errorResponse);\n+    }\n+\n+    /**\n+     * From the error message and the data this method returns error builder.\n+     *\n+     * @param errorMsg error message.\n+     * @param data     data.\n+     * @return ErrorResponse.Builder\n+     */\n+    private ErrorResponse.Builder getErrorBuilder(RemoteFetchConfigurationConstants.ErrorMessage errorMsg,", "originalCommit": "c1fb2dd934e5919e7461ee1a9845960ab21188a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA2MzY4Nw==", "url": "https://github.com/wso2/identity-api-server/pull/212#discussion_r507063687", "bodyText": "Sorry. The line length will be 121 characters.", "author": "Thumimku", "createdAt": "2020-10-18T09:39:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA1Nzg2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA3MDQ3OA==", "url": "https://github.com/wso2/identity-api-server/pull/212#discussion_r507070478", "bodyText": "Ack", "author": "darshanasbg", "createdAt": "2020-10-18T09:58:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA1Nzg2Ng=="}], "type": "inlineReview"}, {"oid": "9d223dea682d91d9317259b51215de81943be9c9", "url": "https://github.com/wso2/identity-api-server/commit/9d223dea682d91d9317259b51215de81943be9c9", "message": "remote fetch impl\n\nadd copyright\n\nfix version issues\n\nmoving dependencies\n\nchange parent version\n\nUpdate versions and fix formatting\n\nFix typo\n\nremove unwanted lines\n\nadd lines", "committedDate": "2020-10-18T09:45:23Z", "type": "forcePushed"}, {"oid": "46b821859ce0c9cfd57a1aed680fa623b7bd1f6d", "url": "https://github.com/wso2/identity-api-server/commit/46b821859ce0c9cfd57a1aed680fa623b7bd1f6d", "message": "remote fetch impl\n\nadd copyright\n\nfix version issues\n\nmoving dependencies\n\nchange parent version\n\nUpdate versions and fix formatting\n\nFix typo\n\nremove unwanted lines\n\nadd lines\n\nrevert auto genenrated class changes", "committedDate": "2020-10-18T09:54:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA3MDY4MQ==", "url": "https://github.com/wso2/identity-api-server/pull/212#discussion_r507070681", "bodyText": "Remove additional new line.", "author": "darshanasbg", "createdAt": "2020-10-18T09:58:34Z", "path": "components/org.wso2.carbon.identity.api.server.fetch.remote/org.wso2.carbon.identity.api.server.fetch.remote.v1/src/main/java/org/wso2/carbon/identity/api/server/fetch/remote/v1/impl/RemoteFetchApiServiceImpl.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+* Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+*\n+* http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.wso2.carbon.identity.api.server.fetch.remote.v1.impl;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.wso2.carbon.identity.api.server.common.Constants;\n+import org.wso2.carbon.identity.api.server.common.ContextLoader;\n+import org.wso2.carbon.identity.api.server.fetch.remote.common.RemoteFetchConfigurationConstants;\n+import org.wso2.carbon.identity.api.server.fetch.remote.v1.RemoteFetchApiService;\n+import org.wso2.carbon.identity.api.server.fetch.remote.v1.core.ServerRemoteFetchConfigManagementService;\n+import org.wso2.carbon.identity.api.server.fetch.remote.v1.model.PushEventWebHookPOSTRequest;\n+import org.wso2.carbon.identity.api.server.fetch.remote.v1.model.RemoteFetchConfigurationListResponse;\n+import org.wso2.carbon.identity.api.server.fetch.remote.v1.model.RemoteFetchConfigurationPOSTRequest;\n+import org.wso2.carbon.identity.api.server.fetch.remote.v1.model.RemoteFetchConfigurationPatchRequest;\n+import org.wso2.carbon.identity.api.server.fetch.remote.v1.model.StatusListResponse;\n+\n+import java.net.URI;\n+import javax.ws.rs.core.Response;\n+\n+", "originalCommit": "46b821859ce0c9cfd57a1aed680fa623b7bd1f6d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA3MTE2Nw==", "url": "https://github.com/wso2/identity-api-server/pull/212#discussion_r507071167", "bodyText": "Remove additional new line.", "author": "darshanasbg", "createdAt": "2020-10-18T09:59:44Z", "path": "components/org.wso2.carbon.identity.api.server.fetch.remote/org.wso2.carbon.identity.api.server.fetch.remote.v1/src/main/java/org/wso2/carbon/identity/api/server/fetch/remote/v1/impl/RemoteFetchApiServiceImpl.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+* Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+*\n+* http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.wso2.carbon.identity.api.server.fetch.remote.v1.impl;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.wso2.carbon.identity.api.server.common.Constants;\n+import org.wso2.carbon.identity.api.server.common.ContextLoader;\n+import org.wso2.carbon.identity.api.server.fetch.remote.common.RemoteFetchConfigurationConstants;\n+import org.wso2.carbon.identity.api.server.fetch.remote.v1.RemoteFetchApiService;\n+import org.wso2.carbon.identity.api.server.fetch.remote.v1.core.ServerRemoteFetchConfigManagementService;\n+import org.wso2.carbon.identity.api.server.fetch.remote.v1.model.PushEventWebHookPOSTRequest;\n+import org.wso2.carbon.identity.api.server.fetch.remote.v1.model.RemoteFetchConfigurationListResponse;\n+import org.wso2.carbon.identity.api.server.fetch.remote.v1.model.RemoteFetchConfigurationPOSTRequest;\n+import org.wso2.carbon.identity.api.server.fetch.remote.v1.model.RemoteFetchConfigurationPatchRequest;\n+import org.wso2.carbon.identity.api.server.fetch.remote.v1.model.StatusListResponse;\n+\n+import java.net.URI;\n+import javax.ws.rs.core.Response;\n+\n+\n+/**\n+ * Implementation of the Remote Fetch Rest API.\n+ */\n+public class RemoteFetchApiServiceImpl implements RemoteFetchApiService {\n+\n+    @Autowired\n+    private ServerRemoteFetchConfigManagementService serverRemoteFetchConfigManagementService;\n+\n+", "originalCommit": "46b821859ce0c9cfd57a1aed680fa623b7bd1f6d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a2d6e77e8e3899e9be487c9fd22be61bb0039a3a", "url": "https://github.com/wso2/identity-api-server/commit/a2d6e77e8e3899e9be487c9fd22be61bb0039a3a", "message": "remote fetch impl\n\nadd copyright\n\nfix version issues\n\nmoving dependencies\n\nchange parent version\n\nUpdate versions and fix formatting\n\nFix typo\n\nremove unwanted lines\n\nadd lines\n\nrevert auto genenrated class changes\n\nremove unwanted lines", "committedDate": "2020-10-18T10:06:16Z", "type": "commit"}, {"oid": "a2d6e77e8e3899e9be487c9fd22be61bb0039a3a", "url": "https://github.com/wso2/identity-api-server/commit/a2d6e77e8e3899e9be487c9fd22be61bb0039a3a", "message": "remote fetch impl\n\nadd copyright\n\nfix version issues\n\nmoving dependencies\n\nchange parent version\n\nUpdate versions and fix formatting\n\nFix typo\n\nremove unwanted lines\n\nadd lines\n\nrevert auto genenrated class changes\n\nremove unwanted lines", "committedDate": "2020-10-18T10:06:16Z", "type": "forcePushed"}]}