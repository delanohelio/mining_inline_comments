{"pr_number": 81, "pr_title": "Script library management REST API", "pr_createdAt": "2020-01-19T09:42:40Z", "pr_url": "https://github.com/wso2/identity-api-server/pull/81", "timeline": [{"oid": "0cc466e8158177cb1ddbcee1be1f65fd2fc6177f", "url": "https://github.com/wso2/identity-api-server/commit/0cc466e8158177cb1ddbcee1be1f65fd2fc6177f", "message": "Implimented functionality of SCL REST API", "committedDate": "2020-01-19T09:33:39Z", "type": "commit"}, {"oid": "1146e34aa05bb68140c27f08dbfe7e9e41470237", "url": "https://github.com/wso2/identity-api-server/commit/1146e34aa05bb68140c27f08dbfe7e9e41470237", "message": "Added the license to the pom files", "committedDate": "2020-01-19T09:38:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI5ODI1MQ==", "url": "https://github.com/wso2/identity-api-server/pull/81#discussion_r368298251", "bodyText": "Better expand the imports with explicit classes.  Wildcard imports are discouraged as it does not show what classes we actually need.", "author": "ruwanta", "createdAt": "2020-01-19T14:29:47Z", "path": "components/org.wso2.carbon.identity.api.server.script.library/org.wso2.carbon.identity.api.server.script.library.v1/src/gen/java/org/wso2/carbon/identity/api/server/script/library/v1/ScriptLibrariesApi.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.wso2.carbon.identity.api.server.script.library.v1;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.apache.cxf.jaxrs.ext.multipart.Attachment;\n+import org.apache.cxf.jaxrs.ext.multipart.Multipart;\n+\n+import java.io.InputStream;\n+\n+import org.wso2.carbon.identity.api.server.script.library.v1.model.Error;\n+\n+import java.io.File;\n+\n+import org.wso2.carbon.identity.api.server.script.library.v1.model.ScriptLibraryListResponse;\n+import org.wso2.carbon.identity.api.server.script.library.v1.model.ScriptLibraryResponse;\n+import org.wso2.carbon.identity.api.server.script.library.v1.ScriptLibrariesApiService;\n+\n+import javax.validation.Valid;\n+import javax.ws.rs.*;", "originalCommit": "1146e34aa05bb68140c27f08dbfe7e9e41470237", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM3MTMyNQ==", "url": "https://github.com/wso2/identity-api-server/pull/81#discussion_r368371325", "bodyText": "This class is an autogenerated class from openapi-generator-cxf-wso2", "author": "Wathsara", "createdAt": "2020-01-20T05:06:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI5ODI1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ0ODU2NQ==", "url": "https://github.com/wso2/identity-api-server/pull/81#discussion_r368448565", "bodyText": "+1", "author": "ruwanta", "createdAt": "2020-01-20T09:39:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI5ODI1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI5ODMwMg==", "url": "https://github.com/wso2/identity-api-server/pull/81#discussion_r368298302", "bodyText": "We need a class comment explaining what this supposed to do and the purpose, usage", "author": "ruwanta", "createdAt": "2020-01-19T14:30:41Z", "path": "components/org.wso2.carbon.identity.api.server.script.library/org.wso2.carbon.identity.api.server.script.library.v1/src/gen/java/org/wso2/carbon/identity/api/server/script/library/v1/ScriptLibrariesApiService.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+* Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+*\n+* http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.wso2.carbon.identity.api.server.script.library.v1;\n+\n+import org.wso2.carbon.identity.api.server.script.library.v1.*;\n+import org.wso2.carbon.identity.api.server.script.library.v1.model.*;\n+import org.apache.cxf.jaxrs.ext.multipart.Attachment;\n+import org.apache.cxf.jaxrs.ext.multipart.Multipart;\n+import java.io.InputStream;\n+import org.wso2.carbon.identity.api.server.script.library.v1.model.Error;\n+import java.io.File;\n+import org.wso2.carbon.identity.api.server.script.library.v1.model.ScriptLibraryListResponse;\n+import org.wso2.carbon.identity.api.server.script.library.v1.model.ScriptLibraryResponse;\n+import javax.ws.rs.core.Response;\n+\n+\n+public interface ScriptLibrariesApiService {", "originalCommit": "1146e34aa05bb68140c27f08dbfe7e9e41470237", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM3MTM2NA==", "url": "https://github.com/wso2/identity-api-server/pull/81#discussion_r368371364", "bodyText": "This interface is an autogenerated class from openapi-generator-cxf-wso2", "author": "Wathsara", "createdAt": "2020-01-20T05:06:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI5ODMwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI5ODMyMw==", "url": "https://github.com/wso2/identity-api-server/pull/81#discussion_r368298323", "bodyText": "Interface does not need \"public\". any method declared is public by definition", "author": "ruwanta", "createdAt": "2020-01-19T14:31:10Z", "path": "components/org.wso2.carbon.identity.api.server.script.library/org.wso2.carbon.identity.api.server.script.library.v1/src/gen/java/org/wso2/carbon/identity/api/server/script/library/v1/ScriptLibrariesApiService.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+* Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+*\n+* http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.wso2.carbon.identity.api.server.script.library.v1;\n+\n+import org.wso2.carbon.identity.api.server.script.library.v1.*;\n+import org.wso2.carbon.identity.api.server.script.library.v1.model.*;\n+import org.apache.cxf.jaxrs.ext.multipart.Attachment;\n+import org.apache.cxf.jaxrs.ext.multipart.Multipart;\n+import java.io.InputStream;\n+import org.wso2.carbon.identity.api.server.script.library.v1.model.Error;\n+import java.io.File;\n+import org.wso2.carbon.identity.api.server.script.library.v1.model.ScriptLibraryListResponse;\n+import org.wso2.carbon.identity.api.server.script.library.v1.model.ScriptLibraryResponse;\n+import javax.ws.rs.core.Response;\n+\n+\n+public interface ScriptLibrariesApiService {\n+\n+      public Response addScriptLibrary(String name, InputStream contentInputStream, Attachment contentDetail, String description);", "originalCommit": "1146e34aa05bb68140c27f08dbfe7e9e41470237", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM3MTQxMQ==", "url": "https://github.com/wso2/identity-api-server/pull/81#discussion_r368371411", "bodyText": "This class is an autogenerated class from openapi-generator-cxf-wso2", "author": "Wathsara", "createdAt": "2020-01-20T05:07:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI5ODMyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI5ODM2Nw==", "url": "https://github.com/wso2/identity-api-server/pull/81#discussion_r368298367", "bodyText": "Class comment is necessary.", "author": "ruwanta", "createdAt": "2020-01-19T14:31:48Z", "path": "components/org.wso2.carbon.identity.api.server.script.library/org.wso2.carbon.identity.api.server.script.library.v1/src/gen/java/org/wso2/carbon/identity/api/server/script/library/v1/model/Error.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+* Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+*\n+* http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.wso2.carbon.identity.api.server.script.library.v1.model;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+import javax.validation.constraints.*;\n+\n+\n+import io.swagger.annotations.*;\n+import java.util.Objects;\n+import javax.validation.Valid;\n+import javax.xml.bind.annotation.*;\n+\n+public class Error  {", "originalCommit": "1146e34aa05bb68140c27f08dbfe7e9e41470237", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM3MTQzNw==", "url": "https://github.com/wso2/identity-api-server/pull/81#discussion_r368371437", "bodyText": "This class is an autogenerated class from openapi-generator-cxf-wso2", "author": "Wathsara", "createdAt": "2020-01-20T05:07:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI5ODM2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM4OTU4MQ==", "url": "https://github.com/wso2/identity-api-server/pull/81#discussion_r368389581", "bodyText": "change year", "author": "emswbandara", "createdAt": "2020-01-20T06:47:14Z", "path": "components/org.wso2.carbon.identity.api.server.script.library/org.wso2.carbon.identity.api.server.script.library.common/src/main/java/org/wso2/carbon/identity/api/server/script/library/common/Constants.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "originalCommit": "1146e34aa05bb68140c27f08dbfe7e9e41470237", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQzMzgzMw==", "url": "https://github.com/wso2/identity-api-server/pull/81#discussion_r368433833", "bodyText": "Fixed commit", "author": "Wathsara", "createdAt": "2020-01-20T09:09:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM4OTU4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM4OTY5Ng==", "url": "https://github.com/wso2/identity-api-server/pull/81#discussion_r368389696", "bodyText": "change year", "author": "emswbandara", "createdAt": "2020-01-20T06:47:43Z", "path": "components/org.wso2.carbon.identity.api.server.script.library/org.wso2.carbon.identity.api.server.script.library.common/src/main/java/org/wso2/carbon/identity/api/server/script/library/common/ScriptLibraryServiceHolder.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "originalCommit": "1146e34aa05bb68140c27f08dbfe7e9e41470237", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQzMzY5OQ==", "url": "https://github.com/wso2/identity-api-server/pull/81#discussion_r368433699", "bodyText": "Fixed commit", "author": "Wathsara", "createdAt": "2020-01-20T09:08:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM4OTY5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM5NTEzNA==", "url": "https://github.com/wso2/identity-api-server/pull/81#discussion_r368395134", "bodyText": "let's throw an error (Bad request ) if offset is negative. Return default value for null offset", "author": "emswbandara", "createdAt": "2020-01-20T07:11:40Z", "path": "components/org.wso2.carbon.identity.api.server.script.library/org.wso2.carbon.identity.api.server.script.library.v1/src/main/java/org/wso2/carbon/identity/api/server/script/library/v1/core/ServerScriptLibrariesService.java", "diffHunk": "@@ -0,0 +1,439 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.identity.api.server.script.library.v1.core;\n+\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.api.server.common.ContextLoader;\n+import org.wso2.carbon.identity.api.server.common.Util;\n+import org.wso2.carbon.identity.api.server.common.error.APIError;\n+import org.wso2.carbon.identity.api.server.common.error.ErrorResponse;\n+import org.wso2.carbon.identity.api.server.script.library.common.Constants;\n+import org.wso2.carbon.identity.api.server.script.library.common.ScriptLibraryServiceHolder;\n+import org.wso2.carbon.identity.api.server.script.library.v1.model.ScriptLibrary;\n+import org.wso2.carbon.identity.api.server.script.library.v1.model.ScriptLibraryListResponse;\n+import org.wso2.carbon.identity.api.server.script.library.v1.model.ScriptLibraryPOSTRequest;\n+import org.wso2.carbon.identity.api.server.script.library.v1.model.ScriptLibraryPUTRequest;\n+import org.wso2.carbon.identity.api.server.script.library.v1.model.ScriptLibraryResponse;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.identity.functions.library.mgt.exception.FunctionLibraryManagementClientException;\n+import org.wso2.carbon.identity.functions.library.mgt.exception.FunctionLibraryManagementException;\n+import org.wso2.carbon.identity.functions.library.mgt.exception.FunctionLibraryManagementServerException;\n+import org.wso2.carbon.identity.functions.library.mgt.model.FunctionLibrary;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.ws.rs.core.Response;\n+\n+import static org.wso2.carbon.identity.api.server.common.Constants.V1_API_PATH_COMPONENT;\n+import static org.wso2.carbon.identity.api.server.script.library.common.Constants.SCRIPT_LIBRARY_CONTENT_PATH;\n+import static org.wso2.carbon.identity.api.server.script.library.common.Constants.SCRIPT_LIBRARY_PATH_COMPONENT;\n+\n+/**\n+ * Call internal osgi services to perform server script library management operations.\n+ */\n+public class ServerScriptLibrariesService {\n+\n+    private static final Log log = LogFactory.getLog(ServerScriptLibrariesService.class);\n+    private static final int DEFAULT_OFFSET = 0;\n+\n+    /**\n+     * Get list of Script Libraries.\n+     *\n+     * @param limit  Items per page.\n+     * @param offset Offset.\n+     * @return ScriptLibraryListResponse.\n+     */\n+    public ScriptLibraryListResponse getScriptLibraries(Integer limit, Integer offset) {\n+\n+        List<FunctionLibrary> functionLibraries;\n+        try {\n+            functionLibraries = ScriptLibraryServiceHolder.getScriptLibraryManagementService()\n+                    .listFunctionLibraries(ContextLoader.getTenantDomainFromContext());\n+        } catch (FunctionLibraryManagementException e) {\n+            throw handleScriptLibraryError(e, Constants.ErrorMessage.ERROR_CODE_ERROR_LISTING_SCRIPT_LIBRARIES);\n+        }\n+        return createScriptLibrariesList(functionLibraries, validateLimit(limit), validateOffset(offset));\n+    }\n+\n+    /**\n+     * Validate the offset.\n+     *\n+     * @param offset Offset value\n+     * @return Validated offset.\n+     */\n+    private int validateOffset(Integer offset) {\n+\n+        if (offset != null && offset >= 0) {", "originalCommit": "1146e34aa05bb68140c27f08dbfe7e9e41470237", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQzMzU3NA==", "url": "https://github.com/wso2/identity-api-server/pull/81#discussion_r368433574", "bodyText": "Fixed commit", "author": "Wathsara", "createdAt": "2020-01-20T09:08:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM5NTEzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM5NTI3Ng==", "url": "https://github.com/wso2/identity-api-server/pull/81#discussion_r368395276", "bodyText": "let's throw an error (Bad request ) if limit is negative. Return default value for null limit", "author": "emswbandara", "createdAt": "2020-01-20T07:12:10Z", "path": "components/org.wso2.carbon.identity.api.server.script.library/org.wso2.carbon.identity.api.server.script.library.v1/src/main/java/org/wso2/carbon/identity/api/server/script/library/v1/core/ServerScriptLibrariesService.java", "diffHunk": "@@ -0,0 +1,439 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.identity.api.server.script.library.v1.core;\n+\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.api.server.common.ContextLoader;\n+import org.wso2.carbon.identity.api.server.common.Util;\n+import org.wso2.carbon.identity.api.server.common.error.APIError;\n+import org.wso2.carbon.identity.api.server.common.error.ErrorResponse;\n+import org.wso2.carbon.identity.api.server.script.library.common.Constants;\n+import org.wso2.carbon.identity.api.server.script.library.common.ScriptLibraryServiceHolder;\n+import org.wso2.carbon.identity.api.server.script.library.v1.model.ScriptLibrary;\n+import org.wso2.carbon.identity.api.server.script.library.v1.model.ScriptLibraryListResponse;\n+import org.wso2.carbon.identity.api.server.script.library.v1.model.ScriptLibraryPOSTRequest;\n+import org.wso2.carbon.identity.api.server.script.library.v1.model.ScriptLibraryPUTRequest;\n+import org.wso2.carbon.identity.api.server.script.library.v1.model.ScriptLibraryResponse;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.identity.functions.library.mgt.exception.FunctionLibraryManagementClientException;\n+import org.wso2.carbon.identity.functions.library.mgt.exception.FunctionLibraryManagementException;\n+import org.wso2.carbon.identity.functions.library.mgt.exception.FunctionLibraryManagementServerException;\n+import org.wso2.carbon.identity.functions.library.mgt.model.FunctionLibrary;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.ws.rs.core.Response;\n+\n+import static org.wso2.carbon.identity.api.server.common.Constants.V1_API_PATH_COMPONENT;\n+import static org.wso2.carbon.identity.api.server.script.library.common.Constants.SCRIPT_LIBRARY_CONTENT_PATH;\n+import static org.wso2.carbon.identity.api.server.script.library.common.Constants.SCRIPT_LIBRARY_PATH_COMPONENT;\n+\n+/**\n+ * Call internal osgi services to perform server script library management operations.\n+ */\n+public class ServerScriptLibrariesService {\n+\n+    private static final Log log = LogFactory.getLog(ServerScriptLibrariesService.class);\n+    private static final int DEFAULT_OFFSET = 0;\n+\n+    /**\n+     * Get list of Script Libraries.\n+     *\n+     * @param limit  Items per page.\n+     * @param offset Offset.\n+     * @return ScriptLibraryListResponse.\n+     */\n+    public ScriptLibraryListResponse getScriptLibraries(Integer limit, Integer offset) {\n+\n+        List<FunctionLibrary> functionLibraries;\n+        try {\n+            functionLibraries = ScriptLibraryServiceHolder.getScriptLibraryManagementService()\n+                    .listFunctionLibraries(ContextLoader.getTenantDomainFromContext());\n+        } catch (FunctionLibraryManagementException e) {\n+            throw handleScriptLibraryError(e, Constants.ErrorMessage.ERROR_CODE_ERROR_LISTING_SCRIPT_LIBRARIES);\n+        }\n+        return createScriptLibrariesList(functionLibraries, validateLimit(limit), validateOffset(offset));\n+    }\n+\n+    /**\n+     * Validate the offset.\n+     *\n+     * @param offset Offset value\n+     * @return Validated offset.\n+     */\n+    private int validateOffset(Integer offset) {\n+\n+        if (offset != null && offset >= 0) {\n+            return offset;\n+        } else {\n+            return DEFAULT_OFFSET;\n+        }\n+    }\n+\n+    /**\n+     * Validate the limit.\n+     *\n+     * @param limit Limit value.\n+     * @return Validated limit.\n+     */\n+    private int validateLimit(Integer limit) {\n+\n+        final int maximumItemPerPage = IdentityUtil.getMaximumItemPerPage();\n+        if (limit != null && limit > 0 && limit <= maximumItemPerPage) {", "originalCommit": "1146e34aa05bb68140c27f08dbfe7e9e41470237", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQzMzQ1Ng==", "url": "https://github.com/wso2/identity-api-server/pull/81#discussion_r368433456", "bodyText": "Fixed commit", "author": "Wathsara", "createdAt": "2020-01-20T09:08:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM5NTI3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA2MzgwNw==", "url": "https://github.com/wso2/identity-api-server/pull/81#discussion_r371063807", "bodyText": "this should be modified as\nif limit is null --> return default (IdentityUtil.getDefaultItemPerPage())\nelse if limit negative --> throw error\nelse if limit is greater than maximumItemPerPage, then return maximumItemPerPage\nelse return the limit", "author": "emswbandara", "createdAt": "2020-01-27T04:50:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM5NTI3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA3NTk2Nw==", "url": "https://github.com/wso2/identity-api-server/pull/81#discussion_r371075967", "bodyText": "Negative values are checked from an upper level.", "author": "Wathsara", "createdAt": "2020-01-27T06:21:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM5NTI3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA3NjAyNw==", "url": "https://github.com/wso2/identity-api-server/pull/81#discussion_r371076027", "bodyText": "Fixed other validations", "author": "Wathsara", "createdAt": "2020-01-27T06:21:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM5NTI3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM5NTQ5OA==", "url": "https://github.com/wso2/identity-api-server/pull/81#discussion_r368395498", "bodyText": "can't we inline 207 and 208", "author": "emswbandara", "createdAt": "2020-01-20T07:13:02Z", "path": "components/org.wso2.carbon.identity.api.server.script.library/org.wso2.carbon.identity.api.server.script.library.v1/src/main/java/org/wso2/carbon/identity/api/server/script/library/v1/core/ServerScriptLibrariesService.java", "diffHunk": "@@ -0,0 +1,439 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.identity.api.server.script.library.v1.core;\n+\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.api.server.common.ContextLoader;\n+import org.wso2.carbon.identity.api.server.common.Util;\n+import org.wso2.carbon.identity.api.server.common.error.APIError;\n+import org.wso2.carbon.identity.api.server.common.error.ErrorResponse;\n+import org.wso2.carbon.identity.api.server.script.library.common.Constants;\n+import org.wso2.carbon.identity.api.server.script.library.common.ScriptLibraryServiceHolder;\n+import org.wso2.carbon.identity.api.server.script.library.v1.model.ScriptLibrary;\n+import org.wso2.carbon.identity.api.server.script.library.v1.model.ScriptLibraryListResponse;\n+import org.wso2.carbon.identity.api.server.script.library.v1.model.ScriptLibraryPOSTRequest;\n+import org.wso2.carbon.identity.api.server.script.library.v1.model.ScriptLibraryPUTRequest;\n+import org.wso2.carbon.identity.api.server.script.library.v1.model.ScriptLibraryResponse;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.identity.functions.library.mgt.exception.FunctionLibraryManagementClientException;\n+import org.wso2.carbon.identity.functions.library.mgt.exception.FunctionLibraryManagementException;\n+import org.wso2.carbon.identity.functions.library.mgt.exception.FunctionLibraryManagementServerException;\n+import org.wso2.carbon.identity.functions.library.mgt.model.FunctionLibrary;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.ws.rs.core.Response;\n+\n+import static org.wso2.carbon.identity.api.server.common.Constants.V1_API_PATH_COMPONENT;\n+import static org.wso2.carbon.identity.api.server.script.library.common.Constants.SCRIPT_LIBRARY_CONTENT_PATH;\n+import static org.wso2.carbon.identity.api.server.script.library.common.Constants.SCRIPT_LIBRARY_PATH_COMPONENT;\n+\n+/**\n+ * Call internal osgi services to perform server script library management operations.\n+ */\n+public class ServerScriptLibrariesService {\n+\n+    private static final Log log = LogFactory.getLog(ServerScriptLibrariesService.class);\n+    private static final int DEFAULT_OFFSET = 0;\n+\n+    /**\n+     * Get list of Script Libraries.\n+     *\n+     * @param limit  Items per page.\n+     * @param offset Offset.\n+     * @return ScriptLibraryListResponse.\n+     */\n+    public ScriptLibraryListResponse getScriptLibraries(Integer limit, Integer offset) {\n+\n+        List<FunctionLibrary> functionLibraries;\n+        try {\n+            functionLibraries = ScriptLibraryServiceHolder.getScriptLibraryManagementService()\n+                    .listFunctionLibraries(ContextLoader.getTenantDomainFromContext());\n+        } catch (FunctionLibraryManagementException e) {\n+            throw handleScriptLibraryError(e, Constants.ErrorMessage.ERROR_CODE_ERROR_LISTING_SCRIPT_LIBRARIES);\n+        }\n+        return createScriptLibrariesList(functionLibraries, validateLimit(limit), validateOffset(offset));\n+    }\n+\n+    /**\n+     * Validate the offset.\n+     *\n+     * @param offset Offset value\n+     * @return Validated offset.\n+     */\n+    private int validateOffset(Integer offset) {\n+\n+        if (offset != null && offset >= 0) {\n+            return offset;\n+        } else {\n+            return DEFAULT_OFFSET;\n+        }\n+    }\n+\n+    /**\n+     * Validate the limit.\n+     *\n+     * @param limit Limit value.\n+     * @return Validated limit.\n+     */\n+    private int validateLimit(Integer limit) {\n+\n+        final int maximumItemPerPage = IdentityUtil.getMaximumItemPerPage();\n+        if (limit != null && limit > 0 && limit <= maximumItemPerPage) {\n+            return limit;\n+        } else {\n+            return IdentityUtil.getDefaultItemsPerPage();\n+        }\n+    }\n+\n+    /**\n+     * Get a script library identified by resource ID.\n+     *\n+     * @param scriptLibraryId resource ID.\n+     * @return ScriptLibrary.\n+     */\n+    public ScriptLibraryResponse getScriptLibrary(String scriptLibraryId) {\n+\n+        if (isScriptLibraryAvailable(scriptLibraryId)) {\n+            FunctionLibrary functionLibrary;\n+            try {\n+                functionLibrary = ScriptLibraryServiceHolder.getScriptLibraryManagementService()\n+                        .getFunctionLibrary(scriptLibraryId,\n+                                ContextLoader.getTenantDomainFromContext());\n+            } catch (FunctionLibraryManagementException e) {\n+                throw handleScriptLibraryError(e, Constants.ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_SCRIPT_LIBRARY);\n+            }\n+            return createScriptLibraryResponse(functionLibrary);\n+        } else {\n+            throw handleScriptLibraryClientError(Constants.ErrorMessage.ERROR_SCRIPT_LIBRARY_NOT_FOUND,\n+                    Response.Status.NOT_FOUND, scriptLibraryId, ContextLoader.getTenantDomainFromContext());\n+        }\n+\n+    }\n+\n+    /**\n+     * Add a script library.\n+     *\n+     * @param name               Name of the script library.\n+     * @param contentInputStream Content of the script library code.\n+     * @param description        Description of the script library\n+     */\n+    public void addScriptLibrary(String name, InputStream contentInputStream, String description) {\n+\n+        ScriptLibraryPOSTRequest scriptLibraryPOSTRequest = new ScriptLibraryPOSTRequest();\n+        scriptLibraryPOSTRequest.setName(name);\n+        scriptLibraryPOSTRequest.setDescription(description);\n+        try {\n+            scriptLibraryPOSTRequest.setContent(\n+                    new File(IOUtils.toString(contentInputStream, StandardCharsets.UTF_8.name())));\n+        } catch (IOException e) {\n+            log.error(\"Error occurred while reading contentInputStream: \" + e);\n+            throw handleScriptLibraryClientError(Constants.ErrorMessage.ERROR_CODE_ERROR_ADDING_SCRIPT_LIBRARY,\n+                    Response.Status.INTERNAL_SERVER_ERROR);\n+        }\n+        if (isScriptLibraryAvailable(scriptLibraryPOSTRequest.getName())) {\n+            throw handleScriptLibraryClientError(Constants.ErrorMessage.ERROR_SCRIPT_LIBRARY_ALREADY_FOUND,\n+                    Response.Status.CONFLICT, scriptLibraryPOSTRequest.getName(),\n+                    ContextLoader.getTenantDomainFromContext());\n+        } else {\n+            FunctionLibrary functionLibrary = createScriptLibrary(scriptLibraryPOSTRequest);\n+            try {\n+                if (scriptLibraryPOSTRequest.getName().contains(Constants.SCRIPT_LIBRARY_EXTENSION)) {\n+                    ScriptLibraryServiceHolder.getScriptLibraryManagementService()\n+                            .createFunctionLibrary(functionLibrary,\n+                                    ContextLoader.getTenantDomainFromContext());\n+                } else {\n+                    throw handleScriptLibraryClientError(Constants.ErrorMessage.ERROR_SCRIPT_LIBRARY_NAME_VALIDATION,\n+                            Response.Status.BAD_REQUEST);\n+                }\n+            } catch (FunctionLibraryManagementException e) {\n+                throw handleScriptLibraryError(e, Constants.ErrorMessage.ERROR_CODE_ERROR_ADDING_SCRIPT_LIBRARY);\n+            }\n+        }\n+\n+    }\n+\n+    /**\n+     * Update a script library identified by resource ID.\n+     *\n+     * @param scriptLibraryName  Name of the script library.\n+     * @param contentInputStream Content of the script library code.\n+     * @param description        Description of the script library\n+     * @return ScriptLibrary.\n+     */\n+    public ScriptLibraryResponse updateScriptLibrary(String scriptLibraryName, InputStream contentInputStream,\n+                                                     String description) {\n+\n+        ScriptLibraryPUTRequest scriptLibraryPUTRequest = new ScriptLibraryPUTRequest();\n+        scriptLibraryPUTRequest.setDescription(description);\n+        try {\n+            scriptLibraryPUTRequest.setContent(\n+                    new File(IOUtils.toString(contentInputStream, StandardCharsets.UTF_8.name())));\n+        } catch (IOException e) {\n+            log.error(\"Error occurred while reading contentInputStream: \" + e);\n+            throw handleScriptLibraryClientError(Constants.ErrorMessage.ERROR_CODE_ERROR_UPDATING_SCRIPT_LIBRARY,\n+                    Response.Status.INTERNAL_SERVER_ERROR);\n+        }\n+        if (isScriptLibraryAvailable(scriptLibraryName)) {\n+            FunctionLibrary functionLibrary = createScriptLibraryPut(scriptLibraryName, scriptLibraryPUTRequest);\n+            try {\n+                ScriptLibraryServiceHolder.getScriptLibraryManagementService()\n+                        .updateFunctionLibrary(scriptLibraryName, functionLibrary,\n+                                ContextLoader.getTenantDomainFromContext());\n+            } catch (FunctionLibraryManagementException e) {\n+                throw handleScriptLibraryError(e, Constants.ErrorMessage.ERROR_CODE_ERROR_UPDATING_SCRIPT_LIBRARY", "originalCommit": "1146e34aa05bb68140c27f08dbfe7e9e41470237", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQzMzI5OQ==", "url": "https://github.com/wso2/identity-api-server/pull/81#discussion_r368433299", "bodyText": "Fixed commit", "author": "Wathsara", "createdAt": "2020-01-20T09:07:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM5NTQ5OA=="}], "type": "inlineReview"}, {"oid": "f1f24a495063022b48d0fe2a91be8b83c6cf07de", "url": "https://github.com/wso2/identity-api-server/commit/f1f24a495063022b48d0fe2a91be8b83c6cf07de", "message": "Fixed PR Comments", "committedDate": "2020-01-20T09:05:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA2NDAyMg==", "url": "https://github.com/wso2/identity-api-server/pull/81#discussion_r371064022", "bodyText": "cant we merge line 252 and 253", "author": "emswbandara", "createdAt": "2020-01-27T04:52:24Z", "path": "components/org.wso2.carbon.identity.api.server.script.library/org.wso2.carbon.identity.api.server.script.library.v1/src/main/java/org/wso2/carbon/identity/api/server/script/library/v1/core/ServerScriptLibrariesService.java", "diffHunk": "@@ -0,0 +1,438 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.identity.api.server.script.library.v1.core;\n+\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.api.server.common.ContextLoader;\n+import org.wso2.carbon.identity.api.server.common.Util;\n+import org.wso2.carbon.identity.api.server.common.error.APIError;\n+import org.wso2.carbon.identity.api.server.common.error.ErrorResponse;\n+import org.wso2.carbon.identity.api.server.script.library.common.Constants;\n+import org.wso2.carbon.identity.api.server.script.library.common.ScriptLibraryServiceHolder;\n+import org.wso2.carbon.identity.api.server.script.library.v1.model.ScriptLibrary;\n+import org.wso2.carbon.identity.api.server.script.library.v1.model.ScriptLibraryListResponse;\n+import org.wso2.carbon.identity.api.server.script.library.v1.model.ScriptLibraryPOSTRequest;\n+import org.wso2.carbon.identity.api.server.script.library.v1.model.ScriptLibraryPUTRequest;\n+import org.wso2.carbon.identity.api.server.script.library.v1.model.ScriptLibraryResponse;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.identity.functions.library.mgt.exception.FunctionLibraryManagementClientException;\n+import org.wso2.carbon.identity.functions.library.mgt.exception.FunctionLibraryManagementException;\n+import org.wso2.carbon.identity.functions.library.mgt.exception.FunctionLibraryManagementServerException;\n+import org.wso2.carbon.identity.functions.library.mgt.model.FunctionLibrary;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.ws.rs.core.Response;\n+\n+import static org.wso2.carbon.identity.api.server.common.Constants.V1_API_PATH_COMPONENT;\n+import static org.wso2.carbon.identity.api.server.script.library.common.Constants.SCRIPT_LIBRARY_CONTENT_PATH;\n+import static org.wso2.carbon.identity.api.server.script.library.common.Constants.SCRIPT_LIBRARY_PATH_COMPONENT;\n+\n+/**\n+ * Call internal osgi services to perform server script library management operations.\n+ */\n+public class ServerScriptLibrariesService {\n+\n+    private static final Log log = LogFactory.getLog(ServerScriptLibrariesService.class);\n+\n+    /**\n+     * Get list of Script Libraries.\n+     *\n+     * @param limit  Items per page.\n+     * @param offset Offset.\n+     * @return ScriptLibraryListResponse.\n+     */\n+    public ScriptLibraryListResponse getScriptLibraries(Integer limit, Integer offset) {\n+\n+        List<FunctionLibrary> functionLibraries;\n+        try {\n+            functionLibraries = ScriptLibraryServiceHolder.getScriptLibraryManagementService()\n+                    .listFunctionLibraries(ContextLoader.getTenantDomainFromContext());\n+        } catch (FunctionLibraryManagementException e) {\n+            throw handleScriptLibraryError(e, Constants.ErrorMessage.ERROR_CODE_ERROR_LISTING_SCRIPT_LIBRARIES);\n+        }\n+        return createScriptLibrariesList(functionLibraries, validateLimit(limit), validateOffset(offset));\n+    }\n+\n+    /**\n+     * Validate the offset.\n+     *\n+     * @param offset Offset value\n+     * @return Validated offset.\n+     */\n+    private int validateOffset(Integer offset) {\n+\n+        if (offset != null && offset >= 0) {\n+            return offset;\n+        } else {\n+            throw handleScriptLibraryClientError(Constants.ErrorMessage.ERROR_SCRIPT_LIBRARY_OFFSET_VALIDATION,\n+                    Response.Status.BAD_REQUEST);\n+        }\n+    }\n+\n+    /**\n+     * Validate the limit.\n+     *\n+     * @param limit Limit value.\n+     * @return Validated limit.\n+     */\n+    private int validateLimit(Integer limit) {\n+\n+        final int maximumItemPerPage = IdentityUtil.getMaximumItemPerPage();\n+        if (limit != null && limit > 0 && limit <= maximumItemPerPage) {\n+            return limit;\n+        } else {\n+            return IdentityUtil.getDefaultItemsPerPage();\n+        }\n+    }\n+\n+    /**\n+     * Get a script library identified by resource ID.\n+     *\n+     * @param scriptLibraryId resource ID.\n+     * @return ScriptLibrary.\n+     */\n+    public ScriptLibraryResponse getScriptLibrary(String scriptLibraryId) {\n+\n+        if (isScriptLibraryAvailable(scriptLibraryId)) {\n+            FunctionLibrary functionLibrary;\n+            try {\n+                functionLibrary = ScriptLibraryServiceHolder.getScriptLibraryManagementService()\n+                        .getFunctionLibrary(scriptLibraryId,\n+                                ContextLoader.getTenantDomainFromContext());\n+            } catch (FunctionLibraryManagementException e) {\n+                throw handleScriptLibraryError(e, Constants.ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_SCRIPT_LIBRARY);\n+            }\n+            return createScriptLibraryResponse(functionLibrary);\n+        } else {\n+            throw handleScriptLibraryClientError(Constants.ErrorMessage.ERROR_SCRIPT_LIBRARY_NOT_FOUND,\n+                    Response.Status.NOT_FOUND, scriptLibraryId, ContextLoader.getTenantDomainFromContext());\n+        }\n+\n+    }\n+\n+    /**\n+     * Add a script library.\n+     *\n+     * @param name               Name of the script library.\n+     * @param contentInputStream Content of the script library code.\n+     * @param description        Description of the script library\n+     */\n+    public void addScriptLibrary(String name, InputStream contentInputStream, String description) {\n+\n+        ScriptLibraryPOSTRequest scriptLibraryPOSTRequest = new ScriptLibraryPOSTRequest();\n+        scriptLibraryPOSTRequest.setName(name);\n+        scriptLibraryPOSTRequest.setDescription(description);\n+        try {\n+            scriptLibraryPOSTRequest.setContent(\n+                    new File(IOUtils.toString(contentInputStream, StandardCharsets.UTF_8.name())));\n+        } catch (IOException e) {\n+            log.error(\"Error occurred while reading contentInputStream: \" + e);\n+            throw handleScriptLibraryClientError(Constants.ErrorMessage.ERROR_CODE_ERROR_ADDING_SCRIPT_LIBRARY,\n+                    Response.Status.INTERNAL_SERVER_ERROR);\n+        }\n+        if (isScriptLibraryAvailable(scriptLibraryPOSTRequest.getName())) {\n+            throw handleScriptLibraryClientError(Constants.ErrorMessage.ERROR_SCRIPT_LIBRARY_ALREADY_FOUND,\n+                    Response.Status.CONFLICT, scriptLibraryPOSTRequest.getName(),\n+                    ContextLoader.getTenantDomainFromContext());\n+        } else {\n+            FunctionLibrary functionLibrary = createScriptLibrary(scriptLibraryPOSTRequest);\n+            try {\n+                if (scriptLibraryPOSTRequest.getName().contains(Constants.SCRIPT_LIBRARY_EXTENSION)) {\n+                    ScriptLibraryServiceHolder.getScriptLibraryManagementService()\n+                            .createFunctionLibrary(functionLibrary,\n+                                    ContextLoader.getTenantDomainFromContext());\n+                } else {\n+                    throw handleScriptLibraryClientError(Constants.ErrorMessage.ERROR_SCRIPT_LIBRARY_NAME_VALIDATION,\n+                            Response.Status.BAD_REQUEST);\n+                }\n+            } catch (FunctionLibraryManagementException e) {\n+                throw handleScriptLibraryError(e, Constants.ErrorMessage.ERROR_CODE_ERROR_ADDING_SCRIPT_LIBRARY);\n+            }\n+        }\n+\n+    }\n+\n+    /**\n+     * Update a script library identified by resource ID.\n+     *\n+     * @param scriptLibraryName  Name of the script library.\n+     * @param contentInputStream Content of the script library code.\n+     * @param description        Description of the script library\n+     * @return ScriptLibrary.\n+     */\n+    public ScriptLibraryResponse updateScriptLibrary(String scriptLibraryName, InputStream contentInputStream,\n+                                                     String description) {\n+\n+        ScriptLibraryPUTRequest scriptLibraryPUTRequest = new ScriptLibraryPUTRequest();\n+        scriptLibraryPUTRequest.setDescription(description);\n+        try {\n+            scriptLibraryPUTRequest.setContent(\n+                    new File(IOUtils.toString(contentInputStream, StandardCharsets.UTF_8.name())));\n+        } catch (IOException e) {\n+            log.error(\"Error occurred while reading contentInputStream: \" + e);\n+            throw handleScriptLibraryClientError(Constants.ErrorMessage.ERROR_CODE_ERROR_UPDATING_SCRIPT_LIBRARY,\n+                    Response.Status.INTERNAL_SERVER_ERROR);\n+        }\n+        if (isScriptLibraryAvailable(scriptLibraryName)) {\n+            FunctionLibrary functionLibrary = createScriptLibraryPut(scriptLibraryName, scriptLibraryPUTRequest);\n+            try {\n+                ScriptLibraryServiceHolder.getScriptLibraryManagementService()\n+                        .updateFunctionLibrary(scriptLibraryName, functionLibrary,\n+                                ContextLoader.getTenantDomainFromContext());\n+            } catch (FunctionLibraryManagementException e) {\n+                throw handleScriptLibraryError(e, Constants.ErrorMessage.ERROR_CODE_ERROR_UPDATING_SCRIPT_LIBRARY);\n+            }\n+            return createScriptLibraryResponse(functionLibrary);\n+        } else {\n+            throw handleScriptLibraryClientError(Constants.ErrorMessage.ERROR_SCRIPT_LIBRARY_NOT_FOUND,\n+                    Response.Status.NOT_FOUND, scriptLibraryName, ContextLoader.getTenantDomainFromContext());\n+        }\n+\n+    }\n+\n+    /**\n+     * Get the script library content.\n+     *\n+     * @param scriptLibraryName Name of the script library\n+     * @return Script library content\n+     */\n+    public String getScriptLibraryContentByName(String scriptLibraryName) {\n+\n+        if (isScriptLibraryAvailable(scriptLibraryName)) {\n+            try {\n+                FunctionLibrary functionLibrary = ScriptLibraryServiceHolder.getScriptLibraryManagementService()\n+                        .getFunctionLibrary(scriptLibraryName,\n+                                ContextLoader.getTenantDomainFromContext());\n+                return functionLibrary.getFunctionLibraryScript();\n+            } catch (FunctionLibraryManagementException e) {\n+                throw handleScriptLibraryError(e, Constants.ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_SCRIPT_LIBRARY);\n+            }\n+        } else {\n+            throw handleScriptLibraryClientError(Constants.ErrorMessage.ERROR_SCRIPT_LIBRARY_NOT_FOUND,\n+                    Response.Status.NOT_FOUND, scriptLibraryName, ContextLoader.getTenantDomainFromContext());\n+        }\n+    }\n+\n+    /**\n+     * Delete a script library.\n+     *\n+     * @param scriptLibraryId script library resource ID.\n+     */\n+    public void deleteScriptLibrary(String scriptLibraryId) {\n+\n+        if (isScriptLibraryAvailable(scriptLibraryId)) {\n+            try {\n+                ScriptLibraryServiceHolder.getScriptLibraryManagementService()\n+                        .deleteFunctionLibrary(scriptLibraryId, ContextLoader.getTenantDomainFromContext());\n+            } catch (FunctionLibraryManagementException e) {\n+                throw handleScriptLibraryError(e, Constants.ErrorMessage.ERROR_CODE_ERROR_DELETING_SCRIPT_LIBRARY", "originalCommit": "f1f24a495063022b48d0fe2a91be8b83c6cf07de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA2ODM1NA==", "url": "https://github.com/wso2/identity-api-server/pull/81#discussion_r371068354", "bodyText": "fixed commit", "author": "Wathsara", "createdAt": "2020-01-27T05:29:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA2NDAyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA2NDMxNA==", "url": "https://github.com/wso2/identity-api-server/pull/81#discussion_r371064314", "bodyText": "let's avoid sending any response in update requests as discussed in the code-review. Only the status code will be enough.", "author": "emswbandara", "createdAt": "2020-01-27T04:54:42Z", "path": "components/org.wso2.carbon.identity.api.server.script.library/org.wso2.carbon.identity.api.server.script.library.v1/src/main/java/org/wso2/carbon/identity/api/server/script/library/v1/impl/ScriptLibrariesApiServiceImpl.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.wso2.carbon.identity.api.server.script.library.v1.impl;\n+\n+import org.apache.cxf.jaxrs.ext.multipart.Attachment;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.wso2.carbon.identity.api.server.common.ContextLoader;\n+import org.wso2.carbon.identity.api.server.script.library.v1.ScriptLibrariesApiService;\n+import org.wso2.carbon.identity.api.server.script.library.v1.core.ServerScriptLibrariesService;\n+import org.wso2.carbon.identity.api.server.script.library.v1.model.ScriptLibraryListResponse;\n+import org.wso2.carbon.identity.api.server.script.library.v1.model.ScriptLibraryResponse;\n+\n+import java.io.InputStream;\n+import java.net.URI;\n+\n+import javax.ws.rs.core.Response;\n+\n+import static org.wso2.carbon.identity.api.server.common.Constants.V1_API_PATH_COMPONENT;\n+import static org.wso2.carbon.identity.api.server.script.library.common.Constants.SCRIPT_LIBRARY_PATH_COMPONENT;\n+\n+/**\n+ * Implementation of the script library Rest API.\n+ */\n+public class ScriptLibrariesApiServiceImpl implements ScriptLibrariesApiService {\n+\n+    @Autowired\n+    private ServerScriptLibrariesService serverScriptLibrariesService;\n+\n+    @Override\n+    public Response addScriptLibrary(String name, InputStream contentInputStream, Attachment contentDetail,\n+                                     String description) {\n+\n+        serverScriptLibrariesService.addScriptLibrary(name, contentInputStream, description);\n+        URI location =\n+                ContextLoader.buildURIForHeader(V1_API_PATH_COMPONENT + SCRIPT_LIBRARY_PATH_COMPONENT + \"/\" + name);\n+        return Response.created(location).build();\n+    }\n+\n+    @Override\n+    public Response deleteScriptLibrary(String scriptLibraryName) {\n+\n+        serverScriptLibrariesService.deleteScriptLibrary(scriptLibraryName);\n+        return Response.noContent().build();\n+    }\n+\n+    @Override\n+    public Response getScriptLibraries(Integer limit, Integer offset) {\n+\n+        ScriptLibraryListResponse scriptLibraryListResponse = serverScriptLibrariesService.getScriptLibraries(limit,\n+                offset);\n+        return Response.ok().entity(scriptLibraryListResponse).build();\n+    }\n+\n+    @Override\n+    public Response getScriptLibraryByName(String scriptLibraryName) {\n+\n+        ScriptLibraryResponse scriptLibraryResponse = serverScriptLibrariesService.getScriptLibrary(scriptLibraryName);\n+        return Response.ok().entity(scriptLibraryResponse).build();\n+    }\n+\n+    @Override\n+    public Response getScriptLibraryContentByName(String scriptLibraryName) {\n+\n+        return Response.ok().entity(serverScriptLibrariesService.getScriptLibraryContentByName(scriptLibraryName))\n+                .build();\n+    }\n+\n+    @Override\n+    public Response updateScriptLibrary(String scriptLibraryName, InputStream contentInputStream,\n+                                        Attachment contentDetail, String description) {\n+\n+        ScriptLibraryResponse scriptLibraryResponse =\n+                serverScriptLibrariesService.updateScriptLibrary(scriptLibraryName, contentInputStream, description);\n+        return Response.ok().entity(scriptLibraryResponse).build();", "originalCommit": "f1f24a495063022b48d0fe2a91be8b83c6cf07de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA2ODMwNQ==", "url": "https://github.com/wso2/identity-api-server/pull/81#discussion_r371068305", "bodyText": "Fixed  commit", "author": "Wathsara", "createdAt": "2020-01-27T05:28:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA2NDMxNA=="}], "type": "inlineReview"}, {"oid": "2800691d849b18ddbdf4fb3acff4c9f75b8e2795", "url": "https://github.com/wso2/identity-api-server/commit/2800691d849b18ddbdf4fb3acff4c9f75b8e2795", "message": "Fixed the response of the update", "committedDate": "2020-01-27T05:26:41Z", "type": "commit"}, {"oid": "fabd00fd3df7dd96fcfadb66eaab70ba8d0b56ed", "url": "https://github.com/wso2/identity-api-server/commit/fabd00fd3df7dd96fcfadb66eaab70ba8d0b56ed", "message": "Fixed the limit validation", "committedDate": "2020-01-27T06:15:52Z", "type": "commit"}, {"oid": "4a2bc42aadd7d2a302966545a6cbf35b05065308", "url": "https://github.com/wso2/identity-api-server/commit/4a2bc42aadd7d2a302966545a6cbf35b05065308", "message": "Updated the identity framework version", "committedDate": "2020-01-27T12:00:18Z", "type": "commit"}]}