{"pr_number": 1177, "pr_title": "Do not abort server write if the CloseEvent is already registered", "pr_createdAt": "2020-10-13T21:49:19Z", "pr_url": "https://github.com/apple/servicetalk/pull/1177", "timeline": [{"oid": "615f9fbe68087d7257132c884c6213c129468e99", "url": "https://github.com/apple/servicetalk/commit/615f9fbe68087d7257132c884c6213c129468e99", "message": "Do not abort server write if the CloseEvent is already registered\n\nMotivation:\n\nIf a server receives a request with `Connection: close` header, it registers\n`PROTOCOL_CLOSING_INBOUND` event and transitions to the `CLOSING` state.\nThis event can be observed before the server connection started processing\nrequests. As the result, server's write stream fails and does not let the server\nrespond.\nThis use-case happens frequently when `TLSv1.3` is used, because a client\nstarts sending data before the server completes TLS handshake. Therefore,\nthe first request can be pending before the server connection is established.\nA similar scenario (request received before processing starts, closing state\nwaits for the response) may occur with graceful closure or\n`CHANNEL_CLOSED_INBOUND` event (client half-closes the connection\nafter a request is sent).\n\nModifications:\n\n- Defer delivering the `CloseEvent` from `CloseHandler` until the connection\nnotifies that the read-write stream is initialized for the `Channel`;\n- Add tests that reproduce described behavior;\n- Enhance `RequestResponseCloseHandlerTest` to verify that the `CloseEvent`\nis delivered as soon as `notifyConnected` is invoked;\n\nResult:\n\nServer initializes request-response processing and responds to the already\nreceived request.", "committedDate": "2020-10-13T21:47:58Z", "type": "commit"}, {"oid": "875237b539ff6ccb74c2b4d5ac8ab5234ba765e3", "url": "https://github.com/apple/servicetalk/commit/875237b539ff6ccb74c2b4d5ac8ab5234ba765e3", "message": "Merge remote-tracking branch 'upstream/main' into do-not-abort-server-write", "committedDate": "2020-10-13T23:06:24Z", "type": "commit"}, {"oid": "5a1fc4028db5e44ab6ea7192c28f8df7595d9875", "url": "https://github.com/apple/servicetalk/commit/5a1fc4028db5e44ab6ea7192c28f8df7595d9875", "message": "Do not expect that eventHandler is invoked on the EventLoop", "committedDate": "2020-10-14T00:04:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMzMzk5Mg==", "url": "https://github.com/apple/servicetalk/pull/1177#discussion_r504333992", "bodyText": "intentional? debugging?", "author": "Scottmitch", "createdAt": "2020-10-14T00:35:08Z", "path": "servicetalk-http-netty/src/test/java/io/servicetalk/http/netty/ServerRespondsOnClosingTest.java", "diffHunk": "@@ -220,11 +249,11 @@ private void verifyResponse(String requestPath) {\n \n     private void respondWithFIN() {\n         assertThat(\"Server did not shutdown output\", channel.isOutputShutdown(), is(true));\n-        channel.shutdownInput();    // simulate FIN from the client\n+        channel.shutdownInput().syncUninterruptibly();    // simulate FIN from the client\n     }\n \n     private void assertServerConnectionClosed() throws Exception {\n-        serverConnection.onClose().toFuture().get();\n+        // serverConnection.onClose().toFuture().get();", "originalCommit": "5a1fc4028db5e44ab6ea7192c28f8df7595d9875", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM1NjU4NA==", "url": "https://github.com/apple/servicetalk/pull/1177#discussion_r504356584", "bodyText": "debugging \ud83e\udd26", "author": "idelpivnitskiy", "createdAt": "2020-10-14T02:04:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMzMzk5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMzNTk1OA==", "url": "https://github.com/apple/servicetalk/pull/1177#discussion_r504335958", "bodyText": "this maybe called on a non-EventLoop thread, and it doesn't look like RequestResponseCloseHandler supports this. All other methods on the CloseHandler can only be invoked on the EventLoop thread, can we stay consistent with this approach?", "author": "Scottmitch", "createdAt": "2020-10-14T00:42:24Z", "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/DefaultNettyConnection.java", "diffHunk": "@@ -384,6 +384,7 @@ protected void handleSubscribe(Subscriber completableSubscriber) {\n                 WriteStreamSubscriber subscriber = new WriteStreamSubscriber(channel(), demandEstimatorSupplier.get(),\n                         completableSubscriber, closeHandler, writeObserver);\n                 if (failIfWriteActive(subscriber, completableSubscriber)) {\n+                    closeHandler.notifyConnected(channel());", "originalCommit": "5a1fc4028db5e44ab6ea7192c28f8df7595d9875", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM1MzA3MQ==", "url": "https://github.com/apple/servicetalk/pull/1177#discussion_r504353071", "bodyText": "hm, good catch! Internal state of RequestResponseCloseHandler may be broken. Is it ok if we schedule invocation of closeHandler.notifyConnected(channel()) on the event loop from here?\nAlso, wdyt about an alternative approach proposed in #1156?", "author": "idelpivnitskiy", "createdAt": "2020-10-14T01:49:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMzNTk1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAwMTQxOQ==", "url": "https://github.com/apple/servicetalk/pull/1177#discussion_r505001419", "bodyText": "Discussed offline, will temporarily apply the approach from #1156 and we will do follow-up work for DefaultNettyConnection to improve its internal state.", "author": "idelpivnitskiy", "createdAt": "2020-10-14T21:59:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMzNTk1OA=="}], "type": "inlineReview"}, {"oid": "9775502350ab6120345bfd35810866054926b2f4", "url": "https://github.com/apple/servicetalk/commit/9775502350ab6120345bfd35810866054926b2f4", "message": "Uncomment serverConnection.onClose().toFuture().get()", "committedDate": "2020-10-14T02:03:46Z", "type": "commit"}, {"oid": "af83752f281f4b62433380b0bf02975a4294454c", "url": "https://github.com/apple/servicetalk/commit/af83752f281f4b62433380b0bf02975a4294454c", "message": "Merge remote-tracking branch 'upstream/main' into do-not-abort-server-write", "committedDate": "2020-10-14T06:00:27Z", "type": "commit"}, {"oid": "eb5c9a2c8c89afe6f7b5630fb1e3fa7f3d2603ba", "url": "https://github.com/apple/servicetalk/commit/eb5c9a2c8c89afe6f7b5630fb1e3fa7f3d2603ba", "message": "Call notifyConnected on the EventLoop", "committedDate": "2020-10-14T06:07:17Z", "type": "commit"}, {"oid": "a64315fcc2b284481ba7d7bb9345e874602e9beb", "url": "https://github.com/apple/servicetalk/commit/a64315fcc2b284481ba7d7bb9345e874602e9beb", "message": "Revert the approach with notifyConnected", "committedDate": "2020-10-14T20:40:22Z", "type": "commit"}, {"oid": "3bbb729fb0d692872ac75e25cff2f06c6ced5044", "url": "https://github.com/apple/servicetalk/commit/3bbb729fb0d692872ac75e25cff2f06c6ced5044", "message": "Apply isClient approach from #1156", "committedDate": "2020-10-14T20:58:42Z", "type": "commit"}]}