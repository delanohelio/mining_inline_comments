{"pr_number": 1150, "pr_title": "Clear AsyncContext before invoking HttpService", "pr_createdAt": "2020-09-11T21:37:28Z", "pr_url": "https://github.com/apple/servicetalk/pull/1150", "timeline": [{"oid": "159008b0bb55b04a361a8a5e7b11c279257e5ab7", "url": "https://github.com/apple/servicetalk/commit/159008b0bb55b04a361a8a5e7b11c279257e5ab7", "message": "Clear AsyncContext before invoking HttpService\n\nMotivation:\nEach HttpService should get an empty AsyncContext. This will happen if\nthe AsyncContext at the root level is empty, which it typically is.\nHowever it is possible that the AsyncContext maybe modified before this\ntime (e.g. MDC) and if this happens that may result in shared state\nbetween requests (if values are modifiable).\n\nModification:\n- Wrap each service in a filter that explicitly clears the AsyncContext\nbefore executing the user's service filter chain\n\nResult:\nAsyncContext is empty when the user service/filter chain is invoked.", "committedDate": "2020-09-11T21:34:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMxMTUyOQ==", "url": "https://github.com/apple/servicetalk/pull/1150#discussion_r487311529", "bodyText": "This can be simplified to:\nreturn succeeded(factory.internalServerError().payloadBody(from(current.toString()), textSerializer()));", "author": "idelpivnitskiy", "createdAt": "2020-09-11T22:06:32Z", "path": "servicetalk-http-netty/src/test/java/io/servicetalk/http/netty/StreamingHttpServiceAsyncContextTest.java", "diffHunk": "@@ -84,15 +87,24 @@ protected ServerContext serverWithEmptyAsyncContextService(HttpServerBuilder ser\n     }\n \n     private static StreamingHttpService newEmptyAsyncContextService() {\n+        // The service should get an empty AsyncContext regardless of what is done outside the service.\n+        // There are utilities that may be accessed in a static context or before service initialization that\n+        // shouldn't pollute the service's AsyncContext.\n+        AsyncContext.current().put(K1, \"value\");\n+\n         return (ctx, request, factory) -> {\n             request.payloadBodyAndTrailers().ignoreElements().subscribe();\n \n-            if (!AsyncContext.isEmpty()) {\n-                return succeeded(factory.internalServerError());\n+            AsyncContextMap current = AsyncContext.current();\n+            if (!current.isEmpty()) {\n+                StreamingHttpResponse response = factory.internalServerError();\n+                return succeeded(response.payloadBody(textSerializer()\n+                        .serialize(response.headers(), from(current.toString()),\n+                                ctx.executionContext().bufferAllocator())));", "originalCommit": "159008b0bb55b04a361a8a5e7b11c279257e5ab7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMxMjE0OA==", "url": "https://github.com/apple/servicetalk/pull/1150#discussion_r487312148", "bodyText": "Consider testing that <K1, \"value\"> is still present for the main thread after server started and the request complete.", "author": "idelpivnitskiy", "createdAt": "2020-09-11T22:08:32Z", "path": "servicetalk-http-netty/src/test/java/io/servicetalk/http/netty/StreamingHttpServiceAsyncContextTest.java", "diffHunk": "@@ -84,15 +87,24 @@ protected ServerContext serverWithEmptyAsyncContextService(HttpServerBuilder ser\n     }\n \n     private static StreamingHttpService newEmptyAsyncContextService() {\n+        // The service should get an empty AsyncContext regardless of what is done outside the service.\n+        // There are utilities that may be accessed in a static context or before service initialization that\n+        // shouldn't pollute the service's AsyncContext.\n+        AsyncContext.current().put(K1, \"value\");", "originalCommit": "159008b0bb55b04a361a8a5e7b11c279257e5ab7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f56e149b9d435123613cdbad0a90aa48f405f1dc", "url": "https://github.com/apple/servicetalk/commit/f56e149b9d435123613cdbad0a90aa48f405f1dc", "message": "review comments", "committedDate": "2020-09-11T22:15:07Z", "type": "commit"}]}