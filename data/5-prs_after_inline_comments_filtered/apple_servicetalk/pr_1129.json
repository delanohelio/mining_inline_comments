{"pr_number": 1129, "pr_title": "Propagate `SecurityHandshakeObserver` without channel attribute", "pr_createdAt": "2020-08-19T00:31:34Z", "pr_url": "https://github.com/apple/servicetalk/pull/1129", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzMzMxMA==", "url": "https://github.com/apple/servicetalk/pull/1129#discussion_r474133310", "bodyText": "Debugging leftover?", "author": "NiteshKant", "createdAt": "2020-08-20T16:49:48Z", "path": "servicetalk-http-netty/src/test/java/io/servicetalk/http/netty/HttpsProxyTest.java", "diffHunk": "@@ -84,7 +83,11 @@ public void tearDown() throws Exception {\n \n     static void safeClose(@Nullable AutoCloseable closeable) {\n         if (closeable != null) {\n-            closeAndReThrowUnchecked(closeable);\n+            try {\n+                closeable.close();\n+            } catch (Exception e) {\n+                e.printStackTrace();", "originalCommit": "f1d53b46509f53b4ba82b7bae07e604991fbb924", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE1MTMyMw==", "url": "https://github.com/apple/servicetalk/pull/1129#discussion_r474151323", "bodyText": "A negative of sending an event is that there is no acknowledgment of receipt which makes debugging harder.\nAn alternative is to follow what we do for DeferSslHandler => lookup the handler and register interest for receiving the observer. The negative is more public API (internal so arguably low) but gives a more determinsitic behavior.", "author": "NiteshKant", "createdAt": "2020-08-20T17:22:16Z", "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/DefaultNettyConnection.java", "diffHunk": "@@ -672,7 +680,16 @@ public void channelInactive(ChannelHandlerContext ctx) {\n         }\n \n         private void doChannelActive(ChannelHandlerContext ctx) {\n+            if (active) {\n+                return;\n+            }\n+            active = true;\n+\n             if (waitForSslHandshake) {\n+                if (observer != null) {\n+                    // Notify ConnectionObserverHandler that we are ready to receive SecurityHandshakeObserver instance\n+                    ctx.pipeline().fireUserEventTriggered(WaitingForHandshakeCompletionEvent.INSTANCE);", "originalCommit": "f1d53b46509f53b4ba82b7bae07e604991fbb924", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMwMTgwMw==", "url": "https://github.com/apple/servicetalk/pull/1129#discussion_r474301803", "bodyText": "Good suggestion! Everything is pkg-private without public exposure \ud83c\udf89", "author": "idelpivnitskiy", "createdAt": "2020-08-20T22:14:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE1MTMyMw=="}], "type": "inlineReview"}, {"oid": "02f9d22817ac2d7cbf20edda762c14db66a465a8", "url": "https://github.com/apple/servicetalk/commit/02f9d22817ac2d7cbf20edda762c14db66a465a8", "message": "Propagate `SecurityHandshakeObserver` without channel attribute\n\nMotivation:\n\nUsage of Channel's attributes increase a shared state of the `Channel`.\n`SecurityHandshakeObserver` can be propagated without using it.\n\nModifications:\n\n- Introduce `WaitingForHandshakeCompletionEvent` that is used to notify\n`ConnectionObserverHandler` that the last handler is initialized and\nready to receive `SecurityHandshakeObserver` instance;\n- Propagate `SecurityHandshakeObserver` as user event through the pipeline;\n- Add `SecurityHandshakeObserverTest` to verify that\n`SecurityHandshakeObserver` is working with different configurations:\nHTTP/1.1, HTTP/2, ALPN, secure proxy tunnel;\n- Improve `TestServiceStreaming` to echo content-type header;\n\nResult:\n\nLess state on the `Channel` instance.", "committedDate": "2020-08-20T21:06:01Z", "type": "commit"}, {"oid": "28901703beecf24bac3f66161bb803ad8a2c9664", "url": "https://github.com/apple/servicetalk/commit/28901703beecf24bac3f66161bb803ad8a2c9664", "message": "Uncomment timeout rule", "committedDate": "2020-08-20T21:06:01Z", "type": "commit"}, {"oid": "2d2d15ea9d20e48b47c336ff99176ea0431eabf2", "url": "https://github.com/apple/servicetalk/commit/2d2d15ea9d20e48b47c336ff99176ea0431eabf2", "message": "Look up for a handler to get access to SecurityHandshakeObserver", "committedDate": "2020-08-20T22:11:05Z", "type": "commit"}, {"oid": "2d2d15ea9d20e48b47c336ff99176ea0431eabf2", "url": "https://github.com/apple/servicetalk/commit/2d2d15ea9d20e48b47c336ff99176ea0431eabf2", "message": "Look up for a handler to get access to SecurityHandshakeObserver", "committedDate": "2020-08-20T22:11:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzMzE0NA==", "url": "https://github.com/apple/servicetalk/pull/1129#discussion_r474333144", "bodyText": "Log at warn if shouldReport is true?", "author": "NiteshKant", "createdAt": "2020-08-20T23:54:23Z", "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/NettyPipelineSslUtils.java", "diffHunk": "@@ -54,28 +52,29 @@ public static boolean isSslEnabled(ChannelPipeline pipeline) {\n      * @param pipeline the {@link ChannelPipeline} which contains handler containing the {@link SSLSession}.\n      * @param sslEvent the event indicating a SSL/TLS handshake completed.\n      * @param failureConsumer invoked if a failure is encountered.\n+     * @param shouldReport {@code true} if the handshake status should be reported to {@link SecurityHandshakeObserver}.\n      * @return The {@link SSLSession} or {@code null} if none can be found.\n      */\n     @Nullable\n     public static SSLSession extractSslSessionAndReport(ChannelPipeline pipeline,\n                                                         SslHandshakeCompletionEvent sslEvent,\n-                                                        Consumer<Throwable> failureConsumer) {\n-        final Channel channel = pipeline.channel();\n-        final SecurityHandshakeObserver securityObserver = channel.attr(SECURITY_HANDSHAKE_OBSERVER).get();\n+                                                        Consumer<Throwable> failureConsumer,\n+                                                        boolean shouldReport) {\n+        final SecurityHandshakeObserver observer = shouldReport ? handshakeObserver(pipeline) : null;\n         if (sslEvent.isSuccess()) {\n             final SslHandler sslHandler = pipeline.get(SslHandler.class);\n             if (sslHandler != null) {\n                 final SSLSession session = sslHandler.engine().getSession();\n-                if (securityObserver != null) {\n-                    securityObserver.handshakeComplete(session);\n+                if (observer != null) {\n+                    observer.handshakeComplete(session);\n                 }", "originalCommit": "2d2d15ea9d20e48b47c336ff99176ea0431eabf2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM1OTY0Ng==", "url": "https://github.com/apple/servicetalk/pull/1129#discussion_r474359646", "bodyText": "The warn log is easy to miss. This is not expected to be caught by users, we should provide a guarantee that it never happens. I'm thinking about an assertion, but as we discussed offline we will avoid using null values. Therefore, shouldReport will go away in a follow-up.", "author": "idelpivnitskiy", "createdAt": "2020-08-21T01:35:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzMzE0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3OTg0NQ==", "url": "https://github.com/apple/servicetalk/pull/1129#discussion_r474379845", "bodyText": "Ok what I meant was that if we expect the observer to be present but it is not; is there something we need to do to bubble it up to the user?\nYes good to guarantee but bugs will make it hard to debug. Perhaps a good item to think about when using NOOP observers.", "author": "NiteshKant", "createdAt": "2020-08-21T02:53:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzMzE0NA=="}], "type": "inlineReview"}, {"oid": "76b0df1091684993cf5ec8fc6dae43055bf376cc", "url": "https://github.com/apple/servicetalk/commit/76b0df1091684993cf5ec8fc6dae43055bf376cc", "message": "fix javadoc issue", "committedDate": "2020-08-21T03:09:42Z", "type": "commit"}]}