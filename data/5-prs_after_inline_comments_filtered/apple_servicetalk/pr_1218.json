{"pr_number": 1218, "pr_title": "Publisher#flatMapMerge recover from mapped Publisher exception", "pr_createdAt": "2020-11-18T21:50:50Z", "pr_url": "https://github.com/apple/servicetalk/pull/1218", "timeline": [{"oid": "b6070af98f107fc45dfd548925c6241dc2449459", "url": "https://github.com/apple/servicetalk/commit/b6070af98f107fc45dfd548925c6241dc2449459", "message": "Publisher#flatMapMerge recover from mapped Publisher exception\n\nMotivation:\nPublisher#flatMapMerge does not attempt to recover from throwing in\nonNext from a mapped publisher. In this case we should attempt to\nreplenish demand incase there is a recoverWith or similar operator\napplied to the mapped publisher, or else we may deadlock.\n\nModifications:\n- FlatMapSubscriber should try to replenish demand even if onNext throws\nan exception\n\nResult:\nPublisher#flatMapMerge is compatible with recoverWith style operators on\nthe mapped publishers.", "committedDate": "2020-11-18T21:48:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUwMDgzOA==", "url": "https://github.com/apple/servicetalk/pull/1218#discussion_r526500838", "bodyText": "The ordering of events in this test is a bit confusing. results queue already has 21 before processor.onError(DELIBERATE_EXCEPTION) is invoked. Consider moving this check up if this is expected.\nWhy the concatenated cause is not delivered to mockSubscriber?", "author": "idelpivnitskiy", "createdAt": "2020-11-18T23:55:09Z", "path": "servicetalk-concurrent-api/src/test/java/io/servicetalk/concurrent/api/PublisherFlatMapMergeTest.java", "diffHunk": "@@ -96,6 +105,43 @@ public static void afterClass() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void mappedRecoverMakesProgress() throws Exception {\n+        @SuppressWarnings(\"unchecked\")\n+        Subscriber<Integer> mockSubscriber = mock(Subscriber.class);\n+        CountDownLatch latchOnSubscribe = new CountDownLatch(1);\n+        CountDownLatch latchOnError = new CountDownLatch(1);\n+        AtomicReference<Throwable> causeRef = new AtomicReference<>();\n+        BlockingQueue<Integer> results = new ArrayBlockingQueue<>(10);\n+        doAnswer(a -> {\n+            Subscription s = a.getArgument(0);\n+            s.request(4);\n+            latchOnSubscribe.countDown();\n+            return null;\n+        }).when(mockSubscriber).onSubscribe(any(Subscription.class));\n+        doAnswer(a -> {\n+            causeRef.set(a.getArgument(0));\n+            latchOnError.countDown();\n+            return null;\n+        }).when(mockSubscriber).onError(any());\n+        doAnswer(a -> {\n+            results.add(a.getArgument(0));\n+            throw new DeliberateException();\n+        }).when(mockSubscriber).onNext(any());\n+\n+        Processor<Integer, Integer> processor = newPublisherProcessor();\n+        toSource(fromSource(processor).flatMapMergeDelayError(i -> from(i + 10).recoverWith(cause ->\n+                from(i + 20).concat(failed(cause))))).subscribe(mockSubscriber);\n+\n+        latchOnSubscribe.await();\n+        processor.onNext(1);\n+        assertThat(results.take(), is(11));\n+        processor.onError(DELIBERATE_EXCEPTION);\n+        assertThat(results.take(), is(21));", "originalCommit": "b6070af98f107fc45dfd548925c6241dc2449459", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUwMTU0Ng==", "url": "https://github.com/apple/servicetalk/pull/1218#discussion_r526501546", "bodyText": "oh, bcz we delay error.", "author": "idelpivnitskiy", "createdAt": "2020-11-18T23:57:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUwMDgzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUwMzAwMw==", "url": "https://github.com/apple/servicetalk/pull/1218#discussion_r526503003", "bodyText": "WDYT about this ordering of events?\n        latchOnSubscribe.await();\n        processor.onNext(1);\n        assertThat(results.take(), is(11));\n        assertThat(results.take(), is(21));\n        assertThat(causeRef.get(), is(nullValue()));\n        processor.onComplete();\n        latchOnError.await();\n        final Throwable t = causeRef.get();\n        assertThat(t, is(instanceOf(CompositeException.class)));\n        assertThat(t.getCause(), is(DELIBERATE_EXCEPTION));", "author": "idelpivnitskiy", "createdAt": "2020-11-19T00:01:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUwMDgzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUwNjI3MA==", "url": "https://github.com/apple/servicetalk/pull/1218#discussion_r526506270", "bodyText": "I adjusted slightly but sgtm!", "author": "Scottmitch", "createdAt": "2020-11-19T00:10:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUwMDgzOA=="}], "type": "inlineReview"}, {"oid": "fabfdb777eb5f95fabb1b39833fca0ef3f112a69", "url": "https://github.com/apple/servicetalk/commit/fabfdb777eb5f95fabb1b39833fca0ef3f112a69", "message": "adjust test assertion/ordering", "committedDate": "2020-11-19T00:10:43Z", "type": "commit"}]}