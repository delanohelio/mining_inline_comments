{"pr_number": 1123, "pr_title": "Set the correct log level for wire logging and h2 frame logging", "pr_createdAt": "2020-08-12T01:58:28Z", "pr_url": "https://github.com/apple/servicetalk/pull/1123", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk2MTkxMQ==", "url": "https://github.com/apple/servicetalk/pull/1123#discussion_r468961911", "bodyText": "this API was designed to avoid exposing SL4J types in our public API, at the cost of multiple logger lookups (one in this method, one done by Netty via InternalLoggerFactory).", "author": "Scottmitch", "createdAt": "2020-08-12T02:00:46Z", "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/NettyLoggerUtils.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.transport.netty.internal;\n+\n+import io.netty.handler.logging.LogLevel;\n+import io.netty.util.internal.logging.InternalLogger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static io.netty.handler.logging.LogLevel.DEBUG;\n+import static io.netty.handler.logging.LogLevel.ERROR;\n+import static io.netty.handler.logging.LogLevel.INFO;\n+import static io.netty.handler.logging.LogLevel.TRACE;\n+import static io.netty.handler.logging.LogLevel.WARN;\n+\n+/**\n+ * Utility methods for {@link InternalLogger} related types.\n+ */\n+public final class NettyLoggerUtils {\n+    private NettyLoggerUtils() {\n+    }\n+\n+    /**\n+     * Translate the log level as determined by SL4J for the {@code loggerName} to Netty's {@link LogLevel} type.\n+     * @param loggerName The logger name to lookup.\n+     * @return Netty's {@link LogLevel} corresponding to the SL4J log level for {@code loggerName}.\n+     */\n+    public static LogLevel getNettyLogLevel(String loggerName) {", "originalCommit": "52a6888b755e441940913610228c3642b8e6aa44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwNjM1NQ==", "url": "https://github.com/apple/servicetalk/pull/1123#discussion_r469006355", "bodyText": "sounds good to me, should not harm at the build time", "author": "idelpivnitskiy", "createdAt": "2020-08-12T05:02:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk2MTkxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2Mzc0OQ==", "url": "https://github.com/apple/servicetalk/pull/1123#discussion_r469563749", "bodyText": "A behavior that is useful is to enable wire logging in code but disable it using logger levels. I think this will always enable wire logging if it is enabled in code, is that correct?", "author": "NiteshKant", "createdAt": "2020-08-12T21:42:49Z", "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/NettyLoggerUtils.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.transport.netty.internal;\n+\n+import io.netty.handler.logging.LogLevel;\n+import io.netty.util.internal.logging.InternalLogger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static io.netty.handler.logging.LogLevel.DEBUG;\n+import static io.netty.handler.logging.LogLevel.ERROR;\n+import static io.netty.handler.logging.LogLevel.INFO;\n+import static io.netty.handler.logging.LogLevel.TRACE;\n+import static io.netty.handler.logging.LogLevel.WARN;\n+\n+/**\n+ * Utility methods for {@link InternalLogger} related types.\n+ */\n+public final class NettyLoggerUtils {\n+    private NettyLoggerUtils() {\n+    }\n+\n+    /**\n+     * Translate the log level as determined by SL4J for the {@code loggerName} to Netty's {@link LogLevel} type.\n+     * @param loggerName The logger name to lookup.\n+     * @return Netty's {@link LogLevel} corresponding to the SL4J log level for {@code loggerName}.\n+     */\n+    public static LogLevel getNettyLogLevel(String loggerName) {", "originalCommit": "52a6888b755e441940913610228c3642b8e6aa44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU4NDE0MQ==", "url": "https://github.com/apple/servicetalk/pull/1123#discussion_r478584141", "bodyText": "Good question! Most of the logger implementations also support OFF that disables logging [1, 2] from the logger config. But we need to adjust getNettyLogLevel method to support it.\n\nhttps://logging.apache.org/log4j/2.x/log4j-api/apidocs/org/apache/logging/log4j/Level.html#OFF\nhttp://logback.qos.ch/apidocs/ch/qos/logback/classic/Level.html#OFF", "author": "idelpivnitskiy", "createdAt": "2020-08-27T17:33:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2Mzc0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYxMDc2NQ==", "url": "https://github.com/apple/servicetalk/pull/1123#discussion_r478610765", "bodyText": "The configuration can be modified to accommodate this, an appender can include a threshold level. I will enhance our test log4j2-test.xml to accommodate this.", "author": "Scottmitch", "createdAt": "2020-08-27T18:21:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2Mzc0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYyOTYwNw==", "url": "https://github.com/apple/servicetalk/pull/1123#discussion_r478629607", "bodyText": "I am not sure I am following the motivation now. Threshold filter is specific to log4j, so not ideal that we have to depend on that for the expected behavior.\nWhy not just let the user specify the level at which they want to log?", "author": "NiteshKant", "createdAt": "2020-08-27T18:56:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2Mzc0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk5OTQzNw==", "url": "https://github.com/apple/servicetalk/pull/1123#discussion_r485999437", "bodyText": "Threshold filter was one example of how this can be handled in configuration, setting the logging value to OFF is another example. Specifying the log level programmatically requires additional API surface area (e.g. log level API, propagation of log level) which seems redundant if the configuration has to be setup correctly to enable/disable the logger anyways. This change still allows for specifying the logger in builder code and disable it via config, which I think was your initial concern?", "author": "Scottmitch", "createdAt": "2020-09-10T00:51:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2Mzc0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU4NTA2Nw==", "url": "https://github.com/apple/servicetalk/pull/1123#discussion_r478585067", "bodyText": "As discussed in #1123 (comment) the logger config can disable logging. We should support it instead of throwing an exception.", "author": "idelpivnitskiy", "createdAt": "2020-08-27T17:35:06Z", "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/NettyLoggerUtils.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.transport.netty.internal;\n+\n+import io.netty.handler.logging.LogLevel;\n+import io.netty.util.internal.logging.InternalLogger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static io.netty.handler.logging.LogLevel.DEBUG;\n+import static io.netty.handler.logging.LogLevel.ERROR;\n+import static io.netty.handler.logging.LogLevel.INFO;\n+import static io.netty.handler.logging.LogLevel.TRACE;\n+import static io.netty.handler.logging.LogLevel.WARN;\n+\n+/**\n+ * Utility methods for {@link InternalLogger} related types.\n+ */\n+public final class NettyLoggerUtils {\n+    private NettyLoggerUtils() {\n+    }\n+\n+    /**\n+     * Translate the log level as determined by SL4J for the {@code loggerName} to Netty's {@link LogLevel} type.\n+     * @param loggerName The logger name to lookup.\n+     * @return Netty's {@link LogLevel} corresponding to the SL4J log level for {@code loggerName}.\n+     */\n+    public static LogLevel getNettyLogLevel(String loggerName) {\n+        final Logger logger = LoggerFactory.getLogger(loggerName);\n+        if (logger.isTraceEnabled()) {\n+            return TRACE;\n+        } else if (logger.isDebugEnabled()) {\n+            return DEBUG;\n+        } else if (logger.isInfoEnabled()) {\n+            return INFO;\n+        } else if (logger.isWarnEnabled()) {\n+            return WARN;\n+        } else if (logger.isErrorEnabled()) {\n+            return ERROR;\n+        }\n+        throw new IllegalArgumentException(\"unknown log level: \" + logger);", "originalCommit": "52a6888b755e441940913610228c3642b8e6aa44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYxNjA4MQ==", "url": "https://github.com/apple/servicetalk/pull/1123#discussion_r478616081", "bodyText": "good point, done.", "author": "Scottmitch", "createdAt": "2020-08-27T18:31:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU4NTA2Nw=="}], "type": "inlineReview"}, {"oid": "75c7ae70963172ab183889c3ce6d31e14b788779", "url": "https://github.com/apple/servicetalk/commit/75c7ae70963172ab183889c3ce6d31e14b788779", "message": "Set the correct log level for wire logging and h2 frame logging\n\nMotivation:\nWhen enableWireLogging and h2 frameLogger are set on the builder we\nalways log at TRACE level regardless of what level the logging\nconfiguration specifies. The h2 frameLogger has conditional logic which\nlimits the amount of data logged for levels less than TRACE, and it is\ngenerally unexpected to log at a different level than configured by the\nuser.\n\nModifications:\n- When Http2FrameLogger and LoggingHandler are created we should get the\nlog level from SL4J and pass the translated Netty LogLevel upon\nconstruction\n\nResult:\nDebug logging uses the same log level as configured by the user.", "committedDate": "2020-08-27T17:45:22Z", "type": "commit"}, {"oid": "8894e33beccddf27a5cf9ff384d4f8f41088efe0", "url": "https://github.com/apple/servicetalk/commit/8894e33beccddf27a5cf9ff384d4f8f41088efe0", "message": "modify logging config", "committedDate": "2020-08-27T18:21:47Z", "type": "commit"}, {"oid": "8894e33beccddf27a5cf9ff384d4f8f41088efe0", "url": "https://github.com/apple/servicetalk/commit/8894e33beccddf27a5cf9ff384d4f8f41088efe0", "message": "modify logging config", "committedDate": "2020-08-27T18:21:47Z", "type": "forcePushed"}, {"oid": "f6647588ad19b40194b4c0a88dfd0bbdfc26248a", "url": "https://github.com/apple/servicetalk/commit/f6647588ad19b40194b4c0a88dfd0bbdfc26248a", "message": "add support for unmapped LogLevels", "committedDate": "2020-08-27T18:30:55Z", "type": "commit"}, {"oid": "42dcd115214a266f69873d6f2a3cad5087048973", "url": "https://github.com/apple/servicetalk/commit/42dcd115214a266f69873d6f2a3cad5087048973", "message": "switch from ThresholdFilter to log level OFF", "committedDate": "2020-09-10T01:18:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4ODM2Ng==", "url": "https://github.com/apple/servicetalk/pull/1123#discussion_r486488366", "bodyText": "Just a suggestion; feel free to ignore.\nThis approach precludes dynamic log level manipulation for existing channels. I think we should always add the handler if user opts-in to it using the builder setting.", "author": "NiteshKant", "createdAt": "2020-09-10T16:46:27Z", "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/WireLoggingInitializer.java", "diffHunk": "@@ -34,11 +37,14 @@\n      * @param loggerName The name of the logger to log wire events.\n      */\n     public WireLoggingInitializer(final String loggerName) {\n-        loggingHandler = new LoggingHandler(loggerName, TRACE);\n+        LogLevel logLevel = getNettyLogLevel(loggerName);\n+        loggingHandler = logLevel != null ? new LoggingHandler(loggerName, logLevel) : null;", "originalCommit": "42dcd115214a266f69873d6f2a3cad5087048973", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjczMjU4NA==", "url": "https://github.com/apple/servicetalk/pull/1123#discussion_r486732584", "bodyText": "logLevel  == null will only if the logging level can't be mapped to a Netty LogLevel (e.g. \"OFF\"). The user's logging config can set the logging level set to a valid level (e.g. not \"OFF\") and use a filter to achieve the dynamic enable/disable of logs on pre-existing channels.", "author": "Scottmitch", "createdAt": "2020-09-11T02:13:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4ODM2Ng=="}], "type": "inlineReview"}]}