{"pr_number": 955, "pr_title": "Expose protocol name at `ConnectionContext` API", "pr_createdAt": "2020-03-03T21:10:40Z", "pr_url": "https://github.com/apple/servicetalk/pull/955", "timeline": [{"oid": "4b68b711214d834abec44cfbb992d218e9ce548e", "url": "https://github.com/apple/servicetalk/commit/4b68b711214d834abec44cfbb992d218e9ce548e", "message": "Expose protocol name at `ConnectionContext` API\n\nMotivation:\n\nUsers should have a way to determine which application level\nprotocol is used by each connection.\n\nModifications:\n\n- Add `ConnectionContext.protocol()` method;\n\nResult:\n\nUsers can understand the protocol used by each connection.", "committedDate": "2020-03-03T19:30:29Z", "type": "commit"}, {"oid": "adab7abd35f24a2f553f94e7bba43917859dfdac", "url": "https://github.com/apple/servicetalk/commit/adab7abd35f24a2f553f94e7bba43917859dfdac", "message": "Introduce `Protocol` and `HttpConnectionContext` interfaces", "committedDate": "2020-03-04T00:29:22Z", "type": "commit"}, {"oid": "2767eebba053272f9b196be4d29cdfbeea22cd15", "url": "https://github.com/apple/servicetalk/commit/2767eebba053272f9b196be4d29cdfbeea22cd15", "message": "Override Protocol impl for GrpcServiceContext", "committedDate": "2020-03-04T00:29:22Z", "type": "commit"}, {"oid": "c43201211896a2af557ab04f983cc51cb2b362ad", "url": "https://github.com/apple/servicetalk/commit/c43201211896a2af557ab04f983cc51cb2b362ad", "message": "Remove H2ToStH1Utils.HTTP_2_0 constant", "committedDate": "2020-03-04T00:36:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM3ODYyOA==", "url": "https://github.com/apple/servicetalk/pull/955#discussion_r387378628", "bodyText": "Should we make GrpcProtocol public? There is no additional info (like version or something else) except the name.", "author": "idelpivnitskiy", "createdAt": "2020-03-04T00:38:48Z", "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/DefaultGrpcServiceContext.java", "diffHunk": "@@ -64,6 +65,11 @@ public GrpcExecutionContext executionContext() {\n         return connectionContext.socketOption(option);\n     }\n \n+    @Override\n+    public Protocol protocol() {", "originalCommit": "2767eebba053272f9b196be4d29cdfbeea22cd15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1NDM3Mg==", "url": "https://github.com/apple/servicetalk/pull/955#discussion_r387854372", "bodyText": "As gRPC is a layered application protocol, I think it is valuable to provide the underlying protocol (HTTP/1/2/3) information. We can either nest Protocol:\nGrpcProtocol#httpProtocol()\nor just create top level constants: GrpcProtocol#GRPC_OVER_HTTP_1, GrpcProtocol#GRPC_OVER_HTTP_2, etc\nI have a slight preference for top-level constants.", "author": "NiteshKant", "createdAt": "2020-03-04T18:32:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM3ODYyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0MTg5MQ==", "url": "https://github.com/apple/servicetalk/pull/955#discussion_r387841891", "bodyText": "nit: static imports", "author": "NiteshKant", "createdAt": "2020-03-04T18:09:02Z", "path": "servicetalk-http-netty/src/test/java/io/servicetalk/http/netty/AlpnClientAndServerTest.java", "diffHunk": "@@ -88,19 +88,19 @@ public AlpnClientAndServerTest(List<String> serverSideProtocols,\n             \"serverAlpnProtocols={0}, clientAlpnProtocols={1}, expectedProtocol={2}, expectedExceptionType={3}\")\n     public static Collection<Object[]> clientExecutors() {\n         return asList(new Object[][] {\n-                {asList(HTTP_2, HTTP_1_1), asList(HTTP_2, HTTP_1_1), H2ToStH1Utils.HTTP_2_0, null},\n-                {asList(HTTP_2, HTTP_1_1), asList(HTTP_1_1, HTTP_2), H2ToStH1Utils.HTTP_2_0, null},\n-                {asList(HTTP_2, HTTP_1_1), singletonList(HTTP_2), H2ToStH1Utils.HTTP_2_0, null},\n+                {asList(HTTP_2, HTTP_1_1), asList(HTTP_2, HTTP_1_1), HttpProtocolVersion.HTTP_2_0, null},", "originalCommit": "c43201211896a2af557ab04f983cc51cb2b362ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5MjE5MQ==", "url": "https://github.com/apple/servicetalk/pull/955#discussion_r387892191", "bodyText": "I use static imports for AlpnIds for lists. Because of the name conflicts I can not also use static imports for HttpProtocolVersion.", "author": "idelpivnitskiy", "createdAt": "2020-03-04T19:41:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0MTg5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0MjUyNA==", "url": "https://github.com/apple/servicetalk/pull/955#discussion_r387842524", "bodyText": "that represents a network connection. => for a connection\nAs the context may not represent the entire connection.", "author": "NiteshKant", "createdAt": "2020-03-04T18:10:14Z", "path": "servicetalk-transport-api/src/main/java/io/servicetalk/transport/api/ConnectionContext.java", "diffHunk": "@@ -24,7 +24,7 @@\n import javax.net.ssl.SSLSession;\n \n /**\n- * A service execution context.\n+ * A context that represents a network connection.", "originalCommit": "c43201211896a2af557ab04f983cc51cb2b362ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0NTk0OA==", "url": "https://github.com/apple/servicetalk/pull/955#discussion_r387845948", "bodyText": "I would suggest moving this as an inner interface of ConnectionContext as this is for informational purpose returned from ConnectionContext.", "author": "NiteshKant", "createdAt": "2020-03-04T18:16:39Z", "path": "servicetalk-transport-api/src/main/java/io/servicetalk/transport/api/Protocol.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.transport.api;\n+\n+/**\n+ * Provides information about the network protocol.\n+ */\n+public interface Protocol {", "originalCommit": "c43201211896a2af557ab04f983cc51cb2b362ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0ODIwMg==", "url": "https://github.com/apple/servicetalk/pull/955#discussion_r387848202", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Get the protocol information for this {@link ConnectionContext}.\n          \n          \n            \n                 *\n          \n          \n            \n                 * @return the protocol information for this {@link ConnectionContext}.\n          \n          \n            \n                 * Returns the {@link Protocol} for this {@link ConnectionContext}.\n          \n          \n            \n                 *\n          \n          \n            \n                 * @return The {@link Protocol} for this {@link ConnectionContext}.", "author": "NiteshKant", "createdAt": "2020-03-04T18:20:52Z", "path": "servicetalk-transport-api/src/main/java/io/servicetalk/transport/api/ConnectionContext.java", "diffHunk": "@@ -72,4 +72,11 @@\n      */\n     @Nullable\n     <T> T socketOption(SocketOption<T> option);\n+\n+    /**\n+     * Get the protocol information for this {@link ConnectionContext}.\n+     *\n+     * @return the protocol information for this {@link ConnectionContext}.", "originalCommit": "c43201211896a2af557ab04f983cc51cb2b362ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0OTk5MQ==", "url": "https://github.com/apple/servicetalk/pull/955#discussion_r387849991", "bodyText": "nit: static import here and below for HttpClients.forSingleAddress", "author": "NiteshKant", "createdAt": "2020-03-04T18:24:09Z", "path": "servicetalk-http-netty/src/test/java/io/servicetalk/http/netty/ConnectionContextProtocolTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.concurrent.internal.ServiceTalkTestTimeout;\n+import io.servicetalk.http.api.BlockingHttpClient;\n+import io.servicetalk.http.api.BlockingHttpConnection;\n+import io.servicetalk.http.api.HttpProtocolConfig;\n+import io.servicetalk.http.api.HttpProtocolVersion;\n+import io.servicetalk.http.api.HttpServerBuilder;\n+import io.servicetalk.http.api.SingleAddressHttpClientBuilder;\n+import io.servicetalk.test.resources.DefaultTestCerts;\n+import io.servicetalk.transport.api.HostAndPort;\n+import io.servicetalk.transport.api.ServerContext;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+import java.net.InetSocketAddress;\n+\n+import static io.servicetalk.http.api.HttpSerializationProviders.textDeserializer;\n+import static io.servicetalk.http.api.HttpSerializationProviders.textSerializer;\n+import static io.servicetalk.http.netty.HttpProtocolConfigs.h1Default;\n+import static io.servicetalk.http.netty.HttpProtocolConfigs.h2Default;\n+import static io.servicetalk.transport.netty.internal.AddressUtils.localAddress;\n+import static io.servicetalk.transport.netty.internal.AddressUtils.serverHostAndPort;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+@RunWith(Parameterized.class)\n+public class ConnectionContextProtocolTest {\n+\n+    private enum Config {\n+\n+        HTTP_1_1(new HttpProtocolConfig[]{h1Default()}, false, HttpProtocolVersion.HTTP_1_1),\n+        HTTP_2_0(new HttpProtocolConfig[]{h2Default()}, false, HttpProtocolVersion.HTTP_2_0),\n+        SECURE_HTTP_1_1(new HttpProtocolConfig[]{h1Default()}, true, HttpProtocolVersion.HTTP_1_1),\n+        SECURE_HTTP_2_0(new HttpProtocolConfig[]{h2Default()}, true, HttpProtocolVersion.HTTP_2_0),\n+        ALPN_PREFER_HTTP_1_1(new HttpProtocolConfig[]{h1Default(), h2Default()}, true,\n+                HttpProtocolVersion.HTTP_1_1),\n+        ALPN_PREFER_HTTP_2_0(new HttpProtocolConfig[]{h2Default(), h1Default()}, true,\n+                HttpProtocolVersion.HTTP_2_0);\n+\n+        final HttpProtocolConfig[] protocols;\n+        final boolean secure;\n+        final HttpProtocolVersion expectedProtocol;\n+\n+        Config(HttpProtocolConfig[] protocols, boolean secure, HttpProtocolVersion expectedProtocol) {\n+            this.protocols = protocols;\n+            this.secure = secure;\n+            this.expectedProtocol = expectedProtocol;\n+        }\n+    }\n+\n+    @Rule\n+    public final Timeout timeout = new ServiceTalkTestTimeout();\n+\n+    private final Config config;\n+\n+    public ConnectionContextProtocolTest(Config config) {\n+        this.config = config;\n+    }\n+\n+    @Parameters(name = \"config={0}\")\n+    public static Object[] data() {\n+        return Config.values();\n+    }\n+\n+    @Test\n+    public void testProtocol() throws Exception {\n+        try (ServerContext serverContext = startServer(config);\n+             BlockingHttpClient client = newClient(serverContext, config);\n+             BlockingHttpConnection connection = client.reserveConnection(client.get(\"/\"))) {\n+\n+            assertThat(\"Client-side connection protocol does not match expected value\",\n+                    connection.connectionContext().protocol(), equalTo(config.expectedProtocol));\n+            assertThat(\"Server-side connection protocol does not match expected value\",\n+                    connection.request(connection.get(\"/\")).payloadBody(textDeserializer()),\n+                    equalTo(config.expectedProtocol.name()));\n+        }\n+    }\n+\n+    private static <T> ServerContext startServer(Config config) throws Exception {\n+        final HttpServerBuilder builder = HttpServers.forAddress(localAddress(0))", "originalCommit": "c43201211896a2af557ab04f983cc51cb2b362ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5NDI4OQ==", "url": "https://github.com/apple/servicetalk/pull/955#discussion_r387894289", "bodyText": "We do not use static imports for HttpServers/HttpClients in tests. I will keep it consistent with other test classes.", "author": "idelpivnitskiy", "createdAt": "2020-03-04T19:45:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0OTk5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1NjI2MQ==", "url": "https://github.com/apple/servicetalk/pull/955#discussion_r387856261", "bodyText": "As this connection does not implement any protocol per se, I would suggest:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param protocol The {@link Protocol} this {@link DefaultNettyConnection} implements.\n          \n          \n            \n                 * @param protocol {@link Protocol} for the returned {@link DefaultNettyConnection}.", "author": "NiteshKant", "createdAt": "2020-03-04T18:35:44Z", "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/DefaultNettyConnection.java", "diffHunk": "@@ -237,6 +231,7 @@ private DefaultNettyConnection(Channel channel, BufferAllocator allocator, Execu\n      * @param idleTimeoutMs Value for {@link ServiceTalkSocketOptions#IDLE_TIMEOUT IDLE_TIMEOUT} socket option.\n      * @param initializer Synchronously initializes the pipeline upon subscribe.\n      * @param executionStrategy {@link ExecutionStrategy} to use for this connection.\n+     * @param protocol The {@link Protocol} this {@link DefaultNettyConnection} implements.", "originalCommit": "c43201211896a2af557ab04f983cc51cb2b362ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1OTY1Mg==", "url": "https://github.com/apple/servicetalk/pull/955#discussion_r387859652", "bodyText": "Just modify showPipeline() to take Protocol now?", "author": "NiteshKant", "createdAt": "2020-03-04T18:42:11Z", "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/H2ClientParentConnectionContext.java", "diffHunk": "@@ -127,7 +129,7 @@ protected void handleSubscribe(final Subscriber<? super H2ClientParentConnection\n                 // callbacks that interact with the subscriber.\n                 pipeline.addLast(parentChannelInitializer);\n             }\n-        }, \"HTTP/2.0\", channel);\n+        }, HTTP_2_0.toString(), channel);", "originalCommit": "c43201211896a2af557ab04f983cc51cb2b362ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg2MDM4MA==", "url": "https://github.com/apple/servicetalk/pull/955#discussion_r387860380", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * {@link ConnectionContext} specific to HTTP.\n          \n          \n            \n             * {@link ConnectionContext} for HTTP.", "author": "NiteshKant", "createdAt": "2020-03-04T18:43:30Z", "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/HttpConnectionContext.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.api;\n+\n+import io.servicetalk.transport.api.ConnectionContext;\n+\n+/**\n+ * {@link ConnectionContext} specific to HTTP.", "originalCommit": "c43201211896a2af557ab04f983cc51cb2b362ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1b54e263dd1439ddbdd6cac300d76cdb04616c46", "url": "https://github.com/apple/servicetalk/commit/1b54e263dd1439ddbdd6cac300d76cdb04616c46", "message": "Address comments", "committedDate": "2020-03-04T19:57:32Z", "type": "commit"}, {"oid": "c3e0e9e99388c2cb3e2b6ff975a5290b21cb8e35", "url": "https://github.com/apple/servicetalk/commit/c3e0e9e99388c2cb3e2b6ff975a5290b21cb8e35", "message": "Introduce HttpProtocol and GrpcProtocol interfaces", "committedDate": "2020-03-05T00:57:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQzODMxNA==", "url": "https://github.com/apple/servicetalk/pull/955#discussion_r388438314", "bodyText": "Also validate httpProtocol() here?", "author": "NiteshKant", "createdAt": "2020-03-05T17:12:28Z", "path": "servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/netty/GrpcServiceContextTest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.grpc.netty;\n+\n+import io.servicetalk.concurrent.BlockingIterable;\n+import io.servicetalk.concurrent.BlockingIterator;\n+import io.servicetalk.concurrent.api.Publisher;\n+import io.servicetalk.concurrent.api.Single;\n+import io.servicetalk.concurrent.internal.ServiceTalkTestTimeout;\n+import io.servicetalk.grpc.api.GrpcPayloadWriter;\n+import io.servicetalk.grpc.api.GrpcServiceContext;\n+import io.servicetalk.grpc.netty.TesterProto.TestRequest;\n+import io.servicetalk.grpc.netty.TesterProto.TestResponse;\n+import io.servicetalk.grpc.netty.TesterProto.Tester.BlockingTesterClient;\n+import io.servicetalk.grpc.netty.TesterProto.Tester.BlockingTesterService;\n+import io.servicetalk.grpc.netty.TesterProto.Tester.ClientFactory;\n+import io.servicetalk.grpc.netty.TesterProto.Tester.ServiceFactory;\n+import io.servicetalk.grpc.netty.TesterProto.Tester.TesterService;\n+import io.servicetalk.transport.api.ServerContext;\n+\n+import org.junit.After;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.api.Publisher.from;\n+import static io.servicetalk.concurrent.api.Single.succeeded;\n+import static io.servicetalk.transport.netty.internal.AddressUtils.localAddress;\n+import static io.servicetalk.transport.netty.internal.AddressUtils.serverHostAndPort;\n+import static java.util.Collections.singleton;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+@RunWith(Parameterized.class)\n+public class GrpcServiceContextTest {\n+\n+    private static final String EXPECTED_PROTOCOL_NAME = \"gRPC\";\n+\n+    @Rule\n+    public final Timeout timeout = new ServiceTalkTestTimeout();\n+\n+    private final ServerContext serverContext;\n+    private final BlockingTesterClient client;\n+\n+    public GrpcServiceContextTest(boolean streamingService) throws Exception {\n+        serverContext = GrpcServers.forAddress(localAddress(0)).listenAndAwait(streamingService ?\n+                new ServiceFactory(new TesterServiceImpl()) :\n+                new ServiceFactory(new BlockingTesterServiceImpl()));\n+\n+        client = GrpcClients.forAddress(serverHostAndPort(serverContext)).buildBlocking(new ClientFactory());\n+    }\n+\n+    @Parameters(name = \"streamingService={0}\")\n+    public static Object[] params() {\n+        return new Object[]{true, false};\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        try {\n+            client.close();\n+        } finally {\n+            serverContext.close();\n+        }\n+    }\n+\n+    @Test\n+    public void testAggregated() throws Exception {\n+        assertResponse(client.test(newRequest()));\n+    }\n+\n+    @Test\n+    public void testRequestStream() throws Exception {\n+        assertResponse(client.testRequestStream(singleton(newRequest())));\n+    }\n+\n+    @Test\n+    public void testBiDiStream() throws Exception {\n+        try (BlockingIterator<TestResponse> iterator = client.testBiDiStream(singleton(newRequest())).iterator()) {\n+            assertResponse(iterator.next());\n+            assertThat(iterator.hasNext(), is(false));\n+        }\n+    }\n+\n+    @Test\n+    public void testResponseStream() throws Exception {\n+        try (BlockingIterator<TestResponse> iterator = client.testResponseStream(newRequest()).iterator()) {\n+            assertResponse(iterator.next());\n+            assertThat(iterator.hasNext(), is(false));\n+        }\n+    }\n+\n+    private static void assertResponse(@Nullable TestResponse response) {\n+        assertThat(response, is(notNullValue()));\n+        assertThat(response.getMessage(), equalTo(EXPECTED_PROTOCOL_NAME));", "originalCommit": "c3e0e9e99388c2cb3e2b6ff975a5290b21cb8e35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ac6cdabf388dae95ccc414a9f91199ebc9e3b37f", "url": "https://github.com/apple/servicetalk/commit/ac6cdabf388dae95ccc414a9f91199ebc9e3b37f", "message": "Test HttpProtocol value inside GrpcProtocol", "committedDate": "2020-03-05T17:55:43Z", "type": "commit"}, {"oid": "7984073d4d23db011757acdf53952d4f36eff5cc", "url": "https://github.com/apple/servicetalk/commit/7984073d4d23db011757acdf53952d4f36eff5cc", "message": "Return HttpConnectionContext from http-api", "committedDate": "2020-03-05T22:46:39Z", "type": "commit"}]}