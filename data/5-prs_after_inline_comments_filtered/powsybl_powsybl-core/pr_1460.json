{"pr_number": 1460, "pr_title": "Psse parser by field", "pr_createdAt": "2020-09-05T15:55:24Z", "pr_url": "https://github.com/powsybl/powsybl-core/pull/1460", "timeline": [{"oid": "a8fbee8c3d0355efb30cc8d2d84af2f971d365cd", "url": "https://github.com/powsybl/powsybl-core/commit/a8fbee8c3d0355efb30cc8d2d84af2f971d365cd", "message": "Parser by fields. Read fields. Support whitespace delimiter.\n\nSigned-off-by: Jos\u00e9 Antonio Marqu\u00e9s <marquesja@aia.es>", "committedDate": "2020-07-06T07:49:48Z", "type": "commit"}, {"oid": "62931aebcb3ec8a332deb8185e236355f9f7e83e", "url": "https://github.com/powsybl/powsybl-core/commit/62931aebcb3ec8a332deb8185e236355f9f7e83e", "message": "Merge branch 'master' into psse_parserByField\n\nSigned-off-by: Jos\u00e9 Antonio Marqu\u00e9s <marquesja@aia.es>\n\n# Conflicts:\n#\tpsse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "committedDate": "2020-07-07T22:05:27Z", "type": "commit"}, {"oid": "d0553714036fd1838244530677b4276437a12391", "url": "https://github.com/powsybl/powsybl-core/commit/d0553714036fd1838244530677b4276437a12391", "message": "Delete duplicated code\n\nSigned-off-by: Jos\u00e9 Antonio Marqu\u00e9s <marquesja@aia.es>", "committedDate": "2020-07-07T22:29:03Z", "type": "commit"}, {"oid": "0fc583d02b7653c81291f81238cc3b1328432769", "url": "https://github.com/powsybl/powsybl-core/commit/0fc583d02b7653c81291f81238cc3b1328432769", "message": "Merge branch 'master' into psse_parserByField\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-07-13T11:57:35Z", "type": "commit"}, {"oid": "e7e786082816f26b537ec9e283261436dce05020", "url": "https://github.com/powsybl/powsybl-core/commit/e7e786082816f26b537ec9e283261436dce05020", "message": "Add unitary tests\n\nSigned-off-by: Jos\u00e9 Antonio Marqu\u00e9s <marquesja@aia.es>", "committedDate": "2020-07-17T06:05:05Z", "type": "commit"}, {"oid": "b4a8d74686e3d22b660ac94f62e8831fa7f6db4d", "url": "https://github.com/powsybl/powsybl-core/commit/b4a8d74686e3d22b660ac94f62e8831fa7f6db4d", "message": "Merge branch 'master' into psse_parserByField", "committedDate": "2020-07-19T18:07:38Z", "type": "commit"}, {"oid": "d5c8f6f353086e80fc030f2852b0dac61a804dc1", "url": "https://github.com/powsybl/powsybl-core/commit/d5c8f6f353086e80fc030f2852b0dac61a804dc1", "message": "Merge branch 'master' into psse_parserByField", "committedDate": "2020-07-26T15:30:17Z", "type": "commit"}, {"oid": "f773fa2745e23bd94502d45c629f8be41f348aef", "url": "https://github.com/powsybl/powsybl-core/commit/f773fa2745e23bd94502d45c629f8be41f348aef", "message": "Merge branch 'master' into psse_parserByField", "committedDate": "2020-07-30T00:59:59Z", "type": "commit"}, {"oid": "aacfde6c9677728ecc2bf936112b0d1cf73587f0", "url": "https://github.com/powsybl/powsybl-core/commit/aacfde6c9677728ecc2bf936112b0d1cf73587f0", "message": "Merge branch 'master' into psse_parserByField", "committedDate": "2020-08-04T14:33:11Z", "type": "commit"}, {"oid": "d6a5ac4bae9bdd4ef99b21aac1a80ac19f944699", "url": "https://github.com/powsybl/powsybl-core/commit/d6a5ac4bae9bdd4ef99b21aac1a80ac19f944699", "message": "Merge branch 'master' into psse_parserByField", "committedDate": "2020-08-29T16:35:07Z", "type": "commit"}, {"oid": "040885123ee6de4f18d9e8f70d993f05b0dd105a", "url": "https://github.com/powsybl/powsybl-core/commit/040885123ee6de4f18d9e8f70d993f05b0dd105a", "message": "Merge branch 'master' into psse_parserByField", "committedDate": "2020-09-03T16:45:57Z", "type": "commit"}, {"oid": "baaf176f20b03589071ddf93c7abdf2006469a5b", "url": "https://github.com/powsybl/powsybl-core/commit/baaf176f20b03589071ddf93c7abdf2006469a5b", "message": "Merge branch 'master' into psse_parserByField", "committedDate": "2020-09-05T14:39:10Z", "type": "commit"}, {"oid": "1bff9296bbc9f1e5a3e6af0d7d5bb5d5cbb93d08", "url": "https://github.com/powsybl/powsybl-core/commit/1bff9296bbc9f1e5a3e6af0d7d5bb5d5cbb93d08", "message": "Merge branch 'master' into psse_parserByField", "committedDate": "2020-10-26T11:27:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIyNzc3Mw==", "url": "https://github.com/powsybl/powsybl-core/pull/1460#discussion_r515227773", "bodyText": "As nothing is public is that class, maybe this class should also be private package", "author": "mathbagu", "createdAt": "2020-10-30T16:36:29Z", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/PsseContext.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model;\n+\n+/**\n+ *\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public class PsseContext {", "originalCommit": "1bff9296bbc9f1e5a3e6af0d7d5bb5d5cbb93d08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE3NjkwMQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1460#discussion_r516176901", "bodyText": "Done", "author": "marqueslanauja", "createdAt": "2020-11-02T18:33:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIyNzc3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIyOTg4NA==", "url": "https://github.com/powsybl/powsybl-core/pull/1460#discussion_r515229884", "bodyText": "Why don't you use AssertArrayEquals?\nYou can probably also use Arrays.equals if you want to use your logging method", "author": "mathbagu", "createdAt": "2020-10-30T16:40:09Z", "path": "psse/psse-model/src/test/java/com/powsybl/psse/model/PsseRawReaderTest.java", "diffHunk": "@@ -33,4 +36,88 @@ public void ieee14BusTest() throws IOException {\n             assertEquals(jsonRef, json);\n         }\n     }\n+\n+    @Test\n+    public void ieee14BusReadFieldsTest() throws IOException {\n+        try (BufferedReader reader = new BufferedReader(new InputStreamReader(getClass().getResourceAsStream(\"/IEEE_14_bus.raw\")))) {\n+            PsseContext context = new PsseContext();\n+            PsseRawModel rawData = new PsseRawReader().read(reader, context);\n+            assertNotNull(rawData);\n+\n+            String[] expectedCaseIdentificationDataReadFields = new String[] {\"ic\", \"sbase\", \"rev\", \"xfrrat\", \"nxfrat\", \"basfrq\", \"title1\", \"title2\"};\n+            String[] actualCaseIdentificationDataReadFields = context.getCaseIdentificationDataReadFields();\n+            assertTrue(compareReadFields(expectedCaseIdentificationDataReadFields, actualCaseIdentificationDataReadFields));\n+\n+            String[] expectedBusDataReadFields = new String[] {\"i\", \"name\", \"baskv\", \"ide\", \"area\", \"zone\", \"owner\", \"vm\", \"va\"};\n+            String[] actualBusDataReadFields = context.getBusDataReadFields();\n+            assertTrue(compareReadFields(expectedBusDataReadFields, actualBusDataReadFields));\n+\n+            String[] expectedLoadDataReadFields = new String[] {\"i\", \"id\", \"status\", \"area\", \"zone\", \"pl\", \"ql\", \"ip\", \"iq\", \"yp\", \"yq\", \"owner\", \"scale\"};\n+            String[] actualLoadDataReadFields = context.getLoadDataReadFields();\n+            assertTrue(compareReadFields(expectedLoadDataReadFields, actualLoadDataReadFields));\n+\n+            String[] expectedFixedBusShuntDataReadFields = new String[] {\"i\", \"id\", \"status\", \"gl\", \"bl\"};\n+            String[] actualFixedBusShuntDataReadFields = context.getFixedBusShuntDataReadFields();\n+            assertTrue(compareReadFields(expectedFixedBusShuntDataReadFields, actualFixedBusShuntDataReadFields));\n+\n+            String[] expectedGeneratorDataReadFields = new String[] {\"i\", \"id\", \"pg\", \"qg\", \"qt\", \"qb\", \"vs\", \"ireg\",\n+                \"mbase\", \"zr\", \"zx\", \"rt\", \"xt\", \"gtap\", \"stat\", \"rmpct\", \"pt\", \"pb\", \"o1\", \"f1\", \"o2\", \"f2\", \"o3\",\n+                \"f3\", \"o4\", \"f4\", \"wmod\", \"wpf\"};\n+            String[] actualGeneratorDataReadFields = context.getGeneratorDataReadFields();\n+            assertTrue(compareReadFields(expectedGeneratorDataReadFields, actualGeneratorDataReadFields));\n+\n+            String[] expectedNonTransformerBranchDataReadFields = new String[] {\"i\", \"j\", \"ckt\", \"r\", \"x\", \"b\",\n+                \"ratea\", \"rateb\", \"ratec\", \"gi\", \"bi\", \"gj\", \"bj\", \"st\", \"met\", \"len\", \"o1\", \"f1\", \"o2\", \"f2\", \"o3\",\n+                \"f3\", \"o4\", \"f4\"};\n+            String[] actualNonTransformerBranchDataReadFields = context.getNonTransformerBranchDataReadFields();\n+            assertTrue(compareReadFields(expectedNonTransformerBranchDataReadFields, actualNonTransformerBranchDataReadFields));\n+\n+            String[] expected2wTransformerDataReadFields = new String[] {\"i\", \"j\", \"k\", \"ckt\", \"cw\", \"cz\", \"cm\",\n+                \"mag1\", \"mag2\", \"nmetr\", \"name\", \"stat\", \"o1\", \"f1\", \"o2\", \"f2\", \"o3\", \"f3\", \"o4\", \"f4\", \"r12\", \"x12\", \"sbase12\"};\n+            String[] actual2wTransformerDataReadFields = context.get2wTransformerDataReadFields();\n+            assertTrue(compareReadFields(expected2wTransformerDataReadFields, actual2wTransformerDataReadFields));\n+\n+            String[] expected2wTransformerW1DataReadFields = new String[] {\"windv\", \"nomv\", \"ang\", \"rata\", \"ratb\",\n+                \"ratc\", \"cod\", \"cont\", \"rma\", \"rmi\", \"vma\", \"vmi\", \"ntp\", \"tab\", \"cr\", \"cx\"};\n+            String[] actual2wTransformerW1DataReadFields = context.get2wTransformerDataWinding1ReadFields();\n+            assertTrue(compareReadFields(expected2wTransformerW1DataReadFields, actual2wTransformerW1DataReadFields));\n+\n+            String[] expected2wTransformerW2DataReadFields = new String[] {\"windv\", \"nomv\"};\n+            String[] actual2wTransformerW2DataReadFields = context.get2wTransformerDataWinding2ReadFields();\n+            assertTrue(compareReadFields(expected2wTransformerW2DataReadFields, actual2wTransformerW2DataReadFields));\n+\n+            String[] expectedAreaInterchangeDataReadFields = new String[] {\"i\", \"isw\", \"pdes\", \"ptol\", \"arname\"};\n+            String[] actualAreaInterchangeDataReadFields = context.getAreaInterchangeDataReadFields();\n+            assertTrue(compareReadFields(expectedAreaInterchangeDataReadFields, actualAreaInterchangeDataReadFields));\n+\n+            String[] expectedZoneDataReadFields = new String[] {\"i\", \"zoname\"};\n+            String[] actualZoneDataReadFields = context.getZoneDataReadFields();\n+            assertTrue(compareReadFields(expectedZoneDataReadFields, actualZoneDataReadFields));\n+\n+            String[] expectedOwnerDataReadFields = new String[] {\"i\", \"owname\"};\n+            String[] actualOwnerDataReadFields = context.getOwnerDataReadFields();\n+            assertTrue(compareReadFields(expectedOwnerDataReadFields, actualOwnerDataReadFields));\n+        }\n+    }\n+\n+    private boolean compareReadFields(String[] expected, String[] actual) {", "originalCommit": "1bff9296bbc9f1e5a3e6af0d7d5bb5d5cbb93d08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE3NzAxNg==", "url": "https://github.com/powsybl/powsybl-core/pull/1460#discussion_r516177016", "bodyText": "Done", "author": "marqueslanauja", "createdAt": "2020-11-02T18:33:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIyOTg4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzMDUxMw==", "url": "https://github.com/powsybl/powsybl-core/pull/1460#discussion_r515230513", "bodyText": "Not sure that this should be public. If you make this method private, you don't have to check that reader is not null: this will be done by another public method", "author": "mathbagu", "createdAt": "2020-10-30T16:41:13Z", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/PsseRawReader.java", "diffHunk": "@@ -21,39 +23,255 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Objects;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n /**\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n  */\n public class PsseRawReader {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(PsseRawReader.class);\n \n-    private static String removeComment(String line) {\n-        int slashIndex = line.lastIndexOf('/');\n-        if (slashIndex == -1) {\n-            return line;\n+    public boolean checkCaseIdentification(BufferedReader reader) throws IOException {", "originalCommit": "1bff9296bbc9f1e5a3e6af0d7d5bb5d5cbb93d08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE4MjUzOQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1460#discussion_r516182539", "bodyText": "Now should be public. Next PR will refact and extend the validation process and at this moment I will try to change the visibility to private", "author": "marqueslanauja", "createdAt": "2020-11-02T18:44:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzMDUxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzMTMyOA==", "url": "https://github.com/powsybl/powsybl-core/pull/1460#discussion_r515231328", "bodyText": "Should we log the exception?", "author": "mathbagu", "createdAt": "2020-10-30T16:42:34Z", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/PsseRawReader.java", "diffHunk": "@@ -21,39 +23,255 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Objects;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n /**\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n  */\n public class PsseRawReader {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(PsseRawReader.class);\n \n-    private static String removeComment(String line) {\n-        int slashIndex = line.lastIndexOf('/');\n-        if (slashIndex == -1) {\n-            return line;\n+    public boolean checkCaseIdentification(BufferedReader reader) throws IOException {\n+        Objects.requireNonNull(reader);\n+\n+        // just check the first record if this file is in PSS/E format\n+        PsseCaseIdentification caseIdentification;\n+        try {\n+            caseIdentification = readCaseIdentificationData(reader);\n+        } catch (PsseException e) {\n+            return false; // invalid PSS/E content", "originalCommit": "1bff9296bbc9f1e5a3e6af0d7d5bb5d5cbb93d08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE4MjY2MA==", "url": "https://github.com/powsybl/powsybl-core/pull/1460#discussion_r516182660", "bodyText": "Done", "author": "marqueslanauja", "createdAt": "2020-11-02T18:44:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzMTMyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzMjQ1Mw==", "url": "https://github.com/powsybl/powsybl-core/pull/1460#discussion_r515232453", "bodyText": "I think we should at least log which assertion is not true, specially if the version is not supported.", "author": "mathbagu", "createdAt": "2020-10-30T16:44:23Z", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/PsseRawReader.java", "diffHunk": "@@ -21,39 +23,255 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Objects;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n /**\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n  */\n public class PsseRawReader {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(PsseRawReader.class);\n \n-    private static String removeComment(String line) {\n-        int slashIndex = line.lastIndexOf('/');\n-        if (slashIndex == -1) {\n-            return line;\n+    public boolean checkCaseIdentification(BufferedReader reader) throws IOException {\n+        Objects.requireNonNull(reader);\n+\n+        // just check the first record if this file is in PSS/E format\n+        PsseCaseIdentification caseIdentification;\n+        try {\n+            caseIdentification = readCaseIdentificationData(reader);\n+        } catch (PsseException e) {\n+            return false; // invalid PSS/E content\n         }\n-        return line.substring(0, slashIndex);\n+\n+        int ic = caseIdentification.getIc();\n+        double sbase = caseIdentification.getSbase();\n+        int rev = caseIdentification.getRev();\n+        double basfrq = caseIdentification.getBasfrq();\n+\n+        if (ic == 0 && sbase > 0. && rev <= PsseConstants.SUPPORTED_VERSION && basfrq > 0.) {\n+            return true;\n+        }\n+\n+        return false;", "originalCommit": "1bff9296bbc9f1e5a3e6af0d7d5bb5d5cbb93d08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE4MjgyNQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1460#discussion_r516182825", "bodyText": "Done", "author": "marqueslanauja", "createdAt": "2020-11-02T18:44:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzMjQ1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzMzAyMg==", "url": "https://github.com/powsybl/powsybl-core/pull/1460#discussion_r515233022", "bodyText": "String line = Objects.requireNonNull(readLineAndRemoveComment(reader));\n\nCan the readLineAndRemoveComment really return null?\nSame remark for all occurrences below", "author": "mathbagu", "createdAt": "2020-10-30T16:45:17Z", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/PsseRawReader.java", "diffHunk": "@@ -21,39 +23,255 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Objects;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n /**\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n  */\n public class PsseRawReader {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(PsseRawReader.class);\n \n-    private static String removeComment(String line) {\n-        int slashIndex = line.lastIndexOf('/');\n-        if (slashIndex == -1) {\n-            return line;\n+    public boolean checkCaseIdentification(BufferedReader reader) throws IOException {\n+        Objects.requireNonNull(reader);\n+\n+        // just check the first record if this file is in PSS/E format\n+        PsseCaseIdentification caseIdentification;\n+        try {\n+            caseIdentification = readCaseIdentificationData(reader);\n+        } catch (PsseException e) {\n+            return false; // invalid PSS/E content\n         }\n-        return line.substring(0, slashIndex);\n+\n+        int ic = caseIdentification.getIc();\n+        double sbase = caseIdentification.getSbase();\n+        int rev = caseIdentification.getRev();\n+        double basfrq = caseIdentification.getBasfrq();\n+\n+        if (ic == 0 && sbase > 0. && rev <= PsseConstants.SUPPORTED_VERSION && basfrq > 0.) {\n+            return true;\n+        }\n+\n+        return false;\n     }\n \n-    private static String readLineAndRemoveComment(BufferedReader reader) throws IOException {\n-        String line = reader.readLine();\n-        if (line == null) {\n-            return null;\n+    public PsseRawModel read(BufferedReader reader) throws IOException {\n+        PsseContext context = new PsseContext();\n+        return read(reader, context);\n+    }\n+\n+    public PsseRawModel read(BufferedReader reader, PsseContext context) throws IOException {\n+        Objects.requireNonNull(reader);\n+        Objects.requireNonNull(context);\n+\n+        PsseCaseIdentification caseIdentification = readCaseIdentificationData(reader, context);\n+        PsseRawModel model = new PsseRawModel(caseIdentification);\n+\n+        model.getBuses().addAll(readBusData(reader, context));\n+        model.getLoads().addAll(readLoadData(reader, context));\n+        model.getFixedShunts().addAll(readFixedBusShuntData(reader, context));\n+        model.getGenerators().addAll(readGeneratorData(reader, context));\n+        model.getNonTransformerBranches().addAll(readNonTransformerBranchData(reader, context));\n+        model.getTransformers().addAll(readTransformerData(reader, context));\n+        model.getAreas().addAll(readAreaInterchangeData(reader, context));\n+\n+        // 2-terminal DC data\n+        readRecordBlock(reader); // TODO\n+\n+        // voltage source converter data\n+        readRecordBlock(reader); // TODO\n+\n+        // impedance correction data\n+        readRecordBlock(reader); // TODO\n+\n+        // multi-terminal DC data\n+        readRecordBlock(reader); // TODO\n+\n+        // multi-section line data\n+        readRecordBlock(reader); // TODO\n+\n+        model.getZones().addAll(readZoneData(reader, context));\n+\n+        // inter-area transfer data\n+        readRecordBlock(reader); // TODO\n+\n+        model.getOwners().addAll(readOwnerData(reader, context));\n+\n+        // facts control device data\n+        readRecordBlock(reader); // TODO\n+\n+        model.getSwitchedShunts().addAll(readSwitchedShuntData(reader, context));\n+\n+        // gne device data\n+        readRecordBlock(reader); // TODO\n+\n+        // q record (nothing to do)\n+        readRecordBlock(reader);\n+\n+        return model;\n+    }\n+\n+    // Read blocks\n+\n+    private static PsseCaseIdentification readCaseIdentificationData(BufferedReader reader, PsseContext context) throws IOException {\n+        String line = readLineAndRemoveComment(reader);\n+        Objects.requireNonNull(line);", "originalCommit": "1bff9296bbc9f1e5a3e6af0d7d5bb5d5cbb93d08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE4MzQyMw==", "url": "https://github.com/powsybl/powsybl-core/pull/1460#discussion_r516183423", "bodyText": "Done. Now readLineAndRemoveComment never returns null", "author": "marqueslanauja", "createdAt": "2020-11-02T18:45:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzMzAyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzNDU1Mw==", "url": "https://github.com/powsybl/powsybl-core/pull/1460#discussion_r515234553", "bodyText": "From my point of view, if readLine returns null, that means we are at the end of the file, whereas we wanted to read more data. Maybe a premature end of file? In that case, should we throw an exception?", "author": "mathbagu", "createdAt": "2020-10-30T16:47:29Z", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/PsseRawReader.java", "diffHunk": "@@ -85,122 +321,108 @@ public void handleError(DataProcessingException error, Object[] inputRow, Parsin\n         return records;\n     }\n \n-    private PsseCaseIdentification readCaseIdentification(BufferedReader reader) throws IOException {\n-        String line = readLineAndRemoveComment(reader);\n-        PsseCaseIdentification caseIdentification = parseRecord(line, PsseCaseIdentification.class);\n-        caseIdentification.setTitle1(reader.readLine());\n-        caseIdentification.setTitle2(reader.readLine());\n-        return caseIdentification;\n+    private static String removeComment(String line) {\n+        int slashIndex = line.lastIndexOf('/');\n+        if (slashIndex == -1) {\n+            return line;\n+        }\n+        return line.substring(0, slashIndex);\n     }\n \n-    private List<PsseTransformer> readTransformers(BufferedReader reader) throws IOException {\n-        List<PsseTransformer> transformers = new ArrayList<>();\n-\n-        List<String> records = readRecordBlock(reader);\n-        int i = 0;\n-        while (i < records.size()) {\n-            PsseTransformer transformer = new PsseTransformer();\n-            transformer.setFirstRecord(parseRecord(records.get(i++), PsseTransformer.FirstRecord.class));\n-            transformer.setSecondRecord(parseRecord(records.get(i++), PsseTransformer.SecondRecord.class));\n-            transformer.setThirdRecord1(parseRecord(records.get(i++), PsseTransformer.ThirdRecord.class));\n-            transformer.setThirdRecord2(parseRecord(records.get(i++), PsseTransformer.ThirdRecord.class));\n-            if (transformer.getFirstRecord().getK() != 0) {\n-                transformer.setThirdRecord3(parseRecord(records.get(i++), PsseTransformer.ThirdRecord.class));\n+    private static String readLineAndRemoveComment(BufferedReader reader) throws IOException {\n+        String line = reader.readLine();\n+        if (line == null) {\n+            return null;", "originalCommit": "1bff9296bbc9f1e5a3e6af0d7d5bb5d5cbb93d08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE4MzkyNA==", "url": "https://github.com/powsybl/powsybl-core/pull/1460#discussion_r516183924", "bodyText": "Done.  I throw an exception.", "author": "marqueslanauja", "createdAt": "2020-11-02T18:46:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzNDU1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzNjA0Ng==", "url": "https://github.com/powsybl/powsybl-core/pull/1460#discussion_r515236046", "bodyText": "Are you really sure this is correct: I wonder if the lastIndexOf is correct, or if you should find the first occurence of / ? What if I have a comment that contain a slash?", "author": "mathbagu", "createdAt": "2020-10-30T16:49:54Z", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/PsseRawReader.java", "diffHunk": "@@ -85,122 +321,108 @@ public void handleError(DataProcessingException error, Object[] inputRow, Parsin\n         return records;\n     }\n \n-    private PsseCaseIdentification readCaseIdentification(BufferedReader reader) throws IOException {\n-        String line = readLineAndRemoveComment(reader);\n-        PsseCaseIdentification caseIdentification = parseRecord(line, PsseCaseIdentification.class);\n-        caseIdentification.setTitle1(reader.readLine());\n-        caseIdentification.setTitle2(reader.readLine());\n-        return caseIdentification;\n+    private static String removeComment(String line) {\n+        int slashIndex = line.lastIndexOf('/');\n+        if (slashIndex == -1) {\n+            return line;\n+        }\n+        return line.substring(0, slashIndex);", "originalCommit": "1bff9296bbc9f1e5a3e6af0d7d5bb5d5cbb93d08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE4NDgxNg==", "url": "https://github.com/powsybl/powsybl-core/pull/1460#discussion_r516184816", "bodyText": "Done. Change to the  first occurrence.", "author": "marqueslanauja", "createdAt": "2020-11-02T18:48:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzNjA0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzNzY3NA==", "url": "https://github.com/powsybl/powsybl-core/pull/1460#discussion_r515237674", "bodyText": "This comment is useless", "author": "mathbagu", "createdAt": "2020-10-30T16:52:23Z", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/PsseRawReader.java", "diffHunk": "@@ -21,39 +23,255 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Objects;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n /**\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n  */\n public class PsseRawReader {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(PsseRawReader.class);\n \n-    private static String removeComment(String line) {\n-        int slashIndex = line.lastIndexOf('/');\n-        if (slashIndex == -1) {\n-            return line;\n+    public boolean checkCaseIdentification(BufferedReader reader) throws IOException {\n+        Objects.requireNonNull(reader);\n+\n+        // just check the first record if this file is in PSS/E format\n+        PsseCaseIdentification caseIdentification;\n+        try {\n+            caseIdentification = readCaseIdentificationData(reader);\n+        } catch (PsseException e) {\n+            return false; // invalid PSS/E content\n         }\n-        return line.substring(0, slashIndex);\n+\n+        int ic = caseIdentification.getIc();\n+        double sbase = caseIdentification.getSbase();\n+        int rev = caseIdentification.getRev();\n+        double basfrq = caseIdentification.getBasfrq();\n+\n+        if (ic == 0 && sbase > 0. && rev <= PsseConstants.SUPPORTED_VERSION && basfrq > 0.) {\n+            return true;\n+        }\n+\n+        return false;\n     }\n \n-    private static String readLineAndRemoveComment(BufferedReader reader) throws IOException {\n-        String line = reader.readLine();\n-        if (line == null) {\n-            return null;\n+    public PsseRawModel read(BufferedReader reader) throws IOException {\n+        PsseContext context = new PsseContext();\n+        return read(reader, context);\n+    }\n+\n+    public PsseRawModel read(BufferedReader reader, PsseContext context) throws IOException {\n+        Objects.requireNonNull(reader);\n+        Objects.requireNonNull(context);\n+\n+        PsseCaseIdentification caseIdentification = readCaseIdentificationData(reader, context);\n+        PsseRawModel model = new PsseRawModel(caseIdentification);\n+\n+        model.getBuses().addAll(readBusData(reader, context));\n+        model.getLoads().addAll(readLoadData(reader, context));\n+        model.getFixedShunts().addAll(readFixedBusShuntData(reader, context));\n+        model.getGenerators().addAll(readGeneratorData(reader, context));\n+        model.getNonTransformerBranches().addAll(readNonTransformerBranchData(reader, context));\n+        model.getTransformers().addAll(readTransformerData(reader, context));\n+        model.getAreas().addAll(readAreaInterchangeData(reader, context));\n+\n+        // 2-terminal DC data\n+        readRecordBlock(reader); // TODO\n+\n+        // voltage source converter data\n+        readRecordBlock(reader); // TODO\n+\n+        // impedance correction data\n+        readRecordBlock(reader); // TODO\n+\n+        // multi-terminal DC data\n+        readRecordBlock(reader); // TODO\n+\n+        // multi-section line data\n+        readRecordBlock(reader); // TODO\n+\n+        model.getZones().addAll(readZoneData(reader, context));\n+\n+        // inter-area transfer data\n+        readRecordBlock(reader); // TODO\n+\n+        model.getOwners().addAll(readOwnerData(reader, context));\n+\n+        // facts control device data\n+        readRecordBlock(reader); // TODO\n+\n+        model.getSwitchedShunts().addAll(readSwitchedShuntData(reader, context));\n+\n+        // gne device data\n+        readRecordBlock(reader); // TODO\n+\n+        // q record (nothing to do)\n+        readRecordBlock(reader);\n+\n+        return model;\n+    }\n+\n+    // Read blocks\n+\n+    private static PsseCaseIdentification readCaseIdentificationData(BufferedReader reader, PsseContext context) throws IOException {\n+        String line = readLineAndRemoveComment(reader);\n+        Objects.requireNonNull(line);\n+\n+        context.setDelimiter(detectDelimiter(line));\n+\n+        String[] headers = caseIdentificationDataHeaders(line.split(context.getDelimiter()).length);\n+        PsseCaseIdentification caseIdentification = parseRecordHeader(line, PsseCaseIdentification.class, headers);\n+        caseIdentification.setTitle1(reader.readLine());\n+        caseIdentification.setTitle2(reader.readLine());\n+\n+        context.setCaseIdentificationDataReadFields(headers);\n+        return caseIdentification;\n+    }\n+\n+    private static PsseCaseIdentification readCaseIdentificationData(BufferedReader reader) throws IOException {\n+        String line = readLineAndRemoveComment(reader);\n+        Objects.requireNonNull(line);\n+\n+        String[] headers = caseIdentificationDataHeaders();\n+        PsseCaseIdentification caseIdentification = parseRecordHeader(line, PsseCaseIdentification.class, headers);\n+        caseIdentification.setTitle1(reader.readLine());\n+        caseIdentification.setTitle2(reader.readLine());\n+\n+        return caseIdentification;\n+    }\n+\n+    private static List<PsseBus> readBusData(BufferedReader reader, PsseContext context) throws IOException {\n+        String[] headers = busDataHeaders();\n+        List<String> records = readRecordBlock(reader);\n+\n+        context.setBusDataReadFields(readFields(records, headers, context.getDelimiter()));\n+        return parseRecordsHeader(records, PsseBus.class, headers);\n+    }\n+\n+    private static List<PsseLoad> readLoadData(BufferedReader reader, PsseContext context) throws IOException {\n+        String[] headers = loadDataHeaders();\n+        List<String> records = readRecordBlock(reader);\n+\n+        context.setLoadDataReadFields(readFields(records, headers, context.getDelimiter()));\n+        return parseRecordsHeader(records, PsseLoad.class, headers);\n+    }\n+\n+    private static List<PsseFixedShunt> readFixedBusShuntData(BufferedReader reader, PsseContext context) throws IOException {\n+        String[] headers = fixedBusShuntDataHeaders();\n+        List<String> records = readRecordBlock(reader);\n+\n+        context.setFixedBusShuntDataReadFields(readFields(records, headers, context.getDelimiter()));\n+        return parseRecordsHeader(records, PsseFixedShunt.class, headers);\n+    }\n+\n+    private static List<PsseGenerator> readGeneratorData(BufferedReader reader, PsseContext context) throws IOException {\n+        String[] headers = generatorDataHeaders();\n+        List<String> records = readRecordBlock(reader);\n+\n+        context.setGeneratorDataReadFields(readFields(records, headers, context.getDelimiter()));\n+        return parseRecordsHeader(records, PsseGenerator.class, headers);\n+    }\n+\n+    private static List<PsseNonTransformerBranch> readNonTransformerBranchData(BufferedReader reader, PsseContext context) throws IOException {\n+        String[] headers = nonTransformerBranchDataHeaders();\n+        List<String> records = readRecordBlock(reader);\n+\n+        context.setNonTransformerBranchDataReadFields(readFields(records, headers, context.getDelimiter()));\n+        return parseRecordsHeader(records, PsseNonTransformerBranch.class, headers);\n+    }\n+\n+    private static List<PsseTransformer> readTransformerData(BufferedReader reader, PsseContext context) throws IOException {\n+\n+        String[] windingHeaders = transformerWindingDataHeaders();\n+        List<PsseTransformer> transformers = new ArrayList<>();\n+\n+        List<String> records = readRecordBlock(reader);\n+        int i = 0;\n+        while (i < records.size()) {\n+            String record1 = records.get(i++);\n+            String record2 = records.get(i++);\n+            String record3 = records.get(i++);\n+            String record4 = records.get(i++);\n+            String twtRecord = String.join(context.getDelimiter(), record1, record2);\n+\n+            String[] headers = transformerDataHeaders(record1.split(context.getDelimiter()).length);\n+            PsseTransformer transformer = parseRecordHeader(twtRecord, PsseTransformer.class, headers);\n+\n+            transformer.setWindingRecord1(parseRecordHeader(record3, PsseTransformer.WindingRecord.class, windingHeaders));\n+            transformer.setWindingRecord2(parseRecordHeader(record4, PsseTransformer.WindingRecord.class, windingHeaders));\n+\n+            if (transformer.getK() != 0) {\n+                String record5 = records.get(i++);\n+                transformer\n+                    .setWindingRecord3(parseRecordHeader(record5, PsseTransformer.WindingRecord.class, windingHeaders));\n+\n+                if (context.is3wTransformerDataReadFieldsEmpty()) {\n+                    context.set3wTransformerDataReadFields(readFields(twtRecord, headers, context.getDelimiter()),\n+                        readFields(record3, windingHeaders, context.getDelimiter()),\n+                        readFields(record4, windingHeaders, context.getDelimiter()),\n+                        readFields(record5, windingHeaders, context.getDelimiter()));\n+                }\n+            } else {\n+                if (context.is2wTransformerDataReadFieldsEmpty()) {\n+                    context.set2wTransformerDataReadFields(readFields(twtRecord, headers, context.getDelimiter()),\n+                        readFields(record3, windingHeaders, context.getDelimiter()),\n+                        readFields(record4, windingHeaders, context.getDelimiter()));\n+                }\n+            }\n+            transformers.add(transformer);\n         }\n-        return removeComment(line);\n+\n+        return transformers;\n+    }\n+\n+    private static List<PsseArea> readAreaInterchangeData(BufferedReader reader, PsseContext context) throws IOException {\n+        String[] headers = areaInterchangeDataHeaders();\n+        List<String> records = readRecordBlock(reader);\n+\n+        context.setAreaInterchangeDataReadFields(readFields(records, headers, context.getDelimiter()));\n+        return parseRecordsHeader(records, PsseArea.class, headers);\n     }\n \n-    private static <T> T parseRecord(String record, Class<T> aClass) {\n-        List<T> beans = parseRecords(Collections.singletonList(record), aClass);\n+    private static List<PsseZone> readZoneData(BufferedReader reader, PsseContext context) throws IOException {\n+        String[] headers = zoneDataHeaders();\n+        List<String> records = readRecordBlock(reader);\n+\n+        context.setZoneDataReadFields(readFields(records, headers, context.getDelimiter()));\n+        return parseRecordsHeader(records, PsseZone.class, headers);\n+    }\n+\n+    private static List<PsseOwner> readOwnerData(BufferedReader reader, PsseContext context) throws IOException {\n+        String[] headers = ownerDataHeaders();\n+        List<String> records = readRecordBlock(reader);\n+\n+        context.setOwnerDataReadFields(readFields(records, headers, context.getDelimiter()));\n+        return parseRecordsHeader(records, PsseOwner.class, headers);\n+    }\n+\n+    private static List<PsseSwitchedShunt> readSwitchedShuntData(BufferedReader reader, PsseContext context) throws IOException {\n+        String[] headers = switchedShuntDataHeaders();\n+        List<String> records = readRecordBlock(reader);\n+\n+        context.setSwitchedShuntDataReadFields(readFields(records, headers, context.getDelimiter()));\n+        return parseRecordsHeader(records, PsseSwitchedShunt.class, headers);\n+    }\n+\n+    // Parse", "originalCommit": "1bff9296bbc9f1e5a3e6af0d7d5bb5d5cbb93d08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE4NDkzOQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1460#discussion_r516184939", "bodyText": "Done. Deleted", "author": "marqueslanauja", "createdAt": "2020-11-02T18:48:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzNzY3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzODIwOQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1460#discussion_r515238209", "bodyText": "Should we extract these lines into a method to avoid duplication (see parseRecordsHeader above)", "author": "mathbagu", "createdAt": "2020-10-30T16:53:17Z", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/PsseRawReader.java", "diffHunk": "@@ -73,6 +291,24 @@ public void handleError(DataProcessingException error, Object[] inputRow, Parsin\n         return beans;\n     }\n \n+    private static String detectDelimiter(String record) {\n+        CsvParserSettings settings = new CsvParserSettings();\n+        settings.setHeaderExtractionEnabled(false);\n+        settings.setQuoteDetectionEnabled(true);\n+        settings.setDelimiterDetectionEnabled(true, ',', ' '); // sequence order is relevant\n+        settings.setProcessorErrorHandler(new RetryableErrorHandler<ParsingContext>() {\n+            @Override\n+            public void handleError(DataProcessingException error, Object[] inputRow, ParsingContext context) {\n+                LOGGER.error(error.getMessage());\n+            }\n+        });", "originalCommit": "1bff9296bbc9f1e5a3e6af0d7d5bb5d5cbb93d08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE4NTEyNA==", "url": "https://github.com/powsybl/powsybl-core/pull/1460#discussion_r516185124", "bodyText": "Done.", "author": "marqueslanauja", "createdAt": "2020-11-02T18:48:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzODIwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI0MDYwNA==", "url": "https://github.com/powsybl/powsybl-core/pull/1460#discussion_r515240604", "bodyText": "Since you use ArrayUtils, why don't use ArrayUtils.EMPTY_STRING_ARRAY?", "author": "mathbagu", "createdAt": "2020-10-30T16:56:58Z", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/PsseRawReader.java", "diffHunk": "@@ -85,122 +321,108 @@ public void handleError(DataProcessingException error, Object[] inputRow, Parsin\n         return records;\n     }\n \n-    private PsseCaseIdentification readCaseIdentification(BufferedReader reader) throws IOException {\n-        String line = readLineAndRemoveComment(reader);\n-        PsseCaseIdentification caseIdentification = parseRecord(line, PsseCaseIdentification.class);\n-        caseIdentification.setTitle1(reader.readLine());\n-        caseIdentification.setTitle2(reader.readLine());\n-        return caseIdentification;\n+    private static String removeComment(String line) {\n+        int slashIndex = line.lastIndexOf('/');\n+        if (slashIndex == -1) {\n+            return line;\n+        }\n+        return line.substring(0, slashIndex);\n     }\n \n-    private List<PsseTransformer> readTransformers(BufferedReader reader) throws IOException {\n-        List<PsseTransformer> transformers = new ArrayList<>();\n-\n-        List<String> records = readRecordBlock(reader);\n-        int i = 0;\n-        while (i < records.size()) {\n-            PsseTransformer transformer = new PsseTransformer();\n-            transformer.setFirstRecord(parseRecord(records.get(i++), PsseTransformer.FirstRecord.class));\n-            transformer.setSecondRecord(parseRecord(records.get(i++), PsseTransformer.SecondRecord.class));\n-            transformer.setThirdRecord1(parseRecord(records.get(i++), PsseTransformer.ThirdRecord.class));\n-            transformer.setThirdRecord2(parseRecord(records.get(i++), PsseTransformer.ThirdRecord.class));\n-            if (transformer.getFirstRecord().getK() != 0) {\n-                transformer.setThirdRecord3(parseRecord(records.get(i++), PsseTransformer.ThirdRecord.class));\n+    private static String readLineAndRemoveComment(BufferedReader reader) throws IOException {\n+        String line = reader.readLine();\n+        if (line == null) {\n+            return null;\n+        }\n+        StringBuffer newLine = new StringBuffer();\n+        Pattern p = Pattern.compile(\"('[^']+')|( )+\");\n+        Matcher m = p.matcher(removeComment(line));\n+        while (m.find()) {\n+            if (m.group().contains(\"'\")) {\n+                m.appendReplacement(newLine, m.group());\n+            } else {\n+                m.appendReplacement(newLine, \" \");\n             }\n-            transformers.add(transformer);\n         }\n-\n-        return transformers;\n+        m.appendTail(newLine);\n+        return newLine.toString().trim();\n     }\n \n-    public PsseRawModel read(BufferedReader reader) throws IOException {\n-        Objects.requireNonNull(reader);\n-\n-        // case identification\n-        PsseCaseIdentification caseIdentification = readCaseIdentification(reader);\n-\n-        PsseRawModel model = new PsseRawModel(caseIdentification);\n-\n-        // bus data\n-        model.getBuses().addAll(parseRecords(readRecordBlock(reader), PsseBus.class));\n-\n-        // load data\n-        model.getLoads().addAll(parseRecords(readRecordBlock(reader), PsseLoad.class));\n-\n-        // fixed shunt data\n-        model.getFixedShunts().addAll(parseRecords(readRecordBlock(reader), PsseFixedShunt.class));\n-\n-        // generator data\n-        model.getGenerators().addAll(parseRecords(readRecordBlock(reader), PsseGenerator.class));\n-\n-        // non transformer data\n-        model.getNonTransformerBranches().addAll(parseRecords(readRecordBlock(reader), PsseNonTransformerBranch.class));\n-\n-        // transformer data\n-        model.getTransformers().addAll(readTransformers(reader));\n-\n-        // area data\n-        model.getAreas().addAll(parseRecords(readRecordBlock(reader), PsseArea.class));\n+    // Read fields\n \n-        // 2-terminal DC data\n-        readRecordBlock(reader); // TODO\n-\n-        // voltage source converter data\n-        readRecordBlock(reader); // TODO\n+    private static String[] readFields(List<String> records, String[] headers, String delimiter) {\n+        if (records.isEmpty()) {\n+            return new String[] {};", "originalCommit": "1bff9296bbc9f1e5a3e6af0d7d5bb5d5cbb93d08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE4NTE5OQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1460#discussion_r516185199", "bodyText": "Done", "author": "marqueslanauja", "createdAt": "2020-11-02T18:49:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI0MDYwNA=="}], "type": "inlineReview"}, {"oid": "df880e165cd8374d86f7ee0e65467a703893a5bf", "url": "https://github.com/powsybl/powsybl-core/commit/df880e165cd8374d86f7ee0e65467a703893a5bf", "message": "Apply reviewer comments\n\nSigned-off-by: Jos\u00e9 Antonio Marqu\u00e9s <marquesja@aia.es>", "committedDate": "2020-11-02T16:52:10Z", "type": "commit"}, {"oid": "44e5279d9d73c906bc2a6aed5ede7a40dabe540c", "url": "https://github.com/powsybl/powsybl-core/commit/44e5279d9d73c906bc2a6aed5ede7a40dabe540c", "message": "Merge branch 'master' into psse_parserByField", "committedDate": "2020-11-02T17:08:05Z", "type": "commit"}, {"oid": "f1560b0dcaec2adfa041d6731a956c7646f8292b", "url": "https://github.com/powsybl/powsybl-core/commit/f1560b0dcaec2adfa041d6731a956c7646f8292b", "message": "Fix code smells\n\nSigned-off-by: Jos\u00e9 Antonio Marqu\u00e9s <marquesja@aia.es>", "committedDate": "2020-11-02T17:52:06Z", "type": "commit"}, {"oid": "25e86c66cac2f2a56f94a86256f1918a65683c5b", "url": "https://github.com/powsybl/powsybl-core/commit/25e86c66cac2f2a56f94a86256f1918a65683c5b", "message": "Fix code smells\n\nSigned-off-by: Jos\u00e9 Antonio Marqu\u00e9s <marquesja@aia.es>", "committedDate": "2020-11-02T18:19:52Z", "type": "commit"}, {"oid": "e12b4cfd947946b6309819803694aba40948b240", "url": "https://github.com/powsybl/powsybl-core/commit/e12b4cfd947946b6309819803694aba40948b240", "message": "Review fixes\n\nSigned-off-by: Mathieu BAGUE <mathieu.bague@rte-france.com>", "committedDate": "2020-11-06T14:48:11Z", "type": "commit"}, {"oid": "680648e087141a693b0eae2ef1f10262996fcde3", "url": "https://github.com/powsybl/powsybl-core/commit/680648e087141a693b0eae2ef1f10262996fcde3", "message": "Merge branch 'master' into psse_parserByField", "committedDate": "2020-11-06T14:49:03Z", "type": "commit"}]}