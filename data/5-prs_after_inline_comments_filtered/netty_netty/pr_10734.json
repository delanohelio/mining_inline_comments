{"pr_number": 10734, "pr_title": "MQTT5: support multiple Subscription ID properties", "pr_createdAt": "2020-10-26T14:50:49Z", "pr_url": "https://github.com/netty/netty/pull/10734", "timeline": [{"oid": "047c1756c348f91074c228b40f131cf7de3ed175", "url": "https://github.com/netty/netty/commit/047c1756c348f91074c228b40f131cf7de3ed175", "message": "MQTT5: support multiple Subscription ID properties", "committedDate": "2020-10-26T14:43:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIwODY5MA==", "url": "https://github.com/netty/netty/pull/10734#discussion_r512208690", "bodyText": "nit: \",\" -> \", \" (add space)", "author": "normanmaurer", "createdAt": "2020-10-26T19:17:55Z", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "diffHunk": "@@ -139,20 +139,47 @@ public T value() {\n         public int propertyId() {\n             return propertyId;\n         }\n+\n+        @Override\n+        public int hashCode() {\n+            return propertyId + 31 * value.hashCode();\n+        }\n+\n+        @Override\n+        public boolean equals(Object obj) {\n+            if (this == obj) {\n+                return true;\n+            }\n+            if (obj == null || getClass() != obj.getClass()) {\n+                return false;\n+            }\n+            MqttProperty that = (MqttProperty) obj;\n+            return this.propertyId == that.propertyId && this.value.equals(that.value);\n+        }\n     }\n \n     public static final class IntegerProperty extends MqttProperty<Integer> {\n \n         public IntegerProperty(int propertyId, Integer value) {\n             super(propertyId, value);\n         }\n+\n+        @Override\n+        public String toString() {\n+            return \"IntegerProperty(\" + propertyId + \",\" + value + \")\";", "originalCommit": "047c1756c348f91074c228b40f131cf7de3ed175", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIwODkyOQ==", "url": "https://github.com/netty/netty/pull/10734#discussion_r512208929", "bodyText": "does this need to be public ?", "author": "normanmaurer", "createdAt": "2020-10-26T19:18:23Z", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "diffHunk": "@@ -200,26 +227,59 @@ public UserProperties(Collection<StringPair> values) {\n             this.value.addAll(values);\n         }\n \n+        public static UserProperties fromUserPropertyCollection(Collection<UserProperty> properties) {", "originalCommit": "047c1756c348f91074c228b40f131cf7de3ed175", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ1NDAxNw==", "url": "https://github.com/netty/netty/pull/10734#discussion_r512454017", "bodyText": "Not really. Changed to private", "author": "paul-lysak", "createdAt": "2020-10-27T06:59:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIwODkyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIwOTEzNg==", "url": "https://github.com/netty/netty/pull/10734#discussion_r512209136", "bodyText": "nit: \",\" -> \", \"", "author": "normanmaurer", "createdAt": "2020-10-26T19:18:43Z", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "diffHunk": "@@ -200,26 +227,59 @@ public UserProperties(Collection<StringPair> values) {\n             this.value.addAll(values);\n         }\n \n+        public static UserProperties fromUserPropertyCollection(Collection<UserProperty> properties) {\n+            UserProperties userProperties = new UserProperties();\n+            for (UserProperty property: properties) {\n+                userProperties.add(new StringPair(property.value.key, property.value.value));\n+            }\n+            return userProperties;\n+        }\n+\n         public void add(StringPair pair) {\n             this.value.add(pair);\n         }\n \n         public void add(String key, String value) {\n             this.value.add(new StringPair(key, value));\n         }\n+\n+        @Override\n+        public String toString() {\n+            StringBuilder builder = new StringBuilder(\"UserProperties(\");\n+            boolean first = true;\n+            for (StringPair pair: value) {\n+                if (!first) {\n+                    builder.append(\",\");\n+                }\n+                builder.append(pair.key + \"->\" + pair.value);\n+                first = false;\n+            }\n+            builder.append(\")\");\n+            return builder.toString();\n+        }\n     }\n \n     public static final class UserProperty extends MqttProperty<StringPair> {\n         public UserProperty(String key, String value) {\n             super(MqttPropertyType.USER_PROPERTY.value, new StringPair(key, value));\n         }\n+\n+        @Override\n+        public String toString() {\n+            return \"UserProperty(\" + value.key + \",\" + value.value + \")\";", "originalCommit": "047c1756c348f91074c228b40f131cf7de3ed175", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIwOTc3Mg==", "url": "https://github.com/netty/netty/pull/10734#discussion_r512209772", "bodyText": "nit: you can remove the else as you return", "author": "normanmaurer", "createdAt": "2020-10-26T19:19:52Z", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "diffHunk": "@@ -266,16 +337,79 @@ public void add(MqttProperty property) {\n \n     public Collection<? extends MqttProperty> listAll() {\n         IntObjectHashMap<MqttProperty> props = this.props;\n-        return props == null? Collections.<MqttProperty>emptyList() : props.values();\n+        if (props == null && subscriptionIds == null && userProperties == null) {\n+            return Collections.<MqttProperty>emptyList();\n+        } else if (subscriptionIds == null && userProperties == null) {", "originalCommit": "047c1756c348f91074c228b40f131cf7de3ed175", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIwOTgyNQ==", "url": "https://github.com/netty/netty/pull/10734#discussion_r512209825", "bodyText": "nit: you can remove the else as you return", "author": "normanmaurer", "createdAt": "2020-10-26T19:19:57Z", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "diffHunk": "@@ -266,16 +337,79 @@ public void add(MqttProperty property) {\n \n     public Collection<? extends MqttProperty> listAll() {\n         IntObjectHashMap<MqttProperty> props = this.props;\n-        return props == null? Collections.<MqttProperty>emptyList() : props.values();\n+        if (props == null && subscriptionIds == null && userProperties == null) {\n+            return Collections.<MqttProperty>emptyList();\n+        } else if (subscriptionIds == null && userProperties == null) {\n+            return props.values();\n+        } else if (props == null && userProperties == null) {", "originalCommit": "047c1756c348f91074c228b40f131cf7de3ed175", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIwOTk4MA==", "url": "https://github.com/netty/netty/pull/10734#discussion_r512209980", "bodyText": "you can remove the else as you return before", "author": "normanmaurer", "createdAt": "2020-10-26T19:20:14Z", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "diffHunk": "@@ -266,16 +337,79 @@ public void add(MqttProperty property) {\n \n     public Collection<? extends MqttProperty> listAll() {\n         IntObjectHashMap<MqttProperty> props = this.props;\n-        return props == null? Collections.<MqttProperty>emptyList() : props.values();\n+        if (props == null && subscriptionIds == null && userProperties == null) {\n+            return Collections.<MqttProperty>emptyList();\n+        } else if (subscriptionIds == null && userProperties == null) {\n+            return props.values();\n+        } else if (props == null && userProperties == null) {\n+            return subscriptionIds;\n+        } else {", "originalCommit": "047c1756c348f91074c228b40f131cf7de3ed175", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxMDM0Mg==", "url": "https://github.com/netty/netty/pull/10734#discussion_r512210342", "bodyText": "nit: you can remove the else as you return before", "author": "normanmaurer", "createdAt": "2020-10-26T19:20:55Z", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "diffHunk": "@@ -266,16 +337,79 @@ public void add(MqttProperty property) {\n \n     public Collection<? extends MqttProperty> listAll() {\n         IntObjectHashMap<MqttProperty> props = this.props;\n-        return props == null? Collections.<MqttProperty>emptyList() : props.values();\n+        if (props == null && subscriptionIds == null && userProperties == null) {\n+            return Collections.<MqttProperty>emptyList();\n+        } else if (subscriptionIds == null && userProperties == null) {\n+            return props.values();\n+        } else if (props == null && userProperties == null) {\n+            return subscriptionIds;\n+        } else {\n+            List<MqttProperty> propValues = new ArrayList<MqttProperty>(props != null ? props.size() : 1);\n+            if (props != null) {\n+                propValues.addAll(props.values());\n+            }\n+            if (subscriptionIds != null) {\n+                propValues.addAll(subscriptionIds);\n+            }\n+            if (userProperties != null) {\n+                propValues.add(UserProperties.fromUserPropertyCollection(userProperties));\n+            }\n+            return propValues;\n+        }\n     }\n \n     public boolean isEmpty() {\n         IntObjectHashMap<MqttProperty> props = this.props;\n         return props == null || props.isEmpty();\n     }\n \n+    /**\n+     * Get property by ID. If there are multiple properties of this type (can be with Subscription ID)\n+     * then return the first one.\n+     *\n+     * @param propertyId ID of the property\n+     * @return a property if it is set, null otherwise\n+     */\n     public MqttProperty getProperty(int propertyId) {\n-        IntObjectHashMap<MqttProperty> props = this.props;\n-        return props == null? null : props.get(propertyId);\n+        if (propertyId == MqttPropertyType.USER_PROPERTY.value) {\n+            //special handling to keep compatibility with earlier versions\n+            List<UserProperty> userProperties = this.userProperties;\n+            if (userProperties == null) {\n+                return null;\n+            } else {", "originalCommit": "047c1756c348f91074c228b40f131cf7de3ed175", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxMDQ3Mw==", "url": "https://github.com/netty/netty/pull/10734#discussion_r512210473", "bodyText": "nit you can remove the else", "author": "normanmaurer", "createdAt": "2020-10-26T19:21:08Z", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "diffHunk": "@@ -266,16 +337,79 @@ public void add(MqttProperty property) {\n \n     public Collection<? extends MqttProperty> listAll() {\n         IntObjectHashMap<MqttProperty> props = this.props;\n-        return props == null? Collections.<MqttProperty>emptyList() : props.values();\n+        if (props == null && subscriptionIds == null && userProperties == null) {\n+            return Collections.<MqttProperty>emptyList();\n+        } else if (subscriptionIds == null && userProperties == null) {\n+            return props.values();\n+        } else if (props == null && userProperties == null) {\n+            return subscriptionIds;\n+        } else {\n+            List<MqttProperty> propValues = new ArrayList<MqttProperty>(props != null ? props.size() : 1);\n+            if (props != null) {\n+                propValues.addAll(props.values());\n+            }\n+            if (subscriptionIds != null) {\n+                propValues.addAll(subscriptionIds);\n+            }\n+            if (userProperties != null) {\n+                propValues.add(UserProperties.fromUserPropertyCollection(userProperties));\n+            }\n+            return propValues;\n+        }\n     }\n \n     public boolean isEmpty() {\n         IntObjectHashMap<MqttProperty> props = this.props;\n         return props == null || props.isEmpty();\n     }\n \n+    /**\n+     * Get property by ID. If there are multiple properties of this type (can be with Subscription ID)\n+     * then return the first one.\n+     *\n+     * @param propertyId ID of the property\n+     * @return a property if it is set, null otherwise\n+     */\n     public MqttProperty getProperty(int propertyId) {\n-        IntObjectHashMap<MqttProperty> props = this.props;\n-        return props == null? null : props.get(propertyId);\n+        if (propertyId == MqttPropertyType.USER_PROPERTY.value) {\n+            //special handling to keep compatibility with earlier versions\n+            List<UserProperty> userProperties = this.userProperties;\n+            if (userProperties == null) {\n+                return null;\n+            } else {\n+                return UserProperties.fromUserPropertyCollection(userProperties);\n+            }\n+        } else if (propertyId == MqttPropertyType.SUBSCRIPTION_IDENTIFIER.value) {", "originalCommit": "047c1756c348f91074c228b40f131cf7de3ed175", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxMDU2MA==", "url": "https://github.com/netty/netty/pull/10734#discussion_r512210560", "bodyText": "nit you can remove the else.", "author": "normanmaurer", "createdAt": "2020-10-26T19:21:18Z", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "diffHunk": "@@ -266,16 +337,79 @@ public void add(MqttProperty property) {\n \n     public Collection<? extends MqttProperty> listAll() {\n         IntObjectHashMap<MqttProperty> props = this.props;\n-        return props == null? Collections.<MqttProperty>emptyList() : props.values();\n+        if (props == null && subscriptionIds == null && userProperties == null) {\n+            return Collections.<MqttProperty>emptyList();\n+        } else if (subscriptionIds == null && userProperties == null) {\n+            return props.values();\n+        } else if (props == null && userProperties == null) {\n+            return subscriptionIds;\n+        } else {\n+            List<MqttProperty> propValues = new ArrayList<MqttProperty>(props != null ? props.size() : 1);\n+            if (props != null) {\n+                propValues.addAll(props.values());\n+            }\n+            if (subscriptionIds != null) {\n+                propValues.addAll(subscriptionIds);\n+            }\n+            if (userProperties != null) {\n+                propValues.add(UserProperties.fromUserPropertyCollection(userProperties));\n+            }\n+            return propValues;\n+        }\n     }\n \n     public boolean isEmpty() {\n         IntObjectHashMap<MqttProperty> props = this.props;\n         return props == null || props.isEmpty();\n     }\n \n+    /**\n+     * Get property by ID. If there are multiple properties of this type (can be with Subscription ID)\n+     * then return the first one.\n+     *\n+     * @param propertyId ID of the property\n+     * @return a property if it is set, null otherwise\n+     */\n     public MqttProperty getProperty(int propertyId) {\n-        IntObjectHashMap<MqttProperty> props = this.props;\n-        return props == null? null : props.get(propertyId);\n+        if (propertyId == MqttPropertyType.USER_PROPERTY.value) {\n+            //special handling to keep compatibility with earlier versions\n+            List<UserProperty> userProperties = this.userProperties;\n+            if (userProperties == null) {\n+                return null;\n+            } else {\n+                return UserProperties.fromUserPropertyCollection(userProperties);\n+            }\n+        } else if (propertyId == MqttPropertyType.SUBSCRIPTION_IDENTIFIER.value) {\n+            List<IntegerProperty> subscriptionIds = this.subscriptionIds;\n+            if (subscriptionIds == null || subscriptionIds.isEmpty()) {\n+                return null;\n+            } else {", "originalCommit": "047c1756c348f91074c228b40f131cf7de3ed175", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxMDcxNA==", "url": "https://github.com/netty/netty/pull/10734#discussion_r512210714", "bodyText": "nit: you can remove the else as you return before", "author": "normanmaurer", "createdAt": "2020-10-26T19:21:35Z", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "diffHunk": "@@ -266,16 +337,79 @@ public void add(MqttProperty property) {\n \n     public Collection<? extends MqttProperty> listAll() {\n         IntObjectHashMap<MqttProperty> props = this.props;\n-        return props == null? Collections.<MqttProperty>emptyList() : props.values();\n+        if (props == null && subscriptionIds == null && userProperties == null) {\n+            return Collections.<MqttProperty>emptyList();\n+        } else if (subscriptionIds == null && userProperties == null) {\n+            return props.values();\n+        } else if (props == null && userProperties == null) {\n+            return subscriptionIds;\n+        } else {\n+            List<MqttProperty> propValues = new ArrayList<MqttProperty>(props != null ? props.size() : 1);\n+            if (props != null) {\n+                propValues.addAll(props.values());\n+            }\n+            if (subscriptionIds != null) {\n+                propValues.addAll(subscriptionIds);\n+            }\n+            if (userProperties != null) {\n+                propValues.add(UserProperties.fromUserPropertyCollection(userProperties));\n+            }\n+            return propValues;\n+        }\n     }\n \n     public boolean isEmpty() {\n         IntObjectHashMap<MqttProperty> props = this.props;\n         return props == null || props.isEmpty();\n     }\n \n+    /**\n+     * Get property by ID. If there are multiple properties of this type (can be with Subscription ID)\n+     * then return the first one.\n+     *\n+     * @param propertyId ID of the property\n+     * @return a property if it is set, null otherwise\n+     */\n     public MqttProperty getProperty(int propertyId) {\n-        IntObjectHashMap<MqttProperty> props = this.props;\n-        return props == null? null : props.get(propertyId);\n+        if (propertyId == MqttPropertyType.USER_PROPERTY.value) {\n+            //special handling to keep compatibility with earlier versions\n+            List<UserProperty> userProperties = this.userProperties;\n+            if (userProperties == null) {\n+                return null;\n+            } else {\n+                return UserProperties.fromUserPropertyCollection(userProperties);\n+            }\n+        } else if (propertyId == MqttPropertyType.SUBSCRIPTION_IDENTIFIER.value) {\n+            List<IntegerProperty> subscriptionIds = this.subscriptionIds;\n+            if (subscriptionIds == null || subscriptionIds.isEmpty()) {\n+                return null;\n+            } else {\n+                return subscriptionIds.get(0);\n+            }\n+        } else {\n+            IntObjectHashMap<MqttProperty> props = this.props;\n+            return props == null ? null : props.get(propertyId);\n+        }\n+    }\n+\n+    /**\n+     * Get properties by ID.\n+     * Some properties (Subscription ID and User Properties) may occur few times,\n+     * this method returns all their values in order.\n+     *\n+     * @param propertyId ID of the property\n+     * @return all properties having specified ID\n+     */\n+    public List<? extends MqttProperty> getProperties(int propertyId) {\n+        if (propertyId == MqttPropertyType.USER_PROPERTY.value) {\n+            return userProperties == null ? Collections.<MqttProperty>emptyList() : userProperties;\n+        } else if (propertyId == MqttPropertyType.SUBSCRIPTION_IDENTIFIER.value) {", "originalCommit": "047c1756c348f91074c228b40f131cf7de3ed175", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxMDc1OQ==", "url": "https://github.com/netty/netty/pull/10734#discussion_r512210759", "bodyText": "nit: you can remove the else as you return before", "author": "normanmaurer", "createdAt": "2020-10-26T19:21:40Z", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "diffHunk": "@@ -266,16 +337,79 @@ public void add(MqttProperty property) {\n \n     public Collection<? extends MqttProperty> listAll() {\n         IntObjectHashMap<MqttProperty> props = this.props;\n-        return props == null? Collections.<MqttProperty>emptyList() : props.values();\n+        if (props == null && subscriptionIds == null && userProperties == null) {\n+            return Collections.<MqttProperty>emptyList();\n+        } else if (subscriptionIds == null && userProperties == null) {\n+            return props.values();\n+        } else if (props == null && userProperties == null) {\n+            return subscriptionIds;\n+        } else {\n+            List<MqttProperty> propValues = new ArrayList<MqttProperty>(props != null ? props.size() : 1);\n+            if (props != null) {\n+                propValues.addAll(props.values());\n+            }\n+            if (subscriptionIds != null) {\n+                propValues.addAll(subscriptionIds);\n+            }\n+            if (userProperties != null) {\n+                propValues.add(UserProperties.fromUserPropertyCollection(userProperties));\n+            }\n+            return propValues;\n+        }\n     }\n \n     public boolean isEmpty() {\n         IntObjectHashMap<MqttProperty> props = this.props;\n         return props == null || props.isEmpty();\n     }\n \n+    /**\n+     * Get property by ID. If there are multiple properties of this type (can be with Subscription ID)\n+     * then return the first one.\n+     *\n+     * @param propertyId ID of the property\n+     * @return a property if it is set, null otherwise\n+     */\n     public MqttProperty getProperty(int propertyId) {\n-        IntObjectHashMap<MqttProperty> props = this.props;\n-        return props == null? null : props.get(propertyId);\n+        if (propertyId == MqttPropertyType.USER_PROPERTY.value) {\n+            //special handling to keep compatibility with earlier versions\n+            List<UserProperty> userProperties = this.userProperties;\n+            if (userProperties == null) {\n+                return null;\n+            } else {\n+                return UserProperties.fromUserPropertyCollection(userProperties);\n+            }\n+        } else if (propertyId == MqttPropertyType.SUBSCRIPTION_IDENTIFIER.value) {\n+            List<IntegerProperty> subscriptionIds = this.subscriptionIds;\n+            if (subscriptionIds == null || subscriptionIds.isEmpty()) {\n+                return null;\n+            } else {\n+                return subscriptionIds.get(0);\n+            }\n+        } else {\n+            IntObjectHashMap<MqttProperty> props = this.props;\n+            return props == null ? null : props.get(propertyId);\n+        }\n+    }\n+\n+    /**\n+     * Get properties by ID.\n+     * Some properties (Subscription ID and User Properties) may occur few times,\n+     * this method returns all their values in order.\n+     *\n+     * @param propertyId ID of the property\n+     * @return all properties having specified ID\n+     */\n+    public List<? extends MqttProperty> getProperties(int propertyId) {\n+        if (propertyId == MqttPropertyType.USER_PROPERTY.value) {\n+            return userProperties == null ? Collections.<MqttProperty>emptyList() : userProperties;\n+        } else if (propertyId == MqttPropertyType.SUBSCRIPTION_IDENTIFIER.value) {\n+            return subscriptionIds == null ? Collections.<MqttProperty>emptyList() : subscriptionIds;\n+        } else {", "originalCommit": "047c1756c348f91074c228b40f131cf7de3ed175", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "24570893541ed1bb698587043b425f43ac09ec0e", "url": "https://github.com/netty/netty/commit/24570893541ed1bb698587043b425f43ac09ec0e", "message": "Style fixes", "committedDate": "2020-10-27T06:58:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDExMTc0OA==", "url": "https://github.com/netty/netty/pull/10734#discussion_r514111748", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Some properties (Subscription ID and User Properties) may occur few times,\n          \n          \n            \n                 * Some properties (Subscription ID and User Properties) may occur multiple times,", "author": "chrisvest", "createdAt": "2020-10-29T09:20:19Z", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "diffHunk": "@@ -266,16 +337,78 @@ public void add(MqttProperty property) {\n \n     public Collection<? extends MqttProperty> listAll() {\n         IntObjectHashMap<MqttProperty> props = this.props;\n-        return props == null? Collections.<MqttProperty>emptyList() : props.values();\n+        if (props == null && subscriptionIds == null && userProperties == null) {\n+            return Collections.<MqttProperty>emptyList();\n+        }\n+        if (subscriptionIds == null && userProperties == null) {\n+            return props.values();\n+        }\n+        if (props == null && userProperties == null) {\n+            return subscriptionIds;\n+        }\n+        List<MqttProperty> propValues = new ArrayList<MqttProperty>(props != null ? props.size() : 1);\n+        if (props != null) {\n+            propValues.addAll(props.values());\n+        }\n+        if (subscriptionIds != null) {\n+            propValues.addAll(subscriptionIds);\n+        }\n+        if (userProperties != null) {\n+            propValues.add(UserProperties.fromUserPropertyCollection(userProperties));\n+        }\n+        return propValues;\n     }\n \n     public boolean isEmpty() {\n         IntObjectHashMap<MqttProperty> props = this.props;\n         return props == null || props.isEmpty();\n     }\n \n+    /**\n+     * Get property by ID. If there are multiple properties of this type (can be with Subscription ID)\n+     * then return the first one.\n+     *\n+     * @param propertyId ID of the property\n+     * @return a property if it is set, null otherwise\n+     */\n     public MqttProperty getProperty(int propertyId) {\n+        if (propertyId == MqttPropertyType.USER_PROPERTY.value) {\n+            //special handling to keep compatibility with earlier versions\n+            List<UserProperty> userProperties = this.userProperties;\n+            if (userProperties == null) {\n+                return null;\n+            }\n+            return UserProperties.fromUserPropertyCollection(userProperties);\n+        }\n+        if (propertyId == MqttPropertyType.SUBSCRIPTION_IDENTIFIER.value) {\n+            List<IntegerProperty> subscriptionIds = this.subscriptionIds;\n+            if (subscriptionIds == null || subscriptionIds.isEmpty()) {\n+                return null;\n+            }\n+            return subscriptionIds.get(0);\n+        }\n+        IntObjectHashMap<MqttProperty> props = this.props;\n+        return props == null ? null : props.get(propertyId);\n+    }\n+\n+    /**\n+     * Get properties by ID.\n+     * Some properties (Subscription ID and User Properties) may occur few times,", "originalCommit": "24570893541ed1bb698587043b425f43ac09ec0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDExNDQyMg==", "url": "https://github.com/netty/netty/pull/10734#discussion_r514114422", "bodyText": "The expected value goes before the actual value in assertEquals", "author": "chrisvest", "createdAt": "2020-10-29T09:24:14Z", "path": "codec-mqtt/src/test/java/io/netty/handler/codec/mqtt/MqttPropertiesTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.netty.handler.codec.mqtt;\n+\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static io.netty.handler.codec.mqtt.MqttProperties.MqttPropertyType.CONTENT_TYPE;\n+import static io.netty.handler.codec.mqtt.MqttProperties.MqttPropertyType.PAYLOAD_FORMAT_INDICATOR;\n+import static io.netty.handler.codec.mqtt.MqttProperties.MqttPropertyType.SUBSCRIPTION_IDENTIFIER;\n+import static io.netty.handler.codec.mqtt.MqttProperties.MqttPropertyType.USER_PROPERTY;\n+import static org.junit.Assert.assertEquals;\n+\n+public class MqttPropertiesTest {\n+\n+    private MqttProperties createSampleProperties() {\n+        MqttProperties props = new MqttProperties();\n+        props.add(new MqttProperties.IntegerProperty(SUBSCRIPTION_IDENTIFIER.value(), 10));\n+        props.add(new MqttProperties.IntegerProperty(SUBSCRIPTION_IDENTIFIER.value(), 20));\n+        props.add(new MqttProperties.IntegerProperty(PAYLOAD_FORMAT_INDICATOR.value(), 6));\n+        props.add(new MqttProperties.StringProperty(CONTENT_TYPE.value(), \"text/plain\"));\n+        props.add(new MqttProperties.UserProperty(\"isSecret\", \"true\"));\n+        props.add(new MqttProperties.UserProperty(\"tag\", \"firstTag\"));\n+        props.add(new MqttProperties.UserProperty(\"tag\", \"secondTag\"));\n+        return props;\n+    }\n+\n+    @Test\n+    public void testGetProperty() {\n+        MqttProperties props = createSampleProperties();\n+\n+        assertEquals(\"getProperty Content Type\",\n+                \"text/plain\",\n+                ((MqttProperties.StringProperty) props.getProperty(CONTENT_TYPE.value())).value);\n+        assertEquals(\"getProperty Subscription ID\",\n+                10,\n+                ((MqttProperties.IntegerProperty) props.getProperty(SUBSCRIPTION_IDENTIFIER.value())).value.intValue());\n+\n+        List<MqttProperties.StringPair> expectedUserProps = new ArrayList<MqttProperties.StringPair>();\n+        expectedUserProps.add(new MqttProperties.StringPair(\"isSecret\", \"true\"));\n+        expectedUserProps.add(new MqttProperties.StringPair(\"tag\", \"firstTag\"));\n+        expectedUserProps.add(new MqttProperties.StringPair(\"tag\", \"secondTag\"));\n+        List<MqttProperties.StringPair> actualUserProps =\n+                ((MqttProperties.UserProperties) props.getProperty(USER_PROPERTY.value())).value;\n+        assertEquals(\"getProperty User Properties\", actualUserProps, expectedUserProps);", "originalCommit": "24570893541ed1bb698587043b425f43ac09ec0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDExNDcyNQ==", "url": "https://github.com/netty/netty/pull/10734#discussion_r514114725", "bodyText": "\ud83d\udccc", "author": "chrisvest", "createdAt": "2020-10-29T09:24:41Z", "path": "codec-mqtt/src/test/java/io/netty/handler/codec/mqtt/MqttPropertiesTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.netty.handler.codec.mqtt;\n+\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static io.netty.handler.codec.mqtt.MqttProperties.MqttPropertyType.CONTENT_TYPE;\n+import static io.netty.handler.codec.mqtt.MqttProperties.MqttPropertyType.PAYLOAD_FORMAT_INDICATOR;\n+import static io.netty.handler.codec.mqtt.MqttProperties.MqttPropertyType.SUBSCRIPTION_IDENTIFIER;\n+import static io.netty.handler.codec.mqtt.MqttProperties.MqttPropertyType.USER_PROPERTY;\n+import static org.junit.Assert.assertEquals;\n+\n+public class MqttPropertiesTest {\n+\n+    private MqttProperties createSampleProperties() {\n+        MqttProperties props = new MqttProperties();\n+        props.add(new MqttProperties.IntegerProperty(SUBSCRIPTION_IDENTIFIER.value(), 10));\n+        props.add(new MqttProperties.IntegerProperty(SUBSCRIPTION_IDENTIFIER.value(), 20));\n+        props.add(new MqttProperties.IntegerProperty(PAYLOAD_FORMAT_INDICATOR.value(), 6));\n+        props.add(new MqttProperties.StringProperty(CONTENT_TYPE.value(), \"text/plain\"));\n+        props.add(new MqttProperties.UserProperty(\"isSecret\", \"true\"));\n+        props.add(new MqttProperties.UserProperty(\"tag\", \"firstTag\"));\n+        props.add(new MqttProperties.UserProperty(\"tag\", \"secondTag\"));\n+        return props;\n+    }\n+\n+    @Test\n+    public void testGetProperty() {\n+        MqttProperties props = createSampleProperties();\n+\n+        assertEquals(\"getProperty Content Type\",\n+                \"text/plain\",\n+                ((MqttProperties.StringProperty) props.getProperty(CONTENT_TYPE.value())).value);\n+        assertEquals(\"getProperty Subscription ID\",\n+                10,\n+                ((MqttProperties.IntegerProperty) props.getProperty(SUBSCRIPTION_IDENTIFIER.value())).value.intValue());\n+\n+        List<MqttProperties.StringPair> expectedUserProps = new ArrayList<MqttProperties.StringPair>();\n+        expectedUserProps.add(new MqttProperties.StringPair(\"isSecret\", \"true\"));\n+        expectedUserProps.add(new MqttProperties.StringPair(\"tag\", \"firstTag\"));\n+        expectedUserProps.add(new MqttProperties.StringPair(\"tag\", \"secondTag\"));\n+        List<MqttProperties.StringPair> actualUserProps =\n+                ((MqttProperties.UserProperties) props.getProperty(USER_PROPERTY.value())).value;\n+        assertEquals(\"getProperty User Properties\", actualUserProps, expectedUserProps);\n+    }\n+\n+    @Test\n+    public void testGetProperties() {\n+        MqttProperties props = createSampleProperties();\n+\n+        assertEquals(\"getProperties Content Type\",\n+                Collections.singletonList(new MqttProperties.StringProperty(CONTENT_TYPE.value(), \"text/plain\")),\n+                props.getProperties(CONTENT_TYPE.value()));\n+\n+        List<MqttProperties.IntegerProperty> expectedSubscriptionIds = new ArrayList<MqttProperties.IntegerProperty>();\n+        expectedSubscriptionIds.add(new MqttProperties.IntegerProperty(SUBSCRIPTION_IDENTIFIER.value(), 10));\n+        expectedSubscriptionIds.add(new MqttProperties.IntegerProperty(SUBSCRIPTION_IDENTIFIER.value(), 20));\n+        assertEquals(\"getProperties Subscription ID\",\n+                expectedSubscriptionIds,\n+               props.getProperties(SUBSCRIPTION_IDENTIFIER.value()));\n+\n+        List<MqttProperties.UserProperty> expectedUserProps = new ArrayList<MqttProperties.UserProperty>();\n+        expectedUserProps.add(new MqttProperties.UserProperty(\"isSecret\", \"true\"));\n+        expectedUserProps.add(new MqttProperties.UserProperty(\"tag\", \"firstTag\"));\n+        expectedUserProps.add(new MqttProperties.UserProperty(\"tag\", \"secondTag\"));\n+        List<MqttProperties.UserProperty> actualUserProps =\n+                (List<MqttProperties.UserProperty>) props.getProperties(USER_PROPERTY.value());\n+        assertEquals(\"getProperty User Properties\", actualUserProps, expectedUserProps);", "originalCommit": "24570893541ed1bb698587043b425f43ac09ec0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4b3fc852ac29dc0dc1abef0a66ec65f65cd105d6", "url": "https://github.com/netty/netty/commit/4b3fc852ac29dc0dc1abef0a66ec65f65cd105d6", "message": "Style fixes", "committedDate": "2020-10-29T16:19:59Z", "type": "commit"}]}