{"pr_number": 10003, "pr_title": "Remove \"Content-Length\" when decoding HTTP/1.1 message with both \"Tra\u2026", "pr_createdAt": "2020-02-06T20:13:54Z", "pr_url": "https://github.com/netty/netty/pull/10003", "timeline": [{"oid": "638d659675c681773ad1e48120e3f2f42db67492", "url": "https://github.com/netty/netty/commit/638d659675c681773ad1e48120e3f2f42db67492", "message": "Remove \"Content-Length\" when decoding HTTP/1.1 message with both \"Transfer-Encoding: chunked\" and \"Content-Length\"\n\nMotivation\n\nAs part of a recent commit for issue\nhttps://github.com/netty/netty/issues/9861 the HttpObjectDecoder was\nchanged to throw an IllegalArgumentException (and produce a failed\ndecoder result) when decoding a message with both \"Transfer-Encoding:\nchunked\" and \"Content-Length\".\n\nWhile it seems correct for Netty to try to sanitize these types of\nmessages, the spec explicitly mentions that the Content-Length header\nshould be *removed* in this scenario.\n\nBoth Nginx 1.15.9 and Tomcat 9.0.31 also opt to remove the header:\nhttps://github.com/apache/tomcat/blob/b693d7c1981fa7f51e58bc8c8e72e3fe80b7b773/java/org/apache/coyote/http11/Http11Processor.java#L747-L755\nhttps://github.com/nginx/nginx/blob/0ad4393e30c119d250415cb769e3d8bc8dce5186/src/http/ngx_http_request.c#L1946-L1953\n\nModifications\n\n* Change the default behavior from throwing an IllegalArgumentException\nto removing the \"Content-Length\" header\n* Extract the behavior to a new protected method,\nhandleChunkedEncodingWithContentLength(), that can be overridden to\nchange this behavior (or capture metrics)\n\nResult\n\nMessages of this nature will now be successfully decoded and have their\n\"Content-Length\" header removed, rather than creating invalid messages\n(decoder result failures). Users will be allowed to override and\nconfigure this behavior.", "committedDate": "2020-02-06T20:08:32Z", "type": "commit"}, {"oid": "508334c6ba1ba048fe99968dd150e2c7dee4bea1", "url": "https://github.com/netty/netty/commit/508334c6ba1ba048fe99968dd150e2c7dee4bea1", "message": "Remove \"Content-Length\" when decoding HTTP/1.1 message with both \"Transfer-Encoding: chunked\" and \"Content-Length\"\n\nMotivation\n\nAs part of a recent commit for issue\nhttps://github.com/netty/netty/issues/9861 the HttpObjectDecoder was\nchanged to throw an IllegalArgumentException (and produce a failed\ndecoder result) when decoding a message with both \"Transfer-Encoding:\nchunked\" and \"Content-Length\".\n\nWhile it seems correct for Netty to try to sanitize these types of\nmessages, the spec explicitly mentions that the Content-Length header\nshould be *removed* in this scenario.\n\n> If a message is received with both a Transfer-Encoding and a\n> Content-Length header field, the Transfer-Encoding overrides the\n> Content-Length. Such a message might indicate an attempt to\n> perform request smuggling (Section 9.5) or response splitting\n> (Section 9.4) and ought to be handled as an error. A sender MUST\n> remove the received Content-Length field prior to forwarding such\n> a message downstream.\n\nhttps://tools.ietf.org/html/rfc7230#section-3.3.3\n\n> If a Content-Length header field (section 14.13) is present, its\n> decimal value in OCTETs represents both the entity-length and the\n> transfer-length. The Content-Length header field MUST NOT be sent\n> if these two lengths are different (i.e., if a Transfer-Encoding\n> header field is present). If a message is received with both a\n> Transfer-Encoding header field and a Content-Length header field,\n> the latter MUST be ignored.\n\nhttps://tools.ietf.org/html/rfc2616#section-4.4\n\nBoth Nginx 1.15.9 and Tomcat 9.0.31 also opt to remove the header:\nhttps://github.com/nginx/nginx/blob/0ad4393e30c119d250415cb769e3d8bc8dce5186/src/http/ngx_http_request.c#L1946-L1953\nhttps://github.com/apache/tomcat/blob/b693d7c1981fa7f51e58bc8c8e72e3fe80b7b773/java/org/apache/coyote/http11/Http11Processor.java#L747-L755\n\nModifications\n\n* Change the default behavior from throwing an IllegalArgumentException\nto removing the \"Content-Length\" header\n* Extract the behavior to a new protected method,\nhandleTransferEncodingChunkedWithContentLength(), that can be overridden\nto change this behavior (or capture metrics)\n\nResult\n\nMessages of this nature will now be successfully decoded and have their\n\"Content-Length\" header removed, rather than creating invalid messages\n(decoder result failures). Users will be allowed to override and\nconfigure this behavior.", "committedDate": "2020-02-06T21:16:36Z", "type": "commit"}, {"oid": "32f4f77df91bb495ef20e31c8807d2bb288d7fc6", "url": "https://github.com/netty/netty/commit/32f4f77df91bb495ef20e31c8807d2bb288d7fc6", "message": "Remove \"Content-Length\" when decoding HTTP/1.1 message with both \"Transfer-Encoding: chunked\" and \"Content-Length\"\n\nMotivation\n\nAs part of a recent commit for issue\nhttps://github.com/netty/netty/issues/9861 the HttpObjectDecoder was\nchanged to throw an IllegalArgumentException (and produce a failed\ndecoder result) when decoding a message with both \"Transfer-Encoding:\nchunked\" and \"Content-Length\".\n\nWhile it seems correct for Netty to try to sanitize these types of\nmessages, the spec explicitly mentions that the Content-Length header\nshould be *removed* in this scenario.\n\n> If a message is received with both a Transfer-Encoding and a\n> Content-Length header field, the Transfer-Encoding overrides the\n> Content-Length. Such a message might indicate an attempt to\n> perform request smuggling (Section 9.5) or response splitting\n> (Section 9.4) and ought to be handled as an error. A sender MUST\n> remove the received Content-Length field prior to forwarding such\n> a message downstream.\n\nhttps://tools.ietf.org/html/rfc7230#section-3.3.3\n\n> If a Content-Length header field (section 14.13) is present, its\n> decimal value in OCTETs represents both the entity-length and the\n> transfer-length. The Content-Length header field MUST NOT be sent\n> if these two lengths are different (i.e., if a Transfer-Encoding\n> header field is present). If a message is received with both a\n> Transfer-Encoding header field and a Content-Length header field,\n> the latter MUST be ignored.\n\nhttps://tools.ietf.org/html/rfc2616#section-4.4\n\nBoth Nginx 1.15.9 and Tomcat 9.0.31 also opt to remove the header:\nhttps://github.com/nginx/nginx/blob/0ad4393e30c119d250415cb769e3d8bc8dce5186/src/http/ngx_http_request.c#L1946-L1953\nhttps://github.com/apache/tomcat/blob/b693d7c1981fa7f51e58bc8c8e72e3fe80b7b773/java/org/apache/coyote/http11/Http11Processor.java#L747-L755\n\nModifications\n\n* Change the default behavior from throwing an IllegalArgumentException\nto removing the \"Content-Length\" header\n* Extract the behavior to a new protected method,\nhandleTransferEncodingChunkedWithContentLength(), that can be overridden\nto change this behavior (or capture metrics)\n\nResult\n\nMessages of this nature will now be successfully decoded and have their\n\"Content-Length\" header removed, rather than creating invalid messages\n(decoder result failures). Users will be allowed to override and\nconfigure this behavior.", "committedDate": "2020-02-06T21:54:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI1ODY5OQ==", "url": "https://github.com/netty/netty/pull/10003#discussion_r376258699", "bodyText": "@Bennett-Lynch why change this to protected ?", "author": "normanmaurer", "createdAt": "2020-02-07T08:07:49Z", "path": "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java", "diffHunk": "@@ -112,7 +112,7 @@\n \n     private HttpMessage message;\n     private long chunkSize;\n-    private long contentLength = Long.MIN_VALUE;\n+    protected long contentLength = Long.MIN_VALUE;", "originalCommit": "32f4f77df91bb495ef20e31c8807d2bb288d7fc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxMjQ2OA==", "url": "https://github.com/netty/netty/pull/10003#discussion_r376512468", "bodyText": "I'm fine to revert this, but the motivation was to allow someone who is overriding handleTransferEncodingChunkedWithContentLength() to be able to manipulate this variable, if needed. I will revert this unless you think we should keep it.", "author": "Bennett-Lynch", "createdAt": "2020-02-07T17:26:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI1ODY5OQ=="}], "type": "inlineReview"}, {"oid": "da645c980866ae57a6dbf11f826168ef96ad545f", "url": "https://github.com/netty/netty/commit/da645c980866ae57a6dbf11f826168ef96ad545f", "message": "Remove \"Content-Length\" when decoding HTTP/1.1 message with both \"Transfer-Encoding: chunked\" and \"Content-Length\"\n\nMotivation\n\nAs part of a recent commit for issue\nhttps://github.com/netty/netty/issues/9861 the HttpObjectDecoder was\nchanged to throw an IllegalArgumentException (and produce a failed\ndecoder result) when decoding a message with both \"Transfer-Encoding:\nchunked\" and \"Content-Length\".\n\nWhile it seems correct for Netty to try to sanitize these types of\nmessages, the spec explicitly mentions that the Content-Length header\nshould be *removed* in this scenario.\n\n> If a message is received with both a Transfer-Encoding and a\n> Content-Length header field, the Transfer-Encoding overrides the\n> Content-Length. Such a message might indicate an attempt to\n> perform request smuggling (Section 9.5) or response splitting\n> (Section 9.4) and ought to be handled as an error. A sender MUST\n> remove the received Content-Length field prior to forwarding such\n> a message downstream.\n\nhttps://tools.ietf.org/html/rfc7230#section-3.3.3\n\n> If a Content-Length header field (section 14.13) is present, its\n> decimal value in OCTETs represents both the entity-length and the\n> transfer-length. The Content-Length header field MUST NOT be sent\n> if these two lengths are different (i.e., if a Transfer-Encoding\n> header field is present). If a message is received with both a\n> Transfer-Encoding header field and a Content-Length header field,\n> the latter MUST be ignored.\n\nhttps://tools.ietf.org/html/rfc2616#section-4.4\n\nBoth Nginx 1.15.9 and Tomcat 9.0.31 also opt to remove the header:\nhttps://github.com/nginx/nginx/blob/0ad4393e30c119d250415cb769e3d8bc8dce5186/src/http/ngx_http_request.c#L1946-L1953\nhttps://github.com/apache/tomcat/blob/b693d7c1981fa7f51e58bc8c8e72e3fe80b7b773/java/org/apache/coyote/http11/Http11Processor.java#L747-L755\n\nModifications\n\n* Change the default behavior from throwing an IllegalArgumentException\nto removing the \"Content-Length\" header\n* Extract the behavior to a new protected method,\nhandleTransferEncodingChunkedWithContentLength(), that can be overridden\nto change this behavior (or capture metrics)\n\nResult\n\nMessages of this nature will now be successfully decoded and have their\n\"Content-Length\" header removed, rather than creating invalid messages\n(decoder result failures). Users will be allowed to override and\nconfigure this behavior.", "committedDate": "2020-02-07T17:31:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc3OTM5NQ==", "url": "https://github.com/netty/netty/pull/10003#discussion_r382779395", "bodyText": "The phrase \"OUGHT TO\" conveys an optimistic assertion of an implementation behavior that is clearly morally right, and thus does not require substantiation.\n- https://tools.ietf.org/html/rfc6919#section-4\n\nThis seems to imply that this is a general expectation of all implementations. Thus, not doing this seems to indicate a diversion from the RFC spec?", "author": "JLLeitschuh", "createdAt": "2020-02-21T20:01:00Z", "path": "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java", "diffHunk": "@@ -657,6 +643,32 @@ private State readHeaders(ByteBuf buffer) {\n         }\n     }\n \n+    /**\n+     * Invoked when a message with both a \"Transfer-Encoding: chunked\" and a \"Content-Length\" header field is detected.\n+     * The default behavior is to <i>remove</i> the Content-Length field, but this method could be overridden\n+     * to change the behavior (to, e.g., throw an exception and produce an invalid message).\n+     * <p>\n+     * See: https://tools.ietf.org/html/rfc7230#section-3.3.3\n+     * <pre>\n+     *     If a message is received with both a Transfer-Encoding and a\n+     *     Content-Length header field, the Transfer-Encoding overrides the\n+     *     Content-Length.  Such a message might indicate an attempt to\n+     *     perform request smuggling (Section 9.5) or response splitting\n+     *     (Section 9.4) and ought to be handled as an error.  A sender MUST\n+     *     remove the received Content-Length field prior to forwarding such\n+     *     a message downstream.", "originalCommit": "da645c980866ae57a6dbf11f826168ef96ad545f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc4MTE0Mw==", "url": "https://github.com/netty/netty/pull/10003#discussion_r382781143", "bodyText": "From @joshbressers above:\n\nThis is correct behaviour according to RFC 2616\n\nIf a message is received with both a Transfer-Encoding header field and a Content-Length header field, the latter MUST be ignored.\n\n\nThat RFC is obsoleted by RFC7230 which states that the correct behaviour is to throw an exception when both 'Content-Type' and 'Transfer-Encoding' are present.", "author": "JLLeitschuh", "createdAt": "2020-02-21T20:05:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc3OTM5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyMjM3MQ==", "url": "https://github.com/netty/netty/pull/10003#discussion_r382822371", "bodyText": "RE: Ought To:\n\nhttps://tools.ietf.org/html/rfc6919#section-4\n\nAh, rfc6919 is an april fools RFC (ignore me on that point then).", "author": "JLLeitschuh", "createdAt": "2020-02-21T21:50:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc3OTM5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE0ODU1Mg==", "url": "https://github.com/netty/netty/pull/10003#discussion_r383148552", "bodyText": "While we're here, per RFC 8174 the normative key words only have their normative effect when rendered in uppercase. Thus, even if \"ought to\" were a relevant normative key word, the fact that it has been rendered lowercase means it's not intended to have normative effect.", "author": "Lukasa", "createdAt": "2020-02-24T09:17:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc3OTM5NQ=="}], "type": "inlineReview"}]}