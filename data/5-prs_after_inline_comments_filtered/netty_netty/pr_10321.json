{"pr_number": 10321, "pr_title": "[Issue-10320] More values other than chunked defined in Transfer-Encoding header leads to decode failure", "pr_createdAt": "2020-05-27T01:19:13Z", "pr_url": "https://github.com/netty/netty/pull/10321", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwMzQyNg==", "url": "https://github.com/netty/netty/pull/10321#discussion_r430903426", "bodyText": "you need to call c.release();", "author": "normanmaurer", "createdAt": "2020-05-27T07:13:46Z", "path": "codec-http/src/test/java/io/netty/handler/codec/http/HttpRequestDecoderTest.java", "diffHunk": "@@ -486,4 +486,23 @@ private static void testInvalidHeaders0(String requestStr) {\n         assertTrue(request.decoderResult().cause() instanceof IllegalArgumentException);\n         assertFalse(channel.finish());\n     }\n+\n+    @Test\n+    public void testTransferCodingGZIPAndChunked() {\n+        String requestStr = \"POST / HTTP/1.1\\r\\n\" +\n+                \"Host: example.com\\r\\n\" +\n+                \"Content-Type: application/x-www-form-urlencoded\\r\\n\" +\n+                \"Transfer-Encoding: gzip, chunked\\r\\n\" +\n+                \"\\r\\n\" +\n+                \"71\\r\\n\"\n+                ;\n+        EmbeddedChannel channel = new EmbeddedChannel(new HttpRequestDecoder());\n+        assertTrue(channel.writeInbound(Unpooled.copiedBuffer(requestStr, CharsetUtil.US_ASCII)));\n+        HttpRequest request = channel.readInbound();\n+        assertFalse(request.decoderResult().isFailure());\n+        assertTrue(request.headers().containsValue(\"Transfer-Encoding\", \"chunked\", true));\n+        assertFalse(request.headers().contains(\"Content-Length\"));\n+        LastHttpContent c = channel.readInbound();", "originalCommit": "399a39183f43ffc9104cb6e769c85b24b512bf1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzNDU4NQ==", "url": "https://github.com/netty/netty/pull/10321#discussion_r430934585", "bodyText": "Done by channel.releaseInbound()", "author": "gaol", "createdAt": "2020-05-27T08:10:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwMzQyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwMzU4NQ==", "url": "https://github.com/netty/netty/pull/10321#discussion_r430903585", "bodyText": "nit: move the ; one line up", "author": "normanmaurer", "createdAt": "2020-05-27T07:14:06Z", "path": "codec-http/src/test/java/io/netty/handler/codec/http/HttpRequestDecoderTest.java", "diffHunk": "@@ -486,4 +486,23 @@ private static void testInvalidHeaders0(String requestStr) {\n         assertTrue(request.decoderResult().cause() instanceof IllegalArgumentException);\n         assertFalse(channel.finish());\n     }\n+\n+    @Test\n+    public void testTransferCodingGZIPAndChunked() {\n+        String requestStr = \"POST / HTTP/1.1\\r\\n\" +\n+                \"Host: example.com\\r\\n\" +\n+                \"Content-Type: application/x-www-form-urlencoded\\r\\n\" +\n+                \"Transfer-Encoding: gzip, chunked\\r\\n\" +\n+                \"\\r\\n\" +\n+                \"71\\r\\n\"\n+                ;", "originalCommit": "399a39183f43ffc9104cb6e769c85b24b512bf1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzNDY1NQ==", "url": "https://github.com/netty/netty/pull/10321#discussion_r430934655", "bodyText": "Done", "author": "gaol", "createdAt": "2020-05-27T08:10:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwMzU4NQ=="}], "type": "inlineReview"}, {"oid": "acb2313a76da33492f88166b9d44186e5fb761d7", "url": "https://github.com/netty/netty/commit/acb2313a76da33492f88166b9d44186e5fb761d7", "message": "[Issue-10320] More values other than chunked defined in Transfer-Encoding header leads to decode failure", "committedDate": "2020-05-27T08:09:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI1OTgwNw==", "url": "https://github.com/netty/netty/pull/10321#discussion_r431259807", "bodyText": "Consider writing the full HTTP request (including one or two chunks + last (zero) chunk + some trailers) to make sure that decoder's state machine transitions to the correct state and handles the entire request correctly.", "author": "idelpivnitskiy", "createdAt": "2020-05-27T16:02:52Z", "path": "codec-http/src/test/java/io/netty/handler/codec/http/HttpRequestDecoderTest.java", "diffHunk": "@@ -486,4 +486,23 @@ private static void testInvalidHeaders0(String requestStr) {\n         assertTrue(request.decoderResult().cause() instanceof IllegalArgumentException);\n         assertFalse(channel.finish());\n     }\n+\n+    @Test\n+    public void testTransferCodingGZIPAndChunked() {\n+        String requestStr = \"POST / HTTP/1.1\\r\\n\" +\n+                \"Host: example.com\\r\\n\" +\n+                \"Content-Type: application/x-www-form-urlencoded\\r\\n\" +\n+                \"Transfer-Encoding: gzip, chunked\\r\\n\" +\n+                \"\\r\\n\" +\n+                \"71\\r\\n\";", "originalCommit": "acb2313a76da33492f88166b9d44186e5fb761d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI1ODM2Mw==", "url": "https://github.com/netty/netty/pull/10321#discussion_r432258363", "bodyText": "Done by move the tests to HttpContentDecoderTest to use the pre-defined gzipped hello world for testing.", "author": "gaol", "createdAt": "2020-05-29T05:10:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI1OTgwNw=="}], "type": "inlineReview"}, {"oid": "7e98c1a56794fce5ccf562b3968a0d5281b27dd7", "url": "https://github.com/netty/netty/commit/7e98c1a56794fce5ccf562b3968a0d5281b27dd7", "message": "[Issue-10320] More values other than chunked defined in Transfer-Encoding header leads to decode failure", "committedDate": "2020-05-29T05:06:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3MTUwMQ==", "url": "https://github.com/netty/netty/pull/10321#discussion_r432371501", "bodyText": "This can be changed to the following code to reduce the trim() operations and also reduce allocations:\nint idx = transferEncoding.indexOf(\",\");\nif (idx != -1) {\n    contentEncoding = transferEncoding.subString(0, idx).trim();\n} else {\n    contentEncoding = transferEncoding.trim();\n}", "author": "normanmaurer", "createdAt": "2020-05-29T09:38:41Z", "path": "codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java", "diffHunk": "@@ -85,7 +85,15 @@ protected void decode(ChannelHandlerContext ctx, HttpObject msg, List<Object> ou\n                 if (contentEncoding != null) {\n                     contentEncoding = contentEncoding.trim();\n                 } else {\n-                    contentEncoding = IDENTITY;\n+                    String transferEncoding = headers.get(HttpHeaderNames.TRANSFER_ENCODING);\n+                    if (transferEncoding != null) {\n+                        contentEncoding = transferEncoding.trim();\n+                        if (transferEncoding.contains(\",\")) {\n+                            contentEncoding = transferEncoding.split(\",\")[0].trim();\n+                        }", "originalCommit": "7e98c1a56794fce5ccf562b3968a0d5281b27dd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxOTM4MQ==", "url": "https://github.com/netty/netty/pull/10321#discussion_r432819381", "bodyText": "Thanks for the advice, Done", "author": "gaol", "createdAt": "2020-05-30T07:32:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3MTUwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0OTUxNg==", "url": "https://github.com/netty/netty/pull/10321#discussion_r432649516", "bodyText": "Consider using HttpHeaderNames.CONTENT_LENGTH constant.", "author": "idelpivnitskiy", "createdAt": "2020-05-29T18:00:32Z", "path": "codec-http/src/test/java/io/netty/handler/codec/http/HttpContentDecoderTest.java", "diffHunk": "@@ -563,6 +563,78 @@ public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n         assertEquals(0, content.refCnt());\n     }\n \n+    @Test\n+    public void testTransferCodingGZIP() {\n+        String requestStr = \"POST / HTTP/1.1\\r\\n\" +\n+                \"Content-Length: \" + GZ_HELLO_WORLD.length + \"\\r\\n\" +\n+                \"Transfer-Encoding: gzip\\r\\n\" +\n+                \"\\r\\n\";\n+        HttpRequestDecoder decoder = new HttpRequestDecoder();\n+        HttpContentDecoder decompressor = new HttpContentDecompressor();\n+        EmbeddedChannel channel = new EmbeddedChannel(decoder, decompressor);\n+\n+        channel.writeInbound(Unpooled.copiedBuffer(requestStr.getBytes()));\n+        channel.writeInbound(Unpooled.copiedBuffer(GZ_HELLO_WORLD));\n+\n+        HttpRequest request = channel.readInbound();\n+        assertTrue(request.decoderResult().isSuccess());\n+        assertFalse(request.headers().contains(\"Content-Length\"));", "originalCommit": "7e98c1a56794fce5ccf562b3968a0d5281b27dd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxOTM0OA==", "url": "https://github.com/netty/netty/pull/10321#discussion_r432819348", "bodyText": "Done", "author": "gaol", "createdAt": "2020-05-30T07:32:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0OTUxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY1MDYzMw==", "url": "https://github.com/netty/netty/pull/10321#discussion_r432650633", "bodyText": "Looks like too many \\r\\n. Should we have only 2 pairs instead of 3?", "author": "idelpivnitskiy", "createdAt": "2020-05-29T18:02:56Z", "path": "codec-http/src/test/java/io/netty/handler/codec/http/HttpContentDecoderTest.java", "diffHunk": "@@ -563,6 +563,78 @@ public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n         assertEquals(0, content.refCnt());\n     }\n \n+    @Test\n+    public void testTransferCodingGZIP() {\n+        String requestStr = \"POST / HTTP/1.1\\r\\n\" +\n+                \"Content-Length: \" + GZ_HELLO_WORLD.length + \"\\r\\n\" +\n+                \"Transfer-Encoding: gzip\\r\\n\" +\n+                \"\\r\\n\";\n+        HttpRequestDecoder decoder = new HttpRequestDecoder();\n+        HttpContentDecoder decompressor = new HttpContentDecompressor();\n+        EmbeddedChannel channel = new EmbeddedChannel(decoder, decompressor);\n+\n+        channel.writeInbound(Unpooled.copiedBuffer(requestStr.getBytes()));\n+        channel.writeInbound(Unpooled.copiedBuffer(GZ_HELLO_WORLD));\n+\n+        HttpRequest request = channel.readInbound();\n+        assertTrue(request.decoderResult().isSuccess());\n+        assertFalse(request.headers().contains(\"Content-Length\"));\n+\n+        HttpContent content = channel.readInbound();\n+        assertTrue(content.decoderResult().isSuccess());\n+        assertEquals(HELLO_WORLD, content.content().toString(CharsetUtil.US_ASCII));\n+        content.release();\n+\n+        LastHttpContent lastHttpContent = channel.readInbound();\n+        assertTrue(lastHttpContent.decoderResult().isSuccess());\n+        lastHttpContent.release();\n+\n+        assertHasInboundMessages(channel, false);\n+        assertHasOutboundMessages(channel, false);\n+        assertFalse(channel.finish());\n+        channel.releaseInbound();\n+    }\n+\n+    @Test\n+    public void testTransferCodingGZIPAndChunked() {\n+        String requestStr = \"POST / HTTP/1.1\\r\\n\" +\n+                \"Host: example.com\\r\\n\" +\n+                \"Content-Type: application/x-www-form-urlencoded\\r\\n\" +\n+                \"Trailer: My-Trailer\\r\\n\" +\n+                \"Transfer-Encoding: gzip, chunked\\r\\n\" +\n+                \"\\r\\n\";\n+        HttpRequestDecoder decoder = new HttpRequestDecoder();\n+        HttpContentDecoder decompressor = new HttpContentDecompressor();\n+        EmbeddedChannel channel = new EmbeddedChannel(decoder, decompressor);\n+\n+        assertTrue(channel.writeInbound(Unpooled.copiedBuffer(requestStr, CharsetUtil.US_ASCII)));\n+\n+        String chunkLength = Integer.toHexString(GZ_HELLO_WORLD.length);\n+        assertTrue(channel.writeInbound(Unpooled.copiedBuffer(chunkLength + \"\\r\\n\", CharsetUtil.US_ASCII)));\n+        assertTrue(channel.writeInbound(Unpooled.copiedBuffer(GZ_HELLO_WORLD)));\n+        assertTrue(channel.writeInbound(Unpooled.copiedBuffer(\"\\r\\n\".getBytes(CharsetUtil.US_ASCII))));\n+        assertTrue(channel.writeInbound(Unpooled.copiedBuffer(\"0\\r\\n\", CharsetUtil.US_ASCII)));\n+        assertTrue(channel.writeInbound(Unpooled.copiedBuffer(\"My-Trailer: 42\\r\\n\\r\\n\\r\\n\", CharsetUtil.US_ASCII)));", "originalCommit": "7e98c1a56794fce5ccf562b3968a0d5281b27dd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgyMDM3OA==", "url": "https://github.com/netty/netty/pull/10321#discussion_r432820378", "bodyText": "Yeah, that is right. thanks for pointing out. done", "author": "gaol", "createdAt": "2020-05-30T07:49:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY1MDYzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY1MDk4Ng==", "url": "https://github.com/netty/netty/pull/10321#discussion_r432650986", "bodyText": "Consider using constants from HttpHeaderNames and HttpHeaderValues.", "author": "idelpivnitskiy", "createdAt": "2020-05-29T18:03:38Z", "path": "codec-http/src/test/java/io/netty/handler/codec/http/HttpContentDecoderTest.java", "diffHunk": "@@ -563,6 +563,78 @@ public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n         assertEquals(0, content.refCnt());\n     }\n \n+    @Test\n+    public void testTransferCodingGZIP() {\n+        String requestStr = \"POST / HTTP/1.1\\r\\n\" +\n+                \"Content-Length: \" + GZ_HELLO_WORLD.length + \"\\r\\n\" +\n+                \"Transfer-Encoding: gzip\\r\\n\" +\n+                \"\\r\\n\";\n+        HttpRequestDecoder decoder = new HttpRequestDecoder();\n+        HttpContentDecoder decompressor = new HttpContentDecompressor();\n+        EmbeddedChannel channel = new EmbeddedChannel(decoder, decompressor);\n+\n+        channel.writeInbound(Unpooled.copiedBuffer(requestStr.getBytes()));\n+        channel.writeInbound(Unpooled.copiedBuffer(GZ_HELLO_WORLD));\n+\n+        HttpRequest request = channel.readInbound();\n+        assertTrue(request.decoderResult().isSuccess());\n+        assertFalse(request.headers().contains(\"Content-Length\"));\n+\n+        HttpContent content = channel.readInbound();\n+        assertTrue(content.decoderResult().isSuccess());\n+        assertEquals(HELLO_WORLD, content.content().toString(CharsetUtil.US_ASCII));\n+        content.release();\n+\n+        LastHttpContent lastHttpContent = channel.readInbound();\n+        assertTrue(lastHttpContent.decoderResult().isSuccess());\n+        lastHttpContent.release();\n+\n+        assertHasInboundMessages(channel, false);\n+        assertHasOutboundMessages(channel, false);\n+        assertFalse(channel.finish());\n+        channel.releaseInbound();\n+    }\n+\n+    @Test\n+    public void testTransferCodingGZIPAndChunked() {\n+        String requestStr = \"POST / HTTP/1.1\\r\\n\" +\n+                \"Host: example.com\\r\\n\" +\n+                \"Content-Type: application/x-www-form-urlencoded\\r\\n\" +\n+                \"Trailer: My-Trailer\\r\\n\" +\n+                \"Transfer-Encoding: gzip, chunked\\r\\n\" +\n+                \"\\r\\n\";\n+        HttpRequestDecoder decoder = new HttpRequestDecoder();\n+        HttpContentDecoder decompressor = new HttpContentDecompressor();\n+        EmbeddedChannel channel = new EmbeddedChannel(decoder, decompressor);\n+\n+        assertTrue(channel.writeInbound(Unpooled.copiedBuffer(requestStr, CharsetUtil.US_ASCII)));\n+\n+        String chunkLength = Integer.toHexString(GZ_HELLO_WORLD.length);\n+        assertTrue(channel.writeInbound(Unpooled.copiedBuffer(chunkLength + \"\\r\\n\", CharsetUtil.US_ASCII)));\n+        assertTrue(channel.writeInbound(Unpooled.copiedBuffer(GZ_HELLO_WORLD)));\n+        assertTrue(channel.writeInbound(Unpooled.copiedBuffer(\"\\r\\n\".getBytes(CharsetUtil.US_ASCII))));\n+        assertTrue(channel.writeInbound(Unpooled.copiedBuffer(\"0\\r\\n\", CharsetUtil.US_ASCII)));\n+        assertTrue(channel.writeInbound(Unpooled.copiedBuffer(\"My-Trailer: 42\\r\\n\\r\\n\\r\\n\", CharsetUtil.US_ASCII)));\n+\n+        HttpRequest request = channel.readInbound();\n+        assertTrue(request.decoderResult().isSuccess());\n+        assertTrue(request.headers().containsValue(\"Transfer-Encoding\", \"chunked\", true));\n+        assertFalse(request.headers().contains(\"Content-Length\"));", "originalCommit": "7e98c1a56794fce5ccf562b3968a0d5281b27dd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxOTc0MQ==", "url": "https://github.com/netty/netty/pull/10321#discussion_r432819741", "bodyText": "Done", "author": "gaol", "createdAt": "2020-05-30T07:38:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY1MDk4Ng=="}], "type": "inlineReview"}, {"oid": "7cadd572d687471e51646a481b1583bd3a2a1840", "url": "https://github.com/netty/netty/commit/7cadd572d687471e51646a481b1583bd3a2a1840", "message": "[Issue-10320] More values other than chunked defined in Transfer-Encoding header leads to decode failure", "committedDate": "2020-05-30T07:51:28Z", "type": "commit"}, {"oid": "7cadd572d687471e51646a481b1583bd3a2a1840", "url": "https://github.com/netty/netty/commit/7cadd572d687471e51646a481b1583bd3a2a1840", "message": "[Issue-10320] More values other than chunked defined in Transfer-Encoding header leads to decode failure", "committedDate": "2020-05-30T07:51:28Z", "type": "forcePushed"}]}