{"pr_number": 10588, "pr_title": "Add IOUringDatagramChannel and so also support UDP", "pr_createdAt": "2020-09-18T13:49:43Z", "pr_url": "https://github.com/netty/netty/pull/10588", "timeline": [{"oid": "4c22abfbbf946074410a360071c5690c0f57b837", "url": "https://github.com/netty/netty/commit/4c22abfbbf946074410a360071c5690c0f57b837", "message": "Add IOUringDatagramChannel and so also support UDP\n\nMotivation:\n\nWe can also support UDP / Datagram based on io_uring, so we should do it\nfor maximal performance\n\nModifications:\n\n- Add IOUringDatagramChannel\n- Add tests based on our transport testsuite for it\n\nResult:\n\nUDP / Datagram is supported via io_uring as well now", "committedDate": "2020-09-18T13:49:15Z", "type": "forcePushed"}, {"oid": "80b41e1b3d006b103993c5560317c6f27b968e6d", "url": "https://github.com/netty/netty/commit/80b41e1b3d006b103993c5560317c6f27b968e6d", "message": "Add IOUringDatagramChannel and so also support UDP\n\nMotivation:\n\nWe can also support UDP / Datagram based on io_uring, so we should do it\nfor maximal performance\n\nModifications:\n\n- Add IOUringDatagramChannel\n- Add tests based on our transport testsuite for it\n\nResult:\n\nUDP / Datagram is supported via io_uring as well now", "committedDate": "2020-09-18T14:31:57Z", "type": "forcePushed"}, {"oid": "fb6d9360de71dfb223ee28312e7ca4e371390047", "url": "https://github.com/netty/netty/commit/fb6d9360de71dfb223ee28312e7ca4e371390047", "message": "Add IOUringDatagramChannel and so also support UDP\n\nMotivation:\n\nWe can also support UDP / Datagram based on io_uring, so we should do it\nfor maximal performance\n\nModifications:\n\n- Add IOUringDatagramChannel\n- Add tests based on our transport testsuite for it\n\nResult:\n\nUDP / Datagram is supported via io_uring as well now", "committedDate": "2020-09-18T14:35:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTMzNjI5NQ==", "url": "https://github.com/netty/netty/pull/10588#discussion_r491336295", "bodyText": "nit: Copyright 2020", "author": "1Jo1", "createdAt": "2020-09-19T08:50:44Z", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "diffHunk": "@@ -0,0 +1,550 @@\n+/*\n+ * Copyright 2014 The Netty Project", "originalCommit": "5a3a453c50120306ef72ef369ab0e8ce96a32a20", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTMzNjUyMg==", "url": "https://github.com/netty/netty/pull/10588#discussion_r491336522", "bodyText": "nit: 2020", "author": "1Jo1", "createdAt": "2020-09-19T08:51:20Z", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannelConfig.java", "diffHunk": "@@ -0,0 +1,466 @@\n+/*\n+ * Copyright 2012 The Netty Project", "originalCommit": "5a3a453c50120306ef72ef369ab0e8ce96a32a20", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ac52d5a4d5e342b05263c8f9246cc59ec5e1063c", "url": "https://github.com/netty/netty/commit/ac52d5a4d5e342b05263c8f9246cc59ec5e1063c", "message": "Add IOUringDatagramChannel and so also support UDP\n\nMotivation:\n\nWe can also support UDP / Datagram based on io_uring, so we should do it\nfor maximal performance\n\nModifications:\n\n- Add IOUringDatagramChannel\n- Add tests based on our transport testsuite for it\n\nResult:\n\nUDP / Datagram is supported via io_uring as well now", "committedDate": "2020-09-21T07:06:26Z", "type": "forcePushed"}, {"oid": "b3c938e0315422c8f0c3a425ebada88cd9a09f9f", "url": "https://github.com/netty/netty/commit/b3c938e0315422c8f0c3a425ebada88cd9a09f9f", "message": "Add IOUringDatagramChannel and so also support UDP\n\nMotivation:\n\nWe can also support UDP / Datagram based on io_uring, so we should do it\nfor maximal performance\n\nModifications:\n\n- Add IOUringDatagramChannel\n- Add tests based on our transport testsuite for it\n\nResult:\n\nUDP / Datagram is supported via io_uring as well now", "committedDate": "2020-09-21T08:09:47Z", "type": "forcePushed"}, {"oid": "d9eaa79bf3d090eb9b4d1cf8ceca5484e5665ddc", "url": "https://github.com/netty/netty/commit/d9eaa79bf3d090eb9b4d1cf8ceca5484e5665ddc", "message": "Cleanup", "committedDate": "2020-09-22T07:45:57Z", "type": "forcePushed"}, {"oid": "81f083aab90dffa96cb9adf2732a9eedd83876ee", "url": "https://github.com/netty/netty/commit/81f083aab90dffa96cb9adf2732a9eedd83876ee", "message": "Cleanup", "committedDate": "2020-09-22T09:05:28Z", "type": "forcePushed"}, {"oid": "d4b9bd5301ac1efc9f4859e8743b7225621dd147", "url": "https://github.com/netty/netty/commit/d4b9bd5301ac1efc9f4859e8743b7225621dd147", "message": "Add IOUringDatagramChannel and so also support UDP\n\nMotivation:\n\nWe can also support UDP / Datagram based on io_uring, so we should do it\nfor maximal performance\n\nModifications:\n\n- Add IOUringDatagramChannel\n- Add tests based on our transport testsuite for it\n\nResult:\n\nUDP / Datagram is supported via io_uring as well now", "committedDate": "2020-09-22T11:34:42Z", "type": "forcePushed"}, {"oid": "c188e697e14f8b8e2573ebb7c0501b673155d0d0", "url": "https://github.com/netty/netty/commit/c188e697e14f8b8e2573ebb7c0501b673155d0d0", "message": "Add IOUringDatagramChannel and so also support UDP\n\nMotivation:\n\nWe can also support UDP / Datagram based on io_uring, so we should do it\nfor maximal performance\n\nModifications:\n\n- Add IOUringDatagramChannel\n- Add tests based on our transport testsuite for it\n\nResult:\n\nUDP / Datagram is supported via io_uring as well now", "committedDate": "2020-09-22T12:11:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkwNjI5Mg==", "url": "https://github.com/netty/netty/pull/10588#discussion_r492906292", "bodyText": "I think size_t and void* usually have the same size, and it looks like we intend to support 32-bit platforms.", "author": "chrisvest", "createdAt": "2020-09-22T17:20:21Z", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/Iov.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.channel.uring;\n+\n+import io.netty.util.internal.PlatformDependent;\n+\n+final class Iov {\n+\n+    private Iov() { }\n+\n+    static void write(long iovAddress, long bufferAddress, int length) {\n+        PlatformDependent.putLong(iovAddress + Native.IOVEC_OFFSETOF_IOV_BASE, bufferAddress);", "originalCommit": "c188e697e14f8b8e2573ebb7c0501b673155d0d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkwNjk3OA==", "url": "https://github.com/netty/netty/pull/10588#discussion_r492906978", "bodyText": "I really like that we have a copy of the struct we're modelling, in the javadoc. We could do that for Iov as well.", "author": "chrisvest", "createdAt": "2020-09-22T17:21:25Z", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/MsgHdr.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.channel.uring;\n+\n+import io.netty.util.internal.PlatformDependent;\n+\n+/**\n+ * struct msghdr {\n+ *     void         *msg_name;       // optional address\n+ *     socklen_t    msg_namelen;     // size of address\n+ *     struct       iovec*msg_iov;   // scatter/gather array\n+ *     size_t       msg_iovlen;      // # elements in msg_iov\n+ *     void*        msg_control;     // ancillary data, see below\n+ *     size_t       msg_controllen;  // ancillary data buffer len\n+ *     int          msg_flags;       // flags on received message\n+ * };", "originalCommit": "c188e697e14f8b8e2573ebb7c0501b673155d0d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkyOTEwMw==", "url": "https://github.com/netty/netty/pull/10588#discussion_r492929103", "bodyText": "Why is this necessary? It's only called from doDisconnect after the socket is closed?", "author": "chrisvest", "createdAt": "2020-09-22T17:58:03Z", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/AbstractIOUringChannel.java", "diffHunk": "@@ -286,56 +282,53 @@ private void scheduleWrite(ChannelOutboundBuffer in) {\n         if (msgCount == 0) {\n             return;\n         }\n-        ByteBuf msg = (ByteBuf) in.current();\n-        if (msgCount > 1 ||\n-                // We also need some special handling for CompositeByteBuf\n-                msg.nioBufferCount() > 1) {\n-            doWriteMultiple(in);\n-        } else if (msgCount == 1) {\n-            doWriteSingle(msg);\n-        }\n-    }\n-\n-     private void doWriteMultiple(ChannelOutboundBuffer in) {\n-         final IovArray iovecArray = ((IOUringEventLoop) eventLoop()).iovArray();\n-         try {\n-             int offset = iovecArray.count();\n-             in.forEachFlushedMessage(iovecArray);\n-             submissionQueue().addWritev(socket.intValue(),\n-                     iovecArray.memoryAddress(offset), iovecArray.count() - offset);\n-             ioState |= WRITE_SCHEDULED;\n-         } catch (Exception e) {\n-             // This should never happen, anyway fallback to single write.\n-             doWriteSingle((ByteBuf) in.current());\n-         }\n-     }\n-\n-    protected final void doWriteSingle(ByteBuf buf) {\n+        Object msg = in.current();\n+\n         assert (ioState & WRITE_SCHEDULED) == 0;\n-        IOUringSubmissionQueue submissionQueue = submissionQueue();\n-        submissionQueue.addWrite(socket.intValue(), buf.memoryAddress(), buf.readerIndex(),\n-                buf.writerIndex());\n+        if (msgCount > 1) {\n+            ioUringUnsafe().scheduleWriteMultiple(in);\n+        } else if ((msg instanceof ByteBuf) && ((ByteBuf) msg).nioBufferCount() > 1 ||\n+                    ((msg instanceof ByteBufHolder) && ((ByteBufHolder) msg).content().nioBufferCount() > 1)) {\n+            // We also need some special handling for CompositeByteBuf\n+            ioUringUnsafe().scheduleWriteMultiple(in);\n+        } else {\n+            ioUringUnsafe().scheduleWriteSingle(msg);\n+        }\n         ioState |= WRITE_SCHEDULED;\n     }\n \n-    //POLLOUT\n     private void schedulePollOut() {\n         assert (ioState & POLL_OUT_SCHEDULED) == 0;\n         IOUringSubmissionQueue submissionQueue = submissionQueue();\n         submissionQueue.addPollOut(socket.intValue());\n         ioState |= POLL_OUT_SCHEDULED;\n     }\n \n-    void schedulePollRdHup() {\n+    final void schedulePollRdHup() {\n         assert (ioState & POLL_RDHUP_SCHEDULED) == 0;\n         IOUringSubmissionQueue submissionQueue = submissionQueue();\n         submissionQueue.addPollRdHup(fd().intValue());\n         ioState |= POLL_RDHUP_SCHEDULED;\n     }\n \n+    final void resetCachedAddresses() {\n+        local = socket.localAddress();\n+        remote = socket.remoteAddress();", "originalCommit": "c188e697e14f8b8e2573ebb7c0501b673155d0d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIyMjg5NQ==", "url": "https://github.com/netty/netty/pull/10588#discussion_r493222895", "bodyText": "with datagram there is a difference between close and disconnect. It's possible that a datagram fd is connected / disconnected multiple times without closing the underlying fd. Thats why we need to reset the cached addresses.", "author": "normanmaurer", "createdAt": "2020-09-23T06:18:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkyOTEwMw=="}], "type": "inlineReview"}, {"oid": "cc99f675c2874c46bd133a5625af4a2fcddf053e", "url": "https://github.com/netty/netty/commit/cc99f675c2874c46bd133a5625af4a2fcddf053e", "message": "cleanup", "committedDate": "2020-09-23T09:12:52Z", "type": "forcePushed"}, {"oid": "8fa3688aaa34eb9922327c4d8be5a336b2c94973", "url": "https://github.com/netty/netty/commit/8fa3688aaa34eb9922327c4d8be5a336b2c94973", "message": "Add IOUringDatagramChannel and so also support UDP\n\nMotivation:\n\nWe can also support UDP / Datagram based on io_uring, so we should do it\nfor maximal performance\n\nModifications:\n\n- Add IOUringDatagramChannel\n- Add tests based on our transport testsuite for it\n\nResult:\n\nUDP / Datagram is supported via io_uring as well now", "committedDate": "2020-09-23T09:20:41Z", "type": "commit"}, {"oid": "8fa3688aaa34eb9922327c4d8be5a336b2c94973", "url": "https://github.com/netty/netty/commit/8fa3688aaa34eb9922327c4d8be5a336b2c94973", "message": "Add IOUringDatagramChannel and so also support UDP\n\nMotivation:\n\nWe can also support UDP / Datagram based on io_uring, so we should do it\nfor maximal performance\n\nModifications:\n\n- Add IOUringDatagramChannel\n- Add tests based on our transport testsuite for it\n\nResult:\n\nUDP / Datagram is supported via io_uring as well now", "committedDate": "2020-09-23T09:20:41Z", "type": "forcePushed"}]}