{"pr_number": 10492, "pr_title": "Binary search based IpSubnetFilter", "pr_createdAt": "2020-08-20T17:14:54Z", "pr_url": "https://github.com/netty/netty/pull/10492", "timeline": [{"oid": "c4765051cb0992f1ef925bef095898e75223635d", "url": "https://github.com/netty/netty/commit/c4765051cb0992f1ef925bef095898e75223635d", "message": "Binary search based IpSubnetFilter for filtering IP addresses", "committedDate": "2020-08-20T17:12:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE2NzI1Mg==", "url": "https://github.com/netty/netty/pull/10492#discussion_r474167252", "bodyText": "We should consider adding IpSubnetFilterRuleComparator.INSTANCE, mark the constructor private and reuse the same instance everywhere", "author": "normanmaurer", "createdAt": "2020-08-20T17:50:59Z", "path": "handler/src/main/java/io/netty/handler/ipfilter/IpSubnetFilter.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.ipfilter;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandler.Sharable;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.util.internal.ObjectUtil;\n+\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * This class allows one to filter new {@link Channel}s based on the\n+ * {@link IpSubnetFilter}s passed to its constructor. If no rules are provided, all connections\n+ * will be accepted.\n+ * <p>\n+ * If you would like to explicitly take action on rejected {@link Channel}s, you should override\n+ * {@link #channelRejected(ChannelHandlerContext, SocketAddress)}.\n+ */\n+@Sharable\n+public class IpSubnetFilter extends AbstractRemoteAddressFilter<InetSocketAddress> {\n+\n+    private final List<IpSubnetFilterRule> rules = new ArrayList<IpSubnetFilterRule>();\n+\n+    public IpSubnetFilter(IpSubnetFilterRule... rules) {\n+        ObjectUtil.checkNotNull(rules, \"rules\");\n+\n+        // Iterate over rules and check for `null` and add them to List\n+        for (IpSubnetFilterRule ipSubnetFilterRule : rules) {\n+            ObjectUtil.checkNotNull(ipSubnetFilterRule, \"rule\");\n+            this.rules.add(ipSubnetFilterRule);\n+        }\n+\n+        Collections.sort(this.rules, new IpSubnetFilterRuleComparator());\n+    }\n+\n+    public IpSubnetFilter(List<IpSubnetFilterRule> rules) {\n+        ObjectUtil.checkNotNull(rules, \"rules\");\n+\n+        // Iterate over rules and check for `null` and add them to List\n+        for (IpSubnetFilterRule ipSubnetFilterRule : rules) {\n+            ObjectUtil.checkNotNull(ipSubnetFilterRule, \"rule\");\n+            this.rules.add(ipSubnetFilterRule);\n+        }\n+\n+        Collections.sort(this.rules, new IpSubnetFilterRuleComparator());\n+    }\n+\n+    @Override\n+    protected boolean accept(ChannelHandlerContext ctx, InetSocketAddress remoteAddress) {\n+        int indexOf = Collections.binarySearch(this.rules, remoteAddress, new IpSubnetFilterRuleComparator());", "originalCommit": "c4765051cb0992f1ef925bef095898e75223635d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3ODkzMg==", "url": "https://github.com/netty/netty/pull/10492#discussion_r474178932", "bodyText": "I'll do that.", "author": "hyperxpro", "createdAt": "2020-08-20T18:12:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE2NzI1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDczMzkyMw==", "url": "https://github.com/netty/netty/pull/10492#discussion_r474733923", "bodyText": "Done", "author": "hyperxpro", "createdAt": "2020-08-21T14:28:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE2NzI1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE2MzcyOQ==", "url": "https://github.com/netty/netty/pull/10492#discussion_r474163729", "bodyText": "The rules are all Comparable, so we don't need the comparator, no?", "author": "chrisvest", "createdAt": "2020-08-20T17:44:35Z", "path": "handler/src/main/java/io/netty/handler/ipfilter/IpSubnetFilter.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.ipfilter;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandler.Sharable;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.util.internal.ObjectUtil;\n+\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * This class allows one to filter new {@link Channel}s based on the\n+ * {@link IpSubnetFilter}s passed to its constructor. If no rules are provided, all connections\n+ * will be accepted.\n+ * <p>\n+ * If you would like to explicitly take action on rejected {@link Channel}s, you should override\n+ * {@link #channelRejected(ChannelHandlerContext, SocketAddress)}.\n+ */\n+@Sharable\n+public class IpSubnetFilter extends AbstractRemoteAddressFilter<InetSocketAddress> {\n+\n+    private final List<IpSubnetFilterRule> rules = new ArrayList<IpSubnetFilterRule>();\n+\n+    public IpSubnetFilter(IpSubnetFilterRule... rules) {\n+        ObjectUtil.checkNotNull(rules, \"rules\");\n+\n+        // Iterate over rules and check for `null` and add them to List\n+        for (IpSubnetFilterRule ipSubnetFilterRule : rules) {\n+            ObjectUtil.checkNotNull(ipSubnetFilterRule, \"rule\");\n+            this.rules.add(ipSubnetFilterRule);\n+        }\n+\n+        Collections.sort(this.rules, new IpSubnetFilterRuleComparator());", "originalCommit": "c4765051cb0992f1ef925bef095898e75223635d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3OTUzNQ==", "url": "https://github.com/netty/netty/pull/10492#discussion_r474179535", "bodyText": "Collections#binarySearch requires Comparator. Can't skip.", "author": "hyperxpro", "createdAt": "2020-08-20T18:13:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE2MzcyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQzNjYzNw==", "url": "https://github.com/netty/netty/pull/10492#discussion_r474436637", "bodyText": "I mean, for the sort method calls.", "author": "chrisvest", "createdAt": "2020-08-21T06:35:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE2MzcyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU2MDA3Mg==", "url": "https://github.com/netty/netty/pull/10492#discussion_r474560072", "bodyText": "IpSubnetFilterRuleComparator can be static field.", "author": "johnou", "createdAt": "2020-08-21T09:12:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE2MzcyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDcxNDQ1NA==", "url": "https://github.com/netty/netty/pull/10492#discussion_r474714454", "bodyText": "Fixed", "author": "hyperxpro", "createdAt": "2020-08-21T13:56:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE2MzcyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE2NDI3NQ==", "url": "https://github.com/netty/netty/pull/10492#discussion_r474164275", "bodyText": "Same here.", "author": "chrisvest", "createdAt": "2020-08-20T17:45:34Z", "path": "handler/src/main/java/io/netty/handler/ipfilter/IpSubnetFilter.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.ipfilter;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandler.Sharable;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.util.internal.ObjectUtil;\n+\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * This class allows one to filter new {@link Channel}s based on the\n+ * {@link IpSubnetFilter}s passed to its constructor. If no rules are provided, all connections\n+ * will be accepted.\n+ * <p>\n+ * If you would like to explicitly take action on rejected {@link Channel}s, you should override\n+ * {@link #channelRejected(ChannelHandlerContext, SocketAddress)}.\n+ */\n+@Sharable\n+public class IpSubnetFilter extends AbstractRemoteAddressFilter<InetSocketAddress> {\n+\n+    private final List<IpSubnetFilterRule> rules = new ArrayList<IpSubnetFilterRule>();\n+\n+    public IpSubnetFilter(IpSubnetFilterRule... rules) {\n+        ObjectUtil.checkNotNull(rules, \"rules\");\n+\n+        // Iterate over rules and check for `null` and add them to List\n+        for (IpSubnetFilterRule ipSubnetFilterRule : rules) {\n+            ObjectUtil.checkNotNull(ipSubnetFilterRule, \"rule\");\n+            this.rules.add(ipSubnetFilterRule);\n+        }\n+\n+        Collections.sort(this.rules, new IpSubnetFilterRuleComparator());\n+    }\n+\n+    public IpSubnetFilter(List<IpSubnetFilterRule> rules) {\n+        ObjectUtil.checkNotNull(rules, \"rules\");\n+\n+        // Iterate over rules and check for `null` and add them to List\n+        for (IpSubnetFilterRule ipSubnetFilterRule : rules) {\n+            ObjectUtil.checkNotNull(ipSubnetFilterRule, \"rule\");\n+            this.rules.add(ipSubnetFilterRule);\n+        }\n+\n+        Collections.sort(this.rules, new IpSubnetFilterRuleComparator());", "originalCommit": "c4765051cb0992f1ef925bef095898e75223635d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDcxNDU1OA==", "url": "https://github.com/netty/netty/pull/10492#discussion_r474714558", "bodyText": "Fixed", "author": "hyperxpro", "createdAt": "2020-08-21T13:57:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE2NDI3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3NTI2NQ==", "url": "https://github.com/netty/netty/pull/10492#discussion_r474175265", "bodyText": "This is a rather strange comparator, that skimps on the reciprocity rule, and only kind of makes sense in this narrow use case. And then it also relies on the implementation details of Collections.binarySearch a bit. It's also not clear if it actually works as intended. I'd rather see a bespoke and well tested implementation of binary search as a helper method for IpSubnetFilter.accept, that incorporates the special comparison logic.", "author": "chrisvest", "createdAt": "2020-08-20T18:05:34Z", "path": "handler/src/main/java/io/netty/handler/ipfilter/IpSubnetFilterRuleComparator.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.ipfilter;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Comparator;\n+\n+final class IpSubnetFilterRuleComparator implements Comparator<Object> {\n+\n+    @Override\n+    public int compare(Object o1, Object o2) {\n+        if (o1 instanceof IpSubnetFilterRule) {\n+            if (o2 instanceof IpSubnetFilterRule) {\n+                return ((IpSubnetFilterRule) o1).compareTo((IpSubnetFilterRule) o2);\n+            } else if (o2 instanceof InetSocketAddress) {\n+                return ((IpSubnetFilterRule) o1).matches((InetSocketAddress) o2) ? 0 : -1;\n+            }\n+        }\n+        return -1;", "originalCommit": "c4765051cb0992f1ef925bef095898e75223635d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE5MzI0MA==", "url": "https://github.com/netty/netty/pull/10492#discussion_r474193240", "bodyText": "Binary search requires me to pass same class type as key. So if I wanna search InetSocketAddress in list of IpSubnetFilterRule, it's not possible. So I used Object here.\no1 will always be IpSubnetFilterRule.\no2 will be:\n\n\nIpSubnetFilterRule if we're sorting. (It'll use networkAddress for sort)\n\n\nInetSocketAddress if we're searching. (It'll simply use 'matches' method).\n\n\nYou have a better approach for this?", "author": "hyperxpro", "createdAt": "2020-08-20T18:38:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3NTI2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU0NzQwNQ==", "url": "https://github.com/netty/netty/pull/10492#discussion_r474547405", "bodyText": "Yes, this particular use of binary search is a little unusual. That's why I suggested to either reimplement a bespoke binary search, that captures and handles the special comparison logic. Or, since the Collections.sort method has an overload that relies on Comparable rather than Comparator, we move or inline this Comparator to the accept (the only place it's used at that point) and simplify it (since o1 is now always a filter, and o2 is always an address).", "author": "chrisvest", "createdAt": "2020-08-21T08:58:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3NTI2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU0ODY3MQ==", "url": "https://github.com/netty/netty/pull/10492#discussion_r474548671", "bodyText": "Also, I'd like to see a unit test that verifies that the accept method filters correctly; so everything works as intended.", "author": "chrisvest", "createdAt": "2020-08-21T08:59:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3NTI2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDcwNzY5Ng==", "url": "https://github.com/netty/netty/pull/10492#discussion_r474707696", "bodyText": "Now Integer.compareTo and BigInteger.compareTo is used if matches returns false.", "author": "hyperxpro", "createdAt": "2020-08-21T13:45:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3NTI2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3NTkyMw==", "url": "https://github.com/netty/netty/pull/10492#discussion_r474175923", "bodyText": "I wonder if we can implement a comparison without needing to keep this around, or if that adds too much overhead.", "author": "chrisvest", "createdAt": "2020-08-20T18:06:46Z", "path": "handler/src/main/java/io/netty/handler/ipfilter/IpSubnetFilterRule.java", "diffHunk": "@@ -68,20 +68,35 @@ public IpFilterRuleType ruleType() {\n         return filterRule.ruleType();\n     }\n \n+    @Override\n+    public int compareTo(IpSubnetFilterRule o) {\n+        return getNetworkAddress().compareTo(o.getNetworkAddress());\n+    }\n+\n+    private BigInteger getNetworkAddress() {\n+        if (filterRule instanceof Ip4SubnetFilterRule) {\n+            return ((Ip4SubnetFilterRule) filterRule).networkAddressAsBigInteger;\n+        } else {\n+            return ((Ip6SubnetFilterRule) filterRule).networkAddress;\n+        }\n+    }\n+\n     private static final class Ip4SubnetFilterRule implements IpFilterRule {\n \n+        private final BigInteger networkAddressAsBigInteger;", "originalCommit": "c4765051cb0992f1ef925bef095898e75223635d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3OTkxNg==", "url": "https://github.com/netty/netty/pull/10492#discussion_r474179916", "bodyText": "Yeah, I'll use Integer directly here now.", "author": "hyperxpro", "createdAt": "2020-08-20T18:14:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3NTkyMw=="}], "type": "inlineReview"}, {"oid": "aecd97ed9541b5a8c7cbe7bd1866af628713b320", "url": "https://github.com/netty/netty/commit/aecd97ed9541b5a8c7cbe7bd1866af628713b320", "message": "Fix comparator for effective search and added unit test", "committedDate": "2020-08-21T14:13:16Z", "type": "commit"}, {"oid": "e9210a7ad6db8a416a0271c37f28c12483957458", "url": "https://github.com/netty/netty/commit/e9210a7ad6db8a416a0271c37f28c12483957458", "message": "Remove overlapping subnets and fix compareTo(InetSocketAddress)", "committedDate": "2020-08-22T06:10:35Z", "type": "commit"}, {"oid": "c8cb172db9f80478a610489ea0745d8ebbfe9095", "url": "https://github.com/netty/netty/commit/c8cb172db9f80478a610489ea0745d8ebbfe9095", "message": "Use compareTo for searching instead of `matches` because we're comparing Integer either way", "committedDate": "2020-08-22T09:22:15Z", "type": "commit"}, {"oid": "7201409e7c6a607ea5be91a424133760d8efe266", "url": "https://github.com/netty/netty/commit/7201409e7c6a607ea5be91a424133760d8efe266", "message": "Allow default action to be set if rule is not found", "committedDate": "2020-08-22T11:16:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEwNjYxMg==", "url": "https://github.com/netty/netty/pull/10492#discussion_r475106612", "bodyText": "Both Integer.valueOf should think to a different way to handle this saving the Integer allocation (by saving/caching an int somewhere?)\nSame few lines below", "author": "franz1981", "createdAt": "2020-08-22T16:26:59Z", "path": "handler/src/main/java/io/netty/handler/ipfilter/IpSubnetFilterRule.java", "diffHunk": "@@ -68,6 +71,43 @@ public IpFilterRuleType ruleType() {\n         return filterRule.ruleType();\n     }\n \n+    @Override\n+    public int compareTo(IpSubnetFilterRule ipSubnetFilterRule) {\n+        if (filterRule instanceof Ip4SubnetFilterRule) {\n+            return Integer.valueOf(((Ip4SubnetFilterRule) filterRule).networkAddress)", "originalCommit": "7201409e7c6a607ea5be91a424133760d8efe266", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE3NDQxMQ==", "url": "https://github.com/netty/netty/pull/10492#discussion_r475174411", "bodyText": "Should I change Ip4SubnetFilterRule#networkAddress from int to Integer? But AFAIK, Integer has overhead compared to  int.", "author": "hyperxpro", "createdAt": "2020-08-23T05:50:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEwNjYxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE5MTM3Nw==", "url": "https://github.com/netty/netty/pull/10492#discussion_r475191377", "bodyText": "The idea Is to save any Integer allocation in such hot path", "author": "franz1981", "createdAt": "2020-08-23T08:41:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEwNjYxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUwNDY3Ng==", "url": "https://github.com/netty/netty/pull/10492#discussion_r476504676", "bodyText": "I see that networkAddress is already an int, why you are translating it into an Integer just to be unboxed as an int again?", "author": "franz1981", "createdAt": "2020-08-25T14:43:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEwNjYxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUwNzkxNA==", "url": "https://github.com/netty/netty/pull/10492#discussion_r476507914", "bodyText": "Sorry, forgot to take a look here.\nInteger#compareTo(int, int) is documented for 1.7+. I get this error. So I've to call Integer#value(int) to do it in the old style.", "author": "hyperxpro", "createdAt": "2020-08-25T14:47:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEwNjYxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUwOTA3Mw==", "url": "https://github.com/netty/netty/pull/10492#discussion_r476509073", "bodyText": "As per https://github.com/netty/netty#how-to-build, We need Java 7 or higher to build Netty. But why IntelliJ is set to Java 6?", "author": "hyperxpro", "createdAt": "2020-08-25T14:49:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEwNjYxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3MzA1Mw==", "url": "https://github.com/netty/netty/pull/10492#discussion_r476573053", "bodyText": "Yeah, Netty 4.1 is meant to work on Java 6 at runtime.", "author": "chrisvest", "createdAt": "2020-08-25T16:18:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEwNjYxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3NDM0Mw==", "url": "https://github.com/netty/netty/pull/10492#discussion_r476574343", "bodyText": "That's the thing. Can't use Integer#compareTo(int, int) in Java 6. Maybe I should manually implement Integer#compareTo(int, int). How does it sound?", "author": "hyperxpro", "createdAt": "2020-08-25T16:20:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEwNjYxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyODkyMg==", "url": "https://github.com/netty/netty/pull/10492#discussion_r476628922", "bodyText": "+1", "author": "franz1981", "createdAt": "2020-08-25T17:45:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEwNjYxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY0NzY2MQ==", "url": "https://github.com/netty/netty/pull/10492#discussion_r476647661", "bodyText": "Done", "author": "hyperxpro", "createdAt": "2020-08-25T18:18:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEwNjYxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQzNzA3Nw==", "url": "https://github.com/netty/netty/pull/10492#discussion_r475437077", "bodyText": "Please do another hasNext check, instead of relying on catching NoSuchElementException.", "author": "chrisvest", "createdAt": "2020-08-24T08:49:36Z", "path": "handler/src/main/java/io/netty/handler/ipfilter/IpSubnetFilter.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.ipfilter;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandler.Sharable;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.util.internal.ObjectUtil;\n+\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * <p>\n+ * This class allows one to filter new {@link Channel}s based on the\n+ * {@link IpSubnetFilter}s passed to its constructor. If no rules are provided, all connections\n+ * will be accepted.\n+ * </p>\n+ * <p>\n+ * If you would like to explicitly take action on rejected {@link Channel}s, you should override\n+ * {@link #channelRejected(ChannelHandlerContext, SocketAddress)}. </p>\n+ * <p> This filter uses Binary Search for faster filtering so it's a good practice to remove\n+ * overlapping subnet rules and also entries should be arranged in incremental order.</p>\n+ */\n+@Sharable\n+public class IpSubnetFilter extends AbstractRemoteAddressFilter<InetSocketAddress> {\n+\n+    private final List<IpSubnetFilterRule> rules;\n+    private final boolean acceptIfNotFound;\n+\n+    /**\n+     * <p> Create new {@link IpSubnetFilter} Instance with specified {@link IpSubnetFilterRule} as array. </p>\n+     * <p> {@code acceptIfNotFound} is set to {@code true} </p>\n+     *\n+     * @param rules {@link IpSubnetFilterRule} as array\n+     */\n+    public IpSubnetFilter(IpSubnetFilterRule... rules) {\n+        this(true, Arrays.asList(ObjectUtil.checkNotNull(rules, \"rules\")));\n+    }\n+\n+    /**\n+     * <p> Create new {@link IpSubnetFilter} Instance with specified {@link IpSubnetFilterRule} as array\n+     * and specify if we'll accept a connection if we don't find it in the rule(s). </p>\n+     *\n+     * @param acceptIfNotFound {@code true} if we'll accept connection if not found in rule(s).\n+     * @param rules            {@link IpSubnetFilterRule} as array\n+     */\n+    public IpSubnetFilter(boolean acceptIfNotFound, IpSubnetFilterRule... rules) {\n+        this(acceptIfNotFound, Arrays.asList(ObjectUtil.checkNotNull(rules, \"rules\")));\n+    }\n+\n+    /**\n+     * <p> Create new {@link IpSubnetFilter} Instance with specified {@link IpSubnetFilterRule} as {@link List}. </p>\n+     * <p> {@code acceptIfNotFound} is set to {@code true} </p>\n+     *\n+     * @param rules {@link IpSubnetFilterRule} as {@link List}\n+     */\n+    public IpSubnetFilter(List<IpSubnetFilterRule> rules) {\n+        this(true, rules);\n+    }\n+\n+    /**\n+     * <p> Create new {@link IpSubnetFilter} Instance with specified {@link IpSubnetFilterRule} as {@link List}\n+     * and specify if we'll accept a connection if we don't find it in the rule(s). </p>\n+     *\n+     * @param acceptIfNotFound {@code true} if we'll accept connection if not found in rule(s).\n+     * @param rules            {@link IpSubnetFilterRule} as {@link List}\n+     */\n+    public IpSubnetFilter(boolean acceptIfNotFound, List<IpSubnetFilterRule> rules) {\n+        this.rules = ObjectUtil.checkNotNull(rules, \"rules\");\n+        this.acceptIfNotFound = acceptIfNotFound;\n+\n+        // Iterate over rules and check for `null` rule.\n+        for (IpSubnetFilterRule ipSubnetFilterRule : this.rules) {\n+            ObjectUtil.checkNotNull(ipSubnetFilterRule, \"rule\");\n+        }\n+\n+        sortAndFilter();\n+    }\n+\n+    @Override\n+    protected boolean accept(ChannelHandlerContext ctx, InetSocketAddress remoteAddress) {\n+        int indexOf = Collections.binarySearch(this.rules, remoteAddress, IpSubnetFilterRuleComparator.INSTANCE);\n+        if (indexOf >= 0) {\n+            return this.rules.get(indexOf).ruleType() == IpFilterRuleType.ACCEPT;\n+        }\n+        return acceptIfNotFound;\n+    }\n+\n+    /**\n+     * <ol>\n+     *     <li> Sort the list </li>\n+     *     <li> Remove over-lapping subnet </li>\n+     *     <li> Sort the list again </li>\n+     * </ol>\n+     */\n+    private void sortAndFilter() {\n+        Collections.sort(this.rules);\n+        Iterator<IpSubnetFilterRule> iterator = rules.iterator();\n+        List<IpSubnetFilterRule> toRemove = new ArrayList<IpSubnetFilterRule>();\n+\n+        try {\n+            IpSubnetFilterRule parentRule = null;\n+            while (iterator.hasNext()) {\n+\n+                // If parentRule is null, take first element out of Iterator.\n+                if (parentRule == null) {\n+                    parentRule = iterator.next();\n+                }", "originalCommit": "7201409e7c6a607ea5be91a424133760d8efe266", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ4NzUwMw==", "url": "https://github.com/netty/netty/pull/10492#discussion_r476487503", "bodyText": "hasNext is already done in while(Iterator#hasNext()) so no need to do the same here but I'll do it in other ones.", "author": "hyperxpro", "createdAt": "2020-08-25T14:21:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQzNzA3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ0MDcyMg==", "url": "https://github.com/netty/netty/pull/10492#discussion_r475440722", "bodyText": "Instead of collecting a list of things to remove (or removing via Iterator.remove()), you can instead build up a new list of things you want to keep. This algorithm would be linear in time, instead of N*M from removeAll. You can then do the null-checking at the same time. Make this method take the list-to-be-filtered as a parameter, and return the new filtered list. Then you can do all of this at the this.rules field assignment.", "author": "chrisvest", "createdAt": "2020-08-24T08:55:50Z", "path": "handler/src/main/java/io/netty/handler/ipfilter/IpSubnetFilter.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.ipfilter;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandler.Sharable;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.util.internal.ObjectUtil;\n+\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * <p>\n+ * This class allows one to filter new {@link Channel}s based on the\n+ * {@link IpSubnetFilter}s passed to its constructor. If no rules are provided, all connections\n+ * will be accepted.\n+ * </p>\n+ * <p>\n+ * If you would like to explicitly take action on rejected {@link Channel}s, you should override\n+ * {@link #channelRejected(ChannelHandlerContext, SocketAddress)}. </p>\n+ * <p> This filter uses Binary Search for faster filtering so it's a good practice to remove\n+ * overlapping subnet rules and also entries should be arranged in incremental order.</p>\n+ */\n+@Sharable\n+public class IpSubnetFilter extends AbstractRemoteAddressFilter<InetSocketAddress> {\n+\n+    private final List<IpSubnetFilterRule> rules;\n+    private final boolean acceptIfNotFound;\n+\n+    /**\n+     * <p> Create new {@link IpSubnetFilter} Instance with specified {@link IpSubnetFilterRule} as array. </p>\n+     * <p> {@code acceptIfNotFound} is set to {@code true} </p>\n+     *\n+     * @param rules {@link IpSubnetFilterRule} as array\n+     */\n+    public IpSubnetFilter(IpSubnetFilterRule... rules) {\n+        this(true, Arrays.asList(ObjectUtil.checkNotNull(rules, \"rules\")));\n+    }\n+\n+    /**\n+     * <p> Create new {@link IpSubnetFilter} Instance with specified {@link IpSubnetFilterRule} as array\n+     * and specify if we'll accept a connection if we don't find it in the rule(s). </p>\n+     *\n+     * @param acceptIfNotFound {@code true} if we'll accept connection if not found in rule(s).\n+     * @param rules            {@link IpSubnetFilterRule} as array\n+     */\n+    public IpSubnetFilter(boolean acceptIfNotFound, IpSubnetFilterRule... rules) {\n+        this(acceptIfNotFound, Arrays.asList(ObjectUtil.checkNotNull(rules, \"rules\")));\n+    }\n+\n+    /**\n+     * <p> Create new {@link IpSubnetFilter} Instance with specified {@link IpSubnetFilterRule} as {@link List}. </p>\n+     * <p> {@code acceptIfNotFound} is set to {@code true} </p>\n+     *\n+     * @param rules {@link IpSubnetFilterRule} as {@link List}\n+     */\n+    public IpSubnetFilter(List<IpSubnetFilterRule> rules) {\n+        this(true, rules);\n+    }\n+\n+    /**\n+     * <p> Create new {@link IpSubnetFilter} Instance with specified {@link IpSubnetFilterRule} as {@link List}\n+     * and specify if we'll accept a connection if we don't find it in the rule(s). </p>\n+     *\n+     * @param acceptIfNotFound {@code true} if we'll accept connection if not found in rule(s).\n+     * @param rules            {@link IpSubnetFilterRule} as {@link List}\n+     */\n+    public IpSubnetFilter(boolean acceptIfNotFound, List<IpSubnetFilterRule> rules) {\n+        this.rules = ObjectUtil.checkNotNull(rules, \"rules\");\n+        this.acceptIfNotFound = acceptIfNotFound;\n+\n+        // Iterate over rules and check for `null` rule.\n+        for (IpSubnetFilterRule ipSubnetFilterRule : this.rules) {\n+            ObjectUtil.checkNotNull(ipSubnetFilterRule, \"rule\");\n+        }\n+\n+        sortAndFilter();\n+    }\n+\n+    @Override\n+    protected boolean accept(ChannelHandlerContext ctx, InetSocketAddress remoteAddress) {\n+        int indexOf = Collections.binarySearch(this.rules, remoteAddress, IpSubnetFilterRuleComparator.INSTANCE);\n+        if (indexOf >= 0) {\n+            return this.rules.get(indexOf).ruleType() == IpFilterRuleType.ACCEPT;\n+        }\n+        return acceptIfNotFound;\n+    }\n+\n+    /**\n+     * <ol>\n+     *     <li> Sort the list </li>\n+     *     <li> Remove over-lapping subnet </li>\n+     *     <li> Sort the list again </li>\n+     * </ol>\n+     */\n+    private void sortAndFilter() {\n+        Collections.sort(this.rules);\n+        Iterator<IpSubnetFilterRule> iterator = rules.iterator();\n+        List<IpSubnetFilterRule> toRemove = new ArrayList<IpSubnetFilterRule>();\n+\n+        try {\n+            IpSubnetFilterRule parentRule = null;\n+            while (iterator.hasNext()) {\n+\n+                // If parentRule is null, take first element out of Iterator.\n+                if (parentRule == null) {\n+                    parentRule = iterator.next();\n+                }\n+\n+                // Take one more element out of Iterator, this will be childRule.\n+                IpSubnetFilterRule childRule = iterator.next();\n+\n+                // If parentRule matches childRule, schedule that Rule for deletion.\n+                if (parentRule.matches(new InetSocketAddress(childRule.getIpAddress(), 1))) {\n+                    toRemove.add(childRule);", "originalCommit": "7201409e7c6a607ea5be91a424133760d8efe266", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUwNTc5OQ==", "url": "https://github.com/netty/netty/pull/10492#discussion_r476505799", "bodyText": "I added code that checks if all rules belong to the same type while checking for null rules inside the user-supplied list of rules. If I try to move these inside sorting codes, it'll be a complete mess.\nThe reason behind adding this: We don't have to call List#get(int) because we already know if the list of rule contains the same IpFilterRuleType.\nPTAL at the latest code and revert back. :D", "author": "hyperxpro", "createdAt": "2020-08-25T14:44:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ0MDcyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE4MDQ5NA==", "url": "https://github.com/netty/netty/pull/10492#discussion_r477180494", "bodyText": "I mean something like this:\nIndex: handler/src/main/java/io/netty/handler/ipfilter/IpSubnetFilter.java\nIDEA additional info:\nSubsystem: com.intellij.openapi.diff.impl.patch.CharsetEP\n<+>UTF-8\n===================================================================\n--- handler/src/main/java/io/netty/handler/ipfilter/IpSubnetFilter.java\t(revision 295e104c7ed9027584927777073ae9f2f81cc2df)\n+++ handler/src/main/java/io/netty/handler/ipfilter/IpSubnetFilter.java\t(date 1598435434667)\n@@ -86,14 +86,14 @@\n      * @param rules            {@link IpSubnetFilterRule} as {@link List}\n      */\n     public IpSubnetFilter(boolean acceptIfNotFound, List<IpSubnetFilterRule> rules) {\n-        this.rules = ObjectUtil.checkNotNull(rules, \"rules\");\n+        ObjectUtil.checkNotNull(rules, \"rules\");\n         this.acceptIfNotFound = acceptIfNotFound;\n \n         int numAccept = 0;\n         int numReject = 0;\n \n         // Iterate over rules and check for `null` rule.\n-        for (IpSubnetFilterRule ipSubnetFilterRule : this.rules) {\n+        for (IpSubnetFilterRule ipSubnetFilterRule : rules) {\n             ObjectUtil.checkNotNull(ipSubnetFilterRule, \"rule\");\n             if (ipSubnetFilterRule.ruleType() == IpFilterRuleType.ACCEPT) {\n                 numAccept++;\n@@ -120,7 +120,7 @@\n             ipFilterRuleType = null;\n         }\n \n-        sortAndFilter();\n+        this.rules = sortAndFilter(rules);\n     }\n \n     @Override\n@@ -143,39 +143,27 @@\n      *     <li> Sort the list again </li>\n      * </ol>\n      */\n-    private void sortAndFilter() {\n-        Collections.sort(this.rules);\n+    private static List<IpSubnetFilterRule> sortAndFilter(List<IpSubnetFilterRule> rules) {\n+        Collections.sort(rules);\n         Iterator<IpSubnetFilterRule> iterator = rules.iterator();\n-        List<IpSubnetFilterRule> toRemove = new ArrayList<IpSubnetFilterRule>();\n+        List<IpSubnetFilterRule> toKeep = new ArrayList<IpSubnetFilterRule>();\n \n-        IpSubnetFilterRule parentRule = null;\n+        IpSubnetFilterRule parentRule = iterator.hasNext() ? iterator.next() : null;\n+        if (parentRule != null) {\n+            toKeep.add(parentRule);\n+        }\n         while (iterator.hasNext()) {\n-\n-            // If parentRule is null, take first element out of Iterator.\n-            if (parentRule == null) {\n-                parentRule = iterator.next();\n-            }\n-\n-            // If we don't have any more rule, we're done now.\n-            if (!iterator.hasNext()) {\n-                break;\n-            }\n-\n-            // Take one more element out of Iterator, this will be childRule.\n+            // Grab a potential child rule.\n             IpSubnetFilterRule childRule = iterator.next();\n \n-            // If parentRule matches childRule, schedule that Rule for deletion.\n-            if (parentRule.matches(new InetSocketAddress(childRule.getIpAddress(), 1))) {\n-                toRemove.add(childRule);\n-            } else {\n-                // If parentRule does not matches childRule, this childRule will become new parentRule\n-                // and we'll do the same again\n+            // If parentRule matches childRule, then there's no need to keep the child rule.\n+            // Otherwise, the rules are distinct and we need both.\n+            if (!parentRule.matches(new InetSocketAddress(childRule.getIpAddress(), 1))) {\n+                toKeep.add(childRule);\n+                // Then we'll keep the child rule around as the parent for the next round.\n                 parentRule = childRule;\n             }\n         }\n-\n-        rules.removeAll(toRemove);\n-        toRemove.clear();\n-        Collections.sort(rules); // Re-sort just to be sure\n+        return toKeep;\n     }\n }", "author": "chrisvest", "createdAt": "2020-08-26T09:53:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ0MDcyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE4NDc4MQ==", "url": "https://github.com/netty/netty/pull/10492#discussion_r477184781", "bodyText": "@hyperxpro Not sure if I have access to directly push to this PR, but I can give it a go if you like.", "author": "chrisvest", "createdAt": "2020-08-26T10:01:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ0MDcyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE5MjA5Mw==", "url": "https://github.com/netty/netty/pull/10492#discussion_r477192093", "bodyText": "Just create a gist of updated source and I will copy from there. :p", "author": "hyperxpro", "createdAt": "2020-08-26T10:14:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ0MDcyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE5NjgxNQ==", "url": "https://github.com/netty/netty/pull/10492#discussion_r477196815", "bodyText": "If you use Intellij you can also copy the snippet above and click VCS\u2192Apply Patch from Clipboard\u2026", "author": "chrisvest", "createdAt": "2020-08-26T10:24:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ0MDcyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIxOTc1OA==", "url": "https://github.com/netty/netty/pull/10492#discussion_r477219758", "bodyText": "NVM, Did it myself. Thanks for helping a noob. :p", "author": "hyperxpro", "createdAt": "2020-08-26T11:10:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ0MDcyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ0MTI4MQ==", "url": "https://github.com/netty/netty/pull/10492#discussion_r475441281", "bodyText": "If you follow my comment above, this part would also go away.", "author": "chrisvest", "createdAt": "2020-08-24T08:56:45Z", "path": "handler/src/main/java/io/netty/handler/ipfilter/IpSubnetFilter.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.ipfilter;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandler.Sharable;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.util.internal.ObjectUtil;\n+\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * <p>\n+ * This class allows one to filter new {@link Channel}s based on the\n+ * {@link IpSubnetFilter}s passed to its constructor. If no rules are provided, all connections\n+ * will be accepted.\n+ * </p>\n+ * <p>\n+ * If you would like to explicitly take action on rejected {@link Channel}s, you should override\n+ * {@link #channelRejected(ChannelHandlerContext, SocketAddress)}. </p>\n+ * <p> This filter uses Binary Search for faster filtering so it's a good practice to remove\n+ * overlapping subnet rules and also entries should be arranged in incremental order.</p>\n+ */\n+@Sharable\n+public class IpSubnetFilter extends AbstractRemoteAddressFilter<InetSocketAddress> {\n+\n+    private final List<IpSubnetFilterRule> rules;\n+    private final boolean acceptIfNotFound;\n+\n+    /**\n+     * <p> Create new {@link IpSubnetFilter} Instance with specified {@link IpSubnetFilterRule} as array. </p>\n+     * <p> {@code acceptIfNotFound} is set to {@code true} </p>\n+     *\n+     * @param rules {@link IpSubnetFilterRule} as array\n+     */\n+    public IpSubnetFilter(IpSubnetFilterRule... rules) {\n+        this(true, Arrays.asList(ObjectUtil.checkNotNull(rules, \"rules\")));\n+    }\n+\n+    /**\n+     * <p> Create new {@link IpSubnetFilter} Instance with specified {@link IpSubnetFilterRule} as array\n+     * and specify if we'll accept a connection if we don't find it in the rule(s). </p>\n+     *\n+     * @param acceptIfNotFound {@code true} if we'll accept connection if not found in rule(s).\n+     * @param rules            {@link IpSubnetFilterRule} as array\n+     */\n+    public IpSubnetFilter(boolean acceptIfNotFound, IpSubnetFilterRule... rules) {\n+        this(acceptIfNotFound, Arrays.asList(ObjectUtil.checkNotNull(rules, \"rules\")));\n+    }\n+\n+    /**\n+     * <p> Create new {@link IpSubnetFilter} Instance with specified {@link IpSubnetFilterRule} as {@link List}. </p>\n+     * <p> {@code acceptIfNotFound} is set to {@code true} </p>\n+     *\n+     * @param rules {@link IpSubnetFilterRule} as {@link List}\n+     */\n+    public IpSubnetFilter(List<IpSubnetFilterRule> rules) {\n+        this(true, rules);\n+    }\n+\n+    /**\n+     * <p> Create new {@link IpSubnetFilter} Instance with specified {@link IpSubnetFilterRule} as {@link List}\n+     * and specify if we'll accept a connection if we don't find it in the rule(s). </p>\n+     *\n+     * @param acceptIfNotFound {@code true} if we'll accept connection if not found in rule(s).\n+     * @param rules            {@link IpSubnetFilterRule} as {@link List}\n+     */\n+    public IpSubnetFilter(boolean acceptIfNotFound, List<IpSubnetFilterRule> rules) {\n+        this.rules = ObjectUtil.checkNotNull(rules, \"rules\");\n+        this.acceptIfNotFound = acceptIfNotFound;\n+\n+        // Iterate over rules and check for `null` rule.\n+        for (IpSubnetFilterRule ipSubnetFilterRule : this.rules) {\n+            ObjectUtil.checkNotNull(ipSubnetFilterRule, \"rule\");\n+        }\n+\n+        sortAndFilter();\n+    }\n+\n+    @Override\n+    protected boolean accept(ChannelHandlerContext ctx, InetSocketAddress remoteAddress) {\n+        int indexOf = Collections.binarySearch(this.rules, remoteAddress, IpSubnetFilterRuleComparator.INSTANCE);\n+        if (indexOf >= 0) {\n+            return this.rules.get(indexOf).ruleType() == IpFilterRuleType.ACCEPT;\n+        }\n+        return acceptIfNotFound;\n+    }\n+\n+    /**\n+     * <ol>\n+     *     <li> Sort the list </li>\n+     *     <li> Remove over-lapping subnet </li>\n+     *     <li> Sort the list again </li>\n+     * </ol>\n+     */\n+    private void sortAndFilter() {\n+        Collections.sort(this.rules);\n+        Iterator<IpSubnetFilterRule> iterator = rules.iterator();\n+        List<IpSubnetFilterRule> toRemove = new ArrayList<IpSubnetFilterRule>();\n+\n+        try {\n+            IpSubnetFilterRule parentRule = null;\n+            while (iterator.hasNext()) {\n+\n+                // If parentRule is null, take first element out of Iterator.\n+                if (parentRule == null) {\n+                    parentRule = iterator.next();\n+                }\n+\n+                // Take one more element out of Iterator, this will be childRule.\n+                IpSubnetFilterRule childRule = iterator.next();\n+\n+                // If parentRule matches childRule, schedule that Rule for deletion.\n+                if (parentRule.matches(new InetSocketAddress(childRule.getIpAddress(), 1))) {\n+                    toRemove.add(childRule);\n+                } else {\n+                    // If parentRule does not matches childRule, this childRule will become new parentRule\n+                    // and we'll do the same again\n+                    parentRule = childRule;\n+                }\n+            }\n+        } catch (NoSuchElementException ex) {\n+            // Ignore\n+        }\n+\n+        rules.removeAll(toRemove);\n+        toRemove.clear();\n+        Collections.sort(rules); // Re-sort just to be sure", "originalCommit": "7201409e7c6a607ea5be91a424133760d8efe266", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "54e4167363a8416c37ca6fadc2b0949903e5534c", "url": "https://github.com/netty/netty/commit/54e4167363a8416c37ca6fadc2b0949903e5534c", "message": "Filter without calling `List#get(int)` when all rules are of same type", "committedDate": "2020-08-25T14:34:39Z", "type": "commit"}, {"oid": "d6a5bbef34072fa12f0111fce8d0c86261e519cb", "url": "https://github.com/netty/netty/commit/d6a5bbef34072fa12f0111fce8d0c86261e519cb", "message": "dont depend on `NoSuchElementException`", "committedDate": "2020-08-25T14:36:24Z", "type": "commit"}, {"oid": "76373ff2a83001e977cfe9d20cc7ce27b2eceb16", "url": "https://github.com/netty/netty/commit/76373ff2a83001e977cfe9d20cc7ce27b2eceb16", "message": "use compareInt(int, int) to compare integer`", "committedDate": "2020-08-25T18:18:03Z", "type": "commit"}, {"oid": "295e104c7ed9027584927777073ae9f2f81cc2df", "url": "https://github.com/netty/netty/commit/295e104c7ed9027584927777073ae9f2f81cc2df", "message": "make compareInt(int, int) private", "committedDate": "2020-08-25T18:20:37Z", "type": "commit"}, {"oid": "a4aee1e4663f3d54386e4dccb5eb863d1b409f7b", "url": "https://github.com/netty/netty/commit/a4aee1e4663f3d54386e4dccb5eb863d1b409f7b", "message": "use patch by @chrisvest", "committedDate": "2020-08-26T11:11:22Z", "type": "commit"}, {"oid": "ea2eea00724c226f95230a161537e0f64e94d79a", "url": "https://github.com/netty/netty/commit/ea2eea00724c226f95230a161537e0f64e94d79a", "message": "some minor fixes", "committedDate": "2020-08-26T15:01:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM5NjA3Nw==", "url": "https://github.com/netty/netty/pull/10492#discussion_r477396077", "bodyText": "We don't need to explicitly clear this list. The GC will take care of it.", "author": "chrisvest", "createdAt": "2020-08-26T15:36:19Z", "path": "handler/src/test/java/io/netty/handler/ipfilter/IpSubnetFilterTest.java", "diffHunk": "@@ -141,6 +144,52 @@ public void testUniqueIpFilterHandler() {\n         Assert.assertTrue(ch4.isActive());\n     }\n \n+    @Test\n+    public void testBinarySearch() {\n+        List<IpSubnetFilterRule> ipSubnetFilterRuleList = new ArrayList<IpSubnetFilterRule>();\n+        ipSubnetFilterRuleList.add(buildRejectIP(\"1.2.3.4\", 32));\n+        ipSubnetFilterRuleList.add(buildRejectIP(\"1.1.1.1\", 8));\n+        ipSubnetFilterRuleList.add(buildRejectIP(\"200.200.200.200\", 32));\n+        ipSubnetFilterRuleList.add(buildRejectIP(\"108.0.0.0\", 4));\n+        ipSubnetFilterRuleList.add(buildRejectIP(\"10.10.10.10\", 8));\n+\n+        // 1.0.0.0/8\n+        EmbeddedChannel ch1 = newEmbeddedInetChannel(\"1.1.1.1\", new IpSubnetFilter(ipSubnetFilterRuleList));\n+        Assert.assertFalse(ch1.isActive());\n+        Assert.assertTrue(ch1.close().isSuccess());\n+\n+        // Nothing applies here\n+        EmbeddedChannel ch2 = newEmbeddedInetChannel(\"2.2.2.2\", new IpSubnetFilter(ipSubnetFilterRuleList));\n+        Assert.assertTrue(ch2.isActive());\n+        Assert.assertTrue(ch2.close().isSuccess());\n+\n+        // 108.0.0.0/4\n+        EmbeddedChannel ch3 = newEmbeddedInetChannel(\"97.100.100.100\", new IpSubnetFilter(ipSubnetFilterRuleList));\n+        Assert.assertFalse(ch3.isActive());\n+        Assert.assertTrue(ch3.close().isSuccess());\n+\n+        // 200.200.200.200/32\n+        EmbeddedChannel ch4 = newEmbeddedInetChannel(\"200.200.200.200\", new IpSubnetFilter(ipSubnetFilterRuleList));\n+        Assert.assertFalse(ch4.isActive());\n+        Assert.assertTrue(ch4.close().isSuccess());\n+\n+        // Nothing applies here\n+        EmbeddedChannel ch5 = newEmbeddedInetChannel(\"127.0.0.1\", new IpSubnetFilter(ipSubnetFilterRuleList));\n+        Assert.assertTrue(ch5.isActive());\n+        Assert.assertTrue(ch5.close().isSuccess());\n+\n+        // 10.0.0.0/8\n+        EmbeddedChannel ch6 = newEmbeddedInetChannel(\"10.1.1.2\", new IpSubnetFilter(ipSubnetFilterRuleList));\n+        Assert.assertFalse(ch6.isActive());\n+        Assert.assertTrue(ch6.close().isSuccess());\n+\n+        ipSubnetFilterRuleList.clear(); // Because we're done with the list", "originalCommit": "ea2eea00724c226f95230a161537e0f64e94d79a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM5NzQ0OQ==", "url": "https://github.com/netty/netty/pull/10492#discussion_r477397449", "bodyText": "Would be good to also test IPv6, including testing with rule lists that is a mix of IPv4 and IPv6, and have them match on both IPv4 and IPv6 addresses.", "author": "chrisvest", "createdAt": "2020-08-26T15:38:11Z", "path": "handler/src/test/java/io/netty/handler/ipfilter/IpSubnetFilterTest.java", "diffHunk": "@@ -141,6 +144,52 @@ public void testUniqueIpFilterHandler() {\n         Assert.assertTrue(ch4.isActive());\n     }\n \n+    @Test\n+    public void testBinarySearch() {\n+        List<IpSubnetFilterRule> ipSubnetFilterRuleList = new ArrayList<IpSubnetFilterRule>();\n+        ipSubnetFilterRuleList.add(buildRejectIP(\"1.2.3.4\", 32));\n+        ipSubnetFilterRuleList.add(buildRejectIP(\"1.1.1.1\", 8));\n+        ipSubnetFilterRuleList.add(buildRejectIP(\"200.200.200.200\", 32));\n+        ipSubnetFilterRuleList.add(buildRejectIP(\"108.0.0.0\", 4));\n+        ipSubnetFilterRuleList.add(buildRejectIP(\"10.10.10.10\", 8));", "originalCommit": "ea2eea00724c226f95230a161537e0f64e94d79a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQyNDc0Ng==", "url": "https://github.com/netty/netty/pull/10492#discussion_r477424746", "bodyText": "And here we go again, Comparator tries to compare IPv4 and IPv6. How about explicitly defining the IP version type?", "author": "hyperxpro", "createdAt": "2020-08-26T16:18:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM5NzQ0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQyNzg0Ng==", "url": "https://github.com/netty/netty/pull/10492#discussion_r477427846", "bodyText": "Yeah, that could work. If we ensure that the list never contain both types, it would side-step a lot of trouble.", "author": "chrisvest", "createdAt": "2020-08-26T16:23:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM5NzQ0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQyOTE0Ng==", "url": "https://github.com/netty/netty/pull/10492#discussion_r477429146", "bodyText": "The comparator, or the accept method, would still need to test that the address being checked is of the correct type, though. But that should be simple enough.", "author": "chrisvest", "createdAt": "2020-08-26T16:25:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM5NzQ0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2MzMyMw==", "url": "https://github.com/netty/netty/pull/10492#discussion_r477463323", "bodyText": "Added IPv4/6 count check. It'll throw an exception like this:\njava.lang.IllegalArgumentException: Mixed IP version rules are not allowed. Number of IPv4 rules: 5, IPv6 rules: 1", "author": "hyperxpro", "createdAt": "2020-08-26T17:20:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM5NzQ0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ3MTE5OA==", "url": "https://github.com/netty/netty/pull/10492#discussion_r477471198", "bodyText": "@chrisvest PTAL at the latest code.", "author": "hyperxpro", "createdAt": "2020-08-26T17:33:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM5NzQ0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQwMjEzOQ==", "url": "https://github.com/netty/netty/pull/10492#discussion_r477402139", "bodyText": "I don't think this clear() is necessary. GC should take care of it.", "author": "chrisvest", "createdAt": "2020-08-26T15:44:30Z", "path": "handler/src/main/java/io/netty/handler/ipfilter/IpSubnetFilter.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.ipfilter;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandler.Sharable;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.util.internal.ObjectUtil;\n+\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+/**\n+ * <p>\n+ * This class allows one to filter new {@link Channel}s based on the\n+ * {@link IpSubnetFilter}s passed to its constructor. If no rules are provided, all connections\n+ * will be accepted.\n+ * </p>\n+ * <p>\n+ * If you would like to explicitly take action on rejected {@link Channel}s, you should override\n+ * {@link #channelRejected(ChannelHandlerContext, SocketAddress)}. </p>\n+ * <p> This filter uses Binary Search for faster filtering so it's a good practice to remove\n+ * overlapping subnet rules and also entries should be arranged in incremental order.</p>\n+ */\n+@Sharable\n+public class IpSubnetFilter extends AbstractRemoteAddressFilter<InetSocketAddress> {\n+\n+    private final List<IpSubnetFilterRule> rules;\n+    private final boolean acceptIfNotFound;\n+    private final IpFilterRuleType ipFilterRuleType;\n+\n+    /**\n+     * <p> Create new {@link IpSubnetFilter} Instance with specified {@link IpSubnetFilterRule} as array. </p>\n+     * <p> {@code acceptIfNotFound} is set to {@code true} </p>\n+     *\n+     * @param rules {@link IpSubnetFilterRule} as array\n+     */\n+    public IpSubnetFilter(IpSubnetFilterRule... rules) {\n+        this(true, Arrays.asList(ObjectUtil.checkNotNull(rules, \"rules\")));\n+    }\n+\n+    /**\n+     * <p> Create new {@link IpSubnetFilter} Instance with specified {@link IpSubnetFilterRule} as array\n+     * and specify if we'll accept a connection if we don't find it in the rule(s). </p>\n+     *\n+     * @param acceptIfNotFound {@code true} if we'll accept connection if not found in rule(s).\n+     * @param rules            {@link IpSubnetFilterRule} as array\n+     */\n+    public IpSubnetFilter(boolean acceptIfNotFound, IpSubnetFilterRule... rules) {\n+        this(acceptIfNotFound, Arrays.asList(ObjectUtil.checkNotNull(rules, \"rules\")));\n+    }\n+\n+    /**\n+     * <p> Create new {@link IpSubnetFilter} Instance with specified {@link IpSubnetFilterRule} as {@link List}. </p>\n+     * <p> {@code acceptIfNotFound} is set to {@code true} </p>\n+     *\n+     * @param rules {@link IpSubnetFilterRule} as {@link List}\n+     */\n+    public IpSubnetFilter(List<IpSubnetFilterRule> rules) {\n+        this(true, rules);\n+    }\n+\n+    /**\n+     * <p> Create new {@link IpSubnetFilter} Instance with specified {@link IpSubnetFilterRule} as {@link List}\n+     * and specify if we'll accept a connection if we don't find it in the rule(s). </p>\n+     *\n+     * @param acceptIfNotFound {@code true} if we'll accept connection if not found in rule(s).\n+     * @param rules            {@link IpSubnetFilterRule} as {@link List}\n+     */\n+    public IpSubnetFilter(boolean acceptIfNotFound, List<IpSubnetFilterRule> rules) {\n+        ObjectUtil.checkNotNull(rules, \"rules\");\n+        this.acceptIfNotFound = acceptIfNotFound;\n+\n+        int numAccept = 0;\n+        int numReject = 0;\n+\n+        // Iterate over rules and check for `null` rule.\n+        for (IpSubnetFilterRule ipSubnetFilterRule : rules) {\n+            ObjectUtil.checkNotNull(ipSubnetFilterRule, \"rule\");\n+            if (ipSubnetFilterRule.ruleType() == IpFilterRuleType.ACCEPT) {\n+                numAccept++;\n+            } else {\n+                numReject++;\n+            }\n+        }\n+\n+        /*\n+         * If Number of accept rules are 0 and Number of reject rules is more than 0,\n+         * then all rules are of \"REJECT\" type.\n+         *\n+         * In this case, we'll set `ipFilterRuleType` to `IpFilterRuleType.REJECT`\n+         *\n+         * If Number of accept rules are more than 0 and number of reject rules are 0,\n+         * then all rules are of \"ACCEPT\" type.\n+         *\n+         */\n+        if (numAccept == 0 && numReject > 0) {\n+            ipFilterRuleType = IpFilterRuleType.REJECT;\n+        } else if (numAccept > 0 && numReject == 0) {\n+            ipFilterRuleType = IpFilterRuleType.ACCEPT;\n+        } else {\n+            ipFilterRuleType = null;\n+        }\n+\n+        this.rules = sortAndFilter(rules);\n+        rules.clear(); // Free-up old unsorted list", "originalCommit": "ea2eea00724c226f95230a161537e0f64e94d79a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQwMjU2OA==", "url": "https://github.com/netty/netty/pull/10492#discussion_r477402568", "bodyText": "this is unnecessary.", "author": "chrisvest", "createdAt": "2020-08-26T15:45:01Z", "path": "handler/src/main/java/io/netty/handler/ipfilter/IpSubnetFilter.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.ipfilter;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandler.Sharable;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.util.internal.ObjectUtil;\n+\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+/**\n+ * <p>\n+ * This class allows one to filter new {@link Channel}s based on the\n+ * {@link IpSubnetFilter}s passed to its constructor. If no rules are provided, all connections\n+ * will be accepted.\n+ * </p>\n+ * <p>\n+ * If you would like to explicitly take action on rejected {@link Channel}s, you should override\n+ * {@link #channelRejected(ChannelHandlerContext, SocketAddress)}. </p>\n+ * <p> This filter uses Binary Search for faster filtering so it's a good practice to remove\n+ * overlapping subnet rules and also entries should be arranged in incremental order.</p>\n+ */\n+@Sharable\n+public class IpSubnetFilter extends AbstractRemoteAddressFilter<InetSocketAddress> {\n+\n+    private final List<IpSubnetFilterRule> rules;\n+    private final boolean acceptIfNotFound;\n+    private final IpFilterRuleType ipFilterRuleType;\n+\n+    /**\n+     * <p> Create new {@link IpSubnetFilter} Instance with specified {@link IpSubnetFilterRule} as array. </p>\n+     * <p> {@code acceptIfNotFound} is set to {@code true} </p>\n+     *\n+     * @param rules {@link IpSubnetFilterRule} as array\n+     */\n+    public IpSubnetFilter(IpSubnetFilterRule... rules) {\n+        this(true, Arrays.asList(ObjectUtil.checkNotNull(rules, \"rules\")));\n+    }\n+\n+    /**\n+     * <p> Create new {@link IpSubnetFilter} Instance with specified {@link IpSubnetFilterRule} as array\n+     * and specify if we'll accept a connection if we don't find it in the rule(s). </p>\n+     *\n+     * @param acceptIfNotFound {@code true} if we'll accept connection if not found in rule(s).\n+     * @param rules            {@link IpSubnetFilterRule} as array\n+     */\n+    public IpSubnetFilter(boolean acceptIfNotFound, IpSubnetFilterRule... rules) {\n+        this(acceptIfNotFound, Arrays.asList(ObjectUtil.checkNotNull(rules, \"rules\")));\n+    }\n+\n+    /**\n+     * <p> Create new {@link IpSubnetFilter} Instance with specified {@link IpSubnetFilterRule} as {@link List}. </p>\n+     * <p> {@code acceptIfNotFound} is set to {@code true} </p>\n+     *\n+     * @param rules {@link IpSubnetFilterRule} as {@link List}\n+     */\n+    public IpSubnetFilter(List<IpSubnetFilterRule> rules) {\n+        this(true, rules);\n+    }\n+\n+    /**\n+     * <p> Create new {@link IpSubnetFilter} Instance with specified {@link IpSubnetFilterRule} as {@link List}\n+     * and specify if we'll accept a connection if we don't find it in the rule(s). </p>\n+     *\n+     * @param acceptIfNotFound {@code true} if we'll accept connection if not found in rule(s).\n+     * @param rules            {@link IpSubnetFilterRule} as {@link List}\n+     */\n+    public IpSubnetFilter(boolean acceptIfNotFound, List<IpSubnetFilterRule> rules) {\n+        ObjectUtil.checkNotNull(rules, \"rules\");\n+        this.acceptIfNotFound = acceptIfNotFound;\n+\n+        int numAccept = 0;\n+        int numReject = 0;\n+\n+        // Iterate over rules and check for `null` rule.\n+        for (IpSubnetFilterRule ipSubnetFilterRule : rules) {\n+            ObjectUtil.checkNotNull(ipSubnetFilterRule, \"rule\");\n+            if (ipSubnetFilterRule.ruleType() == IpFilterRuleType.ACCEPT) {\n+                numAccept++;\n+            } else {\n+                numReject++;\n+            }\n+        }\n+\n+        /*\n+         * If Number of accept rules are 0 and Number of reject rules is more than 0,\n+         * then all rules are of \"REJECT\" type.\n+         *\n+         * In this case, we'll set `ipFilterRuleType` to `IpFilterRuleType.REJECT`\n+         *\n+         * If Number of accept rules are more than 0 and number of reject rules are 0,\n+         * then all rules are of \"ACCEPT\" type.\n+         *\n+         */\n+        if (numAccept == 0 && numReject > 0) {\n+            ipFilterRuleType = IpFilterRuleType.REJECT;\n+        } else if (numAccept > 0 && numReject == 0) {\n+            ipFilterRuleType = IpFilterRuleType.ACCEPT;\n+        } else {\n+            ipFilterRuleType = null;\n+        }\n+\n+        this.rules = sortAndFilter(rules);\n+        rules.clear(); // Free-up old unsorted list\n+    }\n+\n+    @Override\n+    protected boolean accept(ChannelHandlerContext ctx, InetSocketAddress remoteAddress) {\n+        int indexOf = Collections.binarySearch(this.rules, remoteAddress, IpSubnetFilterRuleComparator.INSTANCE);", "originalCommit": "ea2eea00724c226f95230a161537e0f64e94d79a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQwMjg4OQ==", "url": "https://github.com/netty/netty/pull/10492#discussion_r477402889", "bodyText": "this is unnecessary.", "author": "chrisvest", "createdAt": "2020-08-26T15:45:25Z", "path": "handler/src/main/java/io/netty/handler/ipfilter/IpSubnetFilter.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.ipfilter;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandler.Sharable;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.util.internal.ObjectUtil;\n+\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+/**\n+ * <p>\n+ * This class allows one to filter new {@link Channel}s based on the\n+ * {@link IpSubnetFilter}s passed to its constructor. If no rules are provided, all connections\n+ * will be accepted.\n+ * </p>\n+ * <p>\n+ * If you would like to explicitly take action on rejected {@link Channel}s, you should override\n+ * {@link #channelRejected(ChannelHandlerContext, SocketAddress)}. </p>\n+ * <p> This filter uses Binary Search for faster filtering so it's a good practice to remove\n+ * overlapping subnet rules and also entries should be arranged in incremental order.</p>\n+ */\n+@Sharable\n+public class IpSubnetFilter extends AbstractRemoteAddressFilter<InetSocketAddress> {\n+\n+    private final List<IpSubnetFilterRule> rules;\n+    private final boolean acceptIfNotFound;\n+    private final IpFilterRuleType ipFilterRuleType;\n+\n+    /**\n+     * <p> Create new {@link IpSubnetFilter} Instance with specified {@link IpSubnetFilterRule} as array. </p>\n+     * <p> {@code acceptIfNotFound} is set to {@code true} </p>\n+     *\n+     * @param rules {@link IpSubnetFilterRule} as array\n+     */\n+    public IpSubnetFilter(IpSubnetFilterRule... rules) {\n+        this(true, Arrays.asList(ObjectUtil.checkNotNull(rules, \"rules\")));\n+    }\n+\n+    /**\n+     * <p> Create new {@link IpSubnetFilter} Instance with specified {@link IpSubnetFilterRule} as array\n+     * and specify if we'll accept a connection if we don't find it in the rule(s). </p>\n+     *\n+     * @param acceptIfNotFound {@code true} if we'll accept connection if not found in rule(s).\n+     * @param rules            {@link IpSubnetFilterRule} as array\n+     */\n+    public IpSubnetFilter(boolean acceptIfNotFound, IpSubnetFilterRule... rules) {\n+        this(acceptIfNotFound, Arrays.asList(ObjectUtil.checkNotNull(rules, \"rules\")));\n+    }\n+\n+    /**\n+     * <p> Create new {@link IpSubnetFilter} Instance with specified {@link IpSubnetFilterRule} as {@link List}. </p>\n+     * <p> {@code acceptIfNotFound} is set to {@code true} </p>\n+     *\n+     * @param rules {@link IpSubnetFilterRule} as {@link List}\n+     */\n+    public IpSubnetFilter(List<IpSubnetFilterRule> rules) {\n+        this(true, rules);\n+    }\n+\n+    /**\n+     * <p> Create new {@link IpSubnetFilter} Instance with specified {@link IpSubnetFilterRule} as {@link List}\n+     * and specify if we'll accept a connection if we don't find it in the rule(s). </p>\n+     *\n+     * @param acceptIfNotFound {@code true} if we'll accept connection if not found in rule(s).\n+     * @param rules            {@link IpSubnetFilterRule} as {@link List}\n+     */\n+    public IpSubnetFilter(boolean acceptIfNotFound, List<IpSubnetFilterRule> rules) {\n+        ObjectUtil.checkNotNull(rules, \"rules\");\n+        this.acceptIfNotFound = acceptIfNotFound;\n+\n+        int numAccept = 0;\n+        int numReject = 0;\n+\n+        // Iterate over rules and check for `null` rule.\n+        for (IpSubnetFilterRule ipSubnetFilterRule : rules) {\n+            ObjectUtil.checkNotNull(ipSubnetFilterRule, \"rule\");\n+            if (ipSubnetFilterRule.ruleType() == IpFilterRuleType.ACCEPT) {\n+                numAccept++;\n+            } else {\n+                numReject++;\n+            }\n+        }\n+\n+        /*\n+         * If Number of accept rules are 0 and Number of reject rules is more than 0,\n+         * then all rules are of \"REJECT\" type.\n+         *\n+         * In this case, we'll set `ipFilterRuleType` to `IpFilterRuleType.REJECT`\n+         *\n+         * If Number of accept rules are more than 0 and number of reject rules are 0,\n+         * then all rules are of \"ACCEPT\" type.\n+         *\n+         */\n+        if (numAccept == 0 && numReject > 0) {\n+            ipFilterRuleType = IpFilterRuleType.REJECT;\n+        } else if (numAccept > 0 && numReject == 0) {\n+            ipFilterRuleType = IpFilterRuleType.ACCEPT;\n+        } else {\n+            ipFilterRuleType = null;\n+        }\n+\n+        this.rules = sortAndFilter(rules);\n+        rules.clear(); // Free-up old unsorted list\n+    }\n+\n+    @Override\n+    protected boolean accept(ChannelHandlerContext ctx, InetSocketAddress remoteAddress) {\n+        int indexOf = Collections.binarySearch(this.rules, remoteAddress, IpSubnetFilterRuleComparator.INSTANCE);\n+        if (indexOf >= 0) {\n+            if (ipFilterRuleType == null) {\n+                return this.rules.get(indexOf).ruleType() == IpFilterRuleType.ACCEPT;", "originalCommit": "ea2eea00724c226f95230a161537e0f64e94d79a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQwMzAzNQ==", "url": "https://github.com/netty/netty/pull/10492#discussion_r477403035", "bodyText": "this is unnecessary.", "author": "chrisvest", "createdAt": "2020-08-26T15:45:38Z", "path": "handler/src/main/java/io/netty/handler/ipfilter/IpSubnetFilter.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.ipfilter;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandler.Sharable;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.util.internal.ObjectUtil;\n+\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+/**\n+ * <p>\n+ * This class allows one to filter new {@link Channel}s based on the\n+ * {@link IpSubnetFilter}s passed to its constructor. If no rules are provided, all connections\n+ * will be accepted.\n+ * </p>\n+ * <p>\n+ * If you would like to explicitly take action on rejected {@link Channel}s, you should override\n+ * {@link #channelRejected(ChannelHandlerContext, SocketAddress)}. </p>\n+ * <p> This filter uses Binary Search for faster filtering so it's a good practice to remove\n+ * overlapping subnet rules and also entries should be arranged in incremental order.</p>\n+ */\n+@Sharable\n+public class IpSubnetFilter extends AbstractRemoteAddressFilter<InetSocketAddress> {\n+\n+    private final List<IpSubnetFilterRule> rules;\n+    private final boolean acceptIfNotFound;\n+    private final IpFilterRuleType ipFilterRuleType;\n+\n+    /**\n+     * <p> Create new {@link IpSubnetFilter} Instance with specified {@link IpSubnetFilterRule} as array. </p>\n+     * <p> {@code acceptIfNotFound} is set to {@code true} </p>\n+     *\n+     * @param rules {@link IpSubnetFilterRule} as array\n+     */\n+    public IpSubnetFilter(IpSubnetFilterRule... rules) {\n+        this(true, Arrays.asList(ObjectUtil.checkNotNull(rules, \"rules\")));\n+    }\n+\n+    /**\n+     * <p> Create new {@link IpSubnetFilter} Instance with specified {@link IpSubnetFilterRule} as array\n+     * and specify if we'll accept a connection if we don't find it in the rule(s). </p>\n+     *\n+     * @param acceptIfNotFound {@code true} if we'll accept connection if not found in rule(s).\n+     * @param rules            {@link IpSubnetFilterRule} as array\n+     */\n+    public IpSubnetFilter(boolean acceptIfNotFound, IpSubnetFilterRule... rules) {\n+        this(acceptIfNotFound, Arrays.asList(ObjectUtil.checkNotNull(rules, \"rules\")));\n+    }\n+\n+    /**\n+     * <p> Create new {@link IpSubnetFilter} Instance with specified {@link IpSubnetFilterRule} as {@link List}. </p>\n+     * <p> {@code acceptIfNotFound} is set to {@code true} </p>\n+     *\n+     * @param rules {@link IpSubnetFilterRule} as {@link List}\n+     */\n+    public IpSubnetFilter(List<IpSubnetFilterRule> rules) {\n+        this(true, rules);\n+    }\n+\n+    /**\n+     * <p> Create new {@link IpSubnetFilter} Instance with specified {@link IpSubnetFilterRule} as {@link List}\n+     * and specify if we'll accept a connection if we don't find it in the rule(s). </p>\n+     *\n+     * @param acceptIfNotFound {@code true} if we'll accept connection if not found in rule(s).\n+     * @param rules            {@link IpSubnetFilterRule} as {@link List}\n+     */\n+    public IpSubnetFilter(boolean acceptIfNotFound, List<IpSubnetFilterRule> rules) {\n+        ObjectUtil.checkNotNull(rules, \"rules\");\n+        this.acceptIfNotFound = acceptIfNotFound;\n+\n+        int numAccept = 0;\n+        int numReject = 0;\n+\n+        // Iterate over rules and check for `null` rule.\n+        for (IpSubnetFilterRule ipSubnetFilterRule : rules) {\n+            ObjectUtil.checkNotNull(ipSubnetFilterRule, \"rule\");\n+            if (ipSubnetFilterRule.ruleType() == IpFilterRuleType.ACCEPT) {\n+                numAccept++;\n+            } else {\n+                numReject++;\n+            }\n+        }\n+\n+        /*\n+         * If Number of accept rules are 0 and Number of reject rules is more than 0,\n+         * then all rules are of \"REJECT\" type.\n+         *\n+         * In this case, we'll set `ipFilterRuleType` to `IpFilterRuleType.REJECT`\n+         *\n+         * If Number of accept rules are more than 0 and number of reject rules are 0,\n+         * then all rules are of \"ACCEPT\" type.\n+         *\n+         */\n+        if (numAccept == 0 && numReject > 0) {\n+            ipFilterRuleType = IpFilterRuleType.REJECT;\n+        } else if (numAccept > 0 && numReject == 0) {\n+            ipFilterRuleType = IpFilterRuleType.ACCEPT;\n+        } else {\n+            ipFilterRuleType = null;\n+        }\n+\n+        this.rules = sortAndFilter(rules);\n+        rules.clear(); // Free-up old unsorted list\n+    }\n+\n+    @Override\n+    protected boolean accept(ChannelHandlerContext ctx, InetSocketAddress remoteAddress) {\n+        int indexOf = Collections.binarySearch(this.rules, remoteAddress, IpSubnetFilterRuleComparator.INSTANCE);\n+        if (indexOf >= 0) {\n+            if (ipFilterRuleType == null) {\n+                return this.rules.get(indexOf).ruleType() == IpFilterRuleType.ACCEPT;\n+            } else {\n+                return this.ipFilterRuleType == IpFilterRuleType.ACCEPT;", "originalCommit": "ea2eea00724c226f95230a161537e0f64e94d79a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQwNTA0NA==", "url": "https://github.com/netty/netty/pull/10492#discussion_r477405044", "bodyText": "This should say AbstractRemoteAddressFilter#channelRejected(ChannelHandlerContext, SocketAddress) for the javadoc reference to work.", "author": "chrisvest", "createdAt": "2020-08-26T15:48:32Z", "path": "handler/src/main/java/io/netty/handler/ipfilter/IpSubnetFilter.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.ipfilter;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandler.Sharable;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.util.internal.ObjectUtil;\n+\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+/**\n+ * <p>\n+ * This class allows one to filter new {@link Channel}s based on the\n+ * {@link IpSubnetFilter}s passed to its constructor. If no rules are provided, all connections\n+ * will be accepted.\n+ * </p>\n+ * <p>\n+ * If you would like to explicitly take action on rejected {@link Channel}s, you should override\n+ * {@link #channelRejected(ChannelHandlerContext, SocketAddress)}. </p>", "originalCommit": "ea2eea00724c226f95230a161537e0f64e94d79a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQxNDY0OQ==", "url": "https://github.com/netty/netty/pull/10492#discussion_r477414649", "bodyText": "Actually this is coming from \n  \n    \n      netty/handler/src/main/java/io/netty/handler/ipfilter/RuleBasedIpFilter.java\n    \n    \n         Line 32\n      in\n      4be9387\n    \n    \n    \n    \n\n        \n          \n            * {@link #channelRejected(ChannelHandlerContext, SocketAddress)}.", "author": "hyperxpro", "createdAt": "2020-08-26T16:02:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQwNTA0NA=="}], "type": "inlineReview"}, {"oid": "4fbdc61d9affe88bbf1700e20d07cae23f19a495", "url": "https://github.com/netty/netty/commit/4fbdc61d9affe88bbf1700e20d07cae23f19a495", "message": "check for mix of IPv4/6 rules", "committedDate": "2020-08-26T17:32:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU5MjAwMw==", "url": "https://github.com/netty/netty/pull/10492#discussion_r477592003", "bodyText": "Mixed version IPs should be in a separate test, as otherwise this test will now fail because of the new exception thrown from the constructor, right?", "author": "chrisvest", "createdAt": "2020-08-26T21:11:52Z", "path": "handler/src/test/java/io/netty/handler/ipfilter/IpSubnetFilterTest.java", "diffHunk": "@@ -152,6 +152,7 @@ public void testBinarySearch() {\n         ipSubnetFilterRuleList.add(buildRejectIP(\"200.200.200.200\", 32));\n         ipSubnetFilterRuleList.add(buildRejectIP(\"108.0.0.0\", 4));\n         ipSubnetFilterRuleList.add(buildRejectIP(\"10.10.10.10\", 8));\n+        ipSubnetFilterRuleList.add(buildRejectIP(\"2001:db8:abcd:0000::\", 52));", "originalCommit": "4fbdc61d9affe88bbf1700e20d07cae23f19a495", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODAyODExMQ==", "url": "https://github.com/netty/netty/pull/10492#discussion_r478028111", "bodyText": "Forgot to remove :p", "author": "hyperxpro", "createdAt": "2020-08-27T03:22:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU5MjAwMw=="}], "type": "inlineReview"}, {"oid": "d4892321278c0e7858c795a1660873f52c85a0ed", "url": "https://github.com/netty/netty/commit/d4892321278c0e7858c795a1660873f52c85a0ed", "message": "fix test", "committedDate": "2020-08-27T03:26:04Z", "type": "commit"}, {"oid": "6be92eb047fbd10b81be1982ca1d872def8195a1", "url": "https://github.com/netty/netty/commit/6be92eb047fbd10b81be1982ca1d872def8195a1", "message": "add mixed ipv4 and ipv6 support", "committedDate": "2020-08-27T10:05:20Z", "type": "commit"}, {"oid": "b003b068af00e7fe643bbfb46c56c74ddb343945", "url": "https://github.com/netty/netty/commit/b003b068af00e7fe643bbfb46c56c74ddb343945", "message": "just a line fix", "committedDate": "2020-08-27T10:08:01Z", "type": "commit"}, {"oid": "e25ed6dd78e09ab1ab7ddb17a815a555ecf4101c", "url": "https://github.com/netty/netty/commit/e25ed6dd78e09ab1ab7ddb17a815a555ecf4101c", "message": "Just a line shift. No code change", "committedDate": "2020-08-29T12:09:15Z", "type": "commit"}, {"oid": "9a9eb062c8abe595bf08a4c041f7a22b5c4c0a4c", "url": "https://github.com/netty/netty/commit/9a9eb062c8abe595bf08a4c041f7a22b5c4c0a4c", "message": "use NetUtils#ipv4AddressToInt(Inet4Address)", "committedDate": "2020-08-31T07:39:03Z", "type": "commit"}, {"oid": "d51a76c7b1590c55b391b0e97777ec6a89f11dbb", "url": "https://github.com/netty/netty/commit/d51a76c7b1590c55b391b0e97777ec6a89f11dbb", "message": "just line change. no code modified", "committedDate": "2020-08-31T07:43:22Z", "type": "commit"}, {"oid": "3f84e642dc7df8b77004aaef4952602d84ee99bc", "url": "https://github.com/netty/netty/commit/3f84e642dc7df8b77004aaef4952602d84ee99bc", "message": "Update JavaDoc. No code change.", "committedDate": "2020-09-01T05:55:21Z", "type": "commit"}]}