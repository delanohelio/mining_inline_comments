{"pr_number": 10363, "pr_title": "Ensure ApplicationProtocolNegotiationHandler does handle handshake fa\u2026", "pr_createdAt": "2020-06-22T14:26:24Z", "pr_url": "https://github.com/netty/netty/pull/10363", "timeline": [{"oid": "57c8833e6e2d32064dc5b2af6ce2cee48cb724d0", "url": "https://github.com/netty/netty/commit/57c8833e6e2d32064dc5b2af6ce2cee48cb724d0", "message": "Ensure ApplicationProtocolNegotiationHandler does handle handshake failures completely\n\nMotivation:\n\nWhen ApplicationProtocolNegotiationHandler is in the pipeline we should expect that its handshakeFailure(...) method will be able to completly handle the handshake error. At the moment this is not the case as it only handled SslHandshakeCompletionEvent but not the exceptionCaught(...) that is also triggered in this case\n\nModifications:\n\n- Call handshakeFailure(...) in exceptionCaught and so fix double notification.\n- Add testcases\n\nResult:\n\nFixes https://github.com/netty/netty/issues/10342", "committedDate": "2020-06-22T14:23:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2NjM0Nw==", "url": "https://github.com/netty/netty/pull/10363#discussion_r443666347", "bodyText": "possible class cast exception?", "author": "johnou", "createdAt": "2020-06-22T16:01:53Z", "path": "handler/src/main/java/io/netty/handler/ssl/ApplicationProtocolNegotiationHandler.java", "diffHunk": "@@ -78,30 +81,33 @@ protected ApplicationProtocolNegotiationHandler(String fallbackProtocol) {\n \n     @Override\n     public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n-        if (evt instanceof SslHandshakeCompletionEvent) {\n-\n-            try {\n-                SslHandshakeCompletionEvent handshakeEvent = (SslHandshakeCompletionEvent) evt;\n-                if (handshakeEvent.isSuccess()) {\n-                    SslHandler sslHandler = ctx.pipeline().get(SslHandler.class);\n-                    if (sslHandler == null) {\n-                        throw new IllegalStateException(\"cannot find an SslHandler in the pipeline (required for \"\n-                                + \"application-level protocol negotiation)\");\n-                    }\n-                    String protocol = sslHandler.applicationProtocol();\n-                    configurePipeline(ctx, protocol != null ? protocol : fallbackProtocol);\n-                } else {\n-                    handshakeFailure(ctx, handshakeEvent.cause());\n-                }\n-            } catch (Throwable cause) {\n-                exceptionCaught(ctx, cause);\n-            } finally {\n-                ChannelPipeline pipeline = ctx.pipeline();\n-                if (pipeline.context(this) != null) {\n-                    pipeline.remove(this);\n+        SslHandshakeCompletionEvent handshakeEvent = (SslHandshakeCompletionEvent) evt;", "originalCommit": "57c8833e6e2d32064dc5b2af6ce2cee48cb724d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e774406455530a0406146d5c20ecee80f02364cb", "url": "https://github.com/netty/netty/commit/e774406455530a0406146d5c20ecee80f02364cb", "message": "Fix possible ClassCastException", "committedDate": "2020-06-22T16:05:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3NDYzMQ==", "url": "https://github.com/netty/netty/pull/10363#discussion_r443674631", "bodyText": "propagate", "author": "johnou", "createdAt": "2020-06-22T16:15:05Z", "path": "handler/src/main/java/io/netty/handler/ssl/ApplicationProtocolNegotiationHandler.java", "diffHunk": "@@ -91,17 +93,23 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc\n                     String protocol = sslHandler.applicationProtocol();\n                     configurePipeline(ctx, protocol != null ? protocol : fallbackProtocol);\n                 } else {\n-                    handshakeFailure(ctx, handshakeEvent.cause());\n+                    // if the event is not produced because of an successful handshake we will receive the same exception\n+                    // in exceptionCaught(...) and handle it there. This will allow us more fine-granted control over\n+                    // which exception we propergate down the ChannelPipeline.", "originalCommit": "e774406455530a0406146d5c20ecee80f02364cb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3NTI3NQ==", "url": "https://github.com/netty/netty/pull/10363#discussion_r443675275", "bodyText": "cannot be reused?", "author": "johnou", "createdAt": "2020-06-22T16:16:13Z", "path": "handler/src/main/java/io/netty/handler/ssl/ApplicationProtocolNegotiationHandler.java", "diffHunk": "@@ -125,6 +133,18 @@ protected void handshakeFailure(ChannelHandlerContext ctx, Throwable cause) thro\n \n     @Override\n     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n+        Throwable wrapped;\n+        if (cause instanceof DecoderException && ((wrapped = cause.getCause()) instanceof SSLException)) {\n+            try {\n+                handshakeFailure(ctx, wrapped);\n+                return;\n+            } finally {\n+                ChannelPipeline pipeline = ctx.pipeline();\n+                if (pipeline.context(this) != null) {\n+                    pipeline.remove(this);", "originalCommit": "e774406455530a0406146d5c20ecee80f02364cb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2MjM0NA==", "url": "https://github.com/netty/netty/pull/10363#discussion_r443762344", "bodyText": "This line is exceeding 120 characters' length threshold.", "author": "hyperxpro", "createdAt": "2020-06-22T18:56:01Z", "path": "handler/src/main/java/io/netty/handler/ssl/ApplicationProtocolNegotiationHandler.java", "diffHunk": "@@ -91,17 +93,23 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc\n                     String protocol = sslHandler.applicationProtocol();\n                     configurePipeline(ctx, protocol != null ? protocol : fallbackProtocol);\n                 } else {\n-                    handshakeFailure(ctx, handshakeEvent.cause());\n+                    // if the event is not produced because of an successful handshake we will receive the same exception", "originalCommit": "e774406455530a0406146d5c20ecee80f02364cb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "995de7e86111d0c6daeb2ebd3f2a5de268147504", "url": "https://github.com/netty/netty/commit/995de7e86111d0c6daeb2ebd3f2a5de268147504", "message": "Address comments", "committedDate": "2020-06-23T07:38:16Z", "type": "commit"}, {"oid": "216a065462f6165d9903f3c81fc61f58515129db", "url": "https://github.com/netty/netty/commit/216a065462f6165d9903f3c81fc61f58515129db", "message": "cleanup", "committedDate": "2020-06-23T08:40:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5NjQxNw==", "url": "https://github.com/netty/netty/pull/10363#discussion_r444096417", "bodyText": "static?", "author": "johnou", "createdAt": "2020-06-23T09:40:37Z", "path": "handler/src/main/java/io/netty/handler/ssl/ApplicationProtocolNegotiationHandler.java", "diffHunk": "@@ -93,26 +93,31 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc\n                     String protocol = sslHandler.applicationProtocol();\n                     configurePipeline(ctx, protocol != null ? protocol : fallbackProtocol);\n                 } else {\n-                    // if the event is not produced because of an successful handshake we will receive the same exception\n-                    // in exceptionCaught(...) and handle it there. This will allow us more fine-granted control over\n-                    // which exception we propergate down the ChannelPipeline.\n+                    // if the event is not produced because of an successful handshake we will receive the same\n+                    // exception in exceptionCaught(...) and handle it there. This will allow us more fine-grained\n+                    // control over which exception we propagate down the ChannelPipeline.\n                     //\n                     // See https://github.com/netty/netty/issues/10342\n                 }\n             } catch (Throwable cause) {\n                 exceptionCaught(ctx, cause);\n             } finally {\n-                ChannelPipeline pipeline = ctx.pipeline();\n                 // Handshake failures are handled in exceptionCaught(...).\n-                if (handshakeEvent.isSuccess() && pipeline.context(this) != null) {\n-                    pipeline.remove(this);\n+                if (handshakeEvent.isSuccess()) {\n+                    removeSelfIfPresent(ctx);\n                 }\n             }\n         }\n \n         ctx.fireUserEventTriggered(evt);\n     }\n \n+    private void removeSelfIfPresent(ChannelHandlerContext ctx) {", "originalCommit": "995de7e86111d0c6daeb2ebd3f2a5de268147504", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5ODA3MQ==", "url": "https://github.com/netty/netty/pull/10363#discussion_r444098071", "bodyText": "nope ... it uses this", "author": "normanmaurer", "createdAt": "2020-06-23T09:43:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5NjQxNw=="}], "type": "inlineReview"}, {"oid": "88de2549e97a0a49d4f9ca138196e89940092cce", "url": "https://github.com/netty/netty/commit/88de2549e97a0a49d4f9ca138196e89940092cce", "message": "Test fix", "committedDate": "2020-06-23T09:47:09Z", "type": "commit"}, {"oid": "c41a6a63cc271eedb690898b82d77c30bf61f155", "url": "https://github.com/netty/netty/commit/c41a6a63cc271eedb690898b82d77c30bf61f155", "message": "Fix test for java11 and later", "committedDate": "2020-06-23T10:57:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE2Mzc3NQ==", "url": "https://github.com/netty/netty/pull/10363#discussion_r444163775", "bodyText": "\ud83d\udc41\ufe0f", "author": "johnou", "createdAt": "2020-06-23T11:50:13Z", "path": "handler/src/main/java/io/netty/handler/ssl/ApplicationProtocolNegotiationHandler.java", "diffHunk": "@@ -79,32 +82,43 @@ protected ApplicationProtocolNegotiationHandler(String fallbackProtocol) {\n     @Override\n     public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n         if (evt instanceof SslHandshakeCompletionEvent) {\n-\n+            SslHandshakeCompletionEvent handshakeEvent = (SslHandshakeCompletionEvent) evt;\n             try {\n-                SslHandshakeCompletionEvent handshakeEvent = (SslHandshakeCompletionEvent) evt;\n                 if (handshakeEvent.isSuccess()) {\n                     SslHandler sslHandler = ctx.pipeline().get(SslHandler.class);\n                     if (sslHandler == null) {\n+                        System.err.println(ctx.pipeline().toString());", "originalCommit": "c41a6a63cc271eedb690898b82d77c30bf61f155", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "181aa62ea7d3180feccca3328c67af86492bf953", "url": "https://github.com/netty/netty/commit/181aa62ea7d3180feccca3328c67af86492bf953", "message": "Remove debug cruft", "committedDate": "2020-06-23T11:54:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkzNDcyMg==", "url": "https://github.com/netty/netty/pull/10363#discussion_r444934722", "bodyText": "@normanmaurer tbh I would remove the isSuccess check, I think it would be safer to always attempt to remove the handler from the pipeline, what if an exception is not thrown but handshake event is false?", "author": "johnou", "createdAt": "2020-06-24T14:27:26Z", "path": "handler/src/main/java/io/netty/handler/ssl/ApplicationProtocolNegotiationHandler.java", "diffHunk": "@@ -91,20 +93,31 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc\n                     String protocol = sslHandler.applicationProtocol();\n                     configurePipeline(ctx, protocol != null ? protocol : fallbackProtocol);\n                 } else {\n-                    handshakeFailure(ctx, handshakeEvent.cause());\n+                    // if the event is not produced because of an successful handshake we will receive the same\n+                    // exception in exceptionCaught(...) and handle it there. This will allow us more fine-grained\n+                    // control over which exception we propagate down the ChannelPipeline.\n+                    //\n+                    // See https://github.com/netty/netty/issues/10342\n                 }\n             } catch (Throwable cause) {\n                 exceptionCaught(ctx, cause);\n             } finally {\n-                ChannelPipeline pipeline = ctx.pipeline();\n-                if (pipeline.context(this) != null) {\n-                    pipeline.remove(this);\n+                // Handshake failures are handled in exceptionCaught(...).\n+                if (handshakeEvent.isSuccess()) {", "originalCommit": "181aa62ea7d3180feccca3328c67af86492bf953", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk0MDUzNA==", "url": "https://github.com/netty/netty/pull/10363#discussion_r444940534", "bodyText": "thats impossible I think", "author": "normanmaurer", "createdAt": "2020-06-24T14:34:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkzNDcyMg=="}], "type": "inlineReview"}]}