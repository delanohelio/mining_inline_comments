{"pr_number": 10280, "pr_title": "Allow to have the session tickets automatically managed by the native\u2026", "pr_createdAt": "2020-05-13T13:24:34Z", "pr_url": "https://github.com/netty/netty/pull/10280", "timeline": [{"oid": "95d14aaa91ba198f165059e7c380bf09aafacc1a", "url": "https://github.com/netty/netty/commit/95d14aaa91ba198f165059e7c380bf09aafacc1a", "message": "Allow to have the session tickets automatically managed by the native library\n\nMotivation:\n\nBoringSSL supports to automatically manage the session tickets to be used and so also rotate them etc. This is often prefered by users as it removed some complexity. We should support to make use of this.\n\nModifications:\n\n- Allow to have setSessionTickets() called without an argument or an empty array\n- Add tests\n\nResult:\n\nEasier usage of session tickets", "committedDate": "2020-05-13T13:22:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU2MzYyNQ==", "url": "https://github.com/netty/netty/pull/10280#discussion_r424563625", "bodyText": "Consider referencing to the specific section: https://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html#Session-tickets", "author": "idelpivnitskiy", "createdAt": "2020-05-13T16:15:46Z", "path": "handler/src/main/java/io/netty/handler/ssl/OpenSslSessionContext.java", "diffHunk": "@@ -97,7 +97,10 @@ public void setTicketKeys(byte[] keys) {\n     }\n \n     /**\n-     * Sets the SSL session ticket keys of this context.\n+     * Sets the SSL session ticket keys of this context. Depending on the underlying native library you may omit the\n+     * argument or pass an empty array and so let the native library handle the key generation and rotating for you.\n+     * If this is supported by the underlying native library should be checked in this case. For example\n+     * <a href=\"https://boringssl.googlesource.com/boringssl/\">BoringSSL</a> is known to support this.", "originalCommit": "95d14aaa91ba198f165059e7c380bf09aafacc1a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU2ODMxNg==", "url": "https://github.com/netty/netty/pull/10280#discussion_r424568316", "bodyText": "OpenSSL also supports it in a similar way on the server-side. See SSL_OP_NO_TICKET on this page: https://www.openssl.org/docs/man1.1.1/man3/SSL_CTX_set_options.html.", "author": "idelpivnitskiy", "createdAt": "2020-05-13T16:22:53Z", "path": "handler/src/test/java/io/netty/handler/ssl/SslHandlerTest.java", "diffHunk": "@@ -1118,16 +1118,29 @@ protected void initChannel(Channel ch) {\n \n     @Test(timeout = 5000L)\n     public void testSessionTicketsWithTLSv12() throws Throwable {\n-        testSessionTickets(SslUtils.PROTOCOL_TLS_V1_2);\n+        testSessionTickets(SslUtils.PROTOCOL_TLS_V1_2, true);\n     }\n \n     @Test(timeout = 5000L)\n     public void testSessionTicketsWithTLSv13() throws Throwable {\n         assumeTrue(OpenSsl.isTlsv13Supported());\n-        testSessionTickets(SslUtils.PROTOCOL_TLS_V1_3);\n+        testSessionTickets(SslUtils.PROTOCOL_TLS_V1_3, true);\n     }\n \n-    private static void testSessionTickets(String protocol) throws Throwable {\n+    @Test(timeout = 5000L)\n+    public void testSessionTicketsWithTLSv12AndNoKey() throws Throwable {\n+        assumeTrue(OpenSsl.isBoringSSL());\n+        testSessionTickets(SslUtils.PROTOCOL_TLS_V1_2, false);\n+    }\n+\n+    @Test(timeout = 5000L)\n+    public void testSessionTicketsWithTLSv13AndNoKey() throws Throwable {\n+        assumeTrue(OpenSsl.isTlsv13Supported());\n+        assumeTrue(OpenSsl.isBoringSSL());", "originalCommit": "95d14aaa91ba198f165059e7c380bf09aafacc1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkyODU4NQ==", "url": "https://github.com/netty/netty/pull/10280#discussion_r424928585", "bodyText": "You are right... Let me fix this", "author": "normanmaurer", "createdAt": "2020-05-14T07:34:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU2ODMxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3MDM3MA==", "url": "https://github.com/netty/netty/pull/10280#discussion_r424570370", "bodyText": "Note (pre-existing behavior): these tests does not verify that tickets actually work. They verify only that setTicketKeys() method does not throw. There currently no API to see that tickets were issued or received.", "author": "idelpivnitskiy", "createdAt": "2020-05-13T16:25:55Z", "path": "handler/src/test/java/io/netty/handler/ssl/SslHandlerTest.java", "diffHunk": "@@ -1141,10 +1154,15 @@ private static void testSessionTickets(String protocol) throws Throwable {\n                 .protocols(protocol)\n                 .build();\n \n-        OpenSslSessionTicketKey key = new OpenSslSessionTicketKey(new byte[OpenSslSessionTicketKey.NAME_SIZE],\n-                new byte[OpenSslSessionTicketKey.HMAC_KEY_SIZE], new byte[OpenSslSessionTicketKey.AES_KEY_SIZE]);\n-        ((OpenSslSessionContext) sslClientCtx.sessionContext()).setTicketKeys(key);\n-        ((OpenSslSessionContext) sslServerCtx.sessionContext()).setTicketKeys(key);\n+        if (withKey) {\n+            OpenSslSessionTicketKey key = new OpenSslSessionTicketKey(new byte[OpenSslSessionTicketKey.NAME_SIZE],\n+                    new byte[OpenSslSessionTicketKey.HMAC_KEY_SIZE], new byte[OpenSslSessionTicketKey.AES_KEY_SIZE]);\n+            ((OpenSslSessionContext) sslClientCtx.sessionContext()).setTicketKeys(key);\n+            ((OpenSslSessionContext) sslServerCtx.sessionContext()).setTicketKeys(key);\n+        } else {\n+            ((OpenSslSessionContext) sslClientCtx.sessionContext()).setTicketKeys();\n+            ((OpenSslSessionContext) sslServerCtx.sessionContext()).setTicketKeys();", "originalCommit": "95d14aaa91ba198f165059e7c380bf09aafacc1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkyODY3OA==", "url": "https://github.com/netty/netty/pull/10280#discussion_r424928678", "bodyText": "yep I know :)", "author": "normanmaurer", "createdAt": "2020-05-14T07:34:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3MDM3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3MTczMQ==", "url": "https://github.com/netty/netty/pull/10280#discussion_r424571731", "bodyText": "Not necessary now, but when client will support session tickets we can clarify that non-empty keys param is changing behavior only for the server side.", "author": "idelpivnitskiy", "createdAt": "2020-05-13T16:27:56Z", "path": "handler/src/main/java/io/netty/handler/ssl/OpenSslSessionContext.java", "diffHunk": "@@ -97,7 +97,10 @@ public void setTicketKeys(byte[] keys) {\n     }\n \n     /**\n-     * Sets the SSL session ticket keys of this context.\n+     * Sets the SSL session ticket keys of this context. Depending on the underlying native library you may omit the\n+     * argument or pass an empty array and so let the native library handle the key generation and rotating for you.", "originalCommit": "95d14aaa91ba198f165059e7c380bf09aafacc1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkyODg1NA==", "url": "https://github.com/netty/netty/pull/10280#discussion_r424928854", "bodyText": "yeah lets tackle this once we have everything in place", "author": "normanmaurer", "createdAt": "2020-05-14T07:35:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3MTczMQ=="}], "type": "inlineReview"}, {"oid": "204e94505bc1c4f46acb0ef8e607dca22ec44b20", "url": "https://github.com/netty/netty/commit/204e94505bc1c4f46acb0ef8e607dca22ec44b20", "message": "Comments", "committedDate": "2020-05-14T07:37:50Z", "type": "commit"}]}