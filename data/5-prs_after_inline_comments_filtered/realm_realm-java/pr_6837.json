{"pr_number": 6837, "pr_title": "Add ability to use CodecRegistry for passing objects as BSON to JNI", "pr_createdAt": "2020-05-05T21:33:13Z", "pr_url": "https://github.com/realm/realm-java/pull/6837", "timeline": [{"oid": "795a9fc64e207913f15d95b40479ce0e793b05b3", "url": "https://github.com/realm/realm-java/commit/795a9fc64e207913f15d95b40479ce0e793b05b3", "message": "Add ability to use CodecRegistry for passing values as BSON to JNI", "committedDate": "2020-05-05T21:12:09Z", "type": "commit"}, {"oid": "4ea5fad0881c31175cffe8b3f6bce804a1d759bf", "url": "https://github.com/realm/realm-java/commit/4ea5fad0881c31175cffe8b3f6bce804a1d759bf", "message": "Remove unnecessary import", "committedDate": "2020-05-06T06:38:31Z", "type": "commit"}, {"oid": "11a7d7d77b3102996483f5db7576209677ee91c0", "url": "https://github.com/realm/realm-java/commit/11a7d7d77b3102996483f5db7576209677ee91c0", "message": "Add default codec registry to RealmAppConfiguration", "committedDate": "2020-05-06T11:29:14Z", "type": "commit"}, {"oid": "36814522fcf6a6a314dfcb05ab285c1bd6d09ce1", "url": "https://github.com/realm/realm-java/commit/36814522fcf6a6a314dfcb05ab285c1bd6d09ce1", "message": "Expose encoder/decoder variant for JniBsonProtocol methods", "committedDate": "2020-05-06T11:32:55Z", "type": "commit"}, {"oid": "6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5", "url": "https://github.com/realm/realm-java/commit/6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5", "message": "Rename RealmFunctionsTest->RealmFunctionsTests", "committedDate": "2020-05-06T13:26:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc5Njg5MQ==", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r420796891", "bodyText": "Rather than deleting these when the functions are ready, I would actually put them in their own JniBsonProtocolTest file. I think these two functions are super useful in and of themselves to make sure we never brake the conversion. Maybe write a jniRoundTrip test for them.", "author": "edualonso", "createdAt": "2020-05-06T13:38:23Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java", "diffHunk": "@@ -15,16 +15,30 @@\n  */\n package io.realm;\n \n-import org.bson.BsonValue;\n+import org.bson.codecs.configuration.CodecRegistry;\n \n import io.realm.internal.jni.JniBsonProtocol;\n \n-public class RealmFunctions {\n+// FIXME This class is only a placeholder for JNI round trip as  until actual RealmFunctions\n+//  implementation supersedes it.\n+class RealmFunctions {\n+\n+    private CodecRegistry codecRegistry;\n+\n+    RealmFunctions(CodecRegistry codecRegistry) {\n+        this.codecRegistry = codecRegistry;\n+    }\n+\n+    // FIXME Prelimiry implementation to be able to test passing BsonValues through JNI\n+    <T> T invoke(Object arg, Class<T> resultClass) {", "originalCommit": "6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc3ODA5Mg==", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r421778092", "bodyText": "Yes, it already pinpointed some errors in C++ parsing. I migrated the test to work across the actual functions by echoing  from the Stitch server in #6810 , as it seems like there is currently no way to easily do test only JNI implementation.", "author": "rorbech", "createdAt": "2020-05-07T20:36:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc5Njg5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwNjcxNw==", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r420806717", "bodyText": "Should probably be getDefaultCodecRegistry", "author": "cmelchior", "createdAt": "2020-05-06T13:50:53Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java", "diffHunk": "@@ -175,10 +184,25 @@ public File getSyncRootDirectory() {\n         return syncRootDir;\n     }\n \n+    // FIXME Doc\n+    public CodecRegistry getCodecRegistry() { return codecRegistry; }", "originalCommit": "6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI3NzM1NQ==", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r421277355", "bodyText": "\ud83d\udc4d", "author": "rorbech", "createdAt": "2020-05-07T06:52:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwNjcxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwNzk3NQ==", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r420807975", "bodyText": "It is fine to keep this public as long as there is a Javadoc stating it is still work-in-progress. The v10 branch is considered under development anyway, so merging \"half-finshed\" work should be okay as long as it is marked as such and doesn't break existing functionality.", "author": "cmelchior", "createdAt": "2020-05-06T13:52:29Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java", "diffHunk": "@@ -15,16 +15,30 @@\n  */\n package io.realm;\n \n-import org.bson.BsonValue;\n+import org.bson.codecs.configuration.CodecRegistry;\n \n import io.realm.internal.jni.JniBsonProtocol;\n \n-public class RealmFunctions {\n+// FIXME This class is only a placeholder for JNI round trip as  until actual RealmFunctions", "originalCommit": "6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwODk4OQ==", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r420808989", "bodyText": "Nitpick: Newlines are missing between these methods", "author": "cmelchior", "createdAt": "2020-05-06T13:53:45Z", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/jni/JniBsonProtocol.java", "diffHunk": "@@ -35,14 +44,30 @@\n                 .outputMode(JsonMode.EXTENDED)\n                 .build();\n \n-    public static String encode(BsonValue bsonValue) {\n-        BsonDocument document = new BsonDocument(VALUE, bsonValue);\n-        return document.toJson(writerSettings);\n+    public static <T> String encode(T value, CodecRegistry registry) {\n+        return encode(value, (Encoder<T>)registry.get(value.getClass()));\n+    }\n+    public static <T> String encode(T value, Encoder<T> encoder) {", "originalCommit": "6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "beaece4152fbe640931d747c76d883afa9600d47", "url": "https://github.com/realm/realm-java/commit/beaece4152fbe640931d747c76d883afa9600d47", "message": "Code review updates", "committedDate": "2020-05-06T19:49:11Z", "type": "commit"}, {"oid": "ae8321494eb2da51ef64be6063ca8a1397347c8b", "url": "https://github.com/realm/realm-java/commit/ae8321494eb2da51ef64be6063ca8a1397347c8b", "message": "Code review updates", "committedDate": "2020-05-06T20:00:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNTM5Mg==", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r421415392", "bodyText": "Just stumbled upon the BsonUtils.java class in the Stitch SDK. The use this:\n  public static final CodecRegistry DEFAULT_CODEC_REGISTRY =\n      fromProviders(\n          asList(\n              new ValueCodecProvider(),\n              new BsonValueCodecProvider(),\n              new DocumentCodecProvider(),\n              new IterableCodecProvider(),\n              new MapCodecProvider()));", "author": "edualonso", "createdAt": "2020-05-07T10:53:24Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java", "diffHunk": "@@ -175,10 +184,25 @@ public File getSyncRootDirectory() {\n         return syncRootDir;\n     }\n \n+    // FIXME Doc\n+    public CodecRegistry getDefaultCodecRegistry() { return codecRegistry; }\n+\n     /**\n      * FIXME\n      */\n     public static class Builder {\n+        // Default BSON codec for passing BSON to/from JNI\n+        static CodecRegistry DEFAULT_BSON_CODEC_REGISTRY = CodecRegistries.fromRegistries(", "originalCommit": "ae8321494eb2da51ef64be6063ca8a1397347c8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY0NTQ5NA==", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r421645494", "bodyText": "@rorbech Any thoughts on the above \u261d\ufe0f ? I would assume we would go with the broadest possible set of defaults, so whatever type people bring there is a fair good chance it will work?", "author": "cmelchior", "createdAt": "2020-05-07T16:44:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNTM5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcxNzMyOA==", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r421717328", "bodyText": "Did not evaluate all providers/codecs yet, but just added what I immediately spotted as userful.\nThe MapCodecProvider sounds like an obvious candidate, and from @edualonso it sounded like the DocumentCodecProvider would be useful for the collections.\nSo the above DEFAULT_CODEC_REGISTRY sound like a good update, but given the parser issues lower down the stack I would prefer awaiting usage/tests and add them in another PR to avoid pushing this one further.", "author": "rorbech", "createdAt": "2020-05-07T18:44:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNTM5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcxODU4MA==", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r421718580", "bodyText": "\ud83d\udc4d", "author": "cmelchior", "createdAt": "2020-05-07T18:47:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNTM5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcyMjA2OA==", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r421722068", "bodyText": "I added it as TODO on #6810", "author": "rorbech", "createdAt": "2020-05-07T18:53:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNTM5Mg=="}], "type": "inlineReview"}, {"oid": "30c04947379a223a7c7e6cfcdd791ad267e7a627", "url": "https://github.com/realm/realm-java/commit/30c04947379a223a7c7e6cfcdd791ad267e7a627", "message": "Bump to latest OS v10", "committedDate": "2020-05-07T15:36:32Z", "type": "commit"}, {"oid": "09a649115597ed0ecc188e66e9d33acd7e0f8cea", "url": "https://github.com/realm/realm-java/commit/09a649115597ed0ecc188e66e9d33acd7e0f8cea", "message": "Encapsulated jni bson protocol JNI implementation in its own class", "committedDate": "2020-05-07T15:36:32Z", "type": "commit"}, {"oid": "d7b7c93033f75954a33247fe6921a3bd50b1c6ae", "url": "https://github.com/realm/realm-java/commit/d7b7c93033f75954a33247fe6921a3bd50b1c6ae", "message": "Minor test case updates", "committedDate": "2020-05-07T15:36:32Z", "type": "commit"}, {"oid": "3730330aac8e13c84ef21d16d5c3dcfdb5f8dd79", "url": "https://github.com/realm/realm-java/commit/3730330aac8e13c84ef21d16d5c3dcfdb5f8dd79", "message": "Removed BsonConverter and companioning tests already covered by RealmFunctionsTests", "committedDate": "2020-05-07T15:36:32Z", "type": "commit"}, {"oid": "d4f0a381e0edefe3233b6bb027fb1f88fc775c52", "url": "https://github.com/realm/realm-java/commit/d4f0a381e0edefe3233b6bb027fb1f88fc775c52", "message": "Using BSON serialization for passing BSON arguments to JNI", "committedDate": "2020-05-07T15:36:32Z", "type": "commit"}, {"oid": "2720f070030dd786a150412209f8c7566a12ece2", "url": "https://github.com/realm/realm-java/commit/2720f070030dd786a150412209f8c7566a12ece2", "message": "Adding OS fix for bson argument handling in call_reset_password_function", "committedDate": "2020-05-07T15:53:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY0NjM3OA==", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r421646378", "bodyText": "We don't have a similar name. I find this name really exotic and not very readable (as a non-native english speaker), but given that I don't really have a good alternative we might as well adopt this I guess. It does has the benefit that it will be familiar to anyone coming to it from the Mongo side.", "author": "cmelchior", "createdAt": "2020-05-07T16:45:45Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java", "diffHunk": "@@ -388,6 +413,14 @@ public Builder syncRootDirectory(File rootDir) {\n             return this;\n         }\n \n+        // FIXME Naming: Does it clash with Realm sync concepts and set up wrong expectations?", "originalCommit": "2720f070030dd786a150412209f8c7566a12ece2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcyMTcxOQ==", "url": "https://github.com/realm/realm-java/pull/6837#discussion_r421721719", "bodyText": "Ok, will keep it then.", "author": "rorbech", "createdAt": "2020-05-07T18:52:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY0NjM3OA=="}], "type": "inlineReview"}, {"oid": "652a07e8829fe3e77de7d8c4f9070ca8a91d364d", "url": "https://github.com/realm/realm-java/commit/652a07e8829fe3e77de7d8c4f9070ca8a91d364d", "message": "Settle codec registry naming", "committedDate": "2020-05-07T18:47:02Z", "type": "commit"}]}