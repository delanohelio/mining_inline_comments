{"pr_number": 7219, "pr_title": "Dictionary - add RealmMap and stubs for SDK layer", "pr_createdAt": "2020-11-26T19:13:01Z", "pr_url": "https://github.com/realm/realm-java/pull/7219", "timeline": [{"oid": "286d7f96c94c45bff65a0e51df714b957d985da0", "url": "https://github.com/realm/realm-java/commit/286d7f96c94c45bff65a0e51df714b957d985da0", "message": "First steps with maps: added RealmMap class, abstracted managed/unmanaged logic for RealmMaps behind a strategy, added operators depending on value type, stubbed basic map interface operations for said operators", "committedDate": "2020-11-26T15:42:16Z", "type": "commit"}, {"oid": "594ab43e04fa02e4936f895a9716aa931888ac43", "url": "https://github.com/realm/realm-java/commit/594ab43e04fa02e4936f895a9716aa931888ac43", "message": "Added feedback after brainstorm", "committedDate": "2020-11-27T14:18:55Z", "type": "commit"}, {"oid": "b0106e26c799fbfe2d8f31bc470e57a5a4ec2ae5", "url": "https://github.com/realm/realm-java/commit/b0106e26c799fbfe2d8f31bc470e57a5a4ec2ae5", "message": "Added Freezable interface to use in RealmCollections (not possible to use with RealmObjects though). Modified unmanaged maps to allow any type and not only those accepted in phase 1 to mimic the same beahviour we have with RealmList. Created draft OsMap and io_internal_OsMap.cpp files (not functional yet)", "committedDate": "2020-12-02T11:20:07Z", "type": "commit"}, {"oid": "5ad6ba288076d19af98fc5a24ce5e81970149e53", "url": "https://github.com/realm/realm-java/commit/5ad6ba288076d19af98fc5a24ce5e81970149e53", "message": "Class cleanup", "committedDate": "2020-12-02T11:21:03Z", "type": "commit"}, {"oid": "6953f5f870f580513a9f45b8e4b91fff1e42fa9a", "url": "https://github.com/realm/realm-java/commit/6953f5f870f580513a9f45b8e4b91fff1e42fa9a", "message": "Cleanup", "committedDate": "2020-12-02T13:16:37Z", "type": "commit"}, {"oid": "62dc683c732ba7fe6c57b312bee58604e8ad2ec0", "url": "https://github.com/realm/realm-java/commit/62dc683c732ba7fe6c57b312bee58604e8ad2ec0", "message": "Cleanup", "committedDate": "2020-12-02T13:32:25Z", "type": "commit"}, {"oid": "535cae089b432ab62b0aa208a52df937016bc235", "url": "https://github.com/realm/realm-java/commit/535cae089b432ab62b0aa208a52df937016bc235", "message": "Abstracted class declaration for realms and dynamicrealms behind RealmMap.ClassManager", "committedDate": "2020-12-02T22:44:50Z", "type": "commit"}, {"oid": "6c8de1be4d053e75ad4c7ea2964ff228f782eaf2", "url": "https://github.com/realm/realm-java/commit/6c8de1be4d053e75ad4c7ea2964ff228f782eaf2", "message": "Merge branch 'el/dict-datatype-story' into el/dict-datatype-realmmap", "committedDate": "2020-12-03T12:07:09Z", "type": "commit"}, {"oid": "8a3e5b3caa83b19e9ee9bf4d1c1a1a5cf94a1953", "url": "https://github.com/realm/realm-java/commit/8a3e5b3caa83b19e9ee9bf4d1c1a1a5cf94a1953", "message": "Added tests for unmanaged RealmMaps", "committedDate": "2020-12-07T15:11:10Z", "type": "commit"}, {"oid": "61b200587af5d350a27db53cf8ce0009b1279839", "url": "https://github.com/realm/realm-java/commit/61b200587af5d350a27db53cf8ce0009b1279839", "message": "Merge branch 'el/dict-datatype-story' into el/dict-datatype-realmmap", "committedDate": "2020-12-08T18:24:16Z", "type": "commit"}, {"oid": "1191a44631adf4185ed0153162c8cee371269a3a", "url": "https://github.com/realm/realm-java/commit/1191a44631adf4185ed0153162c8cee371269a3a", "message": "Fixed static analysis issues", "committedDate": "2020-12-14T15:34:42Z", "type": "commit"}, {"oid": "9799e82383455b1bf37c27fb05719d7ef6d428d6", "url": "https://github.com/realm/realm-java/commit/9799e82383455b1bf37c27fb05719d7ef6d428d6", "message": "Removed index annotation temporarily for mixed type due to crash in core", "committedDate": "2020-12-14T15:39:50Z", "type": "commit"}, {"oid": "5a87a19d6758af65b5d09bdfcd1bbabc48b34d28", "url": "https://github.com/realm/realm-java/commit/5a87a19d6758af65b5d09bdfcd1bbabc48b34d28", "message": "Merge branch 'el/dict-datatype-story' into el/dict-datatype-realmmap\n\n# Conflicts:\n#\trealm/realm-library/src/main/java/io/realm/MixedType.java\n#\trealm/realm-library/src/testUtils/kotlin/io/realm/entities/MixedIndexed.kt", "committedDate": "2020-12-16T14:04:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAxNTM0Ng==", "url": "https://github.com/realm/realm-java/pull/7219#discussion_r545015346", "bodyText": "It isn't possible to have two @ignore annotations, so this needs to be collapsed with the one below", "author": "cmelchior", "createdAt": "2020-12-17T11:25:20Z", "path": "realm/realm-library/src/androidTest/java/io/realm/ManagedOrderedRealmCollectionTests.java", "diffHunk": "@@ -113,6 +113,7 @@\n  * @see UnManagedRealmCollectionTests\n  */\n \n+@Ignore(\"Tests crash due to bug in core, see https://jira.mongodb.org/browse/RCORE-435\")", "originalCommit": "5a87a19d6758af65b5d09bdfcd1bbabc48b34d28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxODg5Nw==", "url": "https://github.com/realm/realm-java/pull/7219#discussion_r545718897", "bodyText": "I think this was a merge conflict with Clemente's mixed type branch (I'm baselining this story on top of his work on mixed).", "author": "edualonso", "createdAt": "2020-12-18T09:47:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAxNTM0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAxNTU1MQ==", "url": "https://github.com/realm/realm-java/pull/7219#discussion_r545015551", "bodyText": "Same", "author": "cmelchior", "createdAt": "2020-12-17T11:25:42Z", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmTests.java", "diffHunk": "@@ -134,7 +134,7 @@\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n-\n+@Ignore(\"Tests crash due to bug in core, see https://jira.mongodb.org/browse/RCORE-435\")", "originalCommit": "5a87a19d6758af65b5d09bdfcd1bbabc48b34d28", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA3MTQ5Nw==", "url": "https://github.com/realm/realm-java/pull/7219#discussion_r545071497", "bodyText": "Maybe ManagedMapOperator ?", "author": "cmelchior", "createdAt": "2020-12-17T12:59:59Z", "path": "realm/realm-library/src/main/java/io/realm/MapOperatorFactory.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import io.realm.internal.ManageableObject;\n+import io.realm.internal.OsMap;\n+import io.realm.internal.Util;\n+\n+/**\n+ * This factory instantiates a {@link MapOperator} matching the map's key and value types.\n+ * <p>\n+ * Note: at the moment {@link RealmMap}s can only use {@code String}s as keys and primitive, Mixed,\n+ * RealmList, RealmSet and RealmMap as values\n+ * <p>\n+ * TODO even though Integers shouldn't be accepted, we are using them until Mixed type is ready\n+ */\n+public class MapOperatorFactory {\n+\n+    /**\n+     * FIXME\n+     *\n+     * @param keyClassString\n+     * @param valueClassString\n+     * @param baseRealm\n+     * @param osMap\n+     * @param <K>\n+     * @param <V>\n+     * @return\n+     */\n+    public static <K, V> MapOperator<K, V> getOperator(String keyClassString, String valueClassString, BaseRealm baseRealm, OsMap osMap) {\n+        // TODO: only String keys for now\n+        if (!keyClassString.equals(String.class.toString())) {\n+            throw new IllegalArgumentException(\"Only String keys are allowed in RealmMaps.\");\n+        } else {\n+            // TODO: add other types when ready\n+            if (valueClassString.equals(Integer.class.toString())) {\n+                return new MapOperator<>(baseRealm, keyClassString, new IntegerValueOperator(baseRealm, osMap));\n+            } else {\n+                throw new IllegalArgumentException(\"Only Integer values are allowed in RealmMaps.\");\n+            }\n+        }\n+    }\n+}\n+\n+/**\n+ * FIXME\n+ *\n+ * @param <K>\n+ * @param <V>\n+ */\n+class MapOperator<K, V> implements Map<K, V>, ManageableObject {", "originalCommit": "5a87a19d6758af65b5d09bdfcd1bbabc48b34d28", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA3MTk0OA==", "url": "https://github.com/realm/realm-java/pull/7219#discussion_r545071948", "bodyText": "Using strategies makes it much cleaner than what is currently in RealmList \ud83d\udc4f", "author": "cmelchior", "createdAt": "2020-12-17T13:00:47Z", "path": "realm/realm-library/src/main/java/io/realm/RealmMap.java", "diffHunk": "@@ -0,0 +1,521 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import io.realm.internal.Freezable;\n+import io.realm.internal.ManageableObject;\n+import io.realm.internal.OsMap;\n+\n+/**\n+ * FIXME\n+ *\n+ * @param <K>\n+ * @param <V>\n+ */\n+public class RealmMap<K, V> implements Map<K, V>, ManageableObject, Freezable<RealmMap<K, V>> {\n+\n+    private final MapStrategy<K, V> mapStrategy;\n+\n+    // ------------------------------------------\n+    // Unmanaged constructors\n+    // ------------------------------------------\n+\n+    /**\n+     * Instantiates a RealmMap in unmanaged mode.\n+     */\n+    public RealmMap() {\n+        this.mapStrategy = new UnmanagedMapStrategy<>();", "originalCommit": "5a87a19d6758af65b5d09bdfcd1bbabc48b34d28", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA3Mjc4Mw==", "url": "https://github.com/realm/realm-java/pull/7219#discussion_r545072783", "bodyText": "Generally I think we do something like:\n    /**\n     * {@inheritDoc}\n     */\n\nTo make sure that Javadoc works correctly", "author": "cmelchior", "createdAt": "2020-12-17T13:02:07Z", "path": "realm/realm-library/src/main/java/io/realm/RealmMap.java", "diffHunk": "@@ -0,0 +1,521 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import io.realm.internal.Freezable;\n+import io.realm.internal.ManageableObject;\n+import io.realm.internal.OsMap;\n+\n+/**\n+ * FIXME\n+ *\n+ * @param <K>\n+ * @param <V>\n+ */\n+public class RealmMap<K, V> implements Map<K, V>, ManageableObject, Freezable<RealmMap<K, V>> {\n+\n+    private final MapStrategy<K, V> mapStrategy;\n+\n+    // ------------------------------------------\n+    // Unmanaged constructors\n+    // ------------------------------------------\n+\n+    /**\n+     * Instantiates a RealmMap in unmanaged mode.\n+     */\n+    public RealmMap() {\n+        this.mapStrategy = new UnmanagedMapStrategy<>();\n+    }\n+\n+    /**\n+     * Instantiates a RealmMap in unmanaged mode with an initial map.\n+     *\n+     * @param map initial map.\n+     */\n+    public RealmMap(Map<K, V> map) {\n+        this();\n+        mapStrategy.putAll(map);\n+    }\n+\n+    // ------------------------------------------\n+    // Managed constructors\n+    // ------------------------------------------\n+\n+    /**\n+     * Constructor used by {@code Realm}s.\n+     *\n+     * @param baseRealm\n+     * @param osMap\n+     * @param keyClass\n+     * @param valueClass\n+     */\n+    RealmMap(BaseRealm baseRealm, OsMap osMap, Class<K> keyClass, Class<V> valueClass) {\n+        this.mapStrategy = new ManagedMapStrategy<>(baseRealm, osMap, new RealmClassManager<>(keyClass, valueClass));\n+    }\n+\n+    /**\n+     * Constructor used by {@code DynamicRealm}s.\n+     *\n+     * @param baseRealm\n+     * @param osMap\n+     * @param keyClass\n+     * @param valueClass\n+     */\n+    RealmMap(BaseRealm baseRealm, OsMap osMap, String keyClass, String valueClass) {\n+        this.mapStrategy = new ManagedMapStrategy<>(baseRealm, osMap, new DynamicRealmClassManager(keyClass, valueClass));\n+    }\n+\n+    // ------------------------------------------\n+    // ManageableObject API\n+    // ------------------------------------------\n+\n+    @Override", "originalCommit": "5a87a19d6758af65b5d09bdfcd1bbabc48b34d28", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE4MDE4Ng==", "url": "https://github.com/realm/realm-java/pull/7219#discussion_r545180186", "bodyText": "Shouldn't this also result in @Override being added to the relevant methods?", "author": "cmelchior", "createdAt": "2020-12-17T15:30:42Z", "path": "realm/realm-library/src/main/java/io/realm/OrderedRealmCollectionSnapshot.java", "diffHunk": "@@ -48,7 +49,7 @@\n  * }\n  * </pre>\n  */\n-public class OrderedRealmCollectionSnapshot<E> extends OrderedRealmCollectionImpl<E> {\n+public class OrderedRealmCollectionSnapshot<E> extends OrderedRealmCollectionImpl<E> implements Freezable<OrderedRealmCollection<E>> {", "originalCommit": "5a87a19d6758af65b5d09bdfcd1bbabc48b34d28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTczMDM2Ng==", "url": "https://github.com/realm/realm-java/pull/7219#discussion_r545730366", "bodyText": "Nope, because this class already had a freeze method. It already had @Override because it came from OrderedRealmCollectionImpl, but now it comes from Freezable.", "author": "edualonso", "createdAt": "2020-12-18T10:08:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE4MDE4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE4MDUyOQ==", "url": "https://github.com/realm/realm-java/pull/7219#discussion_r545180529", "bodyText": "Same for the @Override", "author": "cmelchior", "createdAt": "2020-12-17T15:31:12Z", "path": "realm/realm-library/src/main/java/io/realm/RealmResults.java", "diffHunk": "@@ -67,7 +68,7 @@\n  * @see RealmQuery#findAll()\n  * @see Realm#executeTransaction(Realm.Transaction)\n  */\n-public class RealmResults<E> extends OrderedRealmCollectionImpl<E> {\n+public class RealmResults<E> extends OrderedRealmCollectionImpl<E> implements Freezable<RealmResults<E>> {", "originalCommit": "5a87a19d6758af65b5d09bdfcd1bbabc48b34d28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTczMDUyOQ==", "url": "https://github.com/realm/realm-java/pull/7219#discussion_r545730529", "bodyText": "Same as above.", "author": "edualonso", "createdAt": "2020-12-18T10:08:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE4MDUyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE4MTc0OQ==", "url": "https://github.com/realm/realm-java/pull/7219#discussion_r545181749", "bodyText": "This doesn't work if Proguard is enabled, I think @clementetb added something like this to support Mixed?", "author": "cmelchior", "createdAt": "2020-12-17T15:32:42Z", "path": "realm/realm-library/src/main/java/io/realm/internal/Util.java", "diffHunk": "@@ -252,4 +252,19 @@ public static void checkContainsKey(final String key, final Map<String, ?> map,\n             throw new IllegalArgumentException(\"Key '\" + key + \"' required in '\"+ argName +\"'.\");\n         }\n     }\n+\n+    /**\n+     * Returns a {@link Class} object from a string.\n+     *\n+     * @param className the class name\n+     * @return the {@code Class} object matching the string.\n+     * @throws IllegalArgumentException if the class does not exist.\n+     */\n+    public static Class<?> getClassForName(String className) {", "originalCommit": "5a87a19d6758af65b5d09bdfcd1bbabc48b34d28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc4NjgwNg==", "url": "https://github.com/realm/realm-java/pull/7219#discussion_r545786806", "bodyText": "Yes, it should be handled within a mediator. I will add it in an upcoming PR since the proxy code isn't ready yet here.", "author": "edualonso", "createdAt": "2020-12-18T11:59:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE4MTc0OQ=="}], "type": "inlineReview"}, {"oid": "2926d52dfce9a0d26b1f9f852b4a277bd7ce777e", "url": "https://github.com/realm/realm-java/commit/2926d52dfce9a0d26b1f9f852b4a277bd7ce777e", "message": "First round of code review", "committedDate": "2020-12-18T12:16:47Z", "type": "commit"}]}