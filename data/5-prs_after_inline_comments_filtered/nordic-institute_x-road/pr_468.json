{"pr_number": 468, "pr_title": "XRDDEV-904 Initial configuration", "pr_createdAt": "2020-04-16T14:36:27Z", "pr_url": "https://github.com/nordic-institute/X-Road/pull/468", "timeline": [{"oid": "4e9b76f791248379066495cde4377afee62abd97", "url": "https://github.com/nordic-institute/X-Road/commit/4e9b76f791248379066495cde4377afee62abd97", "message": "XRDDEV-904 Initial configuration\n\n* api design", "committedDate": "2020-04-09T10:04:12Z", "type": "commit"}, {"oid": "161887faa42f0e1626a631b9b3c524300315b9ca", "url": "https://github.com/nordic-institute/X-Road/commit/161887faa42f0e1626a631b9b3c524300315b9ca", "message": "Merge branch 'develop' into XRDDEV-904-initial-configuration", "committedDate": "2020-04-09T10:05:15Z", "type": "commit"}, {"oid": "6f62d6b546bbc0a010c8b255625d0a4e5a83f700", "url": "https://github.com/nordic-institute/X-Road/commit/6f62d6b546bbc0a010c8b255625d0a4e5a83f700", "message": "XRDDEV-904 Initial configuration\n\n* api design update\n* init status endpoint", "committedDate": "2020-04-09T13:58:52Z", "type": "commit"}, {"oid": "c9de5d3e79f63588f1d3b8c7dd32e4163df70248", "url": "https://github.com/nordic-institute/X-Road/commit/c9de5d3e79f63588f1d3b8c7dd32e4163df70248", "message": "XRDDEV-904 Initial configuration / decoupling", "committedDate": "2020-04-14T08:10:06Z", "type": "commit"}, {"oid": "97c4dff7b16c7e6f8db8d1ac98d07b7141c69d3c", "url": "https://github.com/nordic-institute/X-Road/commit/97c4dff7b16c7e6f8db8d1ac98d07b7141c69d3c", "message": "XRDDEV-904 Initial configuration\n\n* API updates\n* service methods", "committedDate": "2020-04-14T13:47:19Z", "type": "commit"}, {"oid": "217145307e4fe12b8a38bc3ec5125f9246b790c5", "url": "https://github.com/nordic-institute/X-Road/commit/217145307e4fe12b8a38bc3ec5125f9246b790c5", "message": "XRDDEV-904 Initial configuration / WIP", "committedDate": "2020-04-15T06:19:03Z", "type": "commit"}, {"oid": "0a21746e016fa8ba17bd36f6eccd01e654318512", "url": "https://github.com/nordic-institute/X-Road/commit/0a21746e016fa8ba17bd36f6eccd01e654318512", "message": "XRDDEV-904 Initial configuration\n\n* remove redundant annotation that was causing trouble!", "committedDate": "2020-04-15T07:16:04Z", "type": "commit"}, {"oid": "96a6a2acb2e6c52df5e4035061db945699cd0fec", "url": "https://github.com/nordic-institute/X-Road/commit/96a6a2acb2e6c52df5e4035061db945699cd0fec", "message": "XRDDEV-904 Initial configuration / save game", "committedDate": "2020-04-15T13:03:18Z", "type": "commit"}, {"oid": "a504c4718b6a14bef593cefbe882f5c414605074", "url": "https://github.com/nordic-institute/X-Road/commit/a504c4718b6a14bef593cefbe882f5c414605074", "message": "XRDDEV-904 Initial configuration\n\n* initial implementation", "committedDate": "2020-04-15T14:22:08Z", "type": "commit"}, {"oid": "7f877e958cd6bf4a76198911ca65413079d4cbeb", "url": "https://github.com/nordic-institute/X-Road/commit/7f877e958cd6bf4a76198911ca65413079d4cbeb", "message": "XRDDEV-904 Initial configuration / WIP save game", "committedDate": "2020-04-16T08:40:29Z", "type": "commit"}, {"oid": "c27dd2968881a0ae6d136100ef3e7172f95557c9", "url": "https://github.com/nordic-institute/X-Road/commit/c27dd2968881a0ae6d136100ef3e7172f95557c9", "message": "XRDDEV-904 Initial configuration\n\n* upload anchor api", "committedDate": "2020-04-16T09:43:30Z", "type": "commit"}, {"oid": "43d30424b1a42ac1e7e0cdbbf8b45a49ad83cac7", "url": "https://github.com/nordic-institute/X-Road/commit/43d30424b1a42ac1e7e0cdbbf8b45a49ad83cac7", "message": "XRDDEV-904 Initial configuration // fix code style", "committedDate": "2020-04-16T10:23:01Z", "type": "commit"}, {"oid": "0fd4b8a41bcbb9ec6160dec05055ed0da9993bd6", "url": "https://github.com/nordic-institute/X-Road/commit/0fd4b8a41bcbb9ec6160dec05055ed0da9993bd6", "message": "Merge branch 'develop' into XRDDEV-904-initial-configuration", "committedDate": "2020-04-16T10:24:02Z", "type": "commit"}, {"oid": "0f6b1a57f8b14764c6c9c658f22657dec9556755", "url": "https://github.com/nordic-institute/X-Road/commit/0f6b1a57f8b14764c6c9c658f22657dec9556755", "message": "XRDDEV-904 Initial configuration // tests", "committedDate": "2020-04-16T13:02:17Z", "type": "commit"}, {"oid": "a1fe4d67eb89ca30d4995c53934469129a8d7bc6", "url": "https://github.com/nordic-institute/X-Road/commit/a1fe4d67eb89ca30d4995c53934469129a8d7bc6", "message": "XRDDEV-904 Initial configuration // more tests and cleanup", "committedDate": "2020-04-16T14:04:40Z", "type": "commit"}, {"oid": "5168c0c0dc12dc02c2189587669adc380a7b6d69", "url": "https://github.com/nordic-institute/X-Road/commit/5168c0c0dc12dc02c2189587669adc380a7b6d69", "message": "XRDDEV-904 Initial configuration // more cleanup", "committedDate": "2020-04-16T14:29:51Z", "type": "commit"}, {"oid": "26fb68c4917ba1e95be433d24353143c1a4f87c2", "url": "https://github.com/nordic-institute/X-Road/commit/26fb68c4917ba1e95be433d24353143c1a4f87c2", "message": "XRDDEV-904 Initial configuration // param validation", "committedDate": "2020-04-17T07:11:51Z", "type": "commit"}, {"oid": "70fd09451e52d3d36eebae69039d2727d5ec9968", "url": "https://github.com/nordic-institute/X-Road/commit/70fd09451e52d3d36eebae69039d2727d5ec9968", "message": "XRDDEV-904 Initial configuration // update query param name", "committedDate": "2020-04-20T11:55:26Z", "type": "commit"}, {"oid": "f083cdabbaaeaa83b812e0357f85020344e12104", "url": "https://github.com/nordic-institute/X-Road/commit/f083cdabbaaeaa83b812e0357f85020344e12104", "message": "Merge branch 'develop' into XRDDEV-904-initial-configuration", "committedDate": "2020-05-04T06:36:13Z", "type": "commit"}, {"oid": "dda6994499a830df4da99e64feabdd7afff679e8", "url": "https://github.com/nordic-institute/X-Road/commit/dda6994499a830df4da99e64feabdd7afff679e8", "message": "Merge branch 'develop' into XRDDEV-904-initial-configuration", "committedDate": "2020-05-06T09:36:42Z", "type": "commit"}, {"oid": "32c2419007b445d7f7582140934c675dca9ab2db", "url": "https://github.com/nordic-institute/X-Road/commit/32c2419007b445d7f7582140934c675dca9ab2db", "message": "Merge branch 'develop' into XRDDEV-904-initial-configuration", "committedDate": "2020-05-11T11:24:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk2NTMzNQ==", "url": "https://github.com/nordic-institute/X-Road/pull/468#discussion_r422965335", "bodyText": "Requirements about partial init are currently unclear: https://app.slack.com/client/T80PN5RE2/GGBHVCYSY/thread/GGBHVCYSY-1586845272.007700", "author": "jansu76", "createdAt": "2020-05-11T11:12:33Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/InitializationService.java", "diffHunk": "@@ -0,0 +1,315 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.SystemProperties;\n+import ee.ria.xroad.common.conf.serverconf.IsAuthentication;\n+import ee.ria.xroad.common.conf.serverconf.model.ClientType;\n+import ee.ria.xroad.common.conf.serverconf.model.ServerConfType;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.SecurityServerId;\n+import ee.ria.xroad.common.util.TokenPinPolicy;\n+\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.dto.InitializationStatusDto;\n+import org.niis.xroad.restapi.exceptions.ErrorDeviation;\n+import org.niis.xroad.restapi.exceptions.WarningDeviation;\n+import org.niis.xroad.restapi.facade.GlobalConfFacade;\n+import org.niis.xroad.restapi.facade.SignerProxyFacade;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * service for initializing the security server\n+ */\n+@Slf4j\n+@Service\n+@Transactional\n+@PreAuthorize(\"isAuthenticated()\")\n+public class InitializationService {\n+    public static final String WARNING_INIT_UNREGISTERED_MEMBER = \"init_unregistered_member\";\n+    public static final String WARNING_INIT_SERVER_ID_EXISTS = \"init_server_id_exists\";\n+    public static final String METADATA_SERVERCONF_EXISTS = \"init_serverconf_exists\";\n+    public static final String METADATA_SOFTWARE_TOKEN_INITIALIZED = \"init_software_token_initialized\";\n+    public static final String METADATA_PIN_MIN_LENGTH = \"pin_min_length\";\n+    public static final String METADATA_PIN_MIN_CHAR_CLASSES = \"pin_min_char_classes_count\";\n+\n+    private final SystemService systemService;\n+    private final ServerConfService serverConfService;\n+    private final TokenService tokenService;\n+    private final GlobalConfFacade globalConfFacade;\n+    private final ClientService clientService;\n+    private final SignerProxyFacade signerProxyFacade;\n+\n+    @Setter\n+    private boolean isTokenPinEnforced = SystemProperties.shouldEnforceTokenPinPolicy();\n+\n+    @Autowired\n+    public InitializationService(SystemService systemService, ServerConfService serverConfService,\n+            TokenService tokenService, GlobalConfFacade globalConfFacade, ClientService clientService,\n+            SignerProxyFacade signerProxyFacade) {\n+        this.systemService = systemService;\n+        this.serverConfService = serverConfService;\n+        this.tokenService = tokenService;\n+        this.globalConfFacade = globalConfFacade;\n+        this.clientService = clientService;\n+        this.signerProxyFacade = signerProxyFacade;\n+    }\n+\n+    /**\n+     * Check the whole init status of the Security Server. The init status consists of the following:\n+     * 1. is anchor imported - whether or not a configuration anchor has been imported\n+     * 2. is server conf initialized - whether or not a server conf exists\n+     * 3. is software token initialized - whether or not a software token exists AND\n+     * it's status != TokenStatusInfo.NOT_INITIALIZED\n+     * @return\n+     */\n+    public InitializationStatusDto isSecurityServerInitialized() {\n+        boolean isAnchorImported = systemService.isAnchorImported();\n+        boolean isServerConfInitialized = serverConfService.isServerConfInitialized();\n+        boolean isSoftwareTokenInitialized = tokenService.isSoftwareTokenInitialized();\n+        InitializationStatusDto initializationStatusDto = new InitializationStatusDto();\n+        initializationStatusDto.setAnchorImported(isAnchorImported);\n+        initializationStatusDto.setServerConfInitialized(isServerConfInitialized && isSoftwareTokenInitialized);\n+        return initializationStatusDto;\n+    }\n+\n+    /**\n+     * Initialize a new Security Server with the provided parameters. The method will throw an exception if the\n+     * server has already been initialized. The method does support partial initialization (e.g. server conf has\n+     * been created but software token has not) BUT taking that into use will require changing\n+     * {@link #verifyInitializationPrerequisites()} to throw UnhandledWarningsException with warning metadata\n+     * instead of InitializationException.\n+     * @param securityServerCode server code for the new Security Server\n+     * @param ownerMemberClass member class of the new owner member\n+     * @param ownerMemberCode member code of the new owner member\n+     * @param softwareTokenPin pin code for the initial software token (softToken-0)\n+     * @param ignoreWarnings\n+     * @throws AnchorNotFoundException if an anchor has not been imported\n+     * @throws InitializationException if prerequisite check fails: if a server conf already exists OR if a\n+     * software token has already been initialized\n+     * @throws UnhandledWarningsException\n+     * @throws WeakPinException if the pin does not meet the length and complexity requirements (if token pin policy is\n+     * enforced by properties)\n+     * @throws InvalidPinException if the provided pin code does not follow the TokenPinPolicy (if token pin policy is\n+     * enforced by properties)\n+     * @throws SoftwareTokenInitException if something goes wrong with the token init\n+     */\n+    public void initialize(String securityServerCode, String ownerMemberClass, String ownerMemberCode,\n+            String softwareTokenPin, boolean ignoreWarnings) throws AnchorNotFoundException, InitializationException,\n+            UnhandledWarningsException, WeakPinException, InvalidPinException, SoftwareTokenInitException {\n+        if (!systemService.isAnchorImported()) {\n+            throw new AnchorNotFoundException(\"Configuration anchor was not found.\");\n+        }\n+        verifyInitializationPrerequisites();\n+        String instanceIdentifier = globalConfFacade.getInstanceIdentifier();\n+        // get id from db if exists - this is for partial init support since no client ids should yet exist\n+        ClientId ownerClientId = clientService.getPossiblyManagedEntity(ClientId.create(instanceIdentifier,\n+                ownerMemberClass, ownerMemberCode));\n+        if (!ignoreWarnings) {\n+            checkForWarnings(ownerClientId, securityServerCode);\n+        }\n+        // --- Start the init ---\n+        ServerConfType serverConf = createInitialServerConf(ownerClientId, securityServerCode);\n+        initializeSoftwareToken(softwareTokenPin);\n+        serverConfService.saveOrUpdate(serverConf);\n+    }\n+\n+    /**\n+     * Helper to create a software token\n+     * @param softwareTokenPin the pin of the token\n+     * @throws InvalidPinException\n+     * @throws WeakPinException\n+     * @throws SoftwareTokenInitException\n+     */\n+    private void initializeSoftwareToken(String softwareTokenPin) throws InvalidPinException, WeakPinException,\n+            SoftwareTokenInitException {\n+        char[] pin = softwareTokenPin.toCharArray();\n+        if (isTokenPinEnforced) {\n+            TokenPinPolicy.Description description = TokenPinPolicy.describe(pin);\n+            if (!description.isValid()) {\n+                if (description.hasInvalidCharacters()) {\n+                    throw new InvalidPinException(\"The provided pin code does not match with the pin code policy\");\n+                }\n+                List<String> metadata = new ArrayList<>();\n+                metadata.add(METADATA_PIN_MIN_LENGTH);\n+                metadata.add(String.valueOf(TokenPinPolicy.MIN_PASSWORD_LENGTH));\n+                metadata.add(METADATA_PIN_MIN_CHAR_CLASSES);\n+                metadata.add(String.valueOf(TokenPinPolicy.MIN_CHARACTER_CLASS_COUNT));\n+                throw new WeakPinException(\"The provided pin code was too weak\", metadata);\n+            }\n+        }\n+        try {\n+            signerProxyFacade.initSoftwareToken(pin);\n+        } catch (Exception e) {\n+            // not good\n+            throw new SoftwareTokenInitException(\"Error initializing software token\", e);\n+        }\n+    }\n+\n+    /**\n+     * Helper to create the initial server conf\n+     * @param ownerClientId\n+     * @param securityServerCode\n+     * @return ServerConfType\n+     */\n+    private ServerConfType createInitialServerConf(ClientId ownerClientId, String securityServerCode) {\n+        /* get serverconf from db if exists\n+           - this is for partial init support since no server confs should yet exist\n+         */\n+        ServerConfType serverConf = serverConfService.getOrCreateServerConf();\n+        ClientType ownerClient = null;\n+        // get client from db if exists - this is for partial init support since no clients should yet exist\n+        Optional<ClientType> foundClient = serverConf.getClient().stream()\n+                .filter(clientType -> clientType.getIdentifier().equals(ownerClientId))\n+                .findFirst();\n+        ownerClient = foundClient.orElse(getInitialClient(ownerClientId));\n+        ownerClient.setConf(serverConf);\n+        // again for partial init support: if the client already exists there is no reason to add it again\n+        if (!serverConf.getClient().contains(ownerClient)) {\n+            serverConf.getClient().add(ownerClient);\n+        }\n+        serverConf.setOwner(ownerClient);\n+        serverConf.setServerCode(securityServerCode);\n+        return serverConf;\n+    }\n+\n+    /**\n+     * Helper to check for warnings\n+     * @param ownerClientId\n+     * @param securityServerCode\n+     * @throws UnhandledWarningsException\n+     */\n+    private void checkForWarnings(ClientId ownerClientId, String securityServerCode)\n+            throws UnhandledWarningsException {\n+        String ownerMemberName = globalConfFacade.getMemberName(ownerClientId);\n+        SecurityServerId serverId = SecurityServerId.create(ownerClientId, securityServerCode);\n+        List<WarningDeviation> warnings = new ArrayList<>();\n+        if (StringUtils.isEmpty(ownerMemberName)) {\n+            WarningDeviation memberWarning = new WarningDeviation(WARNING_INIT_UNREGISTERED_MEMBER,\n+                    ownerClientId.toShortString());\n+            warnings.add(memberWarning);\n+        }\n+        if (globalConfFacade.existsSecurityServer(serverId)) {\n+            WarningDeviation memberWarning = new WarningDeviation(WARNING_INIT_SERVER_ID_EXISTS,\n+                    serverId.toShortString());\n+            warnings.add(memberWarning);\n+        }\n+        if (!warnings.isEmpty()) {\n+            throw new UnhandledWarningsException(warnings);\n+        }\n+    }\n+\n+    /**\n+     * Helper to create an initial client\n+     * @param clientId\n+     * @return\n+     */\n+    private ClientType getInitialClient(ClientId clientId) {\n+        ClientType localClient = clientService.getLocalClient(clientId);\n+        if (localClient == null) {\n+            localClient = new ClientType();\n+            localClient.setIdentifier(clientId);\n+            localClient.setClientStatus(ClientType.STATUS_SAVED);\n+            localClient.setIsAuthentication(IsAuthentication.SSLAUTH.name());\n+        }\n+        return localClient;\n+    }\n+\n+    /**\n+     * Verify that the initialization process can proceed and that the security server has not already been\n+     * initialized. This means verifying that an anchor has been imported,\n+     * server conf does not exist and a software token has not yet been initialized. This method could also be\n+     * changed into throwing an UnhandledWarningsException with warning metadata instead of the current\n+     * InitializationException if partial init needs to be supported in the future\n+     * @throws InitializationException if server conf exists OR software token is already initialized\n+     */\n+    private void verifyInitializationPrerequisites() throws InitializationException {\n+        boolean isServerConfInitialized = serverConfService.isServerConfInitialized();", "originalCommit": "dda6994499a830df4da99e64feabdd7afff679e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ3NzE4Nw==", "url": "https://github.com/nordic-institute/X-Road/pull/468#discussion_r423477187", "bodyText": "Based on the discussion, it seems that partial init should be implemented", "author": "jansu76", "createdAt": "2020-05-12T05:52:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk2NTMzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM1NDcwMw==", "url": "https://github.com/nordic-institute/X-Road/pull/468#discussion_r424354703", "bodyText": "Partial init has been implemented.\nPrimary changes:\nThe init endpoint itself does not have any mandatory parameters anymore because the user must be able to initialize for example only the software token (while skipping other init parts such as server code and server owner). However the parameters are required for each missing part of the initialization. For example: if server owner has not been initialized, the server owner parameters are mandatory in the request, otherwise a MissingInitParamsException is thrown.\nAlso prerequisite check now throws warnings (depending on ignore_warnings flag) if the Security Server already has some initialized parts.", "author": "carohauta", "createdAt": "2020-05-13T11:07:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk2NTMzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk2OTA2Mg==", "url": "https://github.com/nordic-institute/X-Road/pull/468#discussion_r422969062", "bodyText": "nitpick: isSecurityServerInitialized typically returns boolean. E.g. getSecurityServerInitializationStatus might be more idiomatic naming", "author": "jansu76", "createdAt": "2020-05-11T11:20:16Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/InitializationService.java", "diffHunk": "@@ -0,0 +1,315 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.SystemProperties;\n+import ee.ria.xroad.common.conf.serverconf.IsAuthentication;\n+import ee.ria.xroad.common.conf.serverconf.model.ClientType;\n+import ee.ria.xroad.common.conf.serverconf.model.ServerConfType;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.SecurityServerId;\n+import ee.ria.xroad.common.util.TokenPinPolicy;\n+\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.dto.InitializationStatusDto;\n+import org.niis.xroad.restapi.exceptions.ErrorDeviation;\n+import org.niis.xroad.restapi.exceptions.WarningDeviation;\n+import org.niis.xroad.restapi.facade.GlobalConfFacade;\n+import org.niis.xroad.restapi.facade.SignerProxyFacade;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * service for initializing the security server\n+ */\n+@Slf4j\n+@Service\n+@Transactional\n+@PreAuthorize(\"isAuthenticated()\")\n+public class InitializationService {\n+    public static final String WARNING_INIT_UNREGISTERED_MEMBER = \"init_unregistered_member\";\n+    public static final String WARNING_INIT_SERVER_ID_EXISTS = \"init_server_id_exists\";\n+    public static final String METADATA_SERVERCONF_EXISTS = \"init_serverconf_exists\";\n+    public static final String METADATA_SOFTWARE_TOKEN_INITIALIZED = \"init_software_token_initialized\";\n+    public static final String METADATA_PIN_MIN_LENGTH = \"pin_min_length\";\n+    public static final String METADATA_PIN_MIN_CHAR_CLASSES = \"pin_min_char_classes_count\";\n+\n+    private final SystemService systemService;\n+    private final ServerConfService serverConfService;\n+    private final TokenService tokenService;\n+    private final GlobalConfFacade globalConfFacade;\n+    private final ClientService clientService;\n+    private final SignerProxyFacade signerProxyFacade;\n+\n+    @Setter\n+    private boolean isTokenPinEnforced = SystemProperties.shouldEnforceTokenPinPolicy();\n+\n+    @Autowired\n+    public InitializationService(SystemService systemService, ServerConfService serverConfService,\n+            TokenService tokenService, GlobalConfFacade globalConfFacade, ClientService clientService,\n+            SignerProxyFacade signerProxyFacade) {\n+        this.systemService = systemService;\n+        this.serverConfService = serverConfService;\n+        this.tokenService = tokenService;\n+        this.globalConfFacade = globalConfFacade;\n+        this.clientService = clientService;\n+        this.signerProxyFacade = signerProxyFacade;\n+    }\n+\n+    /**\n+     * Check the whole init status of the Security Server. The init status consists of the following:\n+     * 1. is anchor imported - whether or not a configuration anchor has been imported\n+     * 2. is server conf initialized - whether or not a server conf exists\n+     * 3. is software token initialized - whether or not a software token exists AND\n+     * it's status != TokenStatusInfo.NOT_INITIALIZED\n+     * @return\n+     */\n+    public InitializationStatusDto isSecurityServerInitialized() {", "originalCommit": "dda6994499a830df4da99e64feabdd7afff679e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM1NTYwOA==", "url": "https://github.com/nordic-institute/X-Road/pull/468#discussion_r424355608", "bodyText": "Fixed. Originally this returned one boolean. In the current and newest implementation this returns four different booleans in the form of a dto.", "author": "carohauta", "createdAt": "2020-05-13T11:09:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk2OTA2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3ODI5OQ==", "url": "https://github.com/nordic-institute/X-Road/pull/468#discussion_r422978299", "bodyText": "If we intend to ignore specifically X_MALFORMED_SERVERCONF, it would be even better to check against the faultCode, and rethrow others. Otherwise there's a possibility for hiding errors, if other types of CodedExceptions happen (which is unlikely, but not impossible, could be a result of some unrelated future change in ServerConfDAOImpl).", "author": "jansu76", "createdAt": "2020-05-11T11:38:38Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServerConfService.java", "diffHunk": "@@ -91,4 +108,30 @@ public ClientId getSecurityServerOwnerId() {\n         Hibernate.initialize(tsp);\n         return tsp;\n     }\n+\n+    /**\n+     * Is server conf initialized -> it is if whe can find one\n+     * @return\n+     */\n+    public boolean isServerConfInitialized() {\n+        boolean isServerConfInitialized = false;\n+        try {\n+            ServerConfType serverConfType = getServerConf();\n+            if (serverConfType != null) {\n+                isServerConfInitialized = true;\n+            }\n+        } catch (CodedException ce) { // -> this is X_MALFORMED_SERVERCONF, \"Server conf is not initialized!\"\n+            log.info(\"ServerConfService#isServerConfInitialized: CodedException thrown when getting Server Conf\", ce);", "originalCommit": "32c2419007b445d7f7582140934c675dca9ab2db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM1OTk3OA==", "url": "https://github.com/nordic-institute/X-Road/pull/468#discussion_r424359978", "bodyText": "Fixed. The faultCode is now checked and if it is something else than X_MALFORMED_SERVERCONF -> rethrow the CodedException.", "author": "carohauta", "createdAt": "2020-05-13T11:18:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3ODI5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MDk3Nw==", "url": "https://github.com/nordic-institute/X-Road/pull/468#discussion_r422980977", "bodyText": "Why is dto's isServerConfInitialized a combination of isServerConfInitialized and isSoftwareTokenInitialized? It feels a bit weird. Should dto.isServerConfInitialized maybe be renamed, or should dto contain both isServerConfInitialized and isSoftwareTokenInitialized separately? Maybe also not in sync with javadoc, which describes init status as consisting of 3 parts.", "author": "jansu76", "createdAt": "2020-05-11T11:43:59Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/InitializationService.java", "diffHunk": "@@ -0,0 +1,315 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.SystemProperties;\n+import ee.ria.xroad.common.conf.serverconf.IsAuthentication;\n+import ee.ria.xroad.common.conf.serverconf.model.ClientType;\n+import ee.ria.xroad.common.conf.serverconf.model.ServerConfType;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.SecurityServerId;\n+import ee.ria.xroad.common.util.TokenPinPolicy;\n+\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.dto.InitializationStatusDto;\n+import org.niis.xroad.restapi.exceptions.ErrorDeviation;\n+import org.niis.xroad.restapi.exceptions.WarningDeviation;\n+import org.niis.xroad.restapi.facade.GlobalConfFacade;\n+import org.niis.xroad.restapi.facade.SignerProxyFacade;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * service for initializing the security server\n+ */\n+@Slf4j\n+@Service\n+@Transactional\n+@PreAuthorize(\"isAuthenticated()\")\n+public class InitializationService {\n+    public static final String WARNING_INIT_UNREGISTERED_MEMBER = \"init_unregistered_member\";\n+    public static final String WARNING_INIT_SERVER_ID_EXISTS = \"init_server_id_exists\";\n+    public static final String METADATA_SERVERCONF_EXISTS = \"init_serverconf_exists\";\n+    public static final String METADATA_SOFTWARE_TOKEN_INITIALIZED = \"init_software_token_initialized\";\n+    public static final String METADATA_PIN_MIN_LENGTH = \"pin_min_length\";\n+    public static final String METADATA_PIN_MIN_CHAR_CLASSES = \"pin_min_char_classes_count\";\n+\n+    private final SystemService systemService;\n+    private final ServerConfService serverConfService;\n+    private final TokenService tokenService;\n+    private final GlobalConfFacade globalConfFacade;\n+    private final ClientService clientService;\n+    private final SignerProxyFacade signerProxyFacade;\n+\n+    @Setter\n+    private boolean isTokenPinEnforced = SystemProperties.shouldEnforceTokenPinPolicy();\n+\n+    @Autowired\n+    public InitializationService(SystemService systemService, ServerConfService serverConfService,\n+            TokenService tokenService, GlobalConfFacade globalConfFacade, ClientService clientService,\n+            SignerProxyFacade signerProxyFacade) {\n+        this.systemService = systemService;\n+        this.serverConfService = serverConfService;\n+        this.tokenService = tokenService;\n+        this.globalConfFacade = globalConfFacade;\n+        this.clientService = clientService;\n+        this.signerProxyFacade = signerProxyFacade;\n+    }\n+\n+    /**\n+     * Check the whole init status of the Security Server. The init status consists of the following:\n+     * 1. is anchor imported - whether or not a configuration anchor has been imported\n+     * 2. is server conf initialized - whether or not a server conf exists\n+     * 3. is software token initialized - whether or not a software token exists AND\n+     * it's status != TokenStatusInfo.NOT_INITIALIZED\n+     * @return\n+     */\n+    public InitializationStatusDto isSecurityServerInitialized() {\n+        boolean isAnchorImported = systemService.isAnchorImported();\n+        boolean isServerConfInitialized = serverConfService.isServerConfInitialized();\n+        boolean isSoftwareTokenInitialized = tokenService.isSoftwareTokenInitialized();\n+        InitializationStatusDto initializationStatusDto = new InitializationStatusDto();\n+        initializationStatusDto.setAnchorImported(isAnchorImported);\n+        initializationStatusDto.setServerConfInitialized(isServerConfInitialized && isSoftwareTokenInitialized);", "originalCommit": "32c2419007b445d7f7582140934c675dca9ab2db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM2MjY4MQ==", "url": "https://github.com/nordic-institute/X-Road/pull/468#discussion_r424362681", "bodyText": "This was due to the partial init not being supported. Now that it is supported we also return each individual boolean in the dto.", "author": "carohauta", "createdAt": "2020-05-13T11:24:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MDk3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MTI4MA==", "url": "https://github.com/nordic-institute/X-Road/pull/468#discussion_r422981280", "bodyText": "Pro level javadocs here and elsewhere, too \ud83d\udc4d", "author": "jansu76", "createdAt": "2020-05-11T11:44:42Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/InitializationService.java", "diffHunk": "@@ -0,0 +1,315 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.SystemProperties;\n+import ee.ria.xroad.common.conf.serverconf.IsAuthentication;\n+import ee.ria.xroad.common.conf.serverconf.model.ClientType;\n+import ee.ria.xroad.common.conf.serverconf.model.ServerConfType;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.SecurityServerId;\n+import ee.ria.xroad.common.util.TokenPinPolicy;\n+\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.dto.InitializationStatusDto;\n+import org.niis.xroad.restapi.exceptions.ErrorDeviation;\n+import org.niis.xroad.restapi.exceptions.WarningDeviation;\n+import org.niis.xroad.restapi.facade.GlobalConfFacade;\n+import org.niis.xroad.restapi.facade.SignerProxyFacade;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * service for initializing the security server\n+ */\n+@Slf4j\n+@Service\n+@Transactional\n+@PreAuthorize(\"isAuthenticated()\")\n+public class InitializationService {\n+    public static final String WARNING_INIT_UNREGISTERED_MEMBER = \"init_unregistered_member\";\n+    public static final String WARNING_INIT_SERVER_ID_EXISTS = \"init_server_id_exists\";\n+    public static final String METADATA_SERVERCONF_EXISTS = \"init_serverconf_exists\";\n+    public static final String METADATA_SOFTWARE_TOKEN_INITIALIZED = \"init_software_token_initialized\";\n+    public static final String METADATA_PIN_MIN_LENGTH = \"pin_min_length\";\n+    public static final String METADATA_PIN_MIN_CHAR_CLASSES = \"pin_min_char_classes_count\";\n+\n+    private final SystemService systemService;\n+    private final ServerConfService serverConfService;\n+    private final TokenService tokenService;\n+    private final GlobalConfFacade globalConfFacade;\n+    private final ClientService clientService;\n+    private final SignerProxyFacade signerProxyFacade;\n+\n+    @Setter\n+    private boolean isTokenPinEnforced = SystemProperties.shouldEnforceTokenPinPolicy();\n+\n+    @Autowired\n+    public InitializationService(SystemService systemService, ServerConfService serverConfService,\n+            TokenService tokenService, GlobalConfFacade globalConfFacade, ClientService clientService,\n+            SignerProxyFacade signerProxyFacade) {\n+        this.systemService = systemService;\n+        this.serverConfService = serverConfService;\n+        this.tokenService = tokenService;\n+        this.globalConfFacade = globalConfFacade;\n+        this.clientService = clientService;\n+        this.signerProxyFacade = signerProxyFacade;\n+    }\n+\n+    /**\n+     * Check the whole init status of the Security Server. The init status consists of the following:\n+     * 1. is anchor imported - whether or not a configuration anchor has been imported\n+     * 2. is server conf initialized - whether or not a server conf exists\n+     * 3. is software token initialized - whether or not a software token exists AND\n+     * it's status != TokenStatusInfo.NOT_INITIALIZED\n+     * @return\n+     */\n+    public InitializationStatusDto isSecurityServerInitialized() {\n+        boolean isAnchorImported = systemService.isAnchorImported();\n+        boolean isServerConfInitialized = serverConfService.isServerConfInitialized();\n+        boolean isSoftwareTokenInitialized = tokenService.isSoftwareTokenInitialized();\n+        InitializationStatusDto initializationStatusDto = new InitializationStatusDto();\n+        initializationStatusDto.setAnchorImported(isAnchorImported);\n+        initializationStatusDto.setServerConfInitialized(isServerConfInitialized && isSoftwareTokenInitialized);\n+        return initializationStatusDto;\n+    }\n+\n+    /**\n+     * Initialize a new Security Server with the provided parameters. The method will throw an exception if the", "originalCommit": "32c2419007b445d7f7582140934c675dca9ab2db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5NTk1MA==", "url": "https://github.com/nordic-institute/X-Road/pull/468#discussion_r422995950", "bodyText": "Had some trouble understanding WeakPinException and InvalidPinException initially. Reading the exception names and javadocs made me think \"Isn't a weak pin also an invalid PIN? And what is InvalidPinException about, if not length and complexity requirements\".\nI guess the idea is that frontend will be able to show proper error messages based on classification to error types invalid_pin and weak_pin? And that there will likely be two different error messages?\nThe difference between invalid_pin and weak_pin does not seem too obvious. Could also do some renaming and updating of javadocs to make it more clear? To me it looks like bad characters in PIN is invalid_pin and too few characters or too few character classes is weak_pin. But it took a few rereads to understand that.\nThere's also the possibility of using one single exception class InvalidPinException and using the same metadata-based way of specifying how exactly was it invalid as is already used for weak / METADATA_PIN_MIN_LENGTH and weak / METADATA_PIN_MIN_CHAR_CLASSES. I am not sure if it would be better or worse.", "author": "jansu76", "createdAt": "2020-05-11T12:14:41Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/InitializationService.java", "diffHunk": "@@ -0,0 +1,315 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.SystemProperties;\n+import ee.ria.xroad.common.conf.serverconf.IsAuthentication;\n+import ee.ria.xroad.common.conf.serverconf.model.ClientType;\n+import ee.ria.xroad.common.conf.serverconf.model.ServerConfType;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.SecurityServerId;\n+import ee.ria.xroad.common.util.TokenPinPolicy;\n+\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.dto.InitializationStatusDto;\n+import org.niis.xroad.restapi.exceptions.ErrorDeviation;\n+import org.niis.xroad.restapi.exceptions.WarningDeviation;\n+import org.niis.xroad.restapi.facade.GlobalConfFacade;\n+import org.niis.xroad.restapi.facade.SignerProxyFacade;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * service for initializing the security server\n+ */\n+@Slf4j\n+@Service\n+@Transactional\n+@PreAuthorize(\"isAuthenticated()\")\n+public class InitializationService {\n+    public static final String WARNING_INIT_UNREGISTERED_MEMBER = \"init_unregistered_member\";\n+    public static final String WARNING_INIT_SERVER_ID_EXISTS = \"init_server_id_exists\";\n+    public static final String METADATA_SERVERCONF_EXISTS = \"init_serverconf_exists\";\n+    public static final String METADATA_SOFTWARE_TOKEN_INITIALIZED = \"init_software_token_initialized\";\n+    public static final String METADATA_PIN_MIN_LENGTH = \"pin_min_length\";\n+    public static final String METADATA_PIN_MIN_CHAR_CLASSES = \"pin_min_char_classes_count\";\n+\n+    private final SystemService systemService;\n+    private final ServerConfService serverConfService;\n+    private final TokenService tokenService;\n+    private final GlobalConfFacade globalConfFacade;\n+    private final ClientService clientService;\n+    private final SignerProxyFacade signerProxyFacade;\n+\n+    @Setter\n+    private boolean isTokenPinEnforced = SystemProperties.shouldEnforceTokenPinPolicy();\n+\n+    @Autowired\n+    public InitializationService(SystemService systemService, ServerConfService serverConfService,\n+            TokenService tokenService, GlobalConfFacade globalConfFacade, ClientService clientService,\n+            SignerProxyFacade signerProxyFacade) {\n+        this.systemService = systemService;\n+        this.serverConfService = serverConfService;\n+        this.tokenService = tokenService;\n+        this.globalConfFacade = globalConfFacade;\n+        this.clientService = clientService;\n+        this.signerProxyFacade = signerProxyFacade;\n+    }\n+\n+    /**\n+     * Check the whole init status of the Security Server. The init status consists of the following:\n+     * 1. is anchor imported - whether or not a configuration anchor has been imported\n+     * 2. is server conf initialized - whether or not a server conf exists\n+     * 3. is software token initialized - whether or not a software token exists AND\n+     * it's status != TokenStatusInfo.NOT_INITIALIZED\n+     * @return\n+     */\n+    public InitializationStatusDto isSecurityServerInitialized() {\n+        boolean isAnchorImported = systemService.isAnchorImported();\n+        boolean isServerConfInitialized = serverConfService.isServerConfInitialized();\n+        boolean isSoftwareTokenInitialized = tokenService.isSoftwareTokenInitialized();\n+        InitializationStatusDto initializationStatusDto = new InitializationStatusDto();\n+        initializationStatusDto.setAnchorImported(isAnchorImported);\n+        initializationStatusDto.setServerConfInitialized(isServerConfInitialized && isSoftwareTokenInitialized);\n+        return initializationStatusDto;\n+    }\n+\n+    /**\n+     * Initialize a new Security Server with the provided parameters. The method will throw an exception if the\n+     * server has already been initialized. The method does support partial initialization (e.g. server conf has\n+     * been created but software token has not) BUT taking that into use will require changing\n+     * {@link #verifyInitializationPrerequisites()} to throw UnhandledWarningsException with warning metadata\n+     * instead of InitializationException.\n+     * @param securityServerCode server code for the new Security Server\n+     * @param ownerMemberClass member class of the new owner member\n+     * @param ownerMemberCode member code of the new owner member\n+     * @param softwareTokenPin pin code for the initial software token (softToken-0)\n+     * @param ignoreWarnings\n+     * @throws AnchorNotFoundException if an anchor has not been imported\n+     * @throws InitializationException if prerequisite check fails: if a server conf already exists OR if a\n+     * software token has already been initialized\n+     * @throws UnhandledWarningsException\n+     * @throws WeakPinException if the pin does not meet the length and complexity requirements (if token pin policy is", "originalCommit": "32c2419007b445d7f7582140934c675dca9ab2db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM2NDY4MQ==", "url": "https://github.com/nordic-institute/X-Road/pull/468#discussion_r424364681", "bodyText": "I just renamed the InvalidPinException to InvalidCharactersException and added javadocs for further explanation", "author": "carohauta", "createdAt": "2020-05-13T11:28:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5NTk1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5NzM2NA==", "url": "https://github.com/nordic-institute/X-Road/pull/468#discussion_r422997364", "bodyText": "This method does not verify that anchor has been imported, but javadoc days it does?", "author": "jansu76", "createdAt": "2020-05-11T12:17:18Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/InitializationService.java", "diffHunk": "@@ -0,0 +1,315 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.SystemProperties;\n+import ee.ria.xroad.common.conf.serverconf.IsAuthentication;\n+import ee.ria.xroad.common.conf.serverconf.model.ClientType;\n+import ee.ria.xroad.common.conf.serverconf.model.ServerConfType;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.SecurityServerId;\n+import ee.ria.xroad.common.util.TokenPinPolicy;\n+\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.dto.InitializationStatusDto;\n+import org.niis.xroad.restapi.exceptions.ErrorDeviation;\n+import org.niis.xroad.restapi.exceptions.WarningDeviation;\n+import org.niis.xroad.restapi.facade.GlobalConfFacade;\n+import org.niis.xroad.restapi.facade.SignerProxyFacade;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * service for initializing the security server\n+ */\n+@Slf4j\n+@Service\n+@Transactional\n+@PreAuthorize(\"isAuthenticated()\")\n+public class InitializationService {\n+    public static final String WARNING_INIT_UNREGISTERED_MEMBER = \"init_unregistered_member\";\n+    public static final String WARNING_INIT_SERVER_ID_EXISTS = \"init_server_id_exists\";\n+    public static final String METADATA_SERVERCONF_EXISTS = \"init_serverconf_exists\";\n+    public static final String METADATA_SOFTWARE_TOKEN_INITIALIZED = \"init_software_token_initialized\";\n+    public static final String METADATA_PIN_MIN_LENGTH = \"pin_min_length\";\n+    public static final String METADATA_PIN_MIN_CHAR_CLASSES = \"pin_min_char_classes_count\";\n+\n+    private final SystemService systemService;\n+    private final ServerConfService serverConfService;\n+    private final TokenService tokenService;\n+    private final GlobalConfFacade globalConfFacade;\n+    private final ClientService clientService;\n+    private final SignerProxyFacade signerProxyFacade;\n+\n+    @Setter\n+    private boolean isTokenPinEnforced = SystemProperties.shouldEnforceTokenPinPolicy();\n+\n+    @Autowired\n+    public InitializationService(SystemService systemService, ServerConfService serverConfService,\n+            TokenService tokenService, GlobalConfFacade globalConfFacade, ClientService clientService,\n+            SignerProxyFacade signerProxyFacade) {\n+        this.systemService = systemService;\n+        this.serverConfService = serverConfService;\n+        this.tokenService = tokenService;\n+        this.globalConfFacade = globalConfFacade;\n+        this.clientService = clientService;\n+        this.signerProxyFacade = signerProxyFacade;\n+    }\n+\n+    /**\n+     * Check the whole init status of the Security Server. The init status consists of the following:\n+     * 1. is anchor imported - whether or not a configuration anchor has been imported\n+     * 2. is server conf initialized - whether or not a server conf exists\n+     * 3. is software token initialized - whether or not a software token exists AND\n+     * it's status != TokenStatusInfo.NOT_INITIALIZED\n+     * @return\n+     */\n+    public InitializationStatusDto isSecurityServerInitialized() {\n+        boolean isAnchorImported = systemService.isAnchorImported();\n+        boolean isServerConfInitialized = serverConfService.isServerConfInitialized();\n+        boolean isSoftwareTokenInitialized = tokenService.isSoftwareTokenInitialized();\n+        InitializationStatusDto initializationStatusDto = new InitializationStatusDto();\n+        initializationStatusDto.setAnchorImported(isAnchorImported);\n+        initializationStatusDto.setServerConfInitialized(isServerConfInitialized && isSoftwareTokenInitialized);\n+        return initializationStatusDto;\n+    }\n+\n+    /**\n+     * Initialize a new Security Server with the provided parameters. The method will throw an exception if the\n+     * server has already been initialized. The method does support partial initialization (e.g. server conf has\n+     * been created but software token has not) BUT taking that into use will require changing\n+     * {@link #verifyInitializationPrerequisites()} to throw UnhandledWarningsException with warning metadata\n+     * instead of InitializationException.\n+     * @param securityServerCode server code for the new Security Server\n+     * @param ownerMemberClass member class of the new owner member\n+     * @param ownerMemberCode member code of the new owner member\n+     * @param softwareTokenPin pin code for the initial software token (softToken-0)\n+     * @param ignoreWarnings\n+     * @throws AnchorNotFoundException if an anchor has not been imported\n+     * @throws InitializationException if prerequisite check fails: if a server conf already exists OR if a\n+     * software token has already been initialized\n+     * @throws UnhandledWarningsException\n+     * @throws WeakPinException if the pin does not meet the length and complexity requirements (if token pin policy is\n+     * enforced by properties)\n+     * @throws InvalidPinException if the provided pin code does not follow the TokenPinPolicy (if token pin policy is\n+     * enforced by properties)\n+     * @throws SoftwareTokenInitException if something goes wrong with the token init\n+     */\n+    public void initialize(String securityServerCode, String ownerMemberClass, String ownerMemberCode,\n+            String softwareTokenPin, boolean ignoreWarnings) throws AnchorNotFoundException, InitializationException,\n+            UnhandledWarningsException, WeakPinException, InvalidPinException, SoftwareTokenInitException {\n+        if (!systemService.isAnchorImported()) {\n+            throw new AnchorNotFoundException(\"Configuration anchor was not found.\");\n+        }\n+        verifyInitializationPrerequisites();\n+        String instanceIdentifier = globalConfFacade.getInstanceIdentifier();\n+        // get id from db if exists - this is for partial init support since no client ids should yet exist\n+        ClientId ownerClientId = clientService.getPossiblyManagedEntity(ClientId.create(instanceIdentifier,\n+                ownerMemberClass, ownerMemberCode));\n+        if (!ignoreWarnings) {\n+            checkForWarnings(ownerClientId, securityServerCode);\n+        }\n+        // --- Start the init ---\n+        ServerConfType serverConf = createInitialServerConf(ownerClientId, securityServerCode);\n+        initializeSoftwareToken(softwareTokenPin);\n+        serverConfService.saveOrUpdate(serverConf);\n+    }\n+\n+    /**\n+     * Helper to create a software token\n+     * @param softwareTokenPin the pin of the token\n+     * @throws InvalidPinException\n+     * @throws WeakPinException\n+     * @throws SoftwareTokenInitException\n+     */\n+    private void initializeSoftwareToken(String softwareTokenPin) throws InvalidPinException, WeakPinException,\n+            SoftwareTokenInitException {\n+        char[] pin = softwareTokenPin.toCharArray();\n+        if (isTokenPinEnforced) {\n+            TokenPinPolicy.Description description = TokenPinPolicy.describe(pin);\n+            if (!description.isValid()) {\n+                if (description.hasInvalidCharacters()) {\n+                    throw new InvalidPinException(\"The provided pin code does not match with the pin code policy\");\n+                }\n+                List<String> metadata = new ArrayList<>();\n+                metadata.add(METADATA_PIN_MIN_LENGTH);\n+                metadata.add(String.valueOf(TokenPinPolicy.MIN_PASSWORD_LENGTH));\n+                metadata.add(METADATA_PIN_MIN_CHAR_CLASSES);\n+                metadata.add(String.valueOf(TokenPinPolicy.MIN_CHARACTER_CLASS_COUNT));\n+                throw new WeakPinException(\"The provided pin code was too weak\", metadata);\n+            }\n+        }\n+        try {\n+            signerProxyFacade.initSoftwareToken(pin);\n+        } catch (Exception e) {\n+            // not good\n+            throw new SoftwareTokenInitException(\"Error initializing software token\", e);\n+        }\n+    }\n+\n+    /**\n+     * Helper to create the initial server conf\n+     * @param ownerClientId\n+     * @param securityServerCode\n+     * @return ServerConfType\n+     */\n+    private ServerConfType createInitialServerConf(ClientId ownerClientId, String securityServerCode) {\n+        /* get serverconf from db if exists\n+           - this is for partial init support since no server confs should yet exist\n+         */\n+        ServerConfType serverConf = serverConfService.getOrCreateServerConf();\n+        ClientType ownerClient = null;\n+        // get client from db if exists - this is for partial init support since no clients should yet exist\n+        Optional<ClientType> foundClient = serverConf.getClient().stream()\n+                .filter(clientType -> clientType.getIdentifier().equals(ownerClientId))\n+                .findFirst();\n+        ownerClient = foundClient.orElse(getInitialClient(ownerClientId));\n+        ownerClient.setConf(serverConf);\n+        // again for partial init support: if the client already exists there is no reason to add it again\n+        if (!serverConf.getClient().contains(ownerClient)) {\n+            serverConf.getClient().add(ownerClient);\n+        }\n+        serverConf.setOwner(ownerClient);\n+        serverConf.setServerCode(securityServerCode);\n+        return serverConf;\n+    }\n+\n+    /**\n+     * Helper to check for warnings\n+     * @param ownerClientId\n+     * @param securityServerCode\n+     * @throws UnhandledWarningsException\n+     */\n+    private void checkForWarnings(ClientId ownerClientId, String securityServerCode)\n+            throws UnhandledWarningsException {\n+        String ownerMemberName = globalConfFacade.getMemberName(ownerClientId);\n+        SecurityServerId serverId = SecurityServerId.create(ownerClientId, securityServerCode);\n+        List<WarningDeviation> warnings = new ArrayList<>();\n+        if (StringUtils.isEmpty(ownerMemberName)) {\n+            WarningDeviation memberWarning = new WarningDeviation(WARNING_INIT_UNREGISTERED_MEMBER,\n+                    ownerClientId.toShortString());\n+            warnings.add(memberWarning);\n+        }\n+        if (globalConfFacade.existsSecurityServer(serverId)) {\n+            WarningDeviation memberWarning = new WarningDeviation(WARNING_INIT_SERVER_ID_EXISTS,\n+                    serverId.toShortString());\n+            warnings.add(memberWarning);\n+        }\n+        if (!warnings.isEmpty()) {\n+            throw new UnhandledWarningsException(warnings);\n+        }\n+    }\n+\n+    /**\n+     * Helper to create an initial client\n+     * @param clientId\n+     * @return\n+     */\n+    private ClientType getInitialClient(ClientId clientId) {\n+        ClientType localClient = clientService.getLocalClient(clientId);\n+        if (localClient == null) {\n+            localClient = new ClientType();\n+            localClient.setIdentifier(clientId);\n+            localClient.setClientStatus(ClientType.STATUS_SAVED);\n+            localClient.setIsAuthentication(IsAuthentication.SSLAUTH.name());\n+        }\n+        return localClient;\n+    }\n+\n+    /**\n+     * Verify that the initialization process can proceed and that the security server has not already been\n+     * initialized. This means verifying that an anchor has been imported,", "originalCommit": "32c2419007b445d7f7582140934c675dca9ab2db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQwMjI0Mw==", "url": "https://github.com/nordic-institute/X-Road/pull/468#discussion_r424402243", "bodyText": "The anchor is verified before this. The whole prerequisite check is now different - so fixed", "author": "carohauta", "createdAt": "2020-05-13T12:37:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5NzM2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAwMDIzNQ==", "url": "https://github.com/nordic-institute/X-Road/pull/468#discussion_r423000235", "bodyText": "Same comment as in isServerConfInitialized about CodedExceptions.", "author": "jansu76", "createdAt": "2020-05-11T12:22:45Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServerConfService.java", "diffHunk": "@@ -62,6 +63,22 @@ public ServerConfType getServerConf() {\n         return serverConfRepository.getServerConf();\n     }\n \n+    /**\n+     * Get a server conf; an existing server conf will be returned if one exists. Otherwise\n+     * a new transient instance is returned.\n+     * @return\n+     */\n+    public ServerConfType getOrCreateServerConf() {\n+        ServerConfType serverConfType = null;\n+        try {\n+            serverConfType = getServerConf();\n+        } catch (CodedException ce) {\n+            // server conf doesn't exist which is fine - let's just create one", "originalCommit": "32c2419007b445d7f7582140934c675dca9ab2db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQwMzEwMA==", "url": "https://github.com/nordic-institute/X-Road/pull/468#discussion_r424403100", "bodyText": "Fixed", "author": "carohauta", "createdAt": "2020-05-13T12:38:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAwMDIzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAwNjI4MA==", "url": "https://github.com/nordic-institute/X-Road/pull/468#discussion_r423006280", "bodyText": "Should AnchorAlreadyExistsException be a conflict?", "author": "jansu76", "createdAt": "2020-05-11T12:34:04Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/SystemApiController.java", "diffHunk": "@@ -235,14 +235,36 @@ public SystemApiController(InternalTlsCertificateService internalTlsCertificateS\n \n     @Override\n     @PreAuthorize(\"hasAuthority('UPLOAD_ANCHOR')\")\n-    public ResponseEntity<Anchor> previewAnchor(Resource anchorResource) {\n+    public ResponseEntity<Anchor> previewAnchor(Boolean verifyInstance, Resource anchorResource) {\n         byte[] anchorBytes = ResourceUtils.springResourceToBytesOrThrowBadRequest(anchorResource);\n         AnchorFile anchorFile = null;\n         try {\n-            anchorFile = systemService.getAnchorFileFromBytes(anchorBytes);\n+            anchorFile = systemService.getAnchorFileFromBytes(anchorBytes, verifyInstance);\n         } catch (SystemService.InvalidAnchorInstanceException | SystemService.MalformedAnchorException e) {\n             throw new BadRequestException(e);\n         }\n         return new ResponseEntity<>(anchorConverter.convert(anchorFile), HttpStatus.OK);\n     }\n+\n+    /**\n+     * For uploading an initial configuration anchor. The difference between this and {@link #uploadAnchor(Resource)}\n+     * is that the anchor's instance does not get verified\n+     * @param anchorResource\n+     * @return\n+     */\n+    @Override\n+    @PreAuthorize(\"hasAuthority('INIT_CONFIG')\")\n+    public ResponseEntity<Void> uploadInitialAnchor(Resource anchorResource) {\n+        byte[] anchorBytes = ResourceUtils.springResourceToBytesOrThrowBadRequest(anchorResource);\n+        try {\n+            systemService.uploadInitialAnchor(anchorBytes);\n+        } catch (SystemService.InvalidAnchorInstanceException | SystemService.MalformedAnchorException\n+                | SystemService.AnchorAlreadyExistsException e) {", "originalCommit": "32c2419007b445d7f7582140934c675dca9ab2db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQwMzMyMQ==", "url": "https://github.com/nordic-institute/X-Road/pull/468#discussion_r424403321", "bodyText": "It probably should! Changed", "author": "carohauta", "createdAt": "2020-05-13T12:38:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAwNjI4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAxMTY5Ng==", "url": "https://github.com/nordic-institute/X-Road/pull/468#discussion_r423011696", "bodyText": "Maybe a couple of words about ignoreWarnings and UnhandledWarningsException would be good, since it is a kind of complicated concept.", "author": "jansu76", "createdAt": "2020-05-11T12:43:59Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/InitializationService.java", "diffHunk": "@@ -0,0 +1,315 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.SystemProperties;\n+import ee.ria.xroad.common.conf.serverconf.IsAuthentication;\n+import ee.ria.xroad.common.conf.serverconf.model.ClientType;\n+import ee.ria.xroad.common.conf.serverconf.model.ServerConfType;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.SecurityServerId;\n+import ee.ria.xroad.common.util.TokenPinPolicy;\n+\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.dto.InitializationStatusDto;\n+import org.niis.xroad.restapi.exceptions.ErrorDeviation;\n+import org.niis.xroad.restapi.exceptions.WarningDeviation;\n+import org.niis.xroad.restapi.facade.GlobalConfFacade;\n+import org.niis.xroad.restapi.facade.SignerProxyFacade;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * service for initializing the security server\n+ */\n+@Slf4j\n+@Service\n+@Transactional\n+@PreAuthorize(\"isAuthenticated()\")\n+public class InitializationService {\n+    public static final String WARNING_INIT_UNREGISTERED_MEMBER = \"init_unregistered_member\";\n+    public static final String WARNING_INIT_SERVER_ID_EXISTS = \"init_server_id_exists\";\n+    public static final String METADATA_SERVERCONF_EXISTS = \"init_serverconf_exists\";\n+    public static final String METADATA_SOFTWARE_TOKEN_INITIALIZED = \"init_software_token_initialized\";\n+    public static final String METADATA_PIN_MIN_LENGTH = \"pin_min_length\";\n+    public static final String METADATA_PIN_MIN_CHAR_CLASSES = \"pin_min_char_classes_count\";\n+\n+    private final SystemService systemService;\n+    private final ServerConfService serverConfService;\n+    private final TokenService tokenService;\n+    private final GlobalConfFacade globalConfFacade;\n+    private final ClientService clientService;\n+    private final SignerProxyFacade signerProxyFacade;\n+\n+    @Setter\n+    private boolean isTokenPinEnforced = SystemProperties.shouldEnforceTokenPinPolicy();\n+\n+    @Autowired\n+    public InitializationService(SystemService systemService, ServerConfService serverConfService,\n+            TokenService tokenService, GlobalConfFacade globalConfFacade, ClientService clientService,\n+            SignerProxyFacade signerProxyFacade) {\n+        this.systemService = systemService;\n+        this.serverConfService = serverConfService;\n+        this.tokenService = tokenService;\n+        this.globalConfFacade = globalConfFacade;\n+        this.clientService = clientService;\n+        this.signerProxyFacade = signerProxyFacade;\n+    }\n+\n+    /**\n+     * Check the whole init status of the Security Server. The init status consists of the following:\n+     * 1. is anchor imported - whether or not a configuration anchor has been imported\n+     * 2. is server conf initialized - whether or not a server conf exists\n+     * 3. is software token initialized - whether or not a software token exists AND\n+     * it's status != TokenStatusInfo.NOT_INITIALIZED\n+     * @return\n+     */\n+    public InitializationStatusDto isSecurityServerInitialized() {\n+        boolean isAnchorImported = systemService.isAnchorImported();\n+        boolean isServerConfInitialized = serverConfService.isServerConfInitialized();\n+        boolean isSoftwareTokenInitialized = tokenService.isSoftwareTokenInitialized();\n+        InitializationStatusDto initializationStatusDto = new InitializationStatusDto();\n+        initializationStatusDto.setAnchorImported(isAnchorImported);\n+        initializationStatusDto.setServerConfInitialized(isServerConfInitialized && isSoftwareTokenInitialized);\n+        return initializationStatusDto;\n+    }\n+\n+    /**\n+     * Initialize a new Security Server with the provided parameters. The method will throw an exception if the\n+     * server has already been initialized. The method does support partial initialization (e.g. server conf has\n+     * been created but software token has not) BUT taking that into use will require changing\n+     * {@link #verifyInitializationPrerequisites()} to throw UnhandledWarningsException with warning metadata\n+     * instead of InitializationException.\n+     * @param securityServerCode server code for the new Security Server\n+     * @param ownerMemberClass member class of the new owner member\n+     * @param ownerMemberCode member code of the new owner member\n+     * @param softwareTokenPin pin code for the initial software token (softToken-0)\n+     * @param ignoreWarnings\n+     * @throws AnchorNotFoundException if an anchor has not been imported\n+     * @throws InitializationException if prerequisite check fails: if a server conf already exists OR if a\n+     * software token has already been initialized\n+     * @throws UnhandledWarningsException", "originalCommit": "32c2419007b445d7f7582140934c675dca9ab2db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQwMzUzOA==", "url": "https://github.com/nordic-institute/X-Road/pull/468#discussion_r424403538", "bodyText": "Added some better explanations in javadocs", "author": "carohauta", "createdAt": "2020-05-13T12:39:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAxMTY5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAxMzc2Mg==", "url": "https://github.com/nordic-institute/X-Road/pull/468#discussion_r423013762", "bodyText": "nitpick: maybe instead of \"going south\" something more neutral, since it is a bit conversational and codebase is sort of official and open source (this was an extreme nitpick, sorry)", "author": "jansu76", "createdAt": "2020-05-11T12:47:33Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/InitializationService.java", "diffHunk": "@@ -0,0 +1,315 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.SystemProperties;\n+import ee.ria.xroad.common.conf.serverconf.IsAuthentication;\n+import ee.ria.xroad.common.conf.serverconf.model.ClientType;\n+import ee.ria.xroad.common.conf.serverconf.model.ServerConfType;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.SecurityServerId;\n+import ee.ria.xroad.common.util.TokenPinPolicy;\n+\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.dto.InitializationStatusDto;\n+import org.niis.xroad.restapi.exceptions.ErrorDeviation;\n+import org.niis.xroad.restapi.exceptions.WarningDeviation;\n+import org.niis.xroad.restapi.facade.GlobalConfFacade;\n+import org.niis.xroad.restapi.facade.SignerProxyFacade;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * service for initializing the security server\n+ */\n+@Slf4j\n+@Service\n+@Transactional\n+@PreAuthorize(\"isAuthenticated()\")\n+public class InitializationService {\n+    public static final String WARNING_INIT_UNREGISTERED_MEMBER = \"init_unregistered_member\";\n+    public static final String WARNING_INIT_SERVER_ID_EXISTS = \"init_server_id_exists\";\n+    public static final String METADATA_SERVERCONF_EXISTS = \"init_serverconf_exists\";\n+    public static final String METADATA_SOFTWARE_TOKEN_INITIALIZED = \"init_software_token_initialized\";\n+    public static final String METADATA_PIN_MIN_LENGTH = \"pin_min_length\";\n+    public static final String METADATA_PIN_MIN_CHAR_CLASSES = \"pin_min_char_classes_count\";\n+\n+    private final SystemService systemService;\n+    private final ServerConfService serverConfService;\n+    private final TokenService tokenService;\n+    private final GlobalConfFacade globalConfFacade;\n+    private final ClientService clientService;\n+    private final SignerProxyFacade signerProxyFacade;\n+\n+    @Setter\n+    private boolean isTokenPinEnforced = SystemProperties.shouldEnforceTokenPinPolicy();\n+\n+    @Autowired\n+    public InitializationService(SystemService systemService, ServerConfService serverConfService,\n+            TokenService tokenService, GlobalConfFacade globalConfFacade, ClientService clientService,\n+            SignerProxyFacade signerProxyFacade) {\n+        this.systemService = systemService;\n+        this.serverConfService = serverConfService;\n+        this.tokenService = tokenService;\n+        this.globalConfFacade = globalConfFacade;\n+        this.clientService = clientService;\n+        this.signerProxyFacade = signerProxyFacade;\n+    }\n+\n+    /**\n+     * Check the whole init status of the Security Server. The init status consists of the following:\n+     * 1. is anchor imported - whether or not a configuration anchor has been imported\n+     * 2. is server conf initialized - whether or not a server conf exists\n+     * 3. is software token initialized - whether or not a software token exists AND\n+     * it's status != TokenStatusInfo.NOT_INITIALIZED\n+     * @return\n+     */\n+    public InitializationStatusDto isSecurityServerInitialized() {\n+        boolean isAnchorImported = systemService.isAnchorImported();\n+        boolean isServerConfInitialized = serverConfService.isServerConfInitialized();\n+        boolean isSoftwareTokenInitialized = tokenService.isSoftwareTokenInitialized();\n+        InitializationStatusDto initializationStatusDto = new InitializationStatusDto();\n+        initializationStatusDto.setAnchorImported(isAnchorImported);\n+        initializationStatusDto.setServerConfInitialized(isServerConfInitialized && isSoftwareTokenInitialized);\n+        return initializationStatusDto;\n+    }\n+\n+    /**\n+     * Initialize a new Security Server with the provided parameters. The method will throw an exception if the\n+     * server has already been initialized. The method does support partial initialization (e.g. server conf has\n+     * been created but software token has not) BUT taking that into use will require changing\n+     * {@link #verifyInitializationPrerequisites()} to throw UnhandledWarningsException with warning metadata\n+     * instead of InitializationException.\n+     * @param securityServerCode server code for the new Security Server\n+     * @param ownerMemberClass member class of the new owner member\n+     * @param ownerMemberCode member code of the new owner member\n+     * @param softwareTokenPin pin code for the initial software token (softToken-0)\n+     * @param ignoreWarnings\n+     * @throws AnchorNotFoundException if an anchor has not been imported\n+     * @throws InitializationException if prerequisite check fails: if a server conf already exists OR if a\n+     * software token has already been initialized\n+     * @throws UnhandledWarningsException\n+     * @throws WeakPinException if the pin does not meet the length and complexity requirements (if token pin policy is\n+     * enforced by properties)\n+     * @throws InvalidPinException if the provided pin code does not follow the TokenPinPolicy (if token pin policy is\n+     * enforced by properties)\n+     * @throws SoftwareTokenInitException if something goes wrong with the token init\n+     */\n+    public void initialize(String securityServerCode, String ownerMemberClass, String ownerMemberCode,\n+            String softwareTokenPin, boolean ignoreWarnings) throws AnchorNotFoundException, InitializationException,\n+            UnhandledWarningsException, WeakPinException, InvalidPinException, SoftwareTokenInitException {\n+        if (!systemService.isAnchorImported()) {\n+            throw new AnchorNotFoundException(\"Configuration anchor was not found.\");\n+        }\n+        verifyInitializationPrerequisites();\n+        String instanceIdentifier = globalConfFacade.getInstanceIdentifier();\n+        // get id from db if exists - this is for partial init support since no client ids should yet exist\n+        ClientId ownerClientId = clientService.getPossiblyManagedEntity(ClientId.create(instanceIdentifier,\n+                ownerMemberClass, ownerMemberCode));\n+        if (!ignoreWarnings) {\n+            checkForWarnings(ownerClientId, securityServerCode);\n+        }\n+        // --- Start the init ---\n+        ServerConfType serverConf = createInitialServerConf(ownerClientId, securityServerCode);\n+        initializeSoftwareToken(softwareTokenPin);\n+        serverConfService.saveOrUpdate(serverConf);\n+    }\n+\n+    /**\n+     * Helper to create a software token\n+     * @param softwareTokenPin the pin of the token\n+     * @throws InvalidPinException\n+     * @throws WeakPinException\n+     * @throws SoftwareTokenInitException\n+     */\n+    private void initializeSoftwareToken(String softwareTokenPin) throws InvalidPinException, WeakPinException,\n+            SoftwareTokenInitException {\n+        char[] pin = softwareTokenPin.toCharArray();\n+        if (isTokenPinEnforced) {\n+            TokenPinPolicy.Description description = TokenPinPolicy.describe(pin);\n+            if (!description.isValid()) {\n+                if (description.hasInvalidCharacters()) {\n+                    throw new InvalidPinException(\"The provided pin code does not match with the pin code policy\");\n+                }\n+                List<String> metadata = new ArrayList<>();\n+                metadata.add(METADATA_PIN_MIN_LENGTH);\n+                metadata.add(String.valueOf(TokenPinPolicy.MIN_PASSWORD_LENGTH));\n+                metadata.add(METADATA_PIN_MIN_CHAR_CLASSES);\n+                metadata.add(String.valueOf(TokenPinPolicy.MIN_CHARACTER_CLASS_COUNT));\n+                throw new WeakPinException(\"The provided pin code was too weak\", metadata);\n+            }\n+        }\n+        try {\n+            signerProxyFacade.initSoftwareToken(pin);\n+        } catch (Exception e) {\n+            // not good\n+            throw new SoftwareTokenInitException(\"Error initializing software token\", e);\n+        }\n+    }\n+\n+    /**\n+     * Helper to create the initial server conf\n+     * @param ownerClientId\n+     * @param securityServerCode\n+     * @return ServerConfType\n+     */\n+    private ServerConfType createInitialServerConf(ClientId ownerClientId, String securityServerCode) {\n+        /* get serverconf from db if exists\n+           - this is for partial init support since no server confs should yet exist\n+         */\n+        ServerConfType serverConf = serverConfService.getOrCreateServerConf();\n+        ClientType ownerClient = null;\n+        // get client from db if exists - this is for partial init support since no clients should yet exist\n+        Optional<ClientType> foundClient = serverConf.getClient().stream()\n+                .filter(clientType -> clientType.getIdentifier().equals(ownerClientId))\n+                .findFirst();\n+        ownerClient = foundClient.orElse(getInitialClient(ownerClientId));\n+        ownerClient.setConf(serverConf);\n+        // again for partial init support: if the client already exists there is no reason to add it again\n+        if (!serverConf.getClient().contains(ownerClient)) {\n+            serverConf.getClient().add(ownerClient);\n+        }\n+        serverConf.setOwner(ownerClient);\n+        serverConf.setServerCode(securityServerCode);\n+        return serverConf;\n+    }\n+\n+    /**\n+     * Helper to check for warnings\n+     * @param ownerClientId\n+     * @param securityServerCode\n+     * @throws UnhandledWarningsException\n+     */\n+    private void checkForWarnings(ClientId ownerClientId, String securityServerCode)\n+            throws UnhandledWarningsException {\n+        String ownerMemberName = globalConfFacade.getMemberName(ownerClientId);\n+        SecurityServerId serverId = SecurityServerId.create(ownerClientId, securityServerCode);\n+        List<WarningDeviation> warnings = new ArrayList<>();\n+        if (StringUtils.isEmpty(ownerMemberName)) {\n+            WarningDeviation memberWarning = new WarningDeviation(WARNING_INIT_UNREGISTERED_MEMBER,\n+                    ownerClientId.toShortString());\n+            warnings.add(memberWarning);\n+        }\n+        if (globalConfFacade.existsSecurityServer(serverId)) {\n+            WarningDeviation memberWarning = new WarningDeviation(WARNING_INIT_SERVER_ID_EXISTS,\n+                    serverId.toShortString());\n+            warnings.add(memberWarning);\n+        }\n+        if (!warnings.isEmpty()) {\n+            throw new UnhandledWarningsException(warnings);\n+        }\n+    }\n+\n+    /**\n+     * Helper to create an initial client\n+     * @param clientId\n+     * @return\n+     */\n+    private ClientType getInitialClient(ClientId clientId) {\n+        ClientType localClient = clientService.getLocalClient(clientId);\n+        if (localClient == null) {\n+            localClient = new ClientType();\n+            localClient.setIdentifier(clientId);\n+            localClient.setClientStatus(ClientType.STATUS_SAVED);\n+            localClient.setIsAuthentication(IsAuthentication.SSLAUTH.name());\n+        }\n+        return localClient;\n+    }\n+\n+    /**\n+     * Verify that the initialization process can proceed and that the security server has not already been\n+     * initialized. This means verifying that an anchor has been imported,\n+     * server conf does not exist and a software token has not yet been initialized. This method could also be\n+     * changed into throwing an UnhandledWarningsException with warning metadata instead of the current\n+     * InitializationException if partial init needs to be supported in the future\n+     * @throws InitializationException if server conf exists OR software token is already initialized\n+     */\n+    private void verifyInitializationPrerequisites() throws InitializationException {\n+        boolean isServerConfInitialized = serverConfService.isServerConfInitialized();\n+        boolean isSoftwareTokenInitialized = tokenService.isSoftwareTokenInitialized();\n+        List<String> metadata = new ArrayList<>();\n+        if (isServerConfInitialized) {\n+            metadata.add(METADATA_SERVERCONF_EXISTS);\n+        }\n+        if (isSoftwareTokenInitialized) {\n+            metadata.add(METADATA_SOFTWARE_TOKEN_INITIALIZED);\n+        }\n+        if (!metadata.isEmpty()) {\n+            throw new InitializationException(\"Error initializing security server\", metadata);\n+        }\n+    }\n+\n+    /**\n+     * If something goes south with the initialization", "originalCommit": "32c2419007b445d7f7582140934c675dca9ab2db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQxMTQ2NA==", "url": "https://github.com/nordic-institute/X-Road/pull/468#discussion_r424411464", "bodyText": "Did not even think about this. Fixed.\nChecking from Wiktionary, the idiom seems to have quite a few different meanings - some of which have darker or otherwise inappropriate tone to them.", "author": "carohauta", "createdAt": "2020-05-13T12:51:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAxMzc2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5MDg3OQ==", "url": "https://github.com/nordic-institute/X-Road/pull/468#discussion_r424890879", "bodyText": ":)", "author": "jansu76", "createdAt": "2020-05-14T06:08:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAxMzc2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAxNTk3Nw==", "url": "https://github.com/nordic-institute/X-Road/pull/468#discussion_r423015977", "bodyText": "Hmm, is this a misleading log entry, will it look like an error for system admins, with the stacktrace? Could it maybe be reworded?", "author": "jansu76", "createdAt": "2020-05-11T12:51:33Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/SystemService.java", "diffHunk": "@@ -268,6 +304,44 @@ public void uploadAnchor(byte[] anchorBytes) throws InvalidAnchorInstanceExcepti\n         }\n     }\n \n+    /**\n+     * Is global conf initialized -> it is if whe can find a Configuration anchor\n+     * @return\n+     */\n+    public boolean isAnchorImported() {\n+        boolean isGlobalConfInitialized = false;\n+        try {\n+            AnchorFile anchorFile = getAnchorFile();\n+            if (anchorFile != null) {\n+                isGlobalConfInitialized = true;\n+            }\n+        } catch (AnchorNotFoundException e) {\n+            log.info(\"SystemService#isAnchorImported: could not find Global Configuration Anchor\", e);", "originalCommit": "32c2419007b445d7f7582140934c675dca9ab2db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQxMzMzMw==", "url": "https://github.com/nordic-institute/X-Road/pull/468#discussion_r424413333", "bodyText": "Removed the logging since there is really nothing to log here. Just swallow the exception and continue", "author": "carohauta", "createdAt": "2020-05-13T12:54:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAxNTk3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAxODYwNg==", "url": "https://github.com/nordic-institute/X-Road/pull/468#discussion_r423018606", "bodyText": "Nicely tested validation \ud83d\udc4d", "author": "jansu76", "createdAt": "2020-05-11T12:56:20Z", "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/openapi/IdentifierValidationRestTemplateTest.java", "diffHunk": "@@ -184,4 +184,44 @@ private void assertUpdateServiceDescriptionValidationFailure(String restServiceC\n         assertEquals(\"validation_failure\", errors.get(\"code\"));\n     }\n \n+    @Test\n+    public void initialServerConf() {\n+        assertInitialServerConfValidationError(HAS_COLON, \"aa\", \"aa\");\n+        assertInitialServerConfValidationError(HAS_SEMICOLON, \"aa\", \"aa\");\n+        assertInitialServerConfValidationError(HAS_PERCENT, \"aa\", \"aa\");\n+        assertInitialServerConfValidationError(HAS_NON_NORMALIZED, \"aa\", \"aa\");\n+        assertInitialServerConfValidationError(HAS_BACKSLASH, \"aa\", \"aa\");\n+        assertInitialServerConfValidationError(\"aa\", HAS_COLON, \"aa\");\n+        assertInitialServerConfValidationError(\"aa\", HAS_SEMICOLON, \"aa\");\n+        assertInitialServerConfValidationError(\"aa\", HAS_PERCENT, \"aa\");\n+        assertInitialServerConfValidationError(\"aa\", HAS_NON_NORMALIZED, \"aa\");", "originalCommit": "32c2419007b445d7f7582140934c675dca9ab2db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQxNzc3OQ==", "url": "https://github.com/nordic-institute/X-Road/pull/468#discussion_r424417779", "bodyText": "Also seemed to (randomly, not always) exhaust the default 20 requests per second IP throttling rate. Increased the rate to 60/second for tests.", "author": "carohauta", "createdAt": "2020-05-13T13:01:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAxODYwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5MTgwMg==", "url": "https://github.com/nordic-institute/X-Road/pull/468#discussion_r424891802", "bodyText": "Oh, did not realize that could become an issue. Good change then. Hopefully that wont randomly fail even with the increased limit. Might also think about removing throttle for the tests altogether.", "author": "jansu76", "createdAt": "2020-05-14T06:11:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAxODYwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3OTg3OA==", "url": "https://github.com/nordic-institute/X-Road/pull/468#discussion_r425079878", "bodyText": "throttle filter was disabled altogether from tests by @carohauta", "author": "jansu76", "createdAt": "2020-05-14T11:56:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAxODYwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAxOTgyNg==", "url": "https://github.com/nordic-institute/X-Road/pull/468#discussion_r423019826", "bodyText": "Nice effort put into testing across the board \ud83d\udc4d", "author": "jansu76", "createdAt": "2020-05-11T12:58:25Z", "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/service/InitializationServiceTest.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.conf.serverconf.model.ServerConfType;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.SecurityServerId;\n+import ee.ria.xroad.common.util.TokenPinPolicy;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.niis.xroad.restapi.dto.InitializationStatusDto;\n+import org.niis.xroad.restapi.facade.GlobalConfFacade;\n+import org.niis.xroad.restapi.facade.SignerProxyFacade;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.when;\n+import static org.niis.xroad.restapi.service.InitializationService.METADATA_PIN_MIN_CHAR_CLASSES;\n+import static org.niis.xroad.restapi.service.InitializationService.METADATA_PIN_MIN_LENGTH;\n+import static org.niis.xroad.restapi.service.InitializationService.METADATA_SERVERCONF_EXISTS;\n+import static org.niis.xroad.restapi.service.InitializationService.METADATA_SOFTWARE_TOKEN_INITIALIZED;\n+import static org.niis.xroad.restapi.service.InitializationService.WARNING_INIT_SERVER_ID_EXISTS;\n+import static org.niis.xroad.restapi.service.InitializationService.WARNING_INIT_UNREGISTERED_MEMBER;\n+import static org.niis.xroad.restapi.service.InitializationService.WeakPinException.WEAK_PIN;\n+import static org.niis.xroad.restapi.util.DeviationTestUtils.assertErrorWithMetadata;\n+import static org.niis.xroad.restapi.util.DeviationTestUtils.assertWarning;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest\n+@AutoConfigureTestDatabase\n+@Slf4j\n+@Transactional\n+@WithMockUser\n+public class InitializationServiceTest {", "originalCommit": "32c2419007b445d7f7582140934c675dca9ab2db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cb156821f6fa20008ded244c7b20f802a2425185", "url": "https://github.com/nordic-institute/X-Road/commit/cb156821f6fa20008ded244c7b20f802a2425185", "message": "XRDDEV-904 PR comment fixes 1", "committedDate": "2020-05-12T11:30:57Z", "type": "commit"}, {"oid": "5b56c8752ddd14308d44348289e362e37654ef7a", "url": "https://github.com/nordic-institute/X-Road/commit/5b56c8752ddd14308d44348289e362e37654ef7a", "message": "XRDDEV-904 Add more validation and verifying", "committedDate": "2020-05-12T13:49:45Z", "type": "commit"}, {"oid": "067a223fc45d93ac85cb2d18ce94d86272bc598b", "url": "https://github.com/nordic-institute/X-Road/commit/067a223fc45d93ac85cb2d18ce94d86272bc598b", "message": "XRDDEV-904 Update javadocs and add partial init tests", "committedDate": "2020-05-13T10:58:02Z", "type": "commit"}, {"oid": "1f3f6c15d40fbe0139a7702b35c69e9544bb2194", "url": "https://github.com/nordic-institute/X-Road/commit/1f3f6c15d40fbe0139a7702b35c69e9544bb2194", "message": "Merge branch 'develop' into XRDDEV-904-initial-configuration", "committedDate": "2020-05-13T10:58:37Z", "type": "commit"}, {"oid": "c822c2053c98bce0cd154eff6193f571ce1f628b", "url": "https://github.com/nordic-institute/X-Road/commit/c822c2053c98bce0cd154eff6193f571ce1f628b", "message": "XRDDEV-904 Increase IP Throttling rate for tests", "committedDate": "2020-05-13T12:30:54Z", "type": "commit"}, {"oid": "46c0c032f19f7b960a87ed9c90967cb913263ece", "url": "https://github.com/nordic-institute/X-Road/commit/46c0c032f19f7b960a87ed9c90967cb913263ece", "message": "XRDDEV-904 API definition version bump", "committedDate": "2020-05-13T13:01:11Z", "type": "commit"}, {"oid": "8b870dd94d4e586bb32d171cc9327ddd1f15b7a1", "url": "https://github.com/nordic-institute/X-Road/commit/8b870dd94d4e586bb32d171cc9327ddd1f15b7a1", "message": "XRDDEV-904 Exclude IP Throttling Filter from tests", "committedDate": "2020-05-14T07:52:16Z", "type": "commit"}, {"oid": "dc9698cf8009c2e144eef6dffbe5f9d3d99410b3", "url": "https://github.com/nordic-institute/X-Road/commit/dc9698cf8009c2e144eef6dffbe5f9d3d99410b3", "message": "Merge branch 'develop' into XRDDEV-904-initial-configuration", "committedDate": "2020-05-14T08:09:40Z", "type": "commit"}, {"oid": "bedc5414a216da3a7068b5896ee33d27293dc445", "url": "https://github.com/nordic-institute/X-Road/commit/bedc5414a216da3a7068b5896ee33d27293dc445", "message": "Merge branch 'develop' into XRDDEV-904-initial-configuration", "committedDate": "2020-05-14T10:50:54Z", "type": "commit"}]}