{"pr_number": 425, "pr_title": "[Code health] Add unit tests for LocalDataStore", "pr_createdAt": "2020-04-05T15:27:31Z", "pr_url": "https://github.com/google/ground-android/pull/425", "timeline": [{"oid": "0c1ad6268da44894b6dc7eeb63b40072a05812b1", "url": "https://github.com/google/ground-android/commit/0c1ad6268da44894b6dc7eeb63b40072a05812b1", "message": "Add dagger test dependencies", "committedDate": "2020-04-05T14:36:06Z", "type": "commit"}, {"oid": "73b504214fe3c76d91e771f197d80998ae15d4d4", "url": "https://github.com/google/ground-android/commit/73b504214fe3c76d91e771f197d80998ae15d4d4", "message": "Setup dagger injection for local database", "committedDate": "2020-04-05T14:39:01Z", "type": "commit"}, {"oid": "fb3404a81c5efa680243972851f0d8b784580c4c", "url": "https://github.com/google/ground-android/commit/fb3404a81c5efa680243972851f0d8b784580c4c", "message": "Add tests for UserDao", "committedDate": "2020-04-05T15:25:27Z", "type": "commit"}, {"oid": "b7e5a711cece66af39420de4ac7c3db16561afa2", "url": "https://github.com/google/ground-android/commit/b7e5a711cece66af39420de4ac7c3db16561afa2", "message": "Reuse test user object and add test for empty db", "committedDate": "2020-04-05T15:53:42Z", "type": "commit"}, {"oid": "901471556fdd572069b57f8447d2c4926e6b91f1", "url": "https://github.com/google/ground-android/commit/901471556fdd572069b57f8447d2c4926e6b91f1", "message": "Aggregate dependencies for LocalDataStore under LocalDataStoreModule\n\n - This would allow us to reuse just this module for testing", "committedDate": "2020-04-05T16:30:10Z", "type": "commit"}, {"oid": "f283375e986b3ad84695c0c06761347e3656be26", "url": "https://github.com/google/ground-android/commit/f283375e986b3ad84695c0c06761347e3656be26", "message": "Load LocalDataStoreModule in TestComponent and inject UserDao directly", "committedDate": "2020-04-05T16:31:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc2NTY3NA==", "url": "https://github.com/google/ground-android/pull/425#discussion_r403765674", "bodyText": "Should we include the name of the entry point in this method as well for consistency? Perhaps we can create a convention like testEntryPoint_condition_result, e.g. testInsertUser_alreadyPresent_raisesError?  If condition and result are missing it can be assumed we're testing the default code path?", "author": "gino-m", "createdAt": "2020-04-05T22:28:04Z", "path": "gnd/src/androidTest/java/com/google/android/gnd/persistence/local/room/dao/UserDaoTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.local.room.dao;\n+\n+import androidx.test.runner.AndroidJUnit4;\n+import com.google.android.gnd.inject.DaggerTestComponent;\n+import com.google.android.gnd.model.User;\n+import com.google.android.gnd.persistence.local.room.entity.UserEntity;\n+import javax.inject.Inject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class UserDaoTest {\n+\n+  @Inject UserDao userDao;\n+\n+  private User testUser =\n+      User.builder().setId(\"foo id\").setDisplayName(\"foo name\").setEmail(\"foo@gmail.com\").build();\n+\n+  @Before\n+  public void setUp() {\n+    DaggerTestComponent.create().inject(this);\n+  }\n+\n+  @Test\n+  public void testEmptyDb() {\n+    userDao.findById(testUser.getId()).test().assertNoValues();\n+  }\n+\n+  @Test\n+  public void testInsertUser() {\n+    userDao.insert(UserEntity.fromUser(testUser)).test().assertNoErrors();\n+    userDao\n+        .findById(testUser.getId())\n+        .test()\n+        .assertNoErrors()\n+        .assertValue(UserEntity.fromUser(testUser));\n+  }\n+\n+  @Test\n+  public void insertingAlreadyPresentUser_shouldRaiseError() {", "originalCommit": "f283375e986b3ad84695c0c06761347e3656be26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg1OTAxOQ==", "url": "https://github.com/google/ground-android/pull/425#discussion_r403859019", "bodyText": "Done. PTAL", "author": "shobhitagarwal1612", "createdAt": "2020-04-06T06:38:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc2NTY3NA=="}], "type": "inlineReview"}, {"oid": "f3154fe79b90a1b7db6f2feaa06577e354eebd24", "url": "https://github.com/google/ground-android/commit/f3154fe79b90a1b7db6f2feaa06577e354eebd24", "message": "Name tests using convention testEntryPoint_condition_result", "committedDate": "2020-04-06T06:34:04Z", "type": "commit"}, {"oid": "ce948d14b228fdf54c29dc39c0287c84627e69f4", "url": "https://github.com/google/ground-android/commit/ce948d14b228fdf54c29dc39c0287c84627e69f4", "message": "Remove redundant assertions already tested in other tests", "committedDate": "2020-04-06T06:37:05Z", "type": "commit"}, {"oid": "96a63da5289cc7b6890c333cef4e001eb95f2a8c", "url": "https://github.com/google/ground-android/commit/96a63da5289cc7b6890c333cef4e001eb95f2a8c", "message": "Merge branch 'master' into testing", "committedDate": "2020-04-07T12:42:29Z", "type": "commit"}, {"oid": "aab1adc418084d50682298c7ae37ae2259af2c86", "url": "https://github.com/google/ground-android/commit/aab1adc418084d50682298c7ae37ae2259af2c86", "message": "Merge branch 'master' into testing", "committedDate": "2020-04-08T19:15:17Z", "type": "commit"}, {"oid": "8e732b7557ea24476a62ce2d8d2dcbfe70a76f0c", "url": "https://github.com/google/ground-android/commit/8e732b7557ea24476a62ce2d8d2dcbfe70a76f0c", "message": "Merge branch 'master' into testing", "committedDate": "2020-04-08T19:31:31Z", "type": "commit"}, {"oid": "8181b2d95961fc182395a9b1ad8fcf7938cf137f", "url": "https://github.com/google/ground-android/commit/8181b2d95961fc182395a9b1ad8fcf7938cf137f", "message": "Merge branch 'master' into testing", "committedDate": "2020-04-10T07:29:25Z", "type": "commit"}, {"oid": "d397882c58395cabcf805725a27e3afe2486eb8b", "url": "https://github.com/google/ground-android/commit/d397882c58395cabcf805725a27e3afe2486eb8b", "message": "Add dependencies for robolectric and configure gradle", "committedDate": "2020-04-10T08:41:54Z", "type": "commit"}, {"oid": "898cb348b99b22c332e19d94dcb7e98b510dcfb1", "url": "https://github.com/google/ground-android/commit/898cb348b99b22c332e19d94dcb7e98b510dcfb1", "message": "Remove InstrumentationTest UserDaoTest", "committedDate": "2020-04-10T08:42:28Z", "type": "commit"}, {"oid": "675d62f5d7aed3ed0cae4f354e812ab02ae715fb", "url": "https://github.com/google/ground-android/commit/675d62f5d7aed3ed0cae4f354e812ab02ae715fb", "message": "Rename dagger config for instrumentation tests -> Android*", "committedDate": "2020-04-10T08:42:49Z", "type": "commit"}, {"oid": "b5ace3d429ac82b9e44bab338f880092d14f59a8", "url": "https://github.com/google/ground-android/commit/b5ace3d429ac82b9e44bab338f880092d14f59a8", "message": "Configure dagger injection for robolectric tests", "committedDate": "2020-04-10T08:43:17Z", "type": "commit"}, {"oid": "2eab5e222d693d823147c69b6af6b75e3c80cff1", "url": "https://github.com/google/ground-android/commit/2eab5e222d693d823147c69b6af6b75e3c80cff1", "message": "Add robolectric test for UserDao", "committedDate": "2020-04-10T08:43:38Z", "type": "commit"}, {"oid": "2465de00c0717efbf649feedd546676b9a24e714", "url": "https://github.com/google/ground-android/commit/2465de00c0717efbf649feedd546676b9a24e714", "message": "Convert Schedulers into interface and create implementation", "committedDate": "2020-04-10T14:22:21Z", "type": "commit"}, {"oid": "cde54ecfc009da2f889bf54cc2ba75bd2ee3893f", "url": "https://github.com/google/ground-android/commit/cde54ecfc009da2f889bf54cc2ba75bd2ee3893f", "message": "Create TestScheduler for tests\n\n - each method uses trampoline() which basically runs everything on the same thread", "committedDate": "2020-04-10T14:23:16Z", "type": "commit"}, {"oid": "ca5899f31f796f8cacaefafd81bb352bde7d9e2f", "url": "https://github.com/google/ground-android/commit/ca5899f31f796f8cacaefafd81bb352bde7d9e2f", "message": "Add tests for tiles", "committedDate": "2020-04-10T14:23:38Z", "type": "commit"}, {"oid": "48d46f857a5dbf9de2b8b449912a2a8e1150ead5", "url": "https://github.com/google/ground-android/commit/48d46f857a5dbf9de2b8b449912a2a8e1150ead5", "message": "Add tests for offline area", "committedDate": "2020-04-10T14:37:17Z", "type": "commit"}, {"oid": "049c60cc6f240ab4d0f54f3598934942b890cc65", "url": "https://github.com/google/ground-android/commit/049c60cc6f240ab4d0f54f3598934942b890cc65", "message": "loadUser -> getUser", "committedDate": "2020-04-10T14:47:43Z", "type": "commit"}, {"oid": "721610b19563514429cdcd86bb327657730486d6", "url": "https://github.com/google/ground-android/commit/721610b19563514429cdcd86bb327657730486d6", "message": "Add test for user", "committedDate": "2020-04-10T14:48:06Z", "type": "commit"}, {"oid": "2133e51b805466c8a426518d696767c33e11b555", "url": "https://github.com/google/ground-android/commit/2133e51b805466c8a426518d696767c33e11b555", "message": "DB gets recreated for each test.\n\nSo, we don't need to close it after each test.", "committedDate": "2020-04-10T14:51:03Z", "type": "commit"}, {"oid": "929d915ea96b2add233d59b509aada58487deac0", "url": "https://github.com/google/ground-android/commit/929d915ea96b2add233d59b509aada58487deac0", "message": "Return ImmutableList<Project> instead of List<Project>", "committedDate": "2020-04-11T06:56:38Z", "type": "commit"}, {"oid": "06865b89b388394c22a10f13f6e1a82c9be93c16", "url": "https://github.com/google/ground-android/commit/06865b89b388394c22a10f13f6e1a82c9be93c16", "message": "Add test for getProjects", "committedDate": "2020-04-11T06:56:55Z", "type": "commit"}, {"oid": "90b71b388ca442abcf11db6a33aae2efb9367add", "url": "https://github.com/google/ground-android/commit/90b71b388ca442abcf11db6a33aae2efb9367add", "message": "Test getProjectById and deleteProject", "committedDate": "2020-04-11T07:00:49Z", "type": "commit"}, {"oid": "3192d7a3918abc349d6e67b2d57204497f841ab0", "url": "https://github.com/google/ground-android/commit/3192d7a3918abc349d6e67b2d57204497f841ab0", "message": "test inserting project with dummy data (text field)\n\n this test fails when trying to save layer", "committedDate": "2020-04-11T13:40:42Z", "type": "commit"}, {"oid": "462ab11b7ea77ee311b79e08f3554e9c203e058b", "url": "https://github.com/google/ground-android/commit/462ab11b7ea77ee311b79e08f3554e9c203e058b", "message": "Replace assertNoError with assetComplete", "committedDate": "2020-04-11T14:09:26Z", "type": "commit"}, {"oid": "f1962814aca54ef069117f9617afff78d65f8470", "url": "https://github.com/google/ground-android/commit/f1962814aca54ef069117f9617afff78d65f8470", "message": "Exclude the insertProjectTest until we have a solution", "committedDate": "2020-04-11T14:12:18Z", "type": "commit"}, {"oid": "437d284911a491f19bac494842bb0980dcb54ba9", "url": "https://github.com/google/ground-android/commit/437d284911a491f19bac494842bb0980dcb54ba9", "message": "Remove UserDaoTest, already tested in LocalDataStoreTest", "committedDate": "2020-04-11T14:13:19Z", "type": "commit"}, {"oid": "266117c7dd25c16b832b5687f21489e6e2e2a769", "url": "https://github.com/google/ground-android/commit/266117c7dd25c16b832b5687f21489e6e2e2a769", "message": "Improve comment", "committedDate": "2020-04-11T14:16:36Z", "type": "commit"}, {"oid": "a312dd69d624e7244f93fea68ebfbf9e19d6661a", "url": "https://github.com/google/ground-android/commit/a312dd69d624e7244f93fea68ebfbf9e19d6661a", "message": "Merge branch 'master' into testing", "committedDate": "2020-04-11T14:17:45Z", "type": "commit"}, {"oid": "015c2518ccdd7ab2855007f8e5b10e4e3e34573f", "url": "https://github.com/google/ground-android/commit/015c2518ccdd7ab2855007f8e5b10e4e3e34573f", "message": "Fix failing layer insertion test\n\n - A new instance of local db was getting created for each Dao (see LocalDataStoreModule). This causes constraint exception as the project and layer inserted into different databases", "committedDate": "2020-04-12T08:41:54Z", "type": "commit"}, {"oid": "affe11b1eeb671ae565467e647c69f7ab56b5e13", "url": "https://github.com/google/ground-android/commit/affe11b1eeb671ae565467e647c69f7ab56b5e13", "message": "Change type of field to multiple choice to exercise options insertion", "committedDate": "2020-04-12T08:49:34Z", "type": "commit"}, {"oid": "7c17ec288e501d2ce175995387c9d3c3bbfe9247", "url": "https://github.com/google/ground-android/commit/7c17ec288e501d2ce175995387c9d3c3bbfe9247", "message": "Add test for adding feature mutation", "committedDate": "2020-04-12T09:17:08Z", "type": "commit"}, {"oid": "2c3afa5d88f42ebf7b653e9332fb45c55c507f9e", "url": "https://github.com/google/ground-android/commit/2c3afa5d88f42ebf7b653e9332fb45c55c507f9e", "message": "Assert saved mutation", "committedDate": "2020-04-12T09:29:38Z", "type": "commit"}, {"oid": "18fd73eea5a122ef8eb66ee965ff0dd7c4c2af12", "url": "https://github.com/google/ground-android/commit/18fd73eea5a122ef8eb66ee965ff0dd7c4c2af12", "message": "Test remove pending mutations", "committedDate": "2020-04-12T17:43:45Z", "type": "commit"}, {"oid": "66dbfce3839411285fd0b4b5fa898daf537b4e0d", "url": "https://github.com/google/ground-android/commit/66dbfce3839411285fd0b4b5fa898daf537b4e0d", "message": "Create method for generating test user object", "committedDate": "2020-04-12T17:48:50Z", "type": "commit"}, {"oid": "a5c5d91401f367171f17a84582125e04b2f05164", "url": "https://github.com/google/ground-android/commit/a5c5d91401f367171f17a84582125e04b2f05164", "message": "Test getFeature", "committedDate": "2020-04-12T19:47:57Z", "type": "commit"}, {"oid": "4a7dda8acea6f17da1ac23c037a1ef3c9d6b3cbf", "url": "https://github.com/google/ground-android/commit/4a7dda8acea6f17da1ac23c037a1ef3c9d6b3cbf", "message": "Test mergeFeature", "committedDate": "2020-04-12T20:03:25Z", "type": "commit"}, {"oid": "00e71a3abd1bb2061484d9179a3aa05260faef14", "url": "https://github.com/google/ground-android/commit/00e71a3abd1bb2061484d9179a3aa05260faef14", "message": "Test applyAndEnqueue observationFeature", "committedDate": "2020-04-12T20:26:09Z", "type": "commit"}, {"oid": "f80979684b0dd7a609b35a1a124f477719690a85", "url": "https://github.com/google/ground-android/commit/f80979684b0dd7a609b35a1a124f477719690a85", "message": "Test applyAndEnqueue observationFeature for existing observation", "committedDate": "2020-04-12T20:35:22Z", "type": "commit"}, {"oid": "88ac6932b3ca39865bf5c2e8ce79db2a2bd5a83d", "url": "https://github.com/google/ground-android/commit/88ac6932b3ca39865bf5c2e8ce79db2a2bd5a83d", "message": "Test getObservation and combine similar tests", "committedDate": "2020-04-12T21:01:24Z", "type": "commit"}, {"oid": "fd0d65466707b090d3dd49910286b2db5a6cbd81", "url": "https://github.com/google/ground-android/commit/fd0d65466707b090d3dd49910286b2db5a6cbd81", "message": "Also exercise getObservations", "committedDate": "2020-04-12T21:10:09Z", "type": "commit"}, {"oid": "b161822bf19d71a29dc1716f8f8ea9ce46fa2002", "url": "https://github.com/google/ground-android/commit/b161822bf19d71a29dc1716f8f8ea9ce46fa2002", "message": "Add test for getTilesOnceAndStream\n\n - We also had to add a rule to run all tasks instantly in addition to having the TestScheduler. Maybe TestScheduler can be removed now.", "committedDate": "2020-04-13T08:24:13Z", "type": "commit"}, {"oid": "2c06cd16ae4c6e3e8dc52f4950c09a2f12b178ce", "url": "https://github.com/google/ground-android/commit/2c06cd16ae4c6e3e8dc52f4950c09a2f12b178ce", "message": "Fix pmd warnings and disable one spotbugs rule", "committedDate": "2020-04-13T08:45:18Z", "type": "commit"}, {"oid": "dcbf0b5dbe0c7a2d3c300fd2d220357e30c5a4a1", "url": "https://github.com/google/ground-android/commit/dcbf0b5dbe0c7a2d3c300fd2d220357e30c5a4a1", "message": "Add test for getFeaturesOnceAndStream", "committedDate": "2020-04-13T15:44:34Z", "type": "commit"}, {"oid": "14749960635afa4a4e6dd97065a3999ef2f1dd9c", "url": "https://github.com/google/ground-android/commit/14749960635afa4a4e6dd97065a3999ef2f1dd9c", "message": "cleanup", "committedDate": "2020-04-13T15:57:23Z", "type": "commit"}, {"oid": "e552b174758c6a83d48d1f5f87fcb7f6e326750b", "url": "https://github.com/google/ground-android/commit/e552b174758c6a83d48d1f5f87fcb7f6e326750b", "message": "Add tests for updateMutations", "committedDate": "2020-04-13T17:20:03Z", "type": "commit"}, {"oid": "c8b96af9891cc444262b6913c95b9d383b04f1b7", "url": "https://github.com/google/ground-android/commit/c8b96af9891cc444262b6913c95b9d383b04f1b7", "message": "Add id to created mutations for simplicity\n\n - this is so that we don't always need to get the row from db before updating the entity", "committedDate": "2020-04-13T17:26:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5MTI2NQ==", "url": "https://github.com/google/ground-android/pull/425#discussion_r407591265", "bodyText": "\ud83d\udc4f \ud83d\udc4f\nThanks also for the name fixes, the DAO injection, and all the rest!", "author": "gino-m", "createdAt": "2020-04-13T17:05:37Z", "path": "gnd/src/main/java/com/google/android/gnd/persistence/local/LocalDataStore.java", "diffHunk": "@@ -49,13 +48,13 @@\n public interface LocalDataStore {\n \n   /** Load projects stored in local database. */\n-  Single<List<Project>> getProjects();\n+  Single<ImmutableList<Project>> getProjects();", "originalCommit": "14749960635afa4a4e6dd97065a3999ef2f1dd9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY0Njc5Mg==", "url": "https://github.com/google/ground-android/pull/425#discussion_r407646792", "bodyText": "I even found a bug while testing.", "author": "shobhitagarwal1612", "createdAt": "2020-04-13T18:45:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5MTI2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5NjI0NA==", "url": "https://github.com/google/ground-android/pull/425#discussion_r407596244", "bodyText": "\"all saved\" -> \"all queued, failed, and completed\"", "author": "gino-m", "createdAt": "2020-04-13T17:14:48Z", "path": "gnd/src/main/java/com/google/android/gnd/persistence/local/LocalDataStore.java", "diffHunk": "@@ -145,4 +144,7 @@\n    * the area into the local data store.\n    */\n   Completable insertOrUpdateOfflineArea(OfflineArea area);\n+\n+  /** Returns all saved offline areas from the local data store. */", "originalCommit": "14749960635afa4a4e6dd97065a3999ef2f1dd9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5ODQxNA==", "url": "https://github.com/google/ground-android/pull/425#discussion_r407598414", "bodyText": "Good catch.", "author": "gino-m", "createdAt": "2020-04-13T17:18:52Z", "path": "gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/OfflineAreaDao.java", "diffHunk": "@@ -19,15 +19,15 @@\n import androidx.room.Dao;\n import androidx.room.Query;\n import com.google.android.gnd.persistence.local.room.entity.OfflineAreaEntity;\n-import io.reactivex.Flowable;\n import io.reactivex.Maybe;\n+import io.reactivex.Single;\n import java.util.List;\n \n /** Provides read/write operations for writing {@link OfflineAreaEntity} to the local db. */\n @Dao\n public interface OfflineAreaDao extends BaseDao<OfflineAreaEntity> {\n   @Query(\"SELECT * FROM offline_area\")\n-  Flowable<List<OfflineAreaEntity>> findAll();\n+  Single<List<OfflineAreaEntity>> findAll();", "originalCommit": "14749960635afa4a4e6dd97065a3999ef2f1dd9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5ODc3Mg==", "url": "https://github.com/google/ground-android/pull/425#discussion_r407598772", "bodyText": "Why return a Flowable here? Do we want to subscribe to future tile changes?", "author": "gino-m", "createdAt": "2020-04-13T17:19:29Z", "path": "gnd/src/main/java/com/google/android/gnd/persistence/local/room/dao/TileDao.java", "diffHunk": "@@ -27,7 +28,7 @@\n public interface TileDao extends BaseDao<TileEntity> {\n \n   @Query(\"SELECT * FROM tile\")\n-  Single<List<TileEntity>> findAll();\n+  Flowable<List<TileEntity>> findAll();", "originalCommit": "14749960635afa4a4e6dd97065a3999ef2f1dd9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYzMDYzNQ==", "url": "https://github.com/google/ground-android/pull/425#discussion_r407630635", "bodyText": "The code in LocalDataStore was converting the single to flowable. So why not do it directly?\nThe corresponding method in LocalDataStore was unused. But I think @scolsen would be needing that later since he added them. I've added tests for the same to verify that it indeed works as it says.", "author": "shobhitagarwal1612", "createdAt": "2020-04-13T18:16:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5ODc3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI0OTQ2Mw==", "url": "https://github.com/google/ground-android/pull/425#discussion_r408249463", "bodyText": "The semantics of Single and Flowable are different in Room generated classes; Single returns a result and completes, whereas Flowable continues emitting values on each change. We convert to Flowable in upstream code because we're merging with a hot observable that doesn't complete as soon as a value is emitted. Here we expect the stream to terminate after the first item is emitted, so Single is appropriate here.", "author": "gino-m", "createdAt": "2020-04-14T15:56:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5ODc3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg2NzYzMQ==", "url": "https://github.com/google/ground-android/pull/425#discussion_r408867631", "bodyText": "The semantics of Single and Flowable are different in Room generated classes; Single returns a result and completes, whereas Flowable continues emitting values on each change. We convert to Flowable in upstream code because we're merging with a hot observable that doesn't complete as soon as a value is emitted. Here we expect the stream to terminate after the first item is emitted, so Single is appropriate here.\n\n@gino-m Reverting back Flowable to Single fails the test testGetTilesOnceAndStream. Can you or @scolsen please take a look at the test to verify that I am testing the correct behavior or not?", "author": "shobhitagarwal1612", "createdAt": "2020-04-15T14:03:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5ODc3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYwMDM4Mg==", "url": "https://github.com/google/ground-android/pull/425#discussion_r407600382", "bodyText": "Neat.. could you please add a class description that explains what this does in practice?", "author": "gino-m", "createdAt": "2020-04-13T17:22:18Z", "path": "gnd/src/test/java/com/google/android/gnd/TestScheduler.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd;\n+\n+import com.google.android.gnd.rx.Schedulers;\n+import io.reactivex.Scheduler;\n+import javax.inject.Inject;\n+\n+public class TestScheduler implements Schedulers {\n+\n+  @Inject\n+  TestScheduler() {}\n+\n+  @Override\n+  public Scheduler io() {\n+    return io.reactivex.schedulers.Schedulers.trampoline();", "originalCommit": "14749960635afa4a4e6dd97065a3999ef2f1dd9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYzMTAwMQ==", "url": "https://github.com/google/ground-android/pull/425#discussion_r407631001", "bodyText": "Sure", "author": "shobhitagarwal1612", "createdAt": "2020-04-13T18:17:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYwMDM4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYwMjA1MA==", "url": "https://github.com/google/ground-android/pull/425#discussion_r407602050", "bodyText": "Please make helpers static, include word \"Test\" so it's clear these don't just create a new empty instance (e.g. createTestUser()).", "author": "gino-m", "createdAt": "2020-04-13T17:25:18Z", "path": "gnd/src/test/java/com/google/android/gnd/persistence/local/LocalDataStoreTest.java", "diffHunk": "@@ -0,0 +1,565 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.local;\n+\n+import static org.hamcrest.Matchers.samePropertyValuesAs;\n+\n+import androidx.arch.core.executor.testing.InstantTaskExecutorRule;\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.TestApplication;\n+import com.google.android.gnd.inject.DaggerTestComponent;\n+import com.google.android.gnd.model.Mutation;\n+import com.google.android.gnd.model.Project;\n+import com.google.android.gnd.model.User;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.model.basemap.tile.Tile.State;\n+import com.google.android.gnd.model.feature.Feature;\n+import com.google.android.gnd.model.feature.FeatureMutation;\n+import com.google.android.gnd.model.feature.Point;\n+import com.google.android.gnd.model.form.Element;\n+import com.google.android.gnd.model.form.Field;\n+import com.google.android.gnd.model.form.Field.Type;\n+import com.google.android.gnd.model.form.Form;\n+import com.google.android.gnd.model.form.MultipleChoice;\n+import com.google.android.gnd.model.form.MultipleChoice.Builder;\n+import com.google.android.gnd.model.form.MultipleChoice.Cardinality;\n+import com.google.android.gnd.model.form.Option;\n+import com.google.android.gnd.model.layer.Layer;\n+import com.google.android.gnd.model.layer.Style;\n+import com.google.android.gnd.model.observation.Observation;\n+import com.google.android.gnd.model.observation.ObservationMutation;\n+import com.google.android.gnd.model.observation.ResponseDelta;\n+import com.google.android.gnd.model.observation.ResponseMap;\n+import com.google.android.gnd.model.observation.TextResponse;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import io.reactivex.subscribers.TestSubscriber;\n+import java.util.AbstractCollection;\n+import java.util.Date;\n+import java8.util.Optional;\n+import javax.inject.Inject;\n+import org.hamcrest.MatcherAssert;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(application = TestApplication.class)\n+public class LocalDataStoreTest {\n+\n+  // This rule makes sure that Room executes all the database operations instantly.\n+  @Rule public InstantTaskExecutorRule instantTaskExecutorRule = new InstantTaskExecutorRule();\n+\n+  @Inject LocalDataStore localDataStore;\n+\n+  @Before\n+  public void setUp() {\n+    DaggerTestComponent.create().inject(this);\n+  }\n+\n+  private User createUser() {", "originalCommit": "e552b174758c6a83d48d1f5f87fcb7f6e326750b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e2dddee373177af62f8af3dcf6dd7d2be6f13eb5", "url": "https://github.com/google/ground-android/commit/e2dddee373177af62f8af3dcf6dd7d2be6f13eb5", "message": "Add test for mergeObservation", "committedDate": "2020-04-13T17:51:33Z", "type": "commit"}, {"oid": "48e2a92da77a9c78d69447f600d7b5fb2b02df40", "url": "https://github.com/google/ground-android/commit/48e2a92da77a9c78d69447f600d7b5fb2b02df40", "message": "Use simple test id", "committedDate": "2020-04-13T18:07:00Z", "type": "commit"}, {"oid": "89dd29f3d5c67921b69e7159696bf4bfdc3d28d8", "url": "https://github.com/google/ground-android/commit/89dd29f3d5c67921b69e7159696bf4bfdc3d28d8", "message": "Update comment", "committedDate": "2020-04-13T18:46:25Z", "type": "commit"}, {"oid": "80804884422c3443753a13bef00ff03500d162f9", "url": "https://github.com/google/ground-android/commit/80804884422c3443753a13bef00ff03500d162f9", "message": "Add doc comments for TestScheduler", "committedDate": "2020-04-13T18:50:59Z", "type": "commit"}, {"oid": "7f19366bc11942167e22c82666e751169de42eb8", "url": "https://github.com/google/ground-android/commit/7f19366bc11942167e22c82666e751169de42eb8", "message": "Declare methods as static and append Test to their name", "committedDate": "2020-04-13T18:53:03Z", "type": "commit"}, {"oid": "4d067567ac55be392063ab19c3d46df237e0e657", "url": "https://github.com/google/ground-android/commit/4d067567ac55be392063ab19c3d46df237e0e657", "message": "Merge branch 'master' into testing", "committedDate": "2020-04-14T16:29:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2MjIxMg==", "url": "https://github.com/google/ground-android/pull/425#discussion_r408262212", "bodyText": "In the InMemoryCacheTest we kept constant fake objects as static members, FAKE_... Should we do the same here for clarity and consistency?", "author": "gino-m", "createdAt": "2020-04-14T16:14:06Z", "path": "gnd/src/test/java/com/google/android/gnd/persistence/local/LocalDataStoreTest.java", "diffHunk": "@@ -0,0 +1,611 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.local;\n+\n+import static org.hamcrest.Matchers.samePropertyValuesAs;\n+\n+import androidx.arch.core.executor.testing.InstantTaskExecutorRule;\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.TestApplication;\n+import com.google.android.gnd.inject.DaggerTestComponent;\n+import com.google.android.gnd.model.Mutation;\n+import com.google.android.gnd.model.Project;\n+import com.google.android.gnd.model.User;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.model.basemap.tile.Tile.State;\n+import com.google.android.gnd.model.feature.Feature;\n+import com.google.android.gnd.model.feature.FeatureMutation;\n+import com.google.android.gnd.model.feature.Point;\n+import com.google.android.gnd.model.form.Element;\n+import com.google.android.gnd.model.form.Field;\n+import com.google.android.gnd.model.form.Field.Type;\n+import com.google.android.gnd.model.form.Form;\n+import com.google.android.gnd.model.form.MultipleChoice;\n+import com.google.android.gnd.model.form.MultipleChoice.Builder;\n+import com.google.android.gnd.model.form.MultipleChoice.Cardinality;\n+import com.google.android.gnd.model.form.Option;\n+import com.google.android.gnd.model.layer.Layer;\n+import com.google.android.gnd.model.layer.Style;\n+import com.google.android.gnd.model.observation.Observation;\n+import com.google.android.gnd.model.observation.ObservationMutation;\n+import com.google.android.gnd.model.observation.ResponseDelta;\n+import com.google.android.gnd.model.observation.ResponseMap;\n+import com.google.android.gnd.model.observation.TextResponse;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import io.reactivex.subscribers.TestSubscriber;\n+import java.util.AbstractCollection;\n+import java.util.Date;\n+import java8.util.Optional;\n+import javax.inject.Inject;\n+import org.hamcrest.MatcherAssert;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(application = TestApplication.class)\n+public class LocalDataStoreTest {\n+\n+  // This rule makes sure that Room executes all the database operations instantly.\n+  @Rule public InstantTaskExecutorRule instantTaskExecutorRule = new InstantTaskExecutorRule();\n+\n+  @Inject LocalDataStore localDataStore;\n+\n+  private static User createTestUser() {\n+    return User.builder()\n+        .setId(\"test_user_id\")\n+        .setEmail(\"test@gmail.com\")\n+        .setDisplayName(\"test user\")\n+        .build();\n+  }\n+\n+  private static Project createTestProject() {\n+    Builder multipleChoiceBuilder =\n+        MultipleChoice.newBuilder().setCardinality(Cardinality.SELECT_ONE);\n+    multipleChoiceBuilder\n+        .optionsBuilder()\n+        .add(Option.newBuilder().setCode(\"a\").setLabel(\"Name\").build())\n+        .add(Option.newBuilder().setCode(\"b\").setLabel(\"Age\").build());\n+\n+    Field field =\n+        Field.newBuilder()\n+            .setId(\"field id\")\n+            .setLabel(\"field label\")\n+            .setRequired(false)\n+            .setType(Type.MULTIPLE_CHOICE)\n+            .setMultipleChoice(multipleChoiceBuilder.build())\n+            .build();\n+\n+    Element element = Element.ofField(field);\n+\n+    Form form =\n+        Form.newBuilder()\n+            .setId(\"form id\")\n+            .setElements(ImmutableList.<Element>builder().add(element).build())\n+            .build();\n+\n+    Layer layer =\n+        Layer.newBuilder()\n+            .setId(\"layer id\")\n+            .setItemLabel(\"item label\")\n+            .setListHeading(\"heading title\")\n+            .setDefaultStyle(Style.builder().setColor(\"000\").build())\n+            .setForm(form)\n+            .build();\n+\n+    Project.Builder builder =\n+        Project.newBuilder()\n+            .setId(\"project id\")\n+            .setTitle(\"project 1\")\n+            .setDescription(\"foo description\");", "originalCommit": "7f19366bc11942167e22c82666e751169de42eb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg1NzkzNA==", "url": "https://github.com/google/ground-android/pull/425#discussion_r408857934", "bodyText": "Thanks. Done", "author": "shobhitagarwal1612", "createdAt": "2020-04-15T13:51:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2MjIxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2NDgyNg==", "url": "https://github.com/google/ground-android/pull/425#discussion_r408264826", "bodyText": "Can we use ImmutableList.of() here instead?\nI didn't realize RxJava had test helpers and assertions built in.", "author": "gino-m", "createdAt": "2020-04-14T16:17:51Z", "path": "gnd/src/test/java/com/google/android/gnd/persistence/local/LocalDataStoreTest.java", "diffHunk": "@@ -0,0 +1,611 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.local;\n+\n+import static org.hamcrest.Matchers.samePropertyValuesAs;\n+\n+import androidx.arch.core.executor.testing.InstantTaskExecutorRule;\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.TestApplication;\n+import com.google.android.gnd.inject.DaggerTestComponent;\n+import com.google.android.gnd.model.Mutation;\n+import com.google.android.gnd.model.Project;\n+import com.google.android.gnd.model.User;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.model.basemap.tile.Tile.State;\n+import com.google.android.gnd.model.feature.Feature;\n+import com.google.android.gnd.model.feature.FeatureMutation;\n+import com.google.android.gnd.model.feature.Point;\n+import com.google.android.gnd.model.form.Element;\n+import com.google.android.gnd.model.form.Field;\n+import com.google.android.gnd.model.form.Field.Type;\n+import com.google.android.gnd.model.form.Form;\n+import com.google.android.gnd.model.form.MultipleChoice;\n+import com.google.android.gnd.model.form.MultipleChoice.Builder;\n+import com.google.android.gnd.model.form.MultipleChoice.Cardinality;\n+import com.google.android.gnd.model.form.Option;\n+import com.google.android.gnd.model.layer.Layer;\n+import com.google.android.gnd.model.layer.Style;\n+import com.google.android.gnd.model.observation.Observation;\n+import com.google.android.gnd.model.observation.ObservationMutation;\n+import com.google.android.gnd.model.observation.ResponseDelta;\n+import com.google.android.gnd.model.observation.ResponseMap;\n+import com.google.android.gnd.model.observation.TextResponse;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import io.reactivex.subscribers.TestSubscriber;\n+import java.util.AbstractCollection;\n+import java.util.Date;\n+import java8.util.Optional;\n+import javax.inject.Inject;\n+import org.hamcrest.MatcherAssert;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(application = TestApplication.class)\n+public class LocalDataStoreTest {\n+\n+  // This rule makes sure that Room executes all the database operations instantly.\n+  @Rule public InstantTaskExecutorRule instantTaskExecutorRule = new InstantTaskExecutorRule();\n+\n+  @Inject LocalDataStore localDataStore;\n+\n+  private static User createTestUser() {\n+    return User.builder()\n+        .setId(\"test_user_id\")\n+        .setEmail(\"test@gmail.com\")\n+        .setDisplayName(\"test user\")\n+        .build();\n+  }\n+\n+  private static Project createTestProject() {\n+    Builder multipleChoiceBuilder =\n+        MultipleChoice.newBuilder().setCardinality(Cardinality.SELECT_ONE);\n+    multipleChoiceBuilder\n+        .optionsBuilder()\n+        .add(Option.newBuilder().setCode(\"a\").setLabel(\"Name\").build())\n+        .add(Option.newBuilder().setCode(\"b\").setLabel(\"Age\").build());\n+\n+    Field field =\n+        Field.newBuilder()\n+            .setId(\"field id\")\n+            .setLabel(\"field label\")\n+            .setRequired(false)\n+            .setType(Type.MULTIPLE_CHOICE)\n+            .setMultipleChoice(multipleChoiceBuilder.build())\n+            .build();\n+\n+    Element element = Element.ofField(field);\n+\n+    Form form =\n+        Form.newBuilder()\n+            .setId(\"form id\")\n+            .setElements(ImmutableList.<Element>builder().add(element).build())\n+            .build();\n+\n+    Layer layer =\n+        Layer.newBuilder()\n+            .setId(\"layer id\")\n+            .setItemLabel(\"item label\")\n+            .setListHeading(\"heading title\")\n+            .setDefaultStyle(Style.builder().setColor(\"000\").build())\n+            .setForm(form)\n+            .build();\n+\n+    Project.Builder builder =\n+        Project.newBuilder()\n+            .setId(\"project id\")\n+            .setTitle(\"project 1\")\n+            .setDescription(\"foo description\");\n+    builder.putLayer(layer.getId(), layer);\n+    return builder.build();\n+  }\n+\n+  private static FeatureMutation createTestFeatureMutation(\n+      String userId, String projectId, String layerId) {\n+    return FeatureMutation.builder()\n+        .setId(1L)\n+        .setType(Mutation.Type.CREATE)\n+        .setUserId(userId)\n+        .setProjectId(projectId)\n+        .setFeatureId(\"feature id\")\n+        .setLayerId(layerId)\n+        .setNewLocation(\n+            Optional.ofNullable(Point.newBuilder().setLatitude(110.0).setLongitude(-23.1).build()))\n+        .setClientTimestamp(new Date())\n+        .build();\n+  }\n+\n+  private static ObservationMutation createTestObservationMutation(\n+      String projectId, String featureId, String layerId, String formId, String userId) {\n+    return ObservationMutation.builder()\n+        .setType(Mutation.Type.CREATE)\n+        .setProjectId(projectId)\n+        .setFeatureId(featureId)\n+        .setLayerId(layerId)\n+        .setObservationId(\"observation id\")\n+        .setFormId(formId)\n+        .setResponseDeltas(\n+            ImmutableList.<ResponseDelta>builder()\n+                .add(\n+                    ResponseDelta.builder()\n+                        .setFieldId(\"field id\")\n+                        .setNewResponse(TextResponse.fromString(\"response for field id\"))\n+                        .build())\n+                .build())\n+        .setClientTimestamp(new Date())\n+        .setUserId(userId)\n+        .build();\n+  }\n+\n+  @Before\n+  public void setUp() {\n+    DaggerTestComponent.create().inject(this);\n+  }\n+\n+  @Test\n+  public void testGetProjects() {\n+    Project project1 =\n+        Project.newBuilder()\n+            .setId(\"id 1\")\n+            .setTitle(\"project 1\")\n+            .setDescription(\"foo description\")\n+            .build();\n+    Project project2 =\n+        Project.newBuilder()\n+            .setId(\"id 2\")\n+            .setTitle(\"project 2\")\n+            .setDescription(\"foo description 2\")\n+            .build();\n+    localDataStore.insertOrUpdateProject(project1).test().assertComplete();\n+    localDataStore.insertOrUpdateProject(project2).test().assertComplete();\n+    localDataStore\n+        .getProjects()\n+        .test()\n+        .assertValue(ImmutableList.<Project>builder().add(project1, project2).build());", "originalCommit": "7f19366bc11942167e22c82666e751169de42eb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgzMTYyNA==", "url": "https://github.com/google/ground-android/pull/425#discussion_r408831624", "bodyText": "Thanks. I didn't realize that this is also available. Done", "author": "shobhitagarwal1612", "createdAt": "2020-04-15T13:15:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2NDgyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2OTAwMQ==", "url": "https://github.com/google/ground-android/pull/425#discussion_r408269001", "bodyText": "Can we use Google Truth and compare the entire object here and throughout?\nassertThat(savedMutations).containsExactly(expectedValue)\nAlso, consider creating expected mutation as a constant to simplify these tests.\nRx assertValue is still fine for simple cases, or we can always use Truth, no opinion there.", "author": "gino-m", "createdAt": "2020-04-14T16:23:56Z", "path": "gnd/src/test/java/com/google/android/gnd/persistence/local/LocalDataStoreTest.java", "diffHunk": "@@ -0,0 +1,611 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.local;\n+\n+import static org.hamcrest.Matchers.samePropertyValuesAs;\n+\n+import androidx.arch.core.executor.testing.InstantTaskExecutorRule;\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.TestApplication;\n+import com.google.android.gnd.inject.DaggerTestComponent;\n+import com.google.android.gnd.model.Mutation;\n+import com.google.android.gnd.model.Project;\n+import com.google.android.gnd.model.User;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.model.basemap.tile.Tile.State;\n+import com.google.android.gnd.model.feature.Feature;\n+import com.google.android.gnd.model.feature.FeatureMutation;\n+import com.google.android.gnd.model.feature.Point;\n+import com.google.android.gnd.model.form.Element;\n+import com.google.android.gnd.model.form.Field;\n+import com.google.android.gnd.model.form.Field.Type;\n+import com.google.android.gnd.model.form.Form;\n+import com.google.android.gnd.model.form.MultipleChoice;\n+import com.google.android.gnd.model.form.MultipleChoice.Builder;\n+import com.google.android.gnd.model.form.MultipleChoice.Cardinality;\n+import com.google.android.gnd.model.form.Option;\n+import com.google.android.gnd.model.layer.Layer;\n+import com.google.android.gnd.model.layer.Style;\n+import com.google.android.gnd.model.observation.Observation;\n+import com.google.android.gnd.model.observation.ObservationMutation;\n+import com.google.android.gnd.model.observation.ResponseDelta;\n+import com.google.android.gnd.model.observation.ResponseMap;\n+import com.google.android.gnd.model.observation.TextResponse;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import io.reactivex.subscribers.TestSubscriber;\n+import java.util.AbstractCollection;\n+import java.util.Date;\n+import java8.util.Optional;\n+import javax.inject.Inject;\n+import org.hamcrest.MatcherAssert;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(application = TestApplication.class)\n+public class LocalDataStoreTest {\n+\n+  // This rule makes sure that Room executes all the database operations instantly.\n+  @Rule public InstantTaskExecutorRule instantTaskExecutorRule = new InstantTaskExecutorRule();\n+\n+  @Inject LocalDataStore localDataStore;\n+\n+  private static User createTestUser() {\n+    return User.builder()\n+        .setId(\"test_user_id\")\n+        .setEmail(\"test@gmail.com\")\n+        .setDisplayName(\"test user\")\n+        .build();\n+  }\n+\n+  private static Project createTestProject() {\n+    Builder multipleChoiceBuilder =\n+        MultipleChoice.newBuilder().setCardinality(Cardinality.SELECT_ONE);\n+    multipleChoiceBuilder\n+        .optionsBuilder()\n+        .add(Option.newBuilder().setCode(\"a\").setLabel(\"Name\").build())\n+        .add(Option.newBuilder().setCode(\"b\").setLabel(\"Age\").build());\n+\n+    Field field =\n+        Field.newBuilder()\n+            .setId(\"field id\")\n+            .setLabel(\"field label\")\n+            .setRequired(false)\n+            .setType(Type.MULTIPLE_CHOICE)\n+            .setMultipleChoice(multipleChoiceBuilder.build())\n+            .build();\n+\n+    Element element = Element.ofField(field);\n+\n+    Form form =\n+        Form.newBuilder()\n+            .setId(\"form id\")\n+            .setElements(ImmutableList.<Element>builder().add(element).build())\n+            .build();\n+\n+    Layer layer =\n+        Layer.newBuilder()\n+            .setId(\"layer id\")\n+            .setItemLabel(\"item label\")\n+            .setListHeading(\"heading title\")\n+            .setDefaultStyle(Style.builder().setColor(\"000\").build())\n+            .setForm(form)\n+            .build();\n+\n+    Project.Builder builder =\n+        Project.newBuilder()\n+            .setId(\"project id\")\n+            .setTitle(\"project 1\")\n+            .setDescription(\"foo description\");\n+    builder.putLayer(layer.getId(), layer);\n+    return builder.build();\n+  }\n+\n+  private static FeatureMutation createTestFeatureMutation(\n+      String userId, String projectId, String layerId) {\n+    return FeatureMutation.builder()\n+        .setId(1L)\n+        .setType(Mutation.Type.CREATE)\n+        .setUserId(userId)\n+        .setProjectId(projectId)\n+        .setFeatureId(\"feature id\")\n+        .setLayerId(layerId)\n+        .setNewLocation(\n+            Optional.ofNullable(Point.newBuilder().setLatitude(110.0).setLongitude(-23.1).build()))\n+        .setClientTimestamp(new Date())\n+        .build();\n+  }\n+\n+  private static ObservationMutation createTestObservationMutation(\n+      String projectId, String featureId, String layerId, String formId, String userId) {\n+    return ObservationMutation.builder()\n+        .setType(Mutation.Type.CREATE)\n+        .setProjectId(projectId)\n+        .setFeatureId(featureId)\n+        .setLayerId(layerId)\n+        .setObservationId(\"observation id\")\n+        .setFormId(formId)\n+        .setResponseDeltas(\n+            ImmutableList.<ResponseDelta>builder()\n+                .add(\n+                    ResponseDelta.builder()\n+                        .setFieldId(\"field id\")\n+                        .setNewResponse(TextResponse.fromString(\"response for field id\"))\n+                        .build())\n+                .build())\n+        .setClientTimestamp(new Date())\n+        .setUserId(userId)\n+        .build();\n+  }\n+\n+  @Before\n+  public void setUp() {\n+    DaggerTestComponent.create().inject(this);\n+  }\n+\n+  @Test\n+  public void testGetProjects() {\n+    Project project1 =\n+        Project.newBuilder()\n+            .setId(\"id 1\")\n+            .setTitle(\"project 1\")\n+            .setDescription(\"foo description\")\n+            .build();\n+    Project project2 =\n+        Project.newBuilder()\n+            .setId(\"id 2\")\n+            .setTitle(\"project 2\")\n+            .setDescription(\"foo description 2\")\n+            .build();\n+    localDataStore.insertOrUpdateProject(project1).test().assertComplete();\n+    localDataStore.insertOrUpdateProject(project2).test().assertComplete();\n+    localDataStore\n+        .getProjects()\n+        .test()\n+        .assertValue(ImmutableList.<Project>builder().add(project1, project2).build());\n+  }\n+\n+  @Test\n+  public void testGetProjectById() {\n+    Project project = createTestProject();\n+    localDataStore.insertOrUpdateProject(project).test().assertComplete();\n+    localDataStore.getProjectById(project.getId()).test().assertValue(project);\n+  }\n+\n+  @Test\n+  public void testDeleteProject() {\n+    Project project = createTestProject();\n+    localDataStore.insertOrUpdateProject(project).test().assertComplete();\n+    localDataStore.deleteProject(project).test().assertComplete();\n+    localDataStore.getProjects().test().assertValue(AbstractCollection::isEmpty);\n+  }\n+\n+  @Test\n+  public void testGetUser() {\n+    User user = createTestUser();\n+    localDataStore.insertOrUpdateUser(user).test().assertComplete();\n+    localDataStore.getUser(user.getId()).test().assertValue(user);\n+  }\n+\n+  @Test\n+  public void testApplyAndEnqueue_featureMutation() {\n+    User user = createTestUser();\n+    localDataStore.insertOrUpdateUser(user).test().assertComplete();\n+\n+    Project project = createTestProject();\n+    localDataStore.insertOrUpdateProject(project).test().assertComplete();\n+\n+    Layer layer = project.getLayers().get(0);\n+    FeatureMutation mutation =\n+        createTestFeatureMutation(user.getId(), project.getId(), layer.getId());\n+    localDataStore.applyAndEnqueue(mutation).test().assertComplete();\n+\n+    ImmutableList<Mutation> savedMutations =\n+        localDataStore.getPendingMutations(mutation.getFeatureId()).blockingGet();\n+    Assert.assertEquals(1, savedMutations.size());", "originalCommit": "7f19366bc11942167e22c82666e751169de42eb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyODUxMA==", "url": "https://github.com/google/ground-android/pull/425#discussion_r408828510", "bodyText": "Thanks. Truth assertions are also very easy to read.", "author": "shobhitagarwal1612", "createdAt": "2020-04-15T13:10:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2OTAwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3MDg4MA==", "url": "https://github.com/google/ground-android/pull/425#discussion_r408270880", "bodyText": "I'm not sure we want to assert our precondition setup - don't we already have coverage for these code paths in other tests?", "author": "gino-m", "createdAt": "2020-04-14T16:26:41Z", "path": "gnd/src/test/java/com/google/android/gnd/persistence/local/LocalDataStoreTest.java", "diffHunk": "@@ -0,0 +1,611 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.local;\n+\n+import static org.hamcrest.Matchers.samePropertyValuesAs;\n+\n+import androidx.arch.core.executor.testing.InstantTaskExecutorRule;\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.TestApplication;\n+import com.google.android.gnd.inject.DaggerTestComponent;\n+import com.google.android.gnd.model.Mutation;\n+import com.google.android.gnd.model.Project;\n+import com.google.android.gnd.model.User;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.model.basemap.tile.Tile.State;\n+import com.google.android.gnd.model.feature.Feature;\n+import com.google.android.gnd.model.feature.FeatureMutation;\n+import com.google.android.gnd.model.feature.Point;\n+import com.google.android.gnd.model.form.Element;\n+import com.google.android.gnd.model.form.Field;\n+import com.google.android.gnd.model.form.Field.Type;\n+import com.google.android.gnd.model.form.Form;\n+import com.google.android.gnd.model.form.MultipleChoice;\n+import com.google.android.gnd.model.form.MultipleChoice.Builder;\n+import com.google.android.gnd.model.form.MultipleChoice.Cardinality;\n+import com.google.android.gnd.model.form.Option;\n+import com.google.android.gnd.model.layer.Layer;\n+import com.google.android.gnd.model.layer.Style;\n+import com.google.android.gnd.model.observation.Observation;\n+import com.google.android.gnd.model.observation.ObservationMutation;\n+import com.google.android.gnd.model.observation.ResponseDelta;\n+import com.google.android.gnd.model.observation.ResponseMap;\n+import com.google.android.gnd.model.observation.TextResponse;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import io.reactivex.subscribers.TestSubscriber;\n+import java.util.AbstractCollection;\n+import java.util.Date;\n+import java8.util.Optional;\n+import javax.inject.Inject;\n+import org.hamcrest.MatcherAssert;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(application = TestApplication.class)\n+public class LocalDataStoreTest {\n+\n+  // This rule makes sure that Room executes all the database operations instantly.\n+  @Rule public InstantTaskExecutorRule instantTaskExecutorRule = new InstantTaskExecutorRule();\n+\n+  @Inject LocalDataStore localDataStore;\n+\n+  private static User createTestUser() {\n+    return User.builder()\n+        .setId(\"test_user_id\")\n+        .setEmail(\"test@gmail.com\")\n+        .setDisplayName(\"test user\")\n+        .build();\n+  }\n+\n+  private static Project createTestProject() {\n+    Builder multipleChoiceBuilder =\n+        MultipleChoice.newBuilder().setCardinality(Cardinality.SELECT_ONE);\n+    multipleChoiceBuilder\n+        .optionsBuilder()\n+        .add(Option.newBuilder().setCode(\"a\").setLabel(\"Name\").build())\n+        .add(Option.newBuilder().setCode(\"b\").setLabel(\"Age\").build());\n+\n+    Field field =\n+        Field.newBuilder()\n+            .setId(\"field id\")\n+            .setLabel(\"field label\")\n+            .setRequired(false)\n+            .setType(Type.MULTIPLE_CHOICE)\n+            .setMultipleChoice(multipleChoiceBuilder.build())\n+            .build();\n+\n+    Element element = Element.ofField(field);\n+\n+    Form form =\n+        Form.newBuilder()\n+            .setId(\"form id\")\n+            .setElements(ImmutableList.<Element>builder().add(element).build())\n+            .build();\n+\n+    Layer layer =\n+        Layer.newBuilder()\n+            .setId(\"layer id\")\n+            .setItemLabel(\"item label\")\n+            .setListHeading(\"heading title\")\n+            .setDefaultStyle(Style.builder().setColor(\"000\").build())\n+            .setForm(form)\n+            .build();\n+\n+    Project.Builder builder =\n+        Project.newBuilder()\n+            .setId(\"project id\")\n+            .setTitle(\"project 1\")\n+            .setDescription(\"foo description\");\n+    builder.putLayer(layer.getId(), layer);\n+    return builder.build();\n+  }\n+\n+  private static FeatureMutation createTestFeatureMutation(\n+      String userId, String projectId, String layerId) {\n+    return FeatureMutation.builder()\n+        .setId(1L)\n+        .setType(Mutation.Type.CREATE)\n+        .setUserId(userId)\n+        .setProjectId(projectId)\n+        .setFeatureId(\"feature id\")\n+        .setLayerId(layerId)\n+        .setNewLocation(\n+            Optional.ofNullable(Point.newBuilder().setLatitude(110.0).setLongitude(-23.1).build()))\n+        .setClientTimestamp(new Date())\n+        .build();\n+  }\n+\n+  private static ObservationMutation createTestObservationMutation(\n+      String projectId, String featureId, String layerId, String formId, String userId) {\n+    return ObservationMutation.builder()\n+        .setType(Mutation.Type.CREATE)\n+        .setProjectId(projectId)\n+        .setFeatureId(featureId)\n+        .setLayerId(layerId)\n+        .setObservationId(\"observation id\")\n+        .setFormId(formId)\n+        .setResponseDeltas(\n+            ImmutableList.<ResponseDelta>builder()\n+                .add(\n+                    ResponseDelta.builder()\n+                        .setFieldId(\"field id\")\n+                        .setNewResponse(TextResponse.fromString(\"response for field id\"))\n+                        .build())\n+                .build())\n+        .setClientTimestamp(new Date())\n+        .setUserId(userId)\n+        .build();\n+  }\n+\n+  @Before\n+  public void setUp() {\n+    DaggerTestComponent.create().inject(this);\n+  }\n+\n+  @Test\n+  public void testGetProjects() {\n+    Project project1 =\n+        Project.newBuilder()\n+            .setId(\"id 1\")\n+            .setTitle(\"project 1\")\n+            .setDescription(\"foo description\")\n+            .build();\n+    Project project2 =\n+        Project.newBuilder()\n+            .setId(\"id 2\")\n+            .setTitle(\"project 2\")\n+            .setDescription(\"foo description 2\")\n+            .build();\n+    localDataStore.insertOrUpdateProject(project1).test().assertComplete();\n+    localDataStore.insertOrUpdateProject(project2).test().assertComplete();\n+    localDataStore\n+        .getProjects()\n+        .test()\n+        .assertValue(ImmutableList.<Project>builder().add(project1, project2).build());\n+  }\n+\n+  @Test\n+  public void testGetProjectById() {\n+    Project project = createTestProject();\n+    localDataStore.insertOrUpdateProject(project).test().assertComplete();\n+    localDataStore.getProjectById(project.getId()).test().assertValue(project);\n+  }\n+\n+  @Test\n+  public void testDeleteProject() {\n+    Project project = createTestProject();\n+    localDataStore.insertOrUpdateProject(project).test().assertComplete();\n+    localDataStore.deleteProject(project).test().assertComplete();\n+    localDataStore.getProjects().test().assertValue(AbstractCollection::isEmpty);\n+  }\n+\n+  @Test\n+  public void testGetUser() {\n+    User user = createTestUser();\n+    localDataStore.insertOrUpdateUser(user).test().assertComplete();\n+    localDataStore.getUser(user.getId()).test().assertValue(user);\n+  }\n+\n+  @Test\n+  public void testApplyAndEnqueue_featureMutation() {\n+    User user = createTestUser();\n+    localDataStore.insertOrUpdateUser(user).test().assertComplete();\n+\n+    Project project = createTestProject();\n+    localDataStore.insertOrUpdateProject(project).test().assertComplete();\n+\n+    Layer layer = project.getLayers().get(0);\n+    FeatureMutation mutation =\n+        createTestFeatureMutation(user.getId(), project.getId(), layer.getId());\n+    localDataStore.applyAndEnqueue(mutation).test().assertComplete();\n+\n+    ImmutableList<Mutation> savedMutations =\n+        localDataStore.getPendingMutations(mutation.getFeatureId()).blockingGet();\n+    Assert.assertEquals(1, savedMutations.size());\n+\n+    // assert that mutation is saved to local database\n+    FeatureMutation savedMutation = (FeatureMutation) savedMutations.get(0);\n+    Assert.assertEquals(mutation.getNewLocation(), savedMutation.getNewLocation());\n+    Assert.assertEquals(mutation.getType(), savedMutation.getType());\n+    Assert.assertEquals(mutation.getUserId(), savedMutation.getUserId());\n+    Assert.assertEquals(mutation.getProjectId(), savedMutation.getProjectId());\n+    Assert.assertEquals(mutation.getFeatureId(), savedMutation.getFeatureId());\n+    Assert.assertEquals(mutation.getLayerId(), savedMutation.getLayerId());\n+    Assert.assertEquals(mutation.getClientTimestamp(), savedMutation.getClientTimestamp());\n+    Assert.assertEquals(0, savedMutation.getRetryCount());\n+    Assert.assertNull(savedMutation.getLastError());\n+\n+    // assert feature is saved to local database\n+    Feature feature = localDataStore.getFeature(project, mutation.getFeatureId()).blockingGet();\n+    Assert.assertEquals(mutation.getFeatureId(), feature.getId());\n+    Assert.assertEquals(project, feature.getProject());\n+    Assert.assertEquals(layer.getItemLabel(), feature.getTitle());\n+    Assert.assertEquals(layer, feature.getLayer());\n+    Assert.assertNull(feature.getCustomId());\n+    Assert.assertNull(feature.getCaption());\n+    Assert.assertEquals(mutation.getNewLocation().get(), feature.getPoint());\n+    Assert.assertEquals(user, feature.getCreated().getUser());\n+    Assert.assertEquals(user, feature.getLastModified().getUser());\n+  }\n+\n+  @Test\n+  public void testGetFeaturesOnceAndStream() {\n+    User user = createTestUser();\n+    localDataStore.insertOrUpdateUser(user).test().assertComplete();", "originalCommit": "7f19366bc11942167e22c82666e751169de42eb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgxOTQ4NA==", "url": "https://github.com/google/ground-android/pull/425#discussion_r408819484", "bodyText": "insertOrUpdateUser needs to be subscribed to create the user. So either test().assertComplete() or blockingAwait() or subscribe(). I thought the cleanest would be to use test()", "author": "shobhitagarwal1612", "createdAt": "2020-04-15T12:56:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3MDg4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg1OTM0Mg==", "url": "https://github.com/google/ground-android/pull/425#discussion_r408859342", "bodyText": "On second thought, we can use subscribe for simplicity and to remove redundancy", "author": "shobhitagarwal1612", "createdAt": "2020-04-15T13:53:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3MDg4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg2NjIzMw==", "url": "https://github.com/google/ground-android/pull/425#discussion_r408866233", "bodyText": "Done", "author": "shobhitagarwal1612", "createdAt": "2020-04-15T14:02:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3MDg4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxNzg1Nw==", "url": "https://github.com/google/ground-android/pull/425#discussion_r408317857", "bodyText": "This test (and ones like it) look they're testing more than one behavior, which is why they're longer . Can we split these into clear preconditions, execute, and postconditions? See previous comments for ways to simplify.", "author": "gino-m", "createdAt": "2020-04-14T17:39:59Z", "path": "gnd/src/test/java/com/google/android/gnd/persistence/local/LocalDataStoreTest.java", "diffHunk": "@@ -0,0 +1,611 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.local;\n+\n+import static org.hamcrest.Matchers.samePropertyValuesAs;\n+\n+import androidx.arch.core.executor.testing.InstantTaskExecutorRule;\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.TestApplication;\n+import com.google.android.gnd.inject.DaggerTestComponent;\n+import com.google.android.gnd.model.Mutation;\n+import com.google.android.gnd.model.Project;\n+import com.google.android.gnd.model.User;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.model.basemap.tile.Tile.State;\n+import com.google.android.gnd.model.feature.Feature;\n+import com.google.android.gnd.model.feature.FeatureMutation;\n+import com.google.android.gnd.model.feature.Point;\n+import com.google.android.gnd.model.form.Element;\n+import com.google.android.gnd.model.form.Field;\n+import com.google.android.gnd.model.form.Field.Type;\n+import com.google.android.gnd.model.form.Form;\n+import com.google.android.gnd.model.form.MultipleChoice;\n+import com.google.android.gnd.model.form.MultipleChoice.Builder;\n+import com.google.android.gnd.model.form.MultipleChoice.Cardinality;\n+import com.google.android.gnd.model.form.Option;\n+import com.google.android.gnd.model.layer.Layer;\n+import com.google.android.gnd.model.layer.Style;\n+import com.google.android.gnd.model.observation.Observation;\n+import com.google.android.gnd.model.observation.ObservationMutation;\n+import com.google.android.gnd.model.observation.ResponseDelta;\n+import com.google.android.gnd.model.observation.ResponseMap;\n+import com.google.android.gnd.model.observation.TextResponse;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import io.reactivex.subscribers.TestSubscriber;\n+import java.util.AbstractCollection;\n+import java.util.Date;\n+import java8.util.Optional;\n+import javax.inject.Inject;\n+import org.hamcrest.MatcherAssert;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(application = TestApplication.class)\n+public class LocalDataStoreTest {\n+\n+  // This rule makes sure that Room executes all the database operations instantly.\n+  @Rule public InstantTaskExecutorRule instantTaskExecutorRule = new InstantTaskExecutorRule();\n+\n+  @Inject LocalDataStore localDataStore;\n+\n+  private static User createTestUser() {\n+    return User.builder()\n+        .setId(\"test_user_id\")\n+        .setEmail(\"test@gmail.com\")\n+        .setDisplayName(\"test user\")\n+        .build();\n+  }\n+\n+  private static Project createTestProject() {\n+    Builder multipleChoiceBuilder =\n+        MultipleChoice.newBuilder().setCardinality(Cardinality.SELECT_ONE);\n+    multipleChoiceBuilder\n+        .optionsBuilder()\n+        .add(Option.newBuilder().setCode(\"a\").setLabel(\"Name\").build())\n+        .add(Option.newBuilder().setCode(\"b\").setLabel(\"Age\").build());\n+\n+    Field field =\n+        Field.newBuilder()\n+            .setId(\"field id\")\n+            .setLabel(\"field label\")\n+            .setRequired(false)\n+            .setType(Type.MULTIPLE_CHOICE)\n+            .setMultipleChoice(multipleChoiceBuilder.build())\n+            .build();\n+\n+    Element element = Element.ofField(field);\n+\n+    Form form =\n+        Form.newBuilder()\n+            .setId(\"form id\")\n+            .setElements(ImmutableList.<Element>builder().add(element).build())\n+            .build();\n+\n+    Layer layer =\n+        Layer.newBuilder()\n+            .setId(\"layer id\")\n+            .setItemLabel(\"item label\")\n+            .setListHeading(\"heading title\")\n+            .setDefaultStyle(Style.builder().setColor(\"000\").build())\n+            .setForm(form)\n+            .build();\n+\n+    Project.Builder builder =\n+        Project.newBuilder()\n+            .setId(\"project id\")\n+            .setTitle(\"project 1\")\n+            .setDescription(\"foo description\");\n+    builder.putLayer(layer.getId(), layer);\n+    return builder.build();\n+  }\n+\n+  private static FeatureMutation createTestFeatureMutation(\n+      String userId, String projectId, String layerId) {\n+    return FeatureMutation.builder()\n+        .setId(1L)\n+        .setType(Mutation.Type.CREATE)\n+        .setUserId(userId)\n+        .setProjectId(projectId)\n+        .setFeatureId(\"feature id\")\n+        .setLayerId(layerId)\n+        .setNewLocation(\n+            Optional.ofNullable(Point.newBuilder().setLatitude(110.0).setLongitude(-23.1).build()))\n+        .setClientTimestamp(new Date())\n+        .build();\n+  }\n+\n+  private static ObservationMutation createTestObservationMutation(\n+      String projectId, String featureId, String layerId, String formId, String userId) {\n+    return ObservationMutation.builder()\n+        .setType(Mutation.Type.CREATE)\n+        .setProjectId(projectId)\n+        .setFeatureId(featureId)\n+        .setLayerId(layerId)\n+        .setObservationId(\"observation id\")\n+        .setFormId(formId)\n+        .setResponseDeltas(\n+            ImmutableList.<ResponseDelta>builder()\n+                .add(\n+                    ResponseDelta.builder()\n+                        .setFieldId(\"field id\")\n+                        .setNewResponse(TextResponse.fromString(\"response for field id\"))\n+                        .build())\n+                .build())\n+        .setClientTimestamp(new Date())\n+        .setUserId(userId)\n+        .build();\n+  }\n+\n+  @Before\n+  public void setUp() {\n+    DaggerTestComponent.create().inject(this);\n+  }\n+\n+  @Test\n+  public void testGetProjects() {\n+    Project project1 =\n+        Project.newBuilder()\n+            .setId(\"id 1\")\n+            .setTitle(\"project 1\")\n+            .setDescription(\"foo description\")\n+            .build();\n+    Project project2 =\n+        Project.newBuilder()\n+            .setId(\"id 2\")\n+            .setTitle(\"project 2\")\n+            .setDescription(\"foo description 2\")\n+            .build();\n+    localDataStore.insertOrUpdateProject(project1).test().assertComplete();\n+    localDataStore.insertOrUpdateProject(project2).test().assertComplete();\n+    localDataStore\n+        .getProjects()\n+        .test()\n+        .assertValue(ImmutableList.<Project>builder().add(project1, project2).build());\n+  }\n+\n+  @Test\n+  public void testGetProjectById() {\n+    Project project = createTestProject();\n+    localDataStore.insertOrUpdateProject(project).test().assertComplete();\n+    localDataStore.getProjectById(project.getId()).test().assertValue(project);\n+  }\n+\n+  @Test\n+  public void testDeleteProject() {\n+    Project project = createTestProject();\n+    localDataStore.insertOrUpdateProject(project).test().assertComplete();\n+    localDataStore.deleteProject(project).test().assertComplete();\n+    localDataStore.getProjects().test().assertValue(AbstractCollection::isEmpty);\n+  }\n+\n+  @Test\n+  public void testGetUser() {\n+    User user = createTestUser();\n+    localDataStore.insertOrUpdateUser(user).test().assertComplete();\n+    localDataStore.getUser(user.getId()).test().assertValue(user);\n+  }\n+\n+  @Test\n+  public void testApplyAndEnqueue_featureMutation() {\n+    User user = createTestUser();\n+    localDataStore.insertOrUpdateUser(user).test().assertComplete();\n+\n+    Project project = createTestProject();\n+    localDataStore.insertOrUpdateProject(project).test().assertComplete();\n+\n+    Layer layer = project.getLayers().get(0);\n+    FeatureMutation mutation =\n+        createTestFeatureMutation(user.getId(), project.getId(), layer.getId());\n+    localDataStore.applyAndEnqueue(mutation).test().assertComplete();\n+\n+    ImmutableList<Mutation> savedMutations =\n+        localDataStore.getPendingMutations(mutation.getFeatureId()).blockingGet();\n+    Assert.assertEquals(1, savedMutations.size());\n+\n+    // assert that mutation is saved to local database\n+    FeatureMutation savedMutation = (FeatureMutation) savedMutations.get(0);\n+    Assert.assertEquals(mutation.getNewLocation(), savedMutation.getNewLocation());\n+    Assert.assertEquals(mutation.getType(), savedMutation.getType());\n+    Assert.assertEquals(mutation.getUserId(), savedMutation.getUserId());\n+    Assert.assertEquals(mutation.getProjectId(), savedMutation.getProjectId());\n+    Assert.assertEquals(mutation.getFeatureId(), savedMutation.getFeatureId());\n+    Assert.assertEquals(mutation.getLayerId(), savedMutation.getLayerId());\n+    Assert.assertEquals(mutation.getClientTimestamp(), savedMutation.getClientTimestamp());\n+    Assert.assertEquals(0, savedMutation.getRetryCount());\n+    Assert.assertNull(savedMutation.getLastError());\n+\n+    // assert feature is saved to local database\n+    Feature feature = localDataStore.getFeature(project, mutation.getFeatureId()).blockingGet();\n+    Assert.assertEquals(mutation.getFeatureId(), feature.getId());\n+    Assert.assertEquals(project, feature.getProject());\n+    Assert.assertEquals(layer.getItemLabel(), feature.getTitle());\n+    Assert.assertEquals(layer, feature.getLayer());\n+    Assert.assertNull(feature.getCustomId());\n+    Assert.assertNull(feature.getCaption());\n+    Assert.assertEquals(mutation.getNewLocation().get(), feature.getPoint());\n+    Assert.assertEquals(user, feature.getCreated().getUser());\n+    Assert.assertEquals(user, feature.getLastModified().getUser());\n+  }\n+\n+  @Test\n+  public void testGetFeaturesOnceAndStream() {\n+    User user = createTestUser();\n+    localDataStore.insertOrUpdateUser(user).test().assertComplete();\n+\n+    Project project = createTestProject();\n+    localDataStore.insertOrUpdateProject(project).test().assertComplete();\n+\n+    TestSubscriber<ImmutableSet<Feature>> subscriber =\n+        localDataStore.getFeaturesOnceAndStream(project).test();\n+\n+    subscriber.assertValueCount(1);\n+    subscriber.assertValueAt(0, AbstractCollection::isEmpty);\n+\n+    Layer layer = project.getLayers().get(0);\n+    FeatureMutation mutation =\n+        createTestFeatureMutation(user.getId(), project.getId(), layer.getId());\n+    localDataStore.applyAndEnqueue(mutation).test().assertComplete();\n+\n+    Feature feature = localDataStore.getFeature(project, mutation.getFeatureId()).blockingGet();\n+\n+    subscriber.assertValueCount(2);\n+    subscriber.assertValueAt(0, AbstractCollection::isEmpty);\n+    subscriber.assertValueAt(1, ImmutableSet.<Feature>builder().add(feature).build());\n+  }\n+\n+  @Test\n+  public void testUpdateMutations() {\n+    User user = createTestUser();\n+    localDataStore.insertOrUpdateUser(user).test().assertComplete();\n+\n+    Project project = createTestProject();\n+    localDataStore.insertOrUpdateProject(project).test().assertComplete();\n+\n+    Layer layer = project.getLayers().get(0);\n+    FeatureMutation mutation =\n+        createTestFeatureMutation(user.getId(), project.getId(), layer.getId());\n+    localDataStore.applyAndEnqueue(mutation).test().assertComplete();\n+\n+    Point newPoint = Point.newBuilder().setLatitude(51.0).setLongitude(44.0).build();\n+    Mutation updatedMutation =\n+        mutation.toBuilder().setNewLocation(Optional.ofNullable(newPoint)).build();\n+\n+    localDataStore\n+        .updateMutations(ImmutableList.<Mutation>builder().add(updatedMutation).build())\n+        .test()\n+        .assertComplete();\n+\n+    ImmutableList<Mutation> savedMutations =\n+        localDataStore.getPendingMutations(updatedMutation.getFeatureId()).blockingGet();\n+    Assert.assertEquals(1, savedMutations.size());\n+\n+    FeatureMutation savedMutation = (FeatureMutation) savedMutations.get(0);\n+    Assert.assertEquals(newPoint, savedMutation.getNewLocation().get());\n+  }\n+\n+  @Test\n+  public void testRemovePendingMutation() {\n+    User user = createTestUser();\n+    localDataStore.insertOrUpdateUser(user).test().assertComplete();\n+\n+    Project project = createTestProject();\n+    localDataStore.insertOrUpdateProject(project).test().assertComplete();\n+\n+    Layer layer = project.getLayers().get(0);\n+    FeatureMutation mutation =\n+        createTestFeatureMutation(user.getId(), project.getId(), layer.getId());\n+    localDataStore.applyAndEnqueue(mutation).test().assertComplete();\n+\n+    localDataStore\n+        .removePendingMutations(ImmutableList.<Mutation>builder().add(mutation).build())\n+        .test()\n+        .assertComplete();\n+\n+    localDataStore\n+        .getPendingMutations(mutation.getFeatureId())\n+        .test()\n+        .assertValue(AbstractCollection::isEmpty);\n+  }\n+\n+  @Test\n+  public void testMergeFeature() {\n+    User user = createTestUser();\n+    localDataStore.insertOrUpdateUser(user).test().assertComplete();\n+\n+    Project project = createTestProject();\n+    localDataStore.insertOrUpdateProject(project).test().assertComplete();\n+\n+    Layer layer = project.getLayers().get(0);\n+    FeatureMutation mutation =\n+        createTestFeatureMutation(user.getId(), project.getId(), layer.getId());\n+    localDataStore.applyAndEnqueue(mutation).test().assertComplete();\n+\n+    Feature feature = localDataStore.getFeature(project, mutation.getFeatureId()).blockingGet();\n+    Point point = Point.newBuilder().setLongitude(11.0).setLatitude(33.0).build();\n+    feature = feature.toBuilder().setPoint(point).build();\n+    localDataStore.mergeFeature(feature).test().assertComplete();\n+\n+    Feature newFeature = localDataStore.getFeature(project, mutation.getFeatureId()).blockingGet();\n+    Assert.assertEquals(mutation.getFeatureId(), newFeature.getId());\n+    Assert.assertEquals(project, newFeature.getProject());\n+    Assert.assertEquals(layer.getItemLabel(), newFeature.getTitle());\n+    Assert.assertEquals(layer, newFeature.getLayer());\n+    Assert.assertNull(newFeature.getCustomId());\n+    Assert.assertNull(newFeature.getCaption());\n+    Assert.assertEquals(point, newFeature.getPoint());\n+    Assert.assertEquals(user, newFeature.getCreated().getUser());\n+    Assert.assertEquals(user, newFeature.getLastModified().getUser());\n+  }\n+\n+  @Test\n+  public void testApplyAndEnqueue_observationMutation() {", "originalCommit": "4d067567ac55be392063ab19c3d46df237e0e657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkwMjIzMw==", "url": "https://github.com/google/ground-android/pull/425#discussion_r408902233", "bodyText": "Done. PTAL", "author": "shobhitagarwal1612", "createdAt": "2020-04-15T14:49:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxNzg1Nw=="}], "type": "inlineReview"}, {"oid": "8b132a471dbef9903e1fc088b9003bf053afc510", "url": "https://github.com/google/ground-android/commit/8b132a471dbef9903e1fc088b9003bf053afc510", "message": "Merge branch 'master' into testing", "committedDate": "2020-04-15T12:54:07Z", "type": "commit"}, {"oid": "73864a4a37674ebe848a112d66e295e240362d94", "url": "https://github.com/google/ground-android/commit/73864a4a37674ebe848a112d66e295e240362d94", "message": "Compare entire FeatureMutation instead of checking individually\n\n - This wasn't done earlier because Id was auto-generating. But in the one of the last commits, we added the id as well to the test object.", "committedDate": "2020-04-15T13:09:39Z", "type": "commit"}, {"oid": "196df6e3e8166b8a30ddccb2859046da8af14419", "url": "https://github.com/google/ground-android/commit/196df6e3e8166b8a30ddccb2859046da8af14419", "message": "Use Immutable.of() wherever possible", "committedDate": "2020-04-15T13:14:46Z", "type": "commit"}, {"oid": "f7693bc51f300e6881c3360e5396a6abb94ccb3c", "url": "https://github.com/google/ground-android/commit/f7693bc51f300e6881c3360e5396a6abb94ccb3c", "message": "Convert test objects into static variables", "committedDate": "2020-04-15T13:50:52Z", "type": "commit"}, {"oid": "275264dc6e9c99ac2bcc852e567eaa3819853def", "url": "https://github.com/google/ground-android/commit/275264dc6e9c99ac2bcc852e567eaa3819853def", "message": "Replace test().assertComplete() with subscribe()\n\n - this is prevent duplicate assertions already done in previous tests", "committedDate": "2020-04-15T14:01:55Z", "type": "commit"}, {"oid": "d9157493982a085ea2c26d064480b5df733ad7fe", "url": "https://github.com/google/ground-android/commit/d9157493982a085ea2c26d064480b5df733ad7fe", "message": "Move assertions for ObservationMutation into a separate method", "committedDate": "2020-04-15T14:14:06Z", "type": "commit"}, {"oid": "fa02907b788d98144fe5a82646ddea63cf980083", "url": "https://github.com/google/ground-android/commit/fa02907b788d98144fe5a82646ddea63cf980083", "message": "Use ImmutableSet.of() wherever possible", "committedDate": "2020-04-15T14:17:10Z", "type": "commit"}, {"oid": "80c66e473d42d62852c4b52ac756329965b4a8a1", "url": "https://github.com/google/ground-android/commit/80c66e473d42d62852c4b52ac756329965b4a8a1", "message": "Simplify observationMutation assertion and add comments", "committedDate": "2020-04-15T14:28:32Z", "type": "commit"}, {"oid": "36833ab571c4a9338575e6d24bf44ddc31a7521d", "url": "https://github.com/google/ground-android/commit/36833ab571c4a9338575e6d24bf44ddc31a7521d", "message": "Store fake location in a separate variable for easy assertion", "committedDate": "2020-04-15T14:32:00Z", "type": "commit"}, {"oid": "40f73f415664e3dd69a277a24ea8fdc3f2da0953", "url": "https://github.com/google/ground-android/commit/40f73f415664e3dd69a277a24ea8fdc3f2da0953", "message": "Move assertion for observation to a separate method", "committedDate": "2020-04-15T14:47:16Z", "type": "commit"}, {"oid": "93cc92acdfb4d7a8fc632b2d405a96315de08130", "url": "https://github.com/google/ground-android/commit/93cc92acdfb4d7a8fc632b2d405a96315de08130", "message": "Reuse assertObservation", "committedDate": "2020-04-15T14:48:31Z", "type": "commit"}, {"oid": "f75789943d137ed571042cc2cbe8358b955dbbe8", "url": "https://github.com/google/ground-android/commit/f75789943d137ed571042cc2cbe8358b955dbbe8", "message": "Reuse FAKE_USER for testGetProjects", "committedDate": "2020-04-15T17:40:05Z", "type": "commit"}, {"oid": "324ef32e9520df89388fa8aa15a3d3aba2516f77", "url": "https://github.com/google/ground-android/commit/324ef32e9520df89388fa8aa15a3d3aba2516f77", "message": "Create static fakes for the rest of the tests", "committedDate": "2020-04-15T17:48:28Z", "type": "commit"}, {"oid": "d68f4e4e1251fb315c1b1b40d4552baa99a8a79e", "url": "https://github.com/google/ground-android/commit/d68f4e4e1251fb315c1b1b40d4552baa99a8a79e", "message": "Merge branch 'master' into testing", "committedDate": "2020-04-16T14:57:12Z", "type": "commit"}, {"oid": "e4f09decacd17490ef305dab30085dd432f14ed3", "url": "https://github.com/google/ground-android/commit/e4f09decacd17490ef305dab30085dd432f14ed3", "message": "Exclude pmd checks for tests", "committedDate": "2020-04-16T19:32:50Z", "type": "commit"}, {"oid": "df3ccd288599968bf3b28bd181076bdacc157c11", "url": "https://github.com/google/ground-android/commit/df3ccd288599968bf3b28bd181076bdacc157c11", "message": "Rename FAKE -> Test", "committedDate": "2020-04-16T19:36:41Z", "type": "commit"}, {"oid": "fbcfe556d9d7c343cf2ac9f95d7d01dee76089a7", "url": "https://github.com/google/ground-android/commit/fbcfe556d9d7c343cf2ac9f95d7d01dee76089a7", "message": "Rename findAll to getTilesOnceAndStream", "committedDate": "2020-04-16T19:38:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg1MzM4Mg==", "url": "https://github.com/google/ground-android/pull/425#discussion_r409853382", "bodyText": "let's stick with the \"findAll\" prefix for consistency with other DAOs, so \"findAllOnceAndStream?", "author": "gino-m", "createdAt": "2020-04-16T21:16:34Z", "path": "gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java", "diffHunk": "@@ -268,7 +268,7 @@ public Completable applyAndEnqueue(FeatureMutation mutation) {\n   @Override\n   public Flowable<ImmutableSet<Tile>> getTilesOnceAndStream() {\n     return tileDao\n-        .findAll()\n+        .getTilesOnceAndStream()", "originalCommit": "fbcfe556d9d7c343cf2ac9f95d7d01dee76089a7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg1Mzc0NA==", "url": "https://github.com/google/ground-android/pull/425#discussion_r409853744", "bodyText": "Nit: Please use natural word order for readability: TEST_PENDING_TILE here and below.", "author": "gino-m", "createdAt": "2020-04-16T21:17:26Z", "path": "gnd/src/test/java/com/google/android/gnd/persistence/local/LocalDataStoreTest.java", "diffHunk": "@@ -67,97 +66,138 @@\n @Config(application = TestApplication.class)\n public class LocalDataStoreTest {\n \n+  private static final User TEST_USER =\n+      User.builder().setId(\"user id\").setEmail(\"user@gmail.com\").setDisplayName(\"user 1\").build();\n+\n+  private static final MultipleChoice TEST_MULTIPLE_CHOICE =\n+      MultipleChoice.newBuilder()\n+          .setCardinality(Cardinality.SELECT_ONE)\n+          .setOptions(\n+              ImmutableList.of(\n+                  Option.newBuilder().setCode(\"a\").setLabel(\"Name\").build(),\n+                  Option.newBuilder().setCode(\"b\").setLabel(\"Age\").build()))\n+          .build();\n+\n+  private static final Field TEST_FIELD =\n+      Field.newBuilder()\n+          .setId(\"field id\")\n+          .setLabel(\"field label\")\n+          .setRequired(false)\n+          .setType(Type.MULTIPLE_CHOICE)\n+          .setMultipleChoice(TEST_MULTIPLE_CHOICE)\n+          .build();\n+\n+  private static final Form TEST_FORM =\n+      Form.newBuilder()\n+          .setId(\"form id\")\n+          .setElements(ImmutableList.of(Element.ofField(TEST_FIELD)))\n+          .build();\n+\n+  private static final Layer TEST_LAYER =\n+      Layer.newBuilder()\n+          .setId(\"layer id\")\n+          .setItemLabel(\"item label\")\n+          .setListHeading(\"heading title\")\n+          .setDefaultStyle(Style.builder().setColor(\"000\").build())\n+          .setForm(TEST_FORM)\n+          .build();\n+\n+  private static final Project TEST_PROJECT =\n+      Project.newBuilder()\n+          .setId(\"project id\")\n+          .setTitle(\"project 1\")\n+          .setDescription(\"foo description\")\n+          .putLayer(\"layer id\", TEST_LAYER)\n+          .build();\n+\n+  private static final Point TEST_POINT =\n+      Point.newBuilder().setLatitude(110.0).setLongitude(-23.1).build();\n+\n+  private static final FeatureMutation TEST_FEATURE_MUTATION =\n+      FeatureMutation.builder()\n+          .setId(1L)\n+          .setFeatureId(\"feature id\")\n+          .setType(Mutation.Type.CREATE)\n+          .setUserId(\"user id\")\n+          .setProjectId(\"project id\")\n+          .setLayerId(\"layer id\")\n+          .setNewLocation(Optional.ofNullable(TEST_POINT))\n+          .setClientTimestamp(new Date())\n+          .build();\n+\n+  private static final ObservationMutation TEST_OBSERVATION_MUTATION =\n+      ObservationMutation.builder()\n+          .setObservationId(\"observation id\")\n+          .setType(Mutation.Type.CREATE)\n+          .setProjectId(\"project id\")\n+          .setFeatureId(\"feature id\")\n+          .setLayerId(\"layer id\")\n+          .setFormId(\"form id\")\n+          .setUserId(\"user id\")\n+          .setResponseDeltas(\n+              ImmutableList.of(\n+                  ResponseDelta.builder()\n+                      .setFieldId(\"field id\")\n+                      .setNewResponse(TextResponse.fromString(\"response for field id\"))\n+                      .build()))\n+          .setClientTimestamp(new Date())\n+          .build();\n+\n+  private static final Tile TEST_TILE_PENDING =", "originalCommit": "fbcfe556d9d7c343cf2ac9f95d7d01dee76089a7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg1NDUwNg==", "url": "https://github.com/google/ground-android/pull/425#discussion_r409854506", "bodyText": "One asserts that something Xs, so here it would be assertObservationMutationEquals.\nBut this also does something extra, so should be reflected in the name, e.g.:\nassertEqualsIgnoreId.\nWe can omit \"ObservationMutation\" from the name for brevity since it will be clear from the arguments what's being compared.", "author": "gino-m", "createdAt": "2020-04-16T21:18:58Z", "path": "gnd/src/test/java/com/google/android/gnd/persistence/local/LocalDataStoreTest.java", "diffHunk": "@@ -67,97 +66,138 @@\n @Config(application = TestApplication.class)\n public class LocalDataStoreTest {\n \n+  private static final User TEST_USER =\n+      User.builder().setId(\"user id\").setEmail(\"user@gmail.com\").setDisplayName(\"user 1\").build();\n+\n+  private static final MultipleChoice TEST_MULTIPLE_CHOICE =\n+      MultipleChoice.newBuilder()\n+          .setCardinality(Cardinality.SELECT_ONE)\n+          .setOptions(\n+              ImmutableList.of(\n+                  Option.newBuilder().setCode(\"a\").setLabel(\"Name\").build(),\n+                  Option.newBuilder().setCode(\"b\").setLabel(\"Age\").build()))\n+          .build();\n+\n+  private static final Field TEST_FIELD =\n+      Field.newBuilder()\n+          .setId(\"field id\")\n+          .setLabel(\"field label\")\n+          .setRequired(false)\n+          .setType(Type.MULTIPLE_CHOICE)\n+          .setMultipleChoice(TEST_MULTIPLE_CHOICE)\n+          .build();\n+\n+  private static final Form TEST_FORM =\n+      Form.newBuilder()\n+          .setId(\"form id\")\n+          .setElements(ImmutableList.of(Element.ofField(TEST_FIELD)))\n+          .build();\n+\n+  private static final Layer TEST_LAYER =\n+      Layer.newBuilder()\n+          .setId(\"layer id\")\n+          .setItemLabel(\"item label\")\n+          .setListHeading(\"heading title\")\n+          .setDefaultStyle(Style.builder().setColor(\"000\").build())\n+          .setForm(TEST_FORM)\n+          .build();\n+\n+  private static final Project TEST_PROJECT =\n+      Project.newBuilder()\n+          .setId(\"project id\")\n+          .setTitle(\"project 1\")\n+          .setDescription(\"foo description\")\n+          .putLayer(\"layer id\", TEST_LAYER)\n+          .build();\n+\n+  private static final Point TEST_POINT =\n+      Point.newBuilder().setLatitude(110.0).setLongitude(-23.1).build();\n+\n+  private static final FeatureMutation TEST_FEATURE_MUTATION =\n+      FeatureMutation.builder()\n+          .setId(1L)\n+          .setFeatureId(\"feature id\")\n+          .setType(Mutation.Type.CREATE)\n+          .setUserId(\"user id\")\n+          .setProjectId(\"project id\")\n+          .setLayerId(\"layer id\")\n+          .setNewLocation(Optional.ofNullable(TEST_POINT))\n+          .setClientTimestamp(new Date())\n+          .build();\n+\n+  private static final ObservationMutation TEST_OBSERVATION_MUTATION =\n+      ObservationMutation.builder()\n+          .setObservationId(\"observation id\")\n+          .setType(Mutation.Type.CREATE)\n+          .setProjectId(\"project id\")\n+          .setFeatureId(\"feature id\")\n+          .setLayerId(\"layer id\")\n+          .setFormId(\"form id\")\n+          .setUserId(\"user id\")\n+          .setResponseDeltas(\n+              ImmutableList.of(\n+                  ResponseDelta.builder()\n+                      .setFieldId(\"field id\")\n+                      .setNewResponse(TextResponse.fromString(\"response for field id\"))\n+                      .build()))\n+          .setClientTimestamp(new Date())\n+          .build();\n+\n+  private static final Tile TEST_TILE_PENDING =\n+      Tile.newBuilder()\n+          .setId(\"id_1\")\n+          .setState(State.PENDING)\n+          .setPath(\"some_path 1\")\n+          .setUrl(\"some_url 1\")\n+          .build();\n+\n+  private static final Tile TEST_TILE_DOWNLOADED =\n+      Tile.newBuilder()\n+          .setId(\"id_2\")\n+          .setState(State.DOWNLOADED)\n+          .setPath(\"some_path 2\")\n+          .setUrl(\"some_url 2\")\n+          .build();\n+\n+  private static final Tile TEST_TILE_FAILED =\n+      Tile.newBuilder()\n+          .setId(\"id_3\")\n+          .setState(State.FAILED)\n+          .setPath(\"some_path 3\")\n+          .setUrl(\"some_url 3\")\n+          .build();\n+\n+  private static final OfflineArea TEST_OFFLINE_AREA =\n+      OfflineArea.newBuilder()\n+          .setId(\"id_1\")\n+          .setBounds(LatLngBounds.builder().include(new LatLng(0.0, 0.0)).build())\n+          .setState(OfflineArea.State.PENDING)\n+          .build();\n+\n   // This rule makes sure that Room executes all the database operations instantly.\n   @Rule public InstantTaskExecutorRule instantTaskExecutorRule = new InstantTaskExecutorRule();\n \n   @Inject LocalDataStore localDataStore;\n \n-  private static User createTestUser() {\n-    return User.builder()\n-        .setId(\"test_user_id\")\n-        .setEmail(\"test@gmail.com\")\n-        .setDisplayName(\"test user\")\n-        .build();\n-  }\n-\n-  private static Project createTestProject() {\n-    Builder multipleChoiceBuilder =\n-        MultipleChoice.newBuilder().setCardinality(Cardinality.SELECT_ONE);\n-    multipleChoiceBuilder\n-        .optionsBuilder()\n-        .add(Option.newBuilder().setCode(\"a\").setLabel(\"Name\").build())\n-        .add(Option.newBuilder().setCode(\"b\").setLabel(\"Age\").build());\n-\n-    Field field =\n-        Field.newBuilder()\n-            .setId(\"field id\")\n-            .setLabel(\"field label\")\n-            .setRequired(false)\n-            .setType(Type.MULTIPLE_CHOICE)\n-            .setMultipleChoice(multipleChoiceBuilder.build())\n-            .build();\n-\n-    Element element = Element.ofField(field);\n-\n-    Form form =\n-        Form.newBuilder()\n-            .setId(\"form id\")\n-            .setElements(ImmutableList.<Element>builder().add(element).build())\n-            .build();\n-\n-    Layer layer =\n-        Layer.newBuilder()\n-            .setId(\"layer id\")\n-            .setItemLabel(\"item label\")\n-            .setListHeading(\"heading title\")\n-            .setDefaultStyle(Style.builder().setColor(\"000\").build())\n-            .setForm(form)\n-            .build();\n-\n-    Project.Builder builder =\n-        Project.newBuilder()\n-            .setId(\"project id\")\n-            .setTitle(\"project 1\")\n-            .setDescription(\"foo description\");\n-    builder.putLayer(layer.getId(), layer);\n-    return builder.build();\n-  }\n-\n-  private static FeatureMutation createTestFeatureMutation(\n-      String userId, String projectId, String layerId) {\n-    return FeatureMutation.builder()\n-        .setId(1L)\n-        .setType(Mutation.Type.CREATE)\n-        .setUserId(userId)\n-        .setProjectId(projectId)\n-        .setFeatureId(\"feature id\")\n-        .setLayerId(layerId)\n-        .setNewLocation(\n-            Optional.ofNullable(Point.newBuilder().setLatitude(110.0).setLongitude(-23.1).build()))\n-        .setClientTimestamp(new Date())\n-        .build();\n+  private static void assertObservationMutation(", "originalCommit": "fbcfe556d9d7c343cf2ac9f95d7d01dee76089a7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg1NTU0MQ==", "url": "https://github.com/google/ground-android/pull/425#discussion_r409855541", "bodyText": "Let's use Google Truth consistently here and throughout to set a stable precedent and to get more useful error messages. i.e. assertThat(actual).isEqualTo(expected).", "author": "gino-m", "createdAt": "2020-04-16T21:21:09Z", "path": "gnd/src/test/java/com/google/android/gnd/persistence/local/LocalDataStoreTest.java", "diffHunk": "@@ -67,97 +66,138 @@\n @Config(application = TestApplication.class)\n public class LocalDataStoreTest {\n \n+  private static final User TEST_USER =\n+      User.builder().setId(\"user id\").setEmail(\"user@gmail.com\").setDisplayName(\"user 1\").build();\n+\n+  private static final MultipleChoice TEST_MULTIPLE_CHOICE =\n+      MultipleChoice.newBuilder()\n+          .setCardinality(Cardinality.SELECT_ONE)\n+          .setOptions(\n+              ImmutableList.of(\n+                  Option.newBuilder().setCode(\"a\").setLabel(\"Name\").build(),\n+                  Option.newBuilder().setCode(\"b\").setLabel(\"Age\").build()))\n+          .build();\n+\n+  private static final Field TEST_FIELD =\n+      Field.newBuilder()\n+          .setId(\"field id\")\n+          .setLabel(\"field label\")\n+          .setRequired(false)\n+          .setType(Type.MULTIPLE_CHOICE)\n+          .setMultipleChoice(TEST_MULTIPLE_CHOICE)\n+          .build();\n+\n+  private static final Form TEST_FORM =\n+      Form.newBuilder()\n+          .setId(\"form id\")\n+          .setElements(ImmutableList.of(Element.ofField(TEST_FIELD)))\n+          .build();\n+\n+  private static final Layer TEST_LAYER =\n+      Layer.newBuilder()\n+          .setId(\"layer id\")\n+          .setItemLabel(\"item label\")\n+          .setListHeading(\"heading title\")\n+          .setDefaultStyle(Style.builder().setColor(\"000\").build())\n+          .setForm(TEST_FORM)\n+          .build();\n+\n+  private static final Project TEST_PROJECT =\n+      Project.newBuilder()\n+          .setId(\"project id\")\n+          .setTitle(\"project 1\")\n+          .setDescription(\"foo description\")\n+          .putLayer(\"layer id\", TEST_LAYER)\n+          .build();\n+\n+  private static final Point TEST_POINT =\n+      Point.newBuilder().setLatitude(110.0).setLongitude(-23.1).build();\n+\n+  private static final FeatureMutation TEST_FEATURE_MUTATION =\n+      FeatureMutation.builder()\n+          .setId(1L)\n+          .setFeatureId(\"feature id\")\n+          .setType(Mutation.Type.CREATE)\n+          .setUserId(\"user id\")\n+          .setProjectId(\"project id\")\n+          .setLayerId(\"layer id\")\n+          .setNewLocation(Optional.ofNullable(TEST_POINT))\n+          .setClientTimestamp(new Date())\n+          .build();\n+\n+  private static final ObservationMutation TEST_OBSERVATION_MUTATION =\n+      ObservationMutation.builder()\n+          .setObservationId(\"observation id\")\n+          .setType(Mutation.Type.CREATE)\n+          .setProjectId(\"project id\")\n+          .setFeatureId(\"feature id\")\n+          .setLayerId(\"layer id\")\n+          .setFormId(\"form id\")\n+          .setUserId(\"user id\")\n+          .setResponseDeltas(\n+              ImmutableList.of(\n+                  ResponseDelta.builder()\n+                      .setFieldId(\"field id\")\n+                      .setNewResponse(TextResponse.fromString(\"response for field id\"))\n+                      .build()))\n+          .setClientTimestamp(new Date())\n+          .build();\n+\n+  private static final Tile TEST_TILE_PENDING =\n+      Tile.newBuilder()\n+          .setId(\"id_1\")\n+          .setState(State.PENDING)\n+          .setPath(\"some_path 1\")\n+          .setUrl(\"some_url 1\")\n+          .build();\n+\n+  private static final Tile TEST_TILE_DOWNLOADED =\n+      Tile.newBuilder()\n+          .setId(\"id_2\")\n+          .setState(State.DOWNLOADED)\n+          .setPath(\"some_path 2\")\n+          .setUrl(\"some_url 2\")\n+          .build();\n+\n+  private static final Tile TEST_TILE_FAILED =\n+      Tile.newBuilder()\n+          .setId(\"id_3\")\n+          .setState(State.FAILED)\n+          .setPath(\"some_path 3\")\n+          .setUrl(\"some_url 3\")\n+          .build();\n+\n+  private static final OfflineArea TEST_OFFLINE_AREA =\n+      OfflineArea.newBuilder()\n+          .setId(\"id_1\")\n+          .setBounds(LatLngBounds.builder().include(new LatLng(0.0, 0.0)).build())\n+          .setState(OfflineArea.State.PENDING)\n+          .build();\n+\n   // This rule makes sure that Room executes all the database operations instantly.\n   @Rule public InstantTaskExecutorRule instantTaskExecutorRule = new InstantTaskExecutorRule();\n \n   @Inject LocalDataStore localDataStore;\n \n-  private static User createTestUser() {\n-    return User.builder()\n-        .setId(\"test_user_id\")\n-        .setEmail(\"test@gmail.com\")\n-        .setDisplayName(\"test user\")\n-        .build();\n-  }\n-\n-  private static Project createTestProject() {\n-    Builder multipleChoiceBuilder =\n-        MultipleChoice.newBuilder().setCardinality(Cardinality.SELECT_ONE);\n-    multipleChoiceBuilder\n-        .optionsBuilder()\n-        .add(Option.newBuilder().setCode(\"a\").setLabel(\"Name\").build())\n-        .add(Option.newBuilder().setCode(\"b\").setLabel(\"Age\").build());\n-\n-    Field field =\n-        Field.newBuilder()\n-            .setId(\"field id\")\n-            .setLabel(\"field label\")\n-            .setRequired(false)\n-            .setType(Type.MULTIPLE_CHOICE)\n-            .setMultipleChoice(multipleChoiceBuilder.build())\n-            .build();\n-\n-    Element element = Element.ofField(field);\n-\n-    Form form =\n-        Form.newBuilder()\n-            .setId(\"form id\")\n-            .setElements(ImmutableList.<Element>builder().add(element).build())\n-            .build();\n-\n-    Layer layer =\n-        Layer.newBuilder()\n-            .setId(\"layer id\")\n-            .setItemLabel(\"item label\")\n-            .setListHeading(\"heading title\")\n-            .setDefaultStyle(Style.builder().setColor(\"000\").build())\n-            .setForm(form)\n-            .build();\n-\n-    Project.Builder builder =\n-        Project.newBuilder()\n-            .setId(\"project id\")\n-            .setTitle(\"project 1\")\n-            .setDescription(\"foo description\");\n-    builder.putLayer(layer.getId(), layer);\n-    return builder.build();\n-  }\n-\n-  private static FeatureMutation createTestFeatureMutation(\n-      String userId, String projectId, String layerId) {\n-    return FeatureMutation.builder()\n-        .setId(1L)\n-        .setType(Mutation.Type.CREATE)\n-        .setUserId(userId)\n-        .setProjectId(projectId)\n-        .setFeatureId(\"feature id\")\n-        .setLayerId(layerId)\n-        .setNewLocation(\n-            Optional.ofNullable(Point.newBuilder().setLatitude(110.0).setLongitude(-23.1).build()))\n-        .setClientTimestamp(new Date())\n-        .build();\n+  private static void assertObservationMutation(\n+      ObservationMutation expected, ObservationMutation actual) {\n+    // TODO: Id is auto-assigned to ObservationMutation.\n+    //  If we try to give it while inserting, then it causes problems. Improve this behavior.\n+    //  So, copy the id from actual to expected and then compare the objects.\n+    expected = expected.toBuilder().setId(actual.getId()).build();\n+    Assert.assertEquals(expected, actual);", "originalCommit": "fbcfe556d9d7c343cf2ac9f95d7d01dee76089a7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg1NjQ2NA==", "url": "https://github.com/google/ground-android/pull/425#discussion_r409856464", "bodyText": "Same here: https://truth.dev/\nPlease be sure to use static imports to make assertions more fluent.", "author": "gino-m", "createdAt": "2020-04-16T21:23:02Z", "path": "gnd/src/test/java/com/google/android/gnd/persistence/local/LocalDataStoreTest.java", "diffHunk": "@@ -67,97 +66,138 @@\n @Config(application = TestApplication.class)\n public class LocalDataStoreTest {\n \n+  private static final User TEST_USER =\n+      User.builder().setId(\"user id\").setEmail(\"user@gmail.com\").setDisplayName(\"user 1\").build();\n+\n+  private static final MultipleChoice TEST_MULTIPLE_CHOICE =\n+      MultipleChoice.newBuilder()\n+          .setCardinality(Cardinality.SELECT_ONE)\n+          .setOptions(\n+              ImmutableList.of(\n+                  Option.newBuilder().setCode(\"a\").setLabel(\"Name\").build(),\n+                  Option.newBuilder().setCode(\"b\").setLabel(\"Age\").build()))\n+          .build();\n+\n+  private static final Field TEST_FIELD =\n+      Field.newBuilder()\n+          .setId(\"field id\")\n+          .setLabel(\"field label\")\n+          .setRequired(false)\n+          .setType(Type.MULTIPLE_CHOICE)\n+          .setMultipleChoice(TEST_MULTIPLE_CHOICE)\n+          .build();\n+\n+  private static final Form TEST_FORM =\n+      Form.newBuilder()\n+          .setId(\"form id\")\n+          .setElements(ImmutableList.of(Element.ofField(TEST_FIELD)))\n+          .build();\n+\n+  private static final Layer TEST_LAYER =\n+      Layer.newBuilder()\n+          .setId(\"layer id\")\n+          .setItemLabel(\"item label\")\n+          .setListHeading(\"heading title\")\n+          .setDefaultStyle(Style.builder().setColor(\"000\").build())\n+          .setForm(TEST_FORM)\n+          .build();\n+\n+  private static final Project TEST_PROJECT =\n+      Project.newBuilder()\n+          .setId(\"project id\")\n+          .setTitle(\"project 1\")\n+          .setDescription(\"foo description\")\n+          .putLayer(\"layer id\", TEST_LAYER)\n+          .build();\n+\n+  private static final Point TEST_POINT =\n+      Point.newBuilder().setLatitude(110.0).setLongitude(-23.1).build();\n+\n+  private static final FeatureMutation TEST_FEATURE_MUTATION =\n+      FeatureMutation.builder()\n+          .setId(1L)\n+          .setFeatureId(\"feature id\")\n+          .setType(Mutation.Type.CREATE)\n+          .setUserId(\"user id\")\n+          .setProjectId(\"project id\")\n+          .setLayerId(\"layer id\")\n+          .setNewLocation(Optional.ofNullable(TEST_POINT))\n+          .setClientTimestamp(new Date())\n+          .build();\n+\n+  private static final ObservationMutation TEST_OBSERVATION_MUTATION =\n+      ObservationMutation.builder()\n+          .setObservationId(\"observation id\")\n+          .setType(Mutation.Type.CREATE)\n+          .setProjectId(\"project id\")\n+          .setFeatureId(\"feature id\")\n+          .setLayerId(\"layer id\")\n+          .setFormId(\"form id\")\n+          .setUserId(\"user id\")\n+          .setResponseDeltas(\n+              ImmutableList.of(\n+                  ResponseDelta.builder()\n+                      .setFieldId(\"field id\")\n+                      .setNewResponse(TextResponse.fromString(\"response for field id\"))\n+                      .build()))\n+          .setClientTimestamp(new Date())\n+          .build();\n+\n+  private static final Tile TEST_TILE_PENDING =\n+      Tile.newBuilder()\n+          .setId(\"id_1\")\n+          .setState(State.PENDING)\n+          .setPath(\"some_path 1\")\n+          .setUrl(\"some_url 1\")\n+          .build();\n+\n+  private static final Tile TEST_TILE_DOWNLOADED =\n+      Tile.newBuilder()\n+          .setId(\"id_2\")\n+          .setState(State.DOWNLOADED)\n+          .setPath(\"some_path 2\")\n+          .setUrl(\"some_url 2\")\n+          .build();\n+\n+  private static final Tile TEST_TILE_FAILED =\n+      Tile.newBuilder()\n+          .setId(\"id_3\")\n+          .setState(State.FAILED)\n+          .setPath(\"some_path 3\")\n+          .setUrl(\"some_url 3\")\n+          .build();\n+\n+  private static final OfflineArea TEST_OFFLINE_AREA =\n+      OfflineArea.newBuilder()\n+          .setId(\"id_1\")\n+          .setBounds(LatLngBounds.builder().include(new LatLng(0.0, 0.0)).build())\n+          .setState(OfflineArea.State.PENDING)\n+          .build();\n+\n   // This rule makes sure that Room executes all the database operations instantly.\n   @Rule public InstantTaskExecutorRule instantTaskExecutorRule = new InstantTaskExecutorRule();\n \n   @Inject LocalDataStore localDataStore;\n \n-  private static User createTestUser() {\n-    return User.builder()\n-        .setId(\"test_user_id\")\n-        .setEmail(\"test@gmail.com\")\n-        .setDisplayName(\"test user\")\n-        .build();\n-  }\n-\n-  private static Project createTestProject() {\n-    Builder multipleChoiceBuilder =\n-        MultipleChoice.newBuilder().setCardinality(Cardinality.SELECT_ONE);\n-    multipleChoiceBuilder\n-        .optionsBuilder()\n-        .add(Option.newBuilder().setCode(\"a\").setLabel(\"Name\").build())\n-        .add(Option.newBuilder().setCode(\"b\").setLabel(\"Age\").build());\n-\n-    Field field =\n-        Field.newBuilder()\n-            .setId(\"field id\")\n-            .setLabel(\"field label\")\n-            .setRequired(false)\n-            .setType(Type.MULTIPLE_CHOICE)\n-            .setMultipleChoice(multipleChoiceBuilder.build())\n-            .build();\n-\n-    Element element = Element.ofField(field);\n-\n-    Form form =\n-        Form.newBuilder()\n-            .setId(\"form id\")\n-            .setElements(ImmutableList.<Element>builder().add(element).build())\n-            .build();\n-\n-    Layer layer =\n-        Layer.newBuilder()\n-            .setId(\"layer id\")\n-            .setItemLabel(\"item label\")\n-            .setListHeading(\"heading title\")\n-            .setDefaultStyle(Style.builder().setColor(\"000\").build())\n-            .setForm(form)\n-            .build();\n-\n-    Project.Builder builder =\n-        Project.newBuilder()\n-            .setId(\"project id\")\n-            .setTitle(\"project 1\")\n-            .setDescription(\"foo description\");\n-    builder.putLayer(layer.getId(), layer);\n-    return builder.build();\n-  }\n-\n-  private static FeatureMutation createTestFeatureMutation(\n-      String userId, String projectId, String layerId) {\n-    return FeatureMutation.builder()\n-        .setId(1L)\n-        .setType(Mutation.Type.CREATE)\n-        .setUserId(userId)\n-        .setProjectId(projectId)\n-        .setFeatureId(\"feature id\")\n-        .setLayerId(layerId)\n-        .setNewLocation(\n-            Optional.ofNullable(Point.newBuilder().setLatitude(110.0).setLongitude(-23.1).build()))\n-        .setClientTimestamp(new Date())\n-        .build();\n+  private static void assertObservationMutation(\n+      ObservationMutation expected, ObservationMutation actual) {\n+    // TODO: Id is auto-assigned to ObservationMutation.\n+    //  If we try to give it while inserting, then it causes problems. Improve this behavior.\n+    //  So, copy the id from actual to expected and then compare the objects.\n+    expected = expected.toBuilder().setId(actual.getId()).build();\n+    Assert.assertEquals(expected, actual);\n   }\n \n-  private static ObservationMutation createTestObservationMutation(\n-      String projectId, String featureId, String layerId, String formId, String userId) {\n-    return ObservationMutation.builder()\n-        .setType(Mutation.Type.CREATE)\n-        .setProjectId(projectId)\n-        .setFeatureId(featureId)\n-        .setLayerId(layerId)\n-        .setObservationId(\"observation id\")\n-        .setFormId(formId)\n-        .setResponseDeltas(\n-            ImmutableList.<ResponseDelta>builder()\n-                .add(\n-                    ResponseDelta.builder()\n-                        .setFieldId(\"field id\")\n-                        .setNewResponse(TextResponse.fromString(\"response for field id\"))\n-                        .build())\n-                .build())\n-        .setClientTimestamp(new Date())\n-        .setUserId(userId)\n-        .build();\n+  private static void assertObservation(ObservationMutation mutation, Observation observation) {\n+    Assert.assertEquals(mutation.getObservationId(), observation.getId());\n+    Assert.assertEquals(mutation.getFeatureId(), observation.getFeature().getId());\n+    Assert.assertEquals(TEST_USER, observation.getCreated().getUser());\n+    Assert.assertEquals(TEST_FORM, observation.getForm());\n+    Assert.assertEquals(TEST_PROJECT, observation.getProject());\n+    Assert.assertEquals(TEST_USER, observation.getLastModified().getUser());\n+    MatcherAssert.assertThat(", "originalCommit": "fbcfe556d9d7c343cf2ac9f95d7d01dee76089a7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg1NjgxNA==", "url": "https://github.com/google/ground-android/pull/425#discussion_r409856814", "bodyText": "Please use constants directly, here and throughout; extra indirection makes tests [marginally] harder to ready.", "author": "gino-m", "createdAt": "2020-04-16T21:23:41Z", "path": "gnd/src/test/java/com/google/android/gnd/persistence/local/LocalDataStoreTest.java", "diffHunk": "@@ -167,137 +207,97 @@ public void setUp() {\n \n   @Test\n   public void testGetProjects() {\n-    Project project1 =\n-        Project.newBuilder()\n-            .setId(\"id 1\")\n-            .setTitle(\"project 1\")\n-            .setDescription(\"foo description\")\n-            .build();\n-    Project project2 =\n-        Project.newBuilder()\n-            .setId(\"id 2\")\n-            .setTitle(\"project 2\")\n-            .setDescription(\"foo description 2\")\n-            .build();\n-    localDataStore.insertOrUpdateProject(project1).test().assertComplete();\n-    localDataStore.insertOrUpdateProject(project2).test().assertComplete();\n-    localDataStore\n-        .getProjects()\n-        .test()\n-        .assertValue(ImmutableList.<Project>builder().add(project1, project2).build());\n+    Project project = TEST_PROJECT;", "originalCommit": "fbcfe556d9d7c343cf2ac9f95d7d01dee76089a7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg1NzE3Nw==", "url": "https://github.com/google/ground-android/pull/425#discussion_r409857177", "bodyText": "Please use blocking* instead of subscribe here and throughout.", "author": "gino-m", "createdAt": "2020-04-16T21:24:23Z", "path": "gnd/src/test/java/com/google/android/gnd/persistence/local/LocalDataStoreTest.java", "diffHunk": "@@ -167,137 +207,97 @@ public void setUp() {\n \n   @Test\n   public void testGetProjects() {\n-    Project project1 =\n-        Project.newBuilder()\n-            .setId(\"id 1\")\n-            .setTitle(\"project 1\")\n-            .setDescription(\"foo description\")\n-            .build();\n-    Project project2 =\n-        Project.newBuilder()\n-            .setId(\"id 2\")\n-            .setTitle(\"project 2\")\n-            .setDescription(\"foo description 2\")\n-            .build();\n-    localDataStore.insertOrUpdateProject(project1).test().assertComplete();\n-    localDataStore.insertOrUpdateProject(project2).test().assertComplete();\n-    localDataStore\n-        .getProjects()\n-        .test()\n-        .assertValue(ImmutableList.<Project>builder().add(project1, project2).build());\n+    Project project = TEST_PROJECT;\n+    localDataStore.insertOrUpdateProject(project).subscribe();\n+    localDataStore.getProjects().test().assertValue(ImmutableList.of(project));\n   }\n \n   @Test\n   public void testGetProjectById() {\n-    Project project = createTestProject();\n-    localDataStore.insertOrUpdateProject(project).test().assertComplete();\n+    Project project = TEST_PROJECT;\n+    localDataStore.insertOrUpdateProject(project).subscribe();", "originalCommit": "fbcfe556d9d7c343cf2ac9f95d7d01dee76089a7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg1ODk1Nw==", "url": "https://github.com/google/ground-android/pull/425#discussion_r409858957", "bodyText": "Can this entire block be replaced with:\n   localDataStore.getFeature(TEST_PROJECT, mutation.getFeatureId()).test().assertValue(TEST_FEATURE);\n\n?", "author": "gino-m", "createdAt": "2020-04-16T21:28:13Z", "path": "gnd/src/test/java/com/google/android/gnd/persistence/local/LocalDataStoreTest.java", "diffHunk": "@@ -167,137 +207,97 @@ public void setUp() {\n \n   @Test\n   public void testGetProjects() {\n-    Project project1 =\n-        Project.newBuilder()\n-            .setId(\"id 1\")\n-            .setTitle(\"project 1\")\n-            .setDescription(\"foo description\")\n-            .build();\n-    Project project2 =\n-        Project.newBuilder()\n-            .setId(\"id 2\")\n-            .setTitle(\"project 2\")\n-            .setDescription(\"foo description 2\")\n-            .build();\n-    localDataStore.insertOrUpdateProject(project1).test().assertComplete();\n-    localDataStore.insertOrUpdateProject(project2).test().assertComplete();\n-    localDataStore\n-        .getProjects()\n-        .test()\n-        .assertValue(ImmutableList.<Project>builder().add(project1, project2).build());\n+    Project project = TEST_PROJECT;\n+    localDataStore.insertOrUpdateProject(project).subscribe();\n+    localDataStore.getProjects().test().assertValue(ImmutableList.of(project));\n   }\n \n   @Test\n   public void testGetProjectById() {\n-    Project project = createTestProject();\n-    localDataStore.insertOrUpdateProject(project).test().assertComplete();\n+    Project project = TEST_PROJECT;\n+    localDataStore.insertOrUpdateProject(project).subscribe();\n     localDataStore.getProjectById(project.getId()).test().assertValue(project);\n   }\n \n   @Test\n   public void testDeleteProject() {\n-    Project project = createTestProject();\n-    localDataStore.insertOrUpdateProject(project).test().assertComplete();\n+    Project project = TEST_PROJECT;\n+    localDataStore.insertOrUpdateProject(project).subscribe();\n     localDataStore.deleteProject(project).test().assertComplete();\n     localDataStore.getProjects().test().assertValue(AbstractCollection::isEmpty);\n   }\n \n   @Test\n   public void testGetUser() {\n-    User user = createTestUser();\n-    localDataStore.insertOrUpdateUser(user).test().assertComplete();\n+    User user = TEST_USER;\n+    localDataStore.insertOrUpdateUser(user).subscribe();\n     localDataStore.getUser(user.getId()).test().assertValue(user);\n   }\n \n   @Test\n   public void testApplyAndEnqueue_featureMutation() {\n-    User user = createTestUser();\n-    localDataStore.insertOrUpdateUser(user).test().assertComplete();\n-\n-    Project project = createTestProject();\n-    localDataStore.insertOrUpdateProject(project).test().assertComplete();\n+    localDataStore.insertOrUpdateUser(TEST_USER).subscribe();\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).subscribe();\n \n-    Layer layer = project.getLayers().get(0);\n-    FeatureMutation mutation =\n-        createTestFeatureMutation(user.getId(), project.getId(), layer.getId());\n+    FeatureMutation mutation = TEST_FEATURE_MUTATION;\n     localDataStore.applyAndEnqueue(mutation).test().assertComplete();\n \n-    ImmutableList<Mutation> savedMutations =\n-        localDataStore.getPendingMutations(mutation.getFeatureId()).blockingGet();\n-    Assert.assertEquals(1, savedMutations.size());\n-\n     // assert that mutation is saved to local database\n-    FeatureMutation savedMutation = (FeatureMutation) savedMutations.get(0);\n-    Assert.assertEquals(mutation.getNewLocation(), savedMutation.getNewLocation());\n-    Assert.assertEquals(mutation.getType(), savedMutation.getType());\n-    Assert.assertEquals(mutation.getUserId(), savedMutation.getUserId());\n-    Assert.assertEquals(mutation.getProjectId(), savedMutation.getProjectId());\n-    Assert.assertEquals(mutation.getFeatureId(), savedMutation.getFeatureId());\n-    Assert.assertEquals(mutation.getLayerId(), savedMutation.getLayerId());\n-    Assert.assertEquals(mutation.getClientTimestamp(), savedMutation.getClientTimestamp());\n-    Assert.assertEquals(0, savedMutation.getRetryCount());\n-    Assert.assertNull(savedMutation.getLastError());\n+    localDataStore\n+        .getPendingMutations(mutation.getFeatureId())\n+        .test()\n+        .assertValue(ImmutableList.of(mutation));\n \n     // assert feature is saved to local database\n-    Feature feature = localDataStore.getFeature(project, mutation.getFeatureId()).blockingGet();\n+    Feature feature =", "originalCommit": "fbcfe556d9d7c343cf2ac9f95d7d01dee76089a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA2NDA5Ng==", "url": "https://github.com/google/ground-android/pull/425#discussion_r410064096", "bodyText": "That would require mocking a static method in AuditInfo. For that power mock can be used. https://github.com/robolectric/robolectric/wiki/Using-PowerMock\nBut I didn't have any success with that.", "author": "shobhitagarwal1612", "createdAt": "2020-04-17T08:14:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg1ODk1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg2MDA1Mg==", "url": "https://github.com/google/ground-android/pull/425#discussion_r409860052", "bodyText": "You probably will also want to assertThat(mutation).isInstanceOf(ObservationMutation.class)", "author": "gino-m", "createdAt": "2020-04-16T21:30:31Z", "path": "gnd/src/test/java/com/google/android/gnd/persistence/local/LocalDataStoreTest.java", "diffHunk": "@@ -352,136 +341,75 @@ public void testMergeFeature() {\n     Feature newFeature = localDataStore.getFeature(project, mutation.getFeatureId()).blockingGet();\n     Assert.assertEquals(mutation.getFeatureId(), newFeature.getId());\n     Assert.assertEquals(project, newFeature.getProject());\n-    Assert.assertEquals(layer.getItemLabel(), newFeature.getTitle());\n-    Assert.assertEquals(layer, newFeature.getLayer());\n+    Assert.assertEquals(TEST_LAYER.getItemLabel(), newFeature.getTitle());\n+    Assert.assertEquals(TEST_LAYER, newFeature.getLayer());\n     Assert.assertNull(newFeature.getCustomId());\n     Assert.assertNull(newFeature.getCaption());\n     Assert.assertEquals(point, newFeature.getPoint());\n-    Assert.assertEquals(user, newFeature.getCreated().getUser());\n-    Assert.assertEquals(user, newFeature.getLastModified().getUser());\n+    Assert.assertEquals(TEST_USER, newFeature.getCreated().getUser());\n+    Assert.assertEquals(TEST_USER, newFeature.getLastModified().getUser());\n   }\n \n   @Test\n   public void testApplyAndEnqueue_observationMutation() {\n-    User user = createTestUser();\n-    localDataStore.insertOrUpdateUser(user).test().assertComplete();\n-\n-    Project project = createTestProject();\n-    localDataStore.insertOrUpdateProject(project).test().assertComplete();\n-\n-    Layer layer = project.getLayers().get(0);\n-    FeatureMutation featureMutation =\n-        createTestFeatureMutation(user.getId(), project.getId(), layer.getId());\n-    localDataStore.applyAndEnqueue(featureMutation).test().assertComplete();\n-\n-    ObservationMutation mutation =\n-        createTestObservationMutation(\n-            project.getId(),\n-            featureMutation.getFeatureId(),\n-            layer.getId(),\n-            layer.getForm().get().getId(),\n-            user.getId());\n+    localDataStore.insertOrUpdateUser(TEST_USER).subscribe();\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).subscribe();\n+    localDataStore.applyAndEnqueue(TEST_FEATURE_MUTATION).subscribe();\n+\n+    ObservationMutation mutation = TEST_OBSERVATION_MUTATION;\n     localDataStore.applyAndEnqueue(mutation).test().assertComplete();\n \n     ImmutableList<Mutation> savedMutations =\n         localDataStore.getPendingMutations(mutation.getFeatureId()).blockingGet();\n     Assert.assertEquals(2, savedMutations.size());\n-\n     // ignoring the first item, which is a FeatureMutation. Already tested separately.\n-    ObservationMutation savedMutation = (ObservationMutation) savedMutations.get(1);\n-    Assert.assertEquals(mutation.getResponseDeltas(), savedMutation.getResponseDeltas());\n-    Assert.assertEquals(mutation.getType(), savedMutation.getType());\n-    Assert.assertEquals(mutation.getUserId(), savedMutation.getUserId());\n-    Assert.assertEquals(mutation.getProjectId(), savedMutation.getProjectId());\n-    Assert.assertEquals(mutation.getFeatureId(), savedMutation.getFeatureId());\n-    Assert.assertEquals(layer.getId(), savedMutation.getLayerId());\n-    Assert.assertEquals(mutation.getClientTimestamp(), savedMutation.getClientTimestamp());\n-    Assert.assertEquals(0, savedMutation.getRetryCount());\n-    Assert.assertNull(savedMutation.getLastError());\n+    assertObservationMutation(mutation, (ObservationMutation) savedMutations.get(1));", "originalCommit": "fbcfe556d9d7c343cf2ac9f95d7d01dee76089a7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg2MDYxMw==", "url": "https://github.com/google/ground-android/pull/425#discussion_r409860613", "bodyText": "Please replace secondary assertions (i.e. those that don't test the behavior in question) with blocking*(). If those code paths don't already have their own tests, please be sure to add them.", "author": "gino-m", "createdAt": "2020-04-16T21:31:46Z", "path": "gnd/src/test/java/com/google/android/gnd/persistence/local/LocalDataStoreTest.java", "diffHunk": "@@ -352,136 +341,75 @@ public void testMergeFeature() {\n     Feature newFeature = localDataStore.getFeature(project, mutation.getFeatureId()).blockingGet();\n     Assert.assertEquals(mutation.getFeatureId(), newFeature.getId());\n     Assert.assertEquals(project, newFeature.getProject());\n-    Assert.assertEquals(layer.getItemLabel(), newFeature.getTitle());\n-    Assert.assertEquals(layer, newFeature.getLayer());\n+    Assert.assertEquals(TEST_LAYER.getItemLabel(), newFeature.getTitle());\n+    Assert.assertEquals(TEST_LAYER, newFeature.getLayer());\n     Assert.assertNull(newFeature.getCustomId());\n     Assert.assertNull(newFeature.getCaption());\n     Assert.assertEquals(point, newFeature.getPoint());\n-    Assert.assertEquals(user, newFeature.getCreated().getUser());\n-    Assert.assertEquals(user, newFeature.getLastModified().getUser());\n+    Assert.assertEquals(TEST_USER, newFeature.getCreated().getUser());\n+    Assert.assertEquals(TEST_USER, newFeature.getLastModified().getUser());\n   }\n \n   @Test\n   public void testApplyAndEnqueue_observationMutation() {\n-    User user = createTestUser();\n-    localDataStore.insertOrUpdateUser(user).test().assertComplete();\n-\n-    Project project = createTestProject();\n-    localDataStore.insertOrUpdateProject(project).test().assertComplete();\n-\n-    Layer layer = project.getLayers().get(0);\n-    FeatureMutation featureMutation =\n-        createTestFeatureMutation(user.getId(), project.getId(), layer.getId());\n-    localDataStore.applyAndEnqueue(featureMutation).test().assertComplete();\n-\n-    ObservationMutation mutation =\n-        createTestObservationMutation(\n-            project.getId(),\n-            featureMutation.getFeatureId(),\n-            layer.getId(),\n-            layer.getForm().get().getId(),\n-            user.getId());\n+    localDataStore.insertOrUpdateUser(TEST_USER).subscribe();\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).subscribe();\n+    localDataStore.applyAndEnqueue(TEST_FEATURE_MUTATION).subscribe();\n+\n+    ObservationMutation mutation = TEST_OBSERVATION_MUTATION;\n     localDataStore.applyAndEnqueue(mutation).test().assertComplete();\n \n     ImmutableList<Mutation> savedMutations =\n         localDataStore.getPendingMutations(mutation.getFeatureId()).blockingGet();\n     Assert.assertEquals(2, savedMutations.size());\n-\n     // ignoring the first item, which is a FeatureMutation. Already tested separately.\n-    ObservationMutation savedMutation = (ObservationMutation) savedMutations.get(1);\n-    Assert.assertEquals(mutation.getResponseDeltas(), savedMutation.getResponseDeltas());\n-    Assert.assertEquals(mutation.getType(), savedMutation.getType());\n-    Assert.assertEquals(mutation.getUserId(), savedMutation.getUserId());\n-    Assert.assertEquals(mutation.getProjectId(), savedMutation.getProjectId());\n-    Assert.assertEquals(mutation.getFeatureId(), savedMutation.getFeatureId());\n-    Assert.assertEquals(layer.getId(), savedMutation.getLayerId());\n-    Assert.assertEquals(mutation.getClientTimestamp(), savedMutation.getClientTimestamp());\n-    Assert.assertEquals(0, savedMutation.getRetryCount());\n-    Assert.assertNull(savedMutation.getLastError());\n+    assertObservationMutation(mutation, (ObservationMutation) savedMutations.get(1));\n \n     // check if the observation was saved properly to local database\n-    Feature feature = localDataStore.getFeature(project, mutation.getFeatureId()).blockingGet();\n+    Feature feature =\n+        localDataStore.getFeature(TEST_PROJECT, mutation.getFeatureId()).blockingGet();\n     Observation observation =\n         localDataStore.getObservation(feature, mutation.getObservationId()).blockingGet();\n-    Assert.assertEquals(mutation.getObservationId(), observation.getId());\n-    Assert.assertEquals(user, observation.getCreated().getUser());\n-    Assert.assertEquals(feature, observation.getFeature());\n-    Assert.assertEquals(layer.getForm().get(), observation.getForm());\n-    Assert.assertEquals(project, observation.getProject());\n-    Assert.assertEquals(user, observation.getLastModified().getUser());\n-    MatcherAssert.assertThat(\n-        ResponseMap.builder().applyDeltas(mutation.getResponseDeltas()).build(),\n-        samePropertyValuesAs(observation.getResponses()));\n+    assertObservation(mutation, observation);\n \n     // now update the inserted observation with new responses\n     ImmutableList<ResponseDelta> deltas =\n-        ImmutableList.<ResponseDelta>builder()\n-            .add(\n-                ResponseDelta.builder()\n-                    .setFieldId(\"really new field\")\n-                    .setNewResponse(TextResponse.fromString(\"value for the really new field\"))\n-                    .build())\n-            .build();\n+        ImmutableList.of(\n+            ResponseDelta.builder()\n+                .setFieldId(\"really new field\")\n+                .setNewResponse(TextResponse.fromString(\"value for the really new field\"))\n+                .build());\n     mutation = mutation.toBuilder().setResponseDeltas(deltas).setType(Mutation.Type.UPDATE).build();", "originalCommit": "fbcfe556d9d7c343cf2ac9f95d7d01dee76089a7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c495f77b7802df078b3d1bd6bfb78ce766826365", "url": "https://github.com/google/ground-android/commit/c495f77b7802df078b3d1bd6bfb78ce766826365", "message": "Fix method name findAllOnceAndStream", "committedDate": "2020-04-17T06:29:06Z", "type": "commit"}, {"oid": "a0bd194dc5b55f1ef6498f1c338154f3ae769e85", "url": "https://github.com/google/ground-android/commit/a0bd194dc5b55f1ef6498f1c338154f3ae769e85", "message": "Fix natural naming order", "committedDate": "2020-04-17T06:32:00Z", "type": "commit"}, {"oid": "dfcfecdf0164ce25b6d87cb4d78c57144b104afe", "url": "https://github.com/google/ground-android/commit/dfcfecdf0164ce25b6d87cb4d78c57144b104afe", "message": "Improve helper assert method name", "committedDate": "2020-04-17T06:38:35Z", "type": "commit"}, {"oid": "1e02384441ddb428103dbb68657590c049f01ad4", "url": "https://github.com/google/ground-android/commit/1e02384441ddb428103dbb68657590c049f01ad4", "message": "Replace junit.Assert with Google Truth", "committedDate": "2020-04-17T06:52:23Z", "type": "commit"}, {"oid": "e50af6cc8315c7970d1bd2a49e6c9a0f617060b8", "url": "https://github.com/google/ground-android/commit/e50af6cc8315c7970d1bd2a49e6c9a0f617060b8", "message": "Factor out common assertions for asserting feature", "committedDate": "2020-04-17T07:00:49Z", "type": "commit"}, {"oid": "879d7ee73982f120b1e3dd7811350092693f09f6", "url": "https://github.com/google/ground-android/commit/879d7ee73982f120b1e3dd7811350092693f09f6", "message": "Use hasSize to assert size of collections", "committedDate": "2020-04-17T07:03:43Z", "type": "commit"}, {"oid": "3b2bbf38215527803511a9bc849e0bd0d71aaae3", "url": "https://github.com/google/ground-android/commit/3b2bbf38215527803511a9bc849e0bd0d71aaae3", "message": "Use static strings wherever possible to improve test readability", "committedDate": "2020-04-17T07:21:05Z", "type": "commit"}, {"oid": "6d7cafb993fccb364473c1302cac776d06773648", "url": "https://github.com/google/ground-android/commit/6d7cafb993fccb364473c1302cac776d06773648", "message": "Replace subscribe by blockingAwait", "committedDate": "2020-04-17T07:26:25Z", "type": "commit"}, {"oid": "b34f16498c2f775fceb4fa2730b59cc2d24db7f6", "url": "https://github.com/google/ground-android/commit/b34f16498c2f775fceb4fa2730b59cc2d24db7f6", "message": "Add tests for the remaining paths", "committedDate": "2020-04-17T07:29:39Z", "type": "commit"}, {"oid": "e8e208e7d5821a4aad43553e0aa9a3d4ca39c93c", "url": "https://github.com/google/ground-android/commit/e8e208e7d5821a4aad43553e0aa9a3d4ca39c93c", "message": "Add test for asserting instance type of mutation", "committedDate": "2020-04-17T08:19:12Z", "type": "commit"}, {"oid": "761beb1cb735a763ac3b42a577be73b8274f2cd6", "url": "https://github.com/google/ground-android/commit/761beb1cb735a763ac3b42a577be73b8274f2cd6", "message": "Add missing semicolon", "committedDate": "2020-04-17T08:22:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAxNDcyNQ==", "url": "https://github.com/google/ground-android/pull/425#discussion_r411014725", "bodyText": "Naming nit: assert that observation is what? assertEquivalent?", "author": "gino-m", "createdAt": "2020-04-19T23:21:17Z", "path": "gnd/src/test/java/com/google/android/gnd/persistence/local/LocalDataStoreTest.java", "diffHunk": "@@ -0,0 +1,480 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.local;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.hamcrest.Matchers.samePropertyValuesAs;\n+\n+import androidx.arch.core.executor.testing.InstantTaskExecutorRule;\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.TestApplication;\n+import com.google.android.gnd.inject.DaggerTestComponent;\n+import com.google.android.gnd.model.Mutation;\n+import com.google.android.gnd.model.Project;\n+import com.google.android.gnd.model.User;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.model.basemap.tile.Tile.State;\n+import com.google.android.gnd.model.feature.Feature;\n+import com.google.android.gnd.model.feature.FeatureMutation;\n+import com.google.android.gnd.model.feature.Point;\n+import com.google.android.gnd.model.form.Element;\n+import com.google.android.gnd.model.form.Field;\n+import com.google.android.gnd.model.form.Field.Type;\n+import com.google.android.gnd.model.form.Form;\n+import com.google.android.gnd.model.form.MultipleChoice;\n+import com.google.android.gnd.model.form.MultipleChoice.Cardinality;\n+import com.google.android.gnd.model.form.Option;\n+import com.google.android.gnd.model.layer.Layer;\n+import com.google.android.gnd.model.layer.Style;\n+import com.google.android.gnd.model.observation.Observation;\n+import com.google.android.gnd.model.observation.ObservationMutation;\n+import com.google.android.gnd.model.observation.ResponseDelta;\n+import com.google.android.gnd.model.observation.ResponseMap;\n+import com.google.android.gnd.model.observation.TextResponse;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import io.reactivex.subscribers.TestSubscriber;\n+import java.util.AbstractCollection;\n+import java.util.Date;\n+import java8.util.Optional;\n+import javax.inject.Inject;\n+import org.hamcrest.MatcherAssert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(application = TestApplication.class)\n+public class LocalDataStoreTest {\n+\n+  private static final User TEST_USER =\n+      User.builder().setId(\"user id\").setEmail(\"user@gmail.com\").setDisplayName(\"user 1\").build();\n+\n+  private static final MultipleChoice TEST_MULTIPLE_CHOICE =\n+      MultipleChoice.newBuilder()\n+          .setCardinality(Cardinality.SELECT_ONE)\n+          .setOptions(\n+              ImmutableList.of(\n+                  Option.newBuilder().setCode(\"a\").setLabel(\"Name\").build(),\n+                  Option.newBuilder().setCode(\"b\").setLabel(\"Age\").build()))\n+          .build();\n+\n+  private static final Field TEST_FIELD =\n+      Field.newBuilder()\n+          .setId(\"field id\")\n+          .setLabel(\"field label\")\n+          .setRequired(false)\n+          .setType(Type.MULTIPLE_CHOICE)\n+          .setMultipleChoice(TEST_MULTIPLE_CHOICE)\n+          .build();\n+\n+  private static final Form TEST_FORM =\n+      Form.newBuilder()\n+          .setId(\"form id\")\n+          .setElements(ImmutableList.of(Element.ofField(TEST_FIELD)))\n+          .build();\n+\n+  private static final Layer TEST_LAYER =\n+      Layer.newBuilder()\n+          .setId(\"layer id\")\n+          .setItemLabel(\"item label\")\n+          .setListHeading(\"heading title\")\n+          .setDefaultStyle(Style.builder().setColor(\"000\").build())\n+          .setForm(TEST_FORM)\n+          .build();\n+\n+  private static final Project TEST_PROJECT =\n+      Project.newBuilder()\n+          .setId(\"project id\")\n+          .setTitle(\"project 1\")\n+          .setDescription(\"foo description\")\n+          .putLayer(\"layer id\", TEST_LAYER)\n+          .build();\n+\n+  private static final Point TEST_POINT =\n+      Point.newBuilder().setLatitude(110.0).setLongitude(-23.1).build();\n+\n+  private static final FeatureMutation TEST_FEATURE_MUTATION =\n+      FeatureMutation.builder()\n+          .setId(1L)\n+          .setFeatureId(\"feature id\")\n+          .setType(Mutation.Type.CREATE)\n+          .setUserId(\"user id\")\n+          .setProjectId(\"project id\")\n+          .setLayerId(\"layer id\")\n+          .setNewLocation(Optional.ofNullable(TEST_POINT))\n+          .setClientTimestamp(new Date())\n+          .build();\n+\n+  private static final ObservationMutation TEST_OBSERVATION_MUTATION =\n+      ObservationMutation.builder()\n+          .setObservationId(\"observation id\")\n+          .setType(Mutation.Type.CREATE)\n+          .setProjectId(\"project id\")\n+          .setFeatureId(\"feature id\")\n+          .setLayerId(\"layer id\")\n+          .setFormId(\"form id\")\n+          .setUserId(\"user id\")\n+          .setResponseDeltas(\n+              ImmutableList.of(\n+                  ResponseDelta.builder()\n+                      .setFieldId(\"field id\")\n+                      .setNewResponse(TextResponse.fromString(\"response for field id\"))\n+                      .build()))\n+          .setClientTimestamp(new Date())\n+          .build();\n+\n+  private static final Tile TEST_PENDING_TILE =\n+      Tile.newBuilder()\n+          .setId(\"id_1\")\n+          .setState(State.PENDING)\n+          .setPath(\"some_path 1\")\n+          .setUrl(\"some_url 1\")\n+          .build();\n+\n+  private static final Tile TEST_DOWNLOADED_TILE =\n+      Tile.newBuilder()\n+          .setId(\"id_2\")\n+          .setState(State.DOWNLOADED)\n+          .setPath(\"some_path 2\")\n+          .setUrl(\"some_url 2\")\n+          .build();\n+\n+  private static final Tile TEST_FAILED_TILE =\n+      Tile.newBuilder()\n+          .setId(\"id_3\")\n+          .setState(State.FAILED)\n+          .setPath(\"some_path 3\")\n+          .setUrl(\"some_url 3\")\n+          .build();\n+\n+  private static final OfflineArea TEST_OFFLINE_AREA =\n+      OfflineArea.newBuilder()\n+          .setId(\"id_1\")\n+          .setBounds(LatLngBounds.builder().include(new LatLng(0.0, 0.0)).build())\n+          .setState(OfflineArea.State.PENDING)\n+          .build();\n+\n+  // This rule makes sure that Room executes all the database operations instantly.\n+  @Rule public InstantTaskExecutorRule instantTaskExecutorRule = new InstantTaskExecutorRule();\n+\n+  @Inject LocalDataStore localDataStore;\n+\n+  private static void assertEqualsIgnoreId(\n+      ObservationMutation expected, ObservationMutation actual) {\n+    // TODO: Id is auto-assigned to ObservationMutation.\n+    //  If we try to give it while inserting, then it causes problems. Improve this behavior.\n+    //  So, copy the id from actual to expected and then compare the objects.\n+    expected = expected.toBuilder().setId(actual.getId()).build();\n+    assertThat(expected).isEqualTo(actual);\n+  }\n+\n+  private static void assertObservation(ObservationMutation mutation, Observation observation) {", "originalCommit": "761beb1cb735a763ac3b42a577be73b8274f2cd6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAxNDc5MQ==", "url": "https://github.com/google/ground-android/pull/425#discussion_r411014791", "bodyText": "Seems a bit surprising that this method would compare to constant values - should we be looking instead at the user, form, project in the mutation instead?", "author": "gino-m", "createdAt": "2020-04-19T23:21:47Z", "path": "gnd/src/test/java/com/google/android/gnd/persistence/local/LocalDataStoreTest.java", "diffHunk": "@@ -0,0 +1,480 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.local;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.hamcrest.Matchers.samePropertyValuesAs;\n+\n+import androidx.arch.core.executor.testing.InstantTaskExecutorRule;\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.TestApplication;\n+import com.google.android.gnd.inject.DaggerTestComponent;\n+import com.google.android.gnd.model.Mutation;\n+import com.google.android.gnd.model.Project;\n+import com.google.android.gnd.model.User;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.model.basemap.tile.Tile.State;\n+import com.google.android.gnd.model.feature.Feature;\n+import com.google.android.gnd.model.feature.FeatureMutation;\n+import com.google.android.gnd.model.feature.Point;\n+import com.google.android.gnd.model.form.Element;\n+import com.google.android.gnd.model.form.Field;\n+import com.google.android.gnd.model.form.Field.Type;\n+import com.google.android.gnd.model.form.Form;\n+import com.google.android.gnd.model.form.MultipleChoice;\n+import com.google.android.gnd.model.form.MultipleChoice.Cardinality;\n+import com.google.android.gnd.model.form.Option;\n+import com.google.android.gnd.model.layer.Layer;\n+import com.google.android.gnd.model.layer.Style;\n+import com.google.android.gnd.model.observation.Observation;\n+import com.google.android.gnd.model.observation.ObservationMutation;\n+import com.google.android.gnd.model.observation.ResponseDelta;\n+import com.google.android.gnd.model.observation.ResponseMap;\n+import com.google.android.gnd.model.observation.TextResponse;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import io.reactivex.subscribers.TestSubscriber;\n+import java.util.AbstractCollection;\n+import java.util.Date;\n+import java8.util.Optional;\n+import javax.inject.Inject;\n+import org.hamcrest.MatcherAssert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(application = TestApplication.class)\n+public class LocalDataStoreTest {\n+\n+  private static final User TEST_USER =\n+      User.builder().setId(\"user id\").setEmail(\"user@gmail.com\").setDisplayName(\"user 1\").build();\n+\n+  private static final MultipleChoice TEST_MULTIPLE_CHOICE =\n+      MultipleChoice.newBuilder()\n+          .setCardinality(Cardinality.SELECT_ONE)\n+          .setOptions(\n+              ImmutableList.of(\n+                  Option.newBuilder().setCode(\"a\").setLabel(\"Name\").build(),\n+                  Option.newBuilder().setCode(\"b\").setLabel(\"Age\").build()))\n+          .build();\n+\n+  private static final Field TEST_FIELD =\n+      Field.newBuilder()\n+          .setId(\"field id\")\n+          .setLabel(\"field label\")\n+          .setRequired(false)\n+          .setType(Type.MULTIPLE_CHOICE)\n+          .setMultipleChoice(TEST_MULTIPLE_CHOICE)\n+          .build();\n+\n+  private static final Form TEST_FORM =\n+      Form.newBuilder()\n+          .setId(\"form id\")\n+          .setElements(ImmutableList.of(Element.ofField(TEST_FIELD)))\n+          .build();\n+\n+  private static final Layer TEST_LAYER =\n+      Layer.newBuilder()\n+          .setId(\"layer id\")\n+          .setItemLabel(\"item label\")\n+          .setListHeading(\"heading title\")\n+          .setDefaultStyle(Style.builder().setColor(\"000\").build())\n+          .setForm(TEST_FORM)\n+          .build();\n+\n+  private static final Project TEST_PROJECT =\n+      Project.newBuilder()\n+          .setId(\"project id\")\n+          .setTitle(\"project 1\")\n+          .setDescription(\"foo description\")\n+          .putLayer(\"layer id\", TEST_LAYER)\n+          .build();\n+\n+  private static final Point TEST_POINT =\n+      Point.newBuilder().setLatitude(110.0).setLongitude(-23.1).build();\n+\n+  private static final FeatureMutation TEST_FEATURE_MUTATION =\n+      FeatureMutation.builder()\n+          .setId(1L)\n+          .setFeatureId(\"feature id\")\n+          .setType(Mutation.Type.CREATE)\n+          .setUserId(\"user id\")\n+          .setProjectId(\"project id\")\n+          .setLayerId(\"layer id\")\n+          .setNewLocation(Optional.ofNullable(TEST_POINT))\n+          .setClientTimestamp(new Date())\n+          .build();\n+\n+  private static final ObservationMutation TEST_OBSERVATION_MUTATION =\n+      ObservationMutation.builder()\n+          .setObservationId(\"observation id\")\n+          .setType(Mutation.Type.CREATE)\n+          .setProjectId(\"project id\")\n+          .setFeatureId(\"feature id\")\n+          .setLayerId(\"layer id\")\n+          .setFormId(\"form id\")\n+          .setUserId(\"user id\")\n+          .setResponseDeltas(\n+              ImmutableList.of(\n+                  ResponseDelta.builder()\n+                      .setFieldId(\"field id\")\n+                      .setNewResponse(TextResponse.fromString(\"response for field id\"))\n+                      .build()))\n+          .setClientTimestamp(new Date())\n+          .build();\n+\n+  private static final Tile TEST_PENDING_TILE =\n+      Tile.newBuilder()\n+          .setId(\"id_1\")\n+          .setState(State.PENDING)\n+          .setPath(\"some_path 1\")\n+          .setUrl(\"some_url 1\")\n+          .build();\n+\n+  private static final Tile TEST_DOWNLOADED_TILE =\n+      Tile.newBuilder()\n+          .setId(\"id_2\")\n+          .setState(State.DOWNLOADED)\n+          .setPath(\"some_path 2\")\n+          .setUrl(\"some_url 2\")\n+          .build();\n+\n+  private static final Tile TEST_FAILED_TILE =\n+      Tile.newBuilder()\n+          .setId(\"id_3\")\n+          .setState(State.FAILED)\n+          .setPath(\"some_path 3\")\n+          .setUrl(\"some_url 3\")\n+          .build();\n+\n+  private static final OfflineArea TEST_OFFLINE_AREA =\n+      OfflineArea.newBuilder()\n+          .setId(\"id_1\")\n+          .setBounds(LatLngBounds.builder().include(new LatLng(0.0, 0.0)).build())\n+          .setState(OfflineArea.State.PENDING)\n+          .build();\n+\n+  // This rule makes sure that Room executes all the database operations instantly.\n+  @Rule public InstantTaskExecutorRule instantTaskExecutorRule = new InstantTaskExecutorRule();\n+\n+  @Inject LocalDataStore localDataStore;\n+\n+  private static void assertEqualsIgnoreId(\n+      ObservationMutation expected, ObservationMutation actual) {\n+    // TODO: Id is auto-assigned to ObservationMutation.\n+    //  If we try to give it while inserting, then it causes problems. Improve this behavior.\n+    //  So, copy the id from actual to expected and then compare the objects.\n+    expected = expected.toBuilder().setId(actual.getId()).build();\n+    assertThat(expected).isEqualTo(actual);\n+  }\n+\n+  private static void assertObservation(ObservationMutation mutation, Observation observation) {\n+    assertThat(mutation.getObservationId()).isEqualTo(observation.getId());\n+    assertThat(mutation.getFeatureId()).isEqualTo(observation.getFeature().getId());\n+    assertThat(TEST_USER).isEqualTo(observation.getCreated().getUser());", "originalCommit": "761beb1cb735a763ac3b42a577be73b8274f2cd6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM2NDc3Nw==", "url": "https://github.com/google/ground-android/pull/425#discussion_r412364777", "bodyText": "makes sense. Removing them", "author": "shobhitagarwal1612", "createdAt": "2020-04-21T17:48:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAxNDc5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAxNDkyNg==", "url": "https://github.com/google/ground-android/pull/425#discussion_r411014926", "bodyText": "Same here - the name seems to be missing what is actually being asserted (i.e. or it seems to imply it's just checking that the supplied value is a feature)", "author": "gino-m", "createdAt": "2020-04-19T23:22:34Z", "path": "gnd/src/test/java/com/google/android/gnd/persistence/local/LocalDataStoreTest.java", "diffHunk": "@@ -0,0 +1,480 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.local;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.hamcrest.Matchers.samePropertyValuesAs;\n+\n+import androidx.arch.core.executor.testing.InstantTaskExecutorRule;\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.TestApplication;\n+import com.google.android.gnd.inject.DaggerTestComponent;\n+import com.google.android.gnd.model.Mutation;\n+import com.google.android.gnd.model.Project;\n+import com.google.android.gnd.model.User;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.model.basemap.tile.Tile.State;\n+import com.google.android.gnd.model.feature.Feature;\n+import com.google.android.gnd.model.feature.FeatureMutation;\n+import com.google.android.gnd.model.feature.Point;\n+import com.google.android.gnd.model.form.Element;\n+import com.google.android.gnd.model.form.Field;\n+import com.google.android.gnd.model.form.Field.Type;\n+import com.google.android.gnd.model.form.Form;\n+import com.google.android.gnd.model.form.MultipleChoice;\n+import com.google.android.gnd.model.form.MultipleChoice.Cardinality;\n+import com.google.android.gnd.model.form.Option;\n+import com.google.android.gnd.model.layer.Layer;\n+import com.google.android.gnd.model.layer.Style;\n+import com.google.android.gnd.model.observation.Observation;\n+import com.google.android.gnd.model.observation.ObservationMutation;\n+import com.google.android.gnd.model.observation.ResponseDelta;\n+import com.google.android.gnd.model.observation.ResponseMap;\n+import com.google.android.gnd.model.observation.TextResponse;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import io.reactivex.subscribers.TestSubscriber;\n+import java.util.AbstractCollection;\n+import java.util.Date;\n+import java8.util.Optional;\n+import javax.inject.Inject;\n+import org.hamcrest.MatcherAssert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(application = TestApplication.class)\n+public class LocalDataStoreTest {\n+\n+  private static final User TEST_USER =\n+      User.builder().setId(\"user id\").setEmail(\"user@gmail.com\").setDisplayName(\"user 1\").build();\n+\n+  private static final MultipleChoice TEST_MULTIPLE_CHOICE =\n+      MultipleChoice.newBuilder()\n+          .setCardinality(Cardinality.SELECT_ONE)\n+          .setOptions(\n+              ImmutableList.of(\n+                  Option.newBuilder().setCode(\"a\").setLabel(\"Name\").build(),\n+                  Option.newBuilder().setCode(\"b\").setLabel(\"Age\").build()))\n+          .build();\n+\n+  private static final Field TEST_FIELD =\n+      Field.newBuilder()\n+          .setId(\"field id\")\n+          .setLabel(\"field label\")\n+          .setRequired(false)\n+          .setType(Type.MULTIPLE_CHOICE)\n+          .setMultipleChoice(TEST_MULTIPLE_CHOICE)\n+          .build();\n+\n+  private static final Form TEST_FORM =\n+      Form.newBuilder()\n+          .setId(\"form id\")\n+          .setElements(ImmutableList.of(Element.ofField(TEST_FIELD)))\n+          .build();\n+\n+  private static final Layer TEST_LAYER =\n+      Layer.newBuilder()\n+          .setId(\"layer id\")\n+          .setItemLabel(\"item label\")\n+          .setListHeading(\"heading title\")\n+          .setDefaultStyle(Style.builder().setColor(\"000\").build())\n+          .setForm(TEST_FORM)\n+          .build();\n+\n+  private static final Project TEST_PROJECT =\n+      Project.newBuilder()\n+          .setId(\"project id\")\n+          .setTitle(\"project 1\")\n+          .setDescription(\"foo description\")\n+          .putLayer(\"layer id\", TEST_LAYER)\n+          .build();\n+\n+  private static final Point TEST_POINT =\n+      Point.newBuilder().setLatitude(110.0).setLongitude(-23.1).build();\n+\n+  private static final FeatureMutation TEST_FEATURE_MUTATION =\n+      FeatureMutation.builder()\n+          .setId(1L)\n+          .setFeatureId(\"feature id\")\n+          .setType(Mutation.Type.CREATE)\n+          .setUserId(\"user id\")\n+          .setProjectId(\"project id\")\n+          .setLayerId(\"layer id\")\n+          .setNewLocation(Optional.ofNullable(TEST_POINT))\n+          .setClientTimestamp(new Date())\n+          .build();\n+\n+  private static final ObservationMutation TEST_OBSERVATION_MUTATION =\n+      ObservationMutation.builder()\n+          .setObservationId(\"observation id\")\n+          .setType(Mutation.Type.CREATE)\n+          .setProjectId(\"project id\")\n+          .setFeatureId(\"feature id\")\n+          .setLayerId(\"layer id\")\n+          .setFormId(\"form id\")\n+          .setUserId(\"user id\")\n+          .setResponseDeltas(\n+              ImmutableList.of(\n+                  ResponseDelta.builder()\n+                      .setFieldId(\"field id\")\n+                      .setNewResponse(TextResponse.fromString(\"response for field id\"))\n+                      .build()))\n+          .setClientTimestamp(new Date())\n+          .build();\n+\n+  private static final Tile TEST_PENDING_TILE =\n+      Tile.newBuilder()\n+          .setId(\"id_1\")\n+          .setState(State.PENDING)\n+          .setPath(\"some_path 1\")\n+          .setUrl(\"some_url 1\")\n+          .build();\n+\n+  private static final Tile TEST_DOWNLOADED_TILE =\n+      Tile.newBuilder()\n+          .setId(\"id_2\")\n+          .setState(State.DOWNLOADED)\n+          .setPath(\"some_path 2\")\n+          .setUrl(\"some_url 2\")\n+          .build();\n+\n+  private static final Tile TEST_FAILED_TILE =\n+      Tile.newBuilder()\n+          .setId(\"id_3\")\n+          .setState(State.FAILED)\n+          .setPath(\"some_path 3\")\n+          .setUrl(\"some_url 3\")\n+          .build();\n+\n+  private static final OfflineArea TEST_OFFLINE_AREA =\n+      OfflineArea.newBuilder()\n+          .setId(\"id_1\")\n+          .setBounds(LatLngBounds.builder().include(new LatLng(0.0, 0.0)).build())\n+          .setState(OfflineArea.State.PENDING)\n+          .build();\n+\n+  // This rule makes sure that Room executes all the database operations instantly.\n+  @Rule public InstantTaskExecutorRule instantTaskExecutorRule = new InstantTaskExecutorRule();\n+\n+  @Inject LocalDataStore localDataStore;\n+\n+  private static void assertEqualsIgnoreId(\n+      ObservationMutation expected, ObservationMutation actual) {\n+    // TODO: Id is auto-assigned to ObservationMutation.\n+    //  If we try to give it while inserting, then it causes problems. Improve this behavior.\n+    //  So, copy the id from actual to expected and then compare the objects.\n+    expected = expected.toBuilder().setId(actual.getId()).build();\n+    assertThat(expected).isEqualTo(actual);\n+  }\n+\n+  private static void assertObservation(ObservationMutation mutation, Observation observation) {\n+    assertThat(mutation.getObservationId()).isEqualTo(observation.getId());\n+    assertThat(mutation.getFeatureId()).isEqualTo(observation.getFeature().getId());\n+    assertThat(TEST_USER).isEqualTo(observation.getCreated().getUser());\n+    assertThat(TEST_FORM).isEqualTo(observation.getForm());\n+    assertThat(TEST_PROJECT).isEqualTo(observation.getProject());\n+    assertThat(TEST_USER).isEqualTo(observation.getLastModified().getUser());\n+    MatcherAssert.assertThat(\n+        ResponseMap.builder().applyDeltas(mutation.getResponseDeltas()).build(),\n+        samePropertyValuesAs(observation.getResponses()));\n+  }\n+\n+  private static void assertFeature(String featureId, Point point, Feature feature) {", "originalCommit": "761beb1cb735a763ac3b42a577be73b8274f2cd6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAxNDk3Nw==", "url": "https://github.com/google/ground-android/pull/425#discussion_r411014977", "bodyText": "Same comment here re constants.", "author": "gino-m", "createdAt": "2020-04-19T23:22:50Z", "path": "gnd/src/test/java/com/google/android/gnd/persistence/local/LocalDataStoreTest.java", "diffHunk": "@@ -0,0 +1,480 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.local;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.hamcrest.Matchers.samePropertyValuesAs;\n+\n+import androidx.arch.core.executor.testing.InstantTaskExecutorRule;\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.TestApplication;\n+import com.google.android.gnd.inject.DaggerTestComponent;\n+import com.google.android.gnd.model.Mutation;\n+import com.google.android.gnd.model.Project;\n+import com.google.android.gnd.model.User;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.model.basemap.tile.Tile.State;\n+import com.google.android.gnd.model.feature.Feature;\n+import com.google.android.gnd.model.feature.FeatureMutation;\n+import com.google.android.gnd.model.feature.Point;\n+import com.google.android.gnd.model.form.Element;\n+import com.google.android.gnd.model.form.Field;\n+import com.google.android.gnd.model.form.Field.Type;\n+import com.google.android.gnd.model.form.Form;\n+import com.google.android.gnd.model.form.MultipleChoice;\n+import com.google.android.gnd.model.form.MultipleChoice.Cardinality;\n+import com.google.android.gnd.model.form.Option;\n+import com.google.android.gnd.model.layer.Layer;\n+import com.google.android.gnd.model.layer.Style;\n+import com.google.android.gnd.model.observation.Observation;\n+import com.google.android.gnd.model.observation.ObservationMutation;\n+import com.google.android.gnd.model.observation.ResponseDelta;\n+import com.google.android.gnd.model.observation.ResponseMap;\n+import com.google.android.gnd.model.observation.TextResponse;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import io.reactivex.subscribers.TestSubscriber;\n+import java.util.AbstractCollection;\n+import java.util.Date;\n+import java8.util.Optional;\n+import javax.inject.Inject;\n+import org.hamcrest.MatcherAssert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(application = TestApplication.class)\n+public class LocalDataStoreTest {\n+\n+  private static final User TEST_USER =\n+      User.builder().setId(\"user id\").setEmail(\"user@gmail.com\").setDisplayName(\"user 1\").build();\n+\n+  private static final MultipleChoice TEST_MULTIPLE_CHOICE =\n+      MultipleChoice.newBuilder()\n+          .setCardinality(Cardinality.SELECT_ONE)\n+          .setOptions(\n+              ImmutableList.of(\n+                  Option.newBuilder().setCode(\"a\").setLabel(\"Name\").build(),\n+                  Option.newBuilder().setCode(\"b\").setLabel(\"Age\").build()))\n+          .build();\n+\n+  private static final Field TEST_FIELD =\n+      Field.newBuilder()\n+          .setId(\"field id\")\n+          .setLabel(\"field label\")\n+          .setRequired(false)\n+          .setType(Type.MULTIPLE_CHOICE)\n+          .setMultipleChoice(TEST_MULTIPLE_CHOICE)\n+          .build();\n+\n+  private static final Form TEST_FORM =\n+      Form.newBuilder()\n+          .setId(\"form id\")\n+          .setElements(ImmutableList.of(Element.ofField(TEST_FIELD)))\n+          .build();\n+\n+  private static final Layer TEST_LAYER =\n+      Layer.newBuilder()\n+          .setId(\"layer id\")\n+          .setItemLabel(\"item label\")\n+          .setListHeading(\"heading title\")\n+          .setDefaultStyle(Style.builder().setColor(\"000\").build())\n+          .setForm(TEST_FORM)\n+          .build();\n+\n+  private static final Project TEST_PROJECT =\n+      Project.newBuilder()\n+          .setId(\"project id\")\n+          .setTitle(\"project 1\")\n+          .setDescription(\"foo description\")\n+          .putLayer(\"layer id\", TEST_LAYER)\n+          .build();\n+\n+  private static final Point TEST_POINT =\n+      Point.newBuilder().setLatitude(110.0).setLongitude(-23.1).build();\n+\n+  private static final FeatureMutation TEST_FEATURE_MUTATION =\n+      FeatureMutation.builder()\n+          .setId(1L)\n+          .setFeatureId(\"feature id\")\n+          .setType(Mutation.Type.CREATE)\n+          .setUserId(\"user id\")\n+          .setProjectId(\"project id\")\n+          .setLayerId(\"layer id\")\n+          .setNewLocation(Optional.ofNullable(TEST_POINT))\n+          .setClientTimestamp(new Date())\n+          .build();\n+\n+  private static final ObservationMutation TEST_OBSERVATION_MUTATION =\n+      ObservationMutation.builder()\n+          .setObservationId(\"observation id\")\n+          .setType(Mutation.Type.CREATE)\n+          .setProjectId(\"project id\")\n+          .setFeatureId(\"feature id\")\n+          .setLayerId(\"layer id\")\n+          .setFormId(\"form id\")\n+          .setUserId(\"user id\")\n+          .setResponseDeltas(\n+              ImmutableList.of(\n+                  ResponseDelta.builder()\n+                      .setFieldId(\"field id\")\n+                      .setNewResponse(TextResponse.fromString(\"response for field id\"))\n+                      .build()))\n+          .setClientTimestamp(new Date())\n+          .build();\n+\n+  private static final Tile TEST_PENDING_TILE =\n+      Tile.newBuilder()\n+          .setId(\"id_1\")\n+          .setState(State.PENDING)\n+          .setPath(\"some_path 1\")\n+          .setUrl(\"some_url 1\")\n+          .build();\n+\n+  private static final Tile TEST_DOWNLOADED_TILE =\n+      Tile.newBuilder()\n+          .setId(\"id_2\")\n+          .setState(State.DOWNLOADED)\n+          .setPath(\"some_path 2\")\n+          .setUrl(\"some_url 2\")\n+          .build();\n+\n+  private static final Tile TEST_FAILED_TILE =\n+      Tile.newBuilder()\n+          .setId(\"id_3\")\n+          .setState(State.FAILED)\n+          .setPath(\"some_path 3\")\n+          .setUrl(\"some_url 3\")\n+          .build();\n+\n+  private static final OfflineArea TEST_OFFLINE_AREA =\n+      OfflineArea.newBuilder()\n+          .setId(\"id_1\")\n+          .setBounds(LatLngBounds.builder().include(new LatLng(0.0, 0.0)).build())\n+          .setState(OfflineArea.State.PENDING)\n+          .build();\n+\n+  // This rule makes sure that Room executes all the database operations instantly.\n+  @Rule public InstantTaskExecutorRule instantTaskExecutorRule = new InstantTaskExecutorRule();\n+\n+  @Inject LocalDataStore localDataStore;\n+\n+  private static void assertEqualsIgnoreId(\n+      ObservationMutation expected, ObservationMutation actual) {\n+    // TODO: Id is auto-assigned to ObservationMutation.\n+    //  If we try to give it while inserting, then it causes problems. Improve this behavior.\n+    //  So, copy the id from actual to expected and then compare the objects.\n+    expected = expected.toBuilder().setId(actual.getId()).build();\n+    assertThat(expected).isEqualTo(actual);\n+  }\n+\n+  private static void assertObservation(ObservationMutation mutation, Observation observation) {\n+    assertThat(mutation.getObservationId()).isEqualTo(observation.getId());\n+    assertThat(mutation.getFeatureId()).isEqualTo(observation.getFeature().getId());\n+    assertThat(TEST_USER).isEqualTo(observation.getCreated().getUser());\n+    assertThat(TEST_FORM).isEqualTo(observation.getForm());\n+    assertThat(TEST_PROJECT).isEqualTo(observation.getProject());\n+    assertThat(TEST_USER).isEqualTo(observation.getLastModified().getUser());\n+    MatcherAssert.assertThat(\n+        ResponseMap.builder().applyDeltas(mutation.getResponseDeltas()).build(),\n+        samePropertyValuesAs(observation.getResponses()));\n+  }\n+\n+  private static void assertFeature(String featureId, Point point, Feature feature) {\n+    assertThat(featureId).isEqualTo(feature.getId());\n+    assertThat(TEST_PROJECT).isEqualTo(feature.getProject());", "originalCommit": "761beb1cb735a763ac3b42a577be73b8274f2cd6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAxNTI4NQ==", "url": "https://github.com/google/ground-android/pull/425#discussion_r411015285", "bodyText": "In testDeleteProject we checked that the project was actually deleted. Should we do the same here for user insertion? The method could then be called testInsertAndGetUser and the next method deleted.", "author": "gino-m", "createdAt": "2020-04-19T23:24:11Z", "path": "gnd/src/test/java/com/google/android/gnd/persistence/local/LocalDataStoreTest.java", "diffHunk": "@@ -0,0 +1,480 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.local;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.hamcrest.Matchers.samePropertyValuesAs;\n+\n+import androidx.arch.core.executor.testing.InstantTaskExecutorRule;\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.TestApplication;\n+import com.google.android.gnd.inject.DaggerTestComponent;\n+import com.google.android.gnd.model.Mutation;\n+import com.google.android.gnd.model.Project;\n+import com.google.android.gnd.model.User;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.model.basemap.tile.Tile.State;\n+import com.google.android.gnd.model.feature.Feature;\n+import com.google.android.gnd.model.feature.FeatureMutation;\n+import com.google.android.gnd.model.feature.Point;\n+import com.google.android.gnd.model.form.Element;\n+import com.google.android.gnd.model.form.Field;\n+import com.google.android.gnd.model.form.Field.Type;\n+import com.google.android.gnd.model.form.Form;\n+import com.google.android.gnd.model.form.MultipleChoice;\n+import com.google.android.gnd.model.form.MultipleChoice.Cardinality;\n+import com.google.android.gnd.model.form.Option;\n+import com.google.android.gnd.model.layer.Layer;\n+import com.google.android.gnd.model.layer.Style;\n+import com.google.android.gnd.model.observation.Observation;\n+import com.google.android.gnd.model.observation.ObservationMutation;\n+import com.google.android.gnd.model.observation.ResponseDelta;\n+import com.google.android.gnd.model.observation.ResponseMap;\n+import com.google.android.gnd.model.observation.TextResponse;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import io.reactivex.subscribers.TestSubscriber;\n+import java.util.AbstractCollection;\n+import java.util.Date;\n+import java8.util.Optional;\n+import javax.inject.Inject;\n+import org.hamcrest.MatcherAssert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(application = TestApplication.class)\n+public class LocalDataStoreTest {\n+\n+  private static final User TEST_USER =\n+      User.builder().setId(\"user id\").setEmail(\"user@gmail.com\").setDisplayName(\"user 1\").build();\n+\n+  private static final MultipleChoice TEST_MULTIPLE_CHOICE =\n+      MultipleChoice.newBuilder()\n+          .setCardinality(Cardinality.SELECT_ONE)\n+          .setOptions(\n+              ImmutableList.of(\n+                  Option.newBuilder().setCode(\"a\").setLabel(\"Name\").build(),\n+                  Option.newBuilder().setCode(\"b\").setLabel(\"Age\").build()))\n+          .build();\n+\n+  private static final Field TEST_FIELD =\n+      Field.newBuilder()\n+          .setId(\"field id\")\n+          .setLabel(\"field label\")\n+          .setRequired(false)\n+          .setType(Type.MULTIPLE_CHOICE)\n+          .setMultipleChoice(TEST_MULTIPLE_CHOICE)\n+          .build();\n+\n+  private static final Form TEST_FORM =\n+      Form.newBuilder()\n+          .setId(\"form id\")\n+          .setElements(ImmutableList.of(Element.ofField(TEST_FIELD)))\n+          .build();\n+\n+  private static final Layer TEST_LAYER =\n+      Layer.newBuilder()\n+          .setId(\"layer id\")\n+          .setItemLabel(\"item label\")\n+          .setListHeading(\"heading title\")\n+          .setDefaultStyle(Style.builder().setColor(\"000\").build())\n+          .setForm(TEST_FORM)\n+          .build();\n+\n+  private static final Project TEST_PROJECT =\n+      Project.newBuilder()\n+          .setId(\"project id\")\n+          .setTitle(\"project 1\")\n+          .setDescription(\"foo description\")\n+          .putLayer(\"layer id\", TEST_LAYER)\n+          .build();\n+\n+  private static final Point TEST_POINT =\n+      Point.newBuilder().setLatitude(110.0).setLongitude(-23.1).build();\n+\n+  private static final FeatureMutation TEST_FEATURE_MUTATION =\n+      FeatureMutation.builder()\n+          .setId(1L)\n+          .setFeatureId(\"feature id\")\n+          .setType(Mutation.Type.CREATE)\n+          .setUserId(\"user id\")\n+          .setProjectId(\"project id\")\n+          .setLayerId(\"layer id\")\n+          .setNewLocation(Optional.ofNullable(TEST_POINT))\n+          .setClientTimestamp(new Date())\n+          .build();\n+\n+  private static final ObservationMutation TEST_OBSERVATION_MUTATION =\n+      ObservationMutation.builder()\n+          .setObservationId(\"observation id\")\n+          .setType(Mutation.Type.CREATE)\n+          .setProjectId(\"project id\")\n+          .setFeatureId(\"feature id\")\n+          .setLayerId(\"layer id\")\n+          .setFormId(\"form id\")\n+          .setUserId(\"user id\")\n+          .setResponseDeltas(\n+              ImmutableList.of(\n+                  ResponseDelta.builder()\n+                      .setFieldId(\"field id\")\n+                      .setNewResponse(TextResponse.fromString(\"response for field id\"))\n+                      .build()))\n+          .setClientTimestamp(new Date())\n+          .build();\n+\n+  private static final Tile TEST_PENDING_TILE =\n+      Tile.newBuilder()\n+          .setId(\"id_1\")\n+          .setState(State.PENDING)\n+          .setPath(\"some_path 1\")\n+          .setUrl(\"some_url 1\")\n+          .build();\n+\n+  private static final Tile TEST_DOWNLOADED_TILE =\n+      Tile.newBuilder()\n+          .setId(\"id_2\")\n+          .setState(State.DOWNLOADED)\n+          .setPath(\"some_path 2\")\n+          .setUrl(\"some_url 2\")\n+          .build();\n+\n+  private static final Tile TEST_FAILED_TILE =\n+      Tile.newBuilder()\n+          .setId(\"id_3\")\n+          .setState(State.FAILED)\n+          .setPath(\"some_path 3\")\n+          .setUrl(\"some_url 3\")\n+          .build();\n+\n+  private static final OfflineArea TEST_OFFLINE_AREA =\n+      OfflineArea.newBuilder()\n+          .setId(\"id_1\")\n+          .setBounds(LatLngBounds.builder().include(new LatLng(0.0, 0.0)).build())\n+          .setState(OfflineArea.State.PENDING)\n+          .build();\n+\n+  // This rule makes sure that Room executes all the database operations instantly.\n+  @Rule public InstantTaskExecutorRule instantTaskExecutorRule = new InstantTaskExecutorRule();\n+\n+  @Inject LocalDataStore localDataStore;\n+\n+  private static void assertEqualsIgnoreId(\n+      ObservationMutation expected, ObservationMutation actual) {\n+    // TODO: Id is auto-assigned to ObservationMutation.\n+    //  If we try to give it while inserting, then it causes problems. Improve this behavior.\n+    //  So, copy the id from actual to expected and then compare the objects.\n+    expected = expected.toBuilder().setId(actual.getId()).build();\n+    assertThat(expected).isEqualTo(actual);\n+  }\n+\n+  private static void assertObservation(ObservationMutation mutation, Observation observation) {\n+    assertThat(mutation.getObservationId()).isEqualTo(observation.getId());\n+    assertThat(mutation.getFeatureId()).isEqualTo(observation.getFeature().getId());\n+    assertThat(TEST_USER).isEqualTo(observation.getCreated().getUser());\n+    assertThat(TEST_FORM).isEqualTo(observation.getForm());\n+    assertThat(TEST_PROJECT).isEqualTo(observation.getProject());\n+    assertThat(TEST_USER).isEqualTo(observation.getLastModified().getUser());\n+    MatcherAssert.assertThat(\n+        ResponseMap.builder().applyDeltas(mutation.getResponseDeltas()).build(),\n+        samePropertyValuesAs(observation.getResponses()));\n+  }\n+\n+  private static void assertFeature(String featureId, Point point, Feature feature) {\n+    assertThat(featureId).isEqualTo(feature.getId());\n+    assertThat(TEST_PROJECT).isEqualTo(feature.getProject());\n+    assertThat(TEST_LAYER.getItemLabel()).isEqualTo(feature.getTitle());\n+    assertThat(TEST_LAYER).isEqualTo(feature.getLayer());\n+    assertThat(feature.getCustomId()).isNull();\n+    assertThat(feature.getCaption()).isNull();\n+    assertThat(point).isEqualTo(feature.getPoint());\n+    assertThat(TEST_USER).isEqualTo(feature.getCreated().getUser());\n+    assertThat(TEST_USER).isEqualTo(feature.getLastModified().getUser());\n+  }\n+\n+  @Before\n+  public void setUp() {\n+    DaggerTestComponent.create().inject(this);\n+  }\n+\n+  @Test\n+  public void testInsertProject() {\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).test().assertComplete();\n+  }\n+\n+  @Test\n+  public void testGetProjects() {\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+    localDataStore.getProjects().test().assertValue(ImmutableList.of(TEST_PROJECT));\n+  }\n+\n+  @Test\n+  public void testGetProjectById() {\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+    localDataStore.getProjectById(\"project id\").test().assertValue(TEST_PROJECT);\n+  }\n+\n+  @Test\n+  public void testDeleteProject() {\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+    localDataStore.deleteProject(TEST_PROJECT).test().assertComplete();\n+    localDataStore.getProjects().test().assertValue(AbstractCollection::isEmpty);\n+  }\n+\n+  @Test\n+  public void testInsertUser() {\n+    localDataStore.insertOrUpdateUser(TEST_USER).test().assertComplete();", "originalCommit": "761beb1cb735a763ac3b42a577be73b8274f2cd6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAxNjA4MQ==", "url": "https://github.com/google/ground-android/pull/425#discussion_r411016081", "bodyText": "Since we check this at the end of the method, do we also need to check it here?", "author": "gino-m", "createdAt": "2020-04-19T23:28:42Z", "path": "gnd/src/test/java/com/google/android/gnd/persistence/local/LocalDataStoreTest.java", "diffHunk": "@@ -0,0 +1,480 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.local;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.hamcrest.Matchers.samePropertyValuesAs;\n+\n+import androidx.arch.core.executor.testing.InstantTaskExecutorRule;\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.TestApplication;\n+import com.google.android.gnd.inject.DaggerTestComponent;\n+import com.google.android.gnd.model.Mutation;\n+import com.google.android.gnd.model.Project;\n+import com.google.android.gnd.model.User;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.model.basemap.tile.Tile.State;\n+import com.google.android.gnd.model.feature.Feature;\n+import com.google.android.gnd.model.feature.FeatureMutation;\n+import com.google.android.gnd.model.feature.Point;\n+import com.google.android.gnd.model.form.Element;\n+import com.google.android.gnd.model.form.Field;\n+import com.google.android.gnd.model.form.Field.Type;\n+import com.google.android.gnd.model.form.Form;\n+import com.google.android.gnd.model.form.MultipleChoice;\n+import com.google.android.gnd.model.form.MultipleChoice.Cardinality;\n+import com.google.android.gnd.model.form.Option;\n+import com.google.android.gnd.model.layer.Layer;\n+import com.google.android.gnd.model.layer.Style;\n+import com.google.android.gnd.model.observation.Observation;\n+import com.google.android.gnd.model.observation.ObservationMutation;\n+import com.google.android.gnd.model.observation.ResponseDelta;\n+import com.google.android.gnd.model.observation.ResponseMap;\n+import com.google.android.gnd.model.observation.TextResponse;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import io.reactivex.subscribers.TestSubscriber;\n+import java.util.AbstractCollection;\n+import java.util.Date;\n+import java8.util.Optional;\n+import javax.inject.Inject;\n+import org.hamcrest.MatcherAssert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(application = TestApplication.class)\n+public class LocalDataStoreTest {\n+\n+  private static final User TEST_USER =\n+      User.builder().setId(\"user id\").setEmail(\"user@gmail.com\").setDisplayName(\"user 1\").build();\n+\n+  private static final MultipleChoice TEST_MULTIPLE_CHOICE =\n+      MultipleChoice.newBuilder()\n+          .setCardinality(Cardinality.SELECT_ONE)\n+          .setOptions(\n+              ImmutableList.of(\n+                  Option.newBuilder().setCode(\"a\").setLabel(\"Name\").build(),\n+                  Option.newBuilder().setCode(\"b\").setLabel(\"Age\").build()))\n+          .build();\n+\n+  private static final Field TEST_FIELD =\n+      Field.newBuilder()\n+          .setId(\"field id\")\n+          .setLabel(\"field label\")\n+          .setRequired(false)\n+          .setType(Type.MULTIPLE_CHOICE)\n+          .setMultipleChoice(TEST_MULTIPLE_CHOICE)\n+          .build();\n+\n+  private static final Form TEST_FORM =\n+      Form.newBuilder()\n+          .setId(\"form id\")\n+          .setElements(ImmutableList.of(Element.ofField(TEST_FIELD)))\n+          .build();\n+\n+  private static final Layer TEST_LAYER =\n+      Layer.newBuilder()\n+          .setId(\"layer id\")\n+          .setItemLabel(\"item label\")\n+          .setListHeading(\"heading title\")\n+          .setDefaultStyle(Style.builder().setColor(\"000\").build())\n+          .setForm(TEST_FORM)\n+          .build();\n+\n+  private static final Project TEST_PROJECT =\n+      Project.newBuilder()\n+          .setId(\"project id\")\n+          .setTitle(\"project 1\")\n+          .setDescription(\"foo description\")\n+          .putLayer(\"layer id\", TEST_LAYER)\n+          .build();\n+\n+  private static final Point TEST_POINT =\n+      Point.newBuilder().setLatitude(110.0).setLongitude(-23.1).build();\n+\n+  private static final FeatureMutation TEST_FEATURE_MUTATION =\n+      FeatureMutation.builder()\n+          .setId(1L)\n+          .setFeatureId(\"feature id\")\n+          .setType(Mutation.Type.CREATE)\n+          .setUserId(\"user id\")\n+          .setProjectId(\"project id\")\n+          .setLayerId(\"layer id\")\n+          .setNewLocation(Optional.ofNullable(TEST_POINT))\n+          .setClientTimestamp(new Date())\n+          .build();\n+\n+  private static final ObservationMutation TEST_OBSERVATION_MUTATION =\n+      ObservationMutation.builder()\n+          .setObservationId(\"observation id\")\n+          .setType(Mutation.Type.CREATE)\n+          .setProjectId(\"project id\")\n+          .setFeatureId(\"feature id\")\n+          .setLayerId(\"layer id\")\n+          .setFormId(\"form id\")\n+          .setUserId(\"user id\")\n+          .setResponseDeltas(\n+              ImmutableList.of(\n+                  ResponseDelta.builder()\n+                      .setFieldId(\"field id\")\n+                      .setNewResponse(TextResponse.fromString(\"response for field id\"))\n+                      .build()))\n+          .setClientTimestamp(new Date())\n+          .build();\n+\n+  private static final Tile TEST_PENDING_TILE =\n+      Tile.newBuilder()\n+          .setId(\"id_1\")\n+          .setState(State.PENDING)\n+          .setPath(\"some_path 1\")\n+          .setUrl(\"some_url 1\")\n+          .build();\n+\n+  private static final Tile TEST_DOWNLOADED_TILE =\n+      Tile.newBuilder()\n+          .setId(\"id_2\")\n+          .setState(State.DOWNLOADED)\n+          .setPath(\"some_path 2\")\n+          .setUrl(\"some_url 2\")\n+          .build();\n+\n+  private static final Tile TEST_FAILED_TILE =\n+      Tile.newBuilder()\n+          .setId(\"id_3\")\n+          .setState(State.FAILED)\n+          .setPath(\"some_path 3\")\n+          .setUrl(\"some_url 3\")\n+          .build();\n+\n+  private static final OfflineArea TEST_OFFLINE_AREA =\n+      OfflineArea.newBuilder()\n+          .setId(\"id_1\")\n+          .setBounds(LatLngBounds.builder().include(new LatLng(0.0, 0.0)).build())\n+          .setState(OfflineArea.State.PENDING)\n+          .build();\n+\n+  // This rule makes sure that Room executes all the database operations instantly.\n+  @Rule public InstantTaskExecutorRule instantTaskExecutorRule = new InstantTaskExecutorRule();\n+\n+  @Inject LocalDataStore localDataStore;\n+\n+  private static void assertEqualsIgnoreId(\n+      ObservationMutation expected, ObservationMutation actual) {\n+    // TODO: Id is auto-assigned to ObservationMutation.\n+    //  If we try to give it while inserting, then it causes problems. Improve this behavior.\n+    //  So, copy the id from actual to expected and then compare the objects.\n+    expected = expected.toBuilder().setId(actual.getId()).build();\n+    assertThat(expected).isEqualTo(actual);\n+  }\n+\n+  private static void assertObservation(ObservationMutation mutation, Observation observation) {\n+    assertThat(mutation.getObservationId()).isEqualTo(observation.getId());\n+    assertThat(mutation.getFeatureId()).isEqualTo(observation.getFeature().getId());\n+    assertThat(TEST_USER).isEqualTo(observation.getCreated().getUser());\n+    assertThat(TEST_FORM).isEqualTo(observation.getForm());\n+    assertThat(TEST_PROJECT).isEqualTo(observation.getProject());\n+    assertThat(TEST_USER).isEqualTo(observation.getLastModified().getUser());\n+    MatcherAssert.assertThat(\n+        ResponseMap.builder().applyDeltas(mutation.getResponseDeltas()).build(),\n+        samePropertyValuesAs(observation.getResponses()));\n+  }\n+\n+  private static void assertFeature(String featureId, Point point, Feature feature) {\n+    assertThat(featureId).isEqualTo(feature.getId());\n+    assertThat(TEST_PROJECT).isEqualTo(feature.getProject());\n+    assertThat(TEST_LAYER.getItemLabel()).isEqualTo(feature.getTitle());\n+    assertThat(TEST_LAYER).isEqualTo(feature.getLayer());\n+    assertThat(feature.getCustomId()).isNull();\n+    assertThat(feature.getCaption()).isNull();\n+    assertThat(point).isEqualTo(feature.getPoint());\n+    assertThat(TEST_USER).isEqualTo(feature.getCreated().getUser());\n+    assertThat(TEST_USER).isEqualTo(feature.getLastModified().getUser());\n+  }\n+\n+  @Before\n+  public void setUp() {\n+    DaggerTestComponent.create().inject(this);\n+  }\n+\n+  @Test\n+  public void testInsertProject() {\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).test().assertComplete();\n+  }\n+\n+  @Test\n+  public void testGetProjects() {\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+    localDataStore.getProjects().test().assertValue(ImmutableList.of(TEST_PROJECT));\n+  }\n+\n+  @Test\n+  public void testGetProjectById() {\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+    localDataStore.getProjectById(\"project id\").test().assertValue(TEST_PROJECT);\n+  }\n+\n+  @Test\n+  public void testDeleteProject() {\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+    localDataStore.deleteProject(TEST_PROJECT).test().assertComplete();\n+    localDataStore.getProjects().test().assertValue(AbstractCollection::isEmpty);\n+  }\n+\n+  @Test\n+  public void testInsertUser() {\n+    localDataStore.insertOrUpdateUser(TEST_USER).test().assertComplete();\n+  }\n+\n+  @Test\n+  public void testGetUser() {\n+    localDataStore.insertOrUpdateUser(TEST_USER).blockingAwait();\n+    localDataStore.getUser(\"user id\").test().assertValue(TEST_USER);\n+  }\n+\n+  @Test\n+  public void testApplyAndEnqueue_featureMutation() {\n+    localDataStore.insertOrUpdateUser(TEST_USER).blockingAwait();\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+\n+    localDataStore.applyAndEnqueue(TEST_FEATURE_MUTATION).test().assertComplete();\n+\n+    // assert that mutation is saved to local database\n+    localDataStore\n+        .getPendingMutations(\"feature id\")\n+        .test()\n+        .assertValue(ImmutableList.of(TEST_FEATURE_MUTATION));\n+\n+    // assert feature is saved to local database\n+    Feature feature = localDataStore.getFeature(TEST_PROJECT, \"feature id\").blockingGet();\n+    assertFeature(\"feature id\", TEST_POINT, feature);\n+  }\n+\n+  @Test\n+  public void testGetFeaturesOnceAndStream() {\n+    localDataStore.insertOrUpdateUser(TEST_USER).blockingAwait();\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+\n+    TestSubscriber<ImmutableSet<Feature>> subscriber =\n+        localDataStore.getFeaturesOnceAndStream(TEST_PROJECT).test();\n+\n+    subscriber.assertValueCount(1);\n+    subscriber.assertValueAt(0, AbstractCollection::isEmpty);", "originalCommit": "761beb1cb735a763ac3b42a577be73b8274f2cd6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAxNjEzOA==", "url": "https://github.com/google/ground-android/pull/425#discussion_r411016138", "bodyText": "Please inline this variable since it always contains a constant.", "author": "gino-m", "createdAt": "2020-04-19T23:28:56Z", "path": "gnd/src/test/java/com/google/android/gnd/persistence/local/LocalDataStoreTest.java", "diffHunk": "@@ -0,0 +1,480 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.local;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.hamcrest.Matchers.samePropertyValuesAs;\n+\n+import androidx.arch.core.executor.testing.InstantTaskExecutorRule;\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.TestApplication;\n+import com.google.android.gnd.inject.DaggerTestComponent;\n+import com.google.android.gnd.model.Mutation;\n+import com.google.android.gnd.model.Project;\n+import com.google.android.gnd.model.User;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.model.basemap.tile.Tile.State;\n+import com.google.android.gnd.model.feature.Feature;\n+import com.google.android.gnd.model.feature.FeatureMutation;\n+import com.google.android.gnd.model.feature.Point;\n+import com.google.android.gnd.model.form.Element;\n+import com.google.android.gnd.model.form.Field;\n+import com.google.android.gnd.model.form.Field.Type;\n+import com.google.android.gnd.model.form.Form;\n+import com.google.android.gnd.model.form.MultipleChoice;\n+import com.google.android.gnd.model.form.MultipleChoice.Cardinality;\n+import com.google.android.gnd.model.form.Option;\n+import com.google.android.gnd.model.layer.Layer;\n+import com.google.android.gnd.model.layer.Style;\n+import com.google.android.gnd.model.observation.Observation;\n+import com.google.android.gnd.model.observation.ObservationMutation;\n+import com.google.android.gnd.model.observation.ResponseDelta;\n+import com.google.android.gnd.model.observation.ResponseMap;\n+import com.google.android.gnd.model.observation.TextResponse;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import io.reactivex.subscribers.TestSubscriber;\n+import java.util.AbstractCollection;\n+import java.util.Date;\n+import java8.util.Optional;\n+import javax.inject.Inject;\n+import org.hamcrest.MatcherAssert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(application = TestApplication.class)\n+public class LocalDataStoreTest {\n+\n+  private static final User TEST_USER =\n+      User.builder().setId(\"user id\").setEmail(\"user@gmail.com\").setDisplayName(\"user 1\").build();\n+\n+  private static final MultipleChoice TEST_MULTIPLE_CHOICE =\n+      MultipleChoice.newBuilder()\n+          .setCardinality(Cardinality.SELECT_ONE)\n+          .setOptions(\n+              ImmutableList.of(\n+                  Option.newBuilder().setCode(\"a\").setLabel(\"Name\").build(),\n+                  Option.newBuilder().setCode(\"b\").setLabel(\"Age\").build()))\n+          .build();\n+\n+  private static final Field TEST_FIELD =\n+      Field.newBuilder()\n+          .setId(\"field id\")\n+          .setLabel(\"field label\")\n+          .setRequired(false)\n+          .setType(Type.MULTIPLE_CHOICE)\n+          .setMultipleChoice(TEST_MULTIPLE_CHOICE)\n+          .build();\n+\n+  private static final Form TEST_FORM =\n+      Form.newBuilder()\n+          .setId(\"form id\")\n+          .setElements(ImmutableList.of(Element.ofField(TEST_FIELD)))\n+          .build();\n+\n+  private static final Layer TEST_LAYER =\n+      Layer.newBuilder()\n+          .setId(\"layer id\")\n+          .setItemLabel(\"item label\")\n+          .setListHeading(\"heading title\")\n+          .setDefaultStyle(Style.builder().setColor(\"000\").build())\n+          .setForm(TEST_FORM)\n+          .build();\n+\n+  private static final Project TEST_PROJECT =\n+      Project.newBuilder()\n+          .setId(\"project id\")\n+          .setTitle(\"project 1\")\n+          .setDescription(\"foo description\")\n+          .putLayer(\"layer id\", TEST_LAYER)\n+          .build();\n+\n+  private static final Point TEST_POINT =\n+      Point.newBuilder().setLatitude(110.0).setLongitude(-23.1).build();\n+\n+  private static final FeatureMutation TEST_FEATURE_MUTATION =\n+      FeatureMutation.builder()\n+          .setId(1L)\n+          .setFeatureId(\"feature id\")\n+          .setType(Mutation.Type.CREATE)\n+          .setUserId(\"user id\")\n+          .setProjectId(\"project id\")\n+          .setLayerId(\"layer id\")\n+          .setNewLocation(Optional.ofNullable(TEST_POINT))\n+          .setClientTimestamp(new Date())\n+          .build();\n+\n+  private static final ObservationMutation TEST_OBSERVATION_MUTATION =\n+      ObservationMutation.builder()\n+          .setObservationId(\"observation id\")\n+          .setType(Mutation.Type.CREATE)\n+          .setProjectId(\"project id\")\n+          .setFeatureId(\"feature id\")\n+          .setLayerId(\"layer id\")\n+          .setFormId(\"form id\")\n+          .setUserId(\"user id\")\n+          .setResponseDeltas(\n+              ImmutableList.of(\n+                  ResponseDelta.builder()\n+                      .setFieldId(\"field id\")\n+                      .setNewResponse(TextResponse.fromString(\"response for field id\"))\n+                      .build()))\n+          .setClientTimestamp(new Date())\n+          .build();\n+\n+  private static final Tile TEST_PENDING_TILE =\n+      Tile.newBuilder()\n+          .setId(\"id_1\")\n+          .setState(State.PENDING)\n+          .setPath(\"some_path 1\")\n+          .setUrl(\"some_url 1\")\n+          .build();\n+\n+  private static final Tile TEST_DOWNLOADED_TILE =\n+      Tile.newBuilder()\n+          .setId(\"id_2\")\n+          .setState(State.DOWNLOADED)\n+          .setPath(\"some_path 2\")\n+          .setUrl(\"some_url 2\")\n+          .build();\n+\n+  private static final Tile TEST_FAILED_TILE =\n+      Tile.newBuilder()\n+          .setId(\"id_3\")\n+          .setState(State.FAILED)\n+          .setPath(\"some_path 3\")\n+          .setUrl(\"some_url 3\")\n+          .build();\n+\n+  private static final OfflineArea TEST_OFFLINE_AREA =\n+      OfflineArea.newBuilder()\n+          .setId(\"id_1\")\n+          .setBounds(LatLngBounds.builder().include(new LatLng(0.0, 0.0)).build())\n+          .setState(OfflineArea.State.PENDING)\n+          .build();\n+\n+  // This rule makes sure that Room executes all the database operations instantly.\n+  @Rule public InstantTaskExecutorRule instantTaskExecutorRule = new InstantTaskExecutorRule();\n+\n+  @Inject LocalDataStore localDataStore;\n+\n+  private static void assertEqualsIgnoreId(\n+      ObservationMutation expected, ObservationMutation actual) {\n+    // TODO: Id is auto-assigned to ObservationMutation.\n+    //  If we try to give it while inserting, then it causes problems. Improve this behavior.\n+    //  So, copy the id from actual to expected and then compare the objects.\n+    expected = expected.toBuilder().setId(actual.getId()).build();\n+    assertThat(expected).isEqualTo(actual);\n+  }\n+\n+  private static void assertObservation(ObservationMutation mutation, Observation observation) {\n+    assertThat(mutation.getObservationId()).isEqualTo(observation.getId());\n+    assertThat(mutation.getFeatureId()).isEqualTo(observation.getFeature().getId());\n+    assertThat(TEST_USER).isEqualTo(observation.getCreated().getUser());\n+    assertThat(TEST_FORM).isEqualTo(observation.getForm());\n+    assertThat(TEST_PROJECT).isEqualTo(observation.getProject());\n+    assertThat(TEST_USER).isEqualTo(observation.getLastModified().getUser());\n+    MatcherAssert.assertThat(\n+        ResponseMap.builder().applyDeltas(mutation.getResponseDeltas()).build(),\n+        samePropertyValuesAs(observation.getResponses()));\n+  }\n+\n+  private static void assertFeature(String featureId, Point point, Feature feature) {\n+    assertThat(featureId).isEqualTo(feature.getId());\n+    assertThat(TEST_PROJECT).isEqualTo(feature.getProject());\n+    assertThat(TEST_LAYER.getItemLabel()).isEqualTo(feature.getTitle());\n+    assertThat(TEST_LAYER).isEqualTo(feature.getLayer());\n+    assertThat(feature.getCustomId()).isNull();\n+    assertThat(feature.getCaption()).isNull();\n+    assertThat(point).isEqualTo(feature.getPoint());\n+    assertThat(TEST_USER).isEqualTo(feature.getCreated().getUser());\n+    assertThat(TEST_USER).isEqualTo(feature.getLastModified().getUser());\n+  }\n+\n+  @Before\n+  public void setUp() {\n+    DaggerTestComponent.create().inject(this);\n+  }\n+\n+  @Test\n+  public void testInsertProject() {\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).test().assertComplete();\n+  }\n+\n+  @Test\n+  public void testGetProjects() {\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+    localDataStore.getProjects().test().assertValue(ImmutableList.of(TEST_PROJECT));\n+  }\n+\n+  @Test\n+  public void testGetProjectById() {\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+    localDataStore.getProjectById(\"project id\").test().assertValue(TEST_PROJECT);\n+  }\n+\n+  @Test\n+  public void testDeleteProject() {\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+    localDataStore.deleteProject(TEST_PROJECT).test().assertComplete();\n+    localDataStore.getProjects().test().assertValue(AbstractCollection::isEmpty);\n+  }\n+\n+  @Test\n+  public void testInsertUser() {\n+    localDataStore.insertOrUpdateUser(TEST_USER).test().assertComplete();\n+  }\n+\n+  @Test\n+  public void testGetUser() {\n+    localDataStore.insertOrUpdateUser(TEST_USER).blockingAwait();\n+    localDataStore.getUser(\"user id\").test().assertValue(TEST_USER);\n+  }\n+\n+  @Test\n+  public void testApplyAndEnqueue_featureMutation() {\n+    localDataStore.insertOrUpdateUser(TEST_USER).blockingAwait();\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+\n+    localDataStore.applyAndEnqueue(TEST_FEATURE_MUTATION).test().assertComplete();\n+\n+    // assert that mutation is saved to local database\n+    localDataStore\n+        .getPendingMutations(\"feature id\")\n+        .test()\n+        .assertValue(ImmutableList.of(TEST_FEATURE_MUTATION));\n+\n+    // assert feature is saved to local database\n+    Feature feature = localDataStore.getFeature(TEST_PROJECT, \"feature id\").blockingGet();\n+    assertFeature(\"feature id\", TEST_POINT, feature);\n+  }\n+\n+  @Test\n+  public void testGetFeaturesOnceAndStream() {\n+    localDataStore.insertOrUpdateUser(TEST_USER).blockingAwait();\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+\n+    TestSubscriber<ImmutableSet<Feature>> subscriber =\n+        localDataStore.getFeaturesOnceAndStream(TEST_PROJECT).test();\n+\n+    subscriber.assertValueCount(1);\n+    subscriber.assertValueAt(0, AbstractCollection::isEmpty);\n+\n+    FeatureMutation mutation = TEST_FEATURE_MUTATION;", "originalCommit": "761beb1cb735a763ac3b42a577be73b8274f2cd6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAxNjE4OQ==", "url": "https://github.com/google/ground-android/pull/425#discussion_r411016189", "bodyText": "We could also use subscriber.assertValues() here instead of two assertValueAt calls.", "author": "gino-m", "createdAt": "2020-04-19T23:29:19Z", "path": "gnd/src/test/java/com/google/android/gnd/persistence/local/LocalDataStoreTest.java", "diffHunk": "@@ -0,0 +1,480 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.local;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.hamcrest.Matchers.samePropertyValuesAs;\n+\n+import androidx.arch.core.executor.testing.InstantTaskExecutorRule;\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.TestApplication;\n+import com.google.android.gnd.inject.DaggerTestComponent;\n+import com.google.android.gnd.model.Mutation;\n+import com.google.android.gnd.model.Project;\n+import com.google.android.gnd.model.User;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.model.basemap.tile.Tile.State;\n+import com.google.android.gnd.model.feature.Feature;\n+import com.google.android.gnd.model.feature.FeatureMutation;\n+import com.google.android.gnd.model.feature.Point;\n+import com.google.android.gnd.model.form.Element;\n+import com.google.android.gnd.model.form.Field;\n+import com.google.android.gnd.model.form.Field.Type;\n+import com.google.android.gnd.model.form.Form;\n+import com.google.android.gnd.model.form.MultipleChoice;\n+import com.google.android.gnd.model.form.MultipleChoice.Cardinality;\n+import com.google.android.gnd.model.form.Option;\n+import com.google.android.gnd.model.layer.Layer;\n+import com.google.android.gnd.model.layer.Style;\n+import com.google.android.gnd.model.observation.Observation;\n+import com.google.android.gnd.model.observation.ObservationMutation;\n+import com.google.android.gnd.model.observation.ResponseDelta;\n+import com.google.android.gnd.model.observation.ResponseMap;\n+import com.google.android.gnd.model.observation.TextResponse;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import io.reactivex.subscribers.TestSubscriber;\n+import java.util.AbstractCollection;\n+import java.util.Date;\n+import java8.util.Optional;\n+import javax.inject.Inject;\n+import org.hamcrest.MatcherAssert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(application = TestApplication.class)\n+public class LocalDataStoreTest {\n+\n+  private static final User TEST_USER =\n+      User.builder().setId(\"user id\").setEmail(\"user@gmail.com\").setDisplayName(\"user 1\").build();\n+\n+  private static final MultipleChoice TEST_MULTIPLE_CHOICE =\n+      MultipleChoice.newBuilder()\n+          .setCardinality(Cardinality.SELECT_ONE)\n+          .setOptions(\n+              ImmutableList.of(\n+                  Option.newBuilder().setCode(\"a\").setLabel(\"Name\").build(),\n+                  Option.newBuilder().setCode(\"b\").setLabel(\"Age\").build()))\n+          .build();\n+\n+  private static final Field TEST_FIELD =\n+      Field.newBuilder()\n+          .setId(\"field id\")\n+          .setLabel(\"field label\")\n+          .setRequired(false)\n+          .setType(Type.MULTIPLE_CHOICE)\n+          .setMultipleChoice(TEST_MULTIPLE_CHOICE)\n+          .build();\n+\n+  private static final Form TEST_FORM =\n+      Form.newBuilder()\n+          .setId(\"form id\")\n+          .setElements(ImmutableList.of(Element.ofField(TEST_FIELD)))\n+          .build();\n+\n+  private static final Layer TEST_LAYER =\n+      Layer.newBuilder()\n+          .setId(\"layer id\")\n+          .setItemLabel(\"item label\")\n+          .setListHeading(\"heading title\")\n+          .setDefaultStyle(Style.builder().setColor(\"000\").build())\n+          .setForm(TEST_FORM)\n+          .build();\n+\n+  private static final Project TEST_PROJECT =\n+      Project.newBuilder()\n+          .setId(\"project id\")\n+          .setTitle(\"project 1\")\n+          .setDescription(\"foo description\")\n+          .putLayer(\"layer id\", TEST_LAYER)\n+          .build();\n+\n+  private static final Point TEST_POINT =\n+      Point.newBuilder().setLatitude(110.0).setLongitude(-23.1).build();\n+\n+  private static final FeatureMutation TEST_FEATURE_MUTATION =\n+      FeatureMutation.builder()\n+          .setId(1L)\n+          .setFeatureId(\"feature id\")\n+          .setType(Mutation.Type.CREATE)\n+          .setUserId(\"user id\")\n+          .setProjectId(\"project id\")\n+          .setLayerId(\"layer id\")\n+          .setNewLocation(Optional.ofNullable(TEST_POINT))\n+          .setClientTimestamp(new Date())\n+          .build();\n+\n+  private static final ObservationMutation TEST_OBSERVATION_MUTATION =\n+      ObservationMutation.builder()\n+          .setObservationId(\"observation id\")\n+          .setType(Mutation.Type.CREATE)\n+          .setProjectId(\"project id\")\n+          .setFeatureId(\"feature id\")\n+          .setLayerId(\"layer id\")\n+          .setFormId(\"form id\")\n+          .setUserId(\"user id\")\n+          .setResponseDeltas(\n+              ImmutableList.of(\n+                  ResponseDelta.builder()\n+                      .setFieldId(\"field id\")\n+                      .setNewResponse(TextResponse.fromString(\"response for field id\"))\n+                      .build()))\n+          .setClientTimestamp(new Date())\n+          .build();\n+\n+  private static final Tile TEST_PENDING_TILE =\n+      Tile.newBuilder()\n+          .setId(\"id_1\")\n+          .setState(State.PENDING)\n+          .setPath(\"some_path 1\")\n+          .setUrl(\"some_url 1\")\n+          .build();\n+\n+  private static final Tile TEST_DOWNLOADED_TILE =\n+      Tile.newBuilder()\n+          .setId(\"id_2\")\n+          .setState(State.DOWNLOADED)\n+          .setPath(\"some_path 2\")\n+          .setUrl(\"some_url 2\")\n+          .build();\n+\n+  private static final Tile TEST_FAILED_TILE =\n+      Tile.newBuilder()\n+          .setId(\"id_3\")\n+          .setState(State.FAILED)\n+          .setPath(\"some_path 3\")\n+          .setUrl(\"some_url 3\")\n+          .build();\n+\n+  private static final OfflineArea TEST_OFFLINE_AREA =\n+      OfflineArea.newBuilder()\n+          .setId(\"id_1\")\n+          .setBounds(LatLngBounds.builder().include(new LatLng(0.0, 0.0)).build())\n+          .setState(OfflineArea.State.PENDING)\n+          .build();\n+\n+  // This rule makes sure that Room executes all the database operations instantly.\n+  @Rule public InstantTaskExecutorRule instantTaskExecutorRule = new InstantTaskExecutorRule();\n+\n+  @Inject LocalDataStore localDataStore;\n+\n+  private static void assertEqualsIgnoreId(\n+      ObservationMutation expected, ObservationMutation actual) {\n+    // TODO: Id is auto-assigned to ObservationMutation.\n+    //  If we try to give it while inserting, then it causes problems. Improve this behavior.\n+    //  So, copy the id from actual to expected and then compare the objects.\n+    expected = expected.toBuilder().setId(actual.getId()).build();\n+    assertThat(expected).isEqualTo(actual);\n+  }\n+\n+  private static void assertObservation(ObservationMutation mutation, Observation observation) {\n+    assertThat(mutation.getObservationId()).isEqualTo(observation.getId());\n+    assertThat(mutation.getFeatureId()).isEqualTo(observation.getFeature().getId());\n+    assertThat(TEST_USER).isEqualTo(observation.getCreated().getUser());\n+    assertThat(TEST_FORM).isEqualTo(observation.getForm());\n+    assertThat(TEST_PROJECT).isEqualTo(observation.getProject());\n+    assertThat(TEST_USER).isEqualTo(observation.getLastModified().getUser());\n+    MatcherAssert.assertThat(\n+        ResponseMap.builder().applyDeltas(mutation.getResponseDeltas()).build(),\n+        samePropertyValuesAs(observation.getResponses()));\n+  }\n+\n+  private static void assertFeature(String featureId, Point point, Feature feature) {\n+    assertThat(featureId).isEqualTo(feature.getId());\n+    assertThat(TEST_PROJECT).isEqualTo(feature.getProject());\n+    assertThat(TEST_LAYER.getItemLabel()).isEqualTo(feature.getTitle());\n+    assertThat(TEST_LAYER).isEqualTo(feature.getLayer());\n+    assertThat(feature.getCustomId()).isNull();\n+    assertThat(feature.getCaption()).isNull();\n+    assertThat(point).isEqualTo(feature.getPoint());\n+    assertThat(TEST_USER).isEqualTo(feature.getCreated().getUser());\n+    assertThat(TEST_USER).isEqualTo(feature.getLastModified().getUser());\n+  }\n+\n+  @Before\n+  public void setUp() {\n+    DaggerTestComponent.create().inject(this);\n+  }\n+\n+  @Test\n+  public void testInsertProject() {\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).test().assertComplete();\n+  }\n+\n+  @Test\n+  public void testGetProjects() {\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+    localDataStore.getProjects().test().assertValue(ImmutableList.of(TEST_PROJECT));\n+  }\n+\n+  @Test\n+  public void testGetProjectById() {\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+    localDataStore.getProjectById(\"project id\").test().assertValue(TEST_PROJECT);\n+  }\n+\n+  @Test\n+  public void testDeleteProject() {\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+    localDataStore.deleteProject(TEST_PROJECT).test().assertComplete();\n+    localDataStore.getProjects().test().assertValue(AbstractCollection::isEmpty);\n+  }\n+\n+  @Test\n+  public void testInsertUser() {\n+    localDataStore.insertOrUpdateUser(TEST_USER).test().assertComplete();\n+  }\n+\n+  @Test\n+  public void testGetUser() {\n+    localDataStore.insertOrUpdateUser(TEST_USER).blockingAwait();\n+    localDataStore.getUser(\"user id\").test().assertValue(TEST_USER);\n+  }\n+\n+  @Test\n+  public void testApplyAndEnqueue_featureMutation() {\n+    localDataStore.insertOrUpdateUser(TEST_USER).blockingAwait();\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+\n+    localDataStore.applyAndEnqueue(TEST_FEATURE_MUTATION).test().assertComplete();\n+\n+    // assert that mutation is saved to local database\n+    localDataStore\n+        .getPendingMutations(\"feature id\")\n+        .test()\n+        .assertValue(ImmutableList.of(TEST_FEATURE_MUTATION));\n+\n+    // assert feature is saved to local database\n+    Feature feature = localDataStore.getFeature(TEST_PROJECT, \"feature id\").blockingGet();\n+    assertFeature(\"feature id\", TEST_POINT, feature);\n+  }\n+\n+  @Test\n+  public void testGetFeaturesOnceAndStream() {\n+    localDataStore.insertOrUpdateUser(TEST_USER).blockingAwait();\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+\n+    TestSubscriber<ImmutableSet<Feature>> subscriber =\n+        localDataStore.getFeaturesOnceAndStream(TEST_PROJECT).test();\n+\n+    subscriber.assertValueCount(1);\n+    subscriber.assertValueAt(0, AbstractCollection::isEmpty);\n+\n+    FeatureMutation mutation = TEST_FEATURE_MUTATION;\n+    localDataStore.applyAndEnqueue(mutation).blockingAwait();\n+\n+    Feature feature =\n+        localDataStore.getFeature(TEST_PROJECT, mutation.getFeatureId()).blockingGet();\n+\n+    subscriber.assertValueCount(2);\n+    subscriber.assertValueAt(0, AbstractCollection::isEmpty);", "originalCommit": "761beb1cb735a763ac3b42a577be73b8274f2cd6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAxNjIwOA==", "url": "https://github.com/google/ground-android/pull/425#discussion_r411016208", "bodyText": "Please inline.", "author": "gino-m", "createdAt": "2020-04-19T23:29:26Z", "path": "gnd/src/test/java/com/google/android/gnd/persistence/local/LocalDataStoreTest.java", "diffHunk": "@@ -0,0 +1,480 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.local;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.hamcrest.Matchers.samePropertyValuesAs;\n+\n+import androidx.arch.core.executor.testing.InstantTaskExecutorRule;\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.TestApplication;\n+import com.google.android.gnd.inject.DaggerTestComponent;\n+import com.google.android.gnd.model.Mutation;\n+import com.google.android.gnd.model.Project;\n+import com.google.android.gnd.model.User;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.model.basemap.tile.Tile.State;\n+import com.google.android.gnd.model.feature.Feature;\n+import com.google.android.gnd.model.feature.FeatureMutation;\n+import com.google.android.gnd.model.feature.Point;\n+import com.google.android.gnd.model.form.Element;\n+import com.google.android.gnd.model.form.Field;\n+import com.google.android.gnd.model.form.Field.Type;\n+import com.google.android.gnd.model.form.Form;\n+import com.google.android.gnd.model.form.MultipleChoice;\n+import com.google.android.gnd.model.form.MultipleChoice.Cardinality;\n+import com.google.android.gnd.model.form.Option;\n+import com.google.android.gnd.model.layer.Layer;\n+import com.google.android.gnd.model.layer.Style;\n+import com.google.android.gnd.model.observation.Observation;\n+import com.google.android.gnd.model.observation.ObservationMutation;\n+import com.google.android.gnd.model.observation.ResponseDelta;\n+import com.google.android.gnd.model.observation.ResponseMap;\n+import com.google.android.gnd.model.observation.TextResponse;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import io.reactivex.subscribers.TestSubscriber;\n+import java.util.AbstractCollection;\n+import java.util.Date;\n+import java8.util.Optional;\n+import javax.inject.Inject;\n+import org.hamcrest.MatcherAssert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(application = TestApplication.class)\n+public class LocalDataStoreTest {\n+\n+  private static final User TEST_USER =\n+      User.builder().setId(\"user id\").setEmail(\"user@gmail.com\").setDisplayName(\"user 1\").build();\n+\n+  private static final MultipleChoice TEST_MULTIPLE_CHOICE =\n+      MultipleChoice.newBuilder()\n+          .setCardinality(Cardinality.SELECT_ONE)\n+          .setOptions(\n+              ImmutableList.of(\n+                  Option.newBuilder().setCode(\"a\").setLabel(\"Name\").build(),\n+                  Option.newBuilder().setCode(\"b\").setLabel(\"Age\").build()))\n+          .build();\n+\n+  private static final Field TEST_FIELD =\n+      Field.newBuilder()\n+          .setId(\"field id\")\n+          .setLabel(\"field label\")\n+          .setRequired(false)\n+          .setType(Type.MULTIPLE_CHOICE)\n+          .setMultipleChoice(TEST_MULTIPLE_CHOICE)\n+          .build();\n+\n+  private static final Form TEST_FORM =\n+      Form.newBuilder()\n+          .setId(\"form id\")\n+          .setElements(ImmutableList.of(Element.ofField(TEST_FIELD)))\n+          .build();\n+\n+  private static final Layer TEST_LAYER =\n+      Layer.newBuilder()\n+          .setId(\"layer id\")\n+          .setItemLabel(\"item label\")\n+          .setListHeading(\"heading title\")\n+          .setDefaultStyle(Style.builder().setColor(\"000\").build())\n+          .setForm(TEST_FORM)\n+          .build();\n+\n+  private static final Project TEST_PROJECT =\n+      Project.newBuilder()\n+          .setId(\"project id\")\n+          .setTitle(\"project 1\")\n+          .setDescription(\"foo description\")\n+          .putLayer(\"layer id\", TEST_LAYER)\n+          .build();\n+\n+  private static final Point TEST_POINT =\n+      Point.newBuilder().setLatitude(110.0).setLongitude(-23.1).build();\n+\n+  private static final FeatureMutation TEST_FEATURE_MUTATION =\n+      FeatureMutation.builder()\n+          .setId(1L)\n+          .setFeatureId(\"feature id\")\n+          .setType(Mutation.Type.CREATE)\n+          .setUserId(\"user id\")\n+          .setProjectId(\"project id\")\n+          .setLayerId(\"layer id\")\n+          .setNewLocation(Optional.ofNullable(TEST_POINT))\n+          .setClientTimestamp(new Date())\n+          .build();\n+\n+  private static final ObservationMutation TEST_OBSERVATION_MUTATION =\n+      ObservationMutation.builder()\n+          .setObservationId(\"observation id\")\n+          .setType(Mutation.Type.CREATE)\n+          .setProjectId(\"project id\")\n+          .setFeatureId(\"feature id\")\n+          .setLayerId(\"layer id\")\n+          .setFormId(\"form id\")\n+          .setUserId(\"user id\")\n+          .setResponseDeltas(\n+              ImmutableList.of(\n+                  ResponseDelta.builder()\n+                      .setFieldId(\"field id\")\n+                      .setNewResponse(TextResponse.fromString(\"response for field id\"))\n+                      .build()))\n+          .setClientTimestamp(new Date())\n+          .build();\n+\n+  private static final Tile TEST_PENDING_TILE =\n+      Tile.newBuilder()\n+          .setId(\"id_1\")\n+          .setState(State.PENDING)\n+          .setPath(\"some_path 1\")\n+          .setUrl(\"some_url 1\")\n+          .build();\n+\n+  private static final Tile TEST_DOWNLOADED_TILE =\n+      Tile.newBuilder()\n+          .setId(\"id_2\")\n+          .setState(State.DOWNLOADED)\n+          .setPath(\"some_path 2\")\n+          .setUrl(\"some_url 2\")\n+          .build();\n+\n+  private static final Tile TEST_FAILED_TILE =\n+      Tile.newBuilder()\n+          .setId(\"id_3\")\n+          .setState(State.FAILED)\n+          .setPath(\"some_path 3\")\n+          .setUrl(\"some_url 3\")\n+          .build();\n+\n+  private static final OfflineArea TEST_OFFLINE_AREA =\n+      OfflineArea.newBuilder()\n+          .setId(\"id_1\")\n+          .setBounds(LatLngBounds.builder().include(new LatLng(0.0, 0.0)).build())\n+          .setState(OfflineArea.State.PENDING)\n+          .build();\n+\n+  // This rule makes sure that Room executes all the database operations instantly.\n+  @Rule public InstantTaskExecutorRule instantTaskExecutorRule = new InstantTaskExecutorRule();\n+\n+  @Inject LocalDataStore localDataStore;\n+\n+  private static void assertEqualsIgnoreId(\n+      ObservationMutation expected, ObservationMutation actual) {\n+    // TODO: Id is auto-assigned to ObservationMutation.\n+    //  If we try to give it while inserting, then it causes problems. Improve this behavior.\n+    //  So, copy the id from actual to expected and then compare the objects.\n+    expected = expected.toBuilder().setId(actual.getId()).build();\n+    assertThat(expected).isEqualTo(actual);\n+  }\n+\n+  private static void assertObservation(ObservationMutation mutation, Observation observation) {\n+    assertThat(mutation.getObservationId()).isEqualTo(observation.getId());\n+    assertThat(mutation.getFeatureId()).isEqualTo(observation.getFeature().getId());\n+    assertThat(TEST_USER).isEqualTo(observation.getCreated().getUser());\n+    assertThat(TEST_FORM).isEqualTo(observation.getForm());\n+    assertThat(TEST_PROJECT).isEqualTo(observation.getProject());\n+    assertThat(TEST_USER).isEqualTo(observation.getLastModified().getUser());\n+    MatcherAssert.assertThat(\n+        ResponseMap.builder().applyDeltas(mutation.getResponseDeltas()).build(),\n+        samePropertyValuesAs(observation.getResponses()));\n+  }\n+\n+  private static void assertFeature(String featureId, Point point, Feature feature) {\n+    assertThat(featureId).isEqualTo(feature.getId());\n+    assertThat(TEST_PROJECT).isEqualTo(feature.getProject());\n+    assertThat(TEST_LAYER.getItemLabel()).isEqualTo(feature.getTitle());\n+    assertThat(TEST_LAYER).isEqualTo(feature.getLayer());\n+    assertThat(feature.getCustomId()).isNull();\n+    assertThat(feature.getCaption()).isNull();\n+    assertThat(point).isEqualTo(feature.getPoint());\n+    assertThat(TEST_USER).isEqualTo(feature.getCreated().getUser());\n+    assertThat(TEST_USER).isEqualTo(feature.getLastModified().getUser());\n+  }\n+\n+  @Before\n+  public void setUp() {\n+    DaggerTestComponent.create().inject(this);\n+  }\n+\n+  @Test\n+  public void testInsertProject() {\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).test().assertComplete();\n+  }\n+\n+  @Test\n+  public void testGetProjects() {\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+    localDataStore.getProjects().test().assertValue(ImmutableList.of(TEST_PROJECT));\n+  }\n+\n+  @Test\n+  public void testGetProjectById() {\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+    localDataStore.getProjectById(\"project id\").test().assertValue(TEST_PROJECT);\n+  }\n+\n+  @Test\n+  public void testDeleteProject() {\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+    localDataStore.deleteProject(TEST_PROJECT).test().assertComplete();\n+    localDataStore.getProjects().test().assertValue(AbstractCollection::isEmpty);\n+  }\n+\n+  @Test\n+  public void testInsertUser() {\n+    localDataStore.insertOrUpdateUser(TEST_USER).test().assertComplete();\n+  }\n+\n+  @Test\n+  public void testGetUser() {\n+    localDataStore.insertOrUpdateUser(TEST_USER).blockingAwait();\n+    localDataStore.getUser(\"user id\").test().assertValue(TEST_USER);\n+  }\n+\n+  @Test\n+  public void testApplyAndEnqueue_featureMutation() {\n+    localDataStore.insertOrUpdateUser(TEST_USER).blockingAwait();\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+\n+    localDataStore.applyAndEnqueue(TEST_FEATURE_MUTATION).test().assertComplete();\n+\n+    // assert that mutation is saved to local database\n+    localDataStore\n+        .getPendingMutations(\"feature id\")\n+        .test()\n+        .assertValue(ImmutableList.of(TEST_FEATURE_MUTATION));\n+\n+    // assert feature is saved to local database\n+    Feature feature = localDataStore.getFeature(TEST_PROJECT, \"feature id\").blockingGet();\n+    assertFeature(\"feature id\", TEST_POINT, feature);\n+  }\n+\n+  @Test\n+  public void testGetFeaturesOnceAndStream() {\n+    localDataStore.insertOrUpdateUser(TEST_USER).blockingAwait();\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+\n+    TestSubscriber<ImmutableSet<Feature>> subscriber =\n+        localDataStore.getFeaturesOnceAndStream(TEST_PROJECT).test();\n+\n+    subscriber.assertValueCount(1);\n+    subscriber.assertValueAt(0, AbstractCollection::isEmpty);\n+\n+    FeatureMutation mutation = TEST_FEATURE_MUTATION;\n+    localDataStore.applyAndEnqueue(mutation).blockingAwait();\n+\n+    Feature feature =\n+        localDataStore.getFeature(TEST_PROJECT, mutation.getFeatureId()).blockingGet();\n+\n+    subscriber.assertValueCount(2);\n+    subscriber.assertValueAt(0, AbstractCollection::isEmpty);\n+    subscriber.assertValueAt(1, ImmutableSet.of(feature));\n+  }\n+\n+  @Test\n+  public void testUpdateMutations() {\n+    localDataStore.insertOrUpdateUser(TEST_USER).blockingAwait();\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+\n+    FeatureMutation mutation = TEST_FEATURE_MUTATION;", "originalCommit": "761beb1cb735a763ac3b42a577be73b8274f2cd6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAxNjM2Mg==", "url": "https://github.com/google/ground-android/pull/425#discussion_r411016362", "bodyText": "Shall we create a constant, TEST_POINT_2, for example, for use here and throughout instead? Otherwise it may seem like these values might have special meaning.\nAlso, consider creating a constructor method createTestFeatureMutation(point) that you can use for both cases.", "author": "gino-m", "createdAt": "2020-04-19T23:30:09Z", "path": "gnd/src/test/java/com/google/android/gnd/persistence/local/LocalDataStoreTest.java", "diffHunk": "@@ -0,0 +1,480 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.local;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.hamcrest.Matchers.samePropertyValuesAs;\n+\n+import androidx.arch.core.executor.testing.InstantTaskExecutorRule;\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.TestApplication;\n+import com.google.android.gnd.inject.DaggerTestComponent;\n+import com.google.android.gnd.model.Mutation;\n+import com.google.android.gnd.model.Project;\n+import com.google.android.gnd.model.User;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.model.basemap.tile.Tile.State;\n+import com.google.android.gnd.model.feature.Feature;\n+import com.google.android.gnd.model.feature.FeatureMutation;\n+import com.google.android.gnd.model.feature.Point;\n+import com.google.android.gnd.model.form.Element;\n+import com.google.android.gnd.model.form.Field;\n+import com.google.android.gnd.model.form.Field.Type;\n+import com.google.android.gnd.model.form.Form;\n+import com.google.android.gnd.model.form.MultipleChoice;\n+import com.google.android.gnd.model.form.MultipleChoice.Cardinality;\n+import com.google.android.gnd.model.form.Option;\n+import com.google.android.gnd.model.layer.Layer;\n+import com.google.android.gnd.model.layer.Style;\n+import com.google.android.gnd.model.observation.Observation;\n+import com.google.android.gnd.model.observation.ObservationMutation;\n+import com.google.android.gnd.model.observation.ResponseDelta;\n+import com.google.android.gnd.model.observation.ResponseMap;\n+import com.google.android.gnd.model.observation.TextResponse;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import io.reactivex.subscribers.TestSubscriber;\n+import java.util.AbstractCollection;\n+import java.util.Date;\n+import java8.util.Optional;\n+import javax.inject.Inject;\n+import org.hamcrest.MatcherAssert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(application = TestApplication.class)\n+public class LocalDataStoreTest {\n+\n+  private static final User TEST_USER =\n+      User.builder().setId(\"user id\").setEmail(\"user@gmail.com\").setDisplayName(\"user 1\").build();\n+\n+  private static final MultipleChoice TEST_MULTIPLE_CHOICE =\n+      MultipleChoice.newBuilder()\n+          .setCardinality(Cardinality.SELECT_ONE)\n+          .setOptions(\n+              ImmutableList.of(\n+                  Option.newBuilder().setCode(\"a\").setLabel(\"Name\").build(),\n+                  Option.newBuilder().setCode(\"b\").setLabel(\"Age\").build()))\n+          .build();\n+\n+  private static final Field TEST_FIELD =\n+      Field.newBuilder()\n+          .setId(\"field id\")\n+          .setLabel(\"field label\")\n+          .setRequired(false)\n+          .setType(Type.MULTIPLE_CHOICE)\n+          .setMultipleChoice(TEST_MULTIPLE_CHOICE)\n+          .build();\n+\n+  private static final Form TEST_FORM =\n+      Form.newBuilder()\n+          .setId(\"form id\")\n+          .setElements(ImmutableList.of(Element.ofField(TEST_FIELD)))\n+          .build();\n+\n+  private static final Layer TEST_LAYER =\n+      Layer.newBuilder()\n+          .setId(\"layer id\")\n+          .setItemLabel(\"item label\")\n+          .setListHeading(\"heading title\")\n+          .setDefaultStyle(Style.builder().setColor(\"000\").build())\n+          .setForm(TEST_FORM)\n+          .build();\n+\n+  private static final Project TEST_PROJECT =\n+      Project.newBuilder()\n+          .setId(\"project id\")\n+          .setTitle(\"project 1\")\n+          .setDescription(\"foo description\")\n+          .putLayer(\"layer id\", TEST_LAYER)\n+          .build();\n+\n+  private static final Point TEST_POINT =\n+      Point.newBuilder().setLatitude(110.0).setLongitude(-23.1).build();\n+\n+  private static final FeatureMutation TEST_FEATURE_MUTATION =\n+      FeatureMutation.builder()\n+          .setId(1L)\n+          .setFeatureId(\"feature id\")\n+          .setType(Mutation.Type.CREATE)\n+          .setUserId(\"user id\")\n+          .setProjectId(\"project id\")\n+          .setLayerId(\"layer id\")\n+          .setNewLocation(Optional.ofNullable(TEST_POINT))\n+          .setClientTimestamp(new Date())\n+          .build();\n+\n+  private static final ObservationMutation TEST_OBSERVATION_MUTATION =\n+      ObservationMutation.builder()\n+          .setObservationId(\"observation id\")\n+          .setType(Mutation.Type.CREATE)\n+          .setProjectId(\"project id\")\n+          .setFeatureId(\"feature id\")\n+          .setLayerId(\"layer id\")\n+          .setFormId(\"form id\")\n+          .setUserId(\"user id\")\n+          .setResponseDeltas(\n+              ImmutableList.of(\n+                  ResponseDelta.builder()\n+                      .setFieldId(\"field id\")\n+                      .setNewResponse(TextResponse.fromString(\"response for field id\"))\n+                      .build()))\n+          .setClientTimestamp(new Date())\n+          .build();\n+\n+  private static final Tile TEST_PENDING_TILE =\n+      Tile.newBuilder()\n+          .setId(\"id_1\")\n+          .setState(State.PENDING)\n+          .setPath(\"some_path 1\")\n+          .setUrl(\"some_url 1\")\n+          .build();\n+\n+  private static final Tile TEST_DOWNLOADED_TILE =\n+      Tile.newBuilder()\n+          .setId(\"id_2\")\n+          .setState(State.DOWNLOADED)\n+          .setPath(\"some_path 2\")\n+          .setUrl(\"some_url 2\")\n+          .build();\n+\n+  private static final Tile TEST_FAILED_TILE =\n+      Tile.newBuilder()\n+          .setId(\"id_3\")\n+          .setState(State.FAILED)\n+          .setPath(\"some_path 3\")\n+          .setUrl(\"some_url 3\")\n+          .build();\n+\n+  private static final OfflineArea TEST_OFFLINE_AREA =\n+      OfflineArea.newBuilder()\n+          .setId(\"id_1\")\n+          .setBounds(LatLngBounds.builder().include(new LatLng(0.0, 0.0)).build())\n+          .setState(OfflineArea.State.PENDING)\n+          .build();\n+\n+  // This rule makes sure that Room executes all the database operations instantly.\n+  @Rule public InstantTaskExecutorRule instantTaskExecutorRule = new InstantTaskExecutorRule();\n+\n+  @Inject LocalDataStore localDataStore;\n+\n+  private static void assertEqualsIgnoreId(\n+      ObservationMutation expected, ObservationMutation actual) {\n+    // TODO: Id is auto-assigned to ObservationMutation.\n+    //  If we try to give it while inserting, then it causes problems. Improve this behavior.\n+    //  So, copy the id from actual to expected and then compare the objects.\n+    expected = expected.toBuilder().setId(actual.getId()).build();\n+    assertThat(expected).isEqualTo(actual);\n+  }\n+\n+  private static void assertObservation(ObservationMutation mutation, Observation observation) {\n+    assertThat(mutation.getObservationId()).isEqualTo(observation.getId());\n+    assertThat(mutation.getFeatureId()).isEqualTo(observation.getFeature().getId());\n+    assertThat(TEST_USER).isEqualTo(observation.getCreated().getUser());\n+    assertThat(TEST_FORM).isEqualTo(observation.getForm());\n+    assertThat(TEST_PROJECT).isEqualTo(observation.getProject());\n+    assertThat(TEST_USER).isEqualTo(observation.getLastModified().getUser());\n+    MatcherAssert.assertThat(\n+        ResponseMap.builder().applyDeltas(mutation.getResponseDeltas()).build(),\n+        samePropertyValuesAs(observation.getResponses()));\n+  }\n+\n+  private static void assertFeature(String featureId, Point point, Feature feature) {\n+    assertThat(featureId).isEqualTo(feature.getId());\n+    assertThat(TEST_PROJECT).isEqualTo(feature.getProject());\n+    assertThat(TEST_LAYER.getItemLabel()).isEqualTo(feature.getTitle());\n+    assertThat(TEST_LAYER).isEqualTo(feature.getLayer());\n+    assertThat(feature.getCustomId()).isNull();\n+    assertThat(feature.getCaption()).isNull();\n+    assertThat(point).isEqualTo(feature.getPoint());\n+    assertThat(TEST_USER).isEqualTo(feature.getCreated().getUser());\n+    assertThat(TEST_USER).isEqualTo(feature.getLastModified().getUser());\n+  }\n+\n+  @Before\n+  public void setUp() {\n+    DaggerTestComponent.create().inject(this);\n+  }\n+\n+  @Test\n+  public void testInsertProject() {\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).test().assertComplete();\n+  }\n+\n+  @Test\n+  public void testGetProjects() {\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+    localDataStore.getProjects().test().assertValue(ImmutableList.of(TEST_PROJECT));\n+  }\n+\n+  @Test\n+  public void testGetProjectById() {\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+    localDataStore.getProjectById(\"project id\").test().assertValue(TEST_PROJECT);\n+  }\n+\n+  @Test\n+  public void testDeleteProject() {\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+    localDataStore.deleteProject(TEST_PROJECT).test().assertComplete();\n+    localDataStore.getProjects().test().assertValue(AbstractCollection::isEmpty);\n+  }\n+\n+  @Test\n+  public void testInsertUser() {\n+    localDataStore.insertOrUpdateUser(TEST_USER).test().assertComplete();\n+  }\n+\n+  @Test\n+  public void testGetUser() {\n+    localDataStore.insertOrUpdateUser(TEST_USER).blockingAwait();\n+    localDataStore.getUser(\"user id\").test().assertValue(TEST_USER);\n+  }\n+\n+  @Test\n+  public void testApplyAndEnqueue_featureMutation() {\n+    localDataStore.insertOrUpdateUser(TEST_USER).blockingAwait();\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+\n+    localDataStore.applyAndEnqueue(TEST_FEATURE_MUTATION).test().assertComplete();\n+\n+    // assert that mutation is saved to local database\n+    localDataStore\n+        .getPendingMutations(\"feature id\")\n+        .test()\n+        .assertValue(ImmutableList.of(TEST_FEATURE_MUTATION));\n+\n+    // assert feature is saved to local database\n+    Feature feature = localDataStore.getFeature(TEST_PROJECT, \"feature id\").blockingGet();\n+    assertFeature(\"feature id\", TEST_POINT, feature);\n+  }\n+\n+  @Test\n+  public void testGetFeaturesOnceAndStream() {\n+    localDataStore.insertOrUpdateUser(TEST_USER).blockingAwait();\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+\n+    TestSubscriber<ImmutableSet<Feature>> subscriber =\n+        localDataStore.getFeaturesOnceAndStream(TEST_PROJECT).test();\n+\n+    subscriber.assertValueCount(1);\n+    subscriber.assertValueAt(0, AbstractCollection::isEmpty);\n+\n+    FeatureMutation mutation = TEST_FEATURE_MUTATION;\n+    localDataStore.applyAndEnqueue(mutation).blockingAwait();\n+\n+    Feature feature =\n+        localDataStore.getFeature(TEST_PROJECT, mutation.getFeatureId()).blockingGet();\n+\n+    subscriber.assertValueCount(2);\n+    subscriber.assertValueAt(0, AbstractCollection::isEmpty);\n+    subscriber.assertValueAt(1, ImmutableSet.of(feature));\n+  }\n+\n+  @Test\n+  public void testUpdateMutations() {\n+    localDataStore.insertOrUpdateUser(TEST_USER).blockingAwait();\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+\n+    FeatureMutation mutation = TEST_FEATURE_MUTATION;\n+    localDataStore.applyAndEnqueue(mutation).blockingAwait();\n+\n+    Point newPoint = Point.newBuilder().setLatitude(51.0).setLongitude(44.0).build();", "originalCommit": "761beb1cb735a763ac3b42a577be73b8274f2cd6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAxNjk1Ng==", "url": "https://github.com/google/ground-android/pull/425#discussion_r411016956", "bodyText": "Please use assertThat(savedMutations).containsExactly instead of hasSize, get, isEqualTo.", "author": "gino-m", "createdAt": "2020-04-19T23:33:33Z", "path": "gnd/src/test/java/com/google/android/gnd/persistence/local/LocalDataStoreTest.java", "diffHunk": "@@ -0,0 +1,480 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.local;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.hamcrest.Matchers.samePropertyValuesAs;\n+\n+import androidx.arch.core.executor.testing.InstantTaskExecutorRule;\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.TestApplication;\n+import com.google.android.gnd.inject.DaggerTestComponent;\n+import com.google.android.gnd.model.Mutation;\n+import com.google.android.gnd.model.Project;\n+import com.google.android.gnd.model.User;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.model.basemap.tile.Tile.State;\n+import com.google.android.gnd.model.feature.Feature;\n+import com.google.android.gnd.model.feature.FeatureMutation;\n+import com.google.android.gnd.model.feature.Point;\n+import com.google.android.gnd.model.form.Element;\n+import com.google.android.gnd.model.form.Field;\n+import com.google.android.gnd.model.form.Field.Type;\n+import com.google.android.gnd.model.form.Form;\n+import com.google.android.gnd.model.form.MultipleChoice;\n+import com.google.android.gnd.model.form.MultipleChoice.Cardinality;\n+import com.google.android.gnd.model.form.Option;\n+import com.google.android.gnd.model.layer.Layer;\n+import com.google.android.gnd.model.layer.Style;\n+import com.google.android.gnd.model.observation.Observation;\n+import com.google.android.gnd.model.observation.ObservationMutation;\n+import com.google.android.gnd.model.observation.ResponseDelta;\n+import com.google.android.gnd.model.observation.ResponseMap;\n+import com.google.android.gnd.model.observation.TextResponse;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import io.reactivex.subscribers.TestSubscriber;\n+import java.util.AbstractCollection;\n+import java.util.Date;\n+import java8.util.Optional;\n+import javax.inject.Inject;\n+import org.hamcrest.MatcherAssert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(application = TestApplication.class)\n+public class LocalDataStoreTest {\n+\n+  private static final User TEST_USER =\n+      User.builder().setId(\"user id\").setEmail(\"user@gmail.com\").setDisplayName(\"user 1\").build();\n+\n+  private static final MultipleChoice TEST_MULTIPLE_CHOICE =\n+      MultipleChoice.newBuilder()\n+          .setCardinality(Cardinality.SELECT_ONE)\n+          .setOptions(\n+              ImmutableList.of(\n+                  Option.newBuilder().setCode(\"a\").setLabel(\"Name\").build(),\n+                  Option.newBuilder().setCode(\"b\").setLabel(\"Age\").build()))\n+          .build();\n+\n+  private static final Field TEST_FIELD =\n+      Field.newBuilder()\n+          .setId(\"field id\")\n+          .setLabel(\"field label\")\n+          .setRequired(false)\n+          .setType(Type.MULTIPLE_CHOICE)\n+          .setMultipleChoice(TEST_MULTIPLE_CHOICE)\n+          .build();\n+\n+  private static final Form TEST_FORM =\n+      Form.newBuilder()\n+          .setId(\"form id\")\n+          .setElements(ImmutableList.of(Element.ofField(TEST_FIELD)))\n+          .build();\n+\n+  private static final Layer TEST_LAYER =\n+      Layer.newBuilder()\n+          .setId(\"layer id\")\n+          .setItemLabel(\"item label\")\n+          .setListHeading(\"heading title\")\n+          .setDefaultStyle(Style.builder().setColor(\"000\").build())\n+          .setForm(TEST_FORM)\n+          .build();\n+\n+  private static final Project TEST_PROJECT =\n+      Project.newBuilder()\n+          .setId(\"project id\")\n+          .setTitle(\"project 1\")\n+          .setDescription(\"foo description\")\n+          .putLayer(\"layer id\", TEST_LAYER)\n+          .build();\n+\n+  private static final Point TEST_POINT =\n+      Point.newBuilder().setLatitude(110.0).setLongitude(-23.1).build();\n+\n+  private static final FeatureMutation TEST_FEATURE_MUTATION =\n+      FeatureMutation.builder()\n+          .setId(1L)\n+          .setFeatureId(\"feature id\")\n+          .setType(Mutation.Type.CREATE)\n+          .setUserId(\"user id\")\n+          .setProjectId(\"project id\")\n+          .setLayerId(\"layer id\")\n+          .setNewLocation(Optional.ofNullable(TEST_POINT))\n+          .setClientTimestamp(new Date())\n+          .build();\n+\n+  private static final ObservationMutation TEST_OBSERVATION_MUTATION =\n+      ObservationMutation.builder()\n+          .setObservationId(\"observation id\")\n+          .setType(Mutation.Type.CREATE)\n+          .setProjectId(\"project id\")\n+          .setFeatureId(\"feature id\")\n+          .setLayerId(\"layer id\")\n+          .setFormId(\"form id\")\n+          .setUserId(\"user id\")\n+          .setResponseDeltas(\n+              ImmutableList.of(\n+                  ResponseDelta.builder()\n+                      .setFieldId(\"field id\")\n+                      .setNewResponse(TextResponse.fromString(\"response for field id\"))\n+                      .build()))\n+          .setClientTimestamp(new Date())\n+          .build();\n+\n+  private static final Tile TEST_PENDING_TILE =\n+      Tile.newBuilder()\n+          .setId(\"id_1\")\n+          .setState(State.PENDING)\n+          .setPath(\"some_path 1\")\n+          .setUrl(\"some_url 1\")\n+          .build();\n+\n+  private static final Tile TEST_DOWNLOADED_TILE =\n+      Tile.newBuilder()\n+          .setId(\"id_2\")\n+          .setState(State.DOWNLOADED)\n+          .setPath(\"some_path 2\")\n+          .setUrl(\"some_url 2\")\n+          .build();\n+\n+  private static final Tile TEST_FAILED_TILE =\n+      Tile.newBuilder()\n+          .setId(\"id_3\")\n+          .setState(State.FAILED)\n+          .setPath(\"some_path 3\")\n+          .setUrl(\"some_url 3\")\n+          .build();\n+\n+  private static final OfflineArea TEST_OFFLINE_AREA =\n+      OfflineArea.newBuilder()\n+          .setId(\"id_1\")\n+          .setBounds(LatLngBounds.builder().include(new LatLng(0.0, 0.0)).build())\n+          .setState(OfflineArea.State.PENDING)\n+          .build();\n+\n+  // This rule makes sure that Room executes all the database operations instantly.\n+  @Rule public InstantTaskExecutorRule instantTaskExecutorRule = new InstantTaskExecutorRule();\n+\n+  @Inject LocalDataStore localDataStore;\n+\n+  private static void assertEqualsIgnoreId(\n+      ObservationMutation expected, ObservationMutation actual) {\n+    // TODO: Id is auto-assigned to ObservationMutation.\n+    //  If we try to give it while inserting, then it causes problems. Improve this behavior.\n+    //  So, copy the id from actual to expected and then compare the objects.\n+    expected = expected.toBuilder().setId(actual.getId()).build();\n+    assertThat(expected).isEqualTo(actual);\n+  }\n+\n+  private static void assertObservation(ObservationMutation mutation, Observation observation) {\n+    assertThat(mutation.getObservationId()).isEqualTo(observation.getId());\n+    assertThat(mutation.getFeatureId()).isEqualTo(observation.getFeature().getId());\n+    assertThat(TEST_USER).isEqualTo(observation.getCreated().getUser());\n+    assertThat(TEST_FORM).isEqualTo(observation.getForm());\n+    assertThat(TEST_PROJECT).isEqualTo(observation.getProject());\n+    assertThat(TEST_USER).isEqualTo(observation.getLastModified().getUser());\n+    MatcherAssert.assertThat(\n+        ResponseMap.builder().applyDeltas(mutation.getResponseDeltas()).build(),\n+        samePropertyValuesAs(observation.getResponses()));\n+  }\n+\n+  private static void assertFeature(String featureId, Point point, Feature feature) {\n+    assertThat(featureId).isEqualTo(feature.getId());\n+    assertThat(TEST_PROJECT).isEqualTo(feature.getProject());\n+    assertThat(TEST_LAYER.getItemLabel()).isEqualTo(feature.getTitle());\n+    assertThat(TEST_LAYER).isEqualTo(feature.getLayer());\n+    assertThat(feature.getCustomId()).isNull();\n+    assertThat(feature.getCaption()).isNull();\n+    assertThat(point).isEqualTo(feature.getPoint());\n+    assertThat(TEST_USER).isEqualTo(feature.getCreated().getUser());\n+    assertThat(TEST_USER).isEqualTo(feature.getLastModified().getUser());\n+  }\n+\n+  @Before\n+  public void setUp() {\n+    DaggerTestComponent.create().inject(this);\n+  }\n+\n+  @Test\n+  public void testInsertProject() {\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).test().assertComplete();\n+  }\n+\n+  @Test\n+  public void testGetProjects() {\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+    localDataStore.getProjects().test().assertValue(ImmutableList.of(TEST_PROJECT));\n+  }\n+\n+  @Test\n+  public void testGetProjectById() {\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+    localDataStore.getProjectById(\"project id\").test().assertValue(TEST_PROJECT);\n+  }\n+\n+  @Test\n+  public void testDeleteProject() {\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+    localDataStore.deleteProject(TEST_PROJECT).test().assertComplete();\n+    localDataStore.getProjects().test().assertValue(AbstractCollection::isEmpty);\n+  }\n+\n+  @Test\n+  public void testInsertUser() {\n+    localDataStore.insertOrUpdateUser(TEST_USER).test().assertComplete();\n+  }\n+\n+  @Test\n+  public void testGetUser() {\n+    localDataStore.insertOrUpdateUser(TEST_USER).blockingAwait();\n+    localDataStore.getUser(\"user id\").test().assertValue(TEST_USER);\n+  }\n+\n+  @Test\n+  public void testApplyAndEnqueue_featureMutation() {\n+    localDataStore.insertOrUpdateUser(TEST_USER).blockingAwait();\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+\n+    localDataStore.applyAndEnqueue(TEST_FEATURE_MUTATION).test().assertComplete();\n+\n+    // assert that mutation is saved to local database\n+    localDataStore\n+        .getPendingMutations(\"feature id\")\n+        .test()\n+        .assertValue(ImmutableList.of(TEST_FEATURE_MUTATION));\n+\n+    // assert feature is saved to local database\n+    Feature feature = localDataStore.getFeature(TEST_PROJECT, \"feature id\").blockingGet();\n+    assertFeature(\"feature id\", TEST_POINT, feature);\n+  }\n+\n+  @Test\n+  public void testGetFeaturesOnceAndStream() {\n+    localDataStore.insertOrUpdateUser(TEST_USER).blockingAwait();\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+\n+    TestSubscriber<ImmutableSet<Feature>> subscriber =\n+        localDataStore.getFeaturesOnceAndStream(TEST_PROJECT).test();\n+\n+    subscriber.assertValueCount(1);\n+    subscriber.assertValueAt(0, AbstractCollection::isEmpty);\n+\n+    FeatureMutation mutation = TEST_FEATURE_MUTATION;\n+    localDataStore.applyAndEnqueue(mutation).blockingAwait();\n+\n+    Feature feature =\n+        localDataStore.getFeature(TEST_PROJECT, mutation.getFeatureId()).blockingGet();\n+\n+    subscriber.assertValueCount(2);\n+    subscriber.assertValueAt(0, AbstractCollection::isEmpty);\n+    subscriber.assertValueAt(1, ImmutableSet.of(feature));\n+  }\n+\n+  @Test\n+  public void testUpdateMutations() {\n+    localDataStore.insertOrUpdateUser(TEST_USER).blockingAwait();\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+\n+    FeatureMutation mutation = TEST_FEATURE_MUTATION;\n+    localDataStore.applyAndEnqueue(mutation).blockingAwait();\n+\n+    Point newPoint = Point.newBuilder().setLatitude(51.0).setLongitude(44.0).build();\n+    Mutation updatedMutation =\n+        mutation.toBuilder().setNewLocation(Optional.ofNullable(newPoint)).build();\n+\n+    localDataStore.updateMutations(ImmutableList.of(updatedMutation)).test().assertComplete();\n+\n+    ImmutableList<Mutation> savedMutations =\n+        localDataStore.getPendingMutations(updatedMutation.getFeatureId()).blockingGet();\n+    assertThat(savedMutations).hasSize(1);", "originalCommit": "761beb1cb735a763ac3b42a577be73b8274f2cd6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAxNzE3NA==", "url": "https://github.com/google/ground-android/pull/425#discussion_r411017174", "bodyText": "Same here re containsExactly. I think it will also check the type for you.", "author": "gino-m", "createdAt": "2020-04-19T23:34:33Z", "path": "gnd/src/test/java/com/google/android/gnd/persistence/local/LocalDataStoreTest.java", "diffHunk": "@@ -0,0 +1,480 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.persistence.local;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.hamcrest.Matchers.samePropertyValuesAs;\n+\n+import androidx.arch.core.executor.testing.InstantTaskExecutorRule;\n+import com.google.android.gms.maps.model.LatLng;\n+import com.google.android.gms.maps.model.LatLngBounds;\n+import com.google.android.gnd.TestApplication;\n+import com.google.android.gnd.inject.DaggerTestComponent;\n+import com.google.android.gnd.model.Mutation;\n+import com.google.android.gnd.model.Project;\n+import com.google.android.gnd.model.User;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.model.basemap.tile.Tile.State;\n+import com.google.android.gnd.model.feature.Feature;\n+import com.google.android.gnd.model.feature.FeatureMutation;\n+import com.google.android.gnd.model.feature.Point;\n+import com.google.android.gnd.model.form.Element;\n+import com.google.android.gnd.model.form.Field;\n+import com.google.android.gnd.model.form.Field.Type;\n+import com.google.android.gnd.model.form.Form;\n+import com.google.android.gnd.model.form.MultipleChoice;\n+import com.google.android.gnd.model.form.MultipleChoice.Cardinality;\n+import com.google.android.gnd.model.form.Option;\n+import com.google.android.gnd.model.layer.Layer;\n+import com.google.android.gnd.model.layer.Style;\n+import com.google.android.gnd.model.observation.Observation;\n+import com.google.android.gnd.model.observation.ObservationMutation;\n+import com.google.android.gnd.model.observation.ResponseDelta;\n+import com.google.android.gnd.model.observation.ResponseMap;\n+import com.google.android.gnd.model.observation.TextResponse;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import io.reactivex.subscribers.TestSubscriber;\n+import java.util.AbstractCollection;\n+import java.util.Date;\n+import java8.util.Optional;\n+import javax.inject.Inject;\n+import org.hamcrest.MatcherAssert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(application = TestApplication.class)\n+public class LocalDataStoreTest {\n+\n+  private static final User TEST_USER =\n+      User.builder().setId(\"user id\").setEmail(\"user@gmail.com\").setDisplayName(\"user 1\").build();\n+\n+  private static final MultipleChoice TEST_MULTIPLE_CHOICE =\n+      MultipleChoice.newBuilder()\n+          .setCardinality(Cardinality.SELECT_ONE)\n+          .setOptions(\n+              ImmutableList.of(\n+                  Option.newBuilder().setCode(\"a\").setLabel(\"Name\").build(),\n+                  Option.newBuilder().setCode(\"b\").setLabel(\"Age\").build()))\n+          .build();\n+\n+  private static final Field TEST_FIELD =\n+      Field.newBuilder()\n+          .setId(\"field id\")\n+          .setLabel(\"field label\")\n+          .setRequired(false)\n+          .setType(Type.MULTIPLE_CHOICE)\n+          .setMultipleChoice(TEST_MULTIPLE_CHOICE)\n+          .build();\n+\n+  private static final Form TEST_FORM =\n+      Form.newBuilder()\n+          .setId(\"form id\")\n+          .setElements(ImmutableList.of(Element.ofField(TEST_FIELD)))\n+          .build();\n+\n+  private static final Layer TEST_LAYER =\n+      Layer.newBuilder()\n+          .setId(\"layer id\")\n+          .setItemLabel(\"item label\")\n+          .setListHeading(\"heading title\")\n+          .setDefaultStyle(Style.builder().setColor(\"000\").build())\n+          .setForm(TEST_FORM)\n+          .build();\n+\n+  private static final Project TEST_PROJECT =\n+      Project.newBuilder()\n+          .setId(\"project id\")\n+          .setTitle(\"project 1\")\n+          .setDescription(\"foo description\")\n+          .putLayer(\"layer id\", TEST_LAYER)\n+          .build();\n+\n+  private static final Point TEST_POINT =\n+      Point.newBuilder().setLatitude(110.0).setLongitude(-23.1).build();\n+\n+  private static final FeatureMutation TEST_FEATURE_MUTATION =\n+      FeatureMutation.builder()\n+          .setId(1L)\n+          .setFeatureId(\"feature id\")\n+          .setType(Mutation.Type.CREATE)\n+          .setUserId(\"user id\")\n+          .setProjectId(\"project id\")\n+          .setLayerId(\"layer id\")\n+          .setNewLocation(Optional.ofNullable(TEST_POINT))\n+          .setClientTimestamp(new Date())\n+          .build();\n+\n+  private static final ObservationMutation TEST_OBSERVATION_MUTATION =\n+      ObservationMutation.builder()\n+          .setObservationId(\"observation id\")\n+          .setType(Mutation.Type.CREATE)\n+          .setProjectId(\"project id\")\n+          .setFeatureId(\"feature id\")\n+          .setLayerId(\"layer id\")\n+          .setFormId(\"form id\")\n+          .setUserId(\"user id\")\n+          .setResponseDeltas(\n+              ImmutableList.of(\n+                  ResponseDelta.builder()\n+                      .setFieldId(\"field id\")\n+                      .setNewResponse(TextResponse.fromString(\"response for field id\"))\n+                      .build()))\n+          .setClientTimestamp(new Date())\n+          .build();\n+\n+  private static final Tile TEST_PENDING_TILE =\n+      Tile.newBuilder()\n+          .setId(\"id_1\")\n+          .setState(State.PENDING)\n+          .setPath(\"some_path 1\")\n+          .setUrl(\"some_url 1\")\n+          .build();\n+\n+  private static final Tile TEST_DOWNLOADED_TILE =\n+      Tile.newBuilder()\n+          .setId(\"id_2\")\n+          .setState(State.DOWNLOADED)\n+          .setPath(\"some_path 2\")\n+          .setUrl(\"some_url 2\")\n+          .build();\n+\n+  private static final Tile TEST_FAILED_TILE =\n+      Tile.newBuilder()\n+          .setId(\"id_3\")\n+          .setState(State.FAILED)\n+          .setPath(\"some_path 3\")\n+          .setUrl(\"some_url 3\")\n+          .build();\n+\n+  private static final OfflineArea TEST_OFFLINE_AREA =\n+      OfflineArea.newBuilder()\n+          .setId(\"id_1\")\n+          .setBounds(LatLngBounds.builder().include(new LatLng(0.0, 0.0)).build())\n+          .setState(OfflineArea.State.PENDING)\n+          .build();\n+\n+  // This rule makes sure that Room executes all the database operations instantly.\n+  @Rule public InstantTaskExecutorRule instantTaskExecutorRule = new InstantTaskExecutorRule();\n+\n+  @Inject LocalDataStore localDataStore;\n+\n+  private static void assertEqualsIgnoreId(\n+      ObservationMutation expected, ObservationMutation actual) {\n+    // TODO: Id is auto-assigned to ObservationMutation.\n+    //  If we try to give it while inserting, then it causes problems. Improve this behavior.\n+    //  So, copy the id from actual to expected and then compare the objects.\n+    expected = expected.toBuilder().setId(actual.getId()).build();\n+    assertThat(expected).isEqualTo(actual);\n+  }\n+\n+  private static void assertObservation(ObservationMutation mutation, Observation observation) {\n+    assertThat(mutation.getObservationId()).isEqualTo(observation.getId());\n+    assertThat(mutation.getFeatureId()).isEqualTo(observation.getFeature().getId());\n+    assertThat(TEST_USER).isEqualTo(observation.getCreated().getUser());\n+    assertThat(TEST_FORM).isEqualTo(observation.getForm());\n+    assertThat(TEST_PROJECT).isEqualTo(observation.getProject());\n+    assertThat(TEST_USER).isEqualTo(observation.getLastModified().getUser());\n+    MatcherAssert.assertThat(\n+        ResponseMap.builder().applyDeltas(mutation.getResponseDeltas()).build(),\n+        samePropertyValuesAs(observation.getResponses()));\n+  }\n+\n+  private static void assertFeature(String featureId, Point point, Feature feature) {\n+    assertThat(featureId).isEqualTo(feature.getId());\n+    assertThat(TEST_PROJECT).isEqualTo(feature.getProject());\n+    assertThat(TEST_LAYER.getItemLabel()).isEqualTo(feature.getTitle());\n+    assertThat(TEST_LAYER).isEqualTo(feature.getLayer());\n+    assertThat(feature.getCustomId()).isNull();\n+    assertThat(feature.getCaption()).isNull();\n+    assertThat(point).isEqualTo(feature.getPoint());\n+    assertThat(TEST_USER).isEqualTo(feature.getCreated().getUser());\n+    assertThat(TEST_USER).isEqualTo(feature.getLastModified().getUser());\n+  }\n+\n+  @Before\n+  public void setUp() {\n+    DaggerTestComponent.create().inject(this);\n+  }\n+\n+  @Test\n+  public void testInsertProject() {\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).test().assertComplete();\n+  }\n+\n+  @Test\n+  public void testGetProjects() {\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+    localDataStore.getProjects().test().assertValue(ImmutableList.of(TEST_PROJECT));\n+  }\n+\n+  @Test\n+  public void testGetProjectById() {\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+    localDataStore.getProjectById(\"project id\").test().assertValue(TEST_PROJECT);\n+  }\n+\n+  @Test\n+  public void testDeleteProject() {\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+    localDataStore.deleteProject(TEST_PROJECT).test().assertComplete();\n+    localDataStore.getProjects().test().assertValue(AbstractCollection::isEmpty);\n+  }\n+\n+  @Test\n+  public void testInsertUser() {\n+    localDataStore.insertOrUpdateUser(TEST_USER).test().assertComplete();\n+  }\n+\n+  @Test\n+  public void testGetUser() {\n+    localDataStore.insertOrUpdateUser(TEST_USER).blockingAwait();\n+    localDataStore.getUser(\"user id\").test().assertValue(TEST_USER);\n+  }\n+\n+  @Test\n+  public void testApplyAndEnqueue_featureMutation() {\n+    localDataStore.insertOrUpdateUser(TEST_USER).blockingAwait();\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+\n+    localDataStore.applyAndEnqueue(TEST_FEATURE_MUTATION).test().assertComplete();\n+\n+    // assert that mutation is saved to local database\n+    localDataStore\n+        .getPendingMutations(\"feature id\")\n+        .test()\n+        .assertValue(ImmutableList.of(TEST_FEATURE_MUTATION));\n+\n+    // assert feature is saved to local database\n+    Feature feature = localDataStore.getFeature(TEST_PROJECT, \"feature id\").blockingGet();\n+    assertFeature(\"feature id\", TEST_POINT, feature);\n+  }\n+\n+  @Test\n+  public void testGetFeaturesOnceAndStream() {\n+    localDataStore.insertOrUpdateUser(TEST_USER).blockingAwait();\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+\n+    TestSubscriber<ImmutableSet<Feature>> subscriber =\n+        localDataStore.getFeaturesOnceAndStream(TEST_PROJECT).test();\n+\n+    subscriber.assertValueCount(1);\n+    subscriber.assertValueAt(0, AbstractCollection::isEmpty);\n+\n+    FeatureMutation mutation = TEST_FEATURE_MUTATION;\n+    localDataStore.applyAndEnqueue(mutation).blockingAwait();\n+\n+    Feature feature =\n+        localDataStore.getFeature(TEST_PROJECT, mutation.getFeatureId()).blockingGet();\n+\n+    subscriber.assertValueCount(2);\n+    subscriber.assertValueAt(0, AbstractCollection::isEmpty);\n+    subscriber.assertValueAt(1, ImmutableSet.of(feature));\n+  }\n+\n+  @Test\n+  public void testUpdateMutations() {\n+    localDataStore.insertOrUpdateUser(TEST_USER).blockingAwait();\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+\n+    FeatureMutation mutation = TEST_FEATURE_MUTATION;\n+    localDataStore.applyAndEnqueue(mutation).blockingAwait();\n+\n+    Point newPoint = Point.newBuilder().setLatitude(51.0).setLongitude(44.0).build();\n+    Mutation updatedMutation =\n+        mutation.toBuilder().setNewLocation(Optional.ofNullable(newPoint)).build();\n+\n+    localDataStore.updateMutations(ImmutableList.of(updatedMutation)).test().assertComplete();\n+\n+    ImmutableList<Mutation> savedMutations =\n+        localDataStore.getPendingMutations(updatedMutation.getFeatureId()).blockingGet();\n+    assertThat(savedMutations).hasSize(1);\n+\n+    FeatureMutation savedMutation = (FeatureMutation) savedMutations.get(0);\n+    assertThat(newPoint).isEqualTo(savedMutation.getNewLocation().get());\n+  }\n+\n+  @Test\n+  public void testRemovePendingMutation() {\n+    localDataStore.insertOrUpdateUser(TEST_USER).blockingAwait();\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+    localDataStore.applyAndEnqueue(TEST_FEATURE_MUTATION).blockingAwait();\n+\n+    localDataStore\n+        .removePendingMutations(ImmutableList.of(TEST_FEATURE_MUTATION))\n+        .test()\n+        .assertComplete();\n+\n+    localDataStore\n+        .getPendingMutations(\"feature id\")\n+        .test()\n+        .assertValue(AbstractCollection::isEmpty);\n+  }\n+\n+  @Test\n+  public void testMergeFeature() {\n+    localDataStore.insertOrUpdateUser(TEST_USER).blockingAwait();\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+    localDataStore.applyAndEnqueue(TEST_FEATURE_MUTATION).blockingAwait();\n+\n+    Feature feature = localDataStore.getFeature(TEST_PROJECT, \"feature id\").blockingGet();\n+    Point point = Point.newBuilder().setLongitude(11.0).setLatitude(33.0).build();\n+    feature = feature.toBuilder().setPoint(point).build();\n+    localDataStore.mergeFeature(feature).test().assertComplete();\n+\n+    Feature newFeature = localDataStore.getFeature(TEST_PROJECT, \"feature id\").blockingGet();\n+    assertFeature(\"feature id\", point, newFeature);\n+  }\n+\n+  @Test\n+  public void testApplyAndEnqueue_observationMutation() {\n+    localDataStore.insertOrUpdateUser(TEST_USER).blockingAwait();\n+    localDataStore.insertOrUpdateProject(TEST_PROJECT).blockingAwait();\n+    localDataStore.applyAndEnqueue(TEST_FEATURE_MUTATION).blockingAwait();\n+\n+    localDataStore.applyAndEnqueue(TEST_OBSERVATION_MUTATION).test().assertComplete();\n+\n+    ImmutableList<Mutation> savedMutations =\n+        localDataStore.getPendingMutations(\"feature id\").blockingGet();\n+    assertThat(savedMutations).hasSize(2);", "originalCommit": "761beb1cb735a763ac3b42a577be73b8274f2cd6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "76dd61abf1b3b456fe227211a4a872fe25738aa1", "url": "https://github.com/google/ground-android/commit/76dd61abf1b3b456fe227211a4a872fe25738aa1", "message": "Merge branch 'master' into testing\n\n# Conflicts:\n#\tgnd/build.gradle\n#\tgnd/src/main/java/com/google/android/gnd/persistence/local/LocalDataStore.java\n#\tgnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java", "committedDate": "2020-04-21T15:49:53Z", "type": "commit"}, {"oid": "1f1cd41fa37f61ec46c7231b22991b2652368c51", "url": "https://github.com/google/ground-android/commit/1f1cd41fa37f61ec46c7231b22991b2652368c51", "message": "Fix merge conflicts", "committedDate": "2020-04-21T15:54:31Z", "type": "commit"}, {"oid": "4f74d29f2686816ee5e428802146783fcf1fa39c", "url": "https://github.com/google/ground-android/commit/4f74d29f2686816ee5e428802146783fcf1fa39c", "message": "Assign ids to observation mutation test data\n\n - This allows us to compare the objects directly instead of having to compare one-by-one", "committedDate": "2020-04-21T16:41:10Z", "type": "commit"}, {"oid": "2761a5ab9bd4132639eecc151f2a577001f9acde", "url": "https://github.com/google/ground-android/commit/2761a5ab9bd4132639eecc151f2a577001f9acde", "message": "Create test point 2", "committedDate": "2020-04-21T17:13:08Z", "type": "commit"}, {"oid": "0778b6a25cc50b3169e445bb9c3703558d9d3c06", "url": "https://github.com/google/ground-android/commit/0778b6a25cc50b3169e445bb9c3703558d9d3c06", "message": "Create test feature mutation using helper method\n\n - this is to interchange POINT at ease", "committedDate": "2020-04-21T17:25:04Z", "type": "commit"}, {"oid": "922711c0f11d1643173b42eb7ae3ef07f0a4d00d", "url": "https://github.com/google/ground-android/commit/922711c0f11d1643173b42eb7ae3ef07f0a4d00d", "message": "Assert streaming events all at once", "committedDate": "2020-04-21T17:41:08Z", "type": "commit"}, {"oid": "743120839642fb7ee34c7d26baf65362a51d433a", "url": "https://github.com/google/ground-android/commit/743120839642fb7ee34c7d26baf65362a51d433a", "message": "inline variable", "committedDate": "2020-04-21T17:43:00Z", "type": "commit"}, {"oid": "62fbb0344a6bce840de65a8c27e04df262f5c53c", "url": "https://github.com/google/ground-android/commit/62fbb0344a6bce840de65a8c27e04df262f5c53c", "message": "Combine together insert and get tests for project and user", "committedDate": "2020-04-21T17:46:38Z", "type": "commit"}, {"oid": "a13efb166f1b37a7c5a514131a8b64b701ada5d1", "url": "https://github.com/google/ground-android/commit/a13efb166f1b37a7c5a514131a8b64b701ada5d1", "message": "Remove assertFeature method\n\n - we were mostly comparing static values. so moved those assertions directly instead of verifying the entire object", "committedDate": "2020-04-21T18:02:15Z", "type": "commit"}, {"oid": "a8538d608ce52d1e8f7039614156025609d8f941", "url": "https://github.com/google/ground-android/commit/a8538d608ce52d1e8f7039614156025609d8f941", "message": "Merge branch 'master' into testing", "committedDate": "2020-04-21T19:05:55Z", "type": "commit"}]}